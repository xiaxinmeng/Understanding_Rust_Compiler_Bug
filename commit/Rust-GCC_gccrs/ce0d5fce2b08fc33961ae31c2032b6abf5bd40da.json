{"sha": "ce0d5fce2b08fc33961ae31c2032b6abf5bd40da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UwZDVmY2UyYjA4ZmMzMzk2MWFlMzFjMjAzMmI2YWJmNWJkNDBkYQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2001-10-04T05:34:47Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2001-10-04T05:34:47Z"}, "message": "SequenceInputStream.java: Merge with Classpath\n\n\t* java/io/SequenceInputStream.java: Merge with Classpath\n\t* java/io/StringBufferInputStream.java: Ditto\n\t* java/util/Collections.java: Remerge with Classpath\n\nFrom-SVN: r46005", "tree": {"sha": "52a097293728b3e19e2c51a3382a5984edd0a0d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52a097293728b3e19e2c51a3382a5984edd0a0d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce0d5fce2b08fc33961ae31c2032b6abf5bd40da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce0d5fce2b08fc33961ae31c2032b6abf5bd40da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce0d5fce2b08fc33961ae31c2032b6abf5bd40da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce0d5fce2b08fc33961ae31c2032b6abf5bd40da/comments", "author": null, "committer": null, "parents": [{"sha": "7754e0a9684f48609a9869619bbb405b5bcd9f47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7754e0a9684f48609a9869619bbb405b5bcd9f47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7754e0a9684f48609a9869619bbb405b5bcd9f47"}], "stats": {"total": 271, "additions": 239, "deletions": 32}, "files": [{"sha": "b2767d02bbef263894ca0238cea46acd21fbf3f8", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce0d5fce2b08fc33961ae31c2032b6abf5bd40da/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce0d5fce2b08fc33961ae31c2032b6abf5bd40da/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ce0d5fce2b08fc33961ae31c2032b6abf5bd40da", "patch": "@@ -1,3 +1,9 @@\n+2001-10-03  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/io/SequenceInputStream.java: Merge with Classpath\n+\t* java/io/StringBufferInputStream.java: Ditto\n+\t* java/util/Collections.java: Remerge with Classpath\n+\n 2001-10-03  Tom Tromey  <tromey@redhat.com>\n \n \t* java/lang/ref/natReference.cc (add_to_hash): Set n->next before"}, {"sha": "f125953ebea76b1faacdf65d1dc70b5aebb5de89", "filename": "libjava/java/io/SequenceInputStream.java", "status": "modified", "additions": 112, "deletions": 12, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce0d5fce2b08fc33961ae31c2032b6abf5bd40da/libjava%2Fjava%2Fio%2FSequenceInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce0d5fce2b08fc33961ae31c2032b6abf5bd40da/libjava%2Fjava%2Fio%2FSequenceInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FSequenceInputStream.java?ref=ce0d5fce2b08fc33961ae31c2032b6abf5bd40da", "patch": "@@ -1,49 +1,107 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* SequenceInputStream.java -- Reads multiple input streams in sequence\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.io;\n \n import java.util.Enumeration;\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date November 3, 1998.  \n- */\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n  \n+/**\n+  * This class merges a sequence of multiple <code>InputStream</code>'s in\n+  * order to form a single logical stream that can be read by applications\n+  * that expect only one stream.\n+  * <p>\n+  * The streams passed to the constructor method are read in order until\n+  * they return -1 to indicate they are at end of stream.  When a stream\n+  * reports end of stream, it is closed, then the next stream is read.\n+  * When the last stream is closed, the next attempt to read from this\n+  * stream will return a -1 to indicate it is at end of stream.\n+  * <p>\n+  * If this stream is closed prior to all subordinate streams being read\n+  * to completion, all subordinate streams are closed.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Warren Levy <warrenl@cygnus.com>\n+  */\n public class SequenceInputStream extends InputStream\n {\n-  /* The handle for the current input stream. */\n+  /** The handle for the current input stream. */\n   private InputStream in;\n \n-  /* Secondary input stream; not used if constructed w/ enumeration. */\n+  /** Secondary input stream; not used if constructed w/ enumeration. */\n   private InputStream in2;\n \n-  /* The enum handle; not used if constructed w/ 2 explicit input streams. */\n+  /** The enum handle; not used if constructed w/ 2 explicit input streams. */\n   private Enumeration enum;\n \n+ /**\n+  * This method creates a new <code>SequenceInputStream</code> that obtains\n+  * its list of subordinate <code>InputStream</code>s from the specified\n+  * <code>Enumeration</code>\n+  *\n+  * @param e An <code>Enumeration</code> that will return a list of\n+  * <code>InputStream</code>s to read in sequence\n+  */\n   public SequenceInputStream(Enumeration e)\n   {\n     enum = e;\n     in = (InputStream) enum.nextElement();\n     in2 = null;\n   }\n \n+ /**\n+  * This method creates a new <code>SequenceInputStream</code> that will read\n+  * the two specified subordinate <code>InputStream</code>s in sequence.\n+  *\n+  * @param s1 The first <code>InputStream</code> to read\n+  * @param s2 The second <code>InputStream</code> to read\n+  */\n   public SequenceInputStream(InputStream s1, InputStream s2)\n   {\n     in = s1;\n     in2 = s2;\n   }\n \n+ /**\n+  * This method returns the number of bytes than can be read from the\n+  * currently being read subordinate stream before that stream could\n+  * block.  Note that it is possible more bytes than this can actually\n+  * be read without the stream blocking.  If a 0 is returned, then the\n+  * stream could block on the very next read.\n+  *\n+  * @return The number of bytes that can be read before blocking could occur\n+  *\n+  * @exception IOException If an error occurs\n+  */\n   public int available() throws IOException\n   {\n     if (in == null)\n@@ -52,6 +110,13 @@ public int available() throws IOException\n     return in.available();\n   }\n \n+ /**\n+  * Closes this stream.  This will cause any remaining unclosed subordinate\n+  * <code>InputStream</code>'s to be closed as well.  Subsequent attempts to \n+  * read from this stream may cause an exception.\n+  *\n+  * @exception IOException If an error occurs\n+  */\n   public void close() throws IOException\n   {\n     while (in != null)\n@@ -61,6 +126,18 @@ public void close() throws IOException\n       }\n   }\n \n+ /**\n+  * This method reads an unsigned byte from the input stream and returns it\n+  * as an int in the range of 0-255.  This method also will return -1 if\n+  * the end of the stream has been reached.  This will only happen when\n+  * all of the subordinate streams have been read.\n+  * <p>\n+  * This method will block until the byte can be read.\n+  *\n+  * @return The byte read, or -1 if end of stream\n+  *\n+  * @exception IOException If an error occurs\n+  */\n   public int read() throws IOException\n   {\n     int ch = -1;\n@@ -74,6 +151,25 @@ public int read() throws IOException\n     return ch;\n   }\n \n+ /**\n+  * This method reads bytes from a stream and stores them into a caller\n+  * supplied buffer.  It starts storing the data at index <code>offset</code>\n+  * into the buffer and attempts to read <code>len</code> bytes. This method\n+  * can return before reading the number of bytes requested. The actual number\n+  * of bytes read is returned as an int. A -1 is returend to indicate the\n+  * end of the stream. This will only happen when all of the subordinate\n+  * streams have been read.\n+  * <p>\n+  * This method will block until at least one byte can be read.\n+  *\n+  * @param b The array into which bytes read should be stored\n+  * @param off The offset into the array to start storing bytes\n+  * @param len The requested number of bytes to read\n+  *\n+  * @return The actual number of bytes read, or -1 if end of stream\n+  *\n+  * @exception IOException If an error occurs\n+  */\n   public int read(byte[] b, int off, int len) throws IOException\n   {\n     int ch = -1;\n@@ -89,6 +185,10 @@ public int read(byte[] b, int off, int len) throws IOException\n     return ch;\n   }\n \n+ /**\n+  * This private method is used to get the next <code>InputStream</code> to\n+  * read from. Returns null when no more streams are available.\n+  */\n   private InputStream getNextStream()\n   {\n     InputStream nextIn = null;"}, {"sha": "40ef73cf9a4c30d0beeeef350da81c4b1a508560", "filename": "libjava/java/io/StringBufferInputStream.java", "status": "modified", "additions": 106, "deletions": 13, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce0d5fce2b08fc33961ae31c2032b6abf5bd40da/libjava%2Fjava%2Fio%2FStringBufferInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce0d5fce2b08fc33961ae31c2032b6abf5bd40da/libjava%2Fjava%2Fio%2FStringBufferInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FStringBufferInputStream.java?ref=ce0d5fce2b08fc33961ae31c2032b6abf5bd40da", "patch": "@@ -1,46 +1,106 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* StringBufferInputStream.java -- Read an String as a stream\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.io;\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date November 11, 1998.\n- * @deprecated \n- */\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.  Deprecated in JDK 1.1.\n  */\n  \n+/**\n+  * This class permits a <code>String</code> to be read as an input stream.\n+  * The low eight bits of each character in the <code>String</code> are the\n+  * bytes that are returned. The high eight bits of each character are\n+  * discarded.\n+  * <p>\n+  * The mark/reset functionality in this class behaves differently than\n+  * normal.  The <code>mark()</code> method is always ignored and the \n+  * <code>reset()</code> method always resets in stream to start reading from \n+  * position 0 in the String.  Note that since this method does not override \n+  * <code>markSupported()</code> in <code>InputStream</code>, calling that \n+  * method will return <code>false</code>.\n+  * <p>\n+  * Note that this class is deprecated because it does not properly handle\n+  * 16-bit Java characters.  It is provided for backwards compatibility only\n+  * and should not be used for new development.  The <code>StringReader</code>\n+  * class should be used instead.\n+  *\n+  * @deprecated\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Warren Levy <warrenl@cygnus.com>\n+  */\n public class StringBufferInputStream extends InputStream\n {\n-  /* The String which is the input to this stream. */\n+  /** The String which is the input to this stream. */\n   protected String buffer;\n \n-  /* Position of the next byte in buffer to be read. */\n+  /** Position of the next byte in buffer to be read. */\n   protected int pos = 0;\n \n-  /* The length of the String buffer. */\n+  /** The length of the String buffer. */\n   protected int count;\n \n+ /**\n+  * Create a new <code>StringBufferInputStream</code> that will read bytes\n+  * from the passed in <code>String</code>.  This stream will read from the\n+  * beginning to the end of the <code>String</code>.\n+  *\n+  * @param s The <code>String</code> this stream will read from.\n+  */\n   public StringBufferInputStream(String s)\n   {\n     buffer = s;\n     count = s.length();\n   }\n \n+ /**\n+  * This method returns the number of bytes available to be read from this\n+  * stream.  The value returned will be equal to <code>count - pos</code>.\n+  *\n+  * @return The number of bytes that can be read from this stream before\n+  * blocking, which is all of them\n+  */\n   public int available()\n   {\n     return count - pos;\n   }\n \n+ /**\n+  * This method reads one byte from the stream.  The <code>pos</code> counter \n+  * is advanced to the next byte to be read.  The byte read is returned as\n+  * an int in the range of 0-255.  If the stream position is already at the\n+  * end of the buffer, no byte is read and a -1 is returned in order to\n+  * indicate the end of the stream.\n+  *\n+  * @return The byte read, or -1 if end of stream\n+  */\n   public int read()\n   {\n     if (pos >= count)\n@@ -49,6 +109,23 @@ public int read()\n     return ((int) buffer.charAt(pos++)) & 0xFF;\n   }\n \n+/**\n+  * This method reads bytes from the stream and stores them into a caller\n+  * supplied buffer.  It starts storing the data at index <code>offset</code> \n+  * into the buffer and attempts to read <code>len</code> bytes.  This method\n+  * can return before reading the number of bytes requested if the end of the\n+  * stream is encountered first.  The actual number of bytes read is \n+  * returned.  If no bytes can be read because the stream is already at \n+  * the end of stream position, a -1 is returned.\n+  * <p>\n+  * This method does not block.\n+  *\n+  * @param b The array into which the bytes read should be stored.\n+  * @param off The offset into the array to start storing bytes\n+  * @param len The requested number of bytes to read\n+  *\n+  * @return The actual number of bytes read, or -1 if end of stream.\n+  */\n   public int read(byte[] b, int off, int len)\n   {\n     if (off < 0 || len < 0 || off + len > b.length)\n@@ -66,11 +143,27 @@ public int read(byte[] b, int off, int len)\n     return numRead;\n   }\n \n+ /**\n+  * This method sets the read position in the stream to the beginning\n+  * setting the <code>pos</code> variable equal to 0.  Note that this differs\n+  * from the common implementation of the <code>reset()</code> method.\n+  */\n   public void reset()\n   {\n     pos = 0;\n   }\n \n+ /**\n+  * This method attempts to skip the requested number of bytes in the\n+  * input stream.  It does this by advancing the <code>pos</code> value by the\n+  * specified number of bytes.  It this would exceed the length of the\n+  * buffer, then only enough bytes are skipped to position the stream at\n+  * the end of the buffer.  The actual number of bytes skipped is returned.\n+  *\n+  * @param n The requested number of bytes to skip\n+  *\n+  * @return The actual number of bytes skipped.\n+  */\n   public long skip(long n)\n   {\n     if (n < 0)"}, {"sha": "3e2a40e554ce9a6c9c21ed7a0679ecb7f3560444", "filename": "libjava/java/util/Collections.java", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce0d5fce2b08fc33961ae31c2032b6abf5bd40da/libjava%2Fjava%2Futil%2FCollections.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce0d5fce2b08fc33961ae31c2032b6abf5bd40da/libjava%2Fjava%2Futil%2FCollections.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FCollections.java?ref=ce0d5fce2b08fc33961ae31c2032b6abf5bd40da", "patch": "@@ -1,5 +1,5 @@\n /* Collections.java -- Utility class with methods to operate on collections\n-   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -595,7 +595,7 @@ public static void shuffle(List l, Random r)\n    * of this method is Serializable.\n    *\n    * @param o the single element.\n-   * @returns an immutable Set containing only o.\n+   * @return an immutable Set containing only o.\n    */\n   // It's not serializable because the spec is broken.\n   public static Set singleton(final Object o)\n@@ -645,7 +645,7 @@ public void remove()\n    * of this method is Serializable.\n    *\n    * @param o the single element.\n-   * @returns an immutable List containing only o.\n+   * @return an immutable List containing only o.\n    */\n   // It's not serializable because the spec is broken.\n   public static List singletonList(final Object o)\n@@ -677,7 +677,7 @@ public Object get(int index)\n    *\n    * @param key the single key.\n    * @param value the single value.\n-   * @returns an immutable Map containing only the single key value pair.\n+   * @return an immutable Map containing only the single key value pair.\n    */\n   // It's not serializable because the spec is broken.\n   public static Map singletonMap(final Object key, final Object value)\n@@ -686,7 +686,7 @@ public static Map singletonMap(final Object key, final Object value)\n     {\n       public Set entrySet()\n       {\n-\treturn singleton(new HashMap.Entry(key, value));\n+\treturn singleton(new BasicMapEntry(key, value));\n       }\n     };\n   }\n@@ -1294,7 +1294,11 @@ public void set(Object o)\n     }\n   }\n \n-  private static class SynchronizedCollection implements Collection,\n+  /**\n+   * Package visible, so that collections such as the one for\n+   * Hashtable.values() can specify which object to synchronize on.\n+   */\n+  static class SynchronizedCollection implements Collection,\n     Serializable\n   {\n     Object sync;\n@@ -1522,7 +1526,11 @@ public List subList(int fromIndex, int toIndex)\n     }\n   }\n \n-  private static class SynchronizedSet extends SynchronizedCollection\n+  /**\n+   * Package visible, so that sets such as the one for Hashtable.keySet()\n+   * can specify which object to synchronize on.\n+   */\n+  static class SynchronizedSet extends SynchronizedCollection\n     implements Set\n   {\n     public SynchronizedSet(Object sync, Set s)"}]}