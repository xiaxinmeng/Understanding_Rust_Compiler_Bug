{"sha": "121449b69b51f271ae5d7accde14e72099342d02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIxNDQ5YjY5YjUxZjI3MWFlNWQ3YWNjZGUxNGU3MjA5OTM0MmQwMg==", "commit": {"author": {"name": "Stephane Carrez", "email": "Stephane.Carrez@worldnet.fr", "date": "2002-03-16T13:03:59Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2002-03-16T13:03:59Z"}, "message": "m68hc11.c (m68hc11_override_options): Don't use soft registers by default for 68HC12.\n\n\t* config/m68hc11/m68hc11.c (m68hc11_override_options): Don't use\n\tsoft registers by default for 68HC12.\n\t(m68hc11_conditional_register_usage): Don't use Z register for 68HC12\n\twhen compiling with -fomit-frame-pointer.\n\t(expand_prologue): Use push/pop to allocate 4-bytes of locals on 68HC12.\n\t(expand_epilogue): Likewise.\n\t(m68hc11_gen_rotate): Use exg when rotating by 8.\n\nFrom-SVN: r50882", "tree": {"sha": "efca1bce0e71aa56fa64fc87f53873ba9e1d893d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efca1bce0e71aa56fa64fc87f53873ba9e1d893d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/121449b69b51f271ae5d7accde14e72099342d02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/121449b69b51f271ae5d7accde14e72099342d02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/121449b69b51f271ae5d7accde14e72099342d02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/121449b69b51f271ae5d7accde14e72099342d02/comments", "author": null, "committer": null, "parents": [{"sha": "840e2ff10988bf7a1adf0bc0a0ac94e51e96ba6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/840e2ff10988bf7a1adf0bc0a0ac94e51e96ba6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/840e2ff10988bf7a1adf0bc0a0ac94e51e96ba6c"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "36c51fec261c581cd2d7d1cba822611ac62fd247", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/121449b69b51f271ae5d7accde14e72099342d02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/121449b69b51f271ae5d7accde14e72099342d02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=121449b69b51f271ae5d7accde14e72099342d02", "patch": "@@ -1,3 +1,13 @@\n+2002-03-16  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n+\n+\t* config/m68hc11/m68hc11.c (m68hc11_override_options): Don't use\n+\tsoft registers by default for 68HC12.\n+\t(m68hc11_conditional_register_usage): Don't use Z register for 68HC12\n+\twhen compiling with -fomit-frame-pointer.\n+\t(expand_prologue): Use push/pop to allocate 4-bytes of locals on 68HC12.\n+\t(expand_epilogue): Likewise.\n+\t(m68hc11_gen_rotate): Use exg when rotating by 8.\n+\n 2002-03-16  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n \n \t* config/m68hc11/m68hc11-protos.h (ix_reg): Declare."}, {"sha": "4927825fa61deacdba65b0c7413e0c3c00ec11ba", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/121449b69b51f271ae5d7accde14e72099342d02/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/121449b69b51f271ae5d7accde14e72099342d02/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=121449b69b51f271ae5d7accde14e72099342d02", "patch": "@@ -246,6 +246,8 @@ m68hc11_override_options ()\n       if (TARGET_DEFAULT != MASK_M6811)\n         target_flags &= ~TARGET_DEFAULT;\n \n+      if (!TARGET_M6812)\n+        target_flags &= ~TARGET_AUTO_INC_DEC;\n       m68hc11_cost = &m6811_cost;\n       m68hc11_min_offset = 0;\n       m68hc11_max_offset = 256;\n@@ -278,7 +280,7 @@ m68hc11_override_options ()\n       target_flags &= ~MASK_M6811;\n       target_flags |= MASK_NO_DIRECT_MODE;\n       if (m68hc11_soft_reg_count == 0)\n-\tm68hc11_soft_reg_count = \"2\";\n+\tm68hc11_soft_reg_count = \"0\";\n     }\n   return 0;\n }\n@@ -301,6 +303,14 @@ m68hc11_conditional_register_usage ()\n       fixed_regs[i] = 1;\n       call_used_regs[i] = 1;\n     }\n+\n+  /* For 68HC12, the Z register emulation is not necessary when the\n+     frame pointer is not used.  The frame pointer is eliminated and\n+     replaced by the stack register (which is a BASE_REG_CLASS).  */\n+  if (TARGET_M6812 && flag_omit_frame_pointer && optimize)\n+    {\n+      fixed_regs[HARD_Z_REGNUM] = 1;\n+    }\n }\n \f\n \n@@ -1664,7 +1674,7 @@ expand_prologue ()\n     emit_move_after_reload (stack_push_word, hard_frame_pointer_rtx, scratch);\n \n   /* Allocate local variables.  */\n-  if (TARGET_M6812 && size >= 2)\n+  if (TARGET_M6812 && (size > 4 || size == 3))\n     {\n       emit_insn (gen_addhi3 (stack_pointer_rtx,\n \t\t\t     stack_pointer_rtx, GEN_INT (-size)));\n@@ -1752,7 +1762,7 @@ expand_epilogue ()\n     }\n \n   /* de-allocate auto variables */\n-  if (TARGET_M6812 && size >= 2)\n+  if (TARGET_M6812 && (size > 4 || size == 3))\n     {\n       emit_insn (gen_addhi3 (stack_pointer_rtx,\n \t\t\t     stack_pointer_rtx, GEN_INT (size)));\n@@ -3716,9 +3726,14 @@ m68hc11_gen_rotate (code, insn, operands)\n   /* Rotate by 8-bits if the shift is within [5..11].  */\n   if (val >= 5 && val <= 11)\n     {\n-      output_asm_insn (\"psha\", operands);\n-      output_asm_insn (\"tba\", operands);\n-      output_asm_insn (\"pulb\", operands);\n+      if (TARGET_M6812)\n+\toutput_asm_insn (\"exg\\ta,b\", operands);\n+      else\n+\t{\n+\t  output_asm_insn (\"psha\", operands);\n+\t  output_asm_insn (\"tba\", operands);\n+\t  output_asm_insn (\"pulb\", operands);\n+\t}\n       val -= 8;\n     }\n "}]}