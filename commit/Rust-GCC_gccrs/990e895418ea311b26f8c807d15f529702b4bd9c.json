{"sha": "990e895418ea311b26f8c807d15f529702b4bd9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkwZTg5NTQxOGVhMzExYjI2ZjhjODA3ZDE1ZjUyOTcwMmI0YmQ5Yw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-06-22T09:42:10Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-06-22T09:42:10Z"}, "message": "varasm.c (constant_descriptor): Make contents unsigned char.\n\n\t* varasm.c (constant_descriptor): Make contents unsigned char.\n\t(mark_const_hash_entry): Adjust.\n\t(const_hash): Just hash the code of unknown nodes.\n\t(compare_constant_1): Adjust for unsigned char.\n\tUse language specific expander on unknown nodes.\n\t(record_constant_1): Likewise.\n\nFrom-SVN: r34647", "tree": {"sha": "a66cf33d7873a7c4ab9db20360792f14827302cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a66cf33d7873a7c4ab9db20360792f14827302cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/990e895418ea311b26f8c807d15f529702b4bd9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/990e895418ea311b26f8c807d15f529702b4bd9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/990e895418ea311b26f8c807d15f529702b4bd9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/990e895418ea311b26f8c807d15f529702b4bd9c/comments", "author": null, "committer": null, "parents": [{"sha": "dc2a68d78596e00195006f6a83e4fc9fc0da2076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc2a68d78596e00195006f6a83e4fc9fc0da2076", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc2a68d78596e00195006f6a83e4fc9fc0da2076"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "1f10b32f99ee6015bca4f115f15d777dc6a4bc56", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990e895418ea311b26f8c807d15f529702b4bd9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990e895418ea311b26f8c807d15f529702b4bd9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=990e895418ea311b26f8c807d15f529702b4bd9c", "patch": "@@ -1,3 +1,12 @@\n+2000-06-22  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* varasm.c (constant_descriptor): Make contents unsigned char.\n+\t(mark_const_hash_entry): Adjust.\n+\t(const_hash): Just hash the code of unknown nodes.\n+\t(compare_constant_1): Adjust for unsigned char.\n+\tUse language specific expander on unknown nodes.\n+\t(record_constant_1): Likewise.\n+\n 2000-06-21  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cppfiles.c (cpp_make_system_header): New function."}, {"sha": "5162a6de61c503b01a231623c6b7bbbfdbe70c98", "filename": "gcc/varasm.c", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990e895418ea311b26f8c807d15f529702b4bd9c/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990e895418ea311b26f8c807d15f529702b4bd9c/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=990e895418ea311b26f8c807d15f529702b4bd9c", "patch": "@@ -156,7 +156,7 @@ static void decode_addr_const\t\tPARAMS ((tree, struct addr_const *));\n static int const_hash\t\t\tPARAMS ((tree));\n static int compare_constant\t\tPARAMS ((tree,\n \t\t\t\t\t       struct constant_descriptor *));\n-static char *compare_constant_1\t\tPARAMS ((tree, char *));\n+static const unsigned char *compare_constant_1  PARAMS ((tree, const unsigned char *));\n static struct constant_descriptor *record_constant PARAMS ((tree));\n static void record_constant_1\t\tPARAMS ((tree));\n static tree copy_constant\t\tPARAMS ((tree));\n@@ -2329,7 +2329,7 @@ struct constant_descriptor\n   struct constant_descriptor *next;\n   char *label;\n   rtx rtl;\n-  char contents[1];\n+  unsigned char contents[1];\n };\n \n #define HASHBITS 30\n@@ -2346,7 +2346,7 @@ mark_const_hash_entry (ptr)\n \n   while (desc)\n     {\n-      ggc_mark_string (desc->label);\n+      ggc_mark_string ((const char *)desc->label);\n       ggc_mark_rtx (desc->rtl);\n       desc = desc->next;\n     }\n@@ -2457,7 +2457,8 @@ const_hash (exp)\n       return const_hash (TREE_OPERAND (exp, 0)) * 7 + 2;\n       \n     default:\n-      abort ();\n+      /* A language specific constant. Just hash the code. */\n+      return code % MAX_HASH_TABLE;\n     }\n \n   /* Compute hashing function */\n@@ -2490,12 +2491,12 @@ compare_constant (exp, desc)\n    against a subdescriptor, and if it succeeds it returns the\n    address of the subdescriptor for the next operand.  */\n \n-static char *\n+static const unsigned char *\n compare_constant_1 (exp, p)\n      tree exp;\n-     char *p;\n+     const unsigned char *p;\n {\n-  register const char *strp;\n+  register const unsigned char *strp;\n   register int len;\n   register enum tree_code code = TREE_CODE (exp);\n \n@@ -2512,7 +2513,7 @@ compare_constant_1 (exp, p)\n       if (*p++ != TYPE_PRECISION (TREE_TYPE (exp)))\n \treturn 0;\n \n-      strp = (char *) &TREE_INT_CST_LOW (exp);\n+      strp = (unsigned char *) &TREE_INT_CST_LOW (exp);\n       len = 2 * sizeof TREE_INT_CST_LOW (exp);\n       break;\n \n@@ -2521,7 +2522,7 @@ compare_constant_1 (exp, p)\n       if (*p++ != TYPE_PRECISION (TREE_TYPE (exp)))\n \treturn 0;\n \n-      strp = (char *) &TREE_REAL_CST (exp);\n+      strp = (unsigned char *) &TREE_REAL_CST (exp);\n       len = sizeof TREE_REAL_CST (exp);\n       break;\n \n@@ -2532,7 +2533,7 @@ compare_constant_1 (exp, p)\n       if ((enum machine_mode) *p++ != TYPE_MODE (TREE_TYPE (exp)))\n \treturn 0;\n \n-      strp = TREE_STRING_POINTER (exp);\n+      strp = (unsigned char *)TREE_STRING_POINTER (exp);\n       len = TREE_STRING_LENGTH (exp);\n       if (bcmp ((char *) &TREE_STRING_LENGTH (exp), p,\n \t\tsizeof TREE_STRING_LENGTH (exp)))\n@@ -2555,7 +2556,7 @@ compare_constant_1 (exp, p)\n \t  unsigned char *tmp = (unsigned char *) alloca (len);\n \n \t  get_set_constructor_bytes (exp, tmp, len);\n-\t  strp = (char *) tmp;\n+\t  strp = (unsigned char *) tmp;\n \t  if (bcmp ((char *) &xlen, p, sizeof xlen))\n \t    return 0;\n \n@@ -2667,16 +2668,16 @@ compare_constant_1 (exp, p)\n \tstruct addr_const value;\n \n \tdecode_addr_const (exp, &value);\n-\tstrp = (char *) &value.offset;\n+\tstrp = (unsigned char *) &value.offset;\n \tlen = sizeof value.offset;\n \t/* Compare the offset.  */\n \twhile (--len >= 0)\n \t  if (*p++ != *strp++)\n \t    return 0;\n \n \t/* Compare symbol name.  */\n-\tstrp = XSTR (value.base, 0);\n-\tlen = strlen (strp) + 1;\n+\tstrp = (unsigned char *) XSTR (value.base, 0);\n+\tlen = strlen ((char *) strp) + 1;\n       }\n       break;\n \n@@ -2695,7 +2696,12 @@ compare_constant_1 (exp, p)\n       return compare_constant_1 (TREE_OPERAND (exp, 0), p);\n \n     default:\n-      abort ();\n+      if (lang_expand_constant)\n+        {\n+          exp = (*lang_expand_constant) (exp);\n+          return compare_constant_1 (exp, p);\n+        }\n+      return 0;\n     }\n \n   /* Compare constant contents.  */\n@@ -2736,7 +2742,7 @@ static void\n record_constant_1 (exp)\n      tree exp;\n {\n-  register char *strp;\n+  register unsigned char *strp;\n   register int len;\n   register enum tree_code code = TREE_CODE (exp);\n \n@@ -2746,13 +2752,13 @@ record_constant_1 (exp)\n     {\n     case INTEGER_CST:\n       obstack_1grow (&permanent_obstack, TYPE_PRECISION (TREE_TYPE (exp)));\n-      strp = (char *) &TREE_INT_CST_LOW (exp);\n+      strp = (unsigned char *) &TREE_INT_CST_LOW (exp);\n       len = 2 * sizeof TREE_INT_CST_LOW (exp);\n       break;\n \n     case REAL_CST:\n       obstack_1grow (&permanent_obstack, TYPE_PRECISION (TREE_TYPE (exp)));\n-      strp = (char *) &TREE_REAL_CST (exp);\n+      strp = (unsigned char *) &TREE_REAL_CST (exp);\n       len = sizeof TREE_REAL_CST (exp);\n       break;\n \n@@ -2761,7 +2767,7 @@ record_constant_1 (exp)\n \treturn;\n \n       obstack_1grow (&permanent_obstack, TYPE_MODE (TREE_TYPE (exp)));\n-      strp = TREE_STRING_POINTER (exp);\n+      strp = (unsigned char *) TREE_STRING_POINTER (exp);\n       len = TREE_STRING_LENGTH (exp);\n       obstack_grow (&permanent_obstack, (char *) &TREE_STRING_LENGTH (exp),\n \t\t    sizeof TREE_STRING_LENGTH (exp));\n@@ -2893,7 +2899,12 @@ record_constant_1 (exp)\n       return;\n \n     default:\n-      abort ();\n+      if (lang_expand_constant)\n+        {\n+          exp = (*lang_expand_constant) (exp);\n+          record_constant_1 (exp);\n+        }\n+      return;\n     }\n \n   /* Record constant contents.  */"}]}