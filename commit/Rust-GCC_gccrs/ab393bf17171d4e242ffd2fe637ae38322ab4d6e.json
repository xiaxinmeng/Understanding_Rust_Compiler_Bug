{"sha": "ab393bf17171d4e242ffd2fe637ae38322ab4d6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIzOTNiZjE3MTcxZDRlMjQyZmZkMmZlNjM3YWUzODMyMmFiNGQ2ZQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-04-19T06:22:18Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-04-19T06:22:18Z"}, "message": "builtins.c: Include langhooks.h.\n\n\t* builtins.c: Include langhooks.h.\n\t(lang_type_promotes_to): Remove.\n\t(expand_builtin_va_arg): Use new hook.\n\t* c-common.c (c_common_nodes_and_builtins): Don't set hook.\n\t(simple_type_promotes_to): Move to c-typeck.c.\n\t* c-common.h (simple_type_promotes_to): Remove.\n\t* c-decl.c (duplicate_decls, grokdeclarator): Update.\n\t* c-format.c: Include langhooks.h.\n\t(check_format_types): Update.\n\t* c-tree.h (c_type_promotes_to): New.\n\t* c-typeck.c (c_type_promotes_to): Move from c-common.c.\n\t(type_lists_compatible_p): Update.\n\t* langhooks-def.h (lhd_type_promotes_to): New.\n\t(LANG_HOOKS_TYPE_PROMOTES_TO): New.\n\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Update.\n\t* langhooks.c (lhd_type_promotes_to): New.\n\t* langhooks.h (struct lang_hooks_for_types): New hook.\n\t* tree.h (lang_type_promotes_to): Remove.\ncp:\n\t* call.c (convert_type_from_ellipsis): Rename, update.\n\t* cp-lang.c (LANG_HOOKS_TYPE_PROMOTES_TO): Redefine.\n\t* cp-tree.h (convert_type_from_ellipsis): Rename.\n\t* decl.c (cxx_init_decl_processing): Don't set hook.\nobjc:\n\t* objc-lang.c (LANG_HOOKS_TYPE_PROMOTES_TO): Redefine.\n\nFrom-SVN: r52512", "tree": {"sha": "c853f107a81212ea73e1c0e425bd739bab49ff8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c853f107a81212ea73e1c0e425bd739bab49ff8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab393bf17171d4e242ffd2fe637ae38322ab4d6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab393bf17171d4e242ffd2fe637ae38322ab4d6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab393bf17171d4e242ffd2fe637ae38322ab4d6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/comments", "author": null, "committer": null, "parents": [{"sha": "58533fa280d2d55e932c8ed979e5ee167cdc7891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58533fa280d2d55e932c8ed979e5ee167cdc7891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58533fa280d2d55e932c8ed979e5ee167cdc7891"}], "stats": {"total": 170, "additions": 101, "deletions": 69}, "files": [{"sha": "097cf31ba5b045a8f69a054677d37a1fdb40991b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab393bf17171d4e242ffd2fe637ae38322ab4d6e", "patch": "@@ -1,3 +1,26 @@\n+2002-04-19  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* builtins.c: Include langhooks.h.\n+\t(lang_type_promotes_to): Remove.\n+\t(expand_builtin_va_arg): Use new hook.\n+\t* c-common.c (c_common_nodes_and_builtins): Don't set hook.\n+\t(simple_type_promotes_to): Move to c-typeck.c.\n+\t* c-common.h (simple_type_promotes_to): Remove.\n+\t* c-decl.c (duplicate_decls, grokdeclarator): Update.\n+\t* c-format.c: Include langhooks.h.\n+\t(check_format_types): Update.\n+\t* c-tree.h (c_type_promotes_to): New.\n+\t* c-typeck.c (c_type_promotes_to): Move from c-common.c.\n+\t(type_lists_compatible_p): Update.\n+\t* langhooks-def.h (lhd_type_promotes_to): New.\n+\t(LANG_HOOKS_TYPE_PROMOTES_TO): New.\n+\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Update.\n+\t* langhooks.c (lhd_type_promotes_to): New.\n+\t* langhooks.h (struct lang_hooks_for_types): New hook.\n+\t* tree.h (lang_type_promotes_to): Remove.\n+objc:\n+\t* objc-lang.c (LANG_HOOKS_TYPE_PROMOTES_TO): Redefine.\n+\n 2002-04-18  Richard Henderson  <rth@redhat.com>\n \n \t* function.c: Revert patch for c/6358."}, {"sha": "bb8e29ed0329a1a51941a95d0286aaee6e21f5d6", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=ab393bf17171d4e242ffd2fe637ae38322ab4d6e", "patch": "@@ -1221,7 +1221,7 @@ attribs.o : attribs.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(OBSTACK_H) flags.h \\\n \ttoplev.h output.h c-pragma.h $(RTL_H) $(GGC_H) $(EXPR_H) $(TM_P_H) \\\n \tbuiltin-types.def $(TARGET_H) langhooks.h\n \n-c-format.o : c-format.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n+c-format.o : c-format.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) langhooks.h \\\n \t$(C_COMMON_H) flags.h toplev.h intl.h diagnostic.h\n \n c-semantics.o : c-semantics.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\"}, {"sha": "a1ffe0a1d690e68bcee2a6934858eba24ff330b8", "filename": "gcc/builtins.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=ab393bf17171d4e242ffd2fe637ae38322ab4d6e", "patch": "@@ -41,6 +41,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"predict.h\"\n #include \"tm_p.h\"\n #include \"target.h\"\n+#include \"langhooks.h\"\n \n #define CALLED_AS_BUILT_IN(NODE) \\\n    (!strncmp (IDENTIFIER_POINTER (DECL_NAME (NODE)), \"__builtin_\", 10))\n@@ -72,8 +73,6 @@ const char *const built_in_names[(int) END_BUILTINS] =\n    initialized to NULL_TREE.  */\n tree built_in_decls[(int) END_BUILTINS];\n \n-tree (*lang_type_promotes_to) PARAMS ((tree));\n-\n static int get_pointer_alignment\tPARAMS ((tree, unsigned int));\n static tree c_strlen\t\t\tPARAMS ((tree));\n static const char *c_getstr\t\tPARAMS ((tree));\n@@ -3083,7 +3082,8 @@ expand_builtin_va_arg (valist, type)\n \n   /* Generate a diagnostic for requesting data of a type that cannot\n      be passed through `...' due to type promotion at the call site.  */\n-  else if ((promoted_type = (*lang_type_promotes_to) (type)) != NULL_TREE)\n+  else if ((promoted_type = (*lang_hooks.types.type_promotes_to) (type))\n+\t   != type)\n     {\n       const char *name = \"<anonymous type>\", *pname = 0;\n       static bool gave_help;"}, {"sha": "c1201cdbc545cd8b3c462296f5aacb7e5c99524f", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=ab393bf17171d4e242ffd2fe637ae38322ab4d6e", "patch": "@@ -2928,10 +2928,6 @@ c_common_nodes_and_builtins ()\n \t\t      0, NOT_BUILT_IN, 0, 0, 1);\n \n   main_identifier_node = get_identifier (\"main\");\n-\n-  /* ??? Perhaps there's a better place to do this.  But it is related\n-     to __builtin_va_arg, so it isn't that off-the-wall.  */\n-  lang_type_promotes_to = simple_type_promotes_to;\n }\n \n tree\n@@ -3075,32 +3071,6 @@ c_promoting_integer_type_p (t)\n     }\n }\n \n-/* Given a type, apply default promotions wrt unnamed function arguments\n-   and return the new type.  Return NULL_TREE if no change.  */\n-/* ??? There is a function of the same name in the C++ front end that\n-   does something similar, but is more thorough and does not return NULL\n-   if no change.  We could perhaps share code, but it would make the\n-   self_promoting_type property harder to identify.  */\n-\n-tree\n-simple_type_promotes_to (type)\n-     tree type;\n-{\n-  if (TYPE_MAIN_VARIANT (type) == float_type_node)\n-    return double_type_node;\n-\n-  if (c_promoting_integer_type_p (type))\n-    {\n-      /* Preserve unsignedness if not really getting any wider.  */\n-      if (TREE_UNSIGNED (type)\n-          && (TYPE_PRECISION (type) == TYPE_PRECISION (integer_type_node)))\n-        return unsigned_type_node;\n-      return integer_type_node;\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n /* Return 1 if PARMS specifies a fixed number of parameters\n    and none of their types is affected by default promotions.  */\n "}, {"sha": "e3d00e92f0c3b707ceee32d065ac848b49fdb0bc", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=ab393bf17171d4e242ffd2fe637ae38322ab4d6e", "patch": "@@ -568,7 +568,6 @@ extern void c_common_parse_file\t\t\tPARAMS ((void));\n extern HOST_WIDE_INT c_common_get_alias_set\tPARAMS ((tree));\n extern bool c_promoting_integer_type_p\t\tPARAMS ((tree));\n extern int self_promoting_args_p\t\tPARAMS ((tree));\n-extern tree simple_type_promotes_to\t\tPARAMS ((tree));\n extern tree strip_array_types                   PARAMS ((tree));\n \n /* These macros provide convenient access to the various _STMT nodes.  */"}, {"sha": "7db66d78db7d43c6a1dbacfbf86ab71038784764", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=ab393bf17171d4e242ffd2fe637ae38322ab4d6e", "patch": "@@ -1550,7 +1550,7 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \t\t  break;\n \t\t}\n \n-\t      if (simple_type_promotes_to (type) != NULL_TREE)\n+\t      if (c_type_promotes_to (type) != type)\n \t\t{\n \t\t  error (\"an argument type that has a default promotion can't match an empty parameter name list declaration\");\n \t\t  break;\n@@ -4793,11 +4793,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \tif (type == error_mark_node)\n \t  promoted_type = type;\n \telse\n-\t  {\n-\t    promoted_type = simple_type_promotes_to (type);\n-\t    if (! promoted_type)\n-\t      promoted_type = type;\n-\t  }\n+\t  promoted_type = c_type_promotes_to (type);\n \n \tDECL_ARG_TYPE (decl) = promoted_type;\n \tDECL_ARG_TYPE_AS_WRITTEN (decl) = type_as_written;"}, {"sha": "e5be439c53fb9bd39d398b5d51134e988b868807", "filename": "gcc/c-format.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=ab393bf17171d4e242ffd2fe637ae38322ab4d6e", "patch": "@@ -27,7 +27,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"c-common.h\"\n #include \"intl.h\"\n #include \"diagnostic.h\"\n-\n+#include \"langhooks.h\"\n \f\n /* Command line options and their associated flags.  */\n \n@@ -2258,7 +2258,6 @@ check_format_types (status, types)\n       tree cur_type;\n       tree orig_cur_type;\n       tree wanted_type;\n-      tree promoted_type;\n       int arg_num;\n       int i;\n       int char_type_flag;\n@@ -2277,11 +2276,7 @@ check_format_types (status, types)\n \tabort ();\n \n       if (types->pointer_count == 0)\n-\t{\n-\t  promoted_type = simple_type_promotes_to (wanted_type);\n-\t  if (promoted_type != NULL_TREE)\n-\t    wanted_type = promoted_type;\n-\t}\n+\twanted_type = (*lang_hooks.types.type_promotes_to) (wanted_type);\n \n       STRIP_NOPS (cur_param);\n "}, {"sha": "ec1f1521867cd5d864dd43c0d4675a2c329e8063", "filename": "gcc/c-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=ab393bf17171d4e242ffd2fe637ae38322ab4d6e", "patch": "@@ -102,6 +102,8 @@ static void c_post_options PARAMS ((void));\n #define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE c_common_signed_or_unsigned_type\n #undef LANG_HOOKS_INCOMPLETE_TYPE_ERROR\n #define LANG_HOOKS_INCOMPLETE_TYPE_ERROR c_incomplete_type_error\n+#undef LANG_HOOKS_TYPE_PROMOTES_TO\n+#define LANG_HOOKS_TYPE_PROMOTES_TO c_type_promotes_to\n \n /* ### When changing hooks, consider if ObjC needs changing too!! ### */\n "}, {"sha": "21f1146ff562ef32e947ba3374d11b54ac1678d3", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=ab393bf17171d4e242ffd2fe637ae38322ab4d6e", "patch": "@@ -251,6 +251,7 @@ extern tree c_sizeof_nowarn\t\t\tPARAMS ((tree));\n extern tree c_size_in_bytes                     PARAMS ((tree));\n extern bool c_mark_addressable\t\t\tPARAMS ((tree));\n extern void c_incomplete_type_error\t\tPARAMS ((tree, tree));\n+extern tree c_type_promotes_to\t\t\tPARAMS ((tree));\n extern tree build_component_ref                 PARAMS ((tree, tree));\n extern tree build_indirect_ref                  PARAMS ((tree, const char *));\n extern tree build_array_ref                     PARAMS ((tree, tree));"}, {"sha": "47fa1855ad332e228a8c65163b4398c152018124", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ab393bf17171d4e242ffd2fe637ae38322ab4d6e", "patch": "@@ -173,6 +173,28 @@ c_incomplete_type_error (value, type)\n     }\n }\n \n+/* Given a type, apply default promotions wrt unnamed function\n+   arguments and return the new type.  */\n+\n+tree\n+c_type_promotes_to (type)\n+     tree type;\n+{\n+  if (TYPE_MAIN_VARIANT (type) == float_type_node)\n+    return double_type_node;\n+\n+  if (c_promoting_integer_type_p (type))\n+    {\n+      /* Preserve unsignedness if not really getting any wider.  */\n+      if (TREE_UNSIGNED (type)\n+          && (TYPE_PRECISION (type) == TYPE_PRECISION (integer_type_node)))\n+        return unsigned_type_node;\n+      return integer_type_node;\n+    }\n+\n+  return type;\n+}\n+\n /* Return a variant of TYPE which has all the type qualifiers of LIKE\n    as well as those of TYPE.  */\n \n@@ -658,12 +680,12 @@ type_lists_compatible_p (args1, args2)\n \t So match anything that self-promotes.  */\n       if (TREE_VALUE (args1) == 0)\n \t{\n-\t  if (simple_type_promotes_to (TREE_VALUE (args2)) != NULL_TREE)\n+\t  if (c_type_promotes_to (TREE_VALUE (args2)) != TREE_VALUE (args2))\n \t    return 0;\n \t}\n       else if (TREE_VALUE (args2) == 0)\n \t{\n-\t  if (simple_type_promotes_to (TREE_VALUE (args1)) != NULL_TREE)\n+\t  if (c_type_promotes_to (TREE_VALUE (args1)) != TREE_VALUE (args1))\n \t    return 0;\n \t}\n       else if (! (newval = comptypes (TYPE_MAIN_VARIANT (TREE_VALUE (args1)), "}, {"sha": "7a139f4d52d47e8339cf1c63f931327b1081d9c5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ab393bf17171d4e242ffd2fe637ae38322ab4d6e", "patch": "@@ -1,3 +1,10 @@\n+2002-04-19  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* call.c (convert_type_from_ellipsis): Rename, update.\n+\t* cp-lang.c (LANG_HOOKS_TYPE_PROMOTES_TO): Redefine.\n+\t* cp-tree.h (convert_type_from_ellipsis): Rename.\n+\t* decl.c (cxx_init_decl_processing): Don't set hook.\n+\n 2002-04-18  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* call.c (build_new_method_call): Update."}, {"sha": "233f98c21f8f7517599cc2dbf42a05bd2630cd0f", "filename": "gcc/cp/call.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=ab393bf17171d4e242ffd2fe637ae38322ab4d6e", "patch": "@@ -4026,24 +4026,27 @@ build_x_va_arg (expr, type)\n   return build_va_arg (expr, type);\n }\n \n-/* TYPE has been given to va_arg. Apply the default conversions which would\n-   have happened when passed via ellipsis. Return the promoted type, or\n-   NULL_TREE, if there is no change.  */\n+/* TYPE has been given to va_arg.  Apply the default conversions which\n+   would have happened when passed via ellipsis.  Return the promoted\n+   type, or the passed type if there is no change.  */\n \n tree\n-convert_type_from_ellipsis (type)\n+cxx_type_promotes_to (type)\n      tree type;\n {\n   tree promote;\n-  \n+\n   if (TREE_CODE (type) == ARRAY_TYPE)\n-    promote = build_pointer_type (TREE_TYPE (type));\n-  else if (TREE_CODE (type) == FUNCTION_TYPE)\n-    promote = build_pointer_type (type);\n-  else\n-    promote = type_promotes_to (type);\n+    return build_pointer_type (TREE_TYPE (type));\n+\n+  if (TREE_CODE (type) == FUNCTION_TYPE)\n+    return build_pointer_type (type);\n+\n+  promote = type_promotes_to (type);\n+  if (same_type_p (type, promote))\n+    promote = type;\n   \n-  return same_type_p (type, promote) ? NULL_TREE : promote;\n+  return promote;\n }\n \n /* ARG is a default argument expression being passed to a parameter of"}, {"sha": "d37cd111658d3b4e57dc8493c493c088aef9f334", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=ab393bf17171d4e242ffd2fe637ae38322ab4d6e", "patch": "@@ -136,6 +136,8 @@ static bool cxx_warn_unused_global_decl PARAMS ((tree));\n #define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE c_common_signed_or_unsigned_type\n #undef LANG_HOOKS_INCOMPLETE_TYPE_ERROR\n #define LANG_HOOKS_INCOMPLETE_TYPE_ERROR cxx_incomplete_type_error\n+#undef LANG_HOOKS_TYPE_PROMOTES_TO\n+#define LANG_HOOKS_TYPE_PROMOTES_TO cxx_type_promotes_to\n \n /* Each front end provides its own hooks, for toplev.c.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;"}, {"sha": "5b56331f83b4aa5960565b56e40b43823d2a99d8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ab393bf17171d4e242ffd2fe637ae38322ab4d6e", "patch": "@@ -3578,7 +3578,7 @@ extern int enforce_access                       PARAMS ((tree, tree));\n extern tree convert_default_arg                 PARAMS ((tree, tree, tree, int));\n extern tree convert_arg_to_ellipsis             PARAMS ((tree));\n extern tree build_x_va_arg                      PARAMS ((tree, tree));\n-extern tree convert_type_from_ellipsis          PARAMS ((tree));\n+extern tree cxx_type_promotes_to\t\tPARAMS ((tree));\n extern int is_properly_derived_from             PARAMS ((tree, tree));\n extern tree initialize_reference                PARAMS ((tree, tree));\n extern tree strip_top_quals                     PARAMS ((tree));"}, {"sha": "ec087983f70e7f69b574fe100fccd11e71238f74", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ab393bf17171d4e242ffd2fe637ae38322ab4d6e", "patch": "@@ -6579,8 +6579,6 @@ cxx_init_decl_processing ()\n   vtable_index_type = ptrdiff_type_node;\n \n   vtt_parm_type = build_pointer_type (const_ptr_type_node);\n-  lang_type_promotes_to = convert_type_from_ellipsis;\n-\n   void_ftype = build_function_type (void_type_node, void_list_node);\n   void_ftype_ptr = build_function_type (void_type_node,\n \t\t\t\t\ttree_cons (NULL_TREE,"}, {"sha": "abbe734e0574a2db3daa2bb887b6f0bcc2001a7b", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=ab393bf17171d4e242ffd2fe637ae38322ab4d6e", "patch": "@@ -58,6 +58,7 @@ extern void lhd_print_error_function PARAMS ((struct diagnostic_context *,\n extern void lhd_set_decl_assembler_name PARAMS ((tree));\n extern bool lhd_warn_unused_global_decl PARAMS ((tree));\n extern void lhd_incomplete_type_error PARAMS ((tree, tree));\n+extern tree lhd_type_promotes_to PARAMS ((tree));\n \n /* Declarations of default tree inlining hooks.  */\n tree lhd_tree_inlining_walk_subtrees\t\tPARAMS ((tree *, int *,\n@@ -161,6 +162,7 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n    so we create a compile-time error instead.  */\n #define LANG_HOOKS_MAKE_TYPE make_node\n #define LANG_HOOKS_INCOMPLETE_TYPE_ERROR lhd_incomplete_type_error\n+#define LANG_HOOKS_TYPE_PROMOTES_TO lhd_type_promotes_to\n \n #define LANG_HOOKS_FOR_TYPES_INITIALIZER { \\\n   LANG_HOOKS_MAKE_TYPE, \\\n@@ -169,6 +171,7 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n   LANG_HOOKS_UNSIGNED_TYPE, \\\n   LANG_HOOKS_SIGNED_TYPE, \\\n   LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE, \\\n+  LANG_HOOKS_TYPE_PROMOTES_TO, \\\n   LANG_HOOKS_INCOMPLETE_TYPE_ERROR \\\n }\n "}, {"sha": "cc08e465034fd0e330e1a7f9af7ec81b0813c945", "filename": "gcc/langhooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=ab393bf17171d4e242ffd2fe637ae38322ab4d6e", "patch": "@@ -178,6 +178,14 @@ lhd_clear_binding_stack ()\n     poplevel (0, 0, 0);\n }\n \n+/* Type promotion for variable arguments.  */\n+tree\n+lhd_type_promotes_to (type)\n+     tree type ATTRIBUTE_UNUSED;\n+{\n+  abort ();\n+}\n+\n /* Invalid use of an incomplete type.  */\n void\n lhd_incomplete_type_error (value, type)"}, {"sha": "5b128a7adaac49d5d7725b9757202e8cba1728a1", "filename": "gcc/langhooks.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=ab393bf17171d4e242ffd2fe637ae38322ab4d6e", "patch": "@@ -97,6 +97,12 @@ struct lang_hooks_for_types\n      according to UNSIGNEDP.  */\n   tree (*signed_or_unsigned_type) PARAMS ((int, tree));\n \n+  /* Given a type, apply default promotions to unnamed function\n+     arguments and return the new type.  Return the same type if no\n+     change.  Required by any language that supports variadic\n+     arguments.  The default hook aborts.  */\n+  tree (*type_promotes_to) PARAMS ((tree));\n+\n   /* This routine is called in tree.c to print an error message for\n      invalid use of an incomplete type.  VALUE is the expression that\n      was used (or 0 if that isn't known) and TYPE is the type that was"}, {"sha": "fef5196645f16002420fd80b143f8bfb94cd3c6e", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=ab393bf17171d4e242ffd2fe637ae38322ab4d6e", "patch": "@@ -99,6 +99,8 @@ static void objc_post_options                   PARAMS ((void));\n #define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE c_common_signed_or_unsigned_type\n #undef LANG_HOOKS_INCOMPLETE_TYPE_ERROR\n #define LANG_HOOKS_INCOMPLETE_TYPE_ERROR c_incomplete_type_error\n+#undef LANG_HOOKS_TYPE_PROMOTES_TO\n+#define LANG_HOOKS_TYPE_PROMOTES_TO c_type_promotes_to\n \n /* Each front end provides its own hooks, for toplev.c.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;"}, {"sha": "0eae44844a7c29b2b45909e08c321836ffa8e895", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab393bf17171d4e242ffd2fe637ae38322ab4d6e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ab393bf17171d4e242ffd2fe637ae38322ab4d6e", "patch": "@@ -2799,11 +2799,6 @@ extern void rrotate_double\tPARAMS ((unsigned HOST_WIDE_INT, HOST_WIDE_INT,\n extern int operand_equal_p\tPARAMS ((tree, tree, int));\n extern tree invert_truthvalue\tPARAMS ((tree));\n \n-/* In builtins.c.  Given a type, apply default promotions wrt unnamed\n-   function arguments and return the new type.  Return NULL_TREE if no\n-   change.  Required by any language that supports variadic arguments.  */\n-\n-extern tree (*lang_type_promotes_to)\tPARAMS ((tree));\n extern tree fold_builtin\t\tPARAMS ((tree));\n \f\n extern tree build_range_type PARAMS ((tree, tree, tree));"}]}