{"sha": "cf913e7f2985fa5a2ab3bf8f3ba861855afe4e37", "node_id": "C_kwDOANBUbNoAKGNmOTEzZTdmMjk4NWZhNWEyYWIzYmY4ZjNiYTg2MTg1NWFmZTRlMzc", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-25T16:12:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-25T16:12:02Z"}, "message": "Merge #821 #822\n\n821: Always update the type context for monoprhized items except type params r=philberty a=philberty\n\nWe need to update the type context type with the newly monomorphized types\r\nwe guarded against ADT's and functions because they were never added before\r\nthough this does not work for generic reference's to ADT's this updates\r\nthe check accordingly.\r\n\n\n822: Make TyTy::BaseType::contains_type_parameters non-virtual r=philberty a=philberty\n\nThis is a second cleanup to the generic interfaces in the type system. The\r\nhelper for contains type parameters is akin to asking if a type is concrete\r\nor not. If a type is not concrete ie: contains type parameters then this\r\ncan be leveraged instead of adding more complexity.\r\n\r\nThe TyTy::BaseType::is_concrete is already an abstract method forcing\r\nall types to implement it, this makes it much safer and fixes some bad\r\ninfinite recursion bugs if we asked if a type contained type-parameters\r\nwhich in turn somtimes aksed if it was concrete or not which in turn\r\nagain called contains_type_parameters. This cleans it all up. More\r\ncleanup to these interfaces can be done over time.\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "a56f5221c3d15ace6cdaf06abc91bd1c4dca35bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a56f5221c3d15ace6cdaf06abc91bd1c4dca35bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf913e7f2985fa5a2ab3bf8f3ba861855afe4e37", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhn7XSCRBK7hj4Ov3rIwAAIkkIAIx097EppJnZ4wMfqsweytZc\n3sTjpF3AheoSTi3nBG/lqHK55sALJio+4EZeXZ3fD7aQ+s538oY6RdxfzpQeCpmk\nwoxyjc/CwogW2eg8opWHHv3eoxxraF4neuF2krIlDkDwu1QZCpnkGzJQ92I+Hui5\nUg9qGqcyLoPXPn1+F7Pvn7jevZHqh+nz0odEWxA53Jv/36qMcSGsJrEJbw/ndbeW\nhfQgNNhM/vhH3xC9w8vW492nAThxnS9HjM2Y/uN8USrD8Dx5wfO0P5TBF4dmNcY9\n4D5w6sEkGhPVCFK+poi287kR4qEKgo5k+gj6FiIcksU5T61cKw4sYg+kXeJ8GYQ=\n=Ohij\n-----END PGP SIGNATURE-----\n", "payload": "tree a56f5221c3d15ace6cdaf06abc91bd1c4dca35bf\nparent 98fb902fb3029da33c5a8d2fd4bd7d7bcb7271ee\nparent e532893ba43349a8dcb0374fd6e0f415fcd96fe1\nparent d0e51dca2dedf32d1d0a48d560f89e2952aee063\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1637856722 +0000\ncommitter GitHub <noreply@github.com> 1637856722 +0000\n\nMerge #821 #822\n\n821: Always update the type context for monoprhized items except type params r=philberty a=philberty\n\nWe need to update the type context type with the newly monomorphized types\r\nwe guarded against ADT's and functions because they were never added before\r\nthough this does not work for generic reference's to ADT's this updates\r\nthe check accordingly.\r\n\n\n822: Make TyTy::BaseType::contains_type_parameters non-virtual r=philberty a=philberty\n\nThis is a second cleanup to the generic interfaces in the type system. The\r\nhelper for contains type parameters is akin to asking if a type is concrete\r\nor not. If a type is not concrete ie: contains type parameters then this\r\ncan be leveraged instead of adding more complexity.\r\n\r\nThe TyTy::BaseType::is_concrete is already an abstract method forcing\r\nall types to implement it, this makes it much safer and fixes some bad\r\ninfinite recursion bugs if we asked if a type contained type-parameters\r\nwhich in turn somtimes aksed if it was concrete or not which in turn\r\nagain called contains_type_parameters. This cleans it all up. More\r\ncleanup to these interfaces can be done over time.\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf913e7f2985fa5a2ab3bf8f3ba861855afe4e37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf913e7f2985fa5a2ab3bf8f3ba861855afe4e37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf913e7f2985fa5a2ab3bf8f3ba861855afe4e37/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98fb902fb3029da33c5a8d2fd4bd7d7bcb7271ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98fb902fb3029da33c5a8d2fd4bd7d7bcb7271ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98fb902fb3029da33c5a8d2fd4bd7d7bcb7271ee"}, {"sha": "e532893ba43349a8dcb0374fd6e0f415fcd96fe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e532893ba43349a8dcb0374fd6e0f415fcd96fe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e532893ba43349a8dcb0374fd6e0f415fcd96fe1"}, {"sha": "d0e51dca2dedf32d1d0a48d560f89e2952aee063", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e51dca2dedf32d1d0a48d560f89e2952aee063", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0e51dca2dedf32d1d0a48d560f89e2952aee063"}], "stats": {"total": 67, "additions": 13, "deletions": 54}, "files": [{"sha": "f4fec107c35239720f87177043f8e5c605febd69", "filename": "gcc/rust/typecheck/rust-substitution-mapper.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf913e7f2985fa5a2ab3bf8f3ba861855afe4e37/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf913e7f2985fa5a2ab3bf8f3ba861855afe4e37/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.cc?ref=cf913e7f2985fa5a2ab3bf8f3ba861855afe4e37", "patch": "@@ -31,10 +31,8 @@ SubstMapperInternal::Resolve (TyTy::BaseType *base,\n   rust_assert (mapper.resolved != nullptr);\n \n   // insert these new implict types into the context\n-  bool is_fn = mapper.resolved->get_kind () == TyTy::TypeKind::FNDEF;\n-  bool is_adt = mapper.resolved->get_kind () == TyTy::TypeKind::ADT;\n   bool is_param = mapper.resolved->get_kind () == TyTy::TypeKind::PARAM;\n-  if (!is_fn && !is_adt && !is_param)\n+  if (!is_param)\n     {\n       auto context = TypeCheckContext::get ();\n       context->insert_type ("}, {"sha": "b2fefbbfa3620f85b3a077fc6a3423098df930c0", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 12, "deletions": 51, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf913e7f2985fa5a2ab3bf8f3ba861855afe4e37/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf913e7f2985fa5a2ab3bf8f3ba861855afe4e37/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=cf913e7f2985fa5a2ab3bf8f3ba861855afe4e37", "patch": "@@ -368,7 +368,7 @@ class BaseType : public TypeBoundsMappings\n \n   virtual bool needs_generic_substitutions () const { return false; }\n \n-  virtual bool contains_type_parameters () const { return false; }\n+  bool contains_type_parameters () const { return !is_concrete (); }\n \n   std::string mappings_str () const\n   {\n@@ -555,19 +555,13 @@ class ParamType : public BaseType\n \n   bool is_equal (const BaseType &other) const override;\n \n-  bool contains_type_parameters () const override final\n-  {\n-    if (can_resolve ())\n-      {\n-\tauto r = resolve ();\n-\treturn r->contains_type_parameters ();\n-      }\n-    return true;\n-  }\n-\n   bool is_concrete () const override final\n   {\n-    return !contains_type_parameters ();\n+    if (!can_resolve ())\n+      return false;\n+\n+    auto r = resolve ();\n+    return r->is_concrete ();\n   }\n \n   ParamType *handle_substitions (SubstitutionArgumentMappings mappings);\n@@ -659,16 +653,6 @@ class TupleType : public BaseType\n \n   std::string get_name () const override final { return as_string (); }\n \n-  bool contains_type_parameters () const override final\n-  {\n-    for (auto &f : fields)\n-      {\n-\tif (f.get_tyty ()->contains_type_parameters ())\n-\t  return true;\n-      }\n-    return false;\n-  }\n-\n   TupleType *handle_substitions (SubstitutionArgumentMappings mappings);\n \n private:\n@@ -1909,14 +1893,9 @@ class ReferenceType : public BaseType\n \n   BaseType *clone () const final override;\n \n-  bool contains_type_parameters () const override final\n-  {\n-    return get_base ()->contains_type_parameters ();\n-  }\n-\n   bool is_concrete () const override final\n   {\n-    return !contains_type_parameters ();\n+    return get_base ()->is_concrete ();\n   }\n \n   ReferenceType *handle_substitions (SubstitutionArgumentMappings mappings);\n@@ -1962,14 +1941,9 @@ class PointerType : public BaseType\n \n   BaseType *clone () const final override;\n \n-  bool contains_type_parameters () const override final\n-  {\n-    return get_base ()->contains_type_parameters ();\n-  }\n-\n   bool is_concrete () const override final\n   {\n-    return !contains_type_parameters ();\n+    return get_base ()->is_concrete ();\n   }\n \n   PointerType *handle_substitions (SubstitutionArgumentMappings mappings);\n@@ -2104,17 +2078,12 @@ class PlaceholderType : public BaseType\n \n   bool is_equal (const BaseType &other) const override;\n \n-  bool contains_type_parameters () const override\n+  bool is_concrete () const override final\n   {\n     if (!can_resolve ())\n-      return false;\n-\n-    return resolve ()->contains_type_parameters ();\n-  }\n+      return true;\n \n-  bool is_concrete () const override final\n-  {\n-    return !contains_type_parameters ();\n+    return resolve ()->is_concrete ();\n   }\n \n private:\n@@ -2177,15 +2146,7 @@ class ProjectionType : public BaseType, public SubstitutionRef\n   const BaseType *get () const { return base; }\n   BaseType *get () { return base; }\n \n-  bool contains_type_parameters () const override\n-  {\n-    return base->contains_type_parameters ();\n-  }\n-\n-  bool is_concrete () const override final\n-  {\n-    return !contains_type_parameters ();\n-  }\n+  bool is_concrete () const override final { return base->is_concrete (); }\n \n   ProjectionType *\n   handle_substitions (SubstitutionArgumentMappings mappings) override final;"}]}