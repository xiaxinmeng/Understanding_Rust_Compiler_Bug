{"sha": "57702a80e805859260710953242bf87c08f5c410", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc3MDJhODBlODA1ODU5MjYwNzEwOTUzMjQyYmY4N2MwOGY1YzQxMA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-12-23T16:53:53Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-12-23T16:53:53Z"}, "message": "c-common.c (flag_abi_version): Default to 2.\n\n\t* c-common.c (flag_abi_version): Default to 2.\n\t* c-cppbuiltin.c (c_cpp_builtins): Define __GXX_ABI_VERSION\n\tuniformly for versions above 2.\n\t* doc/invoke.texi: Update documentation for -fabi-version.\n\n\t* cp-lang.c (cp_expr_size): Return zero for empty classes.\n\n\t* cp-tree.h (warn_if_uknown_interface): Remove unused function.\n\t* decl2.c (warn_if_unknown_interface): Likewise.\n\n\t* g++.dg/abi/macro0.C: New test.\n\t* g++.dg/abi/macro1.C: Likewise.\n\t* g++.dg/abi/macro2.C: Likewise.\n\n\t* g++.dg/abi/bitfield5.C: Add explicit -fabi-version=1 option.\n\t* g++.dg/abi/bitfield7.C: Likewise.\n\t* g++.dg/abi/dtor2.C: Likewise.\n\t* g++.dg/abi/mangle11.C: Likewise.\n\t* g++.dg/abi/mangle12.C: Likewise.\n\t* g++.dg/abi/mangle14.C: Likewise.\n\t* g++.dg/abi/mangle17.C: Likewise.\n\t* g++.dg/abi/vbase10.C: Likewise.\n\t* g++.dg/abi/vbase14.C: Likewise.\n\t* g++.dg/template/qualttp17.C: Likewise.\n\nFrom-SVN: r74973", "tree": {"sha": "730fb1dd5cb47c7638fd2ccd44d2e5ecb188026c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/730fb1dd5cb47c7638fd2ccd44d2e5ecb188026c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57702a80e805859260710953242bf87c08f5c410", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57702a80e805859260710953242bf87c08f5c410", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57702a80e805859260710953242bf87c08f5c410", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57702a80e805859260710953242bf87c08f5c410/comments", "author": null, "committer": null, "parents": [{"sha": "32a2571b0cafa323c8133b1fb5a11c036a58a9e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32a2571b0cafa323c8133b1fb5a11c036a58a9e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32a2571b0cafa323c8133b1fb5a11c036a58a9e5"}], "stats": {"total": 119, "additions": 85, "deletions": 34}, "files": [{"sha": "86135fbff0ee662e356365cb7400664adeb31338", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57702a80e805859260710953242bf87c08f5c410/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57702a80e805859260710953242bf87c08f5c410/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57702a80e805859260710953242bf87c08f5c410", "patch": "@@ -1,3 +1,10 @@\n+2003-12-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* c-common.c (flag_abi_version): Default to 2.\n+\t* c-cppbuiltin.c (c_cpp_builtins): Define __GXX_ABI_VERSION\n+\tuniformly for versions above 2.\n+\t* doc/invoke.texi: Update documentation for -fabi-version.\n+\n 2003-12-22  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config/rs6000/rs6000.md: Change many instances of '!"}, {"sha": "9cdd144109876b0d704a30acd5f038f8bec2d26f", "filename": "gcc/c-common.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57702a80e805859260710953242bf87c08f5c410/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57702a80e805859260710953242bf87c08f5c410/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=57702a80e805859260710953242bf87c08f5c410", "patch": "@@ -609,10 +609,12 @@ int flag_enforce_eh_specs = 1;\n \n     1: The version of the ABI first used in G++ 3.2.\n \n+    2: The version of the ABI first used in G++ 3.4.\n+\n     Additional positive integers will be assigned as new versions of\n     the ABI become the default version of the ABI.  */\n \n-int flag_abi_version = 1;\n+int flag_abi_version = 2;\n \n /* Nonzero means warn about things that will change when compiling\n    with an ABI-compliant compiler.  */"}, {"sha": "739a34224b1e0d389d4171927e3e2474431bc01b", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57702a80e805859260710953242bf87c08f5c410/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57702a80e805859260710953242bf87c08f5c410/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=57702a80e805859260710953242bf87c08f5c410", "patch": "@@ -310,7 +310,23 @@ c_cpp_builtins (cpp_reader *pfile)\n \n   /* represents the C++ ABI version, always defined so it can be used while\n      preprocessing C and assembler.  */\n-  cpp_define (pfile, \"__GXX_ABI_VERSION=102\");\n+  if (flag_abi_version == 0)\n+    /* Use a very large value so that:\n+\n+         #if __GXX_ABI_VERSION >= <value for version X>\n+\n+       will work whether the user explicitly says \"-fabi-version=x\" or\n+       \"-fabi-version=0\".  Do not use INT_MAX because that will be\n+       different from system to system.  */\n+    builtin_define_with_int_value (\"__GXX_ABI_VERSION\", 999999);\n+  else if (flag_abi_version == 1)\n+    /* Due to an historical accident, this version had the value\n+       \"102\".  */\n+    builtin_define_with_int_value (\"__GXX_ABI_VERSION\", 102);\n+  else\n+    /* Newer versions have values 1002, 1003, ... */\n+    builtin_define_with_int_value (\"__GXX_ABI_VERSION\", \n+\t\t\t\t   1000 + flag_abi_version);\n \n   /* libgcc needs to know this.  */\n   if (USING_SJLJ_EXCEPTIONS)"}, {"sha": "9d13f3da0edc8db7bd9e75bc50c5e27960de053e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57702a80e805859260710953242bf87c08f5c410/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57702a80e805859260710953242bf87c08f5c410/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=57702a80e805859260710953242bf87c08f5c410", "patch": "@@ -1,3 +1,10 @@\n+2003-12-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-lang.c (cp_expr_size): Return zero for empty classes.\n+\n+\t* cp-tree.h (warn_if_uknown_interface): Remove unused function.\n+\t* decl2.c (warn_if_unknown_interface): Likewise.\n+\n 2003-12-23  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/13387"}, {"sha": "f1f5eedcc548e75ad7d391606ea0db4eec3078dc", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57702a80e805859260710953242bf87c08f5c410/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57702a80e805859260710953242bf87c08f5c410/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=57702a80e805859260710953242bf87c08f5c410", "patch": "@@ -347,7 +347,9 @@ cp_expr_size (tree exp)\n \tabort ();\n       /* This would be wrong for a type with virtual bases, but they are\n \t caught by the abort above.  */\n-      return CLASSTYPE_SIZE_UNIT (TREE_TYPE (exp));\n+      return (is_empty_class (TREE_TYPE (exp))\n+\t      ? size_zero_node \n+\t      : CLASSTYPE_SIZE_UNIT (TREE_TYPE (exp)));\n     }\n   else\n     /* Use the default code.  */"}, {"sha": "91e38f48223ca4dd851852b00162ae41c3783524", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57702a80e805859260710953242bf87c08f5c410/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57702a80e805859260710953242bf87c08f5c410/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=57702a80e805859260710953242bf87c08f5c410", "patch": "@@ -3710,7 +3710,6 @@ extern GTY(()) tree last_function_parms;\n /* in decl2.c */\n extern bool check_java_method (tree);\n extern int grok_method_quals (tree, tree, tree);\n-extern void warn_if_unknown_interface (tree);\n extern void grok_x_components (tree);\n extern void maybe_retrofit_in_chrg (tree);\n extern void maybe_make_one_only\t(tree);"}, {"sha": "4068826a9a9a904d9bdd60b59911e0f8abe8ad9b", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57702a80e805859260710953242bf87c08f5c410/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57702a80e805859260710953242bf87c08f5c410/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=57702a80e805859260710953242bf87c08f5c410", "patch": "@@ -156,21 +156,6 @@ grok_method_quals (tree ctype, tree function, tree quals)\n   return this_quals;\n }\n \n-/* Warn when -fexternal-templates is used and #pragma\n-   interface/implementation is not used all the times it should be,\n-   inform the user.  */\n-\n-void\n-warn_if_unknown_interface (tree decl)\n-{\n-  static int already_warned = 0;\n-  if (already_warned++)\n-    return;\n-\n-  cp_warning_at (\"template `%#D' defined in file without #pragma interface\",\n-\t\t decl);\n-}\n-\n /* A subroutine of the parser, to handle a component list.  */\n \n void"}, {"sha": "db5c0b0ffdefec000f8becf1f0e75480f7591049", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57702a80e805859260710953242bf87c08f5c410/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57702a80e805859260710953242bf87c08f5c410/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=57702a80e805859260710953242bf87c08f5c410", "patch": "@@ -1274,11 +1274,12 @@ Here is a list of options that are @emph{only} for compiling C++ programs:\n \n @item -fabi-version=@var{n}\n @opindex fabi-version\n-Use version @var{n} of the C++ ABI.  Version 1 is the version of the C++\n-ABI that first appeared in G++ 3.2.  Version 0 will always be the\n-version that conforms most closely to the C++ ABI specification.\n-Therefore, the ABI obtained using version 0 will change as ABI bugs are\n-fixed.\n+Use version @var{n} of the C++ ABI.  Version 2 is the version of the\n+C++ ABI that first appeared in G++ 3.4.  Version 1 is the version of\n+the C++ ABI that first appeared in G++ 3.2.  Version 0 will always be\n+the version that conforms most closely to the C++ ABI specification.\n+Therefore, the ABI obtained using version 0 will change as ABI bugs\n+are fixed.\n \n The default is version 1.\n "}, {"sha": "7c5ee7fa3cb9a67424adcd966a9c11c6677d558f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=57702a80e805859260710953242bf87c08f5c410", "patch": "@@ -1,3 +1,20 @@\n+2003-12-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.dg/abi/macro0.C: New test.\n+\t* g++.dg/abi/macro1.C: Likewise.\n+\t* g++.dg/abi/macro2.C: Likewise.\n+\n+\t* g++.dg/abi/bitfield5.C: Add explicit -fabi-version=1 option.\n+\t* g++.dg/abi/bitfield7.C: Likewise.\n+\t* g++.dg/abi/dtor2.C: Likewise.\n+\t* g++.dg/abi/mangle11.C: Likewise.\n+\t* g++.dg/abi/mangle12.C: Likewise.\n+\t* g++.dg/abi/mangle14.C: Likewise.\n+\t* g++.dg/abi/mangle17.C: Likewise.\n+\t* g++.dg/abi/vbase10.C: Likewise.\n+\t* g++.dg/abi/vbase14.C: Likewise.\n+\t* g++.dg/template/qualttp17.C: Likewise.\n+\n 2003-12-21  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c/11995"}, {"sha": "e754f0ddf224bd6d8c27b6802c53df3db23727d2", "filename": "gcc/testsuite/g++.dg/abi/bitfield5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield5.C?ref=57702a80e805859260710953242bf87c08f5c410", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile } \n-// { dg-options \"-Wabi\" }\n+// { dg-options \"-Wabi -fabi-version=1\" }\n \n struct A { \n   virtual void f(); "}, {"sha": "b5b656ffa477b200798865c7f22cbe0f2b58edf0", "filename": "gcc/testsuite/g++.dg/abi/bitfield7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield7.C?ref=57702a80e805859260710953242bf87c08f5c410", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-options \"-Wabi\" }\n+// { dg-options \"-Wabi -fabi-version=1\" }\n \n union U { // { dg-warning \"ABI\" }\n   int i: 4096; // { dg-warning \"exceeds\" }"}, {"sha": "6b89cc8eae0582f9c87bc79cbdfdb05b6de7f61a", "filename": "gcc/testsuite/g++.dg/abi/dtor2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fdtor2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fdtor2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fdtor2.C?ref=57702a80e805859260710953242bf87c08f5c410", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-options \"-Wabi\" }\n+// { dg-options \"-Wabi -fabi-version=1\" }\n \n struct A {\n   virtual void a ();"}, {"sha": "6c391e6891b3c7cfddc6ed783f03d184e48b2c4a", "filename": "gcc/testsuite/g++.dg/abi/macro0.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmacro0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmacro0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmacro0.C?ref=57702a80e805859260710953242bf87c08f5c410", "patch": "@@ -0,0 +1,5 @@\n+// { dg-options \"-fabi-version=0\" }\n+\n+#if __GXX_ABI_VERSION != 999999\n+#error \"Incorrect value of __GXX_ABI_VERSION\"\n+#endif"}, {"sha": "871208da3ad5ec0c2e03aef925e08ac2ec6e3469", "filename": "gcc/testsuite/g++.dg/abi/macro1.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmacro1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmacro1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmacro1.C?ref=57702a80e805859260710953242bf87c08f5c410", "patch": "@@ -0,0 +1,5 @@\n+// { dg-options \"-fabi-version=1\" }\n+\n+#if __GXX_ABI_VERSION != 102\n+#error \"Incorrect value of __GXX_ABI_VERSION\"\n+#endif"}, {"sha": "9f0af9cff34bff1c17bd1f8910a2ecc5bdd3b99f", "filename": "gcc/testsuite/g++.dg/abi/macro2.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmacro2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmacro2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmacro2.C?ref=57702a80e805859260710953242bf87c08f5c410", "patch": "@@ -0,0 +1,5 @@\n+// { dg-options \"-fabi-version=2\" }\n+\n+#if __GXX_ABI_VERSION != 1002\n+#error \"Incorrect value of __GXX_ABI_VERSION\"\n+#endif"}, {"sha": "a049a9566713e25a1b67bd422b431c9fa0a988bd", "filename": "gcc/testsuite/g++.dg/abi/mangle11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle11.C?ref=57702a80e805859260710953242bf87c08f5c410", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-Wabi\" }\n+// { dg-options \"-Wabi -fabi-version=1\" }\n \n template <typename Q>\n void f (typename Q::X) {}"}, {"sha": "406a13b3f79f44ff6d9588738122f0ac92fc4ac7", "filename": "gcc/testsuite/g++.dg/abi/mangle12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle12.C?ref=57702a80e805859260710953242bf87c08f5c410", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-Wabi\" }\n+// { dg-options \"-Wabi -fabi-version=1\" }\n \n template <template <typename> class Q>\n void f (typename Q<int>::X) {}"}, {"sha": "1205ac45fe0a9323a8f5906653cc0218b43921a6", "filename": "gcc/testsuite/g++.dg/abi/mangle14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle14.C?ref=57702a80e805859260710953242bf87c08f5c410", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-options \"-Wabi\" }\n+// { dg-options \"-Wabi -fabi-version=1\" }\n \n struct A {\n   template <typename T> int f ();"}, {"sha": "994da88edcaa36c9adbba6c562a9ee380856b0a6", "filename": "gcc/testsuite/g++.dg/abi/mangle17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle17.C?ref=57702a80e805859260710953242bf87c08f5c410", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-Wabi\" }\n+// { dg-options \"-Wabi -fabi-version=1\" }\n \n enum E { e = 3 };\n "}, {"sha": "7683250ea5d48e59cc3868a2102f1769e3d671b8", "filename": "gcc/testsuite/g++.dg/abi/vbase10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvbase10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvbase10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvbase10.C?ref=57702a80e805859260710953242bf87c08f5c410", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-options \"-Wabi\" }\n+// { dg-options \"-Wabi -fabi-version=1\" }\n \n struct A { virtual void f(); char c1; };\n struct B { B(); char c2; };"}, {"sha": "320d5ba77dcb3843726e3d37069520c1d9f2d5ab", "filename": "gcc/testsuite/g++.dg/abi/vbase14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvbase14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvbase14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvbase14.C?ref=57702a80e805859260710953242bf87c08f5c410", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-Wabi\" }\n+// { dg-options \"-Wabi -fabi-version=1\" }\n \n struct E1 {};\n struct E2 : public E1 {}; // { dg-warning \"layout\" }"}, {"sha": "4d79c9a7653f3cef4d367aca57328bc2756da2f7", "filename": "gcc/testsuite/g++.dg/template/qualttp17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57702a80e805859260710953242bf87c08f5c410/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp17.C?ref=57702a80e805859260710953242bf87c08f5c410", "patch": "@@ -1,7 +1,7 @@\n // Copyright (C) 2001 Free Software Foundation\n // Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n // { dg-do compile }\n-// { dg-options \"-fno-inline\" }\n+// { dg-options \"-fno-inline -fabi-version=1\" }\n \n struct A\n {"}]}