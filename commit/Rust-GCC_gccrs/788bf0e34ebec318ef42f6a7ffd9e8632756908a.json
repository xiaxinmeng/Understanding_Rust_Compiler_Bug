{"sha": "788bf0e34ebec318ef42f6a7ffd9e8632756908a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg4YmYwZTM0ZWJlYzMxOGVmNDJmNmE3ZmZkOWU4NjMyNzU2OTA4YQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-03-26T08:37:27Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-03-26T08:37:27Z"}, "message": "Implement DR 209\n\ncp:\n\tImplement DR 209\n\t* cp-tree.h (skip_type_access_control,\n\treset_type_access_control): Prototype.\n\t* decl.c (grokdeclarator): Access of friends is not checked.\n\t* parse.y (component_decl_list): Reset type access control.\n\t* semantics.c (decl_type_access_control): Clear\n\tcurrent_type_lookups.\n\t(save_type_access_control): Don't save if not deferring.\n\t(skip_type_access_control, reset_type_access_control): New\n\tfunctions.\n\t(begin_class_definition): Do type access control for basetypes.\n\tStart deferred access control.\n\t(finish_class_definition): Resume immediate access control if\n\tthis is a local class.\ntestsuite:\n\t* g++.old-deja/g++.other/friend12.C: New test.\n\t* g++.old-deja/g++.other/friend9.C: Expect no errors.\n\t* g++.old-deja/g++.robertl/eb56.C: Make typedef public.\n\nFrom-SVN: r40841", "tree": {"sha": "e80deebc6a447417a1ef0f9eae56f55fd7dabfbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e80deebc6a447417a1ef0f9eae56f55fd7dabfbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/788bf0e34ebec318ef42f6a7ffd9e8632756908a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/788bf0e34ebec318ef42f6a7ffd9e8632756908a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/788bf0e34ebec318ef42f6a7ffd9e8632756908a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/788bf0e34ebec318ef42f6a7ffd9e8632756908a/comments", "author": null, "committer": null, "parents": [{"sha": "04c5433d684a6e22d266a2bd067eb42e28ee9d60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04c5433d684a6e22d266a2bd067eb42e28ee9d60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04c5433d684a6e22d266a2bd067eb42e28ee9d60"}], "stats": {"total": 192, "additions": 165, "deletions": 27}, "files": [{"sha": "3b89a973e06739fa5686555a423896cab97107ee", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788bf0e34ebec318ef42f6a7ffd9e8632756908a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788bf0e34ebec318ef42f6a7ffd9e8632756908a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=788bf0e34ebec318ef42f6a7ffd9e8632756908a", "patch": "@@ -1,3 +1,20 @@\n+2001-03-26  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tImplement DR 209\n+\t* cp-tree.h (skip_type_access_control,\n+\treset_type_access_control): Prototype.\n+\t* decl.c (grokdeclarator): Access of friends is not checked.\n+\t* parse.y (component_decl_list): Reset type access control.\n+\t* semantics.c (decl_type_access_control): Clear\n+\tcurrent_type_lookups.\n+\t(save_type_access_control): Don't save if not deferring.\n+\t(skip_type_access_control, reset_type_access_control): New\n+\tfunctions.\n+\t(begin_class_definition): Do type access control for basetypes.\n+\tStart deferred access control.\n+\t(finish_class_definition): Resume immediate access control if\n+\tthis is a local class.\n+\n 2001-03-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* class.c (add_method): Use memcpy/memmove, not bcopy."}, {"sha": "5015349156af6f960a39413c79b1f9634ddc014f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788bf0e34ebec318ef42f6a7ffd9e8632756908a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788bf0e34ebec318ef42f6a7ffd9e8632756908a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=788bf0e34ebec318ef42f6a7ffd9e8632756908a", "patch": "@@ -4175,6 +4175,8 @@ extern tree get_binfo\t\t\t\tPARAMS ((tree, tree, int));\n extern int get_base_distance\t\t\tPARAMS ((tree, tree, int, tree *));\n extern tree get_dynamic_cast_base_type          PARAMS ((tree, tree));\n extern void type_access_control\t\t\tPARAMS ((tree, tree));\n+extern void skip_type_access_control            PARAMS ((void));\n+extern void reset_type_access_control           PARAMS ((void));\n extern int accessible_p                         PARAMS ((tree, tree));\n extern tree lookup_field\t\t\tPARAMS ((tree, tree, int, int));\n extern int lookup_fnfields_1                    PARAMS ((tree, tree));"}, {"sha": "03f94a35fa112596efc24286ac8bc92a1d731e2f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788bf0e34ebec318ef42f6a7ffd9e8632756908a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788bf0e34ebec318ef42f6a7ffd9e8632756908a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=788bf0e34ebec318ef42f6a7ffd9e8632756908a", "patch": "@@ -11131,7 +11131,9 @@ friend declaration requires class-key, i.e. `friend %#T'\",\n \t  /* Only try to do this stuff if we didn't already give up.  */\n \t  if (type != integer_type_node)\n \t    {\n-\t      decl_type_access_control (TYPE_NAME (type));\n+\t      /* DR 209. The friendly class does not need to be accessible\n+                 in the scope of the class granting friendship. */\n+\t      skip_type_access_control ();\n \n \t      /* A friendly class?  */\n \t      if (current_class_type)\n@@ -11393,32 +11395,33 @@ friend declaration requires class-key, i.e. `friend %#T'\",\n \tif (friendp)\n \t  {\n \t    /* Friends are treated specially.  */\n+            tree t = NULL_TREE;\n+\t    \n+\t    /* DR 209. The friend does not need to be accessible at this\n+               point. */\n+\t    skip_type_access_control ();\n+\t    \n \t    if (ctype == current_class_type)\n \t      warning (\"member functions are implicitly friends of their class\");\n-\t    else\n-\t      {\n-\t\ttree t = NULL_TREE;\n-\t\tif (decl && DECL_NAME (decl))\n-\t\t  {\n-\t\t    if (template_class_depth (current_class_type) == 0)\n-\t\t      {\n-\t\t\tdecl\n-\t\t\t  = check_explicit_specialization\n-\t\t\t  (declarator, decl,\n-\t\t\t   template_count, 2 * (funcdef_flag != 0) + 4);\n-\t\t\tif (decl == error_mark_node)\n-\t\t\t  return error_mark_node;\n-\t\t      }\n \n-\t\t    t = do_friend (ctype, declarator, decl,\n-\t\t\t\t   last_function_parms, attrlist, flags, quals,\n-\t\t\t\t   funcdef_flag);\n-\t\t  }\n-\t\tif (t && funcdef_flag)\n-\t\t  return t;\n-\n-\t\treturn void_type_node;\n-\t      }\n+            if (decl && DECL_NAME (decl))\n+              {\n+                if (template_class_depth (current_class_type) == 0)\n+                  {\n+              \t    decl = check_explicit_specialization\n+              \t            (declarator, decl,\n+              \t             template_count, 2 * (funcdef_flag != 0) + 4);\n+              \t    if (decl == error_mark_node)\n+              \t      return error_mark_node;\n+                  }\n+              \n+                t = do_friend (ctype, declarator, decl,\n+              \t\t       last_function_parms, attrlist, flags, quals,\n+              \t\t       funcdef_flag);\n+              }\n+            if (t && funcdef_flag)\n+              return t;\n+\t    return void_type_node;\n \t  }\n \n \t/* Structure field.  It may not be a function, except for C++ */"}, {"sha": "f13614b750a8c39977c3eaedfcae6eb7acd7bdd0", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788bf0e34ebec318ef42f6a7ffd9e8632756908a/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788bf0e34ebec318ef42f6a7ffd9e8632756908a/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=788bf0e34ebec318ef42f6a7ffd9e8632756908a", "patch": "@@ -2548,11 +2548,13 @@ component_decl_list:\n \t\t{ \n \t\t  finish_member_declaration ($1);\n \t\t  current_aggr = NULL_TREE;\n+\t\t  reset_type_access_control ();\n \t\t}\n \t| component_decl_list component_decl\n \t\t{ \n \t\t  finish_member_declaration ($2);\n \t\t  current_aggr = NULL_TREE;\n+\t\t  reset_type_access_control ();\n \t\t}\n \t;\n "}, {"sha": "c99a0db4e7064d61340f27021cb544dd1c0d463c", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788bf0e34ebec318ef42f6a7ffd9e8632756908a/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788bf0e34ebec318ef42f6a7ffd9e8632756908a/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=788bf0e34ebec318ef42f6a7ffd9e8632756908a", "patch": "@@ -1593,13 +1593,41 @@ decl_type_access_control (decl)\n      added to type_lookups after typed_declspecs saved the copy that\n      ended up in current_type_lookups.  */\n   type_lookups = current_type_lookups;\n+  \n+  current_type_lookups = NULL_TREE;\n }\n \n+/* Record the lookups, if we're doing deferred access control.  */\n+\n void\n save_type_access_control (lookups)\n      tree lookups;\n {\n-  current_type_lookups = lookups;\n+  if (type_lookups != error_mark_node)\n+    {\n+      my_friendly_assert (!current_type_lookups, 20010301);\n+      current_type_lookups = lookups;\n+    }\n+  else\n+    my_friendly_assert (!lookups || lookups == error_mark_node, 20010301);\n+}\n+\n+/* Set things up so that the next deferred access control will succeed.\n+   This is needed for friend declarations see grokdeclarator for details.  */\n+\n+void\n+skip_type_access_control ()\n+{\n+  type_lookups = NULL_TREE;\n+}\n+\n+/* Reset the deferred access control.  */\n+\n+void\n+reset_type_access_control ()\n+{\n+  type_lookups = NULL_TREE;\n+  current_type_lookups = NULL_TREE;\n }\n \n /* Begin a function definition declared with DECL_SPECS and\n@@ -1732,6 +1760,10 @@ tree\n begin_class_definition (t)\n      tree t;\n {\n+  /* Check the bases are accessible. */\n+  decl_type_access_control (TYPE_NAME (t));\n+  reset_type_access_control ();\n+  \n   if (processing_template_parmlist)\n     {\n       cp_error (\"definition of `%#T' inside template parameter list\", t);\n@@ -1953,6 +1985,8 @@ finish_class_definition (t, attributes, semi, pop_scope_p)\n     check_for_missing_semicolon (t); \n   if (pop_scope_p)\n     pop_scope (CP_DECL_CONTEXT (TYPE_MAIN_DECL (t)));\n+  if (current_function_decl)\n+    type_lookups = error_mark_node;\n   if (current_scope () == current_function_decl)\n     do_pending_defargs ();\n "}, {"sha": "86736d39462533247f1fcde163494a4d280242d3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788bf0e34ebec318ef42f6a7ffd9e8632756908a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788bf0e34ebec318ef42f6a7ffd9e8632756908a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=788bf0e34ebec318ef42f6a7ffd9e8632756908a", "patch": "@@ -1,3 +1,9 @@\n+2001-03-26  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.other/friend12.C: New test.\n+\t* g++.old-deja/g++.other/friend9.C: Expect no errors.\n+\t* g++.old-deja/g++.robertl/eb56.C: Make typedef public.\n+\n 2001-03-25  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.c-torture/execute/20010325-1.c: New test."}, {"sha": "df767b35d1408fba07b39255069a59b6d56d198e", "filename": "gcc/testsuite/g++.old-deja/g++.other/friend12.C", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788bf0e34ebec318ef42f6a7ffd9e8632756908a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffriend12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788bf0e34ebec318ef42f6a7ffd9e8632756908a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffriend12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffriend12.C?ref=788bf0e34ebec318ef42f6a7ffd9e8632756908a", "patch": "@@ -0,0 +1,71 @@\n+// Build don't link:\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 1 Mar 2001 <nathan@codesourcery.com>\n+\n+// DR 209. friend access is not checked.\n+\n+class Z;\n+class A\n+{\n+  class Inner {}; // ERROR - private\n+  Inner f (Inner);\n+  public:\n+  A ();\n+  friend class Z;\n+};\n+\n+class B\n+{\n+  A::Inner j ();    // ERROR - private\n+  A::Inner k ();    // ERROR - private\n+  friend A::Inner A::f (Inner);\n+  int t;\n+  friend class A::Inner;\n+};\n+\n+A::Inner l ();    // ERROR - private\n+A::Inner m ();    // ERROR - private\n+A::Inner a,       // ERROR - private\n+         b;       // ERROR - private\n+A::Inner a1;      // ERROR - private\n+int b2;\n+\n+A::Inner A::f (Inner)\n+{\n+  B b;\n+  b.t = 1;\n+  return A::Inner ();\n+}\n+\n+void Foo ()\n+{\n+  A::Inner i;  // ERROR - private\n+  class Local\n+  {\n+    friend A::Inner A::f (Inner);\n+    A::Inner k; // ERROR - private\n+  };\n+  class Local1 : A::Inner\n+  { // ERROR - private\n+    \n+  };\n+  A::Inner k;  // ERROR - private\n+}\n+\n+class X : A::Inner\n+{  // ERROR - private\n+  class I : A::Inner\n+  {  // ERROR - private\n+    \n+  };\n+};\n+\n+class Z : A::Inner\n+{  // ERROR - private\n+  class I : A::Inner\n+  { // ok, the base A::Inner is in the scope of Z which is a friend of A\n+    \n+  };\n+};\n+int b4;"}, {"sha": "e51b0274c6654dd33c61ba7e8417d1c7da16675a", "filename": "gcc/testsuite/g++.old-deja/g++.other/friend9.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788bf0e34ebec318ef42f6a7ffd9e8632756908a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffriend9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788bf0e34ebec318ef42f6a7ffd9e8632756908a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffriend9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffriend9.C?ref=788bf0e34ebec318ef42f6a7ffd9e8632756908a", "patch": "@@ -5,14 +5,16 @@\n \n // Bug 853: We reported the wrong line no for a friend access violation\n \n+// Since DR 209, friend declaration access is not checked.\n+\n class F\n {\n-  class Internal;   // ERROR - is private\n+  class Internal;\n };\n \n class C\n {\n-  friend class F::Internal; // ERROR - in this context\n+  friend class F::Internal;\n   public:\n   typedef enum { A, B } e;\n "}, {"sha": "2249a40b24ccf218c8df529875ff3b2a93b5973e", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb56.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788bf0e34ebec318ef42f6a7ffd9e8632756908a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788bf0e34ebec318ef42f6a7ffd9e8632756908a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb56.C?ref=788bf0e34ebec318ef42f6a7ffd9e8632756908a", "patch": "@@ -2,6 +2,7 @@\n // Build don't link:\n \n class foo {\n+  public:\n         typedef int sometype;\n };\n "}]}