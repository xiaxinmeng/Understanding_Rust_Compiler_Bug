{"sha": "c04f64807ee5e911741290aafc90d17618a02dca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA0ZjY0ODA3ZWU1ZTkxMTc0MTI5MGFhZmM5MGQxNzYxOGEwMmRjYQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-05-29T09:55:02Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-05-29T09:55:02Z"}, "message": "Add vec::reverse.\n\n2018-05-29  Martin Liska  <mliska@suse.cz>\n\t    David Malcolm  <dmalcolm@redhat.com>\n\n\t* vec.c (test_reverse): New.\n\t(vec_c_tests): Add new test.\n\t* vec.h (vl_ptr>::reverse): New function.\n\nCo-Authored-By: David Malcolm <dmalcolm@redhat.com>\n\nFrom-SVN: r260890", "tree": {"sha": "edf1890fb08bd388e0654ec0a86b1dfadec70166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edf1890fb08bd388e0654ec0a86b1dfadec70166"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c04f64807ee5e911741290aafc90d17618a02dca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c04f64807ee5e911741290aafc90d17618a02dca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c04f64807ee5e911741290aafc90d17618a02dca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c04f64807ee5e911741290aafc90d17618a02dca/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "86e74d5869813c22b946d76e7dbe960ef0a0c1f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86e74d5869813c22b946d76e7dbe960ef0a0c1f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86e74d5869813c22b946d76e7dbe960ef0a0c1f2"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "01a24da64d0ea5e662bd2a58c0a4e9d6d3da313e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04f64807ee5e911741290aafc90d17618a02dca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04f64807ee5e911741290aafc90d17618a02dca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c04f64807ee5e911741290aafc90d17618a02dca", "patch": "@@ -1,3 +1,10 @@\n+2018-05-29  Martin Liska  <mliska@suse.cz>\n+\t    David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* vec.c (test_reverse): New.\n+\t(vec_c_tests): Add new test.\n+\t* vec.h (vl_ptr>::reverse): New function.\n+\n 2018-05-29  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* config.gcc: Identify FreeBSD 3.x and 4.x as unsupported."}, {"sha": "beb857fd83885ba2282b393899581f461f1decfd", "filename": "gcc/vec.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04f64807ee5e911741290aafc90d17618a02dca/gcc%2Fvec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04f64807ee5e911741290aafc90d17618a02dca/gcc%2Fvec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.c?ref=c04f64807ee5e911741290aafc90d17618a02dca", "patch": "@@ -476,6 +476,43 @@ test_qsort ()\n   ASSERT_EQ (10, v.length ());\n }\n \n+/* Verify that vec::reverse works correctly.  */\n+\n+static void\n+test_reverse ()\n+{\n+  /* Reversing an empty vec ought to be a no-op.  */\n+  {\n+    auto_vec <int> v;\n+    ASSERT_EQ (0, v.length ());\n+    v.reverse ();\n+    ASSERT_EQ (0, v.length ());\n+  }\n+\n+  /* Verify reversing a vec with even length.  */\n+  {\n+    auto_vec <int> v;\n+    safe_push_range (v, 0, 4);\n+    v.reverse ();\n+    ASSERT_EQ (3, v[0]);\n+    ASSERT_EQ (2, v[1]);\n+    ASSERT_EQ (1, v[2]);\n+    ASSERT_EQ (0, v[3]);\n+    ASSERT_EQ (4, v.length ());\n+  }\n+\n+  /* Verify reversing a vec with odd length.  */\n+  {\n+    auto_vec <int> v;\n+    safe_push_range (v, 0, 3);\n+    v.reverse ();\n+    ASSERT_EQ (2, v[0]);\n+    ASSERT_EQ (1, v[1]);\n+    ASSERT_EQ (0, v[2]);\n+    ASSERT_EQ (3, v.length ());\n+  }\n+}\n+\n /* Run all of the selftests within this file.  */\n \n void\n@@ -492,6 +529,7 @@ vec_c_tests ()\n   test_unordered_remove ();\n   test_block_remove ();\n   test_qsort ();\n+  test_reverse ();\n }\n \n } // namespace selftest"}, {"sha": "a9f3bcf09ebcb956659b9e1574c4f76ed3b6f0ae", "filename": "gcc/vec.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04f64807ee5e911741290aafc90d17618a02dca/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04f64807ee5e911741290aafc90d17618a02dca/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=c04f64807ee5e911741290aafc90d17618a02dca", "patch": "@@ -1389,6 +1389,7 @@ struct vec<T, va_heap, vl_ptr>\n   T *bsearch (const void *key, int (*compar)(const void *, const void *));\n   unsigned lower_bound (T, bool (*)(const T &, const T &)) const;\n   bool contains (const T &search) const;\n+  void reverse (void);\n \n   bool using_auto_storage () const;\n \n@@ -1900,6 +1901,19 @@ vec<T, va_heap, vl_ptr>::contains (const T &search) const\n   return m_vec ? m_vec->contains (search) : false;\n }\n \n+/* Reverse content of the vector.  */\n+\n+template<typename T>\n+inline void\n+vec<T, va_heap, vl_ptr>::reverse (void)\n+{\n+  unsigned l = length ();\n+  T *ptr = address ();\n+\n+  for (unsigned i = 0; i < l / 2; i++)\n+    std::swap (ptr[i], ptr[l - i - 1]);\n+}\n+\n template<typename T>\n inline bool\n vec<T, va_heap, vl_ptr>::using_auto_storage () const"}]}