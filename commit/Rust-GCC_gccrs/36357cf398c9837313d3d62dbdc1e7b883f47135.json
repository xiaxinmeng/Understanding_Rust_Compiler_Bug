{"sha": "36357cf398c9837313d3d62dbdc1e7b883f47135", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYzNTdjZjM5OGM5ODM3MzEzZDNkNjJkYmRjMWU3Yjg4M2Y0NzEzNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T10:33:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T10:33:46Z"}, "message": "[multiple changes]\n\n2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Inherits_Class_Wide_Pre): Cleanup code, handle\n\tproperly type derived from generic formal types, to handle\n\tproperly modified version of ACATS 4.1B B611017.\n\n2017-04-25  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_unst.adb (Subp_Index): Adding missing\n\tsupport for renamings and functions that return a constrained\n\tarray type (i.e. functions for which the frontend built a\n\tprocedure with an extra out parameter).\n\n2017-04-25  Pascal Obry  <obry@adacore.com>\n\n\t* s-string.adb: Minor code clean-up.\n\n2017-04-25  Bob Duff  <duff@adacore.com>\n\n\t* s-os_lib.ads, s-os_lib.adb (Non_Blocking_Wait_Process): New\n\tprocedure.\n\t* adaint.h, adaint.c (__gnat_portable_no_block_wait): C support\n\tfunction for Non_Blocking_Wait_Process.\n\n2017-04-25  Bob Duff  <duff@adacore.com>\n\n\t* prep.adb (Preprocess): Remove incorrect\n\tAssert. Current character can be ASCII.CR.\n\nFrom-SVN: r247177", "tree": {"sha": "8ba8aa8762aaf62f07c3ced830e35ac9385e62ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ba8aa8762aaf62f07c3ced830e35ac9385e62ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36357cf398c9837313d3d62dbdc1e7b883f47135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36357cf398c9837313d3d62dbdc1e7b883f47135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36357cf398c9837313d3d62dbdc1e7b883f47135", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36357cf398c9837313d3d62dbdc1e7b883f47135/comments", "author": null, "committer": null, "parents": [{"sha": "48c8c473932813f5d55f5ee3194ea18cf741aacc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48c8c473932813f5d55f5ee3194ea18cf741aacc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48c8c473932813f5d55f5ee3194ea18cf741aacc"}], "stats": {"total": 139, "additions": 110, "deletions": 29}, "files": [{"sha": "4ed0c7443b7f0f9124d29e121671a4025eee322b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36357cf398c9837313d3d62dbdc1e7b883f47135/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36357cf398c9837313d3d62dbdc1e7b883f47135/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=36357cf398c9837313d3d62dbdc1e7b883f47135", "patch": "@@ -1,3 +1,32 @@\n+2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Inherits_Class_Wide_Pre): Cleanup code, handle\n+\tproperly type derived from generic formal types, to handle\n+\tproperly modified version of ACATS 4.1B B611017.\n+\n+2017-04-25  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_unst.adb (Subp_Index): Adding missing\n+\tsupport for renamings and functions that return a constrained\n+\tarray type (i.e. functions for which the frontend built a\n+\tprocedure with an extra out parameter).\n+\n+2017-04-25  Pascal Obry  <obry@adacore.com>\n+\n+\t* s-string.adb: Minor code clean-up.\n+\n+2017-04-25  Bob Duff  <duff@adacore.com>\n+\n+\t* s-os_lib.ads, s-os_lib.adb (Non_Blocking_Wait_Process): New\n+\tprocedure.\n+\t* adaint.h, adaint.c (__gnat_portable_no_block_wait): C support\n+\tfunction for Non_Blocking_Wait_Process.\n+\n+2017-04-25  Bob Duff  <duff@adacore.com>\n+\n+\t* prep.adb (Preprocess): Remove incorrect\n+\tAssert. Current character can be ASCII.CR.\n+\n 2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_prag.adb (Set_Convention_From_Pragma): Cleanup code for"}, {"sha": "5cc84caedeb396a7351dd84506fbf2464998cef9", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36357cf398c9837313d3d62dbdc1e7b883f47135/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36357cf398c9837313d3d62dbdc1e7b883f47135/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=36357cf398c9837313d3d62dbdc1e7b883f47135", "patch": "@@ -2315,7 +2315,7 @@ __gnat_dup2 (int oldfd ATTRIBUTE_UNUSED, int newfd ATTRIBUTE_UNUSED)\n      RTPs.  */\n   return -1;\n #elif defined (__PikeOS__)\n-  /* Not supported.  */\n+  /* Not supported. */\n   return -1;\n #elif defined (_WIN32)\n   /* Special case when oldfd and newfd are identical and are the standard\n@@ -2679,6 +2679,26 @@ __gnat_portable_wait (int *process_status)\n   return pid;\n }\n \n+int\n+__gnat_portable_no_block_wait (int *process_status)\n+{\n+  int status = 0;\n+  int pid = 0;\n+\n+#if defined (__vxworks) || defined (__PikeOS__) || defined (_WIN32)\n+  /* Not supported. */\n+  status = -1;\n+\n+#else\n+\n+  pid = waitpid (-1, &status, WNOHANG);\n+  status = status & 0xffff;\n+#endif\n+\n+  *process_status = status;\n+  return pid;\n+}\n+\n void\n __gnat_os_exit (int status)\n {"}, {"sha": "444e04d753c354a268574b5ab9ca098e72e80014", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36357cf398c9837313d3d62dbdc1e7b883f47135/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36357cf398c9837313d3d62dbdc1e7b883f47135/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=36357cf398c9837313d3d62dbdc1e7b883f47135", "patch": "@@ -233,6 +233,7 @@ extern int    __gnat_is_symbolic_link\t\t   (char *name);\n extern int    __gnat_portable_spawn                (char *[]);\n extern int    __gnat_portable_no_block_spawn       (char *[]);\n extern int    __gnat_portable_wait                 (int *);\n+extern int    __gnat_portable_no_block_wait        (int *);\n extern int    __gnat_current_process_id            (void);\n extern char  *__gnat_locate_exec                   (char *, char *);\n extern char  *__gnat_locate_exec_on_path           (char *);"}, {"sha": "62d9d339f209fe8fe2ce822d7c2c9e2e7a279b42", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36357cf398c9837313d3d62dbdc1e7b883f47135/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36357cf398c9837313d3d62dbdc1e7b883f47135/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=36357cf398c9837313d3d62dbdc1e7b883f47135", "patch": "@@ -35,6 +35,7 @@ with Opt;      use Opt;\n with Output;   use Output;\n with Rtsfind;  use Rtsfind;\n with Sem;      use Sem;\n+with Sem_Aux;  use Sem_Aux;\n with Sem_Ch8;  use Sem_Ch8;\n with Sem_Mech; use Sem_Mech;\n with Sem_Res;  use Sem_Res;\n@@ -176,9 +177,24 @@ package body Exp_Unst is\n    ----------------\n \n    function Subp_Index (Sub : Entity_Id) return SI_Type is\n+      E : Entity_Id := Sub;\n+\n    begin\n-      pragma Assert (Is_Subprogram (Sub));\n-      return SI_Type (UI_To_Int (Subps_Index (Sub)));\n+      pragma Assert (Is_Subprogram (E));\n+\n+      if Subps_Index (E) = Uint_0 then\n+         E := Ultimate_Alias (E);\n+\n+         if Ekind (E) = E_Function\n+           and then Rewritten_For_C (E)\n+           and then Present (Corresponding_Procedure (E))\n+         then\n+            E := Corresponding_Procedure (E);\n+         end if;\n+      end if;\n+\n+      pragma Assert (Subps_Index (E) /= Uint_0);\n+      return SI_Type (UI_To_Int (Subps_Index (E)));\n    end Subp_Index;\n \n    -----------------------"}, {"sha": "ef0712da6ac734f8232f138a78ffadc1ada62692", "filename": "gcc/ada/prep.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36357cf398c9837313d3d62dbdc1e7b883f47135/gcc%2Fada%2Fprep.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36357cf398c9837313d3d62dbdc1e7b883f47135/gcc%2Fada%2Fprep.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprep.adb?ref=36357cf398c9837313d3d62dbdc1e7b883f47135", "patch": "@@ -1572,7 +1572,6 @@ package body Prep is\n             then\n                Start_Of_Processing := Token_Ptr + 2;\n             else\n-               pragma Assert (Sinput.Source (Token_Ptr) = ASCII.LF);\n                Start_Of_Processing := Token_Ptr + 1;\n             end if;\n          end if;"}, {"sha": "014f6b4d66b78764bb66926375fb564ccf65f771", "filename": "gcc/ada/s-os_lib.adb", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36357cf398c9837313d3d62dbdc1e7b883f47135/gcc%2Fada%2Fs-os_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36357cf398c9837313d3d62dbdc1e7b883f47135/gcc%2Fada%2Fs-os_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.adb?ref=36357cf398c9837313d3d62dbdc1e7b883f47135", "patch": "@@ -1927,6 +1927,28 @@ package body System.OS_Lib is\n       return Result;\n    end Non_Blocking_Spawn;\n \n+   -------------------------------\n+   -- Non_Blocking_Wait_Process --\n+   -------------------------------\n+\n+   procedure Non_Blocking_Wait_Process\n+     (Pid : out Process_Id; Success : out Boolean)\n+   is\n+      Status : Integer;\n+\n+      function Portable_No_Block_Wait (S : Address) return Process_Id;\n+      pragma Import\n+        (C, Portable_No_Block_Wait, \"__gnat_portable_no_block_wait\");\n+\n+   begin\n+      Pid := Portable_No_Block_Wait (Status'Address);\n+      Success := (Status = 0);\n+\n+      if Pid = 0 then\n+         Pid := Invalid_Pid;\n+      end if;\n+   end Non_Blocking_Wait_Process;\n+\n    -------------------------\n    -- Normalize_Arguments --\n    -------------------------"}, {"sha": "31e171b2f702999b2b5fcd2bc2146d86023806b8", "filename": "gcc/ada/s-os_lib.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36357cf398c9837313d3d62dbdc1e7b883f47135/gcc%2Fada%2Fs-os_lib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36357cf398c9837313d3d62dbdc1e7b883f47135/gcc%2Fada%2Fs-os_lib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.ads?ref=36357cf398c9837313d3d62dbdc1e7b883f47135", "patch": "@@ -937,6 +937,12 @@ package System.OS_Lib is\n    --  This function will always set success to False under VxWorks, since\n    --  there is no notion of executables under this OS.\n \n+   procedure Non_Blocking_Wait_Process\n+     (Pid : out Process_Id; Success : out Boolean);\n+   --  Same as Wait_Process, except if there are no completed child processes,\n+   --  return immediately without blocking, and return Invalid_Pid in Pid.\n+   --  Not supported on all platforms; Success = False if not supported.\n+\n    -------------------------------------\n    -- NOTE: Spawn in Tasking Programs --\n    -------------------------------------"}, {"sha": "88439ccf2bcb163b97a1828975290ee17f2a0af8", "filename": "gcc/ada/s-string.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36357cf398c9837313d3d62dbdc1e7b883f47135/gcc%2Fada%2Fs-string.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36357cf398c9837313d3d62dbdc1e7b883f47135/gcc%2Fada%2Fs-string.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-string.adb?ref=36357cf398c9837313d3d62dbdc1e7b883f47135", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1995-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,7 +38,6 @@ package body System.Strings is\n    ----------\n \n    procedure Free (Arg : in out String_List_Access) is\n-      X : String_Access;\n \n       procedure Free_Array is new Ada.Unchecked_Deallocation\n         (Object => String_List, Name => String_List_Access);\n@@ -48,8 +47,7 @@ package body System.Strings is\n \n       if Arg /= null then\n          for J in Arg'Range loop\n-            X := Arg (J);\n-            Free (X);\n+            Free (Arg (J));\n          end loop;\n       end if;\n "}, {"sha": "7e13f52ab59f03bc8633a89c89c17e2f25382a7f", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36357cf398c9837313d3d62dbdc1e7b883f47135/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36357cf398c9837313d3d62dbdc1e7b883f47135/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=36357cf398c9837313d3d62dbdc1e7b883f47135", "patch": "@@ -4218,10 +4218,10 @@ package body Sem_Prag is\n          -----------------------------\n \n          function Inherits_Class_Wide_Pre (E : Entity_Id) return Boolean is\n-            Prev : Entity_Id := Overridden_Operation (E);\n+            Typ  : constant Entity_Id := Find_Dispatching_Type (E);\n+            Prev : Entity_Id          := Overridden_Operation (E);\n             Cont : Node_Id;\n             Prag : Node_Id;\n-            Typ  : Entity_Id;\n \n          begin\n             --  Check ancestors on the overriding operation to examine the\n@@ -4240,14 +4240,21 @@ package body Sem_Prag is\n                   end loop;\n                end if;\n \n-               Prev := Overridden_Operation (Prev);\n+               --  For a type derived from a generic formal type, the\n+               --  operation inheriting the condition is a renaming, not\n+               --  an overriding of the operation of the formal.\n+\n+               if Is_Generic_Type (Find_Dispatching_Type (Prev)) then\n+                  Prev := Alias (Prev);\n+               else\n+                  Prev := Overridden_Operation (Prev);\n+               end if;\n             end loop;\n \n             --  If the controlling type of the subprogram has progenitors, an\n             --  interface operation implemented by the current operation may\n             --  have a class-wide precondition.\n \n-            Typ := Find_Dispatching_Type (E);\n             if Has_Interfaces (Typ) then\n                declare\n                   Elmt      : Elmt_Id;\n@@ -4414,7 +4421,6 @@ package body Sem_Prag is\n \n             declare\n                E : constant Entity_Id := Defining_Entity (Subp_Decl);\n-               H : constant Entity_Id := Homonym (E);\n \n             begin\n                if Class_Present (N)\n@@ -4425,22 +4431,6 @@ package body Sem_Prag is\n                   Error_Msg_N\n                     (\"illegal class-wide precondition on overriding operation\",\n                      Corresponding_Aspect (N));\n-\n-               --  If the operation is declared in the private part of an\n-               --  instance it may not override any visible operations, but\n-               --  still have a parent operation that carries a precondition.\n-\n-               elsif In_Instance\n-                 and then In_Private_Part (Current_Scope)\n-                 and then Present (H)\n-                 and then Scope (E) = Scope (H)\n-                 and then Is_Inherited_Operation (H)\n-                 and then Present (Overridden_Operation (H))\n-                 and then not Inherits_Class_Wide_Pre (H)\n-               then\n-                  Error_Msg_N\n-                    (\"illegal class-wide precondition on overriding \"\n-                     & \"operation in instance\", Corresponding_Aspect (N));\n                end if;\n             end;\n "}]}