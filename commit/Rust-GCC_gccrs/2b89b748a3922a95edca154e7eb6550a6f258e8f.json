{"sha": "2b89b748a3922a95edca154e7eb6550a6f258e8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI4OWI3NDhhMzkyMmE5NWVkY2ExNTRlN2ViNjU1MGE2ZjI1OGU4Zg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2019-11-13T23:40:49Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-11-13T23:40:49Z"}, "message": "ipa-cp.c (propagate_vr_across_jump_function): Propagate also across binary operations.\n\n\t* ipa-cp.c (propagate_vr_across_jump_function): Propagate also across\n\tbinary operations.\n\nFrom-SVN: r278185", "tree": {"sha": "a2f3b73973a9a988ac9eb96a8dcec7e1e1b76577", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2f3b73973a9a988ac9eb96a8dcec7e1e1b76577"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b89b748a3922a95edca154e7eb6550a6f258e8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b89b748a3922a95edca154e7eb6550a6f258e8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b89b748a3922a95edca154e7eb6550a6f258e8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b89b748a3922a95edca154e7eb6550a6f258e8f/comments", "author": null, "committer": null, "parents": [{"sha": "d772e360ba9fa1f683bac47fcb66988462d2a583", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d772e360ba9fa1f683bac47fcb66988462d2a583", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d772e360ba9fa1f683bac47fcb66988462d2a583"}], "stats": {"total": 61, "additions": 47, "deletions": 14}, "files": [{"sha": "1bc627a111dd4ee8ece55664e63c794231d8bb1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b89b748a3922a95edca154e7eb6550a6f258e8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b89b748a3922a95edca154e7eb6550a6f258e8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b89b748a3922a95edca154e7eb6550a6f258e8f", "patch": "@@ -1,3 +1,8 @@\n+2019-11-13  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-cp.c (propagate_vr_across_jump_function): Propagate also across\n+\tbinary operations.\n+\n 2019-11-13  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-profile.c (check_argument_count): Check properly that e_info"}, {"sha": "36cac5f012ce6637b27c908cca834449ad494e27", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 42, "deletions": 14, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b89b748a3922a95edca154e7eb6550a6f258e8f/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b89b748a3922a95edca154e7eb6550a6f258e8f/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=2b89b748a3922a95edca154e7eb6550a6f258e8f", "patch": "@@ -1975,23 +1975,51 @@ propagate_vr_across_jump_function (cgraph_edge *cs, ipa_jump_func *jfunc,\n   if (jfunc->type == IPA_JF_PASS_THROUGH)\n     {\n       enum tree_code operation = ipa_get_jf_pass_through_operation (jfunc);\n+      class ipa_node_params *caller_info = IPA_NODE_REF (cs->caller);\n+      int src_idx = ipa_get_jf_pass_through_formal_id (jfunc);\n+      class ipcp_param_lattices *src_lats\n+\t= ipa_get_parm_lattices (caller_info, src_idx);\n+      tree operand_type = ipa_get_type (caller_info, src_idx);\n+\n+      if (src_lats->m_value_range.bottom_p ())\n+\treturn dest_lat->set_to_bottom ();\n \n+      value_range vr;\n       if (TREE_CODE_CLASS (operation) == tcc_unary)\n \t{\n-\t  class ipa_node_params *caller_info = IPA_NODE_REF (cs->caller);\n-\t  int src_idx = ipa_get_jf_pass_through_formal_id (jfunc);\n-\t  tree operand_type = ipa_get_type (caller_info, src_idx);\n-\t  class ipcp_param_lattices *src_lats\n-\t    = ipa_get_parm_lattices (caller_info, src_idx);\n-\n-\t  if (src_lats->m_value_range.bottom_p ())\n-\t    return dest_lat->set_to_bottom ();\n-\t  value_range vr;\n-\t  if (ipa_vr_operation_and_type_effects (&vr,\n-\t\t\t\t\t\t &src_lats->m_value_range.m_vr,\n-\t\t\t\t\t\t operation, param_type,\n-\t\t\t\t\t\t operand_type))\n-\t    return dest_lat->meet_with (&vr);\n+\t  ipa_vr_operation_and_type_effects (&vr,\n+\t\t\t\t\t     &src_lats->m_value_range.m_vr,\n+\t\t\t\t\t     operation, param_type,\n+\t\t\t\t\t     operand_type);\n+\t}\n+      /* A crude way to prevent unbounded number of value range updates\n+\t in SCC components.  We should allow limited number of updates within\n+\t SCC, too.  */\n+      else if (!ipa_edge_within_scc (cs))\n+\t{\n+\t  tree op = ipa_get_jf_pass_through_operand (jfunc);\n+\t  value_range op_vr (op, op);\n+\t  value_range op_res,res;\n+\n+\t  range_fold_binary_expr (&op_res, operation, operand_type,\n+\t\t\t\t  &src_lats->m_value_range.m_vr, &op_vr);\n+\t  ipa_vr_operation_and_type_effects (&vr,\n+\t\t\t\t\t     &op_res,\n+\t\t\t\t\t     NOP_EXPR, param_type,\n+\t\t\t\t\t     operand_type);\n+\t}\n+      if (!vr.undefined_p () && !vr.varying_p ())\n+\t{\n+\t  if (jfunc->m_vr)\n+\t    {\n+\t      value_range jvr;\n+\t      if (ipa_vr_operation_and_type_effects (&jvr, jfunc->m_vr,\n+\t\t\t\t\t\t     NOP_EXPR,\n+\t\t\t\t\t\t     param_type,\n+\t\t\t\t\t\t     jfunc->m_vr->type ()))\n+\t\tvr.intersect (*jfunc->m_vr);\n+\t    }\n+\t  return dest_lat->meet_with (&vr);\n \t}\n     }\n   else if (jfunc->type == IPA_JF_CONST)"}]}