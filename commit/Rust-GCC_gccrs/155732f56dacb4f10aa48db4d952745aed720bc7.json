{"sha": "155732f56dacb4f10aa48db4d952745aed720bc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU1NzMyZjU2ZGFjYjRmMTBhYTQ4ZGI0ZDk1Mjc0NWFlZDcyMGJjNw==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-05-29T20:13:52Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-05-29T20:13:52Z"}, "message": "PR 48931 Use async-signal-safe execve instead of execvp\n\nFrom-SVN: r174415", "tree": {"sha": "cb0da06274fcd0419a2fe0ae1c347faf09af5f70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb0da06274fcd0419a2fe0ae1c347faf09af5f70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/155732f56dacb4f10aa48db4d952745aed720bc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/155732f56dacb4f10aa48db4d952745aed720bc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/155732f56dacb4f10aa48db4d952745aed720bc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/155732f56dacb4f10aa48db4d952745aed720bc7/comments", "author": null, "committer": null, "parents": [{"sha": "eb93b31f68a621299de05ce7774d68c948950123", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb93b31f68a621299de05ce7774d68c948950123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb93b31f68a621299de05ce7774d68c948950123"}], "stats": {"total": 77, "additions": 75, "deletions": 2}, "files": [{"sha": "90929219d8ca1ee8186e44cf1e449880b3260eb1", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155732f56dacb4f10aa48db4d952745aed720bc7/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155732f56dacb4f10aa48db4d952745aed720bc7/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=155732f56dacb4f10aa48db4d952745aed720bc7", "patch": "@@ -1,3 +1,15 @@\n+2011-05-29  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+        PR libfortran/48931\n+        * libgfortran.h (find_addr2line): New prototype.\n+        * runtime/backtrace.c (show_backtrace): Use async-signal-safe\n+        execve and stored path of addr2line.\n+        * runtime/compile_options.c (maybe_find_addr2line): New function.\n+        (set_options): Call maybe_find_addr2line if backtracing is enabled.\n+        * runtime/main.c (find_addr2line): New function.\n+        (init): Call find_addr2line if backtracing is enabled.\n+        (cleanup): Free addr2line_path.\n+\n 2011-05-29  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR libfortran/49214"}, {"sha": "b72b250c84a95d6817ff813c20ad7cd9e4b044e3", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155732f56dacb4f10aa48db4d952745aed720bc7/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155732f56dacb4f10aa48db4d952745aed720bc7/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=155732f56dacb4f10aa48db4d952745aed720bc7", "patch": "@@ -665,6 +665,9 @@ export_proto(store_exe_path);\n extern char * full_exe_path (void);\n internal_proto(full_exe_path);\n \n+extern void find_addr2line (void);\n+internal_proto(find_addr2line);\n+\n /* backtrace.c */\n \n extern void show_backtrace (void);"}, {"sha": "7d6479fe9055bf1bd99c8bb12d4bbb034b6f4fd8", "filename": "libgfortran/runtime/backtrace.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155732f56dacb4f10aa48db4d952745aed720bc7/libgfortran%2Fruntime%2Fbacktrace.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155732f56dacb4f10aa48db4d952745aed720bc7/libgfortran%2Fruntime%2Fbacktrace.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fbacktrace.c?ref=155732f56dacb4f10aa48db4d952745aed720bc7", "patch": "@@ -104,6 +104,9 @@ fd_gets (char *s, int size, int fd)\n }\n \n \n+extern char *addr2line_path;\n+\n+\n /* show_backtrace displays the backtrace, currently obtained by means of\n    the glibc backtrace* functions.  */\n \n@@ -124,6 +127,9 @@ show_backtrace (void)\n \n #if CAN_PIPE\n \n+  if (addr2line_path == NULL)\n+    goto fallback_noerr;\n+\n   /* We attempt to extract file and line information from addr2line.  */\n   do\n   {\n@@ -146,6 +152,7 @@ show_backtrace (void)\n \t/* Child process.  */\n #define NUM_FIXEDARGS 7\n \tchar *arg[NUM_FIXEDARGS];\n+\tchar *newenv[] = { NULL };\n \n \tclose (f[0]);\n \n@@ -160,14 +167,14 @@ show_backtrace (void)\n \t  _exit (1);\n \tclose (f[1]);\n \n-\targ[0] = (char *) \"addr2line\";\n+\targ[0] = addr2line_path;\n \targ[1] = (char *) \"-e\";\n \targ[2] = full_exe_path ();\n \targ[3] = (char *) \"-f\";\n \targ[4] = (char *) \"-s\";\n \targ[5] = (char *) \"-C\";\n \targ[6] = NULL;\n-\texecvp (arg[0], arg);\n+\texecve (addr2line_path, arg, newenv);\n \t_exit (1);\n #undef NUM_FIXEDARGS\n       }\n@@ -264,6 +271,7 @@ show_backtrace (void)\n \n #endif /* CAN_PIPE */\n \n+fallback_noerr:\n   /* Fallback to the glibc backtrace.  */\n   estr_write (\"\\nBacktrace for this error:\\n\");\n   backtrace_symbols_fd (trace, depth, STDERR_FILENO);"}, {"sha": "c3e64de33bad2608c31de1c294ec6dfaab421285", "filename": "libgfortran/runtime/compile_options.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155732f56dacb4f10aa48db4d952745aed720bc7/libgfortran%2Fruntime%2Fcompile_options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155732f56dacb4f10aa48db4d952745aed720bc7/libgfortran%2Fruntime%2Fcompile_options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fcompile_options.c?ref=155732f56dacb4f10aa48db4d952745aed720bc7", "patch": "@@ -58,6 +58,15 @@ backtrace_handler (int signum)\n }\n \n \n+/* Helper function for set_options because we need to access the\n+   global variable options which is not seen in set_options.  */\n+static void\n+maybe_find_addr2line (void)\n+{\n+  if (options.backtrace == -1)\n+    find_addr2line ();\n+}\n+\n /* Set the usual compile-time options.  */\n extern void set_options (int , int []);\n export_proto(set_options);\n@@ -131,6 +140,8 @@ set_options (int num, int options[])\n #if defined(SIGXFSZ)\n       signal (SIGXFSZ, backtrace_handler);\n #endif\n+\n+      maybe_find_addr2line ();\n     }\n #endif\n "}, {"sha": "bc8dab449e8ff247d5be745c7be52d17d353f915", "filename": "libgfortran/runtime/main.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155732f56dacb4f10aa48db4d952745aed720bc7/libgfortran%2Fruntime%2Fmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155732f56dacb4f10aa48db4d952745aed720bc7/libgfortran%2Fruntime%2Fmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fmain.c?ref=155732f56dacb4f10aa48db4d952745aed720bc7", "patch": "@@ -139,6 +139,40 @@ full_exe_path (void)\n }\n \n \n+char *addr2line_path;\n+\n+/* Find addr2line and store the path.  */\n+\n+void\n+find_addr2line (void)\n+{\n+#ifdef HAVE_ACCESS\n+#define A2L_LEN 10\n+  char *path = getenv (\"PATH\");\n+  size_t n = strlen (path);\n+  char ap[n + 1 + A2L_LEN];\n+  size_t ai = 0;\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      if (path[i] != ':')\n+\tap[ai++] = path[i];\n+      else\n+\t{\n+\t  ap[ai++] = '/';\n+\t  memcpy (ap + ai, \"addr2line\", A2L_LEN);\n+\t  if (access (ap, R_OK|X_OK) == 0)\n+\t    {\n+\t      addr2line_path = strdup (ap);\n+\t      return;\n+\t    }\n+\t  else\n+\t    ai = 0;\n+\t}\n+    }\n+#endif\n+}\n+\n+\n /* Set the saved values of the command line arguments.  */\n \n void\n@@ -185,6 +219,9 @@ init (void)\n   /* if (argc > 1 && strcmp(argv[1], \"--resume\") == 0) resume();  */\n #endif\n \n+  if (options.backtrace == 1)\n+    find_addr2line ();\n+\n   random_seed_i4 (NULL, NULL, NULL);\n }\n \n@@ -198,4 +235,6 @@ cleanup (void)\n   \n   if (please_free_exe_path_when_done)\n     free ((char *) exe_path);\n+\n+  free (addr2line_path);\n }"}]}