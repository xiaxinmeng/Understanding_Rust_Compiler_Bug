{"sha": "4a913dd6b76a2411cd7373ec18c5c42ba0372e9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE5MTNkZDZiNzZhMjQxMWNkNzM3M2VjMThjNWM0MmJhMDM3MmU5ZQ==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@redhat.com", "date": "2002-01-15T20:50:22Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2002-01-15T20:50:22Z"}, "message": "flow.c (propagate_one_insn): Add error message and print out insn for debugging.\n\n2002-01-15  Eric Christopher  <echristo@redhat.com>\n\n\t* flow.c (propagate_one_insn): Add error message and print out\n\tinsn for debugging.\n\nFrom-SVN: r48878", "tree": {"sha": "6dc8a2a20752f1c692883f73f705acb4f9d5f6cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dc8a2a20752f1c692883f73f705acb4f9d5f6cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a913dd6b76a2411cd7373ec18c5c42ba0372e9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a913dd6b76a2411cd7373ec18c5c42ba0372e9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a913dd6b76a2411cd7373ec18c5c42ba0372e9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a913dd6b76a2411cd7373ec18c5c42ba0372e9e/comments", "author": {"login": "echristo", "id": 327308, "node_id": "MDQ6VXNlcjMyNzMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/327308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/echristo", "html_url": "https://github.com/echristo", "followers_url": "https://api.github.com/users/echristo/followers", "following_url": "https://api.github.com/users/echristo/following{/other_user}", "gists_url": "https://api.github.com/users/echristo/gists{/gist_id}", "starred_url": "https://api.github.com/users/echristo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/echristo/subscriptions", "organizations_url": "https://api.github.com/users/echristo/orgs", "repos_url": "https://api.github.com/users/echristo/repos", "events_url": "https://api.github.com/users/echristo/events{/privacy}", "received_events_url": "https://api.github.com/users/echristo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "006946e43ead0b242131cdcf2f5dc844d0be2f78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/006946e43ead0b242131cdcf2f5dc844d0be2f78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/006946e43ead0b242131cdcf2f5dc844d0be2f78"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "26570444123bedb3d8772a72cc2454b0d651d30a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a913dd6b76a2411cd7373ec18c5c42ba0372e9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a913dd6b76a2411cd7373ec18c5c42ba0372e9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a913dd6b76a2411cd7373ec18c5c42ba0372e9e", "patch": "@@ -1,3 +1,8 @@\n+2002-01-15  Eric Christopher  <echristo@redhat.com>\n+\n+\t* flow.c (propagate_one_insn): Add error message and print out\n+\tinsn for debugging.\n+\n 2002-01-15  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* system.h (ASM_IDENTIFY_GCC, STDC_VALUE, TRAMPOLINE_ALIGN,"}, {"sha": "598190d5501f31046ca6bc49e6fabbe686196381", "filename": "gcc/flow.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a913dd6b76a2411cd7373ec18c5c42ba0372e9e/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a913dd6b76a2411cd7373ec18c5c42ba0372e9e/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=4a913dd6b76a2411cd7373ec18c5c42ba0372e9e", "patch": "@@ -1295,8 +1295,8 @@ calculate_global_regs_live (blocks_in, blocks_out, flags)\n \n \f\n /* This structure is used to pass parameters to an from the\n-   the function find_regno_partial(). It is used to pass in the \n-   register number we are looking, as well as to return any rtx \n+   the function find_regno_partial(). It is used to pass in the\n+   register number we are looking, as well as to return any rtx\n    we find.  */\n \n typedef struct {\n@@ -1308,7 +1308,7 @@ typedef struct {\n /* Find the rtx for the reg numbers specified in 'data' if it is\n    part of an expression which only uses part of the register.  Return\n    it in the structure passed in.  */\n-static int \n+static int\n find_regno_partial (ptr, data)\n      rtx *ptr;\n      void *data;\n@@ -1320,7 +1320,7 @@ find_regno_partial (ptr, data)\n   if (*ptr == NULL_RTX)\n     return 0;\n \n-  switch (GET_CODE (*ptr)) \n+  switch (GET_CODE (*ptr))\n     {\n     case ZERO_EXTRACT:\n     case SIGN_EXTRACT:\n@@ -1333,7 +1333,7 @@ find_regno_partial (ptr, data)\n       break;\n \n     case SUBREG:\n-      if (GET_CODE (SUBREG_REG (*ptr)) == REG \n+      if (GET_CODE (SUBREG_REG (*ptr)) == REG\n \t  && REGNO (SUBREG_REG (*ptr)) == reg)\n \t{\n \t  param->retval = SUBREG_REG (*ptr);\n@@ -1349,14 +1349,14 @@ find_regno_partial (ptr, data)\n }\n \n /* Process all immediate successors of the entry block looking for pseudo\n-   registers which are live on entry. Find all of those whose first \n-   instance is a partial register reference of some kind, and initialize \n+   registers which are live on entry. Find all of those whose first\n+   instance is a partial register reference of some kind, and initialize\n    them to 0 after the entry block.  This will prevent bit sets within\n-   registers whose value is unknown, and may contain some kind of sticky \n+   registers whose value is unknown, and may contain some kind of sticky\n    bits we don't want.  */\n \n int\n-initialize_uninitialized_subregs () \n+initialize_uninitialized_subregs ()\n {\n   rtx insn;\n   edge e;\n@@ -1375,7 +1375,7 @@ initialize_uninitialized_subregs ()\n \n \t  /* Find an insn which mentions the register we are looking for.\n \t     Its preferable to have an instance of the register's rtl since\n-\t     there may be various flags set which we need to duplicate.  \n+\t     there may be various flags set which we need to duplicate.\n \t     If we can't find it, its probably an automatic whose initial\n \t     value doesn't matter, or hopefully something we don't care about.  */\n \t  for (i = get_insns (); i && INSN_UID (i) != uid; i = NEXT_INSN (i))\n@@ -1387,7 +1387,7 @@ initialize_uninitialized_subregs ()\n \t      for_each_rtx (&i, find_regno_partial, &param);\n \t      if (param.retval != NULL_RTX)\n \t\t{\n-\t\t  insn = gen_move_insn (param.retval, \n+\t\t  insn = gen_move_insn (param.retval,\n \t\t\t\t        CONST0_RTX (GET_MODE (param.retval)));\n \t\t  insert_insn_on_edge (insn, e);\n \t\t  did_something = 1;\n@@ -1566,7 +1566,11 @@ propagate_one_insn (pbi, insn)\n \t      || (HAVE_sibcall_epilogue\n \t\t  && sibcall_epilogue_contains (insn)))\n \t  && find_reg_note (insn, REG_MAYBE_DEAD, NULL_RTX) == 0)\n-\tabort ();\n+\t{\n+\t  internal_error (\"Attempt to delete prologue/epilogue insn:\\n\");\n+          debug_rtx (insn);\n+\t  abort ();\n+\t}\n \n       /* Record sets.  Do this even for dead instructions, since they\n \t would have killed the values if they hadn't been deleted.  */\n@@ -2010,7 +2014,7 @@ insn_dead_p (pbi, x, call_ok, notes)\n       if (REG_NOTE_KIND (notes) == REG_INC)\n \t{\n \t  int regno = REGNO (XEXP (notes, 0));\n-\t  \n+\n \t  /* Don't delete insns to set global regs.  */\n \t  if ((regno < FIRST_PSEUDO_REGISTER && global_regs[regno])\n \t      || REGNO_REG_SET_P (pbi->reg_live, regno))"}]}