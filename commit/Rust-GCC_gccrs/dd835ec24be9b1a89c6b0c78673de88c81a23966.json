{"sha": "dd835ec24be9b1a89c6b0c78673de88c81a23966", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ4MzVlYzI0YmU5YjFhODljNmIwYzc4NjczZGU4OGM4MWEyMzk2Ng==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-06-16T14:07:01Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-06-16T14:07:52Z"}, "message": "ii386: Add missing two element 64bit vector permutations [PR89021]\n\nIn addition to V8QI permutations, several other missing permutations are\nadded for 64bit vector modes for TARGET_SSSE3 and TARGET_SSE4_1 targets.\n\n2021-06-16  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/89021\n\t* config/i386/i386-expand.c (expand_vec_perm_2perm_pblendv):\n\tHandle 64bit modes for TARGET_SSE4_1.\n\t(expand_vec_perm_pshufb2): Handle 64bit modes for TARGET_SSSE3.\n\t(expand_vec_perm_even_odd_pack): Handle V4HI mode.\n\t(expand_vec_perm_even_odd_1) <case E_V4HImode>: Expand via\n\texpand_vec_perm_pshufb2 for TARGET_SSSE3 and via\n\texpand_vec_perm_even_odd_pack for TARGET_SSE4_1.\n\t* config/i386/mmx.md (mmx_packusdw): New insn pattern.", "tree": {"sha": "d00dcd12c80de954e0b447c96f7542c11309e27e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d00dcd12c80de954e0b447c96f7542c11309e27e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd835ec24be9b1a89c6b0c78673de88c81a23966", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd835ec24be9b1a89c6b0c78673de88c81a23966", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd835ec24be9b1a89c6b0c78673de88c81a23966", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd835ec24be9b1a89c6b0c78673de88c81a23966/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c25e3bf87975280a603ff18fba387c6707ce4a95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c25e3bf87975280a603ff18fba387c6707ce4a95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c25e3bf87975280a603ff18fba387c6707ce4a95"}], "stats": {"total": 107, "additions": 82, "deletions": 25}, "files": [{"sha": "eb6f9b0684efe99dd89663dd6ff6d67576e8efd0", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 66, "deletions": 25, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd835ec24be9b1a89c6b0c78673de88c81a23966/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd835ec24be9b1a89c6b0c78673de88c81a23966/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=dd835ec24be9b1a89c6b0c78673de88c81a23966", "patch": "@@ -17633,8 +17633,10 @@ expand_vec_perm_pshufb (struct expand_vec_perm_d *d)\n \n   if (vmode == V8QImode)\n     {\n+      rtx m128 = GEN_INT (-128);\n+\n       for (i = nelt; i < 16; ++i)\n-\trperm[i] = constm1_rtx;\n+\trperm[i] = m128;\n       vpmode = V16QImode;\n     }\n \n@@ -18972,7 +18974,8 @@ expand_vec_perm_2perm_pblendv (struct expand_vec_perm_d *d, bool two_insn)\n     ;\n   else if (TARGET_AVX && (vmode == V4DFmode || vmode == V8SFmode))\n     ;\n-  else if (TARGET_SSE4_1 && GET_MODE_SIZE (vmode) == 16)\n+  else if (TARGET_SSE4_1 && (GET_MODE_SIZE (vmode) == 16\n+\t\t\t     || GET_MODE_SIZE (vmode) == 8))\n     ;\n   else\n     return false;\n@@ -19229,14 +19232,31 @@ expand_vec_perm_pshufb2 (struct expand_vec_perm_d *d)\n {\n   rtx rperm[2][16], vperm, l, h, op, m128;\n   unsigned int i, nelt, eltsz;\n+  machine_mode mode;\n+  rtx (*gen) (rtx, rtx, rtx);\n \n-  if (!TARGET_SSSE3 || GET_MODE_SIZE (d->vmode) != 16)\n+  if (!TARGET_SSSE3 || (GET_MODE_SIZE (d->vmode) != 16\n+\t\t\t&& GET_MODE_SIZE (d->vmode) != 8))\n     return false;\n   gcc_assert (!d->one_operand_p);\n \n   if (d->testing_p)\n     return true;\n \n+  switch (GET_MODE_SIZE (d->vmode))\n+    {\n+    case 8:\n+      mode = V8QImode;\n+      gen = gen_mmx_pshufbv8qi3;\n+      break;\n+    case 16:\n+      mode = V16QImode;\n+      gen = gen_ssse3_pshufbv16qi3;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n   nelt = d->nelt;\n   eltsz = GET_MODE_UNIT_SIZE (d->vmode);\n \n@@ -19247,7 +19267,7 @@ expand_vec_perm_pshufb2 (struct expand_vec_perm_d *d)\n   m128 = GEN_INT (-128);\n   for (i = 0; i < nelt; ++i)\n     {\n-      unsigned j, e = d->perm[i];\n+      unsigned j, k, e = d->perm[i];\n       unsigned which = (e >= nelt);\n       if (e >= nelt)\n \te -= nelt;\n@@ -19257,26 +19277,29 @@ expand_vec_perm_pshufb2 (struct expand_vec_perm_d *d)\n \t  rperm[which][i*eltsz + j] = GEN_INT (e*eltsz + j);\n \t  rperm[1-which][i*eltsz + j] = m128;\n \t}\n+\n+      for (k = i*eltsz + j; k < 16; ++k)\n+\trperm[0][k] = rperm[1][k] = m128;\n     }\n \n   vperm = gen_rtx_CONST_VECTOR (V16QImode, gen_rtvec_v (16, rperm[0]));\n   vperm = force_reg (V16QImode, vperm);\n \n-  l = gen_reg_rtx (V16QImode);\n-  op = gen_lowpart (V16QImode, d->op0);\n-  emit_insn (gen_ssse3_pshufbv16qi3 (l, op, vperm));\n+  l = gen_reg_rtx (mode);\n+  op = gen_lowpart (mode, d->op0);\n+  emit_insn (gen (l, op, vperm));\n \n   vperm = gen_rtx_CONST_VECTOR (V16QImode, gen_rtvec_v (16, rperm[1]));\n   vperm = force_reg (V16QImode, vperm);\n \n-  h = gen_reg_rtx (V16QImode);\n-  op = gen_lowpart (V16QImode, d->op1);\n-  emit_insn (gen_ssse3_pshufbv16qi3 (h, op, vperm));\n+  h = gen_reg_rtx (mode);\n+  op = gen_lowpart (mode, d->op1);\n+  emit_insn (gen (h, op, vperm));\n \n   op = d->target;\n-  if (d->vmode != V16QImode)\n-    op = gen_reg_rtx (V16QImode);\n-  emit_insn (gen_iorv16qi3 (op, l, h));\n+  if (d->vmode != mode)\n+    op = gen_reg_rtx (mode);\n+  emit_insn (gen_rtx_SET (op, gen_rtx_IOR (mode, l, h)));\n   if (op != d->target)\n     emit_move_insn (d->target, gen_lowpart (d->vmode, op));\n \n@@ -19455,6 +19478,17 @@ expand_vec_perm_even_odd_pack (struct expand_vec_perm_d *d)\n \n   switch (d->vmode)\n     {\n+    case E_V4HImode:\n+      /* Required for \"pack\".  */\n+      if (!TARGET_SSE4_1)\n+\treturn false;\n+      c = 0xffff;\n+      s = 16;\n+      half_mode = V2SImode;\n+      gen_and = gen_andv2si3;\n+      gen_pack = gen_mmx_packusdw;\n+      gen_shift = gen_lshrv2si3;\n+      break;\n     case E_V8HImode:\n       /* Required for \"pack\".  */\n       if (!TARGET_SSE4_1)\n@@ -19507,7 +19541,7 @@ expand_vec_perm_even_odd_pack (struct expand_vec_perm_d *d)\n       end_perm = true;\n       break;\n     default:\n-      /* Only V8QI, V8HI, V16QI, V16HI and V32QI modes\n+      /* Only V4HI, V8QI, V8HI, V16QI, V16HI and V32QI modes\n \t are more profitable than general shuffles.  */\n       return false;\n     }\n@@ -19698,18 +19732,25 @@ expand_vec_perm_even_odd_1 (struct expand_vec_perm_d *d, unsigned odd)\n       break;\n \n     case E_V4HImode:\n-      if (d->testing_p)\n-\tbreak;\n-      /* We need 2*log2(N)-1 operations to achieve odd/even\n-\t with interleave. */\n-      t1 = gen_reg_rtx (V4HImode);\n-      emit_insn (gen_mmx_punpckhwd (t1, d->op0, d->op1));\n-      emit_insn (gen_mmx_punpcklwd (d->target, d->op0, d->op1));\n-      if (odd)\n-\tt2 = gen_mmx_punpckhwd (d->target, d->target, t1);\n+      if (TARGET_SSE4_1)\n+\treturn expand_vec_perm_even_odd_pack (d);\n+      else if (TARGET_SSSE3 && !TARGET_SLOW_PSHUFB)\n+\treturn expand_vec_perm_pshufb2 (d);\n       else\n-\tt2 = gen_mmx_punpcklwd (d->target, d->target, t1);\n-      emit_insn (t2);\n+\t{\n+\t  if (d->testing_p)\n+\t    break;\n+\t  /* We need 2*log2(N)-1 operations to achieve odd/even\n+\t     with interleave. */\n+\t  t1 = gen_reg_rtx (V4HImode);\n+\t  emit_insn (gen_mmx_punpckhwd (t1, d->op0, d->op1));\n+\t  emit_insn (gen_mmx_punpcklwd (d->target, d->op0, d->op1));\n+\t  if (odd)\n+\t    t2 = gen_mmx_punpckhwd (d->target, d->target, t1);\n+\t  else\n+\t    t2 = gen_mmx_punpcklwd (d->target, d->target, t1);\n+\t  emit_insn (t2);\n+\t}\n       break;\n \n     case E_V8HImode:"}, {"sha": "59a16f4cd50233409e56c12ba3f0a8858b6fe1ae", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd835ec24be9b1a89c6b0c78673de88c81a23966/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd835ec24be9b1a89c6b0c78673de88c81a23966/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=dd835ec24be9b1a89c6b0c78673de88c81a23966", "patch": "@@ -2477,6 +2477,22 @@\n    (set_attr \"type\" \"mmxshft,sselog,sselog\")\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n+(define_insn_and_split \"mmx_packusdw\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=Yr,*x,Yw\")\n+\t(vec_concat:V4HI\n+\t  (us_truncate:V2HI\n+\t    (match_operand:V2SI 1 \"register_operand\" \"0,0,Yw\"))\n+\t  (us_truncate:V2HI\n+\t    (match_operand:V2SI 2 \"register_operand\" \"Yr,*x,Yw\"))))]\n+  \"TARGET_SSE4_1 && TARGET_MMX_WITH_SSE\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+  \"ix86_split_mmx_pack (operands, US_TRUNCATE); DONE;\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_insn_and_split \"mmx_punpckhbw\"\n   [(set (match_operand:V8QI 0 \"register_operand\" \"=y,x,Yw\")\n \t(vec_select:V8QI"}]}