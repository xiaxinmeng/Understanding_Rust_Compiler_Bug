{"sha": "f5156c3ead861a319698af615ef739ef96532e02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUxNTZjM2VhZDg2MWEzMTk2OThhZjYxNWVmNzM5ZWY5NjUzMmUwMg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-10-27T15:20:18Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-10-27T15:20:18Z"}, "message": "[AArch64] Use new reduc_plus_scal optabs, inc. for __builtins\n\n\t* config/aarch64/aarch64-simd-builtins.def\n\t(reduc_splus_<mode>/VDQF, reduc_uplus_<mode>/VDQF, reduc_splus_v4sf):\n\tRemove.\n\t(reduc_plus_scal_<mode>, reduc_plus_scal_v4sf): New.\n\n\t* config/aarch64/aarch64-simd.md (reduc_<sur>plus_mode): Remove.\n\t(reduc_splus_<mode>, reduc_uplus_<mode>, reduc_plus_scal_<mode>): New.\n\n\t(reduc_<sur>plus_mode): Change SUADDV -> UNSPEC_ADDV, rename to...\n\t(aarch64_reduc_plus_internal<mode>): ...this.\n\n\t(reduc_<sur>plus_v2si): Change SUADDV -> UNSPEC_ADDV, rename to...\n\t(aarch64_reduc_plus_internalv2si): ...this.\n\n\t(reduc_splus_<mode>/V2F): Rename to...\n\t(aarch64_reduc_plus_internal<mode>): ...this.\n\n\t* config/aarch64/iterators.md\n\t(UNSPEC_SADDV, UNSPEC_UADDV, SUADDV): Remove.\n\t(UNSPEC_ADDV): New.\n\t(sur): Remove elements for UNSPEC_SADDV and UNSPEC_UADDV.\n\n\t* config/aarch64/arm_neon.h (vaddv_s8, vaddv_s16, vaddv_s32, vaddv_u8,\n\tvaddv_u16, vaddv_u32, vaddvq_s8, vaddvq_s16, vaddvq_s32, vaddvq_s64,\n\tvaddvq_u8, vaddvq_u16, vaddvq_u32, vaddvq_u64, vaddv_f32, vaddvq_f32,\n\tvaddvq_f64): Change __builtin_aarch64_reduc_[us]plus_... to\n\t__builtin_aarch64_reduc_plus_scal, remove vget_lane wrapper.\n\nFrom-SVN: r216738", "tree": {"sha": "28c296e7b26e44269e77b142a7db6a4d6a5f5c06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28c296e7b26e44269e77b142a7db6a4d6a5f5c06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5156c3ead861a319698af615ef739ef96532e02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5156c3ead861a319698af615ef739ef96532e02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5156c3ead861a319698af615ef739ef96532e02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5156c3ead861a319698af615ef739ef96532e02/comments", "author": null, "committer": null, "parents": [{"sha": "d43a252e2fa612b14fa7f6f4dec3320c8b313a1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d43a252e2fa612b14fa7f6f4dec3320c8b313a1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d43a252e2fa612b14fa7f6f4dec3320c8b313a1c"}], "stats": {"total": 143, "additions": 90, "deletions": 53}, "files": [{"sha": "0656a1978e42f9dd348ce60aa6164e6a63fb0da9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5156c3ead861a319698af615ef739ef96532e02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5156c3ead861a319698af615ef739ef96532e02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5156c3ead861a319698af615ef739ef96532e02", "patch": "@@ -1,3 +1,33 @@\n+2014-10-27  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def\n+\t(reduc_splus_<mode>/VDQF, reduc_uplus_<mode>/VDQF, reduc_splus_v4sf):\n+\tRemove.\n+\t(reduc_plus_scal_<mode>, reduc_plus_scal_v4sf): New.\n+\n+\t* config/aarch64/aarch64-simd.md (reduc_<sur>plus_mode): Remove.\n+\t(reduc_splus_<mode>, reduc_uplus_<mode>, reduc_plus_scal_<mode>): New.\n+\n+\t(reduc_<sur>plus_mode): Change SUADDV -> UNSPEC_ADDV, rename to...\n+\t(aarch64_reduc_plus_internal<mode>): ...this.\n+\n+\t(reduc_<sur>plus_v2si): Change SUADDV -> UNSPEC_ADDV, rename to...\n+\t(aarch64_reduc_plus_internalv2si): ...this.\n+\n+\t(reduc_splus_<mode>/V2F): Rename to...\n+\t(aarch64_reduc_plus_internal<mode>): ...this.\n+\n+\t* config/aarch64/iterators.md\n+\t(UNSPEC_SADDV, UNSPEC_UADDV, SUADDV): Remove.\n+\t(UNSPEC_ADDV): New.\n+\t(sur): Remove elements for UNSPEC_SADDV and UNSPEC_UADDV.\n+\n+\t* config/aarch64/arm_neon.h (vaddv_s8, vaddv_s16, vaddv_s32, vaddv_u8,\n+\tvaddv_u16, vaddv_u32, vaddvq_s8, vaddvq_s16, vaddvq_s32, vaddvq_s64,\n+\tvaddvq_u8, vaddvq_u16, vaddvq_u32, vaddvq_u64, vaddv_f32, vaddvq_f32,\n+\tvaddvq_f64): Change __builtin_aarch64_reduc_[us]plus_... to\n+\t__builtin_aarch64_reduc_plus_scal, remove vget_lane wrapper.\n+\n 2014-10-27  Alan Lawrence  <alan.lawrence@arm.com>\n \n \tPR tree-optimization/61114"}, {"sha": "7fe7c62028dc60ea0f24794a6838c5a3b4848be4", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5156c3ead861a319698af615ef739ef96532e02/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5156c3ead861a319698af615ef739ef96532e02/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=f5156c3ead861a319698af615ef739ef96532e02", "patch": "@@ -222,9 +222,8 @@\n   BUILTIN_VSDQ_I (SHIFTIMM, sqshl_n, 0)\n   BUILTIN_VSDQ_I (USHIFTIMM, uqshl_n, 0)\n \n-  /* Implemented by reduc_<sur>plus_<mode>.  */\n-  BUILTIN_VALL (UNOP, reduc_splus_, 10)\n-  BUILTIN_VDQ (UNOP, reduc_uplus_, 10)\n+  /* Implemented by aarch64_reduc_plus_<mode>.  */\n+  BUILTIN_VALL (UNOP, reduc_plus_scal_, 10)\n \n   /* Implemented by reduc_<maxmin_uns>_<mode>.  */\n   BUILTIN_VDQIF (UNOP, reduc_smax_, 10)"}, {"sha": "76a9366fa99da2a26faf66c79d3683e2c9901b22", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 39, "deletions": 9, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5156c3ead861a319698af615ef739ef96532e02/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5156c3ead861a319698af615ef739ef96532e02/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=f5156c3ead861a319698af615ef739ef96532e02", "patch": "@@ -1760,25 +1760,52 @@\n \n ;; 'across lanes' add.\n \n-(define_insn \"reduc_<sur>plus_<mode>\"\n+(define_expand \"reduc_plus_scal_<mode>\"\n+  [(match_operand:<VEL> 0 \"register_operand\" \"=w\")\n+   (unspec:VDQ [(match_operand:VDQ 1 \"register_operand\" \"w\")]\n+\t       UNSPEC_ADDV)]\n+  \"TARGET_SIMD\"\n+  {\n+    rtx elt = GEN_INT (ENDIAN_LANE_N (<MODE>mode, 0));\n+    rtx scratch = gen_reg_rtx (<MODE>mode);\n+    emit_insn (gen_aarch64_reduc_plus_internal<mode> (scratch, operands[1]));\n+    emit_insn (gen_aarch64_get_lane<mode> (operands[0], scratch, elt));\n+    DONE;\n+  }\n+)\n+\n+(define_expand \"reduc_plus_scal_<mode>\"\n+  [(match_operand:<VEL> 0 \"register_operand\" \"=w\")\n+   (match_operand:V2F 1 \"register_operand\" \"w\")]\n+  \"TARGET_SIMD\"\n+  {\n+    rtx elt = GEN_INT (ENDIAN_LANE_N (<MODE>mode, 0));\n+    rtx scratch = gen_reg_rtx (<MODE>mode);\n+    emit_insn (gen_aarch64_reduc_plus_internal<mode> (scratch, operands[1]));\n+    emit_insn (gen_aarch64_get_lane<mode> (operands[0], scratch, elt));\n+    DONE;\n+  }\n+)\n+\n+(define_insn \"aarch64_reduc_plus_internal<mode>\"\n  [(set (match_operand:VDQV 0 \"register_operand\" \"=w\")\n        (unspec:VDQV [(match_operand:VDQV 1 \"register_operand\" \"w\")]\n-\t\t    SUADDV))]\n+\t\t    UNSPEC_ADDV))]\n  \"TARGET_SIMD\"\n  \"add<VDQV:vp>\\\\t%<Vetype>0, %1.<Vtype>\"\n   [(set_attr \"type\" \"neon_reduc_add<q>\")]\n )\n \n-(define_insn \"reduc_<sur>plus_v2si\"\n+(define_insn \"aarch64_reduc_plus_internalv2si\"\n  [(set (match_operand:V2SI 0 \"register_operand\" \"=w\")\n        (unspec:V2SI [(match_operand:V2SI 1 \"register_operand\" \"w\")]\n-\t\t    SUADDV))]\n+\t\t    UNSPEC_ADDV))]\n  \"TARGET_SIMD\"\n  \"addp\\\\t%0.2s, %1.2s, %1.2s\"\n   [(set_attr \"type\" \"neon_reduc_add\")]\n )\n \n-(define_insn \"reduc_splus_<mode>\"\n+(define_insn \"aarch64_reduc_plus_internal<mode>\"\n  [(set (match_operand:V2F 0 \"register_operand\" \"=w\")\n        (unspec:V2F [(match_operand:V2F 1 \"register_operand\" \"w\")]\n \t\t   UNSPEC_FADDV))]\n@@ -1796,14 +1823,17 @@\n   [(set_attr \"type\" \"neon_fp_reduc_add_s_q\")]\n )\n \n-(define_expand \"reduc_splus_v4sf\"\n- [(set (match_operand:V4SF 0 \"register_operand\")\n+(define_expand \"reduc_plus_scal_v4sf\"\n+ [(set (match_operand:SF 0 \"register_operand\")\n        (unspec:V4SF [(match_operand:V4SF 1 \"register_operand\")]\n \t\t    UNSPEC_FADDV))]\n  \"TARGET_SIMD\"\n {\n-  emit_insn (gen_aarch64_addpv4sf (operands[0], operands[1]));\n-  emit_insn (gen_aarch64_addpv4sf (operands[0], operands[0]));\n+  rtx elt = GEN_INT (ENDIAN_LANE_N (V4SFmode, 0));\n+  rtx scratch = gen_reg_rtx (V4SFmode);\n+  emit_insn (gen_aarch64_addpv4sf (scratch, operands[1]));\n+  emit_insn (gen_aarch64_addpv4sf (scratch, scratch));\n+  emit_insn (gen_aarch64_get_lanev4sf (operands[0], scratch, elt));\n   DONE;\n })\n "}, {"sha": "3d3772fb26bd05036d9fede79339c1e37068ac07", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 18, "deletions": 36, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5156c3ead861a319698af615ef739ef96532e02/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5156c3ead861a319698af615ef739ef96532e02/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=f5156c3ead861a319698af615ef739ef96532e02", "patch": "@@ -12964,121 +12964,103 @@ vaddd_u64 (uint64_t __a, uint64_t __b)\n __extension__ static __inline int8_t __attribute__ ((__always_inline__))\n vaddv_s8 (int8x8_t __a)\n {\n-  return vget_lane_s8 (__builtin_aarch64_reduc_splus_v8qi (__a), 0);\n+  return __builtin_aarch64_reduc_plus_scal_v8qi (__a);\n }\n \n __extension__ static __inline int16_t __attribute__ ((__always_inline__))\n vaddv_s16 (int16x4_t __a)\n {\n-  return vget_lane_s16 (__builtin_aarch64_reduc_splus_v4hi (__a), 0);\n+  return __builtin_aarch64_reduc_plus_scal_v4hi (__a);\n }\n \n __extension__ static __inline int32_t __attribute__ ((__always_inline__))\n vaddv_s32 (int32x2_t __a)\n {\n-  return vget_lane_s32 (__builtin_aarch64_reduc_splus_v2si (__a), 0);\n+  return __builtin_aarch64_reduc_plus_scal_v2si (__a);\n }\n \n __extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n vaddv_u8 (uint8x8_t __a)\n {\n-  return vget_lane_u8 ((uint8x8_t)\n-\t\t__builtin_aarch64_reduc_uplus_v8qi ((int8x8_t) __a),\n-\t\t0);\n+  return (uint8_t) __builtin_aarch64_reduc_plus_scal_v8qi ((int8x8_t) __a);\n }\n \n __extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n vaddv_u16 (uint16x4_t __a)\n {\n-  return vget_lane_u16 ((uint16x4_t)\n-\t\t__builtin_aarch64_reduc_uplus_v4hi ((int16x4_t) __a),\n-\t\t0);\n+  return (uint16_t) __builtin_aarch64_reduc_plus_scal_v4hi ((int16x4_t) __a);\n }\n \n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n vaddv_u32 (uint32x2_t __a)\n {\n-  return vget_lane_u32 ((uint32x2_t)\n-\t\t__builtin_aarch64_reduc_uplus_v2si ((int32x2_t) __a),\n-\t\t0);\n+  return (int32_t) __builtin_aarch64_reduc_plus_scal_v2si ((int32x2_t) __a);\n }\n \n __extension__ static __inline int8_t __attribute__ ((__always_inline__))\n vaddvq_s8 (int8x16_t __a)\n {\n-  return vgetq_lane_s8 (__builtin_aarch64_reduc_splus_v16qi (__a),\n-\t\t\t0);\n+  return __builtin_aarch64_reduc_plus_scal_v16qi (__a);\n }\n \n __extension__ static __inline int16_t __attribute__ ((__always_inline__))\n vaddvq_s16 (int16x8_t __a)\n {\n-  return vgetq_lane_s16 (__builtin_aarch64_reduc_splus_v8hi (__a), 0);\n+  return __builtin_aarch64_reduc_plus_scal_v8hi (__a);\n }\n \n __extension__ static __inline int32_t __attribute__ ((__always_inline__))\n vaddvq_s32 (int32x4_t __a)\n {\n-  return vgetq_lane_s32 (__builtin_aarch64_reduc_splus_v4si (__a), 0);\n+  return __builtin_aarch64_reduc_plus_scal_v4si (__a);\n }\n \n __extension__ static __inline int64_t __attribute__ ((__always_inline__))\n vaddvq_s64 (int64x2_t __a)\n {\n-  return vgetq_lane_s64 (__builtin_aarch64_reduc_splus_v2di (__a), 0);\n+  return __builtin_aarch64_reduc_plus_scal_v2di (__a);\n }\n \n __extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n vaddvq_u8 (uint8x16_t __a)\n {\n-  return vgetq_lane_u8 ((uint8x16_t)\n-\t\t__builtin_aarch64_reduc_uplus_v16qi ((int8x16_t) __a),\n-\t\t0);\n+  return (uint8_t) __builtin_aarch64_reduc_plus_scal_v16qi ((int8x16_t) __a);\n }\n \n __extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n vaddvq_u16 (uint16x8_t __a)\n {\n-  return vgetq_lane_u16 ((uint16x8_t)\n-\t\t__builtin_aarch64_reduc_uplus_v8hi ((int16x8_t) __a),\n-\t\t0);\n+  return (uint16_t) __builtin_aarch64_reduc_plus_scal_v8hi ((int16x8_t) __a);\n }\n \n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n vaddvq_u32 (uint32x4_t __a)\n {\n-  return vgetq_lane_u32 ((uint32x4_t)\n-\t\t__builtin_aarch64_reduc_uplus_v4si ((int32x4_t) __a),\n-\t\t0);\n+  return (uint32_t) __builtin_aarch64_reduc_plus_scal_v4si ((int32x4_t) __a);\n }\n \n __extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n vaddvq_u64 (uint64x2_t __a)\n {\n-  return vgetq_lane_u64 ((uint64x2_t)\n-\t\t__builtin_aarch64_reduc_uplus_v2di ((int64x2_t) __a),\n-\t\t0);\n+  return (uint64_t) __builtin_aarch64_reduc_plus_scal_v2di ((int64x2_t) __a);\n }\n \n __extension__ static __inline float32_t __attribute__ ((__always_inline__))\n vaddv_f32 (float32x2_t __a)\n {\n-  float32x2_t __t = __builtin_aarch64_reduc_splus_v2sf (__a);\n-  return vget_lane_f32 (__t, 0);\n+  return __builtin_aarch64_reduc_plus_scal_v2sf (__a);\n }\n \n __extension__ static __inline float32_t __attribute__ ((__always_inline__))\n vaddvq_f32 (float32x4_t __a)\n {\n-  float32x4_t __t = __builtin_aarch64_reduc_splus_v4sf (__a);\n-  return vgetq_lane_f32 (__t, 0);\n+  return __builtin_aarch64_reduc_plus_scal_v4sf (__a);\n }\n \n __extension__ static __inline float64_t __attribute__ ((__always_inline__))\n vaddvq_f64 (float64x2_t __a)\n {\n-  float64x2_t __t = __builtin_aarch64_reduc_splus_v2df (__a);\n-  return vgetq_lane_f64 (__t, 0);\n+  return __builtin_aarch64_reduc_plus_scal_v2df (__a);\n }\n \n /* vbsl  */\n@@ -19777,7 +19759,7 @@ vpadd_u32 (uint32x2_t __a, uint32x2_t __b)\n __extension__ static __inline float64_t __attribute__ ((__always_inline__))\n vpaddd_f64 (float64x2_t __a)\n {\n-  return vgetq_lane_f64 (__builtin_aarch64_reduc_splus_v2df (__a), 0);\n+  return __builtin_aarch64_reduc_plus_scal_v2df (__a);\n }\n \n __extension__ static __inline int64_t __attribute__ ((__always_inline__))"}, {"sha": "74c71fcc8047f221f28cedaba8fca80995576cc7", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5156c3ead861a319698af615ef739ef96532e02/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5156c3ead861a319698af615ef739ef96532e02/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=f5156c3ead861a319698af615ef739ef96532e02", "patch": "@@ -213,8 +213,7 @@\n     UNSPEC_FMINNMV\t; Used in aarch64-simd.md.\n     UNSPEC_FMINV\t; Used in aarch64-simd.md.\n     UNSPEC_FADDV\t; Used in aarch64-simd.md.\n-    UNSPEC_SADDV\t; Used in aarch64-simd.md.\n-    UNSPEC_UADDV\t; Used in aarch64-simd.md.\n+    UNSPEC_ADDV\t\t; Used in aarch64-simd.md.\n     UNSPEC_SMAXV\t; Used in aarch64-simd.md.\n     UNSPEC_SMINV\t; Used in aarch64-simd.md.\n     UNSPEC_UMAXV\t; Used in aarch64-simd.md.\n@@ -859,8 +858,6 @@\n (define_int_iterator FMAXMINV [UNSPEC_FMAXV UNSPEC_FMINV\n \t\t\t       UNSPEC_FMAXNMV UNSPEC_FMINNMV])\n \n-(define_int_iterator SUADDV [UNSPEC_SADDV UNSPEC_UADDV])\n-\n (define_int_iterator HADDSUB [UNSPEC_SHADD UNSPEC_UHADD\n \t\t\t      UNSPEC_SRHADD UNSPEC_URHADD\n \t\t\t      UNSPEC_SHSUB UNSPEC_UHSUB\n@@ -965,7 +962,6 @@\n \t\t      (UNSPEC_SUBHN2 \"\") (UNSPEC_RSUBHN2 \"r\")\n \t\t      (UNSPEC_SQXTN \"s\") (UNSPEC_UQXTN \"u\")\n \t\t      (UNSPEC_USQADD \"us\") (UNSPEC_SUQADD \"su\")\n-\t\t      (UNSPEC_SADDV \"s\") (UNSPEC_UADDV \"u\")\n \t\t      (UNSPEC_SSLI  \"s\") (UNSPEC_USLI  \"u\")\n \t\t      (UNSPEC_SSRI  \"s\") (UNSPEC_USRI  \"u\")\n \t\t      (UNSPEC_USRA  \"u\") (UNSPEC_SSRA  \"s\")"}]}