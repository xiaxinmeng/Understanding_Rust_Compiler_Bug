{"sha": "601f32936b3d8f16d853ece064e7f3c9de743016", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAxZjMyOTM2YjNkOGYxNmQ4NTNlY2UwNjRlN2YzYzlkZTc0MzAxNg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-06-01T12:49:17Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-06-01T12:49:17Z"}, "message": "Change use to type-based pool allocator in ipa-prop.c.\n\n\t* ipa-prop.c (ipa_set_jf_constant): Use new type-based pool allocator.\n\t(ipa_edge_duplication_hook): Likewise.\n\t(ipa_free_all_structures_after_ipa_cp): Likewise.\n\t(ipa_free_all_structures_after_iinln): Likewise.\n\nFrom-SVN: r223969", "tree": {"sha": "08adc37d75bf74e1a8f5949d1ccbbea6f40b3435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08adc37d75bf74e1a8f5949d1ccbbea6f40b3435"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/601f32936b3d8f16d853ece064e7f3c9de743016", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/601f32936b3d8f16d853ece064e7f3c9de743016", "html_url": "https://github.com/Rust-GCC/gccrs/commit/601f32936b3d8f16d853ece064e7f3c9de743016", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/601f32936b3d8f16d853ece064e7f3c9de743016/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d780951804c64f3f1cfcb0297926937dbfedfc95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d780951804c64f3f1cfcb0297926937dbfedfc95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d780951804c64f3f1cfcb0297926937dbfedfc95"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "e3e03ccb2df2d4891e6c043baafdd182fa00c6f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/601f32936b3d8f16d853ece064e7f3c9de743016/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/601f32936b3d8f16d853ece064e7f3c9de743016/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=601f32936b3d8f16d853ece064e7f3c9de743016", "patch": "@@ -1,3 +1,10 @@\n+2015-06-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* ipa-prop.c (ipa_set_jf_constant): Use new type-based pool allocator.\n+\t(ipa_edge_duplication_hook): Likewise.\n+\t(ipa_free_all_structures_after_ipa_cp): Likewise.\n+\t(ipa_free_all_structures_after_iinln): Likewise.\n+\n 2015-06-01  Martin Liska  <mliska@suse.cz>\n \n \t* ipa-profile.c (account_time_size): Use new type-based pool allocator."}, {"sha": "80ce6b88e2b63012b8e7f91c2b839c9d72c693ad", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/601f32936b3d8f16d853ece064e7f3c9de743016/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/601f32936b3d8f16d853ece064e7f3c9de743016/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=601f32936b3d8f16d853ece064e7f3c9de743016", "patch": "@@ -176,7 +176,8 @@ struct ipa_cst_ref_desc\n \n /* Allocation pool for reference descriptions.  */\n \n-static alloc_pool ipa_refdesc_pool;\n+static pool_allocator<ipa_cst_ref_desc> ipa_refdesc_pool\n+  (\"IPA-PROP ref descriptions\", 32);\n \n /* Return true if DECL_FUNCTION_SPECIFIC_OPTIMIZATION of the decl associated\n    with NODE should prevent us from analyzing it for the purposes of IPA-CP.  */\n@@ -508,11 +509,8 @@ ipa_set_jf_constant (struct ipa_jump_func *jfunc, tree constant,\n       && TREE_CODE (TREE_OPERAND (constant, 0)) == FUNCTION_DECL)\n     {\n       struct ipa_cst_ref_desc *rdesc;\n-      if (!ipa_refdesc_pool)\n-\tipa_refdesc_pool = create_alloc_pool (\"IPA-PROP ref descriptions\",\n-\t\t\t\t\tsizeof (struct ipa_cst_ref_desc), 32);\n \n-      rdesc = (struct ipa_cst_ref_desc *) pool_alloc (ipa_refdesc_pool);\n+      rdesc = ipa_refdesc_pool.allocate ();\n       rdesc->cs = cs;\n       rdesc->next_duplicate = NULL;\n       rdesc->refcount = 1;\n@@ -3517,20 +3515,15 @@ ipa_edge_duplication_hook (struct cgraph_edge *src, struct cgraph_edge *dst,\n \t      gcc_checking_assert (ref);\n \t      dst->caller->clone_reference (ref, ref->stmt);\n \n-\t      gcc_checking_assert (ipa_refdesc_pool);\n-\t      struct ipa_cst_ref_desc *dst_rdesc\n-\t\t= (struct ipa_cst_ref_desc *) pool_alloc (ipa_refdesc_pool);\n+\t      struct ipa_cst_ref_desc *dst_rdesc = ipa_refdesc_pool.allocate ();\n \t      dst_rdesc->cs = dst;\n \t      dst_rdesc->refcount = src_rdesc->refcount;\n \t      dst_rdesc->next_duplicate = NULL;\n \t      dst_jf->value.constant.rdesc = dst_rdesc;\n \t    }\n \t  else if (src_rdesc->cs == src)\n \t    {\n-\t      struct ipa_cst_ref_desc *dst_rdesc;\n-\t      gcc_checking_assert (ipa_refdesc_pool);\n-\t      dst_rdesc\n-\t\t= (struct ipa_cst_ref_desc *) pool_alloc (ipa_refdesc_pool);\n+\t      struct ipa_cst_ref_desc *dst_rdesc = ipa_refdesc_pool.allocate ();\n \t      dst_rdesc->cs = dst;\n \t      dst_rdesc->refcount = src_rdesc->refcount;\n \t      dst_rdesc->next_duplicate = src_rdesc->next_duplicate;\n@@ -3681,8 +3674,7 @@ ipa_free_all_structures_after_ipa_cp (void)\n       free_alloc_pool (ipcp_poly_ctx_values_pool);\n       free_alloc_pool (ipcp_agg_lattice_pool);\n       ipa_unregister_cgraph_hooks ();\n-      if (ipa_refdesc_pool)\n-\tfree_alloc_pool (ipa_refdesc_pool);\n+      ipa_refdesc_pool.release ();\n     }\n }\n \n@@ -3703,8 +3695,7 @@ ipa_free_all_structures_after_iinln (void)\n     free_alloc_pool (ipcp_poly_ctx_values_pool);\n   if (ipcp_agg_lattice_pool)\n     free_alloc_pool (ipcp_agg_lattice_pool);\n-  if (ipa_refdesc_pool)\n-    free_alloc_pool (ipa_refdesc_pool);\n+  ipa_refdesc_pool.release ();\n }\n \n /* Print ipa_tree_map data structures of all functions in the"}]}