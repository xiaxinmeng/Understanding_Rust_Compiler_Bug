{"sha": "7f905405bc326d31fe7c0b51f435f29cd063ae9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y5MDU0MDViYzMyNmQzMWZlN2MwYjUxZjQzNWYyOWNkMDYzYWU5Zg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-07-11T20:51:46Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-07-11T20:51:46Z"}, "message": "Makefile.in (c-lex.o): Wrap long lines.\n\n\t* Makefile.in (c-lex.o): Wrap long lines.  Depend on debug.h.\n\t* c-lex.c (cb_file_change, cb_define, cb_undef): Use debug\n\thooks directly.\n\t* dbxout.c (dbx_debug_hooks): Add new hooks.\n\t(dbxout_start_new_source_file): Rename dbxout_start_source_file,\n\tmake static.\n\t(dbxout_resume_previous_source_file): Rename dbxout_end_source_file,\n\tmake static.\n\t* dbxout.h (dbxout_start_new_source_file,\n\tdbxout_resume_previous_source_file): Delete.\n\t* debug.c (do_nothing_debug_hooks): Add new hooks.\n\t(debug_nothing_init_finish): Rename debug_nothing_file_charstar.\n\t(debug_nothing_int_charstar, debug_nothing_int): New.\n\t* debug.h (gcc_debug_hooks): New hooks define, undef,\n\tstart_source_file and end_source_file.\n\t(debug_nothing_init_finish): Rename debug_nothing_file_charstar.\n\t(debug_nothing_int_charstar, debug_nothing_int): New.\n\t* dwarf2out.c (dwarf2_debug_hooks): Add new hooks.\n\t(dwarf2out_start_source_file, dwarf2out_end_source_file,\n\tdwarf2out_define, dwarf2out_undef): Make static.\n\t* dwarf2out.h (dwarf2out_start_source_file, dwarf2out_end_source_file,\n\tdwarf2out_define, dwarf2out_undef): Remove.\n\t* dwarfout.c (dwarf_debug_hooks): Add new hooks.\n\t(dwarfout_start_source_file, dwarfout_end_source_file,\n\tdwarfout_define, dwarfout_undef): Make static.\n\t(dwarfout_start_source_file_check,\n\tdwarfout_end_source_file_check): New.\n\t(dwarfout_define, dwarfout_finish): Update.\n\t* dwarfout.h (dwarfout_start_new_source_file,\n\tdwarfout_resume_previous_source_file, dwarfout_define,\n\tdwarfout_undef): Remove.\n\t* sdbout.c (sdb_debug_hooks): Add new hooks.\n\t(sdbout_start_new_source_file): Rename sdbout_start_source_file,\n\tmake static.\n\t(sdbout_resume_previous_source_file): Rename sdbout_end_source_file,\n\tmake static, take an arg.\n\t* sdbout.h (sdbout_start_new_source_file,\n\tsdbout_resume_previous_source_file): Delete.\n\t* toplev.c (debug_start_source_file, debug_end_source_file,\n\tdebug_define, debug_undef): Delete.\n\t* toplev.h (debug_start_source_file, debug_end_source_file,\n\tdebug_define, debug_undef): Delete.\n\n\t* java/jcf-parse.c: Include debug.h.\n\t(parse_class_file): Update to use debug hooks directly.\n\t* java/Make-lang.in (jcf-parse.o): Depend on debug.h.\n\nFrom-SVN: r43952", "tree": {"sha": "8208475fab02ce7a5ccefba302810842e545181a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8208475fab02ce7a5ccefba302810842e545181a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f905405bc326d31fe7c0b51f435f29cd063ae9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f905405bc326d31fe7c0b51f435f29cd063ae9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f905405bc326d31fe7c0b51f435f29cd063ae9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f905405bc326d31fe7c0b51f435f29cd063ae9f/comments", "author": null, "committer": null, "parents": [{"sha": "ba4828e00559dfebd57b51b78696ce777a8da279", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba4828e00559dfebd57b51b78696ce777a8da279", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba4828e00559dfebd57b51b78696ce777a8da279"}], "stats": {"total": 407, "additions": 210, "deletions": 197}, "files": [{"sha": "52d9a3383e428ec02e704c0c685592fbba37e712", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f905405bc326d31fe7c0b51f435f29cd063ae9f", "patch": "@@ -1,3 +1,53 @@\n+2001-07-11  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* Makefile.in (c-lex.o): Wrap long lines.  Depend on debug.h.\n+\t* c-lex.c (cb_file_change, cb_define, cb_undef): Use debug\n+\thooks directly.\n+\t* dbxout.c (dbx_debug_hooks): Add new hooks.\n+\t(dbxout_start_new_source_file): Rename dbxout_start_source_file,\n+\tmake static.\n+\t(dbxout_resume_previous_source_file): Rename dbxout_end_source_file,\n+\tmake static.\n+\t* dbxout.h (dbxout_start_new_source_file,\n+\tdbxout_resume_previous_source_file): Delete.\n+\t* debug.c (do_nothing_debug_hooks): Add new hooks.\n+\t(debug_nothing_init_finish): Rename debug_nothing_file_charstar.\n+\t(debug_nothing_int_charstar, debug_nothing_int): New.\n+\t* debug.h (gcc_debug_hooks): New hooks define, undef,\n+\tstart_source_file and end_source_file.\n+\t(debug_nothing_init_finish): Rename debug_nothing_file_charstar.\n+\t(debug_nothing_int_charstar, debug_nothing_int): New.\n+\t* dwarf2out.c (dwarf2_debug_hooks): Add new hooks.  Move into\n+\tthe conditionally compiled section.\n+\t(dwarf2out_start_source_file, dwarf2out_end_source_file,\n+\tdwarf2out_define, dwarf2out_undef): Make static.\n+\t* dwarf2out.h (dwarf2out_start_source_file, dwarf2out_end_source_file,\n+\tdwarf2out_define, dwarf2out_undef): Remove.\n+\t* dwarfout.c (dwarf_debug_hooks): Add new hooks.\n+\t(dwarfout_start_source_file, dwarfout_end_source_file,\n+\tdwarfout_define, dwarfout_undef): Make static.\n+\t(dwarfout_start_source_file_check,\n+\tdwarfout_end_source_file_check): New.\n+\t(dwarfout_define, dwarfout_finish): Update.\n+\t* dwarfout.h (dwarfout_start_new_source_file,\n+\tdwarfout_resume_previous_source_file, dwarfout_define,\n+\tdwarfout_undef): Remove.\n+\t* sdbout.c (sdb_debug_hooks): Add new hooks.\n+\t(sdbout_start_new_source_file): Rename sdbout_start_source_file,\n+\tmake static.\n+\t(sdbout_resume_previous_source_file): Rename sdbout_end_source_file,\n+\tmake static, take an arg.\n+\t* sdbout.h (sdbout_start_new_source_file,\n+\tsdbout_resume_previous_source_file): Delete.\n+\t* toplev.c (debug_start_source_file, debug_end_source_file,\n+\tdebug_define, debug_undef): Delete.\n+\t* toplev.h (debug_start_source_file, debug_end_source_file,\n+\tdebug_define, debug_undef): Delete.\n+\n+\t* java/jcf-parse.c: Include debug.h.\n+\t(parse_class_file): Update to use debug hooks directly.\n+\t* java/Make-lang.in (jcf-parse.o): Depend on debug.h.\n+\n Wed Jul 11 10:07:18 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* alias.c (set_mem_alias_set): New function."}, {"sha": "beb097ce27598d48ab022ce4bf3da4faeea66527", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7f905405bc326d31fe7c0b51f435f29cd063ae9f", "patch": "@@ -1162,7 +1162,8 @@ c-typeck.o : c-typeck.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n c-lang.o : c-lang.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n     $(GGC_H)  c-lex.h toplev.h diagnostic.h output.h function.h \\\n     $(RTL_H) $(EXPR_H)\n-c-lex.o : c-lex.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) c-lex.h $(C_TREE_H) \\\n+c-lex.o : c-lex.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) c-lex.h \\\n+    debug.h $(C_TREE_H) \\\n     c-pragma.h input.h intl.h flags.h toplev.h output.h \\\n     mbchar.h cpplib.h $(EXPR_H) $(TM_P_H)\n c-aux-info.o : c-aux-info.c  $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\"}, {"sha": "02c85a0e5ecd3bd57a1c594512067286308f8ac3", "filename": "gcc/c-lex.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=7f905405bc326d31fe7c0b51f435f29cd063ae9f", "patch": "@@ -37,6 +37,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"intl.h\"\n #include \"tm_p.h\"\n #include \"splay-tree.h\"\n+#include \"debug.h\"\n \n /* MULTIBYTE_CHARS support only works for native compilers.\n    ??? Ideally what we want is to model widechar support after\n@@ -249,7 +250,7 @@ cb_file_change (pfile, fc)\n \t  lineno = fc->from.lineno;\n \t  push_srcloc (fc->to.filename, 1);\n \t  input_file_stack->indent_level = indent_level;\n-\t  debug_start_source_file (fc->from.lineno, fc->to.filename);\n+\t  (*debug_hooks->start_source_file) (fc->from.lineno, fc->to.filename);\n #ifndef NO_IMPLICIT_EXTERN_C\n \t  if (c_header_level)\n \t    ++c_header_level;\n@@ -287,7 +288,7 @@ cb_file_change (pfile, fc)\n \t    }\n #endif\n \t  pop_srcloc ();\n-\t  debug_end_source_file (input_file_stack->line);\n+\t  (*debug_hooks->end_source_file) (input_file_stack->line);\n \t}\n       else\n \terror (\"leaving more files than we entered\");\n@@ -334,16 +335,18 @@ cb_define (pfile, node)\n      cpp_reader *pfile;\n      cpp_hashnode *node;\n {\n-  debug_define (cpp_get_line (parse_in)->line,  (const char *) cpp_macro_definition (pfile, node));\n+  (*debug_hooks->define) (cpp_get_line (pfile)->line,\n+\t\t\t  (const char *) cpp_macro_definition (pfile, node));\n }\n \n /* #undef callback for DWARF and DWARF2 debug info.  */\n static void\n cb_undef (pfile, node)\n-     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+     cpp_reader *pfile;\n      cpp_hashnode *node;\n {\n-  debug_undef (cpp_get_line (parse_in)->line, (const char *) NODE_NAME (node));\n+  (*debug_hooks->undef) (cpp_get_line (pfile)->line,\n+\t\t\t (const char *) NODE_NAME (node));\n }\n \n #if 0 /* not yet */"}, {"sha": "2a16e4dd8d9333fc765b897cadf237ab0c6d8406", "filename": "gcc/dbxout.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=7f905405bc326d31fe7c0b51f435f29cd063ae9f", "patch": "@@ -286,6 +286,8 @@ static int current_sym_nchars;\n \n static void dbxout_init\t\t\tPARAMS ((FILE *, const char *));\n static void dbxout_finish\t\tPARAMS ((FILE *, const char *));\n+static void dbxout_start_source_file\tPARAMS ((unsigned, const char *));\n+static void dbxout_end_source_file\tPARAMS ((unsigned));\n #if defined(ASM_OUTPUT_SECTION_NAME)\n static void dbxout_function_end\t\tPARAMS ((void));\n #endif\n@@ -309,11 +311,15 @@ static void dbxout_finish_symbol\tPARAMS ((tree));\n static void dbxout_block\t\tPARAMS ((tree, int, tree));\n static void dbxout_really_begin_function PARAMS ((tree));\n \f\n-/* The target debug structure.  */\n+/* The debug hooks structure.  */\n struct gcc_debug_hooks dbx_debug_hooks =\n {\n   dbxout_init,\n-  dbxout_finish\n+  dbxout_finish,\n+  debug_nothing_int_charstar,\n+  debug_nothing_int_charstar,\n+  dbxout_start_source_file,\n+  dbxout_end_source_file\n };\n \f\n #if defined(ASM_OUTPUT_SECTION_NAME)\n@@ -460,8 +466,9 @@ dbxout_typedefs (syms)\n \n /* Change to reading from a new source file.  Generate a N_BINCL stab.  */\n \n-void\n-dbxout_start_new_source_file (filename)\n+static void\n+dbxout_start_source_file (line, filename)\n+     unsigned int line ATTRIBUTE_UNUSED;\n      const char *filename ATTRIBUTE_UNUSED;\n {\n #ifdef DBX_USE_BINCL\n@@ -479,8 +486,9 @@ dbxout_start_new_source_file (filename)\n \n /* Revert to reading a previous source file.  Generate a N_EINCL stab.  */\n \n-void\n-dbxout_resume_previous_source_file ()\n+static void\n+dbxout_end_source_file (line)\n+     unsigned int line ATTRIBUTE_UNUSED;\n {\n #ifdef DBX_USE_BINCL\n   struct dbx_file *next;"}, {"sha": "3bdc7956423ee1aaff2e53c8382724afd71f4523", "filename": "gcc/dbxout.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fdbxout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fdbxout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.h?ref=7f905405bc326d31fe7c0b51f435f29cd063ae9f", "patch": "@@ -18,9 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-extern void dbxout_start_new_source_file \tPARAMS ((const char *));\n-extern void dbxout_resume_previous_source_file\tPARAMS ((void));\n-\n extern void dbxout_source_file\t\tPARAMS ((FILE *, const char *));\n extern void dbxout_types\t\tPARAMS ((tree));\n extern void dbxout_args\t\t\tPARAMS ((tree));"}, {"sha": "0b750ac78702661dc964c9e798df65db459a59c8", "filename": "gcc/debug.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fdebug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fdebug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.c?ref=7f905405bc326d31fe7c0b51f435f29cd063ae9f", "patch": "@@ -22,16 +22,33 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n /* The do-nothing debug hooks.  */\n struct gcc_debug_hooks do_nothing_debug_hooks =\n {\n-  debug_nothing_init_finish,\n-  debug_nothing_init_finish\n+  debug_nothing_file_charstar,\n+  debug_nothing_file_charstar,\n+  debug_nothing_int_charstar,\n+  debug_nothing_int_charstar,\n+  debug_nothing_int_charstar,\n+  debug_nothing_int\n };\n \n /* This file contains implementations of each debug hook that do\n    nothing.  */\n \n void\n-debug_nothing_init_finish (file, main_filename)\n+debug_nothing_file_charstar (file, main_filename)\n      FILE *file ATTRIBUTE_UNUSED;\n      const char *main_filename ATTRIBUTE_UNUSED;\n {\n }\n+\n+void\n+debug_nothing_int_charstar (line, text)\n+     unsigned int line ATTRIBUTE_UNUSED;\n+     const char *text ATTRIBUTE_UNUSED;\n+{\n+}\n+\n+void\n+debug_nothing_int (line)\n+     unsigned int line ATTRIBUTE_UNUSED;\n+{\n+}"}, {"sha": "9b7e28a595801b173a2b80b868ea26338a23ce47", "filename": "gcc/debug.h", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=7f905405bc326d31fe7c0b51f435f29cd063ae9f", "patch": "@@ -29,14 +29,33 @@ struct gcc_debug_hooks\n \n   /* Output debug symbols to FILE.  */\n   void (* finish) PARAMS ((FILE * file, const char *main_filename));\n+\n+  /* Macro defined on line LINE with name and expansion TEXT.  */\n+  void (* define) PARAMS ((unsigned int line, const char *text));\n+\n+  /* MACRO undefined on line LINE.  */\n+  void (* undef) PARAMS ((unsigned int line, const char *macro));\n+\n+  /* Record the beginning of a new source file FILE from LINE number\n+     in the previous one.  */\n+  void (* start_source_file) PARAMS ((unsigned int line, const char *file));\n+\n+  /* Record the resumption of a source file.  LINE is the line number\n+     in the source file we are returning to.  */\n+  void (* end_source_file) PARAMS ((unsigned int line));\n };\n \n extern struct gcc_debug_hooks *debug_hooks;\n \n /* The do-nothing hooks.  */\n-extern void debug_nothing_init_finish\n+extern void debug_nothing_file_charstar\n   PARAMS ((FILE *, const char *));\n+extern void debug_nothing_int_charstar\n+  PARAMS ((unsigned int, const char *));\n+extern void debug_nothing_int\n+  PARAMS ((unsigned int));\n \n+/* Hooks for various debug formats.  */\n extern struct gcc_debug_hooks do_nothing_debug_hooks;\n extern struct gcc_debug_hooks dbx_debug_hooks;\n extern struct gcc_debug_hooks sdb_debug_hooks;"}, {"sha": "dc8d64a090a8e0c4446acb21bd0752d0a60507b2", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 27, "deletions": 33, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=7f905405bc326d31fe7c0b51f435f29cd063ae9f", "patch": "@@ -232,8 +232,6 @@ static unsigned current_funcdef_fde;\n \n /* Forward declarations for functions defined in this file.  */\n \n-static void dwarf2out_init \t\tPARAMS ((FILE *, const char *));\n-static void dwarf2out_finish\t\tPARAMS ((FILE *, const char *));\n static char *stripattributes\t\tPARAMS ((const char *));\n static const char *dwarf_cfi_name\tPARAMS ((unsigned));\n static dw_cfi_ref new_cfi\t\tPARAMS ((void));\n@@ -364,12 +362,6 @@ expand_builtin_dwarf_fp_regnum ()\n #define INCOMING_FRAME_SP_OFFSET 0\n #endif\n \f\n-/* The target debug structure.  */\n-\n-struct gcc_debug_hooks dwarf2_debug_hooks\n-  = {dwarf2out_init, dwarf2out_finish\n-};\n-\f\n /* Return a pointer to a copy of the section string name S with all\n    attributes stripped off, and an asterisk prepended (for assemble_name).  */\n \n@@ -3009,6 +3001,25 @@ get_cfa_from_loc_descr (cfa, loc)\n /* And now, the support for symbolic debugging information.  */\n #ifdef DWARF2_DEBUGGING_INFO\n \n+static void dwarf2out_init \t\tPARAMS ((FILE *, const char *));\n+static void dwarf2out_finish\t\tPARAMS ((FILE *, const char *));\n+static void dwarf2out_define\t        PARAMS ((unsigned int, const char *));\n+static void dwarf2out_undef\t        PARAMS ((unsigned int, const char *));\n+static void dwarf2out_start_source_file\tPARAMS ((unsigned, const char *));\n+static void dwarf2out_end_source_file\tPARAMS ((unsigned));\n+\n+/* The debug hooks structure.  */\n+\n+struct gcc_debug_hooks dwarf2_debug_hooks =\n+{\n+  dwarf2out_init,\n+  dwarf2out_finish,\n+  dwarf2out_define,\n+  dwarf2out_undef,\n+  dwarf2out_start_source_file,\n+  dwarf2out_end_source_file\n+};\n+\f\n /* NOTE: In the comments in this file, many references are made to\n    \"Debugging Information Entries\".  This term is abbreviated as `DIE'\n    throughout the remainder of this file.  */\n@@ -11283,10 +11294,10 @@ dwarf2out_line (filename, line)\n \n /* Record the beginning of a new source file. */\n \n-void\n+static void\n dwarf2out_start_source_file (lineno, filename)\n-     register unsigned int lineno ATTRIBUTE_UNUSED;\n-     register const char *filename ATTRIBUTE_UNUSED;\n+     register unsigned int lineno;\n+     register const char *filename;\n {\n   if (flag_eliminate_dwarf2_dups)\n     {\n@@ -11305,8 +11316,9 @@ dwarf2out_start_source_file (lineno, filename)\n \n /* Record the end of a source file.  */\n \n-void\n-dwarf2out_end_source_file ()\n+static void\n+dwarf2out_end_source_file (lineno)\n+     unsigned int lineno ATTRIBUTE_UNUSED;\n {\n   if (flag_eliminate_dwarf2_dups)\n     {\n@@ -11324,7 +11336,7 @@ dwarf2out_end_source_file ()\n    the tail part of the directive line, i.e. the part which is past the\n    initial whitespace, #, whitespace, directive-name, whitespace part.  */\n \n-void\n+static void\n dwarf2out_define (lineno, buffer)\n      register unsigned lineno ATTRIBUTE_UNUSED;\n      register const char *buffer ATTRIBUTE_UNUSED;\n@@ -11348,7 +11360,7 @@ dwarf2out_define (lineno, buffer)\n    the tail part of the directive line, i.e. the part which is past the\n    initial whitespace, #, whitespace, directive-name, whitespace part.  */\n \n-void\n+static void\n dwarf2out_undef (lineno, buffer)\n      register unsigned lineno ATTRIBUTE_UNUSED;\n      register const char *buffer ATTRIBUTE_UNUSED;\n@@ -11587,22 +11599,4 @@ dwarf2out_finish (asm_out_file, input_filename)\n     }\n   \n }\n-#else /* DWARF2_DEBUGGING_INFO\n-\n-/* Use dummy versions of init and finish routines.  */\n-\n-static void\n-dwarf2out_init (asm_out_file, main_input_filename)\n-     register FILE *asm_out_file ATTRIBUTE_UNUSED;\n-     register const char *main_input_filename ATTRIBUTE_UNUSED;\n-{\n-}\n-\n-static void\n-dwarf2out_finish (asm_out_file, input_filename)\n-     register FILE *asm_out_file ATTRIBUTE_UNUSED;\n-     register const char *input_filename ATTRIBUTE_UNUSED;\n-{\n-}\n-\n #endif /* DWARF2_DEBUGGING_INFO */"}, {"sha": "726ad0061a6eed9b58a754aca506bd7b2acf6111", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=7f905405bc326d31fe7c0b51f435f29cd063ae9f", "patch": "@@ -18,11 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-extern void dwarf2out_define\t\tPARAMS ((unsigned, const char *));\n-extern void dwarf2out_undef \t\tPARAMS ((unsigned, const char *));\n-extern void dwarf2out_start_source_file\tPARAMS ((unsigned, const char *));\n-extern void dwarf2out_end_source_file \tPARAMS ((void));\n-\n extern void dwarf2out_begin_block\tPARAMS ((unsigned));\n extern void dwarf2out_end_block\t\tPARAMS ((unsigned));\n extern int dwarf2out_ignore_block\tPARAMS ((tree));"}, {"sha": "f5fa7c424e509b824f70eb9911f055012dfd2745", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=7f905405bc326d31fe7c0b51f435f29cd063ae9f", "patch": "@@ -789,6 +789,12 @@ static int in_class;\n \n static void dwarfout_init \t\tPARAMS ((FILE *, const char *));\n static void dwarfout_finish\t\tPARAMS ((FILE *, const char *));\n+static void dwarfout_define\t        PARAMS ((unsigned int, const char *));\n+static void dwarfout_undef\t        PARAMS ((unsigned int, const char *));\n+static void dwarfout_start_source_file\tPARAMS ((unsigned, const char *));\n+static void dwarfout_start_source_file_check PARAMS ((unsigned, const char *));\n+static void dwarfout_end_source_file\tPARAMS ((unsigned));\n+static void dwarfout_end_source_file_check PARAMS ((unsigned));\n static const char *dwarf_tag_name\tPARAMS ((unsigned));\n static const char *dwarf_attr_name\tPARAMS ((unsigned));\n static const char *dwarf_stack_op_name\tPARAMS ((unsigned));\n@@ -1361,11 +1367,15 @@ static void retry_incomplete_types\tPARAMS ((void));\n #endif\n \n \f\n-/* The target debug structure.  */\n+/* The debug hooks structure.  */\n struct gcc_debug_hooks dwarf_debug_hooks =\n {\n   dwarfout_init,\n-  dwarfout_finish\n+  dwarfout_finish,\n+  dwarfout_define,\n+  dwarfout_undef,\n+  dwarfout_start_source_file_check,\n+  dwarfout_end_source_file_check\n };\n \f\n /************************ general utility functions **************************/\n@@ -6107,8 +6117,19 @@ generate_macinfo_entry (type_and_offset, string)\n   ASM_OUTPUT_POP_SECTION (asm_out_file);\n }\n \n-void\n-dwarfout_start_new_source_file (filename)\n+/* Wrapper for toplev.c callback to check debug info level.  */\n+static void\n+dwarfout_start_source_file_check (line, filename)\n+     unsigned int line;\n+     register const char *filename;\n+{\n+  if (debug_info_level == DINFO_LEVEL_VERBOSE)\n+    dwarfout_start_source_file (line, filename);\n+}\n+\n+static void\n+dwarfout_start_source_file (line, filename)\n+     unsigned int line ATTRIBUTE_UNUSED;\n      register const char *filename;\n {\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n@@ -6123,8 +6144,17 @@ dwarfout_start_new_source_file (filename)\n   generate_macinfo_entry (type_and_offset, \"\");\n }\n \n-void\n-dwarfout_resume_previous_source_file (lineno)\n+/* Wrapper for toplev.c callback to check debug info level.  */\n+static void\n+dwarfout_end_source_file_check (lineno)\n+     register unsigned lineno;\n+{\n+  if (debug_info_level == DINFO_LEVEL_VERBOSE)\n+    dwarfout_end_source_file (lineno);\n+}\n+\n+static void\n+dwarfout_end_source_file (lineno)\n      register unsigned lineno;\n {\n   char type_and_offset[MAX_ARTIFICIAL_LABEL_BYTES*2];\n@@ -6139,7 +6169,7 @@ dwarfout_resume_previous_source_file (lineno)\n    is past the initial whitespace, #, whitespace, directive-name,\n    whitespace part.  */\n \n-void\n+static void\n dwarfout_define (lineno, buffer)\n      register unsigned lineno;\n      register const char *buffer;\n@@ -6149,7 +6179,7 @@ dwarfout_define (lineno, buffer)\n \n   if (!initialized)\n     {\n-      dwarfout_start_new_source_file (primary_filename);\n+      dwarfout_start_source_file (0, primary_filename);\n       initialized = 1;\n     }\n   sprintf (type_and_offset, \"0x%08x+%u\",\n@@ -6162,7 +6192,7 @@ dwarfout_define (lineno, buffer)\n    is past the initial whitespace, #, whitespace, directive-name,\n    whitespace part.  */\n \n-void\n+static void\n dwarfout_undef (lineno, buffer)\n      register unsigned lineno;\n      register const char *buffer;\n@@ -6487,7 +6517,7 @@ dwarfout_finish (asm_out_file, main_input_filename)\n \t{\n \t  /* Output terminating entries for the .debug_macinfo section.  */\n \t\n-\t  dwarfout_resume_previous_source_file (0);\n+\t  dwarfout_end_source_file (0);\n \n \t  fputc ('\\n', asm_out_file);\n \t  ASM_OUTPUT_PUSH_SECTION (asm_out_file, DEBUG_MACINFO_SECTION);"}, {"sha": "a72db0515cd0ce1ac1a30a77335a97b424485a1b", "filename": "gcc/dwarfout.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fdwarfout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fdwarfout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.h?ref=7f905405bc326d31fe7c0b51f435f29cd063ae9f", "patch": "@@ -18,11 +18,7 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-extern void dwarfout_define\t\tPARAMS ((unsigned, const char *));\n-extern void dwarfout_undef \t\tPARAMS ((unsigned, const char *));\n extern void dwarfout_file_scope_decl \tPARAMS ((tree , int));\n-extern void dwarfout_start_new_source_file PARAMS ((const char *));\n-extern void dwarfout_resume_previous_source_file PARAMS ((unsigned));\n \n extern void dwarfout_begin_function\tPARAMS ((void));\n extern void dwarfout_end_function\tPARAMS ((void));"}, {"sha": "df0a4d13779f15ef9005fdf7ff8a98706a5fff5e", "filename": "gcc/f/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Ff%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Ff%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FMake-lang.in?ref=7f905405bc326d31fe7c0b51f435f29cd063ae9f", "patch": "@@ -467,7 +467,7 @@ f/lex.o: f/lex.c f/proj.h $(CONFIG_H) $(SYSTEM_H) f/top.h f/malloc.h f/where.h \\\n  f/bld-op.def f/bit.h f/info.h f/info-b.def f/info-k.def f/info-w.def \\\n  f/target.h f/lex.h f/type.h f/intrin.h f/intrin.def f/lab.h f/symbol.h \\\n  f/symbol.def f/equiv.h f/storag.h f/global.h f/name.h f/src.h flags.h \\\n- input.h toplev.h output.h $(GGC_H)\n+ debug.h input.h toplev.h output.h $(GGC_H)\n f/malloc.o: f/malloc.c f/proj.h $(CONFIG_H) $(SYSTEM_H) f/malloc.h\n f/name.o: f/name.c f/proj.h $(CONFIG_H) $(SYSTEM_H) f/bad.h f/bad.def f/where.h \\\n  glimits.h f/top.h f/malloc.h f/name.h f/global.h f/info.h f/info-b.def \\"}, {"sha": "70f666aaf44c0a8cba0d70503f2933da834a41f7", "filename": "gcc/f/lex.c", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Ff%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Ff%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flex.c?ref=7f905405bc326d31fe7c0b51f435f29cd063ae9f", "patch": "@@ -26,6 +26,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"lex.h\"\n #include \"malloc.h\"\n #include \"src.h\"\n+#include \"debug.h\"\n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n #include \"flags.h\"\n #include \"input.h\"\n@@ -34,10 +35,6 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"ggc.h\"\n #endif\n \n-#ifdef DWARF_DEBUGGING_INFO\n-#include \"dwarfout.h\"\n-#endif\n-\n static void ffelex_append_to_token_ (char c);\n static int ffelex_backslash_ (int c, ffewhereColumnNumber col);\n static void ffelex_bad_1_ (ffebad errnum, ffewhereLineNumber ln0,\n@@ -860,11 +857,8 @@ ffelex_file_pop_ (const char *input_filename)\n       input_file_stack = p->next;\n       free (p);\n       input_file_stack_tick++;\n-#ifdef DWARF_DEBUGGING_INFO\n-      if (debug_info_level == DINFO_LEVEL_VERBOSE\n-\t  && write_symbols == DWARF_DEBUG)\n-\tdwarfout_resume_previous_source_file (input_file_stack->line);\n-#endif /* DWARF_DEBUGGING_INFO */\n+      if (write_symbols == DWARF_DEBUG)\n+\t(*debug_hooks->end_source_file) (input_file_stack->line);\n     }\n   else\n     error (\"#-lines for entering and leaving files don't match\");\n@@ -888,11 +882,9 @@ ffelex_file_push_ (int old_lineno, const char *input_filename)\n   p->name = input_filename;\n   input_file_stack = p;\n   input_file_stack_tick++;\n-#ifdef DWARF_DEBUGGING_INFO\n-  if (debug_info_level == DINFO_LEVEL_VERBOSE\n-      && write_symbols == DWARF_DEBUG)\n-    dwarfout_start_new_source_file (input_filename);\n-#endif /* DWARF_DEBUGGING_INFO */\n+\n+  if (write_symbols == DWARF_DEBUG)\n+    (*debug_hooks->start_source_file) (0, input_filename);\n \n   /* Now that we've pushed or popped the input stack,\n      update the name in the top element.  */\n@@ -1173,11 +1165,9 @@ ffelex_hash_ (FILE *finput)\n \n \t      c = ffelex_get_directive_line_ (&text, finput);\n \n-#ifdef DWARF_DEBUGGING_INFO\n \t      if ((debug_info_level == DINFO_LEVEL_VERBOSE)\n \t\t  && (write_symbols == DWARF_DEBUG))\n-\t\tdwarfout_define (lineno, text);\n-#endif /* DWARF_DEBUGGING_INFO */\n+\t\t(*debug_hooks->define) (lineno, text);\n \n \t      goto skipline;\n \t    }\n@@ -1195,11 +1185,9 @@ ffelex_hash_ (FILE *finput)\n \n \t      c = ffelex_get_directive_line_ (&text, finput);\n \n-#ifdef DWARF_DEBUGGING_INFO\n \t      if ((debug_info_level == DINFO_LEVEL_VERBOSE)\n \t\t  && (write_symbols == DWARF_DEBUG))\n-\t\tdwarfout_undef (lineno, text);\n-#endif /* DWARF_DEBUGGING_INFO */\n+\t\t(*debug_hooks->undef) (lineno, text);\n \n \t      goto skipline;\n \t    }"}, {"sha": "f1c00d7f9383cc0a12ca98749dfc48b1dd32af1c", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=7f905405bc326d31fe7c0b51f435f29cd063ae9f", "patch": "@@ -259,7 +259,8 @@ java/expr.o: java/expr.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h real.h \\\n   $(SYSTEM_H) $(GGC_H)\n java/jcf-depend.o: java/jcf-depend.c $(CONFIG_H) $(SYSTEM_H) java/jcf.h\n java/jcf-parse.o: java/jcf-parse.c $(CONFIG_H) $(JAVA_TREE_H) flags.h \\\n-  input.h java/java-except.h $(SYSTEM_H) toplev.h java/parse.h $(GGC_H)\n+  input.h java/java-except.h $(SYSTEM_H) toplev.h java/parse.h $(GGC_H) \\\n+  debug.h\n java/jcf-write.o: java/jcf-write.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h \\\n   $(RTL_H) java/java-opcodes.h java/parse.h java/buffer.h $(SYSTEM_H) \\\n   toplev.h $(GGC_H)"}, {"sha": "c73d1dcf3b26e2ed9164e217d3cd55474debae37", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=7f905405bc326d31fe7c0b51f435f29cd063ae9f", "patch": "@@ -35,6 +35,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"toplev.h\"\n #include \"parse.h\"\n #include \"ggc.h\"\n+#include \"debug.h\"\n \n #ifdef HAVE_LOCALE_H\n #include <locale.h>\n@@ -774,7 +775,7 @@ parse_class_file ()\n \n   input_filename = DECL_SOURCE_FILE (TYPE_NAME (current_class));\n   lineno = 0;\n-  debug_start_source_file (lineno, input_filename);\n+  (*debug_hooks->start_source_file) (lineno, input_filename);\n   init_outgoing_cpool ();\n \n   /* Currently we always have to emit calls to _Jv_InitClass when\n@@ -860,7 +861,7 @@ parse_class_file ()\n \n   finish_class ();\n \n-  debug_end_source_file (save_lineno);\n+  (*debug_hooks->end_source_file) (save_lineno);\n   input_filename = save_input_filename;\n   lineno = save_lineno;\n }"}, {"sha": "47d34c17a84b244eb51be905218205508457b924", "filename": "gcc/sdbout.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=7f905405bc326d31fe7c0b51f435f29cd063ae9f", "patch": "@@ -93,6 +93,8 @@ extern tree current_function_decl;\n #include \"sdbout.h\"\n \n static void sdbout_init\t\t\tPARAMS ((FILE *, const char *));\n+static void sdbout_start_source_file\tPARAMS ((unsigned, const char *));\n+static void sdbout_end_source_file\tPARAMS ((unsigned));\n static char *gen_fake_label\t\tPARAMS ((void));\n static int plain_type\t\t\tPARAMS ((tree));\n static int template_name_p\t\tPARAMS ((tree));\n@@ -289,11 +291,15 @@ static struct sdb_file *current_file;\n \n #endif /* MIPS_DEBUGGING_INFO */\n \f\n-/* The target debug structure.  */\n+/* The debug hooks structure.  */\n struct gcc_debug_hooks sdb_debug_hooks =\n {\n   sdbout_init,\n-  debug_nothing_init_finish\n+  debug_nothing_file_charstar,\n+  debug_nothing_int_charstar,\n+  debug_nothing_int_charstar,\n+  sdbout_start_source_file,\n+  sdbout_end_source_file\n };\n \f\n #if 0\n@@ -1584,8 +1590,9 @@ sdbout_label (insn)\n \n /* Change to reading from a new source file.  */\n \n-void\n-sdbout_start_new_source_file (filename)\n+static void\n+sdbout_start_source_file (line, filename)\n+     unsigned int line ATTRIBUTE_UNUSED;\n      const char *filename ATTRIBUTE_UNUSED;\n {\n #ifdef MIPS_DEBUGGING_INFO\n@@ -1600,8 +1607,9 @@ sdbout_start_new_source_file (filename)\n \n /* Revert to reading a previous source file.  */\n \n-void\n-sdbout_resume_previous_source_file ()\n+static void\n+sdbout_end_source_file (line)\n+     unsigned int line ATTRIBUTE_UNUSED;\n {\n #ifdef MIPS_DEBUGGING_INFO\n   struct sdb_file *next;"}, {"sha": "1697ffd91f3f035953cb0c2e718a696243af914f", "filename": "gcc/sdbout.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fsdbout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Fsdbout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.h?ref=7f905405bc326d31fe7c0b51f435f29cd063ae9f", "patch": "@@ -31,7 +31,5 @@ extern void sdbout_types\t\tPARAMS ((tree));\n \n extern void sdbout_end_epilogue\t\tPARAMS ((void));\n \n-extern void sdbout_start_new_source_file \tPARAMS ((const char *));\n-extern void sdbout_resume_previous_source_file\tPARAMS ((void));\n extern void sdbout_mark_begin_function\tPARAMS ((void));\n "}, {"sha": "c42a243ba51d0f894e26c7421d090f835eccf434", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 90, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=7f905405bc326d31fe7c0b51f435f29cd063ae9f", "patch": "@@ -2412,6 +2412,7 @@ compile_file (name)\n \n   /* Do dbx symbols.  */\n   timevar_push (TV_SYMOUT);\n+\n #ifdef DWARF2_UNWIND_INFO\n   if (dwarf2out_do_frame ())\n     dwarf2out_frame_finish ();\n@@ -5195,96 +5196,6 @@ print_switch_values (file, pos, max, indent, sep, term)\n   fprintf (file, \"%s\", term);\n }\n \n-/* Record the beginning of a new source file, named FILENAME.  */\n-\n-void\n-debug_start_source_file (lineno, filename)\n-     register unsigned int lineno ATTRIBUTE_UNUSED;\n-     register const char *filename ATTRIBUTE_UNUSED;\n-{\n-#ifdef DBX_DEBUGGING_INFO\n-  if (write_symbols == DBX_DEBUG)\n-    dbxout_start_new_source_file (filename);\n-#endif\n-#ifdef DWARF_DEBUGGING_INFO\n-  if (debug_info_level == DINFO_LEVEL_VERBOSE\n-      && write_symbols == DWARF_DEBUG)\n-    dwarfout_start_new_source_file (filename);\n-#endif /* DWARF_DEBUGGING_INFO  */\n-#ifdef DWARF2_DEBUGGING_INFO\n-  if (write_symbols == DWARF2_DEBUG)\n-    dwarf2out_start_source_file (lineno, filename);\n-#endif /* DWARF2_DEBUGGING_INFO  */\n-#ifdef SDB_DEBUGGING_INFO\n-  if (write_symbols == SDB_DEBUG)\n-    sdbout_start_new_source_file (filename);\n-#endif\n-}\n-\n-/* Record the resumption of a source file.  LINENO is the line number in\n-   the source file we are returning to.  */\n-\n-void\n-debug_end_source_file (lineno)\n-     register unsigned lineno ATTRIBUTE_UNUSED;\n-{\n-#ifdef DBX_DEBUGGING_INFO\n-  if (write_symbols == DBX_DEBUG)\n-    dbxout_resume_previous_source_file ();\n-#endif\n-#ifdef DWARF_DEBUGGING_INFO\n-  if (debug_info_level == DINFO_LEVEL_VERBOSE\n-      && write_symbols == DWARF_DEBUG)\n-    dwarfout_resume_previous_source_file (lineno);\n-#endif /* DWARF_DEBUGGING_INFO  */\n-#ifdef DWARF2_DEBUGGING_INFO\n-  if (write_symbols == DWARF2_DEBUG)\n-    dwarf2out_end_source_file ();\n-#endif /* DWARF2_DEBUGGING_INFO  */\n-#ifdef SDB_DEBUGGING_INFO\n-  if (write_symbols == SDB_DEBUG)\n-    sdbout_resume_previous_source_file ();\n-#endif\n-}\n-\n-/* Called from cb_define in c-lex.c.  The `buffer' parameter contains\n-   the tail part of the directive line, i.e. the part which is past the\n-   initial whitespace, #, whitespace, directive-name, whitespace part.  */\n-\n-void\n-debug_define (lineno, buffer)\n-     register unsigned lineno ATTRIBUTE_UNUSED;\n-     register const char *buffer ATTRIBUTE_UNUSED;\n-{\n-#ifdef DWARF_DEBUGGING_INFO\n-  if (write_symbols == DWARF_DEBUG)\n-    dwarfout_define (lineno, buffer);\n-#endif /* DWARF_DEBUGGING_INFO  */\n-#ifdef DWARF2_DEBUGGING_INFO\n-  if (write_symbols == DWARF2_DEBUG)\n-    dwarf2out_define (lineno, buffer);\n-#endif /* DWARF2_DEBUGGING_INFO  */\n-}\n-\n-/* Called from cb_undef in c-lex.c.  The `buffer' parameter contains\n-   the tail part of the directive line, i.e. the part which is past the\n-   initial whitespace, #, whitespace, directive-name, whitespace part.  */\n-\n-void\n-debug_undef (lineno, buffer)\n-     register unsigned lineno ATTRIBUTE_UNUSED;\n-     register const char *buffer ATTRIBUTE_UNUSED;\n-{\n-#ifdef DWARF_DEBUGGING_INFO\n-  if (write_symbols == DWARF_DEBUG)\n-    dwarfout_undef (lineno, buffer);\n-#endif /* DWARF_DEBUGGING_INFO  */\n-#ifdef DWARF2_DEBUGGING_INFO\n-  if (write_symbols == DWARF2_DEBUG)\n-    dwarf2out_undef (lineno, buffer);\n-#endif /* DWARF2_DEBUGGING_INFO  */\n-}\n-\n /* Returns nonzero if it is appropriate not to emit any debugging\n    information for BLOCK, because it doesn't contain any instructions.\n    This may not be the case for blocks containing nested functions, since"}, {"sha": "0797b2d95ad1f4ccfcf40976adf54365fb879514", "filename": "gcc/toplev.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f905405bc326d31fe7c0b51f435f29cd063ae9f/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=7f905405bc326d31fe7c0b51f435f29cd063ae9f", "patch": "@@ -37,10 +37,6 @@ extern int read_integral_parameter\tPARAMS ((const char *, const char *,\n extern int count_error\t\t\tPARAMS ((int));\n extern void strip_off_ending\t\tPARAMS ((char *, int));\n extern void print_time\t\t\tPARAMS ((const char *, long));\n-extern void debug_start_source_file\tPARAMS ((unsigned, const char *));\n-extern void debug_end_source_file\tPARAMS ((unsigned));\n-extern void debug_define\t\tPARAMS ((unsigned, const char *));\n-extern void debug_undef\t\t\tPARAMS ((unsigned, const char *));\n extern int debug_ignore_block\t\tPARAMS ((union tree_node *));\n extern const char *trim_filename\tPARAMS ((const char *));\n extern void internal_error\t\tPARAMS ((const char *, ...))"}]}