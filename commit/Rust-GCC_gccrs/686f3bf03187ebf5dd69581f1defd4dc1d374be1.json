{"sha": "686f3bf03187ebf5dd69581f1defd4dc1d374be1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg2ZjNiZjAzMTg3ZWJmNWRkNjk1ODFmMWRlZmQ0ZGMxZDM3NGJlMQ==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2002-09-09T22:03:31Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2002-09-09T22:03:31Z"}, "message": "hpux.h (TARGET_HPUX_LD): New, define true.\n\n\t* config/ia64/hpux.h (TARGET_HPUX_LD): New, define true.\n\t(ASM_FILE_END) New.\n\t* config/ia64/ia64.h (TARGET_HPUX_LD): New, define false.\n\t* config/ia64/ia64-protos.h (ia64_hpux_asm_file_end): New.\n\t* config/ia64/ia64.c (ia64_asm_output_external): Create list\n\tof external functions if TARGET_HPUX_LD is true.\n\t(ia64_hpux_add_extern_decl): New, routine to put names on\n\tlist of external functions.\n\t(ia64_hpux_asm_file_end): Put out declarations for external\n\tfunctions if and only if they are used.\n\nFrom-SVN: r56986", "tree": {"sha": "6bc6745fdfa6f27e8e571ab2b3357b8297b44717", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bc6745fdfa6f27e8e571ab2b3357b8297b44717"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/686f3bf03187ebf5dd69581f1defd4dc1d374be1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/686f3bf03187ebf5dd69581f1defd4dc1d374be1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/686f3bf03187ebf5dd69581f1defd4dc1d374be1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/686f3bf03187ebf5dd69581f1defd4dc1d374be1/comments", "author": null, "committer": null, "parents": [{"sha": "0c263f4ed22beaa1db9fceea0c8667983d22afdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c263f4ed22beaa1db9fceea0c8667983d22afdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c263f4ed22beaa1db9fceea0c8667983d22afdd"}], "stats": {"total": 110, "additions": 101, "deletions": 9}, "files": [{"sha": "3daf7425a0fa4c679825287ce7c99d033f00913f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/686f3bf03187ebf5dd69581f1defd4dc1d374be1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/686f3bf03187ebf5dd69581f1defd4dc1d374be1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=686f3bf03187ebf5dd69581f1defd4dc1d374be1", "patch": "@@ -1,3 +1,16 @@\n+2002-09-09  Steve Ellcey  <sje@cup.hp.com>\n+\n+\t* config/ia64/hpux.h (TARGET_HPUX_LD): New, define true.\n+\t(ASM_FILE_END) New.\n+\t* config/ia64/ia64.h (TARGET_HPUX_LD): New, define false.\n+\t* config/ia64/ia64-protos.h (ia64_hpux_asm_file_end): New.\n+\t* config/ia64/ia64.c (ia64_asm_output_external): Create list\n+\tof external functions if TARGET_HPUX_LD is true.\n+\t(ia64_hpux_add_extern_decl): New, routine to put names on\n+\tlist of external functions.\n+\t(ia64_hpux_asm_file_end): Put out declarations for external\n+\tfunctions if and only if they are used.\n+\n 2002-09-09  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* pa.md (exception_receiver, builtin_setjmp_receiver): Add blockage"}, {"sha": "0b639d19a6030a3a81a58b799c47a05c4d0aa038", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/686f3bf03187ebf5dd69581f1defd4dc1d374be1/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/686f3bf03187ebf5dd69581f1defd4dc1d374be1/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=686f3bf03187ebf5dd69581f1defd4dc1d374be1", "patch": "@@ -127,3 +127,14 @@ do {\t\t\t\t\t\t\t\\\n \n #define REGISTER_TARGET_PRAGMAS(PFILE) \\\n   cpp_register_pragma (PFILE, 0, \"builtin\", ia64_hpux_handle_builtin_pragma)\n+\n+/* Tell ia64.c that we are using the HP linker and we should delay output of\n+   function extern declarations so that we don't output them for functions\n+   which are never used (and may not be defined).  */\n+\n+#undef TARGET_HPUX_LD\n+#define TARGET_HPUX_LD\t1\n+\n+/* Put out the needed function declarations at the end.  */\n+\n+#define ASM_FILE_END(STREAM) ia64_hpux_asm_file_end(STREAM)"}, {"sha": "0e0ef04f055d68540a688b0502863030204f8235", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/686f3bf03187ebf5dd69581f1defd4dc1d374be1/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/686f3bf03187ebf5dd69581f1defd4dc1d374be1/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=686f3bf03187ebf5dd69581f1defd4dc1d374be1", "patch": "@@ -148,3 +148,5 @@ extern enum direction ia64_hpux_function_arg_padding PARAMS ((enum machine_mode,\n #ifdef GCC_C_PRAGMA_H\n extern void ia64_hpux_handle_builtin_pragma PARAMS ((cpp_reader *));\n #endif\n+\n+extern void ia64_hpux_asm_file_end PARAMS ((FILE *));"}, {"sha": "c27a6fbb0cb4d2afbd49121541a688d8f2c7aefc", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 73, "deletions": 9, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/686f3bf03187ebf5dd69581f1defd4dc1d374be1/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/686f3bf03187ebf5dd69581f1defd4dc1d374be1/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=686f3bf03187ebf5dd69581f1defd4dc1d374be1", "patch": "@@ -171,6 +171,9 @@ static void ia64_aix_unique_section PARAMS ((tree, int))\n static void ia64_aix_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t         unsigned HOST_WIDE_INT))\n      ATTRIBUTE_UNUSED;\n+\n+static void ia64_hpux_add_extern_decl PARAMS ((const char *name))\n+     ATTRIBUTE_UNUSED;\n \f\n /* Table of valid machine attributes.  */\n static const struct attribute_spec ia64_attribute_table[] =\n@@ -4039,8 +4042,13 @@ ia64_asm_output_external (file, decl, name)\n {\n   int save_referenced;\n \n-  /* GNU as does not need anything here.  */\n-  if (TARGET_GNU_AS)\n+  /* GNU as does not need anything here, but the HP linker does need\n+     something for external functions.  */\n+\n+  if (TARGET_GNU_AS\n+      && (!TARGET_HPUX_LD\n+\t  || TREE_CODE (decl) != FUNCTION_DECL\n+\t  || strstr(name, \"__builtin_\") == name))\n     return;\n \n   /* ??? The Intel assembler creates a reference that needs to be satisfied by\n@@ -4055,13 +4063,18 @@ ia64_asm_output_external (file, decl, name)\n       || ! strcmp (name, \"__builtin_args_info\"))\n     return;\n \n-  /* assemble_name will set TREE_SYMBOL_REFERENCED, so we must save and\n-     restore it.  */\n-  save_referenced = TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl));\n-  if (TREE_CODE (decl) == FUNCTION_DECL)\n-    ASM_OUTPUT_TYPE_DIRECTIVE (file, name, \"function\");\n-  (*targetm.asm_out.globalize_label) (file, name);\n-  TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)) = save_referenced;\n+  if (TARGET_HPUX_LD)\n+    ia64_hpux_add_extern_decl (name);\n+  else\n+    {\n+      /* assemble_name will set TREE_SYMBOL_REFERENCED, so we must save and\n+         restore it.  */\n+      save_referenced = TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl));\n+      if (TREE_CODE (decl) == FUNCTION_DECL)\n+        ASM_OUTPUT_TYPE_DIRECTIVE (file, name, \"function\");\n+      (*targetm.asm_out.globalize_label) (file, name);\n+      TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)) = save_referenced;\n+    }\n }\n \f\n /* Parse the -mfixed-range= option string.  */\n@@ -8050,6 +8063,57 @@ ia64_hpux_function_arg_padding (mode, type)\n        : GET_MODE_BITSIZE (mode) < PARM_BOUNDARY)\n       ? downward : upward);\n }\n+\n+/* Linked list of all external functions that are to be emitted by GCC.\n+   We output the name if and only if TREE_SYMBOL_REFERENCED is set in\n+   order to avoid putting out names that are never really used.  */\n+\n+struct extern_func_list\n+{\n+  struct extern_func_list *next; /* next external */\n+  char *name;                    /* name of the external */\n+} *extern_func_head = 0;\n+\n+static void\n+ia64_hpux_add_extern_decl (name)\n+        const char *name;\n+{\n+  struct extern_func_list *p;\n+\n+  p = (struct extern_func_list *) xmalloc (sizeof (struct extern_func_list));\n+  p->name = xmalloc (strlen (name) + 1);\n+  strcpy(p->name, name);\n+  p->next = extern_func_head;\n+  extern_func_head = p;\n+}\n+\n+/* Print out the list of used global functions.  */\n+\n+void\n+ia64_hpux_asm_file_end (file)\n+\tFILE *file;\n+{\n+  while (extern_func_head)\n+    {\n+      char *real_name;\n+      tree decl;\n+\n+      real_name = (* targetm.strip_name_encoding) (extern_func_head->name);\n+      decl = get_identifier (real_name);\n+      if (decl && ! TREE_ASM_WRITTEN (decl) && TREE_SYMBOL_REFERENCED (decl))\n+        {\n+\t  TREE_ASM_WRITTEN (decl) = 1;\n+\t  (*targetm.asm_out.globalize_label) (file, real_name);\n+\t  fprintf (file, \"%s\", TYPE_ASM_OP);\n+\t  assemble_name (file, real_name);\n+\t  putc (',', file);\n+\t  fprintf (file, TYPE_OPERAND_FMT, \"function\");\n+\t  putc ('\\n', file);\n+        }\n+      extern_func_head = extern_func_head->next;\n+    }\n+}\n+\n \f\n /* Switch to the section to which we should output X.  The only thing\n    special we do here is to honor small data.  */"}, {"sha": "5ab1c444baf4c64c8aaff58f2f928f60d2126c1a", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/686f3bf03187ebf5dd69581f1defd4dc1d374be1/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/686f3bf03187ebf5dd69581f1defd4dc1d374be1/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=686f3bf03187ebf5dd69581f1defd4dc1d374be1", "patch": "@@ -127,6 +127,8 @@ extern int ia64_tls_size;\n #define TARGET_TLS22\t\t(ia64_tls_size == 22)\n #define TARGET_TLS64\t\t(ia64_tls_size == 64)\n \n+#define TARGET_HPUX_LD\t\t0\n+\n /* This macro defines names of command options to set and clear bits in\n    `target_flags'.  Its definition is an initializer with a subgrouping for\n    each command option.  */"}]}