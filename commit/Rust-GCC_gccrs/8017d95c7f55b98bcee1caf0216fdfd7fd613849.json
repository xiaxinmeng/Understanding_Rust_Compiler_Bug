{"sha": "8017d95c7f55b98bcee1caf0216fdfd7fd613849", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODAxN2Q5NWM3ZjU1Yjk4YmNlZTFjYWYwMjE2ZmRmZDdmZDYxMzg0OQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-26T15:19:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-26T15:19:43Z"}, "message": "libstdc++: Add __maybe_const_t and __maybe_empty_t aliases\n\nThis introduces a couple of convenience alias templates to be used for\nsome repeated patterns using std::conditional_t.\n\n\t* include/std/ranges (__detail::__maybe_empty_t): Define new helper\n\talias.\n\t(__detail::__maybe_const_t): Likewise.\n\t(__adaptor::_RangeAdaptor): Use __maybe_empty_t.\n\t(transform_view, take_view, take_while_view, elements_view): Use\n\t__maybe_const_t.\n\t(join_view, split_view): Use both.", "tree": {"sha": "1809954a9a655bb8e75f52ca13ca84aaee3736c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1809954a9a655bb8e75f52ca13ca84aaee3736c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8017d95c7f55b98bcee1caf0216fdfd7fd613849", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8017d95c7f55b98bcee1caf0216fdfd7fd613849", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8017d95c7f55b98bcee1caf0216fdfd7fd613849", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8017d95c7f55b98bcee1caf0216fdfd7fd613849/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a305fa2fd4c9d553b26efa00f868aa1e4416a9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a305fa2fd4c9d553b26efa00f868aa1e4416a9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a305fa2fd4c9d553b26efa00f868aa1e4416a9f"}], "stats": {"total": 63, "additions": 39, "deletions": 24}, "files": [{"sha": "c13d6fc48f4316ba9200e380edafe124c2aa1289", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8017d95c7f55b98bcee1caf0216fdfd7fd613849/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8017d95c7f55b98bcee1caf0216fdfd7fd613849/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8017d95c7f55b98bcee1caf0216fdfd7fd613849", "patch": "@@ -1,3 +1,13 @@\n+2020-02-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/ranges (__detail::__maybe_empty_t): Define new helper\n+\talias.\n+\t(__detail::__maybe_const_t): Likewise.\n+\t(__adaptor::_RangeAdaptor): Use __maybe_empty_t.\n+\t(transform_view, take_view, take_while_view, elements_view): Use\n+\t__maybe_const_t.\n+\t(join_view, split_view): Use both.\n+\n 2020-02-25  Patrick Palka  <ppalka@redhat.com>\n \n \tLWG 3397 basic_istream_view::iterator should not provide"}, {"sha": "d83266321661b5e98d2a3274df75a8a9784fd0d8", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8017d95c7f55b98bcee1caf0216fdfd7fd613849/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8017d95c7f55b98bcee1caf0216fdfd7fd613849/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=8017d95c7f55b98bcee1caf0216fdfd7fd613849", "patch": "@@ -1029,6 +1029,13 @@ namespace views\n namespace __detail\n {\n   struct _Empty { };\n+\n+  template<bool _NonEmpty, typename _Tp>\n+    using __maybe_empty_t = conditional_t<_NonEmpty, _Tp, _Empty>;\n+\n+  template<bool _Const, typename _Tp>\n+    using __maybe_const_t = conditional_t<_Const, const _Tp, _Tp>;\n+\n } // namespace __detail\n \n namespace views\n@@ -1058,8 +1065,8 @@ namespace views\n       {\n       protected:\n \t[[no_unique_address]]\n-\t  conditional_t<!is_default_constructible_v<_Callable>,\n-\t\t\t_Callable, __detail::_Empty> _M_callable;\n+\t  __detail::__maybe_empty_t<!is_default_constructible_v<_Callable>,\n+\t\t\t\t    _Callable> _M_callable;\n \n       public:\n \tconstexpr\n@@ -1552,9 +1559,8 @@ namespace views\n \tstruct _Iterator\n \t{\n \tprivate:\n-\t  using _Parent\n-\t    = conditional_t<_Const, const transform_view, transform_view>;\n-\t  using _Base = conditional_t<_Const, const _Vp, _Vp>;\n+\t  using _Parent = __detail::__maybe_const_t<_Const, transform_view>;\n+\t  using _Base = __detail::__maybe_const_t<_Const, _Vp>;\n \n \t  static constexpr auto\n \t  _S_iter_concept()\n@@ -1760,9 +1766,8 @@ namespace views\n \tstruct _Sentinel\n \t{\n \tprivate:\n-\t  using _Parent\n-\t    = conditional_t<_Const, const transform_view, transform_view>;\n-\t  using _Base = conditional_t<_Const, const _Vp, _Vp>;\n+\t  using _Parent = __detail::__maybe_const_t<_Const, transform_view>;\n+\t  using _Base = __detail::__maybe_const_t<_Const, _Vp>;\n \n \t  constexpr range_difference_t<_Base>\n \t  __distance_from(const _Iterator<_Const>& __i) const\n@@ -1886,7 +1891,7 @@ namespace views\n \tstruct _Sentinel\n \t{\n \tprivate:\n-\t  using _Base = conditional_t<_Const, const _Vp, _Vp>;\n+\t  using _Base = __detail::__maybe_const_t<_Const, _Vp>;\n \t  using _CI = counted_iterator<iterator_t<_Base>>;\n \n \t  sentinel_t<_Base> _M_end = sentinel_t<_Base>();\n@@ -2025,7 +2030,7 @@ namespace views\n \tstruct _Sentinel\n \t{\n \tprivate:\n-\t  using _Base = conditional_t<_Const, const _Vp, _Vp>;\n+\t  using _Base = __detail::__maybe_const_t<_Const, _Vp>;\n \n \t  sentinel_t<_Base> _M_end = sentinel_t<_Base>();\n \t  const _Pred* _M_pred = nullptr;\n@@ -2258,8 +2263,8 @@ namespace views\n \tstruct _Iterator\n \t{\n \tprivate:\n-\t  using _Parent = conditional_t<_Const, const join_view, join_view>;\n-\t  using _Base = conditional_t<_Const, const _Vp, _Vp>;\n+\t  using _Parent = __detail::__maybe_const_t<_Const, join_view>;\n+\t  using _Base = __detail::__maybe_const_t<_Const, _Vp>;\n \n \t  static constexpr bool _S_ref_is_glvalue\n \t    = is_reference_v<range_reference_t<_Base>>;\n@@ -2450,8 +2455,8 @@ namespace views\n \tstruct _Sentinel\n \t{\n \tprivate:\n-\t  using _Parent = conditional_t<_Const, const join_view, join_view>;\n-\t  using _Base = conditional_t<_Const, const _Vp, _Vp>;\n+\t  using _Parent = __detail::__maybe_const_t<_Const, join_view>;\n+\t  using _Base = __detail::__maybe_const_t<_Const, _Vp>;\n \n \t  constexpr bool\n \t  __equal(const _Iterator<_Const>& __i) const\n@@ -2482,8 +2487,8 @@ namespace views\n \n       // XXX: _M_inner is \"present only when !is_reference_v<_InnerRange>\"\n       [[no_unique_address]]\n-\tconditional_t<!is_reference_v<_InnerRange>,\n-\t\t      views::all_t<_InnerRange>, __detail::_Empty> _M_inner;\n+\t__detail::__maybe_empty_t<!is_reference_v<_InnerRange>,\n+\t\t\t\t  views::all_t<_InnerRange>> _M_inner;\n \n     public:\n       join_view() = default;\n@@ -2585,8 +2590,8 @@ namespace views\n \tstruct _OuterIter\n \t{\n \tprivate:\n-\t  using _Parent = conditional_t<_Const, const split_view, split_view>;\n-\t  using _Base = conditional_t<_Const, const _Vp, _Vp>;\n+\t  using _Parent = __detail::__maybe_const_t<_Const, split_view>;\n+\t  using _Base = __detail::__maybe_const_t<_Const, _Vp>;\n \n \t  constexpr bool\n \t  __at_end() const\n@@ -2618,8 +2623,8 @@ namespace views\n \n \t  // XXX: _M_current is present only if \"V models forward_range\"\n \t  [[no_unique_address]]\n-\t    conditional_t<forward_range<_Vp>,\n-\t\t\t  iterator_t<_Base>, __detail::_Empty> _M_current;\n+\t    __detail::__maybe_empty_t<forward_range<_Vp>,\n+\t\t\t\t      iterator_t<_Base>> _M_current;\n \n \tpublic:\n \t  using iterator_concept = conditional_t<forward_range<_Base>,\n@@ -2732,7 +2737,7 @@ namespace views\n \tstruct _InnerIter\n \t{\n \tprivate:\n-\t  using _Base = conditional_t<_Const, const _Vp, _Vp>;\n+\t  using _Base = __detail::__maybe_const_t<_Const, _Vp>;\n \n \t  constexpr bool\n \t  __at_end() const\n@@ -2858,8 +2863,8 @@ namespace views\n \n       // XXX: _M_current is \"present only if !forward_range<V>\"\n       [[no_unique_address]]\n-\tconditional_t<!forward_range<_Vp>,\n-\t\t      iterator_t<_Vp>, __detail::_Empty> _M_current;\n+\t__detail::__maybe_empty_t<!forward_range<_Vp>, iterator_t<_Vp>>\n+\t  _M_current;\n \n \n     public:\n@@ -3223,7 +3228,7 @@ namespace views\n       template<bool _Const>\n \tstruct _Iterator\n \t{\n-\t  using _Base = conditional_t<_Const, const _Vp, _Vp>;\n+\t  using _Base = __detail::__maybe_const_t<_Const, _Vp>;\n \n \t  iterator_t<_Base> _M_current = iterator_t<_Base>();\n "}]}