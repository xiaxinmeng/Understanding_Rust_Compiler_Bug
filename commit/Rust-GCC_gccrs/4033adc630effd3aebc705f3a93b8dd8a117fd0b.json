{"sha": "4033adc630effd3aebc705f3a93b8dd8a117fd0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAzM2FkYzYzMGVmZmQzYWViYzcwNWYzYTkzYjhkZDhhMTE3ZmQwYg==", "commit": {"author": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-11-21T10:24:18Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-11-21T10:24:18Z"}, "message": "Forgot to add to cvs command line\n\nFrom-SVN: r59340", "tree": {"sha": "8c9ad6cb6171cb431baf50957ecef6efe546ae0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c9ad6cb6171cb431baf50957ecef6efe546ae0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4033adc630effd3aebc705f3a93b8dd8a117fd0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4033adc630effd3aebc705f3a93b8dd8a117fd0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4033adc630effd3aebc705f3a93b8dd8a117fd0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4033adc630effd3aebc705f3a93b8dd8a117fd0b/comments", "author": null, "committer": null, "parents": [{"sha": "c231c91e55dc682714c19682e79d06c191f4a30d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c231c91e55dc682714c19682e79d06c191f4a30d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c231c91e55dc682714c19682e79d06c191f4a30d"}], "stats": {"total": 120, "additions": 35, "deletions": 85}, "files": [{"sha": "cbc029a18da862e44429c062cb64e0b88a208aae", "filename": "libjava/java/net/natPlainDatagramSocketImpl.cc", "status": "modified", "additions": 28, "deletions": 33, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4033adc630effd3aebc705f3a93b8dd8a117fd0b/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4033adc630effd3aebc705f3a93b8dd8a117fd0b/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc?ref=4033adc630effd3aebc705f3a93b8dd8a117fd0b", "patch": "@@ -7,23 +7,15 @@ Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n details.  */\n \n #include <config.h>\n-\n #include <platform.h>\n \n #ifdef WIN32\n+\n #include <errno.h>\n #include <string.h>\n-#ifndef ENOPROTOOPT\n-#define ENOPROTOOPT 109\n-#endif\n-\n-#define NATIVE_CLOSE(s) closesocket (s)\n \n #else /* WIN32 */\n \n-#ifdef HAVE_SYS_SOCKET_H\n-#include <sys/socket.h>\n-#endif\n #ifdef HAVE_NETINET_IN_H\n #include <netinet/in.h>\n #endif\n@@ -33,29 +25,13 @@ details.  */\n #include <errno.h>\n #include <string.h>\n \n-#define NATIVE_CLOSE(s) ::close (s)\n-\n #endif /* WIN32 */\n \n #if HAVE_BSTRING_H\n // Needed for bzero, implicitly used by FD_ZERO on IRIX 5.2 \n #include <bstring.h>\n #endif\n \n-#ifndef DISABLE_JAVA_NET\n-// Avoid macro definitions of bind from system headers, e.g. on\n-// Solaris 7 with _XOPEN_SOURCE.  FIXME\n-static inline int\n-_Jv_bind (int fd, struct sockaddr *addr, int addrlen)\n-{\n-  return ::bind (fd, addr, addrlen);\n-}\n-#endif /* DISABLE_JAVA_NET */\n-\n-#ifdef bind\n-#undef bind\n-#endif\n-\n #include <gcj/cni.h>\n #include <java/io/IOException.h>\n #include <java/io/InterruptedIOException.h>\n@@ -212,7 +188,8 @@ union InAddr\n void\n java::net::PlainDatagramSocketImpl::create ()\n {\n-  int sock = ::socket (AF_INET, SOCK_DGRAM, 0);\n+  int sock = _Jv_socket (AF_INET, SOCK_DGRAM, 0);\n+\n   if (sock < 0)\n     {\n       char* strerr = strerror (errno);\n@@ -240,10 +217,12 @@ java::net::PlainDatagramSocketImpl::bind (jint lport,\n   if (len == 4)\n     {\n       u.address.sin_family = AF_INET;\n+\n       if (host != NULL)\n-\tmemcpy (&u.address.sin_addr, bytes, len);\n+        memcpy (&u.address.sin_addr, bytes, len);\n       else\n-\tu.address.sin_addr.s_addr = htonl (INADDR_ANY);\n+        u.address.sin_addr.s_addr = htonl (INADDR_ANY);\n+\n       len = sizeof (struct sockaddr_in);\n       u.address.sin_port = htons (lport);\n     }\n@@ -262,19 +241,23 @@ java::net::PlainDatagramSocketImpl::bind (jint lport,\n   if (_Jv_bind (fnum, ptr, len) == 0)\n     {\n       socklen_t addrlen = sizeof(u);\n+\n       if (lport != 0)\n         localPort = lport;\n       else if (::getsockname (fnum, (sockaddr*) &u, &addrlen) == 0)\n         localPort = ntohs (u.address.sin_port);\n       else\n         goto error;\n+\n       /* Allow broadcast by default. */\n       int broadcast = 1;\n       if (::setsockopt (fnum, SOL_SOCKET, SO_BROADCAST, (char *) &broadcast, \n                         sizeof (broadcast)) != 0)\n         goto error;\n+\n       return;\n     }\n+\n  error:\n   char* strerr = strerror (errno);\n   throw new java::net::BindException (JvNewStringUTF (strerr));\n@@ -329,8 +312,10 @@ java::net::PlainDatagramSocketImpl::peek (java::net::InetAddress *i)\n   return rport;\n  error:\n   char* strerr = strerror (errno);\n+\n   if (errno == ECONNREFUSED)\n     throw new PortUnreachableException (JvNewStringUTF (strerr));\n+\n   throw new java::io::IOException (JvNewStringUTF (strerr));\n }\n \n@@ -356,9 +341,9 @@ java::net::PlainDatagramSocketImpl::peekData(java::net::DatagramPacket *p)\n       tv.tv_usec = (timeout % 1000) * 1000;\n       int retval;\n       if ((retval = _Jv_select (fnum + 1, &rset, NULL, NULL, &tv)) < 0)\n-\tgoto error;\n+        goto error;\n       else if (retval == 0)\n-\tthrow new java::io::InterruptedIOException ();\n+        throw new java::io::InterruptedIOException ();\n     }\n #endif /* WIN32 */\n \n@@ -391,10 +376,13 @@ java::net::PlainDatagramSocketImpl::peekData(java::net::DatagramPacket *p)\n   p->setPort (rport);\n   p->setLength ((jint) retlen);\n   return rport;\n+\n  error:\n   char* strerr = strerror (errno);\n+\n   if (errno == ECONNREFUSED)\n     throw new PortUnreachableException (JvNewStringUTF (strerr));\n+\n   throw new java::io::IOException (JvNewStringUTF (strerr));\n }\n \n@@ -407,7 +395,7 @@ java::net::PlainDatagramSocketImpl::close ()\n \n   // The method isn't declared to throw anything, so we disregard\n   // the return value.\n-  NATIVE_CLOSE (fnum);\n+  _Jv_close (fnum);\n   fnum = -1;\n   timeout = 0;\n }\n@@ -446,8 +434,10 @@ java::net::PlainDatagramSocketImpl::send (java::net::DatagramPacket *p)\n     return;\n \n   char* strerr = strerror (errno);\n+\n   if (errno == ECONNREFUSED)\n     throw new PortUnreachableException (JvNewStringUTF (strerr));\n+\n   throw new java::io::IOException (JvNewStringUTF (strerr));\n }\n \n@@ -473,9 +463,9 @@ java::net::PlainDatagramSocketImpl::receive (java::net::DatagramPacket *p)\n       tv.tv_usec = (timeout % 1000) * 1000;\n       int retval;\n       if ((retval = _Jv_select (fnum + 1, &rset, NULL, NULL, &tv)) < 0)\n-\tgoto error;\n+        goto error;\n       else if (retval == 0)\n-\tthrow new java::io::InterruptedIOException ();\n+        throw new java::io::InterruptedIOException ();\n     }\n #endif /* WIN32 */\n \n@@ -508,10 +498,13 @@ java::net::PlainDatagramSocketImpl::receive (java::net::DatagramPacket *p)\n   p->setPort (rport);\n   p->setLength ((jint) retlen);\n   return;\n+\n  error:\n   char* strerr = strerror (errno);\n+\n   if (errno == ECONNREFUSED)\n     throw new PortUnreachableException (JvNewStringUTF (strerr));\n+\n   throw new java::io::IOException (JvNewStringUTF (strerr));\n }\n \n@@ -521,6 +514,7 @@ java::net::PlainDatagramSocketImpl::setTimeToLive (jint ttl)\n   // Assumes IPPROTO_IP rather than IPPROTO_IPV6 since socket created is IPv4.\n   char val = (char) ttl;\n   socklen_t val_len = sizeof(val);\n+\n   if (::setsockopt (fnum, IPPROTO_IP, IP_MULTICAST_TTL, &val, val_len) == 0)\n     return;\n \n@@ -534,6 +528,7 @@ java::net::PlainDatagramSocketImpl::getTimeToLive ()\n   // Assumes IPPROTO_IP rather than IPPROTO_IPV6 since socket created is IPv4.\n   char val;\n   socklen_t val_len = sizeof(val);\n+\n   if (::getsockopt (fnum, IPPROTO_IP, IP_MULTICAST_TTL, &val, &val_len) == 0)\n     return ((int) val) & 0xFF;\n "}, {"sha": "9cd0f3b9dff9bafb7070a2733bec1f4a0d683b75", "filename": "libjava/java/net/natPlainSocketImpl.cc", "status": "modified", "additions": 7, "deletions": 52, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4033adc630effd3aebc705f3a93b8dd8a117fd0b/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4033adc630effd3aebc705f3a93b8dd8a117fd0b/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc?ref=4033adc630effd3aebc705f3a93b8dd8a117fd0b", "patch": "@@ -10,7 +10,9 @@ details.  */\n #include <platform.h>\n \n #ifndef DISABLE_JAVA_NET\n+\n #ifdef WIN32\n+\n #include <windows.h>\n #include <winsock.h>\n #include <errno.h>\n@@ -20,8 +22,6 @@ details.  */\n #undef MIN_PRIORITY\n #undef FIONREAD\n \n-#define NATIVE_CLOSE(s) closesocket (s)\n-\n // These functions make the Win32 socket API look more POSIXy\n static inline int\n write(int s, void *buf, int len)\n@@ -36,11 +36,6 @@ read(int s, void *buf, int len)\n }\n \n // these errors cannot occur on Win32\n-#define ENOTCONN 0\n-#define ECONNRESET 0\n-#ifndef ENOPROTOOPT\n-#define ENOPROTOOPT 109\n-#endif\n #else /* WIN32 */\n \n #ifdef HAVE_SYS_IOCTL_H\n@@ -53,14 +48,11 @@ read(int s, void *buf, int len)\n #include <sys/filio.h>\n #endif\n \n-#include <sys/socket.h>\n #include <netinet/in.h>\n #include <netinet/tcp.h>\n #include <errno.h>\n #include <string.h>\n \n-#define NATIVE_CLOSE(s) ::close (s)\n-\n #endif /* WIN32 */\n #endif /* DISABLE_JAVA_NET */\n \n@@ -73,43 +65,6 @@ read(int s, void *buf, int len)\n typedef int socklen_t;\n #endif\n \n-#ifndef DISABLE_JAVA_NET\n-\n-// Avoid macro definitions of bind, connect from system headers, e.g. on\n-// Solaris 7 with _XOPEN_SOURCE.  FIXME\n-static inline int\n-_Jv_bind (int fd, struct sockaddr *addr, int addrlen)\n-{\n-  return ::bind (fd, addr, addrlen);\n-}\n-\n-#ifdef bind\n-#undef bind\n-#endif\n-\n-static inline int\n-_Jv_connect (int fd, struct sockaddr *addr, int addrlen)\n-{\n-  return ::connect (fd, addr, addrlen);\n-}\n-\n-#ifdef connect\n-#undef connect\n-#endif\n-\n-// Same problem with accept on Tru64 UNIX with _POSIX_PII_SOCKET\n-static inline int\n-_Jv_accept (int fd, struct sockaddr *addr, socklen_t *addrlen)\n-{\n-  return ::accept (fd, addr, addrlen);\n-}\n-\n-#ifdef accept\n-#undef accept\n-#endif\n-\n-#endif /* DISABLE_JAVA_NET */\n-\n #include <gcj/cni.h>\n #include <gcj/javaprims.h>\n #include <java/io/IOException.h>\n@@ -258,7 +213,7 @@ union SockAddr\n void\n java::net::PlainSocketImpl::create (jboolean stream)\n {\n-  int sock = ::socket (AF_INET, stream ? SOCK_STREAM : SOCK_DGRAM, 0);\n+  int sock = _Jv_socket (AF_INET, stream ? SOCK_STREAM : SOCK_DGRAM, 0);\n \n   if (sock < 0)\n     {\n@@ -495,7 +450,7 @@ java::net::PlainSocketImpl::close()\n   JvSynchronize sync (this);\n \n   // should we use shutdown here? how would that effect so_linger?\n-  int res = NATIVE_CLOSE (fnum);\n+  int res = _Jv_close (fnum);\n \n   if (res == -1)\n     {\n@@ -518,7 +473,7 @@ java::net::PlainSocketImpl::write(jint b)\n \n   while (r != 1)\n     {\n-      r = ::write (fnum, &d, 1);\n+      r = _Jv_write (fnum, &d, 1);\n       if (r == -1)\n         {\n           if (java::lang::Thread::interrupted())\n@@ -551,7 +506,7 @@ java::net::PlainSocketImpl::write(jbyteArray b, jint offset, jint len)\n \n   while (len > 0)\n     {\n-      int r = ::write (fnum, bytes, len);\n+      int r = _Jv_write (fnum, bytes, len);\n \n       if (r == -1)\n         {\n@@ -614,7 +569,7 @@ java::net::PlainSocketImpl::read(void)\n     }\n #endif /* WIN32 */\n \n-  int r = ::read (fnum, &b, 1);\n+  int r = _Jv_read (fnum, &b, 1);\n \n   if (r == 0)\n     return -1;"}]}