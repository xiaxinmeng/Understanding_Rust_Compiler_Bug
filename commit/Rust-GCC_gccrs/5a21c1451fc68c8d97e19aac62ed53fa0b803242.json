{"sha": "5a21c1451fc68c8d97e19aac62ed53fa0b803242", "node_id": "C_kwDOANBUbNoAKDVhMjFjMTQ1MWZjNjhjOGQ5N2UxOWFhYzYyZWQ1M2ZhMGI4MDMyNDI", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-16T13:35:24Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T09:09:21Z"}, "message": "arm: improve tests and fix vmlaldavaxq*\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (mve_vmlaldavaq_<supf><mode>)\n\t(mve_vmlaldavaxq_s<mode>, mve_vmlaldavaxq_p_<supf><mode>): Fix\n\tspacing vs tabs.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_s16.c: Improve tests.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_s32.c: Likewise.", "tree": {"sha": "f36ea43b667dc571c54720c5f0133664dc44e015", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f36ea43b667dc571c54720c5f0133664dc44e015"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a21c1451fc68c8d97e19aac62ed53fa0b803242", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a21c1451fc68c8d97e19aac62ed53fa0b803242", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a21c1451fc68c8d97e19aac62ed53fa0b803242", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a21c1451fc68c8d97e19aac62ed53fa0b803242/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69405ebb53323f5c32062b75ab7af304e7eb6656", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69405ebb53323f5c32062b75ab7af304e7eb6656", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69405ebb53323f5c32062b75ab7af304e7eb6656"}], "stats": {"total": 118, "additions": 91, "deletions": 27}, "files": [{"sha": "d2ffae6a425c817b2751f0ec57035d0df19dcfcc", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a21c1451fc68c8d97e19aac62ed53fa0b803242/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a21c1451fc68c8d97e19aac62ed53fa0b803242/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=5a21c1451fc68c8d97e19aac62ed53fa0b803242", "patch": "@@ -4163,7 +4163,7 @@\n \t VMLALDAVAQ))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vmlaldava.<supf>%#<V_sz_elem> %Q0, %R0, %q2, %q3\"\n+  \"vmlaldava.<supf>%#<V_sz_elem>\\t%Q0, %R0, %q2, %q3\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n \n@@ -4179,7 +4179,7 @@\n \t VMLALDAVAXQ_S))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vmlaldavax.s%#<V_sz_elem> %Q0, %R0, %q2, %q3\"\n+  \"vmlaldavax.s%#<V_sz_elem>\\t%Q0, %R0, %q2, %q3\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n \n@@ -6126,7 +6126,7 @@\n \t VMLALDAVAXQ_P))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vpst\\;vmlaldavaxt.<supf>%#<V_sz_elem> %Q0, %R0, %q2, %q3\"\n+  \"vpst\\;vmlaldavaxt.<supf>%#<V_sz_elem>\\t%Q0, %R0, %q2, %q3\"\n   [(set_attr \"type\" \"mve_move\")\n    (set_attr \"length\"\"8\")])\n "}, {"sha": "87f0354a63649f7dbf48e507da6dac27657198ab", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_s16.c", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a21c1451fc68c8d97e19aac62ed53fa0b803242/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a21c1451fc68c8d97e19aac62ed53fa0b803242/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_p_s16.c?ref=5a21c1451fc68c8d97e19aac62ed53fa0b803242", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmlaldavaxt.s16\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int64_t\n-foo (int64_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n+foo (int64_t add, int16x8_t m1, int16x8_t m2, mve_pred16_t p)\n {\n-  return vmlaldavaxq_p_s16 (a, b, c, p);\n+  return vmlaldavaxq_p_s16 (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vmlaldavaxt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmlaldavaxt.s16\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int64_t\n-foo1 (int64_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n+foo1 (int64_t add, int16x8_t m1, int16x8_t m2, mve_pred16_t p)\n {\n-  return vmlaldavaxq_p (a, b, c, p);\n+  return vmlaldavaxq_p (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vmlaldavaxt.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d26bf5b90afec8378d38fc17473030b98700a632", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_s32.c", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a21c1451fc68c8d97e19aac62ed53fa0b803242/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a21c1451fc68c8d97e19aac62ed53fa0b803242/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_p_s32.c?ref=5a21c1451fc68c8d97e19aac62ed53fa0b803242", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmlaldavaxt.s32\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int64_t\n-foo (int64_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+foo (int64_t add, int32x4_t m1, int32x4_t m2, mve_pred16_t p)\n {\n-  return vmlaldavaxq_p_s32 (a, b, c, p);\n+  return vmlaldavaxq_p_s32 (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vmlaldavaxt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvmlaldavaxt.s32\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int64_t\n-foo1 (int64_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+foo1 (int64_t add, int32x4_t m1, int32x4_t m2, mve_pred16_t p)\n {\n-  return vmlaldavaxq_p (a, b, c, p);\n+  return vmlaldavaxq_p (add, m1, m2, p);\n }\n \n-/* { dg-final { scan-assembler \"vmlaldavaxt.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3a37e7a58a9bc372dee250ce6795cc2970201e70", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavaxq_s16.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a21c1451fc68c8d97e19aac62ed53fa0b803242/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a21c1451fc68c8d97e19aac62ed53fa0b803242/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_s16.c?ref=5a21c1451fc68c8d97e19aac62ed53fa0b803242", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmlaldavax.s16\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int64_t\n-foo (int64_t a, int16x8_t b, int16x8_t c)\n+foo (int64_t add, int16x8_t m1, int16x8_t m2)\n {\n-  return vmlaldavaxq_s16 (a, b, c);\n+  return vmlaldavaxq_s16 (add, m1, m2);\n }\n \n-/* { dg-final { scan-assembler \"vmlaldavax.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmlaldavax.s16\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int64_t\n-foo1 (int64_t a, int16x8_t b, int16x8_t c)\n+foo1 (int64_t add, int16x8_t m1, int16x8_t m2)\n {\n-  return vmlaldavaxq (a, b, c);\n+  return vmlaldavaxq (add, m1, m2);\n }\n \n-/* { dg-final { scan-assembler \"vmlaldavax.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "155b8be70f07436809f87bc06128aaa00da6546c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavaxq_s32.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a21c1451fc68c8d97e19aac62ed53fa0b803242/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a21c1451fc68c8d97e19aac62ed53fa0b803242/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_s32.c?ref=5a21c1451fc68c8d97e19aac62ed53fa0b803242", "patch": "@@ -1,21 +1,33 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmlaldavax.s32\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int64_t\n-foo (int64_t a, int32x4_t b, int32x4_t c)\n+foo (int64_t add, int32x4_t m1, int32x4_t m2)\n {\n-  return vmlaldavaxq_s32 (a, b, c);\n+  return vmlaldavaxq_s32 (add, m1, m2);\n }\n \n-/* { dg-final { scan-assembler \"vmlaldavax.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmlaldavax.s32\t(?:ip|fp|r[0-9]+), (?:ip|fp|r[0-9]+), q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int64_t\n-foo1 (int64_t a, int32x4_t b, int32x4_t c)\n+foo1 (int64_t add, int32x4_t m1, int32x4_t m2)\n {\n-  return vmlaldavaxq (a, b, c);\n+  return vmlaldavaxq (add, m1, m2);\n }\n \n-/* { dg-final { scan-assembler \"vmlaldavax.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}