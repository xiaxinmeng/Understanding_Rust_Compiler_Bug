{"sha": "9b8d9ac39f3183ec65a452cc0bc9de7f546eab85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI4ZDlhYzM5ZjMxODNlYzY1YTQ1MmNjMGJjOWRlN2Y1NDZlYWI4NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-12-02T13:24:46Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-12-02T13:24:46Z"}, "message": "testsuite_io.h (class sync_buf): New, templatized version of sync_streambuf; add typedefs for streambuf/wstreambuf.\n\n2004-12-02  Paolo Carlini  <pcarlini@suse.de>\n\n\t* testsuite/testsuite_io.h (class sync_buf): New, templatized\n\tversion of sync_streambuf; add typedefs for streambuf/wstreambuf.\n\t(class fail_buf): Likewise, for fail_streambuf.\n\t(class fail_num_get): Templatize and add char/wchar_t typedefs.\n\t(class fail_num_put): Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/\n\texceptions_badbit_throw.cc: Use the latter.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/\n\texceptions_failbit_throw.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/char/\n\texceptions_badbit_throw.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/char/\n\texceptions_failbit_throw.cc: Likewise.\n\nFrom-SVN: r91635", "tree": {"sha": "cf5e401d029e9d9483a5eda4c357897bd09897d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf5e401d029e9d9483a5eda4c357897bd09897d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b8d9ac39f3183ec65a452cc0bc9de7f546eab85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b8d9ac39f3183ec65a452cc0bc9de7f546eab85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b8d9ac39f3183ec65a452cc0bc9de7f546eab85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b8d9ac39f3183ec65a452cc0bc9de7f546eab85/comments", "author": null, "committer": null, "parents": [{"sha": "1afffb0073735109c8ca6fa2780fb44db169b87a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1afffb0073735109c8ca6fa2780fb44db169b87a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1afffb0073735109c8ca6fa2780fb44db169b87a"}], "stats": {"total": 365, "additions": 208, "deletions": 157}, "files": [{"sha": "5ea2e14087c9791f5fc437210336907086b84266", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8d9ac39f3183ec65a452cc0bc9de7f546eab85/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8d9ac39f3183ec65a452cc0bc9de7f546eab85/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9b8d9ac39f3183ec65a452cc0bc9de7f546eab85", "patch": "@@ -1,3 +1,19 @@\n+2004-12-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* testsuite/testsuite_io.h (class sync_buf): New, templatized\n+\tversion of sync_streambuf; add typedefs for streambuf/wstreambuf.\n+\t(class fail_buf): Likewise, for fail_streambuf.\n+\t(class fail_num_get): Templatize and add char/wchar_t typedefs.\n+\t(class fail_num_put): Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/\n+\texceptions_badbit_throw.cc: Use the latter.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/\n+\texceptions_failbit_throw.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/char/\n+\texceptions_badbit_throw.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/char/\n+\texceptions_failbit_throw.cc: Likewise.\n+\n 2004-12-01  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/27_io/basic_istream/get/wchar_t/1.cc: New."}, {"sha": "5bb89ad5b4fe8323d1aea22802cc79ff709f1489", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/exceptions_badbit_throw.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8d9ac39f3183ec65a452cc0bc9de7f546eab85/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8d9ac39f3183ec65a452cc0bc9de7f546eab85/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fexceptions_badbit_throw.cc?ref=9b8d9ac39f3183ec65a452cc0bc9de7f546eab85", "patch": "@@ -1,6 +1,6 @@\n // 2003-03-08  Jerry Quinn  <jlquinn@optonline.net>\n \n-// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,7 +30,7 @@ void test_badbit()\n   using namespace std;\n   bool test __attribute__((unused)) = true;\n \n-  locale loc(locale::classic(), new __gnu_test::fail_num_get);\n+  locale loc(locale::classic(), new __gnu_test::fail_num_get_char);\n   istringstream stream(\"jaylib - champion sound\");\n   stream.imbue(loc);\n "}, {"sha": "3b208691dc30e5f5062f64be7777fd0c124f3430", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/exceptions_failbit_throw.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8d9ac39f3183ec65a452cc0bc9de7f546eab85/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fexceptions_failbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8d9ac39f3183ec65a452cc0bc9de7f546eab85/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fexceptions_failbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fexceptions_failbit_throw.cc?ref=9b8d9ac39f3183ec65a452cc0bc9de7f546eab85", "patch": "@@ -1,5 +1,4 @@\n-// Copyright (C) 2003\n-// Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,7 +36,7 @@ void test_failbit()\n   using namespace std;\n   bool test __attribute__((unused)) = true;\n \n-  locale loc(locale::classic(), new __gnu_test::fail_num_get);\n+  locale loc(locale::classic(), new __gnu_test::fail_num_get_char);\n   istringstream stream(\"jaylib - champion sound\");\n   stream.imbue(loc);\n "}, {"sha": "9fb887e246ff03b5c2d28e76b0d5d3639b44d9e0", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/char/exceptions_badbit_throw.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8d9ac39f3183ec65a452cc0bc9de7f546eab85/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8d9ac39f3183ec65a452cc0bc9de7f546eab85/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2Fexceptions_badbit_throw.cc?ref=9b8d9ac39f3183ec65a452cc0bc9de7f546eab85", "patch": "@@ -30,7 +30,7 @@ void test_badbit()\n   using namespace std;\n   bool test __attribute__((unused)) = true;\n \n-  locale loc(locale::classic(), new __gnu_test::fail_num_put);\n+  locale loc(locale::classic(), new __gnu_test::fail_num_put_char);\n   ostringstream stream(\"jaylib - champion sound\");\n   stream.imbue(loc);\n "}, {"sha": "88ed30e52e29102b17d4dc04df2703a36860ceeb", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/char/exceptions_failbit_throw.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8d9ac39f3183ec65a452cc0bc9de7f546eab85/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2Fexceptions_failbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8d9ac39f3183ec65a452cc0bc9de7f546eab85/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2Fexceptions_failbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2Fexceptions_failbit_throw.cc?ref=9b8d9ac39f3183ec65a452cc0bc9de7f546eab85", "patch": "@@ -37,7 +37,7 @@ void test_failbit()\n   using namespace std;\n   bool test __attribute__((unused)) = true;\n \n-  locale loc(locale::classic(), new __gnu_test::fail_num_put);\n+  locale loc(locale::classic(), new __gnu_test::fail_num_put_char);\n   ostringstream stream(\"jaylib - champion sound\");\n   stream.imbue(loc);\n "}, {"sha": "14f5cb4d47e1f6ae2df95a3fde2faf388bcb4da8", "filename": "libstdc++-v3/testsuite/testsuite_io.h", "status": "modified", "additions": 186, "deletions": 150, "changes": 336, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8d9ac39f3183ec65a452cc0bc9de7f546eab85/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8d9ac39f3183ec65a452cc0bc9de7f546eab85/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_io.h?ref=9b8d9ac39f3183ec65a452cc0bc9de7f546eab85", "patch": "@@ -103,189 +103,225 @@ namespace __gnu_test\n   // Used to check if basic_streambuf::pubsync() has been called.\n   // This is useful for checking if a function creates [io]stream::sentry\n   // objects, since the sentry constructors call tie()->flush().\n-  class sync_streambuf : public std::streambuf\n-  {\n-  private:\n-    bool m_sync_called;\n+  template<typename T>\n+    class sync_buf\n+    : public T\n+    {\n+    private:\n+      bool m_sync_called;\n     \n-  public:\n-    sync_streambuf()\n-    : m_sync_called(false)\n-    { }\n+    public:\n+      sync_buf()\n+      : m_sync_called(false)\n+      { }\n+      \n+      bool sync_called() const\n+      { return m_sync_called; }\n \n-    bool sync_called() const\n-    { return m_sync_called; }\n+    protected:\n+      int sync()\n+      {\n+\tm_sync_called = true;\n+\treturn 0;\n+      }\n+    };\n \n-  protected:\n-    int sync()\n-    {\n-      m_sync_called = true;\n-      return 0;\n-    }\n-  };\n+  typedef  sync_buf<std::streambuf>   sync_streambuf;\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  typedef  sync_buf<std::wstreambuf>  sync_wstreambuf;\n+#endif\n \n   // Throws on all overflow and underflow calls.\n   struct underflow_error: std::exception { };\n   struct overflow_error: std::exception { };\n   struct positioning_error: std::exception { };\n \n-  struct fail_streambuf : std::streambuf\n-  {\n-  private:\n-    char p[2];\n-\n-  public:\n-    fail_streambuf()\n+  template<typename T>\n+    struct fail_buf\n+    : public T\n     {\n-      p[0] = 's';\n-      p[1] = char();\n-      setg(p, p, p + 1); \n-    }\n+      typedef typename T::char_type   char_type;\n+      typedef typename T::int_type    int_type;\n+      typedef typename T::off_type    off_type;\n+      typedef typename T::pos_type    pos_type;\n \n-    virtual int_type underflow() \n-    {\n-      throw underflow_error();\n-      return -1;\n-    }\n-  \n-    virtual int_type uflow() \n-    {\n-      throw underflow_error();\n-      return -1;\n-    }\n+    private:\n+      char_type p[2];\n \n-    virtual int_type\n-    overflow(int_type)\n-    {\n-      throw overflow_error();\n-      return -1;\n-    }\n+    public:\n+      fail_buf()\n+      {\n+\tp[0] = char_type('s');\n+\tp[1] = char_type();\n+\tsetg(p, p, p + 1); \n+      }\n \n-    virtual pos_type \n-    seekoff(off_type, std::ios_base::seekdir, std::ios_base::openmode)\n-    { \n-      throw positioning_error();\n-      return pos_type(off_type(-1)); \n-    } \n-    \n-    virtual pos_type \n-    seekpos(pos_type, std::ios_base::openmode)\n-    { \n-      throw positioning_error();\n-      return pos_type(off_type(-1)); \n-    } \n+      virtual int_type underflow() \n+      {\n+\tthrow underflow_error();\n+\treturn -1;\n+      }\n+      \n+      virtual int_type uflow() \n+      {\n+\tthrow underflow_error();\n+\treturn -1;\n+      }\n+      \n+      virtual int_type\n+      overflow(int_type)\n+      {\n+\tthrow overflow_error();\n+\treturn -1;\n+      }\n+      \n+      virtual pos_type \n+      seekoff(off_type, std::ios_base::seekdir, std::ios_base::openmode)\n+      { \n+\tthrow positioning_error();\n+\treturn pos_type(off_type(-1)); \n+      } \n+      \n+      virtual pos_type \n+      seekpos(pos_type, std::ios_base::openmode)\n+      { \n+\tthrow positioning_error();\n+\treturn pos_type(off_type(-1)); \n+      } \n+      \n+      virtual int \n+      sync() \n+      { \n+\tthrow positioning_error();\n+\treturn 0; \n+      }\n+    };\n \n-    virtual int \n-    sync() \n-    { \n-      throw positioning_error();\n-      return 0; \n-    }\n-  };\n+  typedef  fail_buf<std::streambuf>   fail_streambuf;\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  typedef  fail_buf<std::wstreambuf>  fail_wstreambuf;\n+#endif\n \n   // Facets that throw an exception for every virtual function.\n   struct facet_error: std::exception { };\n \n-  class fail_num_get : public std::num_get<char>\n-  {\n-    typedef std::ios_base ios_base;\n-\n-  protected:\n-    iter_type \n-    do_get(iter_type a, iter_type, ios_base&, ios_base::iostate&, bool&) const\n-    { throw facet_error(); return iter_type(); }\n-\n-    virtual iter_type \n-    do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, long&) const\n-    { throw facet_error(); return iter_type(); }\n-\n-    virtual iter_type \n-    do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n-\t   unsigned short&) const\n-    { throw facet_error(); return iter_type(); }\n+  template<typename T>\n+    class fail_num_get\n+    : public std::num_get<T>\n+    {\n+      typedef std::ios_base ios_base;\n+      typedef typename std::num_get<T>::iter_type iter_type;\n \n-    virtual iter_type \n-    do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n-\t   unsigned int&) const\n-    { throw facet_error(); return iter_type(); }\n+    protected:\n+      iter_type \n+      do_get(iter_type a, iter_type, ios_base&, ios_base::iostate&, bool&) const\n+      { throw facet_error(); return iter_type(); }\n \n-    virtual iter_type \n-    do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n-\t   unsigned long&) const\n-    { throw facet_error(); return iter_type(); }\n+      virtual iter_type \n+      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, long&) const\n+      { throw facet_error(); return iter_type(); }\n+      \n+      virtual iter_type \n+      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+\t     unsigned short&) const\n+      { throw facet_error(); return iter_type(); }\n+      \n+      virtual iter_type \n+      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+\t     unsigned int&) const\n+      { throw facet_error(); return iter_type(); }\n+      \n+      virtual iter_type \n+      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+\t     unsigned long&) const\n+      { throw facet_error(); return iter_type(); }\n \n #ifdef _GLIBCXX_USE_LONG_LONG \n-    virtual iter_type \n-    do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n-\t   long long&) const\n-    { throw facet_error(); return iter_type(); }\n-\n-    virtual iter_type \n-    do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n-\t   unsigned long long&) const\n-    { throw facet_error(); return iter_type(); }\n+      virtual iter_type \n+      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+\t     long long&) const\n+      { throw facet_error(); return iter_type(); }\n+      \n+      virtual iter_type \n+      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+\t     unsigned long long&) const\n+      { throw facet_error(); return iter_type(); }\n #endif\n \n-    virtual iter_type \n-    do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n-\t   float&) const\n-    { throw facet_error(); return iter_type(); }\n-\n-    virtual iter_type \n-    do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n-\t   double&) const\n-    { throw facet_error(); return iter_type(); }\n-\n-    virtual iter_type \n-    do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n-\t   long double&) const\n-    { throw facet_error(); return iter_type(); }\n-\n-    virtual iter_type \n-    do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n-\t   void*&) const\n-    { throw facet_error(); return iter_type(); }\n-  };\n-\n-  class fail_num_put : public std::num_put<char>\n-  {\n-    typedef std::ios_base ios_base;\n+      virtual iter_type \n+      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+\t     float&) const\n+      { throw facet_error(); return iter_type(); }\n+      \n+      virtual iter_type \n+      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+\t     double&) const\n+      { throw facet_error(); return iter_type(); }\n+      \n+      virtual iter_type \n+      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+\t     long double&) const\n+      { throw facet_error(); return iter_type(); }\n+      \n+      virtual iter_type \n+      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+\t     void*&) const\n+      { throw facet_error(); return iter_type(); }\n+    };\n \n-  protected:\n-    iter_type \n-    do_put(iter_type, ios_base&, char_type __fill, bool __v) const\n-    { throw facet_error(); return iter_type(NULL); }\n+  typedef  fail_num_get<char>     fail_num_get_char;\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  typedef  fail_num_get<wchar_t>  fail_num_get_wchar_t;\n+#endif\n \n-    virtual iter_type \n-    do_put(iter_type, ios_base&, char_type __fill, long __v) const\n-    { throw facet_error(); return iter_type(NULL); }\n+  template<typename T>\n+    class fail_num_put\n+    : public std::num_put<T>\n+    {\n+      typedef std::ios_base ios_base;\n+      typedef typename std::num_put<T>::iter_type iter_type;\n+      typedef typename std::num_put<T>::char_type char_type;\n+\n+    protected:\n+      iter_type \n+      do_put(iter_type, ios_base&, char_type __fill, bool __v) const\n+      { throw facet_error(); return iter_type(NULL); }\n+      \n+      virtual iter_type \n+      do_put(iter_type, ios_base&, char_type __fill, long __v) const\n+      { throw facet_error(); return iter_type(NULL); }\n \n-    virtual iter_type \n-    do_put(iter_type, ios_base&, char_type __fill, unsigned long) const\n-    { throw facet_error(); return iter_type(NULL); }\n+      virtual iter_type \n+      do_put(iter_type, ios_base&, char_type __fill, unsigned long) const\n+      { throw facet_error(); return iter_type(NULL); }\n \n #ifdef _GLIBCXX_USE_LONG_LONG \n-    virtual iter_type \n-    do_put(iter_type, ios_base&, char_type __fill, long long __v) const\n-    { throw facet_error(); return iter_type(NULL); }\n+      virtual iter_type \n+      do_put(iter_type, ios_base&, char_type __fill, long long __v) const\n+      { throw facet_error(); return iter_type(NULL); }\n \n-    virtual iter_type \n-    do_put(iter_type, ios_base&, char_type __fill, unsigned long long) const\n-    { throw facet_error(); return iter_type(NULL); }\n+      virtual iter_type \n+      do_put(iter_type, ios_base&, char_type __fill, unsigned long long) const\n+      { throw facet_error(); return iter_type(NULL); }\n #endif\n+      \n+      virtual iter_type \n+      do_put(iter_type, ios_base&, char_type __fill, double __v) const\n+      { throw facet_error(); return iter_type(NULL); }\n \n-    virtual iter_type \n-    do_put(iter_type, ios_base&, char_type __fill, double __v) const\n-    { throw facet_error(); return iter_type(NULL); }\n-\n-    virtual iter_type \n-    do_put(iter_type, ios_base&, char_type __fill, long double __v) const\n-    { throw facet_error(); return iter_type(NULL); }\n+      virtual iter_type \n+      do_put(iter_type, ios_base&, char_type __fill, long double __v) const\n+      { throw facet_error(); return iter_type(NULL); }\n+      \n+      virtual iter_type \n+      do_put(iter_type, ios_base&, char_type __fill, const void* __v) const\n+      { throw facet_error(); return iter_type(NULL); }\n+    };\n \n-    virtual iter_type \n-    do_put(iter_type, ios_base&, char_type __fill, const void* __v) const\n-    { throw facet_error(); return iter_type(NULL); }\n-  };\n+  typedef  fail_num_put<char>     fail_num_put_char;\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  typedef  fail_num_put<wchar_t>  fail_num_put_wchar_t;\n+#endif\n }; // namespace __gnu_test\n \n #endif // _GLIBCXX_TESTSUITE_IO_H"}]}