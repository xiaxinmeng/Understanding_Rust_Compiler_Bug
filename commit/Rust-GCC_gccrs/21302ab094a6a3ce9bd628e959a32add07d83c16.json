{"sha": "21302ab094a6a3ce9bd628e959a32add07d83c16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEzMDJhYjA5NGE2YTNjZTliZDYyOGU5NTlhMzJhZGQwN2Q4M2MxNg==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-02-01T00:21:49Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-02-01T00:21:49Z"}, "message": "(singlemove_string): Make case with SFmode CONST_DOUBLE abort.\n\n(print_operand): #ifdef out CONST_DOUBLE cases.\n\nFrom-SVN: r8847", "tree": {"sha": "67d45a905ab7702d9f127c720962cc9e64aae7f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67d45a905ab7702d9f127c720962cc9e64aae7f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21302ab094a6a3ce9bd628e959a32add07d83c16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21302ab094a6a3ce9bd628e959a32add07d83c16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21302ab094a6a3ce9bd628e959a32add07d83c16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21302ab094a6a3ce9bd628e959a32add07d83c16/comments", "author": null, "committer": null, "parents": [{"sha": "925cf581e516ac9cc12edec9aae6fd93dc4649f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/925cf581e516ac9cc12edec9aae6fd93dc4649f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/925cf581e516ac9cc12edec9aae6fd93dc4649f0"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "15054c51549738adaba7702b486b0d416b9cf898", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21302ab094a6a3ce9bd628e959a32add07d83c16/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21302ab094a6a3ce9bd628e959a32add07d83c16/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=21302ab094a6a3ce9bd628e959a32add07d83c16", "patch": "@@ -1046,6 +1046,11 @@ singlemove_string (operands)\n   else if (GET_CODE (operands[1]) == CONST_DOUBLE\n \t   && GET_MODE (operands[1]) == SFmode)\n     {\n+      abort ();\n+#if 0\n+      /* Switched off since it is wrong, and should never really be used\n+\t anyway.  If we want to switch this on again, we have to make it use\n+\t the REAL_ARITHMETIC stuff.  */\n       int i;\n       union real_extract u;\n       union float_extract { float f; int i; } v;\n@@ -1072,6 +1077,7 @@ singlemove_string (operands)\n \t}\n       else\n \treturn \"ldil L'%1,%0\\n\\tldo R'%1(%0),%0\";\n+#endif\n     }\n \n   else if (GET_CODE (operands[1]) == CONST_INT)\n@@ -3091,6 +3097,12 @@ print_operand (file, x, code)\n \t  break;\n \t}\n     }\n+#if 0\n+  /* The code here is completely wrong.  It attempts to extract parts of\n+     a CONST_DOUBLE which is wrong since REAL_ARITHMETIC is defined, and it\n+     extracts the wrong indices (0 instead of 2 and 1 instead of 3) using\n+     the wrong macro (XINT instead of XWINT).\n+     Just disable it for now, since the code will never be used anyway!  */\n   else if (GET_CODE (x) == CONST_DOUBLE && GET_MODE (x) == SFmode)\n     {\n       union { double d; int i[2]; } u;\n@@ -3108,6 +3120,7 @@ print_operand (file, x, code)\n       u.i[0] = XINT (x, 0); u.i[1] = XINT (x, 1);\n       fprintf (file, \"0r%.20g\", u.d);\n     }\n+#endif\n   else\n     output_addr_const (file, x);\n }"}]}