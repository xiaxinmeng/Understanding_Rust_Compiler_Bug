{"sha": "2b854e70a6cdbdc966c2299820dda0fb51e0ac30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI4NTRlNzBhNmNkYmRjOTY2YzIyOTk4MjBkZGEwZmI1MWUwYWMzMA==", "commit": {"author": {"name": "Jan Beulich", "email": "jbeulich@novell.com", "date": "2008-02-25T13:15:16Z"}, "committer": {"name": "Jan Beulich", "email": "jbeulich@gcc.gnu.org", "date": "2008-02-25T13:15:16Z"}, "message": "acinclude.m4: Also check for EIDRM and ETXTBSY.\n\n2008-02-25  Jan Beulich  <jbeulich@novell.com>\n\n\t* acinclude.m4: Also check for EIDRM and ETXTBSY.\n\t* configure: Re-generate.\n\t* config/os/generic/error_constants.h (namespace posix_error):\n\tAlso wrap uses of EIDRM and ETXTBSY in conditionals.\n\t* testsuite/19_diagnostics/headers/system_error/types_std_c++0x.cc:\n\tLikewise.\n\nFrom-SVN: r132622", "tree": {"sha": "f8822aed0af02051393fd319e00d42637baad098", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8822aed0af02051393fd319e00d42637baad098"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b854e70a6cdbdc966c2299820dda0fb51e0ac30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b854e70a6cdbdc966c2299820dda0fb51e0ac30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b854e70a6cdbdc966c2299820dda0fb51e0ac30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b854e70a6cdbdc966c2299820dda0fb51e0ac30/comments", "author": null, "committer": null, "parents": [{"sha": "79ec5b5e7e109a49a00685f1d92b4b11ee68dece", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ec5b5e7e109a49a00685f1d92b4b11ee68dece", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79ec5b5e7e109a49a00685f1d92b4b11ee68dece"}], "stats": {"total": 171, "additions": 171, "deletions": 0}, "files": [{"sha": "73335760efe62a8039b6e3b75da2d349a7ab3195", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b854e70a6cdbdc966c2299820dda0fb51e0ac30/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b854e70a6cdbdc966c2299820dda0fb51e0ac30/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2b854e70a6cdbdc966c2299820dda0fb51e0ac30", "patch": "@@ -1,3 +1,12 @@\n+2008-02-25  Jan Beulich  <jbeulich@novell.com>\n+\n+\t* acinclude.m4: Also check for EIDRM and ETXTBSY.\n+\t* configure: Re-generate.\n+\t* config/os/generic/error_constants.h (namespace posix_error):\n+\tAlso wrap uses of EIDRM and ETXTBSY in conditionals.\n+\t* testsuite/19_diagnostics/headers/system_error/types_std_c++0x.cc:\n+\tLikewise.\n+\n 2008-02-20  Jason Merrill  <jason@redhat.com>\n \n \t* include/bits/c++config: Use 'inline namespace' instead of "}, {"sha": "45c8ffd765b8f8815ae05ec0333e4a6020934459", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b854e70a6cdbdc966c2299820dda0fb51e0ac30/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b854e70a6cdbdc966c2299820dda0fb51e0ac30/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=2b854e70a6cdbdc966c2299820dda0fb51e0ac30", "patch": "@@ -1440,6 +1440,26 @@ AC_DEFUN([GLIBCXX_CHECK_SYSTEM_ERROR], [\n   if test x\"$ac_system_error_13\" = x\"yes\"; then\n     AC_DEFINE(HAVE_ENOTSUP, 1, [Define if ENOTSUP exists.])\n   fi\n+\n+  AC_MSG_CHECKING([for EIDRM])\n+  AC_CACHE_VAL(ac_system_error_14, [\n+  AC_TRY_COMPILE([#include <errno.h>], [ int i = EIDRM; ],\n+             [ac_system_error_14=yes], [ac_system_error_14=no])\n+  ])\n+  AC_MSG_RESULT($ac_system_error_14)\n+  if test x\"$ac_system_error_14\" = x\"yes\"; then\n+    AC_DEFINE(HAVE_EIDRM, 1, [Define if EIDRM exists.])\n+  fi\n+\n+  AC_MSG_CHECKING([for ETXTBSY])\n+  AC_CACHE_VAL(ac_system_error_15, [\n+  AC_TRY_COMPILE([#include <errno.h>], [ int i = ETXTBSY; ],\n+             [ac_system_error_15=yes], [ac_system_error_15=no])\n+  ])\n+  AC_MSG_RESULT($ac_system_error_15)\n+  if test x\"$ac_system_error_15\" = x\"yes\"; then\n+    AC_DEFINE(HAVE_ETXTBSY, 1, [Define if ETXTBSY exists.])\n+  fi\n ])\n \n dnl"}, {"sha": "644d111b70b1ba8ca4adab7f5a2c61f4b824d886", "filename": "libstdc++-v3/config/os/generic/error_constants.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b854e70a6cdbdc966c2299820dda0fb51e0ac30/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ferror_constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b854e70a6cdbdc966c2299820dda0fb51e0ac30/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ferror_constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Ferror_constants.h?ref=2b854e70a6cdbdc966c2299820dda0fb51e0ac30", "patch": "@@ -72,7 +72,11 @@ namespace posix_error\n       filename_too_long = \t\t\tENAMETOOLONG,\n       function_not_supported = \t\t\tENOSYS,\n       host_unreachable = \t\t\tEHOSTUNREACH,\n+\n+#ifdef _GLIBCXX_HAVE_EIDRM\n       identifier_removed = \t\t\tEIDRM,\n+#endif\n+\n       illegal_byte_sequence = \t\t\tEILSEQ,\n       inappropriate_io_control_operation = \tENOTTY,\n       interrupted = \t\t\t\tEINTR,\n@@ -156,7 +160,10 @@ namespace posix_error\n       stream_timeout = \t\t\t\tETIME,\n #endif\n \n+#ifdef _GLIBCXX_HAVE_ETXTBSY\n       text_file_busy = \t\t\t\tETXTBSY,\n+#endif\n+\n       timed_out = \t\t\t\tETIMEDOUT,\n       too_many_files_open_in_system = \t\tENFILE,\n       too_many_files_open = \t\t\tEMFILE,"}, {"sha": "b95feb423219b28f67facb6ee845c87f8cd6a4cb", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b854e70a6cdbdc966c2299820dda0fb51e0ac30/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b854e70a6cdbdc966c2299820dda0fb51e0ac30/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=2b854e70a6cdbdc966c2299820dda0fb51e0ac30", "patch": "@@ -17806,6 +17806,134 @@ _ACEOF\n \n   fi\n \n+  echo \"$as_me:$LINENO: checking for EIDRM\" >&5\n+echo $ECHO_N \"checking for EIDRM... $ECHO_C\" >&6\n+  if test \"${ac_system_error_14+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <errno.h>\n+int\n+main ()\n+{\n+ int i = EIDRM;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_system_error_14=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_system_error_14=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+\n+  echo \"$as_me:$LINENO: result: $ac_system_error_14\" >&5\n+echo \"${ECHO_T}$ac_system_error_14\" >&6\n+  if test x\"$ac_system_error_14\" = x\"yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_EIDRM 1\n+_ACEOF\n+\n+  fi\n+\n+  echo \"$as_me:$LINENO: checking for ETXTBSY\" >&5\n+echo $ECHO_N \"checking for ETXTBSY... $ECHO_C\" >&6\n+  if test \"${ac_system_error_15+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <errno.h>\n+int\n+main ()\n+{\n+ int i = ETXTBSY;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_system_error_15=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_system_error_15=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+\n+  echo \"$as_me:$LINENO: result: $ac_system_error_15\" >&5\n+echo \"${ECHO_T}$ac_system_error_15\" >&6\n+  if test x\"$ac_system_error_15\" = x\"yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_ETXTBSY 1\n+_ACEOF\n+\n+  fi\n+\n \n # No surprises, no surprises...\n "}, {"sha": "00a24572fbdc2bcd4dc8fe1f2a134614c9cd267f", "filename": "libstdc++-v3/testsuite/19_diagnostics/headers/system_error/types_std_c++0x.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b854e70a6cdbdc966c2299820dda0fb51e0ac30/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b854e70a6cdbdc966c2299820dda0fb51e0ac30/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2Ftypes_std_c%2B%2B0x.cc?ref=2b854e70a6cdbdc966c2299820dda0fb51e0ac30", "patch": "@@ -57,7 +57,11 @@ namespace gnu\n   using std::posix_error::filename_too_long;\n   using std::posix_error::function_not_supported; \n   using std::posix_error::host_unreachable; \n+\n+#ifdef _GLIBCXX_HAVE_EIDRM\n   using std::posix_error::identifier_removed;\n+#endif\n+\n   using std::posix_error::illegal_byte_sequence; \n   using std::posix_error::inappropriate_io_control_operation; \n   using std::posix_error::interrupted; \n@@ -139,7 +143,10 @@ namespace gnu\n   using std::posix_error::stream_timeout; \n #endif\n \n+#ifdef _GLIBCXX_HAVE_ETXTBSY\n   using std::posix_error::text_file_busy; \n+#endif\n+\n   using std::posix_error::timed_out; \n   using std::posix_error::too_many_files_open_in_system; \n   using std::posix_error::too_many_files_open; "}]}