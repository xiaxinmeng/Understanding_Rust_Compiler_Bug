{"sha": "5fbcc0ed20ecdfd980106ac22607c5baed60d234", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZiY2MwZWQyMGVjZGZkOTgwMTA2YWMyMjYwN2M1YmFlZDYwZDIzNA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-07-14T14:21:07Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-07-14T14:21:07Z"}, "message": "gimple-fold.c (fold_gimple_assign): Remove operand swapping.\n\n2011-07-14  Richard Guenther  <rguenther@suse.de>\n\n\t* gimple-fold.c (fold_gimple_assign): Remove operand swapping.\n\t(fold_stmt_1): Do it here directly on gimple and as a first thing.\n\nFrom-SVN: r176273", "tree": {"sha": "e18b92ce0412ea9f3b2a1a1f187207e97fd6b8ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e18b92ce0412ea9f3b2a1a1f187207e97fd6b8ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fbcc0ed20ecdfd980106ac22607c5baed60d234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fbcc0ed20ecdfd980106ac22607c5baed60d234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fbcc0ed20ecdfd980106ac22607c5baed60d234", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fbcc0ed20ecdfd980106ac22607c5baed60d234/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fbf3fee2b959926c4df4295eba74ea144f0c6a00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbf3fee2b959926c4df4295eba74ea144f0c6a00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbf3fee2b959926c4df4295eba74ea144f0c6a00"}], "stats": {"total": 50, "additions": 23, "deletions": 27}, "files": [{"sha": "869214d5836f48388e5c9ea8f7fb54bc1bf50a9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fbcc0ed20ecdfd980106ac22607c5baed60d234/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fbcc0ed20ecdfd980106ac22607c5baed60d234/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5fbcc0ed20ecdfd980106ac22607c5baed60d234", "patch": "@@ -1,3 +1,8 @@\n+2011-07-14  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gimple-fold.c (fold_gimple_assign): Remove operand swapping.\n+\t(fold_stmt_1): Do it here directly on gimple and as a first thing.\n+\n 2011-07-14  Richard Guenther  <rguenther@suse.de>\n \n \t* fold-const.c (fold_binary_loc): Convert the !bool_var result,"}, {"sha": "bf00a0f04604013a2c3205b04fd9b1bcf4f2993d", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fbcc0ed20ecdfd980106ac22607c5baed60d234/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fbcc0ed20ecdfd980106ac22607c5baed60d234/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=5fbcc0ed20ecdfd980106ac22607c5baed60d234", "patch": "@@ -817,26 +817,15 @@ fold_gimple_assign (gimple_stmt_iterator *si)\n \n       if (!result)\n         result = fold_binary_loc (loc, subcode,\n-                              TREE_TYPE (gimple_assign_lhs (stmt)),\n-                              gimple_assign_rhs1 (stmt),\n-                              gimple_assign_rhs2 (stmt));\n+\t\t\t\t  TREE_TYPE (gimple_assign_lhs (stmt)),\n+\t\t\t\t  gimple_assign_rhs1 (stmt),\n+\t\t\t\t  gimple_assign_rhs2 (stmt));\n \n       if (result)\n         {\n           STRIP_USELESS_TYPE_CONVERSION (result);\n           if (valid_gimple_rhs_p (result))\n \t    return result;\n-\n-\t  /* Fold might have produced non-GIMPLE, so if we trust it blindly\n-\t     we lose canonicalization opportunities.  Do not go again\n-\t     through fold here though, or the same non-GIMPLE will be\n-\t     produced.  */\n-          if (commutative_tree_code (subcode)\n-              && tree_swap_operands_p (gimple_assign_rhs1 (stmt),\n-                                       gimple_assign_rhs2 (stmt), false))\n-            return build2 (subcode, TREE_TYPE (gimple_assign_lhs (stmt)),\n-                           gimple_assign_rhs2 (stmt),\n-                           gimple_assign_rhs1 (stmt));\n         }\n       break;\n \n@@ -852,18 +841,6 @@ fold_gimple_assign (gimple_stmt_iterator *si)\n           STRIP_USELESS_TYPE_CONVERSION (result);\n           if (valid_gimple_rhs_p (result))\n \t    return result;\n-\n-\t  /* Fold might have produced non-GIMPLE, so if we trust it blindly\n-\t     we lose canonicalization opportunities.  Do not go again\n-\t     through fold here though, or the same non-GIMPLE will be\n-\t     produced.  */\n-          if (commutative_ternary_tree_code (subcode)\n-              && tree_swap_operands_p (gimple_assign_rhs1 (stmt),\n-                                       gimple_assign_rhs2 (stmt), false))\n-            return build3 (subcode, TREE_TYPE (gimple_assign_lhs (stmt)),\n-\t\t\t   gimple_assign_rhs2 (stmt),\n-\t\t\t   gimple_assign_rhs1 (stmt),\n-\t\t\t   gimple_assign_rhs3 (stmt));\n         }\n       break;\n \n@@ -1576,8 +1553,22 @@ fold_stmt_1 (gimple_stmt_iterator *gsi, bool inplace)\n     case GIMPLE_ASSIGN:\n       {\n \tunsigned old_num_ops = gimple_num_ops (stmt);\n-\ttree new_rhs = fold_gimple_assign (gsi);\n+\tenum tree_code subcode = gimple_assign_rhs_code (stmt);\n \ttree lhs = gimple_assign_lhs (stmt);\n+\ttree new_rhs;\n+\t/* First canonicalize operand order.  This avoids building new\n+\t   trees if this is the only thing fold would later do.  */\n+\tif ((commutative_tree_code (subcode)\n+\t     || commutative_ternary_tree_code (subcode))\n+\t    && tree_swap_operands_p (gimple_assign_rhs1 (stmt),\n+\t\t\t\t     gimple_assign_rhs2 (stmt), false))\n+\t  {\n+\t    tree tem = gimple_assign_rhs1 (stmt);\n+\t    gimple_assign_set_rhs1 (stmt, gimple_assign_rhs2 (stmt));\n+\t    gimple_assign_set_rhs2 (stmt, tem);\n+\t    changed = true;\n+\t  }\n+\tnew_rhs = fold_gimple_assign (gsi);\n \tif (new_rhs\n \t    && !useless_type_conversion_p (TREE_TYPE (lhs),\n \t\t\t\t\t   TREE_TYPE (new_rhs)))"}]}