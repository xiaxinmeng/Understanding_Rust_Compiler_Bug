{"sha": "6a2cd809f7bb5e6ab8829981c40c89a575bdc95c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEyY2Q4MDlmN2JiNWU2YWI4ODI5OTgxYzQwYzg5YTU3NWJkYzk1Yw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-23T18:39:19Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-23T18:39:19Z"}, "message": "compiler: Evaluate array range expression once before iteration.\n\nFixes issue 34.\n\nFrom-SVN: r219045", "tree": {"sha": "c2ae27cdc87fc51718ccdaf923daa4b5b6f03866", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2ae27cdc87fc51718ccdaf923daa4b5b6f03866"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a2cd809f7bb5e6ab8829981c40c89a575bdc95c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a2cd809f7bb5e6ab8829981c40c89a575bdc95c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a2cd809f7bb5e6ab8829981c40c89a575bdc95c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a2cd809f7bb5e6ab8829981c40c89a575bdc95c/comments", "author": null, "committer": null, "parents": [{"sha": "34b42fb0ea1bdcdc0eb9dc5d90eeb780fa017923", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34b42fb0ea1bdcdc0eb9dc5d90eeb780fa017923", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34b42fb0ea1bdcdc0eb9dc5d90eeb780fa017923"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "7aa397f487dcba2f2bc3104cd11df69edc7d2491", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2cd809f7bb5e6ab8829981c40c89a575bdc95c/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2cd809f7bb5e6ab8829981c40c89a575bdc95c/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=6a2cd809f7bb5e6ab8829981c40c89a575bdc95c", "patch": "@@ -5558,8 +5558,9 @@ For_range_statement::lower_range_array(Gogo* gogo,\n \n   // The loop we generate:\n   //   len_temp := len(range)\n+  //   range_temp := range\n   //   for index_temp = 0; index_temp < len_temp; index_temp++ {\n-  //           value_temp = range[index_temp]\n+  //           value_temp = range_temp[index_temp]\n   //           index = index_temp\n   //           value = value_temp\n   //           original body\n@@ -5573,9 +5574,11 @@ For_range_statement::lower_range_array(Gogo* gogo,\n   Block* init = new Block(enclosing, loc);\n \n   Expression* ref = this->make_range_ref(range_object, range_temp, loc);\n+  range_temp = Statement::make_temporary(NULL, ref, loc);\n   Expression* len_call = this->call_builtin(gogo, \"len\", ref, loc);\n   Temporary_statement* len_temp = Statement::make_temporary(index_temp->type(),\n \t\t\t\t\t\t\t    len_call, loc);\n+  init->add_statement(range_temp);\n   init->add_statement(len_temp);\n \n   Expression* zexpr = Expression::make_integer_ul(0, NULL, loc);\n@@ -5605,7 +5608,7 @@ For_range_statement::lower_range_array(Gogo* gogo,\n     {\n       iter_init = new Block(body_block, loc);\n \n-      ref = this->make_range_ref(range_object, range_temp, loc);\n+      ref = Expression::make_temporary_reference(range_temp, loc);\n       Expression* ref2 = Expression::make_temporary_reference(index_temp, loc);\n       Expression* index = Expression::make_index(ref, ref2, NULL, NULL, loc);\n "}]}