{"sha": "e88509188632d76288d391d1407157f1bff22ade", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg4NTA5MTg4NjMyZDc2Mjg4ZDM5MWQxNDA3MTU3ZjFiZmYyMmFkZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2014-12-24T16:22:51Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-12-24T16:22:51Z"}, "message": "xasprintf.c: New file.\n\nlibiberty/ChangeLog:\n\n\t* xasprintf.c: New file.\n\t* Makefile.in (CFILES): Add xasprintf.c.\n\t(REQUIRED_OFILES): Add xasprintf.$(objext).\n\t(xasprintf.$(objext)): New target.\n\t* functions.texi: Regenerate.\n\ninclude/ChangeLog:\n\n\t* libiberty.h (xasprintf): Declare.\n\ngcc/ChangeLog:\n\n\t* gengtype.h (xasprintf): Remove declaration.\n\t* gengtype.c (xasprintf): Remove.\n\n\nCo-Authored-By: Ben Elliston <bje@au.ibm.com>\nCo-Authored-By: Manuel L\u00f3pez-Ib\u00e1\u00f1ez <manu@gcc.gnu.org>\n\nFrom-SVN: r219060", "tree": {"sha": "e21bcbff0304890e7c01194049ad076d6a2a28eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e21bcbff0304890e7c01194049ad076d6a2a28eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e88509188632d76288d391d1407157f1bff22ade", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e88509188632d76288d391d1407157f1bff22ade", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e88509188632d76288d391d1407157f1bff22ade", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e88509188632d76288d391d1407157f1bff22ade/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "369695b99d6eb0382c32ad442a55a5d3e656069a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/369695b99d6eb0382c32ad442a55a5d3e656069a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/369695b99d6eb0382c32ad442a55a5d3e656069a"}], "stats": {"total": 126, "additions": 101, "deletions": 25}, "files": [{"sha": "d2870d6b21dc0e6f985cd9de4ac25d2dc543b6a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88509188632d76288d391d1407157f1bff22ade/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88509188632d76288d391d1407157f1bff22ade/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e88509188632d76288d391d1407157f1bff22ade", "patch": "@@ -1,3 +1,8 @@\n+2014-12-24  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gengtype.h (xasprintf): Remove declaration.\n+\t* gengtype.c (xasprintf): Remove.\n+\n 2014-12-24  Nick Clifton  <nickc@redhat.com>\n \n \tPR target/64160"}, {"sha": "e87bea0ab4665e63116f9e34a211335d5d14829a", "filename": "gcc/gengtype.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88509188632d76288d391d1407157f1bff22ade/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88509188632d76288d391d1407157f1bff22ade/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=e88509188632d76288d391d1407157f1bff22ade", "patch": "@@ -119,23 +119,6 @@ error_at_line (const struct fileloc *pos, const char *msg, ...)\n \n   va_end (ap);\n }\n-\n-/* asprintf, but produces fatal message on out-of-memory.  */\n-char *\n-xasprintf (const char *format, ...)\n-{\n-  int n;\n-  char *result;\n-  va_list ap;\n-\n-  va_start (ap, format);\n-  n = vasprintf (&result, format, ap);\n-  if (result == NULL || n < 0)\n-    fatal (\"out of memory\");\n-  va_end (ap);\n-\n-  return result;\n-}\n \f\n /* Locate the ultimate base class of struct S.  */\n "}, {"sha": "3da57e844405e8f4516557a8e12bd5d7121d8b23", "filename": "gcc/gengtype.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88509188632d76288d391d1407157f1bff22ade/gcc%2Fgengtype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88509188632d76288d391d1407157f1bff22ade/gcc%2Fgengtype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.h?ref=e88509188632d76288d391d1407157f1bff22ade", "patch": "@@ -418,9 +418,6 @@ void write_state (const char* path);\n extern void error_at_line\n (const struct fileloc *pos, const char *msg, ...) ATTRIBUTE_PRINTF_2;\n \n-/* Like asprintf, but calls fatal() on out of memory.  */\n-extern char *xasprintf (const char *, ...) ATTRIBUTE_PRINTF_1;\n-\n /* Constructor routines for types.  */\n extern void do_typedef (const char *s, type_p t, struct fileloc *pos);\n extern void do_scalar_typedef (const char *s, struct fileloc *pos);"}, {"sha": "dbf2554238d7278a3556c697c75e8ffa3f338f54", "filename": "include/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88509188632d76288d391d1407157f1bff22ade/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88509188632d76288d391d1407157f1bff22ade/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=e88509188632d76288d391d1407157f1bff22ade", "patch": "@@ -1,3 +1,9 @@\n+2014-12-24  Uros Bizjak  <ubizjak@gmail.com>\n+\t    Ben Elliston  <bje@au.ibm.com>\n+\t    Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* libiberty.h (xasprintf): Declare.\n+\n 2014-12-11  Uros Bizjak  <ubizjak@gmail.com>\n             Ben Elliston  <bje@au.ibm.com>\n             Manuel Lopez-Ibanez  <manu@gcc.gnu.org>"}, {"sha": "aa0d92c8c20bba3c2e76fc12dabca3ca5bba265a", "filename": "include/libiberty.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88509188632d76288d391d1407157f1bff22ade/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88509188632d76288d391d1407157f1bff22ade/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=e88509188632d76288d391d1407157f1bff22ade", "patch": "@@ -629,6 +629,11 @@ extern int pwait (int, int *, int);\n extern int asprintf (char **, const char *, ...) ATTRIBUTE_PRINTF_2;\n #endif\n \n+/* Like asprintf but allocates memory without fail. This works like\n+   xmalloc.  */\n+\n+extern char *xasprintf (const char *, ...) ATTRIBUTE_MALLOC ATTRIBUTE_PRINTF_1;\n+\n #if !HAVE_DECL_VASPRINTF\n /* Like vsprintf but provides a pointer to malloc'd storage, which\n    must be freed by the caller.  */"}, {"sha": "ac2387552edfc897fceec66c1cbf576ea63bf834", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88509188632d76288d391d1407157f1bff22ade/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88509188632d76288d391d1407157f1bff22ade/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=e88509188632d76288d391d1407157f1bff22ade", "patch": "@@ -1,3 +1,13 @@\n+2014-12-24  Uros Bizjak  <ubizjak@gmail.com>\n+\t    Ben Elliston  <bje@au.ibm.com>\n+\t    Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* xasprintf.c: New file.\n+\t* Makefile.in (CFILES): Add xasprintf.c.\n+\t(REQUIRED_OFILES): Add xasprintf.$(objext).\n+\t(xasprintf.$(objext)): New target.\n+\t* functions.texi: Regenerate.\n+\n 2014-12-11  Uros Bizjak  <ubizjak@gmail.com>\n             Ben Elliston  <bje@au.ibm.com>\n             Manuel Lopez-Ibanez  <manu@gcc.gnu.org>"}, {"sha": "f06cc69a973bcf39235febce84a2d7fad7130eed", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88509188632d76288d391d1407157f1bff22ade/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88509188632d76288d391d1407157f1bff22ade/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=e88509188632d76288d391d1407157f1bff22ade", "patch": "@@ -158,8 +158,8 @@ CFILES = alloca.c argv.c asprintf.c atexit.c\t\t\t\t\\\n \tvasprintf.c vfork.c vfprintf.c vprintf.c vprintf-support.c\t\\\n \t vsnprintf.c vsprintf.c\t\t\t\t\t\t\\\n \twaitpid.c\t\t\t\t\t\t\t\\\n-\txatexit.c xexit.c xmalloc.c xmemdup.c xstrdup.c xstrerror.c\t\\\n-\t xstrndup.c xvasprintf.c\n+\txasprintf.c xatexit.c xexit.c xmalloc.c xmemdup.c xstrdup.c\t\\\n+\t xstrerror.c xstrndup.c xvasprintf.c\n \n # These are always included in the library.  The first four are listed\n # first and by compile time to optimize parallel builds.\n@@ -190,9 +190,10 @@ REQUIRED_OFILES =\t\t\t\t\t\t\t\\\n \t./splay-tree.$(objext) ./stack-limit.$(objext)\t\t\t\\\n \t./strerror.$(objext) ./strsignal.$(objext)\t\t\t\\\n \t./timeval-utils.$(objext) ./unlink-if-ordinary.$(objext)\t\\\n-\t./xatexit.$(objext) ./xexit.$(objext) ./xmalloc.$(objext)\t\\\n-\t./xmemdup.$(objext) ./xstrdup.$(objext) ./xstrerror.$(objext)\t\\\n-\t./xstrndup.$(objext) ./xvasprintf.$(objext)\n+\t./xasprintf.$(objext) ./xatexit.$(objext) ./xexit.$(objext)\t\\\n+\t./xmalloc.$(objext) ./xmemdup.$(objext) ./xstrdup.$(objext)\t\\\n+\t./xstrerror.$(objext) ./xstrndup.$(objext)\t\t\t\\\n+\t./xvasprintf.$(objext)\n \n # These are all the objects that configure may add to the library via\n # $funcs or EXTRA_OFILES.  This list exists here only for \"make\n@@ -1618,6 +1619,16 @@ $(CONFIGURED_OFILES): stamp-picdir stamp-noasandir\n \telse true; fi\n \t$(COMPILE.c) $(srcdir)/waitpid.c $(OUTPUT_OPTION)\n \n+./xasprintf.$(objext): $(srcdir)/xasprintf.c config.h $(INCDIR)/ansidecl.h \\\n+\t$(INCDIR)/libiberty.h\n+\tif [ x\"$(PICFLAG)\" != x ]; then \\\n+\t  $(COMPILE.c) $(PICFLAG) $(srcdir)/xasprintf.c -o pic/$@; \\\n+\telse true; fi\n+\tif [ x\"$(NOASANFLAG)\" != x ]; then \\\n+\t  $(COMPILE.c) $(PICFLAG) $(NOASANFLAG) $(srcdir)/xasprintf.c -o noasan/$@; \\\n+\telse true; fi\n+\t$(COMPILE.c) $(srcdir)/xasprintf.c $(OUTPUT_OPTION)\n+\n ./xatexit.$(objext): $(srcdir)/xatexit.c config.h $(INCDIR)/ansidecl.h \\\n \t$(INCDIR)/libiberty.h\n \tif [ x\"$(PICFLAG)\" != x ]; then \\"}, {"sha": "b5f4e809d063bca7e5c22a997b6001796ea82b75", "filename": "libiberty/functions.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88509188632d76288d391d1407157f1bff22ade/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88509188632d76288d391d1407157f1bff22ade/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=e88509188632d76288d391d1407157f1bff22ade", "patch": "@@ -1923,6 +1923,15 @@ if an error occurred while writing to FILE.\n \n @end deftypefn\n \n+@c xasprintf.c:31\n+@deftypefn Replacement char* xasprintf (const char *@var{format}, ...)\n+\n+Print to allocated string without fail.  If @code{xasprintf} fails,\n+this will print a message to @code{stderr} (using the name set by\n+@code{xmalloc_set_program_name}, if any) and then call @code{xexit}.\n+\n+@end deftypefn\n+\n @c xatexit.c:11\n @deftypefun int xatexit (void (*@var{fn}) (void))\n "}, {"sha": "4f72bb2665554acba04241c9b508fd13b725bbc0", "filename": "libiberty/xasprintf.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88509188632d76288d391d1407157f1bff22ade/libiberty%2Fxasprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88509188632d76288d391d1407157f1bff22ade/libiberty%2Fxasprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxasprintf.c?ref=e88509188632d76288d391d1407157f1bff22ade", "patch": "@@ -0,0 +1,50 @@\n+/* Implement the xasprintf function.\n+   Copyright (C) 2014 Free Software Foundation, Inc.\n+   Contributed by Manuel Lopez-Ibanez.\n+\n+This file is part of the libiberty library.\n+Libiberty is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Library General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+Libiberty is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+Library General Public License for more details.\n+\n+You should have received a copy of the GNU Library General Public\n+License along with libiberty; see the file COPYING.LIB.  If not, write\n+to the Free Software Foundation, Inc., 51 Franklin Street - Fifth\n+Floor, Boston, MA 02110-1301, USA.  */\n+\n+#ifdef HAVE_CONFIG_H\n+#include \"config.h\"\n+#endif\n+#include \"ansidecl.h\"\n+#include \"libiberty.h\"\n+\n+#include <stdarg.h>\n+\n+/*\n+\n+@deftypefn Replacement char* xasprintf (const char *@var{format}, ...)\n+\n+Print to allocated string without fail.  If @code{xasprintf} fails,\n+this will print a message to @code{stderr} (using the name set by\n+@code{xmalloc_set_program_name}, if any) and then call @code{xexit}.\n+\n+@end deftypefn\n+\n+*/\n+\n+char *\n+xasprintf (const char *fmt, ...)\n+{\n+  char *buf;\n+  va_list ap;\n+  va_start (ap, fmt);\n+  buf = xvasprintf (fmt, ap);\n+  va_end (ap);\n+  return buf;\n+}"}]}