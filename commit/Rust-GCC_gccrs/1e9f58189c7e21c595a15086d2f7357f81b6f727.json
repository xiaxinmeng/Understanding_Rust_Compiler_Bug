{"sha": "1e9f58189c7e21c595a15086d2f7357f81b6f727", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU5ZjU4MTg5YzdlMjFjNTk1YTE1MDg2ZDJmNzM1N2Y4MWI2ZjcyNw==", "commit": {"author": {"name": "Fabien Ch\u00eane", "email": "fabien@gcc.gnu.org", "date": "2011-12-28T19:53:14Z"}, "committer": {"name": "Fabien Ch\u00eane", "email": "fabien@gcc.gnu.org", "date": "2011-12-28T19:53:14Z"}, "message": "re PR c++/23211 (using dec in nested class doesn't import name)\n\ngcc/testsuite/ChangeLog\n\n2011-12-28  Fabien Chene  <fabien@gcc.gnu.org>\n\n\tPR c++/23211\n\t* g++.dg/template/using18.C: New.\n\t* g++.dg/template/using19.C: New.\n\t* g++.dg/template/nested3.C: Remove dg-message at instantiation.\n\t* g++.dg/template/crash13.C: Likewise.\n\ngcc/cp/ChangeLog\n\n2011-12-28  Fabien Chene  <fabien@gcc.gnu.org>\n\n\tPR c++/23211\n\t* name-lookup.c (do_class_using_decl): Use dependent_scope_p\n\tinstead of dependent_type_p, to check that a non-dependent\n\tnested-name-specifier of a class-scope using declaration refers to\n\ta base, even if the current scope is dependent.\n\t* parser.c (cp_parser_using_declaration): Set\n\tUSING_DECL_TYPENAME_P to 1 if the DECL is not null. Re-indent a\n\t'else' close to the prior modification.\n\nFrom-SVN: r182711", "tree": {"sha": "a16ce4b7b64413e9f41169e494d59be61c2e57f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a16ce4b7b64413e9f41169e494d59be61c2e57f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e9f58189c7e21c595a15086d2f7357f81b6f727", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e9f58189c7e21c595a15086d2f7357f81b6f727", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e9f58189c7e21c595a15086d2f7357f81b6f727", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e9f58189c7e21c595a15086d2f7357f81b6f727/comments", "author": null, "committer": null, "parents": [{"sha": "37f3b6804eab77c25fd498d5603d2868d91ca1ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37f3b6804eab77c25fd498d5603d2868d91ca1ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37f3b6804eab77c25fd498d5603d2868d91ca1ac"}], "stats": {"total": 80, "additions": 71, "deletions": 9}, "files": [{"sha": "309738cdbbaa4b30a01a4b067dd08a997b3707b6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9f58189c7e21c595a15086d2f7357f81b6f727/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9f58189c7e21c595a15086d2f7357f81b6f727/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1e9f58189c7e21c595a15086d2f7357f81b6f727", "patch": "@@ -1,3 +1,14 @@\n+2011-12-27  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n+\n+\tPR c++/23211\n+\t* name-lookup.c (do_class_using_decl): Use dependent_scope_p\n+\tinstead of dependent_type_p, to check that a non-dependent\n+\tnested-name-specifier of a class-scope using declaration refers to\n+\ta base, even if the current scope is dependent.\n+\t* parser.c (cp_parser_using_declaration): Set\n+\tUSING_DECL_TYPENAME_P to 1 if the DECL is not null. Re-indent a\n+\t'else' close to the prior modification.\n+\n 2011-12-23  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/51507"}, {"sha": "5734055b103aaf53e76cc4333296665602cb7faf", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9f58189c7e21c595a15086d2f7357f81b6f727/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9f58189c7e21c595a15086d2f7357f81b6f727/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=1e9f58189c7e21c595a15086d2f7357f81b6f727", "patch": "@@ -3217,7 +3217,7 @@ do_class_using_decl (tree scope, tree name)\n       return NULL_TREE;\n     }\n \n-  scope_dependent_p = dependent_type_p (scope);\n+  scope_dependent_p = dependent_scope_p (scope);\n   name_dependent_p = (scope_dependent_p\n \t\t      || (IDENTIFIER_TYPENAME_P (name)\n \t\t\t  && dependent_type_p (TREE_TYPE (name))));\n@@ -3242,9 +3242,9 @@ do_class_using_decl (tree scope, tree name)\n \n      In general, we cannot check this constraint in a template because\n      we do not know the entire set of base classes of the current\n-     class type.  However, if all of the base classes are\n-     non-dependent, then we can avoid delaying the check until\n-     instantiation.  */\n+     class type. Morover, if SCOPE is dependent, it might match a\n+     non-dependent base.  */\n+\n   if (!scope_dependent_p)\n     {\n       base_kind b_kind;\n@@ -3270,7 +3270,7 @@ do_class_using_decl (tree scope, tree name)\n \t  if (BASELINK_P (decl))\n \t    decl = BASELINK_FUNCTIONS (decl);\n \t}\n-   }\n+    }\n \n   value = build_lang_decl (USING_DECL, name, NULL_TREE);\n   USING_DECL_DECLS (value) = decl;"}, {"sha": "d4947e7c5d4513d056f7b6f58c80909e3cfd966f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9f58189c7e21c595a15086d2f7357f81b6f727/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9f58189c7e21c595a15086d2f7357f81b6f727/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1e9f58189c7e21c595a15086d2f7357f81b6f727", "patch": "@@ -14971,12 +14971,12 @@ cp_parser_using_declaration (cp_parser* parser,\n \t  /* Create the USING_DECL.  */\n \t  decl = do_class_using_decl (parser->scope, identifier);\n \n-\t  if (typename_p)\n+\t  if (decl && typename_p)\n \t    USING_DECL_TYPENAME_P (decl) = 1;\n \n \t  if (check_for_bare_parameter_packs (decl))\n             return false;\n-          else\n+\t  else\n \t    /* Add it to the list of members in this class.  */\n \t    finish_member_declaration (decl);\n \t}"}, {"sha": "732c7d1b18f9bb8e8c69ae64b78dcd3541918fb3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9f58189c7e21c595a15086d2f7357f81b6f727/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9f58189c7e21c595a15086d2f7357f81b6f727/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e9f58189c7e21c595a15086d2f7357f81b6f727", "patch": "@@ -1,3 +1,11 @@\n+2011-12-27  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n+\n+\tPR c++/23211\n+\t* g++.dg/template/using18.C: New.\n+\t* g++.dg/template/using19.C: New.\n+\t* g++.dg/template/nested3.C: Remove dg-message at instantiation.\n+\t* g++.dg/template/crash13.C: Likewise.\n+\n 2011-12-28  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/51623"}, {"sha": "e8e05945662a77f8d731294fdaebb1e6e726e9b2", "filename": "gcc/testsuite/g++.dg/template/crash13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9f58189c7e21c595a15086d2f7357f81b6f727/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9f58189c7e21c595a15086d2f7357f81b6f727/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash13.C?ref=1e9f58189c7e21c595a15086d2f7357f81b6f727", "patch": "@@ -15,4 +15,4 @@ template <typename T> struct C\n     X::Y;\t\t\t// { dg-error \"not a base type\" }\n };\n \n-C<void> c;\t\t\t// { dg-message \"required\" }\n+C<void> c;"}, {"sha": "5dcbf1961fabbc8c9c06914187b031a3b20c3971", "filename": "gcc/testsuite/g++.dg/template/nested3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9f58189c7e21c595a15086d2f7357f81b6f727/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnested3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9f58189c7e21c595a15086d2f7357f81b6f727/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnested3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnested3.C?ref=1e9f58189c7e21c595a15086d2f7357f81b6f727", "patch": "@@ -24,7 +24,7 @@ class B {\n \n \n int main() {\n-  B<char> objB; // { dg-message \"required\" }\n+  B<char> objB;\n \n   return 0;\n }"}, {"sha": "b4ef6df478c34ce742e4bfbaad776c82149a7c51", "filename": "gcc/testsuite/g++.dg/template/using18.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9f58189c7e21c595a15086d2f7357f81b6f727/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9f58189c7e21c595a15086d2f7357f81b6f727/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing18.C?ref=1e9f58189c7e21c595a15086d2f7357f81b6f727", "patch": "@@ -0,0 +1,31 @@\n+// PR c++/23211\n+// { dg-do compile }\n+\n+template<class T>\n+struct foo \n+{\n+  typedef int jtype;\n+  struct bar \n+  {\n+    using typename foo<T>::jtype; // { dg-error \"not a base type\" }\n+    using foo<T>::jtype; // { dg-error \"not a base type\" }\n+  };\n+};\n+\n+template <class T>\n+struct A : T\n+{\n+    using T::i;\n+    using typename T::type;\n+};\n+\n+struct B1 {};\n+template <class T> struct B2 {};\n+\n+template <class T>\n+struct C : B1, B2<T>\n+{\n+    using B1::x; // { dg-error \"no member\" }\n+    using B2<T>::y;\n+    using typename B2<T>::type;\n+};"}, {"sha": "dc89f92ef0e8b97e34143b14bebf4fe9ab129570", "filename": "gcc/testsuite/g++.dg/template/using19.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9f58189c7e21c595a15086d2f7357f81b6f727/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9f58189c7e21c595a15086d2f7357f81b6f727/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing19.C?ref=1e9f58189c7e21c595a15086d2f7357f81b6f727", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/23211\n+// { dg-do compile }\n+\n+struct A { int x; };\n+\n+template <class T>\n+struct B: A\n+{\n+  using T::x;\n+};\n+\n+B<A> b;"}]}