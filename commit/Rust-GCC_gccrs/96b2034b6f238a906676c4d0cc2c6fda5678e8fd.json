{"sha": "96b2034b6f238a906676c4d0cc2c6fda5678e8fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZiMjAzNGI2ZjIzOGE5MDY2NzZjNGQwY2MyYzZmZGE1Njc4ZThmZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-06-09T12:39:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-06-09T12:39:11Z"}, "message": "re PR bootstrap/26998 (bootstrap failure building libdecnumber, ICE in compare_values, tree-vrp.c:432)\n\n2006-06-09  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/26998\n\t* tree-vrp.c (extract_range_from_unary_expr): For NEGATE_EXPR\n\tof signed types, only TYPE_MIN_VALUE is special, but for both,\n\tminimum and maximum value.  Likewise VR_ANTI_RANGE is special\n\tin this case, as is -fwrapv.\n\n\t* gcc.dg/torture/pr26998.c: New testcase.\n\t* gcc.dg/tree-ssa/vrp29.c: New testcase.\n\nFrom-SVN: r114507", "tree": {"sha": "8f2366195492eca232eb1a6d8a000c1d7b4d5757", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f2366195492eca232eb1a6d8a000c1d7b4d5757"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96b2034b6f238a906676c4d0cc2c6fda5678e8fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96b2034b6f238a906676c4d0cc2c6fda5678e8fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96b2034b6f238a906676c4d0cc2c6fda5678e8fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96b2034b6f238a906676c4d0cc2c6fda5678e8fd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e336f7f2ecb868f9713d0aa74c85e197c5113629", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e336f7f2ecb868f9713d0aa74c85e197c5113629", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e336f7f2ecb868f9713d0aa74c85e197c5113629"}], "stats": {"total": 68, "additions": 60, "deletions": 8}, "files": [{"sha": "79f68e9ca44d000a2f73eebcfd63f052350930bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b2034b6f238a906676c4d0cc2c6fda5678e8fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b2034b6f238a906676c4d0cc2c6fda5678e8fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96b2034b6f238a906676c4d0cc2c6fda5678e8fd", "patch": "@@ -1,3 +1,11 @@\n+2006-06-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/26998\n+\t* tree-vrp.c (extract_range_from_unary_expr): For NEGATE_EXPR\n+\tof signed types, only TYPE_MIN_VALUE is special, but for both,\n+\tminimum and maximum value.  Likewise VR_ANTI_RANGE is special\n+\tin this case, as is -fwrapv.\n+\n 2006-06-08  Mike Stump  <mrs@apple.com>\n \n \tPR target/26427"}, {"sha": "f187c313572c255f967e9f65d873e011c1a9b4f5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b2034b6f238a906676c4d0cc2c6fda5678e8fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b2034b6f238a906676c4d0cc2c6fda5678e8fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=96b2034b6f238a906676c4d0cc2c6fda5678e8fd", "patch": "@@ -1,3 +1,9 @@\n+2006-06-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/26998\n+\t* gcc.dg/torture/pr26998.c: New testcase.\n+\t* gcc.dg/tree-ssa/vrp29.c: New testcase.\n+\n 2006-06-08  Mike Stump  <mrs@apple.com>\n \n \t* gcc.dg/pr27095.c: Account for stubs."}, {"sha": "d50c344734e0ca3f2807ae44e28fd793c53d7691", "filename": "gcc/testsuite/gcc.dg/torture/pr26998.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b2034b6f238a906676c4d0cc2c6fda5678e8fd/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr26998.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b2034b6f238a906676c4d0cc2c6fda5678e8fd/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr26998.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr26998.c?ref=96b2034b6f238a906676c4d0cc2c6fda5678e8fd", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+\n+int decCompareOp (int result)\n+{\n+    if (result != (int)0x80000000)\n+    {\n+        result = -result;\n+        return (result > 0);\n+    }\n+    return 0;\n+}"}, {"sha": "bace4ffcadfe38bd708ddcb500154ce8b3646ee8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp29.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b2034b6f238a906676c4d0cc2c6fda5678e8fd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b2034b6f238a906676c4d0cc2c6fda5678e8fd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp29.c?ref=96b2034b6f238a906676c4d0cc2c6fda5678e8fd", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort(void);\n+\n+void decCompareOp (int result)\n+{\n+  if (result != (int)0x80000000)\n+    {\n+      result = -result;\n+      if (result != (int)0x80000001)\n+        abort ();\n+    }\n+}\n+\n+int main()\n+{\n+  decCompareOp (0x7fffffff);\n+  return 0;\n+}"}, {"sha": "9eac7e9b67deb8b2b03d6e86b5bfd7372bee56ab", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96b2034b6f238a906676c4d0cc2c6fda5678e8fd/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96b2034b6f238a906676c4d0cc2c6fda5678e8fd/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=96b2034b6f238a906676c4d0cc2c6fda5678e8fd", "patch": "@@ -1795,14 +1795,21 @@ extract_range_from_unary_expr (value_range_t *vr, tree expr)\n   if (code == NEGATE_EXPR\n       && !TYPE_UNSIGNED (TREE_TYPE (expr)))\n     {\n-      /* NEGATE_EXPR flips the range around.  */\n-      min = (vr0.max == TYPE_MAX_VALUE (TREE_TYPE (expr)) && !flag_wrapv)\n-\t     ? TYPE_MIN_VALUE (TREE_TYPE (expr))\n-\t     : fold_unary_to_constant (code, TREE_TYPE (expr), vr0.max);\n-\n-      max = (vr0.min == TYPE_MIN_VALUE (TREE_TYPE (expr)) && !flag_wrapv)\n-\t     ? TYPE_MAX_VALUE (TREE_TYPE (expr))\n-\t     : fold_unary_to_constant (code, TREE_TYPE (expr), vr0.min);\n+      /* NEGATE_EXPR flips the range around.  We need to treat\n+\t TYPE_MIN_VALUE specially dependent on wrapping, range type\n+\t and if it was used as minimum or maximum value:  \n+\t  -~[MIN, MIN] == ~[MIN, MIN]\n+\t  -[MIN, 0] == [0, MAX]  for -fno-wrapv\n+\t  -[MIN, 0] == [0, MIN]  for -fwrapv (will be set to varying later)  */\n+      min = vr0.max == TYPE_MIN_VALUE (TREE_TYPE (expr))\n+\t    ? TYPE_MIN_VALUE (TREE_TYPE (expr))\n+\t    : fold_unary_to_constant (code, TREE_TYPE (expr), vr0.max);\n+\n+      max = vr0.min == TYPE_MIN_VALUE (TREE_TYPE (expr))\n+\t    ? (vr0.type == VR_ANTI_RANGE || flag_wrapv\n+\t       ? TYPE_MIN_VALUE (TREE_TYPE (expr))\n+\t       : TYPE_MAX_VALUE (TREE_TYPE (expr)))\n+\t    : fold_unary_to_constant (code, TREE_TYPE (expr), vr0.min);\n \n     }\n   else if (code == NEGATE_EXPR"}]}