{"sha": "2129b0816f369ee6bf172e7065b0de137ac9c7f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEyOWIwODE2ZjM2OWVlNmJmMTcyZTcwNjViMGRlMTM3YWM5YzdmNw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1998-05-14T13:00:18Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1998-05-14T13:00:18Z"}, "message": "Patch from Gary McGary to fix i960 problem with out-of-range shifts.\n\n\t* i960.h (hard_regno_mode_ok): Changed to function from array of\n \tunsigned.\n\t(HARD_REGNO_MODE_OK): Call function instead of testing bit.\n\t* i960.c (hard_regno_mode_ok): Changed to function from array of\n \tunsigned.\n\nFrom-SVN: r19745", "tree": {"sha": "46357ccaac87478f11cb51b84425f5e44399f316", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46357ccaac87478f11cb51b84425f5e44399f316"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2129b0816f369ee6bf172e7065b0de137ac9c7f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2129b0816f369ee6bf172e7065b0de137ac9c7f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2129b0816f369ee6bf172e7065b0de137ac9c7f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2129b0816f369ee6bf172e7065b0de137ac9c7f7/comments", "author": null, "committer": null, "parents": [{"sha": "f2ee215beb3e13681e952395335f30dec161876a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ee215beb3e13681e952395335f30dec161876a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2ee215beb3e13681e952395335f30dec161876a"}], "stats": {"total": 84, "additions": 54, "deletions": 30}, "files": [{"sha": "c99ab5ea9b3be4076077747660a6de5fe73d00e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2129b0816f369ee6bf172e7065b0de137ac9c7f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2129b0816f369ee6bf172e7065b0de137ac9c7f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2129b0816f369ee6bf172e7065b0de137ac9c7f7", "patch": "@@ -1,3 +1,11 @@\n+Thu May 14 12:58:21 1998  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* i960.h (hard_regno_mode_ok): Changed to function from array of\n+ \tunsigned.\n+\t(HARD_REGNO_MODE_OK): Call function instead of testing bit.\n+\t* i960.c (hard_regno_mode_ok): Changed to function from array of\n+ \tunsigned.\n+\n Thu May 14 08:41:46 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* reload.c (remove_replacements): New function."}, {"sha": "f87b02c8a1b6993470a07aa290c43cb53f71b209", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 44, "deletions": 27, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2129b0816f369ee6bf172e7065b0de137ac9c7f7/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2129b0816f369ee6bf172e7065b0de137ac9c7f7/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=2129b0816f369ee6bf172e7065b0de137ac9c7f7", "patch": "@@ -2067,40 +2067,57 @@ i960_alignment (size, align)\n }\n #endif\n \f\n-/* Modes for condition codes.  */\n-#define C_MODES\t\t\\\n-  ((1 << (int) CCmode) | (1 << (int) CC_UNSmode) | (1<< (int) CC_CHKmode))\n \n-/* Modes for single-word (and smaller) quantities.  */\n-#define S_MODES\t\t\t\t\t\t\\\n- (~C_MODES\t\t\t\t\t\t\\\n-  & ~ ((1 << (int) DImode) | (1 << (int) TImode)\t\\\n-       | (1 << (int) DFmode) | (1 << (int) XFmode)))\n-\n-/* Modes for double-word (and smaller) quantities.  */\n-#define D_MODES\t\t\t\t\t\\\n-  (~C_MODES\t\t\t\t\t\\\n-   & ~ ((1 << (int) TImode) | (1 << (int) XFmode)))\n+int\n+hard_regno_mode_ok (regno, mode)\n+     int regno;\n+     enum machine_mode mode;\n+{\n+  if (regno < 32)\n+    {\n+      switch (mode)\n+\t{\n+\tcase CCmode: case CC_UNSmode: case CC_CHKmode:\n+\t  return 0;\n \n-/* Modes for quad-word quantities.  */\n-#define T_MODES (~C_MODES)\n+\tcase DImode: case DFmode:\n+\t  return (regno & 1) == 0;\n \n-/* Modes for single-float quantities.  */\n-#define SF_MODES ((1 << (int) SFmode))\n+\tcase TImode: case XFmode:\n+\t  return (regno & 3) == 0;\n \n-/* Modes for double-float quantities.  */\n-#define DF_MODES (SF_MODES | (1 << (int) DFmode) | (1 << (int) SCmode))\n+\tdefault:\n+\t  return 1;\n+\t}\n+    }\n+  else if (regno >= 32 && regno < 36)\n+    {\n+      switch (mode)\n+\t{\n+\tcase SFmode: case DFmode: case XFmode:\n+\tcase SCmode: case DCmode:\n+\t  return 1;\n \n-/* Modes for quad-float quantities.  */\n-#define XF_MODES (DF_MODES | (1 << (int) XFmode) | (1 << (int) DCmode))\n+\tdefault:\n+\t  return 0;\n+\t}\n+    }\n+  else if (regno == 36)\n+    {\n+      switch (mode)\n+\t{\n+\tcase CCmode: case CC_UNSmode: case CC_CHKmode:\n+\t  return 1;\n \n-unsigned int hard_regno_mode_ok[FIRST_PSEUDO_REGISTER] = {\n-  T_MODES, S_MODES, D_MODES, S_MODES, T_MODES, S_MODES, D_MODES, S_MODES,\n-  T_MODES, S_MODES, D_MODES, S_MODES, T_MODES, S_MODES, D_MODES, S_MODES,\n-  T_MODES, S_MODES, D_MODES, S_MODES, T_MODES, S_MODES, D_MODES, S_MODES,\n-  T_MODES, S_MODES, D_MODES, S_MODES, T_MODES, S_MODES, D_MODES, S_MODES,\n+\tdefault:\n+\t  return 0;\n+\t}\n+    }\n+  else if (regno == 37)\n+    return 0;\n \n-  XF_MODES, XF_MODES, XF_MODES, XF_MODES, C_MODES};\n+  abort ();\n+}\n \n \f\n /* Return the minimum alignment of an expression rtx X in bytes.  This takes"}, {"sha": "1ba3dcc79f0d6b937b772f141362767ef7882456", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2129b0816f369ee6bf172e7065b0de137ac9c7f7/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2129b0816f369ee6bf172e7065b0de137ac9c7f7/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=2129b0816f369ee6bf172e7065b0de137ac9c7f7", "patch": "@@ -506,9 +506,8 @@ extern int target_flags;\n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.\n    On 80960, the cpu registers can hold any mode but the float registers\n    can only hold SFmode, DFmode, or XFmode.  */\n-extern unsigned int hard_regno_mode_ok[FIRST_PSEUDO_REGISTER];\n-#define HARD_REGNO_MODE_OK(REGNO, MODE) \\\n-  ((hard_regno_mode_ok[REGNO] & (1 << (int) (MODE))) != 0)\n+extern int hard_regno_mode_ok ();\n+#define HARD_REGNO_MODE_OK(REGNO, MODE) hard_regno_mode_ok ((REGNO), (MODE))\n \n /* Value is 1 if it is a good idea to tie two pseudo registers\n    when one has mode MODE1 and one has mode MODE2."}]}