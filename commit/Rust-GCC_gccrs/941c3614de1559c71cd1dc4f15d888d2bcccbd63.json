{"sha": "941c3614de1559c71cd1dc4f15d888d2bcccbd63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQxYzM2MTRkZTE1NTljNzFjZDFkYzRmMTVkODg4ZDJiY2NjYmQ2Mw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-04-05T19:50:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-04-05T19:50:28Z"}, "message": "re PR c/39648 (internal compiler error: in fold_convert, at fold-const.c:2506)\n\n2009-04-05  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/39648\n\t* tree-ssa-sccvn.c (vn_reference_fold_indirect): Work around\n\tour &A vs. &A[0] IL deficiencies.\n\n\t* gcc.c-torture/compile/pr39648.c: New testcase.\n\nFrom-SVN: r145569", "tree": {"sha": "6c1b02c0fcfd2169d3672a32b8b6061b7ad36315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c1b02c0fcfd2169d3672a32b8b6061b7ad36315"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/941c3614de1559c71cd1dc4f15d888d2bcccbd63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/941c3614de1559c71cd1dc4f15d888d2bcccbd63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/941c3614de1559c71cd1dc4f15d888d2bcccbd63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/941c3614de1559c71cd1dc4f15d888d2bcccbd63/comments", "author": null, "committer": null, "parents": [{"sha": "435970ad3e6e2d61767b8d992242cb4baa08b7e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435970ad3e6e2d61767b8d992242cb4baa08b7e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/435970ad3e6e2d61767b8d992242cb4baa08b7e3"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "19d3eaacf751cdd3ae200cb11d020e141af77d75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941c3614de1559c71cd1dc4f15d888d2bcccbd63/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941c3614de1559c71cd1dc4f15d888d2bcccbd63/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=941c3614de1559c71cd1dc4f15d888d2bcccbd63", "patch": "@@ -1,7 +1,13 @@\n+2009-04-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/39648\n+\t* tree-ssa-sccvn.c (vn_reference_fold_indirect): Work around\n+\tour &A vs. &A[0] IL deficiencies.\n+\n 2009-04-04  Jan Hubicka  <jh@suse.cz>\n \n-\t* except.c (sjlj_find_directly_reachable_regions): Be ready for removed toplevel\n-\tregions.\n+\t* except.c (sjlj_find_directly_reachable_regions): Be ready for\n+\tremoved toplevel regions.\n \t(sjlj_mark_call_sites): Likewise.\n \n 2009-04-04  Dave Korn  <dave.korn.cygwin@gmail.com>"}, {"sha": "83215bb1d6f00166c24f241660c7950249609b30", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941c3614de1559c71cd1dc4f15d888d2bcccbd63/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941c3614de1559c71cd1dc4f15d888d2bcccbd63/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=941c3614de1559c71cd1dc4f15d888d2bcccbd63", "patch": "@@ -1,3 +1,8 @@\n+2009-04-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/39648\n+\t* gcc.c-torture/compile/pr39648.c: New testcase.\n+\n 2009-04-05  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/14912"}, {"sha": "bb901fee0d589ee54b08c2b4b8d1416e853bdfb6", "filename": "gcc/testsuite/gcc.c-torture/compile/pr39648.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941c3614de1559c71cd1dc4f15d888d2bcccbd63/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39648.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941c3614de1559c71cd1dc4f15d888d2bcccbd63/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39648.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr39648.c?ref=941c3614de1559c71cd1dc4f15d888d2bcccbd63", "patch": "@@ -0,0 +1,12 @@\n+void\n+yysyntax_error (char *yyp)\n+{\n+        char const *yyf;\n+        char yyformat[5];\n+\n+        yyf = yyformat;\n+        while ((*yyp = *yyf) != '\\0') {\n+                if (yyf[1] == 's')\n+                        yyf += 2;\n+        }\n+}"}, {"sha": "2982e8ca051ca23e24aca714626941c4fb8c1041", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/941c3614de1559c71cd1dc4f15d888d2bcccbd63/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/941c3614de1559c71cd1dc4f15d888d2bcccbd63/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=941c3614de1559c71cd1dc4f15d888d2bcccbd63", "patch": "@@ -757,6 +757,23 @@ vn_reference_fold_indirect (VEC (vn_reference_op_s, heap) **ops,\n \n   /* Get ops for the addressed object.  */\n   op = VEC_index (vn_reference_op_s, *ops, i);\n+  /* ???  If this is our usual typeof &ARRAY vs. &ARRAY[0] problem, work\n+     around it to avoid later ICEs.  */\n+  if (TREE_CODE (TREE_TYPE (TREE_OPERAND (op->op0, 0))) == ARRAY_TYPE\n+      && TREE_CODE (TREE_TYPE (TREE_TYPE (op->op0))) != ARRAY_TYPE)\n+    {\n+      vn_reference_op_s aref;\n+      tree dom;\n+      aref.type = TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (op->op0)));\n+      aref.opcode = ARRAY_REF;\n+      aref.op0 = integer_zero_node;\n+      if ((dom = TYPE_DOMAIN (TREE_TYPE (TREE_OPERAND (op->op0, 0))))\n+\t  && TYPE_MIN_VALUE (dom))\n+\taref.op0 = TYPE_MIN_VALUE (dom);\n+      aref.op1 = NULL_TREE;\n+      aref.op2 = NULL_TREE;\n+      VEC_safe_push (vn_reference_op_s, heap, mem, &aref);\n+    }\n   copy_reference_ops_from_ref (TREE_OPERAND (op->op0, 0), &mem);\n \n   /* Do the replacement - we should have at least one op in mem now.  */"}]}