{"sha": "f6af9c21fdff6cb6ec93ad2c74844e60e403fc1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZhZjljMjFmZGZmNmNiNmVjOTNhZDJjNzQ4NDRlNjBlNDAzZmMxYg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2019-08-09T16:14:59Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2019-08-09T16:14:59Z"}, "message": "[aarch64] PR target/91386 Use copy_rtx to avoid modifying original insns in peep2 pattern\n\nPR target/91386 is a situation where a peephole2 pattern substitution\nis discarded late because the selected instructions contain\nframe-related notes that we cannot redistribute (because the pattern\nhas more than one insn in the output).  Unfortunately, the original\ninsns were being modified during the generation, so after the undo we\nare left with corrupt RTL.\n\nWe avoid this by ensuring that the modifications are always made on a\ncopy, so that the original insns are never changed.\n\n\tPR target/91386\n\t* config/aarch64/aarch64.c (aarch64_gen_adjusted_ldpstp): Use copy_rtx\n\tto preserve the contents of the original insns.\n\nFrom-SVN: r274238", "tree": {"sha": "6a22d41fc557ffdf316eafcb36258ab2eae70e09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a22d41fc557ffdf316eafcb36258ab2eae70e09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6af9c21fdff6cb6ec93ad2c74844e60e403fc1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6af9c21fdff6cb6ec93ad2c74844e60e403fc1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6af9c21fdff6cb6ec93ad2c74844e60e403fc1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6af9c21fdff6cb6ec93ad2c74844e60e403fc1b/comments", "author": null, "committer": null, "parents": [{"sha": "d092f6fce920a07d6dd319105ccf1cb9db05d029", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d092f6fce920a07d6dd319105ccf1cb9db05d029", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d092f6fce920a07d6dd319105ccf1cb9db05d029"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "de5a347d5a3cee37b748cbb9afa73336f75896c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6af9c21fdff6cb6ec93ad2c74844e60e403fc1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6af9c21fdff6cb6ec93ad2c74844e60e403fc1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6af9c21fdff6cb6ec93ad2c74844e60e403fc1b", "patch": "@@ -1,6 +1,12 @@\n+2019-09-09  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/91386\n+\t* config/aarch64/aarch64.c (aarch64_gen_adjusted_ldpstp): Use copy_rtx\n+\tto preserve the contents of the original insns.\n+\n 2019-08-09  Richard Earnshaw  <rearnsha@arm.com>\n \n-\t*confit/arm/arm.md (addsi3_compare_op1): Add 16-bit thumb-2 variants.\n+\t*config/arm/arm.md (addsi3_compare_op1): Add 16-bit thumb-2 variants.\n \t(addsi3_compare_op2): Likewise.\n \n 2019-08-09  Martin Liska  <mliska@suse.cz>"}, {"sha": "48ec1ac5d5ed15adb773012c30b6515ba5cbc80f", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6af9c21fdff6cb6ec93ad2c74844e60e403fc1b/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6af9c21fdff6cb6ec93ad2c74844e60e403fc1b/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=f6af9c21fdff6cb6ec93ad2c74844e60e403fc1b", "patch": "@@ -18546,19 +18546,21 @@ aarch64_gen_adjusted_ldpstp (rtx *operands, bool load,\n   /* Sort the operands.  */\n   qsort (temp_operands, 4, 2 * sizeof (rtx *), aarch64_ldrstr_offset_compare);\n \n+  /* Copy the memory operands so that if we have to bail for some\n+     reason the original addresses are unchanged.  */\n   if (load)\n     {\n-      mem_1 = temp_operands[1];\n-      mem_2 = temp_operands[3];\n-      mem_3 = temp_operands[5];\n-      mem_4 = temp_operands[7];\n+      mem_1 = copy_rtx (temp_operands[1]);\n+      mem_2 = copy_rtx (temp_operands[3]);\n+      mem_3 = copy_rtx (temp_operands[5]);\n+      mem_4 = copy_rtx (temp_operands[7]);\n     }\n   else\n     {\n-      mem_1 = temp_operands[0];\n-      mem_2 = temp_operands[2];\n-      mem_3 = temp_operands[4];\n-      mem_4 = temp_operands[6];\n+      mem_1 = copy_rtx (temp_operands[0]);\n+      mem_2 = copy_rtx (temp_operands[2]);\n+      mem_3 = copy_rtx (temp_operands[4]);\n+      mem_4 = copy_rtx (temp_operands[6]);\n       gcc_assert (code == UNKNOWN);\n     }\n "}]}