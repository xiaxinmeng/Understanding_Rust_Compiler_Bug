{"sha": "b46881363f7210ddcd3474fa36c2f142d388e8fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ2ODgxMzYzZjcyMTBkZGNkMzQ3NGZhMzZjMmYxNDJkMzg4ZThmZQ==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2017-11-19T01:01:50Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2017-11-19T01:01:50Z"}, "message": "PR libstdc++/pr66689 - comp_ellint_3 and ellint_3 return garbage values\n\n2017-11-18  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tPR libstdc++/pr66689 - comp_ellint_3 and ellint_3 return garbage values\n\t* include/tr1/ell_integral.tcc: Correct the nu sign convention\n\tin ellint_3 and comp_ellint_3.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t06_comp_ellint_3/check_value.cc: Regen with correct values.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t14_ellint_3/check_value.cc: Ditto.\n\t* testsuite/special_functions/06_comp_ellint_3/check_value.cc: Ditto.\n\t* testsuite/special_functions/13_ellint_3/check_value.cc: Ditto.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t01_assoc_laguerre/check_value.cc: Regen.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t02_assoc_legendre/check_value.cc: Regen.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t03_beta/check_value.cc: Regen.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t04_comp_ellint_1/check_value.cc: Regen.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t05_comp_ellint_2/check_value.cc: Regen.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t07_conf_hyperg/check_value.cc: Regen.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t08_cyl_bessel_i/check_value.cc: Regen.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t09_cyl_bessel_j/check_value.cc: Regen.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t10_cyl_bessel_k/check_value.cc: Regen.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t11_cyl_neumann/check_value.cc: Regen.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t12_ellint_1/check_value.cc: Regen.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t13_ellint_2/check_value.cc: Regen.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t15_expint/check_value_neg.cc: Regen.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t16_hermite/check_value.cc: Regen.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t17_hyperg/check_value.cc: Regen.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t18_laguerre/check_value.cc: Regen.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t19_legendre/check_value.cc: Regen.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t20_riemann_zeta/check_value_neg.cc: Regen.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t21_sph_bessel/check_value.cc: Regen.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t22_sph_legendre/check_value.cc: Regen.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t23_sph_neumann/check_value.cc: Regen.\n\t* testsuite/ext/special_functions/conf_hyperg/check_value.cc: Regen.\n\t* testsuite/ext/special_functions/hyperg/check_value.cc: Regen.\n\t* testsuite/special_functions/01_assoc_laguerre/check_value.cc: Regen.\n\t* testsuite/special_functions/02_assoc_legendre/check_value.cc: Regen.\n\t* testsuite/special_functions/03_beta/check_value.cc: Regen.\n\t* testsuite/special_functions/04_comp_ellint_1/check_value.cc: Regen.\n\t* testsuite/special_functions/05_comp_ellint_2/check_value.cc: Regen.\n\t* testsuite/special_functions/07_cyl_bessel_i/check_value.cc: Regen.\n\t* testsuite/special_functions/08_cyl_bessel_j/check_value.cc: Regen.\n\t* testsuite/special_functions/09_cyl_bessel_k/check_value.cc: Regen.\n \t* testsuite/special_functions/10_cyl_neumann/check_value.cc: Regen.\n\t* testsuite/special_functions/11_ellint_1/check_value.cc: Regen.\n\t* testsuite/special_functions/12_ellint_2/check_value.cc: Regen.\n\t* testsuite/special_functions/14_expint/check_value.cc: Regen.\n\t* testsuite/special_functions/15_hermite/check_value.cc: Regen.\n\t* testsuite/special_functions/16_laguerre/check_value.cc: Regen.\n\t* testsuite/special_functions/17_legendre/check_value.cc: Regen.\n\t* testsuite/special_functions/18_riemann_zeta/check_value.cc: Regen.\n\t* testsuite/special_functions/19_sph_bessel/check_value.cc: Regen.\n\t* testsuite/special_functions/20_sph_legendre/check_value.cc: Regen.\n\t* testsuite/special_functions/21_sph_neumann/check_value.cc: Regen.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t06_comp_ellint_3/pr66689.cc: New.\n\t* testsuite/tr1/5_numerical_facilities/special_functions/\n\t14_ellint_3/pr66689.cc: New.\n\t* testsuite/special_functions/06_comp_ellint_3/pr66689.cc: New.\n\t* testsuite/special_functions/13_ellint_3/pr66689.cc: New.\n\nFrom-SVN: r254924", "tree": {"sha": "8c30704241bbd5c1af61a72f9f12dd33e4655ba4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c30704241bbd5c1af61a72f9f12dd33e4655ba4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b46881363f7210ddcd3474fa36c2f142d388e8fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b46881363f7210ddcd3474fa36c2f142d388e8fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b46881363f7210ddcd3474fa36c2f142d388e8fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b46881363f7210ddcd3474fa36c2f142d388e8fe/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d432108324479030c9f4a408625a7c8ba4d1e171", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d432108324479030c9f4a408625a7c8ba4d1e171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d432108324479030c9f4a408625a7c8ba4d1e171"}], "stats": {"total": 132575, "additions": 59905, "deletions": 72670}, "files": [{"sha": "15936ac1d8623f5103391f63d61ddfac6556d7c7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -1,3 +1,84 @@\n+2017-11-18  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tPR libstdc++/pr66689 - comp_ellint_3 and ellint_3 return garbage values\n+\t* include/tr1/ell_integral.tcc: Correct the nu sign convention\n+\tin ellint_3 and comp_ellint_3.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t06_comp_ellint_3/check_value.cc: Regen with correct values.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t14_ellint_3/check_value.cc: Ditto.\n+\t* testsuite/special_functions/06_comp_ellint_3/check_value.cc: Ditto.\n+\t* testsuite/special_functions/13_ellint_3/check_value.cc: Ditto.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t01_assoc_laguerre/check_value.cc: Regen.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t02_assoc_legendre/check_value.cc: Regen.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t03_beta/check_value.cc: Regen.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t04_comp_ellint_1/check_value.cc: Regen.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t05_comp_ellint_2/check_value.cc: Regen.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t07_conf_hyperg/check_value.cc: Regen.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t08_cyl_bessel_i/check_value.cc: Regen.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t09_cyl_bessel_j/check_value.cc: Regen.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t10_cyl_bessel_k/check_value.cc: Regen.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t11_cyl_neumann/check_value.cc: Regen.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t12_ellint_1/check_value.cc: Regen.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t13_ellint_2/check_value.cc: Regen.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t15_expint/check_value_neg.cc: Regen.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t16_hermite/check_value.cc: Regen.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t17_hyperg/check_value.cc: Regen.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t18_laguerre/check_value.cc: Regen.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t19_legendre/check_value.cc: Regen.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t20_riemann_zeta/check_value_neg.cc: Regen.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t21_sph_bessel/check_value.cc: Regen.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t22_sph_legendre/check_value.cc: Regen.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t23_sph_neumann/check_value.cc: Regen.\n+\t* testsuite/ext/special_functions/conf_hyperg/check_value.cc: Regen.\n+\t* testsuite/ext/special_functions/hyperg/check_value.cc: Regen.\n+\t* testsuite/special_functions/01_assoc_laguerre/check_value.cc: Regen.\n+\t* testsuite/special_functions/02_assoc_legendre/check_value.cc: Regen.\n+\t* testsuite/special_functions/03_beta/check_value.cc: Regen.\n+\t* testsuite/special_functions/04_comp_ellint_1/check_value.cc: Regen.\n+\t* testsuite/special_functions/05_comp_ellint_2/check_value.cc: Regen.\n+\t* testsuite/special_functions/07_cyl_bessel_i/check_value.cc: Regen.\n+\t* testsuite/special_functions/08_cyl_bessel_j/check_value.cc: Regen.\n+\t* testsuite/special_functions/09_cyl_bessel_k/check_value.cc: Regen.\n+ \t* testsuite/special_functions/10_cyl_neumann/check_value.cc: Regen.\n+\t* testsuite/special_functions/11_ellint_1/check_value.cc: Regen.\n+\t* testsuite/special_functions/12_ellint_2/check_value.cc: Regen.\n+\t* testsuite/special_functions/14_expint/check_value.cc: Regen.\n+\t* testsuite/special_functions/15_hermite/check_value.cc: Regen.\n+\t* testsuite/special_functions/16_laguerre/check_value.cc: Regen.\n+\t* testsuite/special_functions/17_legendre/check_value.cc: Regen.\n+\t* testsuite/special_functions/18_riemann_zeta/check_value.cc: Regen.\n+\t* testsuite/special_functions/19_sph_bessel/check_value.cc: Regen.\n+\t* testsuite/special_functions/20_sph_legendre/check_value.cc: Regen.\n+\t* testsuite/special_functions/21_sph_neumann/check_value.cc: Regen.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t06_comp_ellint_3/pr66689.cc: New.\n+\t* testsuite/tr1/5_numerical_facilities/special_functions/\n+\t14_ellint_3/pr66689.cc: New.\n+\t* testsuite/special_functions/06_comp_ellint_3/pr66689.cc: New.\n+\t* testsuite/special_functions/13_ellint_3/pr66689.cc: New.\n+\n 2017-11-18  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \tExpose Airy functions as an extenaion.\n \t* include/bits/specfun.h: Expose airy_ai and airy_bi."}, {"sha": "4953fe24da4d9d8595f75fedd93e00c4f3fa0a51", "filename": "libstdc++-v3/include/tr1/ell_integral.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fell_integral.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fell_integral.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fell_integral.tcc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -685,8 +685,8 @@ namespace tr1\n           const _Tp __kk = __k * __k;\n \n           return __ellint_rf(_Tp(0), _Tp(1) - __kk, _Tp(1))\n-               - __nu\n-               * __ellint_rj(_Tp(0), _Tp(1) - __kk, _Tp(1), _Tp(1) + __nu)\n+               + __nu\n+               * __ellint_rj(_Tp(0), _Tp(1) - __kk, _Tp(1), _Tp(1) - __nu)\n                / _Tp(3);\n         }\n     }\n@@ -735,9 +735,9 @@ namespace tr1\n \n           const _Tp __Pi = __s\n                          * __ellint_rf(__cc, _Tp(1) - __kk * __ss, _Tp(1))\n-                         - __nu * __sss\n+                         + __nu * __sss\n                          * __ellint_rj(__cc, _Tp(1) - __kk * __ss, _Tp(1),\n-                                       _Tp(1) + __nu * __ss) / _Tp(3);\n+                                       _Tp(1) - __nu * __ss) / _Tp(3);\n \n           if (__n == 0)\n             return __Pi;"}, {"sha": "7e66905e83676d1f54d6d38b61ffd120b5cb8fed", "filename": "libstdc++-v3/testsuite/ext/special_functions/conf_hyperg/check_value.cc", "status": "modified", "additions": 1887, "deletions": 1677, "changes": 3564, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fconf_hyperg%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fconf_hyperg%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fconf_hyperg%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}, {"sha": "1cede80c4b4cf762b2fb3ed2beaa2142aa6bf8fa", "filename": "libstdc++-v3/testsuite/ext/special_functions/hyperg/check_value.cc", "status": "modified", "additions": 6754, "deletions": 6019, "changes": 12773, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fhyperg%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fhyperg%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fspecial_functions%2Fhyperg%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}, {"sha": "fd01765507b9a7a5efad08cb342b708fda99e4b6", "filename": "libstdc++-v3/testsuite/special_functions/01_assoc_laguerre/check_value.cc", "status": "modified", "additions": 972, "deletions": 780, "changes": 1752, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F01_assoc_laguerre%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F01_assoc_laguerre%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F01_assoc_laguerre%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -37,2011 +37,2203 @@\n #endif\n #include <specfun_testcase.h>\n \n-\n // Test data for n=0, m=0.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_assoc_laguerre<double>\n data001[11] =\n {\n   { 1.0000000000000000, 0, 0, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 0, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 0, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 0, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 0, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 0, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 0, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 0, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 0, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 0, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 0, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler001 = 2.5000000000000020e-13;\n \n // Test data for n=0, m=1.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_assoc_laguerre<double>\n data002[11] =\n {\n   { 1.0000000000000000, 0, 1, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 1, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 1, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 1, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 1, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 1, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 1, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 1, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 1, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 1, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 1, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler002 = 2.5000000000000020e-13;\n \n // Test data for n=0, m=2.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_assoc_laguerre<double>\n data003[11] =\n {\n   { 1.0000000000000000, 0, 2, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 2, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 2, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 2, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 2, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 2, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 2, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 2, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 2, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 2, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 2, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler003 = 2.5000000000000020e-13;\n \n // Test data for n=0, m=5.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_assoc_laguerre<double>\n data004[11] =\n {\n   { 1.0000000000000000, 0, 5, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 5, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 5, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 5, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 5, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 5, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 5, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 5, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 5, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 5, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 5, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler004 = 2.5000000000000020e-13;\n \n // Test data for n=0, m=10.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_assoc_laguerre<double>\n data005[11] =\n {\n   { 1.0000000000000000, 0, 10, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 10, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 10, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 10, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 10, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 10, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 10, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 10, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 10, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 10, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 10, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler005 = 2.5000000000000020e-13;\n \n // Test data for n=0, m=20.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_assoc_laguerre<double>\n data006[11] =\n {\n   { 1.0000000000000000, 0, 20, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 20, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 20, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 20, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 20, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 20, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 20, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 20, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 20, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 20, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 20, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler006 = 2.5000000000000020e-13;\n \n // Test data for n=0, m=50.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_assoc_laguerre<double>\n data007[11] =\n {\n   { 1.0000000000000000, 0, 50, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 50, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 50, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 50, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 50, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 50, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 50, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 50, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 50, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 50, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 50, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler007 = 2.5000000000000020e-13;\n \n // Test data for n=0, m=100.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_assoc_laguerre<double>\n data008[11] =\n {\n   { 1.0000000000000000, 0, 100, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 100, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 100, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 100, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 100, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 100, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 100, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 100, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 100, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 100, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 1.0000000000000000, 0, 100, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler008 = 2.5000000000000020e-13;\n \n // Test data for n=1, m=0.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_assoc_laguerre<double>\n data009[11] =\n {\n   { 1.0000000000000000, 1, 0, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { -9.0000000000000000, 1, 0, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { -19.000000000000000, 1, 0, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -29.000000000000000, 1, 0, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -39.000000000000000, 1, 0, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -49.000000000000000, 1, 0, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -59.000000000000000, 1, 0, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -69.000000000000000, 1, 0, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -79.000000000000000, 1, 0, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -89.000000000000000, 1, 0, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { -99.000000000000000, 1, 0, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler009 = 2.5000000000000020e-13;\n \n // Test data for n=1, m=1.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_assoc_laguerre<double>\n data010[11] =\n {\n   { 2.0000000000000000, 1, 1, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { -8.0000000000000000, 1, 1, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { -18.000000000000000, 1, 1, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -28.000000000000000, 1, 1, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -38.000000000000000, 1, 1, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -48.000000000000000, 1, 1, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -58.000000000000000, 1, 1, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -68.000000000000000, 1, 1, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -78.000000000000000, 1, 1, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -88.000000000000000, 1, 1, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { -98.000000000000000, 1, 1, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler010 = 2.5000000000000020e-13;\n \n // Test data for n=1, m=2.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_assoc_laguerre<double>\n data011[11] =\n {\n   { 3.0000000000000000, 1, 2, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { -7.0000000000000000, 1, 2, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { -17.000000000000000, 1, 2, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -27.000000000000000, 1, 2, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -37.000000000000000, 1, 2, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -47.000000000000000, 1, 2, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -57.000000000000000, 1, 2, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -67.000000000000000, 1, 2, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -77.000000000000000, 1, 2, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -87.000000000000000, 1, 2, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { -97.000000000000000, 1, 2, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler011 = 2.5000000000000020e-13;\n \n // Test data for n=1, m=5.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_assoc_laguerre<double>\n data012[11] =\n {\n   { 6.0000000000000000, 1, 5, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { -4.0000000000000000, 1, 5, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { -14.000000000000000, 1, 5, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -24.000000000000000, 1, 5, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -34.000000000000000, 1, 5, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -44.000000000000000, 1, 5, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -54.000000000000000, 1, 5, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -64.000000000000000, 1, 5, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -74.000000000000000, 1, 5, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -84.000000000000000, 1, 5, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { -94.000000000000000, 1, 5, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler012 = 2.5000000000000020e-13;\n \n // Test data for n=1, m=10.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_assoc_laguerre<double>\n data013[11] =\n {\n   { 11.000000000000000, 1, 10, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 1.0000000000000000, 1, 10, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { -9.0000000000000000, 1, 10, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -19.000000000000000, 1, 10, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -29.000000000000000, 1, 10, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -39.000000000000000, 1, 10, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -49.000000000000000, 1, 10, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -59.000000000000000, 1, 10, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -69.000000000000000, 1, 10, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -79.000000000000000, 1, 10, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { -89.000000000000000, 1, 10, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler013 = 2.5000000000000020e-13;\n \n // Test data for n=1, m=20.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_assoc_laguerre<double>\n data014[11] =\n {\n   { 21.000000000000000, 1, 20, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 11.000000000000000, 1, 20, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 1.0000000000000000, 1, 20, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -9.0000000000000000, 1, 20, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -19.000000000000000, 1, 20, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -29.000000000000000, 1, 20, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -39.000000000000000, 1, 20, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -49.000000000000000, 1, 20, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -59.000000000000000, 1, 20, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -69.000000000000000, 1, 20, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { -79.000000000000000, 1, 20, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler014 = 2.5000000000000020e-13;\n \n // Test data for n=1, m=50.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_assoc_laguerre<double>\n data015[11] =\n {\n   { 51.000000000000000, 1, 50, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 41.000000000000000, 1, 50, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 31.000000000000000, 1, 50, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 21.000000000000000, 1, 50, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 11.000000000000000, 1, 50, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 1.0000000000000000, 1, 50, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -9.0000000000000000, 1, 50, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -19.000000000000000, 1, 50, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -29.000000000000000, 1, 50, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -39.000000000000000, 1, 50, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { -49.000000000000000, 1, 50, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler015 = 2.5000000000000020e-13;\n \n // Test data for n=1, m=100.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_assoc_laguerre<double>\n data016[11] =\n {\n   { 101.00000000000000, 1, 100, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 91.000000000000000, 1, 100, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 81.000000000000000, 1, 100, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 71.000000000000000, 1, 100, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 61.000000000000000, 1, 100, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 51.000000000000000, 1, 100, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 41.000000000000000, 1, 100, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 31.000000000000000, 1, 100, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 21.000000000000000, 1, 100, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 11.000000000000000, 1, 100, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 1.0000000000000000, 1, 100, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler016 = 2.5000000000000020e-13;\n \n // Test data for n=2, m=0.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_assoc_laguerre<double>\n data017[11] =\n {\n   { 1.0000000000000000, 2, 0, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 31.000000000000000, 2, 0, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 161.00000000000000, 2, 0, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 391.00000000000000, 2, 0, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 721.00000000000000, 2, 0, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 1151.0000000000000, 2, 0, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 1681.0000000000000, 2, 0, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 2311.0000000000000, 2, 0, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 3041.0000000000000, 2, 0, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 3871.0000000000000, 2, 0, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 4801.0000000000000, 2, 0, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler017 = 2.5000000000000020e-13;\n \n // Test data for n=2, m=1.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_assoc_laguerre<double>\n data018[11] =\n {\n   { 3.0000000000000000, 2, 1, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 23.000000000000000, 2, 1, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 143.00000000000000, 2, 1, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 363.00000000000000, 2, 1, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 683.00000000000000, 2, 1, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 1103.0000000000000, 2, 1, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 1623.0000000000000, 2, 1, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 2243.0000000000000, 2, 1, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 2963.0000000000000, 2, 1, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 3783.0000000000000, 2, 1, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 4703.0000000000000, 2, 1, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler018 = 2.5000000000000020e-13;\n \n // Test data for n=2, m=2.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_assoc_laguerre<double>\n data019[11] =\n {\n   { 6.0000000000000000, 2, 2, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 16.000000000000000, 2, 2, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 126.00000000000000, 2, 2, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 336.00000000000000, 2, 2, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 646.00000000000000, 2, 2, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 1056.0000000000000, 2, 2, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 1566.0000000000000, 2, 2, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 2176.0000000000000, 2, 2, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 2886.0000000000000, 2, 2, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 3696.0000000000000, 2, 2, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 4606.0000000000000, 2, 2, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler019 = 2.5000000000000020e-13;\n \n // Test data for n=2, m=5.\n-// max(|f - f_GSL|): 4.5519144009631418e-15\n+// max(|f - f_GSL|): 4.5519144009631418e-15 at index 1\n // max(|f - f_GSL| / |f_GSL|): 4.5519144009631623e-15\n+// mean(f - f_GSL): 4.1381040008755832e-16\n+// variance(f - f_GSL): 1.8836295194268761e-32\n+// stddev(f - f_GSL): 1.3724538314372823e-16\n const testcase_assoc_laguerre<double>\n data020[11] =\n {\n   { 21.000000000000000, 2, 5, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 0.99999999999999545, 2, 5, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 81.000000000000000, 2, 5, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 261.00000000000000, 2, 5, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 541.00000000000000, 2, 5, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 921.00000000000000, 2, 5, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 1401.0000000000000, 2, 5, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 1981.0000000000000, 2, 5, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 2661.0000000000000, 2, 5, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 3441.0000000000000, 2, 5, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 4321.0000000000000, 2, 5, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler020 = 2.5000000000000020e-13;\n \n // Test data for n=2, m=10.\n-// max(|f - f_GSL|): 3.5527136788005009e-14\n+// max(|f - f_GSL|): 3.5527136788005009e-14 at index 2\n // max(|f - f_GSL| / |f_GSL|): 2.4424906541753385e-15\n+// mean(f - f_GSL): 4.1179181277005809e-15\n+// variance(f - f_GSL): 1.8652974677089562e-30\n+// stddev(f - f_GSL): 1.3657589346985639e-15\n const testcase_assoc_laguerre<double>\n data021[11] =\n {\n   { 66.000000000000000, 2, 10, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { -4.0000000000000098, 2, 10, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 25.999999999999964, 2, 10, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 156.00000000000000, 2, 10, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 386.00000000000000, 2, 10, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 716.00000000000000, 2, 10, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 1146.0000000000000, 2, 10, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 1676.0000000000000, 2, 10, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 2306.0000000000000, 2, 10, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 3036.0000000000000, 2, 10, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 3866.0000000000000, 2, 10, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler021 = 2.5000000000000020e-13;\n \n // Test data for n=2, m=20.\n-// max(|f - f_GSL|): 5.6843418860808015e-13\n+// max(|f - f_GSL|): 5.6843418860808015e-13 at index 4\n // max(|f - f_GSL| / |f_GSL|): 5.9211894646674663e-15\n+// mean(f - f_GSL): -6.0557619525008543e-14\n+// variance(f - f_GSL): 4.0339478107892650e-28\n+// stddev(f - f_GSL): 2.0084690216155350e-14\n const testcase_assoc_laguerre<double>\n data022[11] =\n {\n   { 231.00000000000000, 2, 20, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 61.000000000000206, 2, 20, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { -9.0000000000000053, 2, 20, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 21.000000000000124, 2, 20, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 151.00000000000057, 2, 20, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 381.00000000000000, 2, 20, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 711.00000000000000, 2, 20, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 1141.0000000000000, 2, 20, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 1670.9999999999998, 2, 20, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 2301.0000000000000, 2, 20, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 3031.0000000000000, 2, 20, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler022 = 5.0000000000000039e-13;\n \n // Test data for n=2, m=50.\n-// max(|f - f_GSL|): 3.6379788070917130e-12\n+// max(|f - f_GSL|): 3.6379788070917130e-12 at index 10\n // max(|f - f_GSL| / |f_GSL|): 1.9243865760169750e-14\n+// mean(f - f_GSL): 1.1085274112784562e-12\n+// variance(f - f_GSL): 7.0379368001597960e-25\n+// stddev(f - f_GSL): 8.3892412053533160e-13\n const testcase_assoc_laguerre<double>\n data023[11] =\n {\n   { 1326.0000000000000, 2, 50, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 855.99999999999693, 2, 50, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 485.99999999999835, 2, 50, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 215.99999999999937, 2, 50, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 45.999999999999829, 2, 50, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -23.999999999999538, 2, 50, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 6.0000000000001057, 2, 50, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 135.99999999999963, 2, 50, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 365.99999999999892, 2, 50, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 695.99999999999784, 2, 50, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 1125.9999999999964, 2, 50, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler023 = 1.0000000000000008e-12;\n \n // Test data for n=2, m=100.\n-// max(|f - f_GSL|): 6.5483618527650833e-11\n+// max(|f - f_GSL|): 6.5483618527650833e-11 at index 1\n // max(|f - f_GSL| / |f_GSL|): 1.6416871873157281e-14\n+// mean(f - f_GSL): -2.0930328177696950e-11\n+// variance(f - f_GSL): 4.7796831888707054e-23\n+// stddev(f - f_GSL): 6.9135252866180405e-12\n const testcase_assoc_laguerre<double>\n data024[11] =\n {\n   { 5151.0000000000000, 2, 100, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 4181.0000000000655, 2, 100, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 3311.0000000000518, 2, 100, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 2541.0000000000400, 2, 100, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 1871.0000000000291, 2, 100, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 1301.0000000000207, 2, 100, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 831.00000000001364, 2, 100, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 461.00000000000682, 2, 100, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 191.00000000000250, 2, 100, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 21.000000000000046, 2, 100, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { -48.999999999999915, 2, 100, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler024 = 1.0000000000000008e-12;\n \n // Test data for n=5, m=0.\n-// max(|f - f_GSL|): 7.4505805969238281e-09\n+// max(|f - f_GSL|): 7.4505805969238281e-09 at index 10\n // max(|f - f_GSL| / |f_GSL|): 1.9501553136894460e-16\n+// mean(f - f_GSL): -5.1328573714603078e-10\n+// variance(f - f_GSL): 5.2938665968649395e-18\n+// stddev(f - f_GSL): 2.3008404109944130e-09\n const testcase_assoc_laguerre<double>\n data025[11] =\n {\n   { 1.0000000000000000, 5, 0, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 34.333333333333329, 5, 0, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { -4765.6666666666670, 5, 0, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -74399.000000000000, 5, 0, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -418865.66666666663, 5, 0, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -1498165.6666666665, 5, 0, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -4122299.0000000000, 5, 0, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -9551265.6666666679, 5, 0, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -19595065.666666664, 5, 0, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -36713699.000000000, 5, 0, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { -64117165.666666664, 5, 0, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler025 = 2.5000000000000020e-13;\n \n // Test data for n=5, m=1.\n-// max(|f - f_GSL|): 3.7252902984619141e-09\n+// max(|f - f_GSL|): 3.7252902984619141e-09 at index 8\n // max(|f - f_GSL| / |f_GSL|): 3.1347473636475015e-16\n+// mean(f - f_GSL): -3.6516147681388907e-10\n+// variance(f - f_GSL): 1.4667719456379050e-20\n+// stddev(f - f_GSL): 1.2111036064837331e-10\n const testcase_assoc_laguerre<double>\n data026[11] =\n {\n   { 6.0000000000000000, 5, 1, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 22.666666666666661, 5, 1, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { -2960.6666666666661, 5, 1, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -58944.000000000000, 5, 1, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -357927.33333333326, 5, 1, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -1329910.6666666665, 5, 1, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -3744894.0000000000, 5, 1, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -8812877.3333333321, 5, 1, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -18283860.666666664, 5, 1, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -34547844.000000000, 5, 1, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { -60734827.333333336, 5, 1, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler026 = 2.5000000000000020e-13;\n \n // Test data for n=5, m=2.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_assoc_laguerre<double>\n data027[11] =\n {\n   { 21.000000000000000, 5, 2, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 4.3333333333333339, 5, 2, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { -1679.0000000000000, 5, 2, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -46029.000000000000, 5, 2, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -304045.66666666669, 5, 2, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -1176729.0000000002, 5, 2, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -3395079.0000000000, 5, 2, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -8120095.6666666660, 5, 2, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -17042778.999999996, 5, 2, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -32484129.000000000, 5, 2, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { -57495145.666666664, 5, 2, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler027 = 2.5000000000000020e-13;\n \n // Test data for n=5, m=5.\n-// max(|f - f_GSL|): 7.4505805969238281e-09\n+// max(|f - f_GSL|): 7.4505805969238281e-09 at index 9\n // max(|f - f_GSL| / |f_GSL|): 1.7763568394002536e-15\n+// mean(f - f_GSL): -1.0450849882462617e-09\n+// variance(f - f_GSL): 1.2014228959234583e-19\n+// stddev(f - f_GSL): 3.4661547800458338e-10\n const testcase_assoc_laguerre<double>\n data028[11] =\n {\n   { 252.00000000000000, 5, 5, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { -14.666666666666654, 5, 5, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 51.999999999999908, 5, 5, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -19548.000000000000, 5, 5, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -178814.66666666660, 5, 5, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -797747.99999999977, 5, 5, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -2496348.0000000000, 5, 5, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -6294614.6666666660, 5, 5, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -13712547.999999996, 5, 5, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -26870147.999999993, 5, 5, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { -48587414.666666672, 5, 5, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler028 = 2.5000000000000020e-13;\n \n // Test data for n=5, m=10.\n-// max(|f - f_GSL|): 7.4505805969238281e-09\n+// max(|f - f_GSL|): 7.4505805969238281e-09 at index 10\n // max(|f - f_GSL| / |f_GSL|): 1.9556222085140405e-15\n+// mean(f - f_GSL): -9.4849348577306296e-10\n+// variance(f - f_GSL): 4.6504850481092197e-18\n+// stddev(f - f_GSL): 2.1564983301892953e-09\n const testcase_assoc_laguerre<double>\n data029[11] =\n {\n   { 3003.0000000000000, 5, 10, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 19.666666666666668, 5, 10, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 36.333333333333272, 5, 10, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -1947.0000000000000, 5, 10, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -60930.333333333314, 5, 10, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -381913.66666666651, 5, 10, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -1419897.0000000000, 5, 10, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -3979880.3333333330, 5, 10, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -9316863.6666666642, 5, 10, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -19235847.000000000, 5, 10, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { -36191830.333333328, 5, 10, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler029 = 2.5000000000000020e-13;\n \n // Test data for n=5, m=20.\n-// max(|f - f_GSL|): 1.8626451492309570e-09\n+// max(|f - f_GSL|): 1.8626451492309570e-09 at index 8\n // max(|f - f_GSL| / |f_GSL|): 2.8421709430404088e-15\n+// mean(f - f_GSL): 1.8654330605469030e-10\n+// variance(f - f_GSL): 3.8278245537195241e-21\n+// stddev(f - f_GSL): 6.1869415333584047e-11\n const testcase_assoc_laguerre<double>\n data030[11] =\n {\n   { 53130.000000000000, 5, 20, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 1213.3333333333335, 5, 20, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 129.99999999999963, 5, 20, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -119.99999999999974, 5, 20, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 463.33333333333320, 5, 20, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -48120.000000000015, 5, 20, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -345870.00000000017, 5, 20, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -1342786.6666666667, 5, 20, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -3838870.0000000009, 5, 20, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -9084120.0000000000, 5, 20, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { -18878536.666666668, 5, 20, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler030 = 2.5000000000000020e-13;\n \n // Test data for n=5, m=50.\n-// max(|f - f_GSL|): 5.8207660913467407e-11\n+// max(|f - f_GSL|): 5.8207660913467407e-11 at index 9\n // max(|f - f_GSL| / |f_GSL|): 8.3212917817998576e-15\n+// mean(f - f_GSL): 2.5837917664003642e-12\n+// variance(f - f_GSL): 7.3435778813301465e-25\n+// stddev(f - f_GSL): 8.5694678255596164e-13\n const testcase_assoc_laguerre<double>\n data031[11] =\n {\n   { 3478761.0000000000, 5, 50, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 1154544.3333333335, 5, 50, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 264661.00000000006, 5, 50, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 24111.000000000033, 5, 50, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -2105.6666666666665, 5, 50, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 1010.9999999999916, 5, 50, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -1538.9999999999955, 5, 50, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 5244.3333333333449, 5, 50, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -13639.000000000011, 5, 50, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -243189.00000000006, 5, 50, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { -1118405.6666666667, 5, 50, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler031 = 5.0000000000000039e-13;\n \n // Test data for n=5, m=100.\n-// max(|f - f_GSL|): 1.4901161193847656e-08\n+// max(|f - f_GSL|): 1.4901161193847656e-08 at index 1\n // max(|f - f_GSL| / |f_GSL|): 4.3934583843896481e-16\n+// mean(f - f_GSL): 9.3181866263462735e-10\n+// variance(f - f_GSL): 9.5511462203760402e-20\n+// stddev(f - f_GSL): 3.0904928766098203e-10\n const testcase_assoc_laguerre<double>\n data032[11] =\n {\n   { 96560646.000000000, 5, 100, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 57264262.666666649, 5, 100, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 31841379.333333332, 5, 100, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 16281996.000000000, 5, 100, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 7426112.6666666670, 5, 100, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 2863729.3333333330, 5, 100, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 834846.00000000000, 5, 100, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 129462.66666666663, 5, 100, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -12420.666666666668, 5, 100, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -804.00000000000000, 5, 100, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 4312.6666666666670, 5, 100, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler032 = 2.5000000000000020e-13;\n \n // Test data for n=10, m=0.\n-// max(|f - f_GSL|): 6.1035156250000000e-05\n+// max(|f - f_GSL|): 6.1035156250000000e-05 at index 7\n // max(|f - f_GSL| / |f_GSL|): 6.1315986390500118e-15\n+// mean(f - f_GSL): -5.5892985322068194e-06\n+// variance(f - f_GSL): 3.4364283890538241e-12\n+// stddev(f - f_GSL): 1.8537606072667053e-06\n const testcase_assoc_laguerre<double>\n data033[11] =\n {\n   { 1.0000000000000000, 10, 0, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 27.984126984126977, 10, 0, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 3227.8077601410932, 10, 0, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 15129.571428571455, 10, 0, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 79724066.608465582, 10, 0, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 2037190065.3738980, 10, 0, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 21804200401.000000, 10, 0, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 144688291819.51855, 10, 0, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 703324772760.08276, 10, 0, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 2741055412243.8569, 10, 0, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 9051283795429.5723, 10, 0, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler033 = 5.0000000000000039e-13;\n \n // Test data for n=10, m=1.\n-// max(|f - f_GSL|): 0.0019531250000000000\n+// max(|f - f_GSL|): 0.0019531250000000000 at index 10\n // max(|f - f_GSL| / |f_GSL|): 3.2082933888884751e-16\n+// mean(f - f_GSL): -0.00017647174536266681\n+// variance(f - f_GSL): 3.4721464659347714e-07\n+// stddev(f - f_GSL): 0.00058924922281957846\n const testcase_assoc_laguerre<double>\n data034[11] =\n {\n   { 11.000000000000000, 10, 1, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 14.791887125220455, 10, 1, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 2704.6507936507933, 10, 1, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -182924.71428571423, 10, 1, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 48066036.749559075, 10, 1, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 1486264192.2169311, 10, 1, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 17239562282.428574, 10, 1, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 119837491630.13579, 10, 1, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 600681375251.21167, 10, 1, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 2392908405632.4287, 10, 1, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 8033035722509.2373, 10, 1, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler034 = 2.5000000000000020e-13;\n \n // Test data for n=10, m=2.\n-// max(|f - f_GSL|): 0.00012207031250000000\n+// max(|f - f_GSL|): 0.00012207031250000000 at index 8\n // max(|f - f_GSL| / |f_GSL|): 3.0884259455918855e-16\n+// mean(f - f_GSL): 1.4045021730039894e-05\n+// variance(f - f_GSL): 2.1698889894483716e-11\n+// stddev(f - f_GSL): 4.6582067251769446e-06\n const testcase_assoc_laguerre<double>\n data035[11] =\n {\n   { 66.000000000000000, 10, 2, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { -14.511463844797181, 10, 2, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 1064.5890652557316, 10, 2, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -194569.71428571429, 10, 2, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 27343569.350970022, 10, 2, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 1067807661.6790125, 10, 2, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 13529451580.285711, 10, 2, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 98812724224.641937, 10, 2, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 511482736187.34021, 10, 2, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 2084478393087.4285, 10, 2, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 7117724862237.0752, 10, 2, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler035 = 2.5000000000000020e-13;\n \n // Test data for n=10, m=5.\n-// max(|f - f_GSL|): 0.0019531250000000000\n+// max(|f - f_GSL|): 0.0019531250000000000 at index 10\n // max(|f - f_GSL| / |f_GSL|): 5.4929549774030811e-15\n+// mean(f - f_GSL): 0.00020540323628249655\n+// variance(f - f_GSL): 3.3599844999940669e-07\n+// stddev(f - f_GSL): 0.00057965373284350253\n const testcase_assoc_laguerre<double>\n data036[11] =\n {\n   { 3003.0000000000000, 10, 5, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 11.641975308642031, 10, 5, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { -1137.5643738977069, 10, 5, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -9254.1428571428605, 10, 5, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 2121878.8377425023, 10, 5, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 352060171.43033499, 10, 5, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 6212028560.1428576, 10, 5, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 53782171674.604919, 10, 5, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 309720255837.56775, 10, 5, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 1359043035731.5713, 10, 5, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 4900625954398.9434, 10, 5, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler036 = 5.0000000000000039e-13;\n \n // Test data for n=10, m=10.\n-// max(|f - f_GSL|): 0.00048828125000000000\n+// max(|f - f_GSL|): 0.00048828125000000000 at index 10\n // max(|f - f_GSL| / |f_GSL|): 1.2999856205575476e-15\n+// mean(f - f_GSL): 3.5049890987631279e-05\n+// variance(f - f_GSL): 2.2596053129284716e-08\n+// stddev(f - f_GSL): 0.00015031983611381671\n const testcase_assoc_laguerre<double>\n data037[11] =\n {\n   { 184756.00000000000, 10, 10, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { -210.84303350970018, 10, 10, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 508.38095238095184, 10, 10, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 2098.8571428571431, 10, 10, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -536338.88536155177, 10, 10, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 24865988.804232784, 10, 10, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 1343756013.1428571, 10, 10, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 17298791247.358025, 10, 10, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 124528450897.79892, 10, 10, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 632674413641.71423, 10, 10, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 2533008935405.0298, 10, 10, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler037 = 2.5000000000000020e-13;\n \n // Test data for n=10, m=20.\n-// max(|f - f_GSL|): 1.1444091796875000e-05\n+// max(|f - f_GSL|): 1.1444091796875000e-05 at index 8\n // max(|f - f_GSL| / |f_GSL|): 1.3165826881543491e-14\n+// mean(f - f_GSL): -1.0290407937480433e-06\n+// variance(f - f_GSL): 1.1648174507175886e-13\n+// stddev(f - f_GSL): 3.4129422068320885e-07\n const testcase_assoc_laguerre<double>\n data038[11] =\n {\n   { 30045014.999999993, 10, 20, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { -23087.733686067022, 10, 20, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 207.23985890652330, 10, 20, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 1407.8571428571508, 10, 20, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -44618.156966490322, 10, 20, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 158690.04409171100, 10, 20, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -6870413.5714285728, 10, 20, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 793841351.41975331, 10, 20, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 13358288958.562618, 10, 20, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 106073722407.85715, 10, 20, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 566337213392.42493, 10, 20, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler038 = 1.0000000000000008e-12;\n \n // Test data for n=10, m=50.\n-// max(|f - f_GSL|): 1.7881393432617188e-07\n+// max(|f - f_GSL|): 1.7881393432617188e-07 at index 2\n // max(|f - f_GSL| / |f_GSL|): 1.9220038158581863e-14\n+// mean(f - f_GSL): -1.7959874557246538e-08\n+// variance(f - f_GSL): 1.5426792767859101e-17\n+// stddev(f - f_GSL): 3.9276956052956932e-09\n const testcase_assoc_laguerre<double>\n data039[11] =\n {\n   { 75394027566.000000, 10, 50, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 8048106183.3721361, 10, 50, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 328045023.84832460, 10, 50, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -2568769.7142857178, 10, 50, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 6971.9964726631533, 10, 50, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 136111.41446207993, 10, 50, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -62462.571428570242, 10, 50, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -248167.95061728527, 10, 50, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 1941270.4091710770, 10, 50, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -8643512.5714285765, 10, 50, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { -140863522.18342152, 10, 50, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler039 = 1.0000000000000008e-12;\n \n // Test data for n=10, m=100.\n-// max(|f - f_GSL|): 0.0019531250000000000\n+// max(|f - f_GSL|): 0.0019531250000000000 at index 1\n // max(|f - f_GSL| / |f_GSL|): 8.5796208358610616e-15\n+// mean(f - f_GSL): 0.00016085392880168828\n+// variance(f - f_GSL): 2.8461549974308565e-09\n+// stddev(f - f_GSL): 5.3349367357362886e-05\n const testcase_assoc_laguerre<double>\n data040[11] =\n {\n   { 46897636623981.000, 10, 100, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 16444031323272.084, 10, 100, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 5020343986463.5391, 10, 100, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 1270977490645.2859, 10, 100, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 244835756822.62262, 10, 100, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 29786827693.962959, 10, 100, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 1127612095.2857144, 10, 100, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -66370555.419753075, 10, 100, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 10420852.957671870, 10, 100, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -3373097.5714285718, 10, 100, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 2065423.6807760145, 10, 100, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler040 = 5.0000000000000039e-13;\n \n // Test data for n=20, m=0.\n-// max(|f - f_GSL|): 20.000000000000000\n+// max(|f - f_GSL|): 20.000000000000000 at index 8\n // max(|f - f_GSL| / |f_GSL|): 4.7350442720305269e-15\n+// mean(f - f_GSL): -1.8323417989965736\n+// variance(f - f_GSL): 2754690.9677631622\n+// stddev(f - f_GSL): 1659.7261725246012\n const testcase_assoc_laguerre<double>\n data041[11] =\n {\n   { 1.0000000000000000, 20, 0, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { -11.961333867812119, 20, 0, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 2829.4728613531743, 20, 0, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -18439.424502520938, 20, 0, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 24799805.877530713, 20, 0, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 7551960453.7672548, 20, 0, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -1379223608444.9155, 20, 0, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 165423821874449.94, 20, 0, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 29500368536981676., 20, 0, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 1.1292309514432901e+18, 20, 0, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 2.2061882785931735e+19, 20, 0, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler041 = 2.5000000000000020e-13;\n \n // Test data for n=20, m=1.\n-// max(|f - f_GSL|): 8192.0000000000000\n+// max(|f - f_GSL|): 8192.0000000000000 at index 10\n // max(|f - f_GSL| / |f_GSL|): 2.0583579235866667e-15\n+// mean(f - f_GSL): -744.54973777790485\n+// variance(f - f_GSL): 6101096.7248424273\n+// stddev(f - f_GSL): 2470.0398225215777\n const testcase_assoc_laguerre<double>\n data042[11] =\n {\n   { 21.000000000000000, 20, 1, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 19.900488129734079, 20, 1, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 2208.0318569557585, 20, 1, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 263690.96303121914, 20, 1, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 40667285.630564235, 20, 1, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 1737442572.8115399, 20, 1, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -588280953643.28125, 20, 1, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 45617733778241.328, 20, 1, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 17293487114876864., 20, 1, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 7.6219135858585062e+17, 20, 1, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 1.6037288204336759e+19, 20, 1, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler042 = 2.5000000000000020e-13;\n \n // Test data for n=20, m=2.\n-// max(|f - f_GSL|): 6144.0000000000000\n+// max(|f - f_GSL|): 6144.0000000000000 at index 10\n // max(|f - f_GSL| / |f_GSL|): 9.3068805041852228e-15\n+// mean(f - f_GSL): 610.73011506755233\n+// variance(f - f_GSL): 995562063.33027601\n+// stddev(f - f_GSL): 31552.528636074101\n const testcase_assoc_laguerre<double>\n data043[11] =\n {\n   { 231.00000000000003, 20, 2, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 47.009338065112921, 20, 2, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { -652.51305461728589, 20, 2, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 285388.25895069109, 20, 2, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 28664069.685624730, 20, 2, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -1399631966.3144732, 20, 2, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -115357373248.28194, 20, 2, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -3357730872975.8750, 20, 2, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 9765808962855122.0, 20, 2, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 5.0717292945559181e+17, 20, 2, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 1.1564665701334456e+19, 20, 2, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler043 = 5.0000000000000039e-13;\n \n // Test data for n=20, m=5.\n-// max(|f - f_GSL|): 16.000000000000000\n+// max(|f - f_GSL|): 16.000000000000000 at index 9\n // max(|f - f_GSL| / |f_GSL|): 3.5731302592472765e-15\n+// mean(f - f_GSL): -1.4092810048974798\n+// variance(f - f_GSL): 598.27450725320409\n+// stddev(f - f_GSL): 24.459650595484884\n const testcase_assoc_laguerre<double>\n data044[11] =\n {\n   { 53130.000000000000, 20, 5, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { -158.69554500944142, 20, 5, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 334.08012288038952, 20, 5, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -198372.47662554163, 20, 5, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -13627144.088579426, 20, 5, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -780579985.44731510, 20, 5, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 116648634237.73535, 20, 5, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -12347348707739.742, 20, 5, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 1199516248034090.8, 20, 5, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 1.3451503195078531e+17, 20, 5, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 4.1058904276111483e+18, 20, 5, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler044 = 2.5000000000000020e-13;\n \n // Test data for n=20, m=10.\n-// max(|f - f_GSL|): 64.000000000000000\n+// max(|f - f_GSL|): 64.000000000000000 at index 10\n // max(|f - f_GSL| / |f_GSL|): 1.0709209504860220e-15\n+// mean(f - f_GSL): -5.5440786440316181\n+// variance(f - f_GSL): 376.60778837733284\n+// stddev(f - f_GSL): 19.406385247575933\n const testcase_assoc_laguerre<double>\n data045[11] =\n {\n   { 30045015.000000000, 20, 10, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { -1755.6226861258601, 20, 10, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { -9081.6726644737901, 20, 10, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 95771.650912113109, 20, 10, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 5089151.9272779236, 20, 10, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 97400399.450206712, 20, 10, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -16009352450.477026, 20, 10, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 842271286905.01050, 20, 10, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -79901725466796.938, 20, 10, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 7944103675858637.0, 20, 10, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 5.7429821893388288e+17, 20, 10, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler045 = 2.5000000000000020e-13;\n \n // Test data for n=20, m=20.\n-// max(|f - f_GSL|): 2.1250000000000000\n+// max(|f - f_GSL|): 2.1250000000000000 at index 10\n // max(|f - f_GSL| / |f_GSL|): 1.1968937782285294e-14\n+// mean(f - f_GSL): 0.19344895682429938\n+// variance(f - f_GSL): 0.41039783756558101\n+// stddev(f - f_GSL): 0.64062300736515931\n const testcase_assoc_laguerre<double>\n data046[11] =\n {\n   { 137846528819.99994, 20, 20, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { -136976.49571333229, 20, 20, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 113878.49908041643, 20, 20, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -342529.21778796182, 20, 20, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -350112.66981443466, 20, 20, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -10791735.172977809, 20, 20, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -1038073940.0811402, 20, 20, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 667312550.63616335, 20, 20, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 741537869902.29028, 20, 20, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -32378376755737.418, 20, 20, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { -601760332167937.62, 20, 20, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler046 = 1.0000000000000008e-12;\n \n // Test data for n=20, m=50.\n-// max(|f - f_GSL|): 0.25000000000000000\n+// max(|f - f_GSL|): 0.25000000000000000 at index 1\n // max(|f - f_GSL| / |f_GSL|): 1.2103144092558234e-14\n+// mean(f - f_GSL): -0.022849527272311123\n+// variance(f - f_GSL): 5.7130155161570465e-05\n+// stddev(f - f_GSL): 0.0075584492563997852\n const testcase_assoc_laguerre<double>\n data047[11] =\n {\n   { 1.6188460366265789e+17, 20, 50, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 1599011936804291.5, 20, 50, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { -131273880831.42432, 20, 50, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -3133213093.6903548, 20, 50, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -213935628.04985175, 20, 50, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -47375578.495921060, 20, 50, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -115731015.14034876, 20, 50, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -737415147.29420292, 20, 50, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -2123455626.8621769, 20, 50, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 29801266858.608929, 20, 50, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { -132886631026.82553, 20, 50, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler047 = 1.0000000000000008e-12;\n \n // Test data for n=20, m=100.\n-// max(|f - f_GSL|): 1572864.0000000000\n+// max(|f - f_GSL|): 1572864.0000000000 at index 1\n // max(|f - f_GSL| / |f_GSL|): 3.6621229371267356e-14\n+// mean(f - f_GSL): 137262.28072981400\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_assoc_laguerre<double>\n data048[11] =\n {\n   { 2.9462227291176643e+22, 20, 100, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 3.5777890748701244e+21, 20, 100, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 3.1584925521456759e+20, 20, 100, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 1.7389599388424864e+19, 20, 100, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 4.1401342745980634e+17, 20, 100, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -79359706102062.594, 20, 100, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 22736203650743.145, 20, 100, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 65679006380.095703, 20, 100, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -236263257610.77792, 20, 100, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -38072644585.303101, 20, 100, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 68236474365.173973, 20, 100, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler048 = 2.5000000000000015e-12;\n \n // Test data for n=50, m=0.\n-// max(|f - f_GSL|): 196608.00000000000\n+// max(|f - f_GSL|): 196608.00000000000 at index 10\n // max(|f - f_GSL| / |f_GSL|): 4.2910775919271532e-15\n+// mean(f - f_GSL): -17990.447398879332\n+// variance(f - f_GSL): 27618453284.204639\n+// stddev(f - f_GSL): 166188.00583737876\n const testcase_assoc_laguerre<double>\n data049[11] =\n {\n   { 1.0000000000000000, 50, 0, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 17.534183446338233, 50, 0, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 980.26961889791028, 50, 0, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 293000.50735962362, 50, 0, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -14896937.968694873, 50, 0, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 2513677852.6916871, 50, 0, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -883876565337.99219, 50, 0, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -80967880733583.234, 50, 0, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -8217471769564841.0, 50, 0, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -2.1140031308048891e+18, 50, 0, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { -3.9710103487094692e+20, 50, 0, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler049 = 2.5000000000000020e-13;\n \n // Test data for n=50, m=1.\n-// max(|f - f_GSL|): 311296.00000000000\n+// max(|f - f_GSL|): 311296.00000000000 at index 10\n // max(|f - f_GSL| / |f_GSL|): 4.3113718426975911e-14\n+// mean(f - f_GSL): 28417.096591423862\n+// variance(f - f_GSL): 32927254885.825413\n+// stddev(f - f_GSL): 181458.68644356879\n const testcase_assoc_laguerre<double>\n data050[11] =\n {\n   { 51.000000000000021, 50, 1, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 1.4214573271639575, 50, 1, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { -2574.8072295127827, 50, 1, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 35846.479728359205, 50, 1, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -48263698.768318526, 50, 1, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 6161525870.2738533, 50, 1, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -382655486658.47125, 50, 1, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -109635579833241.72, 50, 1, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -14623805817283490., 50, 1, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -2.0666847190878152e+18, 50, 1, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { -1.4385187953997626e+20, 50, 1, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler050 = 2.5000000000000015e-12;\n \n // Test data for n=50, m=2.\n-// max(|f - f_GSL|): 139264.00000000000\n+// max(|f - f_GSL|): 139264.00000000000 at index 10\n // max(|f - f_GSL| / |f_GSL|): 2.5437687254653283e-15\n+// mean(f - f_GSL): 12649.078840684118\n+// variance(f - f_GSL): 1765904219.6855280\n+// stddev(f - f_GSL): 42022.663167456769\n const testcase_assoc_laguerre<double>\n data051[11] =\n {\n   { 1326.0000000000000, 50, 2, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { -87.860732516444529, 50, 2, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { -5203.2351191780917, 50, 2, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -461059.50012538867, 50, 2, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -30476695.327440590, 50, 2, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 3720804977.9338136, 50, 2, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 362262002434.51453, 50, 2, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -52210917867820.227, 50, 2, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -9567965136901914.0, 50, 2, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -8.9171277517712883e+17, 50, 2, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 5.7231129448806982e+19, 50, 2, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler051 = 2.5000000000000020e-13;\n \n // Test data for n=50, m=5.\n-// max(|f - f_GSL|): 81920.000000000000\n+// max(|f - f_GSL|): 81920.000000000000 at index 10\n // max(|f - f_GSL| / |f_GSL|): 2.6215979818234617e-15\n+// mean(f - f_GSL): -7423.7222822287622\n+// variance(f - f_GSL): 648926959.11275744\n+// stddev(f - f_GSL): 25474.044812568685\n const testcase_assoc_laguerre<double>\n data052[11] =\n {\n   { 3478761.0000000000, 50, 5, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 1055.8381917651498, 50, 5, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 15264.646660345055, 50, 5, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 1229651.8966600848, 50, 5, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 39270451.823656842, 50, 5, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -4424062601.1152029, 50, 5, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -186017434284.19223, 50, 5, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 50972853949302.609, 50, 5, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 6530702754012517.0, 50, 5, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 6.8387592714678029e+17, 50, 5, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 3.9198742504338391e+19, 50, 5, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler052 = 2.5000000000000020e-13;\n \n // Test data for n=50, m=10.\n-// max(|f - f_GSL|): 192.00000000000000\n+// max(|f - f_GSL|): 192.00000000000000 at index 9\n // max(|f - f_GSL| / |f_GSL|): 3.6229303412867937e-15\n+// mean(f - f_GSL): -17.490024036237049\n+// variance(f - f_GSL): 12219580.275082903\n+// stddev(f - f_GSL): 3495.6516238153513\n const testcase_assoc_laguerre<double>\n data053[11] =\n {\n   { 75394027565.999985, 50, 10, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 91833.924098770178, 50, 10, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 330501.87929778261, 50, 10, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 3625088.1635972536, 50, 10, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 213954727.28632012, 50, 10, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -9381006937.7517681, 50, 10, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 535333683777.48615, 50, 10, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 18824406573722.172, 50, 10, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -533858276780013.12, 50, 10, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -52995774666704016., 50, 10, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 6.0504182862448783e+18, 50, 10, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler053 = 2.5000000000000020e-13;\n \n // Test data for n=50, m=20.\n-// max(|f - f_GSL|): 512.00000000000000\n+// max(|f - f_GSL|): 512.00000000000000 at index 10\n // max(|f - f_GSL| / |f_GSL|): 9.6616871455409171e-14\n+// mean(f - f_GSL): -47.364405233074315\n+// variance(f - f_GSL): 23782.450110032125\n+// stddev(f - f_GSL): 154.21559619581973\n const testcase_assoc_laguerre<double>\n data054[11] =\n {\n   { 1.6188460366265779e+17, 50, 20, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { -307637087.25169408, 50, 20, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 12524651.102974586, 50, 20, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -315460483.86210561, 50, 20, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -1889683587.3459988, 50, 20, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 37457044404.200348, 50, 20, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -843831858224.71802, 50, 20, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -92231643172.307495, 50, 20, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 904211757769501.00, 50, 20, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 46508193600283272., 50, 20, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 2.3216887928162719e+18, 50, 20, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler054 = 5.0000000000000029e-12;\n \n // Test data for n=50, m=50.\n-// max(|f - f_GSL|): 989855744.00000000\n+// max(|f - f_GSL|): 989855744.00000000 at index 1\n // max(|f - f_GSL| / |f_GSL|): 1.1139535389485780e-14\n+// mean(f - f_GSL): 89986812.018465906\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_assoc_laguerre<double>\n data055[11] =\n {\n   { 1.0089134454556417e+29, 50, 50, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 1.3822795753070493e+23, 50, 50, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 95817260381628336., 50, 50, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -910798580856015.38, 50, 50, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 50513254049166.922, 50, 50, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 84159703903348.938, 50, 50, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -138805244691822.72, 50, 50, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 181046391269246.25, 50, 50, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 2086884905317107.5, 50, 50, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -2765620139862428.0, 50, 50, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { -1.3706751678146290e+17, 50, 50, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler055 = 1.0000000000000008e-12;\n \n // Test data for n=50, m=100.\n-// max(|f - f_GSL|): 1.8889465931478581e+22\n+// max(|f - f_GSL|): 1.8889465931478581e+22 at index 1\n // max(|f - f_GSL| / |f_GSL|): 2.2737143709403468e-14\n+// mean(f - f_GSL): -1.7004551248566624e+21\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_assoc_laguerre<double>\n data056[11] =\n {\n   { 2.0128660909731929e+40, 50, 100, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 9.3675094807695474e+37, 50, 100, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 1.3009321481877196e+35, 50, 100, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 7.3720026893233823e+30, 50, 100, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -6.0824679079634667e+25, 50, 100, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -6.0053188793543450e+23, 50, 100, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 1.4178129287264692e+22, 50, 100, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -5.4652099341566706e+20, 50, 100, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -1.0817271759263274e+20, 50, 100, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 3.8058734007924195e+19, 50, 100, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 4.7439240848028344e+19, 50, 100, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler056 = 2.5000000000000015e-12;\n \n // Test data for n=100, m=0.\n-// max(|f - f_GSL|): 98304.000000000000\n+// max(|f - f_GSL|): 98304.000000000000 at index 10\n // max(|f - f_GSL| / |f_GSL|): 3.8776197831393928e-15\n+// mean(f - f_GSL): -8865.4606155926431\n+// variance(f - f_GSL): 4058808072.1721206\n+// stddev(f - f_GSL): 63708.775472238682\n const testcase_assoc_laguerre<double>\n data057[11] =\n {\n   { 1.0000000000000000, 100, 0, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 13.277662844303450, 100, 0, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 1854.0367283243388, 100, 0, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 170141.86987046551, 100, 0, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -7272442.3156006960, 100, 0, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 4847420871.2690506, 100, 0, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 693492765740.29688, 100, 0, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 17125518672239.770, 100, 0, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -13763178176383768., 100, 0, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 2.1307220490380173e+18, 100, 0, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { -2.6292260693068916e+20, 100, 0, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler057 = 2.5000000000000020e-13;\n \n // Test data for n=100, m=1.\n-// max(|f - f_GSL|): 245760.00000000000\n+// max(|f - f_GSL|): 245760.00000000000 at index 10\n // max(|f - f_GSL| / |f_GSL|): 1.4500034612453474e-14\n+// mean(f - f_GSL): 22224.249977270934\n+// variance(f - f_GSL): 29644360933.494530\n+// stddev(f - f_GSL): 172175.37841832824\n const testcase_assoc_laguerre<double>\n data058[11] =\n {\n   { 101.00000000000003, 100, 1, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { -14.650661983680420, 100, 1, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 1626.5010939361582, 100, 1, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 417884.77658268728, 100, 1, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -55617646.951649837, 100, 1, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 884829874.26626217, 100, 1, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 154466082750.32202, 100, 1, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -101423973484646.00, 100, 1, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -1388352348671756.8, 100, 1, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 7.8048705513268582e+17, 100, 1, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 1.6948925059042755e+19, 100, 1, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler058 = 1.0000000000000008e-12;\n \n // Test data for n=100, m=2.\n-// max(|f - f_GSL|): 557056.00000000000\n+// max(|f - f_GSL|): 557056.00000000000 at index 10\n // max(|f - f_GSL| / |f_GSL|): 5.1603746667135714e-15\n+// mean(f - f_GSL): 50294.883489425141\n+// variance(f - f_GSL): 2009492413242.1035\n+// stddev(f - f_GSL): 1417565.6645256698\n const testcase_assoc_laguerre<double>\n data059[11] =\n {\n   { 5151.0000000000055, 100, 2, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { -150.22012290951324, 100, 2, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { -7655.0593294049449, 100, 2, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -140996.69276179091, 100, 2, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -38645171.278549351, 100, 2, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -8889263688.2118931, 100, 2, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -1010338971533.3400, 100, 2, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -127582564332943.91, 100, 2, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 15970305694654312., 100, 2, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -1.6019844992862820e+18, 100, 2, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 2.8267024730962955e+20, 100, 2, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler059 = 5.0000000000000039e-13;\n \n // Test data for n=100, m=5.\n-// max(|f - f_GSL|): 393216.00000000000\n+// max(|f - f_GSL|): 393216.00000000000 at index 10\n // max(|f - f_GSL| / |f_GSL|): 8.0946565190235238e-15\n+// mean(f - f_GSL): 35883.277835871675\n+// variance(f - f_GSL): 72845813363.438187\n+// stddev(f - f_GSL): 269899.63572305575\n const testcase_assoc_laguerre<double>\n data060[11] =\n {\n   { 96560646.000000030, 100, 5, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 2430.6732236677612, 100, 5, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 111162.32026994647, 100, 5, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 4036708.2599413628, 100, 5, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -34055982.664405443, 100, 5, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 30110688343.562328, 100, 5, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 2651429940558.2974, 100, 5, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 192108556058943.09, 100, 5, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -25410533973455528., 100, 5, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 2.1072955633564431e+18, 100, 5, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { -2.9434005355877289e+20, 100, 5, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler060 = 5.0000000000000039e-13;\n \n // Test data for n=100, m=10.\n-// max(|f - f_GSL|): 155648.00000000000\n+// max(|f - f_GSL|): 155648.00000000000 at index 10\n // max(|f - f_GSL| / |f_GSL|): 5.1685581852917721e-15\n+// mean(f - f_GSL): 13707.238286828961\n+// variance(f - f_GSL): 5037793089646.2549\n+// stddev(f - f_GSL): 2244502.8602446141\n const testcase_assoc_laguerre<double>\n data061[11] =\n {\n   { 46897636623981.039, 100, 10, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 529208.11550990329, 100, 10, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 7402892.1748803817, 100, 10, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { 88369632.083243579, 100, 10, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 822187797.59096563, 100, 10, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { 180231446033.06866, 100, 10, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { 7922942703798.1309, 100, 10, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { 784424250559042.12, 100, 10, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -16325634720239370., 100, 10, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -1.0879588307443162e+18, 100, 10, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 3.0114394463610642e+19, 100, 10, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler061 = 5.0000000000000039e-13;\n \n // Test data for n=100, m=20.\n-// max(|f - f_GSL|): 524288.00000000000\n+// max(|f - f_GSL|): 524288.00000000000 at index 10\n // max(|f - f_GSL| / |f_GSL|): 3.7005989410347388e-14\n+// mean(f - f_GSL): -46766.623212640938\n+// variance(f - f_GSL): 55764004614002920.\n+// stddev(f - f_GSL): 236144033.61932081\n const testcase_assoc_laguerre<double>\n data062[11] =\n {\n   { 2.9462227291176614e+22, 100, 20, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 313694958939.90405, 100, 20, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 45396489338.096191, 100, 20, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -7215826758.0081253, 100, 20, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 825949194005.88855, 100, 20, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -2764742119971.0811, 100, 20, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -219802198273516.03, 100, 20, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -1699053306145262.0, 100, 20, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { 3.5495709345023846e+17, 100, 20, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { -9.6128675110292419e+18, 100, 20, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 4.3619868422072212e+20, 100, 20, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler062 = 2.5000000000000015e-12;\n \n // Test data for n=100, m=50.\n-// max(|f - f_GSL|): 316659348799488.00\n+// max(|f - f_GSL|): 316659348799488.00 at index 1\n // max(|f - f_GSL| / |f_GSL|): 1.1554040570270351e-14\n+// mean(f - f_GSL): -28787238841995.637\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_assoc_laguerre<double>\n data063[11] =\n {\n   { 2.0128660909731931e+40, 100, 50, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { -4.0151443913473373e+28, 100, 50, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 3.2199632594551924e+22, 100, 50, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -2.7568702092659756e+20, 100, 50, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { 7.5553066015421563e+19, 100, 50, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -2.7651625252387734e+19, 100, 50, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -5.8963680147283804e+19, 100, 50, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -1.8082798163033106e+20, 100, 50, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -3.9044276986817249e+20, 100, 50, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 6.9926310700401904e+21, 100, 50, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { -5.5727272809923646e+22, 100, 50, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler063 = 1.0000000000000008e-12;\n \n // Test data for n=100, m=100.\n-// max(|f - f_GSL|): 2.3819765684465692e+39\n+// max(|f - f_GSL|): 2.3819765684465692e+39 at index 1\n // max(|f - f_GSL| / |f_GSL|): 1.9897039067343855e-14\n+// mean(f - f_GSL): 2.1654330573519588e+38\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_assoc_laguerre<double>\n data064[11] =\n {\n   { 9.0548514656103225e+58, 100, 100, \n-\t  0.0000000000000000 },\n+\t  0.0000000000000000, 0.0 },\n   { 1.3334078033060556e+54, 100, 100, \n-\t  10.000000000000000 },\n+\t  10.000000000000000, 0.0 },\n   { 2.1002639254211340e+46, 100, 100, \n-\t  20.000000000000000 },\n+\t  20.000000000000000, 0.0 },\n   { -1.1073158068796292e+39, 100, 100, \n-\t  30.000000000000000 },\n+\t  30.000000000000000, 0.0 },\n   { -8.3640937363981346e+35, 100, 100, \n-\t  40.000000000000000 },\n+\t  40.000000000000000, 0.0 },\n   { -6.5879339429312686e+32, 100, 100, \n-\t  50.000000000000000 },\n+\t  50.000000000000000, 0.0 },\n   { -2.4190645077698771e+30, 100, 100, \n-\t  60.000000000000000 },\n+\t  60.000000000000000, 0.0 },\n   { -7.9224960465662171e+29, 100, 100, \n-\t  70.000000000000000 },\n+\t  70.000000000000000, 0.0 },\n   { -2.8605772478408694e+29, 100, 100, \n-\t  80.000000000000000 },\n+\t  80.000000000000000, 0.0 },\n   { 2.4149589189609957e+28, 100, 100, \n-\t  90.000000000000000 },\n+\t  90.000000000000000, 0.0 },\n   { 5.1146476014859021e+28, 100, 100, \n-\t  100.00000000000000 },\n+\t  100.00000000000000, 0.0 },\n };\n const double toler064 = 1.0000000000000008e-12;\n \n-template<typename Tp, unsigned int Num>\n+template<typename Ret, unsigned int Num>\n   void\n-  test(const testcase_assoc_laguerre<Tp> (&data)[Num], Tp toler)\n+  test(const testcase_assoc_laguerre<Ret> (&data)[Num], Ret toler)\n   {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n+    bool test __attribute__((unused)) = true;\n+    const Ret eps = std::numeric_limits<Ret>::epsilon();\n+    Ret max_abs_diff = -Ret(1);\n+    Ret max_abs_frac = -Ret(1);\n     unsigned int num_datum = Num;\n     for (unsigned int i = 0; i < num_datum; ++i)\n   \t {\n-\tconst Tp f = std::assoc_laguerre(data[i].n, data[i].m,\n+\tconst Ret f = std::assoc_laguerre(data[i].n, data[i].m,\n \t\t     data[i].x);\n-\tconst Tp f0 = data[i].f0;\n-\tconst Tp diff = f - f0;\n+\tconst Ret f0 = data[i].f0;\n+\tconst Ret diff = f - f0;\n \tif (std::abs(diff) > max_abs_diff)\n \t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n+\tif (std::abs(f0) > Ret(10) * eps\n+\t && std::abs(f) > Ret(10) * eps)\n \t  {\n-\t    const Tp frac = diff / f0;\n+\t    const Ret frac = diff / f0;\n \t    if (std::abs(frac) > max_abs_frac)\n \t      max_abs_frac = std::abs(frac);\n \t  }"}, {"sha": "3c87f52792aa432978efedbdc17f08d82fb1b0df", "filename": "libstdc++-v3/testsuite/special_functions/02_assoc_legendre/check_value.cc", "status": "modified", "additions": 1145, "deletions": 1037, "changes": 2182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F02_assoc_legendre%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F02_assoc_legendre%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F02_assoc_legendre%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}, {"sha": "1358c3e5f2689e60777e3145bceaf4003c016aab", "filename": "libstdc++-v3/testsuite/special_functions/03_beta/check_value.cc", "status": "modified", "additions": 170, "deletions": 140, "changes": 310, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F03_beta%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F03_beta%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F03_beta%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -37,216 +37,246 @@\n #endif\n #include <specfun_testcase.h>\n \n-\n // Test data for x=10.000000000000000.\n-// max(|f - f_GSL|): 2.1175823681357508e-21\n-// max(|f - f_GSL| / |f_GSL|): 9.9466182377295583e-14\n+// max(|f - f_GSL|): 3.5542916945637908e-26 at index 4\n+// max(|f - f_GSL| / |f_GSL|): 2.2331030499795109e-14\n+// mean(f - f_GSL): -1.0876419730734700e-27\n+// variance(f - f_GSL): 1.4090082527689930e-55\n+// stddev(f - f_GSL): 3.7536758687571747e-28\n const testcase_beta<double>\n data001[10] =\n {\n-  { 1.0825088224469029e-06, 10.000000000000000, 10.000000000000000 },\n-  { 4.9925087406346778e-09, 10.000000000000000, 20.000000000000000 },\n-  { 1.5729567312509485e-10, 10.000000000000000, 30.000000000000000 },\n-  { 1.2168673582561288e-11, 10.000000000000000, 40.000000000000000 },\n-  { 1.5916380099863291e-12, 10.000000000000000, 50.000000000000000 },\n-  { 2.9408957938463963e-13, 10.000000000000000, 60.000000000000000 },\n-  { 6.9411637980691676e-14, 10.000000000000000, 70.000000000000000 },\n-  { 1.9665612972502651e-14, 10.000000000000000, 80.000000000000000 },\n-  { 6.4187824828154399e-15, 10.000000000000000, 90.000000000000000 },\n-  { 2.3455339739604842e-15, 10.000000000000000, 100.00000000000000 },\n+  { 1.0825088224469029e-06, 10.000000000000000, 10.000000000000000, 0.0 },\n+  { 4.9925087406346778e-09, 10.000000000000000, 20.000000000000000, 0.0 },\n+  { 1.5729567312509485e-10, 10.000000000000000, 30.000000000000000, 0.0 },\n+  { 1.2168673582561288e-11, 10.000000000000000, 40.000000000000000, 0.0 },\n+  { 1.5916380099863291e-12, 10.000000000000000, 50.000000000000000, 0.0 },\n+  { 2.9408957938463963e-13, 10.000000000000000, 60.000000000000000, 0.0 },\n+  { 6.9411637980691676e-14, 10.000000000000000, 70.000000000000000, 0.0 },\n+  { 1.9665612972502651e-14, 10.000000000000000, 80.000000000000000, 0.0 },\n+  { 6.4187824828154399e-15, 10.000000000000000, 90.000000000000000, 0.0 },\n+  { 2.3455339739604842e-15, 10.000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler001 = 5.0000000000000029e-12;\n+const double toler001 = 2.5000000000000015e-12;\n \n // Test data for x=20.000000000000000.\n-// max(|f - f_GSL|): 1.9025154088719637e-23\n-// max(|f - f_GSL| / |f_GSL|): 3.8107402664859521e-15\n+// max(|f - f_GSL|): 1.9721522630525295e-31 at index 2\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 1.9831607786682398e-32\n+// variance(f - f_GSL): 4.8554947092912269e-65\n+// stddev(f - f_GSL): 6.9681379932455613e-33\n const testcase_beta<double>\n data002[10] =\n {\n-  { 4.9925087406346778e-09, 20.000000000000000, 10.000000000000000 },\n-  { 7.2544445519248436e-13, 20.000000000000000, 20.000000000000000 },\n-  { 1.7681885473062028e-15, 20.000000000000000, 30.000000000000000 },\n-  { 1.7891885039182335e-17, 20.000000000000000, 40.000000000000000 },\n-  { 4.3240677875623635e-19, 20.000000000000000, 50.000000000000000 },\n-  { 1.8857342309689050e-20, 20.000000000000000, 60.000000000000000 },\n-  { 1.2609804003539998e-21, 20.000000000000000, 70.000000000000000 },\n-  { 1.1660809542079041e-22, 20.000000000000000, 80.000000000000000 },\n-  { 1.3907944279729071e-23, 20.000000000000000, 90.000000000000000 },\n-  { 2.0365059099917614e-24, 20.000000000000000, 100.00000000000000 },\n+  { 4.9925087406346778e-09, 20.000000000000000, 10.000000000000000, 0.0 },\n+  { 7.2544445519248436e-13, 20.000000000000000, 20.000000000000000, 0.0 },\n+  { 1.7681885473062028e-15, 20.000000000000000, 30.000000000000000, 0.0 },\n+  { 1.7891885039182335e-17, 20.000000000000000, 40.000000000000000, 0.0 },\n+  { 4.3240677875623635e-19, 20.000000000000000, 50.000000000000000, 0.0 },\n+  { 1.8857342309689053e-20, 20.000000000000000, 60.000000000000000, 0.0 },\n+  { 1.2609804003539998e-21, 20.000000000000000, 70.000000000000000, 0.0 },\n+  { 1.1660809542079041e-22, 20.000000000000000, 80.000000000000000, 0.0 },\n+  { 1.3907944279729071e-23, 20.000000000000000, 90.000000000000000, 0.0 },\n+  { 2.0365059099917614e-24, 20.000000000000000, 100.00000000000000, 0.0 },\n };\n const double toler002 = 2.5000000000000020e-13;\n \n // Test data for x=30.000000000000000.\n-// max(|f - f_GSL|): 9.0472879497987402e-25\n-// max(|f - f_GSL| / |f_GSL|): 5.7517716603708290e-15\n+// max(|f - f_GSL|): 2.5849394142282115e-26 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 1.6433633315345226e-16\n+// mean(f - f_GSL): 2.5849591357601703e-27\n+// variance(f - f_GSL): 8.2493996710493413e-55\n+// stddev(f - f_GSL): 9.0826205860694966e-28\n const testcase_beta<double>\n data003[10] =\n {\n-  { 1.5729567312509485e-10, 30.000000000000000, 10.000000000000000 },\n-  { 1.7681885473062028e-15, 30.000000000000000, 20.000000000000000 },\n-  { 5.6370779640482451e-19, 30.000000000000000, 30.000000000000000 },\n-  { 1.0539424603796547e-21, 30.000000000000000, 40.000000000000000 },\n-  { 6.0118197777273836e-24, 30.000000000000000, 50.000000000000000 },\n-  { 7.4279528553260165e-26, 30.000000000000000, 60.000000000000000 },\n-  { 1.6212207780604767e-27, 30.000000000000000, 70.000000000000000 },\n-  { 5.4783729715317616e-29, 30.000000000000000, 80.000000000000000 },\n-  { 2.6183005659681346e-30, 30.000000000000000, 90.000000000000000 },\n-  { 1.6587948222122229e-31, 30.000000000000000, 100.00000000000000 },\n+  { 1.5729567312509485e-10, 30.000000000000000, 10.000000000000000, 0.0 },\n+  { 1.7681885473062028e-15, 30.000000000000000, 20.000000000000000, 0.0 },\n+  { 5.6370779640482451e-19, 30.000000000000000, 30.000000000000000, 0.0 },\n+  { 1.0539424603796547e-21, 30.000000000000000, 40.000000000000000, 0.0 },\n+  { 6.0118197777273843e-24, 30.000000000000000, 50.000000000000000, 0.0 },\n+  { 7.4279528553260153e-26, 30.000000000000000, 60.000000000000000, 0.0 },\n+  { 1.6212207780604767e-27, 30.000000000000000, 70.000000000000000, 0.0 },\n+  { 5.4783729715317616e-29, 30.000000000000000, 80.000000000000000, 0.0 },\n+  { 2.6183005659681346e-30, 30.000000000000000, 90.000000000000000, 0.0 },\n+  { 1.6587948222122229e-31, 30.000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler003 = 5.0000000000000039e-13;\n+const double toler003 = 2.5000000000000020e-13;\n \n // Test data for x=40.000000000000000.\n-// max(|f - f_GSL|): 2.6495628995839168e-25\n-// max(|f - f_GSL| / |f_GSL|): 2.1773637706750213e-14\n+// max(|f - f_GSL|): 3.9012149246802907e-41 at index 4\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): -3.9072897597887440e-42\n+// variance(f - f_GSL): 1.8848041017931125e-84\n+// stddev(f - f_GSL): 1.3728816780018271e-42\n const testcase_beta<double>\n data004[10] =\n {\n-  { 1.2168673582561288e-11, 40.000000000000000, 10.000000000000000 },\n-  { 1.7891885039182335e-17, 40.000000000000000, 20.000000000000000 },\n-  { 1.0539424603796547e-21, 40.000000000000000, 30.000000000000000 },\n-  { 4.6508509140090659e-25, 40.000000000000000, 40.000000000000000 },\n-  { 7.5161712118557719e-28, 40.000000000000000, 50.000000000000000 },\n-  { 3.0311331979886071e-30, 40.000000000000000, 60.000000000000000 },\n-  { 2.4175035070466313e-32, 40.000000000000000, 70.000000000000000 },\n-  { 3.2734839142758369e-34, 40.000000000000000, 80.000000000000000 },\n-  { 6.7690629601315579e-36, 40.000000000000000, 90.000000000000000 },\n-  { 1.9797337118812366e-37, 40.000000000000000, 100.00000000000000 },\n+  { 1.2168673582561288e-11, 40.000000000000000, 10.000000000000000, 0.0 },\n+  { 1.7891885039182335e-17, 40.000000000000000, 20.000000000000000, 0.0 },\n+  { 1.0539424603796547e-21, 40.000000000000000, 30.000000000000000, 0.0 },\n+  { 4.6508509140090659e-25, 40.000000000000000, 40.000000000000000, 0.0 },\n+  { 7.5161712118557728e-28, 40.000000000000000, 50.000000000000000, 0.0 },\n+  { 3.0311331979886071e-30, 40.000000000000000, 60.000000000000000, 0.0 },\n+  { 2.4175035070466313e-32, 40.000000000000000, 70.000000000000000, 0.0 },\n+  { 3.2734839142758369e-34, 40.000000000000000, 80.000000000000000, 0.0 },\n+  { 6.7690629601315579e-36, 40.000000000000000, 90.000000000000000, 0.0 },\n+  { 1.9797337118810115e-37, 40.000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler004 = 2.5000000000000015e-12;\n+const double toler004 = 2.5000000000000020e-13;\n \n // Test data for x=50.000000000000000.\n-// max(|f - f_GSL|): 2.4603755039546938e-32\n-// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 3.5542916945637908e-26 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 2.2331030499795109e-14\n+// mean(f - f_GSL): -3.5542916415910235e-27\n+// variance(f - f_GSL): 1.5596282806770138e-54\n+// stddev(f - f_GSL): 1.2488507839918322e-27\n const testcase_beta<double>\n data005[10] =\n {\n-  { 1.5916380099863291e-12, 50.000000000000000, 10.000000000000000 },\n-  { 4.3240677875623635e-19, 50.000000000000000, 20.000000000000000 },\n-  { 6.0118197777273836e-24, 50.000000000000000, 30.000000000000000 },\n-  { 7.5161712118557719e-28, 50.000000000000000, 40.000000000000000 },\n-  { 3.9646612085674138e-31, 50.000000000000000, 50.000000000000000 },\n-  { 5.8425643906418403e-34, 50.000000000000000, 60.000000000000000 },\n-  { 1.8672362180783552e-36, 50.000000000000000, 70.000000000000000 },\n-  { 1.0939382296458962e-38, 50.000000000000000, 80.000000000000000 },\n-  { 1.0442781609881063e-40, 50.000000000000000, 90.000000000000000 },\n-  { 1.4904121110954370e-42, 50.000000000000000, 100.00000000000000 },\n+  { 1.5916380099863291e-12, 50.000000000000000, 10.000000000000000, 0.0 },\n+  { 4.3240677875623635e-19, 50.000000000000000, 20.000000000000000, 0.0 },\n+  { 6.0118197777273843e-24, 50.000000000000000, 30.000000000000000, 0.0 },\n+  { 7.5161712118557728e-28, 50.000000000000000, 40.000000000000000, 0.0 },\n+  { 3.9646612085674138e-31, 50.000000000000000, 50.000000000000000, 0.0 },\n+  { 5.8425643906418403e-34, 50.000000000000000, 60.000000000000000, 0.0 },\n+  { 1.8672362180783552e-36, 50.000000000000000, 70.000000000000000, 0.0 },\n+  { 1.0939382296458963e-38, 50.000000000000000, 80.000000000000000, 0.0 },\n+  { 1.0442781609879874e-40, 50.000000000000000, 90.000000000000000, 0.0 },\n+  { 1.4904121110954370e-42, 50.000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler005 = 2.5000000000000020e-13;\n+const double toler005 = 2.5000000000000015e-12;\n \n // Test data for x=60.000000000000000.\n-// max(|f - f_GSL|): 2.1911400503418824e-26\n-// max(|f - f_GSL| / |f_GSL|): 7.4505871813842522e-14\n+// max(|f - f_GSL|): 9.0876776281460560e-28 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 3.0901052826017635e-15\n+// mean(f - f_GSL): -9.0876709777057221e-29\n+// variance(f - f_GSL): 1.0195773308522824e-57\n+// stddev(f - f_GSL): 3.1930821017510377e-29\n const testcase_beta<double>\n data006[10] =\n {\n-  { 2.9408957938463963e-13, 60.000000000000000, 10.000000000000000 },\n-  { 1.8857342309689050e-20, 60.000000000000000, 20.000000000000000 },\n-  { 7.4279528553260165e-26, 60.000000000000000, 30.000000000000000 },\n-  { 3.0311331979886071e-30, 60.000000000000000, 40.000000000000000 },\n-  { 5.8425643906418403e-34, 60.000000000000000, 50.000000000000000 },\n-  { 3.4501231469782229e-37, 60.000000000000000, 60.000000000000000 },\n-  { 4.7706855386086599e-40, 60.000000000000000, 70.000000000000000 },\n-  { 1.2902663809722593e-42, 60.000000000000000, 80.000000000000000 },\n-  { 6.0105571058570508e-45, 60.000000000000000, 90.000000000000000 },\n-  { 4.3922898898347209e-47, 60.000000000000000, 100.00000000000000 },\n+  { 2.9408957938463963e-13, 60.000000000000000, 10.000000000000000, 0.0 },\n+  { 1.8857342309689053e-20, 60.000000000000000, 20.000000000000000, 0.0 },\n+  { 7.4279528553260153e-26, 60.000000000000000, 30.000000000000000, 0.0 },\n+  { 3.0311331979886071e-30, 60.000000000000000, 40.000000000000000, 0.0 },\n+  { 5.8425643906418403e-34, 60.000000000000000, 50.000000000000000, 0.0 },\n+  { 3.4501231469782229e-37, 60.000000000000000, 60.000000000000000, 0.0 },\n+  { 4.7706855386086599e-40, 60.000000000000000, 70.000000000000000, 0.0 },\n+  { 1.2902663809721126e-42, 60.000000000000000, 80.000000000000000, 0.0 },\n+  { 6.0105571058570508e-45, 60.000000000000000, 90.000000000000000, 0.0 },\n+  { 4.3922898898347209e-47, 60.000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler006 = 5.0000000000000029e-12;\n+const double toler006 = 2.5000000000000020e-13;\n \n // Test data for x=70.000000000000000.\n-// max(|f - f_GSL|): 6.9041106424942953e-27\n-// max(|f - f_GSL| / |f_GSL|): 9.9466182377295583e-14\n+// max(|f - f_GSL|): 1.7670484276950664e-28 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 2.5457523825998871e-15\n+// mean(f - f_GSL): -1.7670492778129898e-29\n+// variance(f - f_GSL): 3.8548927780486536e-59\n+// stddev(f - f_GSL): 6.2087782840496516e-30\n const testcase_beta<double>\n data007[10] =\n {\n-  { 6.9411637980691676e-14, 70.000000000000000, 10.000000000000000 },\n-  { 1.2609804003539998e-21, 70.000000000000000, 20.000000000000000 },\n-  { 1.6212207780604767e-27, 70.000000000000000, 30.000000000000000 },\n-  { 2.4175035070466313e-32, 70.000000000000000, 40.000000000000000 },\n-  { 1.8672362180783552e-36, 70.000000000000000, 50.000000000000000 },\n-  { 4.7706855386086599e-40, 70.000000000000000, 60.000000000000000 },\n-  { 3.0453137143486369e-43, 70.000000000000000, 70.000000000000000 },\n-  { 4.0192274082013779e-46, 70.000000000000000, 80.000000000000000 },\n-  { 9.5865870063501807e-49, 70.000000000000000, 90.000000000000000 },\n-  { 3.7409127305819802e-51, 70.000000000000000, 100.00000000000000 },\n+  { 6.9411637980691676e-14, 70.000000000000000, 10.000000000000000, 0.0 },\n+  { 1.2609804003539998e-21, 70.000000000000000, 20.000000000000000, 0.0 },\n+  { 1.6212207780604767e-27, 70.000000000000000, 30.000000000000000, 0.0 },\n+  { 2.4175035070466313e-32, 70.000000000000000, 40.000000000000000, 0.0 },\n+  { 1.8672362180783552e-36, 70.000000000000000, 50.000000000000000, 0.0 },\n+  { 4.7706855386086599e-40, 70.000000000000000, 60.000000000000000, 0.0 },\n+  { 3.0453137143482908e-43, 70.000000000000000, 70.000000000000000, 0.0 },\n+  { 4.0192274082013779e-46, 70.000000000000000, 80.000000000000000, 0.0 },\n+  { 9.5865870063501807e-49, 70.000000000000000, 90.000000000000000, 0.0 },\n+  { 3.7409127305819802e-51, 70.000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler007 = 5.0000000000000029e-12;\n+const double toler007 = 2.5000000000000020e-13;\n \n // Test data for x=80.000000000000000.\n-// max(|f - f_GSL|): 1.6786960063103131e-27\n-// max(|f - f_GSL| / |f_GSL|): 8.5361997546557118e-14\n+// max(|f - f_GSL|): 5.3642541555028803e-29 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 2.7277330043072765e-15\n+// mean(f - f_GSL): -5.3642549571904701e-30\n+// variance(f - f_GSL): 3.5524976846595722e-60\n+// stddev(f - f_GSL): 1.8848070682856566e-30\n const testcase_beta<double>\n data008[10] =\n {\n-  { 1.9665612972502651e-14, 80.000000000000000, 10.000000000000000 },\n-  { 1.1660809542079041e-22, 80.000000000000000, 20.000000000000000 },\n-  { 5.4783729715317616e-29, 80.000000000000000, 30.000000000000000 },\n-  { 3.2734839142758369e-34, 80.000000000000000, 40.000000000000000 },\n-  { 1.0939382296458962e-38, 80.000000000000000, 50.000000000000000 },\n-  { 1.2902663809722593e-42, 80.000000000000000, 60.000000000000000 },\n-  { 4.0192274082013779e-46, 80.000000000000000, 70.000000000000000 },\n-  { 2.7160590828669411e-49, 80.000000000000000, 80.000000000000000 },\n-  { 3.4593773902125368e-52, 80.000000000000000, 90.000000000000000 },\n-  { 7.4807039968503468e-55, 80.000000000000000, 100.00000000000000 },\n+  { 1.9665612972502651e-14, 80.000000000000000, 10.000000000000000, 0.0 },\n+  { 1.1660809542079041e-22, 80.000000000000000, 20.000000000000000, 0.0 },\n+  { 5.4783729715317616e-29, 80.000000000000000, 30.000000000000000, 0.0 },\n+  { 3.2734839142758369e-34, 80.000000000000000, 40.000000000000000, 0.0 },\n+  { 1.0939382296458963e-38, 80.000000000000000, 50.000000000000000, 0.0 },\n+  { 1.2902663809721126e-42, 80.000000000000000, 60.000000000000000, 0.0 },\n+  { 4.0192274082013779e-46, 80.000000000000000, 70.000000000000000, 0.0 },\n+  { 2.7160590828669411e-49, 80.000000000000000, 80.000000000000000, 0.0 },\n+  { 3.4593773902125368e-52, 80.000000000000000, 90.000000000000000, 0.0 },\n+  { 7.4807039968503468e-55, 80.000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler008 = 5.0000000000000029e-12;\n+const double toler008 = 2.5000000000000020e-13;\n \n // Test data for x=90.000000000000000.\n-// max(|f - f_GSL|): 2.7373473411169110e-28\n-// max(|f - f_GSL| / |f_GSL|): 4.2645896608047095e-14\n+// max(|f - f_GSL|): 2.4454688061851366e-29 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 3.8098639621021905e-15\n+// mean(f - f_GSL): -2.4454688799474037e-30\n+// variance(f - f_GSL): 7.3831086948039631e-61\n+// stddev(f - f_GSL): 8.5925017863274033e-31\n const testcase_beta<double>\n data009[10] =\n {\n-  { 6.4187824828154399e-15, 90.000000000000000, 10.000000000000000 },\n-  { 1.3907944279729071e-23, 90.000000000000000, 20.000000000000000 },\n-  { 2.6183005659681346e-30, 90.000000000000000, 30.000000000000000 },\n-  { 6.7690629601315579e-36, 90.000000000000000, 40.000000000000000 },\n-  { 1.0442781609881063e-40, 90.000000000000000, 50.000000000000000 },\n-  { 6.0105571058570508e-45, 90.000000000000000, 60.000000000000000 },\n-  { 9.5865870063501807e-49, 90.000000000000000, 70.000000000000000 },\n-  { 3.4593773902125368e-52, 90.000000000000000, 80.000000000000000 },\n-  { 2.4416737907558032e-55, 90.000000000000000, 90.000000000000000 },\n-  { 3.0238531916564246e-58, 90.000000000000000, 100.00000000000000 },\n+  { 6.4187824828154399e-15, 90.000000000000000, 10.000000000000000, 0.0 },\n+  { 1.3907944279729071e-23, 90.000000000000000, 20.000000000000000, 0.0 },\n+  { 2.6183005659681346e-30, 90.000000000000000, 30.000000000000000, 0.0 },\n+  { 6.7690629601315579e-36, 90.000000000000000, 40.000000000000000, 0.0 },\n+  { 1.0442781609879874e-40, 90.000000000000000, 50.000000000000000, 0.0 },\n+  { 6.0105571058570508e-45, 90.000000000000000, 60.000000000000000, 0.0 },\n+  { 9.5865870063501807e-49, 90.000000000000000, 70.000000000000000, 0.0 },\n+  { 3.4593773902125368e-52, 90.000000000000000, 80.000000000000000, 0.0 },\n+  { 2.4416737907558036e-55, 90.000000000000000, 90.000000000000000, 0.0 },\n+  { 3.0238531916564250e-58, 90.000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler009 = 2.5000000000000015e-12;\n+const double toler009 = 2.5000000000000020e-13;\n \n // Test data for x=100.00000000000000.\n-// max(|f - f_GSL|): 1.6960509462251754e-29\n-// max(|f - f_GSL| / |f_GSL|): 7.2309800883478868e-15\n+// max(|f - f_GSL|): 1.9327092177914789e-29 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 8.2399540541638715e-15\n+// mean(f - f_GSL): -1.9327092238526215e-30\n+// variance(f - f_GSL): 4.6115616592160521e-61\n+// stddev(f - f_GSL): 6.7908480024339023e-31\n const testcase_beta<double>\n data010[10] =\n {\n-  { 2.3455339739604842e-15, 100.00000000000000, 10.000000000000000 },\n-  { 2.0365059099917614e-24, 100.00000000000000, 20.000000000000000 },\n-  { 1.6587948222122229e-31, 100.00000000000000, 30.000000000000000 },\n-  { 1.9797337118812366e-37, 100.00000000000000, 40.000000000000000 },\n-  { 1.4904121110954370e-42, 100.00000000000000, 50.000000000000000 },\n-  { 4.3922898898347209e-47, 100.00000000000000, 60.000000000000000 },\n-  { 3.7409127305819802e-51, 100.00000000000000, 70.000000000000000 },\n-  { 7.4807039968503468e-55, 100.00000000000000, 80.000000000000000 },\n-  { 3.0238531916564246e-58, 100.00000000000000, 90.000000000000000 },\n-  { 2.2087606931991853e-61, 100.00000000000000, 100.00000000000000 },\n+  { 2.3455339739604842e-15, 100.00000000000000, 10.000000000000000, 0.0 },\n+  { 2.0365059099917614e-24, 100.00000000000000, 20.000000000000000, 0.0 },\n+  { 1.6587948222122229e-31, 100.00000000000000, 30.000000000000000, 0.0 },\n+  { 1.9797337118810115e-37, 100.00000000000000, 40.000000000000000, 0.0 },\n+  { 1.4904121110954370e-42, 100.00000000000000, 50.000000000000000, 0.0 },\n+  { 4.3922898898347209e-47, 100.00000000000000, 60.000000000000000, 0.0 },\n+  { 3.7409127305819802e-51, 100.00000000000000, 70.000000000000000, 0.0 },\n+  { 7.4807039968503468e-55, 100.00000000000000, 80.000000000000000, 0.0 },\n+  { 3.0238531916564250e-58, 100.00000000000000, 90.000000000000000, 0.0 },\n+  { 2.2087606931991849e-61, 100.00000000000000, 100.00000000000000, 0.0 },\n };\n const double toler010 = 5.0000000000000039e-13;\n \n-template<typename Tp, unsigned int Num>\n+template<typename Ret, unsigned int Num>\n   void\n-  test(const testcase_beta<Tp> (&data)[Num], Tp toler)\n+  test(const testcase_beta<Ret> (&data)[Num], Ret toler)\n   {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n+    bool test __attribute__((unused)) = true;\n+    const Ret eps = std::numeric_limits<Ret>::epsilon();\n+    Ret max_abs_diff = -Ret(1);\n+    Ret max_abs_frac = -Ret(1);\n     unsigned int num_datum = Num;\n     for (unsigned int i = 0; i < num_datum; ++i)\n       {\n-\tconst Tp f = std::beta(data[i].x, data[i].y);\n-\tconst Tp f0 = data[i].f0;\n-\tconst Tp diff = f - f0;\n+\tconst Ret f = std::beta(data[i].x, data[i].y);\n+\tconst Ret f0 = data[i].f0;\n+\tconst Ret diff = f - f0;\n \tif (std::abs(diff) > max_abs_diff)\n \t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n+\tif (std::abs(f0) > Ret(10) * eps\n+\t && std::abs(f) > Ret(10) * eps)\n \t  {\n-\t    const Tp frac = diff / f0;\n+\t    const Ret frac = diff / f0;\n \t    if (std::abs(frac) > max_abs_frac)\n \t      max_abs_frac = std::abs(frac);\n \t  }"}, {"sha": "c30be860f92b745560d107c6f0f3e1e54b2dc948", "filename": "libstdc++-v3/testsuite/special_functions/04_comp_ellint_1/check_value.cc", "status": "modified", "additions": 36, "deletions": 32, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F04_comp_ellint_1%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F04_comp_ellint_1%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F04_comp_ellint_1%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -39,52 +39,56 @@\n #include <specfun_testcase.h>\n \n // Test data.\n-// max(|f - f_GSL|): 6.6613381477509392e-16\n-// max(|f - f_GSL| / |f_GSL|): 4.0617918857203532e-16\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 18\n+// max(|f - f_Boost| / |f_Boost|): 1.9472906870017937e-16\n+// mean(f - f_Boost): -1.1686558153949016e-17\n+// variance(f - f_Boost): 1.2181788466954587e-32\n+// stddev(f - f_Boost): 1.1037113964689586e-16\n const testcase_comp_ellint_1<double>\n data001[19] =\n {\n-  { 2.2805491384227703, -0.90000000000000002 },\n-  { 1.9953027776647296, -0.80000000000000004 },\n-  { 1.8456939983747236, -0.69999999999999996 },\n-  { 1.7507538029157526, -0.59999999999999998 },\n-  { 1.6857503548125963, -0.50000000000000000 },\n-  { 1.6399998658645112, -0.40000000000000002 },\n-  { 1.6080486199305128, -0.30000000000000004 },\n-  { 1.5868678474541660, -0.19999999999999996 },\n-  { 1.5747455615173562, -0.099999999999999978 },\n-  { 1.5707963267948966, 0.0000000000000000 },\n-  { 1.5747455615173562, 0.10000000000000009 },\n-  { 1.5868678474541660, 0.19999999999999996 },\n-  { 1.6080486199305128, 0.30000000000000004 },\n-  { 1.6399998658645112, 0.39999999999999991 },\n-  { 1.6857503548125963, 0.50000000000000000 },\n-  { 1.7507538029157526, 0.60000000000000009 },\n-  { 1.8456939983747236, 0.69999999999999996 },\n-  { 1.9953027776647296, 0.80000000000000004 },\n-  { 2.2805491384227703, 0.89999999999999991 },\n+  { 2.2805491384227703, -0.90000000000000002, 0.0 },\n+  { 1.9953027776647294, -0.80000000000000004, 0.0 },\n+  { 1.8456939983747234, -0.69999999999999996, 0.0 },\n+  { 1.7507538029157526, -0.59999999999999998, 0.0 },\n+  { 1.6857503548125961, -0.50000000000000000, 0.0 },\n+  { 1.6399998658645112, -0.39999999999999991, 0.0 },\n+  { 1.6080486199305128, -0.29999999999999993, 0.0 },\n+  { 1.5868678474541662, -0.19999999999999996, 0.0 },\n+  { 1.5747455615173560, -0.099999999999999978, 0.0 },\n+  { 1.5707963267948966, 0.0000000000000000, 0.0 },\n+  { 1.5747455615173560, 0.10000000000000009, 0.0 },\n+  { 1.5868678474541662, 0.20000000000000018, 0.0 },\n+  { 1.6080486199305128, 0.30000000000000004, 0.0 },\n+  { 1.6399998658645112, 0.40000000000000013, 0.0 },\n+  { 1.6857503548125961, 0.50000000000000000, 0.0 },\n+  { 1.7507538029157526, 0.60000000000000009, 0.0 },\n+  { 1.8456939983747238, 0.70000000000000018, 0.0 },\n+  { 1.9953027776647294, 0.80000000000000004, 0.0 },\n+  { 2.2805491384227707, 0.90000000000000013, 0.0 },\n };\n const double toler001 = 2.5000000000000020e-13;\n \n-template<typename Tp, unsigned int Num>\n+template<typename Ret, unsigned int Num>\n   void\n-  test(const testcase_comp_ellint_1<Tp> (&data)[Num], Tp toler)\n+  test(const testcase_comp_ellint_1<Ret> (&data)[Num], Ret toler)\n   {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n+    bool test __attribute__((unused)) = true;\n+    const Ret eps = std::numeric_limits<Ret>::epsilon();\n+    Ret max_abs_diff = -Ret(1);\n+    Ret max_abs_frac = -Ret(1);\n     unsigned int num_datum = Num;\n     for (unsigned int i = 0; i < num_datum; ++i)\n       {\n-\tconst Tp f = std::comp_ellint_1(data[i].k);\n-\tconst Tp f0 = data[i].f0;\n-\tconst Tp diff = f - f0;\n+\tconst Ret f = std::comp_ellint_1(data[i].k);\n+\tconst Ret f0 = data[i].f0;\n+\tconst Ret diff = f - f0;\n \tif (std::abs(diff) > max_abs_diff)\n \t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n+\tif (std::abs(f0) > Ret(10) * eps\n+\t && std::abs(f) > Ret(10) * eps)\n \t  {\n-\t    const Tp frac = diff / f0;\n+\t    const Ret frac = diff / f0;\n \t    if (std::abs(frac) > max_abs_frac)\n \t      max_abs_frac = std::abs(frac);\n \t  }"}, {"sha": "3f7dbc7da0c761492bc742e3eff37963dcb6a4aa", "filename": "libstdc++-v3/testsuite/special_functions/05_comp_ellint_2/check_value.cc", "status": "modified", "additions": 36, "deletions": 32, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F05_comp_ellint_2%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F05_comp_ellint_2%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F05_comp_ellint_2%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -39,52 +39,56 @@\n #include <specfun_testcase.h>\n \n // Test data.\n-// max(|f - f_GSL|): 6.6613381477509392e-16\n-// max(|f - f_GSL| / |f_GSL|): 4.4233707954398090e-16\n+// max(|f - f_Boost|): 1.1102230246251565e-15 at index 13\n+// max(|f - f_Boost| / |f_Boost|): 7.3722846590663481e-16\n+// mean(f - f_Boost): 1.7529837230923525e-16\n+// variance(f - f_Boost): 1.8020397140465364e-33\n+// stddev(f - f_Boost): 4.2450438325729176e-17\n const testcase_comp_ellint_2<double>\n data001[19] =\n {\n-  { 1.1716970527816140, -0.90000000000000002 },\n-  { 1.2763499431699064, -0.80000000000000004 },\n-  { 1.3556611355719554, -0.69999999999999996 },\n-  { 1.4180833944487241, -0.59999999999999998 },\n-  { 1.4674622093394274, -0.50000000000000000 },\n-  { 1.5059416123600402, -0.40000000000000002 },\n-  { 1.5348334649232491, -0.30000000000000004 },\n-  { 1.5549685462425291, -0.19999999999999996 },\n-  { 1.5668619420216685, -0.099999999999999978 },\n-  { 1.5707963267948966, 0.0000000000000000 },\n-  { 1.5668619420216685, 0.10000000000000009 },\n-  { 1.5549685462425291, 0.19999999999999996 },\n-  { 1.5348334649232491, 0.30000000000000004 },\n-  { 1.5059416123600404, 0.39999999999999991 },\n-  { 1.4674622093394274, 0.50000000000000000 },\n-  { 1.4180833944487241, 0.60000000000000009 },\n-  { 1.3556611355719554, 0.69999999999999996 },\n-  { 1.2763499431699064, 0.80000000000000004 },\n-  { 1.1716970527816144, 0.89999999999999991 },\n+  { 1.1716970527816142, -0.90000000000000002, 0.0 },\n+  { 1.2763499431699064, -0.80000000000000004, 0.0 },\n+  { 1.3556611355719554, -0.69999999999999996, 0.0 },\n+  { 1.4180833944487243, -0.59999999999999998, 0.0 },\n+  { 1.4674622093394272, -0.50000000000000000, 0.0 },\n+  { 1.5059416123600404, -0.39999999999999991, 0.0 },\n+  { 1.5348334649232491, -0.29999999999999993, 0.0 },\n+  { 1.5549685462425293, -0.19999999999999996, 0.0 },\n+  { 1.5668619420216683, -0.099999999999999978, 0.0 },\n+  { 1.5707963267948966, 0.0000000000000000, 0.0 },\n+  { 1.5668619420216683, 0.10000000000000009, 0.0 },\n+  { 1.5549685462425293, 0.20000000000000018, 0.0 },\n+  { 1.5348334649232491, 0.30000000000000004, 0.0 },\n+  { 1.5059416123600402, 0.40000000000000013, 0.0 },\n+  { 1.4674622093394272, 0.50000000000000000, 0.0 },\n+  { 1.4180833944487241, 0.60000000000000009, 0.0 },\n+  { 1.3556611355719554, 0.70000000000000018, 0.0 },\n+  { 1.2763499431699064, 0.80000000000000004, 0.0 },\n+  { 1.1716970527816140, 0.90000000000000013, 0.0 },\n };\n const double toler001 = 2.5000000000000020e-13;\n \n-template<typename Tp, unsigned int Num>\n+template<typename Ret, unsigned int Num>\n   void\n-  test(const testcase_comp_ellint_2<Tp> (&data)[Num], Tp toler)\n+  test(const testcase_comp_ellint_2<Ret> (&data)[Num], Ret toler)\n   {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n+    bool test __attribute__((unused)) = true;\n+    const Ret eps = std::numeric_limits<Ret>::epsilon();\n+    Ret max_abs_diff = -Ret(1);\n+    Ret max_abs_frac = -Ret(1);\n     unsigned int num_datum = Num;\n     for (unsigned int i = 0; i < num_datum; ++i)\n       {\n-\tconst Tp f = std::comp_ellint_2(data[i].k);\n-\tconst Tp f0 = data[i].f0;\n-\tconst Tp diff = f - f0;\n+\tconst Ret f = std::comp_ellint_2(data[i].k);\n+\tconst Ret f0 = data[i].f0;\n+\tconst Ret diff = f - f0;\n \tif (std::abs(diff) > max_abs_diff)\n \t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n+\tif (std::abs(f0) > Ret(10) * eps\n+\t && std::abs(f) > Ret(10) * eps)\n \t  {\n-\t    const Tp frac = diff / f0;\n+\t    const Ret frac = diff / f0;\n \t    if (std::abs(frac) > max_abs_frac)\n \t      max_abs_frac = std::abs(frac);\n \t  }"}, {"sha": "8594d44b16adeb6d3a7a56aca94de7540be8a614", "filename": "libstdc++-v3/testsuite/special_functions/06_comp_ellint_3/check_value.cc", "status": "modified", "additions": 303, "deletions": 246, "changes": 549, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F06_comp_ellint_3%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F06_comp_ellint_3%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F06_comp_ellint_3%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -37,387 +37,444 @@\n #endif\n #include <specfun_testcase.h>\n \n-\n // Test data for k=-0.90000000000000002.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 2.6751587294384150e-16\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 5\n+// max(|f - f_Boost| / |f_Boost|): 1.2838262090802751e-16\n+// mean(f - f_Boost): 4.4408920985006264e-17\n+// variance(f - f_Boost): 2.4347558803117648e-34\n+// stddev(f - f_Boost): 1.5603704304785339e-17\n const testcase_comp_ellint_3<double>\n data001[10] =\n {\n-  { 2.2805491384227703, -0.90000000000000002, 0.0000000000000000 },\n-  { 2.1537868513875287, -0.90000000000000002, 0.10000000000000001 },\n-  { 2.0443194576468890, -0.90000000000000002, 0.20000000000000001 },\n-  { 1.9486280260314426, -0.90000000000000002, 0.29999999999999999 },\n-  { 1.8641114227238349, -0.90000000000000002, 0.40000000000000002 },\n-  { 1.7888013241937861, -0.90000000000000002, 0.50000000000000000 },\n-  { 1.7211781128919523, -0.90000000000000002, 0.59999999999999998 },\n-  { 1.6600480747670940, -0.90000000000000002, 0.69999999999999996 },\n-  { 1.6044591960982202, -0.90000000000000002, 0.80000000000000004 },\n-  { 1.5536420236310946, -0.90000000000000002, 0.90000000000000002 },\n+  { 2.2805491384227703, -0.90000000000000002, 0.0000000000000000, 0.0 },\n+  { 2.4295011187834885, -0.90000000000000002, 0.10000000000000001, 0.0 },\n+  { 2.6076835743348412, -0.90000000000000002, 0.20000000000000001, 0.0 },\n+  { 2.8256506968858512, -0.90000000000000002, 0.30000000000000004, 0.0 },\n+  { 3.1000689868578619, -0.90000000000000002, 0.40000000000000002, 0.0 },\n+  { 3.4591069002104677, -0.90000000000000002, 0.50000000000000000, 0.0 },\n+  { 3.9549939883570229, -0.90000000000000002, 0.60000000000000009, 0.0 },\n+  { 4.6985482312992435, -0.90000000000000002, 0.70000000000000007, 0.0 },\n+  { 5.9820740813645710, -0.90000000000000002, 0.80000000000000004, 0.0 },\n+  { 8.9942562031858699, -0.90000000000000002, 0.90000000000000002, 0.0 },\n };\n const double toler001 = 2.5000000000000020e-13;\n \n // Test data for k=-0.80000000000000004.\n-// max(|f - f_GSL|): 2.2204460492503131e-16\n-// max(|f - f_GSL| / |f_GSL|): 1.5960830388244336e-16\n+// max(|f - f_Boost|): 1.7763568394002505e-15 at index 8\n+// max(|f - f_Boost| / |f_Boost|): 4.1949393471095187e-16\n+// mean(f - f_Boost): 9.5479180117763459e-16\n+// variance(f - f_Boost): 5.4782007307014711e-34\n+// stddev(f - f_Boost): 2.3405556457178006e-17\n const testcase_comp_ellint_3<double>\n data002[10] =\n {\n-  { 1.9953027776647296, -0.80000000000000004, 0.0000000000000000 },\n-  { 1.8910755418379521, -0.80000000000000004, 0.10000000000000001 },\n-  { 1.8007226661734588, -0.80000000000000004, 0.20000000000000001 },\n-  { 1.7214611048717301, -0.80000000000000004, 0.29999999999999999 },\n-  { 1.6512267838651289, -0.80000000000000004, 0.40000000000000002 },\n-  { 1.5884528947755532, -0.80000000000000004, 0.50000000000000000 },\n-  { 1.5319262547427865, -0.80000000000000004, 0.59999999999999998 },\n-  { 1.4806912324625332, -0.80000000000000004, 0.69999999999999996 },\n-  { 1.4339837018309471, -0.80000000000000004, 0.80000000000000004 },\n-  { 1.3911845406776222, -0.80000000000000004, 0.90000000000000002 },\n+  { 1.9953027776647294, -0.80000000000000004, 0.0000000000000000, 0.0 },\n+  { 2.1172616484005085, -0.80000000000000004, 0.10000000000000001, 0.0 },\n+  { 2.2624789434186798, -0.80000000000000004, 0.20000000000000001, 0.0 },\n+  { 2.4392042002725698, -0.80000000000000004, 0.30000000000000004, 0.0 },\n+  { 2.6604037035529728, -0.80000000000000004, 0.40000000000000002, 0.0 },\n+  { 2.9478781158239751, -0.80000000000000004, 0.50000000000000000, 0.0 },\n+  { 3.3418121892288055, -0.80000000000000004, 0.60000000000000009, 0.0 },\n+  { 3.9268876980046397, -0.80000000000000004, 0.70000000000000007, 0.0 },\n+  { 4.9246422058196071, -0.80000000000000004, 0.80000000000000004, 0.0 },\n+  { 7.2263259298637132, -0.80000000000000004, 0.90000000000000002, 0.0 },\n };\n const double toler002 = 2.5000000000000020e-13;\n \n // Test data for k=-0.69999999999999996.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.3074070916136724e-16\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 3\n+// max(|f - f_Boost| / |f_Boost|): 1.9832236886714888e-16\n+// mean(f - f_Boost): -1.5543122344752191e-16\n+// variance(f - f_Boost): 2.9825759533819119e-33\n+// stddev(f - f_Boost): 5.4612965066748680e-17\n const testcase_comp_ellint_3<double>\n data003[10] =\n {\n-  { 1.8456939983747236, -0.69999999999999996, 0.0000000000000000 },\n-  { 1.7528050171757608, -0.69999999999999996, 0.10000000000000001 },\n-  { 1.6721098780092145, -0.69999999999999996, 0.20000000000000001 },\n-  { 1.6011813647733213, -0.69999999999999996, 0.29999999999999999 },\n-  { 1.5382162002954762, -0.69999999999999996, 0.40000000000000002 },\n-  { 1.4818433192178544, -0.69999999999999996, 0.50000000000000000 },\n-  { 1.4309994736080540, -0.69999999999999996, 0.59999999999999998 },\n-  { 1.3848459188329196, -0.69999999999999996, 0.69999999999999996 },\n-  { 1.3427110650397531, -0.69999999999999996, 0.80000000000000004 },\n-  { 1.3040500499695913, -0.69999999999999996, 0.90000000000000002 },\n+  { 1.8456939983747234, -0.69999999999999996, 0.0000000000000000, 0.0 },\n+  { 1.9541347343119564, -0.69999999999999996, 0.10000000000000001, 0.0 },\n+  { 2.0829290325820202, -0.69999999999999996, 0.20000000000000001, 0.0 },\n+  { 2.2392290510988535, -0.69999999999999996, 0.30000000000000004, 0.0 },\n+  { 2.4342502915307880, -0.69999999999999996, 0.40000000000000002, 0.0 },\n+  { 2.6868019968236996, -0.69999999999999996, 0.50000000000000000, 0.0 },\n+  { 3.0314573496746742, -0.69999999999999996, 0.60000000000000009, 0.0 },\n+  { 3.5408408771788564, -0.69999999999999996, 0.70000000000000007, 0.0 },\n+  { 4.4042405729076961, -0.69999999999999996, 0.80000000000000004, 0.0 },\n+  { 6.3796094177887754, -0.69999999999999996, 0.90000000000000002, 0.0 },\n };\n const double toler003 = 2.5000000000000020e-13;\n \n // Test data for k=-0.59999999999999998.\n-// max(|f - f_GSL|): 6.6613381477509392e-16\n-// max(|f - f_GSL| / |f_GSL|): 4.1891472451898755e-16\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 2\n+// max(|f - f_Boost| / |f_Boost|): 2.2547200163366559e-16\n+// mean(f - f_Boost): -1.9984014443252818e-16\n+// variance(f - f_Boost): 4.9303806576313241e-33\n+// stddev(f - f_Boost): 7.0216669371534022e-17\n const testcase_comp_ellint_3<double>\n data004[10] =\n {\n-  { 1.7507538029157526, -0.59999999999999998, 0.0000000000000000 },\n-  { 1.6648615773343014, -0.59999999999999998, 0.10000000000000001 },\n-  { 1.5901418016279374, -0.59999999999999998, 0.20000000000000001 },\n-  { 1.5243814243493585, -0.59999999999999998, 0.29999999999999999 },\n-  { 1.4659345278069984, -0.59999999999999998, 0.40000000000000002 },\n-  { 1.4135484285693078, -0.59999999999999998, 0.50000000000000000 },\n-  { 1.3662507535812816, -0.59999999999999998, 0.59999999999999998 },\n-  { 1.3232737468822813, -0.59999999999999998, 0.69999999999999996 },\n-  { 1.2840021261752192, -0.59999999999999998, 0.80000000000000004 },\n-  { 1.2479362973851875, -0.59999999999999998, 0.90000000000000002 },\n+  { 1.7507538029157526, -0.59999999999999998, 0.0000000000000000, 0.0 },\n+  { 1.8508766487100685, -0.59999999999999998, 0.10000000000000001, 0.0 },\n+  { 1.9695980282802217, -0.59999999999999998, 0.20000000000000001, 0.0 },\n+  { 2.1134154405060599, -0.59999999999999998, 0.30000000000000004, 0.0 },\n+  { 2.2925036420985130, -0.59999999999999998, 0.40000000000000002, 0.0 },\n+  { 2.5239007084492711, -0.59999999999999998, 0.50000000000000000, 0.0 },\n+  { 2.8388723099514972, -0.59999999999999998, 0.60000000000000009, 0.0 },\n+  { 3.3029735898397159, -0.59999999999999998, 0.70000000000000007, 0.0 },\n+  { 4.0867036409261832, -0.59999999999999998, 0.80000000000000004, 0.0 },\n+  { 5.8709993116265604, -0.59999999999999998, 0.90000000000000002, 0.0 },\n };\n const double toler004 = 2.5000000000000020e-13;\n \n // Test data for k=-0.50000000000000000.\n-// max(|f - f_GSL|): 2.2204460492503131e-16\n-// max(|f - f_GSL| / |f_GSL|): 1.7857620325589816e-16\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 3\n+// max(|f - f_Boost| / |f_Boost|): 2.1900131385114407e-16\n+// mean(f - f_Boost): 2.4424906541753446e-16\n+// variance(f - f_Boost): 7.3651365379430888e-33\n+// stddev(f - f_Boost): 8.5820373676319358e-17\n const testcase_comp_ellint_3<double>\n data005[10] =\n {\n-  { 1.6857503548125963, -0.50000000000000000, 0.0000000000000000 },\n-  { 1.6045524936084892, -0.50000000000000000, 0.10000000000000001 },\n-  { 1.5338490483665983, -0.50000000000000000, 0.20000000000000001 },\n-  { 1.4715681939859637, -0.50000000000000000, 0.29999999999999999 },\n-  { 1.4161679518465340, -0.50000000000000000, 0.40000000000000002 },\n-  { 1.3664739530045971, -0.50000000000000000, 0.50000000000000000 },\n-  { 1.3215740290190876, -0.50000000000000000, 0.59999999999999998 },\n-  { 1.2807475181182502, -0.50000000000000000, 0.69999999999999996 },\n-  { 1.2434165408189539, -0.50000000000000000, 0.80000000000000004 },\n-  { 1.2091116095504744, -0.50000000000000000, 0.90000000000000002 },\n+  { 1.6857503548125961, -0.50000000000000000, 0.0000000000000000, 0.0 },\n+  { 1.7803034946545482, -0.50000000000000000, 0.10000000000000001, 0.0 },\n+  { 1.8922947612264021, -0.50000000000000000, 0.20000000000000001, 0.0 },\n+  { 2.0277924458111314, -0.50000000000000000, 0.30000000000000004, 0.0 },\n+  { 2.1962905366178065, -0.50000000000000000, 0.40000000000000002, 0.0 },\n+  { 2.4136715042011945, -0.50000000000000000, 0.50000000000000000, 0.0 },\n+  { 2.7090491861753558, -0.50000000000000000, 0.60000000000000009, 0.0 },\n+  { 3.1433945297859229, -0.50000000000000000, 0.70000000000000007, 0.0 },\n+  { 3.8750701888108070, -0.50000000000000000, 0.80000000000000004, 0.0 },\n+  { 5.5355132096026463, -0.50000000000000000, 0.90000000000000002, 0.0 },\n };\n const double toler005 = 2.5000000000000020e-13;\n \n-// Test data for k=-0.40000000000000002.\n-// max(|f - f_GSL|): 8.8817841970012523e-16\n-// max(|f - f_GSL| / |f_GSL|): 6.1925080711125793e-16\n+// Test data for k=-0.39999999999999991.\n+// max(|f - f_Boost|): 1.7763568394002505e-15 at index 9\n+// max(|f - f_Boost| / |f_Boost|): 4.1718164615986397e-16\n+// mean(f - f_Boost): 6.2172489379008762e-16\n+// variance(f - f_Boost): 1.6458949750907531e-31\n+// stddev(f - f_Boost): 4.0569631192441877e-16\n const testcase_comp_ellint_3<double>\n data006[10] =\n {\n-  { 1.6399998658645112, -0.40000000000000002, 0.0000000000000000 },\n-  { 1.5620566886683604, -0.40000000000000002, 0.10000000000000001 },\n-  { 1.4941414344266770, -0.40000000000000002, 0.20000000000000001 },\n-  { 1.4342789859950078, -0.40000000000000002, 0.29999999999999999 },\n-  { 1.3809986210732901, -0.40000000000000002, 0.40000000000000002 },\n-  { 1.3331797176377398, -0.40000000000000002, 0.50000000000000000 },\n-  { 1.2899514672527024, -0.40000000000000002, 0.59999999999999998 },\n-  { 1.2506255923253344, -0.40000000000000002, 0.69999999999999996 },\n-  { 1.2146499565727209, -0.40000000000000002, 0.80000000000000004 },\n-  { 1.1815758115929846, -0.40000000000000002, 0.90000000000000002 },\n+  { 1.6399998658645112, -0.39999999999999991, 0.0000000000000000, 0.0 },\n+  { 1.7306968836847190, -0.39999999999999991, 0.10000000000000001, 0.0 },\n+  { 1.8380358826317627, -0.39999999999999991, 0.20000000000000001, 0.0 },\n+  { 1.9677924132520139, -0.39999999999999991, 0.30000000000000004, 0.0 },\n+  { 2.1289968719280026, -0.39999999999999991, 0.40000000000000002, 0.0 },\n+  { 2.3367461373176512, -0.39999999999999991, 0.50000000000000000, 0.0 },\n+  { 2.6186940209850191, -0.39999999999999991, 0.60000000000000009, 0.0 },\n+  { 3.0327078743873246, -0.39999999999999991, 0.70000000000000007, 0.0 },\n+  { 3.7289548002199902, -0.39999999999999991, 0.80000000000000004, 0.0 },\n+  { 5.3055535102872513, -0.39999999999999991, 0.90000000000000002, 0.0 },\n };\n const double toler006 = 2.5000000000000020e-13;\n \n-// Test data for k=-0.30000000000000004.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.8209844149902043e-16\n+// Test data for k=-0.29999999999999993.\n+// max(|f - f_Boost|): 1.3322676295501878e-15 at index 8\n+// max(|f - f_Boost| / |f_Boost|): 3.9274792319434433e-16\n+// mean(f - f_Boost): 6.2172489379008762e-16\n+// variance(f - f_Boost): 8.7651211691223537e-33\n+// stddev(f - f_Boost): 9.3622225828712025e-17\n const testcase_comp_ellint_3<double>\n data007[10] =\n {\n-  { 1.6080486199305128, -0.30000000000000004, 0.0000000000000000 },\n-  { 1.5323534693557528, -0.30000000000000004, 0.10000000000000001 },\n-  { 1.4663658145259877, -0.30000000000000004, 0.20000000000000001 },\n-  { 1.4081767433479091, -0.30000000000000004, 0.29999999999999999 },\n-  { 1.3563643538969763, -0.30000000000000004, 0.40000000000000002 },\n-  { 1.3098448759814962, -0.30000000000000004, 0.50000000000000000 },\n-  { 1.2677758800420669, -0.30000000000000004, 0.59999999999999998 },\n-  { 1.2294913236274982, -0.30000000000000004, 0.69999999999999996 },\n-  { 1.1944567571590048, -0.30000000000000004, 0.80000000000000004 },\n-  { 1.1622376896064914, -0.30000000000000004, 0.90000000000000002 },\n+  { 1.6080486199305128, -0.29999999999999993, 0.0000000000000000, 0.0 },\n+  { 1.6960848815118226, -0.29999999999999993, 0.10000000000000001, 0.0 },\n+  { 1.8002173372290500, -0.29999999999999993, 0.20000000000000001, 0.0 },\n+  { 1.9260216862473254, -0.29999999999999993, 0.30000000000000004, 0.0 },\n+  { 2.0822121773175533, -0.29999999999999993, 0.40000000000000002, 0.0 },\n+  { 2.2833505881933971, -0.29999999999999993, 0.50000000000000000, 0.0 },\n+  { 2.5560975528589065, -0.29999999999999993, 0.60000000000000009, 0.0 },\n+  { 2.9562123549913877, -0.29999999999999993, 0.70000000000000007, 0.0 },\n+  { 3.6283050484567170, -0.29999999999999993, 0.80000000000000004, 0.0 },\n+  { 5.1479514944016795, -0.29999999999999993, 0.90000000000000002, 0.0 },\n };\n const double toler007 = 2.5000000000000020e-13;\n \n // Test data for k=-0.19999999999999996.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.8637687241174905e-16\n+// max(|f - f_Boost|): 8.8817841970012523e-16 at index 9\n+// max(|f - f_Boost| / |f_Boost|): 1.9753938705764407e-16\n+// mean(f - f_Boost): 3.1086244689504381e-16\n+// variance(f - f_Boost): 4.1147374377268827e-32\n+// stddev(f - f_Boost): 2.0284815596220939e-16\n const testcase_comp_ellint_3<double>\n data008[10] =\n {\n-  { 1.5868678474541660, -0.19999999999999996, 0.0000000000000000 },\n-  { 1.5126513474261087, -0.19999999999999996, 0.10000000000000001 },\n-  { 1.4479323932249564, -0.19999999999999996, 0.20000000000000001 },\n-  { 1.3908453514752477, -0.19999999999999996, 0.29999999999999999 },\n-  { 1.3400002519661005, -0.19999999999999996, 0.40000000000000002 },\n-  { 1.2943374404397372, -0.19999999999999996, 0.50000000000000000 },\n-  { 1.2530330675914556, -0.19999999999999996, 0.59999999999999998 },\n-  { 1.2154356555075863, -0.19999999999999996, 0.69999999999999996 },\n-  { 1.1810223448909909, -0.19999999999999996, 0.80000000000000004 },\n-  { 1.1493679916141861, -0.19999999999999996, 0.90000000000000002 },\n+  { 1.5868678474541662, -0.19999999999999996, 0.0000000000000000, 0.0 },\n+  { 1.6731552050562593, -0.19999999999999996, 0.10000000000000001, 0.0 },\n+  { 1.7751816279738935, -0.19999999999999996, 0.20000000000000001, 0.0 },\n+  { 1.8983924169967101, -0.19999999999999996, 0.30000000000000004, 0.0 },\n+  { 2.0512956926676806, -0.19999999999999996, 0.40000000000000002, 0.0 },\n+  { 2.2481046259421302, -0.19999999999999996, 0.50000000000000000, 0.0 },\n+  { 2.5148333891629315, -0.19999999999999996, 0.60000000000000009, 0.0 },\n+  { 2.9058704854500967, -0.19999999999999996, 0.70000000000000007, 0.0 },\n+  { 3.5622166386422633, -0.19999999999999996, 0.80000000000000004, 0.0 },\n+  { 5.0448269356200370, -0.19999999999999996, 0.90000000000000002, 0.0 },\n };\n const double toler008 = 2.5000000000000020e-13;\n \n // Test data for k=-0.099999999999999978.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.8887517676790089e-16\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 5\n+// max(|f - f_Boost| / |f_Boost|): 1.9932308021417639e-16\n+// mean(f - f_Boost): 0.0000000000000000\n+// variance(f - f_Boost): 6.8368087769470551e-64\n+// stddev(f - f_Boost): 2.6147291976315738e-32\n const testcase_comp_ellint_3<double>\n data009[10] =\n {\n-  { 1.5747455615173562, -0.099999999999999978, 0.0000000000000000 },\n-  { 1.5013711111199950, -0.099999999999999978, 0.10000000000000001 },\n-  { 1.4373749386463430, -0.099999999999999978, 0.20000000000000001 },\n-  { 1.3809159606704959, -0.099999999999999978, 0.29999999999999999 },\n-  { 1.3306223265207477, -0.099999999999999978, 0.40000000000000002 },\n-  { 1.2854480708580160, -0.099999999999999978, 0.50000000000000000 },\n-  { 1.2445798942989255, -0.099999999999999978, 0.59999999999999998 },\n-  { 1.2073745911083185, -0.099999999999999978, 0.69999999999999996 },\n-  { 1.1733158866987732, -0.099999999999999978, 0.80000000000000004 },\n-  { 1.1419839485283374, -0.099999999999999978, 0.90000000000000002 },\n+  { 1.5747455615173560, -0.099999999999999978, 0.0000000000000000, 0.0 },\n+  { 1.6600374067558428, -0.099999999999999978, 0.10000000000000001, 0.0 },\n+  { 1.7608656115083421, -0.099999999999999978, 0.20000000000000001, 0.0 },\n+  { 1.8826015946315438, -0.099999999999999978, 0.30000000000000004, 0.0 },\n+  { 2.0336367403076760, -0.099999999999999978, 0.40000000000000002, 0.0 },\n+  { 2.2279868912966849, -0.099999999999999978, 0.50000000000000000, 0.0 },\n+  { 2.4913004919173827, -0.099999999999999978, 0.60000000000000009, 0.0 },\n+  { 2.8771910188009744, -0.099999999999999978, 0.70000000000000007, 0.0 },\n+  { 3.5246199613295617, -0.099999999999999978, 0.80000000000000004, 0.0 },\n+  { 4.9862890417305508, -0.099999999999999978, 0.90000000000000002, 0.0 },\n };\n const double toler009 = 2.5000000000000020e-13;\n \n // Test data for k=0.0000000000000000.\n-// max(|f - f_GSL|): 2.2204460492503131e-16\n-// max(|f - f_GSL| / |f_GSL|): 1.6725702444488137e-16\n+// max(|f - f_Boost|): 8.8817841970012523e-16 at index 9\n+// max(|f - f_Boost| / |f_Boost|): 2.1899085000907084e-16\n+// mean(f - f_Boost): -2.2204460492503131e-16\n+// variance(f - f_Boost): 5.4782007307014711e-32\n+// stddev(f - f_Boost): 2.3405556457178008e-16\n const testcase_comp_ellint_3<double>\n data010[10] =\n {\n-  { 1.5707963267948966, 0.0000000000000000, 0.0000000000000000 },\n-  { 1.4976955329233277, 0.0000000000000000, 0.10000000000000001 },\n-  { 1.4339343023863691, 0.0000000000000000, 0.20000000000000001 },\n-  { 1.3776795151134889, 0.0000000000000000, 0.29999999999999999 },\n-  { 1.3275651989026320, 0.0000000000000000, 0.40000000000000002 },\n-  { 1.2825498301618641, 0.0000000000000000, 0.50000000000000000 },\n-  { 1.2418235332245127, 0.0000000000000000, 0.59999999999999998 },\n-  { 1.2047457872617382, 0.0000000000000000, 0.69999999999999996 },\n-  { 1.1708024551734544, 0.0000000000000000, 0.80000000000000004 },\n-  { 1.1395754288497419, 0.0000000000000000, 0.90000000000000002 },\n+  { 1.5707963267948966, 0.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 1.6557647109660170, 0.0000000000000000, 0.10000000000000001, 0.0 },\n+  { 1.7562036827601817, 0.0000000000000000, 0.20000000000000001, 0.0 },\n+  { 1.8774607092226381, 0.0000000000000000, 0.30000000000000004, 0.0 },\n+  { 2.0278893379868062, 0.0000000000000000, 0.40000000000000002, 0.0 },\n+  { 2.2214414690791831, 0.0000000000000000, 0.50000000000000000, 0.0 },\n+  { 2.4836470664490258, 0.0000000000000000, 0.60000000000000009, 0.0 },\n+  { 2.8678686047727386, 0.0000000000000000, 0.70000000000000007, 0.0 },\n+  { 3.5124073655203634, 0.0000000000000000, 0.80000000000000004, 0.0 },\n+  { 4.9672941328980516, 0.0000000000000000, 0.90000000000000002, 0.0 },\n };\n const double toler010 = 2.5000000000000020e-13;\n \n // Test data for k=0.10000000000000009.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.8887517676790089e-16\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 5\n+// max(|f - f_Boost| / |f_Boost|): 1.9932308021417639e-16\n+// mean(f - f_Boost): -2.2204460492503132e-17\n+// variance(f - f_Boost): 6.0868897007794120e-35\n+// stddev(f - f_Boost): 7.8018521523926693e-18\n const testcase_comp_ellint_3<double>\n data011[10] =\n {\n-  { 1.5747455615173562, 0.10000000000000009, 0.0000000000000000 },\n-  { 1.5013711111199950, 0.10000000000000009, 0.10000000000000001 },\n-  { 1.4373749386463430, 0.10000000000000009, 0.20000000000000001 },\n-  { 1.3809159606704959, 0.10000000000000009, 0.29999999999999999 },\n-  { 1.3306223265207477, 0.10000000000000009, 0.40000000000000002 },\n-  { 1.2854480708580160, 0.10000000000000009, 0.50000000000000000 },\n-  { 1.2445798942989255, 0.10000000000000009, 0.59999999999999998 },\n-  { 1.2073745911083185, 0.10000000000000009, 0.69999999999999996 },\n-  { 1.1733158866987732, 0.10000000000000009, 0.80000000000000004 },\n-  { 1.1419839485283374, 0.10000000000000009, 0.90000000000000002 },\n+  { 1.5747455615173560, 0.10000000000000009, 0.0000000000000000, 0.0 },\n+  { 1.6600374067558428, 0.10000000000000009, 0.10000000000000001, 0.0 },\n+  { 1.7608656115083421, 0.10000000000000009, 0.20000000000000001, 0.0 },\n+  { 1.8826015946315440, 0.10000000000000009, 0.30000000000000004, 0.0 },\n+  { 2.0336367403076760, 0.10000000000000009, 0.40000000000000002, 0.0 },\n+  { 2.2279868912966849, 0.10000000000000009, 0.50000000000000000, 0.0 },\n+  { 2.4913004919173827, 0.10000000000000009, 0.60000000000000009, 0.0 },\n+  { 2.8771910188009744, 0.10000000000000009, 0.70000000000000007, 0.0 },\n+  { 3.5246199613295617, 0.10000000000000009, 0.80000000000000004, 0.0 },\n+  { 4.9862890417305508, 0.10000000000000009, 0.90000000000000002, 0.0 },\n };\n const double toler011 = 2.5000000000000020e-13;\n \n-// Test data for k=0.19999999999999996.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.8637687241174905e-16\n+// Test data for k=0.20000000000000018.\n+// max(|f - f_Boost|): 8.8817841970012523e-16 at index 9\n+// max(|f - f_Boost| / |f_Boost|): 1.9753938705764407e-16\n+// mean(f - f_Boost): 3.1086244689504381e-16\n+// variance(f - f_Boost): 4.1147374377268827e-32\n+// stddev(f - f_Boost): 2.0284815596220939e-16\n const testcase_comp_ellint_3<double>\n data012[10] =\n {\n-  { 1.5868678474541660, 0.19999999999999996, 0.0000000000000000 },\n-  { 1.5126513474261087, 0.19999999999999996, 0.10000000000000001 },\n-  { 1.4479323932249564, 0.19999999999999996, 0.20000000000000001 },\n-  { 1.3908453514752477, 0.19999999999999996, 0.29999999999999999 },\n-  { 1.3400002519661005, 0.19999999999999996, 0.40000000000000002 },\n-  { 1.2943374404397372, 0.19999999999999996, 0.50000000000000000 },\n-  { 1.2530330675914556, 0.19999999999999996, 0.59999999999999998 },\n-  { 1.2154356555075863, 0.19999999999999996, 0.69999999999999996 },\n-  { 1.1810223448909909, 0.19999999999999996, 0.80000000000000004 },\n-  { 1.1493679916141861, 0.19999999999999996, 0.90000000000000002 },\n+  { 1.5868678474541662, 0.20000000000000018, 0.0000000000000000, 0.0 },\n+  { 1.6731552050562593, 0.20000000000000018, 0.10000000000000001, 0.0 },\n+  { 1.7751816279738935, 0.20000000000000018, 0.20000000000000001, 0.0 },\n+  { 1.8983924169967101, 0.20000000000000018, 0.30000000000000004, 0.0 },\n+  { 2.0512956926676806, 0.20000000000000018, 0.40000000000000002, 0.0 },\n+  { 2.2481046259421302, 0.20000000000000018, 0.50000000000000000, 0.0 },\n+  { 2.5148333891629315, 0.20000000000000018, 0.60000000000000009, 0.0 },\n+  { 2.9058704854500967, 0.20000000000000018, 0.70000000000000007, 0.0 },\n+  { 3.5622166386422633, 0.20000000000000018, 0.80000000000000004, 0.0 },\n+  { 5.0448269356200370, 0.20000000000000018, 0.90000000000000002, 0.0 },\n };\n const double toler012 = 2.5000000000000020e-13;\n \n // Test data for k=0.30000000000000004.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.8209844149902043e-16\n+// max(|f - f_Boost|): 8.8817841970012523e-16 at index 8\n+// max(|f - f_Boost| / |f_Boost|): 3.4585997630846713e-16\n+// mean(f - f_Boost): 5.1070259132757197e-16\n+// variance(f - f_Boost): 1.7591111235252501e-32\n+// stddev(f - f_Boost): 1.3263148659067538e-16\n const testcase_comp_ellint_3<double>\n data013[10] =\n {\n-  { 1.6080486199305128, 0.30000000000000004, 0.0000000000000000 },\n-  { 1.5323534693557528, 0.30000000000000004, 0.10000000000000001 },\n-  { 1.4663658145259877, 0.30000000000000004, 0.20000000000000001 },\n-  { 1.4081767433479091, 0.30000000000000004, 0.29999999999999999 },\n-  { 1.3563643538969763, 0.30000000000000004, 0.40000000000000002 },\n-  { 1.3098448759814962, 0.30000000000000004, 0.50000000000000000 },\n-  { 1.2677758800420669, 0.30000000000000004, 0.59999999999999998 },\n-  { 1.2294913236274982, 0.30000000000000004, 0.69999999999999996 },\n-  { 1.1944567571590048, 0.30000000000000004, 0.80000000000000004 },\n-  { 1.1622376896064914, 0.30000000000000004, 0.90000000000000002 },\n+  { 1.6080486199305128, 0.30000000000000004, 0.0000000000000000, 0.0 },\n+  { 1.6960848815118228, 0.30000000000000004, 0.10000000000000001, 0.0 },\n+  { 1.8002173372290500, 0.30000000000000004, 0.20000000000000001, 0.0 },\n+  { 1.9260216862473254, 0.30000000000000004, 0.30000000000000004, 0.0 },\n+  { 2.0822121773175533, 0.30000000000000004, 0.40000000000000002, 0.0 },\n+  { 2.2833505881933975, 0.30000000000000004, 0.50000000000000000, 0.0 },\n+  { 2.5560975528589065, 0.30000000000000004, 0.60000000000000009, 0.0 },\n+  { 2.9562123549913877, 0.30000000000000004, 0.70000000000000007, 0.0 },\n+  { 3.6283050484567174, 0.30000000000000004, 0.80000000000000004, 0.0 },\n+  { 5.1479514944016795, 0.30000000000000004, 0.90000000000000002, 0.0 },\n };\n const double toler013 = 2.5000000000000020e-13;\n \n-// Test data for k=0.39999999999999991.\n-// max(|f - f_GSL|): 8.8817841970012523e-16\n-// max(|f - f_GSL| / |f_GSL|): 6.1925080711125793e-16\n+// Test data for k=0.40000000000000013.\n+// max(|f - f_Boost|): 2.6645352591003757e-15 at index 9\n+// max(|f - f_Boost| / |f_Boost|): 6.7696531428672557e-16\n+// mean(f - f_Boost): 1.1990408665951691e-15\n+// variance(f - f_Boost): 2.6514491536595121e-31\n+// stddev(f - f_Boost): 5.1492224205791612e-16\n const testcase_comp_ellint_3<double>\n data014[10] =\n {\n-  { 1.6399998658645112, 0.39999999999999991, 0.0000000000000000 },\n-  { 1.5620566886683604, 0.39999999999999991, 0.10000000000000001 },\n-  { 1.4941414344266770, 0.39999999999999991, 0.20000000000000001 },\n-  { 1.4342789859950078, 0.39999999999999991, 0.29999999999999999 },\n-  { 1.3809986210732901, 0.39999999999999991, 0.40000000000000002 },\n-  { 1.3331797176377398, 0.39999999999999991, 0.50000000000000000 },\n-  { 1.2899514672527024, 0.39999999999999991, 0.59999999999999998 },\n-  { 1.2506255923253344, 0.39999999999999991, 0.69999999999999996 },\n-  { 1.2146499565727209, 0.39999999999999991, 0.80000000000000004 },\n-  { 1.1815758115929846, 0.39999999999999991, 0.90000000000000002 },\n+  { 1.6399998658645112, 0.40000000000000013, 0.0000000000000000, 0.0 },\n+  { 1.7306968836847190, 0.40000000000000013, 0.10000000000000001, 0.0 },\n+  { 1.8380358826317629, 0.40000000000000013, 0.20000000000000001, 0.0 },\n+  { 1.9677924132520141, 0.40000000000000013, 0.30000000000000004, 0.0 },\n+  { 2.1289968719280030, 0.40000000000000013, 0.40000000000000002, 0.0 },\n+  { 2.3367461373176512, 0.40000000000000013, 0.50000000000000000, 0.0 },\n+  { 2.6186940209850196, 0.40000000000000013, 0.60000000000000009, 0.0 },\n+  { 3.0327078743873246, 0.40000000000000013, 0.70000000000000007, 0.0 },\n+  { 3.7289548002199906, 0.40000000000000013, 0.80000000000000004, 0.0 },\n+  { 5.3055535102872522, 0.40000000000000013, 0.90000000000000002, 0.0 },\n };\n const double toler014 = 2.5000000000000020e-13;\n \n // Test data for k=0.50000000000000000.\n-// max(|f - f_GSL|): 2.2204460492503131e-16\n-// max(|f - f_GSL| / |f_GSL|): 1.7857620325589816e-16\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 3\n+// max(|f - f_Boost| / |f_Boost|): 2.1900131385114407e-16\n+// mean(f - f_Boost): 2.4424906541753446e-16\n+// variance(f - f_Boost): 7.3651365379430888e-33\n+// stddev(f - f_Boost): 8.5820373676319358e-17\n const testcase_comp_ellint_3<double>\n data015[10] =\n {\n-  { 1.6857503548125963, 0.50000000000000000, 0.0000000000000000 },\n-  { 1.6045524936084892, 0.50000000000000000, 0.10000000000000001 },\n-  { 1.5338490483665983, 0.50000000000000000, 0.20000000000000001 },\n-  { 1.4715681939859637, 0.50000000000000000, 0.29999999999999999 },\n-  { 1.4161679518465340, 0.50000000000000000, 0.40000000000000002 },\n-  { 1.3664739530045971, 0.50000000000000000, 0.50000000000000000 },\n-  { 1.3215740290190876, 0.50000000000000000, 0.59999999999999998 },\n-  { 1.2807475181182502, 0.50000000000000000, 0.69999999999999996 },\n-  { 1.2434165408189539, 0.50000000000000000, 0.80000000000000004 },\n-  { 1.2091116095504744, 0.50000000000000000, 0.90000000000000002 },\n+  { 1.6857503548125961, 0.50000000000000000, 0.0000000000000000, 0.0 },\n+  { 1.7803034946545482, 0.50000000000000000, 0.10000000000000001, 0.0 },\n+  { 1.8922947612264021, 0.50000000000000000, 0.20000000000000001, 0.0 },\n+  { 2.0277924458111314, 0.50000000000000000, 0.30000000000000004, 0.0 },\n+  { 2.1962905366178065, 0.50000000000000000, 0.40000000000000002, 0.0 },\n+  { 2.4136715042011945, 0.50000000000000000, 0.50000000000000000, 0.0 },\n+  { 2.7090491861753558, 0.50000000000000000, 0.60000000000000009, 0.0 },\n+  { 3.1433945297859229, 0.50000000000000000, 0.70000000000000007, 0.0 },\n+  { 3.8750701888108070, 0.50000000000000000, 0.80000000000000004, 0.0 },\n+  { 5.5355132096026463, 0.50000000000000000, 0.90000000000000002, 0.0 },\n };\n const double toler015 = 2.5000000000000020e-13;\n \n // Test data for k=0.60000000000000009.\n-// max(|f - f_GSL|): 6.6613381477509392e-16\n-// max(|f - f_GSL| / |f_GSL|): 4.7124937590522226e-16\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 2\n+// max(|f - f_Boost| / |f_Boost|): 2.2547200163366559e-16\n+// mean(f - f_Boost): -2.2204460492503131e-16\n+// variance(f - f_Boost): 6.0868897007794117e-33\n+// stddev(f - f_Boost): 7.8018521523926690e-17\n const testcase_comp_ellint_3<double>\n data016[10] =\n {\n-  { 1.7507538029157526, 0.60000000000000009, 0.0000000000000000 },\n-  { 1.6648615773343014, 0.60000000000000009, 0.10000000000000001 },\n-  { 1.5901418016279374, 0.60000000000000009, 0.20000000000000001 },\n-  { 1.5243814243493585, 0.60000000000000009, 0.29999999999999999 },\n-  { 1.4659345278069984, 0.60000000000000009, 0.40000000000000002 },\n-  { 1.4135484285693078, 0.60000000000000009, 0.50000000000000000 },\n-  { 1.3662507535812816, 0.60000000000000009, 0.59999999999999998 },\n-  { 1.3232737468822813, 0.60000000000000009, 0.69999999999999996 },\n-  { 1.2840021261752192, 0.60000000000000009, 0.80000000000000004 },\n-  { 1.2479362973851873, 0.60000000000000009, 0.90000000000000002 },\n+  { 1.7507538029157526, 0.60000000000000009, 0.0000000000000000, 0.0 },\n+  { 1.8508766487100687, 0.60000000000000009, 0.10000000000000001, 0.0 },\n+  { 1.9695980282802217, 0.60000000000000009, 0.20000000000000001, 0.0 },\n+  { 2.1134154405060599, 0.60000000000000009, 0.30000000000000004, 0.0 },\n+  { 2.2925036420985130, 0.60000000000000009, 0.40000000000000002, 0.0 },\n+  { 2.5239007084492711, 0.60000000000000009, 0.50000000000000000, 0.0 },\n+  { 2.8388723099514976, 0.60000000000000009, 0.60000000000000009, 0.0 },\n+  { 3.3029735898397159, 0.60000000000000009, 0.70000000000000007, 0.0 },\n+  { 4.0867036409261832, 0.60000000000000009, 0.80000000000000004, 0.0 },\n+  { 5.8709993116265613, 0.60000000000000009, 0.90000000000000002, 0.0 },\n };\n const double toler016 = 2.5000000000000020e-13;\n \n-// Test data for k=0.69999999999999996.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.3074070916136724e-16\n+// Test data for k=0.70000000000000018.\n+// max(|f - f_Boost|): 1.7763568394002505e-15 at index 9\n+// max(|f - f_Boost| / |f_Boost|): 2.9298727220933567e-16\n+// mean(f - f_Boost): 4.8849813083506892e-16\n+// variance(f - f_Boost): 2.0476296953421943e-31\n+// stddev(f - f_Boost): 4.5250742483877478e-16\n const testcase_comp_ellint_3<double>\n data017[10] =\n {\n-  { 1.8456939983747236, 0.69999999999999996, 0.0000000000000000 },\n-  { 1.7528050171757608, 0.69999999999999996, 0.10000000000000001 },\n-  { 1.6721098780092145, 0.69999999999999996, 0.20000000000000001 },\n-  { 1.6011813647733213, 0.69999999999999996, 0.29999999999999999 },\n-  { 1.5382162002954762, 0.69999999999999996, 0.40000000000000002 },\n-  { 1.4818433192178544, 0.69999999999999996, 0.50000000000000000 },\n-  { 1.4309994736080540, 0.69999999999999996, 0.59999999999999998 },\n-  { 1.3848459188329196, 0.69999999999999996, 0.69999999999999996 },\n-  { 1.3427110650397531, 0.69999999999999996, 0.80000000000000004 },\n-  { 1.3040500499695913, 0.69999999999999996, 0.90000000000000002 },\n+  { 1.8456939983747238, 0.70000000000000018, 0.0000000000000000, 0.0 },\n+  { 1.9541347343119566, 0.70000000000000018, 0.10000000000000001, 0.0 },\n+  { 2.0829290325820207, 0.70000000000000018, 0.20000000000000001, 0.0 },\n+  { 2.2392290510988540, 0.70000000000000018, 0.30000000000000004, 0.0 },\n+  { 2.4342502915307880, 0.70000000000000018, 0.40000000000000002, 0.0 },\n+  { 2.6868019968237000, 0.70000000000000018, 0.50000000000000000, 0.0 },\n+  { 3.0314573496746746, 0.70000000000000018, 0.60000000000000009, 0.0 },\n+  { 3.5408408771788569, 0.70000000000000018, 0.70000000000000007, 0.0 },\n+  { 4.4042405729076970, 0.70000000000000018, 0.80000000000000004, 0.0 },\n+  { 6.3796094177887763, 0.70000000000000018, 0.90000000000000002, 0.0 },\n };\n const double toler017 = 2.5000000000000020e-13;\n \n // Test data for k=0.80000000000000004.\n-// max(|f - f_GSL|): 2.2204460492503131e-16\n-// max(|f - f_GSL| / |f_GSL|): 1.5960830388244336e-16\n+// max(|f - f_Boost|): 1.7763568394002505e-15 at index 8\n+// max(|f - f_Boost| / |f_Boost|): 4.1949393471095187e-16\n+// mean(f - f_Boost): 9.5479180117763459e-16\n+// variance(f - f_Boost): 5.4782007307014711e-34\n+// stddev(f - f_Boost): 2.3405556457178006e-17\n const testcase_comp_ellint_3<double>\n data018[10] =\n {\n-  { 1.9953027776647296, 0.80000000000000004, 0.0000000000000000 },\n-  { 1.8910755418379521, 0.80000000000000004, 0.10000000000000001 },\n-  { 1.8007226661734588, 0.80000000000000004, 0.20000000000000001 },\n-  { 1.7214611048717301, 0.80000000000000004, 0.29999999999999999 },\n-  { 1.6512267838651289, 0.80000000000000004, 0.40000000000000002 },\n-  { 1.5884528947755532, 0.80000000000000004, 0.50000000000000000 },\n-  { 1.5319262547427865, 0.80000000000000004, 0.59999999999999998 },\n-  { 1.4806912324625332, 0.80000000000000004, 0.69999999999999996 },\n-  { 1.4339837018309471, 0.80000000000000004, 0.80000000000000004 },\n-  { 1.3911845406776222, 0.80000000000000004, 0.90000000000000002 },\n+  { 1.9953027776647294, 0.80000000000000004, 0.0000000000000000, 0.0 },\n+  { 2.1172616484005085, 0.80000000000000004, 0.10000000000000001, 0.0 },\n+  { 2.2624789434186798, 0.80000000000000004, 0.20000000000000001, 0.0 },\n+  { 2.4392042002725698, 0.80000000000000004, 0.30000000000000004, 0.0 },\n+  { 2.6604037035529728, 0.80000000000000004, 0.40000000000000002, 0.0 },\n+  { 2.9478781158239751, 0.80000000000000004, 0.50000000000000000, 0.0 },\n+  { 3.3418121892288055, 0.80000000000000004, 0.60000000000000009, 0.0 },\n+  { 3.9268876980046397, 0.80000000000000004, 0.70000000000000007, 0.0 },\n+  { 4.9246422058196071, 0.80000000000000004, 0.80000000000000004, 0.0 },\n+  { 7.2263259298637132, 0.80000000000000004, 0.90000000000000002, 0.0 },\n };\n const double toler018 = 2.5000000000000020e-13;\n \n-// Test data for k=0.89999999999999991.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 2.6751587294384150e-16\n+// Test data for k=0.90000000000000013.\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 3\n+// max(|f - f_Boost| / |f_Boost|): 1.5716352001310461e-16\n+// mean(f - f_Boost): 4.4408920985006264e-17\n+// variance(f - f_Boost): 2.4347558803117648e-34\n+// stddev(f - f_Boost): 1.5603704304785339e-17\n const testcase_comp_ellint_3<double>\n data019[10] =\n {\n-  { 2.2805491384227703, 0.89999999999999991, 0.0000000000000000 },\n-  { 2.1537868513875287, 0.89999999999999991, 0.10000000000000001 },\n-  { 2.0443194576468895, 0.89999999999999991, 0.20000000000000001 },\n-  { 1.9486280260314426, 0.89999999999999991, 0.29999999999999999 },\n-  { 1.8641114227238351, 0.89999999999999991, 0.40000000000000002 },\n-  { 1.7888013241937863, 0.89999999999999991, 0.50000000000000000 },\n-  { 1.7211781128919525, 0.89999999999999991, 0.59999999999999998 },\n-  { 1.6600480747670940, 0.89999999999999991, 0.69999999999999996 },\n-  { 1.6044591960982202, 0.89999999999999991, 0.80000000000000004 },\n-  { 1.5536420236310948, 0.89999999999999991, 0.90000000000000002 },\n+  { 2.2805491384227707, 0.90000000000000013, 0.0000000000000000, 0.0 },\n+  { 2.4295011187834890, 0.90000000000000013, 0.10000000000000001, 0.0 },\n+  { 2.6076835743348421, 0.90000000000000013, 0.20000000000000001, 0.0 },\n+  { 2.8256506968858521, 0.90000000000000013, 0.30000000000000004, 0.0 },\n+  { 3.1000689868578628, 0.90000000000000013, 0.40000000000000002, 0.0 },\n+  { 3.4591069002104686, 0.90000000000000013, 0.50000000000000000, 0.0 },\n+  { 3.9549939883570242, 0.90000000000000013, 0.60000000000000009, 0.0 },\n+  { 4.6985482312992453, 0.90000000000000013, 0.70000000000000007, 0.0 },\n+  { 5.9820740813645727, 0.90000000000000013, 0.80000000000000004, 0.0 },\n+  { 8.9942562031858735, 0.90000000000000013, 0.90000000000000002, 0.0 },\n };\n const double toler019 = 2.5000000000000020e-13;\n \n-template<typename Tp, unsigned int Num>\n+template<typename Ret, unsigned int Num>\n   void\n-  test(const testcase_comp_ellint_3<Tp> (&data)[Num], Tp toler)\n+  test(const testcase_comp_ellint_3<Ret> (&data)[Num], Ret toler)\n   {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n+    bool test __attribute__((unused)) = true;\n+    const Ret eps = std::numeric_limits<Ret>::epsilon();\n+    Ret max_abs_diff = -Ret(1);\n+    Ret max_abs_frac = -Ret(1);\n     unsigned int num_datum = Num;\n     for (unsigned int i = 0; i < num_datum; ++i)\n       {\n-\tconst Tp f = std::comp_ellint_3(data[i].k, data[i].nu);\n-\tconst Tp f0 = data[i].f0;\n-\tconst Tp diff = f - f0;\n+\tconst Ret f = std::comp_ellint_3(data[i].k, data[i].nu);\n+\tconst Ret f0 = data[i].f0;\n+\tconst Ret diff = f - f0;\n \tif (std::abs(diff) > max_abs_diff)\n \t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n+\tif (std::abs(f0) > Ret(10) * eps\n+\t && std::abs(f) > Ret(10) * eps)\n \t  {\n-\t    const Tp frac = diff / f0;\n+\t    const Ret frac = diff / f0;\n \t    if (std::abs(frac) > max_abs_frac)\n \t      max_abs_frac = std::abs(frac);\n \t  }"}, {"sha": "a83126f5113375015f6766f664c991ea04c1e12e", "filename": "libstdc++-v3/testsuite/special_functions/06_comp_ellint_3/pr66689.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F06_comp_ellint_3%2Fpr66689.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F06_comp_ellint_3%2Fpr66689.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F06_comp_ellint_3%2Fpr66689.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do run { target c++11 } }\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  double Pi1 = std::comp_ellint_3(0.75, 0.0);\n+  VERIFY(std::abs(Pi1 - 1.91099) < 0.00001);\n+\n+  double Pi2 = std::comp_ellint_3(0.75, 0.5);\n+  VERIFY(std::abs(Pi2 - 2.80011) < 0.00001);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7b5b5d642af63dfcc83bb2e593529ce349e2d040", "filename": "libstdc++-v3/testsuite/special_functions/07_cyl_bessel_i/check_value.cc", "status": "modified", "additions": 573, "deletions": 513, "changes": 1086, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F07_cyl_bessel_i%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F07_cyl_bessel_i%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F07_cyl_bessel_i%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -37,627 +37,687 @@\n #endif\n #include <specfun_testcase.h>\n \n-\n // Test data for nu=0.0000000000000000.\n-// max(|f - f_GSL|): 2.8421709430404007e-14\n-// max(|f - f_GSL| / |f_GSL|): 1.3916073135966565e-15\n+// max(|f - f_GSL|): 5.2402526762307389e-14 at index 12\n+// max(|f - f_GSL| / |f_GSL|): 1.0747725055352992e-14\n+// mean(f - f_GSL): -1.9624513654326576e-14\n+// variance(f - f_GSL): 4.0630093099383162e-30\n+// stddev(f - f_GSL): 2.0156907773610308e-15\n const testcase_cyl_bessel_i<double>\n-data001[21] =\n+data007[21] =\n {\n-  { 1.0000000000000000, 0.0000000000000000, 0.0000000000000000 },\n-  { 1.0156861412236078, 0.0000000000000000, 0.25000000000000000 },\n-  { 1.0634833707413236, 0.0000000000000000, 0.50000000000000000 },\n-  { 1.1456467780440014, 0.0000000000000000, 0.75000000000000000 },\n-  { 1.2660658777520082, 0.0000000000000000, 1.0000000000000000 },\n-  { 1.4304687177218294, 0.0000000000000000, 1.2500000000000000 },\n-  { 1.6467231897728904, 0.0000000000000000, 1.5000000000000000 },\n-  { 1.9252521538585023, 0.0000000000000000, 1.7500000000000000 },\n-  { 2.2795853023360668, 0.0000000000000000, 2.0000000000000000 },\n-  { 2.7270783071907951, 0.0000000000000000, 2.2500000000000000 },\n-  { 3.2898391440501231, 0.0000000000000000, 2.5000000000000000 },\n-  { 3.9959131072376550, 0.0000000000000000, 2.7500000000000000 },\n-  { 4.8807925858650245, 0.0000000000000000, 3.0000000000000000 },\n-  { 5.9893359979395138, 0.0000000000000000, 3.2500000000000000 },\n-  { 7.3782034322254750, 0.0000000000000000, 3.5000000000000000 },\n-  { 9.1189458608445655, 0.0000000000000000, 3.7500000000000000 },\n-  { 11.301921952136325, 0.0000000000000000, 4.0000000000000000 },\n-  { 14.041263683000595, 0.0000000000000000, 4.2500000000000000 },\n-  { 17.481171855609272, 0.0000000000000000, 4.5000000000000000 },\n-  { 21.803898740902120, 0.0000000000000000, 4.7500000000000000 },\n-  { 27.239871823604439, 0.0000000000000000, 5.0000000000000000 },\n+  { 1.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 1.0156861412236078, 0.0000000000000000, 0.25000000000000000, 0.0 },\n+  { 1.0634833707413236, 0.0000000000000000, 0.50000000000000000, 0.0 },\n+  { 1.1456467780440014, 0.0000000000000000, 0.75000000000000000, 0.0 },\n+  { 1.2660658777520082, 0.0000000000000000, 1.0000000000000000, 0.0 },\n+  { 1.4304687177218294, 0.0000000000000000, 1.2500000000000000, 0.0 },\n+  { 1.6467231897728904, 0.0000000000000000, 1.5000000000000000, 0.0 },\n+  { 1.9252521538585021, 0.0000000000000000, 1.7500000000000000, 0.0 },\n+  { 2.2795853023360668, 0.0000000000000000, 2.0000000000000000, 0.0 },\n+  { 2.7270783071907951, 0.0000000000000000, 2.2500000000000000, 0.0 },\n+  { 3.2898391440501231, 0.0000000000000000, 2.5000000000000000, 0.0 },\n+  { 3.9959131072376550, 0.0000000000000000, 2.7500000000000000, 0.0 },\n+  { 4.8807925858650245, 0.0000000000000000, 3.0000000000000000, 0.0 },\n+  { 5.9893359979395138, 0.0000000000000000, 3.2500000000000000, 0.0 },\n+  { 7.3782034322254750, 0.0000000000000000, 3.5000000000000000, 0.0 },\n+  { 9.1189458608445655, 0.0000000000000000, 3.7500000000000000, 0.0 },\n+  { 11.301921952136325, 0.0000000000000000, 4.0000000000000000, 0.0 },\n+  { 14.041263683000595, 0.0000000000000000, 4.2500000000000000, 0.0 },\n+  { 17.481171855609272, 0.0000000000000000, 4.5000000000000000, 0.0 },\n+  { 21.803898740902120, 0.0000000000000000, 4.7500000000000000, 0.0 },\n+  { 27.239871823604439, 0.0000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler001 = 2.5000000000000020e-13;\n+const double toler007 = 1.0000000000000008e-12;\n \n // Test data for nu=0.33333333333333331.\n-// max(|f - f_GSL|): 1.0658141036401503e-14\n-// max(|f - f_GSL| / |f_GSL|): 1.1056193696204194e-15\n+// max(|f - f_GSL|): 6.2172489379008766e-15 at index 14\n+// max(|f - f_GSL| / |f_GSL|): 9.1624880778907085e-16\n+// mean(f - f_GSL): 1.1525172350870673e-15\n+// variance(f - f_GSL): 6.9735538801568761e-32\n+// stddev(f - f_GSL): 2.6407487347638500e-16\n const testcase_cyl_bessel_i<double>\n-data002[21] =\n+data008[21] =\n {\n-  { 0.0000000000000000, 0.33333333333333331, 0.0000000000000000 },\n-  { 0.56650686557808660, 0.33333333333333331, 0.25000000000000000 },\n-  { 0.73897315642511863, 0.33333333333333331, 0.50000000000000000 },\n-  { 0.89532320365836804, 0.33333333333333331, 0.75000000000000000 },\n-  { 1.0646313978895285, 0.33333333333333331, 1.0000000000000000 },\n-  { 1.2623776732605250, 0.33333333333333331, 1.2500000000000000 },\n-  { 1.5014290000224382, 0.33333333333333331, 1.5000000000000000 },\n-  { 1.7951195525946044, 0.33333333333333331, 1.7500000000000000 },\n-  { 2.1587825813728614, 0.33333333333333331, 2.0000000000000000 },\n-  { 2.6109134564811405, 0.33333333333333331, 2.2500000000000000 },\n-  { 3.1743242297241938, 0.33333333333333331, 2.5000000000000000 },\n-  { 3.8774551722182107, 0.33333333333333331, 2.7500000000000000 },\n-  { 4.7559569371646946, 0.33333333333333331, 3.0000000000000000 },\n-  { 5.8546499652731825, 0.33333333333333331, 3.2500000000000000 },\n-  { 7.2299798619171147, 0.33333333333333331, 3.5000000000000000 },\n-  { 8.9531114355506318, 0.33333333333333331, 3.7500000000000000 },\n-  { 11.113838389991479, 0.33333333333333331, 4.0000000000000000 },\n-  { 13.825531136529117, 0.33333333333333331, 4.2500000000000000 },\n-  { 17.231403968478318, 0.33333333333333331, 4.5000000000000000 },\n-  { 21.512458099556554, 0.33333333333333331, 4.7500000000000000 },\n-  { 26.897553069268362, 0.33333333333333331, 5.0000000000000000 },\n+  { 0.0000000000000000, 0.33333333333333331, 0.0000000000000000, 0.0 },\n+  { 0.56650686557808660, 0.33333333333333331, 0.25000000000000000, 0.0 },\n+  { 0.73897315642511863, 0.33333333333333331, 0.50000000000000000, 0.0 },\n+  { 0.89532320365836815, 0.33333333333333331, 0.75000000000000000, 0.0 },\n+  { 1.0646313978895283, 0.33333333333333331, 1.0000000000000000, 0.0 },\n+  { 1.2623776732605250, 0.33333333333333331, 1.2500000000000000, 0.0 },\n+  { 1.5014290000224382, 0.33333333333333331, 1.5000000000000000, 0.0 },\n+  { 1.7951195525946040, 0.33333333333333331, 1.7500000000000000, 0.0 },\n+  { 2.1587825813728614, 0.33333333333333331, 2.0000000000000000, 0.0 },\n+  { 2.6109134564811405, 0.33333333333333331, 2.2500000000000000, 0.0 },\n+  { 3.1743242297241938, 0.33333333333333331, 2.5000000000000000, 0.0 },\n+  { 3.8774551722182093, 0.33333333333333331, 2.7500000000000000, 0.0 },\n+  { 4.7559569371646946, 0.33333333333333331, 3.0000000000000000, 0.0 },\n+  { 5.8546499652731825, 0.33333333333333331, 3.2500000000000000, 0.0 },\n+  { 7.2299798619171129, 0.33333333333333331, 3.5000000000000000, 0.0 },\n+  { 8.9531114355506318, 0.33333333333333331, 3.7500000000000000, 0.0 },\n+  { 11.113838389991479, 0.33333333333333331, 4.0000000000000000, 0.0 },\n+  { 13.825531136529117, 0.33333333333333331, 4.2500000000000000, 0.0 },\n+  { 17.231403968478318, 0.33333333333333331, 4.5000000000000000, 0.0 },\n+  { 21.512458099556554, 0.33333333333333331, 4.7500000000000000, 0.0 },\n+  { 26.897553069268362, 0.33333333333333331, 5.0000000000000000, 0.0 },\n };\n-const double toler002 = 2.5000000000000020e-13;\n+const double toler008 = 2.5000000000000020e-13;\n \n // Test data for nu=0.50000000000000000.\n-// max(|f - f_GSL|): 1.4210854715202004e-14\n-// max(|f - f_GSL| / |f_GSL|): 1.2805693909168510e-15\n+// max(|f - f_GSL|): 1.4210854715202004e-14 at index 19\n+// max(|f - f_GSL| / |f_GSL|): 9.6042704318763827e-16\n+// mean(f - f_GSL): 1.9296733523246769e-16\n+// variance(f - f_GSL): 1.9549106045027772e-33\n+// stddev(f - f_GSL): 4.4214371017835108e-17\n const testcase_cyl_bessel_i<double>\n-data003[21] =\n+data009[21] =\n {\n-  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000 },\n-  { 0.40311093489975897, 0.50000000000000000, 0.25000000000000000 },\n-  { 0.58799308679041573, 0.50000000000000000, 0.50000000000000000 },\n-  { 0.75761498638991298, 0.50000000000000000, 0.75000000000000000 },\n-  { 0.93767488824548695, 0.50000000000000000, 1.0000000000000000 },\n-  { 1.1432089853159872, 0.50000000000000000, 1.2500000000000000 },\n-  { 1.3871617204034761, 0.50000000000000000, 1.5000000000000000 },\n-  { 1.6830217804556815, 0.50000000000000000, 1.7500000000000000 },\n-  { 2.0462368630890526, 0.50000000000000000, 2.0000000000000000 },\n-  { 2.4953405089360041, 0.50000000000000000, 2.2500000000000000 },\n-  { 3.0530935381967175, 0.50000000000000000, 2.5000000000000000 },\n-  { 3.7477882494879449, 0.50000000000000000, 2.7500000000000000 },\n-  { 4.6148229034075969, 0.50000000000000000, 3.0000000000000000 },\n-  { 5.6986505325335495, 0.50000000000000000, 3.2500000000000000 },\n-  { 7.0552194086911877, 0.50000000000000000, 3.5000000000000000 },\n-  { 8.7550467841188944, 0.50000000000000000, 3.7500000000000000 },\n-  { 10.887101798588422, 0.50000000000000000, 4.0000000000000000 },\n-  { 13.563718712579764, 0.50000000000000000, 4.2500000000000000 },\n-  { 16.926820080158183, 0.50000000000000000, 4.5000000000000000 },\n-  { 21.155804306570005, 0.50000000000000000, 4.7500000000000000 },\n-  { 26.477547497559065, 0.50000000000000000, 5.0000000000000000 },\n+  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000, 0.0 },\n+  { 0.40311093489975897, 0.50000000000000000, 0.25000000000000000, 0.0 },\n+  { 0.58799308679041573, 0.50000000000000000, 0.50000000000000000, 0.0 },\n+  { 0.75761498638991298, 0.50000000000000000, 0.75000000000000000, 0.0 },\n+  { 0.93767488824548695, 0.50000000000000000, 1.0000000000000000, 0.0 },\n+  { 1.1432089853159872, 0.50000000000000000, 1.2500000000000000, 0.0 },\n+  { 1.3871617204034761, 0.50000000000000000, 1.5000000000000000, 0.0 },\n+  { 1.6830217804556813, 0.50000000000000000, 1.7500000000000000, 0.0 },\n+  { 2.0462368630890526, 0.50000000000000000, 2.0000000000000000, 0.0 },\n+  { 2.4953405089360046, 0.50000000000000000, 2.2500000000000000, 0.0 },\n+  { 3.0530935381967175, 0.50000000000000000, 2.5000000000000000, 0.0 },\n+  { 3.7477882494879449, 0.50000000000000000, 2.7500000000000000, 0.0 },\n+  { 4.6148229034075969, 0.50000000000000000, 3.0000000000000000, 0.0 },\n+  { 5.6986505325335486, 0.50000000000000000, 3.2500000000000000, 0.0 },\n+  { 7.0552194086911859, 0.50000000000000000, 3.5000000000000000, 0.0 },\n+  { 8.7550467841188979, 0.50000000000000000, 3.7500000000000000, 0.0 },\n+  { 10.887101798588422, 0.50000000000000000, 4.0000000000000000, 0.0 },\n+  { 13.563718712579764, 0.50000000000000000, 4.2500000000000000, 0.0 },\n+  { 16.926820080158183, 0.50000000000000000, 4.5000000000000000, 0.0 },\n+  { 21.155804306570005, 0.50000000000000000, 4.7500000000000000, 0.0 },\n+  { 26.477547497559065, 0.50000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler003 = 2.5000000000000020e-13;\n+const double toler009 = 2.5000000000000020e-13;\n \n // Test data for nu=0.66666666666666663.\n-// max(|f - f_GSL|): 1.2434497875801753e-14\n-// max(|f - f_GSL| / |f_GSL|): 1.3900778397944649e-15\n+// max(|f - f_GSL|): 1.9539925233402755e-14 at index 16\n+// max(|f - f_GSL| / |f_GSL|): 2.2100364323953014e-15\n+// mean(f - f_GSL): -5.2312651565075830e-15\n+// variance(f - f_GSL): 1.4792059082391298e-31\n+// stddev(f - f_GSL): 3.8460446022363414e-16\n const testcase_cyl_bessel_i<double>\n-data004[21] =\n+data010[21] =\n {\n-  { 0.0000000000000000, 0.66666666666666663, 0.0000000000000000 },\n-  { 0.27953690613200438, 0.66666666666666663, 0.25000000000000000 },\n-  { 0.45628323113556879, 0.66666666666666663, 0.50000000000000000 },\n-  { 0.62594569838182612, 0.66666666666666663, 0.75000000000000000 },\n-  { 0.80752128860612948, 0.66666666666666663, 1.0000000000000000 },\n-  { 1.0139484513577168, 0.66666666666666663, 1.2500000000000000 },\n-  { 1.2572918396962991, 0.66666666666666663, 1.5000000000000000 },\n-  { 1.5505806938325577, 0.66666666666666663, 1.7500000000000000 },\n-  { 1.9089492968236206, 0.66666666666666663, 2.0000000000000000 },\n-  { 2.3506463490300331, 0.66666666666666663, 2.2500000000000000 },\n-  { 2.8981161894224892, 0.66666666666666663, 2.5000000000000000 },\n-  { 3.5792654911068720, 0.66666666666666663, 2.7500000000000000 },\n-  { 4.4290087213549505, 0.66666666666666663, 3.0000000000000000 },\n-  { 5.4911895720097688, 0.66666666666666663, 3.2500000000000000 },\n-  { 6.8209918044137305, 0.66666666666666663, 3.5000000000000000 },\n-  { 8.4879784249619767, 0.66666666666666663, 3.7500000000000000 },\n-  { 10.579932774013002, 0.66666666666666663, 4.0000000000000000 },\n-  { 13.207720355482458, 0.66666666666666663, 4.2500000000000000 },\n-  { 16.511448404200543, 0.66666666666666663, 4.5000000000000000 },\n-  { 20.668274532832392, 0.66666666666666663, 4.7500000000000000 },\n-  { 25.902310583215122, 0.66666666666666663, 5.0000000000000000 },\n+  { 0.0000000000000000, 0.66666666666666663, 0.0000000000000000, 0.0 },\n+  { 0.27953690613200444, 0.66666666666666663, 0.25000000000000000, 0.0 },\n+  { 0.45628323113556890, 0.66666666666666663, 0.50000000000000000, 0.0 },\n+  { 0.62594569838182623, 0.66666666666666663, 0.75000000000000000, 0.0 },\n+  { 0.80752128860612971, 0.66666666666666663, 1.0000000000000000, 0.0 },\n+  { 1.0139484513577173, 0.66666666666666663, 1.2500000000000000, 0.0 },\n+  { 1.2572918396962993, 0.66666666666666663, 1.5000000000000000, 0.0 },\n+  { 1.5505806938325581, 0.66666666666666663, 1.7500000000000000, 0.0 },\n+  { 1.9089492968236210, 0.66666666666666663, 2.0000000000000000, 0.0 },\n+  { 2.3506463490300340, 0.66666666666666663, 2.2500000000000000, 0.0 },\n+  { 2.8981161894224896, 0.66666666666666663, 2.5000000000000000, 0.0 },\n+  { 3.5792654911068724, 0.66666666666666663, 2.7500000000000000, 0.0 },\n+  { 4.4290087213549514, 0.66666666666666663, 3.0000000000000000, 0.0 },\n+  { 5.4911895720097705, 0.66666666666666663, 3.2500000000000000, 0.0 },\n+  { 6.8209918044137305, 0.66666666666666663, 3.5000000000000000, 0.0 },\n+  { 8.4879784249619785, 0.66666666666666663, 3.7500000000000000, 0.0 },\n+  { 10.579932774013004, 0.66666666666666663, 4.0000000000000000, 0.0 },\n+  { 13.207720355482458, 0.66666666666666663, 4.2500000000000000, 0.0 },\n+  { 16.511448404200543, 0.66666666666666663, 4.5000000000000000, 0.0 },\n+  { 20.668274532832392, 0.66666666666666663, 4.7500000000000000, 0.0 },\n+  { 25.902310583215122, 0.66666666666666663, 5.0000000000000000, 0.0 },\n };\n-const double toler004 = 2.5000000000000020e-13;\n+const double toler010 = 2.5000000000000020e-13;\n \n // Test data for nu=1.0000000000000000.\n-// max(|f - f_GSL|): 3.5527136788005009e-15\n-// max(|f - f_GSL| / |f_GSL|): 2.2031887547040326e-16\n+// max(|f - f_GSL|): 1.2967404927621828e-13 at index 17\n+// max(|f - f_GSL| / |f_GSL|): 1.0977631741433893e-14\n+// mean(f - f_GSL): -3.0188814411265717e-14\n+// variance(f - f_GSL): 3.7247797767076778e-29\n+// stddev(f - f_GSL): 6.1030973912495271e-15\n const testcase_cyl_bessel_i<double>\n-data005[21] =\n+data011[21] =\n {\n-  { 0.0000000000000000, 1.0000000000000000, 0.0000000000000000 },\n-  { 0.12597910894546793, 1.0000000000000000, 0.25000000000000000 },\n-  { 0.25789430539089631, 1.0000000000000000, 0.50000000000000000 },\n-  { 0.40199246158092228, 1.0000000000000000, 0.75000000000000000 },\n-  { 0.56515910399248503, 1.0000000000000000, 1.0000000000000000 },\n-  { 0.75528141834074725, 1.0000000000000000, 1.2500000000000000 },\n-  { 0.98166642857790720, 1.0000000000000000, 1.5000000000000000 },\n-  { 1.2555375122401731, 1.0000000000000000, 1.7500000000000000 },\n-  { 1.5906368546373291, 1.0000000000000000, 2.0000000000000000 },\n-  { 2.0039674569295931, 1.0000000000000000, 2.2500000000000000 },\n-  { 2.5167162452886984, 1.0000000000000000, 2.5000000000000000 },\n-  { 3.1554101386190028, 1.0000000000000000, 2.7500000000000000 },\n-  { 3.9533702174026097, 1.0000000000000000, 3.0000000000000000 },\n-  { 4.9525461659085490, 1.0000000000000000, 3.2500000000000000 },\n-  { 6.2058349222583642, 1.0000000000000000, 3.5000000000000000 },\n-  { 7.7800152298244161, 1.0000000000000000, 3.7500000000000000 },\n-  { 9.7594651537044488, 1.0000000000000000, 4.0000000000000000 },\n-  { 12.250874667409304, 1.0000000000000000, 4.2500000000000000 },\n-  { 15.389222753735924, 1.0000000000000000, 4.5000000000000000 },\n-  { 19.345361447520226, 1.0000000000000000, 4.7500000000000000 },\n-  { 24.335642142450524, 1.0000000000000000, 5.0000000000000000 },\n+  { 0.0000000000000000, 1.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 0.12597910894546793, 1.0000000000000000, 0.25000000000000000, 0.0 },\n+  { 0.25789430539089631, 1.0000000000000000, 0.50000000000000000, 0.0 },\n+  { 0.40199246158092228, 1.0000000000000000, 0.75000000000000000, 0.0 },\n+  { 0.56515910399248503, 1.0000000000000000, 1.0000000000000000, 0.0 },\n+  { 0.75528141834074725, 1.0000000000000000, 1.2500000000000000, 0.0 },\n+  { 0.98166642857790720, 1.0000000000000000, 1.5000000000000000, 0.0 },\n+  { 1.2555375122401728, 1.0000000000000000, 1.7500000000000000, 0.0 },\n+  { 1.5906368546373291, 1.0000000000000000, 2.0000000000000000, 0.0 },\n+  { 2.0039674569295931, 1.0000000000000000, 2.2500000000000000, 0.0 },\n+  { 2.5167162452886984, 1.0000000000000000, 2.5000000000000000, 0.0 },\n+  { 3.1554101386190028, 1.0000000000000000, 2.7500000000000000, 0.0 },\n+  { 3.9533702174026097, 1.0000000000000000, 3.0000000000000000, 0.0 },\n+  { 4.9525461659085490, 1.0000000000000000, 3.2500000000000000, 0.0 },\n+  { 6.2058349222583642, 1.0000000000000000, 3.5000000000000000, 0.0 },\n+  { 7.7800152298244170, 1.0000000000000000, 3.7500000000000000, 0.0 },\n+  { 9.7594651537044523, 1.0000000000000000, 4.0000000000000000, 0.0 },\n+  { 12.250874667409304, 1.0000000000000000, 4.2500000000000000, 0.0 },\n+  { 15.389222753735924, 1.0000000000000000, 4.5000000000000000, 0.0 },\n+  { 19.345361447520226, 1.0000000000000000, 4.7500000000000000, 0.0 },\n+  { 24.335642142450524, 1.0000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler005 = 2.5000000000000020e-13;\n+const double toler011 = 1.0000000000000008e-12;\n \n // Test data for nu=2.0000000000000000.\n-// max(|f - f_GSL|): 1.7763568394002505e-15\n-// max(|f - f_GSL| / |f_GSL|): 2.2089187702829171e-16\n+// max(|f - f_GSL|): 1.8474111129762605e-13 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 1.0796880796865132e-14\n+// mean(f - f_GSL): -3.8692841919903068e-14\n+// variance(f - f_GSL): 1.1198300918819667e-27\n+// stddev(f - f_GSL): 3.3463862477035829e-14\n const testcase_cyl_bessel_i<double>\n-data006[21] =\n+data012[21] =\n {\n-  { 0.0000000000000000, 2.0000000000000000, 0.0000000000000000 },\n-  { 0.0078532696598645167, 2.0000000000000000, 0.25000000000000000 },\n-  { 0.031906149177738249, 2.0000000000000000, 0.50000000000000000 },\n-  { 0.073666880494875436, 2.0000000000000000, 0.75000000000000000 },\n-  { 0.13574766976703831, 2.0000000000000000, 1.0000000000000000 },\n-  { 0.22201844837663415, 2.0000000000000000, 1.2500000000000000 },\n-  { 0.33783461833568068, 2.0000000000000000, 1.5000000000000000 },\n-  { 0.49035213986973319, 2.0000000000000000, 1.7500000000000000 },\n-  { 0.68894844769873831, 2.0000000000000000, 2.0000000000000000 },\n-  { 0.94577390103115722, 2.0000000000000000, 2.2500000000000000 },\n-  { 1.2764661478191643, 2.0000000000000000, 2.5000000000000000 },\n-  { 1.7010693700601991, 2.0000000000000000, 2.7500000000000000 },\n-  { 2.2452124409299512, 2.0000000000000000, 3.0000000000000000 },\n-  { 2.9416152804573357, 2.0000000000000000, 3.2500000000000000 },\n-  { 3.8320120480778415, 2.0000000000000000, 3.5000000000000000 },\n-  { 4.9696044049382113, 2.0000000000000000, 3.7500000000000000 },\n-  { 6.4221893752841046, 2.0000000000000000, 4.0000000000000000 },\n-  { 8.2761461924550552, 2.0000000000000000, 4.2500000000000000 },\n-  { 10.641517298393307, 2.0000000000000000, 4.5000000000000000 },\n-  { 13.658483394577813, 2.0000000000000000, 4.7500000000000000 },\n-  { 17.505614966624233, 2.0000000000000000, 5.0000000000000000 },\n+  { 0.0000000000000000, 2.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 0.0078532696598645167, 2.0000000000000000, 0.25000000000000000, 0.0 },\n+  { 0.031906149177738249, 2.0000000000000000, 0.50000000000000000, 0.0 },\n+  { 0.073666880494875436, 2.0000000000000000, 0.75000000000000000, 0.0 },\n+  { 0.13574766976703831, 2.0000000000000000, 1.0000000000000000, 0.0 },\n+  { 0.22201844837663415, 2.0000000000000000, 1.2500000000000000, 0.0 },\n+  { 0.33783461833568068, 2.0000000000000000, 1.5000000000000000, 0.0 },\n+  { 0.49035213986973314, 2.0000000000000000, 1.7500000000000000, 0.0 },\n+  { 0.68894844769873831, 2.0000000000000000, 2.0000000000000000, 0.0 },\n+  { 0.94577390103115722, 2.0000000000000000, 2.2500000000000000, 0.0 },\n+  { 1.2764661478191643, 2.0000000000000000, 2.5000000000000000, 0.0 },\n+  { 1.7010693700601991, 2.0000000000000000, 2.7500000000000000, 0.0 },\n+  { 2.2452124409299512, 2.0000000000000000, 3.0000000000000000, 0.0 },\n+  { 2.9416152804573357, 2.0000000000000000, 3.2500000000000000, 0.0 },\n+  { 3.8320120480778415, 2.0000000000000000, 3.5000000000000000, 0.0 },\n+  { 4.9696044049382113, 2.0000000000000000, 3.7500000000000000, 0.0 },\n+  { 6.4221893752841055, 2.0000000000000000, 4.0000000000000000, 0.0 },\n+  { 8.2761461924550552, 2.0000000000000000, 4.2500000000000000, 0.0 },\n+  { 10.641517298393307, 2.0000000000000000, 4.5000000000000000, 0.0 },\n+  { 13.658483394577813, 2.0000000000000000, 4.7500000000000000, 0.0 },\n+  { 17.505614966624233, 2.0000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler006 = 2.5000000000000020e-13;\n+const double toler012 = 1.0000000000000008e-12;\n \n // Test data for nu=5.0000000000000000.\n-// max(|f - f_GSL|): 8.8817841970012523e-16\n-// max(|f - f_GSL| / |f_GSL|): 1.6610041744866592e-15\n+// max(|f - f_GSL|): 2.2204460492503131e-14 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 1.1379865680381910e-14\n+// mean(f - f_GSL): -3.4502652328999478e-15\n+// variance(f - f_GSL): 1.8465291591354433e-29\n+// stddev(f - f_GSL): 4.2971259687556788e-15\n const testcase_cyl_bessel_i<double>\n-data007[21] =\n+data013[21] =\n {\n-  { 0.0000000000000000, 5.0000000000000000, 0.0000000000000000 },\n-  { 2.5497616449882785e-07, 5.0000000000000000, 0.25000000000000000 },\n-  { 8.2231713131092646e-06, 5.0000000000000000, 0.50000000000000000 },\n-  { 6.3261122739811725e-05, 5.0000000000000000, 0.75000000000000000 },\n-  { 0.00027146315595697195, 5.0000000000000000, 1.0000000000000000 },\n-  { 0.00084793613616686856, 5.0000000000000000, 1.2500000000000000 },\n-  { 0.0021705595690975554, 5.0000000000000000, 1.5000000000000000 },\n-  { 0.0048504513371845394, 5.0000000000000000, 1.7500000000000000 },\n-  { 0.0098256793231317023, 5.0000000000000000, 2.0000000000000000 },\n-  { 0.018486577941045829, 5.0000000000000000, 2.2500000000000000 },\n-  { 0.032843475172023219, 5.0000000000000000, 2.5000000000000000 },\n-  { 0.055750882754221943, 5.0000000000000000, 2.7500000000000000 },\n-  { 0.091206477661513338, 5.0000000000000000, 3.0000000000000000 },\n-  { 0.14474880546308083, 5.0000000000000000, 3.2500000000000000 },\n-  { 0.22398495470190780, 5.0000000000000000, 3.5000000000000000 },\n-  { 0.33928899170999866, 5.0000000000000000, 3.7500000000000000 },\n-  { 0.50472436311316626, 5.0000000000000000, 4.0000000000000000 },\n-  { 0.73925961816682961, 5.0000000000000000, 4.2500000000000000 },\n-  { 1.0683677743764699, 5.0000000000000000, 4.5000000000000000 },\n-  { 1.5261268693599621, 5.0000000000000000, 4.7500000000000000 },\n-  { 2.1579745473225476, 5.0000000000000000, 5.0000000000000000 },\n+  { 0.0000000000000000, 5.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 2.5497616449882785e-07, 5.0000000000000000, 0.25000000000000000, 0.0 },\n+  { 8.2231713131092646e-06, 5.0000000000000000, 0.50000000000000000, 0.0 },\n+  { 6.3261122739811725e-05, 5.0000000000000000, 0.75000000000000000, 0.0 },\n+  { 0.00027146315595697195, 5.0000000000000000, 1.0000000000000000, 0.0 },\n+  { 0.00084793613616686856, 5.0000000000000000, 1.2500000000000000, 0.0 },\n+  { 0.0021705595690975554, 5.0000000000000000, 1.5000000000000000, 0.0 },\n+  { 0.0048504513371845385, 5.0000000000000000, 1.7500000000000000, 0.0 },\n+  { 0.0098256793231317023, 5.0000000000000000, 2.0000000000000000, 0.0 },\n+  { 0.018486577941045829, 5.0000000000000000, 2.2500000000000000, 0.0 },\n+  { 0.032843475172023219, 5.0000000000000000, 2.5000000000000000, 0.0 },\n+  { 0.055750882754221943, 5.0000000000000000, 2.7500000000000000, 0.0 },\n+  { 0.091206477661513338, 5.0000000000000000, 3.0000000000000000, 0.0 },\n+  { 0.14474880546308083, 5.0000000000000000, 3.2500000000000000, 0.0 },\n+  { 0.22398495470190780, 5.0000000000000000, 3.5000000000000000, 0.0 },\n+  { 0.33928899170999877, 5.0000000000000000, 3.7500000000000000, 0.0 },\n+  { 0.50472436311316637, 5.0000000000000000, 4.0000000000000000, 0.0 },\n+  { 0.73925961816682961, 5.0000000000000000, 4.2500000000000000, 0.0 },\n+  { 1.0683677743764701, 5.0000000000000000, 4.5000000000000000, 0.0 },\n+  { 1.5261268693599621, 5.0000000000000000, 4.7500000000000000, 0.0 },\n+  { 2.1579745473225476, 5.0000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler007 = 2.5000000000000020e-13;\n+const double toler013 = 1.0000000000000008e-12;\n \n // Test data for nu=10.000000000000000.\n-// max(|f - f_GSL|): 9.5409791178724390e-18\n-// max(|f - f_GSL| / |f_GSL|): 3.9173270279899483e-15\n+// max(|f - f_GSL|): 5.0306980803327406e-17 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 1.2741587624782699e-14\n+// mean(f - f_GSL): -5.4602116438803446e-18\n+// variance(f - f_GSL): 1.0558971696213844e-34\n+// stddev(f - f_GSL): 1.0275685717368863e-17\n const testcase_cyl_bessel_i<double>\n-data008[21] =\n+data014[21] =\n {\n-  { 0.0000000000000000, 10.000000000000000, 0.0000000000000000 },\n-  { 2.5701232848571186e-16, 10.000000000000000, 0.25000000000000000 },\n-  { 2.6430419258812784e-13, 10.000000000000000, 0.50000000000000000 },\n-  { 1.5349659676120412e-11, 10.000000000000000, 0.75000000000000000 },\n-  { 2.7529480398368732e-10, 10.000000000000000, 1.0000000000000000 },\n-  { 2.5967897782035928e-09, 10.000000000000000, 1.2500000000000000 },\n-  { 1.6330924437799743e-08, 10.000000000000000, 1.5000000000000000 },\n-  { 7.7706676834614093e-08, 10.000000000000000, 1.7500000000000000 },\n-  { 3.0169638793506839e-07, 10.000000000000000, 2.0000000000000000 },\n-  { 1.0034459057774481e-06, 10.000000000000000, 2.2500000000000000 },\n-  { 2.9557436109680578e-06, 10.000000000000000, 2.5000000000000000 },\n-  { 7.8955603774082724e-06, 10.000000000000000, 2.7500000000000000 },\n-  { 1.9464393470612970e-05, 10.000000000000000, 3.0000000000000000 },\n-  { 4.4875369479742435e-05, 10.000000000000000, 3.2500000000000000 },\n-  { 9.7760848514528916e-05, 10.000000000000000, 3.5000000000000000 },\n-  { 0.00020289011210063493, 10.000000000000000, 3.7500000000000000 },\n-  { 0.00040378896132693047, 10.000000000000000, 4.0000000000000000 },\n-  { 0.00077478519551669892, 10.000000000000000, 4.2500000000000000 },\n-  { 0.0014397060684919682, 10.000000000000000, 4.5000000000000000 },\n-  { 0.0026004486016189452, 10.000000000000000, 4.7500000000000000 },\n-  { 0.0045800444191760525, 10.000000000000000, 5.0000000000000000 },\n+  { 0.0000000000000000, 10.000000000000000, 0.0000000000000000, 0.0 },\n+  { 2.5701232848571186e-16, 10.000000000000000, 0.25000000000000000, 0.0 },\n+  { 2.6430419258812784e-13, 10.000000000000000, 0.50000000000000000, 0.0 },\n+  { 1.5349659676120412e-11, 10.000000000000000, 0.75000000000000000, 0.0 },\n+  { 2.7529480398368732e-10, 10.000000000000000, 1.0000000000000000, 0.0 },\n+  { 2.5967897782035928e-09, 10.000000000000000, 1.2500000000000000, 0.0 },\n+  { 1.6330924437799743e-08, 10.000000000000000, 1.5000000000000000, 0.0 },\n+  { 7.7706676834614079e-08, 10.000000000000000, 1.7500000000000000, 0.0 },\n+  { 3.0169638793506839e-07, 10.000000000000000, 2.0000000000000000, 0.0 },\n+  { 1.0034459057774481e-06, 10.000000000000000, 2.2500000000000000, 0.0 },\n+  { 2.9557436109680578e-06, 10.000000000000000, 2.5000000000000000, 0.0 },\n+  { 7.8955603774082724e-06, 10.000000000000000, 2.7500000000000000, 0.0 },\n+  { 1.9464393470612970e-05, 10.000000000000000, 3.0000000000000000, 0.0 },\n+  { 4.4875369479742435e-05, 10.000000000000000, 3.2500000000000000, 0.0 },\n+  { 9.7760848514528916e-05, 10.000000000000000, 3.5000000000000000, 0.0 },\n+  { 0.00020289011210063496, 10.000000000000000, 3.7500000000000000, 0.0 },\n+  { 0.00040378896132693058, 10.000000000000000, 4.0000000000000000, 0.0 },\n+  { 0.00077478519551669892, 10.000000000000000, 4.2500000000000000, 0.0 },\n+  { 0.0014397060684919682, 10.000000000000000, 4.5000000000000000, 0.0 },\n+  { 0.0026004486016189452, 10.000000000000000, 4.7500000000000000, 0.0 },\n+  { 0.0045800444191760525, 10.000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler008 = 2.5000000000000020e-13;\n+const double toler014 = 1.0000000000000008e-12;\n \n // Test data for nu=20.000000000000000.\n-// max(|f - f_GSL|): 2.9080568410067379e-26\n-// max(|f - f_GSL| / |f_GSL|): 2.1318627676504474e-15\n+// max(|f - f_GSL|): 6.9147129330604657e-25 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 1.6061319023473306e-14\n+// mean(f - f_GSL): -5.1436249496041580e-26\n+// variance(f - f_GSL): 2.1506355008505938e-50\n+// stddev(f - f_GSL): 1.4665045178418625e-25\n const testcase_cyl_bessel_i<double>\n-data009[21] =\n+data015[21] =\n {\n-  { 0.0000000000000000, 20.000000000000000, 0.0000000000000000 },\n-  { 3.5677858077910353e-37, 20.000000000000000, 0.25000000000000000 },\n-  { 3.7494538480790194e-31, 20.000000000000000, 0.50000000000000000 },\n-  { 1.2514356342425337e-27, 20.000000000000000, 0.75000000000000000 },\n-  { 3.9668359858190197e-25, 20.000000000000000, 1.0000000000000000 },\n-  { 3.4637832909868234e-23, 20.000000000000000, 1.2500000000000000 },\n-  { 1.3388331839683472e-21, 20.000000000000000, 1.5000000000000000 },\n-  { 2.9502376732679751e-20, 20.000000000000000, 1.7500000000000000 },\n-  { 4.3105605761095479e-19, 20.000000000000000, 2.0000000000000000 },\n-  { 4.6032451406433059e-18, 20.000000000000000, 2.2500000000000000 },\n-  { 3.8400317244170310e-17, 20.000000000000000, 2.5000000000000000 },\n-  { 2.6239115263043263e-16, 20.000000000000000, 2.7500000000000000 },\n-  { 1.5209660019426689e-15, 20.000000000000000, 3.0000000000000000 },\n-  { 7.6806450728249953e-15, 20.000000000000000, 3.2500000000000000 },\n-  { 3.4495528847222945e-14, 20.000000000000000, 3.5000000000000000 },\n-  { 1.4006589294850672e-13, 20.000000000000000, 3.7500000000000000 },\n-  { 5.2100734221993044e-13, 20.000000000000000, 4.0000000000000000 },\n-  { 1.7946903269488168e-12, 20.000000000000000, 4.2500000000000000 },\n-  { 5.7763830562279683e-12, 20.000000000000000, 4.5000000000000000 },\n-  { 1.7502433074548735e-11, 20.000000000000000, 4.7500000000000000 },\n-  { 5.0242393579718066e-11, 20.000000000000000, 5.0000000000000000 },\n+  { 0.0000000000000000, 20.000000000000000, 0.0000000000000000, 0.0 },\n+  { 3.5677858077910353e-37, 20.000000000000000, 0.25000000000000000, 0.0 },\n+  { 3.7494538480790194e-31, 20.000000000000000, 0.50000000000000000, 0.0 },\n+  { 1.2514356342425337e-27, 20.000000000000000, 0.75000000000000000, 0.0 },\n+  { 3.9668359858190197e-25, 20.000000000000000, 1.0000000000000000, 0.0 },\n+  { 3.4637832909868234e-23, 20.000000000000000, 1.2500000000000000, 0.0 },\n+  { 1.3388331839683472e-21, 20.000000000000000, 1.5000000000000000, 0.0 },\n+  { 2.9502376732679751e-20, 20.000000000000000, 1.7500000000000000, 0.0 },\n+  { 4.3105605761095479e-19, 20.000000000000000, 2.0000000000000000, 0.0 },\n+  { 4.6032451406433059e-18, 20.000000000000000, 2.2500000000000000, 0.0 },\n+  { 3.8400317244170310e-17, 20.000000000000000, 2.5000000000000000, 0.0 },\n+  { 2.6239115263043263e-16, 20.000000000000000, 2.7500000000000000, 0.0 },\n+  { 1.5209660019426689e-15, 20.000000000000000, 3.0000000000000000, 0.0 },\n+  { 7.6806450728249953e-15, 20.000000000000000, 3.2500000000000000, 0.0 },\n+  { 3.4495528847222945e-14, 20.000000000000000, 3.5000000000000000, 0.0 },\n+  { 1.4006589294850677e-13, 20.000000000000000, 3.7500000000000000, 0.0 },\n+  { 5.2100734221993054e-13, 20.000000000000000, 4.0000000000000000, 0.0 },\n+  { 1.7946903269488168e-12, 20.000000000000000, 4.2500000000000000, 0.0 },\n+  { 5.7763830562279699e-12, 20.000000000000000, 4.5000000000000000, 0.0 },\n+  { 1.7502433074548735e-11, 20.000000000000000, 4.7500000000000000, 0.0 },\n+  { 5.0242393579718066e-11, 20.000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler009 = 2.5000000000000020e-13;\n+const double toler015 = 1.0000000000000008e-12;\n //  cyl_bessel_i\n \n // Test data for nu=0.0000000000000000.\n-// max(|f - f_GSL|): 2.5687255815171641e+28\n-// max(|f - f_GSL| / |f_GSL|): 2.3922901025046178e-14\n+// max(|f - f_GSL|): 2.5841998320082313e+28 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 2.4067014886642843e-14\n+// mean(f - f_GSL): -1.2242902567974868e+27\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_cyl_bessel_i<double>\n-data010[21] =\n+data016[21] =\n {\n-  { 1.0000000000000000, 0.0000000000000000, 0.0000000000000000 },\n-  { 27.239871823604439, 0.0000000000000000, 5.0000000000000000 },\n-  { 2815.7166284662558, 0.0000000000000000, 10.000000000000000 },\n-  { 339649.37329791381, 0.0000000000000000, 15.000000000000000 },\n-  { 43558282.559553474, 0.0000000000000000, 20.000000000000000 },\n-  { 5774560606.4663124, 0.0000000000000000, 25.000000000000000 },\n-  { 781672297823.97925, 0.0000000000000000, 30.000000000000000 },\n-  { 107338818494514.42, 0.0000000000000000, 35.000000000000000 },\n-  { 14894774793419918., 0.0000000000000000, 40.000000000000000 },\n-  { 2.0834140751773164e+18, 0.0000000000000000, 45.000000000000000 },\n-  { 2.9325537838493457e+20, 0.0000000000000000, 50.000000000000000 },\n-  { 4.1487895607332160e+22, 0.0000000000000000, 55.000000000000000 },\n-  { 5.8940770556098216e+24, 0.0000000000000000, 60.000000000000000 },\n-  { 8.4030398456255596e+26, 0.0000000000000000, 65.000000000000000 },\n-  { 1.2015889579125424e+29, 0.0000000000000000, 70.000000000000000 },\n-  { 1.7226390780357976e+31, 0.0000000000000000, 75.000000000000000 },\n-  { 2.4751784043341661e+33, 0.0000000000000000, 80.000000000000000 },\n-  { 3.5634776304081403e+35, 0.0000000000000000, 85.000000000000000 },\n-  { 5.1392383455086475e+37, 0.0000000000000000, 90.000000000000000 },\n-  { 7.4233258618752072e+39, 0.0000000000000000, 95.000000000000000 },\n-  { 1.0737517071310986e+42, 0.0000000000000000, 100.00000000000000 },\n+  { 1.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 27.239871823604439, 0.0000000000000000, 5.0000000000000000, 0.0 },\n+  { 2815.7166284662558, 0.0000000000000000, 10.000000000000000, 0.0 },\n+  { 339649.37329791381, 0.0000000000000000, 15.000000000000000, 0.0 },\n+  { 43558282.559553474, 0.0000000000000000, 20.000000000000000, 0.0 },\n+  { 5774560606.4663124, 0.0000000000000000, 25.000000000000000, 0.0 },\n+  { 781672297823.97925, 0.0000000000000000, 30.000000000000000, 0.0 },\n+  { 107338818494514.42, 0.0000000000000000, 35.000000000000000, 0.0 },\n+  { 14894774793419916., 0.0000000000000000, 40.000000000000000, 0.0 },\n+  { 2.0834140751773164e+18, 0.0000000000000000, 45.000000000000000, 0.0 },\n+  { 2.9325537838493457e+20, 0.0000000000000000, 50.000000000000000, 0.0 },\n+  { 4.1487895607332160e+22, 0.0000000000000000, 55.000000000000000, 0.0 },\n+  { 5.8940770556098216e+24, 0.0000000000000000, 60.000000000000000, 0.0 },\n+  { 8.4030398456255582e+26, 0.0000000000000000, 65.000000000000000, 0.0 },\n+  { 1.2015889579125424e+29, 0.0000000000000000, 70.000000000000000, 0.0 },\n+  { 1.7226390780357976e+31, 0.0000000000000000, 75.000000000000000, 0.0 },\n+  { 2.4751784043341661e+33, 0.0000000000000000, 80.000000000000000, 0.0 },\n+  { 3.5634776304081403e+35, 0.0000000000000000, 85.000000000000000, 0.0 },\n+  { 5.1392383455086475e+37, 0.0000000000000000, 90.000000000000000, 0.0 },\n+  { 7.4233258618752072e+39, 0.0000000000000000, 95.000000000000000, 0.0 },\n+  { 1.0737517071310986e+42, 0.0000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler010 = 2.5000000000000015e-12;\n+const double toler016 = 2.5000000000000015e-12;\n \n // Test data for nu=0.33333333333333331.\n-// max(|f - f_GSL|): 1.0831975343747077e+28\n+// max(|f - f_GSL|): 1.0986717848657750e+28 at index 20\n // max(|f - f_GSL| / |f_GSL|): 1.2017640663876795e-14\n+// mean(f - f_GSL): -5.2068252642007974e+26\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_cyl_bessel_i<double>\n-data011[21] =\n+data017[21] =\n {\n-  { 0.0000000000000000, 0.33333333333333331, 0.0000000000000000 },\n-  { 26.897553069268362, 0.33333333333333331, 5.0000000000000000 },\n-  { 2799.2396097056790, 0.33333333333333331, 10.000000000000000 },\n-  { 338348.63146593666, 0.33333333333333331, 15.000000000000000 },\n-  { 43434263.927938424, 0.33333333333333331, 20.000000000000000 },\n-  { 5761474759.6213636, 0.33333333333333331, 25.000000000000000 },\n-  { 780201111830.30237, 0.33333333333333331, 30.000000000000000 },\n-  { 107166066959051.91, 0.33333333333333331, 35.000000000000000 },\n-  { 14873836574083764., 0.33333333333333331, 40.000000000000000 },\n-  { 2.0808143020217085e+18, 0.33333333333333331, 45.000000000000000 },\n-  { 2.9292639365644226e+20, 0.33333333333333331, 50.000000000000000 },\n-  { 4.1445621624120489e+22, 0.33333333333333331, 55.000000000000000 },\n-  { 5.8885758374365916e+24, 0.33333333333333331, 60.000000000000000 },\n-  { 8.3958047021083955e+26, 0.33333333333333331, 65.000000000000000 },\n-  { 1.2006287819446431e+29, 0.33333333333333331, 70.000000000000000 },\n-  { 1.7213548977150022e+31, 0.33333333333333331, 75.000000000000000 },\n-  { 2.4734492458444449e+33, 0.33333333333333331, 80.000000000000000 },\n-  { 3.5611354547857122e+35, 0.33333333333333331, 85.000000000000000 },\n-  { 5.1360491295551848e+37, 0.33333333333333331, 90.000000000000000 },\n-  { 7.4189629097600431e+39, 0.33333333333333331, 95.000000000000000 },\n-  { 1.0731523308358370e+42, 0.33333333333333331, 100.00000000000000 },\n+  { 0.0000000000000000, 0.33333333333333331, 0.0000000000000000, 0.0 },\n+  { 26.897553069268362, 0.33333333333333331, 5.0000000000000000, 0.0 },\n+  { 2799.2396097056790, 0.33333333333333331, 10.000000000000000, 0.0 },\n+  { 338348.63146593666, 0.33333333333333331, 15.000000000000000, 0.0 },\n+  { 43434263.927938424, 0.33333333333333331, 20.000000000000000, 0.0 },\n+  { 5761474759.6213636, 0.33333333333333331, 25.000000000000000, 0.0 },\n+  { 780201111830.30237, 0.33333333333333331, 30.000000000000000, 0.0 },\n+  { 107166066959051.91, 0.33333333333333331, 35.000000000000000, 0.0 },\n+  { 14873836574083762., 0.33333333333333331, 40.000000000000000, 0.0 },\n+  { 2.0808143020217085e+18, 0.33333333333333331, 45.000000000000000, 0.0 },\n+  { 2.9292639365644226e+20, 0.33333333333333331, 50.000000000000000, 0.0 },\n+  { 4.1445621624120489e+22, 0.33333333333333331, 55.000000000000000, 0.0 },\n+  { 5.8885758374365916e+24, 0.33333333333333331, 60.000000000000000, 0.0 },\n+  { 8.3958047021083941e+26, 0.33333333333333331, 65.000000000000000, 0.0 },\n+  { 1.2006287819446431e+29, 0.33333333333333331, 70.000000000000000, 0.0 },\n+  { 1.7213548977150022e+31, 0.33333333333333331, 75.000000000000000, 0.0 },\n+  { 2.4734492458444449e+33, 0.33333333333333331, 80.000000000000000, 0.0 },\n+  { 3.5611354547857122e+35, 0.33333333333333331, 85.000000000000000, 0.0 },\n+  { 5.1360491295551848e+37, 0.33333333333333331, 90.000000000000000, 0.0 },\n+  { 7.4189629097600431e+39, 0.33333333333333331, 95.000000000000000, 0.0 },\n+  { 1.0731523308358370e+42, 0.33333333333333331, 100.00000000000000, 0.0 },\n };\n-const double toler011 = 1.0000000000000008e-12;\n+const double toler017 = 1.0000000000000008e-12;\n \n // Test data for nu=0.50000000000000000.\n-// max(|f - f_GSL|): 6.9634127209802640e+27\n-// max(|f - f_GSL| / |f_GSL|): 1.1904152155149629e-14\n+// max(|f - f_GSL|): 7.1181552258909366e+27 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 1.2230293310085236e-14\n+// mean(f - f_GSL): -3.3462733503919608e+26\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_cyl_bessel_i<double>\n-data012[21] =\n+data018[21] =\n {\n-  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000 },\n-  { 26.477547497559065, 0.50000000000000000, 5.0000000000000000 },\n-  { 2778.7846038745711, 0.50000000000000000, 10.000000000000000 },\n-  { 336729.88718706399, 0.50000000000000000, 15.000000000000000 },\n-  { 43279746.272428922, 0.50000000000000000, 20.000000000000000 },\n-  { 5745159748.3464680, 0.50000000000000000, 25.000000000000000 },\n-  { 778366068840.44580, 0.50000000000000000, 30.000000000000000 },\n-  { 106950522408567.66, 0.50000000000000000, 35.000000000000000 },\n-  { 14847705549021962., 0.50000000000000000, 40.000000000000000 },\n-  { 2.0775691824625661e+18, 0.50000000000000000, 45.000000000000000 },\n-  { 2.9251568529912984e+20, 0.50000000000000000, 50.000000000000000 },\n-  { 4.1392840094781220e+22, 0.50000000000000000, 55.000000000000000 },\n-  { 5.8817065760751945e+24, 0.50000000000000000, 60.000000000000000 },\n-  { 8.3867695787277258e+26, 0.50000000000000000, 65.000000000000000 },\n-  { 1.1994296461653203e+29, 0.50000000000000000, 70.000000000000000 },\n-  { 1.7197510246063334e+31, 0.50000000000000000, 75.000000000000000 },\n-  { 2.4712895036230794e+33, 0.50000000000000000, 80.000000000000000 },\n-  { 3.5582099086757769e+35, 0.50000000000000000, 85.000000000000000 },\n-  { 5.1320654031231128e+37, 0.50000000000000000, 90.000000000000000 },\n-  { 7.4135128383495239e+39, 0.50000000000000000, 95.000000000000000 },\n-  { 1.0724035825423179e+42, 0.50000000000000000, 100.00000000000000 },\n+  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000, 0.0 },\n+  { 26.477547497559065, 0.50000000000000000, 5.0000000000000000, 0.0 },\n+  { 2778.7846038745711, 0.50000000000000000, 10.000000000000000, 0.0 },\n+  { 336729.88718706399, 0.50000000000000000, 15.000000000000000, 0.0 },\n+  { 43279746.272428922, 0.50000000000000000, 20.000000000000000, 0.0 },\n+  { 5745159748.3464680, 0.50000000000000000, 25.000000000000000, 0.0 },\n+  { 778366068840.44580, 0.50000000000000000, 30.000000000000000, 0.0 },\n+  { 106950522408567.66, 0.50000000000000000, 35.000000000000000, 0.0 },\n+  { 14847705549021960., 0.50000000000000000, 40.000000000000000, 0.0 },\n+  { 2.0775691824625661e+18, 0.50000000000000000, 45.000000000000000, 0.0 },\n+  { 2.9251568529912984e+20, 0.50000000000000000, 50.000000000000000, 0.0 },\n+  { 4.1392840094781220e+22, 0.50000000000000000, 55.000000000000000, 0.0 },\n+  { 5.8817065760751945e+24, 0.50000000000000000, 60.000000000000000, 0.0 },\n+  { 8.3867695787277245e+26, 0.50000000000000000, 65.000000000000000, 0.0 },\n+  { 1.1994296461653203e+29, 0.50000000000000000, 70.000000000000000, 0.0 },\n+  { 1.7197510246063334e+31, 0.50000000000000000, 75.000000000000000, 0.0 },\n+  { 2.4712895036230794e+33, 0.50000000000000000, 80.000000000000000, 0.0 },\n+  { 3.5582099086757769e+35, 0.50000000000000000, 85.000000000000000, 0.0 },\n+  { 5.1320654031231128e+37, 0.50000000000000000, 90.000000000000000, 0.0 },\n+  { 7.4135128383495239e+39, 0.50000000000000000, 95.000000000000000, 0.0 },\n+  { 1.0724035825423179e+42, 0.50000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler012 = 1.0000000000000008e-12;\n+const double toler018 = 1.0000000000000008e-12;\n \n // Test data for nu=0.66666666666666663.\n-// max(|f - f_GSL|): 4.4875326424095035e+27\n+// max(|f - f_GSL|): 4.6422751473201760e+27 at index 20\n // max(|f - f_GSL| / |f_GSL|): 8.8432218147527708e-15\n+// mean(f - f_GSL): -2.2367290021744526e+26\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_cyl_bessel_i<double>\n-data013[21] =\n+data019[21] =\n {\n-  { 0.0000000000000000, 0.66666666666666663, 0.0000000000000000 },\n-  { 25.902310583215122, 0.66666666666666663, 5.0000000000000000 },\n-  { 2750.4090423459315, 0.66666666666666663, 10.000000000000000 },\n-  { 334476.98138574377, 0.66666666666666663, 15.000000000000000 },\n-  { 43064361.686912313, 0.66666666666666663, 20.000000000000000 },\n-  { 5722397441.9603882, 0.66666666666666663, 25.000000000000000 },\n-  { 775804343498.02661, 0.66666666666666663, 30.000000000000000 },\n-  { 106649495512800.88, 0.66666666666666663, 35.000000000000000 },\n-  { 14811199896983756., 0.66666666666666663, 40.000000000000000 },\n-  { 2.0730345814356961e+18, 0.66666666666666663, 45.000000000000000 },\n-  { 2.9194166755257467e+20, 0.66666666666666663, 50.000000000000000 },\n-  { 4.1319059569935374e+22, 0.66666666666666663, 55.000000000000000 },\n-  { 5.8721031476386222e+24, 0.66666666666666663, 60.000000000000000 },\n-  { 8.3741368248217844e+26, 0.66666666666666663, 65.000000000000000 },\n-  { 1.1977528777008688e+29, 0.66666666666666663, 70.000000000000000 },\n-  { 1.7175081240014333e+31, 0.66666666666666663, 75.000000000000000 },\n-  { 2.4682690458513916e+33, 0.66666666666666663, 80.000000000000000 },\n-  { 3.5541181975850724e+35, 0.66666666666666663, 85.000000000000000 },\n-  { 5.1264933963228892e+37, 0.66666666666666663, 90.000000000000000 },\n-  { 7.4058894880134064e+39, 0.66666666666666663, 95.000000000000000 },\n-  { 1.0713562154788124e+42, 0.66666666666666663, 100.00000000000000 },\n+  { 0.0000000000000000, 0.66666666666666663, 0.0000000000000000, 0.0 },\n+  { 25.902310583215122, 0.66666666666666663, 5.0000000000000000, 0.0 },\n+  { 2750.4090423459315, 0.66666666666666663, 10.000000000000000, 0.0 },\n+  { 334476.98138574377, 0.66666666666666663, 15.000000000000000, 0.0 },\n+  { 43064361.686912313, 0.66666666666666663, 20.000000000000000, 0.0 },\n+  { 5722397441.9603882, 0.66666666666666663, 25.000000000000000, 0.0 },\n+  { 775804343498.02661, 0.66666666666666663, 30.000000000000000, 0.0 },\n+  { 106649495512800.88, 0.66666666666666663, 35.000000000000000, 0.0 },\n+  { 14811199896983754., 0.66666666666666663, 40.000000000000000, 0.0 },\n+  { 2.0730345814356961e+18, 0.66666666666666663, 45.000000000000000, 0.0 },\n+  { 2.9194166755257467e+20, 0.66666666666666663, 50.000000000000000, 0.0 },\n+  { 4.1319059569935374e+22, 0.66666666666666663, 55.000000000000000, 0.0 },\n+  { 5.8721031476386222e+24, 0.66666666666666663, 60.000000000000000, 0.0 },\n+  { 8.3741368248217830e+26, 0.66666666666666663, 65.000000000000000, 0.0 },\n+  { 1.1977528777008688e+29, 0.66666666666666663, 70.000000000000000, 0.0 },\n+  { 1.7175081240014333e+31, 0.66666666666666663, 75.000000000000000, 0.0 },\n+  { 2.4682690458513916e+33, 0.66666666666666663, 80.000000000000000, 0.0 },\n+  { 3.5541181975850724e+35, 0.66666666666666663, 85.000000000000000, 0.0 },\n+  { 5.1264933963228892e+37, 0.66666666666666663, 90.000000000000000, 0.0 },\n+  { 7.4058894880134064e+39, 0.66666666666666663, 95.000000000000000, 0.0 },\n+  { 1.0713562154788124e+42, 0.66666666666666663, 100.00000000000000, 0.0 },\n };\n-const double toler013 = 5.0000000000000039e-13;\n+const double toler019 = 5.0000000000000039e-13;\n \n // Test data for nu=1.0000000000000000.\n-// max(|f - f_GSL|): 5.7254726816948838e+27\n+// max(|f - f_GSL|): 5.4159876718735387e+27 at index 20\n // max(|f - f_GSL| / |f_GSL|): 7.0819761463168391e-15\n+// mean(f - f_GSL): 2.5933470782682662e+26\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_cyl_bessel_i<double>\n-data014[21] =\n+data020[21] =\n {\n-  { 0.0000000000000000, 1.0000000000000000, 0.0000000000000000 },\n-  { 24.335642142450524, 1.0000000000000000, 5.0000000000000000 },\n-  { 2670.9883037012560, 1.0000000000000000, 10.000000000000000 },\n-  { 328124.92197020649, 1.0000000000000000, 15.000000000000000 },\n-  { 42454973.385127783, 1.0000000000000000, 20.000000000000000 },\n-  { 5657865129.8787022, 1.0000000000000000, 25.000000000000000 },\n-  { 768532038938.95667, 1.0000000000000000, 30.000000000000000 },\n-  { 105794126051896.17, 1.0000000000000000, 35.000000000000000 },\n-  { 14707396163259354., 1.0000000000000000, 40.000000000000000 },\n-  { 2.0601334620815780e+18, 1.0000000000000000, 45.000000000000000 },\n-  { 2.9030785901035638e+20, 1.0000000000000000, 50.000000000000000 },\n-  { 4.1108986452992812e+22, 1.0000000000000000, 55.000000000000000 },\n-  { 5.8447515883904527e+24, 1.0000000000000000, 60.000000000000000 },\n-  { 8.3381485471501302e+26, 1.0000000000000000, 65.000000000000000 },\n-  { 1.1929750788892366e+29, 1.0000000000000000, 70.000000000000000 },\n-  { 1.7111160152965382e+31, 1.0000000000000000, 75.000000000000000 },\n-  { 2.4596595795675343e+33, 1.0000000000000000, 80.000000000000000 },\n-  { 3.5424536064404024e+35, 1.0000000000000000, 85.000000000000000 },\n-  { 5.1106068152566129e+37, 1.0000000000000000, 90.000000000000000 },\n-  { 7.3841518091360182e+39, 1.0000000000000000, 95.000000000000000 },\n-  { 1.0683693903381569e+42, 1.0000000000000000, 100.00000000000000 },\n+  { 0.0000000000000000, 1.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 24.335642142450524, 1.0000000000000000, 5.0000000000000000, 0.0 },\n+  { 2670.9883037012560, 1.0000000000000000, 10.000000000000000, 0.0 },\n+  { 328124.92197020649, 1.0000000000000000, 15.000000000000000, 0.0 },\n+  { 42454973.385127783, 1.0000000000000000, 20.000000000000000, 0.0 },\n+  { 5657865129.8787022, 1.0000000000000000, 25.000000000000000, 0.0 },\n+  { 768532038938.95667, 1.0000000000000000, 30.000000000000000, 0.0 },\n+  { 105794126051896.17, 1.0000000000000000, 35.000000000000000, 0.0 },\n+  { 14707396163259352., 1.0000000000000000, 40.000000000000000, 0.0 },\n+  { 2.0601334620815780e+18, 1.0000000000000000, 45.000000000000000, 0.0 },\n+  { 2.9030785901035638e+20, 1.0000000000000000, 50.000000000000000, 0.0 },\n+  { 4.1108986452992812e+22, 1.0000000000000000, 55.000000000000000, 0.0 },\n+  { 5.8447515883904527e+24, 1.0000000000000000, 60.000000000000000, 0.0 },\n+  { 8.3381485471501288e+26, 1.0000000000000000, 65.000000000000000, 0.0 },\n+  { 1.1929750788892366e+29, 1.0000000000000000, 70.000000000000000, 0.0 },\n+  { 1.7111160152965382e+31, 1.0000000000000000, 75.000000000000000, 0.0 },\n+  { 2.4596595795675343e+33, 1.0000000000000000, 80.000000000000000, 0.0 },\n+  { 3.5424536064404024e+35, 1.0000000000000000, 85.000000000000000, 0.0 },\n+  { 5.1106068152566129e+37, 1.0000000000000000, 90.000000000000000, 0.0 },\n+  { 7.3841518091360182e+39, 1.0000000000000000, 95.000000000000000, 0.0 },\n+  { 1.0683693903381569e+42, 1.0000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler014 = 5.0000000000000039e-13;\n+const double toler020 = 5.0000000000000039e-13;\n \n // Test data for nu=2.0000000000000000.\n-// max(|f - f_GSL|): 6.3444427013375739e+27\n-// max(|f - f_GSL| / |f_GSL|): 6.0286366727804324e-15\n+// max(|f - f_GSL|): 6.1897001964269014e+27 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 1.0553248866140883e-14\n+// mean(f - f_GSL): 2.9514880793266611e+26\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_cyl_bessel_i<double>\n-data015[21] =\n+data021[21] =\n {\n-  { 0.0000000000000000, 2.0000000000000000, 0.0000000000000000 },\n-  { 17.505614966624233, 2.0000000000000000, 5.0000000000000000 },\n-  { 2281.5189677260046, 2.0000000000000000, 10.000000000000000 },\n-  { 295899.38370188628, 2.0000000000000000, 15.000000000000000 },\n-  { 39312785.221040756, 2.0000000000000000, 20.000000000000000 },\n-  { 5321931396.0760155, 2.0000000000000000, 25.000000000000000 },\n-  { 730436828561.38013, 2.0000000000000000, 30.000000000000000 },\n-  { 101293439862977.19, 2.0000000000000000, 35.000000000000000 },\n-  { 14159404985256922., 2.0000000000000000, 40.000000000000000 },\n-  { 1.9918525879736883e+18, 2.0000000000000000, 45.000000000000000 },\n-  { 2.8164306402451938e+20, 2.0000000000000000, 50.000000000000000 },\n-  { 3.9993023372677540e+22, 2.0000000000000000, 55.000000000000000 },\n-  { 5.6992520026634433e+24, 2.0000000000000000, 60.000000000000000 },\n-  { 8.1464814287900378e+26, 2.0000000000000000, 65.000000000000000 },\n-  { 1.1675039556585663e+29, 2.0000000000000000, 70.000000000000000 },\n-  { 1.6770093176278926e+31, 2.0000000000000000, 75.000000000000000 },\n-  { 2.4136869148449879e+33, 2.0000000000000000, 80.000000000000000 },\n-  { 3.4801257808448186e+35, 2.0000000000000000, 85.000000000000000 },\n-  { 5.0256693051696307e+37, 2.0000000000000000, 90.000000000000000 },\n-  { 7.2678700343145818e+39, 2.0000000000000000, 95.000000000000000 },\n-  { 1.0523843193243042e+42, 2.0000000000000000, 100.00000000000000 },\n+  { 0.0000000000000000, 2.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 17.505614966624233, 2.0000000000000000, 5.0000000000000000, 0.0 },\n+  { 2281.5189677260046, 2.0000000000000000, 10.000000000000000, 0.0 },\n+  { 295899.38370188628, 2.0000000000000000, 15.000000000000000, 0.0 },\n+  { 39312785.221040756, 2.0000000000000000, 20.000000000000000, 0.0 },\n+  { 5321931396.0760155, 2.0000000000000000, 25.000000000000000, 0.0 },\n+  { 730436828561.38013, 2.0000000000000000, 30.000000000000000, 0.0 },\n+  { 101293439862977.19, 2.0000000000000000, 35.000000000000000, 0.0 },\n+  { 14159404985256920., 2.0000000000000000, 40.000000000000000, 0.0 },\n+  { 1.9918525879736883e+18, 2.0000000000000000, 45.000000000000000, 0.0 },\n+  { 2.8164306402451938e+20, 2.0000000000000000, 50.000000000000000, 0.0 },\n+  { 3.9993023372677540e+22, 2.0000000000000000, 55.000000000000000, 0.0 },\n+  { 5.6992520026634433e+24, 2.0000000000000000, 60.000000000000000, 0.0 },\n+  { 8.1464814287900364e+26, 2.0000000000000000, 65.000000000000000, 0.0 },\n+  { 1.1675039556585663e+29, 2.0000000000000000, 70.000000000000000, 0.0 },\n+  { 1.6770093176278926e+31, 2.0000000000000000, 75.000000000000000, 0.0 },\n+  { 2.4136869148449879e+33, 2.0000000000000000, 80.000000000000000, 0.0 },\n+  { 3.4801257808448186e+35, 2.0000000000000000, 85.000000000000000, 0.0 },\n+  { 5.0256693051696307e+37, 2.0000000000000000, 90.000000000000000, 0.0 },\n+  { 7.2678700343145818e+39, 2.0000000000000000, 95.000000000000000, 0.0 },\n+  { 1.0523843193243042e+42, 2.0000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler015 = 5.0000000000000039e-13;\n+const double toler021 = 1.0000000000000008e-12;\n \n // Test data for nu=5.0000000000000000.\n-// max(|f - f_GSL|): 7.7371252455336267e+26\n-// max(|f - f_GSL| / |f_GSL|): 1.6729319922562276e-15\n+// max(|f - f_GSL|): 1.0831975343747077e+27 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 1.0289491375166011e-14\n+// mean(f - f_GSL): -5.2041812077613416e+25\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_cyl_bessel_i<double>\n-data016[21] =\n+data022[21] =\n {\n-  { 0.0000000000000000, 5.0000000000000000, 0.0000000000000000 },\n-  { 2.1579745473225476, 5.0000000000000000, 5.0000000000000000 },\n-  { 777.18828640326012, 5.0000000000000000, 10.000000000000000 },\n-  { 144572.01120063409, 5.0000000000000000, 15.000000000000000 },\n-  { 23018392.213413671, 5.0000000000000000, 20.000000000000000 },\n-  { 3472466208.7419176, 5.0000000000000000, 25.000000000000000 },\n-  { 512151465476.93494, 5.0000000000000000, 30.000000000000000 },\n-  { 74756743552251.547, 5.0000000000000000, 35.000000000000000 },\n-  { 10858318337624280., 5.0000000000000000, 40.000000000000000 },\n-  { 1.5736087399245911e+18, 5.0000000000000000, 45.000000000000000 },\n-  { 2.2785483079112825e+20, 5.0000000000000000, 50.000000000000000 },\n-  { 3.2989391052963687e+22, 5.0000000000000000, 55.000000000000000 },\n-  { 4.7777652072561732e+24, 5.0000000000000000, 60.000000000000000 },\n-  { 6.9232165147172657e+26, 5.0000000000000000, 65.000000000000000 },\n-  { 1.0038643002095155e+29, 5.0000000000000000, 70.000000000000000 },\n-  { 1.4566328222327073e+31, 5.0000000000000000, 75.000000000000000 },\n-  { 2.1151488565944835e+33, 5.0000000000000000, 80.000000000000000 },\n-  { 3.0735883450768239e+35, 5.0000000000000000, 85.000000000000000 },\n-  { 4.4694790189230327e+37, 5.0000000000000000, 90.000000000000000 },\n-  { 6.5037505570430995e+39, 5.0000000000000000, 95.000000000000000 },\n-  { 9.4700938730355882e+41, 5.0000000000000000, 100.00000000000000 },\n+  { 0.0000000000000000, 5.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 2.1579745473225476, 5.0000000000000000, 5.0000000000000000, 0.0 },\n+  { 777.18828640326012, 5.0000000000000000, 10.000000000000000, 0.0 },\n+  { 144572.01120063409, 5.0000000000000000, 15.000000000000000, 0.0 },\n+  { 23018392.213413671, 5.0000000000000000, 20.000000000000000, 0.0 },\n+  { 3472466208.7419176, 5.0000000000000000, 25.000000000000000, 0.0 },\n+  { 512151465476.93494, 5.0000000000000000, 30.000000000000000, 0.0 },\n+  { 74756743552251.547, 5.0000000000000000, 35.000000000000000, 0.0 },\n+  { 10858318337624278., 5.0000000000000000, 40.000000000000000, 0.0 },\n+  { 1.5736087399245911e+18, 5.0000000000000000, 45.000000000000000, 0.0 },\n+  { 2.2785483079112825e+20, 5.0000000000000000, 50.000000000000000, 0.0 },\n+  { 3.2989391052963687e+22, 5.0000000000000000, 55.000000000000000, 0.0 },\n+  { 4.7777652072561732e+24, 5.0000000000000000, 60.000000000000000, 0.0 },\n+  { 6.9232165147172657e+26, 5.0000000000000000, 65.000000000000000, 0.0 },\n+  { 1.0038643002095155e+29, 5.0000000000000000, 70.000000000000000, 0.0 },\n+  { 1.4566328222327073e+31, 5.0000000000000000, 75.000000000000000, 0.0 },\n+  { 2.1151488565944835e+33, 5.0000000000000000, 80.000000000000000, 0.0 },\n+  { 3.0735883450768239e+35, 5.0000000000000000, 85.000000000000000, 0.0 },\n+  { 4.4694790189230327e+37, 5.0000000000000000, 90.000000000000000, 0.0 },\n+  { 6.5037505570430995e+39, 5.0000000000000000, 95.000000000000000, 0.0 },\n+  { 9.4700938730355882e+41, 5.0000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler016 = 2.5000000000000020e-13;\n+const double toler022 = 1.0000000000000008e-12;\n \n // Test data for nu=10.000000000000000.\n-// max(|f - f_GSL|): 2.3211375736600880e+26\n-// max(|f - f_GSL| / |f_GSL|): 3.0834307473515225e-15\n+// max(|f - f_GSL|): 1.5474250491067253e+26 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 1.2009151331790140e-14\n+// mean(f - f_GSL): 7.4845081675400805e+24\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_cyl_bessel_i<double>\n-data017[21] =\n+data023[21] =\n {\n-  { 0.0000000000000000, 10.000000000000000, 0.0000000000000000 },\n-  { 0.0045800444191760525, 10.000000000000000, 5.0000000000000000 },\n-  { 21.891706163723381, 10.000000000000000, 10.000000000000000 },\n-  { 12267.475049806462, 10.000000000000000, 15.000000000000000 },\n-  { 3540200.2090195213, 10.000000000000000, 20.000000000000000 },\n-  { 771298871.17072666, 10.000000000000000, 25.000000000000000 },\n-  { 145831809975.96710, 10.000000000000000, 30.000000000000000 },\n-  { 25449470018534.777, 10.000000000000000, 35.000000000000000 },\n-  { 4228469210516757.5, 10.000000000000000, 40.000000000000000 },\n-  { 6.8049404557505165e+17, 10.000000000000000, 45.000000000000000 },\n-  { 1.0715971594776370e+20, 10.000000000000000, 50.000000000000000 },\n-  { 1.6618215752886714e+22, 10.000000000000000, 55.000000000000000 },\n-  { 2.5486246072566784e+24, 10.000000000000000, 60.000000000000000 },\n-  { 3.8764628702155481e+26, 10.000000000000000, 65.000000000000000 },\n-  { 5.8592538145409686e+28, 10.000000000000000, 70.000000000000000 },\n-  { 8.8135370711317444e+30, 10.000000000000000, 75.000000000000000 },\n-  { 1.3207418268325279e+33, 10.000000000000000, 80.000000000000000 },\n-  { 1.9732791360862190e+35, 10.000000000000000, 85.000000000000000 },\n-  { 2.9411893748384672e+37, 10.000000000000000, 90.000000000000000 },\n-  { 4.3754494922439984e+39, 10.000000000000000, 95.000000000000000 },\n-  { 6.4989755247201446e+41, 10.000000000000000, 100.00000000000000 },\n+  { 0.0000000000000000, 10.000000000000000, 0.0000000000000000, 0.0 },\n+  { 0.0045800444191760525, 10.000000000000000, 5.0000000000000000, 0.0 },\n+  { 21.891706163723381, 10.000000000000000, 10.000000000000000, 0.0 },\n+  { 12267.475049806462, 10.000000000000000, 15.000000000000000, 0.0 },\n+  { 3540200.2090195213, 10.000000000000000, 20.000000000000000, 0.0 },\n+  { 771298871.17072666, 10.000000000000000, 25.000000000000000, 0.0 },\n+  { 145831809975.96710, 10.000000000000000, 30.000000000000000, 0.0 },\n+  { 25449470018534.777, 10.000000000000000, 35.000000000000000, 0.0 },\n+  { 4228469210516757.0, 10.000000000000000, 40.000000000000000, 0.0 },\n+  { 6.8049404557505165e+17, 10.000000000000000, 45.000000000000000, 0.0 },\n+  { 1.0715971594776370e+20, 10.000000000000000, 50.000000000000000, 0.0 },\n+  { 1.6618215752886714e+22, 10.000000000000000, 55.000000000000000, 0.0 },\n+  { 2.5486246072566784e+24, 10.000000000000000, 60.000000000000000, 0.0 },\n+  { 3.8764628702155475e+26, 10.000000000000000, 65.000000000000000, 0.0 },\n+  { 5.8592538145409686e+28, 10.000000000000000, 70.000000000000000, 0.0 },\n+  { 8.8135370711317444e+30, 10.000000000000000, 75.000000000000000, 0.0 },\n+  { 1.3207418268325279e+33, 10.000000000000000, 80.000000000000000, 0.0 },\n+  { 1.9732791360862190e+35, 10.000000000000000, 85.000000000000000, 0.0 },\n+  { 2.9411893748384672e+37, 10.000000000000000, 90.000000000000000, 0.0 },\n+  { 4.3754494922439984e+39, 10.000000000000000, 95.000000000000000, 0.0 },\n+  { 6.4989755247201446e+41, 10.000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler017 = 2.5000000000000020e-13;\n+const double toler023 = 1.0000000000000008e-12;\n \n // Test data for nu=20.000000000000000.\n-// max(|f - f_GSL|): 1.9342813113834067e+25\n-// max(|f - f_GSL| / |f_GSL|): 4.7061265485304859e-15\n+// max(|f - f_GSL|): 1.9342813113834067e+25 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 1.5819230756119302e-14\n+// mean(f - f_GSL): 1.0213821732843951e+24\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_cyl_bessel_i<double>\n-data018[21] =\n+data024[21] =\n {\n-  { 0.0000000000000000, 20.000000000000000, 0.0000000000000000 },\n-  { 5.0242393579718066e-11, 20.000000000000000, 5.0000000000000000 },\n-  { 0.00012507997356449481, 20.000000000000000, 10.000000000000000 },\n-  { 1.6470152535015836, 20.000000000000000, 15.000000000000000 },\n-  { 3188.7503288536154, 20.000000000000000, 20.000000000000000 },\n-  { 2449840.5422952301, 20.000000000000000, 25.000000000000000 },\n-  { 1126985104.4483771, 20.000000000000000, 30.000000000000000 },\n-  { 379617876611.88580, 20.000000000000000, 35.000000000000000 },\n-  { 104459633129479.89, 20.000000000000000, 40.000000000000000 },\n-  { 25039579987216524., 20.000000000000000, 45.000000000000000 },\n-  { 5.4420084027529984e+18, 20.000000000000000, 50.000000000000000 },\n-  { 1.1007498584335495e+21, 20.000000000000000, 55.000000000000000 },\n-  { 2.1091734863057236e+23, 20.000000000000000, 60.000000000000000 },\n-  { 3.8763618091286899e+25, 20.000000000000000, 65.000000000000000 },\n-  { 6.8946130527930870e+27, 20.000000000000000, 70.000000000000000 },\n-  { 1.1946319948836447e+30, 20.000000000000000, 75.000000000000000 },\n-  { 2.0265314377577587e+32, 20.000000000000000, 80.000000000000000 },\n-  { 3.3784665214179985e+34, 20.000000000000000, 85.000000000000000 },\n-  { 5.5516089411796646e+36, 20.000000000000000, 90.000000000000000 },\n-  { 9.0129310795305151e+38, 20.000000000000000, 95.000000000000000 },\n-  { 1.4483461256427176e+41, 20.000000000000000, 100.00000000000000 },\n+  { 0.0000000000000000, 20.000000000000000, 0.0000000000000000, 0.0 },\n+  { 5.0242393579718066e-11, 20.000000000000000, 5.0000000000000000, 0.0 },\n+  { 0.00012507997356449481, 20.000000000000000, 10.000000000000000, 0.0 },\n+  { 1.6470152535015836, 20.000000000000000, 15.000000000000000, 0.0 },\n+  { 3188.7503288536154, 20.000000000000000, 20.000000000000000, 0.0 },\n+  { 2449840.5422952301, 20.000000000000000, 25.000000000000000, 0.0 },\n+  { 1126985104.4483771, 20.000000000000000, 30.000000000000000, 0.0 },\n+  { 379617876611.88580, 20.000000000000000, 35.000000000000000, 0.0 },\n+  { 104459633129479.88, 20.000000000000000, 40.000000000000000, 0.0 },\n+  { 25039579987216524., 20.000000000000000, 45.000000000000000, 0.0 },\n+  { 5.4420084027529984e+18, 20.000000000000000, 50.000000000000000, 0.0 },\n+  { 1.1007498584335495e+21, 20.000000000000000, 55.000000000000000, 0.0 },\n+  { 2.1091734863057236e+23, 20.000000000000000, 60.000000000000000, 0.0 },\n+  { 3.8763618091286891e+25, 20.000000000000000, 65.000000000000000, 0.0 },\n+  { 6.8946130527930870e+27, 20.000000000000000, 70.000000000000000, 0.0 },\n+  { 1.1946319948836447e+30, 20.000000000000000, 75.000000000000000, 0.0 },\n+  { 2.0265314377577587e+32, 20.000000000000000, 80.000000000000000, 0.0 },\n+  { 3.3784665214179985e+34, 20.000000000000000, 85.000000000000000, 0.0 },\n+  { 5.5516089411796646e+36, 20.000000000000000, 90.000000000000000, 0.0 },\n+  { 9.0129310795305151e+38, 20.000000000000000, 95.000000000000000, 0.0 },\n+  { 1.4483461256427176e+41, 20.000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler018 = 2.5000000000000020e-13;\n+const double toler024 = 1.0000000000000008e-12;\n \n // Test data for nu=50.000000000000000.\n-// max(|f - f_GSL|): 4.5452777397620335e+22\n+// max(|f - f_GSL|): 4.4862481587261630e+22 at index 20\n // max(|f - f_GSL| / |f_GSL|): 6.0191728870880627e-14\n+// mean(f - f_GSL): 2.1246678955085789e+21\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_cyl_bessel_i<double>\n-data019[21] =\n+data025[21] =\n {\n-  { 0.0000000000000000, 50.000000000000000, 0.0000000000000000 },\n-  { 2.9314696468108517e-45, 50.000000000000000, 5.0000000000000000 },\n-  { 4.7568945607268442e-30, 50.000000000000000, 10.000000000000000 },\n-  { 5.5468372730667069e-21, 50.000000000000000, 15.000000000000000 },\n-  { 2.2551205757604056e-14, 50.000000000000000, 20.000000000000000 },\n-  { 4.5344251866130257e-09, 50.000000000000000, 25.000000000000000 },\n-  { 0.00014590106916468940, 50.000000000000000, 30.000000000000000 },\n-  { 1.3965549457254882, 50.000000000000000, 35.000000000000000 },\n-  { 5726.8656631289896, 50.000000000000000, 40.000000000000000 },\n-  { 12672593.113027781, 50.000000000000000, 45.000000000000000 },\n-  { 17650802430.016712, 50.000000000000000, 50.000000000000000 },\n-  { 17220231607789.926, 50.000000000000000, 55.000000000000000 },\n-  { 12704607933652176., 50.000000000000000, 60.000000000000000 },\n-  { 7.4989491942193725e+18, 50.000000000000000, 65.000000000000000 },\n-  { 3.6944034898904922e+21, 50.000000000000000, 70.000000000000000 },\n-  { 1.5691634774370186e+24, 50.000000000000000, 75.000000000000000 },\n-  { 5.8927749458163587e+26, 50.000000000000000, 80.000000000000000 },\n-  { 1.9958849054749339e+29, 50.000000000000000, 85.000000000000000 },\n-  { 6.1946050361781500e+31, 50.000000000000000, 90.000000000000000 },\n-  { 1.7845429728697119e+34, 50.000000000000000, 95.000000000000000 },\n-  { 4.8219580855940819e+36, 50.000000000000000, 100.00000000000000 },\n+  { 0.0000000000000000, 50.000000000000000, 0.0000000000000000, 0.0 },\n+  { 2.9314696468108517e-45, 50.000000000000000, 5.0000000000000000, 0.0 },\n+  { 4.7568945607268435e-30, 50.000000000000000, 10.000000000000000, 0.0 },\n+  { 5.5468372730667069e-21, 50.000000000000000, 15.000000000000000, 0.0 },\n+  { 2.2551205757604056e-14, 50.000000000000000, 20.000000000000000, 0.0 },\n+  { 4.5344251866130257e-09, 50.000000000000000, 25.000000000000000, 0.0 },\n+  { 0.00014590106916468940, 50.000000000000000, 30.000000000000000, 0.0 },\n+  { 1.3965549457254882, 50.000000000000000, 35.000000000000000, 0.0 },\n+  { 5726.8656631289887, 50.000000000000000, 40.000000000000000, 0.0 },\n+  { 12672593.113027781, 50.000000000000000, 45.000000000000000, 0.0 },\n+  { 17650802430.016712, 50.000000000000000, 50.000000000000000, 0.0 },\n+  { 17220231607789.926, 50.000000000000000, 55.000000000000000, 0.0 },\n+  { 12704607933652176., 50.000000000000000, 60.000000000000000, 0.0 },\n+  { 7.4989491942193715e+18, 50.000000000000000, 65.000000000000000, 0.0 },\n+  { 3.6944034898904922e+21, 50.000000000000000, 70.000000000000000, 0.0 },\n+  { 1.5691634774370186e+24, 50.000000000000000, 75.000000000000000, 0.0 },\n+  { 5.8927749458163587e+26, 50.000000000000000, 80.000000000000000, 0.0 },\n+  { 1.9958849054749339e+29, 50.000000000000000, 85.000000000000000, 0.0 },\n+  { 6.1946050361781500e+31, 50.000000000000000, 90.000000000000000, 0.0 },\n+  { 1.7845429728697119e+34, 50.000000000000000, 95.000000000000000, 0.0 },\n+  { 4.8219580855940819e+36, 50.000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler019 = 5.0000000000000029e-12;\n+const double toler025 = 5.0000000000000029e-12;\n \n // Test data for nu=100.00000000000000.\n-// max(|f - f_GSL|): 186646528.00000000\n+// max(|f - f_GSL|): 185597952.00000000 at index 20\n // max(|f - f_GSL| / |f_GSL|): 2.8278213985558577e-13\n+// mean(f - f_GSL): 8855366.2060860656\n+// variance(f - f_GSL): 4.2527168883984777e+19\n+// stddev(f - f_GSL): 6521285830.5693655\n const testcase_cyl_bessel_i<double>\n-data020[21] =\n+data026[21] =\n {\n-  { 0.0000000000000000, 100.00000000000000, 0.0000000000000000 },\n-  { 7.0935514885313123e-119, 100.00000000000000, 5.0000000000000000 },\n-  { 1.0823442017492018e-88, 100.00000000000000, 10.000000000000000 },\n-  { 5.9887888536468904e-71, 100.00000000000000, 15.000000000000000 },\n-  { 2.8703193216428771e-58, 100.00000000000000, 20.000000000000000 },\n-  { 2.4426896913122370e-48, 100.00000000000000, 25.000000000000000 },\n-  { 3.9476420053334271e-40, 100.00000000000000, 30.000000000000000 },\n-  { 4.2836596180818780e-33, 100.00000000000000, 35.000000000000000 },\n-  { 6.6249380222596129e-27, 100.00000000000000, 40.000000000000000 },\n-  { 2.3702587262788900e-21, 100.00000000000000, 45.000000000000000 },\n-  { 2.7278879470966917e-16, 100.00000000000000, 50.000000000000000 },\n-  { 1.2763258878228082e-11, 100.00000000000000, 55.000000000000000 },\n-  { 2.8832770906491972e-07, 100.00000000000000, 60.000000000000000 },\n-  { 0.0035805902717061227, 100.00000000000000, 65.000000000000000 },\n-  { 27.017219102595387, 100.00000000000000, 70.000000000000000 },\n-  { 134001.44891209516, 100.00000000000000, 75.000000000000000 },\n-  { 465194832.85060996, 100.00000000000000, 80.000000000000000 },\n-  { 1189280653119.4814, 100.00000000000000, 85.000000000000000 },\n-  { 2334119331258728.0, 100.00000000000000, 90.000000000000000 },\n-  { 3.6399223078502436e+18, 100.00000000000000, 95.000000000000000 },\n-  { 4.6415349416162005e+21, 100.00000000000000, 100.00000000000000 },\n+  { 0.0000000000000000, 100.00000000000000, 0.0000000000000000, 0.0 },\n+  { 7.0935514885313123e-119, 100.00000000000000, 5.0000000000000000, 0.0 },\n+  { 1.0823442017492015e-88, 100.00000000000000, 10.000000000000000, 0.0 },\n+  { 5.9887888536468904e-71, 100.00000000000000, 15.000000000000000, 0.0 },\n+  { 2.8703193216428771e-58, 100.00000000000000, 20.000000000000000, 0.0 },\n+  { 2.4426896913122370e-48, 100.00000000000000, 25.000000000000000, 0.0 },\n+  { 3.9476420053334271e-40, 100.00000000000000, 30.000000000000000, 0.0 },\n+  { 4.2836596180818780e-33, 100.00000000000000, 35.000000000000000, 0.0 },\n+  { 6.6249380222596129e-27, 100.00000000000000, 40.000000000000000, 0.0 },\n+  { 2.3702587262788900e-21, 100.00000000000000, 45.000000000000000, 0.0 },\n+  { 2.7278879470966917e-16, 100.00000000000000, 50.000000000000000, 0.0 },\n+  { 1.2763258878228082e-11, 100.00000000000000, 55.000000000000000, 0.0 },\n+  { 2.8832770906491972e-07, 100.00000000000000, 60.000000000000000, 0.0 },\n+  { 0.0035805902717061223, 100.00000000000000, 65.000000000000000, 0.0 },\n+  { 27.017219102595387, 100.00000000000000, 70.000000000000000, 0.0 },\n+  { 134001.44891209516, 100.00000000000000, 75.000000000000000, 0.0 },\n+  { 465194832.85060996, 100.00000000000000, 80.000000000000000, 0.0 },\n+  { 1189280653119.4814, 100.00000000000000, 85.000000000000000, 0.0 },\n+  { 2334119331258728.0, 100.00000000000000, 90.000000000000000, 0.0 },\n+  { 3.6399223078502436e+18, 100.00000000000000, 95.000000000000000, 0.0 },\n+  { 4.6415349416162005e+21, 100.00000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler020 = 2.5000000000000014e-11;\n+const double toler026 = 2.5000000000000014e-11;\n \n-template<typename Tp, unsigned int Num>\n+template<typename Ret, unsigned int Num>\n   void\n-  test(const testcase_cyl_bessel_i<Tp> (&data)[Num], Tp toler)\n+  test(const testcase_cyl_bessel_i<Ret> (&data)[Num], Ret toler)\n   {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n+    bool test __attribute__((unused)) = true;\n+    const Ret eps = std::numeric_limits<Ret>::epsilon();\n+    Ret max_abs_diff = -Ret(1);\n+    Ret max_abs_frac = -Ret(1);\n     unsigned int num_datum = Num;\n     for (unsigned int i = 0; i < num_datum; ++i)\n       {\n-\tconst Tp f = std::cyl_bessel_i(data[i].nu, data[i].x);\n-\tconst Tp f0 = data[i].f0;\n-\tconst Tp diff = f - f0;\n+\tconst Ret f = std::cyl_bessel_i(data[i].nu, data[i].x);\n+\tconst Ret f0 = data[i].f0;\n+\tconst Ret diff = f - f0;\n \tif (std::abs(diff) > max_abs_diff)\n \t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n+\tif (std::abs(f0) > Ret(10) * eps\n+\t && std::abs(f) > Ret(10) * eps)\n \t  {\n-\t    const Tp frac = diff / f0;\n+\t    const Ret frac = diff / f0;\n \t    if (std::abs(frac) > max_abs_frac)\n \t      max_abs_frac = std::abs(frac);\n \t  }\n@@ -668,12 +728,6 @@ template<typename Tp, unsigned int Num>\n int\n main()\n {\n-  test(data001, toler001);\n-  test(data002, toler002);\n-  test(data003, toler003);\n-  test(data004, toler004);\n-  test(data005, toler005);\n-  test(data006, toler006);\n   test(data007, toler007);\n   test(data008, toler008);\n   test(data009, toler009);\n@@ -688,5 +742,11 @@ main()\n   test(data018, toler018);\n   test(data019, toler019);\n   test(data020, toler020);\n+  test(data021, toler021);\n+  test(data022, toler022);\n+  test(data023, toler023);\n+  test(data024, toler024);\n+  test(data025, toler025);\n+  test(data026, toler026);\n   return 0;\n }"}, {"sha": "7070149579ed4cfcb564aa382213e92a3cc26eba", "filename": "libstdc++-v3/testsuite/special_functions/08_cyl_bessel_j/check_value.cc", "status": "modified", "additions": 575, "deletions": 515, "changes": 1090, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F08_cyl_bessel_j%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F08_cyl_bessel_j%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F08_cyl_bessel_j%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -37,627 +37,687 @@\n #endif\n #include <specfun_testcase.h>\n \n-\n // Test data for nu=0.0000000000000000.\n-// max(|f - f_GSL|): 1.6653345369377348e-16\n-// max(|f - f_GSL| / |f_GSL|): 6.5276306654894409e-16\n+// max(|f - f_GSL|): 1.0547118733938987e-14 at index 1\n+// max(|f - f_GSL| / |f_GSL|): 1.0733293243042314e-14\n+// mean(f - f_GSL): -2.4682636886755713e-15\n+// variance(f - f_GSL): 3.4179114172015086e-31\n+// stddev(f - f_GSL): 5.8462906335568952e-16\n const testcase_cyl_bessel_j<double>\n-data001[21] =\n+data007[21] =\n {\n-  { 1.0000000000000000, 0.0000000000000000, 0.0000000000000000 },\n-  { 0.98443592929585266, 0.0000000000000000, 0.25000000000000000 },\n-  { 0.93846980724081297, 0.0000000000000000, 0.50000000000000000 },\n-  { 0.86424227516664853, 0.0000000000000000, 0.75000000000000000 },\n-  { 0.76519768655796661, 0.0000000000000000, 1.0000000000000000 },\n-  { 0.64590608527128535, 0.0000000000000000, 1.2500000000000000 },\n-  { 0.51182767173591814, 0.0000000000000000, 1.5000000000000000 },\n-  { 0.36903253018515075, 0.0000000000000000, 1.7500000000000000 },\n-  { 0.22389077914123562, 0.0000000000000000, 2.0000000000000000 },\n-  { 0.082749851288734022, 0.0000000000000000, 2.2500000000000000 },\n-  { -0.048383776468197998, 0.0000000000000000, 2.5000000000000000 },\n-  { -0.16414142780851368, 0.0000000000000000, 2.7500000000000000 },\n-  { -0.26005195490193334, 0.0000000000000000, 3.0000000000000000 },\n-  { -0.33275080217061132, 0.0000000000000000, 3.2500000000000000 },\n-  { -0.38012773998726335, 0.0000000000000000, 3.5000000000000000 },\n-  { -0.40140605493617426, 0.0000000000000000, 3.7500000000000000 },\n-  { -0.39714980986384740, 0.0000000000000000, 4.0000000000000000 },\n-  { -0.36919977029989554, 0.0000000000000000, 4.2500000000000000 },\n-  { -0.32054250898512149, 0.0000000000000000, 4.5000000000000000 },\n-  { -0.25512082749137405, 0.0000000000000000, 4.7500000000000000 },\n-  { -0.17759677131433835, 0.0000000000000000, 5.0000000000000000 },\n+  { 1.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 0.98443592929585266, 0.0000000000000000, 0.25000000000000000, 0.0 },\n+  { 0.93846980724081297, 0.0000000000000000, 0.50000000000000000, 0.0 },\n+  { 0.86424227516664853, 0.0000000000000000, 0.75000000000000000, 0.0 },\n+  { 0.76519768655796661, 0.0000000000000000, 1.0000000000000000, 0.0 },\n+  { 0.64590608527128535, 0.0000000000000000, 1.2500000000000000, 0.0 },\n+  { 0.51182767173591814, 0.0000000000000000, 1.5000000000000000, 0.0 },\n+  { 0.36903253018515075, 0.0000000000000000, 1.7500000000000000, 0.0 },\n+  { 0.22389077914123562, 0.0000000000000000, 2.0000000000000000, 0.0 },\n+  { 0.082749851288734022, 0.0000000000000000, 2.2500000000000000, 0.0 },\n+  { -0.048383776468197998, 0.0000000000000000, 2.5000000000000000, 0.0 },\n+  { -0.16414142780851368, 0.0000000000000000, 2.7500000000000000, 0.0 },\n+  { -0.26005195490193334, 0.0000000000000000, 3.0000000000000000, 0.0 },\n+  { -0.33275080217061132, 0.0000000000000000, 3.2500000000000000, 0.0 },\n+  { -0.38012773998726335, 0.0000000000000000, 3.5000000000000000, 0.0 },\n+  { -0.40140605493617426, 0.0000000000000000, 3.7500000000000000, 0.0 },\n+  { -0.39714980986384740, 0.0000000000000000, 4.0000000000000000, 0.0 },\n+  { -0.36919977029989554, 0.0000000000000000, 4.2500000000000000, 0.0 },\n+  { -0.32054250898512149, 0.0000000000000000, 4.5000000000000000, 0.0 },\n+  { -0.25512082749137405, 0.0000000000000000, 4.7500000000000000, 0.0 },\n+  { -0.17759677131433835, 0.0000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler001 = 2.5000000000000020e-13;\n+const double toler007 = 1.0000000000000008e-12;\n \n // Test data for nu=0.33333333333333331.\n-// max(|f - f_GSL|): 7.7715611723760958e-16\n-// max(|f - f_GSL| / |f_GSL|): 1.2121143083098064e-15\n+// max(|f - f_GSL|): 4.4408920985006262e-16 at index 4\n+// max(|f - f_GSL| / |f_GSL|): 8.0807620553987087e-16\n+// mean(f - f_GSL): 1.2423924323186276e-16\n+// variance(f - f_GSL): 4.4388099670639150e-33\n+// stddev(f - f_GSL): 6.6624394684409066e-17\n const testcase_cyl_bessel_j<double>\n-data002[21] =\n+data008[21] =\n {\n-  { 0.0000000000000000, 0.33333333333333331, 0.0000000000000000 },\n-  { 0.55338359549647709, 0.33333333333333331, 0.25000000000000000 },\n-  { 0.67283082949794537, 0.33333333333333331, 0.50000000000000000 },\n-  { 0.72490863199379008, 0.33333333333333331, 0.75000000000000000 },\n-  { 0.73087640216944760, 0.33333333333333331, 1.0000000000000000 },\n-  { 0.69953374433894455, 0.33333333333333331, 1.2500000000000000 },\n-  { 0.63713263706489176, 0.33333333333333331, 1.5000000000000000 },\n-  { 0.54956352730788460, 0.33333333333333331, 1.7500000000000000 },\n-  { 0.44293981814857586, 0.33333333333333331, 2.0000000000000000 },\n-  { 0.32366988946292502, 0.33333333333333331, 2.2500000000000000 },\n-  { 0.19832093341860796, 0.33333333333333331, 2.5000000000000000 },\n-  { 0.073389637874297489, 0.33333333333333331, 2.7500000000000000 },\n-  { -0.044963820940233351, 0.33333333333333331, 3.0000000000000000 },\n-  { -0.15118395956666372, 0.33333333333333331, 3.2500000000000000 },\n-  { -0.24056593952693625, 0.33333333333333331, 3.5000000000000000 },\n-  { -0.30946094681921288, 0.33333333333333331, 3.7500000000000000 },\n-  { -0.35542737345457609, 0.33333333333333331, 4.0000000000000000 },\n-  { -0.37731852825457068, 0.33333333333333331, 4.2500000000000000 },\n-  { -0.37530189159358079, 0.33333333333333331, 4.5000000000000000 },\n-  { -0.35080916720916927, 0.33333333333333331, 4.7500000000000000 },\n-  { -0.30642046380026405, 0.33333333333333331, 5.0000000000000000 },\n+  { 0.0000000000000000, 0.33333333333333331, 0.0000000000000000, 0.0 },\n+  { 0.55338359549647709, 0.33333333333333331, 0.25000000000000000, 0.0 },\n+  { 0.67283082949794537, 0.33333333333333331, 0.50000000000000000, 0.0 },\n+  { 0.72490863199379019, 0.33333333333333331, 0.75000000000000000, 0.0 },\n+  { 0.73087640216944749, 0.33333333333333331, 1.0000000000000000, 0.0 },\n+  { 0.69953374433894455, 0.33333333333333331, 1.2500000000000000, 0.0 },\n+  { 0.63713263706489176, 0.33333333333333331, 1.5000000000000000, 0.0 },\n+  { 0.54956352730788460, 0.33333333333333331, 1.7500000000000000, 0.0 },\n+  { 0.44293981814857586, 0.33333333333333331, 2.0000000000000000, 0.0 },\n+  { 0.32366988946292502, 0.33333333333333331, 2.2500000000000000, 0.0 },\n+  { 0.19832093341860796, 0.33333333333333331, 2.5000000000000000, 0.0 },\n+  { 0.073389637874297461, 0.33333333333333331, 2.7500000000000000, 0.0 },\n+  { -0.044963820940233351, 0.33333333333333331, 3.0000000000000000, 0.0 },\n+  { -0.15118395956666372, 0.33333333333333331, 3.2500000000000000, 0.0 },\n+  { -0.24056593952693622, 0.33333333333333331, 3.5000000000000000, 0.0 },\n+  { -0.30946094681921288, 0.33333333333333331, 3.7500000000000000, 0.0 },\n+  { -0.35542737345457609, 0.33333333333333331, 4.0000000000000000, 0.0 },\n+  { -0.37731852825457068, 0.33333333333333331, 4.2500000000000000, 0.0 },\n+  { -0.37530189159358079, 0.33333333333333331, 4.5000000000000000, 0.0 },\n+  { -0.35080916720916927, 0.33333333333333331, 4.7500000000000000, 0.0 },\n+  { -0.30642046380026405, 0.33333333333333331, 5.0000000000000000, 0.0 },\n };\n-const double toler002 = 2.5000000000000020e-13;\n+const double toler008 = 2.5000000000000020e-13;\n \n // Test data for nu=0.50000000000000000.\n-// max(|f - f_GSL|): 7.7715611723760958e-16\n-// max(|f - f_GSL| / |f_GSL|): 1.1959227189513475e-15\n+// max(|f - f_GSL|): 5.5511151231257827e-16 at index 6\n+// max(|f - f_GSL| / |f_GSL|): 8.6943152885834554e-16\n+// mean(f - f_GSL): 1.6058583034756728e-16\n+// variance(f - f_GSL): 1.3538599676919272e-33\n+// stddev(f - f_GSL): 3.6794836155253190e-17\n const testcase_cyl_bessel_j<double>\n-data003[21] =\n+data009[21] =\n {\n-  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000 },\n-  { 0.39479959874136972, 0.50000000000000000, 0.25000000000000000 },\n-  { 0.54097378993452760, 0.50000000000000000, 0.50000000000000000 },\n-  { 0.62800587637588623, 0.50000000000000000, 0.75000000000000000 },\n-  { 0.67139670714180244, 0.50000000000000000, 1.0000000000000000 },\n-  { 0.67724253810014312, 0.50000000000000000, 1.2500000000000000 },\n-  { 0.64983807475374655, 0.50000000000000000, 1.5000000000000000 },\n-  { 0.59348525447147382, 0.50000000000000000, 1.7500000000000000 },\n-  { 0.51301613656182721, 0.50000000000000000, 2.0000000000000000 },\n-  { 0.41387506064759982, 0.50000000000000000, 2.2500000000000000 },\n-  { 0.30200490606236535, 0.50000000000000000, 2.5000000000000000 },\n-  { 0.18363332138431521, 0.50000000000000000, 2.7500000000000000 },\n-  { 0.065008182877375753, 0.50000000000000000, 3.0000000000000000 },\n-  { -0.047885729975898544, 0.50000000000000000, 3.2500000000000000 },\n-  { -0.14960456964952620, 0.50000000000000000, 3.5000000000000000 },\n-  { -0.23549801845815513, 0.50000000000000000, 3.7500000000000000 },\n-  { -0.30192051329163944, 0.50000000000000000, 4.0000000000000000 },\n-  { -0.34638850218952444, 0.50000000000000000, 4.2500000000000000 },\n-  { -0.36767487332724025, 0.50000000000000000, 4.5000000000000000 },\n-  { -0.36583563802350400, 0.50000000000000000, 4.7500000000000000 },\n-  { -0.34216798479816180, 0.50000000000000000, 5.0000000000000000 },\n+  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000, 0.0 },\n+  { 0.39479959874136972, 0.50000000000000000, 0.25000000000000000, 0.0 },\n+  { 0.54097378993452760, 0.50000000000000000, 0.50000000000000000, 0.0 },\n+  { 0.62800587637588623, 0.50000000000000000, 0.75000000000000000, 0.0 },\n+  { 0.67139670714180244, 0.50000000000000000, 1.0000000000000000, 0.0 },\n+  { 0.67724253810014312, 0.50000000000000000, 1.2500000000000000, 0.0 },\n+  { 0.64983807475374655, 0.50000000000000000, 1.5000000000000000, 0.0 },\n+  { 0.59348525447147382, 0.50000000000000000, 1.7500000000000000, 0.0 },\n+  { 0.51301613656182721, 0.50000000000000000, 2.0000000000000000, 0.0 },\n+  { 0.41387506064759988, 0.50000000000000000, 2.2500000000000000, 0.0 },\n+  { 0.30200490606236535, 0.50000000000000000, 2.5000000000000000, 0.0 },\n+  { 0.18363332138431521, 0.50000000000000000, 2.7500000000000000, 0.0 },\n+  { 0.065008182877375753, 0.50000000000000000, 3.0000000000000000, 0.0 },\n+  { -0.047885729975898537, 0.50000000000000000, 3.2500000000000000, 0.0 },\n+  { -0.14960456964952618, 0.50000000000000000, 3.5000000000000000, 0.0 },\n+  { -0.23549801845815518, 0.50000000000000000, 3.7500000000000000, 0.0 },\n+  { -0.30192051329163944, 0.50000000000000000, 4.0000000000000000, 0.0 },\n+  { -0.34638850218952444, 0.50000000000000000, 4.2500000000000000, 0.0 },\n+  { -0.36767487332724025, 0.50000000000000000, 4.5000000000000000, 0.0 },\n+  { -0.36583563802350400, 0.50000000000000000, 4.7500000000000000, 0.0 },\n+  { -0.34216798479816180, 0.50000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler003 = 2.5000000000000020e-13;\n+const double toler009 = 2.5000000000000020e-13;\n \n // Test data for nu=0.66666666666666663.\n-// max(|f - f_GSL|): 7.7715611723760958e-16\n-// max(|f - f_GSL| / |f_GSL|): 1.4163878424300161e-15\n+// max(|f - f_GSL|): 1.2212453270876722e-15 at index 4\n+// max(|f - f_GSL| / |f_GSL|): 2.1504146437492276e-15\n+// mean(f - f_GSL): -4.8208791456193557e-16\n+// variance(f - f_GSL): 1.8468435800786558e-32\n+// stddev(f - f_GSL): 1.3589862324831168e-16\n const testcase_cyl_bessel_j<double>\n-data004[21] =\n+data010[21] =\n {\n-  { 0.0000000000000000, 0.66666666666666663, 0.0000000000000000 },\n-  { 0.27434438998865135, 0.66666666666666663, 0.25000000000000000 },\n-  { 0.42331075068448321, 0.66666666666666663, 0.50000000000000000 },\n-  { 0.52870551548162792, 0.66666666666666663, 0.75000000000000000 },\n-  { 0.59794997367362801, 0.66666666666666663, 1.0000000000000000 },\n-  { 0.63338726889075891, 0.66666666666666663, 1.2500000000000000 },\n-  { 0.63673234502877385, 0.66666666666666663, 1.5000000000000000 },\n-  { 0.61022230460131899, 0.66666666666666663, 1.7500000000000000 },\n-  { 0.55696967691913712, 0.66666666666666663, 2.0000000000000000 },\n-  { 0.48101276749106114, 0.66666666666666663, 2.2500000000000000 },\n-  { 0.38721242477084306, 0.66666666666666663, 2.5000000000000000 },\n-  { 0.28105724771080542, 0.66666666666666663, 2.7500000000000000 },\n-  { 0.16841218049067044, 0.66666666666666663, 3.0000000000000000 },\n-  { 0.055235893475364915, 0.66666666666666663, 3.2500000000000000 },\n-  { -0.052711584404031925, 0.66666666666666663, 3.5000000000000000 },\n-  { -0.15015178042293029, 0.66666666666666663, 3.7500000000000000 },\n-  { -0.23254408502670390, 0.66666666666666663, 4.0000000000000000 },\n-  { -0.29630067002972543, 0.66666666666666663, 4.2500000000000000 },\n-  { -0.33894810189777724, 0.66666666666666663, 4.5000000000000000 },\n-  { -0.35922706960321099, 0.66666666666666663, 4.7500000000000000 },\n-  { -0.35712533549168868, 0.66666666666666663, 5.0000000000000000 },\n+  { 0.0000000000000000, 0.66666666666666663, 0.0000000000000000, 0.0 },\n+  { 0.27434438998865140, 0.66666666666666663, 0.25000000000000000, 0.0 },\n+  { 0.42331075068448332, 0.66666666666666663, 0.50000000000000000, 0.0 },\n+  { 0.52870551548162803, 0.66666666666666663, 0.75000000000000000, 0.0 },\n+  { 0.59794997367362812, 0.66666666666666663, 1.0000000000000000, 0.0 },\n+  { 0.63338726889075903, 0.66666666666666663, 1.2500000000000000, 0.0 },\n+  { 0.63673234502877407, 0.66666666666666663, 1.5000000000000000, 0.0 },\n+  { 0.61022230460131910, 0.66666666666666663, 1.7500000000000000, 0.0 },\n+  { 0.55696967691913724, 0.66666666666666663, 2.0000000000000000, 0.0 },\n+  { 0.48101276749106131, 0.66666666666666663, 2.2500000000000000, 0.0 },\n+  { 0.38721242477084322, 0.66666666666666663, 2.5000000000000000, 0.0 },\n+  { 0.28105724771080548, 0.66666666666666663, 2.7500000000000000, 0.0 },\n+  { 0.16841218049067047, 0.66666666666666663, 3.0000000000000000, 0.0 },\n+  { 0.055235893475364936, 0.66666666666666663, 3.2500000000000000, 0.0 },\n+  { -0.052711584404031932, 0.66666666666666663, 3.5000000000000000, 0.0 },\n+  { -0.15015178042293031, 0.66666666666666663, 3.7500000000000000, 0.0 },\n+  { -0.23254408502670393, 0.66666666666666663, 4.0000000000000000, 0.0 },\n+  { -0.29630067002972543, 0.66666666666666663, 4.2500000000000000, 0.0 },\n+  { -0.33894810189777724, 0.66666666666666663, 4.5000000000000000, 0.0 },\n+  { -0.35922706960321099, 0.66666666666666663, 4.7500000000000000, 0.0 },\n+  { -0.35712533549168868, 0.66666666666666663, 5.0000000000000000, 0.0 },\n };\n-const double toler004 = 2.5000000000000020e-13;\n+const double toler010 = 2.5000000000000020e-13;\n \n // Test data for nu=1.0000000000000000.\n-// max(|f - f_GSL|): 2.2204460492503131e-16\n-// max(|f - f_GSL| / |f_GSL|): 6.7783500059747526e-16\n+// max(|f - f_GSL|): 6.1062266354383610e-15 at index 7\n+// max(|f - f_GSL| / |f_GSL|): 1.0805601471765146e-14\n+// mean(f - f_GSL): -2.7170725986585303e-15\n+// variance(f - f_GSL): 4.1990134041171014e-31\n+// stddev(f - f_GSL): 6.4799794784529226e-16\n const testcase_cyl_bessel_j<double>\n-data005[21] =\n+data011[21] =\n {\n-  { 0.0000000000000000, 1.0000000000000000, 0.0000000000000000 },\n-  { 0.12402597732272694, 1.0000000000000000, 0.25000000000000000 },\n-  { 0.24226845767487390, 1.0000000000000000, 0.50000000000000000 },\n-  { 0.34924360217486222, 1.0000000000000000, 0.75000000000000000 },\n-  { 0.44005058574493355, 1.0000000000000000, 1.0000000000000000 },\n-  { 0.51062326031988059, 1.0000000000000000, 1.2500000000000000 },\n-  { 0.55793650791009952, 1.0000000000000000, 1.5000000000000000 },\n-  { 0.58015619763899240, 1.0000000000000000, 1.7500000000000000 },\n-  { 0.57672480775687363, 1.0000000000000000, 2.0000000000000000 },\n-  { 0.54837835664696011, 1.0000000000000000, 2.2500000000000000 },\n-  { 0.49709410246427416, 1.0000000000000000, 2.5000000000000000 },\n-  { 0.42597230295790256, 1.0000000000000000, 2.7500000000000000 },\n-  { 0.33905895852593648, 1.0000000000000000, 3.0000000000000000 },\n-  { 0.24111968801520400, 1.0000000000000000, 3.2500000000000000 },\n-  { 0.13737752736232706, 1.0000000000000000, 3.5000000000000000 },\n-  { 0.033229349129679724, 1.0000000000000000, 3.7500000000000000 },\n-  { -0.066043328023549230, 1.0000000000000000, 4.0000000000000000 },\n-  { -0.15555319297834286, 1.0000000000000000, 4.2500000000000000 },\n-  { -0.23106043192337070, 1.0000000000000000, 4.5000000000000000 },\n-  { -0.28918679864711044, 1.0000000000000000, 4.7500000000000000 },\n-  { -0.32757913759146529, 1.0000000000000000, 5.0000000000000000 },\n+  { 0.0000000000000000, 1.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 0.12402597732272694, 1.0000000000000000, 0.25000000000000000, 0.0 },\n+  { 0.24226845767487390, 1.0000000000000000, 0.50000000000000000, 0.0 },\n+  { 0.34924360217486222, 1.0000000000000000, 0.75000000000000000, 0.0 },\n+  { 0.44005058574493355, 1.0000000000000000, 1.0000000000000000, 0.0 },\n+  { 0.51062326031988059, 1.0000000000000000, 1.2500000000000000, 0.0 },\n+  { 0.55793650791009952, 1.0000000000000000, 1.5000000000000000, 0.0 },\n+  { 0.58015619763899240, 1.0000000000000000, 1.7500000000000000, 0.0 },\n+  { 0.57672480775687363, 1.0000000000000000, 2.0000000000000000, 0.0 },\n+  { 0.54837835664696011, 1.0000000000000000, 2.2500000000000000, 0.0 },\n+  { 0.49709410246427416, 1.0000000000000000, 2.5000000000000000, 0.0 },\n+  { 0.42597230295790256, 1.0000000000000000, 2.7500000000000000, 0.0 },\n+  { 0.33905895852593648, 1.0000000000000000, 3.0000000000000000, 0.0 },\n+  { 0.24111968801520400, 1.0000000000000000, 3.2500000000000000, 0.0 },\n+  { 0.13737752736232706, 1.0000000000000000, 3.5000000000000000, 0.0 },\n+  { 0.033229349129679724, 1.0000000000000000, 3.7500000000000000, 0.0 },\n+  { -0.066043328023549230, 1.0000000000000000, 4.0000000000000000, 0.0 },\n+  { -0.15555319297834286, 1.0000000000000000, 4.2500000000000000, 0.0 },\n+  { -0.23106043192337070, 1.0000000000000000, 4.5000000000000000, 0.0 },\n+  { -0.28918679864711044, 1.0000000000000000, 4.7500000000000000, 0.0 },\n+  { -0.32757913759146529, 1.0000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler005 = 2.5000000000000020e-13;\n+const double toler011 = 1.0000000000000008e-12;\n \n // Test data for nu=2.0000000000000000.\n-// max(|f - f_GSL|): 5.5511151231257827e-17\n-// max(|f - f_GSL| / |f_GSL|): 2.4155555971238584e-16\n+// max(|f - f_GSL|): 5.1625370645069779e-15 at index 12\n+// max(|f - f_GSL| / |f_GSL|): 1.0822675144009871e-14\n+// mean(f - f_GSL): -2.7863789318177942e-15\n+// variance(f - f_GSL): 2.7454120215792639e-31\n+// stddev(f - f_GSL): 5.2396679490014096e-16\n const testcase_cyl_bessel_j<double>\n-data006[21] =\n+data012[21] =\n {\n-  { 0.0000000000000000, 2.0000000000000000, 0.0000000000000000 },\n-  { 0.0077718892859626760, 2.0000000000000000, 0.25000000000000000 },\n-  { 0.030604023458682638, 2.0000000000000000, 0.50000000000000000 },\n-  { 0.067073997299650551, 2.0000000000000000, 0.75000000000000000 },\n-  { 0.11490348493190047, 2.0000000000000000, 1.0000000000000000 },\n-  { 0.17109113124052350, 2.0000000000000000, 1.2500000000000000 },\n-  { 0.23208767214421472, 2.0000000000000000, 1.5000000000000000 },\n-  { 0.29400312425941216, 2.0000000000000000, 1.7500000000000000 },\n-  { 0.35283402861563773, 2.0000000000000000, 2.0000000000000000 },\n-  { 0.40469757684189717, 2.0000000000000000, 2.2500000000000000 },\n-  { 0.44605905843961718, 2.0000000000000000, 2.5000000000000000 },\n-  { 0.47393946632335160, 2.0000000000000000, 2.7500000000000000 },\n-  { 0.48609126058589119, 2.0000000000000000, 3.0000000000000000 },\n-  { 0.48113214864150627, 2.0000000000000000, 3.2500000000000000 },\n-  { 0.45862918419430765, 2.0000000000000000, 3.5000000000000000 },\n-  { 0.41912837447200352, 2.0000000000000000, 3.7500000000000000 },\n-  { 0.36412814585207293, 2.0000000000000000, 4.0000000000000000 },\n-  { 0.29599826772185189, 2.0000000000000000, 4.2500000000000000 },\n-  { 0.21784898368584549, 2.0000000000000000, 4.5000000000000000 },\n-  { 0.13335796490311685, 2.0000000000000000, 4.7500000000000000 },\n-  { 0.046565116277751971, 2.0000000000000000, 5.0000000000000000 },\n+  { 0.0000000000000000, 2.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 0.0077718892859626760, 2.0000000000000000, 0.25000000000000000, 0.0 },\n+  { 0.030604023458682638, 2.0000000000000000, 0.50000000000000000, 0.0 },\n+  { 0.067073997299650551, 2.0000000000000000, 0.75000000000000000, 0.0 },\n+  { 0.11490348493190047, 2.0000000000000000, 1.0000000000000000, 0.0 },\n+  { 0.17109113124052350, 2.0000000000000000, 1.2500000000000000, 0.0 },\n+  { 0.23208767214421472, 2.0000000000000000, 1.5000000000000000, 0.0 },\n+  { 0.29400312425941216, 2.0000000000000000, 1.7500000000000000, 0.0 },\n+  { 0.35283402861563773, 2.0000000000000000, 2.0000000000000000, 0.0 },\n+  { 0.40469757684189717, 2.0000000000000000, 2.2500000000000000, 0.0 },\n+  { 0.44605905843961718, 2.0000000000000000, 2.5000000000000000, 0.0 },\n+  { 0.47393946632335160, 2.0000000000000000, 2.7500000000000000, 0.0 },\n+  { 0.48609126058589119, 2.0000000000000000, 3.0000000000000000, 0.0 },\n+  { 0.48113214864150627, 2.0000000000000000, 3.2500000000000000, 0.0 },\n+  { 0.45862918419430765, 2.0000000000000000, 3.5000000000000000, 0.0 },\n+  { 0.41912837447200352, 2.0000000000000000, 3.7500000000000000, 0.0 },\n+  { 0.36412814585207293, 2.0000000000000000, 4.0000000000000000, 0.0 },\n+  { 0.29599826772185189, 2.0000000000000000, 4.2500000000000000, 0.0 },\n+  { 0.21784898368584549, 2.0000000000000000, 4.5000000000000000, 0.0 },\n+  { 0.13335796490311685, 2.0000000000000000, 4.7500000000000000, 0.0 },\n+  { 0.046565116277751971, 2.0000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler006 = 2.5000000000000020e-13;\n+const double toler012 = 1.0000000000000008e-12;\n \n // Test data for nu=5.0000000000000000.\n-// max(|f - f_GSL|): 1.3877787807814457e-16\n-// max(|f - f_GSL| / |f_GSL|): 1.4609680807504906e-15\n+// max(|f - f_GSL|): 2.6645352591003757e-15 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 1.1360392768632928e-14\n+// mean(f - f_GSL): -6.6594499701393519e-16\n+// variance(f - f_GSL): 2.0970405937460423e-31\n+// stddev(f - f_GSL): 4.5793455796063728e-16\n const testcase_cyl_bessel_j<double>\n-data007[21] =\n+data013[21] =\n {\n-  { 0.0000000000000000, 5.0000000000000000, 0.0000000000000000 },\n-  { 2.5365161587472413e-07, 5.0000000000000000, 0.25000000000000000 },\n-  { 8.0536272413574753e-06, 5.0000000000000000, 0.50000000000000000 },\n-  { 6.0364166510576438e-05, 5.0000000000000000, 0.75000000000000000 },\n-  { 0.00024975773021123450, 5.0000000000000000, 1.0000000000000000 },\n-  { 0.00074440885254749821, 5.0000000000000000, 1.2500000000000000 },\n-  { 0.0017994217673606111, 5.0000000000000000, 1.5000000000000000 },\n-  { 0.0037577257273157133, 5.0000000000000000, 1.7500000000000000 },\n-  { 0.0070396297558716842, 5.0000000000000000, 2.0000000000000000 },\n-  { 0.012121078633445751, 5.0000000000000000, 2.2500000000000000 },\n-  { 0.019501625134503223, 5.0000000000000000, 2.5000000000000000 },\n-  { 0.029664058320006174, 5.0000000000000000, 2.7500000000000000 },\n-  { 0.043028434877047578, 5.0000000000000000, 3.0000000000000000 },\n-  { 0.059903888098560426, 5.0000000000000000, 3.2500000000000000 },\n-  { 0.080441986647991792, 5.0000000000000000, 3.5000000000000000 },\n-  { 0.10459554742314070, 5.0000000000000000, 3.7500000000000000 },\n-  { 0.13208665604709827, 5.0000000000000000, 4.0000000000000000 },\n-  { 0.16238721643623680, 5.0000000000000000, 4.2500000000000000 },\n-  { 0.19471465863871368, 5.0000000000000000, 4.5000000000000000 },\n-  { 0.22804452118769436, 5.0000000000000000, 4.7500000000000000 },\n-  { 0.26114054612017007, 5.0000000000000000, 5.0000000000000000 },\n+  { 0.0000000000000000, 5.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 2.5365161587472413e-07, 5.0000000000000000, 0.25000000000000000, 0.0 },\n+  { 8.0536272413574753e-06, 5.0000000000000000, 0.50000000000000000, 0.0 },\n+  { 6.0364166510576438e-05, 5.0000000000000000, 0.75000000000000000, 0.0 },\n+  { 0.00024975773021123450, 5.0000000000000000, 1.0000000000000000, 0.0 },\n+  { 0.00074440885254749821, 5.0000000000000000, 1.2500000000000000, 0.0 },\n+  { 0.0017994217673606111, 5.0000000000000000, 1.5000000000000000, 0.0 },\n+  { 0.0037577257273157133, 5.0000000000000000, 1.7500000000000000, 0.0 },\n+  { 0.0070396297558716842, 5.0000000000000000, 2.0000000000000000, 0.0 },\n+  { 0.012121078633445751, 5.0000000000000000, 2.2500000000000000, 0.0 },\n+  { 0.019501625134503223, 5.0000000000000000, 2.5000000000000000, 0.0 },\n+  { 0.029664058320006174, 5.0000000000000000, 2.7500000000000000, 0.0 },\n+  { 0.043028434877047578, 5.0000000000000000, 3.0000000000000000, 0.0 },\n+  { 0.059903888098560426, 5.0000000000000000, 3.2500000000000000, 0.0 },\n+  { 0.080441986647991792, 5.0000000000000000, 3.5000000000000000, 0.0 },\n+  { 0.10459554742314070, 5.0000000000000000, 3.7500000000000000, 0.0 },\n+  { 0.13208665604709827, 5.0000000000000000, 4.0000000000000000, 0.0 },\n+  { 0.16238721643623680, 5.0000000000000000, 4.2500000000000000, 0.0 },\n+  { 0.19471465863871368, 5.0000000000000000, 4.5000000000000000, 0.0 },\n+  { 0.22804452118769436, 5.0000000000000000, 4.7500000000000000, 0.0 },\n+  { 0.26114054612017007, 5.0000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler007 = 2.5000000000000020e-13;\n+const double toler013 = 1.0000000000000008e-12;\n \n // Test data for nu=10.000000000000000.\n-// max(|f - f_GSL|): 3.2526065174565133e-18\n-// max(|f - f_GSL| / |f_GSL|): 3.9336732209858561e-15\n+// max(|f - f_GSL|): 1.6263032587282567e-17 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 1.2824480053608853e-14\n+// mean(f - f_GSL): -1.9939226062419386e-18\n+// variance(f - f_GSL): 1.0689393731679246e-35\n+// stddev(f - f_GSL): 3.2694638293884283e-18\n const testcase_cyl_bessel_j<double>\n-data008[21] =\n+data014[21] =\n {\n-  { 0.0000000000000000, 10.000000000000000, 0.0000000000000000 },\n-  { 2.5628321598050096e-16, 10.000000000000000, 0.25000000000000000 },\n-  { 2.6131773608228023e-13, 10.000000000000000, 0.50000000000000000 },\n-  { 1.4962171311759677e-11, 10.000000000000000, 0.75000000000000000 },\n-  { 2.6306151236874524e-10, 10.000000000000000, 1.0000000000000000 },\n-  { 2.4187548221114514e-09, 10.000000000000000, 1.2500000000000000 },\n-  { 1.4743269078039996e-08, 10.000000000000000, 1.5000000000000000 },\n-  { 6.7608502849897560e-08, 10.000000000000000, 1.7500000000000000 },\n-  { 2.5153862827167358e-07, 10.000000000000000, 2.0000000000000000 },\n-  { 7.9717051583730038e-07, 10.000000000000000, 2.2500000000000000 },\n-  { 2.2247284173983839e-06, 10.000000000000000, 2.5000000000000000 },\n-  { 5.5985475639210430e-06, 10.000000000000000, 2.7500000000000000 },\n-  { 1.2928351645715880e-05, 10.000000000000000, 3.0000000000000000 },\n-  { 2.7761691354244538e-05, 10.000000000000000, 3.2500000000000000 },\n-  { 5.6009495875078844e-05, 10.000000000000000, 3.5000000000000000 },\n-  { 0.00010703761729231951, 10.000000000000000, 3.7500000000000000 },\n-  { 0.00019504055466003446, 10.000000000000000, 4.0000000000000000 },\n-  { 0.00034068888474064193, 10.000000000000000, 4.2500000000000000 },\n-  { 0.00057300977667164505, 10.000000000000000, 4.5000000000000000 },\n-  { 0.00093142172588886810, 10.000000000000000, 4.7500000000000000 },\n-  { 0.0014678026473104744, 10.000000000000000, 5.0000000000000000 },\n+  { 0.0000000000000000, 10.000000000000000, 0.0000000000000000, 0.0 },\n+  { 2.5628321598050096e-16, 10.000000000000000, 0.25000000000000000, 0.0 },\n+  { 2.6131773608228023e-13, 10.000000000000000, 0.50000000000000000, 0.0 },\n+  { 1.4962171311759677e-11, 10.000000000000000, 0.75000000000000000, 0.0 },\n+  { 2.6306151236874524e-10, 10.000000000000000, 1.0000000000000000, 0.0 },\n+  { 2.4187548221114514e-09, 10.000000000000000, 1.2500000000000000, 0.0 },\n+  { 1.4743269078039996e-08, 10.000000000000000, 1.5000000000000000, 0.0 },\n+  { 6.7608502849897560e-08, 10.000000000000000, 1.7500000000000000, 0.0 },\n+  { 2.5153862827167358e-07, 10.000000000000000, 2.0000000000000000, 0.0 },\n+  { 7.9717051583730038e-07, 10.000000000000000, 2.2500000000000000, 0.0 },\n+  { 2.2247284173983839e-06, 10.000000000000000, 2.5000000000000000, 0.0 },\n+  { 5.5985475639210430e-06, 10.000000000000000, 2.7500000000000000, 0.0 },\n+  { 1.2928351645715880e-05, 10.000000000000000, 3.0000000000000000, 0.0 },\n+  { 2.7761691354244538e-05, 10.000000000000000, 3.2500000000000000, 0.0 },\n+  { 5.6009495875078844e-05, 10.000000000000000, 3.5000000000000000, 0.0 },\n+  { 0.00010703761729231951, 10.000000000000000, 3.7500000000000000, 0.0 },\n+  { 0.00019504055466003446, 10.000000000000000, 4.0000000000000000, 0.0 },\n+  { 0.00034068888474064193, 10.000000000000000, 4.2500000000000000, 0.0 },\n+  { 0.00057300977667164505, 10.000000000000000, 4.5000000000000000, 0.0 },\n+  { 0.00093142172588886810, 10.000000000000000, 4.7500000000000000, 0.0 },\n+  { 0.0014678026473104744, 10.000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler008 = 2.5000000000000020e-13;\n+const double toler014 = 1.0000000000000008e-12;\n \n // Test data for nu=20.000000000000000.\n-// max(|f - f_GSL|): 1.9387045606711586e-26\n-// max(|f - f_GSL| / |f_GSL|): 2.1275572270326799e-15\n+// max(|f - f_GSL|): 3.8450973786644646e-25 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 1.6112330065488876e-14\n+// mean(f - f_GSL): -2.9366599259721097e-26\n+// variance(f - f_GSL): 6.6216490672203760e-51\n+// stddev(f - f_GSL): 8.1373515760475631e-26\n const testcase_cyl_bessel_j<double>\n-data009[21] =\n+data015[21] =\n {\n-  { 0.0000000000000000, 20.000000000000000, 0.0000000000000000 },\n-  { 3.5624805510586969e-37, 20.000000000000000, 0.25000000000000000 },\n-  { 3.7272019617047132e-31, 20.000000000000000, 0.50000000000000000 },\n-  { 1.2347870693633488e-27, 20.000000000000000, 0.75000000000000000 },\n-  { 3.8735030085246562e-25, 20.000000000000000, 1.0000000000000000 },\n-  { 3.3372897667043766e-23, 20.000000000000000, 1.2500000000000000 },\n-  { 1.2689972189332558e-21, 20.000000000000000, 1.5000000000000000 },\n-  { 2.7427715944032989e-20, 20.000000000000000, 1.7500000000000000 },\n-  { 3.9189728050907524e-19, 20.000000000000000, 2.0000000000000000 },\n-  { 4.0805232551365158e-18, 20.000000000000000, 2.2500000000000000 },\n-  { 3.3090793836587786e-17, 20.000000000000000, 2.5000000000000000 },\n-  { 2.1915404680645990e-16, 20.000000000000000, 2.7500000000000000 },\n-  { 1.2275946737992981e-15, 20.000000000000000, 3.0000000000000000 },\n-  { 5.9727663938305382e-15, 20.000000000000000, 3.2500000000000000 },\n-  { 2.5768553102807590e-14, 20.000000000000000, 3.5000000000000000 },\n-  { 1.0021112208287217e-13, 20.000000000000000, 3.7500000000000000 },\n-  { 3.5595116285938516e-13, 20.000000000000000, 4.0000000000000000 },\n-  { 1.1673622958555074e-12, 20.000000000000000, 4.2500000000000000 },\n-  { 3.5665470983611762e-12, 20.000000000000000, 4.5000000000000000 },\n-  { 1.0227564044880958e-11, 20.000000000000000, 4.7500000000000000 },\n-  { 2.7703300521289426e-11, 20.000000000000000, 5.0000000000000000 },\n+  { 0.0000000000000000, 20.000000000000000, 0.0000000000000000, 0.0 },\n+  { 3.5624805510586969e-37, 20.000000000000000, 0.25000000000000000, 0.0 },\n+  { 3.7272019617047132e-31, 20.000000000000000, 0.50000000000000000, 0.0 },\n+  { 1.2347870693633488e-27, 20.000000000000000, 0.75000000000000000, 0.0 },\n+  { 3.8735030085246562e-25, 20.000000000000000, 1.0000000000000000, 0.0 },\n+  { 3.3372897667043766e-23, 20.000000000000000, 1.2500000000000000, 0.0 },\n+  { 1.2689972189332558e-21, 20.000000000000000, 1.5000000000000000, 0.0 },\n+  { 2.7427715944032989e-20, 20.000000000000000, 1.7500000000000000, 0.0 },\n+  { 3.9189728050907524e-19, 20.000000000000000, 2.0000000000000000, 0.0 },\n+  { 4.0805232551365158e-18, 20.000000000000000, 2.2500000000000000, 0.0 },\n+  { 3.3090793836587786e-17, 20.000000000000000, 2.5000000000000000, 0.0 },\n+  { 2.1915404680645990e-16, 20.000000000000000, 2.7500000000000000, 0.0 },\n+  { 1.2275946737992981e-15, 20.000000000000000, 3.0000000000000000, 0.0 },\n+  { 5.9727663938305382e-15, 20.000000000000000, 3.2500000000000000, 0.0 },\n+  { 2.5768553102807590e-14, 20.000000000000000, 3.5000000000000000, 0.0 },\n+  { 1.0021112208287217e-13, 20.000000000000000, 3.7500000000000000, 0.0 },\n+  { 3.5595116285938516e-13, 20.000000000000000, 4.0000000000000000, 0.0 },\n+  { 1.1673622958555074e-12, 20.000000000000000, 4.2500000000000000, 0.0 },\n+  { 3.5665470983611762e-12, 20.000000000000000, 4.5000000000000000, 0.0 },\n+  { 1.0227564044880958e-11, 20.000000000000000, 4.7500000000000000, 0.0 },\n+  { 2.7703300521289426e-11, 20.000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler009 = 2.5000000000000020e-13;\n+const double toler015 = 1.0000000000000008e-12;\n //  cyl_bessel_j\n \n // Test data for nu=0.0000000000000000.\n-// max(|f - f_GSL|): 7.6709472107694410e-15\n+// max(|f - f_GSL|): 7.6709472107694410e-15 at index 13\n // max(|f - f_GSL| / |f_GSL|): 4.1048891312746575e-13\n+// mean(f - f_GSL): -4.8105534106433027e-16\n+// variance(f - f_GSL): 9.0295585401833436e-31\n+// stddev(f - f_GSL): 9.5023989287881106e-16\n const testcase_cyl_bessel_j<double>\n-data010[21] =\n+data016[21] =\n {\n-  { 1.0000000000000000, 0.0000000000000000, 0.0000000000000000 },\n-  { -0.17759677131433835, 0.0000000000000000, 5.0000000000000000 },\n-  { -0.24593576445134835, 0.0000000000000000, 10.000000000000000 },\n-  { -0.014224472826780771, 0.0000000000000000, 15.000000000000000 },\n-  { 0.16702466434058319, 0.0000000000000000, 20.000000000000000 },\n-  { 0.096266783275958154, 0.0000000000000000, 25.000000000000000 },\n-  { -0.086367983581040142, 0.0000000000000000, 30.000000000000000 },\n-  { -0.12684568275631256, 0.0000000000000000, 35.000000000000000 },\n-  { 0.0073668905842374085, 0.0000000000000000, 40.000000000000000 },\n-  { 0.11581867067325631, 0.0000000000000000, 45.000000000000000 },\n-  { 0.055812327669251746, 0.0000000000000000, 50.000000000000000 },\n-  { -0.074548302648236808, 0.0000000000000000, 55.000000000000000 },\n-  { -0.091471804089061859, 0.0000000000000000, 60.000000000000000 },\n-  { 0.018687343227677979, 0.0000000000000000, 65.000000000000000 },\n-  { 0.094908726483013545, 0.0000000000000000, 70.000000000000000 },\n-  { 0.034643913805097008, 0.0000000000000000, 75.000000000000000 },\n-  { -0.069742165512210033, 0.0000000000000000, 80.000000000000000 },\n-  { -0.070940394796273273, 0.0000000000000000, 85.000000000000000 },\n-  { 0.026630016699969526, 0.0000000000000000, 90.000000000000000 },\n-  { 0.081811967783384135, 0.0000000000000000, 95.000000000000000 },\n-  { 0.019985850304223170, 0.0000000000000000, 100.00000000000000 },\n+  { 1.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0 },\n+  { -0.17759677131433835, 0.0000000000000000, 5.0000000000000000, 0.0 },\n+  { -0.24593576445134835, 0.0000000000000000, 10.000000000000000, 0.0 },\n+  { -0.014224472826780771, 0.0000000000000000, 15.000000000000000, 0.0 },\n+  { 0.16702466434058319, 0.0000000000000000, 20.000000000000000, 0.0 },\n+  { 0.096266783275958154, 0.0000000000000000, 25.000000000000000, 0.0 },\n+  { -0.086367983581040142, 0.0000000000000000, 30.000000000000000, 0.0 },\n+  { -0.12684568275631256, 0.0000000000000000, 35.000000000000000, 0.0 },\n+  { 0.0073668905842374085, 0.0000000000000000, 40.000000000000000, 0.0 },\n+  { 0.11581867067325631, 0.0000000000000000, 45.000000000000000, 0.0 },\n+  { 0.055812327669251746, 0.0000000000000000, 50.000000000000000, 0.0 },\n+  { -0.074548302648236808, 0.0000000000000000, 55.000000000000000, 0.0 },\n+  { -0.091471804089061859, 0.0000000000000000, 60.000000000000000, 0.0 },\n+  { 0.018687343227677979, 0.0000000000000000, 65.000000000000000, 0.0 },\n+  { 0.094908726483013545, 0.0000000000000000, 70.000000000000000, 0.0 },\n+  { 0.034643913805097008, 0.0000000000000000, 75.000000000000000, 0.0 },\n+  { -0.069742165512210033, 0.0000000000000000, 80.000000000000000, 0.0 },\n+  { -0.070940394796273273, 0.0000000000000000, 85.000000000000000, 0.0 },\n+  { 0.026630016699969526, 0.0000000000000000, 90.000000000000000, 0.0 },\n+  { 0.081811967783384135, 0.0000000000000000, 95.000000000000000, 0.0 },\n+  { 0.019985850304223170, 0.0000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler010 = 2.5000000000000014e-11;\n+const double toler016 = 2.5000000000000014e-11;\n \n // Test data for nu=0.33333333333333331.\n-// max(|f - f_GSL|): 7.9311557321659620e-15\n-// max(|f - f_GSL| / |f_GSL|): 4.2444155318123211e-12\n+// max(|f - f_GSL|): 7.9363599025938925e-15 at index 15\n+// max(|f - f_GSL| / |f_GSL|): 4.2442260743498463e-12\n+// mean(f - f_GSL): -4.0073144868561849e-16\n+// variance(f - f_GSL): 1.2341887679989061e-30\n+// stddev(f - f_GSL): 1.1109404880545609e-15\n const testcase_cyl_bessel_j<double>\n-data011[21] =\n+data017[21] =\n {\n-  { 0.0000000000000000, 0.33333333333333331, 0.0000000000000000 },\n-  { -0.30642046380026405, 0.33333333333333331, 5.0000000000000000 },\n-  { -0.18614516704869571, 0.33333333333333331, 10.000000000000000 },\n-  { 0.089740004221152650, 0.33333333333333331, 15.000000000000000 },\n-  { 0.17606058001293901, 0.33333333333333331, 20.000000000000000 },\n-  { 0.020097162141383233, 0.33333333333333331, 25.000000000000000 },\n-  { -0.13334053387426159, 0.33333333333333331, 30.000000000000000 },\n-  { -0.087118009397765497, 0.33333333333333331, 35.000000000000000 },\n-  { 0.069202942818858179, 0.33333333333333331, 40.000000000000000 },\n-  { 0.11387616964518317, 0.33333333333333331, 45.000000000000000 },\n-  { -0.00057226680771808045, 0.33333333333333331, 50.000000000000000 },\n-  { -0.10331600929280822, 0.33333333333333331, 55.000000000000000 },\n-  { -0.055618147270528003, 0.33333333333333331, 60.000000000000000 },\n-  { 0.064711954014113948, 0.33333333333333331, 65.000000000000000 },\n-  { 0.086879926462481605, 0.33333333333333331, 70.000000000000000 },\n-  { -0.012614484229891068, 0.33333333333333331, 75.000000000000000 },\n-  { -0.088199784400034537, 0.33333333333333331, 80.000000000000000 },\n-  { -0.036703611076564523, 0.33333333333333331, 85.000000000000000 },\n-  { 0.062916286828779547, 0.33333333333333331, 90.000000000000000 },\n-  { 0.069465244416806030, 0.33333333333333331, 95.000000000000000 },\n-  { -0.021271244853702364, 0.33333333333333331, 100.00000000000000 },\n+  { 0.0000000000000000, 0.33333333333333331, 0.0000000000000000, 0.0 },\n+  { -0.30642046380026405, 0.33333333333333331, 5.0000000000000000, 0.0 },\n+  { -0.18614516704869571, 0.33333333333333331, 10.000000000000000, 0.0 },\n+  { 0.089740004221152650, 0.33333333333333331, 15.000000000000000, 0.0 },\n+  { 0.17606058001293901, 0.33333333333333331, 20.000000000000000, 0.0 },\n+  { 0.020097162141383233, 0.33333333333333331, 25.000000000000000, 0.0 },\n+  { -0.13334053387426159, 0.33333333333333331, 30.000000000000000, 0.0 },\n+  { -0.087118009397765497, 0.33333333333333331, 35.000000000000000, 0.0 },\n+  { 0.069202942818858179, 0.33333333333333331, 40.000000000000000, 0.0 },\n+  { 0.11387616964518317, 0.33333333333333331, 45.000000000000000, 0.0 },\n+  { -0.00057226680771808045, 0.33333333333333331, 50.000000000000000, 0.0 },\n+  { -0.10331600929280822, 0.33333333333333331, 55.000000000000000, 0.0 },\n+  { -0.055618147270528003, 0.33333333333333331, 60.000000000000000, 0.0 },\n+  { 0.064711954014113948, 0.33333333333333331, 65.000000000000000, 0.0 },\n+  { 0.086879926462481605, 0.33333333333333331, 70.000000000000000, 0.0 },\n+  { -0.012614484229891068, 0.33333333333333331, 75.000000000000000, 0.0 },\n+  { -0.088199784400034537, 0.33333333333333331, 80.000000000000000, 0.0 },\n+  { -0.036703611076564523, 0.33333333333333331, 85.000000000000000, 0.0 },\n+  { 0.062916286828779547, 0.33333333333333331, 90.000000000000000, 0.0 },\n+  { 0.069465244416806030, 0.33333333333333331, 95.000000000000000, 0.0 },\n+  { -0.021271244853702364, 0.33333333333333331, 100.00000000000000, 0.0 },\n };\n-const double toler011 = 2.5000000000000017e-10;\n+const double toler017 = 2.5000000000000017e-10;\n \n // Test data for nu=0.50000000000000000.\n-// max(|f - f_GSL|): 7.4246164771807344e-15\n-// max(|f - f_GSL| / |f_GSL|): 3.6725252809051799e-13\n+// max(|f - f_GSL|): 7.4384942649885488e-15 at index 15\n+// max(|f - f_GSL| / |f_GSL|): 3.6736636954373887e-13\n+// mean(f - f_GSL): -2.3914402204537413e-16\n+// variance(f - f_GSL): 7.8293530348883143e-31\n+// stddev(f - f_GSL): 8.8483631451745435e-16\n const testcase_cyl_bessel_j<double>\n-data012[21] =\n+data018[21] =\n {\n-  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000 },\n-  { -0.34216798479816180, 0.50000000000000000, 5.0000000000000000 },\n-  { -0.13726373575505049, 0.50000000000000000, 10.000000000000000 },\n-  { 0.13396768882243937, 0.50000000000000000, 15.000000000000000 },\n-  { 0.16288076385502984, 0.50000000000000000, 20.000000000000000 },\n-  { -0.021120283599650493, 0.50000000000000000, 25.000000000000000 },\n-  { -0.14392965337039987, 0.50000000000000000, 30.000000000000000 },\n-  { -0.057747757589458777, 0.50000000000000000, 35.000000000000000 },\n-  { 0.094000962389533649, 0.50000000000000000, 40.000000000000000 },\n-  { 0.10120783324271411, 0.50000000000000000, 45.000000000000000 },\n-  { -0.029605831888924641, 0.50000000000000000, 50.000000000000000 },\n-  { -0.10756039213265806, 0.50000000000000000, 55.000000000000000 },\n-  { -0.031397461182520438, 0.50000000000000000, 60.000000000000000 },\n-  { 0.081827430775628554, 0.50000000000000000, 65.000000000000000 },\n-  { 0.073802429539054554, 0.50000000000000000, 70.000000000000000 },\n-  { -0.035727009681702615, 0.50000000000000000, 75.000000000000000 },\n-  { -0.088661035811765460, 0.50000000000000000, 80.000000000000000 },\n-  { -0.015238065106312516, 0.50000000000000000, 85.000000000000000 },\n-  { 0.075189068550269425, 0.50000000000000000, 90.000000000000000 },\n-  { 0.055932643481494133, 0.50000000000000000, 95.000000000000000 },\n-  { -0.040402132716252127, 0.50000000000000000, 100.00000000000000 },\n+  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000, 0.0 },\n+  { -0.34216798479816180, 0.50000000000000000, 5.0000000000000000, 0.0 },\n+  { -0.13726373575505049, 0.50000000000000000, 10.000000000000000, 0.0 },\n+  { 0.13396768882243937, 0.50000000000000000, 15.000000000000000, 0.0 },\n+  { 0.16288076385502984, 0.50000000000000000, 20.000000000000000, 0.0 },\n+  { -0.021120283599650493, 0.50000000000000000, 25.000000000000000, 0.0 },\n+  { -0.14392965337039987, 0.50000000000000000, 30.000000000000000, 0.0 },\n+  { -0.057747757589458777, 0.50000000000000000, 35.000000000000000, 0.0 },\n+  { 0.094000962389533649, 0.50000000000000000, 40.000000000000000, 0.0 },\n+  { 0.10120783324271411, 0.50000000000000000, 45.000000000000000, 0.0 },\n+  { -0.029605831888924641, 0.50000000000000000, 50.000000000000000, 0.0 },\n+  { -0.10756039213265806, 0.50000000000000000, 55.000000000000000, 0.0 },\n+  { -0.031397461182520438, 0.50000000000000000, 60.000000000000000, 0.0 },\n+  { 0.081827430775628554, 0.50000000000000000, 65.000000000000000, 0.0 },\n+  { 0.073802429539054554, 0.50000000000000000, 70.000000000000000, 0.0 },\n+  { -0.035727009681702615, 0.50000000000000000, 75.000000000000000, 0.0 },\n+  { -0.088661035811765460, 0.50000000000000000, 80.000000000000000, 0.0 },\n+  { -0.015238065106312516, 0.50000000000000000, 85.000000000000000, 0.0 },\n+  { 0.075189068550269425, 0.50000000000000000, 90.000000000000000, 0.0 },\n+  { 0.055932643481494133, 0.50000000000000000, 95.000000000000000, 0.0 },\n+  { -0.040402132716252127, 0.50000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler012 = 2.5000000000000014e-11;\n+const double toler018 = 2.5000000000000014e-11;\n \n // Test data for nu=0.66666666666666663.\n-// max(|f - f_GSL|): 6.3629657098829284e-15\n-// max(|f - f_GSL| / |f_GSL|): 1.2254869540384518e-12\n+// max(|f - f_GSL|): 6.3699046037868357e-15 at index 15\n+// max(|f - f_GSL| / |f_GSL|): 1.2249770426844829e-12\n+// mean(f - f_GSL): -1.1601995819092502e-16\n+// variance(f - f_GSL): 5.5905222078728605e-31\n+// stddev(f - f_GSL): 7.4769794756123678e-16\n const testcase_cyl_bessel_j<double>\n-data013[21] =\n+data019[21] =\n {\n-  { 0.0000000000000000, 0.66666666666666663, 0.0000000000000000 },\n-  { -0.35712533549168868, 0.66666666666666663, 5.0000000000000000 },\n-  { -0.080149603304315808, 0.66666666666666663, 10.000000000000000 },\n-  { 0.16918875175798079, 0.66666666666666663, 15.000000000000000 },\n-  { 0.13904826122116531, 0.66666666666666663, 20.000000000000000 },\n-  { -0.060770629698497600, 0.66666666666666663, 25.000000000000000 },\n-  { -0.14489851974205062, 0.66666666666666663, 30.000000000000000 },\n-  { -0.024604880159644394, 0.66666666666666663, 35.000000000000000 },\n-  { 0.11243936464912010, 0.66666666666666663, 40.000000000000000 },\n-  { 0.081776275512525309, 0.66666666666666663, 45.000000000000000 },\n-  { -0.056589908749367777, 0.66666666666666663, 50.000000000000000 },\n-  { -0.10455814523765931, 0.66666666666666663, 55.000000000000000 },\n-  { -0.0051030148548608456, 0.66666666666666663, 60.000000000000000 },\n-  { 0.093398227061639236, 0.66666666666666663, 65.000000000000000 },\n-  { 0.055763883611864913, 0.66666666666666663, 70.000000000000000 },\n-  { -0.056395322915757364, 0.66666666666666663, 75.000000000000000 },\n-  { -0.083131347805783087, 0.66666666666666663, 80.000000000000000 },\n-  { 0.0072315397874096648, 0.66666666666666663, 85.000000000000000 },\n-  { 0.082362798520905250, 0.66666666666666663, 90.000000000000000 },\n-  { 0.038630504403446168, 0.66666666666666663, 95.000000000000000 },\n-  { -0.056778819380529734, 0.66666666666666663, 100.00000000000000 },\n+  { 0.0000000000000000, 0.66666666666666663, 0.0000000000000000, 0.0 },\n+  { -0.35712533549168868, 0.66666666666666663, 5.0000000000000000, 0.0 },\n+  { -0.080149603304315808, 0.66666666666666663, 10.000000000000000, 0.0 },\n+  { 0.16918875175798079, 0.66666666666666663, 15.000000000000000, 0.0 },\n+  { 0.13904826122116531, 0.66666666666666663, 20.000000000000000, 0.0 },\n+  { -0.060770629698497600, 0.66666666666666663, 25.000000000000000, 0.0 },\n+  { -0.14489851974205062, 0.66666666666666663, 30.000000000000000, 0.0 },\n+  { -0.024604880159644394, 0.66666666666666663, 35.000000000000000, 0.0 },\n+  { 0.11243936464912010, 0.66666666666666663, 40.000000000000000, 0.0 },\n+  { 0.081776275512525309, 0.66666666666666663, 45.000000000000000, 0.0 },\n+  { -0.056589908749367777, 0.66666666666666663, 50.000000000000000, 0.0 },\n+  { -0.10455814523765931, 0.66666666666666663, 55.000000000000000, 0.0 },\n+  { -0.0051030148548608456, 0.66666666666666663, 60.000000000000000, 0.0 },\n+  { 0.093398227061639236, 0.66666666666666663, 65.000000000000000, 0.0 },\n+  { 0.055763883611864913, 0.66666666666666663, 70.000000000000000, 0.0 },\n+  { -0.056395322915757364, 0.66666666666666663, 75.000000000000000, 0.0 },\n+  { -0.083131347805783087, 0.66666666666666663, 80.000000000000000, 0.0 },\n+  { 0.0072315397874096648, 0.66666666666666663, 85.000000000000000, 0.0 },\n+  { 0.082362798520905250, 0.66666666666666663, 90.000000000000000, 0.0 },\n+  { 0.038630504403446168, 0.66666666666666663, 95.000000000000000, 0.0 },\n+  { -0.056778819380529734, 0.66666666666666663, 100.00000000000000, 0.0 },\n };\n-const double toler013 = 1.0000000000000006e-10;\n+const double toler019 = 1.0000000000000006e-10;\n \n // Test data for nu=1.0000000000000000.\n-// max(|f - f_GSL|): 7.1435912740724916e-15\n-// max(|f - f_GSL| / |f_GSL|): 1.7857949645087573e-12\n+// max(|f - f_GSL|): 7.1418565505965148e-15 at index 14\n+// max(|f - f_GSL| / |f_GSL|): 1.7859762266854228e-12\n+// mean(f - f_GSL): 9.6132592627048056e-17\n+// variance(f - f_GSL): 8.7314103995980843e-32\n+// stddev(f - f_GSL): 2.9548960048702366e-16\n const testcase_cyl_bessel_j<double>\n-data014[21] =\n+data020[21] =\n {\n-  { 0.0000000000000000, 1.0000000000000000, 0.0000000000000000 },\n-  { -0.32757913759146529, 1.0000000000000000, 5.0000000000000000 },\n-  { 0.043472746168861459, 1.0000000000000000, 10.000000000000000 },\n-  { 0.20510403861352280, 1.0000000000000000, 15.000000000000000 },\n-  { 0.066833124175850078, 1.0000000000000000, 20.000000000000000 },\n-  { -0.12535024958028990, 1.0000000000000000, 25.000000000000000 },\n-  { -0.11875106261662294, 1.0000000000000000, 30.000000000000000 },\n-  { 0.043990942179625646, 1.0000000000000000, 35.000000000000000 },\n-  { 0.12603831803758500, 1.0000000000000000, 40.000000000000000 },\n-  { 0.028348854376424561, 1.0000000000000000, 45.000000000000000 },\n-  { -0.097511828125175129, 1.0000000000000000, 50.000000000000000 },\n-  { -0.078250038308684711, 1.0000000000000000, 55.000000000000000 },\n-  { 0.046598383758166370, 1.0000000000000000, 60.000000000000000 },\n-  { 0.097330172226126929, 1.0000000000000000, 65.000000000000000 },\n-  { 0.0099877887848385128, 1.0000000000000000, 70.000000000000000 },\n-  { -0.085139995044829081, 1.0000000000000000, 75.000000000000000 },\n-  { -0.056057296675712555, 1.0000000000000000, 80.000000000000000 },\n-  { 0.049151460334891130, 1.0000000000000000, 85.000000000000000 },\n-  { 0.079925646708868092, 1.0000000000000000, 90.000000000000000 },\n-  { -0.0023925612997269283, 1.0000000000000000, 95.000000000000000 },\n-  { -0.077145352014112129, 1.0000000000000000, 100.00000000000000 },\n+  { 0.0000000000000000, 1.0000000000000000, 0.0000000000000000, 0.0 },\n+  { -0.32757913759146529, 1.0000000000000000, 5.0000000000000000, 0.0 },\n+  { 0.043472746168861459, 1.0000000000000000, 10.000000000000000, 0.0 },\n+  { 0.20510403861352280, 1.0000000000000000, 15.000000000000000, 0.0 },\n+  { 0.066833124175850078, 1.0000000000000000, 20.000000000000000, 0.0 },\n+  { -0.12535024958028990, 1.0000000000000000, 25.000000000000000, 0.0 },\n+  { -0.11875106261662294, 1.0000000000000000, 30.000000000000000, 0.0 },\n+  { 0.043990942179625646, 1.0000000000000000, 35.000000000000000, 0.0 },\n+  { 0.12603831803758500, 1.0000000000000000, 40.000000000000000, 0.0 },\n+  { 0.028348854376424561, 1.0000000000000000, 45.000000000000000, 0.0 },\n+  { -0.097511828125175129, 1.0000000000000000, 50.000000000000000, 0.0 },\n+  { -0.078250038308684711, 1.0000000000000000, 55.000000000000000, 0.0 },\n+  { 0.046598383758166370, 1.0000000000000000, 60.000000000000000, 0.0 },\n+  { 0.097330172226126929, 1.0000000000000000, 65.000000000000000, 0.0 },\n+  { 0.0099877887848385128, 1.0000000000000000, 70.000000000000000, 0.0 },\n+  { -0.085139995044829081, 1.0000000000000000, 75.000000000000000, 0.0 },\n+  { -0.056057296675712555, 1.0000000000000000, 80.000000000000000, 0.0 },\n+  { 0.049151460334891130, 1.0000000000000000, 85.000000000000000, 0.0 },\n+  { 0.079925646708868092, 1.0000000000000000, 90.000000000000000, 0.0 },\n+  { -0.0023925612997269283, 1.0000000000000000, 95.000000000000000, 0.0 },\n+  { -0.077145352014112129, 1.0000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler014 = 1.0000000000000006e-10;\n+const double toler020 = 1.0000000000000006e-10;\n \n // Test data for nu=2.0000000000000000.\n-// max(|f - f_GSL|): 7.6050277186823223e-15\n+// max(|f - f_GSL|): 7.5980888247784151e-15 at index 13\n // max(|f - f_GSL| / |f_GSL|): 2.0010877493528614e-12\n+// mean(f - f_GSL): 4.4867383617942993e-16\n+// variance(f - f_GSL): 8.9441502176883788e-31\n+// stddev(f - f_GSL): 9.4573517528367196e-16\n const testcase_cyl_bessel_j<double>\n-data015[21] =\n+data021[21] =\n {\n-  { 0.0000000000000000, 2.0000000000000000, 0.0000000000000000 },\n-  { 0.046565116277751971, 2.0000000000000000, 5.0000000000000000 },\n-  { 0.25463031368512068, 2.0000000000000000, 10.000000000000000 },\n-  { 0.041571677975250486, 2.0000000000000000, 15.000000000000000 },\n-  { -0.16034135192299820, 2.0000000000000000, 20.000000000000000 },\n-  { -0.10629480324238134, 2.0000000000000000, 25.000000000000000 },\n-  { 0.078451246073265299, 2.0000000000000000, 30.000000000000000 },\n-  { 0.12935945088086259, 2.0000000000000000, 35.000000000000000 },\n-  { -0.0010649746823579794, 2.0000000000000000, 40.000000000000000 },\n-  { -0.11455872158985966, 2.0000000000000000, 45.000000000000000 },\n-  { -0.059712800794258863, 2.0000000000000000, 50.000000000000000 },\n-  { 0.071702846709739240, 2.0000000000000000, 55.000000000000000 },\n-  { 0.093025083547667420, 2.0000000000000000, 60.000000000000000 },\n-  { -0.015692568697643128, 2.0000000000000000, 65.000000000000000 },\n-  { -0.094623361089161029, 2.0000000000000000, 70.000000000000000 },\n-  { -0.036914313672959179, 2.0000000000000000, 75.000000000000000 },\n-  { 0.068340733095317172, 2.0000000000000000, 80.000000000000000 },\n-  { 0.072096899745329540, 2.0000000000000000, 85.000000000000000 },\n-  { -0.024853891217550248, 2.0000000000000000, 90.000000000000000 },\n-  { -0.081862337494957332, 2.0000000000000000, 95.000000000000000 },\n-  { -0.021528757344505364, 2.0000000000000000, 100.00000000000000 },\n+  { 0.0000000000000000, 2.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 0.046565116277751971, 2.0000000000000000, 5.0000000000000000, 0.0 },\n+  { 0.25463031368512068, 2.0000000000000000, 10.000000000000000, 0.0 },\n+  { 0.041571677975250486, 2.0000000000000000, 15.000000000000000, 0.0 },\n+  { -0.16034135192299820, 2.0000000000000000, 20.000000000000000, 0.0 },\n+  { -0.10629480324238134, 2.0000000000000000, 25.000000000000000, 0.0 },\n+  { 0.078451246073265299, 2.0000000000000000, 30.000000000000000, 0.0 },\n+  { 0.12935945088086259, 2.0000000000000000, 35.000000000000000, 0.0 },\n+  { -0.0010649746823579794, 2.0000000000000000, 40.000000000000000, 0.0 },\n+  { -0.11455872158985966, 2.0000000000000000, 45.000000000000000, 0.0 },\n+  { -0.059712800794258863, 2.0000000000000000, 50.000000000000000, 0.0 },\n+  { 0.071702846709739240, 2.0000000000000000, 55.000000000000000, 0.0 },\n+  { 0.093025083547667420, 2.0000000000000000, 60.000000000000000, 0.0 },\n+  { -0.015692568697643128, 2.0000000000000000, 65.000000000000000, 0.0 },\n+  { -0.094623361089161029, 2.0000000000000000, 70.000000000000000, 0.0 },\n+  { -0.036914313672959179, 2.0000000000000000, 75.000000000000000, 0.0 },\n+  { 0.068340733095317172, 2.0000000000000000, 80.000000000000000, 0.0 },\n+  { 0.072096899745329540, 2.0000000000000000, 85.000000000000000, 0.0 },\n+  { -0.024853891217550248, 2.0000000000000000, 90.000000000000000, 0.0 },\n+  { -0.081862337494957332, 2.0000000000000000, 95.000000000000000, 0.0 },\n+  { -0.021528757344505364, 2.0000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler015 = 2.5000000000000017e-10;\n+const double toler021 = 2.5000000000000017e-10;\n \n // Test data for nu=5.0000000000000000.\n-// max(|f - f_GSL|): 6.8521577301083880e-15\n-// max(|f - f_GSL| / |f_GSL|): 5.6813560677959848e-13\n+// max(|f - f_GSL|): 6.8452188362044808e-15 at index 14\n+// max(|f - f_GSL| / |f_GSL|): 5.6871180922055143e-13\n+// mean(f - f_GSL): -8.6612264979127729e-17\n+// variance(f - f_GSL): 1.4989992815624512e-31\n+// stddev(f - f_GSL): 3.8716912087128681e-16\n const testcase_cyl_bessel_j<double>\n-data016[21] =\n+data022[21] =\n {\n-  { 0.0000000000000000, 5.0000000000000000, 0.0000000000000000 },\n-  { 0.26114054612017007, 5.0000000000000000, 5.0000000000000000 },\n-  { -0.23406152818679371, 5.0000000000000000, 10.000000000000000 },\n-  { 0.13045613456502966, 5.0000000000000000, 15.000000000000000 },\n-  { 0.15116976798239498, 5.0000000000000000, 20.000000000000000 },\n-  { -0.066007995398422933, 5.0000000000000000, 25.000000000000000 },\n-  { -0.14324029551207709, 5.0000000000000000, 30.000000000000000 },\n-  { -0.0015053072953907251, 5.0000000000000000, 35.000000000000000 },\n-  { 0.12257346597711777, 5.0000000000000000, 40.000000000000000 },\n-  { 0.057984499200954109, 5.0000000000000000, 45.000000000000000 },\n-  { -0.081400247696569616, 5.0000000000000000, 50.000000000000000 },\n-  { -0.092569895786432765, 5.0000000000000000, 55.000000000000000 },\n-  { 0.027454744228344204, 5.0000000000000000, 60.000000000000000 },\n-  { 0.099110527701539025, 5.0000000000000000, 65.000000000000000 },\n-  { 0.026058129823895364, 5.0000000000000000, 70.000000000000000 },\n-  { -0.078523977013751398, 5.0000000000000000, 75.000000000000000 },\n-  { -0.065862349140031584, 5.0000000000000000, 80.000000000000000 },\n-  { 0.038669072284680979, 5.0000000000000000, 85.000000000000000 },\n-  { 0.082759319528415157, 5.0000000000000000, 90.000000000000000 },\n-  { 0.0079423372702472871, 5.0000000000000000, 95.000000000000000 },\n-  { -0.074195736964513898, 5.0000000000000000, 100.00000000000000 },\n+  { 0.0000000000000000, 5.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 0.26114054612017007, 5.0000000000000000, 5.0000000000000000, 0.0 },\n+  { -0.23406152818679371, 5.0000000000000000, 10.000000000000000, 0.0 },\n+  { 0.13045613456502966, 5.0000000000000000, 15.000000000000000, 0.0 },\n+  { 0.15116976798239498, 5.0000000000000000, 20.000000000000000, 0.0 },\n+  { -0.066007995398422933, 5.0000000000000000, 25.000000000000000, 0.0 },\n+  { -0.14324029551207709, 5.0000000000000000, 30.000000000000000, 0.0 },\n+  { -0.0015053072953907251, 5.0000000000000000, 35.000000000000000, 0.0 },\n+  { 0.12257346597711777, 5.0000000000000000, 40.000000000000000, 0.0 },\n+  { 0.057984499200954109, 5.0000000000000000, 45.000000000000000, 0.0 },\n+  { -0.081400247696569616, 5.0000000000000000, 50.000000000000000, 0.0 },\n+  { -0.092569895786432765, 5.0000000000000000, 55.000000000000000, 0.0 },\n+  { 0.027454744228344204, 5.0000000000000000, 60.000000000000000, 0.0 },\n+  { 0.099110527701539025, 5.0000000000000000, 65.000000000000000, 0.0 },\n+  { 0.026058129823895364, 5.0000000000000000, 70.000000000000000, 0.0 },\n+  { -0.078523977013751398, 5.0000000000000000, 75.000000000000000, 0.0 },\n+  { -0.065862349140031584, 5.0000000000000000, 80.000000000000000, 0.0 },\n+  { 0.038669072284680979, 5.0000000000000000, 85.000000000000000, 0.0 },\n+  { 0.082759319528415157, 5.0000000000000000, 90.000000000000000, 0.0 },\n+  { 0.0079423372702472871, 5.0000000000000000, 95.000000000000000, 0.0 },\n+  { -0.074195736964513898, 5.0000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler016 = 5.0000000000000028e-11;\n+const double toler022 = 5.0000000000000028e-11;\n \n // Test data for nu=10.000000000000000.\n-// max(|f - f_GSL|): 7.2303274478713320e-15\n-// max(|f - f_GSL| / |f_GSL|): 3.6974790630140835e-13\n+// max(|f - f_GSL|): 7.2337968948232856e-15 at index 18\n+// max(|f - f_GSL| / |f_GSL|): 3.6992532852132266e-13\n+// mean(f - f_GSL): 4.8246996675604947e-16\n+// variance(f - f_GSL): 7.6040256561433464e-31\n+// stddev(f - f_GSL): 8.7201064535608434e-16\n const testcase_cyl_bessel_j<double>\n-data017[21] =\n+data023[21] =\n {\n-  { 0.0000000000000000, 10.000000000000000, 0.0000000000000000 },\n-  { 0.0014678026473104744, 10.000000000000000, 5.0000000000000000 },\n-  { 0.20748610663335865, 10.000000000000000, 10.000000000000000 },\n-  { -0.090071811047659087, 10.000000000000000, 15.000000000000000 },\n-  { 0.18648255802394512, 10.000000000000000, 20.000000000000000 },\n-  { -0.075179843948523312, 10.000000000000000, 25.000000000000000 },\n-  { -0.12987689399858882, 10.000000000000000, 30.000000000000000 },\n-  { 0.063546391343962866, 10.000000000000000, 35.000000000000000 },\n-  { 0.11938336278226094, 10.000000000000000, 40.000000000000000 },\n-  { -0.026971402475010831, 10.000000000000000, 45.000000000000000 },\n-  { -0.11384784914946940, 10.000000000000000, 50.000000000000000 },\n-  { -0.015773790303746080, 10.000000000000000, 55.000000000000000 },\n-  { 0.097177143328071064, 10.000000000000000, 60.000000000000000 },\n-  { 0.054617389951112129, 10.000000000000000, 65.000000000000000 },\n-  { -0.065870338561952013, 10.000000000000000, 70.000000000000000 },\n-  { -0.080417867891894437, 10.000000000000000, 75.000000000000000 },\n-  { 0.024043850978184747, 10.000000000000000, 80.000000000000000 },\n-  { 0.086824832700067869, 10.000000000000000, 85.000000000000000 },\n-  { 0.019554748856312299, 10.000000000000000, 90.000000000000000 },\n-  { -0.072341598669443757, 10.000000000000000, 95.000000000000000 },\n-  { -0.054732176935472096, 10.000000000000000, 100.00000000000000 },\n+  { 0.0000000000000000, 10.000000000000000, 0.0000000000000000, 0.0 },\n+  { 0.0014678026473104744, 10.000000000000000, 5.0000000000000000, 0.0 },\n+  { 0.20748610663335865, 10.000000000000000, 10.000000000000000, 0.0 },\n+  { -0.090071811047659087, 10.000000000000000, 15.000000000000000, 0.0 },\n+  { 0.18648255802394512, 10.000000000000000, 20.000000000000000, 0.0 },\n+  { -0.075179843948523312, 10.000000000000000, 25.000000000000000, 0.0 },\n+  { -0.12987689399858882, 10.000000000000000, 30.000000000000000, 0.0 },\n+  { 0.063546391343962866, 10.000000000000000, 35.000000000000000, 0.0 },\n+  { 0.11938336278226094, 10.000000000000000, 40.000000000000000, 0.0 },\n+  { -0.026971402475010831, 10.000000000000000, 45.000000000000000, 0.0 },\n+  { -0.11384784914946940, 10.000000000000000, 50.000000000000000, 0.0 },\n+  { -0.015773790303746080, 10.000000000000000, 55.000000000000000, 0.0 },\n+  { 0.097177143328071064, 10.000000000000000, 60.000000000000000, 0.0 },\n+  { 0.054617389951112129, 10.000000000000000, 65.000000000000000, 0.0 },\n+  { -0.065870338561952013, 10.000000000000000, 70.000000000000000, 0.0 },\n+  { -0.080417867891894437, 10.000000000000000, 75.000000000000000, 0.0 },\n+  { 0.024043850978184747, 10.000000000000000, 80.000000000000000, 0.0 },\n+  { 0.086824832700067869, 10.000000000000000, 85.000000000000000, 0.0 },\n+  { 0.019554748856312299, 10.000000000000000, 90.000000000000000, 0.0 },\n+  { -0.072341598669443757, 10.000000000000000, 95.000000000000000, 0.0 },\n+  { -0.054732176935472096, 10.000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler017 = 2.5000000000000014e-11;\n+const double toler023 = 2.5000000000000014e-11;\n \n // Test data for nu=20.000000000000000.\n-// max(|f - f_GSL|): 7.7177847446208148e-15\n-// max(|f - f_GSL| / |f_GSL|): 1.1191513260854523e-12\n+// max(|f - f_GSL|): 7.7212541915727684e-15 at index 15\n+// max(|f - f_GSL| / |f_GSL|): 1.1196544285022136e-12\n+// mean(f - f_GSL): 5.2156489342296849e-16\n+// variance(f - f_GSL): 3.4201480080426176e-31\n+// stddev(f - f_GSL): 5.8482031497226715e-16\n const testcase_cyl_bessel_j<double>\n-data018[21] =\n+data024[21] =\n {\n-  { 0.0000000000000000, 20.000000000000000, 0.0000000000000000 },\n-  { 2.7703300521289426e-11, 20.000000000000000, 5.0000000000000000 },\n-  { 1.1513369247813403e-05, 20.000000000000000, 10.000000000000000 },\n-  { 0.0073602340792234934, 20.000000000000000, 15.000000000000000 },\n-  { 0.16474777377532665, 20.000000000000000, 20.000000000000000 },\n-  { 0.051994049228303307, 20.000000000000000, 25.000000000000000 },\n-  { 0.0048310199934040923, 20.000000000000000, 30.000000000000000 },\n-  { -0.10927417397178038, 20.000000000000000, 35.000000000000000 },\n-  { 0.12779393355084889, 20.000000000000000, 40.000000000000000 },\n-  { 0.0047633437900313621, 20.000000000000000, 45.000000000000000 },\n-  { -0.11670435275957974, 20.000000000000000, 50.000000000000000 },\n-  { 0.025389204574566639, 20.000000000000000, 55.000000000000000 },\n-  { 0.10266020557876326, 20.000000000000000, 60.000000000000000 },\n-  { -0.023138582263434154, 20.000000000000000, 65.000000000000000 },\n-  { -0.096058573489952365, 20.000000000000000, 70.000000000000000 },\n-  { 0.0068961047221522270, 20.000000000000000, 75.000000000000000 },\n-  { 0.090565405489918357, 20.000000000000000, 80.000000000000000 },\n-  { 0.015985497599497172, 20.000000000000000, 85.000000000000000 },\n-  { -0.080345344044422534, 20.000000000000000, 90.000000000000000 },\n-  { -0.040253075701614051, 20.000000000000000, 95.000000000000000 },\n-  { 0.062217458498338672, 20.000000000000000, 100.00000000000000 },\n+  { 0.0000000000000000, 20.000000000000000, 0.0000000000000000, 0.0 },\n+  { 2.7703300521289426e-11, 20.000000000000000, 5.0000000000000000, 0.0 },\n+  { 1.1513369247813403e-05, 20.000000000000000, 10.000000000000000, 0.0 },\n+  { 0.0073602340792234934, 20.000000000000000, 15.000000000000000, 0.0 },\n+  { 0.16474777377532665, 20.000000000000000, 20.000000000000000, 0.0 },\n+  { 0.051994049228303307, 20.000000000000000, 25.000000000000000, 0.0 },\n+  { 0.0048310199934040923, 20.000000000000000, 30.000000000000000, 0.0 },\n+  { -0.10927417397178038, 20.000000000000000, 35.000000000000000, 0.0 },\n+  { 0.12779393355084889, 20.000000000000000, 40.000000000000000, 0.0 },\n+  { 0.0047633437900313621, 20.000000000000000, 45.000000000000000, 0.0 },\n+  { -0.11670435275957974, 20.000000000000000, 50.000000000000000, 0.0 },\n+  { 0.025389204574566639, 20.000000000000000, 55.000000000000000, 0.0 },\n+  { 0.10266020557876326, 20.000000000000000, 60.000000000000000, 0.0 },\n+  { -0.023138582263434154, 20.000000000000000, 65.000000000000000, 0.0 },\n+  { -0.096058573489952365, 20.000000000000000, 70.000000000000000, 0.0 },\n+  { 0.0068961047221522270, 20.000000000000000, 75.000000000000000, 0.0 },\n+  { 0.090565405489918357, 20.000000000000000, 80.000000000000000, 0.0 },\n+  { 0.015985497599497172, 20.000000000000000, 85.000000000000000, 0.0 },\n+  { -0.080345344044422534, 20.000000000000000, 90.000000000000000, 0.0 },\n+  { -0.040253075701614051, 20.000000000000000, 95.000000000000000, 0.0 },\n+  { 0.062217458498338672, 20.000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler018 = 1.0000000000000006e-10;\n+const double toler024 = 1.0000000000000006e-10;\n \n // Test data for nu=50.000000000000000.\n-// max(|f - f_GSL|): 6.6543992538470320e-15\n+// max(|f - f_GSL|): 6.6543992538470320e-15 at index 17\n // max(|f - f_GSL| / |f_GSL|): 1.6466369526724007e-13\n+// mean(f - f_GSL): -1.7248164093189558e-16\n+// variance(f - f_GSL): 3.3098955753115488e-31\n+// stddev(f - f_GSL): 5.7531691921162455e-16\n const testcase_cyl_bessel_j<double>\n-data019[21] =\n+data025[21] =\n {\n-  { 0.0000000000000000, 50.000000000000000, 0.0000000000000000 },\n-  { 2.2942476159525415e-45, 50.000000000000000, 5.0000000000000000 },\n-  { 1.7845136078715964e-30, 50.000000000000000, 10.000000000000000 },\n-  { 6.1060519495338733e-22, 50.000000000000000, 15.000000000000000 },\n-  { 4.4510392847006872e-16, 50.000000000000000, 20.000000000000000 },\n-  { 9.7561594280229808e-12, 50.000000000000000, 25.000000000000000 },\n-  { 2.0581656631564172e-08, 50.000000000000000, 30.000000000000000 },\n-  { 7.6069951699272960e-06, 50.000000000000000, 35.000000000000000 },\n-  { 0.00068185243531768309, 50.000000000000000, 40.000000000000000 },\n-  { 0.017284343240791214, 50.000000000000000, 45.000000000000000 },\n-  { 0.12140902189761507, 50.000000000000000, 50.000000000000000 },\n-  { 0.13594720957176012, 50.000000000000000, 55.000000000000000 },\n-  { -0.13798273148535209, 50.000000000000000, 60.000000000000000 },\n-  { 0.12116217746619409, 50.000000000000000, 65.000000000000000 },\n-  { -0.11394866738787145, 50.000000000000000, 70.000000000000000 },\n-  { 0.094076799581573348, 50.000000000000000, 75.000000000000000 },\n-  { -0.039457764590251347, 50.000000000000000, 80.000000000000000 },\n-  { -0.040412060734136383, 50.000000000000000, 85.000000000000000 },\n-  { 0.090802099838032266, 50.000000000000000, 90.000000000000000 },\n-  { -0.055979156267280165, 50.000000000000000, 95.000000000000000 },\n-  { -0.038698339728525440, 50.000000000000000, 100.00000000000000 },\n+  { 0.0000000000000000, 50.000000000000000, 0.0000000000000000, 0.0 },\n+  { 2.2942476159525415e-45, 50.000000000000000, 5.0000000000000000, 0.0 },\n+  { 1.7845136078715964e-30, 50.000000000000000, 10.000000000000000, 0.0 },\n+  { 6.1060519495338733e-22, 50.000000000000000, 15.000000000000000, 0.0 },\n+  { 4.4510392847006872e-16, 50.000000000000000, 20.000000000000000, 0.0 },\n+  { 9.7561594280229808e-12, 50.000000000000000, 25.000000000000000, 0.0 },\n+  { 2.0581656631564172e-08, 50.000000000000000, 30.000000000000000, 0.0 },\n+  { 7.6069951699272960e-06, 50.000000000000000, 35.000000000000000, 0.0 },\n+  { 0.00068185243531768309, 50.000000000000000, 40.000000000000000, 0.0 },\n+  { 0.017284343240791214, 50.000000000000000, 45.000000000000000, 0.0 },\n+  { 0.12140902189761507, 50.000000000000000, 50.000000000000000, 0.0 },\n+  { 0.13594720957176012, 50.000000000000000, 55.000000000000000, 0.0 },\n+  { -0.13798273148535209, 50.000000000000000, 60.000000000000000, 0.0 },\n+  { 0.12116217746619409, 50.000000000000000, 65.000000000000000, 0.0 },\n+  { -0.11394866738787145, 50.000000000000000, 70.000000000000000, 0.0 },\n+  { 0.094076799581573348, 50.000000000000000, 75.000000000000000, 0.0 },\n+  { -0.039457764590251347, 50.000000000000000, 80.000000000000000, 0.0 },\n+  { -0.040412060734136383, 50.000000000000000, 85.000000000000000, 0.0 },\n+  { 0.090802099838032266, 50.000000000000000, 90.000000000000000, 0.0 },\n+  { -0.055979156267280165, 50.000000000000000, 95.000000000000000, 0.0 },\n+  { -0.038698339728525440, 50.000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler019 = 1.0000000000000006e-11;\n+const double toler025 = 1.0000000000000006e-11;\n \n // Test data for nu=100.00000000000000.\n-// max(|f - f_GSL|): 4.8138576458356397e-17\n-// max(|f - f_GSL| / |f_GSL|): 1.0835289187603112e-13\n+// max(|f - f_GSL|): 6.3751087742147661e-17 at index 18\n+// max(|f - f_GSL| / |f_GSL|): 1.3655432948759698e-13\n+// mean(f - f_GSL): -3.2198025339906150e-18\n+// variance(f - f_GSL): 7.7469087160903957e-35\n+// stddev(f - f_GSL): 8.8016525244356221e-18\n const testcase_cyl_bessel_j<double>\n-data020[21] =\n+data026[21] =\n {\n-  { 0.0000000000000000, 100.00000000000000, 0.0000000000000000 },\n-  { 6.2677893955418763e-119, 100.00000000000000, 5.0000000000000000 },\n-  { 6.5973160641553816e-89, 100.00000000000000, 10.000000000000000 },\n-  { 1.9660095611249536e-71, 100.00000000000000, 15.000000000000000 },\n-  { 3.9617550943362524e-59, 100.00000000000000, 20.000000000000000 },\n-  { 1.1064482655301687e-49, 100.00000000000000, 25.000000000000000 },\n-  { 4.5788015281752354e-42, 100.00000000000000, 30.000000000000000 },\n-  { 9.9210206714732606e-36, 100.00000000000000, 35.000000000000000 },\n-  { 2.3866062996027414e-30, 100.00000000000000, 40.000000000000000 },\n-  { 1.0329791804565538e-25, 100.00000000000000, 45.000000000000000 },\n-  { 1.1159273690838340e-21, 100.00000000000000, 50.000000000000000 },\n-  { 3.7899753451900682e-18, 100.00000000000000, 55.000000000000000 },\n-  { 4.7832744078781205e-15, 100.00000000000000, 60.000000000000000 },\n-  { 2.5375564579490517e-12, 100.00000000000000, 65.000000000000000 },\n-  { 6.1982452141641260e-10, 100.00000000000000, 70.000000000000000 },\n-  { 7.4479005905904457e-08, 100.00000000000000, 75.000000000000000 },\n-  { 4.6065530648234948e-06, 100.00000000000000, 80.000000000000000 },\n-  { 0.00015043869999501765, 100.00000000000000, 85.000000000000000 },\n-  { 0.0026021305819963472, 100.00000000000000, 90.000000000000000 },\n-  { 0.023150768009428030, 100.00000000000000, 95.000000000000000 },\n-  { 0.096366673295861571, 100.00000000000000, 100.00000000000000 },\n+  { 0.0000000000000000, 100.00000000000000, 0.0000000000000000, 0.0 },\n+  { 6.2677893955418763e-119, 100.00000000000000, 5.0000000000000000, 0.0 },\n+  { 6.5973160641553816e-89, 100.00000000000000, 10.000000000000000, 0.0 },\n+  { 1.9660095611249536e-71, 100.00000000000000, 15.000000000000000, 0.0 },\n+  { 3.9617550943362524e-59, 100.00000000000000, 20.000000000000000, 0.0 },\n+  { 1.1064482655301687e-49, 100.00000000000000, 25.000000000000000, 0.0 },\n+  { 4.5788015281752354e-42, 100.00000000000000, 30.000000000000000, 0.0 },\n+  { 9.9210206714735426e-36, 100.00000000000000, 35.000000000000000, 0.0 },\n+  { 2.3866062996026735e-30, 100.00000000000000, 40.000000000000000, 0.0 },\n+  { 1.0329791804565538e-25, 100.00000000000000, 45.000000000000000, 0.0 },\n+  { 1.1159273690838498e-21, 100.00000000000000, 50.000000000000000, 0.0 },\n+  { 3.7899753451900944e-18, 100.00000000000000, 55.000000000000000, 0.0 },\n+  { 4.7832744078782562e-15, 100.00000000000000, 60.000000000000000, 0.0 },\n+  { 2.5375564579490428e-12, 100.00000000000000, 65.000000000000000, 0.0 },\n+  { 6.1982452141641260e-10, 100.00000000000000, 70.000000000000000, 0.0 },\n+  { 7.4479005905904457e-08, 100.00000000000000, 75.000000000000000, 0.0 },\n+  { 4.6065530648234940e-06, 100.00000000000000, 80.000000000000000, 0.0 },\n+  { 0.00015043869999501787, 100.00000000000000, 85.000000000000000, 0.0 },\n+  { 0.0026021305819963628, 100.00000000000000, 90.000000000000000, 0.0 },\n+  { 0.023150768009428030, 100.00000000000000, 95.000000000000000, 0.0 },\n+  { 0.096366673295861571, 100.00000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler020 = 1.0000000000000006e-11;\n+const double toler026 = 1.0000000000000006e-11;\n \n-template<typename Tp, unsigned int Num>\n+template<typename Ret, unsigned int Num>\n   void\n-  test(const testcase_cyl_bessel_j<Tp> (&data)[Num], Tp toler)\n+  test(const testcase_cyl_bessel_j<Ret> (&data)[Num], Ret toler)\n   {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n+    bool test __attribute__((unused)) = true;\n+    const Ret eps = std::numeric_limits<Ret>::epsilon();\n+    Ret max_abs_diff = -Ret(1);\n+    Ret max_abs_frac = -Ret(1);\n     unsigned int num_datum = Num;\n     for (unsigned int i = 0; i < num_datum; ++i)\n       {\n-\tconst Tp f = std::cyl_bessel_j(data[i].nu, data[i].x);\n-\tconst Tp f0 = data[i].f0;\n-\tconst Tp diff = f - f0;\n+\tconst Ret f = std::cyl_bessel_j(data[i].nu, data[i].x);\n+\tconst Ret f0 = data[i].f0;\n+\tconst Ret diff = f - f0;\n \tif (std::abs(diff) > max_abs_diff)\n \t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n+\tif (std::abs(f0) > Ret(10) * eps\n+\t && std::abs(f) > Ret(10) * eps)\n \t  {\n-\t    const Tp frac = diff / f0;\n+\t    const Ret frac = diff / f0;\n \t    if (std::abs(frac) > max_abs_frac)\n \t      max_abs_frac = std::abs(frac);\n \t  }\n@@ -668,12 +728,6 @@ template<typename Tp, unsigned int Num>\n int\n main()\n {\n-  test(data001, toler001);\n-  test(data002, toler002);\n-  test(data003, toler003);\n-  test(data004, toler004);\n-  test(data005, toler005);\n-  test(data006, toler006);\n   test(data007, toler007);\n   test(data008, toler008);\n   test(data009, toler009);\n@@ -688,5 +742,11 @@ main()\n   test(data018, toler018);\n   test(data019, toler019);\n   test(data020, toler020);\n+  test(data021, toler021);\n+  test(data022, toler022);\n+  test(data023, toler023);\n+  test(data024, toler024);\n+  test(data025, toler025);\n+  test(data026, toler026);\n   return 0;\n }"}, {"sha": "64171ac6a28083583683d8d05f7c90e9d3d172cc", "filename": "libstdc++-v3/testsuite/special_functions/09_cyl_bessel_k/check_value.cc", "status": "modified", "additions": 604, "deletions": 538, "changes": 1142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F09_cyl_bessel_k%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F09_cyl_bessel_k%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F09_cyl_bessel_k%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -37,665 +37,731 @@\n #endif\n #include <specfun_testcase.h>\n \n-\n // Test data for nu=0.0000000000000000.\n-// max(|f - f_GSL|): 2.2204460492503131e-16\n-// max(|f - f_GSL| / |f_GSL|): 1.7863051312335036e-16\n+// max(|f - f_GSL|): 2.2204460492503131e-16 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 3.3025402038894216e-16\n+// mean(f - f_GSL): 1.0473392986209972e-17\n+// variance(f - f_GSL): 5.5842559222476003e-36\n+// stddev(f - f_GSL): 2.3631030282760842e-18\n const testcase_cyl_bessel_k<double>\n-data001[20] =\n+data007[20] =\n {\n-  { 1.5415067512483025, 0.0000000000000000, 0.25000000000000000 },\n-  { 0.92441907122766565, 0.0000000000000000, 0.50000000000000000 },\n-  { 0.61058242211646430, 0.0000000000000000, 0.75000000000000000 },\n-  { 0.42102443824070829, 0.0000000000000000, 1.0000000000000000 },\n-  { 0.29760308908410588, 0.0000000000000000, 1.2500000000000000 },\n-  { 0.21380556264752565, 0.0000000000000000, 1.5000000000000000 },\n-  { 0.15537981238660362, 0.0000000000000000, 1.7500000000000000 },\n-  { 0.11389387274953360, 0.0000000000000000, 2.0000000000000000 },\n-  { 0.084043111974658191, 0.0000000000000000, 2.2500000000000000 },\n-  { 0.062347553200366168, 0.0000000000000000, 2.5000000000000000 },\n-  { 0.046454901308760774, 0.0000000000000000, 2.7500000000000000 },\n-  { 0.034739504386279256, 0.0000000000000000, 3.0000000000000000 },\n-  { 0.026058755255154966, 0.0000000000000000, 3.2500000000000000 },\n-  { 0.019598897170368501, 0.0000000000000000, 3.5000000000000000 },\n-  { 0.014774250877128706, 0.0000000000000000, 3.7500000000000000 },\n-  { 0.011159676085853026, 0.0000000000000000, 4.0000000000000000 },\n-  { 0.0084443877245429649, 0.0000000000000000, 4.2500000000000000 },\n-  { 0.0063998572432339747, 0.0000000000000000, 4.5000000000000000 },\n-  { 0.0048572045578879524, 0.0000000000000000, 4.7500000000000000 },\n-  { 0.0036910983340425947, 0.0000000000000000, 5.0000000000000000 },\n+  { 1.5415067512483025, 0.0000000000000000, 0.25000000000000000, 0.0 },\n+  { 0.92441907122766565, 0.0000000000000000, 0.50000000000000000, 0.0 },\n+  { 0.61058242211646430, 0.0000000000000000, 0.75000000000000000, 0.0 },\n+  { 0.42102443824070834, 0.0000000000000000, 1.0000000000000000, 0.0 },\n+  { 0.29760308908410588, 0.0000000000000000, 1.2500000000000000, 0.0 },\n+  { 0.21380556264752565, 0.0000000000000000, 1.5000000000000000, 0.0 },\n+  { 0.15537981238660359, 0.0000000000000000, 1.7500000000000000, 0.0 },\n+  { 0.11389387274953360, 0.0000000000000000, 2.0000000000000000, 0.0 },\n+  { 0.084043111974658191, 0.0000000000000000, 2.2500000000000000, 0.0 },\n+  { 0.062347553200366168, 0.0000000000000000, 2.5000000000000000, 0.0 },\n+  { 0.046454901308760774, 0.0000000000000000, 2.7500000000000000, 0.0 },\n+  { 0.034739504386279256, 0.0000000000000000, 3.0000000000000000, 0.0 },\n+  { 0.026058755255154966, 0.0000000000000000, 3.2500000000000000, 0.0 },\n+  { 0.019598897170368501, 0.0000000000000000, 3.5000000000000000, 0.0 },\n+  { 0.014774250877128707, 0.0000000000000000, 3.7500000000000000, 0.0 },\n+  { 0.011159676085853030, 0.0000000000000000, 4.0000000000000000, 0.0 },\n+  { 0.0084443877245429649, 0.0000000000000000, 4.2500000000000000, 0.0 },\n+  { 0.0063998572432339756, 0.0000000000000000, 4.5000000000000000, 0.0 },\n+  { 0.0048572045578879524, 0.0000000000000000, 4.7500000000000000, 0.0 },\n+  { 0.0036910983340425947, 0.0000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler001 = 2.5000000000000020e-13;\n+const double toler007 = 2.5000000000000020e-13;\n \n // Test data for nu=0.33333333333333331.\n-// max(|f - f_GSL|): 1.3322676295501878e-15\n-// max(|f - f_GSL| / |f_GSL|): 4.3522010494015439e-15\n+// max(|f - f_GSL|): 9.1593399531575415e-16 at index 5\n+// max(|f - f_GSL| / |f_GSL|): 4.1603543087763551e-15\n+// mean(f - f_GSL): -2.0157486790850499e-16\n+// variance(f - f_GSL): 2.2511040095474369e-33\n+// stddev(f - f_GSL): 4.7445800757785052e-17\n const testcase_cyl_bessel_k<double>\n-data002[20] =\n+data008[20] =\n {\n-  { 1.7144912564234518, 0.33333333333333331, 0.25000000000000000 },\n-  { 0.98903107424672421, 0.33333333333333331, 0.50000000000000000 },\n-  { 0.64216899667282989, 0.33333333333333331, 0.75000000000000000 },\n-  { 0.43843063344153432, 0.33333333333333331, 1.0000000000000000 },\n-  { 0.30788192414945043, 0.33333333333333331, 1.2500000000000000 },\n-  { 0.22015769026776688, 0.33333333333333331, 1.5000000000000000 },\n-  { 0.15943413057311245, 0.33333333333333331, 1.7500000000000000 },\n-  { 0.11654496129616534, 0.33333333333333331, 2.0000000000000000 },\n-  { 0.085809609306439674, 0.33333333333333331, 2.2500000000000000 },\n-  { 0.063542537454733386, 0.33333333333333331, 2.5000000000000000 },\n-  { 0.047273354184795509, 0.33333333333333331, 2.7500000000000000 },\n-  { 0.035305904902162587, 0.33333333333333331, 3.0000000000000000 },\n-  { 0.026454186892773169, 0.33333333333333331, 3.2500000000000000 },\n-  { 0.019877061407943805, 0.33333333333333331, 3.5000000000000000 },\n-  { 0.014971213514760214, 0.33333333333333331, 3.7500000000000000 },\n-  { 0.011299947573672165, 0.33333333333333331, 4.0000000000000000 },\n-  { 0.0085447959546110473, 0.33333333333333331, 4.2500000000000000 },\n-  { 0.0064720581217078237, 0.33333333333333331, 4.5000000000000000 },\n-  { 0.0049093342803275264, 0.33333333333333331, 4.7500000000000000 },\n-  { 0.0037288750960535887, 0.33333333333333331, 5.0000000000000000 },\n+  { 1.7144912564234513, 0.33333333333333331, 0.25000000000000000, 0.0 },\n+  { 0.98903107424672421, 0.33333333333333331, 0.50000000000000000, 0.0 },\n+  { 0.64216899667282989, 0.33333333333333331, 0.75000000000000000, 0.0 },\n+  { 0.43843063344153443, 0.33333333333333331, 1.0000000000000000, 0.0 },\n+  { 0.30788192414945043, 0.33333333333333331, 1.2500000000000000, 0.0 },\n+  { 0.22015769026776688, 0.33333333333333331, 1.5000000000000000, 0.0 },\n+  { 0.15943413057311243, 0.33333333333333331, 1.7500000000000000, 0.0 },\n+  { 0.11654496129616534, 0.33333333333333331, 2.0000000000000000, 0.0 },\n+  { 0.085809609306439674, 0.33333333333333331, 2.2500000000000000, 0.0 },\n+  { 0.063542537454733386, 0.33333333333333331, 2.5000000000000000, 0.0 },\n+  { 0.047273354184795509, 0.33333333333333331, 2.7500000000000000, 0.0 },\n+  { 0.035305904902162587, 0.33333333333333331, 3.0000000000000000, 0.0 },\n+  { 0.026454186892773169, 0.33333333333333331, 3.2500000000000000, 0.0 },\n+  { 0.019877061407943805, 0.33333333333333331, 3.5000000000000000, 0.0 },\n+  { 0.014971213514760216, 0.33333333333333331, 3.7500000000000000, 0.0 },\n+  { 0.011299947573672166, 0.33333333333333331, 4.0000000000000000, 0.0 },\n+  { 0.0085447959546110473, 0.33333333333333331, 4.2500000000000000, 0.0 },\n+  { 0.0064720581217078245, 0.33333333333333331, 4.5000000000000000, 0.0 },\n+  { 0.0049093342803275264, 0.33333333333333331, 4.7500000000000000, 0.0 },\n+  { 0.0037288750960535887, 0.33333333333333331, 5.0000000000000000, 0.0 },\n };\n-const double toler002 = 2.5000000000000020e-13;\n+const double toler008 = 2.5000000000000020e-13;\n \n // Test data for nu=0.50000000000000000.\n-// max(|f - f_GSL|): 1.3322676295501878e-15\n-// max(|f - f_GSL| / |f_GSL|): 1.5172850443872369e-15\n+// max(|f - f_GSL|): 1.3322676295501878e-15 at index 1\n+// max(|f - f_GSL| / |f_GSL|): 1.3827172837936134e-15\n+// mean(f - f_GSL): 7.5200262683594590e-17\n+// variance(f - f_GSL): 3.1330080374967473e-34\n+// stddev(f - f_GSL): 1.7700305188037711e-17\n const testcase_cyl_bessel_k<double>\n-data003[20] =\n+data009[20] =\n {\n-  { 1.9521640631515476, 0.50000000000000000, 0.25000000000000000 },\n-  { 1.0750476034999195, 0.50000000000000000, 0.50000000000000000 },\n-  { 0.68361006034952421, 0.50000000000000000, 0.75000000000000000 },\n-  { 0.46106850444789454, 0.50000000000000000, 1.0000000000000000 },\n-  { 0.32117137397144746, 0.50000000000000000, 1.2500000000000000 },\n-  { 0.22833505222826550, 0.50000000000000000, 1.5000000000000000 },\n-  { 0.16463628997380864, 0.50000000000000000, 1.7500000000000000 },\n-  { 0.11993777196806145, 0.50000000000000000, 2.0000000000000000 },\n-  { 0.088065558803650454, 0.50000000000000000, 2.2500000000000000 },\n-  { 0.065065943154009986, 0.50000000000000000, 2.5000000000000000 },\n-  { 0.048315198301417825, 0.50000000000000000, 2.7500000000000000 },\n-  { 0.036025985131764589, 0.50000000000000000, 3.0000000000000000 },\n-  { 0.026956356532443351, 0.50000000000000000, 3.2500000000000000 },\n-  { 0.020229969578139294, 0.50000000000000000, 3.5000000000000000 },\n-  { 0.015220888252975564, 0.50000000000000000, 3.7500000000000000 },\n-  { 0.011477624576608052, 0.50000000000000000, 4.0000000000000000 },\n-  { 0.0086718932956978342, 0.50000000000000000, 4.2500000000000000 },\n-  { 0.0065633945646345407, 0.50000000000000000, 4.5000000000000000 },\n-  { 0.0049752435421262292, 0.50000000000000000, 4.7500000000000000 },\n-  { 0.0037766133746428825, 0.50000000000000000, 5.0000000000000000 },\n+  { 1.9521640631515476, 0.50000000000000000, 0.25000000000000000, 0.0 },\n+  { 1.0750476034999195, 0.50000000000000000, 0.50000000000000000, 0.0 },\n+  { 0.68361006034952432, 0.50000000000000000, 0.75000000000000000, 0.0 },\n+  { 0.46106850444789443, 0.50000000000000000, 1.0000000000000000, 0.0 },\n+  { 0.32117137397144746, 0.50000000000000000, 1.2500000000000000, 0.0 },\n+  { 0.22833505222826550, 0.50000000000000000, 1.5000000000000000, 0.0 },\n+  { 0.16463628997380861, 0.50000000000000000, 1.7500000000000000, 0.0 },\n+  { 0.11993777196806145, 0.50000000000000000, 2.0000000000000000, 0.0 },\n+  { 0.088065558803650454, 0.50000000000000000, 2.2500000000000000, 0.0 },\n+  { 0.065065943154009986, 0.50000000000000000, 2.5000000000000000, 0.0 },\n+  { 0.048315198301417825, 0.50000000000000000, 2.7500000000000000, 0.0 },\n+  { 0.036025985131764589, 0.50000000000000000, 3.0000000000000000, 0.0 },\n+  { 0.026956356532443351, 0.50000000000000000, 3.2500000000000000, 0.0 },\n+  { 0.020229969578139294, 0.50000000000000000, 3.5000000000000000, 0.0 },\n+  { 0.015220888252975568, 0.50000000000000000, 3.7500000000000000, 0.0 },\n+  { 0.011477624576608053, 0.50000000000000000, 4.0000000000000000, 0.0 },\n+  { 0.0086718932956978342, 0.50000000000000000, 4.2500000000000000, 0.0 },\n+  { 0.0065633945646345424, 0.50000000000000000, 4.5000000000000000, 0.0 },\n+  { 0.0049752435421262292, 0.50000000000000000, 4.7500000000000000, 0.0 },\n+  { 0.0037766133746428825, 0.50000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler003 = 2.5000000000000020e-13;\n+const double toler009 = 2.5000000000000020e-13;\n \n // Test data for nu=0.66666666666666663.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 8.1483075013172610e-16\n+// max(|f - f_GSL|): 8.3266726846886741e-16 at index 4\n+// max(|f - f_GSL| / |f_GSL|): 2.4444922503951783e-15\n+// mean(f - f_GSL): 1.5718763096694843e-16\n+// variance(f - f_GSL): 1.3764253709076715e-33\n+// stddev(f - f_GSL): 3.7100207154511570e-17\n const testcase_cyl_bessel_k<double>\n-data004[20] =\n+data010[20] =\n {\n-  { 2.3289060745544101, 0.66666666666666663, 0.25000000000000000 },\n-  { 1.2059304647203353, 0.66666666666666663, 0.50000000000000000 },\n-  { 0.74547232976647215, 0.66666666666666663, 0.75000000000000000 },\n-  { 0.49447506210420827, 0.66666666666666663, 1.0000000000000000 },\n-  { 0.34062994813514252, 0.66666666666666663, 1.2500000000000000 },\n-  { 0.24024045240315581, 0.66666666666666663, 1.5000000000000000 },\n-  { 0.17217716908452310, 0.66666666666666663, 1.7500000000000000 },\n-  { 0.12483892748812841, 0.66666666666666663, 2.0000000000000000 },\n-  { 0.091315296079621050, 0.66666666666666663, 2.2500000000000000 },\n-  { 0.067255322171623361, 0.66666666666666663, 2.5000000000000000 },\n-  { 0.049809546542402224, 0.66666666666666663, 2.7500000000000000 },\n-  { 0.037057074495188531, 0.66666666666666663, 3.0000000000000000 },\n-  { 0.027674365504886729, 0.66666666666666663, 3.2500000000000000 },\n-  { 0.020733915836010912, 0.66666666666666663, 3.5000000000000000 },\n-  { 0.015577015510251332, 0.66666666666666663, 3.7500000000000000 },\n-  { 0.011730801456525336, 0.66666666666666663, 4.0000000000000000 },\n-  { 0.0088528343204658851, 0.66666666666666663, 4.2500000000000000 },\n-  { 0.0066933190915775560, 0.66666666666666663, 4.5000000000000000 },\n-  { 0.0050689292106255480, 0.66666666666666663, 4.7500000000000000 },\n-  { 0.0038444246344968226, 0.66666666666666663, 5.0000000000000000 },\n+  { 2.3289060745544101, 0.66666666666666663, 0.25000000000000000, 0.0 },\n+  { 1.2059304647203353, 0.66666666666666663, 0.50000000000000000, 0.0 },\n+  { 0.74547232976647226, 0.66666666666666663, 0.75000000000000000, 0.0 },\n+  { 0.49447506210420811, 0.66666666666666663, 1.0000000000000000, 0.0 },\n+  { 0.34062994813514252, 0.66666666666666663, 1.2500000000000000, 0.0 },\n+  { 0.24024045240315581, 0.66666666666666663, 1.5000000000000000, 0.0 },\n+  { 0.17217716908452307, 0.66666666666666663, 1.7500000000000000, 0.0 },\n+  { 0.12483892748812841, 0.66666666666666663, 2.0000000000000000, 0.0 },\n+  { 0.091315296079621050, 0.66666666666666663, 2.2500000000000000, 0.0 },\n+  { 0.067255322171623361, 0.66666666666666663, 2.5000000000000000, 0.0 },\n+  { 0.049809546542402224, 0.66666666666666663, 2.7500000000000000, 0.0 },\n+  { 0.037057074495188531, 0.66666666666666663, 3.0000000000000000, 0.0 },\n+  { 0.027674365504886729, 0.66666666666666663, 3.2500000000000000, 0.0 },\n+  { 0.020733915836010912, 0.66666666666666663, 3.5000000000000000, 0.0 },\n+  { 0.015577015510251336, 0.66666666666666663, 3.7500000000000000, 0.0 },\n+  { 0.011730801456525337, 0.66666666666666663, 4.0000000000000000, 0.0 },\n+  { 0.0088528343204658851, 0.66666666666666663, 4.2500000000000000, 0.0 },\n+  { 0.0066933190915775568, 0.66666666666666663, 4.5000000000000000, 0.0 },\n+  { 0.0050689292106255480, 0.66666666666666663, 4.7500000000000000, 0.0 },\n+  { 0.0038444246344968226, 0.66666666666666663, 5.0000000000000000, 0.0 },\n };\n-const double toler004 = 2.5000000000000020e-13;\n+const double toler010 = 2.5000000000000020e-13;\n \n // Test data for nu=1.0000000000000000.\n-// max(|f - f_GSL|): 5.5511151231257827e-17\n-// max(|f - f_GSL| / |f_GSL|): 2.7422040631145076e-16\n+// max(|f - f_GSL|): 5.5511151231257827e-17 at index 5\n+// max(|f - f_GSL| / |f_GSL|): 4.1133060946717609e-16\n+// mean(f - f_GSL): 9.1072982488782376e-19\n+// variance(f - f_GSL): 4.5951734844332747e-38\n+// stddev(f - f_GSL): 2.1436355764059512e-19\n const testcase_cyl_bessel_k<double>\n-data005[20] =\n+data011[20] =\n {\n-  { 3.7470259744407115, 1.0000000000000000, 0.25000000000000000 },\n-  { 1.6564411200033007, 1.0000000000000000, 0.50000000000000000 },\n-  { 0.94958046696214016, 1.0000000000000000, 0.75000000000000000 },\n-  { 0.60190723019723458, 1.0000000000000000, 1.0000000000000000 },\n-  { 0.40212407978419540, 1.0000000000000000, 1.2500000000000000 },\n-  { 0.27738780045684375, 1.0000000000000000, 1.5000000000000000 },\n-  { 0.19547745347439310, 1.0000000000000000, 1.7500000000000000 },\n-  { 0.13986588181652262, 1.0000000000000000, 2.0000000000000000 },\n-  { 0.10121630256832535, 1.0000000000000000, 2.2500000000000000 },\n-  { 0.073890816347747038, 1.0000000000000000, 2.5000000000000000 },\n-  { 0.054318522758919859, 1.0000000000000000, 2.7500000000000000 },\n-  { 0.040156431128194198, 1.0000000000000000, 3.0000000000000000 },\n-  { 0.029825529796040143, 1.0000000000000000, 3.2500000000000000 },\n-  { 0.022239392925923845, 1.0000000000000000, 3.5000000000000000 },\n-  { 0.016638191754688912, 1.0000000000000000, 3.7500000000000000 },\n-  { 0.012483498887268435, 1.0000000000000000, 4.0000000000000000 },\n-  { 0.0093896806560432589, 1.0000000000000000, 4.2500000000000000 },\n-  { 0.0070780949089680901, 1.0000000000000000, 4.5000000000000000 },\n-  { 0.0053459218178228390, 1.0000000000000000, 4.7500000000000000 },\n-  { 0.0040446134454521655, 1.0000000000000000, 5.0000000000000000 },\n+  { 3.7470259744407115, 1.0000000000000000, 0.25000000000000000, 0.0 },\n+  { 1.6564411200033007, 1.0000000000000000, 0.50000000000000000, 0.0 },\n+  { 0.94958046696214016, 1.0000000000000000, 0.75000000000000000, 0.0 },\n+  { 0.60190723019723458, 1.0000000000000000, 1.0000000000000000, 0.0 },\n+  { 0.40212407978419540, 1.0000000000000000, 1.2500000000000000, 0.0 },\n+  { 0.27738780045684375, 1.0000000000000000, 1.5000000000000000, 0.0 },\n+  { 0.19547745347439305, 1.0000000000000000, 1.7500000000000000, 0.0 },\n+  { 0.13986588181652262, 1.0000000000000000, 2.0000000000000000, 0.0 },\n+  { 0.10121630256832535, 1.0000000000000000, 2.2500000000000000, 0.0 },\n+  { 0.073890816347747038, 1.0000000000000000, 2.5000000000000000, 0.0 },\n+  { 0.054318522758919859, 1.0000000000000000, 2.7500000000000000, 0.0 },\n+  { 0.040156431128194198, 1.0000000000000000, 3.0000000000000000, 0.0 },\n+  { 0.029825529796040143, 1.0000000000000000, 3.2500000000000000, 0.0 },\n+  { 0.022239392925923845, 1.0000000000000000, 3.5000000000000000, 0.0 },\n+  { 0.016638191754688916, 1.0000000000000000, 3.7500000000000000, 0.0 },\n+  { 0.012483498887268437, 1.0000000000000000, 4.0000000000000000, 0.0 },\n+  { 0.0093896806560432589, 1.0000000000000000, 4.2500000000000000, 0.0 },\n+  { 0.0070780949089680918, 1.0000000000000000, 4.5000000000000000, 0.0 },\n+  { 0.0053459218178228390, 1.0000000000000000, 4.7500000000000000, 0.0 },\n+  { 0.0040446134454521655, 1.0000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler005 = 2.5000000000000020e-13;\n+const double toler011 = 2.5000000000000020e-13;\n \n // Test data for nu=2.0000000000000000.\n-// max(|f - f_GSL|): 3.5527136788005009e-15\n-// max(|f - f_GSL| / |f_GSL|): 1.9937716861613039e-16\n+// max(|f - f_GSL|): 3.5527136788005009e-15 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 3.2289213139335320e-16\n+// mean(f - f_GSL): -2.2187113257743364e-16\n+// variance(f - f_GSL): 2.7486114598283265e-33\n+// stddev(f - f_GSL): 5.2427201525814123e-17\n const testcase_cyl_bessel_k<double>\n-data006[20] =\n+data012[20] =\n {\n-  { 31.517714546773998, 2.0000000000000000, 0.25000000000000000 },\n-  { 7.5501835512408695, 2.0000000000000000, 0.50000000000000000 },\n-  { 3.1427970006821715, 2.0000000000000000, 0.75000000000000000 },\n-  { 1.6248388986351774, 2.0000000000000000, 1.0000000000000000 },\n-  { 0.94100161673881855, 2.0000000000000000, 1.2500000000000000 },\n-  { 0.58365596325665070, 2.0000000000000000, 1.5000000000000000 },\n-  { 0.37878261635733856, 2.0000000000000000, 1.7500000000000000 },\n-  { 0.25375975456605621, 2.0000000000000000, 2.0000000000000000 },\n-  { 0.17401315870205850, 2.0000000000000000, 2.2500000000000000 },\n-  { 0.12146020627856381, 2.0000000000000000, 2.5000000000000000 },\n-  { 0.085959281497066137, 2.0000000000000000, 2.7500000000000000 },\n-  { 0.061510458471742059, 2.0000000000000000, 3.0000000000000000 },\n-  { 0.044412927437333515, 2.0000000000000000, 3.2500000000000000 },\n-  { 0.032307121699467839, 2.0000000000000000, 3.5000000000000000 },\n-  { 0.023647953146296127, 2.0000000000000000, 3.7500000000000000 },\n-  { 0.017401425529487244, 2.0000000000000000, 4.0000000000000000 },\n-  { 0.012863060974445674, 2.0000000000000000, 4.2500000000000000 },\n-  { 0.0095456772027753475, 2.0000000000000000, 4.5000000000000000 },\n-  { 0.0071081190074975690, 2.0000000000000000, 4.7500000000000000 },\n-  { 0.0053089437122234608, 2.0000000000000000, 5.0000000000000000 },\n+  { 31.517714546773998, 2.0000000000000000, 0.25000000000000000, 0.0 },\n+  { 7.5501835512408695, 2.0000000000000000, 0.50000000000000000, 0.0 },\n+  { 3.1427970006821715, 2.0000000000000000, 0.75000000000000000, 0.0 },\n+  { 1.6248388986351774, 2.0000000000000000, 1.0000000000000000, 0.0 },\n+  { 0.94100161673881855, 2.0000000000000000, 1.2500000000000000, 0.0 },\n+  { 0.58365596325665070, 2.0000000000000000, 1.5000000000000000, 0.0 },\n+  { 0.37878261635733851, 2.0000000000000000, 1.7500000000000000, 0.0 },\n+  { 0.25375975456605621, 2.0000000000000000, 2.0000000000000000, 0.0 },\n+  { 0.17401315870205850, 2.0000000000000000, 2.2500000000000000, 0.0 },\n+  { 0.12146020627856381, 2.0000000000000000, 2.5000000000000000, 0.0 },\n+  { 0.085959281497066137, 2.0000000000000000, 2.7500000000000000, 0.0 },\n+  { 0.061510458471742059, 2.0000000000000000, 3.0000000000000000, 0.0 },\n+  { 0.044412927437333515, 2.0000000000000000, 3.2500000000000000, 0.0 },\n+  { 0.032307121699467839, 2.0000000000000000, 3.5000000000000000, 0.0 },\n+  { 0.023647953146296131, 2.0000000000000000, 3.7500000000000000, 0.0 },\n+  { 0.017401425529487247, 2.0000000000000000, 4.0000000000000000, 0.0 },\n+  { 0.012863060974445674, 2.0000000000000000, 4.2500000000000000, 0.0 },\n+  { 0.0095456772027753493, 2.0000000000000000, 4.5000000000000000, 0.0 },\n+  { 0.0071081190074975690, 2.0000000000000000, 4.7500000000000000, 0.0 },\n+  { 0.0053089437122234608, 2.0000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler006 = 2.5000000000000020e-13;\n+const double toler012 = 2.5000000000000020e-13;\n \n // Test data for nu=5.0000000000000000.\n-// max(|f - f_GSL|): 5.8207660913467407e-11\n-// max(|f - f_GSL| / |f_GSL|): 2.4867363835720159e-16\n+// max(|f - f_GSL|): 5.8207660913467407e-11 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 5.4133817134973930e-16\n+// mean(f - f_GSL): -3.0029749520377179e-12\n+// variance(f - f_GSL): 4.9960666134422494e-25\n+// stddev(f - f_GSL): 7.0682859403410163e-13\n const testcase_cyl_bessel_k<double>\n-data007[20] =\n+data013[20] =\n {\n-  { 391683.98962334893, 5.0000000000000000, 0.25000000000000000 },\n-  { 12097.979476096394, 5.0000000000000000, 0.50000000000000000 },\n-  { 1562.5870339691098, 5.0000000000000000, 0.75000000000000000 },\n-  { 360.96058960124066, 5.0000000000000000, 1.0000000000000000 },\n-  { 114.29321426334016, 5.0000000000000000, 1.2500000000000000 },\n-  { 44.067781159301056, 5.0000000000000000, 1.5000000000000000 },\n-  { 19.426568687730292, 5.0000000000000000, 1.7500000000000000 },\n-  { 9.4310491005964820, 5.0000000000000000, 2.0000000000000000 },\n-  { 4.9221270549918685, 5.0000000000000000, 2.2500000000000000 },\n-  { 2.7168842907865423, 5.0000000000000000, 2.5000000000000000 },\n-  { 1.5677685890536335, 5.0000000000000000, 2.7500000000000000 },\n-  { 0.93777360238680818, 5.0000000000000000, 3.0000000000000000 },\n-  { 0.57775534736785106, 5.0000000000000000, 3.2500000000000000 },\n-  { 0.36482440208451983, 5.0000000000000000, 3.5000000000000000 },\n-  { 0.23520290620082257, 5.0000000000000000, 3.7500000000000000 },\n-  { 0.15434254872599723, 5.0000000000000000, 4.0000000000000000 },\n-  { 0.10283347176876455, 5.0000000000000000, 4.2500000000000000 },\n-  { 0.069423643150881773, 5.0000000000000000, 4.5000000000000000 },\n-  { 0.047410616917942211, 5.0000000000000000, 4.7500000000000000 },\n-  { 0.032706273712031865, 5.0000000000000000, 5.0000000000000000 },\n+  { 391683.98962334893, 5.0000000000000000, 0.25000000000000000, 0.0 },\n+  { 12097.979476096394, 5.0000000000000000, 0.50000000000000000, 0.0 },\n+  { 1562.5870339691098, 5.0000000000000000, 0.75000000000000000, 0.0 },\n+  { 360.96058960124071, 5.0000000000000000, 1.0000000000000000, 0.0 },\n+  { 114.29321426334016, 5.0000000000000000, 1.2500000000000000, 0.0 },\n+  { 44.067781159301056, 5.0000000000000000, 1.5000000000000000, 0.0 },\n+  { 19.426568687730288, 5.0000000000000000, 1.7500000000000000, 0.0 },\n+  { 9.4310491005964820, 5.0000000000000000, 2.0000000000000000, 0.0 },\n+  { 4.9221270549918685, 5.0000000000000000, 2.2500000000000000, 0.0 },\n+  { 2.7168842907865423, 5.0000000000000000, 2.5000000000000000, 0.0 },\n+  { 1.5677685890536335, 5.0000000000000000, 2.7500000000000000, 0.0 },\n+  { 0.93777360238680818, 5.0000000000000000, 3.0000000000000000, 0.0 },\n+  { 0.57775534736785106, 5.0000000000000000, 3.2500000000000000, 0.0 },\n+  { 0.36482440208451983, 5.0000000000000000, 3.5000000000000000, 0.0 },\n+  { 0.23520290620082260, 5.0000000000000000, 3.7500000000000000, 0.0 },\n+  { 0.15434254872599726, 5.0000000000000000, 4.0000000000000000, 0.0 },\n+  { 0.10283347176876455, 5.0000000000000000, 4.2500000000000000, 0.0 },\n+  { 0.069423643150881773, 5.0000000000000000, 4.5000000000000000, 0.0 },\n+  { 0.047410616917942211, 5.0000000000000000, 4.7500000000000000, 0.0 },\n+  { 0.032706273712031865, 5.0000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler007 = 2.5000000000000020e-13;\n+const double toler013 = 2.5000000000000020e-13;\n \n // Test data for nu=10.000000000000000.\n-// max(|f - f_GSL|): 6.1035156250000000e-05\n+// max(|f - f_GSL|): 6.1035156250000000e-05 at index 1\n // max(|f - f_GSL| / |f_GSL|): 7.7998476565326393e-16\n+// mean(f - f_GSL): -3.0495557438392496e-06\n+// variance(f - f_GSL): 5.1522383752309128e-13\n+// stddev(f - f_GSL): 7.1779094277031061e-07\n const testcase_cyl_bessel_k<double>\n-data008[20] =\n+data014[20] =\n {\n-  { 194481817927839.88, 10.000000000000000, 0.25000000000000000 },\n-  { 188937569319.90030, 10.000000000000000, 0.50000000000000000 },\n-  { 3248187687.8018155, 10.000000000000000, 0.75000000000000000 },\n-  { 180713289.90102941, 10.000000000000000, 1.0000000000000000 },\n-  { 19104425.945252180, 10.000000000000000, 1.2500000000000000 },\n-  { 3027483.5236822353, 10.000000000000000, 1.5000000000000000 },\n-  { 633724.71555087867, 10.000000000000000, 1.7500000000000000 },\n-  { 162482.40397955943, 10.000000000000000, 2.0000000000000000 },\n-  { 48602.446087749791, 10.000000000000000, 2.2500000000000000 },\n-  { 16406.916416341937, 10.000000000000000, 2.5000000000000000 },\n-  { 6104.1720745909606, 10.000000000000000, 2.7500000000000000 },\n-  { 2459.6204220569480, 10.000000000000000, 3.0000000000000000 },\n-  { 1059.2358443703381, 10.000000000000000, 3.2500000000000000 },\n-  { 482.53582096664758, 10.000000000000000, 3.5000000000000000 },\n-  { 230.64249314993776, 10.000000000000000, 3.7500000000000000 },\n-  { 114.91408364049620, 10.000000000000000, 4.0000000000000000 },\n-  { 59.361613632706479, 10.000000000000000, 4.2500000000000000 },\n-  { 31.652958759229868, 10.000000000000000, 4.5000000000000000 },\n-  { 17.357723966417399, 10.000000000000000, 4.7500000000000000 },\n-  { 9.7585628291778121, 10.000000000000000, 5.0000000000000000 },\n+  { 194481817927839.88, 10.000000000000000, 0.25000000000000000, 0.0 },\n+  { 188937569319.90030, 10.000000000000000, 0.50000000000000000, 0.0 },\n+  { 3248187687.8018155, 10.000000000000000, 0.75000000000000000, 0.0 },\n+  { 180713289.90102944, 10.000000000000000, 1.0000000000000000, 0.0 },\n+  { 19104425.945252180, 10.000000000000000, 1.2500000000000000, 0.0 },\n+  { 3027483.5236822353, 10.000000000000000, 1.5000000000000000, 0.0 },\n+  { 633724.71555087867, 10.000000000000000, 1.7500000000000000, 0.0 },\n+  { 162482.40397955943, 10.000000000000000, 2.0000000000000000, 0.0 },\n+  { 48602.446087749791, 10.000000000000000, 2.2500000000000000, 0.0 },\n+  { 16406.916416341937, 10.000000000000000, 2.5000000000000000, 0.0 },\n+  { 6104.1720745909606, 10.000000000000000, 2.7500000000000000, 0.0 },\n+  { 2459.6204220569480, 10.000000000000000, 3.0000000000000000, 0.0 },\n+  { 1059.2358443703381, 10.000000000000000, 3.2500000000000000, 0.0 },\n+  { 482.53582096664758, 10.000000000000000, 3.5000000000000000, 0.0 },\n+  { 230.64249314993782, 10.000000000000000, 3.7500000000000000, 0.0 },\n+  { 114.91408364049623, 10.000000000000000, 4.0000000000000000, 0.0 },\n+  { 59.361613632706479, 10.000000000000000, 4.2500000000000000, 0.0 },\n+  { 31.652958759229872, 10.000000000000000, 4.5000000000000000, 0.0 },\n+  { 17.357723966417399, 10.000000000000000, 4.7500000000000000, 0.0 },\n+  { 9.7585628291778121, 10.000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler008 = 2.5000000000000020e-13;\n+const double toler014 = 2.5000000000000020e-13;\n \n // Test data for nu=20.000000000000000.\n-// max(|f - f_GSL|): 2.7670116110564327e+19\n+// max(|f - f_GSL|): 2.7670116110564327e+19 at index 0\n // max(|f - f_GSL| / |f_GSL|): 1.2737005853777639e-15\n+// mean(f - f_GSL): -1.3835066851362150e+18\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_cyl_bessel_k<double>\n-data009[20] =\n+data015[20] =\n {\n-  { 7.0065983661641184e+34, 20.000000000000000, 0.25000000000000000 },\n-  { 6.6655498744171593e+28, 20.000000000000000, 0.50000000000000000 },\n-  { 1.9962989615380379e+25, 20.000000000000000, 0.75000000000000000 },\n-  { 6.2943693604245335e+22, 20.000000000000000, 1.0000000000000000 },\n-  { 7.2034511920074182e+20, 20.000000000000000, 1.2500000000000000 },\n-  { 1.8620549984645546e+19, 20.000000000000000, 1.5000000000000000 },\n-  { 8.4415605303952486e+17, 20.000000000000000, 1.7500000000000000 },\n-  { 57708568527002520., 20.000000000000000, 2.0000000000000000 },\n-  { 5396824209986879.0, 20.000000000000000, 2.2500000000000000 },\n-  { 645996884063683.62, 20.000000000000000, 2.5000000000000000 },\n-  { 94387401970996.328, 20.000000000000000, 2.7500000000000000 },\n-  { 16254643952204.371, 20.000000000000000, 3.0000000000000000 },\n-  { 3212694836166.4053, 20.000000000000000, 3.2500000000000000 },\n-  { 713857897923.74072, 20.000000000000000, 3.5000000000000000 },\n-  { 175423421958.35925, 20.000000000000000, 3.7500000000000000 },\n-  { 47050078926.298080, 20.000000000000000, 4.0000000000000000 },\n-  { 13625066095.067503, 20.000000000000000, 4.2500000000000000 },\n-  { 4222179870.6810656, 20.000000000000000, 4.5000000000000000 },\n-  { 1389634112.7516634, 20.000000000000000, 4.7500000000000000 },\n-  { 482700052.06214869, 20.000000000000000, 5.0000000000000000 },\n+  { 7.0065983661641184e+34, 20.000000000000000, 0.25000000000000000, 0.0 },\n+  { 6.6655498744171593e+28, 20.000000000000000, 0.50000000000000000, 0.0 },\n+  { 1.9962989615380379e+25, 20.000000000000000, 0.75000000000000000, 0.0 },\n+  { 6.2943693604245335e+22, 20.000000000000000, 1.0000000000000000, 0.0 },\n+  { 7.2034511920074182e+20, 20.000000000000000, 1.2500000000000000, 0.0 },\n+  { 1.8620549984645546e+19, 20.000000000000000, 1.5000000000000000, 0.0 },\n+  { 8.4415605303952486e+17, 20.000000000000000, 1.7500000000000000, 0.0 },\n+  { 57708568527002520., 20.000000000000000, 2.0000000000000000, 0.0 },\n+  { 5396824209986879.0, 20.000000000000000, 2.2500000000000000, 0.0 },\n+  { 645996884063683.62, 20.000000000000000, 2.5000000000000000, 0.0 },\n+  { 94387401970996.328, 20.000000000000000, 2.7500000000000000, 0.0 },\n+  { 16254643952204.371, 20.000000000000000, 3.0000000000000000, 0.0 },\n+  { 3212694836166.4053, 20.000000000000000, 3.2500000000000000, 0.0 },\n+  { 713857897923.74072, 20.000000000000000, 3.5000000000000000, 0.0 },\n+  { 175423421958.35925, 20.000000000000000, 3.7500000000000000, 0.0 },\n+  { 47050078926.298088, 20.000000000000000, 4.0000000000000000, 0.0 },\n+  { 13625066095.067503, 20.000000000000000, 4.2500000000000000, 0.0 },\n+  { 4222179870.6810660, 20.000000000000000, 4.5000000000000000, 0.0 },\n+  { 1389634112.7516634, 20.000000000000000, 4.7500000000000000, 0.0 },\n+  { 482700052.06214869, 20.000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler009 = 2.5000000000000020e-13;\n+const double toler015 = 2.5000000000000020e-13;\n \n // Test data for nu=50.000000000000000.\n-// max(|f - f_GSL|): 3.9111090745622133e+92\n+// max(|f - f_GSL|): 3.9111090745622133e+92 at index 0\n // max(|f - f_GSL| / |f_GSL|): 3.7220730535457535e-15\n+// mean(f - f_GSL): -1.9555545372811066e+91\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_cyl_bessel_k<double>\n-data010[20] =\n+data016[20] =\n {\n-  { 4.3394604622138714e+107, 50.000000000000000, 0.25000000000000000 },\n-  { 3.8505298918269003e+92, 50.000000000000000, 0.50000000000000000 },\n-  { 6.0292756894842793e+83, 50.000000000000000, 0.75000000000000000 },\n-  { 3.4068968541616991e+77, 50.000000000000000, 1.0000000000000000 },\n-  { 4.8485527365039051e+72, 50.000000000000000, 1.2500000000000000 },\n-  { 5.3091717574907920e+68, 50.000000000000000, 1.5000000000000000 },\n-  { 2.3762245257445824e+65, 50.000000000000000, 1.7500000000000000 },\n-  { 2.9799817396049268e+62, 50.000000000000000, 2.0000000000000000 },\n-  { 8.2079431233488581e+59, 50.000000000000000, 2.2500000000000000 },\n-  { 4.2046528212987503e+57, 50.000000000000000, 2.5000000000000000 },\n-  { 3.5578676911884825e+55, 50.000000000000000, 2.7500000000000000 },\n-  { 4.5559542293221535e+53, 50.000000000000000, 3.0000000000000000 },\n-  { 8.2606735967628997e+51, 50.000000000000000, 3.2500000000000000 },\n-  { 2.0139406747903812e+50, 50.000000000000000, 3.5000000000000000 },\n-  { 6.3368727837484600e+48, 50.000000000000000, 3.7500000000000000 },\n-  { 2.4897317389325753e+47, 50.000000000000000, 4.0000000000000000 },\n-  { 1.1888958173039699e+46, 50.000000000000000, 4.2500000000000000 },\n-  { 6.7472593648148542e+44, 50.000000000000000, 4.5000000000000000 },\n-  { 4.4664266585930700e+43, 50.000000000000000, 4.7500000000000000 },\n-  { 3.3943222434301628e+42, 50.000000000000000, 5.0000000000000000 },\n+  { 4.3394604622138714e+107, 50.000000000000000, 0.25000000000000000, 0.0 },\n+  { 3.8505298918269003e+92, 50.000000000000000, 0.50000000000000000, 0.0 },\n+  { 6.0292756894842793e+83, 50.000000000000000, 0.75000000000000000, 0.0 },\n+  { 3.4068968541617001e+77, 50.000000000000000, 1.0000000000000000, 0.0 },\n+  { 4.8485527365039051e+72, 50.000000000000000, 1.2500000000000000, 0.0 },\n+  { 5.3091717574907920e+68, 50.000000000000000, 1.5000000000000000, 0.0 },\n+  { 2.3762245257445824e+65, 50.000000000000000, 1.7500000000000000, 0.0 },\n+  { 2.9799817396049268e+62, 50.000000000000000, 2.0000000000000000, 0.0 },\n+  { 8.2079431233488581e+59, 50.000000000000000, 2.2500000000000000, 0.0 },\n+  { 4.2046528212987503e+57, 50.000000000000000, 2.5000000000000000, 0.0 },\n+  { 3.5578676911884825e+55, 50.000000000000000, 2.7500000000000000, 0.0 },\n+  { 4.5559542293221535e+53, 50.000000000000000, 3.0000000000000000, 0.0 },\n+  { 8.2606735967628997e+51, 50.000000000000000, 3.2500000000000000, 0.0 },\n+  { 2.0139406747903812e+50, 50.000000000000000, 3.5000000000000000, 0.0 },\n+  { 6.3368727837484613e+48, 50.000000000000000, 3.7500000000000000, 0.0 },\n+  { 2.4897317389325757e+47, 50.000000000000000, 4.0000000000000000, 0.0 },\n+  { 1.1888958173039699e+46, 50.000000000000000, 4.2500000000000000, 0.0 },\n+  { 6.7472593648148550e+44, 50.000000000000000, 4.5000000000000000, 0.0 },\n+  { 4.4664266585930700e+43, 50.000000000000000, 4.7500000000000000, 0.0 },\n+  { 3.3943222434301628e+42, 50.000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler010 = 2.5000000000000020e-13;\n+const double toler016 = 2.5000000000000020e-13;\n \n // Test data for nu=100.00000000000000.\n-// max(|f - f_GSL|): 8.5970689361151757e+232\n+// max(|f - f_GSL|): 8.5970689361151757e+232 at index 0\n // max(|f - f_GSL| / |f_GSL|): 9.0457919481999128e-14\n+// mean(f - f_GSL): -4.2985344680575876e+231\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_cyl_bessel_k<double>\n-data011[20] =\n+data017[20] =\n {\n-  { 9.5039428115809898e+245, 100.00000000000000, 0.25000000000000000 },\n-  { 7.4937399313533112e+215, 100.00000000000000, 0.50000000000000000 },\n-  { 1.8417471020730701e+198, 100.00000000000000, 0.75000000000000000 },\n-  { 5.9003331836386410e+185, 100.00000000000000, 1.0000000000000000 },\n-  { 1.2002130935576950e+176, 100.00000000000000, 1.2500000000000000 },\n-  { 1.4467044226487075e+168, 100.00000000000000, 1.5000000000000000 },\n-  { 2.9161498411497642e+161, 100.00000000000000, 1.7500000000000000 },\n-  { 4.6194159776013925e+155, 100.00000000000000, 2.0000000000000000 },\n-  { 3.5332121583541727e+150, 100.00000000000000, 2.2500000000000000 },\n-  { 9.3566097231039940e+145, 100.00000000000000, 2.5000000000000000 },\n-  { 6.7672283615134532e+141, 100.00000000000000, 2.7500000000000000 },\n-  { 1.1219630864949494e+138, 100.00000000000000, 3.0000000000000000 },\n-  { 3.7329723699990903e+134, 100.00000000000000, 3.2500000000000000 },\n-  { 2.2476893883855163e+131, 100.00000000000000, 3.5000000000000000 },\n-  { 2.2564559319883196e+128, 100.00000000000000, 3.7500000000000000 },\n-  { 3.5353340499626455e+125, 100.00000000000000, 4.0000000000000000 },\n-  { 8.1898439213010234e+122, 100.00000000000000, 4.2500000000000000 },\n-  { 2.6823744110726800e+120, 100.00000000000000, 4.5000000000000000 },\n-  { 1.1963963615212274e+118, 100.00000000000000, 4.7500000000000000 },\n-  { 7.0398601930616815e+115, 100.00000000000000, 5.0000000000000000 },\n+  { 9.5039428115809898e+245, 100.00000000000000, 0.25000000000000000, 0.0 },\n+  { 7.4937399313533112e+215, 100.00000000000000, 0.50000000000000000, 0.0 },\n+  { 1.8417471020730699e+198, 100.00000000000000, 0.75000000000000000, 0.0 },\n+  { 5.9003331836386410e+185, 100.00000000000000, 1.0000000000000000, 0.0 },\n+  { 1.2002130935576950e+176, 100.00000000000000, 1.2500000000000000, 0.0 },\n+  { 1.4467044226487075e+168, 100.00000000000000, 1.5000000000000000, 0.0 },\n+  { 2.9161498411497642e+161, 100.00000000000000, 1.7500000000000000, 0.0 },\n+  { 4.6194159776013925e+155, 100.00000000000000, 2.0000000000000000, 0.0 },\n+  { 3.5332121583541727e+150, 100.00000000000000, 2.2500000000000000, 0.0 },\n+  { 9.3566097231039940e+145, 100.00000000000000, 2.5000000000000000, 0.0 },\n+  { 6.7672283615134532e+141, 100.00000000000000, 2.7500000000000000, 0.0 },\n+  { 1.1219630864949494e+138, 100.00000000000000, 3.0000000000000000, 0.0 },\n+  { 3.7329723699990903e+134, 100.00000000000000, 3.2500000000000000, 0.0 },\n+  { 2.2476893883855163e+131, 100.00000000000000, 3.5000000000000000, 0.0 },\n+  { 2.2564559319883200e+128, 100.00000000000000, 3.7500000000000000, 0.0 },\n+  { 3.5353340499626463e+125, 100.00000000000000, 4.0000000000000000, 0.0 },\n+  { 8.1898439213010234e+122, 100.00000000000000, 4.2500000000000000, 0.0 },\n+  { 2.6823744110726800e+120, 100.00000000000000, 4.5000000000000000, 0.0 },\n+  { 1.1963963615212274e+118, 100.00000000000000, 4.7500000000000000, 0.0 },\n+  { 7.0398601930616815e+115, 100.00000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler011 = 5.0000000000000029e-12;\n+const double toler017 = 5.0000000000000029e-12;\n //  cyl_bessel_k\n \n // Test data for nu=0.0000000000000000.\n-// max(|f - f_GSL|): 4.3368086899420177e-19\n-// max(|f - f_GSL| / |f_GSL|): 1.8009631353873430e-16\n+// max(|f - f_GSL|): 4.3368086899420177e-19 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 2.3318588132773140e-16\n+// mean(f - f_GSL): 2.1684048659978596e-20\n+// variance(f - f_GSL): 2.6049748824837649e-41\n+// stddev(f - f_GSL): 5.1038954559079328e-21\n const testcase_cyl_bessel_k<double>\n-data012[20] =\n+data018[20] =\n {\n-  { 0.0036910983340425947, 0.0000000000000000, 5.0000000000000000 },\n-  { 1.7780062316167650e-05, 0.0000000000000000, 10.000000000000000 },\n-  { 9.8195364823964333e-08, 0.0000000000000000, 15.000000000000000 },\n-  { 5.7412378153365238e-10, 0.0000000000000000, 20.000000000000000 },\n-  { 3.4641615622131151e-12, 0.0000000000000000, 25.000000000000000 },\n-  { 2.1324774964630566e-14, 0.0000000000000000, 30.000000000000000 },\n-  { 1.3310351491429464e-16, 0.0000000000000000, 35.000000000000000 },\n-  { 8.3928611000995700e-19, 0.0000000000000000, 40.000000000000000 },\n-  { 5.3334561226187247e-21, 0.0000000000000000, 45.000000000000000 },\n-  { 3.4101677497894956e-23, 0.0000000000000000, 50.000000000000000 },\n-  { 2.1913102183534147e-25, 0.0000000000000000, 55.000000000000000 },\n-  { 1.4138978405591074e-27, 0.0000000000000000, 60.000000000000000 },\n-  { 9.1544673210030045e-30, 0.0000000000000000, 65.000000000000000 },\n-  { 5.9446613372925013e-32, 0.0000000000000000, 70.000000000000000 },\n-  { 3.8701170455869113e-34, 0.0000000000000000, 75.000000000000000 },\n-  { 2.5251198425054723e-36, 0.0000000000000000, 80.000000000000000 },\n-  { 1.6507623579783908e-38, 0.0000000000000000, 85.000000000000000 },\n-  { 1.0810242556984256e-40, 0.0000000000000000, 90.000000000000000 },\n-  { 7.0901249699001278e-43, 0.0000000000000000, 95.000000000000000 },\n-  { 4.6566282291759032e-45, 0.0000000000000000, 100.00000000000000 },\n+  { 0.0036910983340425947, 0.0000000000000000, 5.0000000000000000, 0.0 },\n+  { 1.7780062316167647e-05, 0.0000000000000000, 10.000000000000000, 0.0 },\n+  { 9.8195364823964333e-08, 0.0000000000000000, 15.000000000000000, 0.0 },\n+  { 5.7412378153365238e-10, 0.0000000000000000, 20.000000000000000, 0.0 },\n+  { 3.4641615622131151e-12, 0.0000000000000000, 25.000000000000000, 0.0 },\n+  { 2.1324774964630566e-14, 0.0000000000000000, 30.000000000000000, 0.0 },\n+  { 1.3310351491429464e-16, 0.0000000000000000, 35.000000000000000, 0.0 },\n+  { 8.3928611000995700e-19, 0.0000000000000000, 40.000000000000000, 0.0 },\n+  { 5.3334561226187247e-21, 0.0000000000000000, 45.000000000000000, 0.0 },\n+  { 3.4101677497894956e-23, 0.0000000000000000, 50.000000000000000, 0.0 },\n+  { 2.1913102183534147e-25, 0.0000000000000000, 55.000000000000000, 0.0 },\n+  { 1.4138978405591074e-27, 0.0000000000000000, 60.000000000000000, 0.0 },\n+  { 9.1544673210030045e-30, 0.0000000000000000, 65.000000000000000, 0.0 },\n+  { 5.9446613372925013e-32, 0.0000000000000000, 70.000000000000000, 0.0 },\n+  { 3.8701170455869113e-34, 0.0000000000000000, 75.000000000000000, 0.0 },\n+  { 2.5251198425054720e-36, 0.0000000000000000, 80.000000000000000, 0.0 },\n+  { 1.6507623579783908e-38, 0.0000000000000000, 85.000000000000000, 0.0 },\n+  { 1.0810242556984256e-40, 0.0000000000000000, 90.000000000000000, 0.0 },\n+  { 7.0901249699001278e-43, 0.0000000000000000, 95.000000000000000, 0.0 },\n+  { 4.6566282291759025e-45, 0.0000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler012 = 2.5000000000000020e-13;\n+const double toler018 = 2.5000000000000020e-13;\n \n // Test data for nu=0.33333333333333331.\n-// max(|f - f_GSL|): 1.0339757656912846e-25\n-// max(|f - f_GSL| / |f_GSL|): 1.7960859646361972e-16\n+// max(|f - f_GSL|): 1.0339757656912846e-25 at index 3\n+// max(|f - f_GSL| / |f_GSL|): 2.3267819230578392e-16\n+// mean(f - f_GSL): 5.2104262741326337e-27\n+// variance(f - f_GSL): 1.5040743467131125e-54\n+// stddev(f - f_GSL): 1.2264070884959499e-27\n const testcase_cyl_bessel_k<double>\n-data013[20] =\n+data019[20] =\n {\n-  { 0.0037288750960535887, 0.33333333333333331, 5.0000000000000000 },\n-  { 1.7874608271055339e-05, 0.33333333333333331, 10.000000000000000 },\n-  { 9.8548341568798317e-08, 0.33333333333333331, 15.000000000000000 },\n-  { 5.7568278247790865e-10, 0.33333333333333331, 20.000000000000000 },\n-  { 3.4717201424907059e-12, 0.33333333333333331, 25.000000000000000 },\n-  { 2.1363664736611189e-14, 0.33333333333333331, 30.000000000000000 },\n-  { 1.3331202314165813e-16, 0.33333333333333331, 35.000000000000000 },\n-  { 8.4043837769480934e-19, 0.33333333333333331, 40.000000000000000 },\n-  { 5.3399731261024948e-21, 0.33333333333333331, 45.000000000000000 },\n-  { 3.4139217813583632e-23, 0.33333333333333331, 50.000000000000000 },\n-  { 2.1935050179185627e-25, 0.33333333333333331, 55.000000000000000 },\n-  { 1.4151968805623662e-27, 0.33333333333333331, 60.000000000000000 },\n-  { 9.1622357217019043e-30, 0.33333333333333331, 65.000000000000000 },\n-  { 5.9493479703461315e-32, 0.33333333333333331, 70.000000000000000 },\n-  { 3.8729660011055947e-34, 0.33333333333333331, 75.000000000000000 },\n-  { 2.5268631828013877e-36, 0.33333333333333331, 80.000000000000000 },\n-  { 1.6518353676138867e-38, 0.33333333333333331, 85.000000000000000 },\n-  { 1.0816880942511494e-40, 0.33333333333333331, 90.000000000000000 },\n-  { 7.0942508599231512e-43, 0.33333333333333331, 95.000000000000000 },\n-  { 4.6592031570213454e-45, 0.33333333333333331, 100.00000000000000 },\n+  { 0.0037288750960535887, 0.33333333333333331, 5.0000000000000000, 0.0 },\n+  { 1.7874608271055336e-05, 0.33333333333333331, 10.000000000000000, 0.0 },\n+  { 9.8548341568798317e-08, 0.33333333333333331, 15.000000000000000, 0.0 },\n+  { 5.7568278247790865e-10, 0.33333333333333331, 20.000000000000000, 0.0 },\n+  { 3.4717201424907059e-12, 0.33333333333333331, 25.000000000000000, 0.0 },\n+  { 2.1363664736611189e-14, 0.33333333333333331, 30.000000000000000, 0.0 },\n+  { 1.3331202314165813e-16, 0.33333333333333331, 35.000000000000000, 0.0 },\n+  { 8.4043837769480934e-19, 0.33333333333333331, 40.000000000000000, 0.0 },\n+  { 5.3399731261024948e-21, 0.33333333333333331, 45.000000000000000, 0.0 },\n+  { 3.4139217813583632e-23, 0.33333333333333331, 50.000000000000000, 0.0 },\n+  { 2.1935050179185627e-25, 0.33333333333333331, 55.000000000000000, 0.0 },\n+  { 1.4151968805623662e-27, 0.33333333333333331, 60.000000000000000, 0.0 },\n+  { 9.1622357217019043e-30, 0.33333333333333331, 65.000000000000000, 0.0 },\n+  { 5.9493479703461315e-32, 0.33333333333333331, 70.000000000000000, 0.0 },\n+  { 3.8729660011055947e-34, 0.33333333333333331, 75.000000000000000, 0.0 },\n+  { 2.5268631828013874e-36, 0.33333333333333331, 80.000000000000000, 0.0 },\n+  { 1.6518353676138867e-38, 0.33333333333333331, 85.000000000000000, 0.0 },\n+  { 1.0816880942511494e-40, 0.33333333333333331, 90.000000000000000, 0.0 },\n+  { 7.0942508599231512e-43, 0.33333333333333331, 95.000000000000000, 0.0 },\n+  { 4.6592031570213448e-45, 0.33333333333333331, 100.00000000000000, 0.0 },\n };\n-const double toler013 = 2.5000000000000020e-13;\n+const double toler019 = 2.5000000000000020e-13;\n \n // Test data for nu=0.50000000000000000.\n-// max(|f - f_GSL|): 1.5046327690525280e-36\n-// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 8.0779356694631609e-28 at index 4\n+// max(|f - f_GSL| / |f_GSL|): 2.3204515428965958e-16\n+// mean(f - f_GSL): 4.0547450415218674e-29\n+// variance(f - f_GSL): 9.1085636297762724e-59\n+// stddev(f - f_GSL): 9.5438795202874765e-30\n const testcase_cyl_bessel_k<double>\n-data014[20] =\n+data020[20] =\n {\n-  { 0.0037766133746428825, 0.50000000000000000, 5.0000000000000000 },\n-  { 1.7993478093705181e-05, 0.50000000000000000, 10.000000000000000 },\n-  { 9.8991312032877236e-08, 0.50000000000000000, 15.000000000000000 },\n-  { 5.7763739747074450e-10, 0.50000000000000000, 20.000000000000000 },\n-  { 3.4811912768406949e-12, 0.50000000000000000, 25.000000000000000 },\n-  { 2.1412375659560111e-14, 0.50000000000000000, 30.000000000000000 },\n-  { 1.3357311366035824e-16, 0.50000000000000000, 35.000000000000000 },\n-  { 8.4188091949489049e-19, 0.50000000000000000, 40.000000000000000 },\n-  { 5.3481305002517408e-21, 0.50000000000000000, 45.000000000000000 },\n-  { 3.4186200954570754e-23, 0.50000000000000000, 50.000000000000000 },\n-  { 2.1962515908772453e-25, 0.50000000000000000, 55.000000000000000 },\n-  { 1.4168223500353693e-27, 0.50000000000000000, 60.000000000000000 },\n-  { 9.1719554473256892e-30, 0.50000000000000000, 65.000000000000000 },\n-  { 5.9552114337788932e-32, 0.50000000000000000, 70.000000000000000 },\n-  { 3.8765301321409432e-34, 0.50000000000000000, 75.000000000000000 },\n-  { 2.5290440439442910e-36, 0.50000000000000000, 80.000000000000000 },\n-  { 1.6531776067605980e-38, 0.50000000000000000, 85.000000000000000 },\n-  { 1.0825184636529955e-40, 0.50000000000000000, 90.000000000000000 },\n-  { 7.0994115873258822e-43, 0.50000000000000000, 95.000000000000000 },\n-  { 4.6624238126346715e-45, 0.50000000000000000, 100.00000000000000 },\n+  { 0.0037766133746428825, 0.50000000000000000, 5.0000000000000000, 0.0 },\n+  { 1.7993478093705178e-05, 0.50000000000000000, 10.000000000000000, 0.0 },\n+  { 9.8991312032877236e-08, 0.50000000000000000, 15.000000000000000, 0.0 },\n+  { 5.7763739747074450e-10, 0.50000000000000000, 20.000000000000000, 0.0 },\n+  { 3.4811912768406949e-12, 0.50000000000000000, 25.000000000000000, 0.0 },\n+  { 2.1412375659560111e-14, 0.50000000000000000, 30.000000000000000, 0.0 },\n+  { 1.3357311366035824e-16, 0.50000000000000000, 35.000000000000000, 0.0 },\n+  { 8.4188091949489049e-19, 0.50000000000000000, 40.000000000000000, 0.0 },\n+  { 5.3481305002517408e-21, 0.50000000000000000, 45.000000000000000, 0.0 },\n+  { 3.4186200954570754e-23, 0.50000000000000000, 50.000000000000000, 0.0 },\n+  { 2.1962515908772453e-25, 0.50000000000000000, 55.000000000000000, 0.0 },\n+  { 1.4168223500353693e-27, 0.50000000000000000, 60.000000000000000, 0.0 },\n+  { 9.1719554473256892e-30, 0.50000000000000000, 65.000000000000000, 0.0 },\n+  { 5.9552114337788932e-32, 0.50000000000000000, 70.000000000000000, 0.0 },\n+  { 3.8765301321409432e-34, 0.50000000000000000, 75.000000000000000, 0.0 },\n+  { 2.5290440439442907e-36, 0.50000000000000000, 80.000000000000000, 0.0 },\n+  { 1.6531776067605980e-38, 0.50000000000000000, 85.000000000000000, 0.0 },\n+  { 1.0825184636529955e-40, 0.50000000000000000, 90.000000000000000, 0.0 },\n+  { 7.0994115873258822e-43, 0.50000000000000000, 95.000000000000000, 0.0 },\n+  { 4.6624238126346709e-45, 0.50000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler014 = 2.5000000000000020e-13;\n+const double toler020 = 2.5000000000000020e-13;\n \n // Test data for nu=0.66666666666666663.\n-// max(|f - f_GSL|): 4.3368086899420177e-19\n+// max(|f - f_GSL|): 4.3368086899420177e-19 at index 0\n // max(|f - f_GSL| / |f_GSL|): 3.5630695000470094e-16\n+// mean(f - f_GSL): -2.1684694793857957e-20\n+// variance(f - f_GSL): 2.6051301291012209e-41\n+// stddev(f - f_GSL): 5.1040475400423349e-21\n const testcase_cyl_bessel_k<double>\n-data015[20] =\n+data021[20] =\n {\n-  { 0.0038444246344968226, 0.66666666666666663, 5.0000000000000000 },\n-  { 1.8161187569530204e-05, 0.66666666666666663, 10.000000000000000 },\n-  { 9.9614751542305571e-08, 0.66666666666666663, 15.000000000000000 },\n-  { 5.8038484271925811e-10, 0.66666666666666663, 20.000000000000000 },\n-  { 3.4944937498488603e-12, 0.66666666666666663, 25.000000000000000 },\n-  { 2.1480755645577720e-14, 0.66666666666666663, 30.000000000000000 },\n-  { 1.3393949190152161e-16, 0.66666666666666663, 35.000000000000000 },\n-  { 8.4390460553642992e-19, 0.66666666666666663, 40.000000000000000 },\n-  { 5.3595716143622089e-21, 0.66666666666666663, 45.000000000000000 },\n-  { 3.4252085301433749e-23, 0.66666666666666663, 50.000000000000000 },\n-  { 2.2001025377982308e-25, 0.66666666666666663, 55.000000000000000 },\n-  { 1.4191011274172078e-27, 0.66666666666666663, 60.000000000000000 },\n-  { 9.1855803020269763e-30, 0.66666666666666663, 65.000000000000000 },\n-  { 5.9634299472578764e-32, 0.66666666666666663, 70.000000000000000 },\n-  { 3.8815254026478500e-34, 0.66666666666666663, 75.000000000000000 },\n-  { 2.5321003991943851e-36, 0.66666666666666663, 80.000000000000000 },\n-  { 1.6550585670593067e-38, 0.66666666666666663, 85.000000000000000 },\n-  { 1.0836820479428605e-40, 0.66666666666666663, 90.000000000000000 },\n-  { 7.1066428916285356e-43, 0.66666666666666663, 95.000000000000000 },\n-  { 4.6669364587280465e-45, 0.66666666666666663, 100.00000000000000 },\n+  { 0.0038444246344968226, 0.66666666666666663, 5.0000000000000000, 0.0 },\n+  { 1.8161187569530204e-05, 0.66666666666666663, 10.000000000000000, 0.0 },\n+  { 9.9614751542305571e-08, 0.66666666666666663, 15.000000000000000, 0.0 },\n+  { 5.8038484271925811e-10, 0.66666666666666663, 20.000000000000000, 0.0 },\n+  { 3.4944937498488603e-12, 0.66666666666666663, 25.000000000000000, 0.0 },\n+  { 2.1480755645577720e-14, 0.66666666666666663, 30.000000000000000, 0.0 },\n+  { 1.3393949190152161e-16, 0.66666666666666663, 35.000000000000000, 0.0 },\n+  { 8.4390460553642992e-19, 0.66666666666666663, 40.000000000000000, 0.0 },\n+  { 5.3595716143622089e-21, 0.66666666666666663, 45.000000000000000, 0.0 },\n+  { 3.4252085301433749e-23, 0.66666666666666663, 50.000000000000000, 0.0 },\n+  { 2.2001025377982308e-25, 0.66666666666666663, 55.000000000000000, 0.0 },\n+  { 1.4191011274172078e-27, 0.66666666666666663, 60.000000000000000, 0.0 },\n+  { 9.1855803020269763e-30, 0.66666666666666663, 65.000000000000000, 0.0 },\n+  { 5.9634299472578764e-32, 0.66666666666666663, 70.000000000000000, 0.0 },\n+  { 3.8815254026478500e-34, 0.66666666666666663, 75.000000000000000, 0.0 },\n+  { 2.5321003991943847e-36, 0.66666666666666663, 80.000000000000000, 0.0 },\n+  { 1.6550585670593067e-38, 0.66666666666666663, 85.000000000000000, 0.0 },\n+  { 1.0836820479428605e-40, 0.66666666666666663, 90.000000000000000, 0.0 },\n+  { 7.1066428916285356e-43, 0.66666666666666663, 95.000000000000000, 0.0 },\n+  { 4.6669364587280459e-45, 0.66666666666666663, 100.00000000000000, 0.0 },\n };\n-const double toler015 = 2.5000000000000020e-13;\n+const double toler021 = 2.5000000000000020e-13;\n \n // Test data for nu=1.0000000000000000.\n-// max(|f - f_GSL|): 1.0339757656912846e-25\n-// max(|f - f_GSL| / |f_GSL|): 2.9112857291682056e-16\n+// max(|f - f_GSL|): 1.0339757656912846e-25 at index 3\n+// max(|f - f_GSL| / |f_GSL|): 1.7575481510496439e-16\n+// mean(f - f_GSL): 5.1899158905965940e-27\n+// variance(f - f_GSL): 1.4922563408014978e-54\n+// stddev(f - f_GSL): 1.2215794451452995e-27\n const testcase_cyl_bessel_k<double>\n-data016[20] =\n+data022[20] =\n {\n-  { 0.0040446134454521655, 1.0000000000000000, 5.0000000000000000 },\n-  { 1.8648773453825582e-05, 1.0000000000000000, 10.000000000000000 },\n-  { 1.0141729369762091e-07, 1.0000000000000000, 15.000000000000000 },\n-  { 5.8830579695570384e-10, 1.0000000000000000, 20.000000000000000 },\n-  { 3.5327780731999345e-12, 1.0000000000000000, 25.000000000000000 },\n-  { 2.1677320018915498e-14, 1.0000000000000000, 30.000000000000000 },\n-  { 1.3499178340011053e-16, 1.0000000000000000, 35.000000000000000 },\n-  { 8.4971319548610435e-19, 1.0000000000000000, 40.000000000000000 },\n-  { 5.3923945937225035e-21, 1.0000000000000000, 45.000000000000000 },\n-  { 3.4441022267175555e-23, 1.0000000000000000, 50.000000000000000 },\n-  { 2.2111422716117463e-25, 1.0000000000000000, 55.000000000000000 },\n-  { 1.4256320265171041e-27, 1.0000000000000000, 60.000000000000000 },\n-  { 9.2246195278906156e-30, 1.0000000000000000, 65.000000000000000 },\n-  { 5.9869736739138550e-32, 1.0000000000000000, 70.000000000000000 },\n-  { 3.8958329467421912e-34, 1.0000000000000000, 75.000000000000000 },\n-  { 2.5408531275211708e-36, 1.0000000000000000, 80.000000000000000 },\n-  { 1.6604444948567571e-38, 1.0000000000000000, 85.000000000000000 },\n-  { 1.0870134457498335e-40, 1.0000000000000000, 90.000000000000000 },\n-  { 7.1273442329907240e-43, 1.0000000000000000, 95.000000000000000 },\n-  { 4.6798537356369101e-45, 1.0000000000000000, 100.00000000000000 },\n+  { 0.0040446134454521655, 1.0000000000000000, 5.0000000000000000, 0.0 },\n+  { 1.8648773453825579e-05, 1.0000000000000000, 10.000000000000000, 0.0 },\n+  { 1.0141729369762091e-07, 1.0000000000000000, 15.000000000000000, 0.0 },\n+  { 5.8830579695570384e-10, 1.0000000000000000, 20.000000000000000, 0.0 },\n+  { 3.5327780731999345e-12, 1.0000000000000000, 25.000000000000000, 0.0 },\n+  { 2.1677320018915498e-14, 1.0000000000000000, 30.000000000000000, 0.0 },\n+  { 1.3499178340011053e-16, 1.0000000000000000, 35.000000000000000, 0.0 },\n+  { 8.4971319548610435e-19, 1.0000000000000000, 40.000000000000000, 0.0 },\n+  { 5.3923945937225035e-21, 1.0000000000000000, 45.000000000000000, 0.0 },\n+  { 3.4441022267175555e-23, 1.0000000000000000, 50.000000000000000, 0.0 },\n+  { 2.2111422716117463e-25, 1.0000000000000000, 55.000000000000000, 0.0 },\n+  { 1.4256320265171041e-27, 1.0000000000000000, 60.000000000000000, 0.0 },\n+  { 9.2246195278906156e-30, 1.0000000000000000, 65.000000000000000, 0.0 },\n+  { 5.9869736739138550e-32, 1.0000000000000000, 70.000000000000000, 0.0 },\n+  { 3.8958329467421912e-34, 1.0000000000000000, 75.000000000000000, 0.0 },\n+  { 2.5408531275211705e-36, 1.0000000000000000, 80.000000000000000, 0.0 },\n+  { 1.6604444948567571e-38, 1.0000000000000000, 85.000000000000000, 0.0 },\n+  { 1.0870134457498335e-40, 1.0000000000000000, 90.000000000000000, 0.0 },\n+  { 7.1273442329907240e-43, 1.0000000000000000, 95.000000000000000, 0.0 },\n+  { 4.6798537356369088e-45, 1.0000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler016 = 2.5000000000000020e-13;\n+const double toler022 = 2.5000000000000020e-13;\n \n // Test data for nu=2.0000000000000000.\n-// max(|f - f_GSL|): 8.6736173798840355e-19\n-// max(|f - f_GSL| / |f_GSL|): 1.6337745981208381e-16\n+// max(|f - f_GSL|): 8.6736173798840355e-19 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 2.1559652446630200e-16\n+// mean(f - f_GSL): 4.3368092109689917e-20\n+// variance(f - f_GSL): 1.0419897026230187e-40\n+// stddev(f - f_GSL): 1.0207789685446202e-20\n const testcase_cyl_bessel_k<double>\n-data017[20] =\n+data023[20] =\n {\n-  { 0.0053089437122234608, 2.0000000000000000, 5.0000000000000000 },\n-  { 2.1509817006932767e-05, 2.0000000000000000, 10.000000000000000 },\n-  { 1.1171767065031378e-07, 2.0000000000000000, 15.000000000000000 },\n-  { 6.3295436122922281e-10, 2.0000000000000000, 20.000000000000000 },\n-  { 3.7467838080691102e-12, 2.0000000000000000, 25.000000000000000 },\n-  { 2.2769929632558265e-14, 2.0000000000000000, 30.000000000000000 },\n-  { 1.4081733110858665e-16, 2.0000000000000000, 35.000000000000000 },\n-  { 8.8177176978426223e-19, 2.0000000000000000, 40.000000000000000 },\n-  { 5.5731181045619470e-21, 2.0000000000000000, 45.000000000000000 },\n-  { 3.5479318388581979e-23, 2.0000000000000000, 50.000000000000000 },\n-  { 2.2717153918665688e-25, 2.0000000000000000, 55.000000000000000 },\n-  { 1.4614189081096777e-27, 2.0000000000000000, 60.000000000000000 },\n-  { 9.4383017680150234e-30, 2.0000000000000000, 65.000000000000000 },\n-  { 6.1157177279757537e-32, 2.0000000000000000, 70.000000000000000 },\n-  { 3.9740059241667034e-34, 2.0000000000000000, 75.000000000000000 },\n-  { 2.5886411706935015e-36, 2.0000000000000000, 80.000000000000000 },\n-  { 1.6898316402103142e-38, 2.0000000000000000, 85.000000000000000 },\n-  { 1.1051801100484218e-40, 2.0000000000000000, 90.000000000000000 },\n-  { 7.2401743221736176e-43, 2.0000000000000000, 95.000000000000000 },\n-  { 4.7502253038886413e-45, 2.0000000000000000, 100.00000000000000 },\n+  { 0.0053089437122234608, 2.0000000000000000, 5.0000000000000000, 0.0 },\n+  { 2.1509817006932763e-05, 2.0000000000000000, 10.000000000000000, 0.0 },\n+  { 1.1171767065031378e-07, 2.0000000000000000, 15.000000000000000, 0.0 },\n+  { 6.3295436122922281e-10, 2.0000000000000000, 20.000000000000000, 0.0 },\n+  { 3.7467838080691102e-12, 2.0000000000000000, 25.000000000000000, 0.0 },\n+  { 2.2769929632558265e-14, 2.0000000000000000, 30.000000000000000, 0.0 },\n+  { 1.4081733110858665e-16, 2.0000000000000000, 35.000000000000000, 0.0 },\n+  { 8.8177176978426223e-19, 2.0000000000000000, 40.000000000000000, 0.0 },\n+  { 5.5731181045619470e-21, 2.0000000000000000, 45.000000000000000, 0.0 },\n+  { 3.5479318388581979e-23, 2.0000000000000000, 50.000000000000000, 0.0 },\n+  { 2.2717153918665688e-25, 2.0000000000000000, 55.000000000000000, 0.0 },\n+  { 1.4614189081096777e-27, 2.0000000000000000, 60.000000000000000, 0.0 },\n+  { 9.4383017680150234e-30, 2.0000000000000000, 65.000000000000000, 0.0 },\n+  { 6.1157177279757537e-32, 2.0000000000000000, 70.000000000000000, 0.0 },\n+  { 3.9740059241667034e-34, 2.0000000000000000, 75.000000000000000, 0.0 },\n+  { 2.5886411706935012e-36, 2.0000000000000000, 80.000000000000000, 0.0 },\n+  { 1.6898316402103142e-38, 2.0000000000000000, 85.000000000000000, 0.0 },\n+  { 1.1051801100484218e-40, 2.0000000000000000, 90.000000000000000, 0.0 },\n+  { 7.2401743221736176e-43, 2.0000000000000000, 95.000000000000000, 0.0 },\n+  { 4.7502253038886407e-45, 2.0000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler017 = 2.5000000000000020e-13;\n+const double toler023 = 2.5000000000000020e-13;\n \n // Test data for nu=5.0000000000000000.\n-// max(|f - f_GSL|): 6.9388939039072284e-18\n-// max(|f - f_GSL| / |f_GSL|): 2.3552470349020973e-16\n+// max(|f - f_GSL|): 6.9388939039072284e-18 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 2.1215788643493719e-16\n+// mean(f - f_GSL): 3.4694602906449006e-19\n+// variance(f - f_GSL): 6.6687837719455956e-39\n+// stddev(f - f_GSL): 8.1662621632822905e-20\n const testcase_cyl_bessel_k<double>\n-data018[20] =\n+data024[20] =\n {\n-  { 0.032706273712031865, 5.0000000000000000, 5.0000000000000000 },\n-  { 5.7541849985312288e-05, 5.0000000000000000, 10.000000000000000 },\n-  { 2.1878261369258224e-07, 5.0000000000000000, 15.000000000000000 },\n-  { 1.0538660139974233e-09, 5.0000000000000000, 20.000000000000000 },\n-  { 5.6485921365284157e-12, 5.0000000000000000, 25.000000000000000 },\n-  { 3.2103335105890266e-14, 5.0000000000000000, 30.000000000000000 },\n-  { 1.8919208406439644e-16, 5.0000000000000000, 35.000000000000000 },\n-  { 1.1423814375953188e-18, 5.0000000000000000, 40.000000000000000 },\n-  { 7.0181216822204101e-21, 5.0000000000000000, 45.000000000000000 },\n-  { 4.3671822541009859e-23, 5.0000000000000000, 50.000000000000000 },\n-  { 2.7444967640357869e-25, 5.0000000000000000, 55.000000000000000 },\n-  { 1.7382232741886986e-27, 5.0000000000000000, 60.000000000000000 },\n-  { 1.1078474298959669e-29, 5.0000000000000000, 65.000000000000000 },\n-  { 7.0974537081794416e-32, 5.0000000000000000, 70.000000000000000 },\n-  { 4.5667269500061064e-34, 5.0000000000000000, 75.000000000000000 },\n-  { 2.9491764420206150e-36, 5.0000000000000000, 80.000000000000000 },\n-  { 1.9105685973117463e-38, 5.0000000000000000, 85.000000000000000 },\n-  { 1.2411034311592645e-40, 5.0000000000000000, 90.000000000000000 },\n-  { 8.0814211331379146e-43, 5.0000000000000000, 95.000000000000000 },\n-  { 5.2732561132929509e-45, 5.0000000000000000, 100.00000000000000 },\n+  { 0.032706273712031865, 5.0000000000000000, 5.0000000000000000, 0.0 },\n+  { 5.7541849985312275e-05, 5.0000000000000000, 10.000000000000000, 0.0 },\n+  { 2.1878261369258224e-07, 5.0000000000000000, 15.000000000000000, 0.0 },\n+  { 1.0538660139974233e-09, 5.0000000000000000, 20.000000000000000, 0.0 },\n+  { 5.6485921365284157e-12, 5.0000000000000000, 25.000000000000000, 0.0 },\n+  { 3.2103335105890266e-14, 5.0000000000000000, 30.000000000000000, 0.0 },\n+  { 1.8919208406439644e-16, 5.0000000000000000, 35.000000000000000, 0.0 },\n+  { 1.1423814375953188e-18, 5.0000000000000000, 40.000000000000000, 0.0 },\n+  { 7.0181216822204101e-21, 5.0000000000000000, 45.000000000000000, 0.0 },\n+  { 4.3671822541009859e-23, 5.0000000000000000, 50.000000000000000, 0.0 },\n+  { 2.7444967640357869e-25, 5.0000000000000000, 55.000000000000000, 0.0 },\n+  { 1.7382232741886986e-27, 5.0000000000000000, 60.000000000000000, 0.0 },\n+  { 1.1078474298959669e-29, 5.0000000000000000, 65.000000000000000, 0.0 },\n+  { 7.0974537081794416e-32, 5.0000000000000000, 70.000000000000000, 0.0 },\n+  { 4.5667269500061064e-34, 5.0000000000000000, 75.000000000000000, 0.0 },\n+  { 2.9491764420206146e-36, 5.0000000000000000, 80.000000000000000, 0.0 },\n+  { 1.9105685973117463e-38, 5.0000000000000000, 85.000000000000000, 0.0 },\n+  { 1.2411034311592645e-40, 5.0000000000000000, 90.000000000000000, 0.0 },\n+  { 8.0814211331379146e-43, 5.0000000000000000, 95.000000000000000, 0.0 },\n+  { 5.2732561132929503e-45, 5.0000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler018 = 2.5000000000000020e-13;\n+const double toler024 = 2.5000000000000020e-13;\n \n // Test data for nu=10.000000000000000.\n-// max(|f - f_GSL|): 5.3290705182007514e-15\n+// max(|f - f_GSL|): 5.3290705182007514e-15 at index 0\n // max(|f - f_GSL| / |f_GSL|): 5.4609173619982130e-16\n+// mean(f - f_GSL): 2.6646441036645034e-16\n+// variance(f - f_GSL): 3.9336998333484790e-33\n+// stddev(f - f_GSL): 6.2719214227766586e-17\n const testcase_cyl_bessel_k<double>\n-data019[20] =\n+data025[20] =\n {\n-  { 9.7585628291778121, 10.000000000000000, 5.0000000000000000 },\n-  { 0.0016142553003906700, 10.000000000000000, 10.000000000000000 },\n-  { 2.2605303776606435e-06, 10.000000000000000, 15.000000000000000 },\n-  { 6.3162145283215804e-09, 10.000000000000000, 20.000000000000000 },\n-  { 2.4076769602801233e-11, 10.000000000000000, 25.000000000000000 },\n-  { 1.0842816942222975e-13, 10.000000000000000, 30.000000000000000 },\n-  { 5.3976770429777191e-16, 10.000000000000000, 35.000000000000000 },\n-  { 2.8680293113671932e-18, 10.000000000000000, 40.000000000000000 },\n-  { 1.5939871900169600e-20, 10.000000000000000, 45.000000000000000 },\n-  { 9.1509882099879962e-23, 10.000000000000000, 50.000000000000000 },\n-  { 5.3823846249592858e-25, 10.000000000000000, 55.000000000000000 },\n-  { 3.2253408700563144e-27, 10.000000000000000, 60.000000000000000 },\n-  { 1.9613367530075138e-29, 10.000000000000000, 65.000000000000000 },\n-  { 1.2068471495933484e-31, 10.000000000000000, 70.000000000000000 },\n-  { 7.4979152649449644e-34, 10.000000000000000, 75.000000000000000 },\n-  { 4.6957285830490538e-36, 10.000000000000000, 80.000000000000000 },\n-  { 2.9606323347034079e-38, 10.000000000000000, 85.000000000000000 },\n-  { 1.8773542561131613e-40, 10.000000000000000, 90.000000000000000 },\n-  { 1.1962899527846350e-42, 10.000000000000000, 95.000000000000000 },\n-  { 7.6554279773881018e-45, 10.000000000000000, 100.00000000000000 },\n+  { 9.7585628291778121, 10.000000000000000, 5.0000000000000000, 0.0 },\n+  { 0.0016142553003906698, 10.000000000000000, 10.000000000000000, 0.0 },\n+  { 2.2605303776606435e-06, 10.000000000000000, 15.000000000000000, 0.0 },\n+  { 6.3162145283215804e-09, 10.000000000000000, 20.000000000000000, 0.0 },\n+  { 2.4076769602801233e-11, 10.000000000000000, 25.000000000000000, 0.0 },\n+  { 1.0842816942222975e-13, 10.000000000000000, 30.000000000000000, 0.0 },\n+  { 5.3976770429777191e-16, 10.000000000000000, 35.000000000000000, 0.0 },\n+  { 2.8680293113671932e-18, 10.000000000000000, 40.000000000000000, 0.0 },\n+  { 1.5939871900169600e-20, 10.000000000000000, 45.000000000000000, 0.0 },\n+  { 9.1509882099879962e-23, 10.000000000000000, 50.000000000000000, 0.0 },\n+  { 5.3823846249592858e-25, 10.000000000000000, 55.000000000000000, 0.0 },\n+  { 3.2253408700563144e-27, 10.000000000000000, 60.000000000000000, 0.0 },\n+  { 1.9613367530075138e-29, 10.000000000000000, 65.000000000000000, 0.0 },\n+  { 1.2068471495933484e-31, 10.000000000000000, 70.000000000000000, 0.0 },\n+  { 7.4979152649449644e-34, 10.000000000000000, 75.000000000000000, 0.0 },\n+  { 4.6957285830490531e-36, 10.000000000000000, 80.000000000000000, 0.0 },\n+  { 2.9606323347034079e-38, 10.000000000000000, 85.000000000000000, 0.0 },\n+  { 1.8773542561131613e-40, 10.000000000000000, 90.000000000000000, 0.0 },\n+  { 1.1962899527846350e-42, 10.000000000000000, 95.000000000000000, 0.0 },\n+  { 7.6554279773881006e-45, 10.000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler019 = 2.5000000000000020e-13;\n+const double toler025 = 2.5000000000000020e-13;\n \n // Test data for nu=20.000000000000000.\n-// max(|f - f_GSL|): 4.1723251342773438e-07\n+// max(|f - f_GSL|): 4.1723251342773438e-07 at index 0\n // max(|f - f_GSL| / |f_GSL|): 1.2224656515794909e-15\n+// mean(f - f_GSL): 2.0861629934990416e-08\n+// variance(f - f_GSL): 2.4111224573101845e-17\n+// stddev(f - f_GSL): 4.9103181743245358e-09\n const testcase_cyl_bessel_k<double>\n-data020[20] =\n+data026[20] =\n {\n-  { 482700052.06214869, 20.000000000000000, 5.0000000000000000 },\n-  { 178.74427820770546, 20.000000000000000, 10.000000000000000 },\n-  { 0.012141257729731143, 20.000000000000000, 15.000000000000000 },\n-  { 5.5431116361258155e-06, 20.000000000000000, 20.000000000000000 },\n-  { 6.3744029330352113e-09, 20.000000000000000, 25.000000000000000 },\n-  { 1.2304516475442478e-11, 20.000000000000000, 30.000000000000000 },\n-  { 3.2673136479809018e-14, 20.000000000000000, 35.000000000000000 },\n-  { 1.0703023799997383e-16, 20.000000000000000, 40.000000000000000 },\n-  { 4.0549953175660457e-19, 20.000000000000000, 45.000000000000000 },\n-  { 1.7061483797220349e-21, 20.000000000000000, 50.000000000000000 },\n-  { 7.7617008115659413e-24, 20.000000000000000, 55.000000000000000 },\n-  { 3.7482954006874720e-26, 20.000000000000000, 60.000000000000000 },\n-  { 1.8966880763956576e-28, 20.000000000000000, 65.000000000000000 },\n-  { 9.9615763479998864e-31, 20.000000000000000, 70.000000000000000 },\n-  { 5.3921623063091066e-33, 20.000000000000000, 75.000000000000000 },\n-  { 2.9920407657642272e-35, 20.000000000000000, 80.000000000000000 },\n-  { 1.6948662723618255e-37, 20.000000000000000, 85.000000000000000 },\n-  { 9.7689149642963042e-40, 20.000000000000000, 90.000000000000000 },\n-  { 5.7143603019220823e-42, 20.000000000000000, 95.000000000000000 },\n-  { 3.3852054148901700e-44, 20.000000000000000, 100.00000000000000 },\n+  { 482700052.06214869, 20.000000000000000, 5.0000000000000000, 0.0 },\n+  { 178.74427820770543, 20.000000000000000, 10.000000000000000, 0.0 },\n+  { 0.012141257729731143, 20.000000000000000, 15.000000000000000, 0.0 },\n+  { 5.5431116361258155e-06, 20.000000000000000, 20.000000000000000, 0.0 },\n+  { 6.3744029330352113e-09, 20.000000000000000, 25.000000000000000, 0.0 },\n+  { 1.2304516475442478e-11, 20.000000000000000, 30.000000000000000, 0.0 },\n+  { 3.2673136479809018e-14, 20.000000000000000, 35.000000000000000, 0.0 },\n+  { 1.0703023799997383e-16, 20.000000000000000, 40.000000000000000, 0.0 },\n+  { 4.0549953175660457e-19, 20.000000000000000, 45.000000000000000, 0.0 },\n+  { 1.7061483797220349e-21, 20.000000000000000, 50.000000000000000, 0.0 },\n+  { 7.7617008115659413e-24, 20.000000000000000, 55.000000000000000, 0.0 },\n+  { 3.7482954006874720e-26, 20.000000000000000, 60.000000000000000, 0.0 },\n+  { 1.8966880763956576e-28, 20.000000000000000, 65.000000000000000, 0.0 },\n+  { 9.9615763479998864e-31, 20.000000000000000, 70.000000000000000, 0.0 },\n+  { 5.3921623063091066e-33, 20.000000000000000, 75.000000000000000, 0.0 },\n+  { 2.9920407657642266e-35, 20.000000000000000, 80.000000000000000, 0.0 },\n+  { 1.6948662723618255e-37, 20.000000000000000, 85.000000000000000, 0.0 },\n+  { 9.7689149642963042e-40, 20.000000000000000, 90.000000000000000, 0.0 },\n+  { 5.7143603019220823e-42, 20.000000000000000, 95.000000000000000, 0.0 },\n+  { 3.3852054148901695e-44, 20.000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler020 = 2.5000000000000020e-13;\n+const double toler026 = 2.5000000000000020e-13;\n \n // Test data for nu=50.000000000000000.\n-// max(|f - f_GSL|): 8.6655802749976619e+27\n+// max(|f - f_GSL|): 8.6655802749976619e+27 at index 0\n // max(|f - f_GSL| / |f_GSL|): 2.6684549464729312e-15\n+// mean(f - f_GSL): 4.3327901374988334e+26\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_cyl_bessel_k<double>\n-data021[20] =\n+data027[20] =\n {\n-  { 3.3943222434301628e+42, 50.000000000000000, 5.0000000000000000 },\n-  { 2.0613737753892557e+27, 50.000000000000000, 10.000000000000000 },\n-  { 1.7267736974519188e+18, 50.000000000000000, 15.000000000000000 },\n-  { 411711209122.01788, 50.000000000000000, 20.000000000000000 },\n-  { 1972478.7419813874, 50.000000000000000, 25.000000000000000 },\n-  { 58.770686258007267, 50.000000000000000, 30.000000000000000 },\n-  { 0.0058659391182535178, 50.000000000000000, 35.000000000000000 },\n-  { 1.3634854128794101e-06, 50.000000000000000, 40.000000000000000 },\n-  { 5.8652396362160819e-10, 50.000000000000000, 45.000000000000000 },\n-  { 4.0060134766400893e-13, 50.000000000000000, 50.000000000000000 },\n-  { 3.9062324485711016e-16, 50.000000000000000, 55.000000000000000 },\n-  { 5.0389298085176510e-19, 50.000000000000000, 60.000000000000000 },\n-  { 8.1305344250110424e-22, 50.000000000000000, 65.000000000000000 },\n-  { 1.5732816234948991e-24, 50.000000000000000, 70.000000000000000 },\n-  { 3.5349854993874412e-27, 50.000000000000000, 75.000000000000000 },\n-  { 8.9940101003189485e-30, 50.000000000000000, 80.000000000000000 },\n-  { 2.5403205503080723e-32, 50.000000000000000, 85.000000000000000 },\n-  { 7.8397596486715721e-35, 50.000000000000000, 90.000000000000000 },\n-  { 2.6098900651329542e-37, 50.000000000000000, 95.000000000000000 },\n-  { 9.2745226536133258e-40, 50.000000000000000, 100.00000000000000 },\n+  { 3.3943222434301628e+42, 50.000000000000000, 5.0000000000000000, 0.0 },\n+  { 2.0613737753892554e+27, 50.000000000000000, 10.000000000000000, 0.0 },\n+  { 1.7267736974519188e+18, 50.000000000000000, 15.000000000000000, 0.0 },\n+  { 411711209122.01788, 50.000000000000000, 20.000000000000000, 0.0 },\n+  { 1972478.7419813874, 50.000000000000000, 25.000000000000000, 0.0 },\n+  { 58.770686258007267, 50.000000000000000, 30.000000000000000, 0.0 },\n+  { 0.0058659391182535178, 50.000000000000000, 35.000000000000000, 0.0 },\n+  { 1.3634854128794101e-06, 50.000000000000000, 40.000000000000000, 0.0 },\n+  { 5.8652396362160819e-10, 50.000000000000000, 45.000000000000000, 0.0 },\n+  { 4.0060134766400893e-13, 50.000000000000000, 50.000000000000000, 0.0 },\n+  { 3.9062324485711016e-16, 50.000000000000000, 55.000000000000000, 0.0 },\n+  { 5.0389298085176510e-19, 50.000000000000000, 60.000000000000000, 0.0 },\n+  { 8.1305344250110424e-22, 50.000000000000000, 65.000000000000000, 0.0 },\n+  { 1.5732816234948991e-24, 50.000000000000000, 70.000000000000000, 0.0 },\n+  { 3.5349854993874412e-27, 50.000000000000000, 75.000000000000000, 0.0 },\n+  { 8.9940101003189471e-30, 50.000000000000000, 80.000000000000000, 0.0 },\n+  { 2.5403205503080723e-32, 50.000000000000000, 85.000000000000000, 0.0 },\n+  { 7.8397596486715721e-35, 50.000000000000000, 90.000000000000000, 0.0 },\n+  { 2.6098900651329542e-37, 50.000000000000000, 95.000000000000000, 0.0 },\n+  { 9.2745226536133242e-40, 50.000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler021 = 2.5000000000000020e-13;\n+const double toler027 = 2.5000000000000020e-13;\n \n // Test data for nu=100.00000000000000.\n-// max(|f - f_GSL|): 3.4996011596528191e+101\n-// max(|f - f_GSL| / |f_GSL|): 4.9711230957426436e-15\n+// max(|f - f_GSL|): 3.4996011596528191e+101 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 5.1049818083452373e-15\n+// mean(f - f_GSL): 1.7498005798264095e+100\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_cyl_bessel_k<double>\n-data022[20] =\n+data028[20] =\n {\n-  { 7.0398601930616815e+115, 100.00000000000000, 5.0000000000000000 },\n-  { 4.5966740842695238e+85, 100.00000000000000, 10.000000000000000 },\n-  { 8.2565552242653946e+67, 100.00000000000000, 15.000000000000000 },\n-  { 1.7081356456876041e+55, 100.00000000000000, 20.000000000000000 },\n-  { 1.9858028128780610e+45, 100.00000000000000, 25.000000000000000 },\n-  { 1.2131584253026677e+37, 100.00000000000000, 30.000000000000000 },\n-  { 1.1016916354696688e+30, 100.00000000000000, 35.000000000000000 },\n-  { 7.0074023297775712e+23, 100.00000000000000, 40.000000000000000 },\n-  { 1.9236643958470894e+18, 100.00000000000000, 45.000000000000000 },\n-  { 16394035276269.250, 100.00000000000000, 50.000000000000000 },\n-  { 343254952.89495474, 100.00000000000000, 55.000000000000000 },\n-  { 14870.012754946298, 100.00000000000000, 60.000000000000000 },\n-  { 1.1708099078572216, 100.00000000000000, 65.000000000000000 },\n-  { 0.00015161193930722313, 100.00000000000000, 70.000000000000000 },\n-  { 2.9850234381623443e-08, 100.00000000000000, 75.000000000000000 },\n-  { 8.3928710724649129e-12, 100.00000000000000, 80.000000000000000 },\n-  { 3.2033435630927732e-15, 100.00000000000000, 85.000000000000000 },\n-  { 1.5922281431788096e-18, 100.00000000000000, 90.000000000000000 },\n-  { 9.9589454577674131e-22, 100.00000000000000, 95.000000000000000 },\n-  { 7.6171296304940840e-25, 100.00000000000000, 100.00000000000000 },\n+  { 7.0398601930616815e+115, 100.00000000000000, 5.0000000000000000, 0.0 },\n+  { 4.5966740842695231e+85, 100.00000000000000, 10.000000000000000, 0.0 },\n+  { 8.2565552242653946e+67, 100.00000000000000, 15.000000000000000, 0.0 },\n+  { 1.7081356456876041e+55, 100.00000000000000, 20.000000000000000, 0.0 },\n+  { 1.9858028128780610e+45, 100.00000000000000, 25.000000000000000, 0.0 },\n+  { 1.2131584253026677e+37, 100.00000000000000, 30.000000000000000, 0.0 },\n+  { 1.1016916354696688e+30, 100.00000000000000, 35.000000000000000, 0.0 },\n+  { 7.0074023297775712e+23, 100.00000000000000, 40.000000000000000, 0.0 },\n+  { 1.9236643958470894e+18, 100.00000000000000, 45.000000000000000, 0.0 },\n+  { 16394035276269.250, 100.00000000000000, 50.000000000000000, 0.0 },\n+  { 343254952.89495474, 100.00000000000000, 55.000000000000000, 0.0 },\n+  { 14870.012754946298, 100.00000000000000, 60.000000000000000, 0.0 },\n+  { 1.1708099078572216, 100.00000000000000, 65.000000000000000, 0.0 },\n+  { 0.00015161193930722313, 100.00000000000000, 70.000000000000000, 0.0 },\n+  { 2.9850234381623443e-08, 100.00000000000000, 75.000000000000000, 0.0 },\n+  { 8.3928710724649113e-12, 100.00000000000000, 80.000000000000000, 0.0 },\n+  { 3.2033435630927732e-15, 100.00000000000000, 85.000000000000000, 0.0 },\n+  { 1.5922281431788096e-18, 100.00000000000000, 90.000000000000000, 0.0 },\n+  { 9.9589454577674131e-22, 100.00000000000000, 95.000000000000000, 0.0 },\n+  { 7.6171296304940831e-25, 100.00000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler022 = 2.5000000000000020e-13;\n+const double toler028 = 5.0000000000000039e-13;\n \n-template<typename Tp, unsigned int Num>\n+template<typename Ret, unsigned int Num>\n   void\n-  test(const testcase_cyl_bessel_k<Tp> (&data)[Num], Tp toler)\n+  test(const testcase_cyl_bessel_k<Ret> (&data)[Num], Ret toler)\n   {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n+    bool test __attribute__((unused)) = true;\n+    const Ret eps = std::numeric_limits<Ret>::epsilon();\n+    Ret max_abs_diff = -Ret(1);\n+    Ret max_abs_frac = -Ret(1);\n     unsigned int num_datum = Num;\n     for (unsigned int i = 0; i < num_datum; ++i)\n       {\n-\tconst Tp f = std::cyl_bessel_k(data[i].nu, data[i].x);\n-\tconst Tp f0 = data[i].f0;\n-\tconst Tp diff = f - f0;\n+\tconst Ret f = std::cyl_bessel_k(data[i].nu, data[i].x);\n+\tconst Ret f0 = data[i].f0;\n+\tconst Ret diff = f - f0;\n \tif (std::abs(diff) > max_abs_diff)\n \t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n+\tif (std::abs(f0) > Ret(10) * eps\n+\t && std::abs(f) > Ret(10) * eps)\n \t  {\n-\t    const Tp frac = diff / f0;\n+\t    const Ret frac = diff / f0;\n \t    if (std::abs(frac) > max_abs_frac)\n \t      max_abs_frac = std::abs(frac);\n \t  }\n@@ -706,12 +772,6 @@ template<typename Tp, unsigned int Num>\n int\n main()\n {\n-  test(data001, toler001);\n-  test(data002, toler002);\n-  test(data003, toler003);\n-  test(data004, toler004);\n-  test(data005, toler005);\n-  test(data006, toler006);\n   test(data007, toler007);\n   test(data008, toler008);\n   test(data009, toler009);\n@@ -728,5 +788,11 @@ main()\n   test(data020, toler020);\n   test(data021, toler021);\n   test(data022, toler022);\n+  test(data023, toler023);\n+  test(data024, toler024);\n+  test(data025, toler025);\n+  test(data026, toler026);\n+  test(data027, toler027);\n+  test(data028, toler028);\n   return 0;\n }"}, {"sha": "23f339b4d57f9e1263eecb82b10e52d57e9098a6", "filename": "libstdc++-v3/testsuite/special_functions/10_cyl_neumann/check_value.cc", "status": "modified", "additions": 610, "deletions": 530, "changes": 1140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F10_cyl_neumann%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F10_cyl_neumann%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F10_cyl_neumann%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -37,651 +37,731 @@\n #endif\n #include <specfun_testcase.h>\n \n-\n // Test data for nu=0.0000000000000000.\n-// max(|f - f_GSL|): 1.6653345369377348e-16\n-// max(|f - f_GSL| / |f_GSL|): 2.6623873675138176e-15\n+// max(|f - f_GSL|): 9.9920072216264089e-16 at index 7\n+// max(|f - f_GSL| / |f_GSL|): 1.5769525176812613e-14\n+// mean(f - f_GSL): 1.7173762412170391e-17\n+// variance(f - f_GSL): 1.8144622474613909e-32\n+// stddev(f - f_GSL): 1.3470197650596635e-16\n const testcase_cyl_neumann<double>\n-data001[20] =\n+data007[20] =\n {\n-  { -0.93157302493005878, 0.0000000000000000, 0.25000000000000000 },\n-  { -0.44451873350670656, 0.0000000000000000, 0.50000000000000000 },\n-  { -0.13717276938577236, 0.0000000000000000, 0.75000000000000000 },\n-  { 0.088256964215676942, 0.0000000000000000, 1.0000000000000000 },\n-  { 0.25821685159454072, 0.0000000000000000, 1.2500000000000000 },\n-  { 0.38244892379775886, 0.0000000000000000, 1.5000000000000000 },\n-  { 0.46549262864690610, 0.0000000000000000, 1.7500000000000000 },\n-  { 0.51037567264974493, 0.0000000000000000, 2.0000000000000000 },\n-  { 0.52006476245727862, 0.0000000000000000, 2.2500000000000000 },\n-  { 0.49807035961523194, 0.0000000000000000, 2.5000000000000000 },\n-  { 0.44865872156913222, 0.0000000000000000, 2.7500000000000000 },\n-  { 0.37685001001279045, 0.0000000000000000, 3.0000000000000000 },\n-  { 0.28828690267308710, 0.0000000000000000, 3.2500000000000000 },\n-  { 0.18902194392082688, 0.0000000000000000, 3.5000000000000000 },\n-  { 0.085256756977362638, 0.0000000000000000, 3.7500000000000000 },\n-  { -0.016940739325064763, 0.0000000000000000, 4.0000000000000000 },\n-  { -0.11191885116160770, 0.0000000000000000, 4.2500000000000000 },\n-  { -0.19470500862950454, 0.0000000000000000, 4.5000000000000000 },\n-  { -0.26123250323497549, 0.0000000000000000, 4.7500000000000000 },\n-  { -0.30851762524903359, 0.0000000000000000, 5.0000000000000000 },\n+  { -0.93157302493005878, 0.0000000000000000, 0.25000000000000000, 0.0 },\n+  { -0.44451873350670656, 0.0000000000000000, 0.50000000000000000, 0.0 },\n+  { -0.13717276938577236, 0.0000000000000000, 0.75000000000000000, 0.0 },\n+  { 0.088256964215676942, 0.0000000000000000, 1.0000000000000000, 0.0 },\n+  { 0.25821685159454072, 0.0000000000000000, 1.2500000000000000, 0.0 },\n+  { 0.38244892379775886, 0.0000000000000000, 1.5000000000000000, 0.0 },\n+  { 0.46549262864690610, 0.0000000000000000, 1.7500000000000000, 0.0 },\n+  { 0.51037567264974493, 0.0000000000000000, 2.0000000000000000, 0.0 },\n+  { 0.52006476245727862, 0.0000000000000000, 2.2500000000000000, 0.0 },\n+  { 0.49807035961523194, 0.0000000000000000, 2.5000000000000000, 0.0 },\n+  { 0.44865872156913222, 0.0000000000000000, 2.7500000000000000, 0.0 },\n+  { 0.37685001001279045, 0.0000000000000000, 3.0000000000000000, 0.0 },\n+  { 0.28828690267308710, 0.0000000000000000, 3.2500000000000000, 0.0 },\n+  { 0.18902194392082688, 0.0000000000000000, 3.5000000000000000, 0.0 },\n+  { 0.085256756977362638, 0.0000000000000000, 3.7500000000000000, 0.0 },\n+  { -0.016940739325064763, 0.0000000000000000, 4.0000000000000000, 0.0 },\n+  { -0.11191885116160770, 0.0000000000000000, 4.2500000000000000, 0.0 },\n+  { -0.19470500862950454, 0.0000000000000000, 4.5000000000000000, 0.0 },\n+  { -0.26123250323497549, 0.0000000000000000, 4.7500000000000000, 0.0 },\n+  { -0.30851762524903359, 0.0000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler001 = 2.5000000000000020e-13;\n+const double toler007 = 1.0000000000000008e-12;\n \n // Test data for nu=0.33333333333333331.\n-// max(|f - f_GSL|): 5.8286708792820718e-16\n-// max(|f - f_GSL| / |f_GSL|): 1.7769445360534625e-14\n+// max(|f - f_GSL|): 1.7208456881689926e-15 at index 7\n+// max(|f - f_GSL| / |f_GSL|): 5.0141196309547185e-15\n+// mean(f - f_GSL): -1.8908485888147198e-17\n+// variance(f - f_GSL): 4.0002408539583433e-33\n+// stddev(f - f_GSL): 6.3247457292434642e-17\n const testcase_cyl_neumann<double>\n-data002[20] =\n+data008[20] =\n {\n-  { -1.3461842332051077, 0.33333333333333331, 0.25000000000000000 },\n-  { -0.84062782604337771, 0.33333333333333331, 0.50000000000000000 },\n-  { -0.52488281484097077, 0.33333333333333331, 0.75000000000000000 },\n-  { -0.27880164127599205, 0.33333333333333331, 1.0000000000000000 },\n-  { -0.074321349727836453, 0.33333333333333331, 1.2500000000000000 },\n-  { 0.096610087766627981, 0.33333333333333331, 1.5000000000000000 },\n-  { 0.23582564494922068, 0.33333333333333331, 1.7500000000000000 },\n-  { 0.34319996626034494, 0.33333333333333331, 2.0000000000000000 },\n-  { 0.41835668452349323, 0.33333333333333331, 2.2500000000000000 },\n-  { 0.46145947419129157, 0.33333333333333331, 2.5000000000000000 },\n-  { 0.47358926135786023, 0.33333333333333331, 2.7500000000000000 },\n-  { 0.45689303457230640, 0.33333333333333331, 3.0000000000000000 },\n-  { 0.41458485697347386, 0.33333333333333331, 3.2500000000000000 },\n-  { 0.35084133277859947, 0.33333333333333331, 3.5000000000000000 },\n-  { 0.27061914527820891, 0.33333333333333331, 3.7500000000000000 },\n-  { 0.17941676634394862, 0.33333333333333331, 4.0000000000000000 },\n-  { 0.083000434191526043, 0.33333333333333331, 4.2500000000000000 },\n-  { -0.012886361627105348, 0.33333333333333331, 4.5000000000000000 },\n-  { -0.10281143123935124, 0.33333333333333331, 4.7500000000000000 },\n-  { -0.18192321129343850, 0.33333333333333331, 5.0000000000000000 },\n+  { -1.3461842332051073, 0.33333333333333331, 0.25000000000000000, 0.0 },\n+  { -0.84062782604337771, 0.33333333333333331, 0.50000000000000000, 0.0 },\n+  { -0.52488281484097088, 0.33333333333333331, 0.75000000000000000, 0.0 },\n+  { -0.27880164127599216, 0.33333333333333331, 1.0000000000000000, 0.0 },\n+  { -0.074321349727836453, 0.33333333333333331, 1.2500000000000000, 0.0 },\n+  { 0.096610087766627981, 0.33333333333333331, 1.5000000000000000, 0.0 },\n+  { 0.23582564494922068, 0.33333333333333331, 1.7500000000000000, 0.0 },\n+  { 0.34319996626034494, 0.33333333333333331, 2.0000000000000000, 0.0 },\n+  { 0.41835668452349323, 0.33333333333333331, 2.2500000000000000, 0.0 },\n+  { 0.46145947419129157, 0.33333333333333331, 2.5000000000000000, 0.0 },\n+  { 0.47358926135786023, 0.33333333333333331, 2.7500000000000000, 0.0 },\n+  { 0.45689303457230640, 0.33333333333333331, 3.0000000000000000, 0.0 },\n+  { 0.41458485697347386, 0.33333333333333331, 3.2500000000000000, 0.0 },\n+  { 0.35084133277859947, 0.33333333333333331, 3.5000000000000000, 0.0 },\n+  { 0.27061914527820891, 0.33333333333333331, 3.7500000000000000, 0.0 },\n+  { 0.17941676634394862, 0.33333333333333331, 4.0000000000000000, 0.0 },\n+  { 0.083000434191526043, 0.33333333333333331, 4.2500000000000000, 0.0 },\n+  { -0.012886361627105348, 0.33333333333333331, 4.5000000000000000, 0.0 },\n+  { -0.10281143123935124, 0.33333333333333331, 4.7500000000000000, 0.0 },\n+  { -0.18192321129343850, 0.33333333333333331, 5.0000000000000000, 0.0 },\n };\n-const double toler002 = 1.0000000000000008e-12;\n+const double toler008 = 5.0000000000000039e-13;\n \n // Test data for nu=0.50000000000000000.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 5.7217850214577088e-15\n+// max(|f - f_GSL|): 5.5511151231257827e-16 at index 1\n+// max(|f - f_GSL| / |f_GSL|): 6.6252247616878728e-15\n+// mean(f - f_GSL): -8.0924850154318048e-17\n+// variance(f - f_GSL): 1.5661893379337934e-34\n+// stddev(f - f_GSL): 1.2514748650827124e-17\n const testcase_cyl_neumann<double>\n-data003[20] =\n+data009[20] =\n {\n-  { -1.5461605241060765, 0.50000000000000000, 0.25000000000000000 },\n-  { -0.99024588024340454, 0.50000000000000000, 0.50000000000000000 },\n-  { -0.67411792914454460, 0.50000000000000000, 0.75000000000000000 },\n-  { -0.43109886801837594, 0.50000000000000000, 1.0000000000000000 },\n-  { -0.22502969244466481, 0.50000000000000000, 1.2500000000000000 },\n-  { -0.046083165893097265, 0.50000000000000000, 1.5000000000000000 },\n-  { 0.10750804524368722, 0.50000000000000000, 1.7500000000000000 },\n-  { 0.23478571040624849, 0.50000000000000000, 2.0000000000000000 },\n-  { 0.33414002338271825, 0.50000000000000000, 2.2500000000000000 },\n-  { 0.40427830223905686, 0.50000000000000000, 2.5000000000000000 },\n-  { 0.44472115119490507, 0.50000000000000000, 2.7500000000000000 },\n-  { 0.45604882079463316, 0.50000000000000000, 3.0000000000000000 },\n-  { 0.43998859501924370, 0.50000000000000000, 3.2500000000000000 },\n-  { 0.39938682536304909, 0.50000000000000000, 3.5000000000000000 },\n-  { 0.33809163836693340, 0.50000000000000000, 3.7500000000000000 },\n-  { 0.26076607667717877, 0.50000000000000000, 4.0000000000000000 },\n-  { 0.17264962544644955, 0.50000000000000000, 4.2500000000000000 },\n-  { 0.079285862862978548, 0.50000000000000000, 4.5000000000000000 },\n-  { -0.013765943019498003, 0.50000000000000000, 4.7500000000000000 },\n-  { -0.10121770918510846, 0.50000000000000000, 5.0000000000000000 },\n+  { -1.5461605241060765, 0.50000000000000000, 0.25000000000000000, 0.0 },\n+  { -0.99024588024340454, 0.50000000000000000, 0.50000000000000000, 0.0 },\n+  { -0.67411792914454438, 0.50000000000000000, 0.75000000000000000, 0.0 },\n+  { -0.43109886801837571, 0.50000000000000000, 1.0000000000000000, 0.0 },\n+  { -0.22502969244466481, 0.50000000000000000, 1.2500000000000000, 0.0 },\n+  { -0.046083165893097265, 0.50000000000000000, 1.5000000000000000, 0.0 },\n+  { 0.10750804524368722, 0.50000000000000000, 1.7500000000000000, 0.0 },\n+  { 0.23478571040624849, 0.50000000000000000, 2.0000000000000000, 0.0 },\n+  { 0.33414002338271825, 0.50000000000000000, 2.2500000000000000, 0.0 },\n+  { 0.40427830223905686, 0.50000000000000000, 2.5000000000000000, 0.0 },\n+  { 0.44472115119490507, 0.50000000000000000, 2.7500000000000000, 0.0 },\n+  { 0.45604882079463316, 0.50000000000000000, 3.0000000000000000, 0.0 },\n+  { 0.43998859501924370, 0.50000000000000000, 3.2500000000000000, 0.0 },\n+  { 0.39938682536304909, 0.50000000000000000, 3.5000000000000000, 0.0 },\n+  { 0.33809163836693340, 0.50000000000000000, 3.7500000000000000, 0.0 },\n+  { 0.26076607667717877, 0.50000000000000000, 4.0000000000000000, 0.0 },\n+  { 0.17264962544644955, 0.50000000000000000, 4.2500000000000000, 0.0 },\n+  { 0.079285862862978548, 0.50000000000000000, 4.5000000000000000, 0.0 },\n+  { -0.013765943019498003, 0.50000000000000000, 4.7500000000000000, 0.0 },\n+  { -0.10121770918510846, 0.50000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler003 = 5.0000000000000039e-13;\n+const double toler009 = 5.0000000000000039e-13;\n \n // Test data for nu=0.66666666666666663.\n-// max(|f - f_GSL|): 1.4988010832439613e-15\n-// max(|f - f_GSL| / |f_GSL|): 6.3663053018318525e-15\n+// max(|f - f_GSL|): 1.0547118733938987e-15 at index 9\n+// max(|f - f_GSL| / |f_GSL|): 7.7816158152055799e-15\n+// mean(f - f_GSL): 1.0772632785815972e-16\n+// variance(f - f_GSL): 1.6340061794441914e-35\n+// stddev(f - f_GSL): 4.0422842297940791e-18\n const testcase_cyl_neumann<double>\n-data004[20] =\n+data010[20] =\n {\n-  { -1.8021638417426857, 0.66666666666666663, 0.25000000000000000 },\n-  { -1.1316060101031435, 0.66666666666666663, 0.50000000000000000 },\n-  { -0.80251156358450737, 0.66666666666666663, 0.75000000000000000 },\n-  { -0.56270321497463327, 0.66666666666666663, 1.0000000000000000 },\n-  { -0.36007453643432208, 0.66666666666666663, 1.2500000000000000 },\n-  { -0.18017937469615020, 0.66666666666666663, 1.5000000000000000 },\n-  { -0.019885608758103752, 0.66666666666666663, 1.7500000000000000 },\n-  { 0.11989345361903521, 0.66666666666666663, 2.0000000000000000 },\n-  { 0.23690889836358039, 0.66666666666666663, 2.2500000000000000 },\n-  { 0.32882045742954535, 0.66666666666666663, 2.5000000000000000 },\n-  { 0.39385133784531856, 0.66666666666666663, 2.7500000000000000 },\n-  { 0.43115101690935642, 0.66666666666666663, 3.0000000000000000 },\n-  { 0.44098127351445843, 0.66666666666666663, 3.2500000000000000 },\n-  { 0.42477631413456485, 0.66666666666666663, 3.5000000000000000 },\n-  { 0.38510384155620386, 0.66666666666666663, 3.7500000000000000 },\n-  { 0.32554526794354366, 0.66666666666666663, 4.0000000000000000 },\n-  { 0.25051080073878446, 0.66666666666666663, 4.2500000000000000 },\n-  { 0.16500507211842136, 0.66666666666666663, 4.5000000000000000 },\n-  { 0.074359649728861360, 0.66666666666666663, 4.7500000000000000 },\n-  { -0.016050662643389627, 0.66666666666666663, 5.0000000000000000 },\n+  { -1.8021638417426857, 0.66666666666666663, 0.25000000000000000, 0.0 },\n+  { -1.1316060101031435, 0.66666666666666663, 0.50000000000000000, 0.0 },\n+  { -0.80251156358450748, 0.66666666666666663, 0.75000000000000000, 0.0 },\n+  { -0.56270321497463327, 0.66666666666666663, 1.0000000000000000, 0.0 },\n+  { -0.36007453643432208, 0.66666666666666663, 1.2500000000000000, 0.0 },\n+  { -0.18017937469615020, 0.66666666666666663, 1.5000000000000000, 0.0 },\n+  { -0.019885608758103752, 0.66666666666666663, 1.7500000000000000, 0.0 },\n+  { 0.11989345361903521, 0.66666666666666663, 2.0000000000000000, 0.0 },\n+  { 0.23690889836358039, 0.66666666666666663, 2.2500000000000000, 0.0 },\n+  { 0.32882045742954535, 0.66666666666666663, 2.5000000000000000, 0.0 },\n+  { 0.39385133784531856, 0.66666666666666663, 2.7500000000000000, 0.0 },\n+  { 0.43115101690935642, 0.66666666666666663, 3.0000000000000000, 0.0 },\n+  { 0.44098127351445843, 0.66666666666666663, 3.2500000000000000, 0.0 },\n+  { 0.42477631413456485, 0.66666666666666663, 3.5000000000000000, 0.0 },\n+  { 0.38510384155620386, 0.66666666666666663, 3.7500000000000000, 0.0 },\n+  { 0.32554526794354366, 0.66666666666666663, 4.0000000000000000, 0.0 },\n+  { 0.25051080073878446, 0.66666666666666663, 4.2500000000000000, 0.0 },\n+  { 0.16500507211842136, 0.66666666666666663, 4.5000000000000000, 0.0 },\n+  { 0.074359649728861360, 0.66666666666666663, 4.7500000000000000, 0.0 },\n+  { -0.016050662643389627, 0.66666666666666663, 5.0000000000000000, 0.0 },\n };\n-const double toler004 = 5.0000000000000039e-13;\n+const double toler010 = 5.0000000000000039e-13;\n \n // Test data for nu=1.0000000000000000.\n-// max(|f - f_GSL|): 9.1593399531575415e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.3683879467319323e-14\n+// max(|f - f_GSL|): 8.5001450322863548e-16 at index 8\n+// max(|f - f_GSL| / |f_GSL|): 3.1259660869292553e-14\n+// mean(f - f_GSL): 8.2746309804093703e-17\n+// variance(f - f_GSL): 1.0590097247613155e-33\n+// stddev(f - f_GSL): 3.2542429607534157e-17\n const testcase_cyl_neumann<double>\n-data005[13] =\n+data011[20] =\n {\n-  { -0.10703243154093699, 1.0000000000000000, 2.0000000000000000 },\n-  { 0.027192057738017056, 1.0000000000000000, 2.2500000000000000 },\n-  { 0.14591813796678599, 1.0000000000000000, 2.5000000000000000 },\n-  { 0.24601900149738354, 1.0000000000000000, 2.7500000000000000 },\n-  { 0.32467442479180003, 1.0000000000000000, 3.0000000000000000 },\n-  { 0.37977777371708382, 1.0000000000000000, 3.2500000000000000 },\n-  { 0.41018841788751170, 1.0000000000000000, 3.5000000000000000 },\n-  { 0.41586877934522715, 1.0000000000000000, 3.7500000000000000 },\n-  { 0.39792571055709991, 1.0000000000000000, 4.0000000000000000 },\n-  { 0.35856889308385076, 1.0000000000000000, 4.2500000000000000 },\n-  { 0.30099732306965449, 1.0000000000000000, 4.5000000000000000 },\n-  { 0.22922559673872217, 1.0000000000000000, 4.7500000000000000 },\n-  { 0.14786314339122700, 1.0000000000000000, 5.0000000000000000 },\n+  { -2.7041052293152825, 1.0000000000000000, 0.25000000000000000, 0.0 },\n+  { -1.4714723926702433, 1.0000000000000000, 0.50000000000000000, 0.0 },\n+  { -1.0375945507692856, 1.0000000000000000, 0.75000000000000000, 0.0 },\n+  { -0.78121282130028891, 1.0000000000000000, 1.0000000000000000, 0.0 },\n+  { -0.58436403661500824, 1.0000000000000000, 1.2500000000000000, 0.0 },\n+  { -0.41230862697391119, 1.0000000000000000, 1.5000000000000000, 0.0 },\n+  { -0.25397298594624573, 1.0000000000000000, 1.7500000000000000, 0.0 },\n+  { -0.10703243154093699, 1.0000000000000000, 2.0000000000000000, 0.0 },\n+  { 0.027192057738017056, 1.0000000000000000, 2.2500000000000000, 0.0 },\n+  { 0.14591813796678599, 1.0000000000000000, 2.5000000000000000, 0.0 },\n+  { 0.24601900149738354, 1.0000000000000000, 2.7500000000000000, 0.0 },\n+  { 0.32467442479180003, 1.0000000000000000, 3.0000000000000000, 0.0 },\n+  { 0.37977777371708382, 1.0000000000000000, 3.2500000000000000, 0.0 },\n+  { 0.41018841788751170, 1.0000000000000000, 3.5000000000000000, 0.0 },\n+  { 0.41586877934522715, 1.0000000000000000, 3.7500000000000000, 0.0 },\n+  { 0.39792571055709991, 1.0000000000000000, 4.0000000000000000, 0.0 },\n+  { 0.35856889308385076, 1.0000000000000000, 4.2500000000000000, 0.0 },\n+  { 0.30099732306965449, 1.0000000000000000, 4.5000000000000000, 0.0 },\n+  { 0.22922559673872217, 1.0000000000000000, 4.7500000000000000, 0.0 },\n+  { 0.14786314339122700, 1.0000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler005 = 2.5000000000000015e-12;\n+const double toler011 = 2.5000000000000015e-12;\n \n // Test data for nu=2.0000000000000000.\n-// max(|f - f_GSL|): 6.1062266354383610e-16\n-// max(|f - f_GSL| / |f_GSL|): 1.2540693630135021e-14\n+// max(|f - f_GSL|): 1.0547118733938987e-15 at index 8\n+// max(|f - f_GSL| / |f_GSL|): 1.1776017189273130e-14\n+// mean(f - f_GSL): 1.4502288259166106e-16\n+// variance(f - f_GSL): 2.5634607708533707e-35\n+// stddev(f - f_GSL): 5.0630630757016755e-18\n const testcase_cyl_neumann<double>\n-data006[20] =\n+data012[20] =\n {\n-  { -20.701268809592200, 2.0000000000000000, 0.25000000000000000 },\n-  { -5.4413708371742668, 2.0000000000000000, 0.50000000000000000 },\n-  { -2.6297460326656559, 2.0000000000000000, 0.75000000000000000 },\n-  { -1.6506826068162548, 2.0000000000000000, 1.0000000000000000 },\n-  { -1.1931993101785539, 2.0000000000000000, 1.2500000000000000 },\n-  { -0.93219375976297369, 2.0000000000000000, 1.5000000000000000 },\n-  { -0.75574746972832973, 2.0000000000000000, 1.7500000000000000 },\n-  { -0.61740810419068193, 2.0000000000000000, 2.0000000000000000 },\n-  { -0.49589404446793012, 2.0000000000000000, 2.2500000000000000 },\n-  { -0.38133584924180314, 2.0000000000000000, 2.5000000000000000 },\n-  { -0.26973581138921693, 2.0000000000000000, 2.7500000000000000 },\n-  { -0.16040039348492377, 2.0000000000000000, 3.0000000000000000 },\n-  { -0.054577503462573951, 2.0000000000000000, 3.2500000000000000 },\n-  { 0.045371437729179787, 2.0000000000000000, 3.5000000000000000 },\n-  { 0.13653992534009185, 2.0000000000000000, 3.7500000000000000 },\n-  { 0.21590359460361472, 2.0000000000000000, 4.0000000000000000 },\n-  { 0.28065715378930217, 2.0000000000000000, 4.2500000000000000 },\n-  { 0.32848159666046206, 2.0000000000000000, 4.5000000000000000 },\n-  { 0.35774854396706901, 2.0000000000000000, 4.7500000000000000 },\n-  { 0.36766288260552438, 2.0000000000000000, 5.0000000000000000 },\n+  { -20.701268809592200, 2.0000000000000000, 0.25000000000000000, 0.0 },\n+  { -5.4413708371742668, 2.0000000000000000, 0.50000000000000000, 0.0 },\n+  { -2.6297460326656559, 2.0000000000000000, 0.75000000000000000, 0.0 },\n+  { -1.6506826068162548, 2.0000000000000000, 1.0000000000000000, 0.0 },\n+  { -1.1931993101785539, 2.0000000000000000, 1.2500000000000000, 0.0 },\n+  { -0.93219375976297369, 2.0000000000000000, 1.5000000000000000, 0.0 },\n+  { -0.75574746972832973, 2.0000000000000000, 1.7500000000000000, 0.0 },\n+  { -0.61740810419068193, 2.0000000000000000, 2.0000000000000000, 0.0 },\n+  { -0.49589404446793012, 2.0000000000000000, 2.2500000000000000, 0.0 },\n+  { -0.38133584924180314, 2.0000000000000000, 2.5000000000000000, 0.0 },\n+  { -0.26973581138921693, 2.0000000000000000, 2.7500000000000000, 0.0 },\n+  { -0.16040039348492377, 2.0000000000000000, 3.0000000000000000, 0.0 },\n+  { -0.054577503462573951, 2.0000000000000000, 3.2500000000000000, 0.0 },\n+  { 0.045371437729179787, 2.0000000000000000, 3.5000000000000000, 0.0 },\n+  { 0.13653992534009185, 2.0000000000000000, 3.7500000000000000, 0.0 },\n+  { 0.21590359460361472, 2.0000000000000000, 4.0000000000000000, 0.0 },\n+  { 0.28065715378930217, 2.0000000000000000, 4.2500000000000000, 0.0 },\n+  { 0.32848159666046206, 2.0000000000000000, 4.5000000000000000, 0.0 },\n+  { 0.35774854396706901, 2.0000000000000000, 4.7500000000000000, 0.0 },\n+  { 0.36766288260552438, 2.0000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler006 = 1.0000000000000008e-12;\n+const double toler012 = 1.0000000000000008e-12;\n \n // Test data for nu=5.0000000000000000.\n-// max(|f - f_GSL|): 8.8817841970012523e-15\n-// max(|f - f_GSL| / |f_GSL|): 1.6846903979704834e-15\n+// max(|f - f_GSL|): 2.8421709430404007e-14 at index 4\n+// max(|f - f_GSL| / |f_GSL|): 1.0726804245235588e-15\n+// mean(f - f_GSL): -1.8762769116165144e-15\n+// variance(f - f_GSL): 2.7042659892362611e-31\n+// stddev(f - f_GSL): 5.2002557525916566e-16\n const testcase_cyl_neumann<double>\n-data007[13] =\n+data013[20] =\n {\n-  { -9.9359891284819675, 5.0000000000000000, 2.0000000000000000 },\n-  { -5.9446343848076424, 5.0000000000000000, 2.2500000000000000 },\n-  { -3.8301760007407522, 5.0000000000000000, 2.5000000000000000 },\n-  { -2.6287042009459087, 5.0000000000000000, 2.7500000000000000 },\n-  { -1.9059459538286738, 5.0000000000000000, 3.0000000000000000 },\n-  { -1.4498157389142654, 5.0000000000000000, 3.2500000000000000 },\n-  { -1.1494603169763686, 5.0000000000000000, 3.5000000000000000 },\n-  { -0.94343105151431672, 5.0000000000000000, 3.7500000000000000 },\n-  { -0.79585142111419982, 5.0000000000000000, 4.0000000000000000 },\n-  { -0.68479288173907016, 5.0000000000000000, 4.2500000000000000 },\n-  { -0.59631936513587558, 5.0000000000000000, 4.5000000000000000 },\n-  { -0.52130838331747587, 5.0000000000000000, 4.7500000000000000 },\n-  { -0.45369482249110193, 5.0000000000000000, 5.0000000000000000 },\n+  { -251309.48151852371, 5.0000000000000000, 0.25000000000000000, 0.0 },\n+  { -7946.3014788074752, 5.0000000000000000, 0.50000000000000000, 0.0 },\n+  { -1067.2468952289760, 5.0000000000000000, 0.75000000000000000, 0.0 },\n+  { -260.40586662581228, 5.0000000000000000, 1.0000000000000000, 0.0 },\n+  { -88.474252441880395, 5.0000000000000000, 1.2500000000000000, 0.0 },\n+  { -37.190308395498064, 5.0000000000000000, 1.5000000000000000, 0.0 },\n+  { -18.165774988201832, 5.0000000000000000, 1.7500000000000000, 0.0 },\n+  { -9.9359891284819675, 5.0000000000000000, 2.0000000000000000, 0.0 },\n+  { -5.9446343848076424, 5.0000000000000000, 2.2500000000000000, 0.0 },\n+  { -3.8301760007407522, 5.0000000000000000, 2.5000000000000000, 0.0 },\n+  { -2.6287042009459087, 5.0000000000000000, 2.7500000000000000, 0.0 },\n+  { -1.9059459538286738, 5.0000000000000000, 3.0000000000000000, 0.0 },\n+  { -1.4498157389142654, 5.0000000000000000, 3.2500000000000000, 0.0 },\n+  { -1.1494603169763686, 5.0000000000000000, 3.5000000000000000, 0.0 },\n+  { -0.94343105151431672, 5.0000000000000000, 3.7500000000000000, 0.0 },\n+  { -0.79585142111419982, 5.0000000000000000, 4.0000000000000000, 0.0 },\n+  { -0.68479288173907016, 5.0000000000000000, 4.2500000000000000, 0.0 },\n+  { -0.59631936513587558, 5.0000000000000000, 4.5000000000000000, 0.0 },\n+  { -0.52130838331747587, 5.0000000000000000, 4.7500000000000000, 0.0 },\n+  { -0.45369482249110193, 5.0000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler007 = 2.5000000000000020e-13;\n+const double toler013 = 2.5000000000000020e-13;\n \n // Test data for nu=10.000000000000000.\n-// max(|f - f_GSL|): 2.3841857910156250e-07\n-// max(|f - f_GSL| / |f_GSL|): 1.4991559422183497e-15\n+// max(|f - f_GSL|): 2.3841857910156250e-07 at index 2\n+// max(|f - f_GSL| / |f_GSL|): 1.2724057074663479e-15\n+// mean(f - f_GSL): 1.1408855549177588e-08\n+// variance(f - f_GSL): 7.2112307216715587e-18\n+// stddev(f - f_GSL): 2.6853734789916205e-09\n const testcase_cyl_neumann<double>\n-data008[20] =\n+data014[20] =\n {\n-  { -124241617095379.48, 10.000000000000000, 0.25000000000000000 },\n-  { -121963623349.56966, 10.000000000000000, 0.50000000000000000 },\n-  { -2133501638.9057348, 10.000000000000000, 0.75000000000000000 },\n-  { -121618014.27868921, 10.000000000000000, 1.0000000000000000 },\n-  { -13265210.158452792, 10.000000000000000, 1.2500000000000000 },\n-  { -2183993.0260864049, 10.000000000000000, 1.5000000000000000 },\n-  { -478274.82386541169, 10.000000000000000, 1.7500000000000000 },\n-  { -129184.54220803917, 10.000000000000000, 2.0000000000000000 },\n-  { -40993.254794381690, 10.000000000000000, 2.2500000000000000 },\n-  { -14782.847716021070, 10.000000000000000, 2.5000000000000000 },\n-  { -5916.5330998776262, 10.000000000000000, 2.7500000000000000 },\n-  { -2582.6071294842995, 10.000000000000000, 3.0000000000000000 },\n-  { -1213.3423564023892, 10.000000000000000, 3.2500000000000000 },\n-  { -607.27437834125760, 10.000000000000000, 3.5000000000000000 },\n-  { -321.17461059752202, 10.000000000000000, 3.7500000000000000 },\n-  { -178.33055590796428, 10.000000000000000, 4.0000000000000000 },\n-  { -103.40496587570090, 10.000000000000000, 4.2500000000000000 },\n-  { -62.345024619781434, 10.000000000000000, 4.5000000000000000 },\n-  { -38.944510430296937, 10.000000000000000, 4.7500000000000000 },\n-  { -25.129110095610095, 10.000000000000000, 5.0000000000000000 },\n+  { -124241617095379.48, 10.000000000000000, 0.25000000000000000, 0.0 },\n+  { -121963623349.56966, 10.000000000000000, 0.50000000000000000, 0.0 },\n+  { -2133501638.9057348, 10.000000000000000, 0.75000000000000000, 0.0 },\n+  { -121618014.27868921, 10.000000000000000, 1.0000000000000000, 0.0 },\n+  { -13265210.158452792, 10.000000000000000, 1.2500000000000000, 0.0 },\n+  { -2183993.0260864049, 10.000000000000000, 1.5000000000000000, 0.0 },\n+  { -478274.82386541169, 10.000000000000000, 1.7500000000000000, 0.0 },\n+  { -129184.54220803917, 10.000000000000000, 2.0000000000000000, 0.0 },\n+  { -40993.254794381690, 10.000000000000000, 2.2500000000000000, 0.0 },\n+  { -14782.847716021070, 10.000000000000000, 2.5000000000000000, 0.0 },\n+  { -5916.5330998776262, 10.000000000000000, 2.7500000000000000, 0.0 },\n+  { -2582.6071294842995, 10.000000000000000, 3.0000000000000000, 0.0 },\n+  { -1213.3423564023892, 10.000000000000000, 3.2500000000000000, 0.0 },\n+  { -607.27437834125760, 10.000000000000000, 3.5000000000000000, 0.0 },\n+  { -321.17461059752202, 10.000000000000000, 3.7500000000000000, 0.0 },\n+  { -178.33055590796428, 10.000000000000000, 4.0000000000000000, 0.0 },\n+  { -103.40496587570090, 10.000000000000000, 4.2500000000000000, 0.0 },\n+  { -62.345024619781434, 10.000000000000000, 4.5000000000000000, 0.0 },\n+  { -38.944510430296937, 10.000000000000000, 4.7500000000000000, 0.0 },\n+  { -25.129110095610095, 10.000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler008 = 2.5000000000000020e-13;\n+const double toler014 = 2.5000000000000020e-13;\n \n // Test data for nu=20.000000000000000.\n-// max(|f - f_GSL|): 6442450944.0000000\n-// max(|f - f_GSL| / |f_GSL|): 1.6458221996165416e-15\n+// max(|f - f_GSL|): 6442450944.0000000 at index 2\n+// max(|f - f_GSL| / |f_GSL|): 1.8080382211114952e-15\n+// mean(f - f_GSL): 322083865.10024977\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_cyl_neumann<double>\n-data009[20] =\n+data015[20] =\n {\n-  { -4.4678815064152581e+34, 20.000000000000000, 0.25000000000000000 },\n-  { -4.2714301215659088e+28, 20.000000000000000, 0.50000000000000000 },\n-  { -1.2898357375834223e+25, 20.000000000000000, 0.75000000000000000 },\n-  { -4.1139703148355065e+22, 20.000000000000000, 1.0000000000000000 },\n-  { -4.7783533372148580e+20, 20.000000000000000, 1.2500000000000000 },\n-  { -1.2577301772964241e+19, 20.000000000000000, 1.5000000000000000 },\n-  { -5.8251041176649626e+17, 20.000000000000000, 1.7500000000000000 },\n-  { -40816513889983640., 20.000000000000000, 2.0000000000000000 },\n-  { -3925339868516418.5, 20.000000000000000, 2.2500000000000000 },\n-  { -484776559582090.25, 20.000000000000000, 2.5000000000000000 },\n-  { -73320655044814.469, 20.000000000000000, 2.7500000000000000 },\n-  { -13113540041757.449, 20.000000000000000, 3.0000000000000000 },\n-  { -2700669268882.7139, 20.000000000000000, 3.2500000000000000 },\n-  { -627339518240.21240, 20.000000000000000, 3.5000000000000000 },\n-  { -161695236802.71753, 20.000000000000000, 3.7500000000000000 },\n-  { -45637199262.220100, 20.000000000000000, 4.0000000000000000 },\n-  { -13953299213.925377, 20.000000000000000, 4.2500000000000000 },\n-  { -4580215756.5691023, 20.000000000000000, 4.5000000000000000 },\n-  { -1602110715.5159132, 20.000000000000000, 4.7500000000000000 },\n-  { -593396529.69143200, 20.000000000000000, 5.0000000000000000 },\n+  { -4.4678815064152581e+34, 20.000000000000000, 0.25000000000000000, 0.0 },\n+  { -4.2714301215659088e+28, 20.000000000000000, 0.50000000000000000, 0.0 },\n+  { -1.2898357375834223e+25, 20.000000000000000, 0.75000000000000000, 0.0 },\n+  { -4.1139703148355065e+22, 20.000000000000000, 1.0000000000000000, 0.0 },\n+  { -4.7783533372148580e+20, 20.000000000000000, 1.2500000000000000, 0.0 },\n+  { -1.2577301772964241e+19, 20.000000000000000, 1.5000000000000000, 0.0 },\n+  { -5.8251041176649626e+17, 20.000000000000000, 1.7500000000000000, 0.0 },\n+  { -40816513889983640., 20.000000000000000, 2.0000000000000000, 0.0 },\n+  { -3925339868516418.5, 20.000000000000000, 2.2500000000000000, 0.0 },\n+  { -484776559582090.25, 20.000000000000000, 2.5000000000000000, 0.0 },\n+  { -73320655044814.469, 20.000000000000000, 2.7500000000000000, 0.0 },\n+  { -13113540041757.449, 20.000000000000000, 3.0000000000000000, 0.0 },\n+  { -2700669268882.7139, 20.000000000000000, 3.2500000000000000, 0.0 },\n+  { -627339518240.21240, 20.000000000000000, 3.5000000000000000, 0.0 },\n+  { -161695236802.71753, 20.000000000000000, 3.7500000000000000, 0.0 },\n+  { -45637199262.220100, 20.000000000000000, 4.0000000000000000, 0.0 },\n+  { -13953299213.925377, 20.000000000000000, 4.2500000000000000, 0.0 },\n+  { -4580215756.5691023, 20.000000000000000, 4.5000000000000000, 0.0 },\n+  { -1602110715.5159132, 20.000000000000000, 4.7500000000000000, 0.0 },\n+  { -593396529.69143200, 20.000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler009 = 2.5000000000000020e-13;\n+const double toler015 = 2.5000000000000020e-13;\n \n // Test data for nu=50.000000000000000.\n-// max(|f - f_GSL|): 6.4703872001161536e+68\n+// max(|f - f_GSL|): 6.4703872001161536e+68 at index 2\n // max(|f - f_GSL| / |f_GSL|): 3.7730746786493403e-15\n+// mean(f - f_GSL): 3.2351936000129644e+67\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_cyl_neumann<double>\n-data010[20] =\n+data016[20] =\n {\n-  { -2.7643487471155969e+107, 50.000000000000000, 0.25000000000000000 },\n-  { -2.4575848224461092e+92, 50.000000000000000, 0.50000000000000000 },\n-  { -3.8604508467683829e+83, 50.000000000000000, 0.75000000000000000 },\n-  { -2.1911428126053411e+77, 50.000000000000000, 1.0000000000000000 },\n-  { -3.1362926828833165e+72, 50.000000000000000, 1.2500000000000000 },\n-  { -3.4584216846550566e+68, 50.000000000000000, 1.5000000000000000 },\n-  { -1.5607714080312795e+65, 50.000000000000000, 1.7500000000000000 },\n-  { -1.9761505765184128e+62, 50.000000000000000, 2.0000000000000000 },\n-  { -5.5023640499231188e+59, 50.000000000000000, 2.2500000000000000 },\n-  { -2.8530384545826849e+57, 50.000000000000000, 2.5000000000000000 },\n-  { -2.4467169322684809e+55, 50.000000000000000, 2.7500000000000000 },\n-  { -3.1793891461005181e+53, 50.000000000000000, 3.0000000000000000 },\n-  { -5.8573901231568658e+51, 50.000000000000000, 3.2500000000000000 },\n-  { -1.4528262197760965e+50, 50.000000000000000, 3.5000000000000000 },\n-  { -4.6566569870478635e+48, 50.000000000000000, 3.7500000000000000 },\n-  { -1.8661134361400254e+47, 50.000000000000000, 4.0000000000000000 },\n-  { -9.1005883612255402e+45, 50.000000000000000, 4.2500000000000000 },\n-  { -5.2813777542386141e+44, 50.000000000000000, 4.5000000000000000 },\n-  { -3.5795477722116469e+43, 50.000000000000000, 4.7500000000000000 },\n-  { -2.7888370175838930e+42, 50.000000000000000, 5.0000000000000000 },\n+  { -2.7643487471155969e+107, 50.000000000000000, 0.25000000000000000, 0.0 },\n+  { -2.4575848224461092e+92, 50.000000000000000, 0.50000000000000000, 0.0 },\n+  { -3.8604508467683829e+83, 50.000000000000000, 0.75000000000000000, 0.0 },\n+  { -2.1911428126053411e+77, 50.000000000000000, 1.0000000000000000, 0.0 },\n+  { -3.1362926828833165e+72, 50.000000000000000, 1.2500000000000000, 0.0 },\n+  { -3.4584216846550566e+68, 50.000000000000000, 1.5000000000000000, 0.0 },\n+  { -1.5607714080312795e+65, 50.000000000000000, 1.7500000000000000, 0.0 },\n+  { -1.9761505765184128e+62, 50.000000000000000, 2.0000000000000000, 0.0 },\n+  { -5.5023640499231188e+59, 50.000000000000000, 2.2500000000000000, 0.0 },\n+  { -2.8530384545826849e+57, 50.000000000000000, 2.5000000000000000, 0.0 },\n+  { -2.4467169322684809e+55, 50.000000000000000, 2.7500000000000000, 0.0 },\n+  { -3.1793891461005181e+53, 50.000000000000000, 3.0000000000000000, 0.0 },\n+  { -5.8573901231568658e+51, 50.000000000000000, 3.2500000000000000, 0.0 },\n+  { -1.4528262197760965e+50, 50.000000000000000, 3.5000000000000000, 0.0 },\n+  { -4.6566569870478635e+48, 50.000000000000000, 3.7500000000000000, 0.0 },\n+  { -1.8661134361400254e+47, 50.000000000000000, 4.0000000000000000, 0.0 },\n+  { -9.1005883612255402e+45, 50.000000000000000, 4.2500000000000000, 0.0 },\n+  { -5.2813777542386141e+44, 50.000000000000000, 4.5000000000000000, 0.0 },\n+  { -3.5795477722116469e+43, 50.000000000000000, 4.7500000000000000, 0.0 },\n+  { -2.7888370175838930e+42, 50.000000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler010 = 2.5000000000000020e-13;\n+const double toler016 = 2.5000000000000020e-13;\n \n // Test data for nu=100.00000000000000.\n-// max(|f - f_GSL|): 1.6136484921850493e+233\n-// max(|f - f_GSL| / |f_GSL|): 3.7090973947899002e-13\n+// max(|f - f_GSL|): 1.6126781683773614e+233 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 3.9669044390244564e-13\n+// mean(f - f_GSL): -8.0633908418868065e+231\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_cyl_neumann<double>\n-data011[20] =\n+data017[20] =\n {\n-  { -6.0523080585856754e+245, 100.00000000000000, 0.25000000000000000 },\n-  { -4.7766903780412668e+215, 100.00000000000000, 0.50000000000000000 },\n-  { -1.1758283017660654e+198, 100.00000000000000, 0.75000000000000000 },\n-  { -3.7752878101091316e+185, 100.00000000000000, 1.0000000000000000 },\n-  { -7.7013290730008304e+175, 100.00000000000000, 1.2500000000000000 },\n-  { -9.3152624794288802e+167, 100.00000000000000, 1.5000000000000000 },\n-  { -1.8854163374247264e+161, 100.00000000000000, 1.7500000000000000 },\n-  { -3.0008260488569689e+155, 100.00000000000000, 2.0000000000000000 },\n-  { -2.3075650873777408e+150, 100.00000000000000, 2.2500000000000000 },\n-  { -6.1476258561369381e+145, 100.00000000000000, 2.5000000000000000 },\n-  { -4.4758816234829593e+141, 100.00000000000000, 2.7500000000000000 },\n-  { -7.4747961023547846e+137, 100.00000000000000, 3.0000000000000000 },\n-  { -2.5067022766900123e+134, 100.00000000000000, 3.2500000000000000 },\n-  { -1.5222488313431896e+131, 100.00000000000000, 3.5000000000000000 },\n-  { -1.5422392812241397e+128, 100.00000000000000, 3.7500000000000000 },\n-  { -2.4400857387551062e+125, 100.00000000000000, 4.0000000000000000 },\n-  { -5.7118153392422278e+122, 100.00000000000000, 4.2500000000000000 },\n-  { -1.8915420905194465e+120, 100.00000000000000, 4.5000000000000000 },\n-  { -8.5357945104770158e+117, 100.00000000000000, 4.7500000000000000 },\n-  { -5.0848639160196196e+115, 100.00000000000000, 5.0000000000000000 },\n+  { -6.0523080585856763e+245, 100.00000000000000, 0.25000000000000000, 0.0 },\n+  { -4.7766903780412668e+215, 100.00000000000000, 0.50000000000000000, 0.0 },\n+  { -1.1758283017660654e+198, 100.00000000000000, 0.75000000000000000, 0.0 },\n+  { -3.7752878101091316e+185, 100.00000000000000, 1.0000000000000000, 0.0 },\n+  { -7.7013290729995187e+175, 100.00000000000000, 1.2500000000000000, 0.0 },\n+  { -9.3152624794288802e+167, 100.00000000000000, 1.5000000000000000, 0.0 },\n+  { -1.8854163374247264e+161, 100.00000000000000, 1.7500000000000000, 0.0 },\n+  { -3.0008260488566283e+155, 100.00000000000000, 2.0000000000000000, 0.0 },\n+  { -2.3075650873777408e+150, 100.00000000000000, 2.2500000000000000, 0.0 },\n+  { -6.1476258561369381e+145, 100.00000000000000, 2.5000000000000000, 0.0 },\n+  { -4.4758816234829593e+141, 100.00000000000000, 2.7500000000000000, 0.0 },\n+  { -7.4747961023547862e+137, 100.00000000000000, 3.0000000000000000, 0.0 },\n+  { -2.5067022766901547e+134, 100.00000000000000, 3.2500000000000000, 0.0 },\n+  { -1.5222488313432757e+131, 100.00000000000000, 3.5000000000000000, 0.0 },\n+  { -1.5422392812241399e+128, 100.00000000000000, 3.7500000000000000, 0.0 },\n+  { -2.4400857387551062e+125, 100.00000000000000, 4.0000000000000000, 0.0 },\n+  { -5.7118153392422293e+122, 100.00000000000000, 4.2500000000000000, 0.0 },\n+  { -1.8915420905193392e+120, 100.00000000000000, 4.5000000000000000, 0.0 },\n+  { -8.5357945104770158e+117, 100.00000000000000, 4.7500000000000000, 0.0 },\n+  { -5.0848639160196196e+115, 100.00000000000000, 5.0000000000000000, 0.0 },\n };\n-const double toler011 = 2.5000000000000014e-11;\n+const double toler017 = 2.5000000000000014e-11;\n //  cyl_neumann\n \n // Test data for nu=0.0000000000000000.\n-// max(|f - f_GSL|): 7.1245093158367467e-15\n-// max(|f - f_GSL| / |f_GSL|): 1.5215931554460198e-12\n+// max(|f - f_GSL|): 7.1210398688847931e-15 at index 13\n+// max(|f - f_GSL| / |f_GSL|): 1.5217467741391491e-12\n+// mean(f - f_GSL): 7.2554809382729962e-17\n+// variance(f - f_GSL): 8.8801597233792556e-32\n+// stddev(f - f_GSL): 2.9799596848580446e-16\n const testcase_cyl_neumann<double>\n-data012[20] =\n+data018[20] =\n {\n-  { -0.30851762524903359, 0.0000000000000000, 5.0000000000000000 },\n-  { 0.055671167283599457, 0.0000000000000000, 10.000000000000000 },\n-  { 0.20546429603891822, 0.0000000000000000, 15.000000000000000 },\n-  { 0.062640596809384053, 0.0000000000000000, 20.000000000000000 },\n-  { -0.12724943226800617, 0.0000000000000000, 25.000000000000000 },\n-  { -0.11729573168666413, 0.0000000000000000, 30.000000000000000 },\n-  { 0.045797987195155689, 0.0000000000000000, 35.000000000000000 },\n-  { 0.12593641705826092, 0.0000000000000000, 40.000000000000000 },\n-  { 0.027060469763313333, 0.0000000000000000, 45.000000000000000 },\n-  { -0.098064995470077118, 0.0000000000000000, 50.000000000000000 },\n-  { -0.077569178730412594, 0.0000000000000000, 55.000000000000000 },\n-  { 0.047358952209449426, 0.0000000000000000, 60.000000000000000 },\n-  { 0.097183557740181920, 0.0000000000000000, 65.000000000000000 },\n-  { 0.0093096664589409992, 0.0000000000000000, 70.000000000000000 },\n-  { -0.085369047647775656, 0.0000000000000000, 75.000000000000000 },\n-  { -0.055620339089770016, 0.0000000000000000, 80.000000000000000 },\n-  { 0.049567884951494251, 0.0000000000000000, 85.000000000000000 },\n-  { 0.079776475854877751, 0.0000000000000000, 90.000000000000000 },\n-  { -0.0028230995861232107, 0.0000000000000000, 95.000000000000000 },\n-  { -0.077244313365083153, 0.0000000000000000, 100.00000000000000 },\n+  { -0.30851762524903359, 0.0000000000000000, 5.0000000000000000, 0.0 },\n+  { 0.055671167283599457, 0.0000000000000000, 10.000000000000000, 0.0 },\n+  { 0.20546429603891822, 0.0000000000000000, 15.000000000000000, 0.0 },\n+  { 0.062640596809384053, 0.0000000000000000, 20.000000000000000, 0.0 },\n+  { -0.12724943226800617, 0.0000000000000000, 25.000000000000000, 0.0 },\n+  { -0.11729573168666413, 0.0000000000000000, 30.000000000000000, 0.0 },\n+  { 0.045797987195155689, 0.0000000000000000, 35.000000000000000, 0.0 },\n+  { 0.12593641705826092, 0.0000000000000000, 40.000000000000000, 0.0 },\n+  { 0.027060469763313333, 0.0000000000000000, 45.000000000000000, 0.0 },\n+  { -0.098064995470077118, 0.0000000000000000, 50.000000000000000, 0.0 },\n+  { -0.077569178730412594, 0.0000000000000000, 55.000000000000000, 0.0 },\n+  { 0.047358952209449426, 0.0000000000000000, 60.000000000000000, 0.0 },\n+  { 0.097183557740181920, 0.0000000000000000, 65.000000000000000, 0.0 },\n+  { 0.0093096664589409992, 0.0000000000000000, 70.000000000000000, 0.0 },\n+  { -0.085369047647775656, 0.0000000000000000, 75.000000000000000, 0.0 },\n+  { -0.055620339089770016, 0.0000000000000000, 80.000000000000000, 0.0 },\n+  { 0.049567884951494251, 0.0000000000000000, 85.000000000000000, 0.0 },\n+  { 0.079776475854877751, 0.0000000000000000, 90.000000000000000, 0.0 },\n+  { -0.0028230995861232107, 0.0000000000000000, 95.000000000000000, 0.0 },\n+  { -0.077244313365083153, 0.0000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler012 = 1.0000000000000006e-10;\n+const double toler018 = 1.0000000000000006e-10;\n \n // Test data for nu=0.33333333333333331.\n-// max(|f - f_GSL|): 6.4392935428259079e-15\n-// max(|f - f_GSL| / |f_GSL|): 4.0229312517518102e-13\n+// max(|f - f_GSL|): 6.4392935428259079e-15 at index 13\n+// max(|f - f_GSL| / |f_GSL|): 4.0255283668271825e-13\n+// mean(f - f_GSL): 4.0124153999343550e-16\n+// variance(f - f_GSL): 5.5447658140741534e-32\n+// stddev(f - f_GSL): 2.3547326417396418e-16\n const testcase_cyl_neumann<double>\n-data013[20] =\n+data019[20] =\n {\n-  { -0.18192321129343850, 0.33333333333333331, 5.0000000000000000 },\n-  { 0.17020111788268760, 0.33333333333333331, 10.000000000000000 },\n-  { 0.18540507541540796, 0.33333333333333331, 15.000000000000000 },\n-  { -0.028777707635715043, 0.33333333333333331, 20.000000000000000 },\n-  { -0.15829741864944163, 0.33333333333333331, 25.000000000000000 },\n-  { -0.058645772316705209, 0.33333333333333331, 30.000000000000000 },\n-  { 0.10294930308870617, 0.33333333333333331, 35.000000000000000 },\n-  { 0.10547870367098922, 0.33333333333333331, 40.000000000000000 },\n-  { -0.034334228816010816, 0.33333333333333331, 45.000000000000000 },\n-  { -0.11283489933031279, 0.33333333333333331, 50.000000000000000 },\n-  { -0.030007358986895105, 0.33333333333333331, 55.000000000000000 },\n-  { 0.086699173295718121, 0.33333333333333331, 60.000000000000000 },\n-  { 0.074875579668878658, 0.33333333333333331, 65.000000000000000 },\n-  { -0.039323246374552680, 0.33333333333333331, 70.000000000000000 },\n-  { -0.091263539574475236, 0.33333333333333331, 75.000000000000000 },\n-  { -0.013358849535984318, 0.33333333333333331, 80.000000000000000 },\n-  { 0.078373575537830198, 0.33333333333333331, 85.000000000000000 },\n-  { 0.055812482883955940, 0.33333333333333331, 90.000000000000000 },\n-  { -0.043310380106990683, 0.33333333333333331, 95.000000000000000 },\n-  { -0.076900504962136559, 0.33333333333333331, 100.00000000000000 },\n+  { -0.18192321129343850, 0.33333333333333331, 5.0000000000000000, 0.0 },\n+  { 0.17020111788268760, 0.33333333333333331, 10.000000000000000, 0.0 },\n+  { 0.18540507541540796, 0.33333333333333331, 15.000000000000000, 0.0 },\n+  { -0.028777707635715043, 0.33333333333333331, 20.000000000000000, 0.0 },\n+  { -0.15829741864944163, 0.33333333333333331, 25.000000000000000, 0.0 },\n+  { -0.058645772316705209, 0.33333333333333331, 30.000000000000000, 0.0 },\n+  { 0.10294930308870617, 0.33333333333333331, 35.000000000000000, 0.0 },\n+  { 0.10547870367098922, 0.33333333333333331, 40.000000000000000, 0.0 },\n+  { -0.034334228816010816, 0.33333333333333331, 45.000000000000000, 0.0 },\n+  { -0.11283489933031279, 0.33333333333333331, 50.000000000000000, 0.0 },\n+  { -0.030007358986895105, 0.33333333333333331, 55.000000000000000, 0.0 },\n+  { 0.086699173295718121, 0.33333333333333331, 60.000000000000000, 0.0 },\n+  { 0.074875579668878658, 0.33333333333333331, 65.000000000000000, 0.0 },\n+  { -0.039323246374552680, 0.33333333333333331, 70.000000000000000, 0.0 },\n+  { -0.091263539574475236, 0.33333333333333331, 75.000000000000000, 0.0 },\n+  { -0.013358849535984318, 0.33333333333333331, 80.000000000000000, 0.0 },\n+  { 0.078373575537830198, 0.33333333333333331, 85.000000000000000, 0.0 },\n+  { 0.055812482883955940, 0.33333333333333331, 90.000000000000000, 0.0 },\n+  { -0.043310380106990683, 0.33333333333333331, 95.000000000000000, 0.0 },\n+  { -0.076900504962136559, 0.33333333333333331, 100.00000000000000, 0.0 },\n };\n-const double toler013 = 2.5000000000000014e-11;\n+const double toler019 = 2.5000000000000014e-11;\n \n // Test data for nu=0.50000000000000000.\n-// max(|f - f_GSL|): 6.5988881026157742e-15\n+// max(|f - f_GSL|): 6.5919492087118670e-15 at index 12\n // max(|f - f_GSL| / |f_GSL|): 6.0282403975230169e-13\n+// mean(f - f_GSL): 4.4870791110485090e-16\n+// variance(f - f_GSL): 2.2330752394717835e-31\n+// stddev(f - f_GSL): 4.7255425503023288e-16\n const testcase_cyl_neumann<double>\n-data014[20] =\n+data020[20] =\n {\n-  { -0.10121770918510846, 0.50000000000000000, 5.0000000000000000 },\n-  { 0.21170886633139810, 0.50000000000000000, 10.000000000000000 },\n-  { 0.15650551590730855, 0.50000000000000000, 15.000000000000000 },\n-  { -0.072806904785061938, 0.50000000000000000, 20.000000000000000 },\n-  { -0.15817308404205055, 0.50000000000000000, 25.000000000000000 },\n-  { -0.022470290598831138, 0.50000000000000000, 30.000000000000000 },\n-  { 0.12187835265849535, 0.50000000000000000, 35.000000000000000 },\n-  { 0.084138655676395377, 0.50000000000000000, 40.000000000000000 },\n-  { -0.062482641933003201, 0.50000000000000000, 45.000000000000000 },\n-  { -0.10888475635053954, 0.50000000000000000, 50.000000000000000 },\n-  { -0.0023805454010949376, 0.50000000000000000, 55.000000000000000 },\n-  { 0.098104683735037918, 0.50000000000000000, 60.000000000000000 },\n-  { 0.055663470218594434, 0.50000000000000000, 65.000000000000000 },\n-  { -0.060396767883824871, 0.50000000000000000, 70.000000000000000 },\n-  { -0.084922578922046868, 0.50000000000000000, 75.000000000000000 },\n-  { 0.0098472271924441284, 0.50000000000000000, 80.000000000000000 },\n-  { 0.085190643574343625, 0.50000000000000000, 85.000000000000000 },\n-  { 0.037684970437156268, 0.50000000000000000, 90.000000000000000 },\n-  { -0.059772904856097500, 0.50000000000000000, 95.000000000000000 },\n-  { -0.068803091468728109, 0.50000000000000000, 100.00000000000000 },\n+  { -0.10121770918510846, 0.50000000000000000, 5.0000000000000000, 0.0 },\n+  { 0.21170886633139810, 0.50000000000000000, 10.000000000000000, 0.0 },\n+  { 0.15650551590730855, 0.50000000000000000, 15.000000000000000, 0.0 },\n+  { -0.072806904785061938, 0.50000000000000000, 20.000000000000000, 0.0 },\n+  { -0.15817308404205055, 0.50000000000000000, 25.000000000000000, 0.0 },\n+  { -0.022470290598831138, 0.50000000000000000, 30.000000000000000, 0.0 },\n+  { 0.12187835265849535, 0.50000000000000000, 35.000000000000000, 0.0 },\n+  { 0.084138655676395377, 0.50000000000000000, 40.000000000000000, 0.0 },\n+  { -0.062482641933003201, 0.50000000000000000, 45.000000000000000, 0.0 },\n+  { -0.10888475635053954, 0.50000000000000000, 50.000000000000000, 0.0 },\n+  { -0.0023805454010949376, 0.50000000000000000, 55.000000000000000, 0.0 },\n+  { 0.098104683735037918, 0.50000000000000000, 60.000000000000000, 0.0 },\n+  { 0.055663470218594434, 0.50000000000000000, 65.000000000000000, 0.0 },\n+  { -0.060396767883824871, 0.50000000000000000, 70.000000000000000, 0.0 },\n+  { -0.084922578922046868, 0.50000000000000000, 75.000000000000000, 0.0 },\n+  { 0.0098472271924441284, 0.50000000000000000, 80.000000000000000, 0.0 },\n+  { 0.085190643574343625, 0.50000000000000000, 85.000000000000000, 0.0 },\n+  { 0.037684970437156268, 0.50000000000000000, 90.000000000000000, 0.0 },\n+  { -0.059772904856097500, 0.50000000000000000, 95.000000000000000, 0.0 },\n+  { -0.068803091468728109, 0.50000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler014 = 5.0000000000000028e-11;\n+const double toler020 = 5.0000000000000028e-11;\n \n // Test data for nu=0.66666666666666663.\n-// max(|f - f_GSL|): 7.2442052356791464e-15\n-// max(|f - f_GSL| / |f_GSL|): 4.1296144775547441e-13\n+// max(|f - f_GSL|): 7.2372663417752392e-15 at index 12\n+// max(|f - f_GSL| / |f_GSL|): 4.1336890848340281e-13\n+// mean(f - f_GSL): 4.6646714269016339e-16\n+// variance(f - f_GSL): 4.7228390491049495e-31\n+// stddev(f - f_GSL): 6.8722915021882980e-16\n const testcase_cyl_neumann<double>\n-data015[20] =\n+data021[20] =\n {\n-  { -0.016050662643389627, 0.66666666666666663, 5.0000000000000000 },\n-  { 0.23937232657540733, 0.66666666666666663, 10.000000000000000 },\n-  { 0.11762106604241235, 0.66666666666666663, 15.000000000000000 },\n-  { -0.11182254014899558, 0.66666666666666663, 20.000000000000000 },\n-  { -0.14756582982938804, 0.66666666666666663, 25.000000000000000 },\n-  { 0.015078692908077713, 0.66666666666666663, 30.000000000000000 },\n-  { 0.13260911815705795, 0.66666666666666663, 35.000000000000000 },\n-  { 0.057217565989652698, 0.66666666666666663, 40.000000000000000 },\n-  { -0.086373755152382006, 0.66666666666666663, 45.000000000000000 },\n-  { -0.097624139208051616, 0.66666666666666663, 50.000000000000000 },\n-  { 0.025354902147023392, 0.66666666666666663, 55.000000000000000 },\n-  { 0.10288136476351206, 0.66666666666666663, 60.000000000000000 },\n-  { 0.032728379560128203, 0.66666666666666663, 65.000000000000000 },\n-  { -0.077363672735747818, 0.66666666666666663, 70.000000000000000 },\n-  { -0.072855870458293961, 0.66666666666666663, 75.000000000000000 },\n-  { 0.032358106046953543, 0.66666666666666663, 80.000000000000000 },\n-  { 0.086240651537394228, 0.66666666666666663, 85.000000000000000 },\n-  { 0.017029601697285190, 0.66666666666666663, 90.000000000000000 },\n-  { -0.072173520560584681, 0.66666666666666663, 95.000000000000000 },\n-  { -0.056057339204073887, 0.66666666666666663, 100.00000000000000 },\n+  { -0.016050662643389627, 0.66666666666666663, 5.0000000000000000, 0.0 },\n+  { 0.23937232657540733, 0.66666666666666663, 10.000000000000000, 0.0 },\n+  { 0.11762106604241235, 0.66666666666666663, 15.000000000000000, 0.0 },\n+  { -0.11182254014899558, 0.66666666666666663, 20.000000000000000, 0.0 },\n+  { -0.14756582982938804, 0.66666666666666663, 25.000000000000000, 0.0 },\n+  { 0.015078692908077713, 0.66666666666666663, 30.000000000000000, 0.0 },\n+  { 0.13260911815705795, 0.66666666666666663, 35.000000000000000, 0.0 },\n+  { 0.057217565989652698, 0.66666666666666663, 40.000000000000000, 0.0 },\n+  { -0.086373755152382006, 0.66666666666666663, 45.000000000000000, 0.0 },\n+  { -0.097624139208051616, 0.66666666666666663, 50.000000000000000, 0.0 },\n+  { 0.025354902147023392, 0.66666666666666663, 55.000000000000000, 0.0 },\n+  { 0.10288136476351206, 0.66666666666666663, 60.000000000000000, 0.0 },\n+  { 0.032728379560128203, 0.66666666666666663, 65.000000000000000, 0.0 },\n+  { -0.077363672735747818, 0.66666666666666663, 70.000000000000000, 0.0 },\n+  { -0.072855870458293961, 0.66666666666666663, 75.000000000000000, 0.0 },\n+  { 0.032358106046953543, 0.66666666666666663, 80.000000000000000, 0.0 },\n+  { 0.086240651537394228, 0.66666666666666663, 85.000000000000000, 0.0 },\n+  { 0.017029601697285190, 0.66666666666666663, 90.000000000000000, 0.0 },\n+  { -0.072173520560584681, 0.66666666666666663, 95.000000000000000, 0.0 },\n+  { -0.056057339204073887, 0.66666666666666663, 100.00000000000000, 0.0 },\n };\n-const double toler015 = 2.5000000000000014e-11;\n+const double toler021 = 2.5000000000000014e-11;\n \n // Test data for nu=1.0000000000000000.\n-// max(|f - f_GSL|): 7.6640083168655337e-15\n-// max(|f - f_GSL| / |f_GSL|): 4.2719333494531163e-13\n+// max(|f - f_GSL|): 7.6570694229616265e-15 at index 12\n+// max(|f - f_GSL| / |f_GSL|): 4.2680655963073912e-13\n+// mean(f - f_GSL): 4.9712838012805347e-16\n+// variance(f - f_GSL): 8.8456847510770884e-31\n+// stddev(f - f_GSL): 9.4051500525388153e-16\n const testcase_cyl_neumann<double>\n-data016[20] =\n+data022[20] =\n {\n-  { 0.14786314339122700, 1.0000000000000000, 5.0000000000000000 },\n-  { 0.24901542420695386, 1.0000000000000000, 10.000000000000000 },\n-  { 0.021073628036873522, 1.0000000000000000, 15.000000000000000 },\n-  { -0.16551161436252115, 1.0000000000000000, 20.000000000000000 },\n-  { -0.098829964783237412, 1.0000000000000000, 25.000000000000000 },\n-  { 0.084425570661747135, 1.0000000000000000, 30.000000000000000 },\n-  { 0.12751273354559009, 1.0000000000000000, 35.000000000000000 },\n-  { -0.0057935058215497536, 1.0000000000000000, 40.000000000000000 },\n-  { -0.11552517964639945, 1.0000000000000000, 45.000000000000000 },\n-  { -0.056795668562014692, 1.0000000000000000, 50.000000000000000 },\n-  { 0.073846265432577926, 1.0000000000000000, 55.000000000000000 },\n-  { 0.091869609369866892, 1.0000000000000000, 60.000000000000000 },\n-  { -0.017940374275377362, 1.0000000000000000, 65.000000000000000 },\n-  { -0.094844652625716230, 1.0000000000000000, 70.000000000000000 },\n-  { -0.035213785160580421, 1.0000000000000000, 75.000000000000000 },\n-  { 0.069395913784588037, 1.0000000000000000, 80.000000000000000 },\n-  { 0.071233187582749768, 1.0000000000000000, 85.000000000000000 },\n-  { -0.026187238607768244, 1.0000000000000000, 90.000000000000000 },\n-  { -0.081827958724501215, 1.0000000000000000, 95.000000000000000 },\n-  { -0.020372312002759834, 1.0000000000000000, 100.00000000000000 },\n+  { 0.14786314339122700, 1.0000000000000000, 5.0000000000000000, 0.0 },\n+  { 0.24901542420695386, 1.0000000000000000, 10.000000000000000, 0.0 },\n+  { 0.021073628036873522, 1.0000000000000000, 15.000000000000000, 0.0 },\n+  { -0.16551161436252115, 1.0000000000000000, 20.000000000000000, 0.0 },\n+  { -0.098829964783237412, 1.0000000000000000, 25.000000000000000, 0.0 },\n+  { 0.084425570661747135, 1.0000000000000000, 30.000000000000000, 0.0 },\n+  { 0.12751273354559009, 1.0000000000000000, 35.000000000000000, 0.0 },\n+  { -0.0057935058215497536, 1.0000000000000000, 40.000000000000000, 0.0 },\n+  { -0.11552517964639945, 1.0000000000000000, 45.000000000000000, 0.0 },\n+  { -0.056795668562014692, 1.0000000000000000, 50.000000000000000, 0.0 },\n+  { 0.073846265432577926, 1.0000000000000000, 55.000000000000000, 0.0 },\n+  { 0.091869609369866892, 1.0000000000000000, 60.000000000000000, 0.0 },\n+  { -0.017940374275377362, 1.0000000000000000, 65.000000000000000, 0.0 },\n+  { -0.094844652625716230, 1.0000000000000000, 70.000000000000000, 0.0 },\n+  { -0.035213785160580421, 1.0000000000000000, 75.000000000000000, 0.0 },\n+  { 0.069395913784588037, 1.0000000000000000, 80.000000000000000, 0.0 },\n+  { 0.071233187582749768, 1.0000000000000000, 85.000000000000000, 0.0 },\n+  { -0.026187238607768244, 1.0000000000000000, 90.000000000000000, 0.0 },\n+  { -0.081827958724501215, 1.0000000000000000, 95.000000000000000, 0.0 },\n+  { -0.020372312002759834, 1.0000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler016 = 2.5000000000000014e-11;\n+const double toler022 = 2.5000000000000014e-11;\n \n // Test data for nu=2.0000000000000000.\n-// max(|f - f_GSL|): 7.1193051454088163e-15\n-// max(|f - f_GSL| / |f_GSL|): 3.9371586401654762e-12\n+// max(|f - f_GSL|): 7.1210398688847931e-15 at index 13\n+// max(|f - f_GSL| / |f_GSL|): 3.9367645301914862e-12\n+// mean(f - f_GSL): -6.4293188828390413e-17\n+// variance(f - f_GSL): 1.0170794505214399e-31\n+// stddev(f - f_GSL): 3.1891683093268064e-16\n const testcase_cyl_neumann<double>\n-data017[20] =\n+data023[20] =\n {\n-  { 0.36766288260552438, 2.0000000000000000, 5.0000000000000000 },\n-  { -0.0058680824422086830, 2.0000000000000000, 10.000000000000000 },\n-  { -0.20265447896733507, 2.0000000000000000, 15.000000000000000 },\n-  { -0.079191758245636165, 2.0000000000000000, 20.000000000000000 },\n-  { 0.11934303508534717, 2.0000000000000000, 25.000000000000000 },\n-  { 0.12292410306411394, 2.0000000000000000, 30.000000000000000 },\n-  { -0.038511545278264829, 2.0000000000000000, 35.000000000000000 },\n-  { -0.12622609234933840, 2.0000000000000000, 40.000000000000000 },\n-  { -0.032194922192042195, 2.0000000000000000, 45.000000000000000 },\n-  { 0.095793168727596537, 2.0000000000000000, 50.000000000000000 },\n-  { 0.080254497473415426, 2.0000000000000000, 55.000000000000000 },\n-  { -0.044296631897120527, 2.0000000000000000, 60.000000000000000 },\n-  { -0.097735569256347382, 2.0000000000000000, 65.000000000000000 },\n-  { -0.012019513676818605, 2.0000000000000000, 70.000000000000000 },\n-  { 0.084430013376826846, 2.0000000000000000, 75.000000000000000 },\n-  { 0.057355236934384719, 2.0000000000000000, 80.000000000000000 },\n-  { -0.047891809949547198, 2.0000000000000000, 85.000000000000000 },\n-  { -0.080358414490605934, 2.0000000000000000, 90.000000000000000 },\n-  { 0.0011004057182389746, 2.0000000000000000, 95.000000000000000 },\n-  { 0.076836867125027963, 2.0000000000000000, 100.00000000000000 },\n+  { 0.36766288260552438, 2.0000000000000000, 5.0000000000000000, 0.0 },\n+  { -0.0058680824422086830, 2.0000000000000000, 10.000000000000000, 0.0 },\n+  { -0.20265447896733507, 2.0000000000000000, 15.000000000000000, 0.0 },\n+  { -0.079191758245636165, 2.0000000000000000, 20.000000000000000, 0.0 },\n+  { 0.11934303508534717, 2.0000000000000000, 25.000000000000000, 0.0 },\n+  { 0.12292410306411394, 2.0000000000000000, 30.000000000000000, 0.0 },\n+  { -0.038511545278264829, 2.0000000000000000, 35.000000000000000, 0.0 },\n+  { -0.12622609234933840, 2.0000000000000000, 40.000000000000000, 0.0 },\n+  { -0.032194922192042195, 2.0000000000000000, 45.000000000000000, 0.0 },\n+  { 0.095793168727596537, 2.0000000000000000, 50.000000000000000, 0.0 },\n+  { 0.080254497473415426, 2.0000000000000000, 55.000000000000000, 0.0 },\n+  { -0.044296631897120527, 2.0000000000000000, 60.000000000000000, 0.0 },\n+  { -0.097735569256347382, 2.0000000000000000, 65.000000000000000, 0.0 },\n+  { -0.012019513676818605, 2.0000000000000000, 70.000000000000000, 0.0 },\n+  { 0.084430013376826846, 2.0000000000000000, 75.000000000000000, 0.0 },\n+  { 0.057355236934384719, 2.0000000000000000, 80.000000000000000, 0.0 },\n+  { -0.047891809949547198, 2.0000000000000000, 85.000000000000000, 0.0 },\n+  { -0.080358414490605934, 2.0000000000000000, 90.000000000000000, 0.0 },\n+  { 0.0011004057182389746, 2.0000000000000000, 95.000000000000000, 0.0 },\n+  { 0.076836867125027963, 2.0000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler017 = 2.5000000000000017e-10;\n+const double toler023 = 2.5000000000000017e-10;\n \n // Test data for nu=5.0000000000000000.\n-// max(|f - f_GSL|): 7.8097792989562098e-15\n-// max(|f - f_GSL| / |f_GSL|): 3.2731037832632215e-11\n+// max(|f - f_GSL|): 7.8125169094417357e-15 at index 12\n+// max(|f - f_GSL| / |f_GSL|): 3.2742511246789352e-11\n+// mean(f - f_GSL): 4.9826543715644767e-16\n+// variance(f - f_GSL): 8.7640351124736941e-31\n+// stddev(f - f_GSL): 9.3616425441658967e-16\n const testcase_cyl_neumann<double>\n-data018[20] =\n+data024[20] =\n {\n-  { -0.45369482249110193, 5.0000000000000000, 5.0000000000000000 },\n-  { 0.13540304768936234, 5.0000000000000000, 10.000000000000000 },\n-  { 0.16717271575940015, 5.0000000000000000, 15.000000000000000 },\n-  { -0.10003576788953220, 5.0000000000000000, 20.000000000000000 },\n-  { -0.14705799311372267, 5.0000000000000000, 25.000000000000000 },\n-  { 0.031627359289264301, 5.0000000000000000, 30.000000000000000 },\n-  { 0.13554781474770028, 5.0000000000000000, 35.000000000000000 },\n-  { 0.031869448780850247, 5.0000000000000000, 40.000000000000000 },\n-  { -0.10426932700176872, 5.0000000000000000, 45.000000000000000 },\n-  { -0.078548413913081594, 5.0000000000000000, 50.000000000000000 },\n-  { 0.055257033062858375, 5.0000000000000000, 55.000000000000000 },\n-  { 0.099464632840450887, 5.0000000000000000, 60.000000000000000 },\n-  { 0.00023860469499595305, 5.0000000000000000, 65.000000000000000 },\n-  { -0.091861802216406052, 5.0000000000000000, 70.000000000000000 },\n-  { -0.048383671296970042, 5.0000000000000000, 75.000000000000000 },\n-  { 0.060293667104896316, 5.0000000000000000, 80.000000000000000 },\n-  { 0.077506166682733996, 5.0000000000000000, 85.000000000000000 },\n-  { -0.015338764062239767, 5.0000000000000000, 90.000000000000000 },\n-  { -0.081531504045514361, 5.0000000000000000, 95.000000000000000 },\n-  { -0.029480196281661937, 5.0000000000000000, 100.00000000000000 },\n+  { -0.45369482249110193, 5.0000000000000000, 5.0000000000000000, 0.0 },\n+  { 0.13540304768936234, 5.0000000000000000, 10.000000000000000, 0.0 },\n+  { 0.16717271575940015, 5.0000000000000000, 15.000000000000000, 0.0 },\n+  { -0.10003576788953220, 5.0000000000000000, 20.000000000000000, 0.0 },\n+  { -0.14705799311372267, 5.0000000000000000, 25.000000000000000, 0.0 },\n+  { 0.031627359289264301, 5.0000000000000000, 30.000000000000000, 0.0 },\n+  { 0.13554781474770028, 5.0000000000000000, 35.000000000000000, 0.0 },\n+  { 0.031869448780850247, 5.0000000000000000, 40.000000000000000, 0.0 },\n+  { -0.10426932700176872, 5.0000000000000000, 45.000000000000000, 0.0 },\n+  { -0.078548413913081594, 5.0000000000000000, 50.000000000000000, 0.0 },\n+  { 0.055257033062858375, 5.0000000000000000, 55.000000000000000, 0.0 },\n+  { 0.099464632840450887, 5.0000000000000000, 60.000000000000000, 0.0 },\n+  { 0.00023860469499595305, 5.0000000000000000, 65.000000000000000, 0.0 },\n+  { -0.091861802216406052, 5.0000000000000000, 70.000000000000000, 0.0 },\n+  { -0.048383671296970042, 5.0000000000000000, 75.000000000000000, 0.0 },\n+  { 0.060293667104896316, 5.0000000000000000, 80.000000000000000, 0.0 },\n+  { 0.077506166682733996, 5.0000000000000000, 85.000000000000000, 0.0 },\n+  { -0.015338764062239767, 5.0000000000000000, 90.000000000000000, 0.0 },\n+  { -0.081531504045514361, 5.0000000000000000, 95.000000000000000, 0.0 },\n+  { -0.029480196281661937, 5.0000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler018 = 2.5000000000000013e-09;\n+const double toler024 = 2.5000000000000013e-09;\n \n // Test data for nu=10.000000000000000.\n-// max(|f - f_GSL|): 1.7763568394002505e-14\n-// max(|f - f_GSL| / |f_GSL|): 2.7466153115234563e-12\n+// max(|f - f_GSL|): 3.1974423109204508e-14 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 2.7474477272995600e-12\n+// mean(f - f_GSL): -1.4525707026091795e-15\n+// variance(f - f_GSL): 1.6326443279890062e-30\n+// stddev(f - f_GSL): 1.2777497125763739e-15\n const testcase_cyl_neumann<double>\n-data019[20] =\n+data025[20] =\n {\n-  { -25.129110095610095, 10.000000000000000, 5.0000000000000000 },\n-  { -0.35981415218340279, 10.000000000000000, 10.000000000000000 },\n-  { 0.21997141360195577, 10.000000000000000, 15.000000000000000 },\n-  { -0.043894653515658105, 10.000000000000000, 20.000000000000000 },\n-  { -0.14871839049980651, 10.000000000000000, 25.000000000000000 },\n-  { 0.075056702122397012, 10.000000000000000, 30.000000000000000 },\n-  { 0.12222473135000546, 10.000000000000000, 35.000000000000000 },\n-  { -0.046723877232677985, 10.000000000000000, 40.000000000000000 },\n-  { -0.11739339009322181, 10.000000000000000, 45.000000000000000 },\n-  { 0.0057238971820535930, 10.000000000000000, 50.000000000000000 },\n-  { 0.10733910125831631, 10.000000000000000, 55.000000000000000 },\n-  { 0.036290350559545478, 10.000000000000000, 60.000000000000000 },\n-  { -0.083239127691715667, 10.000000000000000, 65.000000000000000 },\n-  { -0.069639384138314858, 10.000000000000000, 70.000000000000000 },\n-  { 0.045798335061325066, 10.000000000000000, 75.000000000000000 },\n-  { 0.086269195064844456, 10.000000000000000, 80.000000000000000 },\n-  { -0.0018234674126248740, 10.000000000000000, 85.000000000000000 },\n-  { -0.082067762371231284, 10.000000000000000, 90.000000000000000 },\n-  { -0.038798074754578089, 10.000000000000000, 95.000000000000000 },\n-  { 0.058331574236414913, 10.000000000000000, 100.00000000000000 },\n+  { -25.129110095610095, 10.000000000000000, 5.0000000000000000, 0.0 },\n+  { -0.35981415218340279, 10.000000000000000, 10.000000000000000, 0.0 },\n+  { 0.21997141360195577, 10.000000000000000, 15.000000000000000, 0.0 },\n+  { -0.043894653515658105, 10.000000000000000, 20.000000000000000, 0.0 },\n+  { -0.14871839049980651, 10.000000000000000, 25.000000000000000, 0.0 },\n+  { 0.075056702122397012, 10.000000000000000, 30.000000000000000, 0.0 },\n+  { 0.12222473135000546, 10.000000000000000, 35.000000000000000, 0.0 },\n+  { -0.046723877232677985, 10.000000000000000, 40.000000000000000, 0.0 },\n+  { -0.11739339009322181, 10.000000000000000, 45.000000000000000, 0.0 },\n+  { 0.0057238971820535930, 10.000000000000000, 50.000000000000000, 0.0 },\n+  { 0.10733910125831631, 10.000000000000000, 55.000000000000000, 0.0 },\n+  { 0.036290350559545478, 10.000000000000000, 60.000000000000000, 0.0 },\n+  { -0.083239127691715667, 10.000000000000000, 65.000000000000000, 0.0 },\n+  { -0.069639384138314858, 10.000000000000000, 70.000000000000000, 0.0 },\n+  { 0.045798335061325066, 10.000000000000000, 75.000000000000000, 0.0 },\n+  { 0.086269195064844456, 10.000000000000000, 80.000000000000000, 0.0 },\n+  { -0.0018234674126248740, 10.000000000000000, 85.000000000000000, 0.0 },\n+  { -0.082067762371231284, 10.000000000000000, 90.000000000000000, 0.0 },\n+  { -0.038798074754578089, 10.000000000000000, 95.000000000000000, 0.0 },\n+  { 0.058331574236414913, 10.000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler019 = 2.5000000000000017e-10;\n+const double toler025 = 2.5000000000000017e-10;\n \n // Test data for nu=20.000000000000000.\n-// max(|f - f_GSL|): 7.1525573730468750e-07\n-// max(|f - f_GSL| / |f_GSL|): 1.7017552833615218e-12\n+// max(|f - f_GSL|): 1.0728836059570312e-06 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 1.7026122670117101e-12\n+// mean(f - f_GSL): -5.3644294743674170e-08\n+// variance(f - f_GSL): 1.5942991469572787e-16\n+// stddev(f - f_GSL): 1.2626555931675426e-08\n const testcase_cyl_neumann<double>\n-data020[20] =\n+data026[20] =\n {\n-  { -593396529.69143200, 20.000000000000000, 5.0000000000000000 },\n-  { -1597.4838482696259, 20.000000000000000, 10.000000000000000 },\n-  { -3.3087330924737621, 20.000000000000000, 15.000000000000000 },\n-  { -0.28548945860020319, 20.000000000000000, 20.000000000000000 },\n-  { 0.19804074776289243, 20.000000000000000, 25.000000000000000 },\n-  { -0.16848153948742683, 20.000000000000000, 30.000000000000000 },\n-  { 0.10102784152594022, 20.000000000000000, 35.000000000000000 },\n-  { 0.045161820565805755, 20.000000000000000, 40.000000000000000 },\n-  { -0.12556489308015448, 20.000000000000000, 45.000000000000000 },\n-  { 0.016442633948115834, 20.000000000000000, 50.000000000000000 },\n-  { 0.10853448778255181, 20.000000000000000, 55.000000000000000 },\n-  { -0.026721408520664701, 20.000000000000000, 60.000000000000000 },\n-  { -0.098780425256324175, 20.000000000000000, 65.000000000000000 },\n-  { 0.016201957786018233, 20.000000000000000, 70.000000000000000 },\n-  { 0.093591198265063721, 20.000000000000000, 75.000000000000000 },\n-  { 0.0040484400737296200, 20.000000000000000, 80.000000000000000 },\n-  { -0.086314929459920531, 20.000000000000000, 85.000000000000000 },\n-  { -0.028274110097231530, 20.000000000000000, 90.000000000000000 },\n-  { 0.072349520791638741, 20.000000000000000, 95.000000000000000 },\n-  { 0.051247973076188474, 20.000000000000000, 100.00000000000000 },\n+  { -593396529.69143200, 20.000000000000000, 5.0000000000000000, 0.0 },\n+  { -1597.4838482696259, 20.000000000000000, 10.000000000000000, 0.0 },\n+  { -3.3087330924737621, 20.000000000000000, 15.000000000000000, 0.0 },\n+  { -0.28548945860020319, 20.000000000000000, 20.000000000000000, 0.0 },\n+  { 0.19804074776289243, 20.000000000000000, 25.000000000000000, 0.0 },\n+  { -0.16848153948742683, 20.000000000000000, 30.000000000000000, 0.0 },\n+  { 0.10102784152594022, 20.000000000000000, 35.000000000000000, 0.0 },\n+  { 0.045161820565805755, 20.000000000000000, 40.000000000000000, 0.0 },\n+  { -0.12556489308015448, 20.000000000000000, 45.000000000000000, 0.0 },\n+  { 0.016442633948115834, 20.000000000000000, 50.000000000000000, 0.0 },\n+  { 0.10853448778255181, 20.000000000000000, 55.000000000000000, 0.0 },\n+  { -0.026721408520664701, 20.000000000000000, 60.000000000000000, 0.0 },\n+  { -0.098780425256324175, 20.000000000000000, 65.000000000000000, 0.0 },\n+  { 0.016201957786018233, 20.000000000000000, 70.000000000000000, 0.0 },\n+  { 0.093591198265063721, 20.000000000000000, 75.000000000000000, 0.0 },\n+  { 0.0040484400737296200, 20.000000000000000, 80.000000000000000, 0.0 },\n+  { -0.086314929459920531, 20.000000000000000, 85.000000000000000, 0.0 },\n+  { -0.028274110097231530, 20.000000000000000, 90.000000000000000, 0.0 },\n+  { 0.072349520791638741, 20.000000000000000, 95.000000000000000, 0.0 },\n+  { 0.051247973076188474, 20.000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler020 = 1.0000000000000006e-10;\n+const double toler026 = 1.0000000000000006e-10;\n \n // Test data for nu=50.000000000000000.\n-// max(|f - f_GSL|): 1.0522490333925732e+28\n-// max(|f - f_GSL| / |f_GSL|): 2.6658726302692481e-12\n+// max(|f - f_GSL|): 1.0522490333925732e+28 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 2.6670435417133106e-12\n+// mean(f - f_GSL): -5.2612451669628722e+26\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_cyl_neumann<double>\n-data021[20] =\n+data027[20] =\n {\n-  { -2.7888370175838930e+42, 50.000000000000000, 5.0000000000000000 },\n-  { -3.6410665018007421e+27, 50.000000000000000, 10.000000000000000 },\n-  { -1.0929732912175415e+19, 50.000000000000000, 15.000000000000000 },\n-  { -15606426801663.734, 50.000000000000000, 20.000000000000000 },\n-  { -753573251.44662738, 50.000000000000000, 25.000000000000000 },\n-  { -386759.32602734759, 50.000000000000000, 30.000000000000000 },\n-  { -1172.8690492895323, 50.000000000000000, 35.000000000000000 },\n-  { -15.615608873419944, 50.000000000000000, 40.000000000000000 },\n-  { -0.87058346204176895, 50.000000000000000, 45.000000000000000 },\n-  { -0.21031655464397747, 50.000000000000000, 50.000000000000000 },\n-  { 0.093048240412999389, 50.000000000000000, 55.000000000000000 },\n-  { 0.0086417699626744754, 50.000000000000000, 60.000000000000000 },\n-  { -0.025019788459222037, 50.000000000000000, 65.000000000000000 },\n-  { -0.0014815155191909152, 50.000000000000000, 70.000000000000000 },\n-  { 0.050335774732164121, 50.000000000000000, 75.000000000000000 },\n-  { -0.092924250967987232, 50.000000000000000, 80.000000000000000 },\n-  { 0.087332463030205698, 50.000000000000000, 85.000000000000000 },\n-  { -0.016164237701651860, 50.000000000000000, 90.000000000000000 },\n-  { -0.068897613820457934, 50.000000000000000, 95.000000000000000 },\n-  { 0.076505263944803045, 50.000000000000000, 100.00000000000000 },\n+  { -2.7888370175838930e+42, 50.000000000000000, 5.0000000000000000, 0.0 },\n+  { -3.6410665018007421e+27, 50.000000000000000, 10.000000000000000, 0.0 },\n+  { -1.0929732912175415e+19, 50.000000000000000, 15.000000000000000, 0.0 },\n+  { -15606426801663.734, 50.000000000000000, 20.000000000000000, 0.0 },\n+  { -753573251.44662738, 50.000000000000000, 25.000000000000000, 0.0 },\n+  { -386759.32602734759, 50.000000000000000, 30.000000000000000, 0.0 },\n+  { -1172.8690492895323, 50.000000000000000, 35.000000000000000, 0.0 },\n+  { -15.615608873419944, 50.000000000000000, 40.000000000000000, 0.0 },\n+  { -0.87058346204176895, 50.000000000000000, 45.000000000000000, 0.0 },\n+  { -0.21031655464397747, 50.000000000000000, 50.000000000000000, 0.0 },\n+  { 0.093048240412999389, 50.000000000000000, 55.000000000000000, 0.0 },\n+  { 0.0086417699626744754, 50.000000000000000, 60.000000000000000, 0.0 },\n+  { -0.025019788459222037, 50.000000000000000, 65.000000000000000, 0.0 },\n+  { -0.0014815155191909152, 50.000000000000000, 70.000000000000000, 0.0 },\n+  { 0.050335774732164121, 50.000000000000000, 75.000000000000000, 0.0 },\n+  { -0.092924250967987232, 50.000000000000000, 80.000000000000000, 0.0 },\n+  { 0.087332463030205698, 50.000000000000000, 85.000000000000000, 0.0 },\n+  { -0.016164237701651860, 50.000000000000000, 90.000000000000000, 0.0 },\n+  { -0.068897613820457934, 50.000000000000000, 95.000000000000000, 0.0 },\n+  { 0.076505263944803045, 50.000000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler021 = 2.5000000000000017e-10;\n+const double toler027 = 2.5000000000000017e-10;\n \n // Test data for nu=100.00000000000000.\n-// max(|f - f_GSL|): 6.3342780989716025e+102\n-// max(|f - f_GSL| / |f_GSL|): 1.2681517765786818e-13\n+// max(|f - f_GSL|): 6.3342780989716025e+102 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 1.2524955818061054e-13\n+// mean(f - f_GSL): -3.1671390494858015e+101\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_cyl_neumann<double>\n-data022[20] =\n+data028[20] =\n {\n-  { -5.0848639160196196e+115, 100.00000000000000, 5.0000000000000000 },\n-  { -4.8491482711800252e+85, 100.00000000000000, 10.000000000000000 },\n-  { -1.6375955323195320e+68, 100.00000000000000, 15.000000000000000 },\n-  { -8.2002648144679126e+55, 100.00000000000000, 20.000000000000000 },\n-  { -2.9712216432562368e+46, 100.00000000000000, 25.000000000000000 },\n-  { -7.2875284708240751e+38, 100.00000000000000, 30.000000000000000 },\n-  { -3.4251079902108953e+32, 100.00000000000000, 35.000000000000000 },\n-  { -1.4552439438101802e+27, 100.00000000000000, 40.000000000000000 },\n-  { -3.4506612476220073e+22, 100.00000000000000, 45.000000000000000 },\n-  { -3.2938001882025953e+18, 100.00000000000000, 50.000000000000000 },\n-  { -1005686182055527.4, 100.00000000000000, 55.000000000000000 },\n-  { -831892881402.11377, 100.00000000000000, 60.000000000000000 },\n-  { -1650863778.0598330, 100.00000000000000, 65.000000000000000 },\n-  { -7192614.1976097794, 100.00000000000000, 70.000000000000000 },\n-  { -64639.072261231595, 100.00000000000000, 75.000000000000000 },\n-  { -1152.5905185698466, 100.00000000000000, 80.000000000000000 },\n-  { -40.250761402101560, 100.00000000000000, 85.000000000000000 },\n-  { -2.8307771387185459, 100.00000000000000, 90.000000000000000 },\n-  { -0.45762200495904848, 100.00000000000000, 95.000000000000000 },\n-  { -0.16692141141757652, 100.00000000000000, 100.00000000000000 },\n+  { -5.0848639160196196e+115, 100.00000000000000, 5.0000000000000000, 0.0 },\n+  { -4.8491482711800252e+85, 100.00000000000000, 10.000000000000000, 0.0 },\n+  { -1.6375955323195320e+68, 100.00000000000000, 15.000000000000000, 0.0 },\n+  { -8.2002648144679115e+55, 100.00000000000000, 20.000000000000000, 0.0 },\n+  { -2.9712216432562368e+46, 100.00000000000000, 25.000000000000000, 0.0 },\n+  { -7.2875284708240751e+38, 100.00000000000000, 30.000000000000000, 0.0 },\n+  { -3.4251079902107980e+32, 100.00000000000000, 35.000000000000000, 0.0 },\n+  { -1.4552439438102214e+27, 100.00000000000000, 40.000000000000000, 0.0 },\n+  { -3.4506612476220073e+22, 100.00000000000000, 45.000000000000000, 0.0 },\n+  { -3.2938001882025477e+18, 100.00000000000000, 50.000000000000000, 0.0 },\n+  { -1005686182055520.4, 100.00000000000000, 55.000000000000000, 0.0 },\n+  { -831892881402.09033, 100.00000000000000, 60.000000000000000, 0.0 },\n+  { -1650863778.0598392, 100.00000000000000, 65.000000000000000, 0.0 },\n+  { -7192614.1976097794, 100.00000000000000, 70.000000000000000, 0.0 },\n+  { -64639.072261231595, 100.00000000000000, 75.000000000000000, 0.0 },\n+  { -1152.5905185698466, 100.00000000000000, 80.000000000000000, 0.0 },\n+  { -40.250761402101489, 100.00000000000000, 85.000000000000000, 0.0 },\n+  { -2.8307771387185294, 100.00000000000000, 90.000000000000000, 0.0 },\n+  { -0.45762200495904848, 100.00000000000000, 95.000000000000000, 0.0 },\n+  { -0.16692141141757652, 100.00000000000000, 100.00000000000000, 0.0 },\n };\n-const double toler022 = 1.0000000000000006e-11;\n+const double toler028 = 1.0000000000000006e-11;\n \n-template<typename Tp, unsigned int Num>\n+template<typename Ret, unsigned int Num>\n   void\n-  test(const testcase_cyl_neumann<Tp> (&data)[Num], Tp toler)\n+  test(const testcase_cyl_neumann<Ret> (&data)[Num], Ret toler)\n   {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n+    bool test __attribute__((unused)) = true;\n+    const Ret eps = std::numeric_limits<Ret>::epsilon();\n+    Ret max_abs_diff = -Ret(1);\n+    Ret max_abs_frac = -Ret(1);\n     unsigned int num_datum = Num;\n     for (unsigned int i = 0; i < num_datum; ++i)\n       {\n-\tconst Tp f = std::cyl_neumann(data[i].nu, data[i].x);\n-\tconst Tp f0 = data[i].f0;\n-\tconst Tp diff = f - f0;\n+\tconst Ret f = std::cyl_neumann(data[i].nu, data[i].x);\n+\tconst Ret f0 = data[i].f0;\n+\tconst Ret diff = f - f0;\n \tif (std::abs(diff) > max_abs_diff)\n \t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n+\tif (std::abs(f0) > Ret(10) * eps\n+\t && std::abs(f) > Ret(10) * eps)\n \t  {\n-\t    const Tp frac = diff / f0;\n+\t    const Ret frac = diff / f0;\n \t    if (std::abs(frac) > max_abs_frac)\n \t      max_abs_frac = std::abs(frac);\n \t  }\n@@ -692,12 +772,6 @@ template<typename Tp, unsigned int Num>\n int\n main()\n {\n-  test(data001, toler001);\n-  test(data002, toler002);\n-  test(data003, toler003);\n-  test(data004, toler004);\n-  test(data005, toler005);\n-  test(data006, toler006);\n   test(data007, toler007);\n   test(data008, toler008);\n   test(data009, toler009);\n@@ -714,5 +788,11 @@ main()\n   test(data020, toler020);\n   test(data021, toler021);\n   test(data022, toler022);\n+  test(data023, toler023);\n+  test(data024, toler024);\n+  test(data025, toler025);\n+  test(data026, toler026);\n+  test(data027, toler027);\n+  test(data028, toler028);\n   return 0;\n }"}, {"sha": "8c5e476ea0e537c74615c724597617c8e474ba9f", "filename": "libstdc++-v3/testsuite/special_functions/11_ellint_1/check_value.cc", "status": "modified", "additions": 303, "deletions": 246, "changes": 549, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F11_ellint_1%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F11_ellint_1%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F11_ellint_1%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -37,387 +37,444 @@\n #endif\n #include <specfun_testcase.h>\n \n-\n // Test data for k=-0.90000000000000002.\n-// max(|f - f_GSL|): 6.6613381477509392e-16\n-// max(|f - f_GSL| / |f_GSL|): 4.3381508715713370e-16\n+// max(|f - f_Boost|): 8.8817841970012523e-16 at index 7\n+// max(|f - f_Boost| / |f_Boost|): 5.7842011620951154e-16\n+// mean(f - f_Boost): 5.8286708792820721e-17\n+// variance(f - f_Boost): 4.1942474344433133e-34\n+// stddev(f - f_Boost): 2.0479861900030756e-17\n const testcase_ellint_1<double>\n data001[10] =\n {\n-  { 0.0000000000000000, -0.90000000000000002, 0.0000000000000000 },\n-  { 0.17525427376115024, -0.90000000000000002, 0.17453292519943295 },\n-  { 0.35492464591297446, -0.90000000000000002, 0.34906585039886590 },\n-  { 0.54388221416157112, -0.90000000000000002, 0.52359877559829882 },\n-  { 0.74797400423532490, -0.90000000000000002, 0.69813170079773179 },\n-  { 0.97463898451966458, -0.90000000000000002, 0.87266462599716477 },\n-  { 1.2334463254523440, -0.90000000000000002, 1.0471975511965976 },\n-  { 1.5355247765594913, -0.90000000000000002, 1.2217304763960306 },\n-  { 1.8882928567775121, -0.90000000000000002, 1.3962634015954636 },\n-  { 2.2805491384227703, -0.90000000000000002, 1.5707963267948966 },\n+  { 0.0000000000000000, -0.90000000000000002, 0.0000000000000000, 0.0 },\n+  { 0.17525427376115027, -0.90000000000000002, 0.17453292519943295, 0.0 },\n+  { 0.35492464591297446, -0.90000000000000002, 0.34906585039886590, 0.0 },\n+  { 0.54388221416157123, -0.90000000000000002, 0.52359877559829882, 0.0 },\n+  { 0.74797400423532512, -0.90000000000000002, 0.69813170079773179, 0.0 },\n+  { 0.97463898451966446, -0.90000000000000002, 0.87266462599716477, 0.0 },\n+  { 1.2334463254523438, -0.90000000000000002, 1.0471975511965976, 0.0 },\n+  { 1.5355247765594913, -0.90000000000000002, 1.2217304763960306, 0.0 },\n+  { 1.8882928567775126, -0.90000000000000002, 1.3962634015954636, 0.0 },\n+  { 2.2805491384227703, -0.90000000000000002, 1.5707963267948966, 0.0 },\n };\n const double toler001 = 2.5000000000000020e-13;\n \n // Test data for k=-0.80000000000000004.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 4.1175183168766718e-16\n+// max(|f - f_Boost|): 8.8817841970012523e-16 at index 8\n+// max(|f - f_Boost| / |f_Boost|): 5.2032670495747184e-16\n+// mean(f - f_Boost): 1.9428902930940239e-16\n+// variance(f - f_Boost): 2.7486111305082033e-32\n+// stddev(f - f_Boost): 1.6578935823834422e-16\n const testcase_ellint_1<double>\n data002[10] =\n {\n-  { 0.0000000000000000, -0.80000000000000004, 0.0000000000000000 },\n-  { 0.17510154241338899, -0.80000000000000004, 0.17453292519943295 },\n-  { 0.35365068839779390, -0.80000000000000004, 0.34906585039886590 },\n-  { 0.53926804409084550, -0.80000000000000004, 0.52359877559829882 },\n-  { 0.73587926028070361, -0.80000000000000004, 0.69813170079773179 },\n-  { 0.94770942970071170, -0.80000000000000004, 0.87266462599716477 },\n-  { 1.1789022995388236, -0.80000000000000004, 1.0471975511965976 },\n-  { 1.4323027881876009, -0.80000000000000004, 1.2217304763960306 },\n-  { 1.7069629739121674, -0.80000000000000004, 1.3962634015954636 },\n-  { 1.9953027776647296, -0.80000000000000004, 1.5707963267948966 },\n+  { 0.0000000000000000, -0.80000000000000004, 0.0000000000000000, 0.0 },\n+  { 0.17510154241338899, -0.80000000000000004, 0.17453292519943295, 0.0 },\n+  { 0.35365068839779396, -0.80000000000000004, 0.34906585039886590, 0.0 },\n+  { 0.53926804409084550, -0.80000000000000004, 0.52359877559829882, 0.0 },\n+  { 0.73587926028070372, -0.80000000000000004, 0.69813170079773179, 0.0 },\n+  { 0.94770942970071170, -0.80000000000000004, 0.87266462599716477, 0.0 },\n+  { 1.1789022995388236, -0.80000000000000004, 1.0471975511965976, 0.0 },\n+  { 1.4323027881876012, -0.80000000000000004, 1.2217304763960306, 0.0 },\n+  { 1.7069629739121677, -0.80000000000000004, 1.3962634015954636, 0.0 },\n+  { 1.9953027776647294, -0.80000000000000004, 1.5707963267948966, 0.0 },\n };\n const double toler002 = 2.5000000000000020e-13;\n \n // Test data for k=-0.69999999999999996.\n-// max(|f - f_GSL|): 3.3306690738754696e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.5930208052157665e-16\n+// max(|f - f_Boost|): 8.8817841970012523e-16 at index 8\n+// max(|f - f_Boost| / |f_Boost|): 5.5425633303580569e-16\n+// mean(f - f_Boost): 3.3306690738754695e-17\n+// variance(f - f_Boost): 2.8136647641852830e-32\n+// stddev(f - f_Boost): 1.6773982127644239e-16\n const testcase_ellint_1<double>\n data003[10] =\n {\n-  { 0.0000000000000000, -0.69999999999999996, 0.0000000000000000 },\n-  { 0.17496737466916723, -0.69999999999999996, 0.17453292519943295 },\n-  { 0.35254687535677925, -0.69999999999999996, 0.34906585039886590 },\n-  { 0.53536740275997119, -0.69999999999999996, 0.52359877559829882 },\n-  { 0.72603797651684454, -0.69999999999999996, 0.69813170079773179 },\n-  { 0.92698296348313458, -0.69999999999999996, 0.87266462599716477 },\n-  { 1.1400447527693316, -0.69999999999999996, 1.0471975511965976 },\n-  { 1.3657668117194073, -0.69999999999999996, 1.2217304763960306 },\n-  { 1.6024686895959159, -0.69999999999999996, 1.3962634015954636 },\n-  { 1.8456939983747236, -0.69999999999999996, 1.5707963267948966 },\n+  { 0.0000000000000000, -0.69999999999999996, 0.0000000000000000, 0.0 },\n+  { 0.17496737466916723, -0.69999999999999996, 0.17453292519943295, 0.0 },\n+  { 0.35254687535677931, -0.69999999999999996, 0.34906585039886590, 0.0 },\n+  { 0.53536740275997130, -0.69999999999999996, 0.52359877559829882, 0.0 },\n+  { 0.72603797651684454, -0.69999999999999996, 0.69813170079773179, 0.0 },\n+  { 0.92698296348313447, -0.69999999999999996, 0.87266462599716477, 0.0 },\n+  { 1.1400447527693316, -0.69999999999999996, 1.0471975511965976, 0.0 },\n+  { 1.3657668117194071, -0.69999999999999996, 1.2217304763960306, 0.0 },\n+  { 1.6024686895959162, -0.69999999999999996, 1.3962634015954636, 0.0 },\n+  { 1.8456939983747234, -0.69999999999999996, 1.5707963267948966, 0.0 },\n };\n const double toler003 = 2.5000000000000020e-13;\n \n // Test data for k=-0.59999999999999998.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.3664899092028927e-16\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 7\n+// max(|f - f_Boost| / |f_Boost|): 3.3664899092028927e-16\n+// mean(f - f_Boost): 5.2735593669694933e-17\n+// variance(f - f_Boost): 3.4333862218458872e-34\n+// stddev(f - f_Boost): 1.8529398861932589e-17\n const testcase_ellint_1<double>\n data004[10] =\n {\n-  { 0.0000000000000000, -0.59999999999999998, 0.0000000000000000 },\n-  { 0.17485154362988359, -0.59999999999999998, 0.17453292519943295 },\n-  { 0.35160509865544326, -0.59999999999999998, 0.34906585039886590 },\n-  { 0.53210652578446138, -0.59999999999999998, 0.52359877559829882 },\n-  { 0.71805304664485659, -0.59999999999999998, 0.69813170079773179 },\n-  { 0.91082759030195970, -0.59999999999999998, 0.87266462599716477 },\n-  { 1.1112333229323361, -0.59999999999999998, 1.0471975511965976 },\n-  { 1.3191461190365270, -0.59999999999999998, 1.2217304763960306 },\n-  { 1.5332022105084773, -0.59999999999999998, 1.3962634015954636 },\n-  { 1.7507538029157526, -0.59999999999999998, 1.5707963267948966 },\n+  { 0.0000000000000000, -0.59999999999999998, 0.0000000000000000, 0.0 },\n+  { 0.17485154362988359, -0.59999999999999998, 0.17453292519943295, 0.0 },\n+  { 0.35160509865544320, -0.59999999999999998, 0.34906585039886590, 0.0 },\n+  { 0.53210652578446138, -0.59999999999999998, 0.52359877559829882, 0.0 },\n+  { 0.71805304664485659, -0.59999999999999998, 0.69813170079773179, 0.0 },\n+  { 0.91082759030195981, -0.59999999999999998, 0.87266462599716477, 0.0 },\n+  { 1.1112333229323361, -0.59999999999999998, 1.0471975511965976, 0.0 },\n+  { 1.3191461190365270, -0.59999999999999998, 1.2217304763960306, 0.0 },\n+  { 1.5332022105084779, -0.59999999999999998, 1.3962634015954636, 0.0 },\n+  { 1.7507538029157523, -0.59999999999999998, 1.5707963267948966, 0.0 },\n };\n const double toler004 = 2.5000000000000020e-13;\n \n // Test data for k=-0.50000000000000000.\n-// max(|f - f_GSL|): 2.2204460492503131e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.1201497220602069e-16\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 7\n+// max(|f - f_Boost| / |f_Boost|): 3.4551389361831220e-16\n+// mean(f - f_Boost): -5.8286708792820721e-17\n+// variance(f - f_Boost): 4.1942474344433133e-34\n+// stddev(f - f_Boost): 2.0479861900030756e-17\n const testcase_ellint_1<double>\n data005[10] =\n {\n-  { 0.0000000000000000, -0.50000000000000000, 0.0000000000000000 },\n-  { 0.17475385514035785, -0.50000000000000000, 0.17453292519943295 },\n-  { 0.35081868470101585, -0.50000000000000000, 0.34906585039886590 },\n-  { 0.52942862705190574, -0.50000000000000000, 0.52359877559829882 },\n-  { 0.71164727562630314, -0.50000000000000000, 0.69813170079773179 },\n-  { 0.89824523594227768, -0.50000000000000000, 0.87266462599716477 },\n-  { 1.0895506700518851, -0.50000000000000000, 1.0471975511965976 },\n-  { 1.2853005857432931, -0.50000000000000000, 1.2217304763960306 },\n-  { 1.4845545520549484, -0.50000000000000000, 1.3962634015954636 },\n-  { 1.6857503548125963, -0.50000000000000000, 1.5707963267948966 },\n+  { 0.0000000000000000, -0.50000000000000000, 0.0000000000000000, 0.0 },\n+  { 0.17475385514035785, -0.50000000000000000, 0.17453292519943295, 0.0 },\n+  { 0.35081868470101579, -0.50000000000000000, 0.34906585039886590, 0.0 },\n+  { 0.52942862705190574, -0.50000000000000000, 0.52359877559829882, 0.0 },\n+  { 0.71164727562630326, -0.50000000000000000, 0.69813170079773179, 0.0 },\n+  { 0.89824523594227768, -0.50000000000000000, 0.87266462599716477, 0.0 },\n+  { 1.0895506700518853, -0.50000000000000000, 1.0471975511965976, 0.0 },\n+  { 1.2853005857432933, -0.50000000000000000, 1.2217304763960306, 0.0 },\n+  { 1.4845545520549488, -0.50000000000000000, 1.3962634015954636, 0.0 },\n+  { 1.6857503548125961, -0.50000000000000000, 1.5707963267948966, 0.0 },\n };\n const double toler005 = 2.5000000000000020e-13;\n \n-// Test data for k=-0.40000000000000002.\n-// max(|f - f_GSL|): 6.6613381477509392e-16\n-// max(|f - f_GSL| / |f_GSL|): 4.0617918857203532e-16\n+// Test data for k=-0.39999999999999991.\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 9\n+// max(|f - f_Boost| / |f_Boost|): 3.1423314994346225e-16\n+// mean(f - f_Boost): -6.9388939039072284e-17\n+// variance(f - f_Boost): 1.7333369499485123e-32\n+// stddev(f - f_Boost): 1.3165625507162629e-16\n const testcase_ellint_1<double>\n data006[10] =\n {\n-  { 0.0000000000000000, -0.40000000000000002, 0.0000000000000000 },\n-  { 0.17467414669441528, -0.40000000000000002, 0.17453292519943295 },\n-  { 0.35018222772483443, -0.40000000000000002, 0.34906585039886590 },\n-  { 0.52729015917508737, -0.40000000000000002, 0.52359877559829882 },\n-  { 0.70662374407341244, -0.40000000000000002, 0.69813170079773179 },\n-  { 0.88859210497602170, -0.40000000000000002, 0.87266462599716477 },\n-  { 1.0733136290471379, -0.40000000000000002, 1.0471975511965976 },\n-  { 1.2605612170157061, -0.40000000000000002, 1.2217304763960306 },\n-  { 1.4497513956433439, -0.40000000000000002, 1.3962634015954636 },\n-  { 1.6399998658645112, -0.40000000000000002, 1.5707963267948966 },\n+  { 0.0000000000000000, -0.39999999999999991, 0.0000000000000000, 0.0 },\n+  { 0.17467414669441528, -0.39999999999999991, 0.17453292519943295, 0.0 },\n+  { 0.35018222772483443, -0.39999999999999991, 0.34906585039886590, 0.0 },\n+  { 0.52729015917508748, -0.39999999999999991, 0.52359877559829882, 0.0 },\n+  { 0.70662374407341244, -0.39999999999999991, 0.69813170079773179, 0.0 },\n+  { 0.88859210497602159, -0.39999999999999991, 0.87266462599716477, 0.0 },\n+  { 1.0733136290471381, -0.39999999999999991, 1.0471975511965976, 0.0 },\n+  { 1.2605612170157066, -0.39999999999999991, 1.2217304763960306, 0.0 },\n+  { 1.4497513956433439, -0.39999999999999991, 1.3962634015954636, 0.0 },\n+  { 1.6399998658645112, -0.39999999999999991, 1.5707963267948966, 0.0 },\n };\n const double toler006 = 2.5000000000000020e-13;\n \n-// Test data for k=-0.30000000000000004.\n-// max(|f - f_GSL|): 8.8817841970012523e-16\n-// max(|f - f_GSL| / |f_GSL|): 6.3361874537309281e-16\n+// Test data for k=-0.29999999999999993.\n+// max(|f - f_Boost|): 6.6613381477509392e-16 at index 9\n+// max(|f - f_Boost| / |f_Boost|): 4.2241249691539529e-16\n+// mean(f - f_Boost): -8.3266726846886741e-17\n+// variance(f - f_Boost): 4.1942474344433135e-32\n+// stddev(f - f_Boost): 2.0479861900030756e-16\n const testcase_ellint_1<double>\n data007[10] =\n {\n-  { 0.0000000000000000, -0.30000000000000004, 0.0000000000000000 },\n-  { 0.17461228653000099, -0.30000000000000004, 0.17453292519943295 },\n-  { 0.34969146102798415, -0.30000000000000004, 0.34906585039886590 },\n-  { 0.52565822873726320, -0.30000000000000004, 0.52359877559829882 },\n-  { 0.70284226512408532, -0.30000000000000004, 0.69813170079773179 },\n-  { 0.88144139195111182, -0.30000000000000004, 0.87266462599716477 },\n-  { 1.0614897067260520, -0.30000000000000004, 1.0471975511965976 },\n-  { 1.2428416824174218, -0.30000000000000004, 1.2217304763960306 },\n-  { 1.4251795877015927, -0.30000000000000004, 1.3962634015954636 },\n-  { 1.6080486199305128, -0.30000000000000004, 1.5707963267948966 },\n+  { 0.0000000000000000, -0.29999999999999993, 0.0000000000000000, 0.0 },\n+  { 0.17461228653000099, -0.29999999999999993, 0.17453292519943295, 0.0 },\n+  { 0.34969146102798421, -0.29999999999999993, 0.34906585039886590, 0.0 },\n+  { 0.52565822873726309, -0.29999999999999993, 0.52359877559829882, 0.0 },\n+  { 0.70284226512408543, -0.29999999999999993, 0.69813170079773179, 0.0 },\n+  { 0.88144139195111171, -0.29999999999999993, 0.87266462599716477, 0.0 },\n+  { 1.0614897067260520, -0.29999999999999993, 1.0471975511965976, 0.0 },\n+  { 1.2428416824174220, -0.29999999999999993, 1.2217304763960306, 0.0 },\n+  { 1.4251795877015929, -0.29999999999999993, 1.3962634015954636, 0.0 },\n+  { 1.6080486199305126, -0.29999999999999993, 1.5707963267948966, 0.0 },\n };\n const double toler007 = 2.5000000000000020e-13;\n \n // Test data for k=-0.19999999999999996.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 4.2156475739151676e-16\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 6\n+// max(|f - f_Boost| / |f_Boost|): 4.2156475739151676e-16\n+// mean(f - f_Boost): -9.7144514654701197e-17\n+// variance(f - f_Boost): 1.1650687317898094e-33\n+// stddev(f - f_Boost): 3.4133103166717924e-17\n const testcase_ellint_1<double>\n data008[10] =\n {\n-  { 0.0000000000000000, -0.19999999999999996, 0.0000000000000000 },\n-  { 0.17456817290292809, -0.19999999999999996, 0.17453292519943295 },\n-  { 0.34934315932086801, -0.19999999999999996, 0.34906585039886590 },\n-  { 0.52450880529443988, -0.19999999999999996, 0.52359877559829882 },\n-  { 0.70020491009844876, -0.19999999999999996, 0.69813170079773179 },\n-  { 0.87651006649967955, -0.19999999999999996, 0.87266462599716477 },\n-  { 1.0534305870298994, -0.19999999999999996, 1.0471975511965976 },\n-  { 1.2308975521670784, -0.19999999999999996, 1.2217304763960306 },\n-  { 1.4087733584990738, -0.19999999999999996, 1.3962634015954636 },\n-  { 1.5868678474541660, -0.19999999999999996, 1.5707963267948966 },\n+  { 0.0000000000000000, -0.19999999999999996, 0.0000000000000000, 0.0 },\n+  { 0.17456817290292806, -0.19999999999999996, 0.17453292519943295, 0.0 },\n+  { 0.34934315932086796, -0.19999999999999996, 0.34906585039886590, 0.0 },\n+  { 0.52450880529443988, -0.19999999999999996, 0.52359877559829882, 0.0 },\n+  { 0.70020491009844887, -0.19999999999999996, 0.69813170079773179, 0.0 },\n+  { 0.87651006649967977, -0.19999999999999996, 0.87266462599716477, 0.0 },\n+  { 1.0534305870298994, -0.19999999999999996, 1.0471975511965976, 0.0 },\n+  { 1.2308975521670789, -0.19999999999999996, 1.2217304763960306, 0.0 },\n+  { 1.4087733584990738, -0.19999999999999996, 1.3962634015954636, 0.0 },\n+  { 1.5868678474541662, -0.19999999999999996, 1.5707963267948966, 0.0 },\n };\n const double toler008 = 2.5000000000000020e-13;\n \n // Test data for k=-0.099999999999999978.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.1735566504509650e-16\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 8\n+// max(|f - f_Boost| / |f_Boost|): 3.1735566504509645e-16\n+// mean(f - f_Boost): -3.6082248300317589e-17\n+// variance(f - f_Boost): 8.2258607846939269e-33\n+// stddev(f - f_Boost): 9.0696531271564778e-17\n const testcase_ellint_1<double>\n data009[10] =\n {\n-  { 0.0000000000000000, -0.099999999999999978, 0.0000000000000000 },\n-  { 0.17454173353063659, -0.099999999999999978, 0.17453292519943295 },\n-  { 0.34913506721468091, -0.099999999999999978, 0.34906585039886590 },\n-  { 0.52382550016538942, -0.099999999999999978, 0.52359877559829882 },\n-  { 0.69864700854177020, -0.099999999999999978, 0.69813170079773179 },\n-  { 0.87361792586964870, -0.099999999999999978, 0.87266462599716477 },\n-  { 1.0487386319621683, -0.099999999999999978, 1.0471975511965976 },\n-  { 1.2239913752078757, -0.099999999999999978, 1.2217304763960306 },\n-  { 1.3993423113684049, -0.099999999999999978, 1.3962634015954636 },\n-  { 1.5747455615173562, -0.099999999999999978, 1.5707963267948966 },\n+  { 0.0000000000000000, -0.099999999999999978, 0.0000000000000000, 0.0 },\n+  { 0.17454173353063662, -0.099999999999999978, 0.17453292519943295, 0.0 },\n+  { 0.34913506721468096, -0.099999999999999978, 0.34906585039886590, 0.0 },\n+  { 0.52382550016538953, -0.099999999999999978, 0.52359877559829882, 0.0 },\n+  { 0.69864700854177020, -0.099999999999999978, 0.69813170079773179, 0.0 },\n+  { 0.87361792586964859, -0.099999999999999978, 0.87266462599716477, 0.0 },\n+  { 1.0487386319621685, -0.099999999999999978, 1.0471975511965976, 0.0 },\n+  { 1.2239913752078759, -0.099999999999999978, 1.2217304763960306, 0.0 },\n+  { 1.3993423113684051, -0.099999999999999978, 1.3962634015954636, 0.0 },\n+  { 1.5747455615173558, -0.099999999999999978, 1.5707963267948966, 0.0 },\n };\n const double toler009 = 2.5000000000000020e-13;\n \n // Test data for k=0.0000000000000000.\n-// max(|f - f_GSL|): 2.2204460492503131e-16\n-// max(|f - f_GSL| / |f_GSL|): 2.1203697876423452e-16\n+// max(|f - f_Boost|): 2.2204460492503131e-16 at index 7\n+// max(|f - f_Boost| / |f_Boost|): 2.1203697876423447e-16\n+// mean(f - f_Boost): -1.9428902930940238e-17\n+// variance(f - f_Boost): 4.6602749271592373e-35\n+// stddev(f - f_Boost): 6.8266206333435850e-18\n const testcase_ellint_1<double>\n data010[10] =\n {\n-  { 0.0000000000000000, 0.0000000000000000, 0.0000000000000000 },\n-  { 0.17453292519943292, 0.0000000000000000, 0.17453292519943295 },\n-  { 0.34906585039886584, 0.0000000000000000, 0.34906585039886590 },\n-  { 0.52359877559829870, 0.0000000000000000, 0.52359877559829882 },\n-  { 0.69813170079773168, 0.0000000000000000, 0.69813170079773179 },\n-  { 0.87266462599716477, 0.0000000000000000, 0.87266462599716477 },\n-  { 1.0471975511965974, 0.0000000000000000, 1.0471975511965976 },\n-  { 1.2217304763960304, 0.0000000000000000, 1.2217304763960306 },\n-  { 1.3962634015954631, 0.0000000000000000, 1.3962634015954636 },\n-  { 1.5707963267948966, 0.0000000000000000, 1.5707963267948966 },\n+  { 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 0.17453292519943295, 0.0000000000000000, 0.17453292519943295, 0.0 },\n+  { 0.34906585039886590, 0.0000000000000000, 0.34906585039886590, 0.0 },\n+  { 0.52359877559829882, 0.0000000000000000, 0.52359877559829882, 0.0 },\n+  { 0.69813170079773179, 0.0000000000000000, 0.69813170079773179, 0.0 },\n+  { 0.87266462599716477, 0.0000000000000000, 0.87266462599716477, 0.0 },\n+  { 1.0471975511965976, 0.0000000000000000, 1.0471975511965976, 0.0 },\n+  { 1.2217304763960306, 0.0000000000000000, 1.2217304763960306, 0.0 },\n+  { 1.3962634015954636, 0.0000000000000000, 1.3962634015954636, 0.0 },\n+  { 1.5707963267948966, 0.0000000000000000, 1.5707963267948966, 0.0 },\n };\n const double toler010 = 2.5000000000000020e-13;\n \n // Test data for k=0.10000000000000009.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.1735566504509650e-16\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 8\n+// max(|f - f_Boost| / |f_Boost|): 3.1735566504509645e-16\n+// mean(f - f_Boost): -5.8286708792820721e-17\n+// variance(f - f_Boost): 4.1942474344433133e-34\n+// stddev(f - f_Boost): 2.0479861900030756e-17\n const testcase_ellint_1<double>\n data011[10] =\n {\n-  { 0.0000000000000000, 0.10000000000000009, 0.0000000000000000 },\n-  { 0.17454173353063659, 0.10000000000000009, 0.17453292519943295 },\n-  { 0.34913506721468091, 0.10000000000000009, 0.34906585039886590 },\n-  { 0.52382550016538942, 0.10000000000000009, 0.52359877559829882 },\n-  { 0.69864700854177020, 0.10000000000000009, 0.69813170079773179 },\n-  { 0.87361792586964870, 0.10000000000000009, 0.87266462599716477 },\n-  { 1.0487386319621683, 0.10000000000000009, 1.0471975511965976 },\n-  { 1.2239913752078757, 0.10000000000000009, 1.2217304763960306 },\n-  { 1.3993423113684049, 0.10000000000000009, 1.3962634015954636 },\n-  { 1.5747455615173562, 0.10000000000000009, 1.5707963267948966 },\n+  { 0.0000000000000000, 0.10000000000000009, 0.0000000000000000, 0.0 },\n+  { 0.17454173353063662, 0.10000000000000009, 0.17453292519943295, 0.0 },\n+  { 0.34913506721468096, 0.10000000000000009, 0.34906585039886590, 0.0 },\n+  { 0.52382550016538953, 0.10000000000000009, 0.52359877559829882, 0.0 },\n+  { 0.69864700854177020, 0.10000000000000009, 0.69813170079773179, 0.0 },\n+  { 0.87361792586964859, 0.10000000000000009, 0.87266462599716477, 0.0 },\n+  { 1.0487386319621685, 0.10000000000000009, 1.0471975511965976, 0.0 },\n+  { 1.2239913752078759, 0.10000000000000009, 1.2217304763960306, 0.0 },\n+  { 1.3993423113684051, 0.10000000000000009, 1.3962634015954636, 0.0 },\n+  { 1.5747455615173560, 0.10000000000000009, 1.5707963267948966, 0.0 },\n };\n const double toler011 = 2.5000000000000020e-13;\n \n-// Test data for k=0.19999999999999996.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 4.2156475739151676e-16\n+// Test data for k=0.20000000000000018.\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 6\n+// max(|f - f_Boost| / |f_Boost|): 4.2156475739151676e-16\n+// mean(f - f_Boost): -9.7144514654701197e-17\n+// variance(f - f_Boost): 1.1650687317898094e-33\n+// stddev(f - f_Boost): 3.4133103166717924e-17\n const testcase_ellint_1<double>\n data012[10] =\n {\n-  { 0.0000000000000000, 0.19999999999999996, 0.0000000000000000 },\n-  { 0.17456817290292809, 0.19999999999999996, 0.17453292519943295 },\n-  { 0.34934315932086801, 0.19999999999999996, 0.34906585039886590 },\n-  { 0.52450880529443988, 0.19999999999999996, 0.52359877559829882 },\n-  { 0.70020491009844876, 0.19999999999999996, 0.69813170079773179 },\n-  { 0.87651006649967955, 0.19999999999999996, 0.87266462599716477 },\n-  { 1.0534305870298994, 0.19999999999999996, 1.0471975511965976 },\n-  { 1.2308975521670784, 0.19999999999999996, 1.2217304763960306 },\n-  { 1.4087733584990738, 0.19999999999999996, 1.3962634015954636 },\n-  { 1.5868678474541660, 0.19999999999999996, 1.5707963267948966 },\n+  { 0.0000000000000000, 0.20000000000000018, 0.0000000000000000, 0.0 },\n+  { 0.17456817290292806, 0.20000000000000018, 0.17453292519943295, 0.0 },\n+  { 0.34934315932086796, 0.20000000000000018, 0.34906585039886590, 0.0 },\n+  { 0.52450880529443988, 0.20000000000000018, 0.52359877559829882, 0.0 },\n+  { 0.70020491009844887, 0.20000000000000018, 0.69813170079773179, 0.0 },\n+  { 0.87651006649967977, 0.20000000000000018, 0.87266462599716477, 0.0 },\n+  { 1.0534305870298994, 0.20000000000000018, 1.0471975511965976, 0.0 },\n+  { 1.2308975521670789, 0.20000000000000018, 1.2217304763960306, 0.0 },\n+  { 1.4087733584990738, 0.20000000000000018, 1.3962634015954636, 0.0 },\n+  { 1.5868678474541662, 0.20000000000000018, 1.5707963267948966, 0.0 },\n };\n const double toler012 = 2.5000000000000020e-13;\n \n // Test data for k=0.30000000000000004.\n-// max(|f - f_GSL|): 8.8817841970012523e-16\n-// max(|f - f_GSL| / |f_GSL|): 6.3361874537309281e-16\n+// max(|f - f_Boost|): 8.8817841970012523e-16 at index 9\n+// max(|f - f_Boost| / |f_Boost|): 5.5233306300061082e-16\n+// mean(f - f_Boost): -1.0547118733938987e-16\n+// variance(f - f_Boost): 7.5633408838247182e-32\n+// stddev(f - f_Boost): 2.7501528837184157e-16\n const testcase_ellint_1<double>\n data013[10] =\n {\n-  { 0.0000000000000000, 0.30000000000000004, 0.0000000000000000 },\n-  { 0.17461228653000099, 0.30000000000000004, 0.17453292519943295 },\n-  { 0.34969146102798415, 0.30000000000000004, 0.34906585039886590 },\n-  { 0.52565822873726320, 0.30000000000000004, 0.52359877559829882 },\n-  { 0.70284226512408532, 0.30000000000000004, 0.69813170079773179 },\n-  { 0.88144139195111182, 0.30000000000000004, 0.87266462599716477 },\n-  { 1.0614897067260520, 0.30000000000000004, 1.0471975511965976 },\n-  { 1.2428416824174218, 0.30000000000000004, 1.2217304763960306 },\n-  { 1.4251795877015927, 0.30000000000000004, 1.3962634015954636 },\n-  { 1.6080486199305128, 0.30000000000000004, 1.5707963267948966 },\n+  { 0.0000000000000000, 0.30000000000000004, 0.0000000000000000, 0.0 },\n+  { 0.17461228653000099, 0.30000000000000004, 0.17453292519943295, 0.0 },\n+  { 0.34969146102798421, 0.30000000000000004, 0.34906585039886590, 0.0 },\n+  { 0.52565822873726309, 0.30000000000000004, 0.52359877559829882, 0.0 },\n+  { 0.70284226512408543, 0.30000000000000004, 0.69813170079773179, 0.0 },\n+  { 0.88144139195111171, 0.30000000000000004, 0.87266462599716477, 0.0 },\n+  { 1.0614897067260520, 0.30000000000000004, 1.0471975511965976, 0.0 },\n+  { 1.2428416824174220, 0.30000000000000004, 1.2217304763960306, 0.0 },\n+  { 1.4251795877015929, 0.30000000000000004, 1.3962634015954636, 0.0 },\n+  { 1.6080486199305128, 0.30000000000000004, 1.5707963267948966, 0.0 },\n };\n const double toler013 = 2.5000000000000020e-13;\n \n-// Test data for k=0.39999999999999991.\n-// max(|f - f_GSL|): 8.8817841970012523e-16\n-// max(|f - f_GSL| / |f_GSL|): 5.4157225142938039e-16\n+// Test data for k=0.40000000000000013.\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 9\n+// max(|f - f_Boost| / |f_Boost|): 3.1423314994346225e-16\n+// mean(f - f_Boost): -4.7184478546569152e-17\n+// variance(f - f_Boost): 1.9448563670505968e-32\n+// stddev(f - f_Boost): 1.3945810722401896e-16\n const testcase_ellint_1<double>\n data014[10] =\n {\n-  { 0.0000000000000000, 0.39999999999999991, 0.0000000000000000 },\n-  { 0.17467414669441528, 0.39999999999999991, 0.17453292519943295 },\n-  { 0.35018222772483443, 0.39999999999999991, 0.34906585039886590 },\n-  { 0.52729015917508737, 0.39999999999999991, 0.52359877559829882 },\n-  { 0.70662374407341244, 0.39999999999999991, 0.69813170079773179 },\n-  { 0.88859210497602170, 0.39999999999999991, 0.87266462599716477 },\n-  { 1.0733136290471379, 0.39999999999999991, 1.0471975511965976 },\n-  { 1.2605612170157061, 0.39999999999999991, 1.2217304763960306 },\n-  { 1.4497513956433439, 0.39999999999999991, 1.3962634015954636 },\n-  { 1.6399998658645112, 0.39999999999999991, 1.5707963267948966 },\n+  { 0.0000000000000000, 0.40000000000000013, 0.0000000000000000, 0.0 },\n+  { 0.17467414669441528, 0.40000000000000013, 0.17453292519943295, 0.0 },\n+  { 0.35018222772483443, 0.40000000000000013, 0.34906585039886590, 0.0 },\n+  { 0.52729015917508748, 0.40000000000000013, 0.52359877559829882, 0.0 },\n+  { 0.70662374407341244, 0.40000000000000013, 0.69813170079773179, 0.0 },\n+  { 0.88859210497602159, 0.40000000000000013, 0.87266462599716477, 0.0 },\n+  { 1.0733136290471381, 0.40000000000000013, 1.0471975511965976, 0.0 },\n+  { 1.2605612170157066, 0.40000000000000013, 1.2217304763960306, 0.0 },\n+  { 1.4497513956433439, 0.40000000000000013, 1.3962634015954636, 0.0 },\n+  { 1.6399998658645112, 0.40000000000000013, 1.5707963267948966, 0.0 },\n };\n const double toler014 = 2.5000000000000020e-13;\n \n // Test data for k=0.50000000000000000.\n-// max(|f - f_GSL|): 2.2204460492503131e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.1201497220602069e-16\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 7\n+// max(|f - f_Boost| / |f_Boost|): 3.4551389361831220e-16\n+// mean(f - f_Boost): -5.8286708792820721e-17\n+// variance(f - f_Boost): 4.1942474344433133e-34\n+// stddev(f - f_Boost): 2.0479861900030756e-17\n const testcase_ellint_1<double>\n data015[10] =\n {\n-  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000 },\n-  { 0.17475385514035785, 0.50000000000000000, 0.17453292519943295 },\n-  { 0.35081868470101585, 0.50000000000000000, 0.34906585039886590 },\n-  { 0.52942862705190574, 0.50000000000000000, 0.52359877559829882 },\n-  { 0.71164727562630314, 0.50000000000000000, 0.69813170079773179 },\n-  { 0.89824523594227768, 0.50000000000000000, 0.87266462599716477 },\n-  { 1.0895506700518851, 0.50000000000000000, 1.0471975511965976 },\n-  { 1.2853005857432931, 0.50000000000000000, 1.2217304763960306 },\n-  { 1.4845545520549484, 0.50000000000000000, 1.3962634015954636 },\n-  { 1.6857503548125963, 0.50000000000000000, 1.5707963267948966 },\n+  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000, 0.0 },\n+  { 0.17475385514035785, 0.50000000000000000, 0.17453292519943295, 0.0 },\n+  { 0.35081868470101579, 0.50000000000000000, 0.34906585039886590, 0.0 },\n+  { 0.52942862705190574, 0.50000000000000000, 0.52359877559829882, 0.0 },\n+  { 0.71164727562630326, 0.50000000000000000, 0.69813170079773179, 0.0 },\n+  { 0.89824523594227768, 0.50000000000000000, 0.87266462599716477, 0.0 },\n+  { 1.0895506700518853, 0.50000000000000000, 1.0471975511965976, 0.0 },\n+  { 1.2853005857432933, 0.50000000000000000, 1.2217304763960306, 0.0 },\n+  { 1.4845545520549488, 0.50000000000000000, 1.3962634015954636, 0.0 },\n+  { 1.6857503548125961, 0.50000000000000000, 1.5707963267948966, 0.0 },\n };\n const double toler015 = 2.5000000000000020e-13;\n \n // Test data for k=0.60000000000000009.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.3664899092028927e-16\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 7\n+// max(|f - f_Boost| / |f_Boost|): 3.3664899092028927e-16\n+// mean(f - f_Boost): 7.4940054162198071e-17\n+// variance(f - f_Boost): 2.6715739327327140e-33\n+// stddev(f - f_Boost): 5.1687270509601433e-17\n const testcase_ellint_1<double>\n data016[10] =\n {\n-  { 0.0000000000000000, 0.60000000000000009, 0.0000000000000000 },\n-  { 0.17485154362988359, 0.60000000000000009, 0.17453292519943295 },\n-  { 0.35160509865544326, 0.60000000000000009, 0.34906585039886590 },\n-  { 0.53210652578446138, 0.60000000000000009, 0.52359877559829882 },\n-  { 0.71805304664485659, 0.60000000000000009, 0.69813170079773179 },\n-  { 0.91082759030195970, 0.60000000000000009, 0.87266462599716477 },\n-  { 1.1112333229323361, 0.60000000000000009, 1.0471975511965976 },\n-  { 1.3191461190365270, 0.60000000000000009, 1.2217304763960306 },\n-  { 1.5332022105084775, 0.60000000000000009, 1.3962634015954636 },\n-  { 1.7507538029157526, 0.60000000000000009, 1.5707963267948966 },\n+  { 0.0000000000000000, 0.60000000000000009, 0.0000000000000000, 0.0 },\n+  { 0.17485154362988359, 0.60000000000000009, 0.17453292519943295, 0.0 },\n+  { 0.35160509865544320, 0.60000000000000009, 0.34906585039886590, 0.0 },\n+  { 0.53210652578446138, 0.60000000000000009, 0.52359877559829882, 0.0 },\n+  { 0.71805304664485659, 0.60000000000000009, 0.69813170079773179, 0.0 },\n+  { 0.91082759030195981, 0.60000000000000009, 0.87266462599716477, 0.0 },\n+  { 1.1112333229323361, 0.60000000000000009, 1.0471975511965976, 0.0 },\n+  { 1.3191461190365270, 0.60000000000000009, 1.2217304763960306, 0.0 },\n+  { 1.5332022105084779, 0.60000000000000009, 1.3962634015954636, 0.0 },\n+  { 1.7507538029157526, 0.60000000000000009, 1.5707963267948966, 0.0 },\n };\n const double toler016 = 2.5000000000000020e-13;\n \n-// Test data for k=0.69999999999999996.\n-// max(|f - f_GSL|): 3.3306690738754696e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.5930208052157665e-16\n+// Test data for k=0.70000000000000018.\n+// max(|f - f_Boost|): 6.6613381477509392e-16 at index 8\n+// max(|f - f_Boost| / |f_Boost|): 4.1569224977685422e-16\n+// mean(f - f_Boost): -1.1102230246251566e-17\n+// variance(f - f_Boost): 2.3145398087213714e-32\n+// stddev(f - f_Boost): 1.5213611697165703e-16\n const testcase_ellint_1<double>\n data017[10] =\n {\n-  { 0.0000000000000000, 0.69999999999999996, 0.0000000000000000 },\n-  { 0.17496737466916723, 0.69999999999999996, 0.17453292519943295 },\n-  { 0.35254687535677925, 0.69999999999999996, 0.34906585039886590 },\n-  { 0.53536740275997119, 0.69999999999999996, 0.52359877559829882 },\n-  { 0.72603797651684454, 0.69999999999999996, 0.69813170079773179 },\n-  { 0.92698296348313458, 0.69999999999999996, 0.87266462599716477 },\n-  { 1.1400447527693316, 0.69999999999999996, 1.0471975511965976 },\n-  { 1.3657668117194073, 0.69999999999999996, 1.2217304763960306 },\n-  { 1.6024686895959159, 0.69999999999999996, 1.3962634015954636 },\n-  { 1.8456939983747236, 0.69999999999999996, 1.5707963267948966 },\n+  { 0.0000000000000000, 0.70000000000000018, 0.0000000000000000, 0.0 },\n+  { 0.17496737466916723, 0.70000000000000018, 0.17453292519943295, 0.0 },\n+  { 0.35254687535677931, 0.70000000000000018, 0.34906585039886590, 0.0 },\n+  { 0.53536740275997130, 0.70000000000000018, 0.52359877559829882, 0.0 },\n+  { 0.72603797651684454, 0.70000000000000018, 0.69813170079773179, 0.0 },\n+  { 0.92698296348313447, 0.70000000000000018, 0.87266462599716477, 0.0 },\n+  { 1.1400447527693318, 0.70000000000000018, 1.0471975511965976, 0.0 },\n+  { 1.3657668117194073, 0.70000000000000018, 1.2217304763960306, 0.0 },\n+  { 1.6024686895959164, 0.70000000000000018, 1.3962634015954636, 0.0 },\n+  { 1.8456939983747236, 0.70000000000000018, 1.5707963267948966, 0.0 },\n };\n const double toler017 = 2.5000000000000020e-13;\n \n // Test data for k=0.80000000000000004.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 4.1175183168766718e-16\n+// max(|f - f_Boost|): 8.8817841970012523e-16 at index 8\n+// max(|f - f_Boost| / |f_Boost|): 5.2032670495747184e-16\n+// mean(f - f_Boost): 1.9428902930940239e-16\n+// variance(f - f_Boost): 2.7486111305082033e-32\n+// stddev(f - f_Boost): 1.6578935823834422e-16\n const testcase_ellint_1<double>\n data018[10] =\n {\n-  { 0.0000000000000000, 0.80000000000000004, 0.0000000000000000 },\n-  { 0.17510154241338899, 0.80000000000000004, 0.17453292519943295 },\n-  { 0.35365068839779390, 0.80000000000000004, 0.34906585039886590 },\n-  { 0.53926804409084550, 0.80000000000000004, 0.52359877559829882 },\n-  { 0.73587926028070361, 0.80000000000000004, 0.69813170079773179 },\n-  { 0.94770942970071170, 0.80000000000000004, 0.87266462599716477 },\n-  { 1.1789022995388236, 0.80000000000000004, 1.0471975511965976 },\n-  { 1.4323027881876009, 0.80000000000000004, 1.2217304763960306 },\n-  { 1.7069629739121674, 0.80000000000000004, 1.3962634015954636 },\n-  { 1.9953027776647296, 0.80000000000000004, 1.5707963267948966 },\n+  { 0.0000000000000000, 0.80000000000000004, 0.0000000000000000, 0.0 },\n+  { 0.17510154241338899, 0.80000000000000004, 0.17453292519943295, 0.0 },\n+  { 0.35365068839779396, 0.80000000000000004, 0.34906585039886590, 0.0 },\n+  { 0.53926804409084550, 0.80000000000000004, 0.52359877559829882, 0.0 },\n+  { 0.73587926028070372, 0.80000000000000004, 0.69813170079773179, 0.0 },\n+  { 0.94770942970071170, 0.80000000000000004, 0.87266462599716477, 0.0 },\n+  { 1.1789022995388236, 0.80000000000000004, 1.0471975511965976, 0.0 },\n+  { 1.4323027881876012, 0.80000000000000004, 1.2217304763960306, 0.0 },\n+  { 1.7069629739121677, 0.80000000000000004, 1.3962634015954636, 0.0 },\n+  { 1.9953027776647294, 0.80000000000000004, 1.5707963267948966, 0.0 },\n };\n const double toler018 = 2.5000000000000020e-13;\n \n-// Test data for k=0.89999999999999991.\n-// max(|f - f_GSL|): 8.8817841970012523e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.8945813740035884e-16\n+// Test data for k=0.90000000000000013.\n+// max(|f - f_Boost|): 8.8817841970012523e-16 at index 9\n+// max(|f - f_Boost| / |f_Boost|): 4.3381508715713360e-16\n+// mean(f - f_Boost): 1.4710455076283324e-16\n+// variance(f - f_Boost): 6.7801293731072419e-32\n+// stddev(f - f_Boost): 2.6038681558610532e-16\n const testcase_ellint_1<double>\n data019[10] =\n {\n-  { 0.0000000000000000, 0.89999999999999991, 0.0000000000000000 },\n-  { 0.17525427376115024, 0.89999999999999991, 0.17453292519943295 },\n-  { 0.35492464591297446, 0.89999999999999991, 0.34906585039886590 },\n-  { 0.54388221416157112, 0.89999999999999991, 0.52359877559829882 },\n-  { 0.74797400423532490, 0.89999999999999991, 0.69813170079773179 },\n-  { 0.97463898451966458, 0.89999999999999991, 0.87266462599716477 },\n-  { 1.2334463254523440, 0.89999999999999991, 1.0471975511965976 },\n-  { 1.5355247765594910, 0.89999999999999991, 1.2217304763960306 },\n-  { 1.8882928567775117, 0.89999999999999991, 1.3962634015954636 },\n-  { 2.2805491384227703, 0.89999999999999991, 1.5707963267948966 },\n+  { 0.0000000000000000, 0.90000000000000013, 0.0000000000000000, 0.0 },\n+  { 0.17525427376115027, 0.90000000000000013, 0.17453292519943295, 0.0 },\n+  { 0.35492464591297446, 0.90000000000000013, 0.34906585039886590, 0.0 },\n+  { 0.54388221416157123, 0.90000000000000013, 0.52359877559829882, 0.0 },\n+  { 0.74797400423532512, 0.90000000000000013, 0.69813170079773179, 0.0 },\n+  { 0.97463898451966446, 0.90000000000000013, 0.87266462599716477, 0.0 },\n+  { 1.2334463254523440, 0.90000000000000013, 1.0471975511965976, 0.0 },\n+  { 1.5355247765594915, 0.90000000000000013, 1.2217304763960306, 0.0 },\n+  { 1.8882928567775128, 0.90000000000000013, 1.3962634015954636, 0.0 },\n+  { 2.2805491384227707, 0.90000000000000013, 1.5707963267948966, 0.0 },\n };\n const double toler019 = 2.5000000000000020e-13;\n \n-template<typename Tp, unsigned int Num>\n+template<typename Ret, unsigned int Num>\n   void\n-  test(const testcase_ellint_1<Tp> (&data)[Num], Tp toler)\n+  test(const testcase_ellint_1<Ret> (&data)[Num], Ret toler)\n   {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n+    bool test __attribute__((unused)) = true;\n+    const Ret eps = std::numeric_limits<Ret>::epsilon();\n+    Ret max_abs_diff = -Ret(1);\n+    Ret max_abs_frac = -Ret(1);\n     unsigned int num_datum = Num;\n     for (unsigned int i = 0; i < num_datum; ++i)\n       {\n-\tconst Tp f = std::ellint_1(data[i].k, data[i].phi);\n-\tconst Tp f0 = data[i].f0;\n-\tconst Tp diff = f - f0;\n+\tconst Ret f = std::ellint_1(data[i].k, data[i].phi);\n+\tconst Ret f0 = data[i].f0;\n+\tconst Ret diff = f - f0;\n \tif (std::abs(diff) > max_abs_diff)\n \t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n+\tif (std::abs(f0) > Ret(10) * eps\n+\t && std::abs(f) > Ret(10) * eps)\n \t  {\n-\t    const Tp frac = diff / f0;\n+\t    const Ret frac = diff / f0;\n \t    if (std::abs(frac) > max_abs_frac)\n \t      max_abs_frac = std::abs(frac);\n \t  }"}, {"sha": "daf0b559ac285a2a706b0dc483caa354ab290bef", "filename": "libstdc++-v3/testsuite/special_functions/12_ellint_2/check_value.cc", "status": "modified", "additions": 303, "deletions": 246, "changes": 549, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F12_ellint_2%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F12_ellint_2%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F12_ellint_2%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -37,387 +37,444 @@\n #endif\n #include <specfun_testcase.h>\n \n-\n // Test data for k=-0.90000000000000002.\n-// max(|f - f_GSL|): 6.6613381477509392e-16\n-// max(|f - f_GSL| / |f_GSL|): 6.6116483711056737e-16\n+// max(|f - f_Boost|): 6.6613381477509392e-16 at index 7\n+// max(|f - f_Boost| / |f_Boost|): 6.6116483711056727e-16\n+// mean(f - f_Boost): -8.6042284408449634e-17\n+// variance(f - f_Boost): 4.1543973284335233e-32\n+// stddev(f - f_Boost): 2.0382338748125847e-16\n const testcase_ellint_2<double>\n data001[10] =\n {\n-  { 0.0000000000000000, -0.90000000000000002, 0.0000000000000000 },\n-  { 0.17381690606167960, -0.90000000000000002, 0.17453292519943295 },\n-  { 0.34337919186972055, -0.90000000000000002, 0.34906585039886590 },\n-  { 0.50464268659856326, -0.90000000000000002, 0.52359877559829882 },\n-  { 0.65400003842368570, -0.90000000000000002, 0.69813170079773179 },\n-  { 0.78854928419904646, -0.90000000000000002, 0.87266462599716477 },\n-  { 0.90645698626315396, -0.90000000000000002, 1.0471975511965976 },\n-  { 1.0075154899135925, -0.90000000000000002, 1.2217304763960306 },\n-  { 1.0940135583194068, -0.90000000000000002, 1.3962634015954636 },\n-  { 1.1716970527816140, -0.90000000000000002, 1.5707963267948966 },\n+  { 0.0000000000000000, -0.90000000000000002, 0.0000000000000000, 0.0 },\n+  { 0.17381690606167963, -0.90000000000000002, 0.17453292519943295, 0.0 },\n+  { 0.34337919186972055, -0.90000000000000002, 0.34906585039886590, 0.0 },\n+  { 0.50464268659856337, -0.90000000000000002, 0.52359877559829882, 0.0 },\n+  { 0.65400003842368593, -0.90000000000000002, 0.69813170079773179, 0.0 },\n+  { 0.78854928419904635, -0.90000000000000002, 0.87266462599716477, 0.0 },\n+  { 0.90645698626315396, -0.90000000000000002, 1.0471975511965976, 0.0 },\n+  { 1.0075154899135927, -0.90000000000000002, 1.2217304763960306, 0.0 },\n+  { 1.0940135583194071, -0.90000000000000002, 1.3962634015954636, 0.0 },\n+  { 1.1716970527816142, -0.90000000000000002, 1.5707963267948966, 0.0 },\n };\n const double toler001 = 2.5000000000000020e-13;\n \n // Test data for k=-0.80000000000000004.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.4793687438660849e-16\n+// max(|f - f_Boost|): 1.3322676295501878e-15 at index 9\n+// max(|f - f_Boost| / |f_Boost|): 1.0438106231598255e-15\n+// mean(f - f_Boost): 1.8318679906315082e-16\n+// variance(f - f_Boost): 1.6301071049293564e-31\n+// stddev(f - f_Boost): 4.0374584888632060e-16\n const testcase_ellint_2<double>\n data002[10] =\n {\n-  { 0.0000000000000000, -0.80000000000000004, 0.0000000000000000 },\n-  { 0.17396762274534805, -0.80000000000000004, 0.17453292519943295 },\n-  { 0.34458685226969316, -0.80000000000000004, 0.34906585039886590 },\n-  { 0.50872923654502433, -0.80000000000000004, 0.52359877559829882 },\n-  { 0.66372016539176215, -0.80000000000000004, 0.69813170079773179 },\n-  { 0.80760344410167406, -0.80000000000000004, 0.87266462599716477 },\n-  { 0.93945480372495049, -0.80000000000000004, 1.0471975511965976 },\n-  { 1.0597473310395036, -0.80000000000000004, 1.2217304763960306 },\n-  { 1.1706981862452361, -0.80000000000000004, 1.3962634015954636 },\n-  { 1.2763499431699064, -0.80000000000000004, 1.5707963267948966 },\n+  { 0.0000000000000000, -0.80000000000000004, 0.0000000000000000, 0.0 },\n+  { 0.17396762274534805, -0.80000000000000004, 0.17453292519943295, 0.0 },\n+  { 0.34458685226969321, -0.80000000000000004, 0.34906585039886590, 0.0 },\n+  { 0.50872923654502433, -0.80000000000000004, 0.52359877559829882, 0.0 },\n+  { 0.66372016539176226, -0.80000000000000004, 0.69813170079773179, 0.0 },\n+  { 0.80760344410167406, -0.80000000000000004, 0.87266462599716477, 0.0 },\n+  { 0.93945480372495072, -0.80000000000000004, 1.0471975511965976, 0.0 },\n+  { 1.0597473310395040, -0.80000000000000004, 1.2217304763960306, 0.0 },\n+  { 1.1706981862452359, -0.80000000000000004, 1.3962634015954636, 0.0 },\n+  { 1.2763499431699064, -0.80000000000000004, 1.5707963267948966, 0.0 },\n };\n const double toler002 = 2.5000000000000020e-13;\n \n // Test data for k=-0.69999999999999996.\n-// max(|f - f_GSL|): 3.3306690738754696e-16\n-// max(|f - f_GSL| / |f_GSL|): 4.0435005012914979e-16\n+// max(|f - f_Boost|): 6.6613381477509392e-16 at index 8\n+// max(|f - f_Boost| / |f_Boost|): 5.4138821888802831e-16\n+// mean(f - f_Boost): 1.9428902930940238e-17\n+// variance(f - f_Boost): 2.6524572947662036e-32\n+// stddev(f - f_Boost): 1.6286366368119696e-16\n const testcase_ellint_2<double>\n data003[10] =\n {\n-  { 0.0000000000000000, -0.69999999999999996, 0.0000000000000000 },\n-  { 0.17410041242702542, -0.69999999999999996, 0.17453292519943295 },\n-  { 0.34564605085764760, -0.69999999999999996, 0.34906585039886590 },\n-  { 0.51228495693314646, -0.69999999999999996, 0.52359877559829882 },\n-  { 0.67207654098799530, -0.69999999999999996, 0.69813170079773179 },\n-  { 0.82370932631556515, -0.69999999999999996, 0.87266462599716477 },\n-  { 0.96672313309452795, -0.69999999999999996, 1.0471975511965976 },\n-  { 1.1017090644949503, -0.69999999999999996, 1.2217304763960306 },\n-  { 1.2304180097292914, -0.69999999999999996, 1.3962634015954636 },\n-  { 1.3556611355719554, -0.69999999999999996, 1.5707963267948966 },\n+  { 0.0000000000000000, -0.69999999999999996, 0.0000000000000000, 0.0 },\n+  { 0.17410041242702540, -0.69999999999999996, 0.17453292519943295, 0.0 },\n+  { 0.34564605085764760, -0.69999999999999996, 0.34906585039886590, 0.0 },\n+  { 0.51228495693314657, -0.69999999999999996, 0.52359877559829882, 0.0 },\n+  { 0.67207654098799530, -0.69999999999999996, 0.69813170079773179, 0.0 },\n+  { 0.82370932631556493, -0.69999999999999996, 0.87266462599716477, 0.0 },\n+  { 0.96672313309452806, -0.69999999999999996, 1.0471975511965976, 0.0 },\n+  { 1.1017090644949501, -0.69999999999999996, 1.2217304763960306, 0.0 },\n+  { 1.2304180097292916, -0.69999999999999996, 1.3962634015954636, 0.0 },\n+  { 1.3556611355719554, -0.69999999999999996, 1.5707963267948966, 0.0 },\n };\n const double toler003 = 2.5000000000000020e-13;\n \n // Test data for k=-0.59999999999999998.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.9101039108874066e-16\n+// max(|f - f_Boost|): 2.2204460492503131e-16 at index 7\n+// max(|f - f_Boost| / |f_Boost|): 1.9550519554437030e-16\n+// mean(f - f_Boost): 1.9428902930940238e-17\n+// variance(f - f_Boost): 4.6602749271592373e-35\n+// stddev(f - f_Boost): 6.8266206333435850e-18\n const testcase_ellint_2<double>\n data004[10] =\n {\n-  { 0.0000000000000000, -0.59999999999999998, 0.0000000000000000 },\n-  { 0.17421534919599127, -0.59999999999999998, 0.17453292519943295 },\n-  { 0.34655927787174101, -0.59999999999999998, 0.34906585039886590 },\n-  { 0.51533034538432143, -0.59999999999999998, 0.52359877559829882 },\n-  { 0.67916550597453018, -0.59999999999999998, 0.69813170079773179 },\n-  { 0.83720218180349870, -0.59999999999999998, 0.87266462599716477 },\n-  { 0.98922159354937755, -0.59999999999999998, 1.0471975511965976 },\n-  { 1.1357478470419360, -0.59999999999999998, 1.2217304763960306 },\n-  { 1.2780617372844056, -0.59999999999999998, 1.3962634015954636 },\n-  { 1.4180833944487241, -0.59999999999999998, 1.5707963267948966 },\n+  { 0.0000000000000000, -0.59999999999999998, 0.0000000000000000, 0.0 },\n+  { 0.17421534919599127, -0.59999999999999998, 0.17453292519943295, 0.0 },\n+  { 0.34655927787174096, -0.59999999999999998, 0.34906585039886590, 0.0 },\n+  { 0.51533034538432143, -0.59999999999999998, 0.52359877559829882, 0.0 },\n+  { 0.67916550597453018, -0.59999999999999998, 0.69813170079773179, 0.0 },\n+  { 0.83720218180349881, -0.59999999999999998, 0.87266462599716477, 0.0 },\n+  { 0.98922159354937755, -0.59999999999999998, 1.0471975511965976, 0.0 },\n+  { 1.1357478470419362, -0.59999999999999998, 1.2217304763960306, 0.0 },\n+  { 1.2780617372844061, -0.59999999999999998, 1.3962634015954636, 0.0 },\n+  { 1.4180833944487241, -0.59999999999999998, 1.5707963267948966, 0.0 },\n };\n const double toler004 = 2.5000000000000020e-13;\n \n // Test data for k=-0.50000000000000000.\n-// max(|f - f_GSL|): 2.2204460492503131e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.2412420886495652e-16\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 7\n+// max(|f - f_Boost| / |f_Boost|): 3.8178992821201131e-16\n+// mean(f - f_Boost): -4.9960036108132046e-17\n+// variance(f - f_Boost): 3.0133908324921077e-32\n+// stddev(f - f_Boost): 1.7359121039073689e-16\n const testcase_ellint_2<double>\n data005[10] =\n {\n-  { 0.0000000000000000, -0.50000000000000000, 0.0000000000000000 },\n-  { 0.17431249677315910, -0.50000000000000000, 0.17453292519943295 },\n-  { 0.34732862537770803, -0.50000000000000000, 0.34906585039886590 },\n-  { 0.51788193485993794, -0.50000000000000000, 0.52359877559829882 },\n-  { 0.68506022954164536, -0.50000000000000000, 0.69813170079773179 },\n-  { 0.84831662803347196, -0.50000000000000000, 0.87266462599716477 },\n-  { 1.0075555551444717, -0.50000000000000000, 1.0471975511965976 },\n-  { 1.1631768599287300, -0.50000000000000000, 1.2217304763960306 },\n-  { 1.3160584048772543, -0.50000000000000000, 1.3962634015954636 },\n-  { 1.4674622093394274, -0.50000000000000000, 1.5707963267948966 },\n+  { 0.0000000000000000, -0.50000000000000000, 0.0000000000000000, 0.0 },\n+  { 0.17431249677315908, -0.50000000000000000, 0.17453292519943295, 0.0 },\n+  { 0.34732862537770803, -0.50000000000000000, 0.34906585039886590, 0.0 },\n+  { 0.51788193485993794, -0.50000000000000000, 0.52359877559829882, 0.0 },\n+  { 0.68506022954164547, -0.50000000000000000, 0.69813170079773179, 0.0 },\n+  { 0.84831662803347208, -0.50000000000000000, 0.87266462599716477, 0.0 },\n+  { 1.0075555551444719, -0.50000000000000000, 1.0471975511965976, 0.0 },\n+  { 1.1631768599287302, -0.50000000000000000, 1.2217304763960306, 0.0 },\n+  { 1.3160584048772548, -0.50000000000000000, 1.3962634015954636, 0.0 },\n+  { 1.4674622093394272, -0.50000000000000000, 1.5707963267948966, 0.0 },\n };\n const double toler005 = 2.5000000000000020e-13;\n \n-// Test data for k=-0.40000000000000002.\n-// max(|f - f_GSL|): 6.6613381477509392e-16\n-// max(|f - f_GSL| / |f_GSL|): 5.6222658248988364e-16\n+// Test data for k=-0.39999999999999991.\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 9\n+// max(|f - f_Boost| / |f_Boost|): 2.9489138636265387e-16\n+// mean(f - f_Boost): 8.6042284408449634e-17\n+// variance(f - f_Boost): 1.5826864298542218e-32\n+// stddev(f - f_Boost): 1.2580486595733180e-16\n const testcase_ellint_2<double>\n data006[10] =\n {\n-  { 0.0000000000000000, -0.40000000000000002, 0.0000000000000000 },\n-  { 0.17439190872481267, -0.40000000000000002, 0.17453292519943295 },\n-  { 0.34795581767099210, -0.40000000000000002, 0.34906585039886590 },\n-  { 0.51995290683804463, -0.40000000000000002, 0.52359877559829882 },\n-  { 0.68981638464431538, -0.40000000000000002, 0.69813170079773179 },\n-  { 0.85722088859936041, -0.40000000000000002, 0.87266462599716477 },\n-  { 1.0221301327876993, -0.40000000000000002, 1.0471975511965976 },\n-  { 1.1848138019818371, -0.40000000000000002, 1.2217304763960306 },\n-  { 1.3458259266501533, -0.40000000000000002, 1.3962634015954636 },\n-  { 1.5059416123600402, -0.40000000000000002, 1.5707963267948966 },\n+  { 0.0000000000000000, -0.39999999999999991, 0.0000000000000000, 0.0 },\n+  { 0.17439190872481267, -0.39999999999999991, 0.17453292519943295, 0.0 },\n+  { 0.34795581767099210, -0.39999999999999991, 0.34906585039886590, 0.0 },\n+  { 0.51995290683804463, -0.39999999999999991, 0.52359877559829882, 0.0 },\n+  { 0.68981638464431527, -0.39999999999999991, 0.69813170079773179, 0.0 },\n+  { 0.85722088859936030, -0.39999999999999991, 0.87266462599716477, 0.0 },\n+  { 1.0221301327876993, -0.39999999999999991, 1.0471975511965976, 0.0 },\n+  { 1.1848138019818375, -0.39999999999999991, 1.2217304763960306, 0.0 },\n+  { 1.3458259266501533, -0.39999999999999991, 1.3962634015954636, 0.0 },\n+  { 1.5059416123600404, -0.39999999999999991, 1.5707963267948966, 0.0 },\n };\n const double toler006 = 2.5000000000000020e-13;\n \n-// Test data for k=-0.30000000000000004.\n-// max(|f - f_GSL|): 8.8817841970012523e-16\n-// max(|f - f_GSL| / |f_GSL|): 6.3860540218057383e-16\n+// Test data for k=-0.29999999999999993.\n+// max(|f - f_Boost|): 6.6613381477509392e-16 at index 9\n+// max(|f - f_Boost| / |f_Boost|): 4.3401048387253188e-16\n+// mean(f - f_Boost): 7.2164496600635178e-17\n+// variance(f - f_Boost): 4.3555500115139682e-32\n+// stddev(f - f_Boost): 2.0869954507650391e-16\n const testcase_ellint_2<double>\n data007[10] =\n {\n-  { 0.0000000000000000, -0.30000000000000004, 0.0000000000000000 },\n-  { 0.17445362864048913, -0.30000000000000004, 0.17453292519943295 },\n-  { 0.34844223535713464, -0.30000000000000004, 0.34906585039886590 },\n-  { 0.52155353877411770, -0.30000000000000004, 0.52359877559829882 },\n-  { 0.69347584418369879, -0.30000000000000004, 0.69813170079773179 },\n-  { 0.86403609928237668, -0.30000000000000004, 0.87266462599716477 },\n-  { 1.0332234514065408, -0.30000000000000004, 1.0471975511965976 },\n-  { 1.2011943182068923, -0.30000000000000004, 1.2217304763960306 },\n-  { 1.3682566113689623, -0.30000000000000004, 1.3962634015954636 },\n-  { 1.5348334649232491, -0.30000000000000004, 1.5707963267948966 },\n+  { 0.0000000000000000, -0.29999999999999993, 0.0000000000000000, 0.0 },\n+  { 0.17445362864048913, -0.29999999999999993, 0.17453292519943295, 0.0 },\n+  { 0.34844223535713470, -0.29999999999999993, 0.34906585039886590, 0.0 },\n+  { 0.52155353877411759, -0.29999999999999993, 0.52359877559829882, 0.0 },\n+  { 0.69347584418369890, -0.29999999999999993, 0.69813170079773179, 0.0 },\n+  { 0.86403609928237657, -0.29999999999999993, 0.87266462599716477, 0.0 },\n+  { 1.0332234514065408, -0.29999999999999993, 1.0471975511965976, 0.0 },\n+  { 1.2011943182068923, -0.29999999999999993, 1.2217304763960306, 0.0 },\n+  { 1.3682566113689625, -0.29999999999999993, 1.3962634015954636, 0.0 },\n+  { 1.5348334649232489, -0.29999999999999993, 1.5707963267948966, 0.0 },\n };\n const double toler007 = 2.5000000000000020e-13;\n \n // Test data for k=-0.19999999999999996.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 4.2658819988515356e-16\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 6\n+// max(|f - f_Boost| / |f_Boost|): 4.2658819988515356e-16\n+// mean(f - f_Boost): -5.2735593669694933e-17\n+// variance(f - f_Boost): 3.0473442641042680e-32\n+// stddev(f - f_Boost): 1.7456644190978597e-16\n const testcase_ellint_2<double>\n data008[10] =\n {\n-  { 0.0000000000000000, -0.19999999999999996, 0.0000000000000000 },\n-  { 0.17449769027652812, -0.19999999999999996, 0.17453292519943295 },\n-  { 0.34878893400762095, -0.19999999999999996, 0.34906585039886590 },\n-  { 0.52269152856057410, -0.19999999999999996, 0.52359877559829882 },\n-  { 0.69606913360157563, -0.19999999999999996, 0.69813170079773179 },\n-  { 0.86884782374863356, -0.19999999999999996, 0.87266462599716477 },\n-  { 1.0410255369689567, -0.19999999999999996, 1.0471975511965976 },\n-  { 1.2126730391631360, -0.19999999999999996, 1.2217304763960306 },\n-  { 1.3839259540325153, -0.19999999999999996, 1.3962634015954636 },\n-  { 1.5549685462425291, -0.19999999999999996, 1.5707963267948966 },\n+  { 0.0000000000000000, -0.19999999999999996, 0.0000000000000000, 0.0 },\n+  { 0.17449769027652809, -0.19999999999999996, 0.17453292519943295, 0.0 },\n+  { 0.34878893400762090, -0.19999999999999996, 0.34906585039886590, 0.0 },\n+  { 0.52269152856057410, -0.19999999999999996, 0.52359877559829882, 0.0 },\n+  { 0.69606913360157574, -0.19999999999999996, 0.69813170079773179, 0.0 },\n+  { 0.86884782374863379, -0.19999999999999996, 0.87266462599716477, 0.0 },\n+  { 1.0410255369689567, -0.19999999999999996, 1.0471975511965976, 0.0 },\n+  { 1.2126730391631364, -0.19999999999999996, 1.2217304763960306, 0.0 },\n+  { 1.3839259540325151, -0.19999999999999996, 1.3962634015954636, 0.0 },\n+  { 1.5549685462425293, -0.19999999999999996, 1.5707963267948966, 0.0 },\n };\n const double toler008 = 2.5000000000000020e-13;\n \n // Test data for k=-0.099999999999999978.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.1875595485348029e-16\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 8\n+// max(|f - f_Boost| / |f_Boost|): 3.1875595485348024e-16\n+// mean(f - f_Boost): -4.7184478546569152e-17\n+// variance(f - f_Boost): 2.7486111305082032e-34\n+// stddev(f - f_Boost): 1.6578935823834422e-17\n const testcase_ellint_2<double>\n data009[10] =\n {\n-  { 0.0000000000000000, -0.099999999999999978, 0.0000000000000000 },\n-  { 0.17452411766649939, -0.099999999999999978, 0.17453292519943295 },\n-  { 0.34899665805442404, -0.099999999999999978, 0.34906585039886590 },\n-  { 0.52337222400508776, -0.099999999999999978, 0.52359877559829882 },\n-  { 0.69761705217284864, -0.099999999999999978, 0.69813170079773179 },\n-  { 0.87171309273007491, -0.099999999999999978, 0.87266462599716477 },\n-  { 1.0456602197056326, -0.099999999999999978, 1.0471975511965976 },\n-  { 1.2194762899272025, -0.099999999999999978, 1.2217304763960306 },\n-  { 1.3931950229892744, -0.099999999999999978, 1.3962634015954636 },\n-  { 1.5668619420216685, -0.099999999999999978, 1.5707963267948966 },\n+  { 0.0000000000000000, -0.099999999999999978, 0.0000000000000000, 0.0 },\n+  { 0.17452411766649942, -0.099999999999999978, 0.17453292519943295, 0.0 },\n+  { 0.34899665805442409, -0.099999999999999978, 0.34906585039886590, 0.0 },\n+  { 0.52337222400508787, -0.099999999999999978, 0.52359877559829882, 0.0 },\n+  { 0.69761705217284864, -0.099999999999999978, 0.69813170079773179, 0.0 },\n+  { 0.87171309273007491, -0.099999999999999978, 0.87266462599716477, 0.0 },\n+  { 1.0456602197056326, -0.099999999999999978, 1.0471975511965976, 0.0 },\n+  { 1.2194762899272027, -0.099999999999999978, 1.2217304763960306, 0.0 },\n+  { 1.3931950229892747, -0.099999999999999978, 1.3962634015954636, 0.0 },\n+  { 1.5668619420216683, -0.099999999999999978, 1.5707963267948966, 0.0 },\n };\n const double toler009 = 2.5000000000000020e-13;\n \n // Test data for k=0.0000000000000000.\n-// max(|f - f_GSL|): 2.2204460492503131e-16\n-// max(|f - f_GSL| / |f_GSL|): 2.1203697876423452e-16\n+// max(|f - f_Boost|): 2.2204460492503131e-16 at index 7\n+// max(|f - f_Boost| / |f_Boost|): 2.1203697876423447e-16\n+// mean(f - f_Boost): -1.9428902930940238e-17\n+// variance(f - f_Boost): 4.6602749271592373e-35\n+// stddev(f - f_Boost): 6.8266206333435850e-18\n const testcase_ellint_2<double>\n data010[10] =\n {\n-  { 0.0000000000000000, 0.0000000000000000, 0.0000000000000000 },\n-  { 0.17453292519943292, 0.0000000000000000, 0.17453292519943295 },\n-  { 0.34906585039886584, 0.0000000000000000, 0.34906585039886590 },\n-  { 0.52359877559829870, 0.0000000000000000, 0.52359877559829882 },\n-  { 0.69813170079773168, 0.0000000000000000, 0.69813170079773179 },\n-  { 0.87266462599716477, 0.0000000000000000, 0.87266462599716477 },\n-  { 1.0471975511965974, 0.0000000000000000, 1.0471975511965976 },\n-  { 1.2217304763960304, 0.0000000000000000, 1.2217304763960306 },\n-  { 1.3962634015954631, 0.0000000000000000, 1.3962634015954636 },\n-  { 1.5707963267948966, 0.0000000000000000, 1.5707963267948966 },\n+  { 0.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 0.17453292519943295, 0.0000000000000000, 0.17453292519943295, 0.0 },\n+  { 0.34906585039886590, 0.0000000000000000, 0.34906585039886590, 0.0 },\n+  { 0.52359877559829882, 0.0000000000000000, 0.52359877559829882, 0.0 },\n+  { 0.69813170079773179, 0.0000000000000000, 0.69813170079773179, 0.0 },\n+  { 0.87266462599716477, 0.0000000000000000, 0.87266462599716477, 0.0 },\n+  { 1.0471975511965976, 0.0000000000000000, 1.0471975511965976, 0.0 },\n+  { 1.2217304763960306, 0.0000000000000000, 1.2217304763960306, 0.0 },\n+  { 1.3962634015954636, 0.0000000000000000, 1.3962634015954636, 0.0 },\n+  { 1.5707963267948966, 0.0000000000000000, 1.5707963267948966, 0.0 },\n };\n const double toler010 = 2.5000000000000020e-13;\n \n // Test data for k=0.10000000000000009.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.1875595485348029e-16\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 8\n+// max(|f - f_Boost| / |f_Boost|): 3.1875595485348024e-16\n+// mean(f - f_Boost): -4.7184478546569152e-17\n+// variance(f - f_Boost): 2.7486111305082032e-34\n+// stddev(f - f_Boost): 1.6578935823834422e-17\n const testcase_ellint_2<double>\n data011[10] =\n {\n-  { 0.0000000000000000, 0.10000000000000009, 0.0000000000000000 },\n-  { 0.17452411766649939, 0.10000000000000009, 0.17453292519943295 },\n-  { 0.34899665805442404, 0.10000000000000009, 0.34906585039886590 },\n-  { 0.52337222400508776, 0.10000000000000009, 0.52359877559829882 },\n-  { 0.69761705217284864, 0.10000000000000009, 0.69813170079773179 },\n-  { 0.87171309273007491, 0.10000000000000009, 0.87266462599716477 },\n-  { 1.0456602197056326, 0.10000000000000009, 1.0471975511965976 },\n-  { 1.2194762899272025, 0.10000000000000009, 1.2217304763960306 },\n-  { 1.3931950229892744, 0.10000000000000009, 1.3962634015954636 },\n-  { 1.5668619420216685, 0.10000000000000009, 1.5707963267948966 },\n+  { 0.0000000000000000, 0.10000000000000009, 0.0000000000000000, 0.0 },\n+  { 0.17452411766649942, 0.10000000000000009, 0.17453292519943295, 0.0 },\n+  { 0.34899665805442409, 0.10000000000000009, 0.34906585039886590, 0.0 },\n+  { 0.52337222400508787, 0.10000000000000009, 0.52359877559829882, 0.0 },\n+  { 0.69761705217284864, 0.10000000000000009, 0.69813170079773179, 0.0 },\n+  { 0.87171309273007491, 0.10000000000000009, 0.87266462599716477, 0.0 },\n+  { 1.0456602197056326, 0.10000000000000009, 1.0471975511965976, 0.0 },\n+  { 1.2194762899272027, 0.10000000000000009, 1.2217304763960306, 0.0 },\n+  { 1.3931950229892747, 0.10000000000000009, 1.3962634015954636, 0.0 },\n+  { 1.5668619420216683, 0.10000000000000009, 1.5707963267948966, 0.0 },\n };\n const double toler011 = 2.5000000000000020e-13;\n \n-// Test data for k=0.19999999999999996.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 4.2658819988515356e-16\n+// Test data for k=0.20000000000000018.\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 6\n+// max(|f - f_Boost| / |f_Boost|): 4.2658819988515356e-16\n+// mean(f - f_Boost): -5.2735593669694933e-17\n+// variance(f - f_Boost): 3.0473442641042680e-32\n+// stddev(f - f_Boost): 1.7456644190978597e-16\n const testcase_ellint_2<double>\n data012[10] =\n {\n-  { 0.0000000000000000, 0.19999999999999996, 0.0000000000000000 },\n-  { 0.17449769027652812, 0.19999999999999996, 0.17453292519943295 },\n-  { 0.34878893400762095, 0.19999999999999996, 0.34906585039886590 },\n-  { 0.52269152856057410, 0.19999999999999996, 0.52359877559829882 },\n-  { 0.69606913360157563, 0.19999999999999996, 0.69813170079773179 },\n-  { 0.86884782374863356, 0.19999999999999996, 0.87266462599716477 },\n-  { 1.0410255369689567, 0.19999999999999996, 1.0471975511965976 },\n-  { 1.2126730391631360, 0.19999999999999996, 1.2217304763960306 },\n-  { 1.3839259540325153, 0.19999999999999996, 1.3962634015954636 },\n-  { 1.5549685462425291, 0.19999999999999996, 1.5707963267948966 },\n+  { 0.0000000000000000, 0.20000000000000018, 0.0000000000000000, 0.0 },\n+  { 0.17449769027652809, 0.20000000000000018, 0.17453292519943295, 0.0 },\n+  { 0.34878893400762090, 0.20000000000000018, 0.34906585039886590, 0.0 },\n+  { 0.52269152856057410, 0.20000000000000018, 0.52359877559829882, 0.0 },\n+  { 0.69606913360157574, 0.20000000000000018, 0.69813170079773179, 0.0 },\n+  { 0.86884782374863379, 0.20000000000000018, 0.87266462599716477, 0.0 },\n+  { 1.0410255369689567, 0.20000000000000018, 1.0471975511965976, 0.0 },\n+  { 1.2126730391631364, 0.20000000000000018, 1.2217304763960306, 0.0 },\n+  { 1.3839259540325151, 0.20000000000000018, 1.3962634015954636, 0.0 },\n+  { 1.5549685462425291, 0.20000000000000018, 1.5707963267948966, 0.0 },\n };\n const double toler012 = 2.5000000000000020e-13;\n \n // Test data for k=0.30000000000000004.\n-// max(|f - f_GSL|): 8.8817841970012523e-16\n-// max(|f - f_GSL| / |f_GSL|): 6.3860540218057383e-16\n+// max(|f - f_Boost|): 6.6613381477509392e-16 at index 9\n+// max(|f - f_Boost| / |f_Boost|): 4.3401048387253188e-16\n+// mean(f - f_Boost): 7.2164496600635178e-17\n+// variance(f - f_Boost): 4.3555500115139682e-32\n+// stddev(f - f_Boost): 2.0869954507650391e-16\n const testcase_ellint_2<double>\n data013[10] =\n {\n-  { 0.0000000000000000, 0.30000000000000004, 0.0000000000000000 },\n-  { 0.17445362864048913, 0.30000000000000004, 0.17453292519943295 },\n-  { 0.34844223535713464, 0.30000000000000004, 0.34906585039886590 },\n-  { 0.52155353877411770, 0.30000000000000004, 0.52359877559829882 },\n-  { 0.69347584418369879, 0.30000000000000004, 0.69813170079773179 },\n-  { 0.86403609928237668, 0.30000000000000004, 0.87266462599716477 },\n-  { 1.0332234514065408, 0.30000000000000004, 1.0471975511965976 },\n-  { 1.2011943182068923, 0.30000000000000004, 1.2217304763960306 },\n-  { 1.3682566113689623, 0.30000000000000004, 1.3962634015954636 },\n-  { 1.5348334649232491, 0.30000000000000004, 1.5707963267948966 },\n+  { 0.0000000000000000, 0.30000000000000004, 0.0000000000000000, 0.0 },\n+  { 0.17445362864048913, 0.30000000000000004, 0.17453292519943295, 0.0 },\n+  { 0.34844223535713470, 0.30000000000000004, 0.34906585039886590, 0.0 },\n+  { 0.52155353877411759, 0.30000000000000004, 0.52359877559829882, 0.0 },\n+  { 0.69347584418369890, 0.30000000000000004, 0.69813170079773179, 0.0 },\n+  { 0.86403609928237657, 0.30000000000000004, 0.87266462599716477, 0.0 },\n+  { 1.0332234514065408, 0.30000000000000004, 1.0471975511965976, 0.0 },\n+  { 1.2011943182068923, 0.30000000000000004, 1.2217304763960306, 0.0 },\n+  { 1.3682566113689625, 0.30000000000000004, 1.3962634015954636, 0.0 },\n+  { 1.5348334649232489, 0.30000000000000004, 1.5707963267948966, 0.0 },\n };\n const double toler013 = 2.5000000000000020e-13;\n \n-// Test data for k=0.39999999999999991.\n-// max(|f - f_GSL|): 8.8817841970012523e-16\n-// max(|f - f_GSL| / |f_GSL|): 5.8978277272530773e-16\n+// Test data for k=0.40000000000000013.\n+// max(|f - f_Boost|): 1.7763568394002505e-15 at index 9\n+// max(|f - f_Boost| / |f_Boost|): 1.1795655454506157e-15\n+// mean(f - f_Boost): 2.0816681711721685e-16\n+// variance(f - f_Boost): 3.0360740073926687e-31\n+// stddev(f - f_Boost): 5.5100580826273227e-16\n const testcase_ellint_2<double>\n data014[10] =\n {\n-  { 0.0000000000000000, 0.39999999999999991, 0.0000000000000000 },\n-  { 0.17439190872481267, 0.39999999999999991, 0.17453292519943295 },\n-  { 0.34795581767099210, 0.39999999999999991, 0.34906585039886590 },\n-  { 0.51995290683804463, 0.39999999999999991, 0.52359877559829882 },\n-  { 0.68981638464431538, 0.39999999999999991, 0.69813170079773179 },\n-  { 0.85722088859936041, 0.39999999999999991, 0.87266462599716477 },\n-  { 1.0221301327876993, 0.39999999999999991, 1.0471975511965976 },\n-  { 1.1848138019818373, 0.39999999999999991, 1.2217304763960306 },\n-  { 1.3458259266501533, 0.39999999999999991, 1.3962634015954636 },\n-  { 1.5059416123600404, 0.39999999999999991, 1.5707963267948966 },\n+  { 0.0000000000000000, 0.40000000000000013, 0.0000000000000000, 0.0 },\n+  { 0.17439190872481267, 0.40000000000000013, 0.17453292519943295, 0.0 },\n+  { 0.34795581767099210, 0.40000000000000013, 0.34906585039886590, 0.0 },\n+  { 0.51995290683804463, 0.40000000000000013, 0.52359877559829882, 0.0 },\n+  { 0.68981638464431527, 0.40000000000000013, 0.69813170079773179, 0.0 },\n+  { 0.85722088859936030, 0.40000000000000013, 0.87266462599716477, 0.0 },\n+  { 1.0221301327876993, 0.40000000000000013, 1.0471975511965976, 0.0 },\n+  { 1.1848138019818375, 0.40000000000000013, 1.2217304763960306, 0.0 },\n+  { 1.3458259266501531, 0.40000000000000013, 1.3962634015954636, 0.0 },\n+  { 1.5059416123600402, 0.40000000000000013, 1.5707963267948966, 0.0 },\n };\n const double toler014 = 2.5000000000000020e-13;\n \n // Test data for k=0.50000000000000000.\n-// max(|f - f_GSL|): 2.2204460492503131e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.2412420886495652e-16\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 7\n+// max(|f - f_Boost| / |f_Boost|): 3.8178992821201131e-16\n+// mean(f - f_Boost): -4.9960036108132046e-17\n+// variance(f - f_Boost): 3.0133908324921077e-32\n+// stddev(f - f_Boost): 1.7359121039073689e-16\n const testcase_ellint_2<double>\n data015[10] =\n {\n-  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000 },\n-  { 0.17431249677315910, 0.50000000000000000, 0.17453292519943295 },\n-  { 0.34732862537770803, 0.50000000000000000, 0.34906585039886590 },\n-  { 0.51788193485993794, 0.50000000000000000, 0.52359877559829882 },\n-  { 0.68506022954164536, 0.50000000000000000, 0.69813170079773179 },\n-  { 0.84831662803347196, 0.50000000000000000, 0.87266462599716477 },\n-  { 1.0075555551444717, 0.50000000000000000, 1.0471975511965976 },\n-  { 1.1631768599287300, 0.50000000000000000, 1.2217304763960306 },\n-  { 1.3160584048772543, 0.50000000000000000, 1.3962634015954636 },\n-  { 1.4674622093394274, 0.50000000000000000, 1.5707963267948966 },\n+  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000, 0.0 },\n+  { 0.17431249677315908, 0.50000000000000000, 0.17453292519943295, 0.0 },\n+  { 0.34732862537770803, 0.50000000000000000, 0.34906585039886590, 0.0 },\n+  { 0.51788193485993794, 0.50000000000000000, 0.52359877559829882, 0.0 },\n+  { 0.68506022954164547, 0.50000000000000000, 0.69813170079773179, 0.0 },\n+  { 0.84831662803347208, 0.50000000000000000, 0.87266462599716477, 0.0 },\n+  { 1.0075555551444719, 0.50000000000000000, 1.0471975511965976, 0.0 },\n+  { 1.1631768599287302, 0.50000000000000000, 1.2217304763960306, 0.0 },\n+  { 1.3160584048772548, 0.50000000000000000, 1.3962634015954636, 0.0 },\n+  { 1.4674622093394272, 0.50000000000000000, 1.5707963267948966, 0.0 },\n };\n const double toler015 = 2.5000000000000020e-13;\n \n // Test data for k=0.60000000000000009.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.9101039108874066e-16\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 7\n+// max(|f - f_Boost| / |f_Boost|): 3.9101039108874066e-16\n+// mean(f - f_Boost): 1.9428902930940238e-17\n+// variance(f - f_Boost): 7.1986981476874020e-33\n+// stddev(f - f_Boost): 8.4845142157270271e-17\n const testcase_ellint_2<double>\n data016[10] =\n {\n-  { 0.0000000000000000, 0.60000000000000009, 0.0000000000000000 },\n-  { 0.17421534919599127, 0.60000000000000009, 0.17453292519943295 },\n-  { 0.34655927787174101, 0.60000000000000009, 0.34906585039886590 },\n-  { 0.51533034538432143, 0.60000000000000009, 0.52359877559829882 },\n-  { 0.67916550597453018, 0.60000000000000009, 0.69813170079773179 },\n-  { 0.83720218180349870, 0.60000000000000009, 0.87266462599716477 },\n-  { 0.98922159354937744, 0.60000000000000009, 1.0471975511965976 },\n-  { 1.1357478470419360, 0.60000000000000009, 1.2217304763960306 },\n-  { 1.2780617372844056, 0.60000000000000009, 1.3962634015954636 },\n-  { 1.4180833944487241, 0.60000000000000009, 1.5707963267948966 },\n+  { 0.0000000000000000, 0.60000000000000009, 0.0000000000000000, 0.0 },\n+  { 0.17421534919599127, 0.60000000000000009, 0.17453292519943295, 0.0 },\n+  { 0.34655927787174096, 0.60000000000000009, 0.34906585039886590, 0.0 },\n+  { 0.51533034538432143, 0.60000000000000009, 0.52359877559829882, 0.0 },\n+  { 0.67916550597453018, 0.60000000000000009, 0.69813170079773179, 0.0 },\n+  { 0.83720218180349881, 0.60000000000000009, 0.87266462599716477, 0.0 },\n+  { 0.98922159354937755, 0.60000000000000009, 1.0471975511965976, 0.0 },\n+  { 1.1357478470419360, 0.60000000000000009, 1.2217304763960306, 0.0 },\n+  { 1.2780617372844061, 0.60000000000000009, 1.3962634015954636, 0.0 },\n+  { 1.4180833944487241, 0.60000000000000009, 1.5707963267948966, 0.0 },\n };\n const double toler016 = 2.5000000000000020e-13;\n \n-// Test data for k=0.69999999999999996.\n-// max(|f - f_GSL|): 3.3306690738754696e-16\n-// max(|f - f_GSL| / |f_GSL|): 4.0435005012914979e-16\n+// Test data for k=0.70000000000000018.\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 6\n+// max(|f - f_Boost| / |f_Boost|): 4.5937579711009016e-16\n+// mean(f - f_Boost): 6.1062266354383615e-17\n+// variance(f - f_Boost): 1.8112301165881739e-32\n+// stddev(f - f_Boost): 1.3458194962877355e-16\n const testcase_ellint_2<double>\n data017[10] =\n {\n-  { 0.0000000000000000, 0.69999999999999996, 0.0000000000000000 },\n-  { 0.17410041242702542, 0.69999999999999996, 0.17453292519943295 },\n-  { 0.34564605085764760, 0.69999999999999996, 0.34906585039886590 },\n-  { 0.51228495693314646, 0.69999999999999996, 0.52359877559829882 },\n-  { 0.67207654098799530, 0.69999999999999996, 0.69813170079773179 },\n-  { 0.82370932631556515, 0.69999999999999996, 0.87266462599716477 },\n-  { 0.96672313309452795, 0.69999999999999996, 1.0471975511965976 },\n-  { 1.1017090644949503, 0.69999999999999996, 1.2217304763960306 },\n-  { 1.2304180097292914, 0.69999999999999996, 1.3962634015954636 },\n-  { 1.3556611355719554, 0.69999999999999996, 1.5707963267948966 },\n+  { 0.0000000000000000, 0.70000000000000018, 0.0000000000000000, 0.0 },\n+  { 0.17410041242702540, 0.70000000000000018, 0.17453292519943295, 0.0 },\n+  { 0.34564605085764760, 0.70000000000000018, 0.34906585039886590, 0.0 },\n+  { 0.51228495693314657, 0.70000000000000018, 0.52359877559829882, 0.0 },\n+  { 0.67207654098799519, 0.70000000000000018, 0.69813170079773179, 0.0 },\n+  { 0.82370932631556493, 0.70000000000000018, 0.87266462599716477, 0.0 },\n+  { 0.96672313309452806, 0.70000000000000018, 1.0471975511965976, 0.0 },\n+  { 1.1017090644949501, 0.70000000000000018, 1.2217304763960306, 0.0 },\n+  { 1.2304180097292916, 0.70000000000000018, 1.3962634015954636, 0.0 },\n+  { 1.3556611355719552, 0.70000000000000018, 1.5707963267948966, 0.0 },\n };\n const double toler017 = 2.5000000000000020e-13;\n \n // Test data for k=0.80000000000000004.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.4793687438660849e-16\n+// max(|f - f_Boost|): 1.3322676295501878e-15 at index 9\n+// max(|f - f_Boost| / |f_Boost|): 1.0438106231598255e-15\n+// mean(f - f_Boost): 1.8318679906315082e-16\n+// variance(f - f_Boost): 1.6301071049293564e-31\n+// stddev(f - f_Boost): 4.0374584888632060e-16\n const testcase_ellint_2<double>\n data018[10] =\n {\n-  { 0.0000000000000000, 0.80000000000000004, 0.0000000000000000 },\n-  { 0.17396762274534805, 0.80000000000000004, 0.17453292519943295 },\n-  { 0.34458685226969316, 0.80000000000000004, 0.34906585039886590 },\n-  { 0.50872923654502433, 0.80000000000000004, 0.52359877559829882 },\n-  { 0.66372016539176215, 0.80000000000000004, 0.69813170079773179 },\n-  { 0.80760344410167406, 0.80000000000000004, 0.87266462599716477 },\n-  { 0.93945480372495049, 0.80000000000000004, 1.0471975511965976 },\n-  { 1.0597473310395036, 0.80000000000000004, 1.2217304763960306 },\n-  { 1.1706981862452361, 0.80000000000000004, 1.3962634015954636 },\n-  { 1.2763499431699064, 0.80000000000000004, 1.5707963267948966 },\n+  { 0.0000000000000000, 0.80000000000000004, 0.0000000000000000, 0.0 },\n+  { 0.17396762274534805, 0.80000000000000004, 0.17453292519943295, 0.0 },\n+  { 0.34458685226969321, 0.80000000000000004, 0.34906585039886590, 0.0 },\n+  { 0.50872923654502433, 0.80000000000000004, 0.52359877559829882, 0.0 },\n+  { 0.66372016539176226, 0.80000000000000004, 0.69813170079773179, 0.0 },\n+  { 0.80760344410167406, 0.80000000000000004, 0.87266462599716477, 0.0 },\n+  { 0.93945480372495072, 0.80000000000000004, 1.0471975511965976, 0.0 },\n+  { 1.0597473310395040, 0.80000000000000004, 1.2217304763960306, 0.0 },\n+  { 1.1706981862452359, 0.80000000000000004, 1.3962634015954636, 0.0 },\n+  { 1.2763499431699064, 0.80000000000000004, 1.5707963267948966, 0.0 },\n };\n const double toler018 = 2.5000000000000020e-13;\n \n-// Test data for k=0.89999999999999991.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.7901367831880493e-16\n+// Test data for k=0.90000000000000013.\n+// max(|f - f_Boost|): 6.6613381477509392e-16 at index 7\n+// max(|f - f_Boost| / |f_Boost|): 6.6116483711056727e-16\n+// mean(f - f_Boost): 1.3877787807814457e-17\n+// variance(f - f_Boost): 2.3776912893669577e-35\n+// stddev(f - f_Boost): 4.8761575952454181e-18\n const testcase_ellint_2<double>\n data019[10] =\n {\n-  { 0.0000000000000000, 0.89999999999999991, 0.0000000000000000 },\n-  { 0.17381690606167960, 0.89999999999999991, 0.17453292519943295 },\n-  { 0.34337919186972055, 0.89999999999999991, 0.34906585039886590 },\n-  { 0.50464268659856326, 0.89999999999999991, 0.52359877559829882 },\n-  { 0.65400003842368570, 0.89999999999999991, 0.69813170079773179 },\n-  { 0.78854928419904657, 0.89999999999999991, 0.87266462599716477 },\n-  { 0.90645698626315407, 0.89999999999999991, 1.0471975511965976 },\n-  { 1.0075154899135930, 0.89999999999999991, 1.2217304763960306 },\n-  { 1.0940135583194071, 0.89999999999999991, 1.3962634015954636 },\n-  { 1.1716970527816144, 0.89999999999999991, 1.5707963267948966 },\n+  { 0.0000000000000000, 0.90000000000000013, 0.0000000000000000, 0.0 },\n+  { 0.17381690606167963, 0.90000000000000013, 0.17453292519943295, 0.0 },\n+  { 0.34337919186972055, 0.90000000000000013, 0.34906585039886590, 0.0 },\n+  { 0.50464268659856337, 0.90000000000000013, 0.52359877559829882, 0.0 },\n+  { 0.65400003842368593, 0.90000000000000013, 0.69813170079773179, 0.0 },\n+  { 0.78854928419904635, 0.90000000000000013, 0.87266462599716477, 0.0 },\n+  { 0.90645698626315385, 0.90000000000000013, 1.0471975511965976, 0.0 },\n+  { 1.0075154899135927, 0.90000000000000013, 1.2217304763960306, 0.0 },\n+  { 1.0940135583194068, 0.90000000000000013, 1.3962634015954636, 0.0 },\n+  { 1.1716970527816140, 0.90000000000000013, 1.5707963267948966, 0.0 },\n };\n const double toler019 = 2.5000000000000020e-13;\n \n-template<typename Tp, unsigned int Num>\n+template<typename Ret, unsigned int Num>\n   void\n-  test(const testcase_ellint_2<Tp> (&data)[Num], Tp toler)\n+  test(const testcase_ellint_2<Ret> (&data)[Num], Ret toler)\n   {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n+    bool test __attribute__((unused)) = true;\n+    const Ret eps = std::numeric_limits<Ret>::epsilon();\n+    Ret max_abs_diff = -Ret(1);\n+    Ret max_abs_frac = -Ret(1);\n     unsigned int num_datum = Num;\n     for (unsigned int i = 0; i < num_datum; ++i)\n       {\n-\tconst Tp f = std::ellint_2(data[i].k, data[i].phi);\n-\tconst Tp f0 = data[i].f0;\n-\tconst Tp diff = f - f0;\n+\tconst Ret f = std::ellint_2(data[i].k, data[i].phi);\n+\tconst Ret f0 = data[i].f0;\n+\tconst Ret diff = f - f0;\n \tif (std::abs(diff) > max_abs_diff)\n \t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n+\tif (std::abs(f0) > Ret(10) * eps\n+\t && std::abs(f) > Ret(10) * eps)\n \t  {\n-\t    const Tp frac = diff / f0;\n+\t    const Ret frac = diff / f0;\n \t    if (std::abs(frac) > max_abs_frac)\n \t      max_abs_frac = std::abs(frac);\n \t  }"}, {"sha": "05f34c80136f1d2a1e4f751d734d7048dfe82dbe", "filename": "libstdc++-v3/testsuite/special_functions/13_ellint_3/check_value.cc", "status": "modified", "additions": 4729, "deletions": 4159, "changes": 8888, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F13_ellint_3%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F13_ellint_3%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F13_ellint_3%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}, {"sha": "d1299b2d096476462e575c4dcc9686c8abbbcbb0", "filename": "libstdc++-v3/testsuite/special_functions/13_ellint_3/pr66689.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F13_ellint_3%2Fpr66689.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F13_ellint_3%2Fpr66689.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F13_ellint_3%2Fpr66689.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do run { target c++11 } }\n+// { dg-require-c-std \"\" }\n+// { dg-add-options ieee }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  const double pi = 3.141592654;\n+\n+  double Pi1 = std::ellint_3(0.75, 0.0, pi / 2.0);\n+  VERIFY(std::abs(Pi1 - 1.91099) < 0.00001);\n+\n+  double Pi2 = std::ellint_3(0.75, 0.5, pi / 2.0);\n+  VERIFY(std::abs(Pi2 - 2.80011) < 0.00001);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d99a0fe5d8e970ba25f2af5c9fbe8aed63b5d60a", "filename": "libstdc++-v3/testsuite/special_functions/14_expint/check_value.cc", "status": "modified", "additions": 122, "deletions": 115, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F14_expint%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F14_expint%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F14_expint%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -39,144 +39,151 @@\n #include <specfun_testcase.h>\n \n // Test data.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 2.0242558374827411e-15\n+// max(|f - f_GSL|): 4.9960036108132044e-16 at index 49\n+// max(|f - f_GSL| / |f_GSL|): 2.2772878171680836e-15\n+// mean(f - f_GSL): 1.1295166444684511e-17\n+// variance(f - f_GSL): 4.9654719514602855e-33\n+// stddev(f - f_GSL): 7.0466104982894328e-17\n const testcase_expint<double>\n data001[50] =\n {\n-  { -3.7832640295504591e-24, -50.000000000000000 },\n-  { -1.0489811642368024e-23, -49.000000000000000 },\n-  { -2.9096641904058423e-23, -48.000000000000000 },\n-  { -8.0741978427258127e-23, -47.000000000000000 },\n-  { -2.2415317597442998e-22, -46.000000000000000 },\n-  { -6.2256908094623848e-22, -45.000000000000000 },\n-  { -1.7299598742816476e-21, -44.000000000000000 },\n-  { -4.8094965569500181e-21, -43.000000000000000 },\n-  { -1.3377908810011775e-20, -42.000000000000000 },\n-  { -3.7231667764599780e-20, -41.000000000000000 },\n-  { -1.0367732614516570e-19, -40.000000000000000 },\n-  { -2.8887793015227007e-19, -39.000000000000000 },\n-  { -8.0541069142907499e-19, -38.000000000000000 },\n-  { -2.2470206975885714e-18, -37.000000000000000 },\n-  { -6.2733390097622421e-18, -36.000000000000000 },\n-  { -1.7527059389947371e-17, -35.000000000000000 },\n-  { -4.9006761183927874e-17, -34.000000000000000 },\n-  { -1.3713843484487468e-16, -33.000000000000000 },\n-  { -3.8409618012250671e-16, -32.000000000000000 },\n-  { -1.0767670386162383e-15, -31.000000000000000 },\n-  { -3.0215520106888124e-15, -30.000000000000000 },\n-  { -8.4877597783535634e-15, -29.000000000000000 },\n-  { -2.3869415119337330e-14, -28.000000000000000 },\n-  { -6.7206374352620390e-14, -27.000000000000000 },\n-  { -1.8946858856749785e-13, -26.000000000000000 },\n-  { -5.3488997553402167e-13, -25.000000000000000 },\n-  { -1.5123058939997059e-12, -24.000000000000000 },\n-  { -4.2826847956656722e-12, -23.000000000000000 },\n-  { -1.2149378956204371e-11, -22.000000000000000 },\n-  { -3.4532012671467559e-11, -21.000000000000000 },\n-  { -9.8355252906498815e-11, -20.000000000000000 },\n-  { -2.8078290970607954e-10, -19.000000000000000 },\n-  { -8.0360903448286769e-10, -18.000000000000000 },\n-  { -2.3064319898216547e-09, -17.000000000000000 },\n-  { -6.6404872494410427e-09, -16.000000000000000 },\n-  { -1.9186278921478670e-08, -15.000000000000000 },\n-  { -5.5656311111451816e-08, -14.000000000000000 },\n-  { -1.6218662188014328e-07, -13.000000000000000 },\n-  { -4.7510818246724931e-07, -12.000000000000000 },\n-  { -1.4003003042474418e-06, -11.000000000000000 },\n-  { -4.1569689296853246e-06, -10.000000000000000 },\n-  { -1.2447354178006272e-05, -9.0000000000000000 },\n-  { -3.7665622843924906e-05, -8.0000000000000000 },\n-  { -0.00011548173161033820, -7.0000000000000000 },\n-  { -0.00036008245216265862, -6.0000000000000000 },\n-  { -0.0011482955912753257, -5.0000000000000000 },\n-  { -0.0037793524098489058, -4.0000000000000000 },\n-  { -0.013048381094197037, -3.0000000000000000 },\n-  { -0.048900510708061125, -2.0000000000000000 },\n-  { -0.21938393439552029, -1.0000000000000000 },\n+  { -3.7832640295504591e-24, -50.000000000000000, 0.0 },\n+  { -1.0489811642368024e-23, -49.000000000000000, 0.0 },\n+  { -2.9096641904058423e-23, -48.000000000000000, 0.0 },\n+  { -8.0741978427258127e-23, -47.000000000000000, 0.0 },\n+  { -2.2415317597442998e-22, -46.000000000000000, 0.0 },\n+  { -6.2256908094623848e-22, -45.000000000000000, 0.0 },\n+  { -1.7299598742816476e-21, -44.000000000000000, 0.0 },\n+  { -4.8094965569500181e-21, -43.000000000000000, 0.0 },\n+  { -1.3377908810011775e-20, -42.000000000000000, 0.0 },\n+  { -3.7231667764599780e-20, -41.000000000000000, 0.0 },\n+  { -1.0367732614516570e-19, -40.000000000000000, 0.0 },\n+  { -2.8887793015227007e-19, -39.000000000000000, 0.0 },\n+  { -8.0541069142907499e-19, -38.000000000000000, 0.0 },\n+  { -2.2470206975885710e-18, -37.000000000000000, 0.0 },\n+  { -6.2733390097622421e-18, -36.000000000000000, 0.0 },\n+  { -1.7527059389947371e-17, -35.000000000000000, 0.0 },\n+  { -4.9006761183927874e-17, -34.000000000000000, 0.0 },\n+  { -1.3713843484487468e-16, -33.000000000000000, 0.0 },\n+  { -3.8409618012250671e-16, -32.000000000000000, 0.0 },\n+  { -1.0767670386162381e-15, -31.000000000000000, 0.0 },\n+  { -3.0215520106888124e-15, -30.000000000000000, 0.0 },\n+  { -8.4877597783535634e-15, -29.000000000000000, 0.0 },\n+  { -2.3869415119337330e-14, -28.000000000000000, 0.0 },\n+  { -6.7206374352620390e-14, -27.000000000000000, 0.0 },\n+  { -1.8946858856749785e-13, -26.000000000000000, 0.0 },\n+  { -5.3488997553402167e-13, -25.000000000000000, 0.0 },\n+  { -1.5123058939997059e-12, -24.000000000000000, 0.0 },\n+  { -4.2826847956656722e-12, -23.000000000000000, 0.0 },\n+  { -1.2149378956204371e-11, -22.000000000000000, 0.0 },\n+  { -3.4532012671467559e-11, -21.000000000000000, 0.0 },\n+  { -9.8355252906498815e-11, -20.000000000000000, 0.0 },\n+  { -2.8078290970607954e-10, -19.000000000000000, 0.0 },\n+  { -8.0360903448286769e-10, -18.000000000000000, 0.0 },\n+  { -2.3064319898216543e-09, -17.000000000000000, 0.0 },\n+  { -6.6404872494410427e-09, -16.000000000000000, 0.0 },\n+  { -1.9186278921478670e-08, -15.000000000000000, 0.0 },\n+  { -5.5656311111451816e-08, -14.000000000000000, 0.0 },\n+  { -1.6218662188014328e-07, -13.000000000000000, 0.0 },\n+  { -4.7510818246724931e-07, -12.000000000000000, 0.0 },\n+  { -1.4003003042474418e-06, -11.000000000000000, 0.0 },\n+  { -4.1569689296853246e-06, -10.000000000000000, 0.0 },\n+  { -1.2447354178006272e-05, -9.0000000000000000, 0.0 },\n+  { -3.7665622843924906e-05, -8.0000000000000000, 0.0 },\n+  { -0.00011548173161033820, -7.0000000000000000, 0.0 },\n+  { -0.00036008245216265862, -6.0000000000000000, 0.0 },\n+  { -0.0011482955912753257, -5.0000000000000000, 0.0 },\n+  { -0.0037793524098489063, -4.0000000000000000, 0.0 },\n+  { -0.013048381094197037, -3.0000000000000000, 0.0 },\n+  { -0.048900510708061125, -2.0000000000000000, 0.0 },\n+  { -0.21938393439552029, -1.0000000000000000, 0.0 },\n };\n const double toler001 = 2.5000000000000020e-13;\n //  expint\n \n \n // Test data.\n-// max(|f - f_GSL|): 2048.0000000000000\n-// max(|f - f_GSL| / |f_GSL|): 1.4993769017626171e-15\n+// max(|f - f_GSL|): 16384.000000000000 at index 48\n+// max(|f - f_GSL| / |f_GSL|): 1.2494807514688476e-15\n+// mean(f - f_GSL): 371.15283351771996\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): 7.1444587641577012e+253\n const testcase_expint<double>\n data002[50] =\n {\n-  { 1.8951178163559366, 1.0000000000000000 },\n-  { 4.9542343560018907, 2.0000000000000000 },\n-  { 9.9338325706254160, 3.0000000000000000 },\n-  { 19.630874470056217, 4.0000000000000000 },\n-  { 40.185275355803178, 5.0000000000000000 },\n-  { 85.989762142439204, 6.0000000000000000 },\n-  { 191.50474333550136, 7.0000000000000000 },\n-  { 440.37989953483833, 8.0000000000000000 },\n-  { 1037.8782907170896, 9.0000000000000000 },\n-  { 2492.2289762418782, 10.000000000000000 },\n-  { 6071.4063740986112, 11.000000000000000 },\n-  { 14959.532666397528, 12.000000000000000 },\n-  { 37197.688490689041, 13.000000000000000 },\n-  { 93192.513633965369, 14.000000000000000 },\n-  { 234955.85249076830, 15.000000000000000 },\n-  { 595560.99867083691, 16.000000000000000 },\n-  { 1516637.8940425171, 17.000000000000000 },\n-  { 3877904.3305974435, 18.000000000000000 },\n-  { 9950907.2510468438, 19.000000000000000 },\n-  { 25615652.664056588, 20.000000000000000 },\n-  { 66127186.355484925, 21.000000000000000 },\n-  { 171144671.30036369, 22.000000000000000 },\n-  { 443966369.83027124, 23.000000000000000 },\n-  { 1154115391.8491828, 24.000000000000000 },\n-  { 3005950906.5255494, 25.000000000000000 },\n-  { 7842940991.8981876, 26.000000000000000 },\n-  { 20496497119.880810, 27.000000000000000 },\n-  { 53645118592.314682, 28.000000000000000 },\n-  { 140599195758.40689, 29.000000000000000 },\n-  { 368973209407.27417, 30.000000000000000 },\n-  { 969455575968.39392, 31.000000000000000 },\n-  { 2550043566357.7871, 32.000000000000000 },\n-  { 6714640184076.4971, 33.000000000000000 },\n-  { 17698037244116.266, 34.000000000000000 },\n-  { 46690550144661.602, 35.000000000000000 },\n-  { 123285207991209.75, 36.000000000000000 },\n-  { 325798899867226.50, 37.000000000000000 },\n-  { 861638819996578.75, 38.000000000000000 },\n-  { 2280446200301902.5, 39.000000000000000 },\n-  { 6039718263611242.0, 40.000000000000000 },\n-  { 16006649143245042., 41.000000000000000 },\n-  { 42447960921368504., 42.000000000000000 },\n-  { 1.1263482901669666e+17, 43.000000000000000 },\n-  { 2.9904447186323366e+17, 44.000000000000000 },\n-  { 7.9439160357044531e+17, 45.000000000000000 },\n-  { 2.1113423886478239e+18, 46.000000000000000 },\n-  { 5.6143296808103424e+18, 47.000000000000000 },\n-  { 1.4936302131129930e+19, 48.000000000000000 },\n-  { 3.9754427479037444e+19, 49.000000000000000 },\n-  { 1.0585636897131690e+20, 50.000000000000000 },\n+  { 1.8951178163559366, 1.0000000000000000, 0.0 },\n+  { 4.9542343560018907, 2.0000000000000000, 0.0 },\n+  { 9.9338325706254160, 3.0000000000000000, 0.0 },\n+  { 19.630874470056217, 4.0000000000000000, 0.0 },\n+  { 40.185275355803178, 5.0000000000000000, 0.0 },\n+  { 85.989762142439204, 6.0000000000000000, 0.0 },\n+  { 191.50474333550136, 7.0000000000000000, 0.0 },\n+  { 440.37989953483833, 8.0000000000000000, 0.0 },\n+  { 1037.8782907170896, 9.0000000000000000, 0.0 },\n+  { 2492.2289762418782, 10.000000000000000, 0.0 },\n+  { 6071.4063740986112, 11.000000000000000, 0.0 },\n+  { 14959.532666397528, 12.000000000000000, 0.0 },\n+  { 37197.688490689041, 13.000000000000000, 0.0 },\n+  { 93192.513633965369, 14.000000000000000, 0.0 },\n+  { 234955.85249076830, 15.000000000000000, 0.0 },\n+  { 595560.99867083691, 16.000000000000000, 0.0 },\n+  { 1516637.8940425171, 17.000000000000000, 0.0 },\n+  { 3877904.3305974435, 18.000000000000000, 0.0 },\n+  { 9950907.2510468438, 19.000000000000000, 0.0 },\n+  { 25615652.664056588, 20.000000000000000, 0.0 },\n+  { 66127186.355484933, 21.000000000000000, 0.0 },\n+  { 171144671.30036369, 22.000000000000000, 0.0 },\n+  { 443966369.83027118, 23.000000000000000, 0.0 },\n+  { 1154115391.8491828, 24.000000000000000, 0.0 },\n+  { 3005950906.5255494, 25.000000000000000, 0.0 },\n+  { 7842940991.8981876, 26.000000000000000, 0.0 },\n+  { 20496497119.880810, 27.000000000000000, 0.0 },\n+  { 53645118592.314682, 28.000000000000000, 0.0 },\n+  { 140599195758.40689, 29.000000000000000, 0.0 },\n+  { 368973209407.27417, 30.000000000000000, 0.0 },\n+  { 969455575968.39392, 31.000000000000000, 0.0 },\n+  { 2550043566357.7871, 32.000000000000000, 0.0 },\n+  { 6714640184076.4971, 33.000000000000000, 0.0 },\n+  { 17698037244116.266, 34.000000000000000, 0.0 },\n+  { 46690550144661.602, 35.000000000000000, 0.0 },\n+  { 123285207991209.75, 36.000000000000000, 0.0 },\n+  { 325798899867226.50, 37.000000000000000, 0.0 },\n+  { 861638819996578.75, 38.000000000000000, 0.0 },\n+  { 2280446200301902.5, 39.000000000000000, 0.0 },\n+  { 6039718263611242.0, 40.000000000000000, 0.0 },\n+  { 16006649143245042., 41.000000000000000, 0.0 },\n+  { 42447960921368512., 42.000000000000000, 0.0 },\n+  { 1.1263482901669666e+17, 43.000000000000000, 0.0 },\n+  { 2.9904447186323366e+17, 44.000000000000000, 0.0 },\n+  { 7.9439160357044531e+17, 45.000000000000000, 0.0 },\n+  { 2.1113423886478239e+18, 46.000000000000000, 0.0 },\n+  { 5.6143296808103424e+18, 47.000000000000000, 0.0 },\n+  { 1.4936302131129930e+19, 48.000000000000000, 0.0 },\n+  { 3.9754427479037444e+19, 49.000000000000000, 0.0 },\n+  { 1.0585636897131690e+20, 50.000000000000000, 0.0 },\n };\n const double toler002 = 2.5000000000000020e-13;\n \n-template<typename Tp, unsigned int Num>\n+template<typename Ret, unsigned int Num>\n   void\n-  test(const testcase_expint<Tp> (&data)[Num], Tp toler)\n+  test(const testcase_expint<Ret> (&data)[Num], Ret toler)\n   {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n+    bool test __attribute__((unused)) = true;\n+    const Ret eps = std::numeric_limits<Ret>::epsilon();\n+    Ret max_abs_diff = -Ret(1);\n+    Ret max_abs_frac = -Ret(1);\n     unsigned int num_datum = Num;\n     for (unsigned int i = 0; i < num_datum; ++i)\n       {\n-\tconst Tp f = std::expint(data[i].x);\n-\tconst Tp f0 = data[i].f0;\n-\tconst Tp diff = f - f0;\n+\tconst Ret f = std::expint(data[i].x);\n+\tconst Ret f0 = data[i].f0;\n+\tconst Ret diff = f - f0;\n \tif (std::abs(diff) > max_abs_diff)\n \t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n+\tif (std::abs(f0) > Ret(10) * eps\n+\t && std::abs(f) > Ret(10) * eps)\n \t  {\n-\t    const Tp frac = diff / f0;\n+\t    const Ret frac = diff / f0;\n \t    if (std::abs(frac) > max_abs_frac)\n \t      max_abs_frac = std::abs(frac);\n \t  }"}, {"sha": "92df7ebf3dad41d783fd290dd5f4197d21af38dc", "filename": "libstdc++-v3/testsuite/special_functions/15_hermite/check_value.cc", "status": "modified", "additions": 1818, "deletions": 1628, "changes": 3446, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F15_hermite%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F15_hermite%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F15_hermite%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}, {"sha": "8e640c8591b24e528f42a1504dd0ef4350ed6f1e", "filename": "libstdc++-v3/testsuite/special_functions/16_laguerre/check_value.cc", "status": "modified", "additions": 212, "deletions": 188, "changes": 400, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F16_laguerre%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F16_laguerre%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F16_laguerre%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -37,266 +37,290 @@\n #endif\n #include <specfun_testcase.h>\n \n-\n // Test data for n=0.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_laguerre<double>\n data001[21] =\n {\n-  { 1.0000000000000000, 0, 0.0000000000000000 },\n-  { 1.0000000000000000, 0, 5.0000000000000000 },\n-  { 1.0000000000000000, 0, 10.000000000000000 },\n-  { 1.0000000000000000, 0, 15.000000000000000 },\n-  { 1.0000000000000000, 0, 20.000000000000000 },\n-  { 1.0000000000000000, 0, 25.000000000000000 },\n-  { 1.0000000000000000, 0, 30.000000000000000 },\n-  { 1.0000000000000000, 0, 35.000000000000000 },\n-  { 1.0000000000000000, 0, 40.000000000000000 },\n-  { 1.0000000000000000, 0, 45.000000000000000 },\n-  { 1.0000000000000000, 0, 50.000000000000000 },\n-  { 1.0000000000000000, 0, 55.000000000000000 },\n-  { 1.0000000000000000, 0, 60.000000000000000 },\n-  { 1.0000000000000000, 0, 65.000000000000000 },\n-  { 1.0000000000000000, 0, 70.000000000000000 },\n-  { 1.0000000000000000, 0, 75.000000000000000 },\n-  { 1.0000000000000000, 0, 80.000000000000000 },\n-  { 1.0000000000000000, 0, 85.000000000000000 },\n-  { 1.0000000000000000, 0, 90.000000000000000 },\n-  { 1.0000000000000000, 0, 95.000000000000000 },\n-  { 1.0000000000000000, 0, 100.00000000000000 },\n+  { 1.0000000000000000, 0, 0.0000000000000000, 0.0 },\n+  { 1.0000000000000000, 0, 5.0000000000000000, 0.0 },\n+  { 1.0000000000000000, 0, 10.000000000000000, 0.0 },\n+  { 1.0000000000000000, 0, 15.000000000000000, 0.0 },\n+  { 1.0000000000000000, 0, 20.000000000000000, 0.0 },\n+  { 1.0000000000000000, 0, 25.000000000000000, 0.0 },\n+  { 1.0000000000000000, 0, 30.000000000000000, 0.0 },\n+  { 1.0000000000000000, 0, 35.000000000000000, 0.0 },\n+  { 1.0000000000000000, 0, 40.000000000000000, 0.0 },\n+  { 1.0000000000000000, 0, 45.000000000000000, 0.0 },\n+  { 1.0000000000000000, 0, 50.000000000000000, 0.0 },\n+  { 1.0000000000000000, 0, 55.000000000000000, 0.0 },\n+  { 1.0000000000000000, 0, 60.000000000000000, 0.0 },\n+  { 1.0000000000000000, 0, 65.000000000000000, 0.0 },\n+  { 1.0000000000000000, 0, 70.000000000000000, 0.0 },\n+  { 1.0000000000000000, 0, 75.000000000000000, 0.0 },\n+  { 1.0000000000000000, 0, 80.000000000000000, 0.0 },\n+  { 1.0000000000000000, 0, 85.000000000000000, 0.0 },\n+  { 1.0000000000000000, 0, 90.000000000000000, 0.0 },\n+  { 1.0000000000000000, 0, 95.000000000000000, 0.0 },\n+  { 1.0000000000000000, 0, 100.00000000000000, 0.0 },\n };\n const double toler001 = 2.5000000000000020e-13;\n \n // Test data for n=1.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_laguerre<double>\n data002[21] =\n {\n-  { 1.0000000000000000, 1, 0.0000000000000000 },\n-  { -4.0000000000000000, 1, 5.0000000000000000 },\n-  { -9.0000000000000000, 1, 10.000000000000000 },\n-  { -14.000000000000000, 1, 15.000000000000000 },\n-  { -19.000000000000000, 1, 20.000000000000000 },\n-  { -24.000000000000000, 1, 25.000000000000000 },\n-  { -29.000000000000000, 1, 30.000000000000000 },\n-  { -34.000000000000000, 1, 35.000000000000000 },\n-  { -39.000000000000000, 1, 40.000000000000000 },\n-  { -44.000000000000000, 1, 45.000000000000000 },\n-  { -49.000000000000000, 1, 50.000000000000000 },\n-  { -54.000000000000000, 1, 55.000000000000000 },\n-  { -59.000000000000000, 1, 60.000000000000000 },\n-  { -64.000000000000000, 1, 65.000000000000000 },\n-  { -69.000000000000000, 1, 70.000000000000000 },\n-  { -74.000000000000000, 1, 75.000000000000000 },\n-  { -79.000000000000000, 1, 80.000000000000000 },\n-  { -84.000000000000000, 1, 85.000000000000000 },\n-  { -89.000000000000000, 1, 90.000000000000000 },\n-  { -94.000000000000000, 1, 95.000000000000000 },\n-  { -99.000000000000000, 1, 100.00000000000000 },\n+  { 1.0000000000000000, 1, 0.0000000000000000, 0.0 },\n+  { -4.0000000000000000, 1, 5.0000000000000000, 0.0 },\n+  { -9.0000000000000000, 1, 10.000000000000000, 0.0 },\n+  { -14.000000000000000, 1, 15.000000000000000, 0.0 },\n+  { -19.000000000000000, 1, 20.000000000000000, 0.0 },\n+  { -24.000000000000000, 1, 25.000000000000000, 0.0 },\n+  { -29.000000000000000, 1, 30.000000000000000, 0.0 },\n+  { -34.000000000000000, 1, 35.000000000000000, 0.0 },\n+  { -39.000000000000000, 1, 40.000000000000000, 0.0 },\n+  { -44.000000000000000, 1, 45.000000000000000, 0.0 },\n+  { -49.000000000000000, 1, 50.000000000000000, 0.0 },\n+  { -54.000000000000000, 1, 55.000000000000000, 0.0 },\n+  { -59.000000000000000, 1, 60.000000000000000, 0.0 },\n+  { -64.000000000000000, 1, 65.000000000000000, 0.0 },\n+  { -69.000000000000000, 1, 70.000000000000000, 0.0 },\n+  { -74.000000000000000, 1, 75.000000000000000, 0.0 },\n+  { -79.000000000000000, 1, 80.000000000000000, 0.0 },\n+  { -84.000000000000000, 1, 85.000000000000000, 0.0 },\n+  { -89.000000000000000, 1, 90.000000000000000, 0.0 },\n+  { -94.000000000000000, 1, 95.000000000000000, 0.0 },\n+  { -99.000000000000000, 1, 100.00000000000000, 0.0 },\n };\n const double toler002 = 2.5000000000000020e-13;\n \n // Test data for n=2.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_laguerre<double>\n data003[21] =\n {\n-  { 1.0000000000000000, 2, 0.0000000000000000 },\n-  { 3.5000000000000000, 2, 5.0000000000000000 },\n-  { 31.000000000000000, 2, 10.000000000000000 },\n-  { 83.500000000000000, 2, 15.000000000000000 },\n-  { 161.00000000000000, 2, 20.000000000000000 },\n-  { 263.50000000000000, 2, 25.000000000000000 },\n-  { 391.00000000000000, 2, 30.000000000000000 },\n-  { 543.50000000000000, 2, 35.000000000000000 },\n-  { 721.00000000000000, 2, 40.000000000000000 },\n-  { 923.50000000000000, 2, 45.000000000000000 },\n-  { 1151.0000000000000, 2, 50.000000000000000 },\n-  { 1403.5000000000000, 2, 55.000000000000000 },\n-  { 1681.0000000000000, 2, 60.000000000000000 },\n-  { 1983.5000000000000, 2, 65.000000000000000 },\n-  { 2311.0000000000000, 2, 70.000000000000000 },\n-  { 2663.5000000000000, 2, 75.000000000000000 },\n-  { 3041.0000000000000, 2, 80.000000000000000 },\n-  { 3443.5000000000000, 2, 85.000000000000000 },\n-  { 3871.0000000000000, 2, 90.000000000000000 },\n-  { 4323.5000000000000, 2, 95.000000000000000 },\n-  { 4801.0000000000000, 2, 100.00000000000000 },\n+  { 1.0000000000000000, 2, 0.0000000000000000, 0.0 },\n+  { 3.5000000000000000, 2, 5.0000000000000000, 0.0 },\n+  { 31.000000000000000, 2, 10.000000000000000, 0.0 },\n+  { 83.500000000000000, 2, 15.000000000000000, 0.0 },\n+  { 161.00000000000000, 2, 20.000000000000000, 0.0 },\n+  { 263.50000000000000, 2, 25.000000000000000, 0.0 },\n+  { 391.00000000000000, 2, 30.000000000000000, 0.0 },\n+  { 543.50000000000000, 2, 35.000000000000000, 0.0 },\n+  { 721.00000000000000, 2, 40.000000000000000, 0.0 },\n+  { 923.50000000000000, 2, 45.000000000000000, 0.0 },\n+  { 1151.0000000000000, 2, 50.000000000000000, 0.0 },\n+  { 1403.5000000000000, 2, 55.000000000000000, 0.0 },\n+  { 1681.0000000000000, 2, 60.000000000000000, 0.0 },\n+  { 1983.5000000000000, 2, 65.000000000000000, 0.0 },\n+  { 2311.0000000000000, 2, 70.000000000000000, 0.0 },\n+  { 2663.5000000000000, 2, 75.000000000000000, 0.0 },\n+  { 3041.0000000000000, 2, 80.000000000000000, 0.0 },\n+  { 3443.5000000000000, 2, 85.000000000000000, 0.0 },\n+  { 3871.0000000000000, 2, 90.000000000000000, 0.0 },\n+  { 4323.5000000000000, 2, 95.000000000000000, 0.0 },\n+  { 4801.0000000000000, 2, 100.00000000000000, 0.0 },\n };\n const double toler003 = 2.5000000000000020e-13;\n \n // Test data for n=5.\n-// max(|f - f_GSL|): 7.4505805969238281e-09\n+// max(|f - f_GSL|): 7.4505805969238281e-09 at index 20\n // max(|f - f_GSL| / |f_GSL|): 1.9501553136894460e-16\n+// mean(f - f_GSL): -9.1645146498075565e-11\n+// variance(f - f_GSL): 2.8430813755854757e-18\n+// stddev(f - f_GSL): 1.6861439367934980e-09\n const testcase_laguerre<double>\n data004[21] =\n {\n-  { 1.0000000000000000, 5, 0.0000000000000000 },\n-  { -3.1666666666666665, 5, 5.0000000000000000 },\n-  { 34.333333333333329, 5, 10.000000000000000 },\n-  { -355.25000000000000, 5, 15.000000000000000 },\n-  { -4765.6666666666670, 5, 20.000000000000000 },\n-  { -23040.666666666664, 5, 25.000000000000000 },\n-  { -74399.000000000000, 5, 30.000000000000000 },\n-  { -190559.41666666663, 5, 35.000000000000000 },\n-  { -418865.66666666663, 5, 40.000000000000000 },\n-  { -825411.50000000000, 5, 45.000000000000000 },\n-  { -1498165.6666666665, 5, 50.000000000000000 },\n-  { -2550096.9166666670, 5, 55.000000000000000 },\n-  { -4122299.0000000000, 5, 60.000000000000000 },\n-  { -6387115.6666666670, 5, 65.000000000000000 },\n-  { -9551265.6666666679, 5, 70.000000000000000 },\n-  { -13858967.750000000, 5, 75.000000000000000 },\n-  { -19595065.666666664, 5, 80.000000000000000 },\n-  { -27088153.166666668, 5, 85.000000000000000 },\n-  { -36713699.000000000, 5, 90.000000000000000 },\n-  { -48897171.916666657, 5, 95.000000000000000 },\n-  { -64117165.666666664, 5, 100.00000000000000 },\n+  { 1.0000000000000000, 5, 0.0000000000000000, 0.0 },\n+  { -3.1666666666666665, 5, 5.0000000000000000, 0.0 },\n+  { 34.333333333333329, 5, 10.000000000000000, 0.0 },\n+  { -355.25000000000000, 5, 15.000000000000000, 0.0 },\n+  { -4765.6666666666670, 5, 20.000000000000000, 0.0 },\n+  { -23040.666666666664, 5, 25.000000000000000, 0.0 },\n+  { -74399.000000000000, 5, 30.000000000000000, 0.0 },\n+  { -190559.41666666663, 5, 35.000000000000000, 0.0 },\n+  { -418865.66666666663, 5, 40.000000000000000, 0.0 },\n+  { -825411.50000000000, 5, 45.000000000000000, 0.0 },\n+  { -1498165.6666666665, 5, 50.000000000000000, 0.0 },\n+  { -2550096.9166666670, 5, 55.000000000000000, 0.0 },\n+  { -4122299.0000000000, 5, 60.000000000000000, 0.0 },\n+  { -6387115.6666666670, 5, 65.000000000000000, 0.0 },\n+  { -9551265.6666666679, 5, 70.000000000000000, 0.0 },\n+  { -13858967.750000000, 5, 75.000000000000000, 0.0 },\n+  { -19595065.666666664, 5, 80.000000000000000, 0.0 },\n+  { -27088153.166666668, 5, 85.000000000000000, 0.0 },\n+  { -36713699.000000000, 5, 90.000000000000000, 0.0 },\n+  { -48897171.916666657, 5, 95.000000000000000, 0.0 },\n+  { -64117165.666666664, 5, 100.00000000000000, 0.0 },\n };\n const double toler004 = 2.5000000000000020e-13;\n \n // Test data for n=10.\n-// max(|f - f_GSL|): 0.0029296875000000000\n+// max(|f - f_GSL|): 0.0029296875000000000 at index 19\n // max(|f - f_GSL| / |f_GSL|): 6.1315986390500118e-15\n+// mean(f - f_GSL): -0.00011841882388131082\n+// variance(f - f_GSL): 7.3638903636883773e-10\n+// stddev(f - f_GSL): 2.7136489020668051e-05\n const testcase_laguerre<double>\n data005[21] =\n {\n-  { 1.0000000000000000, 10, 0.0000000000000000 },\n-  { 1.7562761794532631, 10, 5.0000000000000000 },\n-  { 27.984126984126977, 10, 10.000000000000000 },\n-  { -237.51841517857147, 10, 15.000000000000000 },\n-  { 3227.8077601410932, 10, 20.000000000000000 },\n-  { -45786.199797453693, 10, 25.000000000000000 },\n-  { 15129.571428571455, 10, 30.000000000000000 },\n-  { 7764800.8179494590, 10, 35.000000000000000 },\n-  { 79724066.608465582, 10, 40.000000000000000 },\n-  { 469865425.65122765, 10, 45.000000000000000 },\n-  { 2037190065.3738980, 10, 50.000000000000000 },\n-  { 7187828002.9825764, 10, 55.000000000000000 },\n-  { 21804200401.000000, 10, 60.000000000000000 },\n-  { 58854343015.616211, 10, 65.000000000000000 },\n-  { 144688291819.51855, 10, 70.000000000000000 },\n-  { 329425241736.70038, 10, 75.000000000000000 },\n-  { 703324772760.08276, 10, 80.000000000000000 },\n-  { 1421627560118.6157, 10, 85.000000000000000 },\n-  { 2741055412243.8569, 10, 90.000000000000000 },\n-  { 5071986977681.8652, 10, 95.000000000000000 },\n-  { 9051283795429.5723, 10, 100.00000000000000 },\n+  { 1.0000000000000000, 10, 0.0000000000000000, 0.0 },\n+  { 1.7562761794532631, 10, 5.0000000000000000, 0.0 },\n+  { 27.984126984126977, 10, 10.000000000000000, 0.0 },\n+  { -237.51841517857147, 10, 15.000000000000000, 0.0 },\n+  { 3227.8077601410932, 10, 20.000000000000000, 0.0 },\n+  { -45786.199797453693, 10, 25.000000000000000, 0.0 },\n+  { 15129.571428571455, 10, 30.000000000000000, 0.0 },\n+  { 7764800.8179494590, 10, 35.000000000000000, 0.0 },\n+  { 79724066.608465582, 10, 40.000000000000000, 0.0 },\n+  { 469865425.65122765, 10, 45.000000000000000, 0.0 },\n+  { 2037190065.3738980, 10, 50.000000000000000, 0.0 },\n+  { 7187828002.9825764, 10, 55.000000000000000, 0.0 },\n+  { 21804200401.000000, 10, 60.000000000000000, 0.0 },\n+  { 58854343015.616211, 10, 65.000000000000000, 0.0 },\n+  { 144688291819.51855, 10, 70.000000000000000, 0.0 },\n+  { 329425241736.70038, 10, 75.000000000000000, 0.0 },\n+  { 703324772760.08276, 10, 80.000000000000000, 0.0 },\n+  { 1421627560118.6157, 10, 85.000000000000000, 0.0 },\n+  { 2741055412243.8569, 10, 90.000000000000000, 0.0 },\n+  { 5071986977681.8652, 10, 95.000000000000000, 0.0 },\n+  { 9051283795429.5723, 10, 100.00000000000000, 0.0 },\n };\n const double toler005 = 5.0000000000000039e-13;\n \n // Test data for n=20.\n-// max(|f - f_GSL|): 2048.0000000000000\n+// max(|f - f_GSL|): 2048.0000000000000 at index 19\n // max(|f - f_GSL| / |f_GSL|): 7.1189246999774008e-15\n+// mean(f - f_GSL): -96.983562564903480\n+// variance(f - f_GSL): 8.4641159685539344e+21\n+// stddev(f - f_GSL): 92000630261.721222\n const testcase_laguerre<double>\n data006[21] =\n {\n-  { 1.0000000000000000, 20, 0.0000000000000000 },\n-  { 2.0202257444769134, 20, 5.0000000000000000 },\n-  { -11.961333867812119, 20, 10.000000000000000 },\n-  { -50.151037960139455, 20, 15.000000000000000 },\n-  { 2829.4728613531743, 20, 20.000000000000000 },\n-  { -11583.947899113540, 20, 25.000000000000000 },\n-  { -18439.424502520938, 20, 30.000000000000000 },\n-  { -38838.223606979285, 20, 35.000000000000000 },\n-  { 24799805.877530713, 20, 40.000000000000000 },\n-  { -673953823.59913278, 20, 45.000000000000000 },\n-  { 7551960453.7672548, 20, 50.000000000000000 },\n-  { 31286508510.614746, 20, 55.000000000000000 },\n-  { -1379223608444.9155, 20, 60.000000000000000 },\n-  { -6692517968212.9717, 20, 65.000000000000000 },\n-  { 165423821874449.94, 20, 70.000000000000000 },\n-  { 3082390018008546.5, 20, 75.000000000000000 },\n-  { 29500368536981676., 20, 80.000000000000000 },\n-  { 2.0353526354974186e+17, 20, 85.000000000000000 },\n-  { 1.1292309514432901e+18, 20, 90.000000000000000 },\n-  { 5.3239262855563100e+18, 20, 95.000000000000000 },\n-  { 2.2061882785931735e+19, 20, 100.00000000000000 },\n+  { 1.0000000000000000, 20, 0.0000000000000000, 0.0 },\n+  { 2.0202257444769134, 20, 5.0000000000000000, 0.0 },\n+  { -11.961333867812119, 20, 10.000000000000000, 0.0 },\n+  { -50.151037960139455, 20, 15.000000000000000, 0.0 },\n+  { 2829.4728613531743, 20, 20.000000000000000, 0.0 },\n+  { -11583.947899113540, 20, 25.000000000000000, 0.0 },\n+  { -18439.424502520938, 20, 30.000000000000000, 0.0 },\n+  { -38838.223606979285, 20, 35.000000000000000, 0.0 },\n+  { 24799805.877530713, 20, 40.000000000000000, 0.0 },\n+  { -673953823.59913278, 20, 45.000000000000000, 0.0 },\n+  { 7551960453.7672548, 20, 50.000000000000000, 0.0 },\n+  { 31286508510.614746, 20, 55.000000000000000, 0.0 },\n+  { -1379223608444.9155, 20, 60.000000000000000, 0.0 },\n+  { -6692517968212.9717, 20, 65.000000000000000, 0.0 },\n+  { 165423821874449.94, 20, 70.000000000000000, 0.0 },\n+  { 3082390018008546.5, 20, 75.000000000000000, 0.0 },\n+  { 29500368536981676., 20, 80.000000000000000, 0.0 },\n+  { 2.0353526354974186e+17, 20, 85.000000000000000, 0.0 },\n+  { 1.1292309514432901e+18, 20, 90.000000000000000, 0.0 },\n+  { 5.3239262855563100e+18, 20, 95.000000000000000, 0.0 },\n+  { 2.2061882785931735e+19, 20, 100.00000000000000, 0.0 },\n };\n const double toler006 = 5.0000000000000039e-13;\n \n // Test data for n=50.\n-// max(|f - f_GSL|): 196608.00000000000\n+// max(|f - f_GSL|): 196608.00000000000 at index 20\n // max(|f - f_GSL| / |f_GSL|): 4.2910775919271532e-15\n+// mean(f - f_GSL): -8840.7163987470722\n+// variance(f - f_GSL): 9.4918743844066836e+19\n+// stddev(f - f_GSL): 9742625100.2523346\n const testcase_laguerre<double>\n data007[21] =\n {\n-  { 1.0000000000000000, 50, 0.0000000000000000 },\n-  { 1.4735258819430543, 50, 5.0000000000000000 },\n-  { 17.534183446338233, 50, 10.000000000000000 },\n-  { -195.62436619077380, 50, 15.000000000000000 },\n-  { 980.26961889791028, 50, 20.000000000000000 },\n-  { 24812.277673870878, 50, 25.000000000000000 },\n-  { 293000.50735962362, 50, 30.000000000000000 },\n-  { 2316195.5013375278, 50, 35.000000000000000 },\n-  { -14896937.968694873, 50, 40.000000000000000 },\n-  { -502066598.00813466, 50, 45.000000000000000 },\n-  { 2513677852.6916871, 50, 50.000000000000000 },\n-  { 45129675503.538910, 50, 55.000000000000000 },\n-  { -883876565337.99219, 50, 60.000000000000000 },\n-  { 9361319947203.8418, 50, 65.000000000000000 },\n-  { -80967880733583.234, 50, 70.000000000000000 },\n-  { 717391079438942.62, 50, 75.000000000000000 },\n-  { -8217471769564841.0, 50, 80.000000000000000 },\n-  { 1.2595276229009978e+17, 50, 85.000000000000000 },\n-  { -2.1140031308048891e+18, 50, 90.000000000000000 },\n-  { 3.2438187475835134e+19, 50, 95.000000000000000 },\n-  { -3.9710103487094692e+20, 50, 100.00000000000000 },\n+  { 1.0000000000000000, 50, 0.0000000000000000, 0.0 },\n+  { 1.4735258819430543, 50, 5.0000000000000000, 0.0 },\n+  { 17.534183446338233, 50, 10.000000000000000, 0.0 },\n+  { -195.62436619077380, 50, 15.000000000000000, 0.0 },\n+  { 980.26961889791028, 50, 20.000000000000000, 0.0 },\n+  { 24812.277673870878, 50, 25.000000000000000, 0.0 },\n+  { 293000.50735962362, 50, 30.000000000000000, 0.0 },\n+  { 2316195.5013375278, 50, 35.000000000000000, 0.0 },\n+  { -14896937.968694873, 50, 40.000000000000000, 0.0 },\n+  { -502066598.00813466, 50, 45.000000000000000, 0.0 },\n+  { 2513677852.6916871, 50, 50.000000000000000, 0.0 },\n+  { 45129675503.538910, 50, 55.000000000000000, 0.0 },\n+  { -883876565337.99219, 50, 60.000000000000000, 0.0 },\n+  { 9361319947203.8418, 50, 65.000000000000000, 0.0 },\n+  { -80967880733583.234, 50, 70.000000000000000, 0.0 },\n+  { 717391079438942.62, 50, 75.000000000000000, 0.0 },\n+  { -8217471769564841.0, 50, 80.000000000000000, 0.0 },\n+  { 1.2595276229009978e+17, 50, 85.000000000000000, 0.0 },\n+  { -2.1140031308048891e+18, 50, 90.000000000000000, 0.0 },\n+  { 3.2438187475835134e+19, 50, 95.000000000000000, 0.0 },\n+  { -3.9710103487094692e+20, 50, 100.00000000000000, 0.0 },\n };\n const double toler007 = 2.5000000000000020e-13;\n \n // Test data for n=100.\n-// max(|f - f_GSL|): 98304.000000000000\n+// max(|f - f_GSL|): 98304.000000000000 at index 20\n // max(|f - f_GSL| / |f_GSL|): 3.8776197831393928e-15\n+// mean(f - f_GSL): -3668.6107413234895\n+// variance(f - f_GSL): 2.7407314162194493e+19\n+// stddev(f - f_GSL): 5235199534.1337748\n const testcase_laguerre<double>\n data008[21] =\n {\n-  { 1.0000000000000000, 100, 0.0000000000000000 },\n-  { 1.4555271625328801, 100, 5.0000000000000000 },\n-  { 13.277662844303450, 100, 10.000000000000000 },\n-  { 91.737038454342454, 100, 15.000000000000000 },\n-  { 1854.0367283243388, 100, 20.000000000000000 },\n-  { -11281.698886837261, 100, 25.000000000000000 },\n-  { 170141.86987046551, 100, 30.000000000000000 },\n-  { -2950092.7025822806, 100, 35.000000000000000 },\n-  { -7272442.3156006960, 100, 40.000000000000000 },\n-  { 295697471.90876162, 100, 45.000000000000000 },\n-  { 4847420871.2690506, 100, 50.000000000000000 },\n-  { 59406998102.392288, 100, 55.000000000000000 },\n-  { 693492765740.29688, 100, 60.000000000000000 },\n-  { 6606192010150.3154, 100, 65.000000000000000 },\n-  { 17125518672239.770, 100, 70.000000000000000 },\n-  { -870493767065150.12, 100, 75.000000000000000 },\n-  { -13763178176383768., 100, 80.000000000000000 },\n-  { 30667078414479584., 100, 85.000000000000000 },\n-  { 2.1307220490380173e+18, 100, 90.000000000000000 },\n-  { -7.2706523009007821e+18, 100, 95.000000000000000 },\n-  { -2.6292260693068916e+20, 100, 100.00000000000000 },\n+  { 1.0000000000000000, 100, 0.0000000000000000, 0.0 },\n+  { 1.4555271625328801, 100, 5.0000000000000000, 0.0 },\n+  { 13.277662844303450, 100, 10.000000000000000, 0.0 },\n+  { 91.737038454342454, 100, 15.000000000000000, 0.0 },\n+  { 1854.0367283243388, 100, 20.000000000000000, 0.0 },\n+  { -11281.698886837261, 100, 25.000000000000000, 0.0 },\n+  { 170141.86987046551, 100, 30.000000000000000, 0.0 },\n+  { -2950092.7025822806, 100, 35.000000000000000, 0.0 },\n+  { -7272442.3156006960, 100, 40.000000000000000, 0.0 },\n+  { 295697471.90876162, 100, 45.000000000000000, 0.0 },\n+  { 4847420871.2690506, 100, 50.000000000000000, 0.0 },\n+  { 59406998102.392288, 100, 55.000000000000000, 0.0 },\n+  { 693492765740.29688, 100, 60.000000000000000, 0.0 },\n+  { 6606192010150.3154, 100, 65.000000000000000, 0.0 },\n+  { 17125518672239.770, 100, 70.000000000000000, 0.0 },\n+  { -870493767065150.12, 100, 75.000000000000000, 0.0 },\n+  { -13763178176383768., 100, 80.000000000000000, 0.0 },\n+  { 30667078414479584., 100, 85.000000000000000, 0.0 },\n+  { 2.1307220490380173e+18, 100, 90.000000000000000, 0.0 },\n+  { -7.2706523009007821e+18, 100, 95.000000000000000, 0.0 },\n+  { -2.6292260693068916e+20, 100, 100.00000000000000, 0.0 },\n };\n const double toler008 = 2.5000000000000020e-13;\n \n-template<typename Tp, unsigned int Num>\n+template<typename Ret, unsigned int Num>\n   void\n-  test(const testcase_laguerre<Tp> (&data)[Num], Tp toler)\n+  test(const testcase_laguerre<Ret> (&data)[Num], Ret toler)\n   {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n+    bool test __attribute__((unused)) = true;\n+    const Ret eps = std::numeric_limits<Ret>::epsilon();\n+    Ret max_abs_diff = -Ret(1);\n+    Ret max_abs_frac = -Ret(1);\n     unsigned int num_datum = Num;\n     for (unsigned int i = 0; i < num_datum; ++i)\n       {\n-\tconst Tp f = std::laguerre(data[i].n, data[i].x);\n-\tconst Tp f0 = data[i].f0;\n-\tconst Tp diff = f - f0;\n+\tconst Ret f = std::laguerre(data[i].n, data[i].x);\n+\tconst Ret f0 = data[i].f0;\n+\tconst Ret diff = f - f0;\n \tif (std::abs(diff) > max_abs_diff)\n \t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n+\tif (std::abs(f0) > Ret(10) * eps\n+\t && std::abs(f) > Ret(10) * eps)\n \t  {\n-\t    const Tp frac = diff / f0;\n+\t    const Ret frac = diff / f0;\n \t    if (std::abs(frac) > max_abs_frac)\n \t      max_abs_frac = std::abs(frac);\n \t  }"}, {"sha": "45c21f1f0f7c1b546857040eb0ace8b142cde19d", "filename": "libstdc++-v3/testsuite/special_functions/17_legendre/check_value.cc", "status": "modified", "additions": 216, "deletions": 192, "changes": 408, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F17_legendre%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F17_legendre%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F17_legendre%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -37,266 +37,290 @@\n #endif\n #include <specfun_testcase.h>\n \n-\n // Test data for l=0.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_legendre<double>\n data001[21] =\n {\n-  { 1.0000000000000000, 0, -1.0000000000000000 },\n-  { 1.0000000000000000, 0, -0.90000000000000002 },\n-  { 1.0000000000000000, 0, -0.80000000000000004 },\n-  { 1.0000000000000000, 0, -0.69999999999999996 },\n-  { 1.0000000000000000, 0, -0.59999999999999998 },\n-  { 1.0000000000000000, 0, -0.50000000000000000 },\n-  { 1.0000000000000000, 0, -0.40000000000000002 },\n-  { 1.0000000000000000, 0, -0.30000000000000004 },\n-  { 1.0000000000000000, 0, -0.19999999999999996 },\n-  { 1.0000000000000000, 0, -0.099999999999999978 },\n-  { 1.0000000000000000, 0, 0.0000000000000000 },\n-  { 1.0000000000000000, 0, 0.10000000000000009 },\n-  { 1.0000000000000000, 0, 0.19999999999999996 },\n-  { 1.0000000000000000, 0, 0.30000000000000004 },\n-  { 1.0000000000000000, 0, 0.39999999999999991 },\n-  { 1.0000000000000000, 0, 0.50000000000000000 },\n-  { 1.0000000000000000, 0, 0.60000000000000009 },\n-  { 1.0000000000000000, 0, 0.69999999999999996 },\n-  { 1.0000000000000000, 0, 0.80000000000000004 },\n-  { 1.0000000000000000, 0, 0.89999999999999991 },\n-  { 1.0000000000000000, 0, 1.0000000000000000 },\n+  { 1.0000000000000000, 0, -1.0000000000000000, 0.0 },\n+  { 1.0000000000000000, 0, -0.90000000000000002, 0.0 },\n+  { 1.0000000000000000, 0, -0.80000000000000004, 0.0 },\n+  { 1.0000000000000000, 0, -0.69999999999999996, 0.0 },\n+  { 1.0000000000000000, 0, -0.59999999999999998, 0.0 },\n+  { 1.0000000000000000, 0, -0.50000000000000000, 0.0 },\n+  { 1.0000000000000000, 0, -0.39999999999999991, 0.0 },\n+  { 1.0000000000000000, 0, -0.29999999999999993, 0.0 },\n+  { 1.0000000000000000, 0, -0.19999999999999996, 0.0 },\n+  { 1.0000000000000000, 0, -0.099999999999999978, 0.0 },\n+  { 1.0000000000000000, 0, 0.0000000000000000, 0.0 },\n+  { 1.0000000000000000, 0, 0.10000000000000009, 0.0 },\n+  { 1.0000000000000000, 0, 0.20000000000000018, 0.0 },\n+  { 1.0000000000000000, 0, 0.30000000000000004, 0.0 },\n+  { 1.0000000000000000, 0, 0.40000000000000013, 0.0 },\n+  { 1.0000000000000000, 0, 0.50000000000000000, 0.0 },\n+  { 1.0000000000000000, 0, 0.60000000000000009, 0.0 },\n+  { 1.0000000000000000, 0, 0.70000000000000018, 0.0 },\n+  { 1.0000000000000000, 0, 0.80000000000000004, 0.0 },\n+  { 1.0000000000000000, 0, 0.90000000000000013, 0.0 },\n+  { 1.0000000000000000, 0, 1.0000000000000000, 0.0 },\n };\n const double toler001 = 2.5000000000000020e-13;\n \n // Test data for l=1.\n-// max(|f - f_GSL|): 0.0000000000000000\n+// max(|f - f_GSL|): 0.0000000000000000 at index 0\n // max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 0.0000000000000000\n+// stddev(f - f_GSL): 0.0000000000000000\n const testcase_legendre<double>\n data002[21] =\n {\n-  { -1.0000000000000000, 1, -1.0000000000000000 },\n-  { -0.90000000000000002, 1, -0.90000000000000002 },\n-  { -0.80000000000000004, 1, -0.80000000000000004 },\n-  { -0.69999999999999996, 1, -0.69999999999999996 },\n-  { -0.59999999999999998, 1, -0.59999999999999998 },\n-  { -0.50000000000000000, 1, -0.50000000000000000 },\n-  { -0.40000000000000002, 1, -0.40000000000000002 },\n-  { -0.30000000000000004, 1, -0.30000000000000004 },\n-  { -0.19999999999999996, 1, -0.19999999999999996 },\n-  { -0.099999999999999978, 1, -0.099999999999999978 },\n-  { 0.0000000000000000, 1, 0.0000000000000000 },\n-  { 0.10000000000000009, 1, 0.10000000000000009 },\n-  { 0.19999999999999996, 1, 0.19999999999999996 },\n-  { 0.30000000000000004, 1, 0.30000000000000004 },\n-  { 0.39999999999999991, 1, 0.39999999999999991 },\n-  { 0.50000000000000000, 1, 0.50000000000000000 },\n-  { 0.60000000000000009, 1, 0.60000000000000009 },\n-  { 0.69999999999999996, 1, 0.69999999999999996 },\n-  { 0.80000000000000004, 1, 0.80000000000000004 },\n-  { 0.89999999999999991, 1, 0.89999999999999991 },\n-  { 1.0000000000000000, 1, 1.0000000000000000 },\n+  { -1.0000000000000000, 1, -1.0000000000000000, 0.0 },\n+  { -0.90000000000000002, 1, -0.90000000000000002, 0.0 },\n+  { -0.80000000000000004, 1, -0.80000000000000004, 0.0 },\n+  { -0.69999999999999996, 1, -0.69999999999999996, 0.0 },\n+  { -0.59999999999999998, 1, -0.59999999999999998, 0.0 },\n+  { -0.50000000000000000, 1, -0.50000000000000000, 0.0 },\n+  { -0.39999999999999991, 1, -0.39999999999999991, 0.0 },\n+  { -0.29999999999999993, 1, -0.29999999999999993, 0.0 },\n+  { -0.19999999999999996, 1, -0.19999999999999996, 0.0 },\n+  { -0.099999999999999978, 1, -0.099999999999999978, 0.0 },\n+  { 0.0000000000000000, 1, 0.0000000000000000, 0.0 },\n+  { 0.10000000000000009, 1, 0.10000000000000009, 0.0 },\n+  { 0.20000000000000018, 1, 0.20000000000000018, 0.0 },\n+  { 0.30000000000000004, 1, 0.30000000000000004, 0.0 },\n+  { 0.40000000000000013, 1, 0.40000000000000013, 0.0 },\n+  { 0.50000000000000000, 1, 0.50000000000000000, 0.0 },\n+  { 0.60000000000000009, 1, 0.60000000000000009, 0.0 },\n+  { 0.70000000000000018, 1, 0.70000000000000018, 0.0 },\n+  { 0.80000000000000004, 1, 0.80000000000000004, 0.0 },\n+  { 0.90000000000000013, 1, 0.90000000000000013, 0.0 },\n+  { 1.0000000000000000, 1, 1.0000000000000000, 0.0 },\n };\n const double toler002 = 2.5000000000000020e-13;\n \n // Test data for l=2.\n-// max(|f - f_GSL|): 1.1102230246251565e-16\n+// max(|f - f_GSL|): 1.1102230246251565e-16 at index 17\n // max(|f - f_GSL| / |f_GSL|): 1.3877787807814482e-15\n+// mean(f - f_GSL): 1.8503717077085941e-17\n+// variance(f - f_GSL): 1.7975346147614202e-35\n+// stddev(f - f_GSL): 4.2397342071896678e-18\n const testcase_legendre<double>\n data003[21] =\n {\n-  { 1.0000000000000000, 2, -1.0000000000000000 },\n-  { 0.71500000000000008, 2, -0.90000000000000002 },\n-  { 0.46000000000000019, 2, -0.80000000000000004 },\n-  { 0.23499999999999988, 2, -0.69999999999999996 },\n-  { 0.039999999999999925, 2, -0.59999999999999998 },\n-  { -0.12500000000000000, 2, -0.50000000000000000 },\n-  { -0.25999999999999995, 2, -0.40000000000000002 },\n-  { -0.36499999999999999, 2, -0.30000000000000004 },\n-  { -0.44000000000000006, 2, -0.19999999999999996 },\n-  { -0.48499999999999999, 2, -0.099999999999999978 },\n-  { -0.50000000000000000, 2, 0.0000000000000000 },\n-  { -0.48499999999999999, 2, 0.10000000000000009 },\n-  { -0.44000000000000006, 2, 0.19999999999999996 },\n-  { -0.36499999999999999, 2, 0.30000000000000004 },\n-  { -0.26000000000000012, 2, 0.39999999999999991 },\n-  { -0.12500000000000000, 2, 0.50000000000000000 },\n-  { 0.040000000000000147, 2, 0.60000000000000009 },\n-  { 0.23499999999999988, 2, 0.69999999999999996 },\n-  { 0.46000000000000019, 2, 0.80000000000000004 },\n-  { 0.71499999999999986, 2, 0.89999999999999991 },\n-  { 1.0000000000000000, 2, 1.0000000000000000 },\n+  { 1.0000000000000000, 2, -1.0000000000000000, 0.0 },\n+  { 0.71500000000000008, 2, -0.90000000000000002, 0.0 },\n+  { 0.46000000000000019, 2, -0.80000000000000004, 0.0 },\n+  { 0.23499999999999988, 2, -0.69999999999999996, 0.0 },\n+  { 0.039999999999999925, 2, -0.59999999999999998, 0.0 },\n+  { -0.12500000000000000, 2, -0.50000000000000000, 0.0 },\n+  { -0.26000000000000012, 2, -0.39999999999999991, 0.0 },\n+  { -0.36500000000000005, 2, -0.29999999999999993, 0.0 },\n+  { -0.44000000000000006, 2, -0.19999999999999996, 0.0 },\n+  { -0.48499999999999999, 2, -0.099999999999999978, 0.0 },\n+  { -0.50000000000000000, 2, 0.0000000000000000, 0.0 },\n+  { -0.48499999999999999, 2, 0.10000000000000009, 0.0 },\n+  { -0.43999999999999989, 2, 0.20000000000000018, 0.0 },\n+  { -0.36499999999999999, 2, 0.30000000000000004, 0.0 },\n+  { -0.25999999999999984, 2, 0.40000000000000013, 0.0 },\n+  { -0.12500000000000000, 2, 0.50000000000000000, 0.0 },\n+  { 0.040000000000000147, 2, 0.60000000000000009, 0.0 },\n+  { 0.23500000000000032, 2, 0.70000000000000018, 0.0 },\n+  { 0.46000000000000019, 2, 0.80000000000000004, 0.0 },\n+  { 0.71500000000000030, 2, 0.90000000000000013, 0.0 },\n+  { 1.0000000000000000, 2, 1.0000000000000000, 0.0 },\n };\n const double toler003 = 2.5000000000000020e-13;\n \n // Test data for l=5.\n-// max(|f - f_GSL|): 2.0122792321330962e-16\n-// max(|f - f_GSL| / |f_GSL|): 4.8911475274404243e-15\n+// max(|f - f_GSL|): 2.0122792321330962e-16 at index 19\n+// max(|f - f_GSL| / |f_GSL|): 4.8911475274405560e-15\n+// mean(f - f_GSL): -2.3129646346357427e-18\n+// variance(f - f_GSL): 2.8086478355647191e-37\n+// stddev(f - f_GSL): 5.2996677589870847e-19\n const testcase_legendre<double>\n data004[21] =\n {\n-  { -1.0000000000000000, 5, -1.0000000000000000 },\n-  { 0.041141250000000087, 5, -0.90000000000000002 },\n-  { 0.39951999999999993, 5, -0.80000000000000004 },\n-  { 0.36519874999999991, 5, -0.69999999999999996 },\n-  { 0.15263999999999994, 5, -0.59999999999999998 },\n-  { -0.089843750000000000, 5, -0.50000000000000000 },\n-  { -0.27063999999999994, 5, -0.40000000000000002 },\n-  { -0.34538625000000001, 5, -0.30000000000000004 },\n-  { -0.30751999999999996, 5, -0.19999999999999996 },\n-  { -0.17882874999999995, 5, -0.099999999999999978 },\n-  { 0.0000000000000000, 5, 0.0000000000000000 },\n-  { 0.17882875000000015, 5, 0.10000000000000009 },\n-  { 0.30751999999999996, 5, 0.19999999999999996 },\n-  { 0.34538625000000001, 5, 0.30000000000000004 },\n-  { 0.27064000000000010, 5, 0.39999999999999991 },\n-  { 0.089843750000000000, 5, 0.50000000000000000 },\n-  { -0.15264000000000016, 5, 0.60000000000000009 },\n-  { -0.36519874999999991, 5, 0.69999999999999996 },\n-  { -0.39951999999999993, 5, 0.80000000000000004 },\n-  { -0.041141250000000261, 5, 0.89999999999999991 },\n-  { 1.0000000000000000, 5, 1.0000000000000000 },\n+  { -1.0000000000000000, 5, -1.0000000000000000, 0.0 },\n+  { 0.041141250000000087, 5, -0.90000000000000002, 0.0 },\n+  { 0.39951999999999993, 5, -0.80000000000000004, 0.0 },\n+  { 0.36519874999999991, 5, -0.69999999999999996, 0.0 },\n+  { 0.15263999999999994, 5, -0.59999999999999998, 0.0 },\n+  { -0.089843750000000000, 5, -0.50000000000000000, 0.0 },\n+  { -0.27064000000000010, 5, -0.39999999999999991, 0.0 },\n+  { -0.34538624999999995, 5, -0.29999999999999993, 0.0 },\n+  { -0.30751999999999996, 5, -0.19999999999999996, 0.0 },\n+  { -0.17882874999999995, 5, -0.099999999999999978, 0.0 },\n+  { 0.0000000000000000, 5, 0.0000000000000000, 0.0 },\n+  { 0.17882875000000015, 5, 0.10000000000000009, 0.0 },\n+  { 0.30752000000000013, 5, 0.20000000000000018, 0.0 },\n+  { 0.34538625000000001, 5, 0.30000000000000004, 0.0 },\n+  { 0.27063999999999988, 5, 0.40000000000000013, 0.0 },\n+  { 0.089843750000000000, 5, 0.50000000000000000, 0.0 },\n+  { -0.15264000000000016, 5, 0.60000000000000009, 0.0 },\n+  { -0.36519875000000024, 5, 0.70000000000000018, 0.0 },\n+  { -0.39951999999999993, 5, 0.80000000000000004, 0.0 },\n+  { -0.041141249999999151, 5, 0.90000000000000013, 0.0 },\n+  { 1.0000000000000000, 5, 1.0000000000000000, 0.0 },\n };\n const double toler004 = 2.5000000000000020e-13;\n \n // Test data for l=10.\n-// max(|f - f_GSL|): 2.7755575615628914e-16\n-// max(|f - f_GSL| / |f_GSL|): 1.0547610802636413e-15\n+// max(|f - f_GSL|): 3.8857805861880479e-16 at index 19\n+// max(|f - f_GSL| / |f_GSL|): 1.4766655123690915e-15\n+// mean(f - f_GSL): -2.5112187461759493e-17\n+// variance(f - f_GSL): 3.3107652853513909e-35\n+// stddev(f - f_GSL): 5.7539249954716919e-18\n const testcase_legendre<double>\n data005[21] =\n {\n-  { 1.0000000000000000, 10, -1.0000000000000000 },\n-  { -0.26314561785585960, 10, -0.90000000000000002 },\n-  { 0.30052979560000004, 10, -0.80000000000000004 },\n-  { 0.085805795531640333, 10, -0.69999999999999996 },\n-  { -0.24366274560000001, 10, -0.59999999999999998 },\n-  { -0.18822860717773438, 10, -0.50000000000000000 },\n-  { 0.096839064399999925, 10, -0.40000000000000002 },\n-  { 0.25147634951601561, 10, -0.30000000000000004 },\n-  { 0.12907202559999983, 10, -0.19999999999999996 },\n-  { -0.12212499738710943, 10, -0.099999999999999978 },\n-  { -0.24609375000000000, 10, 0.0000000000000000 },\n-  { -0.12212499738710922, 10, 0.10000000000000009 },\n-  { 0.12907202559999983, 10, 0.19999999999999996 },\n-  { 0.25147634951601561, 10, 0.30000000000000004 },\n-  { 0.096839064400000258, 10, 0.39999999999999991 },\n-  { -0.18822860717773438, 10, 0.50000000000000000 },\n-  { -0.24366274559999984, 10, 0.60000000000000009 },\n-  { 0.085805795531640333, 10, 0.69999999999999996 },\n-  { 0.30052979560000004, 10, 0.80000000000000004 },\n-  { -0.26314561785585899, 10, 0.89999999999999991 },\n-  { 1.0000000000000000, 10, 1.0000000000000000 },\n+  { 1.0000000000000000, 10, -1.0000000000000000, 0.0 },\n+  { -0.26314561785585960, 10, -0.90000000000000002, 0.0 },\n+  { 0.30052979560000004, 10, -0.80000000000000004, 0.0 },\n+  { 0.085805795531640333, 10, -0.69999999999999996, 0.0 },\n+  { -0.24366274560000001, 10, -0.59999999999999998, 0.0 },\n+  { -0.18822860717773438, 10, -0.50000000000000000, 0.0 },\n+  { 0.096839064400000258, 10, -0.39999999999999991, 0.0 },\n+  { 0.25147634951601561, 10, -0.29999999999999993, 0.0 },\n+  { 0.12907202559999983, 10, -0.19999999999999996, 0.0 },\n+  { -0.12212499738710943, 10, -0.099999999999999978, 0.0 },\n+  { -0.24609375000000000, 10, 0.0000000000000000, 0.0 },\n+  { -0.12212499738710922, 10, 0.10000000000000009, 0.0 },\n+  { 0.12907202560000042, 10, 0.20000000000000018, 0.0 },\n+  { 0.25147634951601561, 10, 0.30000000000000004, 0.0 },\n+  { 0.096839064399999633, 10, 0.40000000000000013, 0.0 },\n+  { -0.18822860717773438, 10, 0.50000000000000000, 0.0 },\n+  { -0.24366274559999984, 10, 0.60000000000000009, 0.0 },\n+  { 0.085805795531641277, 10, 0.70000000000000018, 0.0 },\n+  { 0.30052979560000004, 10, 0.80000000000000004, 0.0 },\n+  { -0.26314561785586010, 10, 0.90000000000000013, 0.0 },\n+  { 1.0000000000000000, 10, 1.0000000000000000, 0.0 },\n };\n const double toler005 = 2.5000000000000020e-13;\n \n // Test data for l=20.\n-// max(|f - f_GSL|): 3.3306690738754696e-16\n-// max(|f - f_GSL| / |f_GSL|): 2.2307336678138069e-15\n+// max(|f - f_GSL|): 3.6082248300317588e-16 at index 19\n+// max(|f - f_GSL| / |f_GSL|): 2.4166281401316513e-15\n+// mean(f - f_GSL): 0.0000000000000000\n+// variance(f - f_GSL): 4.9424644697959907e-65\n+// stddev(f - f_GSL): 7.0302663319365015e-33\n const testcase_legendre<double>\n data006[21] =\n {\n-  { 1.0000000000000000, 20, -1.0000000000000000 },\n-  { -0.14930823530984835, 20, -0.90000000000000002 },\n-  { 0.22420460541741347, 20, -0.80000000000000004 },\n-  { -0.20457394463834172, 20, -0.69999999999999996 },\n-  { 0.15916752910098109, 20, -0.59999999999999998 },\n-  { -0.048358381067373557, 20, -0.50000000000000000 },\n-  { -0.10159261558628156, 20, -0.40000000000000002 },\n-  { 0.18028715947998042, 20, -0.30000000000000004 },\n-  { -0.098042194344594796, 20, -0.19999999999999996 },\n-  { -0.082077130944527663, 20, -0.099999999999999978 },\n-  { 0.17619705200195312, 20, 0.0000000000000000 },\n-  { -0.082077130944528023, 20, 0.10000000000000009 },\n-  { -0.098042194344594796, 20, 0.19999999999999996 },\n-  { 0.18028715947998042, 20, 0.30000000000000004 },\n-  { -0.10159261558628112, 20, 0.39999999999999991 },\n-  { -0.048358381067373557, 20, 0.50000000000000000 },\n-  { 0.15916752910098075, 20, 0.60000000000000009 },\n-  { -0.20457394463834172, 20, 0.69999999999999996 },\n-  { 0.22420460541741347, 20, 0.80000000000000004 },\n-  { -0.14930823530984924, 20, 0.89999999999999991 },\n-  { 1.0000000000000000, 20, 1.0000000000000000 },\n+  { 1.0000000000000000, 20, -1.0000000000000000, 0.0 },\n+  { -0.14930823530984835, 20, -0.90000000000000002, 0.0 },\n+  { 0.22420460541741347, 20, -0.80000000000000004, 0.0 },\n+  { -0.20457394463834172, 20, -0.69999999999999996, 0.0 },\n+  { 0.15916752910098109, 20, -0.59999999999999998, 0.0 },\n+  { -0.048358381067373557, 20, -0.50000000000000000, 0.0 },\n+  { -0.10159261558628112, 20, -0.39999999999999991, 0.0 },\n+  { 0.18028715947998047, 20, -0.29999999999999993, 0.0 },\n+  { -0.098042194344594796, 20, -0.19999999999999996, 0.0 },\n+  { -0.082077130944527663, 20, -0.099999999999999978, 0.0 },\n+  { 0.17619705200195312, 20, 0.0000000000000000, 0.0 },\n+  { -0.082077130944528023, 20, 0.10000000000000009, 0.0 },\n+  { -0.098042194344594089, 20, 0.20000000000000018, 0.0 },\n+  { 0.18028715947998042, 20, 0.30000000000000004, 0.0 },\n+  { -0.10159261558628192, 20, 0.40000000000000013, 0.0 },\n+  { -0.048358381067373557, 20, 0.50000000000000000, 0.0 },\n+  { 0.15916752910098075, 20, 0.60000000000000009, 0.0 },\n+  { -0.20457394463834136, 20, 0.70000000000000018, 0.0 },\n+  { 0.22420460541741347, 20, 0.80000000000000004, 0.0 },\n+  { -0.14930823530984758, 20, 0.90000000000000013, 0.0 },\n+  { 1.0000000000000000, 20, 1.0000000000000000, 0.0 },\n };\n const double toler006 = 2.5000000000000020e-13;\n \n // Test data for l=50.\n-// max(|f - f_GSL|): 3.6082248300317588e-16\n-// max(|f - f_GSL| / |f_GSL|): 2.1700196856209138e-15\n+// max(|f - f_GSL|): 1.6653345369377348e-16 at index 2\n+// max(|f - f_GSL| / |f_GSL|): 1.6665460706897444e-15\n+// mean(f - f_GSL): -8.0953762212251003e-18\n+// variance(f - f_GSL): 3.4405935985667807e-36\n+// stddev(f - f_GSL): 1.8548837156454796e-18\n const testcase_legendre<double>\n data007[21] =\n {\n-  { 1.0000000000000000, 50, -1.0000000000000000 },\n-  { -0.17003765994383671, 50, -0.90000000000000002 },\n-  { 0.13879737345093113, 50, -0.80000000000000004 },\n-  { -0.014572731645892852, 50, -0.69999999999999996 },\n-  { -0.058860798844002096, 50, -0.59999999999999998 },\n-  { -0.031059099239609811, 50, -0.50000000000000000 },\n-  { 0.041569033381825375, 50, -0.40000000000000002 },\n-  { 0.10911051574714797, 50, -0.30000000000000004 },\n-  { 0.083432272204197494, 50, -0.19999999999999996 },\n-  { -0.038205812661313600, 50, -0.099999999999999978 },\n-  { -0.11227517265921705, 50, 0.0000000000000000 },\n-  { -0.038205812661314155, 50, 0.10000000000000009 },\n-  { 0.083432272204197494, 50, 0.19999999999999996 },\n-  { 0.10911051574714797, 50, 0.30000000000000004 },\n-  { 0.041569033381824674, 50, 0.39999999999999991 },\n-  { -0.031059099239609811, 50, 0.50000000000000000 },\n-  { -0.058860798844001430, 50, 0.60000000000000009 },\n-  { -0.014572731645892852, 50, 0.69999999999999996 },\n-  { 0.13879737345093113, 50, 0.80000000000000004 },\n-  { -0.17003765994383657, 50, 0.89999999999999991 },\n-  { 1.0000000000000000, 50, 1.0000000000000000 },\n+  { 1.0000000000000000, 50, -1.0000000000000000, 0.0 },\n+  { -0.17003765994383671, 50, -0.90000000000000002, 0.0 },\n+  { 0.13879737345093113, 50, -0.80000000000000004, 0.0 },\n+  { -0.014572731645892852, 50, -0.69999999999999996, 0.0 },\n+  { -0.058860798844002096, 50, -0.59999999999999998, 0.0 },\n+  { -0.031059099239609811, 50, -0.50000000000000000, 0.0 },\n+  { 0.041569033381824674, 50, -0.39999999999999991, 0.0 },\n+  { 0.10911051574714790, 50, -0.29999999999999993, 0.0 },\n+  { 0.083432272204197494, 50, -0.19999999999999996, 0.0 },\n+  { -0.038205812661313600, 50, -0.099999999999999978, 0.0 },\n+  { -0.11227517265921705, 50, 0.0000000000000000, 0.0 },\n+  { -0.038205812661314155, 50, 0.10000000000000009, 0.0 },\n+  { 0.083432272204196564, 50, 0.20000000000000018, 0.0 },\n+  { 0.10911051574714797, 50, 0.30000000000000004, 0.0 },\n+  { 0.041569033381826007, 50, 0.40000000000000013, 0.0 },\n+  { -0.031059099239609811, 50, 0.50000000000000000, 0.0 },\n+  { -0.058860798844001430, 50, 0.60000000000000009, 0.0 },\n+  { -0.014572731645890737, 50, 0.70000000000000018, 0.0 },\n+  { 0.13879737345093113, 50, 0.80000000000000004, 0.0 },\n+  { -0.17003765994383679, 50, 0.90000000000000013, 0.0 },\n+  { 1.0000000000000000, 50, 1.0000000000000000, 0.0 },\n };\n const double toler007 = 2.5000000000000020e-13;\n \n // Test data for l=100.\n-// max(|f - f_GSL|): 3.4694469519536142e-16\n+// max(|f - f_GSL|): 3.4694469519536142e-16 at index 2\n // max(|f - f_GSL| / |f_GSL|): 6.8214063779431592e-15\n+// mean(f - f_GSL): -4.1385545784018113e-17\n+// variance(f - f_GSL): 8.9920078491655612e-35\n+// stddev(f - f_GSL): 9.4826198116161765e-18\n const testcase_legendre<double>\n data008[21] =\n {\n-  { 1.0000000000000000, 100, -1.0000000000000000 },\n-  { 0.10226582055871893, 100, -0.90000000000000002 },\n-  { 0.050861167913584228, 100, -0.80000000000000004 },\n-  { -0.077132507199778641, 100, -0.69999999999999996 },\n-  { -0.023747023905133141, 100, -0.59999999999999998 },\n-  { -0.060518025961861198, 100, -0.50000000000000000 },\n-  { -0.072258202125684470, 100, -0.40000000000000002 },\n-  { 0.057127392202801566, 100, -0.30000000000000004 },\n-  { 0.014681835355659706, 100, -0.19999999999999996 },\n-  { -0.063895098434750205, 100, -0.099999999999999978 },\n-  { 0.079589237387178727, 100, 0.0000000000000000 },\n-  { -0.063895098434749761, 100, 0.10000000000000009 },\n-  { 0.014681835355659706, 100, 0.19999999999999996 },\n-  { 0.057127392202801566, 100, 0.30000000000000004 },\n-  { -0.072258202125685025, 100, 0.39999999999999991 },\n-  { -0.060518025961861198, 100, 0.50000000000000000 },\n-  { -0.023747023905134217, 100, 0.60000000000000009 },\n-  { -0.077132507199778641, 100, 0.69999999999999996 },\n-  { 0.050861167913584228, 100, 0.80000000000000004 },\n-  { 0.10226582055871711, 100, 0.89999999999999991 },\n-  { 1.0000000000000000, 100, 1.0000000000000000 },\n+  { 1.0000000000000000, 100, -1.0000000000000000, 0.0 },\n+  { 0.10226582055871893, 100, -0.90000000000000002, 0.0 },\n+  { 0.050861167913584228, 100, -0.80000000000000004, 0.0 },\n+  { -0.077132507199778641, 100, -0.69999999999999996, 0.0 },\n+  { -0.023747023905133141, 100, -0.59999999999999998, 0.0 },\n+  { -0.060518025961861198, 100, -0.50000000000000000, 0.0 },\n+  { -0.072258202125685025, 100, -0.39999999999999991, 0.0 },\n+  { 0.057127392202801046, 100, -0.29999999999999993, 0.0 },\n+  { 0.014681835355659706, 100, -0.19999999999999996, 0.0 },\n+  { -0.063895098434750205, 100, -0.099999999999999978, 0.0 },\n+  { 0.079589237387178727, 100, 0.0000000000000000, 0.0 },\n+  { -0.063895098434749761, 100, 0.10000000000000009, 0.0 },\n+  { 0.014681835355657875, 100, 0.20000000000000018, 0.0 },\n+  { 0.057127392202801566, 100, 0.30000000000000004, 0.0 },\n+  { -0.072258202125684082, 100, 0.40000000000000013, 0.0 },\n+  { -0.060518025961861198, 100, 0.50000000000000000, 0.0 },\n+  { -0.023747023905134217, 100, 0.60000000000000009, 0.0 },\n+  { -0.077132507199780501, 100, 0.70000000000000018, 0.0 },\n+  { 0.050861167913584228, 100, 0.80000000000000004, 0.0 },\n+  { 0.10226582055872063, 100, 0.90000000000000013, 0.0 },\n+  { 1.0000000000000000, 100, 1.0000000000000000, 0.0 },\n };\n const double toler008 = 5.0000000000000039e-13;\n \n-template<typename Tp, unsigned int Num>\n+template<typename Ret, unsigned int Num>\n   void\n-  test(const testcase_legendre<Tp> (&data)[Num], Tp toler)\n+  test(const testcase_legendre<Ret> (&data)[Num], Ret toler)\n   {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n+    bool test __attribute__((unused)) = true;\n+    const Ret eps = std::numeric_limits<Ret>::epsilon();\n+    Ret max_abs_diff = -Ret(1);\n+    Ret max_abs_frac = -Ret(1);\n     unsigned int num_datum = Num;\n     for (unsigned int i = 0; i < num_datum; ++i)\n       {\n-\tconst Tp f = std::legendre(data[i].l, data[i].x);\n-\tconst Tp f0 = data[i].f0;\n-\tconst Tp diff = f - f0;\n+\tconst Ret f = std::legendre(data[i].l, data[i].x);\n+\tconst Ret f0 = data[i].f0;\n+\tconst Ret diff = f - f0;\n \tif (std::abs(diff) > max_abs_diff)\n \t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n+\tif (std::abs(f0) > Ret(10) * eps\n+\t && std::abs(f) > Ret(10) * eps)\n \t  {\n-\t    const Tp frac = diff / f0;\n+\t    const Ret frac = diff / f0;\n \t    if (std::abs(frac) > max_abs_frac)\n \t      max_abs_frac = std::abs(frac);\n \t  }"}, {"sha": "8733531f8b20ce895f97241bb604087161c60e60", "filename": "libstdc++-v3/testsuite/special_functions/18_riemann_zeta/check_value.cc", "status": "modified", "additions": 226, "deletions": 216, "changes": 442, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F18_riemann_zeta%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F18_riemann_zeta%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F18_riemann_zeta%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -21,7 +21,7 @@\n //  riemann_zeta\n \n // This can take long on simulators, timing out the test.\n-// { dg-additional-options \"-DMAX_ITERATIONS=5\" { target simulator } }\n+// { dg-options \"-DMAX_ITERATIONS=5\" { target simulator } }\n \n #ifndef MAX_ITERATIONS\n #define MAX_ITERATIONS (sizeof(data001) / sizeof(testcase_riemann_zeta<double>))\n@@ -46,248 +46,258 @@\n #include <specfun_testcase.h>\n \n // Test data.\n-// max(|f - f_GSL|): 8.8817841970012523e-16\n-// max(|f - f_GSL| / |f_GSL|): 3.7349082148991403e-15\n+// max(|f - f_Boost|): 6.6613381477509392e-16 at index 52\n+// max(|f - f_Boost| / |f_Boost|): 2.1066054193139689e-15\n+// mean(f - f_Boost): -2.3962839288606896e-17\n+// variance(f - f_Boost): 1.0830580134580974e-35\n+// stddev(f - f_Boost): 3.2909846755311660e-18\n const testcase_riemann_zeta<double>\n data001[55] =\n {\n-  { 0.0000000000000000, -10.000000000000000 },\n-  { -0.0033669820451019579, -9.8000000000000007 },\n-  { -0.0058129517767319039, -9.5999999999999996 },\n-  { -0.0072908732290557004, -9.4000000000000004 },\n-  { -0.0078420910654484442, -9.1999999999999993 },\n-  { -0.0075757575757575803, -9.0000000000000000 },\n-  { -0.0066476555677551898, -8.8000000000000007 },\n-  { -0.0052400095350859429, -8.5999999999999996 },\n-  { -0.0035434308017674959, -8.4000000000000004 },\n-  { -0.0017417330388368585, -8.1999999999999993 },\n-  { 0.0000000000000000, -8.0000000000000000 },\n-  { 0.0015440036789213961, -7.7999999999999998 },\n-  { 0.0027852131086497423, -7.5999999999999996 },\n-  { 0.0036537321227995880, -7.4000000000000004 },\n-  { 0.0041147930817053468, -7.2000000000000002 },\n-  { 0.0041666666666666683, -7.0000000000000000 },\n-  { 0.0038369975032738366, -6.7999999999999998 },\n-  { 0.0031780270571782981, -6.5999999999999996 },\n-  { 0.0022611282027338573, -6.4000000000000004 },\n-  { 0.0011710237049390511, -6.2000000000000002 },\n-  { 0.0000000000000000, -6.0000000000000000 },\n-  { -0.0011576366649881879, -5.7999999999999998 },\n-  { -0.0022106784318564345, -5.5999999999999996 },\n-  { -0.0030755853460586891, -5.4000000000000004 },\n-  { -0.0036804380477934787, -5.2000000000000002 },\n-  { -0.0039682539682539698, -5.0000000000000000 },\n-  { -0.0038996891301999797, -4.7999999999999998 },\n-  { -0.0034551830834302711, -4.5999999999999996 },\n-  { -0.0026366345018725115, -4.4000000000000004 },\n-  { -0.0014687209305056974, -4.2000000000000002 },\n-  { 0.0000000000000000, -4.0000000000000000 },\n-  { 0.0016960463875825202, -3.7999999999999998 },\n-  { 0.0035198355903356747, -3.5999999999999996 },\n-  { 0.0053441503206513421, -3.4000000000000004 },\n-  { 0.0070119720770910540, -3.2000000000000002 },\n-  { 0.0083333333333333350, -3.0000000000000000 },\n-  { 0.0090807294856852811, -2.7999999999999998 },\n-  { 0.0089824623788396681, -2.5999999999999996 },\n-  { 0.0077130239874243630, -2.4000000000000004 },\n-  { 0.0048792123593036068, -2.2000000000000002 },\n-  { 0.0000000000000000, -2.0000000000000000 },\n-  { -0.0075229347765968010, -1.8000000000000007 },\n-  { -0.018448986678963775, -1.5999999999999996 },\n-  { -0.033764987694047593, -1.4000000000000004 },\n-  { -0.054788441243880631, -1.1999999999999993 },\n-  { -0.083333333333333398, -1.0000000000000000 },\n-  { -0.12198707766977103, -0.80000000000000071 },\n-  { -0.17459571193801401, -0.59999999999999964 },\n-  { -0.24716546083171492, -0.40000000000000036 },\n-  { -0.34966628059831484, -0.19999999999999929 },\n-  { -0.49999999999999994, 0.0000000000000000 },\n-  { -0.73392092489633953, 0.19999999999999929 },\n-  { -1.1347977838669825, 0.40000000000000036 },\n-  { -1.9526614482239983, 0.59999999999999964 },\n-  { -4.4375384158955677, 0.80000000000000071 },\n+  { 0.0000000000000000, -10.000000000000000, 0.0 },\n+  { -0.0033669820451019570, -9.8000000000000007, 0.0 },\n+  { -0.0058129517767319012, -9.5999999999999996, 0.0 },\n+  { -0.0072908732290556961, -9.4000000000000004, 0.0 },\n+  { -0.0078420910654484390, -9.1999999999999993, 0.0 },\n+  { -0.0075757575757575760, -9.0000000000000000, 0.0 },\n+  { -0.0066476555677551889, -8.8000000000000007, 0.0 },\n+  { -0.0052400095350859403, -8.5999999999999996, 0.0 },\n+  { -0.0035434308017674907, -8.4000000000000004, 0.0 },\n+  { -0.0017417330388368587, -8.1999999999999993, 0.0 },\n+  { 0.0000000000000000, -8.0000000000000000, 0.0 },\n+  { 0.0015440036789213937, -7.7999999999999998, 0.0 },\n+  { 0.0027852131086497402, -7.5999999999999996, 0.0 },\n+  { 0.0036537321227995885, -7.4000000000000004, 0.0 },\n+  { 0.0041147930817053528, -7.1999999999999993, 0.0 },\n+  { 0.0041666666666666666, -7.0000000000000000, 0.0 },\n+  { 0.0038369975032738362, -6.7999999999999998, 0.0 },\n+  { 0.0031780270571782998, -6.5999999999999996, 0.0 },\n+  { 0.0022611282027338573, -6.4000000000000004, 0.0 },\n+  { 0.0011710237049390457, -6.1999999999999993, 0.0 },\n+  { 0.0000000000000000, -6.0000000000000000, 0.0 },\n+  { -0.0011576366649881868, -5.7999999999999998, 0.0 },\n+  { -0.0022106784318564332, -5.5999999999999996, 0.0 },\n+  { -0.0030755853460586913, -5.3999999999999995, 0.0 },\n+  { -0.0036804380477934761, -5.1999999999999993, 0.0 },\n+  { -0.0039682539682539680, -5.0000000000000000, 0.0 },\n+  { -0.0038996891301999771, -4.7999999999999998, 0.0 },\n+  { -0.0034551830834302698, -4.5999999999999996, 0.0 },\n+  { -0.0026366345018725037, -4.3999999999999995, 0.0 },\n+  { -0.0014687209305056920, -4.1999999999999993, 0.0 },\n+  { 0.0000000000000000, -4.0000000000000000, 0.0 },\n+  { 0.0016960463875825209, -3.7999999999999998, 0.0 },\n+  { 0.0035198355903356634, -3.5999999999999996, 0.0 },\n+  { 0.0053441503206513464, -3.3999999999999995, 0.0 },\n+  { 0.0070119720770910566, -3.1999999999999993, 0.0 },\n+  { 0.0083333333333333332, -3.0000000000000000, 0.0 },\n+  { 0.0090807294856852499, -2.7999999999999998, 0.0 },\n+  { 0.0089824623788396559, -2.5999999999999996, 0.0 },\n+  { 0.0077130239874243379, -2.3999999999999995, 0.0 },\n+  { 0.0048792123593035816, -2.1999999999999993, 0.0 },\n+  { 0.0000000000000000, -2.0000000000000000, 0.0 },\n+  { -0.0075229347765968738, -1.7999999999999989, 0.0 },\n+  { -0.018448986678963719, -1.5999999999999996, 0.0 },\n+  { -0.033764987694047545, -1.4000000000000004, 0.0 },\n+  { -0.054788441243880513, -1.1999999999999993, 0.0 },\n+  { -0.083333333333333329, -1.0000000000000000, 0.0 },\n+  { -0.12198707766977138, -0.79999999999999893, 0.0 },\n+  { -0.17459571193801349, -0.59999999999999964, 0.0 },\n+  { -0.24716546083171545, -0.39999999999999858, 0.0 },\n+  { -0.34966628059831456, -0.19999999999999929, 0.0 },\n+  { -0.50000000000000000, 0.0000000000000000, 0.0 },\n+  { -0.73392092489634220, 0.20000000000000107, 0.0 },\n+  { -1.1347977838669825, 0.40000000000000036, 0.0 },\n+  { -1.9526614482240094, 0.60000000000000142, 0.0 },\n+  { -4.4375384158955686, 0.80000000000000071, 0.0 },\n };\n const double toler001 = 2.5000000000000020e-13;\n //  riemann_zeta\n \n+// This can take long on simulators, timing out the test.\n+// { dg-options \"-DMAX_ITERATIONS=5\" { target simulator } }\n+\n #ifndef MAX_ITERATIONS\n #define MAX_ITERATIONS (sizeof(data001) / sizeof(testcase_riemann_zeta<double>))\n #endif\n \n \n // Test data.\n-// max(|f - f_GSL|): 2.6645352591003757e-15\n-// max(|f - f_GSL| / |f_GSL|): 1.1657079722157521e-15\n+// max(|f - f_Boost|): 8.8817841970012523e-16 at index 1\n+// max(|f - f_Boost| / |f_Boost|): 2.8599739118398860e-16\n+// mean(f - f_Boost): -1.5313421029312504e-18\n+// variance(f - f_Boost): 1.6397870961151434e-38\n+// stddev(f - f_Boost): 1.2805417197870374e-19\n const testcase_riemann_zeta<double>\n data002[145] =\n {\n-  { 5.5915824411777502, 1.2000000000000000 },\n-  { 3.1055472779775792, 1.3999999999999999 },\n-  { 2.2857656656801324, 1.6000000000000001 },\n-  { 1.8822296181028220, 1.8000000000000000 },\n-  { 1.6449340668482275, 2.0000000000000000 },\n-  { 1.4905432565068937, 2.2000000000000002 },\n-  { 1.3833428588407359, 2.3999999999999999 },\n-  { 1.3054778090727803, 2.6000000000000001 },\n-  { 1.2470314223172541, 2.7999999999999998 },\n-  { 1.2020569031595945, 3.0000000000000000 },\n-  { 1.1667733709844674, 3.2000000000000002 },\n-  { 1.1386637757280420, 3.3999999999999999 },\n-  { 1.1159890791233376, 3.6000000000000001 },\n-  { 1.0975105764590047, 3.7999999999999998 },\n-  { 1.0823232337111381, 4.0000000000000000 },\n-  { 1.0697514772338095, 4.2000000000000002 },\n-  { 1.0592817259798355, 4.4000000000000004 },\n-  { 1.0505173825665735, 4.5999999999999996 },\n-  { 1.0431480133351789, 4.7999999999999998 },\n-  { 1.0369277551433700, 5.0000000000000000 },\n-  { 1.0316598766779168, 5.2000000000000002 },\n-  { 1.0271855389203537, 5.4000000000000004 },\n-  { 1.0233754792270300, 5.5999999999999996 },\n-  { 1.0201237683883446, 5.7999999999999998 },\n-  { 1.0173430619844492, 6.0000000000000000 },\n-  { 1.0149609451852233, 6.2000000000000002 },\n-  { 1.0129170887121841, 6.4000000000000004 },\n-  { 1.0111610141542708, 6.5999999999999996 },\n-  { 1.0096503223447120, 6.7999999999999998 },\n-  { 1.0083492773819229, 7.0000000000000000 },\n-  { 1.0072276664807169, 7.2000000000000002 },\n-  { 1.0062598756930512, 7.4000000000000004 },\n-  { 1.0054241359879634, 7.5999999999999996 },\n-  { 1.0047019048164696, 7.7999999999999998 },\n-  { 1.0040773561979444, 8.0000000000000000 },\n-  { 1.0035369583062013, 8.1999999999999993 },\n-  { 1.0030691220374448, 8.4000000000000004 },\n-  { 1.0026639074861505, 8.5999999999999996 },\n-  { 1.0023127779098220, 8.8000000000000007 },\n-  { 1.0020083928260823, 9.0000000000000000 },\n-  { 1.0017444334995897, 9.1999999999999993 },\n-  { 1.0015154553480514, 9.4000000000000004 },\n-  { 1.0013167628052648, 9.5999999999999996 },\n-  { 1.0011443029840295, 9.8000000000000007 },\n-  { 1.0009945751278182, 10.000000000000000 },\n-  { 1.0008645533615086, 10.199999999999999 },\n-  { 1.0007516206744649, 10.400000000000000 },\n-  { 1.0006535124140847, 10.600000000000000 },\n-  { 1.0005682678503411, 10.800000000000001 },\n-  { 1.0004941886041194, 11.000000000000000 },\n-  { 1.0004298029239944, 11.199999999999999 },\n-  { 1.0003738349551168, 11.400000000000000 },\n-  { 1.0003251782761946, 11.600000000000000 },\n-  { 1.0002828730909989, 11.800000000000001 },\n-  { 1.0002460865533080, 12.000000000000000 },\n-  { 1.0002140957818750, 12.199999999999999 },\n-  { 1.0001862731874056, 12.400000000000000 },\n-  { 1.0001620737887460, 12.600000000000000 },\n-  { 1.0001410242422089, 12.800000000000001 },\n-  { 1.0001227133475783, 13.000000000000000 },\n-  { 1.0001067838280169, 13.199999999999999 },\n-  { 1.0000929252097515, 13.400000000000000 },\n-  { 1.0000808676518718, 13.600000000000000 },\n-  { 1.0000703765974504, 13.800000000000001 },\n-  { 1.0000612481350588, 14.000000000000000 },\n-  { 1.0000533049750668, 14.199999999999999 },\n-  { 1.0000463929582293, 14.400000000000000 },\n-  { 1.0000403780253397, 14.600000000000000 },\n-  { 1.0000351435864272, 14.800000000000001 },\n-  { 1.0000305882363070, 15.000000000000000 },\n-  { 1.0000266237704787, 15.199999999999999 },\n-  { 1.0000231734615617, 15.400000000000000 },\n-  { 1.0000201705617975, 15.600000000000000 },\n-  { 1.0000175570017611, 15.800000000000001 },\n-  { 1.0000152822594086, 16.000000000000000 },\n-  { 1.0000133023770337, 16.199999999999999 },\n-  { 1.0000115791066830, 16.399999999999999 },\n-  { 1.0000100791671644, 16.600000000000001 },\n-  { 1.0000087735980010, 16.800000000000001 },\n-  { 1.0000076371976379, 17.000000000000000 },\n-  { 1.0000066480348633, 17.199999999999999 },\n-  { 1.0000057870238734, 17.399999999999999 },\n-  { 1.0000050375546607, 17.600000000000001 },\n-  { 1.0000043851715013, 17.800000000000001 },\n-  { 1.0000038172932648, 18.000000000000000 },\n-  { 1.0000033229700953, 18.199999999999999 },\n-  { 1.0000028926717153, 18.399999999999999 },\n-  { 1.0000025181032419, 18.600000000000001 },\n-  { 1.0000021920449287, 18.800000000000001 },\n-  { 1.0000019082127167, 19.000000000000000 },\n-  { 1.0000016611368951, 19.199999999999999 },\n-  { 1.0000014460565094, 19.399999999999999 },\n-  { 1.0000012588274738, 19.600000000000001 },\n-  { 1.0000010958426055, 19.800000000000001 },\n-  { 1.0000009539620338, 20.000000000000000 },\n-  { 1.0000008304526344, 20.199999999999999 },\n-  { 1.0000007229353187, 20.399999999999999 },\n-  { 1.0000006293391575, 20.600000000000001 },\n-  { 1.0000005478614529, 20.800000000000001 },\n-  { 1.0000004769329869, 21.000000000000000 },\n-  { 1.0000004151877719, 21.199999999999999 },\n-  { 1.0000003614367254, 21.399999999999999 },\n-  { 1.0000003146447527, 21.600000000000001 },\n-  { 1.0000002739108020, 21.800000000000001 },\n-  { 1.0000002384505029, 22.000000000000000 },\n-  { 1.0000002075810521, 22.199999999999999 },\n-  { 1.0000001807080625, 22.399999999999999 },\n-  { 1.0000001573141093, 22.600000000000001 },\n-  { 1.0000001369487659, 22.800000000000001 },\n-  { 1.0000001192199262, 23.000000000000000 },\n-  { 1.0000001037862520, 23.199999999999999 },\n-  { 1.0000000903506006, 23.399999999999999 },\n-  { 1.0000000786543011, 23.600000000000001 },\n-  { 1.0000000684721728, 23.800000000000001 },\n-  { 1.0000000596081891, 24.000000000000000 },\n-  { 1.0000000518917020, 24.199999999999999 },\n-  { 1.0000000451741575, 24.399999999999999 },\n-  { 1.0000000393262332, 24.600000000000001 },\n-  { 1.0000000342353501, 24.800000000000001 },\n-  { 1.0000000298035037, 25.000000000000000 },\n-  { 1.0000000259453767, 25.199999999999999 },\n-  { 1.0000000225866978, 25.399999999999999 },\n-  { 1.0000000196628109, 25.600000000000001 },\n-  { 1.0000000171174297, 25.800000000000001 },\n-  { 1.0000000149015549, 26.000000000000000 },\n-  { 1.0000000129725304, 26.199999999999999 },\n-  { 1.0000000112932221, 26.399999999999999 },\n-  { 1.0000000098313035, 26.600000000000001 },\n-  { 1.0000000085586331, 26.800000000000001 },\n-  { 1.0000000074507118, 27.000000000000000 },\n-  { 1.0000000064862125, 27.199999999999999 },\n-  { 1.0000000056465688, 27.399999999999999 },\n-  { 1.0000000049156179, 27.600000000000001 },\n-  { 1.0000000042792894, 27.800000000000001 },\n-  { 1.0000000037253340, 28.000000000000000 },\n-  { 1.0000000032430887, 28.199999999999999 },\n-  { 1.0000000028232703, 28.399999999999999 },\n-  { 1.0000000024577977, 28.600000000000001 },\n-  { 1.0000000021396356, 28.800000000000001 },\n-  { 1.0000000018626598, 29.000000000000000 },\n-  { 1.0000000016215385, 29.199999999999999 },\n-  { 1.0000000014116306, 29.399999999999999 },\n-  { 1.0000000012288952, 29.600000000000001 },\n-  { 1.0000000010698147, 29.800000000000001 },\n-  { 1.0000000009313275, 30.000000000000000 },\n+  { 5.5915824411777519, 1.2000000000000000, 0.0 },\n+  { 3.1055472779775810, 1.3999999999999999, 0.0 },\n+  { 2.2857656656801297, 1.6000000000000001, 0.0 },\n+  { 1.8822296181028220, 1.8000000000000000, 0.0 },\n+  { 1.6449340668482264, 2.0000000000000000, 0.0 },\n+  { 1.4905432565068935, 2.2000000000000002, 0.0 },\n+  { 1.3833428588407355, 2.4000000000000004, 0.0 },\n+  { 1.3054778090727805, 2.6000000000000001, 0.0 },\n+  { 1.2470314223172534, 2.7999999999999998, 0.0 },\n+  { 1.2020569031595942, 3.0000000000000000, 0.0 },\n+  { 1.1667733709844670, 3.2000000000000002, 0.0 },\n+  { 1.1386637757280416, 3.4000000000000004, 0.0 },\n+  { 1.1159890791233376, 3.6000000000000001, 0.0 },\n+  { 1.0975105764590043, 3.8000000000000003, 0.0 },\n+  { 1.0823232337111381, 4.0000000000000000, 0.0 },\n+  { 1.0697514772338095, 4.2000000000000002, 0.0 },\n+  { 1.0592817259798355, 4.4000000000000004, 0.0 },\n+  { 1.0505173825665735, 4.5999999999999996, 0.0 },\n+  { 1.0431480133351789, 4.8000000000000007, 0.0 },\n+  { 1.0369277551433700, 5.0000000000000000, 0.0 },\n+  { 1.0316598766779166, 5.2000000000000002, 0.0 },\n+  { 1.0271855389203539, 5.4000000000000004, 0.0 },\n+  { 1.0233754792270300, 5.6000000000000005, 0.0 },\n+  { 1.0201237683883446, 5.8000000000000007, 0.0 },\n+  { 1.0173430619844492, 6.0000000000000000, 0.0 },\n+  { 1.0149609451852231, 6.2000000000000002, 0.0 },\n+  { 1.0129170887121841, 6.4000000000000004, 0.0 },\n+  { 1.0111610141542711, 6.6000000000000005, 0.0 },\n+  { 1.0096503223447120, 6.8000000000000007, 0.0 },\n+  { 1.0083492773819229, 7.0000000000000000, 0.0 },\n+  { 1.0072276664807172, 7.2000000000000002, 0.0 },\n+  { 1.0062598756930512, 7.4000000000000004, 0.0 },\n+  { 1.0054241359879634, 7.6000000000000005, 0.0 },\n+  { 1.0047019048164696, 7.8000000000000007, 0.0 },\n+  { 1.0040773561979444, 8.0000000000000000, 0.0 },\n+  { 1.0035369583062013, 8.1999999999999993, 0.0 },\n+  { 1.0030691220374448, 8.4000000000000004, 0.0 },\n+  { 1.0026639074861505, 8.6000000000000014, 0.0 },\n+  { 1.0023127779098220, 8.8000000000000007, 0.0 },\n+  { 1.0020083928260821, 9.0000000000000000, 0.0 },\n+  { 1.0017444334995897, 9.2000000000000011, 0.0 },\n+  { 1.0015154553480514, 9.4000000000000004, 0.0 },\n+  { 1.0013167628052648, 9.5999999999999996, 0.0 },\n+  { 1.0011443029840295, 9.8000000000000007, 0.0 },\n+  { 1.0009945751278180, 10.000000000000000, 0.0 },\n+  { 1.0008645533615088, 10.200000000000001, 0.0 },\n+  { 1.0007516206744651, 10.400000000000000, 0.0 },\n+  { 1.0006535124140850, 10.600000000000001, 0.0 },\n+  { 1.0005682678503411, 10.800000000000001, 0.0 },\n+  { 1.0004941886041194, 11.000000000000000, 0.0 },\n+  { 1.0004298029239942, 11.200000000000001, 0.0 },\n+  { 1.0003738349551166, 11.400000000000000, 0.0 },\n+  { 1.0003251782761946, 11.600000000000001, 0.0 },\n+  { 1.0002828730909989, 11.800000000000001, 0.0 },\n+  { 1.0002460865533080, 12.000000000000000, 0.0 },\n+  { 1.0002140957818750, 12.200000000000001, 0.0 },\n+  { 1.0001862731874054, 12.400000000000000, 0.0 },\n+  { 1.0001620737887460, 12.600000000000001, 0.0 },\n+  { 1.0001410242422091, 12.800000000000001, 0.0 },\n+  { 1.0001227133475785, 13.000000000000000, 0.0 },\n+  { 1.0001067838280169, 13.200000000000001, 0.0 },\n+  { 1.0000929252097515, 13.400000000000000, 0.0 },\n+  { 1.0000808676518720, 13.600000000000001, 0.0 },\n+  { 1.0000703765974504, 13.800000000000001, 0.0 },\n+  { 1.0000612481350588, 14.000000000000000, 0.0 },\n+  { 1.0000533049750668, 14.200000000000001, 0.0 },\n+  { 1.0000463929582293, 14.400000000000000, 0.0 },\n+  { 1.0000403780253397, 14.600000000000001, 0.0 },\n+  { 1.0000351435864272, 14.800000000000001, 0.0 },\n+  { 1.0000305882363070, 15.000000000000000, 0.0 },\n+  { 1.0000266237704787, 15.200000000000001, 0.0 },\n+  { 1.0000231734615617, 15.400000000000000, 0.0 },\n+  { 1.0000201705617975, 15.600000000000001, 0.0 },\n+  { 1.0000175570017611, 15.800000000000001, 0.0 },\n+  { 1.0000152822594086, 16.000000000000000, 0.0 },\n+  { 1.0000133023770335, 16.200000000000003, 0.0 },\n+  { 1.0000115791066833, 16.399999999999999, 0.0 },\n+  { 1.0000100791671644, 16.600000000000001, 0.0 },\n+  { 1.0000087735980012, 16.800000000000001, 0.0 },\n+  { 1.0000076371976379, 17.000000000000000, 0.0 },\n+  { 1.0000066480348633, 17.199999999999999, 0.0 },\n+  { 1.0000057870238737, 17.400000000000002, 0.0 },\n+  { 1.0000050375546610, 17.600000000000001, 0.0 },\n+  { 1.0000043851715013, 17.800000000000001, 0.0 },\n+  { 1.0000038172932650, 18.000000000000000, 0.0 },\n+  { 1.0000033229700953, 18.199999999999999, 0.0 },\n+  { 1.0000028926717150, 18.400000000000002, 0.0 },\n+  { 1.0000025181032419, 18.600000000000001, 0.0 },\n+  { 1.0000021920449285, 18.800000000000001, 0.0 },\n+  { 1.0000019082127165, 19.000000000000000, 0.0 },\n+  { 1.0000016611368951, 19.199999999999999, 0.0 },\n+  { 1.0000014460565094, 19.400000000000002, 0.0 },\n+  { 1.0000012588274738, 19.600000000000001, 0.0 },\n+  { 1.0000010958426055, 19.800000000000001, 0.0 },\n+  { 1.0000009539620338, 20.000000000000000, 0.0 },\n+  { 1.0000008304526344, 20.200000000000003, 0.0 },\n+  { 1.0000007229353187, 20.400000000000002, 0.0 },\n+  { 1.0000006293391575, 20.600000000000001, 0.0 },\n+  { 1.0000005478614529, 20.800000000000001, 0.0 },\n+  { 1.0000004769329869, 21.000000000000000, 0.0 },\n+  { 1.0000004151877719, 21.200000000000003, 0.0 },\n+  { 1.0000003614367252, 21.400000000000002, 0.0 },\n+  { 1.0000003146447527, 21.600000000000001, 0.0 },\n+  { 1.0000002739108020, 21.800000000000001, 0.0 },\n+  { 1.0000002384505027, 22.000000000000000, 0.0 },\n+  { 1.0000002075810521, 22.200000000000003, 0.0 },\n+  { 1.0000001807080625, 22.400000000000002, 0.0 },\n+  { 1.0000001573141093, 22.600000000000001, 0.0 },\n+  { 1.0000001369487659, 22.800000000000001, 0.0 },\n+  { 1.0000001192199259, 23.000000000000000, 0.0 },\n+  { 1.0000001037862518, 23.200000000000003, 0.0 },\n+  { 1.0000000903506006, 23.400000000000002, 0.0 },\n+  { 1.0000000786543011, 23.600000000000001, 0.0 },\n+  { 1.0000000684721728, 23.800000000000001, 0.0 },\n+  { 1.0000000596081891, 24.000000000000000, 0.0 },\n+  { 1.0000000518917020, 24.200000000000003, 0.0 },\n+  { 1.0000000451741575, 24.400000000000002, 0.0 },\n+  { 1.0000000393262332, 24.600000000000001, 0.0 },\n+  { 1.0000000342353501, 24.800000000000001, 0.0 },\n+  { 1.0000000298035034, 25.000000000000000, 0.0 },\n+  { 1.0000000259453767, 25.200000000000003, 0.0 },\n+  { 1.0000000225866978, 25.400000000000002, 0.0 },\n+  { 1.0000000196628109, 25.600000000000001, 0.0 },\n+  { 1.0000000171174297, 25.800000000000001, 0.0 },\n+  { 1.0000000149015549, 26.000000000000000, 0.0 },\n+  { 1.0000000129725302, 26.200000000000003, 0.0 },\n+  { 1.0000000112932221, 26.400000000000002, 0.0 },\n+  { 1.0000000098313035, 26.600000000000001, 0.0 },\n+  { 1.0000000085586331, 26.800000000000001, 0.0 },\n+  { 1.0000000074507118, 27.000000000000000, 0.0 },\n+  { 1.0000000064862125, 27.200000000000003, 0.0 },\n+  { 1.0000000056465688, 27.400000000000002, 0.0 },\n+  { 1.0000000049156179, 27.600000000000001, 0.0 },\n+  { 1.0000000042792894, 27.800000000000001, 0.0 },\n+  { 1.0000000037253340, 28.000000000000000, 0.0 },\n+  { 1.0000000032430887, 28.200000000000003, 0.0 },\n+  { 1.0000000028232703, 28.400000000000002, 0.0 },\n+  { 1.0000000024577975, 28.600000000000001, 0.0 },\n+  { 1.0000000021396356, 28.800000000000001, 0.0 },\n+  { 1.0000000018626598, 29.000000000000000, 0.0 },\n+  { 1.0000000016215385, 29.200000000000003, 0.0 },\n+  { 1.0000000014116304, 29.400000000000002, 0.0 },\n+  { 1.0000000012288950, 29.600000000000001, 0.0 },\n+  { 1.0000000010698147, 29.800000000000001, 0.0 },\n+  { 1.0000000009313275, 30.000000000000000, 0.0 },\n };\n const double toler002 = 2.5000000000000020e-13;\n \n-template<typename Tp, unsigned int Num>\n+template<typename Ret, unsigned int Num>\n   void\n-  test(const testcase_riemann_zeta<Tp> (&data)[Num], Tp toler)\n+  test(const testcase_riemann_zeta<Ret> (&data)[Num], Ret toler)\n   {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n+    bool test __attribute__((unused)) = true;\n+    const Ret eps = std::numeric_limits<Ret>::epsilon();\n+    Ret max_abs_diff = -Ret(1);\n+    Ret max_abs_frac = -Ret(1);\n     unsigned int num_datum = MAX_ITERATIONS;\n     for (unsigned int i = 0; i < num_datum; ++i)\n       {\n-\tconst Tp f = std::riemann_zeta(data[i].s);\n-\tconst Tp f0 = data[i].f0;\n-\tconst Tp diff = f - f0;\n+\tconst Ret f = std::riemann_zeta(data[i].s);\n+\tconst Ret f0 = data[i].f0;\n+\tconst Ret diff = f - f0;\n \tif (std::abs(diff) > max_abs_diff)\n \t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n+\tif (std::abs(f0) > Ret(10) * eps\n+\t && std::abs(f) > Ret(10) * eps)\n \t  {\n-\t    const Tp frac = diff / f0;\n+\t    const Ret frac = diff / f0;\n \t    if (std::abs(frac) > max_abs_frac)\n \t      max_abs_frac = std::abs(frac);\n \t  }"}, {"sha": "74091eb835d8bbec48c7c6645ec1916c7d7131c0", "filename": "libstdc++-v3/testsuite/special_functions/19_sph_bessel/check_value.cc", "status": "modified", "additions": 369, "deletions": 327, "changes": 696, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F19_sph_bessel%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F19_sph_bessel%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F19_sph_bessel%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -37,447 +37,489 @@\n #endif\n #include <specfun_testcase.h>\n \n-\n // Test data for n=0.\n-// max(|f - f_GSL|): 3.3306690738754696e-16\n-// max(|f - f_GSL| / |f_GSL|): 2.0843271082049370e-15\n+// max(|f - f_GSL|): 3.3306690738754696e-16 at index 1\n+// max(|f - f_GSL| / |f_GSL|): 2.2927598190254308e-15\n+// mean(f - f_GSL): -6.2780468654398733e-18\n+// variance(f - f_GSL): 6.0810091607155313e-35\n+// stddev(f - f_GSL): 7.7980825596524246e-18\n const testcase_sph_bessel<double>\n data001[21] =\n {\n-  { 1.0000000000000000, 0, 0.0000000000000000 },\n-  { 0.98961583701809175, 0, 0.25000000000000000 },\n-  { 0.95885107720840601, 0, 0.50000000000000000 },\n-  { 0.90885168003111216, 0, 0.75000000000000000 },\n-  { 0.84147098480789650, 0, 1.0000000000000000 },\n-  { 0.75918769548446896, 0, 1.2500000000000000 },\n-  { 0.66499665773603633, 0, 1.5000000000000000 },\n-  { 0.56227768392796396, 0, 1.7500000000000000 },\n-  { 0.45464871341284085, 0, 2.0000000000000000 },\n-  { 0.34581030972796500, 0, 2.2500000000000000 },\n-  { 0.23938885764158263, 0, 2.5000000000000000 },\n-  { 0.13878581529175696, 0, 2.7500000000000000 },\n-  { 0.047040002686622402, 0, 3.0000000000000000 },\n-  { -0.033290810624648733, 0, 3.2500000000000000 },\n-  { -0.10022377933989138, 0, 3.5000000000000000 },\n-  { -0.15241635166462500, 0, 3.7500000000000000 },\n-  { -0.18920062382698205, 0, 4.0000000000000000 },\n-  { -0.21058573134790201, 0, 4.2500000000000000 },\n-  { -0.21722891503668823, 0, 4.5000000000000000 },\n-  { -0.21037742925797431, 0, 4.7500000000000000 },\n-  { -0.19178485493262770, 0, 5.0000000000000000 },\n+  { 1.0000000000000000, 0, 0.0000000000000000, 0.0 },\n+  { 0.98961583701809175, 0, 0.25000000000000000, 0.0 },\n+  { 0.95885107720840601, 0, 0.50000000000000000, 0.0 },\n+  { 0.90885168003111227, 0, 0.75000000000000000, 0.0 },\n+  { 0.84147098480789650, 0, 1.0000000000000000, 0.0 },\n+  { 0.75918769548446896, 0, 1.2500000000000000, 0.0 },\n+  { 0.66499665773603633, 0, 1.5000000000000000, 0.0 },\n+  { 0.56227768392796396, 0, 1.7500000000000000, 0.0 },\n+  { 0.45464871341284080, 0, 2.0000000000000000, 0.0 },\n+  { 0.34581030972796500, 0, 2.2500000000000000, 0.0 },\n+  { 0.23938885764158258, 0, 2.5000000000000000, 0.0 },\n+  { 0.13878581529175696, 0, 2.7500000000000000, 0.0 },\n+  { 0.047040002686622402, 0, 3.0000000000000000, 0.0 },\n+  { -0.033290810624648733, 0, 3.2500000000000000, 0.0 },\n+  { -0.10022377933989138, 0, 3.5000000000000000, 0.0 },\n+  { -0.15241635166462503, 0, 3.7500000000000000, 0.0 },\n+  { -0.18920062382698205, 0, 4.0000000000000000, 0.0 },\n+  { -0.21058573134790204, 0, 4.2500000000000000, 0.0 },\n+  { -0.21722891503668823, 0, 4.5000000000000000, 0.0 },\n+  { -0.21037742925797431, 0, 4.7500000000000000, 0.0 },\n+  { -0.19178485493262770, 0, 5.0000000000000000, 0.0 },\n };\n const double toler001 = 2.5000000000000020e-13;\n \n // Test data for n=1.\n-// max(|f - f_GSL|): 3.1918911957973251e-16\n-// max(|f - f_GSL| / |f_GSL|): 2.8516043985912409e-14\n+// max(|f - f_GSL|): 3.1918911957973251e-16 at index 1\n+// max(|f - f_GSL| / |f_GSL|): 2.8667725070943857e-14\n+// mean(f - f_GSL): -1.3578341493508937e-17\n+// variance(f - f_GSL): 1.0552183286053657e-35\n+// stddev(f - f_GSL): 3.2484124254862801e-18\n const testcase_sph_bessel<double>\n data002[21] =\n {\n-  { 0.0000000000000000, 1, 0.0000000000000000 },\n-  { 0.082813661229788060, 1, 0.25000000000000000 },\n-  { 0.16253703063606650, 1, 0.50000000000000000 },\n-  { 0.23621708154305501, 1, 0.75000000000000000 },\n-  { 0.30116867893975674, 1, 1.0000000000000000 },\n-  { 0.35509226647136022, 1, 1.2500000000000000 },\n-  { 0.39617297071222229, 1, 1.5000000000000000 },\n-  { 0.42315642261568914, 1, 1.7500000000000000 },\n-  { 0.43539777497999166, 1, 2.0000000000000000 },\n-  { 0.43288174775586852, 1, 2.2500000000000000 },\n-  { 0.41621298927540656, 1, 2.5000000000000000 },\n-  { 0.38657752506335291, 1, 2.7500000000000000 },\n-  { 0.34567749976235596, 1, 3.0000000000000000 },\n-  { 0.29564272783258383, 1, 3.2500000000000000 },\n-  { 0.23892368798597285, 1, 3.5000000000000000 },\n-  { 0.17817146817998289, 1, 3.7500000000000000 },\n-  { 0.11611074925915747, 1, 4.0000000000000000 },\n-  { 0.055412178486091958, 1, 4.2500000000000000 },\n-  { -0.0014295812457574522, 1, 4.5000000000000000 },\n-  { -0.052206227820200179, 1, 4.7500000000000000 },\n-  { -0.095089408079170795, 1, 5.0000000000000000 },\n+  { 0.0000000000000000, 1, 0.0000000000000000, 0.0 },\n+  { 0.082813661229788060, 1, 0.25000000000000000, 0.0 },\n+  { 0.16253703063606650, 1, 0.50000000000000000, 0.0 },\n+  { 0.23621708154305501, 1, 0.75000000000000000, 0.0 },\n+  { 0.30116867893975674, 1, 1.0000000000000000, 0.0 },\n+  { 0.35509226647136022, 1, 1.2500000000000000, 0.0 },\n+  { 0.39617297071222229, 1, 1.5000000000000000, 0.0 },\n+  { 0.42315642261568914, 1, 1.7500000000000000, 0.0 },\n+  { 0.43539777497999166, 1, 2.0000000000000000, 0.0 },\n+  { 0.43288174775586852, 1, 2.2500000000000000, 0.0 },\n+  { 0.41621298927540656, 1, 2.5000000000000000, 0.0 },\n+  { 0.38657752506335291, 1, 2.7500000000000000, 0.0 },\n+  { 0.34567749976235596, 1, 3.0000000000000000, 0.0 },\n+  { 0.29564272783258383, 1, 3.2500000000000000, 0.0 },\n+  { 0.23892368798597285, 1, 3.5000000000000000, 0.0 },\n+  { 0.17817146817998289, 1, 3.7500000000000000, 0.0 },\n+  { 0.11611074925915747, 1, 4.0000000000000000, 0.0 },\n+  { 0.055412178486091958, 1, 4.2500000000000000, 0.0 },\n+  { -0.0014295812457574522, 1, 4.5000000000000000, 0.0 },\n+  { -0.052206227820200179, 1, 4.7500000000000000, 0.0 },\n+  { -0.095089408079170795, 1, 5.0000000000000000, 0.0 },\n };\n const double toler002 = 2.5000000000000015e-12;\n \n // Test data for n=2.\n-// max(|f - f_GSL|): 8.3266726846886741e-17\n+// max(|f - f_GSL|): 1.6653345369377348e-16 at index 11\n // max(|f - f_GSL| / |f_GSL|): 6.5384527054443100e-16\n+// mean(f - f_GSL): -5.3693821875472602e-18\n+// variance(f - f_GSL): 1.3199534264872259e-34\n+// stddev(f - f_GSL): 1.1488922606089858e-17\n const testcase_sph_bessel<double>\n data003[21] =\n {\n-  { 0.0000000000000000, 2, 0.0000000000000000 },\n-  { 0.0041480977393611252, 2, 0.25000000000000000 },\n-  { 0.016371106607993412, 2, 0.50000000000000000 },\n-  { 0.036016646141108236, 2, 0.75000000000000000 },\n-  { 0.062035052011373860, 2, 1.0000000000000000 },\n-  { 0.093033744046795624, 2, 1.2500000000000000 },\n-  { 0.12734928368840817, 2, 1.5000000000000000 },\n-  { 0.16313332627036031, 2, 1.7500000000000000 },\n-  { 0.19844794905714661, 2, 2.0000000000000000 },\n-  { 0.23136535394652627, 2, 2.2500000000000000 },\n-  { 0.26006672948890525, 2, 2.5000000000000000 },\n-  { 0.28293512114099162, 2, 2.7500000000000000 },\n-  { 0.29863749707573356, 2, 3.0000000000000000 },\n-  { 0.30619179016241843, 2, 3.2500000000000000 },\n-  { 0.30501551189929671, 2, 3.5000000000000000 },\n-  { 0.29495352620861132, 2, 3.7500000000000000 },\n-  { 0.27628368577135015, 2, 4.0000000000000000 },\n-  { 0.24970021027926106, 2, 4.2500000000000000 },\n-  { 0.21627586087284995, 2, 4.5000000000000000 },\n-  { 0.17740507484521628, 2, 4.7500000000000000 },\n-  { 0.13473121008512520, 2, 5.0000000000000000 },\n+  { 0.0000000000000000, 2, 0.0000000000000000, 0.0 },\n+  { 0.0041480977393611252, 2, 0.25000000000000000, 0.0 },\n+  { 0.016371106607993412, 2, 0.50000000000000000, 0.0 },\n+  { 0.036016646141108236, 2, 0.75000000000000000, 0.0 },\n+  { 0.062035052011373860, 2, 1.0000000000000000, 0.0 },\n+  { 0.093033744046795624, 2, 1.2500000000000000, 0.0 },\n+  { 0.12734928368840817, 2, 1.5000000000000000, 0.0 },\n+  { 0.16313332627036031, 2, 1.7500000000000000, 0.0 },\n+  { 0.19844794905714661, 2, 2.0000000000000000, 0.0 },\n+  { 0.23136535394652627, 2, 2.2500000000000000, 0.0 },\n+  { 0.26006672948890525, 2, 2.5000000000000000, 0.0 },\n+  { 0.28293512114099162, 2, 2.7500000000000000, 0.0 },\n+  { 0.29863749707573356, 2, 3.0000000000000000, 0.0 },\n+  { 0.30619179016241843, 2, 3.2500000000000000, 0.0 },\n+  { 0.30501551189929671, 2, 3.5000000000000000, 0.0 },\n+  { 0.29495352620861132, 2, 3.7500000000000000, 0.0 },\n+  { 0.27628368577135015, 2, 4.0000000000000000, 0.0 },\n+  { 0.24970021027926106, 2, 4.2500000000000000, 0.0 },\n+  { 0.21627586087284995, 2, 4.5000000000000000, 0.0 },\n+  { 0.17740507484521628, 2, 4.7500000000000000, 0.0 },\n+  { 0.13473121008512520, 2, 5.0000000000000000, 0.0 },\n };\n const double toler003 = 2.5000000000000020e-13;\n \n // Test data for n=5.\n-// max(|f - f_GSL|): 9.7144514654701197e-17\n+// max(|f - f_GSL|): 8.3266726846886741e-17 at index 18\n // max(|f - f_GSL| / |f_GSL|): 2.7459190669103549e-15\n+// mean(f - f_GSL): 2.3688486417034017e-18\n+// variance(f - f_GSL): 2.9460080408325262e-37\n+// stddev(f - f_GSL): 5.4277141052495815e-19\n const testcase_sph_bessel<double>\n data004[21] =\n {\n-  { 0.0000000000000000, 5, 0.0000000000000000 },\n-  { 9.3719811237268220e-08, 5, 0.25000000000000000 },\n-  { 2.9774668754574453e-06, 5, 0.50000000000000000 },\n-  { 2.2339447678335762e-05, 5, 0.75000000000000000 },\n-  { 9.2561158611258144e-05, 5, 1.0000000000000000 },\n-  { 0.00027638888920123806, 5, 1.2500000000000000 },\n-  { 0.00066962059628932456, 5, 1.5000000000000000 },\n-  { 0.0014021729022572799, 5, 1.7500000000000000 },\n-  { 0.0026351697702441169, 5, 2.0000000000000000 },\n-  { 0.0045540034750567553, 5, 2.2500000000000000 },\n-  { 0.0073576387377689359, 5, 2.5000000000000000 },\n-  { 0.011244740276407145, 5, 2.7500000000000000 },\n-  { 0.016397480955999105, 5, 3.0000000000000000 },\n-  { 0.022964112474845508, 5, 3.2500000000000000 },\n-  { 0.031041536537391189, 5, 3.5000000000000000 },\n-  { 0.040659189440948935, 5, 3.7500000000000000 },\n-  { 0.051765539757363456, 5, 4.0000000000000000 },\n-  { 0.064218395773425613, 5, 4.2500000000000000 },\n-  { 0.077780030832892866, 5, 4.5000000000000000 },\n-  { 0.092117870593729223, 5, 4.7500000000000000 },\n-  { 0.10681116145650453, 5, 5.0000000000000000 },\n+  { 0.0000000000000000, 5, 0.0000000000000000, 0.0 },\n+  { 9.3719811237268233e-08, 5, 0.25000000000000000, 0.0 },\n+  { 2.9774668754574457e-06, 5, 0.50000000000000000, 0.0 },\n+  { 2.2339447678335765e-05, 5, 0.75000000000000000, 0.0 },\n+  { 9.2561158611258158e-05, 5, 1.0000000000000000, 0.0 },\n+  { 0.00027638888920123806, 5, 1.2500000000000000, 0.0 },\n+  { 0.00066962059628932467, 5, 1.5000000000000000, 0.0 },\n+  { 0.0014021729022572801, 5, 1.7500000000000000, 0.0 },\n+  { 0.0026351697702441173, 5, 2.0000000000000000, 0.0 },\n+  { 0.0045540034750567553, 5, 2.2500000000000000, 0.0 },\n+  { 0.0073576387377689376, 5, 2.5000000000000000, 0.0 },\n+  { 0.011244740276407147, 5, 2.7500000000000000, 0.0 },\n+  { 0.016397480955999109, 5, 3.0000000000000000, 0.0 },\n+  { 0.022964112474845508, 5, 3.2500000000000000, 0.0 },\n+  { 0.031041536537391189, 5, 3.5000000000000000, 0.0 },\n+  { 0.040659189440948949, 5, 3.7500000000000000, 0.0 },\n+  { 0.051765539757363470, 5, 4.0000000000000000, 0.0 },\n+  { 0.064218395773425627, 5, 4.2500000000000000, 0.0 },\n+  { 0.077780030832892866, 5, 4.5000000000000000, 0.0 },\n+  { 0.092117870593729223, 5, 4.7500000000000000, 0.0 },\n+  { 0.10681116145650453, 5, 5.0000000000000000, 0.0 },\n };\n const double toler004 = 2.5000000000000020e-13;\n \n // Test data for n=10.\n-// max(|f - f_GSL|): 8.6736173798840355e-19\n+// max(|f - f_GSL|): 8.4025668367626594e-19 at index 18\n // max(|f - f_GSL| / |f_GSL|): 6.7232224139500876e-15\n+// mean(f - f_GSL): 3.5485202136403188e-20\n+// variance(f - f_GSL): 3.7809684768411230e-38\n+// stddev(f - f_GSL): 1.9444712589393351e-19\n const testcase_sph_bessel<double>\n data005[21] =\n {\n-  { 0.0000000000000000, 10, 0.0000000000000000 },\n-  { 6.9267427453708468e-17, 10, 0.25000000000000000 },\n-  { 7.0641239636618740e-14, 10, 0.50000000000000000 },\n-  { 4.0459307474109287e-12, 10, 0.75000000000000000 },\n-  { 7.1165526400473096e-11, 10, 1.0000000000000000 },\n-  { 6.5470739530199939e-10, 10, 1.2500000000000000 },\n-  { 3.9934406994836296e-09, 10, 1.5000000000000000 },\n-  { 1.8327719460735247e-08, 10, 1.7500000000000000 },\n-  { 6.8253008649747220e-08, 10, 2.0000000000000000 },\n-  { 2.1653870546846626e-07, 10, 2.2500000000000000 },\n-  { 6.0504362296385381e-07, 10, 2.5000000000000000 },\n-  { 1.5246485352158441e-06, 10, 2.7500000000000000 },\n-  { 3.5260038931752543e-06, 10, 3.0000000000000000 },\n-  { 7.5839040020531456e-06, 10, 3.2500000000000000 },\n-  { 1.5327786999397106e-05, 10, 3.5000000000000000 },\n-  { 2.9348811002317661e-05, 10, 3.7500000000000000 },\n-  { 5.3589865768632612e-05, 10, 4.0000000000000000 },\n-  { 9.3818602410477989e-05, 10, 4.2500000000000000 },\n-  { 0.00015817516371455801, 10, 4.5000000000000000 },\n-  { 0.00025777607369970674, 10, 4.7500000000000000 },\n-  { 0.00040734424424946052, 10, 5.0000000000000000 },\n+  { 0.0000000000000000, 10, 0.0000000000000000, 0.0 },\n+  { 6.9267427453708468e-17, 10, 0.25000000000000000, 0.0 },\n+  { 7.0641239636618740e-14, 10, 0.50000000000000000, 0.0 },\n+  { 4.0459307474109287e-12, 10, 0.75000000000000000, 0.0 },\n+  { 7.1165526400473096e-11, 10, 1.0000000000000000, 0.0 },\n+  { 6.5470739530199939e-10, 10, 1.2500000000000000, 0.0 },\n+  { 3.9934406994836296e-09, 10, 1.5000000000000000, 0.0 },\n+  { 1.8327719460735247e-08, 10, 1.7500000000000000, 0.0 },\n+  { 6.8253008649747220e-08, 10, 2.0000000000000000, 0.0 },\n+  { 2.1653870546846626e-07, 10, 2.2500000000000000, 0.0 },\n+  { 6.0504362296385381e-07, 10, 2.5000000000000000, 0.0 },\n+  { 1.5246485352158441e-06, 10, 2.7500000000000000, 0.0 },\n+  { 3.5260038931752543e-06, 10, 3.0000000000000000, 0.0 },\n+  { 7.5839040020531456e-06, 10, 3.2500000000000000, 0.0 },\n+  { 1.5327786999397103e-05, 10, 3.5000000000000000, 0.0 },\n+  { 2.9348811002317664e-05, 10, 3.7500000000000000, 0.0 },\n+  { 5.3589865768632612e-05, 10, 4.0000000000000000, 0.0 },\n+  { 9.3818602410477989e-05, 10, 4.2500000000000000, 0.0 },\n+  { 0.00015817516371455801, 10, 4.5000000000000000, 0.0 },\n+  { 0.00025777607369970674, 10, 4.7500000000000000, 0.0 },\n+  { 0.00040734424424946052, 10, 5.0000000000000000, 0.0 },\n };\n const double toler005 = 5.0000000000000039e-13;\n \n // Test data for n=20.\n-// max(|f - f_GSL|): 4.9275407583725281e-26\n-// max(|f - f_GSL| / |f_GSL|): 2.4002866288153026e-14\n+// max(|f - f_GSL|): 4.9275407583725281e-26 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 2.3196047253257129e-14\n+// mean(f - f_GSL): 6.3234533203992742e-28\n+// variance(f - f_GSL): 1.2422274402412017e-52\n+// stddev(f - f_GSL): 1.1145525740139860e-26\n const testcase_sph_bessel<double>\n data006[21] =\n {\n-  { 0.0000000000000000, 20, 0.0000000000000000 },\n-  { 6.9307487073399339e-38, 20, 0.25000000000000000 },\n-  { 7.2515880810153944e-32, 20, 0.50000000000000000 },\n-  { 2.4025911398834722e-28, 20, 0.75000000000000000 },\n-  { 7.5377957222368705e-26, 20, 1.0000000000000000 },\n-  { 6.4953439243593413e-24, 20, 1.2500000000000000 },\n-  { 2.4703120390884050e-22, 20, 1.5000000000000000 },\n-  { 5.3404627138297197e-21, 20, 1.7500000000000000 },\n-  { 7.6326411008876072e-20, 20, 2.0000000000000000 },\n-  { 7.9496335952781075e-19, 20, 2.2500000000000000 },\n-  { 6.4488532759578977e-18, 20, 2.5000000000000000 },\n-  { 4.2725223040880135e-17, 20, 2.7500000000000000 },\n-  { 2.3942249272752627e-16, 20, 3.0000000000000000 },\n-  { 1.1654033741499860e-15, 20, 3.2500000000000000 },\n-  { 5.0303402625237510e-15, 20, 3.5000000000000000 },\n-  { 1.9572475798118559e-14, 20, 3.7500000000000000 },\n-  { 6.9559880644906101e-14, 20, 4.0000000000000000 },\n-  { 2.2825949745670935e-13, 20, 4.2500000000000000 },\n-  { 6.9781823021792824e-13, 20, 4.5000000000000000 },\n-  { 2.0024157388665026e-12, 20, 4.7500000000000000 },\n-  { 5.4277267607932098e-12, 20, 5.0000000000000000 },\n+  { 0.0000000000000000, 20, 0.0000000000000000, 0.0 },\n+  { 6.9307487073399339e-38, 20, 0.25000000000000000, 0.0 },\n+  { 7.2515880810153944e-32, 20, 0.50000000000000000, 0.0 },\n+  { 2.4025911398834722e-28, 20, 0.75000000000000000, 0.0 },\n+  { 7.5377957222368705e-26, 20, 1.0000000000000000, 0.0 },\n+  { 6.4953439243593413e-24, 20, 1.2500000000000000, 0.0 },\n+  { 2.4703120390884050e-22, 20, 1.5000000000000000, 0.0 },\n+  { 5.3404627138297197e-21, 20, 1.7500000000000000, 0.0 },\n+  { 7.6326411008876072e-20, 20, 2.0000000000000000, 0.0 },\n+  { 7.9496335952781085e-19, 20, 2.2500000000000000, 0.0 },\n+  { 6.4488532759578977e-18, 20, 2.5000000000000000, 0.0 },\n+  { 4.2725223040880135e-17, 20, 2.7500000000000000, 0.0 },\n+  { 2.3942249272752627e-16, 20, 3.0000000000000000, 0.0 },\n+  { 1.1654033741499860e-15, 20, 3.2500000000000000, 0.0 },\n+  { 5.0303402625237494e-15, 20, 3.5000000000000000, 0.0 },\n+  { 1.9572475798118565e-14, 20, 3.7500000000000000, 0.0 },\n+  { 6.9559880644906101e-14, 20, 4.0000000000000000, 0.0 },\n+  { 2.2825949745670935e-13, 20, 4.2500000000000000, 0.0 },\n+  { 6.9781823021792824e-13, 20, 4.5000000000000000, 0.0 },\n+  { 2.0024157388665022e-12, 20, 4.7500000000000000, 0.0 },\n+  { 5.4277267607932098e-12, 20, 5.0000000000000000, 0.0 },\n };\n const double toler006 = 2.5000000000000015e-12;\n //  sph_bessel\n \n // Test data for n=0.\n-// max(|f - f_GSL|): 1.0694570229397016e-15\n-// max(|f - f_GSL| / |f_GSL|): 3.7496052611150890e-13\n+// max(|f - f_GSL|): 1.0703243846776900e-15 at index 15\n+// max(|f - f_GSL| / |f_GSL|): 3.7516988430587603e-13\n+// mean(f - f_GSL): -2.6681699178119462e-17\n+// variance(f - f_GSL): 1.2529792126711598e-32\n+// stddev(f - f_GSL): 1.1193655402374864e-16\n const testcase_sph_bessel<double>\n data007[21] =\n {\n-  { 1.0000000000000000, 0, 0.0000000000000000 },\n-  { -0.19178485493262770, 0, 5.0000000000000000 },\n-  { -0.054402111088936979, 0, 10.000000000000000 },\n-  { 0.043352522677141118, 0, 15.000000000000000 },\n-  { 0.045647262536381385, 0, 20.000000000000000 },\n-  { -0.0052940700039109216, 0, 25.000000000000000 },\n-  { -0.032934387469762058, 0, 30.000000000000000 },\n-  { -0.012233790557032886, 0, 35.000000000000000 },\n-  { 0.018627829011983722, 0, 40.000000000000000 },\n-  { 0.018908967211869299, 0, 45.000000000000000 },\n-  { -0.0052474970740785751, 0, 50.000000000000000 },\n-  { -0.018177366788338544, 0, 55.000000000000000 },\n-  { -0.0050801770183702783, 0, 60.000000000000000 },\n-  { 0.012720441222924667, 0, 65.000000000000000 },\n-  { 0.011055581165112701, 0, 70.000000000000000 },\n-  { -0.0051704218054590724, 0, 75.000000000000000 },\n-  { -0.012423608174042190, 0, 80.000000000000000 },\n-  { -0.0020714778817480834, 0, 85.000000000000000 },\n-  { 0.0099332962622284207, 0, 90.000000000000000 },\n-  { 0.0071922285761696946, 0, 95.000000000000000 },\n-  { -0.0050636564110975880, 0, 100.00000000000000 },\n+  { 1.0000000000000000, 0, 0.0000000000000000, 0.0 },\n+  { -0.19178485493262770, 0, 5.0000000000000000, 0.0 },\n+  { -0.054402111088936986, 0, 10.000000000000000, 0.0 },\n+  { 0.043352522677141132, 0, 15.000000000000000, 0.0 },\n+  { 0.045647262536381385, 0, 20.000000000000000, 0.0 },\n+  { -0.0052940700039109216, 0, 25.000000000000000, 0.0 },\n+  { -0.032934387469762058, 0, 30.000000000000000, 0.0 },\n+  { -0.012233790557032886, 0, 35.000000000000000, 0.0 },\n+  { 0.018627829011983722, 0, 40.000000000000000, 0.0 },\n+  { 0.018908967211869295, 0, 45.000000000000000, 0.0 },\n+  { -0.0052474970740785751, 0, 50.000000000000000, 0.0 },\n+  { -0.018177366788338544, 0, 55.000000000000000, 0.0 },\n+  { -0.0050801770183702783, 0, 60.000000000000000, 0.0 },\n+  { 0.012720441222924667, 0, 65.000000000000000, 0.0 },\n+  { 0.011055581165112701, 0, 70.000000000000000, 0.0 },\n+  { -0.0051704218054590724, 0, 75.000000000000000, 0.0 },\n+  { -0.012423608174042190, 0, 80.000000000000000, 0.0 },\n+  { -0.0020714778817480834, 0, 85.000000000000000, 0.0 },\n+  { 0.0099332962622284224, 0, 90.000000000000000, 0.0 },\n+  { 0.0071922285761696946, 0, 95.000000000000000, 0.0 },\n+  { -0.0050636564110975880, 0, 100.00000000000000, 0.0 },\n };\n const double toler007 = 2.5000000000000014e-11;\n \n // Test data for n=1.\n-// max(|f - f_GSL|): 1.0044048925905713e-15\n+// max(|f - f_GSL|): 1.0061396160665481e-15 at index 13\n // max(|f - f_GSL| / |f_GSL|): 6.5465850130521528e-13\n+// mean(f - f_GSL): 5.2800645800044066e-17\n+// variance(f - f_GSL): 2.8606709739566642e-33\n+// stddev(f - f_GSL): 5.3485240711402470e-17\n const testcase_sph_bessel<double>\n data008[21] =\n {\n-  { 0.0000000000000000, 1, 0.0000000000000000 },\n-  { -0.095089408079170795, 1, 5.0000000000000000 },\n-  { 0.078466941798751549, 1, 10.000000000000000 },\n-  { 0.053536029035730827, 1, 15.000000000000000 },\n-  { -0.018121739963850528, 1, 20.000000000000000 },\n-  { -0.039859875274695380, 1, 25.000000000000000 },\n-  { -0.0062395279119115375, 1, 30.000000000000000 },\n-  { 0.025470240415270681, 1, 35.000000000000000 },\n-  { 0.017139147266606140, 1, 40.000000000000000 },\n-  { -0.011253622702352454, 1, 45.000000000000000 },\n-  { -0.019404270511323839, 1, 50.000000000000000 },\n-  { -0.00073280223727807778, 1, 55.000000000000000 },\n-  { 0.015788880056613101, 1, 60.000000000000000 },\n-  { 0.0088488352686322581, 1, 65.000000000000000 },\n-  { -0.0088894803131598157, 1, 70.000000000000000 },\n-  { -0.012358955887069445, 1, 75.000000000000000 },\n-  { 0.0012245454458125673, 1, 80.000000000000000 },\n-  { 0.011556531358968161, 1, 85.000000000000000 },\n-  { 0.0050889656932377614, 1, 90.000000000000000 },\n-  { -0.0076103298149331573, 1, 95.000000000000000 },\n-  { -0.0086738252869878150, 1, 100.00000000000000 },\n+  { 0.0000000000000000, 1, 0.0000000000000000, 0.0 },\n+  { -0.095089408079170795, 1, 5.0000000000000000, 0.0 },\n+  { 0.078466941798751549, 1, 10.000000000000000, 0.0 },\n+  { 0.053536029035730827, 1, 15.000000000000000, 0.0 },\n+  { -0.018121739963850528, 1, 20.000000000000000, 0.0 },\n+  { -0.039859875274695380, 1, 25.000000000000000, 0.0 },\n+  { -0.0062395279119115375, 1, 30.000000000000000, 0.0 },\n+  { 0.025470240415270681, 1, 35.000000000000000, 0.0 },\n+  { 0.017139147266606140, 1, 40.000000000000000, 0.0 },\n+  { -0.011253622702352454, 1, 45.000000000000000, 0.0 },\n+  { -0.019404270511323839, 1, 50.000000000000000, 0.0 },\n+  { -0.00073280223727807778, 1, 55.000000000000000, 0.0 },\n+  { 0.015788880056613101, 1, 60.000000000000000, 0.0 },\n+  { 0.0088488352686322581, 1, 65.000000000000000, 0.0 },\n+  { -0.0088894803131598157, 1, 70.000000000000000, 0.0 },\n+  { -0.012358955887069445, 1, 75.000000000000000, 0.0 },\n+  { 0.0012245454458125673, 1, 80.000000000000000, 0.0 },\n+  { 0.011556531358968161, 1, 85.000000000000000, 0.0 },\n+  { 0.0050889656932377614, 1, 90.000000000000000, 0.0 },\n+  { -0.0076103298149331573, 1, 95.000000000000000, 0.0 },\n+  { -0.0086738252869878150, 1, 100.00000000000000, 0.0 },\n };\n const double toler008 = 5.0000000000000028e-11;\n \n // Test data for n=2.\n-// max(|f - f_GSL|): 1.0772632785815972e-15\n+// max(|f - f_GSL|): 1.0772632785815972e-15 at index 15\n // max(|f - f_GSL| / |f_GSL|): 3.4761702917932150e-13\n+// mean(f - f_GSL): 2.9356064536917039e-17\n+// variance(f - f_GSL): 1.2041524334573537e-32\n+// stddev(f - f_GSL): 1.0973387961141963e-16\n const testcase_sph_bessel<double>\n data009[21] =\n {\n-  { 0.0000000000000000, 2, 0.0000000000000000 },\n-  { 0.13473121008512520, 2, 5.0000000000000000 },\n-  { 0.077942193628562445, 2, 10.000000000000000 },\n-  { -0.032645316869994966, 2, 15.000000000000000 },\n-  { -0.048365523530958965, 2, 20.000000000000000 },\n-  { 0.00051088497094747614, 2, 25.000000000000000 },\n-  { 0.032310434678570907, 2, 30.000000000000000 },\n-  { 0.014416954021198941, 2, 35.000000000000000 },\n-  { -0.017342392966988262, 2, 40.000000000000000 },\n-  { -0.019659208725359461, 2, 45.000000000000000 },\n-  { 0.0040832408433991458, 2, 50.000000000000000 },\n-  { 0.018137395757214285, 2, 55.000000000000000 },\n-  { 0.0058696210212009327, 2, 60.000000000000000 },\n-  { -0.012312033441295490, 2, 65.000000000000000 },\n-  { -0.011436558892819550, 2, 70.000000000000000 },\n-  { 0.0046760635699762939, 2, 75.000000000000000 },\n-  { 0.012469528628260161, 2, 80.000000000000000 },\n-  { 0.0024793554591234306, 2, 85.000000000000000 },\n-  { -0.0097636640724538277, 2, 90.000000000000000 },\n-  { -0.0074325547808517939, 2, 95.000000000000000 },\n-  { 0.0048034416524879537, 2, 100.00000000000000 },\n+  { 0.0000000000000000, 2, 0.0000000000000000, 0.0 },\n+  { 0.13473121008512520, 2, 5.0000000000000000, 0.0 },\n+  { 0.077942193628562445, 2, 10.000000000000000, 0.0 },\n+  { -0.032645316869994966, 2, 15.000000000000000, 0.0 },\n+  { -0.048365523530958965, 2, 20.000000000000000, 0.0 },\n+  { 0.00051088497094747614, 2, 25.000000000000000, 0.0 },\n+  { 0.032310434678570907, 2, 30.000000000000000, 0.0 },\n+  { 0.014416954021198941, 2, 35.000000000000000, 0.0 },\n+  { -0.017342392966988262, 2, 40.000000000000000, 0.0 },\n+  { -0.019659208725359461, 2, 45.000000000000000, 0.0 },\n+  { 0.0040832408433991458, 2, 50.000000000000000, 0.0 },\n+  { 0.018137395757214285, 2, 55.000000000000000, 0.0 },\n+  { 0.0058696210212009327, 2, 60.000000000000000, 0.0 },\n+  { -0.012312033441295490, 2, 65.000000000000000, 0.0 },\n+  { -0.011436558892819550, 2, 70.000000000000000, 0.0 },\n+  { 0.0046760635699762939, 2, 75.000000000000000, 0.0 },\n+  { 0.012469528628260161, 2, 80.000000000000000, 0.0 },\n+  { 0.0024793554591234306, 2, 85.000000000000000, 0.0 },\n+  { -0.0097636640724538277, 2, 90.000000000000000, 0.0 },\n+  { -0.0074325547808517939, 2, 95.000000000000000, 0.0 },\n+  { 0.0048034416524879537, 2, 100.00000000000000, 0.0 },\n };\n const double toler009 = 2.5000000000000014e-11;\n \n // Test data for n=5.\n-// max(|f - f_GSL|): 9.4455693266937146e-16\n-// max(|f - f_GSL| / |f_GSL|): 8.4346477099300519e-13\n+// max(|f - f_GSL|): 9.4629165614534827e-16 at index 14\n+// max(|f - f_GSL| / |f_GSL|): 8.4323936619049507e-13\n+// mean(f - f_GSL): 4.3853396443294642e-17\n+// variance(f - f_GSL): 1.4779322601100139e-33\n+// stddev(f - f_GSL): 3.8443884560616579e-17\n const testcase_sph_bessel<double>\n data010[21] =\n {\n-  { 0.0000000000000000, 5, 0.0000000000000000 },\n-  { 0.10681116145650453, 5, 5.0000000000000000 },\n-  { -0.055534511621452155, 5, 10.000000000000000 },\n-  { 0.065968007076521951, 5, 15.000000000000000 },\n-  { 0.016683908063095682, 5, 20.000000000000000 },\n-  { -0.036117795989722382, 5, 25.000000000000000 },\n-  { -0.020504008736827489, 5, 30.000000000000000 },\n-  { 0.018499481206814560, 5, 35.000000000000000 },\n-  { 0.022448773791044995, 5, 40.000000000000000 },\n-  { -0.0048552694845020138, 5, 45.000000000000000 },\n-  { -0.020048300563664877, 5, 50.000000000000000 },\n-  { -0.0052999924455565742, 5, 55.000000000000000 },\n-  { 0.014151556281331407, 5, 60.000000000000000 },\n-  { 0.011354588594416778, 5, 65.000000000000000 },\n-  { -0.0064983781785323573, 5, 70.000000000000000 },\n-  { -0.013089909320064257, 5, 75.000000000000000 },\n-  { -0.00096200450071302446, 5, 80.000000000000000 },\n-  { 0.011048668899130202, 5, 85.000000000000000 },\n-  { 0.0065639581708136037, 5, 90.000000000000000 },\n-  { -0.0064646119368202771, 5, 95.000000000000000 },\n-  { -0.0092901489349075713, 5, 100.00000000000000 },\n+  { 0.0000000000000000, 5, 0.0000000000000000, 0.0 },\n+  { 0.10681116145650453, 5, 5.0000000000000000, 0.0 },\n+  { -0.055534511621452155, 5, 10.000000000000000, 0.0 },\n+  { 0.065968007076521951, 5, 15.000000000000000, 0.0 },\n+  { 0.016683908063095682, 5, 20.000000000000000, 0.0 },\n+  { -0.036117795989722382, 5, 25.000000000000000, 0.0 },\n+  { -0.020504008736827489, 5, 30.000000000000000, 0.0 },\n+  { 0.018499481206814560, 5, 35.000000000000000, 0.0 },\n+  { 0.022448773791044995, 5, 40.000000000000000, 0.0 },\n+  { -0.0048552694845020129, 5, 45.000000000000000, 0.0 },\n+  { -0.020048300563664877, 5, 50.000000000000000, 0.0 },\n+  { -0.0052999924455565742, 5, 55.000000000000000, 0.0 },\n+  { 0.014151556281331407, 5, 60.000000000000000, 0.0 },\n+  { 0.011354588594416778, 5, 65.000000000000000, 0.0 },\n+  { -0.0064983781785323573, 5, 70.000000000000000, 0.0 },\n+  { -0.013089909320064257, 5, 75.000000000000000, 0.0 },\n+  { -0.00096200450071302446, 5, 80.000000000000000, 0.0 },\n+  { 0.011048668899130202, 5, 85.000000000000000, 0.0 },\n+  { 0.0065639581708136045, 5, 90.000000000000000, 0.0 },\n+  { -0.0064646119368202771, 5, 95.000000000000000, 0.0 },\n+  { -0.0092901489349075713, 5, 100.00000000000000, 0.0 },\n };\n const double toler010 = 5.0000000000000028e-11;\n \n // Test data for n=10.\n-// max(|f - f_GSL|): 1.1999949645069563e-15\n+// max(|f - f_GSL|): 1.1999949645069563e-15 at index 13\n // max(|f - f_GSL| / |f_GSL|): 2.9533832871668437e-12\n+// mean(f - f_GSL): 4.3565566580837178e-17\n+// variance(f - f_GSL): 1.4986791255793479e-32\n+// stddev(f - f_GSL): 1.2242055079027163e-16\n const testcase_sph_bessel<double>\n data011[21] =\n {\n-  { 0.0000000000000000, 10, 0.0000000000000000 },\n-  { 0.00040734424424946052, 10, 5.0000000000000000 },\n-  { 0.064605154492564265, 10, 10.000000000000000 },\n-  { 0.0018969790010883577, 10, 15.000000000000000 },\n-  { 0.039686698644626366, 10, 20.000000000000000 },\n-  { -0.036253285601128581, 10, 25.000000000000000 },\n-  { -0.014529646403897799, 10, 30.000000000000000 },\n-  { 0.026281264603993857, 10, 35.000000000000000 },\n-  { 0.013124803182748323, 10, 40.000000000000000 },\n-  { -0.017600831383728983, 10, 45.000000000000000 },\n-  { -0.015039221463465955, 10, 50.000000000000000 },\n-  { 0.0095256289349167390, 10, 55.000000000000000 },\n-  { 0.015822719394008339, 10, 60.000000000000000 },\n-  { -0.0019391391708249754, 10, 65.000000000000000 },\n-  { -0.014293389028395012, 10, 70.000000000000000 },\n-  { -0.0044210285031696227, 10, 75.000000000000000 },\n-  { 0.010516146958338813, 10, 80.000000000000000 },\n-  { 0.0086736275131325726, 10, 85.000000000000000 },\n-  { -0.0052905066357239322, 10, 90.000000000000000 },\n-  { -0.010258326955210768, 10, 95.000000000000000 },\n-  { -0.00019565785971342414, 10, 100.00000000000000 },\n+  { 0.0000000000000000, 10, 0.0000000000000000, 0.0 },\n+  { 0.00040734424424946052, 10, 5.0000000000000000, 0.0 },\n+  { 0.064605154492564265, 10, 10.000000000000000, 0.0 },\n+  { 0.0018969790010883577, 10, 15.000000000000000, 0.0 },\n+  { 0.039686698644626366, 10, 20.000000000000000, 0.0 },\n+  { -0.036253285601128581, 10, 25.000000000000000, 0.0 },\n+  { -0.014529646403897799, 10, 30.000000000000000, 0.0 },\n+  { 0.026281264603993857, 10, 35.000000000000000, 0.0 },\n+  { 0.013124803182748323, 10, 40.000000000000000, 0.0 },\n+  { -0.017600831383728980, 10, 45.000000000000000, 0.0 },\n+  { -0.015039221463465955, 10, 50.000000000000000, 0.0 },\n+  { 0.0095256289349167390, 10, 55.000000000000000, 0.0 },\n+  { 0.015822719394008339, 10, 60.000000000000000, 0.0 },\n+  { -0.0019391391708249754, 10, 65.000000000000000, 0.0 },\n+  { -0.014293389028395012, 10, 70.000000000000000, 0.0 },\n+  { -0.0044210285031696227, 10, 75.000000000000000, 0.0 },\n+  { 0.010516146958338813, 10, 80.000000000000000, 0.0 },\n+  { 0.0086736275131325726, 10, 85.000000000000000, 0.0 },\n+  { -0.0052905066357239331, 10, 90.000000000000000, 0.0 },\n+  { -0.010258326955210768, 10, 95.000000000000000, 0.0 },\n+  { -0.00019565785971342414, 10, 100.00000000000000, 0.0 },\n };\n const double toler011 = 2.5000000000000017e-10;\n \n // Test data for n=20.\n-// max(|f - f_GSL|): 8.5521867365656590e-16\n-// max(|f - f_GSL| / |f_GSL|): 2.3231623379380350e-13\n+// max(|f - f_GSL|): 8.5435131191857749e-16 at index 17\n+// max(|f - f_GSL| / |f_GSL|): 2.3195586735048320e-13\n+// mean(f - f_GSL): 8.6950352153253420e-18\n+// variance(f - f_GSL): 1.4336055666601385e-36\n+// stddev(f - f_GSL): 1.1973326883786889e-18\n const testcase_sph_bessel<double>\n data012[21] =\n {\n-  { 0.0000000000000000, 20, 0.0000000000000000 },\n-  { 5.4277267607932098e-12, 20, 5.0000000000000000 },\n-  { 2.3083719613194670e-06, 20, 10.000000000000000 },\n-  { 0.0015467058510412498, 20, 15.000000000000000 },\n-  { 0.038324851639805160, 20, 20.000000000000000 },\n-  { 0.028500071484154645, 20, 25.000000000000000 },\n-  { -0.014711593353429081, 20, 30.000000000000000 },\n-  { -0.010797653070264229, 20, 35.000000000000000 },\n-  { 0.026535391837540293, 20, 40.000000000000000 },\n-  { -0.011582959134716393, 20, 45.000000000000000 },\n-  { -0.015785029898269291, 20, 50.000000000000000 },\n-  { 0.013885519185862741, 20, 55.000000000000000 },\n-  { 0.011112458964023273, 20, 60.000000000000000 },\n-  { -0.011938384963927568, 20, 65.000000000000000 },\n-  { -0.010117695207156904, 20, 70.000000000000000 },\n-  { 0.0089871214102383232, 20, 75.000000000000000 },\n-  { 0.010400578884991936, 20, 80.000000000000000 },\n-  { -0.0055359020656326700, 20, 85.000000000000000 },\n-  { -0.010639343320787521, 20, 90.000000000000000 },\n-  { 0.0018051661455979529, 20, 95.000000000000000 },\n-  { 0.010107671283873054, 20, 100.00000000000000 },\n+  { 0.0000000000000000, 20, 0.0000000000000000, 0.0 },\n+  { 5.4277267607932098e-12, 20, 5.0000000000000000, 0.0 },\n+  { 2.3083719613194670e-06, 20, 10.000000000000000, 0.0 },\n+  { 0.0015467058510412498, 20, 15.000000000000000, 0.0 },\n+  { 0.038324851639805160, 20, 20.000000000000000, 0.0 },\n+  { 0.028500071484154645, 20, 25.000000000000000, 0.0 },\n+  { -0.014711593353429081, 20, 30.000000000000000, 0.0 },\n+  { -0.010797653070264229, 20, 35.000000000000000, 0.0 },\n+  { 0.026535391837540293, 20, 40.000000000000000, 0.0 },\n+  { -0.011582959134716391, 20, 45.000000000000000, 0.0 },\n+  { -0.015785029898269291, 20, 50.000000000000000, 0.0 },\n+  { 0.013885519185862741, 20, 55.000000000000000, 0.0 },\n+  { 0.011112458964023273, 20, 60.000000000000000, 0.0 },\n+  { -0.011938384963927568, 20, 65.000000000000000, 0.0 },\n+  { -0.010117695207156904, 20, 70.000000000000000, 0.0 },\n+  { 0.0089871214102383232, 20, 75.000000000000000, 0.0 },\n+  { 0.010400578884991936, 20, 80.000000000000000, 0.0 },\n+  { -0.0055359020656326700, 20, 85.000000000000000, 0.0 },\n+  { -0.010639343320787522, 20, 90.000000000000000, 0.0 },\n+  { 0.0018051661455979529, 20, 95.000000000000000, 0.0 },\n+  { 0.010107671283873054, 20, 100.00000000000000, 0.0 },\n };\n const double toler012 = 2.5000000000000014e-11;\n \n // Test data for n=50.\n-// max(|f - f_GSL|): 9.7377618121785581e-16\n-// max(|f - f_GSL| / |f_GSL|): 2.0735742618499052e-12\n+// max(|f - f_GSL|): 9.7366776100060726e-16 at index 17\n+// max(|f - f_GSL| / |f_GSL|): 2.0733433901400738e-12\n+// mean(f - f_GSL): 7.9976407365692512e-18\n+// variance(f - f_GSL): 4.9608706858434859e-33\n+// stddev(f - f_GSL): 7.0433448629493399e-17\n const testcase_sph_bessel<double>\n data013[21] =\n {\n-  { 0.0000000000000000, 50, 0.0000000000000000 },\n-  { 2.8574793504401511e-46, 50, 5.0000000000000000 },\n-  { 2.2306960232186471e-31, 50, 10.000000000000000 },\n-  { 7.6804716640080804e-23, 50, 15.000000000000000 },\n-  { 5.6500807918725220e-17, 50, 20.000000000000000 },\n-  { 1.2540416973758975e-12, 50, 25.000000000000000 },\n-  { 2.6901637185735326e-09, 50, 30.000000000000000 },\n-  { 1.0167148174422245e-06, 50, 35.000000000000000 },\n-  { 9.3949174038179069e-05, 50, 40.000000000000000 },\n-  { 0.0024888927213794561, 50, 45.000000000000000 },\n-  { 0.018829107369282647, 50, 50.000000000000000 },\n-  { 0.026373198438145489, 50, 55.000000000000000 },\n-  { -0.021230978268739001, 50, 60.000000000000000 },\n-  { 0.016539881802291313, 50, 65.000000000000000 },\n-  { -0.015985416061436664, 50, 70.000000000000000 },\n-  { 0.015462548984405590, 50, 75.000000000000000 },\n-  { -0.010638570118081819, 50, 80.000000000000000 },\n-  { 0.00046961239784540793, 50, 85.000000000000000 },\n-  { 0.0096065882189920251, 50, 90.000000000000000 },\n-  { -0.010613873910261154, 50, 95.000000000000000 },\n-  { 0.00057971408822774927, 50, 100.00000000000000 },\n+  { 0.0000000000000000, 50, 0.0000000000000000, 0.0 },\n+  { 2.8574793504401518e-46, 50, 5.0000000000000000, 0.0 },\n+  { 2.2306960232186480e-31, 50, 10.000000000000000, 0.0 },\n+  { 7.6804716640080804e-23, 50, 15.000000000000000, 0.0 },\n+  { 5.6500807918725220e-17, 50, 20.000000000000000, 0.0 },\n+  { 1.2540416973758975e-12, 50, 25.000000000000000, 0.0 },\n+  { 2.6901637185735326e-09, 50, 30.000000000000000, 0.0 },\n+  { 1.0167148174422245e-06, 50, 35.000000000000000, 0.0 },\n+  { 9.3949174038179069e-05, 50, 40.000000000000000, 0.0 },\n+  { 0.0024888927213794557, 50, 45.000000000000000, 0.0 },\n+  { 0.018829107369282647, 50, 50.000000000000000, 0.0 },\n+  { 0.026373198438145489, 50, 55.000000000000000, 0.0 },\n+  { -0.021230978268739001, 50, 60.000000000000000, 0.0 },\n+  { 0.016539881802291313, 50, 65.000000000000000, 0.0 },\n+  { -0.015985416061436664, 50, 70.000000000000000, 0.0 },\n+  { 0.015462548984405590, 50, 75.000000000000000, 0.0 },\n+  { -0.010638570118081819, 50, 80.000000000000000, 0.0 },\n+  { 0.00046961239784540793, 50, 85.000000000000000, 0.0 },\n+  { 0.0096065882189920251, 50, 90.000000000000000, 0.0 },\n+  { -0.010613873910261154, 50, 95.000000000000000, 0.0 },\n+  { 0.00057971408822774927, 50, 100.00000000000000, 0.0 },\n };\n const double toler013 = 2.5000000000000017e-10;\n \n // Test data for n=100.\n-// max(|f - f_GSL|): 3.1225022567582528e-17\n+// max(|f - f_GSL|): 3.2959746043559335e-17 at index 20\n // max(|f - f_GSL| / |f_GSL|): 8.7701893132122237e-14\n+// mean(f - f_GSL): -1.3192742355211203e-18\n+// variance(f - f_GSL): 5.2558771452351202e-35\n+// stddev(f - f_GSL): 7.2497428542225690e-18\n const testcase_sph_bessel<double>\n data014[21] =\n {\n-  { 0.0000000000000000, 100, 0.0000000000000000 },\n-  { 5.5356503033889938e-120, 100, 5.0000000000000000 },\n-  { 5.8320401820058771e-90, 100, 10.000000000000000 },\n-  { 1.7406387750766626e-72, 100, 15.000000000000000 },\n-  { 3.5152711125317012e-60, 100, 20.000000000000000 },\n-  { 9.8455459353815965e-51, 100, 25.000000000000000 },\n-  { 4.0888596744301583e-43, 100, 30.000000000000000 },\n-  { 8.8975854911133939e-37, 100, 35.000000000000000 },\n-  { 2.1513492547733828e-31, 100, 40.000000000000000 },\n-  { 9.3673586994539108e-27, 100, 45.000000000000000 },\n-  { 1.0190122629310471e-22, 100, 50.000000000000000 },\n-  { 3.4887804977690388e-19, 100, 55.000000000000000 },\n-  { 4.4442883425555593e-16, 100, 60.000000000000000 },\n-  { 2.3832619568710723e-13, 100, 65.000000000000000 },\n-  { 5.8948384175607987e-11, 100, 70.000000000000000 },\n-  { 7.1884446357022277e-09, 100, 75.000000000000000 },\n-  { 4.5247964400095002e-07, 100, 80.000000000000000 },\n-  { 1.5096093228779032e-05, 100, 85.000000000000000 },\n-  { 0.00026825172647807507, 100, 90.000000000000000 },\n-  { 0.0024744308520581117, 100, 95.000000000000000 },\n-  { 0.010880477011438350, 100, 100.00000000000000 },\n+  { 0.0000000000000000, 100, 0.0000000000000000, 0.0 },\n+  { 5.5356503033889931e-120, 100, 5.0000000000000000, 0.0 },\n+  { 5.8320401820058771e-90, 100, 10.000000000000000, 0.0 },\n+  { 1.7406387750766626e-72, 100, 15.000000000000000, 0.0 },\n+  { 3.5152711125317012e-60, 100, 20.000000000000000, 0.0 },\n+  { 9.8455459353815965e-51, 100, 25.000000000000000, 0.0 },\n+  { 4.0888596744301583e-43, 100, 30.000000000000000, 0.0 },\n+  { 8.8975854911133939e-37, 100, 35.000000000000000, 0.0 },\n+  { 2.1513492547733828e-31, 100, 40.000000000000000, 0.0 },\n+  { 9.3673586994539094e-27, 100, 45.000000000000000, 0.0 },\n+  { 1.0190122629310471e-22, 100, 50.000000000000000, 0.0 },\n+  { 3.4887804977690388e-19, 100, 55.000000000000000, 0.0 },\n+  { 4.4442883425555593e-16, 100, 60.000000000000000, 0.0 },\n+  { 2.3832619568710723e-13, 100, 65.000000000000000, 0.0 },\n+  { 5.8948384175607987e-11, 100, 70.000000000000000, 0.0 },\n+  { 7.1884446357022277e-09, 100, 75.000000000000000, 0.0 },\n+  { 4.5247964400095002e-07, 100, 80.000000000000000, 0.0 },\n+  { 1.5096093228779032e-05, 100, 85.000000000000000, 0.0 },\n+  { 0.00026825172647807513, 100, 90.000000000000000, 0.0 },\n+  { 0.0024744308520581117, 100, 95.000000000000000, 0.0 },\n+  { 0.010880477011438350, 100, 100.00000000000000, 0.0 },\n };\n const double toler014 = 5.0000000000000029e-12;\n \n-template<typename Tp, unsigned int Num>\n+template<typename Ret, unsigned int Num>\n   void\n-  test(const testcase_sph_bessel<Tp> (&data)[Num], Tp toler)\n+  test(const testcase_sph_bessel<Ret> (&data)[Num], Ret toler)\n   {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n+    bool test __attribute__((unused)) = true;\n+    const Ret eps = std::numeric_limits<Ret>::epsilon();\n+    Ret max_abs_diff = -Ret(1);\n+    Ret max_abs_frac = -Ret(1);\n     unsigned int num_datum = Num;\n     for (unsigned int i = 0; i < num_datum; ++i)\n       {\n-\tconst Tp f = std::sph_bessel(data[i].n, data[i].x);\n-\tconst Tp f0 = data[i].f0;\n-\tconst Tp diff = f - f0;\n+\tconst Ret f = std::sph_bessel(data[i].n, data[i].x);\n+\tconst Ret f0 = data[i].f0;\n+\tconst Ret diff = f - f0;\n \tif (std::abs(diff) > max_abs_diff)\n \t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n+\tif (std::abs(f0) > Ret(10) * eps\n+\t && std::abs(f) > Ret(10) * eps)\n \t  {\n-\t    const Tp frac = diff / f0;\n+\t    const Ret frac = diff / f0;\n \t    if (std::abs(frac) > max_abs_frac)\n \t      max_abs_frac = std::abs(frac);\n \t  }"}, {"sha": "fecea0e7bb3e261b3c2949e3f76ff12553a8bdfb", "filename": "libstdc++-v3/testsuite/special_functions/20_sph_legendre/check_value.cc", "status": "modified", "additions": 1239, "deletions": 1131, "changes": 2370, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F20_sph_legendre%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F20_sph_legendre%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F20_sph_legendre%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}, {"sha": "a27c80d78cc19fc71204d0f8129140bb68f6e768", "filename": "libstdc++-v3/testsuite/special_functions/21_sph_neumann/check_value.cc", "status": "modified", "additions": 414, "deletions": 366, "changes": 780, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F21_sph_neumann%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F21_sph_neumann%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fspecial_functions%2F21_sph_neumann%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -37,491 +37,539 @@\n #endif\n #include <specfun_testcase.h>\n \n-\n // Test data for n=0.\n-// max(|f - f_GSL|): 4.4408920985006262e-16\n-// max(|f - f_GSL| / |f_GSL|): 4.8209634107822837e-15\n+// max(|f - f_GSL|): 1.3322676295501878e-15 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 6.3549063142130099e-15\n+// mean(f - f_GSL): 1.5525775109992422e-17\n+// variance(f - f_GSL): 1.8100648852545731e-34\n+// stddev(f - f_GSL): 1.3453865189062112e-17\n const testcase_sph_neumann<double>\n data001[20] =\n {\n-  { -3.8756496868425789, 0, 0.25000000000000000 },\n-  { -1.7551651237807455, 0, 0.50000000000000000 },\n-  { -0.97558515849842786, 0, 0.75000000000000000 },\n-  { -0.54030230586813977, 0, 1.0000000000000000 },\n-  { -0.25225788991621495, 0, 1.2500000000000000 },\n-  { -0.047158134445135273, 0, 1.5000000000000000 },\n-  { 0.10185488894256690, 0, 1.7500000000000000 },\n-  { 0.20807341827357120, 0, 2.0000000000000000 },\n-  { 0.27918827676566177, 0, 2.2500000000000000 },\n-  { 0.32045744621877348, 0, 2.5000000000000000 },\n-  { 0.33610995586635040, 0, 2.7500000000000000 },\n-  { 0.32999749886681512, 0, 3.0000000000000000 },\n-  { 0.30588605417862963, 0, 3.2500000000000000 },\n-  { 0.26755905351165610, 0, 3.5000000000000000 },\n-  { 0.21881582862388288, 0, 3.7500000000000000 },\n-  { 0.16341090521590299, 0, 4.0000000000000000 },\n-  { 0.10496176233265714, 0, 4.2500000000000000 },\n-  { 0.046843510984617719, 0, 4.5000000000000000 },\n-  { -0.0079162427132582220, 0, 4.7500000000000000 },\n-  { -0.056732437092645263, 0, 5.0000000000000000 },\n+  { -3.8756496868425789, 0, 0.25000000000000000, 0.0 },\n+  { -1.7551651237807455, 0, 0.50000000000000000, 0.0 },\n+  { -0.97558515849842786, 0, 0.75000000000000000, 0.0 },\n+  { -0.54030230586813977, 0, 1.0000000000000000, 0.0 },\n+  { -0.25225788991621495, 0, 1.2500000000000000, 0.0 },\n+  { -0.047158134445135273, 0, 1.5000000000000000, 0.0 },\n+  { 0.10185488894256690, 0, 1.7500000000000000, 0.0 },\n+  { 0.20807341827357120, 0, 2.0000000000000000, 0.0 },\n+  { 0.27918827676566177, 0, 2.2500000000000000, 0.0 },\n+  { 0.32045744621877348, 0, 2.5000000000000000, 0.0 },\n+  { 0.33610995586635040, 0, 2.7500000000000000, 0.0 },\n+  { 0.32999749886681512, 0, 3.0000000000000000, 0.0 },\n+  { 0.30588605417862963, 0, 3.2500000000000000, 0.0 },\n+  { 0.26755905351165610, 0, 3.5000000000000000, 0.0 },\n+  { 0.21881582862388288, 0, 3.7500000000000000, 0.0 },\n+  { 0.16341090521590299, 0, 4.0000000000000000, 0.0 },\n+  { 0.10496176233265714, 0, 4.2500000000000000, 0.0 },\n+  { 0.046843510984617719, 0, 4.5000000000000000, 0.0 },\n+  { -0.0079162427132582220, 0, 4.7500000000000000, 0.0 },\n+  { -0.056732437092645263, 0, 5.0000000000000000, 0.0 },\n };\n-const double toler001 = 2.5000000000000020e-13;\n+const double toler001 = 5.0000000000000039e-13;\n \n // Test data for n=1.\n-// max(|f - f_GSL|): 3.5527136788005009e-15\n-// max(|f - f_GSL| / |f_GSL|): 3.7472288263398607e-15\n+// max(|f - f_GSL|): 3.5527136788005009e-15 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 5.0269657509879036e-15\n+// mean(f - f_GSL): -2.8727020762175924e-16\n+// variance(f - f_GSL): 4.5719762984514500e-33\n+// stddev(f - f_GSL): 6.7616390752919144e-17\n const testcase_sph_neumann<double>\n data002[20] =\n {\n-  { -16.492214584388407, 1, 0.25000000000000000 },\n-  { -4.4691813247698970, 1, 0.50000000000000000 },\n-  { -2.2096318913623492, 1, 0.75000000000000000 },\n-  { -1.3817732906760363, 1, 1.0000000000000000 },\n-  { -0.96099400741744090, 1, 1.2500000000000000 },\n-  { -0.69643541403279308, 1, 1.5000000000000000 },\n-  { -0.50407489024649721, 1, 1.7500000000000000 },\n-  { -0.35061200427605527, 1, 2.0000000000000000 },\n-  { -0.22172663116544869, 1, 2.2500000000000000 },\n-  { -0.11120587915407318, 1, 2.5000000000000000 },\n-  { -0.016564013158538646, 1, 2.7500000000000000 },\n-  { 0.062959163602315973, 1, 3.0000000000000000 },\n-  { 0.12740959652576553, 1, 3.2500000000000000 },\n-  { 0.17666922320036457, 1, 3.5000000000000000 },\n-  { 0.21076723929766045, 1, 3.7500000000000000 },\n-  { 0.23005335013095779, 1, 4.0000000000000000 },\n-  { 0.23528261660264485, 1, 4.2500000000000000 },\n-  { 0.22763858414438104, 1, 4.5000000000000000 },\n-  { 0.20871085184465679, 1, 4.7500000000000000 },\n-  { 0.18043836751409864, 1, 5.0000000000000000 },\n+  { -16.492214584388407, 1, 0.25000000000000000, 0.0 },\n+  { -4.4691813247698970, 1, 0.50000000000000000, 0.0 },\n+  { -2.2096318913623492, 1, 0.75000000000000000, 0.0 },\n+  { -1.3817732906760363, 1, 1.0000000000000000, 0.0 },\n+  { -0.96099400741744090, 1, 1.2500000000000000, 0.0 },\n+  { -0.69643541403279308, 1, 1.5000000000000000, 0.0 },\n+  { -0.50407489024649721, 1, 1.7500000000000000, 0.0 },\n+  { -0.35061200427605527, 1, 2.0000000000000000, 0.0 },\n+  { -0.22172663116544869, 1, 2.2500000000000000, 0.0 },\n+  { -0.11120587915407318, 1, 2.5000000000000000, 0.0 },\n+  { -0.016564013158538646, 1, 2.7500000000000000, 0.0 },\n+  { 0.062959163602315973, 1, 3.0000000000000000, 0.0 },\n+  { 0.12740959652576553, 1, 3.2500000000000000, 0.0 },\n+  { 0.17666922320036457, 1, 3.5000000000000000, 0.0 },\n+  { 0.21076723929766045, 1, 3.7500000000000000, 0.0 },\n+  { 0.23005335013095779, 1, 4.0000000000000000, 0.0 },\n+  { 0.23528261660264485, 1, 4.2500000000000000, 0.0 },\n+  { 0.22763858414438104, 1, 4.5000000000000000, 0.0 },\n+  { 0.20871085184465679, 1, 4.7500000000000000, 0.0 },\n+  { 0.18043836751409864, 1, 5.0000000000000000, 0.0 },\n };\n-const double toler002 = 2.5000000000000020e-13;\n+const double toler002 = 5.0000000000000039e-13;\n \n // Test data for n=2.\n-// max(|f - f_GSL|): 5.6843418860808015e-14\n-// max(|f - f_GSL| / |f_GSL|): 2.4702749396271158e-15\n+// max(|f - f_GSL|): 1.0658141036401503e-14 at index 1\n+// max(|f - f_GSL| / |f_GSL|): 1.4758752580536458e-15\n+// mean(f - f_GSL): -7.2060413192076563e-16\n+// variance(f - f_GSL): 3.1027271571410419e-32\n+// stddev(f - f_GSL): 1.7614559764981474e-16\n const testcase_sph_neumann<double>\n data003[20] =\n {\n-  { -194.03092532581832, 2, 0.25000000000000000 },\n-  { -25.059922824838637, 2, 0.50000000000000000 },\n-  { -7.8629424069509692, 2, 0.75000000000000000 },\n-  { -3.6050175661599688, 2, 1.0000000000000000 },\n-  { -2.0541277278856431, 2, 1.2500000000000000 },\n-  { -1.3457126936204509, 2, 1.5000000000000000 },\n-  { -0.96598327222227631, 2, 1.7500000000000000 },\n-  { -0.73399142468765399, 2, 2.0000000000000000 },\n-  { -0.57482378498626008, 2, 2.2500000000000000 },\n-  { -0.45390450120366133, 2, 2.5000000000000000 },\n-  { -0.35417978840293796, 2, 2.7500000000000000 },\n-  { -0.26703833526449916, 2, 3.0000000000000000 },\n-  { -0.18827719584715374, 2, 3.2500000000000000 },\n-  { -0.11612829076848646, 2, 3.5000000000000000 },\n-  { -0.050202037185754500, 2, 3.7500000000000000 },\n-  { 0.0091291073823153435, 2, 4.0000000000000000 },\n-  { 0.061120084680974532, 2, 4.2500000000000000 },\n-  { 0.10491554511163632, 2, 4.5000000000000000 },\n-  { 0.13973362282567303, 2, 4.7500000000000000 },\n-  { 0.16499545760110443, 2, 5.0000000000000000 },\n+  { -194.03092532581832, 2, 0.25000000000000000, 0.0 },\n+  { -25.059922824838637, 2, 0.50000000000000000, 0.0 },\n+  { -7.8629424069509692, 2, 0.75000000000000000, 0.0 },\n+  { -3.6050175661599688, 2, 1.0000000000000000, 0.0 },\n+  { -2.0541277278856431, 2, 1.2500000000000000, 0.0 },\n+  { -1.3457126936204509, 2, 1.5000000000000000, 0.0 },\n+  { -0.96598327222227631, 2, 1.7500000000000000, 0.0 },\n+  { -0.73399142468765399, 2, 2.0000000000000000, 0.0 },\n+  { -0.57482378498626008, 2, 2.2500000000000000, 0.0 },\n+  { -0.45390450120366133, 2, 2.5000000000000000, 0.0 },\n+  { -0.35417978840293796, 2, 2.7500000000000000, 0.0 },\n+  { -0.26703833526449916, 2, 3.0000000000000000, 0.0 },\n+  { -0.18827719584715374, 2, 3.2500000000000000, 0.0 },\n+  { -0.11612829076848646, 2, 3.5000000000000000, 0.0 },\n+  { -0.050202037185754500, 2, 3.7500000000000000, 0.0 },\n+  { 0.0091291073823153435, 2, 4.0000000000000000, 0.0 },\n+  { 0.061120084680974532, 2, 4.2500000000000000, 0.0 },\n+  { 0.10491554511163632, 2, 4.5000000000000000, 0.0 },\n+  { 0.13973362282567303, 2, 4.7500000000000000, 0.0 },\n+  { 0.16499545760110443, 2, 5.0000000000000000, 0.0 },\n };\n const double toler003 = 2.5000000000000020e-13;\n \n // Test data for n=5.\n-// max(|f - f_GSL|): 4.6566128730773926e-10\n-// max(|f - f_GSL| / |f_GSL|): 6.3451511503162099e-16\n+// max(|f - f_GSL|): 4.6566128730773926e-10 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 7.9314389378952617e-16\n+// mean(f - f_GSL): -2.3717425245983749e-11\n+// variance(f - f_GSL): 3.1164189869182792e-23\n+// stddev(f - f_GSL): 5.5824895762717548e-12\n const testcase_sph_neumann<double>\n data004[20] =\n {\n-  { -3884190.0626637731, 5, 0.25000000000000000 },\n-  { -61327.563166980639, 5, 0.50000000000000000 },\n-  { -5478.9529323190836, 5, 0.75000000000000000 },\n-  { -999.44034339223640, 5, 1.0000000000000000 },\n-  { -270.49720502942358, 5, 1.2500000000000000 },\n-  { -94.236110085232468, 5, 1.5000000000000000 },\n-  { -39.182827786584333, 5, 1.7500000000000000 },\n-  { -18.591445311190984, 5, 2.0000000000000000 },\n-  { -9.7821420203182274, 5, 2.2500000000000000 },\n-  { -5.5991001548063233, 5, 2.5000000000000000 },\n-  { -3.4400655233636823, 5, 2.7500000000000000 },\n-  { -2.2470233284653904, 5, 3.0000000000000000 },\n-  { -1.5491439945779160, 5, 3.2500000000000000 },\n-  { -1.1205896325654248, 5, 3.5000000000000000 },\n-  { -0.84592255605194844, 5, 3.7500000000000000 },\n-  { -0.66280126645045878, 5, 4.0000000000000000 },\n-  { -0.53589374436038528, 5, 4.2500000000000000 },\n-  { -0.44430324229090551, 5, 4.5000000000000000 },\n-  { -0.37520157232899892, 5, 4.7500000000000000 },\n-  { -0.32046504674973919, 5, 5.0000000000000000 },\n+  { -3884190.0626637731, 5, 0.25000000000000000, 0.0 },\n+  { -61327.563166980639, 5, 0.50000000000000000, 0.0 },\n+  { -5478.9529323190836, 5, 0.75000000000000000, 0.0 },\n+  { -999.44034339223640, 5, 1.0000000000000000, 0.0 },\n+  { -270.49720502942358, 5, 1.2500000000000000, 0.0 },\n+  { -94.236110085232468, 5, 1.5000000000000000, 0.0 },\n+  { -39.182827786584333, 5, 1.7500000000000000, 0.0 },\n+  { -18.591445311190984, 5, 2.0000000000000000, 0.0 },\n+  { -9.7821420203182274, 5, 2.2500000000000000, 0.0 },\n+  { -5.5991001548063233, 5, 2.5000000000000000, 0.0 },\n+  { -3.4400655233636823, 5, 2.7500000000000000, 0.0 },\n+  { -2.2470233284653904, 5, 3.0000000000000000, 0.0 },\n+  { -1.5491439945779160, 5, 3.2500000000000000, 0.0 },\n+  { -1.1205896325654248, 5, 3.5000000000000000, 0.0 },\n+  { -0.84592255605194844, 5, 3.7500000000000000, 0.0 },\n+  { -0.66280126645045878, 5, 4.0000000000000000, 0.0 },\n+  { -0.53589374436038528, 5, 4.2500000000000000, 0.0 },\n+  { -0.44430324229090551, 5, 4.5000000000000000, 0.0 },\n+  { -0.37520157232899892, 5, 4.7500000000000000, 0.0 },\n+  { -0.32046504674973919, 5, 5.0000000000000000, 0.0 },\n };\n const double toler004 = 2.5000000000000020e-13;\n \n // Test data for n=10.\n-// max(|f - f_GSL|): 0.50000000000000000\n-// max(|f - f_GSL| / |f_GSL|): 1.2712694703401436e-15\n+// max(|f - f_GSL|): 0.50000000000000000 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 1.5255233644081723e-15\n+// mean(f - f_GSL): -0.025048278210168286\n+// variance(f - f_GSL): 3.4761477272673221e-05\n+// stddev(f - f_GSL): 0.0058958864704701719\n const testcase_sph_neumann<double>\n data005[20] =\n {\n-  { -2750653598174213.5, 10, 0.25000000000000000 },\n-  { -1349739281107.0554, 10, 0.50000000000000000 },\n-  { -15733380424.953760, 10, 0.75000000000000000 },\n-  { -672215008.25620842, 10, 1.0000000000000000 },\n-  { -58607405.988679446, 10, 1.2500000000000000 },\n-  { -8032728.8148234813, 10, 1.5000000000000000 },\n-  { -1505955.5720640516, 10, 1.7500000000000000 },\n-  { -355414.72008543846, 10, 2.0000000000000000 },\n-  { -100086.80374425423, 10, 2.2500000000000000 },\n-  { -32423.794085334419, 10, 2.5000000000000000 },\n-  { -11772.863161809979, 10, 2.7500000000000000 },\n-  { -4699.8591888113924, 10, 3.0000000000000000 },\n-  { -2033.0183273853759, 10, 3.2500000000000000 },\n-  { -942.19075028425493, 10, 3.5000000000000000 },\n-  { -463.65206971202474, 10, 3.7500000000000000 },\n-  { -240.53552987988931, 10, 4.0000000000000000 },\n-  { -130.78478404631085, 10, 4.2500000000000000 },\n-  { -74.170665501737531, 10, 4.5000000000000000 },\n-  { -43.698249898184983, 10, 4.7500000000000000 },\n-  { -26.656114405718711, 10, 5.0000000000000000 },\n+  { -2750653598174213.5, 10, 0.25000000000000000, 0.0 },\n+  { -1349739281107.0554, 10, 0.50000000000000000, 0.0 },\n+  { -15733380424.953760, 10, 0.75000000000000000, 0.0 },\n+  { -672215008.25620842, 10, 1.0000000000000000, 0.0 },\n+  { -58607405.988679446, 10, 1.2500000000000000, 0.0 },\n+  { -8032728.8148234813, 10, 1.5000000000000000, 0.0 },\n+  { -1505955.5720640516, 10, 1.7500000000000000, 0.0 },\n+  { -355414.72008543846, 10, 2.0000000000000000, 0.0 },\n+  { -100086.80374425423, 10, 2.2500000000000000, 0.0 },\n+  { -32423.794085334419, 10, 2.5000000000000000, 0.0 },\n+  { -11772.863161809979, 10, 2.7500000000000000, 0.0 },\n+  { -4699.8591888113924, 10, 3.0000000000000000, 0.0 },\n+  { -2033.0183273853759, 10, 3.2500000000000000, 0.0 },\n+  { -942.19075028425493, 10, 3.5000000000000000, 0.0 },\n+  { -463.65206971202474, 10, 3.7500000000000000, 0.0 },\n+  { -240.53552987988931, 10, 4.0000000000000000, 0.0 },\n+  { -130.78478404631085, 10, 4.2500000000000000, 0.0 },\n+  { -74.170665501737531, 10, 4.5000000000000000, 0.0 },\n+  { -43.698249898184983, 10, 4.7500000000000000, 0.0 },\n+  { -26.656114405718711, 10, 5.0000000000000000, 0.0 },\n };\n const double toler005 = 2.5000000000000020e-13;\n \n // Test data for n=20.\n-// max(|f - f_GSL|): 2.9514790517935283e+20\n-// max(|f - f_GSL| / |f_GSL|): 1.9896573344672978e-15\n+// max(|f - f_GSL|): 2.9514790517935283e+20 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 2.1705352739643247e-15\n+// mean(f - f_GSL): -1.4757416361014618e+19\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_sph_neumann<double>\n data006[20] =\n {\n-  { -1.4077591402542251e+36, 20, 0.25000000000000000 },\n-  { -6.7288761838234712e+29, 20, 0.50000000000000000 },\n-  { -1.3544611382105945e+26, 20, 0.75000000000000000 },\n-  { -3.2395922185789833e+23, 20, 1.0000000000000000 },\n-  { -3.0096416715953060e+21, 20, 1.2500000000000000 },\n-  { -6.5999646851668173e+19, 20, 1.5000000000000000 },\n-  { -2.6193364753070735e+18, 20, 1.7500000000000000 },\n-  { -1.6054364928152224e+17, 20, 2.0000000000000000 },\n-  { -13719071872797762., 20, 2.2500000000000000 },\n-  { -1524247248298953.8, 20, 2.5000000000000000 },\n-  { -209484650509384.06, 20, 2.7500000000000000 },\n-  { -34327545666696.488, 20, 3.0000000000000000 },\n-  { -6522260876203.3174, 20, 3.2500000000000000 },\n-  { -1406018871897.2307, 20, 3.5000000000000000 },\n-  { -338025193731.78882, 20, 3.7500000000000000 },\n-  { -89381690326.018677, 20, 4.0000000000000000 },\n-  { -25701805899.474934, 20, 4.2500000000000000 },\n-  { -7961859734.2407761, 20, 4.5000000000000000 },\n-  { -2636237230.0850010, 20, 4.7500000000000000 },\n-  { -926795140.30575466, 20, 5.0000000000000000 },\n+  { -1.4077591402542251e+36, 20, 0.25000000000000000, 0.0 },\n+  { -6.7288761838234712e+29, 20, 0.50000000000000000, 0.0 },\n+  { -1.3544611382105945e+26, 20, 0.75000000000000000, 0.0 },\n+  { -3.2395922185789833e+23, 20, 1.0000000000000000, 0.0 },\n+  { -3.0096416715953060e+21, 20, 1.2500000000000000, 0.0 },\n+  { -6.5999646851668173e+19, 20, 1.5000000000000000, 0.0 },\n+  { -2.6193364753070735e+18, 20, 1.7500000000000000, 0.0 },\n+  { -1.6054364928152224e+17, 20, 2.0000000000000000, 0.0 },\n+  { -13719071872797762., 20, 2.2500000000000000, 0.0 },\n+  { -1524247248298953.8, 20, 2.5000000000000000, 0.0 },\n+  { -209484650509384.06, 20, 2.7500000000000000, 0.0 },\n+  { -34327545666696.488, 20, 3.0000000000000000, 0.0 },\n+  { -6522260876203.3174, 20, 3.2500000000000000, 0.0 },\n+  { -1406018871897.2307, 20, 3.5000000000000000, 0.0 },\n+  { -338025193731.78882, 20, 3.7500000000000000, 0.0 },\n+  { -89381690326.018677, 20, 4.0000000000000000, 0.0 },\n+  { -25701805899.474934, 20, 4.2500000000000000, 0.0 },\n+  { -7961859734.2407761, 20, 4.5000000000000000, 0.0 },\n+  { -2636237230.0850010, 20, 4.7500000000000000, 0.0 },\n+  { -926795140.30575466, 20, 5.0000000000000000, 0.0 },\n };\n const double toler006 = 2.5000000000000020e-13;\n \n // Test data for n=50.\n-// max(|f - f_GSL|): 2.0859248397665138e+93\n-// max(|f - f_GSL| / |f_GSL|): 7.3237119407125301e-14\n+// max(|f - f_GSL|): 2.0859248397665138e+93 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 4.2498516526709979e-14\n+// mean(f - f_GSL): 1.0429624198832546e+92\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_sph_neumann<double>\n data007[20] =\n {\n-  { -1.3823742808004061e+109, 50, 0.25000000000000000 },\n-  { -6.1447912922121694e+93, 50, 0.50000000000000000 },\n-  { -6.4348494908900529e+84, 50, 0.75000000000000000 },\n-  { -2.7391922846297569e+78, 50, 1.0000000000000000 },\n-  { -3.1365037573299931e+73, 50, 1.2500000000000000 },\n-  { -2.8821098528635756e+69, 50, 1.5000000000000000 },\n-  { -1.1148255024189452e+66, 50, 1.7500000000000000 },\n-  { -1.2350219443670970e+63, 50, 2.0000000000000000 },\n-  { -3.0565226939717125e+60, 50, 2.2500000000000000 },\n-  { -1.4262702131152733e+58, 50, 2.5000000000000000 },\n-  { -1.1118745474840939e+56, 50, 2.7500000000000000 },\n-  { -1.3243260716629126e+54, 50, 3.0000000000000000 },\n-  { -2.2519472094129334e+52, 50, 3.2500000000000000 },\n-  { -5.1861507201100364e+50, 50, 3.5000000000000000 },\n-  { -1.5513212909461383e+49, 50, 3.7500000000000000 },\n-  { -5.8276471407899822e+47, 50, 4.0000000000000000 },\n-  { -2.6745414086542661e+46, 50, 4.2500000000000000 },\n-  { -1.4657308996352322e+45, 50, 4.5000000000000000 },\n-  { -9.4102674366685358e+43, 50, 4.7500000000000000 },\n-  { -6.9641091882698388e+42, 50, 5.0000000000000000 },\n+  { -1.3823742808004061e+109, 50, 0.25000000000000000, 0.0 },\n+  { -6.1447912922121694e+93, 50, 0.50000000000000000, 0.0 },\n+  { -6.4348494908900529e+84, 50, 0.75000000000000000, 0.0 },\n+  { -2.7391922846297569e+78, 50, 1.0000000000000000, 0.0 },\n+  { -3.1365037573299931e+73, 50, 1.2500000000000000, 0.0 },\n+  { -2.8821098528635756e+69, 50, 1.5000000000000000, 0.0 },\n+  { -1.1148255024189452e+66, 50, 1.7500000000000000, 0.0 },\n+  { -1.2350219443670970e+63, 50, 2.0000000000000000, 0.0 },\n+  { -3.0565226939717125e+60, 50, 2.2500000000000000, 0.0 },\n+  { -1.4262702131152733e+58, 50, 2.5000000000000000, 0.0 },\n+  { -1.1118745474840939e+56, 50, 2.7500000000000000, 0.0 },\n+  { -1.3243260716629503e+54, 50, 3.0000000000000000, 0.0 },\n+  { -2.2519472094129329e+52, 50, 3.2500000000000000, 0.0 },\n+  { -5.1861507201103288e+50, 50, 3.5000000000000000, 0.0 },\n+  { -1.5513212909462263e+49, 50, 3.7500000000000000, 0.0 },\n+  { -5.8276471407900649e+47, 50, 4.0000000000000000, 0.0 },\n+  { -2.6745414086543416e+46, 50, 4.2500000000000000, 0.0 },\n+  { -1.4657308996352946e+45, 50, 4.5000000000000000, 0.0 },\n+  { -9.4102674366690647e+43, 50, 4.7500000000000000, 0.0 },\n+  { -6.9641091882701322e+42, 50, 5.0000000000000000, 0.0 },\n };\n-const double toler007 = 5.0000000000000029e-12;\n+const double toler007 = 2.5000000000000015e-12;\n \n // Test data for n=100.\n-// max(|f - f_GSL|): 2.4840289476811343e+232\n-// max(|f - f_GSL| / |f_GSL|): 9.0555289224453335e-14\n+// max(|f - f_GSL|): 2.4840289476811343e+232 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 2.1411436945786310e-13\n+// mean(f - f_GSL): 1.2420144738405672e+231\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_sph_neumann<double>\n data008[20] =\n {\n-  { -4.2856109460516407e+247, 100, 0.25000000000000000 },\n-  { -1.6911720011753781e+217, 100, 0.50000000000000000 },\n-  { -2.7753107402139484e+199, 100, 0.75000000000000000 },\n-  { -6.6830794632586774e+186, 100, 1.0000000000000000 },\n-  { -1.0906342369729277e+177, 100, 1.2500000000000000 },\n-  { -1.0993184254131119e+169, 100, 1.5000000000000000 },\n-  { -1.9071480498141315e+162, 100, 1.7500000000000000 },\n-  { -2.6559558301924957e+156, 100, 2.0000000000000000 },\n-  { -1.8154136926485787e+151, 100, 2.2500000000000000 },\n-  { -4.3527631662111383e+146, 100, 2.5000000000000000 },\n-  { -2.8809537014100589e+142, 100, 2.7500000000000000 },\n-  { -4.4102229953033134e+138, 100, 3.0000000000000000 },\n-  { -1.3651904154045514e+135, 100, 3.2500000000000000 },\n-  { -7.6980749101080730e+131, 100, 3.5000000000000000 },\n-  { -7.2790553499254927e+128, 100, 3.7500000000000000 },\n-  { -1.0796647795893970e+126, 100, 4.0000000000000000 },\n-  { -2.3785795774445298e+123, 100, 4.2500000000000000 },\n-  { -7.4391596631955861e+120, 100, 4.5000000000000000 },\n-  { -3.1802258278279400e+118, 100, 4.7500000000000000 },\n-  { -1.7997139826259740e+116, 100, 5.0000000000000000 },\n+  { -4.2856109460516407e+247, 100, 0.25000000000000000, 0.0 },\n+  { -1.6911720011753781e+217, 100, 0.50000000000000000, 0.0 },\n+  { -2.7753107402139484e+199, 100, 0.75000000000000000, 0.0 },\n+  { -6.6830794632586774e+186, 100, 1.0000000000000000, 0.0 },\n+  { -1.0906342369729277e+177, 100, 1.2500000000000000, 0.0 },\n+  { -1.0993184254131119e+169, 100, 1.5000000000000000, 0.0 },\n+  { -1.9071480498141315e+162, 100, 1.7500000000000000, 0.0 },\n+  { -2.6559558301924957e+156, 100, 2.0000000000000000, 0.0 },\n+  { -1.8154136926485787e+151, 100, 2.2500000000000000, 0.0 },\n+  { -4.3527631662111383e+146, 100, 2.5000000000000000, 0.0 },\n+  { -2.8809537014100589e+142, 100, 2.7500000000000000, 0.0 },\n+  { -4.4102229953025611e+138, 100, 3.0000000000000000, 0.0 },\n+  { -1.3651904154044740e+135, 100, 3.2500000000000000, 0.0 },\n+  { -7.6980749101063267e+131, 100, 3.5000000000000000, 0.0 },\n+  { -7.2790553499246662e+128, 100, 3.7500000000000000, 0.0 },\n+  { -1.0796647795891517e+126, 100, 4.0000000000000000, 0.0 },\n+  { -2.3785795774441247e+123, 100, 4.2500000000000000, 0.0 },\n+  { -7.4391596631947432e+120, 100, 4.5000000000000000, 0.0 },\n+  { -3.1802258278275794e+118, 100, 4.7500000000000000, 0.0 },\n+  { -1.7997139826255660e+116, 100, 5.0000000000000000, 0.0 },\n };\n-const double toler008 = 5.0000000000000029e-12;\n+const double toler008 = 2.5000000000000014e-11;\n //  sph_neumann\n \n // Test data for n=0.\n-// max(|f - f_GSL|): 1.0165479569224090e-15\n+// max(|f - f_GSL|): 1.0165479569224090e-15 at index 12\n // max(|f - f_GSL| / |f_GSL|): 5.9073915926662418e-13\n+// mean(f - f_GSL): 5.6194198599923690e-17\n+// variance(f - f_GSL): 3.3904740513577990e-33\n+// stddev(f - f_GSL): 5.8227777317684031e-17\n const testcase_sph_neumann<double>\n data009[20] =\n {\n-  { -0.056732437092645263, 0, 5.0000000000000000 },\n-  { 0.083907152907645249, 0, 10.000000000000000 },\n-  { 0.050645860857254747, 0, 15.000000000000000 },\n-  { -0.020404103090669597, 0, 20.000000000000000 },\n-  { -0.039648112474538942, 0, 25.000000000000000 },\n-  { -0.0051417149962528020, 0, 30.000000000000000 },\n-  { 0.025819777288328762, 0, 35.000000000000000 },\n-  { 0.016673451541306544, 0, 40.000000000000000 },\n-  { -0.011673821973727327, 0, 45.000000000000000 },\n-  { -0.019299320569842265, 0, 50.000000000000000 },\n-  { -0.00040230465930828606, 0, 55.000000000000000 },\n-  { 0.015873549673585938, 0, 60.000000000000000 },\n-  { 0.0086531361728949541, 0, 65.000000000000000 },\n-  { -0.0090474171869471404, 0, 70.000000000000000 },\n-  { -0.012290016929663325, 0, 75.000000000000000 },\n-  { 0.0013798405479880944, 0, 80.000000000000000 },\n-  { 0.011580901686988727, 0, 85.000000000000000 },\n-  { 0.0049785957347685574, 0, 90.000000000000000 },\n-  { -0.0076860374841559963, 0, 95.000000000000000 },\n-  { -0.0086231887228768404, 0, 100.00000000000000 },\n+  { -0.056732437092645263, 0, 5.0000000000000000, 0.0 },\n+  { 0.083907152907645249, 0, 10.000000000000000, 0.0 },\n+  { 0.050645860857254747, 0, 15.000000000000000, 0.0 },\n+  { -0.020404103090669597, 0, 20.000000000000000, 0.0 },\n+  { -0.039648112474538942, 0, 25.000000000000000, 0.0 },\n+  { -0.0051417149962528020, 0, 30.000000000000000, 0.0 },\n+  { 0.025819777288328762, 0, 35.000000000000000, 0.0 },\n+  { 0.016673451541306544, 0, 40.000000000000000, 0.0 },\n+  { -0.011673821973727327, 0, 45.000000000000000, 0.0 },\n+  { -0.019299320569842265, 0, 50.000000000000000, 0.0 },\n+  { -0.00040230465930828606, 0, 55.000000000000000, 0.0 },\n+  { 0.015873549673585938, 0, 60.000000000000000, 0.0 },\n+  { 0.0086531361728949541, 0, 65.000000000000000, 0.0 },\n+  { -0.0090474171869471404, 0, 70.000000000000000, 0.0 },\n+  { -0.012290016929663325, 0, 75.000000000000000, 0.0 },\n+  { 0.0013798405479880944, 0, 80.000000000000000, 0.0 },\n+  { 0.011580901686988727, 0, 85.000000000000000, 0.0 },\n+  { 0.0049785957347685574, 0, 90.000000000000000, 0.0 },\n+  { -0.0076860374841559963, 0, 95.000000000000000, 0.0 },\n+  { -0.0086231887228768404, 0, 100.00000000000000, 0.0 },\n };\n const double toler009 = 5.0000000000000028e-11;\n \n // Test data for n=1.\n-// max(|f - f_GSL|): 1.0529771499179219e-15\n+// max(|f - f_GSL|): 1.0486403412279799e-15 at index 14\n // max(|f - f_GSL| / |f_GSL|): 3.5182047773188613e-13\n+// mean(f - f_GSL): 3.4759521649885275e-17\n+// variance(f - f_GSL): 1.2285787353099413e-32\n+// stddev(f - f_GSL): 1.1084127098287629e-16\n const testcase_sph_neumann<double>\n data010[20] =\n {\n-  { 0.18043836751409864, 1, 5.0000000000000000 },\n-  { 0.062792826379701502, 1, 10.000000000000000 },\n-  { -0.039976131953324147, 1, 15.000000000000000 },\n-  { -0.046667467690914864, 1, 20.000000000000000 },\n-  { 0.0037081455049293634, 1, 25.000000000000000 },\n-  { 0.032762996969886965, 1, 30.000000000000000 },\n-  { 0.012971498479556563, 1, 35.000000000000000 },\n-  { -0.018210992723451058, 1, 40.000000000000000 },\n-  { -0.019168385477952129, 1, 45.000000000000000 },\n-  { 0.0048615106626817301, 1, 50.000000000000000 },\n-  { 0.018170052158169303, 1, 55.000000000000000 },\n-  { 0.0053447361795967109, 1, 60.000000000000000 },\n-  { -0.012587316051033977, 1, 65.000000000000000 },\n-  { -0.011184829982069090, 1, 70.000000000000000 },\n-  { 0.0050065549130635621, 1, 75.000000000000000 },\n-  { 0.012440856180892041, 1, 80.000000000000000 },\n-  { 0.0022077237839479508, 1, 85.000000000000000 },\n-  { -0.0098779785318421041, 1, 90.000000000000000 },\n-  { -0.0072731342338976518, 1, 95.000000000000000 },\n-  { 0.0049774245238688201, 1, 100.00000000000000 },\n+  { 0.18043836751409864, 1, 5.0000000000000000, 0.0 },\n+  { 0.062792826379701502, 1, 10.000000000000000, 0.0 },\n+  { -0.039976131953324147, 1, 15.000000000000000, 0.0 },\n+  { -0.046667467690914864, 1, 20.000000000000000, 0.0 },\n+  { 0.0037081455049293634, 1, 25.000000000000000, 0.0 },\n+  { 0.032762996969886965, 1, 30.000000000000000, 0.0 },\n+  { 0.012971498479556563, 1, 35.000000000000000, 0.0 },\n+  { -0.018210992723451058, 1, 40.000000000000000, 0.0 },\n+  { -0.019168385477952129, 1, 45.000000000000000, 0.0 },\n+  { 0.0048615106626817301, 1, 50.000000000000000, 0.0 },\n+  { 0.018170052158169303, 1, 55.000000000000000, 0.0 },\n+  { 0.0053447361795967109, 1, 60.000000000000000, 0.0 },\n+  { -0.012587316051033977, 1, 65.000000000000000, 0.0 },\n+  { -0.011184829982069090, 1, 70.000000000000000, 0.0 },\n+  { 0.0050065549130635621, 1, 75.000000000000000, 0.0 },\n+  { 0.012440856180892041, 1, 80.000000000000000, 0.0 },\n+  { 0.0022077237839479508, 1, 85.000000000000000, 0.0 },\n+  { -0.0098779785318421041, 1, 90.000000000000000, 0.0 },\n+  { -0.0072731342338976518, 1, 95.000000000000000, 0.0 },\n+  { 0.0049774245238688201, 1, 100.00000000000000, 0.0 },\n };\n const double toler010 = 2.5000000000000014e-11;\n \n // Test data for n=2.\n-// max(|f - f_GSL|): 9.7144514654701197e-16\n-// max(|f - f_GSL| / |f_GSL|): 8.9389761338979581e-13\n+// max(|f - f_GSL|): 9.6971042307103517e-16 at index 12\n+// max(|f - f_GSL| / |f_GSL|): 8.9366019038491149e-13\n+// mean(f - f_GSL): -5.2854855908668341e-17\n+// variance(f - f_GSL): 2.8843051158545336e-33\n+// stddev(f - f_GSL): 5.3705727030313382e-17\n const testcase_sph_neumann<double>\n data011[20] =\n {\n-  { 0.16499545760110443, 2, 5.0000000000000000 },\n-  { -0.065069304993734783, 2, 10.000000000000000 },\n-  { -0.058641087247919575, 2, 15.000000000000000 },\n-  { 0.013403982937032370, 2, 20.000000000000000 },\n-  { 0.040093089935130458, 2, 25.000000000000000 },\n-  { 0.0084180146932414986, 2, 30.000000000000000 },\n-  { -0.024707934561509628, 2, 35.000000000000000 },\n-  { -0.018039275995565374, 2, 40.000000000000000 },\n-  { 0.010395929608530518, 2, 45.000000000000000 },\n-  { 0.019591011209603170, 2, 50.000000000000000 },\n-  { 0.0013933984133902479, 2, 55.000000000000000 },\n-  { -0.015606312864606101, 2, 60.000000000000000 },\n-  { -0.0092340892214042153, 2, 65.000000000000000 },\n-  { 0.0085680673305727519, 2, 70.000000000000000 },\n-  { 0.012490279126185866, 2, 75.000000000000000 },\n-  { -0.00091330844120464274, 2, 80.000000000000000 },\n-  { -0.011502982024025860, 2, 85.000000000000000 },\n-  { -0.0053078616858299611, 2, 90.000000000000000 },\n-  { 0.0074563595609802797, 2, 95.000000000000000 },\n-  { 0.0087725114585929052, 2, 100.00000000000000 },\n+  { 0.16499545760110443, 2, 5.0000000000000000, 0.0 },\n+  { -0.065069304993734783, 2, 10.000000000000000, 0.0 },\n+  { -0.058641087247919575, 2, 15.000000000000000, 0.0 },\n+  { 0.013403982937032370, 2, 20.000000000000000, 0.0 },\n+  { 0.040093089935130458, 2, 25.000000000000000, 0.0 },\n+  { 0.0084180146932414986, 2, 30.000000000000000, 0.0 },\n+  { -0.024707934561509628, 2, 35.000000000000000, 0.0 },\n+  { -0.018039275995565374, 2, 40.000000000000000, 0.0 },\n+  { 0.010395929608530518, 2, 45.000000000000000, 0.0 },\n+  { 0.019591011209603170, 2, 50.000000000000000, 0.0 },\n+  { 0.0013933984133902479, 2, 55.000000000000000, 0.0 },\n+  { -0.015606312864606101, 2, 60.000000000000000, 0.0 },\n+  { -0.0092340892214042153, 2, 65.000000000000000, 0.0 },\n+  { 0.0085680673305727519, 2, 70.000000000000000, 0.0 },\n+  { 0.012490279126185866, 2, 75.000000000000000, 0.0 },\n+  { -0.00091330844120464274, 2, 80.000000000000000, 0.0 },\n+  { -0.011502982024025860, 2, 85.000000000000000, 0.0 },\n+  { -0.0053078616858299611, 2, 90.000000000000000, 0.0 },\n+  { 0.0074563595609802797, 2, 95.000000000000000, 0.0 },\n+  { 0.0087725114585929052, 2, 100.00000000000000, 0.0 },\n };\n const double toler011 = 5.0000000000000028e-11;\n \n // Test data for n=5.\n-// max(|f - f_GSL|): 1.1327744298128550e-15\n-// max(|f - f_GSL| / |f_GSL|): 6.2024335299315527e-13\n+// max(|f - f_GSL|): 1.1301723445988898e-15 at index 14\n+// max(|f - f_GSL| / |f_GSL|): 6.1915466104958656e-13\n+// mean(f - f_GSL): 2.4660178413182797e-17\n+// variance(f - f_GSL): 1.4883294310366547e-32\n+// stddev(f - f_GSL): 1.2199710779508892e-16\n const testcase_sph_neumann<double>\n data012[20] =\n {\n-  { -0.32046504674973919, 5, 5.0000000000000000 },\n-  { 0.093833541678691818, 5, 10.000000000000000 },\n-  { 0.020475698281859061, 5, 15.000000000000000 },\n-  { -0.048172347757372780, 5, 20.000000000000000 },\n-  { -0.018309489232548347, 5, 25.000000000000000 },\n-  { 0.026639390496569996, 5, 30.000000000000000 },\n-  { 0.022006038985576210, 5, 35.000000000000000 },\n-  { -0.011268975348057965, 5, 40.000000000000000 },\n-  { -0.021770388372274858, 5, 45.000000000000000 },\n-  { -0.00069711319645853701, 5, 50.000000000000000 },\n-  { 0.017439589450220901, 5, 55.000000000000000 },\n-  { 0.0088699170919343089, 5, 60.000000000000000 },\n-  { -0.010421334444951861, 5, 65.000000000000000 },\n-  { -0.012746769858008553, 5, 70.000000000000000 },\n-  { 0.0026282888028967737, 5, 75.000000000000000 },\n-  { 0.012477658581324189, 5, 80.000000000000000 },\n-  { 0.0040771816818182642, 5, 85.000000000000000 },\n-  { -0.0089777759570579818, 5, 90.000000000000000 },\n-  { -0.0083184557896676149, 5, 95.000000000000000 },\n-  { 0.0037206784862748965, 5, 100.00000000000000 },\n+  { -0.32046504674973919, 5, 5.0000000000000000, 0.0 },\n+  { 0.093833541678691818, 5, 10.000000000000000, 0.0 },\n+  { 0.020475698281859061, 5, 15.000000000000000, 0.0 },\n+  { -0.048172347757372780, 5, 20.000000000000000, 0.0 },\n+  { -0.018309489232548347, 5, 25.000000000000000, 0.0 },\n+  { 0.026639390496569996, 5, 30.000000000000000, 0.0 },\n+  { 0.022006038985576210, 5, 35.000000000000000, 0.0 },\n+  { -0.011268975348057965, 5, 40.000000000000000, 0.0 },\n+  { -0.021770388372274858, 5, 45.000000000000000, 0.0 },\n+  { -0.00069711319645853701, 5, 50.000000000000000, 0.0 },\n+  { 0.017439589450220901, 5, 55.000000000000000, 0.0 },\n+  { 0.0088699170919343089, 5, 60.000000000000000, 0.0 },\n+  { -0.010421334444951861, 5, 65.000000000000000, 0.0 },\n+  { -0.012746769858008553, 5, 70.000000000000000, 0.0 },\n+  { 0.0026282888028967737, 5, 75.000000000000000, 0.0 },\n+  { 0.012477658581324189, 5, 80.000000000000000, 0.0 },\n+  { 0.0040771816818182642, 5, 85.000000000000000, 0.0 },\n+  { -0.0089777759570579818, 5, 90.000000000000000, 0.0 },\n+  { -0.0083184557896676149, 5, 95.000000000000000, 0.0 },\n+  { 0.0037206784862748965, 5, 100.00000000000000, 0.0 },\n };\n const double toler012 = 5.0000000000000028e-11;\n \n // Test data for n=10.\n-// max(|f - f_GSL|): 1.0658141036401503e-14\n+// max(|f - f_GSL|): 1.0658141036401503e-14 at index 0\n // max(|f - f_GSL| / |f_GSL|): 7.3655649039219020e-13\n+// mean(f - f_GSL): -6.1456915945168329e-16\n+// variance(f - f_GSL): 2.1880640749018393e-32\n+// stddev(f - f_GSL): 1.4792106256046972e-16\n const testcase_sph_neumann<double>\n data013[20] =\n {\n-  { -26.656114405718711, 10, 5.0000000000000000 },\n-  { -0.17245367208805784, 10, 10.000000000000000 },\n-  { 0.078461689849642580, 10, 15.000000000000000 },\n-  { -0.036843410496289961, 10, 20.000000000000000 },\n-  { -0.021158339301097475, 10, 25.000000000000000 },\n-  { 0.031219591064754939, 10, 30.000000000000000 },\n-  { 0.012840593422414807, 10, 35.000000000000000 },\n-  { -0.021803068636888072, 10, 40.000000000000000 },\n-  { -0.014071636804469044, 10, 45.000000000000000 },\n-  { 0.013524687511158758, 10, 50.000000000000000 },\n-  { 0.015684932653180595, 10, 55.000000000000000 },\n-  { -0.0056356895567262122, 10, 60.000000000000000 },\n-  { -0.015364490270315362, 10, 65.000000000000000 },\n-  { -0.0014525575672261295, 10, 70.000000000000000 },\n-  { 0.012648951699549433, 10, 75.000000000000000 },\n-  { 0.0068571608061120367, 10, 80.000000000000000 },\n-  { -0.0080151152941401460, 10, 85.000000000000000 },\n-  { -0.0098139742219019149, 10, 90.000000000000000 },\n-  { 0.0025002854072314951, 10, 95.000000000000000 },\n-  { 0.010025777373636155, 10, 100.00000000000000 },\n+  { -26.656114405718711, 10, 5.0000000000000000, 0.0 },\n+  { -0.17245367208805784, 10, 10.000000000000000, 0.0 },\n+  { 0.078461689849642580, 10, 15.000000000000000, 0.0 },\n+  { -0.036843410496289961, 10, 20.000000000000000, 0.0 },\n+  { -0.021158339301097475, 10, 25.000000000000000, 0.0 },\n+  { 0.031219591064754939, 10, 30.000000000000000, 0.0 },\n+  { 0.012840593422414807, 10, 35.000000000000000, 0.0 },\n+  { -0.021803068636888072, 10, 40.000000000000000, 0.0 },\n+  { -0.014071636804469044, 10, 45.000000000000000, 0.0 },\n+  { 0.013524687511158758, 10, 50.000000000000000, 0.0 },\n+  { 0.015684932653180595, 10, 55.000000000000000, 0.0 },\n+  { -0.0056356895567262122, 10, 60.000000000000000, 0.0 },\n+  { -0.015364490270315362, 10, 65.000000000000000, 0.0 },\n+  { -0.0014525575672261295, 10, 70.000000000000000, 0.0 },\n+  { 0.012648951699549433, 10, 75.000000000000000, 0.0 },\n+  { 0.0068571608061120367, 10, 80.000000000000000, 0.0 },\n+  { -0.0080151152941401460, 10, 85.000000000000000, 0.0 },\n+  { -0.0098139742219019149, 10, 90.000000000000000, 0.0 },\n+  { 0.0025002854072314951, 10, 95.000000000000000, 0.0 },\n+  { 0.010025777373636155, 10, 100.00000000000000, 0.0 },\n };\n const double toler013 = 5.0000000000000028e-11;\n \n // Test data for n=20.\n-// max(|f - f_GSL|): 1.0728836059570312e-06\n-// max(|f - f_GSL| / |f_GSL|): 1.0496253232407487e-11\n+// max(|f - f_GSL|): 8.3446502685546875e-07 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 1.0502991318257211e-11\n+// mean(f - f_GSL): -4.1723296986858874e-08\n+// variance(f - f_GSL): 9.6445067152075506e-17\n+// stddev(f - f_GSL): 9.8206449458309775e-09\n const testcase_sph_neumann<double>\n data014[20] =\n {\n-  { -926795140.30575466, 20, 5.0000000000000000 },\n-  { -1211.2106053526036, 20, 10.000000000000000 },\n-  { -1.5559965765652175, 20, 15.000000000000000 },\n-  { -0.093401132250914398, 20, 20.000000000000000 },\n-  { 0.044031985675276462, 20, 25.000000000000000 },\n-  { -0.036078033606613907, 20, 30.000000000000000 },\n-  { 0.029828405631319645, 20, 35.000000000000000 },\n-  { -0.0048414810986760759, 20, 40.000000000000000 },\n-  { -0.020504694681516944, 20, 45.000000000000000 },\n-  { 0.013759531302541216, 20, 50.000000000000000 },\n-  { 0.012783038861734196, 20, 55.000000000000000 },\n-  { -0.013117009421906418, 20, 60.000000000000000 },\n-  { -0.010338106075674407, 20, 65.000000000000000 },\n-  { 0.010538610814111244, 20, 70.000000000000000 },\n-  { 0.010200029094273744, 20, 75.000000000000000 },\n-  { -0.0073123450945617122, 20, 80.000000000000000 },\n-  { -0.010581510354950906, 20, 85.000000000000000 },\n-  { 0.0036866374015298723, 20, 90.000000000000000 },\n-  { 0.010498384318338270, 20, 95.000000000000000 },\n-  { 5.6317293788334978e-05, 20, 100.00000000000000 },\n+  { -926795140.30575466, 20, 5.0000000000000000, 0.0 },\n+  { -1211.2106053526036, 20, 10.000000000000000, 0.0 },\n+  { -1.5559965765652175, 20, 15.000000000000000, 0.0 },\n+  { -0.093401132250914398, 20, 20.000000000000000, 0.0 },\n+  { 0.044031985675276462, 20, 25.000000000000000, 0.0 },\n+  { -0.036078033606613907, 20, 30.000000000000000, 0.0 },\n+  { 0.029828405631319645, 20, 35.000000000000000, 0.0 },\n+  { -0.0048414810986760759, 20, 40.000000000000000, 0.0 },\n+  { -0.020504694681516944, 20, 45.000000000000000, 0.0 },\n+  { 0.013759531302541216, 20, 50.000000000000000, 0.0 },\n+  { 0.012783038861734196, 20, 55.000000000000000, 0.0 },\n+  { -0.013117009421906418, 20, 60.000000000000000, 0.0 },\n+  { -0.010338106075674407, 20, 65.000000000000000, 0.0 },\n+  { 0.010538610814111244, 20, 70.000000000000000, 0.0 },\n+  { 0.010200029094273744, 20, 75.000000000000000, 0.0 },\n+  { -0.0073123450945617122, 20, 80.000000000000000, 0.0 },\n+  { -0.010581510354950906, 20, 85.000000000000000, 0.0 },\n+  { 0.0036866374015298723, 20, 90.000000000000000, 0.0 },\n+  { 0.010498384318338270, 20, 95.000000000000000, 0.0 },\n+  { 5.6317293788334978e-05, 20, 100.00000000000000, 0.0 },\n };\n const double toler014 = 1.0000000000000007e-09;\n \n // Test data for n=50.\n-// max(|f - f_GSL|): 5.1003129618557667e+29\n-// max(|f - f_GSL| / |f_GSL|): 4.9443320929884463e-13\n+// max(|f - f_GSL|): 2.1663950687494155e+29 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 4.4985159073786982e-13\n+// mean(f - f_GSL): -1.0831975343747075e+28\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_sph_neumann<double>\n data015[20] =\n {\n-  { -6.9641091882698388e+42, 50, 5.0000000000000000 },\n-  { -4.5282272723512023e+27, 50, 10.000000000000000 },\n-  { -9.0004902645887037e+18, 50, 15.000000000000000 },\n-  { -9542541667002.5117, 50, 20.000000000000000 },\n-  { -363518140.71026671, 50, 25.000000000000000 },\n-  { -152551.57233157745, 50, 30.000000000000000 },\n-  { -386.26599186208625, 50, 35.000000000000000 },\n-  { -4.3290507947291035, 50, 40.000000000000000 },\n-  { -0.19968460851503758, 50, 45.000000000000000 },\n-  { -0.041900001504607758, 50, 50.000000000000000 },\n-  { 0.010696040672421902, 50, 55.000000000000000 },\n-  { 0.0078198768555267188, 50, 60.000000000000000 },\n-  { -0.010088474938191242, 50, 65.000000000000000 },\n-  { 0.0062423671279824801, 50, 70.000000000000000 },\n-  { 0.0011284242794941733, 50, 75.000000000000000 },\n-  { -0.0093934266037485562, 50, 80.000000000000000 },\n-  { 0.013108079602843424, 50, 85.000000000000000 },\n-  { -0.0075396607225722626, 50, 90.000000000000000 },\n-  { -0.0042605703552836558, 50, 95.000000000000000 },\n-  { 0.010747822973682470, 50, 100.00000000000000 },\n+  { -6.9641091882701322e+42, 50, 5.0000000000000000, 0.0 },\n+  { -4.5282272723513309e+27, 50, 10.000000000000000, 0.0 },\n+  { -9.0004902645887672e+18, 50, 15.000000000000000, 0.0 },\n+  { -9542541667002.5762, 50, 20.000000000000000, 0.0 },\n+  { -363518140.71027178, 50, 25.000000000000000, 0.0 },\n+  { -152551.57233157742, 50, 30.000000000000000, 0.0 },\n+  { -386.26599186208688, 50, 35.000000000000000, 0.0 },\n+  { -4.3290507947291097, 50, 40.000000000000000, 0.0 },\n+  { -0.19968460851503717, 50, 45.000000000000000, 0.0 },\n+  { -0.041900001504607758, 50, 50.000000000000000, 0.0 },\n+  { 0.010696040672421926, 50, 55.000000000000000, 0.0 },\n+  { 0.0078198768555268281, 50, 60.000000000000000, 0.0 },\n+  { -0.010088474938191183, 50, 65.000000000000000, 0.0 },\n+  { 0.0062423671279823656, 50, 70.000000000000000, 0.0 },\n+  { 0.0011284242794942282, 50, 75.000000000000000, 0.0 },\n+  { -0.0093934266037486308, 50, 80.000000000000000, 0.0 },\n+  { 0.013108079602843421, 50, 85.000000000000000, 0.0 },\n+  { -0.0075396607225721932, 50, 90.000000000000000, 0.0 },\n+  { -0.0042605703552837304, 50, 95.000000000000000, 0.0 },\n+  { 0.010747822973682467, 50, 100.00000000000000, 0.0 },\n };\n const double toler015 = 2.5000000000000014e-11;\n \n // Test data for n=100.\n-// max(|f - f_GSL|): 3.0796490204944808e+102\n-// max(|f - f_GSL| / |f_GSL|): 4.6209003006798690e-14\n+// max(|f - f_GSL|): 3.7725700501057390e+103 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 2.0962053340286959e-13\n+// mean(f - f_GSL): -1.8862850250528694e+102\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n const testcase_sph_neumann<double>\n data016[20] =\n {\n-  { -1.7997139826259740e+116, 100, 5.0000000000000000 },\n-  { -8.5732263093296268e+85, 100, 10.000000000000000 },\n-  { -1.9270658593711677e+68, 100, 15.000000000000000 },\n-  { -7.2208893582952385e+55, 100, 20.000000000000000 },\n-  { -2.0868752613007946e+46, 100, 25.000000000000000 },\n-  { -4.2496124023612646e+38, 100, 30.000000000000000 },\n-  { -1.7042898348910271e+32, 100, 35.000000000000000 },\n-  { -6.3021565260724554e+26, 100, 40.000000000000000 },\n-  { -1.3199917400494367e+22, 100, 45.000000000000000 },\n-  { -1.1256928913265988e+18, 100, 50.000000000000000 },\n-  { -309801083340343.25, 100, 55.000000000000000 },\n-  { -232585620046.64737, 100, 60.000000000000000 },\n-  { -421135935.93756074, 100, 65.000000000000000 },\n-  { -1680637.4531202621, 100, 70.000000000000000 },\n-  { -13868.302591128844, 100, 75.000000000000000 },\n-  { -227.24385709173322, 100, 80.000000000000000 },\n-  { -7.2807038787138731, 100, 85.000000000000000 },\n-  { -0.46648154448250878, 100, 90.000000000000000 },\n-  { -0.067270772720654556, 100, 95.000000000000000 },\n-  { -0.022983850491562267, 100, 100.00000000000000 },\n+  { -1.7997139826255660e+116, 100, 5.0000000000000000, 0.0 },\n+  { -8.5732263093288939e+85, 100, 10.000000000000000, 0.0 },\n+  { -1.9270658593710037e+68, 100, 15.000000000000000, 0.0 },\n+  { -7.2208893582950327e+55, 100, 20.000000000000000, 0.0 },\n+  { -2.0868752613007361e+46, 100, 25.000000000000000, 0.0 },\n+  { -4.2496124023610848e+38, 100, 30.000000000000000, 0.0 },\n+  { -1.7042898348910030e+32, 100, 35.000000000000000, 0.0 },\n+  { -6.3021565260722767e+26, 100, 40.000000000000000, 0.0 },\n+  { -1.3199917400493998e+22, 100, 45.000000000000000, 0.0 },\n+  { -1.1256928913265911e+18, 100, 50.000000000000000, 0.0 },\n+  { -309801083340345.56, 100, 55.000000000000000, 0.0 },\n+  { -232585620046.64404, 100, 60.000000000000000, 0.0 },\n+  { -421135935.93755186, 100, 65.000000000000000, 0.0 },\n+  { -1680637.4531202628, 100, 70.000000000000000, 0.0 },\n+  { -13868.302591128748, 100, 75.000000000000000, 0.0 },\n+  { -227.24385709173205, 100, 80.000000000000000, 0.0 },\n+  { -7.2807038787138563, 100, 85.000000000000000, 0.0 },\n+  { -0.46648154448250850, 100, 90.000000000000000, 0.0 },\n+  { -0.067270772720654515, 100, 95.000000000000000, 0.0 },\n+  { -0.022983850491562270, 100, 100.00000000000000, 0.0 },\n };\n-const double toler016 = 2.5000000000000015e-12;\n+const double toler016 = 2.5000000000000014e-11;\n \n-template<typename Tp, unsigned int Num>\n+template<typename Ret, unsigned int Num>\n   void\n-  test(const testcase_sph_neumann<Tp> (&data)[Num], Tp toler)\n+  test(const testcase_sph_neumann<Ret> (&data)[Num], Ret toler)\n   {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n+    bool test __attribute__((unused)) = true;\n+    const Ret eps = std::numeric_limits<Ret>::epsilon();\n+    Ret max_abs_diff = -Ret(1);\n+    Ret max_abs_frac = -Ret(1);\n     unsigned int num_datum = Num;\n     for (unsigned int i = 0; i < num_datum; ++i)\n       {\n-\tconst Tp f = std::sph_neumann(data[i].n, data[i].x);\n-\tconst Tp f0 = data[i].f0;\n-\tconst Tp diff = f - f0;\n+\tconst Ret f = std::sph_neumann(data[i].n, data[i].x);\n+\tconst Ret f0 = data[i].f0;\n+\tconst Ret diff = f - f0;\n \tif (std::abs(diff) > max_abs_diff)\n \t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n+\tif (std::abs(f0) > Ret(10) * eps\n+\t && std::abs(f) > Ret(10) * eps)\n \t  {\n-\t    const Tp frac = diff / f0;\n+\t    const Ret frac = diff / f0;\n \t    if (std::abs(frac) > max_abs_frac)\n \t      max_abs_frac = std::abs(frac);\n \t  }"}, {"sha": "af0f2cb85655af6c98ea30518e0e4a2afe381f74", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/01_assoc_laguerre/check_value.cc", "status": "modified", "additions": 2157, "deletions": 3410, "changes": 5567, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F01_assoc_laguerre%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F01_assoc_laguerre%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F01_assoc_laguerre%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}, {"sha": "538ffacf205d760d0c9625cc9db6fb2cbeddece4", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/02_assoc_legendre/check_value.cc", "status": "modified", "additions": 1916, "deletions": 2609, "changes": 4525, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F02_assoc_legendre%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F02_assoc_legendre%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F02_assoc_legendre%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}, {"sha": "af22a795922e572db44bc6b5207522573ab02896", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/03_beta/check_value.cc", "status": "modified", "additions": 242, "deletions": 406, "changes": 648, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F03_beta%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F03_beta%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F03_beta%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -1,6 +1,7 @@\n-// 2007-02-04  Edward Smith-Rowland <3dw4rd@verizon.net>\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n //\n-// Copyright (C) 2007-2017 Free Software Foundation, Inc.\n+// Copyright (C) 2016-2017 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,448 +19,283 @@\n // <http://www.gnu.org/licenses/>.\n \n //  beta\n-\n-\n //  Compare against values generated by the GNU Scientific Library.\n //  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n-\n+#include <limits>\n #include <tr1/cmath>\n #if defined(__TEST_DEBUG)\n-#include <iostream>\n-#define VERIFY(A) \\\n-if (!(A)) \\\n-  { \\\n-    std::cout << \"line \" << __LINE__ \\\n-      << \"  max_abs_frac = \" << max_abs_frac \\\n-      << std::endl; \\\n-  }\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n #else\n-#include <testsuite_hooks.h>\n+#  include <testsuite_hooks.h>\n #endif\n-#include \"../testcase.h\"\n-\n+#include <specfun_testcase.h>\n \n // Test data for x=10.000000000000000.\n-testcase_beta<double> data001[] = {\n-  { 1.0825088224469029e-06, 10.000000000000000, 10.000000000000000 },\n-  { 4.9925087406346778e-09, 10.000000000000000, 20.000000000000000 },\n-  { 1.5729567312509485e-10, 10.000000000000000, 30.000000000000000 },\n-  { 1.2168673582561288e-11, 10.000000000000000, 40.000000000000000 },\n-  { 1.5916380099863291e-12, 10.000000000000000, 50.000000000000000 },\n-  { 2.9408957938463963e-13, 10.000000000000000, 60.000000000000000 },\n-  { 6.9411637980691676e-14, 10.000000000000000, 70.000000000000000 },\n-  { 1.9665612972502651e-14, 10.000000000000000, 80.000000000000000 },\n-  { 6.4187824828154399e-15, 10.000000000000000, 90.000000000000000 },\n-  { 2.3455339739604842e-15, 10.000000000000000, 100.00000000000000 },\n-};\n-\n-// Test function for x=10.000000000000000.\n-template <typename Tp>\n-void test001()\n+// max(|f - f_GSL|): 3.5542916945637908e-26 at index 4\n+// max(|f - f_GSL| / |f_GSL|): 2.2331030499795109e-14\n+// mean(f - f_GSL): -1.0876419730734700e-27\n+// variance(f - f_GSL): 1.4090082527689930e-55\n+// stddev(f - f_GSL): 3.7536758687571747e-28\n+const testcase_beta<double>\n+data001[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data001)\n-                         / sizeof(testcase_beta<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::beta(Tp(data001[i].x), Tp(data001[i].y));\n-      const Tp f0 = data001[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(5.0000000000000029e-12));\n-}\n-\n-// Test data for x=20.000000000000000.\n-testcase_beta<double> data002[] = {\n-  { 4.9925087406346778e-09, 20.000000000000000, 10.000000000000000 },\n-  { 7.2544445519248436e-13, 20.000000000000000, 20.000000000000000 },\n-  { 1.7681885473062028e-15, 20.000000000000000, 30.000000000000000 },\n-  { 1.7891885039182335e-17, 20.000000000000000, 40.000000000000000 },\n-  { 4.3240677875623635e-19, 20.000000000000000, 50.000000000000000 },\n-  { 1.8857342309689050e-20, 20.000000000000000, 60.000000000000000 },\n-  { 1.2609804003539998e-21, 20.000000000000000, 70.000000000000000 },\n-  { 1.1660809542079041e-22, 20.000000000000000, 80.000000000000000 },\n-  { 1.3907944279729071e-23, 20.000000000000000, 90.000000000000000 },\n-  { 2.0365059099917614e-24, 20.000000000000000, 100.00000000000000 },\n+  { 1.0825088224469029e-06, 10.000000000000000, 10.000000000000000, 0.0 },\n+  { 4.9925087406346778e-09, 10.000000000000000, 20.000000000000000, 0.0 },\n+  { 1.5729567312509485e-10, 10.000000000000000, 30.000000000000000, 0.0 },\n+  { 1.2168673582561288e-11, 10.000000000000000, 40.000000000000000, 0.0 },\n+  { 1.5916380099863291e-12, 10.000000000000000, 50.000000000000000, 0.0 },\n+  { 2.9408957938463963e-13, 10.000000000000000, 60.000000000000000, 0.0 },\n+  { 6.9411637980691676e-14, 10.000000000000000, 70.000000000000000, 0.0 },\n+  { 1.9665612972502651e-14, 10.000000000000000, 80.000000000000000, 0.0 },\n+  { 6.4187824828154399e-15, 10.000000000000000, 90.000000000000000, 0.0 },\n+  { 2.3455339739604842e-15, 10.000000000000000, 100.00000000000000, 0.0 },\n };\n+const double toler001 = 2.5000000000000015e-12;\n \n-// Test function for x=20.000000000000000.\n-template <typename Tp>\n-void test002()\n+// Test data for x=20.000000000000000.\n+// max(|f - f_GSL|): 1.9721522630525295e-31 at index 2\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): 1.9831607786682398e-32\n+// variance(f - f_GSL): 4.8554947092912269e-65\n+// stddev(f - f_GSL): 6.9681379932455613e-33\n+const testcase_beta<double>\n+data002[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data002)\n-                         / sizeof(testcase_beta<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::beta(Tp(data002[i].x), Tp(data002[i].y));\n-      const Tp f0 = data002[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-}\n-\n-// Test data for x=30.000000000000000.\n-testcase_beta<double> data003[] = {\n-  { 1.5729567312509485e-10, 30.000000000000000, 10.000000000000000 },\n-  { 1.7681885473062028e-15, 30.000000000000000, 20.000000000000000 },\n-  { 5.6370779640482451e-19, 30.000000000000000, 30.000000000000000 },\n-  { 1.0539424603796547e-21, 30.000000000000000, 40.000000000000000 },\n-  { 6.0118197777273836e-24, 30.000000000000000, 50.000000000000000 },\n-  { 7.4279528553260165e-26, 30.000000000000000, 60.000000000000000 },\n-  { 1.6212207780604767e-27, 30.000000000000000, 70.000000000000000 },\n-  { 5.4783729715317616e-29, 30.000000000000000, 80.000000000000000 },\n-  { 2.6183005659681346e-30, 30.000000000000000, 90.000000000000000 },\n-  { 1.6587948222122229e-31, 30.000000000000000, 100.00000000000000 },\n+  { 4.9925087406346778e-09, 20.000000000000000, 10.000000000000000, 0.0 },\n+  { 7.2544445519248436e-13, 20.000000000000000, 20.000000000000000, 0.0 },\n+  { 1.7681885473062028e-15, 20.000000000000000, 30.000000000000000, 0.0 },\n+  { 1.7891885039182335e-17, 20.000000000000000, 40.000000000000000, 0.0 },\n+  { 4.3240677875623635e-19, 20.000000000000000, 50.000000000000000, 0.0 },\n+  { 1.8857342309689053e-20, 20.000000000000000, 60.000000000000000, 0.0 },\n+  { 1.2609804003539998e-21, 20.000000000000000, 70.000000000000000, 0.0 },\n+  { 1.1660809542079041e-22, 20.000000000000000, 80.000000000000000, 0.0 },\n+  { 1.3907944279729071e-23, 20.000000000000000, 90.000000000000000, 0.0 },\n+  { 2.0365059099917614e-24, 20.000000000000000, 100.00000000000000, 0.0 },\n };\n+const double toler002 = 2.5000000000000020e-13;\n \n-// Test function for x=30.000000000000000.\n-template <typename Tp>\n-void test003()\n+// Test data for x=30.000000000000000.\n+// max(|f - f_GSL|): 2.5849394142282115e-26 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 1.6433633315345226e-16\n+// mean(f - f_GSL): 2.5849591357601703e-27\n+// variance(f - f_GSL): 8.2493996710493413e-55\n+// stddev(f - f_GSL): 9.0826205860694966e-28\n+const testcase_beta<double>\n+data003[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data003)\n-                         / sizeof(testcase_beta<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::beta(Tp(data003[i].x), Tp(data003[i].y));\n-      const Tp f0 = data003[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(5.0000000000000039e-13));\n-}\n-\n-// Test data for x=40.000000000000000.\n-testcase_beta<double> data004[] = {\n-  { 1.2168673582561288e-11, 40.000000000000000, 10.000000000000000 },\n-  { 1.7891885039182335e-17, 40.000000000000000, 20.000000000000000 },\n-  { 1.0539424603796547e-21, 40.000000000000000, 30.000000000000000 },\n-  { 4.6508509140090659e-25, 40.000000000000000, 40.000000000000000 },\n-  { 7.5161712118557719e-28, 40.000000000000000, 50.000000000000000 },\n-  { 3.0311331979886071e-30, 40.000000000000000, 60.000000000000000 },\n-  { 2.4175035070466313e-32, 40.000000000000000, 70.000000000000000 },\n-  { 3.2734839142758369e-34, 40.000000000000000, 80.000000000000000 },\n-  { 6.7690629601315579e-36, 40.000000000000000, 90.000000000000000 },\n-  { 1.9797337118812366e-37, 40.000000000000000, 100.00000000000000 },\n+  { 1.5729567312509485e-10, 30.000000000000000, 10.000000000000000, 0.0 },\n+  { 1.7681885473062028e-15, 30.000000000000000, 20.000000000000000, 0.0 },\n+  { 5.6370779640482451e-19, 30.000000000000000, 30.000000000000000, 0.0 },\n+  { 1.0539424603796547e-21, 30.000000000000000, 40.000000000000000, 0.0 },\n+  { 6.0118197777273843e-24, 30.000000000000000, 50.000000000000000, 0.0 },\n+  { 7.4279528553260153e-26, 30.000000000000000, 60.000000000000000, 0.0 },\n+  { 1.6212207780604767e-27, 30.000000000000000, 70.000000000000000, 0.0 },\n+  { 5.4783729715317616e-29, 30.000000000000000, 80.000000000000000, 0.0 },\n+  { 2.6183005659681346e-30, 30.000000000000000, 90.000000000000000, 0.0 },\n+  { 1.6587948222122229e-31, 30.000000000000000, 100.00000000000000, 0.0 },\n };\n+const double toler003 = 2.5000000000000020e-13;\n \n-// Test function for x=40.000000000000000.\n-template <typename Tp>\n-void test004()\n+// Test data for x=40.000000000000000.\n+// max(|f - f_GSL|): 3.9012149246802907e-41 at index 4\n+// max(|f - f_GSL| / |f_GSL|): 0.0000000000000000\n+// mean(f - f_GSL): -3.9072897597887440e-42\n+// variance(f - f_GSL): 1.8848041017931125e-84\n+// stddev(f - f_GSL): 1.3728816780018271e-42\n+const testcase_beta<double>\n+data004[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data004)\n-                         / sizeof(testcase_beta<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::beta(Tp(data004[i].x), Tp(data004[i].y));\n-      const Tp f0 = data004[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(2.5000000000000015e-12));\n-}\n-\n-// Test data for x=50.000000000000000.\n-testcase_beta<double> data005[] = {\n-  { 1.5916380099863291e-12, 50.000000000000000, 10.000000000000000 },\n-  { 4.3240677875623635e-19, 50.000000000000000, 20.000000000000000 },\n-  { 6.0118197777273836e-24, 50.000000000000000, 30.000000000000000 },\n-  { 7.5161712118557719e-28, 50.000000000000000, 40.000000000000000 },\n-  { 3.9646612085674138e-31, 50.000000000000000, 50.000000000000000 },\n-  { 5.8425643906418403e-34, 50.000000000000000, 60.000000000000000 },\n-  { 1.8672362180783552e-36, 50.000000000000000, 70.000000000000000 },\n-  { 1.0939382296458962e-38, 50.000000000000000, 80.000000000000000 },\n-  { 1.0442781609881063e-40, 50.000000000000000, 90.000000000000000 },\n-  { 1.4904121110954370e-42, 50.000000000000000, 100.00000000000000 },\n+  { 1.2168673582561288e-11, 40.000000000000000, 10.000000000000000, 0.0 },\n+  { 1.7891885039182335e-17, 40.000000000000000, 20.000000000000000, 0.0 },\n+  { 1.0539424603796547e-21, 40.000000000000000, 30.000000000000000, 0.0 },\n+  { 4.6508509140090659e-25, 40.000000000000000, 40.000000000000000, 0.0 },\n+  { 7.5161712118557728e-28, 40.000000000000000, 50.000000000000000, 0.0 },\n+  { 3.0311331979886071e-30, 40.000000000000000, 60.000000000000000, 0.0 },\n+  { 2.4175035070466313e-32, 40.000000000000000, 70.000000000000000, 0.0 },\n+  { 3.2734839142758369e-34, 40.000000000000000, 80.000000000000000, 0.0 },\n+  { 6.7690629601315579e-36, 40.000000000000000, 90.000000000000000, 0.0 },\n+  { 1.9797337118810115e-37, 40.000000000000000, 100.00000000000000, 0.0 },\n };\n+const double toler004 = 2.5000000000000020e-13;\n \n-// Test function for x=50.000000000000000.\n-template <typename Tp>\n-void test005()\n+// Test data for x=50.000000000000000.\n+// max(|f - f_GSL|): 3.5542916945637908e-26 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 2.2331030499795109e-14\n+// mean(f - f_GSL): -3.5542916415910235e-27\n+// variance(f - f_GSL): 1.5596282806770138e-54\n+// stddev(f - f_GSL): 1.2488507839918322e-27\n+const testcase_beta<double>\n+data005[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data005)\n-                         / sizeof(testcase_beta<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::beta(Tp(data005[i].x), Tp(data005[i].y));\n-      const Tp f0 = data005[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-}\n-\n-// Test data for x=60.000000000000000.\n-testcase_beta<double> data006[] = {\n-  { 2.9408957938463963e-13, 60.000000000000000, 10.000000000000000 },\n-  { 1.8857342309689050e-20, 60.000000000000000, 20.000000000000000 },\n-  { 7.4279528553260165e-26, 60.000000000000000, 30.000000000000000 },\n-  { 3.0311331979886071e-30, 60.000000000000000, 40.000000000000000 },\n-  { 5.8425643906418403e-34, 60.000000000000000, 50.000000000000000 },\n-  { 3.4501231469782229e-37, 60.000000000000000, 60.000000000000000 },\n-  { 4.7706855386086599e-40, 60.000000000000000, 70.000000000000000 },\n-  { 1.2902663809722593e-42, 60.000000000000000, 80.000000000000000 },\n-  { 6.0105571058570508e-45, 60.000000000000000, 90.000000000000000 },\n-  { 4.3922898898347209e-47, 60.000000000000000, 100.00000000000000 },\n+  { 1.5916380099863291e-12, 50.000000000000000, 10.000000000000000, 0.0 },\n+  { 4.3240677875623635e-19, 50.000000000000000, 20.000000000000000, 0.0 },\n+  { 6.0118197777273843e-24, 50.000000000000000, 30.000000000000000, 0.0 },\n+  { 7.5161712118557728e-28, 50.000000000000000, 40.000000000000000, 0.0 },\n+  { 3.9646612085674138e-31, 50.000000000000000, 50.000000000000000, 0.0 },\n+  { 5.8425643906418403e-34, 50.000000000000000, 60.000000000000000, 0.0 },\n+  { 1.8672362180783552e-36, 50.000000000000000, 70.000000000000000, 0.0 },\n+  { 1.0939382296458963e-38, 50.000000000000000, 80.000000000000000, 0.0 },\n+  { 1.0442781609879874e-40, 50.000000000000000, 90.000000000000000, 0.0 },\n+  { 1.4904121110954370e-42, 50.000000000000000, 100.00000000000000, 0.0 },\n };\n+const double toler005 = 2.5000000000000015e-12;\n \n-// Test function for x=60.000000000000000.\n-template <typename Tp>\n-void test006()\n+// Test data for x=60.000000000000000.\n+// max(|f - f_GSL|): 9.0876776281460560e-28 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 3.0901052826017635e-15\n+// mean(f - f_GSL): -9.0876709777057221e-29\n+// variance(f - f_GSL): 1.0195773308522824e-57\n+// stddev(f - f_GSL): 3.1930821017510377e-29\n+const testcase_beta<double>\n+data006[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data006)\n-                         / sizeof(testcase_beta<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::beta(Tp(data006[i].x), Tp(data006[i].y));\n-      const Tp f0 = data006[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(1.0000000000000008e-12));\n-}\n-\n-// Test data for x=70.000000000000000.\n-testcase_beta<double> data007[] = {\n-  { 6.9411637980691676e-14, 70.000000000000000, 10.000000000000000 },\n-  { 1.2609804003539998e-21, 70.000000000000000, 20.000000000000000 },\n-  { 1.6212207780604767e-27, 70.000000000000000, 30.000000000000000 },\n-  { 2.4175035070466313e-32, 70.000000000000000, 40.000000000000000 },\n-  { 1.8672362180783552e-36, 70.000000000000000, 50.000000000000000 },\n-  { 4.7706855386086599e-40, 70.000000000000000, 60.000000000000000 },\n-  { 3.0453137143486369e-43, 70.000000000000000, 70.000000000000000 },\n-  { 4.0192274082013779e-46, 70.000000000000000, 80.000000000000000 },\n-  { 9.5865870063501807e-49, 70.000000000000000, 90.000000000000000 },\n-  { 3.7409127305819802e-51, 70.000000000000000, 100.00000000000000 },\n+  { 2.9408957938463963e-13, 60.000000000000000, 10.000000000000000, 0.0 },\n+  { 1.8857342309689053e-20, 60.000000000000000, 20.000000000000000, 0.0 },\n+  { 7.4279528553260153e-26, 60.000000000000000, 30.000000000000000, 0.0 },\n+  { 3.0311331979886071e-30, 60.000000000000000, 40.000000000000000, 0.0 },\n+  { 5.8425643906418403e-34, 60.000000000000000, 50.000000000000000, 0.0 },\n+  { 3.4501231469782229e-37, 60.000000000000000, 60.000000000000000, 0.0 },\n+  { 4.7706855386086599e-40, 60.000000000000000, 70.000000000000000, 0.0 },\n+  { 1.2902663809721126e-42, 60.000000000000000, 80.000000000000000, 0.0 },\n+  { 6.0105571058570508e-45, 60.000000000000000, 90.000000000000000, 0.0 },\n+  { 4.3922898898347209e-47, 60.000000000000000, 100.00000000000000, 0.0 },\n };\n+const double toler006 = 2.5000000000000020e-13;\n \n-// Test function for x=70.000000000000000.\n-template <typename Tp>\n-void test007()\n+// Test data for x=70.000000000000000.\n+// max(|f - f_GSL|): 1.7670484276950664e-28 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 2.5457523825998871e-15\n+// mean(f - f_GSL): -1.7670492778129898e-29\n+// variance(f - f_GSL): 3.8548927780486536e-59\n+// stddev(f - f_GSL): 6.2087782840496516e-30\n+const testcase_beta<double>\n+data007[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data007)\n-                         / sizeof(testcase_beta<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::beta(Tp(data007[i].x), Tp(data007[i].y));\n-      const Tp f0 = data007[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(1.0000000000000008e-12));\n-}\n-\n-// Test data for x=80.000000000000000.\n-testcase_beta<double> data008[] = {\n-  { 1.9665612972502651e-14, 80.000000000000000, 10.000000000000000 },\n-  { 1.1660809542079041e-22, 80.000000000000000, 20.000000000000000 },\n-  { 5.4783729715317616e-29, 80.000000000000000, 30.000000000000000 },\n-  { 3.2734839142758369e-34, 80.000000000000000, 40.000000000000000 },\n-  { 1.0939382296458962e-38, 80.000000000000000, 50.000000000000000 },\n-  { 1.2902663809722593e-42, 80.000000000000000, 60.000000000000000 },\n-  { 4.0192274082013779e-46, 80.000000000000000, 70.000000000000000 },\n-  { 2.7160590828669411e-49, 80.000000000000000, 80.000000000000000 },\n-  { 3.4593773902125368e-52, 80.000000000000000, 90.000000000000000 },\n-  { 7.4807039968503468e-55, 80.000000000000000, 100.00000000000000 },\n+  { 6.9411637980691676e-14, 70.000000000000000, 10.000000000000000, 0.0 },\n+  { 1.2609804003539998e-21, 70.000000000000000, 20.000000000000000, 0.0 },\n+  { 1.6212207780604767e-27, 70.000000000000000, 30.000000000000000, 0.0 },\n+  { 2.4175035070466313e-32, 70.000000000000000, 40.000000000000000, 0.0 },\n+  { 1.8672362180783552e-36, 70.000000000000000, 50.000000000000000, 0.0 },\n+  { 4.7706855386086599e-40, 70.000000000000000, 60.000000000000000, 0.0 },\n+  { 3.0453137143482908e-43, 70.000000000000000, 70.000000000000000, 0.0 },\n+  { 4.0192274082013779e-46, 70.000000000000000, 80.000000000000000, 0.0 },\n+  { 9.5865870063501807e-49, 70.000000000000000, 90.000000000000000, 0.0 },\n+  { 3.7409127305819802e-51, 70.000000000000000, 100.00000000000000, 0.0 },\n };\n+const double toler007 = 2.5000000000000020e-13;\n \n-// Test function for x=80.000000000000000.\n-template <typename Tp>\n-void test008()\n+// Test data for x=80.000000000000000.\n+// max(|f - f_GSL|): 5.3642541555028803e-29 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 2.7277330043072765e-15\n+// mean(f - f_GSL): -5.3642549571904701e-30\n+// variance(f - f_GSL): 3.5524976846595722e-60\n+// stddev(f - f_GSL): 1.8848070682856566e-30\n+const testcase_beta<double>\n+data008[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data008)\n-                         / sizeof(testcase_beta<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::beta(Tp(data008[i].x), Tp(data008[i].y));\n-      const Tp f0 = data008[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(5.0000000000000029e-12));\n-}\n-\n-// Test data for x=90.000000000000000.\n-testcase_beta<double> data009[] = {\n-  { 6.4187824828154399e-15, 90.000000000000000, 10.000000000000000 },\n-  { 1.3907944279729071e-23, 90.000000000000000, 20.000000000000000 },\n-  { 2.6183005659681346e-30, 90.000000000000000, 30.000000000000000 },\n-  { 6.7690629601315579e-36, 90.000000000000000, 40.000000000000000 },\n-  { 1.0442781609881063e-40, 90.000000000000000, 50.000000000000000 },\n-  { 6.0105571058570508e-45, 90.000000000000000, 60.000000000000000 },\n-  { 9.5865870063501807e-49, 90.000000000000000, 70.000000000000000 },\n-  { 3.4593773902125368e-52, 90.000000000000000, 80.000000000000000 },\n-  { 2.4416737907558032e-55, 90.000000000000000, 90.000000000000000 },\n-  { 3.0238531916564246e-58, 90.000000000000000, 100.00000000000000 },\n+  { 1.9665612972502651e-14, 80.000000000000000, 10.000000000000000, 0.0 },\n+  { 1.1660809542079041e-22, 80.000000000000000, 20.000000000000000, 0.0 },\n+  { 5.4783729715317616e-29, 80.000000000000000, 30.000000000000000, 0.0 },\n+  { 3.2734839142758369e-34, 80.000000000000000, 40.000000000000000, 0.0 },\n+  { 1.0939382296458963e-38, 80.000000000000000, 50.000000000000000, 0.0 },\n+  { 1.2902663809721126e-42, 80.000000000000000, 60.000000000000000, 0.0 },\n+  { 4.0192274082013779e-46, 80.000000000000000, 70.000000000000000, 0.0 },\n+  { 2.7160590828669411e-49, 80.000000000000000, 80.000000000000000, 0.0 },\n+  { 3.4593773902125368e-52, 80.000000000000000, 90.000000000000000, 0.0 },\n+  { 7.4807039968503468e-55, 80.000000000000000, 100.00000000000000, 0.0 },\n };\n+const double toler008 = 2.5000000000000020e-13;\n \n-// Test function for x=90.000000000000000.\n-template <typename Tp>\n-void test009()\n+// Test data for x=90.000000000000000.\n+// max(|f - f_GSL|): 2.4454688061851366e-29 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 3.8098639621021905e-15\n+// mean(f - f_GSL): -2.4454688799474037e-30\n+// variance(f - f_GSL): 7.3831086948039631e-61\n+// stddev(f - f_GSL): 8.5925017863274033e-31\n+const testcase_beta<double>\n+data009[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data009)\n-                         / sizeof(testcase_beta<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::beta(Tp(data009[i].x), Tp(data009[i].y));\n-      const Tp f0 = data009[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(1.0000000000000008e-12));\n-}\n+  { 6.4187824828154399e-15, 90.000000000000000, 10.000000000000000, 0.0 },\n+  { 1.3907944279729071e-23, 90.000000000000000, 20.000000000000000, 0.0 },\n+  { 2.6183005659681346e-30, 90.000000000000000, 30.000000000000000, 0.0 },\n+  { 6.7690629601315579e-36, 90.000000000000000, 40.000000000000000, 0.0 },\n+  { 1.0442781609879874e-40, 90.000000000000000, 50.000000000000000, 0.0 },\n+  { 6.0105571058570508e-45, 90.000000000000000, 60.000000000000000, 0.0 },\n+  { 9.5865870063501807e-49, 90.000000000000000, 70.000000000000000, 0.0 },\n+  { 3.4593773902125368e-52, 90.000000000000000, 80.000000000000000, 0.0 },\n+  { 2.4416737907558036e-55, 90.000000000000000, 90.000000000000000, 0.0 },\n+  { 3.0238531916564250e-58, 90.000000000000000, 100.00000000000000, 0.0 },\n+};\n+const double toler009 = 2.5000000000000020e-13;\n \n // Test data for x=100.00000000000000.\n-testcase_beta<double> data010[] = {\n-  { 2.3455339739604842e-15, 100.00000000000000, 10.000000000000000 },\n-  { 2.0365059099917614e-24, 100.00000000000000, 20.000000000000000 },\n-  { 1.6587948222122229e-31, 100.00000000000000, 30.000000000000000 },\n-  { 1.9797337118812366e-37, 100.00000000000000, 40.000000000000000 },\n-  { 1.4904121110954370e-42, 100.00000000000000, 50.000000000000000 },\n-  { 4.3922898898347209e-47, 100.00000000000000, 60.000000000000000 },\n-  { 3.7409127305819802e-51, 100.00000000000000, 70.000000000000000 },\n-  { 7.4807039968503468e-55, 100.00000000000000, 80.000000000000000 },\n-  { 3.0238531916564246e-58, 100.00000000000000, 90.000000000000000 },\n-  { 2.2087606931991853e-61, 100.00000000000000, 100.00000000000000 },\n+// max(|f - f_GSL|): 1.9327092177914789e-29 at index 0\n+// max(|f - f_GSL| / |f_GSL|): 8.2399540541638715e-15\n+// mean(f - f_GSL): -1.9327092238526215e-30\n+// variance(f - f_GSL): 4.6115616592160521e-61\n+// stddev(f - f_GSL): 6.7908480024339023e-31\n+const testcase_beta<double>\n+data010[10] =\n+{\n+  { 2.3455339739604842e-15, 100.00000000000000, 10.000000000000000, 0.0 },\n+  { 2.0365059099917614e-24, 100.00000000000000, 20.000000000000000, 0.0 },\n+  { 1.6587948222122229e-31, 100.00000000000000, 30.000000000000000, 0.0 },\n+  { 1.9797337118810115e-37, 100.00000000000000, 40.000000000000000, 0.0 },\n+  { 1.4904121110954370e-42, 100.00000000000000, 50.000000000000000, 0.0 },\n+  { 4.3922898898347209e-47, 100.00000000000000, 60.000000000000000, 0.0 },\n+  { 3.7409127305819802e-51, 100.00000000000000, 70.000000000000000, 0.0 },\n+  { 7.4807039968503468e-55, 100.00000000000000, 80.000000000000000, 0.0 },\n+  { 3.0238531916564250e-58, 100.00000000000000, 90.000000000000000, 0.0 },\n+  { 2.2087606931991849e-61, 100.00000000000000, 100.00000000000000, 0.0 },\n };\n+const double toler010 = 5.0000000000000039e-13;\n \n-// Test function for x=100.00000000000000.\n-template <typename Tp>\n-void test010()\n-{\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data010)\n-                         / sizeof(testcase_beta<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::beta(Tp(data010[i].x), Tp(data010[i].y));\n-      const Tp f0 = data010[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(5.0000000000000029e-12));\n-}\n+template<typename Ret, unsigned int Num>\n+  void\n+  test(const testcase_beta<Ret> (&data)[Num], Ret toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Ret eps = std::numeric_limits<Ret>::epsilon();\n+    Ret max_abs_diff = -Ret(1);\n+    Ret max_abs_frac = -Ret(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+      {\n+\tconst Ret f = std::tr1::beta(data[i].x, data[i].y);\n+\tconst Ret f0 = data[i].f0;\n+\tconst Ret diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Ret(10) * eps\n+\t && std::abs(f) > Ret(10) * eps)\n+\t  {\n+\t    const Ret frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n \n-int main(int, char**)\n+int\n+main()\n {\n-  test001<double>();\n-  test002<double>();\n-  test003<double>();\n-  test004<double>();\n-  test005<double>();\n-  test006<double>();\n-  test007<double>();\n-  test008<double>();\n-  test009<double>();\n-  test010<double>();\n+  test(data001, toler001);\n+  test(data002, toler002);\n+  test(data003, toler003);\n+  test(data004, toler004);\n+  test(data005, toler005);\n+  test(data006, toler006);\n+  test(data007, toler007);\n+  test(data008, toler008);\n+  test(data009, toler009);\n+  test(data010, toler010);\n   return 0;\n }"}, {"sha": "56ceb863fdf86df3d24aa1699373eb86d3b27c15", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/04_comp_ellint_1/check_value.cc", "status": "modified", "additions": 71, "deletions": 63, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F04_comp_ellint_1%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F04_comp_ellint_1%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F04_comp_ellint_1%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -1,6 +1,7 @@\n-// 2007-02-04  Edward Smith-Rowland <3dw4rd@verizon.net>\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n //\n-// Copyright (C) 2007-2017 Free Software Foundation, Inc.\n+// Copyright (C) 2016-2017 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,78 +20,85 @@\n \n //  comp_ellint_1\n \n-\n //  Compare against values generated by the GNU Scientific Library.\n //  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n-\n+#include <limits>\n #include <tr1/cmath>\n #if defined(__TEST_DEBUG)\n-#include <iostream>\n-#define VERIFY(A) \\\n-if (!(A)) \\\n-  { \\\n-    std::cout << \"line \" << __LINE__ \\\n-      << \"  max_abs_frac = \" << max_abs_frac \\\n-      << std::endl; \\\n-  }\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n #else\n-#include <testsuite_hooks.h>\n+#  include <testsuite_hooks.h>\n #endif\n-#include \"../testcase.h\"\n-\n+#include <specfun_testcase.h>\n \n // Test data.\n-testcase_comp_ellint_1<double> data001[] = {\n-  { 2.2805491384227703, -0.90000000000000002 },\n-  { 1.9953027776647296, -0.80000000000000004 },\n-  { 1.8456939983747236, -0.69999999999999996 },\n-  { 1.7507538029157526, -0.59999999999999998 },\n-  { 1.6857503548125963, -0.50000000000000000 },\n-  { 1.6399998658645112, -0.40000000000000002 },\n-  { 1.6080486199305126, -0.30000000000000004 },\n-  { 1.5868678474541664, -0.19999999999999996 },\n-  { 1.5747455615173562, -0.099999999999999978 },\n-  { 1.5707963267948966, 0.0000000000000000 },\n-  { 1.5747455615173562, 0.10000000000000009 },\n-  { 1.5868678474541664, 0.19999999999999996 },\n-  { 1.6080486199305126, 0.30000000000000004 },\n-  { 1.6399998658645112, 0.39999999999999991 },\n-  { 1.6857503548125963, 0.50000000000000000 },\n-  { 1.7507538029157526, 0.60000000000000009 },\n-  { 1.8456939983747236, 0.69999999999999996 },\n-  { 1.9953027776647296, 0.80000000000000004 },\n-  { 2.2805491384227699, 0.89999999999999991 },\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 18\n+// max(|f - f_Boost| / |f_Boost|): 1.9472906870017937e-16\n+// mean(f - f_Boost): -1.1686558153949016e-17\n+// variance(f - f_Boost): 1.2181788466954587e-32\n+// stddev(f - f_Boost): 1.1037113964689586e-16\n+const testcase_comp_ellint_1<double>\n+data001[19] =\n+{\n+  { 2.2805491384227703, -0.90000000000000002, 0.0 },\n+  { 1.9953027776647294, -0.80000000000000004, 0.0 },\n+  { 1.8456939983747234, -0.69999999999999996, 0.0 },\n+  { 1.7507538029157526, -0.59999999999999998, 0.0 },\n+  { 1.6857503548125961, -0.50000000000000000, 0.0 },\n+  { 1.6399998658645112, -0.39999999999999991, 0.0 },\n+  { 1.6080486199305128, -0.29999999999999993, 0.0 },\n+  { 1.5868678474541662, -0.19999999999999996, 0.0 },\n+  { 1.5747455615173560, -0.099999999999999978, 0.0 },\n+  { 1.5707963267948966, 0.0000000000000000, 0.0 },\n+  { 1.5747455615173560, 0.10000000000000009, 0.0 },\n+  { 1.5868678474541662, 0.20000000000000018, 0.0 },\n+  { 1.6080486199305128, 0.30000000000000004, 0.0 },\n+  { 1.6399998658645112, 0.40000000000000013, 0.0 },\n+  { 1.6857503548125961, 0.50000000000000000, 0.0 },\n+  { 1.7507538029157526, 0.60000000000000009, 0.0 },\n+  { 1.8456939983747238, 0.70000000000000018, 0.0 },\n+  { 1.9953027776647294, 0.80000000000000004, 0.0 },\n+  { 2.2805491384227707, 0.90000000000000013, 0.0 },\n };\n+const double toler001 = 2.5000000000000020e-13;\n \n-// Test function.\n-template <typename Tp>\n-void test001()\n-{\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data001)\n-                         / sizeof(testcase_comp_ellint_1<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::comp_ellint_1(Tp(data001[i].k));\n-      const Tp f0 = data001[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-}\n+template<typename Ret, unsigned int Num>\n+  void\n+  test(const testcase_comp_ellint_1<Ret> (&data)[Num], Ret toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Ret eps = std::numeric_limits<Ret>::epsilon();\n+    Ret max_abs_diff = -Ret(1);\n+    Ret max_abs_frac = -Ret(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+      {\n+\tconst Ret f = std::tr1::comp_ellint_1(data[i].k);\n+\tconst Ret f0 = data[i].f0;\n+\tconst Ret diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Ret(10) * eps\n+\t && std::abs(f) > Ret(10) * eps)\n+\t  {\n+\t    const Ret frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n \n-int main(int, char**)\n+int\n+main()\n {\n-  test001<double>();\n+  test(data001, toler001);\n   return 0;\n }"}, {"sha": "36c1f756380fb77e4c900c40303d876be2e29396", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/05_comp_ellint_2/check_value.cc", "status": "modified", "additions": 71, "deletions": 63, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F05_comp_ellint_2%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F05_comp_ellint_2%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F05_comp_ellint_2%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -1,6 +1,7 @@\n-// 2007-02-04  Edward Smith-Rowland <3dw4rd@verizon.net>\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n //\n-// Copyright (C) 2007-2017 Free Software Foundation, Inc.\n+// Copyright (C) 2016-2017 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,78 +20,85 @@\n \n //  comp_ellint_2\n \n-\n //  Compare against values generated by the GNU Scientific Library.\n //  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n-\n+#include <limits>\n #include <tr1/cmath>\n #if defined(__TEST_DEBUG)\n-#include <iostream>\n-#define VERIFY(A) \\\n-if (!(A)) \\\n-  { \\\n-    std::cout << \"line \" << __LINE__ \\\n-      << \"  max_abs_frac = \" << max_abs_frac \\\n-      << std::endl; \\\n-  }\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n #else\n-#include <testsuite_hooks.h>\n+#  include <testsuite_hooks.h>\n #endif\n-#include \"../testcase.h\"\n-\n+#include <specfun_testcase.h>\n \n // Test data.\n-testcase_comp_ellint_2<double> data001[] = {\n-  { 1.1716970527816140, -0.90000000000000002 },\n-  { 1.2763499431699066, -0.80000000000000004 },\n-  { 1.3556611355719557, -0.69999999999999996 },\n-  { 1.4180833944487243, -0.59999999999999998 },\n-  { 1.4674622093394274, -0.50000000000000000 },\n-  { 1.5059416123600402, -0.40000000000000002 },\n-  { 1.5348334649232489, -0.30000000000000004 },\n-  { 1.5549685462425296, -0.19999999999999996 },\n-  { 1.5668619420216685, -0.099999999999999978 },\n-  { 1.5707963267948966, 0.0000000000000000 },\n-  { 1.5668619420216685, 0.10000000000000009 },\n-  { 1.5549685462425296, 0.19999999999999996 },\n-  { 1.5348334649232489, 0.30000000000000004 },\n-  { 1.5059416123600404, 0.39999999999999991 },\n-  { 1.4674622093394274, 0.50000000000000000 },\n-  { 1.4180833944487241, 0.60000000000000009 },\n-  { 1.3556611355719557, 0.69999999999999996 },\n-  { 1.2763499431699066, 0.80000000000000004 },\n-  { 1.1716970527816142, 0.89999999999999991 },\n+// max(|f - f_Boost|): 1.1102230246251565e-15 at index 13\n+// max(|f - f_Boost| / |f_Boost|): 7.3722846590663481e-16\n+// mean(f - f_Boost): 1.7529837230923525e-16\n+// variance(f - f_Boost): 1.8020397140465364e-33\n+// stddev(f - f_Boost): 4.2450438325729176e-17\n+const testcase_comp_ellint_2<double>\n+data001[19] =\n+{\n+  { 1.1716970527816142, -0.90000000000000002, 0.0 },\n+  { 1.2763499431699064, -0.80000000000000004, 0.0 },\n+  { 1.3556611355719554, -0.69999999999999996, 0.0 },\n+  { 1.4180833944487243, -0.59999999999999998, 0.0 },\n+  { 1.4674622093394272, -0.50000000000000000, 0.0 },\n+  { 1.5059416123600404, -0.39999999999999991, 0.0 },\n+  { 1.5348334649232491, -0.29999999999999993, 0.0 },\n+  { 1.5549685462425293, -0.19999999999999996, 0.0 },\n+  { 1.5668619420216683, -0.099999999999999978, 0.0 },\n+  { 1.5707963267948966, 0.0000000000000000, 0.0 },\n+  { 1.5668619420216683, 0.10000000000000009, 0.0 },\n+  { 1.5549685462425293, 0.20000000000000018, 0.0 },\n+  { 1.5348334649232491, 0.30000000000000004, 0.0 },\n+  { 1.5059416123600402, 0.40000000000000013, 0.0 },\n+  { 1.4674622093394272, 0.50000000000000000, 0.0 },\n+  { 1.4180833944487241, 0.60000000000000009, 0.0 },\n+  { 1.3556611355719554, 0.70000000000000018, 0.0 },\n+  { 1.2763499431699064, 0.80000000000000004, 0.0 },\n+  { 1.1716970527816140, 0.90000000000000013, 0.0 },\n };\n+const double toler001 = 2.5000000000000020e-13;\n \n-// Test function.\n-template <typename Tp>\n-void test001()\n-{\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data001)\n-                         / sizeof(testcase_comp_ellint_2<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::comp_ellint_2(Tp(data001[i].k));\n-      const Tp f0 = data001[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(5.0000000000000039e-13));\n-}\n+template<typename Ret, unsigned int Num>\n+  void\n+  test(const testcase_comp_ellint_2<Ret> (&data)[Num], Ret toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Ret eps = std::numeric_limits<Ret>::epsilon();\n+    Ret max_abs_diff = -Ret(1);\n+    Ret max_abs_frac = -Ret(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+      {\n+\tconst Ret f = std::tr1::comp_ellint_2(data[i].k);\n+\tconst Ret f0 = data[i].f0;\n+\tconst Ret diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Ret(10) * eps\n+\t && std::abs(f) > Ret(10) * eps)\n+\t  {\n+\t    const Ret frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n \n-int main(int, char**)\n+int\n+main()\n {\n-  test001<double>();\n+  test(data001, toler001);\n   return 0;\n }"}, {"sha": "4c93370a5a1225656c94358f7f2fb08ea7327cb8", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/06_comp_ellint_3/check_value.cc", "status": "modified", "additions": 429, "deletions": 764, "changes": 1193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F06_comp_ellint_3%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F06_comp_ellint_3%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F06_comp_ellint_3%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -1,6 +1,7 @@\n-// 2007-02-04  Edward Smith-Rowland <3dw4rd@verizon.net>\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n //\n-// Copyright (C) 2007-2017 Free Software Foundation, Inc.\n+// Copyright (C) 2016-2017 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,826 +19,490 @@\n // <http://www.gnu.org/licenses/>.\n \n //  comp_ellint_3\n-\n-\n //  Compare against values generated by the GNU Scientific Library.\n //  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n-\n+#include <limits>\n #include <tr1/cmath>\n #if defined(__TEST_DEBUG)\n-#include <iostream>\n-#define VERIFY(A) \\\n-if (!(A)) \\\n-  { \\\n-    std::cout << \"line \" << __LINE__ \\\n-      << \"  max_abs_frac = \" << max_abs_frac \\\n-      << std::endl; \\\n-  }\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n #else\n-#include <testsuite_hooks.h>\n+#  include <testsuite_hooks.h>\n #endif\n-#include \"../testcase.h\"\n-\n+#include <specfun_testcase.h>\n \n // Test data for k=-0.90000000000000002.\n-testcase_comp_ellint_3<double> data001[] = {\n-  { 2.2805491384227703, -0.90000000000000002, 0.0000000000000000 },\n-  { 2.1537868513875287, -0.90000000000000002, 0.10000000000000001 },\n-  { 2.0443194576468890, -0.90000000000000002, 0.20000000000000001 },\n-  { 1.9486280260314426, -0.90000000000000002, 0.29999999999999999 },\n-  { 1.8641114227238349, -0.90000000000000002, 0.40000000000000002 },\n-  { 1.7888013241937861, -0.90000000000000002, 0.50000000000000000 },\n-  { 1.7211781128919523, -0.90000000000000002, 0.59999999999999998 },\n-  { 1.6600480747670938, -0.90000000000000002, 0.69999999999999996 },\n-  { 1.6044591960982204, -0.90000000000000002, 0.80000000000000004 },\n-  { 1.5536420236310946, -0.90000000000000002, 0.90000000000000002 },\n-};\n-\n-// Test function for k=-0.90000000000000002.\n-template <typename Tp>\n-void test001()\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 5\n+// max(|f - f_Boost| / |f_Boost|): 1.2838262090802751e-16\n+// mean(f - f_Boost): 4.4408920985006264e-17\n+// variance(f - f_Boost): 2.4347558803117648e-34\n+// stddev(f - f_Boost): 1.5603704304785339e-17\n+const testcase_comp_ellint_3<double>\n+data001[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data001)\n-                         / sizeof(testcase_comp_ellint_3<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::comp_ellint_3(Tp(data001[i].k), Tp(data001[i].nu));\n-      const Tp f0 = data001[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-}\n-\n-// Test data for k=-0.80000000000000004.\n-testcase_comp_ellint_3<double> data002[] = {\n-  { 1.9953027776647296, -0.80000000000000004, 0.0000000000000000 },\n-  { 1.8910755418379521, -0.80000000000000004, 0.10000000000000001 },\n-  { 1.8007226661734588, -0.80000000000000004, 0.20000000000000001 },\n-  { 1.7214611048717301, -0.80000000000000004, 0.29999999999999999 },\n-  { 1.6512267838651289, -0.80000000000000004, 0.40000000000000002 },\n-  { 1.5884528947755532, -0.80000000000000004, 0.50000000000000000 },\n-  { 1.5319262547427865, -0.80000000000000004, 0.59999999999999998 },\n-  { 1.4806912324625332, -0.80000000000000004, 0.69999999999999996 },\n-  { 1.4339837018309474, -0.80000000000000004, 0.80000000000000004 },\n-  { 1.3911845406776222, -0.80000000000000004, 0.90000000000000002 },\n+  { 2.2805491384227703, -0.90000000000000002, 0.0000000000000000, 0.0 },\n+  { 2.4295011187834885, -0.90000000000000002, 0.10000000000000001, 0.0 },\n+  { 2.6076835743348412, -0.90000000000000002, 0.20000000000000001, 0.0 },\n+  { 2.8256506968858512, -0.90000000000000002, 0.30000000000000004, 0.0 },\n+  { 3.1000689868578619, -0.90000000000000002, 0.40000000000000002, 0.0 },\n+  { 3.4591069002104677, -0.90000000000000002, 0.50000000000000000, 0.0 },\n+  { 3.9549939883570229, -0.90000000000000002, 0.60000000000000009, 0.0 },\n+  { 4.6985482312992435, -0.90000000000000002, 0.70000000000000007, 0.0 },\n+  { 5.9820740813645710, -0.90000000000000002, 0.80000000000000004, 0.0 },\n+  { 8.9942562031858699, -0.90000000000000002, 0.90000000000000002, 0.0 },\n };\n+const double toler001 = 2.5000000000000020e-13;\n \n-// Test function for k=-0.80000000000000004.\n-template <typename Tp>\n-void test002()\n+// Test data for k=-0.80000000000000004.\n+// max(|f - f_Boost|): 1.7763568394002505e-15 at index 8\n+// max(|f - f_Boost| / |f_Boost|): 4.1949393471095187e-16\n+// mean(f - f_Boost): 9.5479180117763459e-16\n+// variance(f - f_Boost): 5.4782007307014711e-34\n+// stddev(f - f_Boost): 2.3405556457178006e-17\n+const testcase_comp_ellint_3<double>\n+data002[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data002)\n-                         / sizeof(testcase_comp_ellint_3<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::comp_ellint_3(Tp(data002[i].k), Tp(data002[i].nu));\n-      const Tp f0 = data002[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-}\n-\n-// Test data for k=-0.69999999999999996.\n-testcase_comp_ellint_3<double> data003[] = {\n-  { 1.8456939983747236, -0.69999999999999996, 0.0000000000000000 },\n-  { 1.7528050171757608, -0.69999999999999996, 0.10000000000000001 },\n-  { 1.6721098780092147, -0.69999999999999996, 0.20000000000000001 },\n-  { 1.6011813647733213, -0.69999999999999996, 0.29999999999999999 },\n-  { 1.5382162002954762, -0.69999999999999996, 0.40000000000000002 },\n-  { 1.4818433192178544, -0.69999999999999996, 0.50000000000000000 },\n-  { 1.4309994736080540, -0.69999999999999996, 0.59999999999999998 },\n-  { 1.3848459188329196, -0.69999999999999996, 0.69999999999999996 },\n-  { 1.3427110650397533, -0.69999999999999996, 0.80000000000000004 },\n-  { 1.3040500499695911, -0.69999999999999996, 0.90000000000000002 },\n+  { 1.9953027776647294, -0.80000000000000004, 0.0000000000000000, 0.0 },\n+  { 2.1172616484005085, -0.80000000000000004, 0.10000000000000001, 0.0 },\n+  { 2.2624789434186798, -0.80000000000000004, 0.20000000000000001, 0.0 },\n+  { 2.4392042002725698, -0.80000000000000004, 0.30000000000000004, 0.0 },\n+  { 2.6604037035529728, -0.80000000000000004, 0.40000000000000002, 0.0 },\n+  { 2.9478781158239751, -0.80000000000000004, 0.50000000000000000, 0.0 },\n+  { 3.3418121892288055, -0.80000000000000004, 0.60000000000000009, 0.0 },\n+  { 3.9268876980046397, -0.80000000000000004, 0.70000000000000007, 0.0 },\n+  { 4.9246422058196071, -0.80000000000000004, 0.80000000000000004, 0.0 },\n+  { 7.2263259298637132, -0.80000000000000004, 0.90000000000000002, 0.0 },\n };\n+const double toler002 = 2.5000000000000020e-13;\n \n-// Test function for k=-0.69999999999999996.\n-template <typename Tp>\n-void test003()\n+// Test data for k=-0.69999999999999996.\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 3\n+// max(|f - f_Boost| / |f_Boost|): 1.9832236886714888e-16\n+// mean(f - f_Boost): -1.5543122344752191e-16\n+// variance(f - f_Boost): 2.9825759533819119e-33\n+// stddev(f - f_Boost): 5.4612965066748680e-17\n+const testcase_comp_ellint_3<double>\n+data003[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data003)\n-                         / sizeof(testcase_comp_ellint_3<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::comp_ellint_3(Tp(data003[i].k), Tp(data003[i].nu));\n-      const Tp f0 = data003[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-}\n-\n-// Test data for k=-0.59999999999999998.\n-testcase_comp_ellint_3<double> data004[] = {\n-  { 1.7507538029157526, -0.59999999999999998, 0.0000000000000000 },\n-  { 1.6648615773343014, -0.59999999999999998, 0.10000000000000001 },\n-  { 1.5901418016279374, -0.59999999999999998, 0.20000000000000001 },\n-  { 1.5243814243493585, -0.59999999999999998, 0.29999999999999999 },\n-  { 1.4659345278069984, -0.59999999999999998, 0.40000000000000002 },\n-  { 1.4135484285693078, -0.59999999999999998, 0.50000000000000000 },\n-  { 1.3662507535812816, -0.59999999999999998, 0.59999999999999998 },\n-  { 1.3232737468822811, -0.59999999999999998, 0.69999999999999996 },\n-  { 1.2840021261752192, -0.59999999999999998, 0.80000000000000004 },\n-  { 1.2479362973851875, -0.59999999999999998, 0.90000000000000002 },\n+  { 1.8456939983747234, -0.69999999999999996, 0.0000000000000000, 0.0 },\n+  { 1.9541347343119564, -0.69999999999999996, 0.10000000000000001, 0.0 },\n+  { 2.0829290325820202, -0.69999999999999996, 0.20000000000000001, 0.0 },\n+  { 2.2392290510988535, -0.69999999999999996, 0.30000000000000004, 0.0 },\n+  { 2.4342502915307880, -0.69999999999999996, 0.40000000000000002, 0.0 },\n+  { 2.6868019968236996, -0.69999999999999996, 0.50000000000000000, 0.0 },\n+  { 3.0314573496746742, -0.69999999999999996, 0.60000000000000009, 0.0 },\n+  { 3.5408408771788564, -0.69999999999999996, 0.70000000000000007, 0.0 },\n+  { 4.4042405729076961, -0.69999999999999996, 0.80000000000000004, 0.0 },\n+  { 6.3796094177887754, -0.69999999999999996, 0.90000000000000002, 0.0 },\n };\n+const double toler003 = 2.5000000000000020e-13;\n \n-// Test function for k=-0.59999999999999998.\n-template <typename Tp>\n-void test004()\n+// Test data for k=-0.59999999999999998.\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 2\n+// max(|f - f_Boost| / |f_Boost|): 2.2547200163366559e-16\n+// mean(f - f_Boost): -1.9984014443252818e-16\n+// variance(f - f_Boost): 4.9303806576313241e-33\n+// stddev(f - f_Boost): 7.0216669371534022e-17\n+const testcase_comp_ellint_3<double>\n+data004[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data004)\n-                         / sizeof(testcase_comp_ellint_3<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::comp_ellint_3(Tp(data004[i].k), Tp(data004[i].nu));\n-      const Tp f0 = data004[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-}\n-\n-// Test data for k=-0.50000000000000000.\n-testcase_comp_ellint_3<double> data005[] = {\n-  { 1.6857503548125963, -0.50000000000000000, 0.0000000000000000 },\n-  { 1.6045524936084892, -0.50000000000000000, 0.10000000000000001 },\n-  { 1.5338490483665983, -0.50000000000000000, 0.20000000000000001 },\n-  { 1.4715681939859637, -0.50000000000000000, 0.29999999999999999 },\n-  { 1.4161679518465340, -0.50000000000000000, 0.40000000000000002 },\n-  { 1.3664739530045971, -0.50000000000000000, 0.50000000000000000 },\n-  { 1.3215740290190876, -0.50000000000000000, 0.59999999999999998 },\n-  { 1.2807475181182502, -0.50000000000000000, 0.69999999999999996 },\n-  { 1.2434165408189539, -0.50000000000000000, 0.80000000000000004 },\n-  { 1.2091116095504744, -0.50000000000000000, 0.90000000000000002 },\n+  { 1.7507538029157526, -0.59999999999999998, 0.0000000000000000, 0.0 },\n+  { 1.8508766487100685, -0.59999999999999998, 0.10000000000000001, 0.0 },\n+  { 1.9695980282802217, -0.59999999999999998, 0.20000000000000001, 0.0 },\n+  { 2.1134154405060599, -0.59999999999999998, 0.30000000000000004, 0.0 },\n+  { 2.2925036420985130, -0.59999999999999998, 0.40000000000000002, 0.0 },\n+  { 2.5239007084492711, -0.59999999999999998, 0.50000000000000000, 0.0 },\n+  { 2.8388723099514972, -0.59999999999999998, 0.60000000000000009, 0.0 },\n+  { 3.3029735898397159, -0.59999999999999998, 0.70000000000000007, 0.0 },\n+  { 4.0867036409261832, -0.59999999999999998, 0.80000000000000004, 0.0 },\n+  { 5.8709993116265604, -0.59999999999999998, 0.90000000000000002, 0.0 },\n };\n+const double toler004 = 2.5000000000000020e-13;\n \n-// Test function for k=-0.50000000000000000.\n-template <typename Tp>\n-void test005()\n+// Test data for k=-0.50000000000000000.\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 3\n+// max(|f - f_Boost| / |f_Boost|): 2.1900131385114407e-16\n+// mean(f - f_Boost): 2.4424906541753446e-16\n+// variance(f - f_Boost): 7.3651365379430888e-33\n+// stddev(f - f_Boost): 8.5820373676319358e-17\n+const testcase_comp_ellint_3<double>\n+data005[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data005)\n-                         / sizeof(testcase_comp_ellint_3<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::comp_ellint_3(Tp(data005[i].k), Tp(data005[i].nu));\n-      const Tp f0 = data005[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-}\n-\n-// Test data for k=-0.40000000000000002.\n-testcase_comp_ellint_3<double> data006[] = {\n-  { 1.6399998658645112, -0.40000000000000002, 0.0000000000000000 },\n-  { 1.5620566886683604, -0.40000000000000002, 0.10000000000000001 },\n-  { 1.4941414344266770, -0.40000000000000002, 0.20000000000000001 },\n-  { 1.4342789859950078, -0.40000000000000002, 0.29999999999999999 },\n-  { 1.3809986210732901, -0.40000000000000002, 0.40000000000000002 },\n-  { 1.3331797176377398, -0.40000000000000002, 0.50000000000000000 },\n-  { 1.2899514672527024, -0.40000000000000002, 0.59999999999999998 },\n-  { 1.2506255923253344, -0.40000000000000002, 0.69999999999999996 },\n-  { 1.2146499565727209, -0.40000000000000002, 0.80000000000000004 },\n-  { 1.1815758115929846, -0.40000000000000002, 0.90000000000000002 },\n+  { 1.6857503548125961, -0.50000000000000000, 0.0000000000000000, 0.0 },\n+  { 1.7803034946545482, -0.50000000000000000, 0.10000000000000001, 0.0 },\n+  { 1.8922947612264021, -0.50000000000000000, 0.20000000000000001, 0.0 },\n+  { 2.0277924458111314, -0.50000000000000000, 0.30000000000000004, 0.0 },\n+  { 2.1962905366178065, -0.50000000000000000, 0.40000000000000002, 0.0 },\n+  { 2.4136715042011945, -0.50000000000000000, 0.50000000000000000, 0.0 },\n+  { 2.7090491861753558, -0.50000000000000000, 0.60000000000000009, 0.0 },\n+  { 3.1433945297859229, -0.50000000000000000, 0.70000000000000007, 0.0 },\n+  { 3.8750701888108070, -0.50000000000000000, 0.80000000000000004, 0.0 },\n+  { 5.5355132096026463, -0.50000000000000000, 0.90000000000000002, 0.0 },\n };\n-\n-// Test function for k=-0.40000000000000002.\n-template <typename Tp>\n-void test006()\n+const double toler005 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.39999999999999991.\n+// max(|f - f_Boost|): 1.7763568394002505e-15 at index 9\n+// max(|f - f_Boost| / |f_Boost|): 4.1718164615986397e-16\n+// mean(f - f_Boost): 6.2172489379008762e-16\n+// variance(f - f_Boost): 1.6458949750907531e-31\n+// stddev(f - f_Boost): 4.0569631192441877e-16\n+const testcase_comp_ellint_3<double>\n+data006[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data006)\n-                         / sizeof(testcase_comp_ellint_3<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::comp_ellint_3(Tp(data006[i].k), Tp(data006[i].nu));\n-      const Tp f0 = data006[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-}\n-\n-// Test data for k=-0.30000000000000004.\n-testcase_comp_ellint_3<double> data007[] = {\n-  { 1.6080486199305126, -0.30000000000000004, 0.0000000000000000 },\n-  { 1.5323534693557526, -0.30000000000000004, 0.10000000000000001 },\n-  { 1.4663658145259875, -0.30000000000000004, 0.20000000000000001 },\n-  { 1.4081767433479089, -0.30000000000000004, 0.29999999999999999 },\n-  { 1.3563643538969761, -0.30000000000000004, 0.40000000000000002 },\n-  { 1.3098448759814960, -0.30000000000000004, 0.50000000000000000 },\n-  { 1.2677758800420666, -0.30000000000000004, 0.59999999999999998 },\n-  { 1.2294913236274980, -0.30000000000000004, 0.69999999999999996 },\n-  { 1.1944567571590046, -0.30000000000000004, 0.80000000000000004 },\n-  { 1.1622376896064912, -0.30000000000000004, 0.90000000000000002 },\n+  { 1.6399998658645112, -0.39999999999999991, 0.0000000000000000, 0.0 },\n+  { 1.7306968836847190, -0.39999999999999991, 0.10000000000000001, 0.0 },\n+  { 1.8380358826317627, -0.39999999999999991, 0.20000000000000001, 0.0 },\n+  { 1.9677924132520139, -0.39999999999999991, 0.30000000000000004, 0.0 },\n+  { 2.1289968719280026, -0.39999999999999991, 0.40000000000000002, 0.0 },\n+  { 2.3367461373176512, -0.39999999999999991, 0.50000000000000000, 0.0 },\n+  { 2.6186940209850191, -0.39999999999999991, 0.60000000000000009, 0.0 },\n+  { 3.0327078743873246, -0.39999999999999991, 0.70000000000000007, 0.0 },\n+  { 3.7289548002199902, -0.39999999999999991, 0.80000000000000004, 0.0 },\n+  { 5.3055535102872513, -0.39999999999999991, 0.90000000000000002, 0.0 },\n };\n-\n-// Test function for k=-0.30000000000000004.\n-template <typename Tp>\n-void test007()\n+const double toler006 = 2.5000000000000020e-13;\n+\n+// Test data for k=-0.29999999999999993.\n+// max(|f - f_Boost|): 1.3322676295501878e-15 at index 8\n+// max(|f - f_Boost| / |f_Boost|): 3.9274792319434433e-16\n+// mean(f - f_Boost): 6.2172489379008762e-16\n+// variance(f - f_Boost): 8.7651211691223537e-33\n+// stddev(f - f_Boost): 9.3622225828712025e-17\n+const testcase_comp_ellint_3<double>\n+data007[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data007)\n-                         / sizeof(testcase_comp_ellint_3<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::comp_ellint_3(Tp(data007[i].k), Tp(data007[i].nu));\n-      const Tp f0 = data007[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-}\n-\n-// Test data for k=-0.19999999999999996.\n-testcase_comp_ellint_3<double> data008[] = {\n-  { 1.5868678474541664, -0.19999999999999996, 0.0000000000000000 },\n-  { 1.5126513474261092, -0.19999999999999996, 0.10000000000000001 },\n-  { 1.4479323932249568, -0.19999999999999996, 0.20000000000000001 },\n-  { 1.3908453514752481, -0.19999999999999996, 0.29999999999999999 },\n-  { 1.3400002519661010, -0.19999999999999996, 0.40000000000000002 },\n-  { 1.2943374404397376, -0.19999999999999996, 0.50000000000000000 },\n-  { 1.2530330675914561, -0.19999999999999996, 0.59999999999999998 },\n-  { 1.2154356555075867, -0.19999999999999996, 0.69999999999999996 },\n-  { 1.1810223448909913, -0.19999999999999996, 0.80000000000000004 },\n-  { 1.1493679916141863, -0.19999999999999996, 0.90000000000000002 },\n+  { 1.6080486199305128, -0.29999999999999993, 0.0000000000000000, 0.0 },\n+  { 1.6960848815118226, -0.29999999999999993, 0.10000000000000001, 0.0 },\n+  { 1.8002173372290500, -0.29999999999999993, 0.20000000000000001, 0.0 },\n+  { 1.9260216862473254, -0.29999999999999993, 0.30000000000000004, 0.0 },\n+  { 2.0822121773175533, -0.29999999999999993, 0.40000000000000002, 0.0 },\n+  { 2.2833505881933971, -0.29999999999999993, 0.50000000000000000, 0.0 },\n+  { 2.5560975528589065, -0.29999999999999993, 0.60000000000000009, 0.0 },\n+  { 2.9562123549913877, -0.29999999999999993, 0.70000000000000007, 0.0 },\n+  { 3.6283050484567170, -0.29999999999999993, 0.80000000000000004, 0.0 },\n+  { 5.1479514944016795, -0.29999999999999993, 0.90000000000000002, 0.0 },\n };\n+const double toler007 = 2.5000000000000020e-13;\n \n-// Test function for k=-0.19999999999999996.\n-template <typename Tp>\n-void test008()\n+// Test data for k=-0.19999999999999996.\n+// max(|f - f_Boost|): 8.8817841970012523e-16 at index 9\n+// max(|f - f_Boost| / |f_Boost|): 1.9753938705764407e-16\n+// mean(f - f_Boost): 3.1086244689504381e-16\n+// variance(f - f_Boost): 4.1147374377268827e-32\n+// stddev(f - f_Boost): 2.0284815596220939e-16\n+const testcase_comp_ellint_3<double>\n+data008[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data008)\n-                         / sizeof(testcase_comp_ellint_3<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::comp_ellint_3(Tp(data008[i].k), Tp(data008[i].nu));\n-      const Tp f0 = data008[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-}\n-\n-// Test data for k=-0.099999999999999978.\n-testcase_comp_ellint_3<double> data009[] = {\n-  { 1.5747455615173562, -0.099999999999999978, 0.0000000000000000 },\n-  { 1.5013711111199950, -0.099999999999999978, 0.10000000000000001 },\n-  { 1.4373749386463430, -0.099999999999999978, 0.20000000000000001 },\n-  { 1.3809159606704959, -0.099999999999999978, 0.29999999999999999 },\n-  { 1.3306223265207477, -0.099999999999999978, 0.40000000000000002 },\n-  { 1.2854480708580160, -0.099999999999999978, 0.50000000000000000 },\n-  { 1.2445798942989255, -0.099999999999999978, 0.59999999999999998 },\n-  { 1.2073745911083187, -0.099999999999999978, 0.69999999999999996 },\n-  { 1.1733158866987732, -0.099999999999999978, 0.80000000000000004 },\n-  { 1.1419839485283374, -0.099999999999999978, 0.90000000000000002 },\n+  { 1.5868678474541662, -0.19999999999999996, 0.0000000000000000, 0.0 },\n+  { 1.6731552050562593, -0.19999999999999996, 0.10000000000000001, 0.0 },\n+  { 1.7751816279738935, -0.19999999999999996, 0.20000000000000001, 0.0 },\n+  { 1.8983924169967101, -0.19999999999999996, 0.30000000000000004, 0.0 },\n+  { 2.0512956926676806, -0.19999999999999996, 0.40000000000000002, 0.0 },\n+  { 2.2481046259421302, -0.19999999999999996, 0.50000000000000000, 0.0 },\n+  { 2.5148333891629315, -0.19999999999999996, 0.60000000000000009, 0.0 },\n+  { 2.9058704854500967, -0.19999999999999996, 0.70000000000000007, 0.0 },\n+  { 3.5622166386422633, -0.19999999999999996, 0.80000000000000004, 0.0 },\n+  { 5.0448269356200370, -0.19999999999999996, 0.90000000000000002, 0.0 },\n };\n+const double toler008 = 2.5000000000000020e-13;\n \n-// Test function for k=-0.099999999999999978.\n-template <typename Tp>\n-void test009()\n+// Test data for k=-0.099999999999999978.\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 5\n+// max(|f - f_Boost| / |f_Boost|): 1.9932308021417639e-16\n+// mean(f - f_Boost): 0.0000000000000000\n+// variance(f - f_Boost): 6.8368087769470551e-64\n+// stddev(f - f_Boost): 2.6147291976315738e-32\n+const testcase_comp_ellint_3<double>\n+data009[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data009)\n-                         / sizeof(testcase_comp_ellint_3<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::comp_ellint_3(Tp(data009[i].k), Tp(data009[i].nu));\n-      const Tp f0 = data009[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-}\n-\n-// Test data for k=0.0000000000000000.\n-testcase_comp_ellint_3<double> data010[] = {\n-  { 1.5707963267948966, 0.0000000000000000, 0.0000000000000000 },\n-  { 1.4976955329233277, 0.0000000000000000, 0.10000000000000001 },\n-  { 1.4339343023863691, 0.0000000000000000, 0.20000000000000001 },\n-  { 1.3776795151134889, 0.0000000000000000, 0.29999999999999999 },\n-  { 1.3275651989026322, 0.0000000000000000, 0.40000000000000002 },\n-  { 1.2825498301618641, 0.0000000000000000, 0.50000000000000000 },\n-  { 1.2418235332245127, 0.0000000000000000, 0.59999999999999998 },\n-  { 1.2047457872617382, 0.0000000000000000, 0.69999999999999996 },\n-  { 1.1708024551734544, 0.0000000000000000, 0.80000000000000004 },\n-  { 1.1395754288497419, 0.0000000000000000, 0.90000000000000002 },\n+  { 1.5747455615173560, -0.099999999999999978, 0.0000000000000000, 0.0 },\n+  { 1.6600374067558428, -0.099999999999999978, 0.10000000000000001, 0.0 },\n+  { 1.7608656115083421, -0.099999999999999978, 0.20000000000000001, 0.0 },\n+  { 1.8826015946315438, -0.099999999999999978, 0.30000000000000004, 0.0 },\n+  { 2.0336367403076760, -0.099999999999999978, 0.40000000000000002, 0.0 },\n+  { 2.2279868912966849, -0.099999999999999978, 0.50000000000000000, 0.0 },\n+  { 2.4913004919173827, -0.099999999999999978, 0.60000000000000009, 0.0 },\n+  { 2.8771910188009744, -0.099999999999999978, 0.70000000000000007, 0.0 },\n+  { 3.5246199613295617, -0.099999999999999978, 0.80000000000000004, 0.0 },\n+  { 4.9862890417305508, -0.099999999999999978, 0.90000000000000002, 0.0 },\n };\n+const double toler009 = 2.5000000000000020e-13;\n \n-// Test function for k=0.0000000000000000.\n-template <typename Tp>\n-void test010()\n+// Test data for k=0.0000000000000000.\n+// max(|f - f_Boost|): 8.8817841970012523e-16 at index 9\n+// max(|f - f_Boost| / |f_Boost|): 2.1899085000907084e-16\n+// mean(f - f_Boost): -2.2204460492503131e-16\n+// variance(f - f_Boost): 5.4782007307014711e-32\n+// stddev(f - f_Boost): 2.3405556457178008e-16\n+const testcase_comp_ellint_3<double>\n+data010[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data010)\n-                         / sizeof(testcase_comp_ellint_3<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::comp_ellint_3(Tp(data010[i].k), Tp(data010[i].nu));\n-      const Tp f0 = data010[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-}\n-\n-// Test data for k=0.10000000000000009.\n-testcase_comp_ellint_3<double> data011[] = {\n-  { 1.5747455615173562, 0.10000000000000009, 0.0000000000000000 },\n-  { 1.5013711111199950, 0.10000000000000009, 0.10000000000000001 },\n-  { 1.4373749386463430, 0.10000000000000009, 0.20000000000000001 },\n-  { 1.3809159606704959, 0.10000000000000009, 0.29999999999999999 },\n-  { 1.3306223265207477, 0.10000000000000009, 0.40000000000000002 },\n-  { 1.2854480708580160, 0.10000000000000009, 0.50000000000000000 },\n-  { 1.2445798942989255, 0.10000000000000009, 0.59999999999999998 },\n-  { 1.2073745911083187, 0.10000000000000009, 0.69999999999999996 },\n-  { 1.1733158866987732, 0.10000000000000009, 0.80000000000000004 },\n-  { 1.1419839485283374, 0.10000000000000009, 0.90000000000000002 },\n+  { 1.5707963267948966, 0.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 1.6557647109660170, 0.0000000000000000, 0.10000000000000001, 0.0 },\n+  { 1.7562036827601817, 0.0000000000000000, 0.20000000000000001, 0.0 },\n+  { 1.8774607092226381, 0.0000000000000000, 0.30000000000000004, 0.0 },\n+  { 2.0278893379868062, 0.0000000000000000, 0.40000000000000002, 0.0 },\n+  { 2.2214414690791831, 0.0000000000000000, 0.50000000000000000, 0.0 },\n+  { 2.4836470664490258, 0.0000000000000000, 0.60000000000000009, 0.0 },\n+  { 2.8678686047727386, 0.0000000000000000, 0.70000000000000007, 0.0 },\n+  { 3.5124073655203634, 0.0000000000000000, 0.80000000000000004, 0.0 },\n+  { 4.9672941328980516, 0.0000000000000000, 0.90000000000000002, 0.0 },\n };\n+const double toler010 = 2.5000000000000020e-13;\n \n-// Test function for k=0.10000000000000009.\n-template <typename Tp>\n-void test011()\n+// Test data for k=0.10000000000000009.\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 5\n+// max(|f - f_Boost| / |f_Boost|): 1.9932308021417639e-16\n+// mean(f - f_Boost): -2.2204460492503132e-17\n+// variance(f - f_Boost): 6.0868897007794120e-35\n+// stddev(f - f_Boost): 7.8018521523926693e-18\n+const testcase_comp_ellint_3<double>\n+data011[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data011)\n-                         / sizeof(testcase_comp_ellint_3<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::comp_ellint_3(Tp(data011[i].k), Tp(data011[i].nu));\n-      const Tp f0 = data011[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-}\n-\n-// Test data for k=0.19999999999999996.\n-testcase_comp_ellint_3<double> data012[] = {\n-  { 1.5868678474541664, 0.19999999999999996, 0.0000000000000000 },\n-  { 1.5126513474261092, 0.19999999999999996, 0.10000000000000001 },\n-  { 1.4479323932249568, 0.19999999999999996, 0.20000000000000001 },\n-  { 1.3908453514752481, 0.19999999999999996, 0.29999999999999999 },\n-  { 1.3400002519661010, 0.19999999999999996, 0.40000000000000002 },\n-  { 1.2943374404397376, 0.19999999999999996, 0.50000000000000000 },\n-  { 1.2530330675914561, 0.19999999999999996, 0.59999999999999998 },\n-  { 1.2154356555075867, 0.19999999999999996, 0.69999999999999996 },\n-  { 1.1810223448909913, 0.19999999999999996, 0.80000000000000004 },\n-  { 1.1493679916141863, 0.19999999999999996, 0.90000000000000002 },\n+  { 1.5747455615173560, 0.10000000000000009, 0.0000000000000000, 0.0 },\n+  { 1.6600374067558428, 0.10000000000000009, 0.10000000000000001, 0.0 },\n+  { 1.7608656115083421, 0.10000000000000009, 0.20000000000000001, 0.0 },\n+  { 1.8826015946315440, 0.10000000000000009, 0.30000000000000004, 0.0 },\n+  { 2.0336367403076760, 0.10000000000000009, 0.40000000000000002, 0.0 },\n+  { 2.2279868912966849, 0.10000000000000009, 0.50000000000000000, 0.0 },\n+  { 2.4913004919173827, 0.10000000000000009, 0.60000000000000009, 0.0 },\n+  { 2.8771910188009744, 0.10000000000000009, 0.70000000000000007, 0.0 },\n+  { 3.5246199613295617, 0.10000000000000009, 0.80000000000000004, 0.0 },\n+  { 4.9862890417305508, 0.10000000000000009, 0.90000000000000002, 0.0 },\n };\n-\n-// Test function for k=0.19999999999999996.\n-template <typename Tp>\n-void test012()\n+const double toler011 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.20000000000000018.\n+// max(|f - f_Boost|): 8.8817841970012523e-16 at index 9\n+// max(|f - f_Boost| / |f_Boost|): 1.9753938705764407e-16\n+// mean(f - f_Boost): 3.1086244689504381e-16\n+// variance(f - f_Boost): 4.1147374377268827e-32\n+// stddev(f - f_Boost): 2.0284815596220939e-16\n+const testcase_comp_ellint_3<double>\n+data012[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data012)\n-                         / sizeof(testcase_comp_ellint_3<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::comp_ellint_3(Tp(data012[i].k), Tp(data012[i].nu));\n-      const Tp f0 = data012[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-}\n-\n-// Test data for k=0.30000000000000004.\n-testcase_comp_ellint_3<double> data013[] = {\n-  { 1.6080486199305126, 0.30000000000000004, 0.0000000000000000 },\n-  { 1.5323534693557526, 0.30000000000000004, 0.10000000000000001 },\n-  { 1.4663658145259875, 0.30000000000000004, 0.20000000000000001 },\n-  { 1.4081767433479089, 0.30000000000000004, 0.29999999999999999 },\n-  { 1.3563643538969761, 0.30000000000000004, 0.40000000000000002 },\n-  { 1.3098448759814960, 0.30000000000000004, 0.50000000000000000 },\n-  { 1.2677758800420666, 0.30000000000000004, 0.59999999999999998 },\n-  { 1.2294913236274980, 0.30000000000000004, 0.69999999999999996 },\n-  { 1.1944567571590046, 0.30000000000000004, 0.80000000000000004 },\n-  { 1.1622376896064912, 0.30000000000000004, 0.90000000000000002 },\n+  { 1.5868678474541662, 0.20000000000000018, 0.0000000000000000, 0.0 },\n+  { 1.6731552050562593, 0.20000000000000018, 0.10000000000000001, 0.0 },\n+  { 1.7751816279738935, 0.20000000000000018, 0.20000000000000001, 0.0 },\n+  { 1.8983924169967101, 0.20000000000000018, 0.30000000000000004, 0.0 },\n+  { 2.0512956926676806, 0.20000000000000018, 0.40000000000000002, 0.0 },\n+  { 2.2481046259421302, 0.20000000000000018, 0.50000000000000000, 0.0 },\n+  { 2.5148333891629315, 0.20000000000000018, 0.60000000000000009, 0.0 },\n+  { 2.9058704854500967, 0.20000000000000018, 0.70000000000000007, 0.0 },\n+  { 3.5622166386422633, 0.20000000000000018, 0.80000000000000004, 0.0 },\n+  { 5.0448269356200370, 0.20000000000000018, 0.90000000000000002, 0.0 },\n };\n+const double toler012 = 2.5000000000000020e-13;\n \n-// Test function for k=0.30000000000000004.\n-template <typename Tp>\n-void test013()\n+// Test data for k=0.30000000000000004.\n+// max(|f - f_Boost|): 8.8817841970012523e-16 at index 8\n+// max(|f - f_Boost| / |f_Boost|): 3.4585997630846713e-16\n+// mean(f - f_Boost): 5.1070259132757197e-16\n+// variance(f - f_Boost): 1.7591111235252501e-32\n+// stddev(f - f_Boost): 1.3263148659067538e-16\n+const testcase_comp_ellint_3<double>\n+data013[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data013)\n-                         / sizeof(testcase_comp_ellint_3<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::comp_ellint_3(Tp(data013[i].k), Tp(data013[i].nu));\n-      const Tp f0 = data013[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-}\n-\n-// Test data for k=0.39999999999999991.\n-testcase_comp_ellint_3<double> data014[] = {\n-  { 1.6399998658645112, 0.39999999999999991, 0.0000000000000000 },\n-  { 1.5620566886683604, 0.39999999999999991, 0.10000000000000001 },\n-  { 1.4941414344266770, 0.39999999999999991, 0.20000000000000001 },\n-  { 1.4342789859950078, 0.39999999999999991, 0.29999999999999999 },\n-  { 1.3809986210732901, 0.39999999999999991, 0.40000000000000002 },\n-  { 1.3331797176377398, 0.39999999999999991, 0.50000000000000000 },\n-  { 1.2899514672527024, 0.39999999999999991, 0.59999999999999998 },\n-  { 1.2506255923253344, 0.39999999999999991, 0.69999999999999996 },\n-  { 1.2146499565727209, 0.39999999999999991, 0.80000000000000004 },\n-  { 1.1815758115929846, 0.39999999999999991, 0.90000000000000002 },\n+  { 1.6080486199305128, 0.30000000000000004, 0.0000000000000000, 0.0 },\n+  { 1.6960848815118228, 0.30000000000000004, 0.10000000000000001, 0.0 },\n+  { 1.8002173372290500, 0.30000000000000004, 0.20000000000000001, 0.0 },\n+  { 1.9260216862473254, 0.30000000000000004, 0.30000000000000004, 0.0 },\n+  { 2.0822121773175533, 0.30000000000000004, 0.40000000000000002, 0.0 },\n+  { 2.2833505881933975, 0.30000000000000004, 0.50000000000000000, 0.0 },\n+  { 2.5560975528589065, 0.30000000000000004, 0.60000000000000009, 0.0 },\n+  { 2.9562123549913877, 0.30000000000000004, 0.70000000000000007, 0.0 },\n+  { 3.6283050484567174, 0.30000000000000004, 0.80000000000000004, 0.0 },\n+  { 5.1479514944016795, 0.30000000000000004, 0.90000000000000002, 0.0 },\n };\n-\n-// Test function for k=0.39999999999999991.\n-template <typename Tp>\n-void test014()\n+const double toler013 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.40000000000000013.\n+// max(|f - f_Boost|): 2.6645352591003757e-15 at index 9\n+// max(|f - f_Boost| / |f_Boost|): 6.7696531428672557e-16\n+// mean(f - f_Boost): 1.1990408665951691e-15\n+// variance(f - f_Boost): 2.6514491536595121e-31\n+// stddev(f - f_Boost): 5.1492224205791612e-16\n+const testcase_comp_ellint_3<double>\n+data014[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data014)\n-                         / sizeof(testcase_comp_ellint_3<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::comp_ellint_3(Tp(data014[i].k), Tp(data014[i].nu));\n-      const Tp f0 = data014[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-}\n-\n-// Test data for k=0.50000000000000000.\n-testcase_comp_ellint_3<double> data015[] = {\n-  { 1.6857503548125963, 0.50000000000000000, 0.0000000000000000 },\n-  { 1.6045524936084892, 0.50000000000000000, 0.10000000000000001 },\n-  { 1.5338490483665983, 0.50000000000000000, 0.20000000000000001 },\n-  { 1.4715681939859637, 0.50000000000000000, 0.29999999999999999 },\n-  { 1.4161679518465340, 0.50000000000000000, 0.40000000000000002 },\n-  { 1.3664739530045971, 0.50000000000000000, 0.50000000000000000 },\n-  { 1.3215740290190876, 0.50000000000000000, 0.59999999999999998 },\n-  { 1.2807475181182502, 0.50000000000000000, 0.69999999999999996 },\n-  { 1.2434165408189539, 0.50000000000000000, 0.80000000000000004 },\n-  { 1.2091116095504744, 0.50000000000000000, 0.90000000000000002 },\n+  { 1.6399998658645112, 0.40000000000000013, 0.0000000000000000, 0.0 },\n+  { 1.7306968836847190, 0.40000000000000013, 0.10000000000000001, 0.0 },\n+  { 1.8380358826317629, 0.40000000000000013, 0.20000000000000001, 0.0 },\n+  { 1.9677924132520141, 0.40000000000000013, 0.30000000000000004, 0.0 },\n+  { 2.1289968719280030, 0.40000000000000013, 0.40000000000000002, 0.0 },\n+  { 2.3367461373176512, 0.40000000000000013, 0.50000000000000000, 0.0 },\n+  { 2.6186940209850196, 0.40000000000000013, 0.60000000000000009, 0.0 },\n+  { 3.0327078743873246, 0.40000000000000013, 0.70000000000000007, 0.0 },\n+  { 3.7289548002199906, 0.40000000000000013, 0.80000000000000004, 0.0 },\n+  { 5.3055535102872522, 0.40000000000000013, 0.90000000000000002, 0.0 },\n };\n+const double toler014 = 2.5000000000000020e-13;\n \n-// Test function for k=0.50000000000000000.\n-template <typename Tp>\n-void test015()\n+// Test data for k=0.50000000000000000.\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 3\n+// max(|f - f_Boost| / |f_Boost|): 2.1900131385114407e-16\n+// mean(f - f_Boost): 2.4424906541753446e-16\n+// variance(f - f_Boost): 7.3651365379430888e-33\n+// stddev(f - f_Boost): 8.5820373676319358e-17\n+const testcase_comp_ellint_3<double>\n+data015[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data015)\n-                         / sizeof(testcase_comp_ellint_3<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::comp_ellint_3(Tp(data015[i].k), Tp(data015[i].nu));\n-      const Tp f0 = data015[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-}\n-\n-// Test data for k=0.60000000000000009.\n-testcase_comp_ellint_3<double> data016[] = {\n-  { 1.7507538029157526, 0.60000000000000009, 0.0000000000000000 },\n-  { 1.6648615773343014, 0.60000000000000009, 0.10000000000000001 },\n-  { 1.5901418016279374, 0.60000000000000009, 0.20000000000000001 },\n-  { 1.5243814243493585, 0.60000000000000009, 0.29999999999999999 },\n-  { 1.4659345278069984, 0.60000000000000009, 0.40000000000000002 },\n-  { 1.4135484285693078, 0.60000000000000009, 0.50000000000000000 },\n-  { 1.3662507535812816, 0.60000000000000009, 0.59999999999999998 },\n-  { 1.3232737468822811, 0.60000000000000009, 0.69999999999999996 },\n-  { 1.2840021261752192, 0.60000000000000009, 0.80000000000000004 },\n-  { 1.2479362973851875, 0.60000000000000009, 0.90000000000000002 },\n+  { 1.6857503548125961, 0.50000000000000000, 0.0000000000000000, 0.0 },\n+  { 1.7803034946545482, 0.50000000000000000, 0.10000000000000001, 0.0 },\n+  { 1.8922947612264021, 0.50000000000000000, 0.20000000000000001, 0.0 },\n+  { 2.0277924458111314, 0.50000000000000000, 0.30000000000000004, 0.0 },\n+  { 2.1962905366178065, 0.50000000000000000, 0.40000000000000002, 0.0 },\n+  { 2.4136715042011945, 0.50000000000000000, 0.50000000000000000, 0.0 },\n+  { 2.7090491861753558, 0.50000000000000000, 0.60000000000000009, 0.0 },\n+  { 3.1433945297859229, 0.50000000000000000, 0.70000000000000007, 0.0 },\n+  { 3.8750701888108070, 0.50000000000000000, 0.80000000000000004, 0.0 },\n+  { 5.5355132096026463, 0.50000000000000000, 0.90000000000000002, 0.0 },\n };\n+const double toler015 = 2.5000000000000020e-13;\n \n-// Test function for k=0.60000000000000009.\n-template <typename Tp>\n-void test016()\n+// Test data for k=0.60000000000000009.\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 2\n+// max(|f - f_Boost| / |f_Boost|): 2.2547200163366559e-16\n+// mean(f - f_Boost): -2.2204460492503131e-16\n+// variance(f - f_Boost): 6.0868897007794117e-33\n+// stddev(f - f_Boost): 7.8018521523926690e-17\n+const testcase_comp_ellint_3<double>\n+data016[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data016)\n-                         / sizeof(testcase_comp_ellint_3<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::comp_ellint_3(Tp(data016[i].k), Tp(data016[i].nu));\n-      const Tp f0 = data016[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-}\n-\n-// Test data for k=0.69999999999999996.\n-testcase_comp_ellint_3<double> data017[] = {\n-  { 1.8456939983747236, 0.69999999999999996, 0.0000000000000000 },\n-  { 1.7528050171757608, 0.69999999999999996, 0.10000000000000001 },\n-  { 1.6721098780092147, 0.69999999999999996, 0.20000000000000001 },\n-  { 1.6011813647733213, 0.69999999999999996, 0.29999999999999999 },\n-  { 1.5382162002954762, 0.69999999999999996, 0.40000000000000002 },\n-  { 1.4818433192178544, 0.69999999999999996, 0.50000000000000000 },\n-  { 1.4309994736080540, 0.69999999999999996, 0.59999999999999998 },\n-  { 1.3848459188329196, 0.69999999999999996, 0.69999999999999996 },\n-  { 1.3427110650397533, 0.69999999999999996, 0.80000000000000004 },\n-  { 1.3040500499695911, 0.69999999999999996, 0.90000000000000002 },\n+  { 1.7507538029157526, 0.60000000000000009, 0.0000000000000000, 0.0 },\n+  { 1.8508766487100687, 0.60000000000000009, 0.10000000000000001, 0.0 },\n+  { 1.9695980282802217, 0.60000000000000009, 0.20000000000000001, 0.0 },\n+  { 2.1134154405060599, 0.60000000000000009, 0.30000000000000004, 0.0 },\n+  { 2.2925036420985130, 0.60000000000000009, 0.40000000000000002, 0.0 },\n+  { 2.5239007084492711, 0.60000000000000009, 0.50000000000000000, 0.0 },\n+  { 2.8388723099514976, 0.60000000000000009, 0.60000000000000009, 0.0 },\n+  { 3.3029735898397159, 0.60000000000000009, 0.70000000000000007, 0.0 },\n+  { 4.0867036409261832, 0.60000000000000009, 0.80000000000000004, 0.0 },\n+  { 5.8709993116265613, 0.60000000000000009, 0.90000000000000002, 0.0 },\n };\n-\n-// Test function for k=0.69999999999999996.\n-template <typename Tp>\n-void test017()\n+const double toler016 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.70000000000000018.\n+// max(|f - f_Boost|): 1.7763568394002505e-15 at index 9\n+// max(|f - f_Boost| / |f_Boost|): 2.9298727220933567e-16\n+// mean(f - f_Boost): 4.8849813083506892e-16\n+// variance(f - f_Boost): 2.0476296953421943e-31\n+// stddev(f - f_Boost): 4.5250742483877478e-16\n+const testcase_comp_ellint_3<double>\n+data017[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data017)\n-                         / sizeof(testcase_comp_ellint_3<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::comp_ellint_3(Tp(data017[i].k), Tp(data017[i].nu));\n-      const Tp f0 = data017[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-}\n-\n-// Test data for k=0.80000000000000004.\n-testcase_comp_ellint_3<double> data018[] = {\n-  { 1.9953027776647296, 0.80000000000000004, 0.0000000000000000 },\n-  { 1.8910755418379521, 0.80000000000000004, 0.10000000000000001 },\n-  { 1.8007226661734588, 0.80000000000000004, 0.20000000000000001 },\n-  { 1.7214611048717301, 0.80000000000000004, 0.29999999999999999 },\n-  { 1.6512267838651289, 0.80000000000000004, 0.40000000000000002 },\n-  { 1.5884528947755532, 0.80000000000000004, 0.50000000000000000 },\n-  { 1.5319262547427865, 0.80000000000000004, 0.59999999999999998 },\n-  { 1.4806912324625332, 0.80000000000000004, 0.69999999999999996 },\n-  { 1.4339837018309474, 0.80000000000000004, 0.80000000000000004 },\n-  { 1.3911845406776222, 0.80000000000000004, 0.90000000000000002 },\n+  { 1.8456939983747238, 0.70000000000000018, 0.0000000000000000, 0.0 },\n+  { 1.9541347343119566, 0.70000000000000018, 0.10000000000000001, 0.0 },\n+  { 2.0829290325820207, 0.70000000000000018, 0.20000000000000001, 0.0 },\n+  { 2.2392290510988540, 0.70000000000000018, 0.30000000000000004, 0.0 },\n+  { 2.4342502915307880, 0.70000000000000018, 0.40000000000000002, 0.0 },\n+  { 2.6868019968237000, 0.70000000000000018, 0.50000000000000000, 0.0 },\n+  { 3.0314573496746746, 0.70000000000000018, 0.60000000000000009, 0.0 },\n+  { 3.5408408771788569, 0.70000000000000018, 0.70000000000000007, 0.0 },\n+  { 4.4042405729076970, 0.70000000000000018, 0.80000000000000004, 0.0 },\n+  { 6.3796094177887763, 0.70000000000000018, 0.90000000000000002, 0.0 },\n };\n+const double toler017 = 2.5000000000000020e-13;\n \n-// Test function for k=0.80000000000000004.\n-template <typename Tp>\n-void test018()\n+// Test data for k=0.80000000000000004.\n+// max(|f - f_Boost|): 1.7763568394002505e-15 at index 8\n+// max(|f - f_Boost| / |f_Boost|): 4.1949393471095187e-16\n+// mean(f - f_Boost): 9.5479180117763459e-16\n+// variance(f - f_Boost): 5.4782007307014711e-34\n+// stddev(f - f_Boost): 2.3405556457178006e-17\n+const testcase_comp_ellint_3<double>\n+data018[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data018)\n-                         / sizeof(testcase_comp_ellint_3<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::comp_ellint_3(Tp(data018[i].k), Tp(data018[i].nu));\n-      const Tp f0 = data018[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-}\n-\n-// Test data for k=0.89999999999999991.\n-testcase_comp_ellint_3<double> data019[] = {\n-  { 2.2805491384227699, 0.89999999999999991, 0.0000000000000000 },\n-  { 2.1537868513875282, 0.89999999999999991, 0.10000000000000001 },\n-  { 2.0443194576468890, 0.89999999999999991, 0.20000000000000001 },\n-  { 1.9486280260314424, 0.89999999999999991, 0.29999999999999999 },\n-  { 1.8641114227238347, 0.89999999999999991, 0.40000000000000002 },\n-  { 1.7888013241937859, 0.89999999999999991, 0.50000000000000000 },\n-  { 1.7211781128919521, 0.89999999999999991, 0.59999999999999998 },\n-  { 1.6600480747670936, 0.89999999999999991, 0.69999999999999996 },\n-  { 1.6044591960982200, 0.89999999999999991, 0.80000000000000004 },\n-  { 1.5536420236310944, 0.89999999999999991, 0.90000000000000002 },\n+  { 1.9953027776647294, 0.80000000000000004, 0.0000000000000000, 0.0 },\n+  { 2.1172616484005085, 0.80000000000000004, 0.10000000000000001, 0.0 },\n+  { 2.2624789434186798, 0.80000000000000004, 0.20000000000000001, 0.0 },\n+  { 2.4392042002725698, 0.80000000000000004, 0.30000000000000004, 0.0 },\n+  { 2.6604037035529728, 0.80000000000000004, 0.40000000000000002, 0.0 },\n+  { 2.9478781158239751, 0.80000000000000004, 0.50000000000000000, 0.0 },\n+  { 3.3418121892288055, 0.80000000000000004, 0.60000000000000009, 0.0 },\n+  { 3.9268876980046397, 0.80000000000000004, 0.70000000000000007, 0.0 },\n+  { 4.9246422058196071, 0.80000000000000004, 0.80000000000000004, 0.0 },\n+  { 7.2263259298637132, 0.80000000000000004, 0.90000000000000002, 0.0 },\n };\n-\n-// Test function for k=0.89999999999999991.\n-template <typename Tp>\n-void test019()\n+const double toler018 = 2.5000000000000020e-13;\n+\n+// Test data for k=0.90000000000000013.\n+// max(|f - f_Boost|): 4.4408920985006262e-16 at index 3\n+// max(|f - f_Boost| / |f_Boost|): 1.5716352001310461e-16\n+// mean(f - f_Boost): 4.4408920985006264e-17\n+// variance(f - f_Boost): 2.4347558803117648e-34\n+// stddev(f - f_Boost): 1.5603704304785339e-17\n+const testcase_comp_ellint_3<double>\n+data019[10] =\n {\n-  const Tp eps = std::numeric_limits<Tp>::epsilon();\n-  Tp max_abs_diff = -Tp(1);\n-  Tp max_abs_frac = -Tp(1);\n-  unsigned int num_datum = sizeof(data019)\n-                         / sizeof(testcase_comp_ellint_3<double>);\n-  for (unsigned int i = 0; i < num_datum; ++i)\n-    {\n-      const Tp f = std::tr1::comp_ellint_3(Tp(data019[i].k), Tp(data019[i].nu));\n-      const Tp f0 = data019[i].f0;\n-      const Tp diff = f - f0;\n-      if (std::abs(diff) > max_abs_diff)\n-        max_abs_diff = std::abs(diff);\n-      if (std::abs(f0) > Tp(10) * eps\n-       && std::abs(f) > Tp(10) * eps)\n-        {\n-          const Tp frac = diff / f0;\n-          if (std::abs(frac) > max_abs_frac)\n-            max_abs_frac = std::abs(frac);\n-        }\n-    }\n-  VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-}\n+  { 2.2805491384227707, 0.90000000000000013, 0.0000000000000000, 0.0 },\n+  { 2.4295011187834890, 0.90000000000000013, 0.10000000000000001, 0.0 },\n+  { 2.6076835743348421, 0.90000000000000013, 0.20000000000000001, 0.0 },\n+  { 2.8256506968858521, 0.90000000000000013, 0.30000000000000004, 0.0 },\n+  { 3.1000689868578628, 0.90000000000000013, 0.40000000000000002, 0.0 },\n+  { 3.4591069002104686, 0.90000000000000013, 0.50000000000000000, 0.0 },\n+  { 3.9549939883570242, 0.90000000000000013, 0.60000000000000009, 0.0 },\n+  { 4.6985482312992453, 0.90000000000000013, 0.70000000000000007, 0.0 },\n+  { 5.9820740813645727, 0.90000000000000013, 0.80000000000000004, 0.0 },\n+  { 8.9942562031858735, 0.90000000000000013, 0.90000000000000002, 0.0 },\n+};\n+const double toler019 = 2.5000000000000020e-13;\n+\n+template<typename Ret, unsigned int Num>\n+  void\n+  test(const testcase_comp_ellint_3<Ret> (&data)[Num], Ret toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Ret eps = std::numeric_limits<Ret>::epsilon();\n+    Ret max_abs_diff = -Ret(1);\n+    Ret max_abs_frac = -Ret(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+      {\n+\tconst Ret f = std::tr1::comp_ellint_3(data[i].k, data[i].nu);\n+\tconst Ret f0 = data[i].f0;\n+\tconst Ret diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Ret(10) * eps\n+\t && std::abs(f) > Ret(10) * eps)\n+\t  {\n+\t    const Ret frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n \n-int main(int, char**)\n+int\n+main()\n {\n-  test001<double>();\n-  test002<double>();\n-  test003<double>();\n-  test004<double>();\n-  test005<double>();\n-  test006<double>();\n-  test007<double>();\n-  test008<double>();\n-  test009<double>();\n-  test010<double>();\n-  test011<double>();\n-  test012<double>();\n-  test013<double>();\n-  test014<double>();\n-  test015<double>();\n-  test016<double>();\n-  test017<double>();\n-  test018<double>();\n-  test019<double>();\n+  test(data001, toler001);\n+  test(data002, toler002);\n+  test(data003, toler003);\n+  test(data004, toler004);\n+  test(data005, toler005);\n+  test(data006, toler006);\n+  test(data007, toler007);\n+  test(data008, toler008);\n+  test(data009, toler009);\n+  test(data010, toler010);\n+  test(data011, toler011);\n+  test(data012, toler012);\n+  test(data013, toler013);\n+  test(data014, toler014);\n+  test(data015, toler015);\n+  test(data016, toler016);\n+  test(data017, toler017);\n+  test(data018, toler018);\n+  test(data019, toler019);\n   return 0;\n }"}, {"sha": "7b274d64d2b2870e462e18ce88f1e3e62cf68ed1", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/06_comp_ellint_3/pr66689.cc", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F06_comp_ellint_3%2Fpr66689.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F06_comp_ellint_3%2Fpr66689.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F06_comp_ellint_3%2Fpr66689.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -0,0 +1,20 @@\n+\n+#include <tr1/cmath>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  double Pi1 = std::tr1::comp_ellint_3(0.75, 0.0);\n+  VERIFY(std::abs(Pi1 - 1.91099) < 0.00001);\n+\n+  double Pi2 = std::tr1::comp_ellint_3(0.75, 0.5);\n+  VERIFY(std::abs(Pi2 - 2.80011) < 0.00001);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9366b47a0b73f64cd58124c6f63fe06a9e852131", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/07_conf_hyperg/check_value.cc", "status": "modified", "additions": 3753, "deletions": 5126, "changes": 8879, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F07_conf_hyperg%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F07_conf_hyperg%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F07_conf_hyperg%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}, {"sha": "a61251b8f1ac4f607a04f3771717c2bc728c0ef1", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/08_cyl_bessel_i/check_value.cc", "status": "modified", "additions": 648, "deletions": 1023, "changes": 1671, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F08_cyl_bessel_i%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F08_cyl_bessel_i%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F08_cyl_bessel_i%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe", "patch": "@@ -1,6 +1,7 @@\n-// 2007-02-04  Edward Smith-Rowland <3dw4rd@verizon.net>\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-D__STDCPP_WANT_MATH_SPEC_FUNCS__\" }\n //\n-// Copyright (C) 2007-2017 Free Software Foundation, Inc.\n+// Copyright (C) 2016-2017 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,1110 +19,734 @@\n // <http://www.gnu.org/licenses/>.\n \n //  cyl_bessel_i\n-\n-\n //  Compare against values generated by the GNU Scientific Library.\n //  The GSL can be found on the web: http://www.gnu.org/software/gsl/\n-\n+#include <limits>\n #include <tr1/cmath>\n #if defined(__TEST_DEBUG)\n-#include <iostream>\n-#define VERIFY(A) \\\n-if (!(A)) \\\n-  { \\\n-    std::cout << \"line \" << __LINE__ \\\n-      << \"  max_abs_frac = \" << max_abs_frac \\\n-      << std::endl; \\\n-  }\n+#  include <iostream>\n+#  define VERIFY(A) \\\n+  if (!(A)) \\\n+    { \\\n+      std::cout << \"line \" << __LINE__ \\\n+\t<< \"  max_abs_frac = \" << max_abs_frac \\\n+\t<< std::endl; \\\n+    }\n #else\n-#include <testsuite_hooks.h>\n+#  include <testsuite_hooks.h>\n #endif\n-#include \"../testcase.h\"\n-\n+#include <specfun_testcase.h>\n \n // Test data for nu=0.0000000000000000.\n-testcase_cyl_bessel_i<double> data001[] = {\n-  { 1.0000000000000000, 0.0000000000000000, 0.0000000000000000 },\n-  { 1.0156861412236078, 0.0000000000000000, 0.25000000000000000 },\n-  { 1.0634833707413236, 0.0000000000000000, 0.50000000000000000 },\n-  { 1.1456467780440014, 0.0000000000000000, 0.75000000000000000 },\n-  { 1.2660658777520082, 0.0000000000000000, 1.0000000000000000 },\n-  { 1.4304687177218294, 0.0000000000000000, 1.2500000000000000 },\n-  { 1.6467231897728904, 0.0000000000000000, 1.5000000000000000 },\n-  { 1.9252521538585023, 0.0000000000000000, 1.7500000000000000 },\n-  { 2.2795853023360668, 0.0000000000000000, 2.0000000000000000 },\n-  { 2.7270783071907951, 0.0000000000000000, 2.2500000000000000 },\n-  { 3.2898391440501231, 0.0000000000000000, 2.5000000000000000 },\n-  { 3.9959131072376550, 0.0000000000000000, 2.7500000000000000 },\n-  { 4.8807925858650245, 0.0000000000000000, 3.0000000000000000 },\n-  { 5.9893359979395138, 0.0000000000000000, 3.2500000000000000 },\n-  { 7.3782034322254750, 0.0000000000000000, 3.5000000000000000 },\n-  { 9.1189458608445655, 0.0000000000000000, 3.7500000000000000 },\n-  { 11.301921952136325, 0.0000000000000000, 4.0000000000000000 },\n-  { 14.041263683000595, 0.0000000000000000, 4.2500000000000000 },\n-  { 17.481171855609272, 0.0000000000000000, 4.5000000000000000 },\n-  { 21.803898740902120, 0.0000000000000000, 4.7500000000000000 },\n-  { 27.239871823604439, 0.0000000000000000, 5.0000000000000000 },\n+// max(|f - f_GSL|): 5.2402526762307389e-14 at index 12\n+// max(|f - f_GSL| / |f_GSL|): 1.0747725055352992e-14\n+// mean(f - f_GSL): -1.9624513654326576e-14\n+// variance(f - f_GSL): 4.0630093099383162e-30\n+// stddev(f - f_GSL): 2.0156907773610308e-15\n+const testcase_cyl_bessel_i<double>\n+data007[21] =\n+{\n+  { 1.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 1.0156861412236078, 0.0000000000000000, 0.25000000000000000, 0.0 },\n+  { 1.0634833707413236, 0.0000000000000000, 0.50000000000000000, 0.0 },\n+  { 1.1456467780440014, 0.0000000000000000, 0.75000000000000000, 0.0 },\n+  { 1.2660658777520082, 0.0000000000000000, 1.0000000000000000, 0.0 },\n+  { 1.4304687177218294, 0.0000000000000000, 1.2500000000000000, 0.0 },\n+  { 1.6467231897728904, 0.0000000000000000, 1.5000000000000000, 0.0 },\n+  { 1.9252521538585021, 0.0000000000000000, 1.7500000000000000, 0.0 },\n+  { 2.2795853023360668, 0.0000000000000000, 2.0000000000000000, 0.0 },\n+  { 2.7270783071907951, 0.0000000000000000, 2.2500000000000000, 0.0 },\n+  { 3.2898391440501231, 0.0000000000000000, 2.5000000000000000, 0.0 },\n+  { 3.9959131072376550, 0.0000000000000000, 2.7500000000000000, 0.0 },\n+  { 4.8807925858650245, 0.0000000000000000, 3.0000000000000000, 0.0 },\n+  { 5.9893359979395138, 0.0000000000000000, 3.2500000000000000, 0.0 },\n+  { 7.3782034322254750, 0.0000000000000000, 3.5000000000000000, 0.0 },\n+  { 9.1189458608445655, 0.0000000000000000, 3.7500000000000000, 0.0 },\n+  { 11.301921952136325, 0.0000000000000000, 4.0000000000000000, 0.0 },\n+  { 14.041263683000595, 0.0000000000000000, 4.2500000000000000, 0.0 },\n+  { 17.481171855609272, 0.0000000000000000, 4.5000000000000000, 0.0 },\n+  { 21.803898740902120, 0.0000000000000000, 4.7500000000000000, 0.0 },\n+  { 27.239871823604439, 0.0000000000000000, 5.0000000000000000, 0.0 },\n };\n-\n-// Test function for nu=0.0000000000000000.\n-template<typename Tp>\n-  void\n-  test001()\n-  {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n-    unsigned int num_datum = sizeof(data001)\n-\t\t\t   / sizeof(testcase_cyl_bessel_i<double>);\n-    for (unsigned int i = 0; i < num_datum; ++i)\n-      {\n-\tconst Tp f = std::tr1::cyl_bessel_i(Tp(data001[i].nu), Tp(data001[i].x));\n-\tconst Tp f0 = data001[i].f0;\n-\tconst Tp diff = f - f0;\n-\tif (std::abs(diff) > max_abs_diff)\n-\t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n-\t  {\n-\t    const Tp frac = diff / f0;\n-\t    if (std::abs(frac) > max_abs_frac)\n-\t      max_abs_frac = std::abs(frac);\n-\t  }\n-      }\n-    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-  }\n+const double toler007 = 1.0000000000000008e-12;\n \n // Test data for nu=0.33333333333333331.\n-testcase_cyl_bessel_i<double> data002[] = {\n-  { 0.0000000000000000, 0.33333333333333331, 0.0000000000000000 },\n-  { 0.56650686557808660, 0.33333333333333331, 0.25000000000000000 },\n-  { 0.73897315642511863, 0.33333333333333331, 0.50000000000000000 },\n-  { 0.89532320365836804, 0.33333333333333331, 0.75000000000000000 },\n-  { 1.0646313978895285, 0.33333333333333331, 1.0000000000000000 },\n-  { 1.2623776732605250, 0.33333333333333331, 1.2500000000000000 },\n-  { 1.5014290000224382, 0.33333333333333331, 1.5000000000000000 },\n-  { 1.7951195525946044, 0.33333333333333331, 1.7500000000000000 },\n-  { 2.1587825813728614, 0.33333333333333331, 2.0000000000000000 },\n-  { 2.6109134564811405, 0.33333333333333331, 2.2500000000000000 },\n-  { 3.1743242297241938, 0.33333333333333331, 2.5000000000000000 },\n-  { 3.8774551722182107, 0.33333333333333331, 2.7500000000000000 },\n-  { 4.7559569371646946, 0.33333333333333331, 3.0000000000000000 },\n-  { 5.8546499652731825, 0.33333333333333331, 3.2500000000000000 },\n-  { 7.2299798619171147, 0.33333333333333331, 3.5000000000000000 },\n-  { 8.9531114355506318, 0.33333333333333331, 3.7500000000000000 },\n-  { 11.113838389991479, 0.33333333333333331, 4.0000000000000000 },\n-  { 13.825531136529117, 0.33333333333333331, 4.2500000000000000 },\n-  { 17.231403968478318, 0.33333333333333331, 4.5000000000000000 },\n-  { 21.512458099556554, 0.33333333333333331, 4.7500000000000000 },\n-  { 26.897553069268362, 0.33333333333333331, 5.0000000000000000 },\n+// max(|f - f_GSL|): 6.2172489379008766e-15 at index 14\n+// max(|f - f_GSL| / |f_GSL|): 9.1624880778907085e-16\n+// mean(f - f_GSL): 1.1525172350870673e-15\n+// variance(f - f_GSL): 6.9735538801568761e-32\n+// stddev(f - f_GSL): 2.6407487347638500e-16\n+const testcase_cyl_bessel_i<double>\n+data008[21] =\n+{\n+  { 0.0000000000000000, 0.33333333333333331, 0.0000000000000000, 0.0 },\n+  { 0.56650686557808660, 0.33333333333333331, 0.25000000000000000, 0.0 },\n+  { 0.73897315642511863, 0.33333333333333331, 0.50000000000000000, 0.0 },\n+  { 0.89532320365836815, 0.33333333333333331, 0.75000000000000000, 0.0 },\n+  { 1.0646313978895283, 0.33333333333333331, 1.0000000000000000, 0.0 },\n+  { 1.2623776732605250, 0.33333333333333331, 1.2500000000000000, 0.0 },\n+  { 1.5014290000224382, 0.33333333333333331, 1.5000000000000000, 0.0 },\n+  { 1.7951195525946040, 0.33333333333333331, 1.7500000000000000, 0.0 },\n+  { 2.1587825813728614, 0.33333333333333331, 2.0000000000000000, 0.0 },\n+  { 2.6109134564811405, 0.33333333333333331, 2.2500000000000000, 0.0 },\n+  { 3.1743242297241938, 0.33333333333333331, 2.5000000000000000, 0.0 },\n+  { 3.8774551722182093, 0.33333333333333331, 2.7500000000000000, 0.0 },\n+  { 4.7559569371646946, 0.33333333333333331, 3.0000000000000000, 0.0 },\n+  { 5.8546499652731825, 0.33333333333333331, 3.2500000000000000, 0.0 },\n+  { 7.2299798619171129, 0.33333333333333331, 3.5000000000000000, 0.0 },\n+  { 8.9531114355506318, 0.33333333333333331, 3.7500000000000000, 0.0 },\n+  { 11.113838389991479, 0.33333333333333331, 4.0000000000000000, 0.0 },\n+  { 13.825531136529117, 0.33333333333333331, 4.2500000000000000, 0.0 },\n+  { 17.231403968478318, 0.33333333333333331, 4.5000000000000000, 0.0 },\n+  { 21.512458099556554, 0.33333333333333331, 4.7500000000000000, 0.0 },\n+  { 26.897553069268362, 0.33333333333333331, 5.0000000000000000, 0.0 },\n };\n-\n-// Test function for nu=0.33333333333333331.\n-template<typename Tp>\n-  void\n-  test002()\n-  {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n-    unsigned int num_datum = sizeof(data002)\n-\t\t\t   / sizeof(testcase_cyl_bessel_i<double>);\n-    for (unsigned int i = 0; i < num_datum; ++i)\n-      {\n-\tconst Tp f = std::tr1::cyl_bessel_i(Tp(data002[i].nu), Tp(data002[i].x));\n-\tconst Tp f0 = data002[i].f0;\n-\tconst Tp diff = f - f0;\n-\tif (std::abs(diff) > max_abs_diff)\n-\t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n-\t  {\n-\t    const Tp frac = diff / f0;\n-\t    if (std::abs(frac) > max_abs_frac)\n-\t      max_abs_frac = std::abs(frac);\n-\t  }\n-      }\n-    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-  }\n+const double toler008 = 2.5000000000000020e-13;\n \n // Test data for nu=0.50000000000000000.\n-testcase_cyl_bessel_i<double> data003[] = {\n-  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000 },\n-  { 0.40311093489975897, 0.50000000000000000, 0.25000000000000000 },\n-  { 0.58799308679041573, 0.50000000000000000, 0.50000000000000000 },\n-  { 0.75761498638991298, 0.50000000000000000, 0.75000000000000000 },\n-  { 0.93767488824548695, 0.50000000000000000, 1.0000000000000000 },\n-  { 1.1432089853159872, 0.50000000000000000, 1.2500000000000000 },\n-  { 1.3871617204034761, 0.50000000000000000, 1.5000000000000000 },\n-  { 1.6830217804556815, 0.50000000000000000, 1.7500000000000000 },\n-  { 2.0462368630890526, 0.50000000000000000, 2.0000000000000000 },\n-  { 2.4953405089360041, 0.50000000000000000, 2.2500000000000000 },\n-  { 3.0530935381967175, 0.50000000000000000, 2.5000000000000000 },\n-  { 3.7477882494879449, 0.50000000000000000, 2.7500000000000000 },\n-  { 4.6148229034075969, 0.50000000000000000, 3.0000000000000000 },\n-  { 5.6986505325335495, 0.50000000000000000, 3.2500000000000000 },\n-  { 7.0552194086911877, 0.50000000000000000, 3.5000000000000000 },\n-  { 8.7550467841188944, 0.50000000000000000, 3.7500000000000000 },\n-  { 10.887101798588422, 0.50000000000000000, 4.0000000000000000 },\n-  { 13.563718712579764, 0.50000000000000000, 4.2500000000000000 },\n-  { 16.926820080158183, 0.50000000000000000, 4.5000000000000000 },\n-  { 21.155804306570005, 0.50000000000000000, 4.7500000000000000 },\n-  { 26.477547497559065, 0.50000000000000000, 5.0000000000000000 },\n+// max(|f - f_GSL|): 1.4210854715202004e-14 at index 19\n+// max(|f - f_GSL| / |f_GSL|): 9.6042704318763827e-16\n+// mean(f - f_GSL): 1.9296733523246769e-16\n+// variance(f - f_GSL): 1.9549106045027772e-33\n+// stddev(f - f_GSL): 4.4214371017835108e-17\n+const testcase_cyl_bessel_i<double>\n+data009[21] =\n+{\n+  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000, 0.0 },\n+  { 0.40311093489975897, 0.50000000000000000, 0.25000000000000000, 0.0 },\n+  { 0.58799308679041573, 0.50000000000000000, 0.50000000000000000, 0.0 },\n+  { 0.75761498638991298, 0.50000000000000000, 0.75000000000000000, 0.0 },\n+  { 0.93767488824548695, 0.50000000000000000, 1.0000000000000000, 0.0 },\n+  { 1.1432089853159872, 0.50000000000000000, 1.2500000000000000, 0.0 },\n+  { 1.3871617204034761, 0.50000000000000000, 1.5000000000000000, 0.0 },\n+  { 1.6830217804556813, 0.50000000000000000, 1.7500000000000000, 0.0 },\n+  { 2.0462368630890526, 0.50000000000000000, 2.0000000000000000, 0.0 },\n+  { 2.4953405089360046, 0.50000000000000000, 2.2500000000000000, 0.0 },\n+  { 3.0530935381967175, 0.50000000000000000, 2.5000000000000000, 0.0 },\n+  { 3.7477882494879449, 0.50000000000000000, 2.7500000000000000, 0.0 },\n+  { 4.6148229034075969, 0.50000000000000000, 3.0000000000000000, 0.0 },\n+  { 5.6986505325335486, 0.50000000000000000, 3.2500000000000000, 0.0 },\n+  { 7.0552194086911859, 0.50000000000000000, 3.5000000000000000, 0.0 },\n+  { 8.7550467841188979, 0.50000000000000000, 3.7500000000000000, 0.0 },\n+  { 10.887101798588422, 0.50000000000000000, 4.0000000000000000, 0.0 },\n+  { 13.563718712579764, 0.50000000000000000, 4.2500000000000000, 0.0 },\n+  { 16.926820080158183, 0.50000000000000000, 4.5000000000000000, 0.0 },\n+  { 21.155804306570005, 0.50000000000000000, 4.7500000000000000, 0.0 },\n+  { 26.477547497559065, 0.50000000000000000, 5.0000000000000000, 0.0 },\n };\n-\n-// Test function for nu=0.50000000000000000.\n-template<typename Tp>\n-  void\n-  test003()\n-  {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n-    unsigned int num_datum = sizeof(data003)\n-\t\t\t   / sizeof(testcase_cyl_bessel_i<double>);\n-    for (unsigned int i = 0; i < num_datum; ++i)\n-      {\n-\tconst Tp f = std::tr1::cyl_bessel_i(Tp(data003[i].nu), Tp(data003[i].x));\n-\tconst Tp f0 = data003[i].f0;\n-\tconst Tp diff = f - f0;\n-\tif (std::abs(diff) > max_abs_diff)\n-\t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n-\t  {\n-\t    const Tp frac = diff / f0;\n-\t    if (std::abs(frac) > max_abs_frac)\n-\t      max_abs_frac = std::abs(frac);\n-\t  }\n-      }\n-    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-  }\n+const double toler009 = 2.5000000000000020e-13;\n \n // Test data for nu=0.66666666666666663.\n-testcase_cyl_bessel_i<double> data004[] = {\n-  { 0.0000000000000000, 0.66666666666666663, 0.0000000000000000 },\n-  { 0.27953690613200438, 0.66666666666666663, 0.25000000000000000 },\n-  { 0.45628323113556879, 0.66666666666666663, 0.50000000000000000 },\n-  { 0.62594569838182612, 0.66666666666666663, 0.75000000000000000 },\n-  { 0.80752128860612948, 0.66666666666666663, 1.0000000000000000 },\n-  { 1.0139484513577168, 0.66666666666666663, 1.2500000000000000 },\n-  { 1.2572918396962991, 0.66666666666666663, 1.5000000000000000 },\n-  { 1.5505806938325577, 0.66666666666666663, 1.7500000000000000 },\n-  { 1.9089492968236206, 0.66666666666666663, 2.0000000000000000 },\n-  { 2.3506463490300331, 0.66666666666666663, 2.2500000000000000 },\n-  { 2.8981161894224892, 0.66666666666666663, 2.5000000000000000 },\n-  { 3.5792654911068720, 0.66666666666666663, 2.7500000000000000 },\n-  { 4.4290087213549505, 0.66666666666666663, 3.0000000000000000 },\n-  { 5.4911895720097688, 0.66666666666666663, 3.2500000000000000 },\n-  { 6.8209918044137305, 0.66666666666666663, 3.5000000000000000 },\n-  { 8.4879784249619767, 0.66666666666666663, 3.7500000000000000 },\n-  { 10.579932774013002, 0.66666666666666663, 4.0000000000000000 },\n-  { 13.207720355482458, 0.66666666666666663, 4.2500000000000000 },\n-  { 16.511448404200543, 0.66666666666666663, 4.5000000000000000 },\n-  { 20.668274532832392, 0.66666666666666663, 4.7500000000000000 },\n-  { 25.902310583215122, 0.66666666666666663, 5.0000000000000000 },\n+// max(|f - f_GSL|): 1.9539925233402755e-14 at index 16\n+// max(|f - f_GSL| / |f_GSL|): 2.2100364323953014e-15\n+// mean(f - f_GSL): -5.2312651565075830e-15\n+// variance(f - f_GSL): 1.4792059082391298e-31\n+// stddev(f - f_GSL): 3.8460446022363414e-16\n+const testcase_cyl_bessel_i<double>\n+data010[21] =\n+{\n+  { 0.0000000000000000, 0.66666666666666663, 0.0000000000000000, 0.0 },\n+  { 0.27953690613200444, 0.66666666666666663, 0.25000000000000000, 0.0 },\n+  { 0.45628323113556890, 0.66666666666666663, 0.50000000000000000, 0.0 },\n+  { 0.62594569838182623, 0.66666666666666663, 0.75000000000000000, 0.0 },\n+  { 0.80752128860612971, 0.66666666666666663, 1.0000000000000000, 0.0 },\n+  { 1.0139484513577173, 0.66666666666666663, 1.2500000000000000, 0.0 },\n+  { 1.2572918396962993, 0.66666666666666663, 1.5000000000000000, 0.0 },\n+  { 1.5505806938325581, 0.66666666666666663, 1.7500000000000000, 0.0 },\n+  { 1.9089492968236210, 0.66666666666666663, 2.0000000000000000, 0.0 },\n+  { 2.3506463490300340, 0.66666666666666663, 2.2500000000000000, 0.0 },\n+  { 2.8981161894224896, 0.66666666666666663, 2.5000000000000000, 0.0 },\n+  { 3.5792654911068724, 0.66666666666666663, 2.7500000000000000, 0.0 },\n+  { 4.4290087213549514, 0.66666666666666663, 3.0000000000000000, 0.0 },\n+  { 5.4911895720097705, 0.66666666666666663, 3.2500000000000000, 0.0 },\n+  { 6.8209918044137305, 0.66666666666666663, 3.5000000000000000, 0.0 },\n+  { 8.4879784249619785, 0.66666666666666663, 3.7500000000000000, 0.0 },\n+  { 10.579932774013004, 0.66666666666666663, 4.0000000000000000, 0.0 },\n+  { 13.207720355482458, 0.66666666666666663, 4.2500000000000000, 0.0 },\n+  { 16.511448404200543, 0.66666666666666663, 4.5000000000000000, 0.0 },\n+  { 20.668274532832392, 0.66666666666666663, 4.7500000000000000, 0.0 },\n+  { 25.902310583215122, 0.66666666666666663, 5.0000000000000000, 0.0 },\n };\n-\n-// Test function for nu=0.66666666666666663.\n-template<typename Tp>\n-  void\n-  test004()\n-  {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n-    unsigned int num_datum = sizeof(data004)\n-\t\t\t   / sizeof(testcase_cyl_bessel_i<double>);\n-    for (unsigned int i = 0; i < num_datum; ++i)\n-      {\n-\tconst Tp f = std::tr1::cyl_bessel_i(Tp(data004[i].nu), Tp(data004[i].x));\n-\tconst Tp f0 = data004[i].f0;\n-\tconst Tp diff = f - f0;\n-\tif (std::abs(diff) > max_abs_diff)\n-\t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n-\t  {\n-\t    const Tp frac = diff / f0;\n-\t    if (std::abs(frac) > max_abs_frac)\n-\t      max_abs_frac = std::abs(frac);\n-\t  }\n-      }\n-    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-  }\n+const double toler010 = 2.5000000000000020e-13;\n \n // Test data for nu=1.0000000000000000.\n-testcase_cyl_bessel_i<double> data005[] = {\n-  { 0.0000000000000000, 1.0000000000000000, 0.0000000000000000 },\n-  { 0.12597910894546793, 1.0000000000000000, 0.25000000000000000 },\n-  { 0.25789430539089631, 1.0000000000000000, 0.50000000000000000 },\n-  { 0.40199246158092228, 1.0000000000000000, 0.75000000000000000 },\n-  { 0.56515910399248503, 1.0000000000000000, 1.0000000000000000 },\n-  { 0.75528141834074725, 1.0000000000000000, 1.2500000000000000 },\n-  { 0.98166642857790720, 1.0000000000000000, 1.5000000000000000 },\n-  { 1.2555375122401731, 1.0000000000000000, 1.7500000000000000 },\n-  { 1.5906368546373291, 1.0000000000000000, 2.0000000000000000 },\n-  { 2.0039674569295931, 1.0000000000000000, 2.2500000000000000 },\n-  { 2.5167162452886984, 1.0000000000000000, 2.5000000000000000 },\n-  { 3.1554101386190028, 1.0000000000000000, 2.7500000000000000 },\n-  { 3.9533702174026097, 1.0000000000000000, 3.0000000000000000 },\n-  { 4.9525461659085490, 1.0000000000000000, 3.2500000000000000 },\n-  { 6.2058349222583642, 1.0000000000000000, 3.5000000000000000 },\n-  { 7.7800152298244161, 1.0000000000000000, 3.7500000000000000 },\n-  { 9.7594651537044488, 1.0000000000000000, 4.0000000000000000 },\n-  { 12.250874667409304, 1.0000000000000000, 4.2500000000000000 },\n-  { 15.389222753735924, 1.0000000000000000, 4.5000000000000000 },\n-  { 19.345361447520226, 1.0000000000000000, 4.7500000000000000 },\n-  { 24.335642142450524, 1.0000000000000000, 5.0000000000000000 },\n+// max(|f - f_GSL|): 1.2967404927621828e-13 at index 17\n+// max(|f - f_GSL| / |f_GSL|): 1.0977631741433893e-14\n+// mean(f - f_GSL): -3.0188814411265717e-14\n+// variance(f - f_GSL): 3.7247797767076778e-29\n+// stddev(f - f_GSL): 6.1030973912495271e-15\n+const testcase_cyl_bessel_i<double>\n+data011[21] =\n+{\n+  { 0.0000000000000000, 1.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 0.12597910894546793, 1.0000000000000000, 0.25000000000000000, 0.0 },\n+  { 0.25789430539089631, 1.0000000000000000, 0.50000000000000000, 0.0 },\n+  { 0.40199246158092228, 1.0000000000000000, 0.75000000000000000, 0.0 },\n+  { 0.56515910399248503, 1.0000000000000000, 1.0000000000000000, 0.0 },\n+  { 0.75528141834074725, 1.0000000000000000, 1.2500000000000000, 0.0 },\n+  { 0.98166642857790720, 1.0000000000000000, 1.5000000000000000, 0.0 },\n+  { 1.2555375122401728, 1.0000000000000000, 1.7500000000000000, 0.0 },\n+  { 1.5906368546373291, 1.0000000000000000, 2.0000000000000000, 0.0 },\n+  { 2.0039674569295931, 1.0000000000000000, 2.2500000000000000, 0.0 },\n+  { 2.5167162452886984, 1.0000000000000000, 2.5000000000000000, 0.0 },\n+  { 3.1554101386190028, 1.0000000000000000, 2.7500000000000000, 0.0 },\n+  { 3.9533702174026097, 1.0000000000000000, 3.0000000000000000, 0.0 },\n+  { 4.9525461659085490, 1.0000000000000000, 3.2500000000000000, 0.0 },\n+  { 6.2058349222583642, 1.0000000000000000, 3.5000000000000000, 0.0 },\n+  { 7.7800152298244170, 1.0000000000000000, 3.7500000000000000, 0.0 },\n+  { 9.7594651537044523, 1.0000000000000000, 4.0000000000000000, 0.0 },\n+  { 12.250874667409304, 1.0000000000000000, 4.2500000000000000, 0.0 },\n+  { 15.389222753735924, 1.0000000000000000, 4.5000000000000000, 0.0 },\n+  { 19.345361447520226, 1.0000000000000000, 4.7500000000000000, 0.0 },\n+  { 24.335642142450524, 1.0000000000000000, 5.0000000000000000, 0.0 },\n };\n-\n-// Test function for nu=1.0000000000000000.\n-template<typename Tp>\n-  void\n-  test005()\n-  {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n-    unsigned int num_datum = sizeof(data005)\n-\t\t\t   / sizeof(testcase_cyl_bessel_i<double>);\n-    for (unsigned int i = 0; i < num_datum; ++i)\n-      {\n-\tconst Tp f = std::tr1::cyl_bessel_i(Tp(data005[i].nu), Tp(data005[i].x));\n-\tconst Tp f0 = data005[i].f0;\n-\tconst Tp diff = f - f0;\n-\tif (std::abs(diff) > max_abs_diff)\n-\t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n-\t  {\n-\t    const Tp frac = diff / f0;\n-\t    if (std::abs(frac) > max_abs_frac)\n-\t      max_abs_frac = std::abs(frac);\n-\t  }\n-      }\n-    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-  }\n+const double toler011 = 1.0000000000000008e-12;\n \n // Test data for nu=2.0000000000000000.\n-testcase_cyl_bessel_i<double> data006[] = {\n-  { 0.0000000000000000, 2.0000000000000000, 0.0000000000000000 },\n-  { 0.0078532696598645167, 2.0000000000000000, 0.25000000000000000 },\n-  { 0.031906149177738249, 2.0000000000000000, 0.50000000000000000 },\n-  { 0.073666880494875436, 2.0000000000000000, 0.75000000000000000 },\n-  { 0.13574766976703831, 2.0000000000000000, 1.0000000000000000 },\n-  { 0.22201844837663415, 2.0000000000000000, 1.2500000000000000 },\n-  { 0.33783461833568068, 2.0000000000000000, 1.5000000000000000 },\n-  { 0.49035213986973319, 2.0000000000000000, 1.7500000000000000 },\n-  { 0.68894844769873831, 2.0000000000000000, 2.0000000000000000 },\n-  { 0.94577390103115722, 2.0000000000000000, 2.2500000000000000 },\n-  { 1.2764661478191643, 2.0000000000000000, 2.5000000000000000 },\n-  { 1.7010693700601991, 2.0000000000000000, 2.7500000000000000 },\n-  { 2.2452124409299512, 2.0000000000000000, 3.0000000000000000 },\n-  { 2.9416152804573357, 2.0000000000000000, 3.2500000000000000 },\n-  { 3.8320120480778415, 2.0000000000000000, 3.5000000000000000 },\n-  { 4.9696044049382113, 2.0000000000000000, 3.7500000000000000 },\n-  { 6.4221893752841046, 2.0000000000000000, 4.0000000000000000 },\n-  { 8.2761461924550552, 2.0000000000000000, 4.2500000000000000 },\n-  { 10.641517298393307, 2.0000000000000000, 4.5000000000000000 },\n-  { 13.658483394577813, 2.0000000000000000, 4.7500000000000000 },\n-  { 17.505614966624233, 2.0000000000000000, 5.0000000000000000 },\n+// max(|f - f_GSL|): 1.8474111129762605e-13 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 1.0796880796865132e-14\n+// mean(f - f_GSL): -3.8692841919903068e-14\n+// variance(f - f_GSL): 1.1198300918819667e-27\n+// stddev(f - f_GSL): 3.3463862477035829e-14\n+const testcase_cyl_bessel_i<double>\n+data012[21] =\n+{\n+  { 0.0000000000000000, 2.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 0.0078532696598645167, 2.0000000000000000, 0.25000000000000000, 0.0 },\n+  { 0.031906149177738249, 2.0000000000000000, 0.50000000000000000, 0.0 },\n+  { 0.073666880494875436, 2.0000000000000000, 0.75000000000000000, 0.0 },\n+  { 0.13574766976703831, 2.0000000000000000, 1.0000000000000000, 0.0 },\n+  { 0.22201844837663415, 2.0000000000000000, 1.2500000000000000, 0.0 },\n+  { 0.33783461833568068, 2.0000000000000000, 1.5000000000000000, 0.0 },\n+  { 0.49035213986973314, 2.0000000000000000, 1.7500000000000000, 0.0 },\n+  { 0.68894844769873831, 2.0000000000000000, 2.0000000000000000, 0.0 },\n+  { 0.94577390103115722, 2.0000000000000000, 2.2500000000000000, 0.0 },\n+  { 1.2764661478191643, 2.0000000000000000, 2.5000000000000000, 0.0 },\n+  { 1.7010693700601991, 2.0000000000000000, 2.7500000000000000, 0.0 },\n+  { 2.2452124409299512, 2.0000000000000000, 3.0000000000000000, 0.0 },\n+  { 2.9416152804573357, 2.0000000000000000, 3.2500000000000000, 0.0 },\n+  { 3.8320120480778415, 2.0000000000000000, 3.5000000000000000, 0.0 },\n+  { 4.9696044049382113, 2.0000000000000000, 3.7500000000000000, 0.0 },\n+  { 6.4221893752841055, 2.0000000000000000, 4.0000000000000000, 0.0 },\n+  { 8.2761461924550552, 2.0000000000000000, 4.2500000000000000, 0.0 },\n+  { 10.641517298393307, 2.0000000000000000, 4.5000000000000000, 0.0 },\n+  { 13.658483394577813, 2.0000000000000000, 4.7500000000000000, 0.0 },\n+  { 17.505614966624233, 2.0000000000000000, 5.0000000000000000, 0.0 },\n };\n-\n-// Test function for nu=2.0000000000000000.\n-template<typename Tp>\n-  void\n-  test006()\n-  {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n-    unsigned int num_datum = sizeof(data006)\n-\t\t\t   / sizeof(testcase_cyl_bessel_i<double>);\n-    for (unsigned int i = 0; i < num_datum; ++i)\n-      {\n-\tconst Tp f = std::tr1::cyl_bessel_i(Tp(data006[i].nu), Tp(data006[i].x));\n-\tconst Tp f0 = data006[i].f0;\n-\tconst Tp diff = f - f0;\n-\tif (std::abs(diff) > max_abs_diff)\n-\t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n-\t  {\n-\t    const Tp frac = diff / f0;\n-\t    if (std::abs(frac) > max_abs_frac)\n-\t      max_abs_frac = std::abs(frac);\n-\t  }\n-      }\n-    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-  }\n+const double toler012 = 1.0000000000000008e-12;\n \n // Test data for nu=5.0000000000000000.\n-testcase_cyl_bessel_i<double> data007[] = {\n-  { 0.0000000000000000, 5.0000000000000000, 0.0000000000000000 },\n-  { 2.5497616449882785e-07, 5.0000000000000000, 0.25000000000000000 },\n-  { 8.2231713131092646e-06, 5.0000000000000000, 0.50000000000000000 },\n-  { 6.3261122739811725e-05, 5.0000000000000000, 0.75000000000000000 },\n-  { 0.00027146315595697195, 5.0000000000000000, 1.0000000000000000 },\n-  { 0.00084793613616686856, 5.0000000000000000, 1.2500000000000000 },\n-  { 0.0021705595690975554, 5.0000000000000000, 1.5000000000000000 },\n-  { 0.0048504513371845394, 5.0000000000000000, 1.7500000000000000 },\n-  { 0.0098256793231317023, 5.0000000000000000, 2.0000000000000000 },\n-  { 0.018486577941045829, 5.0000000000000000, 2.2500000000000000 },\n-  { 0.032843475172023219, 5.0000000000000000, 2.5000000000000000 },\n-  { 0.055750882754221943, 5.0000000000000000, 2.7500000000000000 },\n-  { 0.091206477661513338, 5.0000000000000000, 3.0000000000000000 },\n-  { 0.14474880546308083, 5.0000000000000000, 3.2500000000000000 },\n-  { 0.22398495470190780, 5.0000000000000000, 3.5000000000000000 },\n-  { 0.33928899170999866, 5.0000000000000000, 3.7500000000000000 },\n-  { 0.50472436311316626, 5.0000000000000000, 4.0000000000000000 },\n-  { 0.73925961816682961, 5.0000000000000000, 4.2500000000000000 },\n-  { 1.0683677743764699, 5.0000000000000000, 4.5000000000000000 },\n-  { 1.5261268693599621, 5.0000000000000000, 4.7500000000000000 },\n-  { 2.1579745473225476, 5.0000000000000000, 5.0000000000000000 },\n+// max(|f - f_GSL|): 2.2204460492503131e-14 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 1.1379865680381910e-14\n+// mean(f - f_GSL): -3.4502652328999478e-15\n+// variance(f - f_GSL): 1.8465291591354433e-29\n+// stddev(f - f_GSL): 4.2971259687556788e-15\n+const testcase_cyl_bessel_i<double>\n+data013[21] =\n+{\n+  { 0.0000000000000000, 5.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 2.5497616449882785e-07, 5.0000000000000000, 0.25000000000000000, 0.0 },\n+  { 8.2231713131092646e-06, 5.0000000000000000, 0.50000000000000000, 0.0 },\n+  { 6.3261122739811725e-05, 5.0000000000000000, 0.75000000000000000, 0.0 },\n+  { 0.00027146315595697195, 5.0000000000000000, 1.0000000000000000, 0.0 },\n+  { 0.00084793613616686856, 5.0000000000000000, 1.2500000000000000, 0.0 },\n+  { 0.0021705595690975554, 5.0000000000000000, 1.5000000000000000, 0.0 },\n+  { 0.0048504513371845385, 5.0000000000000000, 1.7500000000000000, 0.0 },\n+  { 0.0098256793231317023, 5.0000000000000000, 2.0000000000000000, 0.0 },\n+  { 0.018486577941045829, 5.0000000000000000, 2.2500000000000000, 0.0 },\n+  { 0.032843475172023219, 5.0000000000000000, 2.5000000000000000, 0.0 },\n+  { 0.055750882754221943, 5.0000000000000000, 2.7500000000000000, 0.0 },\n+  { 0.091206477661513338, 5.0000000000000000, 3.0000000000000000, 0.0 },\n+  { 0.14474880546308083, 5.0000000000000000, 3.2500000000000000, 0.0 },\n+  { 0.22398495470190780, 5.0000000000000000, 3.5000000000000000, 0.0 },\n+  { 0.33928899170999877, 5.0000000000000000, 3.7500000000000000, 0.0 },\n+  { 0.50472436311316637, 5.0000000000000000, 4.0000000000000000, 0.0 },\n+  { 0.73925961816682961, 5.0000000000000000, 4.2500000000000000, 0.0 },\n+  { 1.0683677743764701, 5.0000000000000000, 4.5000000000000000, 0.0 },\n+  { 1.5261268693599621, 5.0000000000000000, 4.7500000000000000, 0.0 },\n+  { 2.1579745473225476, 5.0000000000000000, 5.0000000000000000, 0.0 },\n };\n-\n-// Test function for nu=5.0000000000000000.\n-template<typename Tp>\n-  void\n-  test007()\n-  {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n-    unsigned int num_datum = sizeof(data007)\n-\t\t\t   / sizeof(testcase_cyl_bessel_i<double>);\n-    for (unsigned int i = 0; i < num_datum; ++i)\n-      {\n-\tconst Tp f = std::tr1::cyl_bessel_i(Tp(data007[i].nu), Tp(data007[i].x));\n-\tconst Tp f0 = data007[i].f0;\n-\tconst Tp diff = f - f0;\n-\tif (std::abs(diff) > max_abs_diff)\n-\t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n-\t  {\n-\t    const Tp frac = diff / f0;\n-\t    if (std::abs(frac) > max_abs_frac)\n-\t      max_abs_frac = std::abs(frac);\n-\t  }\n-      }\n-    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-  }\n+const double toler013 = 1.0000000000000008e-12;\n \n // Test data for nu=10.000000000000000.\n-testcase_cyl_bessel_i<double> data008[] = {\n-  { 0.0000000000000000, 10.000000000000000, 0.0000000000000000 },\n-  { 2.5701232848571186e-16, 10.000000000000000, 0.25000000000000000 },\n-  { 2.6430419258812784e-13, 10.000000000000000, 0.50000000000000000 },\n-  { 1.5349659676120412e-11, 10.000000000000000, 0.75000000000000000 },\n-  { 2.7529480398368732e-10, 10.000000000000000, 1.0000000000000000 },\n-  { 2.5967897782035928e-09, 10.000000000000000, 1.2500000000000000 },\n-  { 1.6330924437799743e-08, 10.000000000000000, 1.5000000000000000 },\n-  { 7.7706676834614093e-08, 10.000000000000000, 1.7500000000000000 },\n-  { 3.0169638793506839e-07, 10.000000000000000, 2.0000000000000000 },\n-  { 1.0034459057774481e-06, 10.000000000000000, 2.2500000000000000 },\n-  { 2.9557436109680578e-06, 10.000000000000000, 2.5000000000000000 },\n-  { 7.8955603774082724e-06, 10.000000000000000, 2.7500000000000000 },\n-  { 1.9464393470612970e-05, 10.000000000000000, 3.0000000000000000 },\n-  { 4.4875369479742435e-05, 10.000000000000000, 3.2500000000000000 },\n-  { 9.7760848514528916e-05, 10.000000000000000, 3.5000000000000000 },\n-  { 0.00020289011210063493, 10.000000000000000, 3.7500000000000000 },\n-  { 0.00040378896132693047, 10.000000000000000, 4.0000000000000000 },\n-  { 0.00077478519551669892, 10.000000000000000, 4.2500000000000000 },\n-  { 0.0014397060684919682, 10.000000000000000, 4.5000000000000000 },\n-  { 0.0026004486016189452, 10.000000000000000, 4.7500000000000000 },\n-  { 0.0045800444191760525, 10.000000000000000, 5.0000000000000000 },\n+// max(|f - f_GSL|): 5.0306980803327406e-17 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 1.2741587624782699e-14\n+// mean(f - f_GSL): -5.4602116438803446e-18\n+// variance(f - f_GSL): 1.0558971696213844e-34\n+// stddev(f - f_GSL): 1.0275685717368863e-17\n+const testcase_cyl_bessel_i<double>\n+data014[21] =\n+{\n+  { 0.0000000000000000, 10.000000000000000, 0.0000000000000000, 0.0 },\n+  { 2.5701232848571186e-16, 10.000000000000000, 0.25000000000000000, 0.0 },\n+  { 2.6430419258812784e-13, 10.000000000000000, 0.50000000000000000, 0.0 },\n+  { 1.5349659676120412e-11, 10.000000000000000, 0.75000000000000000, 0.0 },\n+  { 2.7529480398368732e-10, 10.000000000000000, 1.0000000000000000, 0.0 },\n+  { 2.5967897782035928e-09, 10.000000000000000, 1.2500000000000000, 0.0 },\n+  { 1.6330924437799743e-08, 10.000000000000000, 1.5000000000000000, 0.0 },\n+  { 7.7706676834614079e-08, 10.000000000000000, 1.7500000000000000, 0.0 },\n+  { 3.0169638793506839e-07, 10.000000000000000, 2.0000000000000000, 0.0 },\n+  { 1.0034459057774481e-06, 10.000000000000000, 2.2500000000000000, 0.0 },\n+  { 2.9557436109680578e-06, 10.000000000000000, 2.5000000000000000, 0.0 },\n+  { 7.8955603774082724e-06, 10.000000000000000, 2.7500000000000000, 0.0 },\n+  { 1.9464393470612970e-05, 10.000000000000000, 3.0000000000000000, 0.0 },\n+  { 4.4875369479742435e-05, 10.000000000000000, 3.2500000000000000, 0.0 },\n+  { 9.7760848514528916e-05, 10.000000000000000, 3.5000000000000000, 0.0 },\n+  { 0.00020289011210063496, 10.000000000000000, 3.7500000000000000, 0.0 },\n+  { 0.00040378896132693058, 10.000000000000000, 4.0000000000000000, 0.0 },\n+  { 0.00077478519551669892, 10.000000000000000, 4.2500000000000000, 0.0 },\n+  { 0.0014397060684919682, 10.000000000000000, 4.5000000000000000, 0.0 },\n+  { 0.0026004486016189452, 10.000000000000000, 4.7500000000000000, 0.0 },\n+  { 0.0045800444191760525, 10.000000000000000, 5.0000000000000000, 0.0 },\n };\n-\n-// Test function for nu=10.000000000000000.\n-template<typename Tp>\n-  void\n-  test008()\n-  {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n-    unsigned int num_datum = sizeof(data008)\n-\t\t\t   / sizeof(testcase_cyl_bessel_i<double>);\n-    for (unsigned int i = 0; i < num_datum; ++i)\n-      {\n-\tconst Tp f = std::tr1::cyl_bessel_i(Tp(data008[i].nu), Tp(data008[i].x));\n-\tconst Tp f0 = data008[i].f0;\n-\tconst Tp diff = f - f0;\n-\tif (std::abs(diff) > max_abs_diff)\n-\t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n-\t  {\n-\t    const Tp frac = diff / f0;\n-\t    if (std::abs(frac) > max_abs_frac)\n-\t      max_abs_frac = std::abs(frac);\n-\t  }\n-      }\n-    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-  }\n+const double toler014 = 1.0000000000000008e-12;\n \n // Test data for nu=20.000000000000000.\n-testcase_cyl_bessel_i<double> data009[] = {\n-  { 0.0000000000000000, 20.000000000000000, 0.0000000000000000 },\n-  { 3.5677858077910353e-37, 20.000000000000000, 0.25000000000000000 },\n-  { 3.7494538480790194e-31, 20.000000000000000, 0.50000000000000000 },\n-  { 1.2514356342425337e-27, 20.000000000000000, 0.75000000000000000 },\n-  { 3.9668359858190197e-25, 20.000000000000000, 1.0000000000000000 },\n-  { 3.4637832909868234e-23, 20.000000000000000, 1.2500000000000000 },\n-  { 1.3388331839683472e-21, 20.000000000000000, 1.5000000000000000 },\n-  { 2.9502376732679751e-20, 20.000000000000000, 1.7500000000000000 },\n-  { 4.3105605761095479e-19, 20.000000000000000, 2.0000000000000000 },\n-  { 4.6032451406433059e-18, 20.000000000000000, 2.2500000000000000 },\n-  { 3.8400317244170310e-17, 20.000000000000000, 2.5000000000000000 },\n-  { 2.6239115263043263e-16, 20.000000000000000, 2.7500000000000000 },\n-  { 1.5209660019426689e-15, 20.000000000000000, 3.0000000000000000 },\n-  { 7.6806450728249953e-15, 20.000000000000000, 3.2500000000000000 },\n-  { 3.4495528847222945e-14, 20.000000000000000, 3.5000000000000000 },\n-  { 1.4006589294850672e-13, 20.000000000000000, 3.7500000000000000 },\n-  { 5.2100734221993044e-13, 20.000000000000000, 4.0000000000000000 },\n-  { 1.7946903269488168e-12, 20.000000000000000, 4.2500000000000000 },\n-  { 5.7763830562279683e-12, 20.000000000000000, 4.5000000000000000 },\n-  { 1.7502433074548735e-11, 20.000000000000000, 4.7500000000000000 },\n-  { 5.0242393579718066e-11, 20.000000000000000, 5.0000000000000000 },\n+// max(|f - f_GSL|): 6.9147129330604657e-25 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 1.6061319023473306e-14\n+// mean(f - f_GSL): -5.1436249496041580e-26\n+// variance(f - f_GSL): 2.1506355008505938e-50\n+// stddev(f - f_GSL): 1.4665045178418625e-25\n+const testcase_cyl_bessel_i<double>\n+data015[21] =\n+{\n+  { 0.0000000000000000, 20.000000000000000, 0.0000000000000000, 0.0 },\n+  { 3.5677858077910353e-37, 20.000000000000000, 0.25000000000000000, 0.0 },\n+  { 3.7494538480790194e-31, 20.000000000000000, 0.50000000000000000, 0.0 },\n+  { 1.2514356342425337e-27, 20.000000000000000, 0.75000000000000000, 0.0 },\n+  { 3.9668359858190197e-25, 20.000000000000000, 1.0000000000000000, 0.0 },\n+  { 3.4637832909868234e-23, 20.000000000000000, 1.2500000000000000, 0.0 },\n+  { 1.3388331839683472e-21, 20.000000000000000, 1.5000000000000000, 0.0 },\n+  { 2.9502376732679751e-20, 20.000000000000000, 1.7500000000000000, 0.0 },\n+  { 4.3105605761095479e-19, 20.000000000000000, 2.0000000000000000, 0.0 },\n+  { 4.6032451406433059e-18, 20.000000000000000, 2.2500000000000000, 0.0 },\n+  { 3.8400317244170310e-17, 20.000000000000000, 2.5000000000000000, 0.0 },\n+  { 2.6239115263043263e-16, 20.000000000000000, 2.7500000000000000, 0.0 },\n+  { 1.5209660019426689e-15, 20.000000000000000, 3.0000000000000000, 0.0 },\n+  { 7.6806450728249953e-15, 20.000000000000000, 3.2500000000000000, 0.0 },\n+  { 3.4495528847222945e-14, 20.000000000000000, 3.5000000000000000, 0.0 },\n+  { 1.4006589294850677e-13, 20.000000000000000, 3.7500000000000000, 0.0 },\n+  { 5.2100734221993054e-13, 20.000000000000000, 4.0000000000000000, 0.0 },\n+  { 1.7946903269488168e-12, 20.000000000000000, 4.2500000000000000, 0.0 },\n+  { 5.7763830562279699e-12, 20.000000000000000, 4.5000000000000000, 0.0 },\n+  { 1.7502433074548735e-11, 20.000000000000000, 4.7500000000000000, 0.0 },\n+  { 5.0242393579718066e-11, 20.000000000000000, 5.0000000000000000, 0.0 },\n };\n-\n-// Test function for nu=20.000000000000000.\n-template<typename Tp>\n-  void\n-  test009()\n-  {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n-    unsigned int num_datum = sizeof(data009)\n-\t\t\t   / sizeof(testcase_cyl_bessel_i<double>);\n-    for (unsigned int i = 0; i < num_datum; ++i)\n-      {\n-\tconst Tp f = std::tr1::cyl_bessel_i(Tp(data009[i].nu), Tp(data009[i].x));\n-\tconst Tp f0 = data009[i].f0;\n-\tconst Tp diff = f - f0;\n-\tif (std::abs(diff) > max_abs_diff)\n-\t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n-\t  {\n-\t    const Tp frac = diff / f0;\n-\t    if (std::abs(frac) > max_abs_frac)\n-\t      max_abs_frac = std::abs(frac);\n-\t  }\n-      }\n-    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-  }\n+const double toler015 = 1.0000000000000008e-12;\n //  cyl_bessel_i\n \n // Test data for nu=0.0000000000000000.\n-testcase_cyl_bessel_i<double> data010[] = {\n-  { 1.0000000000000000, 0.0000000000000000, 0.0000000000000000 },\n-  { 27.239871823604439, 0.0000000000000000, 5.0000000000000000 },\n-  { 2815.7166284662558, 0.0000000000000000, 10.000000000000000 },\n-  { 339649.37329791381, 0.0000000000000000, 15.000000000000000 },\n-  { 43558282.559553474, 0.0000000000000000, 20.000000000000000 },\n-  { 5774560606.4663124, 0.0000000000000000, 25.000000000000000 },\n-  { 781672297823.97925, 0.0000000000000000, 30.000000000000000 },\n-  { 107338818494514.42, 0.0000000000000000, 35.000000000000000 },\n-  { 14894774793419918., 0.0000000000000000, 40.000000000000000 },\n-  { 2.0834140751773164e+18, 0.0000000000000000, 45.000000000000000 },\n-  { 2.9325537838493457e+20, 0.0000000000000000, 50.000000000000000 },\n-  { 4.1487895607332160e+22, 0.0000000000000000, 55.000000000000000 },\n-  { 5.8940770556098216e+24, 0.0000000000000000, 60.000000000000000 },\n-  { 8.4030398456255596e+26, 0.0000000000000000, 65.000000000000000 },\n-  { 1.2015889579125424e+29, 0.0000000000000000, 70.000000000000000 },\n-  { 1.7226390780357976e+31, 0.0000000000000000, 75.000000000000000 },\n-  { 2.4751784043341661e+33, 0.0000000000000000, 80.000000000000000 },\n-  { 3.5634776304081403e+35, 0.0000000000000000, 85.000000000000000 },\n-  { 5.1392383455086475e+37, 0.0000000000000000, 90.000000000000000 },\n-  { 7.4233258618752072e+39, 0.0000000000000000, 95.000000000000000 },\n-  { 1.0737517071310986e+42, 0.0000000000000000, 100.00000000000000 },\n+// max(|f - f_GSL|): 2.5841998320082313e+28 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 2.4067014886642843e-14\n+// mean(f - f_GSL): -1.2242902567974868e+27\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n+const testcase_cyl_bessel_i<double>\n+data016[21] =\n+{\n+  { 1.0000000000000000, 0.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 27.239871823604439, 0.0000000000000000, 5.0000000000000000, 0.0 },\n+  { 2815.7166284662558, 0.0000000000000000, 10.000000000000000, 0.0 },\n+  { 339649.37329791381, 0.0000000000000000, 15.000000000000000, 0.0 },\n+  { 43558282.559553474, 0.0000000000000000, 20.000000000000000, 0.0 },\n+  { 5774560606.4663124, 0.0000000000000000, 25.000000000000000, 0.0 },\n+  { 781672297823.97925, 0.0000000000000000, 30.000000000000000, 0.0 },\n+  { 107338818494514.42, 0.0000000000000000, 35.000000000000000, 0.0 },\n+  { 14894774793419916., 0.0000000000000000, 40.000000000000000, 0.0 },\n+  { 2.0834140751773164e+18, 0.0000000000000000, 45.000000000000000, 0.0 },\n+  { 2.9325537838493457e+20, 0.0000000000000000, 50.000000000000000, 0.0 },\n+  { 4.1487895607332160e+22, 0.0000000000000000, 55.000000000000000, 0.0 },\n+  { 5.8940770556098216e+24, 0.0000000000000000, 60.000000000000000, 0.0 },\n+  { 8.4030398456255582e+26, 0.0000000000000000, 65.000000000000000, 0.0 },\n+  { 1.2015889579125424e+29, 0.0000000000000000, 70.000000000000000, 0.0 },\n+  { 1.7226390780357976e+31, 0.0000000000000000, 75.000000000000000, 0.0 },\n+  { 2.4751784043341661e+33, 0.0000000000000000, 80.000000000000000, 0.0 },\n+  { 3.5634776304081403e+35, 0.0000000000000000, 85.000000000000000, 0.0 },\n+  { 5.1392383455086475e+37, 0.0000000000000000, 90.000000000000000, 0.0 },\n+  { 7.4233258618752072e+39, 0.0000000000000000, 95.000000000000000, 0.0 },\n+  { 1.0737517071310986e+42, 0.0000000000000000, 100.00000000000000, 0.0 },\n };\n-\n-// Test function for nu=0.0000000000000000.\n-template<typename Tp>\n-  void\n-  test010()\n-  {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n-    unsigned int num_datum = sizeof(data010)\n-\t\t\t   / sizeof(testcase_cyl_bessel_i<double>);\n-    for (unsigned int i = 0; i < num_datum; ++i)\n-      {\n-\tconst Tp f = std::tr1::cyl_bessel_i(Tp(data010[i].nu), Tp(data010[i].x));\n-\tconst Tp f0 = data010[i].f0;\n-\tconst Tp diff = f - f0;\n-\tif (std::abs(diff) > max_abs_diff)\n-\t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n-\t  {\n-\t    const Tp frac = diff / f0;\n-\t    if (std::abs(frac) > max_abs_frac)\n-\t      max_abs_frac = std::abs(frac);\n-\t  }\n-      }\n-    VERIFY(max_abs_frac < Tp(2.5000000000000015e-12));\n-  }\n+const double toler016 = 2.5000000000000015e-12;\n \n // Test data for nu=0.33333333333333331.\n-testcase_cyl_bessel_i<double> data011[] = {\n-  { 0.0000000000000000, 0.33333333333333331, 0.0000000000000000 },\n-  { 26.897553069268362, 0.33333333333333331, 5.0000000000000000 },\n-  { 2799.2396097056790, 0.33333333333333331, 10.000000000000000 },\n-  { 338348.63146593666, 0.33333333333333331, 15.000000000000000 },\n-  { 43434263.927938424, 0.33333333333333331, 20.000000000000000 },\n-  { 5761474759.6213636, 0.33333333333333331, 25.000000000000000 },\n-  { 780201111830.30237, 0.33333333333333331, 30.000000000000000 },\n-  { 107166066959051.91, 0.33333333333333331, 35.000000000000000 },\n-  { 14873836574083764., 0.33333333333333331, 40.000000000000000 },\n-  { 2.0808143020217085e+18, 0.33333333333333331, 45.000000000000000 },\n-  { 2.9292639365644226e+20, 0.33333333333333331, 50.000000000000000 },\n-  { 4.1445621624120489e+22, 0.33333333333333331, 55.000000000000000 },\n-  { 5.8885758374365916e+24, 0.33333333333333331, 60.000000000000000 },\n-  { 8.3958047021083955e+26, 0.33333333333333331, 65.000000000000000 },\n-  { 1.2006287819446431e+29, 0.33333333333333331, 70.000000000000000 },\n-  { 1.7213548977150022e+31, 0.33333333333333331, 75.000000000000000 },\n-  { 2.4734492458444449e+33, 0.33333333333333331, 80.000000000000000 },\n-  { 3.5611354547857122e+35, 0.33333333333333331, 85.000000000000000 },\n-  { 5.1360491295551848e+37, 0.33333333333333331, 90.000000000000000 },\n-  { 7.4189629097600431e+39, 0.33333333333333331, 95.000000000000000 },\n-  { 1.0731523308358370e+42, 0.33333333333333331, 100.00000000000000 },\n+// max(|f - f_GSL|): 1.0986717848657750e+28 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 1.2017640663876795e-14\n+// mean(f - f_GSL): -5.2068252642007974e+26\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n+const testcase_cyl_bessel_i<double>\n+data017[21] =\n+{\n+  { 0.0000000000000000, 0.33333333333333331, 0.0000000000000000, 0.0 },\n+  { 26.897553069268362, 0.33333333333333331, 5.0000000000000000, 0.0 },\n+  { 2799.2396097056790, 0.33333333333333331, 10.000000000000000, 0.0 },\n+  { 338348.63146593666, 0.33333333333333331, 15.000000000000000, 0.0 },\n+  { 43434263.927938424, 0.33333333333333331, 20.000000000000000, 0.0 },\n+  { 5761474759.6213636, 0.33333333333333331, 25.000000000000000, 0.0 },\n+  { 780201111830.30237, 0.33333333333333331, 30.000000000000000, 0.0 },\n+  { 107166066959051.91, 0.33333333333333331, 35.000000000000000, 0.0 },\n+  { 14873836574083762., 0.33333333333333331, 40.000000000000000, 0.0 },\n+  { 2.0808143020217085e+18, 0.33333333333333331, 45.000000000000000, 0.0 },\n+  { 2.9292639365644226e+20, 0.33333333333333331, 50.000000000000000, 0.0 },\n+  { 4.1445621624120489e+22, 0.33333333333333331, 55.000000000000000, 0.0 },\n+  { 5.8885758374365916e+24, 0.33333333333333331, 60.000000000000000, 0.0 },\n+  { 8.3958047021083941e+26, 0.33333333333333331, 65.000000000000000, 0.0 },\n+  { 1.2006287819446431e+29, 0.33333333333333331, 70.000000000000000, 0.0 },\n+  { 1.7213548977150022e+31, 0.33333333333333331, 75.000000000000000, 0.0 },\n+  { 2.4734492458444449e+33, 0.33333333333333331, 80.000000000000000, 0.0 },\n+  { 3.5611354547857122e+35, 0.33333333333333331, 85.000000000000000, 0.0 },\n+  { 5.1360491295551848e+37, 0.33333333333333331, 90.000000000000000, 0.0 },\n+  { 7.4189629097600431e+39, 0.33333333333333331, 95.000000000000000, 0.0 },\n+  { 1.0731523308358370e+42, 0.33333333333333331, 100.00000000000000, 0.0 },\n };\n-\n-// Test function for nu=0.33333333333333331.\n-template<typename Tp>\n-  void\n-  test011()\n-  {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n-    unsigned int num_datum = sizeof(data011)\n-\t\t\t   / sizeof(testcase_cyl_bessel_i<double>);\n-    for (unsigned int i = 0; i < num_datum; ++i)\n-      {\n-\tconst Tp f = std::tr1::cyl_bessel_i(Tp(data011[i].nu), Tp(data011[i].x));\n-\tconst Tp f0 = data011[i].f0;\n-\tconst Tp diff = f - f0;\n-\tif (std::abs(diff) > max_abs_diff)\n-\t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n-\t  {\n-\t    const Tp frac = diff / f0;\n-\t    if (std::abs(frac) > max_abs_frac)\n-\t      max_abs_frac = std::abs(frac);\n-\t  }\n-      }\n-    VERIFY(max_abs_frac < Tp(1.0000000000000008e-12));\n-  }\n+const double toler017 = 1.0000000000000008e-12;\n \n // Test data for nu=0.50000000000000000.\n-testcase_cyl_bessel_i<double> data012[] = {\n-  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000 },\n-  { 26.477547497559065, 0.50000000000000000, 5.0000000000000000 },\n-  { 2778.7846038745711, 0.50000000000000000, 10.000000000000000 },\n-  { 336729.88718706399, 0.50000000000000000, 15.000000000000000 },\n-  { 43279746.272428922, 0.50000000000000000, 20.000000000000000 },\n-  { 5745159748.3464680, 0.50000000000000000, 25.000000000000000 },\n-  { 778366068840.44580, 0.50000000000000000, 30.000000000000000 },\n-  { 106950522408567.66, 0.50000000000000000, 35.000000000000000 },\n-  { 14847705549021962., 0.50000000000000000, 40.000000000000000 },\n-  { 2.0775691824625661e+18, 0.50000000000000000, 45.000000000000000 },\n-  { 2.9251568529912984e+20, 0.50000000000000000, 50.000000000000000 },\n-  { 4.1392840094781220e+22, 0.50000000000000000, 55.000000000000000 },\n-  { 5.8817065760751945e+24, 0.50000000000000000, 60.000000000000000 },\n-  { 8.3867695787277258e+26, 0.50000000000000000, 65.000000000000000 },\n-  { 1.1994296461653203e+29, 0.50000000000000000, 70.000000000000000 },\n-  { 1.7197510246063334e+31, 0.50000000000000000, 75.000000000000000 },\n-  { 2.4712895036230794e+33, 0.50000000000000000, 80.000000000000000 },\n-  { 3.5582099086757769e+35, 0.50000000000000000, 85.000000000000000 },\n-  { 5.1320654031231128e+37, 0.50000000000000000, 90.000000000000000 },\n-  { 7.4135128383495239e+39, 0.50000000000000000, 95.000000000000000 },\n-  { 1.0724035825423179e+42, 0.50000000000000000, 100.00000000000000 },\n+// max(|f - f_GSL|): 7.1181552258909366e+27 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 1.2230293310085236e-14\n+// mean(f - f_GSL): -3.3462733503919608e+26\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n+const testcase_cyl_bessel_i<double>\n+data018[21] =\n+{\n+  { 0.0000000000000000, 0.50000000000000000, 0.0000000000000000, 0.0 },\n+  { 26.477547497559065, 0.50000000000000000, 5.0000000000000000, 0.0 },\n+  { 2778.7846038745711, 0.50000000000000000, 10.000000000000000, 0.0 },\n+  { 336729.88718706399, 0.50000000000000000, 15.000000000000000, 0.0 },\n+  { 43279746.272428922, 0.50000000000000000, 20.000000000000000, 0.0 },\n+  { 5745159748.3464680, 0.50000000000000000, 25.000000000000000, 0.0 },\n+  { 778366068840.44580, 0.50000000000000000, 30.000000000000000, 0.0 },\n+  { 106950522408567.66, 0.50000000000000000, 35.000000000000000, 0.0 },\n+  { 14847705549021960., 0.50000000000000000, 40.000000000000000, 0.0 },\n+  { 2.0775691824625661e+18, 0.50000000000000000, 45.000000000000000, 0.0 },\n+  { 2.9251568529912984e+20, 0.50000000000000000, 50.000000000000000, 0.0 },\n+  { 4.1392840094781220e+22, 0.50000000000000000, 55.000000000000000, 0.0 },\n+  { 5.8817065760751945e+24, 0.50000000000000000, 60.000000000000000, 0.0 },\n+  { 8.3867695787277245e+26, 0.50000000000000000, 65.000000000000000, 0.0 },\n+  { 1.1994296461653203e+29, 0.50000000000000000, 70.000000000000000, 0.0 },\n+  { 1.7197510246063334e+31, 0.50000000000000000, 75.000000000000000, 0.0 },\n+  { 2.4712895036230794e+33, 0.50000000000000000, 80.000000000000000, 0.0 },\n+  { 3.5582099086757769e+35, 0.50000000000000000, 85.000000000000000, 0.0 },\n+  { 5.1320654031231128e+37, 0.50000000000000000, 90.000000000000000, 0.0 },\n+  { 7.4135128383495239e+39, 0.50000000000000000, 95.000000000000000, 0.0 },\n+  { 1.0724035825423179e+42, 0.50000000000000000, 100.00000000000000, 0.0 },\n };\n-\n-// Test function for nu=0.50000000000000000.\n-template<typename Tp>\n-  void\n-  test012()\n-  {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n-    unsigned int num_datum = sizeof(data012)\n-\t\t\t   / sizeof(testcase_cyl_bessel_i<double>);\n-    for (unsigned int i = 0; i < num_datum; ++i)\n-      {\n-\tconst Tp f = std::tr1::cyl_bessel_i(Tp(data012[i].nu), Tp(data012[i].x));\n-\tconst Tp f0 = data012[i].f0;\n-\tconst Tp diff = f - f0;\n-\tif (std::abs(diff) > max_abs_diff)\n-\t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n-\t  {\n-\t    const Tp frac = diff / f0;\n-\t    if (std::abs(frac) > max_abs_frac)\n-\t      max_abs_frac = std::abs(frac);\n-\t  }\n-      }\n-    VERIFY(max_abs_frac < Tp(1.0000000000000008e-12));\n-  }\n+const double toler018 = 1.0000000000000008e-12;\n \n // Test data for nu=0.66666666666666663.\n-testcase_cyl_bessel_i<double> data013[] = {\n-  { 0.0000000000000000, 0.66666666666666663, 0.0000000000000000 },\n-  { 25.902310583215122, 0.66666666666666663, 5.0000000000000000 },\n-  { 2750.4090423459315, 0.66666666666666663, 10.000000000000000 },\n-  { 334476.98138574377, 0.66666666666666663, 15.000000000000000 },\n-  { 43064361.686912313, 0.66666666666666663, 20.000000000000000 },\n-  { 5722397441.9603882, 0.66666666666666663, 25.000000000000000 },\n-  { 775804343498.02661, 0.66666666666666663, 30.000000000000000 },\n-  { 106649495512800.88, 0.66666666666666663, 35.000000000000000 },\n-  { 14811199896983756., 0.66666666666666663, 40.000000000000000 },\n-  { 2.0730345814356961e+18, 0.66666666666666663, 45.000000000000000 },\n-  { 2.9194166755257467e+20, 0.66666666666666663, 50.000000000000000 },\n-  { 4.1319059569935374e+22, 0.66666666666666663, 55.000000000000000 },\n-  { 5.8721031476386222e+24, 0.66666666666666663, 60.000000000000000 },\n-  { 8.3741368248217844e+26, 0.66666666666666663, 65.000000000000000 },\n-  { 1.1977528777008688e+29, 0.66666666666666663, 70.000000000000000 },\n-  { 1.7175081240014333e+31, 0.66666666666666663, 75.000000000000000 },\n-  { 2.4682690458513916e+33, 0.66666666666666663, 80.000000000000000 },\n-  { 3.5541181975850724e+35, 0.66666666666666663, 85.000000000000000 },\n-  { 5.1264933963228892e+37, 0.66666666666666663, 90.000000000000000 },\n-  { 7.4058894880134064e+39, 0.66666666666666663, 95.000000000000000 },\n-  { 1.0713562154788124e+42, 0.66666666666666663, 100.00000000000000 },\n+// max(|f - f_GSL|): 4.6422751473201760e+27 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 8.8432218147527708e-15\n+// mean(f - f_GSL): -2.2367290021744526e+26\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n+const testcase_cyl_bessel_i<double>\n+data019[21] =\n+{\n+  { 0.0000000000000000, 0.66666666666666663, 0.0000000000000000, 0.0 },\n+  { 25.902310583215122, 0.66666666666666663, 5.0000000000000000, 0.0 },\n+  { 2750.4090423459315, 0.66666666666666663, 10.000000000000000, 0.0 },\n+  { 334476.98138574377, 0.66666666666666663, 15.000000000000000, 0.0 },\n+  { 43064361.686912313, 0.66666666666666663, 20.000000000000000, 0.0 },\n+  { 5722397441.9603882, 0.66666666666666663, 25.000000000000000, 0.0 },\n+  { 775804343498.02661, 0.66666666666666663, 30.000000000000000, 0.0 },\n+  { 106649495512800.88, 0.66666666666666663, 35.000000000000000, 0.0 },\n+  { 14811199896983754., 0.66666666666666663, 40.000000000000000, 0.0 },\n+  { 2.0730345814356961e+18, 0.66666666666666663, 45.000000000000000, 0.0 },\n+  { 2.9194166755257467e+20, 0.66666666666666663, 50.000000000000000, 0.0 },\n+  { 4.1319059569935374e+22, 0.66666666666666663, 55.000000000000000, 0.0 },\n+  { 5.8721031476386222e+24, 0.66666666666666663, 60.000000000000000, 0.0 },\n+  { 8.3741368248217830e+26, 0.66666666666666663, 65.000000000000000, 0.0 },\n+  { 1.1977528777008688e+29, 0.66666666666666663, 70.000000000000000, 0.0 },\n+  { 1.7175081240014333e+31, 0.66666666666666663, 75.000000000000000, 0.0 },\n+  { 2.4682690458513916e+33, 0.66666666666666663, 80.000000000000000, 0.0 },\n+  { 3.5541181975850724e+35, 0.66666666666666663, 85.000000000000000, 0.0 },\n+  { 5.1264933963228892e+37, 0.66666666666666663, 90.000000000000000, 0.0 },\n+  { 7.4058894880134064e+39, 0.66666666666666663, 95.000000000000000, 0.0 },\n+  { 1.0713562154788124e+42, 0.66666666666666663, 100.00000000000000, 0.0 },\n };\n-\n-// Test function for nu=0.66666666666666663.\n-template<typename Tp>\n-  void\n-  test013()\n-  {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n-    unsigned int num_datum = sizeof(data013)\n-\t\t\t   / sizeof(testcase_cyl_bessel_i<double>);\n-    for (unsigned int i = 0; i < num_datum; ++i)\n-      {\n-\tconst Tp f = std::tr1::cyl_bessel_i(Tp(data013[i].nu), Tp(data013[i].x));\n-\tconst Tp f0 = data013[i].f0;\n-\tconst Tp diff = f - f0;\n-\tif (std::abs(diff) > max_abs_diff)\n-\t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n-\t  {\n-\t    const Tp frac = diff / f0;\n-\t    if (std::abs(frac) > max_abs_frac)\n-\t      max_abs_frac = std::abs(frac);\n-\t  }\n-      }\n-    VERIFY(max_abs_frac < Tp(5.0000000000000039e-13));\n-  }\n+const double toler019 = 5.0000000000000039e-13;\n \n // Test data for nu=1.0000000000000000.\n-testcase_cyl_bessel_i<double> data014[] = {\n-  { 0.0000000000000000, 1.0000000000000000, 0.0000000000000000 },\n-  { 24.335642142450524, 1.0000000000000000, 5.0000000000000000 },\n-  { 2670.9883037012560, 1.0000000000000000, 10.000000000000000 },\n-  { 328124.92197020649, 1.0000000000000000, 15.000000000000000 },\n-  { 42454973.385127783, 1.0000000000000000, 20.000000000000000 },\n-  { 5657865129.8787022, 1.0000000000000000, 25.000000000000000 },\n-  { 768532038938.95667, 1.0000000000000000, 30.000000000000000 },\n-  { 105794126051896.17, 1.0000000000000000, 35.000000000000000 },\n-  { 14707396163259354., 1.0000000000000000, 40.000000000000000 },\n-  { 2.0601334620815780e+18, 1.0000000000000000, 45.000000000000000 },\n-  { 2.9030785901035638e+20, 1.0000000000000000, 50.000000000000000 },\n-  { 4.1108986452992812e+22, 1.0000000000000000, 55.000000000000000 },\n-  { 5.8447515883904527e+24, 1.0000000000000000, 60.000000000000000 },\n-  { 8.3381485471501302e+26, 1.0000000000000000, 65.000000000000000 },\n-  { 1.1929750788892366e+29, 1.0000000000000000, 70.000000000000000 },\n-  { 1.7111160152965382e+31, 1.0000000000000000, 75.000000000000000 },\n-  { 2.4596595795675343e+33, 1.0000000000000000, 80.000000000000000 },\n-  { 3.5424536064404024e+35, 1.0000000000000000, 85.000000000000000 },\n-  { 5.1106068152566129e+37, 1.0000000000000000, 90.000000000000000 },\n-  { 7.3841518091360182e+39, 1.0000000000000000, 95.000000000000000 },\n-  { 1.0683693903381569e+42, 1.0000000000000000, 100.00000000000000 },\n+// max(|f - f_GSL|): 5.4159876718735387e+27 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 7.0819761463168391e-15\n+// mean(f - f_GSL): 2.5933470782682662e+26\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n+const testcase_cyl_bessel_i<double>\n+data020[21] =\n+{\n+  { 0.0000000000000000, 1.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 24.335642142450524, 1.0000000000000000, 5.0000000000000000, 0.0 },\n+  { 2670.9883037012560, 1.0000000000000000, 10.000000000000000, 0.0 },\n+  { 328124.92197020649, 1.0000000000000000, 15.000000000000000, 0.0 },\n+  { 42454973.385127783, 1.0000000000000000, 20.000000000000000, 0.0 },\n+  { 5657865129.8787022, 1.0000000000000000, 25.000000000000000, 0.0 },\n+  { 768532038938.95667, 1.0000000000000000, 30.000000000000000, 0.0 },\n+  { 105794126051896.17, 1.0000000000000000, 35.000000000000000, 0.0 },\n+  { 14707396163259352., 1.0000000000000000, 40.000000000000000, 0.0 },\n+  { 2.0601334620815780e+18, 1.0000000000000000, 45.000000000000000, 0.0 },\n+  { 2.9030785901035638e+20, 1.0000000000000000, 50.000000000000000, 0.0 },\n+  { 4.1108986452992812e+22, 1.0000000000000000, 55.000000000000000, 0.0 },\n+  { 5.8447515883904527e+24, 1.0000000000000000, 60.000000000000000, 0.0 },\n+  { 8.3381485471501288e+26, 1.0000000000000000, 65.000000000000000, 0.0 },\n+  { 1.1929750788892366e+29, 1.0000000000000000, 70.000000000000000, 0.0 },\n+  { 1.7111160152965382e+31, 1.0000000000000000, 75.000000000000000, 0.0 },\n+  { 2.4596595795675343e+33, 1.0000000000000000, 80.000000000000000, 0.0 },\n+  { 3.5424536064404024e+35, 1.0000000000000000, 85.000000000000000, 0.0 },\n+  { 5.1106068152566129e+37, 1.0000000000000000, 90.000000000000000, 0.0 },\n+  { 7.3841518091360182e+39, 1.0000000000000000, 95.000000000000000, 0.0 },\n+  { 1.0683693903381569e+42, 1.0000000000000000, 100.00000000000000, 0.0 },\n };\n-\n-// Test function for nu=1.0000000000000000.\n-template<typename Tp>\n-  void\n-  test014()\n-  {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n-    unsigned int num_datum = sizeof(data014)\n-\t\t\t   / sizeof(testcase_cyl_bessel_i<double>);\n-    for (unsigned int i = 0; i < num_datum; ++i)\n-      {\n-\tconst Tp f = std::tr1::cyl_bessel_i(Tp(data014[i].nu), Tp(data014[i].x));\n-\tconst Tp f0 = data014[i].f0;\n-\tconst Tp diff = f - f0;\n-\tif (std::abs(diff) > max_abs_diff)\n-\t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n-\t  {\n-\t    const Tp frac = diff / f0;\n-\t    if (std::abs(frac) > max_abs_frac)\n-\t      max_abs_frac = std::abs(frac);\n-\t  }\n-      }\n-    VERIFY(max_abs_frac < Tp(5.0000000000000039e-13));\n-  }\n+const double toler020 = 5.0000000000000039e-13;\n \n // Test data for nu=2.0000000000000000.\n-testcase_cyl_bessel_i<double> data015[] = {\n-  { 0.0000000000000000, 2.0000000000000000, 0.0000000000000000 },\n-  { 17.505614966624233, 2.0000000000000000, 5.0000000000000000 },\n-  { 2281.5189677260046, 2.0000000000000000, 10.000000000000000 },\n-  { 295899.38370188628, 2.0000000000000000, 15.000000000000000 },\n-  { 39312785.221040756, 2.0000000000000000, 20.000000000000000 },\n-  { 5321931396.0760155, 2.0000000000000000, 25.000000000000000 },\n-  { 730436828561.38013, 2.0000000000000000, 30.000000000000000 },\n-  { 101293439862977.19, 2.0000000000000000, 35.000000000000000 },\n-  { 14159404985256922., 2.0000000000000000, 40.000000000000000 },\n-  { 1.9918525879736883e+18, 2.0000000000000000, 45.000000000000000 },\n-  { 2.8164306402451938e+20, 2.0000000000000000, 50.000000000000000 },\n-  { 3.9993023372677540e+22, 2.0000000000000000, 55.000000000000000 },\n-  { 5.6992520026634433e+24, 2.0000000000000000, 60.000000000000000 },\n-  { 8.1464814287900378e+26, 2.0000000000000000, 65.000000000000000 },\n-  { 1.1675039556585663e+29, 2.0000000000000000, 70.000000000000000 },\n-  { 1.6770093176278926e+31, 2.0000000000000000, 75.000000000000000 },\n-  { 2.4136869148449879e+33, 2.0000000000000000, 80.000000000000000 },\n-  { 3.4801257808448186e+35, 2.0000000000000000, 85.000000000000000 },\n-  { 5.0256693051696307e+37, 2.0000000000000000, 90.000000000000000 },\n-  { 7.2678700343145818e+39, 2.0000000000000000, 95.000000000000000 },\n-  { 1.0523843193243042e+42, 2.0000000000000000, 100.00000000000000 },\n+// max(|f - f_GSL|): 6.1897001964269014e+27 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 1.0553248866140883e-14\n+// mean(f - f_GSL): 2.9514880793266611e+26\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n+const testcase_cyl_bessel_i<double>\n+data021[21] =\n+{\n+  { 0.0000000000000000, 2.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 17.505614966624233, 2.0000000000000000, 5.0000000000000000, 0.0 },\n+  { 2281.5189677260046, 2.0000000000000000, 10.000000000000000, 0.0 },\n+  { 295899.38370188628, 2.0000000000000000, 15.000000000000000, 0.0 },\n+  { 39312785.221040756, 2.0000000000000000, 20.000000000000000, 0.0 },\n+  { 5321931396.0760155, 2.0000000000000000, 25.000000000000000, 0.0 },\n+  { 730436828561.38013, 2.0000000000000000, 30.000000000000000, 0.0 },\n+  { 101293439862977.19, 2.0000000000000000, 35.000000000000000, 0.0 },\n+  { 14159404985256920., 2.0000000000000000, 40.000000000000000, 0.0 },\n+  { 1.9918525879736883e+18, 2.0000000000000000, 45.000000000000000, 0.0 },\n+  { 2.8164306402451938e+20, 2.0000000000000000, 50.000000000000000, 0.0 },\n+  { 3.9993023372677540e+22, 2.0000000000000000, 55.000000000000000, 0.0 },\n+  { 5.6992520026634433e+24, 2.0000000000000000, 60.000000000000000, 0.0 },\n+  { 8.1464814287900364e+26, 2.0000000000000000, 65.000000000000000, 0.0 },\n+  { 1.1675039556585663e+29, 2.0000000000000000, 70.000000000000000, 0.0 },\n+  { 1.6770093176278926e+31, 2.0000000000000000, 75.000000000000000, 0.0 },\n+  { 2.4136869148449879e+33, 2.0000000000000000, 80.000000000000000, 0.0 },\n+  { 3.4801257808448186e+35, 2.0000000000000000, 85.000000000000000, 0.0 },\n+  { 5.0256693051696307e+37, 2.0000000000000000, 90.000000000000000, 0.0 },\n+  { 7.2678700343145818e+39, 2.0000000000000000, 95.000000000000000, 0.0 },\n+  { 1.0523843193243042e+42, 2.0000000000000000, 100.00000000000000, 0.0 },\n };\n-\n-// Test function for nu=2.0000000000000000.\n-template<typename Tp>\n-  void\n-  test015()\n-  {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n-    unsigned int num_datum = sizeof(data015)\n-\t\t\t   / sizeof(testcase_cyl_bessel_i<double>);\n-    for (unsigned int i = 0; i < num_datum; ++i)\n-      {\n-\tconst Tp f = std::tr1::cyl_bessel_i(Tp(data015[i].nu), Tp(data015[i].x));\n-\tconst Tp f0 = data015[i].f0;\n-\tconst Tp diff = f - f0;\n-\tif (std::abs(diff) > max_abs_diff)\n-\t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n-\t  {\n-\t    const Tp frac = diff / f0;\n-\t    if (std::abs(frac) > max_abs_frac)\n-\t      max_abs_frac = std::abs(frac);\n-\t  }\n-      }\n-    VERIFY(max_abs_frac < Tp(5.0000000000000039e-13));\n-  }\n+const double toler021 = 1.0000000000000008e-12;\n \n // Test data for nu=5.0000000000000000.\n-testcase_cyl_bessel_i<double> data016[] = {\n-  { 0.0000000000000000, 5.0000000000000000, 0.0000000000000000 },\n-  { 2.1579745473225476, 5.0000000000000000, 5.0000000000000000 },\n-  { 777.18828640326012, 5.0000000000000000, 10.000000000000000 },\n-  { 144572.01120063409, 5.0000000000000000, 15.000000000000000 },\n-  { 23018392.213413671, 5.0000000000000000, 20.000000000000000 },\n-  { 3472466208.7419176, 5.0000000000000000, 25.000000000000000 },\n-  { 512151465476.93494, 5.0000000000000000, 30.000000000000000 },\n-  { 74756743552251.547, 5.0000000000000000, 35.000000000000000 },\n-  { 10858318337624280., 5.0000000000000000, 40.000000000000000 },\n-  { 1.5736087399245911e+18, 5.0000000000000000, 45.000000000000000 },\n-  { 2.2785483079112825e+20, 5.0000000000000000, 50.000000000000000 },\n-  { 3.2989391052963687e+22, 5.0000000000000000, 55.000000000000000 },\n-  { 4.7777652072561732e+24, 5.0000000000000000, 60.000000000000000 },\n-  { 6.9232165147172657e+26, 5.0000000000000000, 65.000000000000000 },\n-  { 1.0038643002095155e+29, 5.0000000000000000, 70.000000000000000 },\n-  { 1.4566328222327073e+31, 5.0000000000000000, 75.000000000000000 },\n-  { 2.1151488565944835e+33, 5.0000000000000000, 80.000000000000000 },\n-  { 3.0735883450768239e+35, 5.0000000000000000, 85.000000000000000 },\n-  { 4.4694790189230327e+37, 5.0000000000000000, 90.000000000000000 },\n-  { 6.5037505570430995e+39, 5.0000000000000000, 95.000000000000000 },\n-  { 9.4700938730355882e+41, 5.0000000000000000, 100.00000000000000 },\n+// max(|f - f_GSL|): 1.0831975343747077e+27 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 1.0289491375166011e-14\n+// mean(f - f_GSL): -5.2041812077613416e+25\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n+const testcase_cyl_bessel_i<double>\n+data022[21] =\n+{\n+  { 0.0000000000000000, 5.0000000000000000, 0.0000000000000000, 0.0 },\n+  { 2.1579745473225476, 5.0000000000000000, 5.0000000000000000, 0.0 },\n+  { 777.18828640326012, 5.0000000000000000, 10.000000000000000, 0.0 },\n+  { 144572.01120063409, 5.0000000000000000, 15.000000000000000, 0.0 },\n+  { 23018392.213413671, 5.0000000000000000, 20.000000000000000, 0.0 },\n+  { 3472466208.7419176, 5.0000000000000000, 25.000000000000000, 0.0 },\n+  { 512151465476.93494, 5.0000000000000000, 30.000000000000000, 0.0 },\n+  { 74756743552251.547, 5.0000000000000000, 35.000000000000000, 0.0 },\n+  { 10858318337624278., 5.0000000000000000, 40.000000000000000, 0.0 },\n+  { 1.5736087399245911e+18, 5.0000000000000000, 45.000000000000000, 0.0 },\n+  { 2.2785483079112825e+20, 5.0000000000000000, 50.000000000000000, 0.0 },\n+  { 3.2989391052963687e+22, 5.0000000000000000, 55.000000000000000, 0.0 },\n+  { 4.7777652072561732e+24, 5.0000000000000000, 60.000000000000000, 0.0 },\n+  { 6.9232165147172657e+26, 5.0000000000000000, 65.000000000000000, 0.0 },\n+  { 1.0038643002095155e+29, 5.0000000000000000, 70.000000000000000, 0.0 },\n+  { 1.4566328222327073e+31, 5.0000000000000000, 75.000000000000000, 0.0 },\n+  { 2.1151488565944835e+33, 5.0000000000000000, 80.000000000000000, 0.0 },\n+  { 3.0735883450768239e+35, 5.0000000000000000, 85.000000000000000, 0.0 },\n+  { 4.4694790189230327e+37, 5.0000000000000000, 90.000000000000000, 0.0 },\n+  { 6.5037505570430995e+39, 5.0000000000000000, 95.000000000000000, 0.0 },\n+  { 9.4700938730355882e+41, 5.0000000000000000, 100.00000000000000, 0.0 },\n };\n-\n-// Test function for nu=5.0000000000000000.\n-template<typename Tp>\n-  void\n-  test016()\n-  {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n-    unsigned int num_datum = sizeof(data016)\n-\t\t\t   / sizeof(testcase_cyl_bessel_i<double>);\n-    for (unsigned int i = 0; i < num_datum; ++i)\n-      {\n-\tconst Tp f = std::tr1::cyl_bessel_i(Tp(data016[i].nu), Tp(data016[i].x));\n-\tconst Tp f0 = data016[i].f0;\n-\tconst Tp diff = f - f0;\n-\tif (std::abs(diff) > max_abs_diff)\n-\t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n-\t  {\n-\t    const Tp frac = diff / f0;\n-\t    if (std::abs(frac) > max_abs_frac)\n-\t      max_abs_frac = std::abs(frac);\n-\t  }\n-      }\n-    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-  }\n+const double toler022 = 1.0000000000000008e-12;\n \n // Test data for nu=10.000000000000000.\n-testcase_cyl_bessel_i<double> data017[] = {\n-  { 0.0000000000000000, 10.000000000000000, 0.0000000000000000 },\n-  { 0.0045800444191760525, 10.000000000000000, 5.0000000000000000 },\n-  { 21.891706163723381, 10.000000000000000, 10.000000000000000 },\n-  { 12267.475049806462, 10.000000000000000, 15.000000000000000 },\n-  { 3540200.2090195213, 10.000000000000000, 20.000000000000000 },\n-  { 771298871.17072666, 10.000000000000000, 25.000000000000000 },\n-  { 145831809975.96710, 10.000000000000000, 30.000000000000000 },\n-  { 25449470018534.777, 10.000000000000000, 35.000000000000000 },\n-  { 4228469210516757.5, 10.000000000000000, 40.000000000000000 },\n-  { 6.8049404557505165e+17, 10.000000000000000, 45.000000000000000 },\n-  { 1.0715971594776370e+20, 10.000000000000000, 50.000000000000000 },\n-  { 1.6618215752886714e+22, 10.000000000000000, 55.000000000000000 },\n-  { 2.5486246072566784e+24, 10.000000000000000, 60.000000000000000 },\n-  { 3.8764628702155481e+26, 10.000000000000000, 65.000000000000000 },\n-  { 5.8592538145409686e+28, 10.000000000000000, 70.000000000000000 },\n-  { 8.8135370711317444e+30, 10.000000000000000, 75.000000000000000 },\n-  { 1.3207418268325279e+33, 10.000000000000000, 80.000000000000000 },\n-  { 1.9732791360862190e+35, 10.000000000000000, 85.000000000000000 },\n-  { 2.9411893748384672e+37, 10.000000000000000, 90.000000000000000 },\n-  { 4.3754494922439984e+39, 10.000000000000000, 95.000000000000000 },\n-  { 6.4989755247201446e+41, 10.000000000000000, 100.00000000000000 },\n+// max(|f - f_GSL|): 1.5474250491067253e+26 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 1.2009151331790140e-14\n+// mean(f - f_GSL): 7.4845081675400805e+24\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n+const testcase_cyl_bessel_i<double>\n+data023[21] =\n+{\n+  { 0.0000000000000000, 10.000000000000000, 0.0000000000000000, 0.0 },\n+  { 0.0045800444191760525, 10.000000000000000, 5.0000000000000000, 0.0 },\n+  { 21.891706163723381, 10.000000000000000, 10.000000000000000, 0.0 },\n+  { 12267.475049806462, 10.000000000000000, 15.000000000000000, 0.0 },\n+  { 3540200.2090195213, 10.000000000000000, 20.000000000000000, 0.0 },\n+  { 771298871.17072666, 10.000000000000000, 25.000000000000000, 0.0 },\n+  { 145831809975.96710, 10.000000000000000, 30.000000000000000, 0.0 },\n+  { 25449470018534.777, 10.000000000000000, 35.000000000000000, 0.0 },\n+  { 4228469210516757.0, 10.000000000000000, 40.000000000000000, 0.0 },\n+  { 6.8049404557505165e+17, 10.000000000000000, 45.000000000000000, 0.0 },\n+  { 1.0715971594776370e+20, 10.000000000000000, 50.000000000000000, 0.0 },\n+  { 1.6618215752886714e+22, 10.000000000000000, 55.000000000000000, 0.0 },\n+  { 2.5486246072566784e+24, 10.000000000000000, 60.000000000000000, 0.0 },\n+  { 3.8764628702155475e+26, 10.000000000000000, 65.000000000000000, 0.0 },\n+  { 5.8592538145409686e+28, 10.000000000000000, 70.000000000000000, 0.0 },\n+  { 8.8135370711317444e+30, 10.000000000000000, 75.000000000000000, 0.0 },\n+  { 1.3207418268325279e+33, 10.000000000000000, 80.000000000000000, 0.0 },\n+  { 1.9732791360862190e+35, 10.000000000000000, 85.000000000000000, 0.0 },\n+  { 2.9411893748384672e+37, 10.000000000000000, 90.000000000000000, 0.0 },\n+  { 4.3754494922439984e+39, 10.000000000000000, 95.000000000000000, 0.0 },\n+  { 6.4989755247201446e+41, 10.000000000000000, 100.00000000000000, 0.0 },\n };\n-\n-// Test function for nu=10.000000000000000.\n-template<typename Tp>\n-  void\n-  test017()\n-  {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n-    unsigned int num_datum = sizeof(data017)\n-\t\t\t   / sizeof(testcase_cyl_bessel_i<double>);\n-    for (unsigned int i = 0; i < num_datum; ++i)\n-      {\n-\tconst Tp f = std::tr1::cyl_bessel_i(Tp(data017[i].nu), Tp(data017[i].x));\n-\tconst Tp f0 = data017[i].f0;\n-\tconst Tp diff = f - f0;\n-\tif (std::abs(diff) > max_abs_diff)\n-\t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n-\t  {\n-\t    const Tp frac = diff / f0;\n-\t    if (std::abs(frac) > max_abs_frac)\n-\t      max_abs_frac = std::abs(frac);\n-\t  }\n-      }\n-    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-  }\n+const double toler023 = 1.0000000000000008e-12;\n \n // Test data for nu=20.000000000000000.\n-testcase_cyl_bessel_i<double> data018[] = {\n-  { 0.0000000000000000, 20.000000000000000, 0.0000000000000000 },\n-  { 5.0242393579718066e-11, 20.000000000000000, 5.0000000000000000 },\n-  { 0.00012507997356449481, 20.000000000000000, 10.000000000000000 },\n-  { 1.6470152535015836, 20.000000000000000, 15.000000000000000 },\n-  { 3188.7503288536154, 20.000000000000000, 20.000000000000000 },\n-  { 2449840.5422952301, 20.000000000000000, 25.000000000000000 },\n-  { 1126985104.4483771, 20.000000000000000, 30.000000000000000 },\n-  { 379617876611.88580, 20.000000000000000, 35.000000000000000 },\n-  { 104459633129479.89, 20.000000000000000, 40.000000000000000 },\n-  { 25039579987216524., 20.000000000000000, 45.000000000000000 },\n-  { 5.4420084027529984e+18, 20.000000000000000, 50.000000000000000 },\n-  { 1.1007498584335495e+21, 20.000000000000000, 55.000000000000000 },\n-  { 2.1091734863057236e+23, 20.000000000000000, 60.000000000000000 },\n-  { 3.8763618091286899e+25, 20.000000000000000, 65.000000000000000 },\n-  { 6.8946130527930870e+27, 20.000000000000000, 70.000000000000000 },\n-  { 1.1946319948836447e+30, 20.000000000000000, 75.000000000000000 },\n-  { 2.0265314377577587e+32, 20.000000000000000, 80.000000000000000 },\n-  { 3.3784665214179985e+34, 20.000000000000000, 85.000000000000000 },\n-  { 5.5516089411796646e+36, 20.000000000000000, 90.000000000000000 },\n-  { 9.0129310795305151e+38, 20.000000000000000, 95.000000000000000 },\n-  { 1.4483461256427176e+41, 20.000000000000000, 100.00000000000000 },\n+// max(|f - f_GSL|): 1.9342813113834067e+25 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 1.5819230756119302e-14\n+// mean(f - f_GSL): 1.0213821732843951e+24\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n+const testcase_cyl_bessel_i<double>\n+data024[21] =\n+{\n+  { 0.0000000000000000, 20.000000000000000, 0.0000000000000000, 0.0 },\n+  { 5.0242393579718066e-11, 20.000000000000000, 5.0000000000000000, 0.0 },\n+  { 0.00012507997356449481, 20.000000000000000, 10.000000000000000, 0.0 },\n+  { 1.6470152535015836, 20.000000000000000, 15.000000000000000, 0.0 },\n+  { 3188.7503288536154, 20.000000000000000, 20.000000000000000, 0.0 },\n+  { 2449840.5422952301, 20.000000000000000, 25.000000000000000, 0.0 },\n+  { 1126985104.4483771, 20.000000000000000, 30.000000000000000, 0.0 },\n+  { 379617876611.88580, 20.000000000000000, 35.000000000000000, 0.0 },\n+  { 104459633129479.88, 20.000000000000000, 40.000000000000000, 0.0 },\n+  { 25039579987216524., 20.000000000000000, 45.000000000000000, 0.0 },\n+  { 5.4420084027529984e+18, 20.000000000000000, 50.000000000000000, 0.0 },\n+  { 1.1007498584335495e+21, 20.000000000000000, 55.000000000000000, 0.0 },\n+  { 2.1091734863057236e+23, 20.000000000000000, 60.000000000000000, 0.0 },\n+  { 3.8763618091286891e+25, 20.000000000000000, 65.000000000000000, 0.0 },\n+  { 6.8946130527930870e+27, 20.000000000000000, 70.000000000000000, 0.0 },\n+  { 1.1946319948836447e+30, 20.000000000000000, 75.000000000000000, 0.0 },\n+  { 2.0265314377577587e+32, 20.000000000000000, 80.000000000000000, 0.0 },\n+  { 3.3784665214179985e+34, 20.000000000000000, 85.000000000000000, 0.0 },\n+  { 5.5516089411796646e+36, 20.000000000000000, 90.000000000000000, 0.0 },\n+  { 9.0129310795305151e+38, 20.000000000000000, 95.000000000000000, 0.0 },\n+  { 1.4483461256427176e+41, 20.000000000000000, 100.00000000000000, 0.0 },\n };\n-\n-// Test function for nu=20.000000000000000.\n-template<typename Tp>\n-  void\n-  test018()\n-  {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n-    unsigned int num_datum = sizeof(data018)\n-\t\t\t   / sizeof(testcase_cyl_bessel_i<double>);\n-    for (unsigned int i = 0; i < num_datum; ++i)\n-      {\n-\tconst Tp f = std::tr1::cyl_bessel_i(Tp(data018[i].nu), Tp(data018[i].x));\n-\tconst Tp f0 = data018[i].f0;\n-\tconst Tp diff = f - f0;\n-\tif (std::abs(diff) > max_abs_diff)\n-\t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n-\t  {\n-\t    const Tp frac = diff / f0;\n-\t    if (std::abs(frac) > max_abs_frac)\n-\t      max_abs_frac = std::abs(frac);\n-\t  }\n-      }\n-    VERIFY(max_abs_frac < Tp(2.5000000000000020e-13));\n-  }\n+const double toler024 = 1.0000000000000008e-12;\n \n // Test data for nu=50.000000000000000.\n-testcase_cyl_bessel_i<double> data019[] = {\n-  { 0.0000000000000000, 50.000000000000000, 0.0000000000000000 },\n-  { 2.9314696468108517e-45, 50.000000000000000, 5.0000000000000000 },\n-  { 4.7568945607268442e-30, 50.000000000000000, 10.000000000000000 },\n-  { 5.5468372730667069e-21, 50.000000000000000, 15.000000000000000 },\n-  { 2.2551205757604056e-14, 50.000000000000000, 20.000000000000000 },\n-  { 4.5344251866130257e-09, 50.000000000000000, 25.000000000000000 },\n-  { 0.00014590106916468940, 50.000000000000000, 30.000000000000000 },\n-  { 1.3965549457254882, 50.000000000000000, 35.000000000000000 },\n-  { 5726.8656631289896, 50.000000000000000, 40.000000000000000 },\n-  { 12672593.113027781, 50.000000000000000, 45.000000000000000 },\n-  { 17650802430.016712, 50.000000000000000, 50.000000000000000 },\n-  { 17220231607789.926, 50.000000000000000, 55.000000000000000 },\n-  { 12704607933652176., 50.000000000000000, 60.000000000000000 },\n-  { 7.4989491942193725e+18, 50.000000000000000, 65.000000000000000 },\n-  { 3.6944034898904922e+21, 50.000000000000000, 70.000000000000000 },\n-  { 1.5691634774370186e+24, 50.000000000000000, 75.000000000000000 },\n-  { 5.8927749458163587e+26, 50.000000000000000, 80.000000000000000 },\n-  { 1.9958849054749339e+29, 50.000000000000000, 85.000000000000000 },\n-  { 6.1946050361781500e+31, 50.000000000000000, 90.000000000000000 },\n-  { 1.7845429728697119e+34, 50.000000000000000, 95.000000000000000 },\n-  { 4.8219580855940819e+36, 50.000000000000000, 100.00000000000000 },\n+// max(|f - f_GSL|): 4.4862481587261630e+22 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 6.0191728870880627e-14\n+// mean(f - f_GSL): 2.1246678955085789e+21\n+// variance(f - f_GSL): inf\n+// stddev(f - f_GSL): inf\n+const testcase_cyl_bessel_i<double>\n+data025[21] =\n+{\n+  { 0.0000000000000000, 50.000000000000000, 0.0000000000000000, 0.0 },\n+  { 2.9314696468108517e-45, 50.000000000000000, 5.0000000000000000, 0.0 },\n+  { 4.7568945607268435e-30, 50.000000000000000, 10.000000000000000, 0.0 },\n+  { 5.5468372730667069e-21, 50.000000000000000, 15.000000000000000, 0.0 },\n+  { 2.2551205757604056e-14, 50.000000000000000, 20.000000000000000, 0.0 },\n+  { 4.5344251866130257e-09, 50.000000000000000, 25.000000000000000, 0.0 },\n+  { 0.00014590106916468940, 50.000000000000000, 30.000000000000000, 0.0 },\n+  { 1.3965549457254882, 50.000000000000000, 35.000000000000000, 0.0 },\n+  { 5726.8656631289887, 50.000000000000000, 40.000000000000000, 0.0 },\n+  { 12672593.113027781, 50.000000000000000, 45.000000000000000, 0.0 },\n+  { 17650802430.016712, 50.000000000000000, 50.000000000000000, 0.0 },\n+  { 17220231607789.926, 50.000000000000000, 55.000000000000000, 0.0 },\n+  { 12704607933652176., 50.000000000000000, 60.000000000000000, 0.0 },\n+  { 7.4989491942193715e+18, 50.000000000000000, 65.000000000000000, 0.0 },\n+  { 3.6944034898904922e+21, 50.000000000000000, 70.000000000000000, 0.0 },\n+  { 1.5691634774370186e+24, 50.000000000000000, 75.000000000000000, 0.0 },\n+  { 5.8927749458163587e+26, 50.000000000000000, 80.000000000000000, 0.0 },\n+  { 1.9958849054749339e+29, 50.000000000000000, 85.000000000000000, 0.0 },\n+  { 6.1946050361781500e+31, 50.000000000000000, 90.000000000000000, 0.0 },\n+  { 1.7845429728697119e+34, 50.000000000000000, 95.000000000000000, 0.0 },\n+  { 4.8219580855940819e+36, 50.000000000000000, 100.00000000000000, 0.0 },\n };\n-\n-// Test function for nu=50.000000000000000.\n-template<typename Tp>\n-  void\n-  test019()\n-  {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n-    unsigned int num_datum = sizeof(data019)\n-\t\t\t   / sizeof(testcase_cyl_bessel_i<double>);\n-    for (unsigned int i = 0; i < num_datum; ++i)\n-      {\n-\tconst Tp f = std::tr1::cyl_bessel_i(Tp(data019[i].nu), Tp(data019[i].x));\n-\tconst Tp f0 = data019[i].f0;\n-\tconst Tp diff = f - f0;\n-\tif (std::abs(diff) > max_abs_diff)\n-\t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n-\t  {\n-\t    const Tp frac = diff / f0;\n-\t    if (std::abs(frac) > max_abs_frac)\n-\t      max_abs_frac = std::abs(frac);\n-\t  }\n-      }\n-    VERIFY(max_abs_frac < Tp(5.0000000000000029e-12));\n-  }\n+const double toler025 = 5.0000000000000029e-12;\n \n // Test data for nu=100.00000000000000.\n-testcase_cyl_bessel_i<double> data020[] = {\n-  { 0.0000000000000000, 100.00000000000000, 0.0000000000000000 },\n-  { 7.0935514885313123e-119, 100.00000000000000, 5.0000000000000000 },\n-  { 1.0823442017492018e-88, 100.00000000000000, 10.000000000000000 },\n-  { 5.9887888536468904e-71, 100.00000000000000, 15.000000000000000 },\n-  { 2.8703193216428771e-58, 100.00000000000000, 20.000000000000000 },\n-  { 2.4426896913122370e-48, 100.00000000000000, 25.000000000000000 },\n-  { 3.9476420053334271e-40, 100.00000000000000, 30.000000000000000 },\n-  { 4.2836596180818780e-33, 100.00000000000000, 35.000000000000000 },\n-  { 6.6249380222596129e-27, 100.00000000000000, 40.000000000000000 },\n-  { 2.3702587262788900e-21, 100.00000000000000, 45.000000000000000 },\n-  { 2.7278879470966917e-16, 100.00000000000000, 50.000000000000000 },\n-  { 1.2763258878228082e-11, 100.00000000000000, 55.000000000000000 },\n-  { 2.8832770906491972e-07, 100.00000000000000, 60.000000000000000 },\n-  { 0.0035805902717061227, 100.00000000000000, 65.000000000000000 },\n-  { 27.017219102595387, 100.00000000000000, 70.000000000000000 },\n-  { 134001.44891209516, 100.00000000000000, 75.000000000000000 },\n-  { 465194832.85060996, 100.00000000000000, 80.000000000000000 },\n-  { 1189280653119.4814, 100.00000000000000, 85.000000000000000 },\n-  { 2334119331258728.0, 100.00000000000000, 90.000000000000000 },\n-  { 3.6399223078502436e+18, 100.00000000000000, 95.000000000000000 },\n-  { 4.6415349416162005e+21, 100.00000000000000, 100.00000000000000 },\n+// max(|f - f_GSL|): 185597952.00000000 at index 20\n+// max(|f - f_GSL| / |f_GSL|): 2.8278213985558577e-13\n+// mean(f - f_GSL): 8855366.2060860656\n+// variance(f - f_GSL): 4.2527168883984777e+19\n+// stddev(f - f_GSL): 6521285830.5693655\n+const testcase_cyl_bessel_i<double>\n+data026[21] =\n+{\n+  { 0.0000000000000000, 100.00000000000000, 0.0000000000000000, 0.0 },\n+  { 7.0935514885313123e-119, 100.00000000000000, 5.0000000000000000, 0.0 },\n+  { 1.0823442017492015e-88, 100.00000000000000, 10.000000000000000, 0.0 },\n+  { 5.9887888536468904e-71, 100.00000000000000, 15.000000000000000, 0.0 },\n+  { 2.8703193216428771e-58, 100.00000000000000, 20.000000000000000, 0.0 },\n+  { 2.4426896913122370e-48, 100.00000000000000, 25.000000000000000, 0.0 },\n+  { 3.9476420053334271e-40, 100.00000000000000, 30.000000000000000, 0.0 },\n+  { 4.2836596180818780e-33, 100.00000000000000, 35.000000000000000, 0.0 },\n+  { 6.6249380222596129e-27, 100.00000000000000, 40.000000000000000, 0.0 },\n+  { 2.3702587262788900e-21, 100.00000000000000, 45.000000000000000, 0.0 },\n+  { 2.7278879470966917e-16, 100.00000000000000, 50.000000000000000, 0.0 },\n+  { 1.2763258878228082e-11, 100.00000000000000, 55.000000000000000, 0.0 },\n+  { 2.8832770906491972e-07, 100.00000000000000, 60.000000000000000, 0.0 },\n+  { 0.0035805902717061223, 100.00000000000000, 65.000000000000000, 0.0 },\n+  { 27.017219102595387, 100.00000000000000, 70.000000000000000, 0.0 },\n+  { 134001.44891209516, 100.00000000000000, 75.000000000000000, 0.0 },\n+  { 465194832.85060996, 100.00000000000000, 80.000000000000000, 0.0 },\n+  { 1189280653119.4814, 100.00000000000000, 85.000000000000000, 0.0 },\n+  { 2334119331258728.0, 100.00000000000000, 90.000000000000000, 0.0 },\n+  { 3.6399223078502436e+18, 100.00000000000000, 95.000000000000000, 0.0 },\n+  { 4.6415349416162005e+21, 100.00000000000000, 100.00000000000000, 0.0 },\n };\n+const double toler026 = 2.5000000000000014e-11;\n \n-// Test function for nu=100.00000000000000.\n-template<typename Tp>\n+template<typename Ret, unsigned int Num>\n   void\n-  test020()\n+  test(const testcase_cyl_bessel_i<Ret> (&data)[Num], Ret toler)\n   {\n-    const Tp eps = std::numeric_limits<Tp>::epsilon();\n-    Tp max_abs_diff = -Tp(1);\n-    Tp max_abs_frac = -Tp(1);\n-    unsigned int num_datum = sizeof(data020)\n-\t\t\t   / sizeof(testcase_cyl_bessel_i<double>);\n+    bool test __attribute__((unused)) = true;\n+    const Ret eps = std::numeric_limits<Ret>::epsilon();\n+    Ret max_abs_diff = -Ret(1);\n+    Ret max_abs_frac = -Ret(1);\n+    unsigned int num_datum = Num;\n     for (unsigned int i = 0; i < num_datum; ++i)\n       {\n-\tconst Tp f = std::tr1::cyl_bessel_i(Tp(data020[i].nu), Tp(data020[i].x));\n-\tconst Tp f0 = data020[i].f0;\n-\tconst Tp diff = f - f0;\n+\tconst Ret f = std::tr1::cyl_bessel_i(data[i].nu, data[i].x);\n+\tconst Ret f0 = data[i].f0;\n+\tconst Ret diff = f - f0;\n \tif (std::abs(diff) > max_abs_diff)\n \t  max_abs_diff = std::abs(diff);\n-\tif (std::abs(f0) > Tp(10) * eps\n-\t && std::abs(f) > Tp(10) * eps)\n+\tif (std::abs(f0) > Ret(10) * eps\n+\t && std::abs(f) > Ret(10) * eps)\n \t  {\n-\t    const Tp frac = diff / f0;\n+\t    const Ret frac = diff / f0;\n \t    if (std::abs(frac) > max_abs_frac)\n \t      max_abs_frac = std::abs(frac);\n \t  }\n       }\n-    VERIFY(max_abs_frac < Tp(2.5000000000000014e-11));\n+    VERIFY(max_abs_frac < toler);\n   }\n \n int\n main()\n {\n-  test001<double>();\n-  test002<double>();\n-  test003<double>();\n-  test004<double>();\n-  test005<double>();\n-  test006<double>();\n-  test007<double>();\n-  test008<double>();\n-  test009<double>();\n-  test010<double>();\n-  test011<double>();\n-  test012<double>();\n-  test013<double>();\n-  test014<double>();\n-  test015<double>();\n-  test016<double>();\n-  test017<double>();\n-  test018<double>();\n-  test019<double>();\n-  test020<double>();\n+  test(data007, toler007);\n+  test(data008, toler008);\n+  test(data009, toler009);\n+  test(data010, toler010);\n+  test(data011, toler011);\n+  test(data012, toler012);\n+  test(data013, toler013);\n+  test(data014, toler014);\n+  test(data015, toler015);\n+  test(data016, toler016);\n+  test(data017, toler017);\n+  test(data018, toler018);\n+  test(data019, toler019);\n+  test(data020, toler020);\n+  test(data021, toler021);\n+  test(data022, toler022);\n+  test(data023, toler023);\n+  test(data024, toler024);\n+  test(data025, toler025);\n+  test(data026, toler026);\n   return 0;\n }"}, {"sha": "26f4dd3a64fbb2b640cd3588dd46db427335854f", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/09_cyl_bessel_j/check_value.cc", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F09_cyl_bessel_j%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F09_cyl_bessel_j%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F09_cyl_bessel_j%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}, {"sha": "a73152c8b36522635da240b969f0a6ea8ca0eafc", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/10_cyl_bessel_k/check_value.cc", "status": "modified", "additions": 688, "deletions": 1103, "changes": 1791, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F10_cyl_bessel_k%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F10_cyl_bessel_k%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F10_cyl_bessel_k%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}, {"sha": "55791493d91143eb420483e0e85ec90b5c2a7168", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/11_cyl_neumann/check_value.cc", "status": "modified", "additions": 688, "deletions": 1089, "changes": 1777, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F11_cyl_neumann%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F11_cyl_neumann%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F11_cyl_neumann%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}, {"sha": "f8ff30fe191c484bd809eb18b3ecf6646da01550", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/12_ellint_1/check_value.cc", "status": "modified", "additions": 429, "deletions": 764, "changes": 1193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F12_ellint_1%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F12_ellint_1%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F12_ellint_1%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}, {"sha": "6b26e741a3f5dc31c4307bf629f24382e3b00305", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/13_ellint_2/check_value.cc", "status": "modified", "additions": 429, "deletions": 764, "changes": 1193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F13_ellint_2%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F13_ellint_2%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F13_ellint_2%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}, {"sha": "5c31244b0c2649c814e96fbff0506762c4556d8d", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/14_ellint_3/check_value.cc", "status": "modified", "additions": 6133, "deletions": 9906, "changes": 16039, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F14_ellint_3%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F14_ellint_3%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F14_ellint_3%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}, {"sha": "1ee5f4f07f46f5d8ffbd02f88f292366ff797a4a", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/14_ellint_3/pr66689.cc", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F14_ellint_3%2Fpr66689.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F14_ellint_3%2Fpr66689.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F14_ellint_3%2Fpr66689.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}, {"sha": "6cfc292500966f03b72ba49a3cb37ed041e17b56", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/15_expint/check_value_neg.cc", "status": "modified", "additions": 166, "deletions": 93, "changes": 259, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F15_expint%2Fcheck_value_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F15_expint%2Fcheck_value_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F15_expint%2Fcheck_value_neg.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}, {"sha": "9eff168d74f7fce6127b48a57e9d81383d8906a0", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/16_hermite/check_value.cc", "status": "modified", "additions": 1854, "deletions": 1851, "changes": 3705, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F16_hermite%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F16_hermite%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F16_hermite%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}, {"sha": "558db8dc2591e552792a19b2bffafdca18e3c758", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/17_hyperg/check_value.cc", "status": "modified", "additions": 12051, "deletions": 16679, "changes": 28730, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F17_hyperg%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F17_hyperg%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F17_hyperg%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}, {"sha": "bb3ddf9b6d5087f95284b3a2c51132410af78740", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/18_laguerre/check_value.cc", "status": "modified", "additions": 290, "deletions": 416, "changes": 706, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F18_laguerre%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F18_laguerre%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F18_laguerre%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}, {"sha": "949554cfaa156bfe22a3e577e48802652e83f493", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/19_legendre/check_value.cc", "status": "modified", "additions": 290, "deletions": 416, "changes": 706, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F19_legendre%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F19_legendre%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F19_legendre%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}, {"sha": "c8035a9c012b7f8cb6ef516b2e5a32d652f31d2e", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/20_riemann_zeta/check_value_neg.cc", "status": "modified", "additions": 273, "deletions": 96, "changes": 369, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F20_riemann_zeta%2Fcheck_value_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F20_riemann_zeta%2Fcheck_value_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F20_riemann_zeta%2Fcheck_value_neg.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}, {"sha": "512f6ea5bb5b5274e5c3e0db046056a8c68e69c3", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/21_sph_bessel/check_value.cc", "status": "modified", "additions": 462, "deletions": 717, "changes": 1179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F21_sph_bessel%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F21_sph_bessel%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F21_sph_bessel%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}, {"sha": "e86b16539f1643d075d297d0c7b534cee39131e6", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/22_sph_legendre/check_value.cc", "status": "modified", "additions": 1916, "deletions": 2609, "changes": 4525, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F22_sph_legendre%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F22_sph_legendre%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F22_sph_legendre%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}, {"sha": "a7ff4bf24631de63f30ee322159f3810fe60fba1", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/special_functions/23_sph_neumann/check_value.cc", "status": "modified", "additions": 508, "deletions": 803, "changes": 1311, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F23_sph_neumann%2Fcheck_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b46881363f7210ddcd3474fa36c2f142d388e8fe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F23_sph_neumann%2Fcheck_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Fspecial_functions%2F23_sph_neumann%2Fcheck_value.cc?ref=b46881363f7210ddcd3474fa36c2f142d388e8fe"}]}