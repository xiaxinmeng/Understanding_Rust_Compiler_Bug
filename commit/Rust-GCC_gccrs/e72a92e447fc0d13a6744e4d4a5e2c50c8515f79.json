{"sha": "e72a92e447fc0d13a6744e4d4a5e2c50c8515f79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcyYTkyZTQ0N2ZjMGQxM2E2NzQ0ZTRkNGE1ZTJjNTBjODUxNWY3OQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2014-08-04T12:45:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T12:45:12Z"}, "message": "sem_ch7.adb (Analyze_Package_Body_Helper): When verifying the compatibility of SPARK_Mode between a spec and a body...\n\n2014-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch7.adb (Analyze_Package_Body_Helper): When verifying the\n\tcompatibility of SPARK_Mode between a spec and a body, use the\n\tSPARK_Mode of the public part.\n\t* sem_ch12.adb (Analyze_Generic_Subprogram_Declaration): Use\n\tthe already available routine to exchange the aspects between\n\tthe template and its copy. Analyze the aspects of copy to\n\tensure that the corresponding pragmas perform their semantic\n\teffects.  The partial analysis of aspects is no longer needed.\n\t(Analyze_Package_Instantiation): Save and restore the SPARK_Mode\n\tof the context.\n\t(Analyze_Subprogram_Instantiation): Save and restore the SPARK_Mode of\n\tthe context.\n\t* sem_prag.adb (Analyze_Pragma): Do not bypass a subprogram\n\tinstantiation which does not come from source.\n\nFrom-SVN: r213576", "tree": {"sha": "f5488c780cbf99d6b7959196d3068808076b3d71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5488c780cbf99d6b7959196d3068808076b3d71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e72a92e447fc0d13a6744e4d4a5e2c50c8515f79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e72a92e447fc0d13a6744e4d4a5e2c50c8515f79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e72a92e447fc0d13a6744e4d4a5e2c50c8515f79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e72a92e447fc0d13a6744e4d4a5e2c50c8515f79/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f1c7be38adce544fa0fba6c33cb67dd8d66886c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c7be38adce544fa0fba6c33cb67dd8d66886c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1c7be38adce544fa0fba6c33cb67dd8d66886c0"}], "stats": {"total": 128, "additions": 66, "deletions": 62}, "files": [{"sha": "e3a56a9796ef2ea4bd79ab4d0c4231fdda17fdb4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72a92e447fc0d13a6744e4d4a5e2c50c8515f79/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72a92e447fc0d13a6744e4d4a5e2c50c8515f79/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e72a92e447fc0d13a6744e4d4a5e2c50c8515f79", "patch": "@@ -1,3 +1,20 @@\n+2014-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch7.adb (Analyze_Package_Body_Helper): When verifying the\n+\tcompatibility of SPARK_Mode between a spec and a body, use the\n+\tSPARK_Mode of the public part.\n+\t* sem_ch12.adb (Analyze_Generic_Subprogram_Declaration): Use\n+\tthe already available routine to exchange the aspects between\n+\tthe template and its copy. Analyze the aspects of copy to\n+\tensure that the corresponding pragmas perform their semantic\n+\teffects.  The partial analysis of aspects is no longer needed.\n+\t(Analyze_Package_Instantiation): Save and restore the SPARK_Mode\n+\tof the context.\n+\t(Analyze_Subprogram_Instantiation): Save and restore the SPARK_Mode of\n+\tthe context.\n+\t* sem_prag.adb (Analyze_Pragma): Do not bypass a subprogram\n+\tinstantiation which does not come from source.\n+\n 2014-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* a-cfhama.ads, a-cfhase.ads, a-cforma.ads, a-cforse.ads Add"}, {"sha": "a54b9aa61b81fa395f2b71ffba86a7949375964d", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 29, "deletions": 50, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72a92e447fc0d13a6744e4d4a5e2c50c8515f79/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72a92e447fc0d13a6744e4d4a5e2c50c8515f79/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=e72a92e447fc0d13a6744e4d4a5e2c50c8515f79", "patch": "@@ -3342,19 +3342,10 @@ package body Sem_Ch12 is\n       Set_Parent_Spec (New_N, Save_Parent);\n       Rewrite (N, New_N);\n \n-      --  The aspect specifications are not attached to the tree, and must\n-      --  be copied and attached to the generic copy explicitly.\n+      --  Once the contents of the generic copy and the template are swapped,\n+      --  do the same for their respective aspect specifications.\n \n-      if Present (Aspect_Specifications (New_N)) then\n-         declare\n-            Aspects : constant List_Id := Aspect_Specifications (N);\n-         begin\n-            Set_Has_Aspects (N, False);\n-            Move_Aspects (New_N, To => N);\n-            Set_Has_Aspects (Original_Node (N), False);\n-            Set_Aspect_Specifications (Original_Node (N), Aspects);\n-         end;\n-      end if;\n+      Exchange_Aspects (N, New_N);\n \n       Spec := Specification (N);\n       Id := Defining_Entity (Spec);\n@@ -3369,8 +3360,15 @@ package body Sem_Ch12 is\n       Start_Generic;\n \n       Enter_Name (Id);\n-\n       Set_Scope_Depth_Value (Id, Scope_Depth (Current_Scope) + 1);\n+\n+      --  Analyze the aspects of the generic copy to ensure that all generated\n+      --  pragmas (if any) perform their semantic effects.\n+\n+      if Has_Aspects (N) then\n+         Analyze_Aspect_Specifications (N, Id);\n+      end if;\n+\n       Push_Scope (Id);\n       Enter_Generic_Scope (Id);\n       Set_Inner_Instances (Id, New_Elmt_List);\n@@ -3460,41 +3458,6 @@ package body Sem_Ch12 is\n          Make_Aspect_For_PPC_In_Gen_Sub_Decl (N);\n       end if;\n \n-      --  To capture global references, analyze the expressions of aspects,\n-      --  and propagate information to original tree. Note that in this case\n-      --  analysis of attributes is not delayed until the freeze point.\n-\n-      --  It seems very hard to recreate the proper visibility of the generic\n-      --  subprogram at a later point because the analysis of an aspect may\n-      --  create pragmas after the generic copies have been made ???\n-\n-      if Has_Aspects (N) then\n-         declare\n-            Aspect : Node_Id;\n-\n-         begin\n-            Aspect := First (Aspect_Specifications (N));\n-            while Present (Aspect) loop\n-               if Get_Aspect_Id (Aspect) /= Aspect_Warnings\n-                 and then Present (Expression (Aspect))\n-               then\n-                  Analyze (Expression (Aspect));\n-               end if;\n-\n-               Next (Aspect);\n-            end loop;\n-\n-            Aspect := First (Aspect_Specifications (Original_Node (N)));\n-            while Present (Aspect) loop\n-               if Present (Expression (Aspect)) then\n-                  Save_Global_References (Expression (Aspect));\n-               end if;\n-\n-               Next (Aspect);\n-            end loop;\n-         end;\n-      end if;\n-\n       End_Generic;\n       End_Scope;\n       Exit_Generic_Scope (Id);\n@@ -3533,6 +3496,10 @@ package body Sem_Ch12 is\n       Save_IPSM : constant Boolean := Ignore_Pragma_SPARK_Mode;\n       --  Save flag Ignore_Pragma_SPARK_Mode for restore on exit\n \n+      Save_SM  : constant SPARK_Mode_Type := SPARK_Mode;\n+      Save_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n+      --  Save the SPARK_Mode-related data for restore on exit\n+\n       Save_Style_Check : constant Boolean := Style_Check;\n       --  Save style check mode for restore on exit\n \n@@ -4283,7 +4250,9 @@ package body Sem_Ch12 is\n       end if;\n \n       Ignore_Pragma_SPARK_Mode := Save_IPSM;\n-      Style_Check := Save_Style_Check;\n+      SPARK_Mode               := Save_SM;\n+      SPARK_Mode_Pragma        := Save_SMP;\n+      Style_Check              := Save_Style_Check;\n \n       --  Check that if N is an instantiation of System.Dim_Float_IO or\n       --  System.Dim_Integer_IO, the formal type has a dimension system.\n@@ -4318,7 +4287,9 @@ package body Sem_Ch12 is\n          end if;\n \n          Ignore_Pragma_SPARK_Mode := Save_IPSM;\n-         Style_Check := Save_Style_Check;\n+         SPARK_Mode               := Save_SM;\n+         SPARK_Mode_Pragma        := Save_SMP;\n+         Style_Check              := Save_Style_Check;\n    end Analyze_Package_Instantiation;\n \n    --------------------------\n@@ -4875,6 +4846,10 @@ package body Sem_Ch12 is\n       Save_IPSM : constant Boolean := Ignore_Pragma_SPARK_Mode;\n       --  Save flag Ignore_Pragma_SPARK_Mode for restore on exit\n \n+      Save_SM  : constant SPARK_Mode_Type := SPARK_Mode;\n+      Save_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n+      --  Save the SPARK_Mode-related data for restore on exit\n+\n       Vis_Prims_List : Elist_Id := No_Elist;\n       --  List of primitives made temporarily visible in the instantiation\n       --  to match the visibility of the formal type\n@@ -5157,6 +5132,8 @@ package body Sem_Ch12 is\n          Generic_Renamings_HTable.Reset;\n \n          Ignore_Pragma_SPARK_Mode := Save_IPSM;\n+         SPARK_Mode               := Save_SM;\n+         SPARK_Mode_Pragma        := Save_SMP;\n       end if;\n \n    <<Leave>>\n@@ -5175,6 +5152,8 @@ package body Sem_Ch12 is\n          end if;\n \n          Ignore_Pragma_SPARK_Mode := Save_IPSM;\n+         SPARK_Mode               := Save_SM;\n+         SPARK_Mode_Pragma        := Save_SMP;\n    end Analyze_Subprogram_Instantiation;\n \n    -------------------------"}, {"sha": "4cda00c99113663fcd4dd510ac200e8fd61e4b04", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72a92e447fc0d13a6744e4d4a5e2c50c8515f79/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72a92e447fc0d13a6744e4d4a5e2c50c8515f79/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=e72a92e447fc0d13a6744e4d4a5e2c50c8515f79", "patch": "@@ -440,8 +440,8 @@ package body Sem_Ch7 is\n       --  Verify that the SPARK_Mode of the body agrees with that of its spec\n \n       if Present (SPARK_Pragma (Body_Id)) then\n-         if Present (SPARK_Aux_Pragma (Spec_Id)) then\n-            if Get_SPARK_Mode_From_Pragma (SPARK_Aux_Pragma (Spec_Id)) = Off\n+         if Present (SPARK_Pragma (Spec_Id)) then\n+            if Get_SPARK_Mode_From_Pragma (SPARK_Pragma (Spec_Id)) = Off\n                  and then\n                Get_SPARK_Mode_From_Pragma (SPARK_Pragma (Body_Id)) = On\n             then"}, {"sha": "43ae06525175b28dea561f1368134c0cf3f1bdff", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72a92e447fc0d13a6744e4d4a5e2c50c8515f79/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72a92e447fc0d13a6744e4d4a5e2c50c8515f79/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=e72a92e447fc0d13a6744e4d4a5e2c50c8515f79", "patch": "@@ -19353,6 +19353,16 @@ package body Sem_Prag is\n                         raise Pragma_Exit;\n                      end if;\n \n+                  --  Skip internally generated code, but consider subprogram\n+                  --  instantiations housed within their wrapper packages.\n+\n+                  elsif not Comes_From_Source (Stmt)\n+                    and then\n+                      (Nkind (Stmt) /= N_Subprogram_Declaration\n+                         or else No (Generic_Parent (Specification (Stmt))))\n+                  then\n+                     null;\n+\n                   --  The pragma is associated with a package or subprogram\n                   --  instantiation that does not act as a compilation unit.\n \n@@ -19374,28 +19384,26 @@ package body Sem_Prag is\n                      Set_SPARK_Pragma_Inherited (Inst_Id, False);\n                      return;\n \n-                  --  The pragma applies to a subprogram declaration\n+                  --  The pragma applies to a [generic] subprogram declaration\n \n+                  --    [generic]\n                   --    procedure Proc ...;\n                   --    pragma SPARK_Mode ..;\n \n-                  elsif Nkind (Stmt) = N_Subprogram_Declaration then\n+                  elsif Nkind_In (Stmt, N_Generic_Subprogram_Declaration,\n+                                        N_Subprogram_Declaration)\n+                  then\n                      Spec_Id := Defining_Entity (Stmt);\n                      Check_Library_Level_Entity (Spec_Id);\n                      Check_Pragma_Conformance\n                        (Context_Pragma => SPARK_Pragma (Spec_Id),\n                         Entity_Pragma  => Empty,\n                         Entity         => Empty);\n \n-                     Set_SPARK_Pragma               (Spec_Id, N);\n-                     Set_SPARK_Pragma_Inherited     (Spec_Id, False);\n+                     Set_SPARK_Pragma           (Spec_Id, N);\n+                     Set_SPARK_Pragma_Inherited (Spec_Id, False);\n                      return;\n \n-                  --  Skip internally generated code\n-\n-                  elsif not Comes_From_Source (Stmt) then\n-                     null;\n-\n                   --  Otherwise the pragma does not apply to a legal construct\n                   --  or it does not appear at the top of a declarative or a\n                   --  statement list. Issue an error and stop the analysis.\n@@ -19405,7 +19413,7 @@ package body Sem_Prag is\n                      exit;\n                   end if;\n \n-                  Stmt := Prev (Stmt);\n+                  Prev (Stmt);\n                end loop;\n \n                --  The pragma appears within package declarations"}]}