{"sha": "14227713ba760afb48493c66b4e7f425537c24a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQyMjc3MTNiYTc2MGFmYjQ4NDkzYzY2YjRlN2Y0MjU1MzdjMjRhMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2011-12-18T01:06:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-12-18T01:06:15Z"}, "message": "iterators.xml: Replace \"sect1\" with \"section\".\n\n\t* doc/xml/manual/iterators.xml: Replace \"sect1\" with \"section\".\n\t* doc/xml/manual/algorithms.xml: Likewise.\n\t* doc/html/manual/iterators.html: Likewise.\n\t* doc/html/manual/algorithms.html: Likewise.\n\nFrom-SVN: r182453", "tree": {"sha": "3d725db933f797bf04883d800f3716857e16b2b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d725db933f797bf04883d800f3716857e16b2b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14227713ba760afb48493c66b4e7f425537c24a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14227713ba760afb48493c66b4e7f425537c24a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14227713ba760afb48493c66b4e7f425537c24a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14227713ba760afb48493c66b4e7f425537c24a0/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55f8ed96858fe0e5ccd871a49417ce92913b0987", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55f8ed96858fe0e5ccd871a49417ce92913b0987", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55f8ed96858fe0e5ccd871a49417ce92913b0987"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "957d9630cc2874ba542133345a5ea49915b64a5e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14227713ba760afb48493c66b4e7f425537c24a0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14227713ba760afb48493c66b4e7f425537c24a0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=14227713ba760afb48493c66b4e7f425537c24a0", "patch": "@@ -1,3 +1,10 @@\n+2011-12-18  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* doc/xml/manual/iterators.xml: Replace \"sect1\" with \"section\".\n+\t* doc/xml/manual/algorithms.xml: Likewise.\n+\t* doc/html/manual/iterators.html: Likewise.\n+\t* doc/html/manual/algorithms.html: Likewise.\n+\n 2011-12-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \t    Jonathan Wakely  <jwakely.gcc@gmail.com>\n "}, {"sha": "14098b2afad97dbba4380dd79eedf5e42ef5c0ac", "filename": "libstdc++-v3/doc/html/manual/algorithms.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14227713ba760afb48493c66b4e7f425537c24a0/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Falgorithms.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14227713ba760afb48493c66b4e7f425537c24a0/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Falgorithms.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Falgorithms.html?ref=14227713ba760afb48493c66b4e7f425537c24a0", "patch": "@@ -9,7 +9,7 @@\n   Algorithms\n   <a id=\"id612473\" class=\"indexterm\"/>\n </h2></div></div></div><div class=\"toc\"><p><strong>Table of Contents</strong></p><dl><dt><span class=\"section\"><a href=\"algorithms.html#std.algorithms.mutating\">Mutating</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"algorithms.html#algorithms.mutating.swap\"><code class=\"function\">swap</code></a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"algorithms.html#algorithms.swap.specializations\">Specializations</a></span></dt></dl></dd></dl></dd></dl></div><p>\n-  The neatest accomplishment of the algorithms sect1 is that all the\n+  The neatest accomplishment of the algorithms section is that all the\n   work is done via iterators, not containers directly.  This means two\n   important things:\n </p><div class=\"orderedlist\"><ol class=\"orderedlist\"><li class=\"listitem\"><p>\n@@ -31,13 +31,13 @@\n   <span class=\"emphasis\"><em>N</em></span> as a size in the examples is to keep things\n   easy to read but probably won't be valid code.  You can use wrappers\n   such as those described in\n-  the <a class=\"link\" href=\"containers.html\" title=\"Chapter\u00a09.\u00a0 Containers\">containers sect1</a> to keep\n+  the <a class=\"link\" href=\"containers.html\" title=\"Chapter\u00a09.\u00a0 Containers\">containers section</a> to keep\n   real code readable.\n </p><p>\n   The single thing that trips people up the most is the definition\n   of <span class=\"emphasis\"><em>range</em></span> used with iterators; the famous\n   \"past-the-end\" rule that everybody loves to hate.  The\n-  <a class=\"link\" href=\"iterators.html\" title=\"Chapter\u00a010.\u00a0 Iterators\">iterators sect1</a> of this\n+  <a class=\"link\" href=\"iterators.html\" title=\"Chapter\u00a010.\u00a0 Iterators\">iterators section</a> of this\n     document has a complete explanation of this simple rule that seems\n     to cause so much confusion.  Once you\n     get <span class=\"emphasis\"><em>range</em></span> into your head (it's not that hard,"}, {"sha": "31f3ec7cd23b12b9d965502d45d002b0f6eadcbf", "filename": "libstdc++-v3/doc/html/manual/iterators.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14227713ba760afb48493c66b4e7f425537c24a0/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fiterators.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14227713ba760afb48493c66b4e7f425537c24a0/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fiterators.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fiterators.html?ref=14227713ba760afb48493c66b4e7f425537c24a0", "patch": "@@ -23,7 +23,7 @@\n      that <span class=\"emphasis\"><em>pointers</em></span> are\n       <span class=\"emphasis\"><em>iterators</em></span>, and that pointers can be used\n      whenever an iterator would be.  All those functions in the\n-     Algorithms sect1 of the Standard will work just as well on plain\n+     Algorithms section of the Standard will work just as well on plain\n      arrays and their pointers.\n    </p><p>\n      That doesn't mean that when you pass in a pointer, it gets"}, {"sha": "94672ed419655740aa8b43f12951508c997788cd", "filename": "libstdc++-v3/doc/xml/manual/algorithms.xml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14227713ba760afb48493c66b4e7f425537c24a0/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Falgorithms.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14227713ba760afb48493c66b4e7f425537c24a0/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Falgorithms.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Falgorithms.xml?ref=14227713ba760afb48493c66b4e7f425537c24a0", "patch": "@@ -22,7 +22,7 @@\n \n \n <para>\n-  The neatest accomplishment of the algorithms sect1 is that all the\n+  The neatest accomplishment of the algorithms section is that all the\n   work is done via iterators, not containers directly.  This means two\n   important things:\n </para>\n@@ -53,14 +53,14 @@\n   <emphasis>N</emphasis> as a size in the examples is to keep things\n   easy to read but probably won't be valid code.  You can use wrappers\n   such as those described in\n-  the <link linkend=\"std.containers\">containers sect1</link> to keep\n+  the <link linkend=\"std.containers\">containers section</link> to keep\n   real code readable.\n </para>\n <para>\n   The single thing that trips people up the most is the definition\n   of <emphasis>range</emphasis> used with iterators; the famous\n   \"past-the-end\" rule that everybody loves to hate.  The\n-  <link linkend=\"std.iterators\">iterators sect1</link> of this\n+  <link linkend=\"std.iterators\">iterators section</link> of this\n     document has a complete explanation of this simple rule that seems\n     to cause so much confusion.  Once you\n     get <emphasis>range</emphasis> into your head (it's not that hard,"}, {"sha": "11dc3ae885849d00241bbcc8c9eaf7e9bccc78db", "filename": "libstdc++-v3/doc/xml/manual/iterators.xml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14227713ba760afb48493c66b4e7f425537c24a0/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fiterators.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14227713ba760afb48493c66b4e7f425537c24a0/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fiterators.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fiterators.xml?ref=14227713ba760afb48493c66b4e7f425537c24a0", "patch": "@@ -41,7 +41,7 @@ classes.\n      that <emphasis>pointers</emphasis> are\n       <emphasis>iterators</emphasis>, and that pointers can be used\n      whenever an iterator would be.  All those functions in the\n-     Algorithms sect1 of the Standard will work just as well on plain\n+     Algorithms section of the Standard will work just as well on plain\n      arrays and their pointers.\n    </para>\n    <para>"}]}