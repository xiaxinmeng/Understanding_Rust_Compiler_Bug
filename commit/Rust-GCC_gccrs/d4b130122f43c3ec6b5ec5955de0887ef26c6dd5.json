{"sha": "d4b130122f43c3ec6b5ec5955de0887ef26c6dd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRiMTMwMTIyZjQzYzNlYzZiNWVjNTk1NWRlMDg4N2VmMjZjNmRkNQ==", "commit": {"author": {"name": "Kresten Krab Thorup", "email": "krab@gcc.gnu.org", "date": "1993-09-22T17:59:50Z"}, "committer": {"name": "Kresten Krab Thorup", "email": "krab@gcc.gnu.org", "date": "1993-09-22T17:59:50Z"}, "message": "(objc_write_type, objc_write_types): Take take char** args for writing strings in stead of char* to match NeXT.\n\n(objc_write_type, objc_write_types): Take\n       take char** args for writing strings in stead of char* to\n       match NeXT.  Also correct some typos in error messages.\n\nFrom-SVN: r5398", "tree": {"sha": "11c77411a85200843735d5b03e6482338ea47bae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11c77411a85200843735d5b03e6482338ea47bae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4b130122f43c3ec6b5ec5955de0887ef26c6dd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b130122f43c3ec6b5ec5955de0887ef26c6dd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4b130122f43c3ec6b5ec5955de0887ef26c6dd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b130122f43c3ec6b5ec5955de0887ef26c6dd5/comments", "author": null, "committer": null, "parents": [{"sha": "2f2c485abddce319c5f2fa9e8f44a458655e7404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f2c485abddce319c5f2fa9e8f44a458655e7404", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f2c485abddce319c5f2fa9e8f44a458655e7404"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "87bd5855fa3ab2c398735b75bd8dba8c19fd6c05", "filename": "gcc/objc/archive.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b130122f43c3ec6b5ec5955de0887ef26c6dd5/gcc%2Fobjc%2Farchive.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b130122f43c3ec6b5ec5955de0887ef26c6dd5/gcc%2Fobjc%2Farchive.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Farchive.c?ref=d4b130122f43c3ec6b5ec5955de0887ef26c6dd5", "patch": "@@ -34,7 +34,7 @@ You should have received a copy of the GNU General Public License along with\n #include \"typedstream.h\"\n \n #define __objc_fatal(format, args...) \\\n- { fprintf(stderr, \"archining: \"); \\\n+ { fprintf(stderr, \"archiving: \"); \\\n    fprintf(stderr, format, ## args); \\\n    fprintf(stderr, \"\\n\"); abort(); }\n \n@@ -854,7 +854,7 @@ objc_sizeof_type(const char* type)\n     break;\n \n   default:\n-    fprintf(stderr, \"objc_write_type: cannot parse typespec: %s\\n\", type);\n+    fprintf(stderr, \"objc_sizeof_type: cannot parse typespec: %s\\n\", type);\n     abort();\n   }\n }\n@@ -892,7 +892,7 @@ __objc_skip_type (const char* type)\n     break;\n \n   default:\n-    fprintf(stderr, \"objc_read_types: cannot parse typespec: %s\\n\", type);\n+    fprintf(stderr, \"__objc_skip_type: cannot parse typespec: %s\\n\", type);\n     abort();\n   }\n }\n@@ -949,11 +949,11 @@ objc_write_type(TypedStream* stream, const char* type, const void* data)\n     break;\n \n   case _C_CHARPTR:\n-    return objc_write_string (stream, (char*)data, strlen((char*)data));\n+    return objc_write_string (stream, *(char**)data, strlen(*(char**)data));\n     break;\n \n   case _C_ATOM:\n-    return objc_write_string_atomic (stream, (char*)data, strlen((char*)data));\n+    return objc_write_string_atomic (stream, *(char**)data, strlen(*(char**)data));\n     break;\n \n   case _C_ARY_B:\n@@ -1034,7 +1034,7 @@ objc_read_type(TypedStream* stream, const char* type, void* data)\n     break; \n \n   default:\n-    fprintf(stderr, \"objc_write_type: cannot parse typespec: %s\\n\", type);\n+    fprintf(stderr, \"objc_read_type: cannot parse typespec: %s\\n\", type);\n     abort();\n   }\n }\n@@ -1103,15 +1103,15 @@ objc_write_types (TypedStream* stream, const char* type, ...)\n \n       case _C_CHARPTR:\n \t{\n-\t  char* str = va_arg(args, char*);\n-\t  res = objc_write_string (stream, str, strlen(str));\n+\t  char** str = va_arg(args, char**);\n+\t  res = objc_write_string (stream, *str, strlen(*str));\n \t}\n \tbreak;\n \n       case _C_ATOM:\n \t{\n-\t  char* str = va_arg(args, char*);\n-\t  res = objc_write_string_atomic (stream, str, strlen(str));\n+\t  char** str = va_arg(args, char**);\n+\t  res = objc_write_string_atomic (stream, *str, strlen(*str));\n \t}\n \tbreak;\n \n@@ -1128,7 +1128,7 @@ objc_write_types (TypedStream* stream, const char* type, ...)\n \tbreak; \n \t\n       default:\n-\tfprintf(stderr, \"objc_write_type: cannot parse typespec: %s\\n\", type);\n+\tfprintf(stderr, \"objc_write_types: cannot parse typespec: %s\\n\", type);\n \tabort();\n       }\n     }\n@@ -1213,7 +1213,7 @@ objc_read_types(TypedStream* stream, const char* type, ...)\n \tbreak; \n \t\n       default:\n-\tfprintf(stderr, \"objc_read_type: cannot parse typespec: %s\\n\", type);\n+\tfprintf(stderr, \"objc_read_types: cannot parse typespec: %s\\n\", type);\n \tabort();\n       }\n     }"}]}