{"sha": "f913c102a4836355a7d9769a7d5998f27032ed98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkxM2MxMDJhNDgzNjM1NWE3ZDk3NjlhN2Q1OTk4ZjI3MDMyZWQ5OA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2002-02-05T17:56:34Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2002-02-05T17:56:34Z"}, "message": "target.h (struct gcc_target): Added ms_bitfield_layout_p.\n\n* target.h (struct gcc_target): Added ms_bitfield_layout_p.\n* target-def.h (TARGET_MS_BITFIELD_LAYOUT_P): New.  Added to...\n(TARGET_INITIALIZER): this.\n* doc/tm.texi (TARGET_MS_BITFIELD_LAYOUT_P): Document.\n(BITFIELD_NBYTES_LIMITED): Markup fix.\n* tree.h (default_ms_bitfield_layout_p): Declare.\n(record_layout_info): Added prev_field.\n* tree.c (default_ms_bitfield_layout_p): New fn.\n* c-decl.c (finish_struct): Disregard EMPTY_FIELD_BOUNDARY and\nPCC_BITFIELD_TYPE_MATTERS for MS bit-field layout.\n* stor-layout.c: Include target.h.\n(start_record_layout): Initialize prev_field.\n(place_field): Handle MS bit-field layout, and disregard\nEMPTY_FIELD_BOUNDARY, BITFIELD_NBYTES_LIMITED and\nPCC_BITFIELD_TYPE_MATTERS in this case.  Update prev_field.\n* Makefile.in (stor-layout.o): Adjust dependencies.\n\nFrom-SVN: r49526", "tree": {"sha": "3a2fa33e655d88a836f10525dd980faa2d69aff9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a2fa33e655d88a836f10525dd980faa2d69aff9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f913c102a4836355a7d9769a7d5998f27032ed98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f913c102a4836355a7d9769a7d5998f27032ed98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f913c102a4836355a7d9769a7d5998f27032ed98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f913c102a4836355a7d9769a7d5998f27032ed98/comments", "author": null, "committer": null, "parents": [{"sha": "c13db5d119dd543d25d410ec9622be07e186bdff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c13db5d119dd543d25d410ec9622be07e186bdff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c13db5d119dd543d25d410ec9622be07e186bdff"}], "stats": {"total": 133, "additions": 127, "deletions": 6}, "files": [{"sha": "458fccd1face1e08ac1258444e25567f38717f46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f913c102a4836355a7d9769a7d5998f27032ed98/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f913c102a4836355a7d9769a7d5998f27032ed98/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f913c102a4836355a7d9769a7d5998f27032ed98", "patch": "@@ -1,3 +1,22 @@\n+2002-02-05  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* target.h (struct gcc_target): Added ms_bitfield_layout_p.\n+\t* target-def.h (TARGET_MS_BITFIELD_LAYOUT_P): New.  Added to...\n+\t(TARGET_INITIALIZER): this.\n+\t* doc/tm.texi (TARGET_MS_BITFIELD_LAYOUT_P): Document.\n+\t(BITFIELD_NBYTES_LIMITED): Markup fix.\n+\t* tree.h (default_ms_bitfield_layout_p): Declare.\n+\t(record_layout_info): Added prev_field.\n+\t* tree.c (default_ms_bitfield_layout_p): New fn.\n+\t* c-decl.c (finish_struct): Disregard EMPTY_FIELD_BOUNDARY and\n+\tPCC_BITFIELD_TYPE_MATTERS for MS bit-field layout.\n+\t* stor-layout.c: Include target.h.\n+\t(start_record_layout): Initialize prev_field.\n+\t(place_field): Handle MS bit-field layout, and disregard\n+\tEMPTY_FIELD_BOUNDARY, BITFIELD_NBYTES_LIMITED and\n+\tPCC_BITFIELD_TYPE_MATTERS in this case.  Update prev_field.\n+\t* Makefile.in (stor-layout.o): Adjust dependencies.\n+\n 2002-02-05  Jason Merrill  <jason@redhat.com>\n \n \t* c-typeck.c (convert_for_assignment): Don't allow conversions"}, {"sha": "4dd0a761555d8bbba51b1c9012d1a3524da71ac7", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f913c102a4836355a7d9769a7d5998f27032ed98/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f913c102a4836355a7d9769a7d5998f27032ed98/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f913c102a4836355a7d9769a7d5998f27032ed98", "patch": "@@ -1335,7 +1335,7 @@ tree-inline.o : tree-inline.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) \\\n print-tree.o : print-tree.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(GGC_H) \\\n    langhooks.h\n stor-layout.o : stor-layout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h \\\n-   function.h $(EXPR_H) $(RTL_H) toplev.h $(GGC_H) $(TM_P_H)\n+   function.h $(EXPR_H) $(RTL_H) toplev.h $(GGC_H) $(TM_P_H) $(TARGET_H)\n fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h \\\n    toplev.h $(HASHTAB_H) $(EXPR_H) $(RTL_H) $(GGC_H) $(TM_P_H)\n diagnostic.o : diagnostic.c diagnostic.h real.h diagnostic.def \\"}, {"sha": "af6a2c0ef597ead60758d1e06d805609d27b5982", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f913c102a4836355a7d9769a7d5998f27032ed98/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f913c102a4836355a7d9769a7d5998f27032ed98/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=f913c102a4836355a7d9769a7d5998f27032ed98", "patch": "@@ -5727,7 +5727,8 @@ finish_struct (t, fieldlist, attributes)\n \t      DECL_BIT_FIELD (x) = 1;\n \t      SET_DECL_C_BIT_FIELD (x);\n \n-\t      if (width == 0)\n+\t      if (width == 0\n+\t\t  && ! (* targetm.ms_bitfield_layout_p) (t))\n \t\t{\n \t\t  /* field size 0 => force desired amount of alignment.  */\n #ifdef EMPTY_FIELD_BOUNDARY"}, {"sha": "ff255238da4786f497d61a26f5baa9cdabc76b54", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f913c102a4836355a7d9769a7d5998f27032ed98/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f913c102a4836355a7d9769a7d5998f27032ed98/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=f913c102a4836355a7d9769a7d5998f27032ed98", "patch": "@@ -1199,8 +1199,8 @@ get from @code{PCC_BITFIELD_TYPE_MATTERS}.\n \n @findex BITFIELD_NBYTES_LIMITED\n @item BITFIELD_NBYTES_LIMITED\n-Like PCC_BITFIELD_TYPE_MATTERS except that its effect is limited to\n-aligning a bit-field within the structure.\n+Like @code{PCC_BITFIELD_TYPE_MATTERS} except that its effect is limited\n+to aligning a bit-field within the structure.\n \n @findex MEMBER_TYPE_FORCES_BLK\n @item MEMBER_TYPE_FORCES_BLK (@var{field})\n@@ -1329,6 +1329,20 @@ memory is controlled by @code{FLOAT_WORDS_BIG_ENDIAN}.\n \n @end table\n \n+@deftypefn {Target Hook} bool TARGET_MS_BITFIELD_LAYOUT_P (tree @var{record_type})\n+This target hook returns @code{true} if bit-fields in the given\n+@var{record_type} are to be laid out following the rules of Microsoft\n+Visual C/C++, namely: (i) a bit-field won't share the same storage\n+unit with the previous bit-field if their underlying types have\n+different sizes, and the bit-field will be aligned to the highest\n+alignment of the underlying types of itself and of the previous\n+bit-field; (ii) a zero-sized bit-field will affect the alignment of\n+the whole enclosing structure, even if it is unnamed; except that\n+(iii) a zero-sized bit-field will be disregarded unless it follows\n+another bit-field of non-zero size.  If this hook returns @code{true},\n+other macros that control bit-field layout are ignored.\n+@end deftypefn\n+\n @node Type Layout\n @section Layout of Source Language Data Types\n "}, {"sha": "671d65a9c66215199348e530ea26fa4f26aefa2f", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f913c102a4836355a7d9769a7d5998f27032ed98/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f913c102a4836355a7d9769a7d5998f27032ed98/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=f913c102a4836355a7d9769a7d5998f27032ed98", "patch": "@@ -30,6 +30,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"expr.h\"\n #include \"toplev.h\"\n #include \"ggc.h\"\n+#include \"target.h\"\n \n /* Set to one when set_sizetype has been called.  */\n static int sizetype_set;\n@@ -503,6 +504,7 @@ start_record_layout (t)\n \n   rli->offset = size_zero_node;\n   rli->bitpos = bitsize_zero_node;\n+  rli->prev_field = 0;\n   rli->pending_statics = 0;\n   rli->packed_maybe_necessary = 0;\n \n@@ -787,8 +789,26 @@ place_field (rli, field)\n   /* Record must have at least as much alignment as any field.\n      Otherwise, the alignment of the field within the record is\n      meaningless.  */\n+  if ((* targetm.ms_bitfield_layout_p) (rli->t)\n+      && type != error_mark_node\n+      && DECL_BIT_FIELD_TYPE (field)\n+      && ! integer_zerop (TYPE_SIZE (type))\n+      && integer_zerop (DECL_SIZE (field)))\n+    {\n+      if (rli->prev_field\n+\t  && DECL_BIT_FIELD_TYPE (rli->prev_field)\n+\t  && ! integer_zerop (DECL_SIZE (rli->prev_field)))\n+\t{\n+\t  rli->record_align = MAX (rli->record_align, desired_align);\n+\t  rli->unpacked_align = MAX (rli->unpacked_align, TYPE_ALIGN (type));\n+\t}\n+      else\n+\tdesired_align = 1;\n+    }\t\n+  else\n #ifdef PCC_BITFIELD_TYPE_MATTERS\n   if (PCC_BITFIELD_TYPE_MATTERS && type != error_mark_node\n+      && ! (* targetm.ms_bitfield_layout_p) (rli->t)\n       && DECL_BIT_FIELD_TYPE (field)\n       && ! integer_zerop (TYPE_SIZE (type)))\n     {\n@@ -878,6 +898,7 @@ place_field (rli, field)\n      variable-sized fields, we need not worry about compatibility.  */\n #ifdef PCC_BITFIELD_TYPE_MATTERS\n   if (PCC_BITFIELD_TYPE_MATTERS\n+      && ! (* targetm.ms_bitfield_layout_p) (rli->t)\n       && TREE_CODE (field) == FIELD_DECL\n       && type != error_mark_node\n       && DECL_BIT_FIELD (field)\n@@ -907,6 +928,7 @@ place_field (rli, field)\n \n #ifdef BITFIELD_NBYTES_LIMITED\n   if (BITFIELD_NBYTES_LIMITED\n+      && ! (* targetm.ms_bitfield_layout_p) (rli->t)\n       && TREE_CODE (field) == FIELD_DECL\n       && type != error_mark_node\n       && DECL_BIT_FIELD_TYPE (field)\n@@ -940,6 +962,50 @@ place_field (rli, field)\n     }\n #endif\n \n+  /* See the docs for TARGET_MS_BITFIELD_LAYOUT_P for details.  */\n+  if ((* targetm.ms_bitfield_layout_p) (rli->t)\n+      && TREE_CODE (field) == FIELD_DECL\n+      && type != error_mark_node\n+      && ! DECL_PACKED (field)\n+      && rli->prev_field\n+      && DECL_SIZE (field)\n+      && host_integerp (DECL_SIZE (field), 1)\n+      && DECL_SIZE (rli->prev_field)\n+      && host_integerp (DECL_SIZE (rli->prev_field), 1)\n+      && host_integerp (rli->offset, 1)\n+      && host_integerp (TYPE_SIZE (type), 1)\n+      && host_integerp (TYPE_SIZE (TREE_TYPE (rli->prev_field)), 1)\n+      && ((DECL_BIT_FIELD_TYPE (rli->prev_field)\n+\t   && ! integer_zerop (DECL_SIZE (rli->prev_field)))\n+\t  || (DECL_BIT_FIELD_TYPE (field)\n+\t      && ! integer_zerop (DECL_SIZE (field))))\n+      && (! simple_cst_equal (TYPE_SIZE (type),\n+\t\t\t      TYPE_SIZE (TREE_TYPE (rli->prev_field)))\n+\t  /* If the previous field was a zero-sized bit-field, either\n+\t     it was ignored, in which case we must ensure the proper\n+\t     alignment of this field here, or it already forced the\n+\t     alignment of this field, in which case forcing the\n+\t     alignment again is harmless.  So, do it in both cases.  */\n+\t  || (DECL_BIT_FIELD_TYPE (rli->prev_field)\n+\t      && integer_zerop (DECL_SIZE (rli->prev_field)))))\n+    {\n+      unsigned int type_align = TYPE_ALIGN (type);\n+\n+      if (rli->prev_field\n+\t  && DECL_BIT_FIELD_TYPE (rli->prev_field)\n+\t  /* If the previous bit-field is zero-sized, we've already\n+\t     accounted for its alignment needs (or ignored it, if\n+\t     appropriate) while placing it.  */\n+\t  && ! integer_zerop (DECL_SIZE (rli->prev_field)))\n+\ttype_align = MAX (type_align,\n+\t\t\t  TYPE_ALIGN (TREE_TYPE (rli->prev_field)));\n+\n+      if (maximum_field_alignment != 0)\n+\ttype_align = MIN (type_align, maximum_field_alignment);\n+\n+      rli->bitpos = round_up (rli->bitpos, type_align);\n+    }\n+\n   /* Offset so far becomes the position of this field after normalizing.  */\n   normalize_rli (rli);\n   DECL_FIELD_OFFSET (field) = rli->offset;\n@@ -966,6 +1032,8 @@ place_field (rli, field)\n   if (known_align != actual_align)\n     layout_decl (field, actual_align);\n \n+  rli->prev_field = field;\n+\n   /* Now add size of this field to the size of the record.  If the size is\n      not constant, treat the field as being a multiple of bytes and just\n      adjust the offset, resetting the bit position.  Otherwise, apportion the"}, {"sha": "bc93b507f7e935752aa8b3a6b0ac95bf5d0bdd3c", "filename": "gcc/target-def.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f913c102a4836355a7d9769a7d5998f27032ed98/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f913c102a4836355a7d9769a7d5998f27032ed98/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=f913c102a4836355a7d9769a7d5998f27032ed98", "patch": "@@ -1,5 +1,5 @@\n /* Default initializers for a generic GCC target.\n-   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -164,6 +164,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_SET_DEFAULT_TYPE_ATTRIBUTES default_set_default_type_attributes\n #define TARGET_INSERT_ATTRIBUTES default_insert_attributes\n #define TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P default_function_attribute_inlinable_p\n+#define TARGET_MS_BITFIELD_LAYOUT_P default_ms_bitfield_layout_p\n \n /* In builtins.c.  */\n #define TARGET_INIT_BUILTINS default_init_builtins\n@@ -186,6 +187,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_SET_DEFAULT_TYPE_ATTRIBUTES,\t\t\\\n   TARGET_INSERT_ATTRIBUTES,\t\t\t\\\n   TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P,\t\\\n+  TARGET_MS_BITFIELD_LAYOUT_P,\t\t\t\\\n   TARGET_INIT_BUILTINS,\t\t\t\t\\\n   TARGET_EXPAND_BUILTIN,\t\t\t\\\n   TARGET_SECTION_TYPE_FLAGS,\t\t\t\\"}, {"sha": "38ce359eea2fc7cdcc29900bc4a71ac5b1e68af6", "filename": "gcc/target.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f913c102a4836355a7d9769a7d5998f27032ed98/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f913c102a4836355a7d9769a7d5998f27032ed98/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=f913c102a4836355a7d9769a7d5998f27032ed98", "patch": "@@ -1,5 +1,5 @@\n /* Data structure definitions for a generic GCC target.\n-   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -162,6 +162,10 @@ struct gcc_target\n      can be inlined despite its machine attributes, false otherwise.  */\n   bool (* function_attribute_inlinable_p) PARAMS ((tree fndecl));\n \n+  /* Return true if bitfields in RECORD_TYPE should follow the\n+     Microsoft Visual C++ bitfield layout rules.  */\n+  bool (* ms_bitfield_layout_p) PARAMS ((tree record_type));\n+\n   /* Set up target-specific built-in functions.  */\n   void (* init_builtins) PARAMS ((void));\n "}, {"sha": "28193e9e33063ae51c14f128e13dbf37a375dabb", "filename": "gcc/tree.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f913c102a4836355a7d9769a7d5998f27032ed98/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f913c102a4836355a7d9769a7d5998f27032ed98/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f913c102a4836355a7d9769a7d5998f27032ed98", "patch": "@@ -2736,6 +2736,16 @@ default_function_attribute_inlinable_p (fndecl)\n   return false;\n }\n \n+/* Default value of targetm.ms_bitfield_layout_p that always returns\n+   false.  */\n+bool\n+default_ms_bitfield_layout_p (record)\n+     tree record ATTRIBUTE_UNUSED;\n+{\n+  /* By default, GCC does not use the MS VC++ bitfield layout rules.  */\n+  return false;\n+}\n+\n /* Return non-zero if IDENT is a valid name for attribute ATTR,\n    or zero if not.\n "}, {"sha": "6c07f5b1ebcf86711ecb74169dbd89b923c08684", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f913c102a4836355a7d9769a7d5998f27032ed98/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f913c102a4836355a7d9769a7d5998f27032ed98/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f913c102a4836355a7d9769a7d5998f27032ed98", "patch": "@@ -2234,6 +2234,7 @@ extern int default_comp_type_attributes PARAMS ((tree, tree));\n extern void default_set_default_type_attributes PARAMS ((tree));\n extern void default_insert_attributes PARAMS ((tree, tree *));\n extern bool default_function_attribute_inlinable_p PARAMS ((tree));\n+extern bool default_ms_bitfield_layout_p PARAMS ((tree));\n \n /* Split a list of declspecs and attributes into two.  */\n \n@@ -2323,6 +2324,8 @@ typedef struct record_layout_info_s\n   /* The alignment of the record so far, allowing for the record to be\n      padded only at the end, in bits.  */\n   unsigned int unpadded_align;\n+  /* The previous field layed out.  */\n+  tree prev_field;\n   /* The static variables (i.e., class variables, as opposed to\n      instance variables) encountered in T.  */\n   tree pending_statics;"}]}