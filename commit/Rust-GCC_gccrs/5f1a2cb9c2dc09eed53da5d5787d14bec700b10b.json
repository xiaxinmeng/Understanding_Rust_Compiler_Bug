{"sha": "5f1a2cb9c2dc09eed53da5d5787d14bec700b10b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYxYTJjYjljMmRjMDllZWQ1M2RhNWQ1Nzg3ZDE0YmVjNzAwYjEwYg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-24T04:01:42Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-24T04:01:42Z"}, "message": "c++: Hard error with tentative parse and CTAD [PR87709]\n\nWhen parsing e.g. the operand of sizeof, where both types and\nexpressions are accepted, if during the tentative type parse we\nencounter an unexpected template placeholder, we must simulate\nan error rather than issue a real error because the expression\nparse can still succeed.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/87709\n\t* parser.c (cp_parser_type_id_1): If we see a template\n\tplaceholder, first try simulating an error before issuing\n\ta real error.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/87709\n\t* g++.dg/cpp1z/class-deduction86.C: New test.", "tree": {"sha": "85a21d55f999cadbe0f7972b05965eeab684cc55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85a21d55f999cadbe0f7972b05965eeab684cc55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f1a2cb9c2dc09eed53da5d5787d14bec700b10b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f1a2cb9c2dc09eed53da5d5787d14bec700b10b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f1a2cb9c2dc09eed53da5d5787d14bec700b10b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f1a2cb9c2dc09eed53da5d5787d14bec700b10b/comments", "author": null, "committer": null, "parents": [{"sha": "05ec629f05646837301820b89354a64673185224", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05ec629f05646837301820b89354a64673185224", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05ec629f05646837301820b89354a64673185224"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "e1b1617da6826c5d707865d150881045389a3af3", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1a2cb9c2dc09eed53da5d5787d14bec700b10b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1a2cb9c2dc09eed53da5d5787d14bec700b10b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5f1a2cb9c2dc09eed53da5d5787d14bec700b10b", "patch": "@@ -23270,10 +23270,13 @@ cp_parser_type_id_1 (cp_parser *parser, cp_parser_flags flags,\n \t    location_t loc = type_specifier_seq.locations[ds_type_spec];\n \t    if (tree tmpl = CLASS_PLACEHOLDER_TEMPLATE (auto_node))\n \t      {\n-\t\terror_at (loc, \"missing template arguments after %qT\",\n-\t\t\t  auto_node);\n-\t\tinform (DECL_SOURCE_LOCATION (tmpl), \"%qD declared here\",\n-\t\t\ttmpl);\n+\t\tif (!cp_parser_simulate_error (parser))\n+\t\t  {\n+\t\t    error_at (loc, \"missing template arguments after %qT\",\n+\t\t\t      auto_node);\n+\t\t    inform (DECL_SOURCE_LOCATION (tmpl), \"%qD declared here\",\n+\t\t\t    tmpl);\n+\t\t  }\n \t      }\n \t    else if (parser->in_template_argument_list_p)\n \t      error_at (loc, \"%qT not permitted in template argument\","}, {"sha": "a198ed24ec62deabd14a0b481a70d23df4c23beb", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction86.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1a2cb9c2dc09eed53da5d5787d14bec700b10b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction86.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1a2cb9c2dc09eed53da5d5787d14bec700b10b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction86.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction86.C?ref=5f1a2cb9c2dc09eed53da5d5787d14bec700b10b", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/87709\n+// { dg-do compile { target c++17 } }\n+\n+template <class T>\n+struct lit {\n+  lit(T) { }\n+};\n+\n+template <class T>\n+int operator+(lit<T>, lit<T>) {\n+  return 0;\n+}\n+\n+auto r2 = (lit(0)) + lit(0);\n+\n+static_assert(sizeof(lit(0)));"}]}