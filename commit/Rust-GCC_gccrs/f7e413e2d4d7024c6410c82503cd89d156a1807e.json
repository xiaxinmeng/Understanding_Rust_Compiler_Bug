{"sha": "f7e413e2d4d7024c6410c82503cd89d156a1807e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdlNDEzZTJkNGQ3MDI0YzY0MTBjODI1MDNjZDg5ZDE1NmExODA3ZQ==", "commit": {"author": {"name": "Dave Korn", "email": "dave.korn.cygwin@gmail.com", "date": "2009-11-30T23:22:04Z"}, "committer": {"name": "Dave Korn", "email": "davek@gcc.gnu.org", "date": "2009-11-30T23:22:04Z"}, "message": "configure.ac (USE_CYGWIN_LIBSTDCXX_WRAPPERS): Define to reflect status of AC_CHECK_FUNC for Cygwin DLL libstdc++ support wrappers.\n\ngcc/ChangeLog:\n\n2009-11-30  Dave Korn  <dave.korn.cygwin@gmail.com>\n\n\t* configure.ac (USE_CYGWIN_LIBSTDCXX_WRAPPERS): Define to reflect\n\tstatus of AC_CHECK_FUNC for Cygwin DLL libstdc++ support wrappers.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\n\t* config/i386/cygwin.h (CXX_WRAP_SPEC_LIST): Define list of --wrap\n\toptions for Cygwin DLL libstdc++ support wrappers.\n\t(CXX_WRAP_SPEC_OPT): Define spec to use wrappers or not by default\n\taccording to defined value of USE_CYGWIN_LIBSTDCXX_WRAPPERS.\n\t(CXX_WRAP_SPEC): Define entire wrapper spec in or out according to\n\twhether USE_CYGWIN_LIBSTDCXX_WRAPPERS is even defined or not.\n\t(LINK_SPEC): Include CXX_WRAP_SPEC.\n\t* gcc/config/i386/winnt.c (wrapper_strcmp): New qsort helper function.\n\t(i386_find_on_wrapper_list): Check if a function is found on the list\n\tof libstdc++ wrapper options.\n\t(i386_pe_file_end): If we are importing a wrapped function, also emit\n\tan external declaration for the real version.\n\t* config/i386/cygming.opt (muse-libstdc-wrappers): New option for\n\tCygwin targets. Update copyright year.\n\nlibstdc++-v3/ChangeLog:\n\n2009-11-30  Dave Korn  <dave.korn.cygwin@gmail.com>\n\n\t* libstdc++-v3/acinclude.m4 (GLIBCXX_ENABLE_SYMVERS): Don't disable\n\ton PE targets.\n\t* libstdc++-v3/configure: Regenerate.\n\t* libstdc++-v3/configure.host: Add libtool DLL options for Cygwin\n\tand MinGW platforms.\n\n\t* libstdc++-v3/include/bits/c++config (_GLIBCXX_VISIBILITY_ATTR): On\n\tplatforms that don't support visibility, allow them to declare a macro\n\t_GLIBCXX_PSEUDO_VISIBILITY that is applied in place of visibility.\n\t(_GLIBCXX_PSEUDO_VISIBILITY): Supply empty default if not declared by\n\tCPU- or OS-specific headers.\n\n\t* libstdc++-v3/config/os/newlib/os_defines.h\n\t(_GLIBCXX_PSEUDO_VISIBILITY_default): New macro for dllimport.\n\t(_GLIBCXX_PSEUDO_VISIBILITY_hidden): New empty macro.\n\t(_GLIBCXX_PSEUDO_VISIBILITY): Evaluate to one of the above.\n\t* libstdc++-v3/config/os/mingw32/os_defines.h\n\t(_GLIBCXX_PSEUDO_VISIBILITY_default,\n\t_GLIBCXX_PSEUDO_VISIBILITY_hidden,\n\t_GLIBCXX_PSEUDO_VISIBILITY): Likewise.\n\nFrom-SVN: r154853", "tree": {"sha": "9471c38454c458137ad85815b86a55469917bef7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9471c38454c458137ad85815b86a55469917bef7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7e413e2d4d7024c6410c82503cd89d156a1807e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7e413e2d4d7024c6410c82503cd89d156a1807e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7e413e2d4d7024c6410c82503cd89d156a1807e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7e413e2d4d7024c6410c82503cd89d156a1807e/comments", "author": {"login": "davek-cygwin", "id": 530057, "node_id": "MDQ6VXNlcjUzMDA1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/530057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davek-cygwin", "html_url": "https://github.com/davek-cygwin", "followers_url": "https://api.github.com/users/davek-cygwin/followers", "following_url": "https://api.github.com/users/davek-cygwin/following{/other_user}", "gists_url": "https://api.github.com/users/davek-cygwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/davek-cygwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davek-cygwin/subscriptions", "organizations_url": "https://api.github.com/users/davek-cygwin/orgs", "repos_url": "https://api.github.com/users/davek-cygwin/repos", "events_url": "https://api.github.com/users/davek-cygwin/events{/privacy}", "received_events_url": "https://api.github.com/users/davek-cygwin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c39ceab1a91f8f95ec0b44e1388832e6f91e0d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c39ceab1a91f8f95ec0b44e1388832e6f91e0d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c39ceab1a91f8f95ec0b44e1388832e6f91e0d3"}], "stats": {"total": 236, "additions": 232, "deletions": 4}, "files": [{"sha": "ff41ceb70956b4d906abc1fce96756aaf2e25a5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e413e2d4d7024c6410c82503cd89d156a1807e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e413e2d4d7024c6410c82503cd89d156a1807e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7e413e2d4d7024c6410c82503cd89d156a1807e", "patch": "@@ -1,3 +1,25 @@\n+2009-11-30  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\t* configure.ac (USE_CYGWIN_LIBSTDCXX_WRAPPERS): Define to reflect\n+\tstatus of AC_CHECK_FUNC for Cygwin DLL libstdc++ support wrappers.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\n+\t* config/i386/cygwin.h (CXX_WRAP_SPEC_LIST): Define list of --wrap\n+\toptions for Cygwin DLL libstdc++ support wrappers.\n+\t(CXX_WRAP_SPEC_OPT): Define spec to use wrappers or not by default\n+\taccording to defined value of USE_CYGWIN_LIBSTDCXX_WRAPPERS.\n+\t(CXX_WRAP_SPEC): Define entire wrapper spec in or out according to\n+\twhether USE_CYGWIN_LIBSTDCXX_WRAPPERS is even defined or not.\n+\t(LINK_SPEC): Include CXX_WRAP_SPEC.\n+\t* gcc/config/i386/winnt.c (wrapper_strcmp): New qsort helper function.\n+\t(i386_find_on_wrapper_list): Check if a function is found on the list\n+\tof libstdc++ wrapper options.\n+\t(i386_pe_file_end): If we are importing a wrapped function, also emit\n+\tan external declaration for the real version.\n+\t* config/i386/cygming.opt (muse-libstdc-wrappers): New option for\n+\tCygwin targets. Update copyright year.\n+\n 2009-11-30  Steve Ellcey  <sje@cup.hp.com>\n \t    Jakub Jelinek <jakub@redhat.com>\n "}, {"sha": "681e4f8bd483fd364467b62dda13018e423ac38e", "filename": "gcc/config.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e413e2d4d7024c6410c82503cd89d156a1807e/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e413e2d4d7024c6410c82503cd89d156a1807e/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=f7e413e2d4d7024c6410c82503cd89d156a1807e", "patch": "@@ -1634,6 +1634,13 @@\n #endif\n \n \n+/* Define if you want to generate code by default that assumes that the Cygwin\n+   DLL exports wrappers to support libstdc++ function replacement. */\n+#ifndef USED_FOR_TARGET\n+#undef USE_CYGWIN_LIBSTDCXX_WRAPPERS\n+#endif\n+\n+\n /* Define to 1 if the 'long long' (or '__int64') is wider than 'long' but\n    still efficiently supported by the host hardware. */\n #ifndef USED_FOR_TARGET"}, {"sha": "72dfc3401bb239935c3e822028aa22bfdd9c2f5e", "filename": "gcc/config/i386/cygming.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e413e2d4d7024c6410c82503cd89d156a1807e/gcc%2Fconfig%2Fi386%2Fcygming.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e413e2d4d7024c6410c82503cd89d156a1807e/gcc%2Fconfig%2Fi386%2Fcygming.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.opt?ref=f7e413e2d4d7024c6410c82503cd89d156a1807e", "patch": "@@ -1,6 +1,6 @@\n ; Cygwin- and MinGW-specific options.\n \n-; Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+; Copyright (C) 2005, 2007, 2009 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -49,3 +49,7 @@ Create GUI application\n mpe-aligned-commons\n Target Var(use_pe_aligned_common) Init(HAVE_GAS_ALIGNED_COMM)\n Use the GNU extension to the PE format for aligned common data\n+\n+muse-libstdc-wrappers\n+Target Condition({defined (USE_CYGWIN_LIBSTDCXX_WRAPPERS)})\n+Compile code that relies on Cygwin DLL wrappers to support C++ operator new/delete replacement"}, {"sha": "86eff635ae6d201bc04d6c00d12b18b0e3ba5093", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e413e2d4d7024c6410c82503cd89d156a1807e/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e413e2d4d7024c6410c82503cd89d156a1807e/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=f7e413e2d4d7024c6410c82503cd89d156a1807e", "patch": "@@ -85,9 +85,41 @@ along with GCC; see the file COPYING3.  If not see\n   %{mwindows:-lgdi32 -lcomdlg32} \\\n   -luser32 -lkernel32 -ladvapi32 -lshell32\"\n \n+/* To implement C++ function replacement we always wrap the cxx\n+   malloc-like operators.  See N2800 #17.6.4.6 [replacement.functions] */\n+#define CXX_WRAP_SPEC_LIST \"%{!static: %{!static-libstdc++: \\\n+  --wrap _Znwj \\\n+  --wrap _Znaj \\\n+  --wrap _ZdlPv \\\n+  --wrap _ZdaPv \\\n+  --wrap _ZnwjRKSt9nothrow_t \\\n+  --wrap _ZnajRKSt9nothrow_t \\\n+  --wrap _ZdlPvRKSt9nothrow_t \\\n+  --wrap _ZdaPvRKSt9nothrow_t \\\n+  }}\"\n+\n+#if defined (USE_CYGWIN_LIBSTDCXX_WRAPPERS)\n+\n+#if USE_CYGWIN_LIBSTDCXX_WRAPPERS\n+/* Default on, only explict -mno disables.  */\n+#define CXX_WRAP_SPEC_OPT \"!mno-use-libstdc-wrappers\"\n+#else\n+/* Default off, only explict -m enables.  */\n+#define CXX_WRAP_SPEC_OPT \"muse-libstdc-wrappers\"\n+#endif\n+\n+#define CXX_WRAP_SPEC \"%{\" CXX_WRAP_SPEC_OPT \":\" CXX_WRAP_SPEC_LIST \"}\"\n+\n+#else /* !defined (USE_CYGWIN_LIBSTDCXX_WRAPPERS)  */\n+\n+#define CXX_WRAP_SPEC \"\"\n+\n+#endif /* ?defined (USE_CYGWIN_LIBSTDCXX_WRAPPERS) */\n+\n #define LINK_SPEC \"\\\n   %{mwindows:--subsystem windows} \\\n   %{mconsole:--subsystem console} \\\n+  \" CXX_WRAP_SPEC \" \\\n   %{shared: %{mdll: %eshared and mdll are not compatible}} \\\n   %{shared: --shared} %{mdll:--dll} \\\n   %{static:-Bstatic} %{!static:-Bdynamic} \\"}, {"sha": "a6bd1e4f73964e0d551ffbe2dbf7a086461a6a22", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e413e2d4d7024c6410c82503cd89d156a1807e/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e413e2d4d7024c6410c82503cd89d156a1807e/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=f7e413e2d4d7024c6410c82503cd89d156a1807e", "patch": "@@ -603,6 +603,64 @@ i386_pe_maybe_record_exported_symbol (tree decl, const char *name, int is_data)\n   export_head = p;\n }\n \n+#ifdef CXX_WRAP_SPEC_LIST\n+\n+/*  Hash table equality helper function.  */\n+\n+static int\n+wrapper_strcmp (const void *x, const void *y)\n+{\n+  return !strcmp ((const char *) x, (const char *) y);\n+}\n+\n+/* Search for a function named TARGET in the list of library wrappers\n+   we are using, returning a pointer to it if found or NULL if not.\n+   This function might be called on quite a few symbols, and we only\n+   have the list of names of wrapped functions available to us as a\n+   spec string, so first time round we lazily initialise a hash table\n+   to make things quicker.  */\n+\n+static const char *\n+i386_find_on_wrapper_list (const char *target)\n+{\n+  static char first_time = 1;\n+  static htab_t wrappers;\n+\n+  if (first_time)\n+    {\n+      /* Beware that this is not a complicated parser, it assumes\n+         that any sequence of non-whitespace beginning with an\n+\t underscore is one of the wrapped symbols.  For now that's\n+\t adequate to distinguish symbols from spec substitutions\n+\t and command-line options.  */\n+      static char wrapper_list_buffer[] = CXX_WRAP_SPEC_LIST;\n+      char *bufptr;\n+      /* Breaks up the char array into separated strings\n+         strings and enter them into the hash table.  */\n+      wrappers = htab_create_alloc (8, htab_hash_string, wrapper_strcmp,\n+\t0, xcalloc, free);\n+      for (bufptr = wrapper_list_buffer; *bufptr; ++bufptr)\n+\t{\n+\t  char *found = NULL;\n+\t  if (ISSPACE (*bufptr))\n+\t    continue;\n+\t  if (*bufptr == '_')\n+\t    found = bufptr;\n+\t  while (*bufptr && !ISSPACE (*bufptr))\n+\t    ++bufptr;\n+\t  if (*bufptr)\n+\t    *bufptr = 0;\n+\t  if (found)\n+\t    *htab_find_slot (wrappers, found, INSERT) = found;\n+\t}\n+      first_time = 0;\n+    }\n+\n+  return (const char *) htab_find (wrappers, target);\n+}\n+\n+#endif /* CXX_WRAP_SPEC_LIST */\n+\n /* This is called at the end of assembly.  For each external function\n    which has not been defined, we output a declaration now.  We also\n    output the .drectve section.  */\n@@ -624,6 +682,15 @@ i386_pe_file_end (void)\n       if (! TREE_ASM_WRITTEN (decl)\n \t  && TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))\n \t{\n+#ifdef CXX_WRAP_SPEC_LIST\n+\t  /* To ensure the DLL that provides the corresponding real\n+\t     functions is still loaded at runtime, we must reference\n+\t     the real function so that an (unused) import is created.  */\n+\t  const char *realsym = i386_find_on_wrapper_list (p->name);\n+\t  if (realsym)\n+\t    i386_pe_declare_function_type (asm_out_file,\n+\t\tconcat (\"__real_\", realsym, NULL), TREE_PUBLIC (decl));\n+#endif /* CXX_WRAP_SPEC_LIST */\n \t  TREE_ASM_WRITTEN (decl) = 1;\n \t  i386_pe_declare_function_type (asm_out_file, p->name,\n \t\t\t\t\t TREE_PUBLIC (decl));"}, {"sha": "abf0b9acf748cc2bbcd626debbdf01be39a32884", "filename": "gcc/configure", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e413e2d4d7024c6410c82503cd89d156a1807e/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e413e2d4d7024c6410c82503cd89d156a1807e/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=f7e413e2d4d7024c6410c82503cd89d156a1807e", "patch": "@@ -22698,6 +22698,32 @@ fi\n     ;;\n \n   i[34567]86-*-* | x86_64-*-*)\n+    case $target_os in\n+      cygwin*)\n+\t# Full C++ conformance when using a shared libstdc++-v3 requires some\n+\t# support from the Cygwin DLL, which in more recent versions exports\n+\t# wrappers to aid in interposing and redirecting operators new, delete,\n+\t# etc., as per n2800 #17.6.4.6 [replacement.functions].  Check if we\n+\t# are configuring for a version of Cygwin that exports the wrappers.\n+\tif test x$host = x$target; then\n+\t  ac_fn_c_check_func \"$LINENO\" \"__wrap__Znaj\" \"ac_cv_func___wrap__Znaj\"\n+if test \"x$ac_cv_func___wrap__Znaj\" = x\"\"yes; then :\n+  gcc_ac_cygwin_dll_wrappers=yes\n+else\n+  gcc_ac_cygwin_dll_wrappers=no\n+fi\n+\n+\telse\n+\t  # Can't check presence of libc functions during cross-compile, so\n+\t  # we just have to assume we're building for an up-to-date target.\n+\t  gcc_ac_cygwin_dll_wrappers=yes\n+\tfi\n+\n+cat >>confdefs.h <<_ACEOF\n+#define USE_CYGWIN_LIBSTDCXX_WRAPPERS `if test $gcc_ac_cygwin_dll_wrappers = yes; then echo 1; else echo 0; fi`\n+_ACEOF\n+\n+    esac\n     case $target_os in\n       cygwin* | pe | mingw32*)\n \t# Recent binutils allows the three-operand form of \".comm\" on PE.  This"}, {"sha": "f357e1ee5a83443c5e419f4b4c6984e2cc5e35ad", "filename": "gcc/configure.ac", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e413e2d4d7024c6410c82503cd89d156a1807e/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e413e2d4d7024c6410c82503cd89d156a1807e/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=f7e413e2d4d7024c6410c82503cd89d156a1807e", "patch": "@@ -2999,6 +2999,25 @@ foo:\n changequote(,)dnl\n   i[34567]86-*-* | x86_64-*-*)\n changequote([,])dnl\n+    case $target_os in\n+      cygwin*)\n+\t# Full C++ conformance when using a shared libstdc++-v3 requires some\n+\t# support from the Cygwin DLL, which in more recent versions exports\n+\t# wrappers to aid in interposing and redirecting operators new, delete,\n+\t# etc., as per n2800 #17.6.4.6 [replacement.functions].  Check if we\n+\t# are configuring for a version of Cygwin that exports the wrappers.\n+\tif test x$host = x$target; then\n+\t  AC_CHECK_FUNC([__wrap__Znaj],[gcc_ac_cygwin_dll_wrappers=yes],[gcc_ac_cygwin_dll_wrappers=no])\n+\telse\n+\t  # Can't check presence of libc functions during cross-compile, so\n+\t  # we just have to assume we're building for an up-to-date target.\n+\t  gcc_ac_cygwin_dll_wrappers=yes\n+\tfi\n+\tAC_DEFINE_UNQUOTED(USE_CYGWIN_LIBSTDCXX_WRAPPERS,\n+\t  [`if test $gcc_ac_cygwin_dll_wrappers = yes; then echo 1; else echo 0; fi`],\n+\t  [Define if you want to generate code by default that assumes that the\n+\t   Cygwin DLL exports wrappers to support libstdc++ function replacement.])\n+    esac\n     case $target_os in\n       cygwin* | pe | mingw32*)\n \t# Recent binutils allows the three-operand form of \".comm\" on PE.  This"}, {"sha": "e44d6f4e5f3259de2eb3697e775cfb88f12ee6c8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e413e2d4d7024c6410c82503cd89d156a1807e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e413e2d4d7024c6410c82503cd89d156a1807e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f7e413e2d4d7024c6410c82503cd89d156a1807e", "patch": "@@ -1,3 +1,26 @@\n+2009-11-30  Dave Korn  <dave.korn.cygwin@gmail.com>\n+\n+\t* libstdc++-v3/acinclude.m4 (GLIBCXX_ENABLE_SYMVERS): Don't disable\n+\ton PE targets.\n+\t* libstdc++-v3/configure: Regenerate.\n+\t* libstdc++-v3/configure.host: Add libtool DLL options for Cygwin\n+\tand MinGW platforms.\n+\n+\t* libstdc++-v3/include/bits/c++config (_GLIBCXX_VISIBILITY_ATTR): On\n+\tplatforms that don't support visibility, allow them to declare a macro\n+\t_GLIBCXX_PSEUDO_VISIBILITY that is applied in place of visibility.\n+\t(_GLIBCXX_PSEUDO_VISIBILITY): Supply empty default if not declared by\n+\tCPU- or OS-specific headers.\n+\n+\t* libstdc++-v3/config/os/newlib/os_defines.h\n+\t(_GLIBCXX_PSEUDO_VISIBILITY_default): New macro for dllimport.\n+\t(_GLIBCXX_PSEUDO_VISIBILITY_hidden): New empty macro.\n+\t(_GLIBCXX_PSEUDO_VISIBILITY): Evaluate to one of the above.\n+\t* libstdc++-v3/config/os/mingw32/os_defines.h\n+\t(_GLIBCXX_PSEUDO_VISIBILITY_default,\n+\t_GLIBCXX_PSEUDO_VISIBILITY_hidden,\n+\t_GLIBCXX_PSEUDO_VISIBILITY): Likewise.\n+\n 2009-11-30  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/tr1_impl/functional: Remove file, copy its contents,"}, {"sha": "e0c698d75c2f9c442e59908bdec3b66970121c47", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e413e2d4d7024c6410c82503cd89d156a1807e/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e413e2d4d7024c6410c82503cd89d156a1807e/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=f7e413e2d4d7024c6410c82503cd89d156a1807e", "patch": "@@ -2737,7 +2737,7 @@ if test x$enable_symvers = xyes ; then\n   else\n     if test $with_gnu_ld = yes ; then\n       case ${target_os} in\n-        cygwin* | pe | mingw32* | hpux*)\n+        hpux*)\n           enable_symvers=no ;;\n         *)\n           enable_symvers=gnu ;;"}, {"sha": "5435ce9ae84dee534be5ee92167cbc3251167f6c", "filename": "libstdc++-v3/config/os/mingw32/os_defines.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e413e2d4d7024c6410c82503cd89d156a1807e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e413e2d4d7024c6410c82503cd89d156a1807e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fos_defines.h?ref=f7e413e2d4d7024c6410c82503cd89d156a1807e", "patch": "@@ -45,6 +45,15 @@\n #undef NOMINMAX\n #define NOMINMAX 1\n \n+#if defined (_GLIBCXX_DLL)\n+#define _GLIBCXX_PSEUDO_VISIBILITY_default __attribute__ ((__dllimport__))\n+#else\n+#define _GLIBCXX_PSEUDO_VISIBILITY_default\n+#endif\n+#define _GLIBCXX_PSEUDO_VISIBILITY_hidden\n+\n+#define _GLIBCXX_PSEUDO_VISIBILITY(V) _GLIBCXX_PSEUDO_VISIBILITY_ ## V\n+\n // See libstdc++/20806.\n #define _GLIBCXX_HAVE_DOS_BASED_FILESYSTEM 1\n "}, {"sha": "1ff3d4846cb009391086ad9ec0385fe9b5d1260e", "filename": "libstdc++-v3/config/os/newlib/os_defines.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e413e2d4d7024c6410c82503cd89d156a1807e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e413e2d4d7024c6410c82503cd89d156a1807e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fos_defines.h?ref=f7e413e2d4d7024c6410c82503cd89d156a1807e", "patch": "@@ -36,6 +36,15 @@\n #ifdef __CYGWIN__\n #define _GLIBCXX_GTHREAD_USE_WEAK 0\n \n+#if defined (_GLIBCXX_DLL)\n+#define _GLIBCXX_PSEUDO_VISIBILITY_default __attribute__ ((__dllimport__))\n+#else\n+#define _GLIBCXX_PSEUDO_VISIBILITY_default\n+#endif\n+#define _GLIBCXX_PSEUDO_VISIBILITY_hidden\n+\n+#define _GLIBCXX_PSEUDO_VISIBILITY(V) _GLIBCXX_PSEUDO_VISIBILITY_ ## V\n+\n // See libstdc++/20806.\n #define _GLIBCXX_HAVE_DOS_BASED_FILESYSTEM 1\n #endif"}, {"sha": "4f5d51783d631b8f7d0bdaedf8077bd5d26d6ebe", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e413e2d4d7024c6410c82503cd89d156a1807e/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e413e2d4d7024c6410c82503cd89d156a1807e/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=f7e413e2d4d7024c6410c82503cd89d156a1807e", "patch": "@@ -58050,7 +58050,7 @@ if test x$enable_symvers = xyes ; then\n   else\n     if test $with_gnu_ld = yes ; then\n       case ${target_os} in\n-        cygwin* | pe | mingw32* | hpux*)\n+        hpux*)\n           enable_symvers=no ;;\n         *)\n           enable_symvers=gnu ;;"}, {"sha": "02292b016d0ebd504b218f61579b0200031e9701", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e413e2d4d7024c6410c82503cd89d156a1807e/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e413e2d4d7024c6410c82503cd89d156a1807e/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=f7e413e2d4d7024c6410c82503cd89d156a1807e", "patch": "@@ -209,6 +209,7 @@ case \"${host_os}\" in\n     ;;\n   cygwin*)\n     os_include_dir=\"os/newlib\"\n+    OPT_LDFLAGS=\"${OPT_LDFLAGS} -no-undefined -bindir \\$(bindir)\"\n     ;;\n   darwin | darwin[1-7] | darwin[1-7].*)\n     # On Darwin, performance is improved if libstdc++ is single-module.\n@@ -258,6 +259,7 @@ case \"${host_os}\" in\n   mingw32*)\n     os_include_dir=\"os/mingw32\"\n     error_constants_dir=\"os/mingw32\"\n+    OPT_LDFLAGS=\"${OPT_LDFLAGS} -no-undefined -bindir \\$(bindir)\"\n     ;;\n   netbsd*)\n     os_include_dir=\"os/bsd/netbsd\""}, {"sha": "3746696458ac324a961bc6b115642c23dcd1779f", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e413e2d4d7024c6410c82503cd89d156a1807e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e413e2d4d7024c6410c82503cd89d156a1807e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=f7e413e2d4d7024c6410c82503cd89d156a1807e", "patch": "@@ -42,7 +42,9 @@\n #if _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY\n # define _GLIBCXX_VISIBILITY_ATTR(V) __attribute__ ((__visibility__ (#V)))\n #else\n-# define _GLIBCXX_VISIBILITY_ATTR(V) \n+// If this is not supplied by the OS-specific or CPU-specific\n+// headers included below, it will be defined to an empty default.\n+# define _GLIBCXX_VISIBILITY_ATTR(V) _GLIBCXX_PSEUDO_VISIBILITY(V)\n #endif\n \n // Macros for deprecated.\n@@ -275,6 +277,12 @@ namespace std\n // Pick up any CPU-specific definitions.\n #include <bits/cpu_defines.h>\n \n+// If platform uses neither visibility nor psuedo-visibility,\n+// specify empty default for namespace annotation macros.\n+#ifndef _GLIBCXX_PSEUDO_VISIBILITY\n+#define _GLIBCXX_PSEUDO_VISIBILITY(V)\n+#endif\n+\n // Allow use of \"export template.\" This is currently not a feature\n // that g++ supports.\n // #define _GLIBCXX_EXPORT_TEMPLATE 1"}]}