{"sha": "685d8dafb4a1cb29ee219ad7857614ff66a78022", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg1ZDhkYWZiNGExY2IyOWVlMjE5YWQ3ODU3NjE0ZmY2NmE3ODAyMg==", "commit": {"author": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-06-01T13:56:00Z"}, "committer": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-07-01T14:39:16Z"}, "message": "Fortran  : False positive for optional arguments PR95446\n\nCheck that there is non-optional argument of the same rank in the\nlist of actual arguments.  If there is the warning is not required.\n\n2020-07-01  Steven G. Kargl  <kargl@gcc.gnu.org>\n\ngcc/fortran/\n\n\tPR fortran/95446\n\t* resolve.c (resolve_elemental_actual): Add code to check for\n\tnon-optional argument of the same rank.  Revise warning message\n\tto refer to the Fortran 2018 standard.\n\n2020-07-01  Mark Eggleston  <markeggleston@gcc.gnu.org>\n\ngcc/testsuite/\n\n\tPR fortran/95446\n\t* gfortran.dg/elemental_optional_args_6.f90: Remove check\n\tfor warnings that were erroneously output.\n\t* gfortran.dg/pr95446.f90: New test.", "tree": {"sha": "bb4a6081c39d2ca77c16b17a7b8c6463f0a5da9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb4a6081c39d2ca77c16b17a7b8c6463f0a5da9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/685d8dafb4a1cb29ee219ad7857614ff66a78022", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/685d8dafb4a1cb29ee219ad7857614ff66a78022", "html_url": "https://github.com/Rust-GCC/gccrs/commit/685d8dafb4a1cb29ee219ad7857614ff66a78022", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/685d8dafb4a1cb29ee219ad7857614ff66a78022/comments", "author": null, "committer": null, "parents": [{"sha": "8461191b826654a30eaaa57257bcca8e548f11c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8461191b826654a30eaaa57257bcca8e548f11c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8461191b826654a30eaaa57257bcca8e548f11c2"}], "stats": {"total": 70, "additions": 62, "deletions": 8}, "files": [{"sha": "2a164055ffcd8a56e8184fe0656a59257e7cf6cb", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/685d8dafb4a1cb29ee219ad7857614ff66a78022/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/685d8dafb4a1cb29ee219ad7857614ff66a78022/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=685d8dafb4a1cb29ee219ad7857614ff66a78022", "patch": "@@ -2277,12 +2277,28 @@ resolve_elemental_actual (gfc_expr *expr, gfc_code *c)\n \t  && (set_by_optional || arg->expr->rank != rank)\n \t  && !(isym && isym->id == GFC_ISYM_CONVERSION))\n \t{\n-\t  gfc_warning (OPT_Wpedantic,\n-\t\t       \"%qs at %L is an array and OPTIONAL; IF IT IS \"\n-\t\t       \"MISSING, it cannot be the actual argument of an \"\n-\t\t       \"ELEMENTAL procedure unless there is a non-optional \"\n-\t\t       \"argument with the same rank (12.4.1.5)\",\n-\t\t       arg->expr->symtree->n.sym->name, &arg->expr->where);\n+\t  bool t = false;\n+\t  gfc_actual_arglist *a;\n+\n+\t  /* Scan the argument list for a non-optional argument with the\n+\t     same rank as arg.  */\n+\t  for (a = arg0; a; a = a->next)\n+\t    if (a != arg\n+\t\t&& a->expr->rank == arg->expr->rank\n+\t\t&& !a->expr->symtree->n.sym->attr.optional)\n+\t      {\n+\t\tt = true;\n+\t\tbreak;\n+\t      }\n+\n+\t  if (!t)\n+\t    gfc_warning (OPT_Wpedantic,\n+\t\t\t \"%qs at %L is an array and OPTIONAL; If it is not \"\n+\t\t\t \"present, then it cannot be the actual argument of \"\n+\t\t\t \"an ELEMENTAL procedure unless there is a non-optional\"\n+\t\t\t \" argument with the same rank \"\n+\t\t\t \"(Fortran 2018, 15.5.2.12)\",\n+\t\t\t arg->expr->symtree->n.sym->name, &arg->expr->where);\n \t}\n     }\n "}, {"sha": "56a9db56be27ae1a29c662983d1ccc10e0725baa", "filename": "gcc/testsuite/gfortran.dg/elemental_optional_args_6.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/685d8dafb4a1cb29ee219ad7857614ff66a78022/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_optional_args_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/685d8dafb4a1cb29ee219ad7857614ff66a78022/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_optional_args_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_optional_args_6.f90?ref=685d8dafb4a1cb29ee219ad7857614ff66a78022", "patch": "@@ -21,8 +21,8 @@ subroutine sub1 (arg1, arg2)\n       integer, optional :: arg1(:)\n       integer :: arg2(:)\n !      print *, fun1 (arg1, arg2)\n-      if (size (fun1 (arg1, arg2)) /= 2) STOP 1 ! { dg-warning \"is an array and OPTIONAL\" }\n-      if (any (fun1 (arg1, arg2) /= [1,2])) STOP 2 ! { dg-warning \"is an array and OPTIONAL\" }\n+      if (size (fun1 (arg1, arg2)) /= 2) STOP 1\n+      if (any (fun1 (arg1, arg2) /= [1,2])) STOP 2\n    end subroutine\n \n    elemental function fun1 (arg1, arg2)"}, {"sha": "86e1019d7af9aeafc4c092d3ae4405067ea56c55", "filename": "gcc/testsuite/gfortran.dg/pr95446.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/685d8dafb4a1cb29ee219ad7857614ff66a78022/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr95446.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/685d8dafb4a1cb29ee219ad7857614ff66a78022/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr95446.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr95446.f90?ref=685d8dafb4a1cb29ee219ad7857614ff66a78022", "patch": "@@ -0,0 +1,38 @@\n+! { dg-do compile }\n+! { dg-options \"-pedantic-errors\" }\n+!\n+! Contributed by Martin Diehl  <m.diehl@mpie.de>\n+\n+program elemental_optional\n+  implicit none\n+  integer :: m(5), r(5)\n+\n+  m = 1\n+\n+  r = outer()\n+  r = outer(m)\n+  \n+  contains\n+\n+  function outer(o) result(l)\n+    integer, intent(in), optional :: o(:)\n+    integer :: u(5), l(5)\n+\n+    l = inner(o,u)\n+\n+  end function outer\n+\n+  elemental function inner(a,b) result(x)\n+    integer, intent(in), optional :: a\n+    integer, intent(in) :: b\n+    integer :: x\n+\n+    if(present(a)) then\n+      x = a*b\n+    else\n+      x = b\n+    endif\n+  end function inner\n+  \n+end program elemental_optional\n+"}]}