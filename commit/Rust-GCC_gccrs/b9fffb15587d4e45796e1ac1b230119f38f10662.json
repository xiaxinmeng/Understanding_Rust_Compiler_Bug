{"sha": "b9fffb15587d4e45796e1ac1b230119f38f10662", "node_id": "C_kwDOANBUbNoAKGI5ZmZmYjE1NTg3ZDRlNDU3OTZlMWFjMWIyMzAxMTlmMzhmMTA2NjI", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-27T11:39:41Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-27T11:40:18Z"}, "message": "Remove unused parent NodeId mappings", "tree": {"sha": "dad540def87947c0f3b18e4a3f30aaeba7beeebd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dad540def87947c0f3b18e4a3f30aaeba7beeebd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9fffb15587d4e45796e1ac1b230119f38f10662", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9fffb15587d4e45796e1ac1b230119f38f10662", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9fffb15587d4e45796e1ac1b230119f38f10662", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9fffb15587d4e45796e1ac1b230119f38f10662/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "198d0dfbfadbb1f4593d61a15f707b90a91253c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/198d0dfbfadbb1f4593d61a15f707b90a91253c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/198d0dfbfadbb1f4593d61a15f707b90a91253c8"}], "stats": {"total": 580, "additions": 281, "deletions": 299}, "files": [{"sha": "cfe23728b8dcd506229b3d8b5dca63d5372616e7", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=b9fffb15587d4e45796e1ac1b230119f38f10662", "patch": "@@ -97,6 +97,7 @@ GRS_OBJS = \\\n     rust/rust-ast-resolve-type.o \\\n     rust/rust-ast-resolve-path.o \\\n     rust/rust-ast-resolve-stmt.o \\\n+    rust/rust-ast-resolve-struct-expr-field.o \\\n     rust/rust-hir-type-check.o \\\n     rust/rust-privacy-check.o \\\n     rust/rust-privacy-ctx.o \\"}, {"sha": "2a78918fbdbc402aa1a13ec4f557cbcf393d65b7", "filename": "gcc/rust/resolve/rust-ast-resolve-base.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc?ref=b9fffb15587d4e45796e1ac1b230119f38f10662", "patch": "@@ -30,7 +30,7 @@ ResolverBase::resolve_visibility (const AST::Visibility &vis)\n   if (vis.has_path ())\n     {\n       auto path = vis.get_path ();\n-      ResolvePath::go (&path, parent);\n+      ResolvePath::go (&path);\n \n       // Do we need to lookup something here?\n       // Is it just about resolving the names correctly so we can look them up"}, {"sha": "32f30bcea62508342d7e3517d48b6517636f8fa3", "filename": "gcc/rust/resolve/rust-ast-resolve-base.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h?ref=b9fffb15587d4e45796e1ac1b230119f38f10662", "patch": "@@ -200,9 +200,9 @@ class ResolverBase : public AST::ASTVisitor\n   void visit (AST::BareFunctionType &);\n \n protected:\n-  ResolverBase (NodeId parent)\n+  ResolverBase ()\n     : resolver (Resolver::get ()), mappings (Analysis::Mappings::get ()),\n-      resolved_node (UNKNOWN_NODEID), parent (parent)\n+      resolved_node (UNKNOWN_NODEID)\n   {}\n \n   /**\n@@ -213,7 +213,6 @@ class ResolverBase : public AST::ASTVisitor\n   Resolver *resolver;\n   Analysis::Mappings *mappings;\n   NodeId resolved_node;\n-  NodeId parent;\n };\n \n } // namespace Resolver"}, {"sha": "e9127e629df58f5a452b4eab64225fe0998d276f", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.cc", "status": "modified", "additions": 80, "deletions": 71, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.cc?ref=b9fffb15587d4e45796e1ac1b230119f38f10662", "patch": "@@ -28,17 +28,17 @@ namespace Rust {\n namespace Resolver {\n \n void\n-ResolveExpr::go (AST::Expr *expr, NodeId parent, const CanonicalPath &prefix,\n+ResolveExpr::go (AST::Expr *expr, const CanonicalPath &prefix,\n \t\t const CanonicalPath &canonical_prefix)\n {\n-  ResolveExpr resolver (parent, prefix, canonical_prefix);\n+  ResolveExpr resolver (prefix, canonical_prefix);\n   expr->accept_vis (resolver);\n }\n \n void\n ResolveExpr::visit (AST::TupleIndexExpr &expr)\n {\n-  resolve_expr (expr.get_tuple_expr ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_tuple_expr ().get (), prefix, canonical_prefix);\n }\n \n void\n@@ -48,41 +48,41 @@ ResolveExpr::visit (AST::TupleExpr &expr)\n     return;\n \n   for (auto &elem : expr.get_tuple_elems ())\n-    resolve_expr (elem.get (), expr.get_node_id ());\n+    ResolveExpr::go (elem.get (), prefix, canonical_prefix);\n }\n \n void\n ResolveExpr::visit (AST::PathInExpression &expr)\n {\n-  ResolvePath::go (&expr, parent);\n+  ResolvePath::go (&expr);\n }\n \n void\n ResolveExpr::visit (AST::QualifiedPathInExpression &expr)\n {\n-  ResolvePath::go (&expr, parent);\n+  ResolvePath::go (&expr);\n }\n \n void\n ResolveExpr::visit (AST::ReturnExpr &expr)\n {\n   if (expr.has_returned_expr ())\n-    resolve_expr (expr.get_returned_expr ().get (), expr.get_node_id ());\n+    ResolveExpr::go (expr.get_returned_expr ().get (), prefix,\n+\t\t     canonical_prefix);\n }\n \n void\n ResolveExpr::visit (AST::CallExpr &expr)\n {\n-  resolve_expr (expr.get_function_expr ().get (), expr.get_node_id ());\n-  auto const &in_params = expr.get_params ();\n-  for (auto &param : in_params)\n-    resolve_expr (param.get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_function_expr ().get (), prefix, canonical_prefix);\n+  for (auto &param : expr.get_params ())\n+    ResolveExpr::go (param.get (), prefix, canonical_prefix);\n }\n \n void\n ResolveExpr::visit (AST::MethodCallExpr &expr)\n {\n-  resolve_expr (expr.get_receiver_expr ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_receiver_expr ().get (), prefix, canonical_prefix);\n \n   if (expr.get_method_name ().has_generic_args ())\n     {\n@@ -92,14 +92,14 @@ ResolveExpr::visit (AST::MethodCallExpr &expr)\n \n   auto const &in_params = expr.get_params ();\n   for (auto &param : in_params)\n-    resolve_expr (param.get (), expr.get_node_id ());\n+    ResolveExpr::go (param.get (), prefix, canonical_prefix);\n }\n \n void\n ResolveExpr::visit (AST::AssignmentExpr &expr)\n {\n-  resolve_expr (expr.get_left_expr ().get (), expr.get_node_id ());\n-  resolve_expr (expr.get_right_expr ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_left_expr ().get (), prefix, canonical_prefix);\n+  ResolveExpr::go (expr.get_right_expr ().get (), prefix, canonical_prefix);\n \n   // need to verify the assignee\n   VerifyAsignee::go (expr.get_left_expr ().get (), expr.get_node_id ());\n@@ -130,15 +130,15 @@ ResolveExpr::visit (AST::IdentifierExpr &expr)\n void\n ResolveExpr::visit (AST::ArithmeticOrLogicalExpr &expr)\n {\n-  resolve_expr (expr.get_left_expr ().get (), expr.get_node_id ());\n-  resolve_expr (expr.get_right_expr ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_left_expr ().get (), prefix, canonical_prefix);\n+  ResolveExpr::go (expr.get_right_expr ().get (), prefix, canonical_prefix);\n }\n \n void\n ResolveExpr::visit (AST::CompoundAssignmentExpr &expr)\n {\n-  resolve_expr (expr.get_left_expr ().get (), expr.get_node_id ());\n-  resolve_expr (expr.get_right_expr ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_left_expr ().get (), prefix, canonical_prefix);\n+  ResolveExpr::go (expr.get_right_expr ().get (), prefix, canonical_prefix);\n \n   // need to verify the assignee\n   VerifyAsignee::go (expr.get_left_expr ().get (), expr.get_node_id ());\n@@ -147,57 +147,57 @@ ResolveExpr::visit (AST::CompoundAssignmentExpr &expr)\n void\n ResolveExpr::visit (AST::ComparisonExpr &expr)\n {\n-  resolve_expr (expr.get_left_expr ().get (), expr.get_node_id ());\n-  resolve_expr (expr.get_right_expr ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_left_expr ().get (), prefix, canonical_prefix);\n+  ResolveExpr::go (expr.get_right_expr ().get (), prefix, canonical_prefix);\n }\n \n void\n ResolveExpr::visit (AST::LazyBooleanExpr &expr)\n {\n-  resolve_expr (expr.get_left_expr ().get (), expr.get_node_id ());\n-  resolve_expr (expr.get_right_expr ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_left_expr ().get (), prefix, canonical_prefix);\n+  ResolveExpr::go (expr.get_right_expr ().get (), prefix, canonical_prefix);\n }\n \n void\n ResolveExpr::visit (AST::NegationExpr &expr)\n {\n-  resolve_expr (expr.get_negated_expr ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_negated_expr ().get (), prefix, canonical_prefix);\n }\n \n void\n ResolveExpr::visit (AST::TypeCastExpr &expr)\n {\n   ResolveType::go (expr.get_type_to_cast_to ().get (), expr.get_node_id ());\n-  resolve_expr (expr.get_casted_expr ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_casted_expr ().get (), prefix, canonical_prefix);\n }\n \n void\n ResolveExpr::visit (AST::IfExpr &expr)\n {\n-  resolve_expr (expr.get_condition_expr ().get (), expr.get_node_id ());\n-  resolve_expr (expr.get_if_block ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_condition_expr ().get (), prefix, canonical_prefix);\n+  ResolveExpr::go (expr.get_if_block ().get (), prefix, canonical_prefix);\n }\n \n void\n ResolveExpr::visit (AST::IfExprConseqElse &expr)\n {\n-  resolve_expr (expr.get_condition_expr ().get (), expr.get_node_id ());\n-  resolve_expr (expr.get_if_block ().get (), expr.get_node_id ());\n-  resolve_expr (expr.get_else_block ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_condition_expr ().get (), prefix, canonical_prefix);\n+  ResolveExpr::go (expr.get_if_block ().get (), prefix, canonical_prefix);\n+  ResolveExpr::go (expr.get_else_block ().get (), prefix, canonical_prefix);\n }\n \n void\n ResolveExpr::visit (AST::IfExprConseqIf &expr)\n {\n-  resolve_expr (expr.get_condition_expr ().get (), expr.get_node_id ());\n-  resolve_expr (expr.get_if_block ().get (), expr.get_node_id ());\n-  resolve_expr (expr.get_conseq_if_expr ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_condition_expr ().get (), prefix, canonical_prefix);\n+  ResolveExpr::go (expr.get_if_block ().get (), prefix, canonical_prefix);\n+  ResolveExpr::go (expr.get_conseq_if_expr ().get (), prefix, canonical_prefix);\n }\n \n void\n ResolveExpr::visit (AST::IfLetExpr &expr)\n {\n-  resolve_expr (expr.get_value_expr ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_value_expr ().get (), prefix, canonical_prefix);\n \n   NodeId scope_node_id = expr.get_node_id ();\n   resolver->get_name_scope ().push (scope_node_id);\n@@ -209,10 +209,10 @@ ResolveExpr::visit (AST::IfLetExpr &expr)\n \n   for (auto &pattern : expr.get_patterns ())\n     {\n-      PatternDeclaration::go (pattern.get (), expr.get_node_id ());\n+      PatternDeclaration::go (pattern.get ());\n     }\n \n-  resolve_expr (expr.get_if_block ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_if_block ().get (), prefix, canonical_prefix);\n \n   resolver->get_name_scope ().pop ();\n   resolver->get_type_scope ().pop ();\n@@ -233,19 +233,19 @@ ResolveExpr::visit (AST::BlockExpr &expr)\n   for (auto &s : expr.get_statements ())\n     {\n       if (s->is_item ())\n-\tResolveStmt::go (s.get (), s->get_node_id (), prefix, canonical_prefix,\n+\tResolveStmt::go (s.get (), prefix, canonical_prefix,\n \t\t\t CanonicalPath::create_empty ());\n     }\n \n   for (auto &s : expr.get_statements ())\n     {\n       if (!s->is_item ())\n-\tResolveStmt::go (s.get (), s->get_node_id (), prefix, canonical_prefix,\n+\tResolveStmt::go (s.get (), prefix, canonical_prefix,\n \t\t\t CanonicalPath::create_empty ());\n     }\n \n   if (expr.has_tail_expr ())\n-    resolve_expr (expr.get_tail_expr ().get (), expr.get_node_id ());\n+    ResolveExpr::go (expr.get_tail_expr ().get (), prefix, canonical_prefix);\n \n   resolver->get_name_scope ().pop ();\n   resolver->get_type_scope ().pop ();\n@@ -262,7 +262,7 @@ void\n ResolveExpr::visit (AST::ArrayElemsValues &elems)\n {\n   for (auto &elem : elems.get_values ())\n-    resolve_expr (elem.get (), elems.get_node_id ());\n+    ResolveExpr::go (elem.get (), prefix, canonical_prefix);\n }\n \n void\n@@ -274,55 +274,55 @@ ResolveExpr::visit (AST::ArrayExpr &expr)\n void\n ResolveExpr::visit (AST::ArrayIndexExpr &expr)\n {\n-  resolve_expr (expr.get_array_expr ().get (), expr.get_node_id ());\n-  resolve_expr (expr.get_index_expr ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_array_expr ().get (), prefix, canonical_prefix);\n+  ResolveExpr::go (expr.get_index_expr ().get (), prefix, canonical_prefix);\n }\n \n void\n-ResolveExpr::visit (AST::ArrayElemsCopied &elems)\n+ResolveExpr::visit (AST::ArrayElemsCopied &expr)\n {\n-  resolve_expr (elems.get_num_copies ().get (), elems.get_node_id ());\n-  resolve_expr (elems.get_elem_to_copy ().get (), elems.get_node_id ());\n+  ResolveExpr::go (expr.get_num_copies ().get (), prefix, canonical_prefix);\n+  ResolveExpr::go (expr.get_elem_to_copy ().get (), prefix, canonical_prefix);\n }\n \n // this this an empty struct constructor like 'S {}'\n void\n ResolveExpr::visit (AST::StructExprStruct &struct_expr)\n {\n-  resolve_expr (&struct_expr.get_struct_name (), struct_expr.get_node_id ());\n+  ResolveExpr::go (&struct_expr.get_struct_name (), prefix, canonical_prefix);\n }\n \n // this this a struct constructor with fields\n void\n ResolveExpr::visit (AST::StructExprStructFields &struct_expr)\n {\n-  resolve_expr (&struct_expr.get_struct_name (), struct_expr.get_node_id ());\n+  ResolveExpr::go (&struct_expr.get_struct_name (), prefix, canonical_prefix);\n \n   if (struct_expr.has_struct_base ())\n     {\n       AST::StructBase &base = struct_expr.get_struct_base ();\n-      resolve_expr (base.get_base_struct ().get (), struct_expr.get_node_id ());\n+      ResolveExpr::go (base.get_base_struct ().get (), prefix,\n+\t\t       canonical_prefix);\n     }\n \n   auto const &struct_fields = struct_expr.get_fields ();\n   for (auto &struct_field : struct_fields)\n     {\n-      ResolveStructExprField::go (struct_field.get (),\n-\t\t\t\t  struct_expr.get_node_id (), prefix,\n+      ResolveStructExprField::go (struct_field.get (), prefix,\n \t\t\t\t  canonical_prefix);\n     }\n }\n \n void\n ResolveExpr::visit (AST::GroupedExpr &expr)\n {\n-  resolve_expr (expr.get_expr_in_parens ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_expr_in_parens ().get (), prefix, canonical_prefix);\n }\n \n void\n ResolveExpr::visit (AST::FieldAccessExpr &expr)\n {\n-  resolve_expr (expr.get_receiver_expr ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_receiver_expr ().get (), prefix, canonical_prefix);\n }\n \n void\n@@ -349,7 +349,7 @@ ResolveExpr::visit (AST::LoopExpr &expr)\n \t  rust_error_at (locus, \"was defined here\");\n \t});\n     }\n-  resolve_expr (expr.get_loop_block ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_loop_block ().get (), prefix, canonical_prefix);\n }\n \n void\n@@ -379,7 +379,7 @@ ResolveExpr::visit (AST::BreakExpr &expr)\n     }\n \n   if (expr.has_break_expr ())\n-    resolve_expr (expr.get_break_expr ().get (), expr.get_node_id ());\n+    ResolveExpr::go (expr.get_break_expr ().get (), prefix, canonical_prefix);\n }\n \n void\n@@ -406,8 +406,9 @@ ResolveExpr::visit (AST::WhileLoopExpr &expr)\n \t  rust_error_at (locus, \"was defined here\");\n \t});\n     }\n-  resolve_expr (expr.get_predicate_expr ().get (), expr.get_node_id ());\n-  resolve_expr (expr.get_loop_block ().get (), expr.get_node_id ());\n+\n+  ResolveExpr::go (expr.get_predicate_expr ().get (), prefix, canonical_prefix);\n+  ResolveExpr::go (expr.get_loop_block ().get (), prefix, canonical_prefix);\n }\n \n void\n@@ -445,10 +446,11 @@ ResolveExpr::visit (AST::ForLoopExpr &expr)\n   resolver->push_new_label_rib (resolver->get_type_scope ().peek ());\n \n   // resolve the expression\n-  PatternDeclaration::go (expr.get_pattern ().get (), expr.get_node_id ());\n-  resolve_expr (expr.get_iterator_expr ().get (), expr.get_node_id ());\n-  resolve_expr (expr.get_loop_block ().get (), expr.get_node_id ());\n+  PatternDeclaration::go (expr.get_pattern ().get ());\n+  ResolveExpr::go (expr.get_iterator_expr ().get (), prefix, canonical_prefix);\n+  ResolveExpr::go (expr.get_loop_block ().get (), prefix, canonical_prefix);\n \n+  // done\n   resolver->get_name_scope ().pop ();\n   resolver->get_type_scope ().pop ();\n   resolver->get_label_scope ().pop ();\n@@ -484,19 +486,20 @@ ResolveExpr::visit (AST::ContinueExpr &expr)\n void\n ResolveExpr::visit (AST::BorrowExpr &expr)\n {\n-  resolve_expr (expr.get_borrowed_expr ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_borrowed_expr ().get (), prefix, canonical_prefix);\n }\n \n void\n ResolveExpr::visit (AST::DereferenceExpr &expr)\n {\n-  resolve_expr (expr.get_dereferenced_expr ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_dereferenced_expr ().get (), prefix,\n+\t\t   canonical_prefix);\n }\n \n void\n ResolveExpr::visit (AST::MatchExpr &expr)\n {\n-  resolve_expr (expr.get_scrutinee_expr ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_scrutinee_expr ().get (), prefix, canonical_prefix);\n   for (auto &match_case : expr.get_match_cases ())\n     {\n       // each arm is in its own scope\n@@ -511,16 +514,17 @@ ResolveExpr::visit (AST::MatchExpr &expr)\n       // resolve\n       AST::MatchArm &arm = match_case.get_arm ();\n       if (arm.has_match_arm_guard ())\n-\tresolve_expr (arm.get_guard_expr ().get (), expr.get_node_id ());\n+\tResolveExpr::go (arm.get_guard_expr ().get (), prefix,\n+\t\t\t canonical_prefix);\n \n       // insert any possible new patterns\n       for (auto &pattern : arm.get_patterns ())\n \t{\n-\t  PatternDeclaration::go (pattern.get (), expr.get_node_id ());\n+\t  PatternDeclaration::go (pattern.get ());\n \t}\n \n       // resolve the body\n-      resolve_expr (match_case.get_expr ().get (), expr.get_node_id ());\n+      ResolveExpr::go (match_case.get_expr ().get (), prefix, canonical_prefix);\n \n       // done\n       resolver->get_name_scope ().pop ();\n@@ -532,20 +536,20 @@ ResolveExpr::visit (AST::MatchExpr &expr)\n void\n ResolveExpr::visit (AST::RangeFromToExpr &expr)\n {\n-  resolve_expr (expr.get_from_expr ().get (), expr.get_node_id ());\n-  resolve_expr (expr.get_to_expr ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_from_expr ().get (), prefix, canonical_prefix);\n+  ResolveExpr::go (expr.get_to_expr ().get (), prefix, canonical_prefix);\n }\n \n void\n ResolveExpr::visit (AST::RangeFromExpr &expr)\n {\n-  resolve_expr (expr.get_from_expr ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_from_expr ().get (), prefix, canonical_prefix);\n }\n \n void\n ResolveExpr::visit (AST::RangeToExpr &expr)\n {\n-  resolve_expr (expr.get_to_expr ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_to_expr ().get (), prefix, canonical_prefix);\n }\n \n void\n@@ -557,9 +561,14 @@ ResolveExpr::visit (AST::RangeFullExpr &expr)\n void\n ResolveExpr::visit (AST::RangeFromToInclExpr &expr)\n {\n-  resolve_expr (expr.get_from_expr ().get (), expr.get_node_id ());\n-  resolve_expr (expr.get_to_expr ().get (), expr.get_node_id ());\n+  ResolveExpr::go (expr.get_from_expr ().get (), prefix, canonical_prefix);\n+  ResolveExpr::go (expr.get_to_expr ().get (), prefix, canonical_prefix);\n }\n \n+ResolveExpr::ResolveExpr (const CanonicalPath &prefix,\n+\t\t\t  const CanonicalPath &canonical_prefix)\n+  : ResolverBase (), prefix (prefix), canonical_prefix (canonical_prefix)\n+{}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "11a846ac8cd87fda6031405532249c9c1dd3686e", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=b9fffb15587d4e45796e1ac1b230119f38f10662", "patch": "@@ -30,7 +30,7 @@ class ResolveExpr : public ResolverBase\n   using Rust::Resolver::ResolverBase::visit;\n \n public:\n-  static void go (AST::Expr *expr, NodeId parent, const CanonicalPath &prefix,\n+  static void go (AST::Expr *expr, const CanonicalPath &prefix,\n \t\t  const CanonicalPath &canonical_prefix);\n \n   void visit (AST::TupleIndexExpr &expr) override;\n@@ -119,18 +119,9 @@ class ResolveExpr : public ResolverBase\n \n   void visit (AST::RangeFromToInclExpr &expr) override;\n \n-protected:\n-  void resolve_expr (AST::Expr *e, NodeId parent)\n-  {\n-    ResolveExpr::go (e, parent, prefix, canonical_prefix);\n-  }\n-\n private:\n-  ResolveExpr (NodeId parent, const CanonicalPath &prefix,\n-\t       const CanonicalPath &canonical_prefix)\n-    : ResolverBase (parent), prefix (prefix),\n-      canonical_prefix (canonical_prefix)\n-  {}\n+  ResolveExpr (const CanonicalPath &prefix,\n+\t       const CanonicalPath &canonical_prefix);\n \n   const CanonicalPath &prefix;\n   const CanonicalPath &canonical_prefix;"}, {"sha": "c0cb3a7a3117f7fa908e4f015e87d154efded9f3", "filename": "gcc/rust/resolve/rust-ast-resolve-implitem.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h?ref=b9fffb15587d4e45796e1ac1b230119f38f10662", "patch": "@@ -108,7 +108,7 @@ class ResolveToplevelImplItem : public ResolverBase\n \n private:\n   ResolveToplevelImplItem (const CanonicalPath &prefix)\n-    : ResolverBase (UNKNOWN_NODEID), prefix (prefix)\n+    : ResolverBase (), prefix (prefix)\n   {\n     rust_assert (!prefix.is_empty ());\n   }\n@@ -203,8 +203,7 @@ class ResolveTopLevelTraitItems : public ResolverBase\n private:\n   ResolveTopLevelTraitItems (const CanonicalPath &prefix,\n \t\t\t     const CanonicalPath &canonical_prefix)\n-    : ResolverBase (UNKNOWN_NODEID), prefix (prefix),\n-      canonical_prefix (canonical_prefix)\n+    : ResolverBase (), prefix (prefix), canonical_prefix (canonical_prefix)\n   {}\n \n   const CanonicalPath &prefix;\n@@ -260,7 +259,7 @@ class ResolveToplevelExternItem : public ResolverBase\n \n private:\n   ResolveToplevelExternItem (const CanonicalPath &prefix)\n-    : ResolverBase (UNKNOWN_NODEID), prefix (prefix)\n+    : ResolverBase (), prefix (prefix)\n   {}\n \n   const CanonicalPath &prefix;"}, {"sha": "6c81274b1bd3e71816ff3a909a430fc0a9746f03", "filename": "gcc/rust/resolve/rust-ast-resolve-item.cc", "status": "modified", "additions": 46, "deletions": 40, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc?ref=b9fffb15587d4e45796e1ac1b230119f38f10662", "patch": "@@ -22,6 +22,12 @@\n \n namespace Rust {\n namespace Resolver {\n+\n+ResolveTraitItems::ResolveTraitItems (const CanonicalPath &prefix,\n+\t\t\t\t      const CanonicalPath &canonical_prefix)\n+  : ResolverBase (), prefix (prefix), canonical_prefix (canonical_prefix)\n+{}\n+\n void\n ResolveTraitItems::go (AST::TraitItem *item, const CanonicalPath &prefix,\n \t\t       const CanonicalPath &canonical_prefix)\n@@ -67,7 +73,7 @@ ResolveTraitItems::visit (AST::TraitItemFunc &func)\n   if (function.has_generics ())\n     {\n       for (auto &generic : function.get_generic_params ())\n-\tResolveGenericParam::go (generic.get (), func.get_node_id ());\n+\tResolveGenericParam::go (generic.get ());\n     }\n \n   if (function.has_return_type ())\n@@ -78,8 +84,7 @@ ResolveTraitItems::visit (AST::TraitItemFunc &func)\n   for (auto &param : function.get_function_params ())\n     {\n       ResolveType::go (param.get_type ().get (), param.get_node_id ());\n-      PatternDeclaration::go (param.get_pattern ().get (),\n-\t\t\t      param.get_node_id ());\n+      PatternDeclaration::go (param.get_pattern ().get ());\n \n       // the mutability checker needs to verify for immutable decls the number\n       // of assignments are <1. This marks an implicit assignment\n@@ -92,8 +97,7 @@ ResolveTraitItems::visit (AST::TraitItemFunc &func)\n \n   // trait items have an optional body\n   if (func.has_definition ())\n-    ResolveExpr::go (func.get_definition ().get (), func.get_node_id (), path,\n-\t\t     cpath);\n+    ResolveExpr::go (func.get_definition ().get (), path, cpath);\n \n   resolver->get_name_scope ().pop ();\n   resolver->get_type_scope ().pop ();\n@@ -121,7 +125,7 @@ ResolveTraitItems::visit (AST::TraitItemMethod &func)\n   if (function.has_generics ())\n     {\n       for (auto &generic : function.get_generic_params ())\n-\tResolveGenericParam::go (generic.get (), func.get_node_id ());\n+\tResolveGenericParam::go (generic.get ());\n     }\n \n   if (function.has_return_type ())\n@@ -142,7 +146,7 @@ ResolveTraitItems::visit (AST::TraitItemMethod &func)\n   AST::TypePath self_type_path (std::move (segments), self_param.get_locus ());\n \n   ResolveType::go (&self_type_path, self_param.get_node_id ());\n-  PatternDeclaration::go (&self_pattern, self_param.get_node_id ());\n+  PatternDeclaration::go (&self_pattern);\n \n   resolver->mark_assignment_to_decl (self_pattern.get_node_id (),\n \t\t\t\t     self_pattern.get_node_id ());\n@@ -152,8 +156,7 @@ ResolveTraitItems::visit (AST::TraitItemMethod &func)\n   for (auto &param : function.get_function_params ())\n     {\n       ResolveType::go (param.get_type ().get (), param.get_node_id ());\n-      PatternDeclaration::go (param.get_pattern ().get (),\n-\t\t\t      param.get_node_id ());\n+      PatternDeclaration::go (param.get_pattern ().get ());\n \n       // the mutability checker needs to verify for immutable decls the number\n       // of assignments are <1. This marks an implicit assignment\n@@ -166,8 +169,7 @@ ResolveTraitItems::visit (AST::TraitItemMethod &func)\n \n   // trait items have an optional body\n   if (func.has_definition ())\n-    ResolveExpr::go (func.get_definition ().get (), func.get_node_id (), path,\n-\t\t     cpath);\n+    ResolveExpr::go (func.get_definition ().get (), path, cpath);\n \n   resolver->get_name_scope ().pop ();\n   resolver->get_type_scope ().pop ();\n@@ -186,8 +188,7 @@ ResolveTraitItems::visit (AST::TraitItemConst &constant)\n   ResolveType::go (constant.get_type ().get (), constant.get_node_id ());\n \n   if (constant.has_expr ())\n-    ResolveExpr::go (constant.get_expr ().get (), constant.get_node_id (), path,\n-\t\t     cpath);\n+    ResolveExpr::go (constant.get_expr ().get (), path, cpath);\n \n   // the mutability checker needs to verify for immutable decls the number\n   // of assignments are <1. This marks an implicit assignment\n@@ -196,6 +197,11 @@ ResolveTraitItems::visit (AST::TraitItemConst &constant)\n \t\t\t\t     constant.get_node_id ());\n }\n \n+ResolveItem::ResolveItem (const CanonicalPath &prefix,\n+\t\t\t  const CanonicalPath &canonical_prefix)\n+  : ResolverBase (), prefix (prefix), canonical_prefix (canonical_prefix)\n+{}\n+\n void\n ResolveItem::go (AST::Item *item, const CanonicalPath &prefix,\n \t\t const CanonicalPath &canonical_prefix)\n@@ -220,7 +226,7 @@ ResolveItem::visit (AST::TypeAlias &alias)\n   if (alias.has_generics ())\n     {\n       for (auto &generic : alias.get_generic_params ())\n-\tResolveGenericParam::go (generic.get (), alias.get_node_id ());\n+\tResolveGenericParam::go (generic.get ());\n     }\n \n   if (alias.has_where_clause ())\n@@ -285,7 +291,7 @@ ResolveItem::visit (AST::TupleStruct &struct_decl)\n     {\n       for (auto &generic : struct_decl.get_generic_params ())\n \t{\n-\t  ResolveGenericParam::go (generic.get (), struct_decl.get_node_id ());\n+\t  ResolveGenericParam::go (generic.get ());\n \t}\n     }\n \n@@ -325,7 +331,7 @@ ResolveItem::visit (AST::Enum &enum_decl)\n     {\n       for (auto &generic : enum_decl.get_generic_params ())\n \t{\n-\t  ResolveGenericParam::go (generic.get (), enum_decl.get_node_id ());\n+\t  ResolveGenericParam::go (generic.get ());\n \t}\n     }\n \n@@ -423,7 +429,7 @@ ResolveItem::visit (AST::StructStruct &struct_decl)\n     {\n       for (auto &generic : struct_decl.get_generic_params ())\n \t{\n-\t  ResolveGenericParam::go (generic.get (), struct_decl.get_node_id ());\n+\t  ResolveGenericParam::go (generic.get ());\n \t}\n     }\n \n@@ -463,7 +469,7 @@ ResolveItem::visit (AST::Union &union_decl)\n     {\n       for (auto &generic : union_decl.get_generic_params ())\n \t{\n-\t  ResolveGenericParam::go (generic.get (), union_decl.get_node_id ());\n+\t  ResolveGenericParam::go (generic.get ());\n \t}\n     }\n \n@@ -493,7 +499,7 @@ ResolveItem::visit (AST::StaticItem &var)\n \t\t\t\t   var.get_node_id (), cpath);\n \n   ResolveType::go (var.get_type ().get (), var.get_node_id ());\n-  ResolveExpr::go (var.get_expr ().get (), var.get_node_id (), path, cpath);\n+  ResolveExpr::go (var.get_expr ().get (), path, cpath);\n \n   // the mutability checker needs to verify for immutable decls the number\n   // of assignments are <1. This marks an implicit assignment\n@@ -512,8 +518,7 @@ ResolveItem::visit (AST::ConstantItem &constant)\n   resolve_visibility (constant.get_visibility ());\n \n   ResolveType::go (constant.get_type ().get (), constant.get_node_id ());\n-  ResolveExpr::go (constant.get_expr ().get (), constant.get_node_id (), path,\n-\t\t   cpath);\n+  ResolveExpr::go (constant.get_expr ().get (), path, cpath);\n \n   // the mutability checker needs to verify for immutable decls the number\n   // of assignments are <1. This marks an implicit assignment\n@@ -545,7 +550,7 @@ ResolveItem::visit (AST::Function &function)\n   if (function.has_generics ())\n     {\n       for (auto &generic : function.get_generic_params ())\n-\tResolveGenericParam::go (generic.get (), function.get_node_id ());\n+\tResolveGenericParam::go (generic.get ());\n     }\n \n   // resolve any where clause items\n@@ -561,8 +566,7 @@ ResolveItem::visit (AST::Function &function)\n   for (auto &param : function.get_function_params ())\n     {\n       ResolveType::go (param.get_type ().get (), param.get_node_id ());\n-      PatternDeclaration::go (param.get_pattern ().get (),\n-\t\t\t      param.get_node_id ());\n+      PatternDeclaration::go (param.get_pattern ().get ());\n \n       // the mutability checker needs to verify for immutable decls the number\n       // of assignments are <1. This marks an implicit assignment\n@@ -571,8 +575,7 @@ ResolveItem::visit (AST::Function &function)\n     }\n \n   // resolve the function body\n-  ResolveExpr::go (function.get_definition ().get (), function.get_node_id (),\n-\t\t   path, cpath);\n+  ResolveExpr::go (function.get_definition ().get (), path, cpath);\n \n   resolver->get_name_scope ().pop ();\n   resolver->get_type_scope ().pop ();\n@@ -594,7 +597,7 @@ ResolveItem::visit (AST::InherentImpl &impl_block)\n     {\n       for (auto &generic : impl_block.get_generic_params ())\n \t{\n-\t  ResolveGenericParam::go (generic.get (), impl_block.get_node_id ());\n+\t  ResolveGenericParam::go (generic.get ());\n \t}\n     }\n \n@@ -608,7 +611,7 @@ ResolveItem::visit (AST::InherentImpl &impl_block)\n   CanonicalPath self_cpath = CanonicalPath::create_empty ();\n   bool canonicalize_type_with_generics = false;\n   NodeId resolved_node\n-    = ResolveType::go (impl_block.get_type ().get (), impl_block.get_node_id (),\n+    = ResolveType::go (impl_block.get_type ().get (),\n \t\t       canonicalize_type_with_generics, &self_cpath);\n   if (resolved_node == UNKNOWN_NODEID)\n     {\n@@ -686,7 +689,7 @@ ResolveItem::visit (AST::Method &method)\n   if (method.has_generics ())\n     {\n       for (auto &generic : method.get_generic_params ())\n-\tResolveGenericParam::go (generic.get (), method.get_node_id ());\n+\tResolveGenericParam::go (generic.get ());\n     }\n \n   // resolve any where clause items\n@@ -711,7 +714,7 @@ ResolveItem::visit (AST::Method &method)\n   AST::TypePath self_type_path (std::move (segments), self_param.get_locus ());\n \n   ResolveType::go (&self_type_path, self_param.get_node_id ());\n-  PatternDeclaration::go (&self_pattern, self_param.get_node_id ());\n+  PatternDeclaration::go (&self_pattern);\n \n   resolver->mark_assignment_to_decl (self_pattern.get_node_id (),\n \t\t\t\t     self_pattern.get_node_id ());\n@@ -721,8 +724,7 @@ ResolveItem::visit (AST::Method &method)\n   for (auto &param : method.get_function_params ())\n     {\n       ResolveType::go (param.get_type ().get (), param.get_node_id ());\n-      PatternDeclaration::go (param.get_pattern ().get (),\n-\t\t\t      param.get_node_id ());\n+      PatternDeclaration::go (param.get_pattern ().get ());\n \n       // the mutability checker needs to verify for immutable decls the number\n       // of assignments are <1. This marks an implicit assignment\n@@ -735,8 +737,7 @@ ResolveItem::visit (AST::Method &method)\n     ResolveWhereClause::Resolve (method.get_where_clause ());\n \n   // resolve the function body\n-  ResolveExpr::go (method.get_definition ().get (), method.get_node_id (), path,\n-\t\t   cpath);\n+  ResolveExpr::go (method.get_definition ().get (), path, cpath);\n \n   resolver->get_name_scope ().pop ();\n   resolver->get_type_scope ().pop ();\n@@ -759,7 +760,7 @@ ResolveItem::visit (AST::TraitImpl &impl_block)\n     {\n       for (auto &generic : impl_block.get_generic_params ())\n \t{\n-\t  ResolveGenericParam::go (generic.get (), impl_block.get_node_id ());\n+\t  ResolveGenericParam::go (generic.get ());\n \t}\n     }\n \n@@ -770,7 +771,7 @@ ResolveItem::visit (AST::TraitImpl &impl_block)\n   CanonicalPath canonical_trait_type = CanonicalPath::create_empty ();\n   bool canonicalize_type_with_generics = false;\n   NodeId trait_resolved_node\n-    = ResolveType::go (&impl_block.get_trait_path (), impl_block.get_node_id (),\n+    = ResolveType::go (&impl_block.get_trait_path (),\n \t\t       canonicalize_type_with_generics, &canonical_trait_type);\n   if (trait_resolved_node == UNKNOWN_NODEID)\n     {\n@@ -781,7 +782,7 @@ ResolveItem::visit (AST::TraitImpl &impl_block)\n \n   CanonicalPath canonical_impl_type = CanonicalPath::create_empty ();\n   NodeId type_resolved_node\n-    = ResolveType::go (impl_block.get_type ().get (), impl_block.get_node_id (),\n+    = ResolveType::go (impl_block.get_type ().get (),\n \t\t       canonicalize_type_with_generics, &canonical_impl_type);\n   if (type_resolved_node == UNKNOWN_NODEID)\n     {\n@@ -869,7 +870,7 @@ ResolveItem::visit (AST::Trait &trait)\n \n   for (auto &generic : trait.get_generic_params ())\n     {\n-      ResolveGenericParam::go (generic.get (), trait.get_node_id ());\n+      ResolveGenericParam::go (generic.get ());\n     }\n \n   // Self is an implicit TypeParam so lets mark it as such\n@@ -1037,9 +1038,14 @@ ResolveItem::visit (AST::UseDeclaration &use_item)\n   auto to_resolve = flatten_use_dec_to_paths (use_item);\n \n   for (auto &path : to_resolve)\n-    ResolvePath::go (&path, parent);\n+    ResolvePath::go (&path);\n }\n \n+ResolveImplItems::ResolveImplItems (const CanonicalPath &prefix,\n+\t\t\t\t    const CanonicalPath &canonical_prefix)\n+  : ResolveItem (prefix, canonical_prefix)\n+{}\n+\n void\n ResolveImplItems::go (AST::InherentImplItem *item, const CanonicalPath &prefix,\n \t\t      const CanonicalPath &canonical_prefix)\n@@ -1099,7 +1105,7 @@ ResolveExternItem::visit (AST::ExternalFunctionItem &function)\n   if (function.has_generics ())\n     {\n       for (auto &generic : function.get_generic_params ())\n-\tResolveGenericParam::go (generic.get (), function.get_node_id ());\n+\tResolveGenericParam::go (generic.get ());\n     }\n \n   if (function.has_return_type ())"}, {"sha": "2824d09a11e437867620236a25d7a6fe8649d4ad", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=b9fffb15587d4e45796e1ac1b230119f38f10662", "patch": "@@ -46,10 +46,7 @@ class ResolveTraitItems : public ResolverBase\n \n private:\n   ResolveTraitItems (const CanonicalPath &prefix,\n-\t\t     const CanonicalPath &canonical_prefix)\n-    : ResolverBase (UNKNOWN_NODEID), prefix (prefix),\n-      canonical_prefix (canonical_prefix)\n-  {}\n+\t\t     const CanonicalPath &canonical_prefix);\n \n   const CanonicalPath &prefix;\n   const CanonicalPath &canonical_prefix;\n@@ -93,10 +90,7 @@ class ResolveItem : public ResolverBase\n   void resolve_extern_item (AST::ExternalItem *item);\n \n   ResolveItem (const CanonicalPath &prefix,\n-\t       const CanonicalPath &canonical_prefix)\n-    : ResolverBase (UNKNOWN_NODEID), prefix (prefix),\n-      canonical_prefix (canonical_prefix)\n-  {}\n+\t       const CanonicalPath &canonical_prefix);\n \n   const CanonicalPath &prefix;\n   const CanonicalPath &canonical_prefix;\n@@ -116,9 +110,7 @@ class ResolveImplItems : public ResolveItem\n \n private:\n   ResolveImplItems (const CanonicalPath &prefix,\n-\t\t    const CanonicalPath &canonical_prefix)\n-    : ResolveItem (prefix, canonical_prefix)\n-  {}\n+\t\t    const CanonicalPath &canonical_prefix);\n };\n \n class ResolveExternItem : public ResolverBase\n@@ -132,7 +124,7 @@ class ResolveExternItem : public ResolverBase\n   void visit (AST::ExternalStaticItem &item) override;\n \n private:\n-  ResolveExternItem () : ResolverBase (UNKNOWN_NODEID) {}\n+  ResolveExternItem () : ResolverBase () {}\n };\n \n } // namespace Resolver"}, {"sha": "8135d4d263b79adfc7580a87f83eb04afe8daaef", "filename": "gcc/rust/resolve/rust-ast-resolve-path.cc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.cc?ref=b9fffb15587d4e45796e1ac1b230119f38f10662", "patch": "@@ -23,24 +23,26 @@\n namespace Rust {\n namespace Resolver {\n \n+ResolvePath::ResolvePath () : ResolverBase () {}\n+\n void\n-ResolvePath::go (AST::PathInExpression *expr, NodeId parent)\n+ResolvePath::go (AST::PathInExpression *expr)\n {\n-  ResolvePath resolver (parent);\n+  ResolvePath resolver;\n   resolver.resolve_path (expr);\n }\n \n void\n-ResolvePath::go (AST::QualifiedPathInExpression *expr, NodeId parent)\n+ResolvePath::go (AST::QualifiedPathInExpression *expr)\n {\n-  ResolvePath resolver (parent);\n+  ResolvePath resolver;\n   resolver.resolve_path (expr);\n }\n \n void\n-ResolvePath::go (AST::SimplePath *expr, NodeId parent)\n+ResolvePath::go (AST::SimplePath *expr)\n {\n-  ResolvePath resolver (parent);\n+  ResolvePath resolver;\n   resolver.resolve_path (expr);\n }\n "}, {"sha": "a9af0c5819c025b0d93f5b5b2cf822b69a48a1cb", "filename": "gcc/rust/resolve/rust-ast-resolve-path.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-path.h?ref=b9fffb15587d4e45796e1ac1b230119f38f10662", "patch": "@@ -29,12 +29,12 @@ class ResolvePath : public ResolverBase\n   using Rust::Resolver::ResolverBase::visit;\n \n public:\n-  static void go (AST::PathInExpression *expr, NodeId parent);\n-  static void go (AST::QualifiedPathInExpression *expr, NodeId parent);\n-  static void go (AST::SimplePath *expr, NodeId parent);\n+  static void go (AST::PathInExpression *expr);\n+  static void go (AST::QualifiedPathInExpression *expr);\n+  static void go (AST::SimplePath *expr);\n \n private:\n-  ResolvePath (NodeId parent) : ResolverBase (parent) {}\n+  ResolvePath ();\n \n   void resolve_path (AST::PathInExpression *expr);\n   void resolve_path (AST::QualifiedPathInExpression *expr);"}, {"sha": "47d85fb523fe710e6548bb6c282e165a10109a77", "filename": "gcc/rust/resolve/rust-ast-resolve-pattern.cc", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.cc?ref=b9fffb15587d4e45796e1ac1b230119f38f10662", "patch": "@@ -26,13 +26,13 @@ namespace Resolver {\n void\n PatternDeclaration::visit (AST::PathInExpression &pattern)\n {\n-  ResolvePath::go (&pattern, parent);\n+  ResolvePath::go (&pattern);\n }\n \n void\n PatternDeclaration::visit (AST::TupleStructPattern &pattern)\n {\n-  ResolvePath::go (&pattern.get_path (), parent);\n+  ResolvePath::go (&pattern.get_path ());\n \n   std::unique_ptr<AST::TupleStructItems> &items = pattern.get_items ();\n   switch (items->get_item_type ())\n@@ -49,8 +49,7 @@ PatternDeclaration::visit (AST::TupleStructPattern &pattern)\n \n \tfor (auto &inner_pattern : items_no_range.get_patterns ())\n \t  {\n-\t    PatternDeclaration::go (inner_pattern.get (),\n-\t\t\t\t    inner_pattern->get_pattern_node_id ());\n+\t    PatternDeclaration::go (inner_pattern.get ());\n \t  }\n       }\n       break;\n@@ -60,7 +59,7 @@ PatternDeclaration::visit (AST::TupleStructPattern &pattern)\n void\n PatternDeclaration::visit (AST::StructPattern &pattern)\n {\n-  ResolvePath::go (&pattern.get_path (), parent);\n+  ResolvePath::go (&pattern.get_path ());\n \n   auto &struct_pattern_elems = pattern.get_struct_pattern_elems ();\n   for (auto &field : struct_pattern_elems.get_struct_pattern_fields ())\n@@ -130,7 +129,7 @@ PatternDeclaration::visit (AST::TuplePattern &pattern)\n }\n \n static void\n-resolve_range_pattern_bound (AST::RangePatternBound *bound, NodeId parent)\n+resolve_range_pattern_bound (AST::RangePatternBound *bound)\n {\n   switch (bound->get_bound_type ())\n     {\n@@ -142,15 +141,15 @@ resolve_range_pattern_bound (AST::RangePatternBound *bound, NodeId parent)\n \tAST::RangePatternBoundPath &ref\n \t  = *static_cast<AST::RangePatternBoundPath *> (bound);\n \n-\tResolvePath::go (&ref.get_path (), parent);\n+\tResolvePath::go (&ref.get_path ());\n       }\n       break;\n \n       case AST::RangePatternBound::RangePatternBoundType::QUALPATH: {\n \tAST::RangePatternBoundQualPath &ref\n \t  = *static_cast<AST::RangePatternBoundQualPath *> (bound);\n \n-\tResolvePath::go (&ref.get_qualified_path (), parent);\n+\tResolvePath::go (&ref.get_qualified_path ());\n       }\n       break;\n     }\n@@ -159,8 +158,8 @@ resolve_range_pattern_bound (AST::RangePatternBound *bound, NodeId parent)\n void\n PatternDeclaration::visit (AST::RangePattern &pattern)\n {\n-  resolve_range_pattern_bound (pattern.get_upper_bound ().get (), parent);\n-  resolve_range_pattern_bound (pattern.get_lower_bound ().get (), parent);\n+  resolve_range_pattern_bound (pattern.get_upper_bound ().get ());\n+  resolve_range_pattern_bound (pattern.get_lower_bound ().get ());\n }\n \n } // namespace Resolver"}, {"sha": "038c8468a5435b15d7424e07dc06fc8de10a1718", "filename": "gcc/rust/resolve/rust-ast-resolve-pattern.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h?ref=b9fffb15587d4e45796e1ac1b230119f38f10662", "patch": "@@ -30,9 +30,9 @@ class ResolvePattern : public ResolverBase\n   using Rust::Resolver::ResolverBase::visit;\n \n public:\n-  static void go (AST::Pattern *pattern, NodeId parent)\n+  static void go (AST::Pattern *pattern)\n   {\n-    ResolvePattern resolver (parent);\n+    ResolvePattern resolver;\n     pattern->accept_vis (resolver);\n   }\n \n@@ -47,17 +47,17 @@ class ResolvePattern : public ResolverBase\n   }\n \n private:\n-  ResolvePattern (NodeId parent) : ResolverBase (parent) {}\n+  ResolvePattern () : ResolverBase () {}\n };\n \n class PatternDeclaration : public ResolverBase\n {\n   using Rust::Resolver::ResolverBase::visit;\n \n public:\n-  static void go (AST::Pattern *pattern, NodeId parent)\n+  static void go (AST::Pattern *pattern)\n   {\n-    PatternDeclaration resolver (parent);\n+    PatternDeclaration resolver;\n     pattern->accept_vis (resolver);\n   };\n \n@@ -94,7 +94,7 @@ class PatternDeclaration : public ResolverBase\n   void visit (AST::RangePattern &pattern) override;\n \n private:\n-  PatternDeclaration (NodeId parent) : ResolverBase (parent) {}\n+  PatternDeclaration () : ResolverBase () {}\n };\n \n } // namespace Resolver"}, {"sha": "9fdb090dd259f3c3d7c43c840a84058bb5793d4a", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 20, "deletions": 27, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=b9fffb15587d4e45796e1ac1b230119f38f10662", "patch": "@@ -33,27 +33,25 @@ class ResolveStmt : public ResolverBase\n   using Rust::Resolver::ResolverBase::visit;\n \n public:\n-  static void go (AST::Stmt *stmt, NodeId parent, const CanonicalPath &prefix,\n+  static void go (AST::Stmt *stmt, const CanonicalPath &prefix,\n \t\t  const CanonicalPath &canonical_prefix,\n \t\t  const CanonicalPath &enum_prefix)\n   {\n     if (stmt->is_marked_for_strip ())\n       return;\n \n-    ResolveStmt resolver (parent, prefix, canonical_prefix, enum_prefix);\n+    ResolveStmt resolver (prefix, canonical_prefix, enum_prefix);\n     stmt->accept_vis (resolver);\n-  };\n+  }\n \n   void visit (AST::ExprStmtWithBlock &stmt) override\n   {\n-    ResolveExpr::go (stmt.get_expr ().get (), stmt.get_node_id (), prefix,\n-\t\t     canonical_prefix);\n+    ResolveExpr::go (stmt.get_expr ().get (), prefix, canonical_prefix);\n   }\n \n   void visit (AST::ExprStmtWithoutBlock &stmt) override\n   {\n-    ResolveExpr::go (stmt.get_expr ().get (), stmt.get_node_id (), prefix,\n-\t\t     canonical_prefix);\n+    ResolveExpr::go (stmt.get_expr ().get (), prefix, canonical_prefix);\n   }\n \n   void visit (AST::ConstantItem &constant) override\n@@ -73,8 +71,7 @@ class ResolveStmt : public ResolverBase\n       });\n \n     ResolveType::go (constant.get_type ().get (), constant.get_node_id ());\n-    ResolveExpr::go (constant.get_expr ().get (), constant.get_node_id (),\n-\t\t     prefix, canonical_prefix);\n+    ResolveExpr::go (constant.get_expr ().get (), prefix, canonical_prefix);\n \n     // the mutability checker needs to verify for immutable decls the number\n     // of assignments are <1. This marks an implicit assignment\n@@ -87,15 +84,15 @@ class ResolveStmt : public ResolverBase\n   {\n     if (stmt.has_init_expr ())\n       {\n-\tResolveExpr::go (stmt.get_init_expr ().get (), stmt.get_node_id (),\n-\t\t\t prefix, canonical_prefix);\n+\tResolveExpr::go (stmt.get_init_expr ().get (), prefix,\n+\t\t\t canonical_prefix);\n \n \t// mark the assignment\n \tresolver->mark_assignment_to_decl (\n \t  stmt.get_pattern ()->get_pattern_node_id (), stmt.get_node_id ());\n       }\n \n-    PatternDeclaration::go (stmt.get_pattern ().get (), stmt.get_node_id ());\n+    PatternDeclaration::go (stmt.get_pattern ().get ());\n     if (stmt.has_type ())\n       ResolveType::go (stmt.get_type ().get (), stmt.get_node_id ());\n   }\n@@ -124,8 +121,7 @@ class ResolveStmt : public ResolverBase\n       {\n \tfor (auto &generic : struct_decl.get_generic_params ())\n \t  {\n-\t    ResolveGenericParam::go (generic.get (),\n-\t\t\t\t     struct_decl.get_node_id ());\n+\t    ResolveGenericParam::go (generic.get ());\n \t  }\n       }\n \n@@ -160,12 +156,12 @@ class ResolveStmt : public ResolverBase\n       {\n \tfor (auto &generic : enum_decl.get_generic_params ())\n \t  {\n-\t    ResolveGenericParam::go (generic.get (), enum_decl.get_node_id ());\n+\t    ResolveGenericParam::go (generic.get ());\n \t  }\n       }\n \n     for (auto &variant : enum_decl.get_variants ())\n-      ResolveStmt::go (variant.get (), parent, path, canonical_prefix, path);\n+      ResolveStmt::go (variant.get (), path, canonical_prefix, path);\n \n     resolver->get_type_scope ().pop ();\n   }\n@@ -286,8 +282,7 @@ class ResolveStmt : public ResolverBase\n       {\n \tfor (auto &generic : struct_decl.get_generic_params ())\n \t  {\n-\t    ResolveGenericParam::go (generic.get (),\n-\t\t\t\t     struct_decl.get_node_id ());\n+\t    ResolveGenericParam::go (generic.get ());\n \t  }\n       }\n \n@@ -327,7 +322,7 @@ class ResolveStmt : public ResolverBase\n       {\n \tfor (auto &generic : union_decl.get_generic_params ())\n \t  {\n-\t    ResolveGenericParam::go (generic.get (), union_decl.get_node_id ());\n+\t    ResolveGenericParam::go (generic.get ());\n \t  }\n       }\n \n@@ -370,7 +365,7 @@ class ResolveStmt : public ResolverBase\n     if (function.has_generics ())\n       {\n \tfor (auto &generic : function.get_generic_params ())\n-\t  ResolveGenericParam::go (generic.get (), function.get_node_id ());\n+\t  ResolveGenericParam::go (generic.get ());\n       }\n \n     if (function.has_return_type ())\n@@ -382,8 +377,7 @@ class ResolveStmt : public ResolverBase\n     for (auto &param : function.get_function_params ())\n       {\n \tResolveType::go (param.get_type ().get (), param.get_node_id ());\n-\tPatternDeclaration::go (param.get_pattern ().get (),\n-\t\t\t\tparam.get_node_id ());\n+\tPatternDeclaration::go (param.get_pattern ().get ());\n \n \t// the mutability checker needs to verify for immutable decls the number\n \t// of assignments are <1. This marks an implicit assignment\n@@ -392,8 +386,7 @@ class ResolveStmt : public ResolverBase\n       }\n \n     // resolve the function body\n-    ResolveExpr::go (function.get_definition ().get (), function.get_node_id (),\n-\t\t     path, cpath);\n+    ResolveExpr::go (function.get_definition ().get (), path, cpath);\n \n     resolver->get_name_scope ().pop ();\n     resolver->get_type_scope ().pop ();\n@@ -403,11 +396,11 @@ class ResolveStmt : public ResolverBase\n   void visit (AST::ExternBlock &extern_block) override;\n \n private:\n-  ResolveStmt (NodeId parent, const CanonicalPath &prefix,\n+  ResolveStmt (const CanonicalPath &prefix,\n \t       const CanonicalPath &canonical_prefix,\n \t       const CanonicalPath &enum_prefix)\n-    : ResolverBase (parent), prefix (prefix),\n-      canonical_prefix (canonical_prefix), enum_prefix (enum_prefix)\n+    : ResolverBase (), prefix (prefix), canonical_prefix (canonical_prefix),\n+      enum_prefix (enum_prefix)\n   {}\n \n   const CanonicalPath &prefix;"}, {"sha": "4d8b6c788f323e09efb1ea99f7a3f87236b32f25", "filename": "gcc/rust/resolve/rust-ast-resolve-struct-expr-field.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-struct-expr-field.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-struct-expr-field.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-struct-expr-field.cc?ref=b9fffb15587d4e45796e1ac1b230119f38f10662", "patch": "@@ -0,0 +1,61 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-ast-resolve-struct-expr-field.h\"\n+#include \"rust-ast-resolve-expr.h\"\n+\n+namespace Rust {\n+namespace Resolver {\n+\n+void\n+ResolveStructExprField::go (AST::StructExprField *field,\n+\t\t\t    const CanonicalPath &prefix,\n+\t\t\t    const CanonicalPath &canonical_prefix)\n+{\n+  ResolveStructExprField resolver (prefix, canonical_prefix);\n+  field->accept_vis (resolver);\n+}\n+\n+ResolveStructExprField::ResolveStructExprField (\n+  const CanonicalPath &prefix, const CanonicalPath &canonical_prefix)\n+  : ResolverBase (), prefix (prefix), canonical_prefix (canonical_prefix)\n+{}\n+\n+void\n+ResolveStructExprField::visit (AST::StructExprFieldIdentifierValue &field)\n+{\n+  ResolveExpr::go (field.get_value ().get (), prefix, canonical_prefix);\n+}\n+\n+void\n+ResolveStructExprField::visit (AST::StructExprFieldIndexValue &field)\n+{\n+  ResolveExpr::go (field.get_value ().get (), prefix, canonical_prefix);\n+}\n+\n+void\n+ResolveStructExprField::visit (AST::StructExprFieldIdentifier &field)\n+{\n+  AST::IdentifierExpr expr (field.get_field_name (), {}, field.get_locus ());\n+  expr.set_node_id (field.get_node_id ());\n+\n+  ResolveExpr::go (&expr, prefix, canonical_prefix);\n+}\n+\n+} // namespace Resolver\n+} // namespace Rust"}, {"sha": "ce60b136e4be1c4c5482b85a3dc6af04a200de7f", "filename": "gcc/rust/resolve/rust-ast-resolve-struct-expr-field.h", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-struct-expr-field.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-struct-expr-field.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-struct-expr-field.h?ref=b9fffb15587d4e45796e1ac1b230119f38f10662", "patch": "@@ -32,15 +32,8 @@ class ResolveStructExprField : public ResolverBase\n   using Rust::Resolver::ResolverBase::visit;\n \n public:\n-  static void go (AST::StructExprField *field, NodeId parent,\n-\t\t  const CanonicalPath &prefix,\n-\t\t  const CanonicalPath &canonical_prefix)\n-  {\n-    ResolveStructExprField resolver (parent, prefix, canonical_prefix);\n-    field->accept_vis (resolver);\n-  }\n-\n-  virtual ~ResolveStructExprField () override {}\n+  static void go (AST::StructExprField *field, const CanonicalPath &prefix,\n+\t\t  const CanonicalPath &canonical_prefix);\n \n   void visit (AST::StructExprFieldIdentifierValue &field) override;\n \n@@ -49,11 +42,8 @@ class ResolveStructExprField : public ResolverBase\n   void visit (AST::StructExprFieldIdentifier &field) override;\n \n private:\n-  ResolveStructExprField (NodeId parent, const CanonicalPath &prefix,\n-\t\t\t  const CanonicalPath &canonical_prefix)\n-    : ResolverBase (parent), prefix (prefix),\n-      canonical_prefix (canonical_prefix)\n-  {}\n+  ResolveStructExprField (const CanonicalPath &prefix,\n+\t\t\t  const CanonicalPath &canonical_prefix);\n \n   const CanonicalPath &prefix;\n   const CanonicalPath &canonical_prefix;"}, {"sha": "e0928f5de07d29d43f74124b36d51aeefaae0fd4", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=b9fffb15587d4e45796e1ac1b230119f38f10662", "patch": "@@ -45,7 +45,7 @@ class ResolveTopLevel : public ResolverBase\n     NodeId current_module = resolver.resolver->peek_current_module_scope ();\n     resolver.mappings->insert_child_item_to_parent_module_mapping (\n       item->get_node_id (), current_module);\n-  };\n+  }\n \n   void visit (AST::Module &module) override\n   {\n@@ -408,8 +408,7 @@ class ResolveTopLevel : public ResolverBase\n private:\n   ResolveTopLevel (const CanonicalPath &prefix,\n \t\t   const CanonicalPath &canonical_prefix)\n-    : ResolverBase (UNKNOWN_NODEID), prefix (prefix),\n-      canonical_prefix (canonical_prefix)\n+    : ResolverBase (), prefix (prefix), canonical_prefix (canonical_prefix)\n   {}\n \n   const CanonicalPath &prefix;"}, {"sha": "7f6e43a725b15dc59baeadb4bd429a3605b1bc0f", "filename": "gcc/rust/resolve/rust-ast-resolve-type.cc", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc?ref=b9fffb15587d4e45796e1ac1b230119f38f10662", "patch": "@@ -122,11 +122,7 @@ void\n ResolveType::visit (AST::ArrayType &type)\n {\n   type.get_elem_type ()->accept_vis (*this);\n-  // FIXME\n-  // the capacity expr can contain block-expr with functions but these should be\n-  // folded via constexpr code\n-  ResolveExpr::go (type.get_size_expr ().get (), type.get_node_id (),\n-\t\t   CanonicalPath::create_empty (),\n+  ResolveExpr::go (type.get_size_expr ().get (), CanonicalPath::create_empty (),\n \t\t   CanonicalPath::create_empty ());\n }\n \n@@ -207,9 +203,8 @@ void\n ResolveType::visit (AST::ReferenceType &type)\n {\n   CanonicalPath path = CanonicalPath::create_empty ();\n-  resolved_node\n-    = ResolveType::go (type.get_type_referenced ().get (), type.get_node_id (),\n-\t\t       canonicalize_type_with_generics, &path);\n+  resolved_node = ResolveType::go (type.get_type_referenced ().get (),\n+\t\t\t\t   canonicalize_type_with_generics, &path);\n   if (canonical_path != nullptr)\n     {\n       std::string ref_type_str = type.is_mut () ? \"mut\" : \"\";\n@@ -223,9 +218,8 @@ void\n ResolveType::visit (AST::RawPointerType &type)\n {\n   CanonicalPath path = CanonicalPath::create_empty ();\n-  resolved_node\n-    = ResolveType::go (type.get_type_pointed_to ().get (), type.get_node_id (),\n-\t\t       canonicalize_type_with_generics, &path);\n+  resolved_node = ResolveType::go (type.get_type_pointed_to ().get (),\n+\t\t\t\t   canonicalize_type_with_generics, &path);\n   if (canonical_path != nullptr)\n     {\n       std::string ptr_type_str\n@@ -249,9 +243,8 @@ void\n ResolveType::visit (AST::SliceType &type)\n {\n   CanonicalPath path = CanonicalPath::create_empty ();\n-  resolved_node\n-    = ResolveType::go (type.get_elem_type ().get (), type.get_node_id (),\n-\t\t       canonicalize_type_with_generics, &path);\n+  resolved_node = ResolveType::go (type.get_elem_type ().get (),\n+\t\t\t\t   canonicalize_type_with_generics, &path);\n   if (canonical_path != nullptr)\n     {\n       std::string slice_path = \"[\" + path.get () + \"]\";\n@@ -460,5 +453,6 @@ ResolveRelativeTypePath::go (AST::QualifiedPathInType &path)\n \n   return true;\n }\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "aab6a1afd7d9c9569eb4f8d147358c83924a97c5", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 17, "deletions": 45, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=b9fffb15587d4e45796e1ac1b230119f38f10662", "patch": "@@ -139,7 +139,7 @@ class ResolveTypeToCanonicalPath : public ResolverBase\n protected:\n   ResolveTypeToCanonicalPath (bool include_generic_args,\n \t\t\t      bool type_resolve_generic_args)\n-    : ResolverBase (UNKNOWN_NODEID), result (CanonicalPath::create_empty ()),\n+    : ResolverBase (), result (CanonicalPath::create_empty ()),\n       include_generic_args_flag (include_generic_args),\n       type_resolve_generic_args_flag (type_resolve_generic_args),\n       failure_flag (false)\n@@ -204,15 +204,14 @@ class ResolveType : public ResolverBase\n   using Rust::Resolver::ResolverBase::visit;\n \n public:\n-  static NodeId go (AST::Type *type, NodeId parent,\n+  static NodeId go (AST::Type *type,\n \t\t    bool canonicalize_type_with_generics = false,\n \t\t    CanonicalPath *canonical_path = nullptr)\n   {\n-    ResolveType resolver (parent, canonicalize_type_with_generics,\n-\t\t\t  canonical_path);\n+    ResolveType resolver (canonicalize_type_with_generics, canonical_path);\n     type->accept_vis (resolver);\n     return resolver.resolved_node;\n-  };\n+  }\n \n   void visit (AST::BareFunctionType &fntype) override\n   {\n@@ -273,9 +272,9 @@ class ResolveType : public ResolverBase\n   void visit (AST::SliceType &type) override;\n \n private:\n-  ResolveType (NodeId parent, bool canonicalize_type_with_generics,\n+  ResolveType (bool canonicalize_type_with_generics,\n \t       CanonicalPath *canonical_path)\n-    : ResolverBase (parent),\n+    : ResolverBase (),\n       canonicalize_type_with_generics (canonicalize_type_with_generics),\n       canonical_path (canonical_path)\n   {}\n@@ -289,69 +288,49 @@ class ResolveTypeBound : public ResolverBase\n   using Rust::Resolver::ResolverBase::visit;\n \n public:\n-  static NodeId go (AST::TypeParamBound *type, NodeId parent,\n+  static NodeId go (AST::TypeParamBound *type,\n \t\t    bool canonicalize_type_with_generics = false)\n   {\n-    ResolveTypeBound resolver (parent, canonicalize_type_with_generics);\n+    ResolveTypeBound resolver (canonicalize_type_with_generics);\n     type->accept_vis (resolver);\n-    if (!resolver.ok)\n-      rust_error_at (type->get_locus (), \"unresolved type bound\");\n-\n     return resolver.resolved_node;\n   };\n \n   void visit (AST::TraitBound &bound) override\n   {\n-    resolved_node = ResolveType::go (&bound.get_type_path (), parent,\n+    resolved_node = ResolveType::go (&bound.get_type_path (),\n \t\t\t\t     canonicalize_type_with_generics);\n-    ok = resolved_node != UNKNOWN_NODEID;\n   }\n \n-  void visit (AST::Lifetime &) override { ok = true; }\n-\n private:\n-  ResolveTypeBound (NodeId parent, bool canonicalize_type_with_generics)\n-    : ResolverBase (parent),\n-      canonicalize_type_with_generics (canonicalize_type_with_generics),\n-      ok (false)\n+  ResolveTypeBound (bool canonicalize_type_with_generics)\n+    : ResolverBase (),\n+      canonicalize_type_with_generics (canonicalize_type_with_generics)\n   {}\n \n   bool canonicalize_type_with_generics;\n-  bool ok;\n };\n \n class ResolveGenericParam : public ResolverBase\n {\n   using Rust::Resolver::ResolverBase::visit;\n \n public:\n-  static NodeId go (AST::GenericParam *param, NodeId parent)\n+  static NodeId go (AST::GenericParam *param)\n   {\n-    ResolveGenericParam resolver (parent);\n+    ResolveGenericParam resolver;\n     param->accept_vis (resolver);\n-    if (!resolver.ok)\n-      rust_error_at (param->get_locus (), \"unresolved generic parameter\");\n-\n     return resolver.resolved_node;\n-  };\n-\n-  void visit (AST::LifetimeParam &) override\n-  {\n-    // For now do not do anything and accept everything.\n-    ok = true;\n   }\n \n   void visit (AST::ConstGenericParam &) override\n   {\n     // For now do not do anything and accept everything.\n     // FIXME: This needs to change soon!\n-    ok = true;\n   }\n \n   void visit (AST::TypeParam &param) override\n   {\n-    ok = true;\n-\n     // if it has a type lets resolve it\n     if (param.has_type ())\n       ResolveType::go (param.get_type ().get (), param.get_node_id ());\n@@ -379,9 +358,7 @@ class ResolveGenericParam : public ResolverBase\n   }\n \n private:\n-  ResolveGenericParam (NodeId parent) : ResolverBase (parent), ok (false) {}\n-\n-  bool ok;\n+  ResolveGenericParam () : ResolverBase () {}\n };\n \n class ResolveWhereClause : public ResolverBase\n@@ -391,16 +368,11 @@ class ResolveWhereClause : public ResolverBase\n public:\n   static void Resolve (AST::WhereClause &where_clause)\n   {\n-    ResolveWhereClause r (where_clause.get_node_id ());\n+    ResolveWhereClause r;\n     for (auto &clause : where_clause.get_items ())\n       clause->accept_vis (r);\n   }\n \n-  void visit (AST::LifetimeWhereClauseItem &) override\n-  {\n-    // nothing to do\n-  }\n-\n   void visit (AST::TypeBoundWhereClauseItem &item) override\n   {\n     ResolveType::go (item.get_type ().get (), item.get_node_id ());\n@@ -414,7 +386,7 @@ class ResolveWhereClause : public ResolverBase\n   }\n \n private:\n-  ResolveWhereClause (NodeId parent) : ResolverBase (parent) {}\n+  ResolveWhereClause () : ResolverBase () {}\n };\n \n } // namespace Resolver"}, {"sha": "3a3dedad214eb855fa8bb4a302331431abf80e5e", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=b9fffb15587d4e45796e1ac1b230119f38f10662", "patch": "@@ -111,31 +111,6 @@ NameResolution::go (AST::Crate &crate)\n   resolver->pop_module_scope ();\n }\n \n-// rust-ast-resolve-struct-expr-field.h\n-\n-void\n-ResolveStructExprField::visit (AST::StructExprFieldIdentifierValue &field)\n-{\n-  ResolveExpr::go (field.get_value ().get (), field.get_node_id (), prefix,\n-\t\t   canonical_prefix);\n-}\n-\n-void\n-ResolveStructExprField::visit (AST::StructExprFieldIndexValue &field)\n-{\n-  ResolveExpr::go (field.get_value ().get (), field.get_node_id (), prefix,\n-\t\t   canonical_prefix);\n-}\n-\n-void\n-ResolveStructExprField::visit (AST::StructExprFieldIdentifier &field)\n-{\n-  AST::IdentifierExpr expr (field.get_field_name (), {}, field.get_locus ());\n-  expr.set_node_id (field.get_node_id ());\n-\n-  ResolveExpr::go (&expr, field.get_node_id (), prefix, canonical_prefix);\n-}\n-\n // rust-ast-resolve-item.h\n \n void"}, {"sha": "9c1c1a18c6af70d788641f8816838e3208a969d2", "filename": "gcc/rust/resolve/rust-ast-verify-assignee.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fffb15587d4e45796e1ac1b230119f38f10662/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h?ref=b9fffb15587d4e45796e1ac1b230119f38f10662", "patch": "@@ -64,7 +64,7 @@ class VerifyAsignee : public ResolverBase\n \n     ok = true;\n     // mark the assignment to the name\n-    resolver->mark_assignment_to_decl (resolved_node, parent);\n+    // resolver->mark_assignment_to_decl (resolved_node, parent);\n   }\n \n   void visit (AST::DereferenceExpr &expr) override\n@@ -75,7 +75,7 @@ class VerifyAsignee : public ResolverBase\n   void visit (AST::PathInExpression &expr) override { ok = true; }\n \n private:\n-  VerifyAsignee (NodeId parent) : ResolverBase (parent), ok (false) {}\n+  VerifyAsignee (NodeId parent) : ResolverBase (), ok (false) {}\n \n   bool ok;\n };"}]}