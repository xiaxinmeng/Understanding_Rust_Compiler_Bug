{"sha": "eb2b36024c94bc32465777927092cdbdf2d95204", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIyYjM2MDI0Yzk0YmMzMjQ2NTc3NzkyNzA5MmNkYmRmMmQ5NTIwNA==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-02-08T16:50:30Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-04-28T20:10:58Z"}, "message": "aarch64: Use RTL builtins for vpaddq intrinsics\n\nRewrite vpaddq Neon intrinsics to use RTL builtins rather than inline\nassembly code, allowing for better scheduling and optimization.\n\ngcc/ChangeLog:\n\n2021-02-08  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Use VDQ_I iterator\n\tfor aarch64_addp<mode> builtin macro generator.\n\t* config/aarch64/aarch64-simd.md: Use VDQ_I iterator in\n\taarch64_addp<mode> RTL pattern.\n\t* config/aarch64/arm_neon.h (vpaddq_s8): Use RTL builtin\n\tinstead of inline asm.\n\t(vpaddq_s16): Likewise.\n\t(vpaddq_s32): Likewise.\n\t(vpaddq_s64): Likewise.\n\t(vpaddq_u8): Likewise.\n\t(vpaddq_u16): Likewise.\n\t(vpaddq_u32): Likewise.\n\t(vpaddq_u64): Likewise.", "tree": {"sha": "99b0886667605aa8eb6819764ae4a8e05ce96167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99b0886667605aa8eb6819764ae4a8e05ce96167"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb2b36024c94bc32465777927092cdbdf2d95204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb2b36024c94bc32465777927092cdbdf2d95204", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb2b36024c94bc32465777927092cdbdf2d95204", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb2b36024c94bc32465777927092cdbdf2d95204/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a53b8229e64c78256449005929e599b2eab83fbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a53b8229e64c78256449005929e599b2eab83fbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a53b8229e64c78256449005929e599b2eab83fbd"}], "stats": {"total": 70, "additions": 17, "deletions": 53}, "files": [{"sha": "92804e08e35ff213b81e86c71a3fd623c98e0473", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2b36024c94bc32465777927092cdbdf2d95204/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2b36024c94bc32465777927092cdbdf2d95204/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=eb2b36024c94bc32465777927092cdbdf2d95204", "patch": "@@ -48,7 +48,7 @@\n   BUILTIN_VB (BINOP, pmul, 0, NONE)\n   BUILTIN_VHSDF_HSDF (BINOP, fmulx, 0, FP)\n   BUILTIN_VHSDF_DF (UNOP, sqrt, 2, FP)\n-  BUILTIN_VD_BHSI (BINOP, addp, 0, NONE)\n+  BUILTIN_VDQ_I (BINOP, addp, 0, NONE)\n   VAR1 (UNOP, addp, 0, NONE, di)\n   BUILTIN_VDQ_BHSI (UNOP, clrsb, 2, NONE)\n   BUILTIN_VDQ_BHSI (UNOP, clz, 2, NONE)"}, {"sha": "60e11c6a073dfb30b9f398f9bfbe291ed611307e", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2b36024c94bc32465777927092cdbdf2d95204/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2b36024c94bc32465777927092cdbdf2d95204/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=eb2b36024c94bc32465777927092cdbdf2d95204", "patch": "@@ -6004,10 +6004,10 @@\n ;; addp\n \n (define_insn \"aarch64_addp<mode>\"\n-  [(set (match_operand:VD_BHSI 0 \"register_operand\" \"=w\")\n-        (unspec:VD_BHSI\n-          [(match_operand:VD_BHSI 1 \"register_operand\" \"w\")\n-\t   (match_operand:VD_BHSI 2 \"register_operand\" \"w\")]\n+  [(set (match_operand:VDQ_I 0 \"register_operand\" \"=w\")\n+        (unspec:VDQ_I\n+          [(match_operand:VDQ_I 1 \"register_operand\" \"w\")\n+\t   (match_operand:VDQ_I 2 \"register_operand\" \"w\")]\n           UNSPEC_ADDP))]\n   \"TARGET_SIMD\"\n   \"addp\\t%<v>0<Vmtype>, %<v>1<Vmtype>, %<v>2<Vmtype>\""}, {"sha": "52f3714b5eba6dc72bf0386a945e5f3704ed509b", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 12, "deletions": 48, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb2b36024c94bc32465777927092cdbdf2d95204/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb2b36024c94bc32465777927092cdbdf2d95204/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=eb2b36024c94bc32465777927092cdbdf2d95204", "patch": "@@ -8673,96 +8673,60 @@ __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddq_s8 (int8x16_t __a, int8x16_t __b)\n {\n-  int8x16_t __result;\n-  __asm__ (\"addp %0.16b,%1.16b,%2.16b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_addpv16qi (__a, __b);\n }\n \n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddq_s16 (int16x8_t __a, int16x8_t __b)\n {\n-  int16x8_t __result;\n-  __asm__ (\"addp %0.8h,%1.8h,%2.8h\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_addpv8hi (__a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddq_s32 (int32x4_t __a, int32x4_t __b)\n {\n-  int32x4_t __result;\n-  __asm__ (\"addp %0.4s,%1.4s,%2.4s\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_addpv4si (__a, __b);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddq_s64 (int64x2_t __a, int64x2_t __b)\n {\n-  int64x2_t __result;\n-  __asm__ (\"addp %0.2d,%1.2d,%2.2d\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_addpv2di (__a, __b);\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddq_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n-  uint8x16_t __result;\n-  __asm__ (\"addp %0.16b,%1.16b,%2.16b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return (uint8x16_t) __builtin_aarch64_addpv16qi ((int8x16_t) __a,\n+\t\t\t\t\t\t   (int8x16_t) __b);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddq_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  uint16x8_t __result;\n-  __asm__ (\"addp %0.8h,%1.8h,%2.8h\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return (uint16x8_t) __builtin_aarch64_addpv8hi ((int16x8_t) __a,\n+\t\t\t\t\t\t  (int16x8_t) __b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddq_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  uint32x4_t __result;\n-  __asm__ (\"addp %0.4s,%1.4s,%2.4s\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return (uint32x4_t) __builtin_aarch64_addpv4si ((int32x4_t) __a,\n+\t\t\t\t\t\t  (int32x4_t) __b);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vpaddq_u64 (uint64x2_t __a, uint64x2_t __b)\n {\n-  uint64x2_t __result;\n-  __asm__ (\"addp %0.2d,%1.2d,%2.2d\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return (uint64x2_t) __builtin_aarch64_addpv2di ((int64x2_t) __a,\n+\t\t\t\t\t\t  (int64x2_t) __b);\n }\n \n __extension__ extern __inline int16x4_t"}]}