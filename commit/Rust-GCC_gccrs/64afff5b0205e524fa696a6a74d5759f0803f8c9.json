{"sha": "64afff5b0205e524fa696a6a74d5759f0803f8c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRhZmZmNWIwMjA1ZTUyNGZhNjk2YTZhNzRkNTc1OWYwODAzZjhjOQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-06-01T12:33:23Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-06-01T12:33:23Z"}, "message": "Change use to type-based pool allocator in et-forest.c.\n\n\t* et-forest.c (et_new_occ): Use new type-based pool allocator.\n\t(et_new_tree): Likewise.\n\t(et_free_tree): Likewise.\n\t(et_free_tree_force): Likewise.\n\t(et_free_pools): Likewise.\n\t(et_split): Likewise.\n\nFrom-SVN: r223943", "tree": {"sha": "9c91e4bc61bf147a2acbfd03313bc35e37f68adb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c91e4bc61bf147a2acbfd03313bc35e37f68adb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64afff5b0205e524fa696a6a74d5759f0803f8c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64afff5b0205e524fa696a6a74d5759f0803f8c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64afff5b0205e524fa696a6a74d5759f0803f8c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64afff5b0205e524fa696a6a74d5759f0803f8c9/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d50111bc5df13eab9a7bfe2474d259624abe5d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d50111bc5df13eab9a7bfe2474d259624abe5d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d50111bc5df13eab9a7bfe2474d259624abe5d3"}], "stats": {"total": 73, "additions": 54, "deletions": 19}, "files": [{"sha": "9a2ec6c7a7d8e67e6c174a530d012f0bc316a1ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64afff5b0205e524fa696a6a74d5759f0803f8c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64afff5b0205e524fa696a6a74d5759f0803f8c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64afff5b0205e524fa696a6a74d5759f0803f8c9", "patch": "@@ -1,3 +1,12 @@\n+2015-06-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* et-forest.c (et_new_occ): Use new type-based pool allocator.\n+\t(et_new_tree): Likewise.\n+\t(et_free_tree): Likewise.\n+\t(et_free_tree_force): Likewise.\n+\t(et_free_pools): Likewise.\n+\t(et_split): Likewise.\n+\n 2015-06-01  Martin Liska  <mliska@suse.cz>\n \n \t* alloc-pool.c (struct alloc_pool_descriptor): Move definition"}, {"sha": "f3c99ba9f1c10833c089d9703b7d112ecac86e40", "filename": "gcc/dominance.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64afff5b0205e524fa696a6a74d5759f0803f8c9/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64afff5b0205e524fa696a6a74d5759f0803f8c9/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=64afff5b0205e524fa696a6a74d5759f0803f8c9", "patch": "@@ -51,6 +51,7 @@\n #include \"cfganal.h\"\n #include \"basic-block.h\"\n #include \"diagnostic-core.h\"\n+#include \"alloc-pool.h\"\n #include \"et-forest.h\"\n #include \"timevar.h\"\n #include \"hash-map.h\""}, {"sha": "4e55b634daad801af012a62b1a5a1e61fa775e4d", "filename": "gcc/et-forest.c", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64afff5b0205e524fa696a6a74d5759f0803f8c9/gcc%2Fet-forest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64afff5b0205e524fa696a6a74d5759f0803f8c9/gcc%2Fet-forest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fet-forest.c?ref=64afff5b0205e524fa696a6a74d5759f0803f8c9", "patch": "@@ -25,8 +25,8 @@ License along with libiberty; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"et-forest.h\"\n #include \"alloc-pool.h\"\n+#include \"et-forest.h\"\n \n /* We do not enable this with ENABLE_CHECKING, since it is awfully slow.  */\n #undef DEBUG_ET\n@@ -59,10 +59,26 @@ struct et_occ\n \t\t\t\t   on the path to the root.  */\n   struct et_occ *min_occ;\t/* The occurrence in the subtree with the minimal\n \t\t\t\t   depth.  */\n+\n+  /* Pool allocation new operator.  */\n+  inline void *operator new (size_t)\n+  {\n+    return pool.allocate ();\n+  }\n+\n+  /* Delete operator utilizing pool allocation.  */\n+  inline void operator delete (void *ptr)\n+  {\n+    pool.remove ((et_occ *) ptr);\n+  }\n+\n+  /* Memory allocation pool.  */\n+  static pool_allocator<et_occ> pool;\n+\n };\n \n-static alloc_pool et_nodes;\n-static alloc_pool et_occurrences;\n+pool_allocator<et_node> et_node::pool (\"et_nodes pool\", 300);\n+pool_allocator<et_occ> et_occ::pool (\"et_occ pool\", 300);\n \n /* Changes depth of OCC to D.  */\n \n@@ -449,11 +465,7 @@ et_splay (struct et_occ *occ)\n static struct et_occ *\n et_new_occ (struct et_node *node)\n {\n-  struct et_occ *nw;\n-\n-  if (!et_occurrences)\n-    et_occurrences = create_alloc_pool (\"et_occ pool\", sizeof (struct et_occ), 300);\n-  nw = (struct et_occ *) pool_alloc (et_occurrences);\n+  et_occ *nw = new et_occ;\n \n   nw->of = node;\n   nw->parent = NULL;\n@@ -474,9 +486,7 @@ et_new_tree (void *data)\n {\n   struct et_node *nw;\n \n-  if (!et_nodes)\n-    et_nodes = create_alloc_pool (\"et_node pool\", sizeof (struct et_node), 300);\n-  nw = (struct et_node *) pool_alloc (et_nodes);\n+  nw = new et_node;\n \n   nw->data = data;\n   nw->father = NULL;\n@@ -501,28 +511,28 @@ et_free_tree (struct et_node *t)\n   if (t->father)\n     et_split (t);\n \n-  pool_free (et_occurrences, t->rightmost_occ);\n-  pool_free (et_nodes, t);\n+  delete t->rightmost_occ;\n+  delete t;\n }\n \n /* Releases et tree T without maintaining other nodes.  */\n \n void\n et_free_tree_force (struct et_node *t)\n {\n-  pool_free (et_occurrences, t->rightmost_occ);\n+  delete t->rightmost_occ;\n   if (t->parent_occ)\n-    pool_free (et_occurrences, t->parent_occ);\n-  pool_free (et_nodes, t);\n+    delete t->parent_occ;\n+  delete t;\n }\n \n /* Release the alloc pools, if they are empty.  */\n \n void\n et_free_pools (void)\n {\n-  free_alloc_pool_if_empty (&et_occurrences);\n-  free_alloc_pool_if_empty (&et_nodes);\n+  et_occ::pool.release_if_empty ();\n+  et_node::pool.release_if_empty ();\n }\n \n /* Sets father of et tree T to FATHER.  */\n@@ -614,7 +624,7 @@ et_split (struct et_node *t)\n   rmost->depth = 0;\n   rmost->min = 0;\n \n-  pool_free (et_occurrences, p_occ);\n+  delete p_occ;\n \n   /* Update the tree.  */\n   if (father->son == t)"}, {"sha": "15c582d7ff33cbeed03da08598f1d9249d4fd134", "filename": "gcc/et-forest.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64afff5b0205e524fa696a6a74d5759f0803f8c9/gcc%2Fet-forest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64afff5b0205e524fa696a6a74d5759f0803f8c9/gcc%2Fet-forest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fet-forest.h?ref=64afff5b0205e524fa696a6a74d5759f0803f8c9", "patch": "@@ -66,6 +66,21 @@ struct et_node\n \n   struct et_occ *rightmost_occ;\t/* The rightmost occurrence.  */\n   struct et_occ *parent_occ;\t/* The occurrence of the parent node.  */\n+\n+  /* Pool allocation new operator.  */\n+  inline void *operator new (size_t)\n+  {\n+    return pool.allocate ();\n+  }\n+\n+  /* Delete operator utilizing pool allocation.  */\n+  inline void operator delete (void *ptr)\n+  {\n+    pool.remove ((et_node *) ptr);\n+  }\n+\n+  /* Memory allocation pool.  */\n+  static pool_allocator<et_node> pool;\n };\n \n struct et_node *et_new_tree (void *data);"}]}