{"sha": "00fbd2ddc4d9ac01508f4ce0ce021f9d6663a93e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBmYmQyZGRjNGQ5YWMwMTUwOGY0Y2UwY2UwMjFmOWQ2NjYzYTkzZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-11-17T16:55:53Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-11-17T16:55:53Z"}, "message": "[PR c++/82836] Fixe testcase\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-11/msg01515.html\n\t* g++.dg/pr82836.C: Fix for c++17.\n\nFrom-SVN: r254881", "tree": {"sha": "ab46f7b5b6a3dce24c3981e5b795b4d6d9c370b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab46f7b5b6a3dce24c3981e5b795b4d6d9c370b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00fbd2ddc4d9ac01508f4ce0ce021f9d6663a93e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00fbd2ddc4d9ac01508f4ce0ce021f9d6663a93e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00fbd2ddc4d9ac01508f4ce0ce021f9d6663a93e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00fbd2ddc4d9ac01508f4ce0ce021f9d6663a93e/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f432e4fc930be596b266f160480514aa7f026e82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f432e4fc930be596b266f160480514aa7f026e82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f432e4fc930be596b266f160480514aa7f026e82"}], "stats": {"total": 258, "additions": 132, "deletions": 126}, "files": [{"sha": "9592080cea8cd8741d37a81bc651be96c43d3c40", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00fbd2ddc4d9ac01508f4ce0ce021f9d6663a93e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00fbd2ddc4d9ac01508f4ce0ce021f9d6663a93e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=00fbd2ddc4d9ac01508f4ce0ce021f9d6663a93e", "patch": "@@ -1,3 +1,7 @@\n+2017-11-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/pr82836.C: Fix for c++17.\n+\n 2017-11-17  Tamar Christina  <tamar.christina@arm.com>\n \n \tPR target/82641"}, {"sha": "cbeb6280df7705f2bb736e292fb89a9ce37004cf", "filename": "gcc/testsuite/g++.dg/pr82836.C", "status": "modified", "additions": 128, "deletions": 126, "changes": 254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00fbd2ddc4d9ac01508f4ce0ce021f9d6663a93e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr82836.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00fbd2ddc4d9ac01508f4ce0ce021f9d6663a93e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr82836.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr82836.C?ref=00fbd2ddc4d9ac01508f4ce0ce021f9d6663a93e", "patch": "@@ -8,9 +8,9 @@\n namespace std {\n typedef long unsigned size_t;\n inline namespace __cxx11 {}\n-double abs() {}\n-__int128 abs(__int128 ) {}\n-__float128 abs(__float128 ) {}\n+  double abs() {return 0;}\n+  __int128 abs(__int128 ) {return 0;}\n+  __float128 abs(__float128 ) {return 0;}\n \n   \n #pragma weak pthread_create\n@@ -82,37 +82,37 @@ namespace std {\n     typedef char char_type;\n     typedef int int_type;\n     void assign() {}\n-    bool eq() {}\n-    bool lt() {}\n-    int compare() {}\n-    size_t length() {}\n-    char_type find() {}\n-    char_type move() {}\n-    char_type copy() {}\n-    char_type assign(char_type ) {}\n-    char_type to_char_type() {}\n-    int_type to_int_type() {}\n-    bool eq_int_type() {}\n-    int_type eof() {}\n-    int_type not_eof() {}\n+    bool eq() {return 0;}\n+    bool lt() {return 0;}\n+    int compare() {return 0;}\n+    size_t length() {return 0;}\n+    char_type find() {return 0;}\n+    char_type move() {return 0;}\n+    char_type copy() {return 0;}\n+    char_type assign(char_type ) {return 0;}\n+    char_type to_char_type() {return 0;}\n+    int_type to_int_type() {return 0;}\n+    bool eq_int_type() {return 0;}\n+    int_type eof() {return 0;}\n+    int_type not_eof() {return 0;}\n   };\n   template <> struct char_traits< wchar_t > {\n     typedef wchar_t char_type;\n     typedef int int_type;\n     void assign() {}\n-    bool eq() {}\n-    bool lt() {}\n-    int compare() {}\n-    size_t length() {}\n-    char_type find() {}\n-    char_type move() {}\n-    char_type copy() {}\n-    char_type assign(char_type ) {}\n-    char_type to_char_type() {}\n-    int_type to_int_type() {}\n-    bool eq_int_type() {}\n-    int_type eof() {}\n-    int_type not_eof() {}\n+    bool eq() {return 0;}\n+    bool lt() {return 0;}\n+    int compare() {return 0;}\n+    size_t length() {return 0;}\n+    char_type find() {return 0;}\n+    char_type move() {return 0;}\n+    char_type copy() {return 0;}\n+    char_type assign(char_type ) {return 0;}\n+    char_type to_char_type() {return 0;}\n+    int_type to_int_type() {return 0;}\n+    bool eq_int_type() {return 0;}\n+    int_type eof() {return 0;}\n+    int_type not_eof() {return 0;}\n   };\n }\n typedef int uint_least16_t;\n@@ -122,41 +122,41 @@ template <> struct char_traits< char16_t > {\n   typedef char16_t char_type;\n   typedef uint_least16_t int_type;\n   void assign() {}\n-  bool eq() {}\n-  bool lt() {}\n-  int compare() {}\n-  size_t length() {}\n-  char_type find() {}\n-  char_type move() {}\n-  char_type copy() {}\n-  char_type assign(char_type ) {}\n-  char_type to_char_type() {}\n-  int_type to_int_type() {}\n-  bool eq_int_type() {}\n-  int_type eof() {}\n-  int_type not_eof() {}\n+  bool eq() {return false;}\n+  bool lt() {return false;}\n+  int compare() {return 0;}\n+  size_t length() {return 0;}\n+  char_type find() {return 0;}\n+  char_type move() {return 0;}\n+  char_type copy() {return 0;}\n+  char_type assign(char_type ) {return 0;}\n+  char_type to_char_type() {return 0;}\n+  int_type to_int_type() {return 0;}\n+  bool eq_int_type() {return false;}\n+  int_type eof() {return 0;}\n+  int_type not_eof() {return 0;}\n };\n template <> struct char_traits< char32_t > {\n   typedef char32_t char_type;\n   typedef uint_least32_t int_type;\n   void assign() {}\n-  bool eq() {}\n-  bool lt() {}\n-  int compare() {}\n-  size_t length() {}\n-  char_type find() {}\n-  char_type move() {}\n-  char_type copy() {}\n-  char_type assign(char_type ) {}\n-  char_type to_char_type() {}\n-  int_type to_int_type() {}\n-  bool eq_int_type() {}\n-  int_type eof() {}\n-  int_type not_eof() {}\n+  bool eq() {return false;}\n+  bool lt() {return false;}\n+  int compare() {return 0;}\n+  size_t length() {return 0;}\n+  char_type find() {return 0;}\n+  char_type move() {return 0;}\n+  char_type copy() {return 0;}\n+  char_type assign(char_type ) {return 0;}\n+  char_type to_char_type() {return 0;}\n+  int_type to_int_type() {return 0;}\n+  bool eq_int_type() {return false;}\n+  int_type eof() {return 0;}\n+  int_type not_eof() {return 0;}\n };\n }\n-void *operator new(std::size_t) {}\n-void *operator new[](std::size_t) {}\n+void *operator new(std::size_t) {return (void *)1;}\n+void *operator new[](std::size_t) {return (void *)1;}\n void operator delete(void *){}\n void operator delete[](void *) {}\n namespace  {\n@@ -173,7 +173,7 @@ public:\n ;\n template < typename _Tp >\n struct less {\n-  bool operator()( _Tp ,  _Tp ) {}\n+  bool operator()( _Tp ,  _Tp ) {return false;}\n };\n }\n typedef int _Atomic_word;\n@@ -225,6 +225,7 @@ namespace std {\n         \n        (__gnu_cxx::__numeric_traits< int >::__min)\n         ;\n+      return 0;\n     }\n   };\n   }\n@@ -252,10 +253,10 @@ namespace std {\n     void operator0() {}\n   };\n   template <> struct __hash_base< size_t, char16_t > {\n-    size_t operator0() {}\n+    size_t operator0() {return 0;}\n   };\n   template <> struct __hash_base< size_t, char32_t > {\n-    size_t operator0() {}\n+    size_t operator0() {return 0;}\n   };\n   template <> struct hash< short > {\n     void operator0() {}\n@@ -292,11 +293,11 @@ namespace std {\n      ;\n     _Bit_type _M_mask;\n     _Bit_reference  () {}\n-    operator bool() {}\n+    operator bool() {return false;}\n     _Bit_reference (bool ) {}\n-    _Bit_reference operator=(_Bit_reference ) {}\n-    bool operator==(_Bit_reference ) {}\n-    bool operator<(_Bit_reference ) {}\n+    _Bit_reference operator=(_Bit_reference ) {return *this;}\n+    bool operator==(_Bit_reference ) {return false;}\n+    bool operator<(_Bit_reference ) {return false;}\n     void flip() {}\n   };\n   void swap() {}\n@@ -311,21 +312,21 @@ namespace std {\n     void _M_bump_up() {}\n     void _M_bump_down() {}\n     void _M_incr() {}\n-    bool operator==(_Bit_iterator_base ) {}\n-    bool operator<(_Bit_iterator_base ) {}\n-    bool operator!=(_Bit_iterator_base ) {}\n-    bool operator>(_Bit_iterator_base ) {}\n-    bool operator<=(_Bit_iterator_base ) {}\n-    bool operator>=(_Bit_iterator_base ) {}\n+    bool operator==(_Bit_iterator_base ) {return false;}\n+    bool operator<(_Bit_iterator_base ) {return false;}\n+    bool operator!=(_Bit_iterator_base ) {return false;}\n+    bool operator>(_Bit_iterator_base ) {return false;}\n+    bool operator<=(_Bit_iterator_base ) {return false;}\n+    bool operator>=(_Bit_iterator_base ) {return false;}\n   };\n   struct _Bit_iterator : _Bit_iterator_base {\n     _Bit_iterator() : _Bit_iterator_base(0, 0) {}\n     _Bit_iterator(_Bit_type *__x, int __y)\n         : _Bit_iterator_base(__x, __y) {}\n-    iterator _M_const_cast() {}\n-    iterator operator+() {}\n-    iterator operator-() {}\n-    reference operator[](difference_type ) {}\n+    iterator _M_const_cast() {return iterator ();}\n+    iterator operator+() {return iterator ();}\n+    iterator operator-() {return iterator ();}\n+    reference operator[](difference_type ) {return 0;}\n   };\n   void operator+(_Bit_iterator ) {}\n   struct _Bit_const_iterator : _Bit_iterator_base {\n@@ -349,52 +350,53 @@ namespace std {\n   class error_category {\n     bool operator<(error_category __other) {\n       less< error_category * >()(this, &__other);\n+      return false;\n     }\n-    bool operator==(error_category ) {}\n-    bool operator!=(error_category ) {}\n+    bool operator==(error_category ) {return false;}\n+    bool operator!=(error_category ) {return false;}\n   };\n   }\n   struct error_code {\n     error_code() : _M_cat() {}\n     error_code(error_category ) : _M_cat() {}\n     void assign() {}\n     void clear() {}\n-    int value() {}\n-    error_category category() {}\n-    string message() {}\n+    int value() {return 0;}\n+    error_category category() {return error_category ();}\n+    string message() {return string();}\n     error_category _M_cat;\n   };\n-  inline error_code make_error_code() noexcept {}\n+  inline error_code make_error_code() noexcept {return error_code ();}\n   inline bool operator<(const error_code ,\n-                        const error_code ) noexcept {}\n+                        const error_code ) noexcept {return false;}\n   struct error_condition {\n     error_condition() {}\n     error_condition(const error_category ) {}\n     void assign() noexcept {}\n     void clear() noexcept {}\n-    int value() {}\n-    const error_category &category() {}\n+    int value() {return 0;}\n+    const error_category category() {return error_category ();}\n     string message_M_cat;\n   };\n-  inline error_condition make_error_condition() noexcept {}\n+  inline error_condition make_error_condition() noexcept {return error_condition ();}\n   inline bool operator<(const error_condition ,\n-                        const error_condition ) noexcept {}\n+                        const error_condition ) noexcept {return false;}\n   inline bool operator==(const error_code ,\n-                         const error_code ) noexcept {}\n+                         const error_code ) noexcept {return false;}\n   inline bool operator==(const error_code ,\n-                         const error_condition ) noexcept {}\n+                         const error_condition ) noexcept {return false;}\n   inline bool operator==(const error_condition ,\n-                         const error_code ) noexcept {}\n+                         const error_code ) noexcept {return false;}\n   inline bool operator==(const error_condition ,\n-                         const error_condition ) noexcept {}\n+                         const error_condition ) noexcept {return false;}\n   inline bool operator!=(const error_code ,\n-                         const error_code ) noexcept {}\n+                         const error_code ) noexcept {return false;}\n   inline bool operator!=(const error_code ,\n-                         const error_condition ) noexcept {}\n+                         const error_condition ) noexcept {return false;}\n   inline bool operator!=(const error_condition ,\n-                         const error_code ) noexcept {}\n+                         const error_code ) noexcept {return false;}\n   inline bool operator!=(const error_condition ,\n-                         const error_condition ) noexcept {}\n+                         const error_condition ) noexcept {return false;}\n   class system_error : public runtime_error {\n   error_code _M_code;\n \n@@ -410,47 +412,47 @@ namespace std {\n         : runtime_error(error_code().message()) {}\n     system_error(const string &__what)\n         : runtime_error(error_code().message()) {}\n-    const error_code &code() {}\n+    const error_code code() {return error_code ();}\n     void operator0() {}\n   };\n   enum _Ios_Fmtflags {};\n-  _Ios_Fmtflags operator&(_Ios_Fmtflags __a__b) {}\n-  _Ios_Fmtflags operator|(_Ios_Fmtflags __a,\n-                                           _Ios_Fmtflags __b) {}\n-  _Ios_Fmtflags operator^(_Ios_Fmtflags __a,\n-                                           _Ios_Fmtflags __b) {}\n-  _Ios_Fmtflags operator~(_Ios_Fmtflags __a) {}\n-  _Ios_Fmtflags &operator|=(_Ios_Fmtflags ,\n-                                         _Ios_Fmtflags __b) {}\n-  _Ios_Fmtflags &operator&=(_Ios_Fmtflags ,\n-                                         _Ios_Fmtflags __b) {}\n-  _Ios_Fmtflags &operator^=(_Ios_Fmtflags ,\n-                                         _Ios_Fmtflags __b) {}\n+  _Ios_Fmtflags operator&(_Ios_Fmtflags &__a) {return __a;}\n+  _Ios_Fmtflags operator|(_Ios_Fmtflags &__a,\n+                                           _Ios_Fmtflags __b) {return __a;}\n+  _Ios_Fmtflags operator^(_Ios_Fmtflags &__a,\n+                                           _Ios_Fmtflags __b) {return __a;}\n+  _Ios_Fmtflags operator~(_Ios_Fmtflags &__a) {return __a;}\n+  _Ios_Fmtflags &operator|=(_Ios_Fmtflags &__a,\n+                                         _Ios_Fmtflags __b) {return __a;}\n+  _Ios_Fmtflags &operator&=(_Ios_Fmtflags &__a,\n+                                         _Ios_Fmtflags __b) {return __a;}\n+  _Ios_Fmtflags &operator^=(_Ios_Fmtflags &__a,\n+                                         _Ios_Fmtflags __b) {return __a;}\n   enum _Ios_Openmode {\n     _S_ios_openmode_max };\n-  _Ios_Openmode operator&(_Ios_Openmode __a__b) {}\n-  _Ios_Openmode operator|(_Ios_Openmode __a,\n-                                           _Ios_Openmode __b) {}\n-  _Ios_Openmode operator^(_Ios_Openmode __a,\n-                                           _Ios_Openmode __b) {}\n-  _Ios_Openmode operator~(_Ios_Openmode __a) {}\n-  _Ios_Openmode &operator|=(_Ios_Openmode ,\n-                                         _Ios_Openmode __b) {}\n-  _Ios_Openmode &operator&=(_Ios_Openmode ,\n-                                         _Ios_Openmode __b) {}\n-  _Ios_Openmode &operator^=(_Ios_Openmode ,\n-                                         _Ios_Openmode __b) {}\n+  _Ios_Openmode operator&(_Ios_Openmode &__a__b) {return __a__b;}\n+  _Ios_Openmode operator|(_Ios_Openmode &__a,\n+                                           _Ios_Openmode __b) {return __a;}\n+  _Ios_Openmode operator^(_Ios_Openmode &__a,\n+                                           _Ios_Openmode __b) {return __a;}\n+  _Ios_Openmode operator~(_Ios_Openmode &__a) {return __a;}\n+  _Ios_Openmode &operator|=(_Ios_Openmode &__a,\n+                                         _Ios_Openmode __b) {return __a;}\n+  _Ios_Openmode &operator&=(_Ios_Openmode &__a,\n+                                         _Ios_Openmode __b) {return __a;}\n+  _Ios_Openmode &operator^=(_Ios_Openmode &__a,\n+                                         _Ios_Openmode __b) {return __a;}\n   enum _Ios_Iostate {\n     _S_ios_iostate_max };\n-  _Ios_Iostate operator&(_Ios_Iostate __a__b) {}\n-  _Ios_Iostate operator|(_Ios_Iostate __a, _Ios_Iostate __b) {}\n-  _Ios_Iostate operator^(_Ios_Iostate __a, _Ios_Iostate __b) {}\n-  _Ios_Iostate operator~(_Ios_Iostate __a) {}\n-  _Ios_Iostate &operator|=(_Ios_Iostate , _Ios_Iostate __b) {}\n-  _Ios_Iostate &operator&=(_Ios_Iostate , _Ios_Iostate __b) {}\n-  _Ios_Iostate &operator^=(_Ios_Iostate , _Ios_Iostate __b) {}\n+  _Ios_Iostate operator&(_Ios_Iostate &__a__b) {return __a__b;}\n+  _Ios_Iostate operator|(_Ios_Iostate &__a, _Ios_Iostate __b) {return __a;}\n+  _Ios_Iostate operator^(_Ios_Iostate &__a, _Ios_Iostate __b) {return __a;}\n+  _Ios_Iostate operator~(_Ios_Iostate &__a) {return __a;}\n+  _Ios_Iostate &operator|=(_Ios_Iostate &__a, _Ios_Iostate __b) {return __a;}\n+  _Ios_Iostate &operator&=(_Ios_Iostate &__a, _Ios_Iostate __b) {return __a;}\n+  _Ios_Iostate &operator^=(_Ios_Iostate &__a, _Ios_Iostate __b) {return __a;}\n   enum class io_errc;\n-  inline error_code make_error_code(io_errc __e) noexcept {}\n+  inline error_code make_error_code(io_errc __e) noexcept {return error_code();}\n   inline error_condition make_error_condition_wrap_class_string;\n static luaL_Reg swig_ClientProfile_methods;\n static luaL_Reg swig_ClientProfile_meta;"}]}