{"sha": "1d7ff272c796a4fa6e25fef75aaa49d7d0a73f72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ3ZmYyNzJjNzk2YTRmYTZlMjVmZWY3NWFhYTQ5ZDdkMGE3M2Y3Mg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-11-20T19:06:19Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-11-20T19:06:19Z"}, "message": "c-typeck.c (build_conditional_expr): When merging type qualifiers for conditional expressions between a pointer and...\n\n\t* c-typeck.c (build_conditional_expr): When merging type\n\tqualifiers for conditional expressions between a pointer and a\n\tpointer to a void type, merge the qualifiers on the target types\n\trather than the pointer type.  Remove obsolete conditioned out\n\tcode.\n\ntestsuite:\n\t* gcc.dg/c99-condexpr-1.c: New test.\n\nFrom-SVN: r37589", "tree": {"sha": "97024f1a070b7d7df63683cd4f106a692baa01d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97024f1a070b7d7df63683cd4f106a692baa01d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d7ff272c796a4fa6e25fef75aaa49d7d0a73f72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d7ff272c796a4fa6e25fef75aaa49d7d0a73f72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d7ff272c796a4fa6e25fef75aaa49d7d0a73f72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d7ff272c796a4fa6e25fef75aaa49d7d0a73f72/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "029a4f4dea9d93d36a058b4dd5cc1c17fa7bf2a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/029a4f4dea9d93d36a058b4dd5cc1c17fa7bf2a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/029a4f4dea9d93d36a058b4dd5cc1c17fa7bf2a2"}], "stats": {"total": 96, "additions": 86, "deletions": 10}, "files": [{"sha": "764578f43936d2060b42df556f5068dbcc27e7ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d7ff272c796a4fa6e25fef75aaa49d7d0a73f72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d7ff272c796a4fa6e25fef75aaa49d7d0a73f72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d7ff272c796a4fa6e25fef75aaa49d7d0a73f72", "patch": "@@ -1,3 +1,11 @@\n+2000-11-20  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-typeck.c (build_conditional_expr): When merging type\n+\tqualifiers for conditional expressions between a pointer and a\n+\tpointer to a void type, merge the qualifiers on the target types\n+\trather than the pointer type.  Remove obsolete conditioned out\n+\tcode.\n+\n 2000-11-20  Neil Booth  <neilb@earthling.net>\n \n \t* c-lang.c (lang_init_options): Update call to"}, {"sha": "9122a756c833086b0a774c533d7e0a8b3d04416a", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d7ff272c796a4fa6e25fef75aaa49d7d0a73f72/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d7ff272c796a4fa6e25fef75aaa49d7d0a73f72/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=1d7ff272c796a4fa6e25fef75aaa49d7d0a73f72", "patch": "@@ -3547,13 +3547,15 @@ build_conditional_expr (ifexp, op1, op2)\n \t{\n \t  if (pedantic && TREE_CODE (TREE_TYPE (type2)) == FUNCTION_TYPE)\n \t    pedwarn (\"ISO C forbids conditional expr between `void *' and function pointer\");\n-\t  result_type = qualify_type (type1, type2);\n+\t  result_type = build_pointer_type (qualify_type (TREE_TYPE (type1),\n+\t\t\t\t\t\t\t  TREE_TYPE (type2)));\n \t}\n       else if (VOID_TYPE_P (TREE_TYPE (type2)))\n \t{\n \t  if (pedantic && TREE_CODE (TREE_TYPE (type1)) == FUNCTION_TYPE)\n \t    pedwarn (\"ISO C forbids conditional expr between `void *' and function pointer\");\n-\t  result_type = qualify_type (type2, type1);\n+\t  result_type = build_pointer_type (qualify_type (TREE_TYPE (type2),\n+\t\t\t\t\t\t\t  TREE_TYPE (type1)));\n \t}\n       else\n \t{\n@@ -3568,10 +3570,6 @@ build_conditional_expr (ifexp, op1, op2)\n       else\n \t{\n \t  op2 = null_pointer_node;\n-#if 0  /* The spec seems to say this is permitted.  */\n-\t  if (pedantic && TREE_CODE (type1) == FUNCTION_TYPE)\n-\t    pedwarn (\"ANSI C forbids conditional expr between 0 and function pointer\");\n-#endif\n \t}\n       result_type = type1;\n     }\n@@ -3582,10 +3580,6 @@ build_conditional_expr (ifexp, op1, op2)\n       else\n \t{\n \t  op1 = null_pointer_node;\n-#if 0  /* The spec seems to say this is permitted.  */\n-\t  if (pedantic && TREE_CODE (type2) == FUNCTION_TYPE)\n-\t    pedwarn (\"ANSI C forbids conditional expr between 0 and function pointer\");\n-#endif\n \t}\n       result_type = type2;\n     }"}, {"sha": "6fb01f86b96b925304a4b2901993b37becd1319e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d7ff272c796a4fa6e25fef75aaa49d7d0a73f72/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d7ff272c796a4fa6e25fef75aaa49d7d0a73f72/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d7ff272c796a4fa6e25fef75aaa49d7d0a73f72", "patch": "@@ -1,3 +1,7 @@\n+2000-11-20  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/c99-condexpr-1.c: New test.\n+\n 2000-11-20  Neil Booth  <neilb@earthling.net>\n \n \t* gcc.dg/cpp/macsyntx.c: Use correct command line option."}, {"sha": "69d4250801a94b01bba91010c020d1c44e368ef1", "filename": "gcc/testsuite/gcc.dg/c99-condexpr-1.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d7ff272c796a4fa6e25fef75aaa49d7d0a73f72/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-condexpr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d7ff272c796a4fa6e25fef75aaa49d7d0a73f72/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-condexpr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-condexpr-1.c?ref=1d7ff272c796a4fa6e25fef75aaa49d7d0a73f72", "patch": "@@ -0,0 +1,70 @@\n+/* Test for types of conditional expressions.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+/* Notes:\n+\n+   (a) The rules are the same in both C standard versions, but C99 also\n+   gives us the \"restrict\" qualifier to play with.\n+\n+   (b) Within the C standard, the value of a conditional expression can't\n+   have qualified type - but nor can this be detected.  Because of GCC's\n+   extended lvalues, the value may in GCC have qualified type if the\n+   arguments do.  So don't use the following macro with arguments of\n+   qualified type.\n+\n+*/\n+\n+/* Assertion that the type of a conditional expression between E1 and E2\n+   is T.  Checks the expression both ways round.  */\n+#define ASSERT_COND_TYPE(E1, E2, T)\t\t\t\\\n+\tdo {\t\t\t\t\t\t\\\n+\t  typedef T type;\t\t\t\t\\\n+\t  typedef type **typepp;\t\t\t\\\n+\t  typedef __typeof(0 ? (E1) : (E2)) ctype;\t\\\n+\t  typedef __typeof(0 ? (E2) : (E1)) ctype2;\t\\\n+\t  typedef ctype **ctypepp;\t\t\t\\\n+\t  typedef ctype2 **ctype2pp;\t\t\t\\\n+\t  typepp x = 0;\t\t\t\t\t\\\n+\t  ctypepp y = 0;\t\t\t\t\\\n+\t  ctype2pp z = 0;\t\t\t\t\\\n+\t  x = y;\t\t\t\t\t\\\n+\t  x = z;\t\t\t\t\t\\\n+\t} while (0)\n+\n+void\n+foo (void)\n+{\n+  const void *c_vp;\n+  void *vp;\n+  const int *c_ip;\n+  volatile int *v_ip;\n+  int *ip;\n+  const char *c_cp;\n+  int *restrict *r_ipp;\n+  typedef void (*fpt)(void);\n+  fpt fp;\n+  signed char sc;\n+  struct s { int p; } st;\n+  union u { int p; } un;\n+  /* Arithmetic type.  */\n+  ASSERT_COND_TYPE (sc, sc, int);\n+  /* Structure and union.  */\n+  ASSERT_COND_TYPE (st, st, struct s);\n+  ASSERT_COND_TYPE (un, un, union u);\n+  /* Void.  */\n+  ASSERT_COND_TYPE ((void)0, (void)1, void);\n+  /* Pointers: examples from 6.5.15 paragraph 8.  */\n+  ASSERT_COND_TYPE (c_vp, c_ip, const void *);\n+  ASSERT_COND_TYPE (v_ip, 0, volatile int *);\n+  ASSERT_COND_TYPE (c_ip, v_ip, const volatile int *);\n+  ASSERT_COND_TYPE (vp, c_cp, const void *);\n+  ASSERT_COND_TYPE (ip, c_ip, const int *);\n+  ASSERT_COND_TYPE (vp, ip, void *);\n+  /* Null pointer constants.  */\n+  ASSERT_COND_TYPE (v_ip, (void *)0, volatile int *);\n+  ASSERT_COND_TYPE (r_ipp, (void *)0, int *restrict *);\n+  ASSERT_COND_TYPE (fp, 0, fpt);\n+  ASSERT_COND_TYPE (fp, (void *)0, fpt);\n+}"}]}