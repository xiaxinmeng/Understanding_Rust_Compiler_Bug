{"sha": "7efa52a3e519324350c2d649264191c7b51344a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VmYTUyYTNlNTE5MzI0MzUwYzJkNjQ5MjY0MTkxYzdiNTEzNDRhNg==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2005-03-30T21:49:19Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2005-03-30T21:49:19Z"}, "message": "* src/ia64/ffitarget.h (ffi_arg) ADD DI attribute.\n\n\t(ffi_sarg) Ditto.\n\t* src/ia64/unix.S (ffi_closure_unix): Extend gp\n\tto 64 bits in ILP32 mode.\n\tLoad 64 bits even for short data.\n\nFrom-SVN: r97283", "tree": {"sha": "10e1e1455e8fd4ae02f1c598a9fdf6a896993cc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10e1e1455e8fd4ae02f1c598a9fdf6a896993cc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7efa52a3e519324350c2d649264191c7b51344a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7efa52a3e519324350c2d649264191c7b51344a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7efa52a3e519324350c2d649264191c7b51344a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7efa52a3e519324350c2d649264191c7b51344a6/comments", "author": null, "committer": null, "parents": [{"sha": "5662a50dd8c7116df0ad182ce6792dfeeb0f72aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5662a50dd8c7116df0ad182ce6792dfeeb0f72aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5662a50dd8c7116df0ad182ce6792dfeeb0f72aa"}], "stats": {"total": 63, "additions": 26, "deletions": 37}, "files": [{"sha": "a9fa1dfe098fbe246869f55fbb5b052e71b74784", "filename": "libffi/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7efa52a3e519324350c2d649264191c7b51344a6/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7efa52a3e519324350c2d649264191c7b51344a6/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=7efa52a3e519324350c2d649264191c7b51344a6", "patch": "@@ -1,3 +1,11 @@\n+2005-03-30  Steve Ellcey  <sje@cup.hp.com>\n+\n+\t* src/ia64/ffitarget.h (ffi_arg) ADD DI attribute.\n+\t(ffi_sarg) Ditto.\n+\t* src/ia64/unix.S (ffi_closure_unix): Extend gp\n+\tto 64 bits in ILP32 mode.\n+\tLoad 64 bits even for short data.\n+\n 2005-03-23  Mike Stump  <mrs@apple.com>\n \n \t* src/powerpc/darwin.S: Update for -m64 multilib."}, {"sha": "51bc768efd04f32966ae954ba7ef94ed894323f1", "filename": "libffi/src/ia64/ffitarget.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7efa52a3e519324350c2d649264191c7b51344a6/libffi%2Fsrc%2Fia64%2Fffitarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7efa52a3e519324350c2d649264191c7b51344a6/libffi%2Fsrc%2Fia64%2Fffitarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fia64%2Fffitarget.h?ref=7efa52a3e519324350c2d649264191c7b51344a6", "patch": "@@ -27,8 +27,8 @@\n #define LIBFFI_TARGET_H\n \n #ifndef LIBFFI_ASM\n-typedef unsigned long          ffi_arg;\n-typedef signed long            ffi_sarg;\n+typedef unsigned long          ffi_arg  __attribute__ ((mode (DI)));\n+typedef signed long            ffi_sarg __attribute__ ((mode (DI)));\n \n typedef enum ffi_abi {\n   FFI_FIRST_ABI = 0,"}, {"sha": "45dabb74c9e7d4c89054758774ed9ee62c79a879", "filename": "libffi/src/ia64/unix.S", "status": "modified", "additions": 16, "deletions": 35, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7efa52a3e519324350c2d649264191c7b51344a6/libffi%2Fsrc%2Fia64%2Funix.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7efa52a3e519324350c2d649264191c7b51344a6/libffi%2Fsrc%2Fia64%2Funix.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fia64%2Funix.S?ref=7efa52a3e519324350c2d649264191c7b51344a6", "patch": "@@ -290,8 +290,13 @@ ffi_closure_unix:\n \t.body\n \n \t/* Retrieve closure pointer and real gp.  */\n+#ifdef _ILP32\n+\taddp4\tout0 = 0, gp\n+\taddp4\tgp = 16, gp\n+#else\n \tmov\tout0 = gp\n \tadd\tgp = 16, gp\n+#endif\n \t;;\n \tld8\tgp = [gp]\n \n@@ -368,31 +373,7 @@ ffi_closure_unix:\n \tadd\tsp = FRAME_SIZE, sp\n \tbr.ret.sptk.many b0\n \t;;\n-.Lld_int8:\n-\t.body\n-\t.copy_state 1\n-\tld1\tr8 = [r16]\n-\t.restore sp\n-\tadd\tsp = FRAME_SIZE, sp\n-\tbr.ret.sptk.many b0\n-\t;;\n-.Lld_int16:\n-\t.body\n-\t.copy_state 1\n-\tld2\tr8 = [r16]\n-\t.restore sp\n-\tadd\tsp = FRAME_SIZE, sp\n-\tbr.ret.sptk.many b0\n-\t;;\n-.Lld_int32:\n-\t.body\n-\t.copy_state 1\n-\tld4\tr8 = [r16]\n-\t.restore sp\n-\tadd\tsp = FRAME_SIZE, sp\n-\tbr.ret.sptk.many b0\n-\t;;\n-.Lld_int64:\n+.Lld_int:\n \t.body\n \t.copy_state 1\n \tld8\tr8 = [r16]\n@@ -554,20 +535,20 @@ ffi_closure_unix:\n \n .Lld_table:\n \tdata8\t@pcrel(.Lld_void)\t\t// FFI_TYPE_VOID\n-\tdata8\t@pcrel(.Lld_int32)\t\t// FFI_TYPE_INT\n+\tdata8\t@pcrel(.Lld_int)\t\t// FFI_TYPE_INT\n \tdata8\t@pcrel(.Lld_float)\t\t// FFI_TYPE_FLOAT\n \tdata8\t@pcrel(.Lld_double)\t\t// FFI_TYPE_DOUBLE\n \tdata8\t@pcrel(.Lld_ldouble)\t\t// FFI_TYPE_LONGDOUBLE\n-\tdata8\t@pcrel(.Lld_int8)\t\t// FFI_TYPE_UINT8\n-\tdata8\t@pcrel(.Lld_int8)\t\t// FFI_TYPE_SINT8\n-\tdata8\t@pcrel(.Lld_int16)\t\t// FFI_TYPE_UINT16\n-\tdata8\t@pcrel(.Lld_int16)\t\t// FFI_TYPE_SINT16\n-\tdata8\t@pcrel(.Lld_int32)\t\t// FFI_TYPE_UINT32\n-\tdata8\t@pcrel(.Lld_int32)\t\t// FFI_TYPE_SINT32\n-\tdata8\t@pcrel(.Lld_int64)\t\t// FFI_TYPE_UINT64\n-\tdata8\t@pcrel(.Lld_int64)\t\t// FFI_TYPE_SINT64\n+\tdata8\t@pcrel(.Lld_int)\t\t// FFI_TYPE_UINT8\n+\tdata8\t@pcrel(.Lld_int)\t\t// FFI_TYPE_SINT8\n+\tdata8\t@pcrel(.Lld_int)\t\t// FFI_TYPE_UINT16\n+\tdata8\t@pcrel(.Lld_int)\t\t// FFI_TYPE_SINT16\n+\tdata8\t@pcrel(.Lld_int)\t\t// FFI_TYPE_UINT32\n+\tdata8\t@pcrel(.Lld_int)\t\t// FFI_TYPE_SINT32\n+\tdata8\t@pcrel(.Lld_int)\t\t// FFI_TYPE_UINT64\n+\tdata8\t@pcrel(.Lld_int)\t\t// FFI_TYPE_SINT64\n \tdata8\t@pcrel(.Lld_void)\t\t// FFI_TYPE_STRUCT\n-\tdata8\t@pcrel(.Lld_int64)\t\t// FFI_TYPE_POINTER\n+\tdata8\t@pcrel(.Lld_int)\t\t// FFI_TYPE_POINTER\n \tdata8 \t@pcrel(.Lld_small_struct)\t// FFI_IA64_TYPE_SMALL_STRUCT\n \tdata8\t@pcrel(.Lld_hfa_float)\t\t// FFI_IA64_TYPE_HFA_FLOAT\n \tdata8\t@pcrel(.Lld_hfa_double)\t\t// FFI_IA64_TYPE_HFA_DOUBLE"}]}