{"sha": "ff12fdac9b0679941912411b85263c7eba027a64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYxMmZkYWM5YjA2Nzk5NDE5MTI0MTFiODUyNjNjN2ViYTAyN2E2NA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-10T14:57:01Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-10T14:57:01Z"}, "message": "(subst, case SUREG):Only call force_to_mode if both inner and output\nmodes are MODE_INT.\n\nFrom-SVN: r5709", "tree": {"sha": "433c8d35c3299fdc0cfe39525335b624c54c54d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/433c8d35c3299fdc0cfe39525335b624c54c54d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff12fdac9b0679941912411b85263c7eba027a64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff12fdac9b0679941912411b85263c7eba027a64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff12fdac9b0679941912411b85263c7eba027a64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff12fdac9b0679941912411b85263c7eba027a64/comments", "author": null, "committer": null, "parents": [{"sha": "888184ea7e1da391c8cf8ae43923461c4b384629", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/888184ea7e1da391c8cf8ae43923461c4b384629", "html_url": "https://github.com/Rust-GCC/gccrs/commit/888184ea7e1da391c8cf8ae43923461c4b384629"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "4d05b01ad88f9554aba0351056df0375beadaebf", "filename": "gcc/combine.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff12fdac9b0679941912411b85263c7eba027a64/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff12fdac9b0679941912411b85263c7eba027a64/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=ff12fdac9b0679941912411b85263c7eba027a64", "patch": "@@ -3177,11 +3177,13 @@ subst (x, from, to, in_dest, unique_copy)\n \t  )\n \treturn gen_lowpart_for_combine (mode, SUBREG_REG (x));\n \n-      /* If we are narrowing the object, we need to see if we can simplify\n-\t the expression for the object knowing that we only need the\n+      /* If we are narrowing an integral object, we need to see if we can\n+\t simplify the expression for the object knowing that we only need the\n \t low-order bits.  */\n \n-      if (GET_MODE_SIZE (mode) < GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)))\n+      if (GET_MODE_CLASS (mode) == MODE_INT\n+\t  && GET_MODE_CLASS (GET_MODE (SUBREG_REG (x))) == MODE_INT\n+\t  && GET_MODE_SIZE (mode) < GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)))\n \t  && subreg_lowpart_p (x))\n \treturn force_to_mode (SUBREG_REG (x), mode, GET_MODE_MASK (mode),\n \t\t\t      NULL_RTX);"}]}