{"sha": "9bca63d44bf10ac1341f44b86b1c0f5b1ca5bc1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJjYTYzZDQ0YmYxMGFjMTM0MWY0NGI4NmIxYzBmNWIxY2E1YmMxYg==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2017-01-18T18:23:34Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2017-01-18T18:23:34Z"}, "message": "SHA1H instructions may be scheduled after a SHA1C instruction that uses the same input register.\n\nSHA1H instructions may be scheduled after a SHA1C instruction\nthat uses the same input register.  However SHA1C updates its input,\nso if SHA1H is scheduled after it, it requires an extra move.\nIncrease the priority of SHA1H to ensure it gets scheduled\nearlier, avoiding the move.\n\n    gcc/\n\t* config/aarch64/aarch64.c (aarch64_sched_adjust_priority)\n\tNew function.\n\t(TARGET_SCHED_ADJUST_PRIORITY): Define target hook.\n\nFrom-SVN: r244586", "tree": {"sha": "269f0067f0a513c19642c0a53e0cab3c239dad9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/269f0067f0a513c19642c0a53e0cab3c239dad9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bca63d44bf10ac1341f44b86b1c0f5b1ca5bc1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bca63d44bf10ac1341f44b86b1c0f5b1ca5bc1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bca63d44bf10ac1341f44b86b1c0f5b1ca5bc1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bca63d44bf10ac1341f44b86b1c0f5b1ca5bc1b/comments", "author": null, "committer": null, "parents": [{"sha": "90553aacf81daa11af51e62f687c0d5460ec1ee7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90553aacf81daa11af51e62f687c0d5460ec1ee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90553aacf81daa11af51e62f687c0d5460ec1ee7"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "507320d5757c958d4a990f7c3732b24c666fad8d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bca63d44bf10ac1341f44b86b1c0f5b1ca5bc1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bca63d44bf10ac1341f44b86b1c0f5b1ca5bc1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bca63d44bf10ac1341f44b86b1c0f5b1ca5bc1b", "patch": "@@ -1,3 +1,9 @@\n+2017-01-18  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_sched_adjust_priority)\n+\tNew function.\n+\t(TARGET_SCHED_ADJUST_PRIORITY): Define target hook.\n+\n 2017-01-18  Maxim Ostapenko  <m.ostapenko@samsung.com>\n \n \tPR lto/79061"}, {"sha": "39a58804ab691f63c9fa7a92aac24c2a25a4b84b", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bca63d44bf10ac1341f44b86b1c0f5b1ca5bc1b/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bca63d44bf10ac1341f44b86b1c0f5b1ca5bc1b/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=9bca63d44bf10ac1341f44b86b1c0f5b1ca5bc1b", "patch": "@@ -14070,6 +14070,26 @@ aarch64_sched_fusion_priority (rtx_insn *insn, int max_pri,\n   return;\n }\n \n+/* Implement the TARGET_SCHED_ADJUST_PRIORITY hook.\n+   Adjust priority of sha1h instructions so they are scheduled before\n+   other SHA1 instructions.  */\n+\n+static int\n+aarch64_sched_adjust_priority (rtx_insn *insn, int priority)\n+{\n+  rtx x = PATTERN (insn);\n+\n+  if (GET_CODE (x) == SET)\n+    {\n+      x = SET_SRC (x);\n+\n+      if (GET_CODE (x) == UNSPEC && XINT (x, 1) == UNSPEC_SHA1H)\n+\treturn priority + 10;\n+    }\n+\n+  return priority;\n+}\n+\n /* Given OPERANDS of consecutive load/store, check if we can merge\n    them into ldp/stp.  LOAD is true if they are load instructions.\n    MODE is the mode of memory operands.  */\n@@ -14991,6 +15011,9 @@ aarch64_libgcc_floating_mode_supported_p\n #undef TARGET_CAN_USE_DOLOOP_P\n #define TARGET_CAN_USE_DOLOOP_P can_use_doloop_if_innermost\n \n+#undef TARGET_SCHED_ADJUST_PRIORITY\n+#define TARGET_SCHED_ADJUST_PRIORITY aarch64_sched_adjust_priority\n+\n #undef TARGET_SCHED_MACRO_FUSION_P\n #define TARGET_SCHED_MACRO_FUSION_P aarch64_macro_fusion_p\n "}]}