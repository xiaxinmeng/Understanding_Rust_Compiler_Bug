{"sha": "e0c0490bfe04ae870ad1ec39e215e61608cf4ee3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBjMDQ5MGJmZTA0YWU4NzBhZDFlYzM5ZTIxNWU2MTYwOGNmNGVlMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-11-26T02:21:38Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-11-26T02:21:38Z"}, "message": "dwarf2out.c (dwarf2out_stack_adjust): Add after_p argument.\n\n\t* dwarf2out.c (dwarf2out_stack_adjust): Add after_p argument.  Save\n\targs_size adjustments for calls even with cfa as stack pointer.\n\tSearch calls for stack adjustments after the insn is issued.\n\t(dwarf2out_frame_debug): Add after_p argument; pass it on.\n\t* dwarf2out.h (dwarf2out_frame_debug): Update to match.\n\t* final.c (final_start_function, final_scan_insn): Likewise.\n\nFrom-SVN: r91319", "tree": {"sha": "28556a7be58c09385a153f5126b18bd13e964753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28556a7be58c09385a153f5126b18bd13e964753"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0c0490bfe04ae870ad1ec39e215e61608cf4ee3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0c0490bfe04ae870ad1ec39e215e61608cf4ee3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0c0490bfe04ae870ad1ec39e215e61608cf4ee3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0c0490bfe04ae870ad1ec39e215e61608cf4ee3/comments", "author": null, "committer": null, "parents": [{"sha": "58767f002acb70b56e3d342607a2c9789bf761e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58767f002acb70b56e3d342607a2c9789bf761e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58767f002acb70b56e3d342607a2c9789bf761e8"}], "stats": {"total": 80, "additions": 48, "deletions": 32}, "files": [{"sha": "9fb043b4e62463745099050a8319939c6f35512c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c0490bfe04ae870ad1ec39e215e61608cf4ee3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c0490bfe04ae870ad1ec39e215e61608cf4ee3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0c0490bfe04ae870ad1ec39e215e61608cf4ee3", "patch": "@@ -1,4 +1,13 @@\n-2004-11-25  Ricahrd Henderson  <rth@redhat.com>\n+2004-11-25  Richard Henderson  <rth@redhat.com>\n+\n+\t* dwarf2out.c (dwarf2out_stack_adjust): Add after_p argument.  Save\n+\targs_size adjustments for calls even with cfa as stack pointer.\n+\tSearch calls for stack adjustments after the insn is issued.\n+\t(dwarf2out_frame_debug): Add after_p argument; pass it on.\n+\t* dwarf2out.h (dwarf2out_frame_debug): Update to match.\n+\t* final.c (final_start_function, final_scan_insn): Likewise.\n+\n+2004-11-25  Richard Henderson  <rth@redhat.com>\n \n \tPR c++/6764\n         * reload1.c (set_initial_eh_label_offset): New."}, {"sha": "bd2650480b0c0e21806d327fa23d034ee61133db", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c0490bfe04ae870ad1ec39e215e61608cf4ee3/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c0490bfe04ae870ad1ec39e215e61608cf4ee3/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=e0c0490bfe04ae870ad1ec39e215e61608cf4ee3", "patch": "@@ -363,7 +363,7 @@ static void initial_return_save (rtx);\n static HOST_WIDE_INT stack_adjust_offset (rtx);\n static void output_cfi (dw_cfi_ref, dw_fde_ref, int);\n static void output_call_frame_info (int);\n-static void dwarf2out_stack_adjust (rtx);\n+static void dwarf2out_stack_adjust (rtx, bool);\n static void flush_queued_reg_saves (void);\n static bool clobbers_queued_reg_save (rtx);\n static void dwarf2out_frame_debug_expr (rtx, const char *);\n@@ -1051,7 +1051,7 @@ stack_adjust_offset (rtx pattern)\n    much extra space it needs to pop off the stack.  */\n \n static void\n-dwarf2out_stack_adjust (rtx insn)\n+dwarf2out_stack_adjust (rtx insn, bool after_p)\n {\n   HOST_WIDE_INT offset;\n   const char *label;\n@@ -1064,26 +1064,31 @@ dwarf2out_stack_adjust (rtx insn)\n   if (prologue_epilogue_contains (insn) || sibcall_epilogue_contains (insn))\n     return;\n \n-  if (!flag_asynchronous_unwind_tables && CALL_P (insn))\n+  /* If only calls can throw, and we have a frame pointer,\n+     save up adjustments until we see the CALL_INSN.  */\n+  if (!flag_asynchronous_unwind_tables && cfa.reg != STACK_POINTER_REGNUM)\n     {\n-      /* Extract the size of the args from the CALL rtx itself.  */\n-      insn = PATTERN (insn);\n-      if (GET_CODE (insn) == PARALLEL)\n-\tinsn = XVECEXP (insn, 0, 0);\n-      if (GET_CODE (insn) == SET)\n-\tinsn = SET_SRC (insn);\n-      gcc_assert (GET_CODE (insn) == CALL);\n-\n-      dwarf2out_args_size (\"\", INTVAL (XEXP (insn, 1)));\n+      if (CALL_P (insn) && !after_p)\n+\t{\n+\t  /* Extract the size of the args from the CALL rtx itself.  */\n+\t  insn = PATTERN (insn);\n+\t  if (GET_CODE (insn) == PARALLEL)\n+\t    insn = XVECEXP (insn, 0, 0);\n+\t  if (GET_CODE (insn) == SET)\n+\t    insn = SET_SRC (insn);\n+\t  gcc_assert (GET_CODE (insn) == CALL);\n+\t  dwarf2out_args_size (\"\", INTVAL (XEXP (insn, 1)));\n+\t}\n       return;\n     }\n \n-  /* If only calls can throw, and we have a frame pointer,\n-     save up adjustments until we see the CALL_INSN.  */\n-  else if (!flag_asynchronous_unwind_tables && cfa.reg != STACK_POINTER_REGNUM)\n-    return;\n-\n-  if (BARRIER_P (insn))\n+  if (CALL_P (insn) && !after_p)\n+    {\n+      if (!flag_asynchronous_unwind_tables)\n+\tdwarf2out_args_size (\"\", args_size);\n+      return;\n+    }\n+  else if (BARRIER_P (insn))\n     {\n       /* When we see a BARRIER, we know to reset args_size to 0.  Usually\n \t the compiler will have already emitted a stack adjustment, but\n@@ -1124,7 +1129,8 @@ dwarf2out_stack_adjust (rtx insn)\n \n   label = dwarf2out_cfi_label ();\n   def_cfa_1 (label, &cfa);\n-  dwarf2out_args_size (label, args_size);\n+  if (flag_asynchronous_unwind_tables)\n+    dwarf2out_args_size (label, args_size);\n }\n \n #endif\n@@ -1772,10 +1778,13 @@ dwarf2out_frame_debug_expr (rtx expr, const char *label)\n \n /* Record call frame debugging information for INSN, which either\n    sets SP or FP (adjusting how we calculate the frame address) or saves a\n-   register to the stack.  If INSN is NULL_RTX, initialize our state.  */\n+   register to the stack.  If INSN is NULL_RTX, initialize our state.\n+\n+   If AFTER_P is false, we're being called before the insn is emitted,\n+   otherwise after.  Call instructions get invoked twice.  */\n \n void\n-dwarf2out_frame_debug (rtx insn)\n+dwarf2out_frame_debug (rtx insn, bool after_p)\n {\n   const char *label;\n   rtx src;\n@@ -1812,8 +1821,7 @@ dwarf2out_frame_debug (rtx insn)\n   if (! RTX_FRAME_RELATED_P (insn))\n     {\n       if (!ACCUMULATE_OUTGOING_ARGS)\n-\tdwarf2out_stack_adjust (insn);\n-\n+\tdwarf2out_stack_adjust (insn, after_p);\n       return;\n     }\n "}, {"sha": "730971c2edbe5fd7655bcb9113df5aea336e4f58", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c0490bfe04ae870ad1ec39e215e61608cf4ee3/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c0490bfe04ae870ad1ec39e215e61608cf4ee3/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=e0c0490bfe04ae870ad1ec39e215e61608cf4ee3", "patch": "@@ -20,7 +20,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n extern void dwarf2out_decl (tree);\n-extern void dwarf2out_frame_debug (rtx);\n+extern void dwarf2out_frame_debug (rtx, bool);\n \n extern void debug_dwarf (void);\n struct die_struct;"}, {"sha": "bf5771aebfb2aa029a940d60f10075b8f4007bb1", "filename": "gcc/final.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c0490bfe04ae870ad1ec39e215e61608cf4ee3/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c0490bfe04ae870ad1ec39e215e61608cf4ee3/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=e0c0490bfe04ae870ad1ec39e215e61608cf4ee3", "patch": "@@ -1366,7 +1366,7 @@ final_start_function (rtx first ATTRIBUTE_UNUSED, FILE *file,\n \n #if defined (DWARF2_UNWIND_INFO) && defined (HAVE_prologue)\n   if (dwarf2out_do_frame ())\n-    dwarf2out_frame_debug (NULL_RTX);\n+    dwarf2out_frame_debug (NULL_RTX, false);\n #endif\n \n   /* If debugging, assign block numbers to all of the blocks in this\n@@ -1848,7 +1848,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n     case BARRIER:\n #if defined (DWARF2_UNWIND_INFO)\n       if (dwarf2out_do_frame ())\n-\tdwarf2out_frame_debug (insn);\n+\tdwarf2out_frame_debug (insn, false);\n #endif\n       break;\n \n@@ -2168,7 +2168,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n #if defined (DWARF2_UNWIND_INFO)\n \t    if (dwarf2out_do_frame ())\n \t      for (i = 1; i < XVECLEN (body, 0); i++)\n-\t\tdwarf2out_frame_debug (XVECEXP (body, 0, i));\n+\t\tdwarf2out_frame_debug (XVECEXP (body, 0, i), false);\n #endif\n \n \t    /* The first insn in this SEQUENCE might be a JUMP_INSN that will\n@@ -2460,7 +2460,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \n #if defined (DWARF2_UNWIND_INFO)\n \tif (CALL_P (insn) && dwarf2out_do_frame ())\n-\t  dwarf2out_frame_debug (insn);\n+\t  dwarf2out_frame_debug (insn, false);\n #endif\n \n \t/* Find the proper template for this insn.  */\n@@ -2527,13 +2527,12 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t   the unwind info.   We've already done this for delay slots\n \t   and call instructions.  */\n #if defined (DWARF2_UNWIND_INFO)\n-\tif (NONJUMP_INSN_P (insn)\n+\tif (final_sequence == 0\n #if !defined (HAVE_prologue)\n \t    && !ACCUMULATE_OUTGOING_ARGS\n #endif\n-\t    && final_sequence == 0\n \t    && dwarf2out_do_frame ())\n-\t  dwarf2out_frame_debug (insn);\n+\t  dwarf2out_frame_debug (insn, true);\n #endif\n \n \tcurrent_output_insn = debug_insn = 0;"}]}