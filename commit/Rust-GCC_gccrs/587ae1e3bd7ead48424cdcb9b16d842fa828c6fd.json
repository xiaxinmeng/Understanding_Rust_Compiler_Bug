{"sha": "587ae1e3bd7ead48424cdcb9b16d842fa828c6fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg3YWUxZTNiZDdlYWQ0ODQyNGNkY2I5YjE2ZDg0MmZhODI4YzZmZA==", "commit": {"author": {"name": "Ond\u0159ej B\u00edlka", "email": "neleai@seznam.cz", "date": "2013-07-21T15:33:00Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2013-07-21T15:33:00Z"}, "message": "Fix some typos.\n\n2013-07-21   Ond\u00c5\u0099ej B\u00c3\u00adlka  <neleai@seznam.cz>\n\n\t* objc-act.c: Fix typos.\n\t* objc-encoding.c: Likewise.\n\t* objc-gnu-runtime-abi-01.c: Likewise.\n\t* objc-next-runtime-abi-01.c: Likewise.\n\t* objc-next-runtime-abi-02.c: Likewise.\n\nFrom-SVN: r201096", "tree": {"sha": "48bb764e6ec6d486005ead4ad2fc25feab85caed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48bb764e6ec6d486005ead4ad2fc25feab85caed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/587ae1e3bd7ead48424cdcb9b16d842fa828c6fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/587ae1e3bd7ead48424cdcb9b16d842fa828c6fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/587ae1e3bd7ead48424cdcb9b16d842fa828c6fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/587ae1e3bd7ead48424cdcb9b16d842fa828c6fd/comments", "author": {"login": "neleai", "id": 48067, "node_id": "MDQ6VXNlcjQ4MDY3", "avatar_url": "https://avatars.githubusercontent.com/u/48067?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neleai", "html_url": "https://github.com/neleai", "followers_url": "https://api.github.com/users/neleai/followers", "following_url": "https://api.github.com/users/neleai/following{/other_user}", "gists_url": "https://api.github.com/users/neleai/gists{/gist_id}", "starred_url": "https://api.github.com/users/neleai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neleai/subscriptions", "organizations_url": "https://api.github.com/users/neleai/orgs", "repos_url": "https://api.github.com/users/neleai/repos", "events_url": "https://api.github.com/users/neleai/events{/privacy}", "received_events_url": "https://api.github.com/users/neleai/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b70b3e44baf317b001b78919429a7e63af50742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b70b3e44baf317b001b78919429a7e63af50742", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b70b3e44baf317b001b78919429a7e63af50742"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "3a526c20a3390ddc0bbc68aa080c0339d714b2d1", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587ae1e3bd7ead48424cdcb9b16d842fa828c6fd/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587ae1e3bd7ead48424cdcb9b16d842fa828c6fd/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=587ae1e3bd7ead48424cdcb9b16d842fa828c6fd", "patch": "@@ -9088,7 +9088,7 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n   cp_lexer_save_tokens (parser->lexer);\n   attrs_location = cp_lexer_peek_token (parser->lexer)->location;\n   if (c_dialect_objc ())\n-    /* In obj-c++, seing '[[' might be the either the beginning of\n+    /* In obj-c++, seeing '[[' might be the either the beginning of\n        c++11 attributes, or a nested objc-message-expression.  So\n        let's parse the c++11 attributes tentatively.  */\n     cp_parser_parse_tentatively (parser);"}, {"sha": "30b6d17d82b1d6e2089e96e58838187d6352484d", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587ae1e3bd7ead48424cdcb9b16d842fa828c6fd/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587ae1e3bd7ead48424cdcb9b16d842fa828c6fd/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=587ae1e3bd7ead48424cdcb9b16d842fa828c6fd", "patch": "@@ -1,3 +1,11 @@\n+2013-07-21   Ond\u00c5\u0099ej B\u00c3\u00adlka  <neleai@seznam.cz>\n+\n+\t* objc-act.c: Fix typos.\n+\t* objc-encoding.c: Likewise.\n+\t* objc-gnu-runtime-abi-01.c: Likewise.\n+\t* objc-next-runtime-abi-01.c: Likewise.\n+\t* objc-next-runtime-abi-02.c: Likewise.\n+\n 2013-05-22  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* objc-next-runtime-abi-02.c (build_v2_build_objc_method_call):"}, {"sha": "95ec4ecd40fc648cd721064c782e9e37e9838e54", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587ae1e3bd7ead48424cdcb9b16d842fa828c6fd/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587ae1e3bd7ead48424cdcb9b16d842fa828c6fd/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=587ae1e3bd7ead48424cdcb9b16d842fa828c6fd", "patch": "@@ -1401,7 +1401,7 @@ objc_maybe_build_component_ref (tree object, tree property_ident)\n \t\t     object.component dot-syntax without a declared\n \t\t     property (this is valid for classes too).  Look\n \t\t     for getter/setter methods and internally declare\n-\t\t     an artifical property based on them if found.  */\n+\t\t     an artificial property based on them if found.  */\n \t\t  x = maybe_make_artificial_property_decl (NULL_TREE,\n \t\t\t\t\t\t\t   NULL_TREE,\n \t\t\t\t\t\t\t   rprotos,"}, {"sha": "c2f7444c448a0cd1e6546550ee3e327ec01ac222", "filename": "gcc/objc/objc-encoding.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587ae1e3bd7ead48424cdcb9b16d842fa828c6fd/gcc%2Fobjc%2Fobjc-encoding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587ae1e3bd7ead48424cdcb9b16d842fa828c6fd/gcc%2Fobjc%2Fobjc-encoding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-encoding.c?ref=587ae1e3bd7ead48424cdcb9b16d842fa828c6fd", "patch": "@@ -632,7 +632,7 @@ encode_type (tree type, int curtype, int format)\n \t      tree int_type = type;\n \t      if (flag_next_runtime)\n \t\t{\n-\t\t  /* Another legacy kludge for compatiblity with\n+\t\t  /* Another legacy kludge for compatibility with\n \t\t     gcc-3.3: 32-bit longs are encoded as 'l' or 'L',\n \t\t     but not always.  For typedefs, we need to use 'i'\n \t\t     or 'I' instead if encoding a struct field, or a"}, {"sha": "f0116831e25bbab4bc59b40aa8124ec8cb28ae20", "filename": "gcc/objc/objc-gnu-runtime-abi-01.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587ae1e3bd7ead48424cdcb9b16d842fa828c6fd/gcc%2Fobjc%2Fobjc-gnu-runtime-abi-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587ae1e3bd7ead48424cdcb9b16d842fa828c6fd/gcc%2Fobjc%2Fobjc-gnu-runtime-abi-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-gnu-runtime-abi-01.c?ref=587ae1e3bd7ead48424cdcb9b16d842fa828c6fd", "patch": "@@ -76,7 +76,7 @@ along with GCC; see the file COPYING3.  If not see\n    For example, at present, any target that includes an implementation of\n    the NeXT runtime needs to place Objective-C meta-data into specific\n    named sections.  This should _not_ be done for the GNU runtime, and the\n-   folowing macro is used to attach Objective-C private attributes that may\n+   following macro is used to attach Objective-C private attributes that may\n    be used to identify the runtime for which the meta-data are intended.  */\n \n #define OBJCMETA(DECL,VERS,KIND)\t\t\t\t\t\\\n@@ -477,7 +477,7 @@ build_protocol_template (void)\n   objc_finish_struct (objc_protocol_template, decls);\n }\n \n-/* --- names, decls + identifers --- */\n+/* --- names, decls + identifiers --- */\n \n static void\n build_selector_table_decl (void)"}, {"sha": "27ba615ca0ed3f5a40e148d4971f756ee5c943b8", "filename": "gcc/objc/objc-next-runtime-abi-01.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587ae1e3bd7ead48424cdcb9b16d842fa828c6fd/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587ae1e3bd7ead48424cdcb9b16d842fa828c6fd/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c?ref=587ae1e3bd7ead48424cdcb9b16d842fa828c6fd", "patch": "@@ -583,7 +583,7 @@ build_v1_protocol_template (void)\n   objc_finish_struct (objc_protocol_template, decls);\n }\n \n-/* --- names, decls identifers --- */\n+/* --- names, decls identifiers --- */\n \n static tree\n next_runtime_abi_01_super_superclassfield_id (void)"}, {"sha": "4bb02c76737e982cdfc596e64b13fa2d9640989c", "filename": "gcc/objc/objc-next-runtime-abi-02.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587ae1e3bd7ead48424cdcb9b16d842fa828c6fd/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587ae1e3bd7ead48424cdcb9b16d842fa828c6fd/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c?ref=587ae1e3bd7ead48424cdcb9b16d842fa828c6fd", "patch": "@@ -1404,7 +1404,7 @@ objc_v2_build_ivar_ref (tree datum, tree component)\n \n /* IVAR refs are made via an externally referenceable offset and built\n    on the fly.  That is, unless they refer to (private) fields in  the\n-   class stucture.  */\n+   class structure.  */\n static tree\n next_runtime_abi_02_build_ivar_ref (location_t loc ATTRIBUTE_UNUSED,\n \t\t\t\t   tree base, tree id)\n@@ -2230,7 +2230,7 @@ generate_v2_protocol_list (tree i_or_p, tree klass_ctxt)\n    that the old ABI is supposed to build 'struct objc_method' which\n    has 3 fields, but it does not build the initialization expression\n    for 'method_imp' which for protocols is NULL any way.  To be\n-   consistant with declaration of 'struct method_t', in the new ABI we\n+   consistent with declaration of 'struct method_t', in the new ABI we\n    set the method_t.imp to NULL.  */\n \n static tree"}, {"sha": "24e5ebab75389c72f5f31b5ad92d49bf5c03c5c4", "filename": "gcc/testsuite/objc-obj-c++-shared/objc-test-suite-next-encode-assist-impl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/587ae1e3bd7ead48424cdcb9b16d842fa828c6fd/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fobjc-test-suite-next-encode-assist-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/587ae1e3bd7ead48424cdcb9b16d842fa828c6fd/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fobjc-test-suite-next-encode-assist-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fobjc-test-suite-next-encode-assist-impl.h?ref=587ae1e3bd7ead48424cdcb9b16d842fa828c6fd", "patch": "@@ -529,7 +529,7 @@ objc_get_type_qualifiers (const char *type)\n   These functions are used by objc_sizeof_type and objc_alignof_type\n   functions to compute the size and alignment of structures. The\n   previous method of computing the size and alignment of a structure\n-  was not working on some architectures, particulary on AIX, and in\n+  was not working on some architectures, particularly on AIX, and in\n   the presence of bitfields inside the structure. */\n void\n objc_layout_structure (const char *type,"}]}