{"sha": "5c7337c58f152e35a823cc51228efa4b06c06618", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM3MzM3YzU4ZjE1MmUzNWE4MjNjYzUxMjI4ZWZhNGIwNmMwNjYxOA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-06-01T12:44:44Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-06-01T12:44:44Z"}, "message": "Change use to type-based pool allocator in regcprop.c.\n\n\t* regcprop.c (free_debug_insn_changes): Use new type-based pool allocator.\n\t(replace_oldest_value_reg): Likewise.\n\t(pass_cprop_hardreg::execute): Likewise.\n\nFrom-SVN: r223961", "tree": {"sha": "d418960e719b96b4a14ac035e078a0dfad0fda87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d418960e719b96b4a14ac035e078a0dfad0fda87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c7337c58f152e35a823cc51228efa4b06c06618", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c7337c58f152e35a823cc51228efa4b06c06618", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c7337c58f152e35a823cc51228efa4b06c06618", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c7337c58f152e35a823cc51228efa4b06c06618/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3599f64ae2483163e83f8626c1d157030227f229", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3599f64ae2483163e83f8626c1d157030227f229", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3599f64ae2483163e83f8626c1d157030227f229"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "678157e49e9c02e9869a1579532de7a5aad0b4ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c7337c58f152e35a823cc51228efa4b06c06618/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c7337c58f152e35a823cc51228efa4b06c06618/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c7337c58f152e35a823cc51228efa4b06c06618", "patch": "@@ -1,3 +1,9 @@\n+2015-06-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* regcprop.c (free_debug_insn_changes): Use new type-based pool allocator.\n+\t(replace_oldest_value_reg): Likewise.\n+\t(pass_cprop_hardreg::execute): Likewise.\n+\n 2015-06-01  Martin Liska  <mliska@suse.cz>\n \n \t* ira-build.c (initiate_cost_vectors): Use new type-based pool allocator."}, {"sha": "9bac11ac6a8bcbd2903e61d3a0e4cb4c37e7d8a8", "filename": "gcc/regcprop.c", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c7337c58f152e35a823cc51228efa4b06c06618/gcc%2Fregcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c7337c58f152e35a823cc51228efa4b06c06618/gcc%2Fregcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregcprop.c?ref=5c7337c58f152e35a823cc51228efa4b06c06618", "patch": "@@ -62,6 +62,21 @@ struct queued_debug_insn_change\n   rtx_insn *insn;\n   rtx *loc;\n   rtx new_rtx;\n+\n+  /* Pool allocation new operator.  */\n+  inline void *operator new (size_t)\n+  {\n+    return pool.allocate ();\n+  }\n+\n+  /* Delete operator utilizing pool allocation.  */\n+  inline void operator delete (void *ptr)\n+  {\n+    pool.remove ((queued_debug_insn_change *) ptr);\n+  }\n+\n+  /* Memory allocation pool.  */\n+  static pool_allocator<queued_debug_insn_change> pool;\n };\n \n /* For each register, we have a list of registers that contain the same\n@@ -85,7 +100,9 @@ struct value_data\n   unsigned int n_debug_insn_changes;\n };\n \n-static alloc_pool debug_insn_changes_pool;\n+pool_allocator<queued_debug_insn_change> queued_debug_insn_change::pool\n+  (\"debug insn changes pool\", 256);\n+\n static bool skip_debug_insn_p;\n \n static void kill_value_one_regno (unsigned, struct value_data *);\n@@ -124,7 +141,7 @@ free_debug_insn_changes (struct value_data *vd, unsigned int regno)\n     {\n       next = cur->next;\n       --vd->n_debug_insn_changes;\n-      pool_free (debug_insn_changes_pool, cur);\n+      delete cur;\n     }\n   vd->e[regno].debug_insn_changes = NULL;\n }\n@@ -495,8 +512,7 @@ replace_oldest_value_reg (rtx *loc, enum reg_class cl, rtx_insn *insn,\n \t    fprintf (dump_file, \"debug_insn %u: queued replacing reg %u with %u\\n\",\n \t\t     INSN_UID (insn), REGNO (*loc), REGNO (new_rtx));\n \n-\t  change = (struct queued_debug_insn_change *)\n-\t\t   pool_alloc (debug_insn_changes_pool);\n+\t  change = new queued_debug_insn_change;\n \t  change->next = vd->e[REGNO (new_rtx)].debug_insn_changes;\n \t  change->insn = insn;\n \t  change->loc = loc;\n@@ -1244,11 +1260,6 @@ pass_cprop_hardreg::execute (function *fun)\n   visited = sbitmap_alloc (last_basic_block_for_fn (fun));\n   bitmap_clear (visited);\n \n-  if (MAY_HAVE_DEBUG_INSNS)\n-    debug_insn_changes_pool\n-      = create_alloc_pool (\"debug insn changes pool\",\n-\t\t\t   sizeof (struct queued_debug_insn_change), 256);\n-\n   FOR_EACH_BB_FN (bb, fun)\n     {\n       bitmap_set_bit (visited, bb->index);\n@@ -1308,7 +1319,7 @@ pass_cprop_hardreg::execute (function *fun)\n \t\t}\n \t  }\n \n-      free_alloc_pool (debug_insn_changes_pool);\n+      queued_debug_insn_change::pool.release ();\n     }\n \n   sbitmap_free (visited);"}]}