{"sha": "d416abb494df912d22716d8882b7aceaab487fdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQxNmFiYjQ5NGRmOTEyZDIyNzE2ZDg4ODJiN2FjZWFhYjQ4N2ZkZg==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2010-05-19T15:31:36Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2010-05-19T15:31:36Z"}, "message": "configure.ac (libffi_cv_as_x86_pcrel): Check for illegal in as output, too.\n\n\t* configure.ac (libffi_cv_as_x86_pcrel): Check for illegal in as\n\toutput, too.\n\t(libffi_cv_as_ascii_pseudo_op): Check for .ascii.\n\t(libffi_cv_as_string_pseudo_op): Check for .string.\n\t* configure: Regenerate.\n\t* fficonfig.h.in: Regenerate.\n\t* src/x86/sysv.S (.eh_frame): Use .ascii, .string or error.\n\nFrom-SVN: r159570", "tree": {"sha": "98454e0778c8a618a064eb0900e2248bceec7517", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98454e0778c8a618a064eb0900e2248bceec7517"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d416abb494df912d22716d8882b7aceaab487fdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d416abb494df912d22716d8882b7aceaab487fdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d416abb494df912d22716d8882b7aceaab487fdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d416abb494df912d22716d8882b7aceaab487fdf/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed1041376a981f996d566de4284222f06c8bd6c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed1041376a981f996d566de4284222f06c8bd6c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed1041376a981f996d566de4284222f06c8bd6c3"}], "stats": {"total": 128, "additions": 125, "deletions": 3}, "files": [{"sha": "01a71a8cd5cd31c893c9bff82cd32e935eb383d7", "filename": "libffi/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d416abb494df912d22716d8882b7aceaab487fdf/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d416abb494df912d22716d8882b7aceaab487fdf/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=d416abb494df912d22716d8882b7aceaab487fdf", "patch": "@@ -1,3 +1,13 @@\n+2010-05-19  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (libffi_cv_as_x86_pcrel): Check for illegal in as\n+\toutput, too.\n+\t(libffi_cv_as_ascii_pseudo_op): Check for .ascii.\n+\t(libffi_cv_as_string_pseudo_op): Check for .string.\n+\t* configure: Regenerate.\n+\t* fficonfig.h.in: Regenerate.\n+\t* src/x86/sysv.S (.eh_frame): Use .ascii, .string or error.\n+\n 2010-04-07  Jakub Jelinek  <jakub@redhat.com>\n \n \t* regex.c (byte_re_match_2_internal): Avoid set but not used"}, {"sha": "a63368ba1c96d02c3f1dcf301eec890e561b2ddc", "filename": "libffi/configure", "status": "modified", "additions": 71, "deletions": 1, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d416abb494df912d22716d8882b7aceaab487fdf/libffi%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d416abb494df912d22716d8882b7aceaab487fdf/libffi%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure?ref=d416abb494df912d22716d8882b7aceaab487fdf", "patch": "@@ -12397,7 +12397,7 @@ else\n \n \tlibffi_cv_as_x86_pcrel=yes\n \techo '.text; foo: nop; .data; .long foo-.; .text' > conftest.s\n-\tif $CC $CFLAGS -c conftest.s 2>&1 | grep -i warning > /dev/null; then\n+\tif $CC $CFLAGS -c conftest.s 2>&1 | $EGREP -i 'illegal|warning' > /dev/null; then\n \t    libffi_cv_as_x86_pcrel=no\n \tfi\n \n@@ -12409,6 +12409,76 @@ $as_echo \"$libffi_cv_as_x86_pcrel\" >&6; }\n $as_echo \"#define HAVE_AS_X86_PCREL 1\" >>confdefs.h\n \n     fi\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler .ascii pseudo-op support\" >&5\n+$as_echo_n \"checking assembler .ascii pseudo-op support... \" >&6; }\n+if test \"${libffi_cv_as_ascii_pseudo_op+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+       libffi_cv_as_ascii_pseudo_op=unknown\n+       # Check if we have .ascii\n+       cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+asm (\".ascii \\\"string\\\"\");\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  libffi_cv_as_ascii_pseudo_op=yes\n+else\n+  libffi_cv_as_ascii_pseudo_op=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libffi_cv_as_ascii_pseudo_op\" >&5\n+$as_echo \"$libffi_cv_as_ascii_pseudo_op\" >&6; }\n+    if test \"x$libffi_cv_as_ascii_pseudo_op\" = xyes; then\n+\n+$as_echo \"#define HAVE_AS_ASCII_PSEUDO_OP 1\" >>confdefs.h\n+\n+    fi\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler .string pseudo-op support\" >&5\n+$as_echo_n \"checking assembler .string pseudo-op support... \" >&6; }\n+if test \"${libffi_cv_as_string_pseudo_op+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+       libffi_cv_as_string_pseudo_op=unknown\n+       # Check if we have .string\n+       cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+asm (\".string \\\"string\\\"\");\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  libffi_cv_as_string_pseudo_op=yes\n+else\n+  libffi_cv_as_string_pseudo_op=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libffi_cv_as_string_pseudo_op\" >&5\n+$as_echo \"$libffi_cv_as_string_pseudo_op\" >&6; }\n+    if test \"x$libffi_cv_as_string_pseudo_op\" = xyes; then\n+\n+$as_echo \"#define HAVE_AS_STRING_PSEUDO_OP 1\" >>confdefs.h\n+\n+    fi\n fi\n \n case \"$target\" in"}, {"sha": "d4644a3df3162ce57d073860bb82b4332428715c", "filename": "libffi/configure.ac", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d416abb494df912d22716d8882b7aceaab487fdf/libffi%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d416abb494df912d22716d8882b7aceaab487fdf/libffi%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure.ac?ref=d416abb494df912d22716d8882b7aceaab487fdf", "patch": "@@ -266,14 +266,40 @@ if test x$TARGET = xX86 || test x$TARGET = xX86_WIN32 || test x$TARGET = xX86_64\n \tlibffi_cv_as_x86_pcrel, [\n \tlibffi_cv_as_x86_pcrel=yes\n \techo '.text; foo: nop; .data; .long foo-.; .text' > conftest.s\n-\tif $CC $CFLAGS -c conftest.s 2>&1 | grep -i warning > /dev/null; then\n+\tif $CC $CFLAGS -c conftest.s 2>&1 | $EGREP -i 'illegal|warning' > /dev/null; then\n \t    libffi_cv_as_x86_pcrel=no\n \tfi\n \t])\n     if test \"x$libffi_cv_as_x86_pcrel\" = xyes; then\n \tAC_DEFINE(HAVE_AS_X86_PCREL, 1,\n \t\t  [Define if your assembler supports PC relative relocs.])\n     fi\n+\n+    AC_CACHE_CHECK([assembler .ascii pseudo-op support],\n+       libffi_cv_as_ascii_pseudo_op, [\n+       libffi_cv_as_ascii_pseudo_op=unknown\n+       # Check if we have .ascii\n+       AC_TRY_COMPILE([asm (\".ascii \\\"string\\\"\");],,\n+\t\t       [libffi_cv_as_ascii_pseudo_op=yes],\n+\t\t       [libffi_cv_as_ascii_pseudo_op=no])\n+    ])\n+    if test \"x$libffi_cv_as_ascii_pseudo_op\" = xyes; then\n+       AC_DEFINE(HAVE_AS_ASCII_PSEUDO_OP, 1,\n+\t       [Define if your assembler supports .ascii.])\n+    fi\n+\n+    AC_CACHE_CHECK([assembler .string pseudo-op support],\n+       libffi_cv_as_string_pseudo_op, [\n+       libffi_cv_as_string_pseudo_op=unknown\n+       # Check if we have .string\n+       AC_TRY_COMPILE([asm (\".string \\\"string\\\"\");],,\n+\t\t       [libffi_cv_as_string_pseudo_op=yes],\n+\t\t       [libffi_cv_as_string_pseudo_op=no])\n+    ])\n+    if test \"x$libffi_cv_as_string_pseudo_op\" = xyes; then\n+       AC_DEFINE(HAVE_AS_STRING_PSEUDO_OP, 1,\n+\t       [Define if your assembler supports .string.])\n+    fi\n fi\n \n case \"$target\" in"}, {"sha": "e012ebba84b023d45162b413c44c58dab72f4912", "filename": "libffi/fficonfig.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d416abb494df912d22716d8882b7aceaab487fdf/libffi%2Ffficonfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d416abb494df912d22716d8882b7aceaab487fdf/libffi%2Ffficonfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ffficonfig.h.in?ref=d416abb494df912d22716d8882b7aceaab487fdf", "patch": "@@ -33,6 +33,9 @@\n    */\n #undef HAVE_ALLOCA_H\n \n+/* Define if your assembler supports .ascii. */\n+#undef HAVE_AS_ASCII_PSEUDO_OP\n+\n /* Define if your assembler supports .cfi_* directives. */\n #undef HAVE_AS_CFI_PSEUDO_OP\n \n@@ -43,6 +46,9 @@\n    */\n #undef HAVE_AS_SPARC_UA_PCREL\n \n+/* Define if your assembler supports .string. */\n+#undef HAVE_AS_STRING_PSEUDO_OP\n+\n /* Define if your assembler supports unwind section type. */\n #undef HAVE_AS_X86_64_UNWIND_SECTION_TYPE\n "}, {"sha": "2e5e3da57f016e68a64371eee3083c63ac7943c5", "filename": "libffi/src/x86/sysv.S", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d416abb494df912d22716d8882b7aceaab487fdf/libffi%2Fsrc%2Fx86%2Fsysv.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d416abb494df912d22716d8882b7aceaab487fdf/libffi%2Fsrc%2Fx86%2Fsysv.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fsysv.S?ref=d416abb494df912d22716d8882b7aceaab487fdf", "patch": "@@ -1,5 +1,5 @@\n /* -----------------------------------------------------------------------\n-   sysv.S - Copyright (c) 1996, 1998, 2001-2003, 2005, 2008  Red Hat, Inc.\n+   sysv.S - Copyright (c) 1996, 1998, 2001-2003, 2005, 2008, 2010  Red Hat, Inc.\n    \n    X86 Foreign Function Interface \n \n@@ -331,10 +331,20 @@ ffi_closure_raw_SYSV:\n .LSCIE1:\n \t.long\t0x0\t/* CIE Identifier Tag */\n \t.byte\t0x1\t/* CIE Version */\n+#ifdef HAVE_AS_ASCII_PSEUDO_OP\n #ifdef __PIC__\n \t.ascii \"zR\\0\"\t/* CIE Augmentation */\n #else\n \t.ascii \"\\0\"\t/* CIE Augmentation */\n+#endif\n+#elif defined HAVE_AS_STRING_PSEUDO_OP\n+#ifdef __PIC__\n+\t.string \"zR\"\t/* CIE Augmentation */\n+#else\n+\t.string \"\"\t/* CIE Augmentation */\n+#endif\n+#else\n+#error missing .ascii/.string\n #endif\n \t.byte\t0x1\t/* .uleb128 0x1; CIE Code Alignment Factor */\n \t.byte\t0x7c\t/* .sleb128 -4; CIE Data Alignment Factor */"}]}