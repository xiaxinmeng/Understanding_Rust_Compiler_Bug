{"sha": "f3cd98c4d6508838a6e8314ef5c1bdd5f9feb083", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNjZDk4YzRkNjUwODgzOGE2ZTgzMTRlZjVjMWJkZDVmOWZlYjA4Mw==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2002-08-25T20:17:01Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2002-08-25T20:17:01Z"}, "message": "std_limits.h: Indent conditional macro definitions.\n\n\t* include/std/std_limits.h: Indent conditional macro\n          definitions.\n\nFrom-SVN: r56570", "tree": {"sha": "2504338d89c78bac04a61371d2287483336caf2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2504338d89c78bac04a61371d2287483336caf2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3cd98c4d6508838a6e8314ef5c1bdd5f9feb083", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3cd98c4d6508838a6e8314ef5c1bdd5f9feb083", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3cd98c4d6508838a6e8314ef5c1bdd5f9feb083", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3cd98c4d6508838a6e8314ef5c1bdd5f9feb083/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e798cdea980337e039f7c29d5f8ef373f3ebd56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e798cdea980337e039f7c29d5f8ef373f3ebd56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e798cdea980337e039f7c29d5f8ef373f3ebd56"}], "stats": {"total": 816, "additions": 410, "deletions": 406}, "files": [{"sha": "205cec231a7385514c1ae3c881de34e8a573a191", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3cd98c4d6508838a6e8314ef5c1bdd5f9feb083/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3cd98c4d6508838a6e8314ef5c1bdd5f9feb083/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f3cd98c4d6508838a6e8314ef5c1bdd5f9feb083", "patch": "@@ -1,3 +1,7 @@\n+2002-08-25  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* include/std/std_limits.h: Indent conditional macro definitions.\n+\n 2002-08-23  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* Makefile.am (check-abi):  Specify current directory."}, {"sha": "ceed1930ddbf0611b8af27d46b2cd86c60039458", "filename": "libstdc++-v3/include/std/std_limits.h", "status": "modified", "additions": 406, "deletions": 406, "changes": 812, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3cd98c4d6508838a6e8314ef5c1bdd5f9feb083/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3cd98c4d6508838a6e8314ef5c1bdd5f9feb083/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h?ref=f3cd98c4d6508838a6e8314ef5c1bdd5f9feb083", "patch": "@@ -81,58 +81,58 @@\n // The default values are appropriate for many 32-bit targets.\n \n #ifndef __glibcpp_char_bits\n-#define __glibcpp_char_bits 8\n+#  define __glibcpp_char_bits 8\n #endif\n #ifdef __CHAR_UNSIGNED__\n-#define __glibcpp_plain_char_is_signed false\n+#  define __glibcpp_plain_char_is_signed false\n #else\n-#define __glibcpp_plain_char_is_signed true\n+#  define __glibcpp_plain_char_is_signed true\n #endif\n #ifndef __glibcpp_short_bits\n-#define __glibcpp_short_bits 16\n+#  define __glibcpp_short_bits 16\n #endif\n #ifndef __glibcpp_int_bits\n-#define __glibcpp_int_bits 32\n+#  define __glibcpp_int_bits 32\n #endif\n #ifndef __glibcpp_long_bits\n-#define __glibcpp_long_bits 32\n+#  define __glibcpp_long_bits 32\n #endif\n #ifndef __glibcpp_wchar_t_bits\n-#define __glibcpp_wchar_t_bits 32\n+#  define __glibcpp_wchar_t_bits 32\n #endif\n #ifndef __glibcpp_wchar_t_is_signed\n-#define __glibcpp_wchar_t_is_signed true\n+#  define __glibcpp_wchar_t_is_signed true\n #endif\n #ifndef __glibcpp_long_long_bits\n-#define __glibcpp_long_long_bits 64\n+#  define __glibcpp_long_long_bits 64\n #endif\n #ifndef __glibcpp_float_bits\n-#define __glibcpp_float_bits 32\n+#  define __glibcpp_float_bits 32\n #endif\n #ifndef __glibcpp_double_bits\n-#define __glibcpp_double_bits 64\n+#  define __glibcpp_double_bits 64\n #endif\n #ifndef __glibcpp_long_double_bits\n-#define __glibcpp_long_double_bits 128\n+#  define __glibcpp_long_double_bits 128\n #endif\n \n #ifndef __glibcpp_char_traps\n-#define __glibcpp_char_traps true\n+#  define __glibcpp_char_traps true\n #endif\n #ifndef __glibcpp_short_traps\n-#define __glibcpp_short_traps true\n+#  define __glibcpp_short_traps true\n #endif\n #ifndef __glibcpp_int_traps\n-#define __glibcpp_int_traps true\n+#  define __glibcpp_int_traps true\n #endif\n #ifndef __glibcpp_long_traps\n-#define __glibcpp_long_traps true\n+#  define __glibcpp_long_traps true\n #endif\n #ifndef __glibcpp_wchar_t_traps\n-#define __glibcpp_wchar_t_traps true\n+#  define __glibcpp_wchar_t_traps true\n #endif\n #ifndef __glibcpp_long_long_traps\n-#define __glibcpp_long_long_traps true\n+#  define __glibcpp_long_long_traps true\n #endif\n \n // You should not need to define any macros below this point, unless\n@@ -234,7 +234,7 @@\n //     __glibcpp_bool_digits  __glibcpp_int_traps __glibcpp_long_traps\n \n #ifndef __glibcpp_bool_digits\n-#define __glibcpp_bool_digits 1\n+#  define __glibcpp_bool_digits 1\n #endif\n \n // char.\n@@ -243,106 +243,106 @@\n #define __glibcpp_signed_char_traps true\n #define __glibcpp_unsigned_char_traps true\n #ifndef __glibcpp_char_is_modulo\n-#define __glibcpp_char_is_modulo true\n+#  define __glibcpp_char_is_modulo true\n #endif\n #ifndef __glibcpp_signed_char_is_modulo\n-#define __glibcpp_signed_char_is_modulo true\n+#  define __glibcpp_signed_char_is_modulo true\n #endif\n #if __glibcpp_char_bits == 8\n-#define __glibcpp_signed_char_min __glibcpp_s8_min\n-#define __glibcpp_signed_char_max __glibcpp_s8_max\n-#define __glibcpp_signed_char_digits __glibcpp_s8_digits\n-#define __glibcpp_signed_char_digits10 __glibcpp_s8_digits10\n-#define __glibcpp_unsigned_char_min __glibcpp_u8_min\n-#define __glibcpp_unsigned_char_max __glibcpp_u8_max\n-#define __glibcpp_unsigned_char_digits __glibcpp_u8_digits\n-#define __glibcpp_unsigned_char_digits10 __glibcpp_u8_digits10\n+#  define __glibcpp_signed_char_min __glibcpp_s8_min\n+#  define __glibcpp_signed_char_max __glibcpp_s8_max\n+#  define __glibcpp_signed_char_digits __glibcpp_s8_digits\n+#  define __glibcpp_signed_char_digits10 __glibcpp_s8_digits10\n+#  define __glibcpp_unsigned_char_min __glibcpp_u8_min\n+#  define __glibcpp_unsigned_char_max __glibcpp_u8_max\n+#  define __glibcpp_unsigned_char_digits __glibcpp_u8_digits\n+#  define __glibcpp_unsigned_char_digits10 __glibcpp_u8_digits10\n #elif __glibcpp_char_bits == 16\n-#define __glibcpp_signed_char_min __glibcpp_s16_min\n-#define __glibcpp_signed_char_max __glibcpp_s16_max\n-#define __glibcpp_signed_char_digits __glibcpp_s16_digits\n-#define __glibcpp_signed_char_digits10 __glibcpp_s16_digits10\n-#define __glibcpp_unsigned_char_min __glibcpp_u16_min\n-#define __glibcpp_unsigned_char_max __glibcpp_u16_max\n-#define __glibcpp_unsigned_char_digits __glibcpp_u16_digits\n-#define __glibcpp_unsigned_char_digits10 __glibcpp_u16_digits10\n+#  define __glibcpp_signed_char_min __glibcpp_s16_min\n+#  define __glibcpp_signed_char_max __glibcpp_s16_max\n+#  define __glibcpp_signed_char_digits __glibcpp_s16_digits\n+#  define __glibcpp_signed_char_digits10 __glibcpp_s16_digits10\n+#  define __glibcpp_unsigned_char_min __glibcpp_u16_min\n+#  define __glibcpp_unsigned_char_max __glibcpp_u16_max\n+#  define __glibcpp_unsigned_char_digits __glibcpp_u16_digits\n+#  define __glibcpp_unsigned_char_digits10 __glibcpp_u16_digits10\n #elif __glibcpp_char_bits == 32\n-#define __glibcpp_signed_char_min (signed char)__glibcpp_s32_min\n-#define __glibcpp_signed_char_max (signed char)__glibcpp_s32_max\n-#define __glibcpp_signed_char_digits __glibcpp_s32_digits\n-#define __glibcpp_signed_char_digits10 __glibcpp_s32_digits10\n-#define __glibcpp_unsigned_char_min (unsigned char)__glibcpp_u32_min\n-#define __glibcpp_unsigned_char_max (unsigned char)__glibcpp_u32_max\n-#define __glibcpp_unsigned_char_digits __glibcpp_u32_digits\n-#define __glibcpp_unsigned_char_digits10 __glibcpp_u32_digits10\n+#  define __glibcpp_signed_char_min (signed char)__glibcpp_s32_min\n+#  define __glibcpp_signed_char_max (signed char)__glibcpp_s32_max\n+#  define __glibcpp_signed_char_digits __glibcpp_s32_digits\n+#  define __glibcpp_signed_char_digits10 __glibcpp_s32_digits10\n+#  define __glibcpp_unsigned_char_min (unsigned char)__glibcpp_u32_min\n+#  define __glibcpp_unsigned_char_max (unsigned char)__glibcpp_u32_max\n+#  define __glibcpp_unsigned_char_digits __glibcpp_u32_digits\n+#  define __glibcpp_unsigned_char_digits10 __glibcpp_u32_digits10\n #elif __glibcpp_char_bits == 64\n-#define __glibcpp_signed_char_min (signed char)__glibcpp_s64_min\n-#define __glibcpp_signed_char_max (signed char)__glibcpp_s64_max\n-#define __glibcpp_signed_char_digits __glibcpp_s64_digits\n-#define __glibcpp_signed_char_digits10 __glibcpp_s64_digits10\n-#define __glibcpp_unsigned_char_min (unsigned char)__glibcpp_u64_min\n-#define __glibcpp_unsigned_char_max (unsigned char)__glibcpp_u64_max\n-#define __glibcpp_unsigned_char_digits __glibcpp_u64_digits\n-#define __glibcpp_unsigned_char_digits10 __glibcpp_u64_digits10\n+#  define __glibcpp_signed_char_min (signed char)__glibcpp_s64_min\n+#  define __glibcpp_signed_char_max (signed char)__glibcpp_s64_max\n+#  define __glibcpp_signed_char_digits __glibcpp_s64_digits\n+#  define __glibcpp_signed_char_digits10 __glibcpp_s64_digits10\n+#  define __glibcpp_unsigned_char_min (unsigned char)__glibcpp_u64_min\n+#  define __glibcpp_unsigned_char_max (unsigned char)__glibcpp_u64_max\n+#  define __glibcpp_unsigned_char_digits __glibcpp_u64_digits\n+#  define __glibcpp_unsigned_char_digits10 __glibcpp_u64_digits10\n #else\n // You must define these macros in the configuration file.\n #endif\n \n #if __glibcpp_plain_char_is_signed\n-#define __glibcpp_char_min (char)__glibcpp_signed_char_min\n-#define __glibcpp_char_max (char)__glibcpp_signed_char_max\n-#define __glibcpp_char_digits __glibcpp_signed_char_digits\n-#define __glibcpp_char_digits10 __glibcpp_signed_char_digits\n+#  define __glibcpp_char_min (char)__glibcpp_signed_char_min\n+#  define __glibcpp_char_max (char)__glibcpp_signed_char_max\n+#  define __glibcpp_char_digits __glibcpp_signed_char_digits\n+#  define __glibcpp_char_digits10 __glibcpp_signed_char_digits\n #else\n-#define __glibcpp_char_min (char)__glibcpp_unsigned_char_min\n-#define __glibcpp_char_max (char)__glibcpp_unsigned_char_max\n-#define __glibcpp_char_digits __glibcpp_unsigned_char_digits\n-#define __glibcpp_char_digits10 __glibcpp_unsigned_char_digits\n+#  define __glibcpp_char_min (char)__glibcpp_unsigned_char_min\n+#  define __glibcpp_char_max (char)__glibcpp_unsigned_char_max\n+#  define __glibcpp_char_digits __glibcpp_unsigned_char_digits\n+#  define __glibcpp_char_digits10 __glibcpp_unsigned_char_digits\n #endif\n \n // short\n \n #define __glibcpp_signed_short_traps true\n #define __glibcpp_unsigned_short_traps true\n #ifndef __glibcpp_signed_short_is_modulo\n-#define __glibcpp_signed_short_is_modulo true\n+#  define __glibcpp_signed_short_is_modulo true\n #endif\n #if __glibcpp_short_bits == 8\n-#define __glibcpp_signed_short_min __glibcpp_s8_min\n-#define __glibcpp_signed_short_max __glibcpp_s8_max\n-#define __glibcpp_signed_short_digits __glibcpp_s8_digits\n-#define __glibcpp_signed_short_digits10 __glibcpp_s8_digits10\n-#define __glibcpp_unsigned_short_min __glibcpp_u8_min\n-#define __glibcpp_unsigned_short_max __glibcpp_u8_max\n-#define __glibcpp_unsigned_short_digits __glibcpp_u8_digits\n-#define __glibcpp_unsigned_short_digits10 __glibcpp_u8_digits10\n+#  define __glibcpp_signed_short_min __glibcpp_s8_min\n+#  define __glibcpp_signed_short_max __glibcpp_s8_max\n+#  define __glibcpp_signed_short_digits __glibcpp_s8_digits\n+#  define __glibcpp_signed_short_digits10 __glibcpp_s8_digits10\n+#  define __glibcpp_unsigned_short_min __glibcpp_u8_min\n+#  define __glibcpp_unsigned_short_max __glibcpp_u8_max\n+#  define __glibcpp_unsigned_short_digits __glibcpp_u8_digits\n+#  define __glibcpp_unsigned_short_digits10 __glibcpp_u8_digits10\n #elif __glibcpp_short_bits == 16\n-#define __glibcpp_signed_short_min __glibcpp_s16_min\n-#define __glibcpp_signed_short_max __glibcpp_s16_max\n-#define __glibcpp_signed_short_digits __glibcpp_s16_digits\n-#define __glibcpp_signed_short_digits10 __glibcpp_s16_digits10\n-#define __glibcpp_unsigned_short_min __glibcpp_u16_min\n-#define __glibcpp_unsigned_short_max __glibcpp_u16_max\n-#define __glibcpp_unsigned_short_digits __glibcpp_u16_digits\n-#define __glibcpp_unsigned_short_digits10 __glibcpp_u16_digits10\n+#  define __glibcpp_signed_short_min __glibcpp_s16_min\n+#  define __glibcpp_signed_short_max __glibcpp_s16_max\n+#  define __glibcpp_signed_short_digits __glibcpp_s16_digits\n+#  define __glibcpp_signed_short_digits10 __glibcpp_s16_digits10\n+#  define __glibcpp_unsigned_short_min __glibcpp_u16_min\n+#  define __glibcpp_unsigned_short_max __glibcpp_u16_max\n+#  define __glibcpp_unsigned_short_digits __glibcpp_u16_digits\n+#  define __glibcpp_unsigned_short_digits10 __glibcpp_u16_digits10\n #elif __glibcpp_short_bits == 32\n-#define __glibcpp_signed_short_min (short)__glibcpp_s32_min\n-#define __glibcpp_signed_short_max (short)__glibcpp_s32_max\n-#define __glibcpp_signed_short_digits __glibcpp_s32_digits\n-#define __glibcpp_signed_short_digits10 __glibcpp_s32_digits10\n-#define __glibcpp_unsigned_short_min (unsigned short)__glibcpp_u32_min\n-#define __glibcpp_unsigned_short_max (unsigned short)__glibcpp_u32_max\n-#define __glibcpp_unsigned_short_digits __glibcpp_u32_digits\n-#define __glibcpp_unsigned_short_digits10 __glibcpp_u32_digits10\n+#  define __glibcpp_signed_short_min (short)__glibcpp_s32_min\n+#  define __glibcpp_signed_short_max (short)__glibcpp_s32_max\n+#  define __glibcpp_signed_short_digits __glibcpp_s32_digits\n+#  define __glibcpp_signed_short_digits10 __glibcpp_s32_digits10\n+#  define __glibcpp_unsigned_short_min (unsigned short)__glibcpp_u32_min\n+#  define __glibcpp_unsigned_short_max (unsigned short)__glibcpp_u32_max\n+#  define __glibcpp_unsigned_short_digits __glibcpp_u32_digits\n+#  define __glibcpp_unsigned_short_digits10 __glibcpp_u32_digits10\n #elif __glibcpp_short_bits == 64\n-#define __glibcpp_signed_short_min (short)__glibcpp_s64_min\n-#define __glibcpp_signed_short_max (short)__glibcpp_s64_max\n-#define __glibcpp_signed_short_digits __glibcpp_s64_digits\n-#define __glibcpp_signed_short_digits10 __glibcpp_s64_digits10\n-#define __glibcpp_unsigned_short_min (unsigned short)__glibcpp_u64_min\n-#define __glibcpp_unsigned_short_max (unsigned short)__glibcpp_u64_max\n-#define __glibcpp_unsigned_short_digits __glibcpp_u64_digits\n-#define __glibcpp_unsigned_short_digits10 __glibcpp_u64_digits10\n+#  define __glibcpp_signed_short_min (short)__glibcpp_s64_min\n+#  define __glibcpp_signed_short_max (short)__glibcpp_s64_max\n+#  define __glibcpp_signed_short_digits __glibcpp_s64_digits\n+#  define __glibcpp_signed_short_digits10 __glibcpp_s64_digits10\n+#  define __glibcpp_unsigned_short_min (unsigned short)__glibcpp_u64_min\n+#  define __glibcpp_unsigned_short_max (unsigned short)__glibcpp_u64_max\n+#  define __glibcpp_unsigned_short_digits __glibcpp_u64_digits\n+#  define __glibcpp_unsigned_short_digits10 __glibcpp_u64_digits10\n #else\n // You must define these macros in the configuration file.\n #endif\n@@ -352,44 +352,44 @@\n #define __glibcpp_signed_int_traps true\n #define __glibcpp_unsigned_int_traps true\n #ifndef __glibcpp_signed_int_is_modulo\n-#define __glibcpp_signed_int_is_modulo true\n+#  define __glibcpp_signed_int_is_modulo true\n #endif\n #if __glibcpp_int_bits == 8\n-#define __glibcpp_signed_int_min __glibcpp_s8_min\n-#define __glibcpp_signed_int_max __glibcpp_s8_max\n-#define __glibcpp_signed_int_digits __glibcpp_s8_digits\n-#define __glibcpp_signed_int_digits10 __glibcpp_s8_digits10\n-#define __glibcpp_unsigned_int_min __glibcpp_u8_min\n-#define __glibcpp_unsigned_int_max __glibcpp_u8_max\n-#define __glibcpp_unsigned_int_digits __glibcpp_u8_digits\n-#define __glibcpp_unsigned_int_digits10 __glibcpp_u8_digits10\n+#  define __glibcpp_signed_int_min __glibcpp_s8_min\n+#  define __glibcpp_signed_int_max __glibcpp_s8_max\n+#  define __glibcpp_signed_int_digits __glibcpp_s8_digits\n+#  define __glibcpp_signed_int_digits10 __glibcpp_s8_digits10\n+#  define __glibcpp_unsigned_int_min __glibcpp_u8_min\n+#  define __glibcpp_unsigned_int_max __glibcpp_u8_max\n+#  define __glibcpp_unsigned_int_digits __glibcpp_u8_digits\n+#  define __glibcpp_unsigned_int_digits10 __glibcpp_u8_digits10\n #elif __glibcpp_int_bits == 16\n-#define __glibcpp_signed_int_min __glibcpp_s16_min\n-#define __glibcpp_signed_int_max __glibcpp_s16_max\n-#define __glibcpp_signed_int_digits __glibcpp_s16_digits\n-#define __glibcpp_signed_int_digits10 __glibcpp_s16_digits10\n-#define __glibcpp_unsigned_int_min __glibcpp_u16_min\n-#define __glibcpp_unsigned_int_max __glibcpp_u16_max\n-#define __glibcpp_unsigned_int_digits __glibcpp_u16_digits\n-#define __glibcpp_unsigned_int_digits10 __glibcpp_u16_digits10\n+#  define __glibcpp_signed_int_min __glibcpp_s16_min\n+#  define __glibcpp_signed_int_max __glibcpp_s16_max\n+#  define __glibcpp_signed_int_digits __glibcpp_s16_digits\n+#  define __glibcpp_signed_int_digits10 __glibcpp_s16_digits10\n+#  define __glibcpp_unsigned_int_min __glibcpp_u16_min\n+#  define __glibcpp_unsigned_int_max __glibcpp_u16_max\n+#  define __glibcpp_unsigned_int_digits __glibcpp_u16_digits\n+#  define __glibcpp_unsigned_int_digits10 __glibcpp_u16_digits10\n #elif __glibcpp_int_bits == 32\n-#define __glibcpp_signed_int_min (int)__glibcpp_s32_min\n-#define __glibcpp_signed_int_max (int)__glibcpp_s32_max\n-#define __glibcpp_signed_int_digits __glibcpp_s32_digits\n-#define __glibcpp_signed_int_digits10 __glibcpp_s32_digits10\n-#define __glibcpp_unsigned_int_min (unsigned)__glibcpp_u32_min\n-#define __glibcpp_unsigned_int_max (unsigned)__glibcpp_u32_max\n-#define __glibcpp_unsigned_int_digits __glibcpp_u32_digits\n-#define __glibcpp_unsigned_int_digits10 __glibcpp_u32_digits10\n+#  define __glibcpp_signed_int_min (int)__glibcpp_s32_min\n+#  define __glibcpp_signed_int_max (int)__glibcpp_s32_max\n+#  define __glibcpp_signed_int_digits __glibcpp_s32_digits\n+#  define __glibcpp_signed_int_digits10 __glibcpp_s32_digits10\n+#  define __glibcpp_unsigned_int_min (unsigned)__glibcpp_u32_min\n+#  define __glibcpp_unsigned_int_max (unsigned)__glibcpp_u32_max\n+#  define __glibcpp_unsigned_int_digits __glibcpp_u32_digits\n+#  define __glibcpp_unsigned_int_digits10 __glibcpp_u32_digits10\n #elif __glibcpp_int_bits == 64\n-#define __glibcpp_signed_int_min (int)__glibcpp_s64_min\n-#define __glibcpp_signed_int_max (int)__glibcpp_s64_max\n-#define __glibcpp_signed_int_digits __glibcpp_s64_digits\n-#define __glibcpp_signed_int_digits10 __glibcpp_s64_digits10\n-#define __glibcpp_unsigned_int_min (unsigned)__glibcpp_u64_min\n-#define __glibcpp_unsigned_int_max (unsigned)__glibcpp_u64_max\n-#define __glibcpp_unsigned_int_digits __glibcpp_u64_digits\n-#define __glibcpp_unsigned_int_digits10 __glibcpp_u64_digits10\n+#  define __glibcpp_signed_int_min (int)__glibcpp_s64_min\n+#  define __glibcpp_signed_int_max (int)__glibcpp_s64_max\n+#  define __glibcpp_signed_int_digits __glibcpp_s64_digits\n+#  define __glibcpp_signed_int_digits10 __glibcpp_s64_digits10\n+#  define __glibcpp_unsigned_int_min (unsigned)__glibcpp_u64_min\n+#  define __glibcpp_unsigned_int_max (unsigned)__glibcpp_u64_max\n+#  define __glibcpp_unsigned_int_digits __glibcpp_u64_digits\n+#  define __glibcpp_unsigned_int_digits10 __glibcpp_u64_digits10\n #else\n // You must define these macros in the configuration file.\n #endif\n@@ -399,44 +399,44 @@\n #define __glibcpp_signed_long_traps true\n #define __glibcpp_unsigned_long_traps true\n #ifndef __glibcpp_signed_long_is_modulo\n-#define __glibcpp_signed_long_is_modulo true\n+#  define __glibcpp_signed_long_is_modulo true\n #endif\n #if __glibcpp_long_bits == 8\n-#define __glibcpp_signed_long_min __glibcpp_s8_min\n-#define __glibcpp_signed_long_max __glibcpp_s8_max\n-#define __glibcpp_signed_long_digits __glibcpp_s8_digits\n-#define __glibcpp_signed_long_digits10 __glibcpp_s8_digits10\n-#define __glibcpp_unsigned_long_min __glibcpp_u8_min\n-#define __glibcpp_unsigned_long_max __glibcpp_u8_max\n-#define __glibcpp_unsigned_long_digits __glibcpp_u8_digits\n-#define __glibcpp_unsigned_long_digits10 __glibcpp_u8_digits10\n+#  define __glibcpp_signed_long_min __glibcpp_s8_min\n+#  define __glibcpp_signed_long_max __glibcpp_s8_max\n+#  define __glibcpp_signed_long_digits __glibcpp_s8_digits\n+#  define __glibcpp_signed_long_digits10 __glibcpp_s8_digits10\n+#  define __glibcpp_unsigned_long_min __glibcpp_u8_min\n+#  define __glibcpp_unsigned_long_max __glibcpp_u8_max\n+#  define __glibcpp_unsigned_long_digits __glibcpp_u8_digits\n+#  define __glibcpp_unsigned_long_digits10 __glibcpp_u8_digits10\n #elif __glibcpp_long_bits == 16\n-#define __glibcpp_signed_long_min __glibcpp_s16_min\n-#define __glibcpp_signed_long_max __glibcpp_s16_max\n-#define __glibcpp_signed_long_digits __glibcpp_s16_digits\n-#define __glibcpp_signed_long_digits10 __glibcpp_s16_digits10\n-#define __glibcpp_unsigned_long_min __glibcpp_u16_min\n-#define __glibcpp_unsigned_long_max __glibcpp_u16_max\n-#define __glibcpp_unsigned_long_digits __glibcpp_u16_digits\n-#define __glibcpp_unsigned_long_digits10 __glibcpp_u16_digits10\n+#  define __glibcpp_signed_long_min __glibcpp_s16_min\n+#  define __glibcpp_signed_long_max __glibcpp_s16_max\n+#  define __glibcpp_signed_long_digits __glibcpp_s16_digits\n+#  define __glibcpp_signed_long_digits10 __glibcpp_s16_digits10\n+#  define __glibcpp_unsigned_long_min __glibcpp_u16_min\n+#  define __glibcpp_unsigned_long_max __glibcpp_u16_max\n+#  define __glibcpp_unsigned_long_digits __glibcpp_u16_digits\n+#  define __glibcpp_unsigned_long_digits10 __glibcpp_u16_digits10\n #elif __glibcpp_long_bits == 32\n-#define __glibcpp_signed_long_min __glibcpp_s32_min\n-#define __glibcpp_signed_long_max __glibcpp_s32_max\n-#define __glibcpp_signed_long_digits __glibcpp_s32_digits\n-#define __glibcpp_signed_long_digits10 __glibcpp_s32_digits10\n-#define __glibcpp_unsigned_long_min __glibcpp_u32_min\n-#define __glibcpp_unsigned_long_max __glibcpp_u32_max\n-#define __glibcpp_unsigned_long_digits __glibcpp_u32_digits\n-#define __glibcpp_unsigned_long_digits10 __glibcpp_u32_digits10\n+#  define __glibcpp_signed_long_min __glibcpp_s32_min\n+#  define __glibcpp_signed_long_max __glibcpp_s32_max\n+#  define __glibcpp_signed_long_digits __glibcpp_s32_digits\n+#  define __glibcpp_signed_long_digits10 __glibcpp_s32_digits10\n+#  define __glibcpp_unsigned_long_min __glibcpp_u32_min\n+#  define __glibcpp_unsigned_long_max __glibcpp_u32_max\n+#  define __glibcpp_unsigned_long_digits __glibcpp_u32_digits\n+#  define __glibcpp_unsigned_long_digits10 __glibcpp_u32_digits10\n #elif __glibcpp_long_bits == 64\n-#define __glibcpp_signed_long_min (long)__glibcpp_s64_min\n-#define __glibcpp_signed_long_max (long)__glibcpp_s64_max\n-#define __glibcpp_signed_long_digits __glibcpp_s64_digits\n-#define __glibcpp_signed_long_digits10 __glibcpp_s64_digits10\n-#define __glibcpp_unsigned_long_min (unsigned long)__glibcpp_u64_min\n-#define __glibcpp_unsigned_long_max (unsigned long)__glibcpp_u64_max\n-#define __glibcpp_unsigned_long_digits __glibcpp_u64_digits\n-#define __glibcpp_unsigned_long_digits10 __glibcpp_u64_digits10\n+#  define __glibcpp_signed_long_min (long)__glibcpp_s64_min\n+#  define __glibcpp_signed_long_max (long)__glibcpp_s64_max\n+#  define __glibcpp_signed_long_digits __glibcpp_s64_digits\n+#  define __glibcpp_signed_long_digits10 __glibcpp_s64_digits10\n+#  define __glibcpp_unsigned_long_min (unsigned long)__glibcpp_u64_min\n+#  define __glibcpp_unsigned_long_max (unsigned long)__glibcpp_u64_max\n+#  define __glibcpp_unsigned_long_digits __glibcpp_u64_digits\n+#  define __glibcpp_unsigned_long_digits10 __glibcpp_u64_digits10\n #else\n // You must define these macros in the configuration file.\n #endif\n@@ -446,46 +446,46 @@\n #define __glibcpp_signed_long_long_traps true\n #define __glibcpp_signed_long_long_traps true\n #ifndef __glibcpp_signed_long_long_is_modulo\n-#define __glibcpp_signed_long_long_is_modulo true\n+#  define __glibcpp_signed_long_long_is_modulo true\n #endif\n #if __glibcpp_long_long_bits == 8\n-#define __glibcpp_signed_long_long_min __glibcpp_s8_min\n-#define __glibcpp_signed_long_long_max __glibcpp_s8_max\n-#define __glibcpp_signed_long_long_digits __glibcpp_s8_digits\n-#define __glibcpp_signed_long_long_digits10 __glibcpp_s8_digits10\n-#define __glibcpp_unsigned_long_long_min __glibcpp_u8_min\n-#define __glibcpp_unsigned_long_long_max __glibcpp_u8_max\n-#define __glibcpp_unsigned_long_long_digits __glibcpp_u8_digits\n-#define __glibcpp_unsigned_long_long_digits10 __glibcpp_u8_digits10\n+#  define __glibcpp_signed_long_long_min __glibcpp_s8_min\n+#  define __glibcpp_signed_long_long_max __glibcpp_s8_max\n+#  define __glibcpp_signed_long_long_digits __glibcpp_s8_digits\n+#  define __glibcpp_signed_long_long_digits10 __glibcpp_s8_digits10\n+#  define __glibcpp_unsigned_long_long_min __glibcpp_u8_min\n+#  define __glibcpp_unsigned_long_long_max __glibcpp_u8_max\n+#  define __glibcpp_unsigned_long_long_digits __glibcpp_u8_digits\n+#  define __glibcpp_unsigned_long_long_digits10 __glibcpp_u8_digits10\n #elif __glibcpp_long_long_bits == 16\n-#define __glibcpp_signed_long_long_min __glibcpp_s16_min\n-#define __glibcpp_signed_long_long_max __glibcpp_s16_max\n-#define __glibcpp_signed_long_long_digits __glibcpp_s16_digits\n-#define __glibcpp_signed_long_long_digits10 __glibcpp_s16_digits10\n-#define __glibcpp_unsigned_long_long_min __glibcpp_u16_min\n-#define __glibcpp_unsigned_long_long_max __glibcpp_u16_max\n-#define __glibcpp_unsigned_long_long_digits __glibcpp_u16_digits\n-#define __glibcpp_unsigned_long_long_digits10 __glibcpp_u16_digits10\n+#  define __glibcpp_signed_long_long_min __glibcpp_s16_min\n+#  define __glibcpp_signed_long_long_max __glibcpp_s16_max\n+#  define __glibcpp_signed_long_long_digits __glibcpp_s16_digits\n+#  define __glibcpp_signed_long_long_digits10 __glibcpp_s16_digits10\n+#  define __glibcpp_unsigned_long_long_min __glibcpp_u16_min\n+#  define __glibcpp_unsigned_long_long_max __glibcpp_u16_max\n+#  define __glibcpp_unsigned_long_long_digits __glibcpp_u16_digits\n+#  define __glibcpp_unsigned_long_long_digits10 __glibcpp_u16_digits10\n #elif __glibcpp_long_long_bits == 32\n-#define __glibcpp_signed_long_long_min __glibcpp_s32_min\n-#define __glibcpp_signed_long_long_max __glibcpp_s32_max\n-#define __glibcpp_signed_long_long_digits __glibcpp_s32_digits\n-#define __glibcpp_signed_long_long_digits10 __glibcpp_s32_digits10\n-#define __glibcpp_unsigned_long_long_min __glibcpp_u32_min\n-#define __glibcpp_unsigned_long_long_max __glibcpp_u32_max\n-#define __glibcpp_unsigned_long_long_digits __glibcpp_u32_digits\n-#define __glibcpp_unsigned_long_long_digits10 __glibcpp_u32_digits10\n+#  define __glibcpp_signed_long_long_min __glibcpp_s32_min\n+#  define __glibcpp_signed_long_long_max __glibcpp_s32_max\n+#  define __glibcpp_signed_long_long_digits __glibcpp_s32_digits\n+#  define __glibcpp_signed_long_long_digits10 __glibcpp_s32_digits10\n+#  define __glibcpp_unsigned_long_long_min __glibcpp_u32_min\n+#  define __glibcpp_unsigned_long_long_max __glibcpp_u32_max\n+#  define __glibcpp_unsigned_long_long_digits __glibcpp_u32_digits\n+#  define __glibcpp_unsigned_long_long_digits10 __glibcpp_u32_digits10\n #elif __glibcpp_long_long_bits == 64\n-#define __glibcpp_signed_long_long_min __glibcpp_s64_min\n-#define __glibcpp_signed_long_long_max __glibcpp_s64_max\n-#define __glibcpp_signed_long_long_digits __glibcpp_s64_digits\n-#define __glibcpp_signed_long_long_digits10 __glibcpp_s64_digits10\n-#define __glibcpp_signed_long_long_traps true\n-#define __glibcpp_unsigned_long_long_min __glibcpp_u64_min\n-#define __glibcpp_unsigned_long_long_max __glibcpp_u64_max\n-#define __glibcpp_unsigned_long_long_digits __glibcpp_u64_digits\n-#define __glibcpp_unsigned_long_long_digits10 __glibcpp_u64_digits10\n-#define __glibcpp_unsigned_long_long_traps true\n+#  define __glibcpp_signed_long_long_min __glibcpp_s64_min\n+#  define __glibcpp_signed_long_long_max __glibcpp_s64_max\n+#  define __glibcpp_signed_long_long_digits __glibcpp_s64_digits\n+#  define __glibcpp_signed_long_long_digits10 __glibcpp_s64_digits10\n+#  define __glibcpp_signed_long_long_traps true\n+#  define __glibcpp_unsigned_long_long_min __glibcpp_u64_min\n+#  define __glibcpp_unsigned_long_long_max __glibcpp_u64_max\n+#  define __glibcpp_unsigned_long_long_digits __glibcpp_u64_digits\n+#  define __glibcpp_unsigned_long_long_digits10 __glibcpp_u64_digits10\n+#  define __glibcpp_unsigned_long_long_traps true\n #else\n // You must define these macros in the configuration file.\n #endif\n@@ -494,393 +494,393 @@\n \n #define __glibcpp_wchar_t_traps true\n #ifndef __glibcpp_wchar_t_is_modulo\n-#define __glibcpp_wchar_t_is_modulo true\n+#  define __glibcpp_wchar_t_is_modulo true\n #endif\n #if __glibcpp_wchar_t_is_signed\n-#if __glibcpp_wchar_t_bits == 8\n-#define __glibcpp_wchar_t_min __glibcpp_s8_min\n-#define __glibcpp_wchar_t_max __glibcpp_s8_max\n-#define __glibcpp_wchar_t_digits __glibcpp_s8_digits\n-#define __glibcpp_wchar_t_digits10 __glibcpp_s8_digits10\n-#elif __glibcpp_wchar_t_bits == 16\n-#define __glibcpp_wchar_t_min __glibcpp_s16_min\n-#define __glibcpp_wchar_t_max __glibcpp_s16_max\n-#define __glibcpp_wchar_t_digits __glibcpp_s16_digits\n-#define __glibcpp_wchar_t_digits10 __glibcpp_s16_digits10\n-#elif __glibcpp_wchar_t_bits == 32\n-#define __glibcpp_wchar_t_min (wchar_t)__glibcpp_s32_min\n-#define __glibcpp_wchar_t_max (wchar_t)__glibcpp_s32_max\n-#define __glibcpp_wchar_t_digits __glibcpp_s32_digits\n-#define __glibcpp_wchar_t_digits10 __glibcpp_s32_digits10\n-#elif __glibcpp_wchar_t_bits == 64\n-#define __glibcpp_wchar_t_min (wchar_t)__glibcpp_s64_min\n-#define __glibcpp_wchar_t_max (wchar_t)__glibcpp_s64_max\n-#define __glibcpp_wchar_t_digits __glibcpp_s64_digits\n-#define __glibcpp_wchar_t_digits10 __glibcpp_s64_digits10\n-#else\n+#  if __glibcpp_wchar_t_bits == 8\n+#    define __glibcpp_wchar_t_min __glibcpp_s8_min\n+#    define __glibcpp_wchar_t_max __glibcpp_s8_max\n+#    define __glibcpp_wchar_t_digits __glibcpp_s8_digits\n+#    define __glibcpp_wchar_t_digits10 __glibcpp_s8_digits10\n+#  elif __glibcpp_wchar_t_bits == 16\n+#    define __glibcpp_wchar_t_min __glibcpp_s16_min\n+#    define __glibcpp_wchar_t_max __glibcpp_s16_max\n+#    define __glibcpp_wchar_t_digits __glibcpp_s16_digits\n+#    define __glibcpp_wchar_t_digits10 __glibcpp_s16_digits10\n+#  elif __glibcpp_wchar_t_bits == 32\n+#    define __glibcpp_wchar_t_min (wchar_t)__glibcpp_s32_min\n+#    define __glibcpp_wchar_t_max (wchar_t)__glibcpp_s32_max\n+#    define __glibcpp_wchar_t_digits __glibcpp_s32_digits\n+#    define __glibcpp_wchar_t_digits10 __glibcpp_s32_digits10\n+#  elif __glibcpp_wchar_t_bits == 64\n+#    define __glibcpp_wchar_t_min (wchar_t)__glibcpp_s64_min\n+#    define __glibcpp_wchar_t_max (wchar_t)__glibcpp_s64_max\n+#    define __glibcpp_wchar_t_digits __glibcpp_s64_digits\n+#    define __glibcpp_wchar_t_digits10 __glibcpp_s64_digits10\n+#  else\n // You must define these macros in the configuration file.\n-#endif\n-#else\n-#if __glibcpp_wchar_t_bits == 8\n-#define __glibcpp_wchar_t_min __glibcpp_u8_min\n-#define __glibcpp_wchar_t_max __glibcpp_u8_max\n-#define __glibcpp_wchar_t_digits __glibcpp_u8_digits\n-#define __glibcpp_wchar_t_digits10 __glibcpp_u8_digits10\n-#elif __glibcpp_wchar_t_bits == 16\n-#define __glibcpp_wchar_t_min __glibcpp_u16_min\n-#define __glibcpp_wchar_t_max __glibcpp_u16_max\n-#define __glibcpp_wchar_t_digits __glibcpp_u16_digits\n-#define __glibcpp_wchar_t_digits10 __glibcpp_u16_digits10\n-#elif __glibcpp_wchar_t_bits == 32\n-#define __glibcpp_wchar_t_min (wchar_t)__glibcpp_u32_min\n-#define __glibcpp_wchar_t_max (wchar_t)__glibcpp_u32_max\n-#define __glibcpp_wchar_t_digits __glibcpp_u32_digits\n-#define __glibcpp_wchar_t_digits10 __glibcpp_u32_digits10\n-#elif __glibcpp_wchar_t_bits == 64\n-#define __glibcpp_wchar_t_min (wchar_t)__glibcpp_u64_min\n-#define __glibcpp_wchar_t_max (wchar_t)__glibcpp_u64_max\n-#define __glibcpp_wchar_t_digits __glibcpp_u64_digits\n-#define __glibcpp_wchar_t_digits10 __glibcpp_u64_digits10\n+#  endif\n #else\n+#  if __glibcpp_wchar_t_bits == 8\n+#    define __glibcpp_wchar_t_min __glibcpp_u8_min\n+#    define __glibcpp_wchar_t_max __glibcpp_u8_max\n+#    define __glibcpp_wchar_t_digits __glibcpp_u8_digits\n+#    define __glibcpp_wchar_t_digits10 __glibcpp_u8_digits10\n+#  elif __glibcpp_wchar_t_bits == 16\n+#    define __glibcpp_wchar_t_min __glibcpp_u16_min\n+#    define __glibcpp_wchar_t_max __glibcpp_u16_max\n+#    define __glibcpp_wchar_t_digits __glibcpp_u16_digits\n+#    define __glibcpp_wchar_t_digits10 __glibcpp_u16_digits10\n+#  elif __glibcpp_wchar_t_bits == 32\n+#    define __glibcpp_wchar_t_min (wchar_t)__glibcpp_u32_min\n+#    define __glibcpp_wchar_t_max (wchar_t)__glibcpp_u32_max\n+#    define __glibcpp_wchar_t_digits __glibcpp_u32_digits\n+#    define __glibcpp_wchar_t_digits10 __glibcpp_u32_digits10\n+#  elif __glibcpp_wchar_t_bits == 64\n+#    define __glibcpp_wchar_t_min (wchar_t)__glibcpp_u64_min\n+#    define __glibcpp_wchar_t_max (wchar_t)__glibcpp_u64_max\n+#    define __glibcpp_wchar_t_digits __glibcpp_u64_digits\n+#    define __glibcpp_wchar_t_digits10 __glibcpp_u64_digits10\n+#  else\n // You must define these macros in the configuration file.\n-#endif\n+#  endif\n #endif\n \n // float\n //\n \n #if __glibcpp_float_bits == 32\n-#define __glibcpp_float_min __glibcpp_f32_min\n-#define __glibcpp_float_max __glibcpp_f32_max\n-#define __glibcpp_float_digits __glibcpp_f32_digits\n-#define __glibcpp_float_digits10 __glibcpp_f32_digits10\n-#define __glibcpp_float_radix __glibcpp_f32_radix\n-#define __glibcpp_float_epsilon __glibcpp_f32_epsilon\n-#define __glibcpp_float_round_error __glibcpp_f32_round_error\n-#define __glibcpp_float_min_exponent __glibcpp_f32_min_exponent\n-#define __glibcpp_float_min_exponent10 __glibcpp_f32_min_exponent10\n-#define __glibcpp_float_max_exponent __glibcpp_f32_max_exponent\n-#define __glibcpp_float_max_exponent10 __glibcpp_f32_max_exponent10\n+#  define __glibcpp_float_min __glibcpp_f32_min\n+#  define __glibcpp_float_max __glibcpp_f32_max\n+#  define __glibcpp_float_digits __glibcpp_f32_digits\n+#  define __glibcpp_float_digits10 __glibcpp_f32_digits10\n+#  define __glibcpp_float_radix __glibcpp_f32_radix\n+#  define __glibcpp_float_epsilon __glibcpp_f32_epsilon\n+#  define __glibcpp_float_round_error __glibcpp_f32_round_error\n+#  define __glibcpp_float_min_exponent __glibcpp_f32_min_exponent\n+#  define __glibcpp_float_min_exponent10 __glibcpp_f32_min_exponent10\n+#  define __glibcpp_float_max_exponent __glibcpp_f32_max_exponent\n+#  define __glibcpp_float_max_exponent10 __glibcpp_f32_max_exponent10\n #elif __glibcpp_float_bits == 64\n-#define __glibcpp_float_min __glibcpp_f64_min\n-#define __glibcpp_float_max __glibcpp_f64_max\n-#define __glibcpp_float_digits __glibcpp_f64_digits\n-#define __glibcpp_float_digits10 __glibcpp_f64_digits10\n-#define __glibcpp_float_radix __glibcpp_f64_radix\n-#define __glibcpp_float_epsilon __glibcpp_f64_epsilon\n-#define __glibcpp_float_round_error __glibcpp_f64_round_error\n-#define __glibcpp_float_min_exponent __glibcpp_f64_min_exponent\n-#define __glibcpp_float_min_exponent10 __glibcpp_f64_min_exponent10\n-#define __glibcpp_float_max_exponent __glibcpp_f64_max_exponent\n-#define __glibcpp_float_max_exponent10 __glibcpp_f64_max_exponent10\n+#  define __glibcpp_float_min __glibcpp_f64_min\n+#  define __glibcpp_float_max __glibcpp_f64_max\n+#  define __glibcpp_float_digits __glibcpp_f64_digits\n+#  define __glibcpp_float_digits10 __glibcpp_f64_digits10\n+#  define __glibcpp_float_radix __glibcpp_f64_radix\n+#  define __glibcpp_float_epsilon __glibcpp_f64_epsilon\n+#  define __glibcpp_float_round_error __glibcpp_f64_round_error\n+#  define __glibcpp_float_min_exponent __glibcpp_f64_min_exponent\n+#  define __glibcpp_float_min_exponent10 __glibcpp_f64_min_exponent10\n+#  define __glibcpp_float_max_exponent __glibcpp_f64_max_exponent\n+#  define __glibcpp_float_max_exponent10 __glibcpp_f64_max_exponent10\n #elif __glibcpp_float_bits == 80\n-#define __glibcpp_float_min __glibcpp_f80_min\n-#define __glibcpp_float_max __glibcpp_f80_max\n-#define __glibcpp_float_digits __glibcpp_f80_digits\n-#define __glibcpp_float_digits10 __glibcpp_f80_digits10\n-#define __glibcpp_float_radix __glibcpp_f80_radix\n-#define __glibcpp_float_epsilon __glibcpp_f80_epsilon\n-#define __glibcpp_float_round_error __glibcpp_f80_round_error\n-#define __glibcpp_float_min_exponent __glibcpp_f80_min_exponent\n-#define __glibcpp_float_min_exponent10 __glibcpp_f80_min_exponent10\n-#define __glibcpp_float_max_exponent __glibcpp_f80_max_exponent\n-#define __glibcpp_float_max_exponent10 __glibcpp_f80_max_exponent10\n+#  define __glibcpp_float_min __glibcpp_f80_min\n+#  define __glibcpp_float_max __glibcpp_f80_max\n+#  define __glibcpp_float_digits __glibcpp_f80_digits\n+#  define __glibcpp_float_digits10 __glibcpp_f80_digits10\n+#  define __glibcpp_float_radix __glibcpp_f80_radix\n+#  define __glibcpp_float_epsilon __glibcpp_f80_epsilon\n+#  define __glibcpp_float_round_error __glibcpp_f80_round_error\n+#  define __glibcpp_float_min_exponent __glibcpp_f80_min_exponent\n+#  define __glibcpp_float_min_exponent10 __glibcpp_f80_min_exponent10\n+#  define __glibcpp_float_max_exponent __glibcpp_f80_max_exponent\n+#  define __glibcpp_float_max_exponent10 __glibcpp_f80_max_exponent10\n #else\n // You must define these macros in the configuration file.\n #endif\n \n // FIXME: These are just stubs and inkorrect\n \n #ifndef __glibcpp_float_has_infinity\n-#define __glibcpp_float_has_infinity false\n+#  define __glibcpp_float_has_infinity false\n #endif\n \n #ifndef __glibcpp_float_has_quiet_NaN\n-#define __glibcpp_float_has_quiet_NaN false\n+#  define __glibcpp_float_has_quiet_NaN false\n #endif\n \n #ifndef __glibcpp_float_has_signaling_NaN\n-#define __glibcpp_float_has_signaling_NaN false\n+#  define __glibcpp_float_has_signaling_NaN false\n #endif\n \n #ifndef __glibcpp_float_has_denorm\n-#define __glibcpp_float_has_denorm denorm_absent\n+#  define __glibcpp_float_has_denorm denorm_absent\n #endif\n \n #ifndef __glibcpp_float_has_denorm_loss\n-#define __glibcpp_float_has_denorm_loss false\n+#  define __glibcpp_float_has_denorm_loss false\n #endif\n \n #ifndef __glibcpp_float_infinity\n-#define __glibcpp_float_infinity 0.0F\n+#  define __glibcpp_float_infinity 0.0F\n #endif\n \n #ifndef __glibcpp_float_quiet_NaN\n-#define __glibcpp_float_quiet_NaN 0.0F\n+#  define __glibcpp_float_quiet_NaN 0.0F\n #endif\n \n #ifndef __glibcpp_float_signaling_NaN\n-#define __glibcpp_float_signaling_NaN 0.0F\n+#  define __glibcpp_float_signaling_NaN 0.0F\n #endif\n \n #ifndef __glibcpp_float_denorm_min\n-#define __glibcpp_float_denorm_min 0.0F\n+#  define __glibcpp_float_denorm_min 0.0F\n #endif\n \n #ifndef __glibcpp_float_is_iec559\n-#define __glibcpp_float_is_iec559 false\n+#  define __glibcpp_float_is_iec559 false\n #endif\n \n #ifndef __glibcpp_float_is_bounded\n-#define __glibcpp_float_is_bounded true\n+#  define __glibcpp_float_is_bounded true\n #endif\n \n #ifndef __glibcpp_float_is_modulo\n-#define __glibcpp_float_is_modulo false\n+#  define __glibcpp_float_is_modulo false\n #endif\n \n #ifndef __glibcpp_float_traps\n-#define __glibcpp_float_traps false\n+#  define __glibcpp_float_traps false\n #endif\n \n #ifndef __glibcpp_float_tinyness_before\n-#define __glibcpp_float_tinyness_before false\n+#  define __glibcpp_float_tinyness_before false\n #endif\n \n #ifndef __glibcpp_float_round_style\n-#define __glibcpp_float_round_style round_toward_zero\n+#  define __glibcpp_float_round_style round_toward_zero\n #endif\n \n // double\n \n #if __glibcpp_double_bits == 32\n-#define __glibcpp_double_min __glibcpp_f32_min\n-#define __glibcpp_double_max __glibcpp_f32_max\n-#define __glibcpp_double_digits __glibcpp_f32_digits\n-#define __glibcpp_double_digits10 __glibcpp_f32_digits10\n-#define __glibcpp_double_radix __glibcpp_f32_radix\n-#define __glibcpp_double_epsilon __glibcpp_f32_epsilon\n-#define __glibcpp_double_round_error __glibcpp_f32_round_error\n-#define __glibcpp_double_min_exponent __glibcpp_f32_min_exponent\n-#define __glibcpp_double_min_exponent10 __glibcpp_f32_min_exponent10\n-#define __glibcpp_double_max_exponent __glibcpp_f32_max_exponent\n-#define __glibcpp_double_max_exponent10 __glibcpp_f32_max_exponent10\n+#  define __glibcpp_double_min __glibcpp_f32_min\n+#  define __glibcpp_double_max __glibcpp_f32_max\n+#  define __glibcpp_double_digits __glibcpp_f32_digits\n+#  define __glibcpp_double_digits10 __glibcpp_f32_digits10\n+#  define __glibcpp_double_radix __glibcpp_f32_radix\n+#  define __glibcpp_double_epsilon __glibcpp_f32_epsilon\n+#  define __glibcpp_double_round_error __glibcpp_f32_round_error\n+#  define __glibcpp_double_min_exponent __glibcpp_f32_min_exponent\n+#  define __glibcpp_double_min_exponent10 __glibcpp_f32_min_exponent10\n+#  define __glibcpp_double_max_exponent __glibcpp_f32_max_exponent\n+#  define __glibcpp_double_max_exponent10 __glibcpp_f32_max_exponent10\n #elif __glibcpp_double_bits == 64\n-#define __glibcpp_double_min __glibcpp_f64_min\n-#define __glibcpp_double_max __glibcpp_f64_max\n-#define __glibcpp_double_digits __glibcpp_f64_digits\n-#define __glibcpp_double_digits10 __glibcpp_f64_digits10\n-#define __glibcpp_double_radix __glibcpp_f64_radix\n-#define __glibcpp_double_epsilon __glibcpp_f64_epsilon\n-#define __glibcpp_double_round_error __glibcpp_f64_round_error\n-#define __glibcpp_double_min_exponent __glibcpp_f64_min_exponent\n-#define __glibcpp_double_min_exponent10 __glibcpp_f64_min_exponent10\n-#define __glibcpp_double_max_exponent __glibcpp_f64_max_exponent\n-#define __glibcpp_double_max_exponent10 __glibcpp_f64_max_exponent10\n+#  define __glibcpp_double_min __glibcpp_f64_min\n+#  define __glibcpp_double_max __glibcpp_f64_max\n+#  define __glibcpp_double_digits __glibcpp_f64_digits\n+#  define __glibcpp_double_digits10 __glibcpp_f64_digits10\n+#  define __glibcpp_double_radix __glibcpp_f64_radix\n+#  define __glibcpp_double_epsilon __glibcpp_f64_epsilon\n+#  define __glibcpp_double_round_error __glibcpp_f64_round_error\n+#  define __glibcpp_double_min_exponent __glibcpp_f64_min_exponent\n+#  define __glibcpp_double_min_exponent10 __glibcpp_f64_min_exponent10\n+#  define __glibcpp_double_max_exponent __glibcpp_f64_max_exponent\n+#  define __glibcpp_double_max_exponent10 __glibcpp_f64_max_exponent10\n #elif __glibcpp_double_bits == 80\n-#define __glibcpp_double_min __glibcpp_f80_min\n-#define __glibcpp_double_max __glibcpp_f80_max\n-#define __glibcpp_double_digits __glibcpp_f80_digits\n-#define __glibcpp_double_digits10 __glibcpp_f80_digits10\n-#define __glibcpp_double_radix __glibcpp_f80_radix\n-#define __glibcpp_double_epsilon __glibcpp_f80_epsilon\n-#define __glibcpp_double_round_error __glibcpp_f80_round_error\n-#define __glibcpp_double_min_exponent __glibcpp_f80_min_exponent\n-#define __glibcpp_double_min_exponent10 __glibcpp_f80_min_exponent10\n-#define __glibcpp_double_max_exponent __glibcpp_f80_max_exponent\n-#define __glibcpp_double_max_exponent10 __glibcpp_f80_max_exponent10\n+#  define __glibcpp_double_min __glibcpp_f80_min\n+#  define __glibcpp_double_max __glibcpp_f80_max\n+#  define __glibcpp_double_digits __glibcpp_f80_digits\n+#  define __glibcpp_double_digits10 __glibcpp_f80_digits10\n+#  define __glibcpp_double_radix __glibcpp_f80_radix\n+#  define __glibcpp_double_epsilon __glibcpp_f80_epsilon\n+#  define __glibcpp_double_round_error __glibcpp_f80_round_error\n+#  define __glibcpp_double_min_exponent __glibcpp_f80_min_exponent\n+#  define __glibcpp_double_min_exponent10 __glibcpp_f80_min_exponent10\n+#  define __glibcpp_double_max_exponent __glibcpp_f80_max_exponent\n+#  define __glibcpp_double_max_exponent10 __glibcpp_f80_max_exponent10\n #else\n // You must define these macros in the configuration file.\n #endif\n \n // FIXME: These are just stubs and inkorrect\n \n #ifndef __glibcpp_double_has_infinity\n-#define __glibcpp_double_has_infinity false\n+#  define __glibcpp_double_has_infinity false\n #endif\n \n #ifndef __glibcpp_double_has_quiet_NaN\n-#define __glibcpp_double_has_quiet_NaN false\n+#  define __glibcpp_double_has_quiet_NaN false\n #endif\n \n #ifndef __glibcpp_double_has_signaling_NaN\n-#define __glibcpp_double_has_signaling_NaN false\n+#  define __glibcpp_double_has_signaling_NaN false\n #endif\n \n #ifndef __glibcpp_double_has_denorm\n-#define __glibcpp_double_has_denorm denorm_absent\n+#  define __glibcpp_double_has_denorm denorm_absent\n #endif\n \n #ifndef __glibcpp_double_has_denorm_loss\n-#define __glibcpp_double_has_denorm_loss false\n+#  define __glibcpp_double_has_denorm_loss false\n #endif\n \n #ifndef __glibcpp_double_infinity\n-#define __glibcpp_double_infinity 0.0\n+#  define __glibcpp_double_infinity 0.0\n #endif\n \n #ifndef __glibcpp_double_quiet_NaN\n-#define __glibcpp_double_quiet_NaN 0.0\n+#  define __glibcpp_double_quiet_NaN 0.0\n #endif\n \n #ifndef __glibcpp_double_signaling_NaN\n-#define __glibcpp_double_signaling_NaN 0.0\n+#  define __glibcpp_double_signaling_NaN 0.0\n #endif\n \n #ifndef __glibcpp_double_denorm_min\n-#define __glibcpp_double_denorm_min 0.0\n+#  define __glibcpp_double_denorm_min 0.0\n #endif\n \n #ifndef __glibcpp_double_is_iec559\n-#define __glibcpp_double_is_iec559 false\n+#  define __glibcpp_double_is_iec559 false\n #endif\n \n #ifndef __glibcpp_double_is_bounded\n-#define __glibcpp_double_is_bounded true\n+#  define __glibcpp_double_is_bounded true\n #endif\n \n #ifndef __glibcpp_double_is_modulo\n-#define __glibcpp_double_is_modulo false\n+#  define __glibcpp_double_is_modulo false\n #endif\n \n #ifndef __glibcpp_double_traps\n-#define __glibcpp_double_traps false\n+#  define __glibcpp_double_traps false\n #endif\n \n #ifndef __glibcpp_double_tinyness_before\n-#define __glibcpp_double_tinyness_before false\n+#  define __glibcpp_double_tinyness_before false\n #endif\n \n #ifndef __glibcpp_double_round_style\n-#define __glibcpp_double_round_style round_toward_zero\n+#  define __glibcpp_double_round_style round_toward_zero\n #endif\n \n // long double\n \n #if __glibcpp_long_double_bits == 32\n-#define __glibcpp_long_double_min __glibcpp_f32_min\n-#define __glibcpp_long_double_max __glibcpp_f32_max\n-#define __glibcpp_long_double_digits __glibcpp_f32_digits\n-#define __glibcpp_long_double_digits10 __glibcpp_f32_digits10\n-#define __glibcpp_long_double_radix __glibcpp_f32_radix\n-#define __glibcpp_long_double_epsilon __glibcpp_f32_epsilon\n-#define __glibcpp_long_double_round_error __glibcpp_f32_round_error\n-#define __glibcpp_long_double_min_exponent __glibcpp_f32_min_exponent\n-#define __glibcpp_long_double_min_exponent10 __glibcpp_f32_min_exponent10\n-#define __glibcpp_long_double_max_exponent __glibcpp_f32_max_exponent\n-#define __glibcpp_long_double_max_exponent10 __glibcpp_f32_max_exponent10\n+#  define __glibcpp_long_double_min __glibcpp_f32_min\n+#  define __glibcpp_long_double_max __glibcpp_f32_max\n+#  define __glibcpp_long_double_digits __glibcpp_f32_digits\n+#  define __glibcpp_long_double_digits10 __glibcpp_f32_digits10\n+#  define __glibcpp_long_double_radix __glibcpp_f32_radix\n+#  define __glibcpp_long_double_epsilon __glibcpp_f32_epsilon\n+#  define __glibcpp_long_double_round_error __glibcpp_f32_round_error\n+#  define __glibcpp_long_double_min_exponent __glibcpp_f32_min_exponent\n+#  define __glibcpp_long_double_min_exponent10 __glibcpp_f32_min_exponent10\n+#  define __glibcpp_long_double_max_exponent __glibcpp_f32_max_exponent\n+#  define __glibcpp_long_double_max_exponent10 __glibcpp_f32_max_exponent10\n #elif __glibcpp_long_double_bits == 64\n-#define __glibcpp_long_double_min __glibcpp_f64_min\n-#define __glibcpp_long_double_max __glibcpp_f64_max\n-#define __glibcpp_long_double_digits __glibcpp_f64_digits\n-#define __glibcpp_long_double_digits10 __glibcpp_f64_digits10\n-#define __glibcpp_long_double_radix __glibcpp_f64_radix\n-#define __glibcpp_long_double_epsilon __glibcpp_f64_epsilon\n-#define __glibcpp_long_double_round_error __glibcpp_f64_round_error\n-#define __glibcpp_long_double_min_exponent __glibcpp_f64_min_exponent\n-#define __glibcpp_long_double_min_exponent10 __glibcpp_f64_min_exponent10\n-#define __glibcpp_long_double_max_exponent __glibcpp_f64_max_exponent\n-#define __glibcpp_long_double_max_exponent10 __glibcpp_f64_max_exponent10\n+#  define __glibcpp_long_double_min __glibcpp_f64_min\n+#  define __glibcpp_long_double_max __glibcpp_f64_max\n+#  define __glibcpp_long_double_digits __glibcpp_f64_digits\n+#  define __glibcpp_long_double_digits10 __glibcpp_f64_digits10\n+#  define __glibcpp_long_double_radix __glibcpp_f64_radix\n+#  define __glibcpp_long_double_epsilon __glibcpp_f64_epsilon\n+#  define __glibcpp_long_double_round_error __glibcpp_f64_round_error\n+#  define __glibcpp_long_double_min_exponent __glibcpp_f64_min_exponent\n+#  define __glibcpp_long_double_min_exponent10 __glibcpp_f64_min_exponent10\n+#  define __glibcpp_long_double_max_exponent __glibcpp_f64_max_exponent\n+#  define __glibcpp_long_double_max_exponent10 __glibcpp_f64_max_exponent10\n #elif __glibcpp_long_double_bits == 80\n-#define __glibcpp_long_double_min __glibcpp_f80_min\n-#define __glibcpp_long_double_max __glibcpp_f80_max\n-#define __glibcpp_long_double_digits __glibcpp_f80_digits\n-#define __glibcpp_long_double_digits10 __glibcpp_f80_digits10\n-#define __glibcpp_long_double_radix __glibcpp_f80_radix\n-#define __glibcpp_long_double_epsilon __glibcpp_f80_epsilon\n-#define __glibcpp_long_double_round_error __glibcpp_f80_round_error\n-#define __glibcpp_long_double_min_exponent __glibcpp_f80_min_exponent\n-#define __glibcpp_long_double_min_exponent10 __glibcpp_f80_min_exponent10\n-#define __glibcpp_long_double_max_exponent __glibcpp_f80_max_exponent\n-#define __glibcpp_long_double_max_exponent10 __glibcpp_f80_max_exponent10\n+#  define __glibcpp_long_double_min __glibcpp_f80_min\n+#  define __glibcpp_long_double_max __glibcpp_f80_max\n+#  define __glibcpp_long_double_digits __glibcpp_f80_digits\n+#  define __glibcpp_long_double_digits10 __glibcpp_f80_digits10\n+#  define __glibcpp_long_double_radix __glibcpp_f80_radix\n+#  define __glibcpp_long_double_epsilon __glibcpp_f80_epsilon\n+#  define __glibcpp_long_double_round_error __glibcpp_f80_round_error\n+#  define __glibcpp_long_double_min_exponent __glibcpp_f80_min_exponent\n+#  define __glibcpp_long_double_min_exponent10 __glibcpp_f80_min_exponent10\n+#  define __glibcpp_long_double_max_exponent __glibcpp_f80_max_exponent\n+#  define __glibcpp_long_double_max_exponent10 __glibcpp_f80_max_exponent10\n #elif __glibcpp_long_double_bits == 96\n-#define __glibcpp_long_double_min __glibcpp_f96_min\n-#define __glibcpp_long_double_max __glibcpp_f96_max\n-#define __glibcpp_long_double_digits __glibcpp_f96_digits\n-#define __glibcpp_long_double_digits10 __glibcpp_f96_digits10\n-#define __glibcpp_long_double_radix __glibcpp_f96_radix\n-#define __glibcpp_long_double_epsilon __glibcpp_f96_epsilon\n-#define __glibcpp_long_double_round_error __glibcpp_f96_round_error\n-#define __glibcpp_long_double_min_exponent __glibcpp_f96_min_exponent\n-#define __glibcpp_long_double_min_exponent10 __glibcpp_f96_min_exponent10\n-#define __glibcpp_long_double_max_exponent __glibcpp_f96_max_exponent\n-#define __glibcpp_long_double_max_exponent10 __glibcpp_f96_max_exponent10\n+#  define __glibcpp_long_double_min __glibcpp_f96_min\n+#  define __glibcpp_long_double_max __glibcpp_f96_max\n+#  define __glibcpp_long_double_digits __glibcpp_f96_digits\n+#  define __glibcpp_long_double_digits10 __glibcpp_f96_digits10\n+#  define __glibcpp_long_double_radix __glibcpp_f96_radix\n+#  define __glibcpp_long_double_epsilon __glibcpp_f96_epsilon\n+#  define __glibcpp_long_double_round_error __glibcpp_f96_round_error\n+#  define __glibcpp_long_double_min_exponent __glibcpp_f96_min_exponent\n+#  define __glibcpp_long_double_min_exponent10 __glibcpp_f96_min_exponent10\n+#  define __glibcpp_long_double_max_exponent __glibcpp_f96_max_exponent\n+#  define __glibcpp_long_double_max_exponent10 __glibcpp_f96_max_exponent10\n #elif __glibcpp_long_double_bits == 128\n-#define __glibcpp_long_double_min __glibcpp_f128_min\n-#define __glibcpp_long_double_max __glibcpp_f128_max\n-#define __glibcpp_long_double_digits __glibcpp_f128_digits\n-#define __glibcpp_long_double_digits10 __glibcpp_f128_digits10\n-#define __glibcpp_long_double_radix __glibcpp_f128_radix\n-#define __glibcpp_long_double_epsilon __glibcpp_f128_epsilon\n-#define __glibcpp_long_double_round_error __glibcpp_f128_round_error\n-#define __glibcpp_long_double_min_exponent __glibcpp_f128_min_exponent\n-#define __glibcpp_long_double_min_exponent10 __glibcpp_f128_min_exponent10\n-#define __glibcpp_long_double_max_exponent __glibcpp_f128_max_exponent\n-#define __glibcpp_long_double_max_exponent10 __glibcpp_f128_max_exponent10\n+#  define __glibcpp_long_double_min __glibcpp_f128_min\n+#  define __glibcpp_long_double_max __glibcpp_f128_max\n+#  define __glibcpp_long_double_digits __glibcpp_f128_digits\n+#  define __glibcpp_long_double_digits10 __glibcpp_f128_digits10\n+#  define __glibcpp_long_double_radix __glibcpp_f128_radix\n+#  define __glibcpp_long_double_epsilon __glibcpp_f128_epsilon\n+#  define __glibcpp_long_double_round_error __glibcpp_f128_round_error\n+#  define __glibcpp_long_double_min_exponent __glibcpp_f128_min_exponent\n+#  define __glibcpp_long_double_min_exponent10 __glibcpp_f128_min_exponent10\n+#  define __glibcpp_long_double_max_exponent __glibcpp_f128_max_exponent\n+#  define __glibcpp_long_double_max_exponent10 __glibcpp_f128_max_exponent10\n #else\n // You must define these macros in the configuration file.\n #endif\n \n // FIXME: These are just stubs and inkorrect\n \n #ifndef __glibcpp_long_double_has_infinity\n-#define __glibcpp_long_double_has_infinity false\n+#  define __glibcpp_long_double_has_infinity false\n #endif\n \n #ifndef __glibcpp_long_double_has_quiet_NaN\n-#define __glibcpp_long_double_has_quiet_NaN false\n+#  define __glibcpp_long_double_has_quiet_NaN false\n #endif\n \n #ifndef __glibcpp_long_double_has_signaling_NaN\n-#define __glibcpp_long_double_has_signaling_NaN false\n+#  define __glibcpp_long_double_has_signaling_NaN false\n #endif\n \n #ifndef __glibcpp_long_double_has_denorm\n-#define __glibcpp_long_double_has_denorm denorm_absent\n+#  define __glibcpp_long_double_has_denorm denorm_absent\n #endif\n \n #ifndef __glibcpp_long_double_has_denorm_loss\n-#define __glibcpp_long_double_has_denorm_loss false\n+#  define __glibcpp_long_double_has_denorm_loss false\n #endif\n \n #ifndef __glibcpp_long_double_infinity\n-#define __glibcpp_long_double_infinity 0.0L\n+#  define __glibcpp_long_double_infinity 0.0L\n #endif\n \n #ifndef __glibcpp_long_double_quiet_NaN\n-#define __glibcpp_long_double_quiet_NaN 0.0L\n+#  define __glibcpp_long_double_quiet_NaN 0.0L\n #endif\n \n #ifndef __glibcpp_long_double_signaling_NaN\n-#define __glibcpp_long_double_signaling_NaN 0.0L\n+#  define __glibcpp_long_double_signaling_NaN 0.0L\n #endif\n \n #ifndef __glibcpp_long_double_denorm_min\n-#define __glibcpp_long_double_denorm_min 0.0L\n+#  define __glibcpp_long_double_denorm_min 0.0L\n #endif\n \n #ifndef __glibcpp_long_double_is_iec559\n-#define __glibcpp_long_double_is_iec559 false\n+#  define __glibcpp_long_double_is_iec559 false\n #endif\n \n #ifndef __glibcpp_long_double_is_bounded\n-#define __glibcpp_long_double_is_bounded true\n+#  define __glibcpp_long_double_is_bounded true\n #endif\n \n #ifndef __glibcpp_long_double_is_modulo\n-#define __glibcpp_long_double_is_modulo false\n+#  define __glibcpp_long_double_is_modulo false\n #endif\n \n #ifndef __glibcpp_long_double_traps\n-#define __glibcpp_long_double_traps false\n+#  define __glibcpp_long_double_traps false\n #endif\n \n #ifndef __glibcpp_long_double_tinyness_before\n-#define __glibcpp_long_double_tinyness_before false\n+#  define __glibcpp_long_double_tinyness_before false\n #endif\n \n #ifndef __glibcpp_long_double_round_style\n-#define __glibcpp_long_double_round_style round_toward_zero\n+#  define __glibcpp_long_double_round_style round_toward_zero\n #endif\n \n "}]}