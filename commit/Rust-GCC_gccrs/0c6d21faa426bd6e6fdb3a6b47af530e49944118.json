{"sha": "0c6d21faa426bd6e6fdb3a6b47af530e49944118", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM2ZDIxZmFhNDI2YmQ2ZTZmZGIzYTZiNDdhZjUzMGU0OTk0NDExOA==", "commit": {"author": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2021-07-29T18:32:59Z"}, "committer": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2021-07-29T18:57:53Z"}, "message": "Reinstate branch-on-bit insns for H8\n\ngcc/\n\t* config/h8300/h8300-modes.def: Add CCZ, CCV and CCC, drop CCZNV.\n\t* config/h8300/h8300.md (H8cc mode iterator): Add CCZ.\n\t(cc mode_attr): Similarly.\n\t(ccz subst_attr): Similarly.\n\t* config/h8300/jumpcall.md: Add new patterns for branch-on-bit.\n\t* config/h8300/testcompare.md: Remove various cc0 based patterns\n\tthat had been commented out.  Add pattern to set CCZ from a bit\n\ttest.", "tree": {"sha": "721776ab50f4bebe90a729d0701cbf4f55539f09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/721776ab50f4bebe90a729d0701cbf4f55539f09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c6d21faa426bd6e6fdb3a6b47af530e49944118", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6d21faa426bd6e6fdb3a6b47af530e49944118", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c6d21faa426bd6e6fdb3a6b47af530e49944118", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6d21faa426bd6e6fdb3a6b47af530e49944118/comments", "author": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f6bdd51cfe15403085b69c133065ebda4af9bb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f6bdd51cfe15403085b69c133065ebda4af9bb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f6bdd51cfe15403085b69c133065ebda4af9bb9"}], "stats": {"total": 135, "additions": 61, "deletions": 74}, "files": [{"sha": "6ab52606a9a301c552d357e891e9f0d72b985827", "filename": "gcc/config/h8300/h8300-modes.def", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6d21faa426bd6e6fdb3a6b47af530e49944118/gcc%2Fconfig%2Fh8300%2Fh8300-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6d21faa426bd6e6fdb3a6b47af530e49944118/gcc%2Fconfig%2Fh8300%2Fh8300-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-modes.def?ref=0c6d21faa426bd6e6fdb3a6b47af530e49944118", "patch": "@@ -18,4 +18,6 @@\n    <http://www.gnu.org/licenses/>.  */\n \n CC_MODE (CCZN);\n-CC_MODE (CCZNV);\n+CC_MODE (CCZ);\n+CC_MODE (CCV);\n+CC_MODE (CCC);"}, {"sha": "7f49e4284f26cc6aa8bf88b8a5a8b189fd260d7b", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6d21faa426bd6e6fdb3a6b47af530e49944118/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6d21faa426bd6e6fdb3a6b47af530e49944118/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=0c6d21faa426bd6e6fdb3a6b47af530e49944118", "patch": "@@ -140,11 +140,11 @@\n \n ;; The modes we're supporting.  This is used when we want to generate\n ;; multiple patterns where only the mode differs from a single template\n-(define_mode_iterator H8cc [CC CCZN])\n+(define_mode_iterator H8cc [CC CCZN CCZ])\n \n ;; This is used to generate multiple define_substs from a single\n ;; template for the different variants we might have.\n-(define_mode_attr cc [(CC \"cc\") (CCZN \"cczn\")])\n+(define_mode_attr cc [(CC \"cc\") (CCZN \"cczn\") (CCZ \"ccz\")])\n \n ;; The primary substitution pattern.  <cc> is used to create multiple\n ;; substitutions based on the CC bits that are set.\n@@ -165,6 +165,7 @@\n ;; apply the subst_cczn or subset_cc define_subst to generate a\n ;; new pattern that compare-elim can use\n (define_subst_attr \"cczn\" \"subst_cczn\" \"\" \"_cczn\")\n+(define_subst_attr \"ccz\" \"subst_ccz\" \"\" \"_ccz\")\n (define_subst_attr \"cc\" \"subst_cc\" \"\" \"_cc\")\n \n ;; Type of delay slot.  NONE means the instruction has no delay slot."}, {"sha": "3e59fee58bdfb0c50297808f1e3ee338ee348070", "filename": "gcc/config/h8300/jumpcall.md", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6d21faa426bd6e6fdb3a6b47af530e49944118/gcc%2Fconfig%2Fh8300%2Fjumpcall.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6d21faa426bd6e6fdb3a6b47af530e49944118/gcc%2Fconfig%2Fh8300%2Fjumpcall.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fjumpcall.md?ref=0c6d21faa426bd6e6fdb3a6b47af530e49944118", "patch": "@@ -143,6 +143,52 @@\n   [(set_attr \"type\" \"bitbranch\")\n    (set_attr \"length_table\" \"bitbranch\")])\n \n+(define_insn_and_split \"\"\n+  [(set (pc)\n+\t(if_then_else (match_operator 3 \"eqne_operator\"\n+\t\t\t[(zero_extract:QHSI (match_operand:QHSI 1 \"register_operand\" \"r\")\n+\t\t\t\t\t    (const_int 1)\n+\t\t\t\t\t    (match_operand 2 \"const_int_operand\" \"n\"))\n+\t\t\t (const_int 0)])\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"INTVAL (operands[2]) < 16\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (reg:CCZ CC_REG)\n+\t(eq (zero_extract:QHSI (match_dup 1) (const_int 1) (match_dup 2))\n+\t    (const_int 0)))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 3 [(reg:CCZ CC_REG) (const_int 0)])\n+\t\t      (label_ref (match_dup 0))\n+\t\t      (pc)))])\n+\n+(define_insn_and_split \"\"\n+  [(set (pc)\n+\t(if_then_else (match_operator 3 \"eqne_operator\"\n+\t\t\t[(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t\t\t  (const_int 1)\n+\t\t\t\t\t  (match_operand 2 \"const_int_operand\" \"n\"))\n+\t\t\t (const_int 0)])\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))\n+   (clobber (match_scratch:SI 4 \"=&r\"))]\n+  \"INTVAL (operands[2]) >= 16\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel [(set (match_dup 4)\n+\t\t   (ior:SI (and:SI (match_dup 4) (const_int -65536))\n+\t\t\t   (lshiftrt:SI (match_dup 1) (const_int 16))))\n+\t      (clobber (reg:CC CC_REG))])\n+   (set (reg:CCZ CC_REG)\n+\t(eq (zero_extract:SI (match_dup 4) (const_int 1) (match_dup 2))\n+\t    (const_int 0)))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 3 [(reg:CCZ CC_REG) (const_int 0)])\n+\t\t      (label_ref (match_dup 0))\n+\t\t      (pc)))]\n+  \"operands[2] = GEN_INT (INTVAL (operands[2]) - 16);\")\n+\n ;; Unconditional and other jump instructions.\n \n (define_insn \"jump\""}, {"sha": "29190532e493fbb4092b7ff402a3a67801a2cbbe", "filename": "gcc/config/h8300/testcompare.md", "status": "modified", "additions": 9, "deletions": 71, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6d21faa426bd6e6fdb3a6b47af530e49944118/gcc%2Fconfig%2Fh8300%2Ftestcompare.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6d21faa426bd6e6fdb3a6b47af530e49944118/gcc%2Fconfig%2Fh8300%2Ftestcompare.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Ftestcompare.md?ref=0c6d21faa426bd6e6fdb3a6b47af530e49944118", "patch": "@@ -26,77 +26,15 @@\n ;;  \"\"\n ;;  [(set_attr \"length\" \"2,8,10\")])\n ;;\n-;;(define_insn \"\"\n-;;  [(set (cc0)\n-;;\t(compare (zero_extract:HSI (match_operand:HSI 0 \"register_operand\" \"r\")\n-;;\t\t\t\t   (const_int 1)\n-;;\t\t\t\t   (match_operand 1 \"const_int_operand\" \"n\"))\n-;;\t\t (const_int 0)))]\n-;;  \"INTVAL (operands[1]) <= 15\"\n-;;  \"btst\t%Z1,%Y0\"\n-;;  [(set_attr \"length\" \"2\")])\n-;;\n-;;(define_insn_and_split \"*tstsi_upper_bit\"\n-;;  [(set (cc0)\n-;;\t(compare (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"r\")\n-;;\t\t\t\t  (const_int 1)\n-;;\t\t\t\t  (match_operand 1 \"const_int_operand\" \"n\"))\n-;;\t\t (const_int 0)))\n-;;   (clobber (match_scratch:SI 2 \"=&r\"))]\n-;;  \"INTVAL (operands[1]) >= 16\"\n-;;  \"#\"\n-;;  \"&& reload_completed\"\n-;;  [(set (match_dup 2)\n-;;\t(ior:SI (and:SI (match_dup 2)\n-;;\t\t\t(const_int -65536))\n-;;\t\t(lshiftrt:SI (match_dup 0)\n-;;\t\t\t     (const_int 16))))\n-;;   (set (cc0)\n-;;\t(compare (zero_extract:SI (match_dup 2)\n-;;\t\t\t\t  (const_int 1)\n-;;\t\t\t\t  (match_dup 3))\n-;;\t\t (const_int 0)))]\n-;;  {\n-;;    operands[3] = GEN_INT (INTVAL (operands[1]) - 16);\n-;;  })\n-;;\n-;;(define_insn \"*tstsi_variable_bit\"\n-;;  [(set (cc0)\n-;;\t(compare (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"r\")\n-;;\t\t\t\t  (const_int 1)\n-;;\t\t\t\t  (and:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-;;\t\t\t\t\t  (const_int 7)))\n-;;\t\t (const_int 0)))]\n-;;  \"\"\n-;;  \"btst\t%w1,%w0\"\n-;;  [(set_attr \"length\" \"2\")])\n-;;\n-;;(define_insn_and_split \"*tstsi_variable_bit_qi\"\n-;;  [(set (cc0)\n-;;\t(compare (zero_extract:SI (zero_extend:SI (match_operand:QI 0 \"general_operand_src\" \"r,U,mn>\"))\n-;;\t\t\t\t  (const_int 1)\n-;;\t\t\t\t  (and:SI (match_operand:SI 1 \"register_operand\" \"r,r,r\")\n-;;\t\t\t\t\t  (const_int 7)))\n-;;\t\t (const_int 0)))\n-;;   (clobber (match_scratch:QI 2 \"=X,X,&r\"))]\n-;;  \"!CONSTANT_P (operands[0])\"\n-;;  \"@\n-;;   btst\\\\t%w1,%X0\n-;;   btst\\\\t%w1,%X0\n-;;   #\"\n-;;  \"&& reload_completed\n-;;   && !satisfies_constraint_U (operands[0])\"\n-;;  [(set (match_dup 2)\n-;;\t(match_dup 0))\n-;;   (parallel [(set (cc0)\n-;;\t\t   (compare (zero_extract:SI (zero_extend:SI (match_dup 2))\n-;;\t\t\t\t\t     (const_int 1)\n-;;\t\t\t\t\t     (and:SI (match_dup 1)\n-;;\t\t\t\t\t\t     (const_int 7)))\n-;;\t\t\t    (const_int 0)))\n-;;\t      (clobber (scratch:QI))])]\n-;;  \"\"\n-;;  [(set_attr \"length\" \"2,8,10\")])\n+(define_insn \"\"\n+  [(set (reg:CCZ CC_REG)\n+\t(eq (zero_extract:HSI (match_operand:HSI 0 \"register_operand\" \"r\")\n+\t\t\t      (const_int 1)\n+\t\t\t      (match_operand 1 \"const_int_operand\" \"n\"))\n+\t    (const_int 0)))]\n+  \"INTVAL (operands[1]) < 16\"\n+  \"btst\t%Z1,%Y0\"\n+  [(set_attr \"length\" \"2\")])\n \n (define_insn \"*tst<mode>\"\n   [(set (reg:CCZN CC_REG)"}]}