{"sha": "78b583fed8b7f8047020113bedea5e0dac25b033", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhiNTgzZmVkOGI3ZjgwNDcwMjAxMTNiZWRlYTVlMGRhYzI1YjAzMw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2001-11-26T10:18:47Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2001-11-26T10:18:47Z"}, "message": "* regclass.c (choose_hard_reg_mode): Handle vector arguments.\n\nFrom-SVN: r47338", "tree": {"sha": "cb594fd03ac4388c66eab7a5ef38fffc9a4b0f9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb594fd03ac4388c66eab7a5ef38fffc9a4b0f9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78b583fed8b7f8047020113bedea5e0dac25b033", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78b583fed8b7f8047020113bedea5e0dac25b033", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78b583fed8b7f8047020113bedea5e0dac25b033", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78b583fed8b7f8047020113bedea5e0dac25b033/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3cc9a32fc713254c9dcadbb1df46908bfc33e711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cc9a32fc713254c9dcadbb1df46908bfc33e711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cc9a32fc713254c9dcadbb1df46908bfc33e711"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "411ff77e6caa8b141674f8a9fcac02edd7877e1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b583fed8b7f8047020113bedea5e0dac25b033/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b583fed8b7f8047020113bedea5e0dac25b033/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78b583fed8b7f8047020113bedea5e0dac25b033", "patch": "@@ -1,3 +1,7 @@\n+2001-11-25  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* regclass.c (choose_hard_reg_mode): Handle vector arguments.\n+\n 2001-11-26  Alan Modra  <amodra@bigpond.net.au>\n \n \t* final.c: (insn_lengths): Make it an int *, so that large jump"}, {"sha": "9ef8c8cdffbbc2567e8ca038334208440307456f", "filename": "gcc/regclass.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b583fed8b7f8047020113bedea5e0dac25b033/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b583fed8b7f8047020113bedea5e0dac25b033/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=78b583fed8b7f8047020113bedea5e0dac25b033", "patch": "@@ -713,6 +713,26 @@ choose_hard_reg_mode (regno, nregs)\n   if (found_mode != VOIDmode)\n     return found_mode;\n \n+  for (mode = GET_CLASS_NARROWEST_MODE (MODE_VECTOR_FLOAT);\n+       mode != VOIDmode;\n+       mode = GET_MODE_WIDER_MODE (mode))\n+    if (HARD_REGNO_NREGS (regno, mode) == nregs\n+\t&& HARD_REGNO_MODE_OK (regno, mode))\n+      found_mode = mode;\n+\n+  if (found_mode != VOIDmode)\n+    return found_mode;\n+\n+  for (mode = GET_CLASS_NARROWEST_MODE (MODE_VECTOR_INT);\n+       mode != VOIDmode;\n+       mode = GET_MODE_WIDER_MODE (mode))\n+    if (HARD_REGNO_NREGS (regno, mode) == nregs\n+\t&& HARD_REGNO_MODE_OK (regno, mode))\n+      found_mode = mode;\n+\n+  if (found_mode != VOIDmode)\n+    return found_mode;\n+\n   /* Iterate over all of the CCmodes.  */\n   for (m = (unsigned int) CCmode; m < (unsigned int) NUM_MACHINE_MODES; ++m)\n     {"}]}