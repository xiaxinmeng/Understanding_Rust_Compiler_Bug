{"sha": "5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU1MmI0M2NhNWIyNmY5NDc2MGNmYjk0ZjU5Y2Q2YjVkNjBmMWM3ZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-01-30T16:02:58Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-01-30T16:02:58Z"}, "message": "class.c (check_field_decls): Only check C_TYPE_FIELDS_READONLY for class types.\n\n\t* class.c (check_field_decls): Only check C_TYPE_FIELDS_READONLY\n\tfor class types.\n\t* cp-tree.h (C_TYPE_FIELDS_READONLY): Use a lang-specific bit\n\trather than TYPE_LANG_FLAG_0.\n\t(TYPE_BUILT_IN): Remove.\n\t(TYPE_DEPENDENT_P): New macro.\n\t(TYPE_DEPENDENT_P_VALID): Likewise.\n\t(lang_type_class): Add fields_readonly.\n\t* decl.c (record_builtin_type): Don't set TYPE_BUILT_IN.\n\t* pt.c (dependent_type_p_r): New function, split out from ...\n\t(dependent_type_p): ... here.  Memoize results.\n\t* search.c (dependent_base_p): Use dependent_type_p, not\n\tuses_template_parms.\n\t* typeck.c (build_modify_expr): Only check C_TYPE_FIELDS_READONLY\n\tfor class types.\n\nFrom-SVN: r62143", "tree": {"sha": "d892f0dae664670d38fe018c10299cee82931af6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d892f0dae664670d38fe018c10299cee82931af6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d/comments", "author": null, "committer": null, "parents": [{"sha": "e43dd89d8061e68695c871f7f6b044012dfcd82b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e43dd89d8061e68695c871f7f6b044012dfcd82b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e43dd89d8061e68695c871f7f6b044012dfcd82b"}], "stats": {"total": 105, "additions": 72, "deletions": 33}, "files": [{"sha": "5e6a99bf14d75747be372b6ee72af8881019ede8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d", "patch": "@@ -1,3 +1,21 @@\n+2003-01-30  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* class.c (check_field_decls): Only check C_TYPE_FIELDS_READONLY\n+\tfor class types.\n+\t* cp-tree.h (C_TYPE_FIELDS_READONLY): Use a lang-specific bit\n+\trather than TYPE_LANG_FLAG_0.\n+\t(TYPE_BUILT_IN): Remove.\n+\t(TYPE_DEPENDENT_P): New macro.\n+\t(TYPE_DEPENDENT_P_VALID): Likewise.\n+\t(lang_type_class): Add fields_readonly.\n+\t* decl.c (record_builtin_type): Don't set TYPE_BUILT_IN.\n+\t* pt.c (dependent_type_p_r): New function, split out from ...\n+\t(dependent_type_p): ... here.  Memoize results.\n+\t* search.c (dependent_base_p): Use dependent_type_p, not\n+\tuses_template_parms.\n+\t* typeck.c (build_modify_expr): Only check C_TYPE_FIELDS_READONLY\n+\tfor class types.\n+\n 2003-01-29  Mark Mitchell  <mark@codesourcery.com>\n \n \t* call.c (build_field_call): Use build_new_op, not build_opfncall."}, {"sha": "f1f831c919b679cdade9ef024849794ec312091d", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d", "patch": "@@ -3413,7 +3413,7 @@ check_field_decls (tree t, tree *access_decls,\n             cp_warning_at (\"non-static const member `%#D' in class without a constructor\", x);\n \t}\n       /* A field that is pseudo-const makes the structure likewise.  */\n-      else if (IS_AGGR_TYPE (type))\n+      else if (CLASS_TYPE_P (type))\n \t{\n \t  C_TYPE_FIELDS_READONLY (t) |= C_TYPE_FIELDS_READONLY (type);\n \t  SET_CLASSTYPE_READONLY_FIELDS_NEED_INIT (t,"}, {"sha": "087a1c0e990309b2d49cd93287411ccabdb50bfc", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d", "patch": "@@ -82,13 +82,13 @@ struct diagnostic_context;\n    6: BINFO_ACCESS (in BINFO)\n \n    Usage of TYPE_LANG_FLAG_?:\n-   0: C_TYPE_FIELDS_READONLY (in RECORD_TYPE or UNION_TYPE).\n+   0: TYPE_DEPENDENT_P\n    1: TYPE_HAS_CONSTRUCTOR.\n    2: TYPE_HAS_DESTRUCTOR.\n    3: TYPE_FOR_JAVA.\n    4: TYPE_HAS_NONTRIVIAL_DESTRUCTOR\n    5: IS_AGGR_TYPE.\n-   6: TYPE_BUILT_IN.\n+   6: TYPE_DEPENDENT_P_VALID\n \n    Usage of DECL_LANG_FLAG_?:\n    0: DECL_ERROR_REPORTED (in VAR_DECL).\n@@ -497,7 +497,8 @@ struct tree_srcloc GTY(())\n   TREE_LANG_FLAG_3 (NODE)\n \n /* In a RECORD_TYPE or UNION_TYPE, nonzero if any component is read-only.  */\n-#define C_TYPE_FIELDS_READONLY(TYPE) TYPE_LANG_FLAG_0 (TYPE)\n+#define C_TYPE_FIELDS_READONLY(TYPE) \\\n+  (LANG_TYPE_CLASS_CHECK (TYPE)->fields_readonly)\n \n /* Store a value in that field.  */\n #define C_SET_EXP_ORIGINAL_CODE(EXP, CODE) \\\n@@ -1028,12 +1029,17 @@ enum languages { lang_c, lang_cplusplus, lang_java };\n   (CLASS_TYPE_P (T) || TREE_CODE (T) == ENUMERAL_TYPE)\n #define IS_OVERLOAD_TYPE(T) TAGGED_TYPE_P (T)\n \n-/* In a *_TYPE, nonzero means a built-in type.  */\n-#define TYPE_BUILT_IN(NODE) TYPE_LANG_FLAG_6 (NODE)\n-\n /* True if this a \"Java\" type, defined in 'extern \"Java\"'.  */\n #define TYPE_FOR_JAVA(NODE) TYPE_LANG_FLAG_3 (NODE)\n \n+/* True if this type is dependent.  This predicate is only valid if\n+   TYPE_DEPENDENT_P_VALID is true.  */\n+#define TYPE_DEPENDENT_P(NODE) TYPE_LANG_FLAG_0 (NODE)\n+\n+/* True if dependent_type_p has been called for this type, with the\n+   result that TYPE_DEPENDENT_P is valid.  */\n+#define TYPE_DEPENDENT_P_VALID(NODE) TYPE_LANG_FLAG_6(NODE)\n+\n /* Nonzero if this type is const-qualified.  */\n #define CP_TYPE_CONST_P(NODE)\t\t\t\t\\\n   ((cp_type_quals (NODE) & TYPE_QUAL_CONST) != 0)\n@@ -1162,6 +1168,7 @@ struct lang_type_class GTY(())\n \n   unsigned non_zero_init : 1;\n   unsigned empty_p : 1;\n+  unsigned fields_readonly : 1;\n \n   /* When adding a flag here, consider whether or not it ought to\n      apply to a template instance if it applies to the template.  If\n@@ -1170,7 +1177,7 @@ struct lang_type_class GTY(())\n   /* There are some bits left to fill out a 32-bit word.  Keep track\n      of this by updating the size of this bitfield whenever you add or\n      remove a flag.  */\n-  unsigned dummy : 6;\n+  unsigned dummy : 5;\n \n   tree primary_base;\n   tree vfields;"}, {"sha": "e02fdd23ed08b82758fa65ab7331499b131a00ed", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d", "patch": "@@ -6071,8 +6071,6 @@ record_builtin_type (enum rid rid_index,\n   if (name)\n     tname = get_identifier (name);\n \n-  TYPE_BUILT_IN (type) = 1;\n-\n   if (tname)\n     {\n       tdecl = pushdecl (build_decl (TYPE_DECL, tname, type));"}, {"sha": "dc2a9e2817750a9dac0ddaecfe9340ca076dd910", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d", "patch": "@@ -171,6 +171,7 @@ static void copy_default_args_to_explicit_spec PARAMS ((tree));\n static int invalid_nontype_parm_type_p PARAMS ((tree, tsubst_flags_t));\n static int eq_local_specializations (const void *, const void *);\n static tree template_for_substitution (tree);\n+static bool dependent_type_p_r (tree);\n static bool dependent_template_id_p (tree, tree);\n static tree tsubst (tree, tree, tsubst_flags_t, tree);\n static tree tsubst_expr\t(tree, tree, tsubst_flags_t, tree);\n@@ -11202,29 +11203,14 @@ invalid_nontype_parm_type_p (type, complain)\n   return 1;\n }\n \n-/* Returns TRUE if TYPE is dependent, in the sense of\n-   [temp.dep.type].  */\n+/* Returns TRUE if TYPE is dependent, in the sense of [temp.dep.type].\n+   Assumes that TYPE really is a type, and not the ERROR_MARK_NODE.*/\n \n-bool\n-dependent_type_p (type)\n-     tree type;\n+static bool\n+dependent_type_p_r (tree type)\n {\n   tree scope;\n \n-  /* If there are no template parameters in scope, then there can't be\n-     any dependent types.  */\n-  if (!processing_template_decl)\n-    return false;\n-\n-  /* If the type is NULL, we have not computed a type for the entity\n-     in question; in that case, the type is dependent.  */\n-  if (!type)\n-    return true;\n-\n-  /* Erroneous types can be considered non-dependent.  */\n-  if (type == error_mark_node)\n-    return false;\n-\n   /* [temp.dep.type]\n \n      A type is dependent if it is:\n@@ -11315,6 +11301,37 @@ dependent_type_p (type)\n   return false;\n }\n \n+/* Returns TRUE if TYPE is dependent, in the sense of\n+   [temp.dep.type].  */\n+\n+bool\n+dependent_type_p (tree type)\n+{\n+  /* If there are no template parameters in scope, then there can't be\n+     any dependent types.  */\n+  if (!processing_template_decl)\n+    return false;\n+\n+  /* If the type is NULL, we have not computed a type for the entity\n+     in question; in that case, the type is dependent.  */\n+  if (!type)\n+    return true;\n+\n+  /* Erroneous types can be considered non-dependent.  */\n+  if (type == error_mark_node)\n+    return false;\n+\n+  /* If we have not already computed the appropriate value for TYPE,\n+     do so now.  */\n+  if (!TYPE_DEPENDENT_P_VALID (type))\n+    {\n+      TYPE_DEPENDENT_P (type) = dependent_type_p_r (type);\n+      TYPE_DEPENDENT_P_VALID (type) = 1;\n+    }\n+\n+  return TYPE_DEPENDENT_P (type);\n+}\n+\n /* Returns TRUE if the EXPRESSION is value-dependent.  */\n \n bool"}, {"sha": "952c7602794eb0b63252a87abd4d4fbd3a4a3c8e", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d", "patch": "@@ -2417,7 +2417,7 @@ dependent_base_p (binfo)\n     {\n       if (currently_open_class (TREE_TYPE (binfo)))\n \tbreak;\n-      if (uses_template_parms (TREE_TYPE (binfo)))\n+      if (dependent_type_p (TREE_TYPE (binfo)))\n \treturn 1;\n     }\n   return 0;"}, {"sha": "37a07b6af8fdb3f4476a38a5cd6714868fac867d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=5552b43ca5b26f94760cfb94f59cd6b5d60f1c7d", "patch": "@@ -5511,7 +5511,7 @@ build_modify_expr (lhs, modifycode, rhs)\n \t  || TREE_CODE (TREE_TYPE (lhs)) == METHOD_TYPE\n \t  /* If it's an aggregate and any field is const, then it is\n \t     effectively const.  */\n-\t  || (IS_AGGR_TYPE_CODE (TREE_CODE (lhstype))\n+\t  || (CLASS_TYPE_P (lhstype)\n \t      && C_TYPE_FIELDS_READONLY (lhstype))))\n     readonly_error (lhs, \"assignment\", 0);\n \n@@ -6266,8 +6266,7 @@ c_expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t  tree type = TREE_TYPE (o[i]);\n \t  if (type != error_mark_node\n \t      && (CP_TYPE_CONST_P (type)\n-\t\t  || (IS_AGGR_TYPE_CODE (TREE_CODE (type))\n-\t\t      && C_TYPE_FIELDS_READONLY (type))))\n+\t\t  || (CLASS_TYPE_P (type) && C_TYPE_FIELDS_READONLY (type))))\n \t    readonly_error (o[i], \"modification by `asm'\", 1);\n \t}\n     }"}]}