{"sha": "6d98713a7b9cc58573be3e209a27a6c4ce682166", "node_id": "C_kwDOANBUbNoAKDZkOTg3MTNhN2I5Y2M1ODU3M2JlM2UyMDlhMjdhNmM0Y2U2ODIxNjY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-09-26T07:36:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-26T07:36:56Z"}, "message": "Merge #1527 #1529 #1530 #1534\n\n1527: rust: Add -frust-compile-until option r=CohenArthur a=CohenArthur\n\nThis option helps ensure that we do not introduce regressions on various\r\nparts of the compilation pipeline. For example, a testcase (or testsuite\r\nfrom the `testing` project) might pass attribute checking, expansion and\r\nlowering, but fail during typechecking. Should a change suddenly make\r\nthat testcase fail expansion, we would not be able to notice it. By\r\ngenerating tests that run up until expansion, typechecking, compilation\r\nand so forth we ensure that no regressions are added accidentally to\r\nalready failing tests/testsuites.\r\n\n\n1529: const generics: Make sure const generic types are visited properly in all contexts r=CohenArthur a=CohenArthur\n\nCloses #1360 \n\n1530: const generics: Forbid default values in Functions, Traits and Impls r=CohenArthur a=CohenArthur\n\nFixes #1310 \n\n1534: module lowering: Do not append null pointers as items r=CohenArthur a=CohenArthur\n\nSome module items do not need to get lowered to HIR such as `macro_rules!` definitions. Hence, module lowering should act the same as crate lowering: Only emplace back the lowered item if it is a valid pointer\r\n\r\nFixes #1533 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "c49ebec6291e03ad4d15ede5deb186025d5b5b9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c49ebec6291e03ad4d15ede5deb186025d5b5b9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d98713a7b9cc58573be3e209a27a6c4ce682166", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjMVaYCRBK7hj4Ov3rIwAAa58IAGOCBQSwcpAGCc4gV1ZIZw9U\nBYhFrd1U+pZ78G3rQNxlhH9UVhPDyPixKtTu4ibpCeYgnlxGvj1aljJBjtXp1XcG\nalLJjVtOL0AFA+ZUkynjwwfHn6tLy+tX9Bguaw1Wdlmp2hMm+J/AmCfkHiGbqea0\ndQR6CdXRTl9stlnUDf2IeQPKOpFX3X4/DikWa7H3uEitoBFbKXg4hTCNT4ktuvmK\n/Y+ci+gHPi2oh1lRLXNOZSbrGUsq4+ALfMzDp3UlJpPehAOSAZyBMkuGElOArdKG\nrC2hXlM2q7YAJxet7At7ond30mPcK26jD+KKkQ4b9dxpI6Ak7tPC8SWx9Bk01Zk=\n=NJ1J\n-----END PGP SIGNATURE-----\n", "payload": "tree c49ebec6291e03ad4d15ede5deb186025d5b5b9d\nparent cfd2938f069598e9be25484f16ac045606c69e72\nparent 138a6260124740208b8f3aff2e38617f43b05fe8\nparent 5a019b1e71affaf474e2878e51fcc5c7d1068d5b\nparent 7ebe6693360dceb044fb4eaf6ae83fbb35eef451\nparent d4da06f721577d3eaf2e21d6c6735d32a69d6ac7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1664177816 +0000\ncommitter GitHub <noreply@github.com> 1664177816 +0000\n\nMerge #1527 #1529 #1530 #1534\n\n1527: rust: Add -frust-compile-until option r=CohenArthur a=CohenArthur\n\nThis option helps ensure that we do not introduce regressions on various\r\nparts of the compilation pipeline. For example, a testcase (or testsuite\r\nfrom the `testing` project) might pass attribute checking, expansion and\r\nlowering, but fail during typechecking. Should a change suddenly make\r\nthat testcase fail expansion, we would not be able to notice it. By\r\ngenerating tests that run up until expansion, typechecking, compilation\r\nand so forth we ensure that no regressions are added accidentally to\r\nalready failing tests/testsuites.\r\n\n\n1529: const generics: Make sure const generic types are visited properly in all contexts r=CohenArthur a=CohenArthur\n\nCloses #1360 \n\n1530: const generics: Forbid default values in Functions, Traits and Impls r=CohenArthur a=CohenArthur\n\nFixes #1310 \n\n1534: module lowering: Do not append null pointers as items r=CohenArthur a=CohenArthur\n\nSome module items do not need to get lowered to HIR such as `macro_rules!` definitions. Hence, module lowering should act the same as crate lowering: Only emplace back the lowered item if it is a valid pointer\r\n\r\nFixes #1533 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d98713a7b9cc58573be3e209a27a6c4ce682166", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d98713a7b9cc58573be3e209a27a6c4ce682166", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d98713a7b9cc58573be3e209a27a6c4ce682166/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfd2938f069598e9be25484f16ac045606c69e72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfd2938f069598e9be25484f16ac045606c69e72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfd2938f069598e9be25484f16ac045606c69e72"}, {"sha": "138a6260124740208b8f3aff2e38617f43b05fe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/138a6260124740208b8f3aff2e38617f43b05fe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/138a6260124740208b8f3aff2e38617f43b05fe8"}, {"sha": "5a019b1e71affaf474e2878e51fcc5c7d1068d5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a019b1e71affaf474e2878e51fcc5c7d1068d5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a019b1e71affaf474e2878e51fcc5c7d1068d5b"}, {"sha": "7ebe6693360dceb044fb4eaf6ae83fbb35eef451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ebe6693360dceb044fb4eaf6ae83fbb35eef451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ebe6693360dceb044fb4eaf6ae83fbb35eef451"}, {"sha": "d4da06f721577d3eaf2e21d6c6735d32a69d6ac7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4da06f721577d3eaf2e21d6c6735d32a69d6ac7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4da06f721577d3eaf2e21d6c6735d32a69d6ac7"}], "stats": {"total": 300, "additions": 290, "deletions": 10}, "files": [{"sha": "a2a6dc21f261ee99ed99c594fa5204e03fbe8356", "filename": "gcc/rust/checks/errors/rust-const-checker.cc", "status": "modified", "additions": 91, "deletions": 6, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d98713a7b9cc58573be3e209a27a6c4ce682166/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d98713a7b9cc58573be3e209a27a6c4ce682166/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc?ref=6d98713a7b9cc58573be3e209a27a6c4ce682166", "patch": "@@ -52,6 +52,67 @@ ConstChecker::is_const_extern_fn (HIR::ExternalFunctionItem &fn)\n     });\n }\n \n+const char *\n+ConstChecker::ctx_to_str (ConstGenericCtx ctx)\n+{\n+  switch (ctx)\n+    {\n+    case ConstGenericCtx::Function:\n+      return \"function\";\n+    case ConstGenericCtx::TypeAlias:\n+      return \"type alias\";\n+    case ConstGenericCtx::Struct:\n+      return \"struct\";\n+    case ConstGenericCtx::Enum:\n+      return \"enum\";\n+    case ConstGenericCtx::Union:\n+      return \"union\";\n+    case ConstGenericCtx::Trait:\n+      return \"trait\";\n+    case ConstGenericCtx::Impl:\n+      return \"impl\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n+bool\n+ConstChecker::ctx_allows_default (ConstGenericCtx ctx)\n+{\n+  switch (ctx)\n+    {\n+    case ConstGenericCtx::TypeAlias:\n+    case ConstGenericCtx::Struct:\n+    case ConstGenericCtx::Enum:\n+    case ConstGenericCtx::Trait:\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n+\n+void\n+ConstChecker::check_default_const_generics (\n+  std::vector<std::unique_ptr<GenericParam>> &params, ConstGenericCtx context)\n+{\n+  if (ctx_allows_default (context))\n+    return;\n+\n+  for (auto &param : params)\n+    {\n+      if (param->get_kind () == GenericParam::GenericKind::CONST)\n+\t{\n+\t  auto const_param = static_cast<ConstGenericParam *> (param.get ());\n+\t  if (const_param->has_default_expression ())\n+\t    rust_error_at (\n+\t      param->get_locus (),\n+\t      \"default values for const generic parameters are not \"\n+\t      \"allowed in %qs items\",\n+\t      ctx_to_str (context));\n+\t}\n+    }\n+}\n+\n void\n ConstChecker::visit (Lifetime &lifetime)\n {}\n@@ -560,6 +621,9 @@ ConstChecker::visit (Function &function)\n   if (const_fn)\n     const_context.enter (function.get_mappings ().get_hirid ());\n \n+  check_default_const_generics (function.get_generic_params (),\n+\t\t\t\tConstGenericCtx::Function);\n+\n   for (auto &param : function.get_function_params ())\n     param.get_type ()->accept_vis (*this);\n \n@@ -571,18 +635,27 @@ ConstChecker::visit (Function &function)\n \n void\n ConstChecker::visit (TypeAlias &type_alias)\n-{}\n+{\n+  check_default_const_generics (type_alias.get_generic_params (),\n+\t\t\t\tConstGenericCtx::TypeAlias);\n+}\n \n void\n ConstChecker::visit (StructStruct &struct_item)\n-{}\n+{\n+  check_default_const_generics (struct_item.get_generic_params (),\n+\t\t\t\tConstGenericCtx::Struct);\n+}\n \n void\n ConstChecker::visit (TupleStruct &tuple_struct)\n-{}\n+{\n+  check_default_const_generics (tuple_struct.get_generic_params (),\n+\t\t\t\tConstGenericCtx::Struct);\n+}\n \n void\n-ConstChecker::visit (EnumItem &item)\n+ConstChecker::visit (EnumItem &enum_item)\n {}\n \n void\n@@ -605,11 +678,17 @@ ConstChecker::visit (EnumItemDiscriminant &item)\n \n void\n ConstChecker::visit (Enum &enum_item)\n-{}\n+{\n+  check_default_const_generics (enum_item.get_generic_params (),\n+\t\t\t\tConstGenericCtx::Enum);\n+}\n \n void\n ConstChecker::visit (Union &union_item)\n-{}\n+{\n+  check_default_const_generics (union_item.get_generic_params (),\n+\t\t\t\tConstGenericCtx::Union);\n+}\n \n void\n ConstChecker::visit (ConstantItem &const_item)\n@@ -652,13 +731,19 @@ ConstChecker::visit (TraitItemType &item)\n void\n ConstChecker::visit (Trait &trait)\n {\n+  check_default_const_generics (trait.get_generic_params (),\n+\t\t\t\tConstGenericCtx::Trait);\n+\n   for (auto &item : trait.get_trait_items ())\n     item->accept_vis (*this);\n }\n \n void\n ConstChecker::visit (ImplBlock &impl)\n {\n+  check_default_const_generics (impl.get_generic_params (),\n+\t\t\t\tConstGenericCtx::Impl);\n+\n   for (auto &item : impl.get_impl_items ())\n     item->accept_vis (*this);\n }"}, {"sha": "90b675b94b8e4b6c7aca4346e5c2befa35994668", "filename": "gcc/rust/checks/errors/rust-const-checker.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d98713a7b9cc58573be3e209a27a6c4ce682166/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d98713a7b9cc58573be3e209a27a6c4ce682166/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h?ref=6d98713a7b9cc58573be3e209a27a6c4ce682166", "patch": "@@ -46,6 +46,31 @@ class ConstChecker : public HIRFullVisitor\n    */\n   void check_function_call (HirId fn_id, Location locus);\n \n+  /* All possible const contexts */\n+  enum class ConstGenericCtx\n+  {\n+    Function,\n+    TypeAlias,\n+    Struct,\n+    Enum,\n+    Union,\n+    Trait,\n+    Impl\n+  };\n+\n+  /* Get the string representation of a const context */\n+  const char *ctx_to_str (ConstGenericCtx ctx);\n+\n+  /* Check if a const context allows default values */\n+  bool ctx_allows_default (ConstGenericCtx ctx);\n+\n+  /**\n+   * Check that const generic parameters only contains defaults in allowed\n+   * contexts\n+   */\n+  void check_default_const_generics (\n+    std::vector<std::unique_ptr<GenericParam>> &param, ConstGenericCtx context);\n+\n   StackedContexts<HirId> const_context;\n   Resolver::Resolver &resolver;\n   Analysis::Mappings &mappings;"}, {"sha": "336be5bdfafabc9e8316563c825ba557b7651a97", "filename": "gcc/rust/hir/rust-ast-lower-item.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d98713a7b9cc58573be3e209a27a6c4ce682166/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d98713a7b9cc58573be3e209a27a6c4ce682166/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.cc?ref=6d98713a7b9cc58573be3e209a27a6c4ce682166", "patch": "@@ -59,7 +59,10 @@ ASTLoweringItem::visit (AST::Module &module)\n   for (auto &item : module.get_items ())\n     {\n       auto transitem = translate (item.get ());\n-      items.push_back (std::unique_ptr<Item> (transitem));\n+      // The item may be null if it doesn't need to live in the HIR - for\n+      // example, macro rules definitions\n+      if (transitem)\n+\titems.push_back (std::unique_ptr<Item> (transitem));\n     }\n \n   // should be lowered/copied from module.get_in/outer_attrs()"}, {"sha": "bb3b9983862ca1cc901681c9c1de9d82f9256d5b", "filename": "gcc/rust/lang.opt", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d98713a7b9cc58573be3e209a27a6c4ce682166/gcc%2Frust%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d98713a7b9cc58573be3e209a27a6c4ce682166/gcc%2Frust%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flang.opt?ref=6d98713a7b9cc58573be3e209a27a6c4ce682166", "patch": "@@ -113,6 +113,48 @@ Rust Joined RejectNegative\n \n o\n Rust Joined Separate\n+\n+frust-compile-until=\n+Rust Joined RejectNegative Enum(frust_compile_until) Var(flag_rust_compile_until)\n+-frust-compile-until=[ast|attributecheck|expansion|nameresolution|lowering|typecheck|privacy|unsafety|const|copimlation|end]             When to stop in the pipeline when compiling Rust code\n+\n+Enum\n+Name(frust_compile_until) Type(int) UnknownError(unknown rust compile-until %qs)\n+\n+EnumValue\n+Enum(frust_compile_until) String(ast) Value(0)\n+\n+EnumValue\n+Enum(frust_compile_until) String(attributecheck) Value(1)\n+\n+EnumValue\n+Enum(frust_compile_until) String(expansion) Value(2)\n+\n+EnumValue\n+Enum(frust_compile_until) String(nameresolution) Value(3)\n+\n+EnumValue\n+Enum(frust_compile_until) String(lowering) Value(4)\n+\n+EnumValue\n+Enum(frust_compile_until) String(typecheck) Value(5)\n+\n+EnumValue\n+Enum(frust_compile_until) String(privacy) Value(6)\n+\n+EnumValue\n+Enum(frust_compile_until) String(unsafety) Value(7)\n+\n+EnumValue\n+Enum(frust_compile_until) String(const) Value(8)\n+\n+EnumValue\n+Enum(frust_compile_until) String(compilation) Value(9)\n+\n+EnumValue\n+Enum(frust_compile_until) String(end) Value(10)\n+\n+\n ; Documented in common.opt\n \n ; This comment is to ensure we retain the blank line above."}, {"sha": "a6291a3cab8ee7b12061e1a752585c2f8a646a36", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d98713a7b9cc58573be3e209a27a6c4ce682166/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d98713a7b9cc58573be3e209a27a6c4ce682166/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=6d98713a7b9cc58573be3e209a27a6c4ce682166", "patch": "@@ -223,7 +223,9 @@ Session::handle_option (\n     case OPT_frust_edition_:\n       options.set_edition (flag_rust_edition);\n       break;\n-\n+    case OPT_frust_compile_until_:\n+      options.set_compile_step (flag_rust_compile_until);\n+      break;\n     case OPT_frust_metadata_output_:\n       options.set_metadata_output (arg);\n       break;\n@@ -425,6 +427,8 @@ Session::compile_crate (const char *filename)\n       return;\n     }\n \n+  auto last_step = options.get_compile_until ();\n+\n   // parse file here\n   /* create lexer and parser - these are file-specific and so aren't instance\n    * variables */\n@@ -481,7 +485,7 @@ Session::compile_crate (const char *filename)\n \n   // If -fsyntax-only was passed, we can just skip the remaining passes.\n   // Parsing errors are already emitted in `parse_crate()`\n-  if (flag_syntax_only)\n+  if (flag_syntax_only || last_step == CompileOptions::CompileStep::Ast)\n     return;\n \n   // register plugins pipeline stage\n@@ -500,8 +504,14 @@ Session::compile_crate (const char *filename)\n       // TODO: what do I dump here? injected crate names?\n     }\n \n+  if (last_step == CompileOptions::CompileStep::AttributeCheck)\n+    return;\n+\n   Analysis::AttributeChecker ().go (parsed_crate);\n \n+  if (last_step == CompileOptions::CompileStep::Expansion)\n+    return;\n+\n   // expansion pipeline stage\n   expansion (parsed_crate);\n   rust_debug (\"\\033[0;31mSUCCESSFULLY FINISHED EXPANSION \\033[0m\");\n@@ -514,6 +524,9 @@ Session::compile_crate (const char *filename)\n       rust_debug (\"END POST-EXPANSION AST DUMP\");\n     }\n \n+  if (last_step == CompileOptions::CompileStep::NameResolution)\n+    return;\n+\n   // resolution pipeline stage\n   Resolver::NameResolution::Resolve (parsed_crate);\n   if (options.dump_option_enabled (CompileOptions::RESOLUTION_DUMP))\n@@ -524,6 +537,9 @@ Session::compile_crate (const char *filename)\n   if (saw_errors ())\n     return;\n \n+  if (last_step == CompileOptions::CompileStep::Lowering)\n+    return;\n+\n   // lower AST to HIR\n   std::unique_ptr<HIR::Crate> lowered\n     = HIR::ASTLowering::Resolve (parsed_crate);\n@@ -541,6 +557,9 @@ Session::compile_crate (const char *filename)\n       dump_hir_pretty (hir);\n     }\n \n+  if (last_step == CompileOptions::CompileStep::TypeCheck)\n+    return;\n+\n   // type resolve\n   Resolver::TypeResolution::Resolve (hir);\n   if (options.dump_option_enabled (CompileOptions::TYPE_RESOLUTION_DUMP))\n@@ -551,17 +570,30 @@ Session::compile_crate (const char *filename)\n   if (saw_errors ())\n     return;\n \n+  if (last_step == CompileOptions::CompileStep::Privacy)\n+    return;\n+\n   // Various HIR error passes. The privacy pass happens before the unsafe checks\n   Privacy::Resolver::resolve (hir);\n   if (saw_errors ())\n     return;\n \n+  if (last_step == CompileOptions::CompileStep::Unsafety)\n+    return;\n+\n   HIR::UnsafeChecker ().go (hir);\n+\n+  if (last_step == CompileOptions::CompileStep::Const)\n+    return;\n+\n   HIR::ConstChecker ().go (hir);\n \n   if (saw_errors ())\n     return;\n \n+  if (last_step == CompileOptions::CompileStep::Compilation)\n+    return;\n+\n   // do compile to gcc generic\n   Compile::Context ctx (backend);\n   Compile::CompileCrate::Compile (hir, &ctx);"}, {"sha": "6ecd51315c554a3a14c208c36f94646087cc787a", "filename": "gcc/rust/rust-session-manager.h", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d98713a7b9cc58573be3e209a27a6c4ce682166/gcc%2Frust%2Frust-session-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d98713a7b9cc58573be3e209a27a6c4ce682166/gcc%2Frust%2Frust-session-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.h?ref=6d98713a7b9cc58573be3e209a27a6c4ce682166", "patch": "@@ -199,6 +199,22 @@ struct CompileOptions\n   } edition\n     = Edition::E2015;\n \n+  enum class CompileStep\n+  {\n+    Ast,\n+    AttributeCheck,\n+    Expansion,\n+    NameResolution,\n+    Lowering,\n+    TypeCheck,\n+    Privacy,\n+    Unsafety,\n+    Const,\n+    Compilation,\n+    End,\n+  } compile_until\n+    = CompileStep::End;\n+\n   bool dump_option_enabled (DumpOption option) const\n   {\n     return dump_options.find (option) != dump_options.end ();\n@@ -239,7 +255,14 @@ struct CompileOptions\n     edition = static_cast<Edition> (raw_edition);\n   }\n \n-  const Edition &get_edition () { return edition; }\n+  const Edition &get_edition () const { return edition; }\n+\n+  void set_compile_step (int raw_step)\n+  {\n+    compile_until = static_cast<CompileStep> (raw_step);\n+  }\n+\n+  const CompileStep &get_compile_until () const { return compile_until; }\n \n   void set_metadata_output (const std::string &path)\n   {"}, {"sha": "2c128db92ea0196ffb5e2bf04fa2fb149395eb03", "filename": "gcc/testsuite/rust/compile/const_generics_7.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d98713a7b9cc58573be3e209a27a6c4ce682166/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d98713a7b9cc58573be3e209a27a6c4ce682166/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_7.rs?ref=6d98713a7b9cc58573be3e209a27a6c4ce682166", "patch": "@@ -0,0 +1,17 @@\n+struct S<const N: usize>;\n+\n+pub fn foo<const N: FooBar>() {} // { dg-error \"failed to resolve\" }\n+type Foo<const N: FooBar> = S<N>; // { dg-error \"failed to resolve\" }\n+struct Foo2<const N: FooBar>; // { dg-error \"failed to resolve\" }\n+enum Foo3<const N: FooBar> { // { dg-error \"failed to resolve\" }\n+    Foo,\n+    Bar,\n+}\n+union Foo4<const N: FooBar> { // { dg-error \"failed to resolve\" }\n+    a: usize,\n+    b: i32,\n+}\n+trait Fooable<const N: FooBar> {} // { dg-error \"failed to resolve\" }\n+\n+trait Traitable {}\n+impl<const N: FooBar> Traitable for Foo2<N> {} // { dg-error \"failed to resolve\" }"}, {"sha": "b0bb2624a2c3fea6712071d2cf424681f28e4187", "filename": "gcc/testsuite/rust/compile/const_generics_8.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d98713a7b9cc58573be3e209a27a6c4ce682166/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_8.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d98713a7b9cc58573be3e209a27a6c4ce682166/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_8.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_8.rs?ref=6d98713a7b9cc58573be3e209a27a6c4ce682166", "patch": "@@ -0,0 +1,12 @@\n+struct Bidule<const N: i32 = 15> {}\n+enum Bidoule<const N: i32 = 15> {}\n+\n+// Note - missing generic parameter - needs name resolution on const generics\n+type Bipboupe<const N: i32 = 15> = Bidule;\n+trait Fooable<const N: i32 = 15> {}\n+\n+union Bidoulepe<const N: i32 = 15> {} // { dg-error \"default values for const generic parameters are not allowed in .union. items\" }\n+fn const_default<const N: i32 = 15>() {} // { dg-error \"default values for const generic parameters are not allowed in .function. items\" }\n+\n+// Note - missing generic parameter - needs name resolution on const generics\n+impl<const N: i32 = 15> Bidule {} // { dg-error \"default values for const generic parameters are not allowed in .impl. items\" }"}, {"sha": "7bb3932ef60b27783db576471c121efd1eed80c5", "filename": "gcc/testsuite/rust/compile/frust-compile-until.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d98713a7b9cc58573be3e209a27a6c4ce682166/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffrust-compile-until.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d98713a7b9cc58573be3e209a27a6c4ce682166/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffrust-compile-until.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffrust-compile-until.rs?ref=6d98713a7b9cc58573be3e209a27a6c4ce682166", "patch": "@@ -0,0 +1,7 @@\n+// { dg-additional-options \"-frust-compile-until=unsafety\" }\n+\n+unsafe fn foo() {}\n+\n+fn main() {\n+    foo()\n+}"}, {"sha": "84b2cdbb506b37c2eaa150f296fd1d239cea099d", "filename": "gcc/testsuite/rust/compile/macro44.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d98713a7b9cc58573be3e209a27a6c4ce682166/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro44.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d98713a7b9cc58573be3e209a27a6c4ce682166/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro44.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro44.rs?ref=6d98713a7b9cc58573be3e209a27a6c4ce682166", "patch": "@@ -0,0 +1,34 @@\n+mod foo {\n+    mod bar {\n+        mod baz {\n+            macro_rules! baz {\n+                () => {{}};\n+            }\n+        }\n+    }\n+\n+    macro_rules! foo {\n+        () => {{}};\n+    }\n+\n+    fn foo_f() { // { dg-warning \"function is never used\" }\n+        foo!();\n+    }\n+\n+    fn bar_f() { // { dg-warning \"function is never used\" }\n+        baz!();\n+    }\n+}\n+\n+mod foo2 {\n+    #[macro_export]\n+    macro_rules! bar1 {\n+        () => {};\n+    }\n+\n+    macro_rules! bar2 {\n+        () => {};\n+    }\n+}\n+\n+fn main() {}"}]}