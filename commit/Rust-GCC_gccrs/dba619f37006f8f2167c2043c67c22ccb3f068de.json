{"sha": "dba619f37006f8f2167c2043c67c22ccb3f068de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJhNjE5ZjM3MDA2ZjhmMjE2N2MyMDQzYzY3YzIyY2NiM2YwNjhkZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2015-11-10T22:29:20Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-11-10T22:29:20Z"}, "message": "nvptx.opt (moptimize): New flag.\n\n\t* config/nvptx/nvptx.opt (moptimize): New flag.\n\t* config/nvptx/nvptx.c (nvptx_option_override): Set nvptx_optimize\n\tdefault.\n\t(nvptx_optimize_inner): New.\n\t(nvptx_process_pars): Call it when optimizing.\n\t* doc/invoke.texi (Nvidia PTX Options): Document -moptimize.\n\nFrom-SVN: r230137", "tree": {"sha": "4d8aa25bda4264384e5efa0e86fbc730d2ffa9e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d8aa25bda4264384e5efa0e86fbc730d2ffa9e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dba619f37006f8f2167c2043c67c22ccb3f068de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dba619f37006f8f2167c2043c67c22ccb3f068de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dba619f37006f8f2167c2043c67c22ccb3f068de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dba619f37006f8f2167c2043c67c22ccb3f068de/comments", "author": null, "committer": null, "parents": [{"sha": "43ee07b7c0823168ab5ddb81250f13b8de7bc474", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ee07b7c0823168ab5ddb81250f13b8de7bc474", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43ee07b7c0823168ab5ddb81250f13b8de7bc474"}], "stats": {"total": 93, "additions": 92, "deletions": 1}, "files": [{"sha": "a1d54b05e7344f73c3e66e8a46739230b900dd55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dba619f37006f8f2167c2043c67c22ccb3f068de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dba619f37006f8f2167c2043c67c22ccb3f068de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dba619f37006f8f2167c2043c67c22ccb3f068de", "patch": "@@ -1,3 +1,12 @@\n+2015-11-10  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* config/nvptx/nvptx.opt (moptimize): New flag.\n+\t* config/nvptx/nvptx.c (nvptx_option_override): Set nvptx_optimize\n+\tdefault.\n+\t(nvptx_optimize_inner): New.\n+\t(nvptx_process_pars): Call it when optimizing.\n+\t* doc/invoke.texi (Nvidia PTX Options): Document -moptimize.\n+\n 2015-11-10  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_secondary_reload_direct_move):"}, {"sha": "d86730188190826945c2c0a8523aa4c69565042e", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dba619f37006f8f2167c2043c67c22ccb3f068de/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dba619f37006f8f2167c2043c67c22ccb3f068de/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=dba619f37006f8f2167c2043c67c22ccb3f068de", "patch": "@@ -137,6 +137,9 @@ nvptx_option_override (void)\n   write_symbols = NO_DEBUG;\n   debug_info_level = DINFO_LEVEL_NONE;\n \n+  if (nvptx_optimize < 0)\n+    nvptx_optimize = optimize > 0;\n+\n   declared_fndecls_htab = hash_table<tree_hasher>::create_ggc (17);\n   needed_fndecls_htab = hash_table<tree_hasher>::create_ggc (17);\n   declared_libfuncs_htab\n@@ -2942,13 +2945,79 @@ nvptx_skip_par (unsigned mask, parallel *par)\n   nvptx_single (mask, par->forked_block, pre_tail);\n }\n \n+/* If PAR has a single inner parallel and PAR itself only contains\n+   empty entry and exit blocks, swallow the inner PAR.  */\n+\n+static void\n+nvptx_optimize_inner (parallel *par)\n+{\n+  parallel *inner = par->inner;\n+\n+  /* We mustn't be the outer dummy par.  */\n+  if (!par->mask)\n+    return;\n+\n+  /* We must have a single inner par.  */\n+  if (!inner || inner->next)\n+    return;\n+\n+  /* We must only contain 2 blocks ourselves -- the head and tail of\n+     the inner par.  */\n+  if (par->blocks.length () != 2)\n+    return;\n+\n+  /* We must be disjoint partitioning.  As we only have vector and\n+     worker partitioning, this is sufficient to guarantee the pars\n+     have adjacent partitioning.  */\n+  if ((par->mask & inner->mask) & (GOMP_DIM_MASK (GOMP_DIM_MAX) - 1))\n+    /* This indicates malformed code generation.  */\n+    return;\n+\n+  /* The outer forked insn should be immediately followed by the inner\n+     fork insn.  */\n+  rtx_insn *forked = par->forked_insn;\n+  rtx_insn *fork = BB_END (par->forked_block);\n+\n+  if (NEXT_INSN (forked) != fork)\n+    return;\n+  gcc_checking_assert (recog_memoized (fork) == CODE_FOR_nvptx_fork);\n+\n+  /* The outer joining insn must immediately follow the inner join\n+     insn.  */\n+  rtx_insn *joining = par->joining_insn;\n+  rtx_insn *join = inner->join_insn;\n+  if (NEXT_INSN (join) != joining)\n+    return;\n+\n+  /* Preconditions met.  Swallow the inner par.  */\n+  if (dump_file)\n+    fprintf (dump_file, \"Merging loop %x [%d,%d] into %x [%d,%d]\\n\",\n+\t     inner->mask, inner->forked_block->index,\n+\t     inner->join_block->index,\n+\t     par->mask, par->forked_block->index, par->join_block->index);\n+\n+  par->mask |= inner->mask & (GOMP_DIM_MASK (GOMP_DIM_MAX) - 1);\n+\n+  par->blocks.reserve (inner->blocks.length ());\n+  while (inner->blocks.length ())\n+    par->blocks.quick_push (inner->blocks.pop ());\n+\n+  par->inner = inner->inner;\n+  inner->inner = NULL;\n+\n+  delete inner;\n+}\n+\n /* Process the parallel PAR and all its contained\n    parallels.  We do everything but the neutering.  Return mask of\n    partitioned modes used within this parallel.  */\n \n static unsigned\n nvptx_process_pars (parallel *par)\n {\n+  if (nvptx_optimize)\n+    nvptx_optimize_inner (par);\n+  \n   unsigned inner_mask = par->mask;\n \n   /* Do the inner parallels first.  */"}, {"sha": "342915d8095c7db8a48b42cda15a93ed97c92979", "filename": "gcc/config/nvptx/nvptx.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dba619f37006f8f2167c2043c67c22ccb3f068de/gcc%2Fconfig%2Fnvptx%2Fnvptx.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dba619f37006f8f2167c2043c67c22ccb3f068de/gcc%2Fconfig%2Fnvptx%2Fnvptx.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.opt?ref=dba619f37006f8f2167c2043c67c22ccb3f068de", "patch": "@@ -28,3 +28,7 @@ Generate code for a 64-bit ABI.\n mmainkernel\n Target Report RejectNegative\n Link in code for a __main kernel.\n+\n+moptimize\n+Target Report Var(nvptx_optimize) Init(-1)\n+Optimize partition neutering"}, {"sha": "213a9d0c604791475dddeeda4228439ee7cf15e9", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dba619f37006f8f2167c2043c67c22ccb3f068de/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dba619f37006f8f2167c2043c67c22ccb3f068de/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=dba619f37006f8f2167c2043c67c22ccb3f068de", "patch": "@@ -873,7 +873,7 @@ Objective-C and Objective-C++ Dialects}.\n -march=@var{arch} -mbmx -mno-bmx -mcdx -mno-cdx}\n \n @emph{Nvidia PTX Options}\n-@gccoptlist{-m32 -m64 -mmainkernel}\n+@gccoptlist{-m32 -m64 -mmainkernel -moptimize}\n \n @emph{PDP-11 Options}\n @gccoptlist{-mfpu  -msoft-float  -mac0  -mno-ac0  -m40  -m45  -m10 @gol\n@@ -18960,6 +18960,11 @@ Generate code for 32-bit or 64-bit ABI.\n Link in code for a __main kernel.  This is for stand-alone instead of\n offloading execution.\n \n+@item -moptimize\n+@opindex moptimize\n+Apply partitioned execution optimizations.  This is the default when any\n+level of optimization is selected.\n+\n @end table\n \n @node PDP-11 Options"}, {"sha": "9778c940c256a0fbbb58d0458204a2549ccb6dbf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dba619f37006f8f2167c2043c67c22ccb3f068de/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dba619f37006f8f2167c2043c67c22ccb3f068de/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dba619f37006f8f2167c2043c67c22ccb3f068de", "patch": "@@ -1,3 +1,7 @@\n+2015-11-10  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* gcc.dg/goacc/nvptx-opt-1.c: New test.\n+\n 2015-11-10  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \t* gcc.target/i386/mask-pack.c: New test."}]}