{"sha": "7a790837802bf1c9dffa1b4e9aa50b2ca9262032", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E3OTA4Mzc4MDJiZjFjOWRmZmExYjRlOWFhNTBiMmNhOTI2MjAzMg==", "commit": {"author": {"name": "Manfred Hollstein", "email": "manfred@gcc.gnu.org", "date": "1998-03-27T00:01:08Z"}, "committer": {"name": "Manfred Hollstein", "email": "manfred@gcc.gnu.org", "date": "1998-03-27T00:01:08Z"}, "message": "Makefile.in (stmp-fixinc): If we're actually fixing include files...\n\na\n\t* Makefile.in (stmp-fixinc): If we're actually fixing include\n\tfiles, copy gcc's assert.h into the fixed include dir.\n\t* fixincludes (assert.h): Avoid any attempts to fix a probably\n\tbroken system specific assert.h file.\n\t* fixproto (stdlib.h): Make sure, it'll contain a definition of\n\tsize_t.\n\nFrom-SVN: r18852", "tree": {"sha": "105d22c5b0200933d68e743087d6973b0fd7efc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/105d22c5b0200933d68e743087d6973b0fd7efc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a790837802bf1c9dffa1b4e9aa50b2ca9262032", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a790837802bf1c9dffa1b4e9aa50b2ca9262032", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a790837802bf1c9dffa1b4e9aa50b2ca9262032", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a790837802bf1c9dffa1b4e9aa50b2ca9262032/comments", "author": null, "committer": null, "parents": [{"sha": "1ab0e56783d64b4dafbe32e76a2a971a6850cff4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab0e56783d64b4dafbe32e76a2a971a6850cff4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ab0e56783d64b4dafbe32e76a2a971a6850cff4"}], "stats": {"total": 70, "additions": 26, "deletions": 44}, "files": [{"sha": "8ed09c040c3a6573f86749d9cd9a419fcc723cf1", "filename": "gcc/fixincludes", "status": "modified", "additions": 2, "deletions": 41, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a790837802bf1c9dffa1b4e9aa50b2ca9262032/gcc%2Ffixincludes", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a790837802bf1c9dffa1b4e9aa50b2ca9262032/gcc%2Ffixincludes", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixincludes?ref=7a790837802bf1c9dffa1b4e9aa50b2ca9262032", "patch": "@@ -2371,9 +2371,9 @@ struct exception;\n   fi\n fi\n \n-# assert.h and sys/mman.h on HP/UX are not C++ ready, even though\n+# sys/mman.h on HP/UX is not C++ ready, even though\n # NO_IMPLICIT_EXTERN_C is defined on HP/UX.\n-for file in assert.h sys/mman.h; do\n+for file in sys/mman.h; do\n   if [ -r $file ] && [ ! -r ${LIB}/$file ]; then\n     cp $file ${LIB}/$file >/dev/null 2>&1 || echo \"Can't copy $file\"\n     chmod +w ${LIB}/$file 2>/dev/null\n@@ -2407,45 +2407,6 @@ extern \"C\" {\n   fi\n done\n \n-# check for broken assert.h that needs stdio.h or stdlib.h\n-file=assert.h\n-if [ -r $file ] && [ ! -r ${LIB}/$file ]; then\n-  cp $file ${LIB}/$file >/dev/null 2>&1 || echo \"Can't copy $file\"\n-  chmod +w ${LIB}/$file 2>/dev/null\n-  chmod a+r ${LIB}/$file 2>/dev/null\n-fi\n-\n-if [ -r ${LIB}/$file ]; then\n-  if grep 'stderr' ${LIB}/$file >/dev/null 2>/dev/null; then\n-    if grep 'include.*stdio.h' ${LIB}/$file >/dev/null 2>/dev/null; then\n-      true\n-    else\n-      echo \"Fixing $file (needs stdio.h)\"\n-      echo '#include <stdio.h>' >>${LIB}/$file\n-    fi\n-  fi\n-  if grep 'exit *(' ${LIB}/$file >/dev/null 2>/dev/null || \n-     grep 'abort *(' ${LIB}/$file >/dev/null 2>/dev/null; then\n-    if grep 'include.*stdlib.h' ${LIB}/$file >/dev/null 2>/dev/null; then\n-      true\n-    else\n-      echo \"Fixing $file (needs stdlib.h)\"\n-      echo '#ifdef __cplusplus\n-#include <stdlib.h>\n-#endif' >>${LIB}/$file\n-    fi\n-  fi\n-  if cmp $file ${LIB}/$file >/dev/null 2>&1; then\n-    rm -f ${LIB}/$file\n-  else\n-    # Find any include directives that use \"file\".\n-    for include in `egrep '^[       ]*#[    ]*include[      ]*\"[^/]' ${LIB}/$file | sed -e 's/^[    ]*#[    ]*include[      ]*\"\\([^\"]*\\)\".*$/\\1/'`; do\n-      dir=`echo $file | sed -e s'|/[^/]*$||'`\n-      required=\"$required ${INPUT} $dir/$include ${LIB}/$dir/$include\"\n-    done\n-  fi\n-fi\n-\n # Fix return value of sbrk in unistd.h on Alpha OSF/1 V2.0\n file=unistd.h\n if [ -r $file ] && [ ! -r ${LIB}/$file ]; then"}, {"sha": "dfeb5964c06f68c44c493a76111c5f2c08b09975", "filename": "gcc/fixproto", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a790837802bf1c9dffa1b4e9aa50b2ca9262032/gcc%2Ffixproto", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a790837802bf1c9dffa1b4e9aa50b2ca9262032/gcc%2Ffixproto", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixproto?ref=7a790837802bf1c9dffa1b4e9aa50b2ca9262032", "patch": "@@ -120,6 +120,7 @@ required_stdlib_h=\"abort abs atexit atof atoi atol bsearch calloc exit free gete\n required_unistd_h=\"_exit access alarm chdir chown close ctermid cuserid dup dup2 execl execle execlp execv execve execvp fork fpathconf getcwd getegid geteuid getgid getlogin getopt getpgrp getpid getppid getuid isatty link lseek pathconf pause pipe read rmdir setgid setpgid setsid setuid sleep sysconf tcgetpgrp tcsetpgrp ttyname unlink write\"\n \n done_dirs=\"\"\n+subdirs_made=\"\"\n echo \"\" >fixproto.list\n \n for code in ALL STD ; do\n@@ -174,7 +175,9 @@ for code in ALL STD ; do\n \n       abs_target_subdir=${abs_target_dir}/${rel_source_subdir}\n       if [ \\! -d $abs_target_subdir ] ; then\n-        mkdir $abs_target_subdir\n+\tif mkdir $abs_target_subdir ; then\n+\t  subdirs_made=\"$abs_target_subdir $subdirs_made\"\n+\tfi\n       fi\n       # Append \"/\"; remove initial \"./\". Hence \".\" -> \"\" and \"sys\" -> \"sys/\".\n       rel_source_prefix=`echo $rel_source_subdir | sed -e 's|$|/|' -e 's|^./||'`\n@@ -199,7 +202,9 @@ for code in ALL STD ; do\n \t      # Create the dir where this file will go when fixed.\n \t      xxdir=`echo ./$file | sed -e 's|/[^/]*$||'`\n \t      if [ \\! -d $abs_target_subdir/$xxdir ] ; then\n-\t\tmkdir $abs_target_subdir/$xxdir\n+\t\tif mkdir $abs_target_subdir/$xxdir ; then\n+\t\t  subdirs_made=\"$abs_target_subdir/$xxdir $subdirs_made\"\n+\t\tfi\n \t      fi\n \t      # Just in case we have edited out a symbolic link\n \t      if [ -f $src_dir_std/$file -a -f $src_dir_std/$xxfile ] ; then\n@@ -264,10 +269,26 @@ do\n     cat >tmp.h <<EOF\n #ifndef ${rel_source_ident}\n #define ${rel_source_ident}\n-#endif\n+EOF\n+    if test $rel_source_file = stdlib.h\n+    then\n+      # Make sure it contains a definition of size_t.\n+      cat >>tmp.h <<EOF\n+\n+#define __need_size_t\n+#include <stddef.h>\n+EOF\n+    fi\n+    cat >>tmp.h <<EOF\n+\n+#endif /* ${rel_source_ident} */\n EOF\n     ${FIX_HEADER} $rel_source_file tmp.h $abs_target_dir/$rel_source_file ${DEFINES} $include_path\n     rm tmp.h\n   fi\n done\n+\n+# Remove any directories that we made that are still empty.\n+rmdir $subdirs_made 2>/dev/null\n+\n exit 0"}]}