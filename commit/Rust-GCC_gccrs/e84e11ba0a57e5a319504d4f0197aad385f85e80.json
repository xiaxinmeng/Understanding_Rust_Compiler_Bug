{"sha": "e84e11ba0a57e5a319504d4f0197aad385f85e80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg0ZTExYmEwYTU3ZTVhMzE5NTA0ZDRmMDE5N2FhZDM4NWY4NWU4MA==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2008-07-31T12:46:23Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-07-31T12:46:23Z"}, "message": "checks.ads (Apply_Accessibility_Check): Add parameter Insert_Node.\n\n2008-07-31  Gary Dismukes  <dismukes@adacore.com>\n\n\t* checks.ads (Apply_Accessibility_Check): Add parameter Insert_Node.\n\t\n\t* checks.adb (Apply_Accessibility_Check): Insert the check on\n\tInsert_Node.\n\t\n\t* exp_attr.adb:\n\t(Expand_N_Attribute_Refernce, Attribute_Access): Pass attribute node\n\tto new parameter Insert_Node on call to Apply_Accessibility_Check.\n\tNecessary to distinguish the insertion node because the dereferenced\n\tformal may come from a rename, but the check must be inserted in\n\tfront of the attribute.\n\t\n\t* exp_ch4.adb:\n\t(Expand_N_Allocator): Pass actual for new Insert_Node parameter on\n\tcall to Apply_Accessibility_Check.\n\t(Expand_N_Type_Conversion): Pass actual for new Insert_Node parameter\n\ton call to Apply_Accessibility_Check.\n\tMinor reformatting\n\nFrom-SVN: r138399", "tree": {"sha": "b4e0ed9b5b4d45488eacbfd965b03a06d5e5e2ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4e0ed9b5b4d45488eacbfd965b03a06d5e5e2ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e84e11ba0a57e5a319504d4f0197aad385f85e80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e84e11ba0a57e5a319504d4f0197aad385f85e80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e84e11ba0a57e5a319504d4f0197aad385f85e80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e84e11ba0a57e5a319504d4f0197aad385f85e80/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "67d7b0ab5ffd3d67e804732cdb74299300db18b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67d7b0ab5ffd3d67e804732cdb74299300db18b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67d7b0ab5ffd3d67e804732cdb74299300db18b6"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "6eb7ebbbbc3f27e185c6a6203bec90a0a5c7b125", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84e11ba0a57e5a319504d4f0197aad385f85e80/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84e11ba0a57e5a319504d4f0197aad385f85e80/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=e84e11ba0a57e5a319504d4f0197aad385f85e80", "patch": "@@ -470,7 +470,11 @@ package body Checks is\n    -- Apply_Accessibility_Check --\n    -------------------------------\n \n-   procedure Apply_Accessibility_Check (N : Node_Id; Typ : Entity_Id) is\n+   procedure Apply_Accessibility_Check\n+     (N           : Node_Id;\n+      Typ         : Entity_Id;\n+      Insert_Node : Node_Id)\n+   is\n       Loc         : constant Source_Ptr := Sloc (N);\n       Param_Ent   : constant Entity_Id  := Param_Entity (N);\n       Param_Level : Node_Id;\n@@ -501,7 +505,7 @@ package body Checks is\n          --  Raise Program_Error if the accessibility level of the the access\n          --  parameter is deeper than the level of the target access type.\n \n-         Insert_Action (N,\n+         Insert_Action (Insert_Node,\n            Make_Raise_Program_Error (Loc,\n              Condition =>\n                Make_Op_Gt (Loc,"}, {"sha": "7b231473c8144fff5dfafb2d4bd60907f2540c66", "filename": "gcc/ada/checks.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84e11ba0a57e5a319504d4f0197aad385f85e80/gcc%2Fada%2Fchecks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84e11ba0a57e5a319504d4f0197aad385f85e80/gcc%2Fada%2Fchecks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.ads?ref=e84e11ba0a57e5a319504d4f0197aad385f85e80", "patch": "@@ -102,11 +102,15 @@ package Checks is\n    --  Determines whether an expression node requires a runtime access\n    --  check and if so inserts the appropriate run-time check.\n \n-   procedure Apply_Accessibility_Check (N : Node_Id; Typ : Entity_Id);\n+   procedure Apply_Accessibility_Check\n+     (N           : Node_Id;\n+      Typ         : Entity_Id;\n+      Insert_Node : Node_Id);\n    --  Given a name N denoting an access parameter, emits a run-time\n    --  accessibility check (if necessary), checking that the level of\n    --  the object denoted by the access parameter is not deeper than the\n    --  level of the type Typ. Program_Error is raised if the check fails.\n+   --  Insert_Node indicates the node where the check should be inserted.\n \n    procedure Apply_Address_Clause_Check (E : Entity_Id; N : Node_Id);\n    --  E is the entity for an object which has an address clause. If checks"}, {"sha": "84bc808b86f8a6063ce6d75708684be742295ff7", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84e11ba0a57e5a319504d4f0197aad385f85e80/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84e11ba0a57e5a319504d4f0197aad385f85e80/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=e84e11ba0a57e5a319504d4f0197aad385f85e80", "patch": "@@ -840,7 +840,10 @@ package body Exp_Attr is\n             --  attribute was the dereference, and didn't handle cases where\n             --  the attribute is applied to a subcomponent of the dereference,\n             --  since there's generally no available, appropriate access type\n-            --  to convert to in that case.\n+            --  to convert to in that case. The attribute is passed as the\n+            --  point to insert the check, because the access parameter may\n+            --  come from a renaming, possibly in a different scope, and the\n+            --  check must be associated with the attribute itself.\n \n             elsif Id = Attribute_Access\n               and then Nkind (Enc_Object) = N_Explicit_Dereference\n@@ -852,7 +855,7 @@ package body Exp_Attr is\n               and then Present (Extra_Accessibility\n                                 (Entity (Prefix (Enc_Object))))\n             then\n-               Apply_Accessibility_Check (Prefix (Enc_Object), Typ);\n+               Apply_Accessibility_Check (Prefix (Enc_Object), Typ, N);\n \n             --  Ada 2005 (AI-251): If the designated type is an interface we\n             --  add an implicit conversion to force the displacement of the"}, {"sha": "ba09aa69807a4a65bd84d3985d7b66e91719b0a2", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e84e11ba0a57e5a319504d4f0197aad385f85e80/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e84e11ba0a57e5a319504d4f0197aad385f85e80/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=e84e11ba0a57e5a319504d4f0197aad385f85e80", "patch": "@@ -3440,7 +3440,8 @@ package body Exp_Ch4 is\n                           and then\n                             Ekind (Etype (Nod)) = E_Anonymous_Access_Type\n                         then\n-                           Apply_Accessibility_Check (Nod, Typ);\n+                           Apply_Accessibility_Check\n+                             (Nod, Typ, Insert_Node => Nod);\n                         end if;\n \n                         Next_Elmt (Discr);\n@@ -7552,9 +7553,9 @@ package body Exp_Ch4 is\n \n          --  Apply an accessibility check when the conversion operand is an\n          --  access parameter (or a renaming thereof), unless conversion was\n-         --  expanded from an unchecked or unrestricted access attribute. Note\n-         --  that other checks may still need to be applied below (such as\n-         --  tagged type checks).\n+         --  expanded from an Unchecked_ or Unrestricted_Access attribute.\n+         --  Note that other checks may still need to be applied below (such\n+         --  as tagged type checks).\n \n          if Is_Entity_Name (Operand)\n            and then\n@@ -7568,9 +7569,10 @@ package body Exp_Ch4 is\n            and then (Nkind (Original_Node (N)) /= N_Attribute_Reference\n                       or else Attribute_Name (Original_Node (N)) = Name_Access)\n          then\n-            Apply_Accessibility_Check (Operand, Target_Type);\n+            Apply_Accessibility_Check\n+              (Operand, Target_Type, Insert_Node => Operand);\n \n-         --  If the level of the operand type is statically deeper then the\n+         --  If the level of the operand type is statically deeper than the\n          --  level of the target type, then force Program_Error. Note that this\n          --  can only occur for cases where the attribute is within the body of\n          --  an instantiation (otherwise the conversion will already have been"}]}