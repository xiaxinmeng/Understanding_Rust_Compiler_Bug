{"sha": "825b856cd08968694085aa13d0b937520b67a19d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI1Yjg1NmNkMDg5Njg2OTQwODVhYTEzZDBiOTM3NTIwYjY3YTE5ZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-13T17:55:24Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-13T17:55:24Z"}, "message": "[AArch64] SVE tests\n\nThis patch adds gcc.target/aarch64 tests for SVE, and forces some\nexisting Advanced SIMD tests to use -march=armv8-a.\n\n2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/testsuite/\n\t* lib/target-supports.exp (check_effective_target_aarch64_asm_sve_ok):\n\tNew proc.\n\t* gcc.target/aarch64/bic_imm_1.c: Use #pragma GCC target \"+nosve\".\n\t* gcc.target/aarch64/fmaxmin.c: Likewise.\n\t* gcc.target/aarch64/fmul_fcvt_2.c: Likewise.\n\t* gcc.target/aarch64/orr_imm_1.c: Likewise.\n\t* gcc.target/aarch64/pr62178.c: Likewise.\n\t* gcc.target/aarch64/pr71727-2.c: Likewise.\n\t* gcc.target/aarch64/saddw-1.c: Likewise.\n\t* gcc.target/aarch64/saddw-2.c: Likewise.\n\t* gcc.target/aarch64/uaddw-1.c: Likewise.\n\t* gcc.target/aarch64/uaddw-2.c: Likewise.\n\t* gcc.target/aarch64/uaddw-3.c: Likewise.\n\t* gcc.target/aarch64/vect-add-sub-cond.c: Likewise.\n\t* gcc.target/aarch64/vect-compile.c: Likewise.\n\t* gcc.target/aarch64/vect-faddv-compile.c: Likewise.\n\t* gcc.target/aarch64/vect-fcm-eq-d.c: Likewise.\n\t* gcc.target/aarch64/vect-fcm-eq-f.c: Likewise.\n\t* gcc.target/aarch64/vect-fcm-ge-d.c: Likewise.\n\t* gcc.target/aarch64/vect-fcm-ge-f.c: Likewise.\n\t* gcc.target/aarch64/vect-fcm-gt-d.c: Likewise.\n\t* gcc.target/aarch64/vect-fcm-gt-f.c: Likewise.\n\t* gcc.target/aarch64/vect-fmax-fmin-compile.c: Likewise.\n\t* gcc.target/aarch64/vect-fmaxv-fminv-compile.c: Likewise.\n\t* gcc.target/aarch64/vect-fmovd-zero.c: Likewise.\n\t* gcc.target/aarch64/vect-fmovd.c: Likewise.\n\t* gcc.target/aarch64/vect-fmovf-zero.c: Likewise.\n\t* gcc.target/aarch64/vect-fmovf.c: Likewise.\n\t* gcc.target/aarch64/vect-fp-compile.c: Likewise.\n\t* gcc.target/aarch64/vect-ld1r-compile-fp.c: Likewise.\n\t* gcc.target/aarch64/vect-ld1r-compile.c: Likewise.\n\t* gcc.target/aarch64/vect-movi.c: Likewise.\n\t* gcc.target/aarch64/vect-mull-compile.c: Likewise.\n\t* gcc.target/aarch64/vect-reduc-or_1.c: Likewise.\n\t* gcc.target/aarch64/vect-vaddv.c: Likewise.\n\t* gcc.target/aarch64/vect_saddl_1.c: Likewise.\n\t* gcc.target/aarch64/vect_smlal_1.c: Likewise.\n\t* gcc.target/aarch64/vector_initialization_nostack.c: XFAIL for\n\tfixed-length SVE.\n\t* gcc.target/aarch64/sve/aarch64-sve.exp: New file.\n\t* gcc.target/aarch64/sve/arith_1.c: New test.\n\t* gcc.target/aarch64/sve/const_pred_1.C: Likewise.\n\t* gcc.target/aarch64/sve/const_pred_2.C: Likewise.\n\t* gcc.target/aarch64/sve/const_pred_3.C: Likewise.\n\t* gcc.target/aarch64/sve/const_pred_4.C: Likewise.\n\t* gcc.target/aarch64/sve/cvtf_signed_1.c: Likewise.\n\t* gcc.target/aarch64/sve/cvtf_signed_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cvtf_unsigned_1.c: Likewise.\n\t* gcc.target/aarch64/sve/cvtf_unsigned_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/dup_imm_1.c: Likewise.\n\t* gcc.target/aarch64/sve/dup_imm_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/dup_lane_1.c: Likewise.\n\t* gcc.target/aarch64/sve/ext_1.c: Likewise.\n\t* gcc.target/aarch64/sve/ext_2.c: Likewise.\n\t* gcc.target/aarch64/sve/extract_1.c: Likewise.\n\t* gcc.target/aarch64/sve/extract_2.c: Likewise.\n\t* gcc.target/aarch64/sve/extract_3.c: Likewise.\n\t* gcc.target/aarch64/sve/extract_4.c: Likewise.\n\t* gcc.target/aarch64/sve/fabs_1.c: Likewise.\n\t* gcc.target/aarch64/sve/fcvtz_signed_1.c: Likewise.\n\t* gcc.target/aarch64/sve/fcvtz_signed_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/fcvtz_unsigned_1.c: Likewise.\n\t* gcc.target/aarch64/sve/fcvtz_unsigned_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/fdiv_1.c: Likewise.\n\t* gcc.target/aarch64/sve/fdup_1.c: Likewise.\n\t* gcc.target/aarch64/sve/fdup_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/fmad_1.c: Likewise.\n\t* gcc.target/aarch64/sve/fmla_1.c: Likewise.\n\t* gcc.target/aarch64/sve/fmls_1.c: Likewise.\n\t* gcc.target/aarch64/sve/fmsb_1.c: Likewise.\n\t* gcc.target/aarch64/sve/fmul_1.c: Likewise.\n\t* gcc.target/aarch64/sve/fneg_1.c: Likewise.\n\t* gcc.target/aarch64/sve/fnmad_1.c: Likewise.\n\t* gcc.target/aarch64/sve/fnmla_1.c: Likewise.\n\t* gcc.target/aarch64/sve/fnmls_1.c: Likewise.\n\t* gcc.target/aarch64/sve/fnmsb_1.c: Likewise.\n\t* gcc.target/aarch64/sve/fp_arith_1.c: Likewise.\n\t* gcc.target/aarch64/sve/frinta_1.c: Likewise.\n\t* gcc.target/aarch64/sve/frinti_1.c: Likewise.\n\t* gcc.target/aarch64/sve/frintm_1.c: Likewise.\n\t* gcc.target/aarch64/sve/frintp_1.c: Likewise.\n\t* gcc.target/aarch64/sve/frintx_1.c: Likewise.\n\t* gcc.target/aarch64/sve/frintz_1.c: Likewise.\n\t* gcc.target/aarch64/sve/fsqrt_1.c: Likewise.\n\t* gcc.target/aarch64/sve/fsubr_1.c: Likewise.\n\t* gcc.target/aarch64/sve/index_1.c: Likewise.\n\t* gcc.target/aarch64/sve/index_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/ld1r_1.c: Likewise.\n\t* gcc.target/aarch64/sve/load_const_offset_1.c: Likewise.\n\t* gcc.target/aarch64/sve/load_const_offset_2.c: Likewise.\n\t* gcc.target/aarch64/sve/load_const_offset_3.c: Likewise.\n\t* gcc.target/aarch64/sve/load_scalar_offset_1.c: Likewise.\n\t* gcc.target/aarch64/sve/logical_1.c: Likewise.\n\t* gcc.target/aarch64/sve/loop_add_1.c: Likewise.\n\t* gcc.target/aarch64/sve/loop_add_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/mad_1.c: Likewise.\n\t* gcc.target/aarch64/sve/maxmin_1.c: Likewise.\n\t* gcc.target/aarch64/sve/maxmin_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/maxmin_strict_1.c: Likewise.\n\t* gcc.target/aarch64/sve/maxmin_strict_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/mla_1.c: Likewise.\n\t* gcc.target/aarch64/sve/mls_1.c: Likewise.\n\t* gcc.target/aarch64/sve/mov_rr_1.c: Likewise.\n\t* gcc.target/aarch64/sve/msb_1.c: Likewise.\n\t* gcc.target/aarch64/sve/mul_1.c: Likewise.\n\t* gcc.target/aarch64/sve/neg_1.c: Likewise.\n\t* gcc.target/aarch64/sve/nlogical_1.c: Likewise.\n\t* gcc.target/aarch64/sve/nlogical_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/pack_1.c: Likewise.\n\t* gcc.target/aarch64/sve/pack_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/pack_fcvt_signed_1.c: Likewise.\n\t* gcc.target/aarch64/sve/pack_fcvt_signed_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/pack_fcvt_unsigned_1.c: Likewise.\n\t* gcc.target/aarch64/sve/pack_fcvt_unsigned_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/pack_float_1.c: Likewise.\n\t* gcc.target/aarch64/sve/pack_float_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/popcount_1.c: Likewise.\n\t* gcc.target/aarch64/sve/popcount_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/reduc_1.c: Likewise.\n\t* gcc.target/aarch64/sve/reduc_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/reduc_2.c: Likewise.\n\t* gcc.target/aarch64/sve/reduc_2_run.c: Likewise.\n\t* gcc.target/aarch64/sve/reduc_3.c: Likewise.\n\t* gcc.target/aarch64/sve/rev_1.c: Likewise.\n\t* gcc.target/aarch64/sve/revb_1.c: Likewise.\n\t* gcc.target/aarch64/sve/revh_1.c: Likewise.\n\t* gcc.target/aarch64/sve/revw_1.c: Likewise.\n\t* gcc.target/aarch64/sve/shift_1.c: Likewise.\n\t* gcc.target/aarch64/sve/single_1.c: Likewise.\n\t* gcc.target/aarch64/sve/single_2.c: Likewise.\n\t* gcc.target/aarch64/sve/single_3.c: Likewise.\n\t* gcc.target/aarch64/sve/single_4.c: Likewise.\n\t* gcc.target/aarch64/sve/spill_1.c: Likewise.\n\t* gcc.target/aarch64/sve/store_scalar_offset_1.c: Likewise.\n\t* gcc.target/aarch64/sve/subr_1.c: Likewise.\n\t* gcc.target/aarch64/sve/trn1_1.c: Likewise.\n\t* gcc.target/aarch64/sve/trn2_1.c: Likewise.\n\t* gcc.target/aarch64/sve/unpack_fcvt_signed_1.c: Likewise.\n\t* gcc.target/aarch64/sve/unpack_fcvt_signed_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/unpack_fcvt_unsigned_1.c: Likewise.\n\t* gcc.target/aarch64/sve/unpack_fcvt_unsigned_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/unpack_float_1.c: Likewise.\n\t* gcc.target/aarch64/sve/unpack_float_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/unpack_signed_1.c: Likewise.\n\t* gcc.target/aarch64/sve/unpack_signed_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/unpack_unsigned_1.c: Likewise.\n\t* gcc.target/aarch64/sve/unpack_unsigned_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/uzp1_1.c: Likewise.\n\t* gcc.target/aarch64/sve/uzp1_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/uzp2_1.c: Likewise.\n\t* gcc.target/aarch64/sve/uzp2_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/vcond_1.C: Likewise.\n\t* gcc.target/aarch64/sve/vcond_1_run.C: Likewise.\n\t* gcc.target/aarch64/sve/vcond_2.c: Likewise.\n\t* gcc.target/aarch64/sve/vcond_2_run.c: Likewise.\n\t* gcc.target/aarch64/sve/vcond_3.c: Likewise.\n\t* gcc.target/aarch64/sve/vcond_4.c: Likewise.\n\t* gcc.target/aarch64/sve/vcond_4_run.c: Likewise.\n\t* gcc.target/aarch64/sve/vcond_5.c: Likewise.\n\t* gcc.target/aarch64/sve/vcond_5_run.c: Likewise.\n\t* gcc.target/aarch64/sve/vcond_6.c: Likewise.\n\t* gcc.target/aarch64/sve/vcond_6_run.c: Likewise.\n\t* gcc.target/aarch64/sve/vec_init_1.c: Likewise.\n\t* gcc.target/aarch64/sve/vec_init_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/vec_init_2.c: Likewise.\n\t* gcc.target/aarch64/sve/vec_perm_1.c: Likewise.\n\t* gcc.target/aarch64/sve/vec_perm_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/vec_perm_1_overrange_run.c: Likewise.\n\t* gcc.target/aarch64/sve/vec_perm_const_1.c: Likewise.\n\t* gcc.target/aarch64/sve/vec_perm_const_1_overrun.c: Likewise.\n\t* gcc.target/aarch64/sve/vec_perm_const_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/vec_perm_const_single_1.c: Likewise.\n\t* gcc.target/aarch64/sve/vec_perm_const_single_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/vec_perm_single_1.c: Likewise.\n\t* gcc.target/aarch64/sve/vec_perm_single_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/zip1_1.c: Likewise.\n\t* gcc.target/aarch64/sve/zip2_1.c: Likewise.\n\nReviewed-by: James Greenhalgh <james.greenhalgh@arm.com>\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r256614", "tree": {"sha": "2ef0f1b7a1855a1e11066a2ac129694a98d1454e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ef0f1b7a1855a1e11066a2ac129694a98d1454e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/825b856cd08968694085aa13d0b937520b67a19d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/825b856cd08968694085aa13d0b937520b67a19d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/825b856cd08968694085aa13d0b937520b67a19d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/825b856cd08968694085aa13d0b937520b67a19d/comments", "author": null, "committer": null, "parents": [{"sha": "801e38459d49a0b55eacc5013e5692394dd290d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/801e38459d49a0b55eacc5013e5692394dd290d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/801e38459d49a0b55eacc5013e5692394dd290d2"}], "stats": {"total": 6951, "additions": 6942, "deletions": 9}, "files": [{"sha": "eb1b229530aab3197a061cc5cb1765d5786a8c97", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,3 +1,185 @@\n+2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_aarch64_asm_sve_ok):\n+\tNew proc.\n+\t* gcc.target/aarch64/bic_imm_1.c: Use #pragma GCC target \"+nosve\".\n+\t* gcc.target/aarch64/fmaxmin.c: Likewise.\n+\t* gcc.target/aarch64/fmul_fcvt_2.c: Likewise.\n+\t* gcc.target/aarch64/orr_imm_1.c: Likewise.\n+\t* gcc.target/aarch64/pr62178.c: Likewise.\n+\t* gcc.target/aarch64/pr71727-2.c: Likewise.\n+\t* gcc.target/aarch64/saddw-1.c: Likewise.\n+\t* gcc.target/aarch64/saddw-2.c: Likewise.\n+\t* gcc.target/aarch64/uaddw-1.c: Likewise.\n+\t* gcc.target/aarch64/uaddw-2.c: Likewise.\n+\t* gcc.target/aarch64/uaddw-3.c: Likewise.\n+\t* gcc.target/aarch64/vect-add-sub-cond.c: Likewise.\n+\t* gcc.target/aarch64/vect-compile.c: Likewise.\n+\t* gcc.target/aarch64/vect-faddv-compile.c: Likewise.\n+\t* gcc.target/aarch64/vect-fcm-eq-d.c: Likewise.\n+\t* gcc.target/aarch64/vect-fcm-eq-f.c: Likewise.\n+\t* gcc.target/aarch64/vect-fcm-ge-d.c: Likewise.\n+\t* gcc.target/aarch64/vect-fcm-ge-f.c: Likewise.\n+\t* gcc.target/aarch64/vect-fcm-gt-d.c: Likewise.\n+\t* gcc.target/aarch64/vect-fcm-gt-f.c: Likewise.\n+\t* gcc.target/aarch64/vect-fmax-fmin-compile.c: Likewise.\n+\t* gcc.target/aarch64/vect-fmaxv-fminv-compile.c: Likewise.\n+\t* gcc.target/aarch64/vect-fmovd-zero.c: Likewise.\n+\t* gcc.target/aarch64/vect-fmovd.c: Likewise.\n+\t* gcc.target/aarch64/vect-fmovf-zero.c: Likewise.\n+\t* gcc.target/aarch64/vect-fmovf.c: Likewise.\n+\t* gcc.target/aarch64/vect-fp-compile.c: Likewise.\n+\t* gcc.target/aarch64/vect-ld1r-compile-fp.c: Likewise.\n+\t* gcc.target/aarch64/vect-ld1r-compile.c: Likewise.\n+\t* gcc.target/aarch64/vect-movi.c: Likewise.\n+\t* gcc.target/aarch64/vect-mull-compile.c: Likewise.\n+\t* gcc.target/aarch64/vect-reduc-or_1.c: Likewise.\n+\t* gcc.target/aarch64/vect-vaddv.c: Likewise.\n+\t* gcc.target/aarch64/vect_saddl_1.c: Likewise.\n+\t* gcc.target/aarch64/vect_smlal_1.c: Likewise.\n+\t* gcc.target/aarch64/vector_initialization_nostack.c: XFAIL for\n+\tfixed-length SVE.\n+\t* gcc.target/aarch64/sve/aarch64-sve.exp: New file.\n+\t* gcc.target/aarch64/sve/arith_1.c: New test.\n+\t* gcc.target/aarch64/sve/const_pred_1.C: Likewise.\n+\t* gcc.target/aarch64/sve/const_pred_2.C: Likewise.\n+\t* gcc.target/aarch64/sve/const_pred_3.C: Likewise.\n+\t* gcc.target/aarch64/sve/const_pred_4.C: Likewise.\n+\t* gcc.target/aarch64/sve/cvtf_signed_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/cvtf_signed_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cvtf_unsigned_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/cvtf_unsigned_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/dup_imm_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/dup_imm_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/dup_lane_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/ext_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/ext_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/extract_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/extract_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/extract_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/extract_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/fabs_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/fcvtz_signed_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/fcvtz_signed_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/fcvtz_unsigned_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/fcvtz_unsigned_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/fdiv_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/fdup_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/fdup_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/fmad_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/fmla_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/fmls_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/fmsb_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/fmul_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/fneg_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/fnmad_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/fnmla_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/fnmls_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/fnmsb_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/fp_arith_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/frinta_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/frinti_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/frintm_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/frintp_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/frintx_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/frintz_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/fsqrt_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/fsubr_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/index_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/index_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/ld1r_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/load_const_offset_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/load_const_offset_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/load_const_offset_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/load_scalar_offset_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/logical_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/loop_add_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/loop_add_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/mad_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/maxmin_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/maxmin_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/maxmin_strict_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/maxmin_strict_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/mla_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/mls_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/mov_rr_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/msb_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/mul_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/neg_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/nlogical_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/nlogical_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/pack_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/pack_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/pack_fcvt_signed_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/pack_fcvt_signed_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/pack_fcvt_unsigned_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/pack_fcvt_unsigned_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/pack_float_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/pack_float_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/popcount_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/popcount_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/reduc_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/reduc_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/reduc_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/reduc_2_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/reduc_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/rev_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/revb_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/revh_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/revw_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/shift_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/single_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/single_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/single_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/single_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/spill_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/store_scalar_offset_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/subr_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/trn1_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/trn2_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/unpack_fcvt_signed_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/unpack_fcvt_signed_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/unpack_fcvt_unsigned_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/unpack_fcvt_unsigned_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/unpack_float_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/unpack_float_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/unpack_signed_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/unpack_signed_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/unpack_unsigned_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/unpack_unsigned_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/uzp1_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/uzp1_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/uzp2_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/uzp2_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/vcond_1.C: Likewise.\n+\t* gcc.target/aarch64/sve/vcond_1_run.C: Likewise.\n+\t* gcc.target/aarch64/sve/vcond_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/vcond_2_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/vcond_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/vcond_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/vcond_4_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/vcond_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/vcond_5_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/vcond_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/vcond_6_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/vec_init_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/vec_init_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/vec_init_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/vec_perm_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/vec_perm_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/vec_perm_1_overrange_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/vec_perm_const_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/vec_perm_const_1_overrun.c: Likewise.\n+\t* gcc.target/aarch64/sve/vec_perm_const_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/vec_perm_const_single_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/vec_perm_const_single_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/vec_perm_single_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/vec_perm_single_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/zip1_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/zip2_1.c: Likewise.\n+\n 2018-01-13  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "08b2a9c540d40d420738c4ca05c851938b7de171", "filename": "gcc/testsuite/gcc.target/aarch64/bic_imm_1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbic_imm_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbic_imm_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbic_imm_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do assemble } */\n /* { dg-options \"-O2 --save-temps -ftree-vectorize\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n /* Each function uses the correspoding 'CLASS' in\n    Marco CHECK (aarch64_simd_valid_immediate).  */\n "}, {"sha": "8089037b98862cef764cc6c1cc9dd7d5d7f4edcb", "filename": "gcc/testsuite/gcc.target/aarch64/fmaxmin.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmaxmin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmaxmin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmaxmin.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -ftree-vectorize -fno-inline -fno-vect-cost-model -save-temps\" } */\n \n+#pragma GCC target \"+nosve\"\n \n extern void abort (void);\n double fmax (double, double);"}, {"sha": "8f0240bf5f7585b3098ddb23fef981270b0d7c73", "filename": "gcc/testsuite/gcc.target/aarch64/fmul_fcvt_2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmul_fcvt_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmul_fcvt_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmul_fcvt_2.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do run } */\n /* { dg-options \"-save-temps -O2 -ftree-vectorize -fno-inline -fno-vect-cost-model\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n #define N 1024\n \n #define FUNC_DEF(__a)\t\t\\"}, {"sha": "4c8208b5ac226ff93859f0d2633dac96bad3cac7", "filename": "gcc/testsuite/gcc.target/aarch64/orr_imm_1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Forr_imm_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Forr_imm_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Forr_imm_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do assemble } */\n /* { dg-options \"-O2 --save-temps -ftree-vectorize\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n /* Each function uses the correspoding 'CLASS' in\n    Marco CHECK (aarch64_simd_valid_immediate).  */\n "}, {"sha": "ccb400fc9aee7a419287dc006918de3fb9d7da73", "filename": "gcc/testsuite/gcc.target/aarch64/pr62178.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr62178.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr62178.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr62178.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n int a[30 +1][30 +1], b[30 +1][30 +1], r[30 +1][30 +1];\n \n void foo (void) {"}, {"sha": "58fe5bcd59c80ef78cca9e10f01b978023420e0f", "filename": "gcc/testsuite/gcc.target/aarch64/pr71727-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr71727-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr71727-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr71727-2.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-mstrict-align -O3\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n unsigned char foo(const unsigned char *buffer, unsigned int length)\n {\n   unsigned char sum;"}, {"sha": "f8871209b8a114e1e37b7ea1538417eef612c864", "filename": "gcc/testsuite/gcc.target/aarch64/saddw-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsaddw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsaddw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsaddw-1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n int \n t6(int len, void * dummy, short * __restrict x)\n {"}, {"sha": "b9fc442a2f7b6c83e3a75a5f813d04cfa2b6a6f6", "filename": "gcc/testsuite/gcc.target/aarch64/saddw-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsaddw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsaddw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsaddw-2.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n int \n t6(int len, void * dummy, int * __restrict x)\n {"}, {"sha": "934a6a8d4ea55c68eaf9e2afe934526d2976ff4a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/aarch64-sve.exp", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Faarch64-sve.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Faarch64-sve.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Faarch64-sve.exp?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,52 @@\n+#  Specific regression driver for AArch64 SVE.\n+#  Copyright (C) 2009-2018 Free Software Foundation, Inc.\n+#  Contributed by ARM Ltd.\n+#\n+#  This file is part of GCC.\n+#\n+#  GCC is free software; you can redistribute it and/or modify it\n+#  under the terms of the GNU General Public License as published by\n+#  the Free Software Foundation; either version 3, or (at your option)\n+#  any later version.\n+#\n+#  GCC is distributed in the hope that it will be useful, but\n+#  WITHOUT ANY WARRANTY; without even the implied warranty of\n+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+#  General Public License for more details.\n+#\n+#  You should have received a copy of the GNU General Public License\n+#  along with GCC; see the file COPYING3.  If not see\n+#  <http://www.gnu.org/licenses/>.  */\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't an AArch64 target.\n+if {![istarget aarch64*-*-*] } then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Force SVE if we're not testing it already.\n+if { [check_effective_target_aarch64_sve] } {\n+    set sve_flags \"\"\n+} else {\n+    set sve_flags \"-march=armv8.2-a+sve\"\n+}\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]] \\\n+    $sve_flags $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "c2e1f6c7eaebed334b818d495c6a28f9d00c696e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/arith_1.c", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Farith_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Farith_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Farith_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,121 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define DO_REGREG_OPS(TYPE, OP, NAME)\t\t\t\t\\\n+void varith_##TYPE##_##NAME (TYPE *dst, TYPE *src, int count)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    dst[i] = dst[i] OP src[i];\t\t\t\t\t\\\n+}\n+\n+#define DO_IMMEDIATE_OPS(VALUE, TYPE, OP, NAME)\t\t\\\n+void varithimm_##NAME##_##TYPE (TYPE *dst, int count)\t\\\n+{\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\\\n+    dst[i] = dst[i] OP VALUE;\t\t\t\t\\\n+}\n+\n+#define DO_ARITH_OPS(TYPE, OP, NAME)\t\t\t\\\n+  DO_REGREG_OPS (TYPE, OP, NAME);\t\t\t\\\n+  DO_IMMEDIATE_OPS (0, TYPE, OP, NAME ## 0);\t\t\\\n+  DO_IMMEDIATE_OPS (5, TYPE, OP, NAME ## 5);\t\t\\\n+  DO_IMMEDIATE_OPS (255, TYPE, OP, NAME ## 255);\t\\\n+  DO_IMMEDIATE_OPS (256, TYPE, OP, NAME ## 256);\t\\\n+  DO_IMMEDIATE_OPS (257, TYPE, OP, NAME ## 257);\t\\\n+  DO_IMMEDIATE_OPS (65280, TYPE, OP, NAME ## 65280);\t\\\n+  DO_IMMEDIATE_OPS (65281, TYPE, OP, NAME ## 65281);\t\\\n+  DO_IMMEDIATE_OPS (-1, TYPE, OP, NAME ## minus1);\n+\n+DO_ARITH_OPS (int8_t, +, add)\n+DO_ARITH_OPS (int16_t, +, add)\n+DO_ARITH_OPS (int32_t, +, add)\n+DO_ARITH_OPS (int64_t, +, add)\n+DO_ARITH_OPS (int8_t, -, minus)\n+DO_ARITH_OPS (int16_t, -, minus)\n+DO_ARITH_OPS (int32_t, -, minus)\n+DO_ARITH_OPS (int64_t, -, minus)\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 5 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 5 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.b, z[0-9]+\\.b, #1\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.b, z[0-9]+\\.b, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.b, z[0-9]+\\.b, #251\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.b, z[0-9]+\\.b, #255\\n} 4 } } */\n+/* { dg-final { scan-assembler-not {\\tadd\\tz[0-9]+\\.b, z[0-9]+\\.b, #256\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tadd\\tz[0-9]+\\.b, z[0-9]+\\.b, #257\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tadd\\tz[0-9]+\\.b, z[0-9]+\\.b, #65280\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tadd\\tz[0-9]+\\.b, z[0-9]+\\.b, #65281\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tadd\\tz[0-9]+\\.b, z[0-9]+\\.b, #-1\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tsub\\tz[0-9]+\\.b, z[0-9]+\\.b, #1\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, z[0-9]+\\.h, #1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, z[0-9]+\\.h, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, z[0-9]+\\.h, #255\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, z[0-9]+\\.h, #256\\n} 2 } } */\n+/* { dg-final { scan-assembler-not {\\tadd\\tz[0-9]+\\.h, z[0-9]+\\.h, #257\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, z[0-9]+\\.h, #65280\\n} 2 } } */\n+/* { dg-final { scan-assembler-not {\\tadd\\tz[0-9]+\\.h, z[0-9]+\\.h, #65281\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tadd\\tz[0-9]+\\.h, z[0-9]+\\.h, #-1\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.h, z[0-9]+\\.h, #1\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, #255\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, #256\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, #257\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, #65280\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, #65281\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, #-1\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.s, z[0-9]+\\.s, #1\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, #255\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, #256\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, #257\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, #65280\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, #65281\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, #-1\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.d, z[0-9]+\\.d, #1\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tsub\\tz[0-9]+\\.b, z[0-9]+\\.b, #1\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tsub\\tz[0-9]+\\.b, z[0-9]+\\.b, #5\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tsub\\tz[0-9]+\\.b, z[0-9]+\\.b, #255\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tsub\\tz[0-9]+\\.b, z[0-9]+\\.b, #256\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tsub\\tz[0-9]+\\.b, z[0-9]+\\.b, #257\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tsub\\tz[0-9]+\\.b, z[0-9]+\\.b, #65280\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tsub\\tz[0-9]+\\.b, z[0-9]+\\.b, #65281\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tsub\\tz[0-9]+\\.b, z[0-9]+\\.b, #-1\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.h, z[0-9]+\\.h, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.h, z[0-9]+\\.h, #255\\n} 2 } } */\n+/* { dg-final { scan-assembler-not {\\tsub\\tz[0-9]+\\.h, z[0-9]+\\.h, #256\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tsub\\tz[0-9]+\\.h, z[0-9]+\\.h, #257\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tsub\\tz[0-9]+\\.h, z[0-9]+\\.h, #65280\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tsub\\tz[0-9]+\\.h, z[0-9]+\\.h, #65281\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tsub\\tz[0-9]+\\.h, z[0-9]+\\.h, #-1\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.s, z[0-9]+\\.s, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.s, z[0-9]+\\.s, #255\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.s, z[0-9]+\\.s, #256\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsub\\tz[0-9]+\\.s, z[0-9]+\\.s, #257\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.s, z[0-9]+\\.s, #65280\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsub\\tz[0-9]+\\.s, z[0-9]+\\.s, #65281\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tsub\\tz[0-9]+\\.s, z[0-9]+\\.s, #-1\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, #1\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.d, z[0-9]+\\.d, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.d, z[0-9]+\\.d, #255\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.d, z[0-9]+\\.d, #256\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsub\\tz[0-9]+\\.d, z[0-9]+\\.d, #257\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.d, z[0-9]+\\.d, #65280\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsub\\tz[0-9]+\\.d, z[0-9]+\\.d, #65281\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tsub\\tz[0-9]+\\.d, z[0-9]+\\.d, #-1\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, #1\\n} 1 } } */"}, {"sha": "58ab1598eb0fca40c1c060a4a97c591ebbab328b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/const_pred_1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fconst_pred_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fconst_pred_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fconst_pred_1.C?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msve-vector-bits=256\" } */\n+\n+typedef signed char vnx16qi __attribute__((vector_size(32)));\n+\n+vnx16qi\n+foo (vnx16qi x, vnx16qi y)\n+{\n+  return (vnx16qi) { -1, 0, 0, -1, -1, -1, 0, 0,\n+\t\t     -1, -1, -1, -1, 0, 0, 0, 0,\n+\t\t     -1, -1, -1, -1, -1, -1, -1, -1,\n+\t\t     0, 0, 0, 0, 0, 0, 0, 0 } ? x : y;\n+}\n+\n+/* { dg-final { scan-assembler {\\tldr\\tp[0-9]+,} } } */\n+/* { dg-final { scan-assembler {\\t\\.byte\\t57\\n\\t\\.byte\\t15\\n\\t\\.byte\\t(255|-1)\\n\\t\\.byte\\t0\\n} } } */"}, {"sha": "55dc8741f4c692ec1b6e1cbcd956a617af27d96a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/const_pred_2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fconst_pred_2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fconst_pred_2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fconst_pred_2.C?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msve-vector-bits=256\" } */\n+\n+typedef short vnx8hi __attribute__((vector_size(32)));\n+\n+vnx8hi\n+foo (vnx8hi x, vnx8hi y)\n+{\n+  return (vnx8hi) { -1, 0, 0, -1, -1, -1, 0, 0,\n+\t\t    -1, -1, -1, -1, 0, 0, 0, 0 } ? x : y;\n+}\n+\n+/* { dg-final { scan-assembler {\\tldr\\tp[0-9]+,} } } */\n+/* { dg-final { scan-assembler {\\t\\.byte\\t65\\n\\t\\.byte\\t5\\n\\t\\.byte\\t85\\n\\t\\.byte\\t0\\n} } } */"}, {"sha": "16d0a33f50e9ddb63f4fab81f80100da32f76270", "filename": "gcc/testsuite/gcc.target/aarch64/sve/const_pred_3.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fconst_pred_3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fconst_pred_3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fconst_pred_3.C?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msve-vector-bits=256\" } */\n+\n+typedef int vnx4si __attribute__((vector_size(32)));\n+\n+vnx4si\n+foo (vnx4si x, vnx4si y)\n+{\n+  return (vnx4si) { -1, 0, 0, -1, -1, -1, 0, 0 } ? x : y;\n+}\n+\n+/* { dg-final { scan-assembler {\\tldr\\tp[0-9]+,} } } */\n+/* { dg-final { scan-assembler {\\t\\.byte\\t1\\n\\t\\.byte\\t16\\n\\t\\.byte\\t17\\n\\t\\.byte\\t0\\n} } } */"}, {"sha": "02bd0963246fe21469fd747a23ad353e5604812a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/const_pred_4.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fconst_pred_4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fconst_pred_4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fconst_pred_4.C?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msve-vector-bits=256\" } */\n+\n+typedef long long vnx2di __attribute__((vector_size(32)));\n+\n+vnx2di\n+foo (vnx2di x, vnx2di y)\n+{\n+  return (vnx2di) { -1, 0, 0, -1 } ? x : y;\n+}\n+\n+/* { dg-final { scan-assembler {\\tldr\\tp[0-9]+,} } } */\n+/* { dg-final { scan-assembler {\\t\\.byte\\t1\\n\\t\\.byte\\t0\\n\\t\\.byte\\t0\\n\\t\\.byte\\t1\\n} } } */"}, {"sha": "b4a59b8d08a48e079946707bbefd2cbd4fd65457", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cvtf_signed_1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcvtf_signed_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcvtf_signed_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcvtf_signed_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+void __attribute__ ((noinline, noclone))\n+vcvtf_16 (_Float16 *dst, int16_t *src1, int size)\n+{\n+  for (int i = 0; i < size; i++)\n+    dst[i] = (_Float16) src1[i];\n+}\n+\n+void __attribute__ ((noinline, noclone))\n+vcvtf_32 (float *dst, int32_t *src1, int size)\n+{\n+  for (int i = 0; i < size; i++)\n+    dst[i] = (float) src1[i];\n+}\n+\n+void __attribute__ ((noinline, noclone))\n+vcvtf_64 (double *dst, int64_t *src1, int size)\n+{\n+  for (int i = 0; i < size; i++)\n+    dst[i] = (double) src1[i];\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tscvtf\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tscvtf\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tscvtf\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "451c28506c9a794849894699221fb1b189b857ba", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cvtf_signed_1_run.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcvtf_signed_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcvtf_signed_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcvtf_signed_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cvtf_signed_1.c\"\n+\n+#define ARRAY_SIZE 47\n+\n+#define VAL1 (i ^ 3)\n+#define VAL2 ((i * 3) - (15 * 3))\n+#define VAL3 ((i * 0xffdfffef) - (11 * 0xffdfffef))\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  static _Float16 array_dest16[ARRAY_SIZE];\n+  static float array_dest32[ARRAY_SIZE];\n+  static double array_dest64[ARRAY_SIZE];\n+\n+  int16_t array_source16[ARRAY_SIZE];\n+  int32_t array_source32[ARRAY_SIZE];\n+  int64_t array_source64[ARRAY_SIZE];\n+\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    {\n+      array_source16[i] = VAL1;\n+      array_source32[i] = VAL2;\n+      array_source64[i] = VAL3;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+\n+  vcvtf_16 (array_dest16, array_source16, ARRAY_SIZE);\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    if (array_dest16[i] != (_Float16) VAL1)\n+      __builtin_abort ();\n+\n+  vcvtf_32 (array_dest32, array_source32, ARRAY_SIZE);\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    if (array_dest32[i] != (float) VAL2)\n+      __builtin_abort ();\n+\n+  vcvtf_64 (array_dest64, array_source64, ARRAY_SIZE);\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    if (array_dest64[i] != (double) VAL3)\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "40e44cd3f0c0334b21604dd333cd302c46d75f48", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cvtf_unsigned_1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcvtf_unsigned_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcvtf_unsigned_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcvtf_unsigned_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+void __attribute__ ((noinline, noclone))\n+vcvtf_16 (_Float16 *dst, uint16_t *src1, int size)\n+{\n+  for (int i = 0; i < size; i++)\n+    dst[i] = (_Float16) src1[i];\n+}\n+\n+void __attribute__ ((noinline, noclone))\n+vcvtf_32 (float *dst, uint32_t *src1, int size)\n+{\n+  for (int i = 0; i < size; i++)\n+    dst[i] = (float) src1[i];\n+}\n+\n+void __attribute__ ((noinline, noclone))\n+vcvtf_64 (double *dst, uint64_t *src1, int size)\n+{\n+  for (int i = 0; i < size; i++)\n+    dst[i] = (double) src1[i];\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tucvtf\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tucvtf\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tucvtf\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "a9126f6d2313d9f17520c4e37ff4ad022b672304", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cvtf_unsigned_1_run.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcvtf_unsigned_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcvtf_unsigned_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcvtf_unsigned_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cvtf_unsigned_1.c\"\n+\n+#define ARRAY_SIZE 65\n+\n+#define VAL1 (i * 109)\n+#define VAL2 (i * 9456)\n+#define VAL3 (i * 0xfddff13f)\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  static _Float16 array_dest16[ARRAY_SIZE];\n+  static float array_dest32[ARRAY_SIZE];\n+  static double array_dest64[ARRAY_SIZE];\n+\n+  uint16_t array_source16[ARRAY_SIZE];\n+  uint32_t array_source32[ARRAY_SIZE];\n+  uint64_t array_source64[ARRAY_SIZE];\n+\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    {\n+      array_source16[i] = VAL1;\n+      array_source32[i] = VAL2;\n+      array_source64[i] = VAL3;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+\n+  vcvtf_16 (array_dest16, array_source16, ARRAY_SIZE);\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    if (array_dest16[i] != (_Float16) VAL1)\n+      __builtin_abort ();\n+\n+  vcvtf_32 (array_dest32, array_source32, ARRAY_SIZE);\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    if (array_dest32[i] != (float) VAL2)\n+      __builtin_abort ();\n+\n+  vcvtf_64 (array_dest64, array_source64, ARRAY_SIZE);\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    if (array_dest64[i] != (double) VAL3)\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "3b8854ebc3169565ef3f585969c89935f14d1e87", "filename": "gcc/testsuite/gcc.target/aarch64/sve/dup_imm_1.c", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fdup_imm_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fdup_imm_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fdup_imm_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,138 @@\n+/* { dg-do compile } */\n+/* -fno-tree-loop-distribute-patterns prevents conversion to memset.  */\n+/* { dg-options \"-O3 -fno-tree-loop-distribute-patterns\" } */\n+\n+#include <stdint.h>\n+\n+#define NUM_ELEMS(TYPE) (1024 / sizeof (TYPE))\n+\n+#define DEF_SET_IMM(TYPE, IMM, SUFFIX)\t\t\\\n+void __attribute__ ((noinline, noclone))\t\\\n+set_##TYPE##_##SUFFIX (TYPE *a)\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  for (int i = 0; i < NUM_ELEMS (TYPE); i++)\t\\\n+    a[i] = IMM;\t\t\t\t\t\\\n+}\n+\n+/* --- VALID --- */\n+\n+DEF_SET_IMM (int8_t, 0, imm_0)\n+DEF_SET_IMM (int16_t, 0, imm_0)\n+DEF_SET_IMM (int32_t, 0, imm_0)\n+DEF_SET_IMM (int64_t, 0, imm_0)\n+\n+DEF_SET_IMM (int8_t, -1, imm_m1)\n+DEF_SET_IMM (int16_t, -1, imm_m1)\n+DEF_SET_IMM (int32_t, -1, imm_m1)\n+DEF_SET_IMM (int64_t, -1, imm_m1)\n+\n+DEF_SET_IMM (int8_t, 1, imm_1)\n+DEF_SET_IMM (int16_t, 1, imm_1)\n+DEF_SET_IMM (int32_t, 1, imm_1)\n+DEF_SET_IMM (int64_t, 1, imm_1)\n+\n+DEF_SET_IMM (int8_t, 127, imm_127)\n+DEF_SET_IMM (int16_t, 127, imm_127)\n+DEF_SET_IMM (int32_t, 127, imm_127)\n+DEF_SET_IMM (int64_t, 127, imm_127)\n+\n+DEF_SET_IMM (int8_t, -128, imm_m128)\n+DEF_SET_IMM (int16_t, -128, imm_m128)\n+DEF_SET_IMM (int32_t, -128, imm_m128)\n+DEF_SET_IMM (int64_t, -128, imm_m128)\n+\n+// No uint8_t variant - size too large for a byte\n+DEF_SET_IMM (int16_t, 256, imm_256)\n+DEF_SET_IMM (int32_t, 256, imm_256)\n+DEF_SET_IMM (int64_t, 256, imm_256)\n+\n+// No uint8_t variant - size too large for a byte\n+DEF_SET_IMM (int16_t, 32512, imm_32512)\n+DEF_SET_IMM (int32_t, 32512, imm_32512)\n+DEF_SET_IMM (int64_t, 32512, imm_32512)\n+\n+// No uint8_t variant - size too large for a byte\n+DEF_SET_IMM (int16_t, -32768, imm_m32768)\n+DEF_SET_IMM (int32_t, -32768, imm_m32768)\n+DEF_SET_IMM (int64_t, -32768, imm_m32768)\n+\n+/* gcc will generate:\n+     dup z0.b, 0x01\n+*/\n+DEF_SET_IMM (int16_t, 0x0101, imm_01_pat)\n+DEF_SET_IMM (int32_t, 0x01010101, imm_01_pat)\n+DEF_SET_IMM (int64_t, 0x0101010101010101LL, imm_01_pat)\n+\n+/* gcc will generate:\n+     dup z0.h, 0x01\n+*/\n+DEF_SET_IMM (int32_t, 0x00010001, imm_0001_pat)\n+DEF_SET_IMM (int64_t, 0x0001000100010001LL, imm_0001_pat)\n+\n+/* gcc will generate:\n+     dup z0.b, 0xFE (-2)\n+*/\n+DEF_SET_IMM (int16_t, 0xFEFE, imm_FE_pat)\n+DEF_SET_IMM (int32_t, 0xFEFEFEFE, imm_FE_pat)\n+DEF_SET_IMM (int64_t, 0xFEFEFEFEFEFEFEFE, imm_FE_pat)\n+\n+/* gcc will generate:\n+     dup z0.h, 0xFFFE (-2)\n+*/\n+DEF_SET_IMM (int32_t, 0xFFFEFFFE, imm_FFFE_pat)\n+DEF_SET_IMM (int64_t, 0xFFFEFFFEFFFEFFFELL, imm_FFFE_pat)\n+\n+/* gcc will generate:\n+     dup z0.h, 0xFE00\n+*/\n+DEF_SET_IMM (int32_t, 0xFE00FE00, imm_FE00_pat)\n+DEF_SET_IMM (int64_t, 0xFE00FE00FE00FE00LL, imm_FE00_pat)\n+\n+\n+/* --- INVALID --- */\n+\n+// This shouldn't generate a dup as it's out of range, but also the compiler\n+// shouldn't assert!\n+DEF_SET_IMM (int32_t, 129, imm_m129)\n+DEF_SET_IMM (int32_t, 32513, imm_32513)\n+DEF_SET_IMM (int32_t, -32763, imm_m32763)\n+\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.b, #-1\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.b, #0\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.b, #1\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.h, #1\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.s, #1\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.d, #1\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.b, #127\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.h, #127\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.s, #127\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.d, #127\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.b, #-128\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.h, #-128\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.s, #-128\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.d, #-128\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.h, #256\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.s, #256\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.d, #256\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.h, #32512\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.s, #32512\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.d, #32512\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.h, #-32768\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.s, #-32768\\n} } } */\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.d, #-32768\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.b, #-2\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, #-2\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler {\\tmov\\tz[0-9]+\\.h, #-512\\n} } } */\n+\n+/* { dg-final { scan-assembler-not {#129\\n} } } */\n+/* { dg-final { scan-assembler-not {#32513\\n} } } */\n+/* { dg-final { scan-assembler-not {#-32763\\n} } } */"}, {"sha": "7f21ba71bd5e6501f8ae9eed4805c4f04291c981", "filename": "gcc/testsuite/gcc.target/aarch64/sve/dup_imm_1_run.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fdup_imm_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fdup_imm_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fdup_imm_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O3 -fno-tree-loop-distribute-patterns\" } */\n+\n+#include \"dup_imm_1.c\"\n+\n+#define TEST_SET_IMM(TYPE, IMM, SUFFIX)\t\t\\\n+  {\t\t\t\t\t\t\\\n+    TYPE v[NUM_ELEMS (TYPE)];\t\t\t\\\n+    set_##TYPE##_##SUFFIX (v);\t\t\t\\\n+    for (int i = 0; i < NUM_ELEMS (TYPE); i++)\t\\\n+      if (v[i] != (TYPE) IMM)\t\t\t\\\n+        __builtin_abort ();\t\t\t\\\n+  }\n+\n+int __attribute__ ((optimize (1)))\n+main (int argc, char **argv)\n+{\n+  TEST_SET_IMM (int8_t,  0, imm_0)\n+  TEST_SET_IMM (int16_t, 0, imm_0)\n+  TEST_SET_IMM (int32_t, 0, imm_0)\n+  TEST_SET_IMM (int64_t, 0, imm_0)\n+\n+  TEST_SET_IMM (int8_t,  -1, imm_m1)\n+  TEST_SET_IMM (int16_t, -1, imm_m1)\n+  TEST_SET_IMM (int32_t, -1, imm_m1)\n+  TEST_SET_IMM (int64_t, -1, imm_m1)\n+\n+  TEST_SET_IMM (int8_t,  1, imm_1)\n+  TEST_SET_IMM (int16_t, 1, imm_1)\n+  TEST_SET_IMM (int32_t, 1, imm_1)\n+  TEST_SET_IMM (int64_t, 1, imm_1)\n+\n+  TEST_SET_IMM (int8_t,  127, imm_127)\n+  TEST_SET_IMM (int16_t, 127, imm_127)\n+  TEST_SET_IMM (int32_t, 127, imm_127)\n+  TEST_SET_IMM (int64_t, 127, imm_127)\n+\n+  TEST_SET_IMM (int8_t,  -128, imm_m128)\n+  TEST_SET_IMM (int16_t, -128, imm_m128)\n+  TEST_SET_IMM (int32_t, -128, imm_m128)\n+  TEST_SET_IMM (int64_t, -128, imm_m128)\n+\n+  TEST_SET_IMM (int16_t, 256, imm_256)\n+  TEST_SET_IMM (int32_t, 256, imm_256)\n+  TEST_SET_IMM (int64_t, 256, imm_256)\n+\n+  TEST_SET_IMM (int16_t, 32512, imm_32512)\n+  TEST_SET_IMM (int32_t, 32512, imm_32512)\n+  TEST_SET_IMM (int64_t, 32512, imm_32512)\n+\n+  TEST_SET_IMM (int16_t, -32768, imm_m32768)\n+  TEST_SET_IMM (int32_t, -32768, imm_m32768)\n+  TEST_SET_IMM (int64_t, -32768, imm_m32768)\n+\n+  TEST_SET_IMM (int16_t, 0x0101, imm_01_pat)\n+  TEST_SET_IMM (int32_t, 0x01010101, imm_01_pat)\n+  TEST_SET_IMM (int64_t, 0x0101010101010101LL, imm_01_pat)\n+\n+  TEST_SET_IMM (int32_t, 0x00010001, imm_0001_pat)\n+  TEST_SET_IMM (int64_t, 0x0001000100010001LL, imm_0001_pat)\n+\n+  TEST_SET_IMM (int16_t, 0xFEFE, imm_FE_pat)\n+  TEST_SET_IMM (int32_t, 0xFEFEFEFE, imm_FE_pat)\n+  TEST_SET_IMM (int64_t, 0xFEFEFEFEFEFEFEFE, imm_FE_pat)\n+\n+  TEST_SET_IMM (int32_t, 0xFE00FE00, imm_FE00_pat)\n+  TEST_SET_IMM (int64_t, 0xFE00FE00FE00FE00, imm_FE00_pat)\n+\n+  return 0;\n+}"}, {"sha": "532847bb7e50095217988fbd66e9c58a006fdfc7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/dup_lane_1.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fdup_lane_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fdup_lane_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fdup_lane_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -msve-vector-bits=256\" } */\n+\n+#include <stdint.h>\n+\n+typedef int64_t vnx2di __attribute__((vector_size (32)));\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+typedef int16_t vnx8hi __attribute__((vector_size (32)));\n+typedef int8_t vnx16qi __attribute__((vector_size (32)));\n+typedef double vnx2df __attribute__((vector_size (32)));\n+typedef float vnx4sf __attribute__((vector_size (32)));\n+typedef _Float16 vnx8hf __attribute__((vector_size (32)));\n+\n+#define MASK_2(X) X, X\n+#define MASK_4(X) MASK_2 (X), MASK_2 (X)\n+#define MASK_8(X) MASK_4 (X), MASK_4 (X)\n+#define MASK_16(X) MASK_8 (X), MASK_8 (X)\n+#define MASK_32(X) MASK_16 (X), MASK_16 (X)\n+\n+#define INDEX_4 vnx2di\n+#define INDEX_8 vnx4si\n+#define INDEX_16 vnx8hi\n+#define INDEX_32 vnx16qi\n+\n+#define DUP_LANE(TYPE, NUNITS, INDEX)\t\t\t\t\t     \\\n+  TYPE dup_##INDEX##_##TYPE (TYPE values1, TYPE values2)\t\t     \\\n+  {\t\t\t\t\t\t\t\t\t     \\\n+    return __builtin_shuffle (values1, values2,\t\t\t\t     \\\n+\t\t\t      ((INDEX_##NUNITS) { MASK_##NUNITS (INDEX) })); \\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  T (vnx2di, 4, 0)\t\t\t\t\\\n+  T (vnx2di, 4, 2)\t\t\t\t\\\n+  T (vnx2di, 4, 3)\t\t\t\t\\\n+  T (vnx4si, 8, 0)\t\t\t\t\\\n+  T (vnx4si, 8, 5)\t\t\t\t\\\n+  T (vnx4si, 8, 7)\t\t\t\t\\\n+  T (vnx8hi, 16, 0)\t\t\t\t\\\n+  T (vnx8hi, 16, 6)\t\t\t\t\\\n+  T (vnx8hi, 16, 15)\t\t\t\t\\\n+  T (vnx16qi, 32, 0)\t\t\t\t\\\n+  T (vnx16qi, 32, 19)\t\t\t\t\\\n+  T (vnx16qi, 32, 31)\t\t\t\t\\\n+  T (vnx2df, 4, 0)\t\t\t\t\\\n+  T (vnx2df, 4, 2)\t\t\t\t\\\n+  T (vnx2df, 4, 3)\t\t\t\t\\\n+  T (vnx4sf, 8, 0)\t\t\t\t\\\n+  T (vnx4sf, 8, 5)\t\t\t\t\\\n+  T (vnx4sf, 8, 7)\t\t\t\t\\\n+  T (vnx8hf, 16, 0)\t\t\t\t\\\n+  T (vnx8hf, 16, 6)\t\t\t\t\\\n+  T (vnx8hf, 16, 15)\t\t\t\t\\\n+\n+TEST_ALL (DUP_LANE)\n+\n+/* { dg-final { scan-assembler-not {\\ttbl\\t} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.d, z[0-9]+\\.d\\[0\\]} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.d, z[0-9]+\\.d\\[2\\]} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.d, z[0-9]+\\.d\\[3\\]} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.s, z[0-9]+\\.s\\[0\\]} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.s, z[0-9]+\\.s\\[5\\]} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.s, z[0-9]+\\.s\\[7\\]} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.h, z[0-9]+\\.h\\[0\\]} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.h, z[0-9]+\\.h\\[6\\]} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.h, z[0-9]+\\.h\\[15\\]} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.b, z[0-9]+\\.b\\[0\\]} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.b, z[0-9]+\\.b\\[19\\]} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.b, z[0-9]+\\.b\\[31\\]} 1 } } */"}, {"sha": "ba304e36e36ab2e524e8e414a1e12fc1d8a6471f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/ext_1.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fext_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fext_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fext_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -msve-vector-bits=256\" } */\n+\n+#include <stdint.h>\n+\n+typedef int64_t vnx2di __attribute__((vector_size (32)));\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+typedef int16_t vnx8hi __attribute__((vector_size (32)));\n+typedef int8_t vnx16qi __attribute__((vector_size (32)));\n+typedef double vnx2df __attribute__((vector_size (32)));\n+typedef float vnx4sf __attribute__((vector_size (32)));\n+typedef _Float16 vnx8hf __attribute__((vector_size (32)));\n+\n+#define MASK_2(X) X, X + 1\n+#define MASK_4(X) MASK_2 (X), MASK_2 (X + 2)\n+#define MASK_8(X) MASK_4 (X), MASK_4 (X + 4)\n+#define MASK_16(X) MASK_8 (X), MASK_8 (X + 8)\n+#define MASK_32(X) MASK_16 (X), MASK_16 (X + 16)\n+\n+#define INDEX_4 vnx2di\n+#define INDEX_8 vnx4si\n+#define INDEX_16 vnx8hi\n+#define INDEX_32 vnx16qi\n+\n+#define DUP_LANE(TYPE, NUNITS, INDEX)\t\t\t\t\t     \\\n+  TYPE dup_##INDEX##_##TYPE (TYPE values1, TYPE values2)\t\t     \\\n+  {\t\t\t\t\t\t\t\t\t     \\\n+    return __builtin_shuffle (values1, values2,\t\t\t\t     \\\n+\t\t\t      ((INDEX_##NUNITS) { MASK_##NUNITS (INDEX) })); \\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  T (vnx2di, 4, 1)\t\t\t\t\\\n+  T (vnx2di, 4, 2)\t\t\t\t\\\n+  T (vnx2di, 4, 3)\t\t\t\t\\\n+  T (vnx4si, 8, 1)\t\t\t\t\\\n+  T (vnx4si, 8, 5)\t\t\t\t\\\n+  T (vnx4si, 8, 7)\t\t\t\t\\\n+  T (vnx8hi, 16, 1)\t\t\t\t\\\n+  T (vnx8hi, 16, 6)\t\t\t\t\\\n+  T (vnx8hi, 16, 15)\t\t\t\t\\\n+  T (vnx16qi, 32, 1)\t\t\t\t\\\n+  T (vnx16qi, 32, 19)\t\t\t\t\\\n+  T (vnx16qi, 32, 31)\t\t\t\t\\\n+  T (vnx2df, 4, 1)\t\t\t\t\\\n+  T (vnx2df, 4, 2)\t\t\t\t\\\n+  T (vnx2df, 4, 3)\t\t\t\t\\\n+  T (vnx4sf, 8, 1)\t\t\t\t\\\n+  T (vnx4sf, 8, 5)\t\t\t\t\\\n+  T (vnx4sf, 8, 7)\t\t\t\t\\\n+  T (vnx8hf, 16, 1)\t\t\t\t\\\n+  T (vnx8hf, 16, 6)\t\t\t\t\\\n+  T (vnx8hf, 16, 15)\t\t\t\t\\\n+\n+TEST_ALL (DUP_LANE)\n+\n+/* { dg-final { scan-assembler-not {\\ttbl\\t} } } */\n+\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #2\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #4\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #8\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #12\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #16\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #19\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #20\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #24\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #28\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #30\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #31\\n} 1 } } */"}, {"sha": "0fe7e4c2843292275bf23446a7489777368ae434", "filename": "gcc/testsuite/gcc.target/aarch64/sve/ext_2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fext_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fext_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fext_2.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -msve-vector-bits=256\" } */\n+\n+typedef int vnx4si __attribute__((vector_size (32)));\n+\n+void\n+foo (void)\n+{\n+  register vnx4si x asm (\"z0\");\n+  register vnx4si y asm (\"z1\");\n+\n+  asm volatile (\"\" : \"=w\" (y));\n+  x = __builtin_shuffle (y, y, (vnx4si) { 1, 2, 3, 4, 5, 6, 7, 8 });\n+  asm volatile (\"\" :: \"w\" (x));\n+}\n+\n+/* { dg-final { scan-assembler {\\tmov\\tz0\\.d, z1\\.d\\n} } } */\n+/* { dg-final { scan-assembler {\\text\\tz0\\.b, z0\\.b, z[01]\\.b, #4\\n} } } */"}, {"sha": "df51ce381af93c8d2b9b9cf90626559960f758ce", "filename": "gcc/testsuite/gcc.target/aarch64/sve/extract_1.c", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,93 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=256 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+typedef int64_t vnx2di __attribute__((vector_size (32)));\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+typedef int16_t vnx8hi __attribute__((vector_size (32)));\n+typedef int8_t vnx16qi __attribute__((vector_size (32)));\n+typedef double vnx2df __attribute__((vector_size (32)));\n+typedef float vnx4sf __attribute__((vector_size (32)));\n+typedef _Float16 vnx8hf __attribute__((vector_size (32)));\n+\n+#define EXTRACT(ELT_TYPE, TYPE, INDEX)\t\t\\\n+  ELT_TYPE permute_##TYPE##_##INDEX (void)\t\\\n+  {\t\t\t\t\t\t\\\n+    TYPE values;\t\t\t\t\\\n+    asm (\"\" : \"=w\" (values));\t\t\t\\\n+    return values[INDEX];\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  T (int64_t, vnx2di, 0)\t\t\t\\\n+  T (int64_t, vnx2di, 1)\t\t\t\\\n+  T (int64_t, vnx2di, 2)\t\t\t\\\n+  T (int64_t, vnx2di, 3)\t\t\t\\\n+  T (int32_t, vnx4si, 0)\t\t\t\\\n+  T (int32_t, vnx4si, 1)\t\t\t\\\n+  T (int32_t, vnx4si, 3)\t\t\t\\\n+  T (int32_t, vnx4si, 4)\t\t\t\\\n+  T (int32_t, vnx4si, 7)\t\t\t\\\n+  T (int16_t, vnx8hi, 0)\t\t\t\\\n+  T (int16_t, vnx8hi, 1)\t\t\t\\\n+  T (int16_t, vnx8hi, 7)\t\t\t\\\n+  T (int16_t, vnx8hi, 8)\t\t\t\\\n+  T (int16_t, vnx8hi, 15)\t\t\t\\\n+  T (int8_t, vnx16qi, 0)\t\t\t\\\n+  T (int8_t, vnx16qi, 1)\t\t\t\\\n+  T (int8_t, vnx16qi, 15)\t\t\t\\\n+  T (int8_t, vnx16qi, 16)\t\t\t\\\n+  T (int8_t, vnx16qi, 31)\t\t\t\\\n+  T (double, vnx2df, 0)\t\t\t\t\\\n+  T (double, vnx2df, 1)\t\t\t\t\\\n+  T (double, vnx2df, 2)\t\t\t\t\\\n+  T (double, vnx2df, 3)\t\t\t\t\\\n+  T (float, vnx4sf, 0)\t\t\t\t\\\n+  T (float, vnx4sf, 1)\t\t\t\t\\\n+  T (float, vnx4sf, 3)\t\t\t\t\\\n+  T (float, vnx4sf, 4)\t\t\t\t\\\n+  T (float, vnx4sf, 7)\t\t\t\t\\\n+  T (_Float16, vnx8hf, 0)\t\t\t\\\n+  T (_Float16, vnx8hf, 1)\t\t\t\\\n+  T (_Float16, vnx8hf, 7)\t\t\t\\\n+  T (_Float16, vnx8hf, 8)\t\t\t\\\n+  T (_Float16, vnx8hf, 15)\n+\n+TEST_ALL (EXTRACT)\n+\n+/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[0\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[0\\]\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.d, z[0-9]+\\.d\\[2\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\tx[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[0\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[3\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tdup\\ts[0-9]+, v[0-9]+\\.s\\[0\\]\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\ts[0-9]+, v[0-9]+\\.s\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\ts[0-9]+, v[0-9]+\\.s\\[3\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.s, z[0-9]+\\.s\\[4\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\tw[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+\n+/* Also used to move the result of a non-Advanced SIMD extract.  */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.h\\[0\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.h\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.h\\[7\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tdup\\th[0-9]+, v[0-9]+\\.h\\[0\\]\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\th[0-9]+, v[0-9]+\\.h\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\th[0-9]+, v[0-9]+\\.h\\[7\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.h, z[0-9]+\\.h\\[8\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\tw[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+\n+/* Also used to move the result of a non-Advanced SIMD extract.  */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.b\\[0\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.b\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.b\\[15\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.b, z[0-9]+\\.b\\[16\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\tw[0-9]+, p[0-7], z[0-9]+\\.b\\n} 1 } } */"}, {"sha": "0642604749e40f2db552fd8386b268d0e7470ed8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/extract_2.c", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_2.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,93 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=512 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+typedef int64_t vnx4di __attribute__((vector_size (64)));\n+typedef int32_t vnx8si __attribute__((vector_size (64)));\n+typedef int16_t vnx16hi __attribute__((vector_size (64)));\n+typedef int8_t vnx32qi __attribute__((vector_size (64)));\n+typedef double vnx4df __attribute__((vector_size (64)));\n+typedef float vnx8sf __attribute__((vector_size (64)));\n+typedef _Float16 vnx16hf __attribute__((vector_size (64)));\n+\n+#define EXTRACT(ELT_TYPE, TYPE, INDEX)\t\t\\\n+  ELT_TYPE permute_##TYPE##_##INDEX (void)\t\\\n+  {\t\t\t\t\t\t\\\n+    TYPE values;\t\t\t\t\\\n+    asm (\"\" : \"=w\" (values));\t\t\t\\\n+    return values[INDEX];\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  T (int64_t, vnx4di, 0)\t\t\t\\\n+  T (int64_t, vnx4di, 1)\t\t\t\\\n+  T (int64_t, vnx4di, 2)\t\t\t\\\n+  T (int64_t, vnx4di, 7)\t\t\t\\\n+  T (int32_t, vnx8si, 0)\t\t\t\\\n+  T (int32_t, vnx8si, 1)\t\t\t\\\n+  T (int32_t, vnx8si, 3)\t\t\t\\\n+  T (int32_t, vnx8si, 4)\t\t\t\\\n+  T (int32_t, vnx8si, 15)\t\t\t\\\n+  T (int16_t, vnx16hi, 0)\t\t\t\\\n+  T (int16_t, vnx16hi, 1)\t\t\t\\\n+  T (int16_t, vnx16hi, 7)\t\t\t\\\n+  T (int16_t, vnx16hi, 8)\t\t\t\\\n+  T (int16_t, vnx16hi, 31)\t\t\t\\\n+  T (int8_t, vnx32qi, 0)\t\t\t\\\n+  T (int8_t, vnx32qi, 1)\t\t\t\\\n+  T (int8_t, vnx32qi, 15)\t\t\t\\\n+  T (int8_t, vnx32qi, 16)\t\t\t\\\n+  T (int8_t, vnx32qi, 63)\t\t\t\\\n+  T (double, vnx4df, 0)\t\t\t\t\\\n+  T (double, vnx4df, 1)\t\t\t\t\\\n+  T (double, vnx4df, 2)\t\t\t\t\\\n+  T (double, vnx4df, 7)\t\t\t\t\\\n+  T (float, vnx8sf, 0)\t\t\t\t\\\n+  T (float, vnx8sf, 1)\t\t\t\t\\\n+  T (float, vnx8sf, 3)\t\t\t\t\\\n+  T (float, vnx8sf, 4)\t\t\t\t\\\n+  T (float, vnx8sf, 15)\t\t\t\t\\\n+  T (_Float16, vnx16hf, 0)\t\t\t\\\n+  T (_Float16, vnx16hf, 1)\t\t\t\\\n+  T (_Float16, vnx16hf, 7)\t\t\t\\\n+  T (_Float16, vnx16hf, 8)\t\t\t\\\n+  T (_Float16, vnx16hf, 31)\n+\n+TEST_ALL (EXTRACT)\n+\n+/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[0\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[0\\]\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.d, z[0-9]+\\.d\\[2\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\tx[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[0\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[3\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tdup\\ts[0-9]+, v[0-9]+\\.s\\[0\\]\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\ts[0-9]+, v[0-9]+\\.s\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\ts[0-9]+, v[0-9]+\\.s\\[3\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.s, z[0-9]+\\.s\\[4\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\tw[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+\n+/* Also used to move the result of a non-Advanced SIMD extract.  */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.h\\[0\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.h\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.h\\[7\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tdup\\th[0-9]+, v[0-9]+\\.h\\[0\\]\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\th[0-9]+, v[0-9]+\\.h\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\th[0-9]+, v[0-9]+\\.h\\[7\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.h, z[0-9]+\\.h\\[8\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\tw[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+\n+/* Also used to move the result of a non-Advanced SIMD extract.  */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.b\\[0\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.b\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.b\\[15\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.b, z[0-9]+\\.b\\[16\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\tw[0-9]+, p[0-7], z[0-9]+\\.b\\n} 1 } } */"}, {"sha": "604f1f673377c060b88184a7cbcb33dfd088d222", "filename": "gcc/testsuite/gcc.target/aarch64/sve/extract_3.c", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_3.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,124 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=1024 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+typedef int64_t vnx8di __attribute__((vector_size (128)));\n+typedef int32_t vnx16si __attribute__((vector_size (128)));\n+typedef int16_t vnx32hi __attribute__((vector_size (128)));\n+typedef int8_t vnx64qi __attribute__((vector_size (128)));\n+typedef double vnx8df __attribute__((vector_size (128)));\n+typedef float vnx16sf __attribute__((vector_size (128)));\n+typedef _Float16 vnx32hf __attribute__((vector_size (128)));\n+\n+#define EXTRACT(ELT_TYPE, TYPE, INDEX)\t\t\\\n+  ELT_TYPE permute_##TYPE##_##INDEX (void)\t\\\n+  {\t\t\t\t\t\t\\\n+    TYPE values;\t\t\t\t\\\n+    asm (\"\" : \"=w\" (values));\t\t\t\\\n+    return values[INDEX];\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  T (int64_t, vnx8di, 0)\t\t\t\\\n+  T (int64_t, vnx8di, 1)\t\t\t\\\n+  T (int64_t, vnx8di, 2)\t\t\t\\\n+  T (int64_t, vnx8di, 7)\t\t\t\\\n+  T (int64_t, vnx8di, 8)\t\t\t\\\n+  T (int64_t, vnx8di, 9)\t\t\t\\\n+  T (int64_t, vnx8di, 15)\t\t\t\\\n+  T (int32_t, vnx16si, 0)\t\t\t\\\n+  T (int32_t, vnx16si, 1)\t\t\t\\\n+  T (int32_t, vnx16si, 3)\t\t\t\\\n+  T (int32_t, vnx16si, 4)\t\t\t\\\n+  T (int32_t, vnx16si, 15)\t\t\t\\\n+  T (int32_t, vnx16si, 16)\t\t\t\\\n+  T (int32_t, vnx16si, 21)\t\t\t\\\n+  T (int32_t, vnx16si, 31)\t\t\t\\\n+  T (int16_t, vnx32hi, 0)\t\t\t\\\n+  T (int16_t, vnx32hi, 1)\t\t\t\\\n+  T (int16_t, vnx32hi, 7)\t\t\t\\\n+  T (int16_t, vnx32hi, 8)\t\t\t\\\n+  T (int16_t, vnx32hi, 31)\t\t\t\\\n+  T (int16_t, vnx32hi, 32)\t\t\t\\\n+  T (int16_t, vnx32hi, 47)\t\t\t\\\n+  T (int16_t, vnx32hi, 63)\t\t\t\\\n+  T (int8_t, vnx64qi, 0)\t\t\t\\\n+  T (int8_t, vnx64qi, 1)\t\t\t\\\n+  T (int8_t, vnx64qi, 15)\t\t\t\\\n+  T (int8_t, vnx64qi, 16)\t\t\t\\\n+  T (int8_t, vnx64qi, 63)\t\t\t\\\n+  T (int8_t, vnx64qi, 64)\t\t\t\\\n+  T (int8_t, vnx64qi, 100)\t\t\t\\\n+  T (int8_t, vnx64qi, 127)\t\t\t\\\n+  T (double, vnx8df, 0)\t\t\t\t\\\n+  T (double, vnx8df, 1)\t\t\t\t\\\n+  T (double, vnx8df, 2)\t\t\t\t\\\n+  T (double, vnx8df, 7)\t\t\t\t\\\n+  T (double, vnx8df, 8)\t\t\t\t\\\n+  T (double, vnx8df, 9)\t\t\t\t\\\n+  T (double, vnx8df, 15)\t\t\t\\\n+  T (float, vnx16sf, 0)\t\t\t\t\\\n+  T (float, vnx16sf, 1)\t\t\t\t\\\n+  T (float, vnx16sf, 3)\t\t\t\t\\\n+  T (float, vnx16sf, 4)\t\t\t\t\\\n+  T (float, vnx16sf, 15)\t\t\t\\\n+  T (float, vnx16sf, 16)\t\t\t\\\n+  T (float, vnx16sf, 21)\t\t\t\\\n+  T (float, vnx16sf, 31)\t\t\t\\\n+  T (_Float16, vnx32hf, 0)\t\t\t\\\n+  T (_Float16, vnx32hf, 1)\t\t\t\\\n+  T (_Float16, vnx32hf, 7)\t\t\t\\\n+  T (_Float16, vnx32hf, 8)\t\t\t\\\n+  T (_Float16, vnx32hf, 31)\t\t\t\\\n+  T (_Float16, vnx32hf, 32)\t\t\t\\\n+  T (_Float16, vnx32hf, 47)\t\t\t\\\n+  T (_Float16, vnx32hf, 63)\n+\n+TEST_ALL (EXTRACT)\n+\n+/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[0\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[0\\]\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.d, z[0-9]+\\.d\\[2\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.d, z[0-9]+\\.d\\[7\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\tx[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[0\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[3\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tdup\\ts[0-9]+, v[0-9]+\\.s\\[0\\]\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\ts[0-9]+, v[0-9]+\\.s\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\ts[0-9]+, v[0-9]+\\.s\\[3\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.s, z[0-9]+\\.s\\[4\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.s, z[0-9]+\\.s\\[15\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\tw[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+\n+/* Also used to move the result of a non-Advanced SIMD extract.  */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.h\\[0\\]\\n} 5 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.h\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.h\\[7\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tdup\\th[0-9]+, v[0-9]+\\.h\\[0\\]\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\th[0-9]+, v[0-9]+\\.h\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\th[0-9]+, v[0-9]+\\.h\\[7\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.h, z[0-9]+\\.h\\[8\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.h, z[0-9]+\\.h\\[31\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\tw[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+\n+/* Also used to move the result of a non-Advanced SIMD extract.  */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.b\\[0\\]\\n} 5 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.b\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.b\\[15\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.b, z[0-9]+\\.b\\[16\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.b, z[0-9]+\\.b\\[63\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\tw[0-9]+, p[0-7], z[0-9]+\\.b\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #64\\n} 7 } } */\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #72\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #84\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #94\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #100\\n} 1 } } */"}, {"sha": "8b45e3179dccaec879b66a12a749b3a6db3ddb9d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/extract_4.c", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fextract_4.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,135 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+typedef int64_t v32di __attribute__((vector_size (256)));\n+typedef int32_t v64si __attribute__((vector_size (256)));\n+typedef int16_t v128hi __attribute__((vector_size (256)));\n+typedef int8_t v256qi __attribute__((vector_size (256)));\n+typedef double v32df __attribute__((vector_size (256)));\n+typedef float v64sf __attribute__((vector_size (256)));\n+typedef _Float16 v128hf __attribute__((vector_size (256)));\n+\n+#define EXTRACT(ELT_TYPE, TYPE, INDEX)\t\t\\\n+  ELT_TYPE permute_##TYPE##_##INDEX (void)\t\\\n+  {\t\t\t\t\t\t\\\n+    TYPE values;\t\t\t\t\\\n+    asm (\"\" : \"=w\" (values));\t\t\t\\\n+    return values[INDEX];\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  T (int64_t, v32di, 0)\t\t\t\t\\\n+  T (int64_t, v32di, 1)\t\t\t\t\\\n+  T (int64_t, v32di, 2)\t\t\t\t\\\n+  T (int64_t, v32di, 7)\t\t\t\t\\\n+  T (int64_t, v32di, 8)\t\t\t\t\\\n+  T (int64_t, v32di, 9)\t\t\t\t\\\n+  T (int64_t, v32di, 15)\t\t\t\\\n+  T (int64_t, v32di, 31)\t\t\t\\\n+  T (int32_t, v64si, 0)\t\t\t\t\\\n+  T (int32_t, v64si, 1)\t\t\t\t\\\n+  T (int32_t, v64si, 3)\t\t\t\t\\\n+  T (int32_t, v64si, 4)\t\t\t\t\\\n+  T (int32_t, v64si, 15)\t\t\t\\\n+  T (int32_t, v64si, 16)\t\t\t\\\n+  T (int32_t, v64si, 21)\t\t\t\\\n+  T (int32_t, v64si, 31)\t\t\t\\\n+  T (int32_t, v64si, 63)\t\t\t\\\n+  T (int16_t, v128hi, 0)\t\t\t\\\n+  T (int16_t, v128hi, 1)\t\t\t\\\n+  T (int16_t, v128hi, 7)\t\t\t\\\n+  T (int16_t, v128hi, 8)\t\t\t\\\n+  T (int16_t, v128hi, 31)\t\t\t\\\n+  T (int16_t, v128hi, 32)\t\t\t\\\n+  T (int16_t, v128hi, 47)\t\t\t\\\n+  T (int16_t, v128hi, 63)\t\t\t\\\n+  T (int16_t, v128hi, 127)\t\t\t\\\n+  T (int8_t, v256qi, 0)\t\t\t\t\\\n+  T (int8_t, v256qi, 1)\t\t\t\t\\\n+  T (int8_t, v256qi, 15)\t\t\t\\\n+  T (int8_t, v256qi, 16)\t\t\t\\\n+  T (int8_t, v256qi, 63)\t\t\t\\\n+  T (int8_t, v256qi, 64)\t\t\t\\\n+  T (int8_t, v256qi, 100)\t\t\t\\\n+  T (int8_t, v256qi, 127)\t\t\t\\\n+  T (int8_t, v256qi, 255)\t\t\t\\\n+  T (double, v32df, 0)\t\t\t\t\\\n+  T (double, v32df, 1)\t\t\t\t\\\n+  T (double, v32df, 2)\t\t\t\t\\\n+  T (double, v32df, 7)\t\t\t\t\\\n+  T (double, v32df, 8)\t\t\t\t\\\n+  T (double, v32df, 9)\t\t\t\t\\\n+  T (double, v32df, 15)\t\t\t\t\\\n+  T (double, v32df, 31)\t\t\t\t\\\n+  T (float, v64sf, 0)\t\t\t\t\\\n+  T (float, v64sf, 1)\t\t\t\t\\\n+  T (float, v64sf, 3)\t\t\t\t\\\n+  T (float, v64sf, 4)\t\t\t\t\\\n+  T (float, v64sf, 15)\t\t\t\t\\\n+  T (float, v64sf, 16)\t\t\t\t\\\n+  T (float, v64sf, 21)\t\t\t\t\\\n+  T (float, v64sf, 31)\t\t\t\t\\\n+  T (float, v64sf, 63)\t\t\t\t\\\n+  T (_Float16, v128hf, 0)\t\t\t\\\n+  T (_Float16, v128hf, 1)\t\t\t\\\n+  T (_Float16, v128hf, 7)\t\t\t\\\n+  T (_Float16, v128hf, 8)\t\t\t\\\n+  T (_Float16, v128hf, 31)\t\t\t\\\n+  T (_Float16, v128hf, 32)\t\t\t\\\n+  T (_Float16, v128hf, 47)\t\t\t\\\n+  T (_Float16, v128hf, 63)\t\t\t\\\n+  T (_Float16, v128hf, 127)\n+\n+TEST_ALL (EXTRACT)\n+\n+/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[0\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tx[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[0\\]\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\td[0-9]+, v[0-9]+\\.d\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.d, z[0-9]+\\.d\\[2\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.d, z[0-9]+\\.d\\[7\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\tx[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[0\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.s\\[3\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tdup\\ts[0-9]+, v[0-9]+\\.s\\[0\\]\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\ts[0-9]+, v[0-9]+\\.s\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\ts[0-9]+, v[0-9]+\\.s\\[3\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.s, z[0-9]+\\.s\\[4\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.s, z[0-9]+\\.s\\[15\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\tw[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+\n+/* Also used to move the result of a non-Advanced SIMD extract.  */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.h\\[0\\]\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.h\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.h\\[7\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tdup\\th[0-9]+, v[0-9]+\\.h\\[0\\]\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\th[0-9]+, v[0-9]+\\.h\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\th[0-9]+, v[0-9]+\\.h\\[7\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.h, z[0-9]+\\.h\\[8\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.h, z[0-9]+\\.h\\[31\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\tw[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+\n+/* Also used to move the result of a non-Advanced SIMD extract.  */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.b\\[0\\]\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.b\\[1\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumov\\tw[0-9]+, v[0-9]+\\.b\\[15\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.b, z[0-9]+\\.b\\[16\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tdup\\tz[0-9]+\\.b, z[0-9]+\\.b\\[63\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlastb\\tw[0-9]+, p[0-7], z[0-9]+\\.b\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #64\\n} 7 } } */\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #72\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #84\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #94\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #100\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #120\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #124\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #126\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\text\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b, #127\\n} 1 } } */"}, {"sha": "5a4d6e0e219bf6d5e27563c62915de08b625e092", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fabs_1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffabs_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffabs_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffabs_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define DO_OPS(TYPE, OP)\t\t\t\\\n+void\t\t\t\t\t\t\\\n+vsqrt_##TYPE (TYPE *dst, TYPE *src, int count)\t\\\n+{\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\\\n+    dst[i] = __builtin_##OP (src[i]);\t\t\\\n+}\n+\n+DO_OPS (_Float16, fabsf)\n+DO_OPS (float, fabsf)\n+DO_OPS (double, fabs)\n+\n+/* { dg-final { scan-assembler-times {\\tfabs\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfabs\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfabs\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "d8882c75026e9e0fbc0fbe0b625a40a838086c20", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fcvtz_signed_1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffcvtz_signed_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffcvtz_signed_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffcvtz_signed_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+void __attribute__ ((noinline, noclone))\n+vfcvtz_16 (int16_t *dst, _Float16 *src1, int size)\n+{\n+  for (int i = 0; i < size; i++)\n+    dst[i] = (int16_t) src1[i];\n+}\n+\n+void __attribute__ ((noinline, noclone))\n+vfcvtz_32 (int32_t *dst, float *src1, int size)\n+{\n+  for (int i = 0; i < size; i++)\n+    dst[i] = (int32_t) src1[i];\n+}\n+\n+void __attribute__ ((noinline, noclone))\n+vfcvtz_64 (int64_t *dst, double *src1, int size)\n+{\n+  for (int i = 0; i < size; i++)\n+    dst[i] = (int64_t) src1[i];\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tfcvtzs\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfcvtzs\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfcvtzs\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "f29cf5521c762b8fea0649a3e55ab79f101d19ad", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fcvtz_signed_1_run.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffcvtz_signed_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffcvtz_signed_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffcvtz_signed_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O3\" } */\n+\n+#include \"fcvtz_signed_1.c\"\n+\n+#define ARRAY_SIZE 81\n+\n+#define VAL1 ((i * 17) - 180)\n+#define VAL2 ((i * 237.86) - (29 * 237.86))\n+#define VAL3 ((double) ((i * 0xf8dfef2f) - (11 * 0xf8dfef2f)))\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  static int16_t array_dest16[ARRAY_SIZE];\n+  static int32_t array_dest32[ARRAY_SIZE];\n+  static int64_t array_dest64[ARRAY_SIZE];\n+\n+  _Float16 array_source16[ARRAY_SIZE];\n+  float array_source32[ARRAY_SIZE];\n+  double array_source64[ARRAY_SIZE];\n+\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    {\n+      array_source16[i] = VAL1;\n+      array_source32[i] = VAL2;\n+      array_source64[i] = VAL3;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+\n+  vfcvtz_16 (array_dest16, array_source16, ARRAY_SIZE);\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    if (array_dest16[i] != (int16_t) VAL1)\n+      __builtin_abort ();\n+\n+  vfcvtz_32 (array_dest32, array_source32, ARRAY_SIZE);\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    if (array_dest32[i] != (int32_t) VAL2)\n+      __builtin_abort ();\n+\n+  vfcvtz_64 (array_dest64, array_source64, ARRAY_SIZE);\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    if (array_dest64[i] != (int64_t) VAL3)\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "9d735a8520c1db9b3e30ba0e596640b3c479e8f5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fcvtz_unsigned_1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffcvtz_unsigned_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffcvtz_unsigned_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffcvtz_unsigned_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+void __attribute__ ((noinline, noclone))\n+vfcvtz_16 (uint16_t *dst, _Float16 *src1, int size)\n+{\n+  for (int i = 0; i < size; i++)\n+    dst[i] = (uint16_t) src1[i];\n+}\n+\n+void __attribute__ ((noinline, noclone))\n+vfcvtz_32 (uint32_t *dst, float *src1, int size)\n+{\n+  for (int i = 0; i < size; i++)\n+    dst[i] = (uint32_t) src1[i];\n+}\n+\n+void __attribute__ ((noinline, noclone))\n+vfcvtz_64 (uint64_t *dst, double *src1, int size)\n+{\n+  for (int i = 0; i < size; i++)\n+    dst[i] = (uint64_t) src1[i];\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tfcvtzu\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfcvtzu\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfcvtzu\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "8c193c7232c762ab7dabc69fa17a9a3c877ee0a1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fcvtz_unsigned_1_run.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffcvtz_unsigned_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffcvtz_unsigned_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffcvtz_unsigned_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"fcvtz_unsigned_1.c\"\n+\n+#define ARRAY_SIZE 75\n+\n+#define VAL1 (i * 19)\n+#define VAL2 (i * 2574.33)\n+#define VAL3 ((double) (i * 0xff23efef))\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  static uint16_t array_dest16[ARRAY_SIZE];\n+  static uint32_t array_dest32[ARRAY_SIZE];\n+  static uint64_t array_dest64[ARRAY_SIZE];\n+\n+  _Float16 array_source16[ARRAY_SIZE];\n+  float array_source32[ARRAY_SIZE];\n+  double array_source64[ARRAY_SIZE];\n+\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    {\n+      array_source16[i] = VAL1;\n+      array_source32[i] = VAL2;\n+      array_source64[i] = VAL3;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+\n+  vfcvtz_16 (array_dest16, array_source16, ARRAY_SIZE);\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    if (array_dest16[i] != (uint16_t) VAL1)\n+      __builtin_abort ();\n+\n+  vfcvtz_32 (array_dest32, array_source32, ARRAY_SIZE);\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    if (array_dest32[i] != (uint32_t) VAL2)\n+      __builtin_abort ();\n+\n+  vfcvtz_64 (array_dest64, array_source64, ARRAY_SIZE);\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    if (array_dest64[i] != (uint64_t) VAL3)\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "a930ec542d0f8624e1bde0d97ff9105d01657528", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fdiv_1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffdiv_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffdiv_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffdiv_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 -msve-vector-bits=256 --save-temps\" } */\n+\n+typedef _Float16 vnx8hf __attribute__((vector_size(32)));\n+typedef float vnx4sf __attribute__((vector_size(32)));\n+typedef double vnx2df __attribute__((vector_size(32)));\n+\n+#define DO_OP(TYPE)\t\t\t\t\\\n+void vdiv_##TYPE (TYPE *x, TYPE y)\t\t\\\n+{\t\t\t\t\t\t\\\n+  register TYPE dst asm(\"z0\");\t\t\t\\\n+  register TYPE src asm(\"z2\");\t\t\t\\\n+  dst = *x;\t\t\t\t\t\\\n+  src = y;\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst), \"w\" (src));\t\\\n+  dst = dst / src;\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst));\t\t\\\n+  *x = dst;\t\t\t\t\t\\\n+}\t\t\t\t\t\t\\\n+void vdivr_##TYPE (TYPE *x, TYPE y)\t\t\\\n+{\t\t\t\t\t\t\\\n+  register TYPE dst asm(\"z0\");\t\t\t\\\n+  register TYPE src asm(\"z2\");\t\t\t\\\n+  dst = *x;\t\t\t\t\t\\\n+  src = y;\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst), \"w\" (src));\t\\\n+  dst = src / dst;\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst));\t\t\\\n+  *x = dst;\t\t\t\t\t\\\n+}\n+\n+DO_OP (vnx8hf)\n+DO_OP (vnx4sf)\n+DO_OP (vnx2df)\n+\n+/* { dg-final { scan-assembler-times {\\tfdiv\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfdivr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfdiv\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfdivr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfdiv\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfdivr\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "c13efd86919466f193581d14c6a86c0f227a9648", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fdup_1.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffdup_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffdup_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffdup_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* -fno-tree-loop-distribute-patterns prevents conversion to memset.  */\n+/* { dg-options \"-O3 -fno-tree-loop-distribute-patterns --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define NUM_ELEMS(TYPE) (1024 / sizeof (TYPE))\n+\n+#define DEF_SET_IMM(TYPE, IMM, SUFFIX)\t\t\\\n+void __attribute__ ((noinline, noclone))\t\\\n+set_##TYPE##_##SUFFIX (TYPE *a)\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  for (int i = 0; i < NUM_ELEMS (TYPE); i++)\t\\\n+    a[i] = IMM;\t\t\t\t\t\\\n+}\n+\n+#define DEF_SET_IMM_FP(IMM, SUFFIX) \\\n+  DEF_SET_IMM (float, IMM, SUFFIX)  \\\n+  DEF_SET_IMM (double, IMM, SUFFIX)\n+\n+/* Valid.  */\n+DEF_SET_IMM_FP (1, imm1)\n+DEF_SET_IMM_FP (0x1.1p0, imm1p0)\n+DEF_SET_IMM_FP (0x1.fp0, immfp0)\n+DEF_SET_IMM_FP (0x1.1p4, imm1p4)\n+DEF_SET_IMM_FP (0x1.1p-3, imm1pm3)\n+DEF_SET_IMM_FP (0x1.fp4, immfp4)\n+DEF_SET_IMM_FP (0x1.fp-3, immfpm3)\n+\n+/* Should use MOV instead.  */\n+DEF_SET_IMM_FP (0, imm0)\n+\n+/* Invalid.  */\n+DEF_SET_IMM_FP (0x1.1fp0, imm1fp0)\n+DEF_SET_IMM_FP (0x1.1p5, imm1p5)\n+DEF_SET_IMM_FP (0x1.1p-4, imm1pm4)\n+DEF_SET_IMM_FP (0x1.1fp5, imm1fp5)\n+DEF_SET_IMM_FP (0x1.1fp-4, imm1fpm4)\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s,} 7 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #1.0e\\+0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #1.0625e\\+0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #1.9375e\\+0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #1.7e\\+1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #1.328125e-1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #3.1e\\+1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2.421875e-1\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.s, #0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d,} 7 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #1.0e\\+0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #1.0625e\\+0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #1.9375e\\+0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #1.7e\\+1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #1.328125e-1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #3.1e\\+1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2.421875e-1\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #0\\n} 1 } } */"}, {"sha": "0623e93ffd5756a35eee8094d8db223abdf13f4e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fdup_1_run.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffdup_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffdup_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffdup_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O3 -fno-tree-loop-distribute-patterns\" } */\n+\n+#include \"fdup_1.c\"\n+\n+#define TEST_SET_IMM(TYPE,IMM,SUFFIX)\t\t\\\n+  {\t\t\t\t\t\t\\\n+    TYPE v[NUM_ELEMS (TYPE)];\t\t\t\\\n+    set_##TYPE##_##SUFFIX (v);\t\t\t\\\n+    for (int i = 0; i < NUM_ELEMS (TYPE); i++ )\t\\\n+      if (v[i] != IMM)\t\t\t\t\\\n+\t__builtin_abort ();\t\t\t\\\n+  }\n+\n+#define TEST_SET_IMM_FP(IMM, SUFFIX) \\\n+  TEST_SET_IMM (float, IMM, SUFFIX)  \\\n+  TEST_SET_IMM (double, IMM, SUFFIX)\n+\n+int __attribute__ ((optimize (1)))\n+main (int argc, char **argv)\n+{\n+  TEST_SET_IMM_FP (1, imm1)\n+  TEST_SET_IMM_FP (0x1.1p0, imm1p0)\n+  TEST_SET_IMM_FP (0x1.fp0, immfp0)\n+  TEST_SET_IMM_FP (0x1.1p4, imm1p4)\n+  TEST_SET_IMM_FP (0x1.1p-3, imm1pm3)\n+  TEST_SET_IMM_FP (0x1.fp4, immfp4)\n+  TEST_SET_IMM_FP (0x1.fp-3, immfpm3)\n+\n+  TEST_SET_IMM_FP (0, imm0)\n+  TEST_SET_IMM_FP (0x1.1fp0, imm1fp0)\n+  TEST_SET_IMM_FP (0x1.1p5, imm1p5)\n+  TEST_SET_IMM_FP (0x1.1p-4, imm1pm4)\n+  TEST_SET_IMM_FP (0x1.1fp5, imm1fp5)\n+  TEST_SET_IMM_FP (0x1.1fp-4, imm1fpm4)\n+\n+  return 0;\n+}"}, {"sha": "d9aa08ba6e87f7abd80f739c9f41d9a9612feca7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fmad_1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmad_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmad_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmad_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 -msve-vector-bits=256 --save-temps\" } */\n+\n+typedef _Float16 vnx8hf __attribute__((vector_size(32)));\n+typedef float vnx4sf __attribute__((vector_size(32)));\n+typedef double vnx2df __attribute__((vector_size(32)));\n+\n+#define DO_OP(TYPE)\t\t\t\t\t\t\\\n+void vmad##TYPE (TYPE *x, TYPE y, TYPE z)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  register TYPE dst  asm(\"z0\");\t\t\t\t\t\\\n+  register TYPE src1 asm(\"z2\");\t\t\t\t\t\\\n+  register TYPE src2 asm(\"z4\");\t\t\t\t\t\\\n+  dst = *x;\t\t\t\t\t\t\t\\\n+  src1 = y;\t\t\t\t\t\t\t\\\n+  src2 = z;\t\t\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst), \"w\" (src1), \"w\" (src2));\t\\\n+  dst = (dst * src1) + src2;\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst));\t\t\t\t\\\n+  *x = dst;\t\t\t\t\t\t\t\\\n+}\n+\n+DO_OP (vnx8hf)\n+DO_OP (vnx4sf)\n+DO_OP (vnx2df)\n+\n+/* { dg-final { scan-assembler-times {\\tfmad\\tz0\\.h, p[0-7]/m, z2\\.h, z4\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmad\\tz0\\.s, p[0-7]/m, z2\\.s, z4\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmad\\tz0\\.d, p[0-7]/m, z2\\.d, z4\\.d\\n} 1 } } */"}, {"sha": "4d6667206609e11af4758739b9a3787e24328958", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fmla_1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmla_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmla_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmla_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 -msve-vector-bits=256 --save-temps\" } */\n+\n+typedef _Float16 vnx8hf __attribute__((vector_size(32)));\n+typedef float vnx4sf __attribute__((vector_size(32)));\n+typedef double vnx2df __attribute__((vector_size(32)));\n+\n+#define DO_OP(TYPE)\t\t\t\t\t\t\\\n+void vmad##TYPE (TYPE *x, TYPE y, TYPE z)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  register TYPE dst  asm(\"z0\");\t\t\t\t\t\\\n+  register TYPE src1 asm(\"z2\");\t\t\t\t\t\\\n+  register TYPE src2 asm(\"z4\");\t\t\t\t\t\\\n+  dst = *x;\t\t\t\t\t\t\t\\\n+  src1 = y;\t\t\t\t\t\t\t\\\n+  src2 = z;\t\t\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst), \"w\" (src1), \"w\" (src2));\t\\\n+  dst = (src1 * src2) + dst;\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst));\t\t\t\t\\\n+  *x = dst;\t\t\t\t\t\t\t\\\n+}\n+\n+DO_OP (vnx8hf)\n+DO_OP (vnx4sf)\n+DO_OP (vnx2df)\n+\n+/* { dg-final { scan-assembler-times {\\tfmla\\tz0\\.h, p[0-7]/m, z2\\.h, z4\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmla\\tz0\\.s, p[0-7]/m, z2\\.s, z4\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmla\\tz0\\.d, p[0-7]/m, z2\\.d, z4\\.d\\n} 1 } } */"}, {"sha": "f37727ccb65f7123ee9cd248f75911174debb6f8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fmls_1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmls_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmls_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmls_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 -msve-vector-bits=256 --save-temps\" } */\n+\n+typedef _Float16 vnx8hf __attribute__((vector_size(32)));\n+typedef float vnx4sf __attribute__((vector_size(32)));\n+typedef double vnx2df __attribute__((vector_size(32)));\n+\n+#define DO_OP(TYPE)\t\t\t\t\t\t\\\n+void vmad##TYPE (TYPE *x, TYPE y, TYPE z)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  register TYPE dst  asm(\"z0\");\t\t\t\t\t\\\n+  register TYPE src1 asm(\"z2\");\t\t\t\t\t\\\n+  register TYPE src2 asm(\"z4\");\t\t\t\t\t\\\n+  dst = *x;\t\t\t\t\t\t\t\\\n+  src1 = y;\t\t\t\t\t\t\t\\\n+  src2 = z;\t\t\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst), \"w\" (src1), \"w\" (src2));\t\\\n+  dst = (-src1 * src2) + dst;\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst));\t\t\t\t\\\n+  *x = dst;\t\t\t\t\t\t\t\\\n+}\n+\n+DO_OP (vnx8hf)\n+DO_OP (vnx4sf)\n+DO_OP (vnx2df)\n+\n+/* { dg-final { scan-assembler-times {\\tfmls\\tz0\\.h, p[0-7]/m, z2\\.h, z4\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmls\\tz0\\.s, p[0-7]/m, z2\\.s, z4\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmls\\tz0\\.d, p[0-7]/m, z2\\.d, z4\\.d\\n} 1 } } */"}, {"sha": "c448b9607c3091a208278fc92bf61223fb7eedf1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fmsb_1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmsb_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmsb_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmsb_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 -msve-vector-bits=256 --save-temps\" } */\n+\n+typedef _Float16 vnx8hf __attribute__((vector_size(32)));\n+typedef float vnx4sf __attribute__((vector_size(32)));\n+typedef double vnx2df __attribute__((vector_size(32)));\n+\n+#define DO_OP(TYPE)\t\t\t\t\t\t\\\n+void vmad##TYPE (TYPE *x, TYPE y, TYPE z)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  register TYPE dst  asm(\"z0\");\t\t\t\t\t\\\n+  register TYPE src1 asm(\"z2\");\t\t\t\t\t\\\n+  register TYPE src2 asm(\"z4\");\t\t\t\t\t\\\n+  dst = *x;\t\t\t\t\t\t\t\\\n+  src1 = y;\t\t\t\t\t\t\t\\\n+  src2 = z;\t\t\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst), \"w\" (src1), \"w\" (src2));\t\\\n+  dst = (-dst * src1) + src2;\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst));\t\t\t\t\\\n+  *x = dst;\t\t\t\t\t\t\t\\\n+}\n+\n+DO_OP (vnx8hf)\n+DO_OP (vnx4sf)\n+DO_OP (vnx2df)\n+\n+/* { dg-final { scan-assembler-times {\\tfmsb\\tz0\\.h, p[0-7]/m, z2\\.h, z4\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmsb\\tz0\\.s, p[0-7]/m, z2\\.s, z4\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmsb\\tz0\\.d, p[0-7]/m, z2\\.d, z4\\.d\\n} 1 } } */"}, {"sha": "4a3e7c0674534a2baccf723f8d80e87430402ca4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fmul_1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmul_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmul_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmul_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#define DO_REGREG_OPS(TYPE, OP, NAME)\t\t\t\t\\\n+void varith_##TYPE##_##NAME (TYPE *dst, TYPE *src, int count)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    dst[i] = dst[i] OP src[i];\t\t\t\t\t\\\n+}\n+\n+#define DO_IMMEDIATE_OPS(VALUE, TYPE, OP, NAME)\t\t\\\n+void varithimm_##NAME##_##TYPE (TYPE *dst, int count)\t\\\n+{\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\\\n+    dst[i] = dst[i] OP (TYPE) VALUE;\t\t\t\\\n+}\n+\n+#define DO_ARITH_OPS(TYPE, OP, NAME)\t\t\t\t\\\n+  DO_REGREG_OPS (TYPE, OP, NAME);\t\t\t\t\\\n+  DO_IMMEDIATE_OPS (0.5, TYPE, OP, NAME ## 0point5);\t\t\\\n+  DO_IMMEDIATE_OPS (2, TYPE, OP, NAME ## 2);\t\t\t\\\n+  DO_IMMEDIATE_OPS (5, TYPE, OP, NAME ## 5);\t\t\t\\\n+  DO_IMMEDIATE_OPS (-0.5, TYPE, OP, NAME ## minus0point5);\t\\\n+  DO_IMMEDIATE_OPS (-2, TYPE, OP, NAME ## minus2);\n+\n+DO_ARITH_OPS (_Float16, *, mul)\n+DO_ARITH_OPS (float, *, mul)\n+DO_ARITH_OPS (double, *, mul)\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-not   {\\tfmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #2} } } */\n+/* { dg-final { scan-assembler-not   {\\tfmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #5} } } */\n+/* { dg-final { scan-assembler-not   {\\tfmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #-} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-not   {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #2} } } */\n+/* { dg-final { scan-assembler-not   {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #5} } } */\n+/* { dg-final { scan-assembler-not   {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #-} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-not   {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #2} } } */\n+/* { dg-final { scan-assembler-not   {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #5} } } */\n+/* { dg-final { scan-assembler-not   {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #-} } } */"}, {"sha": "4357ee98fe9eb87f255c9c70f3d58a8d658ee91c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fneg_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffneg_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffneg_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffneg_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#define DO_OPS(TYPE)\t\t\t\t\t\\\n+void vneg_##TYPE (TYPE *dst, TYPE *src, int count)\t\\\n+{\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\\\n+    dst[i] = -src[i];\t\t\t\t\t\\\n+}\n+\n+DO_OPS (_Float16)\n+DO_OPS (float)\n+DO_OPS (double)\n+\n+/* { dg-final { scan-assembler-times {\\tfneg\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfneg\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfneg\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "df61f4a7def3155e88f280553bd17e7c2df83232", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fnmad_1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffnmad_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffnmad_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffnmad_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 -msve-vector-bits=256 --save-temps\" } */\n+\n+typedef _Float16 vnx8hf __attribute__((vector_size(32)));\n+typedef float vnx4sf __attribute__((vector_size(32)));\n+typedef double vnx2df __attribute__((vector_size(32)));\n+\n+#define DO_OP(TYPE)\t\t\t\t\t\t\\\n+void vmad##TYPE (TYPE *x, TYPE y, TYPE z)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  register TYPE dst  asm(\"z0\");\t\t\t\t\t\\\n+  register TYPE src1 asm(\"z2\");\t\t\t\t\t\\\n+  register TYPE src2 asm(\"z4\");\t\t\t\t\t\\\n+  dst = *x;\t\t\t\t\t\t\t\\\n+  src1 = y;\t\t\t\t\t\t\t\\\n+  src2 = z;\t\t\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst), \"w\" (src1), \"w\" (src2));\t\\\n+  dst = (-dst * src1) - src2;\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst));\t\t\t\t\\\n+  *x = dst;\t\t\t\t\t\t\t\\\n+}\n+\n+DO_OP (vnx8hf)\n+DO_OP (vnx4sf)\n+DO_OP (vnx2df)\n+\n+/* { dg-final { scan-assembler-times {\\tfnmad\\tz0\\.h, p[0-7]/m, z2\\.h, z4\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfnmad\\tz0\\.s, p[0-7]/m, z2\\.s, z4\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfnmad\\tz0\\.d, p[0-7]/m, z2\\.d, z4\\.d\\n} 1 } } */"}, {"sha": "1e70658351a45fc063cc7d15aa9e5465fa7ef335", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fnmla_1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffnmla_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffnmla_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffnmla_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 -msve-vector-bits=256 --save-temps\" } */\n+\n+typedef _Float16 vnx8hf __attribute__((vector_size(32)));\n+typedef float vnx4sf __attribute__((vector_size(32)));\n+typedef double vnx2df __attribute__((vector_size(32)));\n+\n+#define DO_OP(TYPE)\t\t\t\t\t\t\\\n+void vmad##TYPE (TYPE *x, TYPE y, TYPE z)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  register TYPE dst  asm(\"z0\");\t\t\t\t\t\\\n+  register TYPE src1 asm(\"z2\");\t\t\t\t\t\\\n+  register TYPE src2 asm(\"z4\");\t\t\t\t\t\\\n+  dst = *x;\t\t\t\t\t\t\t\\\n+  src1 = y;\t\t\t\t\t\t\t\\\n+  src2 = z;\t\t\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst), \"w\" (src1), \"w\" (src2));\t\\\n+  dst = (-src1 * src2) - dst;\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst));\t\t\t\t\\\n+  *x = dst;\t\t\t\t\t\t\t\\\n+}\n+\n+DO_OP (vnx8hf)\n+DO_OP (vnx4sf)\n+DO_OP (vnx2df)\n+\n+/* { dg-final { scan-assembler-times {\\tfnmla\\tz0\\.h, p[0-7]/m, z2\\.h, z4\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfnmla\\tz0\\.s, p[0-7]/m, z2\\.s, z4\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfnmla\\tz0\\.d, p[0-7]/m, z2\\.d, z4\\.d\\n} 1 } } */"}, {"sha": "18fa2367d05faf17bd19e20a4ca435d7948e8207", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fnmls_1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffnmls_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffnmls_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffnmls_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 -msve-vector-bits=256 --save-temps\" } */\n+\n+typedef _Float16 vnx8hf __attribute__((vector_size(32)));\n+typedef float vnx4sf __attribute__((vector_size(32)));\n+typedef double vnx2df __attribute__((vector_size(32)));\n+\n+#define DO_OP(TYPE)\t\t\t\t\t\t\\\n+void vmad##TYPE (TYPE *x, TYPE y, TYPE z)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  register TYPE dst  asm(\"z0\");\t\t\t\t\t\\\n+  register TYPE src1 asm(\"z2\");\t\t\t\t\t\\\n+  register TYPE src2 asm(\"z4\");\t\t\t\t\t\\\n+  dst = *x;\t\t\t\t\t\t\t\\\n+  src1 = y;\t\t\t\t\t\t\t\\\n+  src2 = z;\t\t\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst), \"w\" (src1), \"w\" (src2));\t\\\n+  dst = (src1 * src2) - dst;\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst));\t\t\t\t\\\n+  *x = dst;\t\t\t\t\t\t\t\\\n+}\n+\n+DO_OP (vnx8hf)\n+DO_OP (vnx4sf)\n+DO_OP (vnx2df)\n+\n+/* { dg-final { scan-assembler-times {\\tfnmls\\tz0\\.h, p[0-7]/m, z2\\.h, z4\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfnmls\\tz0\\.s, p[0-7]/m, z2\\.s, z4\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfnmls\\tz0\\.d, p[0-7]/m, z2\\.d, z4\\.d\\n} 1 } } */"}, {"sha": "08c5ff33963b843c6cbc18ad2e470989a91fdd7b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fnmsb_1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffnmsb_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffnmsb_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffnmsb_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \" -O3 -msve-vector-bits=256 --save-temps\" } */\n+\n+typedef _Float16 vnx8hf __attribute__((vector_size(32)));\n+typedef float vnx4sf __attribute__((vector_size(32)));\n+typedef double vnx2df __attribute__((vector_size(32)));\n+\n+#define DO_OP(TYPE)\t\t\t\t\t\t\\\n+void vmad##TYPE (TYPE *x, TYPE y, TYPE z)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  register TYPE dst  asm(\"z0\");\t\t\t\t\t\\\n+  register TYPE src1 asm(\"z2\");\t\t\t\t\t\\\n+  register TYPE src2 asm(\"z4\");\t\t\t\t\t\\\n+  dst = *x;\t\t\t\t\t\t\t\\\n+  src1 = y;\t\t\t\t\t\t\t\\\n+  src2 = z;\t\t\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst), \"w\" (src1), \"w\" (src2));\t\\\n+  dst = (dst * src1) - src2;\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst));\t\t\t\t\\\n+  *x = dst;\t\t\t\t\t\t\t\\\n+}\n+\n+DO_OP (vnx8hf)\n+DO_OP (vnx4sf)\n+DO_OP (vnx2df)\n+\n+/* { dg-final { scan-assembler-times {\\tfnmsb\\tz0\\.h, p[0-7]/m, z2\\.h, z4\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfnmsb\\tz0\\.s, p[0-7]/m, z2\\.s, z4\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfnmsb\\tz0\\.d, p[0-7]/m, z2\\.d, z4\\.d\\n} 1 } } */"}, {"sha": "5aed0dcb49084b5ea591c11bc20851ca7efb8b00", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fp_arith_1.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffp_arith_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffp_arith_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffp_arith_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#define DO_REGREG_OPS(TYPE, OP, NAME)\t\t\t\t\\\n+void varith_##TYPE##_##NAME (TYPE *dst, TYPE *src, int count)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    dst[i] = dst[i] OP src[i];\t\t\t\t\t\\\n+}\n+\n+#define DO_IMMEDIATE_OPS(VALUE, TYPE, OP, NAME)\t\t\\\n+void varithimm_##NAME##_##TYPE (TYPE *dst, int count)\t\\\n+{\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\\\n+    dst[i] = dst[i] OP (TYPE) VALUE;\t\t\t\\\n+}\n+\n+#define DO_ARITH_OPS(TYPE, OP, NAME)\t\t\t\t\\\n+  DO_REGREG_OPS (TYPE, OP, NAME);\t\t\t\t\\\n+  DO_IMMEDIATE_OPS (1, TYPE, OP, NAME ## 1);\t\t\t\\\n+  DO_IMMEDIATE_OPS (0.5, TYPE, OP, NAME ## pointfive);\t\t\\\n+  DO_IMMEDIATE_OPS (2, TYPE, OP, NAME ## 2);\t\t\t\\\n+  DO_IMMEDIATE_OPS (2.5, TYPE, OP, NAME ## twopoint5);\t\t\\\n+  DO_IMMEDIATE_OPS (-0.5, TYPE, OP, NAME ## minuspointfive);\t\\\n+  DO_IMMEDIATE_OPS (-1, TYPE, OP, NAME ## minus1);\n+\n+DO_ARITH_OPS (_Float16, +, add)\n+DO_ARITH_OPS (float, +, add)\n+DO_ARITH_OPS (double, +, add)\n+\n+DO_ARITH_OPS (_Float16, -, minus)\n+DO_ARITH_OPS (float, -, minus)\n+DO_ARITH_OPS (double, -, minus)\n+\n+/* No specific count because it's valid to use fadd or fsub for the\n+   out-of-range constants.  */\n+/* { dg-final { scan-assembler {\\tfadd\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1.0\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0.5\\n} 2 } } */\n+/* { dg-final { scan-assembler-not   {\\tfadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #2} } } */\n+/* { dg-final { scan-assembler-not   {\\tfadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #-} } } */\n+\n+/* { dg-final { scan-assembler {\\tfsub\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1.0\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0.5\\n} 2 } } */\n+/* { dg-final { scan-assembler-not   {\\tfsub\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #2} } } */\n+/* { dg-final { scan-assembler-not   {\\tfsub\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #-} } } */\n+\n+/* { dg-final { scan-assembler {\\tfadd\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1.0\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0.5\\n} 2 } } */\n+/* { dg-final { scan-assembler-not   {\\tfadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #2} } } */\n+/* { dg-final { scan-assembler-not   {\\tfadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #-} } } */\n+\n+/* { dg-final { scan-assembler {\\tfsub\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1.0\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0.5\\n} 2 } } */\n+/* { dg-final { scan-assembler-not   {\\tfsub\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #2} } } */\n+/* { dg-final { scan-assembler-not   {\\tfsub\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #-} } } */\n+\n+/* { dg-final { scan-assembler {\\tfadd\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1.0\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0.5\\n} 2 } } */\n+/* { dg-final { scan-assembler-not   {\\tfadd\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #2} } } */\n+/* { dg-final { scan-assembler-not   {\\tfadd\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #-} } } */\n+\n+/* { dg-final { scan-assembler {\\tfsub\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1.0\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0.5\\n} 2 } } */\n+/* { dg-final { scan-assembler-not   {\\tfsub\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #2} } } */\n+/* { dg-final { scan-assembler-not   {\\tfsub\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #-} } } */"}, {"sha": "f0996664f72a22f5d88e75ec1b8ab55faba99228", "filename": "gcc/testsuite/gcc.target/aarch64/sve/frinta_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffrinta_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffrinta_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffrinta_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define DO_OPS(TYPE, OP)\t\t\t\\\n+void\t\t\t\t\t\t\\\n+vsqrt_##TYPE (TYPE *dst, TYPE *src, int count)\t\\\n+{\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\\\n+    dst[i] = __builtin_##OP (src[i]);\t\t\\\n+}\n+\n+DO_OPS (float, roundf)\n+DO_OPS (double, round)\n+\n+/* { dg-final { scan-assembler-times {\\tfrinta\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfrinta\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "7a6b2f80607df4bf22bc4ff928ca502a068442c3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/frinti_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffrinti_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffrinti_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffrinti_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define DO_OPS(TYPE, OP)\t\t\t\\\n+void\t\t\t\t\t\t\\\n+vsqrt_##TYPE (TYPE *dst, TYPE *src, int count)\t\\\n+{\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\\\n+    dst[i] = __builtin_##OP (src[i]);\t\t\\\n+}\n+\n+DO_OPS (float, nearbyintf)\n+DO_OPS (double, nearbyint)\n+\n+/* { dg-final { scan-assembler-times {\\tfrinti\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfrinti\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "f3c095645586c0c928421ab292d8d2edc9e39575", "filename": "gcc/testsuite/gcc.target/aarch64/sve/frintm_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffrintm_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffrintm_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffrintm_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define DO_OPS(TYPE, OP)\t\t\t\\\n+void\t\t\t\t\t\t\\\n+vsqrt_##TYPE (TYPE *dst, TYPE *src, int count)\t\\\n+{\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\\\n+    dst[i] = __builtin_##OP (src[i]);\t\t\\\n+}\n+\n+DO_OPS (float, floorf)\n+DO_OPS (double, floor)\n+\n+/* { dg-final { scan-assembler-times {\\tfrintm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfrintm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "5fb1eb3876cbce06735c5c4e1514ad360d24dc92", "filename": "gcc/testsuite/gcc.target/aarch64/sve/frintp_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffrintp_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffrintp_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffrintp_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define DO_OPS(TYPE, OP)\t\t\t\\\n+void\t\t\t\t\t\t\\\n+vsqrt_##TYPE (TYPE *dst, TYPE *src, int count)\t\\\n+{\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\\\n+    dst[i] = __builtin_##OP (src[i]);\t\t\\\n+}\n+\n+DO_OPS (float, ceilf)\n+DO_OPS (double, ceil)\n+\n+/* { dg-final { scan-assembler-times {\\tfrintp\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfrintp\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "3437533024fb7e67ba086e38c2bfc5955e8e75e5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/frintx_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffrintx_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffrintx_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffrintx_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define DO_OPS(TYPE, OP)\t\t\t\\\n+void\t\t\t\t\t\t\\\n+vsqrt_##TYPE (TYPE *dst, TYPE *src, int count)\t\\\n+{\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\\\n+    dst[i] = __builtin_##OP (src[i]);\t\t\\\n+}\n+\n+DO_OPS (float, rintf)\n+DO_OPS (double, rint)\n+\n+/* { dg-final { scan-assembler-times {\\tfrintx\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfrintx\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "08a837a6b1d36d28afd984f6e41231b3bed53c0f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/frintz_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffrintz_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffrintz_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffrintz_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#define DO_OPS(TYPE, OP)\t\t\t\\\n+void\t\t\t\t\t\t\\\n+vsqrt_##TYPE (TYPE *dst, TYPE *src, int count)\t\\\n+{\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\\\n+    dst[i] = __builtin_##OP (src[i]);\t\t\\\n+}\n+\n+DO_OPS (float, truncf)\n+DO_OPS (double, trunc)\n+\n+/* { dg-final { scan-assembler-times {\\tfrintz\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfrintz\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "55f1e2690b109744910e4a814dbf92a863fbe82f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fsqrt_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffsqrt_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffsqrt_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffsqrt_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-math-errno --save-temps\" } */\n+\n+#define DO_OPS(TYPE, OP)\t\t\t\\\n+void\t\t\t\t\t\t\\\n+vsqrt_##TYPE (TYPE *dst, TYPE *src, int count)\t\\\n+{\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\\\n+    dst[i] = __builtin_##OP (src[i]);\t\t\\\n+}\n+\n+DO_OPS (float, sqrtf)\n+DO_OPS (double, sqrt)\n+\n+/* { dg-final { scan-assembler-times {\\tfsqrt\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsqrt\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "f47a360dee9164e62e50889c20b27e99f5084d43", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fsubr_1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffsubr_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffsubr_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffsubr_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#define DO_IMMEDIATE_OPS(VALUE, TYPE, NAME)\t\t\t\\\n+void vsubrarithimm_##NAME##_##TYPE (TYPE *dst, int count)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    dst[i] = (TYPE) VALUE - dst[i];\t\t\t\t\\\n+}\n+\n+#define DO_ARITH_OPS(TYPE)\t\t\t\\\n+  DO_IMMEDIATE_OPS (0, TYPE, 0);\t\t\\\n+  DO_IMMEDIATE_OPS (1, TYPE, 1);\t\t\\\n+  DO_IMMEDIATE_OPS (0.5, TYPE, 0point5);\t\\\n+  DO_IMMEDIATE_OPS (2, TYPE, 2);\t\t\\\n+  DO_IMMEDIATE_OPS (3.5, TYPE, 3point5);\n+\n+DO_ARITH_OPS (_Float16)\n+DO_ARITH_OPS (float)\n+DO_ARITH_OPS (double)\n+\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-not   {\\tfsubr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #2} } } */\n+/* { dg-final { scan-assembler-not   {\\tfsubr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #3} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-not   {\\tfsubr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #2} } } */\n+/* { dg-final { scan-assembler-not   {\\tfsubr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #3} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfsubr\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0.5\\n} 1 } } */\n+/* { dg-final { scan-assembler-not   {\\tfsubr\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #2} } } */\n+/* { dg-final { scan-assembler-not   {\\tfsubr\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #3} } } */"}, {"sha": "5ab254dab0c1c0e21e5224125b793423f476c6a6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/index_1.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Findex_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Findex_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Findex_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=256 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define NUM_ELEMS(TYPE) (32 / sizeof (TYPE))\n+\n+#define DEF_LOOP(TYPE, BASE, STEP, SUFFIX)\t\\\n+void __attribute__ ((noinline, noclone))\t\\\n+loop_##TYPE##_##SUFFIX (TYPE *a)\t\t\\\n+{\t\t\t\t\t\t\\\n+  for (int i = 0; i < NUM_ELEMS (TYPE); ++i)\t\\\n+    a[i] = (BASE) + i * (STEP);\t\t\t\\\n+}\n+\n+#define TEST_ALL_UNSIGNED_TYPES(T, BASE, STEP, SUFFIX)\t\\\n+  T (uint8_t,  BASE, STEP, SUFFIX)\t\t\t\\\n+  T (uint16_t, BASE, STEP, SUFFIX)\t\t\t\\\n+  T (uint32_t, BASE, STEP, SUFFIX)\t\t\t\\\n+  T (uint64_t, BASE, STEP, SUFFIX)\n+\n+#define TEST_ALL_SIGNED_TYPES(T, BASE, STEP, SUFFIX)\t\\\n+  T (int8_t,  BASE, STEP, SUFFIX)\t\t\t\\\n+  T (int16_t, BASE, STEP, SUFFIX)\t\t\t\\\n+  T (int32_t, BASE, STEP, SUFFIX)\t\t\t\\\n+  T (int64_t, BASE, STEP, SUFFIX)\n+\n+/* Immediate loops.  */\n+#define TEST_IMMEDIATE(T)\t\t\t\\\n+  TEST_ALL_UNSIGNED_TYPES (T, 0, 1, b0s1)\t\\\n+  TEST_ALL_SIGNED_TYPES (T, 0, 1, b0s1)\t\t\\\n+  TEST_ALL_UNSIGNED_TYPES (T, 0, 15, b0s15)\t\\\n+  TEST_ALL_SIGNED_TYPES (T, 0, 15, b0s15)\t\\\n+  TEST_ALL_SIGNED_TYPES (T, 0, -1, b0sm1)\t\\\n+  TEST_ALL_SIGNED_TYPES (T, 0, -16, b0sm16)\t\\\n+  TEST_ALL_SIGNED_TYPES (T, -16, 1, bm16s1)\t\\\n+  TEST_ALL_UNSIGNED_TYPES (T, 15, 1, b15s1)\t\\\n+  TEST_ALL_SIGNED_TYPES (T, 15, 1, b15s1)\n+\n+/* Non-immediate loops.  */\n+#define TEST_NONIMMEDIATE(T)\t\t\t\\\n+  TEST_ALL_UNSIGNED_TYPES (T, 0, 16, b0s16)\t\\\n+  TEST_ALL_SIGNED_TYPES (T, 0, 16, b0s16)\t\\\n+  TEST_ALL_SIGNED_TYPES (T, 0, -17, b0sm17)\t\\\n+  TEST_ALL_SIGNED_TYPES (T, -17, 1, bm17s1)\t\\\n+  TEST_ALL_UNSIGNED_TYPES (T, 16, 1, b16s1)\t\\\n+  TEST_ALL_SIGNED_TYPES (T, 16, 1, b16s1)\t\\\n+  TEST_ALL_UNSIGNED_TYPES (T, 16, 16, b16s16)\t\\\n+  TEST_ALL_SIGNED_TYPES (T, 16, 16, b16s16)\t\\\n+  TEST_ALL_SIGNED_TYPES (T, -17, -17, bm17sm17)\n+\n+#define TEST_ALL(T) TEST_IMMEDIATE (T) TEST_NONIMMEDIATE (T)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.b, #0, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.b, #0, #15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.b, #0, #-1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.b, #0, #-16\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.b, #-16, #1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.b, #15, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.b, #0, w[0-9]+\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.b, w[0-9]+, #1\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.b, w[0-9]+, w[0-9]+\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.h, #0, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.h, #0, #15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.h, #0, #-1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.h, #0, #-16\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.h, #-16, #1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.h, #15, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.h, #0, w[0-9]+\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.h, w[0-9]+, #1\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.h, w[0-9]+, w[0-9]+\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.s, #0, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.s, #0, #15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.s, #0, #-1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.s, #0, #-16\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.s, #-16, #1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.s, #15, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.s, #0, w[0-9]+\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.s, w[0-9]+, #1\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.s, w[0-9]+, w[0-9]+\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.d, #0, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.d, #0, #15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.d, #0, #-1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.d, #0, #-16\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.d, #-16, #1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.d, #15, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.d, #0, x[0-9]+\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.d, x[0-9]+, #1\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tindex\\tz[0-9]+\\.d, x[0-9]+, x[0-9]+\\n} 3 } } */"}, {"sha": "abc69187f685580dd5796098fe34d6ec889447eb", "filename": "gcc/testsuite/gcc.target/aarch64/sve/index_1_run.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Findex_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Findex_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Findex_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=256\" } */\n+\n+#include \"index_1.c\"\n+\n+#define TEST_LOOP(TYPE, BASE, STEP, SUFFIX)\t\\\n+  {\t\t\t\t\t\t\\\n+    TYPE array[NUM_ELEMS (TYPE)] = {};\t\t\\\n+    loop_##TYPE##_##SUFFIX (array);\t\t\\\n+    for (int i = 0; i < NUM_ELEMS (TYPE); i++)\t\\\n+      if (array[i] != (TYPE) (BASE + i * STEP))\t\\\n+\t__builtin_abort ();\t\t\t\\\n+  }\n+\n+int __attribute__ ((optimize (1)))\n+main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "415de24744a42be5ef71629f1390bb697dfbb472", "filename": "gcc/testsuite/gcc.target/aarch64/sve/ld1r_1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fld1r_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fld1r_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fld1r_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 -msve-vector-bits=256 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define DUP4(X) X, X, X, X\n+#define DUP8(X) DUP4 (X), DUP4 (X)\n+#define DUP16(X) DUP8 (X), DUP8 (X)\n+#define DUP32(X) DUP16 (X), DUP16 (X)\n+\n+typedef uint8_t vuint8_t __attribute__ ((vector_size (32)));\n+typedef uint16_t vuint16_t __attribute__ ((vector_size (32)));\n+typedef uint32_t vuint32_t __attribute__ ((vector_size (32)));\n+typedef uint64_t vuint64_t __attribute__ ((vector_size (32)));\n+\n+#define TEST(TYPE, NAME, INIT)\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\t\\\n+  NAME##_##TYPE (TYPE *dest, __typeof__(dest[0][0]) *ptr)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE x = { INIT };\t\t\t\t\t\t\\\n+    *dest = x;\t\t\t\t\t\t\t\\\n+  }\n+\n+#define TEST_GROUP(TYPE, NAME, DUP)\t\t\\\n+  TEST (TYPE, NAME_##m1, DUP (ptr[-1]))\t\t\\\n+  TEST (TYPE, NAME_##0, DUP (ptr[0]))\t\t\\\n+  TEST (TYPE, NAME_##63, DUP (ptr[63]))\t\t\\\n+  TEST (TYPE, NAME_##64, DUP (ptr[64]))\n+\n+TEST_GROUP (vuint8_t, t8, DUP32)\n+TEST_GROUP (vuint16_t, t16, DUP16)\n+TEST_GROUP (vuint32_t, t16, DUP8)\n+TEST_GROUP (vuint64_t, t16, DUP4)\n+\n+/* { dg-final { scan-assembler-not {\\tld1rb\\tz[0-9]+\\.b, p[0-7]/z, \\[x1, -1\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1rb\\tz[0-9]+\\.b, p[0-7]/z, \\[x1\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1rb\\tz[0-9]+\\.b, p[0-7]/z, \\[x1, 63\\]\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tld1rb\\tz[0-9]+\\.b, p[0-7]/z, \\[x1, 64\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tld1rh\\tz[0-9]+\\.h, p[0-7]/z, \\[x1, -1\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1rh\\tz[0-9]+\\.h, p[0-7]/z, \\[x1\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1rh\\tz[0-9]+\\.h, p[0-7]/z, \\[x1, 126\\]\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tld1rh\\tz[0-9]+\\.h, p[0-7]/z, \\[x1, 128\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tld1rw\\tz[0-9]+\\.s, p[0-7]/z, \\[x1, -1\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1rw\\tz[0-9]+\\.s, p[0-7]/z, \\[x1\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1rw\\tz[0-9]+\\.s, p[0-7]/z, \\[x1, 252\\]\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tld1rw\\tz[0-9]+\\.s, p[0-7]/z, \\[x1, 256\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tld1rd\\tz[0-9]+\\.d, p[0-7]/z, \\[x1, -1\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1rd\\tz[0-9]+\\.d, p[0-7]/z, \\[x1\\]\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1rd\\tz[0-9]+\\.d, p[0-7]/z, \\[x1, 504\\]\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tld1rd\\tz[0-9]+\\.d, p[0-7]/z, \\[x1, 512\\]\\n} } } */"}, {"sha": "501ef5d2c4c5716683ff4aeb724a233f44aca693", "filename": "gcc/testsuite/gcc.target/aarch64/sve/load_const_offset_1.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_const_offset_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_const_offset_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_const_offset_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=256 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+typedef int64_t vnx2di __attribute__ ((vector_size (32)));\n+typedef int32_t vnx4si __attribute__ ((vector_size (32)));\n+typedef int16_t vnx8hi __attribute__ ((vector_size (32)));\n+typedef int8_t vnx16qi __attribute__ ((vector_size (32)));\n+\n+#define TEST_TYPE(TYPE)\t\t\t\t\t\t\\\n+  void sve_load_##TYPE##_neg9 (TYPE *a)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    register TYPE x asm (\"z0\") = a[-9];\t\t\t\t\\\n+    asm volatile (\"\" :: \"w\" (x));\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+  void sve_load_##TYPE##_neg8 (TYPE *a)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    register TYPE x asm (\"z0\") = a[-8];\t\t\t\t\\\n+    asm volatile (\"\" :: \"w\" (x));\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+  void sve_load_##TYPE##_0 (TYPE *a)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    register TYPE x asm (\"z0\") = a[0];\t\t\t\t\\\n+    asm volatile (\"\" :: \"w\" (x));\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+  void sve_load_##TYPE##_unaligned (TYPE *a)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    register TYPE x asm (\"z0\") = *(TYPE *) ((char *) a + 16);\t\\\n+    asm volatile (\"\" :: \"w\" (x));\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+  void sve_load_##TYPE##_7 (TYPE *a)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    register TYPE x asm (\"z0\") = a[7];\t\t\t\t\\\n+    asm volatile (\"\" :: \"w\" (x));\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+  void sve_load_##TYPE##_8 (TYPE *a)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    register TYPE x asm (\"z0\") = a[8];\t\t\t\t\\\n+    asm volatile (\"\" :: \"w\" (x));\t\t\t\t\\\n+  }\n+\n+TEST_TYPE (vnx2di)\n+TEST_TYPE (vnx4si)\n+TEST_TYPE (vnx8hi)\n+TEST_TYPE (vnx16qi)\n+\n+/* { dg-final { scan-assembler-times {\\tsub\\tx[0-9]+, x0, #288\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tx[0-9]+, x0, 16\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tx[0-9]+, x0, 256\\n} 4 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tld1d\\tz0\\.d, p[0-7]/z, \\[x0, #-9, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz0\\.d, p[0-7]/z, \\[x0, #-8, mul vl\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz0\\.d, p[0-7]/z, \\[x0\\]\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz0\\.d, p[0-7]/z, \\[x0, #7, mul vl\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tld1d\\tz0\\.d, p[0-7]/z, \\[x0, #8, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tld1w\\tz0\\.s, p[0-7]/z, \\[x0, #-9, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz0\\.s, p[0-7]/z, \\[x0, #-8, mul vl\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz0\\.s, p[0-7]/z, \\[x0\\]\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz0\\.s, p[0-7]/z, \\[x0, #7, mul vl\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tld1w\\tz0\\.s, p[0-7]/z, \\[x0, #8, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tld1h\\tz0\\.h, p[0-7]/z, \\[x0, #-9, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz0\\.h, p[0-7]/z, \\[x0, #-8, mul vl\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz0\\.h, p[0-7]/z, \\[x0\\]\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz0\\.h, p[0-7]/z, \\[x0, #7, mul vl\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tld1h\\tz0\\.h, p[0-7]/z, \\[x0, #8, mul vl\\]\\n} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tld1b\\tz0\\.b, p[0-7]/z, \\[x0, #-9, mul vl\\]\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz0\\.b, p[0-7]/z, \\[x0, #-8, mul vl\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz0\\.b, p[0-7]/z, \\[x0\\]\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz0\\.b, p[0-7]/z, \\[x0, #7, mul vl\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tld1b\\tz0\\.b, p[0-7]/z, \\[x0, #8, mul vl\\]\\n} } } */"}, {"sha": "25e84e307337cd5722025314a79e8564b25fafa3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/load_const_offset_2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_const_offset_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_const_offset_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_const_offset_2.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize -save-temps\" } */\n+\n+void\n+f (unsigned int *restrict a, signed char *restrict b, signed char mask, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    a[i] += (signed char) (b[i] | mask);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, #1, mul vl\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, #2, mul vl\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, #3, mul vl\\]\\n} 1 } } */"}, {"sha": "1c8bd881f7fee510174b6583937ef0f8b4df4eaf", "filename": "gcc/testsuite/gcc.target/aarch64/sve/load_const_offset_3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_const_offset_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_const_offset_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_const_offset_3.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize -save-temps -msve-vector-bits=256\" } */\n+\n+#include \"load_const_offset_2.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, #1, mul vl\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, #2, mul vl\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z, \\[x[0-9]+, #3, mul vl\\]\\n} 1 } } */"}, {"sha": "32905350c27877c716bdcf0a46cf46600cb99615", "filename": "gcc/testsuite/gcc.target/aarch64/sve/load_scalar_offset_1.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_scalar_offset_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_scalar_offset_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fload_scalar_offset_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 -msve-vector-bits=256 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+typedef int64_t vnx2di __attribute__ ((vector_size (32)));\n+typedef int32_t vnx4si __attribute__ ((vector_size (32)));\n+typedef int16_t vnx8hi __attribute__ ((vector_size (32)));\n+typedef int8_t vnx16qi __attribute__ ((vector_size (32)));\n+\n+void sve_load_64_u_lsl (uint64_t *a)\n+{\n+  register unsigned long i asm(\"x1\");\n+  asm volatile (\"\" : \"=r\" (i));\n+  asm volatile (\"\" :: \"w\" (*(vnx2di *)&a[i]));\n+}\n+\n+void sve_load_64_s_lsl (int64_t *a)\n+{\n+  register long i asm(\"x1\");\n+  asm volatile (\"\" : \"=r\" (i));\n+  asm volatile (\"\" :: \"w\" (*(vnx2di *)&a[i]));\n+}\n+\n+void sve_load_32_u_lsl (uint32_t *a)\n+{\n+  register unsigned long i asm(\"x1\");\n+  asm volatile (\"\" : \"=r\" (i));\n+  asm volatile (\"\" :: \"w\" (*(vnx4si *)&a[i]));\n+}\n+\n+void sve_load_32_s_lsl (int32_t *a)\n+{\n+  register long i asm(\"x1\");\n+  asm volatile (\"\" : \"=r\" (i));\n+  asm volatile (\"\" :: \"w\" (*(vnx4si *)&a[i]));\n+}\n+\n+void sve_load_16_z_lsl (uint16_t *a)\n+{\n+  register unsigned long i asm(\"x1\");\n+  asm volatile (\"\" : \"=r\" (i));\n+  asm volatile (\"\" :: \"w\" (*(vnx8hi *)&a[i]));\n+}\n+\n+void sve_load_16_s_lsl (int16_t *a)\n+{\n+  register long i asm(\"x1\");\n+  asm volatile (\"\" : \"=r\" (i));\n+  asm volatile (\"\" :: \"w\" (*(vnx8hi *)&a[i]));\n+}\n+\n+void sve_load_8_z (uint8_t *a)\n+{\n+  register unsigned long i asm(\"x1\");\n+  asm volatile (\"\" : \"=r\" (i));\n+  asm volatile (\"\" :: \"w\" (*(vnx16qi *)&a[i]));\n+}\n+\n+void sve_load_8_s (int8_t *a)\n+{\n+  register long i asm(\"x1\");\n+  asm volatile (\"\" : \"=r\" (i));\n+  asm volatile (\"\" :: \"w\" (*(vnx16qi *)&a[i]));\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz0\\.d, p[0-7]/z, \\[x0, x1, lsl 3\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz0\\.s, p[0-7]/z, \\[x0, x1, lsl 2\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz0\\.h, p[0-7]/z, \\[x0, x1, lsl 1\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz0\\.b, p[0-7]/z, \\[x0, x1\\]\\n} 2 } } */"}, {"sha": "25cd9081430280d15d438714ee808ca737319bfb", "filename": "gcc/testsuite/gcc.target/aarch64/sve/logical_1.c", "status": "added", "additions": 277, "deletions": 0, "changes": 277, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Flogical_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,277 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#define DO_CONSTANT(VALUE, TYPE, OP, NAME)\t\t\t\\\n+void vlogical_imm_##NAME##_##TYPE (TYPE *dst, int count)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; i++)\t\t\t\t\\\n+    dst[i] = dst[i] OP VALUE;\t\t\t\t\t\\\n+}\n+\n+#define DO_LOGICAL_OPS_BRIEF(TYPE, OP, NAME)\t\\\n+  DO_CONSTANT (1, TYPE, OP, NAME ## 1)\t\t\\\n+  DO_CONSTANT (2, TYPE, OP, NAME ## 2)\t\t\\\n+  DO_CONSTANT (5, TYPE, OP, NAME ## 5)\t\t\\\n+  DO_CONSTANT (6, TYPE, OP, NAME ## 6)\t\t\\\n+  DO_CONSTANT (8, TYPE, OP, NAME ## 8)\t\t\\\n+  DO_CONSTANT (9, TYPE, OP, NAME ## 9)\t\t\\\n+  DO_CONSTANT (-1, TYPE, OP, NAME ## minus1)\t\\\n+  DO_CONSTANT (-2, TYPE, OP, NAME ## minus2)\t\\\n+  DO_CONSTANT (-5, TYPE, OP, NAME ## minus5)\t\\\n+  DO_CONSTANT (-6, TYPE, OP, NAME ## minus6)\n+\n+#define DO_LOGICAL_OPS(TYPE, OP, NAME)\t\t\t\t\\\n+  DO_CONSTANT (1, TYPE, OP, NAME ## 1)\t\t\t\t\\\n+  DO_CONSTANT (2, TYPE, OP, NAME ## 2)\t\t\t\t\\\n+  DO_CONSTANT (3, TYPE, OP, NAME ## 3)\t\t\t\t\\\n+  DO_CONSTANT (4, TYPE, OP, NAME ## 4)\t\t\t\t\\\n+  DO_CONSTANT (5, TYPE, OP, NAME ## 5)\t\t\t\t\\\n+  DO_CONSTANT (6, TYPE, OP, NAME ## 6)\t\t\t\t\\\n+  DO_CONSTANT (7, TYPE, OP, NAME ## 7)\t\t\t\t\\\n+  DO_CONSTANT (8, TYPE, OP, NAME ## 8)\t\t\t\t\\\n+  DO_CONSTANT (9, TYPE, OP, NAME ## 9)\t\t\t\t\\\n+  DO_CONSTANT (10, TYPE, OP, NAME ## 10)\t\t\t\\\n+  DO_CONSTANT (11, TYPE, OP, NAME ## 11)\t\t\t\\\n+  DO_CONSTANT (12, TYPE, OP, NAME ## 12)\t\t\t\\\n+  DO_CONSTANT (13, TYPE, OP, NAME ## 13)\t\t\t\\\n+  DO_CONSTANT (14, TYPE, OP, NAME ## 14)\t\t\t\\\n+  DO_CONSTANT (15, TYPE, OP, NAME ## 15)\t\t\t\\\n+  DO_CONSTANT (16, TYPE, OP, NAME ## 16)\t\t\t\\\n+  DO_CONSTANT (17, TYPE, OP, NAME ## 17)\t\t\t\\\n+  DO_CONSTANT (18, TYPE, OP, NAME ## 18)\t\t\t\\\n+  DO_CONSTANT (19, TYPE, OP, NAME ## 19)\t\t\t\\\n+  DO_CONSTANT (20, TYPE, OP, NAME ## 20)\t\t\t\\\n+  DO_CONSTANT (21, TYPE, OP, NAME ## 21)\t\t\t\\\n+  DO_CONSTANT (22, TYPE, OP, NAME ## 22)\t\t\t\\\n+  DO_CONSTANT (23, TYPE, OP, NAME ## 23)\t\t\t\\\n+  DO_CONSTANT (24, TYPE, OP, NAME ## 24)\t\t\t\\\n+  DO_CONSTANT (25, TYPE, OP, NAME ## 25)\t\t\t\\\n+  DO_CONSTANT (26, TYPE, OP, NAME ## 26)\t\t\t\\\n+  DO_CONSTANT (27, TYPE, OP, NAME ## 27)\t\t\t\\\n+  DO_CONSTANT (28, TYPE, OP, NAME ## 28)\t\t\t\\\n+  DO_CONSTANT (29, TYPE, OP, NAME ## 29)\t\t\t\\\n+  DO_CONSTANT (30, TYPE, OP, NAME ## 30)\t\t\t\\\n+  DO_CONSTANT (31, TYPE, OP, NAME ## 31)\t\t\t\\\n+  DO_CONSTANT (32, TYPE, OP, NAME ## 32)\t\t\t\\\n+  DO_CONSTANT (33, TYPE, OP, NAME ## 33)\t\t\t\\\n+  DO_CONSTANT (34, TYPE, OP, NAME ## 34)\t\t\t\\\n+  DO_CONSTANT (35, TYPE, OP, NAME ## 35)\t\t\t\\\n+  DO_CONSTANT (252, TYPE, OP, NAME ## 252)\t\t\t\\\n+  DO_CONSTANT (253, TYPE, OP, NAME ## 253)\t\t\t\\\n+  DO_CONSTANT (254, TYPE, OP, NAME ## 254)\t\t\t\\\n+  DO_CONSTANT (255, TYPE, OP, NAME ## 255)\t\t\t\\\n+  DO_CONSTANT (256, TYPE, OP, NAME ## 256)\t\t\t\\\n+  DO_CONSTANT (257, TYPE, OP, NAME ## 257)\t\t\t\\\n+  DO_CONSTANT (65535, TYPE, OP, NAME ## 65535)\t\t\t\\\n+  DO_CONSTANT (65536, TYPE, OP, NAME ## 65536)\t\t\t\\\n+  DO_CONSTANT (65537, TYPE, OP, NAME ## 65537)\t\t\t\\\n+  DO_CONSTANT (2147483646, TYPE, OP, NAME ## 2147483646)\t\\\n+  DO_CONSTANT (2147483647, TYPE, OP, NAME ## 2147483647)\t\\\n+  DO_CONSTANT (2147483648, TYPE, OP, NAME ## 2147483648)\t\\\n+  DO_CONSTANT (-1, TYPE, OP, NAME ## minus1)\t\t\t\\\n+  DO_CONSTANT (-2, TYPE, OP, NAME ## minus2)\t\t\t\\\n+  DO_CONSTANT (-3, TYPE, OP, NAME ## minus3)\t\t\t\\\n+  DO_CONSTANT (-4, TYPE, OP, NAME ## minus4)\t\t\t\\\n+  DO_CONSTANT (-5, TYPE, OP, NAME ## minus5)\t\t\t\\\n+  DO_CONSTANT (-6, TYPE, OP, NAME ## minus6)\t\t\t\\\n+  DO_CONSTANT (-7, TYPE, OP, NAME ## minus7)\t\t\t\\\n+  DO_CONSTANT (-8, TYPE, OP, NAME ## minus8)\t\t\t\\\n+  DO_CONSTANT (-9, TYPE, OP, NAME ## minus9)\n+\n+DO_LOGICAL_OPS_BRIEF (char, &, and)\n+DO_LOGICAL_OPS_BRIEF (long, &, and)\n+\n+DO_LOGICAL_OPS (int, &, and)\n+DO_LOGICAL_OPS (int, |, or)\n+DO_LOGICAL_OPS (int, ^, xor)\n+\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.d, z[0-9]+\\.d, #0x1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.b, z[0-9]+\\.b, #0x1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.d, z[0-9]+\\.d, #0x2\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x2\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.b, z[0-9]+\\.b, #0x2\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x3\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x4\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x5\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.d, z[0-9]+\\.d, #0x6\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x6\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.b, z[0-9]+\\.b, #0x6\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x7\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.d, z[0-9]+\\.d, #0x8\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x8\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.b, z[0-9]+\\.b, #0x8\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x9\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xa\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xb\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xc\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xd\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xe\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xf\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x10\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x11\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x12\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x13\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x14\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x15\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x16\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x17\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x18\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x19\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x1a\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x1b\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x1c\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x1d\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x1e\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x1f\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x20\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x21\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x22\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x23\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfc\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfd\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfe\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xff\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x100\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x101\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xffff\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x10000\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x10001\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x7ffffffe\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x7fffffff\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x80000000\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xffffffff\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffffe\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffffe\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.b, z[0-9]+\\.b, #0xfe\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffffd\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffffc\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffffb\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffffb\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.b, z[0-9]+\\.b, #0xfb\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffffa\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffffa\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tand\\tz[0-9]+\\.b, z[0-9]+\\.b, #0xfa\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffff9\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffff8\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffff7\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 28 } } */\n+\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x2\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x3\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x4\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x5\\n} } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x6\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x7\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x8\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x9\\n} } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xa\\n} } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xb\\n} } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xc\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xd\\n} } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xe\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xf\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x10\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x11\\n} } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x12\\n} } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x13\\n} } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x14\\n} } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x15\\n} } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x16\\n} } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x17\\n} } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x18\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x19\\n} } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x1a\\n} } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x1b\\n} } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x1c\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x1d\\n} } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x1e\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x1f\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x20\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x21\\n} } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x22\\n} } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x23\\n} } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfc\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfd\\n} } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfe\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xff\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x100\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x101\\n} } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xffff\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x10000\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x10001\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x7ffffffe\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x7fffffff\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x80000000\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xffffffff\\n} } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffffe\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffffd\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffffc\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffffb\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffffa\\n} } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffff9\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffff8\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffff7\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 22 } } */\n+\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x2\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x3\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x4\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x5\\n} } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x6\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x7\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x8\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x9\\n} } } */\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xa\\n} } } */\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xb\\n} } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xc\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xd\\n} } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xe\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xf\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x10\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x11\\n} } } */\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x12\\n} } } */\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x13\\n} } } */\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x14\\n} } } */\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x15\\n} } } */\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x16\\n} } } */\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x17\\n} } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x18\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x19\\n} } } */\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x1a\\n} } } */\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x1b\\n} } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x1c\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x1d\\n} } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x1e\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x1f\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x20\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x21\\n} } } */\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x22\\n} } } */\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x23\\n} } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfc\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfd\\n} } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfe\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xff\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x100\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x101\\n} } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xffff\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x10000\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x10001\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x7ffffffe\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x7fffffff\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0x80000000\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xffffffff\\n} } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffffe\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffffd\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffffc\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffffb\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffffa\\n} } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffff9\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffff8\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, z[0-9]+\\.s, #0xfffffff7\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 22 } } */"}, {"sha": "21d2cdb203f7bccdaeddc392b36a3cb6c3c67e57", "filename": "gcc/testsuite/gcc.target/aarch64/sve/loop_add_1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Floop_add_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Floop_add_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Floop_add_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+void __attribute__((noinline, noclone))\n+vadd (int *dst, int *op1, int *op2, int count)\n+{\n+  for (int i = 0; i < count; ++i)\n+    dst[i] = op1[i] + op2[i];\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s, p[0-7]/z,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s, p[0-7],} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */"}, {"sha": "35fafe64abf27f94089f071640a311cdd6fe1a07", "filename": "gcc/testsuite/gcc.target/aarch64/sve/loop_add_1_run.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Floop_add_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Floop_add_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Floop_add_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O3\" } */\n+\n+#include \"loop_add_1.c\"\n+\n+#define ELEMS 10\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  int in1[ELEMS] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n+  int in2[ELEMS] = { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };\n+  int out[ELEMS];\n+  int check[ELEMS] = { 3, 5, 7, 9, 11, 13, 15, 17, 19, 21 };\n+\n+  vadd (out, in1, in2, ELEMS);\n+\n+  for (int i = 0; i < ELEMS; ++i)\n+    if (out[i] != check[i])\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "0378b3ebbf66f5e1822e9ba3406408e4f7298040", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mad_1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmad_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmad_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmad_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 -msve-vector-bits=256 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+typedef int8_t vnx16qi __attribute__((vector_size(32)));\n+typedef int16_t vnx8hi __attribute__((vector_size(32)));\n+typedef int32_t vnx4si __attribute__((vector_size(32)));\n+typedef int64_t vnx2di __attribute__((vector_size(32)));\n+\n+#define DO_OP(TYPE)\t\t\t\t\t\t\\\n+void vmla_##TYPE (TYPE *x, TYPE y, TYPE z)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  register TYPE dst  asm(\"z0\");\t\t\t\t\t\\\n+  register TYPE src1 asm(\"z2\");\t\t\t\t\t\\\n+  register TYPE src2 asm(\"z4\");\t\t\t\t\t\\\n+  dst = *x;\t\t\t\t\t\t\t\\\n+  src1 = y;\t\t\t\t\t\t\t\\\n+  src2 = z;\t\t\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst), \"w\" (src1), \"w\" (src2));\t\\\n+  dst = (dst * src1) + src2;\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst));\t\t\t\t\\\n+  *x = dst;\t\t\t\t\t\t\t\\\n+}\n+\n+DO_OP (vnx16qi)\n+DO_OP (vnx8hi)\n+DO_OP (vnx4si)\n+DO_OP (vnx2di)\n+\n+/* { dg-final { scan-assembler-times {\\tmad\\tz0\\.b, p[0-7]/m, z2\\.b, z4\\.b} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmad\\tz0\\.h, p[0-7]/m, z2\\.h, z4\\.h} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmad\\tz0\\.s, p[0-7]/m, z2\\.s, z4\\.s} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmad\\tz0\\.d, p[0-7]/m, z2\\.d, z4\\.d} 1 } } */"}, {"sha": "0b2c82018f487109b4d85f07d30266df49e9aca8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/maxmin_1.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmaxmin_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmaxmin_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmaxmin_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#include <stdint.h>\n+\n+#define NUM_ELEMS(TYPE) (320 / sizeof (TYPE))\n+\n+#define DEF_MAXMIN(TYPE, NAME, CMP_OP)\t\t\t\t\\\n+void __attribute__ ((noinline, noclone))\t\t\t\\\n+fun_##NAME##_##TYPE (TYPE *restrict r, TYPE *restrict a,\t\\\n+\t\t     TYPE *restrict b)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < NUM_ELEMS (TYPE); i++)\t\t\t\\\n+    r[i] = a[i] CMP_OP b[i] ? a[i] : b[i];\t\t\t\\\n+}\n+\n+#define TEST_ALL(T)\t\t\t\\\n+  T (int8_t, max, >)\t\t\t\\\n+  T (int16_t, max, >)\t\t\t\\\n+  T (int32_t, max, >)\t\t\t\\\n+  T (int64_t, max, >)\t\t\t\\\n+  T (uint8_t, max, >)\t\t\t\\\n+  T (uint16_t, max, >)\t\t\t\\\n+  T (uint32_t, max, >)\t\t\t\\\n+  T (uint64_t, max, >)\t\t\t\\\n+  T (_Float16, max, >)\t\t\t\\\n+  T (float, max, >)\t\t\t\\\n+  T (double, max, >)\t\t\t\\\n+\t\t\t\t\t\\\n+  T (int8_t, min, <)\t\t\t\\\n+  T (int16_t, min, <)\t\t\t\\\n+  T (int32_t, min, <)\t\t\t\\\n+  T (int64_t, min, <)\t\t\t\\\n+  T (uint8_t, min, <)\t\t\t\\\n+  T (uint16_t, min, <)\t\t\t\\\n+  T (uint32_t, min, <)\t\t\t\\\n+  T (uint64_t, min, <)\t\t\t\\\n+  T (_Float16, min, <)\t\t\t\\\n+  T (float, min, <)\t\t\t\\\n+  T (double, min, <)\n+\n+TEST_ALL (DEF_MAXMIN)\n+\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "a734c6a812b492d300d187e7bd29d75167ef8544", "filename": "gcc/testsuite/gcc.target/aarch64/sve/maxmin_1_run.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmaxmin_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmaxmin_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmaxmin_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#include \"maxmin_1.c\"\n+\n+#define TEST_LOOP(TYPE, NAME, CMP_OP)\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    TYPE a[NUM_ELEMS (TYPE)];\t\t\t\t\\\n+    TYPE b[NUM_ELEMS (TYPE)];\t\t\t\t\\\n+    TYPE r[NUM_ELEMS (TYPE)];\t\t\t\t\\\n+    for (int i = 0; i < NUM_ELEMS (TYPE); i++)\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\ta[i] = ((i * 2) % 3) * (i & 1 ? 1 : -1);\t\\\n+\tb[i] = (1 + (i % 4)) * (i & 1 ? -1 : 1);\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+    fun_##NAME##_##TYPE (r, a, b);\t\t\t\\\n+    for (int i = 0; i < NUM_ELEMS (TYPE); i++)\t\t\\\n+      if (r[i] != (a[i] CMP_OP b[i] ? a[i] : b[i]))\t\\\n+\t__builtin_abort ();\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "e90afa2f375236da43fb41cdfce645a5c0c29e07", "filename": "gcc/testsuite/gcc.target/aarch64/sve/maxmin_strict_1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmaxmin_strict_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmaxmin_strict_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmaxmin_strict_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <math.h>\n+\n+#define NUM_ELEMS(TYPE) (320 / sizeof (TYPE))\n+\n+#define DEF_MAXMIN(TYPE, FUN)\t\t\t\t\t\\\n+void __attribute__ ((noinline, noclone))\t\t\t\\\n+test_##FUN##_##TYPE (TYPE *restrict r, TYPE *restrict a,\t\\\n+\t\t     TYPE *restrict b)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < NUM_ELEMS (TYPE); i++)\t\t\t\\\n+    r[i] = FUN (a[i], b[i]);\t\t\t\t\t\\\n+}\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  T (float, fmaxf)\t\t\t\t\\\n+  T (double, fmax)\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+  T (float, fminf)\t\t\t\t\\\n+  T (double, fmin)\n+\n+TEST_ALL (DEF_MAXMIN)\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "c905027d623df44255fdf2a7d56bb84d73661505", "filename": "gcc/testsuite/gcc.target/aarch64/sve/maxmin_strict_1_run.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmaxmin_strict_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmaxmin_strict_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmaxmin_strict_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"maxmin_strict_1.c\"\n+\n+#define TEST_LOOP(TYPE, FUN)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    TYPE a[NUM_ELEMS (TYPE)];\t\t\t\t\\\n+    TYPE b[NUM_ELEMS (TYPE)];\t\t\t\t\\\n+    TYPE r[NUM_ELEMS (TYPE)];\t\t\t\t\\\n+    for (int i = 0; i < NUM_ELEMS (TYPE); i++)\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\ta[i] = ((i * 2) % 3) * (i & 1 ? 1 : -1);\t\\\n+\tb[i] = (1 + (i % 4)) * (i & 1 ? -1 : 1);\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+    test_##FUN##_##TYPE (r, a, b);\t\t\t\\\n+    for (int i = 0; i < NUM_ELEMS (TYPE); i++)\t\t\\\n+      if (r[i] != FUN (a[i], b[i]))\t\t\t\\\n+\t__builtin_abort ();\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "b4963383a4bd4e4e4d88721b667c248f80b34c4b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mla_1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmla_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmla_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmla_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 -msve-vector-bits=256 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+typedef int8_t vnx16qi __attribute__((vector_size(32)));\n+typedef int16_t vnx8hi __attribute__((vector_size(32)));\n+typedef int32_t vnx4si __attribute__((vector_size(32)));\n+typedef int64_t vnx2di __attribute__((vector_size(32)));\n+\n+#define DO_OP(TYPE)\t\t\t\t\t\t\\\n+void vmla_##TYPE (TYPE *x, TYPE y, TYPE z)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  register TYPE dst  asm(\"z0\");\t\t\t\t\t\\\n+  register TYPE src1 asm(\"z2\");\t\t\t\t\t\\\n+  register TYPE src2 asm(\"z4\");\t\t\t\t\t\\\n+  dst = *x;\t\t\t\t\t\t\t\\\n+  src1 = y;\t\t\t\t\t\t\t\\\n+  src2 = z;\t\t\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst), \"w\" (src1), \"w\" (src2));\t\\\n+  dst = (src1 * src2) + dst;\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst));\t\t\t\t\\\n+  *x = dst;\t\t\t\t\t\t\t\\\n+}\n+\n+DO_OP (vnx16qi)\n+DO_OP (vnx8hi)\n+DO_OP (vnx4si)\n+DO_OP (vnx2di)\n+\n+/* { dg-final { scan-assembler-times {\\tmla\\tz0\\.b, p[0-7]/m, z2\\.b, z4\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmla\\tz0\\.h, p[0-7]/m, z2\\.h, z4\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmla\\tz0\\.s, p[0-7]/m, z2\\.s, z4\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmla\\tz0\\.d, p[0-7]/m, z2\\.d, z4\\.d\\n} 1 } } */"}, {"sha": "797ebdb4fe4ab52dcb915dc04dc4c5d7fa53d180", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mls_1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmls_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmls_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmls_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 -msve-vector-bits=256 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+typedef int8_t vnx16qi __attribute__((vector_size(32)));\n+typedef int16_t vnx8hi __attribute__((vector_size(32)));\n+typedef int32_t vnx4si __attribute__((vector_size(32)));\n+typedef int64_t vnx2di __attribute__((vector_size(32)));\n+\n+#define DO_OP(TYPE)\t\t\t\t\t\t\\\n+void vmla_##TYPE (TYPE *x, TYPE y, TYPE z)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  register TYPE dst  asm(\"z0\");\t\t\t\t\t\\\n+  register TYPE src1 asm(\"z2\");\t\t\t\t\t\\\n+  register TYPE src2 asm(\"z4\");\t\t\t\t\t\\\n+  dst = *x;\t\t\t\t\t\t\t\\\n+  src1 = y;\t\t\t\t\t\t\t\\\n+  src2 = z;\t\t\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst), \"w\" (src1), \"w\" (src2));\t\\\n+  dst = dst - (src1 * src2);\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst));\t\t\t\t\\\n+  *x = dst;\t\t\t\t\t\t\t\\\n+}\n+\n+DO_OP (vnx16qi)\n+DO_OP (vnx8hi)\n+DO_OP (vnx4si)\n+DO_OP (vnx2di)\n+\n+/* { dg-final { scan-assembler-times {\\tmls\\tz0\\.b, p[0-7]/m, z2\\.b, z4\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmls\\tz0\\.h, p[0-7]/m, z2\\.h, z4\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmls\\tz0\\.s, p[0-7]/m, z2\\.s, z4\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmls\\tz0\\.d, p[0-7]/m, z2\\.d, z4\\.d\\n} 1 } } */"}, {"sha": "20b2344be1080082ba8aa73576524810fa624eb6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mov_rr_1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmov_rr_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmov_rr_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmov_rr_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 -msve-vector-bits=256 --save-temps\" } */\n+\n+void sve_copy_rr (void)\n+{\n+  typedef int vnx4si __attribute__((vector_size(32)));\n+  register vnx4si x asm (\"z1\");\n+  register vnx4si y asm (\"z2\");\n+  asm volatile (\"#foo\" : \"=w\" (x));\n+  y = x;\n+  asm volatile (\"#foo\" :: \"w\" (y));\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "5686af52af11c0ac3059f02cc3def652da7894df", "filename": "gcc/testsuite/gcc.target/aarch64/sve/msb_1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmsb_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmsb_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmsb_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 -msve-vector-bits=256 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+typedef int8_t vnx16qi __attribute__((vector_size(32)));\n+typedef int16_t vnx8hi __attribute__((vector_size(32)));\n+typedef int32_t vnx4si __attribute__((vector_size(32)));\n+typedef int64_t vnx2di __attribute__((vector_size(32)));\n+\n+#define DO_OP(TYPE)\t\t\t\t\t\t\\\n+void vmla_##TYPE (TYPE *x, TYPE y, TYPE z)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  register TYPE dst  asm(\"z0\");\t\t\t\t\t\\\n+  register TYPE src1 asm(\"z2\");\t\t\t\t\t\\\n+  register TYPE src2 asm(\"z4\");\t\t\t\t\t\\\n+  dst = *x;\t\t\t\t\t\t\t\\\n+  src1 = y;\t\t\t\t\t\t\t\\\n+  src2 = z;\t\t\t\t\t\t\t\\\n+  asm volatile (\"\" :: \"w\" (dst), \"w\" (src1), \"w\" (src2));\t\\\n+  dst = src2 - (dst * src1);                          \\\n+  asm volatile (\"\" :: \"w\" (dst));\t\t\t\t\\\n+  *x = dst;\t\t\t\t\t\t\t\\\n+}\n+\n+DO_OP (vnx16qi)\n+DO_OP (vnx8hi)\n+DO_OP (vnx4si)\n+DO_OP (vnx2di)\n+\n+/* { dg-final { scan-assembler-times {\\tmsb\\tz0\\.b, p[0-7]/m, z2\\.b, z4\\.b} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmsb\\tz0\\.h, p[0-7]/m, z2\\.h, z4\\.h} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmsb\\tz0\\.s, p[0-7]/m, z2\\.s, z4\\.s} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmsb\\tz0\\.d, p[0-7]/m, z2\\.d, z4\\.d} 1 } } */"}, {"sha": "5856a7315442ac5ff2537f12be224d8ecffaabde", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mul_1.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmul_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmul_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmul_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define DO_REGREG_OPS(TYPE, OP, NAME)\t\t\t\t\\\n+void varith_##TYPE##_##NAME (TYPE *dst, TYPE *src, int count)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    dst[i] = dst[i] OP src[i];\t\t\t\t\t\\\n+}\n+\n+#define DO_IMMEDIATE_OPS(VALUE, TYPE, OP, NAME)\t\t\\\n+void varithimm_##NAME##_##TYPE (TYPE *dst, int count)\t\\\n+{\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\\\n+    dst[i] = dst[i] OP VALUE;\t\t\t\t\\\n+}\n+\n+#define DO_ARITH_OPS(TYPE, OP, NAME)\t\t\t\\\n+  DO_REGREG_OPS (TYPE, OP, NAME);\t\t\t\\\n+  DO_IMMEDIATE_OPS (0, TYPE, OP, NAME ## 0);\t\t\\\n+  DO_IMMEDIATE_OPS (86, TYPE, OP, NAME ## 86);\t\t\\\n+  DO_IMMEDIATE_OPS (109, TYPE, OP, NAME ## 109);\t\\\n+  DO_IMMEDIATE_OPS (141, TYPE, OP, NAME ## 141);\t\\\n+  DO_IMMEDIATE_OPS (-1, TYPE, OP, NAME ## minus1);\t\\\n+  DO_IMMEDIATE_OPS (-110, TYPE, OP, NAME ## minus110);\t\\\n+  DO_IMMEDIATE_OPS (-141, TYPE, OP, NAME ## minus141);\n+\n+DO_ARITH_OPS (int8_t, *, mul)\n+DO_ARITH_OPS (int16_t, *, mul)\n+DO_ARITH_OPS (int32_t, *, mul)\n+DO_ARITH_OPS (int64_t, *, mul)\n+\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.b, z[0-9]+\\.b, #86\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.b, z[0-9]+\\.b, #109\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.b, z[0-9]+\\.b, #115\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tmul\\tz[0-9]+\\.b, z[0-9]+\\.b, #141\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tmul\\tz[0-9]+\\.b, z[0-9]+\\.b, #-1\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.b, z[0-9]+\\.b, #-110\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.b, z[0-9]+\\.b, #-115\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tmul\\tz[0-9]+\\.b, z[0-9]+\\.b, #-141\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.h, z[0-9]+\\.h, #86\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.h, z[0-9]+\\.h, #109\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tmul\\tz[0-9]+\\.h, z[0-9]+\\.h, #141\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.h, z[0-9]+\\.h, #-110\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tmul\\tz[0-9]+\\.h, z[0-9]+\\.h, #-141\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.s, z[0-9]+\\.s, #86\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.s, z[0-9]+\\.s, #109\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tmul\\tz[0-9]+\\.s, z[0-9]+\\.s, #141\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.s, z[0-9]+\\.s, #-110\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tmul\\tz[0-9]+\\.s, z[0-9]+\\.s, #-141\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.d, z[0-9]+\\.d, #86\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.d, z[0-9]+\\.d, #109\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tmul\\tz[0-9]+\\.d, z[0-9]+\\.d, #141\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.d, z[0-9]+\\.d, #-110\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tmul\\tz[0-9]+\\.d, z[0-9]+\\.d, #-141\\n} } } */"}, {"sha": "2690fcf8ad497c94a2e6454d2cec8c233bc65dd2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/neg_1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fneg_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fneg_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fneg_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define DO_OPS(TYPE)\t\t\t\t\t\\\n+void vneg_##TYPE (TYPE *dst, TYPE *src, int count)\t\\\n+{\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\\\n+    dst[i] = -src[i];\t\t\t\t\t\\\n+}\n+\n+DO_OPS (int8_t)\n+DO_OPS (int16_t)\n+DO_OPS (int32_t)\n+DO_OPS (int64_t)\n+\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "a025ae733b3a33413d377b78de4b7cbac8501d3a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/nlogical_1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fnlogical_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fnlogical_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fnlogical_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define DO_VNLOGICAL(TYPE)\t\t\t\t\\\n+void __attribute__ ((noinline, noclone))\t\t\\\n+vnlogical_not_##TYPE (TYPE *dst, int count)\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; i++)\t\t\t\\\n+    dst[i] = ~dst[i];\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+void __attribute__ ((noinline, noclone))\t\t\\\n+vnlogical_bic_##TYPE (TYPE *dst, TYPE *src, int count)\t\\\n+{\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; i++)\t\t\t\\\n+    dst[i] = dst[i] & ~src[i];\t\t\t\t\\\n+}\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  T (int8_t)\t\t\t\t\t\\\n+  T (int16_t)\t\t\t\t\t\\\n+  T (int32_t)\t\t\t\t\t\\\n+  T (int64_t)\n+\n+TEST_ALL (DO_VNLOGICAL)\n+\n+/* { dg-final { scan-assembler-times {\\tnot\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tnot\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tnot\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tnot\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 4 } } */"}, {"sha": "63d6c237782435f3b8f5adf3925ca92c1d5038b8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/nlogical_1_run.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fnlogical_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fnlogical_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fnlogical_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O3\" } */\n+\n+#include \"nlogical_1.c\"\n+\n+#define N 128\n+\n+#define TEST_VNLOGICAL(TYPE)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    TYPE dst[N], src[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tdst[i] = i ^ 42;\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+    vnlogical_not_##TYPE (dst, N);\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\\\n+      if (dst[i] != (TYPE) ~(i ^ 42))\t\t\t\\\n+\t__builtin_abort ();\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tdst[i] = i ^ 42;\t\t\t\t\\\n+\tsrc[i] = i % 5;\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+    vnlogical_bic_##TYPE (dst, src, N);\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\\\n+      if (dst[i] != (TYPE) ((i ^ 42) & ~(i % 5)))\t\\\n+\t__builtin_abort ();\t\t\t\t\\\n+  }\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  TEST_ALL (TEST_VNLOGICAL)\n+  return 0;\n+}"}, {"sha": "d9de9963d09d45ef3d9af3a0fefbb928921557be", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pack_1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define PACK(TYPED, TYPES)\t\t\t\t\\\n+void __attribute__ ((noinline, noclone))\t\t\\\n+pack_##TYPED##_##TYPES (TYPED *d, TYPES *s, int size)\t\\\n+{\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < size; i++)\t\t\t\\\n+    d[i] = s[i] + 1;\t\t\t\t\t\\\n+}\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  T (int32_t, int64_t)\t\t\t\t\\\n+  T (int16_t, int32_t)\t\t\t\t\\\n+  T (int8_t, int16_t)\t\t\t\t\\\n+  T (uint32_t, uint64_t)\t\t\t\\\n+  T (uint16_t, uint32_t)\t\t\t\\\n+  T (uint8_t, uint16_t)\n+\n+TEST_ALL (PACK)\n+\n+/* { dg-final { scan-assembler-times {\\tuzp1\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuzp1\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuzp1\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b\\n} 2 } } */"}, {"sha": "1b39b91160d84f50f7cf90fba9edc7404c5fdbf5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pack_1_run.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"pack_1.c\"\n+\n+#define ARRAY_SIZE 57\n+\n+#define TEST_LOOP(TYPED, TYPES)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPED arrayd[ARRAY_SIZE];\t\t\t\t\t\\\n+    TYPES arrays[ARRAY_SIZE];\t\t\t\t\t\\\n+    for (int i = 0; i < ARRAY_SIZE; i++)\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tarrays[i] = (i - 10) * 3;\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    pack_##TYPED##_##TYPES (arrayd, arrays, ARRAY_SIZE);\t\\\n+    for (int i = 0; i < ARRAY_SIZE; i++)\t\t\t\\\n+      if (arrayd[i] != (TYPED) ((TYPES) ((i - 10) * 3) + 1))\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "367fbd967a3e912a6d8315e2ad2cee2b957a474b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pack_fcvt_signed_1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_fcvt_signed_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_fcvt_signed_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_fcvt_signed_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+void __attribute__ ((noinline, noclone))\n+pack_int_double_plus_3 (int32_t *d, double *s, int size)\n+{\n+  for (int i = 0; i < size; i++)\n+    d[i] = s[i] + 3;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tfcvtzs\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.d\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuzp1\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */"}, {"sha": "2fcd18b7fa91c748e1fae721e1aeb8363c4b1cbb", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pack_fcvt_signed_1_run.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_fcvt_signed_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_fcvt_signed_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_fcvt_signed_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"pack_fcvt_signed_1.c\"\n+\n+#define ARRAY_SIZE 107\n+\n+#define VAL1 ((i * 345.434) - (19 * 345.434))\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  static int32_t array_dest[ARRAY_SIZE];\n+  double array_source[ARRAY_SIZE];\n+\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    {\n+      array_source[i] = VAL1;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+\n+  pack_int_double_plus_3 (array_dest, array_source, ARRAY_SIZE);\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    if (array_dest[i] != (int32_t) VAL1 + 3)\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "c5da480c9932e062707a76e2847dc1440d5dcc6a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pack_fcvt_unsigned_1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_fcvt_unsigned_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_fcvt_unsigned_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_fcvt_unsigned_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+void __attribute__ ((noinline, noclone))\n+pack_int_double_plus_7 (uint32_t *d, double *s, int size)\n+{\n+  for (int i = 0; i < size; i++)\n+    d[i] = s[i] + 7;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tfcvtzu\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.d\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuzp1\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */"}, {"sha": "7c54f1b3a5de430e252bf4e4e1099ea2c7f192bc", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pack_fcvt_unsigned_1_run.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_fcvt_unsigned_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_fcvt_unsigned_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_fcvt_unsigned_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"pack_fcvt_unsigned_1.c\"\n+\n+#define ARRAY_SIZE 157\n+\n+#define VAL1 (i * 9584.3432)\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  static uint32_t array_dest[ARRAY_SIZE];\n+  double array_source[ARRAY_SIZE];\n+\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    {\n+      array_source[i] = VAL1;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+\n+  pack_int_double_plus_7 (array_dest, array_source, ARRAY_SIZE);\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    if (array_dest[i] != (uint32_t) VAL1 + 7)\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "2683a87f4ff4d925d310e85431f650232d46195b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pack_float_1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_float_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_float_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_float_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+void __attribute__ ((noinline, noclone))\n+pack_float_plus_1point1 (float *d, double *s, int size)\n+{\n+  for (int i = 0; i < size; i++)\n+    d[i] = s[i] + 1.1;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tfcvt\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.d\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuzp1\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */"}, {"sha": "3d7a175c9513d165c61676eb62814e5b7a1081aa", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pack_float_1_run.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_float_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_float_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_float_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"pack_float_1.c\"\n+\n+#define ARRAY_SIZE 107\n+\n+#define VAL1 ((i * 886.556) - (43 * 886.556))\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  float array_dest[ARRAY_SIZE];\n+  double array_source[ARRAY_SIZE];\n+\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    {\n+      array_source[i] = VAL1;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+\n+  pack_float_plus_1point1 (array_dest, array_source, ARRAY_SIZE);\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    if (array_dest[i] != (float) (VAL1 + 1.1))\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "188127b764d221d38244073f9dc71bcdb1f0d8a6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/popcount_1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpopcount_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpopcount_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpopcount_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+void __attribute__ ((noinline, noclone))\n+popcount_32 (unsigned int *restrict dst, uint32_t *restrict src, int size)\n+{\n+  for (int i = 0; i < size; ++i)\n+    dst[i] = __builtin_popcount (src[i]);\n+}\n+\n+void __attribute__ ((noinline, noclone))\n+popcount_64 (unsigned int *restrict dst, uint64_t *restrict src, int size)\n+{\n+  for (int i = 0; i < size; ++i)\n+    dst[i] = __builtin_popcountl (src[i]);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tcnt\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tcnt\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuzp1\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */"}, {"sha": "7494dfd51612d40f529a7ac939d38791a2937252", "filename": "gcc/testsuite/gcc.target/aarch64/sve/popcount_1_run.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpopcount_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpopcount_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpopcount_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"popcount_1.c\"\n+\n+extern void abort (void) __attribute__ ((noreturn));\n+\n+unsigned int data[] = {\n+  0x11111100, 6,\n+  0xe0e0f0f0, 14,\n+  0x9900aab3, 13,\n+  0x00040003, 3,\n+  0x000e000c, 5,\n+  0x22227777, 16,\n+  0x12341234, 10,\n+  0x0, 0\n+};\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  unsigned int count = sizeof (data) / sizeof (data[0]) / 2;\n+\n+  uint32_t in32[count];\n+  unsigned int out32[count];\n+  for (unsigned int i = 0; i < count; ++i)\n+    {\n+      in32[i] = data[i * 2];\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+  popcount_32 (out32, in32, count);\n+  for (unsigned int i = 0; i < count; ++i)\n+    if (out32[i] != data[i * 2 + 1])\n+      abort ();\n+\n+  count /= 2;\n+  uint64_t in64[count];\n+  unsigned int out64[count];\n+  for (unsigned int i = 0; i < count; ++i)\n+    {\n+      in64[i] = ((uint64_t) data[i * 4] << 32) | data[i * 4 + 2];\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+  popcount_64 (out64, in64, count);\n+  for (unsigned int i = 0; i < count; ++i)\n+    if (out64[i] != data[i * 4 + 1] + data[i * 4 + 3])\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "f86966bc1fab1aced69e65ba61707e79b54ebe1f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/reduc_1.c", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,135 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_REDUC_PLUS(TYPE)\t\t\t\\\n+TYPE __attribute__ ((noinline, noclone))\t\\\n+reduc_plus_##TYPE (TYPE *a, int n)\t\t\\\n+{\t\t\t\t\t\t\\\n+  TYPE r = 0;\t\t\t\t\t\\\n+  for (int i = 0; i < n; ++i)\t\t\t\\\n+    r += a[i];\t\t\t\t\t\\\n+  return r;\t\t\t\t\t\\\n+}\n+\n+#define TEST_PLUS(T)\t\t\t\t\\\n+  T (int8_t)\t\t\t\t\t\\\n+  T (int16_t)\t\t\t\t\t\\\n+  T (int32_t)\t\t\t\t\t\\\n+  T (int64_t)\t\t\t\t\t\\\n+  T (uint8_t)\t\t\t\t\t\\\n+  T (uint16_t)\t\t\t\t\t\\\n+  T (uint32_t)\t\t\t\t\t\\\n+  T (uint64_t)\t\t\t\t\t\\\n+  T (_Float16)\t\t\t\t\t\\\n+  T (float)\t\t\t\t\t\\\n+  T (double)\n+\n+TEST_PLUS (DEF_REDUC_PLUS)\n+\n+#define DEF_REDUC_MAXMIN(TYPE, NAME, CMP_OP)\t\\\n+TYPE __attribute__ ((noinline, noclone))\t\\\n+reduc_##NAME##_##TYPE (TYPE *a, int n)\t\t\\\n+{\t\t\t\t\t\t\\\n+  TYPE r = 13;\t\t\t\t\t\\\n+  for (int i = 0; i < n; ++i)\t\t\t\\\n+    r = a[i] CMP_OP r ? a[i] : r;\t\t\\\n+  return r;\t\t\t\t\t\\\n+}\n+\n+#define TEST_MAXMIN(T)\t\t\t\t\\\n+  T (int8_t, max, >)\t\t\t\t\\\n+  T (int16_t, max, >)\t\t\t\t\\\n+  T (int32_t, max, >)\t\t\t\t\\\n+  T (int64_t, max, >)\t\t\t\t\\\n+  T (uint8_t, max, >)\t\t\t\t\\\n+  T (uint16_t, max, >)\t\t\t\t\\\n+  T (uint32_t, max, >)\t\t\t\t\\\n+  T (uint64_t, max, >)\t\t\t\t\\\n+  T (_Float16, max, >)\t\t\t\t\\\n+  T (float, max, >)\t\t\t\t\\\n+  T (double, max, >)\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+  T (int8_t, min, <)\t\t\t\t\\\n+  T (int16_t, min, <)\t\t\t\t\\\n+  T (int32_t, min, <)\t\t\t\t\\\n+  T (int64_t, min, <)\t\t\t\t\\\n+  T (uint8_t, min, <)\t\t\t\t\\\n+  T (uint16_t, min, <)\t\t\t\t\\\n+  T (uint32_t, min, <)\t\t\t\t\\\n+  T (uint64_t, min, <)\t\t\t\t\\\n+  T (_Float16, min, <)\t\t\t\t\\\n+  T (float, min, <)\t\t\t\t\\\n+  T (double, min, <)\n+\n+TEST_MAXMIN (DEF_REDUC_MAXMIN)\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfaddv\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfaddv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfaddv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmaxv\\tb[0-9]+, p[0-7], z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmaxv\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmaxv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmaxv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumaxv\\tb[0-9]+, p[0-7], z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumaxv\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumaxv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumaxv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnmv\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnmv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnmv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsminv\\tb[0-9]+, p[0-7], z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsminv\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsminv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsminv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuminv\\tb[0-9]+, p[0-7], z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuminv\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuminv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuminv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnmv\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnmv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnmv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "3fcb7fba650d6cf2297f43fb26257cf0e05ee744", "filename": "gcc/testsuite/gcc.target/aarch64/sve/reduc_1_run.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#include \"reduc_1.c\"\n+\n+#define NUM_ELEMS(TYPE) (73 + sizeof (TYPE))\n+\n+#define INIT_VECTOR(TYPE)\t\t\t\t\\\n+  TYPE a[NUM_ELEMS (TYPE) + 1];\t\t\t\t\\\n+  for (int i = 0; i < NUM_ELEMS (TYPE) + 1; i++)\t\\\n+    {\t\t\t\t\t\t\t\\\n+      a[i] = (i * 2) * (i & 1 ? 1 : -1);\t\t\\\n+      asm volatile (\"\" ::: \"memory\");\t\t\t\\\n+    }\n+\n+#define TEST_REDUC_PLUS(TYPE)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    INIT_VECTOR (TYPE);\t\t\t\t\t\\\n+    TYPE r1 = reduc_plus_##TYPE (a, NUM_ELEMS (TYPE));\t\\\n+    volatile TYPE r2 = 0;\t\t\t\t\\\n+    for (int i = 0; i < NUM_ELEMS (TYPE); ++i)\t\t\\\n+      r2 += a[i];\t\t\t\t\t\\\n+    if (r1 != r2)\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\\\n+  }\n+\n+#define TEST_REDUC_MAXMIN(TYPE, NAME, CMP_OP)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    INIT_VECTOR (TYPE);\t\t\t\t\t\t\\\n+    TYPE r1 = reduc_##NAME##_##TYPE (a, NUM_ELEMS (TYPE));\t\\\n+    volatile TYPE r2 = 13;\t\t\t\t\t\\\n+    for (int i = 0; i < NUM_ELEMS (TYPE); ++i)\t\t\t\\\n+      r2 = a[i] CMP_OP r2 ? a[i] : r2;\t\t\t\t\\\n+    if (r1 != r2)\t\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_PLUS (TEST_REDUC_PLUS)\n+  TEST_MAXMIN (TEST_REDUC_MAXMIN)\n+\n+  return 0;\n+}"}, {"sha": "adc3699f9ed579d0cd2108c6b069602a12abec49", "filename": "gcc/testsuite/gcc.target/aarch64/sve/reduc_2.c", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_2.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,106 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#include <stdint.h>\n+\n+#define NUM_ELEMS(TYPE) (1024 / sizeof (TYPE))\n+\n+#define DEF_REDUC_PLUS(TYPE)\t\t\t\t\t\\\n+void __attribute__ ((noinline, noclone))\t\t\t\\\n+reduc_plus_##TYPE (TYPE (*restrict a)[NUM_ELEMS (TYPE)],\t\\\n+\t\t   TYPE *restrict r, int n)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < n; i++)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      r[i] = 0;\t\t\t\t\t\t\t\\\n+      for (int j = 0; j < NUM_ELEMS (TYPE); j++)\t\t\\\n+        r[i] += a[i][j];\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define TEST_PLUS(T)\t\t\t\t\\\n+  T (int8_t)\t\t\t\t\t\\\n+  T (int16_t)\t\t\t\t\t\\\n+  T (int32_t)\t\t\t\t\t\\\n+  T (int64_t)\t\t\t\t\t\\\n+  T (uint8_t)\t\t\t\t\t\\\n+  T (uint16_t)\t\t\t\t\t\\\n+  T (uint32_t)\t\t\t\t\t\\\n+  T (uint64_t)\t\t\t\t\t\\\n+  T (_Float16)\t\t\t\t\t\\\n+  T (float)\t\t\t\t\t\\\n+  T (double)\n+\n+TEST_PLUS (DEF_REDUC_PLUS)\n+\n+#define DEF_REDUC_MAXMIN(TYPE, NAME, CMP_OP)\t\t\t\\\n+void __attribute__ ((noinline, noclone))\t\t\t\\\n+reduc_##NAME##_##TYPE (TYPE (*restrict a)[NUM_ELEMS (TYPE)],\t\\\n+\t\t       TYPE *restrict r, int n)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < n; i++)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      r[i] = a[i][0];\t\t\t\t\t\t\\\n+      for (int j = 0; j < NUM_ELEMS (TYPE); j++)\t\t\\\n+        r[i] = a[i][j] CMP_OP r[i] ? a[i][j] : r[i];\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define TEST_MAXMIN(T)\t\t\t\t\\\n+  T (int8_t, max, >)\t\t\t\t\\\n+  T (int16_t, max, >)\t\t\t\t\\\n+  T (int32_t, max, >)\t\t\t\t\\\n+  T (int64_t, max, >)\t\t\t\t\\\n+  T (uint8_t, max, >)\t\t\t\t\\\n+  T (uint16_t, max, >)\t\t\t\t\\\n+  T (uint32_t, max, >)\t\t\t\t\\\n+  T (uint64_t, max, >)\t\t\t\t\\\n+  T (_Float16, max, >)\t\t\t\t\\\n+  T (float, max, >)\t\t\t\t\\\n+  T (double, max, >)\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+  T (int8_t, min, <)\t\t\t\t\\\n+  T (int16_t, min, <)\t\t\t\t\\\n+  T (int32_t, min, <)\t\t\t\t\\\n+  T (int64_t, min, <)\t\t\t\t\\\n+  T (uint8_t, min, <)\t\t\t\t\\\n+  T (uint16_t, min, <)\t\t\t\t\\\n+  T (uint32_t, min, <)\t\t\t\t\\\n+  T (uint64_t, min, <)\t\t\t\t\\\n+  T (_Float16, min, <)\t\t\t\t\\\n+  T (float, min, <)\t\t\t\t\\\n+  T (double, min, <)\n+\n+TEST_MAXMIN (DEF_REDUC_MAXMIN)\n+\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfaddv\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfaddv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfaddv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmaxv\\tb[0-9]+, p[0-7], z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmaxv\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmaxv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmaxv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumaxv\\tb[0-9]+, p[0-7], z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumaxv\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumaxv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumaxv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnmv\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnmv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnmv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsminv\\tb[0-9]+, p[0-7], z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsminv\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsminv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsminv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuminv\\tb[0-9]+, p[0-7], z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuminv\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuminv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuminv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnmv\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnmv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnmv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "f48e348be4315a7038f647bb0853db3e316295e2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/reduc_2_run.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_2_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#include \"reduc_2.c\"\n+\n+#define NROWS 53\n+\n+/* -ffast-math fuzz for PLUS.  */\n+#define CMP__Float16(X, Y) ((X) >= (Y) * 0.875 && (X) <= (Y) * 1.125)\n+#define CMP_float(X, Y) ((X) == (Y))\n+#define CMP_double(X, Y) ((X) == (Y))\n+#define CMP_int8_t(X, Y) ((X) == (Y))\n+#define CMP_int16_t(X, Y) ((X) == (Y))\n+#define CMP_int32_t(X, Y) ((X) == (Y))\n+#define CMP_int64_t(X, Y) ((X) == (Y))\n+#define CMP_uint8_t(X, Y) ((X) == (Y))\n+#define CMP_uint16_t(X, Y) ((X) == (Y))\n+#define CMP_uint32_t(X, Y) ((X) == (Y))\n+#define CMP_uint64_t(X, Y) ((X) == (Y))\n+\n+#define INIT_MATRIX(TYPE)\t\t\t\t\\\n+  TYPE mat[NROWS][NUM_ELEMS (TYPE)];\t\t\t\\\n+  TYPE r[NROWS];\t\t\t\t\t\\\n+  for (int i = 0; i < NROWS; i++)\t\t\t\\\n+    for (int j = 0; j < NUM_ELEMS (TYPE); j++)\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tmat[i][j] = i + (j * 2) * (j & 1 ? 1 : -1);\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\\\n+      }\n+\n+#define TEST_REDUC_PLUS(TYPE)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    INIT_MATRIX (TYPE);\t\t\t\t\t\\\n+    reduc_plus_##TYPE (mat, r, NROWS);\t\t\t\\\n+    for (int i = 0; i < NROWS; i++)\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tvolatile TYPE r2 = 0;\t\t\t\t\\\n+\tfor (int j = 0; j < NUM_ELEMS (TYPE); ++j)\t\\\n+\t  r2 += mat[i][j];\t\t\t\t\\\n+\tif (!CMP_##TYPE (r[i], r2))\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+    }\n+\n+#define TEST_REDUC_MAXMIN(TYPE, NAME, CMP_OP)\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    INIT_MATRIX (TYPE);\t\t\t\t\t\\\n+    reduc_##NAME##_##TYPE (mat, r, NROWS);\t\t\\\n+    for (int i = 0; i < NROWS; i++)\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tvolatile TYPE r2 = mat[i][0];\t\t\t\\\n+\tfor (int j = 0; j < NUM_ELEMS (TYPE); ++j)\t\\\n+\t  r2 = mat[i][j] CMP_OP r2 ? mat[i][j] : r2;\t\\\n+\tif (r[i] != r2)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+    }\n+\n+int main ()\n+{\n+  TEST_PLUS (TEST_REDUC_PLUS)\n+  TEST_MAXMIN (TEST_REDUC_MAXMIN)\n+\n+  return 0;\n+}"}, {"sha": "456119978ef4e7119208e8aec326a1324b500573", "filename": "gcc/testsuite/gcc.target/aarch64/sve/reduc_3.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_3.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+\n+#include <stdint.h>\n+\n+#define NUM_ELEMS(TYPE) (32 / sizeof (TYPE))\n+\n+#define REDUC_PTR(DSTTYPE, SRCTYPE)\t\t\t\t\\\n+void reduc_ptr_##DSTTYPE##_##SRCTYPE (DSTTYPE *restrict sum,\t\\\n+\t\t\t\t      SRCTYPE *restrict array,\t\\\n+\t\t\t\t      int count)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  *sum = 0;\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    *sum += array[i];\t\t\t\t\t\t\\\n+}\n+\n+REDUC_PTR (int8_t, int8_t)\n+REDUC_PTR (int16_t, int16_t)\n+\n+REDUC_PTR (int32_t, int32_t)\n+REDUC_PTR (int64_t, int64_t)\n+\n+REDUC_PTR (_Float16, _Float16)\n+REDUC_PTR (float, float)\n+REDUC_PTR (double, double)\n+\n+/* Widening reductions.  */\n+REDUC_PTR (int32_t, int8_t)\n+REDUC_PTR (int32_t, int16_t)\n+\n+REDUC_PTR (int64_t, int8_t)\n+REDUC_PTR (int64_t, int16_t)\n+REDUC_PTR (int64_t, int32_t)\n+\n+REDUC_PTR (float, _Float16)\n+REDUC_PTR (double, float)\n+\n+/* Float<>Int conversions */\n+REDUC_PTR (_Float16, int16_t)\n+REDUC_PTR (float, int32_t)\n+REDUC_PTR (double, int64_t)\n+\n+REDUC_PTR (int16_t, _Float16)\n+REDUC_PTR (int32_t, float)\n+REDUC_PTR (int64_t, double)\n+\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.s\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tfaddv\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfaddv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tfaddv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 3 } } */"}, {"sha": "732ca701ce4cd6bd1dca643f0f8d576cc2b291aa", "filename": "gcc/testsuite/gcc.target/aarch64/sve/rev_1.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frev_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frev_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frev_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=256 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+typedef int8_t vnx16qi __attribute__((vector_size (32)));\n+typedef int16_t vnx8hi __attribute__((vector_size (32)));\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+typedef int64_t vnx2di __attribute__((vector_size (32)));\n+typedef _Float16 vnx8hf __attribute__((vector_size (32)));\n+typedef float vnx4sf __attribute__((vector_size (32)));\n+typedef double vnx2df __attribute__((vector_size (32)));\n+\n+#define MASK_2(X, Y) (Y) - 1 - (X), (Y) - 2 - (X)\n+#define MASK_4(X, Y) MASK_2 (X, Y), MASK_2 (X + 2, Y)\n+#define MASK_8(X, Y) MASK_4 (X, Y), MASK_4 (X + 4, Y)\n+#define MASK_16(X, Y) MASK_8 (X, Y), MASK_8 (X + 8, Y)\n+#define MASK_32(X, Y) MASK_16 (X, Y), MASK_16 (X + 16, Y)\n+\n+#define INDEX_32 vnx16qi\n+#define INDEX_16 vnx8hi\n+#define INDEX_8 vnx4si\n+#define INDEX_4 vnx2di\n+\n+#define PERMUTE(TYPE, NUNITS)\t\t\t\t\t\t\\\n+  TYPE permute_##TYPE (TYPE values1, TYPE values2)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return __builtin_shuffle\t\t\t\t\t\t\\\n+      (values1, values2,\t\t\t\t\t\t\\\n+       ((INDEX_##NUNITS) { MASK_##NUNITS (0, NUNITS) }));\t\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  T (vnx16qi, 32)\t\t\t\t\\\n+  T (vnx8hi, 16)\t\t\t\t\\\n+  T (vnx4si, 8)\t\t\t\t\t\\\n+  T (vnx2di, 4)\t\t\t\t\t\\\n+  T (vnx8hf, 16)\t\t\t\t\\\n+  T (vnx4sf, 8)\t\t\t\t\t\\\n+  T (vnx2df, 4)\n+\n+TEST_ALL (PERMUTE)\n+\n+/* { dg-final { scan-assembler-not {\\ttbl\\t} } } */\n+\n+/* { dg-final { scan-assembler-times {\\trev\\tz[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\trev\\tz[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\trev\\tz[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\trev\\tz[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */"}, {"sha": "1a3d9b4eae5c6a35305c8767205c890b98626f65", "filename": "gcc/testsuite/gcc.target/aarch64/sve/revb_1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevb_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevb_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevb_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=256 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+typedef int8_t vnx16qi __attribute__((vector_size (32)));\n+\n+#define MASK_2(X, Y) (X) ^ (Y), (X + 1) ^ (Y)\n+#define MASK_4(X, Y) MASK_2 (X, Y), MASK_2 (X + 2, Y)\n+#define MASK_8(X, Y) MASK_4 (X, Y), MASK_4 (X + 4, Y)\n+#define MASK_16(X, Y) MASK_8 (X, Y), MASK_8 (X + 8, Y)\n+#define MASK_32(X, Y) MASK_16 (X, Y), MASK_16 (X + 16, Y)\n+\n+#define INDEX_32 vnx16qi\n+\n+#define PERMUTE(TYPE, NUNITS, REV_NUNITS)\t\t\t\t\\\n+  TYPE permute_##TYPE##_##REV_NUNITS (TYPE values1, TYPE values2)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return __builtin_shuffle\t\t\t\t\t\t\\\n+      (values1, values2,\t\t\t\t\t\t\\\n+       ((INDEX_##NUNITS) { MASK_##NUNITS (0, REV_NUNITS - 1) }));\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  T (vnx16qi, 32, 2)\t\t\t\t\\\n+  T (vnx16qi, 32, 4)\t\t\t\t\\\n+  T (vnx16qi, 32, 8)\n+\n+TEST_ALL (PERMUTE)\n+\n+/* { dg-final { scan-assembler-not {\\ttbl\\t} } } */\n+\n+/* { dg-final { scan-assembler-times {\\trevb\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d} 1 } } */\n+/* { dg-final { scan-assembler-times {\\trevb\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s} 1 } } */\n+/* { dg-final { scan-assembler-times {\\trevb\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h} 1 } } */"}, {"sha": "76145812b7d30e2fe16ccce2acd404d5289fa7f3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/revh_1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevh_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevh_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevh_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=256 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+typedef uint16_t vnx8hi __attribute__((vector_size (32)));\n+typedef _Float16 vnx8hf __attribute__((vector_size (32)));\n+\n+#define MASK_2(X, Y) (X) ^ (Y), (X + 1) ^ (Y)\n+#define MASK_4(X, Y) MASK_2 (X, Y), MASK_2 (X + 2, Y)\n+#define MASK_8(X, Y) MASK_4 (X, Y), MASK_4 (X + 4, Y)\n+#define MASK_16(X, Y) MASK_8 (X, Y), MASK_8 (X + 8, Y)\n+#define MASK_32(X, Y) MASK_16 (X, Y), MASK_16 (X + 16, Y)\n+\n+#define INDEX_16 vnx8hi\n+\n+#define PERMUTE(TYPE, NUNITS, REV_NUNITS)\t\t\t\t\\\n+  TYPE permute_##TYPE##_##REV_NUNITS (TYPE values1, TYPE values2)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return __builtin_shuffle\t\t\t\t\t\t\\\n+      (values1, values2,\t\t\t\t\t\t\\\n+       ((INDEX_##NUNITS) { MASK_##NUNITS (0, REV_NUNITS - 1) }));\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  T (vnx8hi, 16, 2)\t\t\t\t\\\n+  T (vnx8hi, 16, 4)\t\t\t\t\\\n+  T (vnx8hf, 16, 2)\t\t\t\t\\\n+  T (vnx8hf, 16, 4)\n+\n+TEST_ALL (PERMUTE)\n+\n+/* { dg-final { scan-assembler-not {\\ttbl\\t} } } */\n+\n+/* { dg-final { scan-assembler-times {\\trevh\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d} 2 } } */\n+/* { dg-final { scan-assembler-times {\\trevh\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s} 2 } } */"}, {"sha": "8ac68b782bdc567fcfe4061edb2aac1a77f26dfc", "filename": "gcc/testsuite/gcc.target/aarch64/sve/revw_1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevw_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevw_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Frevw_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=256 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+typedef uint32_t vnx4si __attribute__((vector_size (32)));\n+typedef float vnx4sf __attribute__((vector_size (32)));\n+\n+#define MASK_2(X, Y) (X) ^ (Y), (X + 1) ^ (Y)\n+#define MASK_4(X, Y) MASK_2 (X, Y), MASK_2 (X + 2, Y)\n+#define MASK_8(X, Y) MASK_4 (X, Y), MASK_4 (X + 4, Y)\n+\n+#define INDEX_8 vnx4si\n+\n+#define PERMUTE(TYPE, NUNITS, REV_NUNITS)\t\t\t\t\\\n+  TYPE permute_##TYPE##_##REV_NUNITS (TYPE values1, TYPE values2)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return __builtin_shuffle\t\t\t\t\t\t\\\n+      (values1, values2,\t\t\t\t\t\t\\\n+       ((INDEX_##NUNITS) { MASK_##NUNITS (0, REV_NUNITS - 1) }));\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  T (vnx4si, 8, 2)\t\t\t\t\\\n+  T (vnx4sf, 8, 2)\n+\n+TEST_ALL (PERMUTE)\n+\n+/* { dg-final { scan-assembler-not {\\ttbl\\t} } } */\n+\n+/* { dg-final { scan-assembler-times {\\trevw\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d} 2 } } */"}, {"sha": "f4c5ebd46af36be47fccca602d80fabb0fde2c63", "filename": "gcc/testsuite/gcc.target/aarch64/sve/shift_1.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fshift_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fshift_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fshift_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,108 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define DO_REG_OPS(TYPE)\t\t\t\t\t\\\n+void ashiftr_##TYPE (TYPE *dst, TYPE src, int count)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    dst[i] = dst[i] >> src;\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+void lshiftr_##TYPE (u##TYPE *dst, u##TYPE src, int count)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    dst[i] = dst[i] >> src;\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+void lshiftl_##TYPE (u##TYPE *dst, u##TYPE src, int count)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    dst[i] = dst[i] << src;\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+void vashiftr_##TYPE (TYPE *dst, TYPE *src, int count)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    dst[i] = dst[i] >> src[i];\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+void vlshiftr_##TYPE (u##TYPE *dst, u##TYPE *src, int count)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    dst[i] = dst[i] >> src[i];\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+void vlshiftl_##TYPE (u##TYPE *dst, u##TYPE *src, int count)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    dst[i] = dst[i] << src[i];\t\t\t\t\t\\\n+}\n+\n+#define DO_IMMEDIATE_OPS(VALUE, TYPE, NAME)\t\t\t\\\n+void vashiftr_imm_##NAME##_##TYPE (TYPE *dst, int count)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    dst[i] = dst[i] >> VALUE;\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+void vlshiftr_imm_##NAME##_##TYPE (u##TYPE *dst, int count)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    dst[i] = dst[i] >> VALUE;\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+void vlshiftl_imm_##NAME##_##TYPE (u##TYPE *dst, int count)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    dst[i] = dst[i] << VALUE;\t\t\t\t\t\\\n+}\n+\n+DO_REG_OPS (int32_t);\n+DO_REG_OPS (int64_t);\n+\n+DO_IMMEDIATE_OPS (0, int8_t, 0);\n+DO_IMMEDIATE_OPS (5, int8_t, 5);\n+DO_IMMEDIATE_OPS (7, int8_t, 7);\n+\n+DO_IMMEDIATE_OPS (0, int16_t, 0);\n+DO_IMMEDIATE_OPS (5, int16_t, 5);\n+DO_IMMEDIATE_OPS (15, int16_t, 15);\n+\n+DO_IMMEDIATE_OPS (0, int32_t, 0);\n+DO_IMMEDIATE_OPS (5, int32_t, 5);\n+DO_IMMEDIATE_OPS (31, int32_t, 31);\n+\n+DO_IMMEDIATE_OPS (0, int64_t, 0);\n+DO_IMMEDIATE_OPS (5, int64_t, 5);\n+DO_IMMEDIATE_OPS (63, int64_t, 63);\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, z[0-9]+\\.b, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, z[0-9]+\\.b, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, z[0-9]+\\.b, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, z[0-9]+\\.b, #7\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, z[0-9]+\\.b, #7\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, z[0-9]+\\.b, #7\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, z[0-9]+\\.h, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, z[0-9]+\\.h, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, z[0-9]+\\.h, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, z[0-9]+\\.h, #15\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, z[0-9]+\\.h, #15\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, z[0-9]+\\.h, #15\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, z[0-9]+\\.s, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, z[0-9]+\\.s, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, z[0-9]+\\.s, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, z[0-9]+\\.s, #31\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, z[0-9]+\\.s, #31\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, z[0-9]+\\.s, #31\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.d, z[0-9]+\\.d, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.d, z[0-9]+\\.d, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.d, z[0-9]+\\.d, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.d, z[0-9]+\\.d, #63\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.d, z[0-9]+\\.d, #63\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.d, z[0-9]+\\.d, #63\\n} 1 } } */"}, {"sha": "a5dd5ebfaedb4d3ae7c54a965d05b28ed48fcc8f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/single_1.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fopenmp-simd -msve-vector-bits=256\" } */\n+\n+#ifndef N\n+#define N 32\n+#endif\n+\n+#include <stdint.h>\n+\n+#define TEST_LOOP(TYPE, VALUE)\t\t\t\\\n+  void\t\t\t\t\t\t\\\n+  test_##TYPE (TYPE *data)\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    _Pragma (\"omp simd\")\t\t\t\\\n+    for (int i = 0; i < N / sizeof (TYPE); ++i)\t\\\n+      data[i] = VALUE;\t\t\t\t\\\n+  }\n+\n+TEST_LOOP (uint8_t, 1)\n+TEST_LOOP (int8_t, 2)\n+TEST_LOOP (uint16_t, 3)\n+TEST_LOOP (int16_t, 4)\n+TEST_LOOP (uint32_t, 5)\n+TEST_LOOP (int32_t, 6)\n+TEST_LOOP (uint64_t, 7)\n+TEST_LOOP (int64_t, 8)\n+TEST_LOOP (_Float16, 1.0f)\n+TEST_LOOP (float, 2.0f)\n+TEST_LOOP (double, 3.0)\n+\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.b, #1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.b, #2\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, #3\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, #4\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.s, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.s, #6\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #7\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #8\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, #15360\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0e\\+0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #3\\.0e\\+0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tptrue\\tp[0-7]\\.b, vl32\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tptrue\\tp[0-7]\\.h, vl16\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tptrue\\tp[0-7]\\.s, vl8\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tptrue\\tp[0-7]\\.d, vl4\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.b,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.h,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d,} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\twhile} } } */\n+/* { dg-final { scan-assembler-not {\\tb} } } */\n+/* { dg-final { scan-assembler-not {\\tcmp} } } */\n+/* { dg-final { scan-assembler-not {\\tindex} } } */"}, {"sha": "1ef72b62e0a4a0d72ae184005ed53137f6a91eb5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/single_2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_2.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fopenmp-simd -msve-vector-bits=512\" } */\n+\n+#define N 64\n+#include \"single_1.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.b, #1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.b, #2\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, #3\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, #4\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.s, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.s, #6\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #7\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #8\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, #15360\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0e\\+0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #3\\.0e\\+0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tptrue\\tp[0-7]\\.b, vl64\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tptrue\\tp[0-7]\\.h, vl32\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tptrue\\tp[0-7]\\.s, vl16\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tptrue\\tp[0-7]\\.d, vl8\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.b,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.h,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d,} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\twhile} } } */\n+/* { dg-final { scan-assembler-not {\\tb} } } */\n+/* { dg-final { scan-assembler-not {\\tcmp} } } */\n+/* { dg-final { scan-assembler-not {\\tindex} } } */"}, {"sha": "fefbfbf393e63ec72431dd888c4fa91e4b788f76", "filename": "gcc/testsuite/gcc.target/aarch64/sve/single_3.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_3.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fopenmp-simd -msve-vector-bits=1024\" } */\n+\n+#define N 128\n+#include \"single_1.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.b, #1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.b, #2\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, #3\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, #4\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.s, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.s, #6\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #7\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #8\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, #15360\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0e\\+0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #3\\.0e\\+0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tptrue\\tp[0-7]\\.b, vl128\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tptrue\\tp[0-7]\\.h, vl64\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tptrue\\tp[0-7]\\.s, vl32\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tptrue\\tp[0-7]\\.d, vl16\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.b,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.h,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d,} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\twhile} } } */\n+/* { dg-final { scan-assembler-not {\\tb} } } */\n+/* { dg-final { scan-assembler-not {\\tcmp} } } */\n+/* { dg-final { scan-assembler-not {\\tindex} } } */"}, {"sha": "c1b1af611a9b99519e1a0acec925d2d5471c6d2e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/single_4.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_4.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fopenmp-simd -msve-vector-bits=2048\" } */\n+\n+#define N 256\n+#include \"single_1.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.b, #1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.b, #2\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, #3\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, #4\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.s, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.s, #6\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #7\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #8\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, #15360\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0e\\+0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #3\\.0e\\+0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tptrue\\tp[0-7]\\.b, vl256\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tptrue\\tp[0-7]\\.h, vl128\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tptrue\\tp[0-7]\\.s, vl64\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tptrue\\tp[0-7]\\.d, vl32\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.b,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.h,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d,} 3 } } */\n+\n+/* { dg-final { scan-assembler-not {\\twhile} } } */\n+/* { dg-final { scan-assembler-not {\\tb} } } */\n+/* { dg-final { scan-assembler-not {\\tcmp} } } */\n+/* { dg-final { scan-assembler-not {\\tindex} } } */"}, {"sha": "328a677117824678e3ca59458337d38569b03877", "filename": "gcc/testsuite/gcc.target/aarch64/sve/spill_1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fspill_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fspill_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fspill_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+void consumer (void *);\n+\n+#define TEST_LOOP(TYPE, VAL)\t\t\t\\\n+  void\t\t\t\t\t\t\\\n+  double_loop_##TYPE (TYPE *x)\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    for (int i = 0; i < 100; ++i)\t\t\\\n+      x[i] += VAL;\t\t\t\t\\\n+    consumer (x);\t\t\t\t\\\n+    for (int i = 0; i < 100; ++i)\t\t\\\n+      x[i] += VAL;\t\t\t\t\\\n+    consumer (x);\t\t\t\t\\\n+  }\n+\n+TEST_LOOP (uint16_t, 511);\n+TEST_LOOP (uint32_t, 511);\n+TEST_LOOP (uint64_t, 511);\n+\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, #511\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.s, #511\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #511\\n} 2 } } */\n+/* { dg-final { scan-assembler-not {\\tldr\\tz[0-9]} } } */\n+/* { dg-final { scan-assembler-not {\\tstr\\tz[0-9]} } } */"}, {"sha": "4f0655f6d7c6aff2373bbfd6d3459dc95738784f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/store_scalar_offset_1.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstore_scalar_offset_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstore_scalar_offset_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstore_scalar_offset_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 -msve-vector-bits=256 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+typedef int64_t vnx2di __attribute__((vector_size(32)));\n+typedef int32_t vnx4si __attribute__((vector_size(32)));\n+typedef int16_t vnx8hi __attribute__((vector_size(32)));\n+typedef int8_t vnx16qi __attribute__((vector_size(32)));\n+\n+void sve_store_64_z_lsl (uint64_t *a, unsigned long i)\n+{\n+  asm volatile (\"\" : \"=w\" (*(vnx2di *) &a[i]));\n+}\n+\n+void sve_store_64_s_lsl (int64_t *a, signed long i)\n+{\n+  asm volatile (\"\" : \"=w\" (*(vnx2di *) &a[i]));\n+}\n+\n+void sve_store_32_z_lsl (uint32_t *a, unsigned long i)\n+{\n+  asm volatile (\"\" : \"=w\" (*(vnx4si *) &a[i]));\n+}\n+\n+void sve_store_32_s_lsl (int32_t *a, signed long i)\n+{\n+  asm volatile (\"\" : \"=w\" (*(vnx4si *) &a[i]));\n+}\n+\n+void sve_store_16_z_lsl (uint16_t *a, unsigned long i)\n+{\n+  asm volatile (\"\" : \"=w\" (*(vnx8hi *) &a[i]));\n+}\n+\n+void sve_store_16_s_lsl (int16_t *a, signed long i)\n+{\n+  asm volatile (\"\" : \"=w\" (*(vnx8hi *) &a[i]));\n+}\n+\n+/* ??? The other argument order leads to a redundant move.  */\n+void sve_store_8_z (unsigned long i, uint8_t *a)\n+{\n+  asm volatile (\"\" : \"=w\" (*(vnx16qi *) &a[i]));\n+}\n+\n+void sve_store_8_s (signed long i, int8_t *a)\n+{\n+  asm volatile (\"\" : \"=w\" (*(vnx16qi *) &a[i]));\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tst1d\\tz0\\.d, p[0-7], \\[x0, x1, lsl 3\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz0\\.s, p[0-7], \\[x0, x1, lsl 2\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz0\\.h, p[0-7], \\[x0, x1, lsl 1\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1b\\tz0\\.b, p[0-7], \\[x1, x0\\]\\n} 2 } } */"}, {"sha": "734c9e6dacd19004cb5fb0bf5e0d9a6d1b7aca96", "filename": "gcc/testsuite/gcc.target/aarch64/sve/subr_1.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsubr_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsubr_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsubr_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define DO_IMMEDIATE_OPS(VALUE, TYPE, NAME)\t\t\t\\\n+void vsubr_arithimm_##NAME##_##TYPE (TYPE *dst, int count)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    dst[i] = VALUE - dst[i];\t\t\t\t\t\\\n+}\n+\n+#define DO_ARITH_OPS(TYPE)\t\t\t\\\n+  DO_IMMEDIATE_OPS (0, TYPE, 0);\t\t\\\n+  DO_IMMEDIATE_OPS (5, TYPE, 5);\t\t\\\n+  DO_IMMEDIATE_OPS (255, TYPE, 255);\t\t\\\n+  DO_IMMEDIATE_OPS (256, TYPE, 256);\t\t\\\n+  DO_IMMEDIATE_OPS (257, TYPE, 257);\t\t\\\n+  DO_IMMEDIATE_OPS (65280, TYPE, 65280);\t\\\n+  DO_IMMEDIATE_OPS (65281, TYPE, 65281);\t\\\n+  DO_IMMEDIATE_OPS (-1, TYPE, minus1);\n+\n+DO_ARITH_OPS (int8_t)\n+DO_ARITH_OPS (int16_t)\n+DO_ARITH_OPS (int32_t)\n+DO_ARITH_OPS (int64_t)\n+\n+/* { dg-final { scan-assembler-not {\\tsub\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsubr\\tz[0-9]+\\.b, z[0-9]+\\.b, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsubr\\tz[0-9]+\\.b, z[0-9]+\\.b, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-not   {\\tsubr\\tz[0-9]+\\.b, z[0-9]+\\.b, #255\\n} } } */\n+/* { dg-final { scan-assembler-not   {\\tsubr\\tz[0-9]+\\.b, z[0-9]+\\.b, #256\\n} } } */\n+/* { dg-final { scan-assembler-not   {\\tsubr\\tz[0-9]+\\.b, z[0-9]+\\.b, #257\\n} } } */\n+/* { dg-final { scan-assembler-not   {\\tsubr\\tz[0-9]+\\.b, z[0-9]+\\.b, #65280\\n} } } */\n+/* { dg-final { scan-assembler-not   {\\tsubr\\tz[0-9]+\\.b, z[0-9]+\\.b, #65281\\n} } } */\n+/* { dg-final { scan-assembler-not   {\\tsubr\\tz[0-9]+\\.b, z[0-9]+\\.b, #-1\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsubr\\tz[0-9]+\\.h, z[0-9]+\\.h, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsubr\\tz[0-9]+\\.h, z[0-9]+\\.h, #255\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsubr\\tz[0-9]+\\.h, z[0-9]+\\.h, #256\\n} 1 } } */\n+/* { dg-final { scan-assembler-not   {\\tsubr\\tz[0-9]+\\.h, z[0-9]+\\.h, #257\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tsubr\\tz[0-9]+\\.h, z[0-9]+\\.h, #65280\\n} 1 } } */\n+/* { dg-final { scan-assembler-not   {\\tsubr\\tz[0-9]+\\.h, z[0-9]+\\.h, #65281\\n} } } */\n+/* { dg-final { scan-assembler-not   {\\tsubr\\tz[0-9]+\\.h, z[0-9]+\\.h, #-1\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsubr\\tz[0-9]+\\.s, z[0-9]+\\.s, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsubr\\tz[0-9]+\\.s, z[0-9]+\\.s, #255\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsubr\\tz[0-9]+\\.s, z[0-9]+\\.s, #256\\n} 1 } } */\n+/* { dg-final { scan-assembler-not   {\\tsubr\\tz[0-9]+\\.s, z[0-9]+\\.s, #257\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tsubr\\tz[0-9]+\\.s, z[0-9]+\\.s, #65280\\n} 1 } } */\n+/* { dg-final { scan-assembler-not   {\\tsubr\\tz[0-9]+\\.s, z[0-9]+\\.s, #65281\\n} } } */\n+/* { dg-final { scan-assembler-not   {\\tsubr\\tz[0-9]+\\.s, z[0-9]+\\.s, #-1\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsubr\\tz[0-9]+\\.d, z[0-9]+\\.d, #5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsubr\\tz[0-9]+\\.d, z[0-9]+\\.d, #255\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsubr\\tz[0-9]+\\.d, z[0-9]+\\.d, #256\\n} 1 } } */\n+/* { dg-final { scan-assembler-not   {\\tsubr\\tz[0-9]+\\.d, z[0-9]+\\.d, #257\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tsubr\\tz[0-9]+\\.d, z[0-9]+\\.d, #65280\\n} 1 } } */\n+/* { dg-final { scan-assembler-not   {\\tsubr\\tz[0-9]+\\.d, z[0-9]+\\.d, #65281\\n} } } */\n+/* { dg-final { scan-assembler-not   {\\tsubr\\tz[0-9]+\\.d, z[0-9]+\\.d, #-1\\n} } } */"}, {"sha": "f1246adb52c2daa83f670fd07453114011c27834", "filename": "gcc/testsuite/gcc.target/aarch64/sve/trn1_1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ftrn1_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ftrn1_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ftrn1_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -msve-vector-bits=256\" } */\n+\n+#ifndef BIAS\n+#define BIAS 0\n+#endif\n+\n+#include <stdint.h>\n+\n+typedef int64_t vnx2di __attribute__((vector_size (32)));\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+typedef int16_t vnx8hi __attribute__((vector_size (32)));\n+typedef int8_t vnx16qi __attribute__((vector_size (32)));\n+typedef double vnx2df __attribute__((vector_size (32)));\n+typedef float vnx4sf __attribute__((vector_size (32)));\n+typedef _Float16 vnx8hf __attribute__((vector_size (32)));\n+\n+#define MASK_2(X, Y) X, Y + X\n+#define MASK_4(X, Y) MASK_2 (X, Y), MASK_2 (X + 2, Y)\n+#define MASK_8(X, Y) MASK_4 (X, Y), MASK_4 (X + 4, Y)\n+#define MASK_16(X, Y) MASK_8 (X, Y), MASK_8 (X + 8, Y)\n+#define MASK_32(X, Y) MASK_16 (X, Y), MASK_16 (X + 16, Y)\n+\n+#define INDEX_4 vnx2di\n+#define INDEX_8 vnx4si\n+#define INDEX_16 vnx8hi\n+#define INDEX_32 vnx16qi\n+\n+#define PERMUTE(TYPE, NUNITS)\t\t\t\t\t\\\n+  TYPE permute_##TYPE (TYPE values1, TYPE values2)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return __builtin_shuffle\t\t\t\t\t\\\n+      (values1, values2,\t\t\t\t\t\\\n+       ((INDEX_##NUNITS) { MASK_##NUNITS (BIAS, NUNITS) }));\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  T (vnx2di, 4)\t\t\t\t\t\\\n+  T (vnx4si, 8)\t\t\t\t\t\\\n+  T (vnx8hi, 16)\t\t\t\t\\\n+  T (vnx16qi, 32)\t\t\t\t\\\n+  T (vnx2df, 4)\t\t\t\t\t\\\n+  T (vnx4sf, 8)\t\t\t\t\t\\\n+  T (vnx8hf, 16)\n+\n+TEST_ALL (PERMUTE)\n+\n+/* { dg-final { scan-assembler-not {\\ttbl\\t} } } */\n+\n+/* { dg-final { scan-assembler-times {\\ttrn1\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d} 2 } } */\n+/* { dg-final { scan-assembler-times {\\ttrn1\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s} 2 } } */\n+/* { dg-final { scan-assembler-times {\\ttrn1\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h} 2 } } */\n+/* { dg-final { scan-assembler-times {\\ttrn1\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b} 1 } } */"}, {"sha": "97e48a804557725a030a2d983965273ffc47ab12", "filename": "gcc/testsuite/gcc.target/aarch64/sve/trn2_1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ftrn2_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ftrn2_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ftrn2_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -msve-vector-bits=256\" } */\n+\n+#define BIAS 1\n+#include \"trn1_1.c\"\n+\n+/* { dg-final { scan-assembler-not {\\ttbl\\t} } } */\n+\n+/* { dg-final { scan-assembler-times {\\ttrn2\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d} 2 } } */\n+/* { dg-final { scan-assembler-times {\\ttrn2\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s} 2 } } */\n+/* { dg-final { scan-assembler-times {\\ttrn2\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h} 2 } } */\n+/* { dg-final { scan-assembler-times {\\ttrn2\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b} 1 } } */"}, {"sha": "83ffe8552c2091317191fbf550226fd09548bea6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/unpack_fcvt_signed_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_fcvt_signed_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_fcvt_signed_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_fcvt_signed_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-inline\" } */\n+\n+#include <stdint.h>\n+\n+void __attribute__ ((noinline, noclone))\n+unpack_double_int_plus8 (double *d, int32_t *s, int size)\n+{\n+  for (int i = 0; i < size; i++)\n+    d[i] = s[i] + 8;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tuunpklo\\tz[0-9]+\\.d, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuunpkhi\\tz[0-9]+\\.d, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tscvtf\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.s\\n} 2 } } */"}, {"sha": "e2a09372fe879843ae344b210b43a7def35fd155", "filename": "gcc/testsuite/gcc.target/aarch64/sve/unpack_fcvt_signed_1_run.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_fcvt_signed_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_fcvt_signed_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_fcvt_signed_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"unpack_fcvt_signed_1.c\"\n+\n+#define ARRAY_SIZE 89\n+\n+#define VAL1 ((i * 88654) - (33 * 88654))\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  double array_dest[ARRAY_SIZE];\n+  int32_t array_source[ARRAY_SIZE];\n+\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    {\n+      array_source[i] = VAL1;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+\n+  unpack_double_int_plus8 (array_dest, array_source, ARRAY_SIZE);\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    if (array_dest[i] != (double) (VAL1 + 8))\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "e2f6b1a45ce239ea700b9d50de59cd5f3ac7553d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/unpack_fcvt_unsigned_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_fcvt_unsigned_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_fcvt_unsigned_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_fcvt_unsigned_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+void __attribute__ ((noinline, noclone))\n+unpack_double_int_plus9 (double *d, uint32_t *s, int size)\n+{\n+  for (int i = 0; i < size; i++)\n+    d[i] = (double) (s[i] + 9);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tuunpklo\\tz[0-9]+\\.d, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuunpkhi\\tz[0-9]+\\.d, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tucvtf\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.s\\n} 2 } } */"}, {"sha": "829a851e088165a9cf2be7db881e30cee60798f1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/unpack_fcvt_unsigned_1_run.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_fcvt_unsigned_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_fcvt_unsigned_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_fcvt_unsigned_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"unpack_fcvt_unsigned_1.c\"\n+\n+#define ARRAY_SIZE 153\n+\n+#define VAL1 ((unsigned int) ((i * 345435) - (21 * 345435)))\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  double array_dest[ARRAY_SIZE];\n+  uint32_t array_source[ARRAY_SIZE];\n+\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    {\n+      array_source[i] = VAL1;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+\n+  unpack_double_int_plus9 (array_dest, array_source, ARRAY_SIZE);\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    if (array_dest[i] != (double) (VAL1 + 9))\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "14a636b5fda120243efc4f6a257aba0864c619c9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/unpack_float_1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_float_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_float_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_float_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+void __attribute__ ((noinline, noclone))\n+unpack_float_plus_7point9 (double *d, float *s, int size)\n+{\n+  for (int i = 0; i < size; i++)\n+    d[i] = s[i] + 7.9;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tuunpklo\\tz[0-9]+\\.d, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuunpkhi\\tz[0-9]+\\.d, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfcvt\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.s\\n} 2 } } */"}, {"sha": "5f363a8ae8db84661861916905b5d9951c0bc5e0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/unpack_float_1_run.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_float_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_float_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_float_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-inline\" } */\n+\n+#include \"unpack_float_1.c\"\n+\n+#define ARRAY_SIZE 199\n+\n+#define VAL1 ((float) ((i * 645.56665) - (645.56665)))\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  double array_dest[ARRAY_SIZE];\n+  float array_source[ARRAY_SIZE];\n+\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    {\n+      array_source[i] = VAL1;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+\n+  unpack_float_plus_7point9 (array_dest, array_source, ARRAY_SIZE);\n+  for (int i = 0; i < ARRAY_SIZE; i++)\n+    if (array_dest[i] != (double) (VAL1 + 7.9))\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "d4da3690f488978efed3cd1f040c473d70a70a62", "filename": "gcc/testsuite/gcc.target/aarch64/sve/unpack_signed_1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_signed_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_signed_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_signed_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-inline\" } */\n+\n+#include <stdint.h>\n+\n+#define UNPACK(TYPED, TYPES)\t\t\t\t\t\t\\\n+void __attribute__ ((noinline, noclone))\t\t\t\t\\\n+unpack_##TYPED##_##TYPES (TYPED *d, TYPES *s, TYPES mask, int size)\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < size; i++)\t\t\t\t\t\\\n+    d[i] = (TYPES) (s[i] | mask);\t\t\t\t\t\\\n+}\n+\n+#define TEST_ALL(T)\t\t\t\\\n+  T (int64_t, int32_t)\t\t\t\\\n+  T (int32_t, int16_t)\t\t\t\\\n+  T (int16_t, int8_t)\t\t\t\\\n+  T (uint64_t, int32_t)\t\t\t\\\n+  T (uint32_t, int16_t)\t\t\t\\\n+  T (uint16_t, int8_t)\n+\n+TEST_ALL (UNPACK)\n+\n+/* { dg-final { scan-assembler-times {\\tsunpkhi\\tz[0-9]+\\.d, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsunpkhi\\tz[0-9]+\\.s, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsunpkhi\\tz[0-9]+\\.h, z[0-9]+\\.b\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsunpklo\\tz[0-9]+\\.d, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsunpklo\\tz[0-9]+\\.s, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsunpklo\\tz[0-9]+\\.h, z[0-9]+\\.b\\n} 2 } } */"}, {"sha": "956340f1eb19503fed2ebb7f31a47ecd8edc2fff", "filename": "gcc/testsuite/gcc.target/aarch64/sve/unpack_signed_1_run.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_signed_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_signed_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_signed_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-inline\" } */\n+\n+#include \"unpack_signed_1.c\"\n+\n+#define ARRAY_SIZE 33\n+\n+#define TEST_LOOP(TYPED, TYPES)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPED arrayd[ARRAY_SIZE];\t\t\t\t\t\\\n+    TYPES arrays[ARRAY_SIZE];\t\t\t\t\t\\\n+    for (int i = 0; i < ARRAY_SIZE; i++)\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tarrays[i] = (i - 10) * 3;\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    unpack_##TYPED##_##TYPES (arrayd, arrays, 7, ARRAY_SIZE);\t\\\n+    for (int i = 0; i < ARRAY_SIZE; i++)\t\t\t\\\n+      if (arrayd[i] != (TYPED) (TYPES) (((i - 10) * 3) | 7))\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "6d77ced3c304c8612323252e4e0e804c2fc6d567", "filename": "gcc/testsuite/gcc.target/aarch64/sve/unpack_unsigned_1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_unsigned_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_unsigned_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_unsigned_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-inline\" } */\n+\n+#include <stdint.h>\n+\n+#define UNPACK(TYPED, TYPES)\t\t\t\t\\\n+void __attribute__ ((noinline, noclone))\t\t\\\n+unpack_##TYPED##_##TYPES (TYPED *d, TYPES *s, int size)\t\\\n+{\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < size; i++)\t\t\t\\\n+    d[i] = (TYPES) (s[i] + 1);\t\t\t\t\\\n+}\n+\n+#define TEST_ALL(T)\t\t\t\\\n+  T (int64_t, uint32_t)\t\t\t\\\n+  T (int32_t, uint16_t)\t\t\t\\\n+  T (int16_t, uint8_t)\t\t\t\\\n+  T (uint64_t, uint32_t)\t\t\\\n+  T (uint32_t, uint16_t)\t\t\\\n+  T (uint16_t, uint8_t)\n+\n+TEST_ALL (UNPACK)\n+\n+/* { dg-final { scan-assembler-times {\\tuunpkhi\\tz[0-9]+\\.d, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuunpkhi\\tz[0-9]+\\.s, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuunpkhi\\tz[0-9]+\\.h, z[0-9]+\\.b\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tuunpklo\\tz[0-9]+\\.d, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuunpklo\\tz[0-9]+\\.s, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuunpklo\\tz[0-9]+\\.h, z[0-9]+\\.b\\n} 2 } } */"}, {"sha": "3cc37789d320a4fab74613f35bf290d9c068418a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/unpack_unsigned_1_run.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_unsigned_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_unsigned_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funpack_unsigned_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-inline\" } */\n+\n+#include \"unpack_unsigned_1.c\"\n+\n+#define ARRAY_SIZE 85\n+\n+#define TEST_LOOP(TYPED, TYPES)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPED arrayd[ARRAY_SIZE];\t\t\t\t\t\\\n+    TYPES arrays[ARRAY_SIZE];\t\t\t\t\t\\\n+    for (int i = 0; i < ARRAY_SIZE; i++)\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tarrays[i] = (i - 10) * 3;\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    unpack_##TYPED##_##TYPES (arrayd, arrays, ARRAY_SIZE);\t\\\n+    for (int i = 0; i < ARRAY_SIZE; i++)\t\t\t\\\n+      if (arrayd[i] != (TYPED) (TYPES) (((i - 10) * 3) + 1))\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "789fb0c28e0149a516c8da49efdd5d1f4bbf31ad", "filename": "gcc/testsuite/gcc.target/aarch64/sve/uzp1_1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fuzp1_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fuzp1_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fuzp1_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -msve-vector-bits=256\" } */\n+\n+#include <stdint.h>\n+\n+typedef int64_t vnx2di __attribute__((vector_size (32)));\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+typedef int16_t vnx8hi __attribute__((vector_size (32)));\n+typedef int8_t vnx16qi __attribute__((vector_size (32)));\n+typedef double vnx2df __attribute__((vector_size (32)));\n+typedef float vnx4sf __attribute__((vector_size (32)));\n+typedef _Float16 vnx8hf __attribute__((vector_size (32)));\n+\n+#define UZP1(TYPE, MASK)\t\t\t\t\\\n+TYPE uzp1_##TYPE (TYPE values1, TYPE values2)\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  return __builtin_shuffle (values1, values2, MASK);\t\\\n+}\n+\n+\n+UZP1 (vnx2di,  ((vnx2di) { 0, 2, 4, 6 }));\n+UZP1 (vnx4si,  ((vnx4si) { 0, 2, 4, 6, 8, 10, 12, 14 }));\n+UZP1 (vnx8hi,  ((vnx8hi) { 0, 2, 4, 6, 8, 10, 12, 14,\n+\t\t\t   16, 18, 20, 22, 24, 26, 28, 30 }));\n+UZP1 (vnx16qi, ((vnx16qi) { 0, 2, 4, 6, 8, 10, 12, 14,\n+\t\t\t    16, 18, 20, 22, 24, 26, 28, 30,\n+\t\t\t    32, 34, 36, 38, 40, 42, 44, 46,\n+\t\t\t    48, 50, 52, 54, 56, 58, 60, 62 }));\n+UZP1 (vnx2df,  ((vnx2di) { 0, 2, 4, 6 }));\n+UZP1 (vnx4sf,  ((vnx4si) { 0, 2, 4, 6, 8, 10, 12, 14 }));\n+UZP1 (vnx8hf,  ((vnx8hi) { 0, 2, 4, 6, 8, 10, 12, 14,\n+\t\t\t   16, 18, 20, 22, 24, 26, 28, 30 }));\n+\n+/* { dg-final { scan-assembler-not {\\ttbl\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} } } */\n+/* { dg-final { scan-assembler-not {\\ttbl\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} } } */\n+/* { dg-final { scan-assembler-not {\\ttbl\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler-not {\\ttbl\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tuzp1\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuzp1\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuzp1\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuzp1\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */"}, {"sha": "b0abd88e2b54891d74bfe8591e99002b9ce367b6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/uzp1_1_run.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fuzp1_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fuzp1_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fuzp1_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O\" } */\n+\n+#include \"uzp1_1.c\"\n+\n+#define TEST_UZP1(TYPE, EXPECTED_RESULT, VALUES1, VALUES2)\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  TYPE expected_result = EXPECTED_RESULT;\t\t\t\t\\\n+  TYPE values1 = VALUES1;\t\t\t\t\t\t\\\n+  TYPE values2 = VALUES2;\t\t\t\t\t\t\\\n+  TYPE dest;\t\t\t\t\t\t\t\t\\\n+  dest = uzp1_##TYPE (values1, values2);\t\t\t\t\\\n+  if (__builtin_memcmp (&dest, &expected_result, sizeof (TYPE)) != 0)\t\\\n+    __builtin_abort ();\t\t\t\t\t\t\t\\\n+}\n+\n+int main (void)\n+{\n+  TEST_UZP1 (vnx2di,\n+\t     ((vnx2di) { 4, 6, 12, 36 }),\n+\t     ((vnx2di) { 4, 5, 6, 7 }),\n+\t     ((vnx2di) { 12, 24, 36, 48 }));\n+  TEST_UZP1 (vnx4si,\n+\t     ((vnx4si) { 3, 5, 7, 9, 33, 35, 37, 39 }),\n+\t     ((vnx4si) { 3, 4, 5, 6, 7, 8, 9, 10 }),\n+\t     ((vnx4si) { 33, 34, 35, 36, 37, 38, 39, 40 }));\n+  TEST_UZP1 (vnx8hi,\n+\t     ((vnx8hi) { 3, 5, 7, 9, 11, 13, 15, 17,\n+\t\t\t 33, 35, 37, 39, 41, 43, 45, 47 }),\n+\t     ((vnx8hi) { 3, 4, 5, 6, 7, 8, 9, 10,\n+\t\t\t 11, 12, 13, 14, 15, 16, 17, 18 }),\n+\t     ((vnx8hi) { 33, 34, 35, 36, 37, 38, 39, 40,\n+\t\t\t 41, 42, 43, 44, 45, 46, 47, 48 }));\n+  TEST_UZP1 (vnx16qi,\n+\t     ((vnx16qi) { 4, 6, 4, 6, 4, 6, 4, 6,\n+\t\t\t  4, 6, 4, 6, 4, 6, 4, 6,\n+\t\t\t  12, 36, 12, 36, 12, 36, 12, 36,\n+\t\t\t  12, 36, 12, 36, 12, 36, 12, 36 }),\n+\t     ((vnx16qi) { 4, 5, 6, 7, 4, 5, 6, 7,\n+\t\t\t  4, 5, 6, 7, 4, 5, 6, 7,\n+\t\t\t  4, 5, 6, 7, 4, 5, 6, 7,\n+\t\t\t  4, 5, 6, 7, 4, 5, 6, 7 }),\n+\t     ((vnx16qi) { 12, 24, 36, 48, 12, 24, 36, 48,\n+\t\t\t  12, 24, 36, 48, 12, 24, 36, 48,\n+\t\t\t  12, 24, 36, 48, 12, 24, 36, 48,\n+\t\t\t  12, 24, 36, 48, 12, 24, 36, 48 }));\n+  TEST_UZP1 (vnx2df,\n+\t     ((vnx2df) { 4.0, 6.0, 12.0, 36.0 }),\n+\t     ((vnx2df) { 4.0, 5.0, 6.0, 7.0 }),\n+\t     ((vnx2df) { 12.0, 24.0, 36.0, 48.0 }));\n+  TEST_UZP1 (vnx4sf,\n+\t     ((vnx4sf) { 3.0, 5.0, 7.0, 9.0, 33.0, 35.0, 37.0, 39.0 }),\n+\t     ((vnx4sf) { 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0 }),\n+\t     ((vnx4sf) { 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0 }));\n+  TEST_UZP1 (vnx8hf,\n+\t     ((vnx8hf) { 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0,\n+\t\t\t 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0 }),\n+\t     ((vnx8hf) { 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,\n+\t\t\t 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0 }),\n+\t     ((vnx8hf) { 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0,\n+\t\t\t 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0 }));\n+  return 0;\n+}"}, {"sha": "def490daa12e7eb5a1ecf8cc05b787d8c6b83c1e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/uzp2_1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fuzp2_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fuzp2_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fuzp2_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -msve-vector-bits=256\" } */\n+\n+#include <stdint.h>\n+\n+typedef int64_t vnx2di __attribute__((vector_size (32)));\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+typedef int16_t vnx8hi __attribute__((vector_size (32)));\n+typedef int8_t vnx16qi __attribute__((vector_size (32)));\n+typedef double vnx2df __attribute__((vector_size (32)));\n+typedef float vnx4sf __attribute__((vector_size (32)));\n+typedef _Float16 vnx8hf __attribute__((vector_size (32)));\n+\n+#define UZP2(TYPE, MASK)\t\t\t\t\\\n+TYPE uzp2_##TYPE (TYPE values1, TYPE values2)\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  return __builtin_shuffle (values1, values2, MASK);\t\\\n+}\n+\n+UZP2 (vnx2di,  ((vnx2di) { 1, 3, 5, 7 }));\n+UZP2 (vnx4si,  ((vnx4si) { 1, 3, 5, 7, 9, 11, 13, 15 }));\n+UZP2 (vnx8hi,  ((vnx8hi) { 1, 3, 5, 7, 9, 11, 13, 15,\n+\t\t\t   17, 19, 21, 23, 25, 27, 29, 31 }));\n+UZP2 (vnx16qi, ((vnx16qi) { 1, 3, 5, 7, 9, 11, 13, 15,\n+\t\t\t    17, 19, 21, 23, 25, 27, 29, 31,\n+\t\t\t    33, 35, 37, 39, 41, 43, 45, 47,\n+\t\t\t    49, 51, 53, 55, 57, 59, 61, 63 }));\n+UZP2 (vnx2df,  ((vnx2di) { 1, 3, 5, 7 }));\n+UZP2 (vnx4sf,  ((vnx4si) { 1, 3, 5, 7, 9, 11, 13, 15 }));\n+UZP2 (vnx8hf,  ((vnx8hi) { 1, 3, 5, 7, 9, 11, 13, 15,\n+\t\t\t   17, 19, 21, 23, 25, 27, 29, 31 }));\n+\n+/* { dg-final { scan-assembler-not {\\ttbl\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} } } */\n+/* { dg-final { scan-assembler-not {\\ttbl\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} } } */\n+/* { dg-final { scan-assembler-not {\\ttbl\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler-not {\\ttbl\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tuzp2\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuzp2\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuzp2\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuzp2\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */"}, {"sha": "2a6f8ba9c85b7c5936d67e4c6c124320e97f887c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/uzp2_1_run.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fuzp2_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fuzp2_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fuzp2_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O\" } */\n+\n+#include \"uzp2_1.c\"\n+\n+#define TEST_UZP2(TYPE, EXPECTED_RESULT, VALUES1, VALUES2)\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  TYPE expected_result = EXPECTED_RESULT;\t\t\t\t\\\n+  TYPE values1 = VALUES1;\t\t\t\t\t\t\\\n+  TYPE values2 = VALUES2;\t\t\t\t\t\t\\\n+  TYPE dest;\t\t\t\t\t\t\t\t\\\n+  dest = uzp2_##TYPE (values1, values2);\t\t\t\t\\\n+  if (__builtin_memcmp (&dest, &expected_result, sizeof (TYPE)) != 0)\t\\\n+    __builtin_abort ();\t\t\t\t\t\t\t\\\n+}\n+\n+int main (void)\n+{\n+  TEST_UZP2 (vnx2di,\n+\t     ((vnx2di) { 5, 7, 24, 48 }),\n+\t     ((vnx2di) { 4, 5, 6, 7 }),\n+\t     ((vnx2di) { 12, 24, 36, 48 }));\n+  TEST_UZP2 (vnx4si,\n+\t     ((vnx4si) { 4, 6, 8, 10, 34, 36, 38, 40 }),\n+\t     ((vnx4si) { 3, 4, 5, 6, 7, 8, 9, 10 }),\n+\t     ((vnx4si) { 33, 34, 35, 36, 37, 38, 39, 40 }));\n+  TEST_UZP2 (vnx8hi,\n+\t     ((vnx8hi) { 4, 6, 8, 10, 12, 14, 16, 18,\n+\t\t\t 34, 36, 38, 40, 42, 44, 46, 48 }),\n+\t     ((vnx8hi) { 3, 4, 5, 6, 7, 8, 9, 10,\n+\t\t\t 11, 12, 13, 14, 15, 16, 17, 18 }),\n+\t     ((vnx8hi) { 33, 34, 35, 36, 37, 38, 39, 40,\n+\t\t\t 41, 42, 43, 44, 45, 46, 47, 48 }));\n+  TEST_UZP2 (vnx16qi,\n+\t     ((vnx16qi) { 5, 7, 5, 7, 5, 7, 5, 7,\n+\t\t\t  5, 7, 5, 7, 5, 7, 5, 7,\n+\t\t\t  24, 48, 24, 48, 24, 48, 24, 48,\n+\t\t\t  24, 48, 24, 48, 24, 48, 24, 48 }),\n+\t     ((vnx16qi) { 4, 5, 6, 7, 4, 5, 6, 7,\n+\t\t\t  4, 5, 6, 7, 4, 5, 6, 7,\n+\t\t\t  4, 5, 6, 7, 4, 5, 6, 7,\n+\t\t\t  4, 5, 6, 7, 4, 5, 6, 7 }),\n+\t     ((vnx16qi) { 12, 24, 36, 48, 12, 24, 36, 48,\n+\t\t\t  12, 24, 36, 48, 12, 24, 36, 48,\n+\t\t\t  12, 24, 36, 48, 12, 24, 36, 48,\n+\t\t\t  12, 24, 36, 48, 12, 24, 36, 48 }));\n+  TEST_UZP2 (vnx2df,\n+\t     ((vnx2df) { 5.0, 7.0, 24.0, 48.0 }),\n+\t     ((vnx2df) { 4.0, 5.0, 6.0, 7.0 }),\n+\t     ((vnx2df) { 12.0, 24.0, 36.0, 48.0 }));\n+  TEST_UZP2 (vnx4sf,\n+\t     ((vnx4sf) { 4.0, 6.0, 8.0, 10.0, 34.0, 36.0, 38.0, 40.0 }),\n+\t     ((vnx4sf) { 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0 }),\n+\t     ((vnx4sf) { 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0 }));\n+  TEST_UZP2 (vnx8hf,\n+\t     ((vnx8hf) { 4.0, 6.0, 8.0, 10.0, 12.0, 14.0, 16.0, 18.0,\n+\t\t\t 34.0, 36.0, 38.0, 40.0, 42.0, 44.0, 46.0, 48.0 }),\n+\t     ((vnx8hf) { 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,\n+\t\t\t 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0 }),\n+\t     ((vnx8hf) { 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0,\n+\t\t\t 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0 }));\n+  return 0;\n+}"}, {"sha": "6fd6b420eeff9c8f60f1b0f30704d51f565b99b9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_1.C", "status": "added", "additions": 245, "deletions": 0, "changes": 245, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_1.C?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,245 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=256 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+typedef int8_t vnx16qi __attribute__((vector_size(32)));\n+typedef int16_t vnx8hi __attribute__((vector_size(32)));\n+typedef int32_t vnx4si __attribute__((vector_size(32)));\n+typedef int64_t vnx2di __attribute__((vector_size(32)));\n+\n+typedef uint8_t v32qu __attribute__((vector_size(32)));\n+typedef uint16_t v16hu __attribute__((vector_size(32)));\n+typedef uint32_t v8su __attribute__((vector_size(32)));\n+typedef uint64_t v4du __attribute__((vector_size(32)));\n+\n+#define DEF_VCOND_VAR(TYPE, COND, SUFFIX)\t\t\t\\\n+TYPE vcond_##TYPE##_##SUFFIX (TYPE x, TYPE y, TYPE a, TYPE b)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  TYPE r;\t\t\t\t\t\t\t\\\n+  r = a COND b ? x : y;\t\t\t\t\t\t\\\n+  return r;\t\t\t\t\t\t\t\\\n+}\n+\n+#define DEF_VCOND_IMM(TYPE, COND, IMM, SUFFIX)\t\t\t\\\n+TYPE vcond_imm_##TYPE##_##SUFFIX (TYPE x, TYPE y, TYPE a)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  TYPE r;\t\t\t\t\t\t\t\\\n+  r = a COND IMM ? x : y;\t\t\t\t\t\\\n+  return r;\t\t\t\t\t\t\t\\\n+}\n+\n+#define TEST_COND_VAR_SIGNED_ALL(T, COND, SUFFIX)\t\\\n+  T (vnx16qi, COND, SUFFIX)\t\t\t\t\\\n+  T (vnx8hi, COND, SUFFIX)\t\t\t\t\\\n+  T (vnx4si, COND, SUFFIX)\t\t\t\t\\\n+  T (vnx2di, COND, SUFFIX)\n+\n+#define TEST_COND_VAR_UNSIGNED_ALL(T, COND, SUFFIX)\t\\\n+  T (v32qu, COND, SUFFIX)\t\t\t\t\\\n+  T (v16hu, COND, SUFFIX)\t\t\t\t\\\n+  T (v8su, COND, SUFFIX)\t\t\t\t\\\n+  T (v4du, COND, SUFFIX)\n+\n+#define TEST_COND_VAR_ALL(T, COND, SUFFIX)\t\t\\\n+  TEST_COND_VAR_SIGNED_ALL (T, COND, SUFFIX)\t\t\\\n+  TEST_COND_VAR_UNSIGNED_ALL (T, COND, SUFFIX)\n+\n+#define TEST_VAR_ALL(T)\t\t\t\t\\\n+  TEST_COND_VAR_ALL (T, >, gt)\t\t\t\\\n+  TEST_COND_VAR_ALL (T, <, lt)\t\t\t\\\n+  TEST_COND_VAR_ALL (T, >=, ge)\t\t\t\\\n+  TEST_COND_VAR_ALL (T, <=, le)\t\t\t\\\n+  TEST_COND_VAR_ALL (T, ==, eq)\t\t\t\\\n+  TEST_COND_VAR_ALL (T, !=, ne)\n+\n+#define TEST_COND_IMM_SIGNED_ALL(T, COND, IMM, SUFFIX)\t\\\n+  T (vnx16qi, COND, IMM, SUFFIX)\t\t\t\t\\\n+  T (vnx8hi, COND, IMM, SUFFIX)\t\t\t\t\\\n+  T (vnx4si, COND, IMM, SUFFIX)\t\t\t\t\\\n+  T (vnx2di, COND, IMM, SUFFIX)\n+\n+#define TEST_COND_IMM_UNSIGNED_ALL(T, COND, IMM, SUFFIX)\t\\\n+  T (v32qu, COND, IMM, SUFFIX)\t\t\t\t\t\\\n+  T (v16hu, COND, IMM, SUFFIX)\t\t\t\t\t\\\n+  T (v8su, COND, IMM, SUFFIX)\t\t\t\t\t\\\n+  T (v4du, COND, IMM, SUFFIX)\n+\n+#define TEST_COND_IMM_ALL(T, COND, IMM, SUFFIX)\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, COND, IMM, SUFFIX)\t\\\n+  TEST_COND_IMM_UNSIGNED_ALL (T, COND, IMM, SUFFIX)\n+\n+#define TEST_IMM_ALL(T)\t\t\t\t\t\t\t\\\n+  /* Expect immediates to make it into the encoding.  */\t\t\\\n+  TEST_COND_IMM_ALL (T, >, 5, gt)\t\t\t\t\t\\\n+  TEST_COND_IMM_ALL (T, <, 5, lt)\t\t\t\t\t\\\n+  TEST_COND_IMM_ALL (T, >=, 5, ge)\t\t\t\t\t\\\n+  TEST_COND_IMM_ALL (T, <=, 5, le)\t\t\t\t\t\\\n+  TEST_COND_IMM_ALL (T, ==, 5, eq)\t\t\t\t\t\\\n+  TEST_COND_IMM_ALL (T, !=, 5, ne)\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, >, 15, gt2)\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, <, 15, lt2)\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, >=, 15, ge2)\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, <=, 15, le2)\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, ==, 15, eq2)\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, !=, 15, ne2)\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, >, -16, gt3)\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, <, -16, lt3)\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, >=, -16, ge3)\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, <=, -16, le3)\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, ==, -16, eq3)\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, !=, -16, ne3)\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  TEST_COND_IMM_UNSIGNED_ALL (T, >, 0, gt4)\t\t\t\t\\\n+  /* Testing if an unsigned value >= 0 or < 0 is pointless as it will\t\\\n+     get folded away by the compiler.  */\t\t\t\t\\\n+  TEST_COND_IMM_UNSIGNED_ALL (T, <=, 0, le4)\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  TEST_COND_IMM_UNSIGNED_ALL (T, >, 31, gt5)\t\t\t\t\\\n+  TEST_COND_IMM_UNSIGNED_ALL (T, <, 31, lt5)\t\t\t\t\\\n+  TEST_COND_IMM_UNSIGNED_ALL (T, >=, 31, ge5)\t\t\t\t\\\n+  TEST_COND_IMM_UNSIGNED_ALL (T, <=, 31, le5)\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* Expect immediates to NOT make it into the encoding, and instead be\t\\\n+     forced into a register.  */\t\t\t\t\t\\\n+  TEST_COND_IMM_ALL (T, >, 32, gt6)\t\t\t\t\t\\\n+  TEST_COND_IMM_ALL (T, <, 32, lt6)\t\t\t\t\t\\\n+  TEST_COND_IMM_ALL (T, >=, 32, ge6)\t\t\t\t\t\\\n+  TEST_COND_IMM_ALL (T, <=, 32, le6)\t\t\t\t\t\\\n+  TEST_COND_IMM_ALL (T, ==, 32, eq6)\t\t\t\t\t\\\n+  TEST_COND_IMM_ALL (T, !=, 32, ne6)\n+\n+TEST_VAR_ALL (DEF_VCOND_VAR)\n+TEST_IMM_ALL (DEF_VCOND_IMM)\n+\n+/* { dg-final { scan-assembler {\\tsel\\tz[0-9]+\\.b, p[0-7], z[0-9]+\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tsel\\tz[0-9]+\\.s, p[0-7], z[0-9]+\\.s, z[0-9]+\\.s\\n} } } */\n+/* { dg-final { scan-assembler {\\tsel\\tz[0-9]+\\.d, p[0-7], z[0-9]+\\.d, z[0-9]+\\.d\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tcmpgt\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpgt\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpgt\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpgt\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tcmphi\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmphi\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmphi\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmphi\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tcmphs\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmphs\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmphs\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmphs\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tcmpge\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpge\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpge\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpge\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tcmpeq\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpeq\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpeq\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpeq\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tcmpne\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpne\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpne\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpne\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} } } */\n+\n+\n+\n+/* { dg-final { scan-assembler {\\tcmpgt\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #15\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpgt\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #15\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpgt\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #15\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpgt\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #15\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tcmplt\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #15\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmplt\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #15\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmplt\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #15\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmplt\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #15\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tcmpge\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #15\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpge\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #15\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpge\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #15\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpge\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #15\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tcmple\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #15\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmple\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #15\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmple\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #15\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmple\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #15\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tcmpeq\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #15\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpeq\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #15\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpeq\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #15\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpeq\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #15\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tcmpne\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #15\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpne\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #15\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpne\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #15\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpne\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #15\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tcmpgt\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #-16\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpgt\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #-16\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpgt\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #-16\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpgt\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #-16\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tcmplt\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #-16\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmplt\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #-16\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmplt\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #-16\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmplt\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #-16\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tcmpge\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #-16\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpge\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #-16\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpge\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #-16\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpge\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #-16\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tcmple\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #-16\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmple\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #-16\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmple\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #-16\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmple\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #-16\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tcmpeq\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #-16\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpeq\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #-16\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpeq\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #-16\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpeq\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #-16\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tcmpne\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #-16\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpne\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #-16\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpne\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #-16\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpne\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #-16\\n} } } */\n+\n+\n+\n+/* { dg-final { scan-assembler {\\tcmphi\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #0\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmphi\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #0\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmphi\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmphi\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tcmpls\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #0\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpls\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #0\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpls\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpls\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\n} } } */\n+\n+\n+/* { dg-final { scan-assembler {\\tcmphi\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #31\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmphi\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #31\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmphi\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #31\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmphi\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #31\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tcmplo\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #31\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmplo\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #31\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmplo\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #31\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmplo\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #31\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tcmphs\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #31\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmphs\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #31\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmphs\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #31\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmphs\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #31\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tcmpls\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #31\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpls\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #31\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpls\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #31\\n} } } */\n+/* { dg-final { scan-assembler {\\tcmpls\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #31\\n} } } */"}, {"sha": "2df33710d8fa89e7f0810dd8bf23551921c9d9b7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_1_run.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_1_run.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_1_run.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_1_run.C?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O\" } */\n+/* { dg-options \"-O -msve-vector-bits=256\" { target aarch64_sve256_hw } } */\n+\n+#include \"vcond_1.C\"\n+\n+#define NUM_ELEMS(X) (sizeof (X) / sizeof (X[0]))\n+\n+#define TEST_VCOND_VAR(TYPE, COND, SUFFIX)\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  TYPE x, y, a, b;\t\t\t\t\t\\\n+  for (int i = 0; i < NUM_ELEMS (x); ++i)\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      a[i] = i - 2;\t\t\t\t\t\\\n+      b[i] = NUM_ELEMS (x) - 2 - i;\t\t\t\\\n+      x[i] = i * 2;\t\t\t\t\t\\\n+      y[i] = -i * 3;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  TYPE r = vcond_##TYPE##_##SUFFIX (x, y, a, b);\t\\\n+  for (int i = 0; i < NUM_ELEMS (x); ++i)\t\t\\\n+    if (r[i] != (a[i] COND b[i] ? x[i] : y[i]))\t\t\\\n+      __builtin_abort ();\t\t\t\t\\\n+}\n+\n+#define TEST_VCOND_IMM(TYPE, COND, IMM, SUFFIX)\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  TYPE x, y, a;\t\t\t\t\t\t\\\n+  for (int i = 0; i < NUM_ELEMS (x); ++i)\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      a[i] = IMM - 2 + i;\t\t\t\t\\\n+      x[i] = i * 2;\t\t\t\t\t\\\n+      y[i] = -i * 3;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  TYPE r = vcond_imm_##TYPE##_##SUFFIX (x, y, a);\t\\\n+  for (int i = 0; i < NUM_ELEMS (x); ++i)\t\t\\\n+    if (r[i] != (a[i] COND IMM ? x[i] : y[i]))\t\t\\\n+      __builtin_abort ();\t\t\t\t\\\n+}\n+\n+\n+int main (int argc, char **argv)\n+{\n+  TEST_VAR_ALL (TEST_VCOND_VAR)\n+  TEST_IMM_ALL (TEST_VCOND_IMM)\n+  return 0;\n+}"}, {"sha": "53baf86b1c0e2ac2d6ea0fe77a40957e0b9da106", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_2.c", "status": "added", "additions": 318, "deletions": 0, "changes": 318, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_2.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,318 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_VCOND_VAR(DATA_TYPE, CMP_TYPE, COND, SUFFIX)\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\t\\\n+  vcond_var_##CMP_TYPE##_##SUFFIX (DATA_TYPE *__restrict__ r,\t\\\n+\t\t\t\t   DATA_TYPE *__restrict__ x,\t\\\n+\t\t\t\t   DATA_TYPE *__restrict__ y,\t\\\n+\t\t\t\t   CMP_TYPE *__restrict__ a,\t\\\n+\t\t\t\t   CMP_TYPE *__restrict__ b,\t\\\n+\t\t\t\t   int n)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tDATA_TYPE xval = x[i], yval = y[i];\t\t\t\\\n+\tCMP_TYPE aval = a[i], bval = b[i];\t\t\t\\\n+\tr[i] = aval COND bval ? xval : yval;\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+#define DEF_VCOND_IMM(DATA_TYPE, CMP_TYPE, COND, IMM, SUFFIX)\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\t\\\n+  vcond_imm_##CMP_TYPE##_##SUFFIX (DATA_TYPE *__restrict__ r,\t\\\n+\t\t\t\t   DATA_TYPE *__restrict__ x,\t\\\n+\t\t\t\t   DATA_TYPE *__restrict__ y,\t\\\n+\t\t\t\t   CMP_TYPE *__restrict__ a,\t\\\n+\t\t\t\t   int n)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tDATA_TYPE xval = x[i], yval = y[i];\t\t\t\\\n+\tCMP_TYPE aval = a[i];\t\t\t\t\t\\\n+\tr[i] = aval COND (CMP_TYPE) IMM ? xval : yval;\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+#define TEST_COND_VAR_SIGNED_ALL(T, COND, SUFFIX)\t\\\n+  T (int8_t, int8_t, COND, SUFFIX)\t\t\t\\\n+  T (int16_t, int16_t, COND, SUFFIX)\t\t\t\\\n+  T (int32_t, int32_t, COND, SUFFIX)\t\t\t\\\n+  T (int64_t, int64_t, COND, SUFFIX)\t\t\t\\\n+  T (_Float16, int16_t, COND, SUFFIX##_float16)\t\t\\\n+  T (float, int32_t, COND, SUFFIX##_float)\t\t\\\n+  T (double, int64_t, COND, SUFFIX##_double)\n+\n+#define TEST_COND_VAR_UNSIGNED_ALL(T, COND, SUFFIX)\t\\\n+  T (uint8_t, uint8_t, COND, SUFFIX)\t\t\t\\\n+  T (uint16_t, uint16_t, COND, SUFFIX)\t\t\t\\\n+  T (uint32_t, uint32_t, COND, SUFFIX)\t\t\t\\\n+  T (uint64_t, uint64_t, COND, SUFFIX)\t\t\t\\\n+  T (_Float16, uint16_t, COND, SUFFIX##_float16)\t\\\n+  T (float, uint32_t, COND, SUFFIX##_float)\t\t\\\n+  T (double, uint64_t, COND, SUFFIX##_double)\n+\n+#define TEST_COND_VAR_ALL(T, COND, SUFFIX)\t\\\n+  TEST_COND_VAR_SIGNED_ALL (T, COND, SUFFIX)\t\\\n+  TEST_COND_VAR_UNSIGNED_ALL (T, COND, SUFFIX)\n+\n+#define TEST_VAR_ALL(T)\t\t\t\t\\\n+  TEST_COND_VAR_ALL (T, >, _gt)\t\t\t\\\n+  TEST_COND_VAR_ALL (T, <, _lt)\t\t\t\\\n+  TEST_COND_VAR_ALL (T, >=, _ge)\t\t\\\n+  TEST_COND_VAR_ALL (T, <=, _le)\t\t\\\n+  TEST_COND_VAR_ALL (T, ==, _eq)\t\t\\\n+  TEST_COND_VAR_ALL (T, !=, _ne)\n+\n+#define TEST_COND_IMM_SIGNED_ALL(T, COND, IMM, SUFFIX)\t\\\n+  T (int8_t, int8_t, COND, IMM, SUFFIX)\t\t\t\\\n+  T (int16_t, int16_t, COND, IMM, SUFFIX)\t\t\\\n+  T (int32_t, int32_t, COND, IMM, SUFFIX)\t\t\\\n+  T (int64_t, int64_t, COND, IMM, SUFFIX)\t\t\\\n+  T (_Float16, int16_t, COND, IMM, SUFFIX##_float16)\t\\\n+  T (float, int32_t, COND, IMM, SUFFIX##_float)\t\t\\\n+  T (double, int64_t, COND, IMM, SUFFIX##_double)\n+\n+#define TEST_COND_IMM_UNSIGNED_ALL(T, COND, IMM, SUFFIX)\t\\\n+  T (uint8_t, uint8_t, COND, IMM, SUFFIX)\t\t\t\\\n+  T (uint16_t, uint16_t, COND, IMM, SUFFIX)\t\t\t\\\n+  T (uint32_t, uint32_t, COND, IMM, SUFFIX)\t\t\t\\\n+  T (uint64_t, uint64_t, COND, IMM, SUFFIX)\t\t\t\\\n+  T (_Float16, uint16_t, COND, IMM, SUFFIX##_float16)\t\t\\\n+  T (float, uint32_t, COND, IMM, SUFFIX##_float)\t\t\\\n+  T (double, uint64_t, COND, IMM, SUFFIX##_double)\n+\n+#define TEST_COND_IMM_ALL(T, COND, IMM, SUFFIX)\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, COND, IMM, SUFFIX)\t\\\n+  TEST_COND_IMM_UNSIGNED_ALL (T, COND, IMM, SUFFIX)\n+\n+#define TEST_IMM_ALL(T)\t\t\t\t\t\t\t\\\n+  /* Expect immediates to make it into the encoding.  */\t\t\\\n+  TEST_COND_IMM_ALL (T, >, 5, _gt)\t\t\t\t\t\\\n+  TEST_COND_IMM_ALL (T, <, 5, _lt)\t\t\t\t\t\\\n+  TEST_COND_IMM_ALL (T, >=, 5, _ge)\t\t\t\t\t\\\n+  TEST_COND_IMM_ALL (T, <=, 5, _le)\t\t\t\t\t\\\n+  TEST_COND_IMM_ALL (T, ==, 5, _eq)\t\t\t\t\t\\\n+  TEST_COND_IMM_ALL (T, !=, 5, _ne)\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, >, 15, _gt2)\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, <, 15, _lt2)\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, >=, 15, _ge2)\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, <=, 15, _le2)\t\t\t\t\\\n+  TEST_COND_IMM_ALL (T, ==, 15, _eq2)\t\t\t\t\t\\\n+  TEST_COND_IMM_ALL (T, !=, 15, _ne2)\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, >, 16, _gt3)\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, <, 16, _lt3)\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, >=, 16, _ge3)\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, <=, 16, _le3)\t\t\t\t\\\n+  TEST_COND_IMM_ALL (T, ==, 16, _eq3)\t\t\t\t\t\\\n+  TEST_COND_IMM_ALL (T, !=, 16, _ne3)\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, >, -16, _gt4)\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, <, -16, _lt4)\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, >=, -16, _ge4)\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, <=, -16, _le4)\t\t\t\t\\\n+  TEST_COND_IMM_ALL (T, ==, -16, _eq4)\t\t\t\t\t\\\n+  TEST_COND_IMM_ALL (T, !=, -16, _ne4)\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, >, -17, _gt5)\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, <, -17, _lt5)\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, >=, -17, _ge5)\t\t\t\t\\\n+  TEST_COND_IMM_SIGNED_ALL (T, <=, -17, _le5)\t\t\t\t\\\n+  TEST_COND_IMM_ALL (T, ==, -17, _eq5)\t\t\t\t\t\\\n+  TEST_COND_IMM_ALL (T, !=, -17, _ne5)\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  TEST_COND_IMM_UNSIGNED_ALL (T, >, 0, _gt6)\t\t\t\t\\\n+  /* Testing if an unsigned value >= 0 or < 0 is pointless as it will\t\\\n+     get folded away by the compiler.  */\t\t\t\t\\\n+  TEST_COND_IMM_UNSIGNED_ALL (T, <=, 0, _le6)\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  TEST_COND_IMM_UNSIGNED_ALL (T, >, 127, _gt7)\t\t\t\t\\\n+  TEST_COND_IMM_UNSIGNED_ALL (T, <, 127, _lt7)\t\t\t\t\\\n+  TEST_COND_IMM_UNSIGNED_ALL (T, >=, 127, _ge7)\t\t\t\t\\\n+  TEST_COND_IMM_UNSIGNED_ALL (T, <=, 127, _le7)\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* Expect immediates to NOT make it into the encoding, and instead be \\\n+     forced into a register.  */\t\t\t\t\t\\\n+  TEST_COND_IMM_UNSIGNED_ALL (T, >, 128, _gt8)\t\t\t\t\\\n+  TEST_COND_IMM_UNSIGNED_ALL (T, <, 128, _lt8)\t\t\t\t\\\n+  TEST_COND_IMM_UNSIGNED_ALL (T, >=, 128, _ge8)\t\t\t\t\\\n+  TEST_COND_IMM_UNSIGNED_ALL (T, <=, 128, _le8)\n+\n+TEST_VAR_ALL (DEF_VCOND_VAR)\n+TEST_IMM_ALL (DEF_VCOND_IMM)\n+\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.b, p[0-7], z[0-9]+\\.b, z[0-9]+\\.b\\n} 66 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.h, p[0-7], z[0-9]+\\.h, z[0-9]+\\.h\\n} 132 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.s, p[0-7], z[0-9]+\\.s, z[0-9]+\\.s\\n} 132 } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\tz[0-9]+\\.d, p[0-7], z[0-9]+\\.d, z[0-9]+\\.d\\n} 132 } } */\n+\n+/* There are two signed ordered register comparisons for .b, one for a\n+   variable comparison and one for one of the two out-of-range constant\n+   comparisons.  The other out-of-ranger constant comparison can be\n+   adjusted to an in-range value by inverting the handling of equality.\n+\n+   The same pattern appears twice for .h, .s and .d, once for integer data\n+   and once for floating-point data.  */\n+/* { dg-final { scan-assembler-times {\\tcmpgt\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, z[0-9]+\\.b\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpgt\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpgt\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpgt\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 4 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tcmple\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, z[0-9]+\\.b\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmple\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmple\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmple\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 4 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tcmplt\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, z[0-9]+\\.b\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmplt\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmplt\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmplt\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 4 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tcmpge\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, z[0-9]+\\.b\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpge\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpge\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpge\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 4 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tcmphi\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, z[0-9]+\\.b\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmphi\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmphi\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmphi\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 4 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tcmpls\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, z[0-9]+\\.b\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpls\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpls\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpls\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 4 } } */\n+\n+/* Out-of-range >= is converted to in-range >.  */\n+/* { dg-final { scan-assembler-times {\\tcmphs\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tcmphs\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmphs\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmphs\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+\n+/* Out-of-range < is converted to in-range <=.  */\n+/* { dg-final { scan-assembler-times {\\tcmplo\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tcmplo\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmplo\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmplo\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+\n+/* 6 for .b: {signed, unsigned\\n} x {variable, too high, too low}.  */\n+/* 12 for .h,.s and .d: the above 6 repeated for integer and floating-point\n+   data.  */\n+/* { dg-final { scan-assembler-times {\\tcmpeq\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpeq\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} 12 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpeq\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 12 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpeq\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 12 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tcmpne\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpne\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, z[0-9]+\\.h\\n} 12 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpne\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 12 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpne\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 12 } } */\n+\n+/* Also used for >= 16. */\n+/* { dg-final { scan-assembler-times {\\tcmpgt\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpgt\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #15\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpgt\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #15\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpgt\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #15\\n} 4 } } */\n+\n+/* gcc converts \"a < 15\" into \"a <= 14\".  */\n+/* { dg-final { scan-assembler-times {\\tcmple\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #14\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tcmple\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #14\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmple\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #14\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmple\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #14\\n} 2 } } */\n+\n+/* gcc converts \"a >= 15\" into \"a > 14\".  */\n+/* { dg-final { scan-assembler-times {\\tcmpgt\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #14\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpgt\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #14\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpgt\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #14\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpgt\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #14\\n} 2 } } */\n+\n+/* Also used for < 16.  */\n+/* { dg-final { scan-assembler-times {\\tcmple\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmple\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #15\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmple\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #15\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmple\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #15\\n} 4 } } */\n+\n+/* Appears once for each signedness.  */\n+/* { dg-final { scan-assembler-times {\\tcmpeq\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpeq\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #15\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpeq\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #15\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpeq\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #15\\n} 4 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tcmpne\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpne\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #15\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpne\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #15\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpne\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #15\\n} 4 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tcmpeq\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #-16\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpeq\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #-16\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpeq\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #-16\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpeq\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #-16\\n} 4 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tcmpne\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #-16\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpne\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #-16\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpne\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #-16\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpne\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #-16\\n} 4 } } */\n+\n+/* gcc converts \"a > -16\" into \"a >= -15\".  */\n+/* { dg-final { scan-assembler-times {\\tcmpge\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #-15\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpge\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #-15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpge\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #-15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpge\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #-15\\n} 2 } } */\n+\n+/* Also used for <= -17.  */\n+/* { dg-final { scan-assembler-times {\\tcmplt\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #-16\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmplt\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #-16\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmplt\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #-16\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmplt\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #-16\\n} 4 } } */\n+\n+/* Also used for > -17.  */\n+/* { dg-final { scan-assembler-times {\\tcmpge\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #-16\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpge\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #-16\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpge\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #-16\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpge\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #-16\\n} 4 } } */\n+\n+/* gcc converts \"a <= -16\" into \"a < -15\".  */\n+/* { dg-final { scan-assembler-times {\\tcmplt\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #-15\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tcmplt\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #-15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmplt\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #-15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmplt\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #-15\\n} 2 } } */\n+\n+/* gcc converts \"a > 0\" into \"a != 0\".  */\n+/* { dg-final { scan-assembler-times {\\tcmpne\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpne\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #0\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpne\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpne\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\n} 2 } } */\n+\n+/* gcc converts \"a <= 0\" into \"a == 0\".  */\n+/* { dg-final { scan-assembler-times {\\tcmpeq\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpeq\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #0\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpeq\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpeq\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\n} 2 } } */\n+\n+/* Also used for >= 128.  */\n+/* { dg-final { scan-assembler-times {\\tcmphi\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #127\\n} 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tcmphi\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #127\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmphi\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #127\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmphi\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #127\\n} 4 } } */\n+\n+/* gcc converts \"a < 127\" into \"a <= 126\".  */\n+/* { dg-final { scan-assembler-times {\\tcmpls\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #126\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpls\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #126\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpls\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #126\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpls\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #126\\n} 2 } } */\n+\n+/* gcc converts \"a >= 127\" into \"a > 126\".  */\n+/* { dg-final { scan-assembler-times {\\tcmphi\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #126\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tcmphi\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #126\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmphi\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #126\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcmphi\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #126\\n} 2 } } */\n+\n+/* Also used for < 128.  */\n+/* { dg-final { scan-assembler-times {\\tcmpls\\tp[0-7]\\.b, p[0-7]/z, z[0-9]+\\.b, #127\\n} 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tcmpls\\tp[0-7]\\.h, p[0-7]/z, z[0-9]+\\.h, #127\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpls\\tp[0-7]\\.s, p[0-7]/z, z[0-9]+\\.s, #127\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpls\\tp[0-7]\\.d, p[0-7]/z, z[0-9]+\\.d, #127\\n} 4 } } */"}, {"sha": "5432f596d8f985d30b9538a31e7276fe62abbe70", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_2_run.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_2_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"vcond_2.c\"\n+\n+#define N 97\n+\n+#define TEST_VCOND_VAR(DATA_TYPE, CMP_TYPE, COND, SUFFIX)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  DATA_TYPE x[N], y[N], r[N];\t\t\t\t\t\\\n+  CMP_TYPE a[N], b[N];\t\t\t\t\t\t\\\n+  for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      x[i] = i;\t\t\t\t\t\t\t\\\n+      y[i] = (i & 1) + 5;\t\t\t\t\t\\\n+      a[i] = i - N / 3;\t\t\t\t\t\t\\\n+      b[i] = N - N / 3 - i;\t\t\t\t\t\\\n+      asm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  vcond_var_##CMP_TYPE##_##SUFFIX (r, x, y, a, b, N);\t\t\\\n+  for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+    if (r[i] != (a[i] COND b[i] ? x[i] : y[i]))\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\t\\\n+}\n+\n+#define TEST_VCOND_IMM(DATA_TYPE, CMP_TYPE, COND, IMM, SUFFIX)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  DATA_TYPE x[N], y[N], r[N];\t\t\t\t\t\\\n+  CMP_TYPE a[N];\t\t\t\t\t\t\\\n+  for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      x[i] = i;\t\t\t\t\t\t\t\\\n+      y[i] = (i & 1) + 5;\t\t\t\t\t\\\n+      a[i] = IMM - N / 3 + i;\t\t\t\t\t\\\n+      asm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  vcond_imm_##CMP_TYPE##_##SUFFIX (r, x, y, a, N);\t\t\\\n+  for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+    if (r[i] != (a[i] COND (CMP_TYPE) IMM ? x[i] : y[i]))\t\\\n+      __builtin_abort ();\t\t\t\t\t\\\n+}\n+\n+int __attribute__ ((optimize (1)))\n+main (int argc, char **argv)\n+{\n+  TEST_VAR_ALL (TEST_VCOND_VAR)\n+  TEST_IMM_ALL (TEST_VCOND_IMM)\n+  return 0;\n+}"}, {"sha": "7dee996232b59eb3799d797b0adf2118cf8ad8de", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_3.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_3.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_SEL_IMM(TYPE, SUFFIX, IMM)\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+sel_##TYPE##_##SUFFIX (TYPE *restrict a, TYPE *restrict b, int n)\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < n; i++)\t\t\t\t\t\t\\\n+    a[i] = b[i] != 0 ? IMM : 0;\t\t\t\t\t\t\\\n+}\n+\n+#define DEF_SEL_VAR(TYPE)\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+sel_##TYPE##_var (TYPE *restrict a, TYPE *restrict b, TYPE val, int n)\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < n; i++)\t\t\t\t\t\t\\\n+    a[i] = b[i] != 0 ? val : 0;\t\t\t\t\t\t\\\n+}\n+\n+#define TEST_TYPE8(TYPE)\t\t\t\\\n+  DEF_SEL_VAR (TYPE)\t\t\t\t\\\n+  DEF_SEL_IMM (TYPE, m128, -128)\t\t\\\n+  DEF_SEL_IMM (TYPE, m127, -127)\t\t\\\n+  DEF_SEL_IMM (TYPE, 2, 2)\t\t\t\\\n+  DEF_SEL_IMM (TYPE, 127, 127)\n+\n+#define TEST_TYPE16(TYPE)\t\t\t\\\n+  TEST_TYPE8 (TYPE)\t\t\t\t\\\n+  DEF_SEL_IMM (TYPE, m32768, -32768)\t\t\\\n+  DEF_SEL_IMM (TYPE, m32767, -32767)\t\t\\\n+  DEF_SEL_IMM (TYPE, m32512, -32512)\t\t\\\n+  DEF_SEL_IMM (TYPE, m32511, -32511)\t\t\\\n+  DEF_SEL_IMM (TYPE, m256, -256)\t\t\\\n+  DEF_SEL_IMM (TYPE, m255, -255)\t\t\\\n+  DEF_SEL_IMM (TYPE, m129, -129)\t\t\\\n+  DEF_SEL_IMM (TYPE, 128, 128)\t\t\t\\\n+  DEF_SEL_IMM (TYPE, 256, 256)\t\t\t\\\n+  DEF_SEL_IMM (TYPE, 32511, 32511)\t\t\\\n+  DEF_SEL_IMM (TYPE, 32512, 32512)\t\t\\\n+  DEF_SEL_IMM (TYPE, 32767, 32767)\n+\n+#define TEST_TYPE32(TYPE)\t\t\t\\\n+  TEST_TYPE16 (TYPE)\t\t\t\t\\\n+  DEF_SEL_IMM (TYPE, m65536, -65536)\t\t\\\n+  DEF_SEL_IMM (TYPE, m32769, -32769)\t\t\\\n+  DEF_SEL_IMM (TYPE, 32768, 32768)\n+\n+TEST_TYPE8 (int8_t)\n+TEST_TYPE16 (int16_t)\n+TEST_TYPE32 (int32_t)\n+TEST_TYPE32 (int64_t)\n+\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.b, p[0-7]/z, #-128\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.b, p[0-7]/z, #-127\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.b, p[0-7]/z, #2\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.b, p[0-7]/z, #127\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.[hsd], p[0-7]/z, #-32768\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.[hsd], p[0-7]/z, #-32512\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.[hsd], p[0-7]/z, #-256\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.[hsd], p[0-7]/z, #-128\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.[hsd], p[0-7]/z, #-127\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.[hsd], p[0-7]/z, #2\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.[hsd], p[0-7]/z, #127\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.[hsd], p[0-7]/z, #256\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.[hsd], p[0-7]/z, #32512\\n} 3 } } */"}, {"sha": "8d137012d9fc111b6647e8e6d09af81bf2c1ca20", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_4.c", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_4.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,139 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define eq(A, B) ((A) == (B))\n+#define ne(A, B) ((A) != (B))\n+#define olt(A, B) ((A) < (B))\n+#define ole(A, B) ((A) <= (B))\n+#define oge(A, B) ((A) >= (B))\n+#define ogt(A, B) ((A) > (B))\n+#define ordered(A, B) (!__builtin_isunordered (A, B))\n+#define unordered(A, B) (__builtin_isunordered (A, B))\n+#define ueq(A, B) (!__builtin_islessgreater (A, B))\n+#define ult(A, B) (__builtin_isless (A, B))\n+#define ule(A, B) (__builtin_islessequal (A, B))\n+#define uge(A, B) (__builtin_isgreaterequal (A, B))\n+#define ugt(A, B) (__builtin_isgreater (A, B))\n+#define nueq(A, B) (__builtin_islessgreater (A, B))\n+#define nult(A, B) (!__builtin_isless (A, B))\n+#define nule(A, B) (!__builtin_islessequal (A, B))\n+#define nuge(A, B) (!__builtin_isgreaterequal (A, B))\n+#define nugt(A, B) (!__builtin_isgreater (A, B))\n+\n+#define TEST_LOOP(TYPE1, TYPE2, CMP)\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\t\\\n+  test_##TYPE1##_##TYPE2##_##CMP##_var (TYPE1 *restrict dest,\t\\\n+\t\t\t\t\tTYPE1 *restrict src,\t\\\n+\t\t\t\t\tTYPE1 fallback,\t\t\\\n+\t\t\t\t\tTYPE2 *restrict a,\t\\\n+\t\t\t\t\tTYPE2 *restrict b,\t\\\n+\t\t\t\t\tint count)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < count; ++i)\t\t\t\t\\\n+      dest[i] = CMP (a[i], b[i]) ? src[i] : fallback;\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\t\\\n+  test_##TYPE1##_##TYPE2##_##CMP##_zero (TYPE1 *restrict dest,\t\\\n+\t\t\t\t\t TYPE1 *restrict src,\t\\\n+\t\t\t\t\t TYPE1 fallback,\t\\\n+\t\t\t\t\t TYPE2 *restrict a,\t\\\n+\t\t\t\t\t int count)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < count; ++i)\t\t\t\t\\\n+      dest[i] = CMP (a[i], 0) ? src[i] : fallback;\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\t\\\n+  test_##TYPE1##_##TYPE2##_##CMP##_sel (TYPE1 *restrict dest,\t\\\n+\t\t\t\t\tTYPE1 if_true,\t\t\\\n+\t\t\t\t\tTYPE1 if_false,\t\t\\\n+\t\t\t\t\tTYPE2 *restrict a,\t\\\n+\t\t\t\t\tTYPE2 b, int count)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < count; ++i)\t\t\t\t\\\n+      dest[i] = CMP (a[i], b) ? if_true : if_false;\t\t\\\n+  }\n+\n+#define TEST_CMP(CMP) \\\n+  TEST_LOOP (int32_t, float, CMP) \\\n+  TEST_LOOP (uint32_t, float, CMP) \\\n+  TEST_LOOP (int64_t, float, CMP) \\\n+  TEST_LOOP (uint64_t, float, CMP) \\\n+  TEST_LOOP (float, float, CMP) \\\n+  TEST_LOOP (int32_t, double, CMP) \\\n+  TEST_LOOP (uint32_t, double, CMP) \\\n+  TEST_LOOP (int64_t, double, CMP) \\\n+  TEST_LOOP (uint64_t, double, CMP) \\\n+  TEST_LOOP (double, double, CMP)\n+\n+TEST_CMP (eq)\n+TEST_CMP (ne)\n+TEST_CMP (olt)\n+TEST_CMP (ole)\n+TEST_CMP (oge)\n+TEST_CMP (ogt)\n+TEST_CMP (ordered)\n+TEST_CMP (unordered)\n+TEST_CMP (ueq)\n+TEST_CMP (ult)\n+TEST_CMP (ule)\n+TEST_CMP (uge)\n+TEST_CMP (ugt)\n+TEST_CMP (nueq)\n+TEST_CMP (nult)\n+TEST_CMP (nule)\n+TEST_CMP (nuge)\n+TEST_CMP (nugt)\n+\n+/* { dg-final { scan-assembler-times {\\tfcmeq\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0\\n} 5 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tfcmeq\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 10 { xfail *-*-* } } } */\n+\n+/* 5 for ne, 5 for ueq and 5 for nueq.  */\n+/* { dg-final { scan-assembler-times {\\tfcmne\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0\\n} 15 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tfcmne\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 30 { xfail *-*-* } } } */\n+\n+/* 5 for lt, 5 for ult and 5 for nult.  */\n+/* { dg-final { scan-assembler-times {\\tfcmlt\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0\\n} 15 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmlt\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 30 } } */\n+\n+/* 5 for le, 5 for ule and 5 for nule.  */\n+/* { dg-final { scan-assembler-times {\\tfcmle\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0\\n} 15 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmle\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 30 } } */\n+\n+/* 5 for gt, 5 for ugt and 5 for nugt.  */\n+/* { dg-final { scan-assembler-times {\\tfcmgt\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0\\n} 15 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmgt\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 30 } } */\n+\n+/* 5 for ge, 5 for uge and 5 for nuge.  */\n+/* { dg-final { scan-assembler-times {\\tfcmge\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0\\n} 15 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmge\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 30 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tfcmuo\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0\\n} } } */\n+/* 3 loops * 5 invocations for all 12 unordered comparisons.  */\n+/* { dg-final { scan-assembler-times {\\tfcmuo\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s\\n} 180 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfcmeq\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0\\n} 7 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tfcmeq\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 14 { xfail *-*-* } } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfcmne\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0\\n} 21 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tfcmne\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 42 { xfail *-*-* } } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfcmlt\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0\\n} 21 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmlt\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 42 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfcmle\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0\\n} 21 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmle\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 42 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfcmgt\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0\\n} 21 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmgt\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 42 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfcmge\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0\\n} 21 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmge\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 42 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tfcmuo\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0\\n} } } */\n+/* 3 loops * 5 invocations, with 2 invocations having ncopies == 2,\n+   for all 12 unordered comparisons.  */\n+/* { dg-final { scan-assembler-times {\\tfcmuo\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d\\n} 252 } } */"}, {"sha": "c345087726c9b2dce098264399bbf2aa252f1e04", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_4_run.c", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_4_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,88 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#ifndef TEST_EXCEPTIONS\n+#define TEST_EXCEPTIONS 1\n+#endif\n+\n+#include <fenv.h>\n+\n+#include \"vcond_4.c\"\n+\n+#define N 401\n+\n+#define RUN_LOOP(TYPE1, TYPE2, CMP, EXPECT_INVALID)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE1 dest1[N], dest2[N], dest3[N], src[N];\t\t\t\t\\\n+    TYPE2 a[N], b[N];\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tsrc[i] = i * i;\t\t\t\t\t\t\t\\\n+\tif (i % 5 == 0)\t\t\t\t\t\t\t\\\n+\t  a[i] = 0;\t\t\t\t\t\t\t\\\n+\telse if (i % 3)\t\t\t\t\t\t\t\\\n+\t  a[i] = i * 0.1;\t\t\t\t\t\t\\\n+\telse\t\t\t\t\t\t\t\t\\\n+\t  a[i] = i;\t\t\t\t\t\t\t\\\n+\tif (i % 7 == 0)\t\t\t\t\t\t\t\\\n+\t  b[i] = __builtin_nan (\"\");\t\t\t\t\t\\\n+\telse if (i % 6)\t\t\t\t\t\t\t\\\n+\t  b[i] = i * 0.1;\t\t\t\t\t\t\\\n+\telse\t\t\t\t\t\t\t\t\\\n+\t  b[i] = i;\t\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    feclearexcept (FE_ALL_EXCEPT);\t\t\t\t\t\\\n+    test_##TYPE1##_##TYPE2##_##CMP##_var (dest1, src, 11, a, b, N);\t\\\n+    test_##TYPE1##_##TYPE2##_##CMP##_zero (dest2, src, 22, a, N);\t\\\n+    test_##TYPE1##_##TYPE2##_##CMP##_sel (dest3, 33, 44, a, 9, N);\t\\\n+    if (TEST_EXCEPTIONS\t\t\t\t\t\t\t\\\n+\t&& !fetestexcept (FE_INVALID) != !(EXPECT_INVALID))\t\t\\\n+      __builtin_abort ();\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tif (dest1[i] != (CMP (a[i], b[i]) ? src[i] : 11))\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\t\\\n+\tif (dest2[i] != (CMP (a[i], 0) ? src[i] : 22))\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\t\\\n+\tif (dest3[i] != (CMP (a[i], 9) ? 33 : 44))\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\n+\n+#define RUN_CMP(CMP, EXPECT_INVALID) \\\n+  RUN_LOOP (int32_t, float, CMP, EXPECT_INVALID) \\\n+  RUN_LOOP (uint32_t, float, CMP, EXPECT_INVALID) \\\n+  RUN_LOOP (int64_t, float, CMP, EXPECT_INVALID) \\\n+  RUN_LOOP (uint64_t, float, CMP, EXPECT_INVALID) \\\n+  RUN_LOOP (float, float, CMP, EXPECT_INVALID) \\\n+  RUN_LOOP (int32_t, double, CMP, EXPECT_INVALID) \\\n+  RUN_LOOP (uint32_t, double, CMP, EXPECT_INVALID) \\\n+  RUN_LOOP (int64_t, double, CMP, EXPECT_INVALID) \\\n+  RUN_LOOP (uint64_t, double, CMP, EXPECT_INVALID) \\\n+  RUN_LOOP (double, double, CMP, EXPECT_INVALID)\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  RUN_CMP (eq, 0)\n+  RUN_CMP (ne, 0)\n+  RUN_CMP (olt, 1)\n+  RUN_CMP (ole, 1)\n+  RUN_CMP (oge, 1)\n+  RUN_CMP (ogt, 1)\n+  RUN_CMP (ordered, 0)\n+  RUN_CMP (unordered, 0)\n+  RUN_CMP (ueq, 0)\n+  RUN_CMP (ult, 0)\n+  RUN_CMP (ule, 0)\n+  RUN_CMP (uge, 0)\n+  RUN_CMP (ugt, 0)\n+  RUN_CMP (nueq, 0)\n+  RUN_CMP (nult, 0)\n+  RUN_CMP (nule, 0)\n+  RUN_CMP (nuge, 0)\n+  RUN_CMP (nugt, 0)\n+  return 0;\n+}"}, {"sha": "ddc8038cc3dcb168c374e9fc0344dd19d02b2192", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_5.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_5.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-trapping-math\" } */\n+\n+/* The difference here is that nueq can use LTGT.  */\n+\n+#include \"vcond_4.c\"\n+\n+/* 5 for eqand 5 for ueq.  */\n+/* { dg-final { scan-assembler-times {\\tfcmeq\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0} 10 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tfcmeq\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s} 20 { xfail *-*-* } } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfcmne\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0} 5 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tfcmne\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s} 10 { xfail *-*-* } } } */\n+\n+/* 5 for lt, 5 for ult, 5 for nueq and 5 for nult.  */\n+/* { dg-final { scan-assembler-times {\\tfcmlt\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0} 20 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tfcmlt\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s} 40 { xfail *-*-* } } } */\n+\n+/* 5 for le, 5 for ule and 5 for nule.  */\n+/* { dg-final { scan-assembler-times {\\tfcmle\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0} 15 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmle\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s} 30 } } */\n+\n+/* 5 for gt, 5 for ugt, 5 for nueq and 5 for nugt.  */\n+/* { dg-final { scan-assembler-times {\\tfcmgt\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0} 20 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tfcmgt\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s} 40 { xfail *-*-* } } } */\n+\n+/* 5 for ge, 5 for uge and 5 for nuge.  */\n+/* { dg-final { scan-assembler-times {\\tfcmge\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0} 15 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmge\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s} 30 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tfcmuo\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, #0\\.0} } } */\n+/* 3 loops * 5 invocations for ordered, unordered amd ueq.  */\n+/* { dg-final { scan-assembler-times {\\tfcmuo\\tp[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s, z[0-9]+\\.s} 45 { xfail *-*-* } } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfcmeq\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0} 14 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tfcmeq\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d} 28 { xfail *-*-* } } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfcmne\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0} 7 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tfcmne\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d} 14 { xfail *-*-* } } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfcmlt\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0} 28 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tfcmlt\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d} 56 { xfail *-*-* } } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfcmle\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0} 21 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmle\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d} 42 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfcmgt\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0} 28 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tfcmgt\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d} 56 { xfail *-*-* } } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfcmge\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0} 21 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmge\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d} 42 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tfcmuo\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, #0\\.0} } } */\n+/* 3 loops * 5 invocations, with 2 invocations having ncopies == 2,\n+   for ordered, unordered and ueq.  */\n+/* { dg-final { scan-assembler-times {\\tfcmuo\\tp[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d, z[0-9]+\\.d} 63 { xfail *-*-* } } } */"}, {"sha": "deec44c21b2a77a158f6f1b5e9b1929f2c8377fe", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_5_run.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_5_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_5_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_5_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-trapping-math\" } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#define TEST_EXCEPTIONS 0\n+#include \"vcond_4_run.c\""}, {"sha": "6c6a84a892865009aa4409ba229bc88cb9744690", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_6.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_6.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define b_and(A, B) ((A) & (B))\n+#define b_orr(A, B) ((A) | (B))\n+#define b_eor(A, B) ((A) ^ (B))\n+#define b_nand(A, B) (!((A) & (B)))\n+#define b_nor(A, B) (!((A) | (B)))\n+#define b_bic(A, B) ((A) & !(B))\n+#define b_orn(A, B) ((A) | !(B))\n+\n+#define LOOP(TYPE, BINOP)\t\t\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\t\t\\\n+  test_##TYPE##_##BINOP (TYPE *restrict dest, TYPE *restrict src,\t\\\n+\t\t\t TYPE *restrict a, TYPE *restrict b,\t\t\\\n+\t\t\t TYPE *restrict c, TYPE *restrict d,\t\t\\\n+\t\t\t TYPE fallback, int count)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < count; ++i)\t\t\t\t\t\\\n+      dest[i] = (BINOP (__builtin_isunordered (a[i], b[i]),\t\t\\\n+\t\t\t__builtin_isunordered (c[i], d[i]))\t\t\\\n+\t\t ? src[i] : fallback);\t\t\t\t\t\\\n+  }\n+\n+#define TEST_BINOP(T, BINOP) \\\n+  T (_Float16, BINOP) \\\n+  T (float, BINOP) \\\n+  T (double, BINOP)\n+\n+#define TEST_ALL(T) \\\n+  TEST_BINOP (T, b_and) \\\n+  TEST_BINOP (T, b_orr) \\\n+  TEST_BINOP (T, b_eor) \\\n+  TEST_BINOP (T, b_nand) \\\n+  TEST_BINOP (T, b_nor) \\\n+  TEST_BINOP (T, b_bic) \\\n+  TEST_BINOP (T, b_orn)\n+\n+TEST_ALL (LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tand\\tp[0-9]+\\.b, p[0-9]+/z, p[0-9]+\\.b, p[0-9]+\\.b} 3 } } */\n+/* { dg-final { scan-assembler {\\tand\\tp[0-9]+\\.b, p[0-9]+/z, p[0-9]+\\.b, p[0-9]+\\.b} } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tp[0-9]+\\.b, p[0-9]+/z, p[0-9]+\\.b, p[0-9]+\\.b} 3 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tp[0-9]+\\.b, p[0-9]+/z, p[0-9]+\\.b, p[0-9]+\\.b} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tnand\\tp[0-9]+\\.b, p[0-9]+/z, p[0-9]+\\.b, p[0-9]+\\.b} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tnor\\tp[0-9]+\\.b, p[0-9]+/z, p[0-9]+\\.b, p[0-9]+\\.b} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tbic\\tp[0-9]+\\.b, p[0-9]+/z, p[0-9]+\\.b, p[0-9]+\\.b} 3 } } */\n+/* { dg-final { scan-assembler-times {\\torn\\tp[0-9]+\\.b, p[0-9]+/z, p[0-9]+\\.b, p[0-9]+\\.b} 3 } } */"}, {"sha": "40b68ce91843fc099344f02a4498e9f9cabe0946", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_6_run.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_6_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_6_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_6_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"vcond_6.c\"\n+\n+#define N 401\n+\n+#define RUN_LOOP(TYPE, BINOP)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    TYPE dest[N], src[N], a[N], b[N], c[N], d[N];\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tsrc[i] = i * i;\t\t\t\t\t\t\t\\\n+\ta[i] = i % 5 < 3 ? __builtin_nan(\"\") : i;\t\t\t\\\n+\tb[i] = i % 7 < 4 ? __builtin_nan(\"\") : i;\t\t\t\\\n+\tc[i] = i % 9 < 5 ? __builtin_nan(\"\") : i;\t\t\t\\\n+\td[i] = i % 11 < 6 ? __builtin_nan(\"\") : i;\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##BINOP (dest, src, a, b, c, d, 100, N);\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tint res = BINOP (__builtin_isunordered (a[i], b[i]),\t\t\\\n+\t\t\t __builtin_isunordered (c[i], d[i]));\t\t\\\n+\tif (dest[i] != (res ? src[i] : 100.0))\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  TEST_ALL (RUN_LOOP)\n+  return 0;\n+}"}, {"sha": "6042606f7b4919db9b1943ca768fa71e8adda599", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vec_init_1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_init_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_init_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_init_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define NUM_ELEMS(TYPE) (128 / sizeof (TYPE))\n+\n+#define DUP_FN(TYPE)\t\t\t\t\\\n+void __attribute__ ((noinline, noclone))\t\\\n+dup_##TYPE (TYPE *r, TYPE v)\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  for (int i = 0; i < NUM_ELEMS (TYPE); i++)\t\\\n+    r[i] = v;\t\t\t\t\t\\\n+}\n+\n+DUP_FN (int8_t)\n+DUP_FN (int16_t)\n+DUP_FN (int32_t)\n+DUP_FN (int64_t)\n+DUP_FN (_Float16)\n+DUP_FN (float)\n+DUP_FN (double)\n+\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.b, w[0-9]+\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, w[0-9]+\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.s, w[0-9]+\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, x[0-9]+\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.h, h[0-9]+\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.s, s[0-9]+\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, d[0-9]+\\n} 1 } } */"}, {"sha": "539ba2c8a23c83468fea534d1b8ec9b98f66ac99", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vec_init_1_run.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_init_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_init_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_init_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"vec_init_1.c\"\n+\n+#define TEST_INIT_VECTOR(TYPE, VAL)\t\t\\\n+  {\t\t\t\t\t\t\\\n+  TYPE r[NUM_ELEMS (TYPE)];\t\t\t\\\n+  dup_##TYPE (r, VAL);\t\t\t\t\\\n+  for (int i = 0; i < NUM_ELEMS (TYPE); i++)\t\\\n+    if (r[i] != VAL)\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\\\n+  }\n+\n+int __attribute__ ((optimize (1)))\n+main (void)\n+{\n+  TEST_INIT_VECTOR (int8_t, 0x2a);\n+  TEST_INIT_VECTOR (int16_t, 0x3976);\n+  TEST_INIT_VECTOR (int32_t, 0x31232976);\n+  TEST_INIT_VECTOR (int64_t, 0x9489363731232976LL);\n+\n+  TEST_INIT_VECTOR (_Float16, -0x1.fp10);\n+  TEST_INIT_VECTOR (float, -0x1.fe02p10);\n+  TEST_INIT_VECTOR (double, 0x1.fe02eeeee1p10);\n+\n+  return 0;\n+}"}, {"sha": "e34614698fadf18997f6eaeb8046614f16f8cacc", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vec_init_2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_init_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_init_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_init_2.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=256\" } */\n+\n+typedef unsigned int vnx4si __attribute__ ((vector_size(32)));\n+\n+void\n+f (vnx4si *ptr, int x)\n+{\n+  *ptr += (vnx4si) { x, x, 1, 2, 3, x, x, 4 };\n+}"}, {"sha": "74a48bfdd603ff7999e1fc661ed840a40a2bb9c0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vec_perm_1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -msve-vector-bits=256\" } */\n+\n+#include <stdint.h>\n+\n+typedef int64_t vnx2di __attribute__((vector_size (32)));\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+typedef int16_t vnx8hi __attribute__((vector_size (32)));\n+typedef int8_t vnx16qi __attribute__((vector_size (32)));\n+typedef double vnx2df __attribute__((vector_size (32)));\n+typedef float vnx4sf __attribute__((vector_size (32)));\n+typedef _Float16 vnx8hf __attribute__((vector_size (32)));\n+\n+#define VEC_PERM(TYPE, MASKTYPE)\t\t\t\t\t\\\n+TYPE __attribute__ ((noinline, noclone)) \t\t\t\t\\\n+vec_perm_##TYPE (TYPE values1, TYPE values2, MASKTYPE mask)\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  return __builtin_shuffle (values1, values2, mask);\t\t\t\\\n+}\n+\n+VEC_PERM (vnx2di, vnx2di);\n+VEC_PERM (vnx4si, vnx4si);\n+VEC_PERM (vnx8hi, vnx8hi);\n+VEC_PERM (vnx16qi, vnx16qi);\n+VEC_PERM (vnx2df, vnx2di);\n+VEC_PERM (vnx4sf, vnx4si);\n+VEC_PERM (vnx8hf, vnx8hi);\n+\n+/* { dg-final { scan-assembler-times {\\ttbl\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\ttbl\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\ttbl\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\ttbl\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b\\n} 2 } } */"}, {"sha": "317cae6010c4318554c6ee1f38ecda50e30a715e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vec_perm_1_overrange_run.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_1_overrange_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_1_overrange_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_1_overrange_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O\" } */\n+/* { dg-options \"-O -msve-vector-bits=256\" { target aarch64_sve256_hw } } */\n+\n+#include \"vec_perm_1.c\"\n+\n+#define TEST_VEC_PERM(TYPE, MASK_TYPE, EXPECTED_RESULT,\t\t\t\\\n+\t\t      VALUES1, VALUES2, MASK)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  TYPE expected_result = EXPECTED_RESULT;\t\t\t\t\\\n+  TYPE values1 = VALUES1;\t\t\t\t\t\t\\\n+  TYPE values2 = VALUES2;\t\t\t\t\t\t\\\n+  MASK_TYPE mask = MASK;\t\t\t\t\t\t\\\n+  TYPE dest;\t\t\t\t\t\t\t\t\\\n+  dest = vec_perm_##TYPE (values1, values2, mask);\t\t\t\\\n+  if (__builtin_memcmp (&dest, &expected_result, sizeof (TYPE)) != 0)\t\\\n+    __builtin_abort ();\t\t\t\t\t\t\t\\\n+}\n+\n+int main (void)\n+{\n+  TEST_VEC_PERM (vnx2di, vnx2di,\n+\t\t ((vnx2di) { 5, 36, 7, 48 }),\n+\t\t ((vnx2di) { 4, 5, 6, 7 }),\n+\t\t ((vnx2di) { 12, 24, 36, 48 }),\n+\t\t ((vnx2di) { 1 + (8 * 1), 6 + (8 * 3),\n+\t\t\t     3 + (8 * 1), 7 + (8 * 5) }));\n+  TEST_VEC_PERM (vnx4si, vnx4si,\n+\t\t ((vnx4si) { 34, 38, 40, 10, 9, 8, 7, 35 }),\n+\t\t ((vnx4si) { 3, 4, 5, 6, 7, 8, 9, 10 }),\n+\t\t ((vnx4si) { 33, 34, 35, 36, 37, 38, 39, 40 }),\n+\t\t ((vnx4si) { 9 + (16 * 2), 13 + (16 * 5),\n+\t\t\t     15 + (16 * 1), 7 + (16 * 0),\n+\t\t\t     6 + (16 * 8), 5 + (16 * 2),\n+\t\t\t     4 + (16 * 3), 10 + (16 * 2) }));\n+  TEST_VEC_PERM (vnx8hi, vnx8hi,\n+\t\t ((vnx8hi) { 12, 16, 18, 10, 42, 43, 44, 34,\n+\t\t\t     7, 48, 3, 35, 9, 8, 7, 13 }),\n+\t\t ((vnx8hi) { 3, 4, 5, 6, 7, 8, 9, 10,\n+\t\t\t     11, 12, 13, 14, 15, 16, 17, 18 }),\n+\t\t ((vnx8hi) { 33, 34, 35, 36, 37, 38, 39, 40,\n+\t\t\t     41, 42, 43, 44, 45, 46, 47, 48 }),\n+\t\t ((vnx8hi) { 9 + (32 * 2), 13 + (32 * 2),\n+\t\t\t     15 + (32 * 8), 7 + (32 * 9),\n+\t\t\t     25 + (32 * 4), 26 + (32 * 3),\n+\t\t\t     27 + (32 * 1), 17 + (32 * 2),\n+\t\t\t     4 + (32 * 6), 31 + (32 * 7),\n+\t\t\t     0 + (32 * 8), 18 + (32 * 9),\n+\t\t\t     6 + (32 * 6), 5 + (32 * 7),\n+\t\t\t     4 + (32 * 2), 10 + (32 * 2) }));\n+  TEST_VEC_PERM (vnx16qi, vnx16qi,\n+\t\t ((vnx16qi) { 5, 6, 7, 4, 5, 6, 4, 5,\n+\t\t\t      6, 7, 12, 24, 36, 48, 12, 24,\n+\t\t\t      5, 6, 7, 4, 5, 6, 4, 5,\n+\t\t\t      6, 7, 12, 24, 36, 48, 12, 24 }),\n+\t\t ((vnx16qi) { 4, 5, 6, 7, 4, 5, 6, 7,\n+\t\t\t      4, 5, 6, 7, 4, 5, 6, 7,\n+\t\t\t      4, 5, 6, 7, 4, 5, 6, 7,\n+\t\t\t      4, 5, 6, 7, 4, 5, 6, 7 }),\n+\t\t ((vnx16qi) { 12, 24, 36, 48, 12, 24, 36, 48,\n+\t\t\t      12, 24, 36, 48, 12, 24, 36, 48,\n+\t\t\t      12, 24, 36, 48, 12, 24, 36, 48,\n+\t\t\t      12, 24, 36, 48, 12, 24, 36, 48 }),\n+\t\t ((vnx16qi) { 5 + (64 * 3), 6 + (64 * 1),\n+\t\t\t      7 + (64 * 2), 8 + (64 * 1),\n+\t\t\t      9 + (64 * 3), 10 + (64 * 1),\n+\t\t\t      28 + (64 * 3), 29 + (64 * 3),\n+\t\t\t      30 + (64 * 1), 31 + (64 * 1),\n+\t\t\t      32 + (64 * 3), 33 + (64 * 2),\n+\t\t\t      54 + (64 * 2), 55 + (64 * 2),\n+\t\t\t      56 + (64 * 1), 61 + (64 * 2),\n+\t\t\t      5 + (64 * 2), 6 + (64 * 1),\n+\t\t\t      7 + (64 * 2), 8 + (64 * 2),\n+\t\t\t      9 + (64 * 2), 10 + (64 * 1),\n+\t\t\t      28 + (64 * 3), 29 + (64 * 1),\n+\t\t\t      30 + (64 * 3), 31 + (64 * 3),\n+\t\t\t      32 + (64 * 1), 33 + (64 * 1),\n+\t\t\t      54 + (64 * 2), 55 + (64 * 2),\n+\t\t\t      56 + (64 * 2), 61 + (64 * 2) }));\n+  TEST_VEC_PERM (vnx2df, vnx2di,\n+\t\t ((vnx2df) { 5.1, 36.1, 7.1, 48.1 }),\n+\t\t ((vnx2df) { 4.1, 5.1, 6.1, 7.1 }),\n+\t\t ((vnx2df) { 12.1, 24.1, 36.1, 48.1 }),\n+\t\t ((vnx2di) { 1 + (8 * 3), 6 + (8 * 10),\n+\t\t\t     3 + (8 * 8), 7 + (8 * 2) }));\n+  TEST_VEC_PERM (vnx4sf, vnx4si,\n+\t\t ((vnx4sf) { 34.2, 38.2, 40.2, 10.2, 9.2, 8.2, 7.2, 35.2 }),\n+\t\t ((vnx4sf) { 3.2, 4.2, 5.2, 6.2, 7.2, 8.2, 9.2, 10.2 }),\n+\t\t ((vnx4sf) { 33.2, 34.2, 35.2, 36.2,\n+\t\t\t     37.2, 38.2, 39.2, 40.2 }),\n+\t\t ((vnx4si) { 9 + (16 * 1), 13 + (16 * 5),\n+\t\t\t     15 + (16 * 4), 7 + (16 * 4),\n+\t\t\t     6 + (16 * 3), 5 + (16 * 2),\n+\t\t\t     4 + (16 * 1), 10 + (16 * 0) }));\n+  TEST_VEC_PERM (vnx8hf, vnx8hi,\n+\t\t ((vnx8hf) { 12.0, 16.0, 18.0, 10.0, 42.0, 43.0, 44.0, 34.0,\n+\t\t\t     7.0, 48.0, 3.0, 35.0, 9.0, 8.0, 7.0, 13.0 }),\n+\t\t ((vnx8hf) { 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,\n+\t\t\t     11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0 }),\n+\t\t ((vnx8hf) { 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0,\n+\t\t\t     41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0 }),\n+\t\t ((vnx8hi) { 9 + (32 * 2), 13 + (32 * 2),\n+\t\t\t     15 + (32 * 8), 7 + (32 * 9),\n+\t\t\t     25 + (32 * 4), 26 + (32 * 3),\n+\t\t\t     27 + (32 * 1), 17 + (32 * 2),\n+\t\t\t     4 + (32 * 6), 31 + (32 * 7),\n+\t\t\t     0 + (32 * 8), 18 + (32 * 9),\n+\t\t\t     6 + (32 * 6), 5 + (32 * 7),\n+\t\t\t     4 + (32 * 2), 10 + (32 * 2) }));\n+  return 0;\n+}"}, {"sha": "bed57f5b09f02ef18c834b8b9f1bef6c6b9e4fd2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vec_perm_1_run.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O\" } */\n+/* { dg-options \"-O -msve-vector-bits=256\" { target aarch64_sve256_hw } } */\n+\n+#include \"vec_perm_1.c\"\n+\n+#define TEST_VEC_PERM(TYPE, MASK_TYPE, EXPECTED_RESULT,\t\t\t\\\n+\t\t      VALUES1, VALUES2, MASK)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  TYPE expected_result = EXPECTED_RESULT;\t\t\t\t\\\n+  TYPE values1 = VALUES1;\t\t\t\t\t\t\\\n+  TYPE values2 = VALUES2;\t\t\t\t\t\t\\\n+  MASK_TYPE mask = MASK;\t\t\t\t\t\t\\\n+  TYPE dest;\t\t\t\t\t\t\t\t\\\n+  dest = vec_perm_##TYPE (values1, values2, mask);\t\t\t\\\n+  if (__builtin_memcmp (&dest, &expected_result, sizeof (TYPE)) != 0)\t\\\n+    __builtin_abort ();\t\t\t\t\t\t\t\\\n+}\n+\n+int main (void)\n+{\n+  TEST_VEC_PERM (vnx2di, vnx2di,\n+\t\t ((vnx2di) { 5, 36, 7, 48 }),\n+\t\t ((vnx2di) { 4, 5, 6, 7 }),\n+\t\t ((vnx2di) { 12, 24, 36, 48 }),\n+\t\t ((vnx2di) { 1, 6, 3, 7 }));\n+  TEST_VEC_PERM (vnx4si, vnx4si,\n+\t\t ((vnx4si) { 34, 38, 40, 10, 9, 8, 7, 35 }),\n+\t\t ((vnx4si) { 3, 4, 5, 6, 7, 8, 9, 10 }),\n+\t\t ((vnx4si) { 33, 34, 35, 36, 37, 38, 39, 40 }),\n+\t\t ((vnx4si) { 9, 13, 15, 7, 6, 5, 4, 10 }));\n+  TEST_VEC_PERM (vnx8hi, vnx8hi,\n+\t\t ((vnx8hi) { 12, 16, 18, 10, 42, 43, 44, 34,\n+\t\t\t     7, 48, 3, 35, 9, 8, 7, 13 }),\n+\t\t ((vnx8hi) { 3, 4, 5, 6, 7, 8, 9, 10,\n+\t\t\t     11, 12, 13, 14, 15, 16, 17, 18 }),\n+\t\t ((vnx8hi) { 33, 34, 35, 36, 37, 38, 39, 40,\n+\t\t\t     41, 42, 43, 44, 45, 46, 47, 48 }),\n+\t\t ((vnx8hi) { 9, 13, 15, 7, 25, 26, 27, 17,\n+\t\t\t     4, 31, 0, 18, 6, 5, 4, 10 }));\n+  TEST_VEC_PERM (vnx16qi, vnx16qi,\n+\t\t ((vnx16qi) { 5, 6, 7, 4, 5, 6, 4, 5,\n+\t\t\t      6, 7, 12, 24, 36, 48, 12, 24,\n+\t\t\t      5, 6, 7, 4, 5, 6, 4, 5,\n+\t\t\t      6, 7, 12, 24, 36, 48, 12, 24 }),\n+\t\t ((vnx16qi) { 4, 5, 6, 7, 4, 5, 6, 7,\n+\t\t\t      4, 5, 6, 7, 4, 5, 6, 7,\n+\t\t\t      4, 5, 6, 7, 4, 5, 6, 7,\n+\t\t\t      4, 5, 6, 7, 4, 5, 6, 7 }),\n+\t\t ((vnx16qi) { 12, 24, 36, 48, 12, 24, 36, 48,\n+\t\t\t      12, 24, 36, 48, 12, 24, 36, 48,\n+\t\t\t      12, 24, 36, 48, 12, 24, 36, 48,\n+\t\t\t      12, 24, 36, 48, 12, 24, 36, 48 }),\n+\t\t ((vnx16qi) { 5, 6, 7, 8, 9, 10, 28, 29,\n+\t\t\t      30, 31, 32, 33, 54, 55, 56, 61,\n+\t\t\t      5, 6, 7, 8, 9, 10, 28, 29,\n+\t\t\t      30, 31, 32, 33, 54, 55, 56, 61 }));\n+  TEST_VEC_PERM (vnx2df, vnx2di,\n+\t\t ((vnx2df) { 5.1, 36.1, 7.1, 48.1 }),\n+\t\t ((vnx2df) { 4.1, 5.1, 6.1, 7.1 }),\n+\t\t ((vnx2df) { 12.1, 24.1, 36.1, 48.1 }),\n+\t\t ((vnx2di) { 1, 6, 3, 7 }));\n+  TEST_VEC_PERM (vnx4sf, vnx4si,\n+\t\t ((vnx4sf) { 34.2, 38.2, 40.2, 10.2, 9.2, 8.2, 7.2, 35.2 }),\n+\t\t ((vnx4sf) { 3.2, 4.2, 5.2, 6.2, 7.2, 8.2, 9.2, 10.2 }),\n+\t\t ((vnx4sf) { 33.2, 34.2, 35.2, 36.2,\n+\t\t\t     37.2, 38.2, 39.2, 40.2 }),\n+\t\t ((vnx4si) { 9, 13, 15, 7, 6, 5, 4, 10 }));\n+  TEST_VEC_PERM (vnx8hf, vnx8hi,\n+\t\t ((vnx8hf) { 12.0, 16.0, 18.0, 10.0, 42.0, 43.0, 44.0, 34.0,\n+\t\t\t     7.0, 48.0, 3.0, 35.0, 9.0, 8.0, 7.0, 13.0 }),\n+\t\t ((vnx8hf) { 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,\n+\t\t\t     11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0 }),\n+\t\t ((vnx8hf) { 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0,\n+\t\t\t     41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0 }),\n+\t\t ((vnx8hi) { 9, 13, 15, 7, 25, 26, 27, 17,\n+\t\t\t     4, 31, 0, 18, 6, 5, 4, 10 }));\n+  return 0;\n+}"}, {"sha": "3194342f280ac8ab574556d87ab411bc537cf48b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vec_perm_const_1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_const_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_const_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_const_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -msve-vector-bits=256\" } */\n+\n+#include <stdint.h>\n+\n+typedef int64_t vnx2di __attribute__((vector_size (32)));\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+typedef int16_t vnx8hi __attribute__((vector_size (32)));\n+typedef int8_t vnx16qi __attribute__((vector_size (32)));\n+typedef double vnx2df __attribute__((vector_size (32)));\n+typedef float vnx4sf __attribute__((vector_size (32)));\n+typedef _Float16 vnx8hf __attribute__((vector_size (32)));\n+\n+#define VEC_PERM_CONST(TYPE, MASK)\t\t\t\\\n+TYPE __attribute__ ((noinline, noclone)) \t\t\\\n+vec_perm_##TYPE (TYPE values1, TYPE values2)\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  return __builtin_shuffle (values1, values2, MASK);\t\\\n+}\n+\n+VEC_PERM_CONST (vnx2di,  ((vnx2di)  { 4, 3, 6, 1 }));\n+VEC_PERM_CONST (vnx4si,  ((vnx4si)  { 3, 9, 11, 12, 2, 4, 4, 2 }));\n+VEC_PERM_CONST (vnx8hi,  ((vnx8hi)  { 8, 27, 5, 4, 21, 12, 13, 0,\n+\t\t\t\t      22, 1, 8, 9, 3, 24, 15, 1 }));\n+VEC_PERM_CONST (vnx16qi, ((vnx16qi) { 13, 31, 11, 2, 48, 28, 3, 4,\n+\t\t\t\t      54, 11, 30, 1, 0, 61, 2, 3,\n+\t\t\t\t      4, 5, 11, 63, 24, 11, 42, 39,\n+\t\t\t\t      2, 57, 22, 11, 6, 16, 18, 21 }));\n+VEC_PERM_CONST (vnx2df,  ((vnx2di) { 7, 3, 2, 1 }));\n+VEC_PERM_CONST (vnx4sf,  ((vnx4si) { 1, 9, 13, 11, 2, 5, 4, 2 }));\n+VEC_PERM_CONST (vnx8hf,  ((vnx8hi) { 8, 27, 5, 4, 21, 12, 13, 0,\n+\t\t\t\t     22, 1, 8, 9, 3, 24, 15, 1 }));\n+\n+/* { dg-final { scan-assembler-times {\\ttbl\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\ttbl\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\ttbl\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\ttbl\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b\\n} 2 } } */"}, {"sha": "b0732d0cc7707afd2f2d5537c4653b1328992314", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vec_perm_const_1_overrun.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_const_1_overrun.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_const_1_overrun.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_const_1_overrun.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -msve-vector-bits=256\" } */\n+\n+#include <stdint.h>\n+\n+typedef int64_t vnx2di __attribute__((vector_size (32)));\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+typedef int16_t vnx8hi __attribute__((vector_size (32)));\n+typedef int8_t vnx16qi __attribute__((vector_size (32)));\n+typedef double vnx2df __attribute__((vector_size (32)));\n+typedef float vnx4sf __attribute__((vector_size (32)));\n+typedef _Float16 vnx8hf __attribute__((vector_size (32)));\n+\n+#define VEC_PERM_CONST_OVERRUN(TYPE, MASK)\t\t\t\\\n+TYPE vec_perm_overrun_##TYPE (TYPE values1, TYPE values2)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  return __builtin_shuffle (values1, values2, MASK);\t\t\\\n+}\n+\n+VEC_PERM_CONST_OVERRUN (vnx2di,  ((vnx2di)  { 4 + (8 * 1), 3 + (8 * 1),\n+\t\t\t\t\t      6 + (8 * 2), 1 + (8 * 3) }));\n+VEC_PERM_CONST_OVERRUN (vnx4si,  ((vnx4si)  { 3 + (16 * 3), 9 + (16 * 4),\n+\t\t\t\t\t      11 + (16 * 5), 12 + (16 * 3),\n+\t\t\t\t\t      2 + (16 * 2), 4 + (16 * 1),\n+\t\t\t\t\t      4 + (16 * 2), 2 + (16 * 1) }));\n+VEC_PERM_CONST_OVERRUN (vnx8hi,  ((vnx8hi)  { 8 + (32 * 3), 27 + (32 * 1),\n+\t\t\t\t\t      5 + (32 * 3), 4 + (32 * 3),\n+\t\t\t\t\t      21 + (32 * 1), 12 + (32 * 3),\n+\t\t\t\t\t      13 + (32 * 3), 0 + (32 * 1),\n+\t\t\t\t\t      22 + (32 * 2), 1 + (32 * 2),\n+\t\t\t\t\t      8 + (32 * 2), 9 + (32 * 1),\n+\t\t\t\t\t      3 + (32 * 2), 24 + (32 * 2),\n+\t\t\t\t\t      15 + (32 * 1), 1 + (32 * 1) }));\n+VEC_PERM_CONST_OVERRUN (vnx16qi, ((vnx16qi) { 13 + (64 * 2), 31 + (64 * 2),\n+\t\t\t\t\t      11 + (64 * 2), 2 + (64 * 1),\n+\t\t\t\t\t      48 + (64 * 1), 28 + (64 * 2),\n+\t\t\t\t\t      3 + (64 * 2), 4 + (64 * 3),\n+\t\t\t\t\t      54 + (64 * 1), 11 + (64 * 2),\n+\t\t\t\t\t      30 + (64 * 2), 1 + (64 * 1),\n+\t\t\t\t\t      0 + (64 * 1), 61 + (64 * 2),\n+\t\t\t\t\t      2 + (64 * 3), 3 + (64 * 2),\n+\t\t\t\t\t      4 + (64 * 3), 5 + (64 * 3),\n+\t\t\t\t\t      11 + (64 * 3), 63 + (64 * 1),\n+\t\t\t\t\t      24 + (64 * 1), 11 + (64 * 3),\n+\t\t\t\t\t      42 + (64 * 3), 39 + (64 * 2),\n+\t\t\t\t\t      2 + (64 * 2), 57 + (64 * 3),\n+\t\t\t\t\t      22 + (64 * 3), 11 + (64 * 2),\n+\t\t\t\t\t      6 + (64 * 2), 16 + (64 * 2),\n+\t\t\t\t\t      18 + (64 * 2), 21 + (64 * 3) }));\n+VEC_PERM_CONST_OVERRUN (vnx2df,  ((vnx2di)  { 7 + (8 * 1), 3 + (8 * 3),\n+\t\t\t\t\t      2 + (8 * 5), 1 + (8 * 3) }));\n+VEC_PERM_CONST_OVERRUN (vnx4sf,  ((vnx4si)  { 1 + (16 * 1), 9 + (16 * 2),\n+\t\t\t\t\t      13 + (16 * 2), 11 + (16 * 3),\n+\t\t\t\t\t      2 + (16 * 2), 5 + (16 * 2),\n+\t\t\t\t\t      4 + (16 * 4), 2 + (16 * 3) }));\n+VEC_PERM_CONST_OVERRUN (vnx8hf,  ((vnx8hi)  { 8 + (32 * 3), 27 + (32 * 1),\n+\t\t\t\t\t      5 + (32 * 3), 4 + (32 * 3),\n+\t\t\t\t\t      21 + (32 * 1), 12 + (32 * 3),\n+\t\t\t\t\t      13 + (32 * 3), 0 + (32 * 1),\n+\t\t\t\t\t      22 + (32 * 2), 1 + (32 * 2),\n+\t\t\t\t\t      8 + (32 * 2), 9 + (32 * 1),\n+\t\t\t\t\t      3 + (32 * 2), 24 + (32 * 2),\n+\t\t\t\t\t      15 + (32 * 1), 1 + (32 * 1) }));\n+\n+/* { dg-final { scan-assembler-times {\\ttbl\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\ttbl\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\ttbl\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\ttbl\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b\\n} 2 } } */"}, {"sha": "72ddf65839f2a1d0f384dc48fd50f6fecfda8e1a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vec_perm_const_1_run.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_const_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_const_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_const_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O\" } */\n+/* { dg-options \"-O -msve-vector-bits=256\" { target aarch64_sve256_hw } } */\n+\n+#include \"vec_perm_const_1.c\"\n+#include \"vec_perm_const_1_overrun.c\"\n+\n+#define TEST_VEC_PERM(TYPE, EXPECTED_RESULT, VALUES1, VALUES2)\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  TYPE expected_result = EXPECTED_RESULT;\t\t\t\t\\\n+  TYPE values1 = VALUES1;\t\t\t\t\t\t\\\n+  TYPE values2 = VALUES2;\t\t\t\t\t\t\\\n+  TYPE dest;\t\t\t\t\t\t\t\t\\\n+  dest = vec_perm_##TYPE (values1, values2);\t\t\t\t\\\n+  if (__builtin_memcmp (&dest, &expected_result, sizeof (TYPE)) != 0)\t\\\n+    __builtin_abort ();\t\t\t\t\t\t\t\\\n+  TYPE dest2;\t\t\t\t\t\t\t\t\\\n+  dest2 = vec_perm_overrun_##TYPE (values1, values2);\t\t\t\\\n+  if (__builtin_memcmp (&dest, &expected_result, sizeof (TYPE)) != 0)\t\\\n+    __builtin_abort ();\t\t\t\t\t\t\t\\\n+}\n+\n+int main (void)\n+{\n+  TEST_VEC_PERM (vnx2di,\n+\t\t ((vnx2di) { 12, 7, 36, 5 }),\n+\t\t ((vnx2di) { 4, 5, 6, 7 }),\n+\t\t ((vnx2di) { 12, 24, 36, 48 }));\n+  TEST_VEC_PERM (vnx4si,\n+\t\t ((vnx4si) { 6, 34, 36, 37, 5, 7, 7, 5 }),\n+\t\t ((vnx4si) { 3, 4, 5, 6, 7, 8, 9, 10 }),\n+\t\t ((vnx4si) { 33, 34, 35, 36, 37, 38, 39, 40 }));\n+  TEST_VEC_PERM (vnx8hi,\n+\t\t ((vnx8hi) { 11, 44, 8, 7, 38, 15, 16, 3,\n+\t\t\t     39, 4, 11, 12, 6, 41, 18, 4 }),\n+\t\t ((vnx8hi) { 3, 4, 5, 6, 7, 8, 9, 10, 11,\n+\t\t\t     12, 13, 14, 15, 16, 17, 18 }),\n+\t\t ((vnx8hi) { 33, 34, 35, 36, 37, 38, 39, 40,\n+\t\t\t     41, 42, 43, 44, 45, 46, 47, 48 }));\n+  TEST_VEC_PERM (vnx16qi,\n+\t\t ((vnx16qi) { 5, 7, 7, 6, 12, 4, 7, 4,\n+\t\t\t      36, 7, 6, 5, 4, 24, 6, 7,\n+\t\t\t      4, 5, 7, 48, 4, 7, 36, 48,\n+\t\t\t      6, 24, 6, 7, 6, 4, 6, 5 }),\n+\t\t ((vnx16qi) { 4, 5, 6, 7, 4, 5, 6, 7,\n+\t\t\t      4, 5, 6, 7, 4, 5, 6, 7,\n+\t\t\t      4, 5, 6, 7, 4, 5, 6, 7,\n+\t\t\t      4, 5, 6, 7, 4, 5, 6, 7 }),\n+\t\t ((vnx16qi) { 12, 24, 36, 48, 12, 24, 36, 48,\n+\t\t\t      12, 24, 36, 48, 12, 24, 36, 48,\n+\t\t\t      12, 24, 36, 48, 12, 24, 36, 48,\n+\t\t\t      12, 24, 36, 48, 12, 24, 36, 48 }));\n+  TEST_VEC_PERM (vnx2df,\n+\t\t ((vnx2df) { 48.5, 7.5, 6.5, 5.5 }),\n+\t\t ((vnx2df) { 4.5, 5.5, 6.5, 7.5 }),\n+\t\t ((vnx2df) { 12.5, 24.5, 36.5, 48.5 }));\n+  TEST_VEC_PERM (vnx4sf,\n+\t\t ((vnx4sf) { 4.5, 34.5, 38.5, 36.5, 5.5, 8.5, 7.5, 5.5 }),\n+\t\t ((vnx4sf) { 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5 }),\n+\t\t ((vnx4sf) { 33.5, 34.5, 35.5, 36.5,\n+\t\t\t     37.5, 38.5, 39.5, 40.5 }));\n+  TEST_VEC_PERM (vnx8hf,\n+\t\t ((vnx8hf) { 11.0, 44.0, 8.0, 7.0, 38.0, 15.0, 16.0, 3.0,\n+\t\t\t     39.0, 4.0, 11.0, 12.0, 6.0, 41.0, 18.0, 4.0 }),\n+\t\t ((vnx8hf) { 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\n+\t\t\t     12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0 }),\n+\t\t ((vnx8hf) { 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0,\n+\t\t\t     41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0 }));\n+  return 0;\n+}"}, {"sha": "61122ba11b8ff29ac81dd7eb44043db3341c2f87", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vec_perm_const_single_1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_const_single_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_const_single_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_const_single_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -msve-vector-bits=256\" } */\n+\n+#include <stdint.h>\n+\n+typedef int64_t vnx2di __attribute__((vector_size (32)));\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+typedef int16_t vnx8hi __attribute__((vector_size (32)));\n+typedef int8_t vnx16qi __attribute__((vector_size (32)));\n+typedef double vnx2df __attribute__((vector_size (32)));\n+typedef float vnx4sf __attribute__((vector_size (32)));\n+typedef _Float16 vnx8hf __attribute__((vector_size (32)));\n+\n+#define VEC_PERM_SINGLE(TYPE, MASK)\t\t\t\\\n+TYPE vec_perm_##TYPE (TYPE values1, TYPE values2)\t\\\n+{\t\t\t\t\t\t\t\\\n+  return __builtin_shuffle (values1, values2, MASK);\t\\\n+}\n+\n+VEC_PERM_SINGLE (vnx2di,  ((vnx2di)  { 0, 3, 2, 1 }));\n+VEC_PERM_SINGLE (vnx4si,  ((vnx4si)  { 3, 7, 1, 0, 2, 4, 4, 2 }));\n+VEC_PERM_SINGLE (vnx8hi,  ((vnx8hi)  { 8, 7, 5, 4, 11, 12, 13, 0,\n+\t\t\t\t       1, 1, 8, 9, 3, 14, 15, 1 }));\n+VEC_PERM_SINGLE (vnx16qi, ((vnx16qi) { 13, 21, 11, 2, 8, 28, 3, 4,\n+\t\t\t\t       14, 11, 30, 1, 0, 31, 2, 3,\n+\t\t\t\t       4, 5, 11, 23, 24, 11, 12, 9,\n+\t\t\t\t       2, 7, 22, 11, 6, 16, 18, 21 }));\n+VEC_PERM_SINGLE (vnx2df,  ((vnx2di)  { 3, 3, 1, 1 }));\n+VEC_PERM_SINGLE (vnx4sf,  ((vnx4si)  { 4, 5, 6, 0, 2, 7, 4, 2 }));\n+VEC_PERM_SINGLE (vnx8hf,  ((vnx8hi)  { 8, 7, 5, 4, 11, 12, 13, 0,\n+\t\t\t\t       1, 1, 8, 9, 3, 14, 15, 1 }));\n+\n+/* { dg-final { scan-assembler-times {\\ttbl\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\ttbl\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\ttbl\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\ttbl\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */"}, {"sha": "6c8e20d1c0f222d069113c1ddb3be465b05cf596", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vec_perm_const_single_1_run.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_const_single_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_const_single_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_const_single_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O\" } */\n+/* { dg-options \"-O -msve-vector-bits=256\" { target aarch64_sve256_hw } } */\n+\n+#include \"vec_perm_const_single_1.c\"\n+\n+#define TEST_VEC_PERM(TYPE, EXPECTED_RESULT, VALUES1, VALUES2)\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  TYPE expected_result = EXPECTED_RESULT;\t\t\t\t\\\n+  TYPE values1 = VALUES1;\t\t\t\t\t\t\\\n+  TYPE values2 = VALUES2;\t\t\t\t\t\t\\\n+  TYPE dest;\t\t\t\t\t\t\t\t\\\n+  dest = vec_perm_##TYPE (values1, values2);\t\t\t\t\\\n+  if (__builtin_memcmp (&dest, &expected_result, sizeof (TYPE)) != 0)\t\\\n+    __builtin_abort ();\t\t\t\t\t\t\t\\\n+}\n+\n+int main (void)\n+{\n+  TEST_VEC_PERM (vnx2di,\n+\t\t ((vnx2di) { 4, 7, 6, 5 }),\n+\t\t ((vnx2di) { 4, 5, 6, 7 }),\n+\t\t ((vnx2di) { 12, 24, 36, 48 }));\n+  TEST_VEC_PERM (vnx4si,\n+\t\t ((vnx4si) { 6, 10, 4, 3, 5, 7, 7, 5 }),\n+\t\t ((vnx4si) { 3, 4, 5, 6, 7, 8, 9, 10 }),\n+\t\t ((vnx4si) { 33, 34, 35, 36, 37, 38, 39, 40 }));\n+  TEST_VEC_PERM (vnx8hi,\n+\t\t ((vnx8hi) { 11, 10, 8, 7, 14, 15, 16, 3,\n+\t\t\t     4, 4, 11, 12, 6, 17, 18, 4 }),\n+\t\t ((vnx8hi) { 3, 4, 5, 6, 7, 8, 9, 10,\n+\t\t\t     11, 12, 13, 14, 15, 16, 17, 18 }),\n+\t\t ((vnx8hi) { 33, 34, 35, 36, 37, 38, 39, 40,\n+\t\t\t     41, 42, 43, 44, 45, 46, 47, 48 }));\n+  TEST_VEC_PERM (vnx16qi,\n+\t\t ((vnx16qi) { 5, 5, 7, 6, 4, 4, 7, 4,\n+\t\t\t      6, 7, 6, 5, 4, 7, 6, 7,\n+\t\t\t      4, 5, 7, 7, 4, 7, 4, 5,\n+\t\t\t      6, 7, 6, 7, 6, 4, 6, 5 }),\n+\t\t ((vnx16qi) { 4, 5, 6, 7, 4, 5, 6, 7,\n+\t\t\t      4, 5, 6, 7, 4, 5, 6, 7,\n+\t\t\t      4, 5, 6, 7, 4, 5, 6, 7,\n+\t\t\t      4, 5, 6, 7, 4, 5, 6, 7 }),\n+\t\t ((vnx16qi) { 12, 24, 36, 48, 12, 24, 36, 48,\n+\t\t\t      12, 24, 36, 48, 12, 24, 36, 48,\n+\t\t\t      12, 24, 36, 48, 12, 24, 36, 48,\n+\t\t\t      12, 24, 36, 48, 12, 24, 36, 48 }));\n+  TEST_VEC_PERM (vnx2df,\n+\t\t ((vnx2df) { 7.5, 7.5, 5.5, 5.5 }),\n+\t\t ((vnx2df) { 4.5, 5.5, 6.5, 7.5 }),\n+\t\t ((vnx2df) { 12.5, 24.5, 36.5, 48.5 }));\n+  TEST_VEC_PERM (vnx4sf,\n+\t\t ((vnx4sf) { 7.5, 8.5, 9.5, 3.5, 5.5, 10.5, 7.5, 5.5 }),\n+\t\t ((vnx4sf) { 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5 }),\n+\t\t ((vnx4sf) { 33.5, 34.5, 35.5, 36.5,\n+\t\t\t     37.5, 38.5, 39.5, 40.5 }));\n+  TEST_VEC_PERM (vnx8hf,\n+\t\t ((vnx8hf) { 11.0, 10.0, 8.0, 7.0, 14.0, 15.0, 16.0, 3.0,\n+\t\t\t     4.0, 4.0, 11.0, 12.0, 6.0, 17.0, 18.0, 4.0 }),\n+\t\t ((vnx8hf) { 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,\n+\t\t\t     11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0 }),\n+\t\t ((vnx8hf) { 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0,\n+\t\t\t     41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0 }));\n+  return 0;\n+}"}, {"sha": "41646d3c20d2e1d866693ca85a75373d7ad4eb96", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vec_perm_single_1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_single_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_single_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_single_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -msve-vector-bits=256\" } */\n+\n+#include <stdint.h>\n+\n+typedef int64_t vnx2di __attribute__((vector_size (32)));\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+typedef int16_t vnx8hi __attribute__((vector_size (32)));\n+typedef int8_t vnx16qi __attribute__((vector_size (32)));\n+typedef double vnx2df __attribute__((vector_size (32)));\n+typedef float vnx4sf __attribute__((vector_size (32)));\n+typedef _Float16 vnx8hf __attribute__((vector_size (32)));\n+\n+#define VEC_PERM(TYPE, MASKTYPE)\t\t\t\\\n+TYPE vec_perm_##TYPE (TYPE values, MASKTYPE mask)\t\\\n+{\t\t\t\t\t\t\t\\\n+  return __builtin_shuffle (values, mask);\t\t\\\n+}\n+\n+VEC_PERM (vnx2di, vnx2di)\n+VEC_PERM (vnx4si, vnx4si)\n+VEC_PERM (vnx8hi, vnx8hi)\n+VEC_PERM (vnx16qi, vnx16qi)\n+VEC_PERM (vnx2df, vnx2di)\n+VEC_PERM (vnx4sf, vnx4si)\n+VEC_PERM (vnx8hf, vnx8hi)\n+\n+/* { dg-final { scan-assembler-times {\\ttbl\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\ttbl\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\ttbl\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\ttbl\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */"}, {"sha": "eaa6a8854c9cb52af60f2d06dab4d5ab6c2ecaa8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vec_perm_single_1_run.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_single_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_single_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvec_perm_single_1_run.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O\" } */\n+/* { dg-options \"-O -msve-vector-bits=256\" { target aarch64_sve256_hw } } */\n+\n+#include \"vec_perm_single_1.c\"\n+extern void abort (void);\n+\n+#define TEST_VEC_PERM(TYPE, MASK_TYPE, EXPECTED_RESULT, VALUES, MASK)\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  TYPE expected_result = EXPECTED_RESULT;\t\t\t\t\\\n+  TYPE values = VALUES;\t\t\t\t\t\t\t\\\n+  MASK_TYPE mask = MASK;\t\t\t\t\t\t\\\n+  TYPE dest;\t\t\t\t\t\t\t\t\\\n+  dest = vec_perm_##TYPE (values, mask);\t\t\t\t\\\n+  if (__builtin_memcmp (&dest, &expected_result, sizeof (TYPE)) != 0)\t\\\n+    __builtin_abort ();\t\t\t\t\t\t\t\\\n+}\n+\n+int main (void)\n+{\n+  TEST_VEC_PERM (vnx2di, vnx2di,\n+\t\t ((vnx2di) { 5, 6, 7, 5 }),\n+\t\t ((vnx2di) { 4, 5, 6, 7 }),\n+\t\t ((vnx2di) { 1, 6, 3, 5 }));\n+  TEST_VEC_PERM (vnx4si, vnx4si,\n+\t\t ((vnx4si) { 4, 8, 10, 10, 9, 8, 7, 5 }),\n+\t\t ((vnx4si) { 3, 4, 5, 6, 7, 8, 9, 10 }),\n+\t\t ((vnx4si) { 9, 13, 15, 7, 6, 5, 4, 10 }));\n+  TEST_VEC_PERM (vnx8hi, vnx8hi,\n+\t\t ((vnx8hi) { 12, 16, 18, 10, 12, 13, 14, 4,\n+\t\t\t     7, 18, 3, 5, 9, 8, 7, 13 }),\n+\t\t ((vnx8hi) { 3, 4, 5, 6, 7, 8, 9, 10,\n+\t\t\t     11, 12, 13, 14, 15, 16, 17, 18 }),\n+\t\t ((vnx8hi) { 9, 13, 15, 7, 25, 26, 27, 17,\n+\t\t\t     4, 31, 0, 18, 6, 5, 4, 10 }));\n+  TEST_VEC_PERM (vnx16qi, vnx16qi,\n+\t\t ((vnx16qi) { 5, 6, 7, 4, 5, 6, 4, 5,\n+\t\t\t      6, 7, 4, 5, 6, 7, 4, 5,\n+\t\t\t      5, 6, 7, 4, 5, 6, 4, 5,\n+\t\t\t      6, 7, 4, 5, 6, 7, 4, 5 }),\n+\t\t ((vnx16qi) { 4, 5, 6, 7, 4, 5, 6, 7,\n+\t\t\t      4, 5, 6, 7, 4, 5, 6, 7,\n+\t\t\t      4, 5, 6, 7, 4, 5, 6, 7,\n+\t\t\t      4, 5, 6, 7, 4, 5, 6, 7 }),\n+\t\t ((vnx16qi) { 5, 6, 7, 8, 9, 10, 28, 29,\n+\t\t\t      30, 31, 32, 33, 54, 55, 56, 61,\n+\t\t\t      5, 6, 7, 8, 9, 10, 28, 29,\n+\t\t\t      30, 31, 32, 33, 54, 55, 56, 61 }));\n+  TEST_VEC_PERM (vnx2df, vnx2di,\n+\t\t ((vnx2df) { 5.1, 6.1, 7.1, 5.1 }),\n+\t\t ((vnx2df) { 4.1, 5.1, 6.1, 7.1 }),\n+\t\t ((vnx2di) { 1, 6, 3, 5 }));\n+  TEST_VEC_PERM (vnx4sf, vnx4si,\n+\t\t ((vnx4sf) { 4.2, 8.2, 10.2, 10.2, 9.2, 8.2, 7.2, 5.2 }),\n+\t\t ((vnx4sf) { 3.2, 4.2, 5.2, 6.2, 7.2, 8.2, 9.2, 10.2 }),\n+\t\t ((vnx4si) { 9, 13, 15, 7, 6, 5, 4, 10 }));\n+  TEST_VEC_PERM (vnx8hf, vnx8hi,\n+\t\t ((vnx8hf) { 12.0, 16.0, 18.0, 10.0, 12.0, 13.0, 14.0, 4.0,\n+\t\t\t     7.0, 18.0, 3.0, 5.0, 9.0, 8.0, 7.0, 13.0 }),\n+\t\t ((vnx8hf) { 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,\n+\t\t\t     11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0 }),\n+\t\t ((vnx8hi) { 9, 13, 15, 7, 25, 26, 27, 17,\n+\t\t\t     4, 31, 0, 18, 6, 5, 4, 10 }));\n+  return 0;\n+}"}, {"sha": "051df311a3ef753480c2c70324381f59213bb387", "filename": "gcc/testsuite/gcc.target/aarch64/sve/zip1_1.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fzip1_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fzip1_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fzip1_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -msve-vector-bits=256\" } */\n+\n+#ifndef BIAS\n+#define BIAS 0\n+#endif\n+\n+#include <stdint.h>\n+\n+typedef int64_t vnx2di __attribute__((vector_size (32)));\n+typedef int32_t vnx4si __attribute__((vector_size (32)));\n+typedef int16_t vnx8hi __attribute__((vector_size (32)));\n+typedef int8_t vnx16qi __attribute__((vector_size (32)));\n+typedef double vnx2df __attribute__((vector_size (32)));\n+typedef float vnx4sf __attribute__((vector_size (32)));\n+typedef _Float16 vnx8hf __attribute__((vector_size (32)));\n+\n+#define MASK_2(X, Y) X, Y + X\n+#define MASK_4(X, Y) MASK_2 (X, Y), MASK_2 (X + 1, Y)\n+#define MASK_8(X, Y) MASK_4 (X, Y), MASK_4 (X + 2, Y)\n+#define MASK_16(X, Y) MASK_8 (X, Y), MASK_8 (X + 4, Y)\n+#define MASK_32(X, Y) MASK_16 (X, Y), MASK_16 (X + 8, Y)\n+\n+#define INDEX_4 vnx2di\n+#define INDEX_8 vnx4si\n+#define INDEX_16 vnx8hi\n+#define INDEX_32 vnx16qi\n+\n+#define PERMUTE(TYPE, NUNITS)\t\t\t\t\t\\\n+  TYPE permute_##TYPE (TYPE values1, TYPE values2)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return __builtin_shuffle\t\t\t\t\t\\\n+      (values1, values2,\t\t\t\t\t\\\n+       ((INDEX_##NUNITS) { MASK_##NUNITS (BIAS * (NUNITS / 2),\t\\\n+\t\t\t\t\t  NUNITS) }));\t\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  T (vnx2di, 4)\t\t\t\t\t\\\n+  T (vnx4si, 8)\t\t\t\t\t\\\n+  T (vnx8hi, 16)\t\t\t\t\\\n+  T (vnx16qi, 32)\t\t\t\t\\\n+  T (vnx2df, 4)\t\t\t\t\t\\\n+  T (vnx4sf, 8)\t\t\t\t\t\\\n+  T (vnx8hf, 16)\n+\n+TEST_ALL (PERMUTE)\n+\n+/* { dg-final { scan-assembler-not {\\ttbl\\t} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tzip1\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tzip1\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tzip1\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tzip1\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b} 1 } } */"}, {"sha": "85d545ab767e4501dc102154075951c154763184", "filename": "gcc/testsuite/gcc.target/aarch64/sve/zip2_1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fzip2_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fzip2_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fzip2_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -msve-vector-bits=256\" } */\n+\n+#define BIAS 1\n+#include \"zip1_1.c\"\n+\n+/* { dg-final { scan-assembler-not {\\ttbl\\t} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tzip2\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tzip2\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tzip2\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tzip2\\tz[0-9]+\\.b, z[0-9]+\\.b, z[0-9]+\\.b} 1 } } */"}, {"sha": "14dff87d7f057ce2b862a845481af9e9dded6421", "filename": "gcc/testsuite/gcc.target/aarch64/uaddw-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fuaddw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fuaddw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fuaddw-1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n int \n t6(int len, void * dummy, unsigned short * __restrict x)\n {"}, {"sha": "79d0d094fc3d152cdd8ef6cb5088564c2e01bc13", "filename": "gcc/testsuite/gcc.target/aarch64/uaddw-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fuaddw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fuaddw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fuaddw-2.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n int \n t6(int len, void * dummy, unsigned short * __restrict x)\n {"}, {"sha": "39cbd6b6cc238c613ac48a2ba1df9aa662f4421c", "filename": "gcc/testsuite/gcc.target/aarch64/uaddw-3.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fuaddw-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fuaddw-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fuaddw-3.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n int \n t6(int len, void * dummy, char * __restrict x)\n {"}, {"sha": "a327b632ef06872cfed62b3caf83a48cfe8b7bf4", "filename": "gcc/testsuite/gcc.target/aarch64/vect-add-sub-cond.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-add-sub-cond.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-add-sub-cond.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-add-sub-cond.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -3,6 +3,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n #define COUNT1(X) if (X) count += 1\n #define COUNT2(X) if (X) count -= 1\n #define COUNT3(X) count += (X)"}, {"sha": "82bc16f9ec9278ab8d1a8a329411868169b4b464", "filename": "gcc/testsuite/gcc.target/aarch64/vect-compile.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-compile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-compile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-compile.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,7 +1,8 @@\n-\n /* { dg-do compile } */\n /* { dg-options \"-O3\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n #include \"vect.x\"\n \n /* { dg-final { scan-assembler \"orn\\\\tv\" } } */"}, {"sha": "4d1a8b9af76963f3dfaf5a7f77d4abb1fd94a688", "filename": "gcc/testsuite/gcc.target/aarch64/vect-faddv-compile.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-faddv-compile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-faddv-compile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-faddv-compile.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,7 +1,8 @@\n-\n /* { dg-do compile } */\n /* { dg-options \"-O3 -ffast-math\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n #include \"vect-faddv.x\"\n \n /* { dg-final { scan-assembler-times \"faddp\\\\tv\" 2} } */"}, {"sha": "75dbf6369dd9bd9ceb27e476867e42b368443b18", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-eq-d.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-d.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-all -fno-unroll-loops --save-temps -fno-inline -fno-vect-cost-model\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n #define FTYPE double\n #define ITYPE long\n #define OP =="}, {"sha": "d97a0ebac601df90bd6562ea15269bcc631cd124", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-eq-f.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-eq-f.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-all -fno-unroll-loops --save-temps -fno-inline\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n #define FTYPE float\n #define ITYPE int\n #define OP =="}, {"sha": "594542dda65771ba26556348866980721c65efcc", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-ge-d.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-d.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-all -fno-unroll-loops --save-temps -fno-inline -fno-vect-cost-model\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n #define FTYPE double\n #define ITYPE long\n #define OP >="}, {"sha": "7eeb98830f993a4794e34c0bef4f75ccbb9a4f1b", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-ge-f.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-ge-f.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-all -fno-unroll-loops --save-temps -fno-inline\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n #define FTYPE float\n #define ITYPE int\n #define OP >="}, {"sha": "4c863f417c2f89c8e9d9e2e23e4c6d54e4e5e13d", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-gt-d.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-d.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-all -fno-unroll-loops --save-temps -fno-inline -fno-vect-cost-model\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n #define FTYPE double\n #define ITYPE long\n #define OP >"}, {"sha": "c56e78ad0ecc1085705523677b1595e5d3d131e8", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fcm-gt-f.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fcm-gt-f.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-all -fno-unroll-loops --save-temps -fno-inline\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n #define FTYPE float\n #define ITYPE int\n #define OP >"}, {"sha": "7a5972ad4a69c33cb5273b68a3fed24d63f0b7b9", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fmax-fmin-compile.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmax-fmin-compile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmax-fmin-compile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmax-fmin-compile.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3 -ffast-math\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n #include \"vect-fmax-fmin.x\"\n \n /* { dg-final { scan-assembler \"fmaxnm\\\\tv\" } } */"}, {"sha": "355ab7e51e7418902faa1e63462ff0ba038e4c61", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fmaxv-fminv-compile.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmaxv-fminv-compile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmaxv-fminv-compile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmaxv-fminv-compile.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,7 +1,8 @@\n-\n /* { dg-do compile } */\n /* { dg-options \"-O3 -ffast-math -fno-vect-cost-model\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n #include \"vect-fmaxv-fminv.x\"\n \n /* { dg-final { scan-assembler \"fminnmv\" } } */"}, {"sha": "c987f5fb83bf0d7f2605763a1ae5be9b32037f9a", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fmovd-zero.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmovd-zero.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmovd-zero.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmovd-zero.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-all -fno-vect-cost-model\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n #define N 32\n \n void"}, {"sha": "85bd5c5fffe797797135553e339094157d56f3da", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fmovd.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmovd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmovd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmovd.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-all -fno-vect-cost-model\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n #define N 32\n \n void"}, {"sha": "22a0535433a412044bb0428c8a8439f605b2708b", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fmovf-zero.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmovf-zero.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmovf-zero.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmovf-zero.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-all -fno-vect-cost-model\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n #define N 32\n \n void"}, {"sha": "2869b27517c69562b7b6d90a691d9b59122ce60e", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fmovf.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmovf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmovf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmovf.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-all -fno-vect-cost-model\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n #define N 32\n \n void"}, {"sha": "22164ef3335e8f081654ec65dc6345a2b743a43b", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fp-compile.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fp-compile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fp-compile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fp-compile.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,8 +1,8 @@\n-\n-\n /* { dg-do compile } */\n /* { dg-options \"-O3\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n #include \"vect-fp.x\"\n \n /* { dg-final { scan-assembler \"fadd\\\\tv\" } } */"}, {"sha": "30d54b3b066705ec1d5504a049e8930e1088fb0c", "filename": "gcc/testsuite/gcc.target/aarch64/vect-ld1r-compile-fp.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-ld1r-compile-fp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-ld1r-compile-fp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-ld1r-compile-fp.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3 -fno-vect-cost-model\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n #include \"stdint.h\"\n #include \"vect-ld1r.x\"\n "}, {"sha": "30219e62d79d77d0a7c153f6c8f525355a2ca250", "filename": "gcc/testsuite/gcc.target/aarch64/vect-ld1r-compile.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-ld1r-compile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-ld1r-compile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-ld1r-compile.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3 -fno-vect-cost-model\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n #include \"stdint.h\"\n #include \"vect-ld1r.x\"\n "}, {"sha": "16e6842012b174acf86336e21bfe2e20113dd63a", "filename": "gcc/testsuite/gcc.target/aarch64/vect-movi.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-movi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-movi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-movi.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do run } */\n /* { dg-options \"-O3 --save-temps -fno-inline\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n extern void abort (void);\n \n #define N 16"}, {"sha": "c9e4dccbd9815ff826550df682f704018961e278", "filename": "gcc/testsuite/gcc.target/aarch64/vect-mull-compile.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-mull-compile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-mull-compile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-mull-compile.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,7 +1,8 @@\n-\n /* { dg-do compile } */\n /* { dg-options \"-O3\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n #define N 16\n \n #include \"vect-mull.x\""}, {"sha": "918822a7d004baf36b4538d81222f3dff10d5451", "filename": "gcc/testsuite/gcc.target/aarch64/vect-reduc-or_1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-reduc-or_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-reduc-or_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-reduc-or_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -2,6 +2,8 @@\n /* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-all -fno-vect-cost-model\" } */\n /* Write a reduction loop to be reduced using whole vector right shift.  */\n \n+#pragma GCC target \"+nosve\"\n+\n extern void abort (void);\n \n unsigned char in[8] __attribute__((__aligned__(16)));"}, {"sha": "41e9157dbecf43e445ec6c7ec84221770485582b", "filename": "gcc/testsuite/gcc.target/aarch64/vect-vaddv.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vaddv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vaddv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vaddv.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do run } */\n /* { dg-options \"-O3 --save-temps -ffast-math\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n #include <arm_neon.h>\n \n extern void abort (void);"}, {"sha": "1d56e0534d93851e2bce9be478043fe8180c7aad", "filename": "gcc/testsuite/gcc.target/aarch64/vect_saddl_1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_saddl_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_saddl_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_saddl_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do run } */\n /* { dg-options \"-O3 -fno-inline -save-temps -fno-vect-cost-model -fno-ipa-icf\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n typedef signed char S8_t;\n typedef signed short S16_t;\n typedef signed int S32_t;"}, {"sha": "7cbf2a4d069b8100594ab76b78cbf854a7edff95", "filename": "gcc/testsuite/gcc.target/aarch64/vect_smlal_1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_smlal_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_smlal_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_smlal_1.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -1,6 +1,8 @@\n /* { dg-do run } */\n /* { dg-options \"-O3 -fno-inline -save-temps -fno-vect-cost-model -fno-ipa-icf\" } */\n \n+#pragma GCC target \"+nosve\"\n+\n typedef signed char S8_t;\n typedef signed short S16_t;\n typedef signed int S32_t;"}, {"sha": "aecf8262706c3b0365989d30e162f22f57a6a8c9", "filename": "gcc/testsuite/gcc.target/aarch64/vector_initialization_nostack.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_initialization_nostack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_initialization_nostack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_initialization_nostack.c?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -49,5 +49,6 @@ f12 (void)\n   return sum;\n }\n \n-\n-/* { dg-final { scan-assembler-not \"sp\" } } */\n+/* Fails for fixed-length SVE because we lack a vec_init pattern.\n+   A later patch fixes this in generic code.  */\n+/* { dg-final { scan-assembler-not \"sp\" { xfail { aarch64_sve && { ! vect_variable_length } } } } } */"}, {"sha": "43ca15dfae64bba7125115dd1a4280797e33a471", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/825b856cd08968694085aa13d0b937520b67a19d/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=825b856cd08968694085aa13d0b937520b67a19d", "patch": "@@ -8601,7 +8601,7 @@ proc check_effective_target_aarch64_tiny { } {\n # Create functions to check that the AArch64 assembler supports the\n # various architecture extensions via the .arch_extension pseudo-op.\n \n-foreach { aarch64_ext } { \"fp\" \"simd\" \"crypto\" \"crc\" \"lse\" \"dotprod\"} {\n+foreach { aarch64_ext } { \"fp\" \"simd\" \"crypto\" \"crc\" \"lse\" \"dotprod\" \"sve\"} {\n     eval [string map [list FUNC $aarch64_ext] {\n \tproc check_effective_target_aarch64_asm_FUNC_ok { } {\n \t  if { [istarget aarch64*-*-*] } {"}]}