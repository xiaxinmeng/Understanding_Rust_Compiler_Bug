{"sha": "ed35cf6e8b440c4dc85cea3a5f4f06adcad2632e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQzNWNmNmU4YjQ0MGM0ZGM4NWNlYTNhNWY0ZjA2YWRjYWQyNjMyZQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-01-09T20:59:12Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-01-09T20:59:12Z"}, "message": "gcc.c (xstrerror): Renamed from my_strerror.\n\n        * gcc.c (xstrerror): Renamed from my_strerror.  All callers\n        changed.  Remove prototype since we get that from libiberty.h.\n        * protoize.c (xstrerror): Likewise.\n\nFrom-SVN: r24605", "tree": {"sha": "98f3fbe3bd1c9aafddbd04dfef72c85dca9b8640", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98f3fbe3bd1c9aafddbd04dfef72c85dca9b8640"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed35cf6e8b440c4dc85cea3a5f4f06adcad2632e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed35cf6e8b440c4dc85cea3a5f4f06adcad2632e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed35cf6e8b440c4dc85cea3a5f4f06adcad2632e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed35cf6e8b440c4dc85cea3a5f4f06adcad2632e/comments", "author": null, "committer": null, "parents": [{"sha": "22d9f2cfb40666b8170c5c549cac7a328297c3c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d9f2cfb40666b8170c5c549cac7a328297c3c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22d9f2cfb40666b8170c5c549cac7a328297c3c6"}], "stats": {"total": 71, "additions": 37, "deletions": 34}, "files": [{"sha": "4559680bd40a011feb63af9088f05d8b980b8c09", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed35cf6e8b440c4dc85cea3a5f4f06adcad2632e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed35cf6e8b440c4dc85cea3a5f4f06adcad2632e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed35cf6e8b440c4dc85cea3a5f4f06adcad2632e", "patch": "@@ -1,3 +1,10 @@\n+Sat Jan  9 23:54:09 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.c (xstrerror): Renamed from my_strerror.  All callers\n+ \tchanged.  Remove prototype since we get that from libiberty.h.\n+\n+\t* protoize.c (xstrerror): Likewise.\n+\n Sat Jan  9 23:22:04 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.c (read_specs): Ensure format specifiers match their arguments."}, {"sha": "03bfa1f86daf10d1f11ed0fa0b179889dae0d0d8", "filename": "gcc/gcc.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed35cf6e8b440c4dc85cea3a5f4f06adcad2632e/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed35cf6e8b440c4dc85cea3a5f4f06adcad2632e/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=ed35cf6e8b440c4dc85cea3a5f4f06adcad2632e", "patch": "@@ -74,8 +74,6 @@ static char dir_separator_str[] = {DIR_SEPARATOR, 0};\n #define GET_ENV_PATH_LIST(VAR,NAME)\tdo { (VAR) = getenv (NAME); } while (0)\n #endif\n \n-extern char *my_strerror PROTO((int));\n-\n #ifndef HAVE_KILL\n #define kill(p,s) raise(s)\n #endif\n@@ -1032,7 +1030,7 @@ translate_options (argcp, argvp)\n }\n \f\n char *\n-my_strerror(e)\n+xstrerror(e)\n      int e;\n {\n #ifdef HAVE_STRERROR\n@@ -5247,14 +5245,14 @@ static void\n pfatal_with_name (name)\n      char *name;\n {\n-  fatal (\"%s: %s\", name, my_strerror (errno));\n+  fatal (\"%s: %s\", name, xstrerror (errno));\n }\n \n static void\n perror_with_name (name)\n      char *name;\n {\n-  error (\"%s: %s\", name, my_strerror (errno));\n+  error (\"%s: %s\", name, xstrerror (errno));\n }\n \n static void\n@@ -5272,7 +5270,7 @@ pfatal_pexecute (errmsg_fmt, errmsg_arg)\n       errmsg_fmt = msg;\n     }\n \n-  fatal (\"%s: %s\", errmsg_fmt, my_strerror (save_errno));\n+  fatal (\"%s: %s\", errmsg_fmt, xstrerror (save_errno));\n }\n \n /* More 'friendly' abort that prints the line and file."}, {"sha": "44c2dbe66760b6acbd1061c1936aca0b9421208c", "filename": "gcc/protoize.c", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed35cf6e8b440c4dc85cea3a5f4f06adcad2632e/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed35cf6e8b440c4dc85cea3a5f4f06adcad2632e/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=ed35cf6e8b440c4dc85cea3a5f4f06adcad2632e", "patch": "@@ -108,8 +108,6 @@ extern char *version_string;\n \n extern char *getpwd ();\n \n-extern char * my_strerror PROTO ((int));\n-\n static void usage PROTO ((void)) ATTRIBUTE_NORETURN;\n static void aux_info_corrupted PROTO ((void)) ATTRIBUTE_NORETURN;\n static void declare_source_confusing PROTO ((const char *)) ATTRIBUTE_NORETURN;\n@@ -566,8 +564,8 @@ static char * saved_repl_write_ptr;\n static const char *shortpath ();\n \f\n char *\n-my_strerror(e)\n-     int e;\n+xstrerror(e)\n+  int e;\n {\n \n #ifdef HAVE_STRERROR\n@@ -755,7 +753,7 @@ safe_write (desc, ptr, len, out_fname)\n \t  continue;\n #endif\n \tfprintf (stderr, \"%s: error writing file `%s': %s\\n\",\n-\t\t pname, shortpath (NULL, out_fname), my_strerror (errno_val));\n+\t\t pname, shortpath (NULL, out_fname), xstrerror (errno_val));\n \treturn;\n       }\n     ptr += written;\n@@ -1449,7 +1447,7 @@ find_file (filename, do_not_stat)\n \t      int errno_val = errno;\n               fprintf (stderr, \"%s: %s: can't get status: %s\\n\",\n \t\t       pname, shortpath (NULL, filename),\n-\t\t       my_strerror (errno_val));\n+\t\t       xstrerror (errno_val));\n               stat_buf.st_mtime = (time_t) -1;\n             }\n         }\n@@ -2060,14 +2058,14 @@ gen_aux_info_file (base_filename)\n \tint errno_val = errno;\n \tfprintf (stderr, \"%s: \", pname);\n \tfprintf (stderr, errmsg_fmt, errmsg_arg);\n-\tfprintf (stderr, \": %s\\n\", my_strerror (errno_val));\n+\tfprintf (stderr, \": %s\\n\", xstrerror (errno_val));\n \treturn 0;\n       }\n \n     pid = pwait (pid, &wait_status, 0);\n     if (pid == -1)\n       {\n-\tfprintf (stderr, \"%s: wait: %s\\n\", pname, my_strerror (errno));\n+\tfprintf (stderr, \"%s: wait: %s\\n\", pname, xstrerror (errno));\n \treturn 0;\n       }\n     if (WIFSIGNALED (wait_status))\n@@ -2143,7 +2141,7 @@ start_over: ;\n \t  int errno_val = errno;\n \t  fprintf (stderr, \"%s: can't read aux info file `%s': %s\\n\",\n \t\t   pname, shortpath (NULL, aux_info_filename),\n-\t\t   my_strerror (errno_val));\n+\t\t   xstrerror (errno_val));\n \t  errors++;\n \t  return;\n \t}\n@@ -2172,7 +2170,7 @@ start_over: ;\n \t  int errno_val = errno;\n \t  fprintf (stderr, \"%s: can't read aux info file `%s': %s\\n\",\n \t\t   pname, shortpath (NULL, aux_info_filename),\n-\t\t   my_strerror (errno_val));\n+\t\t   xstrerror (errno_val));\n \t  errors++;\n \t  return;\n \t}\n@@ -2188,7 +2186,7 @@ start_over: ;\n \tint errno_val = errno;\n         fprintf (stderr, \"%s: can't get status of aux info file `%s': %s\\n\",\n \t\t pname, shortpath (NULL, aux_info_filename),\n-\t\t my_strerror (errno_val));\n+\t\t xstrerror (errno_val));\n         errors++;\n         return;\n       }\n@@ -2216,7 +2214,7 @@ start_over: ;\n \t    int errno_val = errno;\n \t    fprintf (stderr, \"%s: can't get status of aux info file `%s': %s\\n\",\n \t\t     pname, shortpath (NULL, base_source_filename),\n-\t\t     my_strerror (errno_val));\n+\t\t     xstrerror (errno_val));\n \t    errors++;\n \t    return;\n \t  }\n@@ -2238,7 +2236,7 @@ start_over: ;\n \tint errno_val = errno;\n         fprintf (stderr, \"%s: can't open aux info file `%s' for reading: %s\\n\",\n \t\t pname, shortpath (NULL, aux_info_filename),\n-\t\t my_strerror (errno_val));\n+\t\t xstrerror (errno_val));\n         return;\n       }\n   \n@@ -2256,7 +2254,7 @@ start_over: ;\n \tint errno_val = errno;\n         fprintf (stderr, \"%s: error reading aux info file `%s': %s\\n\",\n \t\t pname, shortpath (NULL, aux_info_filename),\n-\t\t my_strerror (errno_val));\n+\t\t xstrerror (errno_val));\n         free (aux_info_base);\n         close (aux_info_file);\n         return;\n@@ -2269,7 +2267,7 @@ start_over: ;\n \tint errno_val = errno;\n         fprintf (stderr, \"%s: error closing aux info file `%s': %s\\n\",\n \t\t pname, shortpath (NULL, aux_info_filename),\n-\t\t my_strerror (errno_val));\n+\t\t xstrerror (errno_val));\n         free (aux_info_base);\n         close (aux_info_file);\n         return;\n@@ -2285,7 +2283,7 @@ start_over: ;\n \tint errno_val = errno;\n \tfprintf (stderr, \"%s: can't delete aux info file `%s': %s\\n\",\n \t\t pname, shortpath (NULL, aux_info_filename),\n-\t\t my_strerror (errno_val));\n+\t\t xstrerror (errno_val));\n       }\n \n   /* Save a pointer into the first line of the aux_info file which\n@@ -2353,7 +2351,7 @@ start_over: ;\n \t\t    int errno_val = errno;\n                     fprintf (stderr, \"%s: can't delete file `%s': %s\\n\",\n \t\t\t     pname, shortpath (NULL, aux_info_filename),\n-\t\t\t     my_strerror (errno_val));\n+\t\t\t     xstrerror (errno_val));\n                     return;\n                   }\n \t\tmust_create = 1;\n@@ -2430,7 +2428,7 @@ rename_c_file (hp)\n       int errno_val = errno;\n       fprintf (stderr, \"%s: warning: can't link file `%s' to `%s': %s\\n\",\n \t       pname, shortpath (NULL, filename),\n-\t       shortpath (NULL, new_filename), my_strerror (errno_val));\n+\t       shortpath (NULL, new_filename), xstrerror (errno_val));\n       errors++;\n       return;\n     }\n@@ -2439,7 +2437,7 @@ rename_c_file (hp)\n     {\n       int errno_val = errno;\n       fprintf (stderr, \"%s: warning: can't delete file `%s': %s\\n\",\n-\t       pname, shortpath (NULL, filename), my_strerror (errno_val));\n+\t       pname, shortpath (NULL, filename), xstrerror (errno_val));\n       errors++;\n       return;\n     }\n@@ -4144,7 +4142,7 @@ edit_file (hp)\n       int errno_val = errno;\n       fprintf (stderr, \"%s: can't get status for file `%s': %s\\n\",\n \t       pname, shortpath (NULL, convert_filename),\n-\t       my_strerror (errno_val));\n+\t       xstrerror (errno_val));\n       return;\n     }\n   orig_size = stat_buf.st_size;\n@@ -4180,7 +4178,7 @@ edit_file (hp)\n \tint errno_val = errno;\n         fprintf (stderr, \"%s: can't open file `%s' for reading: %s\\n\",\n \t\t pname, shortpath (NULL, convert_filename),\n-\t\t my_strerror (errno_val));\n+\t\t xstrerror (errno_val));\n         return;\n       }\n \n@@ -4195,7 +4193,7 @@ edit_file (hp)\n         close (input_file);\n         fprintf (stderr, \"\\n%s: error reading input file `%s': %s\\n\",\n \t\t pname, shortpath (NULL, convert_filename),\n-\t\t my_strerror (errno_val));\n+\t\t xstrerror (errno_val));\n         return;\n       }\n \n@@ -4229,7 +4227,7 @@ edit_file (hp)\n \tint errno_val = errno;\n         fprintf (stderr, \"%s: can't create/open clean file `%s': %s\\n\",\n \t\t pname, shortpath (NULL, clean_filename),\n-\t\t my_strerror (errno_val));\n+\t\t xstrerror (errno_val));\n         return;\n       }\n   \n@@ -4339,7 +4337,7 @@ edit_file (hp)\n \t\t       pname,\n \t\t       shortpath (NULL, convert_filename),\n \t\t       shortpath (NULL, new_filename),\n-\t\t       my_strerror (errno_val));\n+\t\t       xstrerror (errno_val));\n               return;\n             }\n         }\n@@ -4350,7 +4348,7 @@ edit_file (hp)\n       int errno_val = errno;\n       fprintf (stderr, \"%s: can't delete file `%s': %s\\n\",\n \t       pname, shortpath (NULL, convert_filename),\n-\t       my_strerror (errno_val));\n+\t       xstrerror (errno_val));\n       return;\n     }\n \n@@ -4364,7 +4362,7 @@ edit_file (hp)\n \tint errno_val = errno;\n         fprintf (stderr, \"%s: can't create/open output file `%s': %s\\n\",\n \t\t pname, shortpath (NULL, convert_filename),\n-\t\t my_strerror (errno_val));\n+\t\t xstrerror (errno_val));\n         return;\n       }\n   \n@@ -4393,7 +4391,7 @@ edit_file (hp)\n       int errno_val = errno;\n       fprintf (stderr, \"%s: can't change mode of file `%s': %s\\n\",\n \t       pname, shortpath (NULL, convert_filename),\n-\t       my_strerror (errno_val));\n+\t       xstrerror (errno_val));\n     }\n \n   /* Note:  We would try to change the owner and group of the output file\n@@ -4537,7 +4535,7 @@ main (argc, argv)\n   if (!cwd_buffer)\n     {\n       fprintf (stderr, \"%s: cannot get working directory: %s\\n\",\n-\t       pname, my_strerror(errno));\n+\t       pname, xstrerror(errno));\n       exit (FATAL_EXIT_CODE);\n     }\n "}]}