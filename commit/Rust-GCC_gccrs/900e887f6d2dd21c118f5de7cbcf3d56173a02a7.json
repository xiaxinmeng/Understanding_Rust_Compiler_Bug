{"sha": "900e887f6d2dd21c118f5de7cbcf3d56173a02a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAwZTg4N2Y2ZDJkZDIxYzExOGY1ZGU3Y2JjZjNkNTYxNzNhMDJhNw==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-09-02T08:50:13Z"}, "committer": {"name": "Daniel Kraft", "email": "domob@gcc.gnu.org", "date": "2008-09-02T08:50:13Z"}, "message": "re PR fortran/37228 (F2008: Support g0.<d> edit descriptor)\n\n2008-09-01  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR fortran/37228\n\t* io.c (check_format): Allow specifying precision with g0 format.\n\n2008-09-01  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libfortran/37301\n\tPR libfortran/37228\n\t* io/io.h (write_real_g0): Declare new function to handle g0.d format.\n\t* io/transfer.c (formatted_transfer_scalar): Use new function.\n\t* io/format.c (parse_format_list): Enable g0.d.\n\t* io/write.c (write_a_char4): Delete unused var.\n\t(set_fnode_default): New function to set the default fnode w, d, and e\n\tfactored from write_real. (write_real): Use new factored function.\n\t(write_real_g0): New function that sets d to that passed by g0.d format\n\tspecifier and set format to ES.  Default values for w and e are used\n\tfrom the new function, set_fnode_default.\n\n2008-09-01  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR fortran/37228\n\t* gfortran.dg/fmt_g0_4.f08: Revised test.\n\nFrom-SVN: r139886", "tree": {"sha": "317dab79bd42333332ad5ed9c18cf1fec7ff1af4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/317dab79bd42333332ad5ed9c18cf1fec7ff1af4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/900e887f6d2dd21c118f5de7cbcf3d56173a02a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/900e887f6d2dd21c118f5de7cbcf3d56173a02a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/900e887f6d2dd21c118f5de7cbcf3d56173a02a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/900e887f6d2dd21c118f5de7cbcf3d56173a02a7/comments", "author": null, "committer": null, "parents": [{"sha": "52f4993488d2dd12d66dd99c2937e59319d0b1b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52f4993488d2dd12d66dd99c2937e59319d0b1b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52f4993488d2dd12d66dd99c2937e59319d0b1b6"}], "stats": {"total": 150, "additions": 112, "deletions": 38}, "files": [{"sha": "213af61193ac77d4e6326394b3d6400ff083bbe5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900e887f6d2dd21c118f5de7cbcf3d56173a02a7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900e887f6d2dd21c118f5de7cbcf3d56173a02a7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=900e887f6d2dd21c118f5de7cbcf3d56173a02a7", "patch": "@@ -1,3 +1,8 @@\n+2008-09-01  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/37228\n+\t* io.c (check_format): Allow specifying precision with g0 format.\n+\n 2008-09-02  Daniel Kraft  <d@domob.eu>\n \n \t* gfortran.h (struct gfc_namespace): New member `implicit_loc'."}, {"sha": "298c758ac0cd6f0a80d34aa2dcb7b54757234d15", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900e887f6d2dd21c118f5de7cbcf3d56173a02a7/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900e887f6d2dd21c118f5de7cbcf3d56173a02a7/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=900e887f6d2dd21c118f5de7cbcf3d56173a02a7", "patch": "@@ -483,7 +483,6 @@ check_format (bool is_input)\n \t\t\t\t      \" at %L\");\n   const char *unexpected_end\t  = _(\"Unexpected end of format string\");\n   const char *zero_width\t  = _(\"Zero width in format descriptor\");\n-  const char *g0_precision\t= _(\"Specifying precision with G0 not allowed\");\n \n   const char *error;\n   format_token t, u;\n@@ -701,27 +700,25 @@ check_format (bool is_input)\n \t      error = zero_width;\n \t      goto syntax;\n \t    }\n-\n \t  if (gfc_notify_std (GFC_STD_F2008, \"Fortran 2008: 'G0' in \"\n \t\t\t      \"format at %C\") == FAILURE)\n \t    return FAILURE;\n+\t  u = format_lex ();\n+\t  if (u != FMT_PERIOD)\n+\t    {\n+\t      saved_token = u;\n+\t      break;\n+\t    }\n \n \t  u = format_lex ();\n-          if (u == FMT_PERIOD)\n+\t  if (u == FMT_ERROR)\n+\t    goto fail;\n+\t  if (u != FMT_POSINT)\n \t    {\n-\t      error = g0_precision;\n+\t      error = posint_required;\n \t      goto syntax;\n \t    }\n-\t  saved_token = u;\n-\t  goto between_desc;\n-\t}\n-\n-      if (u == FMT_ERROR)\n-\tgoto fail;\n-      if (u != FMT_POSINT)\n-\t{\n-\t  error = posint_required;\n-\t  goto syntax;\n+\t  break;\n \t}\n \n       u = format_lex ();"}, {"sha": "83d310fba7bbbd93747c5502c2828ce48575bf30", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900e887f6d2dd21c118f5de7cbcf3d56173a02a7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900e887f6d2dd21c118f5de7cbcf3d56173a02a7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=900e887f6d2dd21c118f5de7cbcf3d56173a02a7", "patch": "@@ -1,3 +1,8 @@\n+2008-09-01  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/37228\n+\t* gfortran.dg/fmt_g0_4.f08: Revised test.\n+\n 2008-09-02  Daniel Kraft  <d@domob.eu>\n \n \t* gfortran.dg/abstract_type_1.f90: New test."}, {"sha": "500117ec80f7ff74b057abb0ed971eab90a63edc", "filename": "gcc/testsuite/gfortran.dg/fmt_g0_4.f08", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900e887f6d2dd21c118f5de7cbcf3d56173a02a7/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g0_4.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900e887f6d2dd21c118f5de7cbcf3d56173a02a7/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g0_4.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_g0_4.f08?ref=900e887f6d2dd21c118f5de7cbcf3d56173a02a7", "patch": "@@ -1,5 +1,15 @@\n ! { dg-do compile }\n ! { dg-options \"-std=f2008\" }\n ! PR36725 Compile time error for g0 edit descriptor\n-print '(g0.9)', 0.1 ! { dg-error \"Specifying precision\" }\n+character(30) :: line\n+write(line, '(g0.3)') 0.1\n+if (line.ne.\"      1.000E-01\") call abort\n+write(line, '(g0.9)') 1.0\n+if (line.ne.\"1.000000000E+00\") call abort\n+write(line, '(g0.5)') 29.23\n+if (line.ne.\"    2.92300E+01\") call abort\n+write(line, '(g0.8)') -28.4\n+if (line.ne.\"-2.83999996E+01\") call abort\n+write(line, '(g0.8)') -0.0001\n+if (line.ne.\"-9.99999975E-05\") call abort\n end"}, {"sha": "1e65eb111d885b9cf4928ca4879333e88955d533", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900e887f6d2dd21c118f5de7cbcf3d56173a02a7/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900e887f6d2dd21c118f5de7cbcf3d56173a02a7/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=900e887f6d2dd21c118f5de7cbcf3d56173a02a7", "patch": "@@ -1,3 +1,17 @@\n+2008-09-01  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libfortran/37301\n+\tPR libfortran/37228\n+\t* io/io.h (write_real_g0): Declare new function to handle g0.d format.\n+\t* io/transfer.c (formatted_transfer_scalar): Use new function.\n+\t* io/format.c (parse_format_list): Enable g0.d.\n+\t* io/write.c (write_a_char4): Delete unused var.\n+\t(set_fnode_default): New function to set the default fnode w, d, and e\n+\tfactored from write_real. (write_real): Use new factored function.\n+\t(write_real_g0): New function that sets d to that passed by g0.d format\n+\tspecifier and set format to ES.  Default values for w and e are used\n+\tfrom the new function, set_fnode_default.\n+\n 2008-09-01  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \t* runtime/error.c: Fix cast for printf."}, {"sha": "667797fd1c09f7bda145a3a17b533805beec84e6", "filename": "libgfortran/io/format.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900e887f6d2dd21c118f5de7cbcf3d56173a02a7/libgfortran%2Fio%2Fformat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900e887f6d2dd21c118f5de7cbcf3d56173a02a7/libgfortran%2Fio%2Fformat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fformat.c?ref=900e887f6d2dd21c118f5de7cbcf3d56173a02a7", "patch": "@@ -735,6 +735,20 @@ parse_format_list (st_parameter_dt *dtp)\n \t      goto finished;\n \t    }\n \t  tail->u.real.w = 0;\n+\t  u = format_lex (fmt);\n+\t  if (u != FMT_PERIOD)\n+\t    {\n+\t      fmt->saved_token = u;\n+\t      break;\n+\t    }\n+\n+\t  u = format_lex (fmt);\n+\t  if (u != FMT_POSINT)\n+\t    {\n+\t      fmt->error = posint_required;\n+\t      goto finished;\n+\t    }\n+\t  tail->u.real.d = fmt->value;\n \t  break;\n \t}\n       if (t == FMT_F || dtp->u.p.mode == WRITING)"}, {"sha": "228372a9afaf6d621a1c90596ae15681793a549d", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900e887f6d2dd21c118f5de7cbcf3d56173a02a7/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900e887f6d2dd21c118f5de7cbcf3d56173a02a7/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=900e887f6d2dd21c118f5de7cbcf3d56173a02a7", "patch": "@@ -940,6 +940,9 @@ internal_proto(write_o);\n extern void write_real (st_parameter_dt *, const char *, int);\n internal_proto(write_real);\n \n+extern void write_real_g0 (st_parameter_dt *, const char *, int, int);\n+internal_proto(write_real_g0);\n+\n extern void write_x (st_parameter_dt *, int, int);\n internal_proto(write_x);\n "}, {"sha": "c810f4d7bea5f8a8fec74d1548bbf5ff0e6e8e4f", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900e887f6d2dd21c118f5de7cbcf3d56173a02a7/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900e887f6d2dd21c118f5de7cbcf3d56173a02a7/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=900e887f6d2dd21c118f5de7cbcf3d56173a02a7", "patch": "@@ -1213,7 +1213,12 @@ formatted_transfer_scalar (st_parameter_dt *dtp, bt type, void *p, int kind,\n \t\tbreak;\n \t      case BT_REAL:\n \t\tif (f->u.real.w == 0)\n-\t\t  write_real (dtp, p, kind);\n+\t\t  {\n+\t\t    if (f->u.real.d == 0)\n+\t\t      write_real (dtp, p, kind);\n+\t\t    else\n+\t\t      write_real_g0 (dtp, p, kind, f->u.real.d);\n+\t\t  }\n \t\telse\n \t\t  write_d (dtp, f, p, kind);\n \t\tbreak;"}, {"sha": "414a69e3a6c8178c4f09376f20a54be54f600b30", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 43, "deletions": 22, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900e887f6d2dd21c118f5de7cbcf3d56173a02a7/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900e887f6d2dd21c118f5de7cbcf3d56173a02a7/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=900e887f6d2dd21c118f5de7cbcf3d56173a02a7", "patch": "@@ -301,7 +301,7 @@ write_a_char4 (st_parameter_dt *dtp, const fnode *f, const char *source, int len\n   if (is_stream_io (dtp))\n     {\n       const char crlf[] = \"\\r\\n\";\n-      int i, j, bytes;\n+      int i, bytes;\n       gfc_char4_t *qq;\n       bytes = 0;\n \n@@ -952,43 +952,64 @@ write_character (st_parameter_dt *dtp, const char *source, int kind, int length)\n }\n \n \n-/* Output a real number with default format.\n-   This is 1PG14.7E2 for REAL(4), 1PG23.15E3 for REAL(8),\n-   1PG28.19E4 for REAL(10) and 1PG43.34E4 for REAL(16).  */\n+/* Set an fnode to default format.  */\n \n-void\n-write_real (st_parameter_dt *dtp, const char *source, int length)\n+static void\n+set_fnode_default (st_parameter_dt *dtp, fnode *f, int length)\n {\n-  fnode f ;\n-  int org_scale = dtp->u.p.scale_factor;\n-  f.format = FMT_G;\n-  dtp->u.p.scale_factor = 1;\n+  f->format = FMT_G;\n   switch (length)\n     {\n     case 4:\n-      f.u.real.w = 15;\n-      f.u.real.d = 8;\n-      f.u.real.e = 2;\n+      f->u.real.w = 15;\n+      f->u.real.d = 8;\n+      f->u.real.e = 2;\n       break;\n     case 8:\n-      f.u.real.w = 25;\n-      f.u.real.d = 17;\n-      f.u.real.e = 3;\n+      f->u.real.w = 25;\n+      f->u.real.d = 17;\n+      f->u.real.e = 3;\n       break;\n     case 10:\n-      f.u.real.w = 29;\n-      f.u.real.d = 20;\n-      f.u.real.e = 4;\n+      f->u.real.w = 29;\n+      f->u.real.d = 20;\n+      f->u.real.e = 4;\n       break;\n     case 16:\n-      f.u.real.w = 44;\n-      f.u.real.d = 35;\n-      f.u.real.e = 4;\n+      f->u.real.w = 44;\n+      f->u.real.d = 35;\n+      f->u.real.e = 4;\n       break;\n     default:\n       internal_error (&dtp->common, \"bad real kind\");\n       break;\n     }\n+}\n+/* Output a real number with default format.\n+   This is 1PG14.7E2 for REAL(4), 1PG23.15E3 for REAL(8),\n+   1PG28.19E4 for REAL(10) and 1PG43.34E4 for REAL(16).  */\n+\n+void\n+write_real (st_parameter_dt *dtp, const char *source, int length)\n+{\n+  fnode f ;\n+  int org_scale = dtp->u.p.scale_factor;\n+  dtp->u.p.scale_factor = 1;\n+  set_fnode_default (dtp, &f, length);\n+  write_float (dtp, &f, source , length);\n+  dtp->u.p.scale_factor = org_scale;\n+}\n+\n+\n+void\n+write_real_g0 (st_parameter_dt *dtp, const char *source, int length, int d)\n+{\n+  fnode f ;\n+  int org_scale = dtp->u.p.scale_factor;\n+  dtp->u.p.scale_factor = 1;\n+  set_fnode_default (dtp, &f, length);\n+  f.format = FMT_ES;\n+  f.u.real.d = d;\n   write_float (dtp, &f, source , length);\n   dtp->u.p.scale_factor = org_scale;\n }"}]}