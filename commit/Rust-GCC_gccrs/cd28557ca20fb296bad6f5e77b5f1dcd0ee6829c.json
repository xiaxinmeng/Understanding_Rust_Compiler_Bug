{"sha": "cd28557ca20fb296bad6f5e77b5f1dcd0ee6829c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QyODU1N2NhMjBmYjI5NmJhZDZmNWU3N2I1ZjFkY2QwZWU2ODI5Yw==", "commit": {"author": {"name": "Stephane Carrez", "email": "Stephane.Carrez@worldnet.fr", "date": "2002-03-15T22:13:07Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2002-03-15T22:13:07Z"}, "message": "m68hc11.md (\"logicalsi3_zexthi\"): Fix constraints and split of AND operation to clear the upper bits.\n\n\t* config/m68hc11/m68hc11.md (\"logicalsi3_zexthi\"): Fix constraints\n\tand split of AND operation to clear the upper bits.\n\t(\"*logicalsi3_zextqi\"): Likewise.\n\t(\"*logicallhi3_zexthi_ashift8\"): Likewise.\n\t(\"*logicalsi3_silshr16\"): Likewise.\n\t(\"logicalsi3_silshl16\"): Likewise.\n\t(\"anddi3\", \"iordi3\", \"xordi3\" splits): Remove constraints.\n\nFrom-SVN: r50845", "tree": {"sha": "88b229a6615edb35ae10533613670c05e32358c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88b229a6615edb35ae10533613670c05e32358c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd28557ca20fb296bad6f5e77b5f1dcd0ee6829c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd28557ca20fb296bad6f5e77b5f1dcd0ee6829c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd28557ca20fb296bad6f5e77b5f1dcd0ee6829c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd28557ca20fb296bad6f5e77b5f1dcd0ee6829c/comments", "author": null, "committer": null, "parents": [{"sha": "932657df232f3a98b665dd251db6e6441ab12025", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/932657df232f3a98b665dd251db6e6441ab12025", "html_url": "https://github.com/Rust-GCC/gccrs/commit/932657df232f3a98b665dd251db6e6441ab12025"}], "stats": {"total": 144, "additions": 95, "deletions": 49}, "files": [{"sha": "288c322cf353948addd116136c5da5baddd54763", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd28557ca20fb296bad6f5e77b5f1dcd0ee6829c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd28557ca20fb296bad6f5e77b5f1dcd0ee6829c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd28557ca20fb296bad6f5e77b5f1dcd0ee6829c", "patch": "@@ -1,3 +1,13 @@\n+2002-03-15  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n+\n+\t* config/m68hc11/m68hc11.md (\"logicalsi3_zexthi\"): Fix constraints\n+\tand split of AND operation to clear the upper bits.\n+\t(\"*logicalsi3_zextqi\"): Likewise.\n+\t(\"*logicallhi3_zexthi_ashift8\"): Likewise.\n+\t(\"*logicalsi3_silshr16\"): Likewise.\n+\t(\"logicalsi3_silshl16\"): Likewise.\n+\t(\"anddi3\", \"iordi3\", \"xordi3\" splits): Remove constraints.\n+\n 2002-03-15  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n \n \t* config/m68hc11/m68hc11.c (m68hc11_symbolic_p): New function."}, {"sha": "306053fa6109ec97e664f9711cd2c3544953ed6a", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 85, "deletions": 49, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd28557ca20fb296bad6f5e77b5f1dcd0ee6829c/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd28557ca20fb296bad6f5e77b5f1dcd0ee6829c/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=cd28557ca20fb296bad6f5e77b5f1dcd0ee6829c", "patch": "@@ -3617,11 +3617,11 @@\n ;;--------------------------------------------------------------------\n \n (define_insn \"*logicalsi3_zexthi\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=D,D\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=D\")\n \t(match_operator:SI 3 \"m68hc11_logical_operator\"\n \t\t[(zero_extend:SI\n-\t\t     (match_operand:HI 1 \"general_operand\" \"imdA,!udimA\"))\n-\t\t (match_operand:SI 2 \"general_operand\" \"Dimu,!Dimu\")]))]\n+\t\t     (match_operand:HI 1 \"general_operand\" \"imudA\"))\n+\t\t (match_operand:SI 2 \"general_operand\" \"Dimu\")]))]\n   \"\"\n   \"#\")\n \n@@ -3634,12 +3634,12 @@\n   \"\"\n   \"#\")\n \n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"=D,D\")\n+(define_split /* logicalsi3_zextqi */\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(match_operator:SI 3 \"m68hc11_logical_operator\"\n \t         [(zero_extend:SI\n-\t\t     (match_operand:QI 1 \"general_operand\" \"dxy,imu\"))\n-\t\t  (match_operand:SI 2 \"general_operand\" \"imuD,imuD\")]))]\n+\t\t     (match_operand:QI 1 \"general_operand\" \"\"))\n+\t\t  (match_operand:SI 2 \"general_operand\" \"\")]))]\n   \"z_replacement_completed == 2\"\n   [(set (reg:QI A_REGNUM) (match_dup 4))\n    (set (reg:QI D_REGNUM) (match_dup 7))\n@@ -3661,15 +3661,21 @@\n        operands[5] = m68hc11_gen_lowpart (QImode, operands[4]);\n        operands[4] = m68hc11_gen_highpart (QImode, operands[4]);\n        operands[6] = m68hc11_gen_highpart (HImode, operands[2]);\n-     }       \n+     }\n+   /* For an AND, make sure the high 24-bit part is cleared.  */\n+   if (GET_CODE (operands[3]) == AND)\n+     {\n+       operands[4] = const0_rtx;\n+       operands[6] = const0_rtx;\n+     }\n    \")\n \n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"=D,D\")\n+(define_split /* logicalsi3_zexthi */\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(match_operator:SI 3 \"m68hc11_logical_operator\"\n \t         [(zero_extend:SI\n-\t\t     (match_operand:HI 1 \"general_operand\" \"dA,imu\"))\n-\t\t  (match_operand:SI 2 \"general_operand\" \"imuD,imuD\")]))]\n+\t\t     (match_operand:HI 1 \"general_operand\" \"\"))\n+\t\t  (match_operand:SI 2 \"general_operand\" \"\")]))]\n   \"reload_completed\"\n   [(set (reg:HI D_REGNUM) (match_dup 4))\n    (set (reg:HI D_REGNUM) (match_op_dup 3 [(reg:HI D_REGNUM) (match_dup 5)]))\n@@ -3687,10 +3693,15 @@\n        operands[4] = operands[1];\n        operands[5] = m68hc11_gen_lowpart (HImode, operands[2]);\n        operands[6] = m68hc11_gen_highpart (HImode, operands[2]);\n-     }       \n+     }\n+   /* For an AND, make sure the high 16-bit part is cleared.  */\n+   if (GET_CODE (operands[3]) == AND)\n+     {\n+       operands[6] = const0_rtx;\n+     }\n    \")\n \n-(define_insn \"*logicallhi3_zexthi_ashift8\"\n+(define_insn \"*logicalhi3_zexthi_ashift8\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n \t(match_operator:HI 3 \"m68hc11_logical_operator\"\n \t\t[(zero_extend:HI\n@@ -3710,12 +3721,12 @@\n   \"\"\n   \"#\")\n \n-(define_split\n-  [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n+(define_split /* logicalhi3_zexthi */\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n \t(match_operator:HI 3 \"m68hc11_logical_operator\"\n \t\t[(zero_extend:HI\n-\t\t     (match_operand:QI 1 \"general_operand\" \"imud\"))\n-\t\t (match_operand:HI 2 \"general_operand\" \"dimu\")]))]\n+\t\t     (match_operand:QI 1 \"general_operand\" \"\"))\n+\t\t (match_operand:HI 2 \"general_operand\" \"\")]))]\n   \"z_replacement_completed == 2\"\n   [(set (reg:QI B_REGNUM) (match_dup 6))\n    (set (reg:QI A_REGNUM) (match_dup 4))\n@@ -3737,15 +3748,20 @@\n        else\n          operands[6] = operands[1];\n      }\n+   /* For an AND, make sure the high 8-bit part is cleared.  */\n+   if (GET_CODE (operands[3]) == AND)\n+     {\n+       operands[4] = const0_rtx;\n+     }\n   \")\n \n-(define_split\n-  [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n+(define_split /* logicalhi3_zexthi_ashift8 */\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n \t(match_operator:HI 3 \"m68hc11_logical_operator\"\n \t\t[(zero_extend:HI\n-\t\t     (match_operand:QI 1 \"general_operand\" \"imud\"))\n+\t\t     (match_operand:QI 1 \"general_operand\" \"\"))\n \t\t (ashift:HI\n-\t\t     (match_operand:HI 2 \"general_operand\" \"dimu\")\n+\t\t     (match_operand:HI 2 \"general_operand\" \"\")\n \t\t     (const_int 8))]))]\n   \"z_replacement_completed == 2\"\n   [(set (reg:QI A_REGNUM) (match_dup 4))\n@@ -3771,22 +3787,22 @@\n   \")\n \n (define_insn \"*logicalsi3_silshr16\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=D,D\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=D,D,D\")\n           (match_operator:SI 3 \"m68hc11_logical_operator\"\n \t      [(lshiftrt:SI \n-\t\t   (match_operand:SI 1 \"general_operand\" \"uim,?D\")\n+\t\t   (match_operand:SI 1 \"general_operand\" \"uim,uim,?D\")\n \t\t   (const_int 16))\n-\t\t(match_operand:SI 2 \"general_operand\" \"uim,0\")]))]\n+\t\t(match_operand:SI 2 \"general_operand\" \"uim,0,0\")]))]\n   \"\"\n   \"#\")\n \n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"=D,D\")\n+(define_split /* logicalsi3_silshr16 */\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n           (match_operator:SI 3 \"m68hc11_logical_operator\"\n \t\t[(lshiftrt:SI \n-\t\t\t(match_operand:SI 1 \"general_operand\" \"uim,?D\")\n+\t\t\t(match_operand:SI 1 \"general_operand\" \"\")\n \t\t\t(const_int 16))\n-\t\t (match_operand:SI 2 \"general_operand\" \"uim,0\")]))]\n+\t\t (match_operand:SI 2 \"general_operand\" \"\")]))]\n   \"reload_completed\"\n   [(set (reg:HI D_REGNUM) (match_dup 4))\n    (set (reg:HI D_REGNUM) (match_op_dup 3 [(reg:HI D_REGNUM) (match_dup 5)]))\n@@ -3804,6 +3820,11 @@\n      }\n    PUT_MODE (operands[3], HImode);\n \n+   /* For an AND, make sure the high 16-bit part is cleared.  */\n+   if (GET_CODE (operands[3]) == AND)\n+     {\n+       operands[6] = const0_rtx;\n+     }\n \")\n \n (define_insn \"*logicalsi3_silshl16\"\n@@ -3816,21 +3837,24 @@\n   \"\"\n   \"#\")\n \n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"=D,D\")\n+(define_split /* logicalsi3_silshl16 */\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n           (match_operator:SI 3 \"m68hc11_logical_operator\"\n \t\t[(ashift:SI \n-\t\t\t(match_operand:SI 1 \"general_operand\" \"uim,?D\")\n+\t\t\t(match_operand:SI 1 \"general_operand\" \"\")\n \t\t\t(const_int 16))\n-\t\t (match_operand:SI 2 \"general_operand\" \"0,0\")]))]\n+\t\t (match_operand:SI 2 \"general_operand\" \"\")]))]\n   \"z_replacement_completed == 2\"\n-  [(parallel [(set (reg:HI D_REGNUM) (reg:HI X_REGNUM))\n-              (set (reg:HI X_REGNUM) (reg:HI D_REGNUM))])\n-  (set (reg:HI D_REGNUM) (match_op_dup 3 [(reg:HI D_REGNUM) (match_dup 4)]))\n-  (parallel [(set (reg:HI D_REGNUM) (reg:HI X_REGNUM))\n-             (set (reg:HI X_REGNUM) (reg:HI D_REGNUM))])]\n+  [(set (reg:HI X_REGNUM) (match_op_dup 3 [(reg:HI X_REGNUM) (match_dup 4)]))\n+   (set (reg:HI D_REGNUM) (match_dup 5))]\n   \"operands[4] = m68hc11_gen_lowpart (HImode, operands[1]);\n-   PUT_MODE (operands[3], HImode);\")\n+   PUT_MODE (operands[3], HImode);\n+\n+   if (GET_CODE (operands[3]) == AND)\n+     operands[5] = const0_rtx;\n+   else\n+     operands[5] = gen_rtx (REG, HImode, HARD_D_REGNUM);\n+   \")\n \n \n ;;--------------------------------------------------------------------\n@@ -3840,29 +3864,41 @@\n ;; 16-bit logical patterns.\n ;;--------------------------------------------------------------------\n \n-;; Split 64-bit logical operations (AND, OR, XOR).\n+;; Split 64-bit logical operations: anddi3, iordi3, xordi3\n (define_split\n-  [(set (match_operand:DI 0 \"reg_or_some_mem_operand\" \"=mu\")\n+  [(set (match_operand:DI 0 \"reg_or_some_mem_operand\" \"\")\n \t(match_operator:DI 4 \"m68hc11_logical_operator\"\n-\t     [(match_operand:DI 1 \"reg_or_some_mem_operand\" \"%imu\")\n-\t      (match_operand:DI 2 \"general_operand\" \"imu\")]))\n-   (clobber (match_scratch:HI 3 \"=d\"))]\n+\t     [(match_operand:DI 1 \"reg_or_some_mem_operand\" \"\")\n+\t      (match_operand:DI 2 \"general_operand\" \"\")]))\n+   (clobber (match_scratch:HI 3 \"\"))]\n   \"reload_completed\"\n   [(const_int 0)]\n   \"m68hc11_split_logical (SImode, GET_CODE (operands[4]), operands);\n    DONE;\")\n \n-;; Split 32-bit logical operations (AND, OR, XOR).\n+;; Split 32-bit logical operations: andsi3, iorsi3, xorsi3\n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"=D\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(match_operator:SI 3 \"m68hc11_logical_operator\"\n-\t     [(match_operand:SI 1 \"register_operand\" \"%0\")\n-\t      (match_operand:SI 2 \"general_operand\" \"Dimu\")]))]\n-  \"reload_completed\"\n+\t     [(match_operand:SI 1 \"register_operand\" \"\")\n+\t      (match_operand:SI 2 \"general_operand\" \"\")]))]\n+  \"0 && reload_completed\"\n   [(const_int 0)]\n   \"m68hc11_split_logical (HImode, GET_CODE (operands[3]), operands);\n    DONE;\")\n \n+;; Split 32-bit logical operations: andsi3, iorsi3, xorsi3\n+(define_split\n+  [(set (match_operand:SI 0 \"reg_or_some_mem_operand\" \"\")\n+\t(match_operator:SI 4 \"m68hc11_logical_operator\"\n+\t     [(match_operand:SI 1 \"reg_or_some_mem_operand\" \"\")\n+\t      (match_operand:SI 2 \"general_operand\" \"\")]))\n+   (clobber (match_scratch:HI 3 \"\"))]\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  \"m68hc11_split_logical (HImode, GET_CODE (operands[4]), operands);\n+   DONE;\")\n+\n ;;--------------------------------------------------------------------\n ;; 16-bit Arithmetic and logical operations on X and Y:\n ;;"}]}