{"sha": "8fa33dfa9397b7a2ab094eefac825f178cff54b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZhMzNkZmE5Mzk3YjdhMmFiMDk0ZWVmYWM4MjVmMTc4Y2ZmNTRiOQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-02-18T20:31:44Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-02-18T20:31:44Z"}, "message": "invoke.texi (-fsquangle): Remove documentation.\n\n\t* invoke.texi (-fsquangle): Remove documentation.\n\t(-fname-mangling-version): Likewise.\n\n\t* cp-tree.h (new_abi_rtti_p): Remove.\n\t(name_mangling_version): Likewise.\n\t(flag_do_squangling): Likewise.\n\t* class.c (build_rtti_vtbl_entries): Remove old ABI support.\n\t* decl.c (grokfndecl): Likewise.\n\t* decl2.c (name_mangling_version): Remove.\n\t(flag_do_squangling): Likewise.\n\t(lang_f_options): Remove `squangle'.\n\t(unsupported_options): Add `squangle'.\n\t(cxx_decode_option): Issue a warning about uses of\n\t-fname-mangling-version.\n\t(finish_file): Remove old ABI support.\n\t* pt.c (check_explicit_specialization): Likewise.\n\t(tsubst_decl): Likewise.\n\t* rtti.c (init_rtti_processing): Likewise.\n\t(build_headof): Likewise.\n\t(get_tinfo_decl_dynamic): Likewise.\n\t(tinfo_from_decl): Likewise.\n\t(build_dynamic_cast_1): Likewise.\n\t(synthesize_tinfo_var): Likewise.\n\t* init.c (build_new): Allow enumeration types for the array-bounds\n\tin a direct-new-declarator.\n\nFrom-SVN: r39845", "tree": {"sha": "1ef3583c6eb43c790f6e45611fb6e1ac24c64a29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ef3583c6eb43c790f6e45611fb6e1ac24c64a29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fa33dfa9397b7a2ab094eefac825f178cff54b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fa33dfa9397b7a2ab094eefac825f178cff54b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fa33dfa9397b7a2ab094eefac825f178cff54b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fa33dfa9397b7a2ab094eefac825f178cff54b9/comments", "author": null, "committer": null, "parents": [{"sha": "e1078cfca6ce48820c55353664830ad13d567ae3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1078cfca6ce48820c55353664830ad13d567ae3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1078cfca6ce48820c55353664830ad13d567ae3"}], "stats": {"total": 259, "additions": 75, "deletions": 184}, "files": [{"sha": "6dad4f9e014ea8aebfa308a44df9ce314fb5b19e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa33dfa9397b7a2ab094eefac825f178cff54b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa33dfa9397b7a2ab094eefac825f178cff54b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8fa33dfa9397b7a2ab094eefac825f178cff54b9", "patch": "@@ -1,3 +1,8 @@\n+2001-02-17  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* invoke.texi (-fsquangle): Remove documentation.\n+\t(-fname-mangling-version): Likewise.\n+\n 2001-02-18  Lars Brinkhoff  <lars@nocrew.org>\n \n \t* optabs.c (expand_abs): Remove reference to"}, {"sha": "990529165768a4b01f41633ab77ae926ff20936b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa33dfa9397b7a2ab094eefac825f178cff54b9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa33dfa9397b7a2ab094eefac825f178cff54b9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8fa33dfa9397b7a2ab094eefac825f178cff54b9", "patch": "@@ -34,6 +34,26 @@\n \n 2001-02-17  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* cp-tree.h (new_abi_rtti_p): Remove.\n+\t(name_mangling_version): Likewise.\n+\t(flag_do_squangling): Likewise.\n+\t* class.c (build_rtti_vtbl_entries): Remove old ABI support.\n+\t* decl.c (grokfndecl): Likewise.\n+\t* decl2.c (name_mangling_version): Remove.\n+\t(flag_do_squangling): Likewise.\n+\t(lang_f_options): Remove `squangle'.\n+\t(unsupported_options): Add `squangle'.\n+\t(cxx_decode_option): Issue a warning about uses of\n+\t-fname-mangling-version.\n+\t(finish_file): Remove old ABI support.\n+\t* pt.c (check_explicit_specialization): Likewise.\n+\t(tsubst_decl): Likewise.\n+\t* rtti.c (init_rtti_processing): Likewise.\n+\t(build_headof): Likewise.\n+\t(get_tinfo_decl_dynamic): Likewise.\n+\t(tinfo_from_decl): Likewise.\n+\t(build_dynamic_cast_1): Likewise.\n+\t(synthesize_tinfo_var): Likewise.\n \t* init.c (build_new): Allow enumeration types for the array-bounds\n \tin a direct-new-declarator.\n "}, {"sha": "b1b4180fd67993214e9db7b50f3e686574b9762a", "filename": "gcc/cp/class.c", "status": "modified", "additions": 9, "deletions": 28, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa33dfa9397b7a2ab094eefac825f178cff54b9/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa33dfa9397b7a2ab094eefac825f178cff54b9/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=8fa33dfa9397b7a2ab094eefac825f178cff54b9", "patch": "@@ -7766,35 +7766,16 @@ build_rtti_vtbl_entries (binfo, rtti_binfo, vid)\n     }\n   offset = size_diffop (BINFO_OFFSET (rtti_binfo), BINFO_OFFSET (b));\n \n-  /* The second entry is, in the case of the new ABI, the address of\n-     the typeinfo object, or, in the case of the old ABI, a function\n-     which returns a typeinfo object.  */\n-  if (new_abi_rtti_p ())\n-    {\n-      if (flag_rtti)\n-\tdecl = build_unary_op (ADDR_EXPR, get_tinfo_decl (t), 0);\n-      else\n-\tdecl = integer_zero_node;\n-\n-      /* Convert the declaration to a type that can be stored in the\n-\t vtable.  */\n-      init = build1 (NOP_EXPR, vfunc_ptr_type_node, decl);\n-      TREE_CONSTANT (init) = 1;\n-    }\n+  /* The second entry is the address of the typeinfo object.  */\n+  if (flag_rtti)\n+    decl = build_unary_op (ADDR_EXPR, get_tinfo_decl (t), 0);\n   else\n-    {\n-      if (flag_rtti)\n-\tdecl = get_tinfo_decl (t);\n-      else\n-\tdecl = abort_fndecl;\n-\n-      /* Convert the declaration to a type that can be stored in the\n-\t vtable.  */\n-      init = build1 (ADDR_EXPR, vfunc_ptr_type_node, decl);\n-      TREE_CONSTANT (init) = 1;\n-      init = build_vtable_entry (offset, NULL_TREE, init, \n-\t\t\t\t /*generate_with_vtable_p=*/0);\n-    }\n+    decl = integer_zero_node;\n+  \n+  /* Convert the declaration to a type that can be stored in the\n+     vtable.  */\n+  init = build1 (NOP_EXPR, vfunc_ptr_type_node, decl);\n+  TREE_CONSTANT (init) = 1;\n   *vid->last_init = build_tree_list (NULL_TREE, init);\n   vid->last_init = &TREE_CHAIN (*vid->last_init);\n "}, {"sha": "f1e6df51a49a95e5789e2fe7abcfd9f394f90962", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa33dfa9397b7a2ab094eefac825f178cff54b9/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa33dfa9397b7a2ab094eefac825f178cff54b9/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8fa33dfa9397b7a2ab094eefac825f178cff54b9", "patch": "@@ -261,11 +261,6 @@ extern int flag_huge_objects;\n    class).  */\n #define all_overridden_vfuns_in_vtables_p() (1)\n \n-/* Nonzero if we use access type_info objects directly, and use the\n-   cross-vendor layout for them. Zero if we use an accessor function\n-   to get the type_info object address.  */\n-#define new_abi_rtti_p() (1)\n-\n /* Nonzero if primary and secondary vtables are combined into a single\n    vtable.  */\n #define merge_primary_and_secondary_vtables_p() (1)\n@@ -1121,15 +1116,6 @@ extern int flag_ansi;\n \n extern int flag_default_inline;\n \n-/* The name-mangling scheme to use.  Versions of gcc before 2.8 use\n-   version 0.  */\n-extern int name_mangling_version;\n-\n-/* Nonzero if squashed mangling is to be performed.\n-   This uses the B and K codes to reference previously seen class types\n-   and class qualifiers.       */\n-extern int flag_do_squangling;\n-\n /* Nonzero means generate separate instantiation control files and juggle\n    them at link time.  */\n extern int flag_use_repository;"}, {"sha": "af5ac8a4e69d6a5b6ed9770f3766b7b7bdd6bea5", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa33dfa9397b7a2ab094eefac825f178cff54b9/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa33dfa9397b7a2ab094eefac825f178cff54b9/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8fa33dfa9397b7a2ab094eefac825f178cff54b9", "patch": "@@ -8862,7 +8862,7 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n   /* Plain overloading: will not be grok'd by grokclassfn.  */\n   if (! ctype && ! processing_template_decl\n       && (! DECL_EXTERN_C_P (decl) || DECL_OVERLOADED_OPERATOR_P (decl))\n-      && (! DECL_USE_TEMPLATE (decl) || name_mangling_version < 1))\n+      && ! DECL_USE_TEMPLATE (decl))\n     set_mangled_name_for_decl (decl);\n \n   if (funcdef_flag)"}, {"sha": "51b734fb125c2dc478c8780aba4ab49331e71954", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa33dfa9397b7a2ab094eefac825f178cff54b9/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa33dfa9397b7a2ab094eefac825f178cff54b9/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=8fa33dfa9397b7a2ab094eefac825f178cff54b9", "patch": "@@ -430,17 +430,6 @@ int flag_inline_trees = 0;\n \n int max_tinst_depth = 50;\n \n-/* The name-mangling scheme to use.  Must be 1 or greater to support\n-   template functions with identical types, but different template\n-   arguments.  */\n-int name_mangling_version = 2;\n-\n-/* Nonzero if squashed mangling is to be performed. \n-   This uses the B and K codes to reference previously seen class types \n-   and class qualifiers.       */\n-\n-int flag_do_squangling;\n-\n /* Nonzero means output .vtable_{entry,inherit} for use in doing vtable gc.  */\n \n int flag_vtable_gc;\n@@ -507,7 +496,6 @@ lang_f_options[] =\n   {\"permissive\", &flag_permissive, 1},\n   {\"repo\", &flag_use_repository, 1},\n   {\"rtti\", &flag_rtti, 1},\n-  {\"squangle\", &flag_do_squangling, 1},\n   {\"stats\", &flag_detailed_statistics, 1},\n   {\"use-cxa-atexit\", &flag_use_cxa_atexit, 1},\n   {\"vtable-gc\", &flag_vtable_gc, 1},\n@@ -525,8 +513,9 @@ static const char * const unsupported_options[] = {\n   \"enum-int-equiv\",\n   \"guiding-decls\",\n   \"nonnull-objects\",\n-  \"this-is-variable\",\n+  \"squangle\",\n   \"strict-prototype\",\n+  \"this-is-variable\",\n };\n \n /* Compare two option strings, pointed two by P1 and P2, for use with\n@@ -617,8 +606,10 @@ cxx_decode_option (argc, argv)\n \t  = read_integral_parameter (option_value, p - 2, max_tinst_depth);\n       else if ((option_value\n                 = skip_leading_substring (p, \"name-mangling-version-\")))\n-\tname_mangling_version \n-\t  = read_integral_parameter (option_value, p - 2, name_mangling_version);\n+\t{\n+\t  warning (\"-fname-mangling-version is no longer supported\");\n+\t  return 1;\n+\t}\n       else if ((option_value\n                 = skip_leading_substring (p, \"dump-translation-unit=\")))\n \t{\n@@ -3581,8 +3572,7 @@ finish_file ()\n \n   timevar_push (TV_VARCONST);\n \n-  if (new_abi_rtti_p ())\n-    emit_support_tinfos ();\n+  emit_support_tinfos ();\n   \n   do \n     {\n@@ -3602,8 +3592,7 @@ finish_file ()\n       \n       /* Write out needed type info variables. Writing out one variable\n          might cause others to be needed.  */\n-      if (new_abi_rtti_p ()\n-          && walk_globals (tinfo_decl_p, emit_tinfo_decl, /*data=*/0))\n+      if (walk_globals (tinfo_decl_p, emit_tinfo_decl, /*data=*/0))\n \treconsider = 1;\n \n       /* The list of objects with static storage duration is built up"}, {"sha": "630adc94820dc1e6085684390fa34aa4a3b0a838", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa33dfa9397b7a2ab094eefac825f178cff54b9/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa33dfa9397b7a2ab094eefac825f178cff54b9/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8fa33dfa9397b7a2ab094eefac825f178cff54b9", "patch": "@@ -1693,8 +1693,7 @@ check_explicit_specialization (declarator, decl, template_count, flags)\n \t     treatment.  We do this here so that the ordinary,\n \t     non-template, name-mangling algorithm will not be used\n \t     later.  */\n-\t  if ((is_member_template (tmpl) || ctype == NULL_TREE)\n-\t      && name_mangling_version >= 1)\n+\t  if (is_member_template (tmpl) || ctype == NULL_TREE)\n \t    set_mangled_name_for_template_decl (decl);\n \n \t  if (is_friend && !have_def)\n@@ -5879,8 +5878,7 @@ tsubst_decl (t, args, type)\n \t\t\n \t\t/* TMPL will be NULL if this is a specialization of a\n \t\t   member function of a template class.  */\n-\t\tif (name_mangling_version < 1\n-\t\t    || tmpl == NULL_TREE\n+\t\tif (tmpl == NULL_TREE\n \t\t    || (member && !is_member_template (tmpl)\n \t\t\t&& !DECL_TEMPLATE_INFO (tmpl)))\n \t\t  set_mangled_name_for_decl (r);"}, {"sha": "315f23d42c01cc99291cb27e83f518a75b1d86e8", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 28, "deletions": 88, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa33dfa9397b7a2ab094eefac825f178cff54b9/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa33dfa9397b7a2ab094eefac825f178cff54b9/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=8fa33dfa9397b7a2ab094eefac825f178cff54b9", "patch": "@@ -79,24 +79,11 @@ init_rtti_processing ()\n     (class_type_node, get_identifier (\"type_info\"), 1);\n   if (flag_honor_std)\n     pop_namespace ();\n-  if (!new_abi_rtti_p ())\n-    {\n-      tinfo_decl_id = get_identifier (\"__tf\");\n-      tinfo_decl_type = build_function_type\n-        (build_reference_type\n-          (build_qualified_type\n-            (type_info_type_node, TYPE_QUAL_CONST)),\n-         void_list_node);\n-      tinfo_var_id = get_identifier (\"__ti\");\n-    }\n-  else\n-    {\n-      /* FIXME: These identifier prefixes are not set in stone yet.  */\n-      tinfo_decl_id = get_identifier (\"__ti\");\n-      tinfo_var_id = get_identifier (\"__tn\");\n-      tinfo_decl_type = build_qualified_type\n-                          (type_info_type_node, TYPE_QUAL_CONST);\n-    }\n+  /* FIXME: These identifier prefixes are not set in stone yet.  */\n+  tinfo_decl_id = get_identifier (\"__ti\");\n+  tinfo_var_id = get_identifier (\"__tn\");\n+  tinfo_decl_type = \n+    build_qualified_type (type_info_type_node, TYPE_QUAL_CONST);\n }\n \n /* Given a pointer to an object with at least one virtual table\n@@ -150,11 +137,7 @@ build_headof (exp)\n \n   /* Under the new ABI, the offset-to-top field is at index -2 from\n      the vptr.  */\n-  if (new_abi_rtti_p ())\n-    index = build_int_2 (-2, -1);\n-  /* But under the old ABI, it is at offset zero.  */\n-  else\n-    index = integer_zero_node;\n+  index = build_int_2 (-2, -1);\n \n   aref = build_vtbl_ref (build_indirect_ref (exp, NULL_PTR), index);\n \n@@ -253,14 +236,8 @@ get_tinfo_decl_dynamic (exp)\n \t  exp = build_indirect_ref (exp, NULL_PTR);\n \t}\n \n-      /* The RTTI information is always in the vtable, but it's at\n-\t different indices depending on the ABI.  */\n-      if (new_abi_rtti_p ())\n-\tindex = integer_minus_one_node;\n-      else if (flag_vtable_thunks)\n-\tindex = integer_one_node;\n-      else\n-\tindex = integer_zero_node;\n+      /* The RTTI information is at index -1.  */\n+      index = integer_minus_one_node;\n       t = build_vfn_ref ((tree *) 0, exp, index);\n       TREE_TYPE (t) = build_pointer_type (tinfo_decl_type);\n       return t;\n@@ -397,9 +374,7 @@ tinfo_from_decl (expr)\n {\n   tree t;\n   \n-  if (!new_abi_rtti_p ())\n-    t = build_call (expr, NULL_TREE);\n-  else if (TREE_CODE (TREE_TYPE (expr)) == POINTER_TYPE)\n+  if (TREE_CODE (TREE_TYPE (expr)) == POINTER_TYPE)\n     t = build_indirect_ref (expr, NULL);\n   else\n     t = expr;\n@@ -717,67 +692,34 @@ build_dynamic_cast_1 (type, expr)\n \t  if (tc == REFERENCE_TYPE)\n \t    expr1 = build_unary_op (ADDR_EXPR, expr1, 0);\n \n-          if (!new_abi_rtti_p ())\n-            {\n-\t      tree expr2 = build_headof (expr1);\n-\t      tree td1 = expr;\n-\n-\t      if (tc == POINTER_TYPE)\n-\t        td1 = build_indirect_ref (td1, NULL_PTR);\n-  \t      td1 = get_tinfo_decl_dynamic (td1);\n-\t  \n-              elems = tree_cons\n-\t        (NULL_TREE, td1, tree_cons\n-\t          (NULL_TREE, td2, tree_cons\n-\t            (NULL_TREE, boff, tree_cons\n-\t              (NULL_TREE, expr2, tree_cons\n-\t                (NULL_TREE, td3, tree_cons\n-\t\t          (NULL_TREE, expr1, NULL_TREE))))));\n-\t    }\n-\t  else\n-\t    elems = tree_cons\n-\t      (NULL_TREE, expr1, tree_cons\n-\t        (NULL_TREE, td3, tree_cons\n-  \t          (NULL_TREE, td2, tree_cons\n-                    (NULL_TREE, boff, NULL_TREE))));\n+\t  elems = tree_cons\n+\t    (NULL_TREE, expr1, tree_cons\n+\t     (NULL_TREE, td3, tree_cons\n+\t      (NULL_TREE, td2, tree_cons\n+\t       (NULL_TREE, boff, NULL_TREE))));\n \n \t  dcast_fn = dynamic_cast_node;\n \t  if (!dcast_fn)\n \t    {\n \t      tree tmp;\n \t      tree tinfo_ptr;\n-\t      tree ns = new_abi_rtti_p () ? abi_node : global_namespace;\n+\t      tree ns = abi_node;\n \t      const char *name;\n \t      \n \t      push_nested_namespace (ns);\n-\t      if (!new_abi_rtti_p ())\n-\t        {\n-    \t          tinfo_ptr = build_pointer_type (tinfo_decl_type);\n-  \t          name = \"__dynamic_cast_2\";\n-\t          tmp = tree_cons\n-\t\t    (NULL_TREE, tinfo_ptr, tree_cons\n-\t\t      (NULL_TREE, tinfo_ptr, tree_cons\n-\t                (NULL_TREE, integer_type_node, tree_cons\n-\t\t          (NULL_TREE, ptr_type_node, tree_cons\n-\t\t            (NULL_TREE, tinfo_ptr, tree_cons\n-\t\t              (NULL_TREE, ptr_type_node, void_list_node))))));\n-\t        }\n-\t      else\n-\t        {\n-                  tinfo_ptr = xref_tag (class_type_node,\n-                                        get_identifier (\"__class_type_info\"),\n-                                        1);\n-                    \n-                  tinfo_ptr = build_pointer_type\n-                                (build_qualified_type\n-                                  (tinfo_ptr, TYPE_QUAL_CONST));\n-  \t          name = \"__dynamic_cast\";\n-  \t          tmp = tree_cons\n-\t            (NULL_TREE, const_ptr_type_node, tree_cons\n-\t              (NULL_TREE, tinfo_ptr, tree_cons\n-\t                (NULL_TREE, tinfo_ptr, tree_cons\n-\t                  (NULL_TREE, ptrdiff_type_node, void_list_node))));\n-\t        }\n+\t      tinfo_ptr = xref_tag (class_type_node,\n+\t\t\t\t    get_identifier (\"__class_type_info\"),\n+\t\t\t\t    1);\n+\t      \n+\t      tinfo_ptr = build_pointer_type\n+\t\t(build_qualified_type\n+\t\t (tinfo_ptr, TYPE_QUAL_CONST));\n+\t      name = \"__dynamic_cast\";\n+\t      tmp = tree_cons\n+\t\t(NULL_TREE, const_ptr_type_node, tree_cons\n+\t\t (NULL_TREE, tinfo_ptr, tree_cons\n+\t\t  (NULL_TREE, tinfo_ptr, tree_cons\n+\t\t   (NULL_TREE, ptrdiff_type_node, void_list_node))));\n \t      tmp = build_function_type (ptr_type_node, tmp);\n \t      dcast_fn = build_library_fn_ptr (name, tmp);\n               pop_nested_namespace (ns);\n@@ -1134,8 +1076,6 @@ synthesize_tinfo_var (target_type, real_name)\n   tree var_type = NULL_TREE;\n   int non_public = 0;\n   \n-  my_friendly_assert (new_abi_rtti_p (), 20000118);\n-\n   switch (TREE_CODE (target_type))\n     {\n     case POINTER_TYPE:"}, {"sha": "9804d0de123a9eafc79275f037021816cfdfc757", "filename": "gcc/invoke.texi", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa33dfa9397b7a2ab094eefac825f178cff54b9/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa33dfa9397b7a2ab094eefac825f178cff54b9/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=8fa33dfa9397b7a2ab094eefac825f178cff54b9", "patch": "@@ -173,9 +173,9 @@ in the following sections.\n -fhuge-objects  -fno-implicit-templates @gol\n -fno-implicit-inline-templates @gol\n -fno-implement-inlines  -fms-extensions @gol\n--fname-mangling-version-@var{n}  -fno-operator-names @gol\n+-fno-operator-names @gol\n -fno-optional-diags  -fpermissive @gol\n--frepo  -fno-rtti  -fsquangle  -ftemplate-depth-@var{n} @gol\n+-frepo  -fno-rtti -ftemplate-depth-@var{n} @gol\n -fuse-cxa-atexit  -fvtable-thunks  -nostdinc++ @gol\n -fno-default-inline  -Wctor-dtor-privacy @gol\n -Wnon-virtual-dtor  -Wreorder @gol\n@@ -1318,20 +1318,6 @@ errors if these functions are not inlined everywhere they are called.\n Disable pedantic warnings about constructs used in MFC, such as implicit\n int and getting a pointer to member function via non-standard syntax.\n \n-@item -fname-mangling-version-@var{n}\n-Control the way in which names are mangled.  Version 0 is compatible\n-with versions of g++ before 2.8.  Version 1 is the default.  Version 1\n-will allow correct mangling of function templates.  For example, \n-version 0 mangling does not mangle foo<int, double> and foo<int, char>\n-given this declaration:\n-\n-@example\n-template <class T, class U> void foo(T t);\n-@end example\n-\n-Like all options that change the ABI, all C++ code, @emph{including\n-libgcc} must be built with the same setting of this option.\n-\n @item -fno-operator-names\n Do not treat the operator name keywords @code{and}, @code{bitand},\n @code{bitor}, @code{compl}, @code{not}, @code{or} and @code{xor} as\n@@ -1361,18 +1347,6 @@ of the language, you can save some space by using this flag.  Note that\n exception handling uses the same information, but it will generate it as\n needed.\n \n-@item -fsquangle\n-@itemx -fno-squangle\n-@samp{-fsquangle} will enable a compressed form of name mangling for\n-identifiers. In particular, it helps to shorten very long names by recognizing\n-types and class names which occur more than once, replacing them with special\n-short ID codes.  This option also requires any C++ libraries being used to\n-be compiled with this option as well.  The compiler has this disabled (the\n-equivalent of @samp{-fno-squangle}) by default.\n-\n-Like all options that change the ABI, all C++ code, @emph{including\n-libgcc.a} must be built with the same setting of this option.\n-\n @item -ftemplate-depth-@var{n}\n Set the maximum instantiation depth for template classes to @var{n}.\n A limit on the template instantiation depth is needed to detect"}, {"sha": "b4f7245297da4cce9fdf5e567702b0aa89d05283", "filename": "gcc/testsuite/g++.old-deja/g++.other/mangle1.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa33dfa9397b7a2ab094eefac825f178cff54b9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fmangle1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa33dfa9397b7a2ab094eefac825f178cff54b9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fmangle1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fmangle1.C?ref=8fa33dfa9397b7a2ab094eefac825f178cff54b9", "patch": "@@ -1,5 +1,4 @@\n // Test for proper mangling by setting up name clashes.\n-// Special g++ Options: -fno-squangle\n \n #if (!defined (__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100)\n #define NAME(OLD, NEW) OLD"}, {"sha": "4cd89ca6ac448e16a443ae6a851f348d85e4cb3b", "filename": "gcc/testsuite/g++.old-deja/g++.other/static8.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa33dfa9397b7a2ab094eefac825f178cff54b9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstatic8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa33dfa9397b7a2ab094eefac825f178cff54b9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstatic8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstatic8.C?ref=8fa33dfa9397b7a2ab094eefac825f178cff54b9", "patch": "@@ -1,5 +1,4 @@\n // Build don't link:\n-// Special g++ Options: -fno-squangle\n // Origin: Mark Mitchell <mark@codesourcery.com>\n \n #if (!defined (__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100)"}]}