{"sha": "927dc7c69ee324fea177872aa2d2d487c1803c8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI3ZGM3YzY5ZWUzMjRmZWExNzc4NzJhYTJkMmQ0ODdjMTgwM2M4Yg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-10-20T21:54:22Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-10-20T21:54:22Z"}, "message": "re PR libstdc++/41773 (Many libstdc++ failures)\n\n2009-10-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/41773\n\tRevert:\n\t2009-10-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/basic_string.h (_S_construct(const _CharT*, size_type,\n\tconst _Alloc&)): New, declare.\n\t(_S_construct(_CharT*, _CharT*, const _Alloc&),\n\t_S_construct(const _CharT*, const _CharT*, const _Alloc&),\n\t_S_construct(iterator, iterator, const _Alloc&),\n\t_S_construct(const_iterator, const_iterator, const _Alloc&)): New,\n\tforward to the latter.\n\t* include/bits/basic_string.tcc (_S_construct(const _CharT*,\n\tsize_type, const _Alloc&)): Define.\n\t(basic_string(const basic_string&, size_type, size_type),\n\tbasic_string(const basic_string&, size_type, size_type,\n\tconst _Alloc&), basic_string(const _CharT*, size_type,\n\tconst _Alloc&), basic_string(const _CharT*, const _Alloc&),\n\tbasic_string(initializer_list<>, const _Alloc&)): Call the latter.\n\t* config/abi/pre/gnu.ver: Remove recently added exports.\n\t* src/string-inst.cc: Remove instantiations.\n\nFrom-SVN: r153040", "tree": {"sha": "d9f0a70cd63a05ff0f5897ee3af169de24b15bd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9f0a70cd63a05ff0f5897ee3af169de24b15bd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/927dc7c69ee324fea177872aa2d2d487c1803c8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/927dc7c69ee324fea177872aa2d2d487c1803c8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/927dc7c69ee324fea177872aa2d2d487c1803c8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/927dc7c69ee324fea177872aa2d2d487c1803c8b/comments", "author": null, "committer": null, "parents": [{"sha": "b6a182f28e5c5f541b517bb834b260ae7a9d841c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6a182f28e5c5f541b517bb834b260ae7a9d841c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6a182f28e5c5f541b517bb834b260ae7a9d841c"}], "stats": {"total": 147, "additions": 69, "deletions": 78}, "files": [{"sha": "c13bb4005ccebec18d4a8c9b433cc53579746467", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/927dc7c69ee324fea177872aa2d2d487c1803c8b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/927dc7c69ee324fea177872aa2d2d487c1803c8b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=927dc7c69ee324fea177872aa2d2d487c1803c8b", "patch": "@@ -1,3 +1,26 @@\n+009-10-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+        PR libstdc++/41773\n+        Revert:\n+        2009-10-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+        * include/bits/basic_string.h (_S_construct(const _CharT*, size_type,\n+        const _Alloc&)): New, declare.\n+        (_S_construct(_CharT*, _CharT*, const _Alloc&),\n+        _S_construct(const _CharT*, const _CharT*, const _Alloc&),\n+        _S_construct(iterator, iterator, const _Alloc&),\n+        _S_construct(const_iterator, const_iterator, const _Alloc&)): New,\n+        forward to the latter.\n+        * include/bits/basic_string.tcc (_S_construct(const _CharT*,\n+        size_type, const _Alloc&)): Define.\n+        (basic_string(const basic_string&, size_type, size_type),\n+        basic_string(const basic_string&, size_type, size_type,\n+        const _Alloc&), basic_string(const _CharT*, size_type,\n+        const _Alloc&), basic_string(const _CharT*, const _Alloc&),\n+        basic_string(initializer_list<>, const _Alloc&)): Call the latter.\n+        * config/abi/pre/gnu.ver: Remove recently added exports.\n+        * src/string-inst.cc: Remove instantiations.\n+\n 2009-10-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/41763"}, {"sha": "2337a5a3fbf4f483f6f9b285311de54eb228f84f", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/927dc7c69ee324fea177872aa2d2d487c1803c8b/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/927dc7c69ee324fea177872aa2d2d487c1803c8b/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=927dc7c69ee324fea177872aa2d2d487c1803c8b", "patch": "@@ -1039,6 +1039,10 @@ GLIBCXX_3.4.14 {\n     _ZNKSbIwSt11char_traitsIwESaIwEE7crbeginEv;\n     _ZNKSbIwSt11char_traitsIwESaIwEE5crendEv;\n \n+    # string|wstring ::_S_construct<> helpers\n+    _ZNSs12_S_constructI*;\n+    _ZNSbIwSt11char_traitsIwESaIwEE12_S_constructI*;\n+\n } GLIBCXX_3.4.13;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "9d44dc4fdfc92b5debf85df83b1810463bfceac1", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 13, "deletions": 41, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/927dc7c69ee324fea177872aa2d2d487c1803c8b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/927dc7c69ee324fea177872aa2d2d487c1803c8b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=927dc7c69ee324fea177872aa2d2d487c1803c8b", "patch": "@@ -419,13 +419,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       /**\n        *  @brief  Default constructor creates an empty string.\n        */\n-      basic_string()\n-#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n-      : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc())\n-#else\n-      : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc())\n-#endif\n-      { }\n+      inline\n+      basic_string();\n \n       /**\n        *  @brief  Construct an empty string using allocator @a a.\n@@ -1551,8 +1546,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  max_size(), length_error is thrown.  The value of the string doesn't\n        *  change if an error is thrown.\n       */\n-      basic_string&\n-      replace(iterator __i1, iterator __i2, initializer_list<_CharT> __l)\n+      basic_string& replace(iterator __i1, iterator __i2,\n+\t\t\t    initializer_list<_CharT> __l)\n       { return this->replace(__i1, __i2, __l.begin(), __l.end()); }\n #endif // __GXX_EXPERIMENTAL_CXX0X__\n \n@@ -1603,35 +1598,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  return _S_construct_aux(__beg, __end, __a, _Integral());\n         }\n \n-      static _CharT*\n-      _S_construct(_CharT* __beg, _CharT* __end, const _Alloc& __a)\n-      {\n-\t__glibcxx_requires_valid_range(__beg, __end);\n-\treturn _S_construct(__beg, __end - __beg, __a);\n-      }\n-\n-      static _CharT*\n-      _S_construct(const _CharT* __beg, const _CharT* __end, const _Alloc& __a)\n-      {\n-\t__glibcxx_requires_valid_range(__beg, __end);\n-\treturn _S_construct(__beg, __end - __beg, __a);\n-      }\n-\n-      static _CharT*\n-      _S_construct(iterator __beg, iterator __end, const _Alloc& __a)\n-      {\n-\t__glibcxx_requires_valid_range(__beg, __end);\n-\treturn _S_construct(__beg.base(), __end - __beg, __a);\n-      }\n-\n-      static _CharT*\n-      _S_construct(const_iterator __beg, const_iterator __end,\n-\t\t   const _Alloc& __a)\n-      {\n-\t__glibcxx_requires_valid_range(__beg, __end);\n-\treturn _S_construct(__beg.base(), __end - __beg, __a);\n-      }\n-\n       // For Input Iterators, used in istreambuf_iterators, etc.\n       template<class _InIterator>\n         static _CharT*\n@@ -1648,9 +1614,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       static _CharT*\n       _S_construct(size_type __req, _CharT __c, const _Alloc& __a);\n \n-      static _CharT*\n-      _S_construct(const _CharT* __s, size_type __n, const _Alloc& __a);\n-\n     public:\n \n       /**\n@@ -2216,6 +2179,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      size_type __n2) const;\n   };\n \n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    inline basic_string<_CharT, _Traits, _Alloc>::\n+    basic_string()\n+#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n+    : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }\n+#else\n+    : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc()) { }\n+#endif\n+\n   // operator+\n   /**\n    *  @brief  Concatenate two strings."}, {"sha": "d450a4717de8ff75e24b283f1fd60aeff7379987", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 14, "deletions": 35, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/927dc7c69ee324fea177872aa2d2d487c1803c8b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/927dc7c69ee324fea177872aa2d2d487c1803c8b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=927dc7c69ee324fea177872aa2d2d487c1803c8b", "patch": "@@ -118,10 +118,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    template <typename _FwdIterator>\n+    template <typename _InIterator>\n       _CharT*\n       basic_string<_CharT, _Traits, _Alloc>::\n-      _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,\n+      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,\n \t\t   forward_iterator_tag)\n       {\n #ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n@@ -165,28 +165,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __r->_M_refdata();\n     }\n \n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    _CharT*\n-    basic_string<_CharT, _Traits, _Alloc>::\n-    _S_construct(const _CharT* __s, size_type __n, const _Alloc& __a)\n-    {\n-#ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n-      if (__n == 0 && __a == _Alloc())\n-\treturn _S_empty_rep()._M_refdata();\n-#endif\n-      // NB: Not required, but considered best practice.\n-      if (__gnu_cxx::__is_null_pointer(__s) && __n)\n-\t__throw_logic_error(__N(\"basic_string::_S_construct NULL not valid\"));\n-\n-      // Check for out_of_range and length_error exceptions.\n-      _Rep* __r = _Rep::_S_create(__n, size_type(0), __a);\n-      if (__n)\n-\t_M_copy(__r->_M_refdata(), __s, __n);\n-\n-      __r->_M_set_length_and_sharable(__n);\n-      return __r->_M_refdata();\n-    }\n-\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>::\n     basic_string(const basic_string& __str)\n@@ -207,7 +185,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     : _M_dataplus(_S_construct(__str._M_data()\n \t\t\t       + __str._M_check(__pos,\n \t\t\t\t\t\t\"basic_string::basic_string\"),\n-\t\t\t       __str._M_limit(__pos, __n), _Alloc()), _Alloc())\n+\t\t\t       __str._M_data() + __str._M_limit(__pos, __n)\n+\t\t\t       + __pos, _Alloc()), _Alloc())\n     { }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n@@ -217,22 +196,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     : _M_dataplus(_S_construct(__str._M_data()\n \t\t\t       + __str._M_check(__pos,\n \t\t\t\t\t\t\"basic_string::basic_string\"),\n-\t\t\t       __str._M_limit(__pos, __n), __a), __a)\n+\t\t\t       __str._M_data() + __str._M_limit(__pos, __n)\n+\t\t\t       + __pos, __a), __a)\n     { }\n \n   // TBD: DPG annotate\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>::\n     basic_string(const _CharT* __s, size_type __n, const _Alloc& __a)\n-    : _M_dataplus(_S_construct(__s, __n, __a), __a)\n+    : _M_dataplus(_S_construct(__s, __s + __n, __a), __a)\n     { }\n \n   // TBD: DPG annotate\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>::\n     basic_string(const _CharT* __s, const _Alloc& __a)\n-    : _M_dataplus(_S_construct(__s, __s ? traits_type::length(__s) : npos,\n-\t\t\t       __a), __a)\n+    : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) :\n+\t\t\t       __s + npos, __a), __a)\n     { }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n@@ -244,17 +224,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // TBD: DPG annotate\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     template<typename _InputIterator>\n-      basic_string<_CharT, _Traits, _Alloc>::\n-      basic_string(_InputIterator __beg, _InputIterator __end,\n-\t\t   const _Alloc& __a)\n-      : _M_dataplus(_S_construct(__beg, __end, __a), __a)\n-      { }\n+    basic_string<_CharT, _Traits, _Alloc>::\n+    basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a)\n+    : _M_dataplus(_S_construct(__beg, __end, __a), __a)\n+    { }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>::\n     basic_string(initializer_list<_CharT> __l, const _Alloc& __a)\n-    : _M_dataplus(_S_construct(__l.begin(), __l.size(), __a), __a)\n+    : _M_dataplus(_S_construct(__l.begin(), __l.end(), __a), __a)\n     { }\n #endif\n "}, {"sha": "4ba178a5ad43a6b8876b4a1c572e7db65aa2bfe9", "filename": "libstdc++-v3/src/string-inst.cc", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/927dc7c69ee324fea177872aa2d2d487c1803c8b/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/927dc7c69ee324fea177872aa2d2d487c1803c8b/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc?ref=927dc7c69ee324fea177872aa2d2d487c1803c8b", "patch": "@@ -1,7 +1,6 @@\n // Components for manipulating sequences of characters -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 2009, 1999, 2000, 2001, 2002, 2003, 2004,\n-// 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 1997, 1998, 2009, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -59,6 +58,20 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template \n     S::basic_string(S::iterator, S::iterator, const allocator<C>&);\n \n+  template \n+    C* \n+    S::_S_construct(S::iterator, S::iterator, \n+\t\t    const allocator<C>&, forward_iterator_tag);\n+\n+  template\n+    C*\n+    S::_S_construct(C*, C*, const allocator<C>&, forward_iterator_tag);\n+\n+  template\n+    C*\n+    S::_S_construct(const C*, const C*, const allocator<C>&,\n+\t\t    forward_iterator_tag);\n+\n _GLIBCXX_END_NAMESPACE\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)"}]}