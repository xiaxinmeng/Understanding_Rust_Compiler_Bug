{"sha": "ff63ac4d66fdcd9e0952b31b5dae947ffc638814", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY2M2FjNGQ2NmZkY2Q5ZTA5NTJiMzFiNWRhZTk0N2ZmYzYzODgxNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-03-15T13:30:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-03-15T13:30:04Z"}, "message": "re PR middle-end/52592 (compilation failure with undefined reference to `__builtin_iround')\n\n\tPR middle-end/52592\n\t* builtins.c (expand_builtin_int_roundingfn_2): If expanding\n\tBUILT_IN_IR{INT,OUND}* using optab fails, emit lr{int,ound}*\n\tcalls instead of __builtin_ir{int,ound}*.\n\n\t* gcc.dg/pr52592.c: New test.\n\nCo-Authored-By: Andrew Pinski <apinski@cavium.com>\n\nFrom-SVN: r185431", "tree": {"sha": "9c5c685efbb7fcf5539bf495c5fc114ab6f1a24f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c5c685efbb7fcf5539bf495c5fc114ab6f1a24f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff63ac4d66fdcd9e0952b31b5dae947ffc638814", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff63ac4d66fdcd9e0952b31b5dae947ffc638814", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff63ac4d66fdcd9e0952b31b5dae947ffc638814", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff63ac4d66fdcd9e0952b31b5dae947ffc638814/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b3781fcb265e24fd61be94e716027a33c0712ed0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3781fcb265e24fd61be94e716027a33c0712ed0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3781fcb265e24fd61be94e716027a33c0712ed0"}], "stats": {"total": 110, "additions": 87, "deletions": 23}, "files": [{"sha": "12178336bcca5d14a794c7215e5c3a8050200bfb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff63ac4d66fdcd9e0952b31b5dae947ffc638814/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff63ac4d66fdcd9e0952b31b5dae947ffc638814/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff63ac4d66fdcd9e0952b31b5dae947ffc638814", "patch": "@@ -1,3 +1,11 @@\n+2012-03-15  Jakub Jelinek  <jakub@redhat.com>\n+\t    Andrew Pinski  <apinski@cavium.com>\n+\n+\tPR middle-end/52592\n+\t* builtins.c (expand_builtin_int_roundingfn_2): If expanding\n+\tBUILT_IN_IR{INT,OUND}* using optab fails, emit lr{int,ound}*\n+\tcalls instead of __builtin_ir{int,ound}*.\n+\n 2012-03-15  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n \n \t* doc/sourcebuild.texi (cleanup-modules, keep-modules): Update"}, {"sha": "a086a8cb1a5646d407fa6bb6b7cbb188b68db058", "filename": "gcc/builtins.c", "status": "modified", "additions": 52, "deletions": 23, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff63ac4d66fdcd9e0952b31b5dae947ffc638814/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff63ac4d66fdcd9e0952b31b5dae947ffc638814/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=ff63ac4d66fdcd9e0952b31b5dae947ffc638814", "patch": "@@ -2841,10 +2841,7 @@ expand_builtin_int_roundingfn_2 (tree exp, rtx target)\n   tree fndecl = get_callee_fndecl (exp);\n   tree arg;\n   enum machine_mode mode;\n-\n-  /* There's no easy way to detect the case we need to set EDOM.  */\n-  if (flag_errno_math)\n-    return NULL_RTX;\n+  enum built_in_function fallback_fn = BUILT_IN_NONE;\n \n   if (!validate_arglist (exp, REAL_TYPE, VOID_TYPE))\n      gcc_unreachable ();\n@@ -2854,46 +2851,78 @@ expand_builtin_int_roundingfn_2 (tree exp, rtx target)\n   switch (DECL_FUNCTION_CODE (fndecl))\n     {\n     CASE_FLT_FN (BUILT_IN_IRINT):\n+      fallback_fn = BUILT_IN_LRINT;\n+      /* FALLTHRU */\n     CASE_FLT_FN (BUILT_IN_LRINT):\n     CASE_FLT_FN (BUILT_IN_LLRINT):\n-      builtin_optab = lrint_optab; break;\n+      builtin_optab = lrint_optab;\n+      break;\n \n     CASE_FLT_FN (BUILT_IN_IROUND):\n+      fallback_fn = BUILT_IN_LROUND;\n+      /* FALLTHRU */\n     CASE_FLT_FN (BUILT_IN_LROUND):\n     CASE_FLT_FN (BUILT_IN_LLROUND):\n-      builtin_optab = lround_optab; break;\n+      builtin_optab = lround_optab;\n+      break;\n \n     default:\n       gcc_unreachable ();\n     }\n \n+  /* There's no easy way to detect the case we need to set EDOM.  */\n+  if (flag_errno_math && fallback_fn == BUILT_IN_NONE)\n+    return NULL_RTX;\n+\n   /* Make a suitable register to place result in.  */\n   mode = TYPE_MODE (TREE_TYPE (exp));\n \n-  target = gen_reg_rtx (mode);\n+  /* There's no easy way to detect the case we need to set EDOM.  */\n+  if (!flag_errno_math)\n+    {\n+      target = gen_reg_rtx (mode);\n \n-  /* Wrap the computation of the argument in a SAVE_EXPR, as we may\n-     need to expand the argument again.  This way, we will not perform\n-     side-effects more the once.  */\n-  CALL_EXPR_ARG (exp, 0) = arg = builtin_save_expr (arg);\n+      /* Wrap the computation of the argument in a SAVE_EXPR, as we may\n+\t need to expand the argument again.  This way, we will not perform\n+\t side-effects more the once.  */\n+      CALL_EXPR_ARG (exp, 0) = arg = builtin_save_expr (arg);\n \n-  op0 = expand_expr (arg, NULL, VOIDmode, EXPAND_NORMAL);\n+      op0 = expand_expr (arg, NULL, VOIDmode, EXPAND_NORMAL);\n \n-  start_sequence ();\n+      start_sequence ();\n \n-  if (expand_sfix_optab (target, op0, builtin_optab))\n-    {\n-      /* Output the entire sequence.  */\n-      insns = get_insns ();\n+      if (expand_sfix_optab (target, op0, builtin_optab))\n+\t{\n+\t  /* Output the entire sequence.  */\n+\t  insns = get_insns ();\n+\t  end_sequence ();\n+\t  emit_insn (insns);\n+\t  return target;\n+\t}\n+\n+      /* If we were unable to expand via the builtin, stop the sequence\n+\t (without outputting the insns) and call to the library function\n+\t with the stabilized argument list.  */\n       end_sequence ();\n-      emit_insn (insns);\n-      return target;\n     }\n \n-  /* If we were unable to expand via the builtin, stop the sequence\n-     (without outputting the insns) and call to the library function\n-     with the stabilized argument list.  */\n-  end_sequence ();\n+  if (fallback_fn != BUILT_IN_NONE)\n+    {\n+      /* Fall back to rounding to long int.  Use implicit_p 0 - for non-C99\n+\t targets, (int) round (x) should never be transformed into\n+\t BUILT_IN_IROUND and if __builtin_iround is called directly, emit\n+\t a call to lround in the hope that the target provides at least some\n+\t C99 functions.  This should result in the best user experience for\n+\t not full C99 targets.  */\n+      tree fallback_fndecl = mathfn_built_in_1 (TREE_TYPE (arg),\n+\t\t\t\t\t\tfallback_fn, 0);\n+\n+      exp = build_call_nofold_loc (EXPR_LOCATION (exp),\n+\t\t\t\t   fallback_fndecl, 1, arg);\n+\n+      target = expand_call (exp, NULL_RTX, target == const0_rtx);\n+      return convert_to_mode (mode, target, 0);\n+    }\n \n   target = expand_call (exp, target, target == const0_rtx);\n "}, {"sha": "0bcdd035e7e59f5f3de18820e8f68a1789eff5c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff63ac4d66fdcd9e0952b31b5dae947ffc638814/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff63ac4d66fdcd9e0952b31b5dae947ffc638814/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff63ac4d66fdcd9e0952b31b5dae947ffc638814", "patch": "@@ -1,3 +1,9 @@\n+2012-03-15  Jakub Jelinek  <jakub@redhat.com>\n+\t    Andrew Pinski  <apinski@cavium.com>\n+\n+\tPR middle-end/52592\n+\t* gcc.dg/pr52592.c: New test.\n+\n 2012-03-15  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n \n \t* gfortran.fortran-torture/compile/compile.exp: Simplify."}, {"sha": "b71eb628de260ea98d2137b6202514e5b889285a", "filename": "gcc/testsuite/gcc.dg/pr52592.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff63ac4d66fdcd9e0952b31b5dae947ffc638814/gcc%2Ftestsuite%2Fgcc.dg%2Fpr52592.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff63ac4d66fdcd9e0952b31b5dae947ffc638814/gcc%2Ftestsuite%2Fgcc.dg%2Fpr52592.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr52592.c?ref=ff63ac4d66fdcd9e0952b31b5dae947ffc638814", "patch": "@@ -0,0 +1,21 @@\n+/* PR middle-end/52592 */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -O2 -ffast-math\" } */\n+\n+#define T(type, name) \\\n+type name (type);\t\t\\\n+__attribute__((cold))\t\t\\\n+int f##name (type x)\t\t\\\n+{\t\t\t\t\\\n+  return (int) name (x);\t\\\n+}\n+\n+T (double, round)\n+T (float, roundf)\n+T (long double, roundl)\n+T (double, rint)\n+T (float, rintf)\n+T (long double, rintl)\n+\n+/* { dg-final { scan-assembler-not \"__builtin_iround\" } } */\n+/* { dg-final { scan-assembler-not \"__builtin_irint\" } } */"}]}