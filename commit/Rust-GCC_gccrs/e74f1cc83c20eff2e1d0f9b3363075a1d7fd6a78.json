{"sha": "e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc0ZjFjYzgzYzIwZWZmMmUxZDBmOWIzMzYzMDc1YTFkN2ZkNmE3OA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-08-31T19:08:03Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-08-31T19:08:03Z"}, "message": "re PR fortran/40940 ([F03] CLASS statement)\n\n2009-08-31  Janus Weil  <janus@gcc.gnu.org>\n\t    Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/40940\n\t* array.c (gfc_match_array_constructor): Rename gfc_match_type_spec.\n\t* decl.c (gfc_match_type_spec): Rename to gfc_match_decl_type_spec,\n\tand reject CLASS with -std=f95.\n\t(gfc_match_implicit, gfc_match_data_decl,gfc_match_prefix,\n\tmatch_procedure_interface): Rename gfc_match_type_spec.\n\t* gfortran.h (gfc_type_compatible): Add prototype.\n\t* match.h (gfc_match_type_spec): Rename to gfc_match_decl_type_spec.\n\t* match.c (match_intrinsic_typespec): Rename to match_type_spec, and\n\tadd handling of derived types.\n\t(gfc_match_allocate): Rename match_intrinsic_typespec and check\n\ttype compatibility of derived types.\n\t* symbol.c (gfc_type_compatible): New function to check if two types\n\tare compatible.\n\n2009-08-31  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/40940\n\t* gfortran.dg/allocate_derived_1.f90: New.\n\t* gfortran.dg/class_3.f03: New.\n\n\nCo-Authored-By: Paul Thomas <pault@gcc.gnu.org>\n\nFrom-SVN: r151244", "tree": {"sha": "e381e09a17810c8b05f37fdbd76ea44cf8c23cb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e381e09a17810c8b05f37fdbd76ea44cf8c23cb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2abde5f35ace69607e6664daa9765f50635ad1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2abde5f35ace69607e6664daa9765f50635ad1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2abde5f35ace69607e6664daa9765f50635ad1d"}], "stats": {"total": 208, "additions": 184, "deletions": 24}, "files": [{"sha": "e5a673ab2db0627f95684eb74a7ba47c4b945d2c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78", "patch": "@@ -1,3 +1,21 @@\n+2009-08-31  Janus Weil  <janus@gcc.gnu.org>\n+\t    Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/40940\n+\t* array.c (gfc_match_array_constructor): Rename gfc_match_type_spec.\n+\t* decl.c (gfc_match_type_spec): Rename to gfc_match_decl_type_spec,\n+\tand reject CLASS with -std=f95.\n+\t(gfc_match_implicit, gfc_match_data_decl,gfc_match_prefix,\n+\tmatch_procedure_interface): Rename gfc_match_type_spec.\n+\t* gfortran.h (gfc_type_compatible): Add prototype.\n+\t* match.h (gfc_match_type_spec): Rename to gfc_match_decl_type_spec.\n+\t* match.c (match_intrinsic_typespec): Rename to match_type_spec, and\n+\tadd handling of derived types.\n+\t(gfc_match_allocate): Rename match_intrinsic_typespec and check\n+\ttype compatibility of derived types.\n+\t* symbol.c (gfc_type_compatible): New function to check if two types\n+\tare compatible.\n+\n 2009-08-31  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/40996"}, {"sha": "e1a5f25badf3e1d21cc5bfc5872c0815024e0bf4", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78", "patch": "@@ -907,7 +907,7 @@ gfc_match_array_constructor (gfc_expr **result)\n   seen_ts = false;\n \n   /* Try to match an optional \"type-spec ::\"  */\n-  if (gfc_match_type_spec (&ts, 0) == MATCH_YES)\n+  if (gfc_match_decl_type_spec (&ts, 0) == MATCH_YES)\n     {\n       seen_ts = (gfc_match (\" ::\") == MATCH_YES);\n "}, {"sha": "52796a655750510f6f02dbe9360cabcdb7cb4e6c", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78", "patch": "@@ -2267,16 +2267,16 @@ gfc_match_char_spec (gfc_typespec *ts)\n }\n \n \n-/* Matches a type specification.  If successful, sets the ts structure\n-   to the matched specification.  This is necessary for FUNCTION and\n+/* Matches a declaration-type-spec (F03:R502).  If successful, sets the ts\n+   structure to the matched specification.  This is necessary for FUNCTION and\n    IMPLICIT statements.\n \n    If implicit_flag is nonzero, then we don't check for the optional\n    kind specification.  Not doing so is needed for matching an IMPLICIT\n    statement correctly.  */\n \n match\n-gfc_match_type_spec (gfc_typespec *ts, int implicit_flag)\n+gfc_match_decl_type_spec (gfc_typespec *ts, int implicit_flag)\n {\n   char name[GFC_MAX_SYMBOL_LEN + 1];\n   gfc_symbol *sym;\n@@ -2377,6 +2377,10 @@ gfc_match_type_spec (gfc_typespec *ts, int implicit_flag)\n \treturn m;\n       ts->is_class = 1;\n \n+      if (gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: CLASS statement at %C\")\n+\t\t\t  == FAILURE)\n+\treturn MATCH_ERROR;\n+\n       /* TODO: Implement Polymorphism.  */\n       gfc_warning (\"Polymorphic entities are not yet implemented. \"\n \t\t   \"CLASS will be treated like TYPE at %C\");\n@@ -2599,7 +2603,7 @@ gfc_match_implicit (void)\n       gfc_clear_new_implicit ();\n \n       /* A basic type is mandatory here.  */\n-      m = gfc_match_type_spec (&ts, 1);\n+      m = gfc_match_decl_type_spec (&ts, 1);\n       if (m == MATCH_ERROR)\n \tgoto error;\n       if (m == MATCH_NO)\n@@ -3675,7 +3679,7 @@ gfc_match_data_decl (void)\n \n   num_idents_on_line = 0;\n   \n-  m = gfc_match_type_spec (&current_ts, 0);\n+  m = gfc_match_decl_type_spec (&current_ts, 0);\n   if (m != MATCH_YES)\n     return m;\n \n@@ -3780,7 +3784,7 @@ gfc_match_prefix (gfc_typespec *ts)\n \n loop:\n   if (!seen_type && ts != NULL\n-      && gfc_match_type_spec (ts, 0) == MATCH_YES\n+      && gfc_match_decl_type_spec (ts, 0) == MATCH_YES\n       && gfc_match_space () == MATCH_YES)\n     {\n \n@@ -4178,7 +4182,7 @@ match_procedure_interface (gfc_symbol **proc_if)\n \n   /* Get the type spec. for the procedure interface.  */\n   old_loc = gfc_current_locus;\n-  m = gfc_match_type_spec (&current_ts, 0);\n+  m = gfc_match_decl_type_spec (&current_ts, 0);\n   gfc_gobble_whitespace ();\n   if (m == MATCH_YES || (m == MATCH_NO && gfc_peek_ascii_char () == ')'))\n     goto got_ts;"}, {"sha": "b6ac2542969c1702b140e9396b4ce4ebd5da5ed6", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78", "patch": "@@ -2469,6 +2469,7 @@ gfc_gsymbol *gfc_find_gsymbol (gfc_gsymbol *, const char *);\n \n gfc_typebound_proc* gfc_get_typebound_proc (void);\n gfc_symbol* gfc_get_derived_super_type (gfc_symbol*);\n+bool gfc_type_compatible (gfc_typespec *, gfc_typespec *);\n gfc_symtree* gfc_find_typebound_proc (gfc_symbol*, gfc_try*,\n \t\t\t\t      const char*, bool, locus*);\n gfc_symtree* gfc_find_typebound_user_op (gfc_symbol*, gfc_try*,"}, {"sha": "ccd1071db3184005c1690b1fee56a536fd46fad6", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 52, "deletions": 15, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78", "patch": "@@ -2221,21 +2221,22 @@ gfc_free_alloc_list (gfc_alloc *p)\n }\n \n \n-/* Match a Fortran 2003 intrinsic-type-spec.  This is a stripped\n-   down version of gfc_match_type_spec() from decl.c.  It only includes\n-   the intrinsic types from the Fortran 2003 standard.  Thus, neither\n-   BYTE nor forms like REAL*4 are allowed.  Additionally, the implicit_flag\n-   is not needed, so it was removed.  The handling of derived types has\n-   been removed and no notion of the gfc_matching_function state\n-   is needed.  In short, this functions matches only standard conforming\n-   intrinsic-type-spec (R403).  */\n+/* Match a Fortran 2003 type-spec (F03:R401).  This is similar to\n+   gfc_match_decl_type_spec() from decl.c, with the following exceptions:\n+   It only includes the intrinsic types from the Fortran 2003 standard\n+   (thus, neither BYTE nor forms like REAL*4 are allowed). Additionally,\n+   the implicit_flag is not needed, so it was removed.  Derived types are\n+   identified by their name alone.  */\n \n static match\n-match_intrinsic_typespec (gfc_typespec *ts)\n+match_type_spec (gfc_typespec *ts)\n {\n   match m;\n+  gfc_symbol *derived;\n+  locus old_locus;\n \n   gfc_clear_ts (ts);\n+  old_locus = gfc_current_locus;\n \n   if (gfc_match (\"integer\") == MATCH_YES)\n     {\n@@ -2278,7 +2279,43 @@ match_intrinsic_typespec (gfc_typespec *ts)\n       goto kind_selector;\n     }\n \n-  /* If an intrinsic type is not matched, simply return MATCH_NO.  */ \n+  if (gfc_match_symbol (&derived, 1) == MATCH_YES)\n+    {\n+      if (derived->attr.flavor == FL_DERIVED)\n+\t{\n+\t  old_locus = gfc_current_locus;\n+\t  if (gfc_match (\" :: \") != MATCH_YES)\n+\t    return MATCH_ERROR;\n+\t  gfc_current_locus = old_locus;\n+\t  ts->type = BT_DERIVED;\n+\t  ts->u.derived = derived;\n+\t  /* Enfore F03:C401.  */\n+\t  if (derived->attr.abstract)\n+\t    {\n+\t      gfc_error (\"Derived type '%s' at %L may not be ABSTRACT\",\n+\t\t\t derived->name, &old_locus);\n+\t      return MATCH_ERROR;\n+\t    }\n+\t  return MATCH_YES;\n+\t}\n+      else\n+\t{\n+\t  if (gfc_match (\" :: \") == MATCH_YES)\n+\t    {\n+\t      /* Enforce F03:C476.  */\n+\t      gfc_error (\"'%s' at %L is not an accessible derived type\",\n+\t\t\t derived->name, &old_locus);\n+\t      return MATCH_ERROR;\n+\t    }\n+\t  else\n+\t    {\n+\t      gfc_current_locus = old_locus;\n+\t      return MATCH_NO;\n+\t    }\n+\t}\n+    }\n+\n+  /* If a type is not matched, simply return MATCH_NO.  */ \n   return MATCH_NO;\n \n kind_selector:\n@@ -2379,9 +2416,9 @@ gfc_match_allocate (void)\n   if (gfc_match_char ('(') != MATCH_YES)\n     goto syntax;\n \n-  /* Match an optional intrinsic-type-spec.  */\n+  /* Match an optional type-spec.  */\n   old_locus = gfc_current_locus;\n-  m = match_intrinsic_typespec (&ts);\n+  m = match_type_spec (&ts);\n   if (m == MATCH_ERROR)\n     goto cleanup;\n   else if (m == MATCH_NO)\n@@ -2430,15 +2467,15 @@ gfc_match_allocate (void)\n \t constraints.  */\n       if (ts.type != BT_UNKNOWN)\n \t{\n-\t  /* Enforce C626.  */\n-\t  if (ts.type != tail->expr->ts.type)\n+\t  /* Enforce F03:C624.  */\n+\t  if (!gfc_type_compatible (&tail->expr->ts, &ts))\n \t    {\n \t      gfc_error (\"Type of entity at %L is type incompatible with \"\n \t\t\t \"typespec\", &tail->expr->where);\n \t      goto cleanup;\n \t    }\n \n-\t  /* Enforce C627.  */\n+\t  /* Enforce F03:C627.  */\n \t  if (ts.kind != tail->expr->ts.kind)\n \t    {\n \t      gfc_error (\"Kind type parameter for entity at %L differs from \""}, {"sha": "196115c118ec05057bb8cb1e7181f4d682d8da3b", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78", "patch": "@@ -138,7 +138,7 @@ match gfc_match_data (void);\n match gfc_match_null (gfc_expr **);\n match gfc_match_kind_spec (gfc_typespec *, bool);\n match gfc_match_old_kind_spec (gfc_typespec *);\n-match gfc_match_type_spec (gfc_typespec *, int);\n+match gfc_match_decl_type_spec (gfc_typespec *, int);\n \n match gfc_match_end (gfc_statement *);\n match gfc_match_data_decl (void);"}, {"sha": "f6ce3cfce822b3fbff31c9840371ab609cae7c65", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78", "patch": "@@ -4534,6 +4534,32 @@ gfc_get_derived_super_type (gfc_symbol* derived)\n }\n \n \n+/* Check if two typespecs are type compatible (F03:5.1.1.2):\n+   If ts1 is nonpolymorphic, ts2 must be the same type.\n+   If ts1 is polymorphic (CLASS), ts2 must be an extension of ts1.  */\n+\n+bool\n+gfc_type_compatible (gfc_typespec *ts1, gfc_typespec *ts2)\n+{\n+  if (ts1->type == BT_DERIVED && ts2->type == BT_DERIVED)\n+    {\n+      gfc_symbol *t0, *t;\n+      if (ts1->is_class)\n+\t{\n+\t  t0 = ts1->u.derived;\n+\t  t = ts2->u.derived;\n+\t  while (t0 != t && t->attr.extension)\n+\t    t = gfc_get_derived_super_type (t);\n+\t  return (t0 == t);\n+\t}\n+      else\n+\treturn (ts1->u.derived == ts2->u.derived);\n+    }\n+  else\n+    return (ts1->type == ts2->type);\n+}\n+\n+\n /* General worker function to find either a type-bound procedure or a\n    type-bound user operator.  */\n "}, {"sha": "eba8f6efa624138eb92a43113ff458e5125af01b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78", "patch": "@@ -1,3 +1,9 @@\n+2009-08-31  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/40940\n+\t* gfortran.dg/allocate_derived_1.f90: New.\n+\t* gfortran.dg/class_3.f03: New.\n+\n 2009-08-31  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/40996"}, {"sha": "d74851ef0b03e149366419c535edf9231ed46e1b", "filename": "gcc/testsuite/gfortran.dg/allocate_derived_1.f90", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_derived_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_derived_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_derived_1.f90?ref=e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78", "patch": "@@ -0,0 +1,53 @@\n+! { dg-do compile }\n+!\n+! FIXME: Remove -w after polymorphic entities are supported.\n+! { dg-options \"-w\" }\n+!\n+! ALLOCATE statements with derived type specification\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+ type :: t1\n+  integer :: i\n+ end type\n+\n+ type, extends(t1) :: t2\n+  real :: r\n+ end type\n+\n+ type, extends(t2) :: t3\n+  real :: q\n+ end type\n+\n+ type, abstract :: u0\n+  logical :: nothing\n+ end type\n+\n+ type :: v1\n+  real :: r\n+ end type\n+\n+ class(t1),dimension(:),allocatable :: x\n+ type(t2),dimension(:),allocatable :: y\n+ class(t3),dimension(:),allocatable :: z\n+\n+ allocate(      x(1))\n+ allocate(t1 :: x(2))\n+ allocate(t2 :: x(3))\n+ allocate(t3 :: x(4))\n+ allocate(tx :: x(5))  ! { dg-error \"is not an accessible derived type\" }\n+ allocate(u0 :: x(6))  ! { dg-error \"may not be ABSTRACT\" }\n+ allocate(v1 :: x(7))  ! { dg-error \"is type incompatible with typespec\" }\n+\n+ allocate(      y(1))\n+ allocate(t1 :: y(2))  ! { dg-error \"is type incompatible with typespec\" }\n+ allocate(t2 :: y(3))\n+ allocate(t3 :: y(3))  ! { dg-error \"is type incompatible with typespec\" }\n+\n+ allocate(      z(1))\n+ allocate(t1 :: z(2))  ! { dg-error \"is type incompatible with typespec\" }\n+ allocate(t2 :: z(3))  ! { dg-error \"is type incompatible with typespec\" }\n+ allocate(t3 :: z(4))\n+\n+end\n+"}, {"sha": "8e15f0e57a577739c2445a2f28a2f2679e30d7c7", "filename": "gcc/testsuite/gfortran.dg/class_3.f03", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_3.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_3.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_3.f03?ref=e74f1cc83c20eff2e1d0f9b3363075a1d7fd6a78", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n+!\n+! PR 40940: [F03] CLASS statement\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+ type :: t\n+  integer :: comp\n+ end type\n+\n+ class(t), pointer :: cl  ! { dg-error \"CLASS statement\" }\n+\n+end\n+"}]}