{"sha": "ede497cfbd518c7fafda85bc7b5e26899e5b0f14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRlNDk3Y2ZiZDUxOGM3ZmFmZGE4NWJjN2I1ZTI2ODk5ZTViMGYxNA==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb.gcc@gmail.com", "date": "2006-03-20T21:22:55Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2006-03-20T21:22:55Z"}, "message": "function.h (struct function): Rename to x_stack_check_probe_note.\n\n\t* function.h (struct function) <x_tail_recursion_reentry>:\n\tRename to x_stack_check_probe_note.\n\t(tail_recursion_reentry): Rename to stack_check_probe_note.\n\t* function.c: Replace tail_recursion_reentry with\n\tstack_check_probe_note everywhere.\n\t(expand_function_start): Only emit a note for\n\tstack_check_probe_note with -fstack-protect.\n\t* stmt.c (expand_case): Don't emit NOTE_INSN_DELETED notes.\n\n\t* emit-rtl.c (remove_unnecessary_notes): Remove.\n\t(pass_remove_unnecessary_notes): Remove.\n\t* rtl.h (remove_unnecessary_notes): Remove prototype.\n\t* final.c (final_start_function): Don't call remove_unnecessary_notes.\n\t* tree-pass.h (pass_remove_unnecessary_notes): Remove.\n\t* passes.c (pass_remove_unnecessary_notes): Don't run it.\n\nFrom-SVN: r112229", "tree": {"sha": "cf6c3c48c169fb06b596b3ffc42eb5980f17563d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf6c3c48c169fb06b596b3ffc42eb5980f17563d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ede497cfbd518c7fafda85bc7b5e26899e5b0f14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ede497cfbd518c7fafda85bc7b5e26899e5b0f14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ede497cfbd518c7fafda85bc7b5e26899e5b0f14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ede497cfbd518c7fafda85bc7b5e26899e5b0f14/comments", "author": null, "committer": null, "parents": [{"sha": "e13f1c1432140a43edd23a50c3916fa41fadd610", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e13f1c1432140a43edd23a50c3916fa41fadd610", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e13f1c1432140a43edd23a50c3916fa41fadd610"}], "stats": {"total": 128, "additions": 29, "deletions": 99}, "files": [{"sha": "613fb8404873a2e52cf63dc7671a2faab7656a47", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede497cfbd518c7fafda85bc7b5e26899e5b0f14/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede497cfbd518c7fafda85bc7b5e26899e5b0f14/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ede497cfbd518c7fafda85bc7b5e26899e5b0f14", "patch": "@@ -1,3 +1,21 @@\n+2006-03-20  Steven Bosscher  <stevenb.gcc@gmail.com>\n+\n+\t* function.h (struct function) <x_tail_recursion_reentry>:\n+\tRename to x_stack_check_probe_note.\n+\t(tail_recursion_reentry): Rename to stack_check_probe_note.\n+\t* function.c: Replace tail_recursion_reentry with\n+\tstack_check_probe_note everywhere.\n+\t(expand_function_start): Only emit a note for\n+\tstack_check_probe_note with -fstack-protect.\n+\t* stmt.c (expand_case): Don't emit NOTE_INSN_DELETED notes.\n+\n+\t* emit-rtl.c (remove_unnecessary_notes): Remove.\n+\t(pass_remove_unnecessary_notes): Remove.\n+\t* rtl.h (remove_unnecessary_notes): Remove prototype.\n+\t* final.c (final_start_function): Don't call remove_unnecessary_notes.\n+\t* tree-pass.h (pass_remove_unnecessary_notes): Remove.\n+\t* passes.c (pass_remove_unnecessary_notes): Don't run it.\n+\n 2006-03-20  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR tree-opt/26629"}, {"sha": "eabf88f646dcf2967af6efc61858c4733230d90f", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede497cfbd518c7fafda85bc7b5e26899e5b0f14/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede497cfbd518c7fafda85bc7b5e26899e5b0f14/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=ede497cfbd518c7fafda85bc7b5e26899e5b0f14", "patch": "@@ -3677,80 +3677,6 @@ find_line_note (rtx insn)\n   return insn;\n }\n \n-/* Remove unnecessary notes from the instruction stream.  */\n-\n-unsigned int\n-remove_unnecessary_notes (void)\n-{\n-  rtx eh_stack = NULL_RTX;\n-  rtx insn;\n-  rtx next;\n-  rtx tmp;\n-\n-  /* We must not remove the first instruction in the function because\n-     the compiler depends on the first instruction being a note.  */\n-  for (insn = NEXT_INSN (get_insns ()); insn; insn = next)\n-    {\n-      /* Remember what's next.  */\n-      next = NEXT_INSN (insn);\n-\n-      /* We're only interested in notes.  */\n-      if (!NOTE_P (insn))\n-\tcontinue;\n-\n-      switch (NOTE_LINE_NUMBER (insn))\n-\t{\n-\tcase NOTE_INSN_DELETED:\n-\t  remove_insn (insn);\n-\t  break;\n-\n-\tcase NOTE_INSN_EH_REGION_BEG:\n-\t  eh_stack = alloc_INSN_LIST (insn, eh_stack);\n-\t  break;\n-\n-\tcase NOTE_INSN_EH_REGION_END:\n-\t  /* Too many end notes.  */\n-\t  gcc_assert (eh_stack);\n-\t  /* Mismatched nesting.  */\n-\t  gcc_assert (NOTE_EH_HANDLER (XEXP (eh_stack, 0))\n-\t\t      == NOTE_EH_HANDLER (insn));\n-\t  tmp = eh_stack;\n-\t  eh_stack = XEXP (eh_stack, 1);\n-\t  free_INSN_LIST_node (tmp);\n-\t  break;\n-\n-\tcase NOTE_INSN_BLOCK_BEG:\n-\tcase NOTE_INSN_BLOCK_END:\n-          /* BLOCK_END and BLOCK_BEG notes only exist in the `final' pass.  */\n-          gcc_unreachable ();\n-\n-\tdefault:\n-\t  break;\n-\t}\n-    }\n-\n-  /* Too many EH_REGION_BEG notes.  */\n-  gcc_assert (!eh_stack);\n-  return 0;\n-}\n-\n-struct tree_opt_pass pass_remove_unnecessary_notes =\n-{\n-  \"eunotes\",                            /* name */ \n-  NULL,\t\t\t\t\t/* gate */\n-  remove_unnecessary_notes,             /* execute */\n-  NULL,                                 /* sub */\n-  NULL,                                 /* next */\n-  0,                                    /* static_pass_number */\n-  0,\t\t\t\t\t/* tv_id */ \n-  0,\t\t\t\t\t/* properties_required */\n-  0,                                    /* properties_provided */\n-  0,\t\t\t\t\t/* properties_destroyed */\n-  0,                                    /* todo_flags_start */\n-  TODO_dump_func,\t\t\t/* todo_flags_finish */\n-  0                                     /* letter */ \n-};\n-\n \f\n /* Emit insn(s) of given code and pattern\n    at a specified place within the doubly-linked list."}, {"sha": "4a5fd1815d8ca7783dd11fc051e62bca474205dc", "filename": "gcc/final.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede497cfbd518c7fafda85bc7b5e26899e5b0f14/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede497cfbd518c7fafda85bc7b5e26899e5b0f14/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=ede497cfbd518c7fafda85bc7b5e26899e5b0f14", "patch": "@@ -1417,7 +1417,6 @@ final_start_function (rtx first ATTRIBUTE_UNUSED, FILE *file,\n      function.  */\n   if (write_symbols)\n     {\n-      remove_unnecessary_notes ();\n       reemit_insn_block_notes ();\n       number_blocks (current_function_decl);\n       /* We never actually put out begin/end notes for the top-level"}, {"sha": "2e9aec05c82d7a2908e6abc161a33271da56a286", "filename": "gcc/function.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede497cfbd518c7fafda85bc7b5e26899e5b0f14/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede497cfbd518c7fafda85bc7b5e26899e5b0f14/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=ede497cfbd518c7fafda85bc7b5e26899e5b0f14", "patch": "@@ -331,7 +331,7 @@ free_after_compilation (struct function *f)\n   f->x_return_label = NULL;\n   f->x_naked_return_label = NULL;\n   f->x_stack_slot_list = NULL;\n-  f->x_tail_recursion_reentry = NULL;\n+  f->x_stack_check_probe_note = NULL;\n   f->x_arg_pointer_save_area = NULL;\n   f->x_parm_birth_insn = NULL;\n   f->original_arg_vector = NULL;\n@@ -4224,8 +4224,8 @@ expand_function_start (tree subr)\n      as opposed to parm setup.  */\n   emit_note (NOTE_INSN_FUNCTION_BEG);\n \n-  if (!NOTE_P (get_last_insn ()))\n-    emit_note (NOTE_INSN_DELETED);\n+  gcc_assert (NOTE_P (get_last_insn ()));\n+\n   parm_birth_insn = get_last_insn ();\n \n   if (current_function_profile)\n@@ -4235,10 +4235,10 @@ expand_function_start (tree subr)\n #endif\n     }\n \n-  /* After the display initializations is where the tail-recursion label\n-     should go, if we end up needing one.   Ensure we have a NOTE here\n-     since some things (like trampolines) get placed before this.  */\n-  tail_recursion_reentry = emit_note (NOTE_INSN_DELETED);\n+  /* After the display initializations is where the stack checking\n+     probe should go.  */\n+  if(flag_stack_check)\n+    stack_check_probe_note = emit_note (NOTE_INSN_DELETED);\n \n   /* Make sure there is a line number after the function entry setup code.  */\n   force_next_line_note ();\n@@ -4364,7 +4364,7 @@ expand_function_end (void)\n \t\t\t       GEN_INT (STACK_CHECK_MAX_FRAME_SIZE));\n \t    seq = get_insns ();\n \t    end_sequence ();\n-\t    emit_insn_before (seq, tail_recursion_reentry);\n+\t    emit_insn_before (seq, stack_check_probe_note);\n \t    break;\n \t  }\n     }"}, {"sha": "4a60eb2d705824455192f151ea1c6290c007a969", "filename": "gcc/function.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede497cfbd518c7fafda85bc7b5e26899e5b0f14/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede497cfbd518c7fafda85bc7b5e26899e5b0f14/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=ede497cfbd518c7fafda85bc7b5e26899e5b0f14", "patch": "@@ -239,7 +239,7 @@ struct function GTY(())\n   rtx x_stack_slot_list;\n \n   /* Place after which to insert the tail_recursion_label if we need one.  */\n-  rtx x_tail_recursion_reentry;\n+  rtx x_stack_check_probe_note;\n \n   /* Location at which to save the argument pointer if it will need to be\n      referenced.  There are two cases where this is done: if nonlocal gotos\n@@ -503,7 +503,7 @@ extern int trampolines_created;\n #define stack_slot_list (cfun->x_stack_slot_list)\n #define parm_birth_insn (cfun->x_parm_birth_insn)\n #define frame_offset (cfun->x_frame_offset)\n-#define tail_recursion_reentry (cfun->x_tail_recursion_reentry)\n+#define stack_check_probe_note (cfun->x_stack_check_probe_note)\n #define arg_pointer_save_area (cfun->x_arg_pointer_save_area)\n #define used_temp_slots (cfun->x_used_temp_slots)\n #define avail_temp_slots (cfun->x_avail_temp_slots)"}, {"sha": "4dd4ac8d8d8b66d926e6c00517b4fcb61fdff40e", "filename": "gcc/passes.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede497cfbd518c7fafda85bc7b5e26899e5b0f14/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede497cfbd518c7fafda85bc7b5e26899e5b0f14/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=ede497cfbd518c7fafda85bc7b5e26899e5b0f14", "patch": "@@ -622,7 +622,6 @@ init_optimization_passes (void)\n   *p = NULL;\n   \n   p = &pass_rest_of_compilation.sub;\n-  NEXT_PASS (pass_remove_unnecessary_notes);\n   NEXT_PASS (pass_init_function);\n   NEXT_PASS (pass_jump);\n   NEXT_PASS (pass_insn_locators_initialize);"}, {"sha": "989bea8dc55047a9830d36f1820cf545c67bbe59", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede497cfbd518c7fafda85bc7b5e26899e5b0f14/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede497cfbd518c7fafda85bc7b5e26899e5b0f14/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=ede497cfbd518c7fafda85bc7b5e26899e5b0f14", "patch": "@@ -2065,7 +2065,6 @@ extern void remove_insn (rtx);\n extern void emit_insn_after_with_line_notes (rtx, rtx, rtx);\n extern rtx emit (rtx);\n extern void renumber_insns (void);\n-extern unsigned int remove_unnecessary_notes (void);\n extern rtx delete_insn (rtx);\n extern rtx entry_of_function (void);\n extern void delete_insn_chain (rtx, rtx);"}, {"sha": "be3e876f589b6cad79f03b152973157e2b5204b4", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede497cfbd518c7fafda85bc7b5e26899e5b0f14/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede497cfbd518c7fafda85bc7b5e26899e5b0f14/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=ede497cfbd518c7fafda85bc7b5e26899e5b0f14", "patch": "@@ -2364,19 +2364,9 @@ expand_case (tree exp)\n \t}\n \n \n-      /* Make sure start points to something that won't need any\n-\t transformation before the end of this function.  */\n-      start = get_last_insn ();\n-      if (! NOTE_P (start))\n-\t{\n-\t  emit_note (NOTE_INSN_DELETED);\n-\t  start = get_last_insn ();\n-\t}\n-\n+      before_case = start = get_last_insn ();\n       default_label = label_rtx (default_label_decl);\n \n-      before_case = get_last_insn ();\n-\n       /* Get upper and lower bounds of case values.  */\n \n       uniq = 0;"}, {"sha": "5e0b9233e1cbbbd04bb2b966105984e664026740", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede497cfbd518c7fafda85bc7b5e26899e5b0f14/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede497cfbd518c7fafda85bc7b5e26899e5b0f14/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=ede497cfbd518c7fafda85bc7b5e26899e5b0f14", "patch": "@@ -322,7 +322,6 @@ extern struct tree_opt_pass pass_free_datastructures;\n extern struct tree_opt_pass pass_init_datastructures;\n extern struct tree_opt_pass pass_fixup_cfg;\n \n-extern struct tree_opt_pass pass_remove_unnecessary_notes;\n extern struct tree_opt_pass pass_init_function;\n extern struct tree_opt_pass pass_jump;\n extern struct tree_opt_pass pass_insn_locators_initialize;"}]}