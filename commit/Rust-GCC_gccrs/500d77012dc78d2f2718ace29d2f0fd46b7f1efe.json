{"sha": "500d77012dc78d2f2718ace29d2f0fd46b7f1efe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAwZDc3MDEyZGM3OGQyZjI3MThhY2UyOWQyZjBmZDQ2YjdmMWVmZQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2005-03-27T05:00:12Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2005-03-27T05:00:12Z"}, "message": "Convert libiberty to use ISO C prototype style 3/n.\n\n        * cplus-dem.c (set_cplus_marker_for_demangling, consume_count,\n        consume_count_with_underscores, code_for_qualifier,\n        qualifier_string, demangle_qualifier, cplus_demangle_opname,\n        cplus_mangle_opname, cplus_demangle_set_style,\n        cplus_demangle_name_to_style, cplus_demangle, grow_vect,\n        ada_demangle, internal_cplus_demangle, squangle_mop_up,\n        work_stuff_copy_to_from, delete_non_B_K_work_stuff,\n        delete_work_stuff, mop_up, demangle_signature,\n        demangle_method_args, demangle_template_template_parm,\n        demangle_expression, demangle_integral_value,\n        demangle_real_value, demangle_template_value_parm,\n        demangle_template, arm_pt, demangle_arm_hp_template,\n        demangle_class_name, demangle_class,\n        iterate_demangle_function,\n        demangle_prefix, gnu_special, recursively_demangle,\n        arm_special,\n        demangle_qualified, get_count, do_type, demangle_fund_type,\n        do_hpacc_template_const_value, do_hpacc_template_literal,\n        snarf_numeric_literal, do_arg, remember_type, remember_Ktype,\n        register_Btype, remember_Btype, forget_B_and_K_types,\n        forget_types, demangle_args, demangle_nested_args,\n        demangle_function_name, string_need, string_delete,\n        string_init,\n        string_clear, string_empty, string_append, string_appends,\n        string_appendn, string_prepend, string_prepends,\n        string_prependn,\n        string_append_template_idx): Use ISO C prootype style.\n        * cp-demint.c (cplus_demangle_fill_component,\n        cplus_demangle_fill_builtin_type,\n        cplus_demangle_fill_operator,\n        cplus_demangle_v3_components): Likewise.\n\nFrom-SVN: r97109", "tree": {"sha": "8cdcedf4cdbd827924ecdf84dd554c624c427437", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cdcedf4cdbd827924ecdf84dd554c624c427437"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/500d77012dc78d2f2718ace29d2f0fd46b7f1efe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/500d77012dc78d2f2718ace29d2f0fd46b7f1efe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/500d77012dc78d2f2718ace29d2f0fd46b7f1efe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/500d77012dc78d2f2718ace29d2f0fd46b7f1efe/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e5022f0dcc0471672a62bd7618bf813cd84c7f98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5022f0dcc0471672a62bd7618bf813cd84c7f98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5022f0dcc0471672a62bd7618bf813cd84c7f98"}], "stats": {"total": 544, "additions": 195, "deletions": 349}, "files": [{"sha": "70ba7debc04e3eefb805d177b3a8d1a81c2b04db", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500d77012dc78d2f2718ace29d2f0fd46b7f1efe/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500d77012dc78d2f2718ace29d2f0fd46b7f1efe/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=500d77012dc78d2f2718ace29d2f0fd46b7f1efe", "patch": "@@ -1,3 +1,33 @@\n+2005-03-27  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\tConvert libiberty to use ISO C prototype style 3/n.\n+\t* cplus-dem.c (set_cplus_marker_for_demangling, consume_count, \n+\tconsume_count_with_underscores, code_for_qualifier, \n+\tqualifier_string, demangle_qualifier, cplus_demangle_opname, \n+\tcplus_mangle_opname, cplus_demangle_set_style, \n+\tcplus_demangle_name_to_style, cplus_demangle, grow_vect, \n+\tada_demangle, internal_cplus_demangle, squangle_mop_up,\n+\twork_stuff_copy_to_from, delete_non_B_K_work_stuff, \n+\tdelete_work_stuff, mop_up, demangle_signature, \n+\tdemangle_method_args, demangle_template_template_parm, \n+\tdemangle_expression, demangle_integral_value, \n+\tdemangle_real_value, demangle_template_value_parm, \n+\tdemangle_template, arm_pt, demangle_arm_hp_template, \n+\tdemangle_class_name, demangle_class, iterate_demangle_function, \n+\tdemangle_prefix, gnu_special, recursively_demangle, arm_special, \n+\tdemangle_qualified, get_count, do_type, demangle_fund_type, \n+\tdo_hpacc_template_const_value, do_hpacc_template_literal, \n+\tsnarf_numeric_literal, do_arg, remember_type, remember_Ktype, \n+\tregister_Btype, remember_Btype, forget_B_and_K_types, \n+\tforget_types, demangle_args, demangle_nested_args, \n+\tdemangle_function_name, string_need, string_delete, string_init, \n+\tstring_clear, string_empty, string_append, string_appends, \n+\tstring_appendn, string_prepend, string_prepends, string_prependn,\n+\tstring_append_template_idx): Use ISO C prootype style.\n+\t* cp-demint.c (cplus_demangle_fill_component,\n+\tcplus_demangle_fill_builtin_type, cplus_demangle_fill_operator, \n+\tcplus_demangle_v3_components): Likewise.\n+\n 2005-03-26  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \tConvert libiberty to use ISO C prototype style 2/n."}, {"sha": "8c200baed9a7e1273751b0d22f3d6f48c472a8a2", "filename": "libiberty/cp-demint.c", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500d77012dc78d2f2718ace29d2f0fd46b7f1efe/libiberty%2Fcp-demint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500d77012dc78d2f2718ace29d2f0fd46b7f1efe/libiberty%2Fcp-demint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demint.c?ref=500d77012dc78d2f2718ace29d2f0fd46b7f1efe", "patch": "@@ -56,11 +56,10 @@\n /* Fill in most component types.  */\n \n int\n-cplus_demangle_fill_component (p, type, left, right)\n-     struct demangle_component *p;\n-     enum demangle_component_type type;\n-     struct demangle_component *left;\n-     struct demangle_component *right;\n+cplus_demangle_fill_component (struct demangle_component *p,\n+                               enum demangle_component_type type,\n+                               struct demangle_component *left,\n+                                struct demangle_component *right)\n {\n   if (p == NULL)\n     return 0;\n@@ -130,9 +129,8 @@ cplus_demangle_fill_component (p, type, left, right)\n /* Fill in a DEMANGLE_COMPONENT_BUILTIN_TYPE.  */\n \n int\n-cplus_demangle_fill_builtin_type (p, typename)\n-     struct demangle_component *p;\n-     const char *typename;\n+cplus_demangle_fill_builtin_type (struct demangle_component *p,\n+                                  const char *typename)\n {\n   int len;\n   unsigned int i;\n@@ -156,10 +154,8 @@ cplus_demangle_fill_builtin_type (p, typename)\n /* Fill in a DEMANGLE_COMPONENT_OPERATOR.  */\n \n int\n-cplus_demangle_fill_operator (p, opname, args)\n-     struct demangle_component *p;\n-     const char *opname;\n-     int args;\n+cplus_demangle_fill_operator (struct demangle_component *p,\n+                              const char *opname, int args)\n {\n   int len;\n   unsigned int i;\n@@ -184,10 +180,7 @@ cplus_demangle_fill_operator (p, opname, args)\n /* Translate a mangled name into components.  */\n \n struct demangle_component *\n-cplus_demangle_v3_components (mangled, options, mem)\n-     const char *mangled;\n-     int options;\n-     void **mem;\n+cplus_demangle_v3_components (const char *mangled, int options, void **mem)\n {\n   size_t len;\n   int type;"}, {"sha": "b186963510ff47560fac37e9ccd97821d11c5cf9", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 156, "deletions": 333, "changes": 489, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500d77012dc78d2f2718ace29d2f0fd46b7f1efe/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500d77012dc78d2f2718ace29d2f0fd46b7f1efe/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=500d77012dc78d2f2718ace29d2f0fd46b7f1efe", "patch": "@@ -62,15 +62,15 @@ char * realloc ();\n \n #include \"libiberty.h\"\n \n-static char *ada_demangle  PARAMS ((const char *, int));\n+static char *ada_demangle (const char *, int);\n \n #define min(X,Y) (((X) < (Y)) ? (X) : (Y))\n \n /* A value at least one greater than the maximum number of characters\n    that will be output when using the `%d' format with `printf'.  */\n #define INTBUF_SIZE 32\n \n-extern void fancy_abort PARAMS ((void)) ATTRIBUTE_NORETURN;\n+extern void fancy_abort (void) ATTRIBUTE_NORETURN;\n \n /* In order to allow a single demangler executable to demangle strings\n    using various common values of CPLUS_MARKER, as well as any specific\n@@ -99,8 +99,7 @@ static char cplus_markers[] = { CPLUS_MARKER, '.', '$', '\\0' };\n static char char_str[2] = { '\\000', '\\000' };\n \n void\n-set_cplus_marker_for_demangling (ch)\n-     int ch;\n+set_cplus_marker_for_demangling (int ch)\n {\n   cplus_markers[0] = ch;\n }\n@@ -327,163 +326,127 @@ const struct demangler_engine libiberty_demanglers[] =\n \n /* Prototypes for local functions */\n \n-static void\n-delete_work_stuff PARAMS ((struct work_stuff *));\n+static void delete_work_stuff (struct work_stuff *);\n \n-static void\n-delete_non_B_K_work_stuff PARAMS ((struct work_stuff *));\n+static void delete_non_B_K_work_stuff (struct work_stuff *);\n \n-static char *\n-mop_up PARAMS ((struct work_stuff *, string *, int));\n+static char *mop_up (struct work_stuff *, string *, int);\n \n-static void\n-squangle_mop_up PARAMS ((struct work_stuff *));\n+static void squangle_mop_up (struct work_stuff *);\n \n-static void\n-work_stuff_copy_to_from PARAMS ((struct work_stuff *, struct work_stuff *));\n+static void work_stuff_copy_to_from (struct work_stuff *, struct work_stuff *);\n \n #if 0\n static int\n-demangle_method_args PARAMS ((struct work_stuff *, const char **, string *));\n+demangle_method_args (struct work_stuff *, const char **, string *);\n #endif\n \n static char *\n-internal_cplus_demangle PARAMS ((struct work_stuff *, const char *));\n+internal_cplus_demangle (struct work_stuff *, const char *);\n \n static int\n-demangle_template_template_parm PARAMS ((struct work_stuff *work,\n-\t\t\t\t\t const char **, string *));\n+demangle_template_template_parm (struct work_stuff *work,\n+                                 const char **, string *);\n \n static int\n-demangle_template PARAMS ((struct work_stuff *work, const char **, string *,\n-\t\t\t   string *, int, int));\n+demangle_template (struct work_stuff *work, const char **, string *,\n+                   string *, int, int);\n \n static int\n-arm_pt PARAMS ((struct work_stuff *, const char *, int, const char **,\n-\t\tconst char **));\n+arm_pt (struct work_stuff *, const char *, int, const char **,\n+        const char **);\n \n static int\n-demangle_class_name PARAMS ((struct work_stuff *, const char **, string *));\n+demangle_class_name (struct work_stuff *, const char **, string *);\n \n static int\n-demangle_qualified PARAMS ((struct work_stuff *, const char **, string *,\n-\t\t\t    int, int));\n+demangle_qualified (struct work_stuff *, const char **, string *,\n+                    int, int);\n \n-static int\n-demangle_class PARAMS ((struct work_stuff *, const char **, string *));\n+static int demangle_class (struct work_stuff *, const char **, string *);\n \n-static int\n-demangle_fund_type PARAMS ((struct work_stuff *, const char **, string *));\n+static int demangle_fund_type (struct work_stuff *, const char **, string *);\n \n-static int\n-demangle_signature PARAMS ((struct work_stuff *, const char **, string *));\n+static int demangle_signature (struct work_stuff *, const char **, string *);\n \n-static int\n-demangle_prefix PARAMS ((struct work_stuff *, const char **, string *));\n+static int demangle_prefix (struct work_stuff *, const char **, string *);\n \n-static int\n-gnu_special PARAMS ((struct work_stuff *, const char **, string *));\n+static int gnu_special (struct work_stuff *, const char **, string *);\n \n-static int\n-arm_special PARAMS ((const char **, string *));\n+static int arm_special (const char **, string *);\n \n-static void\n-string_need PARAMS ((string *, int));\n+static void string_need (string *, int);\n \n-static void\n-string_delete PARAMS ((string *));\n+static void string_delete (string *);\n \n static void\n-string_init PARAMS ((string *));\n+string_init (string *);\n \n-static void\n-string_clear PARAMS ((string *));\n+static void string_clear (string *);\n \n #if 0\n-static int\n-string_empty PARAMS ((string *));\n+static int string_empty (string *);\n #endif\n \n-static void\n-string_append PARAMS ((string *, const char *));\n+static void string_append (string *, const char *);\n \n-static void\n-string_appends PARAMS ((string *, string *));\n+static void string_appends (string *, string *);\n \n-static void\n-string_appendn PARAMS ((string *, const char *, int));\n+static void string_appendn (string *, const char *, int);\n \n-static void\n-string_prepend PARAMS ((string *, const char *));\n+static void string_prepend (string *, const char *);\n \n-static void\n-string_prependn PARAMS ((string *, const char *, int));\n+static void string_prependn (string *, const char *, int);\n \n-static void\n-string_append_template_idx PARAMS ((string *, int));\n+static void string_append_template_idx (string *, int);\n \n-static int\n-get_count PARAMS ((const char **, int *));\n+static int get_count (const char **, int *);\n \n-static int\n-consume_count PARAMS ((const char **));\n+static int consume_count (const char **);\n \n-static int\n-consume_count_with_underscores PARAMS ((const char**));\n+static int consume_count_with_underscores (const char**);\n \n-static int\n-demangle_args PARAMS ((struct work_stuff *, const char **, string *));\n+static int demangle_args (struct work_stuff *, const char **, string *);\n \n-static int\n-demangle_nested_args PARAMS ((struct work_stuff*, const char**, string*));\n+static int demangle_nested_args (struct work_stuff*, const char**, string*);\n \n-static int\n-do_type PARAMS ((struct work_stuff *, const char **, string *));\n+static int do_type (struct work_stuff *, const char **, string *);\n \n-static int\n-do_arg PARAMS ((struct work_stuff *, const char **, string *));\n+static int do_arg (struct work_stuff *, const char **, string *);\n \n static void\n-demangle_function_name PARAMS ((struct work_stuff *, const char **, string *,\n-\t\t\t\tconst char *));\n+demangle_function_name (struct work_stuff *, const char **, string *,\n+                        const char *);\n \n static int\n-iterate_demangle_function PARAMS ((struct work_stuff *,\n-\t\t\t\t   const char **, string *, const char *));\n+iterate_demangle_function (struct work_stuff *,\n+                           const char **, string *, const char *);\n \n-static void\n-remember_type PARAMS ((struct work_stuff *, const char *, int));\n+static void remember_type (struct work_stuff *, const char *, int);\n \n-static void\n-remember_Btype PARAMS ((struct work_stuff *, const char *, int, int));\n+static void remember_Btype (struct work_stuff *, const char *, int, int);\n \n-static int\n-register_Btype PARAMS ((struct work_stuff *));\n+static int register_Btype (struct work_stuff *);\n \n-static void\n-remember_Ktype PARAMS ((struct work_stuff *, const char *, int));\n+static void remember_Ktype (struct work_stuff *, const char *, int);\n \n-static void\n-forget_types PARAMS ((struct work_stuff *));\n+static void forget_types (struct work_stuff *);\n \n-static void\n-forget_B_and_K_types PARAMS ((struct work_stuff *));\n+static void forget_B_and_K_types (struct work_stuff *);\n \n-static void\n-string_prepends PARAMS ((string *, string *));\n+static void string_prepends (string *, string *);\n \n static int\n-demangle_template_value_parm PARAMS ((struct work_stuff*, const char**,\n-\t\t\t\t      string*, type_kind_t));\n+demangle_template_value_parm (struct work_stuff*, const char**,\n+                              string*, type_kind_t);\n \n static int\n-do_hpacc_template_const_value PARAMS ((struct work_stuff *, const char **, string *));\n+do_hpacc_template_const_value (struct work_stuff *, const char **, string *);\n \n static int\n-do_hpacc_template_literal PARAMS ((struct work_stuff *, const char **, string *));\n+do_hpacc_template_literal (struct work_stuff *, const char **, string *);\n \n-static int\n-snarf_numeric_literal PARAMS ((const char **, string *));\n+static int snarf_numeric_literal (const char **, string *);\n \n /* There is a TYPE_QUAL value for each type qualifier.  They can be\n    combined by bitwise-or to form the complete set of qualifiers for a\n@@ -494,36 +457,28 @@ snarf_numeric_literal PARAMS ((const char **, string *));\n #define TYPE_QUAL_VOLATILE 0x2\n #define TYPE_QUAL_RESTRICT 0x4\n \n-static int\n-code_for_qualifier PARAMS ((int));\n+static int code_for_qualifier (int);\n \n-static const char*\n-qualifier_string PARAMS ((int));\n+static const char* qualifier_string (int);\n \n-static const char*\n-demangle_qualifier PARAMS ((int));\n+static const char* demangle_qualifier (int);\n \n-static int\n-demangle_expression PARAMS ((struct work_stuff *, const char **, string *, \n-\t\t\t     type_kind_t));\n+static int demangle_expression (struct work_stuff *, const char **, string *, \n+                                type_kind_t);\n \n static int\n-demangle_integral_value PARAMS ((struct work_stuff *, const char **,\n-\t\t\t\t string *));\n+demangle_integral_value (struct work_stuff *, const char **, string *);\n \n static int\n-demangle_real_value PARAMS ((struct work_stuff *, const char **, string *));\n+demangle_real_value (struct work_stuff *, const char **, string *);\n \n static void\n-demangle_arm_hp_template PARAMS ((struct work_stuff *, const char **, int,\n-\t\t\t\t  string *));\n+demangle_arm_hp_template (struct work_stuff *, const char **, int, string *);\n \n static void\n-recursively_demangle PARAMS ((struct work_stuff *, const char **, string *,\n-\t\t\t      int));\n+recursively_demangle (struct work_stuff *, const char **, string *, int);\n \n-static void\n-grow_vect PARAMS ((char **, size_t *, size_t, int));\n+static void grow_vect (char **, size_t *, size_t, int);\n \n /* Translate count to integer, consuming tokens in the process.\n    Conversion terminates on the first non-digit character.\n@@ -534,8 +489,7 @@ grow_vect PARAMS ((char **, size_t *, size_t, int));\n    Overflow consumes the rest of the digits, and returns -1.  */\n \n static int\n-consume_count (type)\n-     const char **type;\n+consume_count (const char **type)\n {\n   int count = 0;\n \n@@ -574,8 +528,7 @@ consume_count (type)\n    failure, since 0 can be a valid value.  */\n \n static int\n-consume_count_with_underscores (mangled)\n-     const char **mangled;\n+consume_count_with_underscores (const char **mangled)\n {\n   int idx;\n \n@@ -608,8 +561,7 @@ consume_count_with_underscores (mangled)\n    corresponding to this qualifier.  */\n \n static int\n-code_for_qualifier (c)\n-  int c;\n+code_for_qualifier (int c)\n {\n   switch (c)\n     {\n@@ -634,8 +586,7 @@ code_for_qualifier (c)\n    TYPE_QUALS.  */\n \n static const char*\n-qualifier_string (type_quals)\n-     int type_quals;\n+qualifier_string (int type_quals)\n {\n   switch (type_quals)\n     {\n@@ -676,17 +627,13 @@ qualifier_string (type_quals)\n    called with a valid qualifier code.  */\n \n static const char*\n-demangle_qualifier (c)\n-  int c;\n+demangle_qualifier (int c)\n {\n   return qualifier_string (code_for_qualifier (c));\n }\n \n int\n-cplus_demangle_opname (opname, result, options)\n-     const char *opname;\n-     char *result;\n-     int options;\n+cplus_demangle_opname (const char *opname, char *result, int options)\n {\n   int len, len1, ret;\n   string type;\n@@ -819,9 +766,7 @@ cplus_demangle_opname (opname, result, options)\n    if OPTIONS & DMGL_ANSI == 0, return the old GNU name.  */\n \n const char *\n-cplus_mangle_opname (opname, options)\n-     const char *opname;\n-     int options;\n+cplus_mangle_opname (const char *opname, int options)\n {\n   size_t i;\n   int len;\n@@ -841,8 +786,7 @@ cplus_mangle_opname (opname, options)\n    allow for any demangler initialization that maybe necessary. */\n \n enum demangling_styles\n-cplus_demangle_set_style (style)\n-     enum demangling_styles style;\n+cplus_demangle_set_style (enum demangling_styles style)\n {\n   const struct demangler_engine *demangler = libiberty_demanglers; \n \n@@ -859,8 +803,7 @@ cplus_demangle_set_style (style)\n /* Do string name to style translation */\n \n enum demangling_styles\n-cplus_demangle_name_to_style (name)\n-     const char *name;\n+cplus_demangle_name_to_style (const char *name)\n {\n   const struct demangler_engine *demangler = libiberty_demanglers; \n \n@@ -900,9 +843,7 @@ cplus_demangle_name_to_style (name)\n    MANGLED.  */\n \n char *\n-cplus_demangle (mangled, options)\n-     const char *mangled;\n-     int options;\n+cplus_demangle (const char *mangled, int options)\n {\n   char *ret;\n   struct work_stuff work[1];\n@@ -944,11 +885,7 @@ cplus_demangle (mangled, options)\n    updating *OLD_VECT and *SIZE as necessary.  */\n \n static void\n-grow_vect (old_vect, size, min_size, element_size)\n-     char **old_vect;\n-     size_t *size;\n-     size_t min_size;\n-     int element_size;\n+grow_vect (char **old_vect, size_t *size, size_t min_size, int element_size)\n {\n   if (*size < min_size)\n     {\n@@ -968,9 +905,7 @@ grow_vect (old_vect, size, min_size, element_size)\n    The resulting string is valid until the next call of ada_demangle.  */\n \n static char *\n-ada_demangle (mangled, option)\n-     const char *mangled;\n-     int option ATTRIBUTE_UNUSED;\n+ada_demangle (const char *mangled, int option ATTRIBUTE_UNUSED)\n {\n   int i, j;\n   int len0;\n@@ -1073,9 +1008,7 @@ ada_demangle (mangled, option)\n    calls go directly to this routine to avoid resetting that info. */\n \n static char *\n-internal_cplus_demangle (work, mangled)\n-     struct work_stuff *work;\n-     const char *mangled;\n+internal_cplus_demangle (struct work_stuff *work, const char *mangled)\n {\n \n   string decl;\n@@ -1140,8 +1073,7 @@ internal_cplus_demangle (work, mangled)\n \n /* Clear out and squangling related storage */\n static void\n-squangle_mop_up (work)\n-     struct work_stuff *work;\n+squangle_mop_up (struct work_stuff *work)\n {\n   /* clean up the B and K type mangling types. */\n   forget_B_and_K_types (work);\n@@ -1159,9 +1091,7 @@ squangle_mop_up (work)\n /* Copy the work state and storage.  */\n \n static void\n-work_stuff_copy_to_from (to, from)\n-     struct work_stuff *to;\n-     struct work_stuff *from;\n+work_stuff_copy_to_from (struct work_stuff *to, struct work_stuff *from)\n {\n   int i;\n \n@@ -1231,8 +1161,7 @@ work_stuff_copy_to_from (to, from)\n /* Delete dynamic stuff in work_stuff that is not to be re-used.  */\n \n static void\n-delete_non_B_K_work_stuff (work)\n-     struct work_stuff *work;\n+delete_non_B_K_work_stuff (struct work_stuff *work)\n {\n   /* Discard the remembered types, if any.  */\n \n@@ -1265,8 +1194,7 @@ delete_non_B_K_work_stuff (work)\n \n /* Delete all dynamic storage in work_stuff.  */\n static void\n-delete_work_stuff (work)\n-     struct work_stuff *work;\n+delete_work_stuff (struct work_stuff *work)\n {\n   delete_non_B_K_work_stuff (work);\n   squangle_mop_up (work);\n@@ -1276,10 +1204,7 @@ delete_work_stuff (work)\n /* Clear out any mangled storage */\n \n static char *\n-mop_up (work, declp, success)\n-     struct work_stuff *work;\n-     string *declp;\n-     int success;\n+mop_up (struct work_stuff *work, string *declp, int success)\n {\n   char *demangled = NULL;\n \n@@ -1331,10 +1256,8 @@ DESCRIPTION\n \targument list.  */\n \n static int\n-demangle_signature (work, mangled, declp)\n-     struct work_stuff *work;\n-     const char **mangled;\n-     string *declp;\n+demangle_signature (struct work_stuff *work,\n+                    const char **mangled, string *declp)\n {\n   int success = 1;\n   int func_done = 0;\n@@ -1624,10 +1547,8 @@ demangle_signature (work, mangled, declp)\n #if 0\n \n static int\n-demangle_method_args (work, mangled, declp)\n-     struct work_stuff *work;\n-     const char **mangled;\n-     string *declp;\n+demangle_method_args (struct work_stuff *work, const char **mangled,\n+                      string *declp)\n {\n   int success = 0;\n \n@@ -1647,10 +1568,8 @@ demangle_method_args (work, mangled, declp)\n #endif\n \n static int\n-demangle_template_template_parm (work, mangled, tname)\n-     struct work_stuff *work;\n-     const char **mangled;\n-     string *tname;\n+demangle_template_template_parm (struct work_stuff *work,\n+                                 const char **mangled, string *tname)\n {\n   int i;\n   int r;\n@@ -1711,11 +1630,8 @@ demangle_template_template_parm (work, mangled, tname)\n }\n \n static int\n-demangle_expression (work, mangled, s, tk)\n-     struct work_stuff *work;\n-     const char** mangled;\n-     string* s;\n-     type_kind_t tk;\n+demangle_expression (struct work_stuff *work, const char **mangled,\n+                     string *s, type_kind_t tk)\n {\n   int need_operator = 0;\n   int success;\n@@ -1771,10 +1687,8 @@ demangle_expression (work, mangled, s, tk)\n }\n \n static int\n-demangle_integral_value (work, mangled, s)\n-     struct work_stuff *work;\n-     const char** mangled;\n-     string* s;\n+demangle_integral_value (struct work_stuff *work,\n+                         const char **mangled, string *s)\n {\n   int success;\n \n@@ -1869,10 +1783,8 @@ demangle_integral_value (work, mangled, s)\n /* Demangle the real value in MANGLED.  */\n \n static int\n-demangle_real_value (work, mangled, s)\n-     struct work_stuff *work;\n-     const char **mangled;\n-     string* s;\n+demangle_real_value (struct work_stuff *work,\n+                     const char **mangled, string *s)\n {\n   if (**mangled == 'E')\n     return demangle_expression (work, mangled, s, tk_real);\n@@ -1912,11 +1824,8 @@ demangle_real_value (work, mangled, s)\n }\n \n static int\n-demangle_template_value_parm (work, mangled, s, tk)\n-     struct work_stuff *work;\n-     const char **mangled;\n-     string* s;\n-     type_kind_t tk;\n+demangle_template_value_parm (struct work_stuff *work, const char **mangled,\n+                              string *s, type_kind_t tk)\n {\n   int success = 1;\n \n@@ -2024,13 +1933,9 @@ demangle_template_value_parm (work, mangled, s, tk)\n    types.  */\n \n static int\n-demangle_template (work, mangled, tname, trawname, is_type, remember)\n-     struct work_stuff *work;\n-     const char **mangled;\n-     string *tname;\n-     string *trawname;\n-     int is_type;\n-     int remember;\n+demangle_template (struct work_stuff *work, const char **mangled,\n+                   string *tname, string *trawname,\n+                   int is_type, int remember)\n {\n   int i;\n   int r;\n@@ -2239,11 +2144,8 @@ demangle_template (work, mangled, tname, trawname, is_type, remember)\n }\n \n static int\n-arm_pt (work, mangled, n, anchor, args)\n-     struct work_stuff *work;\n-     const char *mangled;\n-     int n;\n-     const char **anchor, **args;\n+arm_pt (struct work_stuff *work, const char *mangled,\n+        int n, const char **anchor, const char **args)\n {\n   /* Check if ARM template with \"__pt__\" in it (\"parameterized type\") */\n   /* Allow HP also here, because HP's cfront compiler follows ARM to some extent */\n@@ -2296,11 +2198,8 @@ arm_pt (work, mangled, n, anchor, args)\n }\n \n static void\n-demangle_arm_hp_template (work, mangled, n, declp)\n-     struct work_stuff *work;\n-     const char **mangled;\n-     int n;\n-     string *declp;\n+demangle_arm_hp_template (struct work_stuff *work, const char **mangled,\n+                          int n, string *declp)\n {\n   const char *p;\n   const char *args;\n@@ -2477,10 +2376,8 @@ demangle_arm_hp_template (work, mangled, n, declp)\n    already been dealt with */\n \n static int\n-demangle_class_name (work, mangled, declp)\n-     struct work_stuff *work;\n-     const char **mangled;\n-     string *declp;\n+demangle_class_name (struct work_stuff *work, const char **mangled,\n+                     string *declp)\n {\n   int n;\n   int success = 0;\n@@ -2533,10 +2430,7 @@ DESCRIPTION\n */\n \n static int\n-demangle_class (work, mangled, declp)\n-     struct work_stuff *work;\n-     const char **mangled;\n-     string *declp;\n+demangle_class (struct work_stuff *work, const char **mangled, string *declp)\n {\n   int success = 0;\n   int btype;\n@@ -2588,11 +2482,8 @@ demangle_class (work, mangled, declp)\n    demangle_signature.  */\n \n static int\n-iterate_demangle_function (work, mangled, declp, scan)\n-     struct work_stuff *work;\n-     const char **mangled;\n-     string *declp;\n-     const char *scan;\n+iterate_demangle_function (struct work_stuff *work, const char **mangled,\n+                           string *declp, const char *scan)\n {\n   const char *mangle_init = *mangled;\n   int success = 0;\n@@ -2691,10 +2582,8 @@ DESCRIPTION\n  */\n \n static int\n-demangle_prefix (work, mangled, declp)\n-     struct work_stuff *work;\n-     const char **mangled;\n-     string *declp;\n+demangle_prefix (struct work_stuff *work, const char **mangled,\n+                 string *declp)\n {\n   int success = 1;\n   const char *scan;\n@@ -2902,10 +2791,7 @@ DESCRIPTION\n  */\n \n static int\n-gnu_special (work, mangled, declp)\n-     struct work_stuff *work;\n-     const char **mangled;\n-     string *declp;\n+gnu_special (struct work_stuff *work, const char **mangled, string *declp)\n {\n   int n;\n   int success = 1;\n@@ -3106,11 +2992,8 @@ gnu_special (work, mangled, declp)\n }\n \n static void\n-recursively_demangle(work, mangled, result, namelength)\n-     struct work_stuff *work;\n-     const char **mangled;\n-     string *result;\n-     int namelength;\n+recursively_demangle(struct work_stuff *work, const char **mangled,\n+                     string *result, int namelength)\n {\n   char * recurse = (char *)NULL;\n   char * recurse_dem = (char *)NULL;\n@@ -3158,9 +3041,7 @@ DESCRIPTION\n  */\n \n static int\n-arm_special (mangled, declp)\n-     const char **mangled;\n-     string *declp;\n+arm_special (const char **mangled, string *declp)\n {\n   int n;\n   int success = 1;\n@@ -3243,12 +3124,8 @@ BUGS\n  */\n \n static int\n-demangle_qualified (work, mangled, result, isfuncname, append)\n-     struct work_stuff *work;\n-     const char **mangled;\n-     string *result;\n-     int isfuncname;\n-     int append;\n+demangle_qualified (struct work_stuff *work, const char **mangled,\n+                    string *result, int isfuncname, int append)\n {\n   int qualifiers = 0;\n   int success = 1;\n@@ -3470,9 +3347,7 @@ DESCRIPTION\n */\n \n static int\n-get_count (type, count)\n-     const char **type;\n-     int *count;\n+get_count (const char **type, int *count)\n {\n   const char *p;\n   int n;\n@@ -3508,10 +3383,7 @@ get_count (type, count)\n    value returned is really a type_kind_t.  */\n \n static int\n-do_type (work, mangled, result)\n-     struct work_stuff *work;\n-     const char **mangled;\n-     string *result;\n+do_type (struct work_stuff *work, const char **mangled, string *result)\n {\n   int n;\n   int done;\n@@ -3820,10 +3692,8 @@ do_type (work, mangled, result)\n    The value returned is really a type_kind_t.  */\n \n static int\n-demangle_fund_type (work, mangled, result)\n-     struct work_stuff *work;\n-     const char **mangled;\n-     string *result;\n+demangle_fund_type (struct work_stuff *work,\n+                    const char **mangled, string *result)\n {\n   int done = 0;\n   int success = 1;\n@@ -4022,10 +3892,8 @@ demangle_fund_type (work, mangled, result)\n    **mangled points to 'S' or 'U' */\n \n static int\n-do_hpacc_template_const_value (work, mangled, result)\n-     struct work_stuff *work ATTRIBUTE_UNUSED;\n-     const char **mangled;\n-     string *result;\n+do_hpacc_template_const_value (struct work_stuff *work ATTRIBUTE_UNUSED,\n+                               const char **mangled, string *result)\n {\n   int unsigned_const;\n \n@@ -4079,10 +3947,8 @@ do_hpacc_template_const_value (work, mangled, result)\n    **mangled is pointing to the 'A' */\n \n static int\n-do_hpacc_template_literal (work, mangled, result)\n-     struct work_stuff *work;\n-     const char **mangled;\n-     string *result;\n+do_hpacc_template_literal (struct work_stuff *work, const char **mangled,\n+                           string *result)\n {\n   int literal_len = 0;\n   char * recurse;\n@@ -4125,9 +3991,7 @@ do_hpacc_template_literal (work, mangled, result)\n }\n \n static int\n-snarf_numeric_literal (args, arg)\n-     const char ** args;\n-     string * arg;\n+snarf_numeric_literal (const char **args, string *arg)\n {\n   if (**args == '-')\n     {\n@@ -4156,10 +4020,7 @@ snarf_numeric_literal (args, arg)\n    and free'd should anything go wrong.  */\n \n static int\n-do_arg (work, mangled, result)\n-     struct work_stuff *work;\n-     const char **mangled;\n-     string *result;\n+do_arg (struct work_stuff *work, const char **mangled, string *result)\n {\n   /* Remember where we started so that we can record the type, for\n      non-squangling type remembering.  */\n@@ -4222,10 +4083,7 @@ do_arg (work, mangled, result)\n }\n \n static void\n-remember_type (work, start, len)\n-     struct work_stuff *work;\n-     const char *start;\n-     int len;\n+remember_type (struct work_stuff *work, const char *start, int len)\n {\n   char *tem;\n \n@@ -4257,10 +4115,7 @@ remember_type (work, start, len)\n \n /* Remember a K type class qualifier. */\n static void\n-remember_Ktype (work, start, len)\n-     struct work_stuff *work;\n-     const char *start;\n-     int len;\n+remember_Ktype (struct work_stuff *work, const char *start, int len)\n {\n   char *tem;\n \n@@ -4291,8 +4146,7 @@ remember_Ktype (work, start, len)\n    registers map<temp<char> > as B0, and temp<char> as B1 */\n \n static int\n-register_Btype (work)\n-     struct work_stuff *work;\n+register_Btype (struct work_stuff *work)\n {\n   int ret;\n \n@@ -4320,10 +4174,8 @@ register_Btype (work)\n /* Store a value into a previously registered B code type. */\n \n static void\n-remember_Btype (work, start, len, index)\n-     struct work_stuff *work;\n-     const char *start;\n-     int len, index;\n+remember_Btype (struct work_stuff *work, const char *start,\n+                int len, int index)\n {\n   char *tem;\n \n@@ -4335,8 +4187,7 @@ remember_Btype (work, start, len, index)\n \n /* Lose all the info related to B and K type codes. */\n static void\n-forget_B_and_K_types (work)\n-     struct work_stuff *work;\n+forget_B_and_K_types (struct work_stuff *work)\n {\n   int i;\n \n@@ -4363,8 +4214,7 @@ forget_B_and_K_types (work)\n /* Forget the remembered types, but not the type vector itself.  */\n \n static void\n-forget_types (work)\n-     struct work_stuff *work;\n+forget_types (struct work_stuff *work)\n {\n   int i;\n \n@@ -4422,10 +4272,8 @@ forget_types (work)\n  */\n \n static int\n-demangle_args (work, mangled, declp)\n-     struct work_stuff *work;\n-     const char **mangled;\n-     string *declp;\n+demangle_args (struct work_stuff *work, const char **mangled,\n+               string *declp)\n {\n   string arg;\n   int need_comma = 0;\n@@ -4547,10 +4395,8 @@ demangle_args (work, mangled, declp)\n    and method pointers or references, not top-level declarations.  */\n \n static int\n-demangle_nested_args (work, mangled, declp)\n-     struct work_stuff *work;\n-     const char **mangled;\n-     string *declp;\n+demangle_nested_args (struct work_stuff *work, const char **mangled,\n+                      string *declp)\n {\n   string* saved_previous_argument;\n   int result;\n@@ -4586,11 +4432,8 @@ demangle_nested_args (work, mangled, declp)\n }\n \n static void\n-demangle_function_name (work, mangled, declp, scan)\n-     struct work_stuff *work;\n-     const char **mangled;\n-     string *declp;\n-     const char *scan;\n+demangle_function_name (struct work_stuff *work, const char **mangled,\n+                        string *declp, const char *scan)\n {\n   size_t i;\n   string type;\n@@ -4747,9 +4590,7 @@ demangle_function_name (work, mangled, declp, scan)\n /* a mini string-handling package */\n \n static void\n-string_need (s, n)\n-     string *s;\n-     int n;\n+string_need (string *s, int n)\n {\n   int tem;\n \n@@ -4774,8 +4615,7 @@ string_need (s, n)\n }\n \n static void\n-string_delete (s)\n-     string *s;\n+string_delete (string *s)\n {\n   if (s->b != NULL)\n     {\n@@ -4785,34 +4625,29 @@ string_delete (s)\n }\n \n static void\n-string_init (s)\n-     string *s;\n+string_init (string *s)\n {\n   s->b = s->p = s->e = NULL;\n }\n \n static void\n-string_clear (s)\n-     string *s;\n+string_clear (string *s)\n {\n   s->p = s->b;\n }\n \n #if 0\n \n static int\n-string_empty (s)\n-     string *s;\n+string_empty (string *s)\n {\n   return (s->b == s->p);\n }\n \n #endif\n \n static void\n-string_append (p, s)\n-     string *p;\n-     const char *s;\n+string_append (string *p, const char *s)\n {\n   int n;\n   if (s == NULL || *s == '\\0')\n@@ -4824,8 +4659,7 @@ string_append (p, s)\n }\n \n static void\n-string_appends (p, s)\n-     string *p, *s;\n+string_appends (string *p, string *s)\n {\n   int n;\n \n@@ -4839,10 +4673,7 @@ string_appends (p, s)\n }\n \n static void\n-string_appendn (p, s, n)\n-     string *p;\n-     const char *s;\n-     int n;\n+string_appendn (string *p, const char *s, int n)\n {\n   if (n != 0)\n     {\n@@ -4853,9 +4684,7 @@ string_appendn (p, s, n)\n }\n \n static void\n-string_prepend (p, s)\n-     string *p;\n-     const char *s;\n+string_prepend (string *p, const char *s)\n {\n   if (s != NULL && *s != '\\0')\n     {\n@@ -4864,8 +4693,7 @@ string_prepend (p, s)\n }\n \n static void\n-string_prepends (p, s)\n-     string *p, *s;\n+string_prepends (string *p, string *s)\n {\n   if (s->b != s->p)\n     {\n@@ -4874,10 +4702,7 @@ string_prepends (p, s)\n }\n \n static void\n-string_prependn (p, s, n)\n-     string *p;\n-     const char *s;\n-     int n;\n+string_prependn (string *p, const char *s, int n)\n {\n   char *q;\n \n@@ -4894,9 +4719,7 @@ string_prependn (p, s, n)\n }\n \n static void\n-string_append_template_idx (s, idx)\n-     string *s;\n-     int idx;\n+string_append_template_idx (string *s, int idx)\n {\n   char buf[INTBUF_SIZE + 1 /* 'T' */];\n   sprintf(buf, \"T%d\", idx);"}]}