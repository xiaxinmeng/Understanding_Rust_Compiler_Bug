{"sha": "1449b8cba879ff1bedf7863f63ef079b2026c0a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ0OWI4Y2JhODc5ZmYxYmVkZjc4NjNmNjNlZjA3OWIyMDI2YzBhMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-10-01T11:50:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-10-01T11:50:10Z"}, "message": "libgfortran.h (GFC_ITOA_BUF_SIZE, [...]): Define.\n\n\t* libgfortran.h (GFC_ITOA_BUF_SIZE, GFC_XTOA_BUF_SIZE,\n\tGFC_OTOA_BUF_SIZE, GFC_BTOA_BUF_SIZE): Define.\n\t(gfc_itoa, xtoa): Add 2 extra arguments.\n\t* runtime/environ.c: Include stdio.h.\n\t(check_buffered): Use sprintf.\n\t* runtime/error.c: Include assert.h.\n\t(gfc_itoa, xtoa): Add 2 extra arguments, avoid using static\n\tbuffers.\n\t(st_printf, st_sprintf): Adjust callers.\n\t* io/write.c (otoa, btoa): Add 2 extra arguments, avoid using\n\tstatic buffers.\n\t(write_int, write_decimal): Add 2 extra arguments to conv\n\tfunction pointer, adjust caller.\n\t(write_integer): Adjust gfc_itoa caller.\n\n\t* io/unit.c (get_array_unit_len): Return 0 rather than NULL.\n\n\t* io/read.c (read_f): Remove spurious pointer dereference.\n\nFrom-SVN: r104855", "tree": {"sha": "be9e8c61a086ff18a3169c8a58d1c4886f88a747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be9e8c61a086ff18a3169c8a58d1c4886f88a747"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1449b8cba879ff1bedf7863f63ef079b2026c0a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1449b8cba879ff1bedf7863f63ef079b2026c0a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1449b8cba879ff1bedf7863f63ef079b2026c0a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1449b8cba879ff1bedf7863f63ef079b2026c0a1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fdf84417b930dec65dbabe735ca984080079af6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf84417b930dec65dbabe735ca984080079af6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdf84417b930dec65dbabe735ca984080079af6e"}], "stats": {"total": 167, "additions": 95, "deletions": 72}, "files": [{"sha": "3b5abd2d814ca68330f9f9a9bb3a899295413795", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1449b8cba879ff1bedf7863f63ef079b2026c0a1/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1449b8cba879ff1bedf7863f63ef079b2026c0a1/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=1449b8cba879ff1bedf7863f63ef079b2026c0a1", "patch": "@@ -1,3 +1,24 @@\n+2005-10-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libgfortran.h (GFC_ITOA_BUF_SIZE, GFC_XTOA_BUF_SIZE,\n+\tGFC_OTOA_BUF_SIZE, GFC_BTOA_BUF_SIZE): Define.\n+\t(gfc_itoa, xtoa): Add 2 extra arguments.\n+\t* runtime/environ.c: Include stdio.h.\n+\t(check_buffered): Use sprintf.\n+\t* runtime/error.c: Include assert.h.\n+\t(gfc_itoa, xtoa): Add 2 extra arguments, avoid using static\n+\tbuffers.\n+\t(st_printf, st_sprintf): Adjust callers.\n+\t* io/write.c (otoa, btoa): Add 2 extra arguments, avoid using\n+\tstatic buffers.\n+\t(write_int, write_decimal): Add 2 extra arguments to conv\n+\tfunction pointer, adjust caller.\n+\t(write_integer): Adjust gfc_itoa caller.\n+\n+\t* io/unit.c (get_array_unit_len): Return 0 rather than NULL.\n+\n+\t* io/read.c (read_f): Remove spurious pointer dereference.\n+\n 2005-09-30  Janne Blomqvist <jblomqvi@cc.hut.fi>\n \n \tPR 24112"}, {"sha": "a3a221ae14666684f135348556760d363c9b4594", "filename": "libgfortran/io/read.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1449b8cba879ff1bedf7863f63ef079b2026c0a1/libgfortran%2Fio%2Fread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1449b8cba879ff1bedf7863f63ef079b2026c0a1/libgfortran%2Fio%2Fread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fread.c?ref=1449b8cba879ff1bedf7863f63ef079b2026c0a1", "patch": "@@ -621,7 +621,7 @@ read_f (fnode * f, char *dest, int length)\n \tcase '9':\n \tcase ' ':\n \t  ndigits++;\n-\t  *p++;\n+\t  p++;\n \t  w--;\n \t  break;\n "}, {"sha": "b078d87c96ac96e938f84cfda71c4275df79073a", "filename": "libgfortran/io/unit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1449b8cba879ff1bedf7863f63ef079b2026c0a1/libgfortran%2Fio%2Funit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1449b8cba879ff1bedf7863f63ef079b2026c0a1/libgfortran%2Fio%2Funit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funit.c?ref=1449b8cba879ff1bedf7863f63ef079b2026c0a1", "patch": "@@ -261,7 +261,7 @@ get_array_unit_len (gfc_array_char *desc)\n       if (desc->dim[i].stride != stride)\n \t{\n \t  generate_error (ERROR_ARRAY_STRIDE, NULL);\n-\t  return NULL;\n+\t  return 0;\n \t}\n       stride *= desc->dim[i].ubound;\n       record_count *= desc->dim[i].ubound;"}, {"sha": "b21399ff86162adcb437cf47e31302a83de76165", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1449b8cba879ff1bedf7863f63ef079b2026c0a1/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1449b8cba879ff1bedf7863f63ef079b2026c0a1/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=1449b8cba879ff1bedf7863f63ef079b2026c0a1", "patch": "@@ -29,6 +29,7 @@ the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n Boston, MA 02110-1301, USA.  */\n \n #include \"config.h\"\n+#include <assert.h>\n #include <string.h>\n #include <ctype.h>\n #include <float.h>\n@@ -910,11 +911,13 @@ write_float (fnode *f, const char *source, int len)\n \n static void\n write_int (fnode *f, const char *source, int len,\n-           char *(*conv) (GFC_UINTEGER_LARGEST))\n+           const char *(*conv) (GFC_UINTEGER_LARGEST, char *, size_t))\n {\n   GFC_UINTEGER_LARGEST n = 0;\n   int w, m, digits, nzero, nblank;\n-  char *p, *q;\n+  char *p;\n+  const char *q;\n+  char itoa_buf[GFC_BTOA_BUF_SIZE];\n \n   w = f->u.integer.w;\n   m = f->u.integer.m;\n@@ -936,7 +939,7 @@ write_int (fnode *f, const char *source, int len,\n       goto done;\n     }\n \n-  q = conv (n);\n+  q = conv (n, itoa_buf, sizeof (itoa_buf));\n   digits = strlen (q);\n \n   /* Select a width if none was specified.  The idea here is to always\n@@ -988,12 +991,14 @@ write_int (fnode *f, const char *source, int len,\n \n static void\n write_decimal (fnode *f, const char *source, int len,\n-               char *(*conv) (GFC_INTEGER_LARGEST))\n+               const char *(*conv) (GFC_INTEGER_LARGEST, char *, size_t))\n {\n   GFC_INTEGER_LARGEST n = 0;\n   int w, m, digits, nsign, nzero, nblank;\n-  char *p, *q;\n+  char *p;\n+  const char *q;\n   sign_t sign;\n+  char itoa_buf[GFC_BTOA_BUF_SIZE];\n \n   w = f->u.integer.w;\n   m = f->u.integer.m;\n@@ -1020,7 +1025,7 @@ write_decimal (fnode *f, const char *source, int len,\n     n = -n;\n \n   nsign = sign == SIGN_NONE ? 0 : 1;\n-  q = conv (n);\n+  q = conv (n, itoa_buf, sizeof (itoa_buf));\n \n   digits = strlen (q);\n \n@@ -1075,56 +1080,51 @@ write_decimal (fnode *f, const char *source, int len,\n \n /* Convert unsigned octal to ascii.  */\n \n-static char *\n-otoa (GFC_UINTEGER_LARGEST n)\n+static const char *\n+otoa (GFC_UINTEGER_LARGEST n, char *buffer, size_t len)\n {\n   char *p;\n \n+  assert (len >= GFC_OTOA_BUF_SIZE);\n+\n   if (n == 0)\n-    {\n-      scratch[0] = '0';\n-      scratch[1] = '\\0';\n-      return scratch;\n-    }\n+    return \"0\";\n \n-  p = scratch + SCRATCH_SIZE - 1;\n-  *p-- = '\\0';\n+  p = buffer + GFC_OTOA_BUF_SIZE - 1;\n+  *p = '\\0';\n \n   while (n != 0)\n     {\n-      *p = '0' + (n & 7);\n-      p--;\n+      *--p = '0' + (n & 7);\n       n >>= 3;\n     }\n \n-  return ++p;\n+  return p;\n }\n \n \n /* Convert unsigned binary to ascii.  */\n \n-static char *\n-btoa (GFC_UINTEGER_LARGEST n)\n+static const char *\n+btoa (GFC_UINTEGER_LARGEST n, char *buffer, size_t len)\n {\n   char *p;\n \n+  assert (len >= GFC_BTOA_BUF_SIZE);\n+\n   if (n == 0)\n-    {\n-      scratch[0] = '0';\n-      scratch[1] = '\\0';\n-      return scratch;\n-    }\n+    return \"0\";\n \n-  p = scratch + SCRATCH_SIZE - 1;\n-  *p-- = '\\0';\n+  p = buffer + GFC_BTOA_BUF_SIZE - 1;\n+  *p = '\\0';\n \n   while (n != 0)\n     {\n-      *p-- = '0' + (n & 1);\n+      *--p = '0' + (n & 1);\n       n >>= 1;\n     }\n \n-  return ++p;\n+  return p;\n }\n \n \n@@ -1245,8 +1245,9 @@ write_integer (const char *source, int length)\n   const char *q;\n   int digits;\n   int width;\n+  char itoa_buf[GFC_ITOA_BUF_SIZE];\n \n-  q = gfc_itoa (extract_int (source, length));\n+  q = gfc_itoa (extract_int (source, length), itoa_buf, sizeof (itoa_buf));\n \n   switch (length)\n     {"}, {"sha": "49d2c619eeecbb783f0ab1be60bff04d044b6785", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1449b8cba879ff1bedf7863f63ef079b2026c0a1/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1449b8cba879ff1bedf7863f63ef079b2026c0a1/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=1449b8cba879ff1bedf7863f63ef079b2026c0a1", "patch": "@@ -413,10 +413,15 @@ internal_proto(get_args);\n \n /* error.c */\n \n-extern char *gfc_itoa (GFC_INTEGER_LARGEST);\n+#define GFC_ITOA_BUF_SIZE (sizeof (GFC_INTEGER_LARGEST) * 3 + 2)\n+#define GFC_XTOA_BUF_SIZE (sizeof (GFC_UINTEGER_LARGEST) * 2 + 1)\n+#define GFC_OTOA_BUF_SIZE (sizeof (GFC_INTEGER_LARGEST) * 3 + 1)\n+#define GFC_BTOA_BUF_SIZE (sizeof (GFC_INTEGER_LARGEST) * 8 + 1)\n+\n+extern const char *gfc_itoa (GFC_INTEGER_LARGEST, char *, size_t);\n internal_proto(gfc_itoa);\n \n-extern char *xtoa (GFC_UINTEGER_LARGEST);\n+extern const char *xtoa (GFC_UINTEGER_LARGEST, char *, size_t);\n internal_proto(xtoa);\n \n extern void os_error (const char *) __attribute__ ((noreturn));"}, {"sha": "fb5da2012ad97114dfb3646e8fb8859fe009bae0", "filename": "libgfortran/runtime/environ.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1449b8cba879ff1bedf7863f63ef079b2026c0a1/libgfortran%2Fruntime%2Fenviron.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1449b8cba879ff1bedf7863f63ef079b2026c0a1/libgfortran%2Fruntime%2Fenviron.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fenviron.c?ref=1449b8cba879ff1bedf7863f63ef079b2026c0a1", "patch": "@@ -28,6 +28,7 @@ the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n Boston, MA 02110-1301, USA.  */\n \n #include \"config.h\"\n+#include <stdio.h>\n #include <string.h>\n #include <stdlib.h>\n #include <ctype.h>\n@@ -580,15 +581,14 @@ init_variables (void)\n int\n check_buffered (int n)\n {\n-  char name[40];\n+  char name[22 + sizeof (n) * 3];\n   variable v;\n   int rv;\n \n   if (options.all_unbuffered)\n     return 0;\n \n-  strcpy (name, \"GFORTRAN_UNBUFFERED_\");\n-  strcat (name, gfc_itoa (n));\n+  sprintf (name, \"GFORTRAN_UNBUFFERED_%d\", n);\n \n   v.name = name;\n   v.value = 2;"}, {"sha": "60fc56c9d88bb58fb4859c2468766e0f8bc3f213", "filename": "libgfortran/runtime/error.c", "status": "modified", "additions": 31, "deletions": 35, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1449b8cba879ff1bedf7863f63ef079b2026c0a1/libgfortran%2Fruntime%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1449b8cba879ff1bedf7863f63ef079b2026c0a1/libgfortran%2Fruntime%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Ferror.c?ref=1449b8cba879ff1bedf7863f63ef079b2026c0a1", "patch": "@@ -29,6 +29,7 @@ Boston, MA 02110-1301, USA.  */\n \n \n #include \"config.h\"\n+#include <assert.h>\n #include <stdio.h>\n #include <stdarg.h>\n #include <string.h>\n@@ -63,25 +64,19 @@ iexport_data(filename);\n unsigned line = 0;\n iexport_data(line);\n \n-/* buffer for integer/ascii conversions.  */\n-static char buffer[sizeof (GFC_UINTEGER_LARGEST) * 8 + 1];\n+/* gfc_itoa()-- Integer to decimal conversion. */\n \n-\n-/* Returns a pointer to a static buffer. */\n-\n-char *\n-gfc_itoa (GFC_INTEGER_LARGEST n)\n+const char *\n+gfc_itoa (GFC_INTEGER_LARGEST n, char *buffer, size_t len)\n {\n   int negative;\n   char *p;\n   GFC_UINTEGER_LARGEST t;\n \n+  assert (len >= GFC_ITOA_BUF_SIZE);\n+\n   if (n == 0)\n-    {\n-      buffer[0] = '0';\n-      buffer[1] = '\\0';\n-      return buffer;\n-    }\n+    return \"0\";\n \n   negative = 0;\n   t = n;\n@@ -91,51 +86,48 @@ gfc_itoa (GFC_INTEGER_LARGEST n)\n       t = -n; /*must use unsigned to protect from overflow*/\n     }\n \n-  p = buffer + sizeof (buffer) - 1;\n-  *p-- = '\\0';\n+  p = buffer + GFC_ITOA_BUF_SIZE - 1;\n+  *p = '\\0';\n \n   while (t != 0)\n     {\n-      *p-- = '0' + (t % 10);\n+      *--p = '0' + (t % 10);\n       t /= 10;\n     }\n \n   if (negative)\n-    *p-- = '-';\n-  return ++p;\n+    *--p = '-';\n+  return p;\n }\n \n \n-/* xtoa()-- Integer to hexadecimal conversion.  Returns a pointer to a\n- * static buffer. */\n+/* xtoa()-- Integer to hexadecimal conversion.  */\n \n-char *\n-xtoa (GFC_UINTEGER_LARGEST n)\n+const char *\n+xtoa (GFC_UINTEGER_LARGEST n, char *buffer, size_t len)\n {\n   int digit;\n   char *p;\n \n+  assert (len >= GFC_XTOA_BUF_SIZE);\n+\n   if (n == 0)\n-    {\n-      buffer[0] = '0';\n-      buffer[1] = '\\0';\n-      return buffer;\n-    }\n+    return \"0\";\n \n-  p = buffer + sizeof (buffer) - 1;\n-  *p-- = '\\0';\n+  p = buffer + GFC_XTOA_BUF_SIZE - 1;\n+  *p = '\\0';\n \n   while (n != 0)\n     {\n       digit = n & 0xF;\n       if (digit > 9)\n \tdigit += 'A' - '0' - 10;\n \n-      *p-- = '0' + digit;\n+      *--p = '0' + digit;\n       n >>= 4;\n     }\n \n-  return ++p;\n+  return p;\n }\n \n \n@@ -149,8 +141,10 @@ st_printf (const char *format, ...)\n {\n   int count, total;\n   va_list arg;\n-  char *p, *q;\n+  char *p;\n+  const char *q;\n   stream *s;\n+  char itoa_buf[GFC_ITOA_BUF_SIZE];\n \n   total = 0;\n   s = init_error_stream ();\n@@ -187,7 +181,7 @@ st_printf (const char *format, ...)\n \t  break;\n \n \tcase 'd':\n-\t  q = gfc_itoa (va_arg (arg, int));\n+\t  q = gfc_itoa (va_arg (arg, int), itoa_buf, sizeof (itoa_buf));\n \t  count = strlen (q);\n \n \t  p = salloc_w (s, &count);\n@@ -196,7 +190,7 @@ st_printf (const char *format, ...)\n \t  break;\n \n \tcase 'x':\n-\t  q = xtoa (va_arg (arg, unsigned));\n+\t  q = xtoa (va_arg (arg, unsigned), itoa_buf, sizeof (itoa_buf));\n \t  count = strlen (q);\n \n \t  p = salloc_w (s, &count);\n@@ -240,8 +234,10 @@ void\n st_sprintf (char *buffer, const char *format, ...)\n {\n   va_list arg;\n-  char c, *p;\n+  char c;\n+  const char *p;\n   int count;\n+  char itoa_buf[GFC_ITOA_BUF_SIZE];\n \n   va_start (arg, format);\n \n@@ -264,7 +260,7 @@ st_sprintf (char *buffer, const char *format, ...)\n \t  break;\n \n \tcase 'd':\n-\t  p = gfc_itoa (va_arg (arg, int));\n+\t  p = gfc_itoa (va_arg (arg, int), itoa_buf, sizeof (itoa_buf));\n \t  count = strlen (p);\n \n \t  memcpy (buffer, p, count);"}]}