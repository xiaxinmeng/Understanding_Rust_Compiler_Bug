{"sha": "8c3b5c719f4c837122402f8707cb89b677ee3869", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMzYjVjNzE5ZjRjODM3MTIyNDAyZjg3MDdjYjg5YjY3N2VlMzg2OQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-04-03T17:15:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-04-03T17:15:53Z"}, "message": "Implement P0426R1 \"Constexpr for std::char_traits\" for C++17 (partial)\n\n\t* include/bits/char_traits.h (__gnu_cxx::char_traits): Add\n\t_GLIBCXX14_CONSTEXPR on assign, compare, find, and length.\n\t(std::char_traits<char>, std::char_traits<wchar_t>): Add\n\t_GLIBCXX17_CONSTEXPR on assign.\n\t(std::char_traits<char16_t>, std::char_traits<char32_t>): Add\n\t_GLIBCXX17_CONSTEXPR on assign, compare, find, and length.\n\t* testsuite/21_strings/char_traits/requirements/\n\tconstexpr_functions_c++17.cc: New test.\n\nFrom-SVN: r246655", "tree": {"sha": "fa7c526148be6e05e2784374cb256b76b6fb482f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa7c526148be6e05e2784374cb256b76b6fb482f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c3b5c719f4c837122402f8707cb89b677ee3869", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c3b5c719f4c837122402f8707cb89b677ee3869", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c3b5c719f4c837122402f8707cb89b677ee3869", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c3b5c719f4c837122402f8707cb89b677ee3869/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbdf4e815976f26fc32bc270d541deba4c247a3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbdf4e815976f26fc32bc270d541deba4c247a3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbdf4e815976f26fc32bc270d541deba4c247a3d"}], "stats": {"total": 166, "additions": 143, "deletions": 23}, "files": [{"sha": "caad393416e394a761c48b8c162b87b2d39f132a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c3b5c719f4c837122402f8707cb89b677ee3869/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c3b5c719f4c837122402f8707cb89b677ee3869/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8c3b5c719f4c837122402f8707cb89b677ee3869", "patch": "@@ -1,3 +1,14 @@\n+2017-04-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/char_traits.h (__gnu_cxx::char_traits): Add\n+\t_GLIBCXX14_CONSTEXPR on assign, compare, find, and length.\n+\t(std::char_traits<char>, std::char_traits<wchar_t>): Add\n+\t_GLIBCXX17_CONSTEXPR on assign.\n+\t(std::char_traits<char16_t>, std::char_traits<char32_t>): Add\n+\t_GLIBCXX17_CONSTEXPR on assign, compare, find, and length.\n+\t* testsuite/21_strings/char_traits/requirements/\n+\tconstexpr_functions_c++17.cc: New test.\n+\n 2017-04-03  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR libstdc++/79141"}, {"sha": "75db5b893212eb991dd30f4886f79e0c850f0fab", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c3b5c719f4c837122402f8707cb89b677ee3869/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c3b5c719f4c837122402f8707cb89b677ee3869/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=8c3b5c719f4c837122402f8707cb89b677ee3869", "patch": "@@ -88,7 +88,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename _Char_types<_CharT>::off_type    off_type;\n       typedef typename _Char_types<_CharT>::state_type  state_type;\n \n-      static void\n+      static _GLIBCXX14_CONSTEXPR void\n       assign(char_type& __c1, const char_type& __c2)\n       { __c1 = __c2; }\n \n@@ -100,13 +100,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       lt(const char_type& __c1, const char_type& __c2)\n       { return __c1 < __c2; }\n \n-      static int\n+      static _GLIBCXX14_CONSTEXPR int\n       compare(const char_type* __s1, const char_type* __s2, std::size_t __n);\n \n-      static std::size_t\n+      static _GLIBCXX14_CONSTEXPR std::size_t\n       length(const char_type* __s);\n \n-      static const char_type*\n+      static _GLIBCXX14_CONSTEXPR const char_type*\n       find(const char_type* __s, std::size_t __n, const char_type& __a);\n \n       static char_type*\n@@ -139,8 +139,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }\n     };\n \n+// #define __cpp_lib_constexpr_char_traits 201611\n+\n   template<typename _CharT>\n-    int\n+    _GLIBCXX14_CONSTEXPR int\n     char_traits<_CharT>::\n     compare(const char_type* __s1, const char_type* __s2, std::size_t __n)\n     {\n@@ -153,7 +155,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT>\n-    std::size_t\n+    _GLIBCXX14_CONSTEXPR std::size_t\n     char_traits<_CharT>::\n     length(const char_type* __p)\n     {\n@@ -164,7 +166,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT>\n-    const typename char_traits<_CharT>::char_type*\n+    _GLIBCXX14_CONSTEXPR const typename char_traits<_CharT>::char_type*\n     char_traits<_CharT>::\n     find(const char_type* __s, std::size_t __n, const char_type& __a)\n     {\n@@ -238,7 +240,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef streamoff         off_type;\n       typedef mbstate_t         state_type;\n \n-      static void\n+      static _GLIBCXX17_CONSTEXPR void\n       assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT\n       { __c1 = __c2; }\n \n@@ -254,19 +256,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t< static_cast<unsigned char>(__c2));\n       }\n \n-      static int\n+      static /* _GLIBCXX17_CONSTEXPR */ int\n       compare(const char_type* __s1, const char_type* __s2, size_t __n)\n       {\n \tif (__n == 0)\n \t  return 0;\n \treturn __builtin_memcmp(__s1, __s2, __n);\n       }\n \n-      static size_t\n+      static /* _GLIBCXX17_CONSTEXPR */ size_t\n       length(const char_type* __s)\n       { return __builtin_strlen(__s); }\n \n-      static const char_type*\n+      static /* _GLIBCXX17_CONSTEXPR */ const char_type*\n       find(const char_type* __s, size_t __n, const char_type& __a)\n       {\n \tif (__n == 0)\n@@ -333,7 +335,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef wstreampos        pos_type;\n       typedef mbstate_t         state_type;\n \n-      static void\n+      static _GLIBCXX17_CONSTEXPR void\n       assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT\n       { __c1 = __c2; }\n \n@@ -345,19 +347,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT\n       { return __c1 < __c2; }\n \n-      static int\n+      static /* _GLIBCXX17_CONSTEXPR */ int\n       compare(const char_type* __s1, const char_type* __s2, size_t __n)\n       {\n \tif (__n == 0)\n \t  return 0;\n \treturn wmemcmp(__s1, __s2, __n);\n       }\n \n-      static size_t\n+      static /* _GLIBCXX17_CONSTEXPR */ size_t\n       length(const char_type* __s)\n       { return wcslen(__s); }\n \n-      static const char_type*\n+      static /* _GLIBCXX17_CONSTEXPR */ const char_type*\n       find(const char_type* __s, size_t __n, const char_type& __a)\n       {\n \tif (__n == 0)\n@@ -432,7 +434,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef u16streampos      pos_type;\n       typedef mbstate_t         state_type;\n \n-      static void\n+      static _GLIBCXX17_CONSTEXPR void\n       assign(char_type& __c1, const char_type& __c2) noexcept\n       { __c1 = __c2; }\n \n@@ -444,7 +446,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       lt(const char_type& __c1, const char_type& __c2) noexcept\n       { return __c1 < __c2; }\n \n-      static int\n+      static _GLIBCXX17_CONSTEXPR int\n       compare(const char_type* __s1, const char_type* __s2, size_t __n)\n       {\n \tfor (size_t __i = 0; __i < __n; ++__i)\n@@ -455,7 +457,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn 0;\n       }\n \n-      static size_t\n+      static _GLIBCXX17_CONSTEXPR size_t\n       length(const char_type* __s)\n       {\n \tsize_t __i = 0;\n@@ -464,7 +466,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __i;\n       }\n \n-      static const char_type*\n+      static _GLIBCXX17_CONSTEXPR const char_type*\n       find(const char_type* __s, size_t __n, const char_type& __a)\n       {\n \tfor (size_t __i = 0; __i < __n; ++__i)\n@@ -529,7 +531,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef u32streampos      pos_type;\n       typedef mbstate_t         state_type;\n \n-      static void\n+      static _GLIBCXX17_CONSTEXPR void\n       assign(char_type& __c1, const char_type& __c2) noexcept\n       { __c1 = __c2; }\n \n@@ -541,7 +543,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       lt(const char_type& __c1, const char_type& __c2) noexcept\n       { return __c1 < __c2; }\n \n-      static int\n+      static _GLIBCXX17_CONSTEXPR int\n       compare(const char_type* __s1, const char_type* __s2, size_t __n)\n       {\n \tfor (size_t __i = 0; __i < __n; ++__i)\n@@ -552,7 +554,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn 0;\n       }\n \n-      static size_t\n+      static _GLIBCXX17_CONSTEXPR size_t\n       length(const char_type* __s)\n       {\n \tsize_t __i = 0;\n@@ -561,7 +563,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __i;\n       }\n \n-      static const char_type*\n+      static _GLIBCXX17_CONSTEXPR const char_type*\n       find(const char_type* __s, size_t __n, const char_type& __a)\n       {\n \tfor (size_t __i = 0; __i < __n; ++__i)"}, {"sha": "014caa0231344f025cd869fc486936d36dcb4d3d", "filename": "libstdc++-v3/testsuite/21_strings/char_traits/requirements/constexpr_functions_c++17.cc", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c3b5c719f4c837122402f8707cb89b677ee3869/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fconstexpr_functions_c%2B%2B17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c3b5c719f4c837122402f8707cb89b677ee3869/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fconstexpr_functions_c%2B%2B17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits%2Frequirements%2Fconstexpr_functions_c%2B%2B17.cc?ref=8c3b5c719f4c837122402f8707cb89b677ee3869", "patch": "@@ -0,0 +1,107 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++1z } }\n+\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+\n+template<typename CT>\n+  constexpr bool\n+  test_assign()\n+  {\n+    using char_type = typename CT::char_type;\n+    char_type s1[2] = {};\n+    const char_type s2[2] = {1, 0};\n+    CT::assign(s1[0], s2[0]);\n+    return s1[0] == char_type{1};\n+  }\n+\n+template<typename CT>\n+  constexpr bool\n+  test_compare()\n+  {\n+    using char_type = typename CT::char_type;\n+    const char_type s1[3] = {1, 2, 3};\n+    const char_type s2[3] = {1, 2, 3};\n+    if (CT::compare(s1, s2, 3) != 0)\n+      return false;\n+    if (CT::compare(s2, s1, 3) != 0)\n+      return false;\n+    if (CT::compare(s1+1, s2, 2) <= 0)\n+      return false;\n+    return true;\n+  }\n+\n+template<typename CT>\n+  constexpr bool\n+  test_length()\n+  {\n+    using char_type = typename CT::char_type;\n+    const char_type s1[4] = {1, 2, 3, 0};\n+    if (CT::length(s1) != 3)\n+      return false;\n+    if (CT::length(s1+1) != 2)\n+      return false;\n+    return true;\n+  }\n+\n+template<typename CT>\n+  constexpr bool\n+  test_find()\n+  {\n+    using char_type = typename CT::char_type;\n+    const char_type s1[3] = {1, 2, 3};\n+    if (CT::find(s1, 3, char_type{2}) != s1+1)\n+      return false;\n+    if (CT::find(s1, 3, char_type{4}) != nullptr)\n+      return false;\n+    return true;\n+  }\n+\n+#ifndef __cpp_lib_constexpr_char_traits\n+// #error Feature-test macro for constexpr char_traits is missing\n+#elif __cpp_lib_constexpr_char_traits != 201611\n+// #error Feature-test macro for constexpr char_traits has the wrong value\n+#endif\n+\n+static_assert( test_assign<std::char_traits<char>>() );\n+// static_assert( test_compare<std::char_traits<char>>() );\n+// static_assert( test_length<std::char_traits<char>>() );\n+// static_assert( test_find<std::char_traits<char>>() );\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+static_assert( test_assign<std::char_traits<wchar_t>>() );\n+// static_assert( test_compare<std::char_traits<wchar_t>>() );\n+// static_assert( test_length<std::char_traits<wchar_t>>() );\n+// static_assert( test_find<std::char_traits<wchar_t>>() );\n+#endif\n+static_assert( test_assign<std::char_traits<char16_t>>() );\n+static_assert( test_compare<std::char_traits<char16_t>>() );\n+static_assert( test_length<std::char_traits<char16_t>>() );\n+static_assert( test_find<std::char_traits<char16_t>>() );\n+static_assert( test_assign<std::char_traits<char32_t>>() );\n+static_assert( test_compare<std::char_traits<char32_t>>() );\n+static_assert( test_length<std::char_traits<char32_t>>() );\n+static_assert( test_find<std::char_traits<char32_t>>() );\n+\n+struct C { unsigned char c; };\n+constexpr bool operator==(const C& c1, const C& c2) { return c1.c == c2.c; }\n+constexpr bool operator<(const C& c1, const C& c2) { return c1.c < c2.c; }\n+static_assert( test_assign<std::char_traits<C>>() );\n+static_assert( test_compare<std::char_traits<C>>() );\n+static_assert( test_length<std::char_traits<C>>() );\n+static_assert( test_find<std::char_traits<C>>() );"}]}