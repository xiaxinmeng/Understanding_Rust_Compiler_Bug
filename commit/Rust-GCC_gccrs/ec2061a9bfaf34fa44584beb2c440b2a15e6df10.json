{"sha": "ec2061a9bfaf34fa44584beb2c440b2a15e6df10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMyMDYxYTliZmFmMzRmYTQ0NTg0YmViMmM0NDBiMmExNWU2ZGYxMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-10-13T09:00:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-10-13T09:00:31Z"}, "message": "PR libstdc++/28277 (partial: ostream bits 2)\n\n2006-10-13  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/28277 (partial: ostream bits 2)\n\t* include/std/std_ostream.h (basic_ostream<>::_M_insert(const\n\tchar_type*, streamsize)): New.\n\t(basic_ostream<>::_M_write(char_type, streamsize)): Likewise.\n\t(operator<<(basic_ostream<>&, _CharT), operator<<(basic_ostream<>&,\n\tchar), operator<<(basic_ostream<>&, const _CharT*),\n\toperator<<(basic_ostream<>&, const char*)): Use the latter.\n\t* include/bits/ostream.tcc (basic_ostream<>::_M_insert(const\n\tchar_type*, streamsize)): Define.\n\t(operator<<(basic_ostream<>&, const char*)): Use the latter.\n\t(operator<<(basic_ostream<>&, _CharT), operator<<(basic_ostream<>&,\n\tchar), operator<<(basic_ostream<>&, const _CharT*),\n\toperator<<(basic_ostream<>&, const char*),\n\toperator<<(basic_ostream<>&, const basic_string<>&)): Remove.\n\t* include/bits/basic_string.h (operator<<(basic_ostream<>&,\n\tconst basic_string<>&)): Use the latter, implement DR 586.\n\t* config/abi/pre/gnu.ver: Adjust, export the new _M_insert.\n\t* docs/html/ext/howto.html: Add an entry for DR 586.\n\t* testsuite/21_strings/basic_string/inserters_extractors/char/\n\t28277.cc: New.\n\t* testsuite/21_strings/basic_string/inserters_extractors/wchar_t/\n\t28277.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_character/char/\n\t28277-3.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_character/char/\n\t28277-4.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_character/wchar_t/\n\t28277-2.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_character/wchar_t/\n\t28277-3.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_character/wchar_t/\n\t28277-4.cc: Likewise.\n\nFrom-SVN: r117689", "tree": {"sha": "62a5ac79c15b666f719419ef0629306a93f3a310", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62a5ac79c15b666f719419ef0629306a93f3a310"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec2061a9bfaf34fa44584beb2c440b2a15e6df10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec2061a9bfaf34fa44584beb2c440b2a15e6df10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec2061a9bfaf34fa44584beb2c440b2a15e6df10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/comments", "author": null, "committer": null, "parents": [{"sha": "7d6df107ae647547b87f4796157ea3ae9cafb734", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6df107ae647547b87f4796157ea3ae9cafb734", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d6df107ae647547b87f4796157ea3ae9cafb734"}], "stats": {"total": 647, "additions": 463, "deletions": 184}, "files": [{"sha": "c42aba17c4f902494a341f9192008fba8f81bb6d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ec2061a9bfaf34fa44584beb2c440b2a15e6df10", "patch": "@@ -1,3 +1,38 @@\n+2006-10-13  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/28277 (partial: ostream bits 2)\n+\t* include/std/std_ostream.h (basic_ostream<>::_M_insert(const\n+\tchar_type*, streamsize)): New.\n+\t(basic_ostream<>::_M_write(char_type, streamsize)): Likewise.\n+\t(operator<<(basic_ostream<>&, _CharT), operator<<(basic_ostream<>&,\n+\tchar), operator<<(basic_ostream<>&, const _CharT*),\n+\toperator<<(basic_ostream<>&, const char*)): Use the latter.\n+\t* include/bits/ostream.tcc (basic_ostream<>::_M_insert(const\n+\tchar_type*, streamsize)): Define.\n+\t(operator<<(basic_ostream<>&, const char*)): Use the latter.\n+\t(operator<<(basic_ostream<>&, _CharT), operator<<(basic_ostream<>&,\n+\tchar), operator<<(basic_ostream<>&, const _CharT*),\n+\toperator<<(basic_ostream<>&, const char*),\n+\toperator<<(basic_ostream<>&, const basic_string<>&)): Remove.\n+\t* include/bits/basic_string.h (operator<<(basic_ostream<>&,\n+\tconst basic_string<>&)): Use the latter, implement DR 586.\n+\t* config/abi/pre/gnu.ver: Adjust, export the new _M_insert.\n+\t* docs/html/ext/howto.html: Add an entry for DR 586.\n+\t* testsuite/21_strings/basic_string/inserters_extractors/char/\n+\t28277.cc: New.\n+\t* testsuite/21_strings/basic_string/inserters_extractors/wchar_t/\n+\t28277.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_character/char/\n+\t28277-3.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_character/char/\n+\t28277-4.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_character/wchar_t/\n+\t28277-2.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_character/wchar_t/\n+\t28277-3.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_character/wchar_t/\n+\t28277-4.cc: Likewise.\n+\n 2006-10-11  Paolo Carlini  <pcarlini@suse.de>\n \n \t* docs/html/ext/lwg-active.html, lwg-defects.html: Import Revision 44."}, {"sha": "dd6854c80f751649440bb26327b325e40e41fcd4", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=ec2061a9bfaf34fa44584beb2c440b2a15e6df10", "patch": "@@ -285,7 +285,7 @@ GLIBCXX_3.4 {\n     _ZNSoC*;\n     _ZNSoD*;\n     _ZNKSo6sentrycvbEv;\n-    _ZNSo8_M_write*;\n+    _ZNSo8_M_writeEPKc[il];\n     _ZNSo[0-9][a-z]*;\n     _ZNSolsE*[^g];\n \n@@ -299,7 +299,7 @@ GLIBCXX_3.4 {\n     _ZNSt13basic_ostreamIwSt11char_traitsIwEE5tellpEv;\n     _ZNSt13basic_ostreamIwSt11char_traitsIwEE5writeEPKw*;\n     _ZNSt13basic_ostreamIwSt11char_traitsIwEE6sentry*;\n-    _ZNSt13basic_ostreamIwSt11char_traitsIwEE8_M_write*;\n+    _ZNSt13basic_ostreamIwSt11char_traitsIwEE8_M_writeEPKw[il];\n     _ZNSt13basic_ostreamIwSt11char_traitsIwEElsE*[^g];\n \n     # std::ostream operators and inserters\n@@ -659,6 +659,9 @@ GLIBCXX_3.4.9 {\n     _ZNSt13basic_istreamIwSt11char_traitsIwEE10_M_extractI[^g]*;\n \n     _ZSt21__copy_streambufs_eofI[cw]St11char_traitsI[cw]EE[il]PSt15basic_streambuf*;\n+\n+    _ZNSo9_M_insertEPKc[il];\n+    _ZNSt13basic_ostreamIwSt11char_traitsIwEE9_M_insertEPKw[il];\n } GLIBCXX_3.4.8;\n \n "}, {"sha": "a39e0fbf9154b252bfa3399d2066a62046b02e7b", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=ec2061a9bfaf34fa44584beb2c440b2a15e6df10", "patch": "@@ -593,6 +593,12 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n     <dd>In case of input_iterator/output_iterator rely on Assignability of\n         input_iterator' value_type.\n     </dd>\n+\n+    <dt><a href=\"lwg-active.html#586\">586</a>:\n+        <em>string inserter not a formatted function</em>\n+    </dt>\n+    <dd>Change it to be a formatted output function (i.e. catch exceptions).\n+    </dd>\n <!--\n     <dt><a href=\"lwg-defects.html#\"></a>:\n         <em></em>"}, {"sha": "da6ef1c2d1964345c7dfa5e8cf695e2944d33ef3", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=ec2061a9bfaf34fa44584beb2c440b2a15e6df10", "patch": "@@ -2396,7 +2396,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __os,\n-\t       const basic_string<_CharT, _Traits, _Alloc>& __str);\n+\t       const basic_string<_CharT, _Traits, _Alloc>& __str)\n+    {\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 586. string inserter not a formatted function\n+      return __os._M_insert(__str.data(), __str.size());\n+    }\n \n   /**\n    *  @brief  Read a line from stream into a string."}, {"sha": "a52eb4e3a00bcc31fc7adba74f5f1a32fe52d1bb", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 26, "deletions": 175, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=ec2061a9bfaf34fa44584beb2c440b2a15e6df10", "patch": "@@ -315,209 +315,60 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return *this;\n     }\n \n-  // 27.6.2.5.4 Character inserters.\n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>&\n-    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)\n-    {\n-      typedef basic_ostream<_CharT, _Traits> __ostream_type;\n-      typename __ostream_type::sentry __cerb(__out);\n-      if (__cerb)\n-\t{\n-\t  try\n-\t    {\n-\t      const streamsize __w = __out.width();\n-\t      streamsize __len = 1;\n-\t      _CharT* __cs = &__c;\n-\t      if (__w > __len)\n-\t\t{\n-\t\t  __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\n-\t\t\t\t\t\t\t       * __w));\n-\t\t  __pad<_CharT, _Traits>::_S_pad(__out, __out.fill(), __cs,\n-\t\t\t\t\t\t &__c, __w, __len, false);\n-\t\t  __len = __w;\n-\t\t}\n-\t      __out._M_write(__cs, __len);\n-\t      __out.width(0);\n-\t    }\n-\t  catch(...)\n-\t    { __out._M_setstate(ios_base::badbit); }\n-\t}\n-      return __out;\n-    }\n-\n-  // Specializations.\n-  template <class _Traits>\n-    basic_ostream<char, _Traits>&\n-    operator<<(basic_ostream<char, _Traits>& __out, char __c)\n+    basic_ostream<_CharT, _Traits>::\n+    _M_insert(const char_type* __s, streamsize __n)\n     {\n-      typedef basic_ostream<char, _Traits> __ostream_type;\n-      typename __ostream_type::sentry __cerb(__out);\n+      sentry __cerb(*this);\n       if (__cerb)\n \t{\n \t  try\n \t    {\n-\t      const streamsize __w = __out.width();\n-\t      streamsize __len = 1;\n-\t      char* __cs = &__c;\n-\t      if (__w > __len)\n+\t      const streamsize __w = this->width();\n+\t      if (__w > __n)\n \t\t{\n-\t\t  __cs = static_cast<char*>(__builtin_alloca(__w));\n-\t\t  __pad<char, _Traits>::_S_pad(__out, __out.fill(), __cs,\n-\t\t\t\t\t       &__c, __w, __len, false);\n-\t\t  __len = __w;\n+\t\t  const bool __left = ((this->flags() & ios_base::adjustfield)\n+\t\t\t\t       == ios_base::left);\n+\t\t  if (!__left)\n+\t\t    _M_write(this->fill(), __w - __n);\n+\t\t  if (this->good())\n+\t\t    _M_write(__s, __n);\n+\t\t  if (__left && this->good())\n+\t\t    _M_write(this->fill(), __w - __n);\n \t\t}\n-\t      __out._M_write(__cs, __len);\n-\t      __out.width(0);\n+\t      else\n+\t\t_M_write(__s, __n);\n+\t      this->width(0);\n \t    }\n \t  catch(...)\n-\t    { __out._M_setstate(ios_base::badbit); }\n-\t}\n-      return __out;\n-     }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n-    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)\n-    {\n-      typedef basic_ostream<_CharT, _Traits> __ostream_type;\n-      typename __ostream_type::sentry __cerb(__out);\n-      if (__cerb && __s)\n-\t{\n-\t  try\n-\t    {\n-\t      const streamsize __w = __out.width();\n-\t      streamsize __len = static_cast<streamsize>(_Traits::length(__s));\n-\t      if (__w > __len)\n-\t\t{\n-\t\t  _CharT* __cs = (static_cast<\n-\t\t\t\t  _CharT*>(__builtin_alloca(sizeof(_CharT)\n-\t\t\t\t\t\t\t    * __w)));\n-\t\t  __pad<_CharT, _Traits>::_S_pad(__out, __out.fill(), __cs,\n-\t\t\t\t\t\t __s, __w, __len, false);\n-\t\t  __s = __cs;\n-\t\t  __len = __w;\n-\t\t}\n-\t      __out._M_write(__s, __len);\n-\t      __out.width(0);\n-\t    }\n-\t  catch(...)\n-\t    { __out._M_setstate(ios_base::badbit); }\n+\t    { this->_M_setstate(ios_base::badbit); }\n \t}\n-      else if (!__s)\n-\t__out.setstate(ios_base::badbit);\n-      return __out;\n+      return *this;\n     }\n \n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)\n     {\n-      typedef basic_ostream<_CharT, _Traits> __ostream_type;\n-      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      // 167.  Improper use of traits_type::length()\n-      // Note that this is only in 'Review' status.\n-      typedef char_traits<char>\t\t     __traits_type;\n-      typename __ostream_type::sentry __cerb(__out);\n-      if (__cerb && __s)\n+      if (!__s)\n+\t__out.setstate(ios_base::badbit);\n+      else\n \t{\n-\t  _CharT* __ws = 0;\n \t  try\n \t    {\n-\t      const size_t __clen = __traits_type::length(__s);\n-\t      __ws = new _CharT[__clen];\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 167.  Improper use of traits_type::length()\n+\t      const size_t __clen = char_traits<char>::length(__s);      \n+\t      _CharT* __ws = new _CharT[__clen];\n \t      for (size_t  __i = 0; __i < __clen; ++__i)\n \t\t__ws[__i] = __out.widen(__s[__i]);\n-\t      _CharT* __str = __ws;\n-\t      \n-\t      const streamsize __w = __out.width();\n-\t      streamsize __len = static_cast<streamsize>(__clen);\n-\t      if (__w > __len)\n-\t\t{\n-\t\t  _CharT* __cs = (static_cast<\n-\t\t\t\t  _CharT*>(__builtin_alloca(sizeof(_CharT)\n-\t\t\t\t\t\t\t    * __w)));\n-\t\t  __pad<_CharT, _Traits>::_S_pad(__out, __out.fill(), __cs,\n-\t\t\t\t\t\t __ws, __w, __len, false);\n-\t\t  __str = __cs;\n-\t\t  __len = __w;\n-\t\t}\n-\t      __out._M_write(__str, __len);\n-\t      __out.width(0);\n-\n+\t      __out._M_insert(__ws, __clen);\n \t      delete [] __ws;\n \t    }\n-\t  catch(...)\n-\t    {\n-\t      delete [] __ws;\n-\t      __out._M_setstate(ios_base::badbit);\n-\t    }\n-\t}\n-      else if (!__s)\n-\t__out.setstate(ios_base::badbit);\n-      return __out;\n-    }\n-\n-  // Partial specializations.\n-  template<class _Traits>\n-    basic_ostream<char, _Traits>&\n-    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)\n-    {\n-      typedef basic_ostream<char, _Traits> __ostream_type;\n-      typename __ostream_type::sentry __cerb(__out);\n-      if (__cerb && __s)\n-\t{\n-\t  try\n-\t    {\n-\t      const streamsize __w = __out.width();\n-\t      streamsize __len = static_cast<streamsize>(_Traits::length(__s));\n-\t      if (__w > __len)\n-\t\t{\n-\t\t  char* __cs = static_cast<char*>(__builtin_alloca(__w));\n-\t\t  __pad<char, _Traits>::_S_pad(__out, __out.fill(), __cs,\n-\t\t\t\t\t\t __s, __w, __len, false);\n-\t\t  __s = __cs;\n-\t\t  __len = __w;\n-\t\t}\n-\t      __out._M_write(__s, __len);\n-\t      __out.width(0);\n-\t    }\n \t  catch(...)\n \t    { __out._M_setstate(ios_base::badbit); }\n \t}\n-      else if (!__s)\n-\t__out.setstate(ios_base::badbit);\n-      return __out;\n-    }\n-\n-  // 21.3.7.9 basic_string::operator<<\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_ostream<_CharT, _Traits>&\n-    operator<<(basic_ostream<_CharT, _Traits>& __out,\n-\t       const basic_string<_CharT, _Traits, _Alloc>& __str)\n-    {\n-      typedef basic_ostream<_CharT, _Traits> __ostream_type;\n-      typename __ostream_type::sentry __cerb(__out);\n-      if (__cerb)\n-\t{\n-\t  const streamsize __w = __out.width();\n-\t  streamsize __len = static_cast<streamsize>(__str.size());\n-\t  const _CharT* __s = __str.data();\n-\n-\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t  // 25. String operator<< uses width() value wrong\n-\t  if (__w > __len)\n-\t    {\n-\t      _CharT* __cs = (static_cast<\n-\t\t\t      _CharT*>(__builtin_alloca(sizeof(_CharT) * __w)));\n-\t      __pad<_CharT, _Traits>::_S_pad(__out, __out.fill(), __cs, __s,\n-\t\t\t\t\t     __w, __len, false);\n-\t      __s = __cs;\n-\t      __len = __w;\n-\t    }\n-\t  __out._M_write(__s, __len);\n-\t  __out.width(0);\n-\t}\n       return __out;\n     }\n "}, {"sha": "6b4d389ac1fa377c8aba7e7ab8ecf037492f41a6", "filename": "libstdc++-v3/include/std/std_ostream.h", "status": "modified", "additions": 44, "deletions": 6, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_ostream.h?ref=ec2061a9bfaf34fa44584beb2c440b2a15e6df10", "patch": "@@ -92,6 +92,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         friend basic_ostream<_CharT2, _Traits2>&\n         operator<<(basic_ostream<_CharT2, _Traits2>&, const char*);\n \n+      template<typename _CharT2, typename _Traits2, typename _Alloc>\n+        friend basic_ostream<_CharT2, _Traits2>&\n+        operator<<(basic_ostream<_CharT2, _Traits2>&,\n+\t\t   const basic_string<_CharT2, _Traits2, _Alloc>&);\n+\n       // [27.6.2.2] constructor/destructor\n       /**\n        *  @brief  Base constructor.\n@@ -288,11 +293,25 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       void\n       _M_write(const char_type* __s, streamsize __n)\n       {\n-\tstreamsize __put = this->rdbuf()->sputn(__s, __n);\n+\tconst streamsize __put = this->rdbuf()->sputn(__s, __n);\n \tif (__put != __n)\n \t  this->setstate(ios_base::badbit);\n       }\n \n+      void\n+      _M_write(char_type __c, streamsize __n)\n+      {\n+\tfor (; __n > 0; --__n)\n+\t  {\n+\t    const int_type __put = this->rdbuf()->sputc(__c);\n+\t    if (traits_type::eq_int_type(__put, traits_type::eof()))\n+\t      {\n+\t\tthis->setstate(ios_base::badbit);\n+\t\tbreak;\n+\t      }\n+\t  }\n+      }\n+\n       /**\n        *  @brief  Character string insertion.\n        *  @param  s  The array to insert.\n@@ -366,6 +385,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       template<typename _ValueT>\n         __ostream_type&\n         _M_insert(_ValueT __v);\n+\n+      __ostream_type&\n+      _M_insert(const char_type* __s, streamsize __n);\n     };\n \n   /**\n@@ -448,7 +470,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   */\n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>&\n-    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c);\n+    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)\n+    { return __out._M_insert(&__c, 1); }\n \n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>&\n@@ -458,7 +481,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // Specialization\n   template <class _Traits> \n     basic_ostream<char, _Traits>&\n-    operator<<(basic_ostream<char, _Traits>& __out, char __c);\n+    operator<<(basic_ostream<char, _Traits>& __out, char __c)\n+    { return __out._M_insert(&__c, 1); }\n \n   // Signed and unsigned\n   template<class _Traits>\n@@ -488,7 +512,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   */\n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>&\n-    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s);\n+    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)\n+    {\n+      if (!__s)\n+\t__out.setstate(ios_base::badbit);\n+      else\n+\t__out._M_insert(__s, static_cast<streamsize>(_Traits::length(__s)));\n+      return __out;\n+    }\n \n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits> &\n@@ -497,8 +528,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // Partial specializationss\n   template<class _Traits>\n     basic_ostream<char, _Traits>&\n-    operator<<(basic_ostream<char, _Traits>& __out, const char* __s);\n- \n+    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)\n+    {\n+      if (!__s)\n+\t__out.setstate(ios_base::badbit);\n+      else\n+\t__out._M_insert(__s, static_cast<streamsize>(_Traits::length(__s)));\n+      return __out;\n+    }\n+\n   // Signed and unsigned\n   template<class _Traits>\n     basic_ostream<char, _Traits>&"}, {"sha": "f67582c5f26cba19056d64aabea0954ef5e5328d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/char/28277.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F28277.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F28277.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F28277.cc?ref=ec2061a9bfaf34fa44584beb2c440b2a15e6df10", "patch": "@@ -0,0 +1,49 @@\n+// 2006-10-12  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 21.3.7.9 inserters and extractors\n+\n+#include <ostream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/28277\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  ostringstream oss_01;\n+  const string str_01(50, 'a');\n+\n+  oss_01.width(20000000);\n+  const streamsize width = oss_01.width();\n+\n+  oss_01 << str_01;\n+\n+  VERIFY( oss_01.good() );\n+  VERIFY( oss_01.str().size() == width );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ff6228f124086d18a087e279254628d59984fba9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/wchar_t/28277.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F28277.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F28277.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F28277.cc?ref=ec2061a9bfaf34fa44584beb2c440b2a15e6df10", "patch": "@@ -0,0 +1,49 @@\n+// 2006-10-12  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 21.3.7.9 inserters and extractors\n+\n+#include <ostream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/28277\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  wostringstream oss_01;\n+  const wstring str_01(50, L'a');\n+\n+  oss_01.width(5000000);\n+  const streamsize width = oss_01.width();\n+\n+  oss_01 << str_01;\n+\n+  VERIFY( oss_01.good() );\n+  VERIFY( oss_01.str().size() == width );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f79fb064ccc9bbc5a77f17e859f135e8a2ff1774", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/char/28277-3.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F28277-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F28277-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F28277-3.cc?ref=ec2061a9bfaf34fa44584beb2c440b2a15e6df10", "patch": "@@ -0,0 +1,48 @@\n+// 2006-10-12  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+\n+#include <ostream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/28277\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  ostringstream oss_01;\n+\n+  oss_01.width(20000000);\n+  const streamsize width = oss_01.width();\n+\n+  oss_01 << 'a';\n+\n+  VERIFY( oss_01.good() );\n+  VERIFY( oss_01.str().size() == width );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "cc02979cb5eede052930432d9caa44e66d2ac7d9", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/char/28277-4.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F28277-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F28277-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fchar%2F28277-4.cc?ref=ec2061a9bfaf34fa44584beb2c440b2a15e6df10", "patch": "@@ -0,0 +1,49 @@\n+// 2006-10-12  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+\n+#include <ostream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/28277\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  ostringstream oss_01;\n+  const string str_01(50, 'a');\n+\n+  oss_01.width(20000000);\n+  const streamsize width = oss_01.width();\n+\n+  oss_01 << str_01.c_str();\n+\n+  VERIFY( oss_01.good() );\n+  VERIFY( oss_01.str().size() == width );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "736c8a8ae94f972e11cc5fb491ca424c0adacdd1", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/wchar_t/28277-2.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F28277-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F28277-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F28277-2.cc?ref=ec2061a9bfaf34fa44584beb2c440b2a15e6df10", "patch": "@@ -0,0 +1,49 @@\n+// 2006-10-12  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+\n+#include <ostream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/28277\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  wostringstream oss_01;\n+  const string str_01(50, 'a');\n+\n+  oss_01.width(5000000);\n+  const streamsize width = oss_01.width();\n+\n+  oss_01 << str_01.c_str();\n+\n+  VERIFY( oss_01.good() );\n+  VERIFY( oss_01.str().size() == width );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ae13c5267e38b2c904c840be01dde020b3758b33", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/wchar_t/28277-3.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F28277-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F28277-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F28277-3.cc?ref=ec2061a9bfaf34fa44584beb2c440b2a15e6df10", "patch": "@@ -0,0 +1,48 @@\n+// 2006-10-12  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+\n+#include <ostream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/28277\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  wostringstream oss_01;\n+\n+  oss_01.width(5000000);\n+  const streamsize width = oss_01.width();\n+\n+  oss_01 << L'a';\n+\n+  VERIFY( oss_01.good() );\n+  VERIFY( oss_01.str().size() == width );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1a13e04fc409ce8d4089006633b68af690fba83b", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_character/wchar_t/28277-4.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F28277-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec2061a9bfaf34fa44584beb2c440b2a15e6df10/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F28277-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_character%2Fwchar_t%2F28277-4.cc?ref=ec2061a9bfaf34fa44584beb2c440b2a15e6df10", "patch": "@@ -0,0 +1,49 @@\n+// 2006-10-12  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 27.6.2.5.4 basic_ostream character inserters\n+\n+#include <ostream>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/28277\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  wostringstream oss_01;\n+  const wstring str_01(50, L'a');\n+\n+  oss_01.width(5000000);\n+  const streamsize width = oss_01.width();\n+\n+  oss_01 << str_01.c_str();\n+\n+  VERIFY( oss_01.good() );\n+  VERIFY( oss_01.str().size() == width );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}