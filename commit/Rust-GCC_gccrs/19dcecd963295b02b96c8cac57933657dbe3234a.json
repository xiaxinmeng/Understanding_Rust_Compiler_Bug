{"sha": "19dcecd963295b02b96c8cac57933657dbe3234a", "node_id": "C_kwDOANBUbNoAKDE5ZGNlY2Q5NjMyOTViMDJiOTZjOGNhYzU3OTMzNjU3ZGJlMzIzNGE", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-12-15T05:07:30Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-12-20T01:53:06Z"}, "message": "Optimize bit_and op1 float_vector_all_ones_operands to op1.\n\ngcc/ChangeLog:\n\n\tPR target/98468\n\t* config/i386/sse.md (*bit_and_float_vector_all_ones): New\n\tpre-reload splitter.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr98468.c: New test.", "tree": {"sha": "d750ed039f56a051d1071027fd88f18523001816", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d750ed039f56a051d1071027fd88f18523001816"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19dcecd963295b02b96c8cac57933657dbe3234a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19dcecd963295b02b96c8cac57933657dbe3234a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19dcecd963295b02b96c8cac57933657dbe3234a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19dcecd963295b02b96c8cac57933657dbe3234a/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29309f6e29d0912eececa1bac29b249440469107", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29309f6e29d0912eececa1bac29b249440469107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29309f6e29d0912eececa1bac29b249440469107"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "5196149ee32557bccf83e0c5c2d6303c1bd704aa", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19dcecd963295b02b96c8cac57933657dbe3234a/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19dcecd963295b02b96c8cac57933657dbe3234a/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=19dcecd963295b02b96c8cac57933657dbe3234a", "patch": "@@ -4465,6 +4465,18 @@\n \t\t      (const_string \"<sseinsnmode>\")\n \t\t      (const_string \"XI\")))])\n \n+;; Generic part doesn't support the simpliciation of logic operation with\n+;; float_vector_all_ones_operand since it's not valid rtl. Add combine spiltter\n+;; for them, it should be safe since there's no SIMD Floating-Point Exceptions.\n+(define_insn_and_split \"*bit_and_float_vector_all_ones\"\n+  [(set (match_operand:VFB 0 \"nonimmediate_operand\")\n+\t(and:VFB (match_operand:VFB 1 \"nonimmediate_operand\")\n+\t\t (match_operand:VFB 2 \"float_vector_all_ones_operand\")))]\n+ \"TARGET_SSE && ix86_pre_reload_split ()\"\n+ \"#\"\n+ \"&& 1\"\n+ [(set (match_dup 0) (match_dup 1))])\n+\n (define_expand \"copysign<mode>3\"\n   [(set (match_dup 4)\n \t(and:VFB"}, {"sha": "ca3aa256c529edce90434675061ab52c2a1e9eae", "filename": "gcc/testsuite/gcc.target/i386/pr98468.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19dcecd963295b02b96c8cac57933657dbe3234a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98468.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19dcecd963295b02b96c8cac57933657dbe3234a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98468.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98468.c?ref=19dcecd963295b02b96c8cac57933657dbe3234a", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-not \"vxorp\" } } */\n+/* { dg-final { scan-assembler-not \"vandnp\" } } */\n+\n+#include<immintrin.h>\n+__m128 f(__m128 val)\n+{\n+    return _mm_andnot_ps(_mm_set_ps1(0.0f), val);\n+}\n+\n+__m256 f2(__m256 val)\n+{\n+    return _mm256_andnot_ps(_mm256_set1_ps(0.0f), val);\n+}\n+\n+__m512 f3(__m512 val)\n+{\n+    return _mm512_andnot_ps(_mm512_set1_ps(0.0f), val);\n+}\n+\n+__m128d f4(__m128d val)\n+{\n+    return _mm_andnot_pd(_mm_set_pd1(0.0), val);\n+}\n+\n+__m256d f5(__m256d val)\n+{\n+    return _mm256_andnot_pd(_mm256_set1_pd(0.0), val);\n+}\n+\n+__m512d f6(__m512d val)\n+{\n+    return _mm512_andnot_pd(_mm512_set1_pd(0.0), val);\n+}"}]}