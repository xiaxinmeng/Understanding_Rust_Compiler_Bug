{"sha": "8ab30b9778a46cbf0a0853c78cd799b9afca61c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFiMzBiOTc3OGE0NmNiZjBhMDg1M2M3OGNkNzk5YjlhZmNhNjFjNQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2018-04-03T19:06:28Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2018-04-03T19:06:28Z"}, "message": "emmintrin.h (_mm_cvtpd_epi32): Use __vector rather than vector.\n\n[gcc]\n\n2018-04-03  Bill Schmidt  <wschmidt@linux.ibm.com>\n\n\t* config/rs6000/emmintrin.h (_mm_cvtpd_epi32): Use __vector rather\n\tthan vector.\n\t(_mm_cvtpd_ps): Likewise.\n\t(_mm_cvttpd_epi32): Likewise.\n\t* config/rs6000/mmintrin.h (_mm_unpacklo_pi8): Likewise.\n\t* config/rs6000/xmmintrin.h: For strict-ANSI C++ or C11, undefine\n\tvector, pixel, and bool following altivec.h include.\n\n[gcc/testsuite]\n\n2018-04-03  Bill Schmidt  <wschmidt@linux.ibm.com>\n\n\t* gcc.target/powerpc/powerpc.exp: Add .C suffix for main loop.\n\t* gcc.target/powerpc/undef-bool-1.C: New file.\n\t* gcc.target/powerpc/undef-bool-2.c: New file.\n\nFrom-SVN: r259050", "tree": {"sha": "607f4dbb2879616de6ed6d74ba00773024b90d2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/607f4dbb2879616de6ed6d74ba00773024b90d2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ab30b9778a46cbf0a0853c78cd799b9afca61c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab30b9778a46cbf0a0853c78cd799b9afca61c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ab30b9778a46cbf0a0853c78cd799b9afca61c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab30b9778a46cbf0a0853c78cd799b9afca61c5/comments", "author": null, "committer": null, "parents": [{"sha": "e52c093a9fd668cddc2397719e8a5449f8cf27de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e52c093a9fd668cddc2397719e8a5449f8cf27de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e52c093a9fd668cddc2397719e8a5449f8cf27de"}], "stats": {"total": 66, "additions": 61, "deletions": 5}, "files": [{"sha": "fea1bed40d125e9107b05a0dca5f07ef8428748c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab30b9778a46cbf0a0853c78cd799b9afca61c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab30b9778a46cbf0a0853c78cd799b9afca61c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ab30b9778a46cbf0a0853c78cd799b9afca61c5", "patch": "@@ -1,3 +1,13 @@\n+2018-04-03  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/emmintrin.h (_mm_cvtpd_epi32): Use __vector rather\n+\tthan vector.\n+\t(_mm_cvtpd_ps): Likewise.\n+\t(_mm_cvttpd_epi32): Likewise.\n+\t* config/rs6000/mmintrin.h (_mm_unpacklo_pi8): Likewise.\n+\t* config/rs6000/xmmintrin.h: For strict-ANSI C++ or C11, undefine\n+\tvector, pixel, and bool following altivec.h include.\n+\n 2018-04-03  Martin Sebor  <msebor@redhat.com>\n \n \t* doc/extend.texi (Common Function Attributes): Clarify."}, {"sha": "8d4545136e1c8dacc90c4db09c780de6bcfa1fac", "filename": "gcc/config/rs6000/emmintrin.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab30b9778a46cbf0a0853c78cd799b9afca61c5/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab30b9778a46cbf0a0853c78cd799b9afca61c5/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Femmintrin.h?ref=8ab30b9778a46cbf0a0853c78cd799b9afca61c5", "patch": "@@ -885,7 +885,7 @@ _mm_cvtpd_epi32 (__m128d __A)\n \n #ifdef _ARCH_PWR8\n   temp = vec_mergeo (temp, temp);\n-  result = (__v4si)vec_vpkudum ((vector long)temp, (vector long)vzero);\n+  result = (__v4si)vec_vpkudum ((__vector long)temp, (__vector long)vzero);\n #else\n   {\n     const __v16qu pkperm = {0x00, 0x01, 0x02, 0x03, 0x08, 0x09, 0x0a, 0x0b,\n@@ -919,7 +919,7 @@ _mm_cvtpd_ps (__m128d __A)\n \n #ifdef _ARCH_PWR8\n   temp = vec_mergeo (temp, temp);\n-  result = (__v4sf)vec_vpkudum ((vector long)temp, (vector long)vzero);\n+  result = (__v4sf)vec_vpkudum ((__vector long)temp, (__vector long)vzero);\n #else\n   {\n     const __v16qu pkperm = {0x00, 0x01, 0x02, 0x03, 0x08, 0x09, 0x0a, 0x0b,\n@@ -947,7 +947,7 @@ _mm_cvttpd_epi32 (__m128d __A)\n \n #ifdef _ARCH_PWR8\n   temp = vec_mergeo (temp, temp);\n-  result = (__v4si)vec_vpkudum ((vector long)temp, (vector long)vzero);\n+  result = (__v4si)vec_vpkudum ((__vector long)temp, (__vector long)vzero);\n #else\n   {\n     const __v16qu pkperm = {0x00, 0x01, 0x02, 0x03, 0x08, 0x09, 0x0a, 0x0b,"}, {"sha": "b15dd9bf242079cae82c83479af9965889a2abdd", "filename": "gcc/config/rs6000/mmintrin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab30b9778a46cbf0a0853c78cd799b9afca61c5/gcc%2Fconfig%2Frs6000%2Fmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab30b9778a46cbf0a0853c78cd799b9afca61c5/gcc%2Fconfig%2Frs6000%2Fmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fmmintrin.h?ref=8ab30b9778a46cbf0a0853c78cd799b9afca61c5", "patch": "@@ -317,7 +317,7 @@ _mm_unpacklo_pi8 (__m64 __m1, __m64 __m2)\n   a = (__vector unsigned char)vec_splats (__m1);\n   b = (__vector unsigned char)vec_splats (__m2);\n   c = vec_mergel (a, b);\n-  return (__builtin_unpack_vector_int128 ((vector __int128_t)c, 1));\n+  return (__builtin_unpack_vector_int128 ((__vector __int128_t)c, 1));\n #else\n   __m64_union m1, m2, res;\n "}, {"sha": "43d03ea059198dae64cc3924658ab81a4243ad0c", "filename": "gcc/config/rs6000/xmmintrin.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab30b9778a46cbf0a0853c78cd799b9afca61c5/gcc%2Fconfig%2Frs6000%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab30b9778a46cbf0a0853c78cd799b9afca61c5/gcc%2Fconfig%2Frs6000%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxmmintrin.h?ref=8ab30b9778a46cbf0a0853c78cd799b9afca61c5", "patch": "@@ -58,6 +58,18 @@\n #define _XMMINTRIN_H_INCLUDED\n \n #include <altivec.h>\n+\n+/* Avoid collisions between altivec.h and strict adherence to C++ and\n+   C11 standards.  This should eventually be done inside altivec.h itself,\n+   but only after testing a full distro build.  */\n+#if defined(__STRICT_ANSI__) && (defined(__cplusplus) || \\\n+\t\t\t\t (defined(__STDC_VERSION__) &&\t\\\n+\t\t\t\t  __STDC_VERSION__ >= 201112L))\n+#undef vector\n+#undef pixel\n+#undef bool\n+#endif\n+\n #include <assert.h>\n \n /* We need type definitions from the MMX header file.  */"}, {"sha": "4bd6d261d656a79881e9a9f1d594abb73f7a4cbd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab30b9778a46cbf0a0853c78cd799b9afca61c5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab30b9778a46cbf0a0853c78cd799b9afca61c5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ab30b9778a46cbf0a0853c78cd799b9afca61c5", "patch": "@@ -1,3 +1,9 @@\n+2018-04-03  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/powerpc.exp: Add .C suffix for main loop.\n+\t* gcc.target/powerpc/undef-bool-1.C: New file.\n+\t* gcc.target/powerpc/undef-bool-2.c: New file.\n+\n 2018-04-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/84768"}, {"sha": "498315c90a19c7f8776d9ae2a89a1c98372d3816", "filename": "gcc/testsuite/gcc.target/powerpc/powerpc.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab30b9778a46cbf0a0853c78cd799b9afca61c5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpowerpc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab30b9778a46cbf0a0853c78cd799b9afca61c5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpowerpc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpowerpc.exp?ref=8ab30b9778a46cbf0a0853c78cd799b9afca61c5", "patch": "@@ -35,7 +35,7 @@ if ![info exists DEFAULT_CFLAGS] then {\n dg-init\n \n # Main loop.\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \\\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]] \\\n \t\"\" $DEFAULT_CFLAGS\n \n set SAVRES_TEST_OPTS [list -Os -O2 {-Os -mno-multiple} {-O2 -mno-multiple}]"}, {"sha": "5bdd6a31e6494a85132d4a0f53c39feafcbe8d13", "filename": "gcc/testsuite/gcc.target/powerpc/undef-bool-1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab30b9778a46cbf0a0853c78cd799b9afca61c5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fundef-bool-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab30b9778a46cbf0a0853c78cd799b9afca61c5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fundef-bool-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fundef-bool-1.C?ref=8ab30b9778a46cbf0a0853c78cd799b9afca61c5", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -std=c++11 -DNO_WARN_X86_INTRINSICS\" } */\n+\n+/* Test to ensure that \"bool\" gets undef'd in xmmintrin.h when\n+   we require strict ANSI.  */\n+\n+#include <xmmintrin.h>\n+\n+bool foo (int x)\n+{\n+  return x == 2;\n+}\n+"}, {"sha": "3cab936f89fd3854da365dbc9b1483c87dbb9b64", "filename": "gcc/testsuite/gcc.target/powerpc/undef-bool-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab30b9778a46cbf0a0853c78cd799b9afca61c5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fundef-bool-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab30b9778a46cbf0a0853c78cd799b9afca61c5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fundef-bool-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fundef-bool-2.c?ref=8ab30b9778a46cbf0a0853c78cd799b9afca61c5", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -std=c11 -DNO_WARN_X86_INTRINSICS\" } */\n+\n+/* Test to ensure that \"bool\" gets undef'd in xmmintrin.h when\n+   we require strict ANSI.  Subsequent use of bool needs stdbool.h.\n+   altivec.h should eventually avoid defining bool, vector, and\n+   pixel, following distro testing.  */\n+\n+#include <xmmintrin.h>\n+\n+bool foo (int x) /* { dg-error \"unknown type name 'bool'; did you mean '_Bool'?\" } */\n+{\n+  return x == 2;\n+}\n+"}]}