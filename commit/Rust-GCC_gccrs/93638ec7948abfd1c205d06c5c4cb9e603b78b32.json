{"sha": "93638ec7948abfd1c205d06c5c4cb9e603b78b32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM2MzhlYzc5NDhhYmZkMWMyMDVkMDZjNWM0Y2I5ZTYwM2I3OGIzMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-02-05T11:38:57Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-02-05T11:38:57Z"}, "message": "cstdio: New.\n\n2006-02-05  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/cstdio: New.\n\t* include/tr1/stdio.h: Likewise.\n\t* include/Makefile.am: Add.\n\t* testsuite/tr1/8_c_compatibility/cstdio/functions.cc: New.\n\t* testsuite/tr1/headers.cc: Update.\t\n\t* docs/html/ext/tr1.html: Update.\n\n\t* include/tr1/cwchar: Simplify, use _GLIBCXX_USE_C99, consistently\n\twith the facilities in std::.\n\t* include/tr1/cwctype: Likewise.\n\t* testsuite/tr1/8_c_compatibility/cwchar/functions.cc: Tweak.\n\t* testsuite/tr1/8_c_compatibility/cwctype/functions.cc: Likewise.\n\t* acinclude.m4 ([GLIBCXX_CHECK_C99_TR1]): Remove <wchar.h> and\n\t<wctype.h> checks.\n\n\t* include/Makefile.in: Regenerate.\n\t* config.h.in: Likewise.\n\t* configure: Likewise.\n\nFrom-SVN: r110613", "tree": {"sha": "85cfc5081abd7f7273316a72baeef26edce7c621", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85cfc5081abd7f7273316a72baeef26edce7c621"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93638ec7948abfd1c205d06c5c4cb9e603b78b32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93638ec7948abfd1c205d06c5c4cb9e603b78b32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93638ec7948abfd1c205d06c5c4cb9e603b78b32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93638ec7948abfd1c205d06c5c4cb9e603b78b32/comments", "author": null, "committer": null, "parents": [{"sha": "dc2cd23211e027961bd2c4071a57bfde60d66976", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc2cd23211e027961bd2c4071a57bfde60d66976", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc2cd23211e027961bd2c4071a57bfde60d66976"}], "stats": {"total": 512, "additions": 239, "deletions": 273}, "files": [{"sha": "dc35184762058a401ac301f4f66f6fed1cdcbbfc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=93638ec7948abfd1c205d06c5c4cb9e603b78b32", "patch": "@@ -1,3 +1,24 @@\n+2006-02-05  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/cstdio: New.\n+\t* include/tr1/stdio.h: Likewise.\n+\t* include/Makefile.am: Add.\n+\t* testsuite/tr1/8_c_compatibility/cstdio/functions.cc: New.\n+\t* testsuite/tr1/headers.cc: Update.\t\n+\t* docs/html/ext/tr1.html: Update.\n+\n+\t* include/tr1/cwchar: Simplify, use _GLIBCXX_USE_C99, consistently\n+\twith the facilities in std::.\n+\t* include/tr1/cwctype: Likewise.\n+\t* testsuite/tr1/8_c_compatibility/cwchar/functions.cc: Tweak.\n+\t* testsuite/tr1/8_c_compatibility/cwctype/functions.cc: Likewise.\n+\t* acinclude.m4 ([GLIBCXX_CHECK_C99_TR1]): Remove <wchar.h> and\n+\t<wctype.h> checks.\n+\n+\t* include/Makefile.in: Regenerate.\n+\t* config.h.in: Likewise.\n+\t* configure: Likewise.\n+\n 2006-02-04  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/tr1/8_c_compatibility/cwchar/functions.cc: Fix."}, {"sha": "bd1b380a4bc85bd9e78318931a6f06534a34e753", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=93638ec7948abfd1c205d06c5c4cb9e603b78b32", "patch": "@@ -1203,50 +1203,6 @@ AC_DEFUN([GLIBCXX_CHECK_C99_TR1], [\n               <tr1/cinttypes> in namespace std::tr1.])\n   fi\n \n-  # Check for the existence of <wchar.h> functions.\n-  AC_MSG_CHECKING([for ISO C99 support to TR1 in <wchar.h>])\n-  AC_CACHE_VAL(ac_c99_wchar_tr1, [\n-  AC_TRY_COMPILE([#include <wchar.h>\n-\t          #include <stdio.h>\n-\t          #include <stdarg.h>],\n-\t         [const wchar_t* nptr;\n-\t          const wchar_t* format;\n-\t          const wchar_t* s;\n-\t          wchar_t** endptr;\n-\t          FILE* stream;\n-\t          va_list arg;\n-\t          int base;\n-\t          float fret = wcstof(nptr, endptr);\n-\t          long double ldret = wcstold(nptr, endptr);\n-\t          int ret = vfwscanf(stream, format, arg);\n-  \t          ret = vswscanf(s, format, arg);\n-  \t          ret = vwscanf(format, arg);\n-\t          long long llret = wcstoll(nptr, endptr, base);\n-  \t          unsigned long long ullret = wcstoull(nptr, endptr, base);\n-\t\t ],[ac_c99_wchar_tr1=yes], [ac_c99_wchar_tr1=no])\n-  ])\n-  AC_MSG_RESULT($ac_c99_wchar_tr1)\n-  if test x\"$ac_c99_wchar_tr1\" = x\"yes\"; then\n-    AC_DEFINE(_GLIBCXX_USE_C99_WCHAR_TR1, 1,\n-              [Define if C99 functions in <wchar.h> should be imported in\n-\t      <tr1/cwchar> in namespace std::tr1.])\n-  fi\n-\n-  # Check for the existence of <wctype.h> functions.\n-  AC_MSG_CHECKING([for ISO C99 support to TR1 in <wctype.h>])\n-  AC_CACHE_VAL(ac_c99_wctype_tr1, [\n-  AC_TRY_COMPILE([#include <wctype.h>],\n-\t         [wint_t ch;\n-\t          int ret = iswblank(ch);\n-\t\t ],[ac_c99_wctype_tr1=yes], [ac_c99_wctype_tr1=no])\n-  ])\n-  AC_MSG_RESULT($ac_c99_wctype_tr1)\n-  if test x\"$ac_c99_wctype_tr1\" = x\"yes\"; then\n-    AC_DEFINE(_GLIBCXX_USE_C99_WCTYPE_TR1, 1,\n-              [Define if C99 functions in <wctype.h> should be imported in\n-\t      <tr1/cwctype> in namespace std::tr1.])\n-  fi\n-\n   AC_LANG_RESTORE\n ])\n "}, {"sha": "d940e6189c753848c441ca906623e7c64a6c3ec8", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=93638ec7948abfd1c205d06c5c4cb9e603b78b32", "patch": "@@ -719,14 +719,6 @@\n    namespace std::tr1. */\n #undef _GLIBCXX_USE_C99_STDINT_TR1\n \n-/* Define if C99 functions in <wchar.h> should be imported in <tr1/cwchar> in\n-   namespace std::tr1. */\n-#undef _GLIBCXX_USE_C99_WCHAR_TR1\n-\n-/* Define if C99 functions in <wctype.h> should be imported in <tr1/cwctype>\n-   in namespace std::tr1. */\n-#undef _GLIBCXX_USE_C99_WCTYPE_TR1\n-\n /* Define if iconv and related functions exist and are usable. */\n #undef _GLIBCXX_USE_ICONV\n "}, {"sha": "c0ac50f470d2697a2882d6313da6a2e3d83e0282", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 0, "deletions": 148, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=93638ec7948abfd1c205d06c5c4cb9e603b78b32", "patch": "@@ -30679,154 +30679,6 @@ _ACEOF\n \n   fi\n \n-  # Check for the existence of <wchar.h> functions.\n-  echo \"$as_me:$LINENO: checking for ISO C99 support to TR1 in <wchar.h>\" >&5\n-echo $ECHO_N \"checking for ISO C99 support to TR1 in <wchar.h>... $ECHO_C\" >&6\n-  if test \"${ac_c99_wchar_tr1+set}\" = set; then\n-  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n-else\n-\n-  cat >conftest.$ac_ext <<_ACEOF\n-/* confdefs.h.  */\n-_ACEOF\n-cat confdefs.h >>conftest.$ac_ext\n-cat >>conftest.$ac_ext <<_ACEOF\n-/* end confdefs.h.  */\n-#include <wchar.h>\n-\t          #include <stdio.h>\n-\t          #include <stdarg.h>\n-int\n-main ()\n-{\n-const wchar_t* nptr;\n-\t          const wchar_t* format;\n-\t          const wchar_t* s;\n-\t          wchar_t** endptr;\n-\t          FILE* stream;\n-\t          va_list arg;\n-\t          int base;\n-\t          float fret = wcstof(nptr, endptr);\n-\t          long double ldret = wcstold(nptr, endptr);\n-\t          int ret = vfwscanf(stream, format, arg);\n-  \t          ret = vswscanf(s, format, arg);\n-  \t          ret = vwscanf(format, arg);\n-\t          long long llret = wcstoll(nptr, endptr, base);\n-  \t          unsigned long long ullret = wcstoull(nptr, endptr, base);\n-\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-rm -f conftest.$ac_objext\n-if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n-  (eval $ac_compile) 2>conftest.er1\n-  ac_status=$?\n-  grep -v '^ *+' conftest.er1 >conftest.err\n-  rm -f conftest.er1\n-  cat conftest.err >&5\n-  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n-  (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n-\t\t\t || test ! -s conftest.err'\n-  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n-  (exit $ac_status); }; } &&\n-\t { ac_try='test -s conftest.$ac_objext'\n-  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n-  (exit $ac_status); }; }; then\n-  ac_c99_wchar_tr1=yes\n-else\n-  echo \"$as_me: failed program was:\" >&5\n-sed 's/^/| /' conftest.$ac_ext >&5\n-\n-ac_c99_wchar_tr1=no\n-fi\n-rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n-\n-fi\n-\n-  echo \"$as_me:$LINENO: result: $ac_c99_wchar_tr1\" >&5\n-echo \"${ECHO_T}$ac_c99_wchar_tr1\" >&6\n-  if test x\"$ac_c99_wchar_tr1\" = x\"yes\"; then\n-\n-cat >>confdefs.h <<\\_ACEOF\n-#define _GLIBCXX_USE_C99_WCHAR_TR1 1\n-_ACEOF\n-\n-  fi\n-\n-  # Check for the existence of <wctype.h> functions.\n-  echo \"$as_me:$LINENO: checking for ISO C99 support to TR1 in <wctype.h>\" >&5\n-echo $ECHO_N \"checking for ISO C99 support to TR1 in <wctype.h>... $ECHO_C\" >&6\n-  if test \"${ac_c99_wctype_tr1+set}\" = set; then\n-  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n-else\n-\n-  cat >conftest.$ac_ext <<_ACEOF\n-/* confdefs.h.  */\n-_ACEOF\n-cat confdefs.h >>conftest.$ac_ext\n-cat >>conftest.$ac_ext <<_ACEOF\n-/* end confdefs.h.  */\n-#include <wctype.h>\n-int\n-main ()\n-{\n-wint_t ch;\n-\t          int ret = iswblank(ch);\n-\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-rm -f conftest.$ac_objext\n-if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n-  (eval $ac_compile) 2>conftest.er1\n-  ac_status=$?\n-  grep -v '^ *+' conftest.er1 >conftest.err\n-  rm -f conftest.er1\n-  cat conftest.err >&5\n-  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n-  (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n-\t\t\t || test ! -s conftest.err'\n-  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n-  (exit $ac_status); }; } &&\n-\t { ac_try='test -s conftest.$ac_objext'\n-  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n-  (exit $ac_status); }; }; then\n-  ac_c99_wctype_tr1=yes\n-else\n-  echo \"$as_me: failed program was:\" >&5\n-sed 's/^/| /' conftest.$ac_ext >&5\n-\n-ac_c99_wctype_tr1=no\n-fi\n-rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n-\n-fi\n-\n-  echo \"$as_me:$LINENO: result: $ac_c99_wctype_tr1\" >&5\n-echo \"${ECHO_T}$ac_c99_wctype_tr1\" >&6\n-  if test x\"$ac_c99_wctype_tr1\" = x\"yes\"; then\n-\n-cat >>confdefs.h <<\\_ACEOF\n-#define _GLIBCXX_USE_C99_WCTYPE_TR1 1\n-_ACEOF\n-\n-  fi\n-\n   ac_ext=c\n ac_cpp='$CPP $CPPFLAGS'\n ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'"}, {"sha": "e8601ac03a98947338839d9686dc4f92174163b3", "filename": "libstdc++-v3/docs/html/ext/tr1.html", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Ftr1.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Ftr1.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Ftr1.html?ref=93638ec7948abfd1c205d06c5c4cb9e603b78b32", "patch": "@@ -2075,41 +2075,41 @@ <h1 align=\"center\">\n     <tr>\n       <td>8.24</td>\n       <td>Additions to header <code>&lt;cstdio&gt;</code></td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.24.1</td>\n       <td>Synopsis</td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.24.2</td>\n       <td>Definitions</td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.24.3</td>\n       <td>Additional format specifiers</td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n-      <td></td>\n+      <td>C library responsability</td>\n     </tr>\n     <tr>\n       <td>8.24.4</td>\n       <td>Additions to header <code>&lt;stdio.h&gt;</code></td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n@@ -2214,7 +2214,7 @@ <h1 align=\"center\">\n       <td>done</td>\n       <td></td>\n       <td></td>\n-      <td></td>\n+      <td>C library responsability</td>\n     </tr>\n     <tr>\n       <td>8.31</td>\n@@ -2307,7 +2307,7 @@ <h3>Footnotes</h3>\n <table width=\"100%\" border=\"0\">\n <tr>\n   <td>\n-    <!-- IGNORE DIFF -->Last modified 2006-02-03\n+    <!-- IGNORE DIFF -->Last modified 2006-02-05\n   </td>\n   <td align=\"right\" valign=\"bottom\">\n     <a href=\"http://validator.w3.org/check/referer\">"}, {"sha": "b16993d117516ec6f4dd8dad6159771664b166c5", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=93638ec7948abfd1c205d06c5c4cb9e603b78b32", "patch": "@@ -493,6 +493,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/complex \\\n \t${tr1_srcdir}/cstdarg \\\n \t${tr1_srcdir}/cstdint \\\n+\t${tr1_srcdir}/cstdio \\\n \t${tr1_srcdir}/ctype.h \\\n \t${tr1_srcdir}/cwchar \\\n \t${tr1_srcdir}/cwctype \\\n@@ -510,6 +511,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/repeat.h \\\n \t${tr1_srcdir}/stdarg.h \\\n \t${tr1_srcdir}/stdint.h \\\n+\t${tr1_srcdir}/stdio.h \\\n \t${tr1_srcdir}/tuple \\\n \t${tr1_srcdir}/tuple_iterate.h \\\n \t${tr1_srcdir}/type_traits \\"}, {"sha": "bd6c31331f9a83b656fb3eec1b9955d2f105a1d3", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=93638ec7948abfd1c205d06c5c4cb9e603b78b32", "patch": "@@ -710,6 +710,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/complex \\\n \t${tr1_srcdir}/cstdarg \\\n \t${tr1_srcdir}/cstdint \\\n+\t${tr1_srcdir}/cstdio \\\n \t${tr1_srcdir}/ctype.h \\\n \t${tr1_srcdir}/cwchar \\\n \t${tr1_srcdir}/cwctype \\\n@@ -727,6 +728,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/repeat.h \\\n \t${tr1_srcdir}/stdarg.h \\\n \t${tr1_srcdir}/stdint.h \\\n+\t${tr1_srcdir}/stdio.h \\\n \t${tr1_srcdir}/tuple \\\n \t${tr1_srcdir}/tuple_iterate.h \\\n \t${tr1_srcdir}/type_traits \\"}, {"sha": "bed0ff333d3b4e7d93f47f86c9d7e9643465541f", "filename": "libstdc++-v3/include/tr1/cstdio", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdio?ref=93638ec7948abfd1c205d06c5c4cb9e603b78b32", "patch": "@@ -0,0 +1,57 @@\n+// TR1 cstdio -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file \n+ *  This is a TR1 C++ Library header. \n+ */\n+\n+#ifndef _TR1_CSTDIO\n+#define _TR1_CSTDIO 1\n+\n+#include <bits/c++config.h>\n+#include <cstdio>\n+\n+// namespace std::tr1\n+namespace std\n+{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n+#if _GLIBCXX_USE_C99\n+  using std::snprintf;\n+  using std::vsnprintf;\n+\n+  using std::vfscanf;\n+  using std::vscanf;\n+  using std::vsscanf;\n+#endif\n+\n+_GLIBCXX_END_NAMESPACE\n+}\n+\n+#endif"}, {"sha": "5a74d2acf15965fcdae07d6b506feeaab9a6bc13", "filename": "libstdc++-v3/include/tr1/cwchar", "status": "modified", "additions": 17, "deletions": 41, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcwchar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcwchar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcwchar?ref=93638ec7948abfd1c205d06c5c4cb9e603b78b32", "patch": "@@ -40,57 +40,33 @@\n \n #include <cwchar>\n \n-#if _GLIBCXX_USE_C99_WCHAR_TR1\n-\n-#undef wcstof\n-#undef wcstold\n-#undef wcstoll\n-#undef wcstoull\n-#undef vfwscanf\n-#undef vswscanf\n-#undef vwscanf\n-\n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n-\n-#if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC\n-  extern \"C\" long double\n-    (wcstold)(const wchar_t * restrict, wchar_t ** restrict);\n-#endif\n-#if !_GLIBCXX_USE_C99_DYNAMIC\n-  using ::wcstold;\n-#endif\n-#if _GLIBCXX_USE_C99_LONG_LONG_CHECK || _GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n-  extern \"C\" long long int\n-    (wcstoll)(const wchar_t * restrict, wchar_t ** restrict, int);\n-  extern \"C\" unsigned long long int\n-    (wcstoull)(const wchar_t * restrict, wchar_t ** restrict, int);\n-#endif\n-#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n-  using ::wcstoll;\n-  using ::wcstoull;\n-#endif\n-\n-_GLIBCXX_END_NAMESPACE\n-\n // namespace std::tr1\n namespace std\n {\n _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n-  using ::wcstof;\n-  using ::__gnu_cxx::wcstold;\n-  using ::__gnu_cxx::wcstoll;\n-  using ::__gnu_cxx::wcstoull;\n+#if _GLIBCXX_HAVE_WCSTOF\n+  using std::wcstof;\n+#endif\n+#if _GLIBCXX_HAVE_VFWSCANF\n+  using std::vfwscanf;\n+#endif\n+#if _GLIBCXX_HAVE_VSWSCANF\n+  using std::vswscanf;\n+#endif\n+#if _GLIBCXX_HAVE_VWSCANF\n+  using std::vwscanf;\n+#endif\n \n-  using ::vfwscanf;\n-  using ::vswscanf;\n-  using ::vwscanf;\n+#if _GLIBCXX_USE_C99\n+  using std::wcstold;\n+  using std::wcstoll;\n+  using std::wcstoull;\n+#endif\n \n _GLIBCXX_END_NAMESPACE\n }\n \n #endif\n \n #endif\n-\n-#endif"}, {"sha": "2784f405f1b45f897ba3c22112841b8608aa01e0", "filename": "libstdc++-v3/include/tr1/cwctype", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcwctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcwctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcwctype?ref=93638ec7948abfd1c205d06c5c4cb9e603b78b32", "patch": "@@ -40,22 +40,18 @@\n \n #include <cwctype>\n \n-#if _GLIBCXX_USE_C99_WCTYPE_TR1\n-\n-#undef iswblank\n-\n // namespace std::tr1\n namespace std\n {\n _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n-  using ::iswblank;\n+#if _GLIBCXX_HAVE_ISWBLANK\n+  using std::iswblank;\n+#endif  \n \n _GLIBCXX_END_NAMESPACE\n }\n \n #endif\n \n #endif\n-\n-#endif"}, {"sha": "fee7b6116157a269a5133f3f5228dcc335aa92a8", "filename": "libstdc++-v3/include/tr1/stdio.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fstdio.h?ref=93638ec7948abfd1c205d06c5c4cb9e603b78b32", "patch": "@@ -0,0 +1,39 @@\n+// TR1 stdio.h -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file \n+ *  This is a TR1 C++ Library header. \n+ */\n+\n+#ifndef _TR1_STDIO_H\n+#define _TR1_STDIO_H 1\n+\n+#include <tr1/cstdio>\n+\n+#endif"}, {"sha": "156154bf5f4ee0db5aaaaaa807e575e34c84ad81", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cstdio/functions.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdio%2Ffunctions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdio%2Ffunctions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdio%2Ffunctions.cc?ref=93638ec7948abfd1c205d06c5c4cb9e603b78b32", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do compile }\n+\n+// 2006-02-05  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 8.24 Additions to header <cstdio>\n+\n+#include <tr1/cstdio>\n+#include <cstdarg>\n+#include <cstddef>\n+\n+void test01(int dummy, ...)\n+{\n+  std::va_list ap;\n+  va_start(ap, dummy);\n+\n+#if _GLIBCXX_USE_C99\n+\n+  char* s = 0;\n+  const char* cs = 0;\n+  const char* format = \"%i\";\n+  FILE* stream = 0;\n+  std::size_t n = 0;\n+\n+  int ret;\n+\n+  ret = std::tr1::snprintf(s, n, format, dummy);\n+  ret = std::tr1::vsnprintf(s, n, format, ap);\n+\n+  ret = std::tr1::vfscanf(stream, format, ap); \n+  ret = std::tr1::vscanf(format, ap);\n+  ret = std::tr1::vsscanf(cs, format, ap);\n+  \n+#endif\n+}"}, {"sha": "adec4cd1346bfa56065f5f2ab708550963c92b5a", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cwchar/functions.cc", "status": "modified", "additions": 35, "deletions": 16, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcwchar%2Ffunctions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcwchar%2Ffunctions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcwchar%2Ffunctions.cc?ref=93638ec7948abfd1c205d06c5c4cb9e603b78b32", "patch": "@@ -30,32 +30,51 @@\n \n void test01(int dummy, ...)\n {\n-#if _GLIBCXX_USE_C99_WCHAR_TR1\n-\n-  const wchar_t* nptr = 0;\n-  const wchar_t* format = 0;\n-  const wchar_t* s = 0;\n-  wchar_t** endptr = 0;\n-  FILE* stream = 0;\n   std::va_list arg;\n   va_start(arg, dummy);\n \n+#if _GLIBCXX_HAVE_WCSTOF\n+  const wchar_t* nptr1 = 0;\n+  wchar_t** endptr1 = 0;\n   float fret;\n-  long double ldret;\n-  int ret;\n+  fret = std::tr1::wcstof(nptr1, endptr1);\n+#endif\n+\n+#if _GLIBCXX_HAVE_VFWSCANF\n+  FILE* stream = 0;\n+  const wchar_t* format1 = 0;\n+  int ret1;\n+  ret1 = std::tr1::vfwscanf(stream, format1, arg);\n+#endif\n \n-  fret = std::tr1::wcstof(nptr, endptr);\n-  ldret = std::tr1::wcstold(nptr, endptr);\n-  ret = std::tr1::vfwscanf(stream, format, arg);\n-  ret = std::tr1::vswscanf(s, format, arg);\n-  ret = std::tr1::vwscanf(format, arg);\n+#if _GLIBCXX_HAVE_VSWSCANF\n+  const wchar_t* s = 0;\n+  const wchar_t* format2 = 0;\n+  int ret2;\n+  ret2 = std::tr1::vswscanf(s, format2, arg);\n+#endif\n+\n+#if _GLIBCXX_HAVE_VWSCANF\n+  const wchar_t* format3 = 0;\n+  int ret3;\n+  ret3 = std::tr1::vwscanf(format3, arg);\n+#endif\n+\n+#if _GLIBCXX_USE_C99\n+\n+  const wchar_t* nptr2 = 0;\n+  wchar_t** endptr2 = 0;\n+  long double ldret;\n+  ldret = std::tr1::wcstold(nptr2, endptr2);\n \n #ifdef _GLIBCXX_USE_LONG_LONG\n+  const wchar_t* nptr3 = 0;\n+  wchar_t** endptr3 = 0;\n   int base = 0;\n   long long llret;\n   unsigned long long ullret;\n-  llret = std::tr1::wcstoll(nptr, endptr, base);\n-  ullret = std::tr1::wcstoull(nptr, endptr, base);\n+  llret = std::tr1::wcstoll(nptr3, endptr3, base);\n+  ullret = std::tr1::wcstoull(nptr3, endptr3, base);\n #endif\n \n #endif"}, {"sha": "3fe2ab6dc39be7793ebbc80736e9242564025e4a", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cwctype/functions.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcwctype%2Ffunctions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcwctype%2Ffunctions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcwctype%2Ffunctions.cc?ref=93638ec7948abfd1c205d06c5c4cb9e603b78b32", "patch": "@@ -28,7 +28,7 @@\n \n void test01()\n {\n-#if _GLIBCXX_USE_C99_WCTYPE_TR1\n+#if _GLIBCXX_HAVE_ISWBLANK\n \n   std::wint_t ch = 0;\n   int ret;"}, {"sha": "f9c1045a1cdefc2e11a84b96192c709017ad2203", "filename": "libstdc++-v3/testsuite/tr1/headers.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93638ec7948abfd1c205d06c5c4cb9e603b78b32/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders.cc?ref=93638ec7948abfd1c205d06c5c4cb9e603b78b32", "patch": "@@ -29,6 +29,7 @@\n #include <tr1/complex>\n #include <tr1/cstdarg>\n #include <tr1/cstdint>\n+#include <tr1/cstdio>\n #include <tr1/ctype.h>\n #include <tr1/cwchar>\n #include <tr1/cwctype>\n@@ -41,6 +42,7 @@\n #include <tr1/memory>\n #include <tr1/stdarg.h>\n #include <tr1/stdint.h>\n+#include <tr1/stdio.h>\n #include <tr1/tuple>\n #include <tr1/type_traits>\n #include <tr1/unordered_set>"}]}