{"sha": "160b095fc9ded4eaa2bf4d49bd97319f4aabff0a", "node_id": "C_kwDOANBUbNoAKDE2MGIwOTVmYzlkZWQ0ZWFhMmJmNGQ0OWJkOTczMTlmNGFhYmZmMGE", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-03-23T12:32:17Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-03-23T12:34:49Z"}, "message": "analyzer: fix ICE adding note to disabled diagnostic [PR104997]\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/104997\n\t* diagnostic-manager.cc (diagnostic_manager::add_diagnostic):\n\tConvert return type from \"void\" to \"bool\", reporting success vs\n\tfailure to caller, for both overloads.\n\t* diagnostic-manager.h (diagnostic_manager::add_diagnostic):\n\tLikewise.\n\t* engine.cc (impl_region_model_context::warn): Propagate return\n\tvalue from diagnostic_manager::add_diagnostic.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/104997\n\t* gcc.dg/analyzer/write-to-string-literal-4-disabled.c: New test,\n\tadapted from write-to-string-literal-4.c.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "f31b4162c0aadcfc262ec89f3b611d762bba1441", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f31b4162c0aadcfc262ec89f3b611d762bba1441"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/160b095fc9ded4eaa2bf4d49bd97319f4aabff0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/160b095fc9ded4eaa2bf4d49bd97319f4aabff0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/160b095fc9ded4eaa2bf4d49bd97319f4aabff0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/160b095fc9ded4eaa2bf4d49bd97319f4aabff0a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4894d69a1f37d54b6a612e58053db477ff5ba832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4894d69a1f37d54b6a612e58053db477ff5ba832", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4894d69a1f37d54b6a612e58053db477ff5ba832"}], "stats": {"total": 59, "additions": 45, "deletions": 14}, "files": [{"sha": "bf7c8fc5147ca82f384a6a538fdd3ff29fc58e82", "filename": "gcc/analyzer/diagnostic-manager.cc", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/160b095fc9ded4eaa2bf4d49bd97319f4aabff0a/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/160b095fc9ded4eaa2bf4d49bd97319f4aabff0a/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.cc?ref=160b095fc9ded4eaa2bf4d49bd97319f4aabff0a", "patch": "@@ -874,9 +874,11 @@ diagnostic_manager::diagnostic_manager (logger *logger, engine *eng,\n {\n }\n \n-/* Queue pending_diagnostic D at ENODE for later emission.  */\n+/* Queue pending_diagnostic D at ENODE for later emission.\n+   Return true/false signifying if the diagnostic was actually added.\n+   Take ownership of D (or delete it).  */\n \n-void\n+bool\n diagnostic_manager::add_diagnostic (const state_machine *sm,\n \t\t\t\t    exploded_node *enode,\n \t\t\t\t    const supernode *snode, const gimple *stmt,\n@@ -907,7 +909,7 @@ diagnostic_manager::add_diagnostic (const state_machine *sm,\n \t\t\t\td->get_kind ());\n \t  delete d;\n \t  m_num_disabled_diagnostics++;\n-\t  return;\n+\t  return false;\n \t}\n     }\n \n@@ -920,18 +922,22 @@ diagnostic_manager::add_diagnostic (const state_machine *sm,\n     log (\"adding saved diagnostic %i at SN %i to EN %i: %qs\",\n \t sd->get_index (),\n \t snode->m_index, enode->m_index, d->get_kind ());\n+  return true;\n }\n \n-/* Queue pending_diagnostic D at ENODE for later emission.  */\n+/* Queue pending_diagnostic D at ENODE for later emission.\n+   Return true/false signifying if the diagnostic was actually added.\n+   Take ownership of D (or delete it).  */\n \n-void\n+bool\n diagnostic_manager::add_diagnostic (exploded_node *enode,\n \t\t\t\t    const supernode *snode, const gimple *stmt,\n \t\t\t\t    stmt_finder *finder,\n \t\t\t\t    pending_diagnostic *d)\n {\n   gcc_assert (enode);\n-  add_diagnostic (NULL, enode, snode, stmt, finder, NULL_TREE, NULL, 0, d);\n+  return add_diagnostic (NULL, enode, snode, stmt, finder, NULL_TREE,\n+\t\t\t NULL, 0, d);\n }\n \n /* Add PN to the most recent saved_diagnostic.  */"}, {"sha": "fc5dc043c78b2197e9e13ce78f1e0fbae81acf18", "filename": "gcc/analyzer/diagnostic-manager.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/160b095fc9ded4eaa2bf4d49bd97319f4aabff0a/gcc%2Fanalyzer%2Fdiagnostic-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/160b095fc9ded4eaa2bf4d49bd97319f4aabff0a/gcc%2Fanalyzer%2Fdiagnostic-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.h?ref=160b095fc9ded4eaa2bf4d49bd97319f4aabff0a", "patch": "@@ -107,7 +107,7 @@ class diagnostic_manager : public log_user\n \n   json::object *to_json () const;\n \n-  void add_diagnostic (const state_machine *sm,\n+  bool add_diagnostic (const state_machine *sm,\n \t\t       exploded_node *enode,\n \t\t       const supernode *snode, const gimple *stmt,\n \t\t       stmt_finder *finder,\n@@ -116,7 +116,7 @@ class diagnostic_manager : public log_user\n \t\t       state_machine::state_t state,\n \t\t       pending_diagnostic *d);\n \n-  void add_diagnostic (exploded_node *enode,\n+  bool add_diagnostic (exploded_node *enode,\n \t\t       const supernode *snode, const gimple *stmt,\n \t\t       stmt_finder *finder,\n \t\t       pending_diagnostic *d);"}, {"sha": "caa8796b494660fa75da2a27aa790e041ce74bd7", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/160b095fc9ded4eaa2bf4d49bd97319f4aabff0a/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/160b095fc9ded4eaa2bf4d49bd97319f4aabff0a/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=160b095fc9ded4eaa2bf4d49bd97319f4aabff0a", "patch": "@@ -129,12 +129,9 @@ impl_region_model_context::warn (pending_diagnostic *d)\n       return false;\n     }\n   if (m_eg)\n-    {\n-      m_eg->get_diagnostic_manager ().add_diagnostic\n-\t(m_enode_for_diag, m_enode_for_diag->get_supernode (),\n-\t m_stmt, m_stmt_finder, d);\n-      return true;\n-    }\n+    return m_eg->get_diagnostic_manager ().add_diagnostic\n+      (m_enode_for_diag, m_enode_for_diag->get_supernode (),\n+       m_stmt, m_stmt_finder, d);\n   else\n     {\n       delete d;"}, {"sha": "fa21af133410f865c303c8f1a06e68344e6bdb6a", "filename": "gcc/testsuite/gcc.dg/analyzer/write-to-string-literal-4-disabled.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/160b095fc9ded4eaa2bf4d49bd97319f4aabff0a/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-4-disabled.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/160b095fc9ded4eaa2bf4d49bd97319f4aabff0a/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-4-disabled.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fwrite-to-string-literal-4-disabled.c?ref=160b095fc9ded4eaa2bf4d49bd97319f4aabff0a", "patch": "@@ -0,0 +1,28 @@\n+/* Verify that we can disable warnings that have notes added to them via\n+   region_model_context_decorator::add_note.  */\n+\n+/* { dg-additional-options \"-Wno-analyzer-write-to-string-literal\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+int getrandom (void *__buffer, size_t __length, /* { dg-bogus \"parameter 1 of 'getrandom' marked with attribute 'access \\\\(write_only, 1, 2\\\\)'\" } */\n+\t       unsigned int __flags)\n+  __attribute__ ((access (__write_only__, 1, 2)));\n+\n+#define GRND_RANDOM 0x02\n+\n+void test (int flag)\n+{\n+  char *buf;\n+\n+  if (flag)\n+    buf = __builtin_malloc (1024);\n+  else\n+    buf = (char *)\"\"; /* { dg-bogus \"here\" } */\n+\n+  if (getrandom(buf, 16, GRND_RANDOM)) /* { dg-bogus \"write to string literal\" } */\n+    __builtin_printf(\"%s\\n\", buf);\n+\n+  if (flag)\n+    __builtin_free (buf);\n+}"}]}