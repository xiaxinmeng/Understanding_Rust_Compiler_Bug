{"sha": "a620ef15027baace38d591709474f1a9519ba657", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTYyMGVmMTUwMjdiYWFjZTM4ZDU5MTcwOTQ3NGYxYTk1MTliYTY1Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-07-10T08:24:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-07-10T08:24:54Z"}, "message": "decl.c (get_type_quals, [...]): New.\n\n/cp\n2019-07-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (get_type_quals,\n\tsmallest_type_location (const cp_decl_specifier_seq*)): New.\n\t(check_tag_decl): Use smallest_type_location in error_at about\n\tmultiple types in one declaration.\n\t(grokdeclarator): Use locations[ds_complex] in error_at about\n\tcomplex invalid; use locations[ds_storage_class] in error_at\n\tabout static cdtor; use id_loc in error_at about flexible\n\tarray member in union; use get_type_quals.\n\n/testsuite\n2019-07-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/diagnostic/complex-invalid-1.C: New.\n\t* g++.dg/diagnostic/static-cdtor-1.C: Likewise.\n\t* g++.dg/cpp1z/has-unique-obj-representations2.C: Test location\n\ttoo.\n\t* g++.dg/other/anon-union3.C: Adjust expected location.\n\t* g++.dg/parse/error8.C: Likewise.\n\nFrom-SVN: r273323", "tree": {"sha": "4edea152284b330cfbefd2b2ec4971c5c2adb0ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4edea152284b330cfbefd2b2ec4971c5c2adb0ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a620ef15027baace38d591709474f1a9519ba657", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a620ef15027baace38d591709474f1a9519ba657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a620ef15027baace38d591709474f1a9519ba657", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a620ef15027baace38d591709474f1a9519ba657/comments", "author": null, "committer": null, "parents": [{"sha": "caa0705cb68fa63e5b2cce9d9fe3561f1ba23e58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caa0705cb68fa63e5b2cce9d9fe3561f1ba23e58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caa0705cb68fa63e5b2cce9d9fe3561f1ba23e58"}], "stats": {"total": 86, "additions": 68, "deletions": 18}, "files": [{"sha": "bc788c1b446aa8d133a438e67b2ff4d2d62ca971", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a620ef15027baace38d591709474f1a9519ba657/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a620ef15027baace38d591709474f1a9519ba657/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a620ef15027baace38d591709474f1a9519ba657", "patch": "@@ -1,3 +1,14 @@\n+2019-07-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (get_type_quals,\n+\tsmallest_type_location (const cp_decl_specifier_seq*)): New.\n+\t(check_tag_decl): Use smallest_type_location in error_at about\n+\tmultiple types in one declaration.\n+\t(grokdeclarator): Use locations[ds_complex] in error_at about\n+\tcomplex invalid; use locations[ds_storage_class] in error_at\n+\tabout static cdtor; use id_loc in error_at about flexible\n+\tarray member in union; use get_type_quals.\n+\n 2019-07-09  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/61339"}, {"sha": "dbcf681c78376f1effa661a0af46a0343891458a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a620ef15027baace38d591709474f1a9519ba657/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a620ef15027baace38d591709474f1a9519ba657/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a620ef15027baace38d591709474f1a9519ba657", "patch": "@@ -100,6 +100,7 @@ static tree build_cp_library_fn (tree, enum tree_code, tree, int);\n static void store_parm_decls (tree);\n static void initialize_local_var (tree, tree);\n static void expand_static_init (tree, tree);\n+static location_t smallest_type_location (const cp_decl_specifier_seq*);\n \n /* The following symbols are subsumed in the cp_global_trees array, and\n    listed here individually for documentation purposes.\n@@ -4802,6 +4803,24 @@ warn_misplaced_attr_for_class_type (location_t location,\n \t    class_type, class_key_or_enum_as_string (class_type));\n }\n \n+/* Returns the cv-qualifiers that apply to the type specified\n+   by the DECLSPECS.  */\n+\n+static int\n+get_type_quals (const cp_decl_specifier_seq *declspecs)\n+{\n+  int type_quals = TYPE_UNQUALIFIED;\n+\n+  if (decl_spec_seq_has_spec_p (declspecs, ds_const))\n+    type_quals |= TYPE_QUAL_CONST;\n+  if (decl_spec_seq_has_spec_p (declspecs, ds_volatile))\n+    type_quals |= TYPE_QUAL_VOLATILE;\n+  if (decl_spec_seq_has_spec_p (declspecs, ds_restrict))\n+    type_quals |= TYPE_QUAL_RESTRICT;\n+\n+  return type_quals;\n+}\n+\n /* Make sure that a declaration with no declarator is well-formed, i.e.\n    just declares a tagged type or anonymous union.\n \n@@ -4821,7 +4840,8 @@ check_tag_decl (cp_decl_specifier_seq *declspecs,\n   bool error_p = false;\n \n   if (declspecs->multiple_types_p)\n-    error (\"multiple types in one declaration\");\n+    error_at (smallest_type_location (declspecs),\n+\t      \"multiple types in one declaration\");\n   else if (declspecs->redefined_builtin_type)\n     {\n       if (!in_system_header_at (input_location))\n@@ -10142,6 +10162,13 @@ smallest_type_location (int type_quals, const location_t* locations)\n   return min_location (loc, locations[ds_type_spec]);\n }\n \n+static location_t\n+smallest_type_location (const cp_decl_specifier_seq *declspecs)\n+{\n+  int type_quals = get_type_quals (declspecs);\n+  return smallest_type_location (type_quals, declspecs->locations);\n+}\n+\n /* Check that it's OK to declare a function with the indicated TYPE\n    and TYPE_QUALS.  SFK indicates the kind of special function (if any)\n    that this function is.  OPTYPE is the type given in a conversion\n@@ -10407,7 +10434,7 @@ grokdeclarator (const cp_declarator *declarator,\n      a member function.  */\n   cp_ref_qualifier rqual = REF_QUAL_NONE;\n   /* cv-qualifiers that apply to the type specified by the DECLSPECS.  */\n-  int type_quals = TYPE_UNQUALIFIED;\n+  int type_quals = get_type_quals (declspecs);\n   tree raises = NULL_TREE;\n   int template_count = 0;\n   tree returned_attrs = NULL_TREE;\n@@ -10454,13 +10481,6 @@ grokdeclarator (const cp_declarator *declarator,\n   if (concept_p)\n     constexpr_p = true;\n \n-  if (decl_spec_seq_has_spec_p (declspecs, ds_const))\n-    type_quals |= TYPE_QUAL_CONST;\n-  if (decl_spec_seq_has_spec_p (declspecs, ds_volatile))\n-    type_quals |= TYPE_QUAL_VOLATILE;\n-  if (decl_spec_seq_has_spec_p (declspecs, ds_restrict))\n-    type_quals |= TYPE_QUAL_RESTRICT;\n-\n   if (decl_context == FUNCDEF)\n     funcdef_flag = true, decl_context = NORMAL;\n   else if (decl_context == MEMFUNCDEF)\n@@ -10999,7 +11019,8 @@ grokdeclarator (const cp_declarator *declarator,\n   if (decl_spec_seq_has_spec_p (declspecs, ds_complex))\n     {\n       if (TREE_CODE (type) != INTEGER_TYPE && TREE_CODE (type) != REAL_TYPE)\n-\terror (\"complex invalid for %qs\", name);\n+\terror_at (declspecs->locations[ds_complex],\n+\t\t  \"complex invalid for %qs\", name);\n       /* If a modifier is specified, the resulting complex is the complex\n \t form of TYPE.  E.g, \"complex short\" is \"complex short int\".  */\n       else if (type == integer_type_node)\n@@ -11578,9 +11599,12 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t   virtual.  A constructor may not be static.\n \t\t   A constructor may not be declared with ref-qualifier. */\n \t\tif (staticp == 2)\n-\t\t  error ((flags == DTOR_FLAG)\n-\t\t\t ? G_(\"destructor cannot be static member function\")\n-\t\t\t : G_(\"constructor cannot be static member function\"));\n+\t\t  error_at (declspecs->locations[ds_storage_class],\n+\t\t\t    (flags == DTOR_FLAG)\n+\t\t\t    ? G_(\"destructor cannot be static member \"\n+\t\t\t\t \"function\")\n+\t\t\t    : G_(\"constructor cannot be static member \"\n+\t\t\t\t \"function\"));\n \t\tif (memfn_quals)\n \t\t  {\n \t\t    error ((flags == DTOR_FLAG)\n@@ -12438,7 +12462,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t&& (TREE_CODE (ctype) == UNION_TYPE\n \t\t    || TREE_CODE (ctype) == QUAL_UNION_TYPE))\n \t      {\n-\t\terror (\"flexible array member in union\");\n+\t\terror_at (id_loc, \"flexible array member in union\");\n \t\ttype = error_mark_node;\n \t      }\n \t    else"}, {"sha": "430c508d6e13cdd501748503d7b3277341e04612", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a620ef15027baace38d591709474f1a9519ba657/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a620ef15027baace38d591709474f1a9519ba657/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a620ef15027baace38d591709474f1a9519ba657", "patch": "@@ -1,3 +1,12 @@\n+2019-07-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/diagnostic/complex-invalid-1.C: New.\n+\t* g++.dg/diagnostic/static-cdtor-1.C: Likewise.\n+\t* g++.dg/cpp1z/has-unique-obj-representations2.C: Test location\n+\ttoo.\n+\t* g++.dg/other/anon-union3.C: Adjust expected location.\n+\t* g++.dg/parse/error8.C: Likewise.\n+\n 2019-07-09  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* g++.dg/lto/alias-3_0.C: New file."}, {"sha": "f1f338829d57986ce7eee3369a10ea2cc5d4f8b8", "filename": "gcc/testsuite/g++.dg/cpp1z/has-unique-obj-representations2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a620ef15027baace38d591709474f1a9519ba657/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fhas-unique-obj-representations2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a620ef15027baace38d591709474f1a9519ba657/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fhas-unique-obj-representations2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fhas-unique-obj-representations2.C?ref=a620ef15027baace38d591709474f1a9519ba657", "patch": "@@ -1,7 +1,7 @@\n struct S;\n struct T { S t; };\t\t\t\t\t// { dg-error \"incomplete type\" }\n struct U { int u[sizeof (S)]; };\t\t\t// { dg-error \"incomplete type\" }\n-union V { char c; char d[]; };\t\t\t\t// { dg-error \"flexible array member in union\" }\n+union V { char c; char d[]; };\t\t\t\t// { dg-error \"24:flexible array member in union\" }\n bool a = __has_unique_object_representations (S);\t// { dg-error \"incomplete type\" }\n bool b = __has_unique_object_representations (T);\n bool c = __has_unique_object_representations (U);"}, {"sha": "5a61765ffcf2aefe1bfc84003c175d859d0d26ed", "filename": "gcc/testsuite/g++.dg/diagnostic/complex-invalid-1.C", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a620ef15027baace38d591709474f1a9519ba657/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fcomplex-invalid-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a620ef15027baace38d591709474f1a9519ba657/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fcomplex-invalid-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fcomplex-invalid-1.C?ref=a620ef15027baace38d591709474f1a9519ba657", "patch": "@@ -0,0 +1 @@\n+__complex__ bool b;  // { dg-error \"1:complex invalid\" }"}, {"sha": "ae3fd56ab78d868ca9774be8bfbb69a1671ea5d2", "filename": "gcc/testsuite/g++.dg/diagnostic/static-cdtor-1.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a620ef15027baace38d591709474f1a9519ba657/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fstatic-cdtor-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a620ef15027baace38d591709474f1a9519ba657/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fstatic-cdtor-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fstatic-cdtor-1.C?ref=a620ef15027baace38d591709474f1a9519ba657", "patch": "@@ -0,0 +1,5 @@\n+struct S\n+{\n+  static S();  // { dg-error \"3:constructor\" }\n+  static ~S();  // { dg-error \"3:destructor\" }\n+};"}, {"sha": "6f2946b36981aadd1b09268ab9febacfb90e9d32", "filename": "gcc/testsuite/g++.dg/other/anon-union3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a620ef15027baace38d591709474f1a9519ba657/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fanon-union3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a620ef15027baace38d591709474f1a9519ba657/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fanon-union3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fanon-union3.C?ref=a620ef15027baace38d591709474f1a9519ba657", "patch": "@@ -3,9 +3,9 @@\n class C\n {\n   auto union      // { dg-error \"storage class\" \"\" { target { ! c++11 } } }\n-    {\t\t  // { dg-error \"auto\" \"\" { target c++11 } .-1 }\n+    {\t\t  // { dg-error \"auto|multiple types\" \"\" { target c++11 } .-1 }\n       int a;\n-    };            // { dg-error \"multiple types\" \"\" { target c++11 } }\n+    };\n   register union  // { dg-error \"storage class\" }\n     {\n       int b;"}, {"sha": "135f0784bcfed294ac206a0203ac567190b4c9e4", "filename": "gcc/testsuite/g++.dg/parse/error8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a620ef15027baace38d591709474f1a9519ba657/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a620ef15027baace38d591709474f1a9519ba657/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror8.C?ref=a620ef15027baace38d591709474f1a9519ba657", "patch": "@@ -5,5 +5,5 @@ struct A { friend typename struct B; };\n \n \n // { dg-error \"28:expected nested-name-specifier before 'struct'\" \"expected\" { target *-*-* } 4 }\n-// { dg-error \"35:multiple types in one declaration\" \"multiple\" { target *-*-* } 4 }\n+// { dg-error \"19:multiple types in one declaration\" \"multiple\" { target *-*-* } 4 }\n // { dg-error \"12:friend declaration does not name a class or function\" \"friend decl\" { target *-*-* } 4 }"}]}