{"sha": "852d3dad0dc7b0ed7144b1409393997830eab8d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUyZDNkYWQwZGM3YjBlZDcxNDRiMTQwOTM5Mzk5NzgzMGVhYjhkMg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-11-14T19:11:52Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-11-14T19:11:52Z"}, "message": "Re-merges with Classpath, from various people:\n\n\t* java/lang/Double.java (parseDouble): Fixed ordering of\n\tmodifiers.\n\t* java/lang/reflect/AccessibleObject.java: Javadoc, reindented.\n\t* java/lang/reflect/Member.java: Reindented.\n\t* java/lang/reflect/Modifier.java: Reindented.\n\t(toString): Only trim trailing space if text was added to\n\tStringBuffer.\n\t* java/util/ConcurrentModificationException.java: Javadoc\n\tupdates.\n\t* java/util/EmptyStackException.java: Likewise.\n\t* java/util/NoSuchElementException.java: Likewise.\n\nFrom-SVN: r47018", "tree": {"sha": "fd42440b019f9acc85b811c9e197a4909b132522", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd42440b019f9acc85b811c9e197a4909b132522"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/852d3dad0dc7b0ed7144b1409393997830eab8d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852d3dad0dc7b0ed7144b1409393997830eab8d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/852d3dad0dc7b0ed7144b1409393997830eab8d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852d3dad0dc7b0ed7144b1409393997830eab8d2/comments", "author": null, "committer": null, "parents": [{"sha": "b5c02bff5c40123ed109c8ffc3d4eac6cc28cf26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5c02bff5c40123ed109c8ffc3d4eac6cc28cf26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5c02bff5c40123ed109c8ffc3d4eac6cc28cf26"}], "stats": {"total": 318, "additions": 230, "deletions": 88}, "files": [{"sha": "70dae7f75fab2962ffa87698333a73f0d9fa5299", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852d3dad0dc7b0ed7144b1409393997830eab8d2/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852d3dad0dc7b0ed7144b1409393997830eab8d2/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=852d3dad0dc7b0ed7144b1409393997830eab8d2", "patch": "@@ -1,3 +1,18 @@\n+2001-11-14  Tom Tromey  <tromey@redhat.com>\n+\n+\tRe-merges with Classpath, from various people:\n+\t* java/lang/Double.java (parseDouble): Fixed ordering of\n+\tmodifiers.\n+\t* java/lang/reflect/AccessibleObject.java: Javadoc, reindented.\n+\t* java/lang/reflect/Member.java: Reindented.\n+\t* java/lang/reflect/Modifier.java: Reindented.\n+\t(toString): Only trim trailing space if text was added to\n+\tStringBuffer.\n+\t* java/util/ConcurrentModificationException.java: Javadoc\n+\tupdates.\n+\t* java/util/EmptyStackException.java: Likewise.\n+\t* java/util/NoSuchElementException.java: Likewise.\n+\n 2001-11-13  Tom Tromey  <tromey@redhat.com>\n \n \tFix for PR libgcj/4859:"}, {"sha": "773e8824e55c2b911aca99a41944679740493b22", "filename": "libjava/java/lang/Double.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852d3dad0dc7b0ed7144b1409393997830eab8d2/libjava%2Fjava%2Flang%2FDouble.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852d3dad0dc7b0ed7144b1409393997830eab8d2/libjava%2Fjava%2Flang%2FDouble.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FDouble.java?ref=852d3dad0dc7b0ed7144b1409393997830eab8d2", "patch": "@@ -504,7 +504,7 @@ public static String toString (double d)\n    * @see #NEGATIVE_INFINITY\n    * @since 1.2\n    */\n-  public native static double parseDouble (String s) \n+  public static native double parseDouble (String s)\n     throws NumberFormatException;\n \n   /**"}, {"sha": "6bfc23a17a042ced6079c24f65893e70a0c72235", "filename": "libjava/java/lang/reflect/AccessibleObject.java", "status": "modified", "additions": 119, "deletions": 27, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852d3dad0dc7b0ed7144b1409393997830eab8d2/libjava%2Fjava%2Flang%2Freflect%2FAccessibleObject.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852d3dad0dc7b0ed7144b1409393997830eab8d2/libjava%2Fjava%2Flang%2Freflect%2FAccessibleObject.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FAccessibleObject.java?ref=852d3dad0dc7b0ed7144b1409393997830eab8d2", "patch": "@@ -1,13 +1,13 @@\n /* java.lang.reflect.AccessibleObject\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -24,54 +24,146 @@\n This exception does not however invalidate any other reasons why the\n executable file might be covered by the GNU General Public License. */\n \n- \n+\n package java.lang.reflect;\n \n /**\n+ * This class is the superclass of various reflection classes, and\n+ * allows sufficiently trusted code to bypass normal restrictions to\n+ * do necessary things like invoke private methods outside of the\n+ * class during Serialization.  If you don't have a good reason\n+ * to mess with this, don't try. Fortunately, there are adequate\n+ * security checks before you can set a reflection object as accessible.\n+ *\n  * @author Tom Tromey <tromey@cygnus.com>\n- * @date December 12, 1998\n- */\n-/* Written using JDK 1.2 beta docs.\n- * Status:  Believed complete and correct.\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see Field\n+ * @see Constructor\n+ * @see Method\n+ * @see ReflectPermission\n+ * @since 1.2\n+ * @status updated to 1.4\n  */\n-\n public class AccessibleObject\n {\n-  protected AccessibleObject ()\n+  /**\n+   * True if this object is marked accessible, which means the reflected\n+   * object bypasses normal security checks. <em>NOTE</em>Don't try messing\n+   * with this by reflection.  You'll mess yourself up.\n+   */\n+  // default visibility for use by inherited classes\n+  boolean flag = false;\n+\n+  /**\n+   * Only the three reflection classes that extend this can create an\n+   * accessible object.  This is not serializable for security reasons.\n+   */\n+  protected AccessibleObject()\n   {\n-    flag = false;\n   }\n \n-  public boolean isAccessible ()\n+  /**\n+   * Return the accessibility status of this object.\n+   *\n+   * @return true if this object bypasses security checks\n+   */\n+  public boolean isAccessible()\n   {\n     return flag;\n   }\n \n-  public static void setAccessible (AccessibleObject[] array, boolean flag)\n+  /**\n+   * Convenience method to set the flag on a number of objects with a single\n+   * security check. If a security manager exists, it is checked for\n+   * <code>ReflectPermission(\"suppressAccessChecks\")</code>.<p>\n+   *\n+   * If <code>flag</code> is true, and the initial security check succeeds,\n+   * this can still fail if a forbidden object is encountered, leaving the\n+   * array half-modified. At the moment, the forbidden members are:<br>\n+   * <ul>\n+   *  <li>Any Constructor for java.lang.Class</li>\n+   *  <li>Any AccessibleObject for java.lang.reflect.AccessibleObject\n+   *      (this is not specified by Sun, but it closes a big security hole\n+   *      where you can use reflection to bypass the security checks that\n+   *      reflection is supposed to provide)</li>\n+   * </ul>\n+   * (Sun has not specified others, but good candidates might include\n+   * ClassLoader, String, and such. However, the more checks we do, the\n+   * slower this method gets).\n+   *\n+   * @param array the array of accessible objects\n+   * @param flag the desired state of accessibility, true to bypass security\n+   * @throws NullPointerException if array is null\n+   * @throws SecurityException if the request is denied\n+   * @see SecurityManager#checkPermission(java.security.Permission)\n+   * @see RuntimePermission\n+   */\n+  public static void setAccessible(AccessibleObject[] array, boolean flag)\n   {\n-    checkPermission ();\n-    // FIXME: check for invalid changes in the loop.\n-    // For instance, can't set this flag to true for a Constructor for\n-    // Class (example from the manual).\n-    for (int i = 0; i < array.length; ++i)\n-      array[i].flag = flag;\n+    checkPermission();\n+    for (int i = 0; i < array.length; i++)\n+      array[i].secureSetAccessible(flag);\n   }\n \n-  public void setAccessible (boolean flag)\n+  /**\n+   * Sets the accessibility flag for this reflection object. If a security\n+   * manager exists, it is checked for\n+   * <code>ReflectPermission(\"suppressAccessChecks\")</code>.<p>\n+   *\n+   * If <code>flag</code> is true, and the initial security check succeeds,\n+   * this will still fail for a forbidden object. At the moment, the\n+   * forbidden members are:<br>\n+   * <ul>\n+   *  <li>Any Constructor for java.lang.Class</li>\n+   *  <li>Any AccessibleObject for java.lang.reflect.AccessibleObject\n+   *      (this is not specified by Sun, but it closes a big security hole\n+   *      where you can use reflection to bypass the security checks that\n+   *      reflection is supposed to provide)</li>\n+   * </ul>\n+   * (Sun has not specified others, but good candidates might include\n+   * ClassLoader, String, and such. However, the more checks we do, the\n+   * slower this method gets).\n+   *\n+   * @param flag the desired state of accessibility, true to bypass security\n+   * @throws NullPointerException if array is null\n+   * @throws SecurityException if the request is denied\n+   * @see SecurityManager#checkPermission(java.security.Permission)\n+   * @see RuntimePermission\n+   */\n+  public void setAccessible(boolean flag)\n   {\n-    checkPermission ();\n-    // FIXME: check for invalid changes.\n-    // For instance, can't set this flag to true for a Constructor for\n-    // Class (example from the manual).\n-    this.flag = flag;\n+    checkPermission();\n+    secureSetAccessible(flag);\n   }\n \n-  private static final void checkPermission ()\n+  /**\n+   * Performs the specified security check, for\n+   * <code>ReflectPermission(\"suppressAccessChecks\")</code>.\n+   *\n+   * @throws SecurityException if permission is denied\n+   */\n+  private static final void checkPermission()\n   {\n     SecurityManager sm = System.getSecurityManager();\n     if (sm != null)\n-      sm.checkPermission (new ReflectPermission (\"suppressAccessChecks\"));\n+      sm.checkPermission(new ReflectPermission(\"suppressAccessChecks\"));\n   }\n \n-  private boolean flag;\n+  /**\n+   * Performs the actual accessibility change, this must always be invoked\n+   * after calling checkPermission.\n+   *\n+   * @param flag the desired status\n+   * @throws SecurityException if flag is true and this is one of the\n+   *         forbidden members mentioned in {@link setAccessible(boolean)}.\n+   */\n+  private final void secureSetAccessible(boolean flag)\n+  {\n+    if (flag &&\n+        ((this instanceof Constructor\n+          && ((Constructor) this).getDeclaringClass() == Class.class)\n+         || ((Member) this).getDeclaringClass() == AccessibleObject.class))\n+      throw new SecurityException(\"Cannot make object accessible: \" + this);\n+    this.flag = flag;\n+  }\n }"}, {"sha": "1c313b0af46669e253e29c29333e0793b8fc38a3", "filename": "libjava/java/lang/reflect/Member.java", "status": "modified", "additions": 54, "deletions": 46, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852d3dad0dc7b0ed7144b1409393997830eab8d2/libjava%2Fjava%2Flang%2Freflect%2FMember.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852d3dad0dc7b0ed7144b1409393997830eab8d2/libjava%2Fjava%2Flang%2Freflect%2FMember.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FMember.java?ref=852d3dad0dc7b0ed7144b1409393997830eab8d2", "patch": "@@ -1,4 +1,4 @@\n-/* java.lang.reflect.Member\n+/* java.lang.reflect.Member - common query methods in reflection\n    Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n@@ -7,7 +7,7 @@\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -27,55 +27,63 @@\n \n package java.lang.reflect;\n \n-/* Written using \"Java Class Libraries\", 2nd edition.\n- * Status:  Believed complete and correct.\n- */\n-\n /**\n- * Member is an interface that represents any member of a class.\n- * i.e. a field, a method or a constructor.\n- * You can get information about the declaring class, name or modifiers of\n- * the member with this interface.\n+ * Member is an interface that represents any member of a class (field or\n+ * method) or a constructor. You can get information about the declaring\n+ * class, name or modifiers of the member with this interface.\n  *\n- * @author  John Keiser\n- * @author Per Bothner <bothner@cygnus.com> \n+ * @author John Keiser\n+ * @author Per Bothner <bothner@cygnus.com>\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see Class\n+ * @see Field\n+ * @see Method\n+ * @see Constructor\n+ * @since 1.1\n+ * @status updated to 1.4\n  */\n-public interface Member {\n-    /**\n-     * Represents all members, whether public, private, protected or\n-     * package-protected.\n-     * Used in java.lang.SecurityManager.checkMemberAccess() to determine the\n-     * type of members to access.\n-     */\n-    static final int DECLARED = 1;\n+public interface Member\n+{\n+  /**\n+   * Represents all members, whether public, private, protected or\n+   * package-protected, but only which are declared in this class.\n+   * Used in SecurityManager.checkMemberAccess() to determine the\n+   * type of members to access.\n+   * @see SecurityManager#checkMemberAccess()\n+   */\n+  int DECLARED = 1;\n \n-    /**\n-     * Represents public members only.  Used inr\n-     * java.lang.SecurityManager.checkMemberAccess() to determine the type of\n-     * members to access.\n-     */\n-    static final int PUBLIC = 0;\n+  /**\n+   * Represents public members only, but includes all inherited members.\n+   *  Used in SecurityManager.checkMemberAccess() to determine the type of\n+   * members to access.\n+   * @see SecurityManager#checkMemberAccess()\n+   */\n+  int PUBLIC = 0;\n \n-    /**\n-     * Gets the class that declared this member.\n-     * <STRONG>It is unclear whether this returns the class that actually\n-     * syntactically declared the member, or the class where the\n-     * <code>Member</code> object was gotten from.</STRONG>\n-     * @return the class that declared this member.\n-     */\n-    Class getDeclaringClass();\n+  /**\n+   * Gets the class that declared this member. This is not the class where\n+   * this method was called, or even the class where this Member object\n+   * came to life, but the class that declares the member this represents.\n+   *\n+   * @return the class that declared this member\n+   */\n+  Class getDeclaringClass();\n \n-    /**\n-     * Gets the modifiers this member uses.  Use the <code>Modifier</code>\n-     * class to interpret the values.\n-     * @see Modifier\n-     * @return an integer representing the modifiers to this Member.\n-     */\n-    int getModifiers();\n+  /**\n+   * Gets the simple name of this member. This will be a valid Java\n+   * identifier, with no qualification.\n+   *\n+   * @return the name of this member\n+   */\n+  String getName();\n \n-    /**\n-     * Gets the name of this member.\n-     * @return the name of this member.\n-     */\n-    String getName();\n+  /**\n+   * Gets the modifiers this member uses.  Use the <code>Modifier</code>\n+   * class to interpret the values.\n+   *\n+   * @return an integer representing the modifiers to this Member\n+   * @see Modifier\n+   */\n+  int getModifiers();\n }"}, {"sha": "364ba3bb49ae3b71a520e2a404fc37887cd0cf6e", "filename": "libjava/java/util/ConcurrentModificationException.java", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852d3dad0dc7b0ed7144b1409393997830eab8d2/libjava%2Fjava%2Futil%2FConcurrentModificationException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852d3dad0dc7b0ed7144b1409393997830eab8d2/libjava%2Fjava%2Futil%2FConcurrentModificationException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FConcurrentModificationException.java?ref=852d3dad0dc7b0ed7144b1409393997830eab8d2", "patch": "@@ -30,31 +30,43 @@\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n  */\n \n /**\n  * Exception that is thrown by the collections classes when it is detected that\n  * a modification has been made to a data structure when this is not allowed,\n  * such as when a collection is structurally modified while an Iterator is\n  * operating over it. In cases where this can be detected, a\n- * ConcurrentModificationException will be thrown. An Iterator that detects this\n- * condition is referred to as fail-fast.\n+ * ConcurrentModificationException will be thrown. An Iterator that detects\n+ * this condition is referred to as fail-fast. Notice that this can occur\n+ * even in single-threaded designs, if you call methods out of order.\n  *\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 2, 1998.\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see Collection\n+ * @see Iterator\n+ * @see ListIterator\n+ * @see Vector\n+ * @see LinkedList\n+ * @see HashSet\n+ * @see Hashtable\n+ * @see TreeMap\n+ * @see AbstractList\n  * @since 1.2\n+ * @status updated to 1.4\n  */\n public class ConcurrentModificationException extends RuntimeException\n {\n+  /**\n+   * Compatible with JDK 1.2.\n+   */\n   private static final long serialVersionUID = -3666751008965953603L;\n \n   /**\n    * Constructs a ConcurrentModificationException with no detail message.\n    */\n   public ConcurrentModificationException()\n   {\n-    super();\n   }\n \n   /**"}, {"sha": "2776206840cd6061d23fff4600204a622975f906", "filename": "libjava/java/util/EmptyStackException.java", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852d3dad0dc7b0ed7144b1409393997830eab8d2/libjava%2Fjava%2Futil%2FEmptyStackException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852d3dad0dc7b0ed7144b1409393997830eab8d2/libjava%2Fjava%2Futil%2FEmptyStackException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FEmptyStackException.java?ref=852d3dad0dc7b0ed7144b1409393997830eab8d2", "patch": "@@ -30,25 +30,29 @@\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n  */\n \n /**\n  * This exception is thrown by the Stack class when an attempt is made to pop\n  * or otherwise access elements from an empty stack.\n  *\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 2, 1998.\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see Stack\n+ * @since 1.0\n+ * @status updated to 1.4\n  */\n public class EmptyStackException extends RuntimeException\n {\n+  /**\n+   * Compatible with JDK 1.0.\n+   */\n   private static final long serialVersionUID = 5084686378493302095L;\n \n   /**\n    * Constructs an EmptyStackException with no detail message.\n    */\n   public EmptyStackException()\n   {\n-    super();\n   }\n }"}, {"sha": "3273dc06fd68e6a2ff0da9237a4798a83d78e4ed", "filename": "libjava/java/util/NoSuchElementException.java", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852d3dad0dc7b0ed7144b1409393997830eab8d2/libjava%2Fjava%2Futil%2FNoSuchElementException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852d3dad0dc7b0ed7144b1409393997830eab8d2/libjava%2Fjava%2Futil%2FNoSuchElementException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FNoSuchElementException.java?ref=852d3dad0dc7b0ed7144b1409393997830eab8d2", "patch": "@@ -30,28 +30,39 @@\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n  */\n \n /**\n  * Exception thrown when an attempt is made to access an element that does not\n- * exist. This exception is thrown by the Enumeration, Iterator and ListIterator\n- * classes if the nextElement, next or previous method goes beyond the end of\n- * the list of elements that are being accessed.\n+ * exist. This exception is thrown by the Enumeration, Iterator and\n+ * ListIterator classes if the nextElement, next or previous method goes\n+ * beyond the end of the list of elements that are being accessed. It is also\n+ * thrown by Vector and Stack when attempting to access the first or last\n+ * element of an empty collection.\n  *\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 2, 1998.\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see Enumeration\n+ * @see Iterator\n+ * @see ListIterator\n+ * @see Enumeration#nextElement()\n+ * @see Iterator#next()\n+ * @see ListIterator#previous()\n+ * @since 1.0\n+ * @status updated to 1.4\n  */\n public class NoSuchElementException extends RuntimeException\n {\n+  /**\n+   * Compatible with JDK 1.0.\n+   */\n   private static final long serialVersionUID = 6769829250639411880L;\n \n   /**\n    * Constructs a NoSuchElementException with no detail message.\n    */\n   public NoSuchElementException()\n   {\n-    super();\n   }\n \n   /**"}]}