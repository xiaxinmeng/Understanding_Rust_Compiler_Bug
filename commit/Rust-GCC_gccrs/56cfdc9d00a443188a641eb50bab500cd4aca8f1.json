{"sha": "56cfdc9d00a443188a641eb50bab500cd4aca8f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZjZmRjOWQwMGE0NDMxODhhNjQxZWI1MGJhYjUwMGNkNGFjYThmMQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2005-05-24T21:28:54Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2005-05-24T21:28:54Z"}, "message": "profopt.exp (dg-final-generate, [...]): New.\n\n\t* lib/profopt.exp (dg-final-generate, dg-final-use,\n\tprofopt-final-code, profopt-get-options): New.\n\t(profopt-execute): Process test directives.\n\nFrom-SVN: r100117", "tree": {"sha": "beee60c2fffeba9501b99f34893b9da9913dbb5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/beee60c2fffeba9501b99f34893b9da9913dbb5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56cfdc9d00a443188a641eb50bab500cd4aca8f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56cfdc9d00a443188a641eb50bab500cd4aca8f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56cfdc9d00a443188a641eb50bab500cd4aca8f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56cfdc9d00a443188a641eb50bab500cd4aca8f1/comments", "author": null, "committer": null, "parents": [{"sha": "cce96d4aacd01f9b9172adcaaf172b8858258040", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cce96d4aacd01f9b9172adcaaf172b8858258040", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cce96d4aacd01f9b9172adcaaf172b8858258040"}], "stats": {"total": 137, "additions": 128, "deletions": 9}, "files": [{"sha": "168ed37dc4e8d31c5bb4299e6c7c4aa0231163bd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56cfdc9d00a443188a641eb50bab500cd4aca8f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56cfdc9d00a443188a641eb50bab500cd4aca8f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=56cfdc9d00a443188a641eb50bab500cd4aca8f1", "patch": "@@ -1,5 +1,9 @@\n 2005-05-24  Janis Johnson  <janis187@us.ibm.com>\n \n+\t* lib/profopt.exp (dg-final-generate, dg-final-use,\n+\tprofopt-final-code, profopt-get-options): New.\n+\t(profopt-execute): Process test directives.\n+\n \t* lib/gcc-dg.exp (cleanup-ipa-dump): New.\n \t(cleanup-coverage-files, cleanup-repo-files, cleanup-rtl-dump,\n \tcleanup-tree-dump, cleanup-saved-temps): Update comments."}, {"sha": "b23a926c074a5ffa17b4d61f4d73d3a25cee5162", "filename": "gcc/testsuite/lib/profopt.exp", "status": "modified", "additions": 124, "deletions": 9, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56cfdc9d00a443188a641eb50bab500cd4aca8f1/gcc%2Ftestsuite%2Flib%2Fprofopt.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56cfdc9d00a443188a641eb50bab500cd4aca8f1/gcc%2Ftestsuite%2Flib%2Fprofopt.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprofopt.exp?ref=56cfdc9d00a443188a641eb50bab500cd4aca8f1", "patch": "@@ -1,4 +1,4 @@\n-#   Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n+#   Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -30,6 +30,9 @@\n # profile-directed test run is nonzero then the performance check will\n # be done.\n \n+load_lib dg.exp\n+load_lib gcc-dg.exp\n+\n global PROFOPT_OPTIONS perf_delta\n \n # The including .exp file must define these.\n@@ -115,6 +118,90 @@ proc profopt-perf-value { testcase perf_ext optstr } {\n     return $val\n }\n \n+#\n+# dg-final-generate -- process code to run after the profile-generate step\n+#\n+# ARGS is the line number of the directive followed by the commands.\n+#\n+proc dg-final-generate { args } {\n+    global generate_final_code\n+\n+    if { [llength $args] > 2 } {\n+\terror \"[lindex $args 0]: too many arguments\"\n+\treturn\n+    }\n+    append generate_final_code \"[lindex $args 1]\\n\"\n+}\n+\n+#\n+# dg-final-use -- process code to run after the profile-use step\n+#\n+# ARGS is the line number of the directive followed by the commands.\n+#\n+proc dg-final-use { args } {\n+    global use_final_code\n+\n+    if { [llength $args] > 2 } {\n+\terror \"[lindex $args 0]: too many arguments\"\n+\treturn\n+    }\n+    append use_final_code \"[lindex $args 1]\\n\"\n+}\n+\n+#\n+# profopt-final-code -- run final code\n+#\n+# WHICH is \"generate\" or \"use\".\n+# FINAL_CODE is the TCL code to run.\n+# TESTCASE is the name of the test, for error messages.\n+#\n+proc profopt-final-code { which final_code name } {\n+    # This is copied from dg-test in dg.exp of DejaGnu.\n+    regsub -all \"\\\\\\\\(\\[{}\\])\" $final_code \"\\\\1\" final_code\n+    proc profopt-final-proc { args } $final_code\n+    if [catch \"profopt-final-proc $name\" errmsg] {\n+\tperror \"$name: error executing dg-final-${which}: $errmsg\"\n+\tunresolved \"$name: Error executing dg-final-${which}: $errmsg\"\n+    }\n+}\n+\n+#\n+# profopt-get-options -- process test directives\n+#\n+# SRC is the full pathname of the testcase.\n+#\n+proc profopt-get-options { src } {\n+    # dg-options sets a variable called dg-extra-tool-flags.\n+    set dg-extra-tool-flags \"\"\n+\n+    # dg-require-* sets dg-do-what.\n+    upvar dg-do-what dg-do-what \n+\n+    set tmp [dg-get-options $src]\n+    foreach op $tmp {\n+\tset cmd [lindex $op 0]\n+\tif { ![string compare \"dg-options\" $cmd] \\\n+\t     || ![string compare \"dg-skip-if\" $cmd] \\\n+\t     || ![string compare \"dg-final-generate\" $cmd] \\\n+\t     || ![string compare \"dg-final-use\" $cmd] \\\n+\t     || [string match \"dg-require-*\" $cmd]  } {\n+\t    set status [catch \"$op\" errmsg]\n+\t    if { $status != 0 } {\n+\t\tperror \"src: $errmsg for \\\"$op\\\"\\n\"\n+\t\tunresolved \"$src: $errmsg for \\\"$op\\\"\"\n+\t\treturn\n+\t    }\n+\t} else {\n+\t    # Ignore unrecognized dg- commands, but warn about them.\n+\t    warning \"compat.exp does not support $cmd\"\n+\t}\n+    }\n+\n+    # Return flags to use for compiling the primary source file and for\n+    # linking.\n+    return ${dg-extra-tool-flags}\n+}\n+\n #\n # c-prof-execute -- compile for profiling and then feedback, then normal\n #\n@@ -124,6 +211,7 @@ proc profopt-execute { src } {\n     global srcdir tmpdir\n     global prof_option_list\n     global tool profile_option feedback_option prof_ext perf_ext perf_delta\n+    global generate_final_code use_final_code\n     global verbose\n \n     if ![info exists profile_option] {\n@@ -162,10 +250,22 @@ proc profopt-execute { src } {\n \t    profopt-cleanup $testcase $perf_ext\n \t}\n \n+\t# Process test directives.\n+\n+\tset generate_final_code \"\"\n+\tset use_final_code \"\"\n+\tset dg-do-what [list \"run\" \"\" P]\n+\tset extra_flags [profopt-get-options $src]\n+\tif { [lindex ${dg-do-what} 1 ] == \"N\" } {\n+\t    unsupported \"$src\"\n+\t    verbose \"$src not supported on this target, skipping it\" 3\n+\t    return\n+\t}\n+\n \t# Compile for profiling.\n \n \tset options \"\"\n-\tlappend options \"additional_flags=$option $profile_option\"\n+\tlappend options \"additional_flags=$option $extra_flags $profile_option\"\n \tset optstr \"$option $profile_option\"\n \tset comp_output [${tool}_target_compile \"$src\" \"$execname1\" executable $options]\n \tif ![${tool}_check_compile \"$testcase compilation\" $optstr $execname1 $comp_output] {\n@@ -179,6 +279,7 @@ proc profopt-execute { src } {\n \n \tset result [${tool}_load $execname1 \"\" \"\"]\n \tset status [lindex $result 0]\n+\tset missing_file 0\n \t# Make sure the profile data was generated, and fail if not.\n \tif { $status == \"pass\" } {\n \t    set basename [file tail $testcase]\n@@ -187,26 +288,34 @@ proc profopt-execute { src } {\n \t\tset files [glob -nocomplain $base.$ext]\n \t\tif { $files == \"\" } {\n \t\t    set status \"fail\"\n+\t\t    set missing_file 1\n \t\t    fail \"$testcase execution: file $base.$ext does not exist, $option $profile_option\"\n-\t\t} else {\n-\t            $status \"$testcase execution,   $optstr\"\n \t\t}\n \t    }\n-\t} else {\n+\t}\n+        if { $missing_file == 0 } {\n \t    $status \"$testcase execution,   $optstr\"\n \t}\n+\n+\t# If there is dg-final code to execute for the generate step, do it\n+\t# even if it failed; it might clean up temporary files.\n+\tif ![string match $generate_final_code \"\"] {\n+\t    profopt-final-code \"generate\" $generate_final_code $testcase\n+\t}\n+\n+\tremote_file build delete $execname1\n+\n \t# Quit for this round if it failed\n \tif { $status != \"pass\" } {\n  \t    unresolved \"$testcase compilation, $option $feedback_option\"\n  \t    unresolved \"$testcase execution,   $option $feedback_option\"\n \t    continue\n \t}\n-\tremote_file build delete $execname1\n \n \t# Compile with feedback-directed optimizations.\n \n \tset options \"\"\n-\tlappend options \"additional_flags=$option $feedback_option\"\n+\tlappend options \"additional_flags=$option $extra_flags $feedback_option\"\n \tset optstr \"$option $feedback_option\"\n \tset comp_output [${tool}_target_compile \"$src\" \"$execname2\" \"executable\" $options]\n \tif ![${tool}_check_compile \"$testcase compilation\" $optstr $execname2 $comp_output] {\n@@ -219,13 +328,19 @@ proc profopt-execute { src } {\n \tset result [${tool}_load \"$execname2\" \"\" \"\"]\n \tset status [lindex $result 0]\n \t$status \"$testcase execution,   $optstr\"\n-\tif { $status != \"pass\" } {\n-\t    continue\n+\n+\t# If there is dg-final code to execute for the use step, do it.\n+\tif ![string match $use_final_code \"\"] {\n+\t    profopt-final-code \"use\" $use_final_code $testcase\n \t}\n \n \t# Remove the profiling data files.\n \tprofopt-cleanup $testcase $prof_ext\n \n+\tif { $status != \"pass\" } {\n+\t    continue\n+\t}\n+\n \t# If the test is not expected to produce performance data then\n \t# we're done now.\n \tif ![info exists perf_ext] {"}]}