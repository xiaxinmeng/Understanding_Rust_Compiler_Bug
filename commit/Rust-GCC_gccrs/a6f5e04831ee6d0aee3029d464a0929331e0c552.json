{"sha": "a6f5e04831ee6d0aee3029d464a0929331e0c552", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZmNWUwNDgzMWVlNmQwYWVlMzAyOWQ0NjRhMDkyOTMzMWUwYzU1Mg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-06-14T00:50:34Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-06-14T00:50:34Z"}, "message": "defaults.h (TARGET_VTABLE_ENTRY_ALIGN): New.\n\n        * defaults.h (TARGET_VTABLE_ENTRY_ALIGN): New.\n        (TARGET_VTABLE_DATA_ENTRY_DISTANCE): New.\n        * doc/tm.texi: Document them.\n        * config/ia64/ia64.h (TARGET_VTABLE_ENTRY_ALIGN): New.\n        (TARGET_VTABLE_DATA_ENTRY_DISTANCE): New.\n        (TARGET_VTABLE_USES_DESCRIPTORS): 4 word descriptors for 32-bit mode.\n        (ASM_OUTPUT_FDESC): Likewise.\n\n        * class.c (build_vtable): Use TARGET_VTABLE_ENTRY_ALIGN.\n        (build_vtbl_initializer): Honor TARGET_VTABLE_DATA_ENTRY_DISTANCE.\n        (build_vbase_offset_vtbl_entries): Likewise.\n        * rtti.c (build_headof): Likewise.\n        (get_tinfo_decl_dynamic): Likewise.\n        (create_pseudo_type_info): Likewise.\n\n        * g++.old-deja/g++.abi/vtable2.C (INC_VDATA): New.  Define for\n        ia64 ilp32.\n\nFrom-SVN: r54603", "tree": {"sha": "f528ed25ee144d3558289d8725d28f56df5995ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f528ed25ee144d3558289d8725d28f56df5995ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6f5e04831ee6d0aee3029d464a0929331e0c552", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6f5e04831ee6d0aee3029d464a0929331e0c552", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6f5e04831ee6d0aee3029d464a0929331e0c552", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6f5e04831ee6d0aee3029d464a0929331e0c552/comments", "author": null, "committer": null, "parents": [{"sha": "3aafa0bbab35b6ddd3aa0ab29a5400bc7be837ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aafa0bbab35b6ddd3aa0ab29a5400bc7be837ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aafa0bbab35b6ddd3aa0ab29a5400bc7be837ee"}], "stats": {"total": 156, "additions": 131, "deletions": 25}, "files": [{"sha": "9f6d900624492f7acf224cccaefcb2321ec427a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f5e04831ee6d0aee3029d464a0929331e0c552/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f5e04831ee6d0aee3029d464a0929331e0c552/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6f5e04831ee6d0aee3029d464a0929331e0c552", "patch": "@@ -1,3 +1,13 @@\n+2002-06-13  Jessica Han  <jessica@cup.hp.com>\n+\n+\t* defaults.h (TARGET_VTABLE_ENTRY_ALIGN): New.\n+\t(TARGET_VTABLE_DATA_ENTRY_DISTANCE): New.\n+\t* doc/tm.texi: Document them.\n+\t* config/ia64/ia64.h (TARGET_VTABLE_ENTRY_ALIGN): New.\n+\t(TARGET_VTABLE_DATA_ENTRY_DISTANCE): New.\n+\t(TARGET_VTABLE_USES_DESCRIPTORS): 4 word descriptors for 32-bit mode.\n+\t(ASM_OUTPUT_FDESC): Likewise.\n+\n 2002-06-13  Eric Christopher  <echristo@redhat.com>\n \n \t* diagnostic.c (output_format): Fix thinko."}, {"sha": "8aa8140d53b43da6d9129996fd437e0d653bcd9c", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f5e04831ee6d0aee3029d464a0929331e0c552/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f5e04831ee6d0aee3029d464a0929331e0c552/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=a6f5e04831ee6d0aee3029d464a0929331e0c552", "patch": "@@ -342,8 +342,21 @@ while (0)\n    function descriptors instead.  The value of this macro says how\n    many words wide the descriptor is (normally 2).  It is assumed\n    that the address of a function descriptor may be treated as a\n-   pointer to a function.  */\n-#define TARGET_VTABLE_USES_DESCRIPTORS 2\n+   pointer to a function.\n+\n+   For reasons known only to HP, the vtable entries (as opposed to\n+   normal function descriptors) are 16 bytes wide in 32-bit mode as\n+   well, even though the 3rd and 4th words are unused.  */\n+#define TARGET_VTABLE_USES_DESCRIPTORS (TARGET_ILP32 ? 4 : 2)\n+\n+/* Due to silliness in the HPUX linker, vtable entries must be\n+   8-byte aligned even in 32-bit mode.  Rather than create multiple\n+   ABIs, force this restriction on everyone else too.  */\n+#define TARGET_VTABLE_ENTRY_ALIGN  64\n+\n+/* Due to the above, we need extra padding for the data entries below 0\n+   to retain the alignment of the descriptors.  */\n+#define TARGET_VTABLE_DATA_ENTRY_DISTANCE (TARGET_ILP32 ? 2 : 1)\n \f\n /* Layout of Source Language Data Types */\n \n@@ -1454,9 +1467,14 @@ do {\t\t\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   if ((PART) == 0)\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      fputs (\"\\tdata16.ua @iplt(\", FILE);\t\t\t\t\\\n+      if (TARGET_ILP32)\t\t\t\t\t\t\t\\\n+        fputs (\"\\tdata8.ua @iplt(\", FILE);\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+        fputs (\"\\tdata16.ua @iplt(\", FILE);\t\t\t\t\\\n       assemble_name (FILE, XSTR (XEXP (DECL_RTL (DECL), 0), 0));\t\\\n       fputs (\")\\n\", FILE);\t\t\t\t\t\t\\\n+      if (TARGET_ILP32)\t\t\t\t\t\t\t\\\n+\tfputs (\"\\tdata8.ua 0\\n\", FILE);\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n } while (0)\n \f"}, {"sha": "bfbe11f65797840b83eb94be50436fa5e13b99a5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f5e04831ee6d0aee3029d464a0929331e0c552/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f5e04831ee6d0aee3029d464a0929331e0c552/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a6f5e04831ee6d0aee3029d464a0929331e0c552", "patch": "@@ -1,3 +1,12 @@\n+2002-06-13  Jessica Han  <jessica@cup.hp.com>\n+\n+\t* class.c (build_vtable): Use TARGET_VTABLE_ENTRY_ALIGN.\n+\t(build_vtbl_initializer): Honor TARGET_VTABLE_DATA_ENTRY_DISTANCE.\n+\t(build_vbase_offset_vtbl_entries): Likewise.\n+\t* rtti.c (build_headof): Likewise.\n+\t(get_tinfo_decl_dynamic): Likewise.\n+\t(create_pseudo_type_info): Likewise.\n+\n 2002-06-12  Stan Shebs  <shebs@apple.com>\n \n \t* mpw-config.in: Remove file, no longer used."}, {"sha": "1be2897f2f944a611f2e450202546a3bae90c76f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f5e04831ee6d0aee3029d464a0929331e0c552/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f5e04831ee6d0aee3029d464a0929331e0c552/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=a6f5e04831ee6d0aee3029d464a0929331e0c552", "patch": "@@ -510,6 +510,8 @@ build_vtable (class_type, name, vtable_type)\n   TREE_STATIC (decl) = 1;\n   TREE_READONLY (decl) = 1;\n   DECL_VIRTUAL_P (decl) = 1;\n+  DECL_ALIGN (decl) = TARGET_VTABLE_ENTRY_ALIGN;\n+\n   import_export_vtable (decl, class_type, 0);\n \n   return decl;\n@@ -7500,7 +7502,7 @@ build_vtbl_initializer (binfo, orig_binfo, t, rtti_binfo, non_fn_entries_p)\n   vid.primary_vtbl_p = (binfo == TYPE_BINFO (t));\n   vid.ctor_vtbl_p = !same_type_p (BINFO_TYPE (rtti_binfo), t);\n   /* The first vbase or vcall offset is at index -3 in the vtable.  */\n-  vid.index = ssize_int (-3);\n+  vid.index = ssize_int (-3 * TARGET_VTABLE_DATA_ENTRY_DISTANCE);\n \n   /* Add entries to the vtable for RTTI.  */\n   build_rtti_vtbl_entries (binfo, &vid);\n@@ -7518,6 +7520,22 @@ build_vtbl_initializer (binfo, orig_binfo, t, rtti_binfo, non_fn_entries_p)\n        vbase = TREE_CHAIN (vbase))\n     CLEAR_BINFO_VTABLE_PATH_MARKED (TREE_VALUE (vbase));\n \n+  /* If the target requires padding between data entries, add that now.  */\n+  if (TARGET_VTABLE_DATA_ENTRY_DISTANCE > 1)\n+    {\n+      tree cur, *prev;\n+\n+      for (prev = &vid.inits; (cur = *prev); prev = &TREE_CHAIN (cur))\n+\t{\n+\t  tree add = cur;\n+\t  int i;\n+\n+\t  for (i = 1; i < TARGET_VTABLE_DATA_ENTRY_DISTANCE; ++i)\n+\t    add = tree_cons (NULL_TREE, null_pointer_node, add);\n+\t  *prev = add;\n+\t}\n+    }\n+\n   if (non_fn_entries_p)\n     *non_fn_entries_p = list_length (vid.inits);\n \n@@ -7735,7 +7753,8 @@ build_vbase_offset_vtbl_entries (binfo, vid)\n \t}\n \n       /* The next vbase will come at a more negative offset.  */\n-      vid->index = size_binop (MINUS_EXPR, vid->index, ssize_int (1));\n+      vid->index = size_binop (MINUS_EXPR, vid->index,\n+\t\t\t       ssize_int (TARGET_VTABLE_DATA_ENTRY_DISTANCE));\n \n       /* The initializer is the delta from BINFO to this virtual base.\n \t The vbase offsets go in reverse inheritance-graph order, and"}, {"sha": "7d3027af14a85f24e31e63011a8963651b745c23", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f5e04831ee6d0aee3029d464a0929331e0c552/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f5e04831ee6d0aee3029d464a0929331e0c552/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=a6f5e04831ee6d0aee3029d464a0929331e0c552", "patch": "@@ -102,7 +102,7 @@ build_headof (exp)\n   exp = save_expr (exp);\n \n   /* The offset-to-top field is at index -2 from the vptr.  */\n-  index = build_int_2 (-2, -1);\n+  index = build_int_2 (-2 * TARGET_VTABLE_DATA_ENTRY_DISTANCE, -1);\n \n   offset = build_vtbl_ref (build_indirect_ref (exp, NULL), index);\n \n@@ -181,7 +181,7 @@ get_tinfo_decl_dynamic (exp)\n       tree index;\n \n       /* The RTTI information is at index -1.  */\n-      index = integer_minus_one_node;\n+      index = build_int_2 (-1 * TARGET_VTABLE_DATA_ENTRY_DISTANCE, -1);\n       t = build_vtbl_ref (exp, index);\n       TREE_TYPE (t) = build_pointer_type (tinfo_decl_type);\n       return t;\n@@ -1180,12 +1180,11 @@ create_pseudo_type_info VPARAMS((const char *real_name, int ident, ...))\n   vtable_decl = build_unary_op (ADDR_EXPR, vtable_decl, 0);\n \n   /* We need to point into the middle of the vtable.  */\n-  vtable_decl = build (PLUS_EXPR,\n-\t\t       TREE_TYPE (vtable_decl),\n-\t\t       vtable_decl,\n-\t\t       size_binop (MULT_EXPR,\n-\t\t\t\t   size_int (2),\n-\t\t\t\t   TYPE_SIZE_UNIT (vtable_entry_type)));\n+  vtable_decl\n+    = build (PLUS_EXPR, TREE_TYPE (vtable_decl), vtable_decl,\n+\t     size_binop (MULT_EXPR,\n+\t\t\t size_int (2 * TARGET_VTABLE_DATA_ENTRY_DISTANCE),\n+\t\t\t TYPE_SIZE_UNIT (vtable_entry_type)));\n   TREE_CONSTANT (vtable_decl) = 1;\n \n   /* First field is the pseudo type_info base class. */"}, {"sha": "9db7bfe9da8fd3b25bf2ba3417fa3645b12b90bd", "filename": "gcc/defaults.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f5e04831ee6d0aee3029d464a0929331e0c552/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f5e04831ee6d0aee3029d464a0929331e0c552/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=a6f5e04831ee6d0aee3029d464a0929331e0c552", "patch": "@@ -380,6 +380,22 @@ do { ASM_OUTPUT_LABEL(FILE,LABEL_ALTERNATE_NAME (INSN)); } while (0)\n #define TARGET_VTABLE_USES_DESCRIPTORS 0\n #endif\n \n+/* By default, the vtable entries are void pointers, the so the alignment\n+   is the same as pointer alignment.  The value of this macro specifies\n+   the alignment of the vtable entry in bits.  It should be defined only\n+   when special alignment is necessary. */\n+#ifndef TARGET_VTABLE_ENTRY_ALIGN\n+#define TARGET_VTABLE_ENTRY_ALIGN POINTER_SIZE\n+#endif\n+\n+/* There are a few non-descriptor entries in the vtable at offsets below\n+   zero.  If these entries must be padded (say, to preserve the alignment\n+   specified by TARGET_VTABLE_ENTRY_ALIGN), set this to the number of\n+   words in each data entry.  */\n+#ifndef TARGET_VTABLE_DATA_ENTRY_DISTANCE\n+#define TARGET_VTABLE_DATA_ENTRY_DISTANCE 1\n+#endif\n+\n /* Select a format to encode pointers in exception handling data.  We\n    prefer those that result in fewer dynamic relocations.  Assume no\n    special support here and encode direct references.  */"}, {"sha": "cf08b12d149dc43865d1945179fe0aced0822987", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f5e04831ee6d0aee3029d464a0929331e0c552/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f5e04831ee6d0aee3029d464a0929331e0c552/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=a6f5e04831ee6d0aee3029d464a0929331e0c552", "patch": "@@ -1695,6 +1695,20 @@ pointer to which the function's data is relative.\n \n If vtables are used, the value of this macro should be the number\n of words that the function descriptor occupies.\n+\n+@findex TARGET_VTABLE_ENTRY_ALIGN\n+@item TARGET_VTABLE_ENTRY_ALIGN\n+By default, the vtable entries are void pointers, the so the alignment\n+is the same as pointer alignment.  The value of this macro specifies\n+the alignment of the vtable entry in bits.  It should be defined only\n+when special alignment is necessary. */\n+\n+@findex TARGET_VTABLE_DATA_ENTRY_DISTANCE\n+@item TARGET_VTABLE_DATA_ENTRY_DISTANCE\n+There are a few non-descriptor entries in the vtable at offsets below\n+zero.  If these entries must be padded (say, to preserve the alignment\n+specified by @code{TARGET_VTABLE_ENTRY_ALIGN}), set this to the number\n+of words in each data entry.\n @end table\n \n @node Escape Sequences"}, {"sha": "ee641bc8715ee005f388c99007a706d65f748123", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f5e04831ee6d0aee3029d464a0929331e0c552/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f5e04831ee6d0aee3029d464a0929331e0c552/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a6f5e04831ee6d0aee3029d464a0929331e0c552", "patch": "@@ -1,3 +1,8 @@\n+2002-06-13  Richard Henderson  <rth@redhat.com>\n+\n+\t* g++.old-deja/g++.abi/vtable2.C (INC_VDATA): New.  Define for\n+\tia64 ilp32.\n+\n 2002-06-12  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \t* g++.dg/template/typename2.C: Update error message."}, {"sha": "47afa15e807a7536b7bfdd2d126f7ce7b252ecf5", "filename": "gcc/testsuite/g++.old-deja/g++.abi/vtable2.C", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f5e04831ee6d0aee3029d464a0929331e0c552/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fvtable2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f5e04831ee6d0aee3029d464a0929331e0c552/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fvtable2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fvtable2.C?ref=a6f5e04831ee6d0aee3029d464a0929331e0c552", "patch": "@@ -130,10 +130,17 @@ void _ZN2S42s1Ev ();\n // IA-64 uses function descriptors not function pointers in its vtables.\n #if defined __ia64__\n #define CMP_VPTR(A, B)\t(*(void **)(A) == *(void **)(B))\n+#ifdef _LP64\n #define INC_VPTR(A)\t((A) += 2)\n+#define INC_VDATA(A,N)\t((A) += (N))\n+#else\n+#define INC_VPTR(A)\t((A) += 4)\n+#define INC_VDATA(A,N)\t((A) += 2*(N))\n+#endif\n #else\n #define CMP_VPTR(A, B)\t(*(A) == (ptrdiff_t)(B))\n #define INC_VPTR(A)\t((A) += 1)\n+#define INC_VDATA(A,N)\t((A) += (N))\n #endif\n \n int main ()\n@@ -145,40 +152,49 @@ int main ()\n   // Set vtbl to point at the beginning of S4's primary vtable.\n   vptr = (ptrdiff_t **) &s4;\n   vtbl = *vptr;\n-  vtbl -= 5;\n+  INC_VDATA (vtbl, -5);\n \n-  if (*vtbl++ != ((char*) (S0*) &s4) - (char*) &s4)\n+  if (*vtbl != ((char*) (S0*) &s4) - (char*) &s4)\n     return 1;\n-  if (*vtbl++ != ((char*) (S1*) &s4) - (char*) &s4)\n+  INC_VDATA (vtbl, 1);\n+  if (*vtbl != ((char*) (S1*) &s4) - (char*) &s4)\n     return 2;\n-  if (*vtbl++ != ((char*) (S2*) &s4) - (char*) &s4)\n+  INC_VDATA (vtbl, 1);\n+  if (*vtbl != ((char*) (S2*) &s4) - (char*) &s4)\n     return 3;\n-  if (*vtbl++ != 0)\n+  INC_VDATA (vtbl, 1);\n+  if (*vtbl != 0)\n     return 4;\n+  INC_VDATA (vtbl, 1);\n   // Skip the RTTI entry.\n-  vtbl++;\n+  INC_VDATA (vtbl, 1);\n   if (! CMP_VPTR (vtbl, &_ZN2S32s3Ev))\n     return 5;\n   INC_VPTR (vtbl);\n   if (! CMP_VPTR (vtbl, &_ZN2S42s1Ev))\n     return 6;\n   INC_VPTR (vtbl);\n   // The S1 vbase offset.\n-  if (*vtbl++ != 0)\n+  if (*vtbl != 0)\n     return 7;\n+  INC_VDATA (vtbl, 1);\n   // The S4::s1 vcall offset is negative; once you convert to S2, you\n   // have to convert to S4 to find the final overrider.\n-  if (*vtbl++ != ((char*) &s4 - (char*) (S2*) &s4))\n+  if (*vtbl != ((char*) &s4 - (char*) (S2*) &s4))\n     return 8;\n-  if (*vtbl++ != 0)\n+  INC_VDATA (vtbl, 1);\n+  if (*vtbl != 0)\n     return 9;\n-  if (*vtbl++ != 0)\n+  INC_VDATA (vtbl, 1);\n+  if (*vtbl != 0)\n     return 10;\n+  INC_VDATA (vtbl, 1);\n   // Now we're at the S2 offset to top entry.\n-  if (*vtbl++ != ((char*) &s4 - (char*) (S2*) &s4))\n+  if (*vtbl != ((char*) &s4 - (char*) (S2*) &s4))\n     return 11;\n+  INC_VDATA (vtbl, 1);\n   // Skip the RTTI entry.\n-  vtbl++;\n+  INC_VDATA (vtbl, 1);\n   // Skip the remaining virtual functions -- they are thunks.\n   INC_VPTR (vtbl);\n   INC_VPTR (vtbl);"}]}