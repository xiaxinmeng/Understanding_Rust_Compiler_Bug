{"sha": "7021d5df0a0c762b092f88d8274089fb12acc6ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAyMWQ1ZGYwYTBjNzYyYjA5MmY4OGQ4Mjc0MDg5ZmIxMmFjYzZhYw==", "commit": {"author": {"name": "Paul Koning", "email": "ni1d@arrl.net", "date": "2010-10-26T00:46:55Z"}, "committer": {"name": "Paul Koning", "email": "pkoning@gcc.gnu.org", "date": "2010-10-26T00:46:55Z"}, "message": "pdp11.md: Add define_constants for register numbers, branch offset limits.\n\n* config/pdp11/pdp11.md: Add define_constants for register\nnumbers, branch offset limits.\n* config/pdp11/pdp11.c: Use named constants instead of numbers.\n* config/pdp11.pdp11.h: Ditto.\n\nFrom-SVN: r165933", "tree": {"sha": "9c72b593c0b9b857c67dade7b0102e023945776f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c72b593c0b9b857c67dade7b0102e023945776f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7021d5df0a0c762b092f88d8274089fb12acc6ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7021d5df0a0c762b092f88d8274089fb12acc6ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7021d5df0a0c762b092f88d8274089fb12acc6ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7021d5df0a0c762b092f88d8274089fb12acc6ac/comments", "author": null, "committer": null, "parents": [{"sha": "97021017c5f8ae45a4330a76be481c0eb6fad73a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97021017c5f8ae45a4330a76be481c0eb6fad73a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97021017c5f8ae45a4330a76be481c0eb6fad73a"}], "stats": {"total": 128, "additions": 69, "deletions": 59}, "files": [{"sha": "5c0a060859f157d7a070b3705c529e741b50232c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7021d5df0a0c762b092f88d8274089fb12acc6ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7021d5df0a0c762b092f88d8274089fb12acc6ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7021d5df0a0c762b092f88d8274089fb12acc6ac", "patch": "@@ -1,3 +1,10 @@\n+2010-10-25  Paul Koning  <ni1d@arrl.net>\n+\n+\t* config/pdp11/pdp11.md: Add define_constants for register\n+\tnumbers, branch offset limits.\n+\t* config/pdp11/pdp11.c: Use named constants instead of numbers.\n+\t* config/pdp11.pdp11.h: Ditto.\n+\n 2010-10-25  Changpeng Fang  <changpeng.fang@amd.com>\n \n \t* Changelog (2010-10-22  Changpeng Fang): Correct the Changelog entries."}, {"sha": "78b4283f9af9e607107a081693674e07899f2773", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7021d5df0a0c762b092f88d8274089fb12acc6ac/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7021d5df0a0c762b092f88d8274089fb12acc6ac/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=7021d5df0a0c762b092f88d8274089fb12acc6ac", "patch": "@@ -42,11 +42,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target-def.h\"\n #include \"df.h\"\n \n-/*\n-#define FPU_REG_P(X)\t((X)>=8 && (X)<14)\n-#define CPU_REG_P(X)\t((X)>=0 && (X)<8)\n-*/\n-\n /* this is the current value returned by the macro FIRST_PARM_OFFSET \n    defined in tm.h */\n int current_first_parm_offset;\n@@ -295,7 +290,7 @@ pdp11_output_function_prologue (FILE *stream, HOST_WIDE_INT size)\n \tasm_fprintf (stream, \"\\tsub $%#wo, sp\\n\", fsize);\n \n     /* save CPU registers  */\n-    for (regno = 0; regno < 8; regno++)\t\t\t\t\n+    for (regno = 0; regno <= PC_REGNUM; regno++)\t\t\t\t\n       if (df_regs_ever_live_p (regno) && ! call_used_regs[regno])\t\n \t    if (! ((regno == FRAME_POINTER_REGNUM)\t\t\t\n \t\t   && frame_pointer_needed))\t\t\t\t\n@@ -305,7 +300,7 @@ pdp11_output_function_prologue (FILE *stream, HOST_WIDE_INT size)\n     /* via_ac specifies the ac to use for saving ac4, ac5 */\n     via_ac = -1;\n     \n-    for (regno = 8; regno < FIRST_PSEUDO_REGISTER ; regno++) \n+    for (regno = AC0_REGNUM; regno <= AC5_REGNUM ; regno++) \n     {\n \t/* ac0 - ac3 */\t\t\t\t\t\t\n \tif (LOAD_FPU_REG_P(regno)\n@@ -366,30 +361,30 @@ pdp11_output_function_epilogue (FILE *stream, HOST_WIDE_INT size)\n \t/* hope this is safe - m68k does it also .... */\t\t\n         df_set_regs_ever_live (FRAME_POINTER_REGNUM, false);\n \t\t\t\t\t\t\t\t\n-\tfor (i =7, j = 0 ; i >= 0 ; i--)\t\t\t\t\n+\tfor (i = PC_REGNUM, j = 0 ; i >= 0 ; i--)\t\t\t\t\n \t  if (df_regs_ever_live_p (i) && ! call_used_regs[i])\t\t\n \t\tj++;\n \t\n \t/* remember # of pushed bytes for CPU regs */\n \tk = 2*j;\n \t\n \t/* change fp -> r5 due to the compile error on libgcc2.c */\n-\tfor (i =7 ; i >= 0 ; i--)\t\t\t\t\t\n+\tfor (i = PC_REGNUM ; i >= 0 ; i--)\t\t\t\t\t\n \t  if (df_regs_ever_live_p (i) && ! call_used_regs[i])\t\t\n \t\tfprintf(stream, \"\\tmov %#\" HOST_WIDE_INT_PRINT \"o(r5), %s\\n\",\n \t\t\t(-fsize-2*j--)&0xffff, reg_names[i]);\n \n \t/* get ACs */\t\t\t\t\t\t\n-\tvia_ac = FIRST_PSEUDO_REGISTER -1;\n+\tvia_ac = AC5_REGNUM;\n \t\n-\tfor (i = FIRST_PSEUDO_REGISTER; i > 7; i--)\n+\tfor (i = AC5_REGNUM; i >= AC0_REGNUM; i--)\n \t  if (df_regs_ever_live_p (i) && ! call_used_regs[i])\n \t    {\n \t\tvia_ac = i;\n \t\tk += 8;\n \t    }\n \t\n-\tfor (i = FIRST_PSEUDO_REGISTER; i > 7; i--)\n+\tfor (i = AC5_REGNUM; i >= AC0_REGNUM; i--)\n \t{\n \t    if (LOAD_FPU_REG_P(i)\n \t\t&& df_regs_ever_live_p (i)\n@@ -418,14 +413,14 @@ pdp11_output_function_epilogue (FILE *stream, HOST_WIDE_INT size)\n     }\t\t\t\t\t\t\t\t\n     else\t\t\t\t\t\t\t\t\n     {\t\t   \n-\tvia_ac = FIRST_PSEUDO_REGISTER -1;\n+      via_ac = AC5_REGNUM;\n \t\n \t/* get ACs */\n-\tfor (i = FIRST_PSEUDO_REGISTER; i > 7; i--)\n+\tfor (i = AC5_REGNUM; i >= AC0_REGNUM; i--)\n \t  if (df_regs_ever_live_p (i) && call_used_regs[i])\n \t\tvia_ac = i;\n \t\n-\tfor (i = FIRST_PSEUDO_REGISTER; i > 7; i--)\n+\tfor (i = AC5_REGNUM; i >= AC0_REGNUM; i--)\n \t{\n \t    if (LOAD_FPU_REG_P(i)\n \t\t&& df_regs_ever_live_p (i)\n@@ -443,7 +438,7 @@ pdp11_output_function_epilogue (FILE *stream, HOST_WIDE_INT size)\n \t    }\n \t}\n \n-\tfor (i=7; i >= 0; i--)\t\t\t\t\t\n+\tfor (i = PC_REGNUM; i >= 0; i--)\t\t\t\t\t\n \t  if (df_regs_ever_live_p (i) && !call_used_regs[i])\t\t\n \t\tfprintf(stream, \"\\tmov (sp)+, %s\\n\", reg_names[i]);\t\n \t\t\t\t\t\t\t\t"}, {"sha": "1b1e713344baea97d8a24b2c7189e9a74ddb3475", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7021d5df0a0c762b092f88d8274089fb12acc6ac/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7021d5df0a0c762b092f88d8274089fb12acc6ac/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=7021d5df0a0c762b092f88d8274089fb12acc6ac", "patch": "@@ -22,10 +22,10 @@ along with GCC; see the file COPYING3.  If not see\n #define CONSTANT_POOL_BEFORE_FUNCTION\t0\n \n /* check whether load_fpu_reg or not */\n-#define LOAD_FPU_REG_P(x) ((x)>=8 && (x)<=11)\n-#define NO_LOAD_FPU_REG_P(x) ((x)==12 || (x)==13)\n+#define LOAD_FPU_REG_P(x) ((x) >= AC0_REGNUM && (x) <= AC3_REGNUM)\n+#define NO_LOAD_FPU_REG_P(x) ((x) == AC4_REGNUM || (x) == AC5_REGNUM)\n #define FPU_REG_P(x)\t(LOAD_FPU_REG_P(x) || NO_LOAD_FPU_REG_P(x))\n-#define CPU_REG_P(x)\t((x)<8)\n+#define CPU_REG_P(x)\t((x) <= PC_REGNUM)\n \n /* Names to predefine in the preprocessor for this target machine.  */\n \n@@ -140,8 +140,6 @@ extern const struct real_format pdp11_d_format;\n    we have 8 integer registers, plus 6 float \n    (don't use scratch float !) */\n \n-#define FIRST_PSEUDO_REGISTER 14\n-\n /* 1 for registers that have pervasive standard uses\n    and are not available for the register allocator.\n \n@@ -191,7 +189,7 @@ extern const struct real_format pdp11_d_format;\n     } \t\t\t\t\t\t\\\n \t\t\t\t\t\t\\\n   if (TARGET_AC0)\t\t\t\t\\\n-      call_used_regs[8] = 1;\t\t\t\\\n+      call_used_regs[AC0_REGNUM] = 1;\t\t\\\n   if (TARGET_UNIX_ASM)\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       /* Change names of FPU registers for the UNIX assembler.  */ \\\n@@ -211,7 +209,7 @@ extern const struct real_format pdp11_d_format;\n */\n \n #define HARD_REGNO_NREGS(REGNO, MODE)   \\\n-((REGNO < 8)?\t\t\t\t\t\t\t\t\\\n+((REGNO <= PC_REGNUM)?\t\t\t\t\t\t\t\\\n     ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\t\\\n     :1)\n     \n@@ -222,7 +220,7 @@ extern const struct real_format pdp11_d_format;\n    FPU can only hold DF - simplifies life!\n */\n #define HARD_REGNO_MODE_OK(REGNO, MODE) \\\n-(((REGNO) < 8)?\t\t\t\t\t\t\\\n+(((REGNO) <= PC_REGNUM)?\t\t\t\t\\\n   ((GET_MODE_BITSIZE(MODE) <= 16) \t\t\t\\\n    || (GET_MODE_BITSIZE(MODE) >= 32 && !((REGNO) & 1)))\t\\\n   :(MODE) == DFmode)\n@@ -237,17 +235,8 @@ extern const struct real_format pdp11_d_format;\n /* Specify the registers used for certain standard purposes.\n    The values of these macros are register numbers.  */\n \n-/* the pdp11 pc overloaded on a register that the compiler knows about.  */\n-#define PC_REGNUM  7\n-\n-/* Register to use for pushing function arguments.  */\n-#define STACK_POINTER_REGNUM 6\n-\n-/* Base register for access to local variables of the function.  */\n-#define FRAME_POINTER_REGNUM 5\n-\n /* Base register for access to arguments of the function.  */\n-#define ARG_POINTER_REGNUM 5\n+#define ARG_POINTER_REGNUM FRAME_POINTER_REGNUM\n \n /* Register in which static-chain is passed to a function.  */\n /* ??? - i don't want to give up a reg for this! */\n@@ -313,7 +302,10 @@ enum reg_class { NO_REGS, MUL_REGS, GENERAL_REGS, LOAD_FPU_REGS, NO_LOAD_FPU_REG\n    or could index an array.  */\n \n #define REGNO_REG_CLASS(REGNO) \t\t\\\n-((REGNO)>=8?((REGNO)<=11?LOAD_FPU_REGS:NO_LOAD_FPU_REGS):(((REGNO)&1)?MUL_REGS:GENERAL_REGS))\n+((REGNO) >= AC0_REGNUM ? \\\n+ ((REGNO) <= AC3_REGNUM ? LOAD_FPU_REGS : \\\n+  NO_LOAD_FPU_REGS) :                     \\\n+ (((REGNO) & 1) ? MUL_REGS : GENERAL_REGS))\n \n \n /* The class value for index registers, and the one for base regs.  */\n@@ -441,10 +433,10 @@ extern int may_call_alloca;\n {\t\t\t\t\t\t\t\t\\\n   int offset, regno;\t\t      \t\t\t\t\\\n   offset = get_frame_size();\t\t\t\t\t\\\n-  for (regno = 0; regno < 8; regno++)\t\t\t\t\\\n+  for (regno = 0; regno <= PC_REGNUM; regno++)\t\t\t\\\n     if (df_regs_ever_live_p (regno) && ! call_used_regs[regno])\t\\\n       offset += 2;\t\t\t\t\t\t\\\n-  for (regno = 8; regno < 14; regno++)\t\t\t\t\\\n+  for (regno = AC0_REGNUM; regno <= AC5_REGNUM; regno++)\t\\\n     if (df_regs_ever_live_p (regno) && ! call_used_regs[regno])\t\\\n       offset += 8;\t\t\t\t\t\t\\\n   /* offset -= 2;   no fp on stack frame */\t\t\t\\\n@@ -467,9 +459,9 @@ extern int may_call_alloca;\n    has been allocated, which happens in local-alloc.c.  */\n \n #define REGNO_OK_FOR_INDEX_P(REGNO) \\\n-  ((REGNO) < 8 || (unsigned) reg_renumber[REGNO] < 8)\n+  ((REGNO) <= PC_REGNUM || (unsigned) reg_renumber[REGNO] <= PC_REGNUM)\n #define REGNO_OK_FOR_BASE_P(REGNO)  \\\n-  ((REGNO) < 8 || (unsigned) reg_renumber[REGNO] < 8)\n+  ((REGNO) <= PC_REGNUM || (unsigned) reg_renumber[REGNO] <= PC_REGNUM)\n \n /* Now macros that check whether X is a register and also,\n    strictly, whether it is in a specified class.\n@@ -560,21 +552,21 @@ extern int may_call_alloca;\n     /* accept -(SP) -- which uses PRE_MODIFY for byte mode */\t\t\\\n     if (GET_CODE (operand) == PRE_MODIFY\t\t\t\t\\\n \t&& GET_CODE (XEXP (operand, 0)) == REG\t\t\t\t\\\n-\t&& REGNO (XEXP (operand, 0)) == 6        \t        \t\\\n+\t&& REGNO (XEXP (operand, 0)) == STACK_POINTER_REGNUM       \t\\\n \t&& GET_CODE ((xfoob = XEXP (operand, 1))) == PLUS\t\t\\\n \t&& GET_CODE (XEXP (xfoob, 0)) == REG\t\t\t\t\\\n-\t&& REGNO (XEXP (xfoob, 0)) == 6\t        \t        \t\\\n+\t&& REGNO (XEXP (xfoob, 0)) == STACK_POINTER_REGNUM       \t\\\n \t&& CONSTANT_P (XEXP (xfoob, 1))                                 \\\n \t&& INTVAL (XEXP (xfoob,1)) == -2)      \t               \t\t\\\n       goto ADDR;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     /* accept (SP)+ -- which uses POST_MODIFY for byte mode */\t\t\\\n     if (GET_CODE (operand) == POST_MODIFY\t\t\t\t\\\n \t&& GET_CODE (XEXP (operand, 0)) == REG\t\t\t\t\\\n-\t&& REGNO (XEXP (operand, 0)) == 6        \t        \t\\\n+\t&& REGNO (XEXP (operand, 0)) == STACK_POINTER_REGNUM       \t\\\n \t&& GET_CODE ((xfoob = XEXP (operand, 1))) == PLUS\t\t\\\n \t&& GET_CODE (XEXP (xfoob, 0)) == REG\t\t\t\t\\\n-\t&& REGNO (XEXP (xfoob, 0)) == 6\t        \t        \t\\\n+\t&& REGNO (XEXP (xfoob, 0)) == STACK_POINTER_REGNUM\t\t\\\n \t&& CONSTANT_P (XEXP (xfoob, 1))                                 \\\n \t&& INTVAL (XEXP (xfoob,1)) == 2)      \t               \t\t\\\n       goto ADDR;\t\t\t\t\t\t\t\\"}, {"sha": "53097b75a775a507104c4806a375d2f208696791", "filename": "gcc/config/pdp11/pdp11.md", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7021d5df0a0c762b092f88d8274089fb12acc6ac/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7021d5df0a0c762b092f88d8274089fb12acc6ac/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.md?ref=7021d5df0a0c762b092f88d8274089fb12acc6ac", "patch": "@@ -22,6 +22,22 @@\n (include \"predicates.md\")\n (include \"constraints.md\")\n \n+(define_constants\n+  [\n+   ;; Register numbers\n+   (FRAME_POINTER_REGNUM  5)\n+   (STACK_POINTER_REGNUM  6)\n+   (PC_REGNUM             7)\n+   (AC0_REGNUM            8)\n+   (AC3_REGNUM            11)\n+   (AC4_REGNUM            12)\n+   (AC5_REGNUM            13)\n+   (FIRST_PSEUDO_REGISTER 14)\n+   ;; Branch offset limits, as byte offsets from instruction address\n+   (MIN_BRANCH            -254)\n+   (MAX_BRANCH            256)\n+   (MIN_SOB               -126)\n+   (MAX_SOB               0)])\n \n ;; HI is 16 bit\n ;; QI is 8 bit \n@@ -165,12 +181,12 @@\n \n  return \\\"\\\";\n }\"\n-  [(set (attr \"length\") (if_then_else (ior (le (minus (match_dup 0)\n+  [(set (attr \"length\") (if_then_else (ior (lt (minus (match_dup 0)\n \t\t\t\t\t\t       (pc))\n-\t\t\t\t\t\t(const_int -256))\n-\t\t\t\t\t   (ge (minus (match_dup 0)\n+\t\t\t\t\t\t(const_int MIN_SOB))\n+\t\t\t\t\t   (gt (minus (match_dup 0)\n \t\t\t\t\t\t       (pc))\n-\t\t\t\t\t\t(const_int 0)))\n+\t\t\t\t\t\t(const_int MAX_SOB)))\n \t\t\t\t      (const_int 8)\n \t\t\t\t      (const_int 2)))])\n \n@@ -228,12 +244,12 @@\n \t\t      (pc)))]\n   \"\"\n   \"* return output_jump(GET_CODE (operands[0]), 0, get_attr_length(insn));\"\n-  [(set (attr \"length\") (if_then_else (ior (le (minus (match_dup 1)\n+  [(set (attr \"length\") (if_then_else (ior (lt (minus (match_dup 1)\n \t\t\t\t\t\t      (pc))\n-\t\t\t\t\t       (const_int -256))\n-\t\t\t\t\t   (ge (minus (match_dup 1)\n+\t\t\t\t\t       (const_int MIN_BRANCH))\n+\t\t\t\t\t   (gt (minus (match_dup 1)\n \t\t\t\t\t\t      (pc))\n-\t\t\t\t\t       (const_int 256)))\n+\t\t\t\t\t       (const_int MAX_BRANCH)))\n \t\t\t\t      (const_int 6)\n \t\t\t\t      (const_int 2)))])\n \n@@ -248,12 +264,12 @@\n \t\t      (label_ref (match_operand 1 \"\" \"\"))))]\n   \"\"\n   \"* return output_jump(GET_CODE (operands[0]), 1, get_attr_length(insn));\"\n-  [(set (attr \"length\") (if_then_else (ior (le (minus (match_dup 1)\n+  [(set (attr \"length\") (if_then_else (ior (lt (minus (match_dup 1)\n \t\t\t\t\t\t      (pc))\n-\t\t\t\t\t       (const_int -256))\n-\t\t\t\t\t   (ge (minus (match_dup 1)\n+\t\t\t\t\t       (const_int MIN_BRANCH))\n+\t\t\t\t\t   (gt (minus (match_dup 1)\n \t\t\t\t\t\t      (pc))\n-\t\t\t\t\t       (const_int 256)))\n+\t\t\t\t\t       (const_int MAX_BRANCH)))\n \t\t\t\t      (const_int 6)\n \t\t\t\t      (const_int 2)))])\n \f\n@@ -1296,12 +1312,12 @@\n     return \\\"br %l0\\\";\n  return \\\"jmp %l0\\\";\n }\"\n-  [(set (attr \"length\") (if_then_else (ior (le (minus (match_dup 0)\n+  [(set (attr \"length\") (if_then_else (ior (lt (minus (match_dup 0)\n \t\t\t\t\t\t      (pc))\n-\t\t\t\t\t       (const_int -256))\n-\t\t\t\t\t   (ge (minus (match_dup 0)\n+\t\t\t\t\t       (const_int MIN_BRANCH))\n+\t\t\t\t\t   (gt (minus (match_dup 0)\n \t\t\t\t\t\t      (pc))\n-\t\t\t\t\t       (const_int 256)))\n+\t\t\t\t\t       (const_int MAX_BRANCH)))\n \t\t\t\t      (const_int 4)\n \t\t\t\t      (const_int 2)))])\n "}]}