{"sha": "f644bd14253c5d5d2bf8c920cd30c2cc7048f037", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY0NGJkMTQyNTNjNWQ1ZDJiZjhjOTIwY2QzMGMyY2M3MDQ4ZjAzNw==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1997-10-07T21:43:02Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-10-07T21:43:02Z"}, "message": "integrate.c (save_for_inline_copying): Avoid undefined pointer operations.\n\n        * integrate.c (save_for_inline_copying): Avoid undefined pointer\n        operations.\n        (expand_inline_function): Likewise.\n\nFrom-SVN: r15866", "tree": {"sha": "e0734ccb148a2dc3b2c9b44e14d3458843e5e778", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0734ccb148a2dc3b2c9b44e14d3458843e5e778"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f644bd14253c5d5d2bf8c920cd30c2cc7048f037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f644bd14253c5d5d2bf8c920cd30c2cc7048f037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f644bd14253c5d5d2bf8c920cd30c2cc7048f037", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f644bd14253c5d5d2bf8c920cd30c2cc7048f037/comments", "author": null, "committer": null, "parents": [{"sha": "aa0c1401170ea57bdb67debe7763097d1f82bd86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa0c1401170ea57bdb67debe7763097d1f82bd86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa0c1401170ea57bdb67debe7763097d1f82bd86"}], "stats": {"total": 29, "additions": 11, "deletions": 18}, "files": [{"sha": "c33ab091f0832eda7ba64e6fb1fa36f7085a8841", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f644bd14253c5d5d2bf8c920cd30c2cc7048f037/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f644bd14253c5d5d2bf8c920cd30c2cc7048f037/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f644bd14253c5d5d2bf8c920cd30c2cc7048f037", "patch": "@@ -1,5 +1,9 @@\n Tue Oct  7 15:37:35 1997  Jeffrey A Law  (law@cygnus.com)\n \n+        * integrate.c (save_for_inline_copying): Avoid undefined pointer\n+        operations.\n+        (expand_inline_function): Likewise.\n+\n \t* dwarf2out.c (output_call_frame_info): Reinstate last change\n \tusing flag_debug_asm check instead of flag_verbose_asm.\n "}, {"sha": "aa3654ee80c515cffb39fa8887c6b2be94e2076e", "filename": "gcc/integrate.c", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f644bd14253c5d5d2bf8c920cd30c2cc7048f037/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f644bd14253c5d5d2bf8c920cd30c2cc7048f037/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=f644bd14253c5d5d2bf8c920cd30c2cc7048f037", "patch": "@@ -414,10 +414,6 @@ save_for_inline_copying (fndecl)\n   rtx first_nonparm_insn;\n   char *new, *new1;\n \n-  /* The pointer used to track the true location of the memory used\n-     for LABEL_MAP.  */\n-  rtx *real_label_map = 0;\n-\n   /* Make and emit a return-label if we have not already done so. \n      Do this before recording the bounds on label numbers.  */\n \n@@ -519,9 +515,7 @@ save_for_inline_copying (fndecl)\n   /* We used to use alloca here, but the size of what it would try to\n      allocate would occasionally cause it to exceed the stack limit and\n      cause unpredictable core dumps.  Some examples were > 2Mb in size.  */\n-  real_label_map\n-    = (rtx *) xmalloc ((max_labelno - min_labelno) * sizeof (rtx));\n-  label_map = real_label_map - min_labelno;\n+  label_map = (rtx *) xmalloc ((max_labelno) * sizeof (rtx));\n \n   for (i = min_labelno; i < max_labelno; i++)\n     label_map[i] = gen_label_rtx ();\n@@ -664,8 +658,8 @@ save_for_inline_copying (fndecl)\n \n   set_new_first_and_last_insn (first_insn, last_insn);\n \n-  if (real_label_map)\n-    free (real_label_map);\n+  if (label_map)\n+    free (label_map);\n }\n \n /* Return a copy of a chain of nodes, chained through the TREE_CHAIN field.\n@@ -1250,10 +1244,6 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n   rtvec arg_vector = ORIGINAL_ARG_VECTOR (header);\n   rtx static_chain_value = 0;\n \n-  /* The pointer used to track the true location of the memory used\n-     for MAP->LABEL_MAP.  */\n-  rtx *real_label_map = 0;\n-\n   /* Allow for equivalences of the pseudos we make for virtual fp and ap.  */\n   max_regno = MAX_REGNUM (header) + 3;\n   if (max_regno < FIRST_PSEUDO_REGISTER)\n@@ -1393,9 +1383,8 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n   /* We used to use alloca here, but the size of what it would try to\n      allocate would occasionally cause it to exceed the stack limit and\n      cause unpredictable core dumps.  */\n-  real_label_map\n-    = (rtx *) xmalloc ((max_labelno - min_labelno) * sizeof (rtx));\n-  map->label_map = real_label_map - min_labelno;\n+  label_map = (rtx *) xmalloc ((max_labelno) * sizeof (rtx));\n+  map->label_map = label_map;\n \n   map->insn_map = (rtx *) alloca (INSN_UID (header) * sizeof (rtx));\n   bzero ((char *) map->insn_map, INSN_UID (header) * sizeof (rtx));\n@@ -2044,8 +2033,8 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n     }\n \n   /* Make sure we free the things we explicitly allocated with xmalloc.  */\n-  if (real_label_map)\n-    free (real_label_map);\n+  if (label_map)\n+    free (label_map);\n \n   return target;\n }"}]}