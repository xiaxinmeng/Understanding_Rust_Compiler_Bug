{"sha": "8aaef6e0c9109dd291029f543042900660fae287", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFhZWY2ZTBjOTEwOWRkMjkxMDI5ZjU0MzA0MjkwMDY2MGZhZTI4Nw==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-12-03T12:06:23Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-12-03T12:06:23Z"}, "message": "cppmacro.c (funlike_invocation_p): Re-disable macros enabled by contexts drops AFTER argument pre-expansion...\n\n        * cppmacro.c (funlike_invocation_p): Re-disable macros enabled\n        by contexts drops AFTER argument pre-expansion, so that they\n        remain enabled during argument pre-expansion.\n        (_cpp_pop_context): Unconditionally re-enable a macro when\n        dropping a context level.\n\nFrom-SVN: r37971", "tree": {"sha": "859e06921d833c83e0f3252c95f0749efd56bcff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/859e06921d833c83e0f3252c95f0749efd56bcff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8aaef6e0c9109dd291029f543042900660fae287", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aaef6e0c9109dd291029f543042900660fae287", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8aaef6e0c9109dd291029f543042900660fae287", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aaef6e0c9109dd291029f543042900660fae287/comments", "author": null, "committer": null, "parents": [{"sha": "94a3d3b9c3b3dbc41385eab24645a76e76db3cb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94a3d3b9c3b3dbc41385eab24645a76e76db3cb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94a3d3b9c3b3dbc41385eab24645a76e76db3cb2"}], "stats": {"total": 35, "additions": 25, "deletions": 10}, "files": [{"sha": "fa79157520350c66b9c728dec9f85faf217a8dfc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aaef6e0c9109dd291029f543042900660fae287/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aaef6e0c9109dd291029f543042900660fae287/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8aaef6e0c9109dd291029f543042900660fae287", "patch": "@@ -1,3 +1,11 @@\n+2000-12-03  Neil Booth  <neilb@earthling.net>\n+\n+        * cppmacro.c (funlike_invocation_p): Re-disable macros enabled\n+        by contexts drops AFTER argument pre-expansion, so that they\n+        remain enabled during argument pre-expansion.\n+        (_cpp_pop_context): Unconditionally re-enable a macro when\n+        dropping a context level.\n+\n 2000-12-03  Manfred Hollstein  <manfredh@redhat.com>\n \n \t* arm/t-linux (MULTILIB_OPTIONS): Comment."}, {"sha": "0afb9d08c2a27f4a77ee6a1800e73753f8d63288", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aaef6e0c9109dd291029f543042900660fae287/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aaef6e0c9109dd291029f543042900660fae287/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=8aaef6e0c9109dd291029f543042900660fae287", "patch": "@@ -606,15 +606,15 @@ funlike_invocation_p (pfile, node, list)\n      const cpp_hashnode *node;\n      struct toklist *list;\n {\n-  cpp_context *orig_context;\n+  cpp_context *orig, *final;\n   cpp_token maybe_paren;\n   macro_arg *args = 0;\n   cpp_lexer_pos macro_pos;\n \n   macro_pos = pfile->lexer_pos;\n   pfile->state.parsing_args = 1;\n   pfile->state.prevent_expansion++;\n-  orig_context = pfile->context;\n+  orig = pfile->context;\n \n   cpp_start_lookahead (pfile);\n   cpp_get_token (pfile, &maybe_paren);\n@@ -628,7 +628,8 @@ funlike_invocation_p (pfile, node, list)\n \t\t node->name);\n \n   /* Restore original context.  */\n-  pfile->context = orig_context;\n+  final = pfile->context;\n+  pfile->context = orig;\n   pfile->state.prevent_expansion--;\n   pfile->state.parsing_args = 0;\n \n@@ -648,6 +649,13 @@ funlike_invocation_p (pfile, node, list)\n       free (args);\n     }\n \n+  /* Re-disable macros *after* pre-expansion.  */\n+  while (final != orig)\n+    {\n+      final = final->next;\n+      final->macro->disabled = 1;\n+    }\n+\n   return args != 0;\n }\n \n@@ -885,13 +893,12 @@ _cpp_pop_context (pfile)\n   cpp_context *context = pfile->context;\n \n   pfile->context = context->prev;\n-  /* Re-enable a macro and free resources when leaving its expansion.  */\n-  if (!pfile->state.parsing_args)\n-    {\n-      if (!pfile->context->prev)\n-\tunlock_pools (pfile);\n-      context->macro->disabled = 0;\n-    }\n+  if (!pfile->context->prev && !pfile->state.parsing_args)\n+    unlock_pools (pfile);\n+\n+  /* Re-enable a macro, temporarily if parsing_args, when leaving its\n+     expansion.  */\n+  context->macro->disabled = 0;\n }\n \n /* Eternal routine to get a token.  Also used nearly everywhere"}]}