{"sha": "bca63328817fdf5c02d50ce227de4ef2f1c5dbdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNhNjMzMjg4MTdmZGY1YzAyZDUwY2UyMjdkZTRlZjJmMWM1ZGJkZg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-01-07T22:24:44Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-01-07T22:24:44Z"}, "message": "re PR c/6024 (GCC fails to diagnose mismatch of enum types in prototype/function)\n\n\tPR c/6024\n\t* c-typeck.c (comptypes): Only treat enumerated types in the same\n\ttranslation unit as compatible with each other when they are the\n\tsame type.\n\t* doc/extend.texi: Update.\n\nf:\n\t* com.h (ffecom_gfrt_basictype): Correct return type.\n\ntestsuite:\n\t* gcc.dg/enum-compat-1.c: New test.\n\t* gcc.c-torture/execute/builtin-types-compatible-p.c: Update.\n\nFrom-SVN: r75521", "tree": {"sha": "758366d4443ad9fd7fd7a5e37a42e69d047dd67a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/758366d4443ad9fd7fd7a5e37a42e69d047dd67a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bca63328817fdf5c02d50ce227de4ef2f1c5dbdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bca63328817fdf5c02d50ce227de4ef2f1c5dbdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bca63328817fdf5c02d50ce227de4ef2f1c5dbdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bca63328817fdf5c02d50ce227de4ef2f1c5dbdf/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "158960ba7e2e8f5d4ad01e4ceb736bbbfd600e0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/158960ba7e2e8f5d4ad01e4ceb736bbbfd600e0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/158960ba7e2e8f5d4ad01e4ceb736bbbfd600e0e"}], "stats": {"total": 71, "additions": 62, "deletions": 9}, "files": [{"sha": "9ceffd95190b670284ad5da0b4b2cd08fdc8e2e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca63328817fdf5c02d50ce227de4ef2f1c5dbdf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca63328817fdf5c02d50ce227de4ef2f1c5dbdf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bca63328817fdf5c02d50ce227de4ef2f1c5dbdf", "patch": "@@ -1,3 +1,11 @@\n+2004-01-07  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR c/6024\n+\t* c-typeck.c (comptypes): Only treat enumerated types in the same\n+\ttranslation unit as compatible with each other when they are the\n+\tsame type.\n+\t* doc/extend.texi: Update.\n+\n 2004-01-07  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \tPR c/12165"}, {"sha": "6d18f7ef0988493c168aa1c01604045bd1954f6f", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca63328817fdf5c02d50ce227de4ef2f1c5dbdf/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca63328817fdf5c02d50ce227de4ef2f1c5dbdf/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=bca63328817fdf5c02d50ce227de4ef2f1c5dbdf", "patch": "@@ -474,12 +474,13 @@ comptypes (tree type1, tree type2, int flags)\n       && TYPE_DOMAIN (t2) != 0)\n     t2 = TYPE_DOMAIN (t2);\n \n-  /* Treat an enum type as the integer type of the same width and\n-     signedness.  */\n+  /* Enumerated types are compatible with integer types, but this is\n+     not transitive: two enumerated types in the same translation unit\n+     are compatible with each other only if they are the same type.  */\n \n-  if (TREE_CODE (t1) == ENUMERAL_TYPE)\n+  if (TREE_CODE (t1) == ENUMERAL_TYPE && TREE_CODE (t2) != ENUMERAL_TYPE)\n     t1 = c_common_type_for_size (TYPE_PRECISION (t1), TREE_UNSIGNED (t1));\n-  if (TREE_CODE (t2) == ENUMERAL_TYPE)\n+  else if (TREE_CODE (t2) == ENUMERAL_TYPE && TREE_CODE (t1) != ENUMERAL_TYPE)\n     t2 = c_common_type_for_size (TYPE_PRECISION (t2), TREE_UNSIGNED (t2));\n \n   if (t1 == t2)"}, {"sha": "e0361dff02523aeaa15edd7eae5587c18e2dc379", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca63328817fdf5c02d50ce227de4ef2f1c5dbdf/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca63328817fdf5c02d50ce227de4ef2f1c5dbdf/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=bca63328817fdf5c02d50ce227de4ef2f1c5dbdf", "patch": "@@ -5265,8 +5265,10 @@ similarity.  Consequently, @code{short *} is not similar to\n @code{short **}.  Furthermore, two types that are typedefed are\n considered compatible if their underlying types are compatible.\n \n-An @code{enum} type is considered to be compatible with another\n-@code{enum} type.  For example, @code{enum @{foo, bar@}} is similar to\n+An @code{enum} type is not considered to be compatible with another\n+@code{enum} type even if both are compatible with the same integer\n+type; this is what the C standard specifies.\n+For example, @code{enum @{foo, bar@}} is not similar to\n @code{enum @{hot, dog@}}.\n \n You would typically use this function in code whose execution varies"}, {"sha": "4ea7b862952c89f935154107ae05ba97f3c7312f", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca63328817fdf5c02d50ce227de4ef2f1c5dbdf/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca63328817fdf5c02d50ce227de4ef2f1c5dbdf/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=bca63328817fdf5c02d50ce227de4ef2f1c5dbdf", "patch": "@@ -1,3 +1,7 @@\n+2004-01-07  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* com.h (ffecom_gfrt_basictype): Correct return type.\n+\n 2003-12-29  Roger Sayle  <roger@eyesopen.com>\n \n \tPR fortran/12632"}, {"sha": "d23db6687a2f36c9037c81e180290655d8eb7a1b", "filename": "gcc/f/com.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca63328817fdf5c02d50ce227de4ef2f1c5dbdf/gcc%2Ff%2Fcom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca63328817fdf5c02d50ce227de4ef2f1c5dbdf/gcc%2Ff%2Fcom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.h?ref=bca63328817fdf5c02d50ce227de4ef2f1c5dbdf", "patch": "@@ -1,5 +1,5 @@\n /* com.h -- Public #include File (module.h template V1.0)\n-   Copyright (C) 1995, 1996, 1997, 2000, 2003\n+   Copyright (C) 1995, 1996, 1997, 2000, 2003, 2004\n    Free Software Foundation, Inc.\n    Contributed by James Craig Burley.\n \n@@ -228,7 +228,7 @@ void ffecom_finish_decl (tree decl, tree init, bool is_top_level);\n void ffecom_finish_progunit (void);\n tree ffecom_get_invented_identifier (const char *pattern, ...)\n   ATTRIBUTE_PRINTF_1;\n-ffeinfoKindtype ffecom_gfrt_basictype (ffecomGfrt ix);\n+ffeinfoBasictype ffecom_gfrt_basictype (ffecomGfrt ix);\n ffeinfoKindtype ffecom_gfrt_kindtype (ffecomGfrt ix);\n void ffecom_init_0 (void);\n void ffecom_init_2 (void);"}, {"sha": "a57afff92b8dcbf7e59315e1d99282031293f479", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca63328817fdf5c02d50ce227de4ef2f1c5dbdf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca63328817fdf5c02d50ce227de4ef2f1c5dbdf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bca63328817fdf5c02d50ce227de4ef2f1c5dbdf", "patch": "@@ -1,3 +1,9 @@\n+2004-01-07  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR c/6024\n+\t* gcc.dg/enum-compat-1.c: New test.\n+\t* gcc.c-torture/execute/builtin-types-compatible-p.c: Update.\n+\n 2004-01-07  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \tPR c/12165"}, {"sha": "a998ef776f7d422cbaad19eeaf341ccfd1a4c8ef", "filename": "gcc/testsuite/gcc.c-torture/execute/builtin-types-compatible-p.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca63328817fdf5c02d50ce227de4ef2f1c5dbdf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-types-compatible-p.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca63328817fdf5c02d50ce227de4ef2f1c5dbdf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-types-compatible-p.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-types-compatible-p.c?ref=bca63328817fdf5c02d50ce227de4ef2f1c5dbdf", "patch": "@@ -19,7 +19,6 @@ int main (void)\n \t&& __builtin_types_compatible_p (typeof (hot), int)\n \t&& __builtin_types_compatible_p (typeof (hot), typeof (laura))\n \t&& __builtin_types_compatible_p (int[5], int[])\n-\t&& __builtin_types_compatible_p (typeof (dingos), typeof (cranberry))\n \t&& __builtin_types_compatible_p (same1, same2)))\n     abort ();\n \n@@ -28,6 +27,7 @@ int main (void)\n       || __builtin_types_compatible_p (char *, const char *)\n       || __builtin_types_compatible_p (long double, double)\n       || __builtin_types_compatible_p (typeof (i), typeof (d))\n+      || __builtin_types_compatible_p (typeof (dingos), typeof (cranberry))\n       || __builtin_types_compatible_p (char, int)\n       || __builtin_types_compatible_p (char *, char **))\n     abort ();"}, {"sha": "04a6e758effb5bb7d2330d0d2a7c5ff68377a244", "filename": "gcc/testsuite/gcc.dg/enum-compat-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca63328817fdf5c02d50ce227de4ef2f1c5dbdf/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-compat-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca63328817fdf5c02d50ce227de4ef2f1c5dbdf/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-compat-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-compat-1.c?ref=bca63328817fdf5c02d50ce227de4ef2f1c5dbdf", "patch": "@@ -0,0 +1,32 @@\n+/* Test that enumerated types are only considered compatible when they\n+   are the same type.  PR c/6024.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk>, based on\n+   PR c/6024 from Richard Earnshaw <rearnsha@arm.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+/* Original test from PR c/6024.  */\n+enum e1 {a, b};\n+enum e2 {c, d};\n+\n+void f(enum e1); /* { dg-error \"prototype\" \"error at decl\" } */\n+\n+void f(x)\n+     enum e2 x;\n+{ /* { dg-error \"doesn't match prototype\" \"error at defn\" } */\n+  return;\n+}\n+\n+/* Other compatibility tests.  */\n+enum e3 { A };\n+enum e4 { B };\n+\n+enum e3 v3;\n+enum e4 *p = &v3; /* { dg-warning \"incompatible\" \"incompatible pointer\" } */\n+enum e3 *q = &v3;\n+\n+void g(enum e3); /* { dg-error \"declaration\" \"error at first decl\" } */\n+void g(enum e4); /* { dg-error \"conflicting types\" \"error at second decl\" } */\n+\n+void h(enum e3);\n+void h(enum e3);"}]}