{"sha": "ae8a08ff59d28b17489d5c454bc07bfb70f0dff9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU4YTA4ZmY1OWQyOGIxNzQ4OWQ1YzQ1NGJjMDdiZmI3MGYwZGZmOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-05-04T21:54:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-05-04T21:54:25Z"}, "message": "libstdc++: Fix broken link to SGI STL FAQ\n\nThe previous URL to an entry in the wayback machine now redirects to a\npage saying \"SGI.com Tech Archive Resources now retired\" so use an older\nentry from the archive.\n\n\t* doc/xml/faq.xml: Use working link for SGI STL FAQ.\n\t* doc/html/*: Regenerate.", "tree": {"sha": "8fc128bae8f2febeec54ced4e5a00d4424f07e74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fc128bae8f2febeec54ced4e5a00d4424f07e74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae8a08ff59d28b17489d5c454bc07bfb70f0dff9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae8a08ff59d28b17489d5c454bc07bfb70f0dff9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae8a08ff59d28b17489d5c454bc07bfb70f0dff9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae8a08ff59d28b17489d5c454bc07bfb70f0dff9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb27781b64162e1769df15e0c97e8d2145d2d10d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb27781b64162e1769df15e0c97e8d2145d2d10d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb27781b64162e1769df15e0c97e8d2145d2d10d"}], "stats": {"total": 427, "additions": 215, "deletions": 212}, "files": [{"sha": "a011ec5f45a870cd5335dabb9b76a438ab002580", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae8a08ff59d28b17489d5c454bc07bfb70f0dff9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae8a08ff59d28b17489d5c454bc07bfb70f0dff9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ae8a08ff59d28b17489d5c454bc07bfb70f0dff9", "patch": "@@ -1,5 +1,8 @@\n 2020-05-04  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* doc/xml/faq.xml: Use working link for SGI STL FAQ.\n+\t* doc/html/*: Regenerate.\n+\n \tPR libstdc++/94906\n \t* src/c++17/memory_resource.cc\n \t(monotonic_buffer_resource::_Chunk::release): Use size_t for shift"}, {"sha": "18407225d7aab15bd56676eb686ea1c88422671b", "filename": "libstdc++-v3/doc/html/faq.html", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae8a08ff59d28b17489d5c454bc07bfb70f0dff9/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Ffaq.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae8a08ff59d28b17489d5c454bc07bfb70f0dff9/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Ffaq.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Ffaq.html?ref=ae8a08ff59d28b17489d5c454bc07bfb70f0dff9", "patch": "@@ -194,7 +194,7 @@\n     information is available on the homepage (including how to browse\n     the list archives); to send a message to the list,\n     use <code class=\"email\">&lt;<a class=\"email\" href=\"mailto:libstdc++@gcc.gnu.org\">libstdc++@gcc.gnu.org</a>&gt;</code>.\n-    </p><p> \n+    </p><p>\n     If you have a question that you think should be included\n     here, or if you have a question <span class=\"emphasis\"><em>about</em></span> a question/answer\n     here, please send email to the libstdc++ mailing list, as above.\n@@ -246,8 +246,8 @@\n     development tools. It may be necessary to install extra\n     development packages to get the headers, or the documentation, or\n     the source: please consult your vendor for details.\n-    </p><p> \n-    To build and install from the GNU GCC sources, please consult the \n+    </p><p>\n+    To build and install from the GNU GCC sources, please consult the\n     <a class=\"link\" href=\"manual/setup.html\" title=\"Chapter\u00a02.\u00a0Setup\">setup\n     documentation</a> for detailed\n     instructions. You may wish to browse those files ahead\n@@ -268,7 +268,7 @@\n     </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-how_to_test\"></a></td><td align=\"left\" valign=\"top\"><p>\n     Libstdc++ comes with its own validation testsuite, which includes\n     conformance testing, regression testing, ABI testing, and\n-    performance testing. Please consult the \n+    performance testing. Please consult the\n     <a class=\"link\" href=\"http://gcc.gnu.org/install/test.html\" target=\"_top\">testing\n     documentation</a> for GCC and\n     <a class=\"link\" href=\"manual/test.html\" title=\"Testing\">Testing</a> in the libstdc++\n@@ -424,12 +424,12 @@\n     </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-solaris_long_long\"></a></td><td align=\"left\" valign=\"top\"><div class=\"note\" style=\"margin-left: 0.5in; margin-right: 0.5in;\"><h3 class=\"title\">Note</h3><p>This answer is old and probably no longer be relevant.</p></div><p>\n     By default we try to support the C99 <span class=\"type\">long long</span> type.\n     This requires that certain functions from your C library be present.\n-    </p><p> \n+    </p><p>\n     Up through release 3.0.2 the platform-specific tests performed by\n     libstdc++ were too general, resulting in a conservative approach\n     to enabling the <span class=\"type\">long long</span> code paths. The most\n     commonly reported platform affected was Solaris.\n-    </p><p> \n+    </p><p>\n     This has been fixed for libstdc++ releases greater than 3.0.3.\n     </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.predefined\"></a><a id=\"q-predefined\"></a><p><strong>4.3.</strong></p></td><td align=\"left\" valign=\"top\"><p>\n       <code class=\"constant\">_XOPEN_SOURCE</code> and <code class=\"constant\">_GNU_SOURCE</code> are always defined?\n@@ -484,7 +484,7 @@\n     and later.  A patch went in just after the 3.3 release to\n     make mips* use the generic implementation instead.  You can also\n     configure for mipsel-elf as a workaround.\n-    </p><p>    \n+    </p><p>\n     The mips*-*-linux* port continues to use the MIPS II routines, and more\n     work in this area is expected.\n     </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.linux_glibc\"></a><a id=\"q-linux_glibc\"></a><p><strong>4.7.</strong></p></td><td align=\"left\" valign=\"top\"><p>\n@@ -510,7 +510,7 @@\n     enable <span class=\"type\">wchar_t</span> and C++ library structures\n     like <code class=\"classname\">wstring</code> were present. This impacted Solaris,\n     Darwin, and BSD variants, and is fixed in libstdc++ versions post 4.1.0.\n-    </p><p> \n+    </p><p>\n     </p></td></tr><tr class=\"toc\"><td align=\"left\" valign=\"top\" colspan=\"2\"><dl><dt>5.1. <a href=\"faq.html#faq.what_works\">\n       What works already?\n     </a></dt><dt>5.2. <a href=\"faq.html#faq.standard_bugs\">\n@@ -526,8 +526,8 @@\n     platforms. Also dependent on the underlying platform is support\n     for <span class=\"type\">wchar_t</span> and <span class=\"type\">long long</span> specializations,\n     and details of thread support.\n-    </p><p>    \n-    Long answer: See the implementation status pages for \n+    </p><p>\n+    Long answer: See the implementation status pages for\n     <a class=\"link\" href=\"manual/status.html#status.iso.1998\" title=\"C++ 1998/2003\">C++98</a>,\n     <a class=\"link\" href=\"manual/status.html#status.iso.tr1\" title=\"C++ TR1\">TR1</a>,\n     <a class=\"link\" href=\"manual/status.html#status.iso.2011\" title=\"C++ 2011\">C++11</a>,\n@@ -536,7 +536,7 @@\n     </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.standard_bugs\"></a><a id=\"q-standard_bugs\"></a><p><strong>5.2.</strong></p></td><td align=\"left\" valign=\"top\"><p>\n       Bugs in the ISO C++ language or library specification\n     </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-standard_bugs\"></a></td><td align=\"left\" valign=\"top\"><p>\n-    Unfortunately, there are some. \n+    Unfortunately, there are some.\n     </p><p>\n     For those people who are not part of the ISO Library Group\n     (i.e., nearly all of us needing to read this page in the first\n@@ -560,7 +560,7 @@\n     or an older version of the GNU compilers. Third, you can find more\n     information on the libstdc++ and the GCC mailing lists: search\n     these lists with terms describing your issue.\n-    </p><p> \n+    </p><p>\n     Before reporting a bug, please examine the\n     <a class=\"link\" href=\"https://gcc.gnu.org/bugs/\" target=\"_top\">bugs database</a>, with the\n     component set to <span class=\"quote\">\u201c<span class=\"quote\">c++</span>\u201d</span>.\n@@ -813,7 +813,7 @@\n     and <a class=\"link\" href=\"manual/backwards.html\" title=\"Backwards Compatibility\">backwards\n     compatibility</a> documentation.\n     </p><p>\n-    The <a class=\"link\" href=\"https://web.archive.org/web/20171225062613/http://www.sgi.com/tech/stl/FAQ.html\" target=\"_top\">FAQ</a>\n+    The <a class=\"link\" href=\"https://web.archive.org/web/20171104092813/http://www.sgi.com/tech/stl/FAQ.html\" target=\"_top\">FAQ</a>\n     for SGI's STL is still recommended reading.\n     </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.extensions_and_backwards_compat\"></a><a id=\"q-extensions_and_backwards_compat\"></a><p><strong>7.4.</strong></p></td><td align=\"left\" valign=\"top\"><p>\n       Extensions and Backward Compatibility"}, {"sha": "a16fddd613601ef44d646ed3d2ad124239e348f9", "filename": "libstdc++-v3/doc/html/manual/status.html", "status": "modified", "additions": 140, "deletions": 140, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae8a08ff59d28b17489d5c454bc07bfb70f0dff9/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae8a08ff59d28b17489d5c454bc07bfb70f0dff9/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html?ref=ae8a08ff59d28b17489d5c454bc07bfb70f0dff9", "patch": "@@ -1107,435 +1107,435 @@\n Feature-testing recommendations for C++</a> (where applicable)\n or any notes about the implementation.\n </p><div class=\"table\"><a id=\"table.cxx20_features\"></a><p class=\"title\"><strong>Table\u00a01.8.\u00a0C++ 2020 Library Features</strong></p><div class=\"table-contents\"><table class=\"table\" summary=\"C++ 2020 Library Features\" border=\"1\"><colgroup><col align=\"left\" class=\"c1\" /><col align=\"left\" class=\"c2\" /><col align=\"left\" class=\"c3\" /><col align=\"left\" class=\"c4\" /></colgroup><thead><tr><th align=\"left\">Library Feature</th><th align=\"left\">Proposal</th><th align=\"left\">Status</th><th align=\"left\">SD-6 Feature Test / Notes</th></tr></thead><tbody><tr><td colspan=\"4\" align=\"left\">\n-\t\t\t\t<span class=\"bold\"><strong>Compile-time programming</strong></span>\n+        <span class=\"bold\"><strong>Compile-time programming</strong></span>\n       </td></tr><tr><td align=\"left\">  Add constexpr modifiers to functions in <code class=\"code\">&lt;algorithm&gt;</code> and <code class=\"code\">&lt;utility&gt;</code> Headers </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0202r3.html\" target=\"_top\">\n-\t\t\t\tP0202R3 </a>\n+        P0202R3 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_constexpr_algorithms &gt;= 201703L</code> </td></tr><tr><td align=\"left\">  Constexpr for <code class=\"code\">swap</code> and swap related functions </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0879r0.html\" target=\"_top\">\n-\t\t\t\tP0879R0 </a>\n+        P0879R0 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_constexpr_algorithms &gt;= 201806L</code> </td></tr><tr><td align=\"left\">  Constexpr for <code class=\"code\">std::complex</code> </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0415r1.html\" target=\"_top\">\n-\t\t\t\tP0415R1 </a>\n+        P0415R1 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_constexpr_complex &gt;= 201711L</code> (since 9.4, see Note 1) </td></tr><tr><td align=\"left\">  P0595R2 <code class=\"code\">std::is_constant_evaluated()</code> </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0595r2.html\" target=\"_top\">\n-\t\t\t\tP0595R2 </a>\n+        P0595R2 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_is_constant_evaluated &gt;= 201811L</code> </td></tr><tr><td align=\"left\">  More constexpr containers </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0784r7.html\" target=\"_top\">\n-\t\t\t\tP0784R7 </a>\n+        P0784R7 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_constexpr_dynamic_alloc &gt;= 201907L</code> </td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">  Making <code class=\"code\">std::string</code> constexpr </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0980r1.pdf\" target=\"_top\">\n-\t\t\t\tP0980R1 </a>\n+        P0980R1 </a>\n       </td><td align=\"left\">\u00a0</td><td align=\"left\"> <code class=\"code\">__cpp_lib_constexpr_string &gt;= 201907L</code> </td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">  Making <code class=\"code\">std::vector</code> constexpr </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1004r2.pdf\" target=\"_top\">\n-\t\t\t\tP1004R2 </a>\n+        P1004R2 </a>\n       </td><td align=\"left\">\u00a0</td><td align=\"left\"> <code class=\"code\">__cpp_lib_constexpr_vector &gt;= 201907L</code> </td></tr><tr><td align=\"left\">  Constexpr in <code class=\"code\">std::pointer_traits</code> </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1006r1.pdf\" target=\"_top\">\n-\t\t\t\tP1006R1 </a>\n+        P1006R1 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_constexpr_memory &gt;= 201811L</code> (since 9.4, see Note 1) </td></tr><tr><td align=\"left\">  constexpr for <code class=\"code\">&lt;numeric&gt;</code> algorithms </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1645r1.html\" target=\"_top\">\n-\t\t\t\tP1645R1 </a>\n+        P1645R1 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_constexpr_numeric &gt;= 201911L</code> </td></tr><tr><td align=\"left\">  Constexpr iterator requirements </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0858r0.html\" target=\"_top\">\n-\t\t\t\tP0858R0 </a>\n+        P0858R0 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\">\n-\t\t\t  <div class=\"informaltable\"><table class=\"informaltable\" border=\"0\"><colgroup><col /></colgroup><tbody><tr><td> <code class=\"code\">__cpp_lib_array_constexpr &gt;= 201803L</code> </td></tr><tr><td> <code class=\"code\">__cpp_lib_string_view &gt;= 201803L</code> </td></tr><tr><td> (both since 9.4, see Note 1) </td></tr></tbody></table></div>\n-\t\t\t</td></tr><tr><td align=\"left\">  <code class=\"code\">constexpr</code> comparison operators for <code class=\"code\">std::array</code> </td><td align=\"left\">\n+        <div class=\"informaltable\"><table class=\"informaltable\" border=\"0\"><colgroup><col /></colgroup><tbody><tr><td> <code class=\"code\">__cpp_lib_array_constexpr &gt;= 201803L</code> </td></tr><tr><td> <code class=\"code\">__cpp_lib_string_view &gt;= 201803L</code> </td></tr><tr><td> (both since 9.4, see Note 1) </td></tr></tbody></table></div>\n+      </td></tr><tr><td align=\"left\">  <code class=\"code\">constexpr</code> comparison operators for <code class=\"code\">std::array</code> </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1023r0.pdf\" target=\"_top\">\n-\t\t\t\tP1023R0 </a>\n+        P1023R0 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_array_constexpr &gt;= 201806</code> </td></tr><tr><td align=\"left\">  Misc constexpr bits </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1032r1.html\" target=\"_top\">\n-\t\t\t\tP1032R1 </a>\n+        P1032R1 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\">\n-\t\t\t  <div class=\"informaltable\"><table class=\"informaltable\" border=\"0\"><colgroup><col /></colgroup><tbody><tr><td> <code class=\"code\">__cpp_lib_array_constexpr &gt;= 201811L</code> </td></tr><tr><td> <code class=\"code\">__cpp_lib_constexpr_functional &gt;= 201811L</code> </td></tr><tr><td> <code class=\"code\">__cpp_lib_constexpr_iterator &gt;= 201811L</code> </td></tr><tr><td> <code class=\"code\">__cpp_lib_constexpr_string_view &gt;= 201811L</code> </td></tr><tr><td> <code class=\"code\">__cpp_lib_constexpr_tuple &gt;= 201811L</code> </td></tr><tr><td> <code class=\"code\">__cpp_lib_constexpr_utility &gt;= 201811L</code> </td></tr></tbody></table></div>\n-\t\t\t</td></tr><tr><td align=\"left\">  <code class=\"code\">constexpr <span class=\"emphasis\"><em>INVOKE</em></span></code> </td><td align=\"left\">\n+        <div class=\"informaltable\"><table class=\"informaltable\" border=\"0\"><colgroup><col /></colgroup><tbody><tr><td> <code class=\"code\">__cpp_lib_array_constexpr &gt;= 201811L</code> </td></tr><tr><td> <code class=\"code\">__cpp_lib_constexpr_functional &gt;= 201811L</code> </td></tr><tr><td> <code class=\"code\">__cpp_lib_constexpr_iterator &gt;= 201811L</code> </td></tr><tr><td> <code class=\"code\">__cpp_lib_constexpr_string_view &gt;= 201811L</code> </td></tr><tr><td> <code class=\"code\">__cpp_lib_constexpr_tuple &gt;= 201811L</code> </td></tr><tr><td> <code class=\"code\">__cpp_lib_constexpr_utility &gt;= 201811L</code> </td></tr></tbody></table></div>\n+      </td></tr><tr><td align=\"left\">  <code class=\"code\">constexpr <span class=\"emphasis\"><em>INVOKE</em></span></code> </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1065r2.html\" target=\"_top\">\n-\t\t\t\tP1065R2 </a>\n+        P1065R2 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_constexpr_functional &gt;= 201907L</code> </td></tr><tr><td align=\"left\">  Transformation Trait <code class=\"code\">remove_cvref</code> </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0550r2.pdf\" target=\"_top\">\n-\t\t\t\tP0550R2 </a>\n+        P0550R2 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_remove_cvref &gt;= 201711L</code> (since 9.4, see Note 1) </td></tr><tr><td align=\"left\">  Implicit conversion traits and utility functions </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0758r1.html\" target=\"_top\">\n-\t\t\t\tP0758R1 </a>\n+        P0758R1 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_is_nothrow_convertible &gt;= 201806L</code>  (since 9.4, see Note 1) </td></tr><tr><td align=\"left\">  The <code class=\"code\">identity</code> metafunction </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0887r1.pdf\" target=\"_top\">\n-\t\t\t\tP0887R1 </a>\n+        P0887R1 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_type_identity &gt;= 201806L</code> (since 9.4, see Note 1) </td></tr><tr><td align=\"left\">  <code class=\"code\">unwrap_ref_decay</code> and <code class=\"code\">unwrap_reference</code> </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0318r1.pdf\" target=\"_top\">\n-\t\t\t\tP0318R1 </a>\n+        P0318R1 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_unwrap_ref &gt;= 201811L</code> (since 9.4, see Note 1) </td></tr><tr bgcolor=\"#B0B0B0\"><td align=\"left\">  Improving Completeness Requirements for Type Traits </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1285r0.pdf\" target=\"_top\">\n-\t\t\t\tP1285R0 </a>\n+        P1285R0 </a>\n       </td><td align=\"center\"> Partial </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">  Missing feature test macros </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1353r0.html\" target=\"_top\">\n-\t\t\t\tP1353R0 </a>\n+        P1353R0 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\"> Making std::underlying_type SFINAE-friendly </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0340r3.html\" target=\"_top\">\n-\t\t\t\tP0340R3 </a>\n+        P0340R3 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\"> Traits for [Un]bounded Arrays </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1357r1.pdf\" target=\"_top\">\n-\t\t\t\tP1357R1 </a>\n+        P1357R1 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_bounded_array_traits &gt;= 201902L</code> </td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\"> Layout-compatibility and pointer-interconvertibility traits </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0466r5.pdf\" target=\"_top\">\n-\t\t\t\tP0466R5 </a>\n+        P0466R5 </a>\n       </td><td align=\"center\"> </td><td align=\"left\">\n-\t\t\t  <div class=\"informaltable\"><table class=\"informaltable\" border=\"0\"><colgroup><col /></colgroup><tbody><tr><td> <code class=\"code\">__cpp_lib_is_layout_compatible &gt;= 201907L</code> </td></tr><tr><td> <code class=\"code\">__cpp_lib_is_pointer_interconvertible &gt;= 201907L</code> </td></tr></tbody></table></div>\n+        <div class=\"informaltable\"><table class=\"informaltable\" border=\"0\"><colgroup><col /></colgroup><tbody><tr><td> <code class=\"code\">__cpp_lib_is_layout_compatible &gt;= 201907L</code> </td></tr><tr><td> <code class=\"code\">__cpp_lib_is_pointer_interconvertible &gt;= 201907L</code> </td></tr></tbody></table></div>\n       </td></tr><tr><td align=\"left\">  Integrating feature-test macros into the C++ WD </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0941r2.html\" target=\"_top\">\n-\t\t\t\tP0941R2 </a>\n+        P0941R2 </a>\n       </td><td align=\"center\"> 5.1 </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">  <code class=\"code\">&lt;version&gt;</code> </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0754r2.pdf\" target=\"_top\">\n-\t\t\t\tP0754R2 </a>\n+        P0754R2 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\"> <code class=\"code\">__has_include(&lt;version&gt;)</code> </td></tr><tr><td colspan=\"4\" align=\"left\">\n-\t\t\t\t<span class=\"bold\"><strong>Synchronization</strong></span>\n+        <span class=\"bold\"><strong>Synchronization</strong></span>\n       </td></tr><tr><td align=\"left\">  Atomic Ref </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0019r8.html\" target=\"_top\">\n-\t\t\t\tP0019R8 </a>\n+        P0019R8 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_atomic_ref &gt;= 201806L</code> </td></tr><tr><td align=\"left\">  Floating Point Atomic </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0020r6.html\" target=\"_top\">\n-\t\t\t\tP0020R6 </a>\n+        P0020R6 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_atomic_float &gt;= 201711L</code> </td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">  C++ Synchronized Buffered Ostream </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0053r7.pdf\" target=\"_top\">\n-\t\t\t\tP0053R7 </a>\n+        P0053R7 </a>\n       </td><td align=\"center\"> </td><td align=\"left\"> <code class=\"code\">__cpp_lib_syncbuf &gt;= 201711L</code> </td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">  Manipulators for C++ Synchronized Buffered Ostream </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0753r2.pdf\" target=\"_top\">\n-\t\t\t\tP0753R2 </a>\n+        P0753R2 </a>\n       </td><td align=\"center\"> </td><td align=\"left\"> <code class=\"code\">__cpp_lib_syncbuf &gt;= 201803L</code> </td></tr><tr><td align=\"left\">  Make <code class=\"code\">std::memory_order</code> a scoped enumeration </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0439r0.html\" target=\"_top\">\n-\t\t\t\tP0439R0 </a>\n+        P0439R0 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\">\u00a0</td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">  The Curious Case of Padding Bits, Featuring Atomic Compare-and-Exchange </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0528r3.html\" target=\"_top\">\n-\t\t\t\tP0528R3 </a>\n+        P0528R3 </a>\n       </td><td align=\"center\"> </td><td align=\"left\">\u00a0</td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">  Atomic <code class=\"code\">shared_ptr</code> </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0718r2.html\" target=\"_top\">\n-\t\t\t\tP0718R2 </a>\n+        P0718R2 </a>\n       </td><td align=\"center\"> </td><td align=\"left\"> <code class=\"code\"> __cpp_lib_atomic_shared_ptr &gt;= 201711L</code> </td></tr><tr><td align=\"left\"> std::stop_token and std::jthread </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0660r10.pdf\" target=\"_top\">\n-\t\t\t\tP0660R10 </a>\n+        P0660R10 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_jthread &gt;= 201907L</code> </td></tr><tr><td align=\"left\"> Rename <code class=\"code\">condition_variable_any</code> interruptible wait methods </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1869r1.html\" target=\"_top\">\n-\t\t\t\tP1869R1 </a>\n+        P1869R1 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_jthread &gt;= 201911L</code> </td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\"> Atomic waiting and notifying, std::semaphore, std::latch and std::barrier </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1135r6.html\" target=\"_top\">\n-\t\t\t\tP1135R6 </a>\n+        P1135R6 </a>\n       </td><td align=\"center\"> </td><td align=\"left\">\n-\t\t\t  <div class=\"informaltable\"><table class=\"informaltable\" border=\"0\"><colgroup><col /></colgroup><tbody><tr><td> <code class=\"code\">__cpp_lib_atomic_lock_free_type_aliases &gt;= 201907L</code> </td></tr><tr><td> <code class=\"code\">__cpp_lib_atomic_flag_test &gt;= 201907L</code> </td></tr><tr><td> <code class=\"code\">__cpp_lib_atomic_wait &gt;= 201907L</code> </td></tr><tr><td> <code class=\"code\">__cpp_lib_semaphore &gt;= 201907L</code> </td></tr><tr><td> <code class=\"code\">__cpp_lib_latch &gt;= 201907L</code> </td></tr><tr><td> <code class=\"code\">__cpp_lib_barrier &gt;= 201907L</code> </td></tr></tbody></table></div>\n+        <div class=\"informaltable\"><table class=\"informaltable\" border=\"0\"><colgroup><col /></colgroup><tbody><tr><td> <code class=\"code\">__cpp_lib_atomic_lock_free_type_aliases &gt;= 201907L</code> </td></tr><tr><td> <code class=\"code\">__cpp_lib_atomic_flag_test &gt;= 201907L</code> </td></tr><tr><td> <code class=\"code\">__cpp_lib_atomic_wait &gt;= 201907L</code> </td></tr><tr><td> <code class=\"code\">__cpp_lib_semaphore &gt;= 201907L</code> </td></tr><tr><td> <code class=\"code\">__cpp_lib_latch &gt;= 201907L</code> </td></tr><tr><td> <code class=\"code\">__cpp_lib_barrier &gt;= 201907L</code> </td></tr></tbody></table></div>\n       </td></tr><tr><td align=\"left\"> Fixing Atomic Initialization </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0883r2.pdf\" target=\"_top\">\n-\t\t\t\tP0883R2 </a>\n+        P0883R2 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_atomic_value_initialization &gt;= 201911L</code> </td></tr><tr><td colspan=\"4\" align=\"left\">\n-\t\t\t\t<span class=\"bold\"><strong>Ranges and Concepts</strong></span>\n+        <span class=\"bold\"><strong>Ranges and Concepts</strong></span>\n       </td></tr><tr><td align=\"left\">  Standard Library Concepts </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0898r3.pdf\" target=\"_top\">\n-\t\t\t\tP0898R3 </a>\n+        P0898R3 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_concepts &gt;= 201806L</code> </td></tr><tr><td align=\"left\">  Rename concepts to standard_case for C++20, while we still can </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1754r1.pdf\" target=\"_top\">\n-\t\t\t\tP1754R1 </a>\n+        P1754R1 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_concepts &gt;= 201907L</code> </td></tr><tr><td align=\"left\">  Wording for <span class=\"emphasis\"><em><code class=\"code\">boolean-testable</code></em></span> </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1964r2.html\" target=\"_top\">\n-\t\t\t\tP1964R2 </a>\n+        P1964R2 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_concepts &gt;= 202002L</code> </td></tr><tr><td align=\"left\">  The One Ranges Proposal </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0896r4.pdf\" target=\"_top\">\n-\t\t\t\tP0896R4 </a>\n+        P0896R4 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_ranges &gt;= 201811L</code> </td></tr><tr><td align=\"left\">  Input Range Adaptors </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1035r7.pdf\" target=\"_top\">\n-\t\t\t\tP1035R7 </a>\n+        P1035R7 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_ranges &gt;= 201907L</code> </td></tr><tr><td align=\"left\">  <code class=\"code\">ranges</code> compare algorithm are over-constrained </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1716r3.html\" target=\"_top\">\n-\t\t\t\tP1716R3 </a>\n+        P1716R3 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_ranges &gt;= 201911L</code> </td></tr><tr><td align=\"left\">  Remove CommonReference requirement from StrictWeakOrdering (a.k.a Fixing Relations) </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1248r1.html\" target=\"_top\">\n-\t\t\t\tP1248R1 </a>\n+        P1248R1 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\"> Ranges Design Cleanup </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1252r2.pdf\" target=\"_top\">\n-\t\t\t\tP1252R2 </a>\n+        P1252R2 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\">\u00a0</td></tr><tr><td colspan=\"4\" align=\"left\">\n-\t\t\t\t<span class=\"bold\"><strong>Time, dates, calendars, time zones</strong></span>\n+        <span class=\"bold\"><strong>Time, dates, calendars, time zones</strong></span>\n       </td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">  Extending chrono to Calendars and Time Zones </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0355r7.html\" target=\"_top\">\n-\t\t\t\tP0355R7 </a>\n+        P0355R7 </a>\n       </td><td align=\"left\">\u00a0</td><td align=\"left\"> <code class=\"code\">__cpp_lib_chrono &gt;= 201803L</code> </td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\"> Miscellaneous minor fixes for chrono </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1466r3.html\" target=\"_top\">\n-\t\t\t\tP1466R3 </a>\n+        P1466R3 </a>\n       </td><td align=\"left\">\u00a0</td><td align=\"left\"> <code class=\"code\">__cpp_lib_chrono &gt;= 201907L</code> </td></tr><tr><td align=\"left\">  <code class=\"code\">&lt;chrono&gt;</code> <code class=\"code\">zero()</code>, <code class=\"code\">min()</code>, and <code class=\"code\">max()</code> should be <code class=\"code\">noexcept</code> </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0972r0.pdf\" target=\"_top\">\n-\t\t\t\tP0972R0 </a>\n+        P0972R0 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\">\u00a0</td></tr><tr><td colspan=\"4\" align=\"left\">\n-\t\t\t\t<span class=\"bold\"><strong>Three-way comparison</strong></span>\n+        <span class=\"bold\"><strong>Three-way comparison</strong></span>\n       </td></tr><tr><td align=\"left\">  Library Support for the Spaceship (Comparison) Operator </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0768r1.pdf\" target=\"_top\">\n-\t\t\t\tP0768R1 </a>\n+        P0768R1 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_three_way_comparison &gt;= 201711L</code> </td></tr><tr><td align=\"left\">  Symmetry for spaceship </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0905r1.html\" target=\"_top\">\n-\t\t\t\tP0905R1 </a>\n+        P0905R1 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\"> Adding &lt;=&gt; to the standard library </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1614r2.html\" target=\"_top\">\n-\t\t\t\tP1614R2 </a>\n+        P1614R2 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\">\n         <code class=\"code\">__cpp_lib_three_way_comparison &gt;= 201907L</code>\n       </td></tr><tr><td colspan=\"4\" align=\"left\">\n-\t\t\t\t<span class=\"bold\"><strong>Strings and text</strong></span>\n+        <span class=\"bold\"><strong>Strings and text</strong></span>\n       </td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">  <code class=\"code\">string::reserve</code> Should Not Shrink </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0966r1.html\" target=\"_top\">\n-\t\t\t\tP0966R1 </a>\n+        P0966R1 </a>\n       </td><td align=\"center\"> </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">  <code class=\"code\">char8_t</code>: A type for UTF-8 characters and strings </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0482r6.html\" target=\"_top\">\n-\t\t\t\tP0482R6 </a>\n+        P0482R6 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_char8_t &gt;= 201811L</code> </td></tr><tr><td align=\"left\">  <code class=\"code\">char8_t</code> backward compatibility remediation </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1423r3.html\" target=\"_top\">\n-\t\t\t\tP1423R3 </a>\n+        P1423R3 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_char8_t &gt;= 201907L</code> </td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\"> Text formatting </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0645r10.html\" target=\"_top\">\n-\t\t\t\tP0645R10 </a>\n+        P0645R10 </a>\n       </td><td align=\"center\"> </td><td align=\"left\">\n         <code class=\"code\">__cpp_lib_format &gt;= 201907L</code>\n       </td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\"> Integration of chrono with text formatting </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1361r2.pdf\" target=\"_top\">\n-\t\t\t\tP1361R2 </a>\n+        P1361R2 </a>\n       </td><td align=\"center\"> </td><td align=\"left\">\n         <code class=\"code\">__cpp_lib_format &gt;= 201907L</code>\n       </td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\"> Printf corner cases in <code class=\"code\">std::format</code> </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1652r1.html\" target=\"_top\">\n-\t\t\t\tP1652R1 </a>\n+        P1652R1 </a>\n       </td><td align=\"center\"> </td><td align=\"left\">\n         <code class=\"code\">__cpp_lib_format &gt;= 201907L</code>\n       </td></tr><tr><td align=\"left\">  String Prefix and Suffix Checking </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0457r2.html\" target=\"_top\">\n-\t\t\t\tP0457R2 </a>\n+        P0457R2 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_starts_ends_with &gt;= 201711L</code> (since 9.4, see Note 1) </td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">  Update The Reference To The Unicode Standard </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1025r1.html\" target=\"_top\">\n-\t\t\t\tP1025R1 </a>\n+        P1025R1 </a>\n       </td><td align=\"center\"> </td><td align=\"left\">\u00a0</td></tr><tr><td colspan=\"4\" align=\"left\">\n-\t\t\t\t<span class=\"bold\"><strong>Containers</strong></span>\n+        <span class=\"bold\"><strong>Containers</strong></span>\n       </td></tr><tr><td align=\"left\"> span: bounds-safe views for sequences of objects </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0122r7.pdf\" target=\"_top\">\n-\t\t\t\tP0122R7 </a>\n+        P0122R7 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_span &gt;= 201803L</code> </td></tr><tr><td align=\"left\">\n         Usability Enhancements for <code class=\"classname\">std::span</code>\n       </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1024r3.pdf\" target=\"_top\">\n-\t\t\t\tP1024R3 </a>\n+        P1024R3 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_span &gt;= 201902L</code> </td></tr><tr><td align=\"left\">  Should Span be Regular? </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1085r2.md\" target=\"_top\">\n-\t\t\t\tP1085R2 </a>\n+        P1085R2 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\"> Fixed-size <code class=\"code\">&lt;span&gt;</code> construction from dynamic range </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1976r2.html\" target=\"_top\">\n-\t\t\t\tP1976R2 </a>\n+        P1976R2 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_span &gt;= 202002L</code> </td></tr><tr><td align=\"left\"> <code class=\"code\">std::to_array</code> </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0325r4.html\" target=\"_top\">\n-\t\t\t\tP0325R4 </a>\n+        P0325R4 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_to_array &gt;= 201907L</code> </td></tr><tr><td align=\"left\">  Checking for Existence of an Element in Associative Containers </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0458r2.html\" target=\"_top\">\n-\t\t\t\tP0458R2 </a>\n+        P0458R2 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\">\u00a0</td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">  Comparing Unordered Containers </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0809r0.pdf\" target=\"_top\">\n-\t\t\t\tP0809R0 </a>\n+        P0809R0 </a>\n       </td><td align=\"center\"> </td><td align=\"left\">\u00a0</td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">  Heterogeneous lookup for unordered containers </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0919r3.html\" target=\"_top\">\n-\t\t\t\tP0919R3 </a>\n+        P0919R3 </a>\n       </td><td align=\"center\"> </td><td align=\"left\"> <code class=\"code\">__cpp_lib_generic_unordered_lookup &gt;= 201811</code> </td></tr><tr><td align=\"left\">  Adopt Consistent Container Erasure from Library Fundamentals 2 for C++20 </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1209r0.html\" target=\"_top\">\n-\t\t\t\tP1209R0 </a>\n+        P1209R0 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_erase_if &gt;= 201811L</code> </td></tr><tr><td align=\"left\">  Improving the Return Value of Erase-Like Algorithms </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0646r1.pdf\" target=\"_top\">\n-\t\t\t\tP0646R1 </a>\n+        P0646R1 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_list_remove_return_type &gt;= 201806L</code> </td></tr><tr><td align=\"left\">  Improving the Return Value of Erase-Like Algorithms II: Free <code class=\"code\">erase</code>/<code class=\"code\">erase_if</code> </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1115r3.pdf\" target=\"_top\">\n-\t\t\t\tP1115R3 </a>\n+        P1115R3 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\">\n-\t\t\t  <div class=\"informaltable\"><table class=\"informaltable\" border=\"0\"><colgroup><col /></colgroup><tbody><tr><td> <code class=\"code\">__cpp_lib_erase_if &gt;= 202002L</code> </td></tr><tr><td> (defined to <code class=\"code\">201900L</code> for GCC 9.1 and 9.2 so use <code class=\"code\">&gt; 201811L</code>) </td></tr></tbody></table></div>\n-\t\t\t</td></tr><tr><td align=\"left\"> Signed ssize() functions, unsigned size() functions </td><td align=\"left\">\n+        <div class=\"informaltable\"><table class=\"informaltable\" border=\"0\"><colgroup><col /></colgroup><tbody><tr><td> <code class=\"code\">__cpp_lib_erase_if &gt;= 202002L</code> </td></tr><tr><td> (defined to <code class=\"code\">201900L</code> for GCC 9.1 and 9.2 so use <code class=\"code\">&gt; 201811L</code>) </td></tr></tbody></table></div>\n+      </td></tr><tr><td align=\"left\"> Signed ssize() functions, unsigned size() functions </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1227r2.html\" target=\"_top\">\n-\t\t\t\tP1227R2 </a>\n+        P1227R2 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_ssize &gt;= 201902L</code> </td></tr><tr><td colspan=\"4\" align=\"left\">\n-\t\t\t\t<span class=\"bold\"><strong>Memory management</strong></span>\n+        <span class=\"bold\"><strong>Memory management</strong></span>\n       </td></tr><tr><td align=\"left\">  Utility to convert a pointer to a raw pointer </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0653r2.html\" target=\"_top\">\n-\t\t\t\tP0653R2 </a>\n+        P0653R2 </a>\n       </td><td align=\"center\"> 8.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_to_address &gt;= 201711L</code> (since 9.4, see Note 1) </td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">  Extending <code class=\"code\">make_shared</code> to Support Arrays </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0674r1.html\" target=\"_top\">\n-\t\t\t\tP0674R1 </a>\n+        P0674R1 </a>\n       </td><td align=\"center\"> </td><td align=\"left\"> <code class=\"code\">__cpp_lib_shared_ptr_arrays &gt;= 201707L</code> </td></tr><tr><td align=\"left\">  Efficient sized delete for variable sized classes </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0722r3.html\" target=\"_top\">\n-\t\t\t\tP0722R3 </a>\n+        P0722R3 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_destroying_delete &gt;= 201806L</code> </td></tr><tr><td align=\"left\">  Utility functions to implement uses-allocator construction </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0591r4.pdf\" target=\"_top\">\n-\t\t\t\tP0591R4 </a>\n+        P0591R4 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\">\n         <code class=\"code\">std::scoped_allocator_adaptor</code> changes missing in 9.1.0\n       </td></tr><tr><td align=\"left\">  <code class=\"code\">std::assume_aligned</code> </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1007r3.pdf\" target=\"_top\">\n-\t\t\t\tP1007R3 </a>\n+        P1007R3 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_assume_aligned &gt;= 201811L</code> (since 9.4, see Note 1) </td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">  Smart pointer creation with default initialization </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1020r1.html\" target=\"_top\">\n-\t\t\t\tP1020R1 </a>\n+        P1020R1 </a>\n       </td><td align=\"center\"> </td><td align=\"left\"> <code class=\"code\">__cpp_lib_smart_ptr_for_overwrite &gt;= 201811L</code> </td></tr><tr><td align=\"left\">  Make stateful allocator propagation more consistent for <code class=\"code\">operator+(basic_string)</code> </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1165r1.html\" target=\"_top\">\n-\t\t\t\tP1165R1 </a>\n+        P1165R1 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">\n         <code class=\"classname\">polymorphic_allocator&lt;&gt;</code> as a vocabulary type\n       </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0339r6.pdf\" target=\"_top\">\n-\t\t\t\tP0339R6 </a>\n+        P0339R6 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\">\n-\t\t\t<code class=\"code\">__cpp_lib_polymorphic_allocator &gt;= 201902L</code> (since 9.4, see Note 1)\n-\t\t\t</td></tr><tr><td align=\"left\">  LWG 2511: guaranteed copy elision for piecewise construction </td><td align=\"left\">\n+      <code class=\"code\">__cpp_lib_polymorphic_allocator &gt;= 201902L</code> (since 9.4, see Note 1)\n+      </td></tr><tr><td align=\"left\">  LWG 2511: guaranteed copy elision for piecewise construction </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0475r1.html\" target=\"_top\">\n-\t\t\t\tP0475R1 </a>\n+        P0475R1 </a>\n       </td><td align=\"center\"> 7.1 </td><td align=\"left\">\u00a0</td></tr><tr><td colspan=\"4\" align=\"left\">\n-\t\t\t\t<span class=\"bold\"><strong>Miscellaneous</strong></span>\n+        <span class=\"bold\"><strong>Miscellaneous</strong></span>\n       </td></tr><tr><td align=\"left\">  <code class=\"code\">nodiscard</code> in the Library </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0600r1.pdf\" target=\"_top\">\n-\t\t\t\tP0600R1 </a>\n+        P0600R1 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">  de-pessimize legacy algorithms with <code class=\"code\">std::move</code> </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0616r0.pdf\" target=\"_top\">\n-\t\t\t\tP0616R0 </a>\n+        P0616R0 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">  Deprecate POD </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0767r1.html\" target=\"_top\">\n-\t\t\t\tP0767R1 </a>\n+        P0767R1 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">  Treating Unnecessary <code class=\"code\">decay</code> </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0777r1.pdf\" target=\"_top\">\n-\t\t\t\tP0777R1 </a>\n+        P0777R1 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\">\u00a0</td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">  Thou Shalt Not Specialize std Function Templates! </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0551r3.pdf\" target=\"_top\">\n-\t\t\t\tP0551R3 </a>\n+        P0551R3 </a>\n       </td><td align=\"center\"> </td><td align=\"left\">\u00a0</td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">  Bit-casting object representations </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0476r2.html\" target=\"_top\">\n-\t\t\t\tP0476R2 </a>\n+        P0476R2 </a>\n       </td><td align=\"center\"> </td><td align=\"left\"> <code class=\"code\">__cpp_lib_bit_cast &gt;= 201806L</code> </td></tr><tr><td align=\"left\">  Integral power-of-2 operations </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0556r3.html\" target=\"_top\">\n-\t\t\t\tP0556R3 </a>\n+        P0556R3 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_int_pow2 &gt;= 201806L</code> (since 9.4, see Note 1) </td></tr><tr><td align=\"left\"> On the names of low-level bit manipulation functions </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1956r1.pdf\" target=\"_top\">\n-\t\t\t\tP1956R1 </a>\n+        P1956R1 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_int_pow2 &gt;= 202002L</code> </td></tr><tr><td align=\"left\"> Safe integral comparisons </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p0586r2.html\" target=\"_top\">\n-\t\t\t\tP0586R2 </a>\n+        P0586R2 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_integer_comparison_functions &gt;= 202002L</code> </td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">  Reviewing Deprecated Facilities of C++17 for C++20 </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0619r4.html\" target=\"_top\">\n-\t\t\t\tP0619R4 </a>\n+        P0619R4 </a>\n       </td><td align=\"center\"> </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">  <code class=\"code\">fpos</code> Requirements </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0759r1.html\" target=\"_top\">\n-\t\t\t\tP0759R1 </a>\n+        P0759R1 </a>\n       </td><td align=\"center\"> \u2014 </td><td align=\"left\">\u00a0</td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">  Add <code class=\"code\">shift</code> to <code class=\"code\">&lt;algorithm&gt;</code> </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0769r2.pdf\" target=\"_top\">\n-\t\t\t\tP0769R2 </a>\n+        P0769R2 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_shift &gt;= 201806L</code> </td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">  Standard Library Specification in a Concepts and Contracts World </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0788r3.pdf\" target=\"_top\">\n-\t\t\t\tP0788R3 </a>\n+        P0788R3 </a>\n       </td><td align=\"center\"> </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">  <code class=\"code\">explicit(bool)</code> </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0892r2.html\" target=\"_top\">\n-\t\t\t\tP0892R2 </a>\n+        P0892R2 </a>\n       </td><td align=\"center\"> \u2014 </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">  Eradicating unnecessarily explicit default constructors from the standard library </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0935r0.html\" target=\"_top\">\n-\t\t\t\tP0935R0 </a>\n+        P0935R0 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">  <code class=\"code\">std::function</code> move constructor should be <code class=\"code\">noexcept</code> </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0771r1.pdf\" target=\"_top\">\n-\t\t\t\tP0771R1 </a>\n+        P0771R1 </a>\n       </td><td align=\"center\"> 7.2 </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">  Simplified partial function application </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0356r5.html\" target=\"_top\">\n-\t\t\t\tP0356R5 </a>\n+        P0356R5 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_bind_front &gt;= 201811L</code> </td></tr><tr><td align=\"left\">  <code class=\"code\">bind_front</code> should not unwrap <code class=\"code\">reference_wrapper</code> </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1651r0.html\" target=\"_top\">\n-\t\t\t\tP1651R0 </a>\n+        P1651R0 </a>\n       </td><td align=\"center\"> 9.3 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_bind_front &gt;= 201907L</code> </td></tr><tr><td align=\"left\">  <code class=\"code\">reference_wrapper</code> for incomplete types </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0357r3.html\" target=\"_top\">\n-\t\t\t\tP0357R3 </a>\n+        P0357R3 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\">\u00a0</td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">  Fixing <code class=\"code\">operator&gt;&gt;(basic_istream&amp;, CharT*)</code> (LWG 2499) </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0487r1.html\" target=\"_top\">\n-\t\t\t\tP0487R1 </a>\n+        P0487R1 </a>\n       </td><td align=\"center\"> </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">  <code class=\"code\">variant</code> and <code class=\"code\">optional</code> should propagate copy/move triviality </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0602r4.html\" target=\"_top\">\n-\t\t\t\tP0602R4 </a>\n+        P0602R4 </a>\n       </td><td align=\"center\"> 8.3 </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">  A sane <code class=\"code\">variant</code> converting constructor </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0608r3.html\" target=\"_top\">\n-\t\t\t\tP0608R3 </a>\n+        P0608R3 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">  <code class=\"code\">visit&lt;R&gt;</code>: Explicit Return Type for <code class=\"code\">visit</code> </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0655r1.pdf\" target=\"_top\">\n-\t\t\t\tP0655R1 </a>\n+        P0655R1 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">  P0899R1 - LWG 3016 is not a defect </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0899r1.html\" target=\"_top\">\n-\t\t\t\tP0899R1 </a>\n+        P0899R1 </a>\n       </td><td align=\"center\"> 7.1 </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">  Editorial Guidance for merging P0019r8 and P0528r3 </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1123r0.html\" target=\"_top\">\n-\t\t\t\tP1123R0 </a>\n+        P1123R0 </a>\n       </td><td align=\"center\"> \u2014 </td><td align=\"left\">\u00a0</td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">  Cleaning up Clause 20 </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1148r0.pdf\" target=\"_top\">\n-\t\t\t\tP1148R0 </a>\n+        P1148R0 </a>\n       </td><td align=\"center\"> </td><td align=\"left\">\u00a0</td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">  Completing the Rebase of Library Fundamentals, Version 3, Working Draft </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1210r0.html\" target=\"_top\">\n-\t\t\t\tP1210R0 </a>\n+        P1210R0 </a>\n       </td><td align=\"center\"> </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">  Alternative Wording for P0907R4 Signed Integers are Two's Complement </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1236r1.html\" target=\"_top\">\n-\t\t\t\tP1236R1 </a>\n+        P1236R1 </a>\n       </td><td align=\"center\"> \u2014 </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">\n         I Stream, You Stream, We All Stream for\n         <code class=\"classname\">istream_iterator</code>\n       </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0738r2.html\" target=\"_top\">\n-\t\t\t\tP0738R2 </a>\n+        P0738R2 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">\n         Mandating the Standard Library:\n         Clause 16 - Language support library\n       </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1458r1.pdf\" target=\"_top\">\n-\t\t\t\tP1458R1 </a>\n+        P1458R1 </a>\n       </td><td align=\"center\"> \u2014 </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">\n         Mandating the Standard Library:\n         Clause 18 - Diagnostics library\n       </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1458r1.pdf\" target=\"_top\">\n-\t\t\t\tP1459R1 </a>\n+        P1459R1 </a>\n       </td><td align=\"center\"> \u2014 </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">\n         Mandating the Standard Library:\n         Clause 20 - Strings library\n       </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1462r1.html\" target=\"_top\">\n-\t\t\t\tP1462R1 </a>\n+        P1462R1 </a>\n       </td><td align=\"center\"> \u2014 </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\">\n         Mandating the Standard Library:\n         Clause 21 - Containers library\n       </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1463r1.pdf\" target=\"_top\">\n-\t\t\t\tP1463R1 </a>\n+        P1463R1 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\">\u00a0</td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\">\n         Mandating the Standard Library:\n         Clause 22 - Iterators library\n       </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1464r1.pdf\" target=\"_top\">\n-\t\t\t\tP1464R1 </a>\n+        P1464R1 </a>\n       </td><td align=\"center\"> </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\"> Make <code class=\"code\">create_directory()</code> Intuitive </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1164r1.pdf\" target=\"_top\">\n         P1164R1\n-\t</a>\n+  </a>\n       </td><td align=\"center\"> 8.3 </td><td align=\"left\"> Treated as a DR for C++17 </td></tr><tr><td align=\"left\">\n         Target Vectorization Policies from Parallelism V2 TS to C++20\n       </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1001r2.html\" target=\"_top\">\n-\t\t\t\tP1001R2 </a>\n+        P1001R2 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_execution &gt;= 201902L</code> (since 9.4, see Note 1)</td></tr><tr><td align=\"left\"> Merge Coroutines TS into C++20 working draft </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0912r5.html\" target=\"_top\">\n-\t\t\t\tP0912R5 </a>\n+        P0912R5 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_coroutines &gt;= 201902L</code> </td></tr><tr><td align=\"left\">  Endian just Endian </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0463r1.html\" target=\"_top\">\n-\t\t\t\tP0463R1 </a>\n+        P0463R1 </a>\n       </td><td align=\"center\"> 8.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_endian &gt;= 201907L</code> </td></tr><tr><td align=\"left\"> Bit operations </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0553r4.html\" target=\"_top\">\n-\t\t\t\tP0553R4 </a>\n+        P0553R4 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_bitops &gt;= 201907L</code> (since 9.4, see Note 1) </td></tr><tr><td align=\"left\">  Well-behaved interpolation for numbers and pointers </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0811r3.html\" target=\"_top\">\n-\t\t\t\tP0811R3 </a>\n+        P0811R3 </a>\n       </td><td align=\"center\"> 9.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_interpolate &gt;= 201902L</code> </td></tr><tr><td align=\"left\"> Mathematical constants </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0631r8.pdf\" target=\"_top\">\n-\t\t\t\tP0631R8 </a>\n+        P0631R8 </a>\n       </td><td align=\"center\"> 10.1 </td><td align=\"left\"> <code class=\"code\">__cpp_lib_math_constants &gt;= 201907L</code> </td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\"> std::source_location </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1208r6.pdf\" target=\"_top\">\n-\t\t\t\tP1208R6 </a>\n+        P1208R6 </a>\n       </td><td align=\"center\"> </td><td align=\"left\">\n         <code class=\"code\">__cpp_lib_source_location &gt;= 201907L</code>\n       </td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\"> Efficient access to std::basic_stringbuf's Buffer </td><td align=\"left\">\n         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0408r7.pdf\" target=\"_top\">\n-\t\t\t\tP0408R7 </a>\n+        P0408R7 </a>\n       </td><td align=\"center\"> </td><td align=\"left\">\u00a0</td></tr></tbody></table></div></div><br class=\"table-break\" /><p>\n Note 1: This feature is supported in older releases but the\n <code class=\"code\">__cpp_lib</code> macro is not defined to the right value"}, {"sha": "cf8684e1ceaa059eae85afe21197efd73183ec86", "filename": "libstdc++-v3/doc/xml/faq.xml", "status": "modified", "additions": 59, "deletions": 59, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae8a08ff59d28b17489d5c454bc07bfb70f0dff9/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Ffaq.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae8a08ff59d28b17489d5c454bc07bfb70f0dff9/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Ffaq.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Ffaq.xml?ref=ae8a08ff59d28b17489d5c454bc07bfb70f0dff9", "patch": "@@ -2,9 +2,9 @@\n \n <article xml:id=\"faq\" xreflabel=\"Frequently Asked Questions\">\n <?dbhtml filename=\"faq.html\"?>\n- \n+\n <info><title>Frequently Asked Questions</title>\n-  \n+\n   <copyright>\n     <year>\n       2008-2018\n@@ -36,7 +36,7 @@\n      exactly how far the project has come, or just want the latest\n      bleeding-edge code, the up-to-date source can be cloned via\n      <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"https://gcc.gnu.org/git.html\">Git</link>.\n-    </para> \n+    </para>\n \n     <para>\n     N.B. The library is called libstdc++ <emphasis>not</emphasis> stdlibc++.\n@@ -58,7 +58,7 @@\n     (as the Draft Standard used to say) <quote>incomplet and\n     incorrekt</quote>, and many suffered from limitations of the compilers\n     that used them.\n-    </para> \n+    </para>\n     <para>\n     The GNU compiler collection\n     (<command>gcc</command>, <command>g++</command>, etc) is widely\n@@ -68,7 +68,7 @@\n     the rapid development and near-legendary\n     <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"https://gcc.gnu.org/buildstat.html\">portability</link>\n     that are the hallmarks of an open-source project are applied to libstdc++.\n-    </para> \n+    </para>\n     <para>\n     All of the standard classes and functions from C++98/C++03, C++11 and C++14\n     (such as <classname>string</classname>,\n@@ -100,7 +100,7 @@\n     archives, is open to everyone.  You can read instructions for\n     doing so on the <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"https://gcc.gnu.org/lists.html\">GCC mailing lists</link> page.\n     If you have questions, ideas, code, or are just curious, sign up!\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -115,7 +115,7 @@\n     Nathan Myers gave the best of all possible answers, responding to\n     a Usenet article asking this question: <emphasis>Sooner, if you\n     help.</emphasis>\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -135,7 +135,7 @@\n     anybody who is willing to help write documentation, for example,\n     or has found a bug in code that we all thought was working and is\n     willing to provide details, is more than welcome!\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -152,7 +152,7 @@\n     being developed.</quote>\n     It should not be used for new projects, and won't even compile with\n     recent releases of GCC (or most other C++ compilers).\n-    </para> \n+    </para>\n     <para>\n     More information can be found in the\n     <link linkend=\"manual.appendix.porting.backwards\">Backwards\n@@ -175,13 +175,13 @@\n     information is available on the homepage (including how to browse\n     the list archives); to send a message to the list,\n     use <email>libstdc++@gcc.gnu.org</email>.\n-    </para> \n+    </para>\n \n-    <para> \n+    <para>\n     If you have a question that you think should be included\n     here, or if you have a question <emphasis>about</emphasis> a question/answer\n     here, please send email to the libstdc++ mailing list, as above.\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -201,7 +201,7 @@\n     <para>\n     See <link linkend=\"manual.intro.status.license\">our license description</link>\n     for these and related questions.\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -215,7 +215,7 @@\n     <para>\n      No. The special exception permits use of the library in\n      proprietary applications.\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -235,7 +235,7 @@\n      are expanded inside the code that uses the library.  So to allow people\n      to replace the library code, someone using the library would have to\n      distribute their own source, rendering the LGPL equivalent to the GPL.\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -249,7 +249,7 @@\n     <para>\n       None.  We encourage such programs to be released as free software,\n      but we won't punish you or sue you if you choose otherwise.\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -271,14 +271,14 @@\n     development tools. It may be necessary to install extra\n     development packages to get the headers, or the documentation, or\n     the source: please consult your vendor for details.\n-    </para> \n-    <para> \n-    To build and install from the GNU GCC sources, please consult the \n+    </para>\n+    <para>\n+    To build and install from the GNU GCC sources, please consult the\n     <link linkend=\"manual.intro.setup\">setup\n     documentation</link> for detailed\n     instructions. You may wish to browse those files ahead\n     of time to get a feel for what's required.\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -313,12 +313,12 @@\n     <para>\n     Libstdc++ comes with its own validation testsuite, which includes\n     conformance testing, regression testing, ABI testing, and\n-    performance testing. Please consult the \n+    performance testing. Please consult the\n     <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://gcc.gnu.org/install/test.html\">testing\n     documentation</link> for GCC and\n     <link linkend=\"manual.intro.setup.test\">Testing</link> in the libstdc++\n     manual for more details.\n-    </para> \n+    </para>\n     <para>\n     If you find bugs in the testsuite programs themselves, or if you\n     think of a new test program that should be added to the suite,\n@@ -432,7 +432,7 @@\n       using anything from the rest of the library, such as IOStreams\n       or vectors, then you'll still need pieces from\n       <filename class=\"libraryfile\">libstdc++.a</filename>.\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -465,7 +465,7 @@\n     is only possible to a certain extent; the object files in question contain\n     template classes and template functions, pre-instantiated, and\n     splitting those up causes severe maintenance headaches.\n-    </para> \n+    </para>\n     <para>\n     On supported platforms, libstdc++ takes advantage of garbage\n     collection in the GNU linker to get a result similar to separating\n@@ -495,12 +495,12 @@\n   <answer xml:id=\"a-other_compilers\">\n     <para>\n     Perhaps.\n-    </para> \n+    </para>\n     <para>\n     Since the goal of ISO Standardization is for all C++\n     implementations to be able to share code, libstdc++ should be\n     usable under any ISO-compliant compiler, at least in theory.\n-    </para> \n+    </para>\n     <para>\n     However, the reality is that libstdc++ is targeted and optimized\n     for GCC/G++. This means that often libstdc++ uses specific,\n@@ -515,7 +515,7 @@\n     been known to work with versions of the EDG C++ compiler, and\n     vendor-specific proprietary C++ compilers such as the Intel ICC\n     C++ compiler.\n-    </para> \n+    </para>\n \n   </answer>\n </qandaentry>\n@@ -533,16 +533,16 @@\n     <para>\n     By default we try to support the C99 <type>long long</type> type.\n     This requires that certain functions from your C library be present.\n-    </para> \n-    <para> \n+    </para>\n+    <para>\n     Up through release 3.0.2 the platform-specific tests performed by\n     libstdc++ were too general, resulting in a conservative approach\n     to enabling the <type>long long</type> code paths. The most\n     commonly reported platform affected was Solaris.\n-    </para> \n-    <para> \n+    </para>\n+    <para>\n     This has been fixed for libstdc++ releases greater than 3.0.3.\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -651,10 +651,10 @@\n     make mips* use the generic implementation instead.  You can also\n     configure for mipsel-elf as a workaround.\n     </para>\n-    <para>    \n+    <para>\n     The mips*-*-linux* port continues to use the MIPS II routines, and more\n     work in this area is expected.\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -700,9 +700,9 @@\n     enable <type>wchar_t</type> and C++ library structures\n     like <classname>wstring</classname> were present. This impacted Solaris,\n     Darwin, and BSD variants, and is fixed in libstdc++ versions post 4.1.0.\n-    </para> \n-    <para> \n-    </para> \n+    </para>\n+    <para>\n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -728,14 +728,14 @@\n     for <type>wchar_t</type> and <type>long long</type> specializations,\n     and details of thread support.\n     </para>\n-    <para>    \n-    Long answer: See the implementation status pages for \n+    <para>\n+    Long answer: See the implementation status pages for\n     <link linkend=\"status.iso.1998\">C++98</link>,\n     <link linkend=\"status.iso.tr1\">TR1</link>,\n     <link linkend=\"status.iso.2011\">C++11</link>,\n     <link linkend=\"status.iso.2014\">C++14</link>, and\n     <link linkend=\"status.iso.2017\">C++17</link>.\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -747,7 +747,7 @@\n   </question>\n   <answer xml:id=\"a-standard_bugs\">\n     <para>\n-    Unfortunately, there are some. \n+    Unfortunately, there are some.\n     </para>\n     <para>\n     For those people who are not part of the ISO Library Group\n@@ -758,7 +758,7 @@\n     website</link>.\n     Many of these issues have resulted in\n     <link linkend=\"manual.intro.status.bugs.iso\">code changes in libstdc++</link>.\n-    </para> \n+    </para>\n     <para>\n     If you think you've discovered a new bug that is not listed,\n     please post a message describing your problem to the author of\n@@ -784,12 +784,12 @@\n     or an older version of the GNU compilers. Third, you can find more\n     information on the libstdc++ and the GCC mailing lists: search\n     these lists with terms describing your issue.\n-    </para> \n-    <para> \n+    </para>\n+    <para>\n     Before reporting a bug, please examine the\n     <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"https://gcc.gnu.org/bugs/\">bugs database</link>, with the\n     component set to <quote>c++</quote>.\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -824,7 +824,7 @@\n     fs.close();\n     fs.open(\"a_new_file\");\n     </programlisting>\n-    \n+\n     <para>\n     All operations on the re-opened <varname>fs</varname> would fail, or at\n     least act very strangely, especially if <varname>fs</varname> reached the\n@@ -840,7 +840,7 @@\n     of <link linkend=\"manual.bugs.dr409\">DR #409</link> and\n     <function>open()</function>\n     now calls <function>clear()</function> on success.\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -859,7 +859,7 @@\n     necessarily trying to be OO. The option also enforces outdated guidelines\n     from old editions of the books, and the advice isn't all relevant to\n     modern C++ (especially C++11 and later).\n-    </para> \n+    </para>\n     <para>\n     We do, however, try to have libstdc++ sources as clean as possible. If\n     you see some simple changes that pacify <option>-Weffc++</option>\n@@ -889,7 +889,7 @@\n     <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://gcc.gnu.org/ml/libstdc++/2001-01/msg00247.html\">sums\n       things up here</link>.  The collisions with vector/string iterator\n     types have been fixed for 3.1.\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -947,7 +947,7 @@\n     checks, is available in the\n     <link linkend=\"std.diagnostics.concept_checking\">Diagnostics</link>.\n     chapter of the manual.\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -1013,7 +1013,7 @@\n     want to test the library for memory leaks please read\n     <link linkend=\"debug.memory\">Tips for memory leak hunting</link>\n     first.\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -1028,7 +1028,7 @@\n     See\n     the <link linkend=\"std.containers\">Containers</link>\n     chapter.\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -1056,7 +1056,7 @@\n     fixes.  Bugs have a way of being reintroduced; if an old bug\n     creeps back in, it will be caught immediately by the testsuite -\n     but only if such a test exists.\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -1150,9 +1150,9 @@\n     compatibility</link> documentation.\n     </para>\n     <para>\n-    The <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"https://web.archive.org/web/20171225062613/http://www.sgi.com/tech/stl/FAQ.html\">FAQ</link>\n+    The <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"https://web.archive.org/web/20171104092813/http://www.sgi.com/tech/stl/FAQ.html\">FAQ</link>\n     for SGI's STL is still recommended reading.\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -1165,7 +1165,7 @@\n   <answer xml:id=\"a-extensions_and_backwards_compat\">\n     <para>\n       See the <link linkend=\"manual.appendix.porting.backwards\">link</link> on backwards compatibility and <link linkend=\"appendix.porting.api\">link</link> on evolution.\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -1206,7 +1206,7 @@\n     <para>\n     Please refer to the <link linkend=\"appendix.contrib\">Contributing</link>\n     section in our manual.\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -1272,7 +1272,7 @@\n     so they may later be changed.  Deciding which, and implementing\n     the decisions, must happen before you can reasonably document a\n     candidate C++ ABI that encompasses the standard library.\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n \n@@ -1302,7 +1302,7 @@\n     <para>\n     See <link linkend=\"strings.string.shrink\">Shrink-to-fit\n     strings</link> for a similar solution for strings.\n-    </para> \n+    </para>\n   </answer>\n </qandaentry>\n "}]}