{"sha": "17a9e3802a32f39707a2ac260f8f97b665a44c87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdhOWUzODAyYTMyZjM5NzA3YTJhYzI2MGY4Zjk3YjY2NWE0NGM4Nw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-10-05T18:02:06Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-10-05T18:02:06Z"}, "message": "Implement P0305R1, Selection statements with initializer.\n\n\t* cp-array-notation.c (create_an_loop): Call finish_init_stmt\n\tinstead of finish_for_init_stmt.\n\t* cp-tree.h (finish_for_init_stmt): Rename to finish_init_stmt.\n\t* decl.c (poplevel): Adjust a comment.\n\t* init.c (build_vec_init): Call finish_init_stmt instead of\n\tfinish_for_init_stmt.\n\t* name-lookup.c (pushdecl_maybe_friend_1): Adjust a comment.\n\t* name-lookup.h (enum scope_kind): Likewise.\n\t* parser.c (cp_parser_statement): Update commentary.\n\t(cp_parser_init_statement_p): New function.\n\t(cp_parser_selection_statement): Parse the optional init-statement.\n\t(cp_parser_for): Call finish_init_stmt instead of finish_for_init_stmt.\n\t(cp_parser_c_for): Likewise.\n\t(cp_convert_range_for): Call finish_init_stmt instead of finish_for_init_stmt.\n\t(cp_parser_range_for_member_function): Update commentary.\n\t(cp_parser_iteration_statement):\n\t(cp_parser_for_init_statement): Rename to cp_parser_init_statement.\n\t* pt.c (tsubst_omp_for_iterator): Update commentary.\n\t(tsubst_expr): Call finish_init_stmt instead of finish_for_init_stmt.\n\t* semantics.c (finish_for_init_stmt): Rename to finish_init_stmt.\n\tUpdate commentary.\n\n\t* g++.dg/cpp1z/init-statement1.C: New test.\n\t* g++.dg/cpp1z/init-statement2.C: New test.\n\t* g++.dg/cpp1z/init-statement3.C: New test.\n\t* g++.dg/cpp1z/init-statement4.C: New test.\n\t* g++.dg/cpp1z/init-statement5.C: New test.\n\t* g++.dg/cpp1z/init-statement6.C: New test.\n\t* g++.dg/cpp1z/init-statement7.C: New test.\n\t* g++.dg/cpp1z/init-statement8.C: New test.\n\nFrom-SVN: r240798", "tree": {"sha": "226e1dc1f2ccd43d3ad167bef4ae957897611f43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/226e1dc1f2ccd43d3ad167bef4ae957897611f43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17a9e3802a32f39707a2ac260f8f97b665a44c87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a9e3802a32f39707a2ac260f8f97b665a44c87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17a9e3802a32f39707a2ac260f8f97b665a44c87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a9e3802a32f39707a2ac260f8f97b665a44c87/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e48e779aba92a8d7e89210c2d98d9b2a65d9a36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e48e779aba92a8d7e89210c2d98d9b2a65d9a36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e48e779aba92a8d7e89210c2d98d9b2a65d9a36"}], "stats": {"total": 546, "additions": 520, "deletions": 26}, "files": [{"sha": "dd43d9880a90b55521fe9ecc20474dbdecc59663", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=17a9e3802a32f39707a2ac260f8f97b665a44c87", "patch": "@@ -1,3 +1,28 @@\n+2016-10-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tImplement P0305R1, Selection statements with initializer.\n+\t* cp-array-notation.c (create_an_loop): Call finish_init_stmt\n+\tinstead of finish_for_init_stmt.\n+\t* cp-tree.h (finish_for_init_stmt): Rename to finish_init_stmt.\n+\t* decl.c (poplevel): Adjust a comment.\n+\t* init.c (build_vec_init): Call finish_init_stmt instead of\n+\tfinish_for_init_stmt.\n+\t* name-lookup.c (pushdecl_maybe_friend_1): Adjust a comment.\n+\t* name-lookup.h (enum scope_kind): Likewise.\n+\t* parser.c (cp_parser_statement): Update commentary.\n+\t(cp_parser_init_statement_p): New function.\n+\t(cp_parser_selection_statement): Parse the optional init-statement.\n+\t(cp_parser_for): Call finish_init_stmt instead of finish_for_init_stmt.\n+\t(cp_parser_c_for): Likewise.\n+\t(cp_convert_range_for): Call finish_init_stmt instead of finish_for_init_stmt.\n+\t(cp_parser_range_for_member_function): Update commentary.\n+\t(cp_parser_iteration_statement):\n+\t(cp_parser_for_init_statement): Rename to cp_parser_init_statement.\n+\t* pt.c (tsubst_omp_for_iterator): Update commentary.\n+\t(tsubst_expr): Call finish_init_stmt instead of finish_for_init_stmt.\n+\t* semantics.c (finish_for_init_stmt): Rename to finish_init_stmt.\n+\tUpdate commentary.\n+\n 2016-10-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/77852"}, {"sha": "633ab09102655ceb46b187817fd79c0253e556cd", "filename": "gcc/cp/cp-array-notation.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Fcp%2Fcp-array-notation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Fcp%2Fcp-array-notation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-array-notation.c?ref=17a9e3802a32f39707a2ac260f8f97b665a44c87", "patch": "@@ -66,7 +66,7 @@ create_an_loop (tree init, tree cond, tree incr, tree body)\n \n   finish_expr_stmt (init);\n   for_stmt = begin_for_stmt (NULL_TREE, NULL_TREE);\n-  finish_for_init_stmt (for_stmt);\n+  finish_init_stmt (for_stmt);\n   finish_for_cond (cond, for_stmt, false);\n   finish_for_expr (incr, for_stmt);\n   finish_expr_stmt (body);"}, {"sha": "92e40170f5b5a20c2bef6d700f051082ff29c147", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=17a9e3802a32f39707a2ac260f8f97b665a44c87", "patch": "@@ -6297,7 +6297,7 @@ extern void finish_do_stmt\t\t\t(tree, tree, bool);\n extern tree finish_return_stmt\t\t\t(tree);\n extern tree begin_for_scope\t\t\t(tree *);\n extern tree begin_for_stmt\t\t\t(tree, tree);\n-extern void finish_for_init_stmt\t\t(tree);\n+extern void finish_init_stmt\t\t\t(tree);\n extern void finish_for_cond\t\t\t(tree, tree, bool);\n extern void finish_for_expr\t\t\t(tree, tree);\n extern void finish_for_stmt\t\t\t(tree);"}, {"sha": "6a08d8f8729b545bd4bc5973d39991216bceaf7a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=17a9e3802a32f39707a2ac260f8f97b665a44c87", "patch": "@@ -639,9 +639,8 @@ poplevel (int keep, int reverse, int functionbody)\n       BLOCK_SUPERCONTEXT (link) = block;\n \n   /* We still support the old for-scope rules, whereby the variables\n-     in a for-init statement were in scope after the for-statement\n-     ended.  We only use the new rules if flag_new_for_scope is\n-     nonzero.  */\n+     in a init statement were in scope after the for-statement ended.\n+     We only use the new rules if flag_new_for_scope is nonzero.  */\n   leaving_for_scope\n     = current_binding_level->kind == sk_for && flag_new_for_scope == 1;\n "}, {"sha": "d1c8274003cefb4dfacf846889d239523ab80f0b", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=17a9e3802a32f39707a2ac260f8f97b665a44c87", "patch": "@@ -4052,7 +4052,7 @@ build_vec_init (tree base, tree maxindex, tree init,\n       tree to;\n \n       for_stmt = begin_for_stmt (NULL_TREE, NULL_TREE);\n-      finish_for_init_stmt (for_stmt);\n+      finish_init_stmt (for_stmt);\n       finish_for_cond (build2 (GT_EXPR, boolean_type_node, iterator,\n \t\t\t       build_int_cst (TREE_TYPE (iterator), -1)),\n \t\t       for_stmt, false);"}, {"sha": "9e84a1b1f2eeeed222a996f8df0cad4ac518273d", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=17a9e3802a32f39707a2ac260f8f97b665a44c87", "patch": "@@ -1156,7 +1156,7 @@ pushdecl_maybe_friend_1 (tree x, bool is_friend)\n \t\t   }\n \t\t}\n \t      /* Error if redeclaring a local declared in a\n-\t\t for-init-statement or in the condition of an if or\n+\t\t init-statement or in the condition of an if or\n \t\t switch statement when the new declaration is in the\n \t\t outermost block of the controlled statement.\n \t\t Redeclaring a variable from a for or while condition is"}, {"sha": "fd71038479886949824c8512666401dc40f23ad7", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=17a9e3802a32f39707a2ac260f8f97b665a44c87", "patch": "@@ -107,7 +107,7 @@ enum scope_kind {\n   sk_try,\t     /* A try-block.  */\n   sk_catch,\t     /* A catch-block.  */\n   sk_for,\t     /* The scope of the variable declared in a\n-\t\t\tfor-init-statement.  */\n+\t\t\tinit-statement.  */\n   sk_cond,\t     /* The scope of the variable declared in the condition\n \t\t\tof an if or switch statement.  */\n   sk_function_parms, /* The scope containing function parameters.  */"}, {"sha": "f3dc3591c7d63d16ca3f4f826eddeb25b8992a52", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 51, "deletions": 14, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=17a9e3802a32f39707a2ac260f8f97b665a44c87", "patch": "@@ -2117,7 +2117,7 @@ static tree cp_parser_condition\n   (cp_parser *);\n static tree cp_parser_iteration_statement\n   (cp_parser *, bool *, bool);\n-static bool cp_parser_for_init_statement\n+static bool cp_parser_init_statement\n   (cp_parser *, tree *decl);\n static tree cp_parser_for\n   (cp_parser *, bool);\n@@ -2642,6 +2642,8 @@ static bool cp_parser_compound_literal_p\n   (cp_parser *);\n static bool cp_parser_array_designator_p\n   (cp_parser *);\n+static bool cp_parser_init_statement_p\n+  (cp_parser *);\n static bool cp_parser_skip_to_closing_square_bracket\n   (cp_parser *);\n \n@@ -10396,6 +10398,10 @@ cp_parser_lambda_body (cp_parser* parser, tree lambda_expr)\n     declaration-statement\n     attribute-specifier-seq (opt) try-block\n \n+  init-statement:\n+    expression-statement\n+    simple-declaration\n+\n   TM Extension:\n \n    statement:\n@@ -10936,12 +10942,32 @@ cp_parser_statement_seq_opt (cp_parser* parser, tree in_statement_expr)\n     }\n }\n \n+/* Return true if we're looking at (init; cond), false otherwise.  */\n+\n+static bool\n+cp_parser_init_statement_p (cp_parser *parser)\n+{\n+  /* Save tokens so that we can put them back.  */\n+  cp_lexer_save_tokens (parser->lexer);\n+\n+  /* Look for ';' that is not nested in () or {}.  */\n+  int ret = cp_parser_skip_to_closing_parenthesis_1 (parser,\n+\t\t\t\t\t\t     /*recovering=*/false,\n+\t\t\t\t\t\t     CPP_SEMICOLON,\n+\t\t\t\t\t\t     /*consume_paren=*/false);\n+\n+  /* Roll back the tokens we skipped.  */\n+  cp_lexer_rollback_tokens (parser->lexer);\n+\n+  return ret == -1;\n+}\n+\n /* Parse a selection-statement.\n \n    selection-statement:\n-     if ( condition ) statement\n-     if ( condition ) statement else statement\n-     switch ( condition ) statement\n+     if ( init-statement [opt] condition ) statement\n+     if ( init-statement [opt] condition ) statement else statement\n+     switch ( init-statement [opt] condition ) statement\n \n    Returns the new IF_STMT or SWITCH_STMT.\n \n@@ -11006,6 +11032,17 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n \telse\n \t  statement = begin_switch_stmt ();\n \n+\t/* Parse the optional init-statement.  */\n+\tif (cp_parser_init_statement_p (parser))\n+\t  {\n+\t    tree decl;\n+\t    if (cxx_dialect < cxx1z)\n+\t      pedwarn (cp_lexer_peek_token (parser->lexer)->location, 0,\n+\t\t       \"init-statement in selection statements only available \"\n+\t\t       \"with -std=c++1z or -std=gnu++1z\");\n+\t    cp_parser_init_statement (parser, &decl);\n+\t  }\n+\n \t/* Parse the condition.  */\n \tcondition = cp_parser_condition (parser);\n \t/* Look for the `)'.  */\n@@ -11306,7 +11343,7 @@ cp_parser_for (cp_parser *parser, bool ivdep)\n   scope = begin_for_scope (&init);\n \n   /* Parse the initialization.  */\n-  is_range_for = cp_parser_for_init_statement (parser, &decl);\n+  is_range_for = cp_parser_init_statement (parser, &decl);\n \n   if (is_range_for)\n     return cp_parser_range_for (parser, scope, init, decl, ivdep);\n@@ -11323,9 +11360,9 @@ cp_parser_c_for (cp_parser *parser, tree scope, tree init, bool ivdep)\n   tree stmt;\n \n   stmt = begin_for_stmt (scope, init);\n-  /* The for-init-statement has already been parsed in\n-     cp_parser_for_init_statement, so no work is needed here.  */\n-  finish_for_init_stmt (stmt);\n+  /* The init-statement has already been parsed in\n+     cp_parser_init_statement, so no work is needed here.  */\n+  finish_init_stmt (stmt);\n \n   /* If there's a condition, process it.  */\n   if (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))\n@@ -11354,7 +11391,7 @@ cp_parser_c_for (cp_parser *parser, tree scope, tree init, bool ivdep)\n     decl-specifier-seq declarator : expression\n \n   The decl-specifier-seq declarator and the `:' are already parsed by\n-  cp_parser_for_init_statement. If processing_template_decl it returns a\n+  cp_parser_init_statement.  If processing_template_decl it returns a\n   newly created RANGE_FOR_STMT; if not, it is converted to a\n   regular FOR_STMT.  */\n \n@@ -11552,7 +11589,7 @@ cp_convert_range_for (tree statement, tree range_decl, tree range_expr,\n \t\t  /*is_constant_init*/false, NULL_TREE,\n \t\t  LOOKUP_ONLYCONVERTING);\n \n-  finish_for_init_stmt (statement);\n+  finish_init_stmt (statement);\n \n   /* The new for condition.  */\n   condition = build_x_binary_op (input_location, NE_EXPR,\n@@ -11726,7 +11763,7 @@ cp_parser_range_for_member_function (tree range, tree identifier)\n    iteration-statement:\n      while ( condition ) statement\n      do statement while ( expression ) ;\n-     for ( for-init-statement condition [opt] ; expression [opt] )\n+     for ( init-statement condition [opt] ; expression [opt] )\n        statement\n \n    Returns the new WHILE_STMT, DO_STMT, FOR_STMT or RANGE_FOR_STMT.  */\n@@ -11832,15 +11869,15 @@ cp_parser_iteration_statement (cp_parser* parser, bool *if_p, bool ivdep)\n   return statement;\n }\n \n-/* Parse a for-init-statement or the declarator of a range-based-for.\n+/* Parse a init-statement or the declarator of a range-based-for.\n    Returns true if a range-based-for declaration is seen.\n \n-   for-init-statement:\n+   init-statement:\n      expression-statement\n      simple-declaration  */\n \n static bool\n-cp_parser_for_init_statement (cp_parser* parser, tree *decl)\n+cp_parser_init_statement (cp_parser* parser, tree *decl)\n {\n   /* If the next token is a `;', then we have an empty\n      expression-statement.  Grammatically, this is also a"}, {"sha": "e6bacdfa5ae3636ed0c429a22bcb267e623d5083", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=17a9e3802a32f39707a2ac260f8f97b665a44c87", "patch": "@@ -14974,7 +14974,7 @@ tsubst_omp_for_iterator (tree t, int i, tree declv, tree orig_declv,\n   if (init && TREE_CODE (init) == DECL_EXPR)\n     {\n       /* We need to jump through some hoops to handle declarations in the\n-\t for-init-statement, since we might need to handle auto deduction,\n+\t init-statement, since we might need to handle auto deduction,\n \t but we need to keep control of initialization.  */\n       decl_expr = init;\n       init = DECL_INITIAL (DECL_EXPR_DECL (init));\n@@ -15359,7 +15359,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n     case FOR_STMT:\n       stmt = begin_for_stmt (NULL_TREE, NULL_TREE);\n       RECUR (FOR_INIT_STMT (t));\n-      finish_for_init_stmt (stmt);\n+      finish_init_stmt (stmt);\n       tmp = RECUR (FOR_COND (t));\n       finish_for_cond (tmp, stmt, false);\n       tmp = RECUR (FOR_EXPR (t));"}, {"sha": "cae5afc0d4be747f605e9a726b4513c8be10b221", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=17a9e3802a32f39707a2ac260f8f97b665a44c87", "patch": "@@ -953,11 +953,11 @@ begin_for_stmt (tree scope, tree init)\n   return r;\n }\n \n-/* Finish the for-init-statement of a for-statement, which may be\n+/* Finish the init-statement of a for-statement, which may be\n    given by FOR_STMT.  */\n \n void\n-finish_for_init_stmt (tree for_stmt)\n+finish_init_stmt (tree for_stmt)\n {\n   if (processing_template_decl)\n     FOR_INIT_STMT (for_stmt) = pop_stmt_list (FOR_INIT_STMT (for_stmt));"}, {"sha": "6c587f69d25de347b324e776c53ddb7ec59377ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=17a9e3802a32f39707a2ac260f8f97b665a44c87", "patch": "@@ -1,3 +1,14 @@\n+2016-10-05  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/cpp1z/init-statement1.C: New test.\n+\t* g++.dg/cpp1z/init-statement2.C: New test.\n+\t* g++.dg/cpp1z/init-statement3.C: New test.\n+\t* g++.dg/cpp1z/init-statement4.C: New test.\n+\t* g++.dg/cpp1z/init-statement5.C: New test.\n+\t* g++.dg/cpp1z/init-statement6.C: New test.\n+\t* g++.dg/cpp1z/init-statement7.C: New test.\n+\t* g++.dg/cpp1z/init-statement8.C: New test.\n+\n 2016-10-05  Louis Krupp  <louis.krupp@zoho.com>\n \n \tPR fortran/67524"}, {"sha": "1cebc3fec96b4b620ec3b69db8d0f66ab06dec9d", "filename": "gcc/testsuite/g++.dg/cpp1z/init-statement1.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement1.C?ref=17a9e3802a32f39707a2ac260f8f97b665a44c87", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+extern int foo (void);\n+extern void bar (int);\n+\n+void\n+f (void)\n+{\n+  if (auto p = foo (); p > 10) // { dg-warning \"init-statement\" \"\" { target c++14_down } }\n+    bar (p);\n+  else\n+    bar (-p);\n+}\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+extern int foo (void);\n+extern void bar (int);\n+\n+void\n+f (void)\n+{\n+  if (auto p = foo (); p > 10) // { dg-warning \"init-statement\" \"\" { target c++14_down } }\n+    bar (p);\n+  else\n+    bar (-p);\n+}"}, {"sha": "19d8e0c5813123dcafbd243756fbc497713b1f41", "filename": "gcc/testsuite/g++.dg/cpp1z/init-statement2.C", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement2.C?ref=17a9e3802a32f39707a2ac260f8f97b665a44c87", "patch": "@@ -0,0 +1,124 @@\n+// { dg-options -std=c++1z }\n+// Test C++17 selection statements with initializer, basic use.\n+\n+extern int foo (void);\n+extern void bar (int);\n+extern int g;\n+\n+void\n+f (void)\n+{\n+  if (auto p = foo (); p > 10)\n+    bar (p);\n+  else\n+    bar (-p);\n+\n+  if ((g += 2); g > 6)\n+    bar (1);\n+\n+  if (auto a = 9, b = foo (); a + b > 10)\n+    bar (a + b);\n+  else\n+    bar (a - b);\n+\n+  if (({ int a; 1;}))\n+    bar (0);\n+\n+  if (auto i = foo (); i > 6)\n+    bar (0);\n+  else if (i++; i > 8)\n+    bar (1);\n+}\n+\n+extern void lock (void);\n+\n+void\n+f2 (int i)\n+{\n+  if (lock (); i > 10)\n+    ++i;\n+  else\n+    --i;\n+}\n+\n+void\n+f3 (int i)\n+{\n+  switch (i *= 2; auto idx = i)\n+    {\n+    case 4:\n+      bar (3);\n+      break;\n+    default:\n+      break;\n+    }\n+}\n+\n+void\n+f4 (void)\n+{\n+  if constexpr (constexpr auto s = sizeof (int); s > 10)\n+    foo ();\n+}\n+// { dg-options -std=c++1z }\n+// Test C++17 selection statements with initializer, basic use.\n+\n+extern int foo (void);\n+extern void bar (int);\n+extern int g;\n+\n+void\n+f (void)\n+{\n+  if (auto p = foo (); p > 10)\n+    bar (p);\n+  else\n+    bar (-p);\n+\n+  if ((g += 2); g > 6)\n+    bar (1);\n+\n+  if (auto a = 9, b = foo (); a + b > 10)\n+    bar (a + b);\n+  else\n+    bar (a - b);\n+\n+  if (({ int a; 1;}))\n+    bar (0);\n+\n+  if (auto i = foo (); i > 6)\n+    bar (0);\n+  else if (i++; i > 8)\n+    bar (1);\n+}\n+\n+extern void lock (void);\n+\n+void\n+f2 (int i)\n+{\n+  if (lock (); i > 10)\n+    ++i;\n+  else\n+    --i;\n+}\n+\n+void\n+f3 (int i)\n+{\n+  switch (i *= 2; auto idx = i)\n+    {\n+    case 4:\n+      bar (3);\n+      break;\n+    default:\n+      break;\n+    }\n+}\n+\n+void\n+f4 (void)\n+{\n+  if constexpr (constexpr auto s = sizeof (int); s > 10)\n+    foo ();\n+}"}, {"sha": "306c801d68432855c018a65988a7742443f97106", "filename": "gcc/testsuite/g++.dg/cpp1z/init-statement3.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement3.C?ref=17a9e3802a32f39707a2ac260f8f97b665a44c87", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do run }\n+// { dg-options -std=c++1z }\n+// Test C++17 selection statements with initializer, side-effects.\n+\n+int\n+main ()\n+{\n+  int g = 0;\n+\n+  if (g++; g > 1)\n+    __builtin_abort ();\n+  if (++g; g > 2)\n+    __builtin_abort ();\n+  if (g != 2)\n+    __builtin_abort ();\n+}\n+// { dg-do run }\n+// { dg-options -std=c++1z }\n+// Test C++17 selection statements with initializer, side-effects.\n+\n+int\n+main ()\n+{\n+  int g = 0;\n+\n+  if (g++; g > 1)\n+    __builtin_abort ();\n+  if (++g; g > 2)\n+    __builtin_abort ();\n+  if (g != 2)\n+    __builtin_abort ();\n+}"}, {"sha": "2a0a7d0648cc63552e13aef9a098c40a4a4dd08d", "filename": "gcc/testsuite/g++.dg/cpp1z/init-statement4.C", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement4.C?ref=17a9e3802a32f39707a2ac260f8f97b665a44c87", "patch": "@@ -0,0 +1,118 @@\n+// { dg-options -std=c++1z }\n+\n+extern int foo (void);\n+extern void bar (int), die (void);\n+\n+void\n+f (void)\n+{\n+  if (auto i = foo (); i != -1)\n+    bar (1);\n+  else\n+    die ();\n+\n+  i = 10; // { dg-error \"not declared\" }\n+}\n+\n+void\n+f2 (void)\n+{\n+  switch (auto i = foo (); i)\n+    {\n+    case 0:\n+      bar (i + 1);\n+      break;\n+    case 1:\n+      bar (i + 10);\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  i = 10; // { dg-error \"not declared\" }\n+}\n+\n+void\n+f3 (void)\n+{\n+  if constexpr (constexpr auto i = sizeof (long); i < 2)\n+    die ();\n+  i = 4; // { dg-error \"not declared\" }\n+}\n+\n+\n+void\n+f4 (void)\n+{\n+  {\n+    if (auto i = foo (); i > -1)\n+      {\n+\tif (i > 5)\n+\t  bar (i);\n+\tif (auto j = foo (); true)\n+\t  j++;\n+\tj--; // { dg-error \"not declared\" }\n+      }\n+    i = 10; // { dg-error \"not declared\" }\n+  }\n+  i = 10; // { dg-error \"not declared\" }\n+}\n+// { dg-options -std=c++1z }\n+\n+extern int foo (void);\n+extern void bar (int), die (void);\n+\n+void\n+f (void)\n+{\n+  if (auto i = foo (); i != -1)\n+    bar (1);\n+  else\n+    die ();\n+\n+  i = 10; // { dg-error \"not declared\" }\n+}\n+\n+void\n+f2 (void)\n+{\n+  switch (auto i = foo (); i)\n+    {\n+    case 0:\n+      bar (i + 1);\n+      break;\n+    case 1:\n+      bar (i + 10);\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  i = 10; // { dg-error \"not declared\" }\n+}\n+\n+void\n+f3 (void)\n+{\n+  if constexpr (constexpr auto i = sizeof (long); i < 2)\n+    die ();\n+  i = 4; // { dg-error \"not declared\" }\n+}\n+\n+\n+void\n+f4 (void)\n+{\n+  {\n+    if (auto i = foo (); i > -1)\n+      {\n+\tif (i > 5)\n+\t  bar (i);\n+\tif (auto j = foo (); true)\n+\t  j++;\n+\tj--; // { dg-error \"not declared\" }\n+      }\n+    i = 10; // { dg-error \"not declared\" }\n+  }\n+  i = 10; // { dg-error \"not declared\" }\n+}"}, {"sha": "9445abf68bdacc56d046db3cfee5917ec11d89c7", "filename": "gcc/testsuite/g++.dg/cpp1z/init-statement5.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement5.C?ref=17a9e3802a32f39707a2ac260f8f97b665a44c87", "patch": "@@ -0,0 +1,32 @@\n+// Testcase from P0305R1\n+// { dg-options -std=c++1z }\n+\n+enum class status_code { SUCCESS };\n+extern int get_value ();\n+status_code bar (int);\n+status_code do_more_stuff (void);\n+\n+status_code\n+foo ()\n+{\n+  int n = get_value ();\n+  if (status_code c = bar (n); c != status_code::SUCCESS) { return c; }\n+  if (status_code c = do_more_stuff (); c != status_code::SUCCESS) { return c; }\n+  return status_code::SUCCESS;\n+}\n+// Testcase from P0305R1\n+// { dg-options -std=c++1z }\n+\n+enum class status_code { SUCCESS };\n+extern int get_value ();\n+status_code bar (int);\n+status_code do_more_stuff (void);\n+\n+status_code\n+foo ()\n+{\n+  int n = get_value ();\n+  if (status_code c = bar (n); c != status_code::SUCCESS) { return c; }\n+  if (status_code c = do_more_stuff (); c != status_code::SUCCESS) { return c; }\n+  return status_code::SUCCESS;\n+}"}, {"sha": "fe6518c2cca7cc1a6ef75416f379289d90dbee99", "filename": "gcc/testsuite/g++.dg/cpp1z/init-statement6.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement6.C?ref=17a9e3802a32f39707a2ac260f8f97b665a44c87", "patch": "@@ -0,0 +1,50 @@\n+// Testcase from P0305R1\n+// { dg-options -std=c++1z }\n+\n+#include <string>\n+#include <map>\n+#include <algorithm>\n+\n+std::map<int, std::string> m;\n+extern int xread (int *);\n+extern void publish (int), raise (int);\n+\n+void\n+foo ()\n+{\n+  if (auto it = m.find (10); it != m.end ()) { std::string s = it->second; }\n+  if (char buf[10]; std::fgets(buf, 10, stdin)) { m[0] += buf; }\n+  if (int s; int count = xread (&s)) { publish(count); raise(s); }\n+\n+  const char *s;\n+  if (auto keywords = {\"if\", \"for\", \"while\"};\n+      std::any_of(keywords.begin(), keywords.end(), [&s](const char* kw) { return s == kw; }))\n+    {\n+      // whatever\n+    }\n+}\n+// Testcase from P0305R1\n+// { dg-options -std=c++1z }\n+\n+#include <string>\n+#include <map>\n+#include <algorithm>\n+\n+std::map<int, std::string> m;\n+extern int xread (int *);\n+extern void publish (int), raise (int);\n+\n+void\n+foo ()\n+{\n+  if (auto it = m.find (10); it != m.end ()) { std::string s = it->second; }\n+  if (char buf[10]; std::fgets(buf, 10, stdin)) { m[0] += buf; }\n+  if (int s; int count = xread (&s)) { publish(count); raise(s); }\n+\n+  const char *s;\n+  if (auto keywords = {\"if\", \"for\", \"while\"};\n+      std::any_of(keywords.begin(), keywords.end(), [&s](const char* kw) { return s == kw; }))\n+    {\n+      // whatever\n+    }\n+}"}, {"sha": "0b9cb93610f1832edcc88ccbc25dd6259091f68f", "filename": "gcc/testsuite/g++.dg/cpp1z/init-statement7.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement7.C?ref=17a9e3802a32f39707a2ac260f8f97b665a44c87", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do run }\n+// { dg-options -std=c++1z }\n+\n+int\n+main ()\n+{\n+  if (int i = 10, &ir = i; [=]{ return ir; }() != 10)\n+    __builtin_abort ();\n+}\n+// { dg-do run }\n+// { dg-options -std=c++1z }\n+\n+int\n+main ()\n+{\n+  if (int i = 10, &ir = i; [=]{ return ir; }() != 10)\n+    __builtin_abort ();\n+}"}, {"sha": "3dccd1691dc56e05220c8cac722a4acedb750e78", "filename": "gcc/testsuite/g++.dg/cpp1z/init-statement8.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a9e3802a32f39707a2ac260f8f97b665a44c87/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement8.C?ref=17a9e3802a32f39707a2ac260f8f97b665a44c87", "patch": "@@ -0,0 +1,20 @@\n+// { dg-options -std=c++1z }\n+\n+int\n+f ()\n+{\n+  if (int c = 5;\n+      int c = 5) // { dg-error \"redeclaration\" }\n+    return 5;\n+  return 0;\n+}\n+// { dg-options -std=c++1z }\n+\n+int\n+f ()\n+{\n+  if (int c = 5;\n+      int c = 5) // { dg-error \"redeclaration\" }\n+    return 5;\n+  return 0;\n+}"}]}