{"sha": "69277eec7740edb7968777c8ca4f43286eab820e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkyNzdlZWM3NzQwZWRiNzk2ODc3N2M4Y2E0ZjQzMjg2ZWFiODIwZQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-08-24T13:34:04Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-08-24T13:34:04Z"}, "message": "genattr.c (function_unit_desc): Constify a char*.\n\n\t* genattr.c (function_unit_desc): Constify a char*.  Add prototype.\n\t(main): Add prototypes.\n\n\t* genattrtab.c (substitute_address, write_const_num_delay_slots,\n\tattr_eq, attr_numeral, attr_equal_p, attr_copy_rtx): Prototype.\n\t(write_attr_get): Emit prototypes along with function definition.\n\t(write_eligible_delay): Mark a parameter with ATTRIBUTE_UNUSED.\n\t(write_complex_function): Emit static prototype along with\n\tfunction definition.\n\n\t* genemit.c (gen_split): Emit prototypes along with function\n\tdefinition.\n\n\t* genoutput.c (output_epilogue): Add prototype to `insn_outfun'.\n\tLikewise for predicates and `insn_operand_predicate'.\n\t(process_template): Emit static prototype along with function\n\tdefinition.\n\n\t* genrecog.c (make_insn_sequence): Constify a char*.  Add\n\tprototypes for get_split_*().\n\t(write_subroutine): Emit prototypes along with function\n\tdefinition.\n\nFrom-SVN: r28822", "tree": {"sha": "7e5beb032b12a5f206bc4a2895f87b97907ab018", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e5beb032b12a5f206bc4a2895f87b97907ab018"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69277eec7740edb7968777c8ca4f43286eab820e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69277eec7740edb7968777c8ca4f43286eab820e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69277eec7740edb7968777c8ca4f43286eab820e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69277eec7740edb7968777c8ca4f43286eab820e/comments", "author": null, "committer": null, "parents": [{"sha": "33f58a4e96ff4e46a0f238fac2a7927eb5845f09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33f58a4e96ff4e46a0f238fac2a7927eb5845f09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33f58a4e96ff4e46a0f238fac2a7927eb5845f09"}], "stats": {"total": 107, "additions": 85, "deletions": 22}, "files": [{"sha": "c7fe011936c0a7bb1ff8c8a21875980c6d8d2c65", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69277eec7740edb7968777c8ca4f43286eab820e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69277eec7740edb7968777c8ca4f43286eab820e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69277eec7740edb7968777c8ca4f43286eab820e", "patch": "@@ -1,3 +1,28 @@\n+Tue Aug 24 09:32:07 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* genattr.c (function_unit_desc): Constify a char*.  Add prototype.\n+\t(main): Add prototypes.\n+\n+\t* genattrtab.c (substitute_address, write_const_num_delay_slots,\n+\tattr_eq, attr_numeral, attr_equal_p, attr_copy_rtx): Prototype.\n+\t(write_attr_get): Emit prototypes along with function definition.\n+\t(write_eligible_delay): Mark a parameter with ATTRIBUTE_UNUSED.\n+\t(write_complex_function): Emit static prototype along with\n+\tfunction definition.\n+\n+\t* genemit.c (gen_split): Emit prototypes along with function\n+\tdefinition.\n+\n+\t* genoutput.c (output_epilogue): Add prototype to `insn_outfun'.\n+\tLikewise for predicates and `insn_operand_predicate'.\n+\t(process_template): Emit static prototype along with function\n+\tdefinition.\n+\n+\t* genrecog.c (make_insn_sequence): Constify a char*.  Add\n+\tprototypes for get_split_*().\n+\t(write_subroutine): Emit prototypes along with function\n+\tdefinition.\n+\n Tue Aug 24 12:35:20 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \t* tree.h (current_function_calls_setjmp,"}, {"sha": "86c078f46de35cc52ad409bbe0c70599ef362026", "filename": "gcc/genattr.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69277eec7740edb7968777c8ca4f43286eab820e/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69277eec7740edb7968777c8ca4f43286eab820e/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=69277eec7740edb7968777c8ca4f43286eab820e", "patch": "@@ -163,17 +163,17 @@ write_units (num_units, multiplicity, simultaneity,\n   printf (\"extern int function_units_used PROTO((rtx));\\n\\n\");\n   printf (\"extern struct function_unit_desc\\n\");\n   printf (\"{\\n\");\n-  printf (\"  char *name;\\n\");\n+  printf (\"  const char *name;\\n\");\n   printf (\"  int bitmask;\\n\");\n   printf (\"  int multiplicity;\\n\");\n   printf (\"  int simultaneity;\\n\");\n   printf (\"  int default_cost;\\n\");\n   printf (\"  int max_issue_delay;\\n\");\n-  printf (\"  int (*ready_cost_function) ();\\n\");\n-  printf (\"  int (*conflict_cost_function) ();\\n\");\n+  printf (\"  int (*ready_cost_function) PROTO ((rtx));\\n\");\n+  printf (\"  int (*conflict_cost_function) PROTO ((rtx, rtx));\\n\");\n   printf (\"  int max_blockage;\\n\");\n-  printf (\"  unsigned int (*blockage_range_function) ();\\n\");\n-  printf (\"  int (*blockage_function) ();\\n\");\n+  printf (\"  unsigned int (*blockage_range_function) PROTO ((rtx));\\n\");\n+  printf (\"  int (*blockage_function) PROTO ((rtx, rtx));\\n\");\n   printf (\"} function_units[];\\n\\n\");\n   printf (\"#define FUNCTION_UNITS_SIZE %d\\n\", num_units);\n   printf (\"#define MIN_MULTIPLICITY %d\\n\", multiplicity->min);\n@@ -329,14 +329,14 @@ from the machine description file `md'.  */\\n\\n\");\n \t      if (XVECEXP (desc, 1, i + 1) && ! have_annul_true)\n \t\t{\n \t\t  printf (\"#define ANNUL_IFTRUE_SLOTS\\n\");\n-\t\t  printf (\"extern int eligible_for_annul_true ();\\n\");\n+\t\t  printf (\"extern int eligible_for_annul_true PROTO ((rtx, int, rtx, int));\\n\");\n \t\t  have_annul_true = 1;\n \t\t}\n \n \t      if (XVECEXP (desc, 1, i + 2) && ! have_annul_false)\n \t\t{\n \t\t  printf (\"#define ANNUL_IFFALSE_SLOTS\\n\");\n-\t\t  printf (\"extern int eligible_for_annul_false ();\\n\");\n+\t\t  printf (\"extern int eligible_for_annul_false PROTO ((rtx, int, rtx, int));\\n\");\n \t\t  have_annul_false = 1;\n \t\t}\n \t    }"}, {"sha": "2aba0b5ab775b50aa6704bab1901281bf4a90c57", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69277eec7740edb7968777c8ca4f43286eab820e/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69277eec7740edb7968777c8ca4f43286eab820e/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=69277eec7740edb7968777c8ca4f43286eab820e", "patch": "@@ -387,7 +387,7 @@ static rtx simplify_knowing\tPROTO((rtx, rtx));\n static rtx encode_units_mask\tPROTO((rtx));\n static void fill_attr\t\tPROTO((struct attr_desc *));\n /* dpx2 compiler chokes if we specify the arg types of the args.  */\n-static rtx substitute_address\tPROTO((rtx, rtx (*) (), rtx (*) ()));\n+static rtx substitute_address\tPROTO((rtx, rtx (*) (rtx), rtx (*) (rtx)));\n static void make_length_attrs\tPROTO((void));\n static rtx identity_fn\t\tPROTO((rtx));\n static rtx zero_fn\t\tPROTO((rtx));\n@@ -447,6 +447,7 @@ static void write_complex_function PROTO((struct function_unit *, const char *,\n \t\t\t\t\t  const char *));\n static int write_expr_attr_cache PROTO((rtx, struct attr_desc *));\n static void write_toplevel_expr\tPROTO((rtx));\n+static void write_const_num_delay_slots PROTO ((void));\n static int n_comma_elts\t\tPROTO((char *));\n static char *next_comma_elt\tPROTO((char **));\n static struct attr_desc *find_attr PROTO((const char *, int));\n@@ -455,6 +456,10 @@ static struct attr_value *find_most_used  PROTO((struct attr_desc *));\n static rtx find_single_value\tPROTO((struct attr_desc *));\n static rtx make_numeric_value\tPROTO((int));\n static void extend_range\tPROTO((struct range *, int, int));\n+static rtx attr_eq\t\tPROTO((char *, char *));\n+static char *attr_numeral\tPROTO((int));\n+static int attr_equal_p\t\tPROTO((rtx, rtx));\n+static rtx attr_copy_rtx\tPROTO((rtx));\n \n #define oballoc(size) obstack_alloc (hash_obstack, size)\n \n@@ -757,15 +762,15 @@ attr_printf VPROTO((register int len, const char *fmt, ...))\n   return attr_string (str, strlen (str));\n }\n \n-rtx\n+static rtx\n attr_eq (name, value)\n      char *name, *value;\n {\n   return attr_rtx (EQ_ATTR, attr_string (name, strlen (name)),\n \t\t   attr_string (value, strlen (value)));\n }\n \n-char *\n+static char *\n attr_numeral (n)\n      int n;\n {\n@@ -811,7 +816,7 @@ attr_string (str, len)\n    taking advantage of the fact that if both are hashed\n    then they can't be equal unless they are the same object.  */\n \n-int\n+static int\n attr_equal_p (x, y)\n      rtx x, y;\n {\n@@ -823,7 +828,7 @@ attr_equal_p (x, y)\n    descending to all depths, but not copying any\n    permanent hashed subexpressions.  */\n \n-rtx\n+static rtx\n attr_copy_rtx (orig)\n      register rtx orig;\n {\n@@ -2327,8 +2332,8 @@ fill_attr (attr)\n static rtx\n substitute_address (exp, no_address_fn, address_fn)\n      rtx exp;\n-     rtx (*no_address_fn) ();\n-     rtx (*address_fn) ();\n+     rtx (*no_address_fn) PROTO ((rtx));\n+     rtx (*address_fn) PROTO ((rtx));\n {\n   int i;\n   rtx newexp;\n@@ -4844,6 +4849,21 @@ write_attr_get (attr)\n      switch we will generate.  */\n   common_av = find_most_used (attr);\n \n+  /* Write out prototype of function. */\n+  if (!attr->is_numeric)\n+    printf (\"extern enum attr_%s \", attr->name);\n+  else if (attr->unsigned_p)\n+    printf (\"extern unsigned int \");\n+  else\n+    printf (\"extern int \");\n+  /* If the attribute name starts with a star, the remainder is the name of\n+     the subroutine to use, instead of `get_attr_...'.  */\n+  if (attr->name[0] == '*')\n+    printf (\"%s PROTO ((rtx));\\n\", &attr->name[1]);\n+  else\n+    printf (\"get_attr_%s PROTO ((%s));\\n\", attr->name,\n+\t    (attr->is_const ? \"void\" : \"rtx\"));\n+\n   /* Write out start of function, then all values with explicit `case' lines,\n      then a `default', then the value with the most uses.  */\n   if (!attr->is_numeric)\n@@ -5380,7 +5400,7 @@ write_eligible_delay (kind)\n   printf (\"     rtx delay_insn;\\n\");\n   printf (\"     int slot;\\n\");\n   printf (\"     rtx candidate_insn;\\n\");\n-  printf (\"     int flags;\\n\");\n+  printf (\"     int flags ATTRIBUTE_UNUSED;\\n\");\n   printf (\"{\\n\");\n   printf (\"  rtx insn;\\n\");\n   printf (\"\\n\");\n@@ -5553,6 +5573,7 @@ write_complex_function (unit, name, connection)\n   int using_case;\n   int i;\n \n+  printf (\"static int %s_unit_%s PROTO ((rtx, rtx));\\n\", unit->name, name);\n   printf (\"static int\\n\");\n   printf (\"%s_unit_%s (executing_insn, candidate_insn)\\n\",\n \t  unit->name, name);\n@@ -5919,7 +5940,7 @@ fancy_abort ()\n /* Determine if an insn has a constant number of delay slots, i.e., the\n    number of delay slots is not a function of the length of the insn.  */\n \n-void\n+static void\n write_const_num_delay_slots ()\n {\n   struct attr_desc *attr = find_attr (\"*num_delay_slots\", 0);"}, {"sha": "aa9bc531ae539453053dea4a46bcf2b1f10c3c66", "filename": "gcc/genemit.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69277eec7740edb7968777c8ca4f43286eab820e/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69277eec7740edb7968777c8ca4f43286eab820e/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=69277eec7740edb7968777c8ca4f43286eab820e", "patch": "@@ -539,7 +539,8 @@ gen_split (split)\n   max_operand_vec (split, 2);\n   operands = MAX (max_opno, max_dup_opno) + 1;\n \n-  /* Output the function name and argument declarations.  */\n+  /* Output the prototype, the function name and argument declarations.  */\n+  printf (\"extern rtx gen_split_%d PROTO ((rtx *));\\n\", insn_code_number);\n   printf (\"rtx\\ngen_split_%d (operands)\\n     rtx *operands;\\n\",\n \t  insn_code_number);\n   printf (\"{\\n\");"}, {"sha": "91180868a9d9128f1278621ca0cf643bd763f1c9", "filename": "gcc/genoutput.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69277eec7740edb7968777c8ca4f43286eab820e/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69277eec7740edb7968777c8ca4f43286eab820e/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=69277eec7740edb7968777c8ca4f43286eab820e", "patch": "@@ -244,7 +244,7 @@ output_epilogue ()\n     }\n   printf (\"  };\\n\");\n \n-  printf (\"\\nconst char *(*const insn_outfun[])() =\\n  {\\n\");\n+  printf (\"\\nconst char *(*const insn_outfun[]) PROTO((rtx *, rtx)) =\\n  {\\n\");\n   for (d = insn_data; d; d = d->next)\n     {\n       if (d->outfun)\n@@ -398,15 +398,16 @@ output_epilogue ()\n \n \t    if (p == 0)\n \t      {\n-\t\tprintf (\"extern int %s ();\\n\", d->predicates[i]);\n+\t\tprintf (\"extern int %s PROTO ((rtx, enum machine_mode));\\n\",\n+\t\t\td->predicates[i]);\n \t\tp = (struct predicate *) alloca (sizeof (struct predicate));\n \t\tp->name = d->predicates[i];\n \t\tp->next = predicates;\n \t\tpredicates = p;\n \t      }\n \t  }\n     \n-    printf (\"\\nint (*const insn_operand_predicate[][MAX_RECOG_OPERANDS])() =\\n  {\\n\");\n+    printf (\"\\nint (*const insn_operand_predicate[][MAX_RECOG_OPERANDS]) PROTO ((rtx, enum machine_mode)) =\\n  {\\n\");\n     for (d = insn_data; d; d = d->next)\n       {\n \tprintf (\"    {\");\n@@ -596,6 +597,8 @@ process_template (d, template)\n   d->template = 0;\n   d->outfun = 1;\n \n+  printf (\"\\nstatic const char *output_%d PROTO ((rtx *, rtx));\\n\",\n+\t  d->code_number);\n   printf (\"\\nstatic const char *\\n\");\n   printf (\"output_%d (operands, insn)\\n\", d->code_number);\n   printf (\"     rtx *operands ATTRIBUTE_UNUSED;\\n\");"}, {"sha": "8fb846be90d19a8fa252df20ec54475247e8d03c", "filename": "gcc/genrecog.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69277eec7740edb7968777c8ca4f43286eab820e/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69277eec7740edb7968777c8ca4f43286eab820e/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=69277eec7740edb7968777c8ca4f43286eab820e", "patch": "@@ -213,7 +213,7 @@ make_insn_sequence (insn, type)\n   struct decision_head head;\n \n   {\n-    static char *last_real_name = \"insn\";\n+    static const char *last_real_name = \"insn\";\n     static int last_real_code = 0;\n     char *name;\n \n@@ -306,7 +306,7 @@ make_insn_sequence (insn, type)\n \n   if (type == SPLIT)\n     /* Define the subroutine we will call below and emit in genemit.  */\n-    printf (\"extern rtx gen_split_%d ();\\n\", last->insn_code_number);\n+    printf (\"extern rtx gen_split_%d PROTO ((rtx *));\\n\", last->insn_code_number);\n \n   return head;\n }\n@@ -1031,6 +1031,19 @@ write_subroutine (tree, type)\n {\n   int i;\n \n+  if (type == SPLIT)\n+    printf (\"extern rtx split\");\n+  else\n+    printf (\"extern int recog\");\n+  if (tree != 0 && tree->subroutine_number > 0)\n+    printf (\"_%d\", tree->subroutine_number);\n+  else if (type == SPLIT)\n+    printf (\"_insns\");\n+  printf (\" PROTO ((rtx, rtx\");\n+  if (type == RECOG)\n+    printf (\", int *\");\n+  printf (\"));\\n\");\n+\n   if (type == SPLIT)\n     printf (\"rtx\\nsplit\");\n   else"}]}