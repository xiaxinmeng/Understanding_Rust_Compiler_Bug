{"sha": "414fe08a352eac69168f4fb3671246c84a1ac5aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE0ZmUwOGEzNTJlYWM2OTE2OGY0ZmIzNjcxMjQ2Yzg0YTFhYzVhYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-18T06:41:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-18T07:04:37Z"}, "message": "c/100522 - avoid invalid GIMPLE in GIMPLE parsing\n\nThis plugs a few easy holes avoiding ICEs down the route.\n\n2021-05-18  Richard Biener  <rguenther@suse.de>\n\n\tPR c/100522\ngcc/c/\n\t* gimple-parser.c (c_parser_gimple_postfix_expression_after_primary):\n\tDiagnose calls to non-functions.\n\t(c_parser_gimple_statement): Diagnose unexpected assignment RHS.\n\ngcc/testsuite/\n\t* gcc.dg/gimplefe-error-10.c: New testcase.", "tree": {"sha": "549358505d9583b5a40b8d475c472c23c84fb2c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/549358505d9583b5a40b8d475c472c23c84fb2c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/414fe08a352eac69168f4fb3671246c84a1ac5aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/414fe08a352eac69168f4fb3671246c84a1ac5aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/414fe08a352eac69168f4fb3671246c84a1ac5aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/414fe08a352eac69168f4fb3671246c84a1ac5aa/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4054472b3fa15e11ccd48190f5e3ecfc89d65af9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4054472b3fa15e11ccd48190f5e3ecfc89d65af9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4054472b3fa15e11ccd48190f5e3ecfc89d65af9"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "dfacf23c40aeddea08e7af66a9caef328521d3bf", "filename": "gcc/c/gimple-parser.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414fe08a352eac69168f4fb3671246c84a1ac5aa/gcc%2Fc%2Fgimple-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414fe08a352eac69168f4fb3671246c84a1ac5aa/gcc%2Fc%2Fgimple-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.c?ref=414fe08a352eac69168f4fb3671246c84a1ac5aa", "patch": "@@ -877,6 +877,11 @@ c_parser_gimple_statement (gimple_parser &parser, gimple_seq *seq)\n \t  rhs.value = build3_loc (loc, COND_EXPR, TREE_TYPE (trueval.value),\n \t\t\t\t  rhs.value, trueval.value, falseval.value);\n \t}\n+      if (get_gimple_rhs_class (TREE_CODE (rhs.value)) == GIMPLE_INVALID_RHS)\n+\t{\n+\t  c_parser_error (parser, \"unexpected RHS for assignment\");\n+\t  return;\n+\t}\n       assign = gimple_build_assign (lhs.value, rhs.value);\n       gimple_seq_add_stmt_without_update (seq, assign);\n       gimple_set_location (assign, loc);\n@@ -1754,6 +1759,12 @@ c_parser_gimple_postfix_expression_after_primary (gimple_parser &parser,\n \t      c_parser_gimple_expr_list (parser, &exprlist);\n \t    c_parser_skip_until_found (parser, CPP_CLOSE_PAREN,\n \t\t\t\t       \"expected %<)%>\");\n+\t    if (!FUNC_OR_METHOD_TYPE_P (TREE_TYPE (expr.value)))\n+\t      {\n+\t\tc_parser_error (parser, \"invalid call to non-function\");\n+\t\texpr.set_error ();\n+\t\tbreak;\n+\t      }\n \t    expr.value = build_call_array_loc\n \t\t(expr_loc, TREE_TYPE (TREE_TYPE (expr.value)),\n \t\t expr.value, exprlist.length (), exprlist.address ());"}, {"sha": "13d86ac5d1d2a4bf7de411084db082634586d4c9", "filename": "gcc/testsuite/gcc.dg/gimplefe-error-10.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414fe08a352eac69168f4fb3671246c84a1ac5aa/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-error-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414fe08a352eac69168f4fb3671246c84a1ac5aa/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-error-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-error-10.c?ref=414fe08a352eac69168f4fb3671246c84a1ac5aa", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fgimple\" } */\n+\n+__GIMPLE\n+void foo() {\n+  int t1;\n+  t1_1 = t1_1(); /* { dg-error \"invalid call\" } */\n+}"}]}