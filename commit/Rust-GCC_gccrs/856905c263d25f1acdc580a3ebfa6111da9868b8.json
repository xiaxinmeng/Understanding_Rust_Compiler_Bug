{"sha": "856905c263d25f1acdc580a3ebfa6111da9868b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU2OTA1YzI2M2QyNWYxYWNkYzU4MGEzZWJmYTYxMTFkYTk4NjhiOA==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb.gcc@gmail.com", "date": "2008-05-30T18:28:48Z"}, "committer": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2008-05-30T18:28:48Z"}, "message": "optabs.c (maybe_encapsulate_block): Remove.\n\n2008-05-30  Steven Bosscher  <stevenb.gcc@gmail.com>\n\n\t* optabs.c (maybe_encapsulate_block): Remove.\n\t(emit_libcall_block): Adjust accordingly.\n\t* optabs.h (maybe_encapsulate_block): Remove prototype.\n\n\t* config/rs6000/rs6000.c (rs6000_legitimize_tls_address):\n\tDon't use maybe_encapsulate_block.\n\nFrom-SVN: r136217", "tree": {"sha": "7e228661bae5e72ca8b668c7a4b17a95d00d3d7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e228661bae5e72ca8b668c7a4b17a95d00d3d7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/856905c263d25f1acdc580a3ebfa6111da9868b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/856905c263d25f1acdc580a3ebfa6111da9868b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/856905c263d25f1acdc580a3ebfa6111da9868b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/856905c263d25f1acdc580a3ebfa6111da9868b8/comments", "author": null, "committer": null, "parents": [{"sha": "0cdc04e8d5b61d4de770b4474a6aa0351ed5b74a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cdc04e8d5b61d4de770b4474a6aa0351ed5b74a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cdc04e8d5b61d4de770b4474a6aa0351ed5b74a"}], "stats": {"total": 88, "additions": 12, "deletions": 76}, "files": [{"sha": "d61e4f4eb2d8220aae81a05e96fdcb2afd330abb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856905c263d25f1acdc580a3ebfa6111da9868b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856905c263d25f1acdc580a3ebfa6111da9868b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=856905c263d25f1acdc580a3ebfa6111da9868b8", "patch": "@@ -1,3 +1,12 @@\n+2008-05-30  Steven Bosscher  <stevenb.gcc@gmail.com>\n+\n+\t* optabs.c (maybe_encapsulate_block): Remove.\n+\t(emit_libcall_block): Adjust accordingly.\n+\t* optabs.h (maybe_encapsulate_block): Remove prototype.\n+\n+\t* config/rs6000/rs6000.c (rs6000_legitimize_tls_address):\n+\tDon't use maybe_encapsulate_block.\n+\n 2008-05-30  Steven Bosscher  <stevenb.gcc@gmail.com>\n \n \t* config/rs6000/rs6000.c (rs6000_legitimize_address,"}, {"sha": "54b38ce843b18461031f4f8d922eae9e881175de", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856905c263d25f1acdc580a3ebfa6111da9868b8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856905c263d25f1acdc580a3ebfa6111da9868b8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=856905c263d25f1acdc580a3ebfa6111da9868b8", "patch": "@@ -3890,7 +3890,6 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n \t\t  emit_insn (gen_addsi3 (tmp3, tmp1, tmp2));\n \t\t  last = emit_move_insn (got, tmp3);\n \t\t  set_unique_reg_note (last, REG_EQUAL, gsym);\n-\t\t  maybe_encapsulate_block (first, last, gsym);\n \t\t}\n \t    }\n \t}"}, {"sha": "b3517697ff2f2a5bceea712cd4b19d26bf76b027", "filename": "gcc/optabs.c", "status": "modified", "additions": 3, "deletions": 71, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856905c263d25f1acdc580a3ebfa6111da9868b8/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856905c263d25f1acdc580a3ebfa6111da9868b8/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=856905c263d25f1acdc580a3ebfa6111da9868b8", "patch": "@@ -3829,38 +3829,6 @@ no_conflict_move_test (rtx dest, const_rtx set, void *p0)\n     p->must_stay = true;\n }\n \n-/* Encapsulate the block starting at FIRST and ending with LAST, which is\n-   logically equivalent to EQUIV, so it gets manipulated as a unit if it\n-   is possible to do so.  */\n-\n-void\n-maybe_encapsulate_block (rtx first, rtx last, rtx equiv)\n-{\n-  if (!flag_non_call_exceptions || !may_trap_p (equiv))\n-    {\n-      /* We can't attach the REG_LIBCALL and REG_RETVAL notes when the\n-\t encapsulated region would not be in one basic block, i.e. when\n-\t there is a control_flow_insn_p insn between FIRST and LAST.  */\n-      bool attach_libcall_retval_notes = true;\n-      rtx insn, next = NEXT_INSN (last);\n-\n-      for (insn = first; insn != next; insn = NEXT_INSN (insn))\n-\tif (control_flow_insn_p (insn))\n-\t  {\n-\t    attach_libcall_retval_notes = false;\n-\t    break;\n-\t  }\n-\n-      if (attach_libcall_retval_notes)\n-\t{\n-\t  REG_NOTES (first) = gen_rtx_INSN_LIST (REG_LIBCALL, last,\n-\t\t\t\t\t\t REG_NOTES (first));\n-\t  REG_NOTES (last) = gen_rtx_INSN_LIST (REG_RETVAL, first,\n-\t\t\t\t\t\tREG_NOTES (last));\n-\t}\n-    }\n-}\n-\n \f\n /* Emit code to make a call to a constant function or a library call.\n \n@@ -3872,25 +3840,13 @@ maybe_encapsulate_block (rtx first, rtx last, rtx equiv)\n    loading constants into registers; doing so allows them to be safely cse'ed\n    between blocks.  Then we emit all the other insns in the block, followed by\n    an insn to move RESULT to TARGET.  This last insn will have a REQ_EQUAL\n-   note with an operand of EQUIV.\n-\n-   Moving assignments to pseudos outside of the block is done to improve\n-   the generated code, but is not required to generate correct code,\n-   hence being unable to move an assignment is not grounds for not making\n-   a libcall block.  There are two reasons why it is safe to leave these\n-   insns inside the block: First, we know that these pseudos cannot be\n-   used in generated RTL outside the block since they are created for\n-   temporary purposes within the block.  Second, CSE will not record the\n-   values of anything set inside a libcall block, so we know they must\n-   be dead at the end of the block.\n-\n-   Except for the first group of insns (the ones setting pseudos), the\n-   block is delimited by REG_RETVAL and REG_LIBCALL notes.  */\n+   note with an operand of EQUIV.  */\n+\n void\n emit_libcall_block (rtx insns, rtx target, rtx result, rtx equiv)\n {\n   rtx final_dest = target;\n-  rtx prev, next, first, last, insn;\n+  rtx prev, next, last, insn;\n \n   /* If this is a reg with REG_USERVAR_P set, then it could possibly turn\n      into a MEM later.  Protect the libcall block from this change.  */\n@@ -3936,14 +3892,6 @@ emit_libcall_block (rtx insns, rtx target, rtx result, rtx equiv)\n   for (insn = insns; insn; insn = next)\n     {\n       rtx set = single_set (insn);\n-      rtx note;\n-\n-      /* Some ports (cris) create a libcall regions at their own.  We must\n-\t avoid any potential nesting of LIBCALLs.  */\n-      if ((note = find_reg_note (insn, REG_LIBCALL, NULL)) != NULL)\n-\tremove_note (insn, note);\n-      if ((note = find_reg_note (insn, REG_RETVAL, NULL)) != NULL)\n-\tremove_note (insn, note);\n \n       next = NEXT_INSN (insn);\n \n@@ -3992,25 +3940,9 @@ emit_libcall_block (rtx insns, rtx target, rtx result, rtx equiv)\n   if (optab_handler (mov_optab, GET_MODE (target))->insn_code\n       != CODE_FOR_nothing)\n     set_unique_reg_note (last, REG_EQUAL, copy_rtx (equiv));\n-  else\n-    {\n-      /* Remove any existing REG_EQUAL note from \"last\", or else it will\n-\t be mistaken for a note referring to the full contents of the\n-\t libcall value when found together with the REG_RETVAL note added\n-\t below.  An existing note can come from an insn expansion at\n-\t \"last\".  */\n-      remove_note (last, find_reg_note (last, REG_EQUAL, NULL_RTX));\n-    }\n \n   if (final_dest != target)\n     emit_move_insn (final_dest, target);\n-\n-  if (prev == 0)\n-    first = get_insns ();\n-  else\n-    first = NEXT_INSN (prev);\n-\n-  maybe_encapsulate_block (first, last, equiv);\n }\n \f\n /* Nonzero if we can perform a comparison of mode MODE straightforwardly."}, {"sha": "426b0d845fd7e05b08aae06b38086d09922accbd", "filename": "gcc/optabs.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856905c263d25f1acdc580a3ebfa6111da9868b8/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856905c263d25f1acdc580a3ebfa6111da9868b8/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=856905c263d25f1acdc580a3ebfa6111da9868b8", "patch": "@@ -723,10 +723,6 @@ extern rtx expand_copysign (rtx, rtx, rtx);\n    an input.  */\n extern void emit_unop_insn (int, rtx, rtx, enum rtx_code);\n \n-/* Excapsulate the block in REG_LIBCALL, and REG_RETVAL reg notes and add \n-   REG_LIBCALL_ID notes to all insns in block.  */\n-extern void maybe_encapsulate_block (rtx, rtx, rtx);\n-\n /* Emit one rtl insn to compare two rtx's.  */\n extern void emit_cmp_insn (rtx, rtx, enum rtx_code, rtx, enum machine_mode,\n \t\t\t   int);"}]}