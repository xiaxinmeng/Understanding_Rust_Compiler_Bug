{"sha": "297a6bfc7005b8a217b6f33dc7b781f778795a85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk3YTZiZmM3MDA1YjhhMjE3YjZmMzNkYzdiNzgxZjc3ODc5NWE4NQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-10-09T10:08:26Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-10-09T10:08:26Z"}, "message": "Warning fixes:\n\n        * ch-tree.h (build_delay_case_end): Remove unused parameter.\n        (build_receive_case_end): Likewise.\n        (check_queue_size): Likewise.\n        * parse.c: Callers changed.\n        * satisfy.c: Likewise.\n        * tasking.c (build_receive_buffer_case_end): Remove unused\n        parameter `label_cnt'.\n        (build_receive_signal_case_end): Likewise.\n        (build_receive_case_end): Likewise.\n        (build_delay_case_end): Likewise.\n        (check_queue_size): Likewise for parameter `type'.\n        All callers changed.\n\nFrom-SVN: r22957", "tree": {"sha": "1ff56064156ceccf8d0cb86fc34a3866c06703ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ff56064156ceccf8d0cb86fc34a3866c06703ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/297a6bfc7005b8a217b6f33dc7b781f778795a85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/297a6bfc7005b8a217b6f33dc7b781f778795a85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/297a6bfc7005b8a217b6f33dc7b781f778795a85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/297a6bfc7005b8a217b6f33dc7b781f778795a85/comments", "author": null, "committer": null, "parents": [{"sha": "f9fad1f531a1d63bd59327be6ce1b064f335dbde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9fad1f531a1d63bd59327be6ce1b064f335dbde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9fad1f531a1d63bd59327be6ce1b064f335dbde"}], "stats": {"total": 55, "additions": 36, "deletions": 19}, "files": [{"sha": "045fa2a5333706d2e83128e8d83c39339b85daaf", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/297a6bfc7005b8a217b6f33dc7b781f778795a85/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/297a6bfc7005b8a217b6f33dc7b781f778795a85/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=297a6bfc7005b8a217b6f33dc7b781f778795a85", "patch": "@@ -1,3 +1,21 @@\n+Fri Oct  9 13:01:23 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* ch-tree.h (build_delay_case_end): Remove unused parameter.\n+\t(build_receive_case_end): Likewise.\n+\t(check_queue_size): Likewise.\n+\n+\t* parse.c: Callers changed.\n+\n+\t* satisfy.c: Likewise.\n+\n+\t* tasking.c (build_receive_buffer_case_end): Remove unused\n+\tparameter `label_cnt'.\n+\t(build_receive_signal_case_end): Likewise.\n+\t(build_receive_case_end): Likewise.\n+\t(build_delay_case_end): Likewise.\n+\t(check_queue_size): Likewise for parameter `type'.\n+\tAll callers changed.\n+\n Thu Oct  8 05:57:41 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* typeck (type_for_mode): Only return TItype nodes when"}, {"sha": "e1c399bcdfb45c12ab99e874a9cde5e555c438af", "filename": "gcc/ch/ch-tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/297a6bfc7005b8a217b6f33dc7b781f778795a85/gcc%2Fch%2Fch-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/297a6bfc7005b8a217b6f33dc7b781f778795a85/gcc%2Fch%2Fch-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fch-tree.h?ref=297a6bfc7005b8a217b6f33dc7b781f778795a85", "patch": "@@ -1038,10 +1038,10 @@ extern tree build_buffer_descriptor             PROTO((tree, tree, tree));\n extern tree build_buffer_type                   PROTO((tree, tree));\n extern void build_delay_action                  PROTO((tree, tree));\n extern tree build_delay_case_start              PROTO((tree, tree));\n-extern void build_delay_case_end                PROTO((tree, tree));\n+extern void build_delay_case_end                PROTO((tree));\n extern void build_delay_case_label              PROTO((tree, int));\n extern tree build_event_type                    PROTO((tree));\n-extern void build_receive_case_end              PROTO((tree, tree, tree));\n+extern void build_receive_case_end              PROTO((tree, tree));\n extern int  build_receive_case_if_generated     PROTO((void));\n extern tree build_receive_case_label            PROTO((tree, tree));\n extern tree build_receive_case_start            PROTO((tree));\n@@ -1062,7 +1062,7 @@ extern tree build_signal_descriptor             PROTO((tree, tree));\n extern tree build_signal_struct_type            PROTO((tree, tree, tree));\n extern tree build_tasking_struct                PROTO((void));\n extern tree chill_taskingcode_type_node;\n-extern tree check_queue_size                    PROTO((tree, tree));\n+extern tree check_queue_size                    PROTO((tree));\n extern tree generate_tasking_code_variable      PROTO((tree, tree *, int));\n extern tree get_signal_type_name                PROTO((tree));\n extern tree get_struct_type_name                PROTO((tree));"}, {"sha": "7a9ae3dbfa92f75de116e553aa7d9784de2a0154", "filename": "gcc/ch/parse.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/297a6bfc7005b8a217b6f33dc7b781f778795a85/gcc%2Fch%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/297a6bfc7005b8a217b6f33dc7b781f778795a85/gcc%2Fch%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fparse.c?ref=297a6bfc7005b8a217b6f33dc7b781f778795a85", "patch": "@@ -2205,7 +2205,7 @@ parse_delay_case_action (label)\n     }\n   expect (ESAC, \"missing 'ESAC' in DELAY CASE'\");\n   if (! ignoring)\n-    build_delay_case_end (label_cnt, combined_event_list);\n+    build_delay_case_end (combined_event_list);\n   possibly_define_exit_label (label);\n   poplevel (0, 0, 0); \n }\n@@ -2436,8 +2436,7 @@ parse_receive_case_action (label)\n   expect (ESAC, \"missing 'ESAC' matching 'RECEIVE CASE'\");\n   if (! ignoring)\n     {\n-      build_receive_case_end (instance_location, nreverse (alt_list),\n-\t\t\t      have_else_actions);\n+      build_receive_case_end (nreverse (alt_list), have_else_actions);\n     }\n   possibly_define_exit_label (label);\n   poplevel (0, 0, 0); "}, {"sha": "634ee79241aae9fd79559e18b2d6518645eb2d50", "filename": "gcc/ch/satisfy.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/297a6bfc7005b8a217b6f33dc7b781f778795a85/gcc%2Fch%2Fsatisfy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/297a6bfc7005b8a217b6f33dc7b781f778795a85/gcc%2Fch%2Fsatisfy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fsatisfy.c?ref=297a6bfc7005b8a217b6f33dc7b781f778795a85", "patch": "@@ -560,7 +560,7 @@ satisfy (exp, chain)\n \t\t      {\n \t\t\tif (CH_IS_BUFFER_MODE (exp) || CH_IS_EVENT_MODE (exp))\n \t\t\t  DECL_INITIAL (decl)\n-\t\t\t    = check_queue_size (exp, DECL_INITIAL (decl));\n+\t\t\t    = check_queue_size (DECL_INITIAL (decl));\n \t\t\telse if (CH_IS_TEXT_MODE (exp) &&\n \t\t\t\t DECL_NAME (decl) == get_identifier (\"__textlength\"))\n \t\t\t  DECL_INITIAL (decl)"}, {"sha": "c07d325c094df095fce64b966c08f33caabb0b01", "filename": "gcc/ch/tasking.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/297a6bfc7005b8a217b6f33dc7b781f778795a85/gcc%2Fch%2Ftasking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/297a6bfc7005b8a217b6f33dc7b781f778795a85/gcc%2Fch%2Ftasking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftasking.c?ref=297a6bfc7005b8a217b6f33dc7b781f778795a85", "patch": "@@ -2085,8 +2085,8 @@ build_receive_case_label (signame, loclist)\n  * BUFFER location and TREE_PURPOSE defines the defining occurence.\n  */\n static void\n-build_receive_buffer_case_end (label_cnt, buf_list, else_clause)\n-     tree label_cnt, buf_list, else_clause;\n+build_receive_buffer_case_end (buf_list, else_clause)\n+     tree buf_list, else_clause;\n {\n   struct rc_state_type *rc_state = current_rc_state;\n   tree alist;\n@@ -2185,8 +2185,8 @@ build_receive_buffer_case_end (label_cnt, buf_list, else_clause)\n  * case-label counter passed from build_receive_case_start.\n  */\n static void\n-build_receive_signal_case_end (label_cnt, sig_list, else_clause)\n-     tree label_cnt, sig_list, else_clause;\n+build_receive_signal_case_end (sig_list, else_clause)\n+     tree sig_list, else_clause;\n {\n   struct rc_state_type *rc_state = current_rc_state;\n   tree alist, temp1;\n@@ -2285,8 +2285,8 @@ build_receive_signal_case_end (label_cnt, sig_list, else_clause)\n /* General function for the end of a RECEIVE CASE action */\n \n void\n-build_receive_case_end (label_cnt, alist, else_clause)\n-     tree label_cnt, alist, else_clause;\n+build_receive_case_end (alist, else_clause)\n+     tree alist, else_clause;\n {\n   rtx rcdone = gen_label_rtx ();\n   struct rc_state_type *rc_state = current_rc_state;\n@@ -2322,9 +2322,9 @@ build_receive_case_end (label_cnt, alist, else_clause)\n \n   /* now call the actual end function */\n   if (rc_state->bufseen)\n-    build_receive_buffer_case_end (label_cnt, alist, else_clause);\n+    build_receive_buffer_case_end (alist, else_clause);\n   else\n-    build_receive_signal_case_end (label_cnt, alist, else_clause);\n+    build_receive_signal_case_end (alist, else_clause);\n \n   /* now jump to the beginning of RECEIVE CASE processing */\n gen_rcdoit: ;\n@@ -2594,8 +2594,8 @@ build_delay_case_label (eventlist, if_or_elseif)\n  * passed from build_delay_case_start.\n  */\n void\n-build_delay_case_end (label_cnt, event_list)\n-     tree label_cnt, event_list;\n+build_delay_case_end (event_list)\n+     tree event_list;\n {\n   struct dl_state_type *dl_state = current_dl_state;\n   rtx    dldone          = gen_label_rtx ();\n@@ -3209,8 +3209,8 @@ invalidate_buffer_element_mode (bufmode)\n    perform various error checks.  Return a new queue size. */\n \n tree\n-check_queue_size (type, qsize)\n-     tree type, qsize;\n+check_queue_size (qsize)\n+     tree qsize;\n {\n   if (qsize == NULL_TREE || TREE_CODE (qsize) == ERROR_MARK)\n     return qsize;"}]}