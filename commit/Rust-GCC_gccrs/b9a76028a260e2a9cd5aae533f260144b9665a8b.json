{"sha": "b9a76028a260e2a9cd5aae533f260144b9665a8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjlhNzYwMjhhMjYwZTJhOWNkNWFhZTUzM2YyNjAxNDRiOTY2NWE4Yg==", "commit": {"author": {"name": "Mark Shinwell", "email": "shinwell@codesourcery.com", "date": "2006-12-08T16:37:42Z"}, "committer": {"name": "Mark Shinwell", "email": "shinwell@gcc.gnu.org", "date": "2006-12-08T16:37:42Z"}, "message": "recog.c (mode_dependent_address_p): Identify pre-increment...\n\n\tgcc/\n\t* recog.c (mode_dependent_address_p): Identify pre-increment,\n\tpre-decrement, post-increment and post-decrement addressing as always\n\tbeing mode-dependent.\n\t* config/m32c/m32c.c (m32c_mode_dependent_address): Delete.\n\t* config/m32c/m32c.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n\t* config/m32c/m32c-protos.h (m32c_mode_dependent_address): Delete.\n\t* config/m32r/m32r.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete PRE_DEC,\n\tPRE_INC and POST_INC checks.\n\t* config/i386/i386.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n\t* config/sh/sh.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n\t* config/pdp11/pdp11.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n\t* config/avr/avr.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n\t* config/c4x/c4x.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete PRE_DEC,\n\tPRE_INC, POST_DEC and POST_INC cases.\n\t* config/stormy16/stormy16.c (xstormy16_mode_dependent_address_p):\n\tDelete POST_INC and PRE_DEC cases.\n\t* config/m68hc11/m68hc11.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to\n\tno-op.\n\t* config/cris/cris.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n\t* config/mn10300/mn10300.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to\n\tno-op.\n\t* config/ia64/ia64.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n\t* config/m68k/m68k.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n\t* config/rs6000/rs6000.c (rs6000_mode_dependent_address): Delete\n\tPRE_INC and PRE_DEC cases.\n\t* config/arc/arc.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n\t* config/mcore/mcore.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n\t* config/arm/arm.h (ARM_GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t(GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n\t* config/pa/pa.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n\t* config/vax/vax.c (vax_mode_dependent_address_p): Delete\n\tauto-increment cases.\n\t* config/h8300/h8300.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete\n\tauto-increment cases.\n\t* config/bfin/bfin.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n\t\n\tgcc/testsuite/\n\t* gcc.c-torture/execute/mode-dependent-address.c: New test.\n\nFrom-SVN: r119660", "tree": {"sha": "cb12e5af227339490abf2dd166a38d46008b2ef1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb12e5af227339490abf2dd166a38d46008b2ef1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9a76028a260e2a9cd5aae533f260144b9665a8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9a76028a260e2a9cd5aae533f260144b9665a8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9a76028a260e2a9cd5aae533f260144b9665a8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9a76028a260e2a9cd5aae533f260144b9665a8b/comments", "author": null, "committer": null, "parents": [{"sha": "00509c04eeb8e0656ed93021c905293e1d01dc64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00509c04eeb8e0656ed93021c905293e1d01dc64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00509c04eeb8e0656ed93021c905293e1d01dc64"}], "stats": {"total": 246, "additions": 134, "deletions": 112}, "files": [{"sha": "ca6a05fa5858e2670e6740a8affe5d4cd87de2b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -1,3 +1,41 @@\n+2006-12-08  Mark Shinwell  <shinwell@codesourcery.com>\n+\n+\t* recog.c (mode_dependent_address_p): Identify pre-increment,\n+\tpre-decrement, post-increment and post-decrement addressing as always\n+\tbeing mode-dependent.\n+\t* config/m32c/m32c.c (m32c_mode_dependent_address): Delete.\n+\t* config/m32c/m32c.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n+\t* config/m32c/m32c-protos.h (m32c_mode_dependent_address): Delete.\n+\t* config/m32r/m32r.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete PRE_DEC,\n+\tPRE_INC and POST_INC checks.\n+\t* config/i386/i386.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n+\t* config/sh/sh.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n+\t* config/pdp11/pdp11.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n+\t* config/avr/avr.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n+\t* config/c4x/c4x.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete PRE_DEC,\n+\tPRE_INC, POST_DEC and POST_INC cases.\n+\t* config/stormy16/stormy16.c (xstormy16_mode_dependent_address_p):\n+\tDelete POST_INC and PRE_DEC cases.\n+\t* config/m68hc11/m68hc11.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to\n+\tno-op.\n+\t* config/cris/cris.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n+\t* config/mn10300/mn10300.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to\n+\tno-op.\n+\t* config/ia64/ia64.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n+\t* config/m68k/m68k.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n+\t* config/rs6000/rs6000.c (rs6000_mode_dependent_address): Delete\n+\tPRE_INC and PRE_DEC cases.\n+\t* config/arc/arc.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n+\t* config/mcore/mcore.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n+\t* config/arm/arm.h (ARM_GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t(GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n+\t* config/pa/pa.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n+\t* config/vax/vax.c (vax_mode_dependent_address_p): Delete\n+\tauto-increment cases.\n+\t* config/h8300/h8300.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete\n+\tauto-increment cases.\n+\t* config/bfin/bfin.h (GO_IF_MODE_DEPENDENT_ADDRESS): Change to no-op.\n+\n 2006-12-08  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* Makefile.in: Add new file tree-ssa-ter.c."}, {"sha": "9b9f2d6eec6530a9448a2da5ece4bc92f4ca8a75", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -799,12 +799,7 @@ do { \\\n \n /* Go to LABEL if ADDR (a legitimate address expression)\n    has an effect that depends on the machine mode it is used for.  */\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL) \\\n-{ if (GET_CODE (ADDR) == PRE_DEC)\t\\\n-    goto LABEL;\t\t\t\t\\\n-  if (GET_CODE (ADDR) == PRE_INC)\t\\\n-    goto LABEL;\t\t\t\t\\\n-}\n+#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\n \f\n /* Given a comparison code (EQ, NE, etc.) and the first operand of a COMPARE,\n    return the mode to be used for the comparison.  */"}, {"sha": "724a213be32f2da5567ac70ae2023d286c2df984", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -423,9 +423,7 @@ do {\t\t\t\t\t\t\t\t\t    \\\n     }\t\t\t\t\t\t\t\t\t    \\\n } while(0)\n \n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\t\t\t\\\n-      if (GET_CODE (ADDR) == POST_INC || GET_CODE (ADDR) == PRE_DEC)\t\\\n-        goto LABEL\n+#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n \n #define LEGITIMATE_CONSTANT_P(X) 1\n "}, {"sha": "9b9b78aa119f53946295d8c184dfcf1c7cead5dc", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -827,13 +827,7 @@ do {\t\t\t\t\t       \\\n \n      You may assume that ADDR is a valid address for the machine.\n */\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)  \\\n-do {                                              \\\n- if (GET_CODE (ADDR) == POST_INC                  \\\n-     || GET_CODE (ADDR) == POST_DEC               \\\n-     || GET_CODE (ADDR) == PRE_DEC)               \\\n-   goto LABEL;\t\t\t\t\t  \\\n-} while (0)\n+#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n \n #define NOTICE_UPDATE_CC(EXPR, INSN) 0\n "}, {"sha": "6df7ac8fba16353ea1f2f9a857e80ca87aebeb3b", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -1156,13 +1156,8 @@ CUMULATIVE_ARGS;\n }\n \n /* No mode-dependent addresses on the C4x are autoincrements.  */\n-\n #define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\t\\\n-  if (GET_CODE (ADDR) == PRE_DEC\t\\\n-      || GET_CODE (ADDR) == POST_DEC\t\\\n-      || GET_CODE (ADDR) == PRE_INC\t\\\n-      || GET_CODE (ADDR) == POST_INC\t\\\n-      || GET_CODE (ADDR) == POST_MODIFY\t\\\n+  if (GET_CODE (ADDR) == POST_MODIFY\t\\\n       || GET_CODE (ADDR) == PRE_MODIFY)\t\\\n     goto LABEL\n "}, {"sha": "88bc3e1e53a864626f586c6bcc0de0b7d3ad9296", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -1065,14 +1065,9 @@ struct cum_args {int regs;};\n   while (0)\n \n /* In CRIS, only the postincrement address mode depends thus,\n-   since the increment depends on the size of the operand.  */\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      if (GET_CODE (ADDR) == POST_INC)\t\t\t\\\n-\tgoto LABEL;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  while (0)\n+   since the increment depends on the size of the operand.  This is now\n+   treated generically within recog.c.  */\n+#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\n \n #define LEGITIMATE_CONSTANT_P(X) 1\n "}, {"sha": "d482bb31be790dab5580c54fc11328f42c530664", "filename": "gcc/config/crx/crx.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fcrx%2Fcrx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fcrx%2Fcrx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcrx%2Fcrx.h?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -405,11 +405,7 @@ struct cumulative_args\n }\n #endif /* REG_OK_STRICT */\n \n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (GET_CODE (ADDR) == POST_INC || GET_CODE (ADDR) == POST_DEC)\t\\\n-    goto LABEL;\t\t\t\t\t\t\t\t\\\n-}\n+#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\n \n #define LEGITIMATE_CONSTANT_P(X)  1\n "}, {"sha": "7c9a2414bdf5952dee8040bf7a3e2fecccee8a12", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -939,11 +939,6 @@ struct cum_arg\n    (the amount of decrement or increment being the length of the operand).  */\n \n #define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL) \\\n-  if (GET_CODE (ADDR) == POST_INC \\\n-      || GET_CODE (ADDR) == POST_DEC \\\n-      || GET_CODE (ADDR) == PRE_INC \\\n-      || GET_CODE (ADDR) == PRE_DEC) \\\n-    goto LABEL; \\\n   if (GET_CODE (ADDR) == PLUS \\\n       && h8300_get_index (XEXP (ADDR, 0), VOIDmode, 0) != XEXP (ADDR, 0)) \\\n     goto LABEL;"}, {"sha": "dc15a2b808a52ca9460dd045a5361138b6ec63cb", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -1767,13 +1767,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Go to LABEL if ADDR (a legitimate address expression)\n    has an effect that depends on the machine mode it is used for.\n    On the 80386, only postdecrement and postincrement address depend thus\n-   (the amount of decrement or increment being the length of the operand).  */\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\t\\\n-do {\t\t\t\t\t\t\t\\\n- if (GET_CODE (ADDR) == POST_INC\t\t\t\\\n-     || GET_CODE (ADDR) == POST_DEC)\t\t\t\\\n-   goto LABEL;\t\t\t\t\t\t\\\n-} while (0)\n+   (the amount of decrement or increment being the length of the operand).\n+   These are now caught in recog.c.  */\n+#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\n \f\n /* Max number of args passed in registers.  If this is more than 3, we will\n    have problems with ebx (register #4), since it is a caller save register and"}, {"sha": "c6d2c0df6f27eef829bf7a969987c126bd50234f", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -1406,9 +1406,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    on the machine mode of the memory reference it is used for or if the address\n    is valid for some modes but not others.  */\n \n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\t\t\t\\\n-  if (GET_CODE (ADDR) == POST_DEC || GET_CODE (ADDR) == POST_INC)\t\\\n-    goto LABEL;\n+#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\n \n /* A C expression that is nonzero if X is a legitimate constant for an\n    immediate operand on the target machine.  */"}, {"sha": "4b3ead37c3ed870ba5a580130765f84ebdd5dc4f", "filename": "gcc/config/m32c/m32c-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -84,7 +84,6 @@ int  m32c_legitimize_reload_address (rtx *, MM, int, int, int);\n rtx  m32c_libcall_value (MM);\n int  m32c_limit_reload_class (MM, int);\n int  m32c_memory_move_cost (MM, int, int);\n-int  m32c_mode_dependent_address (rtx);\n int  m32c_modes_tieable_p (MM, MM);\n bool m32c_mov_ok (rtx *, MM);\n char * m32c_output_compare (rtx, rtx *);"}, {"sha": "de5f22aa6db99240685912effad1b794aec5eab9", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -2018,15 +2018,6 @@ m32c_legitimize_reload_address (rtx * x,\n   return 0;\n }\n \n-/* Used in GO_IF_MODE_DEPENDENT_ADDRESS.  */\n-int\n-m32c_mode_dependent_address (rtx addr)\n-{\n-  if (GET_CODE (addr) == POST_INC || GET_CODE (addr) == PRE_DEC)\n-    return 1;\n-  return 0;\n-}\n-\n /* Implements LEGITIMATE_CONSTANT_P.  We split large constants anyway,\n    so we can allow anything.  */\n int"}, {"sha": "1055464406736b73949a58d8adce488155d539cd", "filename": "gcc/config/m32c/m32c.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fm32c%2Fm32c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fm32c%2Fm32c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.h?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -568,9 +568,7 @@ typedef struct m32c_cumulative_args\n \tif (m32c_legitimize_reload_address(&(X),MODE,OPNUM,TYPE,IND_LEVELS)) \\\n \t  goto win;\n \n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL) \\\n-\tif (m32c_mode_dependent_address (ADDR)) \\\n-\t  goto LABEL;\n+#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n \n #define LEGITIMATE_CONSTANT_P(X) m32c_legitimate_constant_p (X)\n "}, {"sha": "b4c9ae6f4b9decc1cf34ecfc4731134ad938d4f1", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -1267,10 +1267,7 @@ L2:     .word STATIC\n #define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t \t\t\\\n-      if (   GET_CODE (ADDR) == PRE_DEC\t\t \t\t\\\n-\t  || GET_CODE (ADDR) == PRE_INC\t\t \t\t\\\n-\t  || GET_CODE (ADDR) == POST_INC\t\t \t\\\n-\t  || GET_CODE (ADDR) == LO_SUM)\t\t \t\t\\\n+      if (GET_CODE (ADDR) == LO_SUM)\t\t \t\t\\\n \tgoto LABEL;\t\t\t\t\t \t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)"}, {"sha": "a1dc509f11cdcd66697f1aae716b2d6922d2c419", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -1239,12 +1239,7 @@ extern unsigned char m68hc11_reg_valid_for_index[FIRST_PSEUDO_REGISTER];\n \n /* Go to LABEL if ADDR (a legitimate address expression)\n    has an effect that depends on the machine mode it is used for.  */\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)  \\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (GET_CODE (ADDR) == PRE_DEC || GET_CODE (ADDR) == POST_DEC\t\t\\\n-      || GET_CODE (ADDR) == PRE_INC || GET_CODE (ADDR) == POST_INC)\t\\\n-    goto LABEL;\t\t\t\t\t\t\t\t\\\n-}\n+#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n \n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */"}, {"sha": "0a04beb20b991684abf319b14767cf2f51060b3a", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -845,9 +845,9 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n \t  goto WIN; }}}\n \n /* On the 68000, only predecrement and postincrement address depend thus\n-   (the amount of decrement or increment being the length of the operand).  */\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\t\\\n- if (GET_CODE (ADDR) == POST_INC || GET_CODE (ADDR) == PRE_DEC) goto LABEL\n+   (the amount of decrement or increment being the length of the operand).\n+   These are now treated generically in recog.c.  */\n+#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n \f\n #define CASE_VECTOR_MODE HImode\n #define CASE_VECTOR_PC_RELATIVE 1"}, {"sha": "5e2d8ca4c9cd51ce96b17c4d123d9091a294a965", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -786,12 +786,7 @@ extern const enum reg_class reg_class_from_letter[];\n \t\t\t\t\t\t\t\t   \n /* Go to LABEL if ADDR (a legitimate address expression)\n    has an effect that depends on the machine mode it is used for.  */\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)  \\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (   GET_CODE (ADDR) == PRE_DEC || GET_CODE (ADDR) == POST_DEC\t\\\n-      || GET_CODE (ADDR) == PRE_INC || GET_CODE (ADDR) == POST_INC)\t\\\n-    goto LABEL;\t\t\t\t\t\t\t\t\\\n-}\n+#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n \n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.  */"}, {"sha": "6c51152248d071172031f52d48f8e594ce351242", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -779,9 +779,7 @@ while (0)\n /* Go to LABEL if ADDR (a legitimate address expression)\n    has an effect that depends on the machine mode it is used for.  */\n \n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)        \\\n-  if (GET_CODE (ADDR) == POST_INC) \\\n-    goto LABEL\n+#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n \n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */"}, {"sha": "f463fafe3b818f2f8d569e03baaa9ce939cf329a", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -1560,12 +1560,7 @@ do { \t\t\t\t\t\t\t\t\t\\\n /* Go to LABEL if ADDR (a legitimate address expression)\n    has an effect that depends on the machine mode it is used for.  */\n \n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\t\\\n-  if (GET_CODE (ADDR) == PRE_DEC\t\\\n-      || GET_CODE (ADDR) == POST_DEC\t\\\n-      || GET_CODE (ADDR) == PRE_INC\t\\\n-      || GET_CODE (ADDR) == POST_INC)\t\\\n-    goto LABEL\n+#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n \f\n #define TARGET_ASM_SELECT_SECTION  pa_select_section\n "}, {"sha": "2850fc2a53a207818f56b08b2dad8079a1a1f5df", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -760,12 +760,10 @@ extern int may_call_alloca;\n \f\n /* Go to LABEL if ADDR (a legitimate address expression)\n    has an effect that depends on the machine mode it is used for.\n-   On the pdp this is for predec/postinc */\n+   On the pdp this is for predec/postinc, and this is now treated\n+   generically in recog.c.  */\n \n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\t\\\n- { if (GET_CODE (ADDR) == POST_INC || GET_CODE (ADDR) == PRE_DEC)\t\\\n-     goto LABEL; \t\t\t\t\t\t\t\\\n- }\n+#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n \n \f\n /* Specify the machine mode that this machine uses"}, {"sha": "a7734839eabf9000c66a689368b1c2b85f1cd639", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -3766,9 +3766,7 @@ rs6000_mode_dependent_address (rtx addr)\n     case LO_SUM:\n       return true;\n \n-    case PRE_INC:\n-    case PRE_DEC:\n-      return TARGET_UPDATE;\n+    /* Auto-increment cases are now treated generically in recog.c.  */\n \n     default:\n       break;"}, {"sha": "ae9d8f9ca1aa88c2528170a3c21aa6fba9c786a2", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -2802,13 +2802,11 @@ struct sh_args {\n    ??? Strictly speaking, we should also include all indexed addressing,\n    because the index scale factor is the length of the operand.\n    However, the impact of GO_IF_MODE_DEPENDENT_ADDRESS would be to\n-   high if we did that.  So we rely on reload to fix things up.  */\n+   high if we did that.  So we rely on reload to fix things up.\n \n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (GET_CODE(ADDR) == PRE_DEC || GET_CODE(ADDR) == POST_INC)\t\t\\\n-    goto LABEL;\t\t\t\t\t\t\t\t\\\n-}\n+   Auto-increment addressing is now treated in recog.c.  */\n+\n+#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n \f\n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.  */"}, {"sha": "5f8be4302bfa9ef3e5366f23655d48e11ee3c91c", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -707,9 +707,7 @@ xstormy16_mode_dependent_address_p (rtx x)\n   if (GET_CODE (x) == PLUS)\n     x = XEXP (x, 0);\n \n-  if (GET_CODE (x) == POST_INC\n-      || GET_CODE (x) == PRE_DEC)\n-    return 1;\n+  /* Auto-increment addresses are now treated generically in recog.c.  */\n \n   return 0;\n }"}, {"sha": "5ce9ad370abe5a2edc149441ad59198fdd799127", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -1306,8 +1306,8 @@ vax_mode_dependent_address_p (rtx x)\n {\n   rtx xfoo0, xfoo1;\n \n-  if (GET_CODE (x) == POST_INC || GET_CODE (x) == PRE_DEC)\n-    return 1;\n+  /* Auto-increment cases are now dealt with generically in recog.c.  */\n+\n   if (GET_CODE (x) != PLUS)\n     return 0;\n "}, {"sha": "a7dc869e7ee1d478061a2200f0ec5d52d5919188", "filename": "gcc/recog.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -1983,8 +1983,17 @@ offsettable_address_p (int strictp, enum machine_mode mode, rtx y)\n    because the amount of the increment depends on the mode.  */\n \n int\n-mode_dependent_address_p (rtx addr ATTRIBUTE_UNUSED /* Maybe used in GO_IF_MODE_DEPENDENT_ADDRESS.  */)\n-{\n+mode_dependent_address_p (rtx addr)\n+{\n+  /* Auto-increment addressing with anything other than post_modify\n+     or pre_modify always introduces a mode dependency.  Catch such\n+     cases now instead of deferring to the target.  */\n+  if (GET_CODE (addr) == PRE_INC\n+      || GET_CODE (addr) == POST_INC\n+      || GET_CODE (addr) == PRE_DEC\n+      || GET_CODE (addr) == POST_DEC)\n+    return 1;\n+\n   GO_IF_MODE_DEPENDENT_ADDRESS (addr, win);\n   return 0;\n   /* Label `win' might (not) be used via GO_IF_MODE_DEPENDENT_ADDRESS.  */"}, {"sha": "c86dcd2704d01997ec637cb58c01358edd1a0cc4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -1,3 +1,7 @@\n+2006-12-08  Mark Shinwell  <shinwell@codesourcery.com>\n+\n+\t* gcc.c-torture/execute/mode-dependent-address.c: New test.\n+\n 2006-12-08  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/27546"}, {"sha": "5bf840cf27c21370cf46f9ea4e88280b389c6c96", "filename": "gcc/testsuite/gcc.c-torture/execute/mode-dependent-address.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmode-dependent-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a76028a260e2a9cd5aae533f260144b9665a8b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmode-dependent-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmode-dependent-address.c?ref=b9a76028a260e2a9cd5aae533f260144b9665a8b", "patch": "@@ -0,0 +1,49 @@\n+#include <stdint.h>\n+#include <string.h>\n+#include <stdlib.h>\n+\n+void f883b (int8_t * result,\n+    int16_t * __restrict arg1,\n+    uint32_t * __restrict arg2,\n+    uint64_t * __restrict arg3,\n+    uint8_t * __restrict arg4)\n+{\n+    int idx;\n+    for (idx=0;idx<96;idx += 1) {\n+\tresult[idx] = (((((((((((-27 + 2+1)>>1) || arg4[idx]) < arg1[idx])\n+\t\t\t\t? (((-27 + 2+1)>>1) || arg4[idx])\n+\t\t\t\t: arg1[idx])\n+\t\t\t       >> (arg2[idx] & 31)) ^ 1) - -32)>>7) | -5) & arg3[idx]);\n+    }\n+}\n+\n+int8_t result[96];\n+int16_t arg1[96];\n+uint32_t arg2[96];\n+uint64_t arg3[96];\n+uint8_t arg4[96];\n+\n+int main (void) \n+{\n+  int i;\n+  int correct[] = {0x0,0x1,0x2,0x3,0x0,0x1,0x2,0x3,0x8,0x9,0xa,0xb,0x8,0x9,\n+                   0xa,0xb,0x10,0x11,0x12,0x13,0x10,0x11,0x12,0x13,\n+                   0x18,0x19,0x1a,0x1b,0x18,0x19,0x1a,0x1b,0x20,0x21,0x22,\n+                   0x23,0x20,0x21,0x22,0x23,0x28,0x29,0x2a,\n+                   0x2b,0x28,0x29,0x2a,0x2b,0x30,0x31,0x32,0x33,\n+                   0x30,0x31,0x32,0x33,0x38,0x39,0x3a,0x3b,0x38,0x39,0x3a,\n+                   0x3b,0x40,0x41,0x42,0x43,0x40,0x41,0x42,0x43,0x48,0x49,\n+                   0x4a,0x4b,0x48,0x49,0x4a,0x4b,0x50,0x51,\n+                   0x52,0x53,0x50,0x51,0x52,0x53,0x58,0x59,0x5a,0x5b,\n+                   0x58,0x59,0x5a,0x5b};\n+\n+  for (i=0; i < 96; i++)\n+    arg3[i] = arg2[i] = arg1[i] = arg4[i] = i;\n+\n+  f883b(result, arg1, arg2, arg3, arg4);\n+\n+  for (i=0; i < 96; i++)\n+    if (result[i] != correct[i]) abort();\n+\n+  return 0;\n+}"}]}