{"sha": "149739c39475f3691e67aa0aee4f205f4e83392f", "node_id": "C_kwDOANBUbNoAKDE0OTczOWMzOTQ3NWYzNjkxZTY3YWEwYWVlNGYyMDVmNGU4MzM5MmY", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-12-13T18:48:22Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-12-13T18:51:00Z"}, "message": "x86: Avoid generating orb $0, %ah\n\nI'll post my proposed fix for PR target/103611 shortly, but this patch\nfixes another missed optimization opportunity revealed by that PR.\nOccasionally, reload materializes integer constants during register\nallocation sometimes resulting in unnecessary instructions such as:\n\n(insn 23 31 24 2 (parallel [\n            (set (reg:SI 0 ax [99])\n                (ior:SI (reg:SI 0 ax [99])\n                    (const_int 0 [0])))\n            (clobber (reg:CC 17 flags))\n        ]) \"pr103611.c\":18:73 550 {*iorsi_1}\n     (nil))\n\nThese then get \"optimized\" during the split2 pass, which realizes that\nno bits outside of 0xff00 are set, so this operation can be implemented\nby operating on just the highpart of a QIreg_operand, i.e. %ah, %bh, %ch\netc., which leads to the useless \"orb $0, %ah\" seen in the reported PR.\n\nThis fix catches the case of const0_rtx in relevant splitter, either\neliminating the instruction or turning it into a simple move.\n\n2021-12-13  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* config/i386/i386.md (define_split any_or:SWI248 -> orb %?h):\n\tOptimize the case where the integer constant operand is zero.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/pr103611-1.c: New test case.", "tree": {"sha": "afea33c9c0f340e9220ed3c834c2c44393c81144", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afea33c9c0f340e9220ed3c834c2c44393c81144"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/149739c39475f3691e67aa0aee4f205f4e83392f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/149739c39475f3691e67aa0aee4f205f4e83392f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/149739c39475f3691e67aa0aee4f205f4e83392f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/149739c39475f3691e67aa0aee4f205f4e83392f/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc4a93eb41243babe3f2ef3a3c6171b48e503138", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc4a93eb41243babe3f2ef3a3c6171b48e503138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc4a93eb41243babe3f2ef3a3c6171b48e503138"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "f6d9c4ba6cc9872dfa5b46466711572ec04293de", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149739c39475f3691e67aa0aee4f205f4e83392f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149739c39475f3691e67aa0aee4f205f4e83392f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=149739c39475f3691e67aa0aee4f205f4e83392f", "patch": "@@ -10542,6 +10542,15 @@\n \t       (match_dup 2)) 0))\n       (clobber (reg:CC FLAGS_REG))])]\n {\n+  /* Handle the case where INTVAL (operands[2]) == 0.  */\n+  if (operands[2] == const0_rtx)\n+    {\n+      if (!rtx_equal_p (operands[0], operands[1]))\n+\temit_move_insn (operands[0], operands[1]);\n+      else\n+\temit_note (NOTE_INSN_DELETED);\n+      DONE;\n+    }\n   operands[0] = gen_lowpart (SImode, operands[0]);\n   operands[1] = gen_lowpart (SImode, operands[1]);\n   operands[2] = gen_int_mode (INTVAL (operands[2]) >> 8, QImode);"}, {"sha": "7d8ac9de170e153b511812e8a7203e2657459191", "filename": "gcc/testsuite/gcc.target/i386/pr103611-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149739c39475f3691e67aa0aee4f205f4e83392f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103611-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149739c39475f3691e67aa0aee4f205f4e83392f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103611-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103611-1.c?ref=149739c39475f3691e67aa0aee4f205f4e83392f", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -msse4\" } */\n+typedef int __v4si __attribute__ ((__vector_size__ (16)));\n+\n+long long ior_1(__v4si v) {\n+  unsigned int loVal = (unsigned int)v[0];\n+  unsigned int hiVal = (unsigned int)v[1];\n+  return (long long)(loVal) | ((long long)(hiVal) << 32);\n+}\n+\n+long long ior_2(__v4si v) {\n+  unsigned int loVal = (unsigned int)v[2];\n+  unsigned int hiVal = (unsigned int)v[3];\n+  return (long long)(loVal) | ((long long)(hiVal) << 32);\n+}\n+\n+long long xor_1(__v4si v) {\n+  unsigned int loVal = (unsigned int)v[0];\n+  unsigned int hiVal = (unsigned int)v[1];\n+  return (long long)(loVal) ^ ((long long)(hiVal) << 32);\n+}\n+\n+long long xor_2(__v4si v) {\n+  unsigned int loVal = (unsigned int)v[2];\n+  unsigned int hiVal = (unsigned int)v[3];\n+  return (long long)(loVal) ^ ((long long)(hiVal) << 32);\n+}\n+/* { dg-final { scan-assembler-not \"\\torb\\t\\\\\\$0,\" } } */\n+/* { dg-final { scan-assembler-not \"\\txorb\\t\\\\\\$0,\" } } */\n+"}]}