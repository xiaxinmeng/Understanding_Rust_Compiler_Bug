{"sha": "74924838e8ac358ecb4fba084f9d396426ff0eb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ5MjQ4MzhlOGFjMzU4ZWNiNGZiYTA4NGY5ZDM5NjQyNmZmMGViNw==", "commit": {"author": {"name": "Allan Sandfeld Jensen", "email": "sandfeld@kde.org", "date": "2013-12-25T22:22:24Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-12-25T22:22:24Z"}, "message": "re PR target/59422 (Support more targets for function multi versioning)\n\ngcc/\n\n2013-12-25  Allan Sandfeld Jensen  <sandfeld@kde.org>\n\t    H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/59422\n\t* config/i386/i386.c (get_builtin_code_for_version): Handle\n\tPROCESSOR_HASWELL, PROCESSOR_SILVERMONT, PROCESSOR_BTVER1,\n\tPROCESSOR_BTVER2, PROCESSOR_BDVER3 and PROCESSOR_BDVER4.\n\tChange priority of PROCESSOR_BDVER1 to P_PROC_XOP.\n\t(fold_builtin_cpu): Add \"ivybridge\", \"haswell\", \"bonnell\",\n\t\"silvermont\", \"bobcat\" and \"jaguar\" CPU names.  Add \"sse4a\",\n\t\"fma4\", \"xop\" and \"fma\" ISA names.\n\nlibgcc/\n\n2013-12-25  Allan Sandfeld Jensen  <sandfeld@kde.org>\n\t    H.J. Lu  <hongjiu.lu@intel.com>\n\n        PR target/59422\n        * config/i386/cpuinfo.c (enum processor_types):  Add AMD_BOBCAT\n\tand AMD_JAGUAR.\n\t(enum processor_subtypes): Add AMDFAM15H_BDVER3, AMDFAM15H_BDVER4,\n\tINTEL_COREI7_IVYBRIDGE and INTEL_COREI7_HASWELL.\n\t(enum processor_features): Add  FEATURE_SSE4_A, FEATURE_FMA4,\n\tFEATURE_XOP and FEATURE_FMA.\n\t(get_amd_cpu): Handle AMD_BOBCAT, AMD_JAGUAR, AMDFAM15H_BDVER2 and\n\tAMDFAM15H_BDVER3.\n\t(get_intel_cpu): Handle INTEL_COREI7 and INTEL_COREI7_HASWELL.\n        (get_available_features): Handle FEATURE_FMA, FEATURE_SSE4_A,\n\tFEATURE_FMA4 and FEATURE_XOP.\n\ntestsuite/\n\n2013-12-25  Allan Sandfeld Jensen  <sandfeld@kde.org>\n\n\tPR target/59422\n\t* gcc.target/i386/funcspec-5.c (test_fma, test_xop, test_no_fma,\n\ttest_no_xop, test_arch_corei7, test_arch_corei7_avx,\n\ttest_arch_core_avx2, test_arch_bdver1, test_arch_bdver2,\n\ttest_arch_bdver3, test_tune_corei7, test_tune_corei7_avx,\n\ttest_tune_core_avx2, test_tune_bdver1, test_tune_bdver2 and\n\ttest_tune_bdver3): New function prototypes.\n\nFrom-SVN: r206200", "tree": {"sha": "eed83130294024ca7e3c18afbe1f29fece0c565f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eed83130294024ca7e3c18afbe1f29fece0c565f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74924838e8ac358ecb4fba084f9d396426ff0eb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74924838e8ac358ecb4fba084f9d396426ff0eb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74924838e8ac358ecb4fba084f9d396426ff0eb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74924838e8ac358ecb4fba084f9d396426ff0eb7/comments", "author": null, "committer": null, "parents": [{"sha": "80d69d3a8549279831a8fc5253597d73f0285d45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80d69d3a8549279831a8fc5253597d73f0285d45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80d69d3a8549279831a8fc5253597d73f0285d45"}], "stats": {"total": 429, "additions": 289, "deletions": 140}, "files": [{"sha": "e7c03afafcc68bc3f6607f179b3cb42175d2246a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 124, "deletions": 120, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74924838e8ac358ecb4fba084f9d396426ff0eb7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74924838e8ac358ecb4fba084f9d396426ff0eb7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74924838e8ac358ecb4fba084f9d396426ff0eb7", "patch": "@@ -1,3 +1,15 @@\n+2013-12-25  Allan Sandfeld Jensen  <sandfeld@kde.org>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/59422\n+\t* config/i386/i386.c (get_builtin_code_for_version): Handle\n+\tPROCESSOR_HASWELL, PROCESSOR_SILVERMONT, PROCESSOR_BTVER1,\n+\tPROCESSOR_BTVER2, PROCESSOR_BDVER3 and PROCESSOR_BDVER4.\n+\tChange priority of PROCESSOR_BDVER1 to P_PROC_XOP.\n+\t(fold_builtin_cpu): Add \"ivybridge\", \"haswell\", \"bonnell\",\n+\t\"silvermont\", \"bobcat\" and \"jaguar\" CPU names.  Add \"sse4a\",\n+\t\"fma4\", \"xop\" and \"fma\" ISA names.\n+\n 2013-12-24   H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (ix86_option_override_internal): Check\n@@ -62,7 +74,7 @@\n \tconsant/external operand, and add a few missing \\n.\n \n 2013-12-23   H.J. Lu  <hongjiu.lu@intel.com>\n-\t     Tocar Ilya  <ilya.tocar@intel.com> \n+\t     Tocar Ilya  <ilya.tocar@intel.com>\n \n \t* config/i386/core2.md: Replace corei7 with nehalem.\n \n@@ -189,8 +201,8 @@\n \n 2013-12-20  Vladimir Makarov  <vmakarov@redhat.com>\n \n-\t* config/arm/arm.h (THUMB_SECONDARY_OUTPUT_RELOAD_CLASS): Return NO_REGS\n-\tfor LRA.\n+\t* config/arm/arm.h (THUMB_SECONDARY_OUTPUT_RELOAD_CLASS): Return\n+\tNO_REGS for LRA.\n \n 2013-12-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n@@ -200,7 +212,7 @@\n \n \tPR tree-optimization/59544\n \t* tree-vect-stmts.c (perm_mask_for_reverse): Move before\n-\tvectorizable_store. \n+\tvectorizable_store.\n \t(vectorizable_store): Handle negative step.\n \n 2013-12-20  Tocar Ilya  <ilya.tocar@intel.com>\n@@ -256,8 +268,8 @@\n \t(attr_hash_add_rtx, attr_hash_add_string): Change hashcode parameter\n \tto unsigned.\n \t(attr_rtx_1): Change hashcode variable to unsigned.\n-\t(attr_string): Likewise.  Perform first multiplication in unsigned\n-\ttype.\n+\t(attr_string): Likewise.  Perform first multiplication in\n+\tunsigned type.\n \t* ifcvt.c (noce_try_store_flag_constants): Avoid signed integer\n \toverflows.\n \t* double-int.c (neg_double): Likewise.\n@@ -270,8 +282,7 @@\n \t* ipa-split.c (find_split_points): Initialize first.can_split\n \tand first.non_ssa_vars.\n \t* gengtype-state.c (read_state_files_list): Fix up check.\n-\t* genautomata.c (reserv_sets_hash_value): Use portable rotation\n-\tidiom.\n+\t* genautomata.c (reserv_sets_hash_value): Use portable rotation idiom.\n \n 2013-12-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n@@ -284,44 +295,44 @@\n \n 2013-12-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n-\t * config/arm/arm.c (enum arm_builtins): Add crypto builtins.\n-\t (arm_init_neon_builtins): Handle crypto builtins.\n-\t (bdesc_2arg): Likewise.\n-\t (bdesc_1arg): Likewise.\n-\t (bdesc_3arg): New table.\n-\t (arm_expand_ternop_builtin): New function.\n-\t (arm_expand_unop_builtin): Handle sha1h explicitly.\n-\t (arm_expand_builtin): Handle ternary builtins.\n-\t * config/arm/arm.h (TARGET_CPU_CPP_BUILTINS):\n-\t Define __ARM_FEATURE_CRYPTO.\n-\t * config/arm/arm.md: Include crypto.md.\n-\t (is_neon_type): Add crypto types.\n-\t * config/arm/arm_neon_builtins.def: Add TImode reinterprets.\n-\t * config/arm/crypto.def: New.\n-\t * config/arm/crypto.md: Likewise.\n-\t * config/arm/iterators.md (CRYPTO_UNARY): New int iterator.\n-\t (CRYPTO_BINARY): Likewise.\n-\t (CRYPTO_TERNARY): Likewise.\n-\t (CRYPTO_SELECTING): Likewise.\n-\t (crypto_pattern): New int attribute.\n-\t (crypto_size_sfx): Likewise.\n-\t (crypto_mode): Likewise.\n-\t (crypto_type): Likewise.\n-\t * config/arm/neon-gen.ml: Handle poly64_t and poly128_t types.\n-\t Handle crypto intrinsics.\n-\t * config/arm/neon.ml: Add support for poly64 and polt128 types\n-\t and intrinsics. Define crypto intrinsics.\n-\t * config/arm/neon.md (neon_vreinterpretti<mode>): New pattern.\n-\t (neon_vreinterpretv16qi<mode>): Use VQXMOV mode iterator.\n-\t (neon_vreinterpretv8hi<mode>): Likewise.\n-\t (neon_vreinterpretv4si<mode>): Likewise.\n-\t (neon_vreinterpretv4sf<mode>): Likewise.\n-\t (neon_vreinterpretv2di<mode>): Likewise.\n-\t * config/arm/unspecs.md (UNSPEC_AESD, UNSPEC_AESE, UNSPEC_AESIMC,\n-\t UNSPEC_AESMC, UNSPEC_SHA1C, UNSPEC_SHA1M, UNSPEC_SHA1P, UNSPEC_SHA1H,\n-\t UNSPEC_SHA1SU0, UNSPEC_SHA1SU1, UNSPEC_SHA256H, UNSPEC_SHA256H2,\n-\t UNSPEC_SHA256SU0, UNSPEC_SHA256SU1, VMULLP64): Define.\n-\t * config/arm/arm_neon.h: Regenerate.\n+\t* config/arm/arm.c (enum arm_builtins): Add crypto builtins.\n+\t(arm_init_neon_builtins): Handle crypto builtins.\n+\t(bdesc_2arg): Likewise.\n+\t(bdesc_1arg): Likewise.\n+\t(bdesc_3arg): New table.\n+\t(arm_expand_ternop_builtin): New function.\n+\t(arm_expand_unop_builtin): Handle sha1h explicitly.\n+\t(arm_expand_builtin): Handle ternary builtins.\n+\t* config/arm/arm.h (TARGET_CPU_CPP_BUILTINS):\n+\tDefine __ARM_FEATURE_CRYPTO.\n+\t* config/arm/arm.md: Include crypto.md.\n+\t(is_neon_type): Add crypto types.\n+\t* config/arm/arm_neon_builtins.def: Add TImode reinterprets.\n+\t* config/arm/crypto.def: New.\n+\t* config/arm/crypto.md: Likewise.\n+\t* config/arm/iterators.md (CRYPTO_UNARY): New int iterator.\n+\t(CRYPTO_BINARY): Likewise.\n+\t(CRYPTO_TERNARY): Likewise.\n+\t(CRYPTO_SELECTING): Likewise.\n+\t(crypto_pattern): New int attribute.\n+\t(crypto_size_sfx): Likewise.\n+\t(crypto_mode): Likewise.\n+\t(crypto_type): Likewise.\n+\t* config/arm/neon-gen.ml: Handle poly64_t and poly128_t types.\n+\tHandle crypto intrinsics.\n+\t* config/arm/neon.ml: Add support for poly64 and polt128 types\n+\tand intrinsics. Define crypto intrinsics.\n+\t* config/arm/neon.md (neon_vreinterpretti<mode>): New pattern.\n+\t(neon_vreinterpretv16qi<mode>): Use VQXMOV mode iterator.\n+\t(neon_vreinterpretv8hi<mode>): Likewise.\n+\t(neon_vreinterpretv4si<mode>): Likewise.\n+\t(neon_vreinterpretv4sf<mode>): Likewise.\n+\t(neon_vreinterpretv2di<mode>): Likewise.\n+\t* config/arm/unspecs.md (UNSPEC_AESD, UNSPEC_AESE, UNSPEC_AESIMC)\n+\t(UNSPEC_AESMC, UNSPEC_SHA1C, UNSPEC_SHA1M, UNSPEC_SHA1P, UNSPEC_SHA1H)\n+\t(UNSPEC_SHA1SU0, UNSPEC_SHA1SU1, UNSPEC_SHA256H, UNSPEC_SHA256H2)\n+\t(UNSPEC_SHA256SU0, UNSPEC_SHA256SU1, VMULLP64): Define.\n+\t* config/arm/arm_neon.h: Regenerate.\n \n 2013-12-19  H.J. Lu  <hongjiu.lu@intel.com>\n \n@@ -347,8 +358,8 @@\n \t(arm_init_crc32_builtins): New function.\n \t(arm_init_builtins): Initialise CRC32 builtins.\n \t(arm_file_start): Handle architecture extensions.\n-\t* config/arm/arm.h (TARGET_CPU_CPP_BUILTINS): Define __ARM_FEATURE_CRC32.\n-\tDefine __ARM_32BIT_STATE.\n+\t* config/arm/arm.h (TARGET_CPU_CPP_BUILTINS): Define\n+\t__ARM_FEATURE_CRC32.  Define __ARM_32BIT_STATE.\n \t(TARGET_CRC32): Define.\n \t* config/arm/arm-arches.def: Add armv8-a+crc.\n \t* config/arm/arm-tables.opt: Regenerate.\n@@ -403,8 +414,9 @@\n 2013-12-19  Tejas Belagod  <tejas.belagod@arm.com>\n \n \t* config/aarch64/aarch64-simd-builtins.def: Update builtins table.\n-\t* config/aarch64/aarch64-simd.md (aarch64_crypto_sha256h<sha256_op>v4si,\n-\taarch64_crypto_sha256su0v4si, aarch64_crypto_sha256su1v4si): New.\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_crypto_sha256h<sha256_op>v4si, aarch64_crypto_sha256su0v4si,\n+\taarch64_crypto_sha256su1v4si): New.\n \t* config/aarch64/arm_neon.h (vsha256hq_u32, vsha256h2q_u32,\n \tvsha256su0q_u32, vsha256su1q_u32): New.\n \t* config/aarch64/iterators.md (UNSPEC_SHA256H<2>, UNSPEC_SHA256SU<01>):\n@@ -456,32 +468,33 @@\n \t    Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config/s390/s390.c (s390_hotpatch_trampoline_halfwords_default): New\n-\tconstant\n-\t(s390_hotpatch_trampoline_halfwords_max): New constant\n-\t(s390_hotpatch_trampoline_halfwords): New static variable\n-\t(get_hotpatch_attribute): New function\n-\t(s390_handle_hotpatch_attribute): New function\n-\t(s390_attribute_table): New target specific attribute table to implement\n-\tthe hotpatch attribute\n-\t(s390_option_override): Parse hotpatch options\n-\t(s390_function_num_hotpatch_trampoline_halfwords): New function\n+\tconstant.\n+\t(s390_hotpatch_trampoline_halfwords_max): New constant.\n+\t(s390_hotpatch_trampoline_halfwords): New static variable.\n+\t(get_hotpatch_attribute): New function.\n+\t(s390_handle_hotpatch_attribute): New function.\n+\t(s390_attribute_table): New target specific attribute table to\n+\timplement the hotpatch attribute.\n+\t(s390_option_override): Parse hotpatch options.\n+\t(s390_function_num_hotpatch_trampoline_halfwords): New function.\n \t(s390_can_inline_p): Implement target hook to\n-\tsuppress hotpatching for explicitly inlined functions\n-\t(s390_asm_output_function_label): Generate hotpatch prologue\n-\t(TARGET_ATTRIBUTE_TABLE): Define to implement target attribute table\n-\t(TARGET_CAN_INLINE_P): Define to implement target hook\n-\t* config/s390/s390.opt (mhotpatch): New options -mhotpatch, -mhotpatch=\n+\tsuppress hotpatching for explicitly inlined functions.\n+\t(s390_asm_output_function_label): Generate hotpatch prologue.\n+\t(TARGET_ATTRIBUTE_TABLE): Define to implement target attribute table.\n+\t(TARGET_CAN_INLINE_P): Define to implement target hook.\n+\t* config/s390/s390.opt (mhotpatch): New options -mhotpatch,\n+\t-mhotpatch=.\n \t* config/s390/s390-protos.h (s390_asm_output_function_label): Add\n-\tprototype\n+\tprototype.\n \t* config/s390/s390.h (ASM_OUTPUT_FUNCTION_LABEL): Target specific\n-\tfunction label generation for hotpatching\n-\t(FUNCTION_BOUNDARY): Align functions to eight bytes\n-\t* doc/extend.texi: Document hotpatch attribute\n-\t* doc/invoke.texi: Document -mhotpatch option\n+\tfunction label generation for hotpatching.\n+\t(FUNCTION_BOUNDARY): Align functions to eight bytes.\n+\t* doc/extend.texi: Document hotpatch attribute.\n+\t* doc/invoke.texi: Document -mhotpatch option.\n \n 2013-12-19  Ganesh Gopalasubramanian  <Ganesh.Gopalasubramanian@amd.com>\n \n-\t* config/i386/i386.c: Include cfgloop.h. \n+\t* config/i386/i386.c: Include cfgloop.h.\n \t(ix86_loop_memcount): New function.\n \t(ix86_loop_unroll_adjust): New function.\n \t(TARGET_LOOP_UNROLL_ADJUST): Define.\n@@ -514,15 +527,11 @@\n \n 2013-12-18  James Greenhalgh  <james.greenhalgh@arm.com>\n \n-\t* config/aarch64/aarch64-cores.def: Add new column for\n-\tSCHEDULER_IDENT.\n-\t* config/aarch64/aarch64-opts.h (AARCH64_CORE): Handle\n-\tSCHEDULER_IDENT.\n-\t* config/aarch64/aarch64.c (AARCH64_CORE): Handle\n-\tSCHEDULER_IDENT.\n+\t* config/aarch64/aarch64-cores.def: Add new column for SCHEDULER_IDENT.\n+\t* config/aarch64/aarch64-opts.h (AARCH64_CORE): Handle SCHEDULER_IDENT.\n+\t* config/aarch64/aarch64.c (AARCH64_CORE): Handle SCHEDULER_IDENT.\n \t(aarch64_parse_cpu): mcpu implies a default value for mtune.\n-\t* config/aarch64/aarch64.h (AARCH64_CORE): Handle\n-\tSCHEDULER_IDENT.\n+\t* config/aarch64/aarch64.h (AARCH64_CORE): Handle SCHEDULER_IDENT.\n \n 2013-12-18  James Greenhalgh  <james.greenhalgh@arm.com>\n \n@@ -544,9 +553,9 @@\n \n \t* omp-low.c (simd_clone_clauses_extract): Replaced the string\n \t\"cilk simd elemental\" with \"cilk simd function.\"\n-\t* config/i386/i386.c (ix86_simd_clone_compute_vecsize_and_simdlen): \n+\t* config/i386/i386.c (ix86_simd_clone_compute_vecsize_and_simdlen):\n \tRemoved a carriage-return from a warning string.\n-\t\n+\n 2013-12-18  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* passes.c (execute_function_dump): Set graph_dump_initialized\n@@ -576,7 +585,7 @@\n \t* config/arm/arm.c (arm_expand_epilogue_apcs_frame): Fix thinko.\n \n 2013-12-18  James Greenhalgh  <james.greenhalgh@arm.com>\n-              Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\t    Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/t-aprofile: Add cortex-a15.cortex-a7, cortex-a12,\n \tcortex-a57, cortex-a57.cortex-a53.\n@@ -693,8 +702,7 @@\n \n 2013-12-17  Thomas Schwinge  <thomas@codesourcery.com>\n \n-\t* omp-low.c (tmp_ompfn_id_num): Remove leftover variable\n-\tdefinition.\n+\t* omp-low.c (tmp_ompfn_id_num): Remove leftover variable definition.\n \n \t* tree-pass.h (make_pass_expand_omp_ssa): Remove leftover function\n \tdeclaration.\n@@ -703,8 +711,7 @@\n \n \t* omp-low.c (check_combined_parallel): Reflect reality in comment.\n \n-\t* doc/cfg.texi (Control Flow): Refer to passes.def instead of\n-\tpasses.c.\n+\t* doc/cfg.texi (Control Flow): Refer to passes.def instead of passes.c.\n \t* doc/passes.texi (Pass manager): Refer to passes.def.\n \n \t* doc/gccint.texi (Top): Fix inclusion order.\n@@ -776,8 +783,8 @@\n \n 2013-12-17  Jan Hubicka  <hubicka@ucw.cz>\n \n-\t* ipa-utils.h (possible_polymorphic_call_targets): Determine context of\n-\tthe call.\n+\t* ipa-utils.h (possible_polymorphic_call_targets): Determine\n+\tcontext of the call.\n \t* gimple-fold.c (gimple_fold_call): Use ipa-devirt to devirtualize.\n \n 2013-12-17  Jakub Jelinek  <jakub@redhat.com>\n@@ -812,12 +819,12 @@\n \t* config/arm/driver-arm.c (arm_cpu_table): Add cortex-a12 entry.\n \n 2013-12-14  Jan Hubicka  <jh@suse.cz>\n-\t    Markus Trippelsdorf <octoploid@yandex.com>\n+\t    Markus Trippelsdorf  <octoploid@yandex.com>\n \n \tPR ipa/59265\n \t* ipa-profile.c (ipa_profile_generate_summary): Do not ICE when\n \tcall is already devirtualized.\n-\t\n+\n 2013-12-16  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Makefile.in (version.o): Restore dependencies on\n@@ -882,6 +889,7 @@\n \tdevirtualized calls.\n \n 2013-12-14   Jan Hubicka  <jh@suse.cz>\n+\n \tPR middle-end/58477\n \t* ipa-prop.c (stmt_may_be_vtbl_ptr_store): Skip clobbers.\n \n@@ -945,7 +953,7 @@\n 2013-12-13  Kenneth Zadeck  <zadeck@naturalbridge.com>\n \n \t* genmodes.c (emit_max_int): Fixed missing parens.\n-\t\n+\n 2013-12-13  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR tree-optimization/59149\n@@ -1066,8 +1074,7 @@\n 2013-12-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* expr.c (expand_assignment): Remove dependency on\n-\tflag_strict_volatile_bitfields. Always set the memory \n-\taccess mode.\n+\tflag_strict_volatile_bitfields.  Always set the memory access mode.\n \t(expand_expr_real_1): Likewise.\n \n 2013-12-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n@@ -1234,7 +1241,7 @@\n \n 2013-12-10  H.J. Lu  <hongjiu.lu@intel.com>\n \n-\t* basic-block.h (gcov_working_set_t): Put back typedef. \n+\t* basic-block.h (gcov_working_set_t): Put back typedef.\n \t* gcov-io.h (gcov_bucket_type): Likewise.\n \t(gcov_working_set_info, gcov_working_set_t): Likewise.\n \n@@ -1406,8 +1413,7 @@\n \tafterwards, check gimple_code of stmts here.  Replace is_predicated\n \tcheck with dominance check.  Add any_mask_load_store argument,\n \tpass it down to if_convertible_stmt_p and if_convertible_phi_p,\n-\tcall if_convertible_phi_p only after all if_convertible_stmt_p\n-\tcalls.\n+\tcall if_convertible_phi_p only after all if_convertible_stmt_p calls.\n \t(if_convertible_loop_p): Add any_mask_load_store argument,\n \tpass it down to if_convertible_loop_p_1.\n \t(predicate_mem_writes): Emit MASK_LOAD and/or MASK_STORE calls.\n@@ -1456,8 +1462,7 @@\n \tpass_if_conversion.\n \t* tree-predcom.c (split_data_refs_to_components): Give up if\n \tDR_STMT is a call.\n-\t* tree-vect-stmts.c (vect_mark_relevant): Don't crash if lhs\n-\tis NULL.\n+\t* tree-vect-stmts.c (vect_mark_relevant): Don't crash if lhs is NULL.\n \t(exist_non_indexing_operands_for_use_p): Handle MASK_LOAD\n \tand MASK_STORE.\n \t(vectorizable_mask_load_store): New function.\n@@ -1545,7 +1550,7 @@\n \t* predict.c (estimate_loops): Likewise.\n \t* sched-rgn.c (haifa_find_rgns): Likewise.\n \t* tree-cfg.c (split_critical_edges): Likewise.\n- \t* tree-dfa.c (renumber_gimple_stmt_uids): Likewise.\n+\t* tree-dfa.c (renumber_gimple_stmt_uids): Likewise.\n \t* tree-loop-distribution.c (tree_loop_distribution): Likewise.\n \t* tree-ssa-pre.c (compute_antic, insert, init_pre): Likewise.\n \t* tree-ssa-propagate.c (ssa_prop_init): Likewise.\n@@ -1782,8 +1787,9 @@\n \tvrp_initialize, identify_jump_threads, instrument_memory_accesses):\n \tLikewise.\n \t* ubsan.c (ubsan_pass): Likewise.\n-\t* value-prof.c (verify_histograms, gimple_value_profile_transformations,\n-\tgimple_find_values_to_profile): Likewise.\n+\t* value-prof.c (verify_histograms,\n+\tgimple_value_profile_transformations, gimple_find_values_to_profile):\n+\tLikewise.\n \t* var-tracking.c (vt_find_locations, dump_dataflow_sets, vt_emit_notes,\n \tvt_initialize, delete_debug_insns, vt_finalize): Likewise.\n \n@@ -1837,16 +1843,16 @@\n \t* graphite-sese-to-poly.c (build_scop_bbs): Likewise.\n \t* haifa-sched.c (unlink_bb_notes): Likewise.\n \t* ipa-split.c (execute_split_functions): Likewise.\n-\t* ira-build.c (create_loop_tree_nodes,\n-\tremove_unnecessary_regions): Likewise.\n+\t* ira-build.c (create_loop_tree_nodes, remove_unnecessary_regions):\n+\tLikewise.\n \t* ira-emit.c (ira_emit): Likewise.\n \t* ira.c (find_moveable_pseudos, ira): Likewise.\n \t* lcm.c (compute_antinout_edge, compute_laterin,\n \tcompute_insert_delete, pre_edge_lcm, compute_available,\n \tcompute_nearerout, compute_rev_insert_delete,\n \tpre_edge_rev_lcm): Likewise.\n-\t* loop-unroll.c (opt_info_start_duplication,\n-\tapply_opt_in_copies): Likewise.\n+\t* loop-unroll.c (opt_info_start_duplication, apply_opt_in_copies):\n+\tLikewise.\n \t* lower-subreg.c (decompose_multiword_subregs): Likewise.\n \t* lra-lives.c (lra_create_live_ranges): Likewise.\n \t* lra.c (lra): Likewise.\n@@ -1918,19 +1924,17 @@\n \n \t* basic-block.h (label_to_block_map): Eliminate macro.\n \n-\t* gimple.c (gimple_set_bb): Replace uses of label_to_block_map\n-\twith uses of label_to_block_map_for_fn, making uses of cfun be\n-\texplicit.\n+\t* gimple.c (gimple_set_bb): Replace uses of label_to_block_map with\n+\tuses of label_to_block_map_for_fn, making uses of cfun be explicit.\n \t* tree-cfg.c (delete_tree_cfg_annotations): Likewise.\n \t(verify_gimple_label): Likewise.\n \n 2013-12-09  David Malcolm  <dmalcolm@redhat.com>\n \n \t* basic-block.h (basic_block_info): Eliminate macro.\n \n-\t* cfgrtl.c (rtl_create_basic_block): Replace uses of\n-\tbasic_block_info with basic_block_info_for_fn, making uses\n-\tof cfun be explicit.\n+\t* cfgrtl.c (rtl_create_basic_block): Replace uses of basic_block_info\n+\twith basic_block_info_for_fn, making uses of cfun be explicit.\n \t* tree-cfg.c (build_gimple_cfg, create_bb): Likewise.\n \n 2013-12-09  David Malcolm  <dmalcolm@redhat.com>\n@@ -1975,8 +1979,8 @@\n \t* lra-lives.c (lra_create_live_ranges): Likewise.\n \t* predict.c (propagate_freq): Likewise.\n \t* regrename.c (regrename_analyze): Likewise.\n-\t* regstat.c (regstat_bb_compute_ri,\n-\tregstat_bb_compute_calls_crossed): Likewise.\n+\t* regstat.c (regstat_bb_compute_ri, regstat_bb_compute_calls_crossed):\n+\tLikewise.\n \t* resource.c (mark_target_live_regs): Likewise.\n \t* sched-ebb.c (ebb_fix_recovery_cfg): Likewise.\n \t* sched-int.h (EBB_FIRST_BB, EBB_LAST_BB): Likewise.\n@@ -1987,8 +1991,8 @@\n \t* sel-sched-ir.c (sel_finish_global_and_expr, verify_backedges,\n \tpurge_empty_blocks, sel_remove_loop_preheader): Likewise.\n \t* sel-sched.c (remove_insns_that_need_bookkeeping)\n-\t(current_region_empty_p, sel_region_init,\n-\tsimplify_changed_insns): Likewise.\n+\t(current_region_empty_p, sel_region_init, simplify_changed_insns):\n+\tLikewise.\n \t* trans-mem.c (execute_tm_mark, execute_tm_edges,\n \ttm_memopt_compute_antic, ipa_tm_scan_irr_function): Likewise.\n \t* tree-cfg.c (make_edges, end_recording_case_labels,\n@@ -2003,10 +2007,11 @@\n \tinsert_phi_nodes_for, insert_updated_phi_nodes_for): Likewise.\n \t* tree-ssa-dom.c (tree_ssa_dominator_optimize): Likewise.\n \t* tree-ssa-live.c (live_worklist): Likewise.\n-\t* tree-ssa-loop-manip.c (compute_live_loop_exits,\n-\tadd_exit_phis_var, find_uses_to_rename, copy_phi_node_args): Likewise.\n+\t* tree-ssa-loop-manip.c (compute_live_loop_exits, add_exit_phis_var,\n+\tfind_uses_to_rename, copy_phi_node_args): Likewise.\n \t* tree-ssa-pre.c (compute_antic): Likewise.\n-\t* tree-ssa-reassoc.c (update_range_test, optimize_range_tests): Likewise.\n+\t* tree-ssa-reassoc.c (update_range_test, optimize_range_tests):\n+\tLikewise.\n \t* tree-ssa-sink.c (nearest_common_dominator_of_uses): Likewise.\n \t* tree-ssa-tail-merge.c (same_succ_hash, same_succ_def::equal,\n \tsame_succ_flush_bbs, update_worklist, set_cluster,\n@@ -2091,8 +2096,7 @@\n \tunreachable code.\n \t(do_complex_constraint): Call set_union_with_increment with\n \tthe solution delta, not the full solution.\n-\t(make_transitive_closure_constraints): Merge the two\n-\tconstraints.\n+\t(make_transitive_closure_constraints): Merge the two constraints.\n \n 2013-12-09  Richard Earnshaw  <rearnsha@arm.com>\n \n@@ -14604,7 +14608,7 @@\n \n 2013-10-10  Andrew MacLeod  <amacleod@redhat.com>\n \n-\t* config/aplha/alpha.c: Add gimple-ssa.h to include list.\n+\t* config/alpha/alpha.c: Add gimple-ssa.h to include list.\n \n 2013-10-09  Easwaran Raman <eraman@google.com>\n "}, {"sha": "e8c393db8ac8f31e03bfab1d2cfe6919fb51f41c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 62, "deletions": 11, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74924838e8ac358ecb4fba084f9d396426ff0eb7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74924838e8ac358ecb4fba084f9d396426ff0eb7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=74924838e8ac358ecb4fba084f9d396426ff0eb7", "patch": "@@ -29972,16 +29972,21 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n     P_SSE3,\n     P_SSSE3,\n     P_PROC_SSSE3,\n-    P_SSE4_a,\n-    P_PROC_SSE4_a,\n+    P_SSE4_A,\n+    P_PROC_SSE4_A,\n     P_SSE4_1,\n     P_SSE4_2,\n     P_PROC_SSE4_2,\n     P_POPCNT,\n     P_AVX,\n+    P_PROC_AVX,\n+    P_FMA4,\n+    P_XOP,\n+    P_PROC_XOP,\n+    P_FMA,    \n+    P_PROC_FMA,\n     P_AVX2,\n-    P_FMA,\n-    P_PROC_FMA\n+    P_PROC_AVX2\n   };\n \n  enum feature_priority priority = P_ZERO;\n@@ -30000,11 +30005,15 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n       {\"sse\", P_SSE},\n       {\"sse2\", P_SSE2},\n       {\"sse3\", P_SSE3},\n+      {\"sse4a\", P_SSE4_A},\n       {\"ssse3\", P_SSSE3},\n       {\"sse4.1\", P_SSE4_1},\n       {\"sse4.2\", P_SSE4_2},\n       {\"popcnt\", P_POPCNT},\n       {\"avx\", P_AVX},\n+      {\"fma4\", P_FMA4},\n+      {\"xop\", P_XOP},\n+      {\"fma\", P_FMA},\n       {\"avx2\", P_AVX2}\n     };\n \n@@ -30056,26 +30065,50 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n \t      arg_str = \"nehalem\";\n \t      priority = P_PROC_SSE4_2;\n \t      break;\n-            case PROCESSOR_SANDYBRIDGE:\n-              arg_str = \"sandybridge\";\n-              priority = P_PROC_SSE4_2;\n-              break;\n+\t    case PROCESSOR_SANDYBRIDGE:\n+\t      arg_str = \"sandybridge\";\n+\t      priority = P_PROC_AVX;\n+\t      break;\n+\t    case PROCESSOR_HASWELL:\n+\t      arg_str = \"haswell\";\n+\t      priority = P_PROC_AVX2;\n+\t      break;\n \t    case PROCESSOR_BONNELL:\n \t      arg_str = \"bonnell\";\n \t      priority = P_PROC_SSSE3;\n \t      break;\n+\t    case PROCESSOR_SILVERMONT:\n+\t      arg_str = \"silvermont\";\n+\t      priority = P_PROC_SSE4_2;\n+\t      break;\n \t    case PROCESSOR_AMDFAM10:\n \t      arg_str = \"amdfam10h\";\n-\t      priority = P_PROC_SSE4_a;\n+\t      priority = P_PROC_SSE4_A;\n+\t      break;\n+\t    case PROCESSOR_BTVER1:\n+\t      arg_str = \"bobcat\";\n+\t      priority = P_PROC_SSE4_A;\n+\t      break;\n+\t    case PROCESSOR_BTVER2:\n+\t      arg_str = \"jaguar\";\n+\t      priority = P_PROC_AVX;\n \t      break;\n \t    case PROCESSOR_BDVER1:\n \t      arg_str = \"bdver1\";\n-\t      priority = P_PROC_FMA;\n+\t      priority = P_PROC_XOP;\n \t      break;\n \t    case PROCESSOR_BDVER2:\n \t      arg_str = \"bdver2\";\n \t      priority = P_PROC_FMA;\n \t      break;\n+\t    case PROCESSOR_BDVER3:\n+\t      arg_str = \"bdver3\";\n+\t      priority = P_PROC_FMA;\n+\t      break;\n+\t    case PROCESSOR_BDVER4:\n+\t      arg_str = \"bdver4\";\n+\t      priority = P_PROC_AVX2;\n+\t      break;\n \t    }  \n \t}    \n     \n@@ -30940,6 +30973,10 @@ fold_builtin_cpu (tree fndecl, tree *args)\n     F_SSE4_2,\n     F_AVX,\n     F_AVX2,\n+    F_SSE4_A,\n+    F_FMA4,\n+    F_XOP,\n+    F_FMA,\n     F_MAX\n   };\n \n@@ -30957,6 +30994,8 @@ fold_builtin_cpu (tree fndecl, tree *args)\n     M_AMDFAM10H,\n     M_AMDFAM15H,\n     M_INTEL_SILVERMONT,\n+    M_AMD_BOBCAT,\n+    M_AMD_JAGUAR,    \n     M_CPU_SUBTYPE_START,\n     M_INTEL_COREI7_NEHALEM,\n     M_INTEL_COREI7_WESTMERE,\n@@ -30967,7 +31006,9 @@ fold_builtin_cpu (tree fndecl, tree *args)\n     M_AMDFAM15H_BDVER1,\n     M_AMDFAM15H_BDVER2,\n     M_AMDFAM15H_BDVER3,\n-    M_AMDFAM15H_BDVER4\n+    M_AMDFAM15H_BDVER4,\n+    M_INTEL_COREI7_IVYBRIDGE,\n+    M_INTEL_COREI7_HASWELL\n   };\n \n   static struct _arch_names_table\n@@ -30986,15 +31027,21 @@ fold_builtin_cpu (tree fndecl, tree *args)\n       {\"nehalem\", M_INTEL_COREI7_NEHALEM},\n       {\"westmere\", M_INTEL_COREI7_WESTMERE},\n       {\"sandybridge\", M_INTEL_COREI7_SANDYBRIDGE},\n+      {\"ivybridge\", M_INTEL_COREI7_IVYBRIDGE},\n+      {\"haswell\", M_INTEL_COREI7_HASWELL},\n+      {\"bonnell\", M_INTEL_BONNELL},\n+      {\"silvermont\", M_INTEL_SILVERMONT},\n       {\"amdfam10h\", M_AMDFAM10H},\n       {\"barcelona\", M_AMDFAM10H_BARCELONA},\n       {\"shanghai\", M_AMDFAM10H_SHANGHAI},\n       {\"istanbul\", M_AMDFAM10H_ISTANBUL},\n+      {\"bobcat\", M_AMD_BOBCAT},      \n       {\"amdfam15h\", M_AMDFAM15H},\n       {\"bdver1\", M_AMDFAM15H_BDVER1},\n       {\"bdver2\", M_AMDFAM15H_BDVER2},\n       {\"bdver3\", M_AMDFAM15H_BDVER3},\n       {\"bdver4\", M_AMDFAM15H_BDVER4},\n+      {\"jaguar\", M_AMD_JAGUAR},      \n     };\n \n   static struct _isa_names_table\n@@ -31011,9 +31058,13 @@ fold_builtin_cpu (tree fndecl, tree *args)\n       {\"sse2\",   F_SSE2},\n       {\"sse3\",   F_SSE3},\n       {\"ssse3\",  F_SSSE3},\n+      {\"sse4a\",  F_SSE4_A},\n       {\"sse4.1\", F_SSE4_1},\n       {\"sse4.2\", F_SSE4_2},\n       {\"avx\",    F_AVX},\n+      {\"fma4\",   F_FMA4},\n+      {\"xop\",    F_XOP},\n+      {\"fma\",    F_FMA},\n       {\"avx2\",   F_AVX2}\n     };\n "}, {"sha": "aede8f8d30807b2f03b3a8c4cb375a46e8628aab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74924838e8ac358ecb4fba084f9d396426ff0eb7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74924838e8ac358ecb4fba084f9d396426ff0eb7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74924838e8ac358ecb4fba084f9d396426ff0eb7", "patch": "@@ -1,3 +1,13 @@\n+2013-12-25  Allan Sandfeld Jensen  <sandfeld@kde.org>\n+\n+\tPR target/59422\n+\t* gcc.target/i386/funcspec-5.c (test_fma, test_xop, test_no_fma,\n+\ttest_no_xop, test_arch_corei7, test_arch_corei7_avx,\n+\ttest_arch_core_avx2, test_arch_bdver1, test_arch_bdver2,\n+\ttest_arch_bdver3, test_tune_corei7, test_tune_corei7_avx,\n+\ttest_tune_core_avx2, test_tune_bdver1, test_tune_bdver2 and\n+\ttest_tune_bdver3): New function prototypes.\n+\n 2013-12-24  Renlin Li  <Renlin.Li@arm.com>\n \n \t* gcc.target/arm/fixed_float_conversion.c: New test case."}, {"sha": "0acfe000da7d173761aeee628031a78d51dca36c", "filename": "gcc/testsuite/gcc.target/i386/funcspec-5.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74924838e8ac358ecb4fba084f9d396426ff0eb7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74924838e8ac358ecb4fba084f9d396426ff0eb7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-5.c?ref=74924838e8ac358ecb4fba084f9d396426ff0eb7", "patch": "@@ -17,7 +17,9 @@ extern void test_sse4 (void)\t\t\t__attribute__((__target__(\"sse4\")));\n extern void test_sse4_1 (void)\t\t\t__attribute__((__target__(\"sse4.1\")));\n extern void test_sse4_2 (void)\t\t\t__attribute__((__target__(\"sse4.2\")));\n extern void test_sse4a (void)\t\t\t__attribute__((__target__(\"sse4a\")));\n+extern void test_fma (void)\t\t\t__attribute__((__target__(\"fma\")));\n extern void test_fma4 (void)\t\t\t__attribute__((__target__(\"fma4\")));\n+extern void test_xop (void)\t\t\t__attribute__((__target__(\"xop\")));\n extern void test_ssse3 (void)\t\t\t__attribute__((__target__(\"ssse3\")));\n extern void test_tbm (void)\t\t\t__attribute__((__target__(\"tbm\")));\n extern void test_avx (void)\t\t\t__attribute__((__target__(\"avx\")));\n@@ -37,7 +39,9 @@ extern void test_no_sse4 (void)\t\t\t__attribute__((__target__(\"no-sse4\")));\n extern void test_no_sse4_1 (void)\t\t__attribute__((__target__(\"no-sse4.1\")));\n extern void test_no_sse4_2 (void)\t\t__attribute__((__target__(\"no-sse4.2\")));\n extern void test_no_sse4a (void)\t\t__attribute__((__target__(\"no-sse4a\")));\n+extern void test_no_fma (void)\t\t\t__attribute__((__target__(\"no-fma\")));\n extern void test_no_fma4 (void)\t\t\t__attribute__((__target__(\"no-fma4\")));\n+extern void test_no_xop (void)\t\t\t__attribute__((__target__(\"no-xop\")));\n extern void test_no_ssse3 (void)\t\t__attribute__((__target__(\"no-ssse3\")));\n extern void test_no_tbm (void)\t\t\t__attribute__((__target__(\"no-tbm\")));\n extern void test_no_avx (void)\t\t\t__attribute__((__target__(\"no-avx\")));\n@@ -63,6 +67,9 @@ extern void test_arch_pentium4m (void)\t\t__attribute__((__target__(\"arch=pentium4\n extern void test_arch_prescott (void)\t\t__attribute__((__target__(\"arch=prescott\")));\n extern void test_arch_nocona (void)\t\t__attribute__((__target__(\"arch=nocona\")));\n extern void test_arch_core2 (void)\t\t__attribute__((__target__(\"arch=core2\")));\n+extern void test_arch_corei7 (void)\t\t__attribute__((__target__(\"arch=corei7\")));\n+extern void test_arch_corei7_avx (void)\t\t__attribute__((__target__(\"arch=corei7-avx\")));\n+extern void test_arch_core_avx2 (void)\t\t__attribute__((__target__(\"arch=core-avx2\")));\n extern void test_arch_geode (void)\t\t__attribute__((__target__(\"arch=geode\")));\n extern void test_arch_k6 (void)\t\t\t__attribute__((__target__(\"arch=k6\")));\n extern void test_arch_k6_2 (void)\t\t__attribute__((__target__(\"arch=k6-2\")));\n@@ -81,6 +88,9 @@ extern void test_arch_athlon64_sse3 (void)\t__attribute__((__target__(\"arch=athlo\n extern void test_arch_athlon_fx (void)\t\t__attribute__((__target__(\"arch=athlon-fx\")));\n extern void test_arch_amdfam10 (void)\t\t__attribute__((__target__(\"arch=amdfam10\")));\n extern void test_arch_barcelona (void)\t\t__attribute__((__target__(\"arch=barcelona\")));\n+extern void test_arch_bdver1 (void)\t\t__attribute__((__target__(\"arch=bdver1\")));\n+extern void test_arch_bdver2 (void)\t\t__attribute__((__target__(\"arch=bdver2\")));\n+extern void test_arch_bdver3 (void)\t\t__attribute__((__target__(\"arch=bdver3\")));\n extern void test_arch_foo (void)\t\t__attribute__((__target__(\"arch=foo\"))); /* { dg-error \"bad value\" } */\n \n extern void test_tune_i386 (void)\t\t__attribute__((__target__(\"tune=i386\")));\n@@ -103,6 +113,9 @@ extern void test_tune_pentium4m (void)\t\t__attribute__((__target__(\"tune=pentium4\n extern void test_tune_prescott (void)\t\t__attribute__((__target__(\"tune=prescott\")));\n extern void test_tune_nocona (void)\t\t__attribute__((__target__(\"tune=nocona\")));\n extern void test_tune_core2 (void)\t\t__attribute__((__target__(\"tune=core2\")));\n+extern void test_tune_corei7 (void)\t\t__attribute__((__target__(\"tune=corei7\")));\n+extern void test_tune_corei7_avx (void)\t\t__attribute__((__target__(\"tune=corei7-avx\")));\n+extern void test_tune_core_avx2 (void)\t\t__attribute__((__target__(\"tune=core-avx2\")));\n extern void test_tune_geode (void)\t\t__attribute__((__target__(\"tune=geode\")));\n extern void test_tune_k6 (void)\t\t\t__attribute__((__target__(\"tune=k6\")));\n extern void test_tune_k6_2 (void)\t\t__attribute__((__target__(\"tune=k6-2\")));\n@@ -121,6 +134,9 @@ extern void test_tune_athlon64_sse3 (void)\t__attribute__((__target__(\"tune=athlo\n extern void test_tune_athlon_fx (void)\t\t__attribute__((__target__(\"tune=athlon-fx\")));\n extern void test_tune_amdfam10 (void)\t\t__attribute__((__target__(\"tune=amdfam10\")));\n extern void test_tune_barcelona (void)\t\t__attribute__((__target__(\"tune=barcelona\")));\n+extern void test_tune_bdver1 (void)\t\t__attribute__((__target__(\"tune=bdver1\")));\n+extern void test_tune_bdver2 (void)\t\t__attribute__((__target__(\"tune=bdver2\")));\n+extern void test_tune_bdver3 (void)\t\t__attribute__((__target__(\"tune=bdver3\")));\n extern void test_tune_generic (void)\t\t__attribute__((__target__(\"tune=generic\")));\n extern void test_tune_foo (void)\t\t__attribute__((__target__(\"tune=foo\"))); /* { dg-error \"bad value\" } */\n "}, {"sha": "7cef00abe4571095226803486c14c1adbcf5b936", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74924838e8ac358ecb4fba084f9d396426ff0eb7/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74924838e8ac358ecb4fba084f9d396426ff0eb7/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=74924838e8ac358ecb4fba084f9d396426ff0eb7", "patch": "@@ -1,3 +1,19 @@\n+2013-12-25  Allan Sandfeld Jensen  <sandfeld@kde.org>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\n+        PR target/59422\n+        * config/i386/cpuinfo.c (enum processor_types):  Add AMD_BOBCAT\n+\tand AMD_JAGUAR.\n+\t(enum processor_subtypes): Add AMDFAM15H_BDVER3, AMDFAM15H_BDVER4,\n+\tINTEL_COREI7_IVYBRIDGE and INTEL_COREI7_HASWELL.\n+\t(enum processor_features): Add  FEATURE_SSE4_A, FEATURE_FMA4,\n+\tFEATURE_XOP and FEATURE_FMA.\n+\t(get_amd_cpu): Handle AMD_BOBCAT, AMD_JAGUAR, AMDFAM15H_BDVER2 and\n+\tAMDFAM15H_BDVER3.\n+\t(get_intel_cpu): Handle INTEL_COREI7 and INTEL_COREI7_HASWELL.\n+        (get_available_features): Handle FEATURE_FMA, FEATURE_SSE4_A,\n+\tFEATURE_FMA4 and FEATURE_XOP.\n+\n 2013-12-23   H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/cpuinfo.c (processor_subtypes): Replace INTEL_ATOM,"}, {"sha": "9543f5cb2b9aeb3eacd18cfa0b89ca110bdbfb85", "filename": "libgcc/config/i386/cpuinfo.c", "status": "modified", "additions": 60, "deletions": 8, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74924838e8ac358ecb4fba084f9d396426ff0eb7/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74924838e8ac358ecb4fba084f9d396426ff0eb7/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c?ref=74924838e8ac358ecb4fba084f9d396426ff0eb7", "patch": "@@ -62,6 +62,8 @@ enum processor_types\n   AMDFAM10H,\n   AMDFAM15H,\n   INTEL_SILVERMONT,\n+  AMD_BOBCAT,\n+  AMD_JAGUAR,  \n   CPU_TYPE_MAX\n };\n \n@@ -75,6 +77,10 @@ enum processor_subtypes\n   AMDFAM10H_ISTANBUL,\n   AMDFAM15H_BDVER1,\n   AMDFAM15H_BDVER2,\n+  AMDFAM15H_BDVER3,\n+  AMDFAM15H_BDVER4,\n+  INTEL_COREI7_IVYBRIDGE,\n+  INTEL_COREI7_HASWELL,\n   CPU_SUBTYPE_MAX\n };\n \n@@ -92,7 +98,11 @@ enum processor_features\n   FEATURE_SSE4_1,\n   FEATURE_SSE4_2,\n   FEATURE_AVX,\n-  FEATURE_AVX2\n+  FEATURE_AVX2,\n+  FEATURE_SSE4_A,\n+  FEATURE_FMA4,\n+  FEATURE_XOP,\n+  FEATURE_FMA\n };\n \n struct __processor_model\n@@ -113,36 +123,45 @@ get_amd_cpu (unsigned int family, unsigned int model)\n     {\n     /* AMD Family 10h.  */\n     case 0x10:\n+      __cpu_model.__cpu_type = AMDFAM10H;\n       switch (model)\n \t{\n \tcase 0x2:\n \t  /* Barcelona.  */\n-\t  __cpu_model.__cpu_type = AMDFAM10H;\n \t  __cpu_model.__cpu_subtype = AMDFAM10H_BARCELONA;\n \t  break;\n \tcase 0x4:\n \t  /* Shanghai.  */\n-\t  __cpu_model.__cpu_type = AMDFAM10H;\n \t  __cpu_model.__cpu_subtype = AMDFAM10H_SHANGHAI;\n \t  break;\n \tcase 0x8:\n \t  /* Istanbul.  */\n-\t  __cpu_model.__cpu_type = AMDFAM10H;\n \t  __cpu_model.__cpu_subtype = AMDFAM10H_ISTANBUL;\n \t  break;\n \tdefault:\n \t  break;\n \t}\n       break;\n-    /* AMD Family 15h.  */\n+    /* AMD Family 14h \"Bobcat\". */\n+    case 0x14:\n+      __cpu_model.__cpu_type = AMD_BOBCAT;\n+      break;\n+    /* AMD Family 15h \"Bulldozer\".  */\n     case 0x15:\n       __cpu_model.__cpu_type = AMDFAM15H;\n       /* Bulldozer version 1.  */\n       if ( model <= 0xf)\n \t__cpu_model.__cpu_subtype = AMDFAM15H_BDVER1;\n-      /* Bulldozer version 2.  */\n-      if (model >= 0x10 && model <= 0x1f)\n-\t__cpu_model.__cpu_subtype = AMDFAM15H_BDVER2;\n+      /* Bulldozer version 2 \"Piledriver\" */\n+      if (model >= 0x10 && model <= 0x2f)\n+\t__cpu_model.__cpu_subtype = AMDFAM15H_BDVER2;      \n+      /* Bulldozer version 3 \"Steamroller\"  */\n+      if (model >= 0x30 && model <= 0x4f)\n+\t__cpu_model.__cpu_subtype = AMDFAM15H_BDVER3;\n+      break;\n+    /* AMD Family 16h \"Jaguar\". */\n+    case 0x16:\n+      __cpu_model.__cpu_type = AMD_JAGUAR;\n       break;\n     default:\n       break;\n@@ -196,6 +215,20 @@ get_intel_cpu (unsigned int family, unsigned int model, unsigned int brand_id)\n \t      __cpu_model.__cpu_type = INTEL_COREI7;\n \t      __cpu_model.__cpu_subtype = INTEL_COREI7_SANDYBRIDGE;\n \t      break;\n+\t    case 0x3a:\n+\t    case 0x3e:\n+\t      /* Ivy Bridge.  */\n+\t      __cpu_model.__cpu_type = INTEL_COREI7;\n+\t      __cpu_model.__cpu_subtype = INTEL_COREI7_IVYBRIDGE;\n+\t      break;\n+\t    case 0x3c:\n+\t    case 0x3f:\n+\t    case 0x45:\n+\t    case 0x46:\n+\t      /* Haswell.  */\n+\t      __cpu_model.__cpu_type = INTEL_COREI7;\n+\t      __cpu_model.__cpu_subtype = INTEL_COREI7_HASWELL;\n+\t      break;\n \t    case 0x17:\n \t    case 0x1d:\n \t      /* Penryn.  */\n@@ -242,6 +275,8 @@ get_available_features (unsigned int ecx, unsigned int edx,\n     features |= (1 << FEATURE_SSE4_2);\n   if (ecx & bit_AVX)\n     features |= (1 << FEATURE_AVX);\n+  if (ecx & bit_FMA)\n+    features |= (1 << FEATURE_FMA);\n \n   /* Get Advanced Features at level 7 (eax = 7, ecx = 0). */\n   if (max_cpuid_level >= 7)\n@@ -252,6 +287,23 @@ get_available_features (unsigned int ecx, unsigned int edx,\n \tfeatures |= (1 << FEATURE_AVX2);\n     }\n \n+  unsigned int ext_level;\n+  unsigned int eax, ebx;\n+  /* Check cpuid level of extended features.  */\n+  __cpuid (0x80000000, ext_level, ebx, ecx, edx);\n+\n+  if (ext_level > 0x80000000)\n+    {\n+      __cpuid (0x80000001, eax, ebx, ecx, edx);\n+\n+      if (ecx & bit_SSE4a)\n+\tfeatures |= (1 << FEATURE_SSE4_A);\n+      if (ecx & bit_FMA4)\n+\tfeatures |= (1 << FEATURE_FMA4);\n+      if (ecx & bit_XOP)\n+\tfeatures |= (1 << FEATURE_XOP);\n+    }\n+    \n   __cpu_model.__cpu_features[0] = features;\n }\n "}, {"sha": "973e69dea5d5b6454b0b9057c827ff8a0a246a48", "filename": "libgo/go/net/dial_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74924838e8ac358ecb4fba084f9d396426ff0eb7/libgo%2Fgo%2Fnet%2Fdial_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74924838e8ac358ecb4fba084f9d396426ff0eb7/libgo%2Fgo%2Fnet%2Fdial_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fdial_test.go?ref=74924838e8ac358ecb4fba084f9d396426ff0eb7", "patch": "@@ -147,7 +147,7 @@ func TestSelfConnect(t *testing.T) {\n \t\tn = 100\n \t}\n \tfor i := 0; i < n; i++ {\n-\t\tc, err := Dial(\"tcp\", addr)\n+\t\tc, err := DialTimeout(\"tcp\", addr, time.Millisecond)\n \t\tif err == nil {\n \t\t\tc.Close()\n \t\t\tt.Errorf(\"#%d: Dial %q succeeded\", i, addr)"}]}