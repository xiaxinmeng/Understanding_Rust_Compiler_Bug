{"sha": "f9b4f8c126feed6efbeb16a6d4212fbbae73695e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjliNGY4YzEyNmZlZWQ2ZWZiZWIxNmE2ZDQyMTJmYmJhZTczNjk1ZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-08-02T18:48:00Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-08-02T18:48:00Z"}, "message": "re PR target/49878 ([h8300] ICE in based_loc_descr, at dwarf2out.c:10478)\n\nPR target/49878\nh8300: Don't allow eliminable registers to be pushed.\n\nFrom-SVN: r177200", "tree": {"sha": "b9e6dcb5b6df5269b27c1fad77a8c64b1fcc529d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9e6dcb5b6df5269b27c1fad77a8c64b1fcc529d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9b4f8c126feed6efbeb16a6d4212fbbae73695e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9b4f8c126feed6efbeb16a6d4212fbbae73695e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9b4f8c126feed6efbeb16a6d4212fbbae73695e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9b4f8c126feed6efbeb16a6d4212fbbae73695e/comments", "author": null, "committer": null, "parents": [{"sha": "2b756fa2977b0620d78446b7a97e2c8d7953543c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b756fa2977b0620d78446b7a97e2c8d7953543c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b756fa2977b0620d78446b7a97e2c8d7953543c"}], "stats": {"total": 231, "additions": 111, "deletions": 120}, "files": [{"sha": "306d968fa1f3cd7e4e400703c82f8a058f2e4ad2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9b4f8c126feed6efbeb16a6d4212fbbae73695e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9b4f8c126feed6efbeb16a6d4212fbbae73695e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9b4f8c126feed6efbeb16a6d4212fbbae73695e", "patch": "@@ -1,3 +1,20 @@\n+2011-08-02  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/49878\n+\t* config/h8300/h8300.c (h8300_move_ok): New.\n+\t* config/h8300/h8300-protos.h: Declare it.\n+\t* config/h8300/h8300.md (P): New mode iterator.\n+\t(*movqi_h8300, *movqi_h8300hs, movqi): Use h8300_move_ok.\n+\t(*movqi_h8sx, *movhi_h8300, *movhi_h8300hs, movhi): Likewise.\n+\t(movsi, *movsi_h8300, *movsi_h8300hs): Likewise.\n+\t(*pushqi1_h8300): Rename from pushqi1_h8300; use PRE_MODIFY.\n+\t(*pushqi1_h8300hs_<P>): Macroize from pushqi1_h8300hs_advanced\n+\tand pushqi1_h8300hs_normal; use PRE_MODIFY and\n+\tregister_no_sp_elim_operand.\n+\t(*pushhi1_h8300hs_<P>): Similarly.\n+\t(pushqi1, pushhi1, pushhi1_h8300): Remove.\n+\t* config/h8300/predicates.md (register_no_sp_elim_operand): New.\n+\n 2011-08-02  Richard Henderson  <rth@redhat.com>\n \n \tPR target/49881"}, {"sha": "aeac904031cc537d250af31535c18cb9a8e50718", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9b4f8c126feed6efbeb16a6d4212fbbae73695e/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9b4f8c126feed6efbeb16a6d4212fbbae73695e/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=f9b4f8c126feed6efbeb16a6d4212fbbae73695e", "patch": "@@ -101,6 +101,7 @@ extern int h8300_regs_ok_for_stm (int, rtx[]);\n extern int h8300_hard_regno_rename_ok (unsigned int, unsigned int);\n extern int h8300_hard_regno_nregs (int, enum machine_mode);\n extern int h8300_hard_regno_mode_ok (int, enum machine_mode);\n+extern bool h8300_move_ok (rtx, rtx);\n \n struct cpp_reader;\n extern void h8300_pr_interrupt (struct cpp_reader *);"}, {"sha": "ef483957366df94802dd35908825966e0ce446ea", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9b4f8c126feed6efbeb16a6d4212fbbae73695e/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9b4f8c126feed6efbeb16a6d4212fbbae73695e/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=f9b4f8c126feed6efbeb16a6d4212fbbae73695e", "patch": "@@ -5813,6 +5813,40 @@ h8300_hard_regno_mode_ok (int regno, enum machine_mode mode)\n        goes.  */\n     return regno == MAC_REG ? mode == SImode : 1;\n }\n+\n+/* Helper function for the move patterns.  Make sure a move is legitimate.  */\n+\n+bool\n+h8300_move_ok (rtx dest, rtx src)\n+{\n+  rtx addr, other;\n+\n+  /* Validate that at least one operand is a register.  */\n+  if (MEM_P (dest))\n+    {\n+      if (MEM_P (src) || CONSTANT_P (src))\n+\treturn false;\n+      addr = XEXP (dest, 0);\n+      other = src;\n+    }\n+  else if (MEM_P (src))\n+    {\n+      addr = XEXP (src, 0);\n+      other = dest;\n+    }\n+  else\n+    return true;\n+\n+  /* Validate that auto-inc doesn't affect OTHER.  */\n+  if (GET_RTX_CLASS (GET_CODE (addr)) != RTX_AUTOINC)\n+    return true;\n+  addr = XEXP (addr, 0);\n+\n+  if (addr == stack_pointer_rtx)\n+    return register_no_sp_elim_operand (other, VOIDmode);\n+  else\n+    return !reg_overlap_mentioned_p(other, addr);\n+}\n \f\n /* Perform target dependent optabs initialization.  */\n static void"}, {"sha": "fa1809dfa77dc66ea5bf573337303907af65c3d7", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 45, "deletions": 120, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9b4f8c126feed6efbeb16a6d4212fbbae73695e/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9b4f8c126feed6efbeb16a6d4212fbbae73695e/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=f9b4f8c126feed6efbeb16a6d4212fbbae73695e", "patch": "@@ -178,6 +178,15 @@\n \n (include \"predicates.md\")\n (include \"constraints.md\")\n+\f\n+;; ----------------------------------------------------------------------\n+;; MACRO DEFINITIONS\n+;; ----------------------------------------------------------------------\n+\n+;; This mode iterator allows :P to be used for patterns that operate on\n+;; pointer-sized quantities.  Exactly one of the two alternatives will match.\n+(define_mode_iterator P [(HI \"Pmode == HImode\") (SI \"Pmode == SImode\")])\n+\n \f\n ;; ----------------------------------------------------------------------\n ;; MOVE INSTRUCTIONS\n@@ -189,8 +198,7 @@\n   [(set (match_operand:QI 0 \"general_operand_dst\" \"=r,r ,<,r,r,m\")\n \t(match_operand:QI 1 \"general_operand_src\" \" I,r>,r,n,m,r\"))]\n   \"TARGET_H8300\n-   && (register_operand (operands[0], QImode)\n-       || register_operand (operands[1], QImode))\"\n+   && h8300_move_ok (operands[0], operands[1])\"\n   \"@\n    sub.b\t%X0,%X0\n    mov.b\t%R1,%X0\n@@ -205,8 +213,7 @@\n   [(set (match_operand:QI 0 \"general_operand_dst\" \"=r,r ,<,r,r,m\")\n \t(match_operand:QI 1 \"general_operand_src\" \" I,r>,r,n,m,r\"))]\n   \"(TARGET_H8300H || TARGET_H8300S) && !TARGET_H8300SX\n-   && (register_operand (operands[0], QImode)\n-       || register_operand (operands[1], QImode))\"\n+   && h8300_move_ok (operands[0], operands[1])\"\n   \"@\n    sub.b\t%X0,%X0\n    mov.b\t%R1,%X0\n@@ -232,16 +239,11 @@\n   [(set (match_operand:QI 0 \"general_operand_dst\" \"\")\n \t(match_operand:QI 1 \"general_operand_src\" \"\"))]\n   \"\"\n-  \"\n {\n   /* One of the ops has to be in a register.  */\n-  if (!TARGET_H8300SX\n-      && !register_operand (operand0, QImode)\n-      && !register_operand (operand1, QImode))\n-    {\n-      operands[1] = copy_to_mode_reg (QImode, operand1);\n-    }\n-}\")\n+  if (!TARGET_H8300SX && !h8300_move_ok (operands[0], operands[1]))\n+    operands[1] = copy_to_mode_reg (QImode, operands[1]);\n+})\n \n (define_insn \"movstrictqi\"\n   [(set (strict_low_part (match_operand:QI 0 \"general_operand_dst\" \"+r,r\"))\n@@ -260,13 +262,7 @@\n   [(set (match_operand:HI 0 \"general_operand_dst\" \"=r,r,<,r,r,m\")\n \t(match_operand:HI 1 \"general_operand_src\" \"I,r>,r,i,m,r\"))]\n   \"TARGET_H8300\n-   && (register_operand (operands[0], HImode)\n-       || register_operand (operands[1], HImode))\n-   && !(GET_CODE (operands[0]) == MEM\n-\t&& GET_CODE (XEXP (operands[0], 0)) == PRE_DEC\n-\t&& GET_CODE (XEXP (XEXP (operands[0], 0), 0)) == REG\n-\t&& GET_CODE (operands[1]) == REG\n-\t&& REGNO (XEXP (XEXP (operands[0], 0), 0)) == REGNO (operands[1]))\"\n+   && h8300_move_ok (operands[0], operands[1])\"\n   \"@\n    sub.w\t%T0,%T0\n    mov.w\t%T1,%T0\n@@ -282,8 +278,7 @@\n   [(set (match_operand:HI 0 \"general_operand_dst\" \"=r,r,<,r,r,m\")\n \t(match_operand:HI 1 \"general_operand_src\" \"I,r>,r,i,m,r\"))]\n   \"(TARGET_H8300H || TARGET_H8300S) && !TARGET_H8300SX\n-   && (register_operand (operands[0], HImode)\n-       || register_operand (operands[1], HImode))\"\n+   && h8300_move_ok (operands[0], operands[1])\"\n   \"@\n    sub.w\t%T0,%T0\n    mov.w\t%T1,%T0\n@@ -313,15 +308,11 @@\n   [(set (match_operand:HI 0 \"general_operand_dst\" \"\")\n \t(match_operand:HI 1 \"general_operand_src\" \"\"))]\n   \"\"\n-  \"\n {\n   /* One of the ops has to be in a register.  */\n-  if (!register_operand (operand1, HImode)\n-      && !register_operand (operand0, HImode))\n-    {\n-      operands[1] = copy_to_mode_reg (HImode, operand1);\n-    }\n-}\")\n+  if (!h8300_move_ok (operands[0], operands[1]))\n+    operands[1] = copy_to_mode_reg (HImode, operand1);\n+})\n \n (define_insn \"movstricthi\"\n   [(set (strict_low_part (match_operand:HI 0 \"general_operand_dst\" \"+r,r,r\"))\n@@ -341,7 +332,6 @@\n   [(set (match_operand:SI 0 \"general_operand_dst\" \"\")\n \t(match_operand:SI 1 \"general_operand_src\" \"\"))]\n   \"\"\n-  \"\n {\n   if (TARGET_H8300)\n     {\n@@ -351,20 +341,16 @@\n   else if (!TARGET_H8300SX)\n     {\n       /* One of the ops has to be in a register.  */\n-      if (!register_operand (operand1, SImode)\n-\t  && !register_operand (operand0, SImode))\n-\t{\n-\t  operands[1] = copy_to_mode_reg (SImode, operand1);\n-\t}\n+      if (!h8300_move_ok (operands[0], operands[1]))\n+\toperands[1] = copy_to_mode_reg (SImode, operand1);\n     }\n-}\")\n+})\n \n (define_insn \"*movsi_h8300\"\n   [(set (match_operand:SI 0 \"general_operand_dst\" \"=r,r,r,o,<,r\")\n \t(match_operand:SI 1 \"general_operand_src\" \"I,r,io,r,r,>\"))]\n   \"TARGET_H8300\n-   && (register_operand (operands[0], SImode)\n-       || register_operand (operands[1], SImode))\"\n+   && h8300_move_ok (operands[0], operands[1])\"\n   \"*\n {\n   unsigned int rn = -1;\n@@ -434,13 +420,7 @@\n   [(set (match_operand:SI 0 \"general_operand_dst\" \"=r,r,r,<,r,r,m,*a,*a,r\")\n \t(match_operand:SI 1 \"general_operand_src\" \"I,r,i,r,>,m,r,I,r,*a\"))]\n   \"(TARGET_H8300S || TARGET_H8300H) && !TARGET_H8300SX\n-   && (register_operand (operands[0], SImode)\n-       || register_operand (operands[1], SImode))\n-   && !(GET_CODE (operands[0]) == MEM\n-\t&& GET_CODE (XEXP (operands[0], 0)) == PRE_DEC\n-\t&& GET_CODE (XEXP (XEXP (operands[0], 0), 0)) == REG\n-\t&& GET_CODE (operands[1]) == REG\n-\t&& REGNO (XEXP (XEXP (operands[0], 0), 0)) == REGNO (operands[1]))\"\n+   && h8300_move_ok (operands[0], operands[1])\"\n   \"*\n {\n   switch (which_alternative)\n@@ -872,90 +852,35 @@\n ;; PUSH INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n \n-(define_insn \"pushqi1_h8300\"\n-  [(set (reg:HI SP_REG)\n-\t(plus:HI (reg:HI SP_REG) (const_int -2)))\n-   (set (mem:QI (plus:HI (reg:HI SP_REG) (const_int -1)))\n-\t(match_operand:QI 0 \"register_operand\" \"r\"))]\n-  \"TARGET_H8300\n-   && operands[0] != stack_pointer_rtx\"\n+(define_insn \"*pushqi1_h8300\"\n+  [(set (mem:QI\n+\t  (pre_modify:HI\n+\t    (reg:HI SP_REG)\n+\t    (plus:HI (reg:HI SP_REG) (const_int -2))))\n+\t(match_operand:QI 0 \"register_no_sp_elim_operand\" \"r\"))]\n+  \"TARGET_H8300\"\n   \"mov.w\\\\t%T0,@-r7\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn \"pushqi1_h8300hs_advanced\"\n-  [(set (reg:SI SP_REG)\n-\t(plus:SI (reg:SI SP_REG) (const_int -4)))\n-   (set (mem:QI (plus:SI (reg:SI SP_REG) (const_int -3)))\n-\t(match_operand:QI 0 \"register_operand\" \"r\"))]\n-  \"(TARGET_H8300H || TARGET_H8300S)\n-   && operands[0] != stack_pointer_rtx\"\n-  \"mov.l\\\\t%S0,@-er7\"\n-  [(set_attr \"length\" \"4\")])\n-\n-(define_insn \"pushqi1_h8300hs_normal\"\n-  [(set (reg:HI SP_REG)\n-\t(plus:HI (reg:HI SP_REG) (const_int -4)))\n-   (set (mem:QI (plus:HI (reg:HI SP_REG) (const_int -3)))\n-\t(match_operand:QI 0 \"register_operand\" \"r\"))]\n-  \"(TARGET_H8300H || TARGET_H8300S)\n-   && operands[0] != stack_pointer_rtx\"\n-  \"mov.l\\\\t%S0,@-er7\"\n-  [(set_attr \"length\" \"4\")])\n-\n-(define_expand \"pushqi1\"\n-  [(match_operand:QI 0 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  if (TARGET_H8300)\n-    emit_insn (gen_pushqi1_h8300 (operands[0]));\n-  else if (!TARGET_NORMAL_MODE)\n-    emit_insn (gen_pushqi1_h8300hs_advanced (operands[0]));\n-  else\n-    emit_insn (gen_pushqi1_h8300hs_normal (operands[0]));\n-  DONE;\n-}\")\n-\n-(define_expand \"pushhi1_h8300\"\n-  [(set (mem:HI (pre_dec:HI (reg:HI SP_REG)))\n-\t(match_operand:HI 0 \"register_operand\" \"\"))]\n-  \"TARGET_H8300\n-   && operands[0] != stack_pointer_rtx\"\n-  \"\")\n-\n-(define_insn \"pushhi1_h8300hs_advanced\"\n-  [(set (reg:SI SP_REG)\n-\t(plus:SI (reg:SI SP_REG) (const_int -4)))\n-   (set (mem:HI (plus:SI (reg:SI SP_REG) (const_int -2)))\n-\t(match_operand:HI 0 \"register_operand\" \"r\"))]\n-  \"(TARGET_H8300H || TARGET_H8300S)\n-   && operands[0] != stack_pointer_rtx\"\n+(define_insn \"*pushqi1_h8300hs_<mode>\"\n+  [(set (mem:QI\n+\t  (pre_modify:P\n+\t    (reg:P SP_REG)\n+\t    (plus:P (reg:P SP_REG) (const_int -4))))\n+\t(match_operand:QI 0 \"register_no_sp_elim_operand\" \"r\"))]\n+  \"TARGET_H8300H || TARGET_H8300S\"\n   \"mov.l\\\\t%S0,@-er7\"\n   [(set_attr \"length\" \"4\")])\n \n-(define_insn \"pushhi1_h8300hs_normal\"\n-  [(set (reg:HI SP_REG)\n-\t(plus:HI (reg:HI SP_REG) (const_int -4)))\n-   (set (mem:HI (plus:HI (reg:HI SP_REG) (const_int -2)))\n-\t(match_operand:HI 0 \"register_operand\" \"r\"))]\n-  \"(TARGET_H8300H || TARGET_H8300S)\n-   && operands[0] != stack_pointer_rtx\"\n+(define_insn \"*pushhi1_h8300hs_<mode>\"\n+  [(set (mem:HI\n+\t  (pre_modify:P\n+\t    (reg:P SP_REG)\n+\t    (plus:P (reg:P SP_REG) (const_int -4))))\n+\t(match_operand:HI 0 \"register_no_sp_elim_operand\" \"r\"))]\n+  \"TARGET_H8300H || TARGET_H8300S\"\n   \"mov.l\\\\t%S0,@-er7\"\n   [(set_attr \"length\" \"4\")])\n-\n-(define_expand \"pushhi1\"\n-  [(match_operand:HI 0 \"register_operand\" \"\")]\n-  \"\"\n-  \"\n-{\n-  if (TARGET_H8300)\n-    emit_insn (gen_pushhi1_h8300 (operands[0]));\n-  else if (!TARGET_NORMAL_MODE)\n-    emit_insn (gen_pushhi1_h8300hs_advanced (operands[0]));\n-  else\n-    emit_insn (gen_pushhi1_h8300hs_normal (operands[0]));\n-  DONE;\n-}\")\n \f\n ;; ----------------------------------------------------------------------\n ;; TEST INSTRUCTIONS"}, {"sha": "3bb5e1a5d53531688777117a1382b2239c2eef5c", "filename": "gcc/config/h8300/predicates.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9b4f8c126feed6efbeb16a6d4212fbbae73695e/gcc%2Fconfig%2Fh8300%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9b4f8c126feed6efbeb16a6d4212fbbae73695e/gcc%2Fconfig%2Fh8300%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fpredicates.md?ref=f9b4f8c126feed6efbeb16a6d4212fbbae73695e", "patch": "@@ -375,6 +375,20 @@\n   return op == stack_pointer_rtx;\n })\n \n+;; False if X is anything that might eliminate to the stack pointer.\n+\n+(define_predicate \"register_no_sp_elim_operand\"\n+  (match_operand 0 \"register_operand\")\n+{\n+  if (GET_CODE (op) == SUBREG)\n+    op = SUBREG_REG (op);\n+  return !(op == stack_pointer_rtx\n+\t   || op == arg_pointer_rtx\n+\t   || op == frame_pointer_rtx\n+\t   || IN_RANGE (REGNO (op),\n+\t\t\tFIRST_PSEUDO_REGISTER, LAST_VIRTUAL_REGISTER));\n+})\n+\n ;; Return nonzero if X is a constant whose absolute value is greater\n ;; than 2.\n "}]}