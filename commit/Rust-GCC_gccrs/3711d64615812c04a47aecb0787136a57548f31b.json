{"sha": "3711d64615812c04a47aecb0787136a57548f31b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzcxMWQ2NDYxNTgxMmMwNGE0N2FlY2IwNzg3MTM2YTU3NTQ4ZjMxYg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-09-05T07:52:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-09-05T07:52:55Z"}, "message": "errout.ads, errout.adb (Fix Error_Msg_F): Fix implementation to meet spec.\n\n2005-09-01  Robert Dewar  <dewar@adacore.com>\n\n\t* errout.ads, errout.adb (Fix Error_Msg_F): Fix implementation to meet\n\tspec.\n\tImplement new insertion char < (conditional warning)\n\t* errutil.adb, erroutc.adb: Implement new insertion char <\n\t(conditional warning).\n\t* sem_elab.adb, prj-dect.adb, erroutc.ads, err_vars.ads\n\t(Error_Msg_Warn): New variable for < insertion char.\n\t* prj-nmsc.adb: Implement new errout insertion char < (conditional\n\twarning).\n\t(Check_For_Source): Change value of Source_Id only after the current\n\tsource has been dealt with.\n\nFrom-SVN: r103859", "tree": {"sha": "a2e43c3e03fc087f1f1ac33952d8eb14bc5d2009", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2e43c3e03fc087f1f1ac33952d8eb14bc5d2009"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3711d64615812c04a47aecb0787136a57548f31b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3711d64615812c04a47aecb0787136a57548f31b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3711d64615812c04a47aecb0787136a57548f31b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3711d64615812c04a47aecb0787136a57548f31b/comments", "author": null, "committer": null, "parents": [{"sha": "405e57adc0248985e4ef02e7b16a176c06a646e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/405e57adc0248985e4ef02e7b16a176c06a646e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/405e57adc0248985e4ef02e7b16a176c06a646e7"}], "stats": {"total": 236, "additions": 123, "deletions": 113}, "files": [{"sha": "04ef8b200189e3b8ff4ecf901ca9847abb20b7ed", "filename": "gcc/ada/err_vars.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3711d64615812c04a47aecb0787136a57548f31b/gcc%2Fada%2Ferr_vars.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3711d64615812c04a47aecb0787136a57548f31b/gcc%2Fada%2Ferr_vars.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferr_vars.ads?ref=3711d64615812c04a47aecb0787136a57548f31b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2002 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -103,6 +103,10 @@ package Err_Vars is\n    --  note get reset by any Error_Msg call, so the caller is responsible\n    --  for resetting it.\n \n+   Error_Msg_Warn : Boolean;\n+   --  Used if current message contains a < insertion character to indicate\n+   --  if the current message is a warning message.\n+\n    Warn_On_Instance : Boolean := False;\n    --  Normally if a warning is generated in a generic template from the\n    --  analysis of the template, then the warning really belongs in the"}, {"sha": "5da299a419e7aa294f0a224e96eead9a85fd3143", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3711d64615812c04a47aecb0787136a57548f31b/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3711d64615812c04a47aecb0787136a57548f31b/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=3711d64615812c04a47aecb0787136a57548f31b", "patch": "@@ -49,7 +49,6 @@ with Sinfo;    use Sinfo;\n with Snames;   use Snames;\n with Stand;    use Stand;\n with Style;\n-with Uintp;    use Uintp;\n with Uname;    use Uname;\n \n with Unchecked_Conversion;\n@@ -322,14 +321,13 @@ package body Errout is\n          return;\n       end if;\n \n-      --  The idea at this stage is that we have two kinds of messages.\n+      --  The idea at this stage is that we have two kinds of messages\n \n-      --  First, we have those that are to be placed as requested at\n-      --  Flag_Location. This includes messages that have nothing to\n-      --  do with generics, and also messages placed on generic templates\n-      --  that reflect an error in the template itself. For such messages\n-      --  we simply call Error_Msg_Internal to place the message in the\n-      --  requested location.\n+      --  First, we have those messages that are to be placed as requested at\n+      --  Flag_Location. This includes messages that have nothing to do with\n+      --  generics, and also messages placed on generic templates that reflect\n+      --  an error in the template itself. For such messages we simply call\n+      --  Error_Msg_Internal to place the message in the requested location.\n \n       if Instantiation (Sindex) = No_Location then\n          Error_Msg_Internal (Msg, Flag_Location, Flag_Location, False);\n@@ -606,7 +604,7 @@ package body Errout is\n \n    procedure Error_Msg_F (Msg : String; N : Node_Id) is\n    begin\n-      Error_Msg_NEL (Msg, N, N, First_Sloc (N));\n+      Error_Msg_NEL (Msg, N, N, Sloc (First_Node (N)));\n    end Error_Msg_F;\n \n    ------------------\n@@ -1613,7 +1611,7 @@ package body Errout is\n    procedure Remove_Warning_Messages (N : Node_Id) is\n \n       function Check_For_Warning (N : Node_Id) return Traverse_Result;\n-      --  This function checks one node for a possible warning message.\n+      --  This function checks one node for a possible warning message\n \n       function Check_All_Warnings is new\n         Traverse_Func (Check_For_Warning);\n@@ -2253,6 +2251,9 @@ package body Errout is\n             when '?' =>\n                null; -- already dealt with\n \n+            when '<' =>\n+               null; -- already dealt with\n+\n             when '|' =>\n                null; -- already dealt with\n "}, {"sha": "ff254683d0476d69f12cbcfcff124f26fbb34d70", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3711d64615812c04a47aecb0787136a57548f31b/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3711d64615812c04a47aecb0787136a57548f31b/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=3711d64615812c04a47aecb0787136a57548f31b", "patch": "@@ -243,6 +243,12 @@ package Errout is\n    --      phase anyway. Messages starting with (style) are also treated as\n    --      warning messages.\n \n+   --    Insertion character < (Less Than: conditional warning message)\n+   --      The character < appearing anywhere in a message is used for a\n+   --      conditional error message. If Error_Msg_Warn is True, then the\n+   --      effect is the same as ? described above. If Error_Msg_Warn is\n+   --      False, then there is no effect.\n+\n    --    Insertion character A-Z (Upper case letter: Ada reserved word)\n    --      If two or more upper case letters appear in the message, they are\n    --      taken as an Ada reserved word, and are converted to the default\n@@ -358,6 +364,10 @@ package Errout is\n    --  note get reset by any Error_Msg call, so the caller is responsible\n    --  for resetting it.\n \n+   Error_Msg_Warn : Boolean renames Err_Vars.Error_Msg_Warn;\n+   --  Used if current message contains a < insertion character to indicate\n+   --  if the current message is a warning message.\n+\n    -----------------------------------------------------\n    -- Format of Messages and Manual Quotation Control --\n    -----------------------------------------------------\n@@ -440,7 +450,7 @@ package Errout is\n \n    function Get_Location (E : Error_Msg_Id) return Source_Ptr\n      renames Erroutc.Get_Location;\n-   --  Returns the flag location of the error message with the given id E.\n+   --  Returns the flag location of the error message with the given id E\n \n    ------------------------\n    -- List Pragmas Table --\n@@ -601,7 +611,7 @@ package Errout is\n    --  of its descendent nodes. No effect if no such warnings.\n \n    procedure Remove_Warning_Messages (L : List_Id);\n-   --  Remove warnings on all elements of a list.\n+   --  Remove warnings on all elements of a list\n \n    procedure Set_Ignore_Errors (To : Boolean);\n    --  Following a call to this procedure with To=True, all error calls are"}, {"sha": "2a962964eb99415bf1253235ca9e2cf96d07f843", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3711d64615812c04a47aecb0787136a57548f31b/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3711d64615812c04a47aecb0787136a57548f31b/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=3711d64615812c04a47aecb0787136a57548f31b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -40,7 +40,6 @@ with Sinput;   use Sinput;\n with Snames;   use Snames;\n with Targparm; use Targparm;\n with Table;\n-with Types;    use Types;\n with Uintp;    use Uintp;\n \n package body Erroutc is\n@@ -983,6 +982,11 @@ package body Erroutc is\n          then\n             Is_Warning_Msg := True;\n \n+         elsif Msg (J) = '<'\n+           and then (J = Msg'First or else Msg (J - 1) /= ''')\n+         then\n+            Is_Warning_Msg := Error_Msg_Warn;\n+\n          elsif Msg (J) = '|'\n            and then (J = Msg'First or else Msg (J - 1) /= ''')\n          then"}, {"sha": "ea6fda053eca0209c9f7fb1b6e915b5fa524b696", "filename": "gcc/ada/erroutc.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3711d64615812c04a47aecb0787136a57548f31b/gcc%2Fada%2Ferroutc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3711d64615812c04a47aecb0787136a57548f31b/gcc%2Fada%2Ferroutc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.ads?ref=3711d64615812c04a47aecb0787136a57548f31b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -28,7 +28,7 @@\n --  reporting packages, including Errout and Prj.Err.\n \n with Table;\n-with Types;  use Types;\n+with Types; use Types;\n \n package Erroutc is\n \n@@ -122,7 +122,7 @@ package Erroutc is\n    --  Error_Msg routines.\n \n    function Get_Location (E : Error_Msg_Id) return Source_Ptr;\n-   --  Returns the flag location of the error message with the given id E.\n+   --  Returns the flag location of the error message with the given id E\n \n    -----------------------------------\n    -- Error Message Data Structures --\n@@ -332,7 +332,7 @@ package Erroutc is\n    --  Handle name insertion (% insertion character)\n \n    procedure Set_Msg_Insertion_Reserved_Name;\n-   --  Handle insertion of reserved word name (* insertion character).\n+   --  Handle insertion of reserved word name (* insertion character)\n \n    procedure Set_Msg_Insertion_Reserved_Word\n      (Text : String;"}, {"sha": "e0a686454849f7f684c64ddd4a9c51d0c53ecdf7", "filename": "gcc/ada/errutil.adb", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3711d64615812c04a47aecb0787136a57548f31b/gcc%2Fada%2Ferrutil.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3711d64615812c04a47aecb0787136a57548f31b/gcc%2Fada%2Ferrutil.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrutil.adb?ref=3711d64615812c04a47aecb0787136a57548f31b", "patch": "@@ -44,7 +44,7 @@ package body Errutil is\n    -----------------------\n \n    procedure Error_Msg_AP (Msg : String);\n-   --  Output a message just after the previous token.\n+   --  Output a message just after the previous token\n \n    procedure Output_Source_Line\n      (L           : Physical_Line_Number;\n@@ -184,12 +184,12 @@ package body Errutil is\n          return;\n       end if;\n \n-      --  Return without doing anything if message is killed and this\n-      --  is not the first error message. The philosophy is that if we\n-      --  get a weird error message and we already have had a message,\n-      --  then we hope the weird message is a junk cascaded message\n+      --  Return without doing anything if message is killed and this is not\n+      --  the first error message. The philosophy is that if we get a weird\n+      --  error message and we already have had a message, then we hope the\n+      --  weird message is a junk cascaded message\n \n-      --  Immediate return if warning message and warnings are suppressed\n+      --  Immediate return if warning message and warnings are suppressed.\n       --  Note that style messages are not warnings for this purpose.\n \n       if Is_Warning_Msg and then Warnings_Suppressed (Sptr) then\n@@ -246,20 +246,19 @@ package body Errutil is\n         and then Errors.Table (Prev_Msg).Sfile =\n         Errors.Table (Cur_Msg).Sfile\n       then\n-         --  Don't delete unconditional messages and at this stage,\n-         --  don't delete continuation lines (we attempted to delete\n-         --  those earlier if the parent message was deleted.\n+         --  Don't delete unconditional messages and at this stage, don't\n+         --  delete continuation lines (we attempted to delete those earlier\n+         --  if the parent message was deleted.\n \n          if not Errors.Table (Cur_Msg).Uncond\n            and then not Continuation\n          then\n \n-            --  Don't delete if prev msg is warning and new msg is\n-            --  an error. This is because we don't want a real error\n-            --  masked by a warning. In all other cases (that is parse\n-            --  errors for the same line that are not unconditional)\n-            --  we do delete the message. This helps to avoid\n-            --  junk extra messages from cascaded parsing errors\n+            --  Don't delete if prev msg is warning and new msg is an error.\n+            --  This is because we don't want a real error masked by a warning.\n+            --  In all other cases (that is parse errors for the same line that\n+            --  are not unconditional) we do delete the message. This helps to\n+            --  avoid junk extra messages from cascaded parsing errors\n \n             if not (Errors.Table (Prev_Msg).Warn\n                       or\n@@ -269,8 +268,8 @@ package body Errutil is\n                       or\n                     Errors.Table (Cur_Msg).Style)\n             then\n-               --  All tests passed, delete the message by simply\n-               --  returning without any further processing.\n+               --  All tests passed, delete the message by simply returning\n+               --  without any further processing.\n \n                if not Continuation then\n                   Last_Killed := True;\n@@ -438,7 +437,6 @@ package body Errutil is\n \n                Write_Eol;\n             end if;\n-\n          end loop;\n \n          --  Then output errors, if any, for subsidiary units\n@@ -564,7 +562,6 @@ package body Errutil is\n          Total_Errors_Detected := Total_Errors_Detected + Warnings_Detected;\n          Warnings_Detected := 0;\n       end if;\n-\n    end Finalize;\n \n    ----------------\n@@ -585,7 +582,6 @@ package body Errutil is\n       --  an initial dummy entry covering all possible source locations.\n \n       Warnings.Init;\n-\n    end Initialize;\n \n    ------------------------\n@@ -682,6 +678,7 @@ package body Errutil is\n             Set_Msg_Insertion_Name;\n \n          elsif C = '$' then\n+\n             --  '$' is ignored\n \n             null;\n@@ -690,6 +687,7 @@ package body Errutil is\n             Set_Msg_Insertion_File_Name;\n \n          elsif C = '}' then\n+\n             --  '}' is ignored\n \n             null;\n@@ -698,6 +696,7 @@ package body Errutil is\n             Set_Msg_Insertion_Reserved_Name;\n \n          elsif C = '&' then\n+\n             --  '&' is ignored\n \n             null;\n@@ -724,6 +723,9 @@ package body Errutil is\n          elsif C = '?' then\n             null;\n \n+         elsif C = '<' then\n+            null;\n+\n          elsif C = '|' then\n             null;\n "}, {"sha": "00922b31b9f33cf24ad18b4cc126c69ba679b5bb", "filename": "gcc/ada/prj-dect.adb", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3711d64615812c04a47aecb0787136a57548f31b/gcc%2Fada%2Fprj-dect.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3711d64615812c04a47aecb0787136a57548f31b/gcc%2Fada%2Fprj-dect.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-dect.adb?ref=3711d64615812c04a47aecb0787136a57548f31b", "patch": "@@ -30,9 +30,7 @@ with Opt;         use Opt;\n with Prj.Err;     use Prj.Err;\n with Prj.Strt;    use Prj.Strt;\n with Prj.Tree;    use Prj.Tree;\n-with Scans;       use Scans;\n with Snames;\n-with Types;       use Types;\n with Prj.Attr;    use Prj.Attr;\n with Prj.Attr.PM; use Prj.Attr.PM;\n with Uintp;       use Uintp;\n@@ -212,13 +210,8 @@ package body Prj.Dect is\n                end if;\n \n                Error_Msg_Name_1 := Token_Name;\n-\n-               if Warning then\n-                  Error_Msg (\"?undefined attribute {\", Token_Ptr);\n-\n-               else\n-                  Error_Msg (\"undefined attribute {\", Token_Ptr);\n-               end if;\n+               Error_Msg_Warn := Warning;\n+               Error_Msg (\"<undefined attribute {\", Token_Ptr);\n             end if;\n \n          --  Set, if appropriate the index case insensitivity flag"}, {"sha": "bc7adfa375a9432c0518f352866ea229520de71b", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3711d64615812c04a47aecb0787136a57548f31b/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3711d64615812c04a47aecb0787136a57548f31b/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=3711d64615812c04a47aecb0787136a57548f31b", "patch": "@@ -38,7 +38,6 @@ with Prj.Util; use Prj.Util;\n with Sinput.P;\n with Snames;   use Snames;\n with Table;    use Table;\n-with Types;    use Types;\n \n with Ada.Characters.Handling;    use Ada.Characters.Handling;\n with Ada.Strings;                use Ada.Strings;\n@@ -47,7 +46,6 @@ with Ada.Strings.Maps.Constants; use Ada.Strings.Maps.Constants;\n \n with GNAT.Case_Util;             use GNAT.Case_Util;\n with GNAT.Directory_Operations;  use GNAT.Directory_Operations;\n-with GNAT.OS_Lib;                use GNAT.OS_Lib;\n with GNAT.HTable;\n \n package body Prj.Nmsc is\n@@ -876,7 +874,6 @@ package body Prj.Nmsc is\n \n             while Source_Id /= No_Other_Source loop\n                Source := In_Tree.Other_Sources.Table (Source_Id);\n-               Source_Id := Source.Next;\n \n                if Source.File_Name = File_Id then\n \n@@ -939,6 +936,8 @@ package body Prj.Nmsc is\n                         Real_Location);\n                      return;\n                end if;\n+\n+               Source_Id := Source.Next;\n             end loop;\n \n             if Current_Verbosity = High then\n@@ -2368,7 +2367,7 @@ package body Prj.Nmsc is\n             end if;\n \n          else\n-            --  Library_Symbol_File is defined. Check that the file exists.\n+            --  Library_Symbol_File is defined. Check that the file exists\n \n             Data.Symbol_Data.Symbol_File := Lib_Symbol_File.Value;\n \n@@ -2461,34 +2460,29 @@ package body Prj.Nmsc is\n                then\n                   Error_Msg_Name_1 := Lib_Ref_Symbol_File.Value;\n \n-                  --  For controlled symbol policy, it is an error\n-                  --  if the reference symbol file does not exist.\n+                  --  For controlled symbol policy, it is an error if the\n+                  --  reference symbol file does not exist. For other symbol\n+                  --  policies, this is just a warning\n \n-                  if Data.Symbol_Data.Symbol_Policy = Controlled then\n-                     Error_Msg\n-                       (Project, In_Tree,\n-                        \"library reference symbol file { does not exist\",\n-                        Lib_Ref_Symbol_File.Location);\n+                  Error_Msg_Warn :=\n+                    Data.Symbol_Data.Symbol_Policy /= Controlled;\n \n-                  else\n-                     --  For other symbol policies, this is just a warning\n-\n-                     Error_Msg\n-                       (Project, In_Tree,\n-                        \"?library reference symbol file { does not exist\",\n-                        Lib_Ref_Symbol_File.Location);\n+                  Error_Msg\n+                    (Project, In_Tree,\n+                     \"<library reference symbol file { does not exist\",\n+                     Lib_Ref_Symbol_File.Location);\n \n-                     --  In addition, if symbol policy is Compliant, it is\n-                     --  changed to Autonomous, because there is no reference\n-                     --  to check against, and we don't want to fail in this\n-                     --  case.\n+                  --  In addition in the non-controlled case, if symbol policy\n+                  --  is Compliant, it is changed to Autonomous, because there\n+                  --  is no reference to check against, and we don't want to\n+                  --  fail in this case.\n \n+                  if Data.Symbol_Data.Symbol_Policy /= Controlled then\n                      if Data.Symbol_Data.Symbol_Policy = Compliant then\n                         Data.Symbol_Data.Symbol_Policy := Autonomous;\n                      end if;\n                   end if;\n                end if;\n-\n             end if;\n          end if;\n       end if;\n@@ -2588,11 +2582,19 @@ package body Prj.Nmsc is\n       if Msg (First) = '\\' then\n          First := First + 1;\n \n-      --  Warniung character is always the first one in this package\n+         --  Warniung character is always the first one in this package\n+         --  this is an undoocumented kludge!!!\n \n       elsif Msg (First) = '?' then\n          First := First + 1;\n          Add (\"Warning: \");\n+\n+      elsif Msg (First) = '<' then\n+         First := First + 1;\n+\n+         if Err_Vars.Error_Msg_Warn then\n+            Add (\"Warning: \");\n+         end if;\n       end if;\n \n       for Index in First .. Msg'Last loop"}, {"sha": "25b5fd36624f67f1930d7fc036f28b6d010753ee", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 35, "deletions": 41, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3711d64615812c04a47aecb0787136a57548f31b/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3711d64615812c04a47aecb0787136a57548f31b/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=3711d64615812c04a47aecb0787136a57548f31b", "patch": "@@ -296,17 +296,17 @@ package body Sem_Elab is\n    --  convention Stubbed.\n \n    procedure Supply_Bodies (L : List_Id);\n-   --  Calls Supply_Bodies for all elements of the given list L.\n+   --  Calls Supply_Bodies for all elements of the given list L\n \n    function Within (E1, E2 : Entity_Id) return Boolean;\n-   --  Given two scopes E1 and E2, returns True if E1 is equal to E2, or\n-   --  is one of its contained scopes, False otherwise.\n+   --  Given two scopes E1 and E2, returns True if E1 is equal to E2, or is one\n+   --  of its contained scopes, False otherwise.\n \n    function Within_Elaborate_All (E : Entity_Id) return Boolean;\n    --  Before emitting a warning on a scope E for a missing elaborate_all,\n-   --  check whether E may be in the context of a directly visible unit\n-   --  U to which the pragma applies. This prevents spurious warnings when\n-   --  the called entity is renamed within U.\n+   --  check whether E may be in the context of a directly visible unit U to\n+   --  which the pragma applies. This prevents spurious warnings when the\n+   --  called entity is renamed within U.\n \n    ------------------\n    -- Check_A_Call --\n@@ -963,7 +963,7 @@ package body Sem_Elab is\n       then\n          return;\n \n-      --  Nothing to do if this is a call already rewritten for elab checking.\n+      --  Nothing to do if this is a call already rewritten for elab checking\n \n       elsif Nkind (Parent (N)) = N_Conditional_Expression then\n          return;\n@@ -1051,35 +1051,29 @@ package body Sem_Elab is\n               and then In_Preelaborated_Unit\n               and then not In_Inlined_Body\n             then\n-               --  This is a warning in -gnatg mode allowing such calls to\n-               --  be used in the predefined library with appropriate care.\n-\n-               if GNAT_Mode then\n-                  Error_Msg_N\n-                    (\"?non-static call not allowed in preelaborated unit\", N);\n-               else\n-                  Error_Msg_N\n-                    (\"non-static call not allowed in preelaborated unit\", N);\n-               end if;\n+               --  This is a warning in GNAT mode allowing such calls to be\n+               --  used in the predefined library with appropriate care.\n \n+               Error_Msg_Warn := GNAT_Mode;\n+               Error_Msg_N\n+                 (\"<non-static call not allowed in preelaborated unit\", N);\n                return;\n             end if;\n \n-         --  Second case, we are inside a subprogram or concurrent unit\n-         --  i.e, we are not in elaboration code.\n+         --  Second case, we are inside a subprogram or concurrent unit, which\n+         --  means we are not in elaboration code.\n \n          else\n             --  In this case, the issue is whether we are inside the\n-            --  declarative part of the unit in which we live, or inside\n-            --  its statements. In the latter case, there is no issue of\n-            --  ABE calls at this level (a call from outside to the unit\n-            --  in which we live might cause an ABE, but that will be\n-            --  detected when we analyze that outer level call, as it\n-            --  recurses into the called unit).\n+            --  declarative part of the unit in which we live, or inside its\n+            --  statements. In the latter case, there is no issue of ABE calls\n+            --  at this level (a call from outside to the unit in which we live\n+            --  might cause an ABE, but that will be detected when we analyze\n+            --  that outer level call, as it recurses into the called unit).\n \n-            --  Climb up the tree, doing this test, and also testing\n-            --  for being inside a default expression, which, as\n-            --  discussed above, is not checked at this stage.\n+            --  Climb up the tree, doing this test, and also testing for being\n+            --  inside a default expression, which, as discussed above, is not\n+            --  checked at this stage.\n \n             declare\n                P : Node_Id;\n@@ -1088,9 +1082,9 @@ package body Sem_Elab is\n             begin\n                P := N;\n                loop\n-                  --  If we find a parentless subtree, it seems safe to\n-                  --  assume that we are not in a declarative part and\n-                  --  that no checking is required.\n+                  --  If we find a parentless subtree, it seems safe to assume\n+                  --  that we are not in a declarative part and that no\n+                  --  checking is required.\n \n                   if No (P) then\n                      return;\n@@ -1106,8 +1100,8 @@ package body Sem_Elab is\n \n                   exit when Nkind (P) = N_Subunit;\n \n-                  --  Filter out case of default expressions, where\n-                  --  we do not do the check at this stage.\n+                  --  Filter out case of default expressions, where we do not\n+                  --  do the check at this stage.\n \n                   if Nkind (P) = N_Parameter_Specification\n                        or else\n@@ -1136,11 +1130,11 @@ package body Sem_Elab is\n                      elsif Dynamic_Elaboration_Checks then\n \n                         --  This is a rather new check, going into version\n-                        --  3.14a1 for the first time (V1.80 of this unit),\n-                        --  so we provide a debug flag to enable it. That\n-                        --  way we have an easy work around for regressions\n-                        --  that are caused by this new check. This debug\n-                        --  flag can be removed later.\n+                        --  3.14a1 for the first time (V1.80 of this unit), so\n+                        --  we provide a debug flag to enable it. That way we\n+                        --  have an easy work around for regressions that are\n+                        --  caused by this new check. This debug flag can be\n+                        --  removed later.\n \n                         if Debug_Flag_DD then\n                            return;\n@@ -1381,7 +1375,7 @@ package body Sem_Elab is\n          return;\n       end if;\n \n-      --  Nothing to do if the instantiation is not in the main unit.\n+      --  Nothing to do if the instantiation is not in the main unit\n \n       if not In_Extended_Main_Code_Unit (N) then\n          return;\n@@ -1882,7 +1876,7 @@ package body Sem_Elab is\n             else\n                Elmt := First_Elmt (Inter_Procs);\n \n-               --  No need for multiple entries of the same type.\n+               --  No need for multiple entries of the same type\n \n                while Present (Elmt) loop\n                   if Node (Elmt) = Proc then\n@@ -1946,7 +1940,7 @@ package body Sem_Elab is\n    begin\n       Enclosing := Outer_Unit (Current_Scope);\n \n-      --  Find all tasks declared in the current unit.\n+      --  Find all tasks declared in the current unit\n \n       if Nkind (N) = N_Package_Body then\n          P := Unit_Declaration_Node (Corresponding_Spec (N));"}]}