{"sha": "1b4d752a6422fad640ac6c18ad49a424b02f4849", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI0ZDc1MmE2NDIyZmFkNjQwYWM2YzE4YWQ0OWE0MjRiMDJmNDg0OQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "1999-09-02T09:21:42Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "1999-09-02T09:21:42Z"}, "message": "call.c (build_conditional_expr): Warn on enum mismatches.\n\n\t* call.c (build_conditional_expr): Warn on enum mismatches.\n\t(convert_arg_to_ellipsis): Move non-pod check to after\n\tconversion.\n\nFrom-SVN: r29056", "tree": {"sha": "9fc288764a6314905d2b2a86db4fbb86f72faa71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fc288764a6314905d2b2a86db4fbb86f72faa71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b4d752a6422fad640ac6c18ad49a424b02f4849", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b4d752a6422fad640ac6c18ad49a424b02f4849", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b4d752a6422fad640ac6c18ad49a424b02f4849", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b4d752a6422fad640ac6c18ad49a424b02f4849/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e6380233ffeef512f5db01c0543a37e68c61cb90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6380233ffeef512f5db01c0543a37e68c61cb90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6380233ffeef512f5db01c0543a37e68c61cb90"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "0bf24e08095b61a170849354fb644634713808df", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4d752a6422fad640ac6c18ad49a424b02f4849/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4d752a6422fad640ac6c18ad49a424b02f4849/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1b4d752a6422fad640ac6c18ad49a424b02f4849", "patch": "@@ -1,3 +1,9 @@\n+1999-09-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* call.c (build_conditional_expr): Warn on enum mismatches.\n+\t(convert_arg_to_ellipsis): Move non-pod check to after\n+\tconversion.\n+\n 1999-09-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gxx.gperf (hash, is_reserved_word): Add prototypes."}, {"sha": "81e4efb4a3913ad97d5b0ecd86e6993aeb5a3d19", "filename": "gcc/cp/call.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4d752a6422fad640ac6c18ad49a424b02f4849/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4d752a6422fad640ac6c18ad49a424b02f4849/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=1b4d752a6422fad640ac6c18ad49a424b02f4849", "patch": "@@ -2991,6 +2991,18 @@ build_conditional_expr (arg1, arg2, arg3)\n       /* In this case, there is always a common type.  */\n       result_type = type_after_usual_arithmetic_conversions (arg2_type, \n \t\t\t\t\t\t\t     arg3_type);\n+      \n+      if (TREE_CODE (arg2_type) == ENUMERAL_TYPE\n+          && TREE_CODE (arg3_type) == ENUMERAL_TYPE)\n+         cp_warning (\"enumeral mismatch in conditional expression: `%T' vs `%T'\",\n+                   arg2_type, arg3_type);\n+      else if (extra_warnings\n+               && ((TREE_CODE (arg2_type) == ENUMERAL_TYPE\n+                    && !same_type_p (arg3_type, type_promotes_to (arg2_type)))\n+                   || (TREE_CODE (arg3_type) == ENUMERAL_TYPE\n+                       && !same_type_p (arg2_type, type_promotes_to (arg3_type)))))\n+        cp_warning (\"enumeral and non-enumeral type in conditional expression\");\n+      \n       arg2 = perform_implicit_conversion (result_type, arg2);\n       arg3 = perform_implicit_conversion (result_type, arg3);\n     }\n@@ -3755,13 +3767,6 @@ tree\n convert_arg_to_ellipsis (arg)\n      tree arg;\n {\n-  if (! pod_type_p (TREE_TYPE (arg)))\n-    {\n-      /* Undefined behaviour [expr.call] 5.2.2/7.  */\n-      cp_warning (\"cannot pass objects of non-POD type `%#T' through `...'\",\n-\t\t  TREE_TYPE (arg));\n-    }\n-\n   if (TREE_CODE (TREE_TYPE (arg)) == REAL_TYPE\n       && (TYPE_PRECISION (TREE_TYPE (arg))\n \t  < TYPE_PRECISION (double_type_node)))\n@@ -3773,6 +3778,13 @@ convert_arg_to_ellipsis (arg)\n \n   arg = require_complete_type (arg);\n   \n+  if (arg != error_mark_node && ! pod_type_p (TREE_TYPE (arg)))\n+    {\n+      /* Undefined behaviour [expr.call] 5.2.2/7.  */\n+      cp_warning (\"cannot pass objects of non-POD type `%#T' through `...'\",\n+\t\t  TREE_TYPE (arg));\n+    }\n+\n   return arg;\n }\n "}]}