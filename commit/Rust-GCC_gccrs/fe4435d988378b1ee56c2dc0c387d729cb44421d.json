{"sha": "fe4435d988378b1ee56c2dc0c387d729cb44421d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU0NDM1ZDk4ODM3OGIxZWU1NmMyZGMwYzM4N2Q3MjljYjQ0NDIxZA==", "commit": {"author": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1993-03-12T09:34:38Z"}, "committer": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1993-03-12T09:34:38Z"}, "message": "(truncdfsf2): Rewrite to allow FLOAT_REGS in constraints for better register preferences.\n\n(truncdfsf2): Rewrite to allow FLOAT_REGS in constraints\n   for better register preferences.\n(movM): If REG_WAS_0, make sure the reg hasn't changed since then.\n(cmpM expanders): Don't allow both operands to be MEM.\nUse VOIDmode for the COMPARE rtx instead of CCmode.\n(cmpM recognizers): Likewise.\nRemove constraints for constants from operand 0.\n(cmpdf,cmpsf recognizers): When using VOIDmode as mode of the COMPARE rtx,\n   require that the mode be exactly VOIDmode.\n\nFrom-SVN: r3716", "tree": {"sha": "96129bb1384e5ea1cec51fd459561e20c1ed4d6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96129bb1384e5ea1cec51fd459561e20c1ed4d6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe4435d988378b1ee56c2dc0c387d729cb44421d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe4435d988378b1ee56c2dc0c387d729cb44421d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe4435d988378b1ee56c2dc0c387d729cb44421d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe4435d988378b1ee56c2dc0c387d729cb44421d/comments", "author": null, "committer": null, "parents": [{"sha": "b9342cdfeb475c7f11dcade7cffd5d8e060f3039", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9342cdfeb475c7f11dcade7cffd5d8e060f3039", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9342cdfeb475c7f11dcade7cffd5d8e060f3039"}], "stats": {"total": 265, "additions": 160, "deletions": 105}, "files": [{"sha": "c701df61d577fcadd8bbe588cc44b2964c34f372", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 160, "deletions": 105, "changes": 265, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4435d988378b1ee56c2dc0c387d729cb44421d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4435d988378b1ee56c2dc0c387d729cb44421d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=fe4435d988378b1ee56c2dc0c387d729cb44421d", "patch": "@@ -69,7 +69,7 @@\n ;; actually generating RTL.  The bCOND or sCOND (emitted immediately\n ;; after the tstM or cmp) will actually emit the tstM or cmpM.\n \n-(define_insn \"tstsi_cc\"\n+(define_insn \"tstsi_1\"\n   [(set (cc0)\n \t(match_operand:SI 0 \"nonimmediate_operand\" \"rm\"))]\n   \"\"\n@@ -88,12 +88,12 @@\n   \"\"\n   \"\n {\n-  i386_compare_gen = gen_tstsi_cc;\n+  i386_compare_gen = gen_tstsi_1;\n   i386_compare_op0 = operands[0];\n   DONE;\n }\")\n \n-(define_insn \"tsthi_cc\"\n+(define_insn \"tsthi_1\"\n   [(set (cc0)\n \t(match_operand:HI 0 \"nonimmediate_operand\" \"rm\"))]\n   \"\"\n@@ -112,12 +112,12 @@\n   \"\"\n   \"\n {\n-  i386_compare_gen = gen_tsthi_cc;\n+  i386_compare_gen = gen_tsthi_1;\n   i386_compare_op0 = operands[0];\n   DONE;\n }\")\n \n-(define_insn \"tstqi_cc\"\n+(define_insn \"tstqi_1\"\n   [(set (cc0)\n \t(match_operand:QI 0 \"nonimmediate_operand\" \"qm\"))]\n   \"\"\n@@ -136,7 +136,7 @@\n   \"\"\n   \"\n {\n-  i386_compare_gen = gen_tstqi_cc;\n+  i386_compare_gen = gen_tstqi_1;\n   i386_compare_op0 = operands[0];\n   DONE;\n }\")\n@@ -210,11 +210,11 @@\n ;;- compare instructions.  See comments above tstM patterns about\n ;;  expansion of these insns.\n \n-(define_insn \"cmpsi_cc\"\n+(define_insn \"cmpsi_1\"\n   [(set (cc0)\n-\t(compare:CC (match_operand:SI 0 \"nonimmediate_operand\" \"mr,ri\")\n-\t\t    (match_operand:SI 1 \"general_operand\" \"ri,mr\")))]\n-  \"\"\n+\t(compare (match_operand:SI 0 \"nonimmediate_operand\" \"mr,r\")\n+\t\t (match_operand:SI 1 \"general_operand\" \"ri,mr\")))]\n+  \"GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM\"\n   \"*\n {\n   if (CONSTANT_P (operands[0]) || GET_CODE (operands[1]) == MEM)\n@@ -227,22 +227,25 @@\n \n (define_expand \"cmpsi\"\n   [(set (cc0)\n-\t(compare:CC (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n-\t\t    (match_operand:SI 1 \"general_operand\" \"\")))]\n+\t(compare (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n+\t\t (match_operand:SI 1 \"general_operand\" \"\")))]\n   \"\"\n   \"\n {\n-  i386_compare_gen = gen_cmpsi_cc;\n+  if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n+    operands[0] = force_reg (SImode, operands[0]);\n+\n+  i386_compare_gen = gen_cmpsi_1;\n   i386_compare_op0 = operands[0];\n   i386_compare_op1 = operands[1];\n   DONE;\n }\")\n \n-(define_insn \"cmphi_cc\"\n+(define_insn \"cmphi_1\"\n   [(set (cc0)\n-\t(compare:CC (match_operand:HI 0 \"nonimmediate_operand\" \"mr,ri\")\n-\t\t    (match_operand:HI 1 \"general_operand\" \"ri,mr\")))]\n-  \"\"\n+\t(compare (match_operand:HI 0 \"nonimmediate_operand\" \"mr,r\")\n+\t\t (match_operand:HI 1 \"general_operand\" \"ri,mr\")))]\n+  \"GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM\"\n   \"*\n {\n   if (CONSTANT_P (operands[0]) || GET_CODE (operands[1]) == MEM)\n@@ -255,22 +258,25 @@\n \n (define_expand \"cmphi\"\n   [(set (cc0)\n-\t(compare:CC (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n-\t\t    (match_operand:HI 1 \"general_operand\" \"\")))]\n+\t(compare (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n+\t\t (match_operand:HI 1 \"general_operand\" \"\")))]\n   \"\"\n   \"\n {\n-  i386_compare_gen = gen_cmphi_cc;\n+  if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n+    operands[0] = force_reg (HImode, operands[0]);\n+\n+  i386_compare_gen = gen_cmphi_1;\n   i386_compare_op0 = operands[0];\n   i386_compare_op1 = operands[1];\n   DONE;\n }\")\n \n-(define_insn \"cmpqi_cc\"\n+(define_insn \"cmpqi_1\"\n   [(set (cc0)\n-\t(compare:CC (match_operand:QI 0 \"nonimmediate_operand\" \"qn,mq\")\n-\t\t    (match_operand:QI 1 \"general_operand\" \"qm,nq\")))]\n-  \"\"\n+\t(compare (match_operand:QI 0 \"nonimmediate_operand\" \"q,mq\")\n+\t\t (match_operand:QI 1 \"general_operand\" \"qm,nq\")))]\n+  \"GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM\"\n   \"*\n {\n   if (CONSTANT_P (operands[0]) || GET_CODE (operands[1]) == MEM)\n@@ -283,12 +289,15 @@\n \n (define_expand \"cmpqi\"\n   [(set (cc0)\n-\t(compare:CC (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n-\t\t    (match_operand:QI 1 \"general_operand\" \"\")))]\n+\t(compare (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n+\t\t (match_operand:QI 1 \"general_operand\" \"\")))]\n   \"\"\n   \"\n {\n-  i386_compare_gen = gen_cmpqi_cc;\n+  if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n+    operands[0] = force_reg (QImode, operands[0]);\n+\n+  i386_compare_gen = gen_cmpqi_1;\n   i386_compare_op0 = operands[0];\n   i386_compare_op1 = operands[1];\n   DONE;\n@@ -298,101 +307,111 @@\n ;; SFmode, there is the normal insn, and an insn where the second operand\n ;; is converted to the desired mode.\n \n-(define_insn \"cmpdf_cc\"\n+(define_insn \"\"\n   [(set (cc0)\n-\t(compare:CC (match_operand:DF 0 \"nonimmediate_operand\" \"f,fm\")\n-\t\t    (match_operand:DF 1 \"nonimmediate_operand\" \"fm,f\")))\n-   (clobber (match_scratch:HI 2 \"=a,a\"))]\n+\t(match_operator 2 \"VOIDmode_compare_op\"\n+\t\t\t[(match_operand:DF 0 \"nonimmediate_operand\" \"f,fm\")\n+\t\t\t (match_operand:DF 1 \"nonimmediate_operand\" \"fm,f\")]))\n+   (clobber (match_scratch:HI 3 \"=a,a\"))]\n   \"TARGET_80387\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"* return (char *) output_float_compare (insn, operands);\")\n \n (define_insn \"\"\n   [(set (cc0)\n-\t(compare:CC (match_operand:DF 0 \"register_operand\" \"f\")\n-\t\t    (float:DF\n-\t\t     (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))))\n-   (clobber (match_scratch:HI 2 \"=a\"))]\n-  \"TARGET_80387\"\n-  \"* return (char *) output_float_compare (insn, operands);\")\n-\n-(define_insn \"\"\n-  [(set (cc0)\n-\t(compare:CC (float:DF\n-\t\t     (match_operand:SI 0 \"nonimmediate_operand\" \"rm\"))\n-\t\t    (match_operand:DF 1 \"register_operand\" \"f\")))\n-   (clobber (match_scratch:HI 2 \"=a\"))]\n+\t(match_operator 2 \"VOIDmode_compare_op\"\n+\t\t\t[(match_operand:DF 0 \"register_operand\" \"f\")\n+\t\t\t (float:DF\n+\t\t\t  (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))]))\n+   (clobber (match_scratch:HI 3 \"=a\"))]\n   \"TARGET_80387\"\n   \"* return (char *) output_float_compare (insn, operands);\")\n \n (define_insn \"\"\n   [(set (cc0)\n-\t(compare:CC (match_operand:DF 0 \"register_operand\" \"f\")\n-\t\t    (float_extend:DF\n-\t\t     (match_operand:SF 1 \"nonimmediate_operand\" \"fm\"))))\n-   (clobber (match_scratch:HI 2 \"=a\"))]\n+\t(match_operator 2 \"VOIDmode_compare_op\"\n+\t\t\t[(float:DF\n+\t\t\t  (match_operand:SI 0 \"nonimmediate_operand\" \"rm\"))\n+\t\t\t (match_operand:DF 1 \"register_operand\" \"f\")]))\n+   (clobber (match_scratch:HI 3 \"=a\"))]\n   \"TARGET_80387\"\n   \"* return (char *) output_float_compare (insn, operands);\")\n \n (define_insn \"\"\n   [(set (cc0)\n-\t(compare:CC (float_extend:DF\n-\t\t     (match_operand:SF 0 \"nonimmediate_operand\" \"fm\"))\n-\t\t    (match_operand:DF 1 \"register_operand\" \"f\")))\n-   (clobber (match_scratch:HI 2 \"=a\"))]\n+\t(match_operator 2 \"VOIDmode_compare_op\"\n+\t\t\t[(match_operand:DF 0 \"register_operand\" \"f\")\n+\t\t\t (float_extend:DF\n+\t\t\t  (match_operand:SF 1 \"nonimmediate_operand\" \"fm\"))]))\n+   (clobber (match_scratch:HI 3 \"=a\"))]\n   \"TARGET_80387\"\n   \"* return (char *) output_float_compare (insn, operands);\")\n \n (define_insn \"\"\n   [(set (cc0)\n-\t(compare:CCFPEQ (match_operand:DF 0 \"register_operand\" \"f\")\n-\t\t\t(match_operand:DF 1 \"register_operand\" \"f\")))\n-   (clobber (match_scratch:HI 2 \"=a\"))]\n+\t(match_operator 2 \"VOIDmode_compare_op\"\n+\t\t\t[(float_extend:DF\n+\t\t\t  (match_operand:SF 0 \"nonimmediate_operand\" \"fm\"))\n+\t\t\t (match_operand:DF 1 \"register_operand\" \"f\")]))\n+   (clobber (match_scratch:HI 3 \"=a\"))]\n   \"TARGET_80387\"\n   \"* return (char *) output_float_compare (insn, operands);\")\n \n (define_insn \"\"\n   [(set (cc0)\n \t(compare:CCFPEQ (match_operand:DF 0 \"register_operand\" \"f\")\n-\t\t\t(float_extend:DF\n-\t\t\t (match_operand:SF 1 \"register_operand\" \"f\"))))\n-   (clobber (match_scratch:HI 2 \"=a\"))]\n-  \"TARGET_80387\"\n-  \"* return (char *) output_float_compare (insn, operands);\")\n-\n-(define_insn \"\"\n-  [(set (cc0)\n-\t(compare:CCFPEQ (float_extend:DF\n-\t\t\t (match_operand:SF 0 \"register_operand\" \"f\"))\n \t\t\t(match_operand:DF 1 \"register_operand\" \"f\")))\n    (clobber (match_scratch:HI 2 \"=a\"))]\n   \"TARGET_80387\"\n   \"* return (char *) output_float_compare (insn, operands);\")\n \n-(define_insn \"cmpsf_cc\"\n+;; These two insns will never be generated by combine due to the mode of\n+;; the COMPARE.\n+;(define_insn \"\"\n+;  [(set (cc0)\n+;\t(compare:CCFPEQ (match_operand:DF 0 \"register_operand\" \"f\")\n+;\t\t\t(float_extend:DF\n+;\t\t\t (match_operand:SF 1 \"register_operand\" \"f\"))))\n+;   (clobber (match_scratch:HI 2 \"=a\"))]\n+;  \"TARGET_80387\"\n+;  \"* return (char *) output_float_compare (insn, operands);\")\n+;\n+;(define_insn \"\"\n+;  [(set (cc0)\n+;\t(compare:CCFPEQ (float_extend:DF\n+;\t\t\t (match_operand:SF 0 \"register_operand\" \"f\"))\n+;\t\t\t(match_operand:DF 1 \"register_operand\" \"f\")))\n+;   (clobber (match_scratch:HI 2 \"=a\"))]\n+;  \"TARGET_80387\"\n+;  \"* return (char *) output_float_compare (insn, operands);\")\n+\n+(define_insn \"cmpsf_cc_1\"\n   [(set (cc0)\n-\t(compare:CC (match_operand:SF 0 \"nonimmediate_operand\" \"f,fm\")\n-\t\t    (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f\")))\n-   (clobber (match_scratch:HI 2 \"=a,a\"))]\n+\t(match_operator 2 \"VOIDmode_compare_op\"\n+\t\t\t[(match_operand:SF 0 \"nonimmediate_operand\" \"f,fm\")\n+\t\t\t (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f\")]))\n+   (clobber (match_scratch:HI 3 \"=a,a\"))]\n   \"TARGET_80387\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"* return (char *) output_float_compare (insn, operands);\")\n \n (define_insn \"\"\n   [(set (cc0)\n-\t(compare:CC (match_operand:SF 0 \"register_operand\" \"f\")\n-\t\t    (float:SF\n-\t\t     (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))))\n-   (clobber (match_scratch:HI 2 \"=a\"))]\n+\t(match_operator 2 \"VOIDmode_compare_op\"\n+\t\t\t[(match_operand:SF 0 \"register_operand\" \"f\")\n+\t\t\t (float:SF\n+\t\t\t  (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))]))\n+   (clobber (match_scratch:HI 3 \"=a\"))]\n   \"TARGET_80387\"\n   \"* return (char *) output_float_compare (insn, operands);\")\n \n (define_insn \"\"\n   [(set (cc0)\n-\t(compare:CC (float:SF\n-\t\t     (match_operand:SI 0 \"nonimmediate_operand\" \"rm\"))\n-\t\t    (match_operand:SF 1 \"register_operand\" \"f\")))\n-   (clobber (match_scratch:HI 2 \"=a\"))]\n+\t(match_operator 2 \"VOIDmode_compare_op\"\n+\t\t\t[(float:SF\n+\t\t\t  (match_operand:SI 0 \"nonimmediate_operand\" \"rm\"))\n+\t\t\t (match_operand:SF 1 \"register_operand\" \"f\")]))\n+   (clobber (match_scratch:HI 3 \"=a\"))]\n   \"TARGET_80387\"\n   \"* return (char *) output_float_compare (insn, operands);\")\n \n@@ -406,8 +425,8 @@\n \n (define_expand \"cmpdf\"\n   [(set (cc0)\n-\t(compare:CC (match_operand:DF 0 \"register_operand\" \"\")\n-\t\t    (match_operand:DF 1 \"nonimmediate_operand\" \"\")))]\n+\t(compare (match_operand:DF 0 \"register_operand\" \"\")\n+\t\t (match_operand:DF 1 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_80387\"\n   \"\n {\n@@ -420,8 +439,8 @@\n \n (define_expand \"cmpsf\"\n   [(set (cc0)\n-\t(compare:CC (match_operand:SF 0 \"register_operand\" \"\")\n-\t\t    (match_operand:SF 1 \"nonimmediate_operand\" \"\")))]\n+\t(compare (match_operand:SF 0 \"register_operand\" \"\")\n+\t\t (match_operand:SF 1 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_80387\"\n   \"\n {\n@@ -432,6 +451,14 @@\n   DONE;\n }\")\n \n+(define_expand \"cmpdf_cc\"\n+  [(parallel [(set (cc0)\n+\t\t   (compare (match_operand:DF 0 \"register_operand\" \"\")\n+\t\t\t    (match_operand:DF 1 \"register_operand\" \"\")))\n+\t      (clobber (match_scratch:HI 2 \"\"))])]\n+  \"TARGET_80387\"\n+  \"\")\n+\n (define_expand \"cmpdf_ccfpeq\"\n   [(parallel [(set (cc0)\n \t\t   (compare:CCFPEQ (match_operand:DF 0 \"register_operand\" \"\")\n@@ -444,6 +471,14 @@\n     operands[1] = copy_to_mode_reg (DFmode, operands[1]);\n }\")\n \n+(define_expand \"cmpsf_cc\"\n+  [(parallel [(set (cc0)\n+\t\t   (compare (match_operand:SF 0 \"register_operand\" \"\")\n+\t\t\t    (match_operand:SF 1 \"register_operand\" \"\")))\n+\t      (clobber (match_scratch:HI 2 \"\"))])]\n+  \"TARGET_80387\"\n+  \"\")\n+\n (define_expand \"cmpsf_ccfpeq\"\n   [(parallel [(set (cc0)\n \t\t   (compare:CCFPEQ (match_operand:SF 0 \"register_operand\" \"\")\n@@ -623,10 +658,12 @@\n   if (operands[1] == const1_rtx\n       && (link = find_reg_note (insn, REG_WAS_0, 0))\n       /* Make sure the insn that stored the 0 is still present.  */\n-      && ! XEXP (link, 0)->volatil\n+      && ! INSN_DELETED_P (XEXP (link, 0))\n       && GET_CODE (XEXP (link, 0)) != NOTE\n       /* Make sure cross jumping didn't happen here.  */\n-      && no_labels_between_p (XEXP (link, 0), insn))\n+      && no_labels_between_p (XEXP (link, 0), insn)\n+      /* Make sure the reg hasn't been clobbered.  */\n+      && ! reg_set_between_p (operands[0], XEXP (link, 0), insn))\n     /* Fastest way to change a 0 to a 1.  */\n     return AS1 (inc%L0,%0);\n \n@@ -654,10 +691,12 @@\n   if (REG_P (operands[0]) && operands[1] == const1_rtx \n       && (link = find_reg_note (insn, REG_WAS_0, 0))\n       /* Make sure the insn that stored the 0 is still present.  */\n-      && ! XEXP (link, 0)->volatil\n+      && ! INSN_DELETED_P (XEXP (link, 0))\n       && GET_CODE (XEXP (link, 0)) != NOTE\n       /* Make sure cross jumping didn't happen here.  */\n-      && no_labels_between_p (XEXP (link, 0), insn))\n+      && no_labels_between_p (XEXP (link, 0), insn)\n+      /* Make sure the reg hasn't been clobbered.  */\n+      && ! reg_set_between_p (operands[0], XEXP (link, 0), insn))\n     /* Fastest way to change a 0 to a 1.  */\n     return AS1 (inc%L0,%k0);\n \n@@ -685,10 +724,12 @@\n   if (operands[1] == const1_rtx\n       && (link = find_reg_note (insn, REG_WAS_0, 0))\n       /* Make sure the insn that stored the 0 is still present.  */\n-      && ! XEXP (link, 0)->volatil\n+      && ! INSN_DELETED_P (XEXP (link, 0))\n       && GET_CODE (XEXP (link, 0)) != NOTE\n       /* Make sure cross jumping didn't happen here.  */\n-      && no_labels_between_p (XEXP (link, 0), insn))\n+      && no_labels_between_p (XEXP (link, 0), insn)\n+      /* Make sure the reg hasn't been clobbered.  */\n+      && ! reg_set_between_p (operands[0], XEXP (link, 0), insn))\n     /* Fastest way to change a 0 to a 1.  */\n     return AS1 (inc%W0,%0);\n \n@@ -727,10 +768,12 @@\n   if (operands[1] == const1_rtx\n       && (link = find_reg_note (insn, REG_WAS_0, 0))\n       /* Make sure the insn that stored the 0 is still present.  */\n-      && ! XEXP (link, 0)->volatil\n+      && ! INSN_DELETED_P (XEXP (link, 0))\n       && GET_CODE (XEXP (link, 0)) != NOTE\n       /* Make sure cross jumping didn't happen here.  */\n-      && no_labels_between_p (XEXP (link, 0), insn))\n+      && no_labels_between_p (XEXP (link, 0), insn)\n+      /* Make sure the reg hasn't been clobbered.  */\n+      && ! reg_set_between_p (operands[0], XEXP (link, 0), insn))\n     /* Fastest way to change a 0 to a 1.  */\n     return AS1 (inc%B0,%0);\n \n@@ -763,10 +806,12 @@\n   if (operands[1] == const1_rtx\n       && (link = find_reg_note (insn, REG_WAS_0, 0))\n       /* Make sure the insn that stored the 0 is still present.  */\n-      && ! XEXP (link, 0)->volatil\n+      && ! INSN_DELETED_P (XEXP (link, 0))\n       && GET_CODE (XEXP (link, 0)) != NOTE\n       /* Make sure cross jumping didn't happen here.  */\n-      && no_labels_between_p (XEXP (link, 0), insn))\n+      && no_labels_between_p (XEXP (link, 0), insn)\n+      /* Make sure the reg hasn't been clobbered.  */\n+      && ! reg_set_between_p (operands[0], XEXP (link, 0), insn))\n     /* Fastest way to change a 0 to a 1.  */\n     return AS1 (inc%B0,%0);\n \n@@ -808,9 +853,9 @@\n   return AS1 (push%L1,%1);\n }\")\n \n-;; The constraints used to be:\n-;; op 0 \"=f,fm,!*rf,!*rm\"\n-;; op 1 \"fmG,f,*rfm,*rfF\"\n+;; Allow MEM-MEM moves before reload.  The reload class for such a\n+;; move will be ALL_REGS.  PREFERRED_RELOAD_CLASS will narrow this to\n+;; GENERAL_REGS.  For the purposes of regclass, prefer FLOAT_REGS.\n \n (define_insn \"movsf\"\n   [(set (match_operand:SF 0 \"general_operand\" \"=*rf,*rfm,f,!*rm\")\n@@ -909,9 +954,9 @@\n     return AS1 (fxch,%0);\n }\")\n \n-;; The constraints used to be:\n-;; op 0 \"=f,fm,!*rf,!*rm\"\n-;; op 1 \"fmG,f,*rfm,*rfF\"\n+;; Allow MEM-MEM moves before reload.  The reload class for such a\n+;; move will be ALL_REGS.  PREFERRED_RELOAD_CLASS will narrow this to\n+;; GENERAL_REGS.  For the purposes of regclass, prefer FLOAT_REGS.\n \n (define_insn \"movdf\"\n   [(set (match_operand:DF 0 \"general_operand\" \"=*rf,*rfm,f,!*rm\")\n@@ -1194,26 +1239,36 @@\n ;; insn.\n \n (define_insn \"truncdfsf2\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"=m,!*r\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,m\")\n \t(float_truncate:SF\n-\t (match_operand:DF 1 \"register_operand\" \"f,f\")))]\n+\t (match_operand:DF 1 \"register_operand\" \"0,f\")))]\n   \"TARGET_80387\"\n   \"*\n {\n   int stack_top_dies = find_regno_note (insn, REG_DEAD, FIRST_STACK_REG) != 0;\n \n-  if (NON_STACK_REG_P (operands[0]))\n-    {\n-      output_to_reg (operands[0], stack_top_dies);\n-      RET;\n-    }\n-  else if (GET_CODE (operands[0]) == MEM)\n+  if (GET_CODE (operands[0]) == MEM)\n     {\n       if (stack_top_dies)\n \treturn AS1 (fstp%z0,%0);\n       else\n         return AS1 (fst%z0,%0);\n     }\n+  else if (STACK_TOP_P (operands[0]))\n+    {\n+      rtx xops[4];\n+\n+      xops[0] = AT_SP (SFmode);\n+      xops[1] = stack_pointer_rtx;\n+      xops[2] = GEN_INT (GET_MODE_SIZE (SFmode));\n+      xops[3] = operands[0];\n+\n+      output_asm_insn (AS2 (sub%L1,%2,%1), xops);\n+      output_asm_insn (AS1 (fstp%z0,%y0), xops);\n+      output_asm_insn (AS1 (fld%z0,%y0), xops);\n+      output_asm_insn (AS2 (add%L1,%2,%1), xops);\n+      RET;\n+    }\n   else\n     abort ();\n }\")"}]}