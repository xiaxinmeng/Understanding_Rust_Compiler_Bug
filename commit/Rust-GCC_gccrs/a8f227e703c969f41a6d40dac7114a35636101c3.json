{"sha": "a8f227e703c969f41a6d40dac7114a35636101c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThmMjI3ZTcwM2M5NjlmNDFhNmQ0MGRhYzcxMTRhMzU2MzYxMDFjMw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-10-29T17:51:38Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-10-29T17:51:38Z"}, "message": "flow.c (debug_flow_info): Add prototype.\n\n        * flow.c (debug_flow_info): Add prototype.\n\n        * gcc.c (main): Likewise.\n\n        * gcse.c (expr_reaches_here_p_work, pre_expr_reaches_here_p_work):\n        Likewise.\n\n        * reload1.c (failed_reload, set_reload_reg): Likewise.\n\n        * mips-tfile.c (main): Likewise.\n        (pfatal_with_name, fancy_abort, botch, fatal, catch_signal): Mark\n        with ATTRIBUTE_NORETURN.\n\nFrom-SVN: r30262", "tree": {"sha": "2131b6dd763359d6381fa3af3e5706e629a02568", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2131b6dd763359d6381fa3af3e5706e629a02568"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8f227e703c969f41a6d40dac7114a35636101c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8f227e703c969f41a6d40dac7114a35636101c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8f227e703c969f41a6d40dac7114a35636101c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8f227e703c969f41a6d40dac7114a35636101c3/comments", "author": null, "committer": null, "parents": [{"sha": "90e0ee005bfecbf04c27b4cde749fd465aa40753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90e0ee005bfecbf04c27b4cde749fd465aa40753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90e0ee005bfecbf04c27b4cde749fd465aa40753"}], "stats": {"total": 36, "additions": 30, "deletions": 6}, "files": [{"sha": "646dcc5e6485ec1e312b0d8201f2336381787d2c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8f227e703c969f41a6d40dac7114a35636101c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8f227e703c969f41a6d40dac7114a35636101c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8f227e703c969f41a6d40dac7114a35636101c3", "patch": "@@ -1,3 +1,18 @@\n+Fri Oct 29 13:49:39 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* flow.c (debug_flow_info): Add prototype.\n+\n+\t* gcc.c (main): Likewise.\n+\n+\t* gcse.c (expr_reaches_here_p_work, pre_expr_reaches_here_p_work):\n+\tLikewise.\n+\n+\t* reload1.c (failed_reload, set_reload_reg): Likewise.\n+\t\n+\t* mips-tfile.c (main): Likewise.\n+\t(pfatal_with_name, fancy_abort, botch, fatal, catch_signal): Mark\n+\twith ATTRIBUTE_NORETURN.\n+\n Fri Oct 29 18:16:03 1999  Andrew Haley  <aph@cygnus.com>\n \n        * config/i386/i386.h (ENCODE_SECTION_INFO): Don't do anything if"}, {"sha": "2dee6f97f875413245d3601fa57bffd1c5e4e146", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8f227e703c969f41a6d40dac7114a35636101c3/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8f227e703c969f41a6d40dac7114a35636101c3/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=a8f227e703c969f41a6d40dac7114a35636101c3", "patch": "@@ -349,6 +349,7 @@ static int try_pre_increment\t\tPROTO((rtx, rtx, HOST_WIDE_INT));\n #endif\n static void mark_used_regs\t\tPROTO((regset, regset, rtx, int, rtx));\n void dump_flow_info\t\t\tPROTO((FILE *));\n+void debug_flow_info\t\t\tPROTO((void));\n static void dump_edge_info\t\tPROTO((FILE *, edge, int));\n \n static int_list_ptr alloc_int_list_node PROTO ((int_list_block **));"}, {"sha": "86c3f67f27a158d9f52f2c664318fc367d52b865", "filename": "gcc/gcc.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8f227e703c969f41a6d40dac7114a35636101c3/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8f227e703c969f41a6d40dac7114a35636101c3/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=a8f227e703c969f41a6d40dac7114a35636101c3", "patch": "@@ -4672,6 +4672,8 @@ fatal_error (signum)\n   kill (getpid (), signum);\n }\n \n+extern int main PROTO ((int, char **));\n+\n int\n main (argc, argv)\n      int argc;"}, {"sha": "e2d7cf7df70cc45817678f5d5feb0d1c7ccf56da", "filename": "gcc/gcse.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8f227e703c969f41a6d40dac7114a35636101c3/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8f227e703c969f41a6d40dac7114a35636101c3/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=a8f227e703c969f41a6d40dac7114a35636101c3", "patch": "@@ -624,6 +624,8 @@ static int one_classic_gcse_pass      PROTO ((int));\n static void invalidate_nonnull_info\tPROTO ((rtx, rtx, void *));\n static rtx process_insert_insn\tPROTO ((struct expr *));\n static int pre_edge_insert\tPROTO ((struct edge_list *, struct expr **));\n+static int expr_reaches_here_p_work\tPROTO ((struct occr *, struct expr *, int, int, char *));\n+static int pre_expr_reaches_here_p_work\tPROTO ((int, struct expr *, int, int, char *));\n \f\n /* Entry point for global common subexpression elimination.\n    F is the first instruction in the function.  */"}, {"sha": "e6042f8afa400530561b4930df59d0d36035ec44", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8f227e703c969f41a6d40dac7114a35636101c3/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8f227e703c969f41a6d40dac7114a35636101c3/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=a8f227e703c969f41a6d40dac7114a35636101c3", "patch": "@@ -633,11 +633,11 @@ typedef const PTR_T CPTR_T;\n    so they can't be static.  */\n \n extern void\tpfatal_with_name\n-\t\t\t\t__proto((const char *));\n-extern void\tfancy_abort\t__proto((void));\n-       void\tbotch\t\t__proto((const char *));\n+\t\t\t\t__proto((const char *)) ATTRIBUTE_NORETURN;\n+extern void\tfancy_abort\t__proto((void)) ATTRIBUTE_NORETURN;\n+       void\tbotch\t\t__proto((const char *)) ATTRIBUTE_NORETURN;\n \n-extern void\tfatal\t\tPVPROTO((const char *format, ...)) ATTRIBUTE_PRINTF_1;\n+extern void\tfatal\t\tPVPROTO((const char *format, ...)) ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n extern void\terror\t\tPVPROTO((const char *format, ...)) ATTRIBUTE_PRINTF_1;\n \f\n #ifndef MIPS_DEBUGGING_INFO\n@@ -1661,7 +1661,7 @@ STATIC void\tparse_stabn\t__proto((const char *));\n STATIC page_t  *read_seek\t__proto((Size_t, off_t, const char *));\n STATIC void\tcopy_object\t__proto((void));\n \n-STATIC void\tcatch_signal\t__proto((int));\n+STATIC void\tcatch_signal\t__proto((int)) ATTRIBUTE_NORETURN;\n STATIC page_t  *allocate_page\t__proto((void));\n \n STATIC page_t  *allocate_multiple_pages\n@@ -4801,10 +4801,12 @@ copy_object __proto((void))\n \f\n /* Ye olde main program.  */\n \n+extern int main PROTO ((int, char **));\n+\n int\n main (argc, argv)\n      int argc;\n-     char *argv[];\n+     char **argv;\n {\n   int iflag = 0;\n   char *p = local_rindex (argv[0], '/');"}, {"sha": "98a246bc79e8153b22cd94f3605b8994c8f6b8aa", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8f227e703c969f41a6d40dac7114a35636101c3/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8f227e703c969f41a6d40dac7114a35636101c3/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=a8f227e703c969f41a6d40dac7114a35636101c3", "patch": "@@ -454,6 +454,8 @@ static void add_auto_inc_notes PROTO((rtx, rtx));\n #endif\n static rtx gen_mode_int\t\t\tPROTO((enum machine_mode,\n \t\t\t\t\t       HOST_WIDE_INT));\n+static void failed_reload\t\tPROTO((rtx, int));\n+static int set_reload_reg\t\tPROTO((int, int));\n extern void dump_needs\t\t\tPROTO((struct insn_chain *, FILE *));\n \f\n /* Initialize the reload pass once per compilation.  */"}]}