{"sha": "7834ab392321cfd71058bc348460af9f56bcfd48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgzNGFiMzkyMzIxY2ZkNzEwNThiYzM0ODQ2MGFmOWY1NmJjZmQ0OA==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-07-08T00:17:49Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-07-08T00:17:49Z"}, "message": "92th Cygnus<->FSF merge\n\nFrom-SVN: r14401", "tree": {"sha": "cc08a52d046999094f0688aa4ba2ed04d39b52ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc08a52d046999094f0688aa4ba2ed04d39b52ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7834ab392321cfd71058bc348460af9f56bcfd48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7834ab392321cfd71058bc348460af9f56bcfd48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7834ab392321cfd71058bc348460af9f56bcfd48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7834ab392321cfd71058bc348460af9f56bcfd48/comments", "author": null, "committer": null, "parents": [{"sha": "766e6d2dbe82c22383b9b204ed5ffe0f13bdfbab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/766e6d2dbe82c22383b9b204ed5ffe0f13bdfbab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/766e6d2dbe82c22383b9b204ed5ffe0f13bdfbab"}], "stats": {"total": 94, "additions": 81, "deletions": 13}, "files": [{"sha": "90479465fab9b8e4a33cf2823b9ae4d6bb89f482", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7834ab392321cfd71058bc348460af9f56bcfd48/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7834ab392321cfd71058bc348460af9f56bcfd48/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7834ab392321cfd71058bc348460af9f56bcfd48", "patch": "@@ -1,3 +1,42 @@\n+Thu Jul  3 01:44:05 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* class.c (finish_struct_1): Only complain about pointers without\n+\tcopy stuff if there are any constructors.\n+\n+\t* rtti.c (build_dynamic_cast): Call complete_type on the types.\n+\n+\t* decl.c (grokfndecl): If the function we chose doesn't actually\n+ \tmatch, die.\n+\n+\t* decl2.c (grokclassfn): Don't specify 'const int' for the\n+ \tartificial destructor parm.\n+\n+\t* pt.c (type_unification): If we are called recursively, nothing \n+\tdecays.\n+\n+Mon Jun 30 17:53:21 1997  Geoffrey Noer  <noer@cygnus.com>\n+\n+        * decl.c: Stop trying to catch signals other than SIGABRT\n+        since the Cygwin32 library doesn't support them correctly\n+        yet.  This fixes a situation in which g++ causes a hang on\n+        SIGSEGVs and other such signals in our Win32-hosted tools.\n+\n+Mon Jun 30 14:50:01 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* tree.c (mapcar, case CALL_EXPR): Handle all the parse node data.\n+\n+Fri Jun 27 15:18:49 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* typeck2.c (store_init_value): Always return the value if our \n+\ttype needs constructing.\n+\n+\t* method.c (hack_identifier): Convert class statics from\n+ \treference, too.\n+\n+Thu Jun 26 11:44:46 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* Make-lang.in (cplib2.ready): Add $(LANGUAGES) dependency.\n+\n Thu Jun 19 16:49:28 1997  Mike Stump  <mrs@cygnus.com>\n \n \t* typeck.c (c_expand_return): Make sure we clean up temporaries at"}, {"sha": "62753322186aa4025cbb8d58f371cee77a36ea14", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7834ab392321cfd71058bc348460af9f56bcfd48/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7834ab392321cfd71058bc348460af9f56bcfd48/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=7834ab392321cfd71058bc348460af9f56bcfd48", "patch": "@@ -3598,7 +3598,7 @@ finish_struct_1 (t, warn_anon)\n     }\n \n   /* Effective C++ rule 11.  */\n-  if (has_pointers && warn_ecpp\n+  if (has_pointers && warn_ecpp && TYPE_HAS_CONSTRUCTOR (t)\n       && ! (TYPE_HAS_INIT_REF (t) && TYPE_HAS_ASSIGN_REF (t)))\n     {\n       cp_warning (\"`%#T' has pointer data members\", t);"}, {"sha": "248275e2b694d48fdfe1517019446b6630a58d3b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7834ab392321cfd71058bc348460af9f56bcfd48/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7834ab392321cfd71058bc348460af9f56bcfd48/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7834ab392321cfd71058bc348460af9f56bcfd48", "patch": "@@ -4677,6 +4677,7 @@ init_decl_processing ()\n      around compiler bugs.  */\n   signal (SIGSEGV, signal_catch);\n \n+#ifndef __CYGWIN32__\n   /* We will also catch aborts in the back-end through signal_catch and\n      give the user a chance to see where the error might be, and to defeat\n      aborts in the back-end when there have been errors previously in their\n@@ -4693,6 +4694,13 @@ init_decl_processing ()\n #ifdef SIGBUS\n   signal (SIGBUS, signal_catch);\n #endif\n+#else /* ndef __CYGWIN32__ */\n+  /* Cygwin32 cannot handle catching signals other than\n+     SIGABRT yet.  We hope this will cease to be the case soon. */\n+#ifdef SIGABRT\n+  signal (SIGABRT, signal_catch);\n+#endif\n+#endif /* ndef __CYGWIN32__ */\n \n   gcc_obstack_init (&decl_obstack);\n \n@@ -7189,8 +7197,12 @@ grokfndecl (ctype, type, declarator, virtualp, flags, quals,\n \t    }\n \t  if (tmp && DECL_ARTIFICIAL (tmp))\n \t    cp_error (\"definition of implicitly-declared `%D'\", tmp);\n-\t  if (tmp && duplicate_decls (decl, tmp))\n-\t    return tmp;\n+\t  if (tmp)\n+\t    {\n+\t      if (!duplicate_decls (decl, tmp))\n+\t\tmy_friendly_abort (892);\n+\t      return tmp;\n+\t    }\n \t}\n \n       if (ctype == NULL_TREE || check)"}, {"sha": "b4fced4a1270f6e0a7095218c4f9f945eb772746", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7834ab392321cfd71058bc348460af9f56bcfd48/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7834ab392321cfd71058bc348460af9f56bcfd48/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=7834ab392321cfd71058bc348460af9f56bcfd48", "patch": "@@ -949,10 +949,9 @@ grokclassfn (ctype, cname, function, flags, quals)\n   if (flags == DTOR_FLAG)\n     {\n       char *buf, *dbuf;\n-      tree const_integer_type = build_type_variant (integer_type_node, 1, 0);\n       int len = sizeof (DESTRUCTOR_DECL_PREFIX)-1;\n \n-      arg_types = hash_tree_chain (const_integer_type, void_list_node);\n+      arg_types = hash_tree_chain (integer_type_node, void_list_node);\n       TREE_SIDE_EFFECTS (arg_types) = 1;\n       /* Build the overload name.  It will look like `7Example'.  */\n       if (IDENTIFIER_TYPE_VALUE (cname))"}, {"sha": "de641d4c39365652c8d289a6db47358641581212", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7834ab392321cfd71058bc348460af9f56bcfd48/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7834ab392321cfd71058bc348460af9f56bcfd48/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=7834ab392321cfd71058bc348460af9f56bcfd48", "patch": "@@ -1646,9 +1646,8 @@ hack_identifier (value, name)\n \t\t}\n \t    }\n \t}\n-      return value;\n     }\n-  if (TREE_CODE (value) == TREE_LIST && TREE_NONLOCAL_FLAG (value))\n+  else if (TREE_CODE (value) == TREE_LIST && TREE_NONLOCAL_FLAG (value))\n     {\n       if (type == 0)\n \t{"}, {"sha": "291e33baa3a64ddb3ec6b5987252afc662473105", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7834ab392321cfd71058bc348460af9f56bcfd48/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7834ab392321cfd71058bc348460af9f56bcfd48/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7834ab392321cfd71058bc348460af9f56bcfd48", "patch": "@@ -2686,10 +2686,10 @@ type_unification (tparms, targs, parms, args, nsubsts, subr, strict)\n \t  arg = TREE_TYPE (arg);\n \t}\n #endif\n-      if (TREE_CODE (arg) == REFERENCE_TYPE)\n+      if (! subr && TREE_CODE (arg) == REFERENCE_TYPE)\n \targ = TREE_TYPE (arg);\n \n-      if (TREE_CODE (parm) != REFERENCE_TYPE)\n+      if (! subr && TREE_CODE (parm) != REFERENCE_TYPE)\n \t{\n \t  if (TREE_CODE (arg) == FUNCTION_TYPE\n \t      || TREE_CODE (arg) == METHOD_TYPE)"}, {"sha": "138432421e2a20cb7f286a4239e479bd64e4807d", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7834ab392321cfd71058bc348460af9f56bcfd48/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7834ab392321cfd71058bc348460af9f56bcfd48/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=7834ab392321cfd71058bc348460af9f56bcfd48", "patch": "@@ -439,7 +439,7 @@ build_dynamic_cast (type, expr)\n \tgoto fail;\n       if (TREE_CODE (TREE_TYPE (exprtype)) != RECORD_TYPE)\n \tgoto fail;\n-      if (TYPE_SIZE (TREE_TYPE (exprtype)) == NULL_TREE)\n+      if (TYPE_SIZE (complete_type (TREE_TYPE (exprtype))) == NULL_TREE)\n \tgoto fail;\n       if (TREE_READONLY (TREE_TYPE (exprtype))\n \t  && ! TYPE_READONLY (TREE_TYPE (type)))\n@@ -450,7 +450,7 @@ build_dynamic_cast (type, expr)\n     case REFERENCE_TYPE:\n       if (TREE_CODE (TREE_TYPE (type)) != RECORD_TYPE)\n \tgoto fail;\n-      if (TYPE_SIZE (TREE_TYPE (type)) == NULL_TREE)\n+      if (TYPE_SIZE (complete_type (TREE_TYPE (type))) == NULL_TREE)\n \tgoto fail;\n       break;\n       /* else fall through */\n@@ -475,7 +475,7 @@ build_dynamic_cast (type, expr)\n \tgoto fail;\n       if (TREE_CODE (TREE_TYPE (exprtype)) != RECORD_TYPE)\n \tgoto fail;\n-      if (TYPE_SIZE (TREE_TYPE (exprtype)) == NULL_TREE)\n+      if (TYPE_SIZE (complete_type (TREE_TYPE (exprtype))) == NULL_TREE)\n \tgoto fail;\n       if (TREE_READONLY (TREE_TYPE (exprtype))\n \t  && ! TYPE_READONLY (TREE_TYPE (type)))"}, {"sha": "e6c0e5008432cbd80c1e1185e5c4711c747eba85", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7834ab392321cfd71058bc348460af9f56bcfd48/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7834ab392321cfd71058bc348460af9f56bcfd48/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=7834ab392321cfd71058bc348460af9f56bcfd48", "patch": "@@ -1529,14 +1529,28 @@ mapcar (t, func)\n     case PREINCREMENT_EXPR:\n     case POSTDECREMENT_EXPR:\n     case POSTINCREMENT_EXPR:\n-    case CALL_EXPR:\n     case ARRAY_REF:\n     case SCOPE_REF:\n       t = copy_node (t);\n       TREE_OPERAND (t, 0) = mapcar (TREE_OPERAND (t, 0), func);\n       TREE_OPERAND (t, 1) = mapcar (TREE_OPERAND (t, 1), func);\n       return t;\n \n+    case CALL_EXPR:\n+      t = copy_node (t);\n+      TREE_TYPE (t) = mapcar (TREE_TYPE (t), func);\n+      TREE_OPERAND (t, 0) = mapcar (TREE_OPERAND (t, 0), func);\n+      TREE_OPERAND (t, 1) = mapcar (TREE_OPERAND (t, 1), func);\n+\n+      /* tree.def says that operand two is RTL, but\n+\t build_call_declarator puts trees in there.  */\n+      if (TREE_OPERAND (t, 2)\n+\t  && TREE_CODE (TREE_OPERAND (t, 2)) == TREE_LIST)\n+\tTREE_OPERAND (t, 2) = mapcar (TREE_OPERAND (t, 2), func);\n+      else\n+\tTREE_OPERAND (t, 2) = NULL_TREE;\n+      return t;\n+\n     case CONVERT_EXPR:\n     case ADDR_EXPR:\n     case INDIRECT_REF:"}, {"sha": "d2a9839db9642f2feb4ae8333fa0a2d2e30d5e2b", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7834ab392321cfd71058bc348460af9f56bcfd48/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7834ab392321cfd71058bc348460af9f56bcfd48/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=7834ab392321cfd71058bc348460af9f56bcfd48", "patch": "@@ -621,6 +621,11 @@ store_init_value (decl, init)\n \n   if (TREE_CODE (value) == ERROR_MARK)\n     ;\n+  /* Other code expects that initializers for objects of types that need\n+     constructing never make it into DECL_INITIAL, and passes 'init' to\n+     expand_aggr_init without checking DECL_INITIAL.  So just return.  */\n+  else if (TYPE_NEEDS_CONSTRUCTING (type))\n+    return value;\n   else if (TREE_STATIC (decl)\n \t   && (! TREE_CONSTANT (value)\n \t       || ! initializer_constant_valid_p (value, TREE_TYPE (value))"}]}