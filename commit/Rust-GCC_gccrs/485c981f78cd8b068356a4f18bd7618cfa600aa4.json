{"sha": "485c981f78cd8b068356a4f18bd7618cfa600aa4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg1Yzk4MWY3OGNkOGIwNjgzNTZhNGYxOGJkNzYxOGNmYTYwMGFhNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-07-14T00:02:19Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-07-14T00:02:19Z"}, "message": "escape: Analyze multiple result type assertions.\n\n    \n    For multi-result type assertions, the object being converted is hidden\n    behind unsafe conversions and calls to runtime methods.  This change\n    allows the analysis to make edges between the result of the assertion\n    and the object being asserted.\n    \n    Reviewed-on: https://go-review.googlesource.com/10661\n\nFrom-SVN: r225751", "tree": {"sha": "d80b28a4ef8eec4bd392de3526b971218b3c6f9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d80b28a4ef8eec4bd392de3526b971218b3c6f9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/485c981f78cd8b068356a4f18bd7618cfa600aa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/485c981f78cd8b068356a4f18bd7618cfa600aa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/485c981f78cd8b068356a4f18bd7618cfa600aa4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/485c981f78cd8b068356a4f18bd7618cfa600aa4/comments", "author": null, "committer": null, "parents": [{"sha": "15d6614a167abb8191fa844ca140b53f8e0dfd40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15d6614a167abb8191fa844ca140b53f8e0dfd40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15d6614a167abb8191fa844ca140b53f8e0dfd40"}], "stats": {"total": 149, "additions": 102, "deletions": 47}, "files": [{"sha": "dd94df5082f15e43727af1d13f0db7832a32e9d8", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485c981f78cd8b068356a4f18bd7618cfa600aa4/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485c981f78cd8b068356a4f18bd7618cfa600aa4/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=485c981f78cd8b068356a4f18bd7618cfa600aa4", "patch": "@@ -1,4 +1,4 @@\n-a5122ab435cf40c22b110487eb5f189ee28e77f4\n+1b3d945d201bcb1238f15ef154c6e4671e4c6f5c\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "3a5738381d4afb9232269b811c8b1098cf9ccc15", "filename": "gcc/go/gofrontend/escape.cc", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485c981f78cd8b068356a4f18bd7618cfa600aa4/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485c981f78cd8b068356a4f18bd7618cfa600aa4/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fescape.cc?ref=485c981f78cd8b068356a4f18bd7618cfa600aa4", "patch": "@@ -547,6 +547,41 @@ Build_connection_graphs::resolve_var_reference(Expression* expr)\n \texpr = expr->type_guard_expression()->expr();\n \tbreak;\n \n+      case Expression::EXPRESSION_UNSAFE_CONVERSION:\n+\t{\n+\t  Expression* e = expr->unsafe_conversion_expression()->expr();\n+\t  if (e->call_result_expression() != NULL\n+\t      && e->call_result_expression()->index() == 0)\n+\t    {\n+\t      // a, ok := p.(T) gets lowered into a call to one of the interface\n+\t      // to type conversion functions instead of a type guard expression.\n+\t      // We only want to make a connection between a and p, the bool\n+\t      // result should not escape because p escapes.\n+\t      e = e->call_result_expression()->call();\n+\n+\t      Named_object* fn =\n+\t\te->call_expression()->fn()->func_expression()->named_object();\n+\t      std::string fn_name = fn->name();\n+\t      if (fn->package() == NULL\n+\t\t  && fn->is_function_declaration()\n+\t\t  && !fn->func_declaration_value()->asm_name().empty())\n+\t\t{\n+\t\t  if (fn_name == \"ifaceI2E2\"\n+\t\t      || fn_name == \"ifaceI2I2\")\n+\t\t    e = e->call_expression()->args()->at(0);\n+\t\t  else if (fn_name == \"ifaceE2I2\"\n+\t\t\t   || fn_name == \"ifaceI2I2\"\n+\t\t\t   || fn_name == \"ifaceE2T2P\"\n+\t\t\t   || fn_name == \"ifaceI2T2P\"\n+\t\t\t   || fn_name == \"ifaceE2T2\"\n+\t\t\t   || fn_name == \"ifaceI2T2\")\n+\t\t    e = e->call_expression()->args()->at(1);\n+\t\t}\n+\t    }\n+\t  expr = e;\n+\t}\n+\tbreak;\n+\n       default:\n \tdone = true;\n \tbreak;"}, {"sha": "76b83286c0922fec7f945894e43b1705d1348e6b", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 1, "deletions": 46, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485c981f78cd8b068356a4f18bd7618cfa600aa4/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485c981f78cd8b068356a4f18bd7618cfa600aa4/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=485c981f78cd8b068356a4f18bd7618cfa600aa4", "patch": "@@ -3391,52 +3391,7 @@ Expression::make_cast(Type* type, Expression* val, Location location)\n   return new Type_conversion_expression(type, val, location);\n }\n \n-// An unsafe type conversion, used to pass values to builtin functions.\n-\n-class Unsafe_type_conversion_expression : public Expression\n-{\n- public:\n-  Unsafe_type_conversion_expression(Type* type, Expression* expr,\n-\t\t\t\t    Location location)\n-    : Expression(EXPRESSION_UNSAFE_CONVERSION, location),\n-      type_(type), expr_(expr)\n-  { }\n-\n- protected:\n-  int\n-  do_traverse(Traverse* traverse);\n-\n-  bool\n-  do_is_immutable() const;\n-\n-  Type*\n-  do_type()\n-  { return this->type_; }\n-\n-  void\n-  do_determine_type(const Type_context*)\n-  { this->expr_->determine_type_no_context(); }\n-\n-  Expression*\n-  do_copy()\n-  {\n-    return new Unsafe_type_conversion_expression(this->type_,\n-\t\t\t\t\t\t this->expr_->copy(),\n-\t\t\t\t\t\t this->location());\n-  }\n-\n-  Bexpression*\n-  do_get_backend(Translate_context*);\n-\n-  void\n-  do_dump_expression(Ast_dump_context*) const;\n-\n- private:\n-  // The type to convert to.\n-  Type* type_;\n-  // The expression to convert.\n-  Expression* expr_;\n-};\n+// Class Unsafe_type_conversion_expression.\n \n // Traversal.\n "}, {"sha": "6d0f6a4c0118e4afb22c6c81aed4ca7df113a2d3", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485c981f78cd8b068356a4f18bd7618cfa600aa4/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485c981f78cd8b068356a4f18bd7618cfa600aa4/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=485c981f78cd8b068356a4f18bd7618cfa600aa4", "patch": "@@ -32,6 +32,7 @@ class Temporary_reference_expression;\n class Set_and_use_temporary_expression;\n class String_expression;\n class Type_conversion_expression;\n+class Unsafe_type_conversion_expression;\n class Unary_expression;\n class Binary_expression;\n class Call_expression;\n@@ -571,6 +572,15 @@ class Expression\n   conversion_expression()\n   { return this->convert<Type_conversion_expression, EXPRESSION_CONVERSION>(); }\n \n+  // If this is an unsafe conversion expression, return the\n+  // Unsafe_type_conversion_expression structure.  Otherwise, return NULL.\n+  Unsafe_type_conversion_expression*\n+  unsafe_conversion_expression()\n+  {\n+    return this->convert<Unsafe_type_conversion_expression,\n+\t\t\t EXPRESSION_UNSAFE_CONVERSION>();\n+  }\n+\n   // Return whether this is the expression nil.\n   bool\n   is_nil_expression() const\n@@ -1505,6 +1515,57 @@ class Type_conversion_expression : public Expression\n   bool may_convert_function_types_;\n };\n \n+// An unsafe type conversion, used to pass values to builtin functions.\n+\n+class Unsafe_type_conversion_expression : public Expression\n+{\n+ public:\n+  Unsafe_type_conversion_expression(Type* type, Expression* expr,\n+\t\t\t\t    Location location)\n+    : Expression(EXPRESSION_UNSAFE_CONVERSION, location),\n+      type_(type), expr_(expr)\n+  { }\n+\n+  Expression*\n+  expr() const\n+  { return this->expr_; }\n+\n+ protected:\n+  int\n+  do_traverse(Traverse* traverse);\n+\n+  bool\n+  do_is_immutable() const;\n+\n+  Type*\n+  do_type()\n+  { return this->type_; }\n+\n+  void\n+  do_determine_type(const Type_context*)\n+  { this->expr_->determine_type_no_context(); }\n+\n+  Expression*\n+  do_copy()\n+  {\n+    return new Unsafe_type_conversion_expression(this->type_,\n+\t\t\t\t\t\t this->expr_->copy(),\n+\t\t\t\t\t\t this->location());\n+  }\n+\n+  Bexpression*\n+  do_get_backend(Translate_context*);\n+\n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n+ private:\n+  // The type to convert to.\n+  Type* type_;\n+  // The expression to convert.\n+  Expression* expr_;\n+};\n+\n // A Unary expression.\n \n class Unary_expression : public Expression\n@@ -2024,6 +2085,10 @@ class Call_result_expression : public Expression\n   call() const\n   { return this->call_; }\n \n+  unsigned int\n+  index() const\n+  { return this->index_; }\n+\n  protected:\n   int\n   do_traverse(Traverse*);"}]}