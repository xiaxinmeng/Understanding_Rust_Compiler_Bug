{"sha": "0bd44ba2e1130ed35a194ee32e033af7efe14495", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJkNDRiYTJlMTEzMGVkMzVhMTk0ZWUzMmUwMzNhZjdlZmUxNDQ5NQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-08-02T09:53:58Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-08-02T09:53:58Z"}, "message": "thumb2.md (thumb2_movdi, [...]): Delete patterns.\n\n\t* config/arm/thumb2.md (thumb2_movdi, thumb2_movsf_soft_insn,\n\tthumb2_movdf_soft_insn): Delete patterns.\n\t* config/arm/arm.md (arm_pool_range, thumb2_pool_range,\n\tarm_neg_pool_range, thumb2_neg_pool_range): New attributes.\n\t(pool_range, neg_pool_range): Use them to define defaults.\n\t(movdi, arm_movsf_soft_insn, arm_movdf_soft_insn): Define them\n\tand allow for TARGET_32BIT.\n\nFrom-SVN: r162814", "tree": {"sha": "3bcdbfdf83f159cecb2ebf5d75f65fe951261d4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bcdbfdf83f159cecb2ebf5d75f65fe951261d4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bd44ba2e1130ed35a194ee32e033af7efe14495", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd44ba2e1130ed35a194ee32e033af7efe14495", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bd44ba2e1130ed35a194ee32e033af7efe14495", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd44ba2e1130ed35a194ee32e033af7efe14495/comments", "author": null, "committer": null, "parents": [{"sha": "906668bb6f8c3f1eb4046dec89e9664554481eaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/906668bb6f8c3f1eb4046dec89e9664554481eaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/906668bb6f8c3f1eb4046dec89e9664554481eaa"}], "stats": {"total": 111, "additions": 34, "deletions": 77}, "files": [{"sha": "213d3ec755ea01ab6e7e20f9a6344614c9d738e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd44ba2e1130ed35a194ee32e033af7efe14495/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd44ba2e1130ed35a194ee32e033af7efe14495/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0bd44ba2e1130ed35a194ee32e033af7efe14495", "patch": "@@ -37,6 +37,14 @@\n \t(movsi_cbranchsi4 peepholes): Rewrite to generate a sequence of\n \tone subtract and one cbranch insn.\n \n+\t* config/arm/thumb2.md (thumb2_movdi, thumb2_movsf_soft_insn,\n+\tthumb2_movdf_soft_insn): Delete patterns.\n+\t* config/arm/arm.md (arm_pool_range, thumb2_pool_range,\n+\tarm_neg_pool_range, thumb2_neg_pool_range): New attributes.\n+\t(pool_range, neg_pool_range): Use them to define defaults.\n+\t(movdi, arm_movsf_soft_insn, arm_movdf_soft_insn): Define them\n+\tand allow for TARGET_32BIT.\n+\n 2010-08-02  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* config/arm/arm.c (COSTS_N_INSNS): Remove definition."}, {"sha": "baba8b03419ca3f4375d6083abc3e4304398d4ff", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd44ba2e1130ed35a194ee32e033af7efe14495/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd44ba2e1130ed35a194ee32e033af7efe14495/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=0bd44ba2e1130ed35a194ee32e033af7efe14495", "patch": "@@ -172,8 +172,17 @@\n ; reference the pool.\n ; NEG_POOL_RANGE is nonzero for insns that can reference a constant pool entry\n ; before its address.\n-(define_attr \"pool_range\" \"\" (const_int 0))\n-(define_attr \"neg_pool_range\" \"\" (const_int 0))\n+(define_attr \"arm_pool_range\" \"\" (const_int 0))\n+(define_attr \"thumb2_pool_range\" \"\" (const_int 0))\n+(define_attr \"arm_neg_pool_range\" \"\" (const_int 0))\n+(define_attr \"thumb2_neg_pool_range\" \"\" (const_int 0))\n+\n+(define_attr \"pool_range\" \"\"\n+  (cond [(eq_attr \"is_thumb\" \"yes\") (attr \"thumb2_pool_range\")]\n+\t(attr \"arm_pool_range\")))\n+(define_attr \"neg_pool_range\" \"\"\n+  (cond [(eq_attr \"is_thumb\" \"yes\") (attr \"thumb2_neg_pool_range\")]\n+\t(attr \"arm_neg_pool_range\")))\n \n ; An assembler sequence may clobber the condition codes without us knowing.\n ; If such an insn references the pool, then we have no way of knowing how,\n@@ -4775,7 +4784,7 @@\n (define_insn \"*arm_movdi\"\n   [(set (match_operand:DI 0 \"nonimmediate_di_operand\" \"=r, r, r, r, m\")\n \t(match_operand:DI 1 \"di_operand\"              \"rDa,Db,Dc,mi,r\"))]\n-  \"TARGET_ARM\n+  \"TARGET_32BIT\n    && !(TARGET_HARD_FLOAT && (TARGET_MAVERICK || TARGET_VFP))\n    && !TARGET_IWMMXT\n    && (   register_operand (operands[0], DImode)\n@@ -4793,8 +4802,10 @@\n   \"\n   [(set_attr \"length\" \"8,12,16,8,8\")\n    (set_attr \"type\" \"*,*,*,load2,store2\")\n-   (set_attr \"pool_range\" \"*,*,*,1020,*\")\n-   (set_attr \"neg_pool_range\" \"*,*,*,1008,*\")]\n+   (set_attr \"arm_pool_range\" \"*,*,*,1020,*\")\n+   (set_attr \"arm_neg_pool_range\" \"*,*,*,1008,*\")\n+   (set_attr \"thumb2_pool_range\" \"*,*,*,4096,*\")\n+   (set_attr \"thumb2_neg_pool_range\" \"*,*,*,0,*\")]\n )\n \n (define_split\n@@ -5695,7 +5706,7 @@\n \n ;; Pattern to recognize insn generated default case above\n (define_insn \"*movhi_insn_arch4\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,m,r\")    \n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,m,r\")\n \t(match_operand:HI 1 \"general_operand\"      \"rI,K,r,m\"))]\n   \"TARGET_ARM\n    && arm_arch4\n@@ -6019,19 +6030,19 @@\n (define_insn \"*arm_movsf_soft_insn\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=r,r,m\")\n \t(match_operand:SF 1 \"general_operand\"  \"r,mE,r\"))]\n-  \"TARGET_ARM\n+  \"TARGET_32BIT\n    && TARGET_SOFT_FLOAT\n    && (GET_CODE (operands[0]) != MEM\n        || register_operand (operands[1], SFmode))\"\n   \"@\n    mov%?\\\\t%0, %1\n    ldr%?\\\\t%0, %1\\\\t%@ float\n    str%?\\\\t%1, %0\\\\t%@ float\"\n-  [(set_attr \"length\" \"4,4,4\")\n-   (set_attr \"predicable\" \"yes\")\n+  [(set_attr \"predicable\" \"yes\")\n    (set_attr \"type\" \"*,load1,store1\")\n    (set_attr \"pool_range\" \"*,4096,*\")\n-   (set_attr \"neg_pool_range\" \"*,4084,*\")]\n+   (set_attr \"arm_neg_pool_range\" \"*,4084,*\")\n+   (set_attr \"thumb2_neg_pool_range\" \"*,0,*\")]\n )\n \n ;;; ??? This should have alternatives for constants.\n@@ -6123,7 +6134,7 @@\n (define_insn \"*movdf_soft_insn\"\n   [(set (match_operand:DF 0 \"nonimmediate_soft_df_operand\" \"=r,r,r,r,m\")\n \t(match_operand:DF 1 \"soft_df_operand\" \"rDa,Db,Dc,mF,r\"))]\n-  \"TARGET_ARM && TARGET_SOFT_FLOAT\n+  \"TARGET_32BIT && TARGET_SOFT_FLOAT\n    && (   register_operand (operands[0], DFmode)\n        || register_operand (operands[1], DFmode))\"\n   \"*\n@@ -6139,8 +6150,9 @@\n   \"\n   [(set_attr \"length\" \"8,12,16,8,8\")\n    (set_attr \"type\" \"*,*,*,load2,store2\")\n-   (set_attr \"pool_range\" \"1020\")\n-   (set_attr \"neg_pool_range\" \"1008\")]\n+   (set_attr \"pool_range\" \"*,*,*,1020,*\")\n+   (set_attr \"arm_neg_pool_range\" \"*,*,*,1008,*\")\n+   (set_attr \"thumb2_neg_pool_range\" \"*,*,*,0,*\")]\n )\n \n ;;; ??? This should have alternatives for constants."}, {"sha": "46767d49f767b0aefd8a97af77c2d2e10710ee65", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 1, "deletions": 64, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bd44ba2e1130ed35a194ee32e033af7efe14495/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bd44ba2e1130ed35a194ee32e033af7efe14495/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=0bd44ba2e1130ed35a194ee32e033af7efe14495", "patch": "@@ -200,29 +200,6 @@\n    (set_attr \"length\" \"10,8\")]\n )\n \n-(define_insn \"*thumb2_movdi\"\n-  [(set (match_operand:DI 0 \"nonimmediate_di_operand\" \"=r, r, r, r, m\")\n-\t(match_operand:DI 1 \"di_operand\"              \"rDa,Db,Dc,mi,r\"))]\n-  \"TARGET_THUMB2\n-  && !(TARGET_HARD_FLOAT && (TARGET_MAVERICK || TARGET_VFP))\n-  && !TARGET_IWMMXT\"\n-  \"*\n-  switch (which_alternative)\n-    {\n-    case 0:\n-    case 1:\n-    case 2:\n-      return \\\"#\\\";\n-    default:\n-      return output_move_double (operands);\n-    }\n-  \"\n-  [(set_attr \"length\" \"8,12,16,8,8\")\n-   (set_attr \"type\" \"*,*,*,load2,store2\")\n-   (set_attr \"pool_range\" \"*,*,*,4096,*\")\n-   (set_attr \"neg_pool_range\" \"*,*,*,0,*\")]\n-)\n-\n ;; We have two alternatives here for memory loads (and similarly for stores)\n ;; to reflect the fact that the permissible constant pool ranges differ\n ;; between ldr instructions taking low regs and ldr instructions taking high\n@@ -269,7 +246,7 @@\n ;; Thumb-2 always has load/store halfword instructions, so we can avoid a lot\n ;; of the messiness associated with the ARM patterns.\n (define_insn \"*thumb2_movhi_insn\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,m,r\")    \n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,m,r\")\n \t(match_operand:HI 1 \"general_operand\"      \"rI,n,r,m\"))]\n   \"TARGET_THUMB2\"\n   \"@\n@@ -283,46 +260,6 @@\n    (set_attr \"neg_pool_range\" \"*,*,*,250\")]\n )\n \n-(define_insn \"*thumb2_movsf_soft_insn\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=r,r,m\")\n-\t(match_operand:SF 1 \"general_operand\"  \"r,mE,r\"))]\n-  \"TARGET_THUMB2\n-   && TARGET_SOFT_FLOAT\n-   && (GET_CODE (operands[0]) != MEM\n-       || register_operand (operands[1], SFmode))\"\n-  \"@\n-   mov%?\\\\t%0, %1\n-   ldr%?\\\\t%0, %1\\\\t%@ float\n-   str%?\\\\t%1, %0\\\\t%@ float\"\n-  [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"*,load1,store1\")\n-   (set_attr \"pool_range\" \"*,4096,*\")\n-   (set_attr \"neg_pool_range\" \"*,0,*\")]\n-)\n-\n-(define_insn \"*thumb2_movdf_soft_insn\"\n-  [(set (match_operand:DF 0 \"nonimmediate_soft_df_operand\" \"=r,r,r,r,m\")\n-\t(match_operand:DF 1 \"soft_df_operand\" \"rDa,Db,Dc,mF,r\"))]\n-  \"TARGET_THUMB2 && TARGET_SOFT_FLOAT\n-   && (   register_operand (operands[0], DFmode)\n-       || register_operand (operands[1], DFmode))\"\n-  \"*\n-  switch (which_alternative)\n-    {\n-    case 0:\n-    case 1:\n-    case 2:\n-      return \\\"#\\\";\n-    default:\n-      return output_move_double (operands);\n-    }\n-  \"\n-  [(set_attr \"length\" \"8,12,16,8,8\")\n-   (set_attr \"type\" \"*,*,*,load2,store2\")\n-   (set_attr \"pool_range\" \"*,*,*,1020,*\")\n-   (set_attr \"neg_pool_range\" \"*,*,*,0,*\")]\n-)\n-\n (define_insn \"*thumb2_cmpsi_shiftsi\"\n   [(set (reg:CC CC_REGNUM)\n \t(compare:CC (match_operand:SI   0 \"s_register_operand\" \"r\")"}]}