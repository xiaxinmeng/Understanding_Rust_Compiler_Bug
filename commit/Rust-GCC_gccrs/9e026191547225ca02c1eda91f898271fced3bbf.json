{"sha": "9e026191547225ca02c1eda91f898271fced3bbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUwMjYxOTE1NDcyMjVjYTAyYzFlZGE5MWY4OTgyNzFmY2VkM2JiZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-08-17T18:39:08Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-08-17T18:41:14Z"}, "message": "i386: Use parametrized pattern names some more.\n\nUse parameterized pattern names to simplify calling of named patterns.\n\n2020-08-15  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-builtin.def (__builtin_ia32_bextri_u32)\n\t(__builtin_ia32_bextri_u64): Use CODE_FOR_nothing.\n\t* config/i386/i386.md (@tbm_bextri_<mode>):\n\tImplement as parametrized name pattern.\n\t(@rdrand<mode>): Ditto.\n\t(@rdseed<mode>): Ditto.\n\t* config/i386/i386-expand.c (ix86_expand_builtin)\n\t[case IX86_BUILTIN_BEXTRI32, case IX86_BUILTIN_BEXTRI64]:\n\tUpdate for parameterized name patterns.\n\t[case IX86_BUILTIN_RDRAND16_STEP, case IX86_BUILTIN_RDRAND32_STEP]\n\t[case IX86_BUILTIN_RDRAND64_STEP]: Ditto.\n\t[case IX86_BUILTIN_RDSEED16_STEP, case IX86_BUILTIN_RDSEED32_STEP]\n\t[case IX86_BUILTIN_RDSEED64_STEP]: Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/rdrand-1.c (dg-final): Update scan string.\n\t* gcc.target/i386/rdrand-2.c (dg-final): Ditto.\n\t* gcc.target/i386/rdrand-3.c (dg-final): Ditto.", "tree": {"sha": "4f8a00644ae9ee69a29b7cb4516cd8b527f3097b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f8a00644ae9ee69a29b7cb4516cd8b527f3097b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e026191547225ca02c1eda91f898271fced3bbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e026191547225ca02c1eda91f898271fced3bbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e026191547225ca02c1eda91f898271fced3bbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e026191547225ca02c1eda91f898271fced3bbf/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26fdc47da756435f5411a858141521487478bcfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26fdc47da756435f5411a858141521487478bcfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26fdc47da756435f5411a858141521487478bcfa"}], "stats": {"total": 120, "additions": 52, "deletions": 68}, "files": [{"sha": "fec5cef0b55a37d804784cc01720955ea60f968b", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e026191547225ca02c1eda91f898271fced3bbf/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e026191547225ca02c1eda91f898271fced3bbf/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=9e026191547225ca02c1eda91f898271fced3bbf", "patch": "@@ -1270,8 +1270,8 @@ BDESC (OPTION_MASK_ISA_BMI, 0, CODE_FOR_tzcnt_si, \"__builtin_ia32_tzcnt_u32\", IX\n BDESC (OPTION_MASK_ISA_BMI | OPTION_MASK_ISA_64BIT, 0, CODE_FOR_tzcnt_di, \"__builtin_ia32_tzcnt_u64\", IX86_BUILTIN_TZCNT64, UNKNOWN, (int) UINT64_FTYPE_UINT64)\n \n /* TBM */\n-BDESC (OPTION_MASK_ISA_TBM, 0, CODE_FOR_tbm_bextri_si, \"__builtin_ia32_bextri_u32\", IX86_BUILTIN_BEXTRI32, UNKNOWN, (int) UINT_FTYPE_UINT_UINT)\n-BDESC (OPTION_MASK_ISA_TBM | OPTION_MASK_ISA_64BIT, 0, CODE_FOR_tbm_bextri_di, \"__builtin_ia32_bextri_u64\", IX86_BUILTIN_BEXTRI64, UNKNOWN, (int) UINT64_FTYPE_UINT64_UINT64)\n+BDESC (OPTION_MASK_ISA_TBM, 0, CODE_FOR_nothing, \"__builtin_ia32_bextri_u32\", IX86_BUILTIN_BEXTRI32, UNKNOWN, (int) UINT_FTYPE_UINT_UINT)\n+BDESC (OPTION_MASK_ISA_TBM | OPTION_MASK_ISA_64BIT, 0, CODE_FOR_nothing, \"__builtin_ia32_bextri_u64\", IX86_BUILTIN_BEXTRI64, UNKNOWN, (int) UINT64_FTYPE_UINT64_UINT64)\n \n /* F16C */\n BDESC (OPTION_MASK_ISA_F16C, 0, CODE_FOR_vcvtph2ps, \"__builtin_ia32_vcvtph2ps\", IX86_BUILTIN_CVTPH2PS, UNKNOWN, (int) V4SF_FTYPE_V8HI)"}, {"sha": "d8368bfd4a9ffcc9ba978ccc70f6e892a8c5f560", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 44, "deletions": 39, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e026191547225ca02c1eda91f898271fced3bbf/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e026191547225ca02c1eda91f898271fced3bbf/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=9e026191547225ca02c1eda91f898271fced3bbf", "patch": "@@ -11709,24 +11709,26 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \n     case IX86_BUILTIN_BEXTRI32:\n     case IX86_BUILTIN_BEXTRI64:\n+      mode = (fcode == IX86_BUILTIN_BEXTRI32 ? SImode : DImode);\n+\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       arg1 = CALL_EXPR_ARG (exp, 1);\n       op0 = expand_normal (arg0);\n       op1 = expand_normal (arg1);\n-      icode = (fcode == IX86_BUILTIN_BEXTRI32\n-\t  ? CODE_FOR_tbm_bextri_si\n-\t  : CODE_FOR_tbm_bextri_di);\n+\n       if (!CONST_INT_P (op1))\n-        {\n-          error (\"last argument must be an immediate\");\n-          return const0_rtx;\n-        }\n+\t{\n+\t  error (\"last argument must be an immediate\");\n+\t  return const0_rtx;\n+\t}\n       else\n-        {\n-          unsigned char length = (INTVAL (op1) >> 8) & 0xFF;\n-          unsigned char lsb_index = INTVAL (op1) & 0xFF;\n-          op1 = GEN_INT (length);\n-          op2 = GEN_INT (lsb_index);\n+\t{\n+\t  unsigned char lsb_index = UINTVAL (op1);\n+\t  unsigned char length = UINTVAL (op1) >> 8;\n+\n+\t  unsigned char bitsize = GET_MODE_BITSIZE (mode);\n+\n+\t  icode = code_for_tbm_bextri (mode);\n \n \t  mode1 = insn_data[icode].operand[1].mode;\n \t  if (!insn_data[icode].operand[1].predicate (op0, mode1))\n@@ -11737,25 +11739,32 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t      || !register_operand (target, mode0))\n \t    target = gen_reg_rtx (mode0);\n \n-          pat = GEN_FCN (icode) (target, op0, op1, op2);\n-          if (pat)\n-            emit_insn (pat);\n-          return target;\n-        }\n+\t  if (length == 0 || lsb_index >= bitsize)\n+\t    {\n+\t      emit_move_insn (target, const0_rtx);\n+\t      return target;\n+\t    }\n+\n+\t  if (length + lsb_index > bitsize)\n+\t    length = bitsize - lsb_index;\n+\n+\t  op1 = GEN_INT (length);\n+\t  op2 = GEN_INT (lsb_index);\n+\n+\t  emit_insn (GEN_FCN (icode) (target, op0, op1, op2));\n+\t  return target;\n+\t}\n \n     case IX86_BUILTIN_RDRAND16_STEP:\n-      icode = CODE_FOR_rdrandhi_1;\n-      mode0 = HImode;\n+      mode = HImode;\n       goto rdrand_step;\n \n     case IX86_BUILTIN_RDRAND32_STEP:\n-      icode = CODE_FOR_rdrandsi_1;\n-      mode0 = SImode;\n+      mode = SImode;\n       goto rdrand_step;\n \n     case IX86_BUILTIN_RDRAND64_STEP:\n-      icode = CODE_FOR_rdranddi_1;\n-      mode0 = DImode;\n+      mode = DImode;\n \n rdrand_step:\n       arg0 = CALL_EXPR_ARG (exp, 0);\n@@ -11766,16 +11775,15 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t  op1 = copy_addr_to_reg (op1);\n \t}\n \n-      op0 = gen_reg_rtx (mode0);\n-      emit_insn (GEN_FCN (icode) (op0));\n+      op0 = gen_reg_rtx (mode);\n+      emit_insn (gen_rdrand (mode, op0));\n \n-      emit_move_insn (gen_rtx_MEM (mode0, op1), op0);\n+      emit_move_insn (gen_rtx_MEM (mode, op1), op0);\n \n-      op1 = gen_reg_rtx (SImode);\n-      emit_move_insn (op1, CONST1_RTX (SImode));\n+      op1 = force_reg (SImode, const1_rtx);\n \n       /* Emit SImode conditional move.  */\n-      if (mode0 == HImode)\n+      if (mode == HImode)\n \t{\n \t  if (TARGET_ZERO_EXTEND_WITH_AND\n \t      && optimize_function_for_speed_p (cfun))\n@@ -11792,7 +11800,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t      emit_insn (gen_zero_extendhisi2 (op2, op0));\n \t    }\n \t}\n-      else if (mode0 == SImode)\n+      else if (mode == SImode)\n \top2 = op0;\n       else\n \top2 = gen_rtx_SUBREG (SImode, op0, 0);\n@@ -11808,18 +11816,15 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       return target;\n \n     case IX86_BUILTIN_RDSEED16_STEP:\n-      icode = CODE_FOR_rdseedhi_1;\n-      mode0 = HImode;\n+      mode = HImode;\n       goto rdseed_step;\n \n     case IX86_BUILTIN_RDSEED32_STEP:\n-      icode = CODE_FOR_rdseedsi_1;\n-      mode0 = SImode;\n+      mode = SImode;\n       goto rdseed_step;\n \n     case IX86_BUILTIN_RDSEED64_STEP:\n-      icode = CODE_FOR_rdseeddi_1;\n-      mode0 = DImode;\n+      mode = DImode;\n \n rdseed_step:\n       arg0 = CALL_EXPR_ARG (exp, 0);\n@@ -11830,10 +11835,10 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t  op1 = copy_addr_to_reg (op1);\n \t}\n \n-      op0 = gen_reg_rtx (mode0);\n-      emit_insn (GEN_FCN (icode) (op0));\n+      op0 = gen_reg_rtx (mode);\n+      emit_insn (gen_rdseed (mode, op0));\n \n-      emit_move_insn (gen_rtx_MEM (mode0, op1), op0);\n+      emit_move_insn (gen_rtx_MEM (mode, op1), op0);\n \n       op2 = gen_reg_rtx (QImode);\n "}, {"sha": "09dcaa36cf1173b2965b17c92d6e72c4877b4914", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e026191547225ca02c1eda91f898271fced3bbf/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e026191547225ca02c1eda91f898271fced3bbf/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9e026191547225ca02c1eda91f898271fced3bbf", "patch": "@@ -14524,28 +14524,7 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; TBM instructions.\n-(define_expand \"tbm_bextri_<mode>\"\n-  [(parallel\n-    [(set (match_operand:SWI48 0 \"register_operand\")\n-\t  (zero_extract:SWI48\n-\t    (match_operand:SWI48 1 \"nonimmediate_operand\")\n-\t    (match_operand 2 \"const_0_to_255_operand\" \"N\")\n-\t    (match_operand 3 \"const_0_to_255_operand\" \"N\")))\n-     (clobber (reg:CC FLAGS_REG))])]\n-  \"TARGET_TBM\"\n-{\n-  if (operands[2] == const0_rtx\n-      || INTVAL (operands[3]) >= <MODE_SIZE> * BITS_PER_UNIT)\n-    {\n-      emit_move_insn (operands[0], const0_rtx);\n-      DONE;\n-    }\n-  if (INTVAL (operands[2]) + INTVAL (operands[3])\n-      > <MODE_SIZE> * BITS_PER_UNIT)\n-    operands[2] = GEN_INT (<MODE_SIZE> * BITS_PER_UNIT - INTVAL (operands[3]));\n-})\n-\n-(define_insn \"*tbm_bextri_<mode>\"\n+(define_insn \"@tbm_bextri_<mode>\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n         (zero_extract:SWI48\n           (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n@@ -21174,7 +21153,7 @@\n   [(set_attr \"type\" \"other\")\n    (set_attr \"prefix_extra\" \"2\")])\n \n-(define_insn \"rdrand<mode>_1\"\n+(define_insn \"@rdrand<mode>\"\n   [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n \t(unspec_volatile:SWI248 [(const_int 0)] UNSPECV_RDRAND))\n    (set (reg:CCC FLAGS_REG)\n@@ -21184,7 +21163,7 @@\n   [(set_attr \"type\" \"other\")\n    (set_attr \"prefix_extra\" \"1\")])\n \n-(define_insn \"rdseed<mode>_1\"\n+(define_insn \"@rdseed<mode>\"\n   [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n \t(unspec_volatile:SWI248 [(const_int 0)] UNSPECV_RDSEED))\n    (set (reg:CCC FLAGS_REG)"}, {"sha": "5eec19a7e728e538df57c48aa22e61ba95eb71b1", "filename": "gcc/testsuite/gcc.target/i386/rdrand-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e026191547225ca02c1eda91f898271fced3bbf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e026191547225ca02c1eda91f898271fced3bbf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-1.c?ref=9e026191547225ca02c1eda91f898271fced3bbf", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mrdrnd -dp\" } */\n-/* { dg-final { scan-assembler-times \"rdrandhi_1\" 1 } } */\n+/* { dg-final { scan-assembler-times \"rdrandhi\" 1 } } */\n /* { dg-final { scan-assembler-times \"\\\\*movsicc_noc\" 1 } } */\n \n #include <immintrin.h>"}, {"sha": "a7173157d75abe8d061ec7ea6909d29e20c92255", "filename": "gcc/testsuite/gcc.target/i386/rdrand-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e026191547225ca02c1eda91f898271fced3bbf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e026191547225ca02c1eda91f898271fced3bbf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-2.c?ref=9e026191547225ca02c1eda91f898271fced3bbf", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -mrdrnd -dp\" } */\n-/* { dg-final { scan-assembler-times \"rdrandsi_1\" 1 } } */\n+/* { dg-final { scan-assembler-times \"rdrandsi\" 1 } } */\n /* { dg-final { scan-assembler-times \"\\\\*movsicc_noc\" 1 } } */\n \n #include <immintrin.h>"}, {"sha": "48b4ee25a276f4c9081bec9c4931fed00355ba8d", "filename": "gcc/testsuite/gcc.target/i386/rdrand-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e026191547225ca02c1eda91f898271fced3bbf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e026191547225ca02c1eda91f898271fced3bbf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-3.c?ref=9e026191547225ca02c1eda91f898271fced3bbf", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-O2 -mrdrnd -dp\" } */\n-/* { dg-final { scan-assembler-times \"rdranddi_1\" 1 } } */\n+/* { dg-final { scan-assembler-times \"rdranddi\" 1 } } */\n /* { dg-final { scan-assembler-times \"\\\\*movsicc_noc\" 1 } } */\n \n #include <immintrin.h>"}]}