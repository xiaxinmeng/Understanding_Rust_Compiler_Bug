{"sha": "798e2a8ed800a05e24f8969dc236bc4b7b2af163", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk4ZTJhOGVkODAwYTA1ZTI0Zjg5NjlkYzIzNmJjNGI3YjJhZjE2Mw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-02-25T13:20:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-02-25T13:20:25Z"}, "message": "re PR tree-optimization/48795 (-Warray-bounds false positive)\n\n2016-02-25  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/48795\n\t* tree-vrp.c (check_array_ref): Use array_at_struct_end_p.\n\n\t* gcc.dg/Warray-bounds-18.c: New testcase.\n\nFrom-SVN: r233714", "tree": {"sha": "2ecd27e12a65a3a74e1a672c7bdc3223514e0105", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ecd27e12a65a3a74e1a672c7bdc3223514e0105"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/798e2a8ed800a05e24f8969dc236bc4b7b2af163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798e2a8ed800a05e24f8969dc236bc4b7b2af163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/798e2a8ed800a05e24f8969dc236bc4b7b2af163", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798e2a8ed800a05e24f8969dc236bc4b7b2af163/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9559fbacc6d7e9f07f96443baadf931758ab00f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9559fbacc6d7e9f07f96443baadf931758ab00f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9559fbacc6d7e9f07f96443baadf931758ab00f3"}], "stats": {"total": 60, "additions": 38, "deletions": 22}, "files": [{"sha": "3a13f5fa5649fcb1760d4877f01c7f5f931934c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798e2a8ed800a05e24f8969dc236bc4b7b2af163/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798e2a8ed800a05e24f8969dc236bc4b7b2af163/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=798e2a8ed800a05e24f8969dc236bc4b7b2af163", "patch": "@@ -1,3 +1,8 @@\n+2016-02-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/48795\n+\t* tree-vrp.c (check_array_ref): Use array_at_struct_end_p.\n+\n 2016-02-25  Ilya Verbin  <ilya.verbin@intel.com>\n \n \tPR driver/68463"}, {"sha": "2e45a6a0b6ccf67c6d78ef5d46c9b26aa49bed35", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798e2a8ed800a05e24f8969dc236bc4b7b2af163/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798e2a8ed800a05e24f8969dc236bc4b7b2af163/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=798e2a8ed800a05e24f8969dc236bc4b7b2af163", "patch": "@@ -1,3 +1,8 @@\n+2016-02-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/48795\n+\t* gcc.dg/Warray-bounds-18.c: New testcase.\n+\n 2016-02-25  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* g++.dg/ext/attr-constructor1.C: Require init_priority support."}, {"sha": "888fb80e7b9120885621e0ba05e017ffd1874129", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-18.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798e2a8ed800a05e24f8969dc236bc4b7b2af163/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798e2a8ed800a05e24f8969dc236bc4b7b2af163/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-18.c?ref=798e2a8ed800a05e24f8969dc236bc4b7b2af163", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Warray-bounds\" } */\n+\n+typedef struct\n+{\n+  int len;\n+  char data[1];\n+} rec;\n+\n+int\n+p(rec *r, int len);\n+\n+int\n+f (char prm1, char prm2)\n+{\n+  char buf[10];\n+\n+  rec *r1 = (rec *)&buf;\n+\n+  r1->len = 10;\n+  r1->data[0] = prm1;\n+  r1->data[1] = prm2; /* { dg-bogus \"above array bounds\" } */\n+\n+  return p(r1, r1->len);\n+}"}, {"sha": "a11635d18b88746a275e5fbfe53548b48561685c", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798e2a8ed800a05e24f8969dc236bc4b7b2af163/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798e2a8ed800a05e24f8969dc236bc4b7b2af163/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=798e2a8ed800a05e24f8969dc236bc4b7b2af163", "patch": "@@ -6450,7 +6450,6 @@ check_array_ref (location_t location, tree ref, bool ignore_off_by_one)\n   value_range *vr = NULL;\n   tree low_sub, up_sub;\n   tree low_bound, up_bound, up_bound_p1;\n-  tree base;\n \n   if (TREE_NO_WARNING (ref))\n     return;\n@@ -6465,27 +6464,9 @@ check_array_ref (location_t location, tree ref, bool ignore_off_by_one)\n \n   /* Accesses to trailing arrays via pointers may access storage\n      beyond the types array bounds.  */\n-  base = get_base_address (ref);\n-  if ((warn_array_bounds < 2)\n-      && base && TREE_CODE (base) == MEM_REF)\n-    {\n-      tree cref, next = NULL_TREE;\n-\n-      if (TREE_CODE (TREE_OPERAND (ref, 0)) != COMPONENT_REF)\n-\treturn;\n-\n-      cref = TREE_OPERAND (ref, 0);\n-      if (TREE_CODE (TREE_TYPE (TREE_OPERAND (cref, 0))) == RECORD_TYPE)\n-\tfor (next = DECL_CHAIN (TREE_OPERAND (cref, 1));\n-\t     next && TREE_CODE (next) != FIELD_DECL;\n-\t     next = DECL_CHAIN (next))\n-\t  ;\n-\n-      /* If this is the last field in a struct type or a field in a\n-\t union type do not warn.  */\n-      if (!next)\n-\treturn;\n-    }\n+  if (warn_array_bounds < 2\n+      && array_at_struct_end_p (ref))\n+    return;\n \n   low_bound = array_ref_low_bound (ref);\n   up_bound_p1 = int_const_binop (PLUS_EXPR, up_bound,"}]}