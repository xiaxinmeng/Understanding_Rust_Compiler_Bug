{"sha": "24a4a0338aa591091fbbaaf39de0e31529600bbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRhNGEwMzM4YWE1OTEwOTFmYmJhYWYzOWRlMGUzMTUyOTYwMGJiZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-12-29T09:29:21Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-12-29T09:29:21Z"}, "message": "coverage.c (read_counts_file): Better error messages...\n\n\n\t* coverage.c (read_counts_file): Better error messages; cause corrupted\n\tprofiles to produce hard errors, not just warnings\n\t(get_coverage_counts): Similarly.\n\nFrom-SVN: r75198", "tree": {"sha": "065b7688977c1e6f73e8de2bd3f41a33f5c9dc88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/065b7688977c1e6f73e8de2bd3f41a33f5c9dc88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24a4a0338aa591091fbbaaf39de0e31529600bbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24a4a0338aa591091fbbaaf39de0e31529600bbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24a4a0338aa591091fbbaaf39de0e31529600bbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24a4a0338aa591091fbbaaf39de0e31529600bbd/comments", "author": null, "committer": null, "parents": [{"sha": "f46a52d25219bfbdb22f8b8edb22c00f53490c33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f46a52d25219bfbdb22f8b8edb22c00f53490c33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f46a52d25219bfbdb22f8b8edb22c00f53490c33"}], "stats": {"total": 52, "additions": 38, "deletions": 14}, "files": [{"sha": "45598358d30aa95f70aaf4f45d370fcec871ec42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4a0338aa591091fbbaaf39de0e31529600bbd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4a0338aa591091fbbaaf39de0e31529600bbd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24a4a0338aa591091fbbaaf39de0e31529600bbd", "patch": "@@ -1,5 +1,9 @@\n 2003-12-29  Jan Hubicka  <jh@suse.cz>\n \n+\t* coverage.c (read_counts_file): Better error messages; cause corrupted\n+\tprofiles to produce hard errors, not just warnings\n+\t(get_coverage_counts): Similarly.\n+\n \t* toplev.c (rest_of_handle_loop_optimize): Enable LOOP_AUTO_UNROLL.\n \n 2003-12-29  Phil Edwards  <phil@codesourcery.com>"}, {"sha": "8b43d6af24e4de9529d1ede416498d8870a838d1", "filename": "gcc/coverage.c", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a4a0338aa591091fbbaaf39de0e31529600bbd/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a4a0338aa591091fbbaaf39de0e31529600bbd/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=24a4a0338aa591091fbbaaf39de0e31529600bbd", "patch": "@@ -154,7 +154,7 @@ read_counts_file (void)\n   counts_entry_t *summaried = NULL;\n   unsigned seen_summary = 0;\n   gcov_unsigned_t tag;\n-  int error = 0;\n+  int is_error = 0;\n \n   if (!gcov_open (da_file_name, 1))\n     return;\n@@ -250,17 +250,26 @@ read_counts_file (void)\n \t      entry->summary.num = n_counts;\n \t      entry->counts = xcalloc (n_counts, sizeof (gcov_type));\n \t    }\n-\t  else if (entry->checksum != checksum\n-\t\t   || entry->summary.num != n_counts)\n+\t  else if (entry->checksum != checksum)\n \t    {\n-\t      warning (\"coverage mismatch for function %u\", fn_ident);\n+\t      error (\"coverage mismatch for function %u while reading execution counters.\",\n+\t\t     fn_ident);\n+\t      error (\"checksum is %x instead of %x\", entry->checksum, checksum);\n+\t      htab_delete (counts_hash);\n+\t      break;\n+\t    }\n+\t  else if (entry->summary.num != n_counts)\n+\t    {\n+\t      error (\"coverage mismatch for function %u while reading execution counters.\",\n+\t\t     fn_ident);\n+\t      error (\"number of counters is %d instead of %d\", entry->summary.num, n_counts);\n \t      htab_delete (counts_hash);\n \t      break;\n \t    }\n \t  else if (elt.ctr >= GCOV_COUNTERS_SUMMABLE)\n \t    {\n-\t      warning (\"cannot merge separate %s counters for function %u\",\n-\t\t       ctr_names[elt.ctr], fn_ident);\n+\t      error (\"cannot merge separate %s counters for function %u\",\n+\t\t     ctr_names[elt.ctr], fn_ident);\n \t      goto skip_merge;\n \t    }\n \n@@ -278,14 +287,14 @@ read_counts_file (void)\n \tskip_merge:;\n \t}\n       gcov_sync (offset, length);\n-      if ((error = gcov_is_error ()))\n+      if ((is_error = gcov_is_error ()))\n \tbreak;\n     }\n \n   if (!gcov_is_eof ())\n     {\n-      warning (error < 0 ? \"`%s' has overflowed\" : \"`%s' is corrupted\",\n-\t       da_file_name);\n+      error (is_error < 0 ? \"`%s' has overflowed\" : \"`%s' is corrupted\",\n+\t     da_file_name);\n       htab_delete (counts_hash);\n     }\n \n@@ -299,6 +308,7 @@ get_coverage_counts (unsigned counter, unsigned expected,\n \t\t     const struct gcov_ctr_summary **summary)\n {\n   counts_entry_t *entry, elt;\n+  gcov_unsigned_t checksum = -1;\n \n   /* No hash table, no counts.  */\n   if (!counts_hash)\n@@ -321,12 +331,22 @@ get_coverage_counts (unsigned counter, unsigned expected,\n       return 0;\n     }\n \n-  if (expected != entry->summary.num\n-      || compute_checksum () != entry->checksum)\n+  checksum = compute_checksum ();\n+  if (entry->checksum != checksum)\n     {\n-      warning (\"coverage mismatch for `%s'\", IDENTIFIER_POINTER\n-\t       (DECL_ASSEMBLER_NAME (current_function_decl)));\n-      return NULL;\n+      error (\"coverage mismatch for function '%s' while reading counter '%s'.\",\n+\t     IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (current_function_decl)),\n+\t     ctr_names[counter]);\n+      error (\"checksum is %x instead of %x\", entry->checksum, checksum);\n+      return 0;\n+    }\n+  else if (entry->summary.num != expected)\n+    {\n+      error (\"coverage mismatch for function '%s' while reading counter '%s'.\",\n+\t     IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (current_function_decl)),\n+\t     ctr_names[counter]);\n+      error (\"number of counters is %d instead of %d\", entry->summary.num, expected);\n+      return 0;\n     }\n \n   if (summary)"}]}