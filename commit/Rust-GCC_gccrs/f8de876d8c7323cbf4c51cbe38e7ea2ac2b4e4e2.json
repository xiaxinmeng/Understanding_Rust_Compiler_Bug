{"sha": "f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhkZTg3NmQ4YzczMjNjYmY0YzUxY2JlMzhlN2VhMmFjMmI0ZTRlMg==", "commit": {"author": {"name": "Igor Tsimbalist", "email": "igor.v.tsimbalist@intel.com", "date": "2018-02-14T15:06:21Z"}, "committer": {"name": "Igor Tsimbalist", "email": "itsimbal@gcc.gnu.org", "date": "2018-02-14T15:06:21Z"}, "message": "Reimplement CET intrinsics for rdssp/incssp insn.\n\nIntroduce a couple of new CET intrinsics for reading and updating a\nshadow stack pointer (_get_ssp and _inc_ssp). They replace the existing\n_rdssp[d|q] and _incssp[d|q] instrinsics.\n\n\tPR target/84239\n\t* gcc/config/i386/cetintrin.h: Remove _rdssp[d|q] and\n\tadd _get_ssp intrinsics. Remove argument from\n\t__builtin_ia32_rdssp[d|q].\n\t* gcc/config/i386/i386-builtin-types.def: Add UINT_FTYPE_VOID.\n\t* gcc/config/i386/i386-builtin.def: Remove argument from\n\t__builtin_ia32_rdssp[d|q].\n\t* gcc/config/i386/i386.c: Use UINT_FTYPE_VOID. Use\n\tix86_expand_special_args_builtin for _rdssp[d|q].\n\t* gcc/config/i386/i386.md: Remove argument from rdssp[si|di] insn.\n\tClear register before usage.\n\t* doc/extend.texi: Remove argument from __builtin_ia32_rdssp[d|q].\n\tAdd documentation for new _get_ssp and _inc_ssp intrinsics.\n\t* testsuite/gcc.target/i386/cet-intrin-3.c: Use new _get_ssp and\n\t_inc_ssp intrinsics.\n\t* testsuite/gcc.target/i386/cet-intrin-4.c: Likewise.\n\t* testsuite/gcc.target/i386/cet-rdssp-1.c: Remove argument from\n\t__builtin_ia32_rdssp[d|q].\n\t* libgcc/config/i386/shadow-stack-unwind.hi (_Unwind_Frames_Extra):\n\tUse new _get_ssp and _inc_ssp intrinsics.\n\nFrom-SVN: r257660", "tree": {"sha": "e6870d080a5d225588656a2544bfc32f7646425d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6870d080a5d225588656a2544bfc32f7646425d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/comments", "author": {"login": "itsimbal", "id": 29258612, "node_id": "MDQ6VXNlcjI5MjU4NjEy", "avatar_url": "https://avatars.githubusercontent.com/u/29258612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itsimbal", "html_url": "https://github.com/itsimbal", "followers_url": "https://api.github.com/users/itsimbal/followers", "following_url": "https://api.github.com/users/itsimbal/following{/other_user}", "gists_url": "https://api.github.com/users/itsimbal/gists{/gist_id}", "starred_url": "https://api.github.com/users/itsimbal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itsimbal/subscriptions", "organizations_url": "https://api.github.com/users/itsimbal/orgs", "repos_url": "https://api.github.com/users/itsimbal/repos", "events_url": "https://api.github.com/users/itsimbal/events{/privacy}", "received_events_url": "https://api.github.com/users/itsimbal/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "87ca401516de990160167da4849cd0b31394237d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87ca401516de990160167da4849cd0b31394237d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87ca401516de990160167da4849cd0b31394237d"}], "stats": {"total": 208, "additions": 126, "deletions": 82}, "files": [{"sha": "b2bec8b574f97c36c6224ac2cb89f10a7c4d4a9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2", "patch": "@@ -1,3 +1,19 @@\n+2018-02-14  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n+\n+\tPR target/84239\n+\t* config/i386/cetintrin.h: Remove _rdssp[d|q] and\n+\tadd _get_ssp intrinsics. Remove argument from\n+\t__builtin_ia32_rdssp[d|q].\n+\t* config/i386/i386-builtin-types.def: Add UINT_FTYPE_VOID.\n+\t* config/i386/i386-builtin.def: Remove argument from\n+\t__builtin_ia32_rdssp[d|q].\n+\t* config/i386/i386.c: Use UINT_FTYPE_VOID. Use\n+\tix86_expand_special_args_builtin for _rdssp[d|q].\n+\t* config/i386/i386.md: Remove argument from rdssp[si|di] insn.\n+\tClear register before usage.\n+\t* doc/extend.texi: Remove argument from __builtin_ia32_rdssp[d|q].\n+\tAdd documentation for new _get_ssp and _inc_ssp intrinsics.\n+\n 2018-02-14  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR tree-optimization/84357"}, {"sha": "e9abcf3c580e53aa02b82e2eaed9559fb7de2000", "filename": "gcc/config/i386/cetintrin.h", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/gcc%2Fconfig%2Fi386%2Fcetintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/gcc%2Fconfig%2Fi386%2Fcetintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcetintrin.h?ref=f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2", "patch": "@@ -34,37 +34,32 @@\n #define __DISABLE_SHSTK__\n #endif /* __SHSTK__ */\n \n-extern __inline unsigned int\n-__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_rdsspd (unsigned int __B)\n-{\n-  return __builtin_ia32_rdsspd (__B);\n-}\n-\n #ifdef __x86_64__\n extern __inline unsigned long long\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_rdsspq (unsigned long long __B)\n+_get_ssp (void)\n {\n-  return __builtin_ia32_rdsspq (__B);\n+  return __builtin_ia32_rdsspq ();\n }\n-#endif\n-\n-extern __inline void\n+#else\n+extern __inline unsigned int\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_incsspd (unsigned int __B)\n+_get_ssp (void)\n {\n-  __builtin_ia32_incsspd (__B);\n+  return __builtin_ia32_rdsspd ();\n }\n+#endif\n \n-#ifdef __x86_64__\n extern __inline void\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_incsspq (unsigned long long __B)\n+_inc_ssp (unsigned int __B)\n {\n-  __builtin_ia32_incsspq (__B);\n-}\n+#ifdef __x86_64__\n+  __builtin_ia32_incsspq ((unsigned long long) __B);\n+#else\n+  __builtin_ia32_incsspd (__B);\n #endif\n+}\n \n extern __inline void\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "08360d23cbbba889f7895574c33d2a84d4794a21", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2", "patch": "@@ -192,6 +192,7 @@ DEF_POINTER_TYPE (PCV64QI, V64QI, CONST)\n DEF_FUNCTION_TYPE (FLOAT128)\n DEF_FUNCTION_TYPE (UINT64)\n DEF_FUNCTION_TYPE (UNSIGNED)\n+DEF_FUNCTION_TYPE (UINT)\n DEF_FUNCTION_TYPE (USHORT)\n DEF_FUNCTION_TYPE (INT)\n DEF_FUNCTION_TYPE (VOID)"}, {"sha": "a48019499bd2166a7cd3ba9ce0d45febc9ab5b87", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2", "patch": "@@ -3043,7 +3043,7 @@ BDESC (OPTION_MASK_ISA_SHSTK, CODE_FOR_clrssbsy, \"__builtin_ia32_clrssbsy\", IX86\n BDESC_END (CET, CET_NORMAL)\n \n BDESC_FIRST (cet_rdssp, CET_NORMAL,\n-       OPTION_MASK_ISA_SHSTK, CODE_FOR_rdsspsi, \"__builtin_ia32_rdsspd\", IX86_BUILTIN_RDSSPD, UNKNOWN, (int) UINT_FTYPE_UINT)\n-BDESC (OPTION_MASK_ISA_SHSTK | OPTION_MASK_ISA_64BIT, CODE_FOR_rdsspdi, \"__builtin_ia32_rdsspq\", IX86_BUILTIN_RDSSPQ, UNKNOWN, (int) UINT64_FTYPE_UINT64)\n+       OPTION_MASK_ISA_SHSTK, CODE_FOR_rdsspsi, \"__builtin_ia32_rdsspd\", IX86_BUILTIN_RDSSPD, UNKNOWN, (int) UINT_FTYPE_VOID)\n+BDESC (OPTION_MASK_ISA_SHSTK | OPTION_MASK_ISA_64BIT, CODE_FOR_rdsspdi, \"__builtin_ia32_rdsspq\", IX86_BUILTIN_RDSSPQ, UNKNOWN, (int) UINT64_FTYPE_VOID)\n \n BDESC_END (CET_NORMAL, MAX)"}, {"sha": "fa31f94d3e092a0af47d7dacc96ae2a31bc885a6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2", "patch": "@@ -35708,6 +35708,7 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n     case INT_FTYPE_VOID:\n     case USHORT_FTYPE_VOID:\n     case UINT64_FTYPE_VOID:\n+    case UINT_FTYPE_VOID:\n     case UNSIGNED_FTYPE_VOID:\n       nargs = 0;\n       klass = load;\n@@ -38497,7 +38498,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       && fcode <= IX86_BUILTIN__BDESC_CET_NORMAL_LAST)\n     {\n       i = fcode - IX86_BUILTIN__BDESC_CET_NORMAL_FIRST;\n-      return ix86_expand_args_builtin (bdesc_cet_rdssp + i, exp,\n+      return ix86_expand_special_args_builtin (bdesc_cet_rdssp + i, exp,\n \t\t\t\t       target);\n     }\n "}, {"sha": "3998053a50644d000d54576f98525ceafab1cd48", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2", "patch": "@@ -18391,8 +18391,8 @@\n       reg_ssp = gen_reg_rtx (word_mode);\n       emit_insn (gen_rtx_SET (reg_ssp, const0_rtx));\n       emit_insn ((word_mode == SImode)\n-\t\t ? gen_rdsspsi (reg_ssp, reg_ssp)\n-\t\t : gen_rdsspdi (reg_ssp, reg_ssp));\n+\t\t ? gen_rdsspsi (reg_ssp)\n+\t\t : gen_rdsspdi (reg_ssp));\n       emit_move_insn (mem, reg_ssp);\n     }\n   DONE;\n@@ -18437,8 +18437,8 @@\n       reg_ssp = gen_reg_rtx (word_mode);\n       emit_insn (gen_rtx_SET (reg_ssp, const0_rtx));\n       emit_insn ((word_mode == SImode)\n-\t\t ? gen_rdsspsi (reg_ssp, reg_ssp)\n-\t\t : gen_rdsspdi (reg_ssp, reg_ssp));\n+\t\t ? gen_rdsspsi (reg_ssp)\n+\t\t : gen_rdsspdi (reg_ssp));\n       mem_buf = gen_rtx_MEM (word_mode,\n \t\t\t     plus_constant (Pmode, operands[0],\n \t\t\t\t\t    3 * GET_MODE_SIZE (ptr_mode)));\n@@ -20167,12 +20167,10 @@\n ;; CET instructions\n (define_insn \"rdssp<mode>\"\n   [(set (match_operand:SWI48x 0 \"register_operand\" \"=r\")\n-\t(unspec_volatile:SWI48x\n-\t  [(match_operand:SWI48x 1 \"register_operand\" \"0\")]\n-\t  UNSPECV_NOP_RDSSP))]\n+\t(unspec_volatile:SWI48x [(const_int 0)] UNSPECV_NOP_RDSSP))]\n   \"TARGET_SHSTK\"\n-  \"rdssp<mskmodesuffix>\\t%0\"\n-  [(set_attr \"length\" \"4\")\n+  \"xor{l}\\t%k0, %k0\\n\\trdssp<mskmodesuffix>\\t%0\"\n+  [(set_attr \"length\" \"6\")\n    (set_attr \"type\" \"other\")])\n \n (define_insn \"incssp<mode>\""}, {"sha": "5c3c5ec2dc84413e65f416c6332ebf5dbbf91250", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 56, "deletions": 6, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2", "patch": "@@ -12461,6 +12461,7 @@ instructions, but allow the compiler to schedule those calls.\n * TILEPro Built-in Functions::\n * x86 Built-in Functions::\n * x86 transactional memory intrinsics::\n+* x86 control-flow protection intrinsics::\n @end menu\n \n @node AArch64 Built-in Functions\n@@ -21772,13 +21773,17 @@ void __builtin_ia32_wrpkru (unsigned int)\n unsigned int __builtin_ia32_rdpkru ()\n @end smallexample\n \n-The following built-in functions are available when @option{-mcet} is used.\n-They are used to support Intel Control-flow Enforcment Technology (CET).\n-Each built-in function generates the  machine instruction that is part of the\n-function's name.\n+The following built-in functions are available when @option{-mcet} or\n+@option{-mshstk} option is used.  They support shadow stack\n+machine instructions from Intel Control-flow Enforcement Technology (CET).\n+Each built-in function generates the  machine instruction that is part\n+of the function's name.  These are the internal low-level functions.\n+Normally the functions in @ref{x86 control-flow protection intrinsics}\n+should be used instead.\n+\n @smallexample\n-unsigned int __builtin_ia32_rdsspd (unsigned int)\n-unsigned long long __builtin_ia32_rdsspq (unsigned long long)\n+unsigned int __builtin_ia32_rdsspd (void)\n+unsigned long long __builtin_ia32_rdsspq (void)\n void __builtin_ia32_incsspd (unsigned int)\n void __builtin_ia32_incsspq (unsigned long long)\n void __builtin_ia32_saveprevssp(void);\n@@ -21885,6 +21890,51 @@ else\n Note that, in most cases, the transactional and non-transactional code\n must synchronize together to ensure consistency.\n \n+@node x86 control-flow protection intrinsics\n+@subsection x86 Control-Flow Protection Intrinsics\n+\n+@deftypefn {CET Function} {ret_type} _get_ssp (void)\n+Get the current value of shadow stack pointer if shadow stack support\n+from Intel CET is enabled in the hardware or @code{0} otherwise.\n+The @code{ret_type} is @code{unsigned long long} for 64-bit targets \n+and @code{unsigned int} for 32-bit targets.\n+@end deftypefn\n+\n+@deftypefn {CET Function} void _inc_ssp (unsigned int)\n+Increment the current shadow stack pointer by the size specified by the\n+function argument.  The argument is masked to a byte value for security\n+reasons, so to increment by more than 255 bytes you must call the function\n+multiple times.\n+@end deftypefn\n+\n+The shadow stack unwind code looks like:\n+\n+@smallexample\n+#include <immintrin.h>\n+\n+/* Unwind the shadow stack for EH.  */\n+#define _Unwind_Frames_Extra(x)       \\\n+  do                                  \\\n+    @{                                \\\n+      _Unwind_Word ssp = _get_ssp (); \\\n+      if (ssp != 0)                   \\\n+        @{                            \\\n+          _Unwind_Word tmp = (x);     \\\n+          while (tmp > 255)           \\\n+            @{                        \\\n+              _inc_ssp (tmp);         \\\n+              tmp -= 255;             \\\n+            @}                        \\\n+          _inc_ssp (tmp);             \\\n+        @}                            \\\n+    @}                                \\\n+    while (0)\n+@end smallexample\n+\n+@noindent\n+This code runs unconditionally on all 64-bit processors.  For 32-bit\n+processors the code runs on those that support multi-byte NOP instructions.\n+\n @node Target Format Checks\n @section Format Checks Specific to Particular Target Machines\n "}, {"sha": "51aeba332d3e0d37c594883ef18c2c8dbef5205e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2", "patch": "@@ -1,3 +1,12 @@\n+2018-02-14  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n+\n+\tPR target/84239\n+\t* gcc.target/i386/cet-intrin-3.c: Use new _get_ssp and\n+\t_inc_ssp intrinsics.\n+\t* gcc.target/i386/cet-intrin-4.c: Likewise.\n+\t* gcc.target/i386/cet-rdssp-1.c: Remove argument from\n+\t__builtin_ia32_rdssp[d|q].\n+\n 2018-02-14  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR tree-optimization/84357"}, {"sha": "b98c1e928d5cec691d3bcb1086546cb1c075ecdb", "filename": "gcc/testsuite/gcc.target/i386/cet-intrin-3.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-3.c?ref=f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2", "patch": "@@ -10,24 +10,22 @@\n \n unsigned int f1 ()\n {\n-  unsigned int x = 0;\n-  return _rdsspd (x);\n+  return _get_ssp ();\n }\n \n void f3 (unsigned int _a)\n {\n-  _incsspd (_a);\n+  _inc_ssp (_a);\n }\n \n #ifdef __x86_64__\n unsigned long long f2 ()\n {\n-  unsigned long long x = 0;\n-  return _rdsspq (x);\n+  return _get_ssp ();\n }\n \n void f4 (unsigned int _a)\n {\n-  _incsspq (_a);\n+  _inc_ssp (_a);\n }\n #endif"}, {"sha": "86957b2eebed0e7863f97aa1fd6105bd73f1ba48", "filename": "gcc/testsuite/gcc.target/i386/cet-intrin-4.c", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-4.c?ref=f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2", "patch": "@@ -5,27 +5,4 @@\n /* { dg-final { scan-assembler \"incssp\\[dq]\\[ \\t]+(%|)\\[re]di\" { target { ! ia32 } } } } */\n \n #include <immintrin.h>\n-\n-unsigned int f1 ()\n-{\n-  unsigned int x = 0;\n-  return _rdsspd (x);\n-}\n-\n-void f3 (unsigned int _a)\n-{\n-  _incsspd (_a);\n-}\n-\n-#ifdef __x86_64__\n-unsigned long long f2 ()\n-{\n-  unsigned long long x = 0;\n-  return _rdsspq (x);\n-}\n-\n-void f4 (unsigned int _a)\n-{\n-  _incsspq (_a);\n-}\n-#endif\n+#include \"cet-intrin-3.c\""}, {"sha": "6cd24f63384b943851a6e87fbda1d32ad38132f6", "filename": "gcc/testsuite/gcc.target/i386/cet-rdssp-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-rdssp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-rdssp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-rdssp-1.c?ref=f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2", "patch": "@@ -5,18 +5,18 @@ void _exit(int status) __attribute__ ((__noreturn__));\n \n #ifdef __x86_64__\n # define incssp(x) __builtin_ia32_incsspq (x)\n-# define rdssp(x) __builtin_ia32_rdsspq (x)\n+# define rdssp() __builtin_ia32_rdsspq ()\n #else\n # define incssp(x) __builtin_ia32_incsspd (x)\n-# define rdssp(x) __builtin_ia32_rdsspd (x)\n+# define rdssp() __builtin_ia32_rdsspd ()\n #endif\n \n static void\n __attribute__ ((noinline, noclone))\n test (unsigned long frames)\n {\n-  unsigned long ssp = 0;\n-  ssp = rdssp (ssp);\n+  unsigned long ssp;\n+  ssp = rdssp ();\n   if (ssp != 0)\n     {\n       unsigned long tmp = frames;"}, {"sha": "692773d7d2db0677e8bbb73faa7fd3ccd1da7134", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2", "patch": "@@ -1,3 +1,9 @@\n+2018-02-08  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n+\n+\tPR target/84239\n+\t* config/i386/shadow-stack-unwind.hi (_Unwind_Frames_Extra):\n+\tUse new _get_ssp and _inc_ssp intrinsics.\n+\n 2018-02-02  Julia Koval  <julia.koval@intel.com>\n \n \t* config/i386/cpuinfo.h (processor_subtypes): Add INTEL_COREI7_ICELAKE."}, {"sha": "416e061dd46d5754661469b9496379060018a4c1", "filename": "libgcc/config/i386/shadow-stack-unwind.h", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/libgcc%2Fconfig%2Fi386%2Fshadow-stack-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2/libgcc%2Fconfig%2Fi386%2Fshadow-stack-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fshadow-stack-unwind.h?ref=f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2", "patch": "@@ -22,30 +22,23 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n-#ifdef __x86_64__\n-# define incssp(x) __builtin_ia32_incsspq ((x))\n-# define rdssp(x) __builtin_ia32_rdsspq (x)\n-#else\n-# define incssp(x) __builtin_ia32_incsspd ((x))\n-# define rdssp(x) __builtin_ia32_rdsspd (x)\n-#endif\n+#include <x86intrin.h>\n \n /* Unwind the shadow stack for EH.  */\n #undef _Unwind_Frames_Extra\n #define _Unwind_Frames_Extra(x)\t\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      unsigned long ssp = 0;\t\t\t\\\n-      ssp = rdssp (ssp);\t\t\t\\\n+      _Unwind_Word ssp = _get_ssp ();\t\t\\\n       if (ssp != 0)\t\t\t\t\\\n \t{\t\t\t\t\t\\\n-\t  unsigned long tmp = (x);\t\t\\\n+\t  _Unwind_Word tmp = (x);\t\t\\\n \t  while (tmp > 255)\t\t\t\\\n \t    {\t\t\t\t\t\\\n-\t      incssp (tmp);\t\t\t\\\n+\t      _inc_ssp (tmp);\t\t\t\\\n \t      tmp -= 255;\t\t\t\\\n \t    }\t\t\t\t\t\\\n-\t  incssp (tmp);\t\t\t\t\\\n+\t  _inc_ssp (tmp);\t\t\t\\\n \t}\t\t\t\t\t\\\n     }\t\t\t\t\t\t\\\n     while (0)"}]}