{"sha": "8a740f0731816fc7bab83324010938a34c7804cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE3NDBmMDczMTgxNmZjN2JhYjgzMzI0MDEwOTM4YTM0Yzc4MDRjZg==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2012-10-21T03:16:47Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2012-10-21T03:16:47Z"}, "message": "crti.S: Mark program and data addresses using PRELD.\n\n\t* config/mmix/crti.S: Mark program and data addresses using PRELD.\n\tRemove typo'd and unnecessary alignment-LOC for .data.  Remove\n\tno-longer-needed LDBU insns.\n\nFrom-SVN: r192646", "tree": {"sha": "3b0f5112ffd69b7a3c3cabafd1ef37dc6cc32ce0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b0f5112ffd69b7a3c3cabafd1ef37dc6cc32ce0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a740f0731816fc7bab83324010938a34c7804cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a740f0731816fc7bab83324010938a34c7804cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a740f0731816fc7bab83324010938a34c7804cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a740f0731816fc7bab83324010938a34c7804cf/comments", "author": null, "committer": null, "parents": [{"sha": "ada750d42e10cebdaa18d7de25a9ae478a6478db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ada750d42e10cebdaa18d7de25a9ae478a6478db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ada750d42e10cebdaa18d7de25a9ae478a6478db"}], "stats": {"total": 60, "additions": 51, "deletions": 9}, "files": [{"sha": "27c883ff8518164893add14222885de4fe52c3f3", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a740f0731816fc7bab83324010938a34c7804cf/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a740f0731816fc7bab83324010938a34c7804cf/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=8a740f0731816fc7bab83324010938a34c7804cf", "patch": "@@ -1,3 +1,9 @@\n+2012-10-21  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* config/mmix/crti.S: Mark program and data addresses using PRELD.\n+\tRemove typo'd and unnecessary alignment-LOC for .data.  Remove\n+\tno-longer-needed LDBU insns.\n+\n 2012-10-18  Sebastian Huber <sebastian.huber@embedded-brains.de>\n \n \t* config.host"}, {"sha": "32e285852d1451e80bcac455bdde17dafbc8c82c", "filename": "libgcc/config/mmix/crti.S", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a740f0731816fc7bab83324010938a34c7804cf/libgcc%2Fconfig%2Fmmix%2Fcrti.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a740f0731816fc7bab83324010938a34c7804cf/libgcc%2Fconfig%2Fmmix%2Fcrti.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmmix%2Fcrti.S?ref=8a740f0731816fc7bab83324010938a34c7804cf", "patch": "@@ -35,37 +35,73 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n % respectively, so the compiler can switch between them pretending they're\n % segments.\n \n-% This little treasure is here so the 32 lowest address bits of user data\n-% will not be zero.  Because of truncation, that would cause testcase\n-% gcc.c-torture/execute/980701-1.c to incorrectly fail.\n+% This little treasure (some contents) is required so the 32 lowest\n+% address bits of user data will not be zero.  Because of truncation,\n+% that would cause testcase gcc.c-torture/execute/980701-1.c to\n+% incorrectly fail.\n \n \t.data\t! mmixal:= 8H LOC Data_Segment\n \t.p2align 3\n-\tLOC @+(8-@)@7\n-\tOCTA 2009\n+dstart\tOCTA 2009\n \n \t.text\t! mmixal:= 9H LOC 8B; LOC #100\n \t.global Main\n \n % The __Stack_start symbol is provided by the link script.\n stackpp\tOCTA __Stack_start\n+crtstxt\tOCTA _init\t% Assumed to be the lowest executed address.\n+\tOCTA __etext\t% Assumed to be beyond the highest executed address.\n+\n+crtsdat\tOCTA dstart\t% Assumed to be the lowest accessed address.\n+\tOCTA _end\t% Assumed to be beyond the highest accessed address.\n \n % \"Main\" is the magic symbol the simulator jumps to.  We want to go\n % on to \"main\".\n % We need to set rG explicitly to avoid hard-to-debug situations.\n Main\tSETL\t$255,32\n \tPUT\trG,$255\n \n+% Make sure we have valid memory for addresses in .text and .data (and\n+% .bss, but we include this in .data), for the benefit of mmo-using\n+% simulators that require validation of addresses for which contents\n+% is not present.  Due to its implicit-zero nature, zeros in contents\n+% may be left out in the mmo format, but we don't know the boundaries\n+% of those zero-chunks; for mmo files from binutils, they correspond\n+% to the beginning and end of sections in objects before linking.  We\n+% validate the contents by executing PRELD (0; one byte) on each\n+% 2048-byte-boundary of our .text .data, and we assume this size\n+% matches the magic lowest-denominator chunk-size for all\n+% validation-requiring simulators.  The effect of the PRELD (any size)\n+% is assumed to be the same as initial loading of the contents, as\n+% long as the PRELD happens before the first PUSHJ/PUSHGO.  If it\n+% happens after that, we'll need to distinguish between\n+% access-for-execution and read/write access.\n+\n+\tGETA\t$255,crtstxt\n+\tLDOU\t$2,$255,0\n+\tANDNL\t$2,#7ff\t\t% Align the start at a 2048-boundary.\n+\tLDOU\t$3,$255,8\n+\tSETL\t$4,2048\n+0H\tPRELD\t0,$2,0\n+\tADDU\t$2,$2,$4\n+\tCMP\t$255,$2,$3\n+\tBN\t$255,0B\n+\n+\tGETA\t$255,crtsdat\n+\tLDOU\t$2,$255,0\n+\tANDNL\t$2,#7ff\n+\tLDOU\t$3,$255,8\n+0H\tPRELD\t0,$2,0\n+\tADDU\t$2,$2,$4\n+\tCMP\t$255,$2,$3\n+\tBN\t$255,0B\n+\n % Initialize the stack pointer.  It is supposedly made a global\n % zero-initialized (allowed to change) register in crtn.S; we use the\n % explicit number.\n \tGETA\t$255,stackpp\n \tLDOU\t$254,$255,0\n \n-% Make sure we get more than one mem, to simplify counting cycles.\n-\tLDBU\t$255,$1,0\n-\tLDBU\t$255,$1,1\n-\n \tPUSHJ\t$2,_init\n \n #ifdef __MMIX_ABI_GNU__"}]}