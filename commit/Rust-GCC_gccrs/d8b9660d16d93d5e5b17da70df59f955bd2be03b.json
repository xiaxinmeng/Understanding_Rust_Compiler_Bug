{"sha": "d8b9660d16d93d5e5b17da70df59f955bd2be03b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhiOTY2MGQxNmQ5M2Q1ZTViMTdkYTcwZGY1OWY5NTViZDJiZTAzYg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2005-06-16T08:34:11Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T08:34:11Z"}, "message": "checks.adb (Install_Null_Excluding_Check): Do not generate checks for an attribute reference that returns an access type.\n\n2005-06-14  Ed Schonberg  <schonberg@adacore.com>\n\n\t* checks.adb (Install_Null_Excluding_Check): Do not generate checks\n\tfor an attribute reference that returns an access type.\n\t(Apply_Discriminant_Check): No need for check if (designated) type has\n\tconstrained partial view.\n\t(Apply_Float_Conversion_Check): Generate a short-circuit expression for\n\tboth bound checks, rather than a conjunction.\n\t(Insert_Valid_Check): If the expression is an actual that is an indexed\n\tcomponent of a bit-packed array, force expansion of the packed element\n\treference, because it is specifically inhibited elsewhere.\n\nFrom-SVN: r101027", "tree": {"sha": "fab17be840846de47d1fc3eec7b9f748512f8a44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fab17be840846de47d1fc3eec7b9f748512f8a44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8b9660d16d93d5e5b17da70df59f955bd2be03b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8b9660d16d93d5e5b17da70df59f955bd2be03b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8b9660d16d93d5e5b17da70df59f955bd2be03b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8b9660d16d93d5e5b17da70df59f955bd2be03b/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "994037fc6c69f57bf0866e1d5de39adb08576e57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/994037fc6c69f57bf0866e1d5de39adb08576e57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/994037fc6c69f57bf0866e1d5de39adb08576e57"}], "stats": {"total": 56, "additions": 49, "deletions": 7}, "files": [{"sha": "f63b10dd5411419a21578699e6f45c3ee19abbb4", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 49, "deletions": 7, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b9660d16d93d5e5b17da70df59f955bd2be03b/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b9660d16d93d5e5b17da70df59f955bd2be03b/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=d8b9660d16d93d5e5b17da70df59f955bd2be03b", "patch": "@@ -29,6 +29,7 @@ with Debug;    use Debug;\n with Einfo;    use Einfo;\n with Errout;   use Errout;\n with Exp_Ch2;  use Exp_Ch2;\n+with Exp_Pakd; use Exp_Pakd;\n with Exp_Util; use Exp_Util;\n with Elists;   use Elists;\n with Eval_Fat; use Eval_Fat;\n@@ -989,7 +990,7 @@ package body Checks is\n \n       elsif Is_Array_Type (Typ) then\n \n-         --  A useful optimization: an aggregate with only an Others clause\n+         --  A useful optimization: an aggregate with only an others clause\n          --  always has the right bounds.\n \n          if Nkind (N) = N_Aggregate\n@@ -1117,10 +1118,10 @@ package body Checks is\n          return;\n       end if;\n \n-      --  No discriminant checks necessary for access when expression\n+      --  No discriminant checks necessary for an access when expression\n       --  is statically Null. This is not only an optimization, this is\n       --  fundamental because otherwise discriminant checks may be generated\n-      --  in init procs for types containing an access to a non-frozen yet\n+      --  in init procs for types containing an access to a not-yet-frozen\n       --  record, causing a deadly forward reference.\n \n       --  Also, if the expression is of an access type whose designated\n@@ -1157,6 +1158,14 @@ package body Checks is\n \n       if not Is_Constrained (T_Typ) then\n          return;\n+\n+      --  Ada 2005: nothing to do if the type is one for which there is a\n+      --  partial view that is constrained.\n+\n+      elsif Ada_Version >= Ada_05\n+        and then Has_Constrained_Partial_View (Base_Type (T_Typ))\n+      then\n+         return;\n       end if;\n \n       --  Nothing to do if the type is an Unchecked_Union\n@@ -1582,7 +1591,7 @@ package body Checks is\n \n       Insert_Action (Ck_Node,\n         Make_Raise_Constraint_Error (Loc,\n-          Condition => Make_Op_Not (Loc, Make_Op_And (Loc, Lo_Chk, Hi_Chk)),\n+          Condition => Make_Op_Not (Loc, Make_And_Then (Loc, Lo_Chk, Hi_Chk)),\n           Reason    => Reason));\n    end Apply_Float_Conversion_Check;\n \n@@ -4701,6 +4710,28 @@ package body Checks is\n                    Attribute_Name => Name_Valid)),\n            Reason => CE_Invalid_Data),\n          Suppress => All_Checks);\n+\n+      --  If the expression is a a reference to an element of a bit-packed\n+      --  array, it is rewritten as a renaming declaration. If the expression\n+      --  is an actual in a call, it has not been expanded, waiting for the\n+      --  proper point at which to do it. The same happens with renamings, so\n+      --  that we have to force the expansion now. This non-local complication\n+      --  is due to code in exp_ch2,adb, exp_ch4.adb and exp_ch6.adb.\n+\n+      if Is_Entity_Name (Exp)\n+        and then Nkind (Parent (Entity (Exp))) = N_Object_Renaming_Declaration\n+      then\n+         declare\n+            Old_Exp : constant Node_Id := Name (Parent (Entity (Exp)));\n+         begin\n+            if Nkind (Old_Exp) = N_Indexed_Component\n+              and then Is_Bit_Packed_Array (Etype (Prefix (Old_Exp)))\n+            then\n+               Expand_Packed_Element_Reference (Old_Exp);\n+            end if;\n+         end;\n+      end if;\n+\n       Validity_Checks_On := True;\n    end Insert_Valid_Check;\n \n@@ -4715,14 +4746,25 @@ package body Checks is\n    begin\n       pragma Assert (Is_Access_Type (Etyp));\n \n-      --  Don't need access check if: 1) we are analyzing a generic, 2) it is\n-      --  known to be non-null, or 3) the check was suppressed on the type\n+      --  Don't need access check if:\n+      --   1) we are analyzing a generic\n+      --   2) it is known to be non-null\n+      --   3) the check was suppressed on the type\n+      --   4) This is an attribute reference that returns an access type.\n \n       if Inside_A_Generic\n         or else Access_Checks_Suppressed (Etyp)\n       then\n          return;\n-\n+      elsif Nkind (N) = N_Attribute_Reference\n+        and then\n+         (Attribute_Name (N) = Name_Access\n+            or else\n+          Attribute_Name (N) = Name_Unchecked_Access\n+            or else\n+          Attribute_Name (N) = Name_Unrestricted_Access)\n+      then\n+         return;\n          --  Otherwise install access check\n \n       else"}]}