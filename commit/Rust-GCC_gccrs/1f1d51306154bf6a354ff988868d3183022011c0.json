{"sha": "1f1d51306154bf6a354ff988868d3183022011c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYxZDUxMzA2MTU0YmY2YTM1NGZmOTg4ODY4ZDMxODMwMjIwMTFjMA==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@apple.com", "date": "2007-03-06T00:48:47Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2007-03-06T00:48:47Z"}, "message": "c-common.c (targetcm): Add.\n\n\t* c-common.c (targetcm): Add.   \n\t* c-opts.c (c_common_handle_option): Handle language specific\n\ttarget options.\n\t* opts.c (handle_option): Verify language for target options, if\n\tany are given.\n\t* opth-gen.awk: Add CL_LANG_ALL.\n\t* target-def.h (TARGET_HANDLE_C_OPTION): Add.\n\t(TARGETCM_INITIALIZER): Add.\n\t* target.h (struct gcc_targetcm): Add.\n\t(targetcm): Add.\n\t* targhooks.c (default_handle_c_option): Add.\n\t* targhooks.h (default_handle_c_option): Add.\n\t* doc/tm.texi (TARGET_HANDLE_C_OPTION): Add.\n\n\t* config/darwin.opt (iframework): Add.\n\t* config/darwin.h (TARGET_HAS_TARGETCM): Add.\n\t* config/darwin-c.c (handle_c_option): Add.\n\t(TARGET_HANDLE_C_OPTION): Add.\n\t(targetcm): Add.\n\t* doc/invoke.texi (Darwin Options): Add -iframework.\n\nFrom-SVN: r122590", "tree": {"sha": "926625ccb9f896a1998fbb4c463fe5a2b9ccaf39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/926625ccb9f896a1998fbb4c463fe5a2b9ccaf39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f1d51306154bf6a354ff988868d3183022011c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f1d51306154bf6a354ff988868d3183022011c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f1d51306154bf6a354ff988868d3183022011c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f1d51306154bf6a354ff988868d3183022011c0/comments", "author": null, "committer": null, "parents": [{"sha": "201141278667c89ad246224f65e70764e58e819f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/201141278667c89ad246224f65e70764e58e819f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/201141278667c89ad246224f65e70764e58e819f"}], "stats": {"total": 138, "additions": 130, "deletions": 8}, "files": [{"sha": "7ebd9d3641990b2b2eeb6cb81871c20ebf03d442", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f1d51306154bf6a354ff988868d3183022011c0", "patch": "@@ -1,3 +1,26 @@\n+2007-03-05  Mike Stump  <mrs@apple.com>\n+\n+\t* c-common.c (targetcm): Add.   \n+\t* c-opts.c (c_common_handle_option): Handle language specific\n+\ttarget options.\n+\t* opts.c (handle_option): Verify language for target options, if\n+\tany are given.\n+\t* opth-gen.awk: Add CL_LANG_ALL.\n+\t* target-def.h (TARGET_HANDLE_C_OPTION): Add.\n+\t(TARGETCM_INITIALIZER): Add.\n+\t* target.h (struct gcc_targetcm): Add.\n+\t(targetcm): Add.\n+\t* targhooks.c (default_handle_c_option): Add.\n+\t* targhooks.h (default_handle_c_option): Add.\n+\t* doc/tm.texi (TARGET_HANDLE_C_OPTION): Add.\n+\n+\t* config/darwin.opt (iframework): Add.\n+\t* config/darwin.h (TARGET_HAS_TARGETCM): Add.\n+\t* config/darwin-c.c (handle_c_option): Add.\n+\t(TARGET_HANDLE_C_OPTION): Add.\n+\t(targetcm): Add.\n+\t* doc/invoke.texi (Darwin Options): Add -iframework.\n+\n 2007-03-05  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* convert.c (convert_to_integer): Fix nearbyint/rint -> *lrint"}, {"sha": "1a35af79ffaaa1a95783013e8a9b1dcb40da081b", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=1f1d51306154bf6a354ff988868d3183022011c0", "patch": "@@ -48,6 +48,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"opts.h\"\n #include \"real.h\"\n #include \"cgraph.h\"\n+#include \"target-def.h\"\n \n cpp_reader *parse_in;\t\t/* Declared in c-pragma.h.  */\n \n@@ -6926,4 +6927,8 @@ c_build_cdtor_fns (void)\n     }\n }\n \n+#ifndef TARGET_HAS_TARGETCM\n+struct gcc_targetcm targetcm = TARGETCM_INITIALIZER;\n+#endif\n+\n #include \"gt-c-common.h\""}, {"sha": "bddbaad9d7f69d48e25ff4210c86c403024ca799", "filename": "gcc/c-opts.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=1f1d51306154bf6a354ff988868d3183022011c0", "patch": "@@ -39,6 +39,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"opts.h\"\n #include \"options.h\"\n #include \"mkdeps.h\"\n+#include \"target.h\"\n \n #ifndef DOLLARS_IN_IDENTIFIERS\n # define DOLLARS_IN_IDENTIFIERS true\n@@ -278,7 +279,12 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n     {\n     default:\n       if (cl_options[code].flags & (CL_C | CL_CXX | CL_ObjC | CL_ObjCXX))\n-\tbreak;\n+\t{\n+\t  if ((option->flags & CL_TARGET)\n+\t      && ! targetcm.handle_c_option (scode, arg, value))\n+\t    result = 0;\n+\t  break;\n+\t}\n #ifdef CL_Fortran\n       if (lang_fortran && (cl_options[code].flags & (CL_Fortran)))\n \tbreak;"}, {"sha": "dc03a9d96be4d7a36665868e4bf6215da24990ab", "filename": "gcc/config/darwin-c.c", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Fconfig%2Fdarwin-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Fconfig%2Fdarwin-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-c.c?ref=1f1d51306154bf6a354ff988868d3183022011c0", "patch": "@@ -34,6 +34,8 @@ Boston, MA 02110-1301, USA.  */\n #include \"tm_p.h\"\n #include \"cppdefault.h\"\n #include \"prefix.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n /* Pragmas.  */\n \n@@ -42,13 +44,6 @@ Boston, MA 02110-1301, USA.  */\n \n static bool using_frameworks = false;\n \n-/* Maintain a small stack of alignments.  This is similar to pragma\n-   pack's stack, but simpler.  */\n-\n-static void push_field_alignment (int);\n-static void pop_field_alignment (void);\n-static const char *find_subframework_file (const char *, const char *);\n-static void add_system_framework_path (char *);\n static const char *find_subframework_header (cpp_reader *pfile, const char *header,\n \t\t\t\t\t     cpp_dir **dirp);\n \n@@ -60,6 +55,9 @@ typedef struct align_stack\n \n static struct align_stack * field_align_stack = NULL;\n \n+/* Maintain a small stack of alignments.  This is similar to pragma\n+   pack's stack, but simpler.  */\n+\n static void\n push_field_alignment (int bit_alignment)\n {\n@@ -619,3 +617,31 @@ darwin_cpp_builtins (cpp_reader *pfile)\n   builtin_define_with_value (\"__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__\",\n \t\t\t     version_as_macro(), false);\n }\n+\n+/* Handle C family front-end options.  */\n+\n+static bool\n+handle_c_option (size_t code,\n+\t\t const char *arg,\n+\t\t int value ATTRIBUTE_UNUSED)\n+{\n+  switch (code)\n+    {\n+    default:\n+      /* Unrecognized options that we said we'd handle turn into\n+\t errors if not listed here.  */\n+      return false;\n+\n+    case OPT_iframework:\n+      add_system_framework_path (xstrdup (arg));\n+      break;\n+    }\n+\n+  /* We recognized the option.  */\n+  return true;\n+}\n+\n+#undef TARGET_HANDLE_C_OPTION\n+#define TARGET_HANDLE_C_OPTION handle_c_option\n+\n+struct gcc_targetcm targetcm = TARGETCM_INITIALIZER;"}, {"sha": "3d93399531323b11321cc61efdb8df61f9609bd0", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=1f1d51306154bf6a354ff988868d3183022011c0", "patch": "@@ -980,4 +980,6 @@ extern int flag_mkernel;\n extern int flag_apple_kext;\n #define TARGET_KEXTABI flag_apple_kext\n \n+#define TARGET_HAS_TARGETCM 1\n+\n #endif /* CONFIG_DARWIN_H */"}, {"sha": "b27b3db75caac5cee03358719122ff82475c5573", "filename": "gcc/config/darwin.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Fconfig%2Fdarwin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Fconfig%2Fdarwin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.opt?ref=1f1d51306154bf6a354ff988868d3183022011c0", "patch": "@@ -42,3 +42,7 @@ Generate code for darwin loadable kernel extensions\n mkernel\n Target Report Var(flag_mkernel)\n Generate code for the kernel or loadable kernel extensions\n+\n+iframework\n+Target RejectNegative C ObjC C++ ObjC++ Joined Separate \n+-iframework <dir>\tAdd <dir> to the end of the system framework include path"}, {"sha": "3d5c06ce3cf0977976edd2ef867d93a7d49c5e3e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1f1d51306154bf6a354ff988868d3183022011c0", "patch": "@@ -462,6 +462,7 @@ Objective-C and Objective-C++ Dialects}.\n -dynamic  -dynamiclib  -exported_symbols_list @gol\n -filelist  -flat_namespace  -force_cpusubtype_ALL @gol\n -force_flat_namespace  -headerpad_max_install_names @gol\n+-iframework @gol\n -image_base  -init  -install_name  -keep_private_externs @gol\n -multi_module  -multiply_defined  -multiply_defined_unused @gol\n -noall_load   -no_dead_strip_inits_and_terms @gol\n@@ -8463,6 +8464,14 @@ in @samp{\"/System/Library/Frameworks\"} and\n the name of the framework and header.h is found in the\n @samp{\"PrivateHeaders\"} or @samp{\"Headers\"} directory.\n \n+@item -iframework@var{dir}\n+@opindex iframework\n+Like @option{-F} except the directory is a treated as a system\n+directory.  The main difference between this @option{-iframework} and\n+@option{-F} is that with @option{-iframework} the compiler does not\n+warn about constructs contained within header files found via\n+@var{dir}.  This option is valid only for the C family of languages.\n+\n @item -gused\n @opindex -gused\n Emit debugging information for symbols that are used.  For STABS"}, {"sha": "c5920d09f5166982054da581a209be56add9355c", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=1f1d51306154bf6a354ff988868d3183022011c0", "patch": "@@ -773,6 +773,19 @@ argument.  Otherwise @var{value} is 1 if the positive form of the\n option was used and 0 if the ``no-'' form was.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_HANDLE_C_OPTION (size_t @var{code}, const char *@var{arg}, int @var{value})\n+This target hook is called whenever the user specifies one of the\n+target-specific C language family options described by the @file{.opt}\n+definition files(@pxref{Options}).  It has the opportunity to do some\n+option-specific processing and should return true if the option is\n+valid.  The default definition does nothing but return false.\n+\n+In general, you should use @code{TARGET_HANDLE_OPTION} to handle\n+options.  However, if processing an option requires routines that are\n+only available in the C (and related language) front ends, then you\n+should use @code{TARGET_HANDLE_C_OPTION} instead.\n+@end deftypefn\n+\n @defmac TARGET_VERSION\n This macro is a C statement to print on @code{stderr} a string\n describing the particular machine description choice.  Every machine"}, {"sha": "97abcf06b7a6ead19b99acb9605e61707d7ad2e2", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=1f1d51306154bf6a354ff988868d3183022011c0", "patch": "@@ -139,6 +139,7 @@ for (i = 0; i < n_langs; i++) {\n \ts = substr(\"            \", length (macros[i]))\n \tprint \"#define \" macros[i] s \" (1 << \" i \")\"\n     }\n+print \"#define CL_LANG_ALL   ((1 << \" n_langs \") - 1)\"\n \n print \"\"\n print \"enum opt_code\""}, {"sha": "d3aea98ce98693c6e715c36fade7e290c36d830d", "filename": "gcc/opts.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=1f1d51306154bf6a354ff988868d3183022011c0", "patch": "@@ -268,6 +268,15 @@ handle_option (const char **argv, unsigned int lang_mask)\n       complain_wrong_lang (argv[0], option, lang_mask);\n       goto done;\n     }\n+  else if ((option->flags & CL_TARGET)\n+\t   && (option->flags & CL_LANG_ALL)\n+\t   && !(option->flags & lang_mask))\n+    {\n+      /* Complain for target flag language mismatches if any languages\n+\t are specified.  */\n+      complain_wrong_lang (argv[0], option, lang_mask);\n+      goto done;\n+    }\n \n   if (arg == NULL && (option->flags & (CL_JOINED | CL_SEPARATE)))\n     {"}, {"sha": "fb9af5a576abc93166827bc66f786f92b744d59a", "filename": "gcc/target-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=1f1d51306154bf6a354ff988868d3183022011c0", "patch": "@@ -730,5 +730,8 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n   TARGET_ARM_EABI_UNWINDER\t\t\t\\\n }\n \n+#define TARGET_HANDLE_C_OPTION default_handle_c_option\n+#define TARGETCM_INITIALIZER { TARGET_HANDLE_C_OPTION }\n+\n #include \"hooks.h\"\n #include \"targhooks.h\""}, {"sha": "029d1836d53d327dee4a18680e0413155964fb12", "filename": "gcc/target.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=1f1d51306154bf6a354ff988868d3183022011c0", "patch": "@@ -892,4 +892,16 @@ struct gcc_target\n \n extern struct gcc_target targetm;\n \n+struct gcc_targetcm {\n+  /* Handle target switch CODE (an OPT_* value).  ARG is the argument\n+     passed to the switch; it is NULL if no argument was.  VALUE is the\n+     value of ARG if CODE specifies a UInteger option, otherwise it is\n+     1 if the positive form of the switch was used and 0 if the negative\n+     form was.  Return true if the switch was valid.  */\n+  bool (*handle_c_option) (size_t code, const char *arg, int value);\n+};\n+\n+/* Each target can provide their own.  */\n+extern struct gcc_targetcm targetcm;\n+\n #endif /* GCC_TARGET_H */"}, {"sha": "f1e4637c0bbd18f56c3f297bc1822742e7dd44d9", "filename": "gcc/targhooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=1f1d51306154bf6a354ff988868d3183022011c0", "patch": "@@ -614,4 +614,12 @@ default_narrow_bitfield (void)\n   return !STRICT_ALIGNMENT;\n }\n \n+bool\n+default_handle_c_option (size_t code ATTRIBUTE_UNUSED,\n+\t\t\t const char *arg ATTRIBUTE_UNUSED,\n+\t\t\t int value ATTRIBUTE_UNUSED)\n+{\n+  return false;\n+}\n+\n #include \"gt-targhooks.h\""}, {"sha": "33b534803e083cd84edf9f051ded54c46f80b364", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f1d51306154bf6a354ff988868d3183022011c0/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=1f1d51306154bf6a354ff988868d3183022011c0", "patch": "@@ -82,3 +82,4 @@ extern enum reg_class default_secondary_reload (bool, rtx, enum reg_class,\n \t\t\t\t\t\tenum machine_mode,\n \t\t\t\t\t\tsecondary_reload_info *);\n extern void hook_void_bitmap (bitmap);\n+extern bool default_handle_c_option (size_t, const char *, int);"}]}