{"sha": "55bc61a75a68d1a8d1e4df170b4beef1020f1e55", "node_id": "C_kwDOANBUbNoAKDU1YmM2MWE3NWE2OGQxYThkMWU0ZGYxNzBiNGJlZWYxMDIwZjFlNTU", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@linux-m68k.org", "date": "2022-07-17T21:35:05Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@linux-m68k.org", "date": "2023-03-26T20:35:16Z"}, "message": "m68k: handle TLS access with offset\n\nThis reinstates FINAL_PRESCAN_INSN, and the calls in handle_move_double,\nso that access to TLS variables with offset are properly handled.\n\ngcc:\n\tPR target/106282\n\t* config/m68k/m68k.h (FINAL_PRESCAN_INSN): Define.\n\t* config/m68k/m68k.cc (m68k_final_prescan_insn): Define.\n\t(handle_move_double): Call it before handle_movsi.\n\t* config/m68k/m68k-protos.h: Declare it.\n\ngcc/testsuite:\n\tPR target/106282\n\t* gcc.target/m68k/tls-gd-off.c: New.\n\t* gcc.target/m68k/tls-ie-off.c: New.\n\t* gcc.target/m68k/tls-ld-off.c: New.\n\t* gcc.target/m68k/tls-ld-xtls-off.c: New.\n\t* gcc.target/m68k/tls-le-off.c: New.\n\t* gcc.target/m68k/tls-le-xtls-off.c: New.\n\t* gcc.target/m68k/tls-ld.c: Make pattern less strict.\n\t* gcc.target/m68k/tls-le.c: Likewise.", "tree": {"sha": "8b4e7d3aaae036339edc8cb961a04f79f752ad1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b4e7d3aaae036339edc8cb961a04f79f752ad1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55bc61a75a68d1a8d1e4df170b4beef1020f1e55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55bc61a75a68d1a8d1e4df170b4beef1020f1e55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55bc61a75a68d1a8d1e4df170b4beef1020f1e55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55bc61a75a68d1a8d1e4df170b4beef1020f1e55/comments", "author": {"login": "andreas-schwab", "id": 2175493, "node_id": "MDQ6VXNlcjIxNzU0OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2175493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreas-schwab", "html_url": "https://github.com/andreas-schwab", "followers_url": "https://api.github.com/users/andreas-schwab/followers", "following_url": "https://api.github.com/users/andreas-schwab/following{/other_user}", "gists_url": "https://api.github.com/users/andreas-schwab/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreas-schwab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreas-schwab/subscriptions", "organizations_url": "https://api.github.com/users/andreas-schwab/orgs", "repos_url": "https://api.github.com/users/andreas-schwab/repos", "events_url": "https://api.github.com/users/andreas-schwab/events{/privacy}", "received_events_url": "https://api.github.com/users/andreas-schwab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "andreas-schwab", "id": 2175493, "node_id": "MDQ6VXNlcjIxNzU0OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2175493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreas-schwab", "html_url": "https://github.com/andreas-schwab", "followers_url": "https://api.github.com/users/andreas-schwab/followers", "following_url": "https://api.github.com/users/andreas-schwab/following{/other_user}", "gists_url": "https://api.github.com/users/andreas-schwab/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreas-schwab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreas-schwab/subscriptions", "organizations_url": "https://api.github.com/users/andreas-schwab/orgs", "repos_url": "https://api.github.com/users/andreas-schwab/repos", "events_url": "https://api.github.com/users/andreas-schwab/events{/privacy}", "received_events_url": "https://api.github.com/users/andreas-schwab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07fc3491260e6b5d261433c977a4e069f5ab40c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07fc3491260e6b5d261433c977a4e069f5ab40c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07fc3491260e6b5d261433c977a4e069f5ab40c1"}], "stats": {"total": 105, "additions": 102, "deletions": 3}, "files": [{"sha": "724d446af93c75cecc33f2d062ecfa611fd78bf0", "filename": "gcc/config/m68k/m68k-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bc61a75a68d1a8d1e4df170b4beef1020f1e55/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bc61a75a68d1a8d1e4df170b4beef1020f1e55/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=55bc61a75a68d1a8d1e4df170b4beef1020f1e55", "patch": "@@ -84,6 +84,7 @@ extern int emit_move_sequence (rtx *, machine_mode, rtx);\n extern bool m68k_movem_pattern_p (rtx, rtx, HOST_WIDE_INT, bool);\n extern const char *m68k_output_movem (rtx *, rtx, HOST_WIDE_INT, bool);\n extern bool m68k_epilogue_uses (int);\n+extern void m68k_final_prescan_insn (rtx_insn *, rtx *, int);\n \n /* Functions from m68k.cc used in constraints.md.  */\n extern rtx m68k_unwrap_symbol (rtx, bool);"}, {"sha": "03db2b6a9369f5d8b5038e1ee61421bf7e98551e", "filename": "gcc/config/m68k/m68k.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bc61a75a68d1a8d1e4df170b4beef1020f1e55/gcc%2Fconfig%2Fm68k%2Fm68k.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bc61a75a68d1a8d1e4df170b4beef1020f1e55/gcc%2Fconfig%2Fm68k%2Fm68k.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.cc?ref=55bc61a75a68d1a8d1e4df170b4beef1020f1e55", "patch": "@@ -2550,6 +2550,18 @@ m68k_adjust_decorated_operand (rtx op)\n     }\n }\n \n+/* Prescan insn before outputing assembler for it.  */\n+\n+void\n+m68k_final_prescan_insn (rtx_insn *insn ATTRIBUTE_UNUSED,\n+\t\t\t rtx *operands, int n_operands)\n+{\n+  int i;\n+\n+  for (i = 0; i < n_operands; ++i)\n+    m68k_adjust_decorated_operand (operands[i]);\n+}\n+\n /* Move X to a register and add REG_EQUAL note pointing to ORIG.\n    If REG is non-null, use it; generate new pseudo otherwise.  */\n \n@@ -3658,6 +3670,7 @@ handle_move_double (rtx operands[2],\n \n   /* Normal case: do the two words, low-numbered first.  */\n \n+  m68k_final_prescan_insn (NULL, operands, 2);\n   handle_movsi (operands);\n \n   /* Do the middle one of the three words for long double */\n@@ -3668,6 +3681,7 @@ handle_move_double (rtx operands[2],\n       if (addreg1)\n \thandle_reg_adjust (addreg1, 4);\n \n+      m68k_final_prescan_insn (NULL, middlehalf, 2);\n       handle_movsi (middlehalf);\n     }\n \n@@ -3678,6 +3692,7 @@ handle_move_double (rtx operands[2],\n     handle_reg_adjust (addreg1, 4);\n \n   /* Do that word.  */\n+  m68k_final_prescan_insn (NULL, latehalf, 2);\n   handle_movsi (latehalf);\n \n   /* Undo the adds we just did.  */"}, {"sha": "450c380359c43ce6dc4db9fb625083bf531bd96c", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bc61a75a68d1a8d1e4df170b4beef1020f1e55/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bc61a75a68d1a8d1e4df170b4beef1020f1e55/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=55bc61a75a68d1a8d1e4df170b4beef1020f1e55", "patch": "@@ -837,6 +837,9 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n   fprintf ((FILE), \",%u\\n\", (int)(ROUNDED)))\n \n+#define FINAL_PRESCAN_INSN(INSN, OPVEC, NOPERANDS) \\\n+  m68k_final_prescan_insn (INSN, OPVEC, NOPERANDS)\n+\n /* On the 68000, we use several CODE characters:\n    '.' for dot needed in Motorola-style opcode names.\n    '-' for an operand pushing on the stack:"}, {"sha": "4af6128ae2708672e90d7dd97dfb77ca1bf2072f", "filename": "gcc/testsuite/gcc.target/m68k/tls-gd-off.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bc61a75a68d1a8d1e4df170b4beef1020f1e55/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-gd-off.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bc61a75a68d1a8d1e4df170b4beef1020f1e55/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-gd-off.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-gd-off.c?ref=55bc61a75a68d1a8d1e4df170b4beef1020f1e55", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { ! *-linux-* } } */\n+/* { dg-options \"-O2 -fpic\" } */\n+/* { dg-final { scan-assembler \"foo@TLSGD\\\\(\\%a5\\\\)\" } } */\n+/* { dg-final { scan-assembler \"bsr.l __tls_get_addr@PLTPC\" } } */\n+\n+extern int __thread foo[2];\n+\n+int *\n+bar (void)\n+{\n+  return foo + 1;\n+}"}, {"sha": "024cefe2ac53d728a5cdedfc14a4d593e3b109df", "filename": "gcc/testsuite/gcc.target/m68k/tls-ie-off.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bc61a75a68d1a8d1e4df170b4beef1020f1e55/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-ie-off.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bc61a75a68d1a8d1e4df170b4beef1020f1e55/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-ie-off.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-ie-off.c?ref=55bc61a75a68d1a8d1e4df170b4beef1020f1e55", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { ! *-linux-* } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler \"jsr __m68k_read_tp\" } } */\n+/* { dg-final { scan-assembler \"foo@TLSIE\\\\(\\%a5\\\\)\" } } */\n+\n+extern int __thread foo[2];\n+\n+int *\n+bar (void)\n+{\n+  return foo + 1;\n+}"}, {"sha": "bd0ee8d2c03e33ad68ff5173ec997d34d278e811", "filename": "gcc/testsuite/gcc.target/m68k/tls-ld-off.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bc61a75a68d1a8d1e4df170b4beef1020f1e55/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-ld-off.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bc61a75a68d1a8d1e4df170b4beef1020f1e55/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-ld-off.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-ld-off.c?ref=55bc61a75a68d1a8d1e4df170b4beef1020f1e55", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { ! *-linux-* } } */\n+/* { dg-options \"-O2 -fpic\" } */\n+/* { dg-final { scan-assembler \"foo@TLSLDM\\\\(%a5\\\\)\" } } */\n+/* { dg-final { scan-assembler \"bsr.l __tls_get_addr@PLTPC\" } } */\n+/* { dg-final { scan-assembler \"foo\\\\+4@TLSLDO,%a0\" } } */\n+\n+static int __thread foo[2];\n+\n+int *\n+bar (void)\n+{\n+  return foo + 1;\n+}"}, {"sha": "195682b22912614fcd1240f53fabc20e7c87eea9", "filename": "gcc/testsuite/gcc.target/m68k/tls-ld-xtls-off.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bc61a75a68d1a8d1e4df170b4beef1020f1e55/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-ld-xtls-off.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bc61a75a68d1a8d1e4df170b4beef1020f1e55/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-ld-xtls-off.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-ld-xtls-off.c?ref=55bc61a75a68d1a8d1e4df170b4beef1020f1e55", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { ! *-linux-* } } */\n+/* { dg-options \"-O2 -fpic -mxtls\" } */\n+/* { dg-final { scan-assembler \"foo@TLSLDM\\\\(\\%a5\\\\)\" } } */\n+/* { dg-final { scan-assembler \"bsr.l __tls_get_addr@PLTPC\" } } */\n+/* { dg-final { scan-assembler \"#foo\\\\+4@TLSLDO,\\%\\[ad\\]\\[0-7\\]\" } } */\n+\n+static int __thread foo[2];\n+\n+int *\n+bar (void)\n+{\n+  return foo + 1;\n+}"}, {"sha": "091a72a03b2713a059a09003970d2a9c8ef9f9e1", "filename": "gcc/testsuite/gcc.target/m68k/tls-ld.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bc61a75a68d1a8d1e4df170b4beef1020f1e55/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-ld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bc61a75a68d1a8d1e4df170b4beef1020f1e55/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-ld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-ld.c?ref=55bc61a75a68d1a8d1e4df170b4beef1020f1e55", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-skip-if \"\" { ! *-linux-* } } */\n /* { dg-options \"-O2 -fpic\" } */\n-/* { dg-final { scan-assembler \"foo@TLSLDM\\\\(\\%a5\\\\)\" } } */\n+/* { dg-final { scan-assembler \"foo@TLSLDM\\\\(%a5\\\\)\" } } */\n /* { dg-final { scan-assembler \"bsr.l __tls_get_addr@PLTPC\" } } */\n-/* { dg-final { scan-assembler \"lea \\\\(foo@TLSLDO,\\%a0\\\\)\" } } */\n+/* { dg-final { scan-assembler \"foo@TLSLDO,%a0\" } } */\n \n static int __thread foo;\n "}, {"sha": "c61ae08f07456d69376e4be3c936d4f58027158f", "filename": "gcc/testsuite/gcc.target/m68k/tls-le-off.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bc61a75a68d1a8d1e4df170b4beef1020f1e55/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-le-off.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bc61a75a68d1a8d1e4df170b4beef1020f1e55/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-le-off.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-le-off.c?ref=55bc61a75a68d1a8d1e4df170b4beef1020f1e55", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { ! *-linux-* } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler \"jsr __m68k_read_tp\" } } */\n+/* { dg-final { scan-assembler \"foo\\\\+4@TLSLE,%a0\" } } */\n+\n+static int __thread foo[2];\n+\n+int *\n+bar (void)\n+{\n+  return foo + 1;\n+}"}, {"sha": "0a9f47d8d0ea9a5b2f0789893f067e20cacd66e9", "filename": "gcc/testsuite/gcc.target/m68k/tls-le-xtls-off.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bc61a75a68d1a8d1e4df170b4beef1020f1e55/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-le-xtls-off.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bc61a75a68d1a8d1e4df170b4beef1020f1e55/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-le-xtls-off.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-le-xtls-off.c?ref=55bc61a75a68d1a8d1e4df170b4beef1020f1e55", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { ! *-linux-* } } */\n+/* { dg-options \"-O2 -mxtls\" } */\n+/* { dg-final { scan-assembler \"jsr __m68k_read_tp\" } } */\n+/* { dg-final { scan-assembler \"#foo\\\\+4@TLSLE,\\%\\[ad\\]\\[0-7\\]\" } } */\n+\n+static int __thread foo[2];\n+\n+int *\n+bar (void)\n+{\n+  return foo + 1;\n+}"}, {"sha": "7a9f215f44bdce4887a47a2b5d3179059e4f49e3", "filename": "gcc/testsuite/gcc.target/m68k/tls-le.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55bc61a75a68d1a8d1e4df170b4beef1020f1e55/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-le.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55bc61a75a68d1a8d1e4df170b4beef1020f1e55/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-le.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Ftls-le.c?ref=55bc61a75a68d1a8d1e4df170b4beef1020f1e55", "patch": "@@ -2,7 +2,7 @@\n /* { dg-skip-if \"\" { ! *-linux-* } } */\n /* { dg-options \"-O2\" } */\n /* { dg-final { scan-assembler \"jsr __m68k_read_tp\" } } */\n-/* { dg-final { scan-assembler \"lea \\\\(foo@TLSLE,\\%a0\\\\)\" } } */\n+/* { dg-final { scan-assembler \"foo@TLSLE,%a0\" } } */\n \n static int __thread foo;\n "}]}