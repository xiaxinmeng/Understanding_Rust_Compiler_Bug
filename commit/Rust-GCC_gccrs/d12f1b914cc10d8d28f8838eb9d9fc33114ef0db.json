{"sha": "d12f1b914cc10d8d28f8838eb9d9fc33114ef0db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDEyZjFiOTE0Y2MxMGQ4ZDI4Zjg4MzhlYjlkOWZjMzMxMTRlZjBkYg==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-02-10T16:30:05Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-02-10T16:30:05Z"}, "message": "gcc.target/cris/pr93372-1.c: New test.\n\nThis test was separated from the posted and approved patch named\n\"dbr: Filter-out TARGET_FLAGS_REGNUM from end_of_function_needs\"\nand applied: it doesn't fail yet.  It differs from the posted\nversion in that function \"g\" is commented-out; see the added\ncomment.", "tree": {"sha": "f67b98ec529d460bba0c88e738fd2a3556c6d8eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f67b98ec529d460bba0c88e738fd2a3556c6d8eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d12f1b914cc10d8d28f8838eb9d9fc33114ef0db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d12f1b914cc10d8d28f8838eb9d9fc33114ef0db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d12f1b914cc10d8d28f8838eb9d9fc33114ef0db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d12f1b914cc10d8d28f8838eb9d9fc33114ef0db/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcdd0aa872b16e99c39395358344b59f517c2558", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcdd0aa872b16e99c39395358344b59f517c2558", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcdd0aa872b16e99c39395358344b59f517c2558"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "b418065d698e42346d37554fd5a0ded9f730f12c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d12f1b914cc10d8d28f8838eb9d9fc33114ef0db/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d12f1b914cc10d8d28f8838eb9d9fc33114ef0db/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d12f1b914cc10d8d28f8838eb9d9fc33114ef0db", "patch": "@@ -2,6 +2,8 @@\n \n \t* gcc.target/cris/cris.exp (check_effective_target_cc0): New.\n \n+\t* gcc.target/cris/pr93372-1.c: New test.\n+\n 2020-02-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/91913"}, {"sha": "20aa65e8d59d352eb4e391112e5ec814da6abce5", "filename": "gcc/testsuite/gcc.target/cris/pr93372-1.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d12f1b914cc10d8d28f8838eb9d9fc33114ef0db/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d12f1b914cc10d8d28f8838eb9d9fc33114ef0db/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-1.c?ref=d12f1b914cc10d8d28f8838eb9d9fc33114ef0db", "patch": "@@ -0,0 +1,72 @@\n+/* Check that all more-or-less trivially fillable delayed-branch-slots\n+   are filled. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tnop\" } } */\n+\n+void *f(void **p)\n+{\n+  /* Supposedly the memory read finds its way into the \"ret\"\n+     delay-slot. */\n+  return *p;\n+}\n+\n+#if 0\n+/* Until the negative effects of g:897a73086b2 a.k.a. r10-6395\n+   a.k.a. \"One more fix for PR 91333 - suboptimal register allocation\n+   for inline asm\", which appears to have caused a \"nop\" (unfilled\n+   delay-slot) to appear for this function for CRIS-decc0rated (but not\n+   CRIS-cc0) and increasing one execution-path by one instruction (and\n+   the size of the whole function), it's left out.  It was but a mere\n+   attempt to expose the flaw better noticed with xlshrdi3.  It exposes\n+   a real issue, just less important.  FIXME: extract to separate test.  */\n+int g(int *x, int *y, char *v, int n)\n+{\n+  int z = *x;\n+  int w = *v + 31;\n+\n+  /* Two branch and two return slots, all filled. */\n+  if (z != 23 && z != n+1)\n+    return *x+*y+24+w;\n+  return *y+24+w;\n+}\n+#endif\n+\n+/* No problem with the two examples above, but with a more involved\n+   example, the epilogue contents matter (the condition-code register\n+   clobber was mistaken for a register that needed to be alive). */\n+\n+struct DWstruct {int low, high;};\n+typedef unsigned long long DItype;\n+typedef unsigned int USItype;\n+\n+typedef union\n+{\n+  struct DWstruct s;\n+  DItype ll;\n+} DWunion;\n+\n+unsigned long long\n+xlshrdi3 (DItype u, unsigned int b)\n+{\n+  if (b == 0)\n+    return u;\n+\n+  const DWunion uu = {.ll = u};\n+  const int bm = (4 * 8) - b;\n+  DWunion w;\n+\n+  if (bm <= 0)\n+    {\n+      w.s.high = 0;\n+      w.s.low = (USItype) uu.s.high >> -bm;\n+    }\n+  else\n+    {\n+      const USItype carries = (USItype) uu.s.high << bm;\n+      w.s.high = (USItype) uu.s.high >> b;\n+      w.s.low = ((USItype) uu.s.low >> b) | carries;\n+    }\n+\n+  return w.ll;\n+}"}]}