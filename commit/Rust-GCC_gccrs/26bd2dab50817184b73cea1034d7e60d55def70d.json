{"sha": "26bd2dab50817184b73cea1034d7e60d55def70d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZiZDJkYWI1MDgxNzE4NGI3M2NlYTEwMzRkN2U2MGQ1NWRlZjcwZA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-10-26T16:38:59Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-10-26T16:38:59Z"}, "message": "rs6000: Fix allocate_stack in a corner case (PR91289)\n\nWhen we have -fstack-limit-symbol with sysv we can end up with a non-\nexisting instruction (you cannot add an immediate to register 0).  Fix\nthis by using register 11 instead.  It might be used for something else\nalready though, so save and restore its value around this.  In\noptimizing compiles these extra moves are usually removed again: the\nrestore by cprop_hardreg, and then the save by rtl_dce.\n\n\n\tPR target/91289\n\t* config/rs6000/rs6000-logue.c (rs6000_emit_allocate_stack): Don't add\n\tan immediate to r0; use r11 instead.  Save and restore r11 to r0 around\n\tthis.\n\nFrom-SVN: r277472", "tree": {"sha": "0285a6a3a25735d8c81fb0d31a0147d48a5d70d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0285a6a3a25735d8c81fb0d31a0147d48a5d70d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26bd2dab50817184b73cea1034d7e60d55def70d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26bd2dab50817184b73cea1034d7e60d55def70d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26bd2dab50817184b73cea1034d7e60d55def70d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26bd2dab50817184b73cea1034d7e60d55def70d/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8bbf3dea78325c39d7750e815024eef960415592", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bbf3dea78325c39d7750e815024eef960415592", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bbf3dea78325c39d7750e815024eef960415592"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "de55e1a8323f1416b238c6113f09d7b4a21f4761", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26bd2dab50817184b73cea1034d7e60d55def70d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26bd2dab50817184b73cea1034d7e60d55def70d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26bd2dab50817184b73cea1034d7e60d55def70d", "patch": "@@ -1,3 +1,10 @@\n+2019-10-26  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/91289\n+\t* config/rs6000/rs6000-logue.c (rs6000_emit_allocate_stack): Don't add\n+\tan immediate to r0; use r11 instead.  Save and restore r11 to r0 around\n+\tthis.\n+\n 2019-10-26  Hongtao Liu  <hongtao.liu@intel.com>\n \n \t* config/i386/sse.md"}, {"sha": "04aae8052dbf46d0cbf1dd61e457c973aafae17a", "filename": "gcc/config/rs6000/rs6000-logue.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26bd2dab50817184b73cea1034d7e60d55def70d/gcc%2Fconfig%2Frs6000%2Frs6000-logue.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26bd2dab50817184b73cea1034d7e60d55def70d/gcc%2Fconfig%2Frs6000%2Frs6000-logue.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-logue.c?ref=26bd2dab50817184b73cea1034d7e60d55def70d", "patch": "@@ -1700,10 +1700,14 @@ rs6000_emit_allocate_stack (HOST_WIDE_INT size, rtx copy_reg, int copy_off)\n \t\t\t\t\t\t    stack_limit_rtx,\n \t\t\t\t\t\t    GEN_INT (size)));\n \n-\t  emit_insn (gen_elf_high (tmp_reg, toload));\n-\t  emit_insn (gen_elf_low (tmp_reg, tmp_reg, toload));\n-\t  emit_insn (gen_cond_trap (LTU, stack_reg, tmp_reg,\n-\t\t\t\t    const0_rtx));\n+\t  /* We cannot use r0 with elf_low.  Lamely solve this problem by\n+\t     moving registers around.  */\n+\t  rtx r11_reg = gen_rtx_REG (Pmode, 11);\n+\t  emit_move_insn (tmp_reg, r11_reg);\n+\t  emit_insn (gen_elf_high (r11_reg, toload));\n+\t  emit_insn (gen_elf_low (r11_reg, r11_reg, toload));\n+\t  emit_insn (gen_cond_trap (LTU, stack_reg, r11_reg, const0_rtx));\n+\t  emit_move_insn (r11_reg, tmp_reg);\n \t}\n       else\n \twarning (0, \"stack limit expression is not supported\");"}]}