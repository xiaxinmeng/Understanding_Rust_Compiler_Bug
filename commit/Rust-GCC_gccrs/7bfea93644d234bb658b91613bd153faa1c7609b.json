{"sha": "7bfea93644d234bb658b91613bd153faa1c7609b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JmZWE5MzY0NGQyMzRiYjY1OGI5MTYxM2JkMTUzZmFhMWM3NjA5Yg==", "commit": {"author": {"name": "Loren J. Rittle", "email": "ljrittle@acm.org", "date": "2002-01-11T23:02:34Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2002-01-11T23:02:34Z"}, "message": "Makefile.am (extra_target_headers): New list of all target files built with ad hoc naming rules.\n\n\t* include/Makefile.am (extra_target_headers): New list of all\n\ttarget files built with ad hoc naming rules.\n\t(stamp-*): Handle LN_S failure in manner portable across make\n\timplementations.\n\t(install-data-local): Install header files from human-maintained\n\tfile lists and directory components instead of non-robust find.\n\t* include/Makefile.in: Rebuilt.\n\nFrom-SVN: r48782", "tree": {"sha": "0b45907134acae6d62f5498664c0cfc9ca680da0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b45907134acae6d62f5498664c0cfc9ca680da0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bfea93644d234bb658b91613bd153faa1c7609b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bfea93644d234bb658b91613bd153faa1c7609b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bfea93644d234bb658b91613bd153faa1c7609b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bfea93644d234bb658b91613bd153faa1c7609b/comments", "author": null, "committer": null, "parents": [{"sha": "999825b056332cd0487e8078f869eae9b066d27a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/999825b056332cd0487e8078f869eae9b066d27a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/999825b056332cd0487e8078f869eae9b066d27a"}], "stats": {"total": 338, "additions": 113, "deletions": 225}, "files": [{"sha": "ce6e4414454e314269fedc09ea4b97b38733ee7f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bfea93644d234bb658b91613bd153faa1c7609b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bfea93644d234bb658b91613bd153faa1c7609b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7bfea93644d234bb658b91613bd153faa1c7609b", "patch": "@@ -1,3 +1,13 @@\n+2002-01-11  Loren Rittle <ljrittle@acm.org>\n+\n+\t* include/Makefile.am (extra_target_headers): New list of all\n+\ttarget files built with ad hoc naming rules.\n+\t(stamp-*): Handle LN_S failure in manner portable across make\n+\timplementations.\n+\t(install-data-local): Install header files from human-maintained\n+\tfile lists and directory components instead of non-robust find.\n+\t* include/Makefile.in: Rebuilt.\n+\n 2002-01-11  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/locale_facets.tcc (money_get::do_get(string)):"}, {"sha": "1ff45bd8f32ac1ba05970ca5aaac5d3c5363be55", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 50, "deletions": 22, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bfea93644d234bb658b91613bd153faa1c7609b/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bfea93644d234bb658b91613bd153faa1c7609b/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=7bfea93644d234bb658b91613bd153faa1c7609b", "patch": "@@ -1,6 +1,6 @@\n ## Makefile for the include subdirectory of the GNU C++ Standard library.\n ##\n-## Copyright (C) 2001 Free Software Foundation, Inc.\n+## Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n ##\n ## This file is part of the libstdc++ version 3 distribution.\n ## Process this file with automake to produce Makefile.in.\n@@ -224,6 +224,14 @@ target_headers = \\\n \t${target_srcdir}/os_defines.h \\\n \t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \\\n \t${glibcpp_srcdir}/@CPU_LIMITS_INC_SRCDIR@/cpu_limits.h \n+# These extra_target_headers files are all built with ad hoc naming rules.\n+extra_target_headers = \\\n+\t${target_builddir}/basic_file_model.h \\\n+\t${target_builddir}/c++config.h \\\n+\t${target_builddir}/c++io.h \\\n+\t${target_builddir}/c++locale.h \\\n+\t${target_builddir}/messages_members.h \\\n+\t${target_builddir}/codecvt_specializations.h\n \n thread_builddir = ./${target_alias}/bits\n thread_headers = \\\n@@ -244,35 +252,35 @@ stamp-std: ${std_headers}\n \t@if [ ! -d \"${std_builddir}\" ]; then \\\n \t  mkdir -p ${std_builddir} ;\\\n \tfi ;\\\n-\t(cd ${std_builddir} && @LN_S@ $? .) ;\\\n+\t(cd ${std_builddir} && @LN_S@ $? . || true) ;\\\n \techo `date` > stamp-std \n \n stamp-bits: ${bits_headers}\n \t@if [ ! -d \"${bits_builddir}\" ]; then \\\n \t  mkdir -p ${bits_builddir} ;\\\n \tfi ;\\\n-\t(cd ${bits_builddir} && @LN_S@ $? .) ;\\\n+\t(cd ${bits_builddir} && @LN_S@ $? . || true) ;\\\n \techo `date` > stamp-bits\n \n stamp-c_base: ${c_base_headers}\n \t@if [ ! -d \"${c_base_builddir}\" ]; then \\\n \t  mkdir -p ${c_base_builddir} ;\\\n \tfi ;\\\n-\t(cd ${c_base_builddir} && @LN_S@ $? .) ;\\\n+\t(cd ${c_base_builddir} && @LN_S@ $? . || true) ;\\\n \techo `date` > stamp-c_base\n \n stamp-backward: ${backward_headers}\n \t@if [ ! -d \"${backward_builddir}\" ]; then \\\n \t  mkdir -p ${backward_builddir} ;\\\n \tfi ;\\\n-\t(cd ${backward_builddir} && @LN_S@ $? .) ;\\\n+\t(cd ${backward_builddir} && @LN_S@ $? . || true) ;\\\n \techo `date` > stamp-backward\n \n stamp-ext: ${ext_headers}\n \t@if [ ! -d \"${ext_builddir}\" ]; then \\\n \t  mkdir -p ${ext_builddir} ;\\\n \tfi ;\\\n-\t(cd ${ext_builddir} && @LN_S@ $? .) ;\\\n+\t(cd ${ext_builddir} && @LN_S@ $? . || true) ;\\\n \techo `date` > stamp-ext\n \n # This target is special.  The timestamp on a directory gets modified\n@@ -290,12 +298,12 @@ stamp-${target_alias}:\n stamp-target: ${target_headers} ${target_builddir}\n \t@cd ${target_builddir} ;\\\n \tif [ ! -f stamp-target ]; then \\\n-\t  @LN_S@ ${target_headers} . ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@BASIC_FILE_H@ basic_file_model.h ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@CSTDIO_H@ c++io.h ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@CLOCALE_H@ c++locale.h ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@CMESSAGES_H@ messages_members.h ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@CCODECVT_H@ codecvt_specializations.h ;\\\n+\t  @LN_S@ ${target_headers} . || true ;\\\n+\t  @LN_S@ ${glibcpp_srcdir}/@BASIC_FILE_H@ basic_file_model.h || true ;\\\n+\t  @LN_S@ ${glibcpp_srcdir}/@CSTDIO_H@ c++io.h || true ;\\\n+\t  @LN_S@ ${glibcpp_srcdir}/@CLOCALE_H@ c++locale.h || true ;\\\n+\t  @LN_S@ ${glibcpp_srcdir}/@CMESSAGES_H@ messages_members.h || true ;\\\n+\t  @LN_S@ ${glibcpp_srcdir}/@CCODECVT_H@ codecvt_specializations.h || true ;\\\n \t  echo `date` > stamp-target; \\\n \tfi\n \n@@ -335,18 +343,38 @@ ${thread_builddir}/gthr-default.h:\n \t    -e 's/\\(${uppercase}*WEAK\\)/_GLIBCPP_\\1/g' \\\n \t    < ${toplevel_srcdir}/gcc/${glibcpp_thread_h} > $@\n \n-# One big happy istallation:  just copy everything from the build to the\n-# install tree (except for the build stamps).\n+# For robustness sake (in light of junk files or in-source\n+# configuration), copy from the build or source tree to the install\n+# tree using only the human-maintained file lists and directory\n+# components.  Yes, with minor differences, this is sheer duplication\n+# of the staging rules above using $(INSTALL_DATA) instead of LN_S and\n+# `$(INSTALL) -d' instead of `mkdir -p'.  In particular,\n+# extra_target_headers are taken out of the build tree staging area;\n+# the rest are taken from the original source tree.\n gxx_include_dir = @gxx_include_dir@\n install-data-local:\n-\tfor file in `find . ! -name stamp-\\* ! -name Makefile -print`; do \\\n-\tinstallFile=${gxx_include_dir}/$${file} ;\\\n-\tif [ -d $${file} ]; then \\\n-\t  $(INSTALL) -d $${installFile} ;\\\n-\telse \\\n-\t  $(INSTALL_DATA) $${file} $${installFile} ;\\\n-\tfi ;\\\n-\tdone\n+\t$(INSTALL) -d ${gxx_include_dir}\n+\t$(INSTALL) -d ${gxx_include_dir}/${bits_builddir}\n+\tfor file in ${bits_headers}; do \\\n+\t  $(INSTALL_DATA) $${file} ${gxx_include_dir}/${bits_builddir}; done\n+\t$(INSTALL) -d ${gxx_include_dir}/${backward_builddir}\n+\tfor file in ${backward_headers}; do \\\n+\t  $(INSTALL_DATA) $${file} ${gxx_include_dir}/${backward_builddir}; done\n+\t$(INSTALL) -d ${gxx_include_dir}/${ext_builddir}\n+\tfor file in ${ext_headers}; do \\\n+\t  $(INSTALL_DATA) $${file} ${gxx_include_dir}/${ext_builddir}; done\n+\t$(INSTALL) -d ${gxx_include_dir}/${c_base_builddir}\n+\tfor file in ${c_base_headers}; do \\\n+\t  $(INSTALL_DATA) $${file} ${gxx_include_dir}/${c_base_builddir}; done\n+\t$(INSTALL) -d ${gxx_include_dir}/${std_builddir}\n+\tfor file in ${std_headers}; do \\\n+\t  $(INSTALL_DATA) $${file} ${gxx_include_dir}/${std_builddir}; done\n+\t$(INSTALL) -d ${gxx_include_dir}/${target_builddir}\n+\tfor file in ${target_headers} ${extra_target_headers}; do \\\n+\t  $(INSTALL_DATA) $${file} ${gxx_include_dir}/${target_builddir}; done\n+\t$(INSTALL) -d ${gxx_include_dir}/${thread_builddir}\n+\tfor file in ${thread_headers}; do \\\n+\t  $(INSTALL_DATA) $${file} ${gxx_include_dir}/${thread_builddir}; done\n \n # By adding these files here, automake will remove them for 'make clean'\n #CLEANFILES = ${allstamps}"}, {"sha": "70fee33be73cc1c8a128f1e1d2f2ba23e4977e13", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 53, "deletions": 203, "changes": 256, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bfea93644d234bb658b91613bd153faa1c7609b/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bfea93644d234bb658b91613bd153faa1c7609b/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=7bfea93644d234bb658b91613bd153faa1c7609b", "patch": "@@ -158,223 +158,59 @@ glibcpp_builddir = @glibcpp_builddir@\n \n bits_srcdir = ${glibcpp_srcdir}/include/bits\n bits_builddir = ./bits\n-bits_headers = \\\n-\t${bits_srcdir}/basic_file.h \\\n-\t${bits_srcdir}/basic_ios.h \\\n-\t${bits_srcdir}/basic_ios.tcc \\\n-\t${bits_srcdir}/basic_string.h \\\n-\t${bits_srcdir}/basic_string.tcc \\\n-\t${bits_srcdir}/boost_concept_check.h \\\n-\t${bits_srcdir}/char_traits.h \\\n-\t${bits_srcdir}/codecvt.h \\\n-\t${bits_srcdir}/concept_check.h \\\n-\t${bits_srcdir}/cpp_type_traits.h \\\n-\t${bits_srcdir}/fpos.h \\\n-\t${bits_srcdir}/fstream.tcc \\\n-\t${bits_srcdir}/functexcept.h \\\n-\t${bits_srcdir}/generic_shadow.h \\\n-\t${bits_srcdir}/gslice.h \\\n-\t${bits_srcdir}/gslice_array.h \\\n-\t${bits_srcdir}/indirect_array.h \\\n-\t${bits_srcdir}/ios_base.h \\\n-\t${bits_srcdir}/istream.tcc \\\n-\t${bits_srcdir}/locale_facets.h \\\n-\t${bits_srcdir}/locale_facets.tcc \\\n-\t${bits_srcdir}/localefwd.h \\\n-\t${bits_srcdir}/mask_array.h \\\n-\t${bits_srcdir}/ostream.tcc \\\n-\t${bits_srcdir}/pthread_allocimpl.h \\\n-\t${bits_srcdir}/stream_iterator.h \\\n-\t${bits_srcdir}/streambuf_iterator.h \\\n-\t${bits_srcdir}/slice.h \\\n-\t${bits_srcdir}/slice_array.h \\\n-\t${bits_srcdir}/sstream.tcc \\\n-\t${bits_srcdir}/stl_algo.h \\\n-\t${bits_srcdir}/stl_algobase.h \\\n-\t${bits_srcdir}/stl_alloc.h \\\n-\t${bits_srcdir}/stl_bvector.h \\\n-\t${bits_srcdir}/stl_construct.h \\\n-\t${bits_srcdir}/stl_deque.h \\\n-\t${bits_srcdir}/stl_function.h \\\n-\t${bits_srcdir}/stl_heap.h \\\n-\t${bits_srcdir}/stl_iterator.h \\\n-\t${bits_srcdir}/stl_iterator_base_funcs.h \\\n-\t${bits_srcdir}/stl_iterator_base_types.h \\\n-\t${bits_srcdir}/stl_list.h \\\n-\t${bits_srcdir}/stl_map.h \\\n-\t${bits_srcdir}/stl_multimap.h \\\n-\t${bits_srcdir}/stl_multiset.h \\\n-\t${bits_srcdir}/stl_numeric.h \\\n-\t${bits_srcdir}/stl_pair.h \\\n-\t${bits_srcdir}/stl_pthread_alloc.h \\\n-\t${bits_srcdir}/stl_queue.h \\\n-\t${bits_srcdir}/stl_raw_storage_iter.h \\\n-\t${bits_srcdir}/stl_relops.h \\\n-\t${bits_srcdir}/stl_set.h \\\n-\t${bits_srcdir}/stl_stack.h \\\n-\t${bits_srcdir}/stl_tempbuf.h \\\n-\t${bits_srcdir}/stl_threads.h \\\n-\t${bits_srcdir}/stl_tree.h \\\n-\t${bits_srcdir}/stl_uninitialized.h \\\n-\t${bits_srcdir}/stl_vector.h \\\n-\t${bits_srcdir}/streambuf.tcc \\\n-\t${bits_srcdir}/stringfwd.h \\\n-\t${bits_srcdir}/type_traits.h \\\n-\t${bits_srcdir}/valarray_array.h \\\n-\t${bits_srcdir}/valarray_array.tcc \\\n-\t${bits_srcdir}/valarray_meta.h\n+bits_headers =  \t${bits_srcdir}/basic_file.h \t${bits_srcdir}/basic_ios.h \t${bits_srcdir}/basic_ios.tcc \t${bits_srcdir}/basic_string.h \t${bits_srcdir}/basic_string.tcc \t${bits_srcdir}/boost_concept_check.h \t${bits_srcdir}/char_traits.h \t${bits_srcdir}/codecvt.h \t${bits_srcdir}/concept_check.h \t${bits_srcdir}/cpp_type_traits.h \t${bits_srcdir}/fpos.h \t${bits_srcdir}/fstream.tcc \t${bits_srcdir}/functexcept.h \t${bits_srcdir}/generic_shadow.h \t${bits_srcdir}/gslice.h \t${bits_srcdir}/gslice_array.h \t${bits_srcdir}/indirect_array.h \t${bits_srcdir}/ios_base.h \t${bits_srcdir}/istream.tcc \t${bits_srcdir}/locale_facets.h \t${bits_srcdir}/locale_facets.tcc \t${bits_srcdir}/localefwd.h \t${bits_srcdir}/mask_array.h \t${bits_srcdir}/ostream.tcc \t${bits_srcdir}/pthread_allocimpl.h \t${bits_srcdir}/stream_iterator.h \t${bits_srcdir}/streambuf_iterator.h \t${bits_srcdir}/slice.h \t${bits_srcdir}/slice_array.h \t${bits_srcdir}/sstream.tcc \t${bits_srcdir}/stl_algo.h \t${bits_srcdir}/stl_algobase.h \t${bits_srcdir}/stl_alloc.h \t${bits_srcdir}/stl_bvector.h \t${bits_srcdir}/stl_construct.h \t${bits_srcdir}/stl_deque.h \t${bits_srcdir}/stl_function.h \t${bits_srcdir}/stl_heap.h \t${bits_srcdir}/stl_iterator.h \t${bits_srcdir}/stl_iterator_base_funcs.h \t${bits_srcdir}/stl_iterator_base_types.h \t${bits_srcdir}/stl_list.h \t${bits_srcdir}/stl_map.h \t${bits_srcdir}/stl_multimap.h \t${bits_srcdir}/stl_multiset.h \t${bits_srcdir}/stl_numeric.h \t${bits_srcdir}/stl_pair.h \t${bits_srcdir}/stl_pthread_alloc.h \t${bits_srcdir}/stl_queue.h \t${bits_srcdir}/stl_raw_storage_iter.h \t${bits_srcdir}/stl_relops.h \t${bits_srcdir}/stl_set.h \t${bits_srcdir}/stl_stack.h \t${bits_srcdir}/stl_tempbuf.h \t${bits_srcdir}/stl_threads.h \t${bits_srcdir}/stl_tree.h \t${bits_srcdir}/stl_uninitialized.h \t${bits_srcdir}/stl_vector.h \t${bits_srcdir}/streambuf.tcc \t${bits_srcdir}/stringfwd.h \t${bits_srcdir}/type_traits.h \t${bits_srcdir}/valarray_array.h \t${bits_srcdir}/valarray_array.tcc \t${bits_srcdir}/valarray_meta.h\n \n \n backward_srcdir = ${glibcpp_srcdir}/include/backward\n backward_builddir = ./backward\n-backward_headers = \\\n-\t${backward_srcdir}/complex.h \\\n-\t${backward_srcdir}/iomanip.h \\\n-\t${backward_srcdir}/istream.h \\\n-\t${backward_srcdir}/ostream.h \\\n-\t${backward_srcdir}/stream.h \\\n-\t${backward_srcdir}/streambuf.h \\\n-\t${backward_srcdir}/algo.h \\\n-\t${backward_srcdir}/algobase.h \\\n-\t${backward_srcdir}/alloc.h \\\n-\t${backward_srcdir}/bvector.h \\\n-\t${backward_srcdir}/defalloc.h \\\n-\t${backward_srcdir}/deque.h \\\n-\t${backward_srcdir}/function.h \\\n-\t${backward_srcdir}/hash_map.h \\\n-\t${backward_srcdir}/hash_set.h \\\n-\t${backward_srcdir}/hashtable.h \\\n-\t${backward_srcdir}/heap.h \\\n-\t${backward_srcdir}/iostream.h \\\n-\t${backward_srcdir}/iterator.h \\\n-\t${backward_srcdir}/list.h \\\n-\t${backward_srcdir}/map.h \\\n-\t${backward_srcdir}/multimap.h \\\n-\t${backward_srcdir}/new.h \\\n-\t${backward_srcdir}/multiset.h \\\n-\t${backward_srcdir}/pair.h \\\n-\t${backward_srcdir}/queue.h \\\n-\t${backward_srcdir}/rope.h \\\n-\t${backward_srcdir}/set.h \\\n-\t${backward_srcdir}/slist.h \\\n-\t${backward_srcdir}/stack.h \\\n-\t${backward_srcdir}/tempbuf.h \\\n-\t${backward_srcdir}/tree.h \\\n-\t${backward_srcdir}/vector.h \\\n-\t${backward_srcdir}/fstream.h \\\n-\t${backward_srcdir}/strstream.h \\\n-\t${backward_srcdir}/strstream \\\n-\t${backward_srcdir}/backward_warning.h\n+backward_headers =  \t${backward_srcdir}/complex.h \t${backward_srcdir}/iomanip.h \t${backward_srcdir}/istream.h \t${backward_srcdir}/ostream.h \t${backward_srcdir}/stream.h \t${backward_srcdir}/streambuf.h \t${backward_srcdir}/algo.h \t${backward_srcdir}/algobase.h \t${backward_srcdir}/alloc.h \t${backward_srcdir}/bvector.h \t${backward_srcdir}/defalloc.h \t${backward_srcdir}/deque.h \t${backward_srcdir}/function.h \t${backward_srcdir}/hash_map.h \t${backward_srcdir}/hash_set.h \t${backward_srcdir}/hashtable.h \t${backward_srcdir}/heap.h \t${backward_srcdir}/iostream.h \t${backward_srcdir}/iterator.h \t${backward_srcdir}/list.h \t${backward_srcdir}/map.h \t${backward_srcdir}/multimap.h \t${backward_srcdir}/new.h \t${backward_srcdir}/multiset.h \t${backward_srcdir}/pair.h \t${backward_srcdir}/queue.h \t${backward_srcdir}/rope.h \t${backward_srcdir}/set.h \t${backward_srcdir}/slist.h \t${backward_srcdir}/stack.h \t${backward_srcdir}/tempbuf.h \t${backward_srcdir}/tree.h \t${backward_srcdir}/vector.h \t${backward_srcdir}/fstream.h \t${backward_srcdir}/strstream.h \t${backward_srcdir}/strstream \t${backward_srcdir}/backward_warning.h\n \n \n ext_srcdir = ${glibcpp_srcdir}/include/ext\n ext_builddir = ./ext\n-ext_headers = \\\n-\t${ext_srcdir}/algorithm \\\n-\t${ext_srcdir}/functional \\\n-\t${ext_srcdir}/hash_map \\\n-\t${ext_srcdir}/hash_set \\\n-\t${ext_srcdir}/iterator \\\n-\t${ext_srcdir}/memory \\\n-\t${ext_srcdir}/numeric \\\n-\t${ext_srcdir}/rb_tree \\\n-\t${ext_srcdir}/rope \\\n-\t${ext_srcdir}/ropeimpl.h \\\n-\t${ext_srcdir}/slist \\\n-\t${ext_srcdir}/stl_hash_fun.h \\\n-\t${ext_srcdir}/stl_hashtable.h \\\n-\t${ext_srcdir}/stl_rope.h\n+ext_headers =  \t${ext_srcdir}/algorithm \t${ext_srcdir}/functional \t${ext_srcdir}/hash_map \t${ext_srcdir}/hash_set \t${ext_srcdir}/iterator \t${ext_srcdir}/memory \t${ext_srcdir}/numeric \t${ext_srcdir}/rb_tree \t${ext_srcdir}/rope \t${ext_srcdir}/ropeimpl.h \t${ext_srcdir}/slist \t${ext_srcdir}/stl_hash_fun.h \t${ext_srcdir}/stl_hashtable.h \t${ext_srcdir}/stl_rope.h\n \n \n # This is the common subset of files that all three \"C\" header models use.\n c_base_srcdir = @C_INCLUDE_DIR@\n c_base_builddir = ./\n-c_base_headers = \\\n-\t${c_base_srcdir}/cassert \\\n-\t${c_base_srcdir}/cctype \\\n-\t${c_base_srcdir}/cerrno \\\n-\t${c_base_srcdir}/cfloat \\\n-\t${c_base_srcdir}/ciso646 \\\n-\t${c_base_srcdir}/climits \\\n-\t${c_base_srcdir}/clocale \\\n-\t${c_base_srcdir}/cmath \\\n-\t${c_base_srcdir}/csetjmp \\\n-\t${c_base_srcdir}/csignal \\\n-\t${c_base_srcdir}/cstdarg \\\n-\t${c_base_srcdir}/cstddef \\\n-\t${c_base_srcdir}/cstdio \\\n-\t${c_base_srcdir}/cstdlib \\\n-\t${c_base_srcdir}/cstring \\\n-\t${c_base_srcdir}/ctime \\\n-\t${c_base_srcdir}/cwchar \\\n-\t${c_base_srcdir}/cwctype \\\n-\t${c_base_srcdir}/cmath.tcc \n+c_base_headers =  \t${c_base_srcdir}/cassert \t${c_base_srcdir}/cctype \t${c_base_srcdir}/cerrno \t${c_base_srcdir}/cfloat \t${c_base_srcdir}/ciso646 \t${c_base_srcdir}/climits \t${c_base_srcdir}/clocale \t${c_base_srcdir}/cmath \t${c_base_srcdir}/csetjmp \t${c_base_srcdir}/csignal \t${c_base_srcdir}/cstdarg \t${c_base_srcdir}/cstddef \t${c_base_srcdir}/cstdio \t${c_base_srcdir}/cstdlib \t${c_base_srcdir}/cstring \t${c_base_srcdir}/ctime \t${c_base_srcdir}/cwchar \t${c_base_srcdir}/cwctype \t${c_base_srcdir}/cmath.tcc \n \n \n std_srcdir = ${glibcpp_srcdir}/include/std\n std_builddir = ./\n-std_headers = \\\n-\t${std_srcdir}/algorithm \\\n-\t${std_srcdir}/bitset \\\n-\t${std_srcdir}/complex \\\n-\t${std_srcdir}/deque \\\n-\t${std_srcdir}/fstream \\\n-\t${std_srcdir}/functional \\\n-\t${std_srcdir}/iomanip \\\n-\t${std_srcdir}/ios \\\n-\t${std_srcdir}/iosfwd \\\n-\t${std_srcdir}/iostream \\\n-\t${std_srcdir}/istream \\\n-\t${std_srcdir}/iterator \\\n-\t${std_srcdir}/limits \\\n-\t${std_srcdir}/list \\\n-\t${std_srcdir}/locale \\\n-\t${std_srcdir}/map \\\n-\t${std_srcdir}/memory \\\n-\t${std_srcdir}/numeric \\\n-\t${std_srcdir}/ostream \\\n-\t${std_srcdir}/queue \\\n-\t${std_srcdir}/set \\\n-\t${std_srcdir}/sstream \\\n-\t${std_srcdir}/stack \\\n-\t${std_srcdir}/stdexcept \\\n-\t${std_srcdir}/streambuf \\\n-\t${std_srcdir}/string \\\n-\t${std_srcdir}/utility \\\n-\t${std_srcdir}/valarray \\\n-\t${std_srcdir}/vector \n+std_headers =  \t${std_srcdir}/algorithm \t${std_srcdir}/bitset \t${std_srcdir}/complex \t${std_srcdir}/deque \t${std_srcdir}/fstream \t${std_srcdir}/functional \t${std_srcdir}/iomanip \t${std_srcdir}/ios \t${std_srcdir}/iosfwd \t${std_srcdir}/iostream \t${std_srcdir}/istream \t${std_srcdir}/iterator \t${std_srcdir}/limits \t${std_srcdir}/list \t${std_srcdir}/locale \t${std_srcdir}/map \t${std_srcdir}/memory \t${std_srcdir}/numeric \t${std_srcdir}/ostream \t${std_srcdir}/queue \t${std_srcdir}/set \t${std_srcdir}/sstream \t${std_srcdir}/stack \t${std_srcdir}/stdexcept \t${std_srcdir}/streambuf \t${std_srcdir}/string \t${std_srcdir}/utility \t${std_srcdir}/valarray \t${std_srcdir}/vector \n \n \n target_srcdir = ${glibcpp_srcdir}/@OS_INC_SRCDIR@\n target_builddir = ./${target_alias}/bits\n-target_headers = \\\n-\t${target_srcdir}/ctype_base.h \\\n-\t${target_srcdir}/ctype_inline.h \\\n-\t${target_srcdir}/ctype_noninline.h \\\n-\t${target_srcdir}/os_defines.h \\\n-\t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \\\n-\t${glibcpp_srcdir}/@CPU_LIMITS_INC_SRCDIR@/cpu_limits.h \n+target_headers =  \t${target_srcdir}/ctype_base.h \t${target_srcdir}/ctype_inline.h \t${target_srcdir}/ctype_noninline.h \t${target_srcdir}/os_defines.h \t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \t${glibcpp_srcdir}/@CPU_LIMITS_INC_SRCDIR@/cpu_limits.h \n+\n+# These extra_target_headers files are all built with ad hoc naming rules.\n+extra_target_headers =  \t${target_builddir}/basic_file_model.h \t${target_builddir}/c++config.h \t${target_builddir}/c++io.h \t${target_builddir}/c++locale.h \t${target_builddir}/messages_members.h \t${target_builddir}/codecvt_specializations.h\n \n \n thread_builddir = ./${target_alias}/bits\n-thread_headers = \\\n-\t${thread_builddir}/gthr.h \\\n-\t${thread_builddir}/gthr-single.h \\\n-\t${thread_builddir}/gthr-default.h\n+thread_headers =  \t${thread_builddir}/gthr.h \t${thread_builddir}/gthr-single.h \t${thread_builddir}/gthr-default.h\n \n \n # List of all timestamp files.  By keeping only one copy of this list, both\n # CLEANFILES and all-local are kept up-to-date.\n-allstamps = stamp-std stamp-bits stamp-c_base stamp-backward stamp-ext \\\n-\tstamp-target stamp-thread \n+allstamps = stamp-std stamp-bits stamp-c_base stamp-backward stamp-ext \tstamp-target stamp-thread \n \n \n # Target includes for threads\n glibcpp_thread_h = @glibcpp_thread_h@\n uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]\n \n-# One big happy istallation:  just copy everything from the build to the\n-# install tree (except for the build stamps).\n+# For robustness sake (in light of junk files or in-source\n+# configuration), copy from the build or source tree to the install\n+# tree using only the human-maintained file lists and directory\n+# components.  Yes, with minor differences, this is sheer duplication\n+# of the staging rules above using $(INSTALL_DATA) instead of LN_S and\n+# `$(INSTALL) -d' instead of `mkdir -p'.  In particular,\n+# extra_target_headers are taken out of the build tree staging area;\n+# the rest are taken from the original source tree.\n gxx_include_dir = @gxx_include_dir@\n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n@@ -383,7 +219,7 @@ DIST_COMMON =  Makefile.am Makefile.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = gtar\n+TAR = tar\n GZIP_ENV = --best\n all: all-redirect\n .SUFFIXES:\n@@ -485,35 +321,35 @@ stamp-std: ${std_headers}\n \t@if [ ! -d \"${std_builddir}\" ]; then \\\n \t  mkdir -p ${std_builddir} ;\\\n \tfi ;\\\n-\t(cd ${std_builddir} && @LN_S@ $? .) ;\\\n+\t(cd ${std_builddir} && @LN_S@ $? . || true) ;\\\n \techo `date` > stamp-std \n \n stamp-bits: ${bits_headers}\n \t@if [ ! -d \"${bits_builddir}\" ]; then \\\n \t  mkdir -p ${bits_builddir} ;\\\n \tfi ;\\\n-\t(cd ${bits_builddir} && @LN_S@ $? .) ;\\\n+\t(cd ${bits_builddir} && @LN_S@ $? . || true) ;\\\n \techo `date` > stamp-bits\n \n stamp-c_base: ${c_base_headers}\n \t@if [ ! -d \"${c_base_builddir}\" ]; then \\\n \t  mkdir -p ${c_base_builddir} ;\\\n \tfi ;\\\n-\t(cd ${c_base_builddir} && @LN_S@ $? .) ;\\\n+\t(cd ${c_base_builddir} && @LN_S@ $? . || true) ;\\\n \techo `date` > stamp-c_base\n \n stamp-backward: ${backward_headers}\n \t@if [ ! -d \"${backward_builddir}\" ]; then \\\n \t  mkdir -p ${backward_builddir} ;\\\n \tfi ;\\\n-\t(cd ${backward_builddir} && @LN_S@ $? .) ;\\\n+\t(cd ${backward_builddir} && @LN_S@ $? . || true) ;\\\n \techo `date` > stamp-backward\n \n stamp-ext: ${ext_headers}\n \t@if [ ! -d \"${ext_builddir}\" ]; then \\\n \t  mkdir -p ${ext_builddir} ;\\\n \tfi ;\\\n-\t(cd ${ext_builddir} && @LN_S@ $? .) ;\\\n+\t(cd ${ext_builddir} && @LN_S@ $? . || true) ;\\\n \techo `date` > stamp-ext\n \n # This target is special.  The timestamp on a directory gets modified\n@@ -531,12 +367,12 @@ stamp-${target_alias}:\n stamp-target: ${target_headers} ${target_builddir}\n \t@cd ${target_builddir} ;\\\n \tif [ ! -f stamp-target ]; then \\\n-\t  @LN_S@ ${target_headers} . ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@BASIC_FILE_H@ basic_file_model.h ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@CSTDIO_H@ c++io.h ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@CLOCALE_H@ c++locale.h ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@CMESSAGES_H@ messages_members.h ;\\\n-\t  @LN_S@ ${glibcpp_srcdir}/@CCODECVT_H@ codecvt_specializations.h ;\\\n+\t  @LN_S@ ${target_headers} . || true ;\\\n+\t  @LN_S@ ${glibcpp_srcdir}/@BASIC_FILE_H@ basic_file_model.h || true ;\\\n+\t  @LN_S@ ${glibcpp_srcdir}/@CSTDIO_H@ c++io.h || true ;\\\n+\t  @LN_S@ ${glibcpp_srcdir}/@CLOCALE_H@ c++locale.h || true ;\\\n+\t  @LN_S@ ${glibcpp_srcdir}/@CMESSAGES_H@ messages_members.h || true ;\\\n+\t  @LN_S@ ${glibcpp_srcdir}/@CCODECVT_H@ codecvt_specializations.h || true ;\\\n \t  echo `date` > stamp-target; \\\n \tfi\n \n@@ -571,14 +407,28 @@ ${thread_builddir}/gthr-default.h:\n \t    -e 's/\\(${uppercase}*WEAK\\)/_GLIBCPP_\\1/g' \\\n \t    < ${toplevel_srcdir}/gcc/${glibcpp_thread_h} > $@\n install-data-local:\n-\tfor file in `find . ! -name stamp-\\* ! -name Makefile -print`; do \\\n-\tinstallFile=${gxx_include_dir}/$${file} ;\\\n-\tif [ -d $${file} ]; then \\\n-\t  $(INSTALL) -d $${installFile} ;\\\n-\telse \\\n-\t  $(INSTALL_DATA) $${file} $${installFile} ;\\\n-\tfi ;\\\n-\tdone\n+\t$(INSTALL) -d ${gxx_include_dir}\n+\t$(INSTALL) -d ${gxx_include_dir}/${bits_builddir}\n+\tfor file in ${bits_headers}; do \\\n+\t  $(INSTALL_DATA) $${file} ${gxx_include_dir}/${bits_builddir}; done\n+\t$(INSTALL) -d ${gxx_include_dir}/${backward_builddir}\n+\tfor file in ${backward_headers}; do \\\n+\t  $(INSTALL_DATA) $${file} ${gxx_include_dir}/${backward_builddir}; done\n+\t$(INSTALL) -d ${gxx_include_dir}/${ext_builddir}\n+\tfor file in ${ext_headers}; do \\\n+\t  $(INSTALL_DATA) $${file} ${gxx_include_dir}/${ext_builddir}; done\n+\t$(INSTALL) -d ${gxx_include_dir}/${c_base_builddir}\n+\tfor file in ${c_base_headers}; do \\\n+\t  $(INSTALL_DATA) $${file} ${gxx_include_dir}/${c_base_builddir}; done\n+\t$(INSTALL) -d ${gxx_include_dir}/${std_builddir}\n+\tfor file in ${std_headers}; do \\\n+\t  $(INSTALL_DATA) $${file} ${gxx_include_dir}/${std_builddir}; done\n+\t$(INSTALL) -d ${gxx_include_dir}/${target_builddir}\n+\tfor file in ${target_headers} ${extra_target_headers}; do \\\n+\t  $(INSTALL_DATA) $${file} ${gxx_include_dir}/${target_builddir}; done\n+\t$(INSTALL) -d ${gxx_include_dir}/${thread_builddir}\n+\tfor file in ${thread_headers}; do \\\n+\t  $(INSTALL_DATA) $${file} ${gxx_include_dir}/${thread_builddir}; done\n \n # By adding these files here, automake will remove them for 'make clean'\n #CLEANFILES = ${allstamps}"}]}