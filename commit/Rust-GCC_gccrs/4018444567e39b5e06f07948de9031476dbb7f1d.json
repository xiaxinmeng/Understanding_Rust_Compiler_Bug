{"sha": "4018444567e39b5e06f07948de9031476dbb7f1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAxODQ0NDU2N2UzOWI1ZTA2ZjA3OTQ4ZGU5MDMxNDc2ZGJiN2YxZA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2005-01-26T11:22:33Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2005-01-26T11:22:33Z"}, "message": "function.c (expand_function_end): If current_function_calls_alloca...\n\n\t* function.c (expand_function_end): If current_function_calls_alloca,\n\temit stack restore in a place that is reached when the function falls\n\tthrough at the end.\n\nFrom-SVN: r94259", "tree": {"sha": "21d64f437d534ab3b0ef0303cc4a7aefd060a40a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21d64f437d534ab3b0ef0303cc4a7aefd060a40a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4018444567e39b5e06f07948de9031476dbb7f1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4018444567e39b5e06f07948de9031476dbb7f1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4018444567e39b5e06f07948de9031476dbb7f1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4018444567e39b5e06f07948de9031476dbb7f1d/comments", "author": null, "committer": null, "parents": [{"sha": "02a65d230fc24a23a5c74483bc6de7dcd24b4e80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a65d230fc24a23a5c74483bc6de7dcd24b4e80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02a65d230fc24a23a5c74483bc6de7dcd24b4e80"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "a418bfc6ac551d9bc9a9cee2dc7cd6f45091766f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4018444567e39b5e06f07948de9031476dbb7f1d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4018444567e39b5e06f07948de9031476dbb7f1d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4018444567e39b5e06f07948de9031476dbb7f1d", "patch": "@@ -1,3 +1,9 @@\n+2005-01-26  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* function.c (expand_function_end): If current_function_calls_alloca,\n+\temit stack restore in a place that is reached when the function falls\n+\tthrough at the end.\n+\n 2005-01-26  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* Makefile.in (../$(build_subdir)/fixincludes/fixincl): Add dummy"}, {"sha": "c4656e53587ca9ca46c69c2bde121936ea827099", "filename": "gcc/function.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4018444567e39b5e06f07948de9031476dbb7f1d/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4018444567e39b5e06f07948de9031476dbb7f1d/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=4018444567e39b5e06f07948de9031476dbb7f1d", "patch": "@@ -4460,18 +4460,6 @@ expand_function_end (void)\n   if (flag_exceptions && USING_SJLJ_EXCEPTIONS)\n     sjlj_emit_function_exit_after (get_last_insn ());\n \n-  /* If we had calls to alloca, and this machine needs\n-     an accurate stack pointer to exit the function,\n-     insert some code to save and restore the stack pointer.  */\n-  if (! EXIT_IGNORE_STACK\n-      && current_function_calls_alloca)\n-    {\n-      rtx tem = 0;\n-\n-      emit_stack_save (SAVE_FUNCTION, &tem, parm_birth_insn);\n-      emit_stack_restore (SAVE_FUNCTION, tem, NULL_RTX);\n-    }\n-\n   /* If scalar return value was computed in a pseudo-reg, or was a named\n      return value that got dumped to the stack, copy that to the hard\n      return register.  */\n@@ -4599,6 +4587,18 @@ expand_function_end (void)\n   /* Output the label for the naked return from the function.  */\n   emit_label (naked_return_label);\n \n+  /* If we had calls to alloca, and this machine needs\n+     an accurate stack pointer to exit the function,\n+     insert some code to save and restore the stack pointer.  */\n+  if (! EXIT_IGNORE_STACK\n+      && current_function_calls_alloca)\n+    {\n+      rtx tem = 0;\n+\n+      emit_stack_save (SAVE_FUNCTION, &tem, parm_birth_insn);\n+      emit_stack_restore (SAVE_FUNCTION, tem, NULL_RTX);\n+    }\n+\n   /* ??? This should no longer be necessary since stupid is no longer with\n      us, but there are some parts of the compiler (eg reload_combine, and\n      sh mach_dep_reorg) that still try and compute their own lifetime info"}]}