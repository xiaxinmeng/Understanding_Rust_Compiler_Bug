{"sha": "b8176fe4bbaaf5e00f13aa6ce8003ff69ccd9380", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgxNzZmZTRiYmFhZjVlMDBmMTNhYTZjZTgwMDNmZjY5Y2NkOTM4MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2005-11-09T17:11:53Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-11-09T17:11:53Z"}, "message": "final.c (force_source_line): New global variable.\n\n\t* final.c (force_source_line): New global variable.\n\t(final_scan_insn): Set it to true instead of clearing last_filename.\n\t(notice_source_line): Return true if force_source_line is true,\n\tunless source info is absent.\n\nFrom-SVN: r106699", "tree": {"sha": "0dbdfec3f59de9aa56adb48641b686c8c5f602e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dbdfec3f59de9aa56adb48641b686c8c5f602e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8176fe4bbaaf5e00f13aa6ce8003ff69ccd9380", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8176fe4bbaaf5e00f13aa6ce8003ff69ccd9380", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8176fe4bbaaf5e00f13aa6ce8003ff69ccd9380", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8176fe4bbaaf5e00f13aa6ce8003ff69ccd9380/comments", "author": null, "committer": null, "parents": [{"sha": "fcc207bfd70c14e46f15a0d39db9ff3699afb87f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcc207bfd70c14e46f15a0d39db9ff3699afb87f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcc207bfd70c14e46f15a0d39db9ff3699afb87f"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "3e3c2d94d5e5ccfce32ad898b0ddb7b1553563d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8176fe4bbaaf5e00f13aa6ce8003ff69ccd9380/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8176fe4bbaaf5e00f13aa6ce8003ff69ccd9380/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8176fe4bbaaf5e00f13aa6ce8003ff69ccd9380", "patch": "@@ -1,3 +1,10 @@\n+2005-11-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* final.c (force_source_line): New global variable.\n+\t(final_scan_insn): Set it to true instead of clearing last_filename.\n+\t(notice_source_line): Return true if force_source_line is true,\n+\tunless source info is absent.\n+\n 2005-11-09  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c/24644"}, {"sha": "ed1327dc0a46173bdfaff442c509791bb276f852", "filename": "gcc/final.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8176fe4bbaaf5e00f13aa6ce8003ff69ccd9380/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8176fe4bbaaf5e00f13aa6ce8003ff69ccd9380/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=b8176fe4bbaaf5e00f13aa6ce8003ff69ccd9380", "patch": "@@ -141,6 +141,9 @@ static int high_function_linenum;\n /* Filename of last NOTE.  */\n static const char *last_filename;\n \n+/* Whether to force emission of a line note before the next insn.  */\n+static bool force_source_line = false;\n+  \n extern int length_unit_log; /* This is defined in insn-attrtab.c.  */\n \n /* Nonzero while outputting an `asm' with operands.\n@@ -1739,7 +1742,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t  if ((*seen & (SEEN_EMITTED | SEEN_BB)) == SEEN_BB)\n \t    {\n \t      *seen |= SEEN_EMITTED;\n-\t      last_filename = NULL;\n+\t      force_source_line = true;\n \t    }\n \t  else\n \t    *seen |= SEEN_BB;\n@@ -1763,7 +1766,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t  if ((*seen & (SEEN_EMITTED | SEEN_NOTE)) == SEEN_NOTE)\n \t    {\n \t      *seen |= SEEN_EMITTED;\n-\t      last_filename = NULL;\n+\t      force_source_line = true;\n \t    }\n \t  else\n \t    *seen |= SEEN_NOTE;\n@@ -1781,7 +1784,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t  if ((*seen & (SEEN_EMITTED | SEEN_NOTE)) == SEEN_NOTE)\n \t    {\n \t      *seen |= SEEN_EMITTED;\n-\t      last_filename = NULL;\n+\t      force_source_line = true;\n \t    }\n \t  else\n \t    *seen |= SEEN_NOTE;\n@@ -2501,17 +2504,20 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n   return NEXT_INSN (insn);\n }\n \f\n-/* Output debugging info to the assembler file FILE\n-   based on the NOTE-insn INSN, assumed to be a line number.  */\n+/* Return whether a source line note needs to be emitted before INSN.  */\n \n static bool\n notice_source_line (rtx insn)\n {\n   const char *filename = insn_file (insn);\n   int linenum = insn_line (insn);\n \n-  if (filename && (filename != last_filename || last_linenum != linenum))\n+  if (filename\n+      && (force_source_line\n+\t  || filename != last_filename\n+\t  || last_linenum != linenum))\n     {\n+      force_source_line = false;\n       last_filename = filename;\n       last_linenum = linenum;\n       high_block_linenum = MAX (last_linenum, high_block_linenum);"}]}