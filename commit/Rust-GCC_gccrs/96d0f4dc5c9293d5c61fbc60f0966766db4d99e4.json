{"sha": "96d0f4dc5c9293d5c61fbc60f0966766db4d99e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZkMGY0ZGM1YzkyOTNkNWM2MWZiYzYwZjA5NjY3NjZkYjRkOTllNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-11-26T12:34:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-11-26T12:34:25Z"}, "message": "varasm.c (default_exception_section): Move to...\n\n\t* varasm.c (default_exception_section): Move to...\n\t* except.c (default_exception_section): ... here. Make\n\t.gcc_except_table read-only if it is not expected to have any\n\tdynamic relocations and linker handles it.\n\t* dwarf2out.c (default_eh_frame_section): Make .eh_frame read-only\n\tif it is not expected to have any dynamic relocations and linker\n\thandles it.\n\t* configure.in (HAVE_LD_RO_RW_SECTION_MIXING): Check what ld does\n\twhen linking read-only and read-write sections together.\n\t* configure, config.in: Rebuilt.\n\t* crtstuff.c (EH_FRAME_SECTION_CONST): Define.\n\t(__EH_FRAME_BEGIN__, __FRAME_END__): Add it.\n\nFrom-SVN: r59507", "tree": {"sha": "fef622cddd6570a0141f3c50a52c5ea8bcf74814", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fef622cddd6570a0141f3c50a52c5ea8bcf74814"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96d0f4dc5c9293d5c61fbc60f0966766db4d99e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96d0f4dc5c9293d5c61fbc60f0966766db4d99e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96d0f4dc5c9293d5c61fbc60f0966766db4d99e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96d0f4dc5c9293d5c61fbc60f0966766db4d99e4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db4d71292f66f4faa3ff689325aa888afe5b9a84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db4d71292f66f4faa3ff689325aa888afe5b9a84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db4d71292f66f4faa3ff689325aa888afe5b9a84"}], "stats": {"total": 162, "additions": 146, "deletions": 16}, "files": [{"sha": "5884c5fb0e6895d674e6d3005168853470f354d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d0f4dc5c9293d5c61fbc60f0966766db4d99e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d0f4dc5c9293d5c61fbc60f0966766db4d99e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96d0f4dc5c9293d5c61fbc60f0966766db4d99e4", "patch": "@@ -1,3 +1,18 @@\n+2002-11-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* varasm.c (default_exception_section): Move to...\n+\t* except.c (default_exception_section): ... here. Make\n+\t.gcc_except_table read-only if it is not expected to have any\n+\tdynamic relocations and linker handles it.\n+\t* dwarf2out.c (default_eh_frame_section): Make .eh_frame read-only\n+\tif it is not expected to have any dynamic relocations and linker\n+\thandles it.\n+\t* configure.in (HAVE_LD_RO_RW_SECTION_MIXING): Check what ld does\n+\twhen linking read-only and read-write sections together.\n+\t* configure, config.in: Rebuilt.\n+\t* crtstuff.c (EH_FRAME_SECTION_CONST): Define.\n+\t(__EH_FRAME_BEGIN__, __FRAME_END__): Add it.\n+\n 2002-11-25  Aldy Hernandez  <aldyh@redhat.com>\n \n         * config/rs6000/spe.h (__ev_create_sfix32_fs): Change macro into"}, {"sha": "d26ddfe23d8cd9ae60b0323df96cb41ea04cee52", "filename": "gcc/config.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d0f4dc5c9293d5c61fbc60f0966766db4d99e4/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d0f4dc5c9293d5c61fbc60f0966766db4d99e4/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=96d0f4dc5c9293d5c61fbc60f0966766db4d99e4", "patch": "@@ -586,6 +586,10 @@\n /* Define if your assembler supports the --gstabs option. */\n #undef HAVE_AS_GSTABS_DEBUG_FLAG\n \n+/* Define if your linker links a mix of read-only\n+   and read-write sections into a read-write section. */\n+#undef HAVE_LD_RO_RW_SECTION_MIXING\n+\n /* Define if your linker supports --eh-frame-hdr option. */\n #undef HAVE_LD_EH_FRAME_HDR\n "}, {"sha": "c041d8d59c53b360e2bf47de2b8efff1cc82ec94", "filename": "gcc/configure", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d0f4dc5c9293d5c61fbc60f0966766db4d99e4/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d0f4dc5c9293d5c61fbc60f0966766db4d99e4/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=96d0f4dc5c9293d5c61fbc60f0966766db4d99e4", "patch": "@@ -8113,6 +8113,44 @@ EOF\n fi\n echo \"$ac_t\"\"$gcc_cv_as_gstabs_flag\" 1>&6\n \n+echo $ac_n \"checking linker read-only and read-write section mixing\"\"... $ac_c\" 1>&6\n+echo \"configure:8118: checking linker read-only and read-write section mixing\" >&5\n+gcc_cv_ld_ro_rw_mix=unknown\n+if test x$gcc_cv_gld_major_version != x -a x$gcc_cv_gld_minor_version != x; then\n+  if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 10 -o \"$gcc_cv_gld_major_version\" -gt 2 && grep 'EMUL = elf' ../ld/Makefile > /dev/null; then\n+    gcc_cv_ld_ro_rw_mix=read-write\n+  fi\n+elif test x$gcc_cv_as != x -a x$gcc_cv_ld != x -a x$gcc_cv_objdump != x ; then\n+  echo '.section \"myfoosect\", \"a\"' > conftest1.s\n+  echo '.section \"myfoosect\", \"aw\"' > conftest2.s\n+  echo '.byte 1' >> conftest2.s\n+  echo '.section \"myfoosect\", \"a\"' > conftest3.s\n+  echo '.byte 0' >> conftest3.s\n+  if $gcc_cv_as -o conftest1.o conftest1.s \\\n+     && $gcc_cv_as -o conftest2.o conftest2.s \\\n+     && $gcc_cv_as -o conftest3.o conftest3.s \\\n+     && $gcc_cv_ld -shared -o conftest1.so conftest1.o \\\n+\tconftest2.o conftest3.o; then\n+    gcc_cv_ld_ro_rw_mix=`$gcc_cv_objdump -h conftest1.so \\\n+\t\t\t | grep -A1 myfoosect`\n+    if echo \"$gcc_cv_ld_ro_rw_mix\" | grep CONTENTS > /dev/null; then\n+      if echo \"$gcc_cv_ld_ro_rw_mix\" | grep READONLY > /dev/null; then\n+\tgcc_cv_ld_ro_rw_mix=read-only\n+      else\n+\tgcc_cv_ld_ro_rw_mix=read-write\n+      fi\n+    fi\n+  fi\n+  rm -f conftest.* conftest[123].*\n+fi\n+if test x$gcc_cv_ld_ro_rw_mix = xread-write; then\n+\tcat >> confdefs.h <<\\EOF\n+#define HAVE_LD_RO_RW_SECTION_MIXING 1\n+EOF\n+\n+fi\n+echo \"$ac_t\"\"$gcc_cv_ld_ro_rw_mix\" 1>&6\n+\n echo $ac_n \"checking linker PT_GNU_EH_FRAME support\"\"... $ac_c\" 1>&6\n echo \"configure:8118: checking linker PT_GNU_EH_FRAME support\" >&5\n gcc_cv_ld_eh_frame_hdr=no"}, {"sha": "7e1628091a3f081fbac55c425368344558055281", "filename": "gcc/configure.in", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d0f4dc5c9293d5c61fbc60f0966766db4d99e4/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d0f4dc5c9293d5c61fbc60f0966766db4d99e4/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=96d0f4dc5c9293d5c61fbc60f0966766db4d99e4", "patch": "@@ -2209,6 +2209,44 @@ if test x\"$gcc_cv_as_gstabs_flag\" = xyes; then\n fi\n AC_MSG_RESULT($gcc_cv_as_gstabs_flag)\n \n+AC_MSG_CHECKING(linker read-only and read-write section mixing)\n+gcc_cv_ld_ro_rw_mix=unknown\n+if test x$gcc_cv_gld_major_version != x -a x$gcc_cv_gld_minor_version != x; then\n+  if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 10 -o \"$gcc_cv_gld_major_version\" -gt 2 && grep 'EMUL = elf' ../ld/Makefile > /dev/null; then\n+    gcc_cv_ld_ro_rw_mix=read-write\n+  fi\n+elif test x$gcc_cv_as != x -a x$gcc_cv_ld != x -a x$gcc_cv_objdump != x ; then\n+  echo '.section \"myfoosect\", \"a\"' > conftest1.s\n+  echo '.section \"myfoosect\", \"aw\"' > conftest2.s\n+  echo '.byte 1' >> conftest2.s\n+  echo '.section \"myfoosect\", \"a\"' > conftest3.s\n+  echo '.byte 0' >> conftest3.s\n+  if $gcc_cv_as -o conftest1.o conftest1.s \\\n+     && $gcc_cv_as -o conftest2.o conftest2.s \\\n+     && $gcc_cv_as -o conftest3.o conftest3.s \\\n+     && $gcc_cv_ld -shared -o conftest1.so conftest1.o \\\n+\tconftest2.o conftest3.o; then\n+    gcc_cv_ld_ro_rw_mix=`$gcc_cv_objdump -h conftest1.so \\\n+\t\t\t | grep -A1 myfoosect`\n+    if echo \"$gcc_cv_ld_ro_rw_mix\" | grep CONTENTS > /dev/null; then\n+      if echo \"$gcc_cv_ld_ro_rw_mix\" | grep READONLY > /dev/null; then\n+\tgcc_cv_ld_ro_rw_mix=read-only\n+      else\n+\tgcc_cv_ld_ro_rw_mix=read-write\n+      fi\n+    fi\n+  fi\n+changequote(,)dnl\n+  rm -f conftest.* conftest[123].*\n+changequote([,])dnl\n+fi\n+if test x$gcc_cv_ld_ro_rw_mix = xread-write; then\n+\tAC_DEFINE(HAVE_LD_RO_RW_SECTION_MIXING, 1,\n+  [Define if your linker links a mix of read-only\n+   and read-write sections into a read-write section.])\n+fi\n+AC_MSG_RESULT($gcc_cv_ld_ro_rw_mix)\n+\n AC_MSG_CHECKING(linker PT_GNU_EH_FRAME support)\n gcc_cv_ld_eh_frame_hdr=no\n if test x$gcc_cv_gld_major_version != x -a x$gcc_cv_gld_minor_version != x; then"}, {"sha": "cdc447d248d718c9d90fa237d3fb2ece84e2b8b4", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d0f4dc5c9293d5c61fbc60f0966766db4d99e4/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d0f4dc5c9293d5c61fbc60f0966766db4d99e4/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=96d0f4dc5c9293d5c61fbc60f0966766db4d99e4", "patch": "@@ -90,6 +90,11 @@ call_ ## FUNC (void)\t\t\t\t\t\\\n #if defined(EH_FRAME_SECTION_NAME) && !defined(USE_PT_GNU_EH_FRAME)\n # define USE_EH_FRAME_REGISTRY\n #endif\n+#if defined(EH_FRAME_SECTION_NAME) && defined(HAVE_LD_RO_RW_SECTION_MIXING)\n+# define EH_FRAME_SECTION_CONST const\n+#else\n+# define EH_FRAME_SECTION_CONST\n+#endif\n \n /* We do not want to add the weak attribute to the declarations of these\n    routines in unwind-dw2-fde.h because that will cause the definition of\n@@ -188,7 +193,7 @@ STATIC func_ptr __DTOR_LIST__[1]\n #ifdef USE_EH_FRAME_REGISTRY\n /* Stick a label at the beginning of the frame unwind info so we can register\n    and deregister it with the exception handling library code.  */\n-STATIC char __EH_FRAME_BEGIN__[]\n+STATIC EH_FRAME_SECTION_CONST char __EH_FRAME_BEGIN__[]\n      __attribute__((section(EH_FRAME_SECTION_NAME), aligned(4)))\n      = { };\n #endif /* USE_EH_FRAME_REGISTRY */\n@@ -453,7 +458,7 @@ STATIC func_ptr __DTOR_END__[1]\n #ifdef EH_FRAME_SECTION_NAME\n /* Terminate the frame unwind info section with a 4byte 0 as a sentinel;\n    this would be the 'length' field in a real FDE.  */\n-STATIC int __FRAME_END__[]\n+STATIC EH_FRAME_SECTION_CONST int __FRAME_END__[]\n      __attribute__ ((unused, mode(SI), section(EH_FRAME_SECTION_NAME),\n \t\t     aligned(4)))\n      = { 0 };"}, {"sha": "2e8fe614188f58fa2776169b52cca4274746af03", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d0f4dc5c9293d5c61fbc60f0966766db4d99e4/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d0f4dc5c9293d5c61fbc60f0966766db4d99e4/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=96d0f4dc5c9293d5c61fbc60f0966766db4d99e4", "patch": "@@ -117,7 +117,24 @@ void\n default_eh_frame_section ()\n {\n #ifdef EH_FRAME_SECTION_NAME\n+#ifdef HAVE_LD_RO_RW_SECTION_MIXING\n+  int fde_encoding = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/1, /*global=*/0);\n+  int per_encoding = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/2, /*global=*/1);\n+  int lsda_encoding = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/0, /*global=*/0);\n+  int flags;\n+\n+  flags = (! flag_pic\n+\t   || ((fde_encoding & 0x70) != DW_EH_PE_absptr\n+\t       && (fde_encoding & 0x70) != DW_EH_PE_aligned\n+\t       && (per_encoding & 0x70) != DW_EH_PE_absptr\n+\t       && (per_encoding & 0x70) != DW_EH_PE_aligned\n+\t       && (lsda_encoding & 0x70) != DW_EH_PE_absptr\n+\t       && (lsda_encoding & 0x70) != DW_EH_PE_aligned))\n+\t  ? 0 : SECTION_WRITE;\n+  named_section_flags (EH_FRAME_SECTION_NAME, flags);\n+#else\n   named_section_flags (EH_FRAME_SECTION_NAME, SECTION_WRITE);\n+#endif\n #else\n   tree label = get_file_function_name ('F');\n "}, {"sha": "0a5e49fa813c964e2ee84a332ae6df46c78f2225", "filename": "gcc/except.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d0f4dc5c9293d5c61fbc60f0966766db4d99e4/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d0f4dc5c9293d5c61fbc60f0966766db4d99e4/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=96d0f4dc5c9293d5c61fbc60f0966766db4d99e4", "patch": "@@ -3589,6 +3589,33 @@ sjlj_output_call_site_table ()\n   call_site_base += n;\n }\n \n+/* Tell assembler to switch to the section for the exception handling\n+   table.  */\n+\n+void\n+default_exception_section ()\n+{\n+  if (targetm.have_named_sections)\n+    {\n+      int tt_format = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/0, /*global=*/1);\n+      int flags;\n+\n+#ifdef HAVE_LD_RO_RW_SECTION_MIXING\n+      flags = (! flag_pic\n+\t       || ((tt_format & 0x70) != DW_EH_PE_absptr\n+\t\t   && (tt_format & 0x70) != DW_EH_PE_aligned))\n+\t      ? 0 : SECTION_WRITE;\n+#else\n+      flags = SECTION_WRITE;\n+#endif\n+      named_section_flags (\".gcc_except_table\", flags);\n+    }\n+  else if (flag_pic)\n+    data_section ();\n+  else\n+    readonly_data_section ();\n+}\n+\n void\n output_function_exception_table ()\n {"}, {"sha": "a3d283a8b56290c95642da5c2fdd14072807821f", "filename": "gcc/varasm.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d0f4dc5c9293d5c61fbc60f0966766db4d99e4/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d0f4dc5c9293d5c61fbc60f0966766db4d99e4/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=96d0f4dc5c9293d5c61fbc60f0966766db4d99e4", "patch": "@@ -582,20 +582,6 @@ variable_section (decl, reloc)\n     (*targetm.asm_out.select_section) (decl, reloc, DECL_ALIGN (decl));\n }\n \n-/* Tell assembler to switch to the section for the exception handling\n-   table.  */\n-\n-void\n-default_exception_section ()\n-{\n-  if (targetm.have_named_sections)\n-    named_section (NULL_TREE, \".gcc_except_table\", 0);\n-  else if (flag_pic)\n-    data_section ();\n-  else\n-    readonly_data_section ();\n-}\n-\n /* Tell assembler to switch to the section for string merging.  */\n \n void"}]}