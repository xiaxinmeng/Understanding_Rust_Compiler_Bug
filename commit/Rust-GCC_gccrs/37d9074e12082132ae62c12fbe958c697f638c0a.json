{"sha": "37d9074e12082132ae62c12fbe958c697f638c0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdkOTA3NGUxMjA4MjEzMmFlNjJjMTJmYmU5NThjNjk3ZjYzOGMwYQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-03-29T10:52:24Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-03-29T10:54:57Z"}, "message": "aarch64: PR target/99037 Fix RTL represntation in move_lo_quad patterns\n\nThis patch fixes the RTL representation of the move_lo_quad patterns to use aarch64_simd_or_scalar_imm_zero\nfor the zero part rather than a vec_duplicate of zero or a const_int 0.\nThe expander that generates them is also adjusted so that we use and match the correct const_vector forms throughout.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\ngcc/ChangeLog:\n\n\tPR target/99037\n\t* config/aarch64/aarch64-simd.md (move_lo_quad_internal_<mode>): Use\n\taarch64_simd_or_scalar_imm_zero to match zeroes.  Remove pattern\n\tmatching const_int 0.\n\t(move_lo_quad_internal_be_<mode>): Likewise.\n\t(move_lo_quad_<mode>): Update for the above.\n\t* config/aarch64/iterators.md (VQ_2E): Delete.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/99808\n\t* gcc.target/aarch64/pr99808.c: New test.", "tree": {"sha": "c7102ff0938c1a2c1bc1bc005a7f5c2839f49fb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7102ff0938c1a2c1bc1bc005a7f5c2839f49fb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37d9074e12082132ae62c12fbe958c697f638c0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37d9074e12082132ae62c12fbe958c697f638c0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37d9074e12082132ae62c12fbe958c697f638c0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37d9074e12082132ae62c12fbe958c697f638c0a/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25e515d2199d555848dfba01fd5364df94096496", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25e515d2199d555848dfba01fd5364df94096496", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25e515d2199d555848dfba01fd5364df94096496"}], "stats": {"total": 66, "additions": 24, "deletions": 42}, "files": [{"sha": "d86e8e72f18bb6d78098ab85725293f7afab31d4", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 10, "deletions": 39, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d9074e12082132ae62c12fbe958c697f638c0a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d9074e12082132ae62c12fbe958c697f638c0a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=37d9074e12082132ae62c12fbe958c697f638c0a", "patch": "@@ -1586,25 +1586,10 @@\n ;; On big-endian this is { zeroes, operand }\n \n (define_insn \"move_lo_quad_internal_<mode>\"\n-  [(set (match_operand:VQMOV_NO2E 0 \"register_operand\" \"=w,w,w\")\n-\t(vec_concat:VQMOV_NO2E\n+  [(set (match_operand:VQMOV 0 \"register_operand\" \"=w,w,w\")\n+\t(vec_concat:VQMOV\n \t  (match_operand:<VHALF> 1 \"register_operand\" \"w,r,r\")\n-\t  (vec_duplicate:<VHALF> (const_int 0))))]\n-  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n-  \"@\n-   dup\\\\t%d0, %1.d[0]\n-   fmov\\\\t%d0, %1\n-   dup\\\\t%d0, %1\"\n-  [(set_attr \"type\" \"neon_dup<q>,f_mcr,neon_dup<q>\")\n-   (set_attr \"length\" \"4\")\n-   (set_attr \"arch\" \"simd,fp,simd\")]\n-)\n-\n-(define_insn \"move_lo_quad_internal_<mode>\"\n-  [(set (match_operand:VQ_2E 0 \"register_operand\" \"=w,w,w\")\n-\t(vec_concat:VQ_2E\n-\t  (match_operand:<VHALF> 1 \"register_operand\" \"w,r,r\")\n-\t  (const_int 0)))]\n+\t  (match_operand:<VHALF> 2 \"aarch64_simd_or_scalar_imm_zero\")))]\n   \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n   \"@\n    dup\\\\t%d0, %1.d[0]\n@@ -1616,24 +1601,9 @@\n )\n \n (define_insn \"move_lo_quad_internal_be_<mode>\"\n-  [(set (match_operand:VQMOV_NO2E 0 \"register_operand\" \"=w,w,w\")\n-\t(vec_concat:VQMOV_NO2E\n-\t  (vec_duplicate:<VHALF> (const_int 0))\n-\t  (match_operand:<VHALF> 1 \"register_operand\" \"w,r,r\")))]\n-  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n-  \"@\n-   dup\\\\t%d0, %1.d[0]\n-   fmov\\\\t%d0, %1\n-   dup\\\\t%d0, %1\"\n-  [(set_attr \"type\" \"neon_dup<q>,f_mcr,neon_dup<q>\")\n-   (set_attr \"length\" \"4\")\n-   (set_attr \"arch\" \"simd,fp,simd\")]\n-)\n-\n-(define_insn \"move_lo_quad_internal_be_<mode>\"\n-  [(set (match_operand:VQ_2E 0 \"register_operand\" \"=w,w,w\")\n-\t(vec_concat:VQ_2E\n-\t  (const_int 0)\n+  [(set (match_operand:VQMOV 0 \"register_operand\" \"=w,w,w\")\n+\t(vec_concat:VQMOV\n+\t  (match_operand:<VHALF> 2 \"aarch64_simd_or_scalar_imm_zero\")\n \t  (match_operand:<VHALF> 1 \"register_operand\" \"w,r,r\")))]\n   \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n   \"@\n@@ -1647,13 +1617,14 @@\n \n (define_expand \"move_lo_quad_<mode>\"\n   [(match_operand:VQMOV 0 \"register_operand\")\n-   (match_operand:VQMOV 1 \"register_operand\")]\n+   (match_operand:<VHALF> 1 \"register_operand\")]\n   \"TARGET_SIMD\"\n {\n+  rtx zs = CONST0_RTX (<VHALF>mode);\n   if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_move_lo_quad_internal_be_<mode> (operands[0], operands[1]));\n+    emit_insn (gen_move_lo_quad_internal_be_<mode> (operands[0], operands[1], zs));\n   else\n-    emit_insn (gen_move_lo_quad_internal_<mode> (operands[0], operands[1]));\n+    emit_insn (gen_move_lo_quad_internal_<mode> (operands[0], operands[1], zs));\n   DONE;\n }\n )"}, {"sha": "5f5abd60525ba52fdb466e94a92ff4d011bee5cd", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d9074e12082132ae62c12fbe958c697f638c0a/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d9074e12082132ae62c12fbe958c697f638c0a/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=37d9074e12082132ae62c12fbe958c697f638c0a", "patch": "@@ -125,9 +125,6 @@\n ;; VQ without 2 element modes.\n (define_mode_iterator VQ_NO2E [V16QI V8HI V4SI V8HF V4SF V8BF])\n \n-;; Quad vector with only 2 element modes.\n-(define_mode_iterator VQ_2E [V2DI V2DF])\n-\n ;; BFmode vector modes.\n (define_mode_iterator VBF [V4BF V8BF])\n "}, {"sha": "4d7edab5c37ed3664cc9344bcc59e47a3b6b6d92", "filename": "gcc/testsuite/gcc.target/aarch64/pr99808.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d9074e12082132ae62c12fbe958c697f638c0a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr99808.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d9074e12082132ae62c12fbe958c697f638c0a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr99808.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr99808.c?ref=37d9074e12082132ae62c12fbe958c697f638c0a", "patch": "@@ -0,0 +1,14 @@\n+/* PR target/99808 */\n+/* PR target/99037 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Og -fweb -fno-forward-propagate -g\" } */\n+\n+#include <arm_neon.h>\n+\n+float32x4_t\n+foo (void)\n+{\n+  float64x2_t arg2 = vcombine_f64 ((float64x1_t) 0UL, (float64x1_t) 1UL);\n+  return vcvt_high_f32_f64 ((float32x2_t) 1UL, arg2);\n+}\n+"}]}