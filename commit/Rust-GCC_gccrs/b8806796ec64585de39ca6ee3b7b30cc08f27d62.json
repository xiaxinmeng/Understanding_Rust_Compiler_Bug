{"sha": "b8806796ec64585de39ca6ee3b7b30cc08f27d62", "node_id": "C_kwDOANBUbNoAKGI4ODA2Nzk2ZWM2NDU4NWRlMzljYTZlZTNiN2IzMGNjMDhmMjdkNjI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-21T14:22:23Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-21T16:07:34Z"}, "message": "libstdc++: Ensure all feature test macros have type long [PR87193]\n\nThis defines all the __cpp_lib_xxx macros as type long, as required by\nthe standard. We had an inconsistent mix of int and long, sometimes even\nfor the same macro name.\n\nThe __cpp_lib_experimental_xxx macros are left as type int, because\nthat's what it says in the relevant TS specs.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/87193\n\tPR libstdc++/104019\n\t* include/bits/alloc_traits.h (__cpp_lib_allocator_traits_is_always_equal):\n\tDefine as type long.\n\t* include/bits/allocator.h (__cpp_lib_incomplete_container_elements):\n\tLikewise.\n\t* include/bits/basic_string.h (__cpp_lib_string_udls): Likewise.\n\t* include/bits/chrono.h (__cpp_lib_chrono): Likewise.\n\t(__cpp_lib_chrono_udls): Likewise.\n\t* include/bits/move.h (__cpp_lib_addressof_constexpr): Likewise.\n\t* include/bits/node_handle.h (__cpp_lib_node_extract): Likewise.\n\t* include/bits/range_access.h (__cpp_lib_nonmember_container_access):\n\tLikewise.\n\t* include/bits/shared_ptr.h (__cpp_lib_enable_shared_from_this):\n\tLikewise.\n\t* include/bits/stl_algo.h (__cpp_lib_clamp): Likewise.\n\t(__cpp_lib_sample): Likewise.\n\t* include/bits/stl_algobase.h (__cpp_lib_robust_nonmodifying_seq_ops):\n\tLikewise.\n\t* include/bits/stl_function.h (__cpp_lib_transparent_operators):\n\tLikewise.\n\t* include/bits/stl_iterator.h (__cpp_lib_make_reverse_iterator):\n\tLikewise.\n\t* include/bits/stl_map.h (__cpp_lib_map_try_emplace):\n\tLikewise.\n\t* include/bits/stl_tree.h (__cpp_lib_generic_associative_lookup):\n\tLikewise.\n\t* include/bits/unique_ptr.h (__cpp_lib_make_unique):\n\tLikewise.\n\t* include/bits/unordered_map.h (__cpp_lib_unordered_map_try_emplace):\n\tLikewise.\n\t* include/c_global/cmath (__cpp_lib_hypot): Likewise.\n\t* include/c_global/cstddef (__cpp_lib_byte): Likewise.\n\t* include/std/atomic (__cpp_lib_atomic_is_always_lock_free):\n\tLikewise.\n\t* include/std/complex (__cpp_lib_complex_udls): Likewise.\n\t* include/std/filesystem (__cpp_lib_filesystem): Likewise.\n\t* include/std/functional (__cpp_lib_not_fn): Likewise.\n\t(__cpp_lib_boyer_moore_searcher): Likewise.\n\t* include/std/iomanip (__cpp_lib_quoted_string_io): Likewise.\n\t* include/std/mutex (__cpp_lib_scoped_lock): Likewise.\n\t* include/std/numeric (__cpp_lib_gcd_lcm): Likewise.\n\t(__cpp_lib_gcd, __cpp_lib_lcm): Likewise.\n\t* include/std/tuple (__cpp_lib_apply): Likewise.\n\t(__cpp_lib_make_from_tuple): Likewise.\n\t* include/std/type_traits (__cpp_lib_integral_constant_callable)\n\t(__cpp_lib_bool_constant, __cpp_lib_logical_traits)\n\t(__cpp_lib_is_null_pointer, __cpp_lib_transformation_trait_aliases)\n\t(__cpp_lib_result_of_sfinae, __cpp_lib_void_t)\n\t(__cpp_lib_is_swappable, __cpp_lib_is_invocable)\n\t(__cpp_lib_has_unique_object_representations)\n\t(__cpp_lib_is_aggregate): Likewise.\n\t* include/std/version: Likewise.\n\t* libsupc++/new (__cpp_lib_launder): Likewise.", "tree": {"sha": "03426541158133438b4ce614c10a3409f3a30145", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03426541158133438b4ce614c10a3409f3a30145"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8806796ec64585de39ca6ee3b7b30cc08f27d62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8806796ec64585de39ca6ee3b7b30cc08f27d62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8806796ec64585de39ca6ee3b7b30cc08f27d62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8806796ec64585de39ca6ee3b7b30cc08f27d62/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2da1ef06ff4bee961f51321dee9d0866c7ebb1cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2da1ef06ff4bee961f51321dee9d0866c7ebb1cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2da1ef06ff4bee961f51321dee9d0866c7ebb1cc"}], "stats": {"total": 188, "additions": 94, "deletions": 94}, "files": [{"sha": "a4d06d3fc7ab6d191d9f42b70aa7d214ee53576f", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -43,7 +43,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus >= 201103L\n-#define __cpp_lib_allocator_traits_is_always_equal 201411\n+#define __cpp_lib_allocator_traits_is_always_equal 201411L\n \n   /// @cond undocumented\n   struct __allocator_traits_base"}, {"sha": "e0c322b5941ea21d59e77b71f0c4f4744d50514f", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -49,7 +49,7 @@\n #include <type_traits>\n #endif\n \n-#define __cpp_lib_incomplete_container_elements 201505\n+#define __cpp_lib_incomplete_container_elements 201505L\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {"}, {"sha": "c3fbc53953cb948104947354518fc4a0a651f504", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -4309,7 +4309,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus >= 201402L\n \n-#define __cpp_lib_string_udls 201304\n+#define __cpp_lib_string_udls 201304L\n \n   inline namespace literals\n   {"}, {"sha": "421898516ae43b9cedac0f9b54014cf693fa3e1a", "filename": "libstdc++-v3/include/bits/chrono.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchrono.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchrono.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchrono.h?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -327,7 +327,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // C++20\n \n #if __cplusplus >= 201703L\n-# define __cpp_lib_chrono 201611\n+# define __cpp_lib_chrono 201611L\n \n     template<typename _ToDur, typename _Rep, typename _Period>\n       constexpr __enable_if_is_duration<_ToDur>\n@@ -1198,7 +1198,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   } // namespace chrono\n \n #if __cplusplus >= 201402L\n-    #define __cpp_lib_chrono_udls 201304\n+#define __cpp_lib_chrono_udls 201304L\n \n   inline namespace literals\n   {"}, {"sha": "af4735426288d880465c04515df6e8efeda72bec", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -130,7 +130,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus > 201402L\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // 2296. std::addressof should be constexpr\n-# define __cpp_lib_addressof_constexpr 201603\n+# define __cpp_lib_addressof_constexpr 201603L\n #endif\n   /**\n    *  @brief Returns the actual address of the object or function"}, {"sha": "d7a7a30c8390375a7160a851139a5ae5c8b29c56", "filename": "libstdc++-v3/include/bits/node_handle.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fnode_handle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fnode_handle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fnode_handle.h?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -34,7 +34,7 @@\n #pragma GCC system_header\n \n #if __cplusplus >= 201703L\n-# define __cpp_lib_node_extract 201606\n+# define __cpp_lib_node_extract 201606L\n \n #include <new>\n #include <bits/alloc_traits.h>"}, {"sha": "78fdfe66035cb59438b26432896394a9f13f758b", "filename": "libstdc++-v3/include/bits/range_access.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -252,7 +252,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // C++14\n \n #if __cplusplus >= 201703L\n-#define __cpp_lib_nonmember_container_access 201411\n+#define __cpp_lib_nonmember_container_access 201411L\n \n   /**\n    *  @brief  Return the size of a container."}, {"sha": "eb828dc35a8b0685aa04fcde33468a4e16b98a2e", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -939,7 +939,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return shared_ptr<const _Tp>(this->_M_weak_this); }\n \n #if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n-#define __cpp_lib_enable_shared_from_this 201603\n+#define __cpp_lib_enable_shared_from_this 201603L\n       /** @{\n        * Get a `weak_ptr` referring to the object that has `*this` as its base.\n        * @since C++17"}, {"sha": "1f07b9e65897da10b1548f5989a72a2f250d6296", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -3603,7 +3603,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus >= 201703L\n \n-#define __cpp_lib_clamp 201603\n+#define __cpp_lib_clamp 201603L\n \n   /**\n    *  @brief  Returns the value clamped between lo and hi.\n@@ -5858,7 +5858,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n     }\n \n #if __cplusplus > 201402L\n-#define __cpp_lib_sample 201603\n+#define __cpp_lib_sample 201603L\n   /// Take a random sample from a population.\n   template<typename _PopulationIterator, typename _SampleIterator,\n            typename _Distance, typename _UniformRandomBitGenerator>"}, {"sha": "84a1f9e98f645d2a0eddb1b054fb5502deac7403", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -1645,7 +1645,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \n #if __cplusplus > 201103L\n \n-#define __cpp_lib_robust_nonmodifying_seq_ops 201304\n+#define __cpp_lib_robust_nonmodifying_seq_ops 201304L\n \n   /**\n    *  @brief Tests a range for element-wise equality."}, {"sha": "fee07b27c275e096891df92c2213f974489daa69", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -243,7 +243,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus > 201103L\n \n-#define __cpp_lib_transparent_operators 201510\n+#define __cpp_lib_transparent_operators 201510L\n \n   template<>\n     struct plus<void>"}, {"sha": "6a9fd1ba48e430e996d6e7697ed5a0a0e320cde7", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -639,7 +639,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return reverse_iterator<_Iterator>(__i); }\n \n # if __cplusplus >= 201402L\n-#  define __cpp_lib_make_reverse_iterator 201402\n+#  define __cpp_lib_make_reverse_iterator 201402L\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // DR 2285. make_reverse_iterator"}, {"sha": "9c2b0745673431b4b396ba27982170478838137e", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -695,7 +695,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif // C++17\n \n #if __cplusplus > 201402L\n-#define __cpp_lib_map_try_emplace 201411\n+#define __cpp_lib_map_try_emplace 201411L\n       /**\n        *  @brief Attempts to build and insert a std::pair into the %map.\n        *"}, {"sha": "a4de61417652a288e361a55fcc8bb7a9838c58a5", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -77,7 +77,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus > 201103L\n-# define __cpp_lib_generic_associative_lookup 201304\n+# define __cpp_lib_generic_associative_lookup 201304L\n #endif\n \n   // Red-black tree class, designed for use in implementing STL"}, {"sha": "8f4430f61f5d4aa81f046bfa9d98f72284e0d914", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -945,7 +945,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n \n #if __cplusplus >= 201402L\n-#define __cpp_lib_make_unique 201304\n+#define __cpp_lib_make_unique 201304L\n \n   /// @cond undocumented\n namespace __detail"}, {"sha": "d5edfde8caf450845f36b035128645aecb1e57d2", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -443,7 +443,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       insert(const_iterator, node_type&& __nh)\n       { return _M_h._M_reinsert_node(std::move(__nh)).position; }\n \n-#define __cpp_lib_unordered_map_try_emplace 201411\n+#define __cpp_lib_unordered_map_try_emplace 201411L\n       /**\n        *  @brief Attempts to build and insert a std::pair into the\n        *  %unordered_map."}, {"sha": "1b993f30330450add628905b243361d782156bf4", "filename": "libstdc++-v3/include/c_global/cmath", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -1847,7 +1847,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201703L\n \n   // [c.math.hypot3], three-dimensional hypotenuse\n-#define __cpp_lib_hypot 201603\n+#define __cpp_lib_hypot 201603L\n \n   template<typename _Tp>\n     inline _Tp"}, {"sha": "4970c2dfcfbf055c3ffd22ae5c35c4ad82859717", "filename": "libstdc++-v3/include/c_global/cstddef", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstddef", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstddef", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstddef?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -63,7 +63,7 @@ namespace std\n namespace std\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-#define __cpp_lib_byte 201603\n+#define __cpp_lib_byte 201603L\n \n   /// std::byte\n   enum class byte : unsigned char {};"}, {"sha": "bc57659b6e772f49dbcbc43affcc64e77daea147", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -50,7 +50,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n \n #if __cplusplus >= 201703L\n-# define __cpp_lib_atomic_is_always_lock_free 201603\n+# define __cpp_lib_atomic_is_always_lock_free 201603L\n #endif\n \n   template<typename _Tp>"}, {"sha": "8f9368fd7d04f25d3313625de70c3fb8b95e63a3", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -1955,7 +1955,7 @@ inline namespace literals {\n inline namespace complex_literals {\n #pragma GCC diagnostic push\n #pragma GCC diagnostic ignored \"-Wliteral-suffix\"\n-#define __cpp_lib_complex_udls 201309\n+#define __cpp_lib_complex_udls 201309L\n \n   constexpr std::complex<float>\n   operator\"\"if(long double __num)"}, {"sha": "dd112a254ad3c47863cba7fb07e81c1176081bab", "filename": "libstdc++-v3/include/std/filesystem", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffilesystem", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffilesystem", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffilesystem?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -46,7 +46,7 @@\n #include <bits/fs_dir.h>\n #include <bits/fs_ops.h>\n \n-#define __cpp_lib_filesystem 201703\n+#define __cpp_lib_filesystem 201703L\n \n #endif // C++17\n "}, {"sha": "685a3e167ee3577e0aa2317eaee2571a5f9271ee", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -1062,7 +1062,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : true_type { };\n \n   // [func.not_fn] Function template not_fn\n-#define __cpp_lib_not_fn 201603\n+#define __cpp_lib_not_fn 201603L\n   /** Wrap a function object to create one that negates its result.\n    *\n    * The function template `std::not_fn` creates a \"forwarding call wrapper\",\n@@ -1085,7 +1085,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   // Searchers\n-#define __cpp_lib_boyer_moore_searcher 201603\n+#define __cpp_lib_boyer_moore_searcher 201603L\n \n   template<typename _ForwardIterator1, typename _BinaryPredicate = equal_to<>>\n     class default_searcher"}, {"sha": "537168139936af245b494d0ca9e89d34335b8435", "filename": "libstdc++-v3/include/std/iomanip", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -448,7 +448,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus >= 201402L\n \n-#define __cpp_lib_quoted_string_io 201304\n+#define __cpp_lib_quoted_string_io 201304L\n \n   /**\n    * @brief Manipulator for quoted strings."}, {"sha": "f500818d9c9ea1d1657ccd895d69825886bb0d9f", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -682,7 +682,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n #if __cplusplus >= 201703L\n-#define __cpp_lib_scoped_lock 201703\n+#define __cpp_lib_scoped_lock 201703L\n   /** @brief A scoped lock type for multiple lockable objects.\n    *\n    * A scoped_lock controls mutex ownership within a scope, releasing"}, {"sha": "5388239ef04de62cc5a3cf863cb3061a4d4634cb", "filename": "libstdc++-v3/include/std/numeric", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -156,10 +156,10 @@ namespace __detail\n \n #if __cplusplus >= 201703L\n \n-#define __cpp_lib_gcd_lcm 201606\n+#define __cpp_lib_gcd_lcm 201606L\n // These were used in drafts of SD-6:\n-#define __cpp_lib_gcd 201606\n-#define __cpp_lib_lcm 201606\n+#define __cpp_lib_gcd 201606L\n+#define __cpp_lib_lcm 201606L\n \n   /// Greatest common divisor\n   template<typename _Mn, typename _Nn>"}, {"sha": "6d0060a191c6da3631477e5ca43e8c16bf62f9e7", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -1843,7 +1843,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline constexpr bool __unpack_std_tuple<_Trait, _Tp, const tuple<_Up...>&>\n       = _Trait<_Tp, const _Up&...>::value;\n \n-# define __cpp_lib_apply 201603\n+# define __cpp_lib_apply 201603L\n \n   template <typename _Fn, typename _Tuple, size_t... _Idx>\n     constexpr decltype(auto)\n@@ -1865,7 +1865,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t       _Indices{});\n     }\n \n-#define __cpp_lib_make_from_tuple  201606\n+#define __cpp_lib_make_from_tuple  201606L\n \n   template <typename _Tp, typename _Tuple, size_t... _Idx>\n     constexpr _Tp"}, {"sha": "2572d8edd693e042156c09fec967d5ee6dd966fc", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -67,7 +67,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr operator value_type() const noexcept { return value; }\n #if __cplusplus > 201103L\n \n-#define __cpp_lib_integral_constant_callable 201304\n+#define __cpp_lib_integral_constant_callable 201304L\n \n       constexpr value_type operator()() const noexcept { return value; }\n #endif\n@@ -91,7 +91,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// @endcond\n \n #if __cplusplus >= 201703L\n-# define __cpp_lib_bool_constant 201505\n+# define __cpp_lib_bool_constant 201505L\n   /// Alias template for compile-time boolean constant types.\n   /// @since C++17\n   template<bool __v>\n@@ -188,7 +188,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline constexpr bool __and_v = __and_<_Bn...>::value;\n   /// @endcond\n \n-#define __cpp_lib_logical_traits 201510\n+#define __cpp_lib_logical_traits 201510L\n \n   template<typename... _Bn>\n     struct conjunction\n@@ -548,7 +548,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct is_function<_Tp&&>\n     : public false_type { };\n \n-#define __cpp_lib_is_null_pointer 201309\n+#define __cpp_lib_is_null_pointer 201309L\n \n   template<typename>\n     struct __is_null_pointer_helper\n@@ -1594,7 +1594,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus > 201103L\n \n-#define __cpp_lib_transformation_trait_aliases 201304\n+#define __cpp_lib_transformation_trait_aliases 201304L\n \n   /// Alias template for remove_const\n   template<typename _Tp>\n@@ -2403,7 +2403,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Sfinae-friendly result_of implementation:\n \n-#define __cpp_lib_result_of_sfinae 201210\n+#define __cpp_lib_result_of_sfinae 201210L\n \n   /// @cond undocumented\n   struct __invoke_memfun_ref { };\n@@ -2631,7 +2631,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // C++14\n \n #if __cplusplus >= 201703L || !defined(__STRICT_ANSI__) // c++17 or gnu++11\n-#define __cpp_lib_void_t 201411\n+#define __cpp_lib_void_t 201411L\n   /// A metafunction that always yields void, used for detecting valid types.\n   template<typename...> using void_t = void;\n #endif\n@@ -2768,7 +2768,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// @endcond\n \n #if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n-#define __cpp_lib_is_swappable 201603\n+#define __cpp_lib_is_swappable 201603L\n   /// Metafunctions used for detecting swappable types: p0185r1\n \n   /// is_swappable\n@@ -3015,7 +3015,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// @endcond\n \n #if __cplusplus >= 201703L\n-# define __cpp_lib_is_invocable 201703\n+# define __cpp_lib_is_invocable 201703L\n \n   /// std::invoke_result\n   template<typename _Functor, typename... _ArgTypes>\n@@ -3296,7 +3296,7 @@ template<typename _Ret, typename _Fn, typename... _Args>\n /// @}\n \n #ifdef _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP\n-# define __cpp_lib_has_unique_object_representations 201606\n+# define __cpp_lib_has_unique_object_representations 201606L\n   /// has_unique_object_representations\n   /// @since C++17\n   template<typename _Tp>\n@@ -3316,7 +3316,7 @@ template<typename _Ret, typename _Fn, typename... _Args>\n #endif\n \n #ifdef _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE\n-# define __cpp_lib_is_aggregate 201703\n+# define __cpp_lib_is_aggregate 201703L\n   /// is_aggregate\n   /// @since C++17\n   template<typename _Tp>"}, {"sha": "30e04b55555bfa30acd45692221f9da463691489", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -36,7 +36,7 @@\n \n // c++03\n #if _GLIBCXX_HOSTED\n-# define __cpp_lib_incomplete_container_elements 201505\n+# define __cpp_lib_incomplete_container_elements 201505L\n #endif\n \n #if !defined(__STRICT_ANSI__)\n@@ -46,22 +46,22 @@\n \n #if __cplusplus >= 201103L\n // c++11\n-#define __cpp_lib_is_null_pointer 201309\n-#define __cpp_lib_result_of_sfinae 201210\n+#define __cpp_lib_is_null_pointer 201309L\n+#define __cpp_lib_result_of_sfinae 201210L\n \n #if _GLIBCXX_HOSTED\n-# define __cpp_lib_allocator_traits_is_always_equal 201411\n+# define __cpp_lib_allocator_traits_is_always_equal 201411L\n #if __cplusplus <= 201703L // N.B. updated value in C++20\n # define __cpp_lib_shared_ptr_arrays 201611L\n #endif\n #endif\n \n #if !defined(__STRICT_ANSI__)\n // gnu++11\n-# define __cpp_lib_is_swappable 201603\n-# define __cpp_lib_void_t 201411\n+# define __cpp_lib_is_swappable 201603L\n+# define __cpp_lib_void_t 201411L\n # if _GLIBCXX_HOSTED\n-#  define __cpp_lib_enable_shared_from_this 201603\n+#  define __cpp_lib_enable_shared_from_this 201603L\n # endif\n #endif\n \n@@ -73,108 +73,108 @@\n #if __cpp_impl_coroutine\n # define __cpp_lib_coroutine 201902L\n #endif\n-#define __cpp_lib_integral_constant_callable 201304\n+#define __cpp_lib_integral_constant_callable 201304L\n #define __cpp_lib_is_final 201402L\n-#define __cpp_lib_transformation_trait_aliases 201304\n+#define __cpp_lib_transformation_trait_aliases 201304L\n \n #if _GLIBCXX_HOSTED\n-# define __cpp_lib_chrono_udls 201304\n-# define __cpp_lib_complex_udls 201309\n-# define __cpp_lib_exchange_function 201304\n-# define __cpp_lib_generic_associative_lookup 201304\n-# define __cpp_lib_integer_sequence 201304\n-# define __cpp_lib_make_reverse_iterator 201402\n-# define __cpp_lib_make_unique 201304\n+# define __cpp_lib_chrono_udls 201304L\n+# define __cpp_lib_complex_udls 201309L\n+# define __cpp_lib_exchange_function 201304L\n+# define __cpp_lib_generic_associative_lookup 201304L\n+# define __cpp_lib_integer_sequence 201304L\n+# define __cpp_lib_make_reverse_iterator 201402L\n+# define __cpp_lib_make_unique 201304L\n # ifndef _GLIBCXX_DEBUG // PR libstdc++/70303\n #  define __cpp_lib_null_iterators 201304L\n # endif\n-# define __cpp_lib_quoted_string_io 201304\n-# define __cpp_lib_robust_nonmodifying_seq_ops 201304\n+# define __cpp_lib_quoted_string_io 201304L\n+# define __cpp_lib_robust_nonmodifying_seq_ops 201304L\n # ifdef _GLIBCXX_HAS_GTHREADS\n #  define __cpp_lib_shared_timed_mutex 201402L\n # endif\n-# define __cpp_lib_string_udls 201304\n-# define __cpp_lib_transparent_operators 201510\n+# define __cpp_lib_string_udls 201304L\n+# define __cpp_lib_transparent_operators 201510L\n # define __cpp_lib_tuple_element_t 201402L\n # define __cpp_lib_tuples_by_type 201304L\n #endif\n \n #if __cplusplus >= 201703L\n // c++17\n-#define __cpp_lib_addressof_constexpr 201603\n-#define __cpp_lib_atomic_is_always_lock_free 201603\n-#define __cpp_lib_bool_constant 201505\n-#define __cpp_lib_byte 201603\n+#define __cpp_lib_addressof_constexpr 201603L\n+#define __cpp_lib_atomic_is_always_lock_free 201603L\n+#define __cpp_lib_bool_constant 201505L\n+#define __cpp_lib_byte 201603L\n #ifdef _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP\n-# define __cpp_lib_has_unique_object_representations 201606\n+# define __cpp_lib_has_unique_object_representations 201606L\n #endif\n #ifdef _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE\n-# define __cpp_lib_is_aggregate 201703\n+# define __cpp_lib_is_aggregate 201703L\n #endif\n-#define __cpp_lib_is_invocable 201703\n-#define __cpp_lib_is_swappable 201603\n+#define __cpp_lib_is_invocable 201703L\n+#define __cpp_lib_is_swappable 201603L\n #ifdef _GLIBCXX_HAVE_BUILTIN_LAUNDER\n-# define __cpp_lib_launder 201606\n+# define __cpp_lib_launder 201606L\n #endif\n-#define __cpp_lib_logical_traits 201510\n+#define __cpp_lib_logical_traits 201510L\n #define __cpp_lib_type_trait_variable_templates 201510L\n #define __cpp_lib_uncaught_exceptions 201411L\n-#define __cpp_lib_void_t 201411\n+#define __cpp_lib_void_t 201411L\n \n #if _GLIBCXX_HOSTED\n #define __cpp_lib_any 201606L\n-#define __cpp_lib_apply 201603\n+#define __cpp_lib_apply 201603L\n #if __cplusplus == 201703L // N.B. updated value in C++20\n # define __cpp_lib_array_constexpr 201803L\n #endif\n-#define __cpp_lib_as_const 201510\n-#define __cpp_lib_boyer_moore_searcher 201603\n-#define __cpp_lib_chrono 201611\n-#define __cpp_lib_clamp 201603\n+#define __cpp_lib_as_const 201510L\n+#define __cpp_lib_boyer_moore_searcher 201603L\n+#define __cpp_lib_chrono 201611L\n+#define __cpp_lib_clamp 201603L\n #if __cplusplus == 201703L // N.B. updated value in C++20\n # if _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED\n #  define __cpp_lib_constexpr_char_traits 201611L\n #  define __cpp_lib_constexpr_string 201611L\n # endif\n #endif\n-#define __cpp_lib_enable_shared_from_this 201603\n+#define __cpp_lib_enable_shared_from_this 201603L\n #define __cpp_lib_execution 201902L // FIXME: should be 201603L\n-#define __cpp_lib_filesystem 201703\n-#define __cpp_lib_gcd 201606\n-#define __cpp_lib_gcd_lcm 201606\n+#define __cpp_lib_filesystem 201703L\n+#define __cpp_lib_gcd 201606L\n+#define __cpp_lib_gcd_lcm 201606L\n #ifdef __GCC_DESTRUCTIVE_SIZE\n # define __cpp_lib_hardware_interference_size 201703L\n #endif\n-#define __cpp_lib_hypot 201603\n+#define __cpp_lib_hypot 201603L\n #define __cpp_lib_invoke 201411L\n-#define __cpp_lib_lcm 201606\n-#define __cpp_lib_make_from_tuple 201606\n-#define __cpp_lib_map_try_emplace 201411\n+#define __cpp_lib_lcm 201606L\n+#define __cpp_lib_make_from_tuple 201606L\n+#define __cpp_lib_map_try_emplace 201411L\n #define __cpp_lib_math_special_functions 201603L\n #ifdef _GLIBCXX_HAS_GTHREADS\n # define __cpp_lib_memory_resource 201603L\n #else\n # define __cpp_lib_memory_resource 1\n #endif\n-#define __cpp_lib_node_extract 201606\n-#define __cpp_lib_nonmember_container_access 201411\n-#define __cpp_lib_not_fn 201603\n+#define __cpp_lib_node_extract 201606L\n+#define __cpp_lib_nonmember_container_access 201411L\n+#define __cpp_lib_not_fn 201603L\n #if __cplusplus == 201703L // N.B. updated value in C++20\n # define __cpp_lib_optional 201606L\n #endif\n #define __cpp_lib_parallel_algorithm 201603L\n #define __cpp_lib_raw_memory_algorithms 201606L\n-#define __cpp_lib_sample 201603\n+#define __cpp_lib_sample 201603L\n #ifdef _GLIBCXX_HAS_GTHREADS\n-# define __cpp_lib_scoped_lock 201703\n+# define __cpp_lib_scoped_lock 201703L\n # define __cpp_lib_shared_mutex 201505L\n #endif\n #define __cpp_lib_shared_ptr_weak_type 201606L\n #define __cpp_lib_string_view 201803L\n #if _GLIBCXX_HAVE_USELOCALE\n # define __cpp_lib_to_chars 201611L\n #endif\n-#define __cpp_lib_unordered_map_try_emplace 201411\n+#define __cpp_lib_unordered_map_try_emplace 201411L\n #ifndef _GLIBCXX_HAVE_COND_TRIVIAL_SPECIAL_MEMBERS\n // N.B. updated value in C++20\n # define __cpp_lib_variant 202102L"}, {"sha": "ecd82f6b2544ed265d18955c1518fd1494b6d912", "filename": "libstdc++-v3/libsupc++/new", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8806796ec64585de39ca6ee3b7b30cc08f27d62/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew?ref=b8806796ec64585de39ca6ee3b7b30cc08f27d62", "patch": "@@ -186,7 +186,7 @@ inline void operator delete[](void*, void*) _GLIBCXX_USE_NOEXCEPT { }\n namespace std\n {\n #ifdef _GLIBCXX_HAVE_BUILTIN_LAUNDER\n-#define __cpp_lib_launder 201606\n+#define __cpp_lib_launder 201606L\n   /// Pointer optimization barrier [ptr.launder]\n   template<typename _Tp>\n     [[nodiscard]] constexpr _Tp*"}]}