{"sha": "048e5cef65a7c108ba7a2b16ca12ba70b9759527", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ4ZTVjZWY2NWE3YzEwOGJhN2EyYjE2Y2ExMmJhNzBiOTc1OTUyNw==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2008-08-22T12:59:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-22T12:59:45Z"}, "message": "exp_ch5.adb, [...]: Rename...\n\n2008-08-22  Bob Duff  <duff@adacore.com>\n\n\t* exp_ch5.adb, exp_ch7.adb, exp_ch7.ads, exp_util.adb, freeze.adb,\n\texp_ch4.adb, exp_ch6.ads, exp_ch6.adb, sem_ch6.adb, exp_aggr.adb,\n\texp_intr.adb, exp_ch3.adb: Rename:\n\tExp_Ch7.Controlled_Type => Needs_Finalization\n\tExp_Ch7.CW_Or_Controlled_Type => CW_Or_Has_Controlled_Part\n\tExp_Ch5.Expand_N_Extended_Return_Statement.Controlled_Type =>\n\t Has_Controlled_Parts\n\t(Has_Some_Controlled_Component): Fix bug in array case.\n\nFrom-SVN: r139452", "tree": {"sha": "c33d7da6bd7121ca500be077fd85be7cd538b1bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c33d7da6bd7121ca500be077fd85be7cd538b1bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/048e5cef65a7c108ba7a2b16ca12ba70b9759527", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048e5cef65a7c108ba7a2b16ca12ba70b9759527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/048e5cef65a7c108ba7a2b16ca12ba70b9759527", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048e5cef65a7c108ba7a2b16ca12ba70b9759527/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "beeab17c6ed0733203002932c08d1d3f3fe5d053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beeab17c6ed0733203002932c08d1d3f3fe5d053", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beeab17c6ed0733203002932c08d1d3f3fe5d053"}], "stats": {"total": 231, "additions": 131, "deletions": 100}, "files": [{"sha": "1ae24d8238a094bf9d07b1f3cd4e3b1dc935ed49", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=048e5cef65a7c108ba7a2b16ca12ba70b9759527", "patch": "@@ -1,3 +1,14 @@\n+2008-08-22  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch5.adb, exp_ch7.adb, exp_ch7.ads, exp_util.adb, freeze.adb,\n+\texp_ch4.adb, exp_ch6.ads, exp_ch6.adb, sem_ch6.adb, exp_aggr.adb,\n+\texp_intr.adb, exp_ch3.adb: Rename:\n+\tExp_Ch7.Controlled_Type => Needs_Finalization\n+\tExp_Ch7.CW_Or_Controlled_Type => CW_Or_Has_Controlled_Part\n+\tExp_Ch5.Expand_N_Extended_Return_Statement.Controlled_Type =>\n+\t Has_Controlled_Parts\n+\t(Has_Some_Controlled_Component): Fix bug in array case.\n+\n 2008-08-22  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch8.adb: Minor reformatting"}, {"sha": "c81e401381dc0a07314670aff72016f1d0b8b191", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=048e5cef65a7c108ba7a2b16ca12ba70b9759527", "patch": "@@ -973,7 +973,7 @@ package body Exp_Aggr is\n          if Present (Flist) then\n             F := New_Copy_Tree (Flist);\n \n-         elsif Present (Etype (N)) and then Controlled_Type (Etype (N)) then\n+         elsif Present (Etype (N)) and then Needs_Finalization (Etype (N)) then\n             if Is_Entity_Name (Into)\n               and then Present (Scope (Entity (Into)))\n             then\n@@ -1137,7 +1137,7 @@ package body Exp_Aggr is\n                      Expression => Make_Null (Loc)));\n             end if;\n \n-            if Controlled_Type (Ctype) then\n+            if Needs_Finalization (Ctype) then\n                Append_List_To (L,\n                  Make_Init_Call (\n                    Ref         => New_Copy_Tree (Indexed_Comp),\n@@ -1159,7 +1159,7 @@ package body Exp_Aggr is\n                 Name       => Indexed_Comp,\n                 Expression => New_Copy_Tree (Expr));\n \n-            if Present (Comp_Type) and then Controlled_Type (Comp_Type) then\n+            if Present (Comp_Type) and then Needs_Finalization (Comp_Type) then\n                Set_No_Ctrl_Actions (A);\n \n                --  If this is an aggregate for an array of arrays, each\n@@ -1223,7 +1223,7 @@ package body Exp_Aggr is\n             --  inner finalization actions).\n \n             if Present (Comp_Type)\n-              and then Controlled_Type (Comp_Type)\n+              and then Needs_Finalization (Comp_Type)\n               and then not Is_Limited_Type (Comp_Type)\n               and then\n                 (not Is_Array_Type (Comp_Type)\n@@ -2167,7 +2167,7 @@ package body Exp_Aggr is\n          --  proper scope is the scope of the target rather than the\n          --  potentially transient current scope.\n \n-         if Controlled_Type (Typ) then\n+         if Needs_Finalization (Typ) then\n \n             --  The current aggregate belongs to an allocator which creates\n             --  an object through an anonymous access type or acts as the root\n@@ -2645,7 +2645,7 @@ package body Exp_Aggr is\n \n                --  Call Adjust manually\n \n-               if Controlled_Type (Etype (A))\n+               if Needs_Finalization (Etype (A))\n                  and then not Is_Limited_Type (Etype (A))\n                then\n                   Append_List_To (Assign,\n@@ -2854,7 +2854,7 @@ package body Exp_Aggr is\n             --  The controller is the one of the parent type defining the\n             --  component (in case of inherited components).\n \n-            if Controlled_Type (Comp_Type) then\n+            if Needs_Finalization (Comp_Type) then\n                Internal_Final_List :=\n                  Make_Selected_Component (Loc,\n                    Prefix => Convert_To (\n@@ -3027,7 +3027,7 @@ package body Exp_Aggr is\n                --     Attach_To_Final_List (tmp.comp,\n                --       comp_typ (tmp)._record_controller.f)\n \n-               if Controlled_Type (Comp_Type)\n+               if Needs_Finalization (Comp_Type)\n                  and then not Is_Limited_Type (Comp_Type)\n                then\n                   Append_List_To (L,\n@@ -4961,7 +4961,7 @@ package body Exp_Aggr is\n         or else Parent_Kind = N_Extension_Aggregate\n         or else Parent_Kind = N_Component_Association\n         or else (Parent_Kind = N_Object_Declaration\n-                  and then Controlled_Type (Typ))\n+                  and then Needs_Finalization (Typ))\n         or else (Parent_Kind = N_Assignment_Statement\n                   and then Inside_Init_Proc)\n       then"}, {"sha": "8596a9b15b90a8477e3853653fcc1542d4fbf32c", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=048e5cef65a7c108ba7a2b16ca12ba70b9759527", "patch": "@@ -732,7 +732,7 @@ package body Exp_Ch3 is\n          --  in any case no point in inlining such complex init procs.\n \n          if not Has_Task (Proc_Id)\n-           and then not Controlled_Type (Proc_Id)\n+           and then not Needs_Finalization (Proc_Id)\n          then\n             Set_Is_Inlined (Proc_Id);\n          end if;\n@@ -1581,7 +1581,7 @@ package body Exp_Ch3 is\n           Name => New_Occurrence_Of (Proc, Loc),\n           Parameter_Associations => Args));\n \n-      if Controlled_Type (Typ)\n+      if Needs_Finalization (Typ)\n         and then Nkind (Id_Ref) = N_Selected_Component\n       then\n          if Chars (Selector_Name (Id_Ref)) /= Name_uParent then\n@@ -1865,7 +1865,7 @@ package body Exp_Ch3 is\n             Kind := Nkind (Expression (N));\n          end if;\n \n-         if Controlled_Type (Typ)\n+         if Needs_Finalization (Typ)\n          and then not (Kind = N_Aggregate or else Kind = N_Extension_Aggregate)\n          and then not Is_Inherently_Limited_Type (Typ)\n          then\n@@ -3145,7 +3145,7 @@ package body Exp_Ch3 is\n \n          if not Is_Concurrent_Type (Rec_Type)\n            and then not Has_Task (Rec_Type)\n-           and then not Controlled_Type (Rec_Type)\n+           and then not Needs_Finalization (Rec_Type)\n          then\n             Set_Is_Inlined  (Proc_Id);\n          end if;\n@@ -4188,7 +4188,7 @@ package body Exp_Ch3 is\n          --  Initialize call as it is required but one for each ancestor of\n          --  its type. This processing is suppressed if No_Initialization set.\n \n-         if not Controlled_Type (Typ)\n+         if not Needs_Finalization (Typ)\n            or else No_Initialization (N)\n          then\n             null;\n@@ -4526,7 +4526,7 @@ package body Exp_Ch3 is\n             --  we plan to support in-place function results for some cases\n             --  of nonlimited types. ???)\n \n-            if Controlled_Type (Typ)\n+            if Needs_Finalization (Typ)\n               and then not Is_Inherently_Limited_Type (Typ)\n               and then not BIP_Call\n             then\n@@ -5001,7 +5001,7 @@ package body Exp_Ch3 is\n                end if;\n \n             elsif Ekind (Comp_Typ) = E_Anonymous_Access_Type\n-              and then Controlled_Type (Directly_Designated_Type (Comp_Typ))\n+              and then Needs_Finalization (Directly_Designated_Type (Comp_Typ))\n             then\n                Set_Associated_Final_Chain (Comp_Typ, Add_Final_Chain (Typ));\n             end if;\n@@ -5517,7 +5517,7 @@ package body Exp_Ch3 is\n             Set_Has_Controlled_Component (Def_Id);\n \n          elsif Ekind (Comp_Typ) = E_Anonymous_Access_Type\n-           and then Controlled_Type (Directly_Designated_Type (Comp_Typ))\n+           and then Needs_Finalization (Directly_Designated_Type (Comp_Typ))\n          then\n             if No (Flist) then\n                Flist := Add_Final_Chain (Def_Id);\n@@ -6144,7 +6144,7 @@ package body Exp_Ch3 is\n             then\n                null;\n \n-            elsif (Controlled_Type (Desig_Type)\n+            elsif (Needs_Finalization (Desig_Type)\n                     and then Convention (Desig_Type) /= Convention_Java\n                     and then Convention (Desig_Type) /= Convention_CIL)\n               or else\n@@ -6168,7 +6168,7 @@ package body Exp_Ch3 is\n \n               or else (Is_Array_Type (Desig_Type)\n                 and then not Is_Frozen (Desig_Type)\n-                and then Controlled_Type (Component_Type (Desig_Type)))\n+                and then Needs_Finalization (Component_Type (Desig_Type)))\n \n                --  The designated type has controlled anonymous access\n                --  discriminants.\n@@ -7842,7 +7842,7 @@ package body Exp_Ch3 is\n          null;\n \n       elsif Etype (Tag_Typ) = Tag_Typ\n-        or else Controlled_Type (Tag_Typ)\n+        or else Needs_Finalization (Tag_Typ)\n \n          --  Ada 2005 (AI-251): We must also generate these subprograms if\n          --  the immediate ancestor is an interface to ensure the correct"}, {"sha": "808005474b05155d633a7c77189922072f56c805", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=048e5cef65a7c108ba7a2b16ca12ba70b9759527", "patch": "@@ -575,7 +575,7 @@ package body Exp_Ch4 is\n    --  Start of processing for Expand_Allocator_Expression\n \n    begin\n-      if Is_Tagged_Type (T) or else Controlled_Type (T) then\n+      if Is_Tagged_Type (T) or else Needs_Finalization (T) then\n \n          --  Ada 2005 (AI-318-02): If the initialization expression is a call\n          --  to a build-in-place function, then access to the allocated object\n@@ -669,7 +669,7 @@ package body Exp_Ch4 is\n                Set_No_Initialization (Expression (Tmp_Node));\n                Insert_Action (N, Tmp_Node);\n \n-               if Controlled_Type (T)\n+               if Needs_Finalization (T)\n                  and then Ekind (PtrT) = E_Anonymous_Access_Type\n                then\n                   --  Create local finalization list for access parameter\n@@ -717,7 +717,7 @@ package body Exp_Ch4 is\n                --  Inherit the final chain to ensure that the expansion of the\n                --  aggregate is correct in case of controlled types\n \n-               if Controlled_Type (Directly_Designated_Type (PtrT)) then\n+               if Needs_Finalization (Directly_Designated_Type (PtrT)) then\n                   Set_Associated_Final_Chain (Def_Id,\n                     Associated_Final_Chain (PtrT));\n                end if;\n@@ -739,7 +739,7 @@ package body Exp_Ch4 is\n                   Set_No_Initialization (Expression (Tmp_Node));\n                   Insert_Action (N, Tmp_Node);\n \n-                  if Controlled_Type (T)\n+                  if Needs_Finalization (T)\n                     and then Ekind (PtrT) = E_Anonymous_Access_Type\n                   then\n                      --  Create local finalization list for access parameter\n@@ -835,8 +835,8 @@ package body Exp_Ch4 is\n             Insert_Action (N, Tag_Assign);\n          end if;\n \n-         if Controlled_Type (DesigT)\n-            and then Controlled_Type (T)\n+         if Needs_Finalization (DesigT)\n+            and then Needs_Finalization (T)\n          then\n             declare\n                Attach : Node_Id;\n@@ -868,7 +868,7 @@ package body Exp_Ch4 is\n                --  Normal case, not a secondary stack allocation\n \n                else\n-                  if Controlled_Type (T)\n+                  if Needs_Finalization (T)\n                     and then Ekind (PtrT) = E_Anonymous_Access_Type\n                   then\n                      --  Create local finalization list for access parameter\n@@ -3502,7 +3502,7 @@ package body Exp_Ch4 is\n                       Parameter_Associations => Args));\n                end if;\n \n-               if Controlled_Type (T) then\n+               if Needs_Finalization (T) then\n \n                   --  Postpone the generation of a finalization call for the\n                   --  current allocator if it acts as a coextension."}, {"sha": "0eb681df4087eb9908159f3bc7852c558944897b", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=048e5cef65a7c108ba7a2b16ca12ba70b9759527", "patch": "@@ -728,7 +728,7 @@ package body Exp_Ch5 is\n          --  Cases where either Forwards_OK or Backwards_OK is true\n \n          if Forwards_OK (N) or else Backwards_OK (N) then\n-            if Controlled_Type (Component_Type (L_Type))\n+            if Needs_Finalization (Component_Type (L_Type))\n               and then Base_Type (L_Type) = Base_Type (R_Type)\n               and then Ndim = 1\n               and then not No_Ctrl_Actions (N)\n@@ -862,7 +862,7 @@ package body Exp_Ch5 is\n                    Right_Opnd => Cright_Lo);\n             end if;\n \n-            if Controlled_Type (Component_Type (L_Type))\n+            if Needs_Finalization (Component_Type (L_Type))\n               and then Base_Type (L_Type) = Base_Type (R_Type)\n               and then Ndim = 1\n               and then not No_Ctrl_Actions (N)\n@@ -1775,7 +1775,7 @@ package body Exp_Ch5 is\n          return;\n \n       elsif Is_Tagged_Type (Typ)\n-        or else (Controlled_Type (Typ) and then not Is_Array_Type (Typ))\n+        or else (Needs_Finalization (Typ) and then not Is_Array_Type (Typ))\n       then\n          Tagged_Case : declare\n             L                   : List_Id := No_List;\n@@ -1937,7 +1937,7 @@ package body Exp_Ch5 is\n             --  If no restrictions on aborts, protect the whole assignment\n             --  for controlled objects as per 9.8(11).\n \n-            if Controlled_Type (Typ)\n+            if Needs_Finalization (Typ)\n               and then Expand_Ctrl_Actions\n               and then Abort_Allowed\n             then\n@@ -2381,9 +2381,9 @@ package body Exp_Ch5 is\n       Result          : Node_Id;\n       Exp             : Node_Id;\n \n-      function Controlled_Type (Typ : Entity_Id) return Boolean;\n+      function Has_Controlled_Parts (Typ : Entity_Id) return Boolean;\n       --  Determine whether type Typ is controlled or contains a controlled\n-      --  component.\n+      --  subcomponent.\n \n       function Move_Activation_Chain return Node_Id;\n       --  Construct a call to System.Tasking.Stages.Move_Activation_Chain\n@@ -2399,16 +2399,16 @@ package body Exp_Ch5 is\n       --    From         finalization list of the return statement\n       --    To           finalization list passed in by the caller\n \n-      ---------------------\n-      -- Controlled_Type --\n-      ---------------------\n+      --------------------------\n+      -- Has_Controlled_Parts --\n+      --------------------------\n \n-      function Controlled_Type (Typ : Entity_Id) return Boolean is\n+      function Has_Controlled_Parts (Typ : Entity_Id) return Boolean is\n       begin\n          return\n            Is_Controlled (Typ)\n              or else Has_Controlled_Component (Typ);\n-      end Controlled_Type;\n+      end Has_Controlled_Parts;\n \n       ---------------------------\n       -- Move_Activation_Chain --\n@@ -2542,13 +2542,13 @@ package body Exp_Ch5 is\n \n          if Is_Build_In_Place\n            and then\n-               (Controlled_Type (Parent_Function_Typ)\n+               (Has_Controlled_Parts (Parent_Function_Typ)\n                  or else (Is_Class_Wide_Type (Parent_Function_Typ)\n                            and then\n-                             Controlled_Type (Root_Type (Parent_Function_Typ)))\n-                 or else Controlled_Type (Etype (Return_Object_Entity))\n+                        Has_Controlled_Parts (Root_Type (Parent_Function_Typ)))\n+                 or else Has_Controlled_Parts (Etype (Return_Object_Entity))\n                  or else (Present (Exp)\n-                           and then Controlled_Type (Etype (Exp))))\n+                           and then Has_Controlled_Parts (Etype (Exp))))\n          then\n             Append_To (Statements, Move_Final_List);\n          end if;\n@@ -3850,7 +3850,7 @@ package body Exp_Ch5 is\n            and then\n               (not Is_Array_Type (Exptyp)\n                 or else Is_Constrained (Exptyp) = Is_Constrained (R_Type)\n-                or else CW_Or_Controlled_Type (Utyp))\n+                or else CW_Or_Has_Controlled_Part (Utyp))\n            and then Nkind (Exp) = N_Function_Call\n          then\n             Set_By_Ref (N);\n@@ -3873,7 +3873,7 @@ package body Exp_Ch5 is\n          --  controlled (by the virtue of restriction No_Finalization) because\n          --  gigi is not able to properly allocate class-wide types.\n \n-         elsif CW_Or_Controlled_Type (Utyp) then\n+         elsif CW_Or_Has_Controlled_Part (Utyp) then\n             declare\n                Loc        : constant Source_Ptr := Sloc (N);\n                Temp       : constant Entity_Id :=\n@@ -4221,7 +4221,7 @@ package body Exp_Ch5 is\n       L   : constant Node_Id    := Name (N);\n       T   : constant Entity_Id  := Underlying_Type (Etype (L));\n \n-      Ctrl_Act : constant Boolean := Controlled_Type (T)\n+      Ctrl_Act : constant Boolean := Needs_Finalization (T)\n                                        and then not No_Ctrl_Actions (N);\n \n       Save_Tag : constant Boolean := Is_Tagged_Type (T)"}, {"sha": "145a39dad85bca65b16ce72c8de0080ba1f46d0c", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=048e5cef65a7c108ba7a2b16ca12ba70b9759527", "patch": "@@ -391,21 +391,20 @@ package body Exp_Ch6 is\n       Final_List_Actual : Node_Id;\n       Final_List_Formal : Node_Id;\n       Is_Ctrl_Result    : constant Boolean :=\n-                            Controlled_Type\n+                            Needs_Finalization\n                               (Underlying_Type (Etype (Function_Id)));\n \n    begin\n       --  No such extra parameter is needed if there are no controlled parts.\n-      --  The test for Controlled_Type accounts for class-wide results (which\n-      --  potentially have controlled parts, even if the root type doesn't),\n-      --  and the test for a tagged result type is needed because calls to\n-      --  such a function can in general occur in dispatching contexts, which\n-      --  must be treated the same as a call to class-wide functions. Both of\n-      --  these situations require that a finalization list be passed.\n-\n-      if not Is_Ctrl_Result\n-        and then not Is_Tagged_Type (Underlying_Type (Etype (Function_Id)))\n-      then\n+      --  The test for Needs_Finalization accounts for class-wide results\n+      --  (which potentially have controlled parts, even if the root type\n+      --  doesn't), and the test for a tagged result type is needed because\n+      --  calls to such a function can in general occur in dispatching\n+      --  contexts, which must be treated the same as a call to class-wide\n+      --  functions. Both of these situations require that a finalization list\n+      --  be passed.\n+\n+      if not Needs_BIP_Final_List (Function_Id) then\n          return;\n       end if;\n \n@@ -3034,7 +3033,7 @@ package body Exp_Ch6 is\n       --  If the return type is limited the context is an initialization\n       --  and different processing applies.\n \n-      if Controlled_Type (Etype (Subp))\n+      if Needs_Finalization (Etype (Subp))\n         and then not Is_Inherently_Limited_Type (Etype (Subp))\n         and then not Is_Limited_Interface (Etype (Subp))\n       then\n@@ -4276,7 +4275,7 @@ package body Exp_Ch6 is\n          elsif Is_Inherently_Limited_Type (Typ) then\n             Set_Returns_By_Ref (Spec_Id);\n \n-         elsif Present (Utyp) and then CW_Or_Controlled_Type (Utyp) then\n+         elsif Present (Utyp) and then CW_Or_Has_Controlled_Part (Utyp) then\n             Set_Returns_By_Ref (Spec_Id);\n          end if;\n       end;\n@@ -4903,7 +4902,7 @@ package body Exp_Ch6 is\n       begin\n          if Is_Inherently_Limited_Type (Typ) then\n             Set_Returns_By_Ref (Subp);\n-         elsif Present (Utyp) and then CW_Or_Controlled_Type (Utyp) then\n+         elsif Present (Utyp) and then CW_Or_Has_Controlled_Part (Utyp) then\n             Set_Returns_By_Ref (Subp);\n          end if;\n       end;\n@@ -5592,4 +5591,19 @@ package body Exp_Ch6 is\n       end if;\n    end Make_Build_In_Place_Call_In_Object_Declaration;\n \n+   function Needs_BIP_Final_List (E : Entity_Id) return Boolean is\n+      pragma Assert (Is_Build_In_Place_Function (E));\n+      Result_Subt : constant Entity_Id := Underlying_Type (Etype (E));\n+   begin\n+      --  We need the BIP_Final_List if the result type needs finalization. We\n+      --  also need it for tagged types, even if not class-wide, because some\n+      --  type extension might need finalization, and all overriding functions\n+      --  must have the same calling conventions. However, if there is a\n+      --  pragma Restrictions (No_Finalization), we never need this parameter.\n+\n+      return (Needs_Finalization (Result_Subt)\n+              or else Is_Tagged_Type (Underlying_Type (Result_Subt)))\n+        and then not Restriction_Active (No_Finalization);\n+   end Needs_BIP_Final_List;\n+\n end Exp_Ch6;"}, {"sha": "df5b9eb3f71a7e6302ffb8eb2ba89d202362545c", "filename": "gcc/ada/exp_ch6.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2Fexp_ch6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2Fexp_ch6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.ads?ref=048e5cef65a7c108ba7a2b16ca12ba70b9759527", "patch": "@@ -161,4 +161,9 @@ package Exp_Ch6 is\n    --  for which Is_Build_In_Place_Call is True, or an N_Qualified_Expression\n    --  node applied to such a function call.\n \n+   function Needs_BIP_Final_List (E : Entity_Id) return Boolean;\n+   pragma Precondition (Is_Build_In_Place_Function (E));\n+   --  Ada 2005 (AI-318-02): Returns True if the function needs the\n+   --  BIP_Final_List implicit parameter.\n+\n end Exp_Ch6;"}, {"sha": "f05ad7157f871673f0fd9e8c00fe38a00a07bde2", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=048e5cef65a7c108ba7a2b16ca12ba70b9759527", "patch": "@@ -846,11 +846,11 @@ package body Exp_Ch7 is\n       end if;\n    end Check_Visibly_Controlled;\n \n-   ---------------------\n-   -- Controlled_Type --\n-   ---------------------\n+   ------------------------\n+   -- Needs_Finalization --\n+   ------------------------\n \n-   function Controlled_Type (T : Entity_Id) return Boolean is\n+   function Needs_Finalization (T : Entity_Id) return Boolean is\n \n       function Has_Some_Controlled_Component (Rec : Entity_Id) return Boolean;\n       --  If type is not frozen yet, check explicitly among its components,\n@@ -875,7 +875,7 @@ package body Exp_Ch7 is\n \n                while Present (Comp) loop\n                   if not Is_Type (Comp)\n-                    and then Controlled_Type (Etype (Comp))\n+                    and then Needs_Finalization (Etype (Comp))\n                   then\n                      return True;\n                   end if;\n@@ -886,7 +886,7 @@ package body Exp_Ch7 is\n                return False;\n \n             elsif Is_Array_Type (Rec) then\n-               return Is_Controlled (Component_Type (Rec));\n+               return Needs_Finalization (Component_Type (Rec));\n \n             else\n                return Has_Controlled_Component (Rec);\n@@ -896,7 +896,7 @@ package body Exp_Ch7 is\n          end if;\n       end Has_Some_Controlled_Component;\n \n-   --  Start of processing for Controlled_Type\n+   --  Start of processing for Needs_Finalization\n \n    begin\n       --  Class-wide types must be treated as controlled because they may\n@@ -910,18 +910,18 @@ package body Exp_Ch7 is\n         or else Is_Controlled (T)\n         or else Has_Some_Controlled_Component (T)\n         or else (Is_Concurrent_Type (T)\n-                   and then Present (Corresponding_Record_Type (T))\n-                   and then Controlled_Type (Corresponding_Record_Type (T)));\n-   end Controlled_Type;\n+                  and then Present (Corresponding_Record_Type (T))\n+                  and then Needs_Finalization (Corresponding_Record_Type (T)));\n+   end Needs_Finalization;\n \n-   ---------------------------\n-   -- CW_Or_Controlled_Type --\n-   ---------------------------\n+   -------------------------------\n+   -- CW_Or_Has_Controlled_Part --\n+   -------------------------------\n \n-   function CW_Or_Controlled_Type (T : Entity_Id) return Boolean is\n+   function CW_Or_Has_Controlled_Part (T : Entity_Id) return Boolean is\n    begin\n-      return Is_Class_Wide_Type (T) or else Controlled_Type (T);\n-   end CW_Or_Controlled_Type;\n+      return Is_Class_Wide_Type (T) or else Needs_Finalization (T);\n+   end CW_Or_Has_Controlled_Part;\n \n    --------------------------\n    -- Controller_Component --\n@@ -2038,7 +2038,7 @@ package body Exp_Ch7 is\n             null;\n \n          elsif Scope (Original_Record_Component (Comp)) = E\n-           and then Controlled_Type (Etype (Comp))\n+           and then Needs_Finalization (Etype (Comp))\n          then\n             return True;\n          end if;\n@@ -3429,7 +3429,7 @@ package body Exp_Ch7 is\n          --  and the actual should be finalized on return from the call ???\n \n          if Nkind (N) = N_Object_Renaming_Declaration\n-           and then Controlled_Type (Etype (Defining_Identifier (N)))\n+           and then Needs_Finalization (Etype (Defining_Identifier (N)))\n          then\n             null;\n \n@@ -3439,7 +3439,7 @@ package body Exp_Ch7 is\n                        N_Selected_Component,\n                        N_Indexed_Component)\n            and then\n-             Controlled_Type\n+             Needs_Finalization\n                (Etype (Prefix (Renamed_Object (Defining_Identifier (N)))))\n          then\n             null;"}, {"sha": "213b4eed542b3ef1c4884b82bda8588b94c3c704", "filename": "gcc/ada/exp_ch7.ads", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2Fexp_ch7.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2Fexp_ch7.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.ads?ref=048e5cef65a7c108ba7a2b16ca12ba70b9759527", "patch": "@@ -57,14 +57,19 @@ package Exp_Ch7 is\n    function Controller_Component (Typ : Entity_Id) return Entity_Id;\n    --  Returns the entity of the component whose name is 'Name_uController'\n \n-   function Controlled_Type (T : Entity_Id) return Boolean;\n-   --  True if T potentially needs finalization actions\n-\n-   function CW_Or_Controlled_Type (T : Entity_Id) return Boolean;\n-   --  True if T is either a potentially controlled type or a class-wide type.\n-   --  Note that in normal mode, class-wide types are potentially controlled so\n-   --  this function is different from Controlled_Type only under restrictions\n-   --  No_Finalization.\n+   function Needs_Finalization (T : Entity_Id) return Boolean;\n+   --  True if T potentially needs finalization actions. True if T is\n+   --  controlled, or has subcomponents. Also True if T is a class-wide type,\n+   --  because some type extension might add controlled subcomponents, except\n+   --  that if pragma Restrictions (No_Finalization) applies, this is False for\n+   --  class-wide types.\n+\n+   function CW_Or_Has_Controlled_Part (T : Entity_Id) return Boolean;\n+   --  True if T is a class-wide type, or if it has controlled parts (\"part\"\n+   --  means T or any of its subcomponents). This is the same as\n+   --  Needs_Finalization, except when pragma Restrictions (No_Finalization)\n+   --  applies, in which case we know that class-wide objects do not contain\n+   --  controlled parts.\n \n    function Find_Final_List\n      (E   : Entity_Id;"}, {"sha": "d3f9334a6079ce8db18095c81966ce8d8845e7ca", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=048e5cef65a7c108ba7a2b16ca12ba70b9759527", "patch": "@@ -815,7 +815,7 @@ package body Exp_Intr is\n \n       --  Processing for pointer to controlled type\n \n-      if Controlled_Type (Desig_T) then\n+      if Needs_Finalization (Desig_T) then\n          Deref :=\n            Make_Explicit_Dereference (Loc,\n              Prefix => Duplicate_Subexpr_No_Checks (Arg));"}, {"sha": "8e367e1d79d282a22c1aea5ea7e550792af5531c", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=048e5cef65a7c108ba7a2b16ca12ba70b9759527", "patch": "@@ -4533,7 +4533,7 @@ package body Exp_Util is\n       elsif Nkind (Exp) = N_Unchecked_Type_Conversion\n         and then not Safe_Unchecked_Type_Conversion (Exp)\n       then\n-         if CW_Or_Controlled_Type (Exp_Type) then\n+         if CW_Or_Has_Controlled_Part (Exp_Type) then\n \n             --  Use a renaming to capture the expression, rather than create\n             --  a controlled temporary."}, {"sha": "f77e1e709609b530c4e7f57c201880bb083ec0b8", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=048e5cef65a7c108ba7a2b16ca12ba70b9759527", "patch": "@@ -518,7 +518,7 @@ package body Freeze is\n          --  the address expression must be a constant.\n \n          if (No (Expression (Decl))\n-              and then not Controlled_Type (Typ)\n+              and then not Needs_Finalization (Typ)\n               and then\n                 (not Has_Non_Null_Base_Init_Proc (Typ)\n                   or else Is_Imported (E)))\n@@ -547,7 +547,7 @@ package body Freeze is\n          end if;\n \n          if not Error_Posted (Expr)\n-           and then not Controlled_Type (Typ)\n+           and then not Needs_Finalization (Typ)\n          then\n             Warn_Overlay (Expr, Typ, Name (Addr));\n          end if;\n@@ -1381,7 +1381,7 @@ package body Freeze is\n          elsif Is_Access_Type (E)\n            and then Comes_From_Source (E)\n            and then Ekind (Directly_Designated_Type (E)) = E_Incomplete_Type\n-           and then Controlled_Type (Designated_Type (E))\n+           and then Needs_Finalization (Designated_Type (E))\n            and then No (Associated_Final_Chain (E))\n          then\n             Build_Final_List (Parent (E), E);"}, {"sha": "9a319d992a4cae33b2679fbc67d0e9a9644e509d", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048e5cef65a7c108ba7a2b16ca12ba70b9759527/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=048e5cef65a7c108ba7a2b16ca12ba70b9759527", "patch": "@@ -3118,7 +3118,7 @@ package body Sem_Ch6 is\n       --  actions interfere in complex ways with inlining.\n \n       elsif Ekind (Subp) = E_Function\n-        and then Controlled_Type (Etype (Subp))\n+        and then Needs_Finalization (Etype (Subp))\n       then\n          Cannot_Inline\n            (\"cannot inline & (controlled return type)?\", N, Subp);\n@@ -3927,7 +3927,7 @@ package body Sem_Ch6 is\n             if Is_Inherently_Limited_Type (Typ) then\n                Set_Returns_By_Ref (Designator);\n \n-            elsif Present (Utyp) and then CW_Or_Controlled_Type (Utyp) then\n+            elsif Present (Utyp) and then CW_Or_Has_Controlled_Part (Utyp) then\n                Set_Returns_By_Ref (Designator);\n             end if;\n          end;\n@@ -5268,13 +5268,9 @@ package body Sem_Ch6 is\n             --  returns. This is true even if we are able to get away with\n             --  having 'in out' parameters, which are normally illegal for\n             --  functions. This formal is also needed when the function has\n-            --  a tagged result, because generally such functions can be called\n-            --  in a dispatching context and such calls must be handled like\n-            --  calls to class-wide functions.\n+            --  a tagged result.\n \n-            if Controlled_Type (Result_Subt)\n-              or else Is_Tagged_Type (Underlying_Type (Result_Subt))\n-            then\n+            if Needs_BIP_Final_List (E) then\n                Discard :=\n                  Add_Extra_Formal\n                    (E, RTE (RE_Finalizable_Ptr_Ptr),"}]}