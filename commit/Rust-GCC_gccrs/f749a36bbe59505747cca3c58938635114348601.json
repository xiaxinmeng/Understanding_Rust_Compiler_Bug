{"sha": "f749a36bbe59505747cca3c58938635114348601", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc0OWEzNmJiZTU5NTA1NzQ3Y2NhM2M1ODkzODYzNTExNDM0ODYwMQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-08-10T20:58:45Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-08-10T20:58:45Z"}, "message": "c-opts.c (set_std_cxx98, [...]): New.\n\n\t* c-opts.c (set_std_cxx98, set_std_c89): New.\n\t(COMMAND_LINE_OPTIONS): Move more from cppinit.c.\n\t(c_common_decode_option): Handle new switches from cppinit.c.\n\tAdd -std=gnu++98.\n\t* cppinit.c (set_lang): Rename cpp_set_lang.  Export.\n\t(no_arg, no_num): Remove.\n\t(COMMAND_LINE_OPTIONS): Move more to c-opts.c.  Drop all lang-\n\tswitches apart from -lang-objc and lang-asm.\n\t(cpp_handle_option): Similarly.\n\t* cpplib.h (cpp_set_lang): New.\n\t* doc/cppopts.texi, doc/invoke.texi: Document -std=c++98,\n\t-std=gnu++98.\n\t* objc/lang-specs.h: Remove -ansi.\ncp:\n\t* lang-specs.h: Remove -ansi.\n\nFrom-SVN: r56185", "tree": {"sha": "b7a73f47d865f8fbdf851af000ec4f2c50e3d927", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7a73f47d865f8fbdf851af000ec4f2c50e3d927"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f749a36bbe59505747cca3c58938635114348601", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f749a36bbe59505747cca3c58938635114348601", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f749a36bbe59505747cca3c58938635114348601", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f749a36bbe59505747cca3c58938635114348601/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77abb5d87daf09198eca038162e3989dadacbae8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77abb5d87daf09198eca038162e3989dadacbae8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77abb5d87daf09198eca038162e3989dadacbae8"}], "stats": {"total": 221, "additions": 117, "deletions": 104}, "files": [{"sha": "a1cf40980250260052f61a874581aa1fbe684395", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f749a36bbe59505747cca3c58938635114348601/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f749a36bbe59505747cca3c58938635114348601/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f749a36bbe59505747cca3c58938635114348601", "patch": "@@ -1,3 +1,19 @@\n+2002-08-10  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* c-opts.c (set_std_cxx98, set_std_c89): New.\n+\t(COMMAND_LINE_OPTIONS): Move more from cppinit.c.\n+\t(c_common_decode_option): Handle new switches from cppinit.c.\n+\tAdd -std=gnu++98.\n+\t* cppinit.c (set_lang): Rename cpp_set_lang.  Export.\n+\t(no_arg, no_num): Remove.\n+\t(COMMAND_LINE_OPTIONS): Move more to c-opts.c.  Drop all lang-\n+\tswitches apart from -lang-objc and lang-asm.\n+\t(cpp_handle_option): Similarly.\n+\t* cpplib.h (cpp_set_lang): New.\n+\t* doc/cppopts.texi, doc/invoke.texi: Document -std=c++98,\n+\t-std=gnu++98.\n+\t* objc/lang-specs.h: Remove -ansi.\n+\n Sat Aug 10 19:59:43 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \t\t\t       Graham Stott\n "}, {"sha": "e6274d86f8efb6eac6b5382c05ffdd736ce6f430", "filename": "gcc/c-opts.c", "status": "modified", "additions": 61, "deletions": 25, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f749a36bbe59505747cca3c58938635114348601/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f749a36bbe59505747cca3c58938635114348601/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=f749a36bbe59505747cca3c58938635114348601", "patch": "@@ -40,6 +40,8 @@ static void complain_wrong_lang PARAMS ((size_t));\n static void write_langs PARAMS ((char *, int));\n static void print_help PARAMS ((void));\n static void handle_OPT_d PARAMS ((const char *));\n+static void set_std_cxx98 PARAMS ((int));\n+static void set_std_c89 PARAMS ((int, int));\n \n #define CL_C_ONLY\t(1 << 0) /* Only C.  */\n #define CL_OBJC_ONLY\t(1 << 1) /* Only ObjC.  */\n@@ -210,6 +212,8 @@ static void handle_OPT_d PARAMS ((const char *));\n   OPT(\"fweak\",\t\t\tCL_CXX,   OPT_fweak)\t\t\t     \\\n   OPT(\"fxref\",\t\t\tCL_CXX,   OPT_fxref)\t\t\t     \\\n   OPT(\"gen-decls\",\t\tCL_OBJC,  OPT_gen_decls)\t\t     \\\n+  OPT(\"lang-asm\",\t\tCL_C_ONLY, OPT_lang_asm)\t\t     \\\n+  OPT(\"lang-objc\",              CL_ALL,   OPT_lang_objc)\t\t     \\\n   OPT(\"nostdinc\",               CL_ALL,   OPT_nostdinc)\t\t\t     \\\n   OPT(\"nostdinc++\",             CL_ALL,   OPT_nostdincplusplus)\t\t     \\\n   OPT(\"pedantic\",\t\tCL_ALL,   OPT_pedantic)\t\t\t     \\\n@@ -220,6 +224,7 @@ static void handle_OPT_d PARAMS ((const char *));\n   OPT(\"std=c89\",\t\tCL_C,     OPT_std_c89)\t\t\t     \\\n   OPT(\"std=c99\",\t\tCL_C,     OPT_std_c99)\t\t\t     \\\n   OPT(\"std=c9x\",\t\tCL_C,     OPT_std_c9x)\t\t\t     \\\n+  OPT(\"std=gnu++98\",\t\tCL_CXX,\t  OPT_std_gnuplusplus98)\t     \\\n   OPT(\"std=gnu89\",\t\tCL_C,     OPT_std_gnu89)\t\t     \\\n   OPT(\"std=gnu99\",\t\tCL_C,     OPT_std_gnu99)\t\t     \\\n   OPT(\"std=gnu9x\",\t\tCL_C,     OPT_std_gnu9x)\t\t     \\\n@@ -230,8 +235,8 @@ static void handle_OPT_d PARAMS ((const char *));\n   OPT(\"traditional-cpp\",\tCL_ALL,   OPT_traditional_cpp)\t\t     \\\n   OPT(\"trigraphs\",              CL_ALL,   OPT_trigraphs)\t\t     \\\n   OPT(\"undef\",\t\t\tCL_ALL,   OPT_undef)\t\t\t     \\\n-  OPT(\"v\",                      CL_ALL,      OPT_v)\t\t\t     \\\n-  OPT(\"w\",                      CL_ALL,      OPT_w)\n+  OPT(\"v\",                      CL_ALL,   OPT_v)\t\t\t     \\\n+  OPT(\"w\",                      CL_ALL,   OPT_w)\n \n #define OPT(text, flags, code) code,\n enum opt_code\n@@ -823,6 +828,13 @@ c_common_decode_option (argc, argv)\n       else\n \twarn_write_strings = on;\n       break;\n+      \n+    case OPT_ansi:\n+      if (c_language == clk_c)\n+\tset_std_c89 (false, true);\n+      else\n+\tset_std_cxx98 (true);\n+      break;\n \n     case OPT_d:\n       handle_OPT_d (arg);\n@@ -1071,6 +1083,14 @@ c_common_decode_option (argc, argv)\n       flag_gen_declaration = 1;\n       break;\n \n+    case OPT_lang_asm:\n+      cpp_set_lang (parse_in, CLK_ASM);\n+      break;\n+\n+    case OPT_lang_objc:\n+      cpp_opts->objc = 1;\n+      break;\n+\n     case OPT_nostdinc:\n       /* No default include directories.  You must specify all\n \t include-file directories with -I.  */\n@@ -1112,30 +1132,25 @@ c_common_decode_option (argc, argv)\n       */\n \n     case OPT_std_cplusplus98:\n+    case OPT_std_gnuplusplus98:\n+      set_std_cxx98 (code == OPT_std_cplusplus98);\n       break;\n \n+    case OPT_std_iso9899_199409:\n     case OPT_std_c89:\n     case OPT_std_iso9899_1990:\n-    case OPT_std_iso9899_199409:\n-    case OPT_ansi:\n-      /* Note: -ansi is used by both the C and C++ front ends.  */\n-      if (c_language == clk_c)\n-\t{\n-\t  flag_no_asm = 1;\n-\t  flag_writable_strings = 0;\n-\t}\n-      flag_isoc94 = (code == OPT_std_iso9899_199409);\n-      flag_no_gnu_keywords = 1;\n-      flag_no_nonansi_builtin = 1;\n-      flag_noniso_default_format_attributes = 0;\n-      flag_isoc99 = 0;\n-      flag_iso = 1;\n+      set_std_c89 (code == OPT_std_iso9899_199409, true);\n+      break;\n+\n+    case OPT_std_gnu89:\n+      set_std_c89 (false /* c94 */, false /* ISO */);\n       break;\n \n     case OPT_std_c99:\n     case OPT_std_c9x:\n     case OPT_std_iso9899_1999:\n     case OPT_std_iso9899_199x:\n+      cpp_set_lang (parse_in, CLK_STDC99);\n       flag_writable_strings = 0;\n       flag_no_asm = 1;\n       flag_no_nonansi_builtin = 1;\n@@ -1145,17 +1160,9 @@ c_common_decode_option (argc, argv)\n       flag_iso = 1;\n       break;\n \n-    case OPT_std_gnu89:\n-      flag_writable_strings = 0;\n-      flag_no_asm = 0;\n-      flag_no_nonansi_builtin = 0;\n-      flag_noniso_default_format_attributes = 1;\n-      flag_isoc99 = 0;\n-      flag_isoc94 = 0;\n-      break;\n-\n     case OPT_std_gnu99:\n     case OPT_std_gnu9x:\n+      cpp_set_lang (parse_in, CLK_GNUC99);\n       flag_writable_strings = 0;\n       flag_no_asm = 0;\n       flag_no_nonansi_builtin = 0;\n@@ -1238,6 +1245,35 @@ c_common_post_options ()\n   return flag_preprocess_only;\n }\n \n+/* Set the C 89 standard (with 1994 amendments if C94, without GNU\n+   extensions if ISO).  */\n+static void\n+set_std_c89 (c94, iso)\n+     int c94, iso;\n+{\n+  cpp_set_lang (parse_in, c94 ? CLK_STDC94: iso ? CLK_STDC89: CLK_GNUC89);\n+  flag_iso = iso;\n+  flag_no_asm = iso;\n+  flag_no_gnu_keywords = iso;\n+  flag_no_nonansi_builtin = iso;\n+  flag_noniso_default_format_attributes = !iso;\n+  flag_isoc94 = c94;\n+  flag_isoc99 = 0;\n+  flag_writable_strings = 0;\n+}\n+\n+/* Set the C++ 98 standard (without GNU extensions if ISO).  */\n+static void\n+set_std_cxx98 (iso)\n+     int iso;\n+{\n+  cpp_set_lang (parse_in, iso ? CLK_CXX98: CLK_GNUCXX);\n+  flag_no_gnu_keywords = iso;\n+  flag_no_nonansi_builtin = iso;\n+  flag_noniso_default_format_attributes = !iso;\n+  flag_iso = iso;\n+}\n+\n /* Handle setting implicit to ON.  */\n static void\n set_Wimplicit (on)"}, {"sha": "0563560c447bcd45d6b97011076b1224a8893fcc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f749a36bbe59505747cca3c58938635114348601/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f749a36bbe59505747cca3c58938635114348601/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f749a36bbe59505747cca3c58938635114348601", "patch": "@@ -1,3 +1,7 @@\n+2002-08-10  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* lang-specs.h: Remove -ansi.\n+\n 2002-08-10  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* tree.c (maybe_dummy_object): Replace // with /* */"}, {"sha": "2e9640c83e1e5926d7d93aaa269aa5fbb9de0df2", "filename": "gcc/cp/lang-specs.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f749a36bbe59505747cca3c58938635114348601/gcc%2Fcp%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f749a36bbe59505747cca3c58938635114348601/gcc%2Fcp%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-specs.h?ref=f749a36bbe59505747cca3c58938635114348601", "patch": "@@ -33,16 +33,14 @@ Boston, MA 02111-1307, USA.  */\n   {\".c++\", \"@c++\", 0},\n   {\".C\",   \"@c++\", 0},\n   {\"@c++\",\n-     /* We should convert -ansi to -std=c++98 even if -fpreprocessed,\n-\tto get dollars in identifiers correct.  */\n     \"%{E|M|MM:cc1plus -E %{!no-gcc:-D__GNUG__=%v1}\\\n-       %{ansi:-std=c++98} %(cpp_options) %2 %(cpp_debug_options)}\\\n+       %(cpp_options) %2 %(cpp_debug_options)}\\\n      %{!E:%{!M:%{!MM:\\\n        %{save-temps:cc1plus -E %{!no-gcc:-D__GNUG__=%v1}\\\n-\t\t%{ansi:-std=c++98} %(cpp_options) %2 %b.ii \\n}\\\n+\t\t%(cpp_options) %2 %b.ii \\n}\\\n       cc1plus %{save-temps:-fpreprocessed %b.ii}\\\n \t      %{!save-temps:%(cpp_unique_options) %{!no-gcc:-D__GNUG__=%v1}}\\\n-\t%{ansi:-std=c++98} %(cc1_options) %2 %{+e1*}\\\n+\t%(cc1_options) %2 %{+e1*}\\\n        %{!fsyntax-only:%(invoke_as)}}}}\",\n      CPLUSPLUS_CPP_SPEC},\n   {\".ii\", \"@c++-cpp-output\", 0},"}, {"sha": "927311e0a022116102c1154a1c3f2995ac6d23f1", "filename": "gcc/cppinit.c", "status": "modified", "additions": 4, "deletions": 59, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f749a36bbe59505747cca3c58938635114348601/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f749a36bbe59505747cca3c58938635114348601/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=f749a36bbe59505747cca3c58938635114348601", "patch": "@@ -102,7 +102,6 @@ static void merge_include_chains\tPARAMS ((cpp_reader *));\n static bool push_include\t\tPARAMS ((cpp_reader *,\n \t\t\t\t\t\t struct pending_option *));\n static void free_chain\t\t\tPARAMS ((struct pending_option *));\n-static void set_lang\t\t\tPARAMS ((cpp_reader *, enum c_lang));\n static void init_dependency_output\tPARAMS ((cpp_reader *));\n static void init_standard_includes\tPARAMS ((cpp_reader *));\n static void read_original_filename\tPARAMS ((cpp_reader *));\n@@ -403,8 +402,8 @@ static const struct lang_flags lang_defaults[] =\n };\n \n /* Sets internal flags correctly for a given language.  */\n-static void\n-set_lang (pfile, lang)\n+void\n+cpp_set_lang (pfile, lang)\n      cpp_reader *pfile;\n      enum c_lang lang;\n {\n@@ -471,7 +470,7 @@ cpp_create_reader (lang)\n \n   pfile = (cpp_reader *) xcalloc (1, sizeof (cpp_reader));\n \n-  set_lang (pfile, lang);\n+  cpp_set_lang (pfile, lang);\n   CPP_OPTION (pfile, warn_import) = 1;\n   CPP_OPTION (pfile, warn_multichar) = 1;\n   CPP_OPTION (pfile, discard_comments) = 1;\n@@ -1123,13 +1122,11 @@ new_pending_directive (pend, text, handler)\n /* Irix6 \"cc -n32\" and OSF4 cc have problems with char foo[] = (\"string\");\n    I.e. a const string initializer with parens around it.  That is\n    what N_(\"string\") resolves to, so we make no_* be macros instead.  */\n-#define no_arg N_(\"argument missing after %s\")\n #define no_ass N_(\"assertion missing after %s\")\n #define no_dir N_(\"directory name missing after %s\")\n #define no_fil N_(\"file name missing after %s\")\n #define no_mac N_(\"macro name missing after %s\")\n #define no_pth N_(\"path name missing after %s\")\n-#define no_num N_(\"number missing after %s\")\n #define no_tgt N_(\"target missing after %s\")\n \n /* This is the list of all command line options, with the leading\n@@ -1155,24 +1152,8 @@ new_pending_directive (pend, text, handler)\n   DEF_OPT(\"isystem\",                  no_dir, OPT_isystem)                    \\\n   DEF_OPT(\"iwithprefix\",              no_dir, OPT_iwithprefix)                \\\n   DEF_OPT(\"iwithprefixbefore\",        no_dir, OPT_iwithprefixbefore)          \\\n-  DEF_OPT(\"lang-asm\",                 0,      OPT_lang_asm)                   \\\n-  DEF_OPT(\"lang-c\",                   0,      OPT_lang_c)                     \\\n-  DEF_OPT(\"lang-c++\",                 0,      OPT_lang_cplusplus)             \\\n-  DEF_OPT(\"lang-c89\",                 0,      OPT_lang_c89)                   \\\n-  DEF_OPT(\"lang-objc\",                0,      OPT_lang_objc)                  \\\n   DEF_OPT(\"o\",                        no_fil, OPT_o)                          \\\n-  DEF_OPT(\"remap\",                    0,      OPT_remap)                      \\\n-  DEF_OPT(\"std=c++98\",                0,      OPT_std_cplusplus98)            \\\n-  DEF_OPT(\"std=c89\",                  0,      OPT_std_c89)                    \\\n-  DEF_OPT(\"std=c99\",                  0,      OPT_std_c99)                    \\\n-  DEF_OPT(\"std=c9x\",                  0,      OPT_std_c9x)                    \\\n-  DEF_OPT(\"std=gnu89\",                0,      OPT_std_gnu89)                  \\\n-  DEF_OPT(\"std=gnu99\",                0,      OPT_std_gnu99)                  \\\n-  DEF_OPT(\"std=gnu9x\",                0,      OPT_std_gnu9x)                  \\\n-  DEF_OPT(\"std=iso9899:1990\",         0,      OPT_std_iso9899_1990)           \\\n-  DEF_OPT(\"std=iso9899:199409\",       0,      OPT_std_iso9899_199409)         \\\n-  DEF_OPT(\"std=iso9899:1999\",         0,      OPT_std_iso9899_1999)           \\\n-  DEF_OPT(\"std=iso9899:199x\",         0,      OPT_std_iso9899_199x)\n+  DEF_OPT(\"remap\",                    0,      OPT_remap)\n \n #define DEF_OPT(text, msg, code) code,\n enum opt_code\n@@ -1329,42 +1310,6 @@ cpp_handle_option (pfile, argc, argv)\n \t  CPP_OPTION (pfile, include_prefix) = arg;\n \t  CPP_OPTION (pfile, include_prefix_len) = strlen (arg);\n \t  break;\n-\tcase OPT_lang_c:\n-\t  set_lang (pfile, CLK_GNUC89);\n-\t  break;\n-\tcase OPT_lang_cplusplus:\n-\t  set_lang (pfile, CLK_GNUCXX);\n-\t  break;\n-\tcase OPT_lang_objc:\n-\t  CPP_OPTION (pfile, objc) = 1;\n-\t  break;\n-\tcase OPT_lang_asm:\n-\t  set_lang (pfile, CLK_ASM);\n-\t  break;\n-\tcase OPT_std_cplusplus98:\n-\t  set_lang (pfile, CLK_CXX98);\n-\t  break;\n-\tcase OPT_std_gnu89:\n-\t  set_lang (pfile, CLK_GNUC89);\n-\t  break;\n-\tcase OPT_std_gnu9x:\n-\tcase OPT_std_gnu99:\n-\t  set_lang (pfile, CLK_GNUC99);\n-\t  break;\n-\tcase OPT_std_iso9899_199409:\n-\t  set_lang (pfile, CLK_STDC94);\n-\t  break;\n-\tcase OPT_std_iso9899_1990:\n-\tcase OPT_std_c89:\n-\tcase OPT_lang_c89:\n-\t  set_lang (pfile, CLK_STDC89);\n-\t  break;\n-\tcase OPT_std_iso9899_199x:\n-\tcase OPT_std_iso9899_1999:\n-\tcase OPT_std_c9x:\n-\tcase OPT_std_c99:\n-\t  set_lang (pfile, CLK_STDC99);\n-\t  break;\n \tcase OPT_o:\n \t  if (CPP_OPTION (pfile, out_fname) == NULL)\n \t    CPP_OPTION (pfile, out_fname) = arg;"}, {"sha": "75a9d921bab3023d79b61a66b3e2fac18f906159", "filename": "gcc/cpplib.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f749a36bbe59505747cca3c58938635114348601/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f749a36bbe59505747cca3c58938635114348601/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=f749a36bbe59505747cca3c58938635114348601", "patch": "@@ -504,6 +504,10 @@ struct cpp_hashnode\n /* Call this first to get a handle to pass to other functions.  */\n extern cpp_reader *cpp_create_reader PARAMS ((enum c_lang));\n \n+/* Call this to change the selected language standard (e.g. because of\n+   command line options).  */\n+extern void cpp_set_lang PARAMS ((cpp_reader *, enum c_lang));\n+\n /* Call these to get pointers to the options and callback structures\n    for a given reader.  These pointers are good until you call\n    cpp_finish on that reader.  You can either edit the callbacks"}, {"sha": "b23c9fccdc7d76e08a4cd20e38ad30e7bff65fa7", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f749a36bbe59505747cca3c58938635114348601/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f749a36bbe59505747cca3c58938635114348601/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=f749a36bbe59505747cca3c58938635114348601", "patch": "@@ -326,9 +326,8 @@ option.\n @itemx -ansi\n @opindex ansi\n @opindex std=\n-Specify the standard to which the code should conform.  Currently cpp\n-only knows about the standards for C; other language standards will be\n-added in the future.\n+Specify the standard to which the code should conform.  Currently CPP\n+knows about C and C++ standards; others may be added in the future.\n \n @var{standard}\n may be one of:\n@@ -356,6 +355,13 @@ The 1990 C standard plus GNU extensions.  This is the default.\n @item gnu99\n @itemx gnu9x\n The 1999 C standard plus GNU extensions.\n+\n+@item c++98\n+The 1998 ISO C++ standard plus amendments.\n+\n+@item gnu++98\n+The same as @option{-std=c++98} plus GNU extensions.  This is the\n+default for C++ code.\n @end table\n \n @item -I-"}, {"sha": "6383cd20cb814237c2dc5e80d5011d1794e9f1f4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f749a36bbe59505747cca3c58938635114348601/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f749a36bbe59505747cca3c58938635114348601/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f749a36bbe59505747cca3c58938635114348601", "patch": "@@ -1009,8 +1009,8 @@ affected.\n @item -std=\n @opindex std\n Determine the language standard.  This option is currently only\n-supported when compiling C@.  A value for this option must be provided;\n-possible values are\n+supported when compiling C or C++.  A value for this option must be\n+provided; possible values are\n \n @table @samp\n @item c89\n@@ -1036,6 +1036,12 @@ Default, ISO C90 plus GNU extensions (including some C99 features).\n ISO C99 plus GNU extensions.  When ISO C99 is fully implemented in GCC,\n this will become the default.  The name @samp{gnu9x} is deprecated.\n \n+@item c++98\n+The 1998 ISO C++ standard plus amendments.\n+\n+@item gnu++98\n+The same as @option{-std=c++98} plus GNU extensions.  This is the\n+default for C++ code.\n @end table\n \n Even when this option is not specified, you can still use some of the"}, {"sha": "3bff09a5bf636b2a72a875ba7988dece32cc6464", "filename": "gcc/gcc.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f749a36bbe59505747cca3c58938635114348601/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f749a36bbe59505747cca3c58938635114348601/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=f749a36bbe59505747cca3c58938635114348601", "patch": "@@ -829,24 +829,23 @@ static const struct compiler default_compilers[] =\n   {\"@c\",\n    /* cc1 has an integrated ISO C preprocessor.  We should invoke the\n       external preprocessor if -save-temps is given.  */\n-     \"%{E|M|MM:%(trad_capable_cpp) %{ansi:-std=c89} %(cpp_options)\\\n-\t  %(cpp_debug_options)}\\\n+     \"%{E|M|MM:%(trad_capable_cpp) %(cpp_options) %(cpp_debug_options)}\\\n       %{!E:%{!M:%{!MM:\\\n           %{traditional|ftraditional:\\\n %eGNU C no longer supports -traditional without -E}\\\n \t  %{save-temps|traditional-cpp:%(trad_capable_cpp) \\\n-\t\t%{ansi:-std=c89} %(cpp_options) %b.i \\n\\\n+\t\t%(cpp_options) %b.i \\n\\\n \t\t    cc1 -fpreprocessed %b.i %(cc1_options)}\\\n \t  %{!save-temps:%{!traditional-cpp:\\\n-\t\tcc1 %{ansi:-std=c89} %(cpp_unique_options) %(cc1_options)}}\\\n+\t\tcc1 %(cpp_unique_options) %(cc1_options)}}\\\n         %{!fsyntax-only:%(invoke_as)}}}}\", 0},\n   {\"-\",\n    \"%{!E:%e-E required when input is from standard input}\\\n-    %(trad_capable_cpp) %{ansi:-std=c89} %(cpp_options)\", 0},\n+    %(trad_capable_cpp) %(cpp_options)\", 0},\n   {\".h\", \"@c-header\", 0},\n   {\"@c-header\",\n    \"%{!E:%ecompilation of header file requested} \\\n-    %(trad_capable_cpp) %{ansi:-std=c89} %(cpp_options) %(cpp_debug_options)\",\n+    %(trad_capable_cpp) %(cpp_options) %(cpp_debug_options)\",\n    0},\n   {\".i\", \"@cpp-output\", 0},\n   {\"@cpp-output\","}, {"sha": "1e9c70155ad2a861f33d0caac3dd480dc2c330a3", "filename": "gcc/objc/lang-specs.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f749a36bbe59505747cca3c58938635114348601/gcc%2Fobjc%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f749a36bbe59505747cca3c58938635114348601/gcc%2Fobjc%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Flang-specs.h?ref=f749a36bbe59505747cca3c58938635114348601", "patch": "@@ -26,15 +26,14 @@ Boston, MA 02111-1307, USA.  */\n    /* cc1obj has an integrated ISO C preprocessor.  We should invoke the\n       external preprocessor if -save-temps or -traditional is given.  */\n      \"%{E|M|MM:%(trad_capable_cpp)\\\n-          -lang-objc %{ansi:-std=c89} %(cpp_options) %(cpp_debug_options)}\\\n+          -lang-objc %(cpp_options) %(cpp_debug_options)}\\\n       %{!E:%{!M:%{!MM:\\\n \t%{traditional|ftraditional|traditional-cpp:\\\n %eGNU Objective C no longer supports traditional compilation}\\\n-\t%{save-temps:cc1obj -E %{ansi:-std=c89}\\\n-\t  %(cpp_options) %b.mi \\n\\\n+\t%{save-temps:cc1obj -E %(cpp_options) %b.mi \\n\\\n \t    cc1obj -fpreprocessed %b.mi %(cc1_options) %{gen-decls}}\\\n \t%{!save-temps:\\\n-\t    cc1obj %{ansi:-std=c89} %(cpp_unique_options) %(cc1_options) %{gen-decls}}\\\n+\t    cc1obj %(cpp_unique_options) %(cc1_options) %{gen-decls}}\\\n         %{!fsyntax-only:%(invoke_as)}}}}\", 0},\n   {\".mi\", \"@objc-cpp-output\", 0},\n   {\"@objc-cpp-output\","}]}