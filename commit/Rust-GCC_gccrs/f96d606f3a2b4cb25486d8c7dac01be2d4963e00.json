{"sha": "f96d606f3a2b4cb25486d8c7dac01be2d4963e00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk2ZDYwNmYzYTJiNGNiMjU0ODZkOGM3ZGFjMDFiZTJkNDk2M2UwMA==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-05-06T22:32:33Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-05-06T22:32:33Z"}, "message": "re PR fortran/31201 (Too large unit number generates wrong code)\n\n2007-05-06  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\t    Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n\n\tPR fortran/31201\n\t* gfortran.h: Add runtime error codes from libgfortran.h. Define\n\tMAX_UNIT_NUMBER.\n\t* trans.c (gfc_trans_runtime_check): Update the format of runtime error\n\tmessages to match library runtime errors.  Use call to new library\n\tfunction runtime_error_at().\n\t* trans.h: Add prototype for new function gfc_trans_io_runtime_check.\n\tAdd declaration for library functions runtime_error_at and\n\tgenerate_error.\n\t* trans_io.c (gfc_trans_io_runtime_check): New function.\n\t(set_parameter_value): Add error checking for UNIT numbers.\n\t(set_parameter_ref): Initialize the users variable to zero. \n\t(gfc_trans_open): Move setting of unit number to after setting of common\n\tflags so that runtime error trapping can be detected.\n\t(gfc_trans_close): Likewise. (build_filepos): Likewise.\n\t(gfc_trans_inquire): Likewise. (build_dt): Likewise.\n\t* trans-decl.c: Add declarations for runtime_error_at and\n\tgenerate_error. (gfc_build_builtin_function_decls): Build function\n\tdeclarations for runtime_error_at and generate_error.\n\nCo-Authored-By: Francois-Xavier Coudert <fxcoudert@gcc.gnu.org>\n\nFrom-SVN: r124480", "tree": {"sha": "692f8a6ad04a87c1f8a06248b56be1c7dde36e8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/692f8a6ad04a87c1f8a06248b56be1c7dde36e8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f96d606f3a2b4cb25486d8c7dac01be2d4963e00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f96d606f3a2b4cb25486d8c7dac01be2d4963e00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f96d606f3a2b4cb25486d8c7dac01be2d4963e00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f96d606f3a2b4cb25486d8c7dac01be2d4963e00/comments", "author": null, "committer": null, "parents": [{"sha": "cb13c28858b9c5c243241121206578b5f9f2827c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb13c28858b9c5c243241121206578b5f9f2827c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb13c28858b9c5c243241121206578b5f9f2827c"}], "stats": {"total": 351, "additions": 270, "deletions": 81}, "files": [{"sha": "8d15bf2dcb74dee23eaee594f8816c2a7e152c83", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96d606f3a2b4cb25486d8c7dac01be2d4963e00/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96d606f3a2b4cb25486d8c7dac01be2d4963e00/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f96d606f3a2b4cb25486d8c7dac01be2d4963e00", "patch": "@@ -1,3 +1,26 @@\n+2007-05-06  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\t    Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/31201\n+\t* gfortran.h: Add runtime error codes from libgfortran.h. Define\n+\tMAX_UNIT_NUMBER.\n+\t* trans.c (gfc_trans_runtime_check): Update the format of runtime error\n+\tmessages to match library runtime errors.  Use call to new library\n+\tfunction runtime_error_at().\n+\t* trans.h: Add prototype for new function gfc_trans_io_runtime_check.\n+\tAdd declaration for library functions runtime_error_at and\n+\tgenerate_error.\n+\t* trans_io.c (gfc_trans_io_runtime_check): New function.\n+\t(set_parameter_value): Add error checking for UNIT numbers.\n+\t(set_parameter_ref): Initialize the users variable to zero. \n+\t(gfc_trans_open): Move setting of unit number to after setting of common\n+\tflags so that runtime error trapping can be detected.\n+\t(gfc_trans_close): Likewise. (build_filepos): Likewise.\n+\t(gfc_trans_inquire): Likewise. (build_dt): Likewise.\n+\t* trans-decl.c: Add declarations for runtime_error_at and\n+\tgenerate_error. (gfc_build_builtin_function_decls): Build function\n+\tdeclarations for runtime_error_at and generate_error.\n+\n 2007-05-06  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/31540"}, {"sha": "df0896dd068e88d78bcdc91d87223b43e17d4e26", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96d606f3a2b4cb25486d8c7dac01be2d4963e00/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96d606f3a2b4cb25486d8c7dac01be2d4963e00/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=f96d606f3a2b4cb25486d8c7dac01be2d4963e00", "patch": "@@ -472,6 +472,39 @@ enum gfc_generic_isym_id\n };\n typedef enum gfc_generic_isym_id gfc_generic_isym_id;\n \n+/* Runtime errors.  The EOR and EOF errors are required to be negative.\n+   These codes must be kept synchronized with their equivalents in\n+   libgfortran/libgfortran.h .  */\n+\n+typedef enum\n+{\n+  IOERROR_FIRST = -3,\t\t/* Marker for the first error.  */\n+  IOERROR_EOR = -2,\n+  IOERROR_END = -1,\n+  IOERROR_OK = 0,\t\t\t/* Indicates success, must be zero.  */\n+  IOERROR_OS = 5000,\t\t/* Operating system error, more info in errno.  */\n+  IOERROR_OPTION_CONFLICT,\n+  IOERROR_BAD_OPTION,\n+  IOERROR_MISSING_OPTION,\n+  IOERROR_ALREADY_OPEN,\n+  IOERROR_BAD_UNIT,\n+  IOERROR_FORMAT,\n+  IOERROR_BAD_ACTION,\n+  IOERROR_ENDFILE,\n+  IOERROR_BAD_US,\n+  IOERROR_READ_VALUE,\n+  IOERROR_READ_OVERFLOW,\n+  IOERROR_INTERNAL,\n+  IOERROR_INTERNAL_UNIT,\n+  IOERROR_ALLOCATION,\n+  IOERROR_DIRECT_EOR,\n+  IOERROR_SHORT_RECORD,\n+  IOERROR_CORRUPT_FILE,\n+  IOERROR_LAST\t\t\t/* Not a real error, the last error # + 1.  */\n+}\n+ioerror_codes;\n+\n+\n /************************* Structures *****************************/\n \n /* Used for keeping things in balanced binary trees.  */"}, {"sha": "835e515e628cd4dd1323de0962ce15ed3e8f75b0", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96d606f3a2b4cb25486d8c7dac01be2d4963e00/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96d606f3a2b4cb25486d8c7dac01be2d4963e00/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=f96d606f3a2b4cb25486d8c7dac01be2d4963e00", "patch": "@@ -90,6 +90,8 @@ tree gfor_fndecl_stop_numeric;\n tree gfor_fndecl_stop_string;\n tree gfor_fndecl_select_string;\n tree gfor_fndecl_runtime_error;\n+tree gfor_fndecl_runtime_error_at;\n+tree gfor_fndecl_generate_error;\n tree gfor_fndecl_set_fpe;\n tree gfor_fndecl_set_std;\n tree gfor_fndecl_set_convert;\n@@ -2335,6 +2337,18 @@ gfc_build_builtin_function_decls (void)\n   /* The runtime_error function does not return.  */\n   TREE_THIS_VOLATILE (gfor_fndecl_runtime_error) = 1;\n \n+  gfor_fndecl_runtime_error_at =\n+    gfc_build_library_function_decl (get_identifier (PREFIX(\"runtime_error_at\")),\n+\t\t\t\t     void_type_node, 2, pchar_type_node,\n+\t\t\t\t     pchar_type_node);\n+  /* The runtime_error_at function does not return.  */\n+  TREE_THIS_VOLATILE (gfor_fndecl_runtime_error_at) = 1;\n+  \n+  gfor_fndecl_generate_error =\n+    gfc_build_library_function_decl (get_identifier (PREFIX(\"generate_error\")),\n+\t\t\t\t     void_type_node, 3, pvoid_type_node,\n+                                     gfc_c_int_type_node, pchar_type_node);\n+\n   gfor_fndecl_set_fpe =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"set_fpe\")),\n \t\t\t\t    void_type_node, 1, gfc_c_int_type_node);"}, {"sha": "4b87bcba24113ec42f83eda5a20c414a2eeaf43a", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 187, "deletions": 75, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96d606f3a2b4cb25486d8c7dac01be2d4963e00/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96d606f3a2b4cb25486d8c7dac01be2d4963e00/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=f96d606f3a2b4cb25486d8c7dac01be2d4963e00", "patch": "@@ -212,6 +212,62 @@ gfc_build_st_parameter (enum ioparam_type ptype, tree *types)\n   st_parameter[ptype].type = t;\n }\n \n+\n+/* Build code to test an error condition and call generate_error if needed.\n+   Note: This builds calls to generate_error in the runtime library function.\n+   The function generate_error is dependent on certain parameters in the\n+   st_parameter_common flags to be set. (See libgfortran/runtime/error.c)\n+   Therefore, the code to set these flags must be generated before\n+   this function is used.  */\n+\n+void\n+gfc_trans_io_runtime_check (tree cond, tree var, int error_code,\n+\t\t\t const char * msgid, stmtblock_t * pblock)\n+{\n+  stmtblock_t block;\n+  tree body;\n+  tree tmp;\n+  tree arg1, arg2, arg3;\n+  char *message;\n+\n+  if (integer_zerop (cond))\n+    return;\n+\n+  /* The code to generate the error.  */\n+  gfc_start_block (&block);\n+  \n+  arg1 = build_fold_addr_expr (var);\n+  \n+  arg2 = build_int_cst (integer_type_node, error_code),\n+  \n+  asprintf (&message, \"%s\", _(msgid));\n+  arg3 = gfc_build_addr_expr (pchar_type_node, gfc_build_cstring_const(message));\n+  gfc_free(message);\n+  \n+  tmp = build_call_expr (gfor_fndecl_generate_error, 3, arg1, arg2, arg3);\n+\n+  gfc_add_expr_to_block (&block, tmp);\n+\n+  body = gfc_finish_block (&block);\n+\n+  if (integer_onep (cond))\n+    {\n+      gfc_add_expr_to_block (pblock, body);\n+    }\n+  else\n+    {\n+      /* Tell the compiler that this isn't likely.  */\n+      cond = fold_convert (long_integer_type_node, cond);\n+      tmp = build_int_cst (long_integer_type_node, 0);\n+      cond = build_call_expr (built_in_decls[BUILT_IN_EXPECT], 2, cond, tmp);\n+      cond = fold_convert (boolean_type_node, cond);\n+\n+      tmp = build3_v (COND_EXPR, cond, body, build_empty_stmt ());\n+      gfc_add_expr_to_block (pblock, tmp);\n+    }\n+}\n+\n+\n /* Create function decls for IO library functions.  */\n \n void\n@@ -396,16 +452,49 @@ set_parameter_value (stmtblock_t *block, tree var, enum iofield type,\n   gfc_se se;\n   tree tmp;\n   gfc_st_parameter_field *p = &st_parameter_field[type];\n+  tree dest_type = TREE_TYPE (p->field);\n \n   gfc_init_se (&se, NULL);\n-  gfc_conv_expr_type (&se, e, TREE_TYPE (p->field));\n+  gfc_conv_expr_val (&se, e);\n+\n+  /* If we're storing a UNIT number, we need to check it first.  */\n+  if (type == IOPARM_common_unit && e->ts.kind != 4)\n+    {\n+      tree cond, max;\n+      ioerror_codes bad_unit;\n+      int i;\n+\n+      bad_unit = IOERROR_BAD_UNIT;\n+\n+      /* Don't evaluate the UNIT number multiple times.  */\n+      se.expr = gfc_evaluate_now (se.expr, &se.pre);\n+\n+      /* UNIT numbers should be nonnegative.  */\n+      cond = fold_build2 (LT_EXPR, boolean_type_node, se.expr,\n+\t\t\t  build_int_cst (TREE_TYPE (se.expr),0));\n+      gfc_trans_io_runtime_check (cond, var, bad_unit,\n+\t\t\t       \"Negative unit number in I/O statement\",\n+\t\t\t       &se.pre);\n+    \n+      /* UNIT numbers should be less than the max.  */\n+      i = gfc_validate_kind (BT_INTEGER, 4, false);\n+      max = gfc_conv_mpz_to_tree (gfc_integer_kinds[i].huge, 4);\n+      cond = fold_build2 (GT_EXPR, boolean_type_node, se.expr,\n+\t\t\t  fold_convert (TREE_TYPE (se.expr), max));\n+      gfc_trans_io_runtime_check (cond, var, bad_unit,\n+\t\t\t       \"Unit number in I/O statement too large\",\n+\t\t\t       &se.pre);\n+\n+    }\n+\n+  se.expr = convert (dest_type, se.expr);\n   gfc_add_block_to_block (block, &se.pre);\n \n   if (p->param_type == IOPARM_ptype_common)\n     var = build3 (COMPONENT_REF, st_parameter[IOPARM_ptype_common].type,\n \t\t  var, TYPE_FIELDS (TREE_TYPE (var)), NULL_TREE);\n-  tmp = build3 (COMPONENT_REF, TREE_TYPE (p->field), var, p->field,\n-\t\tNULL_TREE);\n+\n+  tmp = build3 (COMPONENT_REF, dest_type, var, p->field, NULL_TREE);\n   gfc_add_modify_expr (block, tmp, se.expr);\n   return p->mask;\n }\n@@ -430,20 +519,42 @@ set_parameter_ref (stmtblock_t *block, stmtblock_t *postblock,\n \n   if (TYPE_MODE (TREE_TYPE (se.expr))\n       == TYPE_MODE (TREE_TYPE (TREE_TYPE (p->field))))\n-    addr = convert (TREE_TYPE (p->field),\n-\t\t    build_fold_addr_expr (se.expr));\n+    {\n+      addr = convert (TREE_TYPE (p->field), build_fold_addr_expr (se.expr));\n+\n+      /* If this is for the iostat variable initialize the\n+\t user variable to IOERROR_OK which is zero.  */\n+      if (type == IOPARM_common_iostat)\n+\t{\n+\t  ioerror_codes ok;\n+\t  ok = IOERROR_OK;\n+          gfc_add_modify_expr (block, se.expr,\n+\t\t\t       build_int_cst (TREE_TYPE (se.expr), ok));\n+\t}\n+    }\n   else\n     {\n       /* The type used by the library has different size\n-\t from the type of the variable supplied by the user.\n-\t Need to use a temporary.  */\n-      tree tmpvar\n-\t= gfc_create_var (TREE_TYPE (TREE_TYPE (p->field)),\n-\t\t\t  st_parameter_field[type].name);\n+\tfrom the type of the variable supplied by the user.\n+\tNeed to use a temporary.  */\n+      tree tmpvar = gfc_create_var (TREE_TYPE (TREE_TYPE (p->field)),\n+\t\t\t\t    st_parameter_field[type].name);\n+\n+      /* If this is for the iostat variable, initialize the\n+\t user variable to IOERROR_OK which is zero.  */\n+      if (type == IOPARM_common_iostat)\n+\t{\n+\t  ioerror_codes ok;\n+\t  ok = IOERROR_OK;\n+          gfc_add_modify_expr (block, tmpvar,\n+\t\t\t       build_int_cst (TREE_TYPE (tmpvar), ok));\n+\t}\n+\n       addr = build_fold_addr_expr (tmpvar);\n+\t/* After the I/O operation, we set the variable from the temporary.  */\n       tmp = convert (TREE_TYPE (se.expr), tmpvar);\n       gfc_add_modify_expr (postblock, se.expr, tmp);\n-    }\n+     }\n \n   if (p->param_type == IOPARM_ptype_common)\n     var = build3 (COMPONENT_REF, st_parameter[IOPARM_ptype_common].type,\n@@ -776,10 +887,16 @@ gfc_trans_open (gfc_code * code)\n   set_error_locus (&block, var, &code->loc);\n   p = code->ext.open;\n \n-  if (p->unit)\n-    set_parameter_value (&block, var, IOPARM_common_unit, p->unit);\n-  else\n-    set_parameter_const (&block, var, IOPARM_common_unit, 0);\n+  if (p->iomsg)\n+    mask |= set_string (&block, &post_block, var, IOPARM_common_iomsg,\n+\t\t\tp->iomsg);\n+\n+  if (p->iostat)\n+    mask |= set_parameter_ref (&block, &post_block, var, IOPARM_common_iostat,\n+\t\t\t       p->iostat);\n+\n+  if (p->err)\n+    mask |= IOPARM_common_err;\n \n   if (p->file)\n     mask |= set_string (&block, &post_block, var, IOPARM_open_file, p->file);\n@@ -817,23 +934,17 @@ gfc_trans_open (gfc_code * code)\n   if (p->pad)\n     mask |= set_string (&block, &post_block, var, IOPARM_open_pad, p->pad);\n \n-  if (p->iomsg)\n-    mask |= set_string (&block, &post_block, var, IOPARM_common_iomsg,\n-\t\t\tp->iomsg);\n-\n-  if (p->iostat)\n-    mask |= set_parameter_ref (&block, &post_block, var, IOPARM_common_iostat,\n-\t\t\t       p->iostat);\n-\n-  if (p->err)\n-    mask |= IOPARM_common_err;\n-\n   if (p->convert)\n     mask |= set_string (&block, &post_block, var, IOPARM_open_convert,\n \t\t\tp->convert);\n \n   set_parameter_const (&block, var, IOPARM_common_flags, mask);\n \n+  if (p->unit)\n+    set_parameter_value (&block, var, IOPARM_common_unit, p->unit);\n+  else\n+    set_parameter_const (&block, var, IOPARM_common_unit, 0);\n+\n   tmp = build_fold_addr_expr (var);\n   tmp = build_call_expr (iocall[IOCALL_OPEN], 1, tmp);\n   gfc_add_expr_to_block (&block, tmp);\n@@ -864,15 +975,6 @@ gfc_trans_close (gfc_code * code)\n   set_error_locus (&block, var, &code->loc);\n   p = code->ext.close;\n \n-  if (p->unit)\n-    set_parameter_value (&block, var, IOPARM_common_unit, p->unit);\n-  else\n-    set_parameter_const (&block, var, IOPARM_common_unit, 0);\n-\n-  if (p->status)\n-    mask |= set_string (&block, &post_block, var, IOPARM_close_status,\n-\t\t\tp->status);\n-\n   if (p->iomsg)\n     mask |= set_string (&block, &post_block, var, IOPARM_common_iomsg,\n \t\t\tp->iomsg);\n@@ -884,8 +986,17 @@ gfc_trans_close (gfc_code * code)\n   if (p->err)\n     mask |= IOPARM_common_err;\n \n+  if (p->status)\n+    mask |= set_string (&block, &post_block, var, IOPARM_close_status,\n+\t\t\tp->status);\n+\n   set_parameter_const (&block, var, IOPARM_common_flags, mask);\n \n+  if (p->unit)\n+    set_parameter_value (&block, var, IOPARM_common_unit, p->unit);\n+  else\n+    set_parameter_const (&block, var, IOPARM_common_unit, 0);\n+\n   tmp = build_fold_addr_expr (var);\n   tmp = build_call_expr (iocall[IOCALL_CLOSE], 1, tmp);\n   gfc_add_expr_to_block (&block, tmp);\n@@ -918,11 +1029,6 @@ build_filepos (tree function, gfc_code * code)\n \n   set_error_locus (&block, var, &code->loc);\n \n-  if (p->unit)\n-    set_parameter_value (&block, var, IOPARM_common_unit, p->unit);\n-  else\n-    set_parameter_const (&block, var, IOPARM_common_unit, 0);\n-\n   if (p->iomsg)\n     mask |= set_string (&block, &post_block, var, IOPARM_common_iomsg,\n \t\t\tp->iomsg);\n@@ -936,6 +1042,11 @@ build_filepos (tree function, gfc_code * code)\n \n   set_parameter_const (&block, var, IOPARM_common_flags, mask);\n \n+  if (p->unit)\n+    set_parameter_value (&block, var, IOPARM_common_unit, p->unit);\n+  else\n+    set_parameter_const (&block, var, IOPARM_common_unit, 0);\n+\n   tmp = build_fold_addr_expr (var);\n   tmp = build_call_expr (function, 1, tmp);\n   gfc_add_expr_to_block (&block, tmp);\n@@ -1003,19 +1114,6 @@ gfc_trans_inquire (gfc_code * code)\n   set_error_locus (&block, var, &code->loc);\n   p = code->ext.inquire;\n \n-  /* Sanity check.  */\n-  if (p->unit && p->file)\n-    gfc_error (\"INQUIRE statement at %L cannot contain both FILE and UNIT specifiers\", &code->loc);\n-\n-  if (p->unit)\n-    set_parameter_value (&block, var, IOPARM_common_unit, p->unit);\n-  else\n-    set_parameter_const (&block, var, IOPARM_common_unit, 0);\n-\n-  if (p->file)\n-    mask |= set_string (&block, &post_block, var, IOPARM_inquire_file,\n-\t\t\tp->file);\n-\n   if (p->iomsg)\n     mask |= set_string (&block, &post_block, var, IOPARM_common_iomsg,\n \t\t\tp->iomsg);\n@@ -1024,6 +1122,17 @@ gfc_trans_inquire (gfc_code * code)\n     mask |= set_parameter_ref (&block, &post_block, var, IOPARM_common_iostat,\n \t\t\t       p->iostat);\n \n+  if (p->err)\n+    mask |= IOPARM_common_err;\n+\n+  /* Sanity check.  */\n+  if (p->unit && p->file)\n+    gfc_error (\"INQUIRE statement at %L cannot contain both FILE and UNIT specifiers\", &code->loc);\n+\n+  if (p->file)\n+    mask |= set_string (&block, &post_block, var, IOPARM_inquire_file,\n+\t\t\tp->file);\n+\n   if (p->exist)\n     mask |= set_parameter_ref (&block, &post_block, var, IOPARM_inquire_exist,\n \t\t\t       p->exist);\n@@ -1108,9 +1217,6 @@ gfc_trans_inquire (gfc_code * code)\n     mask |= set_string (&block, &post_block, var, IOPARM_inquire_pad,\n \t\t\tp->pad);\n \n-  if (p->err)\n-    mask |= IOPARM_common_err;\n-\n   if (p->convert)\n     mask |= set_string (&block, &post_block, var, IOPARM_inquire_convert,\n \t\t\tp->convert);\n@@ -1121,6 +1227,11 @@ gfc_trans_inquire (gfc_code * code)\n \n   set_parameter_const (&block, var, IOPARM_common_flags, mask);\n \n+  if (p->unit)\n+    set_parameter_value (&block, var, IOPARM_common_unit, p->unit);\n+  else\n+    set_parameter_const (&block, var, IOPARM_common_unit, 0);\n+\n   tmp = build_fold_addr_expr (var);\n   tmp = build_call_expr (iocall[IOCALL_INQUIRE], 1, tmp);\n   gfc_add_expr_to_block (&block, tmp);\n@@ -1419,14 +1530,29 @@ build_dt (tree function, gfc_code * code)\n \t\t\t\t     var, dt->io_unit);\n \t  set_parameter_const (&block, var, IOPARM_common_unit, 0);\n \t}\n-      else\n-\tset_parameter_value (&block, var, IOPARM_common_unit, dt->io_unit);\n     }\n   else\n     set_parameter_const (&block, var, IOPARM_common_unit, 0);\n \n   if (dt)\n     {\n+      if (dt->iomsg)\n+\tmask |= set_string (&block, &post_block, var, IOPARM_common_iomsg,\n+\t\t\t    dt->iomsg);\n+\n+      if (dt->iostat)\n+\tmask |= set_parameter_ref (&block, &post_end_block, var,\n+\t\t\t\t   IOPARM_common_iostat, dt->iostat);\n+\n+      if (dt->err)\n+\tmask |= IOPARM_common_err;\n+\n+      if (dt->eor)\n+\tmask |= IOPARM_common_eor;\n+\n+      if (dt->end)\n+\tmask |= IOPARM_common_end;\n+\n       if (dt->rec)\n \tmask |= set_parameter_value (&block, var, IOPARM_dt_rec, dt->rec);\n \n@@ -1447,27 +1573,10 @@ build_dt (tree function, gfc_code * code)\n \t\t\t\tdt->format_label->format);\n \t}\n \n-      if (dt->iomsg)\n-\tmask |= set_string (&block, &post_block, var, IOPARM_common_iomsg,\n-\t\t\t    dt->iomsg);\n-\n-      if (dt->iostat)\n-\tmask |= set_parameter_ref (&block, &post_end_block, var,\n-\t\t\t\t   IOPARM_common_iostat, dt->iostat);\n-\n       if (dt->size)\n \tmask |= set_parameter_ref (&block, &post_end_block, var,\n \t\t\t\t   IOPARM_dt_size, dt->size);\n \n-      if (dt->err)\n-\tmask |= IOPARM_common_err;\n-\n-      if (dt->eor)\n-\tmask |= IOPARM_common_eor;\n-\n-      if (dt->end)\n-\tmask |= IOPARM_common_end;\n-\n       if (dt->namelist)\n \t{\n \t  if (dt->format_expr || dt->format_label)\n@@ -1491,6 +1600,9 @@ build_dt (tree function, gfc_code * code)\n \t}\n       else\n \tset_parameter_const (&block, var, IOPARM_common_flags, mask);\n+\n+      if (dt->io_unit && dt->io_unit->ts.type == BT_INTEGER)\n+\tset_parameter_value (&block, var, IOPARM_common_unit, dt->io_unit);\n     }\n   else\n     set_parameter_const (&block, var, IOPARM_common_flags, mask);"}, {"sha": "5e717e4cbcf8e8ac1232c0dabd7033331c65f836", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96d606f3a2b4cb25486d8c7dac01be2d4963e00/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96d606f3a2b4cb25486d8c7dac01be2d4963e00/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=f96d606f3a2b4cb25486d8c7dac01be2d4963e00", "patch": "@@ -318,8 +318,8 @@ gfc_trans_runtime_check (tree cond, const char * msgid, stmtblock_t * pblock,\n   stmtblock_t block;\n   tree body;\n   tree tmp;\n-  tree arg;\n-  char * message;\n+  tree arg, arg2;\n+  char *message;\n   int line;\n \n   if (integer_zerop (cond))\n@@ -335,17 +335,21 @@ gfc_trans_runtime_check (tree cond, const char * msgid, stmtblock_t * pblock,\n #else \n       line = where->lb->linenum;\n #endif\n-      asprintf (&message, \"%s (in file '%s', at line %d)\", _(msgid),\n-\t\twhere->lb->file->filename, line);\n+      asprintf (&message, \"At line %d of file %s\",  line,\n+\t\twhere->lb->file->filename);\n     }\n   else\n-    asprintf (&message, \"%s (in file '%s', around line %d)\", _(msgid),\n+    asprintf (&message, \"In file '%s', around line %d\",\n \t      gfc_source_file, input_line + 1);\n \n   arg = gfc_build_addr_expr (pchar_type_node, gfc_build_cstring_const(message));\n   gfc_free(message);\n+  \n+  asprintf (&message, \"%s\", _(msgid));\n+  arg2 = gfc_build_addr_expr (pchar_type_node, gfc_build_cstring_const(message));\n+  gfc_free(message);\n \n-  tmp = build_call_expr (gfor_fndecl_runtime_error, 1, arg);\n+  tmp = build_call_expr (gfor_fndecl_runtime_error_at, 2, arg, arg2);\n   gfc_add_expr_to_block (&block, tmp);\n \n   body = gfc_finish_block (&block);"}, {"sha": "731045a276922b1bbc48d1c0f21bdef16e604ba4", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f96d606f3a2b4cb25486d8c7dac01be2d4963e00/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f96d606f3a2b4cb25486d8c7dac01be2d4963e00/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=f96d606f3a2b4cb25486d8c7dac01be2d4963e00", "patch": "@@ -448,6 +448,7 @@ tree gfc_trans_pointer_assignment (gfc_expr *, gfc_expr *);\n /* Initialize function decls for library functions.  */\n void gfc_build_intrinsic_lib_fndecls (void);\n /* Create function decls for IO library functions.  */\n+void gfc_trans_io_runtime_check (tree, tree, int, const char *, stmtblock_t *);\n void gfc_build_io_library_fndecls (void);\n /* Build a function decl for a library function.  */\n tree gfc_build_library_function_decl (tree, tree, int, ...);\n@@ -487,6 +488,8 @@ extern GTY(()) tree gfor_fndecl_stop_numeric;\n extern GTY(()) tree gfor_fndecl_stop_string;\n extern GTY(()) tree gfor_fndecl_select_string;\n extern GTY(()) tree gfor_fndecl_runtime_error;\n+extern GTY(()) tree gfor_fndecl_runtime_error_at;\n+extern GTY(()) tree gfor_fndecl_generate_error;\n extern GTY(()) tree gfor_fndecl_set_fpe;\n extern GTY(()) tree gfor_fndecl_set_std;\n extern GTY(()) tree gfor_fndecl_ttynam;"}]}