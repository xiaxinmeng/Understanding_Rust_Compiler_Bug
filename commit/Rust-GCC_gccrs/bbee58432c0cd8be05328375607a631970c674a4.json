{"sha": "bbee58432c0cd8be05328375607a631970c674a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJlZTU4NDMyYzBjZDhiZTA1MzI4Mzc1NjA3YTYzMTk3MGM2NzRhNA==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-03-26T16:39:11Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-03-26T16:39:11Z"}, "message": "toplev.c (check_global_declaration_1): Do not call assemble_external.\n\n\t* toplev.c (check_global_declaration_1): Do not call assemble_external.\n\t* expr.c (emit_block_move_libcall_fn): Likewise.\n\t(clear_storage_libcall_fn): Likewise.\n\t(expand_expr_addr_expr_1): Likewise.\n\t(expand_expr_real_1): Likewise.\n\t* calls.c (rtx_for_function_call): Likewise.\n\nFrom-SVN: r185813", "tree": {"sha": "c3f613b6ee85a62bf5f20361a7f272d9e9f410fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3f613b6ee85a62bf5f20361a7f272d9e9f410fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbee58432c0cd8be05328375607a631970c674a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbee58432c0cd8be05328375607a631970c674a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbee58432c0cd8be05328375607a631970c674a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbee58432c0cd8be05328375607a631970c674a4/comments", "author": null, "committer": null, "parents": [{"sha": "ffe5d70808b73597acd5b7a249aedefaf2ce8863", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffe5d70808b73597acd5b7a249aedefaf2ce8863", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffe5d70808b73597acd5b7a249aedefaf2ce8863"}], "stats": {"total": 38, "additions": 14, "deletions": 24}, "files": [{"sha": "bd53aff7fa3d67e66c1278cb09e44d2bd8654268", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbee58432c0cd8be05328375607a631970c674a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbee58432c0cd8be05328375607a631970c674a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bbee58432c0cd8be05328375607a631970c674a4", "patch": "@@ -1,5 +1,12 @@\n 2012-03-26  Steven Bosscher  <steven@gcc.gnu.org>\n \n+\t* toplev.c (check_global_declaration_1): Do not call assemble_external.\n+\t* expr.c (emit_block_move_libcall_fn): Likewise.\n+\t(clear_storage_libcall_fn): Likewise.\n+\t(expand_expr_addr_expr_1): Likewise.\n+\t(expand_expr_real_1): Likewise.\n+\t* calls.c (rtx_for_function_call): Likewise.\n+\n \t* varasm.c (assemble_external): Assert this function is only called\n \tduring or after expanding to RTL.\n "}, {"sha": "8c1e0797e44da0bd9daa4d9163afd541dd75fa77", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbee58432c0cd8be05328375607a631970c674a4/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbee58432c0cd8be05328375607a631970c674a4/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=bbee58432c0cd8be05328375607a631970c674a4", "patch": "@@ -1642,13 +1642,8 @@ rtx_for_function_call (tree fndecl, tree addr)\n   /* Get the function to call, in the form of RTL.  */\n   if (fndecl)\n     {\n-      /* If this is the first use of the function, see if we need to\n-\t make an external definition for it.  */\n       if (!TREE_USED (fndecl) && fndecl != current_function_decl)\n-\t{\n-\t  assemble_external (fndecl);\n-\t  TREE_USED (fndecl) = 1;\n-\t}\n+\tTREE_USED (fndecl) = 1;\n \n       /* Get a SYMBOL_REF rtx for the function address.  */\n       funexp = XEXP (DECL_RTL (fndecl), 0);"}, {"sha": "c63343ec68235406e2f1f4265f28bfcea997c80f", "filename": "gcc/expr.c", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbee58432c0cd8be05328375607a631970c674a4/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbee58432c0cd8be05328375607a631970c674a4/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=bbee58432c0cd8be05328375607a631970c674a4", "patch": "@@ -1375,8 +1375,7 @@ emit_block_move_via_libcall (rtx dst, rtx src, rtx size, bool tailcall)\n }\n \n /* A subroutine of emit_block_move_via_libcall.  Create the tree node\n-   for the function we use for block copies.  The first time FOR_CALL\n-   is true, we call assemble_external.  */\n+   for the function we use for block copies.  */\n \n static GTY(()) tree block_move_fn;\n \n@@ -1419,7 +1418,6 @@ emit_block_move_libcall_fn (int for_call)\n     {\n       emitted_extern = true;\n       make_decl_rtl (block_move_fn);\n-      assemble_external (block_move_fn);\n     }\n \n   return block_move_fn;\n@@ -2747,8 +2745,7 @@ set_storage_via_libcall (rtx object, rtx size, rtx val, bool tailcall)\n }\n \n /* A subroutine of set_storage_via_libcall.  Create the tree node\n-   for the function we use for block clears.  The first time FOR_CALL\n-   is true, we call assemble_external.  */\n+   for the function we use for block clears.  */\n \n tree block_clear_fn;\n \n@@ -2791,7 +2788,6 @@ clear_storage_libcall_fn (int for_call)\n     {\n       emitted_extern = true;\n       make_decl_rtl (block_clear_fn);\n-      assemble_external (block_clear_fn);\n     }\n \n   return block_clear_fn;\n@@ -7413,11 +7409,8 @@ expand_expr_addr_expr_1 (tree exp, rtx target, enum machine_mode tmode,\n \t  result = XEXP (result, 0);\n \n \t  /* ??? Is this needed anymore?  */\n-\t  if (DECL_P (exp) && !TREE_USED (exp) == 0)\n-\t    {\n-\t      assemble_external (exp);\n-\t      TREE_USED (exp) = 1;\n-\t    }\n+\t  if (DECL_P (exp))\n+\t    TREE_USED (exp) = 1;\n \n \t  if (modifier != EXPAND_INITIALIZER\n \t      && modifier != EXPAND_CONST_ADDRESS\n@@ -9012,11 +9005,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       /* Ensure variable marked as used even if it doesn't go through\n \t a parser.  If it hasn't be used yet, write out an external\n \t definition.  */\n-      if (! TREE_USED (exp))\n-\t{\n-\t  assemble_external (exp);\n-\t  TREE_USED (exp) = 1;\n-\t}\n+      TREE_USED (exp) = 1;\n \n       /* Show we haven't gotten RTL for this yet.  */\n       temp = 0;"}, {"sha": "e01ed8141001d02a5795497988878c1ef39ad8be", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbee58432c0cd8be05328375607a631970c674a4/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbee58432c0cd8be05328375607a631970c674a4/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=bbee58432c0cd8be05328375607a631970c674a4", "patch": "@@ -486,7 +486,6 @@ check_global_declaration_1 (tree decl)\n \twarning (OPT_Wunused_function, \"%q+F declared %<static%> but never defined\", decl);\n       /* This symbol is effectively an \"extern\" declaration now.  */\n       TREE_PUBLIC (decl) = 1;\n-      assemble_external (decl);\n     }\n \n   /* Warn about static fns or vars defined but not used.  */\n@@ -591,7 +590,7 @@ compile_file (void)\n \n       output_shared_constant_pool ();\n       output_object_blocks ();\n-  finish_tm_clone_pairs ();\n+      finish_tm_clone_pairs ();\n \n       /* Write out any pending weak symbol declarations.  */\n       weak_finish ();"}]}