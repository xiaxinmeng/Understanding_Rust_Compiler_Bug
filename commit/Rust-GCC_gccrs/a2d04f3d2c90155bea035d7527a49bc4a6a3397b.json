{"sha": "a2d04f3d2c90155bea035d7527a49bc4a6a3397b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJkMDRmM2QyYzkwMTU1YmVhMDM1ZDc1MjdhNDliYzRhNmEzMzk3Yg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-01-13T13:33:43Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-01-13T13:34:08Z"}, "message": "mklog: support define_insn_and_split format\n\ncontrib/ChangeLog:\n\n\t* mklog.py: Parse also define_insn_and_split and similar\n\tdirectives in .md files.\n\t* test_mklog.py: Test.", "tree": {"sha": "51bb36b5c9a4497f0703ad2ca4dcb53874099f3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51bb36b5c9a4497f0703ad2ca4dcb53874099f3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2d04f3d2c90155bea035d7527a49bc4a6a3397b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2d04f3d2c90155bea035d7527a49bc4a6a3397b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2d04f3d2c90155bea035d7527a49bc4a6a3397b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2d04f3d2c90155bea035d7527a49bc4a6a3397b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11cbea852b0ae2b0f17a9caeaf6344d689231c2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11cbea852b0ae2b0f17a9caeaf6344d689231c2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11cbea852b0ae2b0f17a9caeaf6344d689231c2f"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "bf51e56337e5326dbc569ff5658aa489857448f2", "filename": "contrib/mklog.py", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2d04f3d2c90155bea035d7527a49bc4a6a3397b/contrib%2Fmklog.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2d04f3d2c90155bea035d7527a49bc4a6a3397b/contrib%2Fmklog.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fmklog.py?ref=a2d04f3d2c90155bea035d7527a49bc4a6a3397b", "patch": "@@ -49,10 +49,11 @@\n super_macro_regex = re.compile(r'^DEF[A-Z0-9_]+\\s*\\(([a-zA-Z0-9_]+)')\n fn_regex = re.compile(r'([a-zA-Z_][^()\\s]*)\\s*\\([^*]')\n template_and_param_regex = re.compile(r'<[^<>]*>')\n+md_def_regex = re.compile(r'\\(define.*\\s+\"(.*)\"')\n bugzilla_url = 'https://gcc.gnu.org/bugzilla/rest.cgi/bug?id=%s&' \\\n                'include_fields=summary'\n \n-function_extensions = {'.c', '.cpp', '.C', '.cc', '.h', '.inc', '.def'}\n+function_extensions = {'.c', '.cpp', '.C', '.cc', '.h', '.inc', '.def', '.md'}\n \n help_message = \"\"\"\\\n Generate ChangeLog template for PATCH.\n@@ -200,6 +201,15 @@ def generate_changelog(data, no_functions=False, fill_pr_titles=False):\n                             for line in hunk:\n                                 m = identifier_regex.match(line.value)\n                                 if line.is_added or line.is_removed:\n+                                    # special-case definition in .md files\n+                                    m2 = md_def_regex.match(line.value)\n+                                    if extension == '.md' and m2:\n+                                        fn = m2.group(1)\n+                                        if fn not in functions:\n+                                            functions.append(fn)\n+                                            last_fn = None\n+                                            success = True\n+\n                                     if not line.value.strip():\n                                         continue\n                                     modified_visited = True"}, {"sha": "7e95ec1a2ab539a32fc701866d81273eff97f5c0", "filename": "contrib/test_mklog.py", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2d04f3d2c90155bea035d7527a49bc4a6a3397b/contrib%2Ftest_mklog.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2d04f3d2c90155bea035d7527a49bc4a6a3397b/contrib%2Ftest_mklog.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Ftest_mklog.py?ref=a2d04f3d2c90155bea035d7527a49bc4a6a3397b", "patch": "@@ -399,6 +399,44 @@\n \n '''\n \n+PATCH9 = '''\\\n+diff --git a/gcc/config/i386/sse.md b/gcc/config/i386/sse.md\n+index 2a260c1cfbd..7f03fc491c3 100644\n+--- a/gcc/config/i386/sse.md\n++++ b/gcc/config/i386/sse.md\n+@@ -17611,6 +17611,23 @@ (define_insn \"avx2_<code>v16qiv16hi2<mask_name>\"\n+    (set_attr \"prefix\" \"maybe_evex\")\n+    (set_attr \"mode\" \"OI\")])\n+ \n++(define_insn_and_split \"*avx2_zero_extendv16qiv16hi2_1\"\n++  [(set (match_operand:V32QI 0 \"register_operand\" \"=v\")\n++\t(vec_select:V32QI\n++\t  (vec_concat:V64QI\n++\t    (match_operand:V32QI 1 \"nonimmediate_operand\" \"vm\")\n++\t    (match_operand:V32QI 2 \"const0_operand\" \"C\"))\n++\t  (match_parallel 3 \"pmovzx_parallel\"\n++\t    [(match_operand 4 \"const_int_operand\" \"n\")])))]\n++  \"TARGET_AVX2\"\n++  \"#\"\n++  \"&& reload_completed\"\n++  [(set (match_dup 0) (zero_extend:V16HI (match_dup 1)))]\n++{\n++  operands[0] = lowpart_subreg (V16HImode, operands[0], V32QImode);\n++  operands[1] = lowpart_subreg (V16QImode, operands[1], V32QImode);\n++})\n++\n+ (define_expand \"<insn>v16qiv16hi2\"\n+   [(set (match_operand:V16HI 0 \"register_operand\")\n+ \t(any_extend:V16HI\n+'''\n+\n+EXPECTED9 = '''\\\n+gcc/ChangeLog:\n+\n+\t* config/i386/sse.md (*avx2_zero_extendv16qiv16hi2_1):\n+\n+'''\n+\n class TestMklog(unittest.TestCase):\n     def test_macro_definition(self):\n         changelog = generate_changelog(PATCH1)\n@@ -437,3 +475,7 @@ def test_dr_detection_in_test_case(self):\n     def test_renaming(self):\n         changelog = generate_changelog(PATCH8)\n         assert changelog == EXPECTED8\n+\n+    def test_define_macro_parsing(self):\n+        changelog = generate_changelog(PATCH9)\n+        assert changelog == EXPECTED9"}]}