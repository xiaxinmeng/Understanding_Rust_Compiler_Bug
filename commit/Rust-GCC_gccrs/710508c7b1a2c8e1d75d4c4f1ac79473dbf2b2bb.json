{"sha": "710508c7b1a2c8e1d75d4c4f1ac79473dbf2b2bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEwNTA4YzdiMWEyYzhlMWQ3NWQ0YzRmMWFjNzk0NzNkYmYyYjJiYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-05T16:19:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-05T18:01:25Z"}, "message": "libstdc++: Fix multiple definitions of std::exception_ptr functions [PR 97729]\n\nThis fixes some multiple definition errors caused by the changes for\nPR libstdc++/90295. The previous solution for inlining the members of\nstd::exception_ptr but still exporting them from the library was to\nsuppress the 'inline' keyword on those functions when compiling\nlibsupc++/eh_ptr.cc, so they get defined in that file. That produces ODR\nviolations though, because there are now both inline and non-inline\ndefinitions in the library, due to the use of std::exception_ptr in\nother files sucg as src/c++11/future.cc.\n\nThe new solution is to define all the relevant members as 'inline'\nunconditionally, but use __attribute__((used)) to cause definitions to\nbe emitted in libsupc++/eh_ptr.cc as before. This doesn't quite work\nhowever, because PR c++/67453 means the attribute is ignored on\nconstructors and destructors. As a workaround, the old solution\n(conditionally inline) is still used for those members, but they are\ngiven the always_inline attribute so that they aren't emitted in\nsrc/c++11/future.o as inline definitions.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/97729\n\t* include/std/future (__basic_future::_M_get_result): Use\n\tnullptr for null pointer constant.\n\t* libsupc++/eh_ptr.cc (operator==, operator!=): Remove\n\tdefinitions.\n\t* libsupc++/exception_ptr.h (_GLIBCXX_EH_PTR_USED): Define\n\tmacro to conditionally add __attribute__((__used__)).\n\t(operator==, operator!=, exception_ptr::exception_ptr())\n\t(exception_ptr::exception_ptr(const exception_ptr&))\n\t(exception_ptr::~exception_ptr())\n\t(exception_ptr::operator=(const exception_ptr&))\n\t(exception_ptr::swap(exception_ptr&)): Always define as\n\tinline. Add macro to be conditionally \"used\".", "tree": {"sha": "8a346f958091efd5ee88f27e56d794a817206535", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a346f958091efd5ee88f27e56d794a817206535"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/710508c7b1a2c8e1d75d4c4f1ac79473dbf2b2bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/710508c7b1a2c8e1d75d4c4f1ac79473dbf2b2bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/710508c7b1a2c8e1d75d4c4f1ac79473dbf2b2bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/710508c7b1a2c8e1d75d4c4f1ac79473dbf2b2bb/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50b840ac5e1d6534e345c3fee9a97ae45ced6bc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b840ac5e1d6534e345c3fee9a97ae45ced6bc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50b840ac5e1d6534e345c3fee9a97ae45ced6bc7"}], "stats": {"total": 78, "additions": 34, "deletions": 44}, "files": [{"sha": "5d948018c75c3dd1bc995101fb446c1dd640e4b4", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/710508c7b1a2c8e1d75d4c4f1ac79473dbf2b2bb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/710508c7b1a2c8e1d75d4c4f1ac79473dbf2b2bb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=710508c7b1a2c8e1d75d4c4f1ac79473dbf2b2bb", "patch": "@@ -709,7 +709,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n         _State_base::_S_check(_M_state);\n         _Result_base& __res = _M_state->wait();\n-        if (!(__res._M_error == 0))\n+        if (!(__res._M_error == nullptr))\n           rethrow_exception(__res._M_error);\n         return static_cast<__result_type>(__res);\n       }"}, {"sha": "7e6863550ce426def617602369ad5a576e40e130", "filename": "libstdc++-v3/libsupc++/eh_ptr.cc", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/710508c7b1a2c8e1d75d4c4f1ac79473dbf2b2bb/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/710508c7b1a2c8e1d75d4c4f1ac79473dbf2b2bb/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc?ref=710508c7b1a2c8e1d75d4c4f1ac79473dbf2b2bb", "patch": "@@ -25,7 +25,12 @@\n #include <bits/c++config.h>\n #include \"eh_atomics.h\"\n \n+#if ! _GLIBCXX_INLINE_VERSION\n+// This macro causes exception_ptr to declare an older API (with corresponding\n+// definitions in this file) and to mark some inline functions as \"used\" so\n+// that definitions will be emitted in this translation unit.\n #define _GLIBCXX_EH_PTR_COMPAT\n+#endif\n \n #include <exception>\n #include <bits/exception_ptr.h>\n@@ -61,6 +66,8 @@ static_assert( adjptr<__cxa_exception>()\n #endif\n }\n \n+// Define non-inline functions.\n+\n std::__exception_ptr::exception_ptr::exception_ptr(void* obj) noexcept\n : _M_exception_object(obj)  { _M_addref(); }\n \n@@ -130,19 +137,6 @@ std::__exception_ptr::exception_ptr::__cxa_exception_type() const noexcept\n   return eh->exceptionType;\n }\n \n-// Retained for compatibility with CXXABI_1.3.12.\n-bool\n-std::__exception_ptr::operator==(const exception_ptr& lhs,\n-\t\t\t\t const exception_ptr& rhs) noexcept\n-{ return lhs._M_exception_object == rhs._M_exception_object; }\n-\n-// Retained for compatibility with CXXABI_1.3.12.\n-bool\n-std::__exception_ptr::operator!=(const exception_ptr& lhs,\n-\t\t\t\t const exception_ptr& rhs) noexcept\n-{ return !(lhs == rhs); }\n-\n-\n std::exception_ptr\n std::current_exception() noexcept\n {"}, {"sha": "001343ac0498c80744969748429f4c04483204ed", "filename": "libstdc++-v3/libsupc++/exception_ptr.h", "status": "modified", "additions": 26, "deletions": 30, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/710508c7b1a2c8e1d75d4c4f1ac79473dbf2b2bb/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/710508c7b1a2c8e1d75d4c4f1ac79473dbf2b2bb/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h?ref=710508c7b1a2c8e1d75d4c4f1ac79473dbf2b2bb", "patch": "@@ -39,6 +39,12 @@\n #include <typeinfo>\n #include <new>\n \n+#ifdef _GLIBCXX_EH_PTR_COMPAT\n+# define _GLIBCXX_EH_PTR_USED __attribute__((__used__))\n+#else\n+# define _GLIBCXX_EH_PTR_USED\n+#endif\n+\n extern \"C++\" {\n \n namespace std \n@@ -146,20 +152,17 @@ namespace std\n       { return _M_exception_object; }\n #endif\n \n-#ifdef _GLIBCXX_EH_PTR_COMPAT\n-      friend bool\n-      operator==(const exception_ptr&, const exception_ptr&)\n-\t_GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));\n-#elif __cpp_impl_three_way_comparison >= 201907L\n+#if __cpp_impl_three_way_comparison >= 201907L \\\n+      && ! defined _GLIBCXX_EH_PTR_COMPAT\n       friend bool\n       operator==(const exception_ptr&, const exception_ptr&) noexcept = default;\n #else\n-      friend bool\n+      friend _GLIBCXX_EH_PTR_USED bool\n       operator==(const exception_ptr& __x, const exception_ptr& __y)\n       _GLIBCXX_USE_NOEXCEPT\n       { return __x._M_exception_object == __y._M_exception_object; }\n \n-      friend bool\n+      friend _GLIBCXX_EH_PTR_USED bool\n       operator!=(const exception_ptr& __x, const exception_ptr& __y)\n       _GLIBCXX_USE_NOEXCEPT\n       { return __x._M_exception_object != __y._M_exception_object; }\n@@ -170,25 +173,30 @@ namespace std\n \t__attribute__ ((__pure__));\n     };\n \n-#ifndef _GLIBCXX_EH_PTR_COMPAT\n+    _GLIBCXX_EH_PTR_USED\n+#ifndef  _GLIBCXX_EH_PTR_COMPAT\n+    __attribute__((__always_inline__)) // XXX see PR 97729\n     inline\n #endif\n     exception_ptr::exception_ptr() _GLIBCXX_NOEXCEPT\n     : _M_exception_object(0)\n     { }\n \n-#ifndef _GLIBCXX_EH_PTR_COMPAT\n+    _GLIBCXX_EH_PTR_USED\n+#ifndef  _GLIBCXX_EH_PTR_COMPAT\n+    __attribute__((__always_inline__))\n     inline\n #endif\n-    exception_ptr::exception_ptr(const exception_ptr& __other)\n-      _GLIBCXX_NOEXCEPT\n+    exception_ptr::exception_ptr(const exception_ptr& __other) _GLIBCXX_NOEXCEPT\n     : _M_exception_object(__other._M_exception_object)\n     {\n       if (_M_exception_object)\n \t_M_addref();\n     }\n \n-#ifndef _GLIBCXX_EH_PTR_COMPAT\n+    _GLIBCXX_EH_PTR_USED\n+#ifndef  _GLIBCXX_EH_PTR_COMPAT\n+    __attribute__((__always_inline__))\n     inline\n #endif\n     exception_ptr::~exception_ptr() _GLIBCXX_USE_NOEXCEPT\n@@ -197,37 +205,23 @@ namespace std\n \t_M_release();\n     }\n \n-#ifndef _GLIBCXX_EH_PTR_COMPAT\n-    inline\n-#endif\n-    exception_ptr&\n+    _GLIBCXX_EH_PTR_USED\n+    inline exception_ptr&\n     exception_ptr::operator=(const exception_ptr& __other) _GLIBCXX_USE_NOEXCEPT\n     {\n       exception_ptr(__other).swap(*this);\n       return *this;\n     }\n \n-#ifndef _GLIBCXX_EH_PTR_COMPAT\n-    inline\n-#endif\n-    void\n+    _GLIBCXX_EH_PTR_USED\n+    inline void\n     exception_ptr::swap(exception_ptr &__other) _GLIBCXX_USE_NOEXCEPT\n     {\n       void *__tmp = _M_exception_object;\n       _M_exception_object = __other._M_exception_object;\n       __other._M_exception_object = __tmp;\n     }\n \n-#ifdef _GLIBCXX_EH_PTR_COMPAT\n-    bool \n-    operator==(const exception_ptr&, const exception_ptr&)\n-      _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));\n-\n-    bool \n-    operator!=(const exception_ptr&, const exception_ptr&)\n-      _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));\n-#endif\n-\n     /// @relates exception_ptr\n     inline void\n     swap(exception_ptr& __lhs, exception_ptr& __rhs)\n@@ -276,6 +270,8 @@ namespace std\n #endif\n     }\n \n+#undef _GLIBCXX_EH_PTR_USED\n+\n   // @} group exceptions\n } // namespace std\n "}]}