{"sha": "5830574a1674fe8a174ad4f1d21b152215b6e5ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgzMDU3NGExNjc0ZmU4YTE3NGFkNGYxZDIxYjE1MjIxNWI2ZTVhYg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-03-04T22:27:35Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-03-04T22:27:35Z"}, "message": "Makefile.in (JAVA_OBJS): Added boehm.o.\n\n\t* Makefile.in (JAVA_OBJS): Added boehm.o.\n\t(boehm.o): New target.\n\t* Make-lang.in (JAVA_SRCS): Added boehm.c.\n\t* java-tree.h (flag_use_boehm_gc): Declare.\n\t(get_boehm_type_descriptor): Declare.\n\t* lang.c (lang_f_options): Added `use-boehm-gc'.\n\t(flag_use_boehm_gc): New global.\n\t* lang-options.h: Added -fuse-boehm-gc.\n\t* boehm.c: New file.\n\t* class.c (get_dispatch_table): If class uses a Boehm type\n\tdescriptor, put it in the vtable.\n\t(make_class_data): Removed dead code.\n\nFrom-SVN: r32331", "tree": {"sha": "d44828096a384e2296cf383320872e7308002f92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d44828096a384e2296cf383320872e7308002f92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5830574a1674fe8a174ad4f1d21b152215b6e5ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5830574a1674fe8a174ad4f1d21b152215b6e5ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5830574a1674fe8a174ad4f1d21b152215b6e5ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5830574a1674fe8a174ad4f1d21b152215b6e5ab/comments", "author": null, "committer": null, "parents": [{"sha": "0f9c645ea579c48499360de5b2bd4c8cd281c767", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f9c645ea579c48499360de5b2bd4c8cd281c767", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f9c645ea579c48499360de5b2bd4c8cd281c767"}], "stats": {"total": 194, "additions": 186, "deletions": 8}, "files": [{"sha": "d5cbb83b8a2260bf5d40ea1867a5cd9fd531fb67", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5830574a1674fe8a174ad4f1d21b152215b6e5ab/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5830574a1674fe8a174ad4f1d21b152215b6e5ab/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=5830574a1674fe8a174ad4f1d21b152215b6e5ab", "patch": "@@ -1,3 +1,18 @@\n+2000-02-17  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* Makefile.in (JAVA_OBJS): Added boehm.o.\n+\t(boehm.o): New target.\n+\t* Make-lang.in (JAVA_SRCS): Added boehm.c.\n+\t* java-tree.h (flag_use_boehm_gc): Declare.\n+\t(get_boehm_type_descriptor): Declare.\n+\t* lang.c (lang_f_options): Added `use-boehm-gc'.\n+\t(flag_use_boehm_gc): New global.\n+\t* lang-options.h: Added -fuse-boehm-gc.\n+\t* boehm.c: New file.\n+\t* class.c (get_dispatch_table): If class uses a Boehm type\n+\tdescriptor, put it in the vtable.\n+\t(make_class_data): Removed dead code.\n+\n 2000-03-03  Per Bothner  <per@bothner.com>\n \n \t* decl.c (init_decl_processing):  Initialize sizetype properly."}, {"sha": "e5c573cd28f129b351e2e7ab177c1ee5272466d9", "filename": "gcc/java/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5830574a1674fe8a174ad4f1d21b152215b6e5ab/gcc%2Fjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5830574a1674fe8a174ad4f1d21b152215b6e5ab/gcc%2Fjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMakefile.in?ref=5830574a1674fe8a174ad4f1d21b152215b6e5ab", "patch": "@@ -166,7 +166,7 @@ INCLUDES = -I. -I.. -I$(srcdir) -I$(srcdir)/.. -I$(srcdir)/../config -I$(srcdir)\n #\n JAVA_OBJS = parse.o class.o decl.o expr.o constants.o lang.o typeck.o \\\n   except.o verify.o zextract.o jcf-io.o jcf-parse.o mangle.o jcf-write.o \\\n-  buffer.o check-init.o jcf-depend.o jcf-path.o xref.o\n+  buffer.o check-init.o jcf-depend.o jcf-path.o xref.o boehm.o\n \n JAVA_OBJS_LITE = parse-scan.o jv-scan.o\n \n@@ -268,6 +268,8 @@ jcf-dump.o : $(CONFIG_H) $(srcdir)/../system.h $(JAVA_TREE_H) jcf-dump.c \\\n   jcf-reader.c jcf.h javaop.h javaop.def $(srcdir)/../version.h\n gjavah.o : $(CONFIG_H) $(srcdir)/../system.h $(JAVA_TREE_H) gjavah.c \\\n   jcf-reader.c jcf.h javaop.h $(srcdir)/../version.h\n+boehm.o: boehm.c $(CONFIG_H) $(srcdir)/../system.h $(TREE_H) $(JAVA_TREE_H) \\\n+  $(PARSE_H)\n buffer.o : buffer.c $(CONFIG_H) buffer.h $(srcdir)/../gansidecl.h \\\n   $(srcdir)/../system.h $(srcdir)/../toplev.h\n check-init.o : check-init.c $(CONFIG_H) $(srcdir)/../gansidecl.h \\"}, {"sha": "370ff972e2902e896429b03dcc6bcd725178854f", "filename": "gcc/java/boehm.c", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5830574a1674fe8a174ad4f1d21b152215b6e5ab/gcc%2Fjava%2Fboehm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5830574a1674fe8a174ad4f1d21b152215b6e5ab/gcc%2Fjava%2Fboehm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fboehm.c?ref=5830574a1674fe8a174ad4f1d21b152215b6e5ab", "patch": "@@ -0,0 +1,152 @@\n+/* Functions related to the Boehm garbage collector.\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.\n+\n+Java and all Java-based marks are trademarks or registered trademarks\n+of Sun Microsystems, Inc. in the United States and other countries.\n+The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n+\n+/* Written by Tom Tromey <tromey@cygnus.com>.  */\n+\n+#include <config.h>\n+\n+#include \"system.h\"\n+#include \"tree.h\"\n+#include \"java-tree.h\"\n+#include \"parse.h\"\n+\n+/* Compute a procedure-based object descriptor.  We know that our\n+   `kind' is 0, and `env' is likewise 0, so we have a simple\n+   computation.  From the GC sources:\n+\t    (((((env) << LOG_MAX_MARK_PROCS) | (proc_index)) << DS_TAG_BITS) \\\n+\t    | DS_PROC)\n+   Here DS_PROC == 2.  */\n+#define PROCEDURE_OBJECT_DESCRIPTOR integer_two_node\n+\n+/* Treat two HOST_WIDE_INT's as a contiguous bitmap, with bit 0 being\n+   the least significant.  This function sets bit N in the bitmap.  */\n+static void\n+set_bit (unsigned HOST_WIDE_INT *low, unsigned HOST_WIDE_INT *high,\n+\t unsigned int n)\n+{\n+  HOST_WIDE_INT *which;\n+\n+  if (n >= HOST_BITS_PER_WIDE_INT)\n+    {\n+      n -= HOST_BITS_PER_WIDE_INT;\n+      which = high;\n+    }\n+  else\n+    which = low;\n+\n+  *which |= (HOST_WIDE_INT) 1 << n;\n+}\n+\n+/* Return the marking bitmap for the class TYPE.  For now this is a\n+   single word describing the type.  */\n+tree\n+get_boehm_type_descriptor (tree type)\n+{\n+  unsigned int count, log2_size, ubit;\n+  int bit;\n+  int all_bits_set = 1;\n+  int last_set_index = 0;\n+  int pointer_after_end = 0;\n+  unsigned HOST_WIDE_INT low = 0, high = 0;\n+  tree field, value;\n+\n+  /* If the GC wasn't requested, just use a null pointer.  */\n+  if (! flag_use_boehm_gc)\n+    return null_pointer_node;\n+\n+  /* If we have a type of unknown size, use a proc.  */\n+  if (int_size_in_bytes (type) == -1)\n+    return PROCEDURE_OBJECT_DESCRIPTOR;\n+\n+  bit = POINTER_SIZE;\n+  /* The size of this node has to be known.  And, we only support 32\n+     and 64 bit targets, so we need to know that the log2 is one of\n+     our values.  */\n+  log2_size = exact_log2 (bit);\n+  if (bit == -1 || (log2_size != 2 && log2_size != 3))\n+    {\n+      /* This means the GC isn't supported.  We should probably\n+\t abort or give an error.  Instead, for now, we just silently\n+\t revert.  FIXME.  */\n+      return null_pointer_node;\n+    }\n+  bit *= BITS_PER_UNIT;\n+\n+  /* Warning avoidance.  */\n+  ubit = (unsigned int) bit;\n+\n+  field = TYPE_FIELDS (type);\n+  if (DECL_NAME (field) == NULL_TREE)\n+    field = TREE_CHAIN (field);  /* Skip dummy field for inherited data. */\n+  for (count = 0; field != NULL_TREE; field = TREE_CHAIN (field))\n+    {\n+      if (FIELD_STATIC (field))\n+\tcontinue;\n+\n+      if (JREFERENCE_TYPE_P (TREE_TYPE (field)))\n+\t{\n+\t  last_set_index = count;\n+\t  /* First word in object corresponds to most significant byte\n+\t     of bitmap.  */\n+\t  set_bit (&low, &high, ubit - count);\n+\t  if (count > ubit - 2)\n+\t    pointer_after_end = 1;\n+\t}\n+      else\n+\tall_bits_set = 0;\n+\n+      ++count;\n+    }\n+\n+  /* If the object is all pointers, or if the part with pointers fits\n+     in our bitmap, then we are ok.  Otherwise we have to allocate it\n+     a different way.  */\n+  if (all_bits_set)\n+    {\n+      /* In the GC the computation looks something like this:\n+\t value = DS_LENGTH | WORDS_TO_BYTES (last_set_index + 1);\n+\t DS_LENGTH is 0.\n+\t WORDS_TO_BYTES shifts by log2(bytes-per-pointer).  */\n+      count = 0;\n+      ++last_set_index;\n+      while (last_set_index)\n+\t{\n+\t  if ((last_set_index & 1))\n+\t    set_bit (&low, &high, log2_size + count);\n+\t  last_set_index >>= 1;\n+\t  ++count;\n+\t}\n+      value = build_int_2 (low, high);\n+    }\n+  else if (! pointer_after_end)\n+    {\n+      /* Bottom two bits for bitmap mark type are 01.  */\n+      set_bit (&low, &high, 0);\n+      value = build_int_2 (low, high);\n+    }\n+  else\n+    value = PROCEDURE_OBJECT_DESCRIPTOR;\n+\n+  return value;\n+}"}, {"sha": "f5cfd880e73f7e8f800f4418204cb8f8cd5b625d", "filename": "gcc/java/class.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5830574a1674fe8a174ad4f1d21b152215b6e5ab/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5830574a1674fe8a174ad4f1d21b152215b6e5ab/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=5830574a1674fe8a174ad4f1d21b152215b6e5ab", "patch": "@@ -1172,8 +1172,11 @@ get_dispatch_table (type, this_class_addr)\n \t\t\tbuild1 (ADDR_EXPR, nativecode_ptr_type_node, method),\n \t\t\tlist);\n     }\n-  /* Dummy entry for compatibility with G++ -fvtable-thunks. */\n-  list = tree_cons (integer_zero_node, null_pointer_node, list);\n+  /* Dummy entry for compatibility with G++ -fvtable-thunks.  When\n+     using the Boehm GC we sometimes stash a GC type descriptor\n+     there.  */\n+  list = tree_cons (integer_zero_node, get_boehm_type_descriptor (type),\n+\t\t    list);\n   list = tree_cons (integer_zero_node, this_class_addr, list);\n   return build (CONSTRUCTOR, build_prim_array_type (nativecode_ptr_type_node,\n \t\t\t\t\t\t    nvirtuals + 2),\n@@ -1343,12 +1346,8 @@ make_class_data (type)\n   constant_pool_constructor = build_constants_constructor ();\n \n   START_RECORD_CONSTRUCTOR (temp, object_type_node);\n-#if 0\n-  PUSH_FIELD_VALUE (temp, \"vtable\", NULL_TREE);\n-#else\n   PUSH_FIELD_VALUE (temp, \"vtable\",\n \t\t    build1 (ADDR_EXPR, dtable_ptr_type, class_dtable_decl));\n-#endif\n   PUSH_FIELD_VALUE (temp, \"sync_info\", null_pointer_node);\n   FINISH_RECORD_CONSTRUCTOR (temp);\n   START_RECORD_CONSTRUCTOR (cons, class_type_node);"}, {"sha": "146893a4b3f1975773d3b90467709c4cadecf9a0", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5830574a1674fe8a174ad4f1d21b152215b6e5ab/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5830574a1674fe8a174ad4f1d21b152215b6e5ab/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=5830574a1674fe8a174ad4f1d21b152215b6e5ab", "patch": "@@ -141,6 +141,9 @@ extern int flag_static_local_jdk1_1;\n /* When non zero, call a library routine to do integer divisions. */\n extern int flag_use_divide_subroutine;\n \n+/* When non zero, generate code for the Boehm GC.  */\n+extern int flag_use_boehm_gc;\n+\n /* The Java .class file that provides main_class;  the main input file. */\n extern struct JCF *current_jcf;\n \n@@ -663,6 +666,8 @@ extern char* open_class PARAMS ((char *, struct JCF *, int, const char *));\n #endif\n void java_debug_context PARAMS ((void));\n \n+extern tree get_boehm_type_descriptor PARAMS ((tree));\n+\n /* We use ARGS_SIZE_RTX to indicate that gcc/expr.h has been included\n    to declare `enum expand_modifier'. */\n #if defined (TREE_CODE) && defined(RTX_CODE) && defined (HAVE_MACHINE_MODES) && defined (ARGS_SIZE_RTX)"}, {"sha": "43bf70e74edd45f32f289ff1dfa9ddf556a0ffb4", "filename": "gcc/java/lang-options.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5830574a1674fe8a174ad4f1d21b152215b6e5ab/gcc%2Fjava%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5830574a1674fe8a174ad4f1d21b152215b6e5ab/gcc%2Fjava%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang-options.h?ref=5830574a1674fe8a174ad4f1d21b152215b6e5ab", "patch": "@@ -1,5 +1,5 @@\n /* Switch definitions for the GNU compiler for the Java(TM) language.\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -33,6 +33,7 @@ DEFINE_LANG_NAME (\"Java\")\n   { \"-fno-assume-compiled\", \"\" },\n   { \"-femit-class-file\", \"\" },\n   { \"-femit-class-files\", \"Dump class files to <name>.class\" },\n+  { \"-fuse-boehm-gc\", \"Generate code for Boehm GC\" },\n #if ! USE_CPPLIB\n   { \"-MD\", \"Print dependencies to FILE.d\" },\n   { \"-MMD\", \"Print dependencies to FILE.d\" },"}, {"sha": "8992c57a55efc6d27d7169ba26c267390b780bcf", "filename": "gcc/java/lang.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5830574a1674fe8a174ad4f1d21b152215b6e5ab/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5830574a1674fe8a174ad4f1d21b152215b6e5ab/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=5830574a1674fe8a174ad4f1d21b152215b6e5ab", "patch": "@@ -110,6 +110,9 @@ int flag_static_local_jdk1_1 = 0;\n /* When non zero, call a library routine to do integer divisions. */\n int flag_use_divide_subroutine = 1;\n \n+/* When non zero, generate code for the Boehm GC.  */\n+int flag_use_boehm_gc = 0;\n+\n /* From gcc/flags.h, and indicates if exceptions are turned on or not.  */\n \n extern int flag_new_exceptions;\n@@ -127,6 +130,7 @@ lang_f_options[] =\n   {\"emit-class-file\", &flag_emit_class_files, 1},\n   {\"emit-class-files\", &flag_emit_class_files, 1},\n   {\"use-divide-subroutine\", &flag_use_divide_subroutine, 1},\n+  {\"use-boehm-gc\", &flag_use_boehm_gc, 1}\n };\n \n JCF *current_jcf;"}]}