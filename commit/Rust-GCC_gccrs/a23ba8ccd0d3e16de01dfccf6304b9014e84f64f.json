{"sha": "a23ba8ccd0d3e16de01dfccf6304b9014e84f64f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIzYmE4Y2NkMGQzZTE2ZGUwMWRmY2NmNjMwNGI5MDE0ZTg0ZjY0Zg==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2017-06-21T11:20:41Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2017-06-21T11:20:41Z"}, "message": "[i386] __builtin_ia32_stmxcsr could be pure\n\n2017-06-21  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* config/i386/i386.c (struct builtin_isa): New field pure_p.\n\tReorder for compactness.\n\t(def_builtin, def_builtin2, ix86_add_new_builtins): Handle pure_p.\n\t(def_builtin_pure, def_builtin_pure2): New functions.\n\t(ix86_init_mmx_sse_builtins) [__builtin_ia32_stmxcsr]: Mark as pure.\n\ngcc/testsuite/\n\t* gcc.target/i386/getround.c: New file.\n\nFrom-SVN: r249448", "tree": {"sha": "bd066312842faa4280dc0a00b01e4fc5e0c2cdcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd066312842faa4280dc0a00b01e4fc5e0c2cdcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a23ba8ccd0d3e16de01dfccf6304b9014e84f64f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a23ba8ccd0d3e16de01dfccf6304b9014e84f64f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a23ba8ccd0d3e16de01dfccf6304b9014e84f64f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a23ba8ccd0d3e16de01dfccf6304b9014e84f64f/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed73f46f30cabeea4de64e7cce0682a7a610ffb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed73f46f30cabeea4de64e7cce0682a7a610ffb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed73f46f30cabeea4de64e7cce0682a7a610ffb6"}], "stats": {"total": 71, "additions": 66, "deletions": 5}, "files": [{"sha": "62f91e587a836e71b5a922814f804f80742e014e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23ba8ccd0d3e16de01dfccf6304b9014e84f64f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23ba8ccd0d3e16de01dfccf6304b9014e84f64f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a23ba8ccd0d3e16de01dfccf6304b9014e84f64f", "patch": "@@ -1,3 +1,11 @@\n+2017-06-21  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* config/i386/i386.c (struct builtin_isa): New field pure_p.\n+\tReorder for compactness.\n+\t(def_builtin, def_builtin2, ix86_add_new_builtins): Handle pure_p.\n+\t(def_builtin_pure, def_builtin_pure2): New functions.\n+\t(ix86_init_mmx_sse_builtins) [__builtin_ia32_stmxcsr]: Mark as pure.\n+\n 2017-06-21  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* match.pd (nop_convert): New predicate."}, {"sha": "3caeeb0e37716931bddad32092634fb55073475c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23ba8ccd0d3e16de01dfccf6304b9014e84f64f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23ba8ccd0d3e16de01dfccf6304b9014e84f64f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a23ba8ccd0d3e16de01dfccf6304b9014e84f64f", "patch": "@@ -31935,11 +31935,12 @@ static GTY(()) tree ix86_builtins[(int) IX86_BUILTIN_MAX];\n    but are waiting to be built until a function is declared to use that\n    ISA.  */\n struct builtin_isa {\n-  const char *name;\t\t/* function name */\n-  enum ix86_builtin_func_type tcode; /* type to use in the declaration */\n   HOST_WIDE_INT isa;\t\t/* isa_flags this builtin is defined for */\n   HOST_WIDE_INT isa2;\t\t/* additional isa_flags this builtin is defined for */\n-  bool const_p;\t\t\t/* true if the declaration is constant */\n+  const char *name;\t\t/* function name */\n+  enum ix86_builtin_func_type tcode; /* type to use in the declaration */\n+  unsigned char const_p:1;\t/* true if the declaration is constant */\n+  unsigned char pure_p:1;\t/* true if the declaration has pure attribute */\n   bool leaf_p;\t\t\t/* true if the declaration has leaf attribute */\n   bool nothrow_p;\t\t/* true if the declaration has nothrow attribute */\n   bool set_and_not_built_p;\n@@ -32010,6 +32011,7 @@ def_builtin (HOST_WIDE_INT mask, const char *name,\n \t  ix86_builtins_isa[(int) code].leaf_p = false;\n \t  ix86_builtins_isa[(int) code].nothrow_p = false;\n \t  ix86_builtins_isa[(int) code].const_p = false;\n+\t  ix86_builtins_isa[(int) code].pure_p = false;\n \t  ix86_builtins_isa[(int) code].set_and_not_built_p = true;\n \t}\n     }\n@@ -32032,6 +32034,21 @@ def_builtin_const (HOST_WIDE_INT mask, const char *name,\n   return decl;\n }\n \n+/* Like def_builtin, but also marks the function decl \"pure\".  */\n+\n+static inline tree\n+def_builtin_pure (HOST_WIDE_INT mask, const char *name,\n+\t\t  enum ix86_builtin_func_type tcode, enum ix86_builtins code)\n+{\n+  tree decl = def_builtin (mask, name, tcode, code);\n+  if (decl)\n+    DECL_PURE_P (decl) = 1;\n+  else\n+    ix86_builtins_isa[(int) code].pure_p = true;\n+\n+  return decl;\n+}\n+\n /* Like def_builtin, but for additional isa2 flags.  */\n \n static inline tree\n@@ -32066,6 +32083,7 @@ def_builtin2 (HOST_WIDE_INT mask, const char *name,\n       ix86_builtins_isa[(int) code].leaf_p = false;\n       ix86_builtins_isa[(int) code].nothrow_p = false;\n       ix86_builtins_isa[(int) code].const_p = false;\n+      ix86_builtins_isa[(int) code].pure_p = false;\n       ix86_builtins_isa[(int) code].set_and_not_built_p = true;\n     }\n \n@@ -32087,6 +32105,21 @@ def_builtin_const2 (HOST_WIDE_INT mask, const char *name,\n   return decl;\n }\n \n+/* Like def_builtin, but also marks the function decl \"pure\".  */\n+\n+static inline tree\n+def_builtin_pure2 (HOST_WIDE_INT mask, const char *name,\n+\t\t   enum ix86_builtin_func_type tcode, enum ix86_builtins code)\n+{\n+  tree decl = def_builtin2 (mask, name, tcode, code);\n+  if (decl)\n+    DECL_PURE_P (decl) = 1;\n+  else\n+    ix86_builtins_isa[(int) code].pure_p = true;\n+\n+  return decl;\n+}\n+\n /* Add any new builtin functions for a given ISA that may not have been\n    declared.  This saves a bit of space compared to adding all of the\n    declarations to the tree, even if we didn't use them.  */\n@@ -32125,6 +32158,8 @@ ix86_add_new_builtins (HOST_WIDE_INT isa, HOST_WIDE_INT isa2)\n \t  ix86_builtins[i] = decl;\n \t  if (ix86_builtins_isa[i].const_p)\n \t    TREE_READONLY (decl) = 1;\n+\t  if (ix86_builtins_isa[i].pure_p)\n+\t    DECL_PURE_P (decl) = 1;\n \t  if (ix86_builtins_isa[i].leaf_p)\n \t    DECL_ATTRIBUTES (decl) = build_tree_list (get_identifier (\"leaf\"),\n \t\t\t\t\t\t      NULL_TREE);\n@@ -32478,8 +32513,8 @@ ix86_init_mmx_sse_builtins (void)\n   /* SSE */\n   def_builtin (OPTION_MASK_ISA_SSE, \"__builtin_ia32_ldmxcsr\",\n \t       VOID_FTYPE_UNSIGNED, IX86_BUILTIN_LDMXCSR);\n-  def_builtin (OPTION_MASK_ISA_SSE, \"__builtin_ia32_stmxcsr\",\n-\t       UNSIGNED_FTYPE_VOID, IX86_BUILTIN_STMXCSR);\n+  def_builtin_pure (OPTION_MASK_ISA_SSE, \"__builtin_ia32_stmxcsr\",\n+\t\t    UNSIGNED_FTYPE_VOID, IX86_BUILTIN_STMXCSR);\n \n   /* SSE or 3DNow!A */\n   def_builtin (OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A,"}, {"sha": "c9650f6d6f2a39688181b6bf3447da6127fd0b34", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23ba8ccd0d3e16de01dfccf6304b9014e84f64f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23ba8ccd0d3e16de01dfccf6304b9014e84f64f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a23ba8ccd0d3e16de01dfccf6304b9014e84f64f", "patch": "@@ -1,3 +1,7 @@\n+2017-06-21  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.target/i386/getround.c: New file.\n+\n 2017-06-21  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* gcc.dg/tree-ssa/addadd.c: Un-XFAIL."}, {"sha": "e9d43b074aa51dbc91b44d0a583156307a92372a", "filename": "gcc/testsuite/gcc.target/i386/getround.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a23ba8ccd0d3e16de01dfccf6304b9014e84f64f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgetround.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a23ba8ccd0d3e16de01dfccf6304b9014e84f64f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgetround.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fgetround.c?ref=a23ba8ccd0d3e16de01dfccf6304b9014e84f64f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -msse\" } */\n+\n+#include <xmmintrin.h>\n+\n+unsigned save;\n+\n+void f(unsigned mode){\n+  unsigned tmp = _MM_GET_ROUNDING_MODE();\n+  _MM_SET_ROUNDING_MODE(mode);\n+  save = tmp;\n+}\n+\n+/* { dg-final { scan-assembler-times \"stmxcsr\" 1 } } */"}]}