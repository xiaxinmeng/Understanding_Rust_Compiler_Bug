{"sha": "b76354a5429ae957a4dae83f2273bd4204323138", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc2MzU0YTU0MjlhZTk1N2E0ZGFlODNmMjI3M2JkNDIwNDMyMzEzOA==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "1999-02-04T15:51:19Z"}, "committer": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "1999-02-04T15:51:19Z"}, "message": "Recognize _SOLTHREADS and define internal macros appropriately.\n\nFrom-SVN: r25027", "tree": {"sha": "f6b8b08fe917724d619becc290eb817ca6a292c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6b8b08fe917724d619becc290eb817ca6a292c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b76354a5429ae957a4dae83f2273bd4204323138", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b76354a5429ae957a4dae83f2273bd4204323138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b76354a5429ae957a4dae83f2273bd4204323138", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b76354a5429ae957a4dae83f2273bd4204323138/comments", "author": null, "committer": null, "parents": [{"sha": "6dd49eb4d3f326c487b04cc5cc15672f4576c689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dd49eb4d3f326c487b04cc5cc15672f4576c689", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dd49eb4d3f326c487b04cc5cc15672f4576c689"}], "stats": {"total": 51, "additions": 27, "deletions": 24}, "files": [{"sha": "1f84fbf6776dcdc50f1fb3e24f23cef0f2fea49b", "filename": "libstdc++/stl/stl_config.h", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b76354a5429ae957a4dae83f2273bd4204323138/libstdc%2B%2B%2Fstl%2Fstl_config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b76354a5429ae957a4dae83f2273bd4204323138/libstdc%2B%2B%2Fstl%2Fstl_config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstl%2Fstl_config.h?ref=b76354a5429ae957a4dae83f2273bd4204323138", "patch": "@@ -31,24 +31,24 @@\n // * __STL_NO_BOOL: defined if the compiler doesn't have bool as a builtin\n //   type.\n // * __STL_HAS_WCHAR_T: defined if the compier has wchar_t as a builtin type.\n-// * __STL_NO_DRAND48: defined if the compiler doesn't have the drand48 \n+// * __STL_NO_DRAND48: defined if the compiler doesn't have the drand48\n //   function.\n // * __STL_STATIC_TEMPLATE_MEMBER_BUG: defined if the compiler can't handle\n //   static members of template classes.\n // * __STL_CLASS_PARTIAL_SPECIALIZATION: defined if the compiler supports\n //   partial specialization of template classes.\n-// * __STL_PARTIAL_SPECIALIZATION_SYNTAX: defined if the compiler \n+// * __STL_PARTIAL_SPECIALIZATION_SYNTAX: defined if the compiler\n //   supports partial specialization syntax for full specialization of\n-//   class templates.  (Even if it doesn't actually support partial \n+//   class templates.  (Even if it doesn't actually support partial\n //   specialization itself.)\n // * __STL_FUNCTION_TMPL_PARTIAL_ORDER: defined if the compiler supports\n //   partial ordering of function templates.  (a.k.a partial specialization\n //   of function templates.)\n // * __STL_MEMBER_TEMPLATES: defined if the compiler supports template\n //   member functions of classes.\n-// * __STL_MEMBER_TEMPLATE_CLASSES: defined if the compiler supports \n+// * __STL_MEMBER_TEMPLATE_CLASSES: defined if the compiler supports\n //   nested classes that are member templates of other classes.\n-// * __STL_EXPLICIT_FUNCTION_TMPL_ARGS: defined if the compiler \n+// * __STL_EXPLICIT_FUNCTION_TMPL_ARGS: defined if the compiler\n //   supports calling a function template by providing its template\n //   arguments explicitly.\n // * __STL_LIMITED_DEFAULT_TEMPLATES: defined if the compiler is unable\n@@ -65,12 +65,12 @@\n // * __STL_NO_EXCEPTION_HEADER: defined if the compiler does not have a\n //   standard-conforming header <exception>.\n // * __STL_SGI_THREADS: defined if this is being compiled for an SGI IRIX\n-//   system in multithreaded mode, using native SGI threads instead of \n+//   system in multithreaded mode, using native SGI threads instead of\n //   pthreads.\n // * __STL_WIN32THREADS: defined if this is being compiled on a WIN32\n //   compiler in multithreaded mode.\n // * __STL_LONG_LONG if the compiler has long long and unsigned long long\n-//   types.  (They're not in the C++ standard, but they are expected to be \n+//   types.  (They're not in the C++ standard, but they are expected to be\n //   included in the forthcoming C9X standard.)\n \n \n@@ -84,7 +84,7 @@\n // * __STL_ASSERTIONS: if defined, then enable runtime checking through the\n //   __stl_assert macro.\n // * _PTHREADS: if defined, use Posix threads for multithreading support.\n-// * _NOTHREADS: if defined, don't use any multithreading support.  \n+// * _NOTHREADS: if defined, don't use any multithreading support.\n \n \n // Other macros defined by this file:\n@@ -100,13 +100,16 @@\n #ifdef _PTHREADS\n #   define __STL_PTHREADS\n #endif\n+#ifdef _SOLTHREADS\n+#   define __STL_SOLTHREADS\n+#endif\n \n # if defined(__sgi) && !defined(__GNUC__)\n #   if !defined(_BOOL)\n #     define __STL_NO_BOOL\n #   endif\n #   if defined(_WCHAR_T_IS_KEYWORD)\n-#     define __STL_HAS_WCHAR_T \n+#     define __STL_HAS_WCHAR_T\n #   endif\n #   if !defined(_TYPENAME_IS_KEYWORD)\n #     define __STL_NEED_TYPENAME\n@@ -132,7 +135,7 @@\n #   endif\n #   if (_COMPILER_VERSION >= 721) && defined(_NAMESPACES)\n #     define __STL_HAS_NAMESPACES\n-#   endif \n+#   endif\n #   if (_COMPILER_VERSION < 721)\n #     define __STL_NO_EXCEPTION_HEADER\n #   endif\n@@ -179,7 +182,7 @@\n #   endif\n # endif\n \n-# if defined(__SUNPRO_CC) \n+# if defined(__SUNPRO_CC)\n #   define __STL_NO_BOOL\n #   define __STL_NEED_TYPENAME\n #   define __STL_NEED_EXPLICIT\n@@ -268,7 +271,7 @@\n # endif\n \n // Use standard-conforming allocators if we have the necessary language\n-// features.  __STL_USE_SGI_ALLOCATORS is a hook so that users can \n+// features.  __STL_USE_SGI_ALLOCATORS is a hook so that users can\n // disable new-style allocators, and continue to use the same kind of\n // allocators as before, without having to edit library headers.\n # if defined(__STL_CLASS_PARTIAL_SPECIALIZATION) && \\\n@@ -277,7 +280,7 @@\n     !defined(__STL_NO_BOOL) && \\\n     !defined(__STL_NON_TYPE_TMPL_PARAM_BUG) && \\\n     !defined(__STL_LIMITED_DEFAULT_TEMPLATES) && \\\n-    !defined(__STL_USE_SGI_ALLOCATORS) \n+    !defined(__STL_USE_SGI_ALLOCATORS)\n #   define __STL_USE_STD_ALLOCATORS\n # endif\n \n@@ -301,13 +304,13 @@\n #   define __STD_RELOPS std\n #   define __STL_USE_NAMESPACES\n # else\n-#   define __STD \n-#   define __STL_BEGIN_NAMESPACE \n-#   define __STL_END_NAMESPACE \n+#   define __STD\n+#   define __STL_BEGIN_NAMESPACE\n+#   define __STL_END_NAMESPACE\n #   undef  __STL_USE_NAMESPACE_FOR_RELOPS\n-#   define __STL_BEGIN_RELOPS_NAMESPACE \n-#   define __STL_END_RELOPS_NAMESPACE \n-#   define __STD_RELOPS \n+#   define __STL_BEGIN_RELOPS_NAMESPACE\n+#   define __STL_END_RELOPS_NAMESPACE\n+#   define __STD_RELOPS\n #   undef  __STL_USE_NAMESPACES\n # endif\n \n@@ -319,12 +322,12 @@\n #   define __STL_NOTHROW throw()\n #   define __STL_UNWIND(action) catch(...) { action; throw; }\n # else\n-#   define __STL_TRY \n+#   define __STL_TRY\n #   define __STL_CATCH_ALL if (false)\n-#   define __STL_THROW(x) \n-#   define __STL_RETHROW \n-#   define __STL_NOTHROW \n-#   define __STL_UNWIND(action) \n+#   define __STL_THROW(x)\n+#   define __STL_RETHROW\n+#   define __STL_NOTHROW\n+#   define __STL_UNWIND(action)\n # endif\n \n #ifdef __STL_ASSERTIONS"}]}