{"sha": "ead4af4fb64a9255fa5d056b63f1c522099e170e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFkNGFmNGZiNjRhOTI1NWZhNWQwNTZiNjNmMWM1MjIwOTllMTcwZQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-11-05T01:06:18Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-11-05T01:06:18Z"}, "message": "sh.h (TARGET_CACHE32, [...]): Delete macro.\n\n\t* config/sh/sh.h (TARGET_CACHE32, TARGET_HARVARD): Delete macro.\n\t(TARGET_SUPERSCALAR): Add TARGET_SH2A.\n\t(CACHE_LOG): Use TARGET_HARD_SH4 and TARGET_SH5 instead of\n\tTARGET_CACHE32.\n\t(TRAMPOLINE_ALIGNMENT): Use TARGET_HARD_SH4 and TARGET_SH5 instead of\n\tTARGET_HARVARD.\n\t* config/sh/sh.c (sh_trampoline_init): Likewise.\n\nFrom-SVN: r193151", "tree": {"sha": "1a999235cd59c75a07adbe3c5bc9b905caa3158c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a999235cd59c75a07adbe3c5bc9b905caa3158c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ead4af4fb64a9255fa5d056b63f1c522099e170e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ead4af4fb64a9255fa5d056b63f1c522099e170e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ead4af4fb64a9255fa5d056b63f1c522099e170e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ead4af4fb64a9255fa5d056b63f1c522099e170e/comments", "author": null, "committer": null, "parents": [{"sha": "e091ffb72fca7edf47738c3fcf5708fed7d0ad4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e091ffb72fca7edf47738c3fcf5708fed7d0ad4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e091ffb72fca7edf47738c3fcf5708fed7d0ad4e"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "94c9acc25ebca0043e57312af53ac354dc5c9d75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead4af4fb64a9255fa5d056b63f1c522099e170e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead4af4fb64a9255fa5d056b63f1c522099e170e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ead4af4fb64a9255fa5d056b63f1c522099e170e", "patch": "@@ -1,3 +1,13 @@\n+2012-11-05  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/sh.h (TARGET_CACHE32, TARGET_HARVARD): Delete macro.\n+\t(TARGET_SUPERSCALAR): Add TARGET_SH2A.\n+\t(CACHE_LOG): Use TARGET_HARD_SH4 and TARGET_SH5 instead of\n+\tTARGET_CACHE32.\n+\t(TRAMPOLINE_ALIGNMENT): Use TARGET_HARD_SH4 and TARGET_SH5 instead of\n+\tTARGET_HARVARD.\n+\t* config/sh/sh.c (sh_trampoline_init): Likewise.\n+\n 2012-11-05  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* system.h (loc_t): Poison."}, {"sha": "1826a854c6e093f33e9e7e8f4b3656994c8411ba", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead4af4fb64a9255fa5d056b63f1c522099e170e/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead4af4fb64a9255fa5d056b63f1c522099e170e/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=ead4af4fb64a9255fa5d056b63f1c522099e170e", "patch": "@@ -11545,7 +11545,7 @@ sh_trampoline_init (rtx tramp_mem, tree fndecl, rtx cxt)\n \t\t\t\tSImode));\n   emit_move_insn (adjust_address (tramp_mem, SImode, 8), cxt);\n   emit_move_insn (adjust_address (tramp_mem, SImode, 12), fnaddr);\n-  if (TARGET_HARVARD)\n+  if (TARGET_HARD_SH4 || TARGET_SH5)\n     {\n       if (!TARGET_INLINE_IC_INVALIDATE\n \t  || (!(TARGET_SH4A_ARCH || TARGET_SH4_300) && TARGET_USERMODE))"}, {"sha": "fdd06a067c08260d06804cb6821151a996bdb748", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead4af4fb64a9255fa5d056b63f1c522099e170e/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead4af4fb64a9255fa5d056b63f1c522099e170e/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=ead4af4fb64a9255fa5d056b63f1c522099e170e", "patch": "@@ -58,14 +58,8 @@ extern int code_for_indirect_jump_scratch;\n /* Nonzero if we should generate code using type 3E insns.  */\n #define TARGET_SH3E (TARGET_SH3 && TARGET_SH_E)\n \n-/* Nonzero if the cache line size is 32.  */\n-#define TARGET_CACHE32 (TARGET_HARD_SH4 || TARGET_SH5)\n-\n /* Nonzero if we schedule for a superscalar implementation.  */\n-#define TARGET_SUPERSCALAR TARGET_HARD_SH4\n-\n-/* Nonzero if the target has separate instruction and data caches.  */\n-#define TARGET_HARVARD (TARGET_HARD_SH4 || TARGET_SH5)\n+#define TARGET_SUPERSCALAR (TARGET_HARD_SH4 || TARGET_SH2A)\n \n /* Nonzero if a double-precision FPU is available.  */\n #define TARGET_FPU_DOUBLE \\\n@@ -461,7 +455,7 @@ extern enum sh_divide_strategy_e sh_div_strategy;\n /* The log (base 2) of the cache line size, in bytes.  Processors prior to\n    SH2 have no actual cache, but they fetch code in chunks of 4 bytes.\n    The SH2/3 have 16 byte cache lines, and the SH4 has a 32 byte cache line */\n-#define CACHE_LOG (TARGET_CACHE32 ? 5 : TARGET_SH2 ? 4 : 2)\n+#define CACHE_LOG ((TARGET_HARD_SH4 || TARGET_SH5) ? 5 : TARGET_SH2 ? 4 : 2)\n \n /* ABI given & required minimum allocation boundary (in *bits*) for the\n    code of a function.  */\n@@ -1575,9 +1569,10 @@ struct sh_args {\n /* Length in units of the trampoline for entering a nested function.  */\n #define TRAMPOLINE_SIZE  (TARGET_SHMEDIA64 ? 40 : TARGET_SH5 ? 24 : 16)\n \n-/* Alignment required for a trampoline in bits .  */\n+/* Alignment required for a trampoline in bits.  */\n #define TRAMPOLINE_ALIGNMENT \\\n-  ((CACHE_LOG < 3 || (optimize_size && ! TARGET_HARVARD)) ? 32 \\\n+  ((CACHE_LOG < 3 \\\n+    || (optimize_size && ! (TARGET_HARD_SH4 || TARGET_SH5))) ? 32 \\\n    : TARGET_SHMEDIA ? 256 : 64)\n \n /* A C expression whose value is RTL representing the value of the return"}]}