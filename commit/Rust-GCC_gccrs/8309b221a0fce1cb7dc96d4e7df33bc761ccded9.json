{"sha": "8309b221a0fce1cb7dc96d4e7df33bc761ccded9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMwOWIyMjFhMGZjZTFjYjdkYzk2ZDRlN2RmMzNiYzc2MWNjZGVkOQ==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2018-05-06T11:19:31Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2018-05-06T11:19:31Z"}, "message": "re PR fortran/85507 (ICE in gfc_dep_resolver, at fortran/dependency.c:2258)\n\ngcc/fortran/ChangeLog:\n\n2018-05-06  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/85507\n\t* dependency.c (gfc_dep_resolver): Revert looking at coarray dimension\n\tintroduced by r259385.\n\t* trans-intrinsic.c (conv_caf_send): Always report a dependency for\n\tsame variables in coarray assignments.\n\ngcc/testsuite/ChangeLog:\n\n2018-05-06  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/85507\n\t* gfortran.dg/coarray_dependency_1.f90: New test.\n\t* gfortran.dg/coarray_lib_comm_1.f90: Fix counting caf-expressions.\n\nFrom-SVN: r259974", "tree": {"sha": "873d3ba04d94f3b635230ef77e9c9eca6223c7cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/873d3ba04d94f3b635230ef77e9c9eca6223c7cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8309b221a0fce1cb7dc96d4e7df33bc761ccded9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8309b221a0fce1cb7dc96d4e7df33bc761ccded9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8309b221a0fce1cb7dc96d4e7df33bc761ccded9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8309b221a0fce1cb7dc96d4e7df33bc761ccded9/comments", "author": null, "committer": null, "parents": [{"sha": "17b906c3b92907a387a61a35310b39675f9f5e00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17b906c3b92907a387a61a35310b39675f9f5e00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17b906c3b92907a387a61a35310b39675f9f5e00"}], "stats": {"total": 37, "additions": 30, "deletions": 7}, "files": [{"sha": "b94feb987fa168c87c5b391c4dd6692db0a21210", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8309b221a0fce1cb7dc96d4e7df33bc761ccded9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8309b221a0fce1cb7dc96d4e7df33bc761ccded9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8309b221a0fce1cb7dc96d4e7df33bc761ccded9", "patch": "@@ -1,3 +1,11 @@\n+2018-05-06  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/85507\n+\t* dependency.c (gfc_dep_resolver): Revert looking at coarray dimension\n+\tintroduced by r259385.\n+\t* trans-intrinsic.c (conv_caf_send): Always report a dependency for\n+\tsame variables in coarray assignments.\n+\n 2018-05-02  Tom de Vries  <tom@codesourcery.com>\n \n \tPR libgomp/82428"}, {"sha": "a0bbd584947fb49371862f8554b8760c56af7fc1", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8309b221a0fce1cb7dc96d4e7df33bc761ccded9/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8309b221a0fce1cb7dc96d4e7df33bc761ccded9/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=8309b221a0fce1cb7dc96d4e7df33bc761ccded9", "patch": "@@ -2238,9 +2238,8 @@ gfc_dep_resolver (gfc_ref *lref, gfc_ref *rref, gfc_reverse *reverse)\n \t    break;\n \n \t  /* Exactly matching and forward overlapping ranges don't cause a\n-\t     dependency, when they are not part of a coarray ref.  */\n-\t  if (fin_dep < GFC_DEP_BACKWARD\n-\t      && lref->u.ar.codimen == 0 && rref->u.ar.codimen == 0)\n+\t     dependency.  */\n+\t  if (fin_dep < GFC_DEP_BACKWARD)\n \t    return 0;\n \n \t  /* Keep checking.  We only have a dependency if"}, {"sha": "87b3ca72c05a5498650c44c2eba590035b36ce6b", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8309b221a0fce1cb7dc96d4e7df33bc761ccded9/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8309b221a0fce1cb7dc96d4e7df33bc761ccded9/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=8309b221a0fce1cb7dc96d4e7df33bc761ccded9", "patch": "@@ -1860,7 +1860,7 @@ conv_caf_send (gfc_code *code) {\n \n   lhs_expr = code->ext.actual->expr;\n   rhs_expr = code->ext.actual->next->expr;\n-  may_require_tmp = gfc_check_dependency (lhs_expr, rhs_expr, false) == 0\n+  may_require_tmp = gfc_check_dependency (lhs_expr, rhs_expr, true) == 0\n \t\t    ? boolean_false_node : boolean_true_node;\n   gfc_init_block (&block);\n "}, {"sha": "3390087e3275d3cc956d02be8a6d6eea3dfd6bfa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8309b221a0fce1cb7dc96d4e7df33bc761ccded9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8309b221a0fce1cb7dc96d4e7df33bc761ccded9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8309b221a0fce1cb7dc96d4e7df33bc761ccded9", "patch": "@@ -1,3 +1,9 @@\n+2018-05-06  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/85507\n+\t* gfortran.dg/coarray_dependency_1.f90: New test.\n+\t* gfortran.dg/coarray_lib_comm_1.f90: Fix counting caf-expressions.\n+\n 2018-05-04  Pekka J\u00e4\u00e4skel\u00e4inen  <pekka.jaaskelainen@parmance.com>\n \n \t* testsuite/brig.dg/test/gimple/smoke_test.hsail: Fix the test"}, {"sha": "dc4cbacba1eaff81741dff0c042e72f391a00378", "filename": "gcc/testsuite/gfortran.dg/coarray_dependency_1.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8309b221a0fce1cb7dc96d4e7df33bc761ccded9/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_dependency_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8309b221a0fce1cb7dc96d4e7df33bc761ccded9/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_dependency_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_dependency_1.f90?ref=8309b221a0fce1cb7dc96d4e7df33bc761ccded9", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=lib -lcaf_single\" }\n+!\n+! Check that reffing x on both sides of a coarray send does not ICE. \n+! PR 85507\n+\n+program check_dependency\n+  integer :: x[*]\n+  x[42] = x\n+end program check_dependency\n+"}, {"sha": "171a27bd4c36e331bc222a8c987d1ca5f67ba8fa", "filename": "gcc/testsuite/gfortran.dg/coarray_lib_comm_1.f90", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8309b221a0fce1cb7dc96d4e7df33bc761ccded9/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_comm_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8309b221a0fce1cb7dc96d4e7df33bc761ccded9/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_comm_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_lib_comm_1.f90?ref=8309b221a0fce1cb7dc96d4e7df33bc761ccded9", "patch": "@@ -38,9 +38,8 @@\n if (any (A-B /= 0)) STOP 4\n end\n \n-! { dg-final { scan-tree-dump-times \"_gfortran_caf_get \\\\\\(caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) a, 1, &parm.\\[0-9\\]+, 0B, &parm.\\[0-9\\]+, 4, 4, 0, 0B\\\\\\);\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"_gfortran_caf_get \\\\\\(caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) a, 1, &parm.\\[0-9\\]+, 0B, &parm.\\[0-9\\]+, 4, 4, 1, 0B\\\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_get \\\\\\(caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) a, 1, &parm.\\[0-9\\]+, 0B, &parm.\\[0-9\\]+, 4, 4, 1, 0B\\\\\\);\" 2 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"_gfortran_caf_get \\\\\\(caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) a, 1, &parm.\\[0-9\\]+, 0B, &p, 4, 4, 1, 0B\\\\\\);\" 1 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"_gfortran_caf_get \\\\\\(caf_token.1, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) b, 1, &parm.\\[0-9\\]+, 0B, &p, 4, 4, 0, 0B\\\\\\);\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"_gfortran_caf_sendget \\\\\\(caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) a, 1, &parm.\\[0-9\\]+, 0B, caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) a, 1, &parm.\\[0-9\\]+, 0B, 4, 4, 0, 0B\\\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_sendget \\\\\\(caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) a, 1, &parm.\\[0-9\\]+, 0B, caf_token.0, \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) parm.\\[0-9\\]+.data - \\\\\\(integer\\\\\\(kind=\\[48\\]\\\\\\)\\\\\\) a, 1, &parm.\\[0-9\\]+, 0B, 4, 4, 1, 0B\\\\\\);\" 1 \"original\" } }\n "}]}