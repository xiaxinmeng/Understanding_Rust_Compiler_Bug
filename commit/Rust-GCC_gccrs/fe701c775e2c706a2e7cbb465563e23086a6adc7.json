{"sha": "fe701c775e2c706a2e7cbb465563e23086a6adc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU3MDFjNzc1ZTJjNzA2YTJlN2NiYjQ2NTU2M2UyMzA4NmE2YWRjNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-02-11T21:08:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-02-11T21:08:06Z"}, "message": "Adjust whitespace in <bits/atomic_base.h>\n\n\t* include/bits/atomic_base.h: Re-indent.\n\nFrom-SVN: r245362", "tree": {"sha": "b27dd349bcb493941a5b5c0587aa1d94c3b5ce33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b27dd349bcb493941a5b5c0587aa1d94c3b5ce33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe701c775e2c706a2e7cbb465563e23086a6adc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe701c775e2c706a2e7cbb465563e23086a6adc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe701c775e2c706a2e7cbb465563e23086a6adc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe701c775e2c706a2e7cbb465563e23086a6adc7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e22910c2008100aa8f822c45e17d3b88bb153296", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e22910c2008100aa8f822c45e17d3b88bb153296", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e22910c2008100aa8f822c45e17d3b88bb153296"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "0f6de92eeb463bbff3c3371c30e5b339dd89eaaa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe701c775e2c706a2e7cbb465563e23086a6adc7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe701c775e2c706a2e7cbb465563e23086a6adc7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fe701c775e2c706a2e7cbb465563e23086a6adc7", "patch": "@@ -1,3 +1,7 @@\n+2017-02-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/atomic_base.h: Re-indent.\n+\n 2017-02-10  Gerald Pfeifer  <gerald@pfeifer.com> \n \n \t* doc/xml/manual/profile_mode.xml: Update a paper reference. "}, {"sha": "e79ff67ea064e97aa242bf48b4cf808c23dc3a4a", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe701c775e2c706a2e7cbb465563e23086a6adc7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe701c775e2c706a2e7cbb465563e23086a6adc7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=fe701c775e2c706a2e7cbb465563e23086a6adc7", "patch": "@@ -366,7 +366,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _GLIBCXX_ALWAYS_INLINE void\n       store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept\n       {\n-        memory_order __b = __m & __memory_order_mask;\n+\tmemory_order __b = __m & __memory_order_mask;\n \t__glibcxx_assert(__b != memory_order_acquire);\n \t__glibcxx_assert(__b != memory_order_acq_rel);\n \t__glibcxx_assert(__b != memory_order_consume);\n@@ -378,7 +378,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       store(__int_type __i,\n \t    memory_order __m = memory_order_seq_cst) volatile noexcept\n       {\n-        memory_order __b = __m & __memory_order_mask;\n+\tmemory_order __b = __m & __memory_order_mask;\n \t__glibcxx_assert(__b != memory_order_acquire);\n \t__glibcxx_assert(__b != memory_order_acq_rel);\n \t__glibcxx_assert(__b != memory_order_consume);\n@@ -389,7 +389,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _GLIBCXX_ALWAYS_INLINE __int_type\n       load(memory_order __m = memory_order_seq_cst) const noexcept\n       {\n-       memory_order __b = __m & __memory_order_mask;\n+\tmemory_order __b = __m & __memory_order_mask;\n \t__glibcxx_assert(__b != memory_order_release);\n \t__glibcxx_assert(__b != memory_order_acq_rel);\n \n@@ -399,7 +399,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _GLIBCXX_ALWAYS_INLINE __int_type\n       load(memory_order __m = memory_order_seq_cst) const volatile noexcept\n       {\n-        memory_order __b = __m & __memory_order_mask;\n+\tmemory_order __b = __m & __memory_order_mask;\n \t__glibcxx_assert(__b != memory_order_release);\n \t__glibcxx_assert(__b != memory_order_acq_rel);\n \n@@ -425,8 +425,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       compare_exchange_weak(__int_type& __i1, __int_type __i2,\n \t\t\t    memory_order __m1, memory_order __m2) noexcept\n       {\n-       memory_order __b2 = __m2 & __memory_order_mask;\n-       memory_order __b1 = __m1 & __memory_order_mask;\n+\tmemory_order __b2 = __m2 & __memory_order_mask;\n+\tmemory_order __b1 = __m1 & __memory_order_mask;\n \t__glibcxx_assert(__b2 != memory_order_release);\n \t__glibcxx_assert(__b2 != memory_order_acq_rel);\n \t__glibcxx_assert(__b2 <= __b1);\n@@ -439,8 +439,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t    memory_order __m1,\n \t\t\t    memory_order __m2) volatile noexcept\n       {\n-       memory_order __b2 = __m2 & __memory_order_mask;\n-       memory_order __b1 = __m1 & __memory_order_mask;\n+\tmemory_order __b2 = __m2 & __memory_order_mask;\n+\tmemory_order __b1 = __m1 & __memory_order_mask;\n \t__glibcxx_assert(__b2 != memory_order_release);\n \t__glibcxx_assert(__b2 != memory_order_acq_rel);\n \t__glibcxx_assert(__b2 <= __b1);\n@@ -468,8 +468,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       compare_exchange_strong(__int_type& __i1, __int_type __i2,\n \t\t\t      memory_order __m1, memory_order __m2) noexcept\n       {\n-        memory_order __b2 = __m2 & __memory_order_mask;\n-        memory_order __b1 = __m1 & __memory_order_mask;\n+\tmemory_order __b2 = __m2 & __memory_order_mask;\n+\tmemory_order __b1 = __m1 & __memory_order_mask;\n \t__glibcxx_assert(__b2 != memory_order_release);\n \t__glibcxx_assert(__b2 != memory_order_acq_rel);\n \t__glibcxx_assert(__b2 <= __b1);\n@@ -482,8 +482,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t      memory_order __m1,\n \t\t\t      memory_order __m2) volatile noexcept\n       {\n-        memory_order __b2 = __m2 & __memory_order_mask;\n-        memory_order __b1 = __m1 & __memory_order_mask;\n+\tmemory_order __b2 = __m2 & __memory_order_mask;\n+\tmemory_order __b1 = __m1 & __memory_order_mask;\n \n \t__glibcxx_assert(__b2 != memory_order_release);\n \t__glibcxx_assert(__b2 != memory_order_acq_rel);\n@@ -695,7 +695,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       store(__pointer_type __p,\n \t    memory_order __m = memory_order_seq_cst) volatile noexcept\n       {\n-        memory_order __b = __m & __memory_order_mask;\n+\tmemory_order __b = __m & __memory_order_mask;\n \t__glibcxx_assert(__b != memory_order_acquire);\n \t__glibcxx_assert(__b != memory_order_acq_rel);\n \t__glibcxx_assert(__b != memory_order_consume);\n@@ -706,7 +706,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _GLIBCXX_ALWAYS_INLINE __pointer_type\n       load(memory_order __m = memory_order_seq_cst) const noexcept\n       {\n-        memory_order __b = __m & __memory_order_mask;\n+\tmemory_order __b = __m & __memory_order_mask;\n \t__glibcxx_assert(__b != memory_order_release);\n \t__glibcxx_assert(__b != memory_order_acq_rel);\n \n@@ -716,7 +716,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _GLIBCXX_ALWAYS_INLINE __pointer_type\n       load(memory_order __m = memory_order_seq_cst) const volatile noexcept\n       {\n-        memory_order __b = __m & __memory_order_mask;\n+\tmemory_order __b = __m & __memory_order_mask;\n \t__glibcxx_assert(__b != memory_order_release);\n \t__glibcxx_assert(__b != memory_order_acq_rel);\n \n@@ -743,8 +743,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t      memory_order __m1,\n \t\t\t      memory_order __m2) noexcept\n       {\n-        memory_order __b2 = __m2 & __memory_order_mask;\n-        memory_order __b1 = __m1 & __memory_order_mask;\n+\tmemory_order __b2 = __m2 & __memory_order_mask;\n+\tmemory_order __b1 = __m1 & __memory_order_mask;\n \t__glibcxx_assert(__b2 != memory_order_release);\n \t__glibcxx_assert(__b2 != memory_order_acq_rel);\n \t__glibcxx_assert(__b2 <= __b1);\n@@ -757,8 +757,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t      memory_order __m1,\n \t\t\t      memory_order __m2) volatile noexcept\n       {\n-        memory_order __b2 = __m2 & __memory_order_mask;\n-        memory_order __b1 = __m1 & __memory_order_mask;\n+\tmemory_order __b2 = __m2 & __memory_order_mask;\n+\tmemory_order __b1 = __m1 & __memory_order_mask;\n \n \t__glibcxx_assert(__b2 != memory_order_release);\n \t__glibcxx_assert(__b2 != memory_order_acq_rel);"}]}