{"sha": "2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZmY2JhYTU5NjllYTdmNmFlNTU4NzdkZjFiODU5ZjEzNjlmZGMyYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-16T14:47:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-16T14:47:48Z"}, "message": "[multiple changes]\n\n2014-07-16  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Find_Type_Name): Diagnose properly\n\ta private extension completion that is an interface definition\n\twith an interface list.\n\n2014-07-16  Arnaud Charlet  <charlet@adacore.com>\n\n\t* gnatls.adb (Gnatls): Code clean ups.\n\n2014-07-16  Thomas Quinot  <quinot@adacore.com>\n\n\t* sinfo.ads, sinfo.adb (N_Compound_Statement): New node kind.\n\t* sem.adb (Analyze): Handle N_Compound_Statement.\n\t* sprint.adb (Sprint_Node_Actual): Ditto.\n\t* sem_ch5.ads, sem_ch5.adb (Analyze_Compound_Statement): New\n\tprocedure to handle N_Compound_Statement.\n\t* exp_aggr.adb (Collect_Initialization_Statements):\n\tUse a proper compound statement node, instead of a bogus\n\texpression-with-actions with a NULL statement as its expression,\n\tto wrap collected initialization statements.\n\t* freeze.ads, freeze.adb\n\t(Explode_Initialization_Compound_Statement): New public procedure,\n\tlifted from Freeze_Entity.\n\t(Freeze_Entity): When freezing\n\tan object with captured initialization statements and without\n\tdelayed freezing, explode compount statement.\n\t* sem_ch4.adb (Analyze_Expression_With_Actions): Remove special\n\tcase that used to handle bogus EWAs with NULL statement as\n\tthe expression.\n\t* exp_ch13.adb (Expand_N_Freeze_Entity): For an object with\n\tdelayed freezing and captured initialization statements, explode\n\tcompound statement.\n\nFrom-SVN: r212662", "tree": {"sha": "986540adb019104d65f347f7c6f5f44ec53d2c94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/986540adb019104d65f347f7c6f5f44ec53d2c94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/comments", "author": null, "committer": null, "parents": [{"sha": "76241f8f2445434f7e9430d9bb4ccb97f253f96e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76241f8f2445434f7e9430d9bb4ccb97f253f96e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76241f8f2445434f7e9430d9bb4ccb97f253f96e"}], "stats": {"total": 249, "additions": 171, "deletions": 78}, "files": [{"sha": "c073f878955567c1f6585ae5b9542303a6228864", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b", "patch": "@@ -1,3 +1,37 @@\n+2014-07-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Find_Type_Name): Diagnose properly\n+\ta private extension completion that is an interface definition\n+\twith an interface list.\n+\n+2014-07-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnatls.adb (Gnatls): Code clean ups.\n+\n+2014-07-16  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sinfo.ads, sinfo.adb (N_Compound_Statement): New node kind.\n+\t* sem.adb (Analyze): Handle N_Compound_Statement.\n+\t* sprint.adb (Sprint_Node_Actual): Ditto.\n+\t* sem_ch5.ads, sem_ch5.adb (Analyze_Compound_Statement): New\n+\tprocedure to handle N_Compound_Statement.\n+\t* exp_aggr.adb (Collect_Initialization_Statements):\n+\tUse a proper compound statement node, instead of a bogus\n+\texpression-with-actions with a NULL statement as its expression,\n+\tto wrap collected initialization statements.\n+\t* freeze.ads, freeze.adb\n+\t(Explode_Initialization_Compound_Statement): New public procedure,\n+\tlifted from Freeze_Entity.\n+\t(Freeze_Entity): When freezing\n+\tan object with captured initialization statements and without\n+\tdelayed freezing, explode compount statement.\n+\t* sem_ch4.adb (Analyze_Expression_With_Actions): Remove special\n+\tcase that used to handle bogus EWAs with NULL statement as\n+\tthe expression.\n+\t* exp_ch13.adb (Expand_N_Freeze_Entity): For an object with\n+\tdelayed freezing and captured initialization statements, explode\n+\tcompound statement.\n+\n 2014-07-16  Gary Dismukes  <dismukes@adacore.com>\n \n \t* g-rewdat.adb, g-rewdat.ads: Minor reformatting."}, {"sha": "377fc7bc0b501c45351f83cac846a3c41e2cc1e7", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b", "patch": "@@ -3033,7 +3033,7 @@ package body Exp_Aggr is\n       Loc          : constant Source_Ptr := Sloc (N);\n       Init_Actions : constant List_Id    := New_List;\n       Init_Node    : Node_Id;\n-      EA           : Node_Id;\n+      Comp_Stmt    : Node_Id;\n \n    begin\n       --  Nothing to do if Obj is already frozen, as in this case we known we\n@@ -3049,12 +3049,10 @@ package body Exp_Aggr is\n       end loop;\n \n       if not Is_Empty_List (Init_Actions) then\n-         EA :=\n-           Make_Expression_With_Actions (Loc,\n-             Actions    => Init_Actions,\n-             Expression => Make_Null_Statement (Loc));\n-         Insert_Action_After (Init_Node, EA);\n-         Set_Initialization_Statements (Obj, EA);\n+         Comp_Stmt := Make_Compound_Statement (Loc,\n+                        Actions => Init_Actions);\n+         Insert_Action_After (Init_Node, Comp_Stmt);\n+         Set_Initialization_Statements (Obj, Comp_Stmt);\n       end if;\n    end Collect_Initialization_Statements;\n "}, {"sha": "9500a56e4dea339fb4a5b78d9b18b94ebae5cfac", "filename": "gcc/ada/exp_ch13.adb", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Fexp_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Fexp_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch13.adb?ref=2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,6 +31,7 @@ with Exp_Ch6;  use Exp_Ch6;\n with Exp_Imgv; use Exp_Imgv;\n with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;\n+with Freeze;   use Freeze;\n with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n@@ -410,10 +411,18 @@ package body Exp_Ch13 is\n          end;\n       end if;\n \n-      --  Processing for objects with address clauses\n+      --  Processing for objects\n+\n+      if Is_Object (E) then\n+         if Present (Address_Clause (E)) then\n+            Apply_Address_Clause_Check (E, N);\n+         end if;\n+\n+         --  If initialization statements have been captured in a compound\n+         --  statement, insert them back into the tree now.\n+\n+         Explode_Initialization_Compound_Statement (E);\n \n-      if Is_Object (E) and then Present (Address_Clause (E)) then\n-         Apply_Address_Clause_Check (E, N);\n          return;\n \n       --  Only other items requiring any front end action are types and"}, {"sha": "95ea1eb22ebc47394a4105b1fb43b93fddaec0df", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b", "patch": "@@ -1366,6 +1366,29 @@ package body Freeze is\n       end if;\n    end Is_Atomic_Aggregate;\n \n+   -----------------------------------------------\n+   -- Explode_Initialization_Compound_Statement --\n+   -----------------------------------------------\n+\n+   procedure Explode_Initialization_Compound_Statement (E : Entity_Id) is\n+      Init_Stmts : constant Node_Id := Initialization_Statements (E);\n+   begin\n+      if Present (Init_Stmts)\n+        and then Nkind (Init_Stmts) = N_Compound_Statement\n+      then\n+         Insert_List_Before (Init_Stmts, Actions (Init_Stmts));\n+\n+         --  Note that we rewrite Init_Stmts into a NULL statement, rather than\n+         --  just removing it, because Freeze_All may rely on this particular\n+         --  Node_Id still being present in the enclosing list to know where to\n+         --  stop freezing.\n+\n+         Rewrite (Init_Stmts, Make_Null_Statement (Sloc (Init_Stmts)));\n+\n+         Set_Initialization_Statements (E, Empty);\n+      end if;\n+   end Explode_Initialization_Compound_Statement;\n+\n    ----------------\n    -- Freeze_All --\n    ----------------\n@@ -4314,36 +4337,15 @@ package body Freeze is\n                Layout_Object (E);\n             end if;\n \n-            --  If initialization statements were captured in an expression\n-            --  with actions with null expression, and the object does not\n-            --  have delayed freezing, move them back now directly within the\n-            --  enclosing statement sequence.\n+            --  For an object that does not have delayed freezing, and whose\n+            --  initialization actions have been captured in a compound\n+            --  statement, move them back now directly within the enclosing\n+            --  statement sequence.\n \n             if Ekind_In (E, E_Constant, E_Variable)\n               and then not Has_Delayed_Freeze (E)\n             then\n-               declare\n-                  Init_Stmts : constant Node_Id :=\n-                                 Initialization_Statements (E);\n-               begin\n-                  if Present (Init_Stmts)\n-                    and then Nkind (Init_Stmts) = N_Expression_With_Actions\n-                    and then Nkind (Expression (Init_Stmts)) = N_Null_Statement\n-                  then\n-                     Insert_List_Before (Init_Stmts, Actions (Init_Stmts));\n-\n-                     --  Note that we rewrite Init_Stmts into a NULL statement,\n-                     --  rather than just removing it, because Freeze_All may\n-                     --  depend on this particular Node_Id still being present\n-                     --  in the enclosing list to signal where to stop\n-                     --  freezing.\n-\n-                     Rewrite (Init_Stmts,\n-                       Make_Null_Statement (Sloc (Init_Stmts)));\n-\n-                     Set_Initialization_Statements (E, Empty);\n-                  end if;\n-               end;\n+               Explode_Initialization_Compound_Statement (E);\n             end if;\n          end if;\n "}, {"sha": "e88acbf31d21f656b0cd882e87791853690a9a3a", "filename": "gcc/ada/freeze.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Ffreeze.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Ffreeze.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.ads?ref=2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b", "patch": "@@ -186,6 +186,10 @@ package Freeze is\n    --  of an object declaration or an assignment. Function is a noop and\n    --  returns false in other contexts.\n \n+   procedure Explode_Initialization_Compound_Statement (E : Entity_Id);\n+   --  If Initialization_Statements (E) is an N_Compound_Statement, insert its\n+   --  actions in the enclosing list and reset the attribute.\n+\n    function Freeze_Entity (E : Entity_Id; N : Node_Id) return List_Id;\n    --  Freeze an entity, and return Freeze nodes, to be inserted at the point\n    --  of call. N is a node whose source location corresponds to the freeze"}, {"sha": "aa36e333b565986107e3920d3a59688ca6e6718a", "filename": "gcc/ada/gnatls.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Fgnatls.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Fgnatls.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatls.adb?ref=2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b", "patch": "@@ -1579,9 +1579,6 @@ begin\n \n    Check_Version_And_Help (\"GNATLS\", \"1992\");\n \n-   Osint.Add_Default_Search_Dirs;\n-   Get_Target_Parameters;\n-\n    --  Loop to scan out arguments\n \n    Next_Arg := 1;\n@@ -1628,6 +1625,7 @@ begin\n    --  Finally, add the default directories and obtain target parameters\n \n    Osint.Add_Default_Search_Dirs;\n+   Get_Target_Parameters;\n \n    if Verbose_Mode then\n       Write_Eol;"}, {"sha": "b1368f4b732995abd986473cc03f8935455977f9", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -166,6 +166,9 @@ package body Sem is\n          when N_Component_Declaration =>\n             Analyze_Component_Declaration (N);\n \n+         when N_Compound_Statement =>\n+            Analyze_Compound_Statement (N);\n+\n          when N_Conditional_Entry_Call =>\n             Analyze_Conditional_Entry_Call (N);\n "}, {"sha": "f1cb23945d8d27b7a60c9fbcd19a1a181f1f23f5", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b", "patch": "@@ -15567,6 +15567,16 @@ package body Sem_Ch3 is\n                Prev_Par := Parent (Prev);\n             end if;\n \n+            if Nkind (N) = N_Full_Type_Declaration\n+              and then Nkind_In\n+                         (Type_Definition (N), N_Record_Definition,\n+                                               N_Derived_Type_Definition)\n+              and then Interface_Present (Type_Definition (N))\n+            then\n+               Error_Msg_N\n+                 (\"completion of private type cannot be an interface\", N);\n+            end if;\n+\n             if Nkind (Parent (Prev)) /= N_Private_Extension_Declaration then\n                if Etype (Prev) /= Prev then\n \n@@ -15596,15 +15606,6 @@ package body Sem_Ch3 is\n                         (\"completion of tagged private type must be tagged\",\n                          N);\n                   end if;\n-\n-               elsif Nkind (N) = N_Full_Type_Declaration\n-                 and then Nkind_In\n-                            (Type_Definition (N), N_Record_Definition,\n-                                                  N_Derived_Type_Definition)\n-                 and then Interface_Present (Type_Definition (N))\n-               then\n-                  Error_Msg_N\n-                    (\"completion of private type cannot be an interface\", N);\n                end if;\n \n             --  Ada 2005 (AI-251): Private extension declaration of a task"}, {"sha": "2e692c63dc8a728cee9015c6c353548eb2535cf0", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b", "patch": "@@ -2040,17 +2040,8 @@ package body Sem_Ch4 is\n          Next (A);\n       end loop;\n \n-      --  We currently hijack Expression_With_Actions with a VOID type and\n-      --  a NULL statement in the Expression. This will ultimately be replaced\n-      --  by a proper separate N_Compound_Statement node, at which point the\n-      --  test below can go away???\n-\n-      if Nkind (Expression (N)) = N_Null_Statement then\n-         Set_Etype (N, Standard_Void_Type);\n-      else\n-         Analyze_Expression (Expression (N));\n-         Set_Etype (N, Etype (Expression (N)));\n-      end if;\n+      Analyze_Expression (Expression (N));\n+      Set_Etype (N, Etype (Expression (N)));\n    end Analyze_Expression_With_Actions;\n \n    ---------------------------"}, {"sha": "d90a7e534cb2077ec6cbb9aa1b34a9c5dc06ad95", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b", "patch": "@@ -1016,6 +1016,15 @@ package body Sem_Ch5 is\n       end;\n    end Analyze_Block_Statement;\n \n+   --------------------------------\n+   -- Analyze_Compound_Statement --\n+   --------------------------------\n+\n+   procedure Analyze_Compound_Statement (N : Node_Id) is\n+   begin\n+      Analyze_List (Actions (N));\n+   end Analyze_Compound_Statement;\n+\n    ----------------------------\n    -- Analyze_Case_Statement --\n    ----------------------------"}, {"sha": "9c2908384e64aebecf01ddfbf0522b83fc1602b9", "filename": "gcc/ada/sem_ch5.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Fsem_ch5.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Fsem_ch5.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.ads?ref=2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -30,6 +30,7 @@ package Sem_Ch5 is\n    procedure Analyze_Assignment                   (N : Node_Id);\n    procedure Analyze_Block_Statement              (N : Node_Id);\n    procedure Analyze_Case_Statement               (N : Node_Id);\n+   procedure Analyze_Compound_Statement           (N : Node_Id);\n    procedure Analyze_Exit_Statement               (N : Node_Id);\n    procedure Analyze_Goto_Statement               (N : Node_Id);\n    procedure Analyze_If_Statement                 (N : Node_Id);"}, {"sha": "5576cecca8be5e90d5c50448da559cfce9562bb6", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b", "patch": "@@ -148,6 +148,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_And_Then\n         or else NT (N).Nkind = N_Case_Expression_Alternative\n         or else NT (N).Nkind = N_Compilation_Unit_Aux\n+        or else NT (N).Nkind = N_Compound_Statement\n         or else NT (N).Nkind = N_Expression_With_Actions\n         or else NT (N).Nkind = N_Freeze_Entity\n         or else NT (N).Nkind = N_Or_Else);\n@@ -3314,6 +3315,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_And_Then\n         or else NT (N).Nkind = N_Case_Expression_Alternative\n         or else NT (N).Nkind = N_Compilation_Unit_Aux\n+        or else NT (N).Nkind = N_Compound_Statement\n         or else NT (N).Nkind = N_Expression_With_Actions\n         or else NT (N).Nkind = N_Freeze_Entity\n         or else NT (N).Nkind = N_Or_Else);"}, {"sha": "e879eddc98463aa121b91d36b1e3c9a3972e7103", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 49, "deletions": 15, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b", "patch": "@@ -86,6 +86,7 @@ package Sinfo is\n    --    Add it to the documentation in the appropriate place\n    --    Add its fields to this documentation section\n    --    Define it in the appropriate classification in Node_Kind\n+   --    Add an entry in Is_Syntactic_Field\n    --    In the body (sinfo), add entries to the access functions for all\n    --     its fields (except standard expression fields) to include the new\n    --     node in the checks.\n@@ -98,6 +99,8 @@ package Sinfo is\n    --    For a subexpression, add an appropriate section to the case\n    --     statement in sem_res.adb\n \n+   --  All back ends must be made aware of the new node kind.\n+\n    --  Finally, four utility programs must be run:\n \n    --    (Optional.) Run CSinfo to check that you have made the changes\n@@ -7310,6 +7313,39 @@ package Sinfo is\n    --  reconstructed tree printed by Sprint, and the node descriptions here\n    --  show this syntax.\n \n+      ------------------------\n+      -- Compound Statement --\n+      ------------------------\n+\n+      --  This node is created by the analyzer/expander to handle some\n+      --  expansion cases where a sequence of actions needs to be captured\n+      --  within a single node (which acts as a container and allows the\n+      --  entire list of actions to be moved around as a whole) appearing\n+      --  in a sequence of statements.\n+\n+      --  This is the statement counterpart to expression node N_Expression_\n+      --  With_Actions.\n+\n+      --  The required semantics is that the set of actions is executed in\n+      --  the order in which it appears, as though they appeared by themselves\n+      --  in the enclosing list of declarations of statements. Unlike what\n+      --  happens when using an N_Block_Statement, no new scope is introduced.\n+\n+      --  Note: for the time being, this is used only as a transient\n+      --  representation during expansion, and all compound statement nodes\n+      --  must be exploded back to their constituent statements before handing\n+      --  the tree to the back end.\n+\n+      --  Sprint syntax:  do\n+      --                    action;\n+      --                    action;\n+      --                    ...\n+      --                    action;\n+      --                  end;\n+\n+      --  N_Compound_Statement\n+      --  Actions (List1)\n+\n       --------------\n       -- Contract --\n       --------------\n@@ -7375,7 +7411,7 @@ package Sinfo is\n       --  The ordering is in LIFO fashion.\n \n       -------------------\n-      -- Expanded_Name --\n+      -- Expanded Name --\n       -------------------\n \n       --  The N_Expanded_Name node is used to represent a selected component\n@@ -7404,7 +7440,7 @@ package Sinfo is\n       --  plus fields for expression\n \n       -----------------------------\n-      -- Expression with Actions --\n+      -- Expression With Actions --\n       -----------------------------\n \n       --  This node is created by the analyzer/expander to handle some\n@@ -7449,16 +7485,6 @@ package Sinfo is\n       --  the expression of the node is fully analyzed and expanded, at which\n       --  point it is safe to remove it, since no more actions can be inserted.\n \n-      --  Note: Expression may be a Null_Statement, in which case the\n-      --  N_Expression_With_Actions has type Standard_Void_Type. However some\n-      --  backends do not support such expression-with-actions occurring\n-      --  outside of a proper (non-void) expression, so this should just be\n-      --  used as an intermediate representation within the front end. Also\n-      --  note that this is really an irregularity (expressions and statements\n-      --  are not interchangeable, and in particular an N_Null_Statement is\n-      --  not a proper expression), and in the long term all cases of this\n-      --  idiom should instead use a new node kind N_Compound_Statement.\n-\n       --  Note: In Modify_Tree_For_C, we never generate any declarations in\n       --  the action list, which can contain only non-declarative statements.\n \n@@ -7526,7 +7552,7 @@ package Sinfo is\n       --  for this node points to the FREEZE keyword in the Sprint file output.\n \n       ---------------------------\n-      -- Freeze_Generic_Entity --\n+      -- Freeze Generic Entity --\n       ---------------------------\n \n       --  The freeze point of an entity indicates the point at which the\n@@ -7585,7 +7611,7 @@ package Sinfo is\n       --  for this node points to the label name in the generated declaration.\n \n       ---------------------\n-      -- Itype_Reference --\n+      -- Itype Reference --\n       ---------------------\n \n       --  This node is used to create a reference to an Itype. The only purpose\n@@ -7609,7 +7635,7 @@ package Sinfo is\n       --  for this node points to the REFERENCE keyword in the file output.\n \n       ---------------------\n-      -- Raise_xxx_Error --\n+      -- Raise xxx Error --\n       ---------------------\n \n       --  One of these nodes is created during semantic analysis to replace\n@@ -8197,6 +8223,7 @@ package Sinfo is\n       N_Block_Statement,\n       N_Case_Statement,\n       N_Code_Statement,\n+      N_Compound_Statement,\n       N_Conditional_Entry_Call,\n \n       --  N_Statement_Other_Than_Procedure_Call, N_Delay_Statement\n@@ -12078,6 +12105,13 @@ package Sinfo is\n         4 => False,   --  unused\n         5 => False),  --  Etype (Node5-Sem)\n \n+     N_Compound_Statement =>\n+       (1 => True,    --  Actions (List1)\n+        2 => False,   --  unused\n+        3 => False,   --  unused\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n      N_Contract =>\n        (1 => False,   --  Pre_Post_Conditions (Node1)\n         2 => False,   --  Contract_Test_Cases (Node2)"}, {"sha": "ec7f4caf6e76edbb6cddf6f8b38793a65163461b", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=2ffcbaa5969ea7f6ae55877df1b859f1369fdc2b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1326,6 +1326,13 @@ package body Sprint is\n                Sprint_Node (Variant_Part (Node));\n             end if;\n \n+         when N_Compound_Statement =>\n+            Write_Indent_Str (\"do\");\n+            Indent_Begin;\n+            Sprint_Node_List (Actions (Node));\n+            Indent_End;\n+            Write_Indent_Str (\"end;\");\n+\n          when N_Conditional_Entry_Call =>\n             Write_Indent_Str_Sloc (\"select\");\n             Indent_Begin;"}]}