{"sha": "1e5f973d45bffd642e6d49308df917aa7c9ce0af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU1Zjk3M2Q0NWJmZmQ2NDJlNmQ0OTMwOGRmOTE3YWE3YzljZTBhZg==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2001-04-28T08:54:31Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-04-28T08:54:31Z"}, "message": "md.texi: Use XX-bit instead of XXbit or XX bit where appropriate.\n\n        * md.texi: Use XX-bit instead of XXbit or XX bit where\n        appropriate.\n\nFrom-SVN: r41656", "tree": {"sha": "85e75dd4b81d0407cde86654bb52af52ba042cf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85e75dd4b81d0407cde86654bb52af52ba042cf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e5f973d45bffd642e6d49308df917aa7c9ce0af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e5f973d45bffd642e6d49308df917aa7c9ce0af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e5f973d45bffd642e6d49308df917aa7c9ce0af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e5f973d45bffd642e6d49308df917aa7c9ce0af/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4275c4c400d5fd3af8e40b2eb503ef548aa1dca8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4275c4c400d5fd3af8e40b2eb503ef548aa1dca8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4275c4c400d5fd3af8e40b2eb503ef548aa1dca8"}], "stats": {"total": 89, "additions": 47, "deletions": 42}, "files": [{"sha": "a61ddfd52ccedeeddb0a74e2170790a3ffee7571", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e5f973d45bffd642e6d49308df917aa7c9ce0af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e5f973d45bffd642e6d49308df917aa7c9ce0af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e5f973d45bffd642e6d49308df917aa7c9ce0af", "patch": "@@ -1,3 +1,8 @@\n+2001-04-28  Andreas Jaeger  <aj@suse.de>\n+\n+        * md.texi: Use XX-bit instead of XXbit or XX bit where\n+        appropriate.\n+\n 2001-04-28  Jens Schweikhardt <schweikh@schweikhardt.net>\n \n \t* gcc.c (process_command): Allow -l lib in addition to -llib"}, {"sha": "aacb608f276183f4cba7b033285a95d58ea86229", "filename": "gcc/md.texi", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e5f973d45bffd642e6d49308df917aa7c9ce0af/gcc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e5f973d45bffd642e6d49308df917aa7c9ce0af/gcc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmd.texi?ref=1e5f973d45bffd642e6d49308df917aa7c9ce0af", "patch": "@@ -1376,20 +1376,20 @@ Constant greater than 0, less than 0x10000\n Constant whose high 24 bits are on (1)\n \n @item L\n-16 bit constant whose high 8 bits are on (1)\n+16-bit constant whose high 8 bits are on (1)\n \n @item M\n-32 bit constant whose high 16 bits are on (1)\n+32-bit constant whose high 16 bits are on (1)\n \n @item N\n-32 bit negative constant that fits in 8 bits\n+32-bit negative constant that fits in 8 bits\n \n @item O\n-The constant 0x80000000 or, on the 29050, any 32 bit constant\n+The constant 0x80000000 or, on the 29050, any 32-bit constant\n whose low 16 bits are 0.\n \n @item P\n-16 bit negative constant that fits in 8 bits\n+16-bit negative constant that fits in 8 bits\n \n @item G\n @itemx H\n@@ -1490,17 +1490,17 @@ Floating point register\n @samp{FPMEM} stack memory for FPR-GPR transfers\n \n @item I\n-Signed 16 bit constant\n+Signed 16-bit constant\n \n @item J\n-Unsigned 16 bit constant shifted left 16 bits (use @samp{L} instead for \n+Unsigned 16-bit constant shifted left 16 bits (use @samp{L} instead for \n @code{SImode} constants)\n \n @item K\n-Unsigned 16 bit constant\n+Unsigned 16-bit constant\n \n @item L\n-Signed 16 bit constant shifted left 16 bits\n+Signed 16-bit constant shifted left 16 bits\n \n @item M\n Constant larger than 31\n@@ -1512,7 +1512,7 @@ Exact power of 2\n Zero\n \n @item P\n-Constant whose negation is a signed 16 bit constant\n+Constant whose negation is a signed 16-bit constant\n \n @item G\n Floating point constant that can be loaded into a register with one\n@@ -1539,16 +1539,16 @@ System V Release 4 small data area reference\n @table @code\n @item q\n @samp{a}, @code{b}, @code{c}, or @code{d} register for the i386.\n-For x86-64 it is equivalent to @samp{r} class. (for 8bit instructions that\n+For x86-64 it is equivalent to @samp{r} class. (for 8-bit instructions that\n do not use upper halves)\n \n @item Q\n-@samp{a}, @code{b}, @code{c}, or @code{d} register. (for 8bit instructions,\n+@samp{a}, @code{b}, @code{c}, or @code{d} register. (for 8-bit instructions,\n that do use upper halves)\n \n @item R\n Legacy register --- equivalent to @code{r} class in i386 mode.\n-(for non-8bit registers used together with 8bit upper halves in a single\n+(for non-8-bit registers used together with 8-bit upper halves in a single\n instruction)\n \n @item A\n@@ -1591,10 +1591,10 @@ Second floating point register\n MMX register\n \n @item I\n-Constant in range 0 to 31 (for 32 bit shifts)\n+Constant in range 0 to 31 (for 32-bit shifts)\n \n @item J\n-Constant in range 0 to 63 (for 64 bit shifts)\n+Constant in range 0 to 63 (for 64-bit shifts)\n \n @item K\n @samp{0xff}\n@@ -1610,11 +1610,11 @@ Constant in range 0 to 255 (for @code{out} instruction)\n \n @item Z\n Constant in range 0 to 0xffffffff or symbolic reference known to fit specified range.\n-(for using immediates in zero extending 32bit to 64bit x86-64 instructions)\n+(for using immediates in zero extending 32-bit to 64-bit x86-64 instructions)\n \n @item e\n Constant in range -2147483648 to 2147483647 or symbolic reference known to fit specified range.\n-(for using immediates in 64bit x86-64 instructions)\n+(for using immediates in 64-bit x86-64 instructions)\n \n @item G\n Standard 80387 floating point constant\n@@ -1674,7 +1674,7 @@ General-purpose integer register\n Floating-point status register\n \n @item I\n-Signed 16 bit constant (for arithmetic instructions)\n+Signed 16-bit constant (for arithmetic instructions)\n \n @item J\n Zero\n@@ -1686,17 +1686,17 @@ Zero-extended 16-bit constant (for logic instructions)\n Constant with low 16 bits zero (can be loaded with @code{lui})\n \n @item M\n-32 bit constant which requires two instructions to load (a constant\n+32-bit constant which requires two instructions to load (a constant\n which is not @samp{I}, @samp{K}, or @samp{L})\n \n @item N\n-Negative 16 bit constant\n+Negative 16-bit constant\n \n @item O\n Exact power of two\n \n @item P\n-Positive 16 bit constant\n+Positive 16-bit constant\n \n @item G\n Floating point zero\n@@ -1735,7 +1735,7 @@ First 16 Sun FPA registers, if available\n Integer in the range 1 to 8\n \n @item J\n-16 bit signed number\n+16-bit signed number\n \n @item K\n Signed number whose magnitude is greater than 0x80\n@@ -1815,26 +1815,26 @@ Constants in the range -8 to 2\n @item SPARC---@file{sparc.h}\n @table @code\n @item f\n-Floating-point register that can hold 32 or 64 bit values.\n+Floating-point register that can hold 32- or 64-bit values.\n \n @item e\n-Floating-point register that can hold 64 or 128 bit values.\n+Floating-point register that can hold 64- or 128-bit values.\n \n @item I\n-Signed 13 bit constant\n+Signed 13-bit constant\n \n @item J\n Zero\n \n @item K\n-32 bit constant with the low 12 bits clear (a constant that can be\n+32-bit constant with the low 12 bits clear (a constant that can be\n loaded with the @code{sethi} instruction)\n \n @item G\n Floating-point zero\n \n @item H\n-Signed 13 bit constant, sign-extended to 32 or 64 bits\n+Signed 13-bit constant, sign-extended to 32 or 64 bits\n \n @item Q\n Floating-point constant whose integral representation can\n@@ -1868,22 +1868,22 @@ Auxiliary (address) register (ar0-ar7)\n Stack pointer register (sp)\n \n @item c\n-Standard (32 bit) precision integer register\n+Standard (32-bit) precision integer register\n \n @item f\n-Extended (40 bit) precision register (r0-r11)\n+Extended (40-bit) precision register (r0-r11)\n \n @item k\n Block count register (bk)\n \n @item q\n-Extended (40 bit) precision low register (r0-r7)\n+Extended (40-bit) precision low register (r0-r7)\n \n @item t\n-Extended (40 bit) precision register (r0-r1)\n+Extended (40-bit) precision register (r0-r1)\n \n @item u\n-Extended (40 bit) precision register (r2-r3)\n+Extended (40-bit) precision register (r2-r3)\n \n @item v\n Repeat count register (rc)\n@@ -1901,34 +1901,34 @@ Data page register (dp)\n Floating-point zero\n \n @item H\n-Immediate 16 bit floating-point constant\n+Immediate 16-bit floating-point constant\n \n @item I\n-Signed 16 bit constant\n+Signed 16-bit constant\n \n @item J\n-Signed 8 bit constant\n+Signed 8-bit constant\n \n @item K\n-Signed 5 bit constant\n+Signed 5-bit constant\n \n @item L\n-Unsigned 16 bit constant\n+Unsigned 16-bit constant\n \n @item M\n-Unsigned 8 bit constant\n+Unsigned 8-bit constant\n \n @item N\n-Ones complement of unsigned 16 bit constant\n+Ones complement of unsigned 16-bit constant\n \n @item O\n-High 16 bit constant (32 bit constant with 16 LSBs zero)\n+High 16-bit constant (32-bit constant with 16 LSBs zero)\n \n @item Q\n-Indirect memory reference with signed 8 bit or index register displacement \n+Indirect memory reference with signed 8-bit or index register displacement \n \n @item R\n-Indirect memory reference with unsigned 5 bit displacement\n+Indirect memory reference with unsigned 5-bit displacement\n \n @item S\n Indirect memory reference with 1 bit or index register displacement "}]}