{"sha": "e681fb2b5324bf266bd9caedceb2f84792207de6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY4MWZiMmI1MzI0YmYyNjZiZDljYWVkY2ViMmY4NDc5MjIwN2RlNg==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2016-02-01T17:17:47Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2016-02-01T17:17:47Z"}, "message": "re PR tree-optimization/67921 (\"internal compiler error: in build_polynomial_chrec, at tree-chrec.h:147\" when using -fsanitize=undefined)\n\n\n\tPR tree-optimization/67921\n\t* fold-const.c (split_tree): New parameters.  Convert pointer\n\ttype variable part to proper type before negating. \n\t(fold_binary_loc): Pass new arguments to split_tree.\n\n\tgcc/testsuite/ChangeLog\n\tPR tree-optimization/67921\n\t* c-c++-common/ubsan/pr67921.c: New test.\n\nFrom-SVN: r233042", "tree": {"sha": "71a5ad91eb43ad0ae0479f0aeb90f06e0084d1e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71a5ad91eb43ad0ae0479f0aeb90f06e0084d1e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e681fb2b5324bf266bd9caedceb2f84792207de6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e681fb2b5324bf266bd9caedceb2f84792207de6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e681fb2b5324bf266bd9caedceb2f84792207de6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e681fb2b5324bf266bd9caedceb2f84792207de6/comments", "author": null, "committer": null, "parents": [{"sha": "b6adbb9faabb776ae7b70a5f5943ae883b1f76ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6adbb9faabb776ae7b70a5f5943ae883b1f76ea"}], "stats": {"total": 64, "additions": 56, "deletions": 8}, "files": [{"sha": "ba4deed7a245705fa90094e4fec1ef9bf522b555", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e681fb2b5324bf266bd9caedceb2f84792207de6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e681fb2b5324bf266bd9caedceb2f84792207de6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e681fb2b5324bf266bd9caedceb2f84792207de6", "patch": "@@ -1,3 +1,10 @@\n+2016-02-01  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/67921\n+\t* fold-const.c (split_tree): New parameters.  Convert pointer\n+\ttype variable part to proper type before negating. \n+\t(fold_binary_loc): Pass new arguments to split_tree.\n+\n 2016-02-01  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* config/nvptx/nvptx.c (PTX_GANG_DEFAULT): New."}, {"sha": "e34bc81eae8f1458730e9c68d465d9180dbc9285", "filename": "gcc/fold-const.c", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e681fb2b5324bf266bd9caedceb2f84792207de6/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e681fb2b5324bf266bd9caedceb2f84792207de6/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e681fb2b5324bf266bd9caedceb2f84792207de6", "patch": "@@ -109,7 +109,8 @@ enum comparison_code {\n \n static bool negate_expr_p (tree);\n static tree negate_expr (tree);\n-static tree split_tree (tree, enum tree_code, tree *, tree *, tree *, int);\n+static tree split_tree (location_t, tree, tree, enum tree_code,\n+\t\t\ttree *, tree *, tree *, int);\n static tree associate_trees (location_t, tree, tree, enum tree_code, tree);\n static enum comparison_code comparison_to_compcode (enum tree_code);\n static enum tree_code compcode_to_comparison (enum comparison_code);\n@@ -767,16 +768,19 @@ negate_expr (tree t)\n    literal for which we use *MINUS_LITP instead.\n \n    If NEGATE_P is true, we are negating all of IN, again except a literal\n-   for which we use *MINUS_LITP instead.\n+   for which we use *MINUS_LITP instead.  If a variable part is of pointer\n+   type, it is negated after converting to TYPE.  This prevents us from\n+   generating illegal MINUS pointer expression.  LOC is the location of\n+   the converted variable part.\n \n    If IN is itself a literal or constant, return it as appropriate.\n \n    Note that we do not guarantee that any of the three values will be the\n    same type as IN, but they will have the same signedness and mode.  */\n \n static tree\n-split_tree (tree in, enum tree_code code, tree *conp, tree *litp,\n-\t    tree *minus_litp, int negate_p)\n+split_tree (location_t loc, tree in, tree type, enum tree_code code,\n+\t    tree *conp, tree *litp, tree *minus_litp, int negate_p)\n {\n   tree var = 0;\n \n@@ -833,7 +837,12 @@ split_tree (tree in, enum tree_code code, tree *conp, tree *litp,\n       if (neg_conp_p)\n \t*conp = negate_expr (*conp);\n       if (neg_var_p)\n-\tvar = negate_expr (var);\n+\t{\n+\t  /* Convert to TYPE before negating a pointer type expr.  */\n+\t  if (var && POINTER_TYPE_P (TREE_TYPE (var)))\n+\t    var = fold_convert_loc (loc, type, var);\n+\t  var = negate_expr (var);\n+\t}\n     }\n   else if (TREE_CODE (in) == BIT_NOT_EXPR\n \t   && code == PLUS_EXPR)\n@@ -854,6 +863,9 @@ split_tree (tree in, enum tree_code code, tree *conp, tree *litp,\n       else if (*minus_litp)\n \t*litp = *minus_litp, *minus_litp = 0;\n       *conp = negate_expr (*conp);\n+      /* Convert to TYPE before negating a pointer type expr.  */\n+      if (var && POINTER_TYPE_P (TREE_TYPE (var)))\n+\tvar = fold_convert_loc (loc, type, var);\n       var = negate_expr (var);\n     }\n \n@@ -9621,9 +9633,10 @@ fold_binary_loc (location_t loc,\n \t     then the result with variables.  This increases the chances of\n \t     literals being recombined later and of generating relocatable\n \t     expressions for the sum of a constant and literal.  */\n-\t  var0 = split_tree (arg0, code, &con0, &lit0, &minus_lit0, 0);\n-\t  var1 = split_tree (arg1, code, &con1, &lit1, &minus_lit1,\n-\t\t\t     code == MINUS_EXPR);\n+\t  var0 = split_tree (loc, arg0, type, code,\n+\t\t\t     &con0, &lit0, &minus_lit0, 0);\n+\t  var1 = split_tree (loc, arg1, type, code,\n+\t\t\t     &con1, &lit1, &minus_lit1, code == MINUS_EXPR);\n \n \t  /* Recombine MINUS_EXPR operands by using PLUS_EXPR.  */\n \t  if (code == MINUS_EXPR)"}, {"sha": "7efd95cebc02f6cb1330635fcf68c548d23141a7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e681fb2b5324bf266bd9caedceb2f84792207de6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e681fb2b5324bf266bd9caedceb2f84792207de6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e681fb2b5324bf266bd9caedceb2f84792207de6", "patch": "@@ -1,3 +1,8 @@\n+2016-02-01  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/67921\n+\t* c-c++-common/ubsan/pr67921.c: New test.\n+\n 2016-02-01  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/69556"}, {"sha": "728ff93a60f7ee50dd2a5cf3c9de09505a06e1b4", "filename": "gcc/testsuite/c-c++-common/ubsan/pr67921.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e681fb2b5324bf266bd9caedceb2f84792207de6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr67921.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e681fb2b5324bf266bd9caedceb2f84792207de6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr67921.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr67921.c?ref=e681fb2b5324bf266bd9caedceb2f84792207de6", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize=undefined\" } */\n+\n+struct s\n+{\n+  int n;\n+  int arr[][6];\n+};\n+void bar (int);\n+void foo (struct s *ptr)\n+{\n+  int i;\n+  for (; i < 2; i++)\n+    for (; ptr->n;)\n+      {\n+\tint *a = ptr->arr[i];\n+\tint b[66];\n+\tint j = 0;\n+\n+\tfor (; j < 56; j++)\n+\t  bar (a[j] - b[j]);\n+    }\n+}"}]}