{"sha": "bee64a2b9e0c63a3e731bba71c5e3c709204d288", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVlNjRhMmI5ZTBjNjNhM2U3MzFiYmE3MWM1ZTNjNzA5MjA0ZDI4OA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-10-16T19:42:48Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-10-16T19:42:48Z"}, "message": "re PR fortran/47023 (C_Sizeof: Rejects valid code)\n\n2011-10-16  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/47023\n\t* primary.c (match_kind_param): Detect ISO_C_BINDING kinds.\n\t(get_kind): Pass on 'is_iso_c' flag.\n\t(match_integer_constant,match_real_constant,match_logical_constant):\n\tSet 'ts.is_c_interop'.\n\n\n2011-10-16  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/47023\n\t* gfortran.dg/c_kind_tests_3.f03: New.\n\nFrom-SVN: r180062", "tree": {"sha": "af54f584dbc3a6bc65e424d54432ab4723617cd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af54f584dbc3a6bc65e424d54432ab4723617cd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bee64a2b9e0c63a3e731bba71c5e3c709204d288", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bee64a2b9e0c63a3e731bba71c5e3c709204d288", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bee64a2b9e0c63a3e731bba71c5e3c709204d288", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bee64a2b9e0c63a3e731bba71c5e3c709204d288/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe445bf7bea544ca11c512d990ca1cb1c6f71c69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe445bf7bea544ca11c512d990ca1cb1c6f71c69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe445bf7bea544ca11c512d990ca1cb1c6f71c69"}], "stats": {"total": 63, "additions": 50, "deletions": 13}, "files": [{"sha": "6d7148dc2f8ad2af97cc67134d890e966ae28c43", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee64a2b9e0c63a3e731bba71c5e3c709204d288/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee64a2b9e0c63a3e731bba71c5e3c709204d288/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bee64a2b9e0c63a3e731bba71c5e3c709204d288", "patch": "@@ -1,3 +1,11 @@\n+2011-10-16  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/47023\n+\t* primary.c (match_kind_param): Detect ISO_C_BINDING kinds.\n+\t(get_kind): Pass on 'is_iso_c' flag.\n+\t(match_integer_constant,match_real_constant,match_logical_constant):\n+\tSet 'ts.is_c_interop'.\n+\n 2011-10-16  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/50547"}, {"sha": "748185ae72b085e82d51719c5c35ed87edd3ff0f", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee64a2b9e0c63a3e731bba71c5e3c709204d288/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee64a2b9e0c63a3e731bba71c5e3c709204d288/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=bee64a2b9e0c63a3e731bba71c5e3c709204d288", "patch": "@@ -32,16 +32,20 @@ int matching_actual_arglist = 0;\n \n /* Matches a kind-parameter expression, which is either a named\n    symbolic constant or a nonnegative integer constant.  If\n-   successful, sets the kind value to the correct integer.  */\n+   successful, sets the kind value to the correct integer.\n+   The argument 'is_iso_c' signals whether the kind is an ISO_C_BINDING\n+   symbol like e.g. 'c_int'.  */\n \n static match\n-match_kind_param (int *kind)\n+match_kind_param (int *kind, int *is_iso_c)\n {\n   char name[GFC_MAX_SYMBOL_LEN + 1];\n   gfc_symbol *sym;\n   const char *p;\n   match m;\n \n+  *is_iso_c = 0;\n+\n   m = gfc_match_small_literal_int (kind, NULL);\n   if (m != MATCH_NO)\n     return m;\n@@ -53,6 +57,8 @@ match_kind_param (int *kind)\n   if (gfc_find_symbol (name, NULL, 1, &sym))\n     return MATCH_ERROR;\n \n+  *is_iso_c = sym->attr.is_iso_c;\n+\n   if (sym == NULL)\n     return MATCH_NO;\n \n@@ -77,20 +83,24 @@ match_kind_param (int *kind)\n \n /* Get a trailing kind-specification for non-character variables.\n    Returns:\n-      the integer kind value or:\n-      -1 if an error was generated\n-      -2 if no kind was found */\n+     * the integer kind value or\n+     * -1 if an error was generated,\n+     * -2 if no kind was found.\n+   The argument 'is_iso_c' signals whether the kind is an ISO_C_BINDING\n+   symbol like e.g. 'c_int'.  */\n \n static int\n-get_kind (void)\n+get_kind (int *is_iso_c)\n {\n   int kind;\n   match m;\n \n+  *is_iso_c = 0;\n+\n   if (gfc_match_char ('_') != MATCH_YES)\n     return -2;\n \n-  m = match_kind_param (&kind);\n+  m = match_kind_param (&kind, is_iso_c);\n   if (m == MATCH_NO)\n     gfc_error (\"Missing kind-parameter at %C\");\n \n@@ -188,7 +198,7 @@ match_digits (int signflag, int radix, char *buffer)\n static match\n match_integer_constant (gfc_expr **result, int signflag)\n {\n-  int length, kind;\n+  int length, kind, is_iso_c;\n   locus old_loc;\n   char *buffer;\n   gfc_expr *e;\n@@ -208,7 +218,7 @@ match_integer_constant (gfc_expr **result, int signflag)\n \n   match_digits (signflag, 10, buffer);\n \n-  kind = get_kind ();\n+  kind = get_kind (&is_iso_c);\n   if (kind == -2)\n     kind = gfc_default_integer_kind;\n   if (kind == -1)\n@@ -221,6 +231,7 @@ match_integer_constant (gfc_expr **result, int signflag)\n     }\n \n   e = gfc_convert_integer (buffer, kind, 10, &gfc_current_locus);\n+  e->ts.is_c_interop = is_iso_c;\n \n   if (gfc_range_check (e) != ARITH_OK)\n     {\n@@ -473,7 +484,7 @@ match_boz_constant (gfc_expr **result)\n static match\n match_real_constant (gfc_expr **result, int signflag)\n {\n-  int kind, count, seen_dp, seen_digits;\n+  int kind, count, seen_dp, seen_digits, is_iso_c;\n   locus old_loc, temp_loc;\n   char *p, *buffer, c, exp_char;\n   gfc_expr *e;\n@@ -611,7 +622,7 @@ match_real_constant (gfc_expr **result, int signflag)\n       c = gfc_next_ascii_char ();\n     }\n \n-  kind = get_kind ();\n+  kind = get_kind (&is_iso_c);\n   if (kind == -1)\n     goto cleanup;\n \n@@ -665,6 +676,7 @@ match_real_constant (gfc_expr **result, int signflag)\n   e = gfc_convert_real (buffer, kind, &gfc_current_locus);\n   if (negate)\n     mpfr_neg (e->value.real, e->value.real, GFC_RND_MODE);\n+  e->ts.is_c_interop = is_iso_c;\n \n   switch (gfc_range_check (e))\n     {\n@@ -1099,13 +1111,13 @@ static match\n match_logical_constant (gfc_expr **result)\n {\n   gfc_expr *e;\n-  int i, kind;\n+  int i, kind, is_iso_c;\n \n   i = match_logical_constant_string ();\n   if (i == -1)\n     return MATCH_NO;\n \n-  kind = get_kind ();\n+  kind = get_kind (&is_iso_c);\n   if (kind == -1)\n     return MATCH_ERROR;\n   if (kind == -2)\n@@ -1118,6 +1130,7 @@ match_logical_constant (gfc_expr **result)\n     }\n \n   e = gfc_get_logical_expr (kind, &gfc_current_locus, i);\n+  e->ts.is_c_interop = is_iso_c;\n \n   *result = e;\n   return MATCH_YES;"}, {"sha": "b57eda18a772d960791197d4c0c3de066fc8fd10", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee64a2b9e0c63a3e731bba71c5e3c709204d288/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee64a2b9e0c63a3e731bba71c5e3c709204d288/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bee64a2b9e0c63a3e731bba71c5e3c709204d288", "patch": "@@ -1,3 +1,8 @@\n+2011-10-16  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/47023\n+\t* gfortran.dg/c_kind_tests_3.f03: New.\n+\n 2011-10-16  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/50547"}, {"sha": "5d5f3ab195f5291a7e6f37c31cdfc0f92538c488", "filename": "gcc/testsuite/gfortran.dg/c_kind_tests_3.f03", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee64a2b9e0c63a3e731bba71c5e3c709204d288/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_kind_tests_3.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee64a2b9e0c63a3e731bba71c5e3c709204d288/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_kind_tests_3.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_kind_tests_3.f03?ref=bee64a2b9e0c63a3e731bba71c5e3c709204d288", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+!\n+! PR 47023: [4.6/4.7 regression] C_Sizeof: Rejects valid code\n+!\n+! Contributed by <florian.rathgeber@gmail.com>\n+\n+  use iso_c_binding\n+  real(c_double) x\n+  print *, c_sizeof(x)\n+  print *, c_sizeof(0.0_c_double)\n+end "}]}