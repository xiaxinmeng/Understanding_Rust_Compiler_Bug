{"sha": "96370780ab54d139fcba44fcc63051de6acad09c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYzNzA3ODBhYjU0ZDEzOWZjYmE0NGZjYzYzMDUxZGU2YWNhZDA5Yw==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@ispras.ru", "date": "2006-11-16T06:57:59Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2006-11-16T06:57:59Z"}, "message": "re PR target/29201 (ICE in create_recovery_block, at haifa-sched.c:3692 at -O3)\n\n2006-11-16  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n\n\tPR target/29201\n\t* cfgrtl.c (rtl_delete_block): Move the code for getting last insn of\n\tbb to ...\n\t(get_last_bb_insn): ... new global function.\n\t(basic_block.h): Declare it.\n\t* haifa-sched.c (create_recovery_block): Use it.\n\n2006-11-16  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n\n\tPR target/29201\n\t* gcc.c-torture/compile/pr29201.c: New test for ia64 target.\n\nFrom-SVN: r118882", "tree": {"sha": "e42fd46715b58df86d89a5108120bf34ad75b583", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e42fd46715b58df86d89a5108120bf34ad75b583"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96370780ab54d139fcba44fcc63051de6acad09c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96370780ab54d139fcba44fcc63051de6acad09c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96370780ab54d139fcba44fcc63051de6acad09c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96370780ab54d139fcba44fcc63051de6acad09c/comments", "author": null, "committer": null, "parents": [{"sha": "db21bbf90c02ca0a342e7fd9acdc778b2e758692", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db21bbf90c02ca0a342e7fd9acdc778b2e758692", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db21bbf90c02ca0a342e7fd9acdc778b2e758692"}], "stats": {"total": 183, "additions": 165, "deletions": 18}, "files": [{"sha": "2ccb8051d70ed4a3bc6493811aa821c026bf458b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96370780ab54d139fcba44fcc63051de6acad09c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96370780ab54d139fcba44fcc63051de6acad09c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96370780ab54d139fcba44fcc63051de6acad09c", "patch": "@@ -1,3 +1,12 @@\n+2006-11-16  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n+\n+\tPR target/29201\n+\t* cfgrtl.c (rtl_delete_block): Move the code for getting last insn of\n+\tbb to ...\n+\t(get_last_bb_insn): ... new global function.\n+\t(basic_block.h): Declare it.\n+\t* haifa-sched.c (create_recovery_block): Use it.\n+\n 2006-11-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR middle-end/29862"}, {"sha": "aa4148624d65388ead338658740ebec3dd5f2f5a", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96370780ab54d139fcba44fcc63051de6acad09c/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96370780ab54d139fcba44fcc63051de6acad09c/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=96370780ab54d139fcba44fcc63051de6acad09c", "patch": "@@ -946,6 +946,7 @@ extern void update_br_prob_note (basic_block);\n extern void fixup_abnormal_edges (void);\n extern bool inside_basic_block_p (rtx);\n extern bool control_flow_insn_p (rtx);\n+extern rtx get_last_bb_insn (basic_block);\n \n /* In bb-reorder.c */\n extern void reorder_basic_blocks (unsigned int);"}, {"sha": "3934d9297dfade90f16011c3155c0e2d43a7845b", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96370780ab54d139fcba44fcc63051de6acad09c/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96370780ab54d139fcba44fcc63051de6acad09c/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=96370780ab54d139fcba44fcc63051de6acad09c", "patch": "@@ -361,7 +361,7 @@ cfg_layout_create_basic_block (void *head, void *end, basic_block after)\n static void\n rtl_delete_block (basic_block b)\n {\n-  rtx insn, end, tmp;\n+  rtx insn, end;\n \n   /* If the head of this block is a CODE_LABEL, then it might be the\n      label for an exception handler which can't be reached.  We need\n@@ -370,18 +370,7 @@ rtl_delete_block (basic_block b)\n   if (LABEL_P (insn))\n     maybe_remove_eh_handler (insn);\n \n-  /* Include any jump table following the basic block.  */\n-  end = BB_END (b);\n-  if (tablejump_p (end, NULL, &tmp))\n-    end = tmp;\n-\n-  /* Include any barriers that may follow the basic block.  */\n-  tmp = next_nonnote_insn (end);\n-  while (tmp && BARRIER_P (tmp))\n-    {\n-      end = tmp;\n-      tmp = next_nonnote_insn (end);\n-    }\n+  end = get_last_bb_insn (b);\n \n   /* Selectively delete the entire chain.  */\n   BB_HEAD (b) = NULL;\n@@ -1704,6 +1693,29 @@ update_br_prob_note (basic_block bb)\n     return;\n   XEXP (note, 0) = GEN_INT (BRANCH_EDGE (bb)->probability);\n }\n+\n+/* Get the last insn associated with block BB (that includes barriers and\n+   tablejumps after BB).  */\n+rtx\n+get_last_bb_insn (basic_block bb)\n+{\n+  rtx tmp;\n+  rtx end = BB_END (bb);\n+\n+  /* Include any jump table following the basic block.  */\n+  if (tablejump_p (end, NULL, &tmp))\n+    end = tmp;\n+\n+  /* Include any barriers that may follow the basic block.  */\n+  tmp = next_nonnote_insn (end);\n+  while (tmp && BARRIER_P (tmp))\n+    {\n+      end = tmp;\n+      tmp = next_nonnote_insn (end);\n+    }\n+\n+  return end;\n+}\n \f\n /* Verify the CFG and RTL consistency common for both underlying RTL and\n    cfglayout RTL."}, {"sha": "3fda0683fac174af87bff32bdeb6ca492e95f273", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96370780ab54d139fcba44fcc63051de6acad09c/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96370780ab54d139fcba44fcc63051de6acad09c/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=96370780ab54d139fcba44fcc63051de6acad09c", "patch": "@@ -3544,18 +3544,22 @@ static basic_block\n create_recovery_block (void)\n {\n   rtx label;\n+  rtx barrier;\n   basic_block rec;\n   \n   added_recovery_block_p = true;\n \n   if (!before_recovery)\n     init_before_recovery ();\n- \n-  label = gen_label_rtx ();\n-  gcc_assert (BARRIER_P (NEXT_INSN (BB_END (before_recovery))));\n-  label = emit_label_after (label, NEXT_INSN (BB_END (before_recovery)));\n \n-  rec = create_basic_block (label, label, before_recovery); \n+  barrier = get_last_bb_insn (before_recovery);\n+  gcc_assert (BARRIER_P (barrier));\n+\n+  label = emit_label_after (gen_label_rtx (), barrier);\n+\n+  rec = create_basic_block (label, label, before_recovery);\n+\n+  /* Recovery block always end with an unconditional jump.  */\n   emit_barrier_after (BB_END (rec));\n \n   if (BB_PARTITION (before_recovery) != BB_UNPARTITIONED)"}, {"sha": "3e2ee9bb27ba8b1b8c16dd5f9802080758afeb06", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96370780ab54d139fcba44fcc63051de6acad09c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96370780ab54d139fcba44fcc63051de6acad09c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=96370780ab54d139fcba44fcc63051de6acad09c", "patch": "@@ -1,3 +1,8 @@\n+2006-11-16  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n+\n+\tPR target/29201\n+\t* gcc.c-torture/compile/pr29201.c: New test for ia64 target.\n+\n 2006-11-15  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* gfortran.dg/import3.f90: Fix error message."}, {"sha": "f0f4c404c4fecbaa3e0d9cd8dfdbb3ab43e78f18", "filename": "gcc/testsuite/gcc.c-torture/compile/pr29201.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96370780ab54d139fcba44fcc63051de6acad09c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr29201.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96370780ab54d139fcba44fcc63051de6acad09c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr29201.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr29201.c?ref=96370780ab54d139fcba44fcc63051de6acad09c", "patch": "@@ -0,0 +1,116 @@\n+/* { dg-do assemble { target ia64-*-* } } */\n+typedef int gint;\n+typedef gint gboolean;\n+typedef unsigned int guint;\n+typedef struct _MetaRectangle MetaRectangle;\n+struct _MetaRectangle\n+{\n+  int x;\n+  int y;\n+};\n+typedef struct _MetaDisplay MetaDisplay;\n+typedef struct _MetaFrame MetaFrame;\n+typedef struct _MetaWindow MetaWindow;\n+typedef struct\n+{\n+  int win_gravity;\n+}\n+XSizeHints;\n+typedef enum\n+{\n+  META_DEBUG_FOCUS = 1 << 0, META_DEBUG_WORKAREA = 1 << 1, META_DEBUG_STACK =\n+    1 << 6, META_DEBUG_WINDOW_OPS = 1 << 7, META_DEBUG_GEOMETRY =\n+    1 << 20, META_DEBUG_EDGE_RESISTANCE = 1 << 21\n+}\n+MetaStackLayer;\n+struct _MetaWindow\n+{\n+  MetaDisplay *display;\n+  MetaFrame *frame;\n+  guint user_has_move_resized:1;\n+  MetaRectangle user_rect;\n+  XSizeHints size_hints;\n+};\n+void meta_window_get_position (MetaWindow * window, int *x, int *y);\n+typedef struct _MetaFrameGeometry MetaFrameGeometry;\n+struct _MetaFrameGeometry\n+{\n+};\n+struct _MetaFrame\n+{\n+  MetaWindow *window;\n+  MetaRectangle rect;\n+  int child_x;\n+  int child_y;\n+};\n+typedef enum\n+{\n+  META_IS_CONFIGURE_REQUEST = 1 << 0, META_DO_GRAVITY_ADJUST =\n+    1 << 3, META_IS_RESIZE_ACTION = 1 << 4\n+}\n+MetaMoveResizeFlags;\n+adjust_for_gravity (MetaWindow * window, MetaFrameGeometry * fgeom,\n+\t\t    gboolean coords_assume_border, int gravity,\n+\t\t    MetaRectangle * rect)\n+{\n+  int ref_x, ref_y;\n+  int child_x, child_y;\n+  int frame_width, frame_height;\n+  switch (gravity)\n+    {\n+    case 1:\n+      ref_x = rect->x;\n+    }\n+  switch (gravity)\n+    {\n+    case 1:\n+      rect->y = ref_y + child_y;\n+    case 2:\n+      rect->x = ref_x - frame_width / 2 + child_x;\n+      break;\n+    case 3:\n+    case 5:\n+    case 6:\n+      rect->x = ref_x - frame_width + child_x;\n+    }\n+}\n+meta_window_move_resize_internal (MetaWindow * window,\n+\t\t\t\t  MetaMoveResizeFlags flags,\n+\t\t\t\t  int resize_gravity, int root_x_nw,\n+\t\t\t\t  int root_y_nw, int w, int h)\n+{\n+  unsigned int mask;\n+  MetaFrameGeometry fgeom;\n+  gboolean need_resize_client = (0);\n+  gboolean is_configure_request;\n+  MetaRectangle new_rect;\n+  MetaRectangle old_rect;\n+  {\n+    adjust_for_gravity (window, window->frame ? &fgeom : ((void *) 0),\n+\t\t\tis_configure_request, window->size_hints.win_gravity,\n+\t\t\t&new_rect);\n+  }\n+  meta_window_constrain (window, window->frame ? &fgeom : ((void *) 0), flags,\n+\t\t\t resize_gravity, &old_rect, &new_rect);\n+  if (mask != 0)\n+    {\n+      {\n+\tmeta_topic_real (META_DEBUG_GEOMETRY,\n+\t\t\t need_resize_client ? \"true\" : \"false\");\n+      }\n+    }\n+  {\n+    window->user_has_move_resized = (!(0));\n+    meta_window_get_position (window, &window->user_rect.x,\n+\t\t\t      &window->user_rect.y);\n+  }\n+}\n+void\n+meta_window_get_position (MetaWindow * window, int *x, int *y)\n+{\n+  if (window->frame)\n+    {\n+      *x = window->frame->rect.x + window->frame->child_x;\n+      *y = window->frame->rect.y + window->frame->child_y;\n+    }\n+}"}]}