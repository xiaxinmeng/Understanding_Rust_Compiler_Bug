{"sha": "868fc62791b6b0f10484cc6fa15f81911418e605", "node_id": "C_kwDOANBUbNoAKDg2OGZjNjI3OTFiNmIwZjEwNDg0Y2M2ZmExNWY4MTkxMTQxOGU2MDU", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@embecosm.com", "date": "2022-11-28T19:36:15Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@embecosm.com", "date": "2022-11-28T19:36:15Z"}, "message": "RISC-V: Avoid redundant sign-extension for SImode SGE, SGEU, SLE, SLEU\n\nWe produce inefficient code for some synthesized SImode conditional set\noperations (i.e. ones that are not directly implemented in hardware) on\nRV64.  For example a piece of C code like this:\n\nint\nsleu (unsigned int x, unsigned int y)\n{\n  return x <= y;\n}\n\ngets compiled (at `-O2') to this:\n\nsleu:\n\tsgtu\ta0,a0,a1\t# 9\t[c=4 l=4]  *sgtu_disi\n\txori\ta0,a0,1\t\t# 10\t[c=4 l=4]  *xorsi3_internal/1\n\tandi\ta0,a0,1\t\t# 16\t[c=4 l=4]  anddi3/1\n\tret\t\t\t# 25\t[c=0 l=4]  simple_return\n\nor (at `-O1') to this:\n\nsleu:\n\tsgtu\ta0,a0,a1\t# 9\t[c=4 l=4]  *sgtu_disi\n\txori\ta0,a0,1\t\t# 10\t[c=4 l=4]  *xorsi3_internal/1\n\tsext.w\ta0,a0\t\t# 16\t[c=4 l=4]  extendsidi2/0\n\tret\t\t\t# 24\t[c=0 l=4]  simple_return\n\nThis is because the middle end expands a SLEU operation missing from\nRISC-V hardware into a sequence of a SImode SGTU operation followed by\nan explicit SImode XORI operation with immediate 1.  And while the SGTU\nmachine instruction (alias SLTU with the input operands swapped) gives a\nproperly sign-extended 32-bit result which is valid both as a SImode or\na DImode operand the middle end does not see that through a SImode XORI\noperation, because we tell the middle end that the RISC-V target (unlike\nMIPS) may hold values in DImode integer registers that are valid for\nSImode operations even if not properly sign-extended.\n\nHowever the RISC-V psABI requires that 32-bit function arguments and\nresults passed in 64-bit integer registers be properly sign-extended, so\nthis is explicitly done at the conclusion of the function.\n\nFix this by making the backend use a sequence of a DImode SGTU operation\nfollowed by a SImode SEQZ operation instead.  The latter operation is\nknown by the middle end to produce a properly sign-extended 32-bit\nresult and therefore combine gets rid of the sign-extension operation\nthat follows and actually folds it into the very same XORI machine\noperation resulting in:\n\nsleu:\n\tsgtu\ta0,a0,a1\t# 9\t[c=4 l=4]  *sgtu_didi\n\txori\ta0,a0,1\t\t# 16\t[c=4 l=4]  xordi3/1\n\tret\t\t\t# 25\t[c=0 l=4]  simple_return\n\ninstead (although the SEQZ alias SLTIU against immediate 1 machine\ninstruction would equally do and is actually retained at `-O0').  This\nis handled analogously for the remaining synthesized operations of this\nkind, i.e. `SLE', `SGEU', and `SGE'.\n\n\tgcc/\n\t* config/riscv/riscv.cc (riscv_emit_int_order_test): Use EQ 0\n\trather that XOR 1 for LE and LEU operations.\n\n\tgcc/testsuite/\n\t* gcc.target/riscv/sge.c: New test.\n\t* gcc.target/riscv/sgeu.c: New test.\n\t* gcc.target/riscv/sle.c: New test.\n\t* gcc.target/riscv/sleu.c: New test.", "tree": {"sha": "f63732da9aaaadb5694341216f5739bfd552ae26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f63732da9aaaadb5694341216f5739bfd552ae26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/868fc62791b6b0f10484cc6fa15f81911418e605", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/868fc62791b6b0f10484cc6fa15f81911418e605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/868fc62791b6b0f10484cc6fa15f81911418e605", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/868fc62791b6b0f10484cc6fa15f81911418e605/comments", "author": {"login": "maciej-w-rozycki", "id": 117297942, "node_id": "U_kgDOBv3TFg", "avatar_url": "https://avatars.githubusercontent.com/u/117297942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maciej-w-rozycki", "html_url": "https://github.com/maciej-w-rozycki", "followers_url": "https://api.github.com/users/maciej-w-rozycki/followers", "following_url": "https://api.github.com/users/maciej-w-rozycki/following{/other_user}", "gists_url": "https://api.github.com/users/maciej-w-rozycki/gists{/gist_id}", "starred_url": "https://api.github.com/users/maciej-w-rozycki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maciej-w-rozycki/subscriptions", "organizations_url": "https://api.github.com/users/maciej-w-rozycki/orgs", "repos_url": "https://api.github.com/users/maciej-w-rozycki/repos", "events_url": "https://api.github.com/users/maciej-w-rozycki/events{/privacy}", "received_events_url": "https://api.github.com/users/maciej-w-rozycki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "maciej-w-rozycki", "id": 117297942, "node_id": "U_kgDOBv3TFg", "avatar_url": "https://avatars.githubusercontent.com/u/117297942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maciej-w-rozycki", "html_url": "https://github.com/maciej-w-rozycki", "followers_url": "https://api.github.com/users/maciej-w-rozycki/followers", "following_url": "https://api.github.com/users/maciej-w-rozycki/following{/other_user}", "gists_url": "https://api.github.com/users/maciej-w-rozycki/gists{/gist_id}", "starred_url": "https://api.github.com/users/maciej-w-rozycki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maciej-w-rozycki/subscriptions", "organizations_url": "https://api.github.com/users/maciej-w-rozycki/orgs", "repos_url": "https://api.github.com/users/maciej-w-rozycki/repos", "events_url": "https://api.github.com/users/maciej-w-rozycki/events{/privacy}", "received_events_url": "https://api.github.com/users/maciej-w-rozycki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07b9bcc1d1484f8f1c850ff14db678fb6b1e4d36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07b9bcc1d1484f8f1c850ff14db678fb6b1e4d36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07b9bcc1d1484f8f1c850ff14db678fb6b1e4d36"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "ab02a81e15258245ea1330287baaa0b8133cc058", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868fc62791b6b0f10484cc6fa15f81911418e605/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868fc62791b6b0f10484cc6fa15f81911418e605/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=868fc62791b6b0f10484cc6fa15f81911418e605", "patch": "@@ -3004,9 +3004,9 @@ riscv_emit_int_order_test (enum rtx_code code, bool *invert_ptr,\n \t}\n       else if (invert_ptr == 0)\n \t{\n-\t  rtx inv_target = riscv_force_binary (GET_MODE (target),\n+\t  rtx inv_target = riscv_force_binary (word_mode,\n \t\t\t\t\t       inv_code, cmp0, cmp1);\n-\t  riscv_emit_binary (XOR, target, inv_target, const1_rtx);\n+\t  riscv_emit_binary (EQ, target, inv_target, const0_rtx);\n \t}\n       else\n \t{"}, {"sha": "5f7e7ae82db0ebcdcd7d882fabc2e7907dd4fa28", "filename": "gcc/testsuite/gcc.target/riscv/sge.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868fc62791b6b0f10484cc6fa15f81911418e605/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fsge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868fc62791b6b0f10484cc6fa15f81911418e605/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fsge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fsge.c?ref=868fc62791b6b0f10484cc6fa15f81911418e605", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target rv64 } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" } } */\n+\n+int\n+sge (int x, int y)\n+{\n+  return x >= y;\n+}\n+\n+/* { dg-final { scan-assembler \"\\\\sxori\\\\sa0,a0,1\\n\\\\sret\\n\" } } */\n+/* { dg-final { scan-assembler-not \"andi|sext\\\\.w\" } } */"}, {"sha": "234b9aa52bd0b93924eaf5cc03ef01f024b9e10e", "filename": "gcc/testsuite/gcc.target/riscv/sgeu.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868fc62791b6b0f10484cc6fa15f81911418e605/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fsgeu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868fc62791b6b0f10484cc6fa15f81911418e605/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fsgeu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fsgeu.c?ref=868fc62791b6b0f10484cc6fa15f81911418e605", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target rv64 } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" } } */\n+\n+int\n+sgeu (unsigned int x, unsigned int y)\n+{\n+  return x >= y;\n+}\n+\n+/* { dg-final { scan-assembler \"\\\\sxori\\\\sa0,a0,1\\n\\\\sret\\n\" } } */\n+/* { dg-final { scan-assembler-not \"andi|sext\\\\.w\" } } */"}, {"sha": "3259c19159880cd9b350f2bcbae8a301409f3cf0", "filename": "gcc/testsuite/gcc.target/riscv/sle.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868fc62791b6b0f10484cc6fa15f81911418e605/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fsle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868fc62791b6b0f10484cc6fa15f81911418e605/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fsle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fsle.c?ref=868fc62791b6b0f10484cc6fa15f81911418e605", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target rv64 } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" } } */\n+\n+int\n+sle (int x, int y)\n+{\n+  return x <= y;\n+}\n+\n+/* { dg-final { scan-assembler \"\\\\sxori\\\\sa0,a0,1\\n\\\\sret\\n\" } } */\n+/* { dg-final { scan-assembler-not \"andi|sext\\\\.w\" } } */"}, {"sha": "301b8c32eb743447368d8cc0446dc09fb7e07561", "filename": "gcc/testsuite/gcc.target/riscv/sleu.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868fc62791b6b0f10484cc6fa15f81911418e605/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fsleu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868fc62791b6b0f10484cc6fa15f81911418e605/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fsleu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fsleu.c?ref=868fc62791b6b0f10484cc6fa15f81911418e605", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target rv64 } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" } } */\n+\n+int\n+sleu (unsigned int x, unsigned int y)\n+{\n+  return x <= y;\n+}\n+\n+/* { dg-final { scan-assembler \"\\\\sxori\\\\sa0,a0,1\\n\\\\sret\\n\" } } */\n+/* { dg-final { scan-assembler-not \"andi|sext\\\\.w\" } } */"}]}