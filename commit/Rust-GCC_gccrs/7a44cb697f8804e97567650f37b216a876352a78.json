{"sha": "7a44cb697f8804e97567650f37b216a876352a78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E0NGNiNjk3Zjg4MDRlOTc1Njc2NTBmMzdiMjE2YTg3NjM1MmE3OA==", "commit": {"author": {"name": "Pascal Obry", "email": "obry@adacore.com", "date": "2011-09-27T09:33:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-27T09:33:30Z"}, "message": "s-taprop.ads (Initialize_Lock): New spec for r/w lock.\n\n2011-09-27  Pascal Obry  <obry@adacore.com>\n\n\t* s-taprop.ads (Initialize_Lock)[RW_Lock]: New spec for r/w lock.\n\t(Finalize_Lock)[RW_Lock]: Likewise.\n\t(Write_Lock)[RW_Lock]: Likewise.\n\t(Unlock)[RW_Lock]: Likewise.\n\t(Read_Lock): Define L as RW_Lock (instead of Lock).\n\t* s-taprop-linux.adb (Initialize_Lock)[RW_Lock]: New\n\troutine for r/w lock.\n\t(Finalize_Lock)[RW_Lock]: Likewise.\n\t(Write_Lock)[RW_Lock]: Likewise.\n\t(Unlock)[RW_Lock]: Likewise.\n\t(Read_Lock): Define L as RW_Lock (instead of Lock).\n\n\t* s-taprop-vxworks.adb, s-taprop-tru64.adb, s-taprop-vms.adb,\n\ts-taprop-mingw.adb, s-taprop-solaris.adb, s-taprop-irix.adb,\n\ts-taprop-hpux-dce.adb, s-taprop-dummy.adb, s-taprop-posix.adb\n\t(Initialize_Lock)[RW_Lock]: Same implementation as corresponding\n\troutine for standard lock.\n\t(Finalize_Lock)[RW_Lock]: Likewise.\n\t(Write_Lock)[RW_Lock]: Likewise.\n\t(Unlock)[RW_Lock]: Likewise.\n\t(Read_Lock): Define L as RW_Lock (instead of Lock).\n\t* s-taprob.ads, s-tpoben.ads (Protection): Add RWL (RW_Lock)\n\tin the record definition.\n\t* s-taprob.adb, s-taproben.adb (Finalize_Protection): Use r/w\n\tlock for 'R' locking policy.\n\t(Initialize_Protection): Likewise.\n\t(Lock): Likewise.\n\t(Lock_Read_Only): Likewise.\n\t(Unlock): Likewise.\n\t* s-taspri-posix.ads (RW_Lock): New type defined as\n\tOS_Interface.pthread_rwlock_t.\n\n\t* s-taspri-vxworks.ads, s-taspri-posix-noaltstack.ads,\n\ts-taspri-mingw.ads, s-taspri-solaris.ads, s-taspri-dummy.ads,\n\ts-taspri-posix.ads, s-taspri-vms.ads, s-taspri-hpux-dce.ads,\n\ts-taspri-tru64.ads (RW_Lock): New type defined as alias to Lock.\n\nFrom-SVN: r179251", "tree": {"sha": "eedc8f468a523f0beb2b503bbe92a69881b03282", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eedc8f468a523f0beb2b503bbe92a69881b03282"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a44cb697f8804e97567650f37b216a876352a78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a44cb697f8804e97567650f37b216a876352a78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a44cb697f8804e97567650f37b216a876352a78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a44cb697f8804e97567650f37b216a876352a78/comments", "author": {"login": "TurboGit", "id": 467069, "node_id": "MDQ6VXNlcjQ2NzA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurboGit", "html_url": "https://github.com/TurboGit", "followers_url": "https://api.github.com/users/TurboGit/followers", "following_url": "https://api.github.com/users/TurboGit/following{/other_user}", "gists_url": "https://api.github.com/users/TurboGit/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurboGit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurboGit/subscriptions", "organizations_url": "https://api.github.com/users/TurboGit/orgs", "repos_url": "https://api.github.com/users/TurboGit/repos", "events_url": "https://api.github.com/users/TurboGit/events{/privacy}", "received_events_url": "https://api.github.com/users/TurboGit/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c173b500b65e7db5317ed9e23a0551cba6b7aa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c173b500b65e7db5317ed9e23a0551cba6b7aa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c173b500b65e7db5317ed9e23a0551cba6b7aa2"}], "stats": {"total": 502, "additions": 462, "deletions": 40}, "files": [{"sha": "e084f06ecb655708ffad7f9cb3e437d5d66c9ef8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -1,3 +1,42 @@\n+2011-09-27  Pascal Obry  <obry@adacore.com>\n+\n+\t* s-taprop.ads (Initialize_Lock)[RW_Lock]: New spec for r/w lock.\n+\t(Finalize_Lock)[RW_Lock]: Likewise.\n+\t(Write_Lock)[RW_Lock]: Likewise.\n+\t(Unlock)[RW_Lock]: Likewise.\n+\t(Read_Lock): Define L as RW_Lock (instead of Lock).\n+\t* s-taprop-linux.adb (Initialize_Lock)[RW_Lock]: New\n+\troutine for r/w lock.\n+\t(Finalize_Lock)[RW_Lock]: Likewise.\n+\t(Write_Lock)[RW_Lock]: Likewise.\n+\t(Unlock)[RW_Lock]: Likewise.\n+\t(Read_Lock): Define L as RW_Lock (instead of Lock).\n+\n+\t* s-taprop-vxworks.adb, s-taprop-tru64.adb, s-taprop-vms.adb,\n+\ts-taprop-mingw.adb, s-taprop-solaris.adb, s-taprop-irix.adb,\n+\ts-taprop-hpux-dce.adb, s-taprop-dummy.adb, s-taprop-posix.adb\n+\t(Initialize_Lock)[RW_Lock]: Same implementation as corresponding\n+\troutine for standard lock.\n+\t(Finalize_Lock)[RW_Lock]: Likewise.\n+\t(Write_Lock)[RW_Lock]: Likewise.\n+\t(Unlock)[RW_Lock]: Likewise.\n+\t(Read_Lock): Define L as RW_Lock (instead of Lock).\n+\t* s-taprob.ads, s-tpoben.ads (Protection): Add RWL (RW_Lock)\n+\tin the record definition.\n+\t* s-taprob.adb, s-taproben.adb (Finalize_Protection): Use r/w\n+\tlock for 'R' locking policy.\n+\t(Initialize_Protection): Likewise.\n+\t(Lock): Likewise.\n+\t(Lock_Read_Only): Likewise.\n+\t(Unlock): Likewise.\n+\t* s-taspri-posix.ads (RW_Lock): New type defined as\n+\tOS_Interface.pthread_rwlock_t.\n+\n+\t* s-taspri-vxworks.ads, s-taspri-posix-noaltstack.ads,\n+\ts-taspri-mingw.ads, s-taspri-solaris.ads, s-taspri-dummy.ads,\n+\ts-taspri-posix.ads, s-taspri-vms.ads, s-taspri-hpux-dce.ads,\n+\ts-taspri-tru64.ads (RW_Lock): New type defined as alias to Lock.\n+\n 2011-09-27  Pascal Obry  <obry@adacore.com>\n \n \t* exp_ch9.adb, s-taspri-posix.ads: Minor reformatting."}, {"sha": "50cafb536c65f2343f30dd97f637ebc09aca7853", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -9896,11 +9896,15 @@ The policy is the same as that of the underlying threads implementation.\n in a pragma @code{Locking_Policy}.  See D.3(4).\n @end cartouche\n @noindent\n-The only implementation defined policy permitted in GNAT is\n-@code{Inheritance_Locking}.  On targets that support this policy, locking\n-is implemented by inheritance, i.e.@: the task owning the lock operates\n+The two implementation defined policies permitted in GNAT are\n+@code{Inheritance_Locking} and  @code{Conccurent_Readers_Locking}.  On\n+targets that support the @code{Inheritance_Locking} policy, locking is\n+implemented by inheritance, i.e.@: the task owning the lock operates\n at a priority equal to the highest priority of any task currently\n-requesting the lock.\n+requesting the lock.  On targets that support the\n+@code{Conccurent_Readers_Locking} policy, locking is implemented with a\n+read/write lock allowing multiple propected object functions to enter\n+concurrently.\n \n @sp 1\n @cartouche"}, {"sha": "5c48a473236c053d81821cf6183e571fda80690c", "filename": "gcc/ada/s-taprob.adb", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprob.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprob.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprob.adb?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -6,8 +6,8 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2010, AdaCore                     --\n+--            Copyright (C) 1991-1994, Florida State University             --\n+--                     Copyright (C) 1995-2011, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -57,7 +57,11 @@ package body System.Tasking.Protected_Objects is\n \n    procedure Finalize_Protection (Object : in out Protection) is\n    begin\n-      Finalize_Lock (Object.L'Unrestricted_Access);\n+      if Locking_Policy = 'R' then\n+         Finalize_Lock (Object.RWL'Unrestricted_Access);\n+      else\n+         Finalize_Lock (Object.L'Unrestricted_Access);\n+      end if;\n    end Finalize_Protection;\n \n    ---------------------------\n@@ -75,7 +79,11 @@ package body System.Tasking.Protected_Objects is\n          Init_Priority  := System.Priority'Last;\n       end if;\n \n-      Initialize_Lock (Init_Priority, Object.L'Access);\n+      if Locking_Policy = 'R' then\n+         Initialize_Lock (Init_Priority, Object.RWL'Access);\n+      else\n+         Initialize_Lock (Init_Priority, Object.L'Access);\n+      end if;\n       Object.Ceiling := System.Any_Priority (Init_Priority);\n       Object.New_Ceiling := System.Any_Priority (Init_Priority);\n       Object.Owner := Null_Task;\n@@ -120,7 +128,11 @@ package body System.Tasking.Protected_Objects is\n          raise Program_Error;\n       end if;\n \n-      Write_Lock (Object.L'Access, Ceiling_Violation);\n+      if Locking_Policy = 'R' then\n+         Write_Lock (Object.RWL'Access, Ceiling_Violation);\n+      else\n+         Write_Lock (Object.L'Access, Ceiling_Violation);\n+      end if;\n \n       if Parameters.Runtime_Traces then\n          Send_Trace_Info (PO_Lock);\n@@ -177,7 +189,11 @@ package body System.Tasking.Protected_Objects is\n          raise Program_Error;\n       end if;\n \n-      Read_Lock (Object.L'Access, Ceiling_Violation);\n+      if Locking_Policy = 'R' then\n+         Read_Lock (Object.RWL'Access, Ceiling_Violation);\n+      else\n+         Write_Lock (Object.L'Access, Ceiling_Violation);\n+      end if;\n \n       if Parameters.Runtime_Traces then\n          Send_Trace_Info (PO_Lock);\n@@ -263,7 +279,11 @@ package body System.Tasking.Protected_Objects is\n          Object.Ceiling := Object.New_Ceiling;\n       end if;\n \n-      Unlock (Object.L'Access);\n+      if Locking_Policy = 'R' then\n+         Unlock (Object.RWL'Access);\n+      else\n+         Unlock (Object.L'Access);\n+      end if;\n \n       if Parameters.Runtime_Traces then\n          Send_Trace_Info (PO_Unlock);"}, {"sha": "de1d0dca6719169eb0f3c86ac90714cea7288358", "filename": "gcc/ada/s-taprob.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprob.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprob.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprob.ads?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -212,6 +212,9 @@ private\n       L : aliased Task_Primitives.Lock;\n       --  Lock used to ensure mutual exclusive access to the protected object\n \n+      RWL : aliased Task_Primitives.RW_Lock;\n+      --  Lock used to support conccurent readers to the protected object\n+\n       Ceiling : System.Any_Priority;\n       --  Ceiling priority associated to the protected object\n "}, {"sha": "f48306611295e0efb995d80ca0bdf37f7cd4b622", "filename": "gcc/ada/s-taprop-dummy.adb", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprop-dummy.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprop-dummy.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-dummy.adb?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -158,6 +158,11 @@ package body System.Task_Primitives.Operations is\n       null;\n    end Finalize_Lock;\n \n+   procedure Finalize_Lock (L : not null access RW_Lock) is\n+   begin\n+      null;\n+   end Finalize_Lock;\n+\n    procedure Finalize_Lock (L : not null access RTS_Lock) is\n    begin\n       null;\n@@ -217,6 +222,14 @@ package body System.Task_Primitives.Operations is\n       null;\n    end Initialize_Lock;\n \n+   procedure Initialize_Lock\n+     (Prio : System.Any_Priority;\n+      L    : not null access RW_Lock)\n+   is\n+   begin\n+      null;\n+   end Initialize_Lock;\n+\n    procedure Initialize_Lock\n      (L : not null access RTS_Lock; Level : Lock_Level) is\n    begin\n@@ -264,7 +277,7 @@ package body System.Task_Primitives.Operations is\n    ---------------\n \n    procedure Read_Lock\n-     (L                 : not null access Lock;\n+     (L                 : not null access RW_Lock;\n       Ceiling_Violation : out Boolean)\n    is\n    begin\n@@ -459,6 +472,11 @@ package body System.Task_Primitives.Operations is\n       null;\n    end Unlock;\n \n+   procedure Unlock (L : not null access RW_Lock) is\n+   begin\n+      null;\n+   end Unlock;\n+\n    procedure Unlock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)\n@@ -501,6 +519,14 @@ package body System.Task_Primitives.Operations is\n       Ceiling_Violation := False;\n    end Write_Lock;\n \n+   procedure Write_Lock\n+     (L                 : not null access RW_Lock;\n+      Ceiling_Violation : out Boolean)\n+   is\n+   begin\n+      Ceiling_Violation := False;\n+   end Write_Lock;\n+\n    procedure Write_Lock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)"}, {"sha": "db1eaf48edfa2f26e53027b2be06605f0cc0be52", "filename": "gcc/ada/s-taprop-hpux-dce.adb", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-hpux-dce.adb?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -253,6 +253,14 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Initialize_Lock;\n \n+   procedure Initialize_Lock\n+     (Prio : System.Any_Priority;\n+      L    : not null access RW_Lock)\n+   is\n+   begin\n+      Initialize_Lock (Prio, Lock (L.all)'Unrestricted_Access);\n+   end Initialize_Lock;\n+\n    procedure Initialize_Lock\n      (L     : not null access RTS_Lock;\n       Level : Lock_Level)\n@@ -293,6 +301,11 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Finalize_Lock;\n \n+   procedure Finalize_Lock (L : not null access RW_Lock) is\n+   begin\n+      Finalize_Lock (Lock (L.all)'Unrestricted_Access);\n+   end Finalize_Lock;\n+\n    procedure Finalize_Lock (L : not null access RTS_Lock) is\n       Result : Interfaces.C.int;\n    begin\n@@ -323,6 +336,14 @@ package body System.Task_Primitives.Operations is\n       Ceiling_Violation := False;\n    end Write_Lock;\n \n+   procedure Write_Lock\n+     (L                 : not null access RW_Lock;\n+      Ceiling_Violation : out Boolean)\n+   is\n+   begin\n+      Write_Lock (Lock (L.all)'Unrestricted_Access, Ceiling_Violation);\n+   end Write_Lock;\n+\n    procedure Write_Lock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)\n@@ -349,7 +370,7 @@ package body System.Task_Primitives.Operations is\n    ---------------\n \n    procedure Read_Lock\n-     (L                 : not null access Lock;\n+     (L                 : not null access RW_Lock;\n       Ceiling_Violation : out Boolean)\n    is\n    begin\n@@ -367,6 +388,11 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Unlock;\n \n+   procedure Unlock (L : not null access RW_Lock) is\n+   begin\n+      Unlock (Lock (L.all)'Unrestricted_Access);\n+   end Unlock;\n+\n    procedure Unlock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)"}, {"sha": "5fd0ca4241ba79d6101ee8eb5002e35d95574c35", "filename": "gcc/ada/s-taprop-irix.adb", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprop-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprop-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-irix.adb?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -267,6 +267,14 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Initialize_Lock;\n \n+   procedure Initialize_Lock\n+     (Prio : System.Any_Priority;\n+      L    : not null access RW_Lock)\n+   is\n+   begin\n+      Initialize_Lock (Prio, Lock (L.all)'Unrestricted_Access);\n+   end Initialize_Lock;\n+\n    procedure Initialize_Lock\n      (L     : not null access RTS_Lock;\n       Level : Lock_Level)\n@@ -318,6 +326,11 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Finalize_Lock;\n \n+   procedure Finalize_Lock (L : not null access RW_Lock) is\n+   begin\n+      Finalize_Lock (Lock (L.all)'Unrestricted_Access);\n+   end Finalize_Lock;\n+\n    procedure Finalize_Lock (L : not null access RTS_Lock) is\n       Result : Interfaces.C.int;\n    begin\n@@ -343,6 +356,13 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0 or else Result = EINVAL);\n    end Write_Lock;\n \n+   procedure Write_Lock\n+     (L : not null access RW_Lock; Ceiling_Violation : out Boolean)\n+   is\n+   begin\n+      Write_Lock (Lock (L.all)'Unrestricted_Access, Ceiling_Violation);\n+   end Write_Lock;\n+\n    procedure Write_Lock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)\n@@ -369,7 +389,7 @@ package body System.Task_Primitives.Operations is\n    ---------------\n \n    procedure Read_Lock\n-     (L : not null access Lock; Ceiling_Violation : out Boolean) is\n+     (L : not null access RW_Lock; Ceiling_Violation : out Boolean) is\n    begin\n       Write_Lock (L, Ceiling_Violation);\n    end Read_Lock;\n@@ -385,6 +405,11 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Unlock;\n \n+   procedure Unlock (L : not null access RW_Lock) is\n+   begin\n+      Unlock (Lock (L.all)'Unrestricted_Access);\n+   end Unlock;\n+\n    procedure Unlock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)"}, {"sha": "415cbdcbf7cd27c5363ad356cd8a3e79a8c415ed", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 64, "deletions": 2, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -276,6 +276,34 @@ package body System.Task_Primitives.Operations is\n       end if;\n    end Initialize_Lock;\n \n+   procedure Initialize_Lock\n+     (Prio : System.Any_Priority;\n+      L    : not null access RW_Lock)\n+   is\n+      pragma Unreferenced (Prio);\n+\n+      RWlock_Attr : aliased pthread_rwlockattr_t;\n+      Result      : Interfaces.C.int;\n+\n+   begin\n+      --  Set the rwlock to prefer writer to avoid writers starvation\n+\n+      Result := pthread_rwlockattr_init (RWlock_Attr'Access);\n+      pragma Assert (Result = 0);\n+\n+      Result := pthread_rwlockattr_setkind_np\n+        (RWlock_Attr'Access, PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP);\n+      pragma Assert (Result = 0);\n+\n+      Result := pthread_rwlock_init (L, RWlock_Attr'Access);\n+\n+      pragma Assert (Result = 0 or else Result = ENOMEM);\n+\n+      if Result = ENOMEM then\n+         raise Storage_Error with \"Failed to allocate a lock\";\n+      end if;\n+   end Initialize_Lock;\n+\n    procedure Initialize_Lock\n      (L     : not null access RTS_Lock;\n       Level : Lock_Level)\n@@ -309,6 +337,13 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Finalize_Lock;\n \n+   procedure Finalize_Lock (L : not null access RW_Lock) is\n+      Result : Interfaces.C.int;\n+   begin\n+      Result := pthread_rwlock_destroy (L);\n+      pragma Assert (Result = 0);\n+   end Finalize_Lock;\n+\n    procedure Finalize_Lock (L : not null access RTS_Lock) is\n       Result : Interfaces.C.int;\n    begin\n@@ -334,6 +369,20 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0 or else Result = EINVAL);\n    end Write_Lock;\n \n+   procedure Write_Lock\n+     (L                 : not null access RW_Lock;\n+      Ceiling_Violation : out Boolean)\n+   is\n+      Result : Interfaces.C.int;\n+   begin\n+      Result := pthread_rwlock_wrlock (L);\n+      Ceiling_Violation := Result = EINVAL;\n+\n+      --  Assume the cause of EINVAL is a priority ceiling violation\n+\n+      pragma Assert (Result = 0 or else Result = EINVAL);\n+   end Write_Lock;\n+\n    procedure Write_Lock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)\n@@ -360,11 +409,17 @@ package body System.Task_Primitives.Operations is\n    ---------------\n \n    procedure Read_Lock\n-     (L                 : not null access Lock;\n+     (L                 : not null access RW_Lock;\n       Ceiling_Violation : out Boolean)\n    is\n+      Result : Interfaces.C.int;\n    begin\n-      Write_Lock (L, Ceiling_Violation);\n+      Result := pthread_rwlock_rdlock (L);\n+      Ceiling_Violation := Result = EINVAL;\n+\n+      --  Assume the cause of EINVAL is a priority ceiling violation\n+\n+      pragma Assert (Result = 0 or else Result = EINVAL);\n    end Read_Lock;\n \n    ------------\n@@ -378,6 +433,13 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Unlock;\n \n+   procedure Unlock (L : not null access RW_Lock) is\n+      Result : Interfaces.C.int;\n+   begin\n+      Result := pthread_rwlock_unlock (L);\n+      pragma Assert (Result = 0);\n+   end Unlock;\n+\n    procedure Unlock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)"}, {"sha": "2b5ca16aaa8931ae073d5d51915986c49c8aca2b", "filename": "gcc/ada/s-taprop-mingw.adb", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprop-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprop-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-mingw.adb?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -414,6 +414,14 @@ package body System.Task_Primitives.Operations is\n       L.Priority := Prio;\n    end Initialize_Lock;\n \n+   procedure Initialize_Lock\n+     (Prio : System.Any_Priority;\n+      L    : not null access RW_Lock)\n+   is\n+   begin\n+      Initialize_Lock (Prio, Lock (L.all)'Unrestricted_Access);\n+   end Initialize_Lock;\n+\n    procedure Initialize_Lock\n      (L : not null access RTS_Lock; Level : Lock_Level)\n    is\n@@ -431,6 +439,11 @@ package body System.Task_Primitives.Operations is\n       DeleteCriticalSection (L.Mutex'Access);\n    end Finalize_Lock;\n \n+   procedure Finalize_Lock (L : not null access RW_Lock) is\n+   begin\n+      Finalize_Lock (Lock (L.all)'Unrestricted_Access);\n+   end Finalize_Lock;\n+\n    procedure Finalize_Lock (L : not null access RTS_Lock) is\n    begin\n       DeleteCriticalSection (L);\n@@ -455,6 +468,12 @@ package body System.Task_Primitives.Operations is\n       Ceiling_Violation := False;\n    end Write_Lock;\n \n+   procedure Write_Lock\n+     (L : not null access RW_Lock; Ceiling_Violation : out Boolean) is\n+   begin\n+      Write_Lock (Lock (L.all)'Unrestricted_Access, Ceiling_Violation);\n+   end Write_Lock;\n+\n    procedure Write_Lock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)\n@@ -477,7 +496,7 @@ package body System.Task_Primitives.Operations is\n    ---------------\n \n    procedure Read_Lock\n-     (L : not null access Lock; Ceiling_Violation : out Boolean) is\n+     (L : not null access RW_Lock; Ceiling_Violation : out Boolean) is\n    begin\n       Write_Lock (L, Ceiling_Violation);\n    end Read_Lock;\n@@ -491,6 +510,11 @@ package body System.Task_Primitives.Operations is\n       LeaveCriticalSection (L.Mutex'Access);\n    end Unlock;\n \n+   procedure Unlock (L : not null access RW_Lock) is\n+   begin\n+      Unlock (Lock (L.all)'Unrestricted_Access);\n+   end Unlock;\n+\n    procedure Unlock\n      (L : not null access RTS_Lock; Global_Lock : Boolean := False) is\n    begin"}, {"sha": "f70ae8d70d5ecb45ddccdf38a38415b978add7f8", "filename": "gcc/ada/s-taprop-posix.adb", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprop-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprop-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-posix.adb?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -322,6 +322,14 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Initialize_Lock;\n \n+   procedure Initialize_Lock\n+     (Prio : System.Any_Priority;\n+      L    : not null access RW_Lock)\n+   is\n+   begin\n+      Initialize_Lock (Prio, Lock (L.all)'Unrestricted_Access);\n+   end Initialize_Lock;\n+\n    procedure Initialize_Lock\n      (L : not null access RTS_Lock; Level : Lock_Level)\n    is\n@@ -376,6 +384,11 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Finalize_Lock;\n \n+   procedure Finalize_Lock (L : not null access RW_Lock) is\n+   begin\n+      Finalize_Lock (Lock (L.all)'Unrestricted_Access);\n+   end Finalize_Lock;\n+\n    procedure Finalize_Lock (L : not null access RTS_Lock) is\n       Result : Interfaces.C.int;\n    begin\n@@ -401,6 +414,13 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0 or else Result = EINVAL);\n    end Write_Lock;\n \n+   procedure Write_Lock\n+     (L : not null access RW_Lock; Ceiling_Violation : out Boolean)\n+   is\n+   begin\n+      Write_Lock (Lock (L.all)'Unrestricted_Access, Ceiling_Violation);\n+   end Write_Lock;\n+\n    procedure Write_Lock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)\n@@ -427,7 +447,7 @@ package body System.Task_Primitives.Operations is\n    ---------------\n \n    procedure Read_Lock\n-     (L : not null access Lock; Ceiling_Violation : out Boolean) is\n+     (L : not null access RW_Lock; Ceiling_Violation : out Boolean) is\n    begin\n       Write_Lock (L, Ceiling_Violation);\n    end Read_Lock;\n@@ -443,6 +463,11 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Unlock;\n \n+   procedure Unlock (L : not null access RW_Lock) is\n+   begin\n+      Unlock (Lock (L.all)'Unrestricted_Access);\n+   end Unlock;\n+\n    procedure Unlock\n      (L : not null access RTS_Lock; Global_Lock : Boolean := False)\n    is"}, {"sha": "17fb955e9fd463fb28206ca7c9f7eb54df2fd57f", "filename": "gcc/ada/s-taprop-solaris.adb", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprop-solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprop-solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-solaris.adb?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -563,6 +563,14 @@ package body System.Task_Primitives.Operations is\n       end if;\n    end Initialize_Lock;\n \n+   procedure Initialize_Lock\n+     (Prio : System.Any_Priority;\n+      L    : not null access RW_Lock)\n+   is\n+   begin\n+      Initialize_Lock (Prio, Lock (L.all)'Unrestricted_Access);\n+   end Initialize_Lock;\n+\n    procedure Initialize_Lock\n      (L     : not null access RTS_Lock;\n       Level : Lock_Level)\n@@ -592,6 +600,11 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Finalize_Lock;\n \n+   procedure Finalize_Lock (L : not null access RW_Lock) is\n+   begin\n+      Finalize_Lock (Lock (L.all)'Unrestricted_Access);\n+   end Finalize_Lock;\n+\n    procedure Finalize_Lock (L : not null access RTS_Lock) is\n       Result : Interfaces.C.int;\n    begin\n@@ -646,6 +659,14 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Record_Lock (Lock_Ptr (L)));\n    end Write_Lock;\n \n+   procedure Write_Lock\n+     (L                 : not null access RW_Lock;\n+      Ceiling_Violation : out Boolean)\n+   is\n+   begin\n+      Write_Lock (Lock (L.all)'Unrestricted_Access, Ceiling_Violation);\n+   end Write_Lock;\n+\n    procedure Write_Lock\n      (L          : not null access RTS_Lock;\n      Global_Lock : Boolean := False)\n@@ -676,7 +697,7 @@ package body System.Task_Primitives.Operations is\n    ---------------\n \n    procedure Read_Lock\n-     (L                 : not null access Lock;\n+     (L                 : not null access RW_Lock;\n       Ceiling_Violation : out Boolean) is\n    begin\n       Write_Lock (L, Ceiling_Violation);\n@@ -710,6 +731,11 @@ package body System.Task_Primitives.Operations is\n       end if;\n    end Unlock;\n \n+   procedure Unlock (L : not null access RW_Lock) is\n+   begin\n+      Unlock (Lock (L.all)'Unrestricted_Access);\n+   end Unlock;\n+\n    procedure Unlock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)"}, {"sha": "28dabc5581ce8db30621705e0d6bb5e1c3956d90", "filename": "gcc/ada/s-taprop-tru64.adb", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprop-tru64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprop-tru64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-tru64.adb?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -265,6 +265,14 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Initialize_Lock;\n \n+   procedure Initialize_Lock\n+     (Prio : System.Any_Priority;\n+      L    : not null access RW_Lock)\n+   is\n+   begin\n+      Initialize_Lock (Prio, Lock (L.all)'Unrestricted_Access);\n+   end Initialize_Lock;\n+\n    procedure Initialize_Lock\n      (L     : not null access RTS_Lock;\n       Level : Lock_Level)\n@@ -305,6 +313,11 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Finalize_Lock;\n \n+   procedure Finalize_Lock (L : not null access RW_Lock) is\n+   begin\n+      Finalize_Lock (Lock (L.all)'Unrestricted_Access);\n+   end Finalize_Lock;\n+\n    procedure Finalize_Lock (L : not null access RTS_Lock) is\n       Result : Interfaces.C.int;\n    begin\n@@ -349,6 +362,14 @@ package body System.Task_Primitives.Operations is\n       Ceiling_Violation := False;\n    end Write_Lock;\n \n+   procedure Write_Lock\n+     (L                 : not null access RW_Lock;\n+      Ceiling_Violation : out Boolean)\n+   is\n+   begin\n+      Write_Lock (Lock (L.all)'Unrestricted_Access, Ceiling_Violation);\n+   end Write_Lock;\n+\n    procedure Write_Lock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)\n@@ -375,7 +396,7 @@ package body System.Task_Primitives.Operations is\n    ---------------\n \n    procedure Read_Lock\n-     (L                 : not null access Lock;\n+     (L                 : not null access RW_Lock;\n       Ceiling_Violation : out Boolean)\n    is\n    begin\n@@ -393,6 +414,11 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Unlock;\n \n+   procedure Unlock (L : not null access RW_Lock) is\n+   begin\n+      Unlock (Lock (L.all)'Unrestricted_Access);\n+   end Unlock;\n+\n    procedure Unlock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)"}, {"sha": "a2b1d802866396f948f9b7f3f9269f6ccba9eddf", "filename": "gcc/ada/s-taprop-vms.adb", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprop-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprop-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vms.adb?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -225,6 +225,13 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Initialize_Lock;\n \n+   procedure Initialize_Lock\n+     (Prio : System.Any_Priority;\n+      L    : not null access RW_Lock) is\n+   begin\n+      Initialize_Lock (Prio, Lock (L.all)'Unrestricted_Access);\n+   end Initialize_Lock;\n+\n    procedure Initialize_Lock\n      (L     : not null access RTS_Lock;\n       Level : Lock_Level)\n@@ -278,6 +285,11 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Finalize_Lock;\n \n+   procedure Finalize_Lock (L : not null access RW_Lock) is\n+   begin\n+      Finalize_Lock (Lock (L.all)'Unrestricted_Access);\n+   end Finalize_Lock;\n+\n    procedure Finalize_Lock (L : not null access RTS_Lock) is\n       Result : Interfaces.C.int;\n    begin\n@@ -319,6 +331,14 @@ package body System.Task_Primitives.Operations is\n --      Set_Priority (Self_ID, System.Any_Priority (L.Prio));\n    end Write_Lock;\n \n+   procedure Write_Lock\n+     (L                 : not null access RW_Lock;\n+      Ceiling_Violation : out Boolean)\n+   is\n+   begin\n+      Write_Lock (Lock (L.all)'Unrestricted_Access, Ceiling_Violation);\n+   end Write_Lock;\n+\n    procedure Write_Lock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)\n@@ -345,7 +365,7 @@ package body System.Task_Primitives.Operations is\n    ---------------\n \n    procedure Read_Lock\n-     (L                 : not null access Lock;\n+     (L                 : not null access RW_Lock;\n       Ceiling_Violation : out Boolean)\n    is\n    begin\n@@ -363,6 +383,11 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Unlock;\n \n+   procedure Unlock (L : not null access RW_Lock) is\n+   begin\n+      Unlock (Lock (L.all)'Unrestricted_Access);\n+   end Unlock;\n+\n    procedure Unlock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)"}, {"sha": "2faee8cfcb7dba173ef32ed6436f684925d74ed6", "filename": "gcc/ada/s-taprop-vxworks.adb", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprop-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprop-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vxworks.adb?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -308,6 +308,14 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (L.Mutex /= 0);\n    end Initialize_Lock;\n \n+   procedure Initialize_Lock\n+     (Prio : System.Any_Priority;\n+      L    : not null access RW_Lock)\n+   is\n+   begin\n+      Initialize_Lock (Prio, Lock (L.all)'Unrestricted_Access);\n+   end Initialize_Lock;\n+\n    procedure Initialize_Lock\n      (L     : not null access RTS_Lock;\n       Level : Lock_Level)\n@@ -331,6 +339,11 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Finalize_Lock;\n \n+   procedure Finalize_Lock (L : not null access RW_Lock) is\n+   begin\n+      Finalize_Lock (Lock (L.all)'Unrestricted_Access);\n+   end Finalize_Lock;\n+\n    procedure Finalize_Lock (L : not null access RTS_Lock) is\n       Result : int;\n    begin\n@@ -362,6 +375,14 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Write_Lock;\n \n+   procedure Write_Lock\n+     (L                 : not null access RW_Lock;\n+      Ceiling_Violation : out Boolean)\n+   is\n+   begin\n+      Write_Lock (Lock (L.all)'Unrestricted_Access, Ceiling_Violation);\n+   end Write_Lock;\n+\n    procedure Write_Lock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)\n@@ -388,7 +409,7 @@ package body System.Task_Primitives.Operations is\n    ---------------\n \n    procedure Read_Lock\n-     (L                 : not null access Lock;\n+     (L                 : not null access RW_Lock;\n       Ceiling_Violation : out Boolean)\n    is\n    begin\n@@ -406,6 +427,11 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Unlock;\n \n+   procedure Unlock (L : not null access RW_Lock) is\n+   begin\n+      Unlock (Lock (L.all)'Unrestricted_Access);\n+   end Unlock;\n+\n    procedure Unlock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)"}, {"sha": "a25c8bf979e02447aee8e704dca06d7b79791e41", "filename": "gcc/ada/s-taprop.ads", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taprop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop.ads?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -148,6 +148,9 @@ package System.Task_Primitives.Operations is\n    procedure Initialize_Lock\n      (Prio : System.Any_Priority;\n       L    : not null access Lock);\n+   procedure Initialize_Lock\n+     (Prio : System.Any_Priority;\n+      L    : not null access RW_Lock);\n    procedure Initialize_Lock\n      (L     : not null access RTS_Lock;\n       Level : Lock_Level);\n@@ -173,6 +176,7 @@ package System.Task_Primitives.Operations is\n    --  These operations raise Storage_Error if a lack of storage is detected\n \n    procedure Finalize_Lock (L : not null access Lock);\n+   procedure Finalize_Lock (L : not null access RW_Lock);\n    procedure Finalize_Lock (L : not null access RTS_Lock);\n    pragma Inline (Finalize_Lock);\n    --  Finalize a lock object, freeing any resources allocated by the\n@@ -181,6 +185,9 @@ package System.Task_Primitives.Operations is\n    procedure Write_Lock\n      (L                 : not null access Lock;\n       Ceiling_Violation : out Boolean);\n+   procedure Write_Lock\n+     (L                 : not null access RW_Lock;\n+      Ceiling_Violation : out Boolean);\n    procedure Write_Lock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False);\n@@ -210,7 +217,7 @@ package System.Task_Primitives.Operations is\n    --  per-task lock is implicit in Exit_Task.\n \n    procedure Read_Lock\n-     (L                 : not null access Lock;\n+     (L                 : not null access RW_Lock;\n       Ceiling_Violation : out Boolean);\n    pragma Inline (Read_Lock);\n    --  Lock a lock object for read access. After this operation returns,\n@@ -235,6 +242,8 @@ package System.Task_Primitives.Operations is\n \n    procedure Unlock\n      (L : not null access Lock);\n+   procedure Unlock\n+     (L : not null access RW_Lock);\n    procedure Unlock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False);"}, {"sha": "3a6b46caf395e1c04f2a093f38e2ea63cc1b68ca", "filename": "gcc/ada/s-taspri-dummy.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taspri-dummy.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taspri-dummy.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-dummy.ads?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1991-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1991-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -40,6 +40,8 @@ package System.Task_Primitives is\n \n    type Lock is new Integer;\n \n+   type RW_Lock is new Integer;\n+\n    type RTS_Lock is new Integer;\n \n    type Suspension_Object is new Integer;"}, {"sha": "aaec48b0a36f40dedc19d4a668ae8f6ec04ab115", "filename": "gcc/ada/s-taspri-hpux-dce.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taspri-hpux-dce.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taspri-hpux-dce.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-hpux-dce.ads?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1991-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1991-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -43,6 +43,7 @@ package System.Task_Primitives is\n    pragma Preelaborate;\n \n    type Lock is limited private;\n+   type RW_Lock is limited private;\n    --  Should be used for implementation of protected objects\n \n    type RTS_Lock is limited private;\n@@ -81,6 +82,8 @@ private\n       Owner_Priority : Integer;\n    end record;\n \n+   type RW_Lock is new Lock;\n+\n    type RTS_Lock is new System.OS_Interface.pthread_mutex_t;\n \n    type Suspension_Object is record"}, {"sha": "0fd185c21c5e2221bd3d4d0e112e3738ef99eeef", "filename": "gcc/ada/s-taspri-mingw.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taspri-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taspri-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-mingw.ads?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1991-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1991-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,6 +42,7 @@ package System.Task_Primitives is\n    pragma Preelaborate;\n \n    type Lock is limited private;\n+   type RW_Lock is limited private;\n    --  Should be used for implementation of protected objects\n \n    type RTS_Lock is limited private;\n@@ -81,6 +82,8 @@ private\n       Owner_Priority : Integer;\n    end record;\n \n+   type RW_Lock is new Lock;\n+\n    type Condition_Variable is new System.Win32.HANDLE;\n \n    type RTS_Lock is new System.OS_Interface.CRITICAL_SECTION;"}, {"sha": "22c2b7bf502c67f9a0f318e0c074f3f1c41c77e1", "filename": "gcc/ada/s-taspri-posix-noaltstack.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taspri-posix-noaltstack.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taspri-posix-noaltstack.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-posix-noaltstack.ads?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2010, AdaCore                     --\n+--                     Copyright (C) 1995-2011, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -45,6 +45,7 @@ package System.Task_Primitives is\n    pragma Preelaborate;\n \n    type Lock is limited private;\n+   type RW_Lock is limited private;\n    --  Should be used for implementation of protected objects\n \n    type RTS_Lock is limited private;\n@@ -79,6 +80,7 @@ package System.Task_Primitives is\n private\n \n    type Lock is new System.OS_Interface.pthread_mutex_t;\n+   type RW_Lock is new Lock;\n    type RTS_Lock is new System.OS_Interface.pthread_mutex_t;\n \n    type Suspension_Object is record"}, {"sha": "f9205d82c712172647b54bb271ca139791e65336", "filename": "gcc/ada/s-taspri-posix.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taspri-posix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taspri-posix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-posix.ads?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -44,6 +44,7 @@ package System.Task_Primitives is\n    pragma Preelaborate;\n \n    type Lock is limited private;\n+   type RW_Lock is limited private;\n    --  Should be used for implementation of protected objects\n \n    type RTS_Lock is limited private;\n@@ -78,6 +79,7 @@ package System.Task_Primitives is\n private\n \n    type Lock is new System.OS_Interface.pthread_mutex_t;\n+   type RW_Lock is new System.OS_Interface.pthread_rwlock_t;\n    type RTS_Lock is new System.OS_Interface.pthread_mutex_t;\n \n    type Suspension_Object is record"}, {"sha": "d5d87e7e0101bed11d4833d3afe51c7b9098674c", "filename": "gcc/ada/s-taspri-solaris.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taspri-solaris.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taspri-solaris.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-solaris.ads?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -46,6 +46,7 @@ package System.Task_Primitives is\n \n    type Lock is limited private;\n    type Lock_Ptr is access all Lock;\n+   type RW_Lock is limited private;\n    --  Should be used for implementation of protected objects\n \n    type RTS_Lock is limited private;\n@@ -107,6 +108,8 @@ private\n       Frozen         : Boolean := False;\n    end record;\n \n+   type RW_Lock is new Lock;\n+\n    type RTS_Lock is new Lock;\n \n    type Suspension_Object is record"}, {"sha": "1ccde3a3cf7ba0b6eadb3453c336f433d7a8c888", "filename": "gcc/ada/s-taspri-tru64.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taspri-tru64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taspri-tru64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-tru64.ads?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1991-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1991-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -45,6 +45,7 @@ package System.Task_Primitives is\n    pragma Preelaborate;\n \n    type Lock is limited private;\n+   type RW_Lock is limited private;\n    --  Should be used for implementation of protected objects\n \n    type RTS_Lock is limited private;\n@@ -82,6 +83,8 @@ private\n       Ceiling : Interfaces.C.int;\n    end record;\n \n+   type RW_Lock is new Lock;\n+\n    type RTS_Lock is new System.OS_Interface.pthread_mutex_t;\n \n    type Suspension_Object is record"}, {"sha": "d0cc429d7e455f35b1ed67b5411d11db33b82087", "filename": "gcc/ada/s-taspri-vms.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taspri-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taspri-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-vms.ads?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -46,6 +46,7 @@ package System.Task_Primitives is\n    pragma Preelaborate;\n \n    type Lock is limited private;\n+   type RW_Lock is limited private;\n    --  Should be used for implementation of protected objects\n \n    type RTS_Lock is limited private;\n@@ -84,6 +85,8 @@ private\n       Prio_Save : Interfaces.C.int;\n    end record;\n \n+   type RW_Lock is new Lock;\n+\n    type RTS_Lock is new System.OS_Interface.pthread_mutex_t;\n \n    type Suspension_Object is record"}, {"sha": "d1d676bf0c33d596430e6edad4822086c43f9af4", "filename": "gcc/ada/s-taspri-vxworks.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taspri-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-taspri-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-vxworks.ads?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 2001-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -41,6 +41,7 @@ package System.Task_Primitives is\n    pragma Preelaborate;\n \n    type Lock is limited private;\n+   type RW_Lock is limited private;\n    --  Should be used for implementation of protected objects\n \n    type RTS_Lock is limited private;\n@@ -84,6 +85,8 @@ private\n       --  Priority ceiling of lock\n    end record;\n \n+   type RW_Lock is new Lock;\n+\n    type RTS_Lock is new Lock;\n \n    type Suspension_Object is record"}, {"sha": "5c1ebe725818fd996b4585aa3893e500a79adef8", "filename": "gcc/ada/s-tpoben.adb", "status": "modified", "additions": 40, "deletions": 9, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-tpoben.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-tpoben.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpoben.adb?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -88,7 +88,11 @@ package body System.Tasking.Protected_Objects.Entries is\n          return;\n       end if;\n \n-      STPO.Write_Lock (Object.L'Unrestricted_Access, Ceiling_Violation);\n+      if Locking_Policy = 'R' then\n+         STPO.Write_Lock (Object.RWL'Unrestricted_Access, Ceiling_Violation);\n+      else\n+         STPO.Write_Lock (Object.L'Unrestricted_Access, Ceiling_Violation);\n+      end if;\n \n       if Single_Lock then\n          Lock_RTS;\n@@ -109,7 +113,12 @@ package body System.Tasking.Protected_Objects.Entries is\n             Unlock_RTS;\n          end if;\n \n-         STPO.Write_Lock (Object.L'Unrestricted_Access, Ceiling_Violation);\n+         if Locking_Policy = 'R' then\n+            STPO.Write_Lock\n+              (Object.RWL'Unrestricted_Access, Ceiling_Violation);\n+         else\n+            STPO.Write_Lock (Object.L'Unrestricted_Access, Ceiling_Violation);\n+         end if;\n \n          if Ceiling_Violation then\n             raise Program_Error with \"Ceiling Violation\";\n@@ -149,9 +158,13 @@ package body System.Tasking.Protected_Objects.Entries is\n          Unlock_RTS;\n       end if;\n \n-      STPO.Unlock (Object.L'Unrestricted_Access);\n-\n-      STPO.Finalize_Lock (Object.L'Unrestricted_Access);\n+      if Locking_Policy = 'R' then\n+         STPO.Unlock (Object.RWL'Unrestricted_Access);\n+         STPO.Finalize_Lock (Object.RWL'Unrestricted_Access);\n+      else\n+         STPO.Unlock (Object.L'Unrestricted_Access);\n+         STPO.Finalize_Lock (Object.L'Unrestricted_Access);\n+      end if;\n    end Finalize;\n \n    ----------------------\n@@ -234,7 +247,13 @@ package body System.Tasking.Protected_Objects.Entries is\n       --  pragma Assert (Self_Id.Deferral_Level = 0);\n \n       Initialization.Defer_Abort_Nestable (Self_ID);\n-      Initialize_Lock (Init_Priority, Object.L'Access);\n+\n+      if Locking_Policy = 'R' then\n+         Initialize_Lock (Init_Priority, Object.RWL'Access);\n+      else\n+         Initialize_Lock (Init_Priority, Object.L'Access);\n+      end if;\n+\n       Initialization.Undefer_Abort_Nestable (Self_ID);\n \n       Object.Ceiling          := System.Any_Priority (Init_Priority);\n@@ -310,7 +329,11 @@ package body System.Tasking.Protected_Objects.Entries is\n         (STPO.Self.Deferral_Level > 0\n           or else not Restrictions.Abort_Allowed);\n \n-      Write_Lock (Object.L'Access, Ceiling_Violation);\n+      if Locking_Policy = 'R' then\n+         Write_Lock (Object.RWL'Access, Ceiling_Violation);\n+      else\n+         Write_Lock (Object.L'Access, Ceiling_Violation);\n+      end if;\n \n       --  We are entering in a protected action, so that we increase the\n       --  protected object nesting level (if pragma Detect_Blocking is\n@@ -364,7 +387,11 @@ package body System.Tasking.Protected_Objects.Entries is\n          raise Program_Error;\n       end if;\n \n-      Read_Lock (Object.L'Access, Ceiling_Violation);\n+      if Locking_Policy = 'R' then\n+         Read_Lock (Object.RWL'Access, Ceiling_Violation);\n+      else\n+         Write_Lock (Object.L'Access, Ceiling_Violation);\n+      end if;\n \n       if Ceiling_Violation then\n          raise Program_Error with \"Ceiling Violation\";\n@@ -460,7 +487,11 @@ package body System.Tasking.Protected_Objects.Entries is\n          Object.Ceiling := Object.New_Ceiling;\n       end if;\n \n-      Unlock (Object.L'Access);\n+      if Locking_Policy = 'R' then\n+         Unlock (Object.RWL'Access);\n+      else\n+         Unlock (Object.L'Access);\n+      end if;\n    end Unlock_Entries;\n \n end System.Tasking.Protected_Objects.Entries;"}, {"sha": "f0684113f200c87af4346bd9381be5185ba6a314", "filename": "gcc/ada/s-tpoben.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-tpoben.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a44cb697f8804e97567650f37b216a876352a78/gcc%2Fada%2Fs-tpoben.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpoben.ads?ref=7a44cb697f8804e97567650f37b216a876352a78", "patch": "@@ -76,7 +76,8 @@ package System.Tasking.Protected_Objects.Entries is\n    type Protection_Entries (Num_Entries : Protected_Entry_Index) is new\n      Ada.Finalization.Limited_Controlled\n    with record\n-      L                 : aliased Task_Primitives.Lock;\n+      L   : aliased Task_Primitives.Lock;\n+      RWL : aliased Task_Primitives.RW_Lock;\n       --  The underlying lock associated with a Protection_Entries.\n       --  Note that you should never (un)lock Object.L directly, but instead\n       --  use Lock_Entries/Unlock_Entries."}]}