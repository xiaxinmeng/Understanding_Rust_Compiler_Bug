{"sha": "64a63cd58bbe195dfa0041d84efbb7062d649b35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRhNjNjZDU4YmJlMTk1ZGZhMDA0MWQ4NGVmYmI3MDYyZDY0OWIzNQ==", "commit": {"author": {"name": "Pascal Obry", "email": "obry@adacore.com", "date": "2011-09-27T09:45:00Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-27T09:45:00Z"}, "message": "s-osinte-hpux.ads, [...]: Revert previous changes.\n\n2011-09-27  Pascal Obry  <obry@adacore.com>\n\n\t* s-osinte-hpux.ads, s-taprop-vxworks.adb, s-taspri-vxworks.ads,\n\ts-taprop-tru64.adb, s-osinte-aix.ads, s-taspri-posix-noaltstack.ads,\n\ts-taspri-mingw.ads, s-taprop-vms.adb, s-tpoben.adb, s-tpoben.ads,\n\ts-taprop-mingw.adb, s-taprob.adb, s-taprob.ads,\n\ts-osinte-solaris-posix.ads, s-taprop-solaris.adb, s-taspri-solaris.ads,\n\ts-osinte-irix.ads, s-taprop-irix.adb, s-osinte-darwin.ads,\n\ts-taspri-dummy.ads, s-taspri-posix.ads, s-taprop.ads,\n\ts-taspri-vms.ads, s-osinte-freebsd.ads, s-taprop-hpux-dce.adb,\n\ts-taspri-hpux-dce.ads, s-taspri-tru64.ads, s-taprop-dummy.adb,\n\ts-taprop-posix.adb: Revert previous changes.\n\t(Lock): Now a record containing the two possible lock\n\t(mutex and read/write) defined in OS_Interface.\n\t* s-taprop-linux.adb (Finalize_Protection): Use r/w lock for\n\t'R' locking policy.\n\t(Initialize_Protection): Likewise.\n\t(Lock): Likewise.\n\t(Lock_Read_Only): Likewise.\n\t(Unlock): Likewise.\n\nFrom-SVN: r179253", "tree": {"sha": "e2a86a2cd807af9805a9f75b43e6ab06bf02771c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2a86a2cd807af9805a9f75b43e6ab06bf02771c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64a63cd58bbe195dfa0041d84efbb7062d649b35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a63cd58bbe195dfa0041d84efbb7062d649b35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64a63cd58bbe195dfa0041d84efbb7062d649b35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a63cd58bbe195dfa0041d84efbb7062d649b35/comments", "author": {"login": "TurboGit", "id": 467069, "node_id": "MDQ6VXNlcjQ2NzA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurboGit", "html_url": "https://github.com/TurboGit", "followers_url": "https://api.github.com/users/TurboGit/followers", "following_url": "https://api.github.com/users/TurboGit/following{/other_user}", "gists_url": "https://api.github.com/users/TurboGit/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurboGit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurboGit/subscriptions", "organizations_url": "https://api.github.com/users/TurboGit/orgs", "repos_url": "https://api.github.com/users/TurboGit/repos", "events_url": "https://api.github.com/users/TurboGit/events{/privacy}", "received_events_url": "https://api.github.com/users/TurboGit/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f672a756b3c82462fd4b26860a4f916218da64b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f672a756b3c82462fd4b26860a4f916218da64b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f672a756b3c82462fd4b26860a4f916218da64b9"}], "stats": {"total": 565, "additions": 112, "deletions": 453}, "files": [{"sha": "4f496a84065ae60c6011f488aff757036a597139", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -1,3 +1,24 @@\n+2011-09-27  Pascal Obry  <obry@adacore.com>\n+\n+\t* s-osinte-hpux.ads, s-taprop-vxworks.adb, s-taspri-vxworks.ads,\n+\ts-taprop-tru64.adb, s-osinte-aix.ads, s-taspri-posix-noaltstack.ads,\n+\ts-taspri-mingw.ads, s-taprop-vms.adb, s-tpoben.adb, s-tpoben.ads,\n+\ts-taprop-mingw.adb, s-taprob.adb, s-taprob.ads,\n+\ts-osinte-solaris-posix.ads, s-taprop-solaris.adb, s-taspri-solaris.ads,\n+\ts-osinte-irix.ads, s-taprop-irix.adb, s-osinte-darwin.ads,\n+\ts-taspri-dummy.ads, s-taspri-posix.ads, s-taprop.ads,\n+\ts-taspri-vms.ads, s-osinte-freebsd.ads, s-taprop-hpux-dce.adb,\n+\ts-taspri-hpux-dce.ads, s-taspri-tru64.ads, s-taprop-dummy.adb,\n+\ts-taprop-posix.adb: Revert previous changes.\n+\t(Lock): Now a record containing the two possible lock\n+\t(mutex and read/write) defined in OS_Interface.\n+\t* s-taprop-linux.adb (Finalize_Protection): Use r/w lock for\n+\t'R' locking policy.\n+\t(Initialize_Protection): Likewise.\n+\t(Lock): Likewise.\n+\t(Lock_Read_Only): Likewise.\n+\t(Unlock): Likewise.\n+\n 2011-09-27  Pascal Obry  <obry@adacore.com>\n \n \t* s-taspri-posix-noaltstack.ads (RW_Lock): This type is now defined as"}, {"sha": "586d42f8f0a799b14996b2aa21aad5a20667bc5d", "filename": "gcc/ada/s-osinte-aix.ads", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-osinte-aix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-osinte-aix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-aix.ads?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -276,14 +276,6 @@ package System.OS_Interface is\n    PTHREAD_SCOPE_PROCESS : constant := 1;\n    PTHREAD_SCOPE_SYSTEM  : constant := 0;\n \n-   --  Read/Write lock not supported on AIX. To add support both types\n-   --  pthread_rwlock_t and pthread_rwlockattr_t must properly be defined\n-   --  with the associated routines pthread_rwlock_[init/destroy] and\n-   --  pthread_rwlock_[rdlock/wrlock/unlock].\n-\n-   subtype pthread_rwlock_t     is pthread_mutex_t;\n-   subtype pthread_rwlockattr_t is pthread_mutexattr_t;\n-\n    -----------\n    -- Stack --\n    -----------"}, {"sha": "2bd15a8b211abc3e6b910bcd771c6b8629f32108", "filename": "gcc/ada/s-osinte-darwin.ads", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-osinte-darwin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-osinte-darwin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-darwin.ads?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -256,14 +256,6 @@ package System.OS_Interface is\n    PTHREAD_SCOPE_PROCESS : constant := 2;\n    PTHREAD_SCOPE_SYSTEM  : constant := 1;\n \n-   --  Read/Write lock not supported on Darwin. To add support both types\n-   --  pthread_rwlock_t and pthread_rwlockattr_t must properly be defined\n-   --  with the associated routines pthread_rwlock_[init/destroy] and\n-   --  pthread_rwlock_[rdlock/wrlock/unlock].\n-\n-   subtype pthread_rwlock_t     is pthread_mutex_t;\n-   subtype pthread_rwlockattr_t is pthread_mutexattr_t;\n-\n    -----------\n    -- Stack --\n    -----------"}, {"sha": "5c46c29b983a0f8895170b2314d08f824b97ec74", "filename": "gcc/ada/s-osinte-freebsd.ads", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-osinte-freebsd.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-osinte-freebsd.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-freebsd.ads?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -289,14 +289,6 @@ package System.OS_Interface is\n    PTHREAD_SCOPE_PROCESS : constant := 0;\n    PTHREAD_SCOPE_SYSTEM  : constant := 2;\n \n-   --  Read/Write lock not supported on freebsd. To add support both types\n-   --  pthread_rwlock_t and pthread_rwlockattr_t must properly be defined\n-   --  with the associated routines pthread_rwlock_[init/destroy] and\n-   --  pthread_rwlock_[rdlock/wrlock/unlock].\n-\n-   subtype pthread_rwlock_t     is pthread_mutex_t;\n-   subtype pthread_rwlockattr_t is pthread_mutexattr_t;\n-\n    -----------\n    -- Stack --\n    -----------"}, {"sha": "716d821654a02d8b1aba47bdb25ae7b008a82a37", "filename": "gcc/ada/s-osinte-hpux.ads", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-osinte-hpux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-osinte-hpux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-hpux.ads?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -265,14 +265,6 @@ package System.OS_Interface is\n    PTHREAD_SCOPE_PROCESS : constant := 2;\n    PTHREAD_SCOPE_SYSTEM  : constant := 1;\n \n-   --  Read/Write lock not supported on HPUX. To add support both types\n-   --  pthread_rwlock_t and pthread_rwlockattr_t must properly be defined\n-   --  with the associated routines pthread_rwlock_[init/destroy] and\n-   --  pthread_rwlock_[rdlock/wrlock/unlock].\n-\n-   subtype pthread_rwlock_t     is pthread_mutex_t;\n-   subtype pthread_rwlockattr_t is pthread_mutexattr_t;\n-\n    -----------\n    -- Stack --\n    -----------"}, {"sha": "fb1bbb5c55cf859c861cc63f6cafd956b05a2a2a", "filename": "gcc/ada/s-osinte-irix.ads", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-osinte-irix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-osinte-irix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-irix.ads?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -250,14 +250,6 @@ package System.OS_Interface is\n \n    PTHREAD_CREATE_DETACHED : constant := 1;\n \n-   --  Read/Write lock not supported on SGI. To add support both types\n-   --  pthread_rwlock_t and pthread_rwlockattr_t must properly be defined\n-   --  with the associated routines pthread_rwlock_[init/destroy] and\n-   --  pthread_rwlock_[rdlock/wrlock/unlock].\n-\n-   subtype pthread_rwlock_t     is pthread_mutex_t;\n-   subtype pthread_rwlockattr_t is pthread_mutexattr_t;\n-\n    -----------\n    -- Stack --\n    -----------"}, {"sha": "6c266f9babfb56a56a57b7b3ba415d3d7d18f19d", "filename": "gcc/ada/s-osinte-solaris-posix.ads", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-osinte-solaris-posix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-osinte-solaris-posix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-solaris-posix.ads?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -255,14 +255,6 @@ package System.OS_Interface is\n    type pthread_condattr_t  is limited private;\n    type pthread_key_t       is private;\n \n-   --  Read/Write lock not supported on Solaris. To add support both types\n-   --  pthread_rwlock_t and pthread_rwlockattr_t must properly be defined\n-   --  with the associated routines pthread_rwlock_[init/destroy] and\n-   --  pthread_rwlock_[rdlock/wrlock/unlock].\n-\n-   subtype pthread_rwlock_t     is pthread_mutex_t;\n-   subtype pthread_rwlockattr_t is pthread_mutexattr_t;\n-\n    PTHREAD_CREATE_DETACHED : constant := 16#40#;\n \n    PTHREAD_SCOPE_PROCESS : constant := 0;"}, {"sha": "ab0557d86dd0c8165e94ba1c7820da7d21d77756", "filename": "gcc/ada/s-taprob.adb", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprob.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprob.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprob.adb?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -57,11 +57,7 @@ package body System.Tasking.Protected_Objects is\n \n    procedure Finalize_Protection (Object : in out Protection) is\n    begin\n-      if Locking_Policy = 'R' then\n-         Finalize_Lock (Object.RWL'Unrestricted_Access);\n-      else\n-         Finalize_Lock (Object.L'Unrestricted_Access);\n-      end if;\n+      Finalize_Lock (Object.L'Unrestricted_Access);\n    end Finalize_Protection;\n \n    ---------------------------\n@@ -79,11 +75,7 @@ package body System.Tasking.Protected_Objects is\n          Init_Priority  := System.Priority'Last;\n       end if;\n \n-      if Locking_Policy = 'R' then\n-         Initialize_Lock (Init_Priority, Object.RWL'Access);\n-      else\n-         Initialize_Lock (Init_Priority, Object.L'Access);\n-      end if;\n+      Initialize_Lock (Init_Priority, Object.L'Access);\n       Object.Ceiling := System.Any_Priority (Init_Priority);\n       Object.New_Ceiling := System.Any_Priority (Init_Priority);\n       Object.Owner := Null_Task;\n@@ -128,11 +120,7 @@ package body System.Tasking.Protected_Objects is\n          raise Program_Error;\n       end if;\n \n-      if Locking_Policy = 'R' then\n-         Write_Lock (Object.RWL'Access, Ceiling_Violation);\n-      else\n-         Write_Lock (Object.L'Access, Ceiling_Violation);\n-      end if;\n+      Write_Lock (Object.L'Access, Ceiling_Violation);\n \n       if Parameters.Runtime_Traces then\n          Send_Trace_Info (PO_Lock);\n@@ -189,11 +177,7 @@ package body System.Tasking.Protected_Objects is\n          raise Program_Error;\n       end if;\n \n-      if Locking_Policy = 'R' then\n-         Read_Lock (Object.RWL'Access, Ceiling_Violation);\n-      else\n-         Write_Lock (Object.L'Access, Ceiling_Violation);\n-      end if;\n+      Read_Lock (Object.L'Access, Ceiling_Violation);\n \n       if Parameters.Runtime_Traces then\n          Send_Trace_Info (PO_Lock);\n@@ -279,11 +263,7 @@ package body System.Tasking.Protected_Objects is\n          Object.Ceiling := Object.New_Ceiling;\n       end if;\n \n-      if Locking_Policy = 'R' then\n-         Unlock (Object.RWL'Access);\n-      else\n-         Unlock (Object.L'Access);\n-      end if;\n+      Unlock (Object.L'Access);\n \n       if Parameters.Runtime_Traces then\n          Send_Trace_Info (PO_Unlock);"}, {"sha": "fa2a99fa79423c7e36ab564892cdcf9891dfb9dc", "filename": "gcc/ada/s-taprob.ads", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprob.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprob.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprob.ads?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -212,9 +212,6 @@ private\n       L : aliased Task_Primitives.Lock;\n       --  Lock used to ensure mutual exclusive access to the protected object\n \n-      RWL : aliased Task_Primitives.RW_Lock;\n-      --  Lock used to support conccurent readers to the protected object\n-\n       Ceiling : System.Any_Priority;\n       --  Ceiling priority associated to the protected object\n "}, {"sha": "f6e9a64cdc7a31a71fa8093fbdbe7fb2c687fc35", "filename": "gcc/ada/s-taprop-dummy.adb", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprop-dummy.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprop-dummy.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-dummy.adb?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -158,11 +158,6 @@ package body System.Task_Primitives.Operations is\n       null;\n    end Finalize_Lock;\n \n-   procedure Finalize_Lock (L : not null access RW_Lock) is\n-   begin\n-      null;\n-   end Finalize_Lock;\n-\n    procedure Finalize_Lock (L : not null access RTS_Lock) is\n    begin\n       null;\n@@ -222,14 +217,6 @@ package body System.Task_Primitives.Operations is\n       null;\n    end Initialize_Lock;\n \n-   procedure Initialize_Lock\n-     (Prio : System.Any_Priority;\n-      L    : not null access RW_Lock)\n-   is\n-   begin\n-      null;\n-   end Initialize_Lock;\n-\n    procedure Initialize_Lock\n      (L : not null access RTS_Lock; Level : Lock_Level) is\n    begin\n@@ -277,7 +264,7 @@ package body System.Task_Primitives.Operations is\n    ---------------\n \n    procedure Read_Lock\n-     (L                 : not null access RW_Lock;\n+     (L                 : not null access Lock;\n       Ceiling_Violation : out Boolean)\n    is\n    begin\n@@ -472,11 +459,6 @@ package body System.Task_Primitives.Operations is\n       null;\n    end Unlock;\n \n-   procedure Unlock (L : not null access RW_Lock) is\n-   begin\n-      null;\n-   end Unlock;\n-\n    procedure Unlock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)\n@@ -519,14 +501,6 @@ package body System.Task_Primitives.Operations is\n       Ceiling_Violation := False;\n    end Write_Lock;\n \n-   procedure Write_Lock\n-     (L                 : not null access RW_Lock;\n-      Ceiling_Violation : out Boolean)\n-   is\n-   begin\n-      Ceiling_Violation := False;\n-   end Write_Lock;\n-\n    procedure Write_Lock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)"}, {"sha": "346de43ba0521c7616aac67650e29ba2c4207b9d", "filename": "gcc/ada/s-taprop-hpux-dce.adb", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-hpux-dce.adb?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -253,14 +253,6 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Initialize_Lock;\n \n-   procedure Initialize_Lock\n-     (Prio : System.Any_Priority;\n-      L    : not null access RW_Lock)\n-   is\n-   begin\n-      Initialize_Lock (Prio, Lock (L.all)'Unrestricted_Access);\n-   end Initialize_Lock;\n-\n    procedure Initialize_Lock\n      (L     : not null access RTS_Lock;\n       Level : Lock_Level)\n@@ -301,11 +293,6 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Finalize_Lock;\n \n-   procedure Finalize_Lock (L : not null access RW_Lock) is\n-   begin\n-      Finalize_Lock (Lock (L.all)'Unrestricted_Access);\n-   end Finalize_Lock;\n-\n    procedure Finalize_Lock (L : not null access RTS_Lock) is\n       Result : Interfaces.C.int;\n    begin\n@@ -336,14 +323,6 @@ package body System.Task_Primitives.Operations is\n       Ceiling_Violation := False;\n    end Write_Lock;\n \n-   procedure Write_Lock\n-     (L                 : not null access RW_Lock;\n-      Ceiling_Violation : out Boolean)\n-   is\n-   begin\n-      Write_Lock (Lock (L.all)'Unrestricted_Access, Ceiling_Violation);\n-   end Write_Lock;\n-\n    procedure Write_Lock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)\n@@ -370,7 +349,7 @@ package body System.Task_Primitives.Operations is\n    ---------------\n \n    procedure Read_Lock\n-     (L                 : not null access RW_Lock;\n+     (L                 : not null access Lock;\n       Ceiling_Violation : out Boolean)\n    is\n    begin\n@@ -388,11 +367,6 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Unlock;\n \n-   procedure Unlock (L : not null access RW_Lock) is\n-   begin\n-      Unlock (Lock (L.all)'Unrestricted_Access);\n-   end Unlock;\n-\n    procedure Unlock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)"}, {"sha": "264690499203161a142704ae2d55142e5b772626", "filename": "gcc/ada/s-taprop-irix.adb", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprop-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprop-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-irix.adb?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -267,14 +267,6 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Initialize_Lock;\n \n-   procedure Initialize_Lock\n-     (Prio : System.Any_Priority;\n-      L    : not null access RW_Lock)\n-   is\n-   begin\n-      Initialize_Lock (Prio, Lock (L.all)'Unrestricted_Access);\n-   end Initialize_Lock;\n-\n    procedure Initialize_Lock\n      (L     : not null access RTS_Lock;\n       Level : Lock_Level)\n@@ -326,11 +318,6 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Finalize_Lock;\n \n-   procedure Finalize_Lock (L : not null access RW_Lock) is\n-   begin\n-      Finalize_Lock (Lock (L.all)'Unrestricted_Access);\n-   end Finalize_Lock;\n-\n    procedure Finalize_Lock (L : not null access RTS_Lock) is\n       Result : Interfaces.C.int;\n    begin\n@@ -356,13 +343,6 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0 or else Result = EINVAL);\n    end Write_Lock;\n \n-   procedure Write_Lock\n-     (L : not null access RW_Lock; Ceiling_Violation : out Boolean)\n-   is\n-   begin\n-      Write_Lock (Lock (L.all)'Unrestricted_Access, Ceiling_Violation);\n-   end Write_Lock;\n-\n    procedure Write_Lock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)\n@@ -389,7 +369,7 @@ package body System.Task_Primitives.Operations is\n    ---------------\n \n    procedure Read_Lock\n-     (L : not null access RW_Lock; Ceiling_Violation : out Boolean) is\n+     (L : not null access Lock; Ceiling_Violation : out Boolean) is\n    begin\n       Write_Lock (L, Ceiling_Violation);\n    end Read_Lock;\n@@ -405,11 +385,6 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Unlock;\n \n-   procedure Unlock (L : not null access RW_Lock) is\n-   begin\n-      Unlock (Lock (L.all)'Unrestricted_Access);\n-   end Unlock;\n-\n    procedure Unlock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)"}, {"sha": "c63d5531b622466fffc13a86518964b559e74b9a", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 56, "deletions": 61, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -95,6 +95,9 @@ package body System.Task_Primitives.Operations is\n    Dispatching_Policy : Character;\n    pragma Import (C, Dispatching_Policy, \"__gl_task_dispatching_policy\");\n \n+   Locking_Policy : Character;\n+   pragma Import (C, Locking_Policy, \"__gl_locking_policy\");\n+\n    Foreign_Task_Elaborated : aliased Boolean := True;\n    --  Used to identified fake tasks (i.e., non-Ada Threads)\n \n@@ -260,47 +263,49 @@ package body System.Task_Primitives.Operations is\n    is\n       pragma Unreferenced (Prio);\n \n-      Mutex_Attr : aliased pthread_mutexattr_t;\n-      Result     : Interfaces.C.int;\n-\n    begin\n-      Result := pthread_mutexattr_init (Mutex_Attr'Access);\n-      pragma Assert (Result = 0);\n+      if Locking_Policy = 'R' then\n+         declare\n+            RWlock_Attr : aliased pthread_rwlockattr_t;\n+            Result      : Interfaces.C.int;\n \n-      Result := pthread_mutex_init (L, Mutex_Attr'Access);\n+         begin\n+            --  Set the rwlock to prefer writer to avoid writers starvation\n \n-      pragma Assert (Result = 0 or else Result = ENOMEM);\n+            Result := pthread_rwlockattr_init (RWlock_Attr'Access);\n+            pragma Assert (Result = 0);\n \n-      if Result = ENOMEM then\n-         raise Storage_Error with \"Failed to allocate a lock\";\n-      end if;\n-   end Initialize_Lock;\n+            Result := pthread_rwlockattr_setkind_np\n+              (RWlock_Attr'Access,\n+               PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP);\n+            pragma Assert (Result = 0);\n \n-   procedure Initialize_Lock\n-     (Prio : System.Any_Priority;\n-      L    : not null access RW_Lock)\n-   is\n-      pragma Unreferenced (Prio);\n+            Result := pthread_rwlock_init (L.RW'Access, RWlock_Attr'Access);\n \n-      RWlock_Attr : aliased pthread_rwlockattr_t;\n-      Result      : Interfaces.C.int;\n+            pragma Assert (Result = 0 or else Result = ENOMEM);\n \n-   begin\n-      --  Set the rwlock to prefer writer to avoid writers starvation\n+            if Result = ENOMEM then\n+               raise Storage_Error with \"Failed to allocate a lock\";\n+            end if;\n+         end;\n \n-      Result := pthread_rwlockattr_init (RWlock_Attr'Access);\n-      pragma Assert (Result = 0);\n+      else\n+         declare\n+            Mutex_Attr : aliased pthread_mutexattr_t;\n+            Result     : Interfaces.C.int;\n \n-      Result := pthread_rwlockattr_setkind_np\n-        (RWlock_Attr'Access, PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP);\n-      pragma Assert (Result = 0);\n+         begin\n+            Result := pthread_mutexattr_init (Mutex_Attr'Access);\n+            pragma Assert (Result = 0);\n \n-      Result := pthread_rwlock_init (L, RWlock_Attr'Access);\n+            Result := pthread_mutex_init (L.WO'Access, Mutex_Attr'Access);\n \n-      pragma Assert (Result = 0 or else Result = ENOMEM);\n+            pragma Assert (Result = 0 or else Result = ENOMEM);\n \n-      if Result = ENOMEM then\n-         raise Storage_Error with \"Failed to allocate a lock\";\n+            if Result = ENOMEM then\n+               raise Storage_Error with \"Failed to allocate a lock\";\n+            end if;\n+         end;\n       end if;\n    end Initialize_Lock;\n \n@@ -333,14 +338,11 @@ package body System.Task_Primitives.Operations is\n    procedure Finalize_Lock (L : not null access Lock) is\n       Result : Interfaces.C.int;\n    begin\n-      Result := pthread_mutex_destroy (L);\n-      pragma Assert (Result = 0);\n-   end Finalize_Lock;\n-\n-   procedure Finalize_Lock (L : not null access RW_Lock) is\n-      Result : Interfaces.C.int;\n-   begin\n-      Result := pthread_rwlock_destroy (L);\n+      if Locking_Policy = 'R' then\n+         Result := pthread_rwlock_destroy (L.RW'Access);\n+      else\n+         Result := pthread_mutex_destroy (L.WO'Access);\n+      end if;\n       pragma Assert (Result = 0);\n    end Finalize_Lock;\n \n@@ -361,21 +363,12 @@ package body System.Task_Primitives.Operations is\n    is\n       Result : Interfaces.C.int;\n    begin\n-      Result := pthread_mutex_lock (L);\n-      Ceiling_Violation := Result = EINVAL;\n-\n-      --  Assume the cause of EINVAL is a priority ceiling violation\n-\n-      pragma Assert (Result = 0 or else Result = EINVAL);\n-   end Write_Lock;\n+      if Locking_Policy = 'R' then\n+         Result := pthread_rwlock_wrlock (L.RW'Access);\n+      else\n+         Result := pthread_mutex_lock (L.WO'Access);\n+      end if;\n \n-   procedure Write_Lock\n-     (L                 : not null access RW_Lock;\n-      Ceiling_Violation : out Boolean)\n-   is\n-      Result : Interfaces.C.int;\n-   begin\n-      Result := pthread_rwlock_wrlock (L);\n       Ceiling_Violation := Result = EINVAL;\n \n       --  Assume the cause of EINVAL is a priority ceiling violation\n@@ -409,12 +402,17 @@ package body System.Task_Primitives.Operations is\n    ---------------\n \n    procedure Read_Lock\n-     (L                 : not null access RW_Lock;\n+     (L                 : not null access Lock;\n       Ceiling_Violation : out Boolean)\n    is\n       Result : Interfaces.C.int;\n    begin\n-      Result := pthread_rwlock_rdlock (L);\n+      if Locking_Policy = 'R' then\n+         Result := pthread_rwlock_rdlock (L.RW'Access);\n+      else\n+         Result := pthread_mutex_lock (L.WO'Access);\n+      end if;\n+\n       Ceiling_Violation := Result = EINVAL;\n \n       --  Assume the cause of EINVAL is a priority ceiling violation\n@@ -429,14 +427,11 @@ package body System.Task_Primitives.Operations is\n    procedure Unlock (L : not null access Lock) is\n       Result : Interfaces.C.int;\n    begin\n-      Result := pthread_mutex_unlock (L);\n-      pragma Assert (Result = 0);\n-   end Unlock;\n-\n-   procedure Unlock (L : not null access RW_Lock) is\n-      Result : Interfaces.C.int;\n-   begin\n-      Result := pthread_rwlock_unlock (L);\n+      if Locking_Policy = 'R' then\n+         Result := pthread_rwlock_unlock (L.RW'Access);\n+      else\n+         Result := pthread_mutex_unlock (L.WO'Access);\n+      end if;\n       pragma Assert (Result = 0);\n    end Unlock;\n "}, {"sha": "7fc505e30bc69ed9b296f5f0162367cbbf409bb8", "filename": "gcc/ada/s-taprop-mingw.adb", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprop-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprop-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-mingw.adb?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -414,14 +414,6 @@ package body System.Task_Primitives.Operations is\n       L.Priority := Prio;\n    end Initialize_Lock;\n \n-   procedure Initialize_Lock\n-     (Prio : System.Any_Priority;\n-      L    : not null access RW_Lock)\n-   is\n-   begin\n-      Initialize_Lock (Prio, Lock (L.all)'Unrestricted_Access);\n-   end Initialize_Lock;\n-\n    procedure Initialize_Lock\n      (L : not null access RTS_Lock; Level : Lock_Level)\n    is\n@@ -439,11 +431,6 @@ package body System.Task_Primitives.Operations is\n       DeleteCriticalSection (L.Mutex'Access);\n    end Finalize_Lock;\n \n-   procedure Finalize_Lock (L : not null access RW_Lock) is\n-   begin\n-      Finalize_Lock (Lock (L.all)'Unrestricted_Access);\n-   end Finalize_Lock;\n-\n    procedure Finalize_Lock (L : not null access RTS_Lock) is\n    begin\n       DeleteCriticalSection (L);\n@@ -468,12 +455,6 @@ package body System.Task_Primitives.Operations is\n       Ceiling_Violation := False;\n    end Write_Lock;\n \n-   procedure Write_Lock\n-     (L : not null access RW_Lock; Ceiling_Violation : out Boolean) is\n-   begin\n-      Write_Lock (Lock (L.all)'Unrestricted_Access, Ceiling_Violation);\n-   end Write_Lock;\n-\n    procedure Write_Lock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)\n@@ -496,7 +477,7 @@ package body System.Task_Primitives.Operations is\n    ---------------\n \n    procedure Read_Lock\n-     (L : not null access RW_Lock; Ceiling_Violation : out Boolean) is\n+     (L : not null access Lock; Ceiling_Violation : out Boolean) is\n    begin\n       Write_Lock (L, Ceiling_Violation);\n    end Read_Lock;\n@@ -510,11 +491,6 @@ package body System.Task_Primitives.Operations is\n       LeaveCriticalSection (L.Mutex'Access);\n    end Unlock;\n \n-   procedure Unlock (L : not null access RW_Lock) is\n-   begin\n-      Unlock (Lock (L.all)'Unrestricted_Access);\n-   end Unlock;\n-\n    procedure Unlock\n      (L : not null access RTS_Lock; Global_Lock : Boolean := False) is\n    begin"}, {"sha": "af0a597e5fc36766b953bb7834b466a206f7fafc", "filename": "gcc/ada/s-taprop-posix.adb", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprop-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprop-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-posix.adb?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -322,14 +322,6 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Initialize_Lock;\n \n-   procedure Initialize_Lock\n-     (Prio : System.Any_Priority;\n-      L    : not null access RW_Lock)\n-   is\n-   begin\n-      Initialize_Lock (Prio, Lock (L.all)'Unrestricted_Access);\n-   end Initialize_Lock;\n-\n    procedure Initialize_Lock\n      (L : not null access RTS_Lock; Level : Lock_Level)\n    is\n@@ -384,11 +376,6 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Finalize_Lock;\n \n-   procedure Finalize_Lock (L : not null access RW_Lock) is\n-   begin\n-      Finalize_Lock (Lock (L.all)'Unrestricted_Access);\n-   end Finalize_Lock;\n-\n    procedure Finalize_Lock (L : not null access RTS_Lock) is\n       Result : Interfaces.C.int;\n    begin\n@@ -414,13 +401,6 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0 or else Result = EINVAL);\n    end Write_Lock;\n \n-   procedure Write_Lock\n-     (L : not null access RW_Lock; Ceiling_Violation : out Boolean)\n-   is\n-   begin\n-      Write_Lock (Lock (L.all)'Unrestricted_Access, Ceiling_Violation);\n-   end Write_Lock;\n-\n    procedure Write_Lock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)\n@@ -447,7 +427,7 @@ package body System.Task_Primitives.Operations is\n    ---------------\n \n    procedure Read_Lock\n-     (L : not null access RW_Lock; Ceiling_Violation : out Boolean) is\n+     (L : not null access Lock; Ceiling_Violation : out Boolean) is\n    begin\n       Write_Lock (L, Ceiling_Violation);\n    end Read_Lock;\n@@ -463,11 +443,6 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Unlock;\n \n-   procedure Unlock (L : not null access RW_Lock) is\n-   begin\n-      Unlock (Lock (L.all)'Unrestricted_Access);\n-   end Unlock;\n-\n    procedure Unlock\n      (L : not null access RTS_Lock; Global_Lock : Boolean := False)\n    is"}, {"sha": "b5fe1ee9d42c05be8338e91589d3675f41394a7d", "filename": "gcc/ada/s-taprop-solaris.adb", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprop-solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprop-solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-solaris.adb?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -563,14 +563,6 @@ package body System.Task_Primitives.Operations is\n       end if;\n    end Initialize_Lock;\n \n-   procedure Initialize_Lock\n-     (Prio : System.Any_Priority;\n-      L    : not null access RW_Lock)\n-   is\n-   begin\n-      Initialize_Lock (Prio, Lock (L.all)'Unrestricted_Access);\n-   end Initialize_Lock;\n-\n    procedure Initialize_Lock\n      (L     : not null access RTS_Lock;\n       Level : Lock_Level)\n@@ -600,11 +592,6 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Finalize_Lock;\n \n-   procedure Finalize_Lock (L : not null access RW_Lock) is\n-   begin\n-      Finalize_Lock (Lock (L.all)'Unrestricted_Access);\n-   end Finalize_Lock;\n-\n    procedure Finalize_Lock (L : not null access RTS_Lock) is\n       Result : Interfaces.C.int;\n    begin\n@@ -659,14 +646,6 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Record_Lock (Lock_Ptr (L)));\n    end Write_Lock;\n \n-   procedure Write_Lock\n-     (L                 : not null access RW_Lock;\n-      Ceiling_Violation : out Boolean)\n-   is\n-   begin\n-      Write_Lock (Lock (L.all)'Unrestricted_Access, Ceiling_Violation);\n-   end Write_Lock;\n-\n    procedure Write_Lock\n      (L          : not null access RTS_Lock;\n      Global_Lock : Boolean := False)\n@@ -697,7 +676,7 @@ package body System.Task_Primitives.Operations is\n    ---------------\n \n    procedure Read_Lock\n-     (L                 : not null access RW_Lock;\n+     (L                 : not null access Lock;\n       Ceiling_Violation : out Boolean) is\n    begin\n       Write_Lock (L, Ceiling_Violation);\n@@ -731,11 +710,6 @@ package body System.Task_Primitives.Operations is\n       end if;\n    end Unlock;\n \n-   procedure Unlock (L : not null access RW_Lock) is\n-   begin\n-      Unlock (Lock (L.all)'Unrestricted_Access);\n-   end Unlock;\n-\n    procedure Unlock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)"}, {"sha": "b0b727d9bb1005eb7057fbecdae4cdb5f813faf9", "filename": "gcc/ada/s-taprop-tru64.adb", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprop-tru64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprop-tru64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-tru64.adb?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -265,14 +265,6 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Initialize_Lock;\n \n-   procedure Initialize_Lock\n-     (Prio : System.Any_Priority;\n-      L    : not null access RW_Lock)\n-   is\n-   begin\n-      Initialize_Lock (Prio, Lock (L.all)'Unrestricted_Access);\n-   end Initialize_Lock;\n-\n    procedure Initialize_Lock\n      (L     : not null access RTS_Lock;\n       Level : Lock_Level)\n@@ -313,11 +305,6 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Finalize_Lock;\n \n-   procedure Finalize_Lock (L : not null access RW_Lock) is\n-   begin\n-      Finalize_Lock (Lock (L.all)'Unrestricted_Access);\n-   end Finalize_Lock;\n-\n    procedure Finalize_Lock (L : not null access RTS_Lock) is\n       Result : Interfaces.C.int;\n    begin\n@@ -362,14 +349,6 @@ package body System.Task_Primitives.Operations is\n       Ceiling_Violation := False;\n    end Write_Lock;\n \n-   procedure Write_Lock\n-     (L                 : not null access RW_Lock;\n-      Ceiling_Violation : out Boolean)\n-   is\n-   begin\n-      Write_Lock (Lock (L.all)'Unrestricted_Access, Ceiling_Violation);\n-   end Write_Lock;\n-\n    procedure Write_Lock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)\n@@ -396,7 +375,7 @@ package body System.Task_Primitives.Operations is\n    ---------------\n \n    procedure Read_Lock\n-     (L                 : not null access RW_Lock;\n+     (L                 : not null access Lock;\n       Ceiling_Violation : out Boolean)\n    is\n    begin\n@@ -414,11 +393,6 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Unlock;\n \n-   procedure Unlock (L : not null access RW_Lock) is\n-   begin\n-      Unlock (Lock (L.all)'Unrestricted_Access);\n-   end Unlock;\n-\n    procedure Unlock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)"}, {"sha": "92b6023bdff3c63080de3901bfb308b4ee6db693", "filename": "gcc/ada/s-taprop-vms.adb", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprop-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprop-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vms.adb?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -225,13 +225,6 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Initialize_Lock;\n \n-   procedure Initialize_Lock\n-     (Prio : System.Any_Priority;\n-      L    : not null access RW_Lock) is\n-   begin\n-      Initialize_Lock (Prio, Lock (L.all)'Unrestricted_Access);\n-   end Initialize_Lock;\n-\n    procedure Initialize_Lock\n      (L     : not null access RTS_Lock;\n       Level : Lock_Level)\n@@ -285,11 +278,6 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Finalize_Lock;\n \n-   procedure Finalize_Lock (L : not null access RW_Lock) is\n-   begin\n-      Finalize_Lock (Lock (L.all)'Unrestricted_Access);\n-   end Finalize_Lock;\n-\n    procedure Finalize_Lock (L : not null access RTS_Lock) is\n       Result : Interfaces.C.int;\n    begin\n@@ -331,14 +319,6 @@ package body System.Task_Primitives.Operations is\n --      Set_Priority (Self_ID, System.Any_Priority (L.Prio));\n    end Write_Lock;\n \n-   procedure Write_Lock\n-     (L                 : not null access RW_Lock;\n-      Ceiling_Violation : out Boolean)\n-   is\n-   begin\n-      Write_Lock (Lock (L.all)'Unrestricted_Access, Ceiling_Violation);\n-   end Write_Lock;\n-\n    procedure Write_Lock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)\n@@ -365,7 +345,7 @@ package body System.Task_Primitives.Operations is\n    ---------------\n \n    procedure Read_Lock\n-     (L                 : not null access RW_Lock;\n+     (L                 : not null access Lock;\n       Ceiling_Violation : out Boolean)\n    is\n    begin\n@@ -383,11 +363,6 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Unlock;\n \n-   procedure Unlock (L : not null access RW_Lock) is\n-   begin\n-      Unlock (Lock (L.all)'Unrestricted_Access);\n-   end Unlock;\n-\n    procedure Unlock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)"}, {"sha": "be76162b284d26f061105cadb6d9cf5715de6334", "filename": "gcc/ada/s-taprop-vxworks.adb", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprop-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprop-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vxworks.adb?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -308,14 +308,6 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (L.Mutex /= 0);\n    end Initialize_Lock;\n \n-   procedure Initialize_Lock\n-     (Prio : System.Any_Priority;\n-      L    : not null access RW_Lock)\n-   is\n-   begin\n-      Initialize_Lock (Prio, Lock (L.all)'Unrestricted_Access);\n-   end Initialize_Lock;\n-\n    procedure Initialize_Lock\n      (L     : not null access RTS_Lock;\n       Level : Lock_Level)\n@@ -339,11 +331,6 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Finalize_Lock;\n \n-   procedure Finalize_Lock (L : not null access RW_Lock) is\n-   begin\n-      Finalize_Lock (Lock (L.all)'Unrestricted_Access);\n-   end Finalize_Lock;\n-\n    procedure Finalize_Lock (L : not null access RTS_Lock) is\n       Result : int;\n    begin\n@@ -375,14 +362,6 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Write_Lock;\n \n-   procedure Write_Lock\n-     (L                 : not null access RW_Lock;\n-      Ceiling_Violation : out Boolean)\n-   is\n-   begin\n-      Write_Lock (Lock (L.all)'Unrestricted_Access, Ceiling_Violation);\n-   end Write_Lock;\n-\n    procedure Write_Lock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)\n@@ -409,7 +388,7 @@ package body System.Task_Primitives.Operations is\n    ---------------\n \n    procedure Read_Lock\n-     (L                 : not null access RW_Lock;\n+     (L                 : not null access Lock;\n       Ceiling_Violation : out Boolean)\n    is\n    begin\n@@ -427,11 +406,6 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Unlock;\n \n-   procedure Unlock (L : not null access RW_Lock) is\n-   begin\n-      Unlock (Lock (L.all)'Unrestricted_Access);\n-   end Unlock;\n-\n    procedure Unlock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False)"}, {"sha": "12fbd71386e73a5d735c3fd1988e53cc266ffb99", "filename": "gcc/ada/s-taprop.ads", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taprop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop.ads?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -148,9 +148,6 @@ package System.Task_Primitives.Operations is\n    procedure Initialize_Lock\n      (Prio : System.Any_Priority;\n       L    : not null access Lock);\n-   procedure Initialize_Lock\n-     (Prio : System.Any_Priority;\n-      L    : not null access RW_Lock);\n    procedure Initialize_Lock\n      (L     : not null access RTS_Lock;\n       Level : Lock_Level);\n@@ -176,7 +173,6 @@ package System.Task_Primitives.Operations is\n    --  These operations raise Storage_Error if a lack of storage is detected\n \n    procedure Finalize_Lock (L : not null access Lock);\n-   procedure Finalize_Lock (L : not null access RW_Lock);\n    procedure Finalize_Lock (L : not null access RTS_Lock);\n    pragma Inline (Finalize_Lock);\n    --  Finalize a lock object, freeing any resources allocated by the\n@@ -185,9 +181,6 @@ package System.Task_Primitives.Operations is\n    procedure Write_Lock\n      (L                 : not null access Lock;\n       Ceiling_Violation : out Boolean);\n-   procedure Write_Lock\n-     (L                 : not null access RW_Lock;\n-      Ceiling_Violation : out Boolean);\n    procedure Write_Lock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False);\n@@ -217,7 +210,7 @@ package System.Task_Primitives.Operations is\n    --  per-task lock is implicit in Exit_Task.\n \n    procedure Read_Lock\n-     (L                 : not null access RW_Lock;\n+     (L                 : not null access Lock;\n       Ceiling_Violation : out Boolean);\n    pragma Inline (Read_Lock);\n    --  Lock a lock object for read access. After this operation returns,\n@@ -242,8 +235,6 @@ package System.Task_Primitives.Operations is\n \n    procedure Unlock\n      (L : not null access Lock);\n-   procedure Unlock\n-     (L : not null access RW_Lock);\n    procedure Unlock\n      (L           : not null access RTS_Lock;\n       Global_Lock : Boolean := False);"}, {"sha": "5fe9fa342770044e2382084025635b71c8171672", "filename": "gcc/ada/s-taspri-dummy.ads", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taspri-dummy.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taspri-dummy.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-dummy.ads?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -40,8 +40,6 @@ package System.Task_Primitives is\n \n    type Lock is new Integer;\n \n-   type RW_Lock is new Integer;\n-\n    type RTS_Lock is new Integer;\n \n    type Suspension_Object is new Integer;"}, {"sha": "9d51d5c45176940cd33bcff2dbb3d266a0cee299", "filename": "gcc/ada/s-taspri-hpux-dce.ads", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taspri-hpux-dce.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taspri-hpux-dce.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-hpux-dce.ads?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -43,7 +43,6 @@ package System.Task_Primitives is\n    pragma Preelaborate;\n \n    type Lock is limited private;\n-   type RW_Lock is limited private;\n    --  Should be used for implementation of protected objects\n \n    type RTS_Lock is limited private;\n@@ -82,8 +81,6 @@ private\n       Owner_Priority : Integer;\n    end record;\n \n-   type RW_Lock is new Lock;\n-\n    type RTS_Lock is new System.OS_Interface.pthread_mutex_t;\n \n    type Suspension_Object is record"}, {"sha": "cc4f4019fa9638a0565c099c383608d33b626bd6", "filename": "gcc/ada/s-taspri-mingw.ads", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taspri-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taspri-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-mingw.ads?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -42,7 +42,6 @@ package System.Task_Primitives is\n    pragma Preelaborate;\n \n    type Lock is limited private;\n-   type RW_Lock is limited private;\n    --  Should be used for implementation of protected objects\n \n    type RTS_Lock is limited private;\n@@ -82,8 +81,6 @@ private\n       Owner_Priority : Integer;\n    end record;\n \n-   type RW_Lock is new Lock;\n-\n    type Condition_Variable is new System.Win32.HANDLE;\n \n    type RTS_Lock is new System.OS_Interface.CRITICAL_SECTION;"}, {"sha": "6b279eb63c2edc7478bd263fa1bd4d5232d2be59", "filename": "gcc/ada/s-taspri-posix-noaltstack.ads", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taspri-posix-noaltstack.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taspri-posix-noaltstack.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-posix-noaltstack.ads?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -45,7 +45,6 @@ package System.Task_Primitives is\n    pragma Preelaborate;\n \n    type Lock is limited private;\n-   type RW_Lock is limited private;\n    --  Should be used for implementation of protected objects\n \n    type RTS_Lock is limited private;\n@@ -79,8 +78,11 @@ package System.Task_Primitives is\n \n private\n \n-   type Lock is new System.OS_Interface.pthread_mutex_t;\n-   type RW_Lock is new System.OS_Interface.pthread_rwlock_t;\n+   type Lock is record\n+      WO : System.OS_Interface.pthread_mutex_t;\n+      RW : System.OS_Interface.pthread_rwlock_t;\n+   end record;\n+\n    type RTS_Lock is new System.OS_Interface.pthread_mutex_t;\n \n    type Suspension_Object is record"}, {"sha": "9f40693aa74f279ff6963428bad80765f7656b82", "filename": "gcc/ada/s-taspri-posix.ads", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taspri-posix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taspri-posix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-posix.ads?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -44,7 +44,6 @@ package System.Task_Primitives is\n    pragma Preelaborate;\n \n    type Lock is limited private;\n-   type RW_Lock is limited private;\n    --  Should be used for implementation of protected objects\n \n    type RTS_Lock is limited private;\n@@ -78,8 +77,11 @@ package System.Task_Primitives is\n \n private\n \n-   type Lock is new System.OS_Interface.pthread_mutex_t;\n-   type RW_Lock is new System.OS_Interface.pthread_rwlock_t;\n+   type Lock is record\n+      RW : aliased System.OS_Interface.pthread_rwlock_t;\n+      WO : aliased System.OS_Interface.pthread_mutex_t;\n+   end record;\n+\n    type RTS_Lock is new System.OS_Interface.pthread_mutex_t;\n \n    type Suspension_Object is record"}, {"sha": "0c9c43267fc60b5991e6e2ee127a212217e5f64e", "filename": "gcc/ada/s-taspri-solaris.ads", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taspri-solaris.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taspri-solaris.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-solaris.ads?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -46,7 +46,6 @@ package System.Task_Primitives is\n \n    type Lock is limited private;\n    type Lock_Ptr is access all Lock;\n-   type RW_Lock is limited private;\n    --  Should be used for implementation of protected objects\n \n    type RTS_Lock is limited private;\n@@ -108,8 +107,6 @@ private\n       Frozen         : Boolean := False;\n    end record;\n \n-   type RW_Lock is new Lock;\n-\n    type RTS_Lock is new Lock;\n \n    type Suspension_Object is record"}, {"sha": "41c9aeaa3cd9359a94c5881a29934703bdbb3e1a", "filename": "gcc/ada/s-taspri-tru64.ads", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taspri-tru64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taspri-tru64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-tru64.ads?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -45,7 +45,6 @@ package System.Task_Primitives is\n    pragma Preelaborate;\n \n    type Lock is limited private;\n-   type RW_Lock is limited private;\n    --  Should be used for implementation of protected objects\n \n    type RTS_Lock is limited private;\n@@ -83,8 +82,6 @@ private\n       Ceiling : Interfaces.C.int;\n    end record;\n \n-   type RW_Lock is new Lock;\n-\n    type RTS_Lock is new System.OS_Interface.pthread_mutex_t;\n \n    type Suspension_Object is record"}, {"sha": "891dee28c9d6f03706fd1ec6e1b4a24a88783d97", "filename": "gcc/ada/s-taspri-vms.ads", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taspri-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taspri-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-vms.ads?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -46,7 +46,6 @@ package System.Task_Primitives is\n    pragma Preelaborate;\n \n    type Lock is limited private;\n-   type RW_Lock is limited private;\n    --  Should be used for implementation of protected objects\n \n    type RTS_Lock is limited private;\n@@ -85,8 +84,6 @@ private\n       Prio_Save : Interfaces.C.int;\n    end record;\n \n-   type RW_Lock is new Lock;\n-\n    type RTS_Lock is new System.OS_Interface.pthread_mutex_t;\n \n    type Suspension_Object is record"}, {"sha": "9b67dd91c28b16c7541ac65f31cc4f0678c3054e", "filename": "gcc/ada/s-taspri-vxworks.ads", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taspri-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-taspri-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-vxworks.ads?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -41,7 +41,6 @@ package System.Task_Primitives is\n    pragma Preelaborate;\n \n    type Lock is limited private;\n-   type RW_Lock is limited private;\n    --  Should be used for implementation of protected objects\n \n    type RTS_Lock is limited private;\n@@ -85,8 +84,6 @@ private\n       --  Priority ceiling of lock\n    end record;\n \n-   type RW_Lock is new Lock;\n-\n    type RTS_Lock is new Lock;\n \n    type Suspension_Object is record"}, {"sha": "88527315e4268a992da4cae1128b76b1c9fa90e3", "filename": "gcc/ada/s-tpoben.adb", "status": "modified", "additions": 9, "deletions": 40, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-tpoben.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-tpoben.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpoben.adb?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -88,11 +88,7 @@ package body System.Tasking.Protected_Objects.Entries is\n          return;\n       end if;\n \n-      if Locking_Policy = 'R' then\n-         STPO.Write_Lock (Object.RWL'Unrestricted_Access, Ceiling_Violation);\n-      else\n-         STPO.Write_Lock (Object.L'Unrestricted_Access, Ceiling_Violation);\n-      end if;\n+      STPO.Write_Lock (Object.L'Unrestricted_Access, Ceiling_Violation);\n \n       if Single_Lock then\n          Lock_RTS;\n@@ -113,12 +109,7 @@ package body System.Tasking.Protected_Objects.Entries is\n             Unlock_RTS;\n          end if;\n \n-         if Locking_Policy = 'R' then\n-            STPO.Write_Lock\n-              (Object.RWL'Unrestricted_Access, Ceiling_Violation);\n-         else\n-            STPO.Write_Lock (Object.L'Unrestricted_Access, Ceiling_Violation);\n-         end if;\n+         STPO.Write_Lock (Object.L'Unrestricted_Access, Ceiling_Violation);\n \n          if Ceiling_Violation then\n             raise Program_Error with \"Ceiling Violation\";\n@@ -158,13 +149,9 @@ package body System.Tasking.Protected_Objects.Entries is\n          Unlock_RTS;\n       end if;\n \n-      if Locking_Policy = 'R' then\n-         STPO.Unlock (Object.RWL'Unrestricted_Access);\n-         STPO.Finalize_Lock (Object.RWL'Unrestricted_Access);\n-      else\n-         STPO.Unlock (Object.L'Unrestricted_Access);\n-         STPO.Finalize_Lock (Object.L'Unrestricted_Access);\n-      end if;\n+      STPO.Unlock (Object.L'Unrestricted_Access);\n+\n+      STPO.Finalize_Lock (Object.L'Unrestricted_Access);\n    end Finalize;\n \n    ----------------------\n@@ -247,13 +234,7 @@ package body System.Tasking.Protected_Objects.Entries is\n       --  pragma Assert (Self_Id.Deferral_Level = 0);\n \n       Initialization.Defer_Abort_Nestable (Self_ID);\n-\n-      if Locking_Policy = 'R' then\n-         Initialize_Lock (Init_Priority, Object.RWL'Access);\n-      else\n-         Initialize_Lock (Init_Priority, Object.L'Access);\n-      end if;\n-\n+      Initialize_Lock (Init_Priority, Object.L'Access);\n       Initialization.Undefer_Abort_Nestable (Self_ID);\n \n       Object.Ceiling          := System.Any_Priority (Init_Priority);\n@@ -329,11 +310,7 @@ package body System.Tasking.Protected_Objects.Entries is\n         (STPO.Self.Deferral_Level > 0\n           or else not Restrictions.Abort_Allowed);\n \n-      if Locking_Policy = 'R' then\n-         Write_Lock (Object.RWL'Access, Ceiling_Violation);\n-      else\n-         Write_Lock (Object.L'Access, Ceiling_Violation);\n-      end if;\n+      Write_Lock (Object.L'Access, Ceiling_Violation);\n \n       --  We are entering in a protected action, so that we increase the\n       --  protected object nesting level (if pragma Detect_Blocking is\n@@ -387,11 +364,7 @@ package body System.Tasking.Protected_Objects.Entries is\n          raise Program_Error;\n       end if;\n \n-      if Locking_Policy = 'R' then\n-         Read_Lock (Object.RWL'Access, Ceiling_Violation);\n-      else\n-         Write_Lock (Object.L'Access, Ceiling_Violation);\n-      end if;\n+      Read_Lock (Object.L'Access, Ceiling_Violation);\n \n       if Ceiling_Violation then\n          raise Program_Error with \"Ceiling Violation\";\n@@ -487,11 +460,7 @@ package body System.Tasking.Protected_Objects.Entries is\n          Object.Ceiling := Object.New_Ceiling;\n       end if;\n \n-      if Locking_Policy = 'R' then\n-         Unlock (Object.RWL'Access);\n-      else\n-         Unlock (Object.L'Access);\n-      end if;\n+      Unlock (Object.L'Access);\n    end Unlock_Entries;\n \n end System.Tasking.Protected_Objects.Entries;"}, {"sha": "ce7045cf56e2a96fb4d5237d7a97c26fd4871b0f", "filename": "gcc/ada/s-tpoben.ads", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-tpoben.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a63cd58bbe195dfa0041d84efbb7062d649b35/gcc%2Fada%2Fs-tpoben.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpoben.ads?ref=64a63cd58bbe195dfa0041d84efbb7062d649b35", "patch": "@@ -76,8 +76,7 @@ package System.Tasking.Protected_Objects.Entries is\n    type Protection_Entries (Num_Entries : Protected_Entry_Index) is new\n      Ada.Finalization.Limited_Controlled\n    with record\n-      L   : aliased Task_Primitives.Lock;\n-      RWL : aliased Task_Primitives.RW_Lock;\n+      L                 : aliased Task_Primitives.Lock;\n       --  The underlying lock associated with a Protection_Entries.\n       --  Note that you should never (un)lock Object.L directly, but instead\n       --  use Lock_Entries/Unlock_Entries."}]}