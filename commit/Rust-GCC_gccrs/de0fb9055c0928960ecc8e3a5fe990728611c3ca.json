{"sha": "de0fb9055c0928960ecc8e3a5fe990728611c3ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUwZmI5MDU1YzA5Mjg5NjBlY2M4ZTNhNWZlOTkwNzI4NjExYzNjYQ==", "commit": {"author": {"name": "Alexander Basov", "email": "coohpt@gmail.com", "date": "2015-08-03T19:34:31Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-08-03T19:34:31Z"}, "message": "re PR middle-end/64744 (ARM: gcc internal compiler error: in store_field, at expr.c:6659)\n\n\tPR middle-end/64744\n\tPR middle-end/48470\n\tPR middle-end/43404\n\t* cfgexpand.c (expand_one_var): Add check if stack is going to\n\tbe used in naked function.\n\t* expr.c (expand_expr_addr_expr_1): Remove excess checking\n\twhether expression should not reside in MEM.\n\t* function.c (use_register_for_decl): Do not use registers for\n\tnon-register things (volatile, float, BLKMode) in naked functions.\n\n\tPR middle-end/64744\n\tPR middle-end/48470\n\tPR middle-end/43404\n\t* gcc.target/arm/pr43404.c : New testcase.\n\t* gcc.target/arm/pr48470.c : New testcase.\n\t* gcc.target/arm/pr64744-1.c : New testcase.\n\t* gcc.target/arm/pr64744-2.c : New testcase.\n\nFrom-SVN: r226528", "tree": {"sha": "a36a9bce7ffcf52891f3053b06bef0050c844f81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a36a9bce7ffcf52891f3053b06bef0050c844f81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de0fb9055c0928960ecc8e3a5fe990728611c3ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de0fb9055c0928960ecc8e3a5fe990728611c3ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de0fb9055c0928960ecc8e3a5fe990728611c3ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de0fb9055c0928960ecc8e3a5fe990728611c3ca/comments", "author": null, "committer": null, "parents": [{"sha": "f2fef1c8a3a93f320e9842d09a0ad44d0157281b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2fef1c8a3a93f320e9842d09a0ad44d0157281b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2fef1c8a3a93f320e9842d09a0ad44d0157281b"}], "stats": {"total": 123, "additions": 110, "deletions": 13}, "files": [{"sha": "d9fb2c1495dbfb114231b459f38d2ddcbd37ef89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0fb9055c0928960ecc8e3a5fe990728611c3ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0fb9055c0928960ecc8e3a5fe990728611c3ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de0fb9055c0928960ecc8e3a5fe990728611c3ca", "patch": "@@ -1,3 +1,15 @@\n+2015-08-03  Alexander Basov <coohpt@gmail.com>\n+\n+\tPR middle-end/64744\n+\tPR middle-end/48470\n+\tPR middle-end/43404\n+\t* cfgexpand.c (expand_one_var): Add check if stack is going to\n+\tbe used in naked function.\n+\t* expr.c (expand_expr_addr_expr_1): Remove excess checking\n+\twhether expression should not reside in MEM.\n+\t* function.c (use_register_for_decl): Do not use registers for\n+\tnon-register things (volatile, float, BLKMode) in naked functions.\n+\n 2015-08-03  John David Anglin  <danglin@gcc.gnu.org>\n \n \tPR target/67060"}, {"sha": "7df9d06fab33d0be288b226aa412f250853fbd44", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0fb9055c0928960ecc8e3a5fe990728611c3ca/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0fb9055c0928960ecc8e3a5fe990728611c3ca/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=de0fb9055c0928960ecc8e3a5fe990728611c3ca", "patch": "@@ -1335,7 +1335,16 @@ expand_one_var (tree var, bool toplevel, bool really_expand)\n   else\n     {\n       if (really_expand)\n-        expand_one_stack_var (origvar);\n+        {\n+          if (lookup_attribute (\"naked\",\n+                                DECL_ATTRIBUTES (current_function_decl)))\n+            error (\"cannot allocate stack for variable %q+D, naked function.\",\n+                   var);\n+\n+          expand_one_stack_var (origvar);\n+        }\n+\n+\n       return tree_to_uhwi (DECL_SIZE_UNIT (var));\n     }\n   return 0;"}, {"sha": "31b4573009adb02cd1324d2c8d297f88c944d028", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0fb9055c0928960ecc8e3a5fe990728611c3ca/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0fb9055c0928960ecc8e3a5fe990728611c3ca/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=de0fb9055c0928960ecc8e3a5fe990728611c3ca", "patch": "@@ -7603,15 +7603,7 @@ expand_expr_addr_expr_1 (tree exp, rtx target, machine_mode tmode,\n \t     marked TREE_ADDRESSABLE, which will be either a front-end\n \t     or a tree optimizer bug.  */\n \n-\t  if (TREE_ADDRESSABLE (exp)\n-\t      && ! MEM_P (result)\n-\t      && ! targetm.calls.allocate_stack_slots_for_args ())\n-\t    {\n-\t      error (\"local frame unavailable (naked function?)\");\n-\t      return result;\n-\t    }\n-\t  else\n-\t    gcc_assert (MEM_P (result));\n+\t  gcc_assert (MEM_P (result));\n \t  result = XEXP (result, 0);\n \n \t  /* ??? Is this needed anymore?  */"}, {"sha": "20bf3b3a834bab502470c744b01dc15fa2af441d", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0fb9055c0928960ecc8e3a5fe990728611c3ca/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0fb9055c0928960ecc8e3a5fe990728611c3ca/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=de0fb9055c0928960ecc8e3a5fe990728611c3ca", "patch": "@@ -2105,9 +2105,6 @@ aggregate_value_p (const_tree exp, const_tree fntype)\n bool\n use_register_for_decl (const_tree decl)\n {\n-  if (!targetm.calls.allocate_stack_slots_for_args ())\n-    return true;\n-\n   /* Honor volatile.  */\n   if (TREE_SIDE_EFFECTS (decl))\n     return false;\n@@ -2135,6 +2132,9 @@ use_register_for_decl (const_tree decl)\n   if (flag_float_store && FLOAT_TYPE_P (TREE_TYPE (decl)))\n     return false;\n \n+  if (!targetm.calls.allocate_stack_slots_for_args ())\n+    return true;\n+\n   /* If we're not interested in tracking debugging information for\n      this decl, then we can certainly put it in a register.  */\n   if (DECL_IGNORED_P (decl))"}, {"sha": "1fe025bc487ceca6da6d438c26d558cb0b05ae4e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0fb9055c0928960ecc8e3a5fe990728611c3ca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0fb9055c0928960ecc8e3a5fe990728611c3ca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de0fb9055c0928960ecc8e3a5fe990728611c3ca", "patch": "@@ -1,3 +1,13 @@\n+2015-08-03  Alexander Basov <coohpt@gmail.com>\n+\n+\tPR middle-end/64744\n+\tPR middle-end/48470\n+\tPR middle-end/43404\n+\t* gcc.target/arm/pr43404.c : New testcase.\n+\t* gcc.target/arm/pr48470.c : New testcase.\n+\t* gcc.target/arm/pr64744-1.c : New testcase.\n+\t* gcc.target/arm/pr64744-2.c : New testcase.\n+\n 2015-08-03  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR tree-optimization/67077"}, {"sha": "4f2291df6a8793623919d4d0c6865d74af44d708", "filename": "gcc/testsuite/gcc.target/arm/pr43404.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0fb9055c0928960ecc8e3a5fe990728611c3ca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr43404.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0fb9055c0928960ecc8e3a5fe990728611c3ca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr43404.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr43404.c?ref=de0fb9055c0928960ecc8e3a5fe990728611c3ca", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target naked_functions } */\n+/* { dg-options \"-O0\" } */\n+\n+__attribute__ ((naked))\n+void __data_abort(void)\n+{\n+  long foo; /* { dg-error \"cannot allocate stack for variable\" } */\n+  long* bar = &foo;\n+}"}, {"sha": "20343e71bb92a109b209c6d8d5f131e75ef9d930", "filename": "gcc/testsuite/gcc.target/arm/pr48470.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0fb9055c0928960ecc8e3a5fe990728611c3ca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr48470.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0fb9055c0928960ecc8e3a5fe990728611c3ca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr48470.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr48470.c?ref=de0fb9055c0928960ecc8e3a5fe990728611c3ca", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target naked_functions } */\n+/* { dg-options \"-O0\" } */\n+\n+extern void g(int *x);\n+\n+void __attribute__((naked)) f(void)\n+{\n+    int x = 0; /* { dg-error \"cannot allocate stack for variable\" } */\n+    g(&x);\n+}"}, {"sha": "402930351b593b6eee7e63b598fd90ab89504386", "filename": "gcc/testsuite/gcc.target/arm/pr64744-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0fb9055c0928960ecc8e3a5fe990728611c3ca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr64744-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0fb9055c0928960ecc8e3a5fe990728611c3ca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr64744-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr64744-1.c?ref=de0fb9055c0928960ecc8e3a5fe990728611c3ca", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target naked_functions } */\n+/* { dg-options \"-O0\" } */\n+\n+__attribute__((naked))\n+void foo1 ()\n+{\n+  int aa = 0;\n+  int ab = {0};\n+}\n+\n+__attribute__((naked))\n+void foo2() {\n+  char aa [ ] = {}; /* { dg-error \"cannot allocate stack for variable\" } */\n+  char ab [1] = {};\n+  char ac [2] = {}; /* { dg-error \"cannot allocate stack for variable\" } */\n+  char ad [3] = {}; /* { dg-error \"cannot allocate stack for variable\" } */\n+}\n+\n+__attribute__((naked))\n+void foo3() {\n+  char aa [1] = {0};\n+  char ab [2] = {0}; /* { dg-error \"cannot allocate stack for variable\" } */\n+  char ac [3] = {0}; /* { dg-error \"cannot allocate stack for variable\" } */\n+  char ad [4] = {0}; /* { dg-error \"cannot allocate stack for variable\" } */\n+}\n+\n+__attribute__((naked))\n+void foo4() {\n+  char aa [2] = {0,0}; /* { dg-error \"cannot allocate stack for variable\" } */\n+}\n+__attribute__((naked))\n+void foo5() {\n+  char aa [3] = {0,0,0}; /* { dg-error \"cannot allocate stack for variable\" } */\n+}\n+\n+__attribute__((naked))\n+void foo6() {\n+  char aa [4] = {0,0,0,0}; /* { dg-error \"cannot allocate stack for variable\" } */\n+}"}, {"sha": "d33ea7bd5fede443ab836100d1ab4ed6b963deaf", "filename": "gcc/testsuite/gcc.target/arm/pr64744-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de0fb9055c0928960ecc8e3a5fe990728611c3ca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr64744-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de0fb9055c0928960ecc8e3a5fe990728611c3ca/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr64744-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr64744-2.c?ref=de0fb9055c0928960ecc8e3a5fe990728611c3ca", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target naked_functions } */\n+/* { dg-options \"-O0\" } */\n+\n+struct s {\n+  char a;\n+    int b;\n+};\n+\n+__attribute__((naked))\n+void foo () {\n+  struct s x = {}; /* { dg-error \"cannot allocate stack for variable\" } */\n+}"}]}