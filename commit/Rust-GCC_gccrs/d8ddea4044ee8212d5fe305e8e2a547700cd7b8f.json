{"sha": "d8ddea4044ee8212d5fe305e8e2a547700cd7b8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhkZGVhNDA0NGVlODIxMmQ1ZmUzMDVlOGUyYTU0NzcwMGNkN2I4Zg==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2010-06-13T16:05:01Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2010-06-13T16:05:01Z"}, "message": "re PR fortran/31588 (gfortran should be able to output Makefile dependencies with -M* options)\n\n2010-06-13  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/31588\n\tPR fortran/43954\n\t* gfortranspec.c (lang_specific_driver): Removed deprecation\n\twarning for -M.\n\t* lang.opt: Add options -M, -MM, -MD, -MMD, -MF, -MG, -MP, -MT, -MQ.\n\t* lang-specs.h (CPP_FORWARD_OPTIONS): Add -M* options.\n\t* cpp.h (gfc_cpp_makedep): New.\n\t(gfc_cpp_add_dep): New.\n\t(gfc_cpp_add_target): New.\n\t* cpp.c (gfc_cpp_option): Add deps* members.\n\t(gfc_cpp_makedep): New.\n\t(gfc_cpp_add_dep): New.\n\t(gfc_cpp_add_target): New.\n\t(gfc_cpp_init_options): Initialize new options.\n\t(gfc_cpp_handle_option): Handle new options.\n\t(gfc_cpp_post_options): Map new options to libcpp-options.\n\t(gfc_cpp_init): Handle deferred -MQ and -MT options.\n\t(gfc_cpp_done): If requested, write dependencies to file.\n\t* module.c (gfc_dump_module): Add a module filename as target.\n\t* scanner.c (open_included_file): New parameter system; add the\n\tincluded file as dependency.\n\t(gfc_open_included_file): Add the included file as dependency.\n\t(gfc_open_intrinsic_module): Likewise.\n\t* invoke.texi: Removed deprecation warning for -M.\n\t* gfortran.texi: Removed Makefile-dependencies project.\n\nFrom-SVN: r160684", "tree": {"sha": "7a5503c8e4ec3840ceca10f783c86bdc8998d3d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a5503c8e4ec3840ceca10f783c86bdc8998d3d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8ddea4044ee8212d5fe305e8e2a547700cd7b8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ddea4044ee8212d5fe305e8e2a547700cd7b8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8ddea4044ee8212d5fe305e8e2a547700cd7b8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ddea4044ee8212d5fe305e8e2a547700cd7b8f/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d9ca17ba98b2fcf77b8df192634a27f8e5d4d5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d9ca17ba98b2fcf77b8df192634a27f8e5d4d5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d9ca17ba98b2fcf77b8df192634a27f8e5d4d5b"}], "stats": {"total": 277, "additions": 214, "deletions": 63}, "files": [{"sha": "3d7dde7f189b9ffa62279c0bfe50e57cafd279fe", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ddea4044ee8212d5fe305e8e2a547700cd7b8f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ddea4044ee8212d5fe305e8e2a547700cd7b8f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d8ddea4044ee8212d5fe305e8e2a547700cd7b8f", "patch": "@@ -1,3 +1,31 @@\n+2010-06-13  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/31588\n+\tPR fortran/43954\n+\t* gfortranspec.c (lang_specific_driver): Removed deprecation\n+\twarning for -M.\n+\t* lang.opt: Add options -M, -MM, -MD, -MMD, -MF, -MG, -MP, -MT, -MQ.\n+\t* lang-specs.h (CPP_FORWARD_OPTIONS): Add -M* options.\n+\t* cpp.h (gfc_cpp_makedep): New.\n+\t(gfc_cpp_add_dep): New.\n+\t(gfc_cpp_add_target): New.\n+\t* cpp.c (gfc_cpp_option): Add deps* members.\n+\t(gfc_cpp_makedep): New.\n+\t(gfc_cpp_add_dep): New.\n+\t(gfc_cpp_add_target): New.\n+\t(gfc_cpp_init_options): Initialize new options.\n+\t(gfc_cpp_handle_option): Handle new options.\n+\t(gfc_cpp_post_options): Map new options to libcpp-options.\n+\t(gfc_cpp_init): Handle deferred -MQ and -MT options.\n+\t(gfc_cpp_done): If requested, write dependencies to file.\n+\t* module.c (gfc_dump_module): Add a module filename as target.\n+\t* scanner.c (open_included_file): New parameter system; add the\n+\tincluded file as dependency.\n+\t(gfc_open_included_file): Add the included file as dependency.\n+\t(gfc_open_intrinsic_module): Likewise.\n+\t* invoke.texi: Removed deprecation warning for -M.\n+\t* gfortran.texi: Removed Makefile-dependencies project.\n+\n 2010-06-12  Daniel Franke  <franke.daniel@gmail.com>\n \n         * resolve.c (resolve_global_procedure): Improved checking if an"}, {"sha": "7f960f5e5577a4e8fe3adfd2f44373e02737554a", "filename": "gcc/fortran/cpp.c", "status": "modified", "additions": 111, "deletions": 13, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ddea4044ee8212d5fe305e8e2a547700cd7b8f/gcc%2Ffortran%2Fcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ddea4044ee8212d5fe305e8e2a547700cd7b8f/gcc%2Ffortran%2Fcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.c?ref=d8ddea4044ee8212d5fe305e8e2a547700cd7b8f", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"../../libcpp/internal.h\"\n #include \"cpp.h\"\n #include \"incpath.h\"\n+#include \"mkdeps.h\"\n \n #ifndef TARGET_OS_CPP_BUILTINS\n # define TARGET_OS_CPP_BUILTINS()\n@@ -84,6 +85,12 @@ struct gfc_cpp_option_data\n   int no_predefined;                    /* -undef */\n   int standard_include_paths;           /* -nostdinc */\n   int verbose;                          /* -v */\n+  int deps;                             /* -M */\n+  int deps_skip_system;                 /* -MM */\n+  const char *deps_filename;            /* -M[M]D */\n+  const char *deps_filename_user;       /* -MF <arg> */\n+  int deps_missing_are_generated;       /* -MG */\n+  int deps_phony;                       /* -MP */\n \n   const char *multilib;                 /* -imultilib <dir>  */\n   const char *prefix;                   /* -iprefix <dir>  */\n@@ -270,6 +277,26 @@ gfc_cpp_preprocess_only (void)\n   return gfc_cpp_option.preprocess_only;\n }\n \n+bool\n+gfc_cpp_makedep (void)\n+{\n+  return gfc_cpp_option.deps;\n+}\n+\n+void\n+gfc_cpp_add_dep (const char *name, bool system)\n+{\n+  if (!gfc_cpp_option.deps_skip_system || !system)\n+    deps_add_dep (cpp_get_deps (cpp_in), name);\n+}\n+\n+void\n+gfc_cpp_add_target (const char *name)\n+{\n+  deps_add_target (cpp_get_deps (cpp_in), name, 0);\n+}\n+\n+\n const char *\n gfc_cpp_temporary_file (void)\n {\n@@ -299,6 +326,12 @@ gfc_cpp_init_options (unsigned int argc,\n   gfc_cpp_option.no_predefined = 0;\n   gfc_cpp_option.standard_include_paths = 1;\n   gfc_cpp_option.verbose = 0;\n+  gfc_cpp_option.deps = 0;\n+  gfc_cpp_option.deps_skip_system = 0;\n+  gfc_cpp_option.deps_phony = 0;\n+  gfc_cpp_option.deps_missing_are_generated = 0;\n+  gfc_cpp_option.deps_filename = NULL;\n+  gfc_cpp_option.deps_filename_user = NULL;\n \n   gfc_cpp_option.multilib = NULL;\n   gfc_cpp_option.prefix = NULL;\n@@ -414,6 +447,43 @@ gfc_cpp_handle_option (size_t scode, const char *arg, int value ATTRIBUTE_UNUSED\n       gfc_cpp_option.print_include_names = 1;\n       break;\n \n+    case OPT_MM:\n+      gfc_cpp_option.deps_skip_system = 1;\n+      /* fall through */\n+\n+    case OPT_M:\n+      gfc_cpp_option.deps = 1;\n+      break;\n+\n+    case OPT_MMD:\n+      gfc_cpp_option.deps_skip_system = 1;\n+      /* fall through */\n+\n+    case OPT_MD:\n+      gfc_cpp_option.deps = 1;\n+      gfc_cpp_option.deps_filename = arg;\n+      break;\n+\n+    case OPT_MF:\n+      /* If specified multiple times, last one wins.  */\n+      gfc_cpp_option.deps_filename_user = arg;\n+      break;\n+\n+    case OPT_MG:\n+      gfc_cpp_option.deps_missing_are_generated = 1;\n+      break;\n+\n+    case OPT_MP:\n+      gfc_cpp_option.deps_phony = 1;\n+      break;\n+\n+    case OPT_MQ:\n+    case OPT_MT:\n+      gfc_cpp_option.deferred_opt[gfc_cpp_option.deferred_opt_count].code = code;\n+      gfc_cpp_option.deferred_opt[gfc_cpp_option.deferred_opt_count].arg = arg;\n+      gfc_cpp_option.deferred_opt_count++;\n+      break;\n+\n     case OPT_P:\n       gfc_cpp_option.no_line_commands = 1;\n       break;\n@@ -430,16 +500,17 @@ gfc_cpp_post_options (void)\n      an error.  */\n   if (!gfc_cpp_enabled ()\n       && (gfc_cpp_preprocess_only ()\n-          || !gfc_cpp_option.discard_comments\n-          || !gfc_cpp_option.discard_comments_in_macro_exp\n-          || gfc_cpp_option.print_include_names\n-          || gfc_cpp_option.no_line_commands\n-          || gfc_cpp_option.dump_macros\n-          || gfc_cpp_option.dump_includes))\n+\t  || gfc_cpp_makedep ()\n+\t  || !gfc_cpp_option.discard_comments\n+\t  || !gfc_cpp_option.discard_comments_in_macro_exp\n+\t  || gfc_cpp_option.print_include_names\n+\t  || gfc_cpp_option.no_line_commands\n+\t  || gfc_cpp_option.dump_macros\n+\t  || gfc_cpp_option.dump_includes))\n     gfc_fatal_error(\"To enable preprocessing, use -cpp\");\n \n   cpp_in = cpp_create_reader (CLK_GNUC89, NULL, line_table);\n-  if (!gfc_cpp_enabled())\n+  if (!gfc_cpp_enabled ())\n     return;\n \n   gcc_assert (cpp_in);\n@@ -462,6 +533,17 @@ gfc_cpp_post_options (void)\n   cpp_option->print_include_names = gfc_cpp_option.print_include_names;\n   cpp_option->preprocessed = gfc_option.flag_preprocessed;\n \n+  if (gfc_cpp_makedep ())\n+    {\n+      cpp_option->deps.style = DEPS_USER;\n+      cpp_option->deps.phony_targets = gfc_cpp_option.deps_phony;\n+      cpp_option->deps.missing_files = gfc_cpp_option.deps_missing_are_generated;\n+\n+      /* -MF <arg> overrides -M[M]D.  */\n+      if (gfc_cpp_option.deps_filename_user)\n+\tgfc_cpp_option.deps_filename = gfc_cpp_option.deps_filename_user;\n+  }\n+\n   if (gfc_cpp_option.working_directory == -1)\n     gfc_cpp_option.working_directory = (debug_info_level != DINFO_LEVEL_NONE);\n \n@@ -572,6 +654,9 @@ gfc_cpp_init (void)\n \t  else\n \t    cpp_assert (cpp_in, opt->arg);\n \t}\n+      else if (opt->code == OPT_MT || opt->code == OPT_MQ)\n+\tdeps_add_target (cpp_get_deps (cpp_in),\n+\t\t\t opt->arg, opt->code == OPT_MQ);\n     }\n \n   if (gfc_cpp_option.working_directory\n@@ -615,14 +700,27 @@ gfc_cpp_done (void)\n   if (!gfc_cpp_enabled ())\n     return;\n \n-  /* TODO: if dependency tracking was enabled, call\n-     cpp_finish() here to write dependencies.\n+  gcc_assert (cpp_in);\n \n-     Use cpp_get_deps() to access the current source's\n-     dependencies during parsing. Add dependencies using\n-     the mkdeps-interface (defined in libcpp).  */\n+  if (gfc_cpp_makedep ())\n+    {\n+      if (gfc_cpp_option.deps_filename)\n+\t{\n+\t  FILE *f = fopen (gfc_cpp_option.deps_filename, \"w\");\n+\t  if (f)\n+\t    {\n+\t      cpp_finish (cpp_in, f);\n+\t      fclose (f);\n+\t    }\n+\t  else\n+\t    gfc_fatal_error (\"opening output file %s: %s\",\n+\t\t\t     gfc_cpp_option.deps_filename,\n+\t\t\t     xstrerror (errno));\n+\t}\n+      else\n+\tcpp_finish (cpp_in, stdout);\n+    }\n \n-  gcc_assert (cpp_in);\n   cpp_undef_all (cpp_in);\n   cpp_clear_file_cache (cpp_in);\n }"}, {"sha": "556eecbc099a94d64435740fb8f1136538abc77c", "filename": "gcc/fortran/cpp.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ddea4044ee8212d5fe305e8e2a547700cd7b8f/gcc%2Ffortran%2Fcpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ddea4044ee8212d5fe305e8e2a547700cd7b8f/gcc%2Ffortran%2Fcpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.h?ref=d8ddea4044ee8212d5fe305e8e2a547700cd7b8f", "patch": "@@ -24,6 +24,12 @@ bool gfc_cpp_enabled (void);\n \n bool gfc_cpp_preprocess_only (void);\n \n+bool gfc_cpp_makedep (void);\n+\n+void gfc_cpp_add_dep (const char *name, bool system);\n+\n+void gfc_cpp_add_target (const char *name);\n+\n const char *gfc_cpp_temporary_file (void);\n \n "}, {"sha": "939ae616e8a1b0cb340e7a6963c26cf35ef14524", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ddea4044ee8212d5fe305e8e2a547700cd7b8f/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ddea4044ee8212d5fe305e8e2a547700cd7b8f/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=d8ddea4044ee8212d5fe305e8e2a547700cd7b8f", "patch": "@@ -2651,9 +2651,6 @@ J3 Fortran 95 standard.\n @item\n User-specified alignment rules for structures.\n \n-@item\n-Flag to generate @code{Makefile} info.\n-\n @item\n Automatically extend single precision constants to double.\n "}, {"sha": "61f1547c87c0bb7674347d71b9d683b8649e1fee", "filename": "gcc/fortran/gfortranspec.c", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ddea4044ee8212d5fe305e8e2a547700cd7b8f/gcc%2Ffortran%2Fgfortranspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ddea4044ee8212d5fe305e8e2a547700cd7b8f/gcc%2Ffortran%2Fgfortranspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortranspec.c?ref=d8ddea4044ee8212d5fe305e8e2a547700cd7b8f", "patch": "@@ -424,35 +424,6 @@ For more information about these matters, see the file named COPYING\\n\\n\"));\n \t  continue;\n \t}\n \n-      if ((argv[i][0] == '-') && (argv[i][1] == 'M'))\n-\t{\n-\t  char *p;\n-\n-\t  warning (0, \"using -M <directory> is deprecated, use -J instead\");\n-\t  if (argv[i][2] == '\\0')\n-\t    {\n-\t      if (i+1 < argc)\n-\t\t{\n-\t\t  p = XNEWVEC (char, strlen (argv[i + 1]) + 3);\n-\t\t  p[0] = '-';\n-\t\t  p[1] = 'J';\n-\t\t  strcpy (&p[2], argv[i + 1]);\n-\t\t  i++;\n-\t\t}\n-\t      else\n-\t\tfatal_error (\"argument to %qs missing\", argv[i]);\n-\t    }\n-\t  else\n-\t    {\n-\t      p = XNEWVEC (char, strlen (argv[i]) + 1);\n-\t      p[0] = '-';\n-\t      p[1] = 'J';\n-\t      strcpy (&p[2], argv[i] + 2);\n-\t    }\n-\t  append_arg (p);\n-\t  continue;\n-\t}\n-\n       if ((argv[i][0] == '-') && (argv[i][1] != 'l'))\n \t{\n \t  /* Not a filename or library.  */"}, {"sha": "1dfd3bdd920ba8668870174c5c0574faf518c63f", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ddea4044ee8212d5fe305e8e2a547700cd7b8f/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ddea4044ee8212d5fe305e8e2a547700cd7b8f/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=d8ddea4044ee8212d5fe305e8e2a547700cd7b8f", "patch": "@@ -148,8 +148,7 @@ and warnings}.\n \n @item Directory Options\n @xref{Directory Options,,Options for directory search}.\n-@gccoptlist{-I@var{dir}  -J@var{dir}  -M@var{dir}  @gol\n--fintrinsic-modules-path @var{dir}}\n+@gccoptlist{-I@var{dir}  -J@var{dir} -fintrinsic-modules-path @var{dir}}\n \n @item Link Options\n @xref{Link Options,,Options for influencing the linking step}.\n@@ -964,7 +963,6 @@ gcc,Using the GNU Compiler Collection (GCC)}, for information on the\n @option{-I} option.\n \n @item -J@var{dir}\n-@item -M@var{dir}\n @opindex @code{J}@var{dir}\n @opindex @code{M}@var{dir}\n @cindex paths, search\n@@ -975,8 +973,6 @@ statement.\n \n The default is the current directory.\n \n-@option{-M} is deprecated to avoid conflicts with existing GCC options.\n-\n @item -fintrinsic-modules-path @var{dir}\n @opindex @code{fintrinsic-modules-path} @var{dir}\n @cindex paths, search"}, {"sha": "4fe24de19279498e0471a7a4b5b84c7932ee2c6c", "filename": "gcc/fortran/lang-specs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ddea4044ee8212d5fe305e8e2a547700cd7b8f/gcc%2Ffortran%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ddea4044ee8212d5fe305e8e2a547700cd7b8f/gcc%2Ffortran%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang-specs.h?ref=d8ddea4044ee8212d5fe305e8e2a547700cd7b8f", "patch": "@@ -28,7 +28,7 @@\n \t\t\t     %{O*} %{undef}\"\n \n /* Options that f951 should know about, even if not preprocessing.  */\n-#define CPP_FORWARD_OPTIONS \"%{i*} %{I*}\"\n+#define CPP_FORWARD_OPTIONS \"%{i*} %{I*} %{M*}\"\n \n #define F951_CPP_OPTIONS    \"%{!nocpp: -cpp %g.f90 %{E} %(cpp_unique_options) \\\n \t\t\t     %{E|M|MM:%(cpp_debug_options) \" CPP_ONLY_OPTIONS \\"}, {"sha": "1f3ef9d0574614da2c4683a6ae76e66a6ae1ad2c", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ddea4044ee8212d5fe305e8e2a547700cd7b8f/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ddea4044ee8212d5fe305e8e2a547700cd7b8f/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=d8ddea4044ee8212d5fe305e8e2a547700cd7b8f", "patch": "@@ -56,6 +56,42 @@ J\n Fortran Joined Separate\n -J<directory>\tPut MODULE files in 'directory'\n \n+M\n+Fortran\n+; Documented in C\n+\n+MD\n+Fortran Separate\n+; Documented in C\n+\n+MF\n+Fortran Joined Separate\n+; Documented in C\n+\n+MG\n+Fortran\n+; Documented in C\n+\n+MM\n+Fortran\n+; Documented in C\n+\n+MMD\n+Fortran Separate\n+; Documented in C\n+\n+MP\n+Fortran\n+; Documented in C\n+\n+MT\n+Fortran Joined Separate\n+; Documented in C\n+\n+MQ\n+Fortran Joined Separate\n+; Documented in C\n+\n P\n Fortran\n ; Documented in C"}, {"sha": "5cd760bf61b52e80e24a8bd3aea774d0fbd07f62", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ddea4044ee8212d5fe305e8e2a547700cd7b8f/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ddea4044ee8212d5fe305e8e2a547700cd7b8f/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=d8ddea4044ee8212d5fe305e8e2a547700cd7b8f", "patch": "@@ -74,6 +74,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"parse.h\" /* FIXME */\n #include \"md5.h\"\n #include \"constructor.h\"\n+#include \"cpp.h\"\n \n #define MODULE_EXTENSION \".mod\"\n \n@@ -5120,6 +5121,9 @@ gfc_dump_module (const char *name, int dump_flag)\n       return;\n     }\n \n+  if (gfc_cpp_makedep ())\n+    gfc_cpp_add_target (filename);\n+\n   /* Write the module to the temporary file.  */\n   module_fp = fopen (filename_tmp, \"w\");\n   if (module_fp == NULL)"}, {"sha": "a8ab2353e8581f44d5673c21dff88b760fa3850c", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ddea4044ee8212d5fe305e8e2a547700cd7b8f/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ddea4044ee8212d5fe305e8e2a547700cd7b8f/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=d8ddea4044ee8212d5fe305e8e2a547700cd7b8f", "patch": "@@ -390,7 +390,8 @@ gfc_release_include_path (void)\n \n \n static FILE *\n-open_included_file (const char *name, gfc_directorylist *list, bool module)\n+open_included_file (const char *name, gfc_directorylist *list,\n+\t\t    bool module, bool system)\n {\n   char *fullname;\n   gfc_directorylist *p;\n@@ -407,7 +408,12 @@ open_included_file (const char *name, gfc_directorylist *list, bool module)\n \n       f = gfc_open_file (fullname);\n       if (f != NULL)\n-\treturn f;\n+\t{\n+\t  if (gfc_cpp_makedep ())\n+\t    gfc_cpp_add_dep (fullname, system);\n+\n+\t  return f;\n+\t}\n     }\n \n   return NULL;\n@@ -421,28 +427,37 @@ open_included_file (const char *name, gfc_directorylist *list, bool module)\n FILE *\n gfc_open_included_file (const char *name, bool include_cwd, bool module)\n {\n-  FILE *f;\n+  FILE *f = NULL;\n \n-  if (IS_ABSOLUTE_PATH (name))\n-    return gfc_open_file (name);\n-\n-  if (include_cwd)\n+  if (IS_ABSOLUTE_PATH (name) || include_cwd)\n     {\n       f = gfc_open_file (name);\n-      if (f != NULL)\n-\treturn f;\n+      if (f && gfc_cpp_makedep ())\n+\tgfc_cpp_add_dep (name, false);\n     }\n \n-  return open_included_file (name, include_dirs, module);\n+  if (!f)\n+    f = open_included_file (name, include_dirs, module, false);\n+\n+  return f;\n }\n \n FILE *\n gfc_open_intrinsic_module (const char *name)\n {\n+  FILE *f = NULL;\n+\n   if (IS_ABSOLUTE_PATH (name))\n-    return gfc_open_file (name);\n+    {\n+      f = gfc_open_file (name);\n+      if (f && gfc_cpp_makedep ())\n+\tgfc_cpp_add_dep (name, true);\n+    }\n+\n+  if (!f)\n+    f = open_included_file (name, intrinsic_modules_dirs, true, true);\n \n-  return open_included_file (name, intrinsic_modules_dirs, true);\n+  return f;\n }\n \n "}]}