{"sha": "a549a9a39a9bd92107667b99a67acbd7ef551323", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU0OWE5YTM5YTliZDkyMTA3NjY3Yjk5YTY3YWNiZDdlZjU1MTMyMw==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-06T01:54:42Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-08T01:10:45Z"}, "message": "Adjust the wording for x86 _Float16 type.\n\ngcc/ChangeLog:\n\n\t* doc/extend.texi: (@node Floating Types): Adjust the wording.\n\t(@node Half-Precision): Ditto.", "tree": {"sha": "ce442665146465d66343ef2b207138a484232bea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce442665146465d66343ef2b207138a484232bea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a549a9a39a9bd92107667b99a67acbd7ef551323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a549a9a39a9bd92107667b99a67acbd7ef551323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a549a9a39a9bd92107667b99a67acbd7ef551323", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a549a9a39a9bd92107667b99a67acbd7ef551323/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2748138c05c6fba1a34f54980b6382bc6332f56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2748138c05c6fba1a34f54980b6382bc6332f56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2748138c05c6fba1a34f54980b6382bc6332f56"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "777dc0f529f0f9acb9963509a1e0156099c6afcc", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a549a9a39a9bd92107667b99a67acbd7ef551323/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a549a9a39a9bd92107667b99a67acbd7ef551323/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=a549a9a39a9bd92107667b99a67acbd7ef551323", "patch": "@@ -1076,9 +1076,10 @@ systems where @code{__float128} is supported.  The @code{_Float32}\n type is supported on all systems supporting IEEE binary32; the\n @code{_Float64} and @code{_Float32x} types are supported on all systems\n supporting IEEE binary64.  The @code{_Float16} type is supported on AArch64\n-systems by default, and on ARM systems when the IEEE format for 16-bit\n-floating-point types is selected with @option{-mfp16-format=ieee}.\n-GCC does not currently support @code{_Float128x} on any systems.\n+systems by default, on ARM systems when the IEEE format for 16-bit\n+floating-point types is selected with @option{-mfp16-format=ieee} and,\n+for both C and C++, on x86 systems with SSE2 enabled. GCC does not currently\n+support @code{_Float128x} on any systems.\n \n On the i386, x86_64, IA-64, and HP-UX targets, you can declare complex\n types using the corresponding internal complex type, @code{XCmode} for\n@@ -1108,6 +1109,9 @@ On ARM and AArch64 targets, GCC supports half-precision (16-bit) floating\n point via the @code{__fp16} type defined in the ARM C Language Extensions.\n On ARM systems, you must enable this type explicitly with the\n @option{-mfp16-format} command-line option in order to use it.\n+On x86 targets with SSE2 enabled, GCC supports half-precision (16-bit)\n+floating point via the @code{_Float16} type. For C++, x86 provides a builtin\n+type named @code{_Float16} which contains same data format as C.\n \n ARM targets support two incompatible representations for half-precision\n floating-point values.  You must choose one of the representations and\n@@ -1151,17 +1155,12 @@ calls.\n It is recommended that portable code use the @code{_Float16} type defined\n by ISO/IEC TS 18661-3:2015.  @xref{Floating Types}.\n \n-On x86 targets with @code{target(\"sse2\")} and above, GCC supports half-precision\n-(16-bit) floating point via the @code{_Float16} type which is defined by\n-18661-3:2015. For C++, x86 provide a builtin type named @code{_Float16}\n-which contains same data format as C.\n-\n-Without @option{-mavx512fp16}, @code{_Float16} type is storage only, all\n-operations will be emulated by software emulation and the @code{float}\n-instructions. The default behavior for @code{FLT_EVAL_METHOD} is to keep\n-the intermediate result of the operation as 32-bit precision. This may lead\n-to inconsistent behavior between software emulation and AVX512-FP16\n-instructions.\n+On x86 targets with SSE2 enabled, without @option{-mavx512fp16},\n+@code{_Float16} type is storage only, all operations will be emulated by\n+software emulation and the @code{float} instructions. The default behavior\n+for @code{FLT_EVAL_METHOD} is to keep the intermediate result of the operation\n+as 32-bit precision. This may lead to inconsistent behavior between software\n+emulation and AVX512-FP16 instructions.\n \n @node Decimal Float\n @section Decimal Floating Types"}]}