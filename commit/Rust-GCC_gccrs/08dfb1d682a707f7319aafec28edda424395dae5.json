{"sha": "08dfb1d682a707f7319aafec28edda424395dae5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhkZmIxZDY4MmE3MDdmNzMxOWFhZmVjMjhlZGRhNDI0Mzk1ZGFlNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-07-08T11:46:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-07-08T11:46:26Z"}, "message": "re PR tree-optimization/91108 (Fails to pun through unions)\n\n2019-07-08  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/91108\n\t* tree-ssa-sccvn.c: Include builtins.h.\n\t(vn_reference_lookup_3): Use only alignment constraints to\n\tverify same-valued store disambiguation.\n\n\t* gcc.dg/tree-ssa/ssa-fre-61.c: Adjust back.\n\t* gcc.dg/tree-ssa/ssa-fre-78.c: New testcase.\n\nFrom-SVN: r273232", "tree": {"sha": "dd659e7669e81dbe8c6fa879216ee29a505dd80a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd659e7669e81dbe8c6fa879216ee29a505dd80a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08dfb1d682a707f7319aafec28edda424395dae5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08dfb1d682a707f7319aafec28edda424395dae5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08dfb1d682a707f7319aafec28edda424395dae5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08dfb1d682a707f7319aafec28edda424395dae5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b68cae81760cd158ee465466280fc0df58e6a768", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b68cae81760cd158ee465466280fc0df58e6a768", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b68cae81760cd158ee465466280fc0df58e6a768"}], "stats": {"total": 65, "additions": 46, "deletions": 19}, "files": [{"sha": "dbe70b9a98e5a195a72e51d172bdab555ea53c94", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08dfb1d682a707f7319aafec28edda424395dae5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08dfb1d682a707f7319aafec28edda424395dae5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=08dfb1d682a707f7319aafec28edda424395dae5", "patch": "@@ -1,3 +1,9 @@\n+2019-07-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91108\n+\t* gcc.dg/tree-ssa/ssa-fre-61.c: Adjust back.\n+\t* gcc.dg/tree-ssa/ssa-fre-78.c: New testcase.\n+\n 2019-07-08  Jim Wilson  <jimw@sifive.com>\n \n \t* gcc.target/riscv/shift-shift-2.c: Add one more test."}, {"sha": "a4d9a7194bf8a05b37b3612a5570b59de3b16a20", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-61.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08dfb1d682a707f7319aafec28edda424395dae5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-61.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08dfb1d682a707f7319aafec28edda424395dae5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-61.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-61.c?ref=08dfb1d682a707f7319aafec28edda424395dae5", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do link } */\n-/* { dg-options \"-O -fstrict-aliasing -fdump-tree-fre1-details\" } */\n+/* { dg-options \"-O -fdump-tree-fre1-details\" } */\n \n void link_error (void);\n "}, {"sha": "4ad232ea12326a797da7bdd5b6ec337f82e51e60", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-78.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08dfb1d682a707f7319aafec28edda424395dae5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08dfb1d682a707f7319aafec28edda424395dae5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-78.c?ref=08dfb1d682a707f7319aafec28edda424395dae5", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -fstrict-aliasing\" } */\n+\n+union U {\n+  struct A { int : 2; int x : 8; } a;\n+  struct B { int : 6; int x : 8; } b;\n+};\n+\n+int __attribute__((noipa))\n+foo (union U *p, union U *q)\n+{\n+  p->a.x = 1;\n+  q->b.x = 1;\n+  return p->a.x;\n+}\n+\n+int\n+main()\n+{\n+  union U x;\n+  if (foo (&x, &x) != x.a.x)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* We support arbitrary punning through unions when it happens through\n+   the union type and thus p == q is valid here.  */"}, {"sha": "854222a0cc2327332c0fecf9bc258adbc864e916", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08dfb1d682a707f7319aafec28edda424395dae5/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08dfb1d682a707f7319aafec28edda424395dae5/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=08dfb1d682a707f7319aafec28edda424395dae5", "patch": "@@ -70,6 +70,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-loop.h\"\n #include \"tree-scalar-evolution.h\"\n #include \"tree-ssa-loop-niter.h\"\n+#include \"builtins.h\"\n #include \"tree-ssa-sccvn.h\"\n \n /* This algorithm is based on the SCC algorithm presented by Keith\n@@ -2248,24 +2249,10 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n       /* If we reach a clobbering statement try to skip it and see if\n          we find a VN result with exactly the same value as the\n \t possible clobber.  In this case we can ignore the clobber\n-\t and return the found value.\n-\t Note that we don't need to worry about partial overlapping\n-\t accesses as we then can use TBAA to disambiguate against the\n-\t clobbering statement when looking up a load (thus the\n-\t VN_WALKREWRITE guard).  */\n-      if (data->vn_walk_kind == VN_WALKREWRITE\n-\t  && is_gimple_reg_type (TREE_TYPE (lhs))\n+\t and return the found value.  */\n+      if (is_gimple_reg_type (TREE_TYPE (lhs))\n \t  && types_compatible_p (TREE_TYPE (lhs), vr->type)\n-\t  /* The overlap restriction breaks down when either access\n-\t     alias-set is zero.  Still for accesses of the size of\n-\t     an addressable unit there can be no overlaps.  Overlaps\n-\t     between different union members are not an issue since\n-\t     activation of a union member via a store makes the\n-\t     values of untouched bytes unspecified.  */\n-\t  && (known_eq (ref->size, BITS_PER_UNIT)\n-\t      || (flag_strict_aliasing\n-\t\t  && get_alias_set (lhs) != 0\n-\t\t  && ao_ref_alias_set (ref) != 0)))\n+\t  && ref->ref)\n \t{\n \t  tree *saved_last_vuse_ptr = data->last_vuse_ptr;\n \t  /* Do not update last_vuse_ptr in vn_reference_lookup_2.  */\n@@ -2284,7 +2271,14 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t      if (TREE_CODE (rhs) == SSA_NAME)\n \t\trhs = SSA_VAL (rhs);\n \t      if (vnresult->result\n-\t\t  && operand_equal_p (vnresult->result, rhs, 0))\n+\t\t  && operand_equal_p (vnresult->result, rhs, 0)\n+\t\t  /* We have to honor our promise about union type punning\n+\t\t     and also support arbitrary overlaps with\n+\t\t     -fno-strict-aliasing.  So simply resort to alignment to\n+\t\t     rule out overlaps.  Do this check last because it is\n+\t\t     quite expensive compared to the hash-lookup above.  */\n+\t\t  && multiple_p (get_object_alignment (ref->ref), ref->size)\n+\t\t  && multiple_p (get_object_alignment (lhs), ref->size))\n \t\treturn res;\n \t    }\n \t}"}]}