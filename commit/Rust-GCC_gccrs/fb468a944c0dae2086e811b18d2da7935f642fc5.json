{"sha": "fb468a944c0dae2086e811b18d2da7935f642fc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI0NjhhOTQ0YzBkYWUyMDg2ZTgxMWIxOGQyZGE3OTM1ZjY0MmZjNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-11T08:48:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-11T08:48:19Z"}, "message": "[multiple changes]\n\n2010-10-11  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch6.adb (Expand_Actuals): If an actual is the current instance of\n\ta task type, it must be replaced with a reference to Self.\n\n2010-10-11  Vincent Celier  <celier@adacore.com>\n\n\t* adaint.h: Add prototype for function __gnat_create_output_file_new.\n\n2010-10-11  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_aggr.adb (Collect_Aggr_Bounds): Remove side effects of collected\n\taggregate bounds.\n\nFrom-SVN: r165280", "tree": {"sha": "1d9dccf79459f8edb5b09308f1dfd14eba524741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d9dccf79459f8edb5b09308f1dfd14eba524741"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb468a944c0dae2086e811b18d2da7935f642fc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb468a944c0dae2086e811b18d2da7935f642fc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb468a944c0dae2086e811b18d2da7935f642fc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb468a944c0dae2086e811b18d2da7935f642fc5/comments", "author": null, "committer": null, "parents": [{"sha": "313d6f2c343c47b112863540d468d905d82a070b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/313d6f2c343c47b112863540d468d905d82a070b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/313d6f2c343c47b112863540d468d905d82a070b"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "30110fb3946ceb2c62deb400850b5316a9f73c44", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb468a944c0dae2086e811b18d2da7935f642fc5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb468a944c0dae2086e811b18d2da7935f642fc5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fb468a944c0dae2086e811b18d2da7935f642fc5", "patch": "@@ -1,3 +1,17 @@\n+2010-10-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Actuals): If an actual is the current instance of\n+\ta task type, it must be replaced with a reference to Self.\n+\n+2010-10-11  Vincent Celier  <celier@adacore.com>\n+\n+\t* adaint.h: Add prototype for function __gnat_create_output_file_new.\n+\n+2010-10-11  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_aggr.adb (Collect_Aggr_Bounds): Remove side effects of collected\n+\taggregate bounds.\n+\n 2010-10-11  Arnaud Charlet  <charlet@adacore.com>\n \n \t* sem_prag.adb (Check_Interrupt_Or_Attach_Handler): Do not emit error"}, {"sha": "e9ef42c6b2b74642f10c22ed88e02fde5fe71118", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb468a944c0dae2086e811b18d2da7935f642fc5/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb468a944c0dae2086e811b18d2da7935f642fc5/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=fb468a944c0dae2086e811b18d2da7935f642fc5", "patch": "@@ -131,6 +131,8 @@ extern int    __gnat_open_read                     (char *, int);\n extern int    __gnat_open_rw                       (char *, int);\n extern int    __gnat_open_create                   (char *, int);\n extern int    __gnat_create_output_file            (char *);\n+extern int    __gnat_create_output_file_new        (char *);\n+\n extern int    __gnat_open_append                   (char *, int);\n extern long   __gnat_file_length                   (int);\n extern long   __gnat_named_file_length             (char *);"}, {"sha": "d94117f41fdd05ff0ad97ea238fbb5ea0fc44ce8", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb468a944c0dae2086e811b18d2da7935f642fc5/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb468a944c0dae2086e811b18d2da7935f642fc5/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=fb468a944c0dae2086e811b18d2da7935f642fc5", "patch": "@@ -1654,6 +1654,24 @@ package body Exp_Ch6 is\n \n             elsif Is_Possibly_Unaligned_Slice (Actual) then\n                Add_Call_By_Copy_Code;\n+\n+            --  An unusual case: a current instance of an enclosing task can be\n+            --  an actual, and must be replaced by a reference to self.\n+\n+            elsif Is_Entity_Name (Actual)\n+              and then Is_Task_Type (Entity (Actual))\n+            then\n+               if In_Open_Scopes (Entity (Actual)) then\n+                  Rewrite (Actual,\n+                    (Make_Function_Call (Loc,\n+                     Name => New_Reference_To (RTE (RE_Self), Loc))));\n+                  Analyze (Actual);\n+\n+               --  A task type cannot otherwise appear as an actual\n+\n+               else\n+                  raise Program_Error;\n+               end if;\n             end if;\n          end if;\n "}, {"sha": "c634b7fb87df5fcbced2fdfe63982c0903e4940d", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb468a944c0dae2086e811b18d2da7935f642fc5/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb468a944c0dae2086e811b18d2da7935f642fc5/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=fb468a944c0dae2086e811b18d2da7935f642fc5", "patch": "@@ -526,9 +526,10 @@ package body Sem_Aggr is\n       Is_Fully_Positional : Boolean := True;\n \n       procedure Collect_Aggr_Bounds (N : Node_Id; Dim : Pos);\n-      --  N is an array (sub-)aggregate. Dim is the dimension corresponding to\n-      --  (sub-)aggregate N. This procedure collects the constrained N_Range\n-      --  nodes corresponding to each index dimension of our aggregate itype.\n+      --  N is an array (sub-)aggregate. Dim is the dimension corresponding\n+      --  to (sub-)aggregate N. This procedure collects and removes the side\n+      --  effects of the constrained N_Range nodes corresponding to each index\n+      --  dimension of our aggregate itype.\n       --  These N_Range nodes are collected in Aggr_Range above.\n       --\n       --  Likewise collect in Aggr_Low & Aggr_High above the low and high\n@@ -552,6 +553,9 @@ package body Sem_Aggr is\n          Expr  : Node_Id;\n \n       begin\n+         Remove_Side_Effects (This_Low,  Variable_Ref => True);\n+         Remove_Side_Effects (This_High, Variable_Ref => True);\n+\n          --  Collect the first N_Range for a given dimension that you find.\n          --  For a given dimension they must be all equal anyway.\n "}]}