{"sha": "87d0d6c40a837c784f9482156766683efd341bed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdkMGQ2YzQwYTgzN2M3ODRmOTQ4MjE1Njc2NjY4M2VmZDM0MWJlZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-03-06T12:34:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-03-06T12:34:28Z"}, "message": "re PR middle-end/64928 (Inordinate cpu time and memory usage in \"phase opt and generate\" with -ftest-coverage -fprofile-arcs)\n\n2015-03-06  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/64928\n\t* tree-ssa-live.h (struct tree_live_info_d): Add livein_obstack\n\tand liveout_obstack members.\n\t(calculate_live_on_exit): Remove.\n\t(calculate_live_ranges): Change declaration.\n\t* tree-ssa-live.c (liveness_bitmap_obstack): Remove global var.\n\t(new_tree_live_info): Adjust.\n\t(calculate_live_ranges): Delete livein when not wanted.\n\t(calculate_live_ranges): Do not initialize liveness_bitmap_obstack.\n\tDeal with partly deleted live info.\n\t(loe_visit_block): Remove temporary bitmap by using\n\tbitmap_ior_and_compl_into.\n\t(live_worklist): Adjust accordingly.\n\t(calculate_live_on_exit): Make static.\n\t* tree-ssa-coalesce.c (coalesce_ssa_name): Tell calculate_live_ranges\n\twe do not need livein.\n\nFrom-SVN: r221237", "tree": {"sha": "4296be3815c3cf0efbf1c6964f960cee0eedb0f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4296be3815c3cf0efbf1c6964f960cee0eedb0f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87d0d6c40a837c784f9482156766683efd341bed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87d0d6c40a837c784f9482156766683efd341bed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87d0d6c40a837c784f9482156766683efd341bed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87d0d6c40a837c784f9482156766683efd341bed/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "664e99eac4333f9978959e9d8636b8e0d36527d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/664e99eac4333f9978959e9d8636b8e0d36527d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/664e99eac4333f9978959e9d8636b8e0d36527d5"}], "stats": {"total": 93, "additions": 61, "deletions": 32}, "files": [{"sha": "6573a00c5ca1ca284b19de88931c7e8b15a06188", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87d0d6c40a837c784f9482156766683efd341bed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87d0d6c40a837c784f9482156766683efd341bed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87d0d6c40a837c784f9482156766683efd341bed", "patch": "@@ -1,3 +1,22 @@\n+2015-03-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/64928\n+\t* tree-ssa-live.h (struct tree_live_info_d): Add livein_obstack\n+\tand liveout_obstack members.\n+\t(calculate_live_on_exit): Remove.\n+\t(calculate_live_ranges): Change declaration.\n+\t* tree-ssa-live.c (liveness_bitmap_obstack): Remove global var.\n+\t(new_tree_live_info): Adjust.\n+\t(calculate_live_ranges): Delete livein when not wanted.\n+\t(calculate_live_ranges): Do not initialize liveness_bitmap_obstack.\n+\tDeal with partly deleted live info.\n+\t(loe_visit_block): Remove temporary bitmap by using\n+\tbitmap_ior_and_compl_into.\n+\t(live_worklist): Adjust accordingly.\n+\t(calculate_live_on_exit): Make static.\n+\t* tree-ssa-coalesce.c (coalesce_ssa_name): Tell calculate_live_ranges\n+\twe do not need livein.\n+\n 2015-03-06  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* real.c (real_from_string): Fix typo in assertion."}, {"sha": "1afeefef2ef7312802b4c9000d44e17ab7ed01e9", "filename": "gcc/tree-ssa-coalesce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87d0d6c40a837c784f9482156766683efd341bed/gcc%2Ftree-ssa-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87d0d6c40a837c784f9482156766683efd341bed/gcc%2Ftree-ssa-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.c?ref=87d0d6c40a837c784f9482156766683efd341bed", "patch": "@@ -1344,7 +1344,7 @@ coalesce_ssa_name (void)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     dump_var_map (dump_file, map);\n \n-  liveinfo = calculate_live_ranges (map);\n+  liveinfo = calculate_live_ranges (map, false);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     dump_live_info (dump_file, liveinfo, LIVEDUMP_ENTRY);"}, {"sha": "e0c4266938fde4e6cd64627dee643dd5fb862e4a", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 36, "deletions": 29, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87d0d6c40a837c784f9482156766683efd341bed/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87d0d6c40a837c784f9482156766683efd341bed/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=87d0d6c40a837c784f9482156766683efd341bed", "patch": "@@ -973,13 +973,6 @@ remove_unused_locals (void)\n   timevar_pop (TV_REMOVE_UNUSED);\n }\n \n-/* Obstack for globale liveness info bitmaps.  We don't want to put these\n-   on the default obstack because these bitmaps can grow quite large and\n-   we'll hold on to all that memory until the end of the compiler run.\n-   As a bonus, delete_tree_live_info can destroy all the bitmaps by just\n-   releasing the whole obstack.  */\n-static bitmap_obstack liveness_bitmap_obstack;\n-\n /* Allocate and return a new live range information object base on MAP.  */\n \n static tree_live_info_p\n@@ -992,18 +985,20 @@ new_tree_live_info (var_map map)\n   live->map = map;\n   live->num_blocks = last_basic_block_for_fn (cfun);\n \n+  bitmap_obstack_initialize (&live->livein_obstack);\n+  bitmap_obstack_initialize (&live->liveout_obstack);\n   live->livein = XNEWVEC (bitmap_head, last_basic_block_for_fn (cfun));\n   FOR_EACH_BB_FN (bb, cfun)\n-    bitmap_initialize (&live->livein[bb->index], &liveness_bitmap_obstack);\n+    bitmap_initialize (&live->livein[bb->index], &live->livein_obstack);\n \n   live->liveout = XNEWVEC (bitmap_head, last_basic_block_for_fn (cfun));\n   FOR_EACH_BB_FN (bb, cfun)\n-    bitmap_initialize (&live->liveout[bb->index], &liveness_bitmap_obstack);\n+    bitmap_initialize (&live->liveout[bb->index], &live->liveout_obstack);\n \n   live->work_stack = XNEWVEC (int, last_basic_block_for_fn (cfun));\n   live->stack_top = live->work_stack;\n \n-  live->global = BITMAP_ALLOC (&liveness_bitmap_obstack);\n+  live->global = BITMAP_ALLOC (NULL);\n   return live;\n }\n \n@@ -1013,10 +1008,18 @@ new_tree_live_info (var_map map)\n void\n delete_tree_live_info (tree_live_info_p live)\n {\n-  bitmap_obstack_release (&liveness_bitmap_obstack);\n+  if (live->livein)\n+    {\n+      bitmap_obstack_release (&live->livein_obstack);\n+      free (live->livein);\n+    }\n+  if (live->liveout)\n+    {\n+      bitmap_obstack_release (&live->liveout_obstack);\n+      free (live->liveout);\n+    }\n+  BITMAP_FREE (live->global);\n   free (live->work_stack);\n-  free (live->liveout);\n-  free (live->livein);\n   free (live);\n }\n \n@@ -1027,8 +1030,7 @@ delete_tree_live_info (tree_live_info_p live)\n    it each time.  */\n \n static void\n-loe_visit_block (tree_live_info_p live, basic_block bb, sbitmap visited,\n-\t\t bitmap tmp)\n+loe_visit_block (tree_live_info_p live, basic_block bb, sbitmap visited)\n {\n   edge e;\n   bool change;\n@@ -1046,17 +1048,17 @@ loe_visit_block (tree_live_info_p live, basic_block bb, sbitmap visited,\n       pred_bb = e->src;\n       if (pred_bb == ENTRY_BLOCK_PTR_FOR_FN (cfun))\n \tcontinue;\n-      /* TMP is variables live-on-entry from BB that aren't defined in the\n+      /* Variables live-on-entry from BB that aren't defined in the\n \t predecessor block.  This should be the live on entry vars to pred.\n \t Note that liveout is the DEFs in a block while live on entry is\n-\t being calculated.  */\n-      bitmap_and_compl (tmp, loe, &live->liveout[pred_bb->index]);\n-\n-      /* Add these bits to live-on-entry for the pred. if there are any\n+\t being calculated.\n+\t Add these bits to live-on-entry for the pred. if there are any\n \t changes, and pred_bb has been visited already, add it to the\n \t revisit stack.  */\n-      change = bitmap_ior_into (live_on_entry (live, pred_bb), tmp);\n-      if (bitmap_bit_p (visited, pred_bb->index) && change)\n+      change = bitmap_ior_and_compl_into (live_on_entry (live, pred_bb),\n+\t\t\t\t\t  loe, &live->liveout[pred_bb->index]);\n+      if (change\n+\t  && bitmap_bit_p (visited, pred_bb->index))\n \t{\n \t  bitmap_clear_bit (visited, pred_bb->index);\n \t  *(live->stack_top)++ = pred_bb->index;\n@@ -1074,23 +1076,21 @@ live_worklist (tree_live_info_p live)\n   unsigned b;\n   basic_block bb;\n   sbitmap visited = sbitmap_alloc (last_basic_block_for_fn (cfun) + 1);\n-  bitmap tmp = BITMAP_ALLOC (&liveness_bitmap_obstack);\n \n   bitmap_clear (visited);\n \n   /* Visit all the blocks in reverse order and propagate live on entry values\n      into the predecessors blocks.  */\n   FOR_EACH_BB_REVERSE_FN (bb, cfun)\n-    loe_visit_block (live, bb, visited, tmp);\n+    loe_visit_block (live, bb, visited);\n \n   /* Process any blocks which require further iteration.  */\n   while (live->stack_top != live->work_stack)\n     {\n       b = *--(live->stack_top);\n-      loe_visit_block (live, BASIC_BLOCK_FOR_FN (cfun, b), visited, tmp);\n+      loe_visit_block (live, BASIC_BLOCK_FOR_FN (cfun, b), visited);\n     }\n \n-  BITMAP_FREE (tmp);\n   sbitmap_free (visited);\n }\n \n@@ -1175,7 +1175,7 @@ set_var_live_on_entry (tree ssa_name, tree_live_info_p live)\n \n /* Calculate the live on exit vectors based on the entry info in LIVEINFO.  */\n \n-void\n+static void\n calculate_live_on_exit (tree_live_info_p liveinfo)\n {\n   basic_block bb;\n@@ -1226,13 +1226,12 @@ calculate_live_on_exit (tree_live_info_p liveinfo)\n    each partition.  Return a new live info object.  */\n \n tree_live_info_p\n-calculate_live_ranges (var_map map)\n+calculate_live_ranges (var_map map, bool want_livein)\n {\n   tree var;\n   unsigned i;\n   tree_live_info_p live;\n \n-  bitmap_obstack_initialize (&liveness_bitmap_obstack);\n   live = new_tree_live_info (map);\n   for (i = 0; i < num_var_partitions (map); i++)\n     {\n@@ -1248,6 +1247,14 @@ calculate_live_ranges (var_map map)\n #endif\n \n   calculate_live_on_exit (live);\n+\n+  if (!want_livein)\n+    {\n+      bitmap_obstack_release (&live->livein_obstack);\n+      free (live->livein);\n+      live->livein = NULL;\n+    }\n+\n   return live;\n }\n "}, {"sha": "d5d78209ce998c8c886c76c42d270dac0fac5727", "filename": "gcc/tree-ssa-live.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87d0d6c40a837c784f9482156766683efd341bed/gcc%2Ftree-ssa-live.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87d0d6c40a837c784f9482156766683efd341bed/gcc%2Ftree-ssa-live.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.h?ref=87d0d6c40a837c784f9482156766683efd341bed", "patch": "@@ -242,15 +242,18 @@ typedef struct tree_live_info_d\n \n   /* Top of workstack.  */\n   int *stack_top;\n+\n+  /* Obstacks to allocate the bitmaps on.  */\n+  bitmap_obstack livein_obstack;\n+  bitmap_obstack liveout_obstack;\n } *tree_live_info_p;\n \n \n #define LIVEDUMP_ENTRY\t0x01\n #define LIVEDUMP_EXIT\t0x02\n #define LIVEDUMP_ALL\t(LIVEDUMP_ENTRY | LIVEDUMP_EXIT)\n extern void delete_tree_live_info (tree_live_info_p);\n-extern void calculate_live_on_exit (tree_live_info_p);\n-extern tree_live_info_p calculate_live_ranges (var_map);\n+extern tree_live_info_p calculate_live_ranges (var_map, bool);\n extern void debug (tree_live_info_d &ref);\n extern void debug (tree_live_info_d *ptr);\n extern void dump_live_info (FILE *, tree_live_info_p, int);"}]}