{"sha": "264ddbaa683da65a254b012d178149830339d502", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY0ZGRiYWE2ODNkYTY1YTI1NGIwMTJkMTc4MTQ5ODMwMzM5ZDUwMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-01-14T09:08:51Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-01-14T09:08:51Z"}, "message": "vax.h (RETURN_POPS_ARGS): Max at 255 arguments.\n\n        * config/vax/vax.h (RETURN_POPS_ARGS): Max at 255 arguments.\n        * config/vax/vax.md (call_pop): Turn into an expander.\n        (call_value_pop): Likewise.\n        (call, call_value): New.\n\nFrom-SVN: r39004", "tree": {"sha": "f8e6c091a891a52da1d35514adec10ed11e38f63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8e6c091a891a52da1d35514adec10ed11e38f63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/264ddbaa683da65a254b012d178149830339d502", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/264ddbaa683da65a254b012d178149830339d502", "html_url": "https://github.com/Rust-GCC/gccrs/commit/264ddbaa683da65a254b012d178149830339d502", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/264ddbaa683da65a254b012d178149830339d502/comments", "author": null, "committer": null, "parents": [{"sha": "5b9b177a8ba102b630ef0cc8ad92b21f7b36b503", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b9b177a8ba102b630ef0cc8ad92b21f7b36b503", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b9b177a8ba102b630ef0cc8ad92b21f7b36b503"}], "stats": {"total": 97, "additions": 53, "deletions": 44}, "files": [{"sha": "a07f54b87baa239baac26af4b375f1f3ec7aca82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264ddbaa683da65a254b012d178149830339d502/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264ddbaa683da65a254b012d178149830339d502/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=264ddbaa683da65a254b012d178149830339d502", "patch": "@@ -5,6 +5,11 @@\n \n \t* config/vax/vax.md (indirect_jump): Use register_operand.\n \n+\t* config/vax/vax.h (RETURN_POPS_ARGS): Max at 255 arguments.\n+\t* config/vax/vax.md (call_pop): Turn into an expander.\n+\t(call_value_pop): Likewise.\n+\t(call, call_value): New.\n+\n 2001-01-14  Andreas Jaeger  <aj@suse.de>\n \n \t* config/i386/i386.c (ix86_split_fp_branch): Remove unused"}, {"sha": "06b6d219d7702ef78f5040660e68cd2ed40d10ae", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264ddbaa683da65a254b012d178149830339d502/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264ddbaa683da65a254b012d178149830339d502/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=264ddbaa683da65a254b012d178149830339d502", "patch": "@@ -369,9 +369,10 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n    or for a library call it is an identifier node for the subroutine name.\n    SIZE is the number of bytes of arguments passed on the stack.\n \n-   On the Vax, the RET insn always pops all the args for any function.  */\n+   On the Vax, the RET insn pops a maximum of 255 args for any function.  */\n \n-#define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE) (SIZE)\n+#define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE) \\\n+  ((SIZE) > 255*4 ? 0 : (SIZE))\n \n /* Define how to find the value returned by a function.\n    VALTYPE is the data type of the value (as a tree)."}, {"sha": "edca8bb5b572216d03b567ba2847213f71915fb3", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 45, "deletions": 42, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264ddbaa683da65a254b012d178149830339d502/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264ddbaa683da65a254b012d178149830339d502/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=264ddbaa683da65a254b012d178149830339d502", "patch": "@@ -1823,63 +1823,66 @@\n ;; It is used in the call instruction as a byte, but in the addl2 as\n ;; a word.  Since the only time we actually use it in the call instruction\n ;; is when it is a constant, SImode (for addl2) is the proper mode.\n-(define_insn \"call_pop\"\n+(define_expand \"call_pop\"\n+  [(parallel [(call (match_operand:QI 0 \"memory_operand\" \"\")\n+\t\t    (match_operand:SI 1 \"const_int_operand\" \"\"))\n+\t      (set (reg:SI 14)\n+\t\t   (plus:SI (reg:SI 14)\n+\t\t\t    (match_operand:SI 3 \"immediate_operand\" \"\")))])]\n+  \"\"\n+  \"\n+{\n+  if (INTVAL (operands[1]) > 255 * 4)\n+    abort ();\n+  operands[1] = GEN_INT ((INTVAL (operands[1]) + 3)/ 4);\n+}\")\n+\n+(define_insn \"*call_pop\"\n   [(call (match_operand:QI 0 \"memory_operand\" \"m\")\n \t (match_operand:SI 1 \"const_int_operand\" \"n\"))\n    (set (reg:SI 14) (plus:SI (reg:SI 14)\n-\t\t\t     (match_operand:SI 3 \"immediate_operand\" \"i\")))]\n+\t\t\t     (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"\"\n-  \"*\n-  if (INTVAL (operands[1]) > 255 * 4)\n-    /* Vax `calls' really uses only one byte of #args, so pop explicitly.  */\n-    return \\\"calls $0,%0\\;addl2 %1,sp\\\";\n-  operands[1] = GEN_INT ((INTVAL (operands[1]) + 3)/ 4);\n-  return \\\"calls %1,%0\\\";\n-\")\n+  \"calls %1,%0\")\n+\n+(define_expand \"call_value_pop\"\n+  [(parallel [(set (match_operand 0 \"\" \"\")\n+\t\t   (call (match_operand:QI 1 \"memory_operand\" \"\")\n+\t\t\t (match_operand:SI 2 \"const_int_operand\" \"\")))\n+\t      (set (reg:SI 14)\n+\t\t   (plus:SI (reg:SI 14)\n+\t\t\t    (match_operand:SI 4 \"immediate_operand\" \"\")))])]\n+  \"\"\n+  \"\n+{\n+  if (INTVAL (operands[2]) > 255 * 4)\n+    abort ();      \n+  operands[2] = GEN_INT ((INTVAL (operands[2]) + 3)/ 4);\n+}\")\n \n-(define_insn \"call_value_pop\"\n-  [(set (match_operand 0 \"\" \"=g\")\n+(define_insn \"*call_value_pop\"\n+  [(set (match_operand 0 \"\" \"\")\n \t(call (match_operand:QI 1 \"memory_operand\" \"m\")\n \t      (match_operand:SI 2 \"const_int_operand\" \"n\")))\n    (set (reg:SI 14) (plus:SI (reg:SI 14)\n-\t\t\t     (match_operand:SI 4 \"immediate_operand\" \"i\")))]\n+\t\t\t     (match_operand:SI 3 \"immediate_operand\" \"i\")))]\n   \"\"\n-  \"*\n-  if (INTVAL (operands[2]) > 255 * 4)\n-    /* Vax `calls' really uses only one byte of #args, so pop explicitly.  */\n-    return \\\"calls $0,%1\\;addl2 %2,sp\\\";\n-  operands[2] = GEN_INT ((INTVAL (operands[2]) + 3)/ 4);\n-  return \\\"calls %2,%1\\\";\n-\")\n+  \"calls %2,%1\")\n \n-;; Define another set of these for the case of functions with no\n-;; operands.  In that case, combine may simplify the adjustment of sp.\n-(define_insn \"\"\n+;; Define another set of these for the case of functions with no operands.\n+;; These will allow the optimizers to do a slightly better job.\n+(define_insn \"call\"\n   [(call (match_operand:QI 0 \"memory_operand\" \"m\")\n-\t (match_operand:SI 1 \"const_int_operand\" \"n\"))\n-   (set (reg:SI 14) (reg:SI 14))]\n+\t (const_int 0))]\n   \"\"\n-  \"*\n-  if (INTVAL (operands[1]) > 255 * 4)\n-    /* Vax `calls' really uses only one byte of #args, so pop explicitly.  */\n-    return \\\"calls $0,%0\\;addl2 %1,sp\\\";\n-  operands[1] = GEN_INT ((INTVAL (operands[1]) + 3)/ 4);\n-  return \\\"calls %1,%0\\\";\n-\")\n+  \"calls $0,%0\")\n \n-(define_insn \"\"\n-  [(set (match_operand 0 \"\" \"=g\")\n+(define_insn \"call_value\"\n+  [(set (match_operand 0 \"\" \"\")\n \t(call (match_operand:QI 1 \"memory_operand\" \"m\")\n-\t      (match_operand:SI 2 \"const_int_operand\" \"n\")))\n-   (set (reg:SI 14) (reg:SI 14))]\n+\t      (const_int 0)))]\n   \"\"\n-  \"*\n-  if (INTVAL (operands[2]) > 255 * 4)\n-    /* Vax `calls' really uses only one byte of #args, so pop explicitly.  */\n-    return \\\"calls $0,%1\\;addl2 %2,sp\\\";\n-  operands[2] = GEN_INT ((INTVAL (operands[2]) + 3)/ 4);\n-  return \\\"calls %2,%1\\\";\n-\")\n+  \"calls $0,%1\")\n \n ;; Call subroutine returning any type.\n "}]}