{"sha": "f81a79ef6acdf5f2098389cfd7dff11d61672483", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgxYTc5ZWY2YWNkZjVmMjA5ODM4OWNmZDdkZmYxMWQ2MTY3MjQ4Mw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-06-23T15:57:53Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2002-06-23T15:57:53Z"}, "message": "function.h (struct emit_status): Clarify potential contents of regno_reg_rtx array.\n\n        * function.h (struct emit_status): Clarify potential contents\n        of regno_reg_rtx array.\n        * integrate.c (copy_rtx_and_substitute): Update comments.  Make\n        sure entry in regno_reg_rtx is a REG before checking REG_POINTER.\n\nCo-Authored-By: Jeff Law <law@redhat.com>\n\nFrom-SVN: r54924", "tree": {"sha": "25a03e09f8475979e1fefa9b2ac78afaf5c19863", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25a03e09f8475979e1fefa9b2ac78afaf5c19863"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f81a79ef6acdf5f2098389cfd7dff11d61672483", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f81a79ef6acdf5f2098389cfd7dff11d61672483", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f81a79ef6acdf5f2098389cfd7dff11d61672483", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f81a79ef6acdf5f2098389cfd7dff11d61672483/comments", "author": null, "committer": null, "parents": [{"sha": "3bfb9a0be1071418b1f5fe8ce81ca7ea2b12e3a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bfb9a0be1071418b1f5fe8ce81ca7ea2b12e3a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bfb9a0be1071418b1f5fe8ce81ca7ea2b12e3a4"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "640962500b998d26a794daac497fdb3682189095", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81a79ef6acdf5f2098389cfd7dff11d61672483/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81a79ef6acdf5f2098389cfd7dff11d61672483/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f81a79ef6acdf5f2098389cfd7dff11d61672483", "patch": "@@ -1,4 +1,10 @@\n 2002-06-23  Jan Hubicka  <jh@suse.cz>\n+\t    Jeff Law <law@redhat.com>\n+\n+\t* function.h (struct emit_status): Clarify potential contents\n+\tof regno_reg_rtx array.\n+\t* integrate.c (copy_rtx_and_substitute): Update comments.  Make\n+\tsure entry in regno_reg_rtx is a REG before checking REG_POINTER.\n \n \t* reg-stack.c (convert_regs_exit): Push the registers to stack in\n \tproper order."}, {"sha": "3dbd6fd4abd69b6e9c212371611a32da74e1e972", "filename": "gcc/function.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81a79ef6acdf5f2098389cfd7dff11d61672483/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81a79ef6acdf5f2098389cfd7dff11d61672483/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=f81a79ef6acdf5f2098389cfd7dff11d61672483", "patch": "@@ -105,7 +105,10 @@ struct emit_status GTY(())\n   tree * GTY ((length (\"%h.regno_pointer_align_length\"))) regno_decl;\n \n   /* Indexed by pseudo register number, gives the rtx for that pseudo.\n-     Allocated in parallel with regno_pointer_align.  */\n+     Allocated in parallel with regno_pointer_align. \n+\n+     Note MEM expressions can appear in this array due to the actions\n+     of put_var_into_stack.  */\n   rtx * GTY ((length (\"%h.regno_pointer_align_length\"))) x_regno_reg_rtx;\n };\n "}, {"sha": "ead6d31df80643a019b1c9511cfa3f362f195213", "filename": "gcc/integrate.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81a79ef6acdf5f2098389cfd7dff11d61672483/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81a79ef6acdf5f2098389cfd7dff11d61672483/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=f81a79ef6acdf5f2098389cfd7dff11d61672483", "patch": "@@ -2062,7 +2062,17 @@ copy_rtx_and_substitute (orig, map, for_lhs)\n \t  RTX_UNCHANGING_P (map->reg_map[regno]) = RTX_UNCHANGING_P (temp);\n \t  /* A reg with REG_FUNCTION_VALUE_P true will never reach here.  */\n \n-\t  if (REG_POINTER (map->x_regno_reg_rtx[regno]))\n+\t  /* Objects may initially be represented as registers, but\n+\t     but turned into a MEM if their address is taken by\n+\t     put_var_into_stack.  Therefore, the register table may have\n+\t     entries which are MEMs.\n+\n+\t     We briefly tried to clear such entries, but that ended up\n+\t     cascading into many changes due to the optimizers not being\n+\t     prepared for empty entries in the register table.  So we've\n+\t     decided to allow the MEMs in the register table for now.  */\n+\t  if (REG_P (map->x_regno_reg_rtx[regno])\n+\t      && REG_POINTER (map->x_regno_reg_rtx[regno]))\n \t    mark_reg_pointer (map->reg_map[regno],\n \t\t\t      map->regno_pointer_align[regno]);\n \t  regno = REGNO (map->reg_map[regno]);"}]}