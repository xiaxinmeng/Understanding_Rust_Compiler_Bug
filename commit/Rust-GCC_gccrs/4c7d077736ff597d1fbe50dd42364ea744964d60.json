{"sha": "4c7d077736ff597d1fbe50dd42364ea744964d60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM3ZDA3NzczNmZmNTk3ZDFmYmU1MGRkNDIzNjRlYTc0NDk2NGQ2MA==", "commit": {"author": {"name": "Teresa Johnson", "email": "tejohnson@google.com", "date": "2013-11-13T21:51:44Z"}, "committer": {"name": "Teresa Johnson", "email": "tejohnson@gcc.gnu.org", "date": "2013-11-13T21:51:44Z"}, "message": "re PR ipa/58862 (LTO profiledbootstrap failure: lto1: ICE in edge_badness, at ipa-inline.c:1008)\n\n2013-11-13  Teresa Johnson  <tejohnson@google.com>\n\n\tPR ipa/58862\n\t* predict.c (drop_profile): Error is currently too strict.\n\t(handle_missing_profiles): Pass call_count to drop_profile.\n\nFrom-SVN: r204756", "tree": {"sha": "cf2efb018f89a954723c93c6826022b451cfbe19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf2efb018f89a954723c93c6826022b451cfbe19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c7d077736ff597d1fbe50dd42364ea744964d60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c7d077736ff597d1fbe50dd42364ea744964d60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c7d077736ff597d1fbe50dd42364ea744964d60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c7d077736ff597d1fbe50dd42364ea744964d60/comments", "author": {"login": "teresajohnson", "id": 20446403, "node_id": "MDQ6VXNlcjIwNDQ2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/20446403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teresajohnson", "html_url": "https://github.com/teresajohnson", "followers_url": "https://api.github.com/users/teresajohnson/followers", "following_url": "https://api.github.com/users/teresajohnson/following{/other_user}", "gists_url": "https://api.github.com/users/teresajohnson/gists{/gist_id}", "starred_url": "https://api.github.com/users/teresajohnson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teresajohnson/subscriptions", "organizations_url": "https://api.github.com/users/teresajohnson/orgs", "repos_url": "https://api.github.com/users/teresajohnson/repos", "events_url": "https://api.github.com/users/teresajohnson/events{/privacy}", "received_events_url": "https://api.github.com/users/teresajohnson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51f5c118c56940a3fdd89e301dc0d32f80bf32f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51f5c118c56940a3fdd89e301dc0d32f80bf32f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51f5c118c56940a3fdd89e301dc0d32f80bf32f6"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "cea26ec2f2210d706da8de80caf7eb5489fcd9a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7d077736ff597d1fbe50dd42364ea744964d60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7d077736ff597d1fbe50dd42364ea744964d60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c7d077736ff597d1fbe50dd42364ea744964d60", "patch": "@@ -1,3 +1,9 @@\n+2013-11-13  Teresa Johnson  <tejohnson@google.com>\n+\n+\tPR ipa/58862\n+\t* predict.c (drop_profile): Error is currently too strict.\n+\t(handle_missing_profiles): Pass call_count to drop_profile.\n+\n 2013-11-13  Teresa Johnson  <tejohnson@google.com>\n \n \tPR ipa/58862"}, {"sha": "3cfa258abed599f9cded69f51b2cc776474a1118", "filename": "gcc/predict.c", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7d077736ff597d1fbe50dd42364ea744964d60/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7d077736ff597d1fbe50dd42364ea744964d60/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=4c7d077736ff597d1fbe50dd42364ea744964d60", "patch": "@@ -2766,12 +2766,17 @@ estimate_loops (void)\n }\n \n /* Drop the profile for NODE to guessed, and update its frequency based on\n-   whether it is expected to be HOT.  */\n+   whether it is expected to be hot given the CALL_COUNT.  */\n \n static void\n-drop_profile (struct cgraph_node *node, bool hot)\n+drop_profile (struct cgraph_node *node, gcov_type call_count)\n {\n   struct function *fn = DECL_STRUCT_FUNCTION (node->decl);\n+  /* In the case where this was called by another function with a\n+     dropped profile, call_count will be 0. Since there are no\n+     non-zero call counts to this function, we don't know for sure\n+     whether it is hot, and therefore it will be marked normal below.  */\n+  bool hot = maybe_hot_count_p (NULL, call_count);\n \n   if (dump_file)\n     fprintf (dump_file,\n@@ -2781,8 +2786,13 @@ drop_profile (struct cgraph_node *node, bool hot)\n   /* We only expect to miss profiles for functions that are reached\n      via non-zero call edges in cases where the function may have\n      been linked from another module or library (COMDATs and extern\n-     templates). See the comments below for handle_missing_profiles.  */\n-  if (!DECL_COMDAT (node->decl) && !DECL_EXTERNAL (node->decl))\n+     templates). See the comments below for handle_missing_profiles.\n+     Also, only warn in cases where the missing counts exceed the\n+     number of training runs. In certain cases with an execv followed\n+     by a no-return call the profile for the no-return call is not\n+     dumped and there can be a mismatch.  */\n+  if (!DECL_COMDAT (node->decl) && !DECL_EXTERNAL (node->decl)\n+      && call_count > profile_info->runs)\n     {\n       if (flag_profile_correction)\n         {\n@@ -2792,8 +2802,8 @@ drop_profile (struct cgraph_node *node, bool hot)\n                      cgraph_node_name (node), node->order);\n         }\n       else\n-        error (\"Missing counts for called function %s/%i\",\n-               cgraph_node_name (node), node->order);\n+        warning (0, \"Missing counts for called function %s/%i\",\n+                 cgraph_node_name (node), node->order);\n     }\n \n   profile_status_for_function (fn)\n@@ -2839,9 +2849,7 @@ handle_missing_profiles (void)\n           && fn && fn->cfg\n           && (call_count * unlikely_count_fraction >= profile_info->runs))\n         {\n-          bool maybe_hot = maybe_hot_count_p (NULL, call_count);\n-\n-          drop_profile (node, maybe_hot);\n+          drop_profile (node, call_count);\n           worklist.safe_push (node);\n         }\n     }\n@@ -2863,11 +2871,7 @@ handle_missing_profiles (void)\n           if (DECL_COMDAT (callee->decl) && fn && fn->cfg\n               && profile_status_for_function (fn) == PROFILE_READ)\n             {\n-              /* Since there are no non-0 call counts to this function,\n-                 we don't know for sure whether it is hot. Indicate to\n-                 the drop_profile routine that function should be marked\n-                 normal, rather than hot.  */\n-              drop_profile (node, false);\n+              drop_profile (node, 0);\n               worklist.safe_push (callee);\n             }\n         }"}]}