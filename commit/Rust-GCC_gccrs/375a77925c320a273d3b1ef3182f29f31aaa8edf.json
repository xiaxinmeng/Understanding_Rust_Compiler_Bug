{"sha": "375a77925c320a273d3b1ef3182f29f31aaa8edf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc1YTc3OTI1YzMyMGEyNzNkM2IxZWYzMTgyZjI5ZjMxYWFhOGVkZg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-05-04T11:53:54Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-05-04T11:53:54Z"}, "message": "tree-inline: Simplify IPA-CP type conversion (PR 93385)\n\nwhen callers and callees do not quite agree on the type of a\nparameter, usually with ill-defined K&R or with smilarly wrong LTO\ninput, IPA-CP can attempt to try and substitute a wrong type for a\nparameter (see e.g. gcc.dg/torture/pr48063.c).  Function\ntree_function_versioning attempts to handle this in order not to\ncreate invalid gimple but it then creates the mapping using\nsetup_one_parameter which also handles the same situation to avoid\nsimilar problems when inlining and in more defined way.\n\nSo this patch simply removes the conversion attempts in\ntree_function_versioning itself.  It is helpful for my upcoming fix of\nPR 93385 because then I do not need to teach\nipa_param_body_adjustments to distinguish between successful and\nunsuccessful mappings - setup_one_parameter uses force_value_to_type\nfor conversions which simly maps the worst cases to zero.\n\n2020-05-04  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/93385\n\t* tree-inline.c (tree_function_versioning): Leave any type conversion\n\tof replacements to setup_one_parameter and its friend\n\tforce_value_to_type.", "tree": {"sha": "1c2973771045109699c92bea00436b7492f9f33e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c2973771045109699c92bea00436b7492f9f33e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/375a77925c320a273d3b1ef3182f29f31aaa8edf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/375a77925c320a273d3b1ef3182f29f31aaa8edf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/375a77925c320a273d3b1ef3182f29f31aaa8edf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/375a77925c320a273d3b1ef3182f29f31aaa8edf/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ea03e9016cbca5a7ee2b4befa4d5c32467b0982", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ea03e9016cbca5a7ee2b4befa4d5c32467b0982", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ea03e9016cbca5a7ee2b4befa4d5c32467b0982"}], "stats": {"total": 49, "additions": 12, "deletions": 37}, "files": [{"sha": "42c4af762cdf270b2994d00afba8dd6c83ce2e11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375a77925c320a273d3b1ef3182f29f31aaa8edf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375a77925c320a273d3b1ef3182f29f31aaa8edf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=375a77925c320a273d3b1ef3182f29f31aaa8edf", "patch": "@@ -1,3 +1,10 @@\n+2020-05-04  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/93385\n+\t* tree-inline.c (tree_function_versioning): Leave any type conversion\n+\tof replacements to setup_one_parameter and its friend\n+\tforce_value_to_type.\n+\n 2020-05-04  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/94650"}, {"sha": "32c49ae03efd1467ad513f871ab1c62242233f9a", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 5, "deletions": 37, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375a77925c320a273d3b1ef3182f29f31aaa8edf/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375a77925c320a273d3b1ef3182f29f31aaa8edf/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=375a77925c320a273d3b1ef3182f29f31aaa8edf", "patch": "@@ -6261,46 +6261,14 @@ tree_function_versioning (tree old_decl, tree new_decl,\n \t  p = new_param_indices[p];\n \n \ttree parm;\n-\ttree req_type, new_type;\n-\n \tfor (parm = DECL_ARGUMENTS (old_decl); p;\n \t     parm = DECL_CHAIN (parm))\n \t  p--;\n-\ttree old_tree = parm;\n-\treq_type = TREE_TYPE (parm);\n-\tnew_type = TREE_TYPE (replace_info->new_tree);\n-\tif (!useless_type_conversion_p (req_type, new_type))\n-\t  {\n-\t    if (fold_convertible_p (req_type, replace_info->new_tree))\n-\t      replace_info->new_tree\n-\t\t= fold_build1 (NOP_EXPR, req_type, replace_info->new_tree);\n-\t    else if (TYPE_SIZE (req_type) == TYPE_SIZE (new_type))\n-\t      replace_info->new_tree\n-\t\t= fold_build1 (VIEW_CONVERT_EXPR, req_type,\n-\t\t\t       replace_info->new_tree);\n-\t    else\n-\t      {\n-\t\tif (dump_file)\n-\t\t  {\n-\t\t    fprintf (dump_file, \"    const \");\n-\t\t    print_generic_expr (dump_file,\n-\t\t\t\t\treplace_info->new_tree);\n-\t\t    fprintf (dump_file,\n-\t\t\t     \"  can't be converted to param \");\n-\t\t    print_generic_expr (dump_file, parm);\n-\t\t    fprintf (dump_file, \"\\n\");\n-\t\t  }\n-\t\told_tree = NULL;\n-\t      }\n-\t  }\n-\n-\tif (old_tree)\n-\t  {\n-\t    init = setup_one_parameter (&id, old_tree, replace_info->new_tree,\n-\t\t\t\t\tid.src_fn, NULL, &vars);\n-\t    if (init)\n-\t      init_stmts.safe_push (init);\n-\t  }\n+\tgcc_assert (parm);\n+\tinit = setup_one_parameter (&id, parm, replace_info->new_tree,\n+\t\t\t\t    id.src_fn, NULL, &vars);\n+\tif (init)\n+\t  init_stmts.safe_push (init);\n       }\n \n   ipa_param_body_adjustments *param_body_adjs = NULL;"}]}