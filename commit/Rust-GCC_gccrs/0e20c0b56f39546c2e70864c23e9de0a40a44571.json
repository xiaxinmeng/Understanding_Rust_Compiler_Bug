{"sha": "0e20c0b56f39546c2e70864c23e9de0a40a44571", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUyMGMwYjU2ZjM5NTQ2YzJlNzA4NjRjMjNlOWRlMGE0MGE0NDU3MQ==", "commit": {"author": {"name": "Jessica Han", "email": "jessica@cup.hp.com", "date": "2002-06-25T16:55:47Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-06-25T16:55:47Z"}, "message": "2002-06-25  Jessica Han  <jessica@cup.hp.com>\n\n\t* config/os/hpux/os_defines.h Define _GLIBCPP_VTABLE_PADDING\n\t* libsupc++/tinfo.cc Handle the 8 byte aligned vtable entries when\n\t_GLIBCPP_VTABLE_PADDING is defined.\n\nFrom-SVN: r54991", "tree": {"sha": "a3a064a9a74419663a261de7625c4d59c4817a46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3a064a9a74419663a261de7625c4d59c4817a46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e20c0b56f39546c2e70864c23e9de0a40a44571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e20c0b56f39546c2e70864c23e9de0a40a44571", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e20c0b56f39546c2e70864c23e9de0a40a44571", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e20c0b56f39546c2e70864c23e9de0a40a44571/comments", "author": null, "committer": null, "parents": [{"sha": "72ea9226fbaa39d730aac5a56bea1dab768b1611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72ea9226fbaa39d730aac5a56bea1dab768b1611", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72ea9226fbaa39d730aac5a56bea1dab768b1611"}], "stats": {"total": 51, "additions": 42, "deletions": 9}, "files": [{"sha": "4b7d01a2c8f3f3d0e0dfc11516f3c1089e099ee1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e20c0b56f39546c2e70864c23e9de0a40a44571/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e20c0b56f39546c2e70864c23e9de0a40a44571/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0e20c0b56f39546c2e70864c23e9de0a40a44571", "patch": "@@ -1,3 +1,9 @@\n+2002-06-25  Jessica Han  <jessica@cup.hp.com>\n+\n+\t* config/os/hpux/os_defines.h Define _GLIBCPP_VTABLE_PADDING\n+\t* libsupc++/tinfo.cc Handle the 8 byte aligned vtable entries when\n+\t_GLIBCPP_VTABLE_PADDING is defined.\n+\n 2002-06-25  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/stl_alloc.h: Additional formatting."}, {"sha": "0b28bb215d46862299c1656ae52485b247563c0c", "filename": "libstdc++-v3/config/os/hpux/os_defines.h", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e20c0b56f39546c2e70864c23e9de0a40a44571/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e20c0b56f39546c2e70864c23e9de0a40a44571/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h?ref=0e20c0b56f39546c2e70864c23e9de0a40a44571", "patch": "@@ -1,6 +1,6 @@\n-// Specific definitions for generic platforms  -*- C++ -*-\n+// Specific definitions for HPUX  -*- C++ -*-\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,7 +28,7 @@\n // the GNU General Public License.\n \n #ifndef _GLIBCPP_OS_DEFINES\n-#define _GLIBCPP_OS_DEFINES\n+#define _GLIBCPP_OS_DEFINES 1\n \n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others.\n@@ -62,7 +62,8 @@\n \n    We also force _GLIBCPP_USE_LONG_LONG here so that we don't have\n    to bastardize configure to deal with this sillyness.  */\n-namespace std {\n+namespace std \n+{\n #ifndef __LP64__\n   __extension__ extern \"C\" long long strtoll (const char *, char **, int)\n     __asm  (\"__strtoll\");\n@@ -75,5 +76,14 @@ namespace std {\n     __asm  (\"strtoul\");\n #endif\n }\n+\n #define _GLIBCPP_USE_LONG_LONG 1\n+\n+// HPUX on IA64 requires vtable to be 64 bit aligned even at 32 bit\n+// mode.  We need to pad the vtable structure to achieve this.  \n+#if !defined(_LP64) && defined (__ia64__)\n+#define _GLIBCPP_VTABLE_PADDING 8\n+typedef long int __padding_type;\n+#endif\n+\n #endif"}, {"sha": "08379a980790989b2281e545e71d43bd79c09b15", "filename": "libstdc++-v3/libsupc++/tinfo.cc", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e20c0b56f39546c2e70864c23e9de0a40a44571/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e20c0b56f39546c2e70864c23e9de0a40a44571/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc?ref=0e20c0b56f39546c2e70864c23e9de0a40a44571", "patch": "@@ -28,6 +28,7 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+#include <bits/c++config.h>\n #include <cstddef>\n #include \"tinfo.h\"\n #include \"new\"\t\t\t// for placement new\n@@ -91,12 +92,28 @@ namespace {\n using namespace std;\n using namespace abi;\n \n-// initial part of a vtable, this structure is used with offsetof, so we don't\n+// Initial part of a vtable, this structure is used with offsetof, so we don't\n // have to keep alignments consistent manually.\n-struct vtable_prefix {\n-  ptrdiff_t whole_object;           // offset to most derived object\n-  const __class_type_info *whole_type;  // pointer to most derived type_info\n-  const void *origin;               // what a class's vptr points to\n+struct vtable_prefix \n+{\n+  // Offset to most derived object.\n+  ptrdiff_t whole_object;\n+\n+  // Additional padding if necessary.\n+#ifdef _GLIBCPP_VTABLE_PADDING\n+  ptrdiff_t padding1;               \n+#endif\n+\n+  // Pointer to most derived type_info.\n+  const __class_type_info *whole_type;  \n+\n+  // Additional padding if necessary.\n+#ifdef _GLIBCPP_VTABLE_PADDING\n+  ptrdiff_t padding2;               \n+#endif\n+\n+  // What a class's vptr points to.\n+  const void *origin;               \n };\n \n template <typename T>"}]}