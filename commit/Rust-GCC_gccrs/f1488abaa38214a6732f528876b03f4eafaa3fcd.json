{"sha": "f1488abaa38214a6732f528876b03f4eafaa3fcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE0ODhhYmFhMzgyMTRhNjczMmY1Mjg4NzZiMDNmNGVhZmFhM2ZjZA==", "commit": {"author": {"name": "Richard Frith-Macdonald", "email": "richard@brainstorm.co.uk", "date": "1998-10-08T11:28:08Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-10-08T11:28:08Z"}, "message": "c-lex.c (remember_protocol_qualifiers): Handle RID_BYREF.\n\n        * c-lex.c (remember_protocol_qualifiers): Handle RID_BYREF.\n        (init_lex): Initialize ridpointers[RID_BYREF].\n        * c-lex.h (enum rid): Add RID_BYREF.\n        * c-parse.gperf: Add RID_BYREF as a type qualifier.\n        * objc/objc-act.c (is_objc_type_qualifiers): Handle RID_BYREF.\n        (encode_type_qualifiers): Similarly\n        * c-gperf.h: Rebuilt.\n\nFrom-SVN: r22918", "tree": {"sha": "77311023ad9c200e03d87894cc8e943eec9730c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77311023ad9c200e03d87894cc8e943eec9730c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1488abaa38214a6732f528876b03f4eafaa3fcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1488abaa38214a6732f528876b03f4eafaa3fcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1488abaa38214a6732f528876b03f4eafaa3fcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1488abaa38214a6732f528876b03f4eafaa3fcd/comments", "author": null, "committer": null, "parents": [{"sha": "1df287f8fb9ab948bd35fc2d093bf113e2d612ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1df287f8fb9ab948bd35fc2d093bf113e2d612ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1df287f8fb9ab948bd35fc2d093bf113e2d612ef"}], "stats": {"total": 221, "additions": 122, "deletions": 99}, "files": [{"sha": "195a2646f27602a0fcc681712255cfc8debd9f9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1488abaa38214a6732f528876b03f4eafaa3fcd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1488abaa38214a6732f528876b03f4eafaa3fcd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1488abaa38214a6732f528876b03f4eafaa3fcd", "patch": "@@ -1,3 +1,13 @@\n+Thu Oct  8 12:21:14 1998  Richard Frith-Macdonald <richard@brainstorm.co.uk>\n+\n+\t* c-lex.c (remember_protocol_qualifiers): Handle RID_BYREF.\n+\t(init_lex): Initialize ridpointers[RID_BYREF].\n+\t* c-lex.h (enum rid): Add RID_BYREF.\n+\t* c-parse.gperf: Add RID_BYREF as a type qualifier.\n+\t* objc/objc-act.c (is_objc_type_qualifiers): Handle RID_BYREF.\n+\t(encode_type_qualifiers): Similarly\n+\t* c-gperf.h: Rebuilt.\n+\n Thu Oct  8 05:56:00 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* c-common.c (type_for_mode): Only return TItype nodes when"}, {"sha": "41b8d0fe82a395f9f3487f0727d3185c04d1a94e", "filename": "gcc/c-gperf.h", "status": "modified", "additions": 104, "deletions": 99, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1488abaa38214a6732f528876b03f4eafaa3fcd/gcc%2Fc-gperf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1488abaa38214a6732f528876b03f4eafaa3fcd/gcc%2Fc-gperf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-gperf.h?ref=f1488abaa38214a6732f528876b03f4eafaa3fcd", "patch": "@@ -1,14 +1,14 @@\n /* KR-C code produced by gperf version 2.7.1 (19981006 egcs) */\n-/* Command-line: gperf -L KR-C -F , 0, 0 -p -j1 -i 1 -g -o -t -G -N is_reserved_word -k1,3,$ ./c-parse.gperf  */\n+/* Command-line: gperf -L KR-C -F , 0, 0 -p -j1 -i 1 -g -o -t -G -N is_reserved_word -k1,3,$ /hurl/puke/law/egcs/egcs/gcc/c-parse.gperf  */\n /* Command-line: gperf -L KR-C -F ', 0, 0' -p -j1 -i 1 -g -o -t -N is_reserved_word -k1,3,$ c-parse.gperf  */ \n struct resword { char *name; short token; enum rid rid; };\n \n-#define TOTAL_KEYWORDS 79\n+#define TOTAL_KEYWORDS 80\n #define MIN_WORD_LENGTH 2\n #define MAX_WORD_LENGTH 20\n #define MIN_HASH_VALUE 10\n-#define MAX_HASH_VALUE 144\n-/* maximum key range = 135, duplicates = 0 */\n+#define MAX_HASH_VALUE 162\n+/* maximum key range = 153, duplicates = 0 */\n \n #ifdef __GNUC__\n __inline\n@@ -20,32 +20,32 @@ hash (str, len)\n {\n   static unsigned char asso_values[] =\n     {\n-      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-      145, 145, 145, 145,  25, 145, 145, 145, 145, 145,\n-      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-      145, 145, 145, 145, 145,   1, 145,  46,   8,  15,\n-       61,   6,  36,  48,   3,   5, 145,  18,  63,  25,\n-       29,  76,   1, 145,  13,   2,   1,  51,  37,   9,\n-        9,   1,   3, 145, 145, 145, 145, 145, 145, 145,\n-      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-      145, 145, 145, 145, 145, 145, 145, 145, 145, 145,\n-      145, 145, 145, 145, 145, 145\n+      163, 163, 163, 163, 163, 163, 163, 163, 163, 163,\n+      163, 163, 163, 163, 163, 163, 163, 163, 163, 163,\n+      163, 163, 163, 163, 163, 163, 163, 163, 163, 163,\n+      163, 163, 163, 163, 163, 163, 163, 163, 163, 163,\n+      163, 163, 163, 163, 163, 163, 163, 163, 163, 163,\n+      163, 163, 163, 163, 163, 163, 163, 163, 163, 163,\n+      163, 163, 163, 163,   8, 163, 163, 163, 163, 163,\n+      163, 163, 163, 163, 163, 163, 163, 163, 163, 163,\n+      163, 163, 163, 163, 163, 163, 163, 163, 163, 163,\n+      163, 163, 163, 163, 163,   1, 163,  24,   8,  61,\n+       37,   6,  47,  49,   2,   5, 163,   3,  51,  30,\n+       58,  91,  35, 163,  33,  13,   1,  18,  49,   2,\n+        2,   5,   3, 163, 163, 163, 163, 163, 163, 163,\n+      163, 163, 163, 163, 163, 163, 163, 163, 163, 163,\n+      163, 163, 163, 163, 163, 163, 163, 163, 163, 163,\n+      163, 163, 163, 163, 163, 163, 163, 163, 163, 163,\n+      163, 163, 163, 163, 163, 163, 163, 163, 163, 163,\n+      163, 163, 163, 163, 163, 163, 163, 163, 163, 163,\n+      163, 163, 163, 163, 163, 163, 163, 163, 163, 163,\n+      163, 163, 163, 163, 163, 163, 163, 163, 163, 163,\n+      163, 163, 163, 163, 163, 163, 163, 163, 163, 163,\n+      163, 163, 163, 163, 163, 163, 163, 163, 163, 163,\n+      163, 163, 163, 163, 163, 163, 163, 163, 163, 163,\n+      163, 163, 163, 163, 163, 163, 163, 163, 163, 163,\n+      163, 163, 163, 163, 163, 163, 163, 163, 163, 163,\n+      163, 163, 163, 163, 163, 163\n     };\n   register int hval = len;\n \n@@ -69,109 +69,114 @@ static struct resword wordlist[] =\n     {\"int\", TYPESPEC, RID_INT},\n     {\"\", 0, 0}, {\"\", 0, 0},\n     {\"__typeof__\", TYPEOF, NORID},\n-    {\"__signed__\", TYPESPEC, RID_SIGNED},\n+    {\"\", 0, 0},\n     {\"__imag__\", IMAGPART, NORID},\n-    {\"switch\", SWITCH, NORID},\n+    {\"\", 0, 0},\n     {\"__inline__\", SCSPEC, RID_INLINE},\n-    {\"else\", ELSE, NORID},\n+    {\"while\", WHILE, NORID},\n     {\"__iterator__\", SCSPEC, RID_ITERATOR},\n     {\"__inline\", SCSPEC, RID_INLINE},\n     {\"__extension__\", EXTENSION, NORID},\n-    {\"struct\", STRUCT, NORID},\n-    {\"__real__\", REALPART, NORID},\n-    {\"__const\", TYPE_QUAL, RID_CONST},\n-    {\"while\", WHILE, NORID},\n-    {\"__const__\", TYPE_QUAL, RID_CONST},\n-    {\"case\", CASE, NORID},\n-    {\"__complex__\", TYPESPEC, RID_COMPLEX},\n-    {\"__iterator\", SCSPEC, RID_ITERATOR},\n-    {\"bycopy\", TYPE_QUAL, RID_BYCOPY},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"__complex\", TYPESPEC, RID_COMPLEX},\n-    {\"\", 0, 0},\n-    {\"in\", TYPE_QUAL, RID_IN},\n     {\"break\", BREAK, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"__signed__\", TYPESPEC, RID_SIGNED},\n+    {\"switch\", SWITCH, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"else\", ELSE, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0},\n     {\"@defs\", DEFS, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"extern\", SCSPEC, RID_EXTERN},\n-    {\"if\", IF, NORID},\n-    {\"typeof\", TYPEOF, NORID},\n-    {\"typedef\", SCSPEC, RID_TYPEDEF},\n-    {\"__typeof\", TYPEOF, NORID},\n-    {\"sizeof\", SIZEOF, NORID},\n-    {\"\", 0, 0},\n-    {\"return\", RETURN, NORID},\n-    {\"const\", TYPE_QUAL, RID_CONST},\n-    {\"__volatile__\", TYPE_QUAL, RID_VOLATILE},\n-    {\"@private\", PRIVATE, NORID},\n-    {\"@selector\", SELECTOR, NORID},\n-    {\"__volatile\", TYPE_QUAL, RID_VOLATILE},\n     {\"__asm__\", ASM_KEYWORD, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"continue\", CONTINUE, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n     {\"__alignof__\", ALIGNOF, NORID},\n-    {\"__imag\", IMAGPART, NORID},\n+    {\"\", 0, 0},\n     {\"__attribute__\", ATTRIBUTE, NORID},\n     {\"\", 0, 0}, {\"\", 0, 0},\n     {\"__attribute\", ATTRIBUTE, NORID},\n-    {\"for\", FOR, NORID},\n-    {\"\", 0, 0},\n-    {\"@encode\", ENCODE, NORID},\n+    {\"__real__\", REALPART, NORID},\n     {\"id\", OBJECTNAME, RID_ID},\n-    {\"static\", SCSPEC, RID_STATIC},\n-    {\"@interface\", INTERFACE, NORID},\n-    {\"\", 0, 0},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"__iterator\", SCSPEC, RID_ITERATOR},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"struct\", STRUCT, NORID},\n+    {\"if\", IF, NORID},\n+    {\"@private\", PRIVATE, NORID},\n+    {\"@selector\", SELECTOR, NORID},\n+    {\"__typeof\", TYPEOF, NORID},\n+    {\"enum\", ENUM, NORID},\n     {\"__signed\", TYPESPEC, RID_SIGNED},\n-    {\"\", 0, 0},\n-    {\"__label__\", LABEL, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0},\n     {\"__asm\", ASM_KEYWORD, NORID},\n-    {\"char\", TYPESPEC, RID_CHAR},\n+    {\"__imag\", IMAGPART, NORID},\n+    {\"__label__\", LABEL, NORID},\n+    {\"__volatile__\", TYPE_QUAL, RID_VOLATILE},\n     {\"\", 0, 0},\n+    {\"in\", TYPE_QUAL, RID_IN},\n+    {\"__volatile\", TYPE_QUAL, RID_VOLATILE},\n+    {\"double\", TYPESPEC, RID_DOUBLE},\n     {\"inline\", SCSPEC, RID_INLINE},\n-    {\"out\", TYPE_QUAL, RID_OUT},\n-    {\"register\", SCSPEC, RID_REGISTER},\n-    {\"__real\", REALPART, NORID},\n-    {\"short\", TYPESPEC, RID_SHORT},\n-    {\"\", 0, 0},\n-    {\"enum\", ENUM, NORID},\n-    {\"inout\", TYPE_QUAL, RID_INOUT},\n+    {\"sizeof\", SIZEOF, NORID},\n+    {\"__const\", TYPE_QUAL, RID_CONST},\n+    {\"extern\", SCSPEC, RID_EXTERN},\n+    {\"__const__\", TYPE_QUAL, RID_CONST},\n+    {\"__complex\", TYPESPEC, RID_COMPLEX},\n+    {\"__complex__\", TYPESPEC, RID_COMPLEX},\n     {\"\", 0, 0},\n-    {\"oneway\", TYPE_QUAL, RID_ONEWAY},\n-    {\"union\", UNION, NORID},\n+    {\"unsigned\", TYPESPEC, RID_UNSIGNED},\n     {\"\", 0, 0},\n+    {\"@class\", CLASS, NORID},\n+    {\"@encode\", ENCODE, NORID},\n+    {\"bycopy\", TYPE_QUAL, RID_BYCOPY},\n     {\"__alignof\", ALIGNOF, NORID},\n+    {\"@interface\", INTERFACE, NORID},\n     {\"\", 0, 0},\n-    {\"@implementation\", IMPLEMENTATION, NORID},\n-    {\"\", 0, 0},\n-    {\"@class\", CLASS, NORID},\n+    {\"case\", CASE, NORID},\n     {\"\", 0, 0},\n-    {\"@public\", PUBLIC, NORID},\n+    {\"union\", UNION, NORID},\n     {\"asm\", ASM_KEYWORD, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"@protected\", PROTECTED, NORID},\n+    {\"typeof\", TYPEOF, NORID},\n+    {\"typedef\", SCSPEC, RID_TYPEDEF},\n+    {\"__real\", REALPART, NORID},\n     {\"default\", DEFAULT, NORID},\n-    {\"\", 0, 0},\n+    {\"byref\", TYPE_QUAL, RID_BYREF},\n+    {\"@public\", PUBLIC, NORID},\n     {\"void\", TYPESPEC, RID_VOID},\n+    {\"out\", TYPE_QUAL, RID_OUT},\n     {\"\", 0, 0},\n-    {\"@protected\", PROTECTED, NORID},\n-    {\"@protocol\", PROTOCOL, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"volatile\", TYPE_QUAL, RID_VOLATILE},\n+    {\"return\", RETURN, NORID},\n     {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"@protocol\", PROTOCOL, NORID},\n+    {\"inout\", TYPE_QUAL, RID_INOUT},\n+    {\"\", 0, 0},\n+    {\"static\", SCSPEC, RID_STATIC},\n     {\"signed\", TYPESPEC, RID_SIGNED},\n-    {\"float\", TYPESPEC, RID_FLOAT},\n+    {\"\", 0, 0},\n     {\"@end\", END, NORID},\n+    {\"oneway\", TYPE_QUAL, RID_ONEWAY},\n+    {\"\", 0, 0},\n+    {\"short\", TYPESPEC, RID_SHORT},\n+    {\"@implementation\", IMPLEMENTATION, NORID},\n     {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"unsigned\", TYPESPEC, RID_UNSIGNED},\n-    {\"@compatibility_alias\", ALIAS, NORID},\n-    {\"double\", TYPESPEC, RID_DOUBLE},\n-    {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"volatile\", TYPE_QUAL, RID_VOLATILE},\n+    {\"\", 0, 0},\n+    {\"for\", FOR, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n     {\"auto\", SCSPEC, RID_AUTO},\n     {\"\", 0, 0},\n+    {\"char\", TYPESPEC, RID_CHAR},\n+    {\"register\", SCSPEC, RID_REGISTER},\n+    {\"\", 0, 0},\n+    {\"const\", TYPE_QUAL, RID_CONST},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"do\", DO, NORID},\n+    {\"\", 0, 0},\n+    {\"@compatibility_alias\", ALIAS, NORID},\n+    {\"continue\", CONTINUE, NORID},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"\", 0, 0},\n+    {\"float\", TYPESPEC, RID_FLOAT},\n     {\"goto\", GOTO, NORID},\n     {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n-    {\"do\", DO, NORID},\n-    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n+    {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0}, {\"\", 0, 0},\n     {\"long\", TYPESPEC, RID_LONG}\n   };\n "}, {"sha": "6e56a3f448af2002f58669fb0af0cde3cdb9bf75", "filename": "gcc/c-lex.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1488abaa38214a6732f528876b03f4eafaa3fcd/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1488abaa38214a6732f528876b03f4eafaa3fcd/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=f1488abaa38214a6732f528876b03f4eafaa3fcd", "patch": "@@ -164,6 +164,8 @@ remember_protocol_qualifiers ()\n       wordlist[i].name = \"inout\";\n     else if (wordlist[i].rid == RID_BYCOPY)\n       wordlist[i].name = \"bycopy\";\n+    else if (wordlist[i].rid == RID_BYREF)\n+      wordlist[i].name = \"byref\";\n     else if (wordlist[i].rid == RID_ONEWAY)\n       wordlist[i].name = \"oneway\";   \n }\n@@ -256,6 +258,7 @@ init_lex ()\n   ridpointers[(int) RID_OUT] = get_identifier (\"out\");\n   ridpointers[(int) RID_INOUT] = get_identifier (\"inout\");\n   ridpointers[(int) RID_BYCOPY] = get_identifier (\"bycopy\");\n+  ridpointers[(int) RID_BYREF] = get_identifier (\"byref\");\n   ridpointers[(int) RID_ONEWAY] = get_identifier (\"oneway\");\n   forget_protocol_qualifiers();\n "}, {"sha": "0ffc6a40c564b154f0922d39344e2ae2427c73a3", "filename": "gcc/c-lex.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1488abaa38214a6732f528876b03f4eafaa3fcd/gcc%2Fc-lex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1488abaa38214a6732f528876b03f4eafaa3fcd/gcc%2Fc-lex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.h?ref=f1488abaa38214a6732f528876b03f4eafaa3fcd", "patch": "@@ -50,6 +50,7 @@ enum rid\n   RID_OUT,\n   RID_INOUT,\n   RID_BYCOPY,\n+  RID_BYREF,\n   RID_ONEWAY,\n   RID_ID,\n "}, {"sha": "3ce33a4595a672748193292179137b4aa0429e0e", "filename": "gcc/c-parse.gperf", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1488abaa38214a6732f528876b03f4eafaa3fcd/gcc%2Fc-parse.gperf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1488abaa38214a6732f528876b03f4eafaa3fcd/gcc%2Fc-parse.gperf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.gperf?ref=f1488abaa38214a6732f528876b03f4eafaa3fcd", "patch": "@@ -45,6 +45,7 @@ asm, ASM_KEYWORD, NORID\n auto, SCSPEC, RID_AUTO\n break, BREAK, NORID\n bycopy, TYPE_QUAL, RID_BYCOPY\n+byref, TYPE_QUAL, RID_BYREF\n case, CASE, NORID\n char, TYPESPEC, RID_CHAR\n const, TYPE_QUAL, RID_CONST"}, {"sha": "94c10bcd229941b10dcb1726e6adff5ddedd732e", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1488abaa38214a6732f528876b03f4eafaa3fcd/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1488abaa38214a6732f528876b03f4eafaa3fcd/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=f1488abaa38214a6732f528876b03f4eafaa3fcd", "patch": "@@ -4610,6 +4610,7 @@ is_objc_type_qualifier (node)\n \t      || node == ridpointers [(int) RID_OUT]\n \t      || node == ridpointers [(int) RID_INOUT]\n \t      || node == ridpointers [(int) RID_BYCOPY]\n+              || node == ridpointers [(int) RID_BYREF]\n \t      || node == ridpointers [(int) RID_ONEWAY]));\n }\n \n@@ -6495,6 +6496,8 @@ encode_type_qualifiers (declspecs)\n \tobstack_1grow (&util_obstack, 'o');\n       else if (ridpointers[(int) RID_BYCOPY] == TREE_VALUE (spec))\n \tobstack_1grow (&util_obstack, 'O');\n+      else if (ridpointers[(int) RID_BYREF] == TREE_VALUE (spec))\n+        obstack_1grow (&util_obstack, 'R');\n       else if (ridpointers[(int) RID_ONEWAY] == TREE_VALUE (spec))\n \tobstack_1grow (&util_obstack, 'V');\n     }"}]}