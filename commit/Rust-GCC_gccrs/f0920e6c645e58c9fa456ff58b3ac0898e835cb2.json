{"sha": "f0920e6c645e58c9fa456ff58b3ac0898e835cb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA5MjBlNmM2NDVlNThjOWZhNDU2ZmY1OGIzYWMwODk4ZTgzNWNiMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-04-03T09:12:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-04-03T09:12:40Z"}, "message": "closures.c: Include sys/statfs.h.\n\n\t* src/closures.c: Include sys/statfs.h.\n\t(_GNU_SOURCE): Define on Linux.\n\t(FFI_MMAP_EXEC_SELINUX): Define.\n\t(selinux_enabled): New variable.\n\t(selinux_enabled_check): New function.\n\t(is_selinux_enabled): Define.\n\t(dlmmap): Use it.\n\n\t* configure.ac (NO_EXECUTE_PERMISSION): Set by default.\n\t* configure: Rebuilt.\n\nFrom-SVN: r123457", "tree": {"sha": "b481e68cd487f935394d6e638aa80b70cf61b6da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b481e68cd487f935394d6e638aa80b70cf61b6da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0920e6c645e58c9fa456ff58b3ac0898e835cb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0920e6c645e58c9fa456ff58b3ac0898e835cb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0920e6c645e58c9fa456ff58b3ac0898e835cb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0920e6c645e58c9fa456ff58b3ac0898e835cb2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df3473facbac90274ca6e5d6e6ce3db2152dce35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df3473facbac90274ca6e5d6e6ce3db2152dce35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df3473facbac90274ca6e5d6e6ce3db2152dce35"}], "stats": {"total": 103, "additions": 88, "deletions": 15}, "files": [{"sha": "aad88393f8ade447cb9ead020dd631d1b242ebb0", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0920e6c645e58c9fa456ff58b3ac0898e835cb2/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0920e6c645e58c9fa456ff58b3ac0898e835cb2/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=f0920e6c645e58c9fa456ff58b3ac0898e835cb2", "patch": "@@ -1,3 +1,8 @@\n+2007-04-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.ac (NO_EXECUTE_PERMISSION): Set by default.\n+\t* configure: Rebuilt.\n+\n 2007-03-07  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* include/gc.h (GC_REGISTER_FINALIZER_UNREACHABLE): New."}, {"sha": "c13c8ec89c4c038508e74f9f19afd49013a145e4", "filename": "boehm-gc/configure", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0920e6c645e58c9fa456ff58b3ac0898e835cb2/boehm-gc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0920e6c645e58c9fa456ff58b3ac0898e835cb2/boehm-gc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure?ref=f0920e6c645e58c9fa456ff58b3ac0898e835cb2", "patch": "@@ -6826,11 +6826,9 @@ LIBS=\"$oldLIBS\"\n \n # Configuration of machine-dependent code\n #\n-# We don't set NO_EXECUTE_PERMISSION by default because gcj (and\n-# anything else that creates trampolines in gc-allocated memory)\n-# always needs exec permission.  The exceptions to this are IA-64 and\n-# some variations of Power PC, where trampolines don't contain\n-# executable code.\n+# Set NO_EXECUTE_PERMISSION by default because gcj already uses\n+# ffi_closure_{alloc,free} which takes care of allocating trampolines\n+# in executable memory.\n #\n echo \"$as_me:$LINENO: checking which machine-dependent code should be used\" >&5\n echo $ECHO_N \"checking which machine-dependent code should be used... $ECHO_C\" >&6\n@@ -6891,14 +6889,14 @@ _ACEOF\n     machdep=\"sparc_mach_dep.lo\"\n     ;;\n  ia64-*-*)\n+    machdep=\"mach_dep.lo ia64_save_regs_in_stack.lo\"\n+    ;;\n+esac\n \n cat >>confdefs.h <<\\_ACEOF\n #define NO_EXECUTE_PERMISSION 1\n _ACEOF\n \n-    machdep=\"mach_dep.lo ia64_save_regs_in_stack.lo\"\n-    ;;\n-esac\n if test x\"$machdep\" = x; then\n echo \"$as_me:$LINENO: result: $machdep\" >&5\n echo \"${ECHO_T}$machdep\" >&6"}, {"sha": "d4dd16b9e06fa10db94dc4f9b3742fe0ab8c90a7", "filename": "boehm-gc/configure.ac", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0920e6c645e58c9fa456ff58b3ac0898e835cb2/boehm-gc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0920e6c645e58c9fa456ff58b3ac0898e835cb2/boehm-gc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure.ac?ref=f0920e6c645e58c9fa456ff58b3ac0898e835cb2", "patch": "@@ -364,11 +364,9 @@ LIBS=\"$oldLIBS\"\n \n # Configuration of machine-dependent code\n #\n-# We don't set NO_EXECUTE_PERMISSION by default because gcj (and\n-# anything else that creates trampolines in gc-allocated memory)\n-# always needs exec permission.  The exceptions to this are IA-64 and\n-# some variations of Power PC, where trampolines don't contain\n-# executable code.\n+# Set NO_EXECUTE_PERMISSION by default because gcj already uses\n+# ffi_closure_{alloc,free} which takes care of allocating trampolines\n+# in executable memory.\n #\n AC_MSG_CHECKING(which machine-dependent code should be used)\n machdep=\n@@ -411,10 +409,10 @@ case \"$host\" in\n     machdep=\"sparc_mach_dep.lo\"\n     ;;\n  ia64-*-*)\n-    AC_DEFINE(NO_EXECUTE_PERMISSION,1,[cause some or all of the heap to not have execute permission])\n     machdep=\"mach_dep.lo ia64_save_regs_in_stack.lo\"\n     ;;\n esac\n+AC_DEFINE(NO_EXECUTE_PERMISSION,1,[cause some or all of the heap to not have execute permission])\n if test x\"$machdep\" = x; then\n AC_MSG_RESULT($machdep)\n    machdep=\"mach_dep.lo\""}, {"sha": "f47682e9b5fd60f23bde5c4a6d57f83a013a9c33", "filename": "libffi/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0920e6c645e58c9fa456ff58b3ac0898e835cb2/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0920e6c645e58c9fa456ff58b3ac0898e835cb2/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=f0920e6c645e58c9fa456ff58b3ac0898e835cb2", "patch": "@@ -1,3 +1,13 @@\n+2007-04-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* src/closures.c: Include sys/statfs.h.\n+\t(_GNU_SOURCE): Define on Linux.\n+\t(FFI_MMAP_EXEC_SELINUX): Define.\n+\t(selinux_enabled): New variable.\n+\t(selinux_enabled_check): New function.\n+\t(is_selinux_enabled): Define.\n+\t(dlmmap): Use it.\n+\n 2007-03-24  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* testsuite/libffi.call/return_fl2.c (return_fl): Mark as static."}, {"sha": "ec956d04f265967f8d84292908ae8557498ab0af", "filename": "libffi/src/closures.c", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0920e6c645e58c9fa456ff58b3ac0898e835cb2/libffi%2Fsrc%2Fclosures.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0920e6c645e58c9fa456ff58b3ac0898e835cb2/libffi%2Fsrc%2Fclosures.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fclosures.c?ref=f0920e6c645e58c9fa456ff58b3ac0898e835cb2", "patch": "@@ -23,6 +23,10 @@\n    OTHER DEALINGS IN THE SOFTWARE.\n    ----------------------------------------------------------------------- */\n \n+#if defined __linux__ && !defined _GNU_SOURCE\n+#define _GNU_SOURCE 1\n+#endif\n+\n #include <ffi.h>\n #include <ffi_common.h>\n \n@@ -39,6 +43,15 @@\n # endif\n #endif\n \n+#if FFI_MMAP_EXEC_WRIT && !defined FFI_MMAP_EXEC_SELINUX\n+# ifdef __linux__\n+/* When defined to 1 check for SELinux and if SELinux is active,\n+   don't attempt PROT_EXEC|PROT_WRITE mapping at all, as that\n+   might cause audit messages.  */\n+#  define FFI_MMAP_EXEC_SELINUX 1\n+# endif\n+#endif\n+\n #if FFI_CLOSURES\n \n # if FFI_MMAP_EXEC_WRIT\n@@ -87,6 +100,55 @@\n #include <sys/mman.h>\n #define LACKS_SYS_MMAN_H 1\n \n+#if FFI_MMAP_EXEC_SELINUX\n+#include <sys/statfs.h>\n+#include <stdlib.h>\n+\n+static int selinux_enabled = -1;\n+\n+static int\n+selinux_enabled_check (void)\n+{\n+  struct statfs sfs;\n+  FILE *f;\n+  char *buf = NULL;\n+  size_t len = 0;\n+\n+  if (statfs (\"/selinux\", &sfs) >= 0\n+      && (unsigned int) sfs.f_type == 0xf97cff8cU)\n+    return 1;\n+  f = fopen (\"/proc/mounts\", \"r\");\n+  if (f == NULL)\n+    return 0;\n+  while (getline (&buf, &len, f) >= 0)\n+    {\n+      char *p = strchr (buf, ' ');\n+      if (p == NULL)\n+        break;\n+      p = strchr (p + 1, ' ');\n+      if (p == NULL)\n+        break;\n+      if (strncmp (p + 1, \"selinuxfs \", 10) != 0)\n+        {\n+          free (buf);\n+          fclose (f);\n+          return 1;\n+        }\n+    }\n+  free (buf);\n+  fclose (f);\n+  return 0;\n+}\n+\n+#define is_selinux_enabled() (selinux_enabled >= 0 ? selinux_enabled \\\n+\t\t\t      : (selinux_enabled = selinux_enabled_check ()))\n+\n+#else\n+\n+#define is_selinux_enabled() 0\n+\n+#endif\n+\n #define MAYBE_UNUSED __attribute__((__unused__))\n \n /* Declare all functions defined in dlmalloc.c as static.  */\n@@ -358,7 +420,7 @@ dlmmap (void *start, size_t length, int prot,\n   printf (\"mapping in %zi\\n\", length);\n #endif\n \n-  if (execfd == -1)\n+  if (execfd == -1 && !is_selinux_enabled ())\n     {\n       ptr = mmap (start, length, prot | PROT_EXEC, flags, fd, offset);\n "}]}