{"sha": "e9fe7b23b82942faffcdf4803eda4ade7b708a8a", "node_id": "C_kwDOANBUbNoAKGU5ZmU3YjIzYjgyOTQyZmFmZmNkZjQ4MDNlZGE0YWRlN2I3MDhhOGE", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-10-10T08:23:39Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T09:06:14Z"}, "message": "arm: improve vidupq* tests\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vidupq_m_n_u16.c: Improve tests.\n\t* gcc.target/arm/mve/intrinsics/vidupq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_m_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_m_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_m_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_x_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_x_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_x_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_x_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vidupq_x_wb_u8.c: Likewise.", "tree": {"sha": "9498d2a7a4395e54a30ad881b50b09dfe290d8e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9498d2a7a4395e54a30ad881b50b09dfe290d8e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9fe7b23b82942faffcdf4803eda4ade7b708a8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9fe7b23b82942faffcdf4803eda4ade7b708a8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9fe7b23b82942faffcdf4803eda4ade7b708a8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5cc5a6d2e3726d2075bb2a9379c4da850947b6d"}], "stats": {"total": 722, "additions": 634, "deletions": 88}, "files": [{"sha": "b4ee7af36e3d49cf3a4bc1bae06c437feb79b3fd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_m_n_u16.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_n_u16.c?ref=e9fe7b23b82942faffcdf4803eda4ade7b708a8a", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t inactive, uint32_t a, mve_pred16_t p)\n {\n-  return vidupq_m_n_u16 (inactive, a, 4, p);\n+  return vidupq_m_n_u16 (inactive, a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vidupt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t inactive, uint32_t a, mve_pred16_t p)\n {\n-  return vidupq_m (inactive, a, 4, p);\n+  return vidupq_m (inactive, a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vidupt.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (uint16x8_t inactive, mve_pred16_t p)\n+{\n+  return vidupq_m (inactive, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b13a7a80dcb0a89af7ca1e58e1ee3af154cbd786", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_m_n_u32.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_n_u32.c?ref=e9fe7b23b82942faffcdf4803eda4ade7b708a8a", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t inactive, uint32_t a, mve_pred16_t p)\n {\n   return vidupq_m_n_u32 (inactive, a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vidupt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t inactive, uint32_t a, mve_pred16_t p)\n {\n   return vidupq_m (inactive, a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vidupt.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (uint32x4_t inactive, mve_pred16_t p)\n+{\n+  return vidupq_m (inactive, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b731002724afdd124d2983ffd92edc436c084686", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_m_n_u8.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_n_u8.c?ref=e9fe7b23b82942faffcdf4803eda4ade7b708a8a", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t inactive, uint32_t a, mve_pred16_t p)\n {\n   return vidupq_m_n_u8 (inactive, a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vidupt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t inactive, uint32_t a, mve_pred16_t p)\n {\n   return vidupq_m (inactive, a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vidupt.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (uint8x16_t inactive, mve_pred16_t p)\n+{\n+  return vidupq_m (inactive, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "0e2ad6a2b55d3b9be02a537768dff122e7502839", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_m_wb_u16.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_wb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_wb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_wb_u16.c?ref=e9fe7b23b82942faffcdf4803eda4ade7b708a8a", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t inactive, uint32_t *a, mve_pred16_t p)\n {\n-  return vidupq_m_wb_u16 (inactive, a, 4, p);\n+  return vidupq_m_wb_u16 (inactive, a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vidupt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t inactive, uint32_t *a, mve_pred16_t p)\n {\n-  return vidupq_m (inactive, a, 4, p);\n+  return vidupq_m (inactive, a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vidupt.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (uint16x8_t inactive, mve_pred16_t p)\n+{\n+  return vidupq_m (inactive, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "786a05eee35937b14fc1fbf8e9902f4d43d41c42", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_m_wb_u32.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_wb_u32.c?ref=e9fe7b23b82942faffcdf4803eda4ade7b708a8a", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t inactive, uint32_t *a, mve_pred16_t p)\n {\n   return vidupq_m_wb_u32 (inactive, a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vidupt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t inactive, uint32_t *a, mve_pred16_t p)\n {\n   return vidupq_m (inactive, a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vidupt.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (uint32x4_t inactive, mve_pred16_t p)\n+{\n+  return vidupq_m (inactive, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3fcc3ba0d672dfe5f72017caee8fc862ac7b6127", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_m_wb_u8.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_wb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_wb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_m_wb_u8.c?ref=e9fe7b23b82942faffcdf4803eda4ade7b708a8a", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t inactive, uint32_t *a, mve_pred16_t p)\n {\n   return vidupq_m_wb_u8 (inactive, a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vidupt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t inactive, uint32_t *a, mve_pred16_t p)\n {\n   return vidupq_m (inactive, a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vidupt.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (uint8x16_t inactive, mve_pred16_t p)\n+{\n+  return vidupq_m (inactive, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a6ffdc05ce5da385b38cb75fc790d1d6a042e0f8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_n_u16.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_n_u16.c?ref=e9fe7b23b82942faffcdf4803eda4ade7b708a8a", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvidup.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint32_t a)\n {\n-  return vidupq_n_u16 (a, 4);\n+  return vidupq_n_u16 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vidup.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvidup.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint32_t a)\n {\n-  return vidupq_u16 (a, 4);\n+  return vidupq_u16 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vidup.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvidup.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 ()\n+{\n+  return vidupq_u16 (1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "8cd43e38255b2928fb1a416a32a6bb50c70ad56c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_n_u32.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_n_u32.c?ref=e9fe7b23b82942faffcdf4803eda4ade7b708a8a", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvidup.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32_t a)\n {\n   return vidupq_n_u32 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vidup.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvidup.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32_t a)\n {\n   return vidupq_u32 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vidup.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvidup.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 ()\n+{\n+  return vidupq_u32 (1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "4005eabb45de128ccfdb964a96001f72c0c932dd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_n_u8.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_n_u8.c?ref=e9fe7b23b82942faffcdf4803eda4ade7b708a8a", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvidup.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint32_t a)\n {\n   return vidupq_n_u8 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vidup.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvidup.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint32_t a)\n {\n   return vidupq_u8 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vidup.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvidup.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 ()\n+{\n+  return vidupq_u8 (1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3ad89c0536c1e4c306140c97ccb467b827fc32e0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_wb_u16.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_wb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_wb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_wb_u16.c?ref=e9fe7b23b82942faffcdf4803eda4ade7b708a8a", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvidup.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint32_t *a)\n {\n-  return vidupq_wb_u16 (a, 4);\n+  return vidupq_wb_u16 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vidup.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvidup.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint32_t *a)\n {\n-  return vidupq_u16 (a, 4);\n+  return vidupq_u16 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vidup.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvidup.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 ()\n+{\n+  return vidupq_u16 (1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "45eb1b09a5beeec701070f14433d6065cf51b356", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_wb_u32.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_wb_u32.c?ref=e9fe7b23b82942faffcdf4803eda4ade7b708a8a", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvidup.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32_t *a)\n {\n   return vidupq_wb_u32 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vidup.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvidup.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32_t *a)\n {\n   return vidupq_u32 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vidup.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvidup.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 ()\n+{\n+  return vidupq_u32 (1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "beb0aae67a98ebcbe150ed3db01970e4e824bf88", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_wb_u8.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_wb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_wb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_wb_u8.c?ref=e9fe7b23b82942faffcdf4803eda4ade7b708a8a", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvidup.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint32_t *a)\n {\n   return vidupq_wb_u8 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vidup.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvidup.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint32_t *a)\n {\n   return vidupq_u8 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vidup.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvidup.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 ()\n+{\n+  return vidupq_u8 (1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "74cd4310213b2458385e1d9597a603374a082498", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_x_n_u16.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_n_u16.c?ref=e9fe7b23b82942faffcdf4803eda4ade7b708a8a", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint32_t a, mve_pred16_t p)\n {\n-  return vidupq_x_n_u16 (a, 4, p);\n+  return vidupq_x_n_u16 (a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vidupt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint32_t a, mve_pred16_t p)\n {\n-  return vidupq_x_u16 (a, 4, p);\n+  return vidupq_x_u16 (a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vidupt.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (mve_pred16_t p)\n+{\n+  return vidupq_x_u16 (1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3111b1a54e62fdb8bb458d74de18c1d5e3af1510", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_x_n_u32.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_n_u32.c?ref=e9fe7b23b82942faffcdf4803eda4ade7b708a8a", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32_t a, mve_pred16_t p)\n {\n   return vidupq_x_n_u32 (a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vidupt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32_t a, mve_pred16_t p)\n {\n   return vidupq_x_u32 (a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vidupt.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (mve_pred16_t p)\n+{\n+  return vidupq_x_u32 (1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "5bedb4f9e797132ce0be0190a823cd5ff8bdf599", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_x_n_u8.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_n_u8.c?ref=e9fe7b23b82942faffcdf4803eda4ade7b708a8a", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint32_t a, mve_pred16_t p)\n {\n   return vidupq_x_n_u8 (a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vidupt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint32_t a, mve_pred16_t p)\n {\n   return vidupq_x_u8 (a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vidupt.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (mve_pred16_t p)\n+{\n+  return vidupq_x_u8 (1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "caf334fa32fcb027aa26832b9cd8cf9741caa172", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_x_wb_u16.c", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_wb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_wb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_wb_u16.c?ref=e9fe7b23b82942faffcdf4803eda4ade7b708a8a", "patch": "@@ -1,25 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n-uint32_t *a;\n-\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n-foo (mve_pred16_t p)\n+foo (uint32_t *a, mve_pred16_t p)\n {\n-  return vidupq_x_wb_u16 (a, 8, p);\n+  return vidupq_x_wb_u16 (a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vidupt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo1 (uint32_t *a, mve_pred16_t p)\n+{\n+  return vidupq_x_u16 (a, 1, p);\n+}\n+\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n-foo1 (mve_pred16_t p)\n+foo2 (mve_pred16_t p)\n {\n-  return vidupq_x_u16 (a, 8, p);\n+  return vidupq_x_u16 (1, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vidupt.u16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "11895e303cf1d7c90ece728564275d0fa3d62053", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_x_wb_u32.c", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_wb_u32.c?ref=e9fe7b23b82942faffcdf4803eda4ade7b708a8a", "patch": "@@ -1,25 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n-uint32_t *a;\n-\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n-foo (mve_pred16_t p)\n+foo (uint32_t *a, mve_pred16_t p)\n {\n-  return vidupq_x_wb_u32 (a, 2, p);\n+  return vidupq_x_wb_u32 (a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vidupt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo1 (uint32_t *a, mve_pred16_t p)\n+{\n+  return vidupq_x_u32 (a, 1, p);\n+}\n+\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n-foo1 (mve_pred16_t p)\n+foo2 (mve_pred16_t p)\n {\n-  return vidupq_x_u32 (a, 2, p);\n+  return vidupq_x_u32 (1, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vidupt.u32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b951d4cfe94c18d6f675405a151d66b73eef7004", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vidupq_x_wb_u8.c", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_wb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fe7b23b82942faffcdf4803eda4ade7b708a8a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_wb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvidupq_x_wb_u8.c?ref=e9fe7b23b82942faffcdf4803eda4ade7b708a8a", "patch": "@@ -1,25 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n-uint32_t * a;\n-\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n-foo (mve_pred16_t p)\n+foo (uint32_t *a, mve_pred16_t p)\n {\n-  return vidupq_x_wb_u8 (a, 2, p);\n+  return vidupq_x_wb_u8 (a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vidupt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo1 (uint32_t *a, mve_pred16_t p)\n+{\n+  return vidupq_x_u8 (a, 1, p);\n+}\n+\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvidupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n-foo1 (mve_pred16_t p)\n+foo2 (mve_pred16_t p)\n {\n-  return vidupq_x_u8 (a, 2, p);\n+  return vidupq_x_u8 (1, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vidupt.u8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}