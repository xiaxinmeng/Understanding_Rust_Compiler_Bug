{"sha": "463ec8224b9fc5661646c4f8c9242c92ebb08f72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYzZWM4MjI0YjlmYzU2NjE2NDZjNGY4YzkyNDJjOTJlYmIwOGY3Mg==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-01-31T22:51:59Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-01-31T22:51:59Z"}, "message": "re PR fortran/47455 ([OOP] internal compiler error: in fold_convert_loc, at fold-const.c:2028)\n\n2011-01-31  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/47455\n\t* trans-expr.c (gfc_conv_procedure_call): Handle procedure pointers\n\twith pointer or allocatable result.\n\n\n2011-01-31  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/47455\n\t* gfortran.dg/typebound_call_19.f03: New.\n\nFrom-SVN: r169455", "tree": {"sha": "a8b4296e4e8b0e26e311a219c1b461f791761117", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8b4296e4e8b0e26e311a219c1b461f791761117"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/463ec8224b9fc5661646c4f8c9242c92ebb08f72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/463ec8224b9fc5661646c4f8c9242c92ebb08f72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/463ec8224b9fc5661646c4f8c9242c92ebb08f72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/463ec8224b9fc5661646c4f8c9242c92ebb08f72/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f16072b6e873b66b7998ac2937b2e4d5b54ffbb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f16072b6e873b66b7998ac2937b2e4d5b54ffbb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f16072b6e873b66b7998ac2937b2e4d5b54ffbb3"}], "stats": {"total": 69, "additions": 65, "deletions": 4}, "files": [{"sha": "e05645d14afcd9e365a48f8a094925f802845924", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463ec8224b9fc5661646c4f8c9242c92ebb08f72/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463ec8224b9fc5661646c4f8c9242c92ebb08f72/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=463ec8224b9fc5661646c4f8c9242c92ebb08f72", "patch": "@@ -1,3 +1,9 @@\n+2011-01-31  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/47455\n+\t* trans-expr.c (gfc_conv_procedure_call): Handle procedure pointers\n+\twith pointer or allocatable result.\n+\n 2011-01-31  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/47519"}, {"sha": "b5b6d614984878210ffdaebb4c810c40bc4356dc", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463ec8224b9fc5661646c4f8c9242c92ebb08f72/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463ec8224b9fc5661646c4f8c9242c92ebb08f72/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=463ec8224b9fc5661646c4f8c9242c92ebb08f72", "patch": "@@ -3606,10 +3606,9 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n         x = f()\n      where f is pointer valued, we have to dereference the result.  */\n   if (!se->want_pointer && !byref\n-      && (sym->attr.pointer || sym->attr.allocatable)\n-      && !gfc_is_proc_ptr_comp (expr, NULL))\n-    se->expr = build_fold_indirect_ref_loc (input_location,\n-\t\t\t\t\tse->expr);\n+      && ((!comp && (sym->attr.pointer || sym->attr.allocatable))\n+\t  || (comp && (comp->attr.pointer || comp->attr.allocatable))))\n+    se->expr = build_fold_indirect_ref_loc (input_location, se->expr);\n \n   /* f2c calling conventions require a scalar default real function to\n      return a double precision result.  Convert this back to default"}, {"sha": "17bb107bfe1ac9b520a45f820fab8f2d33278372", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463ec8224b9fc5661646c4f8c9242c92ebb08f72/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463ec8224b9fc5661646c4f8c9242c92ebb08f72/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=463ec8224b9fc5661646c4f8c9242c92ebb08f72", "patch": "@@ -1,3 +1,8 @@\n+2011-01-31  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/47455\n+\t* gfortran.dg/typebound_call_19.f03: New.\n+\n 2011-01-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/47416"}, {"sha": "95b272a80ab8a732ac8e0f95e1d483b2b28944a3", "filename": "gcc/testsuite/gfortran.dg/typebound_call_19.f03", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/463ec8224b9fc5661646c4f8c9242c92ebb08f72/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_19.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/463ec8224b9fc5661646c4f8c9242c92ebb08f72/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_19.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_19.f03?ref=463ec8224b9fc5661646c4f8c9242c92ebb08f72", "patch": "@@ -0,0 +1,51 @@\n+! { dg-do run }\n+!\n+! PR 47455: [4.6 Regression][OOP] internal compiler error: in fold_convert_loc, at fold-const.c:2028\n+!\n+! Contributed by Thomas Henlich <thenlich@users.sourceforge.net>\n+\n+module class_t\n+  type :: tx\n+    integer :: i\n+  end type\n+  type :: t\n+    type(tx) :: x\n+    procedure(find_x), pointer :: ppc\n+  contains\n+    procedure :: find_x\n+  end type\n+  type(tx), target :: zero = tx(0)\n+contains\n+  function find_x(this)\n+    class(t), intent(in) :: this\n+    type(tx), pointer :: find_x\n+    find_x => zero\n+  end function find_x\n+end module\n+\n+program test\n+  use class_t\n+  class(t),allocatable :: this\n+  procedure(find_x), pointer :: pp\n+  allocate(this)\n+  ! (1) ordinary function call\n+  zero = tx(1)\n+  this%x = find_x(this)\n+  if (this%x%i /= 1) call abort()\n+  ! (2) procedure pointer\n+  zero = tx(2)\n+  pp => find_x\n+  this%x = pp(this)\n+  if (this%x%i /= 2) call abort()\n+  ! (3) PPC\n+  zero = tx(3)\n+  this%ppc => find_x\n+  this%x = this%ppc()\n+  if (this%x%i /= 3) call abort()\n+   ! (4) TBP\n+  zero = tx(4)\n+  this%x = this%find_x()\n+  if (this%x%i /= 4) call abort()\n+end\n+\n+! { dg-final { cleanup-modules \"class_t\" } }"}]}