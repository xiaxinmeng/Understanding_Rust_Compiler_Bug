{"sha": "e3ef371982a1a5deac31adbe0eb305d3ee70e094", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNlZjM3MTk4MmExYTVkZWFjMzFhZGJlMGViMzA1ZDNlZTcwZTA5NA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-25T22:16:22Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-25T22:16:22Z"}, "message": "libstdc++ Add missing tests for std::shared_timed_mutex\n\nThese tests were supposed to be committed as part of r278904 (aka\nb789efeae8c0620b83f25e4a0757c4871e02ab5f) but I didn't 'git add' them.\n\n\t* testsuite/30_threads/shared_timed_mutex/try_lock_until/1.cc: New\n\ttest.\n\t* testsuite/30_threads/shared_timed_mutex/try_lock_until/2.cc: New\n\ttest.", "tree": {"sha": "0163bdb95600e0f6f62df26bbc9d41f3429c0fae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0163bdb95600e0f6f62df26bbc9d41f3429c0fae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3ef371982a1a5deac31adbe0eb305d3ee70e094", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3ef371982a1a5deac31adbe0eb305d3ee70e094", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3ef371982a1a5deac31adbe0eb305d3ee70e094", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3ef371982a1a5deac31adbe0eb305d3ee70e094/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf1fc37bb4a3cab851e2acec811427d5243a22e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1fc37bb4a3cab851e2acec811427d5243a22e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf1fc37bb4a3cab851e2acec811427d5243a22e9"}], "stats": {"total": 166, "additions": 166, "deletions": 0}, "files": [{"sha": "11f7f02eb0bc06aa764ad29b37d7e4b515227c25", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ef371982a1a5deac31adbe0eb305d3ee70e094/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ef371982a1a5deac31adbe0eb305d3ee70e094/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e3ef371982a1a5deac31adbe0eb305d3ee70e094", "patch": "@@ -1,5 +1,10 @@\n 2020-03-25  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* testsuite/30_threads/shared_timed_mutex/try_lock_until/1.cc: New\n+\ttest.\n+\t* testsuite/30_threads/shared_timed_mutex/try_lock_until/2.cc: New\n+\ttest.\n+\n \t* include/bits/fs_fwd.h (filesystem::__file_clock): Move to ...\n \t* include/std/chrono (filesystem::__file_clock): Here.\n \t(filesystem::__file_clock::from_sys, filesystem::__file_clock::to_sys):"}, {"sha": "f0c98ed571fc6e3e2c848e3868258ec5150297cc", "filename": "libstdc++-v3/testsuite/30_threads/shared_timed_mutex/try_lock_until/1.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ef371982a1a5deac31adbe0eb305d3ee70e094/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_timed_mutex%2Ftry_lock_until%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ef371982a1a5deac31adbe0eb305d3ee70e094/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_timed_mutex%2Ftry_lock_until%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_timed_mutex%2Ftry_lock_until%2F1.cc?ref=e3ef371982a1a5deac31adbe0eb305d3ee70e094", "patch": "@@ -0,0 +1,87 @@\n+// { dg-do run }\n+// { dg-options \"-pthread\"  }\n+// { dg-require-effective-target c++14 }\n+// { dg-require-effective-target pthread }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2019-2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <shared_mutex>\n+#include <thread>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+#include <slow_clock.h>\n+\n+template <typename clock_type>\n+void test()\n+{\n+  typedef std::shared_timed_mutex mutex_type;\n+\n+  try\n+    {\n+      mutex_type m;\n+      m.lock();\n+      bool b;\n+\n+      std::thread t([&] {\n+\ttry\n+\t  {\n+\t    using namespace std::chrono;\n+\t    const auto timeout = 100ms;\n+\n+\t    {\n+\t      const auto start = clock_type::now();\n+\t      const auto b = m.try_lock_until(start + timeout);\n+\t      const auto t = clock_type::now() - start;\n+\t      VERIFY( !b );\n+\t      VERIFY( t >= timeout );\n+\t    }\n+\n+\t    {\n+\t      const auto start = clock_type::now();\n+\t      const auto b = m.try_lock_shared_until(start + timeout);\n+\t      const auto t = clock_type::now() - start;\n+\t      VERIFY( !b );\n+\t      VERIFY( t >= timeout );\n+\t    }\n+\t  }\n+\tcatch (const std::system_error& e)\n+\t  {\n+\t    VERIFY( false );\n+\t  }\n+\t});\n+      t.join();\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+int main()\n+{\n+  test<std::chrono::system_clock>();\n+  test<std::chrono::steady_clock>();\n+  test<__gnu_test::slow_clock>();\n+}"}, {"sha": "d07e81a4d7335d560faf7c14275750f9a17dc521", "filename": "libstdc++-v3/testsuite/30_threads/shared_timed_mutex/try_lock_until/2.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3ef371982a1a5deac31adbe0eb305d3ee70e094/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_timed_mutex%2Ftry_lock_until%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3ef371982a1a5deac31adbe0eb305d3ee70e094/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_timed_mutex%2Ftry_lock_until%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_timed_mutex%2Ftry_lock_until%2F2.cc?ref=e3ef371982a1a5deac31adbe0eb305d3ee70e094", "patch": "@@ -0,0 +1,74 @@\n+// { dg-do run }\n+// { dg-options \"-pthread\"  }\n+// { dg-require-effective-target c++14 }\n+// { dg-require-effective-target pthread }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2019-2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <shared_mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+#include <slow_clock.h>\n+\n+template <typename clock_type>\n+void test()\n+{\n+  typedef std::shared_timed_mutex mutex_type;\n+\n+  try\n+    {\n+      using namespace std::chrono;\n+      mutex_type m;\n+\n+      // Confirm that try_lock_until acts like try_lock if the timeout has\n+      // already passed.\n+\n+      // First test unique lock with a timeout that is definitely in the past.\n+      VERIFY( m.try_lock_until( clock_type::now() - 1s ) );\n+      m.unlock();\n+\n+      // Then attempt to test unique lock with a timeout that might exactly\n+      // match the current time.\n+      VERIFY( m.try_lock_until( clock_type::now() ) );\n+      m.unlock();\n+\n+      // Now do the same but with the shared lock\n+      VERIFY( m.try_lock_shared_until( clock_type::now() - 1s ) );\n+      m.unlock();\n+\n+      VERIFY( m.try_lock_shared_until( clock_type::now() ) );\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+int main()\n+{\n+  test<std::chrono::system_clock>();\n+  test<std::chrono::steady_clock>();\n+  test<__gnu_test::slow_clock>();\n+}"}]}