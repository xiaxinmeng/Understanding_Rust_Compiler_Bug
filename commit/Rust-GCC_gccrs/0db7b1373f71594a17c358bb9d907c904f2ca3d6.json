{"sha": "0db7b1373f71594a17c358bb9d907c904f2ca3d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRiN2IxMzczZjcxNTk0YTE3YzM1OGJiOWQ5MDdjOTA0ZjJjYTNkNg==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2013-09-05T23:23:53Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2013-09-05T23:23:53Z"}, "message": "20101011-1.c [__arc__] (DO_TEST): Define as 0.\n\n        * gcc.c-torture/execute/20101011-1.c [__arc__] (DO_TEST): Define as 0.\n        * testsuite/gcc.target/arc: New directory.\n        * gcc.dg/torture/pr37868.c: Also skip for arc*-*-*.\n        * gcc.dg/stack-usage-1.c [__arc__] (SIZE): Define.\n        * testsuite/gcc.dg/torture/stackalign/builtin-apply-2.c\n        [__arc__] (STACK_ARGUMENTS_SIZE): Set to 0.\n        * testsuite/gcc.dg/builtin-apply2.c\n        [__arc__] (STACK_ARGUMENTS_SIZE): Set to 0.\n\nCo-Authored-By: Vineet Gupta <Vineet.Gupta@synopsys.com>\n\nFrom-SVN: r202301", "tree": {"sha": "28b622cae2ece85379f13f63916455959d0609fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28b622cae2ece85379f13f63916455959d0609fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0db7b1373f71594a17c358bb9d907c904f2ca3d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0db7b1373f71594a17c358bb9d907c904f2ca3d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0db7b1373f71594a17c358bb9d907c904f2ca3d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0db7b1373f71594a17c358bb9d907c904f2ca3d6/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e18412fc019c907bcb59a07f58f55317dd9740a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e18412fc019c907bcb59a07f58f55317dd9740a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e18412fc019c907bcb59a07f58f55317dd9740a8"}], "stats": {"total": 295, "additions": 292, "deletions": 3}, "files": [{"sha": "3700847f09e683fab19a99499d56fc300cd1a324", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0db7b1373f71594a17c358bb9d907c904f2ca3d6", "patch": "@@ -1,3 +1,15 @@\n+2013-09-06  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\t    Vineet Gupta  <Vineet.Gupta@synopsys.com>\n+\n+\t* gcc.c-torture/execute/20101011-1.c [__arc__] (DO_TEST): Define as 0.\n+\t* testsuite/gcc.target/arc: New directory.\n+\t* gcc.dg/torture/pr37868.c: Also skip for arc*-*-*.\n+\t* gcc.dg/stack-usage-1.c [__arc__] (SIZE): Define.\n+\t* testsuite/gcc.dg/torture/stackalign/builtin-apply-2.c\n+\t[__arc__] (STACK_ARGUMENTS_SIZE): Set to 0.\n+\t* testsuite/gcc.dg/builtin-apply2.c\n+\t[__arc__] (STACK_ARGUMENTS_SIZE): Set to 0.\n+\n 2013-09-04  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/58201"}, {"sha": "bd54318a263a1359d4e968226b2675e6b825ede9", "filename": "gcc/testsuite/gcc.c-torture/execute/20101011-1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c?ref=0db7b1373f71594a17c358bb9d907c904f2ca3d6", "patch": "@@ -43,6 +43,9 @@\n #elif defined (__CRIS__)\n   /* No SIGFPE for CRIS integer division.  */\n # define DO_TEST 0\n+#elif defined (__arc__)\n+  /* No SIGFPE for ARC integer division.  */\n+# define DO_TEST 0\n #elif defined (__arm__) && defined (__ARM_EABI__)\n # ifdef __ARM_ARCH_EXT_IDIV__\n   /* Hardware division instructions may not trap, and handle trapping"}, {"sha": "daaef477894754bfce3b95f8402c76d62dbd27d9", "filename": "gcc/testsuite/gcc.dg/builtin-apply2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply2.c?ref=0db7b1373f71594a17c358bb9d907c904f2ca3d6", "patch": "@@ -17,7 +17,7 @@\n    E, F and G are passed on stack.  So the size of the stack argument\n    data is 20.  */\n #define STACK_ARGUMENTS_SIZE  20\n-#elif defined __MMIX__\n+#elif defined __MMIX__ || defined __arc__\n /* No parameters on stack for bar.  */\n #define STACK_ARGUMENTS_SIZE 0\n #else"}, {"sha": "ff9709ad4a20195cebf8178150f11decf4982799", "filename": "gcc/testsuite/gcc.dg/stack-usage-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c?ref=0db7b1373f71594a17c358bb9d907c904f2ca3d6", "patch": "@@ -9,6 +9,8 @@\n \n #if defined(__aarch64__)\n #  define SIZE 256 /* No frame pointer for leaf functions (default) */\n+#elif defined(__arc__)\n+#  define SIZE (256-4)\n #elif defined(__i386__)\n #  define SIZE 248\n #elif defined(__x86_64__)"}, {"sha": "cc9c24f49bb2371f0b0284a632a0818723b991c8", "filename": "gcc/testsuite/gcc.dg/torture/pr37868.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr37868.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr37868.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr37868.c?ref=0db7b1373f71594a17c358bb9d907c904f2ca3d6", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n /* { dg-options \"-fno-strict-aliasing\" } */\n-/* { dg-skip-if \"unaligned access\" { epiphany-*-* sparc*-*-* sh*-*-* tic6x-*-* } \"*\" \"\" } */\n+/* { dg-skip-if \"unaligned access\" { arc*-*-* epiphany-*-* sparc*-*-* sh*-*-* tic6x-*-* } \"*\" \"\" } */\n \n extern void abort (void);\n #if (__SIZEOF_INT__ <= 2)"}, {"sha": "ed81e808309792419bf456d48062d80d4597dac8", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/builtin-apply-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-2.c?ref=0db7b1373f71594a17c358bb9d907c904f2ca3d6", "patch": "@@ -19,7 +19,7 @@\n    E, F and G are passed on stack.  So the size of the stack argument\n    data is 20.  */\n #define STACK_ARGUMENTS_SIZE  20\n-#elif defined __aarch64__ || defined __MMIX__\n+#elif defined __aarch64__ || defined __arc__ || defined __MMIX__\n /* No parameters on stack for bar.  */\n #define STACK_ARGUMENTS_SIZE 0\n #else"}, {"sha": "83e2762e64a1debebbe83208f23266f0774cad9d", "filename": "gcc/testsuite/gcc.target/arc/arc.exp", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Farc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Farc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Farc.exp?ref=0db7b1373f71594a17c358bb9d907c904f2ca3d6", "patch": "@@ -0,0 +1,41 @@\n+# Copyright (C) 2007, 2011, 2012 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't an arc target.\n+if ![istarget arc*-*-*] then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "b1990c628e9684b1c28b4f12772241181ef764b3", "filename": "gcc/testsuite/gcc.target/arc/builtin_arc_aligned-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fbuiltin_arc_aligned-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fbuiltin_arc_aligned-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fbuiltin_arc_aligned-1.c?ref=0db7b1373f71594a17c358bb9d907c904f2ca3d6", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O\" } */\n+\n+extern void abort (void);\n+\n+/* In macros like optimized memset, we want to be able to decide what\n+   alignment a passed pointer has.  */\n+#define f(p) __builtin_arc_aligned (p, 4)\n+\n+int main (void)\n+{\n+  int i;\n+  if (f (&i) == 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "d48a915b8bd7f4a18539cf6170c76a9833218181", "filename": "gcc/testsuite/gcc.target/arc/builtin_arc_aligned-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fbuiltin_arc_aligned-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fbuiltin_arc_aligned-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fbuiltin_arc_aligned-2.c?ref=0db7b1373f71594a17c358bb9d907c904f2ca3d6", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O\" } */\n+\n+extern void abort (void);\n+\n+typedef struct {\n+  short x;\n+} mytype_t;\n+\n+mytype_t *__attribute__  ((noinline,weak))\n+some_func (void)\n+{\n+  static mytype_t s;\n+  return &s;\n+};\n+\n+int main (void)\n+{\n+  int y, y2;\n+  mytype_t *shorter = some_func();\n+  y = __builtin_arc_aligned (shorter, 2);\n+  if (!y)\n+    abort ();\n+  y2 = __builtin_arc_aligned (shorter, 4);\n+  if (y2)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "23d80edd4786249a1b6dcf15582e693fcc87921f", "filename": "gcc/testsuite/gcc.target/arc/builtin_arc_aligned-3.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fbuiltin_arc_aligned-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fbuiltin_arc_aligned-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fbuiltin_arc_aligned-3.c?ref=0db7b1373f71594a17c358bb9d907c904f2ca3d6", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O\" } */\n+\n+extern void abort (void);\n+\n+typedef struct {\n+  int b, c;\n+}\n+__attribute__((aligned(32))) inner_t; // data type is 32 byte aligned\n+\n+typedef struct {\n+  inner_t *inner;\n+  int a;\n+} outer_t;\n+\n+void __attribute__  ((noinline,weak))\n+somefunc (int a, int b, int c)\n+{\n+  if (!a || !b || c)\n+    abort ();\n+};\n+\n+__attribute__  ((noinline,weak))\n+outer_t *\n+some_alloc_1 ()\n+{\n+  static outer_t x;\n+  return &x;\n+}\n+\n+__attribute__  ((noinline,weak))\n+inner_t *\n+some_alloc_2 ()\n+{\n+  static inner_t x;\n+  return &x;\n+}\n+\n+int main (void)\n+{\n+  int y, y2, y3;\n+  // @p_out is pointing to instance of outer_t, naturally aligned to 4+4 = 8\n+  // and not gauranteed be 32 byte aligned.\n+  outer_t *p_out = some_alloc_1( ); // returns 8 byte aligned ptr\n+\n+  // @ptr is pointing to instance of inner_t which is naturally aligned to 32.\n+  // It is assigned to p_out->inner which is of type inner_t thus 32 byte\n+  // aligned as well\n+  // Note that gcc can deduce p_out->inner is 32b aligned, not at runtime,\n+  // because it was assigned @ptr, but even at compile time, because it's data\n+  // type is naturally 32 byte aligned.\n+  inner_t *ptr = some_alloc_2(); // returns 32 byte aligned ptr\n+  p_out->inner = ptr; // this ptr will also be 32 byte aligned\n+\n+  y = __builtin_arc_aligned(ptr, 32); // this shd return 1\n+  y2 = __builtin_arc_aligned(p_out->inner, 32); // this also shd return 1\n+  // Although p_out->inner ptr is 32 byte aligned,\n+  // it's container &(p_out->inner) need not be.\n+  // That is because the hoister has no relation to contents.\n+  // p_out is not gauranteed to be 32 byte\n+  // aligned, so it's member @inner in p_out need not be.\n+  y3 = __builtin_arc_aligned(&(p_out->inner), 32);\n+  // compiler not sure, so must return 0\n+\n+  somefunc(y, y2, y3);\n+  return 0;\n+}"}, {"sha": "70514572ea564eae1d55c7814e532806ae1cd334", "filename": "gcc/testsuite/gcc.target/arc/interrupt-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Finterrupt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Finterrupt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Finterrupt-1.c?ref=0db7b1373f71594a17c358bb9d907c904f2ca3d6", "patch": "@@ -0,0 +1,5 @@\n+void __attribute__ ((interrupt(\"ilink1\")))\n+handler1 (void)\n+{\n+}\n+/* { dg-final { scan-assembler-times \"j.*\\[ilink1\\]\" 1 } } */"}, {"sha": "ee8593b303919932ed401d0f37ebaf564c0ea1f6", "filename": "gcc/testsuite/gcc.target/arc/interrupt-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Finterrupt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Finterrupt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Finterrupt-2.c?ref=0db7b1373f71594a17c358bb9d907c904f2ca3d6", "patch": "@@ -0,0 +1,5 @@\n+void __attribute__ ((interrupt(\"ilink2\")))\n+handler1 (void)\n+{\n+}\n+/* { dg-final { scan-assembler-times \"j.*\\[ilink2\\]\" 1 } } */"}, {"sha": "fa598d67e6b1bfce4ae90af892bca1888b8093d7", "filename": "gcc/testsuite/gcc.target/arc/interrupt-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Finterrupt-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Finterrupt-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Finterrupt-3.c?ref=0db7b1373f71594a17c358bb9d907c904f2ca3d6", "patch": "@@ -0,0 +1,14 @@\n+void __attribute__ ((interrupt))\n+handler0 (void)\n+{ /* { dg-error \"wrong number of arguments specified\" } */\n+}\n+\n+void __attribute__ ((interrupt(\"you load too\")))\n+handler1 (void)\n+{ /* { dg-warning \"is not \\\"ilink1\\\" or \\\"ilink2\\\"\" } */\n+}\n+\n+void __attribute__ ((interrupt(42)))\n+hander2 (void)\n+{ /* { dg-warning \"is not a string constant\" } */\n+}"}, {"sha": "398ecfe948ee8385b7f220c47f4038b6fc200c0a", "filename": "gcc/testsuite/gcc.target/arc/mulsi3_highpart-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmulsi3_highpart-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmulsi3_highpart-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmulsi3_highpart-1.c?ref=0db7b1373f71594a17c358bb9d907c904f2ca3d6", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mARC700 --save-temps\" } */\n+\n+#include <stdlib.h>\n+\n+/* Hide value propagation from the optimizers.  */\n+static int\n+id (int i)\n+{\n+  asm (\"\": \"+Xr\" (i));\n+  return i;\n+}\n+\n+static int\n+mulhigh (unsigned a, unsigned b)\n+{\n+  return (unsigned long long) a * b >> 32;\n+}\n+\n+int\n+main (void)\n+{\n+  if (mulhigh (id (0x12345678), id (0x90abcdef)) != 0xa49a83e)\n+    abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"mpyhu\\[ \\t\\]\" } } */"}, {"sha": "ccc74e7b1adae3786b0859cc45f11cde6e1e0630", "filename": "gcc/testsuite/gcc.target/arc/mulsi3_highpart-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmulsi3_highpart-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmulsi3_highpart-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmulsi3_highpart-2.c?ref=0db7b1373f71594a17c358bb9d907c904f2ca3d6", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mARC700 --save-temps -mno-mpy\" } */\n+\n+#include <stdlib.h>\n+\n+/* Hide value propagation from the optimizers.  */\n+static int\n+id (int i)\n+{\n+  asm (\"\": \"+Xr\" (i));\n+  return i;\n+}\n+\n+static int\n+mulhigh (unsigned a, unsigned b)\n+{\n+  return (unsigned long long) a * b >> 32;\n+}\n+\n+int\n+main (void)\n+{\n+  if (mulhigh (id (0x12345678), id (0x90abcdef)) != 0xa49a83e)\n+    abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"mpyhu\\[ \\t\\]\" } } */\n+/* { dg-final { scan-assembler-not \"@__muldi3\" } } */\n+/* { dg-final { scan-assembler \"@__umulsi3_highpart\" } } */"}, {"sha": "9687195981c0901e9679c7b0a5a519f77c99872d", "filename": "gcc/testsuite/gcc.target/arc/nv-cache.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fnv-cache.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fnv-cache.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fnv-cache.c?ref=0db7b1373f71594a17c358bb9d907c904f2ca3d6", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-volatile-cache\" } */\n+\n+volatile int i;\n+void f (void)\n+{\n+  i = 0;\n+}\n+/* { dg-final { scan-assembler \"st\\.di\" } } */"}, {"sha": "3d8366c156457f045fb130539202063ed87d4d55", "filename": "gcc/testsuite/gcc.target/arc/sdata-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fsdata-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fsdata-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fsdata-1.c?ref=0db7b1373f71594a17c358bb9d907c904f2ca3d6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msdata\" } */\n+\n+int i;\n+\n+int f (void)\n+{\n+  return i;\n+}\n+/* { dg-final { scan-assembler \"@sda\" } } */"}, {"sha": "ebaa25e72674b34de42971be4407f90bc49af937", "filename": "gcc/testsuite/gcc.target/arc/sdata-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fsdata-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fsdata-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fsdata-2.c?ref=0db7b1373f71594a17c358bb9d907c904f2ca3d6", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-sdata\" } */\n+\n+int i;\n+\n+int f (void)\n+{\n+  return i;\n+}\n+/* { dg-final { scan-assembler-not \"@sda\" } } */"}, {"sha": "7722c43358185f912934b5c732f0b8f74db28a07", "filename": "gcc/testsuite/gcc.target/arc/v-cache.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fv-cache.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0db7b1373f71594a17c358bb9d907c904f2ca3d6/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fv-cache.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fv-cache.c?ref=0db7b1373f71594a17c358bb9d907c904f2ca3d6", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mvolatile-cache\" } */\n+\n+volatile int i;\n+void f (void)\n+{\n+  i = 0;\n+}\n+/* { dg-final { scan-assembler-not \"st\\.di\" } } */"}]}