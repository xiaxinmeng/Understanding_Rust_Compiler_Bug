{"sha": "58cc98767aa1d8136d36467b892dc4adaf427acc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThjYzk4NzY3YWExZDgxMzZkMzY0NjdiODkyZGM0YWRhZjQyN2FjYw==", "commit": {"author": {"name": "Yuliang Wang", "email": "yuliang.wang@arm.com", "date": "2019-09-12T09:59:58Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-12T09:59:58Z"}, "message": "Vectorise multiply high with scaling operations (PR 89386)\n\n2019-09-12  Yuliang Wang  <yuliang.wang@arm.com>\n\ngcc/\n\tPR tree-optimization/89386\n\t* config/aarch64/aarch64-sve2.md (<su>mull<bt><Vwide>)\n\t(<r>shrnb<mode>, <r>shrnt<mode>): New SVE2 patterns.\n\t(<su>mulh<r>s<mode>3): New pattern for MULHRS.\n\t* config/aarch64/iterators.md (UNSPEC_SMULLB, UNSPEC_SMULLT)\n\t(UNSPEC_UMULLB, UNSPEC_UMULLT, UNSPEC_SHRNB, UNSPEC_SHRNT)\n\t(UNSPEC_RSHRNB, UNSPEC_RSHRNT, UNSPEC_SMULHS, UNSPEC_SMULHRS)\n\tUNSPEC_UMULHS, UNSPEC_UMULHRS): New unspecs.\n\t(MULLBT, SHRNB, SHRNT, MULHRS): New int iterators.\n\t(su, r): Handle the unspecs above.\n\t(bt): New int attribute.\n\t* internal-fn.def (IFN_MULHS, IFN_MULHRS): New internal functions.\n\t* internal-fn.c (first_commutative_argument): Commutativity info for\n\tabove.\n\t* optabs.def (smulhs_optab, smulhrs_optab, umulhs_optab)\n\t(umulhrs_optab): New optabs.\n\t* doc/md.texi (smulhs$var{m3}, umulhs$var{m3})\n\t(smulhrs$var{m3}, umulhrs$var{m3}): Documentation for the above.\n\t* tree-vect-patterns.c (vect_recog_mulhs_pattern): New pattern\n\tfunction.\n\t(vect_vect_recog_func_ptrs): Add it.\n\t* testsuite/gcc.target/aarch64/sve2/mulhrs_1.c: New test.\n\t* testsuite/gcc.dg/vect/vect-mulhrs-1.c: As above.\n\t* testsuite/gcc.dg/vect/vect-mulhrs-2.c: As above.\n\t* testsuite/gcc.dg/vect/vect-mulhrs-3.c: As above.\n\t* testsuite/gcc.dg/vect/vect-mulhrs-4.c: As above.\n\t* doc/sourcebuild.texi (vect_mulhrs_hi): Document new target selector.\n\t* testsuite/lib/target-supports.exp\n\t(check_effective_target_vect_mulhrs_hi): Return true for AArch64\n\twith SVE2.\n\nFrom-SVN: r275682", "tree": {"sha": "6b0b99d529e0034fbf28907e2a8dcc95ba22df37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b0b99d529e0034fbf28907e2a8dcc95ba22df37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58cc98767aa1d8136d36467b892dc4adaf427acc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58cc98767aa1d8136d36467b892dc4adaf427acc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58cc98767aa1d8136d36467b892dc4adaf427acc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58cc98767aa1d8136d36467b892dc4adaf427acc/comments", "author": null, "committer": null, "parents": [{"sha": "8c58d9d837098d692d313a7116ed7d4a9e271287", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c58d9d837098d692d313a7116ed7d4a9e271287", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c58d9d837098d692d313a7116ed7d4a9e271287"}], "stats": {"total": 489, "additions": 488, "deletions": 1}, "files": [{"sha": "7aba409e362179d8bf971d3205511bc3f52e4076", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58cc98767aa1d8136d36467b892dc4adaf427acc", "patch": "@@ -1,3 +1,36 @@\n+2019-09-12  Yuliang Wang  <yuliang.wang@arm.com>\n+\n+\tPR tree-optimization/89386\n+\t* config/aarch64/aarch64-sve2.md (<su>mull<bt><Vwide>)\n+\t(<r>shrnb<mode>, <r>shrnt<mode>): New SVE2 patterns.\n+\t(<su>mulh<r>s<mode>3): New pattern for MULHRS.\n+\t* config/aarch64/iterators.md (UNSPEC_SMULLB, UNSPEC_SMULLT)\n+\t(UNSPEC_UMULLB, UNSPEC_UMULLT, UNSPEC_SHRNB, UNSPEC_SHRNT)\n+\t(UNSPEC_RSHRNB, UNSPEC_RSHRNT, UNSPEC_SMULHS, UNSPEC_SMULHRS)\n+\tUNSPEC_UMULHS, UNSPEC_UMULHRS): New unspecs.\n+\t(MULLBT, SHRNB, SHRNT, MULHRS): New int iterators.\n+\t(su, r): Handle the unspecs above.\n+\t(bt): New int attribute.\n+\t* internal-fn.def (IFN_MULHS, IFN_MULHRS): New internal functions.\n+\t* internal-fn.c (first_commutative_argument): Commutativity info for\n+\tabove.\n+\t* optabs.def (smulhs_optab, smulhrs_optab, umulhs_optab)\n+\t(umulhrs_optab): New optabs.\n+\t* doc/md.texi (smulhs$var{m3}, umulhs$var{m3})\n+\t(smulhrs$var{m3}, umulhrs$var{m3}): Documentation for the above.\n+\t* tree-vect-patterns.c (vect_recog_mulhs_pattern): New pattern\n+\tfunction.\n+\t(vect_vect_recog_func_ptrs): Add it.\n+\t* testsuite/gcc.target/aarch64/sve2/mulhrs_1.c: New test.\n+\t* testsuite/gcc.dg/vect/vect-mulhrs-1.c: As above.\n+\t* testsuite/gcc.dg/vect/vect-mulhrs-2.c: As above.\n+\t* testsuite/gcc.dg/vect/vect-mulhrs-3.c: As above.\n+\t* testsuite/gcc.dg/vect/vect-mulhrs-4.c: As above.\n+\t* doc/sourcebuild.texi (vect_mulhrs_hi): Document new target selector.\n+\t* testsuite/lib/target-supports.exp\n+\t(check_effective_target_vect_mulhrs_hi): Return true for AArch64\n+\twith SVE2.\n+\n 2019-09-11  Michael Meissner  <meissner@linux.ibm.com>\n \n \t* config/rs6000/predicates.md (non_add_cint_operand): Simplify the"}, {"sha": "ee9acdcfbca359bac20fccdfab96779e21d96e80", "filename": "gcc/config/aarch64/aarch64-sve2.md", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md?ref=58cc98767aa1d8136d36467b892dc4adaf427acc", "patch": "@@ -63,3 +63,63 @@\n    movprfx\\t%0, %2\\;<sur>h<addsub>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n   [(set_attr \"movprfx\" \"*,yes\")]\n )\n+\n+;; Multiply long top / bottom.\n+(define_insn \"<su>mull<bt><Vwide>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+\t(unspec:<VWIDE> [(match_operand:SVE_BHSI 1 \"register_operand\" \"w\")\n+\t\t\t (match_operand:SVE_BHSI 2 \"register_operand\" \"w\")]\n+\t\t\tMULLBT))]\n+  \"TARGET_SVE2\"\n+  \"<su>mull<bt>\\t%0.<Vewtype>, %1.<Vetype>, %2.<Vetype>\"\n+)\n+\n+;; (Rounding) Right shift narrow bottom.\n+(define_insn \"<r>shrnb<mode>\"\n+  [(set (match_operand:SVE_BHSI 0 \"register_operand\" \"=w\")\n+        (unspec:SVE_BHSI\n+\t  [(match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n+\t   (match_operand 2 \"aarch64_simd_shift_imm_offset_<Vel>\" \"\")]\n+\t  SHRNB))]\n+  \"TARGET_SVE2\"\n+  \"<r>shrnb\\t%0.<Vetype>, %1.<Vewtype>, #%2\"\n+)\n+\n+;; (Rounding) Right shift narrow top.\n+(define_insn \"<r>shrnt<mode>\"\n+  [(set (match_operand:SVE_BHSI 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_BHSI\n+\t  [(match_operand:SVE_BHSI 1 \"register_operand\" \"0\")\n+\t   (match_operand:<VWIDE> 2 \"register_operand\" \"w\")\n+\t   (match_operand 3 \"aarch64_simd_shift_imm_offset_<Vel>\" \"i\")]\n+\t  SHRNT))]\n+  \"TARGET_SVE2\"\n+  \"<r>shrnt\\t%0.<Vetype>, %2.<Vewtype>, #%3\"\n+)\n+\n+;; Unpredicated integer multiply-high-with-(round-and-)scale.\n+(define_expand \"<su>mulh<r>s<mode>3\"\n+  [(set (match_operand:SVE_BHSI 0 \"register_operand\")\n+\t(unspec:SVE_BHSI\n+\t  [(match_dup 3)\n+\t   (unspec:SVE_BHSI [(match_operand:SVE_BHSI 1 \"register_operand\")\n+\t\t\t     (match_operand:SVE_BHSI 2 \"register_operand\")]\n+\t\t\t    MULHRS)]\n+\t  UNSPEC_PRED_X))]\n+  \"TARGET_SVE2\"\n+  {\n+    operands[3] = aarch64_ptrue_reg (<VPRED>mode);\n+\n+    rtx prod_b = gen_reg_rtx (<VWIDE>mode);\n+    rtx prod_t = gen_reg_rtx (<VWIDE>mode);\n+    emit_insn (gen_<su>mullb<Vwide> (prod_b, operands[1], operands[2]));\n+    emit_insn (gen_<su>mullt<Vwide> (prod_t, operands[1], operands[2]));\n+\n+    rtx shift = GEN_INT (GET_MODE_UNIT_BITSIZE (<MODE>mode) - 1);\n+    emit_insn (gen_<r>shrnb<mode> (operands[0], prod_b, shift));\n+    emit_insn (gen_<r>shrnt<mode> (operands[0], operands[0], prod_t, shift));\n+\n+    DONE;\n+  }\n+)\n+"}, {"sha": "d23f0fcbc2f47e8b48ca9bc52b3e483e450da432", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=58cc98767aa1d8136d36467b892dc4adaf427acc", "patch": "@@ -378,6 +378,10 @@\n     UNSPEC_RSUBHN2\t; Used in aarch64-simd.md.\n     UNSPEC_SQDMULH\t; Used in aarch64-simd.md.\n     UNSPEC_SQRDMULH\t; Used in aarch64-simd.md.\n+    UNSPEC_SMULLB\t; Used in aarch64-sve2.md.\n+    UNSPEC_SMULLT\t; Used in aarch64-sve2.md.\n+    UNSPEC_UMULLB\t; Used in aarch64-sve2.md.\n+    UNSPEC_UMULLT\t; Used in aarch64-sve2.md.\n     UNSPEC_PMUL\t\t; Used in aarch64-simd.md.\n     UNSPEC_FMULX\t; Used in aarch64-simd.md.\n     UNSPEC_USQADD\t; Used in aarch64-simd.md.\n@@ -400,6 +404,10 @@\n     UNSPEC_UQSHRN\t; Used in aarch64-simd.md.\n     UNSPEC_SQRSHRN\t; Used in aarch64-simd.md.\n     UNSPEC_UQRSHRN\t; Used in aarch64-simd.md.\n+    UNSPEC_SHRNB\t; Used in aarch64-sve2.md.\n+    UNSPEC_SHRNT\t; Used in aarch64-sve2.md.\n+    UNSPEC_RSHRNB\t; Used in aarch64-sve2.md.\n+    UNSPEC_RSHRNT\t; Used in aarch64-sve2.md.\n     UNSPEC_SSHL\t\t; Used in aarch64-simd.md.\n     UNSPEC_USHL\t\t; Used in aarch64-simd.md.\n     UNSPEC_SRSHL\t; Used in aarch64-simd.md.\n@@ -523,6 +531,10 @@\n     UNSPEC_FCMLA90\t; Used in aarch64-simd.md.\n     UNSPEC_FCMLA180\t; Used in aarch64-simd.md.\n     UNSPEC_FCMLA270\t; Used in aarch64-simd.md.\n+    UNSPEC_SMULHS\t; Used in aarch64-sve2.md.\n+    UNSPEC_SMULHRS\t; Used in aarch64-sve2.md.\n+    UNSPEC_UMULHS\t; Used in aarch64-sve2.md.\n+    UNSPEC_UMULHRS\t; Used in aarch64-sve2.md.\n ])\n \n ;; ------------------------------------------------------------------\n@@ -1588,6 +1600,13 @@\n \n (define_int_iterator RHADD [UNSPEC_SRHADD UNSPEC_URHADD])\n \n+(define_int_iterator MULLBT [UNSPEC_SMULLB UNSPEC_UMULLB\n+                             UNSPEC_SMULLT UNSPEC_UMULLT])\n+\n+(define_int_iterator SHRNB [UNSPEC_SHRNB UNSPEC_RSHRNB])\n+\n+(define_int_iterator SHRNT [UNSPEC_SHRNT UNSPEC_RSHRNT])\n+\n (define_int_iterator DOTPROD [UNSPEC_SDOT UNSPEC_UDOT])\n \n (define_int_iterator ADDSUBHN [UNSPEC_ADDHN UNSPEC_RADDHN\n@@ -1607,6 +1626,9 @@\n \n (define_int_iterator VQDMULH [UNSPEC_SQDMULH UNSPEC_SQRDMULH])\n \n+(define_int_iterator MULHRS [UNSPEC_SMULHS UNSPEC_UMULHS\n+                             UNSPEC_SMULHRS UNSPEC_UMULHRS])\n+\n (define_int_iterator USSUQADD [UNSPEC_SUQADD UNSPEC_USQADD])\n \n (define_int_iterator SUQMOVN [UNSPEC_SQXTN UNSPEC_UQXTN])\n@@ -1872,7 +1894,11 @@\n \t\t     (UNSPEC_COND_FCVTZS \"s\")\n \t\t     (UNSPEC_COND_FCVTZU \"u\")\n \t\t     (UNSPEC_COND_SCVTF \"s\")\n-\t\t     (UNSPEC_COND_UCVTF \"u\")])\n+\t\t     (UNSPEC_COND_UCVTF \"u\")\n+\t\t     (UNSPEC_SMULLB \"s\") (UNSPEC_UMULLB \"u\")\n+\t\t     (UNSPEC_SMULLT \"s\") (UNSPEC_UMULLT \"u\")\n+\t\t     (UNSPEC_SMULHS \"s\") (UNSPEC_UMULHS \"u\")\n+\t\t     (UNSPEC_SMULHRS \"s\") (UNSPEC_UMULHRS \"u\")])\n \n (define_int_attr sur [(UNSPEC_SHADD \"s\") (UNSPEC_UHADD \"u\")\n \t\t      (UNSPEC_SRHADD \"sr\") (UNSPEC_URHADD \"ur\")\n@@ -1910,6 +1936,10 @@\n                     (UNSPEC_SQRSHRN \"r\") (UNSPEC_UQRSHRN \"r\")\n                     (UNSPEC_SQSHL   \"\")  (UNSPEC_UQSHL  \"\")\n                     (UNSPEC_SQRSHL   \"r\")(UNSPEC_UQRSHL  \"r\")\n+\t\t    (UNSPEC_SHRNB \"\") (UNSPEC_SHRNT \"\")\n+\t\t    (UNSPEC_RSHRNB \"r\") (UNSPEC_RSHRNT \"r\")\n+\t\t    (UNSPEC_SMULHS \"\") (UNSPEC_UMULHS \"\")\n+\t\t    (UNSPEC_SMULHRS \"r\") (UNSPEC_UMULHRS \"r\")\n ])\n \n (define_int_attr lr [(UNSPEC_SSLI  \"l\") (UNSPEC_USLI  \"l\")\n@@ -1922,6 +1952,9 @@\n \t\t    (UNSPEC_SHADD \"\") (UNSPEC_UHADD \"u\")\n \t\t    (UNSPEC_SRHADD \"\") (UNSPEC_URHADD \"u\")])\n \n+(define_int_attr bt [(UNSPEC_SMULLB \"b\") (UNSPEC_UMULLB \"b\")\n+\t\t     (UNSPEC_SMULLT \"t\") (UNSPEC_UMULLT \"t\")])\n+\n (define_int_attr addsub [(UNSPEC_SHADD \"add\")\n \t\t\t (UNSPEC_UHADD \"add\")\n \t\t\t (UNSPEC_SRHADD \"add\")"}, {"sha": "f35fd2b1b19cef1deb41566d7614d80d449d69fc", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=58cc98767aa1d8136d36467b892dc4adaf427acc", "patch": "@@ -5387,6 +5387,33 @@ operand 1. Add operand 1 to operand 2 and place the widened result in\n operand 0. (This is used express accumulation of elements into an accumulator\n of a wider mode.)\n \n+@cindex @code{smulhs@var{m3}} instruction pattern\n+@item @samp{smulhs@var{m3}}\n+@cindex @code{umulhs@var{m3}} instruction pattern\n+@itemx @samp{umulhs@var{m3}}\n+Signed/unsigned multiply high with scale. This is equivalent to the C code:\n+@smallexample\n+narrow op0, op1, op2;\n+@dots{}\n+op0 = (narrow) (((wide) op1 * (wide) op2) >> (N / 2 - 1));\n+@end smallexample\n+where the sign of @samp{narrow} determines whether this is a signed\n+or unsigned operation, and @var{N} is the size of @samp{wide} in bits.\n+\n+@cindex @code{smulhrs@var{m3}} instruction pattern\n+@item @samp{smulhrs@var{m3}}\n+@cindex @code{umulhrs@var{m3}} instruction pattern\n+@itemx @samp{umulhrs@var{m3}}\n+Signed/unsigned multiply high with round and scale. This is\n+equivalent to the C code:\n+@smallexample\n+narrow op0, op1, op2;\n+@dots{}\n+op0 = (narrow) (((((wide) op1 * (wide) op2) >> (N / 2 - 2)) + 1) >> 1);\n+@end smallexample\n+where the sign of @samp{narrow} determines whether this is a signed\n+or unsigned operation, and @var{N} is the size of @samp{wide} in bits.\n+\n @cindex @code{vec_shl_insert_@var{m}} instruction pattern\n @item @samp{vec_shl_insert_@var{m}}\n Shift the elements in vector input operand 1 left one element (i.e.@:"}, {"sha": "4ace224a8ff5ed4fafed10a69ef00ffb2d7d8c39", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=58cc98767aa1d8136d36467b892dc4adaf427acc", "patch": "@@ -1442,6 +1442,10 @@ vector alignment.\n Target supports both signed and unsigned averaging operations on vectors\n of bytes.\n \n+@item vect_mulhrs_hi\n+Target supports both signed and unsigned multiply-high-with-round-and-scale\n+operations on vectors of half-words.\n+\n @item vect_condition\n Target supports vector conditional operations.\n "}, {"sha": "549d6f1153b6e568d1ab8b0e5b8fa8ccc2161b61", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=58cc98767aa1d8136d36467b892dc4adaf427acc", "patch": "@@ -3210,6 +3210,8 @@ first_commutative_argument (internal_fn fn)\n     case IFN_FNMS:\n     case IFN_AVG_FLOOR:\n     case IFN_AVG_CEIL:\n+    case IFN_MULHS:\n+    case IFN_MULHRS:\n     case IFN_FMIN:\n     case IFN_FMAX:\n       return 0;"}, {"sha": "49f57978c88a3a8c1a0206d983e1720ed09b0385", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=58cc98767aa1d8136d36467b892dc4adaf427acc", "patch": "@@ -149,6 +149,11 @@ DEF_INTERNAL_SIGNED_OPTAB_FN (AVG_FLOOR, ECF_CONST | ECF_NOTHROW, first,\n DEF_INTERNAL_SIGNED_OPTAB_FN (AVG_CEIL, ECF_CONST | ECF_NOTHROW, first,\n \t\t\t      savg_ceil, uavg_ceil, binary)\n \n+DEF_INTERNAL_SIGNED_OPTAB_FN (MULHS, ECF_CONST | ECF_NOTHROW, first,\n+\t\t\t      smulhs, umulhs, binary)\n+DEF_INTERNAL_SIGNED_OPTAB_FN (MULHRS, ECF_CONST | ECF_NOTHROW, first,\n+\t\t\t      smulhrs, umulhrs, binary)\n+\n DEF_INTERNAL_OPTAB_FN (COND_ADD, ECF_CONST, cond_add, cond_binary)\n DEF_INTERNAL_OPTAB_FN (COND_SUB, ECF_CONST, cond_sub, cond_binary)\n DEF_INTERNAL_OPTAB_FN (COND_MUL, ECF_CONST, cond_smul, cond_binary)"}, {"sha": "308696846d4926fdd94133b87f4f59b8d1cc7f20", "filename": "gcc/optabs.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Foptabs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Foptabs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.def?ref=58cc98767aa1d8136d36467b892dc4adaf427acc", "patch": "@@ -343,6 +343,10 @@ OPTAB_D (udot_prod_optab, \"udot_prod$I$a\")\n OPTAB_D (usum_widen_optab, \"widen_usum$I$a3\")\n OPTAB_D (usad_optab, \"usad$I$a\")\n OPTAB_D (ssad_optab, \"ssad$I$a\")\n+OPTAB_D (smulhs_optab, \"smulhs$a3\")\n+OPTAB_D (smulhrs_optab, \"smulhrs$a3\")\n+OPTAB_D (umulhs_optab, \"umulhs$a3\")\n+OPTAB_D (umulhrs_optab, \"umulhrs$a3\")\n OPTAB_D (vec_pack_sfix_trunc_optab, \"vec_pack_sfix_trunc_$a\")\n OPTAB_D (vec_pack_ssat_optab, \"vec_pack_ssat_$a\")\n OPTAB_D (vec_pack_trunc_optab, \"vec_pack_trunc_$a\")"}, {"sha": "8e46ff6b01fe765f597add737e0b64ec5b505dd1", "filename": "gcc/testsuite/gcc.dg/vect/vect-mulhrs-1.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-mulhrs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-mulhrs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-mulhrs-1.c?ref=58cc98767aa1d8136d36467b892dc4adaf427acc", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include \"tree-vect.h\"\n+#ifndef SIGNEDNESS\n+#define SIGNEDNESS signed\n+#endif\n+#ifndef BIAS\n+#define BIAS 0\n+#endif\n+\n+#define HRS(x) ((((x) >> (15 - BIAS)) + BIAS) >> BIAS)\n+\n+void __attribute__ ((noipa))\n+f (SIGNEDNESS short *restrict a, SIGNEDNESS short *restrict b,\n+   SIGNEDNESS short *restrict c, __INTPTR_TYPE__ n)\n+{\n+  for (__INTPTR_TYPE__ i = 0; i < n; ++i)\n+    a[i] = HRS((SIGNEDNESS int) b[i] * (SIGNEDNESS int) c[i]);\n+}\n+\n+#define N 50\n+#define BASE1 ((SIGNEDNESS int) -1 < 0 ? -126 : 4)\n+#define BASE2 ((SIGNEDNESS int) -1 < 0 ? -101 : 26)\n+#define CONST1 0x01AB\n+#define CONST2 0x01CD\n+\n+int\n+main (void)\n+{\n+  check_vect ();\n+\n+  SIGNEDNESS short a[N], b[N], c[N];\n+  for (int i = 0; i < N; ++i)\n+    {\n+      b[i] = BASE1 + i * CONST1;\n+      c[i] = BASE2 + i * CONST2;\n+      asm volatile (\"\" ::: \"memory\");\n+    }\n+  f (a, b, c, N);\n+  for (int i = 0; i < N; ++i)\n+    if (a[i] != HRS(BASE1 * BASE2 + i * i * (CONST1 * CONST2)\n+\t\t    + i * (BASE1 * CONST2 + BASE2 * CONST1)))\n+      __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vect_recog_mulhs_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump {\\.MULHS} \"vect\" { target vect_mulhrs_hi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_mulhrs_hi } } } */"}, {"sha": "a16e71c6a37f2a0f72905741dbc4698a8fcbc601", "filename": "gcc/testsuite/gcc.dg/vect/vect-mulhrs-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-mulhrs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-mulhrs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-mulhrs-2.c?ref=58cc98767aa1d8136d36467b892dc4adaf427acc", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#define SIGNEDNESS unsigned\n+\n+#include \"vect-mulhrs-1.c\"\n+\n+/* { dg-final { scan-tree-dump \"vect_recog_mulhs_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump {\\.MULHS} \"vect\" { target vect_mulhrs_hi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_mulhrs_hi } } } */"}, {"sha": "e7d44d75d6c474de2605c72deb7db87a107c6531", "filename": "gcc/testsuite/gcc.dg/vect/vect-mulhrs-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-mulhrs-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-mulhrs-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-mulhrs-3.c?ref=58cc98767aa1d8136d36467b892dc4adaf427acc", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#define BIAS 1\n+\n+#include \"vect-mulhrs-1.c\"\n+\n+/* { dg-final { scan-tree-dump \"vect_recog_mulhs_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump {\\.MULHRS} \"vect\" { target vect_mulhrs_hi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_mulhrs_hi } } } */"}, {"sha": "e121763352ee9aed75423352db86c67f866e2d1a", "filename": "gcc/testsuite/gcc.dg/vect/vect-mulhrs-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-mulhrs-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-mulhrs-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-mulhrs-4.c?ref=58cc98767aa1d8136d36467b892dc4adaf427acc", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#define SIGNEDNESS unsigned\n+#define BIAS 1\n+\n+#include \"vect-mulhrs-1.c\"\n+\n+/* { dg-final { scan-tree-dump \"vect_recog_mulhs_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump {\\.MULHRS} \"vect\" { target vect_mulhrs_hi } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" { target vect_mulhrs_hi } } } */"}, {"sha": "7970d681c9d137ed71b5fe603d23870397b81eb7", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/mulhrs_1.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fmulhrs_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fmulhrs_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fmulhrs_1.c?ref=58cc98767aa1d8136d36467b892dc4adaf427acc", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define MULTHI(TYPE, BIGGER, RND)                     \\\n+TYPE __attribute__ ((noinline, noclone))              \\\n+mulhs_##TYPE##_##RND (TYPE *restrict x,               \\\n+        TYPE *restrict y, TYPE *restrict z, int n)    \\\n+{                                                     \\\n+  for (int i = 0; i < n; i++)                         \\\n+  {                                                   \\\n+    z[i] = ((((BIGGER)x[i] * (BIGGER)y[i]) >>         \\\n+            (sizeof(BIGGER)*8/2-2)) + RND) >> 1;      \\\n+  }                                                   \\\n+}\n+\n+MULTHI (int8_t, int16_t, 0)\n+MULTHI (int16_t, int32_t, 0)\n+MULTHI (int32_t, int64_t, 0)\n+\n+MULTHI (uint8_t, uint16_t, 0)\n+MULTHI (uint16_t, uint32_t, 0)\n+MULTHI (uint32_t, uint64_t, 0)\n+\n+MULTHI (int8_t, int16_t, 1)\n+MULTHI (int16_t, int32_t, 1)\n+MULTHI (int32_t, int64_t, 1)\n+\n+MULTHI (uint8_t, uint16_t, 1)\n+MULTHI (uint16_t, uint32_t, 1)\n+MULTHI (uint32_t, uint64_t, 1)\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops in function\" 12 \"vect\" } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmullb\\tz[0-9]+\\.h, z[0-9]+\\.b, z[0-9]+\\.b\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsmullt\\tz[0-9]+\\.h, z[0-9]+\\.b, z[0-9]+\\.b\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsmullb\\tz[0-9]+\\.s, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsmullt\\tz[0-9]+\\.s, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsmullb\\tz[0-9]+\\.d, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsmullt\\tz[0-9]+\\.d, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tshrnb\\tz[0-9]+\\.b, z[0-9]+\\.h, #7\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tshrnt\\tz[0-9]+\\.b, z[0-9]+\\.h, #7\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tshrnb\\tz[0-9]+\\.h, z[0-9]+\\.s, #15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tshrnt\\tz[0-9]+\\.h, z[0-9]+\\.s, #15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tshrnb\\tz[0-9]+\\.s, z[0-9]+\\.d, #31\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tshrnt\\tz[0-9]+\\.s, z[0-9]+\\.d, #31\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumullb\\tz[0-9]+\\.h, z[0-9]+\\.b, z[0-9]+\\.b\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumullt\\tz[0-9]+\\.h, z[0-9]+\\.b, z[0-9]+\\.b\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumullb\\tz[0-9]+\\.s, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumullt\\tz[0-9]+\\.s, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumullb\\tz[0-9]+\\.d, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumullt\\tz[0-9]+\\.d, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\trshrnb\\tz[0-9]+\\.b, z[0-9]+\\.h, #7\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\trshrnt\\tz[0-9]+\\.b, z[0-9]+\\.h, #7\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\trshrnb\\tz[0-9]+\\.h, z[0-9]+\\.s, #15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\trshrnt\\tz[0-9]+\\.h, z[0-9]+\\.s, #15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\trshrnb\\tz[0-9]+\\.s, z[0-9]+\\.d, #31\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\trshrnt\\tz[0-9]+\\.s, z[0-9]+\\.d, #31\\n} 2 } } */\n+"}, {"sha": "f05a0930fbd9c79e9d3fde6dc4d93c28c7745e4e", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=58cc98767aa1d8136d36467b892dc4adaf427acc", "patch": "@@ -6175,6 +6175,15 @@ proc check_effective_target_vect_avg_qi {} {\n \t\t   && ![check_effective_target_aarch64_sve1_only] }]\n }\n \n+# Return 1 if the target plus current options supports both signed\n+# and unsigned multiply-high-with-round-and-scale operations\n+# on vectors of half-words.\n+\n+proc check_effective_target_vect_mulhrs_hi {} {\n+    return [expr { [istarget aarch64*-*-*]\n+\t\t   && [check_effective_target_aarch64_sve2] }]\n+}\n+\n # Return 1 if the target plus current options supports a vector\n # demotion (packing) of shorts (to chars) and ints (to shorts) \n # using modulo arithmetic, 0 otherwise."}, {"sha": "2f86f9e4fc7039add1b1d7b82574cb8262eb4ba4", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58cc98767aa1d8136d36467b892dc4adaf427acc/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=58cc98767aa1d8136d36467b892dc4adaf427acc", "patch": "@@ -1723,6 +1723,175 @@ vect_recog_over_widening_pattern (stmt_vec_info last_stmt_info, tree *type_out)\n   return pattern_stmt;\n }\n \n+/* Recognize the following patterns:\n+\n+     ATYPE a;  // narrower than TYPE\n+     BTYPE b;  // narrower than TYPE\n+\n+   1) Multiply high with scaling\n+     TYPE res = ((TYPE) a * (TYPE) b) >> c;\n+   2) ... or also with rounding\n+     TYPE res = (((TYPE) a * (TYPE) b) >> d + 1) >> 1;\n+\n+   where only the bottom half of res is used.  */\n+\n+static gimple *\n+vect_recog_mulhs_pattern (stmt_vec_info last_stmt_info, tree *type_out)\n+{\n+  /* Check for a right shift.  */\n+  gassign *last_stmt = dyn_cast <gassign *> (last_stmt_info->stmt);\n+  if (!last_stmt\n+      || gimple_assign_rhs_code (last_stmt) != RSHIFT_EXPR)\n+    return NULL;\n+  vec_info *vinfo = last_stmt_info->vinfo;\n+\n+  /* Check that the shift result is wider than the users of the\n+     result need (i.e. that narrowing would be a natural choice).  */\n+  tree lhs_type = TREE_TYPE (gimple_assign_lhs (last_stmt));\n+  unsigned int target_precision\n+    = vect_element_precision (last_stmt_info->min_output_precision);\n+  if (!INTEGRAL_TYPE_P (lhs_type)\n+      || target_precision >= TYPE_PRECISION (lhs_type))\n+    return NULL;\n+\n+  /* Look through any change in sign on the outer shift input.  */\n+  vect_unpromoted_value unprom_rshift_input;\n+  tree rshift_input = vect_look_through_possible_promotion\n+    (vinfo, gimple_assign_rhs1 (last_stmt), &unprom_rshift_input);\n+  if (!rshift_input\n+      || TYPE_PRECISION (TREE_TYPE (rshift_input))\n+\t   != TYPE_PRECISION (lhs_type))\n+    return NULL;\n+\n+  /* Get the definition of the shift input.  */\n+  stmt_vec_info rshift_input_stmt_info\n+    = vect_get_internal_def (vinfo, rshift_input);\n+  if (!rshift_input_stmt_info)\n+    return NULL;\n+  gassign *rshift_input_stmt\n+    = dyn_cast <gassign *> (rshift_input_stmt_info->stmt);\n+  if (!rshift_input_stmt)\n+    return NULL;\n+\n+  stmt_vec_info mulh_stmt_info;\n+  tree scale_term;\n+  internal_fn ifn;\n+  unsigned int expect_offset;\n+\n+  /* Check for the presence of the rounding term.  */\n+  if (gimple_assign_rhs_code (rshift_input_stmt) == PLUS_EXPR)\n+    {\n+      /* Check that the outer shift was by 1.  */\n+      if (!integer_onep (gimple_assign_rhs2 (last_stmt)))\n+\treturn NULL;\n+\n+      /* Check that the second operand of the PLUS_EXPR is 1.  */\n+      if (!integer_onep (gimple_assign_rhs2 (rshift_input_stmt)))\n+\treturn NULL;\n+\n+      /* Look through any change in sign on the addition input.  */\n+      vect_unpromoted_value unprom_plus_input;\n+      tree plus_input = vect_look_through_possible_promotion\n+\t(vinfo, gimple_assign_rhs1 (rshift_input_stmt), &unprom_plus_input);\n+      if (!plus_input\n+\t   || TYPE_PRECISION (TREE_TYPE (plus_input))\n+\t\t!= TYPE_PRECISION (TREE_TYPE (rshift_input)))\n+\treturn NULL;\n+\n+      /* Get the definition of the multiply-high-scale part.  */\n+      stmt_vec_info plus_input_stmt_info\n+\t= vect_get_internal_def (vinfo, plus_input);\n+      if (!plus_input_stmt_info)\n+\treturn NULL;\n+      gassign *plus_input_stmt\n+\t= dyn_cast <gassign *> (plus_input_stmt_info->stmt);\n+      if (!plus_input_stmt\n+\t  || gimple_assign_rhs_code (plus_input_stmt) != RSHIFT_EXPR)\n+\treturn NULL;\n+\n+      /* Look through any change in sign on the scaling input.  */\n+      vect_unpromoted_value unprom_scale_input;\n+      tree scale_input = vect_look_through_possible_promotion\n+\t(vinfo, gimple_assign_rhs1 (plus_input_stmt), &unprom_scale_input);\n+      if (!scale_input\n+\t  || TYPE_PRECISION (TREE_TYPE (scale_input))\n+\t       != TYPE_PRECISION (TREE_TYPE (plus_input)))\n+\treturn NULL;\n+\n+      /* Get the definition of the multiply-high part.  */\n+      mulh_stmt_info = vect_get_internal_def (vinfo, scale_input);\n+      if (!mulh_stmt_info)\n+\treturn NULL;\n+\n+      /* Get the scaling term.  */\n+      scale_term = gimple_assign_rhs2 (plus_input_stmt);\n+\n+      expect_offset = target_precision + 2;\n+      ifn = IFN_MULHRS;\n+    }\n+  else\n+    {\n+      mulh_stmt_info = rshift_input_stmt_info;\n+      scale_term = gimple_assign_rhs2 (last_stmt);\n+\n+      expect_offset = target_precision + 1;\n+      ifn = IFN_MULHS;\n+    }\n+\n+  /* Check that the scaling factor is correct.  */\n+  if (TREE_CODE (scale_term) != INTEGER_CST\n+      || wi::to_widest (scale_term) + expect_offset\n+\t   != TYPE_PRECISION (lhs_type))\n+    return NULL;\n+\n+  /* Check whether the scaling input term can be seen as two widened\n+     inputs multiplied together.  */\n+  vect_unpromoted_value unprom_mult[2];\n+  tree new_type;\n+  unsigned int nops\n+    = vect_widened_op_tree (mulh_stmt_info, MULT_EXPR, WIDEN_MULT_EXPR,\n+\t\t\t    false, 2, unprom_mult, &new_type);\n+  if (nops != 2)\n+    return NULL;\n+\n+  vect_pattern_detected (\"vect_recog_mulhs_pattern\", last_stmt);\n+\n+  /* Adjust output precision.  */\n+  if (TYPE_PRECISION (new_type) < target_precision)\n+    new_type = build_nonstandard_integer_type\n+      (target_precision, TYPE_UNSIGNED (new_type));\n+\n+  /* Check for target support.  */\n+  tree new_vectype = get_vectype_for_scalar_type (new_type);\n+  if (!new_vectype\n+      || !direct_internal_fn_supported_p\n+\t    (ifn, new_vectype, OPTIMIZE_FOR_SPEED))\n+    return NULL;\n+\n+  /* The IR requires a valid vector type for the cast result, even though\n+     it's likely to be discarded.  */\n+  *type_out = get_vectype_for_scalar_type (lhs_type);\n+  if (!*type_out)\n+    return NULL;\n+\n+  /* Generate the IFN_MULHRS call.  */\n+  tree new_var = vect_recog_temp_ssa_var (new_type, NULL);\n+  tree new_ops[2];\n+  vect_convert_inputs (last_stmt_info, 2, new_ops, new_type,\n+\t\t       unprom_mult, new_vectype);\n+  gcall *mulhrs_stmt\n+    = gimple_build_call_internal (ifn, 2, new_ops[0], new_ops[1]);\n+  gimple_call_set_lhs (mulhrs_stmt, new_var);\n+  gimple_set_location (mulhrs_stmt, gimple_location (last_stmt));\n+\n+  if (dump_enabled_p ())\n+    dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t     \"created pattern stmt: %G\", mulhrs_stmt);\n+\n+  return vect_convert_output (last_stmt_info, lhs_type,\n+\t\t\t      mulhrs_stmt, new_vectype);\n+}\n+\n /* Recognize the patterns:\n \n \t    ATYPE a;  // narrower than TYPE\n@@ -4713,6 +4882,7 @@ static vect_recog_func vect_vect_recog_func_ptrs[] = {\n   /* Must come after over_widening, which narrows the shift as much as\n      possible beforehand.  */\n   { vect_recog_average_pattern, \"average\" },\n+  { vect_recog_mulhs_pattern, \"mult_high\" },\n   { vect_recog_cast_forwprop_pattern, \"cast_forwprop\" },\n   { vect_recog_widen_mult_pattern, \"widen_mult\" },\n   { vect_recog_dot_prod_pattern, \"dot_prod\" },"}]}