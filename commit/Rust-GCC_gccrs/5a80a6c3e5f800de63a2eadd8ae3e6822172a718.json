{"sha": "5a80a6c3e5f800de63a2eadd8ae3e6822172a718", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE4MGE2YzNlNWY4MDBkZTYzYTJlYWRkOGFlM2U2ODIyMTcyYTcxOA==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-03-03T17:36:49Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-03-18T12:53:26Z"}, "message": "amdgcn: Add cond_add/sub/and/ior/xor for all vector modes\n\n2020-03-18  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* config/gcn/gcn-valu.md (COND_MODE): Delete.\n\t(COND_INT_MODE): Delete.\n\t(cond_op): Add \"mult\".\n\t(cond_<expander><mode>): Use VEC_ALLREG_MODE.\n\t(cond_<expander><mode>): Use VEC_ALLREG_INT_MODE.", "tree": {"sha": "5ee88f8662b75daa8225d12132d1c506109f0ef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ee88f8662b75daa8225d12132d1c506109f0ef2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a80a6c3e5f800de63a2eadd8ae3e6822172a718", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a80a6c3e5f800de63a2eadd8ae3e6822172a718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a80a6c3e5f800de63a2eadd8ae3e6822172a718", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a80a6c3e5f800de63a2eadd8ae3e6822172a718/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11cf25c40e3f586d19474108c78a2dfad7925902", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11cf25c40e3f586d19474108c78a2dfad7925902", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11cf25c40e3f586d19474108c78a2dfad7925902"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "dac1d41f3eae1abf304b23f8fa757cd2a928e257", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a80a6c3e5f800de63a2eadd8ae3e6822172a718/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a80a6c3e5f800de63a2eadd8ae3e6822172a718/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a80a6c3e5f800de63a2eadd8ae3e6822172a718", "patch": "@@ -1,3 +1,11 @@\n+2020-03-18  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-valu.md (COND_MODE): Delete.\n+\t(COND_INT_MODE): Delete.\n+\t(cond_op): Add \"mult\".\n+\t(cond_<expander><mode>): Use VEC_ALLREG_MODE.\n+\t(cond_<expander><mode>): Use VEC_ALLREG_INT_MODE.\n+\n 2020-03-18   Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/94206"}, {"sha": "68d89fadc9e7189be9eb9add8e7148e7b813ca10", "filename": "gcc/config/gcn/gcn-valu.md", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a80a6c3e5f800de63a2eadd8ae3e6822172a718/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a80a6c3e5f800de63a2eadd8ae3e6822172a718/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md?ref=5a80a6c3e5f800de63a2eadd8ae3e6822172a718", "patch": "@@ -2903,19 +2903,15 @@\n     DONE;\n   })\n \n-; FIXME this should be VEC_REG_MODE, but not all dependencies are implemented.\n-(define_mode_iterator COND_MODE [V64SI V64DI V64SF V64DF])\n-(define_mode_iterator COND_INT_MODE [V64SI V64DI])\n-\n-(define_code_iterator cond_op [plus minus])\n+(define_code_iterator cond_op [plus minus mult])\n \n (define_expand \"cond_<expander><mode>\"\n-  [(match_operand:COND_MODE 0 \"register_operand\")\n+  [(match_operand:VEC_ALLREG_MODE 0 \"register_operand\")\n    (match_operand:DI 1 \"register_operand\")\n-   (cond_op:COND_MODE\n-     (match_operand:COND_MODE 2 \"gcn_alu_operand\")\n-     (match_operand:COND_MODE 3 \"gcn_alu_operand\"))\n-   (match_operand:COND_MODE 4 \"register_operand\")]\n+   (cond_op:VEC_ALLREG_MODE\n+     (match_operand:VEC_ALLREG_MODE 2 \"gcn_alu_operand\")\n+     (match_operand:VEC_ALLREG_MODE 3 \"gcn_alu_operand\"))\n+   (match_operand:VEC_ALLREG_MODE 4 \"register_operand\")]\n   \"\"\n   {\n     operands[1] = force_reg (DImode, operands[1]);\n@@ -2927,15 +2923,16 @@\n     DONE;\n   })\n \n+;; TODO smin umin smax umax\n (define_code_iterator cond_bitop [and ior xor])\n \n (define_expand \"cond_<expander><mode>\"\n-  [(match_operand:COND_INT_MODE 0 \"register_operand\")\n+  [(match_operand:VEC_ALLREG_INT_MODE 0 \"register_operand\")\n    (match_operand:DI 1 \"register_operand\")\n-   (cond_bitop:COND_INT_MODE\n-     (match_operand:COND_INT_MODE 2 \"gcn_alu_operand\")\n-     (match_operand:COND_INT_MODE 3 \"gcn_alu_operand\"))\n-   (match_operand:COND_INT_MODE 4 \"register_operand\")]\n+   (cond_bitop:VEC_ALLREG_INT_MODE\n+     (match_operand:VEC_ALLREG_INT_MODE 2 \"gcn_alu_operand\")\n+     (match_operand:VEC_ALLREG_INT_MODE 3 \"gcn_alu_operand\"))\n+   (match_operand:VEC_ALLREG_INT_MODE 4 \"register_operand\")]\n   \"\"\n   {\n     operands[1] = force_reg (DImode, operands[1]);"}]}