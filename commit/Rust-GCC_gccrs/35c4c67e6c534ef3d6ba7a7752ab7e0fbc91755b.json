{"sha": "35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVjNGM2N2U2YzUzNGVmM2Q2YmE3YTc3NTJhYjdlMGZiYzkxNzU1Yg==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-11-03T09:26:43Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-12-03T05:34:05Z"}, "message": "Fix incorrect replacement of vmovdqu32 with vpblendd which can cause fault.\n\ngcc/ChangeLog:\n\n\tPR target/97642\n\t* config/i386/i386-expand.c\n\t(ix86_expand_special_args_builtin): Don't move all-ones mask\n\toperands into register.\n\t* config/i386/sse.md (UNSPEC_MASKLOAD): New unspec.\n\t(*<avx512>_load<mode>_mask): New define_insns for masked load\n\tinstructions.\n\t(<avx512>_load<mode>_mask): Changed to define_expands which\n\tspecifically handle memory or all-ones mask operands.\n\t(<avx512>_blendm<mode>): Changed to define_insns which are same\n\tas original <avx512>_load<mode>_mask with adjustment of\n\toperands order.\n\t(*<avx512>_load<mode>): New define_insn_and_split which is\n\tused to optimize for masked load with all one mask.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512bw-vmovdqu16-1.c: Adjust testcase to\n\tmake sure only masked load instruction is generated.\n\t* gcc.target/i386/avx512bw-vmovdqu8-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovapd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovaps-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovdqa32-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vmovdqa64-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovapd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovaps-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovdqa32-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vmovdqa64-1.c: Ditto.\n\t* gcc.target/i386/pr97642-1.c: New test.\n\t* gcc.target/i386/pr97642-2.c: New test.", "tree": {"sha": "bd33eff8b8bc3f3d5576fb479255793896a38fb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd33eff8b8bc3f3d5576fb479255793896a38fb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c03a78d8f8cac3019e7bc67b6ae39f4edc61cf2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c03a78d8f8cac3019e7bc67b6ae39f4edc61cf2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c03a78d8f8cac3019e7bc67b6ae39f4edc61cf2c"}], "stats": {"total": 310, "additions": 263, "deletions": 47}, "files": [{"sha": "7c31cc7daac41c78c2403eddfe7a4d85aafa47ce", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b", "patch": "@@ -10832,7 +10832,13 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n \n \t  op = fixup_modeless_constant (op, mode);\n \n-\t  if (GET_MODE (op) == mode || GET_MODE (op) == VOIDmode)\n+\t  /* NB: 3-operands load implied it's a mask load,\n+\t     and that mask operand shoud be at the end.\n+\t     Keep all-ones mask which would be simplified by the expander.  */\n+\t  if (nargs == 3 && i == 2 && klass == load\n+\t      && constm1_operand (op, mode))\n+\t    ;\n+\t  else if (GET_MODE (op) == mode || GET_MODE (op) == VOIDmode)\n \t    op = copy_to_mode_reg (mode, op);\n \t  else\n \t    {"}, {"sha": "78f73676e880075d0ebb98e749eea5acf1f704a5", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 120, "deletions": 28, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b", "patch": "@@ -111,6 +111,8 @@\n   UNSPEC_MASKOP\n   UNSPEC_KORTEST\n   UNSPEC_KTEST\n+  ;; Mask load\n+  UNSPEC_MASKLOAD\n \n   ;; For embed. rounding feature\n   UNSPEC_EMBEDDED_ROUNDING\n@@ -1069,18 +1071,39 @@\n \t      ]\n \t      (symbol_ref \"true\")))])\n \n-(define_insn \"<avx512>_load<mode>_mask\"\n-  [(set (match_operand:V48_AVX512VL 0 \"register_operand\" \"=v,v\")\n+;; If mem_addr points to a memory region with less than whole vector size bytes\n+;; of accessible memory and k is a mask that would prevent reading the inaccessible\n+;; bytes from mem_addr, add UNSPEC_MASKLOAD to prevent it to be transformed to vpblendd\n+;; See pr97642.\n+(define_expand \"<avx512>_load<mode>_mask\"\n+  [(set (match_operand:V48_AVX512VL 0 \"register_operand\")\n \t(vec_merge:V48_AVX512VL\n-\t  (match_operand:V48_AVX512VL 1 \"nonimmediate_operand\" \"vm,vm\")\n-\t  (match_operand:V48_AVX512VL 2 \"nonimm_or_0_operand\" \"0C,v\")\n-\t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk,Yk\")))]\n+\t  (match_operand:V48_AVX512VL 1 \"nonimmediate_operand\")\n+\t  (match_operand:V48_AVX512VL 2 \"nonimm_or_0_operand\")\n+\t  (match_operand:<avx512fmaskmode> 3 \"register_or_constm1_operand\")))]\n   \"TARGET_AVX512F\"\n {\n-  if (REG_P (operands[2])\n-     && REGNO (operands[2]) != REGNO (operands[0]))\n-    return \"v<sseintprefix>blendm<ssemodesuffix>\\t{%1, %2, %0%{%3%}|%0%{%3%}, %2, %1}\";\n+  if (CONST_INT_P (operands[3]))\n+    {\n+      emit_insn (gen_rtx_SET (operands[0], operands[1]));\n+      DONE;\n+    }\n+  else if (MEM_P (operands[1]))\n+    operands[1] = gen_rtx_UNSPEC (<MODE>mode,\n+\t\t\t\t gen_rtvec(1, operands[1]),\n+\t\t\t\t UNSPEC_MASKLOAD);\n+})\n \n+(define_insn \"*<avx512>_load<mode>_mask\"\n+  [(set (match_operand:V48_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:V48_AVX512VL\n+\t  (unspec:V48_AVX512VL\n+\t    [(match_operand:V48_AVX512VL 1 \"memory_operand\" \"m\")]\n+\t    UNSPEC_MASKLOAD)\n+\t  (match_operand:V48_AVX512VL 2 \"nonimm_or_0_operand\" \"0C\")\n+\t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk\")))]\n+  \"TARGET_AVX512F\"\n+{\n   if (FLOAT_MODE_P (GET_MODE_INNER (<MODE>mode)))\n     {\n       if (misaligned_operand (operands[1], <MODE>mode))\n@@ -1100,20 +1123,60 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"<avx512>_load<mode>_mask\"\n-  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\" \"=v,v\")\n+(define_insn_and_split \"*<avx512>_load<mode>\"\n+  [(set (match_operand:V48_AVX512VL 0 \"register_operand\")\n+\t(unspec:V48_AVX512VL\n+\t  [(match_operand:V48_AVX512VL 1 \"memory_operand\")]\n+\t  UNSPEC_MASKLOAD))]\n+  \"TARGET_AVX512F\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0) (match_dup 1))])\n+\n+(define_expand \"<avx512>_load<mode>_mask\"\n+  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\")\n \t(vec_merge:VI12_AVX512VL\n-\t  (match_operand:VI12_AVX512VL 1 \"nonimmediate_operand\" \"vm,vm\")\n-\t  (match_operand:VI12_AVX512VL 2 \"nonimm_or_0_operand\" \"0C,v\")\n-\t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk,Yk\")))]\n+\t  (match_operand:VI12_AVX512VL 1 \"nonimmediate_operand\")\n+\t  (match_operand:VI12_AVX512VL 2 \"nonimm_or_0_operand\")\n+\t  (match_operand:<avx512fmaskmode> 3 \"register_or_constm1_operand\")))]\n   \"TARGET_AVX512BW\"\n-  \"@\n-    vmovdqu<ssescalarsize>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\n-    vpblendm<ssemodesuffix>\\t{%1, %2, %0%{%3%}|%0%{%3%}, %2, %1}\"\n+{\n+  if (CONST_INT_P (operands[3]))\n+    {\n+      emit_insn (gen_rtx_SET (operands[0], operands[1]));\n+      DONE;\n+    }\n+  else if (MEM_P (operands[1]))\n+    operands[1] = gen_rtx_UNSPEC (<MODE>mode,\n+\t\t\t\t gen_rtvec(1, operands[1]),\n+\t\t\t\t UNSPEC_MASKLOAD);\n+\n+})\n+\n+(define_insn \"*<avx512>_load<mode>_mask\"\n+  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VI12_AVX512VL\n+\t  (unspec:VI12_AVX512VL\n+\t    [(match_operand:VI12_AVX512VL 1 \"memory_operand\" \"m\")]\n+\t    UNSPEC_MASKLOAD)\n+\t  (match_operand:VI12_AVX512VL 2 \"nonimm_or_0_operand\" \"0C\")\n+\t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk\")))]\n+  \"TARGET_AVX512BW\"\n+  \"vmovdqu<ssescalarsize>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn_and_split \"*<avx512>_load<mode>\"\n+  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(unspec:VI12_AVX512VL\n+\t  [(match_operand:VI12_AVX512VL 1 \"memory_operand\" \"m\")]\n+\t  UNSPEC_MASKLOAD))]\n+  \"TARGET_AVX512BW\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0) (match_dup 1))])\n+\n (define_insn \"avx512f_mov<ssescalarmodelower>_mask\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_128\n@@ -1175,21 +1238,50 @@\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_expand \"<avx512>_blendm<mode>\"\n-  [(set (match_operand:V48_AVX512VL 0 \"register_operand\" \"=v\")\n+(define_insn \"<avx512>_blendm<mode>\"\n+  [(set (match_operand:V48_AVX512VL 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:V48_AVX512VL\n-\t  (match_operand:V48_AVX512VL 2 \"nonimmediate_operand\" \"vm\")\n-\t  (match_operand:V48_AVX512VL 1 \"register_operand\" \"v\")\n-\t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk\")))]\n-  \"TARGET_AVX512F\")\n+\t  (match_operand:V48_AVX512VL 2 \"nonimmediate_operand\" \"vm,vm\")\n+\t  (match_operand:V48_AVX512VL 1 \"nonimm_or_0_operand\" \"0C,v\")\n+\t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk,Yk\")))]\n+  \"TARGET_AVX512F\"\n+{\n+  if (REG_P (operands[1])\n+     && REGNO (operands[1]) != REGNO (operands[0]))\n+    return \"v<sseintprefix>blendm<ssemodesuffix>\\t{%2, %1, %0%{%3%}|%0%{%3%}, %1, %2}\";\n \n-(define_expand \"<avx512>_blendm<mode>\"\n-  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\" \"=v\")\n+  if (FLOAT_MODE_P (GET_MODE_INNER (<MODE>mode)))\n+    {\n+      if (misaligned_operand (operands[2], <MODE>mode))\n+\treturn \"vmovu<ssemodesuffix>\\t{%2, %0%{%3%}%N1|%0%{%3%}%N1, %2}\";\n+      else\n+\treturn \"vmova<ssemodesuffix>\\t{%2, %0%{%3%}%N1|%0%{%3%}%N1, %2}\";\n+    }\n+  else\n+    {\n+      if (misaligned_operand (operands[2], <MODE>mode))\n+\treturn \"vmovdqu<ssescalarsize>\\t{%2, %0%{%3%}%N1|%0%{%3%}%N1, %2}\";\n+      else\n+\treturn \"vmovdqa<ssescalarsize>\\t{%2, %0%{%3%}%N1|%0%{%3%}%N1, %2}\";\n+    }\n+}\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"<avx512>_blendm<mode>\"\n+  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VI12_AVX512VL\n-\t  (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\" \"vm\")\n-\t  (match_operand:VI12_AVX512VL 1 \"register_operand\" \"v\")\n-\t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk\")))]\n-  \"TARGET_AVX512BW\")\n+\t  (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\" \"vm,vm\")\n+\t  (match_operand:VI12_AVX512VL 1 \"nonimm_or_0_operand\" \"0C,v\")\n+\t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk,Yk\")))]\n+  \"TARGET_AVX512BW\"\n+  \"@\n+    vmovdqu<ssescalarsize>\\t{%2, %0%{%3%}%N1|%0%{%3%}%N1, %2}\n+    vpblendm<ssemodesuffix>\\t{%2, %1, %0%{%3%}|%0%{%3%}, %1, %2}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<avx512>_store<mode>_mask\"\n   [(set (match_operand:V48_AVX512VL 0 \"memory_operand\" \"=m\")"}, {"sha": "8603a1909c792eea004c003f33e4cc8f6224a74d", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vmovdqu16-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu16-1.c?ref=35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"(?:vmovdqu16|vpblendmw)\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"(?:vmovdqu16|vpblendmw)\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"(?:vmovdqu16|vpblendmw)\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu16\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}, {"sha": "d1e33926c81fdc6a8806751057a0692b2666b44c", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vmovdqu8-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu8-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu8-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu8-1.c?ref=35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"(?:vmovdqu8|vpblendmb)\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"(?:vmovdqu8|vpblendmb)\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"(?:vmovdqu8|vpblendmb)\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}, {"sha": "e869f70665aaddba48cacc970cb0e5c8b8feabf1", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovapd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovapd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovapd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovapd-1.c?ref=35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"(?:vmovapd|vblendmpd)\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovapd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovapd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovapd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovapd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}, {"sha": "a7635a3ebf257eb225a230f0ce100bd15e06b2f6", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovaps-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovaps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovaps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovaps-1.c?ref=35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"(?:vmovaps|vblendmps)\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovaps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovaps\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovaps\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovaps\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}, {"sha": "b93727d9ef2635efe614098280c5422e9ef0ae86", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovdqa32-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqa32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqa32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqa32-1.c?ref=35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"(?:vmovdqa32|vpblendmd)\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa32\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqa32\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqa32\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqa32\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}, {"sha": "1c372c4f92a6cfba3f02a1b94fa6c42d04881d22", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovdqa64-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqa64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqa64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqa64-1.c?ref=35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"(?:vmovdqa64|vpblendmq)\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa64\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqa64\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqa64\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqa64\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}, {"sha": "89c3ebefe35bc3389351224acb1fab53c687608b", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vmovapd-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovapd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovapd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovapd-1.c?ref=35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"(?:vmovapd|vblendmpd)\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"(?:vmovapd|vblendmpd)\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovapd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovapd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovapd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovapd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovapd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}, {"sha": "2196ebb55d903de1e595883a3a2e082bc8db8fc1", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vmovaps-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovaps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovaps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovaps-1.c?ref=35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"(?:vmovaps|vblendmps)\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"(?:vmovaps|vblendmps)\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovaps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovaps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovaps\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovaps\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovaps\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}, {"sha": "9f991dbaca2028c72c4eaee5194e2b6a506d7f1d", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vmovdqa32-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovdqa32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovdqa32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovdqa32-1.c?ref=35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"(?:vmovdqa32|vpblendmd)\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"(?:vmovdqa32|vpblendmd)\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa32\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa32\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqa32\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqa32\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqa32\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}, {"sha": "d20b4a7b9973619a40a3da37e0345306de91d53a", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vmovdqa64-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovdqa64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovdqa64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovdqa64-1.c?ref=35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"(?:vmovdqa64|vpblendmq)\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"(?:vmovdqa64|vpblendmq)\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa64\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa64\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqa64\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqa64\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqa\\[ \\\\t\\]+\\\\(\\[^\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 2 { target nonpic } } } */"}, {"sha": "f511440e5773e57accc2250651d904b29d409c47", "filename": "gcc/testsuite/gcc.target/i386/pr97642-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97642-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97642-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97642-1.c?ref=35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b", "patch": "@@ -0,0 +1,41 @@\n+/* PR target/97642 */\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-not { k[0-8] } } } */\n+\n+#include <immintrin.h>\n+__m128i\n+foo1 (__m128i src, void const* P)\n+{\n+  return _mm_mask_loadu_epi32 (src, 15, P);\n+}\n+\n+__m256i\n+foo2 (__m256i src, void const* P)\n+{\n+  return _mm256_mask_loadu_epi32 (src, 255, P);\n+}\n+\n+__m512i\n+foo3 (__m512i src, void const* P)\n+{\n+  return _mm512_mask_loadu_epi32 (src, 65535 , P);\n+}\n+\n+__m128i\n+foo4 (__m128i src, void const* P)\n+{\n+  return _mm_mask_loadu_epi32 (src, -1, P);\n+}\n+\n+__m256i\n+foo5 (__m256i src, void const* P)\n+{\n+  return _mm256_mask_loadu_epi32 (src, -1, P);\n+}\n+\n+__m512i\n+foo6 (__m512i src, void const* P)\n+{\n+  return _mm512_mask_loadu_epi32 (src, -1 , P);\n+}"}, {"sha": "53a61542e6cc90179f1049eaf9c228c2e36b8720", "filename": "gcc/testsuite/gcc.target/i386/pr97642-2.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97642-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97642-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97642-2.c?ref=35c4c67e6c534ef3d6ba7a7752ab7e0fbc91755b", "patch": "@@ -0,0 +1,77 @@\n+/* PR target/97642 */\n+/* { dg-do run { target *-*-linux* } } */\n+/* { dg-options \"-O2 -mavx512dq -mavx512vl -mavx512bw\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512dq } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include <assert.h>\n+#include <immintrin.h>\n+#include <stdint.h>\n+#include <sys/mman.h>\n+\n+#define N 5\n+\n+// Faults with GCC because usage of vpblendd\n+__m256i __attribute__((noinline)) mask_load(uint32_t * arr) {\n+  __m256i tmp;\n+  return _mm256_mask_loadu_epi32(tmp, (1 << N) - 1, arr);\n+}\n+\n+// Faults\n+__m256i __attribute__((noinline)) blend_load_asm(uint32_t * arr) {\n+  __m256i tmp = _mm256_set1_epi64x(0);\n+  asm volatile(\"vpblendd %[m], (%[arr]), %[tmp], %[tmp]\\n\\t\"\n+\t       : [ tmp ] \"+x\"(tmp)\n+\t       : [ arr ] \"r\"(arr), [ m ] \"i\"(((1 << N) - 1))\n+\t       :);\n+  return tmp;\n+}\n+\n+// Does not fault\n+__m256i __attribute__((noinline)) mask_load_asm(uint32_t * arr) {\n+  __m256i           tmp;\n+  asm volatile(\n+\t       \"movb %[m], %%al\\n\\t\"\n+\t       \"kmovb %%eax, %%k1\\n\\t\"\n+\t       \"vmovdqu32 (%[arr]), %[tmp] %{%%k1} %{z%}\\n\\t\"\n+\t       : [ tmp ] \"+x\"(tmp)\n+\t       : [ arr ] \"r\"(arr), [ m ] \"i\"(((1 << N) - 1))\n+\t       : \"eax\", \"k1\");\n+  return tmp;\n+}\n+\n+\n+void __attribute__((noinline)) mask_store(uint32_t * arr, __m256i v) {\n+  return _mm256_mask_storeu_epi32(arr, (1 << N) - 1, v);\n+}\n+\n+\n+#define NPAGES      (2)\n+#define END_OF_PAGE (1024 - N)\n+\n+#ifndef LOAD_METHOD\n+#define LOAD_METHOD mask_load // mask_load_asm does not fault\n+#endif\n+\n+\n+int\n+main() {\n+  if (!(__builtin_cpu_supports (\"avx512dq\")\n+\t&& __builtin_cpu_supports (\"avx512vl\")\n+\t&& __builtin_cpu_supports (\"avx512bw\")))\n+    return 0;\n+\n+  uint32_t * addr =\n+    (uint32_t *)mmap(NULL, NPAGES * 4096, PROT_READ | PROT_WRITE,\n+\t\t     MAP_ANONYMOUS | MAP_PRIVATE, -1, 0);\n+\n+  for (uint32_t i = 0; i < NPAGES; i += 2) {\n+\n+    uint32_t page_offset      = 1024 * i + END_OF_PAGE;\n+    uint32_t next_page_offset = 1024 * (i + 1);\n+\n+    assert(!mprotect(addr + next_page_offset, 4096, PROT_NONE));\n+    mask_store(addr + page_offset, LOAD_METHOD(addr + page_offset));\n+  }\n+}"}]}