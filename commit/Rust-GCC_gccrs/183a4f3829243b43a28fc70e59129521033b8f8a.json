{"sha": "183a4f3829243b43a28fc70e59129521033b8f8a", "node_id": "C_kwDOANBUbNoAKDE4M2E0ZjM4MjkyNDNiNDNhMjhmYzcwZTU5MTI5NTIxMDMzYjhmOGE", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-06-15T10:12:51Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-06-15T10:12:51Z"}, "message": "gen: Allow unspec numbers in .md attributes\n\nTamar pointed out that:\n\n  (unspec:M ... <FOO>)\n\ndidn't work when a value of attribute FOO was defined by\ndefine_constant, such as in:\n\n  (define_int_attribute FOO [(UNSPEC_A \"UNSPEC_B\") ...])\n\nThis is because symbolic constants are substituted during lexing\nand only apply to bare symbol names, not strings.\n\nOne option would have been to extend this lexing substitution\nto define_*_attribute values as well.  However, that would replace\nsymbolic names with integer constants in the generated .cc code,\nmaking it less readable.\n\nThis patch goes for the more localised approach of only\napplying define_constants when we want their integer value.\n\nI don't think any changes to the docs are needed.  This isn't\nadding a new feature, it's just making an existing one work in\nthe expected way.\n\ngcc/\n\t* read-rtl.cc (find_int): Substitute symbolic constants\n\tbefore converting the string to an integer.", "tree": {"sha": "cc25237a16c0dfd8d4ffc0ebe1d80871a069af65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc25237a16c0dfd8d4ffc0ebe1d80871a069af65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/183a4f3829243b43a28fc70e59129521033b8f8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/183a4f3829243b43a28fc70e59129521033b8f8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/183a4f3829243b43a28fc70e59129521033b8f8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/183a4f3829243b43a28fc70e59129521033b8f8a/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bfb3f488a7ec58109a859c66bf4eddc6354065b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bfb3f488a7ec58109a859c66bf4eddc6354065b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bfb3f488a7ec58109a859c66bf4eddc6354065b"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "62c7895af606592bd6b0a6ded74083d98baa55e3", "filename": "gcc/read-rtl.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/183a4f3829243b43a28fc70e59129521033b8f8a/gcc%2Fread-rtl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/183a4f3829243b43a28fc70e59129521033b8f8a/gcc%2Fread-rtl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.cc?ref=183a4f3829243b43a28fc70e59129521033b8f8a", "patch": "@@ -284,6 +284,12 @@ find_int (const char *name)\n {\n   HOST_WIDE_INT tmp;\n \n+  struct md_constant tmp_def;\n+  tmp_def.name = const_cast<char *> (name);\n+  auto htab = rtx_reader_ptr->get_md_constants ();\n+  if (auto def = (struct md_constant *) htab_find (htab, &tmp_def))\n+    name = def->value;\n+\n   validate_const_int (name);\n #if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_INT\n   tmp = atoi (name);"}]}