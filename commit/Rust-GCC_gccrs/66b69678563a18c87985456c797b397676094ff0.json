{"sha": "66b69678563a18c87985456c797b397676094ff0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZiNjk2Nzg1NjNhMThjODc5ODU0NTZjNzk3YjM5NzY3NjA5NGZmMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-07-16T16:38:10Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-20T07:21:41Z"}, "message": "[Ada] New warning on not fully initialized box aggregate\n\ngcc/ada/\n\n\t* sem_aggr.adb (Resolve_Aggregate): Warn on not fully\n\tinitialized box aggregate.\n\t* sem_aggr.ads: Fix typo.\n\t* sem_res.adb (Resolve_Actuals): Fix typo in error message\n\tformat marking it incorrectly as a continuation message.\n\t* sem_elab.adb (Check_Internal_Call_Continue): Similarly, add\n\tmissing primary message in case of a call to an actual generic\n\tsubprogram.\n\t* sem_warn.adb (Check_References): Do not warn on read but never\n\tassigned variables if the type is partially initialized.\n\t* libgnat/a-except.ads, libgnat/a-ststun.ads,\n\tlibgnat/g-sechas.ads, libgnat/a-cbdlli.ads,\n\tlibgnat/a-cfdlli.ads, libgnat/a-cobove.ads,\n\tlibgnat/a-cohata.ads, libgnat/a-crbltr.ads,\n\tlibgnat/a-cbmutr.ads, libgnat/a-crdlli.ads,\n\tlibgnat/a-cbsyqu.ads: Address new warning.\n\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n\tUpdate doc on -gnatwv.\n\t* gnat_ugn.texi: Regenerate.\n\ngcc/testsuite/\n\n\t* gnat.dg/opt11.adb: Add new expected warning.", "tree": {"sha": "83e52c300516a117442a7be1c8e5b18940f69ba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83e52c300516a117442a7be1c8e5b18940f69ba0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66b69678563a18c87985456c797b397676094ff0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b69678563a18c87985456c797b397676094ff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66b69678563a18c87985456c797b397676094ff0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b69678563a18c87985456c797b397676094ff0/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6af3576f431fa716c3a88197355cf1f5ee682ae2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af3576f431fa716c3a88197355cf1f5ee682ae2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6af3576f431fa716c3a88197355cf1f5ee682ae2"}], "stats": {"total": 136, "additions": 89, "deletions": 47}, "files": [{"sha": "1dec48754c4214e46f637b84895058562eebb9d4", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=66b69678563a18c87985456c797b397676094ff0", "patch": "@@ -3865,8 +3865,14 @@ of the pragma in the :title:`GNAT_Reference_manual`).\n \n   This switch activates warnings for access to variables which\n   may not be properly initialized. The default is that\n-  such warnings are generated.\n+  such warnings are generated. This switch will also be emitted when\n+  initializing an array or record object via the following aggregate:\n \n+  .. code-block:: ada\n+\n+       Array_Or_Record : XXX := (others => <>);\n+\n+  unless the relevant type fully initializes all components.\n \n .. index:: -gnatwV  (gcc)\n \n@@ -3875,17 +3881,6 @@ of the pragma in the :title:`GNAT_Reference_manual`).\n \n   This switch suppresses warnings for access to variables which\n   may not be properly initialized.\n-  For variables of a composite type, the warning can also be suppressed in\n-  Ada 2005 by using a default initialization with a box. For example, if\n-  Table is an array of records whose components are only partially uninitialized,\n-  then the following code:\n-\n-  .. code-block:: ada\n-\n-       Tab : Table := (others => <>);\n-\n-  will suppress warnings on subsequent statements that access components\n-  of variable Tab.\n \n \n .. index:: -gnatw.v  (gcc)"}, {"sha": "47618f64135f81049e43f7b0cc6b283a4ebe68d8", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=66b69678563a18c87985456c797b397676094ff0", "patch": "@@ -12224,7 +12224,14 @@ that no warnings are given for comparisons or subranges for any type.\n \n This switch activates warnings for access to variables which\n may not be properly initialized. The default is that\n-such warnings are generated.\n+such warnings are generated. This switch will also be emitted when\n+initializing an array or record object via the following aggregate:\n+\n+@example\n+Array_Or_Record : XXX := (others => <>);\n+@end example\n+\n+unless the relevant type fully initializes all components.\n @end table\n \n @geindex -gnatwV (gcc)\n@@ -12238,17 +12245,6 @@ such warnings are generated.\n \n This switch suppresses warnings for access to variables which\n may not be properly initialized.\n-For variables of a composite type, the warning can also be suppressed in\n-Ada 2005 by using a default initialization with a box. For example, if\n-Table is an array of records whose components are only partially uninitialized,\n-then the following code:\n-\n-@example\n-Tab : Table := (others => <>);\n-@end example\n-\n-will suppress warnings on subsequent statements that access components\n-of variable Tab.\n @end table\n \n @geindex -gnatw.v (gcc)"}, {"sha": "7e8627aeca8a907cb7e3637427f97f74013f3484", "filename": "gcc/ada/libgnat/a-cbdlli.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Flibgnat%2Fa-cbdlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Flibgnat%2Fa-cbdlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbdlli.ads?ref=66b69678563a18c87985456c797b397676094ff0", "patch": "@@ -274,7 +274,7 @@ private\n    type Node_Array is array (Count_Type range <>) of Node_Type;\n \n    type List (Capacity : Count_Type) is tagged record\n-      Nodes  : Node_Array (1 .. Capacity) := (others => <>);\n+      Nodes  : Node_Array (1 .. Capacity);\n       Free   : Count_Type'Base := -1;\n       First  : Count_Type := 0;\n       Last   : Count_Type := 0;"}, {"sha": "a9fb55ac9736966768cddeedc80d41667d8d02f0", "filename": "gcc/ada/libgnat/a-cbmutr.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Flibgnat%2Fa-cbmutr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Flibgnat%2Fa-cbmutr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbmutr.ads?ref=66b69678563a18c87985456c797b397676094ff0", "patch": "@@ -303,8 +303,8 @@ private\n    type Element_Array is array (Count_Type range <>) of aliased Element_Type;\n \n    type Tree (Capacity : Count_Type) is tagged record\n-      Nodes    : Tree_Node_Array (0 .. Capacity) := (others => <>);\n-      Elements : Element_Array (1 .. Capacity) := (others => <>);\n+      Nodes    : Tree_Node_Array (0 .. Capacity);\n+      Elements : Element_Array (1 .. Capacity);\n       Free     : Count_Type'Base := No_Node;\n       TC       : aliased Tamper_Counts;\n       Count    : Count_Type := 0;"}, {"sha": "225db2184086f0431341d93a06f02ea3900ea7d9", "filename": "gcc/ada/libgnat/a-cbsyqu.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Flibgnat%2Fa-cbsyqu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Flibgnat%2Fa-cbsyqu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbsyqu.ads?ref=66b69678563a18c87985456c797b397676094ff0", "patch": "@@ -78,7 +78,7 @@ is\n          First, Last : Count_Type := 0;\n          Length      : Count_Type := 0;\n          Max_Length  : Count_Type := 0;\n-         Elements    : Element_Array (1 .. Capacity) := (others => <>);\n+         Elements    : Element_Array (1 .. Capacity);\n       end record;\n \n    end Implementation;"}, {"sha": "f7dbf042b7c394140de2e263ec53f96fe4697763", "filename": "gcc/ada/libgnat/a-cfdlli.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Flibgnat%2Fa-cfdlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Flibgnat%2Fa-cfdlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cfdlli.ads?ref=66b69678563a18c87985456c797b397676094ff0", "patch": "@@ -1617,7 +1617,7 @@ private\n       Length : Count_Type := 0;\n       First  : Count_Type := 0;\n       Last   : Count_Type := 0;\n-      Nodes  : Node_Array (1 .. Capacity) := (others => <>);\n+      Nodes  : Node_Array (1 .. Capacity);\n    end record;\n \n    Empty_List : constant List := (0, others => <>);"}, {"sha": "d0a125103056ded64fa59b154caa03568add8491", "filename": "gcc/ada/libgnat/a-cobove.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Flibgnat%2Fa-cobove.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Flibgnat%2Fa-cobove.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cobove.ads?ref=66b69678563a18c87985456c797b397676094ff0", "patch": "@@ -390,7 +390,7 @@ private\n    function \"=\" (L, R : Elements_Array) return Boolean is abstract;\n \n    type Vector (Capacity : Count_Type) is tagged record\n-      Elements : Elements_Array (1 .. Capacity) := (others => <>);\n+      Elements : Elements_Array (1 .. Capacity);\n       Last     : Extended_Index := No_Index;\n       TC       : aliased Tamper_Counts;\n    end record with Put_Image => Put_Image;"}, {"sha": "2b98928a59ba7dfdfd71a6d30dce441057a6983d", "filename": "gcc/ada/libgnat/a-cohata.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Flibgnat%2Fa-cohata.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Flibgnat%2Fa-cohata.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cohata.ads?ref=66b69678563a18c87985456c797b397676094ff0", "patch": "@@ -72,7 +72,7 @@ package Ada.Containers.Hash_Tables is\n          Length  : Count_Type                  := 0;\n          TC      : aliased Helpers.Tamper_Counts;\n          Free    : Count_Type'Base             := -1;\n-         Nodes   : Nodes_Type (1 .. Capacity)  := (others => <>);\n+         Nodes   : Nodes_Type (1 .. Capacity);\n          Buckets : Buckets_Type (1 .. Modulus) := (others => 0);\n       end record;\n "}, {"sha": "4f00bd6ce619d93180b666007607b5502410fdc0", "filename": "gcc/ada/libgnat/a-crbltr.ads", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Flibgnat%2Fa-crbltr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Flibgnat%2Fa-crbltr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-crbltr.ads?ref=66b69678563a18c87985456c797b397676094ff0", "patch": "@@ -60,9 +60,7 @@ package Ada.Containers.Red_Black_Trees is\n       --  Note that objects of type Tree_Type are logically initialized (in the\n       --  sense that representation invariants of type are satisfied by dint of\n       --  default initialization), even without the Nodes component also having\n-      --  its own initialization expression. We only initializae the Nodes\n-      --  component here in order to prevent spurious compiler warnings about\n-      --  the container object not being fully initialized.\n+      --  its own initialization expression.\n \n       type Tree_Type (Capacity : Count_Type) is tagged record\n          First  : Count_Type := 0;\n@@ -71,7 +69,7 @@ package Ada.Containers.Red_Black_Trees is\n          Length : Count_Type := 0;\n          TC     : aliased Helpers.Tamper_Counts;\n          Free   : Count_Type'Base := -1;\n-         Nodes  : Nodes_Type (1 .. Capacity) := (others => <>);\n+         Nodes  : Nodes_Type (1 .. Capacity);\n       end record;\n \n       package Implementation is new Helpers.Generic_Implementation;"}, {"sha": "b30d35398b5b32000ca6359a50422954ae514d72", "filename": "gcc/ada/libgnat/a-crdlli.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Flibgnat%2Fa-crdlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Flibgnat%2Fa-crdlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-crdlli.ads?ref=66b69678563a18c87985456c797b397676094ff0", "patch": "@@ -314,7 +314,7 @@ private\n    type Node_Array is array (Count_Type range <>) of Node_Type;\n \n    type List (Capacity : Count_Type) is tagged limited record\n-      Nodes  : Node_Array (1 .. Capacity) := (others => <>);\n+      Nodes  : Node_Array (1 .. Capacity);\n       Free   : Count_Type'Base := -1;\n       First  : Count_Type := 0;\n       Last   : Count_Type := 0;"}, {"sha": "4d36a84fd75119da4105fb6daaacf6566bcc1ef1", "filename": "gcc/ada/libgnat/a-except.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Flibgnat%2Fa-except.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Flibgnat%2Fa-except.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-except.ads?ref=66b69678563a18c87985456c797b397676094ff0", "patch": "@@ -301,6 +301,8 @@ private\n    pragma Stream_Convert (Exception_Occurrence, String_To_EO, EO_To_String);\n    --  Functions for implementing Exception_Occurrence stream attributes\n \n+   pragma Warnings (Off, \"aggregate not fully initialized\");\n    Null_Occurrence : constant Exception_Occurrence := (others => <>);\n+   pragma Warnings (On, \"aggregate not fully initialized\");\n \n end Ada.Exceptions;"}, {"sha": "2945bca78f9021bd121fed12133d33f5c31a428f", "filename": "gcc/ada/libgnat/a-ststun.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Flibgnat%2Fa-ststun.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Flibgnat%2Fa-ststun.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ststun.ads?ref=66b69678563a18c87985456c797b397676094ff0", "patch": "@@ -71,7 +71,7 @@ private\n       EA : Stream_Element_Array (1 .. Last);\n    end record;\n \n-   Empty_Elements : aliased Elements_Type := (Last => 0, EA => (others => <>));\n+   Empty_Elements : aliased Elements_Type (0);\n \n    type Elements_Access is access all Elements_Type;\n "}, {"sha": "566a6967beedd6468bb9c8cb77fa13efea6b68da", "filename": "gcc/ada/libgnat/g-sechas.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Flibgnat%2Fg-sechas.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Flibgnat%2Fg-sechas.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-sechas.ads?ref=66b69678563a18c87985456c797b397676094ff0", "patch": "@@ -218,7 +218,9 @@ package GNAT.Secure_Hashes is\n          --  HMAC key\n       end record;\n \n+      pragma Warnings (Off, \"aggregate not fully initialized\");\n       Initial_Context : constant Context (KL => 0) := (others => <>);\n+      pragma Warnings (On, \"aggregate not fully initialized\");\n       --  Initial values are provided by default initialization of Context\n \n       type Hash_Stream (C : access Context) is"}, {"sha": "e5cdb4f9b118598abb4610a7b4335d89ab34ddd8", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=66b69678563a18c87985456c797b397676094ff0", "patch": "@@ -791,6 +791,31 @@ package body Sem_Aggr is\n       --  The actual aggregate subtype. This is not necessarily the same as Typ\n       --  which is the subtype of the context in which the aggregate was found.\n \n+      Others_Box : Boolean := False;\n+      --  Set to True if N represents a simple aggregate with only\n+      --  (others => <>), not nested as part of another aggregate.\n+\n+      function Within_Aggregate (N : Node_Id) return Boolean;\n+      --  Return True if N is part of an N_Aggregate\n+\n+      ----------------------\n+      -- Within_Aggregate --\n+      ----------------------\n+\n+      function Within_Aggregate (N : Node_Id) return Boolean is\n+         P : Node_Id := Parent (N);\n+      begin\n+         while Present (P) loop\n+            if Nkind (P) = N_Aggregate then\n+               return True;\n+            end if;\n+\n+            P := Parent (P);\n+         end loop;\n+\n+         return False;\n+      end Within_Aggregate;\n+\n    begin\n       --  Ignore junk empty aggregate resulting from parser error\n \n@@ -811,16 +836,26 @@ package body Sem_Aggr is\n         and then Present (Component_Associations (N))\n       then\n          declare\n-            Comp : Node_Id;\n+            Comp       : Node_Id;\n+            First_Comp : Boolean := True;\n \n          begin\n             Comp := First (Component_Associations (N));\n             while Present (Comp) loop\n                if Box_Present (Comp) then\n+                  if First_Comp\n+                    and then No (Expressions (N))\n+                    and then Nkind (First (Choices (Comp))) = N_Others_Choice\n+                    and then not Within_Aggregate (N)\n+                  then\n+                     Others_Box := True;\n+                  end if;\n+\n                   Insert_Actions (N, Freeze_Entity (Typ, N));\n                   exit;\n                end if;\n \n+               First_Comp := False;\n                Next (Comp);\n             end loop;\n          end;\n@@ -1045,6 +1080,13 @@ package body Sem_Aggr is\n          Set_Analyzed (N);\n       end if;\n \n+      if Warn_On_No_Value_Assigned\n+        and then Others_Box\n+        and then not Is_Fully_Initialized_Type (Etype (N))\n+      then\n+         Error_Msg_N (\"?v?aggregate not fully initialized\", N);\n+      end if;\n+\n       Check_Function_Writable_Actuals (N);\n    end Resolve_Aggregate;\n "}, {"sha": "cbbc71d4d0be3f916e02f07ea2a3eb12445eb22c", "filename": "gcc/ada/sem_aggr.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Fsem_aggr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Fsem_aggr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.ads?ref=66b69678563a18c87985456c797b397676094ff0", "patch": "@@ -39,7 +39,7 @@ package Sem_Aggr is\n    --  Returns True is aggregate Aggr consists of a single OTHERS choice\n \n    function Is_Single_Aggregate (Aggr : Node_Id) return Boolean;\n-   --  Returns True is aggregate Aggr consists of a single choice\n+   --  Returns True if aggregate Aggr consists of a single choice\n \n    --  WARNING: There is a matching C declaration of this subprogram in fe.h\n "}, {"sha": "d7a8bb0fd5e3f1a2f46c19224d0bcdafed934ad9", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=66b69678563a18c87985456c797b397676094ff0", "patch": "@@ -18633,16 +18633,17 @@ package body Sem_Elab is\n             elsif Nkind (N) = N_Attribute_Reference then\n                Error_Msg_NE\n                  (\"Access attribute of & before body seen<<\", N, Orig_Ent);\n-               Error_Msg_N (\"\\possible Program_Error on later references<\", N);\n+               Error_Msg_N\n+                 (\"\\possible Program_Error on later references<<\", N);\n                Insert_Check := False;\n \n             elsif Nkind (Unit_Declaration_Node (Orig_Ent)) /=\n                     N_Subprogram_Renaming_Declaration\n+              or else Is_Generic_Actual_Subprogram (Orig_Ent)\n             then\n                Error_Msg_NE\n                  (\"cannot call& before body seen<<\", N, Orig_Ent);\n-\n-            elsif not Is_Generic_Actual_Subprogram (Orig_Ent) then\n+            else\n                Insert_Check := False;\n             end if;\n "}, {"sha": "66ad1e49f5a53f5768233ec563694304a690183b", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=66b69678563a18c87985456c797b397676094ff0", "patch": "@@ -4143,11 +4143,11 @@ package body Sem_Res is\n                         --  types.\n \n                         if Is_By_Reference_Type (Etype (F))\n-                           or else Is_By_Reference_Type (Expr_Typ)\n+                          or else Is_By_Reference_Type (Expr_Typ)\n                         then\n                            Error_Msg_N\n                              (\"view conversion between unrelated by reference \"\n-                              & \"array types not allowed (\\'A'I-00246)\", A);\n+                              & \"array types not allowed ('A'I-00246)\", A);\n \n                         --  In Ada 2005 mode, check view conversion component\n                         --  type cannot be private, tagged, or volatile. Note"}, {"sha": "89e5696ef014c500afb5a78dbf620666f4a0464e", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b69678563a18c87985456c797b397676094ff0/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=66b69678563a18c87985456c797b397676094ff0", "patch": "@@ -1416,8 +1416,14 @@ package body Sem_Warn is\n                           and then not Warnings_Off_E1\n                           and then not Has_Junk_Name (E1)\n                         then\n-                           Output_Reference_Error\n-                             (\"?v?variable& is read but never assigned!\");\n+                           if Is_Access_Type (E1T)\n+                             or else\n+                               not Is_Partially_Initialized_Type (E1T, False)\n+                           then\n+                              Output_Reference_Error\n+                                (\"?v?variable& is read but never assigned!\");\n+                           end if;\n+\n                            May_Need_Initialized_Actual (E1);\n                         end if;\n "}, {"sha": "e02e4260c45924da2213d7b3423540d852a0c283", "filename": "gcc/testsuite/gnat.dg/opt11.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b69678563a18c87985456c797b397676094ff0/gcc%2Ftestsuite%2Fgnat.dg%2Fopt11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b69678563a18c87985456c797b397676094ff0/gcc%2Ftestsuite%2Fgnat.dg%2Fopt11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt11.adb?ref=66b69678563a18c87985456c797b397676094ff0", "patch": "@@ -6,7 +6,7 @@ package body Opt11 is\n    procedure Proc is\n       R : Rec;\n    begin\n-      R := (others => <>);\n+      R := (others => <>);  --  { dg-warning \"aggregate not fully initialized\" }\n    end;\n \n end Opt11;"}]}