{"sha": "0e07aff3464497cde5a8f24fe1f4571e8499750a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUwN2FmZjM0NjQ0OTdjZGU1YThmMjRmZTFmNDU3MWU4NDk5NzUwYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-05-23T05:20:25Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-23T05:20:25Z"}, "message": "i386.c (ix86_expand_call): New function, extracted from md call patterns.\n\n        * config/i386/i386.c (ix86_expand_call): New function, extracted\n        from md call patterns.  Add pic_offset_table_rtx to\n        CALL_INSN_FUNCTION_USAGE when needed.\n        * config/i386/i386.md (call_pop, call): Use ix86_expand_call.\n        (call_value_pop, call_value, untyped_call): Likewise.\n        (call_exp, call_value_exp): Remove.\n        * config/i386/i386-protos.h: Update.\n\nFrom-SVN: r53763", "tree": {"sha": "0881c0b88179b5c6b4d12c3dbbc6bf7228f8d915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0881c0b88179b5c6b4d12c3dbbc6bf7228f8d915"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e07aff3464497cde5a8f24fe1f4571e8499750a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e07aff3464497cde5a8f24fe1f4571e8499750a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e07aff3464497cde5a8f24fe1f4571e8499750a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e07aff3464497cde5a8f24fe1f4571e8499750a/comments", "author": null, "committer": null, "parents": [{"sha": "c32dd1ef25b7c0cbc0d6c917a22a700f288e878f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c32dd1ef25b7c0cbc0d6c917a22a700f288e878f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c32dd1ef25b7c0cbc0d6c917a22a700f288e878f"}], "stats": {"total": 162, "additions": 72, "deletions": 90}, "files": [{"sha": "42368e2ab3b018edac00cf4b6de76ac4e5959b51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e07aff3464497cde5a8f24fe1f4571e8499750a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e07aff3464497cde5a8f24fe1f4571e8499750a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e07aff3464497cde5a8f24fe1f4571e8499750a", "patch": "@@ -1,3 +1,13 @@\n+2002-05-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.c (ix86_expand_call): New function, extracted\n+\tfrom md call patterns.  Add pic_offset_table_rtx to\n+\tCALL_INSN_FUNCTION_USAGE when needed.\n+\t* config/i386/i386.md (call_pop, call): Use ix86_expand_call.\n+\t(call_value_pop, call_value, untyped_call): Likewise.\n+\t(call_exp, call_value_exp): Remove.\n+\t* config/i386/i386-protos.h: Update.\n+\n 2002-05-22  Richard Henderson  <rth@redhat.com>\n \n \t* varasm.c (default_section_type_flags): Check for VAR_DECL"}, {"sha": "c02e2e3ffc763141c4c044dc2f303be0e49dcfa4", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e07aff3464497cde5a8f24fe1f4571e8499750a/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e07aff3464497cde5a8f24fe1f4571e8499750a/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=0e07aff3464497cde5a8f24fe1f4571e8499750a", "patch": "@@ -121,6 +121,7 @@ extern void ix86_expand_branch PARAMS ((enum rtx_code, rtx));\n extern int ix86_expand_setcc PARAMS ((enum rtx_code, rtx));\n extern int ix86_expand_int_movcc PARAMS ((rtx[]));\n extern int ix86_expand_fp_movcc PARAMS ((rtx[]));\n+extern void ix86_expand_call PARAMS ((rtx, rtx, rtx, rtx, rtx));\n extern void x86_initialize_trampoline PARAMS ((rtx, rtx, rtx));\n extern rtx ix86_zero_extend_to_Pmode PARAMS ((rtx));\n extern void ix86_split_long_move PARAMS ((rtx[]));"}, {"sha": "650513191697fb4620db821bbdc60fc50d8de4c6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e07aff3464497cde5a8f24fe1f4571e8499750a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e07aff3464497cde5a8f24fe1f4571e8499750a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0e07aff3464497cde5a8f24fe1f4571e8499750a", "patch": "@@ -9850,6 +9850,55 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx)\n \n   emit_label (end_0_label);\n }\n+\n+void\n+ix86_expand_call (retval, fnaddr, callarg1, callarg2, pop)\n+     rtx retval, fnaddr, callarg1, callarg2, pop;\n+{\n+  rtx use = NULL, call;\n+\n+  if (pop == const0_rtx)\n+    pop = NULL;\n+  if (TARGET_64BIT && pop)\n+    abort ();\n+\n+  /* Static functions and indirect calls don't need the pic register.  */\n+  if (! TARGET_64BIT && flag_pic\n+      && GET_CODE (XEXP (fnaddr, 0)) == SYMBOL_REF\n+      && ! SYMBOL_REF_FLAG (XEXP (fnaddr, 0)))\n+    {\n+      current_function_uses_pic_offset_table = 1;\n+      use_reg (&use, pic_offset_table_rtx);\n+    }\n+\n+  if (TARGET_64BIT && INTVAL (callarg2) >= 0)\n+    {\n+      rtx al = gen_rtx_REG (QImode, 0);\n+      emit_move_insn (al, callarg2);\n+      use_reg (&use, al);\n+    }\n+\n+  if (! call_insn_operand (XEXP (fnaddr, 0), Pmode))\n+    {\n+      fnaddr = copy_to_mode_reg (Pmode, XEXP (fnaddr, 0));\n+      fnaddr = gen_rtx_MEM (QImode, fnaddr);\n+    }\n+\n+  call = gen_rtx_CALL (VOIDmode, fnaddr, callarg1);\n+  if (retval)\n+    call = gen_rtx_SET (VOIDmode, retval, call);\n+  if (pop)\n+    {\n+      pop = gen_rtx_PLUS (Pmode, stack_pointer_rtx, pop);\n+      pop = gen_rtx_SET (VOIDmode, stack_pointer_rtx, pop);\n+      call = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, call, pop));\n+    }\n+\n+  call = emit_call_insn (call);\n+  if (use)\n+    CALL_INSN_FUNCTION_USAGE (call) = use;\n+}\n+  \n \f\n /* Clear stack slot assignments remembered from previous functions.\n    This is called from INIT_EXPANDERS once before RTL is emitted for each"}, {"sha": "cdd99fc22d50e5236dcaa4e1e3ba246fee7fbcc1", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 12, "deletions": 90, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e07aff3464497cde5a8f24fe1f4571e8499750a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e07aff3464497cde5a8f24fe1f4571e8499750a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=0e07aff3464497cde5a8f24fe1f4571e8499750a", "patch": "@@ -12891,21 +12891,8 @@\n \t\t\t    (match_operand:SI 3 \"\" \"\")))])]\n   \"!TARGET_64BIT\"\n {\n-  if (operands[3] == const0_rtx)\n-    {\n-      emit_insn (gen_call (operands[0], operands[1], constm1_rtx));\n-      DONE;\n-    }\n-  /* Static functions and indirect calls don't need\n-     current_function_uses_pic_offset_table.  */\n-  if (flag_pic\n-      && GET_CODE (XEXP (operands[0], 0)) == SYMBOL_REF\n-      && ! SYMBOL_REF_FLAG (XEXP (operands[0], 0)))\n-    current_function_uses_pic_offset_table = 1;\n-  if (! call_insn_operand (XEXP (operands[0], 0), Pmode))\n-    XEXP (operands[0], 0) = copy_to_mode_reg (Pmode, XEXP (operands[0], 0));\n-  if (TARGET_64BIT)\n-    abort();\n+  ix86_expand_call (NULL, operands[0], operands[1], operands[2], operands[3]);\n+  DONE;\n })\n \n (define_insn \"*call_pop_0\"\n@@ -12947,37 +12934,12 @@\n   [(call (match_operand:QI 0 \"\" \"\")\n \t (match_operand 1 \"\" \"\"))\n    (use (match_operand 2 \"\" \"\"))]\n-  ;; Operand 1 not used on the i386.\n   \"\"\n {\n-  rtx insn;\n-  /* Static functions and indirect calls don't need\n-     current_function_uses_pic_offset_table.  */\n-  if (flag_pic\n-      && GET_CODE (XEXP (operands[0], 0)) == SYMBOL_REF\n-      && ! SYMBOL_REF_FLAG (XEXP (operands[0], 0)))\n-    current_function_uses_pic_offset_table = 1;\n-\n-  if (! call_insn_operand (XEXP (operands[0], 0), Pmode))\n-    XEXP (operands[0], 0) = copy_to_mode_reg (Pmode, XEXP (operands[0], 0));\n-  if (TARGET_64BIT && INTVAL (operands[2]) >= 0)\n-    {\n-      rtx reg = gen_rtx_REG (QImode, 0);\n-      emit_move_insn (reg, operands[2]);\n-      insn = emit_call_insn (gen_call_exp (operands[0], operands[1]));\n-      use_reg (&CALL_INSN_FUNCTION_USAGE (insn), reg);\n-      DONE;\n-    }\n-   insn = emit_call_insn (gen_call_exp (operands[0], operands[1]));\n-   DONE;\n+  ix86_expand_call (NULL, operands[0], operands[1], operands[2], NULL);\n+  DONE;\n })\n \n-(define_expand \"call_exp\"\n-  [(call (match_operand:QI 0 \"\" \"\")\n-\t (match_operand 1 \"\" \"\"))]\n-  \"\"\n-  \"\")\n-\n (define_insn \"*call_0\"\n   [(call (mem:QI (match_operand 0 \"constant_call_address_operand\" \"\"))\n \t (match_operand 1 \"\" \"\"))]\n@@ -13029,7 +12991,6 @@\n   [(set_attr \"type\" \"call\")])\n \n ;; Call subroutine, returning value in operand 0\n-;; (which must be a hard register).\n \n (define_expand \"call_value_pop\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n@@ -13040,20 +13001,9 @@\n \t\t\t    (match_operand:SI 4 \"\" \"\")))])]\n   \"!TARGET_64BIT\"\n {\n-  if (operands[4] == const0_rtx)\n-    {\n-      emit_insn (gen_call_value (operands[0], operands[1], operands[2],\n-\t\t\t\t constm1_rtx));\n-      DONE;\n-    }\n-  /* Static functions and indirect calls don't need\n-     current_function_uses_pic_offset_table.  */\n-  if (flag_pic\n-      && GET_CODE (XEXP (operands[1], 0)) == SYMBOL_REF\n-      && ! SYMBOL_REF_FLAG (XEXP (operands[1], 0)))\n-    current_function_uses_pic_offset_table = 1;\n-  if (! call_insn_operand (XEXP (operands[1], 0), Pmode))\n-    XEXP (operands[1], 0) = copy_to_mode_reg (Pmode, XEXP (operands[1], 0));\n+  ix86_expand_call (operands[0], operands[1], operands[2],\n+\t\t    operands[3], operands[4]);\n+  DONE;\n })\n \n (define_expand \"call_value\"\n@@ -13064,36 +13014,10 @@\n   ;; Operand 2 not used on the i386.\n   \"\"\n {\n-  rtx insn;\n-  /* Static functions and indirect calls don't need\n-     current_function_uses_pic_offset_table.  */\n-  if (flag_pic\n-      && GET_CODE (XEXP (operands[1], 0)) == SYMBOL_REF\n-      && ! SYMBOL_REF_FLAG (XEXP (operands[1], 0)))\n-    current_function_uses_pic_offset_table = 1;\n-  if (! call_insn_operand (XEXP (operands[1], 0), Pmode))\n-    XEXP (operands[1], 0) = copy_to_mode_reg (Pmode, XEXP (operands[1], 0));\n-  if (TARGET_64BIT && INTVAL (operands[3]) >= 0)\n-    {\n-      rtx reg = gen_rtx_REG (QImode, 0);\n-      emit_move_insn (reg, operands[3]);\n-      insn = emit_call_insn (gen_call_value_exp (operands[0], operands[1],\n-\t\t\t\t\t\t operands[2]));\n-      use_reg (&CALL_INSN_FUNCTION_USAGE (insn), reg);\n-      DONE;\n-    }\n-  insn = emit_call_insn (gen_call_value_exp (operands[0], operands[1],\n-\t\t\t\t\t     operands[2]));\n+  ix86_expand_call (operands[0], operands[1], operands[2], operands[3], NULL);\n   DONE;\n })\n \n-(define_expand \"call_value_exp\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (match_operand:QI 1 \"\" \"\")\n-\t      (match_operand:SI 2 \"\" \"\")))]\n-  \"\"\n-  \"\")\n-\n ;; Call subroutine returning any type.\n \n (define_expand \"untyped_call\"\n@@ -13110,12 +13034,10 @@\n      simply pretend the untyped call returns a complex long double\n      value.  */\n \n-  emit_call_insn (TARGET_FLOAT_RETURNS_IN_80387\n-                  ? gen_call_value (gen_rtx_REG (XCmode, FIRST_FLOAT_REG),\n-\t\t\t\t    operands[0], const0_rtx,\n-\t\t\t\t    GEN_INT (SSE_REGPARM_MAX - 1))\n-                  : gen_call (operands[0], const0_rtx,\n-\t\t\t      GEN_INT (SSE_REGPARM_MAX - 1)));\n+  ix86_expand_call ((TARGET_FLOAT_RETURNS_IN_80387\n+\t\t     ? gen_rtx_REG (XCmode, FIRST_FLOAT_REG) : NULL),\n+\t\t    operands[0], const0_rtx, GEN_INT (SSE_REGPARM_MAX - 1),\n+\t\t    NULL);\n \n   for (i = 0; i < XVECLEN (operands[2], 0); i++)\n     {"}]}