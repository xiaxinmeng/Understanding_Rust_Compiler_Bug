{"sha": "eb9af792f2c0e8934f6b537ec12f8211d1fba505", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI5YWY3OTJmMmMwZTg5MzRmNmI1MzdlYzEyZjgyMTFkMWZiYTUwNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-04-03T08:50:09Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-04-03T08:50:09Z"}, "message": "stl_map.h (map<>::insert(iterator, const value_type&): Uglify parameter.\n\n2007-04-03  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_map.h (map<>::insert(iterator, const value_type&):\n\tUglify parameter.\n\nFrom-SVN: r123453", "tree": {"sha": "b6f6c5ee483abc5e6424a8a8272fef3d7cf41d24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6f6c5ee483abc5e6424a8a8272fef3d7cf41d24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb9af792f2c0e8934f6b537ec12f8211d1fba505", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb9af792f2c0e8934f6b537ec12f8211d1fba505", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb9af792f2c0e8934f6b537ec12f8211d1fba505", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb9af792f2c0e8934f6b537ec12f8211d1fba505/comments", "author": null, "committer": null, "parents": [{"sha": "f7e52577137bb5d0e7501475eab47331a41fac67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7e52577137bb5d0e7501475eab47331a41fac67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7e52577137bb5d0e7501475eab47331a41fac67"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "a2f10f4654f3a47a873e5662a7aeaf1f48ab5dbd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb9af792f2c0e8934f6b537ec12f8211d1fba505/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb9af792f2c0e8934f6b537ec12f8211d1fba505/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=eb9af792f2c0e8934f6b537ec12f8211d1fba505", "patch": "@@ -1,3 +1,8 @@\n+2007-04-03  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_map.h (map<>::insert(iterator, const value_type&):\n+\tUglify parameter.\n+\n 2007-04-03  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/31440"}, {"sha": "e30eac282390d17fbd2c60747dd64eb7e2bf8c9e", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb9af792f2c0e8934f6b537ec12f8211d1fba505/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb9af792f2c0e8934f6b537ec12f8211d1fba505/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=eb9af792f2c0e8934f6b537ec12f8211d1fba505", "patch": "@@ -1,6 +1,7 @@\n // Map implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004, 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -394,7 +395,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n        *\n        *  Insertion requires logarithmic time.\n        */\n-      std::pair<iterator,bool>\n+      std::pair<iterator, bool>\n       insert(const value_type& __x)\n       { return _M_t._M_insert_unique(__x); }\n \n@@ -422,8 +423,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n        *  Insertion requires logarithmic time (if the hint is not taken).\n        */\n       iterator\n-      insert(iterator position, const value_type& __x)\n-      { return _M_t._M_insert_unique_(position, __x); }\n+      insert(iterator __position, const value_type& __x)\n+      { return _M_t._M_insert_unique_(__position, __x); }\n \n       /**\n        *  @brief Template function that attemps to insert a range of elements."}]}