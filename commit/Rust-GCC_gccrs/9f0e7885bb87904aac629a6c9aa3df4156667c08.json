{"sha": "9f0e7885bb87904aac629a6c9aa3df4156667c08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYwZTc4ODViYjg3OTA0YWFjNjI5YTZjOWFhM2RmNDE1NjY2N2MwOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-03-06T22:49:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-03-06T22:49:39Z"}, "message": "re PR debug/39372 (Missing DW_AT_location for constructor static variable)\n\n\tPR debug/39372\n\t* dwarf2out.c (add_abstract_origin_attribute): Return\n\torigin_die.\n\t(gen_variable_die): Emit DW_AT_location on abstract static variable's\n\tDIE, don't emit it if abstract origin already has it.\n\t* tree-cfg.c (remove_useless_stmts_bind): GIMPLE_BINDs with any\n\tBLOCK_NONLOCALIZED_VARS in its gimple_bind_block aren't useless.\n\n\t* g++.dg/debug/dwarf2/static-local-var-in-ctor.C: New test.\n\nFrom-SVN: r144682", "tree": {"sha": "645eb9edc055f339bd8caceb0c87f633d148625c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/645eb9edc055f339bd8caceb0c87f633d148625c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f0e7885bb87904aac629a6c9aa3df4156667c08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f0e7885bb87904aac629a6c9aa3df4156667c08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f0e7885bb87904aac629a6c9aa3df4156667c08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f0e7885bb87904aac629a6c9aa3df4156667c08/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b664bd1dab8cf90edd168913e8bf50bb262343a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b664bd1dab8cf90edd168913e8bf50bb262343a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b664bd1dab8cf90edd168913e8bf50bb262343a"}], "stats": {"total": 79, "additions": 72, "deletions": 7}, "files": [{"sha": "f6204bf557e5c92d4a74345e4c2ea692fb381e1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0e7885bb87904aac629a6c9aa3df4156667c08/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0e7885bb87904aac629a6c9aa3df4156667c08/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f0e7885bb87904aac629a6c9aa3df4156667c08", "patch": "@@ -1,3 +1,13 @@\n+2009-03-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/39372\n+\t* dwarf2out.c (add_abstract_origin_attribute): Return\n+\torigin_die.\n+\t(gen_variable_die): Emit DW_AT_location on abstract static variable's\n+\tDIE, don't emit it if abstract origin already has it.\n+\t* tree-cfg.c (remove_useless_stmts_bind): GIMPLE_BINDs with any\n+\tBLOCK_NONLOCALIZED_VARS in its gimple_bind_block aren't useless.\n+\n 2009-03-06  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n \n \t* genpreds.c: (needs_variable): Fix parentheses at variable name"}, {"sha": "63301a571789d0fdeac9c1c88284ddbf3c44a6a9", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0e7885bb87904aac629a6c9aa3df4156667c08/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0e7885bb87904aac629a6c9aa3df4156667c08/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=9f0e7885bb87904aac629a6c9aa3df4156667c08", "patch": "@@ -5128,7 +5128,7 @@ static void add_byte_size_attribute (dw_die_ref, tree);\n static void add_bit_offset_attribute (dw_die_ref, tree);\n static void add_bit_size_attribute (dw_die_ref, tree);\n static void add_prototyped_attribute (dw_die_ref, tree);\n-static void add_abstract_origin_attribute (dw_die_ref, tree);\n+static dw_die_ref add_abstract_origin_attribute (dw_die_ref, tree);\n static void add_pure_or_virtual_attribute (dw_die_ref, tree);\n static void add_src_coords_attributes (dw_die_ref, tree);\n static void add_name_and_src_coords_attributes (dw_die_ref, tree);\n@@ -12479,7 +12479,7 @@ add_prototyped_attribute (dw_die_ref die, tree func_type)\n    by looking in either the type declaration or object declaration\n    equate table.  */\n \n-static inline void\n+static inline dw_die_ref\n add_abstract_origin_attribute (dw_die_ref die, tree origin)\n {\n   dw_die_ref origin_die = NULL;\n@@ -12517,7 +12517,8 @@ add_abstract_origin_attribute (dw_die_ref die, tree origin)\n      here.  */\n \n   if (origin_die)\n-      add_AT_die_ref (die, DW_AT_abstract_origin, origin_die);\n+    add_AT_die_ref (die, DW_AT_abstract_origin, origin_die);\n+  return origin_die;\n }\n \n /* We do not currently support the pure_virtual attribute.  */\n@@ -13885,6 +13886,7 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n   tree decl_or_origin = decl ? decl : origin;\n   dw_die_ref var_die;\n   dw_die_ref old_die = decl ? lookup_decl_die (decl) : NULL;\n+  dw_die_ref origin_die;\n   int declaration = (DECL_EXTERNAL (decl_or_origin)\n \t\t     /* If DECL is COMDAT and has not actually been\n \t\t\temitted, we cannot take its address; there\n@@ -14018,8 +14020,9 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n \n   var_die = new_die (DW_TAG_variable, context_die, decl);\n \n+  origin_die = NULL;\n   if (origin != NULL)\n-    add_abstract_origin_attribute (var_die, origin);\n+    origin_die = add_abstract_origin_attribute (var_die, origin);\n \n   /* Loop unrolling can create multiple blocks that refer to the same\n      static variable, so we must test for the DW_AT_declaration flag.\n@@ -14082,7 +14085,17 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n   if (decl && (DECL_ABSTRACT (decl) || declaration))\n     equate_decl_number_to_die (decl, var_die);\n \n-  if (! declaration && ! DECL_ABSTRACT (decl_or_origin))\n+  if (! declaration\n+      && (! DECL_ABSTRACT (decl_or_origin)\n+\t  /* Local static vars are shared between all clones/inlines,\n+\t     so emit DW_AT_location on the abstract DIE if DECL_RTL is\n+\t     already set.  */\n+\t  || (TREE_CODE (decl_or_origin) == VAR_DECL\n+\t      && TREE_STATIC (decl_or_origin)\n+\t      && DECL_RTL_SET_P (decl_or_origin)))\n+      /* When abstract origin already has DW_AT_location attribute, no need\n+\t to add it again.  */\n+      && (origin_die == NULL || get_AT (origin_die, DW_AT_location) == NULL))\n     {\n       if (TREE_CODE (decl_or_origin) == VAR_DECL && TREE_STATIC (decl_or_origin)\n           && !TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl_or_origin)))"}, {"sha": "cbc8ae27aaae6468e76c7c866765af741d428a1c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0e7885bb87904aac629a6c9aa3df4156667c08/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0e7885bb87904aac629a6c9aa3df4156667c08/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f0e7885bb87904aac629a6c9aa3df4156667c08", "patch": "@@ -1,3 +1,8 @@\n+2009-03-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/39372\n+\t* g++.dg/debug/dwarf2/static-local-var-in-ctor.C: New test.\n+\n 2009-03-05  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/38908"}, {"sha": "a1bf6b53cd43178979cb034e5147762ef00321df", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/static-local-var-in-ctor.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0e7885bb87904aac629a6c9aa3df4156667c08/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fstatic-local-var-in-ctor.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0e7885bb87904aac629a6c9aa3df4156667c08/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fstatic-local-var-in-ctor.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fstatic-local-var-in-ctor.C?ref=9f0e7885bb87904aac629a6c9aa3df4156667c08", "patch": "@@ -0,0 +1,37 @@\n+// PR debug/39372\n+// { dg-do compile }\n+// { dg-options \"-O0 -g -dA\" }\n+// { dg-final { scan-assembler \"DW_OP_addr\\[^\\n\\r\\]*\\[\\n\\r\\]*\\[^\\n\\r\\]*staticvar1\" } }\n+// { dg-final { scan-assembler \"DW_OP_addr\\[^\\n\\r\\]*\\[\\n\\r\\]*\\[^\\n\\r\\]*staticvar2\" } }\n+\n+extern void f (int *);\n+\n+struct A\n+{\n+  A(int i);\n+  void foo(int i);\n+};\n+\n+A::A(int i)\n+{\n+  static int *staticvar1 = new int(i);\n+  f (staticvar1);\n+}\n+\n+void A::foo(int i)\n+{\n+  static int *staticvar2 = new int(i);\n+  f (staticvar2);\n+}\n+\n+void f (int *)\n+{\n+}\n+\n+int\n+main (void)\n+{\n+  A a(42);\n+  a.foo(42);\n+  return 0;\n+}"}, {"sha": "9c5b2e6c58ca8f15f4d7b313f4a8d738f89455b0", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0e7885bb87904aac629a6c9aa3df4156667c08/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0e7885bb87904aac629a6c9aa3df4156667c08/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=9f0e7885bb87904aac629a6c9aa3df4156667c08", "patch": "@@ -1799,11 +1799,11 @@ remove_useless_stmts_bind (gimple_stmt_iterator *gsi, struct rus_data *data ATTR\n       tree var = NULL_TREE;\n       /* Even if there are no gimple_bind_vars, there might be other\n \t decls in BLOCK_VARS rendering the GIMPLE_BIND not useless.  */\n-      if (block)\n+      if (block && !BLOCK_NUM_NONLOCALIZED_VARS (block))\n \tfor (var = BLOCK_VARS (block); var; var = TREE_CHAIN (var))\n \t  if (TREE_CODE (var) == IMPORTED_DECL)\n \t    break;\n-      if (var)\n+      if (var || (block && BLOCK_NUM_NONLOCALIZED_VARS (block)))\n \tgsi_next (gsi);\n       else\n \t{"}]}