{"sha": "3c02a29f576ea423f7ec767aca12f3333e2814f0", "node_id": "C_kwDOANBUbNoAKDNjMDJhMjlmNTc2ZWE0MjNmN2VjNzY3YWNhMTJmMzMzM2UyODE0ZjA", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-10-29T15:39:31Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-01T13:12:47Z"}, "message": "Add missing accessors for enum items", "tree": {"sha": "9f7f276980371c8bc81c906b8a81409ff5bf0ce2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f7f276980371c8bc81c906b8a81409ff5bf0ce2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c02a29f576ea423f7ec767aca12f3333e2814f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c02a29f576ea423f7ec767aca12f3333e2814f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c02a29f576ea423f7ec767aca12f3333e2814f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c02a29f576ea423f7ec767aca12f3333e2814f0/comments", "author": null, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1be610afab2d1f3fce433be2eeb9b4b8d11bdf0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1be610afab2d1f3fce433be2eeb9b4b8d11bdf0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1be610afab2d1f3fce433be2eeb9b4b8d11bdf0d"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "12d0c202b2f8cc582d0ef09d5a72d9f06a4a0127", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c02a29f576ea423f7ec767aca12f3333e2814f0/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c02a29f576ea423f7ec767aca12f3333e2814f0/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=3c02a29f576ea423f7ec767aca12f3333e2814f0", "patch": "@@ -1694,12 +1694,12 @@ class EnumItem : public Item\n     return std::unique_ptr<EnumItem> (clone_item_impl ());\n   }\n \n-  virtual std::string as_string () const;\n+  virtual std::string as_string () const override;\n \n   // not pure virtual as not abstract\n-  virtual void accept_vis (HIRVisitor &vis);\n+  virtual void accept_vis (HIRVisitor &vis) override;\n \n-  Location get_locus () const { return locus; }\n+  Location get_locus () const override { return locus; }\n \n   Identifier get_identifier () const { return variant_name; }\n \n@@ -1729,6 +1729,8 @@ class EnumItemTuple : public EnumItem\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  std::vector<TupleField> &get_tuple_fields () { return tuple_fields; }\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   EnumItemTuple *clone_item_impl () const override\n@@ -1759,6 +1761,8 @@ class EnumItemStruct : public EnumItem\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  std::vector<StructField> &get_struct_fields () { return struct_fields; }\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   EnumItemStruct *clone_item_impl () const override\n@@ -1805,6 +1809,8 @@ class EnumItemDiscriminant : public EnumItem\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  std::unique_ptr<Expr> &get_discriminant_expression () { return expression; }\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   EnumItemDiscriminant *clone_item_impl () const override\n@@ -1899,6 +1905,16 @@ class Enum : public VisItem\n \n   Identifier get_identifier () const { return enum_name; }\n \n+  std::vector<std::unique_ptr<GenericParam>> &get_generic_params ()\n+  {\n+    return generic_params;\n+  }\n+\n+  const std::vector<std::unique_ptr<EnumItem>> &get_variants () const\n+  {\n+    return items;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */"}, {"sha": "d7977b4f6f6dd3a4e0688d9ced9845c00e2740ac", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c02a29f576ea423f7ec767aca12f3333e2814f0/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c02a29f576ea423f7ec767aca12f3333e2814f0/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=3c02a29f576ea423f7ec767aca12f3333e2814f0", "patch": "@@ -127,7 +127,7 @@ class Item : public Stmt\n     return std::unique_ptr<Item> (clone_item_impl ());\n   }\n \n-  std::string as_string () const;\n+  std::string as_string () const override;\n \n   /* Adds crate names to the vector passed by reference, if it can\n    * (polymorphism). */"}]}