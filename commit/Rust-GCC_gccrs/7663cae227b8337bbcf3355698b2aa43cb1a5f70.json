{"sha": "7663cae227b8337bbcf3355698b2aa43cb1a5f70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY2M2NhZTIyN2I4MzM3YmJjZjMzNTU2OThiMmFhNDNjYjFhNWY3MA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-08-31T16:57:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-08-31T16:57:20Z"}, "message": "Constrain std::shared_ptr assignment and resetting\n\n\t* include/bits/shared_ptr.h (_Assignable): New alias template.\n\t(shared_ptr::operator=(const shared_ptr<_Tp1>&))\n\t(shared_ptr::operator=(shared_ptr<_Tp1>&&))\n\t(shared_ptr::operator=(unique_ptr<_Tp1>&&)): Constrain with\n\t_Assignable.\n\t* include/bits/shared_ptr_base.h (_Assignable): New alias template.\n\t(__shared_ptr::operator=(const __shared_ptr<_Tp1>&))\n\t(__shared_ptr::operator=(__shared_ptr<_Tp1>&&))\n\t(__shared_ptr::operator=(unique_ptr<_Tp1>&&)): Constrain with\n\t_Assignable.\n\t(__shared_ptr::reset(_Tp1*), __shared_ptr::reset(_Tp1*, _Deleter))\n\t(__shared_ptr::reset(_Tp1*, _Deleter, _Alloc)): Constrain with\n\t_Convertible.\n\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Change dg-error to\n\tmatch on any line.\n\t* testsuite/20_util/shared_ptr/cons/void_neg.cc: Likewise.\n\t* testsuite/20_util/shared_ptr/assign/sfinae.cc: New test.\n\t* testsuite/20_util/shared_ptr/assign/shared_ptr_neg.cc: Update\n\texpected errors. Remove unnecessary code.\n\t* testsuite/20_util/shared_ptr/modifiers/reset_sfinae.cc: New test.\n\nFrom-SVN: r239898", "tree": {"sha": "d67ccc26639c2c37194d284938a2c2d7da567bca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d67ccc26639c2c37194d284938a2c2d7da567bca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7663cae227b8337bbcf3355698b2aa43cb1a5f70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7663cae227b8337bbcf3355698b2aa43cb1a5f70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7663cae227b8337bbcf3355698b2aa43cb1a5f70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7663cae227b8337bbcf3355698b2aa43cb1a5f70/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e46d22a82119006ef69b4ba101565014ccaa9223", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e46d22a82119006ef69b4ba101565014ccaa9223", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e46d22a82119006ef69b4ba101565014ccaa9223"}], "stats": {"total": 242, "additions": 211, "deletions": 31}, "files": [{"sha": "10761e8c38a1a30942f6cd21391d3c1d0ec38469", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7663cae227b8337bbcf3355698b2aa43cb1a5f70/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7663cae227b8337bbcf3355698b2aa43cb1a5f70/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7663cae227b8337bbcf3355698b2aa43cb1a5f70", "patch": "@@ -1,5 +1,26 @@\n 2016-08-31  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/shared_ptr.h (_Assignable): New alias template.\n+\t(shared_ptr::operator=(const shared_ptr<_Tp1>&))\n+\t(shared_ptr::operator=(shared_ptr<_Tp1>&&))\n+\t(shared_ptr::operator=(unique_ptr<_Tp1>&&)): Constrain with\n+\t_Assignable.\n+\t* include/bits/shared_ptr_base.h (_Assignable): New alias template.\n+\t(__shared_ptr::operator=(const __shared_ptr<_Tp1>&))\n+\t(__shared_ptr::operator=(__shared_ptr<_Tp1>&&))\n+\t(__shared_ptr::operator=(unique_ptr<_Tp1>&&)): Constrain with\n+\t_Assignable.\n+\t(__shared_ptr::reset(_Tp1*), __shared_ptr::reset(_Tp1*, _Deleter))\n+\t(__shared_ptr::reset(_Tp1*, _Deleter, _Alloc)): Constrain with\n+\t_Convertible.\n+\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Change dg-error to\n+\tmatch on any line.\n+\t* testsuite/20_util/shared_ptr/cons/void_neg.cc: Likewise.\n+\t* testsuite/20_util/shared_ptr/assign/sfinae.cc: New test.\n+\t* testsuite/20_util/shared_ptr/assign/shared_ptr_neg.cc: Update\n+\texpected errors. Remove unnecessary code.\n+\t* testsuite/20_util/shared_ptr/modifiers/reset_sfinae.cc: New test.\n+\n \t* include/bits/stl_tree.h (_Rb_tree::operator=(_Rb_tree&&)): Move\n \tcomparison object.\n \t* testsuite/23_containers/set/move_comparison.cc: New test."}, {"sha": "b2523b832286bd393d571b12f8bf904be57a61ad", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7663cae227b8337bbcf3355698b2aa43cb1a5f70/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7663cae227b8337bbcf3355698b2aa43cb1a5f70/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=7663cae227b8337bbcf3355698b2aa43cb1a5f70", "patch": "@@ -93,8 +93,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class shared_ptr : public __shared_ptr<_Tp>\n     {\n       template<typename _Ptr>\n-\tusing _Convertible\n-\t  = typename enable_if<is_convertible<_Ptr, _Tp*>::value>::type;\n+\tusing _Convertible = typename\n+\t  enable_if<is_convertible<_Ptr, _Tp*>::value>::type;\n+\n+      template<typename _Ptr>\n+\tusing _Assignable = typename\n+\t  enable_if<is_convertible<_Ptr, _Tp*>::value, shared_ptr&>::type;\n \n     public:\n \n@@ -276,7 +280,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       shared_ptr& operator=(const shared_ptr&) noexcept = default;\n \n       template<typename _Tp1>\n-\tshared_ptr&\n+\t_Assignable<_Tp1*>\n \toperator=(const shared_ptr<_Tp1>& __r) noexcept\n \t{\n \t  this->__shared_ptr<_Tp>::operator=(__r);\n@@ -301,15 +305,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       template<class _Tp1>\n-\tshared_ptr&\n+\t_Assignable<_Tp1*>\n \toperator=(shared_ptr<_Tp1>&& __r) noexcept\n \t{\n \t  this->__shared_ptr<_Tp>::operator=(std::move(__r));\n \t  return *this;\n \t}\n \n       template<typename _Tp1, typename _Del>\n-\tshared_ptr&\n+\t_Assignable<typename unique_ptr<_Tp1, _Del>::pointer>\n \toperator=(std::unique_ptr<_Tp1, _Del>&& __r)\n \t{\n \t  this->__shared_ptr<_Tp>::operator=(std::move(__r));"}, {"sha": "4ae26684dbe03b2b524373f6b16d5dd640cbe90a", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7663cae227b8337bbcf3355698b2aa43cb1a5f70/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7663cae227b8337bbcf3355698b2aa43cb1a5f70/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=7663cae227b8337bbcf3355698b2aa43cb1a5f70", "patch": "@@ -873,6 +873,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tusing _Convertible\n \t  = typename enable_if<is_convertible<_Ptr, _Tp*>::value>::type;\n \n+      template<typename _Ptr>\n+\tusing _Assignable = typename\n+\t  enable_if<is_convertible<_Ptr, _Tp*>::value, __shared_ptr&>::type;\n+\n     public:\n       typedef _Tp   element_type;\n \n@@ -983,7 +987,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr __shared_ptr(nullptr_t) noexcept : __shared_ptr() { }\n \n       template<typename _Tp1>\n-\t__shared_ptr&\n+\t_Assignable<_Tp1*>\n \toperator=(const __shared_ptr<_Tp1, _Lp>& __r) noexcept\n \t{\n \t  _M_ptr = __r._M_ptr;\n@@ -1009,15 +1013,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       template<class _Tp1>\n-\t__shared_ptr&\n+\t_Assignable<_Tp1*>\n \toperator=(__shared_ptr<_Tp1, _Lp>&& __r) noexcept\n \t{\n \t  __shared_ptr(std::move(__r)).swap(*this);\n \t  return *this;\n \t}\n \n       template<typename _Tp1, typename _Del>\n-\t__shared_ptr&\n+\t_Assignable<typename unique_ptr<_Tp1, _Del>::pointer>\n \toperator=(std::unique_ptr<_Tp1, _Del>&& __r)\n \t{\n \t  __shared_ptr(std::move(__r)).swap(*this);\n@@ -1029,7 +1033,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { __shared_ptr().swap(*this); }\n \n       template<typename _Tp1>\n-\tvoid\n+\t_Convertible<_Tp1*>\n \treset(_Tp1* __p) // _Tp1 must be complete.\n \t{\n \t  // Catch self-reset errors.\n@@ -1038,12 +1042,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Tp1, typename _Deleter>\n-\tvoid\n+\t_Convertible<_Tp1*>\n \treset(_Tp1* __p, _Deleter __d)\n \t{ __shared_ptr(__p, __d).swap(*this); }\n \n       template<typename _Tp1, typename _Deleter, typename _Alloc>\n-\tvoid\n+\t_Convertible<_Tp1*>\n         reset(_Tp1* __p, _Deleter __d, _Alloc __a)\n         { __shared_ptr(__p, __d, std::move(__a)).swap(*this); }\n "}, {"sha": "d79af047ea93065209d8ac2f77fdb74ee49525ae", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/assign/sfinae.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7663cae227b8337bbcf3355698b2aa43cb1a5f70/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fassign%2Fsfinae.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7663cae227b8337bbcf3355698b2aa43cb1a5f70/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fassign%2Fsfinae.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fassign%2Fsfinae.cc?ref=7663cae227b8337bbcf3355698b2aa43cb1a5f70", "patch": "@@ -0,0 +1,75 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <memory>\n+\n+template<typename T, typename From>\n+constexpr bool can_assign()\n+{ return std::is_assignable<std::shared_ptr<T>, From>::value; }\n+\n+struct Base { };\n+struct Derived : Base { };\n+\n+// Positive cases:\n+\n+static_assert( can_assign<const void, const std::shared_ptr<void>&>(),\n+    \"void* convertible to const void*\");\n+static_assert( can_assign<const void, std::shared_ptr<void>&&>(),\n+    \"void* convertible to const void*\");\n+static_assert( can_assign<const int, std::shared_ptr<int>>(),\n+    \"int* convertible to const int*\");\n+static_assert( can_assign<Base, std::shared_ptr<Derived>>(),\n+    \"Derived* convertible to Base*\");\n+static_assert( can_assign<const Base, std::shared_ptr<Derived>>(),\n+    \"Derived* convertible to const Base*\");\n+\n+// Negative cases:\n+\n+static_assert( !can_assign<int, const std::shared_ptr<void>&>(),\n+    \"void* not convertible to int*\");\n+static_assert( !can_assign<int, std::shared_ptr<void>&&>(),\n+    \"void* not convertible to int*\");\n+\n+static_assert( !can_assign<int, const std::shared_ptr<const int>&>(),\n+    \"const int* not convertible to int*\");\n+static_assert( !can_assign<int, std::shared_ptr<const int>&&>(),\n+    \"const int* not convertible to int*\");\n+\n+static_assert( !can_assign<int, const std::shared_ptr<long>&>(),\n+    \"long* not convertible to int*\");\n+static_assert( !can_assign<int, std::shared_ptr<long>&&>(),\n+    \"long* not convertible to int*\");\n+\n+static_assert( !can_assign<int, std::unique_ptr<long>&&>(),\n+    \"unique_ptr<long>::pointer not convertible to int*\");\n+\n+static_assert( !can_assign<Derived, const std::shared_ptr<Base>&>(),\n+    \"Base* not convertible to Derived*\");\n+static_assert( !can_assign<int, std::shared_ptr<long>&&>(),\n+    \"Base* not convertible to Derived*\");\n+static_assert( !can_assign<Derived, std::unique_ptr<Base>&&>(),\n+    \"unique_ptr<Base>::pointer not convertible to Derived*\");\n+\n+struct Deleter {\n+  using pointer = void*;\n+  void operator()(pointer) const { }\n+};\n+\n+static_assert( !can_assign<Derived, std::unique_ptr<Derived, Deleter>&&>(),\n+    \"unique_ptr<Derived, Deleter>::pointer not convertible to Derived*\");"}, {"sha": "96f07b5549c0b7f68943059fdd06863c1acee86c", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/assign/shared_ptr_neg.cc", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7663cae227b8337bbcf3355698b2aa43cb1a5f70/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fassign%2Fshared_ptr_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7663cae227b8337bbcf3355698b2aa43cb1a5f70/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fassign%2Fshared_ptr_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fassign%2Fshared_ptr_neg.cc?ref=7663cae227b8337bbcf3355698b2aa43cb1a5f70", "patch": "@@ -28,24 +28,10 @@ struct B { };\n // 20.6.6.2.3 shared_ptr assignment [util.smartptr.shared.assign]\n \n // Assignment from incompatible shared_ptr<Y>\n-int\n+void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   std::shared_ptr<A> a;\n   std::shared_ptr<B> b;\n-  a = b;                      // { dg-error \"here\" }\n-\n-  return 0;\n-}\n-\n-int \n-main()\n-{\n-  test01();\n-  return 0;\n+  a = b;                      // { dg-error \"no match\" }\n }\n-// { dg-error \"In instantiation\" \"\" { target *-*-* } 0 }\n-// { dg-error \"cannot convert\" \"\" { target *-*-* } 0 }\n-// { dg-error \"required from\" \"\" { target *-*-* } 0 }"}, {"sha": "c58c8421a3f5f4ed43a551e71d287fecd78a8a35", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/43820_neg.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7663cae227b8337bbcf3355698b2aa43cb1a5f70/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7663cae227b8337bbcf3355698b2aa43cb1a5f70/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc?ref=7663cae227b8337bbcf3355698b2aa43cb1a5f70", "patch": "@@ -32,8 +32,6 @@ void test01()\n {\n   X* px = 0;\n   std::shared_ptr<X> p1(px);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 893 }\n-\n   std::shared_ptr<X> p9(ap());  // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 307 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 0 }\n }"}, {"sha": "0cadf25bffbe51bff46a9d87751e7498ac3b1b0b", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/void_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7663cae227b8337bbcf3355698b2aa43cb1a5f70/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7663cae227b8337bbcf3355698b2aa43cb1a5f70/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc?ref=7663cae227b8337bbcf3355698b2aa43cb1a5f70", "patch": "@@ -24,5 +24,5 @@\n void test01()\n {\n   std::shared_ptr<void> p((void*)nullptr);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 892 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 0 }\n }"}, {"sha": "f75530f4247a76647ad91ebcc5a0b74a8383a954", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/modifiers/reset_sfinae.cc", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7663cae227b8337bbcf3355698b2aa43cb1a5f70/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fmodifiers%2Freset_sfinae.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7663cae227b8337bbcf3355698b2aa43cb1a5f70/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fmodifiers%2Freset_sfinae.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fmodifiers%2Freset_sfinae.cc?ref=7663cae227b8337bbcf3355698b2aa43cb1a5f70", "patch": "@@ -0,0 +1,92 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <memory>\n+\n+template<typename T, typename Args, typename = void>\n+  struct resettable\n+  : std::false_type\n+  { };\n+\n+template<typename... T> struct type_list { };\n+\n+template<typename T, typename... Args>\n+  using reset_result\n+    = decltype(std::shared_ptr<T>{}.reset(std::declval<Args>()...));\n+\n+template<typename T, typename... Args>\n+  struct resettable<T, type_list<Args...>, reset_result<T, Args...>>\n+  : std::true_type\n+  { };\n+\n+template<typename T, typename... Args>\n+constexpr bool can_reset()\n+{ return resettable<T, type_list<Args...>>::value; }\n+\n+template<typename T>\n+struct Deleter {\n+  void operator()(T*) const;\n+};\n+\n+template<typename T>\n+using Alloc = std::allocator<T>;\n+\n+struct Base { };\n+struct Derived : Base { };\n+\n+// Positive cases:\n+\n+static_assert( can_reset<const void, void*>(),\n+    \"void* convertible to const void*\");\n+static_assert( can_reset<const int, int*>(),\n+    \"int* convertible to const int*\");\n+static_assert( can_reset<Base, Derived*>(),\n+    \"Derived* convertible to Base*\");\n+static_assert( can_reset<const Base, Derived*>(),\n+    \"Derived* convertible to const Base*\");\n+\n+// Negative cases:\n+\n+static_assert( !can_reset<int, void*>(),\n+    \"void* not convertible to int*\");\n+static_assert( !can_reset<int, void*, Deleter<int>>(),\n+    \"void* not convertible to int*\");\n+static_assert( !can_reset<int, void*, Deleter<int>, Alloc<int>>(),\n+    \"void* not convertible to int*\");\n+\n+static_assert( !can_reset<int, const int*>(),\n+    \"const int* not convertible to int*\");\n+static_assert( !can_reset<int, const int*, Deleter<int>>(),\n+    \"const int* not convertible to int*\");\n+static_assert( !can_reset<int, const int*, Deleter<int>, Alloc<int>>(),\n+    \"const int* not convertible to int*\");\n+\n+static_assert( !can_reset<int, long*>(),\n+    \"long* not convertible to int*\");\n+static_assert( !can_reset<int, long*, Deleter<int>>(),\n+    \"long* not convertible to int*\");\n+static_assert( !can_reset<int, long*, Deleter<int>, Alloc<int>>(),\n+    \"long* not convertible to int*\");\n+\n+static_assert( !can_reset<Derived, Base*>(),\n+    \"Base* not convertible to Derived*\");\n+static_assert( !can_reset<Derived, Base*, Deleter<int>>(),\n+    \"Base* not convertible to Derived*\");\n+static_assert( !can_reset<Derived, Base*, Deleter<int>, Alloc<int>>(),\n+    \"Base* not convertible to Derived*\");"}]}