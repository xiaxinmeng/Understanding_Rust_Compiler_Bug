{"sha": "ff352ceaa015c25cba359d3261199e145a688872", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYzNTJjZWFhMDE1YzI1Y2JhMzU5ZDMyNjExOTllMTQ1YTY4ODg3Mg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-16T21:18:52Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-16T21:18:52Z"}, "message": "Initial revision\n\nFrom-SVN: r11543", "tree": {"sha": "ecd243335ce622ea5d6625ef053c29c903bb0eef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecd243335ce622ea5d6625ef053c29c903bb0eef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff352ceaa015c25cba359d3261199e145a688872", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff352ceaa015c25cba359d3261199e145a688872", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff352ceaa015c25cba359d3261199e145a688872", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff352ceaa015c25cba359d3261199e145a688872/comments", "author": null, "committer": null, "parents": [{"sha": "e211a9d8c6149eadbdc94def802280ade5d26931", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e211a9d8c6149eadbdc94def802280ade5d26931", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e211a9d8c6149eadbdc94def802280ade5d26931"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "ee6042ebb4369f2885e9b037bfa5b9d46ab146d3", "filename": "gcc/config/alpha/linux.h", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff352ceaa015c25cba359d3261199e145a688872/gcc%2Fconfig%2Falpha%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff352ceaa015c25cba359d3261199e145a688872/gcc%2Fconfig%2Falpha%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Flinux.h?ref=ff352ceaa015c25cba359d3261199e145a688872", "patch": "@@ -0,0 +1,70 @@\n+/* Definitions of target machine for GNU compiler, for Alpha Linux,\n+   using ECOFF.\n+   Copyright (C) 1996 Free Software Foundation, Inc.\n+   Contributed by Bob Manson.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT (3 | MASK_GAS)\n+\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (Linux/Alpha)\");\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"\\\n+-D__alpha -D__alpha__ -D__linux__ -D__linux -D_LONGLONG -Dlinux -Dunix \\\n+-Asystem(linux) -Acpu(alpha) -Amachine(alpha)\"\n+\n+/* We don't actually need any of these; the MD_ vars are ignored\n+   anyway for cross-compilers, and the other specs won't get picked up\n+   because the user is supposed to do ld -r (hmm, perhaps that should be\n+   the default).  In any case, setting them thus will catch some\n+   common user errors. */\n+\n+#undef MD_EXEC_PREFIX\n+#undef MD_STARTFILE_PREFIX\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \"%{pg:-lgmon} %{pg:-lc_p} %{!pg:-lc}\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"-G 8 %{O*:-O3} %{!O*:-O1}\"\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC \"-nocpp\"\n+\n+/* Can't do stabs */\n+#undef SDB_DEBUGGING_INFO\n+\n+/* Prefer dbx.  */\n+#undef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+\n+#undef FUNCTION_PROFILER\n+#define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\\\n+    do {\t\t\t\t\t\t\t\\\n+\tfputs (\"\\tlda $27,_mcount\\n\", (FILE));\t\t\t\\\n+\tfputs (\"\\tjsr $26,($27),_mcount\\n\", (FILE));\t\t\\\n+\tfputs (\"\\tldgp $29,0($26)\\n\", (FILE));\t\t\t\\\n+    } while (0);\n+\n+/* Generate calls to memcpy, etc., not bcopy, etc. */\n+#define TARGET_MEM_FUNCTIONS\n+\n+/* Show that we need a GP when profiling.  */\n+#define TARGET_PROFILING_NEEDS_GP"}]}