{"sha": "42aa1173f256069d5933b9a3ed4a8c5c99871ca7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJhYTExNzNmMjU2MDY5ZDU5MzNiOWEzZWQ0YThjNWM5OTg3MWNhNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-11-28T10:01:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-11-28T10:01:30Z"}, "message": "gimple-ssa-sprintf.c (build_intmax_type_nodes): Look at UINTMAX_TYPE rather than SIZE_TYPE.\n\n\t* gimple-ssa-sprintf.c (build_intmax_type_nodes): Look at\n\tUINTMAX_TYPE rather than SIZE_TYPE.  Add gcc_unreachable if\n\tintmax_t couldn't be determined.\n\t(format_integer): Make {,u}intmax_type_node no longer static,\n\tinitialize them only when needed.  For z and t use\n\tsigned_or_unsigned_type_for instead of assuming size_t and\n\tptrdiff_t have the same precision.\n\nFrom-SVN: r242911", "tree": {"sha": "26baba16e6a79b82eaec8b17b88da22d38bb2964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26baba16e6a79b82eaec8b17b88da22d38bb2964"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42aa1173f256069d5933b9a3ed4a8c5c99871ca7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42aa1173f256069d5933b9a3ed4a8c5c99871ca7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42aa1173f256069d5933b9a3ed4a8c5c99871ca7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42aa1173f256069d5933b9a3ed4a8c5c99871ca7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df8391b4f574aa9b0e3f5be2f4d0481c5a2cc1c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df8391b4f574aa9b0e3f5be2f4d0481c5a2cc1c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df8391b4f574aa9b0e3f5be2f4d0481c5a2cc1c1"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "73c23fc3a585a0a519fb5c354f6d1a5158d2ca20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42aa1173f256069d5933b9a3ed4a8c5c99871ca7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42aa1173f256069d5933b9a3ed4a8c5c99871ca7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42aa1173f256069d5933b9a3ed4a8c5c99871ca7", "patch": "@@ -1,5 +1,13 @@\n 2016-11-28  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gimple-ssa-sprintf.c (build_intmax_type_nodes): Look at\n+\tUINTMAX_TYPE rather than SIZE_TYPE.  Add gcc_unreachable if\n+\tintmax_t couldn't be determined.\n+\t(format_integer): Make {,u}intmax_type_node no longer static,\n+\tinitialize them only when needed.  For z and t use\n+\tsigned_or_unsigned_type_for instead of assuming size_t and\n+\tptrdiff_t have the same precision.\n+\n \tPR lto/78211\n \t* ipa-icf.h (sem_item_optimizer): Add m_classes_vec member.\n \t* ipa-icf.c (sem_item_optimizer::sem_item_optimizer): Initialize"}, {"sha": "71014ebcb6cb7b7296f64dabdfa5afa8926df522", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42aa1173f256069d5933b9a3ed4a8c5c99871ca7/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42aa1173f256069d5933b9a3ed4a8c5c99871ca7/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=42aa1173f256069d5933b9a3ed4a8c5c99871ca7", "patch": "@@ -733,23 +733,23 @@ format_percent (const conversion_spec &, tree)\n }\n \n \n-/* Ugh.  Compute intmax_type_node and uintmax_type_node the same way\n-   lto/lto-lang.c does it.  This should be available in tree.h.  */\n+/* Compute intmax_type_node and uintmax_type_node similarly to how\n+   tree.c builds size_type_node.  */\n \n static void\n build_intmax_type_nodes (tree *pintmax, tree *puintmax)\n {\n-  if (strcmp (SIZE_TYPE, \"unsigned int\") == 0)\n+  if (strcmp (UINTMAX_TYPE, \"unsigned int\") == 0)\n     {\n       *pintmax = integer_type_node;\n       *puintmax = unsigned_type_node;\n     }\n-  else if (strcmp (SIZE_TYPE, \"long unsigned int\") == 0)\n+  else if (strcmp (UINTMAX_TYPE, \"long unsigned int\") == 0)\n     {\n       *pintmax = long_integer_type_node;\n       *puintmax = long_unsigned_type_node;\n     }\n-  else if (strcmp (SIZE_TYPE, \"long long unsigned int\") == 0)\n+  else if (strcmp (UINTMAX_TYPE, \"long long unsigned int\") == 0)\n     {\n       *pintmax = long_long_integer_type_node;\n       *puintmax = long_long_unsigned_type_node;\n@@ -762,12 +762,14 @@ build_intmax_type_nodes (tree *pintmax, tree *puintmax)\n \t    char name[50];\n \t    sprintf (name, \"__int%d unsigned\", int_n_data[i].bitsize);\n \n-\t    if (strcmp (name, SIZE_TYPE) == 0)\n+\t    if (strcmp (name, UINTMAX_TYPE) == 0)\n \t      {\n \t        *pintmax = int_n_trees[i].signed_type;\n \t        *puintmax = int_n_trees[i].unsigned_type;\n+\t\treturn;\n \t      }\n \t  }\n+      gcc_unreachable ();\n     }\n }\n \n@@ -851,15 +853,8 @@ format_pointer (const conversion_spec &spec, tree arg)\n static fmtresult\n format_integer (const conversion_spec &spec, tree arg)\n {\n-  /* These are available as macros in the C and C++ front ends but,\n-     sadly, not here.  */\n-  static tree intmax_type_node;\n-  static tree uintmax_type_node;\n-\n-  /* Initialize the intmax nodes above the first time through here.  */\n-  if (!intmax_type_node)\n-    build_intmax_type_nodes (&intmax_type_node, &uintmax_type_node);\n-\n+  tree intmax_type_node;\n+  tree uintmax_type_node;\n   /* Set WIDTH and PRECISION to either the values in the format\n      specification or to zero.  */\n   int width = spec.have_width ? spec.width : 0;\n@@ -909,19 +904,20 @@ format_integer (const conversion_spec &spec, tree arg)\n       break;\n \n     case FMT_LEN_z:\n-      dirtype = sign ? ptrdiff_type_node : size_type_node;\n+      dirtype = signed_or_unsigned_type_for (!sign, size_type_node);\n       break;\n \n     case FMT_LEN_t:\n-      dirtype = sign ? ptrdiff_type_node : size_type_node;\n+      dirtype = signed_or_unsigned_type_for (!sign, ptrdiff_type_node);\n       break;\n \n     case FMT_LEN_j:\n+      build_intmax_type_nodes (&intmax_type_node, &uintmax_type_node);\n       dirtype = sign ? intmax_type_node : uintmax_type_node;\n       break;\n \n     default:\n-\treturn fmtresult ();\n+      return fmtresult ();\n     }\n \n   /* The type of the argument to the directive, either deduced from"}]}