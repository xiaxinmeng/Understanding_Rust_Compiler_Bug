{"sha": "d863ba23fb16122bb0547b0c678173be0d98f43c", "node_id": "C_kwDOANBUbNoAKGQ4NjNiYTIzZmIxNjEyMmJiMDU0N2IwYzY3ODE3M2JlMGQ5OGY0M2M", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-05-19T16:54:38Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-05-19T16:54:38Z"}, "message": "PR middle-end/98865: Expand X*Y as X&-Y when Y is [0,1].\n\nThe patch is a revised solution for PR middle-end/98865 incorporating\nthe feedback/suggestions from Richard Biener's review here:\nhttps://gcc.gnu.org/pipermail/gcc-patches/2022-May/593928.html\nMost significantly, this patch now performs the transformation/optimization\nduring RTL expansion, where the target's rtx_costs can be used to determine\nwhether the original multiplication (that may potentially be implemented by\na shift or lea) is cheaper than a negation and a bit-wise and.\n\nPreviously the expression (x>>63)*y would be compiled with -O2 as\n        shrq    $63, %rdi\n        movq    %rdi, %rax\n        imulq   %rsi, %rax\n\nbut with this patch now produces:\n        sarq    $63, %rdi\n        movq    %rdi, %rax\n        andq    %rsi, %rax\n\nLikewise the expression (x>>63)*135 [that appears in a hot-spot of the\nBotan AES-128 benchmark] was previously:\n\n        shrq    $63, %rdi\n        leaq    (%rdi,%rdi,8), %rdx\n        movq    %rdx, %rax\n        salq    $4, %rax\n        subq    %rdx, %rax\n\nnow becomes:\n        movq    %rdi, %rax\n        sarq    $63, %rax\n        andl    $135, %eax\n\n2022-05-19  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR middle-end/98865\n\t* expr.cc (expand_expr_real_2) [MULT_EXPR]:  Expand X*Y as X&Y\n\twhen both X and Y are [0, 1], X*Y as X&-Y when Y is [0,1] and\n\tlikewise X*Y as -X&Y when X is [0,1] using tree_nonzero_bits.\n\ngcc/testsuite/ChangeLog\n\tPR middle-end/98865\n\t* gcc.target/i386/pr98865.c: New test case.", "tree": {"sha": "f8e5d507bac668e8cb40e94aae74975aef76a675", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8e5d507bac668e8cb40e94aae74975aef76a675"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d863ba23fb16122bb0547b0c678173be0d98f43c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d863ba23fb16122bb0547b0c678173be0d98f43c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d863ba23fb16122bb0547b0c678173be0d98f43c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d863ba23fb16122bb0547b0c678173be0d98f43c/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd427e17c00f2a5a6b97f370c9a25a6e6a9af143", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd427e17c00f2a5a6b97f370c9a25a6e6a9af143", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd427e17c00f2a5a6b97f370c9a25a6e6a9af143"}], "stats": {"total": 86, "additions": 86, "deletions": 0}, "files": [{"sha": "7197996cec7d24dd43d60928d5618b32b77677a1", "filename": "gcc/expr.cc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d863ba23fb16122bb0547b0c678173be0d98f43c/gcc%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d863ba23fb16122bb0547b0c678173be0d98f43c/gcc%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.cc?ref=d863ba23fb16122bb0547b0c678173be0d98f43c", "patch": "@@ -9541,6 +9541,38 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t}\n \n       expand_operands (treeop0, treeop1, subtarget, &op0, &op1, EXPAND_NORMAL);\n+\n+      /* Expand X*Y as X&-Y when Y must be zero or one.  */\n+      if (SCALAR_INT_MODE_P (mode))\n+\t{\n+\t  bool bit0_p = tree_nonzero_bits (treeop0) == 1;\n+\t  bool bit1_p = tree_nonzero_bits (treeop1) == 1;\n+\n+\t  /* Expand X*Y as X&Y when both X and Y must be zero or one.  */\n+\t  if (bit0_p && bit1_p)\n+\t    return REDUCE_BIT_FIELD (expand_and (mode, op0, op1, target));\n+\n+\t  if (bit0_p || bit1_p)\n+\t    {\n+\t      bool speed = optimize_insn_for_speed_p ();\n+\t      int cost = add_cost (speed, mode) + neg_cost (speed, mode);\n+\t      struct algorithm algorithm;\n+\t      enum mult_variant variant;\n+\t      if (CONST_INT_P (op1)\n+\t\t  ? !choose_mult_variant (mode, INTVAL (op1),\n+\t\t\t\t\t  &algorithm, &variant, cost)\n+\t\t  : cost < mul_cost (speed, mode))\n+\t\t{\n+\t\t  target = bit0_p ? expand_and (mode, negate_rtx (mode, op0),\n+\t\t\t\t\t\top1, target)\n+\t\t\t\t  : expand_and (mode, op0,\n+\t\t\t\t\t\tnegate_rtx (mode, op1),\n+\t\t\t\t\t\ttarget);\n+\t\t  return REDUCE_BIT_FIELD (target);\n+\t\t}\n+\t    }\n+\t}\n+\n       return REDUCE_BIT_FIELD (expand_mult (mode, op0, op1, target, unsignedp));\n \n     case TRUNC_MOD_EXPR:"}, {"sha": "d047c4bc2acb5853d9efe65bedc63a61d76e1506", "filename": "gcc/testsuite/gcc.target/i386/pr98865.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d863ba23fb16122bb0547b0c678173be0d98f43c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98865.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d863ba23fb16122bb0547b0c678173be0d98f43c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98865.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98865.c?ref=d863ba23fb16122bb0547b0c678173be0d98f43c", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+#if __SIZEOF_INT__ == 4\n+unsigned int foo(unsigned int a, unsigned int b)\n+{\n+  return (a >> 31) * b;\n+}\n+\n+int bar(int a, int b)\n+{\n+  return -(a >> 31) * b;\n+}\n+\n+int baz(int a, int b)\n+{\n+  int c = a >> 31;\n+  int d = -c;\n+  return d * b;\n+}\n+\n+unsigned int pin(int a, unsigned int b)\n+{\n+  unsigned int t = a & 1;\n+  return t * b;\n+}\n+#endif\n+\n+#if __SIZEOF_LONG_LONG__ == 8\n+unsigned long long fool(unsigned long long a, unsigned long long b)\n+{\n+  return (a >> 63) * b;\n+}\n+\n+long long barl (long long a, long long b)\n+{\n+  return -(a >> 63) * b;\n+}\n+\n+long long bazl (long long a, long long b)\n+{\n+  long long c = a >> 63;\n+  long long d = -c;\n+  return d * b;\n+}\n+\n+unsigned long long pinl(long long a, unsigned long long b)\n+{\n+  unsigned long long t = a & 1;\n+  return t * b;\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"imul\" } } */"}]}