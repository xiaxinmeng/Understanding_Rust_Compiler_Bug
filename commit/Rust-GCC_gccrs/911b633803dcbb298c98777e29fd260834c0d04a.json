{"sha": "911b633803dcbb298c98777e29fd260834c0d04a", "node_id": "C_kwDOANBUbNoAKDkxMWI2MzM4MDNkY2JiMjk4Yzk4Nzc3ZTI5ZmQyNjA4MzRjMGQwNGE", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-11-23T01:08:55Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-11-23T09:55:47Z"}, "message": "Canonicalize &MEM[ssa_n, CST] to ssa_n p+ CST in fold_stmt_1\n\nThis is a new version of the patch to fix PR 102216.\nInstead of doing the canonicalization inside forwprop, Richi\nmentioned we should do it inside fold_stmt_1 and that is what\nthis patch does.\n\n\tPR tree-optimization/102216\n\ngcc/ChangeLog:\n\n\t* gimple-fold.c (fold_stmt_1): Add canonicalization\n\tof \"&MEM[ssa_n, CST]\" to \"ssa_n p+ CST\", note this\n\tcan only be done if !in_place.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/tree-ssa/pr102216-1.C: New test.\n\t* g++.dg/tree-ssa/pr102216-2.C: New test.", "tree": {"sha": "4be00424c1588251e016475423e78b35071d53b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4be00424c1588251e016475423e78b35071d53b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/911b633803dcbb298c98777e29fd260834c0d04a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/911b633803dcbb298c98777e29fd260834c0d04a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/911b633803dcbb298c98777e29fd260834c0d04a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/911b633803dcbb298c98777e29fd260834c0d04a/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e9b973bd60185f221222022f56db7df3d92250e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e9b973bd60185f221222022f56db7df3d92250e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e9b973bd60185f221222022f56db7df3d92250e"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "73f090bb14c2a1e5fea9ef623313a526e2ff2eb6", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/911b633803dcbb298c98777e29fd260834c0d04a/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/911b633803dcbb298c98777e29fd260834c0d04a/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=911b633803dcbb298c98777e29fd260834c0d04a", "patch": "@@ -6061,6 +6061,28 @@ fold_stmt_1 (gimple_stmt_iterator *gsi, bool inplace, tree (*valueize) (tree))\n \t  if (REFERENCE_CLASS_P (*lhs)\n \t      && maybe_canonicalize_mem_ref_addr (lhs))\n \t    changed = true;\n+\t  /* Canonicalize &MEM[ssa_n, CST] to ssa_n p+ CST.\n+\t     This cannot be done in maybe_canonicalize_mem_ref_addr\n+\t     as the gimple now has two operands rather than one.\n+\t     The same reason why this can't be done in\n+\t     maybe_canonicalize_mem_ref_addr is the same reason why\n+\t     this can't be done inplace.  */\n+\t  if (!inplace && TREE_CODE (*rhs) == ADDR_EXPR)\n+\t    {\n+\t      tree inner = TREE_OPERAND (*rhs, 0);\n+\t      if (TREE_CODE (inner) == MEM_REF\n+\t\t  && TREE_CODE (TREE_OPERAND (inner, 0)) == SSA_NAME\n+\t\t  && TREE_CODE (TREE_OPERAND (inner, 1)) == INTEGER_CST)\n+\t\t{\n+\t\t  tree ptr = TREE_OPERAND (inner, 0);\n+\t\t  tree addon = TREE_OPERAND (inner, 1);\n+\t\t  addon = fold_convert (sizetype, addon);\n+\t\t  gimple_assign_set_rhs_with_ops (gsi, POINTER_PLUS_EXPR,\n+\t\t\t\t\t\t  ptr, addon);\n+\t\t  changed = true;\n+\t\t  stmt = gsi_stmt (*gsi);\n+\t\t}\n+\t    }\n \t}\n       else\n \t{"}, {"sha": "21f7f6797ffb7c28a241fcdfd6f5a766f346882e", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr102216-1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/911b633803dcbb298c98777e29fd260834c0d04a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr102216-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/911b633803dcbb298c98777e29fd260834c0d04a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr102216-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr102216-1.C?ref=911b633803dcbb298c98777e29fd260834c0d04a", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+void link_error ();\n+void g ()\n+{\n+  const char **language_names;\n+\n+  language_names = new const char *[6];\n+\n+  const char **language_names_p = language_names;\n+\n+  language_names_p++;\n+  language_names_p++;\n+  language_names_p++;\n+\n+  if ( (language_names_p) - (language_names+3) != 0)\n+    link_error();\n+  delete[] language_names;\n+}\n+/* We should have removed the link_error on the gimple level as GCC should\n+   be able to tell that language_names_p is the same as language_names+3.  */\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\" } } */"}, {"sha": "8d351a9bad08ddaa68fa7ce0434ebe8dad7012b2", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr102216-2.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/911b633803dcbb298c98777e29fd260834c0d04a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr102216-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/911b633803dcbb298c98777e29fd260834c0d04a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr102216-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr102216-2.C?ref=911b633803dcbb298c98777e29fd260834c0d04a", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-options \"-O2 -Wall\" } */\n+#include <algorithm>\n+\n+static inline bool\n+compare_cstrings (const char *str1, const char *str2)\n+{\n+  return str1 < str2;\n+}\n+\n+void\n+add_set_language_command ()\n+{\n+  static const char **language_names;\n+\n+  language_names = new const char *[6];\n+\n+  language_names[0] = \"auto\";\n+  language_names[1] = \"local\";\n+  language_names[2] = \"unknown\";\n+\n+  const char **language_names_p = language_names;\n+  /* language_names_p == &language_names[0].  */\n+  language_names_p++;\n+  /* language_names_p == &language_names[1].  */\n+  language_names_p++;\n+  /* language_names_p == &language_names[2].  */\n+  language_names_p++;\n+  /* language_names_p == &language_names[3].  */\n+\n+  const char **sort_begin;\n+\n+  if (0)\n+    sort_begin = &language_names[3];\n+  else\n+    sort_begin = language_names_p;\n+\n+  language_names[3] = \"\";\n+  language_names[4] = \"\";\n+  language_names[5] = NULL;\n+\n+  /* There should be no warning associated with this std::sort as\n+     sort_begin != &language_names[5] and GCC should be able to figure\n+     that out.  */\n+  std::sort (sort_begin, &language_names[5], compare_cstrings);\n+}"}]}