{"sha": "4fa26a60791ec314128a9683fd4d657b251d0268", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZhMjZhNjA3OTFlYzMxNDEyOGE5NjgzZmQ0ZDY1N2IyNTFkMDI2OA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-05-31T13:23:32Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-05-31T13:23:32Z"}, "message": "flags.h (flag_wrapv): New flag controlling overflow semantics.\n\n\n\t* flags.h (flag_wrapv): New flag controlling overflow semantics.\n\t* toplev.c (flag_wrapv): Declare the variable with default false.\n\t(lang_independent_options): New option \"-fwrapv\" to set the above.\n\n\t* fold-const.c (extract_muldiv_1): Disable optimization of (2*x)/2\n\tas x, when signed arithmetic overflow wraps around.\n\t(fold): Optimize \"-A - B\" as \"-B - A\" if overflow wraps around.\n\t* loop.c (basic_induction_var): Ignore BIVs that rely on undefined\n\toverflow when flag_wrapv is true.\n\n\t* java/lang.c (java_init_options): Prescribe wrap-around two's\n\tcomplement arithmetic overflow by setting flag_wrapv.\n\n\t* doc/invoke.texi: Document new -fwrapv command line option.\n\t* doc/c-tree.texi: Mention that the overflow semantics of\n\tNEGATE_EXPR, PLUS_EXPR, MINUS_EXPR and MULT_EXPR is dependent\n\tupon both flag_wrapv and flag_trapv.\n\n\t* gcc.dg/fwrapv-1.c: New test case.\n\t* gcc.dg/fwrapv-2.c: New test case.\n\n\t* libjava.lang/Overflow.java: New test.\n\t* libjava.lang/Overflow.out: New file.\n\nFrom-SVN: r67270", "tree": {"sha": "ae8dcbb261aaadbfa874d60f1fccd8dd93248b50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae8dcbb261aaadbfa874d60f1fccd8dd93248b50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fa26a60791ec314128a9683fd4d657b251d0268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fa26a60791ec314128a9683fd4d657b251d0268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fa26a60791ec314128a9683fd4d657b251d0268", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fa26a60791ec314128a9683fd4d657b251d0268/comments", "author": null, "committer": null, "parents": [{"sha": "82a2669ea738ba4bec4112408a16082e7356e7e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82a2669ea738ba4bec4112408a16082e7356e7e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82a2669ea738ba4bec4112408a16082e7356e7e1"}], "stats": {"total": 139, "additions": 137, "deletions": 2}, "files": [{"sha": "061d593a65877f615d89e6cb83907e011bef8de9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa26a60791ec314128a9683fd4d657b251d0268/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa26a60791ec314128a9683fd4d657b251d0268/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4fa26a60791ec314128a9683fd4d657b251d0268", "patch": "@@ -1,3 +1,20 @@\n+2003-05-31  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* flags.h (flag_wrapv): New flag controlling overflow semantics.\n+\t* toplev.c (flag_wrapv): Declare the variable with default false.\n+\t(lang_independent_options): New option \"-fwrapv\" to set the above.\n+\n+\t* fold-const.c (extract_muldiv_1): Disable optimization of (2*x)/2 \n+\tas x, when signed arithmetic overflow wraps around.\n+\t(fold): Optimize \"-A - B\" as \"-B - A\" if overflow wraps around.\n+\t* loop.c (basic_induction_var): Ignore BIVs that rely on undefined\n+\toverflow when flag_wrapv is true.\n+\n+\t* doc/invoke.texi: Document new -fwrapv command line option.\n+\t* doc/c-tree.texi: Mention that the overflow semantics of\n+\tNEGATE_EXPR, PLUS_EXPR, MINUS_EXPR and MULT_EXPR is dependent\n+\tupon both flag_wrapv and flag_trapv.\n+\n 2003-05-31  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* doc/install.texi (mips-sgi-irix5): Add missing"}, {"sha": "48e7e120cb05b9da928ffbd260492b456cacad4a", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa26a60791ec314128a9683fd4d657b251d0268/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa26a60791ec314128a9683fd4d657b251d0268/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=4fa26a60791ec314128a9683fd4d657b251d0268", "patch": "@@ -1914,6 +1914,9 @@ These nodes represent unary negation of the single operand, for both\n integer and floating-point types.  The type of negation can be\n determined by looking at the type of the expression.\n \n+The behavior of this operation on signed arithmetic overflow is\n+controlled by the @code{flag_wrapv} and @code{flag_trapv} variables.\n+\n @item BIT_NOT_EXPR\n These nodes represent bitwise complement, and will always have integral\n type.  The only operand is the value to be complemented.\n@@ -2067,6 +2070,9 @@ The @code{TRUNC_MOD_EXPR} of two operands @code{a} and @code{b} is\n always @code{a - (a/b)*b} where the division is as if computed by a\n @code{TRUNC_DIV_EXPR}.\n \n+The behavior of these operations on signed arithmetic overflow is\n+controlled by the @code{flag_wrapv} and @code{flag_trapv} variables.\n+\n @item ARRAY_REF\n These nodes represent array accesses.  The first operand is the array;\n the second is the index.  To calculate the address of the memory"}, {"sha": "e3edc0790e7413a5e1800ccb78cf7ca711021c07", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa26a60791ec314128a9683fd4d657b251d0268/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa26a60791ec314128a9683fd4d657b251d0268/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=4fa26a60791ec314128a9683fd4d657b251d0268", "patch": "@@ -680,7 +680,7 @@ in the following sections.\n -fargument-alias  -fargument-noalias @gol\n -fargument-noalias-global  -fleading-underscore @gol\n -ftls-model=@var{model} @gol\n--ftrapv  -fbounds-check}\n+-ftrapv  -fwrapv  -fbounds-check}\n @end table\n \n @menu\n@@ -10850,6 +10850,14 @@ this option defaults to true and false respectively.\n This option generates traps for signed overflow on addition, subtraction,\n multiplication operations.\n \n+@item -fwrapv\n+@opindex fwrapv\n+This option instructs the compiler to assume that signed arithmetic\n+overflow of addition, subtraction and multiplication wraps around\n+using twos-complement representation.  This flag enables some optimzations\n+and disables other.  This option is enabled by default for the Java\n+front-end, as required by the Java language specification.\n+\n @item -fexceptions\n @opindex fexceptions\n Enable exception handling.  Generates extra code needed to propagate"}, {"sha": "c90428816d76b96651d2fb301c1d199fa01f08b8", "filename": "gcc/flags.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa26a60791ec314128a9683fd4d657b251d0268/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa26a60791ec314128a9683fd4d657b251d0268/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=4fa26a60791ec314128a9683fd4d657b251d0268", "patch": "@@ -585,6 +585,9 @@ extern int frame_pointer_needed;\n    for PLUS / SUB / MULT.  */\n extern int flag_trapv;\n \n+/* Nonzero if the signed arithmetic overflow should wrap around.  */\n+extern int flag_wrapv;\n+\n /* Value of the -G xx switch, and whether it was passed or not.  */\n extern unsigned HOST_WIDE_INT g_switch_value;\n extern int g_switch_set;"}, {"sha": "e81e8090cf00207c0bf9fb9e5a0cc9fe82a9fd31", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa26a60791ec314128a9683fd4d657b251d0268/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa26a60791ec314128a9683fd4d657b251d0268/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=4fa26a60791ec314128a9683fd4d657b251d0268", "patch": "@@ -4381,6 +4381,7 @@ extract_muldiv_1 (t, c, code, wide_type)\n \t overflowed.  */\n       if ((! TREE_UNSIGNED (ctype)\n \t   || (TREE_CODE (ctype) == INTEGER_TYPE && TYPE_IS_SIZETYPE (ctype)))\n+\t  && ! flag_wrapv\n \t  && ((code == MULT_EXPR && tcode == EXACT_DIV_EXPR)\n \t      || (tcode == MULT_EXPR\n \t\t  && code != TRUNC_MOD_EXPR && code != CEIL_MOD_EXPR\n@@ -5765,7 +5766,8 @@ fold (expr)\n \treturn fold (build (PLUS_EXPR, type, arg0, TREE_OPERAND (arg1, 0)));\n       /* (-A) - B -> (-B) - A  where B is easily negated and we can swap.  */\n       if (TREE_CODE (arg0) == NEGATE_EXPR\n-\t  && FLOAT_TYPE_P (type)\n+\t  && (FLOAT_TYPE_P (type)\n+\t      || (INTEGRAL_TYPE_P (type) && flag_wrapv && !flag_trapv))\n \t  && negate_expr_p (arg1)\n \t  && (! TREE_SIDE_EFFECTS (arg0) || TREE_CONSTANT (arg1))\n \t  && (! TREE_SIDE_EFFECTS (arg1) || TREE_CONSTANT (arg0)))"}, {"sha": "b41f316c5e20d25e5f995f02087c9741c0ae563c", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa26a60791ec314128a9683fd4d657b251d0268/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa26a60791ec314128a9683fd4d657b251d0268/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=4fa26a60791ec314128a9683fd4d657b251d0268", "patch": "@@ -1,3 +1,8 @@\n+2003-05-31  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* lang.c (java_init_options): Prescribe wrap-around two's\n+\tcomplement arithmetic overflow by setting flag_wrapv.\n+\n 2003-05-29  Roger Sayle  <roger@eyesopen.com>\n \n \t* builtins.c (cos_builtin, sin_builtin, sqrt_builtin): Delete."}, {"sha": "918be0a5d7d5c04b8fd2ea350176f51a957087e9", "filename": "gcc/java/lang.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa26a60791ec314128a9683fd4d657b251d0268/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa26a60791ec314128a9683fd4d657b251d0268/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=4fa26a60791ec314128a9683fd4d657b251d0268", "patch": "@@ -740,6 +740,9 @@ java_init_options (void)\n \n   /* In Java floating point operations never trap.  */\n   flag_trapping_math = 0;\n+\n+  /* In Java arithmetic overflow always wraps around.  */\n+  flag_wrapv = 1;\n }\n \n static bool"}, {"sha": "737ec89689350990df8866f8199b9553b544a874", "filename": "gcc/loop.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa26a60791ec314128a9683fd4d657b251d0268/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa26a60791ec314128a9683fd4d657b251d0268/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=4fa26a60791ec314128a9683fd4d657b251d0268", "patch": "@@ -6462,6 +6462,9 @@ basic_induction_var (loop, x, mode, dest_reg, p, inc_val, mult_val, location)\n \treturn 0;\n \n     case SIGN_EXTEND:\n+      /* Ignore this BIV if signed arithmetic overflow is defined.  */\n+      if (flag_wrapv)\n+\treturn 0;\n       return basic_induction_var (loop, XEXP (x, 0), GET_MODE (XEXP (x, 0)),\n \t\t\t\t  dest_reg, p, inc_val, mult_val, location);\n "}, {"sha": "65d84e7c164d2fd4d5b339d62cb2b7f8dec138f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa26a60791ec314128a9683fd4d657b251d0268/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa26a60791ec314128a9683fd4d657b251d0268/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4fa26a60791ec314128a9683fd4d657b251d0268", "patch": "@@ -1,3 +1,8 @@\n+2003-05-31  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/fwrapv-1.c: New test case.\n+\t* gcc.dg/fwrapv-2.c: New test case.\n+\n 2003-05-31  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/10956"}, {"sha": "f7ddda4a3b6c195a3df017cf822bb1b7d5f1f46b", "filename": "gcc/testsuite/gcc.dg/fwrapv-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa26a60791ec314128a9683fd4d657b251d0268/gcc%2Ftestsuite%2Fgcc.dg%2Ffwrapv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa26a60791ec314128a9683fd4d657b251d0268/gcc%2Ftestsuite%2Fgcc.dg%2Ffwrapv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffwrapv-1.c?ref=4fa26a60791ec314128a9683fd4d657b251d0268", "patch": "@@ -0,0 +1,28 @@\n+/* Copyright (C) 2003 Free Software Foundation.\n+\n+   Test that the -fwrapv command line option is accepted and disables\n+   \"unsafe\" optimizations that rely on undefined arithmetic overflow.\n+\n+   Written by Roger Sayle, 24th March 2003.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fwrapv\" } */\n+\n+#include <limits.h>\n+\n+extern void abort ();\n+\n+int test(int x)\n+{\n+  return (2*x)/2;\n+}\n+\n+main()\n+{\n+  int x = INT_MAX;\n+\n+  if (test(x) == x)\n+    abort ();\n+  return 0;\n+}\n+"}, {"sha": "cb4270e0ee2cc544a15670a0b68d1e860502e47c", "filename": "gcc/testsuite/gcc.dg/fwrapv-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa26a60791ec314128a9683fd4d657b251d0268/gcc%2Ftestsuite%2Fgcc.dg%2Ffwrapv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa26a60791ec314128a9683fd4d657b251d0268/gcc%2Ftestsuite%2Fgcc.dg%2Ffwrapv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffwrapv-2.c?ref=4fa26a60791ec314128a9683fd4d657b251d0268", "patch": "@@ -0,0 +1,28 @@\n+/* Copyright (C) 2003 Free Software Foundation.\n+\n+   Test that the -fno-wrapv command line option is accepted and enables\n+   \"unsafe\" optimizations that rely on undefined arithmetic overflow.\n+\n+   Written by Roger Sayle, 31st May 2003.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-wrapv\" } */\n+\n+#include <limits.h>\n+\n+extern void abort ();\n+\n+int test(int x)\n+{\n+  return (2*x)/2;\n+}\n+\n+main()\n+{\n+  int x = INT_MAX;\n+\n+  if (test(x) != x)\n+    abort ();\n+  return 0;\n+}\n+"}, {"sha": "f2c352f8a083fd52226d2078dd2bf044a509af60", "filename": "gcc/toplev.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa26a60791ec314128a9683fd4d657b251d0268/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa26a60791ec314128a9683fd4d657b251d0268/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=4fa26a60791ec314128a9683fd4d657b251d0268", "patch": "@@ -977,8 +977,12 @@ typedef struct\n }\n lang_independent_options;\n \n+/* Nonzero if signed arithmetic overflow should trap.  */\n int flag_trapv = 0;\n \n+/* Nonzero if signed arithmetic overflow should wrap around.  */\n+int flag_wrapv = 0;\n+\n /* Add or remove a leading underscore from user symbols.  */\n int flag_leading_underscore = -1;\n \n@@ -1220,6 +1224,8 @@ static const lang_independent_options f_options[] =\n    N_(\"Report on permanent memory allocation at end of run\") },\n   { \"trapv\", &flag_trapv, 1,\n    N_(\"Trap for signed overflow in addition / subtraction / multiplication\") },\n+  { \"wrapv\", &flag_wrapv, 1,\n+   N_(\"Assume signed arithmetic overflow wraps around\") },\n   { \"new-ra\", &flag_new_regalloc, 1,\n    N_(\"Use graph coloring register allocation.\") },\n };"}, {"sha": "ee7883b2f8f03c5ff3adec19691172ea2f985617", "filename": "libjava/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa26a60791ec314128a9683fd4d657b251d0268/libjava%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa26a60791ec314128a9683fd4d657b251d0268/libjava%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FChangeLog?ref=4fa26a60791ec314128a9683fd4d657b251d0268", "patch": "@@ -1,3 +1,8 @@\n+2003-05-31  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* libjava.lang/Overflow.java: New test.\n+\t* libjava.lang/Overflow.out: New file.\n+\n 2003-05-06  Tom Tromey  <tromey@redhat.com>\n \n \t* libjava.lang/verify.java: New file."}, {"sha": "312e9cb209f201b672293f9ae05a9b5558306fdc", "filename": "libjava/testsuite/libjava.lang/Overflow.java", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa26a60791ec314128a9683fd4d657b251d0268/libjava%2Ftestsuite%2Flibjava.lang%2FOverflow.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa26a60791ec314128a9683fd4d657b251d0268/libjava%2Ftestsuite%2Flibjava.lang%2FOverflow.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FOverflow.java?ref=4fa26a60791ec314128a9683fd4d657b251d0268", "patch": "@@ -0,0 +1,16 @@\n+class Overflow\n+{\n+  static int test(int x)\n+  {\n+    return (2*x)/2;\n+  }\n+\n+  public static void main(String argv[])\n+  {\n+    int x = Integer.MAX_VALUE;\n+\n+    if (test(x) == x)\n+      throw new RuntimeException ();\n+  }\n+}\n+"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libjava/testsuite/libjava.lang/Overflow.out", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa26a60791ec314128a9683fd4d657b251d0268/libjava%2Ftestsuite%2Flibjava.lang%2FOverflow.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa26a60791ec314128a9683fd4d657b251d0268/libjava%2Ftestsuite%2Flibjava.lang%2FOverflow.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FOverflow.out?ref=4fa26a60791ec314128a9683fd4d657b251d0268"}]}