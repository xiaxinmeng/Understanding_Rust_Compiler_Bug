{"sha": "b292109f9ec580c1b81e4b39388cb0d315318d7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI5MjEwOWY5ZWM1ODBjMWI4MWU0YjM5Mzg4Y2IwZDMxNTMxOGQ3ZQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2014-05-16T09:20:22Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-05-16T09:20:22Z"}, "message": "[AArch64 costs 15/18] Cost more Floating point RTX.\n\ngcc/\n\n\t* config/aarch64/aarch64.c (aarch64_rtx_costs): Cost FMA,\n\tFLOAT_EXTEND, FLOAT_TRUNCATE, ABS, SMAX, and SMIN.\n\n\nCo-Authored-By: Philipp Tomsich <philipp.tomsich@theobroma-systems.com>\n\nFrom-SVN: r210507", "tree": {"sha": "cc3479e30db23ca0610f386740d8d93b7f4e13df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc3479e30db23ca0610f386740d8d93b7f4e13df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b292109f9ec580c1b81e4b39388cb0d315318d7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b292109f9ec580c1b81e4b39388cb0d315318d7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b292109f9ec580c1b81e4b39388cb0d315318d7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b292109f9ec580c1b81e4b39388cb0d315318d7e/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a8eecd00ec2693734716d20592e5253ab135929a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8eecd00ec2693734716d20592e5253ab135929a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8eecd00ec2693734716d20592e5253ab135929a"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "a4e6b1896b6937cf66d7675470eea4ebab843c7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b292109f9ec580c1b81e4b39388cb0d315318d7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b292109f9ec580c1b81e4b39388cb0d315318d7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b292109f9ec580c1b81e4b39388cb0d315318d7e", "patch": "@@ -1,3 +1,9 @@\n+2014-05-16  James Greenhalgh  <james.greenhalgh@arm.com>\n+\t    Philipp Tomsich  <philipp.tomsich@theobroma-systems.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_rtx_costs): Cost FMA,\n+\tFLOAT_EXTEND, FLOAT_TRUNCATE, ABS, SMAX, and SMIN.\n+\n 2014-05-16  James Greenhalgh  <james.greenhalgh@arm.com>\n \t    Philipp Tomsich  <philipp.tomsich@theobroma-systems.com>\n "}, {"sha": "503f9149828cf94abf4fd18b3fe384fc830697be", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b292109f9ec580c1b81e4b39388cb0d315318d7e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b292109f9ec580c1b81e4b39388cb0d315318d7e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=b292109f9ec580c1b81e4b39388cb0d315318d7e", "patch": "@@ -5641,6 +5641,89 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n \n       return false; /* All arguments must be in registers.  */\n \n+    case FMA:\n+      op0 = XEXP (x, 0);\n+      op1 = XEXP (x, 1);\n+      op2 = XEXP (x, 2);\n+\n+      if (speed)\n+\t*cost += extra_cost->fp[mode == DFmode].fma;\n+\n+      /* FMSUB, FNMADD, and FNMSUB are free.  */\n+      if (GET_CODE (op0) == NEG)\n+        op0 = XEXP (op0, 0);\n+\n+      if (GET_CODE (op2) == NEG)\n+        op2 = XEXP (op2, 0);\n+\n+      /* aarch64_fnma4_elt_to_64v2df has the NEG as operand 1,\n+\t and the by-element operand as operand 0.  */\n+      if (GET_CODE (op1) == NEG)\n+        op1 = XEXP (op1, 0);\n+\n+      /* Catch vector-by-element operations.  The by-element operand can\n+\t either be (vec_duplicate (vec_select (x))) or just\n+\t (vec_select (x)), depending on whether we are multiplying by\n+\t a vector or a scalar.\n+\n+\t Canonicalization is not very good in these cases, FMA4 will put the\n+\t by-element operand as operand 0, FNMA4 will have it as operand 1.  */\n+      if (GET_CODE (op0) == VEC_DUPLICATE)\n+\top0 = XEXP (op0, 0);\n+      else if (GET_CODE (op1) == VEC_DUPLICATE)\n+\top1 = XEXP (op1, 0);\n+\n+      if (GET_CODE (op0) == VEC_SELECT)\n+\top0 = XEXP (op0, 0);\n+      else if (GET_CODE (op1) == VEC_SELECT)\n+\top1 = XEXP (op1, 0);\n+\n+      /* If the remaining parameters are not registers,\n+         get the cost to put them into registers.  */\n+      *cost += rtx_cost (op0, FMA, 0, speed);\n+      *cost += rtx_cost (op1, FMA, 1, speed);\n+      *cost += rtx_cost (op2, FMA, 2, speed);\n+      return true;\n+\n+    case FLOAT_EXTEND:\n+      if (speed)\n+\t*cost += extra_cost->fp[mode == DFmode].widen;\n+      return false;\n+\n+    case FLOAT_TRUNCATE:\n+      if (speed)\n+\t*cost += extra_cost->fp[mode == DFmode].narrow;\n+      return false;\n+\n+    case ABS:\n+      if (GET_MODE_CLASS (mode) == MODE_FLOAT)\n+\t{\n+\t  /* FABS and FNEG are analogous.  */\n+\t  if (speed)\n+\t    *cost += extra_cost->fp[mode == DFmode].neg;\n+\t}\n+      else\n+\t{\n+\t  /* Integer ABS will either be split to\n+\t     two arithmetic instructions, or will be an ABS\n+\t     (scalar), which we don't model.  */\n+\t  *cost = COSTS_N_INSNS (2);\n+\t  if (speed)\n+\t    *cost += 2 * extra_cost->alu.arith;\n+\t}\n+      return false;\n+\n+    case SMAX:\n+    case SMIN:\n+      if (speed)\n+\t{\n+\t  /* FMAXNM/FMINNM/FMAX/FMIN.\n+\t     TODO: This may not be accurate for all implementations, but\n+\t     we do not model this in the cost tables.  */\n+\t  *cost += extra_cost->fp[mode == DFmode].addsub;\n+\t}\n+      return false;\n+\n     default:\n       break;\n     }"}]}