{"sha": "c3090c1f521bb5fedd5e7f977bce1bf0e1fc0a8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMwOTBjMWY1MjFiYjVmZWRkNWU3Zjk3N2JjZTFiZjBlMWZjMGE4ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-02-12T16:49:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-02-12T16:49:44Z"}, "message": "re PR rtl-optimization/69764 (ICE on x86_64-linux-gnu at -O0 (in decompose, at rtl.h:2107))\n\n\tPR rtl-optimization/69764\n\tPR rtl-optimization/69771\n\t* optabs.c (expand_binop_directly): For shift_optab_p, force\n\tconvert_modes with VOIDmode if xop1 has VOIDmode.\n\n\t* c-c++-common/pr69764.c: New test.\n\t* gcc.dg/torture/pr69771.c: New test.\n\nFrom-SVN: r233381", "tree": {"sha": "4720e253b740575b1b04e427d1aaaddcb7eee59e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4720e253b740575b1b04e427d1aaaddcb7eee59e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3090c1f521bb5fedd5e7f977bce1bf0e1fc0a8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3090c1f521bb5fedd5e7f977bce1bf0e1fc0a8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3090c1f521bb5fedd5e7f977bce1bf0e1fc0a8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3090c1f521bb5fedd5e7f977bce1bf0e1fc0a8e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8222034d0514bef24332f8d9cb848241d688d09b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8222034d0514bef24332f8d9cb848241d688d09b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8222034d0514bef24332f8d9cb848241d688d09b"}], "stats": {"total": 73, "additions": 72, "deletions": 1}, "files": [{"sha": "871a2f076eef07e6e9d600d78cddeb84abfff9af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3090c1f521bb5fedd5e7f977bce1bf0e1fc0a8e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3090c1f521bb5fedd5e7f977bce1bf0e1fc0a8e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3090c1f521bb5fedd5e7f977bce1bf0e1fc0a8e", "patch": "@@ -1,3 +1,10 @@\n+2016-02-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/69764\n+\tPR rtl-optimization/69771\n+\t* optabs.c (expand_binop_directly): For shift_optab_p, force\n+\tconvert_modes with VOIDmode if xop1 has VOIDmode.\n+\n 2016-02-12  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \tPR target/69729"}, {"sha": "b651878b72503672781d9fa1a148adefa2379366", "filename": "gcc/optabs.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3090c1f521bb5fedd5e7f977bce1bf0e1fc0a8e/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3090c1f521bb5fedd5e7f977bce1bf0e1fc0a8e/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=c3090c1f521bb5fedd5e7f977bce1bf0e1fc0a8e", "patch": "@@ -993,6 +993,7 @@ expand_binop_directly (machine_mode mode, optab binoptab,\n   bool commutative_p;\n   rtx_insn *pat;\n   rtx xop0 = op0, xop1 = op1;\n+  bool canonicalize_op1 = false;\n \n   /* If it is a commutative operator and the modes would match\n      if we would swap the operands, we can save the conversions.  */\n@@ -1006,6 +1007,11 @@ expand_binop_directly (machine_mode mode, optab binoptab,\n   xop0 = avoid_expensive_constant (xmode0, binoptab, 0, xop0, unsignedp);\n   if (!shift_optab_p (binoptab))\n     xop1 = avoid_expensive_constant (xmode1, binoptab, 1, xop1, unsignedp);\n+  else\n+    /* Shifts and rotates often use a different mode for op1 from op0;\n+       for VOIDmode constants we don't know the mode, so force it\n+       to be canonicalized using convert_modes.  */\n+    canonicalize_op1 = true;\n \n   /* In case the insn wants input operands in modes different from\n      those of the actual operands, convert the operands.  It would\n@@ -1020,7 +1026,8 @@ expand_binop_directly (machine_mode mode, optab binoptab,\n       mode0 = xmode0;\n     }\n \n-  mode1 = GET_MODE (xop1) != VOIDmode ? GET_MODE (xop1) : mode;\n+  mode1 = ((GET_MODE (xop1) != VOIDmode || canonicalize_op1)\n+\t   ? GET_MODE (xop1) : mode);\n   if (xmode1 != VOIDmode && xmode1 != mode1)\n     {\n       xop1 = convert_modes (xmode1, mode1, xop1, unsignedp);"}, {"sha": "dfae7fc6321dab1e18a48e7bdc932789e34e7fb7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3090c1f521bb5fedd5e7f977bce1bf0e1fc0a8e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3090c1f521bb5fedd5e7f977bce1bf0e1fc0a8e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c3090c1f521bb5fedd5e7f977bce1bf0e1fc0a8e", "patch": "@@ -1,3 +1,10 @@\n+2016-02-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/69764\n+\tPR rtl-optimization/69771\n+\t* c-c++-common/pr69764.c: New test.\n+\t* gcc.dg/torture/pr69771.c: New test.\n+\n 2016-02-12  Marek Polacek  <polacek@redhat.com>\n \n \t* g++.dg/torture/init-list1.C: New."}, {"sha": "79623ec7373e8f3295049bb44fe95188692a53a6", "filename": "gcc/testsuite/c-c++-common/pr69764.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3090c1f521bb5fedd5e7f977bce1bf0e1fc0a8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69764.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3090c1f521bb5fedd5e7f977bce1bf0e1fc0a8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69764.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69764.c?ref=c3090c1f521bb5fedd5e7f977bce1bf0e1fc0a8e", "patch": "@@ -0,0 +1,38 @@\n+/* PR rtl-optimization/69764 */\n+/* { dg-do compile { target int32plus } } */\n+\n+unsigned char\n+fn1 (unsigned char a)\n+{\n+  return a >> ~6;\t/* { dg-warning \"right shift count is negative\" } */\n+}\n+\n+unsigned short\n+fn2 (unsigned short a)\n+{\n+  return a >> ~6;\t/* { dg-warning \"right shift count is negative\" } */\n+}\n+\n+unsigned int\n+fn3 (unsigned int a)\n+{\n+  return a >> ~6;\t/* { dg-warning \"right shift count is negative\" } */\n+}\n+\n+unsigned char\n+fn4 (unsigned char a)\n+{\n+  return a >> 0xff03;\t/* { dg-warning \"right shift count >= width of type\" } */\n+}\n+\n+unsigned short\n+fn5 (unsigned short a)\n+{\n+  return a >> 0xff03;\t/* { dg-warning \"right shift count >= width of type\" } */\n+}\n+\n+unsigned int\n+fn6 (unsigned int a)\n+{\n+  return a >> 0xff03;\t/* { dg-warning \"right shift count >= width of type\" } */\n+}"}, {"sha": "8314c82c764970d1af7561118683c19c2e682c7c", "filename": "gcc/testsuite/gcc.dg/torture/pr69771.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3090c1f521bb5fedd5e7f977bce1bf0e1fc0a8e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69771.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3090c1f521bb5fedd5e7f977bce1bf0e1fc0a8e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69771.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69771.c?ref=c3090c1f521bb5fedd5e7f977bce1bf0e1fc0a8e", "patch": "@@ -0,0 +1,12 @@\n+/* PR rtl-optimization/69771 */\n+/* { dg-do compile } */\n+\n+unsigned char a = 5, c;\n+unsigned short b = 0;\n+unsigned d = 0x76543210;\n+\n+void\n+foo (void)\n+{\n+  c = d >> ~(a || ~b);\t/* { dg-warning \"shift count is negative\" } */\n+}"}]}