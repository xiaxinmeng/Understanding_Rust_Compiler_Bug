{"sha": "787bf7e377c15754ff9f0670dbeb037125faad7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg3YmY3ZTM3N2MxNTc1NGZmOWYwNjcwZGJlYjAzNzEyNWZhYWQ3ZA==", "commit": {"author": {"name": "Hans Boehm", "email": "Hans_Boehm@hp.com", "date": "2002-04-09T00:39:16Z"}, "committer": {"name": "Hans Boehm", "email": "hboehm@gcc.gnu.org", "date": "2002-04-09T00:39:16Z"}, "message": "gc_priv.h (WARN macro): Add \"GC warning:\" prefix.\n\n\t* include/private/gc_priv.h (WARN macro): Add \"GC warning:\" prefix.\n\t(GC_large_alloc_warn_interval, GC_large_alloc_warn_suppressed):\n\tdeclare.\n\t* allchblk.c (GC_allchblk_nth): Change text and support reduced\n\tfrequency for blacklist warning message.\n\t* misc.c (GC_large_alloc_warn_interval,\n\tGC_large_alloc_warn_suppressed): define.\n\t(GC_init_inner): Check GC_NO_BLACKLIST_WARNING and\n\tGC_LARGE_ALLOC_WARN_INTERVAL environment variables.\n\t* doc/README.environment (GC_NO_BLACKLIST_WARNING): Deprecate.\n\t(GC_LARGE_ALLOC_WARN_INTERVAL): Add documentation.\n\n\t* dyn_load.c (_DYNAMIC): Move declaration to file scope.\n\nFrom-SVN: r52053", "tree": {"sha": "0f43ea46e4d334b0f5b6be281db4806e87434993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f43ea46e4d334b0f5b6be281db4806e87434993"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/787bf7e377c15754ff9f0670dbeb037125faad7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/787bf7e377c15754ff9f0670dbeb037125faad7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/787bf7e377c15754ff9f0670dbeb037125faad7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/787bf7e377c15754ff9f0670dbeb037125faad7d/comments", "author": null, "committer": null, "parents": [{"sha": "cc382e5c1af3b867867cde8f906ae9fbfc9ac105", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc382e5c1af3b867867cde8f906ae9fbfc9ac105", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc382e5c1af3b867867cde8f906ae9fbfc9ac105"}], "stats": {"total": 80, "additions": 68, "deletions": 12}, "files": [{"sha": "157adaa780aa959ee8d3e0a97f6888411faedca9", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/787bf7e377c15754ff9f0670dbeb037125faad7d/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/787bf7e377c15754ff9f0670dbeb037125faad7d/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=787bf7e377c15754ff9f0670dbeb037125faad7d", "patch": "@@ -1,3 +1,19 @@\n+2002-04-08  Hans Boehm  <Hans_Boehm@hp.com>\n+\t\n+\t* include/private/gc_priv.h (WARN macro): Add \"GC warning:\" prefix.\n+\t(GC_large_alloc_warn_interval, GC_large_alloc_warn_suppressed):\n+\tdeclare.\n+\t* allchblk.c (GC_allchblk_nth): Change text and support reduced\n+\tfrequency for blacklist warning message.\n+\t* misc.c (GC_large_alloc_warn_interval,\n+\tGC_large_alloc_warn_suppressed): define.\n+\t(GC_init_inner): Check GC_NO_BLACKLIST_WARNING and \n+\tGC_LARGE_ALLOC_WARN_INTERVAL environment variables.\n+\t* doc/README.environment (GC_NO_BLACKLIST_WARNING): Deprecate.\n+\t(GC_LARGE_ALLOC_WARN_INTERVAL): Add documentation.\n+\n+\t* dyn_load.c (_DYNAMIC): Move declaration to file scope.\n+\n 2002-04-04  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* include/private/gcconfig.h: Add support for an unmapped"}, {"sha": "7d4cbd82f1314ef9761706e656c18f38f4856623", "filename": "boehm-gc/allchblk.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/787bf7e377c15754ff9f0670dbeb037125faad7d/boehm-gc%2Fallchblk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/787bf7e377c15754ff9f0670dbeb037125faad7d/boehm-gc%2Fallchblk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fallchblk.c?ref=787bf7e377c15754ff9f0670dbeb037125faad7d", "patch": "@@ -654,9 +654,13 @@ int n;\n \t                 && orig_avail - size_needed\n \t\t\t    > (signed_word)BL_LIMIT) {\n \t        /* Punt, since anything else risks unreasonable heap growth. */\n-\t\tif (0 == GETENV(\"GC_NO_BLACKLIST_WARNING\")) {\n-\t          WARN(\"Needed to allocate blacklisted block at 0x%lx\\n\",\n-\t\t       (word)hbp);\n+\t\tif (++GC_large_alloc_warn_suppressed\n+\t\t    >= GC_large_alloc_warn_interval) {\n+\t          WARN(\"Repeated allocation of very large block \"\n+\t\t       \"(appr. size %ld):\\n\"\n+\t\t       \"\\tMay lead to memory leak and poor performance.\\n\",\n+\t\t       size_needed);\n+\t\t  GC_large_alloc_warn_suppressed = 0;\n \t\t}\n \t        size_avail = orig_avail;\n \t      } else if (size_avail == 0 && size_needed == HBLKSIZE"}, {"sha": "c7daddb0acabf315e9d44c31c8afc99e2477fb54", "filename": "boehm-gc/doc/README.environment", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/787bf7e377c15754ff9f0670dbeb037125faad7d/boehm-gc%2Fdoc%2FREADME.environment", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/787bf7e377c15754ff9f0670dbeb037125faad7d/boehm-gc%2Fdoc%2FREADME.environment", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fdoc%2FREADME.environment?ref=787bf7e377c15754ff9f0670dbeb037125faad7d", "patch": "@@ -30,7 +30,16 @@ GC_NPROCS=<n> - Linux w/threads only.  Explicitly sets the number of processors\n \t\tcorrectness, but may lead to really horrible performance.\n \n GC_NO_BLACKLIST_WARNING - Prevents the collector from issuing\n-\t\t\"Needed to allocate blacklisted block at ...\" warnings.\n+\t\twarnings about allocations of very large blocks.\n+\t\tDeprecated.  Use GC_LARGE_ALLOC_WARN_INTERVAL instead.\n+\n+GC_LARGE_ALLOC_WARN_INTERVAL=<n> - Print every nth warning about very large\n+\t\tblock allocations, starting with the nth one.  Small values\n+\t\tof n are generally benign, in that a bounded number of\n+\t\tsuch warnings generally indicate at most a bounded leak.\n+\t\tFor best results it should be set at 1 during testing.\n+\t\tDefault is 5.  Very large numbers effectively disable the\n+\t\twarning.\n \n GC_IGNORE_GCJ_INFO - Ignore the type descriptors implicitly supplied by\n \t\t     GC_gcj_malloc and friends.  This is useful for debugging"}, {"sha": "d3ef572be6874018a54adc20d5a6e900a60ba7b4", "filename": "boehm-gc/dyn_load.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/787bf7e377c15754ff9f0670dbeb037125faad7d/boehm-gc%2Fdyn_load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/787bf7e377c15754ff9f0670dbeb037125faad7d/boehm-gc%2Fdyn_load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fdyn_load.c?ref=787bf7e377c15754ff9f0670dbeb037125faad7d", "patch": "@@ -529,13 +529,14 @@ GC_bool GC_register_dynamic_libraries_dl_iterate_phdr()\n \n # endif\n \n+#ifdef __GNUC__\n+# pragma weak _DYNAMIC\n+#endif\n+extern ElfW(Dyn) _DYNAMIC[];\n+\n static struct link_map *\n GC_FirstDLOpenedLinkMap()\n {\n-#   ifdef __GNUC__\n-#     pragma weak _DYNAMIC\n-#   endif\n-    extern ElfW(Dyn) _DYNAMIC[];\n     ElfW(Dyn) *dp;\n     struct r_debug *r;\n     static struct link_map *cachedResult = 0;"}, {"sha": "b1526aaab2e7daf9d9850d9a2f2237ad4ce66a7b", "filename": "boehm-gc/include/private/gc_priv.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/787bf7e377c15754ff9f0670dbeb037125faad7d/boehm-gc%2Finclude%2Fprivate%2Fgc_priv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/787bf7e377c15754ff9f0670dbeb037125faad7d/boehm-gc%2Finclude%2Fprivate%2Fgc_priv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fprivate%2Fgc_priv.h?ref=787bf7e377c15754ff9f0670dbeb037125faad7d", "patch": "@@ -499,7 +499,7 @@ struct hblk;\t/* See below.\t*/\n # endif\n \n /* Print warning message, e.g. almost out of memory.\t*/\n-# define WARN(msg,arg) (*GC_current_warn_proc)(msg, (GC_word)(arg))\n+# define WARN(msg,arg) (*GC_current_warn_proc)(\"GC Warning: \" msg, (GC_word)(arg))\n extern GC_warn_proc GC_current_warn_proc;\n \n /* Get environment entry */\n@@ -1223,7 +1223,12 @@ extern word GC_root_size;\t/* Total size of registered root sections */\n \n extern GC_bool GC_debugging_started;\t/* GC_debug_malloc has been called. */ \n \n-\t\t\t\n+extern long GC_large_alloc_warn_interval;\n+\t/* Interval between unsuppressed warnings.\t*/\n+\n+extern long GC_large_alloc_warn_suppressed;\n+\t/* Number of warnings suppressed so far.\t*/\n+\n /* Operations */\n # ifndef abs\n #   define abs(x)  ((x) < 0? (-(x)) : (x))"}, {"sha": "f6079732fbfc1db15e55f5c7146fe90a97f8c464", "filename": "boehm-gc/misc.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/787bf7e377c15754ff9f0670dbeb037125faad7d/boehm-gc%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/787bf7e377c15754ff9f0670dbeb037125faad7d/boehm-gc%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fmisc.c?ref=787bf7e377c15754ff9f0670dbeb037125faad7d", "patch": "@@ -16,6 +16,7 @@\n \n \n #include <stdio.h>\n+#include <limits.h>\n #ifndef _WIN32_WCE\n #include <signal.h>\n #endif\n@@ -112,6 +113,12 @@ GC_bool GC_print_back_height = 0;\n   int GC_all_interior_pointers = 0;\n #endif\n \n+long GC_large_alloc_warn_interval = 5;\n+\t/* Interval between unsuppressed warnings.\t*/\n+\n+long GC_large_alloc_warn_suppressed = 0;\n+\t/* Number of warnings suppressed so far.\t*/\n+\n /*ARGSUSED*/\n GC_PTR GC_default_oom_fn GC_PROTO((size_t bytes_requested))\n {\n@@ -518,11 +525,13 @@ void GC_init_inner()\n     if (0 != GETENV(\"GC_PRINT_BACK_HEIGHT\")) {\n       GC_print_back_height = 1;\n     }\n+    if (0 != GETENV(\"GC_NO_BLACKLIST_WARNING\")) {\n+      GC_large_alloc_warn_interval = LONG_MAX;\n+    }\n     {\n       char * time_limit_string = GETENV(\"GC_PAUSE_TIME_TARGET\");\n       if (0 != time_limit_string) {\n-        long time_limit;\n-        if (time_limit_string != 0) time_limit = atol(time_limit_string);\n+        long time_limit = atol(time_limit_string);\n         if (time_limit < 5) {\n \t  WARN(\"GC_PAUSE_TIME_TARGET environment variable value too small \"\n \t       \"or bad syntax: Ignoring\\n\", 0);\n@@ -531,6 +540,18 @@ void GC_init_inner()\n         }\n       }\n     }\n+    {\n+      char * interval_string = GETENV(\"GC_LARGE_ALLOC_WARN_INTERVAL\");\n+      if (0 != interval_string) {\n+        long interval = atol(interval_string);\n+        if (interval <= 0) {\n+\t  WARN(\"GC_LARGE_ALLOC_WARN_INTERVAL environment variable has \"\n+\t       \"bad value: Ignoring\\n\", 0);\n+        } else {\n+\t  GC_large_alloc_warn_interval = interval;\n+        }\n+      }\n+    }\n #   ifdef UNIX_LIKE\n       if (0 != GETENV(\"GC_LOOP_ON_ABORT\")) {\n         GC_set_and_save_fault_handler(looping_handler);"}]}