{"sha": "69b3e488803f684d9d956223a7f410d219cced24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjliM2U0ODg4MDNmNjg0ZDlkOTU2MjIzYTdmNDEwZDIxOWNjZWQyNA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-05T12:42:40Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-05T15:40:19Z"}, "message": "Add AST to HIR lowering for traits and trait impls.\n\nThis will change to desugar trait-impls to be just like a normal impl block\nlater on. This will simplify things for method resolution. This is the\ninitial building block so we can move forward and refactor as the\ntrait resolution evolves.\n\nAddresses #395 #472", "tree": {"sha": "3c68bc966995acfa8f566a35439a0939353386a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c68bc966995acfa8f566a35439a0939353386a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69b3e488803f684d9d956223a7f410d219cced24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69b3e488803f684d9d956223a7f410d219cced24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69b3e488803f684d9d956223a7f410d219cced24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69b3e488803f684d9d956223a7f410d219cced24/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1526062d9c16d3224d350967788dec9e4e2bbee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1526062d9c16d3224d350967788dec9e4e2bbee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1526062d9c16d3224d350967788dec9e4e2bbee"}], "stats": {"total": 453, "additions": 416, "deletions": 37}, "files": [{"sha": "f9a5a6ddb5c44f38eebe4473d6b94537bcd6cf2c", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b3e488803f684d9d956223a7f410d219cced24/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b3e488803f684d9d956223a7f410d219cced24/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=69b3e488803f684d9d956223a7f410d219cced24", "patch": "@@ -3422,6 +3422,8 @@ class Trait : public VisItem\n \n   Identifier get_identifier () const { return name; }\n \n+  bool is_unsafe () const { return has_unsafe; }\n+\n   // Mega-constructor\n   Trait (Identifier name, bool is_unsafe,\n \t std::vector<std::unique_ptr<GenericParam> > generic_params,\n@@ -3757,8 +3759,6 @@ class TraitImpl : public Impl\n       trait_path (std::move (trait_path)), impl_items (std::move (impl_items))\n   {}\n \n-  // TODO: constructors with less params\n-\n   // Copy constructor with vector clone\n   TraitImpl (TraitImpl const &other)\n     : Impl (other), has_unsafe (other.has_unsafe),\n@@ -3790,6 +3790,9 @@ class TraitImpl : public Impl\n \n   void accept_vis (ASTVisitor &vis) override;\n \n+  bool is_unsafe () const { return has_unsafe; };\n+  bool is_exclam () const { return has_exclam; }\n+\n   // TODO: think of better way to do this\n   const std::vector<std::unique_ptr<TraitImplItem> > &get_impl_items () const\n   {"}, {"sha": "a3baf501ac2f216c6bd3fb3e4b84a6dc6d5280e6", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b3e488803f684d9d956223a7f410d219cced24/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b3e488803f684d9d956223a7f410d219cced24/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=69b3e488803f684d9d956223a7f410d219cced24", "patch": "@@ -293,6 +293,8 @@ class ASTLoweringBase : public AST::ASTVisitor\n   HIR::GenericArgs lower_generic_args (AST::GenericArgs &args);\n \n   HIR::GenericArgsBinding lower_binding (AST::GenericArgsBinding &binding);\n+\n+  HIR::SelfParam lower_self (AST::SelfParam &self);\n };\n \n } // namespace HIR"}, {"sha": "f830918545478b3b4affef85d2e24027441d68dd", "filename": "gcc/rust/hir/rust-ast-lower-implitem.h", "status": "modified", "additions": 200, "deletions": 18, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b3e488803f684d9d956223a7f410d219cced24/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b3e488803f684d9d956223a7f410d219cced24/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h?ref=69b3e488803f684d9d956223a7f410d219cced24", "patch": "@@ -43,19 +43,14 @@ class ASTLowerImplItem : public ASTLoweringBase\n     return resolver.translated;\n   }\n \n-  HIR::SelfParam lower_self (AST::SelfParam &self)\n+  static HIR::TraitImplItem *translate (AST::TraitImplItem *item,\n+\t\t\t\t\tHirId parent_impl_id)\n   {\n-    HIR::Type *type = self.has_type ()\n-\t\t\t? ASTLoweringType::translate (self.get_type ().get ())\n-\t\t\t: nullptr;\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, self.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n-\n-    return HIR::SelfParam (mapping, std::unique_ptr<HIR::Type> (type),\n-\t\t\t   self.get_is_mut (), self.get_locus ());\n+    ASTLowerImplItem resolver (parent_impl_id);\n+    item->accept_vis (resolver);\n+    rust_assert (resolver.trait_impl_item != nullptr);\n+    // can get a way with this for now since they have the same hierarchy\n+    return resolver.trait_impl_item;\n   }\n \n   void visit (AST::ConstantItem &constant) override\n@@ -70,11 +65,14 @@ class ASTLowerImplItem : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n-    translated = new HIR::ConstantItem (mapping, constant.get_identifier (),\n-\t\t\t\t\tvis, std::unique_ptr<HIR::Type> (type),\n-\t\t\t\t\tstd::unique_ptr<HIR::Expr> (expr),\n-\t\t\t\t\tconstant.get_outer_attrs (),\n-\t\t\t\t\tconstant.get_locus ());\n+    auto translated_constant\n+      = new HIR::ConstantItem (mapping, constant.get_identifier (), vis,\n+\t\t\t       std::unique_ptr<HIR::Type> (type),\n+\t\t\t       std::unique_ptr<HIR::Expr> (expr),\n+\t\t\t       constant.get_outer_attrs (),\n+\t\t\t       constant.get_locus ());\n+    translated = translated_constant;\n+    trait_impl_item = translated_constant;\n \n     mappings->insert_hir_implitem (mapping.get_crate_num (),\n \t\t\t\t   mapping.get_hirid (), parent_impl_id,\n@@ -163,6 +161,7 @@ class ASTLowerImplItem : public ASTLoweringBase\n       }\n \n     translated = fn;\n+    trait_impl_item = fn;\n   }\n \n   void visit (AST::Method &method) override\n@@ -251,17 +250,200 @@ class ASTLowerImplItem : public ASTLoweringBase\n       }\n \n     translated = mth;\n+    trait_impl_item = mth;\n   }\n \n private:\n   ASTLowerImplItem (HirId parent_impl_id)\n-    : translated (nullptr), parent_impl_id (parent_impl_id)\n+    : translated (nullptr), trait_impl_item (nullptr),\n+      parent_impl_id (parent_impl_id)\n   {}\n \n   HIR::InherentImplItem *translated;\n+  HIR::TraitImplItem *trait_impl_item;\n   HirId parent_impl_id;\n };\n \n+class ASTLowerTraitItem : public ASTLoweringBase\n+{\n+  using Rust::HIR::ASTLoweringBase::visit;\n+\n+public:\n+  static HIR::TraitItem *translate (AST::TraitItem *item)\n+  {\n+    ASTLowerTraitItem resolver;\n+    item->accept_vis (resolver);\n+    rust_assert (resolver.translated != nullptr);\n+    return resolver.translated;\n+  }\n+\n+  void visit (AST::TraitItemFunc &func) override\n+  {\n+    AST::TraitFunctionDecl &ref = func.get_trait_function_decl ();\n+\n+    std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n+    HIR::WhereClause where_clause (std::move (where_clause_items));\n+    HIR::FunctionQualifiers qualifiers (\n+      HIR::FunctionQualifiers::AsyncConstStatus::NONE, false);\n+\n+    std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n+    if (ref.has_generics ())\n+      {\n+\tgeneric_params = lower_generic_params (ref.get_generic_params ());\n+      }\n+\n+    std::unique_ptr<HIR::Type> return_type\n+      = ref.has_return_type () ? std::unique_ptr<HIR::Type> (\n+\t  ASTLoweringType::translate (ref.get_return_type ().get ()))\n+\t\t\t       : nullptr;\n+\n+    std::vector<HIR::FunctionParam> function_params;\n+    for (auto &param : ref.get_function_params ())\n+      {\n+\tauto translated_pattern = std::unique_ptr<HIR::Pattern> (\n+\t  ASTLoweringPattern::translate (param.get_pattern ().get ()));\n+\tauto translated_type = std::unique_ptr<HIR::Type> (\n+\t  ASTLoweringType::translate (param.get_type ().get ()));\n+\n+\tauto crate_num = mappings->get_current_crate ();\n+\tAnalysis::NodeMapping mapping (crate_num, param.get_node_id (),\n+\t\t\t\t       mappings->get_next_hir_id (crate_num),\n+\t\t\t\t       UNKNOWN_LOCAL_DEFID);\n+\n+\tauto hir_param\n+\t  = HIR::FunctionParam (mapping, std::move (translated_pattern),\n+\t\t\t\tstd::move (translated_type),\n+\t\t\t\tparam.get_locus ());\n+\tfunction_params.push_back (hir_param);\n+      }\n+\n+    HIR::TraitFunctionDecl decl (ref.get_identifier (), std::move (qualifiers),\n+\t\t\t\t std::move (generic_params),\n+\t\t\t\t std::move (function_params),\n+\t\t\t\t std::move (return_type),\n+\t\t\t\t std::move (where_clause));\n+    HIR::Expr *block_expr\n+      = func.has_definition ()\n+\t  ? ASTLoweringExpr::translate (func.get_definition ().get ())\n+\t  : nullptr;\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, func.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    translated\n+      = new HIR::TraitItemFunc (mapping, std::move (decl),\n+\t\t\t\tstd::unique_ptr<HIR::Expr> (block_expr),\n+\t\t\t\tfunc.get_outer_attrs (), func.get_locus ());\n+  }\n+\n+  void visit (AST::TraitItemMethod &method) override\n+  {\n+    AST::TraitMethodDecl &ref = method.get_trait_method_decl ();\n+\n+    std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n+    HIR::WhereClause where_clause (std::move (where_clause_items));\n+    HIR::FunctionQualifiers qualifiers (\n+      HIR::FunctionQualifiers::AsyncConstStatus::NONE, false);\n+\n+    std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n+    if (ref.has_generics ())\n+      {\n+\tgeneric_params = lower_generic_params (ref.get_generic_params ());\n+      }\n+\n+    std::unique_ptr<HIR::Type> return_type\n+      = ref.has_return_type () ? std::unique_ptr<HIR::Type> (\n+\t  ASTLoweringType::translate (ref.get_return_type ().get ()))\n+\t\t\t       : nullptr;\n+\n+    HIR::SelfParam self_param = lower_self (ref.get_self_param ());\n+\n+    std::vector<HIR::FunctionParam> function_params;\n+    for (auto &param : ref.get_function_params ())\n+      {\n+\tauto translated_pattern = std::unique_ptr<HIR::Pattern> (\n+\t  ASTLoweringPattern::translate (param.get_pattern ().get ()));\n+\tauto translated_type = std::unique_ptr<HIR::Type> (\n+\t  ASTLoweringType::translate (param.get_type ().get ()));\n+\n+\tauto crate_num = mappings->get_current_crate ();\n+\tAnalysis::NodeMapping mapping (crate_num, param.get_node_id (),\n+\t\t\t\t       mappings->get_next_hir_id (crate_num),\n+\t\t\t\t       UNKNOWN_LOCAL_DEFID);\n+\n+\tauto hir_param\n+\t  = HIR::FunctionParam (mapping, std::move (translated_pattern),\n+\t\t\t\tstd::move (translated_type),\n+\t\t\t\tparam.get_locus ());\n+\tfunction_params.push_back (hir_param);\n+      }\n+\n+    HIR::TraitMethodDecl decl (ref.get_identifier (), std::move (qualifiers),\n+\t\t\t       std::move (generic_params),\n+\t\t\t       std::move (self_param),\n+\t\t\t       std::move (function_params),\n+\t\t\t       std::move (return_type),\n+\t\t\t       std::move (where_clause));\n+    HIR::Expr *block_expr\n+      = method.has_definition ()\n+\t  ? ASTLoweringExpr::translate (method.get_definition ().get ())\n+\t  : nullptr;\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, method.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    translated\n+      = new HIR::TraitItemMethod (mapping, std::move (decl),\n+\t\t\t\t  std::unique_ptr<HIR::Expr> (block_expr),\n+\t\t\t\t  method.get_outer_attrs (),\n+\t\t\t\t  method.get_locus ());\n+  }\n+\n+  void visit (AST::TraitItemConst &constant) override\n+  {\n+    HIR::Type *type = ASTLoweringType::translate (constant.get_type ().get ());\n+    HIR::Expr *expr\n+      = constant.has_expression ()\n+\t  ? ASTLoweringExpr::translate (constant.get_expr ().get ())\n+\t  : nullptr;\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, constant.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    translated = new HIR::TraitItemConst (mapping, constant.get_identifier (),\n+\t\t\t\t\t  std::unique_ptr<HIR::Type> (type),\n+\t\t\t\t\t  std::unique_ptr<HIR::Expr> (expr),\n+\t\t\t\t\t  constant.get_outer_attrs (),\n+\t\t\t\t\t  constant.get_locus ());\n+  }\n+\n+  void visit (AST::TraitItemType &type) override\n+  {\n+    std::vector<std::unique_ptr<HIR::TypeParamBound> > type_param_bounds;\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    translated\n+      = new HIR::TraitItemType (mapping, type.get_identifier (),\n+\t\t\t\tstd::move (type_param_bounds),\n+\t\t\t\ttype.get_outer_attrs (), type.get_locus ());\n+  }\n+\n+private:\n+  ASTLowerTraitItem () : translated (nullptr) {}\n+\n+  HIR::TraitItem *translated;\n+};\n+\n } // namespace HIR\n } // namespace Rust\n "}, {"sha": "206eeff01527a64cb248a7163abcd98ce7d2c714", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b3e488803f684d9d956223a7f410d219cced24/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b3e488803f684d9d956223a7f410d219cced24/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=69b3e488803f684d9d956223a7f410d219cced24", "patch": "@@ -406,6 +406,149 @@ class ASTLoweringItem : public ASTLoweringBase\n       }\n   }\n \n+  void visit (AST::Trait &trait) override\n+  {\n+    std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n+\n+    HIR::WhereClause where_clause (std::move (where_clause_items));\n+    HIR::Visibility vis = HIR::Visibility::create_public ();\n+\n+    std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n+    if (trait.has_generics ())\n+      {\n+\tgeneric_params = lower_generic_params (trait.get_generic_params ());\n+\n+\tfor (auto &generic_param : generic_params)\n+\t  {\n+\t    switch (generic_param->get_kind ())\n+\t      {\n+\t\tcase HIR::GenericParam::GenericKind::TYPE: {\n+\t\t  const HIR::TypeParam &t\n+\t\t    = static_cast<const HIR::TypeParam &> (*generic_param);\n+\n+\t\t  if (t.has_type ())\n+\t\t    {\n+\t\t      // see https://github.com/rust-lang/rust/issues/36887\n+\t\t      rust_error_at (\n+\t\t\tt.get_locus (),\n+\t\t\t\"defaults for type parameters are not allowed here\");\n+\t\t    }\n+\t\t}\n+\t\tbreak;\n+\n+\t      default:\n+\t\tbreak;\n+\t      }\n+\t  }\n+      }\n+\n+    std::vector<std::unique_ptr<HIR::TypeParamBound> > type_param_bounds;\n+\n+    std::vector<std::unique_ptr<HIR::TraitItem> > trait_items;\n+    for (auto &item : trait.get_trait_items ())\n+      {\n+\tHIR::TraitItem *lowered = ASTLowerTraitItem::translate (item.get ());\n+\ttrait_items.push_back (std::unique_ptr<HIR::TraitItem> (lowered));\n+      }\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, trait.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+\n+    translated = new HIR::Trait (mapping, trait.get_identifier (),\n+\t\t\t\t trait.is_unsafe (), std::move (generic_params),\n+\t\t\t\t std::move (type_param_bounds), where_clause,\n+\t\t\t\t std::move (trait_items), vis,\n+\t\t\t\t trait.get_outer_attrs (), trait.get_locus ());\n+\n+    mappings->insert_defid_mapping (mapping.get_defid (), translated);\n+    mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t       translated);\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       trait.get_locus ());\n+  }\n+\n+  void visit (AST::TraitImpl &impl_block) override\n+  {\n+    std::vector<std::unique_ptr<HIR::WhereClauseItem> > where_clause_items;\n+    HIR::WhereClause where_clause (std::move (where_clause_items));\n+    HIR::Visibility vis = HIR::Visibility::create_public ();\n+\n+    std::vector<std::unique_ptr<HIR::GenericParam> > generic_params;\n+    if (impl_block.has_generics ())\n+      {\n+\tgeneric_params\n+\t  = lower_generic_params (impl_block.get_generic_params ());\n+\n+\tfor (auto &generic_param : generic_params)\n+\t  {\n+\t    switch (generic_param->get_kind ())\n+\t      {\n+\t\tcase HIR::GenericParam::GenericKind::TYPE: {\n+\t\t  const HIR::TypeParam &t\n+\t\t    = static_cast<const HIR::TypeParam &> (*generic_param);\n+\n+\t\t  if (t.has_type ())\n+\t\t    {\n+\t\t      // see https://github.com/rust-lang/rust/issues/36887\n+\t\t      rust_error_at (\n+\t\t\tt.get_locus (),\n+\t\t\t\"defaults for type parameters are not allowed here\");\n+\t\t    }\n+\t\t}\n+\t\tbreak;\n+\n+\t      default:\n+\t\tbreak;\n+\t      }\n+\t  }\n+      }\n+\n+    HIR::Type *trait_type\n+      = ASTLoweringType::translate (impl_block.get_type ().get ());\n+    HIR::Type *trait = nullptr;\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, impl_block.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+\n+    std::vector<std::unique_ptr<HIR::TraitImplItem> > impl_items;\n+    std::vector<HirId> impl_item_ids;\n+    for (auto &impl_item : impl_block.get_impl_items ())\n+      {\n+\tHIR::TraitImplItem *lowered\n+\t  = ASTLowerImplItem::translate (impl_item.get (),\n+\t\t\t\t\t mapping.get_hirid ());\n+\timpl_items.push_back (std::unique_ptr<HIR::TraitImplItem> (lowered));\n+\timpl_item_ids.push_back (\n+\t  lowered->get_trait_impl_mappings ().get_hirid ());\n+      }\n+\n+    translated\n+      = new HIR::TraitImpl (mapping, std::unique_ptr<HIR::Type> (trait),\n+\t\t\t    impl_block.is_unsafe (), impl_block.is_exclam (),\n+\t\t\t    std::move (impl_items), std::move (generic_params),\n+\t\t\t    std::unique_ptr<HIR::Type> (trait_type),\n+\t\t\t    where_clause, vis, impl_block.get_inner_attrs (),\n+\t\t\t    impl_block.get_outer_attrs (),\n+\t\t\t    impl_block.get_locus ());\n+\n+    mappings->insert_defid_mapping (mapping.get_defid (), translated);\n+    mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t       translated);\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       impl_block.get_locus ());\n+\n+    for (auto &impl_item_id : impl_item_ids)\n+      {\n+\tmappings->insert_impl_item_mapping (impl_item_id,\n+\t\t\t\t\t    static_cast<HIR::InherentImpl *> (\n+\t\t\t\t\t      translated));\n+      }\n+  }\n+\n private:\n   ASTLoweringItem () : translated (nullptr) {}\n "}, {"sha": "1abdd3cc8a75e86c6d4bb5b0b817a54c810e734d", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b3e488803f684d9d956223a7f410d219cced24/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b3e488803f684d9d956223a7f410d219cced24/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=69b3e488803f684d9d956223a7f410d219cced24", "patch": "@@ -347,5 +347,21 @@ ASTLoweringBase::lower_generic_args (AST::GenericArgs &args)\n \t\t\t   std::move (binding_args), args.get_locus ());\n }\n \n+HIR::SelfParam\n+ASTLoweringBase::lower_self (AST::SelfParam &self)\n+{\n+  HIR::Type *type = self.has_type ()\n+\t\t      ? ASTLoweringType::translate (self.get_type ().get ())\n+\t\t      : nullptr;\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, self.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n+  return HIR::SelfParam (mapping, std::unique_ptr<HIR::Type> (type),\n+\t\t\t self.get_is_mut (), self.get_locus ());\n+}\n+\n } // namespace HIR\n } // namespace Rust"}, {"sha": "63eb1bb17bf20ffe2a3bbca8f0ae7328ad8150f4", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b3e488803f684d9d956223a7f410d219cced24/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b3e488803f684d9d956223a7f410d219cced24/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=69b3e488803f684d9d956223a7f410d219cced24", "patch": "@@ -1170,7 +1170,7 @@ TraitImpl::as_string () const\n       str += \"false\";\n     }\n \n-  str += \"\\n TypePath (to trait): \" + trait_path.as_string ();\n+  str += \"\\n TypePath (to trait): \" + trait_path->as_string ();\n \n   str += \"\\n Type (struct to impl on): \" + trait_type->as_string ();\n "}, {"sha": "e466a35898f9bdb589f88c06844495d7bde22005", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 45, "deletions": 16, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b3e488803f684d9d956223a7f410d219cced24/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b3e488803f684d9d956223a7f410d219cced24/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=69b3e488803f684d9d956223a7f410d219cced24", "patch": "@@ -700,6 +700,11 @@ class Method : public InherentImplItem, public TraitImplItem\n     return get_mappings ();\n   };\n \n+  Analysis::NodeMapping get_trait_impl_mappings () const override\n+  {\n+    return get_mappings ();\n+  };\n+\n   // Returns whether function has return type - if not, it is void.\n   bool has_function_return_type () const { return return_type != nullptr; }\n \n@@ -748,6 +753,8 @@ class Method : public InherentImplItem, public TraitImplItem\n \n   Location get_impl_locus () const final { return get_locus (); }\n \n+  Location get_trait_impl_locus () const final { return get_locus (); }\n+\n   std::unique_ptr<BlockExpr> &get_function_body () { return function_body; }\n   const std::unique_ptr<BlockExpr> &get_function_body () const\n   {\n@@ -1370,13 +1377,20 @@ class Function : public VisItem, public InherentImplItem, public TraitImplItem\n \n   Location get_impl_locus () const final { return get_locus (); }\n \n+  Location get_trait_impl_locus () const final { return get_locus (); }\n+\n   void accept_vis (HIRVisitor &vis) override;\n \n   Analysis::NodeMapping get_impl_mappings () const override\n   {\n     return get_mappings ();\n   };\n \n+  Analysis::NodeMapping get_trait_impl_mappings () const override\n+  {\n+    return get_mappings ();\n+  };\n+\n   std::vector<FunctionParam> &get_function_params () { return function_params; }\n   const std::vector<FunctionParam> &get_function_params () const\n   {\n@@ -1518,6 +1532,8 @@ class TypeAlias : public VisItem, public TraitImplItem\n \n   Location get_locus () const { return locus; }\n \n+  Location get_trait_impl_locus () const final { return get_locus (); }\n+\n   void accept_vis (HIRVisitor &vis) override;\n \n   std::vector<std::unique_ptr<GenericParam> > &get_generic_params ()\n@@ -1545,6 +1561,11 @@ class TypeAlias : public VisItem, public TraitImplItem\n \n   Identifier get_new_type_name () const { return new_type_name; }\n \n+  Analysis::NodeMapping get_trait_impl_mappings () const override\n+  {\n+    return get_mappings ();\n+  };\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -2271,6 +2292,8 @@ class ConstantItem : public VisItem,\n \n   Location get_impl_locus () const final { return get_locus (); }\n \n+  Location get_trait_impl_locus () const final { return get_locus (); }\n+\n   void accept_vis (HIRVisitor &vis) override;\n \n   Type *get_type () { return type.get (); }\n@@ -2284,6 +2307,11 @@ class ConstantItem : public VisItem,\n     return get_mappings ();\n   };\n \n+  Analysis::NodeMapping get_trait_impl_mappings () const override\n+  {\n+    return get_mappings ();\n+  };\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -2478,16 +2506,16 @@ class TraitItemFunc : public TraitItem\n {\n   AST::AttrVec outer_attrs;\n   TraitFunctionDecl decl;\n-  std::unique_ptr<BlockExpr> block_expr;\n+  std::unique_ptr<Expr> block_expr;\n   Location locus;\n \n public:\n   // Returns whether function has a definition or is just a declaration.\n   bool has_definition () const { return block_expr != nullptr; }\n \n   TraitItemFunc (Analysis::NodeMapping mappings, TraitFunctionDecl decl,\n-\t\t std::unique_ptr<BlockExpr> block_expr,\n-\t\t AST::AttrVec outer_attrs, Location locus)\n+\t\t std::unique_ptr<Expr> block_expr, AST::AttrVec outer_attrs,\n+\t\t Location locus)\n     : TraitItem (mappings), outer_attrs (std::move (outer_attrs)),\n       decl (std::move (decl)), block_expr (std::move (block_expr)),\n       locus (locus)\n@@ -2499,7 +2527,7 @@ class TraitItemFunc : public TraitItem\n       decl (other.decl), locus (other.locus)\n   {\n     if (other.block_expr != nullptr)\n-      block_expr = other.block_expr->clone_block_expr ();\n+      block_expr = other.block_expr->clone_expr ();\n   }\n \n   // Overloaded assignment operator to clone\n@@ -2511,7 +2539,7 @@ class TraitItemFunc : public TraitItem\n     locus = other.locus;\n     mappings = other.mappings;\n     if (other.block_expr != nullptr)\n-      block_expr = other.block_expr->clone_block_expr ();\n+      block_expr = other.block_expr->clone_expr ();\n \n     return *this;\n   }\n@@ -2526,7 +2554,7 @@ class TraitItemFunc : public TraitItem\n \n   void accept_vis (HIRVisitor &vis) override;\n \n-  BlockExpr *get_block_expr () { return block_expr.get (); }\n+  std::unique_ptr<Expr> &get_block_expr () { return block_expr; }\n \n protected:\n   // Clone function implementation as (not pure) virtual method\n@@ -2633,16 +2661,16 @@ class TraitItemMethod : public TraitItem\n {\n   AST::AttrVec outer_attrs;\n   TraitMethodDecl decl;\n-  std::unique_ptr<BlockExpr> block_expr;\n+  std::unique_ptr<Expr> block_expr;\n   Location locus;\n \n public:\n   // Returns whether method has a definition or is just a declaration.\n   bool has_definition () const { return block_expr != nullptr; }\n \n   TraitItemMethod (Analysis::NodeMapping mappings, TraitMethodDecl decl,\n-\t\t   std::unique_ptr<BlockExpr> block_expr,\n-\t\t   AST::AttrVec outer_attrs, Location locus)\n+\t\t   std::unique_ptr<Expr> block_expr, AST::AttrVec outer_attrs,\n+\t\t   Location locus)\n     : TraitItem (mappings), outer_attrs (std::move (outer_attrs)),\n       decl (std::move (decl)), block_expr (std::move (block_expr)),\n       locus (locus)\n@@ -2651,7 +2679,7 @@ class TraitItemMethod : public TraitItem\n   // Copy constructor with clone\n   TraitItemMethod (TraitItemMethod const &other)\n     : TraitItem (other.mappings), outer_attrs (other.outer_attrs),\n-      decl (other.decl), block_expr (other.block_expr->clone_block_expr ()),\n+      decl (other.decl), block_expr (other.block_expr->clone_expr ()),\n       locus (other.locus)\n   {}\n \n@@ -2661,7 +2689,7 @@ class TraitItemMethod : public TraitItem\n     TraitItem::operator= (other);\n     outer_attrs = other.outer_attrs;\n     decl = other.decl;\n-    block_expr = other.block_expr->clone_block_expr ();\n+    block_expr = other.block_expr->clone_expr ();\n     locus = other.locus;\n     mappings = other.mappings;\n \n@@ -2678,7 +2706,7 @@ class TraitItemMethod : public TraitItem\n \n   void accept_vis (HIRVisitor &vis) override;\n \n-  BlockExpr *get_block_expr () { return block_expr.get (); }\n+  std::unique_ptr<Expr> &get_block_expr () { return block_expr; }\n \n protected:\n   // Clone function implementation as (not pure) virtual method\n@@ -3105,7 +3133,7 @@ class TraitImpl : public Impl\n {\n   bool has_unsafe;\n   bool has_exclam;\n-  TypePath trait_path;\n+  std::unique_ptr<Type> trait_path;\n \n   // bool has_impl_items;\n   std::vector<std::unique_ptr<TraitImplItem> > impl_items;\n@@ -3117,7 +3145,7 @@ class TraitImpl : public Impl\n   bool has_impl_items () const { return !impl_items.empty (); }\n \n   // Mega-constructor\n-  TraitImpl (Analysis::NodeMapping mappings, TypePath trait_path,\n+  TraitImpl (Analysis::NodeMapping mappings, std::unique_ptr<Type> trait_path,\n \t     bool is_unsafe, bool has_exclam,\n \t     std::vector<std::unique_ptr<TraitImplItem> > impl_items,\n \t     std::vector<std::unique_ptr<GenericParam> > generic_params,\n@@ -3136,7 +3164,8 @@ class TraitImpl : public Impl\n   // Copy constructor with vector clone\n   TraitImpl (TraitImpl const &other)\n     : Impl (other), has_unsafe (other.has_unsafe),\n-      has_exclam (other.has_exclam), trait_path (other.trait_path)\n+      has_exclam (other.has_exclam),\n+      trait_path (other.trait_path->clone_type ())\n   {\n     impl_items.reserve (other.impl_items.size ());\n     for (const auto &e : other.impl_items)\n@@ -3147,7 +3176,7 @@ class TraitImpl : public Impl\n   TraitImpl &operator= (TraitImpl const &other)\n   {\n     Impl::operator= (other);\n-    trait_path = other.trait_path;\n+    trait_path = other.trait_path->clone_type ();\n     has_unsafe = other.has_unsafe;\n     has_exclam = other.has_exclam;\n "}, {"sha": "0cc9d0803ee679f486d749af3993a9ec14f219b6", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b3e488803f684d9d956223a7f410d219cced24/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b3e488803f684d9d956223a7f410d219cced24/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=69b3e488803f684d9d956223a7f410d219cced24", "patch": "@@ -838,6 +838,10 @@ class TraitImplItem\n   virtual std::string as_string () const = 0;\n \n   virtual void accept_vis (HIRVisitor &vis) = 0;\n+\n+  virtual Analysis::NodeMapping get_trait_impl_mappings () const = 0;\n+\n+  virtual Location get_trait_impl_locus () const = 0;\n };\n \n // A crate HIR object - holds all the data for a single compilation unit"}]}