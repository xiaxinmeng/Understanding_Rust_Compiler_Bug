{"sha": "082ea1dcd5541bcbda512a1ba758997e54e3ae26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgyZWExZGNkNTU0MWJjYmRhNTEyYTFiYTc1ODk5N2U1NGUzYWUyNg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-08-21T23:34:54Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-08-21T23:34:54Z"}, "message": "re PR target/39423 ([SH]  performance regression: lost mov @(disp,Rn))\n\n\tPR target/39423\n\t* config/sh/sh.md (*movhi_index_disp): Add support for SH2A movu.w insn.\n\n\tPR target/39423\n\t* gcc.target/sh/pr39423-2.c: New.\n\nFrom-SVN: r190579", "tree": {"sha": "08d8b1ddf0f7cf20cea6df24ddf79766ffaddf13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08d8b1ddf0f7cf20cea6df24ddf79766ffaddf13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/082ea1dcd5541bcbda512a1ba758997e54e3ae26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/082ea1dcd5541bcbda512a1ba758997e54e3ae26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/082ea1dcd5541bcbda512a1ba758997e54e3ae26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/082ea1dcd5541bcbda512a1ba758997e54e3ae26/comments", "author": null, "committer": null, "parents": [{"sha": "1aee89910ada0e1d9ab68263e441341038bf9cad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aee89910ada0e1d9ab68263e441341038bf9cad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aee89910ada0e1d9ab68263e441341038bf9cad"}], "stats": {"total": 57, "additions": 52, "deletions": 5}, "files": [{"sha": "30d23355c5cfcdf085d522673b0f34bf83e48b4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082ea1dcd5541bcbda512a1ba758997e54e3ae26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082ea1dcd5541bcbda512a1ba758997e54e3ae26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=082ea1dcd5541bcbda512a1ba758997e54e3ae26", "patch": "@@ -1,3 +1,8 @@\n+2012-08-21  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/39423\n+\t* config/sh/sh.md (*movhi_index_disp): Add support for SH2A movu.w insn.\n+\n 2012-08-21  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR middle-end/54332"}, {"sha": "bc2a6c1a8d2f4e720fc39988944e0c720f69f901", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082ea1dcd5541bcbda512a1ba758997e54e3ae26/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082ea1dcd5541bcbda512a1ba758997e54e3ae26/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=082ea1dcd5541bcbda512a1ba758997e54e3ae26", "patch": "@@ -5793,12 +5793,35 @@ label:\n    (clobber (reg:SI T_REG))]\n   \"TARGET_SH1\"\n   \"#\"\n-  \"&& 1\"\n-  [(parallel [(set (match_dup 0) (sign_extend:SI (match_dup 1)))\n-\t      (clobber (reg:SI T_REG))])\n-   (set (match_dup 0) (zero_extend:SI (match_dup 2)))]\n+  \"&& can_create_pseudo_p ()\"\n+  [(const_int 0)]\n {\n-  operands[2] = gen_lowpart (HImode, operands[0]);\n+  rtx mem = operands[1];\n+  rtx plus0_rtx = XEXP (mem, 0);\n+  rtx plus1_rtx = XEXP (plus0_rtx, 0);\n+  rtx mult_rtx = XEXP (plus1_rtx, 0);\n+\n+  rtx op_1 = XEXP (mult_rtx, 0);\n+  rtx op_2 = GEN_INT (exact_log2 (INTVAL (XEXP (mult_rtx, 1))));\n+  rtx op_3 = XEXP (plus1_rtx, 1);\n+  rtx op_4 = XEXP (plus0_rtx, 1);\n+  rtx op_5 = gen_reg_rtx (SImode);\n+  rtx op_6 = gen_reg_rtx (SImode);\n+  rtx op_7 = replace_equiv_address (mem, gen_rtx_PLUS (SImode, op_6, op_4));\n+\n+  emit_insn (gen_ashlsi3 (op_5, op_1, op_2));\n+  emit_insn (gen_addsi3 (op_6, op_5, op_3));\n+\n+  /* On SH2A the movu.w insn can be used for zero extending loads.  */\n+  if (TARGET_SH2A)\n+    emit_insn (gen_zero_extendhisi2 (operands[0], op_7));\n+  else\n+    {\n+      emit_insn (gen_extendhisi2 (operands[0], op_7));\n+      emit_insn (gen_zero_extendhisi2 (operands[0],\n+\t\t\t\t       gen_lowpart (HImode, operands[0])));\n+    }\n+  DONE;\n })\n \n (define_insn_and_split \"*movsi_index_disp\""}, {"sha": "672438080e141bcddc6ca0ec64dd035241b89896", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082ea1dcd5541bcbda512a1ba758997e54e3ae26/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082ea1dcd5541bcbda512a1ba758997e54e3ae26/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=082ea1dcd5541bcbda512a1ba758997e54e3ae26", "patch": "@@ -1,3 +1,8 @@\n+2012-08-21  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/39423\n+\t* gcc.target/sh/pr39423-2.c: New.\n+\n 2012-08-21  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* gcc.dg/tree-ssa/forwprop-19.c: New testcase."}, {"sha": "8e71505f21da56df848e563048456dcd239e9a66", "filename": "gcc/testsuite/gcc.target/sh/pr39423-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/082ea1dcd5541bcbda512a1ba758997e54e3ae26/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr39423-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/082ea1dcd5541bcbda512a1ba758997e54e3ae26/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr39423-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr39423-2.c?ref=082ea1dcd5541bcbda512a1ba758997e54e3ae26", "patch": "@@ -0,0 +1,14 @@\n+/* Check that displacement addressing is used for indexed addresses with a\n+   small offset, instead of re-calculating the index and that the movu.w\n+   instruction is used on SH2A.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n+/* { dg-final { scan-assembler-not \"add\\t#1\" } } */\n+/* { dg-final { scan-assembler \"movu.w\" } } */\n+\n+int\n+test_00 (unsigned short tab[], int index)\n+{\n+  return tab[index + 1];\n+}"}]}