{"sha": "bafa88c2369683a92b1fab984a7a410eac3712a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFmYTg4YzIzNjk2ODNhOTJiMWZhYjk4NGE3YTQxMGVhYzM3MTJhNQ==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2012-12-02T04:26:39Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2012-12-02T04:26:39Z"}, "message": "extend.texi: Various corrections to punctuation and grammar throughout the file.\n\n2012-12-02  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/extend.texi: Various corrections to punctuation and grammar\n\tthroughout the file.  Use consistent terminology and proper names.\n\tCorrect some minor markup issues.\n\nFrom-SVN: r194049", "tree": {"sha": "dfb397c204ac571263f1f24169c48dd3de42e6e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfb397c204ac571263f1f24169c48dd3de42e6e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bafa88c2369683a92b1fab984a7a410eac3712a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bafa88c2369683a92b1fab984a7a410eac3712a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bafa88c2369683a92b1fab984a7a410eac3712a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bafa88c2369683a92b1fab984a7a410eac3712a5/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8248c7afba639af60af4b2eec4774555a79b54c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8248c7afba639af60af4b2eec4774555a79b54c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8248c7afba639af60af4b2eec4774555a79b54c8"}], "stats": {"total": 287, "additions": 158, "deletions": 129}, "files": [{"sha": "ff73026b90660f7faff06f0b2c0a10503a704a68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bafa88c2369683a92b1fab984a7a410eac3712a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bafa88c2369683a92b1fab984a7a410eac3712a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bafa88c2369683a92b1fab984a7a410eac3712a5", "patch": "@@ -1,3 +1,10 @@\n+2012-12-02  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tgcc/\n+\t* doc/extend.texi: Various corrections to punctuation and grammar\n+\tthroughout the file.  Use consistent terminology and proper names.\n+\tCorrect some minor markup issues.\n+\n 2010-12-01  Xinliang David Li  <davidxl@google.com>\n \n         * config/i386/i386.c: Allow sign extend instructions (cltd etc)"}, {"sha": "f12b48867ac2443b8ba652d9ae657eee046cdada", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 151, "deletions": 129, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bafa88c2369683a92b1fab984a7a410eac3712a5/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bafa88c2369683a92b1fab984a7a410eac3712a5/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=bafa88c2369683a92b1fab984a7a410eac3712a5", "patch": "@@ -170,8 +170,8 @@ statement expression, and that is used to invoke @code{Foo}.\n Therefore the @code{this} pointer observed by @code{Foo} is not the\n address of @code{a}.\n \n-Any temporaries created within a statement within a statement expression\n-are destroyed at the statement's end.  This makes statement\n+In a statement expression, any temporaries created within a statement\n+are destroyed at that statement's end.  This makes statement\n expressions inside macros slightly different from function calls.  In\n the latter case temporaries introduced during argument evaluation are\n destroyed at the end of the statement that includes the function\n@@ -196,22 +196,22 @@ the initialization of @code{b}.  In the @code{function} case that\n temporary is destroyed when the function returns.\n \n These considerations mean that it is probably a bad idea to use\n-statement-expressions of this form in header files that are designed to\n+statement expressions of this form in header files that are designed to\n work with C++.  (Note that some versions of the GNU C Library contained\n-header files using statement-expression that lead to precisely this\n+header files using statement expressions that lead to precisely this\n bug.)\n \n Jumping into a statement expression with @code{goto} or using a\n @code{switch} statement outside the statement expression with a\n @code{case} or @code{default} label inside the statement expression is\n not permitted.  Jumping into a statement expression with a computed\n-@code{goto} (@pxref{Labels as Values}) yields undefined behavior.\n+@code{goto} (@pxref{Labels as Values}) has undefined behavior.\n Jumping out of a statement expression is permitted, but if the\n statement expression is part of a larger expression then it is\n unspecified which other subexpressions of that expression have been\n evaluated except where the language definition requires certain\n subexpressions to be evaluated before or after the statement\n-expression.  In any case, as with a function call the evaluation of a\n+expression.  In any case, as with a function call, the evaluation of a\n statement expression is not interleaved with the evaluation of other\n parts of the containing expression.  For example,\n \n@@ -278,7 +278,7 @@ do @{                                              \\\n @} while (0)\n @end smallexample\n \n-This could also be written using a statement-expression:\n+This could also be written using a statement expression:\n \n @smallexample\n #define SEARCH(array, target)                     \\\n@@ -391,9 +391,12 @@ variable initializer, inlining and cloning is forbidden.\n @cindex thunks\n \n A @dfn{nested function} is a function defined inside another function.\n-(Nested functions are not supported for GNU C++.)  The nested function's\n-name is local to the block where it is defined.  For example, here we\n-define a nested function named @code{square}, and call it twice:\n+Nested functions are supported as an extension in GNU C, but are not\n+supported by GNU C++.\n+\n+The nested function's name is local to the block where it is defined.\n+For example, here we define a nested function named @code{square}, and\n+call it twice:\n \n @smallexample\n @group\n@@ -665,16 +668,17 @@ If you are writing a header file that must work when included in ISO C\n programs, write @code{__typeof__} instead of @code{typeof}.\n @xref{Alternate Keywords}.\n \n-A @code{typeof}-construct can be used anywhere a typedef name could be\n+A @code{typeof} construct can be used anywhere a typedef name can be\n used.  For example, you can use it in a declaration, in a cast, or inside\n of @code{sizeof} or @code{typeof}.\n \n The operand of @code{typeof} is evaluated for its side effects if and\n only if it is an expression of variably modified type or the name of\n such a type.\n \n-@code{typeof} is often useful in conjunction with the\n-statements-within-expressions feature.  Here is how the two together can\n+@code{typeof} is often useful in conjunction with\n+statement expressions (@pxref{Statement Exprs}).\n+Here is how the two together can\n be used to define a safe ``maximum'' macro which operates on any\n arithmetic type and evaluates each of its arguments exactly once:\n \n@@ -838,13 +842,13 @@ long int}, add the suffix @samp{ULL} to the integer.\n You can use these types in arithmetic like any other integer types.\n Addition, subtraction, and bitwise boolean operations on these types\n are open-coded on all types of machines.  Multiplication is open-coded\n-if the machine supports fullword-to-doubleword a widening multiply\n+if the machine supports a fullword-to-doubleword widening multiply\n instruction.  Division and shifts are open-coded only on machines that\n provide special support.  The operations that are not open-coded use\n special library routines that come with GCC@.\n \n There may be pitfalls when you use @code{long long} types for function\n-arguments, unless you declare function prototypes.  If a function\n+arguments without function prototypes.  If a function\n expects type @code{int} for its argument, and you pass a value of type\n @code{long long int}, confusion results because the caller and the\n subroutine disagree about the number of bytes for the argument.\n@@ -858,7 +862,7 @@ Likewise, if the function expects @code{long long int} and you pass\n @cindex @code{__complex__} keyword\n \n ISO C99 supports complex floating data types, and as an extension GCC\n-supports them in C90 mode and in C++, and supports complex integer data\n+supports them in C90 mode and in C++.  GCC also supports complex integer data\n types which are not part of ISO C99.  You can declare complex types\n using the keyword @code{_Complex}.  As an extension, the older GNU\n keyword @code{__complex__} is also supported.\n@@ -876,7 +880,7 @@ has type @code{_Complex float} and @code{3i} has type\n @code{_Complex int}.  Such a constant always has a pure imaginary\n value, but you can form any complex value you like by adding one to a\n real constant.  This is a GNU extension; if you have an ISO C99\n-conforming C library (such as GNU libc), and want to construct complex\n+conforming C library (such as the GNU C Library), and want to construct complex\n constants of floating type, you should include @code{<complex.h>} and\n use the macros @code{I} or @code{_Complex_I} instead.\n \n@@ -899,8 +903,8 @@ provided as built-in functions by GCC@.\n \n GCC can allocate complex automatic variables in a noncontiguous\n fashion; it's even possible for the real part to be in a register while\n-the imaginary part is on the stack (or vice-versa).  Only the DWARF2\n-debug info format can represent this, so use of DWARF2 is recommended.\n+the imaginary part is on the stack (or vice versa).  Only the DWARF 2\n+debug info format can represent this, so use of DWARF 2 is recommended.\n If you are using the stabs debug info format, GCC describes a noncontiguous\n complex variable as if it were two separate variables of noncomplex type.\n If the variable's actual name is @code{foo}, the two fictitious\n@@ -935,7 +939,7 @@ typedef _Complex float __attribute__((mode(XC))) _Complex80;\n @end smallexample\n \n Not all targets support additional floating-point types.  @code{__float80}\n-and @code{__float128} types are supported on i386, x86_64 and ia64 targets.\n+and @code{__float128} types are supported on i386, x86_64 and IA-64 targets.\n The @code{__float128} type is supported on hppa HP-UX targets.\n \n @node Half-Precision\n@@ -1039,7 +1043,7 @@ the technical report.\n @end itemize\n \n Types @code{_Decimal32}, @code{_Decimal64}, and @code{_Decimal128}\n-are supported by the DWARF2 debug information format.\n+are supported by the DWARF 2 debug information format.\n \n @node Hex Floats\n @section Hex Floats\n@@ -1213,7 +1217,7 @@ is incomplete:\n Pragmas to control overflow and rounding behaviors are not implemented.\n @end itemize\n \n-Fixed-point types are supported by the DWARF2 debug information format.\n+Fixed-point types are supported by the DWARF 2 debug information format.\n \n @node Named Address Spaces\n @section Named Address Spaces\n@@ -1382,10 +1386,10 @@ Such code requires at least binutils 2.23, see\n @subsection M32C Named Address Spaces\n @cindex @code{__far} M32C Named Address Spaces\n \n-On the M32C target, with the R8C and M16C cpu variants, variables\n+On the M32C target, with the R8C and M16C CPU variants, variables\n qualified with @code{__far} are accessed using 32-bit addresses in\n order to access memory beyond the first 64@tie{}Ki bytes.  If\n-@code{__far} is used with the M32CM or M32C cpu variants, it has no\n+@code{__far} is used with the M32CM or M32C CPU variants, it has no\n effect.\n \n @subsection RL78 Named Address Spaces\n@@ -1537,7 +1541,8 @@ Variable-length automatic arrays are allowed in ISO C99, and as an\n extension GCC accepts them in C90 mode and in C++.  These arrays are\n declared like any other automatic arrays, but with a length that is not\n a constant expression.  The storage is allocated at the point of\n-declaration and deallocated when the brace-level is exited.  For\n+declaration and deallocated when the block scope containing the declaration\n+exits.  For\n example:\n \n @smallexample\n@@ -2039,7 +2044,7 @@ case 1...5:\n A cast to union type is similar to other casts, except that the type\n specified is a union type.  You can specify the type either with\n @code{union @var{tag}} or with a typedef name.  A cast to union is actually\n-a constructor though, not a cast, and hence does not yield an lvalue like\n+a constructor, not a cast, and hence does not yield an lvalue like\n normal casts.  (@xref{Compound Literals}.)\n \n The types that may be cast to the union type are those of the members\n@@ -2463,7 +2468,7 @@ using thunks.\n On the SH Symbian OS target the @code{dllimport} attribute also has\n another affect---it can cause the vtable and run-time type information\n for a class to be exported.  This happens when the class has a\n-dllimport'ed constructor or a non-inline, non-pure virtual function\n+dllimported constructor or a non-inline, non-pure virtual function\n and, for either of those two conditions, the class also has an inline\n constructor or destructor and has a key function that is defined in\n the current translation unit.\n@@ -2507,7 +2512,16 @@ attribute is present.\n @cindex @code{externally_visible} attribute.\n This attribute, attached to a global variable or function, nullifies\n the effect of the @option{-fwhole-program} command-line option, so the\n-object remains visible outside the current compilation unit. If @option{-fwhole-program} is used together with @option{-flto} and @command{gold} is used as the linker plugin, @code{externally_visible} attributes are automatically added to functions (not variable yet due to a current @command{gold} issue) that are accessed outside of LTO objects according to resolution file produced by @command{gold}.  For other linkers that cannot generate resolution file, explicit @code{externally_visible} attributes are still necessary.\n+object remains visible outside the current compilation unit.\n+\n+If @option{-fwhole-program} is used together with @option{-flto} and \n+@command{gold} is used as the linker plugin, \n+@code{externally_visible} attributes are automatically added to functions \n+(not variable yet due to a current @command{gold} issue) \n+that are accessed outside of LTO objects according to resolution file\n+produced by @command{gold}.\n+For other linkers that cannot generate resolution file,\n+explicit @code{externally_visible} attributes are still necessary.\n \n @item far\n @cindex functions that handle memory bank switching\n@@ -2584,10 +2598,11 @@ interpreted, and should be @code{printf}, @code{scanf}, @code{strftime},\n @code{__scanf__}, @code{__strftime__} or @code{__strfmon__}.)  On\n MinGW targets, @code{ms_printf}, @code{ms_scanf}, and\n @code{ms_strftime} are also present.\n-@var{archtype} values such as @code{printf} refer to the formats accepted\n-by the system's C runtime library, while @code{gnu_} values always refer\n+@var{archetype} values such as @code{printf} refer to the formats accepted\n+by the system's C runtime library,\n+while values prefixed with @samp{gnu_} always refer\n to the formats accepted by the GNU C Library.  On Microsoft Windows\n-targets, @code{ms_} values refer to the formats accepted by the\n+targets, values prefixed with @samp{ms_} refer to the formats accepted by the\n @file{msvcrt.dll} library.\n The parameter @var{string-index}\n specifies which argument is the format string argument (starting\n@@ -2667,7 +2682,7 @@ string argument (starting from one).  Since non-static C++ methods have\n an implicit @code{this} argument, the arguments of such methods should\n be counted from two.\n \n-The @code{format-arg} attribute allows you to identify your own\n+The @code{format_arg} attribute allows you to identify your own\n functions that modify format strings, so that GCC can check the\n calls to @code{printf}, @code{scanf}, @code{strftime} or @code{strfmon}\n type function whose operands are a call to one of your own function.\n@@ -2810,7 +2825,7 @@ Note, on the AVR, the hardware globally disables interrupts when an\n interrupt is executed.  The first instruction of an interrupt handler\n declared with this attribute is a @code{SEI} instruction to\n re-enable interrupts.  See also the @code{signal} function attribute\n-that does not insert a @code{SEI} instuction.  If both @code{signal} and\n+that does not insert a @code{SEI} instruction.  If both @code{signal} and\n @code{interrupt} are specified for the same function, @code{signal}\n is silently ignored.\n \n@@ -2821,7 +2836,9 @@ adding an optional parameter to the interrupt attribute like this:\n void f () __attribute__ ((interrupt (\"IRQ\")));\n @end smallexample\n \n-Permissible values for this parameter are: IRQ, FIQ, SWI, ABORT and UNDEF@.\n+@noindent\n+Permissible values for this parameter are: @code{IRQ}, @code{FIQ},\n+@code{SWI}, @code{ABORT} and @code{UNDEF}.\n \n On ARMv7-M the interrupt type is ignored, and the attribute means the function\n may be called with a word-aligned stack pointer.\n@@ -3085,14 +3102,14 @@ requires the @option{-maccumulate-outgoing-args} option.\n @item callee_pop_aggregate_return (@var{number})\n @cindex @code{callee_pop_aggregate_return} attribute\n \n-On 32-bit i?86-*-* targets, you can control by those attribute for\n-aggregate return in memory, if the caller is responsible to pop the hidden\n-pointer together with the rest of the arguments - @var{number} equal to\n-zero -, or if the callee is responsible to pop hidden pointer - @var{number}\n-equal to one.  The default i386 ABI assumes that the callee pops the\n-stack for hidden pointer.\n+On 32-bit i?86-*-* targets, you can use this attribute to control how\n+aggregates are returned in memory.  If the caller is responsible for\n+popping the hidden pointer together with the rest of the arguments, specify\n+@var{number} equal to zero.  If callee is responsible for popping the\n+hidden pointer, specify @var{number} equal to one.  \n \n-Note that on 32-bit i386 Microsoft Windows targets,\n+The default i386 ABI assumes that the callee pops the\n+stack for hidden pointer.  However, on 32-bit i386 Microsoft Windows targets,\n the compiler assumes that the\n caller pops the stack for hidden pointer.\n \n@@ -3125,7 +3142,7 @@ option.\n \n On MeP targets this attribute causes the compiler to assume the called\n function is close enough to use the normal calling convention,\n-overriding the @code{-mtf} command-line option.\n+overriding the @option{-mtf} command-line option.\n \n @item nesting\n @cindex Allow nesting in an interrupt handler on the Blackfin processor.\n@@ -3288,9 +3305,9 @@ that affect more than one function.\n @xref{Function Specific Option Pragmas}, for details about the\n @samp{#pragma GCC optimize} pragma.\n \n-This can be used for instance to have frequently executed functions\n+This can be used for instance to have frequently-executed functions\n compiled with more aggressive optimization options that produce faster\n-and larger code, while other functions can be called with less\n+and larger code, while other functions can be compiled with less\n aggressive options.\n \n @item OS_main/OS_task\n@@ -3437,7 +3454,8 @@ global functions in shared libraries with lazy binding (which is the\n default).  Lazy binding sends the first call via resolving code in\n the loader, which might assume EAX, EDX and ECX can be clobbered, as\n per the standard calling conventions.  Solaris 8 is affected by this.\n-GNU systems with GLIBC 2.1 or higher, and FreeBSD, are believed to be\n+Systems with the GNU C Library version 2.1 or higher\n+and FreeBSD are believed to be\n safe since the loaders there save EAX, EDX and ECX.  (Lazy binding can be\n disabled with the linker or the loader if desired, to avoid the\n problem.)\n@@ -3548,10 +3566,10 @@ The warnings for missing or incorrect sentinels are enabled with\n @option{-Wformat}.\n \n @item short_call\n-See long_call/short_call.\n+See @code{long_call/short_call}.\n \n @item shortcall\n-See longcall/shortcall.\n+See @code{longcall/shortcall}.\n \n @item signal\n @cindex interrupt handler functions on the AVR processors\n@@ -3566,7 +3584,7 @@ The AVR hardware globally disables interrupts when an interrupt is executed.\n Interrupt handler functions defined with the @code{signal} attribute\n do not re-enable interrupts.  It is save to enable interrupts in a\n @code{signal} handler.  This ``save'' only applies to the code\n-generated by the compiler and not to the IRQ-layout of the\n+generated by the compiler and not to the IRQ layout of the\n application which is responsibility of the application.\n \n If both @code{signal} and @code{interrupt} are specified for the same\n@@ -3593,7 +3611,7 @@ pass arguments, unless it takes a variable number of arguments.\n \n @item syscall_linkage\n @cindex @code{syscall_linkage} attribute\n-This attribute is used to modify the IA64 calling convention by marking\n+This attribute is used to modify the IA-64 calling convention by marking\n all input registers as live at all function exits.  This makes it possible\n to restart a system call after an interrupt without having to save/restore\n the input registers.  This also prevents kernel data from leaking into\n@@ -3994,7 +4012,7 @@ class itself is instantiated.\n \n @item version_id\n @cindex @code{version_id} attribute\n-This IA64 HP-UX attribute, attached to a global variable or function, renames a\n+This IA-64 HP-UX attribute, attached to a global variable or function, renames a\n symbol to contain a version string, thus allowing for function level\n versioning.  HP-UX system header files may use version level functioning\n for some system calls.\n@@ -4679,10 +4697,10 @@ This attribute specifies the data type for the declaration---whichever\n type corresponds to the mode @var{mode}.  This in effect lets you\n request an integer or floating-point type according to its width.\n \n-You may also specify a mode of @samp{byte} or @samp{__byte__} to\n-indicate the mode corresponding to a one-byte integer, @samp{word} or\n-@samp{__word__} for the mode of a one-word integer, and @samp{pointer}\n-or @samp{__pointer__} for the mode used to represent pointers.\n+You may also specify a mode of @code{byte} or @code{__byte__} to\n+indicate the mode corresponding to a one-byte integer, @code{word} or\n+@code{__word__} for the mode of a one-word integer, and @code{pointer}\n+or @code{__pointer__} for the mode used to represent pointers.\n \n @item packed\n @cindex @code{packed} attribute\n@@ -4779,7 +4797,7 @@ main()\n \n @noindent\n You may only use the @code{shared} attribute along with @code{section}\n-attribute with a fully initialized global definition because of the way\n+attribute with a fully-initialized global definition because of the way\n linkers work.  See @code{section} attribute for more information.\n \n The @code{shared} attribute is only available on Microsoft Windows@.\n@@ -5020,9 +5038,9 @@ Two attributes are currently defined for i386 configurations:\n @cindex @code{ms_struct} attribute\n @cindex @code{gcc_struct} attribute\n \n-If @code{packed} is used on a structure, or if bit-fields are used\n-it may be that the Microsoft ABI packs them differently\n-than GCC normally packs them.  Particularly when moving packed\n+If @code{packed} is used on a structure, or if bit-fields are used,\n+it may be that the Microsoft ABI lays out the structure differently\n+than the way GCC normally does.  Particularly when moving packed\n data between functions compiled with GCC and the native Microsoft compiler\n (either via function call or as data in a file), it may be necessary to access\n either format.\n@@ -5031,33 +5049,33 @@ Currently @option{-m[no-]ms-bitfields} is provided for the Microsoft Windows X86\n compilers to match the native Microsoft compiler.\n \n The Microsoft structure layout algorithm is fairly simple with the exception\n-of the bit-field packing:\n-\n-The padding and alignment of members of structures and whether a bit-field\n-can straddle a storage-unit boundary\n+of the bit-field packing.  \n+The padding and alignment of members of structures and whether a bit-field \n+can straddle a storage-unit boundary are determine by these rules:\n \n @enumerate\n @item Structure members are stored sequentially in the order in which they are\n declared: the first member has the lowest memory address and the last member\n the highest.\n \n-@item Every data object has an alignment-requirement. The alignment-requirement\n+@item Every data object has an alignment requirement.  The alignment requirement\n for all data except structures, unions, and arrays is either the size of the\n-object or the current packing size (specified with either the aligned attribute\n-or the pack pragma), whichever is less. For structures,  unions, and arrays,\n-the alignment-requirement is the largest alignment-requirement of its members.\n+object or the current packing size (specified with either the\n+@code{aligned} attribute or the @code{pack} pragma),\n+whichever is less.  For structures, unions, and arrays,\n+the alignment requirement is the largest alignment requirement of its members.\n Every object is allocated an offset so that:\n \n-offset %  alignment-requirement == 0\n+@smallexample\n+offset % alignment_requirement == 0\n+@end smallexample\n \n @item Adjacent bit-fields are packed into the same 1-, 2-, or 4-byte allocation\n unit if the integral types are the same size and if the next bit-field fits\n into the current allocation unit without crossing the boundary imposed by the\n common alignment requirements of the bit-fields.\n @end enumerate\n \n-Handling of zero-length bit-fields:\n-\n MSVC interprets zero-length bit-fields in the following ways:\n \n @enumerate\n@@ -5225,7 +5243,7 @@ typedef int more_aligned_int __attribute__ ((aligned (8)));\n @end smallexample\n \n @noindent\n-force the compiler to insure (as far as it can) that each variable whose\n+force the compiler to ensure (as far as it can) that each variable whose\n type is @code{struct S} or @code{more_aligned_int} is allocated and\n aligned @emph{at least} on a 8-byte boundary.  On a SPARC, having all\n variables of type @code{struct S} aligned to 8-byte boundaries allows\n@@ -5354,7 +5372,7 @@ to work properly.\n Transparent unions are designed for library functions that have multiple\n interfaces for compatibility reasons.  For example, suppose the\n @code{wait} function must accept either a value of type @code{int *} to\n-comply with Posix, or a value of type @code{union wait *} to comply with\n+comply with POSIX, or a value of type @code{union wait *} to comply with\n the 4.1BSD interface.  If @code{wait}'s parameter were @code{void *},\n @code{wait} would accept both kinds of arguments, but it would also\n accept any other pointer type and this would make argument type checking\n@@ -5435,7 +5453,9 @@ variables (@pxref{Function Attributes}, @pxref{Variable Attributes}.)\n @item may_alias\n Accesses through pointers to types with this attribute are not subject\n to type-based alias analysis, but are instead assumed to be able to alias\n-any other type of objects.  In the context of 6.5/7 an lvalue expression\n+any other type of objects.\n+In the context of section 6.5 paragraph 7 of the C99 standard,\n+an lvalue expression\n dereferencing such a pointer is treated like having a character type.\n See @option{-fstrict-aliasing} for more information on aliasing issues.\n This extension exists to support some vector APIs, in which pointers to\n@@ -5690,8 +5710,8 @@ refers to its address, because that can't be inlined.\n \n @opindex Winline\n Note that certain usages in a function definition can make it unsuitable\n-for inline substitution.  Among these usages are: use of varargs, use of\n-alloca, use of variable sized data types (@pxref{Variable Length}),\n+for inline substitution.  Among these usages are: variadic functions, use of\n+@code{alloca}, use of variable-length data types (@pxref{Variable Length}),\n use of computed goto (@pxref{Labels as Values}), use of nonlocal goto,\n and nested functions (@pxref{Nested Functions}).  Using @option{-Winline}\n warns when a function marked @code{inline} could not be substituted,\n@@ -6309,91 +6329,93 @@ a label is unreachable.\n \n @subsection i386 floating-point asm operands\n \n-There are several rules on the usage of stack-like regs in\n-asm_operands insns.  These rules apply only to the operands that are\n-stack-like regs:\n+On i386 targets, there are several rules on the usage of stack-like registers\n+in the operands of an @code{asm}.  These rules apply only to the operands\n+that are stack-like registers:\n \n @enumerate\n @item\n-Given a set of input regs that die in an asm_operands, it is\n-necessary to know which are implicitly popped by the asm, and\n+Given a set of input registers that die in an @code{asm}, it is\n+necessary to know which are implicitly popped by the @code{asm}, and\n which must be explicitly popped by GCC@.\n \n-An input reg that is implicitly popped by the asm must be\n+An input register that is implicitly popped by the @code{asm} must be\n explicitly clobbered, unless it is constrained to match an\n output operand.\n \n @item\n-For any input reg that is implicitly popped by an asm, it is\n+For any input register that is implicitly popped by an @code{asm}, it is\n necessary to know how to adjust the stack to compensate for the pop.\n If any non-popped input is closer to the top of the reg-stack than\n-the implicitly popped reg, it would not be possible to know what the\n+the implicitly popped register, it would not be possible to know what the\n stack looked like---it's not clear how the rest of the stack ``slides\n up''.\n \n-All implicitly popped input regs must be closer to the top of\n+All implicitly popped input registers must be closer to the top of\n the reg-stack than any input that is not implicitly popped.\n \n-It is possible that if an input dies in an insn, reload might\n-use the input reg for an output reload.  Consider this example:\n+It is possible that if an input dies in an @code{asm}, the compiler might\n+use the input register for an output reload.  Consider this example:\n \n @smallexample\n asm (\"foo\" : \"=t\" (a) : \"f\" (b));\n @end smallexample\n \n @noindent\n-This asm says that input B is not popped by the asm, and that\n-the asm pushes a result onto the reg-stack, i.e., the stack is one\n-deeper after the asm than it was before.  But, it is possible that\n-reload thinks that it can use the same reg for both the input and\n-the output, if input B dies in this insn.\n+This code says that input @code{b} is not popped by the @code{asm}, and that\n+the @code{asm} pushes a result onto the reg-stack, i.e., the stack is one\n+deeper after the @code{asm} than it was before.  But, it is possible that\n+reload may think that it can use the same register for both the input and\n+the output.\n \n-If any input operand uses the @code{f} constraint, all output reg\n-constraints must use the @code{&} earlyclobber.\n+To prevent this from happening,\n+if any input operand uses the @code{f} constraint, all output register\n+constraints must use the @code{&} early-clobber modifier.\n \n-The asm above would be written as\n+The example above would be correctly written as:\n \n @smallexample\n asm (\"foo\" : \"=&t\" (a) : \"f\" (b));\n @end smallexample\n \n @item\n Some operands need to be in particular places on the stack.  All\n-output operands fall in this category---there is no other way to\n-know which regs the outputs appear in unless the user indicates\n+output operands fall in this category---GCC has no other way to\n+know which registers the outputs appear in unless you indicate\n this in the constraints.\n \n-Output operands must specifically indicate which reg an output\n-appears in after an asm.  @code{=f} is not allowed: the operand\n-constraints must select a class with a single reg.\n+Output operands must specifically indicate which register an output\n+appears in after an @code{asm}.  @code{=f} is not allowed: the operand\n+constraints must select a class with a single register.\n \n @item\n-Output operands may not be ``inserted'' between existing stack regs.\n+Output operands may not be ``inserted'' between existing stack registers.\n Since no 387 opcode uses a read/write operand, all output operands\n-are dead before the asm_operands, and are pushed by the asm_operands.\n+are dead before the @code{asm}, and are pushed by the @code{asm}.\n It makes no sense to push anywhere but the top of the reg-stack.\n \n Output operands must start at the top of the reg-stack: output\n-operands may not ``skip'' a reg.\n+operands may not ``skip'' a register.\n \n @item\n-Some asm statements may need extra stack space for internal\n+Some @code{asm} statements may need extra stack space for internal\n calculations.  This can be guaranteed by clobbering stack registers\n unrelated to the inputs and outputs.\n \n @end enumerate\n \n-Here are a couple of reasonable asms to want to write.  This asm\n+Here are a couple of reasonable @code{asm}s to want to write.  This\n+@code{asm}\n takes one input, which is internally popped, and produces two outputs.\n \n @smallexample\n asm (\"fsincos\" : \"=t\" (cos), \"=u\" (sin) : \"0\" (inp));\n @end smallexample\n \n @noindent\n-This asm takes two inputs, which are popped by the @code{fyl2xp1} opcode,\n-and replaces them with one output.  The user must code the @code{st(1)}\n-clobber for reg-stack.c to know that @code{fyl2xp1} pops both inputs.\n+This @code{asm} takes two inputs, which are popped by the @code{fyl2xp1} opcode,\n+and replaces them with one output.  The @code{st(1)} clobber is necessary \n+for the compiler to know that @code{fyl2xp1} pops both inputs.\n \n @smallexample\n asm (\"fyl2xp1\" : \"=t\" (result) : \"0\" (x), \"u\" (y) : \"st(1)\");\n@@ -6511,7 +6533,7 @@ conditionalize your program according to cpu type.  The register\n type.  On machines with register windows, be sure to choose a ``global''\n register that is not affected magically by the function call mechanism.\n \n-In addition, operating systems on one type of cpu may differ in how they\n+In addition, different operating systems on the same CPU may differ in how they\n name the registers; then you need additional conditionals.  For\n example, some 68000 operating systems call this register @code{%a5}.\n \n@@ -6880,8 +6902,8 @@ corresponding mode of @code{foo} is @acronym{V4SI}.\n \n The @code{vector_size} attribute is only applicable to integral and\n float scalars, although arrays, pointers, and function return values\n-are allowed in conjunction with this construct. Only power of two\n-sizes are currently allowed.\n+are allowed in conjunction with this construct. Only sizes that are\n+a power of two are currently allowed.\n \n All the basic integer types can be used as base types, both as signed\n and as unsigned: @code{char}, @code{short}, @code{int}, @code{long},\n@@ -7248,7 +7270,7 @@ When implementing patterns for these built-in functions, the memory model\n parameter can be ignored as long as the pattern implements the most\n restrictive @code{__ATOMIC_SEQ_CST} model.  Any of the other memory models\n execute correctly with this memory model but they may not execute as\n-efficiently as they could with a more appropriate implemention of the\n+efficiently as they could with a more appropriate implementation of the\n relaxed requirements.\n \n Note that the C++11 standard allows for the memory model parameter to be\n@@ -8541,7 +8563,7 @@ truncated to fit the significand field provided.  The significand is\n forced to be a quiet NaN@.\n \n This function, if given a string literal all of which would have been\n-consumed by strtol, is evaluated early enough that it is considered a\n+consumed by @code{strtol}, is evaluated early enough that it is considered a\n compile-time constant.\n @end deftypefn\n \n@@ -9619,66 +9641,66 @@ and returns @code{0} otherwise. The following CPU names can be detected:\n Intel CPU.\n \n @item atom\n-Intel ATOM CPU.\n+Intel Atom CPU.\n \n @item core2\n-Intel Core2 CPU.\n+Intel Core 2 CPU.\n \n @item corei7\n-Intel Corei7 CPU.\n+Intel Core i7 CPU.\n \n @item nehalem\n-Intel Corei7 Nehalem CPU.\n+Intel Core i7 Nehalem CPU.\n \n @item westmere\n-Intel Corei7 Westmere CPU.\n+Intel Core i7 Westmere CPU.\n \n @item sandybridge\n-Intel Corei7 Sandybridge CPU.\n+Intel Core i7 Sandy Bridge CPU.\n \n @item amd\n AMD CPU.\n \n @item amdfam10h\n-AMD family 10h CPU.\n+AMD Family 10h CPU.\n \n @item barcelona\n-AMD family 10h Barcelona CPU.\n+AMD Family 10h Barcelona CPU.\n \n @item shanghai\n-AMD family 10h Shanghai CPU.\n+AMD Family 10h Shanghai CPU.\n \n @item istanbul\n-AMD family 10h Istanbul CPU.\n+AMD Family 10h Istanbul CPU.\n \n @item btver1\n-AMD family 14h CPU.\n+AMD Family 14h CPU.\n \n @item amdfam15h\n-AMD family 15h CPU.\n+AMD Family 15h CPU.\n \n @item bdver1\n-AMD family 15h Bulldozer version 1.\n+AMD Family 15h Bulldozer version 1.\n \n @item bdver2\n-AMD family 15h Bulldozer version 2.\n+AMD Family 15h Bulldozer version 2.\n \n @item bdver3\n-AMD family 15h Bulldozer version 3.\n+AMD Family 15h Bulldozer version 3.\n \n @item btver2\n-AMD family 16h CPU.\n+AMD Family 16h CPU.\n @end table\n \n Here is an example:\n @smallexample\n if (__builtin_cpu_is (\"corei7\"))\n   @{\n-     do_corei7 (); //Corei7 specific implementation.\n+     do_corei7 (); // Core i7 specific implementation.\n   @}\n else\n   @{\n-     do_generic (); //Generic implementation.\n+     do_generic (); // Generic implementation.\n   @}\n @end smallexample\n @end deftypefn"}]}