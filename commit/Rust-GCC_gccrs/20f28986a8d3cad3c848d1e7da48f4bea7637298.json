{"sha": "20f28986a8d3cad3c848d1e7da48f4bea7637298", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBmMjg5ODZhOGQzY2FkM2M4NDhkMWU3ZGE0OGY0YmVhNzYzNzI5OA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-02-09T18:49:18Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-02-09T18:54:52Z"}, "message": "Fix miscompilation of Python on HP-PA/Linux\n\nThis is the miscompilation of Python at -O2 on HP-PA/Linux present\non the mainline and 10 branch, caused by the presence of a call to\n__builtin_unreachable () in the middle of a heavily branchy code,\nwhich confuses the reorg pass.\n\ngcc/\n\tPR rtl-optimization/96015\n\t* reorg.c (skip_consecutive_labels): Minor comment tweaks.\n\t(relax_delay_slots): When deleting a jump to the next active\n\tinstruction over a barrier, first delete the barrier if the\n\tjump is the only way to reach the target label.", "tree": {"sha": "6b7ea9d0f68d3d5d235237d06f26002b0e7948e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b7ea9d0f68d3d5d235237d06f26002b0e7948e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20f28986a8d3cad3c848d1e7da48f4bea7637298", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20f28986a8d3cad3c848d1e7da48f4bea7637298", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20f28986a8d3cad3c848d1e7da48f4bea7637298", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20f28986a8d3cad3c848d1e7da48f4bea7637298/comments", "author": null, "committer": null, "parents": [{"sha": "a11ef53238c8ebaab9a3fbf200cb8b5c997b473b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11ef53238c8ebaab9a3fbf200cb8b5c997b473b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a11ef53238c8ebaab9a3fbf200cb8b5c997b473b"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "69c9a768fa9f7f90192912146d7dc24697068e44", "filename": "gcc/reorg.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20f28986a8d3cad3c848d1e7da48f4bea7637298/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20f28986a8d3cad3c848d1e7da48f4bea7637298/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=20f28986a8d3cad3c848d1e7da48f4bea7637298", "patch": "@@ -139,9 +139,9 @@ skip_consecutive_labels (rtx label_or_return)\n   /* __builtin_unreachable can create a CODE_LABEL followed by a BARRIER.\n \n      Since reaching the CODE_LABEL is undefined behavior, we can return\n-     any code label and we're OK at runtime.\n+     any code label and we're OK at run time.\n \n-     However, if we return a CODE_LABEL which leads to a shrinked wrapped\n+     However, if we return a CODE_LABEL which leads to a shrink-wrapped\n      epilogue, but the path does not have a prologue, then we will trip\n      a sanity check in the dwarf2 cfi code which wants to verify that\n      the CFIs are all the same on the traces leading to the epilogue.\n@@ -3210,6 +3210,23 @@ relax_delay_slots (rtx_insn *first)\n \t      && ! condjump_in_parallel_p (jump_insn)\n \t      && ! (next && switch_text_sections_between_p (jump_insn, next)))\n \t    {\n+\t      rtx_insn *direct_label = as_a<rtx_insn *> (JUMP_LABEL (insn));\n+\t      rtx_insn *prev = prev_nonnote_insn (direct_label);\n+\n+\t      /* If the insn jumps over a BARRIER and is the only way to reach\n+\t\t its target, then we need to delete the BARRIER before the jump\n+\t\t because, otherwise, the target may end up being considered as\n+\t\t unreachable and thus also deleted.  */\n+\t      if (BARRIER_P (prev) && LABEL_NUSES (direct_label) == 1)\n+\t\t{\n+\t\t  delete_related_insns (prev);\n+\n+\t\t  /* We have just removed a BARRIER, which means that the block\n+\t\t     number of the next insns has effectively been changed (see\n+\t\t     find_basic_block in resource.c), so clear it.  */\n+\t\t  clear_hashed_info_until_next_barrier (direct_label);\n+\t\t}\n+\n \t      delete_jump (jump_insn);\n \t      continue;\n \t    }"}]}