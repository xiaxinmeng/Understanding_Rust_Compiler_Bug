{"sha": "3890ce93e267fe56883b7b831475180641d9038f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg5MGNlOTNlMjY3ZmU1Njg4M2I3YjgzMTQ3NTE4MDY0MWQ5MDM4Zg==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2011-02-20T17:41:36Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2011-02-20T17:41:36Z"}, "message": "Fixed Objective-C dotsyntax with a constant type right-hand side\n\nFrom-SVN: r170342", "tree": {"sha": "0f653ce7383a43e573f16844ec500fe625167d89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f653ce7383a43e573f16844ec500fe625167d89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3890ce93e267fe56883b7b831475180641d9038f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3890ce93e267fe56883b7b831475180641d9038f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3890ce93e267fe56883b7b831475180641d9038f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3890ce93e267fe56883b7b831475180641d9038f/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "869b0af5c5c3790ef77ffcc0cddf351a99b6c762", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/869b0af5c5c3790ef77ffcc0cddf351a99b6c762", "html_url": "https://github.com/Rust-GCC/gccrs/commit/869b0af5c5c3790ef77ffcc0cddf351a99b6c762"}], "stats": {"total": 126, "additions": 99, "deletions": 27}, "files": [{"sha": "9b92980db56a6d373054c2b1d20dcaa1c5e216c8", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3890ce93e267fe56883b7b831475180641d9038f/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3890ce93e267fe56883b7b831475180641d9038f/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=3890ce93e267fe56883b7b831475180641d9038f", "patch": "@@ -1,3 +1,9 @@\n+2011-01-19  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/47784\n+\t* objc-act.c (objc_maybe_build_modify_expr): If 'rhs' has side\n+\teffects, do not use a temporary variable.\n+\n 2011-01-19  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-next-runtime-abi-01.c: Updated comments."}, {"sha": "0cabc52b3b66a7e75471e32a1976b4c41fde08c7", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 49, "deletions": 27, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3890ce93e267fe56883b7b831475180641d9038f/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3890ce93e267fe56883b7b831475180641d9038f/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=3890ce93e267fe56883b7b831475180641d9038f", "patch": "@@ -1790,49 +1790,71 @@ objc_maybe_build_modify_expr (tree lhs, tree rhs)\n       to get these to work with very little effort, we build a\n       compound statement which does the setter call (to set the\n       property to 'rhs'), but which can also be evaluated returning\n-      the 'rhs'.  So, we want to create the following:\n+      the 'rhs'.  If the 'rhs' has no side effects, we can simply\n+      evaluate it twice, building\n+\n+      ([object setProperty: rhs]; rhs)\n+\n+      If it has side effects, we put it in a temporary variable first,\n+      so we create the following:\n \n       (temp = rhs; [object setProperty: temp]; temp)\n+\n+      setter_argument is rhs in the first case, and temp in the second\n+      case.\n       */\n-      tree temp_variable_decl, bind;\n+      tree setter_argument;\n+\n       /* s1, s2 and s3 are the tree statements that we need in the\n \t compound expression.  */\n       tree s1, s2, s3, compound_expr;\n+\n+      if (TREE_SIDE_EFFECTS (rhs))\n+\t{\n+\t  tree bind;\n       \n-      /* TODO: If 'rhs' is a constant, we could maybe do without the\n-\t 'temp' variable ? */\n-\n-      /* Declare __objc_property_temp in a local bind.  */\n-      temp_variable_decl = objc_create_temporary_var (TREE_TYPE (rhs), \"__objc_property_temp\");\n-      DECL_SOURCE_LOCATION (temp_variable_decl) = input_location;\n-      bind = build3 (BIND_EXPR, void_type_node, temp_variable_decl, NULL, NULL);\n-      SET_EXPR_LOCATION (bind, input_location);\n-      TREE_SIDE_EFFECTS (bind) = 1;\n-      add_stmt (bind);\n+\t  /* Declare __objc_property_temp in a local bind.  */\n+\t  setter_argument = objc_create_temporary_var (TREE_TYPE (rhs), \"__objc_property_temp\");\n+\t  DECL_SOURCE_LOCATION (setter_argument) = input_location;\n+\t  bind = build3 (BIND_EXPR, void_type_node, setter_argument, NULL, NULL);\n+\t  SET_EXPR_LOCATION (bind, input_location);\n+\t  TREE_SIDE_EFFECTS (bind) = 1;\n+\t  add_stmt (bind);\n+\n+\t  /* s1: x = rhs */\n+\t  s1 = build_modify_expr (input_location, setter_argument, NULL_TREE,\n+\t\t\t\t  NOP_EXPR,\n+\t\t\t\t  input_location, rhs, NULL_TREE);\n+\t  SET_EXPR_LOCATION (s1, input_location);\n+\t}\n+      else\n+\t{\n+\t  /* No s1.  */\n+\t  setter_argument = rhs;\n+\t  s1 = NULL_TREE;\n+\t}\n       \n       /* Now build the compound statement.  */\n-      \n-      /* s1: __objc_property_temp = rhs */\n-      s1 = build_modify_expr (input_location, temp_variable_decl, NULL_TREE,\n-\t\t\t      NOP_EXPR,\n-\t\t\t      input_location, rhs, NULL_TREE);\n-      SET_EXPR_LOCATION (s1, input_location);\n   \n-      /* s2: [object setProperty: __objc_property_temp] */\n-      s2 = objc_build_setter_call (lhs, temp_variable_decl);\n-\n-      /* This happens if building the setter failed because the property\n-\t is readonly.  */\n+      /* s2: [object setProperty: x] */\n+      s2 = objc_build_setter_call (lhs, setter_argument);\n+      \n+      /* This happens if building the setter failed because the\n+\t property is readonly.  */\n       if (s2 == error_mark_node)\n \treturn error_mark_node;\n \n       SET_EXPR_LOCATION (s2, input_location);\n   \n-      /* s3: __objc_property_temp */\n-      s3 = convert (TREE_TYPE (lhs), temp_variable_decl);\n+      /* s3: x */\n+      s3 = convert (TREE_TYPE (lhs), setter_argument);\n \n-      /* Now build the compound statement (s1, s2, s3) */\n-      compound_expr = build_compound_expr (input_location, build_compound_expr (input_location, s1, s2), s3);\n+      /* Now build the compound statement (s1, s2, s3) or (s2, s3) as\n+\t appropriate.  */\n+      if (s1)\n+\tcompound_expr = build_compound_expr (input_location, build_compound_expr (input_location, s1, s2), s3);\n+      else\n+\tcompound_expr = build_compound_expr (input_location, s2, s3);\t\n \n       /* Without this, with -Wall you get a 'valued computed is not\n \t used' every time there is a \"object.property = x\" where the"}, {"sha": "6c422367072610cfab2f5a00a454ed34d6d82289", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3890ce93e267fe56883b7b831475180641d9038f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3890ce93e267fe56883b7b831475180641d9038f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3890ce93e267fe56883b7b831475180641d9038f", "patch": "@@ -1,3 +1,9 @@\n+2011-02-19  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/47784\n+\t* objc.dg/property/dotsyntax-22.m: New.\n+\t* obj-c++.dg/property/dotsyntax-22.mm: New.\n+\t\n 2011-02-20  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/46394"}, {"sha": "cc583482263b1131b1e500888cbaccd6ddf34c07", "filename": "gcc/testsuite/obj-c++.dg/property/dotsyntax-22.mm", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3890ce93e267fe56883b7b831475180641d9038f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdotsyntax-22.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3890ce93e267fe56883b7b831475180641d9038f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdotsyntax-22.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdotsyntax-22.mm?ref=3890ce93e267fe56883b7b831475180641d9038f", "patch": "@@ -0,0 +1,19 @@\n+/* PR objc/47784.  This testcase used to crash the compiler.  */\n+\n+typedef struct {\n+  float x;\n+} SomeType;\n+\n+@interface MyClass\n+\n+@property(assign,readwrite) SomeType position;\n+\n+@end\n+\n+void example (MyClass *x)\n+{\n+  const SomeType SomeTypeZero = {0.0f};\n+\n+  x.position= SomeTypeZero;\n+}\n+"}, {"sha": "cc583482263b1131b1e500888cbaccd6ddf34c07", "filename": "gcc/testsuite/objc.dg/property/dotsyntax-22.m", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3890ce93e267fe56883b7b831475180641d9038f/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-22.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3890ce93e267fe56883b7b831475180641d9038f/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-22.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-22.m?ref=3890ce93e267fe56883b7b831475180641d9038f", "patch": "@@ -0,0 +1,19 @@\n+/* PR objc/47784.  This testcase used to crash the compiler.  */\n+\n+typedef struct {\n+  float x;\n+} SomeType;\n+\n+@interface MyClass\n+\n+@property(assign,readwrite) SomeType position;\n+\n+@end\n+\n+void example (MyClass *x)\n+{\n+  const SomeType SomeTypeZero = {0.0f};\n+\n+  x.position= SomeTypeZero;\n+}\n+"}]}