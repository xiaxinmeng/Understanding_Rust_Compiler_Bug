{"sha": "b83b7fa3716d7327fe5c0ed16de166e5816f7d9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgzYjdmYTM3MTZkNzMyN2ZlNWMwZWQxNmRlMTY2ZTU4MTZmN2Q5Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-03-18T03:06:05Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-18T03:06:05Z"}, "message": "alpha.c (alpha_emit_set_const_1): Build add insns explicitly.\n\n        * config/alpha/alpha.c (alpha_emit_set_const_1): Build add insns\n        explicitly.\n\nFrom-SVN: r50942", "tree": {"sha": "be1d934eb1e426d7de725a8edd056e16cfb5d3bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be1d934eb1e426d7de725a8edd056e16cfb5d3bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b83b7fa3716d7327fe5c0ed16de166e5816f7d9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b83b7fa3716d7327fe5c0ed16de166e5816f7d9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b83b7fa3716d7327fe5c0ed16de166e5816f7d9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b83b7fa3716d7327fe5c0ed16de166e5816f7d9f/comments", "author": null, "committer": null, "parents": [{"sha": "6f7c00fe3423564af915f47b79bab7b28dcbb158", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f7c00fe3423564af915f47b79bab7b28dcbb158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f7c00fe3423564af915f47b79bab7b28dcbb158"}], "stats": {"total": 30, "additions": 25, "deletions": 5}, "files": [{"sha": "673a79e81d7dfaa7a76bb1a30dabb26861d08425", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b83b7fa3716d7327fe5c0ed16de166e5816f7d9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b83b7fa3716d7327fe5c0ed16de166e5816f7d9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b83b7fa3716d7327fe5c0ed16de166e5816f7d9f", "patch": "@@ -1,3 +1,8 @@\n+2002-03-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (alpha_emit_set_const_1): Build add insns\n+\texplicitly.\n+\n 2002-03-17  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* config/mmix/mmix.md (\"fixuns_truncdfdi2\"): Use (unsigned_fix:DI"}, {"sha": "08f4568afcc9accd4388203d709112e5a01bbdd2", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b83b7fa3716d7327fe5c0ed16de166e5816f7d9f/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b83b7fa3716d7327fe5c0ed16de166e5816f7d9f/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=b83b7fa3716d7327fe5c0ed16de166e5816f7d9f", "patch": "@@ -2274,7 +2274,7 @@ alpha_emit_set_const_1 (target, mode, c, n)\n   /* Use a pseudo if highly optimizing and still generating RTL.  */\n   rtx subtarget\n     = (flag_expensive_optimizations && !no_new_pseudos ? 0 : target);\n-  rtx temp;\n+  rtx temp, insn;\n \n #if HOST_BITS_PER_WIDE_INT == 64\n   /* We are only called for SImode and DImode.  If this is SImode, ensure that\n@@ -2324,12 +2324,27 @@ alpha_emit_set_const_1 (target, mode, c, n)\n \t{\n \t  temp = copy_to_suggested_reg (GEN_INT (high << 16), subtarget, mode);\n \n+\t  /* As of 2002-02-23, addsi3 is only available when not optimizing.\n+\t     This means that if we go through expand_binop, we'll try to\n+\t     generate extensions, etc, which will require new pseudos, which\n+\t     will fail during some split phases.  The SImode add patterns\n+\t     still exist, but are not named.  So build the insns by hand.  */\n+\n \t  if (extra != 0)\n-\t    temp = expand_binop (mode, add_optab, temp, GEN_INT (extra << 16),\n-\t\t\t\t subtarget, 0, OPTAB_WIDEN);\n+\t    {\n+\t      if (! subtarget)\n+\t\tsubtarget = gen_reg_rtx (mode);\n+\t      insn = gen_rtx_PLUS (mode, temp, GEN_INT (extra << 16));\n+\t      insn = gen_rtx_SET (VOIDmode, subtarget, insn);\n+\t      emit_insn (insn);\n+\t    }\n \n-\t  return expand_binop (mode, add_optab, temp, GEN_INT (low),\n-\t\t\t       target, 0, OPTAB_WIDEN);\n+\t  if (target == NULL)\n+\t    target = gen_reg_rtx (mode);\n+\t  insn = gen_rtx_PLUS (mode, temp, GEN_INT (low));\n+\t  insn = gen_rtx_SET (VOIDmode, target, insn);\n+\t  emit_insn (insn);\n+\t  return target;\n \t}\n     }\n "}]}