{"sha": "cec34ee582db1c7990d6f871e953862fe4fb7ca1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VjMzRlZTU4MmRiMWM3OTkwZDZmODcxZTk1Mzg2MmZlNGZiN2NhMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-06-30T21:05:02Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-06-30T21:05:02Z"}, "message": "lto-streamer-out.c (class DFS): Adjust hash_scc method.\n\n\t* lto-streamer-out.c (class DFS): Adjust hash_scc method.\n\t(DFS::DFS): Pass this_ref_p and ref_p to hash_scc.\n\t(hash_scc): Add this_ref_p and ref_p parameters and pass them\n\tto the inner DFS walk.\n\nFrom-SVN: r225212", "tree": {"sha": "7a1a1508684e972a3637251b0c51eecde667a9c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a1a1508684e972a3637251b0c51eecde667a9c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cec34ee582db1c7990d6f871e953862fe4fb7ca1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cec34ee582db1c7990d6f871e953862fe4fb7ca1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cec34ee582db1c7990d6f871e953862fe4fb7ca1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cec34ee582db1c7990d6f871e953862fe4fb7ca1/comments", "author": null, "committer": null, "parents": [{"sha": "ec4a505ff54c848fd4d71c7d121482c65e7b5ce7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7"}], "stats": {"total": 77, "additions": 65, "deletions": 12}, "files": [{"sha": "fc23abd6c2de883a63be86e8a35c9c2226c38be9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec34ee582db1c7990d6f871e953862fe4fb7ca1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec34ee582db1c7990d6f871e953862fe4fb7ca1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cec34ee582db1c7990d6f871e953862fe4fb7ca1", "patch": "@@ -1,3 +1,10 @@\n+2015-06-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* lto-streamer-out.c (class DFS): Adjust hash_scc method.\n+\t(DFS::DFS): Pass this_ref_p and ref_p to hash_scc.\n+\t(hash_scc): Add this_ref_p and ref_p parameters and pass them\n+\tto the inner DFS walk.\n+\n 2015-06-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* target-insns.def (jump): New targetm instruction pattern."}, {"sha": "254d7ba50b71f9681ac6ffcdc9cdef764844c120", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec34ee582db1c7990d6f871e953862fe4fb7ca1/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec34ee582db1c7990d6f871e953862fe4fb7ca1/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=cec34ee582db1c7990d6f871e953862fe4fb7ca1", "patch": "@@ -411,9 +411,9 @@ lto_write_tree (struct output_block *ob, tree expr, bool ref_p)\n   streamer_write_zero (ob);\n }\n \n-/* Emit the physical representation of tree node EXPR to output block\n-   OB.  If THIS_REF_P is true, the leaves of EXPR are emitted as references\n-   via lto_output_tree_ref.  REF_P is used for streaming siblings of EXPR.  */\n+/* Emit the physical representation of tree node EXPR to output block OB,\n+   If THIS_REF_P is true, the leaves of EXPR are emitted as references via\n+   lto_output_tree_ref.  REF_P is used for streaming siblings of EXPR.  */\n \n static void\n lto_output_tree_1 (struct output_block *ob, tree expr, hashval_t hash,\n@@ -490,13 +490,20 @@ class DFS\n \t\t       tree expr, bool ref_p, bool this_ref_p);\n \n   hashval_t\n-  hash_scc (struct output_block *ob, unsigned first, unsigned size);\n+  hash_scc (struct output_block *ob, unsigned first, unsigned size,\n+\t    bool ref_p, bool this_ref_p);\n \n   hash_map<tree, sccs *> sccstate;\n   vec<worklist> worklist_vec;\n   struct obstack sccstate_obstack;\n };\n \n+/* Emit the physical representation of tree node EXPR to output block OB,\n+   using depth-first search on the subgraph.  If THIS_REF_P is true, the\n+   leaves of EXPR are emitted as references via lto_output_tree_ref.\n+   REF_P is used for streaming siblings of EXPR.  If SINGLE_P is true,\n+   this is for a rewalk of a single leaf SCC.  */\n+\n DFS::DFS (struct output_block *ob, tree expr, bool ref_p, bool this_ref_p,\n \t  bool single_p)\n {\n@@ -564,7 +571,7 @@ DFS::DFS (struct output_block *ob, tree expr, bool ref_p, bool this_ref_p,\n \t  unsigned first, size;\n \t  tree x;\n \n-\t  /* If we are re-walking a single leaf-SCC just pop it,\n+\t  /* If we are re-walking a single leaf SCC just pop it,\n \t     let earlier worklist item access the sccstack.  */\n \t  if (single_p)\n \t    {\n@@ -587,7 +594,7 @@ DFS::DFS (struct output_block *ob, tree expr, bool ref_p, bool this_ref_p,\n \t  unsigned scc_entry_len = 0;\n \t  if (!flag_wpa)\n \t    {\n-\t      scc_hash = hash_scc (ob, first, size);\n+\t      scc_hash = hash_scc (ob, first, size, ref_p, this_ref_p);\n \n \t      /* Put the entries with the least number of collisions first.  */\n \t      unsigned entry_start = 0;\n@@ -1362,10 +1369,12 @@ DFS::scc_entry_compare (const void *p1_, const void *p2_)\n   return 0;\n }\n \n-/* Return a hash value for the SCC on the SCC stack from FIRST with SIZE.  */\n+/* Return a hash value for the SCC on the SCC stack from FIRST with SIZE.\n+   THIS_REF_P and REF_P are as passed to lto_output_tree for FIRST.  */\n \n hashval_t\n-DFS::hash_scc (struct output_block *ob, unsigned first, unsigned size)\n+DFS::hash_scc (struct output_block *ob, unsigned first, unsigned size,\n+\t       bool ref_p, bool this_ref_p)\n {\n   unsigned int last_classes = 0, iterations = 0;\n \n@@ -1441,7 +1450,8 @@ DFS::hash_scc (struct output_block *ob, unsigned first, unsigned size)\n \t      for (unsigned i = 0; i < size; ++i)\n \t\tmap.put (sccstack[first+i].t, sccstack[first+i].hash);\n \n-\t      DFS again (ob, sccstack[first+firstunique].t, false, false, true);\n+\t      DFS again (ob, sccstack[first+firstunique].t, ref_p, this_ref_p,\n+\t\t\t true);\n \t      gcc_assert (again.sccstack.length () == size);\n \n \t      memcpy (sccstack.address () + first,\n@@ -1539,9 +1549,9 @@ DFS::DFS_write_tree (struct output_block *ob, sccs *from_state,\n }\n \n \n-/* Emit the physical representation of tree node EXPR to output block\n-   OB.  If THIS_REF_P is true, the leaves of EXPR are emitted as references\n-   via lto_output_tree_ref.  REF_P is used for streaming siblings of EXPR.  */\n+/* Emit the physical representation of tree node EXPR to output block OB.\n+   If THIS_REF_P is true, the leaves of EXPR are emitted as references via\n+   lto_output_tree_ref.  REF_P is used for streaming siblings of EXPR.  */\n \n void\n lto_output_tree (struct output_block *ob, tree expr,"}, {"sha": "8fc634abefdf060ad8db7a1dc6bca536c364af53", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec34ee582db1c7990d6f871e953862fe4fb7ca1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec34ee582db1c7990d6f871e953862fe4fb7ca1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cec34ee582db1c7990d6f871e953862fe4fb7ca1", "patch": "@@ -1,3 +1,7 @@\n+2015-06-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/lto17.ad[sb]: New test.\n+\n 2015-06-30  David Malcolm  <dmalcolm@redhat.com>\n \n \t* jit.dg/all-non-failing-tests.h: Add test-switch.c."}, {"sha": "af42e8d85d8eb2d9d3370d50efca3e76f66474c3", "filename": "gcc/testsuite/gnat.dg/lto17.adb", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec34ee582db1c7990d6f871e953862fe4fb7ca1/gcc%2Ftestsuite%2Fgnat.dg%2Flto17.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec34ee582db1c7990d6f871e953862fe4fb7ca1/gcc%2Ftestsuite%2Fgnat.dg%2Flto17.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flto17.adb?ref=cec34ee582db1c7990d6f871e953862fe4fb7ca1", "patch": "@@ -0,0 +1,12 @@\n+-- { dg-do compile }\n+-- { dg-options \"-flto\" }\n+-- { dg-require-effective-target lto }\n+\n+package body Lto17 is\n+\n+   function To_Chunk_List(C : Chunk) return Chunk_List is\n+   begin\n+      return new Chunk_List_Element'(C.Size, C, null);\n+   end;\n+\n+end Lto17;"}, {"sha": "19b8a9c7c16d30072e63a25350db947439dd67ff", "filename": "gcc/testsuite/gnat.dg/lto17.ads", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cec34ee582db1c7990d6f871e953862fe4fb7ca1/gcc%2Ftestsuite%2Fgnat.dg%2Flto17.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cec34ee582db1c7990d6f871e953862fe4fb7ca1/gcc%2Ftestsuite%2Fgnat.dg%2Flto17.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flto17.ads?ref=cec34ee582db1c7990d6f871e953862fe4fb7ca1", "patch": "@@ -0,0 +1,20 @@\n+package Lto17 is\n+\n+   type Chunk_List_Element;\n+   type Chunk_List is access Chunk_List_Element;\n+\n+   type Arr is array (Natural range <>) of Integer;\n+\n+   type Chunk(Size : Natural) is record\n+      Data  : Arr(1 .. Size);\n+      Where : Natural;\n+   end record;\n+\n+   type Chunk_List_Element(Size : Natural) is record\n+      Chnk : Chunk(Size);\n+      Link : Chunk_List;\n+   end record;\n+\n+   function To_Chunk_List(C : Chunk) return Chunk_List;\n+\n+end Lto17;"}]}