{"sha": "d28139df87dd376c825af8c1c8be0dbc902caee2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI4MTM5ZGY4N2RkMzc2YzgyNWFmOGMxYzhiZTBkYmM5MDJjYWVlMg==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2011-01-04T12:19:31Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2011-01-04T12:19:31Z"}, "message": "builtin-cproj-1.c: On the __SPU__ target, do not use __builtin_inff.\n\n\t* gcc.dg/torture/builtin-cproj-1.c: On the __SPU__ target, do not\n\tuse __builtin_inff.  Skip all single-precision tests that require\n\tInfinity.\n\nFrom-SVN: r168462", "tree": {"sha": "c5a31f5a6631b857f602e3b0252664b28ef82e28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5a31f5a6631b857f602e3b0252664b28ef82e28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d28139df87dd376c825af8c1c8be0dbc902caee2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d28139df87dd376c825af8c1c8be0dbc902caee2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d28139df87dd376c825af8c1c8be0dbc902caee2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d28139df87dd376c825af8c1c8be0dbc902caee2/comments", "author": null, "committer": null, "parents": [{"sha": "b98d6b3556ed76ab3ee26a8de633ae297d8386f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b98d6b3556ed76ab3ee26a8de633ae297d8386f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b98d6b3556ed76ab3ee26a8de633ae297d8386f4"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "e6977960fd85466f9171b93da2edb34a06b5a478", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28139df87dd376c825af8c1c8be0dbc902caee2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28139df87dd376c825af8c1c8be0dbc902caee2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d28139df87dd376c825af8c1c8be0dbc902caee2", "patch": "@@ -1,3 +1,9 @@\n+2011-01-04  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* gcc.dg/torture/builtin-cproj-1.c: On the __SPU__ target, do not\n+\tuse __builtin_inff.  Skip all single-precision tests that require\n+\tInfinity.\n+\n 2011-01-03  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* g++.dg/torture/pr46111.C: Add dg-require-effective-target pthread."}, {"sha": "53ae6046a6332a5d005cac26162df44a224f4fd0", "filename": "gcc/testsuite/gcc.dg/torture/builtin-cproj-1.c", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d28139df87dd376c825af8c1c8be0dbc902caee2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-cproj-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d28139df87dd376c825af8c1c8be0dbc902caee2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-cproj-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-cproj-1.c?ref=d28139df87dd376c825af8c1c8be0dbc902caee2", "patch": "@@ -16,7 +16,11 @@ extern void link_error(int);\n #define CPROJ(X) __builtin_cproj(X)\n #define CPROJF(X) __builtin_cprojf(X)\n #define CPROJL(X) __builtin_cprojl(X)\n+#ifndef __SPU__\n #define INF __builtin_inff()\n+#else\n+#define INF __builtin_inf()\n+#endif\n #define I 1i\n #define CPSGN(X,Y) __builtin_copysignf((X),(Y))\n #define CIMAG(X) __builtin_cimagf(X)\n@@ -30,6 +34,7 @@ extern void link_error(int);\n \n /* Test that (cproj(X) == ZERO+Inf) and that the signs of the\n    imaginary parts match.  ZERO is +/- 0i.  */\n+#ifndef __SPU__\n #define TEST_CST_INF(X,ZERO) do { \\\n   if (CPROJF(X) != ZERO+INF || CKSGN_I(CPROJF(X),ZERO+INF)) \\\n     link_error(__LINE__); \\\n@@ -38,6 +43,14 @@ extern void link_error(int);\n   if (CPROJL(X) != ZERO+INF || CKSGN_I(CPROJL(X),ZERO+INF)) \\\n     link_error(__LINE__); \\\n } while (0)\n+#else\n+#define TEST_CST_INF(X,ZERO) do { \\\n+  if (CPROJ(X) != ZERO+INF || CKSGN_I(CPROJ(X),ZERO+INF)) \\\n+    link_error(__LINE__); \\\n+  if (CPROJL(X) != ZERO+INF || CKSGN_I(CPROJL(X),ZERO+INF)) \\\n+    link_error(__LINE__); \\\n+} while (0)\n+#endif\n \n /* Test that (cproj(X) == X) for all finite (X).  */\n #define TEST_CST(X) do { \\\n@@ -47,6 +60,7 @@ extern void link_error(int);\n \n /* Test that cproj(X + I*INF) -> (ZERO + INF), where ZERO is +-0i.\n    NEG is either blank or a minus sign when ZERO is negative.  */\n+#ifndef __SPU__\n #define TEST_IMAG_INF(NEG,ZERO) do { \\\n   if (CPROJF(f+I*NEG INF) != ZERO+INF \\\n       || CKSGN_I (CPROJF(f+I*NEG INF), ZERO+INF)) \\\n@@ -58,8 +72,19 @@ extern void link_error(int);\n       || CKSGN_I (CPROJL(ld+I*NEG INF), ZERO+INF)) \\\n     link_error(__LINE__); \\\n } while (0)\n+#else\n+#define TEST_IMAG_INF(NEG,ZERO) do { \\\n+  if (CPROJ(d+I*NEG INF) != ZERO+INF \\\n+      || CKSGN_I (CPROJ(d+I*NEG INF), ZERO+INF)) \\\n+    link_error(__LINE__); \\\n+  if (CPROJL(ld+I*NEG INF) != ZERO+INF \\\n+      || CKSGN_I (CPROJL(ld+I*NEG INF), ZERO+INF)) \\\n+    link_error(__LINE__); \\\n+} while (0)\n+#endif\n \n /* Like TEST_IMAG_INF, but check that side effects are honored.  */\n+#ifndef __SPU__\n #define TEST_IMAG_INF_SIDE_EFFECT(NEG,ZERO) do { \\\n   int side = 4; \\\n   if (CPROJF(++side+I*NEG INF) != ZERO+INF \\\n@@ -74,9 +99,23 @@ extern void link_error(int);\n   if (side != 10) \\\n     link_error(__LINE__); \\\n } while (0)\n+#else\n+#define TEST_IMAG_INF_SIDE_EFFECT(NEG,ZERO) do { \\\n+  int side = 4; \\\n+  if (CPROJ(++side+I*NEG INF) != ZERO+INF \\\n+      || CKSGN_I (CPROJ(++side+I*NEG INF), ZERO+INF)) \\\n+    link_error(__LINE__); \\\n+  if (CPROJL(++side+I*NEG INF) != ZERO+INF \\\n+      || CKSGN_I (CPROJL(++side+I*NEG INF), ZERO+INF)) \\\n+    link_error(__LINE__); \\\n+  if (side != 8) \\\n+    link_error(__LINE__); \\\n+} while (0)\n+#endif\n \n /* Test that cproj(INF, POSITIVE) -> INF+0i.  NEG is either blank or a\n    minus sign to test negative INF.  */\n+#ifndef __SPU__\n #define TEST_REAL_INF(NEG) do { \\\n   __real cf = NEG INF; \\\n   __imag cf = (x ? 4 : 5); \\\n@@ -94,8 +133,23 @@ extern void link_error(int);\n       || CKSGN_I (CPROJL(cld), INF)) \\\n     link_error(__LINE__); \\\n } while (0)\n+#else\n+#define TEST_REAL_INF(NEG) do { \\\n+  __real cd = NEG INF; \\\n+  __imag cd = (x ? 4 : 5); \\\n+  if (CPROJ(cd) != INF \\\n+      || CKSGN_I (CPROJ(cd), INF)) \\\n+    link_error(__LINE__); \\\n+  __real cld = NEG INF; \\\n+  __imag cld = (x ? 4 : 5); \\\n+  if (CPROJL(cld) != INF \\\n+      || CKSGN_I (CPROJL(cld), INF)) \\\n+    link_error(__LINE__); \\\n+} while (0)\n+#endif\n \n /* Like TEST_REAL_INF, but check that side effects are honored.  */\n+#ifndef __SPU__\n #define TEST_REAL_INF_SIDE_EFFECT(NEG) do { \\\n   int side = -9; \\\n   __real cf = NEG INF; \\\n@@ -116,6 +170,23 @@ extern void link_error(int);\n   if (side != -3) \\\n     link_error(__LINE__); \\\n } while (0)\n+#else\n+#define TEST_REAL_INF_SIDE_EFFECT(NEG) do { \\\n+  int side = -9; \\\n+  __real cd = NEG INF; \\\n+  __imag cd = (x ? 4 : 5); \\\n+  if (CPROJ((++side,cd)) != INF \\\n+      || CKSGN_I (CPROJ((++side,cd)), INF)) \\\n+    link_error(__LINE__); \\\n+  __real cld = NEG INF; \\\n+  __imag cld = (x ? 4 : 5); \\\n+  if (CPROJL((++side,cld)) != INF \\\n+      || CKSGN_I (CPROJL((++side,cld)), INF)) \\\n+    link_error(__LINE__); \\\n+  if (side != -5) \\\n+    link_error(__LINE__); \\\n+} while (0)\n+#endif\n \n void foo (_Complex long double cld, _Complex double cd, _Complex float cf,\n \t  long double ld, double d, float f, int x)"}]}