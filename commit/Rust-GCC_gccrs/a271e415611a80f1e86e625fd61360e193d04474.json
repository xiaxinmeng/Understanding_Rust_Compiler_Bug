{"sha": "a271e415611a80f1e86e625fd61360e193d04474", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI3MWU0MTU2MTFhODBmMWU4NmU2MjVmZDYxMzYwZTE5M2QwNDQ3NA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-01-09T22:17:17Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-01-09T22:17:17Z"}, "message": "expr.c (store_field): In the bitfield case...\n\n\t* expr.c (store_field): In the bitfield case, if the value comes from\n\ta function call and is of an aggregate type returned in registers, do\n\tnot modify the field mode; extract the value in all cases if the mode\n\tis BLKmode and the size is not larger than a word.\n\nFrom-SVN: r244249", "tree": {"sha": "8d71726144d66445d4f0544fc2a11951811121ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d71726144d66445d4f0544fc2a11951811121ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a271e415611a80f1e86e625fd61360e193d04474", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a271e415611a80f1e86e625fd61360e193d04474", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a271e415611a80f1e86e625fd61360e193d04474", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a271e415611a80f1e86e625fd61360e193d04474/comments", "author": null, "committer": null, "parents": [{"sha": "852a63c540fff78a95e77a42c5f08d6a25ffc797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852a63c540fff78a95e77a42c5f08d6a25ffc797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/852a63c540fff78a95e77a42c5f08d6a25ffc797"}], "stats": {"total": 242, "additions": 219, "deletions": 23}, "files": [{"sha": "5f728841fe8c60797058bdc9ea0fcf99862d2a8f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271e415611a80f1e86e625fd61360e193d04474/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271e415611a80f1e86e625fd61360e193d04474/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a271e415611a80f1e86e625fd61360e193d04474", "patch": "@@ -1,3 +1,10 @@\n+2017-01-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* expr.c (store_field): In the bitfield case, if the value comes from\n+\ta function call and is of an aggregate type returned in registers, do\n+\tnot modify the field mode; extract the value in all cases if the mode\n+\tis BLKmode and the size is not larger than a word.\n+\n 2017-01-09  Dominique d'Humieres  <dominiq@lps.ens.fr>\n \n \tPR target/71017"}, {"sha": "e1d70c3b189d121e4d2a6ed9c08772f7d20505e9", "filename": "gcc/expr.c", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a271e415611a80f1e86e625fd61360e193d04474", "patch": "@@ -6888,33 +6888,30 @@ store_field (rtx target, HOST_WIDE_INT bitsize, HOST_WIDE_INT bitpos,\n       if (GET_CODE (temp) == PARALLEL)\n \t{\n \t  HOST_WIDE_INT size = int_size_in_bytes (TREE_TYPE (exp));\n-\t  rtx temp_target;\n-\t  if (mode == BLKmode || mode == VOIDmode)\n-\t    mode = smallest_mode_for_size (size * BITS_PER_UNIT, MODE_INT);\n-\t  temp_target = gen_reg_rtx (mode);\n+\t  machine_mode temp_mode\n+\t    = smallest_mode_for_size (size * BITS_PER_UNIT, MODE_INT);\n+\t  rtx temp_target = gen_reg_rtx (temp_mode);\n \t  emit_group_store (temp_target, temp, TREE_TYPE (exp), size);\n \t  temp = temp_target;\n \t}\n-      else if (mode == BLKmode)\n+\n+      /* Handle calls that return BLKmode values in registers.  */\n+      else if (mode == BLKmode && REG_P (temp) && TREE_CODE (exp) == CALL_EXPR)\n \t{\n-\t  /* Handle calls that return BLKmode values in registers.  */\n-\t  if (REG_P (temp) && TREE_CODE (exp) == CALL_EXPR)\n-\t    {\n-\t      rtx temp_target = gen_reg_rtx (GET_MODE (temp));\n-\t      copy_blkmode_from_reg (temp_target, temp, TREE_TYPE (exp));\n-\t      temp = temp_target;\n-\t    }\n-\t  else\n-\t    {\n-\t      HOST_WIDE_INT size = int_size_in_bytes (TREE_TYPE (exp));\n-\t      rtx temp_target;\n-\t      mode = smallest_mode_for_size (size * BITS_PER_UNIT, MODE_INT);\n-\t      temp_target = gen_reg_rtx (mode);\n-\t      temp_target\n-\t        = extract_bit_field (temp, size * BITS_PER_UNIT, 0, 1,\n-\t\t\t\t     temp_target, mode, mode, false);\n-\t      temp = temp_target;\n-\t    }\n+\t  rtx temp_target = gen_reg_rtx (GET_MODE (temp));\n+\t  copy_blkmode_from_reg (temp_target, temp, TREE_TYPE (exp));\n+\t  temp = temp_target;\n+\t}\n+\n+      /* The behavior of store_bit_field is awkward when mode is BLKmode:\n+\t it always takes its value from the lsb up to the word size but\n+\t expects it left justified beyond it.  At this point TEMP is left\n+\t justified so extract the value in the former case.  */\n+      if (mode == BLKmode && bitsize <= BITS_PER_WORD)\n+\t{\n+\t  machine_mode temp_mode = smallest_mode_for_size (bitsize, MODE_INT);\n+\t  temp = extract_bit_field (temp, bitsize, 0, 1, NULL_RTX, temp_mode,\n+\t\t\t\t    temp_mode, false);\n \t}\n \n       /* Store the value in the bitfield.  */"}, {"sha": "724763f65130af9a8337eddbd7eff03a7f8713ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a271e415611a80f1e86e625fd61360e193d04474", "patch": "@@ -1,3 +1,14 @@\n+2017-01-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* g++.dg/opt/call2.C: New test.\n+\t* g++.dg/opt/call3.C: Likewise.\n+\t* gnat.dg/array26.adb: New test.\n+\t* gnat.dg/array26_pkg.ad[sb]: New helper.\n+\t* gnat.dg/array27.adb: New test.\n+\t* gnat.dg/array27_pkg.ad[sb]: New helper.\n+\t* gnat.dg/array28.adb: New test.\n+\t* gnat.dg/array28_pkg.ad[sb]: New helper.\n+\n 2017-01-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR translation/79019"}, {"sha": "1b4d4b3fc6c83ac4165cce9fea7a18a5dbb726ac", "filename": "gcc/testsuite/g++.dg/opt/call2.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcall2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcall2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcall2.C?ref=a271e415611a80f1e86e625fd61360e193d04474", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do run }\n+// { dg-options \"-O\" }\n+\n+struct Foo\n+{\n+  Foo() : a(1), b(1), c('a') {}\n+  int a;\n+  int b;\n+  char c;\n+};\n+\n+static Foo copy_foo(Foo) __attribute__((noinline, noclone));\n+\n+static Foo copy_foo(Foo A)\n+{\n+  return A;\n+}\n+\n+struct Bar : Foo\n+{\n+  Bar(Foo t) : Foo(copy_foo(t)) {}\n+};\n+\n+Foo F;\n+\n+int main (void)\n+{\n+  Bar B (F);\n+\n+  if (B.a != 1 || B.b != 1 || B.c != 'a')\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "9aac7e2c050470d0bbcccf9db235edd266cca4ff", "filename": "gcc/testsuite/g++.dg/opt/call3.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcall3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcall3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fcall3.C?ref=a271e415611a80f1e86e625fd61360e193d04474", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do run }\n+// { dg-options \"-O\" }\n+\n+struct Foo\n+{\n+  Foo() : a(1), c('a') {}\n+  short int a;\n+  char c;\n+};\n+\n+static Foo copy_foo(Foo) __attribute__((noinline, noclone));\n+\n+static Foo copy_foo(Foo A)\n+{\n+  return A;\n+}\n+\n+struct Bar : Foo\n+{\n+  Bar(Foo t) : Foo(copy_foo(t)) {}\n+};\n+\n+Foo F;\n+\n+int main (void)\n+{\n+  Bar B (F);\n+\n+  if (B.a != 1 || B.c != 'a')\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "659d596fc1ef7935596faae06b36045bc0802b3d", "filename": "gcc/testsuite/gnat.dg/array26.adb", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Ftestsuite%2Fgnat.dg%2Farray26.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Ftestsuite%2Fgnat.dg%2Farray26.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray26.adb?ref=a271e415611a80f1e86e625fd61360e193d04474", "patch": "@@ -0,0 +1,22 @@\n+-- { dg-do run }\n+-- { dg-options \"-O\" }\n+\n+with Array26_Pkg; use Array26_Pkg;\n+\n+procedure Array26 is\n+\n+  function Get return Outer_type is\n+    Ret : Outer_Type;\n+  begin\n+    Ret (Inner_Type'Range) := F;\n+    return Ret;\n+  end;\n+\n+  A : Outer_Type := Get;\n+  B : Inner_Type := A (Inner_Type'Range);\n+\n+begin\n+  if B /= \"123\" then\n+    raise Program_Error;\n+  end if;\n+end;"}, {"sha": "f324bd2ce52ff73b9ac7985f4b480dc37a9cc2b9", "filename": "gcc/testsuite/gnat.dg/array26_pkg.adb", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Ftestsuite%2Fgnat.dg%2Farray26_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Ftestsuite%2Fgnat.dg%2Farray26_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray26_pkg.adb?ref=a271e415611a80f1e86e625fd61360e193d04474", "patch": "@@ -0,0 +1,8 @@\n+package body Array26_Pkg is\n+\n+  function F return Inner_Type is\n+  begin\n+    return \"123\";\n+  end;\n+\n+end Array26_Pkg;"}, {"sha": "ae84a74725ced885da47a1f42660db3fb0d212b9", "filename": "gcc/testsuite/gnat.dg/array26_pkg.ads", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Ftestsuite%2Fgnat.dg%2Farray26_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Ftestsuite%2Fgnat.dg%2Farray26_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray26_pkg.ads?ref=a271e415611a80f1e86e625fd61360e193d04474", "patch": "@@ -0,0 +1,8 @@\n+package Array26_Pkg is\n+\n+  subtype Outer_Type is String (1 .. 4);\n+  subtype Inner_Type is String (1 .. 3);\n+\n+  function F return Inner_Type;\n+\n+end Array26_Pkg;"}, {"sha": "db821c5f82d33937e307bfd9024391a0fa35ba4d", "filename": "gcc/testsuite/gnat.dg/array27.adb", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Ftestsuite%2Fgnat.dg%2Farray27.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Ftestsuite%2Fgnat.dg%2Farray27.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray27.adb?ref=a271e415611a80f1e86e625fd61360e193d04474", "patch": "@@ -0,0 +1,22 @@\n+-- { dg-do run }\n+-- { dg-options \"-O\" }\n+\n+with Array27_Pkg; use Array27_Pkg;\n+\n+procedure Array27 is\n+\n+  function Get return Outer_type is\n+    Ret : Outer_Type;\n+  begin\n+    Ret (Inner_Type'Range) := F;\n+    return Ret;\n+  end;\n+\n+  A : Outer_Type := Get;\n+  B : Inner_Type := A (Inner_Type'Range);\n+\n+begin\n+    if B /= \"123\" then\n+    raise Program_Error;\n+  end if;\n+end;"}, {"sha": "92c61b94a3253d963ff8441bf7dbc3c6f1d755e3", "filename": "gcc/testsuite/gnat.dg/array27_pkg.adb", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Ftestsuite%2Fgnat.dg%2Farray27_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Ftestsuite%2Fgnat.dg%2Farray27_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray27_pkg.adb?ref=a271e415611a80f1e86e625fd61360e193d04474", "patch": "@@ -0,0 +1,8 @@\n+package body Array27_Pkg is\n+\n+  function F return Inner_Type is\n+  begin\n+    return \"123\";\n+  end;\n+\n+end Array27_Pkg;"}, {"sha": "1473fbb4462159798ddcff649c49a9aa4c294000", "filename": "gcc/testsuite/gnat.dg/array27_pkg.ads", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Ftestsuite%2Fgnat.dg%2Farray27_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Ftestsuite%2Fgnat.dg%2Farray27_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray27_pkg.ads?ref=a271e415611a80f1e86e625fd61360e193d04474", "patch": "@@ -0,0 +1,8 @@\n+package Array27_Pkg is\n+\n+  subtype Outer_Type is String (1 .. 8);\n+  subtype Inner_Type is String (1 .. 3);\n+\n+  function F return Inner_Type;\n+\n+end Array27_Pkg;"}, {"sha": "aa31445d37dbbae1e765035b846aa0da2f3b0566", "filename": "gcc/testsuite/gnat.dg/array28.adb", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Ftestsuite%2Fgnat.dg%2Farray28.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Ftestsuite%2Fgnat.dg%2Farray28.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray28.adb?ref=a271e415611a80f1e86e625fd61360e193d04474", "patch": "@@ -0,0 +1,22 @@\n+-- { dg-do run }\n+-- { dg-options \"-O\" }\n+\n+with Array28_Pkg; use Array28_Pkg;\n+\n+procedure Array28 is\n+\n+  function Get return Outer_type is\n+    Ret : Outer_Type;\n+  begin\n+    Ret (Inner_Type'Range) := F;\n+    return Ret;\n+  end;\n+\n+  A : Outer_Type := Get;\n+  B : Inner_Type := A (Inner_Type'Range);\n+\n+begin\n+  if B /= \"12345\" then\n+    raise Program_Error;\n+  end if;\n+end;"}, {"sha": "726810b80f755d41d3ce016a19d9ee32134769c6", "filename": "gcc/testsuite/gnat.dg/array28_pkg.adb", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Ftestsuite%2Fgnat.dg%2Farray28_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Ftestsuite%2Fgnat.dg%2Farray28_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray28_pkg.adb?ref=a271e415611a80f1e86e625fd61360e193d04474", "patch": "@@ -0,0 +1,8 @@\n+package body Array28_Pkg is\n+\n+  function F return Inner_Type is\n+  begin\n+    return \"12345\";\n+  end;\n+\n+end Array28_Pkg;"}, {"sha": "6189010baf9e29d9e81fd8c2286c63be5527fd20", "filename": "gcc/testsuite/gnat.dg/array28_pkg.ads", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Ftestsuite%2Fgnat.dg%2Farray28_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a271e415611a80f1e86e625fd61360e193d04474/gcc%2Ftestsuite%2Fgnat.dg%2Farray28_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Farray28_pkg.ads?ref=a271e415611a80f1e86e625fd61360e193d04474", "patch": "@@ -0,0 +1,8 @@\n+package Array28_Pkg is\n+\n+  subtype Outer_Type is String (1 .. 8);\n+  subtype Inner_Type is String (1 .. 5);\n+\n+  function F return Inner_Type;\n+\n+end Array28_Pkg;"}]}