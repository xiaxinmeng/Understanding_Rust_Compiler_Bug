{"sha": "78605f0a685eddfb20bcf786f7a004747cc705e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg2MDVmMGE2ODVlZGRmYjIwYmNmNzg2ZjdhMDA0NzQ3Y2M3MDVlOA==", "commit": {"author": {"name": "Johannes Singler", "email": "singler@ira.uka.de", "date": "2009-09-24T08:52:23Z"}, "committer": {"name": "Johannes Singler", "email": "singler@gcc.gnu.org", "date": "2009-09-24T08:52:23Z"}, "message": "algo.h: Uglify internal identifiers; correct line breaks.\n\n2009-09-24  Johannes Singler  <singler@ira.uka.de>\n\n        * include/parallel/algo.h: Uglify internal identifiers;\n        correct line breaks.\n        * include/parallel/for_each.h: Likewise.\n        * include/parallel/numeric: Likewise.\n        * include/parallel/omp_loop.h: Likewise.\n        * include/parallel/omp_loop_static.h: Likewise.\n        * include/parallel/par_loop.h: Likewise.\n        * include/parallel/workstealing.h: Likewise.\n\nFrom-SVN: r152113", "tree": {"sha": "f07a854a3c4c67a0fb7e27d89240cde73f9cb08c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f07a854a3c4c67a0fb7e27d89240cde73f9cb08c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78605f0a685eddfb20bcf786f7a004747cc705e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78605f0a685eddfb20bcf786f7a004747cc705e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78605f0a685eddfb20bcf786f7a004747cc705e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78605f0a685eddfb20bcf786f7a004747cc705e8/comments", "author": null, "committer": null, "parents": [{"sha": "2a2e7f9dc51414d782982e3633c9e6df18e2a71e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a2e7f9dc51414d782982e3633c9e6df18e2a71e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a2e7f9dc51414d782982e3633c9e6df18e2a71e"}], "stats": {"total": 52, "additions": 31, "deletions": 21}, "files": [{"sha": "3fa14ac08decfc438756d721d25f5cf566c6eb5f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78605f0a685eddfb20bcf786f7a004747cc705e8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78605f0a685eddfb20bcf786f7a004747cc705e8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=78605f0a685eddfb20bcf786f7a004747cc705e8", "patch": "@@ -1,3 +1,14 @@\n+2009-09-24  Johannes Singler  <singler@ira.uka.de>\n+\n+        * include/parallel/algo.h: Uglify internal identifiers;\n+        correct line breaks.\n+        * include/parallel/for_each.h: Likewise.\n+        * include/parallel/numeric: Likewise.\n+        * include/parallel/omp_loop.h: Likewise.\n+        * include/parallel/omp_loop_static.h: Likewise.\n+        * include/parallel/par_loop.h: Likewise.\n+        * include/parallel/workstealing.h: Likewise.\n+\n 2009-09-24  Johannes Singler  <singler@ira.uka.de>\n \n         * include/parallel/base.h (_EqualFromLess):  Move _Compare template"}, {"sha": "8d685b5c946452840afbbc742f4d89ba655f8de4", "filename": "libstdc++-v3/include/parallel/algo.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78605f0a685eddfb20bcf786f7a004747cc705e8/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78605f0a685eddfb20bcf786f7a004747cc705e8/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h?ref=78605f0a685eddfb20bcf786f7a004747cc705e8", "patch": "@@ -1228,12 +1228,12 @@ namespace __parallel\n           bool __dummy = true;\n           typedef __gnu_parallel::_IteratorPair<_RAIter1,\n             _RAIter2, random_access_iterator_tag> _ItTrip;\n-          _ItTrip begin_pair(__begin, __result),\n-                  end_pair(__end, __result + (__end - __begin));\n+          _ItTrip __begin_pair(__begin, __result),\n+                  __end_pair(__end, __result + (__end - __begin));\n           __gnu_parallel::__transform1_selector<_ItTrip> __functionality;\n           __gnu_parallel::\n             __for_each_template_random_access(\n-              begin_pair, end_pair, __unary_op, __functionality,\n+              __begin_pair, __end_pair, __unary_op, __functionality,\n               __gnu_parallel::_DummyReduct(),\n               __dummy, __dummy, -1, __parallelism_tag);\n           return __functionality._M_finish_iterator;"}, {"sha": "b585999f51431f75a9c5e50a8b3943ba3de9b835", "filename": "libstdc++-v3/include/parallel/for_each.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78605f0a685eddfb20bcf786f7a004747cc705e8/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffor_each.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78605f0a685eddfb20bcf786f7a004747cc705e8/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffor_each.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ffor_each.h?ref=78605f0a685eddfb20bcf786f7a004747cc705e8", "patch": "@@ -69,26 +69,26 @@ namespace __gnu_parallel\n                                       _Parallelism __parallelism_tag)\n     {\n       if (__parallelism_tag == parallel_unbalanced)\n-        return for_each_template_random_access_ed(__begin, __end, __user_op,\n+        return __for_each_template_random_access_ed(__begin, __end, __user_op,\n                                                   __functionality, __reduction,\n                                                   __reduction_start,\n                                                   __output, __bound);\n       else if (__parallelism_tag == parallel_omp_loop)\n-        return for_each_template_random_access_omp_loop(\n+        return __for_each_template_random_access_omp_loop(\n                                                   __begin, __end, __user_op,\n                                                   __functionality,\n                                                   __reduction,\n                                                   __reduction_start,\n                                                   __output, __bound);\n       else if (__parallelism_tag == parallel_omp_loop_static)\n-        return for_each_template_random_access_omp_loop(\n+        return __for_each_template_random_access_omp_loop(\n                                                   __begin, __end, __user_op,\n                                                   __functionality,\n                                                   __reduction,\n                                                   __reduction_start,\n                                                   __output, __bound);\n       else      //e. g. parallel_balanced\n-        return for_each_template_random_access_workstealing(__begin, __end,\n+        return __for_each_template_random_access_workstealing(__begin, __end,\n                                                             __user_op,\n                                                             __functionality,\n                                                             __reduction,"}, {"sha": "06985ba99c93ad144d1adc1ae9a91b703a24a6c4", "filename": "libstdc++-v3/include/parallel/numeric", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78605f0a685eddfb20bcf786f7a004747cc705e8/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78605f0a685eddfb20bcf786f7a004747cc705e8/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric?ref=78605f0a685eddfb20bcf786f7a004747cc705e8", "patch": "@@ -98,7 +98,7 @@ __gnu_parallel::sequential_tag()); }\n           __gnu_parallel::__accumulate_selector<__RAIter>\n             __my_selector;\n           __gnu_parallel::\n-            for_each_template_random_access_ed(__begin, __end,\n+            __for_each_template_random_access_ed(__begin, __end,\n                                             __gnu_parallel::_Nothing(),\n                                             __my_selector,\n                                             __gnu_parallel::\n@@ -208,9 +208,9 @@ __gnu_parallel::sequential_tag()); }\n             __inner_product_selector<_RAIter1,\n             _RAIter2, _Tp> __my_selector(__first1, __first2);\n           __gnu_parallel::\n-            for_each_template_random_access_ed(__first1, __last1, __binary_op2,\n-                                            __my_selector, __binary_op1,\n-                                            __res, __res, -1);\n+            __for_each_template_random_access_ed(\n+                __first1, __last1, __binary_op2, __my_selector, __binary_op1,\n+                __res, __res, -1);\n           return __res;\n         }\n       else\n@@ -427,15 +427,14 @@ __gnu_parallel::sequential_tag()); }\n           typedef __gnu_parallel::_IteratorPair<_IIter, _OutputIterator,\n             random_access_iterator_tag> _ItTrip;\n           *__result = *__begin;\n-          _ItTrip begin_pair(__begin + 1, __result + 1),\n-            end_pair(__end, __result + (__end - __begin));\n+          _ItTrip __begin_pair(__begin + 1, __result + 1),\n+            __end_pair(__end, __result + (__end - __begin));\n           __gnu_parallel::__adjacent_difference_selector<_ItTrip>\n                                                             __functionality;\n           __gnu_parallel::\n-            for_each_template_random_access_ed(begin_pair, end_pair, __bin_op,\n-                                            __functionality,\n-                                            __gnu_parallel::_DummyReduct(),\n-                                            __dummy, __dummy, -1);\n+            __for_each_template_random_access_ed(\n+                __begin_pair, __end_pair, __bin_op, __functionality,\n+                __gnu_parallel::_DummyReduct(), __dummy, __dummy, -1);\n           return __functionality.finish_iterator;\n         }\n       else"}, {"sha": "2424bfbdde87c8808e63063092e1caedbe8434d2", "filename": "libstdc++-v3/include/parallel/omp_loop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78605f0a685eddfb20bcf786f7a004747cc705e8/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fomp_loop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78605f0a685eddfb20bcf786f7a004747cc705e8/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fomp_loop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fomp_loop.h?ref=78605f0a685eddfb20bcf786f7a004747cc705e8", "patch": "@@ -64,7 +64,7 @@ template<typename _RAIter,\n          typename _Red,\n          typename _Result>\n   _Op\n-  for_each_template_random_access_omp_loop(\n+  __for_each_template_random_access_omp_loop(\n     _RAIter __begin, _RAIter __end, _Op __o, _Fu& __f, _Red __r,\n     _Result __base, _Result& __output,\n     typename std::iterator_traits<_RAIter>::difference_type __bound)"}, {"sha": "3d9ed841ac62be97c3158e296d9025d9c7aba917", "filename": "libstdc++-v3/include/parallel/omp_loop_static.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78605f0a685eddfb20bcf786f7a004747cc705e8/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fomp_loop_static.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78605f0a685eddfb20bcf786f7a004747cc705e8/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fomp_loop_static.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fomp_loop_static.h?ref=78605f0a685eddfb20bcf786f7a004747cc705e8", "patch": "@@ -64,7 +64,7 @@ template<typename _RAIter,\n          typename _Red,\n          typename _Result>\n   _Op\n-  for_each_template_random_access_omp_loop_static(\n+  __for_each_template_random_access_omp_loop_static(\n     _RAIter __begin, _RAIter __end, _Op __o, _Fu& __f, _Red __r,\n     _Result __base, _Result& __output,\n     typename std::iterator_traits<_RAIter>::difference_type __bound)"}, {"sha": "c842364a6fd2eac3e5934cbd283088bff728fa88", "filename": "libstdc++-v3/include/parallel/par_loop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78605f0a685eddfb20bcf786f7a004747cc705e8/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpar_loop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78605f0a685eddfb20bcf786f7a004747cc705e8/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpar_loop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpar_loop.h?ref=78605f0a685eddfb20bcf786f7a004747cc705e8", "patch": "@@ -65,7 +65,7 @@ template<typename _RAIter,\n          typename _Red,\n          typename _Result>\n   _Op\n-  for_each_template_random_access_ed(\n+  __for_each_template_random_access_ed(\n     _RAIter __begin, _RAIter __end, _Op __o, _Fu& __f, _Red __r,\n     _Result __base, _Result& __output,\n     typename std::iterator_traits<_RAIter>::difference_type __bound)"}, {"sha": "638057ca7409c456373f9a789ec62973fca2ebb8", "filename": "libstdc++-v3/include/parallel/workstealing.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78605f0a685eddfb20bcf786f7a004747cc705e8/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fworkstealing.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78605f0a685eddfb20bcf786f7a004747cc705e8/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fworkstealing.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fworkstealing.h?ref=78605f0a685eddfb20bcf786f7a004747cc705e8", "patch": "@@ -96,7 +96,7 @@ template<typename _RAIter,\n          typename _Red,\n          typename _Result>\n   _Op\n-  for_each_template_random_access_workstealing(\n+  __for_each_template_random_access_workstealing(\n     _RAIter __begin, _RAIter __end, _Op __op, _Fu& __f, _Red __r,\n     _Result __base, _Result& __output,\n     typename std::iterator_traits<_RAIter>::difference_type __bound)"}]}