{"sha": "d308ca27c71e43625b378dc6c2774105867d4fa7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMwOGNhMjdjNzFlNDM2MjViMzc4ZGM2YzI3NzQxMDU4NjdkNGZhNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-08T16:08:03Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-08T16:08:03Z"}, "message": "Use correct vector type in neutral_op_for_slp_reduction\n\nWith the new reduction vectype handling, neutral_op_for_slp_reduction\nneeds to know whether the caller is using STMT_VINFO_REDUC_VECTYPE\n(for an epilogue value) or STMT_VINFO_VECTYPE (for a PHI argument).\n\nThis fixes various gcc.target/aarch64/sve/slp_* tests.\n\n2019-11-08  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vect-loop.c (neutral_op_for_slp_reduction): Take the\n\tvector type as an argument rather than reading it from the\n\tstmt_vec_info.\n\t(vect_create_epilog_for_reduction): Update accordingly.\n\t(vectorizable_reduction): Likewise.\n\t(vect_transform_cycle_phi): Likewise.\n\nFrom-SVN: r277977", "tree": {"sha": "f10d05368dc74046b05aa79baa3a0ae7fda28b41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f10d05368dc74046b05aa79baa3a0ae7fda28b41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d308ca27c71e43625b378dc6c2774105867d4fa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d308ca27c71e43625b378dc6c2774105867d4fa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d308ca27c71e43625b378dc6c2774105867d4fa7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d308ca27c71e43625b378dc6c2774105867d4fa7/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd14d6cbc4c82fd22a77d7c38ec37b5c8a97f23c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd14d6cbc4c82fd22a77d7c38ec37b5c8a97f23c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd14d6cbc4c82fd22a77d7c38ec37b5c8a97f23c"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "4c7e8ae12128888c74371be4c95261c6d1515bd0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d308ca27c71e43625b378dc6c2774105867d4fa7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d308ca27c71e43625b378dc6c2774105867d4fa7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d308ca27c71e43625b378dc6c2774105867d4fa7", "patch": "@@ -1,3 +1,12 @@\n+2019-11-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-loop.c (neutral_op_for_slp_reduction): Take the\n+\tvector type as an argument rather than reading it from the\n+\tstmt_vec_info.\n+\t(vect_create_epilog_for_reduction): Update accordingly.\n+\t(vectorizable_reduction): Likewise.\n+\t(vect_transform_cycle_phi): Likewise.\n+\n 2019-11-08  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/predicates.md (branch_comparison_operator): Allow only"}, {"sha": "78fe6290ee6bf069f7cfaabba466f119e41f39ac", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d308ca27c71e43625b378dc6c2774105867d4fa7/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d308ca27c71e43625b378dc6c2774105867d4fa7/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=d308ca27c71e43625b378dc6c2774105867d4fa7", "patch": "@@ -2590,17 +2590,17 @@ reduction_fn_for_scalar_code (enum tree_code code, internal_fn *reduc_fn)\n \n /* If there is a neutral value X such that SLP reduction NODE would not\n    be affected by the introduction of additional X elements, return that X,\n-   otherwise return null.  CODE is the code of the reduction.  REDUC_CHAIN\n-   is true if the SLP statements perform a single reduction, false if each\n-   statement performs an independent reduction.  */\n+   otherwise return null.  CODE is the code of the reduction and VECTOR_TYPE\n+   is the vector type that would hold element X.  REDUC_CHAIN is true if\n+   the SLP statements perform a single reduction, false if each statement\n+   performs an independent reduction.  */\n \n static tree\n-neutral_op_for_slp_reduction (slp_tree slp_node, tree_code code,\n-\t\t\t      bool reduc_chain)\n+neutral_op_for_slp_reduction (slp_tree slp_node, tree vector_type,\n+\t\t\t      tree_code code, bool reduc_chain)\n {\n   vec<stmt_vec_info> stmts = SLP_TREE_SCALAR_STMTS (slp_node);\n   stmt_vec_info stmt_vinfo = stmts[0];\n-  tree vector_type = STMT_VINFO_VECTYPE (stmt_vinfo);\n   tree scalar_type = TREE_TYPE (vector_type);\n   class loop *loop = gimple_bb (stmt_vinfo->stmt)->loop_father;\n   gcc_assert (loop);\n@@ -4220,11 +4220,6 @@ vect_create_epilog_for_reduction (stmt_vec_info stmt_info,\n     = as_a <gphi *> (STMT_VINFO_REDUC_DEF (vect_orig_stmt (stmt_info))->stmt);\n   enum tree_code code = STMT_VINFO_REDUC_CODE (reduc_info);\n   internal_fn reduc_fn = STMT_VINFO_REDUC_FN (reduc_info);\n-  tree neutral_op = NULL_TREE;\n-  if (slp_node)\n-    neutral_op\n-      = neutral_op_for_slp_reduction (slp_node_instance->reduc_phis, code,\n-\t\t\t\t      REDUC_GROUP_FIRST_ELEMENT (stmt_info));\n   stmt_vec_info prev_phi_info;\n   tree vectype;\n   machine_mode mode;\n@@ -4822,6 +4817,14 @@ vect_create_epilog_for_reduction (stmt_vec_info stmt_info,\n \t scalar value if we have one, otherwise the initial scalar value\n \t is itself a neutral value.  */\n       tree vector_identity = NULL_TREE;\n+      tree neutral_op = NULL_TREE;\n+      if (slp_node)\n+\t{\n+\t  stmt_vec_info first = REDUC_GROUP_FIRST_ELEMENT (stmt_info);\n+\t  neutral_op\n+\t    = neutral_op_for_slp_reduction (slp_node_instance->reduc_phis,\n+\t\t\t\t\t    vectype, code, first != NULL);\n+\t}\n       if (neutral_op)\n \tvector_identity = gimple_build_vector_from_val (&seq, vectype,\n \t\t\t\t\t\t\tneutral_op);\n@@ -6214,7 +6217,7 @@ vectorizable_reduction (stmt_vec_info stmt_info, slp_tree slp_node,\n   tree neutral_op = NULL_TREE;\n   if (slp_node)\n     neutral_op = neutral_op_for_slp_reduction\n-      (slp_node_instance->reduc_phis, orig_code,\n+      (slp_node_instance->reduc_phis, vectype_out, orig_code,\n        REDUC_GROUP_FIRST_ELEMENT (stmt_info) != NULL);\n \n   if (double_reduc && reduction_type == FOLD_LEFT_REDUCTION)\n@@ -6797,7 +6800,7 @@ vect_transform_cycle_phi (stmt_vec_info stmt_info, stmt_vec_info *vec_stmt,\n       gcc_assert (slp_node == slp_node_instance->reduc_phis);\n       stmt_vec_info first = REDUC_GROUP_FIRST_ELEMENT (reduc_stmt_info);\n       tree neutral_op\n-\t= neutral_op_for_slp_reduction (slp_node,\n+\t= neutral_op_for_slp_reduction (slp_node, vectype_out,\n \t\t\t\t\tSTMT_VINFO_REDUC_CODE (reduc_info),\n \t\t\t\t\tfirst != NULL);\n       get_initial_defs_for_reduction (slp_node_instance->reduc_phis,"}]}