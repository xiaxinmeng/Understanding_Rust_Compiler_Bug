{"sha": "8f2bf9f18d96cfdda037ee14619ff866bc021e73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYyYmY5ZjE4ZDk2Y2ZkZGEwMzdlZTE0NjE5ZmY4NjZiYzAyMWU3Mw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2005-02-09T14:43:28Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-02-09T14:43:28Z"}, "message": "re PR target/19597 (avr-gcc 4.0, multiplication by constant, very long code)\n\n\n\tPR target/19597\n\t* config/avr/avr.c (default_rtx_costs): Delete.\n\t(avr_operand_rtx_cost): New function.\n\t(avr_rtx_costs): Completely rewrite.\n\nFrom-SVN: r94766", "tree": {"sha": "56fbf20ab8bd740d8986ed9488b3bb69677b33ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56fbf20ab8bd740d8986ed9488b3bb69677b33ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f2bf9f18d96cfdda037ee14619ff866bc021e73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f2bf9f18d96cfdda037ee14619ff866bc021e73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f2bf9f18d96cfdda037ee14619ff866bc021e73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f2bf9f18d96cfdda037ee14619ff866bc021e73/comments", "author": null, "committer": null, "parents": [{"sha": "3ee79d96d2a8ba5a1e8ca35e1f793750153cd968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ee79d96d2a8ba5a1e8ca35e1f793750153cd968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ee79d96d2a8ba5a1e8ca35e1f793750153cd968"}], "stats": {"total": 609, "additions": 532, "deletions": 77}, "files": [{"sha": "b8675fb4a5ff09bc1fb7e26a1b8b5a7fe2bae5cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2bf9f18d96cfdda037ee14619ff866bc021e73/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2bf9f18d96cfdda037ee14619ff866bc021e73/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f2bf9f18d96cfdda037ee14619ff866bc021e73", "patch": "@@ -1,3 +1,10 @@\n+2005-02-09  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR target/19597\n+\t* config/avr/avr.c (default_rtx_costs): Delete.\n+\t(avr_operand_rtx_cost): New function.\n+\t(avr_rtx_costs): Completely rewrite.\n+\n 2005-02-08  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR target/19806"}, {"sha": "42dbf0295c7d9b646f61b6855a0585fdf693b96f", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 525, "deletions": 77, "changes": 602, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f2bf9f18d96cfdda037ee14619ff866bc021e73/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f2bf9f18d96cfdda037ee14619ff866bc021e73/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=8f2bf9f18d96cfdda037ee14619ff866bc021e73", "patch": "@@ -74,7 +74,7 @@ static unsigned int avr_section_type_flags (tree, const char *, int);\n static void avr_reorg (void);\n static void avr_asm_out_ctor (rtx, int);\n static void avr_asm_out_dtor (rtx, int);\n-static int default_rtx_costs (rtx, enum rtx_code, enum rtx_code);\n+static int avr_operand_rtx_cost (rtx, enum machine_mode, enum rtx_code);\n static bool avr_rtx_costs (rtx, int, int, int *);\n static int avr_address_cost (rtx);\n static bool avr_return_in_memory (tree, tree);\n@@ -4820,110 +4820,558 @@ order_regs_for_local_alloc (void)\n       reg_alloc_order[i] = order[i];\n }\n \n-/* Calculate the cost of X code of the expression in which it is contained,\n-   found in OUTER_CODE */\n+\n+/* Mutually recursive subroutine of avr_rtx_cost for calculating the\n+   cost of an RTX operand given its context.  X is the rtx of the\n+   operand, MODE is its mode, and OUTER is the rtx_code of this\n+   operand's parent operator.  */\n \n static int\n-default_rtx_costs (rtx X, enum rtx_code code, enum rtx_code outer_code)\n+avr_operand_rtx_cost (rtx x, enum machine_mode mode, enum rtx_code outer)\n {\n-  int cost=0;\n+  enum rtx_code code = GET_CODE (x);\n+  int total;\n+\n   switch (code)\n     {\n-    case SYMBOL_REF:\n-    case LABEL_REF:\n-      cost = 2 * GET_MODE_SIZE (GET_MODE (X));\n-      break;\n-    case MEM:\n-      if (outer_code != SET)\n-\tcost = 1;\n-      if (GET_CODE (XEXP (X,0)) == SYMBOL_REF)\n-\tcost += 2 * GET_MODE_SIZE (GET_MODE (X));\n-      else\n-\tcost += GET_MODE_SIZE (GET_MODE (X));\n-      break;\n+    case REG:\n+    case SUBREG:\n+      return 0;\n+\n     case CONST_INT:\n-      cost = 0;\n-      break;\n-    case SIGN_EXTEND:\n-      if (outer_code == SET)\n-\tcost = GET_MODE_SIZE (GET_MODE (X));\n-      else\n-\tcost = -GET_MODE_SIZE (GET_MODE (X));\n-      break;\n-    case ZERO_EXTEND:\n-      if (outer_code == SET)\n-\tcost = GET_MODE_SIZE (GET_MODE (X));\n-      else\n-\tcost = -1;\n-      break;\n-    case PLUS:\n-    case MINUS:\n-      if (outer_code == SET)\n-\t{\n-\t  if (X == stack_pointer_rtx)\n-\t    cost = -10;\n-\t  else if (GET_CODE (XEXP (X,1)) == CONST_INT)\n-\t    cost = (INTVAL (XEXP (X,1)) <= 63 ? 1 :\n-\t\t     GET_MODE_SIZE (GET_MODE (X)));\n-\t  else\n-\t    cost = GET_MODE_SIZE (GET_MODE (X));\n-\t}\n-      break;\n-    case COMPARE:\n-      if (GET_CODE (XEXP (X,1)) == CONST_INT)\n-\tcost = GET_MODE_SIZE (GET_MODE (XEXP (X,0)));\n-      break;\n+    case CONST_DOUBLE:\n+      return COSTS_N_INSNS (GET_MODE_SIZE (mode));\n+\n     default:\n       break;\n     }\n-  return cost;\n+\n+  total = 0;\n+  avr_rtx_costs (x, code, outer, &total);\n+  return total;\n }\n \n+/* The AVR backend's rtx_cost function.  X is rtx expression whose cost\n+   is to be calculated.  Return true if the complete cost has been\n+   computed, and false if subexpressions should be scanned.  In either\n+   case, *TOTAL contains the cost result.  */\n+\n static bool\n avr_rtx_costs (rtx x, int code, int outer_code, int *total)\n {\n-  int cst;\n+  enum machine_mode mode = GET_MODE (x);\n+  HOST_WIDE_INT val;\n \n   switch (code)\n     {\n     case CONST_INT:\n-      if (outer_code == PLUS\n-\t  || outer_code == IOR\n-\t  || outer_code == AND\n-\t  || outer_code == MINUS\n-\t  || outer_code == SET\n-\t  || INTVAL (x) == 0)\n+    case CONST_DOUBLE:\n+      /* Immediate constants are as cheap as registers.  */\n+      *total = 0;\n+      return true;\n+\n+    case MEM:\n+    case CONST:\n+    case LABEL_REF:\n+    case SYMBOL_REF:\n+      *total = COSTS_N_INSNS (GET_MODE_SIZE (mode));\n+      return true;\n+\n+    case NEG:\n+      switch (mode)\n \t{\n-          *total = 2;\n-\t  return true;\n+\tcase QImode:\n+\tcase SFmode:\n+\t  *total = COSTS_N_INSNS (1);\n+\t  break;\n+\n+\tcase HImode:\n+\t  *total = COSTS_N_INSNS (3);\n+\t  break;\n+\n+\tcase SImode:\n+\t  *total = COSTS_N_INSNS (7);\n+\t  break;\n+\n+\tdefault:\n+\t  return false;\n \t}\n-      if (outer_code == COMPARE\n-\t  && INTVAL (x) >= 0\n-\t  && INTVAL (x) <= 255)\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n+      return true;\n+\n+    case ABS:\n+      switch (mode)\n \t{\n-\t  *total = 2;\n-\t  return true;\n+\tcase QImode:\n+\tcase SFmode:\n+\t  *total = COSTS_N_INSNS (1);\n+\t  break;\n+\n+\tdefault:\n+\t  return false;\n \t}\n-      /* FALLTHRU */\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n+      return true;\n \n-    case CONST:\n-    case LABEL_REF:\n-    case SYMBOL_REF:\n-    case CONST_DOUBLE:\n-      *total = 4;\n+    case NOT:\n+      *total = COSTS_N_INSNS (GET_MODE_SIZE (mode));\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n       return true;\n \n-    default:\n-      cst = default_rtx_costs (x, code, outer_code);\n-      if (cst > 0)\n+    case ZERO_EXTEND:\n+      *total = COSTS_N_INSNS (GET_MODE_SIZE (mode)\n+\t\t\t      - GET_MODE_SIZE (GET_MODE (XEXP (x, 0))));\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n+      return true;\n+\n+    case SIGN_EXTEND:\n+      *total = COSTS_N_INSNS (GET_MODE_SIZE (mode) + 2\n+\t\t\t      - GET_MODE_SIZE (GET_MODE (XEXP (x, 0))));\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n+      return true;\n+\n+    case PLUS:\n+      switch (mode)\n+\t{\n+\tcase QImode:\n+\t  *total = COSTS_N_INSNS (1);\n+\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t    *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t  break;\n+\n+\tcase HImode:\n+\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t    {\n+\t      *total = COSTS_N_INSNS (2);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t    }\n+\t  else if (INTVAL (XEXP (x, 1)) >= -63 && INTVAL (XEXP (x, 1)) <= 63)\n+\t    *total = COSTS_N_INSNS (1);\n+\t  else\n+\t    *total = COSTS_N_INSNS (2);\n+\t  break;\n+\n+\tcase SImode:\n+\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t    {\n+\t      *total = COSTS_N_INSNS (4);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t    }\n+\t  else if (INTVAL (XEXP (x, 1)) >= -63 && INTVAL (XEXP (x, 1)) <= 63)\n+\t    *total = COSTS_N_INSNS (1);\n+\t  else\n+\t    *total = COSTS_N_INSNS (4);\n+\t  break;\n+\n+\tdefault:\n+\t  return false;\n+\t}\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n+      return true;\n+\n+    case MINUS:\n+    case AND:\n+    case IOR:\n+      *total = COSTS_N_INSNS (GET_MODE_SIZE (mode));\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n+      if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+          *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+      return true;\n+\n+    case XOR:\n+      *total = COSTS_N_INSNS (GET_MODE_SIZE (mode));\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n+      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+      return true;\n+\n+    case MULT:\n+      switch (mode)\n+\t{\n+\tcase QImode:\n+\t  if (AVR_ENHANCED)\n+\t    *total = COSTS_N_INSNS (optimize_size ? 3 : 4);\n+\t  else if (optimize_size)\n+\t    *total = COSTS_N_INSNS (AVR_MEGA ? 2 : 1);\n+\t  else\n+\t    return false;\n+\n+\tcase HImode:\n+\t  if (AVR_ENHANCED)\n+\t    *total = COSTS_N_INSNS (optimize_size ? 7 : 10);\n+\t  else if (optimize_size)\n+\t    *total = COSTS_N_INSNS (AVR_MEGA ? 2 : 1);\n+\t  else\n+\t    return false;\n+\n+\tdefault:\n+\t  return false;\n+\t}\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n+      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+      return true;\n+\n+    case DIV:\n+    case MOD:\n+    case UDIV:\n+    case UMOD:\n+      if (optimize_size)\n+\t*total = COSTS_N_INSNS (AVR_MEGA ? 2 : 1);\n+      else\n+\treturn false;\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n+      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+      return true;\n+\n+    case ASHIFT:\n+      switch (mode)\n+\t{\n+\tcase QImode:\n+\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t    {\n+\t      *total = COSTS_N_INSNS (optimize_size ? 4 : 17);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t    }\n+\t  else\n+\t    {\n+\t      val = INTVAL (XEXP (x, 1));\n+\t      if (val == 7)\n+\t\t*total = COSTS_N_INSNS (3);\n+\t      else if (val >= 0 && val <= 7)\n+\t\t*total = COSTS_N_INSNS (val);\n+\t      else\n+\t\t*total = COSTS_N_INSNS (1);\n+\t    }\n+\t  break;\n+\n+\tcase HImode:\n+\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t    {\n+\t      *total = COSTS_N_INSNS (optimize_size ? 5 : 41);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t    }\n+\t  else\n+\t    switch (INTVAL (XEXP (x, 1)))\n+\t      {\n+\t      case 0:\n+\t\t*total = 0;\n+\t\tbreak;\n+\t      case 1:\n+\t      case 8:\n+\t\t*total = COSTS_N_INSNS (2);\n+\t\tbreak;\n+\t      case 9:\n+\t\t*total = COSTS_N_INSNS (3);\n+\t\tbreak;\n+\t      case 2:\n+\t      case 3:\n+\t      case 10:\n+\t      case 15:\n+\t\t*total = COSTS_N_INSNS (4);\n+\t\tbreak;\n+\t      case 7:\n+\t      case 11:\n+\t      case 12:\n+\t\t*total = COSTS_N_INSNS (5);\n+\t\tbreak;\n+\t      case 4:\n+\t\t*total = COSTS_N_INSNS (optimize_size ? 5 : 8);\n+\t\tbreak;\n+\t      case 6:\n+\t\t*total = COSTS_N_INSNS (optimize_size ? 5 : 9);\n+\t\tbreak;\n+\t      case 5:\n+\t\t*total = COSTS_N_INSNS (optimize_size ? 5 : 10);\n+\t\tbreak;\n+\t      default:\n+\t        *total = COSTS_N_INSNS (optimize_size ? 5 : 41);\n+\t        *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t      }\n+\t  break;\n+\n+\tcase SImode:\n+\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t    {\n+\t      *total = COSTS_N_INSNS (optimize_size ? 7 : 113);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t    }\n+\t  else\n+\t    switch (INTVAL (XEXP (x, 1)))\n+\t      {\n+\t      case 0:\n+\t\t*total = 0;\n+\t\tbreak;\n+\t      case 24:\n+\t\t*total = COSTS_N_INSNS (3);\n+\t\tbreak;\n+\t      case 1:\n+\t      case 8:\n+\t      case 16:\n+\t\t*total = COSTS_N_INSNS (4);\n+\t\tbreak;\n+\t      case 31:\n+\t\t*total = COSTS_N_INSNS (6);\n+\t\tbreak;\n+\t      case 2:\n+\t\t*total = COSTS_N_INSNS (optimize_size ? 7 : 8);\n+\t\tbreak;\n+\t      default:\n+\t\t*total = COSTS_N_INSNS (optimize_size ? 7 : 113);\n+\t\t*total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t      }\n+\t  break;\n+\n+\tdefault:\n+\t  return false;\n+\t}\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n+      return true;\n+\n+    case ASHIFTRT:\n+      switch (mode)\n+\t{\n+\tcase QImode:\n+\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t    {\n+\t      *total = COSTS_N_INSNS (optimize_size ? 4 : 17);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t    }\n+\t  else\n+\t    {\n+\t      val = INTVAL (XEXP (x, 1));\n+\t      if (val == 6)\n+\t\t*total = COSTS_N_INSNS (4);\n+\t      else if (val == 7)\n+\t\t*total = COSTS_N_INSNS (2);\n+\t      else if (val >= 0 && val <= 7)\n+\t\t*total = COSTS_N_INSNS (val);\n+\t      else\n+\t\t*total = COSTS_N_INSNS (1);\n+\t    }\n+\t  break;\n+\n+\tcase HImode:\n+\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t    {\n+\t      *total = COSTS_N_INSNS (optimize_size ? 5 : 41);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t    }\n+\t  else\n+\t    switch (INTVAL (XEXP (x, 1)))\n+\t      {\n+\t      case 0:\n+\t\t*total = 0;\n+\t\tbreak;\n+\t      case 1:\n+\t\t*total = COSTS_N_INSNS (2);\n+\t\tbreak;\n+\t      case 15:\n+\t\t*total = COSTS_N_INSNS (3);\n+\t\tbreak;\n+\t      case 2:\n+\t      case 7:\n+              case 8:\n+              case 9:\n+\t\t*total = COSTS_N_INSNS (4);\n+\t\tbreak;\n+              case 10:\n+\t      case 14:\n+\t\t*total = COSTS_N_INSNS (5);\n+\t\tbreak;\n+              case 11:\n+                *total = COSTS_N_INSNS (optimize_size ? 5 : 6);\n+\t\tbreak;\n+              case 12:\n+                *total = COSTS_N_INSNS (optimize_size ? 5 : 7);\n+\t\tbreak;\n+              case 6:\n+\t      case 13:\n+                *total = COSTS_N_INSNS (optimize_size ? 5 : 8);\n+\t\tbreak;\n+\t      default:\n+\t        *total = COSTS_N_INSNS (optimize_size ? 5 : 41);\n+\t        *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t      }\n+\t  break;\n+\n+\tcase SImode:\n+\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t    {\n+\t      *total = COSTS_N_INSNS (optimize_size ? 7 : 113);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t    }\n+\t  else\n+\t    switch (INTVAL (XEXP (x, 1)))\n+\t      {\n+\t      case 0:\n+\t\t*total = 0;\n+\t\tbreak;\n+\t      case 1:\n+\t\t*total = COSTS_N_INSNS (4);\n+\t\tbreak;\n+\t      case 8:\n+\t      case 16:\n+\t      case 24:\n+\t\t*total = COSTS_N_INSNS (6);\n+\t\tbreak;\n+\t      case 2:\n+\t\t*total = COSTS_N_INSNS (optimize_size ? 7 : 8);\n+\t\tbreak;\n+\t      case 31:\n+\t\t*total = COSTS_N_INSNS (AVR_ENHANCED ? 4 : 5);\n+\t\tbreak;\n+\t      default:\n+\t\t*total = COSTS_N_INSNS (optimize_size ? 7 : 113);\n+\t\t*total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t      }\n+\t  break;\n+\n+\tdefault:\n+\t  return false;\n+\t}\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n+      return true;\n+\n+    case LSHIFTRT:\n+      switch (mode)\n+\t{\n+\tcase QImode:\n+\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t    {\n+\t      *total = COSTS_N_INSNS (optimize_size ? 4 : 17);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t    }\n+\t  else\n+\t    {\n+\t      val = INTVAL (XEXP (x, 1));\n+\t      if (val == 7)\n+\t\t*total = COSTS_N_INSNS (3);\n+\t      else if (val >= 0 && val <= 7)\n+\t\t*total = COSTS_N_INSNS (val);\n+\t      else\n+\t\t*total = COSTS_N_INSNS (1);\n+\t    }\n+\t  break;\n+\n+\tcase HImode:\n+\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t    {\n+\t      *total = COSTS_N_INSNS (optimize_size ? 5 : 41);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t    }\n+\t  else\n+\t    switch (INTVAL (XEXP (x, 1)))\n+\t      {\n+\t      case 0:\n+\t\t*total = 0;\n+\t\tbreak;\n+\t      case 1:\n+\t      case 8:\n+\t\t*total = COSTS_N_INSNS (2);\n+\t\tbreak;\n+\t      case 9:\n+\t\t*total = COSTS_N_INSNS (3);\n+\t\tbreak;\n+\t      case 2:\n+\t      case 10:\n+\t      case 15:\n+\t\t*total = COSTS_N_INSNS (4);\n+\t\tbreak;\n+\t      case 7:\n+              case 11:\n+\t\t*total = COSTS_N_INSNS (5);\n+\t\tbreak;\n+\t      case 3:\n+\t      case 12:\n+\t      case 13:\n+\t      case 14:\n+\t\t*total = COSTS_N_INSNS (optimize_size ? 5 : 6);\n+\t\tbreak;\n+\t      case 4:\n+\t\t*total = COSTS_N_INSNS (optimize_size ? 5 : 7);\n+\t\tbreak;\n+\t      case 5:\n+\t      case 6:\n+\t\t*total = COSTS_N_INSNS (optimize_size ? 5 : 9);\n+\t\tbreak;\n+\t      default:\n+\t        *total = COSTS_N_INSNS (optimize_size ? 5 : 41);\n+\t        *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t      }\n+\t  break;\n+\n+\tcase SImode:\n+\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t    {\n+\t      *total = COSTS_N_INSNS (optimize_size ? 7 : 113);\n+\t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t    }\n+\t  else\n+\t    switch (INTVAL (XEXP (x, 1)))\n+\t      {\n+\t      case 0:\n+\t\t*total = 0;\n+\t\tbreak;\n+\t      case 1:\n+\t\t*total = COSTS_N_INSNS (4);\n+\t\tbreak;\n+\t      case 2:\n+\t\t*total = COSTS_N_INSNS (optimize_size ? 7 : 8);\n+\t\tbreak;\n+\t      case 8:\n+\t      case 16:\n+\t      case 24:\n+\t\t*total = COSTS_N_INSNS (4);\n+\t\tbreak;\n+\t      case 31:\n+\t\t*total = COSTS_N_INSNS (6);\n+\t\tbreak;\n+\t      default:\n+\t\t*total = COSTS_N_INSNS (optimize_size ? 7 : 113);\n+\t\t*total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t      }\n+\t  break;\n+\n+\tdefault:\n+\t  return false;\n+\t}\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n+      return true;\n+\n+    case COMPARE:\n+      switch (GET_MODE (XEXP (x, 0)))\n \t{\n-\t  *total = cst;\n-\t  return true;\n+\tcase QImode:\n+\t  *total = COSTS_N_INSNS (1);\n+\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t    *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t  break;\n+\n+        case HImode:\n+\t  *total = COSTS_N_INSNS (2);\n+\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+            *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t  else if (INTVAL (XEXP (x, 1)) != 0)\n+\t    *total += COSTS_N_INSNS (1);\n+          break;\n+\n+        case SImode:\n+          *total = COSTS_N_INSNS (4);\n+          if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+            *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code);\n+\t  else if (INTVAL (XEXP (x, 1)) != 0)\n+\t    *total += COSTS_N_INSNS (3);\n+          break;\n+\n+\tdefault:\n+\t  return false;\n \t}\n-      else if (cst < 0)\n-\t*total += -cst;\n-      return false;\n+      *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);\n+      return true;\n+\n+    default:\n+      break;\n     }\n+  return false;\n }\n \n /* Calculate the cost of a memory address.  */"}]}