{"sha": "b2d5779326ed5cc88bdfd92051d7a0bc077b08ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJkNTc3OTMyNmVkNWNjODhiZGZkOTIwNTFkN2EwYmMwNzdiMDhlZg==", "commit": {"author": {"name": "Daniel Berlin", "email": "dan@cgsoftware.com", "date": "2001-07-29T18:21:08Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2001-07-29T18:21:08Z"}, "message": "[multiple changes]\n\n2001-07-27  Daniel Berlin  <dan@cgsoftware.com>\n\n\t* regclass.c (reg_scan_mark_refs): Increment REG_N_REFS when we\n\tincrement REG_N_SETS.\n\n2001-07-26  Daniel Berlin  <dan@cgsoftware.com>\n\n\t* sbitmap.h: New prototype for sbitmap_a_xor_b.\n\n\t* sbitmap.c (sbitmap_a_xor_b): New function.\n\t#ifdef the basic block stuff on the define IN_GCC.\n\nFrom-SVN: r44460", "tree": {"sha": "338c1dfc401b2ef68f7aac1d0b6b6ba145663419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/338c1dfc401b2ef68f7aac1d0b6b6ba145663419"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2d5779326ed5cc88bdfd92051d7a0bc077b08ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2d5779326ed5cc88bdfd92051d7a0bc077b08ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2d5779326ed5cc88bdfd92051d7a0bc077b08ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2d5779326ed5cc88bdfd92051d7a0bc077b08ef/comments", "author": null, "committer": null, "parents": [{"sha": "6d18adbc2c00b2919cbf6b59219a2287e6feecd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d18adbc2c00b2919cbf6b59219a2287e6feecd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d18adbc2c00b2919cbf6b59219a2287e6feecd7"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "e33fa6789a86da56a6b1d569ba90168c48f612d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2d5779326ed5cc88bdfd92051d7a0bc077b08ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2d5779326ed5cc88bdfd92051d7a0bc077b08ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2d5779326ed5cc88bdfd92051d7a0bc077b08ef", "patch": "@@ -1,3 +1,15 @@\n+2001-07-27  Daniel Berlin  <dan@cgsoftware.com>\n+\n+\t* regclass.c (reg_scan_mark_refs): Increment REG_N_REFS when we\n+\tincrement REG_N_SETS.\n+\n+2001-07-26  Daniel Berlin  <dan@cgsoftware.com>\n+\n+\t* sbitmap.h: New prototype for sbitmap_a_xor_b.\n+\n+\t* sbitmap.c (sbitmap_a_xor_b): New function.\n+\tifdef the basic block stuff on IN_GCC.\n+\n 2001-07-29  Neil Booth  <neil@cat.daikokuya.demon.co.uk>\n \n \t* cppexp.c (parse_defined): Always record the macro name."}, {"sha": "2d80e7eb84afbf4dc6350684dd0d04c6efd79f10", "filename": "gcc/regclass.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2d5779326ed5cc88bdfd92051d7a0bc077b08ef/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2d5779326ed5cc88bdfd92051d7a0bc077b08ef/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=b2d5779326ed5cc88bdfd92051d7a0bc077b08ef", "patch": "@@ -2427,7 +2427,10 @@ reg_scan_mark_refs (x, insn, note_flag, min_regno)\n \n       if (GET_CODE (dest) == REG\n \t  && REGNO (dest) >= min_regno)\n-\tREG_N_SETS (REGNO (dest))++;\n+\t{\n+\t  REG_N_SETS (REGNO (dest))++;\n+\t  REG_N_REFS (REGNO (dest))++;\n+\t}\n \n       /* If this is setting a pseudo from another pseudo or the sum of a\n \t pseudo and a constant integer and the other pseudo is known to be"}, {"sha": "5490a6321d18f9316ae327b7902fcae4b31bde57", "filename": "gcc/sbitmap.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2d5779326ed5cc88bdfd92051d7a0bc077b08ef/gcc%2Fsbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2d5779326ed5cc88bdfd92051d7a0bc077b08ef/gcc%2Fsbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.c?ref=b2d5779326ed5cc88bdfd92051d7a0bc077b08ef", "patch": "@@ -99,6 +99,13 @@ sbitmap_copy (dst, src)\n   memcpy (dst->elms, src->elms, sizeof (SBITMAP_ELT_TYPE) * dst->size);\n }\n \n+/* Determine if a == b. */\n+int\n+sbitmap_equal (a, b)\n+     sbitmap a, b;\n+{\n+  return !memcmp (a->elms, b->elms, sizeof (SBITMAP_ELT_TYPE) * a->size);\n+}\n /* Zero all elements in a bitmap.  */\n \n void\n@@ -230,6 +237,31 @@ sbitmap_a_and_b (dst, a, b)\n   return changed;\n }\n \n+/* Set DST to be (A xor B)).\n+   Return non-zero if any change is made. */\n+\n+int\n+sbitmap_a_xor_b (dst, a, b)\n+     sbitmap dst, a, b;\n+{\n+  unsigned int i;\n+  sbitmap_ptr dstp, ap, bp;\n+  int changed = 0;\n+  \n+  for (dstp = dst->elms, ap = a->elms, bp = b->elms, i = 0; i < dst->size;\n+       i++, dstp++)\n+    {\n+      SBITMAP_ELT_TYPE tmp = *ap++ ^ *bp++;\n+      \n+      if (*dstp != tmp)\n+\t{\n+\t  changed = 1;\n+\t  *dstp = tmp;\n+\t}\n+    }\n+  return changed;\n+}\n+\n /* Set DST to be (A or B)).\n    Return non-zero if any change is made.  */\n \n@@ -324,6 +356,7 @@ sbitmap_a_and_b_or_c (dst, a, b, c)\n   return changed;\n }\n \n+#ifdef IN_GCC\n /* Set the bitmap DST to the intersection of SRC of successors of\n    block number BB, using the new flow graph structures.  */\n \n@@ -483,6 +516,7 @@ sbitmap_union_of_preds (dst, src, bb)\n \t  *r++ |= *p++;\n       }\n }\n+#endif\n \n /* Return number of first bit set in the bitmap, -1 if none.  */\n "}, {"sha": "28e789493ad0c7ee3f2a59d7585988f67c463f57", "filename": "gcc/sbitmap.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2d5779326ed5cc88bdfd92051d7a0bc077b08ef/gcc%2Fsbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2d5779326ed5cc88bdfd92051d7a0bc077b08ef/gcc%2Fsbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.h?ref=b2d5779326ed5cc88bdfd92051d7a0bc077b08ef", "patch": "@@ -97,6 +97,7 @@ extern void dump_sbitmap_vector \tPARAMS ((FILE *, const char *,\n extern sbitmap sbitmap_alloc\t\tPARAMS ((unsigned int));\n extern sbitmap *sbitmap_vector_alloc\tPARAMS ((unsigned int, unsigned int));\n extern void sbitmap_copy \t\tPARAMS ((sbitmap, sbitmap));\n+extern int sbitmap_equal                PARAMS ((sbitmap, sbitmap));\n extern void sbitmap_zero\t\tPARAMS ((sbitmap));\n extern void sbitmap_ones\t\tPARAMS ((sbitmap));\n extern void sbitmap_vector_zero\t\tPARAMS ((sbitmap *, unsigned int));\n@@ -112,6 +113,7 @@ extern int sbitmap_a_and_b_or_c\t\tPARAMS ((sbitmap, sbitmap, sbitmap,\n \t\t\t\t\t\t sbitmap));\n extern int sbitmap_a_and_b\t\tPARAMS ((sbitmap, sbitmap, sbitmap));\n extern int sbitmap_a_or_b\t\tPARAMS ((sbitmap, sbitmap, sbitmap));\n+extern int sbitmap_a_xor_b              PARAMS ((sbitmap, sbitmap, sbitmap));\n extern int sbitmap_a_subset_b_p\t\tPARAMS ((sbitmap, sbitmap));\n \n extern int sbitmap_first_set_bit\tPARAMS ((sbitmap));"}]}