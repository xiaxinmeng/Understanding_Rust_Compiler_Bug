{"sha": "cdd6e2db6a911a0b113a315793492c854319bc53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RkNmUyZGI2YTkxMWEwYjExM2EzMTU3OTM0OTJjODU0MzE5YmM1Mw==", "commit": {"author": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-11-20T20:38:07Z"}, "committer": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-11-20T20:38:07Z"}, "message": "(expand_inline_function): Mark all notes as integrated.\n\nFrom-SVN: r2764", "tree": {"sha": "83521525deeab939c4af904807b444fed43060ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83521525deeab939c4af904807b444fed43060ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdd6e2db6a911a0b113a315793492c854319bc53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd6e2db6a911a0b113a315793492c854319bc53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdd6e2db6a911a0b113a315793492c854319bc53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd6e2db6a911a0b113a315793492c854319bc53/comments", "author": null, "committer": null, "parents": [{"sha": "89881415f5d45a0da9f300b60d35141e1661ba09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89881415f5d45a0da9f300b60d35141e1661ba09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89881415f5d45a0da9f300b60d35141e1661ba09"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "84cbc1368d86274ed47c0f544a63571782b74b48", "filename": "gcc/integrate.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd6e2db6a911a0b113a315793492c854319bc53/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd6e2db6a911a0b113a315793492c854319bc53/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=cdd6e2db6a911a0b113a315793492c854319bc53", "patch": "@@ -1192,7 +1192,12 @@ expand_inline_function (fndecl, parms, target, ignore, type, structure_value_add\n   expand_start_bindings (0);\n   if (GET_CODE (parm_insns) == NOTE\n       && NOTE_LINE_NUMBER (parm_insns) > 0)\n-    emit_note (NOTE_SOURCE_FILE (parm_insns), NOTE_LINE_NUMBER (parm_insns));\n+    {\n+      rtx note = emit_note (NOTE_SOURCE_FILE (parm_insns),\n+\t\t\t    NOTE_LINE_NUMBER (parm_insns));\n+      if (note)\n+\tRTX_INTEGRATED_P (note) = 1;\n+    }\n \n   /* Expand the function arguments.  Do this first so that any\n      new registers get created before we allocate the maps.  */\n@@ -1212,7 +1217,10 @@ expand_inline_function (fndecl, parms, target, ignore, type, structure_value_add\n       /* Where parameter is located in the function.  */\n       rtx copy;\n \n-      emit_note (DECL_SOURCE_FILE (formal), DECL_SOURCE_LINE (formal));\n+      rtx note = emit_note (DECL_SOURCE_FILE (formal),\n+\t\t\t    DECL_SOURCE_LINE (formal));\n+      if (note)\n+\tRTX_INTEGRATED_P (note) = 1;\n \n       arg_trees[i] = arg;\n       loc = RTVEC_ELT (arg_vector, i);\n@@ -1398,7 +1406,10 @@ expand_inline_function (fndecl, parms, target, ignore, type, structure_value_add\n \t  && ! (GET_CODE (XEXP (loc, 0)) == REG\n \t\t&& REGNO (XEXP (loc, 0)) > LAST_VIRTUAL_REGISTER))\n \t{\n-\t  emit_note (DECL_SOURCE_FILE (formal), DECL_SOURCE_LINE (formal));\n+\t  rtx note = emit_note (DECL_SOURCE_FILE (formal),\n+\t\t\t\tDECL_SOURCE_LINE (formal));\n+\t  if (note)\n+\t    RTX_INTEGRATED_P (note) = 1;\n \n \t  /* Compute the address in the area we reserved and store the\n \t     value there.  */"}]}