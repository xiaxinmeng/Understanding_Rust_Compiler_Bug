{"sha": "ebc449119442501c927ede0e83697eaece72223e", "node_id": "C_kwDOANBUbNoAKGViYzQ0OTExOTQ0MjUwMWM5MjdlZGUwZTgzNjk3ZWFlY2U3MjIyM2U", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-04T11:16:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-04T11:16:22Z"}, "message": "vrp: Handle pointers in maybe_set_nonzero_bits [PR108253]\n\nmaybe_set_nonzero_bits calls set_nonzero_bits which asserts that\nvar doesn't have pointer type.  While we could punt for those\ncases, I think we can handle at least some easy cases.\nEarlier in maybe_set_nonzero_bits we've checked this is on\n(var & cst) == 0\nedge and the other edge is __builtin_unreachable, so if cst\nis say 3 as in the testcase, we want to turn it into 4 byte alignment\nof the pointer.\n\n2023-01-04  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/108253\n\t* tree-vrp.cc (maybe_set_nonzero_bits): Handle var with pointer\n\ttypes.\n\n\t* g++.dg/opt/pr108253.C: New test.", "tree": {"sha": "229d0671534b2446b2ae1b945a01e99d580c95fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/229d0671534b2446b2ae1b945a01e99d580c95fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebc449119442501c927ede0e83697eaece72223e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebc449119442501c927ede0e83697eaece72223e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebc449119442501c927ede0e83697eaece72223e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebc449119442501c927ede0e83697eaece72223e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "345dffd0d4ebff7e705dfff1a8a72017a167120a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/345dffd0d4ebff7e705dfff1a8a72017a167120a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/345dffd0d4ebff7e705dfff1a8a72017a167120a"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "0409121f2c762b626997f6fb7d6efc1c8e7df502", "filename": "gcc/testsuite/g++.dg/opt/pr108253.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebc449119442501c927ede0e83697eaece72223e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr108253.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebc449119442501c927ede0e83697eaece72223e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr108253.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr108253.C?ref=ebc449119442501c927ede0e83697eaece72223e", "patch": "@@ -0,0 +1,48 @@\n+// PR tree-optimization/108253\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-O2\" }\n+\n+struct S\n+{\n+  int *s;\n+  S () : s (new int) {}\n+  S (const S &r) noexcept : s (r.s) { __atomic_fetch_add (r.s, 1, 4); }\n+};\n+struct T\n+{\n+  explicit T (const S &x) : t (x) {}\n+  const S t;\n+};\n+struct U\n+{\n+  operator int () const { new T (u); return 0; }\n+  S u;\n+};\n+bool foo (int matcher);\n+unsigned long bar (unsigned long pos, unsigned long end_pos);\n+struct V\n+{\n+  alignas (4) char v[4];\n+};\n+struct W\n+{\n+  void baz ()\n+  {\n+    if (!w) __builtin_abort ();\n+    if (reinterpret_cast <__UINTPTR_TYPE__> (w->v) % 4 != 0) __builtin_abort ();\n+    __builtin_unreachable ();\n+  }\n+  [[gnu::noinline]] void qux (unsigned long) { if (!w) bar (0, x); } \n+  V *w = nullptr;\n+  unsigned x = 0;\n+};\n+\n+void\n+test ()\n+{\n+  W w;\n+  U t;\n+  if (!foo (t))\n+    w.baz ();\n+  w.qux (0);\n+}"}, {"sha": "3c431760a16aa4ad48ca7914d3813fafcfe04205", "filename": "gcc/tree-vrp.cc", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebc449119442501c927ede0e83697eaece72223e/gcc%2Ftree-vrp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebc449119442501c927ede0e83697eaece72223e/gcc%2Ftree-vrp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.cc?ref=ebc449119442501c927ede0e83697eaece72223e", "patch": "@@ -789,8 +789,22 @@ maybe_set_nonzero_bits (edge e, tree var)\n \treturn;\n     }\n   cst = gimple_assign_rhs2 (stmt);\n-  set_nonzero_bits (var, wi::bit_and_not (get_nonzero_bits (var),\n-\t\t\t\t\t  wi::to_wide (cst)));\n+  if (POINTER_TYPE_P (TREE_TYPE (var)))\n+    {\n+      struct ptr_info_def *pi = SSA_NAME_PTR_INFO (var);\n+      if (pi && pi->misalign)\n+\treturn;\n+      wide_int w = wi::bit_not (wi::to_wide (cst));\n+      unsigned int bits = wi::ctz (w);\n+      if (bits == 0 || bits >= HOST_BITS_PER_INT)\n+\treturn;\n+      unsigned int align = 1U << bits;\n+      if (pi == NULL || pi->align < align)\n+\tset_ptr_info_alignment (get_ptr_info (var), align, 0);\n+    }\n+  else\n+    set_nonzero_bits (var, wi::bit_and_not (get_nonzero_bits (var),\n+\t\t\t\t\t    wi::to_wide (cst)));\n }\n \n /* Searches the case label vector VEC for the index *IDX of the CASE_LABEL"}]}