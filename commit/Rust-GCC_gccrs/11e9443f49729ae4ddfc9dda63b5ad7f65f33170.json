{"sha": "11e9443f49729ae4ddfc9dda63b5ad7f65f33170", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFlOTQ0M2Y0OTcyOWFlNGRkZmM5ZGRhNjNiNWFkN2Y2NWYzMzE3MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-03-13T15:12:14Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-03-13T15:12:14Z"}, "message": "[AArch64] Add SVE mul_highpart patterns\n\nOne advantage of the new permute handling compared to the old way is\nthat we can now easily take advantage of the vectoriser's divmod patterns\nfor SVE.\n\n2018-03-13  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* config/aarch64/iterators.md (UNSPEC_SMUL_HIGHPART)\n\t(UNSPEC_UMUL_HIGHPART): New constants.\n\t(MUL_HIGHPART): New int iteraor.\n\t(su): Handle UNSPEC_SMUL_HIGHPART and UNSPEC_UMUL_HIGHPART.\n\t* config/aarch64/aarch64-sve.md (<su>mul<mode>3_highpart): New\n\tdefine_expand.\n\t(*<su>mul<mode>3_highpart): New define_insn.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/mul_highpart_1.c: New test.\n\t* gcc.target/aarch64/sve/mul_highpart_1_run.c: Likewise.\n\nFrom-SVN: r258487", "tree": {"sha": "bca5ae159b99940d6448ecc1c33e26fca91d47f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bca5ae159b99940d6448ecc1c33e26fca91d47f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11e9443f49729ae4ddfc9dda63b5ad7f65f33170", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11e9443f49729ae4ddfc9dda63b5ad7f65f33170", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11e9443f49729ae4ddfc9dda63b5ad7f65f33170", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11e9443f49729ae4ddfc9dda63b5ad7f65f33170/comments", "author": null, "committer": null, "parents": [{"sha": "c9b39302efd79e2ef9c8f922b3068633edd40e76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b39302efd79e2ef9c8f922b3068633edd40e76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9b39302efd79e2ef9c8f922b3068633edd40e76"}], "stats": {"total": 105, "additions": 104, "deletions": 1}, "files": [{"sha": "2dbe441db5642a0ef6ed0912ddbbd4148971fb2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e9443f49729ae4ddfc9dda63b5ad7f65f33170/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e9443f49729ae4ddfc9dda63b5ad7f65f33170/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11e9443f49729ae4ddfc9dda63b5ad7f65f33170", "patch": "@@ -1,3 +1,13 @@\n+2018-03-13  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* config/aarch64/iterators.md (UNSPEC_SMUL_HIGHPART)\n+\t(UNSPEC_UMUL_HIGHPART): New constants.\n+\t(MUL_HIGHPART): New int iteraor.\n+\t(su): Handle UNSPEC_SMUL_HIGHPART and UNSPEC_UMUL_HIGHPART.\n+\t* config/aarch64/aarch64-sve.md (<su>mul<mode>3_highpart): New\n+\tdefine_expand.\n+\t(*<su>mul<mode>3_highpart): New define_insn.\n+\n 2018-03-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR lto/84805"}, {"sha": "2e7f0a45f793081d80e43a68929a07abc3b44117", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e9443f49729ae4ddfc9dda63b5ad7f65f33170/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e9443f49729ae4ddfc9dda63b5ad7f65f33170/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=11e9443f49729ae4ddfc9dda63b5ad7f65f33170", "patch": "@@ -980,6 +980,34 @@\n    mls\\t%0.<Vetype>, %1/m, %2.<Vetype>, %3.<Vetype>\"\n )\n \n+;; Unpredicated highpart multiplication.\n+(define_expand \"<su>mul<mode>3_highpart\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\")\n+\t(unspec:SVE_I\n+\t  [(match_dup 3)\n+\t   (unspec:SVE_I [(match_operand:SVE_I 1 \"register_operand\")\n+\t\t\t  (match_operand:SVE_I 2 \"register_operand\")]\n+\t\t\t MUL_HIGHPART)]\n+\t  UNSPEC_MERGE_PTRUE))]\n+  \"TARGET_SVE\"\n+  {\n+    operands[3] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+  }\n+)\n+\n+;; Predicated highpart multiplication.\n+(define_insn \"*<su>mul<mode>3_highpart\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n+\t   (unspec:SVE_I [(match_operand:SVE_I 2 \"register_operand\" \"%0\")\n+\t\t\t  (match_operand:SVE_I 3 \"register_operand\" \"w\")]\n+\t\t\t MUL_HIGHPART)]\n+\t  UNSPEC_MERGE_PTRUE))]\n+  \"TARGET_SVE\"\n+  \"<su>mulh\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n+)\n+\n ;; Unpredicated NEG, NOT and POPCOUNT.\n (define_expand \"<optab><mode>2\"\n   [(set (match_operand:SVE_I 0 \"register_operand\")"}, {"sha": "a2945a81848b326dcc317c771ca83822bdd64fe5", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e9443f49729ae4ddfc9dda63b5ad7f65f33170/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e9443f49729ae4ddfc9dda63b5ad7f65f33170/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=11e9443f49729ae4ddfc9dda63b5ad7f65f33170", "patch": "@@ -438,6 +438,8 @@\n     UNSPEC_ANDF\t\t; Used in aarch64-sve.md.\n     UNSPEC_IORF\t\t; Used in aarch64-sve.md.\n     UNSPEC_XORF\t\t; Used in aarch64-sve.md.\n+    UNSPEC_SMUL_HIGHPART ; Used in aarch64-sve.md.\n+    UNSPEC_UMUL_HIGHPART ; Used in aarch64-sve.md.\n     UNSPEC_COND_ADD\t; Used in aarch64-sve.md.\n     UNSPEC_COND_SUB\t; Used in aarch64-sve.md.\n     UNSPEC_COND_SMAX\t; Used in aarch64-sve.md.\n@@ -1467,6 +1469,8 @@\n \n (define_int_iterator UNPACK_UNSIGNED [UNSPEC_UNPACKULO UNSPEC_UNPACKUHI])\n \n+(define_int_iterator MUL_HIGHPART [UNSPEC_SMUL_HIGHPART UNSPEC_UMUL_HIGHPART])\n+\n (define_int_iterator SVE_COND_INT_OP [UNSPEC_COND_ADD UNSPEC_COND_SUB\n \t\t\t\t      UNSPEC_COND_SMAX UNSPEC_COND_UMAX\n \t\t\t\t      UNSPEC_COND_SMIN UNSPEC_COND_UMIN\n@@ -1558,7 +1562,9 @@\n (define_int_attr su [(UNSPEC_UNPACKSHI \"s\")\n \t\t     (UNSPEC_UNPACKUHI \"u\")\n \t\t     (UNSPEC_UNPACKSLO \"s\")\n-\t\t     (UNSPEC_UNPACKULO \"u\")])\n+\t\t     (UNSPEC_UNPACKULO \"u\")\n+\t\t     (UNSPEC_SMUL_HIGHPART \"s\")\n+\t\t     (UNSPEC_UMUL_HIGHPART \"u\")])\n \n (define_int_attr sur [(UNSPEC_SHADD \"s\") (UNSPEC_UHADD \"u\")\n \t\t      (UNSPEC_SRHADD \"sr\") (UNSPEC_URHADD \"ur\")"}, {"sha": "1257912b4387ffcfee8e8528ebe29f9934f419d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e9443f49729ae4ddfc9dda63b5ad7f65f33170/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e9443f49729ae4ddfc9dda63b5ad7f65f33170/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=11e9443f49729ae4ddfc9dda63b5ad7f65f33170", "patch": "@@ -1,3 +1,8 @@\n+2018-03-13  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* gcc.target/aarch64/sve/mul_highpart_1.c: New test.\n+\t* gcc.target/aarch64/sve/mul_highpart_1_run.c: Likewise.\n+\n 2018-03-13  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/84658."}, {"sha": "4354c1c663405022567f6a3ec7bacb5aa553e6fe", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mul_highpart_1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e9443f49729ae4ddfc9dda63b5ad7f65f33170/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmul_highpart_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e9443f49729ae4ddfc9dda63b5ad7f65f33170/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmul_highpart_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmul_highpart_1.c?ref=11e9443f49729ae4ddfc9dda63b5ad7f65f33170", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-vect-cost-model --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE)\t\t\t\t\\\n+void __attribute__ ((noipa))\t\t\t\\\n+mod_##TYPE (TYPE *dst, TYPE *src, int count)\t\\\n+{\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\\\n+    dst[i] = src[i] % 17;\t\t\t\\\n+}\n+\n+#define TEST_ALL(T) \\\n+  T (int32_t) \\\n+  T (uint32_t) \\\n+  T (int64_t) \\\n+  T (uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tsmulh\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumulh\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmulh\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumulh\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "4eb173bd879a1a17f54a4a67ee6dc58d0287e4bc", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mul_highpart_1_run.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e9443f49729ae4ddfc9dda63b5ad7f65f33170/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmul_highpart_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e9443f49729ae4ddfc9dda63b5ad7f65f33170/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmul_highpart_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmul_highpart_1_run.c?ref=11e9443f49729ae4ddfc9dda63b5ad7f65f33170", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-vect-cost-model --save-temps\" } */\n+\n+#include \"mul_highpart_1.c\"\n+\n+#define N 79\n+\n+#define TEST_LOOP(TYPE)\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    TYPE dst[N], src[N];\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\\\n+      {\t\t\t\t\t\t\\\n+\tsrc[i] = i * 7 + i % 3;\t\t\t\\\n+\tif (i % 11 > 7)\t\t\t\t\\\n+\t  src[i] = -src[i];\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\\\n+      }\t\t\t\t\t\t\\\n+    mod_##TYPE (dst, src, N);\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\\\n+      if (dst[i] != src[i] % 17)\t\t\\\n+\t__builtin_abort ();\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP);\n+  return 0;\n+}"}]}