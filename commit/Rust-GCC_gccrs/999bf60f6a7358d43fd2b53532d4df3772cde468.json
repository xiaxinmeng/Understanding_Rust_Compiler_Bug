{"sha": "999bf60f6a7358d43fd2b53532d4df3772cde468", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk5YmY2MGY2YTczNThkNDNmZDJiNTM1MzJkNGRmMzc3MmNkZTQ2OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-10-25T09:28:39Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-10-25T09:28:39Z"}, "message": "locale_facets.tcc (num_get::_M_extract_int): __pos in only incremented, never used its value, remove it.\n\n2003-10-25  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.tcc (num_get::_M_extract_int):\n\t__pos in only incremented, never used its value, remove it.\n\nFrom-SVN: r72922", "tree": {"sha": "ad13150b3506cb33bf1e28c9c443838241be9062", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad13150b3506cb33bf1e28c9c443838241be9062"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/999bf60f6a7358d43fd2b53532d4df3772cde468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/999bf60f6a7358d43fd2b53532d4df3772cde468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/999bf60f6a7358d43fd2b53532d4df3772cde468", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/999bf60f6a7358d43fd2b53532d4df3772cde468/comments", "author": null, "committer": null, "parents": [{"sha": "8822f4aaf9e42d27fba7672e752c2ee2c33da415", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8822f4aaf9e42d27fba7672e752c2ee2c33da415", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8822f4aaf9e42d27fba7672e752c2ee2c33da415"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "387d20259ff3e80b7ae737f3c21ef055d69e6c3a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999bf60f6a7358d43fd2b53532d4df3772cde468/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999bf60f6a7358d43fd2b53532d4df3772cde468/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=999bf60f6a7358d43fd2b53532d4df3772cde468", "patch": "@@ -1,3 +1,8 @@\n+2003-10-25  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.tcc (num_get::_M_extract_int):\n+\t__pos in only incremented, never used its value, remove it.\n+\n 2003-10-24  Robert Millan  <robertmh@gnu.org>\n \n \t* acinclude.m4 (GLIBCXX_ENABLE_CLOCALE): Add kfreebsd*-gnu"}, {"sha": "0c323dd3471d4248075207d6bd65324f4236d5b3", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999bf60f6a7358d43fd2b53532d4df3772cde468/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999bf60f6a7358d43fd2b53532d4df3772cde468/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=999bf60f6a7358d43fd2b53532d4df3772cde468", "patch": "@@ -288,14 +288,12 @@ namespace std\n \t__base = 10;\n \n       // First check for sign.\n-      int __pos = 0;\n       char_type  __c = *__beg;\n       const bool __plus = __traits_type::eq(__c, __lit[_S_iplus]);\n       if ((__plus || __traits_type::eq(__c, __lit[_S_iminus])) \n \t  && __beg != __end)\n \t{\n \t  __xtrc += __plus ? _S_atoms_in[_S_iplus] : _S_atoms_in[_S_iminus];\n-\t  ++__pos;\n \t  __c = *(++__beg);\n \t}\n \n@@ -311,15 +309,13 @@ namespace std\n \t  if (__found_zero)\n \t    {\n \t      __xtrc += _S_atoms_in[_S_izero];\n-\t      ++__pos;\n \t      if (__basefield == 0)\n \t\t{\t      \n \t\t  const bool __x = __traits_type::eq(__c, __lit[_S_ix]);\n \t\t  if ((__x || __traits_type::eq(__c, __lit[_S_iX]))\n \t\t      && __beg != __end)\n \t\t    {\n \t\t      __xtrc += __x ? _S_atoms_in[_S_ix] : _S_atoms_in[_S_iX];\n-\t\t      ++__pos;\n \t\t      __c = *(++__beg);\n \t\t      __base = 16;\n \t\t    }\n@@ -333,15 +329,13 @@ namespace std\n \t  if (__traits_type::eq(__c, __lit[_S_izero]) && __beg != __end)\n \t    {\n \t      __xtrc += _S_atoms_in[_S_izero];\n-\t      ++__pos;\n \t      __c = *(++__beg); \n \n \t      const bool __x = __traits_type::eq(__c, __lit[_S_ix]);\n \t      if ((__x || __traits_type::eq(__c, __lit[_S_iX]))\n \t\t  && __beg != __end)\n \t\t{\n \t\t  __xtrc += __x ? _S_atoms_in[_S_ix] : _S_atoms_in[_S_iX];\n-\t\t  ++__pos;\n \t\t  __c = *(++__beg);\n \t\t}\n \t    }\n@@ -365,7 +359,6 @@ namespace std\n \t    {\n \t      // Try first for acceptable digit; record it if found.\n \t      __xtrc += _S_atoms_in[__p - __lit];\n-\t      ++__pos;\n \t      ++__sep_pos;\n \t      __c = *(++__beg);\n \t    }"}]}