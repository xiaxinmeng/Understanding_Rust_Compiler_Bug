{"sha": "9877936160e4131c0acdc03250b976d438c6e192", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg3NzkzNjE2MGU0MTMxYzBhY2RjMDMyNTBiOTc2ZDQzOGM2ZTE5Mg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2013-10-17T10:36:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-17T10:36:08Z"}, "message": "gnat_ugn.texi: Document -gnatw.y/-gnatw.Y.\n\n2013-10-17  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Document -gnatw.y/-gnatw.Y.\n\t* opt.ads (List_Body_Required_Info): New flag.\n\t* prep.adb: Minor reformatting.\n\t* sem_ch7.adb (Unit_Requires_Body_Info): New\n\tprocedure (Analyze_Package_Specification): Add call to\n\tUnit_Requires_Body_Info.\n\t* ug_words: Add entries for -gnatw.y and -gnatw.Y.\n\t* usage.adb: Add line for new warning switch -gnatw.y/.Y.\n\t* vms_data.ads: Add entry for [NO_]WHY_SPEC_NEEDS_BODY warning\n\tqualifier.\n\t* warnsw.ads, warnsw.adb: Implement new warning switch -gnatw.y/.Y.\n\nFrom-SVN: r203748", "tree": {"sha": "7e6216d9fa11b4629a2e436fb370d6da4b817706", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e6216d9fa11b4629a2e436fb370d6da4b817706"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9877936160e4131c0acdc03250b976d438c6e192", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9877936160e4131c0acdc03250b976d438c6e192", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9877936160e4131c0acdc03250b976d438c6e192", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9877936160e4131c0acdc03250b976d438c6e192/comments", "author": null, "committer": null, "parents": [{"sha": "5114f3ff9a90572c042601ce8b4164cdd8561e1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5114f3ff9a90572c042601ce8b4164cdd8561e1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5114f3ff9a90572c042601ce8b4164cdd8561e1d"}], "stats": {"total": 231, "additions": 221, "deletions": 10}, "files": [{"sha": "4a7bc8e34ea5cb01886d27c852150c4f2405a894", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9877936160e4131c0acdc03250b976d438c6e192/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9877936160e4131c0acdc03250b976d438c6e192/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9877936160e4131c0acdc03250b976d438c6e192", "patch": "@@ -1,3 +1,17 @@\n+2013-10-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Document -gnatw.y/-gnatw.Y.\n+\t* opt.ads (List_Body_Required_Info): New flag.\n+\t* prep.adb: Minor reformatting.\n+\t* sem_ch7.adb (Unit_Requires_Body_Info): New\n+\tprocedure (Analyze_Package_Specification): Add call to\n+\tUnit_Requires_Body_Info.\n+\t* ug_words: Add entries for -gnatw.y and -gnatw.Y.\n+\t* usage.adb: Add line for new warning switch -gnatw.y/.Y.\n+\t* vms_data.ads: Add entry for [NO_]WHY_SPEC_NEEDS_BODY warning\n+\tqualifier.\n+\t* warnsw.ads, warnsw.adb: Implement new warning switch -gnatw.y/.Y.\n+\n 2013-10-17  Yannick Moy  <moy@adacore.com>\n \n \t* sem_ch8.adb (Find_Direct_Name): Keep track of assignments for"}, {"sha": "2140a62eea45240e155b363d00638cdc1480872b", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9877936160e4131c0acdc03250b976d438c6e192/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9877936160e4131c0acdc03250b976d438c6e192/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=9877936160e4131c0acdc03250b976d438c6e192", "patch": "@@ -5738,6 +5738,25 @@ This warning can also be turned on using @option{-gnatwa}.\n This switch suppresses the warnings intended to help in identifying\n incompatibilities between Ada language versions.\n \n+@item -gnatw.y\n+@emph{Activate information messages for why package spec needs body}\n+@cindex @option{-gnatw.y} (@command{gcc})\n+@cindex Package spec needing body\n+There are a number of cases in which a package spec needs a body.\n+For example, the use of pragma Elaborate_Body, or the declaration\n+of a procedure specification requiring a completion. This switch\n+causes information messages to be output showing why a package\n+specification requires a body. This can be useful in the case of\n+a large package specification which is unexpectedly requiring a\n+body. The default is that such information messages are not output.\n+\n+@item -gnatw.Y\n+@emph{Disable information messages for why package spec needs body}\n+@cindex @option{-gnatw.Y} (@command{gcc})\n+@cindex No information messages for why package spec needs body\n+This switch suppresses the output of information messages showing why\n+a package specification needs a body.\n+\n @item -gnatwz\n @emph{Activate warnings on unchecked conversions.}\n @cindex @option{-gnatwz} (@command{gcc})"}, {"sha": "06d9a4bcbabfb22cef5e77c07051eb910c310c03", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9877936160e4131c0acdc03250b976d438c6e192/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9877936160e4131c0acdc03250b976d438c6e192/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=9877936160e4131c0acdc03250b976d438c6e192", "patch": "@@ -841,6 +841,11 @@ package Opt is\n    --  Set to True to skip compile and bind steps (except when Bind_Only is\n    --  set to True).\n \n+   List_Body_Required_Info : Boolean := False;\n+   --  GNATMAKE\n+   --  List info messages about why a package requires a body. Modified by use\n+   --  of -gnatw.y/.Y.\n+\n    List_Inherited_Aspects : Boolean := False;\n    --  GNAT\n    --  List inherited invariants, preconditions, and postconditions from"}, {"sha": "c38234b052e6ae71bc84b3b13ddeb0d23f9f8d62", "filename": "gcc/ada/prep.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9877936160e4131c0acdc03250b976d438c6e192/gcc%2Fada%2Fprep.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9877936160e4131c0acdc03250b976d438c6e192/gcc%2Fada%2Fprep.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprep.adb?ref=9877936160e4131c0acdc03250b976d438c6e192", "patch": "@@ -284,13 +284,14 @@ package body Prep is\n             end loop;\n          end if;\n \n-         --  And put the value in the result\n-\n-         Result.Is_A_String := False;\n          --  Even if the value is a string, we still set Is_A_String to False,\n          --  to avoid adding additional quotes in the preprocessed sources when\n          --  replacing $<symbol>.\n \n+         Result.Is_A_String := False;\n+\n+         --  Put the value in the result\n+\n          Start_String;\n          Store_String_Chars (Definition (Index + 1 .. Definition'Last));\n          Result.Value := End_String;"}, {"sha": "5dde5002cb00e116d1da459d31de8cecf749ec49", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 147, "deletions": 2, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9877936160e4131c0acdc03250b976d438c6e192/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9877936160e4131c0acdc03250b976d438c6e192/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=9877936160e4131c0acdc03250b976d438c6e192", "patch": "@@ -136,6 +136,11 @@ package body Sem_Ch7 is\n    --  inherited private operation has been overridden, then it's replaced by\n    --  the overriding operation.\n \n+   procedure Unit_Requires_Body_Info (P : Entity_Id);\n+   --  Outputs info messages showing why package specification P requires a\n+   --  body. Caller has checked that the switch requesting this information\n+   --  is set, and that the package does indeed require a body.\n+\n    --------------------------\n    -- Analyze_Package_Body --\n    --------------------------\n@@ -1515,6 +1520,15 @@ package body Sem_Ch7 is\n               (\"\\pragma Elaborate_Body is required in this case\", P);\n          end;\n       end if;\n+\n+      --  If switch set, output information on why body required\n+\n+      if List_Body_Required_Info\n+        and then In_Extended_Main_Source_Unit (Id)\n+        and then Unit_Requires_Body (Id)\n+      then\n+         Unit_Requires_Body_Info (Id);\n+      end if;\n    end Analyze_Package_Specification;\n \n    --------------------------------------\n@@ -1686,8 +1700,8 @@ package body Sem_Ch7 is\n                           and then No (Interface_Alias (Node (Op_Elmt_2)))\n                         then\n                            --  The private inherited operation has been\n-                           --  overridden by an explicit subprogram: replace\n-                           --  the former by the latter.\n+                           --  overridden by an explicit subprogram:\n+                           --  replace the former by the latter.\n \n                            New_Op := Node (Op_Elmt_2);\n                            Replace_Elmt (Op_Elmt, New_Op);\n@@ -2748,4 +2762,135 @@ package body Sem_Ch7 is\n       return False;\n    end Unit_Requires_Body;\n \n+   -----------------------------\n+   -- Unit_Requires_Body_Info --\n+   -----------------------------\n+\n+   procedure Unit_Requires_Body_Info (P : Entity_Id) is\n+      E : Entity_Id;\n+\n+   begin\n+      --  Imported entity never requires body. Right now, only subprograms can\n+      --  be imported, but perhaps in the future we will allow import of\n+      --  packages.\n+\n+      if Is_Imported (P) then\n+         return;\n+\n+      --  Body required if library package with pragma Elaborate_Body\n+\n+      elsif Has_Pragma_Elaborate_Body (P) then\n+         Error_Msg_N\n+           (\"?Y?info: & requires body (Elaborate_Body)\", P);\n+\n+      --  Body required if subprogram\n+\n+      elsif Is_Subprogram (P) or else Is_Generic_Subprogram (P) then\n+         Error_Msg_N (\"?Y?info: & requires body (subprogram case)\", P);\n+\n+      --  Body required if generic parent has Elaborate_Body\n+\n+      elsif Ekind (P) = E_Package\n+        and then Nkind (Parent (P)) = N_Package_Specification\n+        and then Present (Generic_Parent (Parent (P)))\n+      then\n+         declare\n+            G_P : constant Entity_Id := Generic_Parent (Parent (P));\n+         begin\n+            if Has_Pragma_Elaborate_Body (G_P) then\n+               Error_Msg_N\n+                 (\"?Y?info: & requires body (generic parent Elaborate_Body)\",\n+                  P);\n+            end if;\n+         end;\n+\n+      --  A [generic] package that introduces at least one non-null abstract\n+      --  state requires completion. However, there is a separate rule that\n+      --  requires that such a package have a reason other than this for a\n+      --  body being required (if necessary a pragma Elaborate_Body must be\n+      --  provided). If Ignore_Abstract_State is True, we don't do this check\n+      --  (so we can use Unit_Requires_Body to check for some other reason).\n+\n+      elsif Ekind_In (P, E_Generic_Package, E_Package)\n+        and then Present (Abstract_States (P))\n+        and then\n+          not Is_Null_State (Node (First_Elmt (Abstract_States (P))))\n+      then\n+         Error_Msg_N\n+           (\"?Y?info: & requires body (non-null abstract state aspect)\",\n+            P);\n+      end if;\n+\n+      --  Otherwise search entity chain for entity requiring completion\n+\n+      E := First_Entity (P);\n+      while Present (E) loop\n+\n+         --  Always ignore child units. Child units get added to the entity\n+         --  list of a parent unit, but are not original entities of the\n+         --  parent, and so do not affect whether the parent needs a body.\n+\n+         if Is_Child_Unit (E) then\n+            null;\n+\n+         --  Ignore formal packages and their renamings\n+\n+         elsif Ekind (E) = E_Package\n+           and then Nkind (Original_Node (Unit_Declaration_Node (E))) =\n+                                                N_Formal_Package_Declaration\n+         then\n+            null;\n+\n+         --  Otherwise test to see if entity requires a completion.\n+         --  Note that subprogram entities whose declaration does not come\n+         --  from source are ignored here on the basis that we assume the\n+         --  expander will provide an implicit completion at some point.\n+\n+         elsif (Is_Overloadable (E)\n+                 and then Ekind (E) /= E_Enumeration_Literal\n+                 and then Ekind (E) /= E_Operator\n+                 and then not Is_Abstract_Subprogram (E)\n+                 and then not Has_Completion (E)\n+                 and then Comes_From_Source (Parent (E)))\n+\n+           or else\n+             (Ekind (E) = E_Package\n+               and then E /= P\n+               and then not Has_Completion (E)\n+               and then Unit_Requires_Body (E))\n+\n+           or else\n+             (Ekind (E) = E_Incomplete_Type\n+               and then No (Full_View (E))\n+               and then not Is_Generic_Type (E))\n+\n+           or else\n+             (Ekind_In (E, E_Task_Type, E_Protected_Type)\n+               and then not Has_Completion (E))\n+\n+           or else\n+             (Ekind (E) = E_Generic_Package\n+               and then E /= P\n+               and then not Has_Completion (E)\n+               and then Unit_Requires_Body (E))\n+\n+           or else\n+             (Is_Generic_Subprogram (E)\n+               and then not Has_Completion (E))\n+\n+         then\n+            Error_Msg_Node_2 := E;\n+            Error_Msg_NE\n+              (\"?Y?info: & requires body (& requires completion)\",\n+               E, P);\n+\n+         --  Entity that does not require completion\n+\n+         else\n+            null;\n+         end if;\n+\n+         Next_Entity (E);\n+      end loop;\n+   end Unit_Requires_Body_Info;\n end Sem_Ch7;"}, {"sha": "48999791e6258dcda6e0959570af14430c53ca9b", "filename": "gcc/ada/ug_words", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9877936160e4131c0acdc03250b976d438c6e192/gcc%2Fada%2Fug_words", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9877936160e4131c0acdc03250b976d438c6e192/gcc%2Fada%2Fug_words", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fug_words?ref=9877936160e4131c0acdc03250b976d438c6e192", "patch": "@@ -204,6 +204,8 @@ gcc -c          ^ GNAT COMPILE\n -gnatw.X        ^ /WARNINGS=NOLOCAL_RAISE_HANDLING\n -gnatwy         ^ /WARNINGS=ADA_2005_COMPATIBILITY\n -gnatwY         ^ /WARNINGS=NOADA_2005_COMPATIBILITY\n+-gnatw.y        ^ /WARNINGS=WHY_SPEC_NEEDS_BODY\n+-gnatw.Y        ^ /WARNINGS=NOWHY_SPEC_NEEDS_BODY\n -gnatwz         ^ /WARNINGS=UNCHECKED_CONVERSIONS\n -gnatwZ         ^ /WARNINGS=NOUNCHECKED_CONVERSIONS\n -gnatW8         ^ /WIDE_CHARACTER_ENCODING=UTF8"}, {"sha": "3f566f47fb5687b76ae51adc8635d524e727d885", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9877936160e4131c0acdc03250b976d438c6e192/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9877936160e4131c0acdc03250b976d438c6e192/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=9877936160e4131c0acdc03250b976d438c6e192", "patch": "@@ -576,6 +576,8 @@ begin\n    Write_Line (\"        .X*  turn off warnings for non-local exception\");\n    Write_Line (\"        y*+  turn on warnings for Ada compatibility issues\");\n    Write_Line (\"        Y    turn off warnings for Ada compatibility issues\");\n+   Write_Line (\"        .y   turn on info messages for why pkg body needed\");\n+   Write_Line (\"        .Y*  turn off info messages for why pkg body needed\");\n    Write_Line (\"        z*+  turn on warnings for suspicious \" &\n                                                   \"unchecked conversion\");\n    Write_Line (\"        Z    turn off warnings for suspicious \" &"}, {"sha": "7b0fd2c95ec2a4b6144df0f4da6da28d6269c771", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9877936160e4131c0acdc03250b976d438c6e192/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9877936160e4131c0acdc03250b976d438c6e192/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=9877936160e4131c0acdc03250b976d438c6e192", "patch": "@@ -3222,6 +3222,10 @@ package VMS_Data is\n                                                \"-gnatwy \"                  &\n                                             \"NOADA_2005_COMPATIBILITY \"    &\n                                                \"-gnatwY \"                  &\n+                                            \"WHY_SPEC_NEEDS_BODY \"         &\n+                                               \"-gnatw.y \"                 &\n+                                            \"NO_WHY_SPEC_NEEDS_BODY \"      &\n+                                               \"-gnatw.Y \"                 &\n                                             \"UNCHECKED_CONVERSIONS \"       &\n                                                \"-gnatwz \"                  &\n                                             \"NOUNCHECKED_CONVERSIONS \"     &\n@@ -3487,19 +3491,24 @@ package VMS_Data is\n    --   VARIABLES_UNINITIALIZED Activates warnings on unassigned variables.\n    --                           Causes warnings to be generated when a variable\n    --                           is accessed which may not be properly\n-   --                           uninitialized.\n-   --                           The default is that such warnings are\n-   --                           generated.\n+   --                           uninitialized. The default is that such\n+   --                           warnings are generated.\n    --\n-   --   NOVARIABLES_UNINITIALIZED       Suppress warnings for uninitialized\n-   --                                   variables.\n+   --   NOVARIABLES_UNINITIALIZED\n+   --                           Suppress warnings for uninitialized variables.\n    --\n    --   TAG_WARNINGS            Causes the string [xxx] to be added to warnings\n    --                           that are controlled by the warning string xxx,\n    --                           e.g. [REDUNDANT], or if the warning is enabled\n    --                           by default, the tag is [enabled by default].\n    --\n    --   NOTAG_WARNINGS          Turns off warning tag output (default setting).\n+   --\n+   --   WHY_SPEC_NEEDS_BODY     Generates information messages showing why a\n+   --                           package specification requires a body.\n+   --\n+   --   NO_WHY_SPEC_NEEDS_BODY  Turns off information messages showing why a\n+   --                           package specification requires a body.\n \n    S_GCC_WarnX   : aliased constant S := \"/NOWARNINGS \"                    &\n                                             \"-gnatws\";"}, {"sha": "009b450784c52eb544e822a7cf54505abecaa483", "filename": "gcc/ada/warnsw.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9877936160e4131c0acdc03250b976d438c6e192/gcc%2Fada%2Fwarnsw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9877936160e4131c0acdc03250b976d438c6e192/gcc%2Fada%2Fwarnsw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.adb?ref=9877936160e4131c0acdc03250b976d438c6e192", "patch": "@@ -51,6 +51,8 @@ package body Warnsw is\n         W.Implementation_Unit_Warnings;\n       Ineffective_Inline_Warnings         :=\n         W.Ineffective_Inline_Warnings;\n+      List_Body_Required_Info             :=\n+        W.List_Body_Required_Info;\n       List_Inherited_Aspects              :=\n         W.List_Inherited_Aspects;\n       Warning_Doc_Switch                  :=\n@@ -145,6 +147,8 @@ package body Warnsw is\n         Implementation_Unit_Warnings;\n       W.Ineffective_Inline_Warnings         :=\n         Ineffective_Inline_Warnings;\n+      W.List_Body_Required_Info             :=\n+        List_Body_Required_Info;\n       W.List_Inherited_Aspects              :=\n         List_Inherited_Aspects;\n       W.Warning_Doc_Switch                  :=\n@@ -257,6 +261,7 @@ package body Warnsw is\n             Elab_Warnings                       := True;\n             Implementation_Unit_Warnings        := True;\n             Ineffective_Inline_Warnings         := True;\n+            List_Body_Required_Info             := True;\n             List_Inherited_Aspects              := True;\n             Warning_Doc_Switch                  := True;\n             Warn_On_Ada_2005_Compatibility      := True;\n@@ -386,6 +391,12 @@ package body Warnsw is\n             Warn_On_Non_Local_Exception         := False;\n             No_Warn_On_Non_Local_Exception      := True;\n \n+         when 'y' =>\n+            List_Body_Required_Info             := True;\n+\n+         when 'Y' =>\n+            List_Body_Required_Info             := False;\n+\n          when others =>\n             if Ignore_Unrecognized_VWY_Switches then\n                Write_Line (\"unrecognized switch -gnatw.\" & C & \" ignored\");\n@@ -411,6 +422,7 @@ package body Warnsw is\n       Elab_Warnings                       := False;\n       Implementation_Unit_Warnings        := False;\n       Ineffective_Inline_Warnings         := True;\n+      List_Body_Required_Info             := False;\n       List_Inherited_Aspects              := False;\n       Warning_Doc_Switch                  := False;\n       Warn_On_Ada_2005_Compatibility      := True;\n@@ -492,6 +504,7 @@ package body Warnsw is\n             Elab_Warnings                       := False;\n             Implementation_Unit_Warnings        := False;\n             Ineffective_Inline_Warnings         := False;\n+            List_Body_Required_Info             := False;\n             List_Inherited_Aspects              := False;\n             Warning_Doc_Switch                  := False;\n             Warn_On_Ada_2005_Compatibility      := False;"}, {"sha": "0358fd77d4fbdb9a9cf66a851ff550fcba1672bc", "filename": "gcc/ada/warnsw.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9877936160e4131c0acdc03250b976d438c6e192/gcc%2Fada%2Fwarnsw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9877936160e4131c0acdc03250b976d438c6e192/gcc%2Fada%2Fwarnsw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.ads?ref=9877936160e4131c0acdc03250b976d438c6e192", "patch": "@@ -68,6 +68,7 @@ package Warnsw is\n       Elab_Warnings                       : Boolean;\n       Implementation_Unit_Warnings        : Boolean;\n       Ineffective_Inline_Warnings         : Boolean;\n+      List_Body_Required_Info             : Boolean;\n       List_Inherited_Aspects              : Boolean;\n       Warning_Doc_Switch                  : Boolean;\n       Warn_On_Ada_2005_Compatibility      : Boolean;"}]}