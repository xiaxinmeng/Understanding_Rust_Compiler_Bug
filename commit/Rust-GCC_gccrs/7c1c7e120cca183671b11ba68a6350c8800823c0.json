{"sha": "7c1c7e120cca183671b11ba68a6350c8800823c0", "node_id": "C_kwDOANBUbNoAKDdjMWM3ZTEyMGNjYTE4MzY3MWIxMWJhNjhhNjM1MGM4ODAwODIzYzA", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-06-23T13:25:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-06-23T16:19:38Z"}, "message": "libstdc++: Properly remove temporary directories in filesystem tests\n\nAlthough these tests use filesystem::remove_all to clean up, that fails\nbecause it uses recursive_directory_iterator which is intentionally\nbodged by the custom readdir defined in the test.\n\nJust use POSIX rmdir to clean up. We don't need to use _rmdir or _wrmdir\nfor Windows, because we'll never reach test02() on targets where the\ncustom readdir doesn't interpose the one from libc.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/27_io/filesystem/iterators/error_reporting.cc: Use\n\trmdir to remove directories.\n\t* testsuite/experimental/filesystem/iterators/error_reporting.cc:\n\tLikewise.", "tree": {"sha": "a5eb751fe564102b1df36fca8895edc2b73ae61e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5eb751fe564102b1df36fca8895edc2b73ae61e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c1c7e120cca183671b11ba68a6350c8800823c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c1c7e120cca183671b11ba68a6350c8800823c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c1c7e120cca183671b11ba68a6350c8800823c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c1c7e120cca183671b11ba68a6350c8800823c0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "124a9e08b7a83795bd4d09001955f0eef68ecd00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/124a9e08b7a83795bd4d09001955f0eef68ecd00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/124a9e08b7a83795bd4d09001955f0eef68ecd00"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "a26b29f09744119cda9e39d8be7e0b7cff2cc054", "filename": "libstdc++-v3/testsuite/27_io/filesystem/iterators/error_reporting.cc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1c7e120cca183671b11ba68a6350c8800823c0/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Ferror_reporting.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1c7e120cca183671b11ba68a6350c8800823c0/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Ferror_reporting.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Ferror_reporting.cc?ref=7c1c7e120cca183671b11ba68a6350c8800823c0", "patch": "@@ -107,7 +107,7 @@ void\n test02()\n {\n   namespace fs = std::filesystem;\n-  auto dir = __gnu_test::nonexistent_path();\n+  const auto dir = __gnu_test::nonexistent_path();\n   fs::create_directories(dir/\"subdir\");\n \n   std::error_code ec;\n@@ -137,7 +137,12 @@ test02()\n   }\n #endif\n \n-  fs::remove_all(dir, ec);\n+  // Cannot use fs::remove_all here because that uses\n+  // recursive_directory_iterator which would use the fake readdir above.\n+#ifndef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  ::rmdir((dir/\"subdir\").c_str());\n+  ::rmdir(dir.c_str());\n+#endif\n }\n \n int"}, {"sha": "f005b7d5293aeedf41ea87f58a9402d9b67bc63c", "filename": "libstdc++-v3/testsuite/experimental/filesystem/iterators/error_reporting.cc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1c7e120cca183671b11ba68a6350c8800823c0/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Ferror_reporting.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1c7e120cca183671b11ba68a6350c8800823c0/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Ferror_reporting.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fiterators%2Ferror_reporting.cc?ref=7c1c7e120cca183671b11ba68a6350c8800823c0", "patch": "@@ -99,7 +99,7 @@ void\n test02()\n {\n   namespace fs = std::experimental::filesystem;\n-  auto dir = __gnu_test::nonexistent_path();\n+  const auto dir = __gnu_test::nonexistent_path();\n   fs::create_directories(dir/\"subdir\");\n \n   std::error_code ec;\n@@ -129,7 +129,12 @@ test02()\n   }\n #endif\n \n-  fs::remove_all(dir, ec);\n+  // Cannot use fs::remove_all here because that depends on\n+  // recursive_directory_iterator which would use the fake readdir above.\n+#ifndef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  ::rmdir((dir/\"subdir\").c_str());\n+  ::rmdir(dir.c_str());\n+#endif\n }\n \n int"}]}