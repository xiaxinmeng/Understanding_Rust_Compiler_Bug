{"sha": "c46d057f55748520e819dcd8e04bca71be9902b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ2ZDA1N2Y1NTc0ODUyMGU4MTlkY2Q4ZTA0YmNhNzFiZTk5MDJiMg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-05T20:26:44Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-11T18:28:25Z"}, "message": "analyzer: workaround for nested pp_printf\n\nThe dumps from the analyzer sometimes contain garbled output.\n\nThe root cause is due to nesting of calls to pp_printf: I'm using\npp_printf with %qT to print types with a PP using default_tree_printer.\n\ndefault_tree_printer handles 'T' (and various other codes) via\n  dump_generic_node (pp, t, 0, TDF_SLIM, 0);\nand dump_generic_node can call pp_printf in various ways, leading\nto a pp_printf within a pp_printf, and garbled output.\n\nI don't think it's feasible to fix pp_printf to be reentrant, in\nstage 4, at least, so for the moment this patch works around it\nin the analyzer.\n\ngcc/analyzer/ChangeLog:\n\t* region-model.cc (print_quoted_type): New function.\n\t(svalue::print): Use it to replace %qT.\n\t(region::dump_to_pp): Likewise.\n\t(region::dump_child_label): Likewise.\n\t(region::print_fields): Likewise.", "tree": {"sha": "a7c1e73a40adf4c605561c446f27600d564154d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7c1e73a40adf4c605561c446f27600d564154d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c46d057f55748520e819dcd8e04bca71be9902b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c46d057f55748520e819dcd8e04bca71be9902b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c46d057f55748520e819dcd8e04bca71be9902b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c46d057f55748520e819dcd8e04bca71be9902b2/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5e3dd5d2e0073f585fa97d6b961752432c3d122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5e3dd5d2e0073f585fa97d6b961752432c3d122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5e3dd5d2e0073f585fa97d6b961752432c3d122"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "57fee4c5bfeb57921d7d70096cf83417fb867a46", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46d057f55748520e819dcd8e04bca71be9902b2/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46d057f55748520e819dcd8e04bca71be9902b2/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=c46d057f55748520e819dcd8e04bca71be9902b2", "patch": "@@ -1,3 +1,11 @@\n+2020-02-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model.cc (print_quoted_type): New function.\n+\t(svalue::print): Use it to replace %qT.\n+\t(region::dump_to_pp): Likewise.\n+\t(region::dump_child_label): Likewise.\n+\t(region::print_fields): Likewise.\n+\n 2020-02-10  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93659"}, {"sha": "b9d52f64270c2cfcaffa6f7335827869299fd283", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46d057f55748520e819dcd8e04bca71be9902b2/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46d057f55748520e819dcd8e04bca71be9902b2/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=c46d057f55748520e819dcd8e04bca71be9902b2", "patch": "@@ -73,6 +73,25 @@ dump_tree (pretty_printer *pp, tree t)\n   dump_generic_node (pp, t, 0, TDF_SLIM, 0);\n }\n \n+/* Equivalent to pp_printf (pp, \"%qT\", t), to avoid nesting pp_printf\n+   calls within other pp_printf calls.\n+\n+   default_tree_printer handles 'T' and some other codes by calling\n+     dump_generic_node (pp, t, 0, TDF_SLIM, 0);\n+   dump_generic_node calls pp_printf in various places, leading to\n+   garbled output.\n+\n+   Ideally pp_printf could be made to be reentrant, but in the meantime\n+   this function provides a workaround.  */\n+\n+static void\n+print_quoted_type (pretty_printer *pp, tree t)\n+{\n+  pp_begin_quote (pp, pp_show_color (pp));\n+  dump_generic_node (pp, t, 0, TDF_SLIM, 0);\n+  pp_end_quote (pp, pp_show_color (pp));\n+}\n+\n /* Dump this path_var to PP (which must support %E for trees).\n \n    Express the stack depth using an \"@DEPTH\" suffix, so e.g. given\n@@ -319,7 +338,9 @@ svalue::print (const region_model &model,\n   if (m_type)\n     {\n       gcc_assert (TYPE_P (m_type));\n-      pp_printf (pp, \"type: %qT, \", m_type);\n+      pp_string (pp, \"type: \");\n+      print_quoted_type (pp, m_type);\n+      pp_string (pp, \", \");\n     }\n \n   /* vfunc.  */\n@@ -1282,7 +1303,8 @@ region::dump_to_pp (const region_model &model,\n     }\n   if (m_type)\n     {\n-      pp_printf (pp, \"%s type: %qT\", field_prefix, m_type);\n+      pp_printf (pp, \"%s type: \", field_prefix);\n+      print_quoted_type (pp, m_type);\n       pp_newline (pp);\n     }\n \n@@ -1332,7 +1354,9 @@ region::dump_child_label (const region_model &model,\n \tpp_string (pp, \"active \");\n       else\n \tpp_string (pp, \"inactive \");\n-      pp_printf (pp, \"view as %qT: \", child->get_type ());\n+      pp_string (pp, \"view as \");\n+      print_quoted_type (pp, child->get_type ());\n+      pp_string (pp, \": \");\n     }\n }\n \n@@ -1463,7 +1487,10 @@ region::print_fields (const region_model &model ATTRIBUTE_UNUSED,\n   m_sval_id.print (pp);\n \n   if (m_type)\n-    pp_printf (pp, \", type: %qT\", m_type);\n+    {\n+      pp_printf (pp, \", type: \");\n+      print_quoted_type (pp, m_type);\n+    }\n }\n \n /* Determine if a pointer to this region must be non-NULL."}]}