{"sha": "bb522e2eea23703375e65a044c93e8144ef4664e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI1MjJlMmVlYTIzNzAzMzc1ZTY1YTA0NGM5M2U4MTQ0ZWY0NjY0ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-08-09T07:24:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-08-09T07:24:51Z"}, "message": "c-parser.c (check_no_duplicate_clause): Simplify using omp_find_clause.\n\nc/\n\t* c-parser.c (check_no_duplicate_clause): Simplify using\n\tomp_find_clause.\n\t(c_parser_omp_clause_if): Fix up printing of target {enter,exit} data\n\tdirective name modifiers.\n\t(c_parser_omp_clause_proc_bind): Check for duplicate proc_bind clause.\ncp/\n\t* parser.c (check_no_duplicate_clause): Simplify using\n\tomp_find_clause.\n\t(cp_parser_omp_clause_if): Fix up printing of target {enter,exit} data\n\tdirective name modifiers.\ntestsuite/\n\t* c-c++-common/gomp/if-4.c: New test.\n\t* c-c++-common/gomp/clause-dups-1.c: New test.\n\nFrom-SVN: r274227", "tree": {"sha": "c970ba6f39747a06886a21ef0f9c58c7ac763d1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c970ba6f39747a06886a21ef0f9c58c7ac763d1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb522e2eea23703375e65a044c93e8144ef4664e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb522e2eea23703375e65a044c93e8144ef4664e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb522e2eea23703375e65a044c93e8144ef4664e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb522e2eea23703375e65a044c93e8144ef4664e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2c3b8badaac235ce78ce22ac7582346d16118987", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c3b8badaac235ce78ce22ac7582346d16118987", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c3b8badaac235ce78ce22ac7582346d16118987"}], "stats": {"total": 326, "additions": 305, "deletions": 21}, "files": [{"sha": "816c3e07f2736b8abbbf379e59ae1eab36a7d2b0", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb522e2eea23703375e65a044c93e8144ef4664e/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb522e2eea23703375e65a044c93e8144ef4664e/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=bb522e2eea23703375e65a044c93e8144ef4664e", "patch": "@@ -1,5 +1,11 @@\n 2019-08-09  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* c-parser.c (check_no_duplicate_clause): Simplify using\n+\tomp_find_clause.\n+\t(c_parser_omp_clause_if): Fix up printing of target {enter,exit} data\n+\tdirective name modifiers.\n+\t(c_parser_omp_clause_proc_bind): Check for duplicate proc_bind clause.\n+\n \tPR c/91401\n \t* c-parser.c (c_parser_omp_clause_dist_schedule): Fix up typos in the\n \tcheck_no_duplicate_clause call.  Comment it out, instead emit a"}, {"sha": "055e65003333b96a5042ae3a4acf0acabee2b18c", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb522e2eea23703375e65a044c93e8144ef4664e/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb522e2eea23703375e65a044c93e8144ef4664e/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=bb522e2eea23703375e65a044c93e8144ef4664e", "patch": "@@ -11898,15 +11898,8 @@ static void\n check_no_duplicate_clause (tree clauses, enum omp_clause_code code,\n \t\t\t   const char *name)\n {\n-  tree c;\n-\n-  for (c = clauses; c ; c = OMP_CLAUSE_CHAIN (c))\n-    if (OMP_CLAUSE_CODE (c) == code)\n-      {\n-\tlocation_t loc = OMP_CLAUSE_LOCATION (c);\n-\terror_at (loc, \"too many %qs clauses\", name);\n-\tbreak;\n-      }\n+  if (tree c = omp_find_clause (clauses, code))\n+    error_at (OMP_CLAUSE_LOCATION (c), \"too many %qs clauses\", name);\n }\n \n /* OpenACC 2.0\n@@ -12616,8 +12609,8 @@ c_parser_omp_clause_if (c_parser *parser, tree list, bool is_omp)\n \t      case OMP_TARGET_DATA: p = \"target data\"; break;\n \t      case OMP_TARGET: p = \"target\"; break;\n \t      case OMP_TARGET_UPDATE: p = \"target update\"; break;\n-\t      case OMP_TARGET_ENTER_DATA: p = \"enter data\"; break;\n-\t      case OMP_TARGET_EXIT_DATA: p = \"exit data\"; break;\n+\t      case OMP_TARGET_ENTER_DATA: p = \"target enter data\"; break;\n+\t      case OMP_TARGET_EXIT_DATA: p = \"target exit data\"; break;\n \t      default: gcc_unreachable ();\n \t      }\n \t    error_at (location, \"too many %<if%> clauses with %qs modifier\",\n@@ -14856,6 +14849,7 @@ c_parser_omp_clause_proc_bind (c_parser *parser, tree list)\n   else\n     goto invalid_kind;\n \n+  check_no_duplicate_clause (list, OMP_CLAUSE_PROC_BIND, \"proc_bind\");\n   c_parser_consume_token (parser);\n   parens.skip_until_found_close (parser);\n   c = build_omp_clause (clause_loc, OMP_CLAUSE_PROC_BIND);"}, {"sha": "2e7909dd51c287c7c741f9379b9b1e3763489f2b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb522e2eea23703375e65a044c93e8144ef4664e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb522e2eea23703375e65a044c93e8144ef4664e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bb522e2eea23703375e65a044c93e8144ef4664e", "patch": "@@ -1,5 +1,10 @@\n 2019-08-09  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* parser.c (check_no_duplicate_clause): Simplify using\n+\tomp_find_clause.\n+\t(cp_parser_omp_clause_if): Fix up printing of target {enter,exit} data\n+\tdirective name modifiers.\n+\n \tPR c/91401\n \t* parser.c (cp_parser_omp_clause_dist_schedule): Comment out the\n \tcheck_no_duplicate_clause call, instead emit a warning for duplicate"}, {"sha": "b5196f6184bc83f84395837ff06b47de34d7c962", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb522e2eea23703375e65a044c93e8144ef4664e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb522e2eea23703375e65a044c93e8144ef4664e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=bb522e2eea23703375e65a044c93e8144ef4664e", "patch": "@@ -32684,14 +32684,8 @@ static void\n check_no_duplicate_clause (tree clauses, enum omp_clause_code code,\n \t\t\t   const char *name, location_t location)\n {\n-  tree c;\n-\n-  for (c = clauses; c ; c = OMP_CLAUSE_CHAIN (c))\n-    if (OMP_CLAUSE_CODE (c) == code)\n-      {\n-\terror_at (location, \"too many %qs clauses\", name);\n-\tbreak;\n-      }\n+  if (omp_find_clause (clauses, code))\n+    error_at (location, \"too many %qs clauses\", name);\n }\n \n /* OpenMP 2.5:\n@@ -33581,8 +33575,8 @@ cp_parser_omp_clause_if (cp_parser *parser, tree list, location_t location,\n \t      case OMP_TARGET_DATA: p = \"target data\"; break;\n \t      case OMP_TARGET: p = \"target\"; break;\n \t      case OMP_TARGET_UPDATE: p = \"target update\"; break;\n-\t      case OMP_TARGET_ENTER_DATA: p = \"enter data\"; break;\n-\t      case OMP_TARGET_EXIT_DATA: p = \"exit data\"; break;\n+\t      case OMP_TARGET_ENTER_DATA: p = \"target enter data\"; break;\n+\t      case OMP_TARGET_EXIT_DATA: p = \"target exit data\"; break;\n \t      default: gcc_unreachable ();\n \t      }\n \t    error_at (location, \"too many %<if%> clauses with %qs modifier\","}, {"sha": "a31e2613dff9a01887fb1d6c33c6584b402e14ca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb522e2eea23703375e65a044c93e8144ef4664e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb522e2eea23703375e65a044c93e8144ef4664e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bb522e2eea23703375e65a044c93e8144ef4664e", "patch": "@@ -1,5 +1,8 @@\n 2019-08-09  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* c-c++-common/gomp/if-4.c: New test.\n+\t* c-c++-common/gomp/clause-dups-1.c: New test.\n+\n \tPR c/91401\n \t* c-c++-common/gomp/pr91401-1.c: New test.\n \t* c-c++-common/gomp/pr91401-2.c: New test."}, {"sha": "3dde0589f7c5da7fc06f9b3e8684403ee774595a", "filename": "gcc/testsuite/c-c++-common/gomp/clause-dups-1.c", "status": "added", "additions": 222, "deletions": 0, "changes": 222, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb522e2eea23703375e65a044c93e8144ef4664e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclause-dups-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb522e2eea23703375e65a044c93e8144ef4664e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclause-dups-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclause-dups-1.c?ref=bb522e2eea23703375e65a044c93e8144ef4664e", "patch": "@@ -0,0 +1,222 @@\n+void f0 (void);\n+\n+void\n+f1 (int *p)\n+{\n+  int i;\n+  #pragma omp parallel proc_bind (master) proc_bind (master)\t/* { dg-error \"too many 'proc_bind' clauses\" } */\n+  f0 ();\n+  #pragma omp parallel proc_bind (close) proc_bind (spread)\t/* { dg-error \"too many 'proc_bind' clauses\" } */\n+  f0 ();\n+  #pragma omp for schedule(static) schedule(static)\t\t/* { dg-error \"too many 'schedule' clauses\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp for schedule(dynamic,5) schedule(runtime)\t\t/* { dg-error \"too many 'schedule' clauses\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp for collapse(1) collapse(1)\t\t\t/* { dg-error \"too many 'collapse' clauses\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp for collapse(1) collapse(2)\t\t\t/* { dg-error \"too many 'collapse' clauses\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp for ordered ordered\t\t\t\t/* { dg-error \"too many 'ordered' clauses\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp for ordered(1) ordered(1)\t\t\t\t/* { dg-error \"too many 'ordered' clauses\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp for nowait nowait\t\t\t\t\t/* { dg-error \"too many 'nowait' clauses\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp simd collapse(1) collapse(1)\t\t\t/* { dg-error \"too many 'collapse' clauses\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp simd collapse(1) collapse(2)\t\t\t/* { dg-error \"too many 'collapse' clauses\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp simd simdlen(1) simdlen(1)\t\t\t/* { dg-error \"too many 'simdlen' clauses\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp simd simdlen(1) simdlen(2)\t\t\t/* { dg-error \"too many 'simdlen' clauses\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp simd safelen(1) safelen(1)\t\t\t/* { dg-error \"too many 'safelen' clauses\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp simd safelen(1) safelen(2)\t\t\t/* { dg-error \"too many 'safelen' clauses\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp teams\n+  {\n+    #pragma omp distribute collapse(1) collapse(1)\t\t\t/* { dg-error \"too many 'collapse' clauses\" } */\n+    for (i = 0; i < 8; ++i)\n+      f0 ();\n+    #pragma omp distribute collapse(1) collapse(2)\t\t\t/* { dg-error \"too many 'collapse' clauses\" } */\n+    for (i = 0; i < 8; ++i)\n+      f0 ();\n+  }\n+  #pragma omp teams thread_limit (3) thread_limit (3)\t\t/* { dg-error \"too many 'thread_limit' clauses\" } */\n+  f0 ();\n+  #pragma omp teams thread_limit (3) thread_limit (5)\t\t/* { dg-error \"too many 'thread_limit' clauses\" } */\n+  f0 ();\n+  #pragma omp teams num_teams (3) num_teams (3)\t\t\t/* { dg-error \"too many 'num_teams' clauses\" } */\n+  f0 ();\n+  #pragma omp teams num_teams (3) num_teams (5)\t\t\t/* { dg-error \"too many 'num_teams' clauses\" } */\n+  f0 ();\n+  #pragma omp single nowait nowait\t\t\t\t/* { dg-error \"too many 'nowait' clauses\" } */\n+  f0 ();\n+  #pragma omp loop bind (thread) collapse(1) collapse(3)\t/* { dg-error \"too many 'collapse' clauses\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp task final (0) final (0)\t\t\t\t/* { dg-error \"too many 'final' clauses\" } */\n+  f0 ();\n+  #pragma omp task final (0) final (1)\t\t\t\t/* { dg-error \"too many 'final' clauses\" } */\n+  f0 ();\n+  #pragma omp task priority (1) priority (1)\t\t\t/* { dg-error \"too many 'priority' clauses\" } */\n+  f0 ();\n+  #pragma omp task priority (0) priority (1)\t\t\t/* { dg-error \"too many 'priority' clauses\" } */\n+  f0 ();\n+  #pragma omp taskloop final (0) final (0)\t\t\t/* { dg-error \"too many 'final' clauses\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp taskloop final (0) final (1)\t\t\t/* { dg-error \"too many 'final' clauses\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp taskloop priority (1) priority (1)\t\t/* { dg-error \"too many 'priority' clauses\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp taskloop priority (0) priority (1)\t\t/* { dg-error \"too many 'priority' clauses\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp taskloop grainsize (1) grainsize (2)\t\t/* { dg-error \"too many 'grainsize' clauses\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp taskloop grainsize (2) grainsize (2)\t\t/* { dg-error \"too many 'grainsize' clauses\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp taskloop num_tasks (1) num_tasks (2)\t\t/* { dg-error \"too many 'num_tasks' clauses\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp taskloop num_tasks (2) num_tasks (2)\t\t/* { dg-error \"too many 'num_tasks' clauses\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp taskloop num_tasks (1) grainsize (2)\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp taskloop grainsize (2) num_tasks (2)\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp taskloop collapse (1) collapse (1)\t\t/* { dg-error \"too many 'collapse' clauses\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp taskloop collapse (1) collapse (2)\t\t/* { dg-error \"too many 'collapse' clauses\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp target data device (1) device (1) map (alloc: i)\t\t/* { dg-error \"too many 'device' clauses\" } */\n+  f0 ();\n+  #pragma omp target enter data device (1) device (1) map (to: i)\t/* { dg-error \"too many 'device' clauses\" } */\n+  #pragma omp target enter data nowait nowait map (to: i)\t\t/* { dg-error \"too many 'nowait' clauses\" } */\n+  #pragma omp target exit data device (1) device (1) map (from: i)\t/* { dg-error \"too many 'device' clauses\" } */\n+  #pragma omp target exit data nowait nowait map (from: i)\t\t/* { dg-error \"too many 'nowait' clauses\" } */\n+  #pragma omp target device (1) device (1)\t\t\t/* { dg-error \"too many 'device' clauses\" } */\n+  f0 ();\n+  #pragma omp target nowait nowait\t\t\t\t/* { dg-error \"too many 'nowait' clauses\" } */\n+  f0 ();\n+  #pragma omp target update device (1) device (1) to (i)\t/* { dg-error \"too many 'device' clauses\" } */\n+  #pragma omp target update nowait nowait to (i)\t\t/* { dg-error \"too many 'nowait' clauses\" } */\n+  #pragma omp atomic seq_cst seq_cst\t\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  p[0]++;\n+  #pragma omp atomic release release\t\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  p[0]++;\n+  #pragma omp atomic relaxed relaxed\t\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  p[0]++;\n+  #pragma omp atomic seq_cst release\t\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  p[0]++;\n+  #pragma omp atomic release relaxed\t\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  p[0]++;\n+  #pragma omp atomic relaxed seq_cst\t\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  p[0]++;\n+  #pragma omp atomic hint(0) hint(0)\t\t\t\t/* { dg-error \"too many 'hint' clauses\" } */\n+  p[0]++;\n+  #pragma omp atomic update seq_cst seq_cst\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  p[0]++;\n+  #pragma omp atomic update release release\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  p[0]++;\n+  #pragma omp atomic update relaxed relaxed\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  p[0]++;\n+  #pragma omp atomic update seq_cst release\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  p[0]++;\n+  #pragma omp atomic update release relaxed\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  p[0]++;\n+  #pragma omp atomic update relaxed seq_cst\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  p[0]++;\n+  #pragma omp atomic update hint (0) hint(0)\t\t\t/* { dg-error \"too many 'hint' clauses\" } */\n+  p[0]++;\n+  #pragma omp atomic write seq_cst seq_cst\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  p[0] = 0;\n+  #pragma omp atomic write release release\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  p[0] = 0;\n+  #pragma omp atomic write relaxed relaxed\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  p[0] = 0;\n+  #pragma omp atomic write seq_cst release\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  p[0] = 0;\n+  #pragma omp atomic write release relaxed\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  p[0] = 0;\n+  #pragma omp atomic write relaxed seq_cst\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  p[0] = 0;\n+  #pragma omp atomic write hint(0)hint(0)\t\t\t/* { dg-error \"too many 'hint' clauses\" } */\n+  p[0] = 0;\n+  #pragma omp atomic read seq_cst seq_cst\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  i = p[0];\n+  #pragma omp atomic read acquire acquire\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  i = p[0];\n+  #pragma omp atomic read relaxed relaxed\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  i = p[0];\n+  #pragma omp atomic read seq_cst acquire\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  i = p[0];\n+  #pragma omp atomic read acquire relaxed\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  i = p[0];\n+  #pragma omp atomic read relaxed seq_cst\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  i = p[0];\n+  #pragma omp atomic read hint (0) hint(0)\t\t\t/* { dg-error \"too many 'hint' clauses\" } */\n+  i = p[0];\n+  #pragma omp atomic capture seq_cst seq_cst\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  i = p[0]++;\n+  #pragma omp atomic capture acq_rel acq_rel\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  i = p[0]++;\n+  #pragma omp atomic capture acquire acquire\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  i = p[0]++;\n+  #pragma omp atomic capture release release\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  i = p[0]++;\n+  #pragma omp atomic capture relaxed relaxed\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  i = p[0]++;\n+  #pragma omp atomic capture seq_cst acq_rel\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  i = p[0]++;\n+  #pragma omp atomic capture acq_rel acquire\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  i = p[0]++;\n+  #pragma omp atomic capture acquire release\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  i = p[0]++;\n+  #pragma omp atomic capture release relaxed\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  i = p[0]++;\n+  #pragma omp atomic capture relaxed seq_cst\t\t\t/* { dg-error \"too many memory order clauses\" } */\n+  i = p[0]++;\n+  #pragma omp atomic capture hint(0) hint (0)\t\t\t/* { dg-error \"too many 'hint' clauses\" } */\n+  i = p[0]++;\n+  \n+}\n+\n+#pragma omp declare simd simdlen (4) simdlen (4)\t\t/* { dg-error \"too many 'simdlen' clauses\" } */\n+void f2 (int a, int b);\n+#pragma omp declare simd simdlen (4) simdlen (8)\t\t/* { dg-error \"too many 'simdlen' clauses\" } */\n+void f3 (int a, int b);\n+#pragma omp declare simd uniform (a) uniform (a)\t\t/* { dg-error \"'a' appears more than once in data clauses\" } */\n+void f4 (int a, int b);\n+#pragma omp declare simd linear (a) linear (a)\t\t\t/* { dg-error \"'a' appears more than once in data clauses\" } */\n+void f5 (int a, int b);\n+#pragma omp declare simd linear (a) linear (a:3)\t\t/* { dg-error \"'a' appears more than once in data clauses\" } */\n+void f6 (int a, int b);\n+#pragma omp declare simd uniform (a) linear (a)\t\t\t/* { dg-error \"'a' appears more than once in data clauses\" } */\n+void f7 (int a, int b);\n+#pragma omp declare simd linear (a) uniform (a)\t\t\t/* { dg-error \"'a' appears more than once in data clauses\" } */\n+void f8 (int a, int b);"}, {"sha": "f374ce08643bcd327ffab1f62cfd732a86a772c0", "filename": "gcc/testsuite/c-c++-common/gomp/if-4.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb522e2eea23703375e65a044c93e8144ef4664e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fif-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb522e2eea23703375e65a044c93e8144ef4664e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fif-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fif-4.c?ref=bb522e2eea23703375e65a044c93e8144ef4664e", "patch": "@@ -0,0 +1,60 @@\n+void f0 (void);\n+\n+void\n+f1 (int *p)\n+{\n+  int i;\n+  #pragma omp task if (0) if (0)\t\t/* { dg-error \"too many 'if' clauses without modifier\" } */\n+  f0 ();\n+  #pragma omp task if (0) if (1)\t\t/* { dg-error \"too many 'if' clauses without modifier\" } */\n+  f0 ();\n+  #pragma omp task if (task:0) if (task:0)\t/* { dg-error \"too many 'if' clauses with 'task' modifier\" } */\n+  f0 ();\n+  #pragma omp task if (task:0) if (1)\t\t/* { dg-error \"if any 'if' clause has modifier, then all 'if' clauses have to use modifier\" } */\n+  f0 ();\n+  #pragma omp task if (0) if (task:1)\t\t/* { dg-error \"if any 'if' clause has modifier, then all 'if' clauses have to use modifier\" } */\n+  f0 ();\n+  #pragma omp taskloop if (0) if (0)\t\t/* { dg-error \"too many 'if' clauses without modifier\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp taskloop if (0) if (1)\t\t/* { dg-error \"too many 'if' clauses without modifier\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp taskloop if (taskloop:0) if (taskloop:0)\t/* { dg-error \"too many 'if' clauses with 'taskloop' modifier\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp taskloop if (taskloop:0) if (1)\t\t/* { dg-error \"if any 'if' clause has modifier, then all 'if' clauses have to use modifier\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp taskloop if (0) if (taskloop:0)\t\t/* { dg-error \"if any 'if' clause has modifier, then all 'if' clauses have to use modifier\" } */\n+  for (i = 0; i < 8; ++i)\n+    f0 ();\n+  #pragma omp target data if (1) if (1) map (alloc: i)\t\t/* { dg-error \"too many 'if' clauses without modifier\" } */\n+  f0 ();\n+  #pragma omp target data if (target data: 1) if (target data:0) map (alloc: i)\t/* { dg-error \"too many 'if' clauses with 'target data' modifier\" } */\n+  f0 ();\n+  #pragma omp target data if (1) if (target data:0) map (alloc: i)\t/* { dg-error \"if any 'if' clause has modifier, then all 'if' clauses have to use modifier\" } */\n+  f0 ();\n+  #pragma omp target data if (target data: 1) if (0) map (alloc: i)\t/* { dg-error \"if any 'if' clause has modifier, then all 'if' clauses have to use modifier\" } */\n+  f0 ();\n+  #pragma omp target enter data if (1) if (1) map (to: i)\t\t/* { dg-error \"too many 'if' clauses without modifier\" } */\n+  #pragma omp target enter data if (target enter data: 1) if (target enter data:0) map (to: i)\t/* { dg-error \"too many 'if' clauses with 'target enter data' modifier\" } */\n+  #pragma omp target enter data if (1) if (target enter data:0) map (to: i)\t/* { dg-error \"if any 'if' clause has modifier, then all 'if' clauses have to use modifier\" } */\n+  #pragma omp target enter data if (target enter data: 1) if (0) map (to: i)\t/* { dg-error \"if any 'if' clause has modifier, then all 'if' clauses have to use modifier\" } */\n+  #pragma omp target exit data if (1) if (1) map (from: i)\t\t/* { dg-error \"too many 'if' clauses without modifier\" } */\n+  #pragma omp target exit data if (target exit data: 1) if (target exit data:0) map (from: i)\t/* { dg-error \"too many 'if' clauses with 'target exit data' modifier\" } */\n+  #pragma omp target exit data if (1) if (target exit data:0) map (from: i)\t/* { dg-error \"if any 'if' clause has modifier, then all 'if' clauses have to use modifier\" } */\n+  #pragma omp target exit data if (target exit data: 1) if (0) map (from: i)\t/* { dg-error \"if any 'if' clause has modifier, then all 'if' clauses have to use modifier\" } */\n+  #pragma omp target if (1) if (1)\t\t/* { dg-error \"too many 'if' clauses without modifier\" } */\n+  f0 ();\n+  #pragma omp target if (target: 1) if (target:0)\t/* { dg-error \"too many 'if' clauses with 'target' modifier\" } */\n+  f0 ();\n+  #pragma omp target if (1) if (target:0)\t\t/* { dg-error \"if any 'if' clause has modifier, then all 'if' clauses have to use modifier\" } */\n+  f0 ();\n+  #pragma omp target if (target: 1) if (0)\t\t/* { dg-error \"if any 'if' clause has modifier, then all 'if' clauses have to use modifier\" } */\n+  f0 ();\n+  #pragma omp target update if (1) if (1) to (i)\t\t/* { dg-error \"too many 'if' clauses without modifier\" } */\n+  #pragma omp target update if (target update: 1) if (target update:0) to (i)\t/* { dg-error \"too many 'if' clauses with 'target update' modifier\" } */\n+  #pragma omp target update if (1) if (target update:0) to (i)\t/* { dg-error \"if any 'if' clause has modifier, then all 'if' clauses have to use modifier\" } */\n+  #pragma omp target update if (target update: 1) if (0) to (i)\t/* { dg-error \"if any 'if' clause has modifier, then all 'if' clauses have to use modifier\" } */\n+}"}]}