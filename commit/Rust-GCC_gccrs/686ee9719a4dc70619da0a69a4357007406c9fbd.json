{"sha": "686ee9719a4dc70619da0a69a4357007406c9fbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg2ZWU5NzE5YTRkYzcwNjE5ZGEwYTY5YTQzNTcwMDc0MDZjOWZiZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-11-17T18:39:02Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-11-17T18:39:02Z"}, "message": "Add internal math functions\n\nThis patch adds internal functions for simple FLT_FN built-in functions,\nin cases where an associated optab already exists.  Unlike some of the\nbuilt-in functions, these internal functions never set errno.\n\nLDEXP is an odd-one out in that its second operand is an integer.\nAll the others operate on uniform types.\n\nThe patch also adds a function to query the internal function associated\nwith a built-in function (if any), and another to test whether a given\ngcall could be replaced by a call to an internal function on the current\ntarget (as long as the caller deals with errno appropriately).\n\nTested on x86_64-linux-gnu, aarch64-linux-gnu and arm-linux-gnueabi.\n\ngcc/\n\t* builtins.h (associated_internal_fn): Declare.\n\t(replacement_internal_fn): Likewise.\n\t* builtins.c: Include internal-fn.h\n\t(associated_internal_fn, replacement_internal_fn): New functions.\n\t* internal-fn.def (DEF_INTERNAL_FLT_FN): New macro.\n\t(ACOS, ASIN, ATAN, COS, EXP, EXP10, EXP2, EXPM1, LOG, LOG10, LOG1P)\n\t(LOG2, LOGB, SIGNIFICAND, SIN, SQRT, TAN, CEIL, FLOOR, NEARBYINT)\n\t(RINT, ROUND, TRUNC, ATAN2, COPYSIGN, FMOD, POW, REMAINDER, SCALB)\n\t(LDEXP): New functions.\n\t* internal-fn.c: Include recog.h.\n\t(unary_direct, binary_direct): New macros.\n\t(expand_direct_optab_fn): New function.\n\t(expand_unary_optab_fn): New macro.\n\t(expand_binary_optab_fn): Likewise.\n\t(direct_unary_optab_supported_p): Likewise.\n\t(direct_binary_optab_supported_p): Likewise.\n\nFrom-SVN: r230474", "tree": {"sha": "a3ec02e033084a3f11a50a026441973f162ceda0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3ec02e033084a3f11a50a026441973f162ceda0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/686ee9719a4dc70619da0a69a4357007406c9fbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/686ee9719a4dc70619da0a69a4357007406c9fbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/686ee9719a4dc70619da0a69a4357007406c9fbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/686ee9719a4dc70619da0a69a4357007406c9fbd/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ab23f5d9742b8b1c7a80d8383a141f243f4198e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab23f5d9742b8b1c7a80d8383a141f243f4198e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab23f5d9742b8b1c7a80d8383a141f243f4198e6"}], "stats": {"total": 187, "additions": 187, "deletions": 0}, "files": [{"sha": "504138eada8153f6d1d9e71dfaef7a9f4e1daee3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/686ee9719a4dc70619da0a69a4357007406c9fbd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/686ee9719a4dc70619da0a69a4357007406c9fbd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=686ee9719a4dc70619da0a69a4357007406c9fbd", "patch": "@@ -1,3 +1,22 @@\n+2015-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* builtins.h (associated_internal_fn): Declare.\n+\t(replacement_internal_fn): Likewise.\n+\t* builtins.c: Include internal-fn.h\n+\t(associated_internal_fn, replacement_internal_fn): New functions.\n+\t* internal-fn.def (DEF_INTERNAL_FLT_FN): New macro.\n+\t(ACOS, ASIN, ATAN, COS, EXP, EXP10, EXP2, EXPM1, LOG, LOG10, LOG1P)\n+\t(LOG2, LOGB, SIGNIFICAND, SIN, SQRT, TAN, CEIL, FLOOR, NEARBYINT)\n+\t(RINT, ROUND, TRUNC, ATAN2, COPYSIGN, FMOD, POW, REMAINDER, SCALB)\n+\t(LDEXP): New functions.\n+\t* internal-fn.c: Include recog.h.\n+\t(unary_direct, binary_direct): New macros.\n+\t(expand_direct_optab_fn): New function.\n+\t(expand_unary_optab_fn): New macro.\n+\t(expand_binary_optab_fn): Likewise.\n+\t(direct_unary_optab_supported_p): Likewise.\n+\t(direct_binary_optab_supported_p): Likewise.\n+\n 2015-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* coretypes.h (tree_pair): New type."}, {"sha": "0eef1125027d49f4a0c66eef67d92fcefb442435", "filename": "gcc/builtins.c", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/686ee9719a4dc70619da0a69a4357007406c9fbd/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/686ee9719a4dc70619da0a69a4357007406c9fbd/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=686ee9719a4dc70619da0a69a4357007406c9fbd", "patch": "@@ -62,6 +62,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cilk.h\"\n #include \"tree-chkp.h\"\n #include \"rtl-chkp.h\"\n+#include \"internal-fn.h\"\n \n \n struct target_builtins default_target_builtins;\n@@ -1901,6 +1902,63 @@ mathfn_built_in (tree type, enum built_in_function fn)\n   return mathfn_built_in_1 (type, fn, /*implicit=*/ 1);\n }\n \n+/* If BUILT_IN_NORMAL function FNDECL has an associated internal function,\n+   return its code, otherwise return IFN_LAST.  Note that this function\n+   only tests whether the function is defined in internals.def, not whether\n+   it is actually available on the target.  */\n+\n+internal_fn\n+associated_internal_fn (tree fndecl)\n+{\n+  gcc_checking_assert (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL);\n+  tree return_type = TREE_TYPE (TREE_TYPE (fndecl));\n+  switch (DECL_FUNCTION_CODE (fndecl))\n+    {\n+#define DEF_INTERNAL_FLT_FN(NAME, FLAGS, OPTAB, TYPE) \\\n+    CASE_FLT_FN (BUILT_IN_##NAME): return IFN_##NAME;\n+#include \"internal-fn.def\"\n+\n+    CASE_FLT_FN (BUILT_IN_POW10):\n+      return IFN_EXP10;\n+\n+    CASE_FLT_FN (BUILT_IN_DREM):\n+      return IFN_REMAINDER;\n+\n+    CASE_FLT_FN (BUILT_IN_SCALBN):\n+    CASE_FLT_FN (BUILT_IN_SCALBLN):\n+      if (REAL_MODE_FORMAT (TYPE_MODE (return_type))->b == 2)\n+\treturn IFN_LDEXP;\n+      return IFN_LAST;\n+\n+    default:\n+      return IFN_LAST;\n+    }\n+}\n+\n+/* If CALL is a call to a BUILT_IN_NORMAL function that could be replaced\n+   on the current target by a call to an internal function, return the\n+   code of that internal function, otherwise return IFN_LAST.  The caller\n+   is responsible for ensuring that any side-effects of the built-in\n+   call are dealt with correctly.  E.g. if CALL sets errno, the caller\n+   must decide that the errno result isn't needed or make it available\n+   in some other way.  */\n+\n+internal_fn\n+replacement_internal_fn (gcall *call)\n+{\n+  if (gimple_call_builtin_p (call, BUILT_IN_NORMAL))\n+    {\n+      internal_fn ifn = associated_internal_fn (gimple_call_fndecl (call));\n+      if (ifn != IFN_LAST)\n+\t{\n+\t  tree_pair types = direct_internal_fn_types (ifn, call);\n+\t  if (direct_internal_fn_supported_p (ifn, types))\n+\t    return ifn;\n+\t}\n+    }\n+  return IFN_LAST;\n+}\n+\n /* If errno must be maintained, expand the RTL to check if the result,\n    TARGET, of a built-in function call, EXP, is NaN, and if so set\n    errno to EDOM.  */"}, {"sha": "7f92d076d2e08fface691c15378821315ba5583c", "filename": "gcc/builtins.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/686ee9719a4dc70619da0a69a4357007406c9fbd/gcc%2Fbuiltins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/686ee9719a4dc70619da0a69a4357007406c9fbd/gcc%2Fbuiltins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.h?ref=686ee9719a4dc70619da0a69a4357007406c9fbd", "patch": "@@ -94,4 +94,7 @@ extern char target_percent_s[3];\n extern char target_percent_c[3];\n extern char target_percent_s_newline[4];\n \n+extern internal_fn associated_internal_fn (tree);\n+extern internal_fn replacement_internal_fn (gcall *);\n+\n #endif"}, {"sha": "b8531628f9f5922143caa633c7b6a5728f4953fa", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/686ee9719a4dc70619da0a69a4357007406c9fbd/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/686ee9719a4dc70619da0a69a4357007406c9fbd/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=686ee9719a4dc70619da0a69a4357007406c9fbd", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dojump.h\"\n #include \"expr.h\"\n #include \"ubsan.h\"\n+#include \"recog.h\"\n \n /* The names of each internal function, indexed by function number.  */\n const char *const internal_fn_name_array[] = {\n@@ -73,6 +74,8 @@ init_internal_fns ()\n #define load_lanes_direct { -1, -1 }\n #define mask_store_direct { 3, 2 }\n #define store_lanes_direct { 0, 0 }\n+#define unary_direct { 0, 0 }\n+#define binary_direct { 0, 0 }\n \n const direct_internal_fn_info direct_internal_fn_array[IFN_LAST + 1] = {\n #define DEF_INTERNAL_FN(CODE, FLAGS, FNSPEC) not_direct,\n@@ -2070,6 +2073,58 @@ expand_GOACC_REDUCTION (gcall *stmt ATTRIBUTE_UNUSED)\n   gcc_unreachable ();\n }\n \n+/* Expand call STMT using OPTAB, which has a single output operand and\n+   NARGS input operands.  */\n+\n+static void\n+expand_direct_optab_fn (gcall *stmt, direct_optab optab, unsigned int nargs)\n+{\n+  expand_operand *ops = XALLOCAVEC (expand_operand, nargs + 1);\n+\n+  internal_fn fn = gimple_call_internal_fn (stmt);\n+  tree_pair types = direct_internal_fn_types (fn, stmt);\n+  insn_code icode = direct_optab_handler (optab, TYPE_MODE (types.first));\n+\n+  tree lhs = gimple_call_lhs (stmt);\n+  tree lhs_type = TREE_TYPE (lhs);\n+  rtx lhs_rtx = expand_expr (lhs, NULL_RTX, VOIDmode, EXPAND_WRITE);\n+  create_output_operand (&ops[0], lhs_rtx, insn_data[icode].operand[0].mode);\n+\n+  for (unsigned int i = 0; i < nargs; ++i)\n+    {\n+      tree rhs = gimple_call_arg (stmt, i);\n+      tree rhs_type = TREE_TYPE (rhs);\n+      rtx rhs_rtx = expand_normal (rhs);\n+      if (INTEGRAL_TYPE_P (rhs_type))\n+\tcreate_convert_operand_from (&ops[i + 1], rhs_rtx,\n+\t\t\t\t     TYPE_MODE (rhs_type),\n+\t\t\t\t     TYPE_UNSIGNED (rhs_type));\n+      else\n+\tcreate_input_operand (&ops[i + 1], rhs_rtx, TYPE_MODE (rhs_type));\n+    }\n+\n+  expand_insn (icode, nargs + 1, ops);\n+  if (!rtx_equal_p (lhs_rtx, ops[0].value))\n+    {\n+      if (INTEGRAL_TYPE_P (lhs_type))\n+\t/* Convert the operand to the required type, which is useful\n+\t   for things that return an int regardless of the size of\n+\t   the input.  If the value produced by the instruction is\n+\t   smaller than required, assume that it is signed.  */\n+\tconvert_move (lhs_rtx, ops[0].value, 0);\n+      else\n+\temit_move_insn (lhs_rtx, ops[0].value);\n+    }\n+}\n+\n+/* Expanders for optabs that can use expand_direct_optab_fn.  */\n+\n+#define expand_unary_optab_fn(STMT, OPTAB) \\\n+  expand_direct_optab_fn (STMT, OPTAB, 1)\n+\n+#define expand_binary_optab_fn(STMT, OPTAB) \\\n+  expand_direct_optab_fn (STMT, OPTAB, 2)\n+\n /* RETURN_TYPE and ARGS are a return type and argument list that are\n    in principle compatible with FN (which satisfies direct_internal_fn_p).\n    Return the types that should be used to determine whether the\n@@ -2121,6 +2176,8 @@ multi_vector_optab_supported_p (convert_optab optab, tree_pair types)\n   return get_multi_vector_move (types.first, optab) != CODE_FOR_nothing;\n }\n \n+#define direct_unary_optab_supported_p direct_optab_supported_p\n+#define direct_binary_optab_supported_p direct_optab_supported_p\n #define direct_mask_load_optab_supported_p direct_optab_supported_p\n #define direct_load_lanes_optab_supported_p multi_vector_optab_supported_p\n #define direct_mask_store_optab_supported_p direct_optab_supported_p"}, {"sha": "65e158e23b84e76da95e07f82337aeaf16e444b8", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/686ee9719a4dc70619da0a69a4357007406c9fbd/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/686ee9719a4dc70619da0a69a4357007406c9fbd/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=686ee9719a4dc70619da0a69a4357007406c9fbd", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n \n      DEF_INTERNAL_FN (NAME, FLAGS, FNSPEC)\n      DEF_INTERNAL_OPTAB_FN (NAME, FLAGS, OPTAB, TYPE)\n+     DEF_INTERNAL_FLT_FN (NAME, FLAGS, OPTAB, TYPE)\n \n    where NAME is the name of the function, FLAGS is a set of\n    ECF_* flags and FNSPEC is a string describing functions fnspec.\n@@ -47,6 +48,11 @@ along with GCC; see the file COPYING3.  If not see\n    - mask_store: currently just maskstore\n    - store_lanes: currently just vec_store_lanes\n \n+   DEF_INTERNAL_FLT_FN is like DEF_INTERNAL_OPTAB_FN, but in addition,\n+   the function implements the computational part of a built-in math\n+   function BUILT_IN_<NAME>{F,,L}.  Unlike some built-in functions,\n+   these internal functions never set errno.\n+\n    Each entry must have a corresponding expander of the form:\n \n      void expand_NAME (gimple_call stmt)\n@@ -64,12 +70,55 @@ along with GCC; see the file COPYING3.  If not see\n   DEF_INTERNAL_FN (NAME, FLAGS | ECF_LEAF, NULL)\n #endif\n \n+#ifndef DEF_INTERNAL_FLT_FN\n+#define DEF_INTERNAL_FLT_FN(NAME, FLAGS, OPTAB, TYPE) \\\n+  DEF_INTERNAL_OPTAB_FN (NAME, FLAGS, OPTAB, TYPE)\n+#endif\n+\n DEF_INTERNAL_OPTAB_FN (MASK_LOAD, ECF_PURE, maskload, mask_load)\n DEF_INTERNAL_OPTAB_FN (LOAD_LANES, ECF_CONST, vec_load_lanes, load_lanes)\n \n DEF_INTERNAL_OPTAB_FN (MASK_STORE, 0, maskstore, mask_store)\n DEF_INTERNAL_OPTAB_FN (STORE_LANES, ECF_CONST, vec_store_lanes, store_lanes)\n \n+/* Unary math functions.  */\n+DEF_INTERNAL_FLT_FN (ACOS, ECF_CONST, acos, unary)\n+DEF_INTERNAL_FLT_FN (ASIN, ECF_CONST, asin, unary)\n+DEF_INTERNAL_FLT_FN (ATAN, ECF_CONST, atan, unary)\n+DEF_INTERNAL_FLT_FN (COS, ECF_CONST, cos, unary)\n+DEF_INTERNAL_FLT_FN (EXP, ECF_CONST, exp, unary)\n+DEF_INTERNAL_FLT_FN (EXP10, ECF_CONST, exp10, unary)\n+DEF_INTERNAL_FLT_FN (EXP2, ECF_CONST, exp2, unary)\n+DEF_INTERNAL_FLT_FN (EXPM1, ECF_CONST, expm1, unary)\n+DEF_INTERNAL_FLT_FN (LOG, ECF_CONST, log, unary)\n+DEF_INTERNAL_FLT_FN (LOG10, ECF_CONST, log10, unary)\n+DEF_INTERNAL_FLT_FN (LOG1P, ECF_CONST, log1p, unary)\n+DEF_INTERNAL_FLT_FN (LOG2, ECF_CONST, log2, unary)\n+DEF_INTERNAL_FLT_FN (LOGB, ECF_CONST, logb, unary)\n+DEF_INTERNAL_FLT_FN (SIGNIFICAND, ECF_CONST, significand, unary)\n+DEF_INTERNAL_FLT_FN (SIN, ECF_CONST, sin, unary)\n+DEF_INTERNAL_FLT_FN (SQRT, ECF_CONST, sqrt, unary)\n+DEF_INTERNAL_FLT_FN (TAN, ECF_CONST, tan, unary)\n+\n+/* FP rounding.  */\n+DEF_INTERNAL_FLT_FN (CEIL, ECF_CONST, ceil, unary)\n+DEF_INTERNAL_FLT_FN (FLOOR, ECF_CONST, floor, unary)\n+DEF_INTERNAL_FLT_FN (NEARBYINT, ECF_CONST, nearbyint, unary)\n+DEF_INTERNAL_FLT_FN (RINT, ECF_CONST, rint, unary)\n+DEF_INTERNAL_FLT_FN (ROUND, ECF_CONST, round, unary)\n+DEF_INTERNAL_FLT_FN (TRUNC, ECF_CONST, btrunc, unary)\n+\n+/* Binary math functions.  */\n+DEF_INTERNAL_FLT_FN (ATAN2, ECF_CONST, atan2, binary)\n+DEF_INTERNAL_FLT_FN (COPYSIGN, ECF_CONST, copysign, binary)\n+DEF_INTERNAL_FLT_FN (FMOD, ECF_CONST, fmod, binary)\n+DEF_INTERNAL_FLT_FN (POW, ECF_CONST, pow, binary)\n+DEF_INTERNAL_FLT_FN (REMAINDER, ECF_CONST, remainder, binary)\n+DEF_INTERNAL_FLT_FN (SCALB, ECF_CONST, scalb, binary)\n+\n+/* FP scales.  */\n+DEF_INTERNAL_FLT_FN (LDEXP, ECF_CONST, ldexp, binary)\n+\n DEF_INTERNAL_FN (GOMP_SIMD_LANE, ECF_NOVOPS | ECF_LEAF | ECF_NOTHROW, NULL)\n DEF_INTERNAL_FN (GOMP_SIMD_VF, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n DEF_INTERNAL_FN (GOMP_SIMD_LAST_LANE, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n@@ -114,5 +163,6 @@ DEF_INTERNAL_FN (GOACC_LOOP, ECF_PURE | ECF_NOTHROW, NULL)\n /* OpenACC reduction abstraction.  See internal-fn.h  for usage.  */\n DEF_INTERNAL_FN (GOACC_REDUCTION, ECF_NOTHROW | ECF_LEAF, NULL)\n \n+#undef DEF_INTERNAL_FLT_FN\n #undef DEF_INTERNAL_OPTAB_FN\n #undef DEF_INTERNAL_FN"}]}