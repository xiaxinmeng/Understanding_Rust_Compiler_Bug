{"sha": "b828123e23c9a8fb42b98a54b34141fe4dace764", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgyODEyM2UyM2M5YThmYjQyYjk4YTU0YjM0MTQxZmU0ZGFjZTc2NA==", "commit": {"author": {"name": "Andrew John Hughes", "email": "gnu_andrew@member.fsf.org", "date": "2004-08-01T11:14:42Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-08-01T11:14:42Z"}, "message": "Collection.java, [...]: Added additional exceptions to documentation.\n\n2004-08-01  Andrew John Hughes  <gnu_andrew@member.fsf.org>\n\n\t* java/util/Collection.java, java/util/List.java,\n\tjava/util/Map.java, java/util/Set.java,\n\tjava/util/SortedMap.java, java/util/SortedSet.java:\n\tAdded additional exceptions to documentation.\n\nFrom-SVN: r85403", "tree": {"sha": "3ae8e78c344eaaa79a9b787c8b0546d1c8fdb2c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ae8e78c344eaaa79a9b787c8b0546d1c8fdb2c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b828123e23c9a8fb42b98a54b34141fe4dace764", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b828123e23c9a8fb42b98a54b34141fe4dace764", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b828123e23c9a8fb42b98a54b34141fe4dace764", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b828123e23c9a8fb42b98a54b34141fe4dace764/comments", "author": {"login": "gnu-andrew", "id": 962817, "node_id": "MDQ6VXNlcjk2MjgxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/962817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnu-andrew", "html_url": "https://github.com/gnu-andrew", "followers_url": "https://api.github.com/users/gnu-andrew/followers", "following_url": "https://api.github.com/users/gnu-andrew/following{/other_user}", "gists_url": "https://api.github.com/users/gnu-andrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnu-andrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnu-andrew/subscriptions", "organizations_url": "https://api.github.com/users/gnu-andrew/orgs", "repos_url": "https://api.github.com/users/gnu-andrew/repos", "events_url": "https://api.github.com/users/gnu-andrew/events{/privacy}", "received_events_url": "https://api.github.com/users/gnu-andrew/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b5662eea779eb744d214bd46fc4e4fed67b8d33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b5662eea779eb744d214bd46fc4e4fed67b8d33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b5662eea779eb744d214bd46fc4e4fed67b8d33"}], "stats": {"total": 117, "additions": 111, "deletions": 6}, "files": [{"sha": "28973292b3636399b27731f8795c2a27b431f02d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b828123e23c9a8fb42b98a54b34141fe4dace764/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b828123e23c9a8fb42b98a54b34141fe4dace764/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b828123e23c9a8fb42b98a54b34141fe4dace764", "patch": "@@ -1,3 +1,10 @@\n+2004-08-01  Andrew John Hughes  <gnu_andrew@member.fsf.org>\n+\n+\t* java/util/Collection.java, java/util/List.java,\n+\tjava/util/Map.java, java/util/Set.java,\n+\tjava/util/SortedMap.java, java/util/SortedSet.java:\n+\tAdded additional exceptions to documentation.\n+\n 2004-08-01  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \tPR libgcj/16814"}, {"sha": "6ec9c4e3a029c0e597f9600db5c73009dd685379", "filename": "libjava/java/util/Collection.java", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b828123e23c9a8fb42b98a54b34141fe4dace764/libjava%2Fjava%2Futil%2FCollection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b828123e23c9a8fb42b98a54b34141fe4dace764/libjava%2Fjava%2Futil%2FCollection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FCollection.java?ref=b828123e23c9a8fb42b98a54b34141fe4dace764", "patch": "@@ -94,6 +94,8 @@\n    *   support the add operation.\n    * @throws ClassCastException if o cannot be added to this collection due\n    *   to its type.\n+   * @throws NullPointerException if o is null and this collection doesn't\n+   *   support the addition of null values.\n    * @throws IllegalArgumentException if o cannot be added to this\n    *   collection for some other reason.\n    */\n@@ -108,6 +110,9 @@\n    *   support the addAll operation.\n    * @throws ClassCastException if some element of c cannot be added to this\n    *   collection due to its type.\n+   * @throws NullPointerException if some element of c is null and this\n+   *   collection does not support the addition of null values.\n+   * @throws NullPointerException if c itself is null.\n    * @throws IllegalArgumentException if some element of c cannot be added\n    *   to this collection for some other reason.\n    */\n@@ -129,6 +134,10 @@\n    * @param o the element to look for.\n    * @return true if this collection contains at least one element e such that\n    *   <code>o == null ? e == null : o.equals(e)</code>.\n+   * @throws ClassCastException if the type of o is not a valid type for this\n+   *   collection.\n+   * @throws NullPointerException if o is null and this collection doesn't\n+   *   support null values.\n    */\n   boolean contains(Object o);\n \n@@ -137,6 +146,11 @@\n    *\n    * @param c the collection to test for.\n    * @return true if for every element o in c, contains(o) would return true.\n+   * @throws ClassCastException if the type of any element in c is not a valid\n+   *   type for this collection.\n+   * @throws NullPointerException if some element of c is null and this\n+   *   collection does not support null values.\n+   * @throws NullPointerException if c itself is null.\n    */\n   boolean containsAll(Collection c);\n \n@@ -198,6 +212,10 @@\n    *   if the collection contained at least one occurrence of o.\n    * @throws UnsupportedOperationException if this collection does not\n    *   support the remove operation.\n+   * @throws ClassCastException if the type of o is not a valid type\n+   *   for this collection.\n+   * @throws NullPointerException if o is null and the collection doesn't\n+   *   support null values.\n    */\n   boolean remove(Object o);\n \n@@ -208,6 +226,11 @@\n    * @return true if this collection was modified as a result of this call.\n    * @throws UnsupportedOperationException if this collection does not\n    *   support the removeAll operation.\n+   * @throws ClassCastException if the type of any element in c is not a valid\n+   *   type for this collection.\n+   * @throws NullPointerException if some element of c is null and this\n+   *   collection does not support removing null values.\n+   * @throws NullPointerException if c itself is null.\n    */\n   boolean removeAll(Collection c);\n \n@@ -218,6 +241,11 @@\n    * @return true if this collection was modified as a result of this call.\n    * @throws UnsupportedOperationException if this collection does not\n    *   support the retainAll operation.\n+   * @throws ClassCastException if the type of any element in c is not a valid\n+   *   type for this collection.\n+   * @throws NullPointerException if some element of c is null and this\n+   *   collection does not support retaining null values.\n+   * @throws NullPointerException if c itself is null.\n    */\n   boolean retainAll(Collection c);\n "}, {"sha": "0f7f409dae6cc9da772046d068b40f89929fd8c9", "filename": "libjava/java/util/List.java", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b828123e23c9a8fb42b98a54b34141fe4dace764/libjava%2Fjava%2Futil%2FList.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b828123e23c9a8fb42b98a54b34141fe4dace764/libjava%2Fjava%2Futil%2FList.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FList.java?ref=b828123e23c9a8fb42b98a54b34141fe4dace764", "patch": "@@ -97,6 +97,8 @@ public interface List extends Collection\n    *         type\n    * @throws IllegalArgumentException if o cannot be added to this list for\n    *         some other reason\n+   * @throws NullPointerException if o is null and this list doesn't support\n+   *         the addition of null values.\n    */\n   void add(int index, Object o);\n \n@@ -113,6 +115,8 @@ public interface List extends Collection\n    *         type\n    * @throws IllegalArgumentException if o cannot be added to this list for\n    *         some other reason\n+   * @throws NullPointerException if o is null and this list doesn't support\n+   *         the addition of null values.\n    */\n   boolean add(Object o);\n \n@@ -134,6 +138,8 @@ public interface List extends Collection\n    *         list due to its type\n    * @throws IllegalArgumentException if some element of c cannot be added\n    *         to this list for some other reason\n+   * @throws NullPointerException if some element of c is null and this list\n+   *         doesn't support the addition of null values.\n    * @throws NullPointerException if the specified collection is null\n    * @see #add(int, Object)\n    */\n@@ -155,6 +161,8 @@ public interface List extends Collection\n    * @throws IllegalArgumentException if some element of c cannot be added\n    *         to this list for some other reason\n    * @throws NullPointerException if the specified collection is null\n+   * @throws NullPointerException if some element of c is null and this list\n+   *         doesn't support the addition of null values.\n    * @see #add(Object)\n    */\n   boolean addAll(Collection c);\n@@ -175,6 +183,10 @@ public interface List extends Collection\n    *\n    * @param o the element to look for\n    * @return true if this list contains the element\n+   * @throws ClassCastException if the type of o is not a valid type\n+   *         for this list.\n+   * @throws NullPointerException if o is null and the list doesn't\n+   *         support null values.\n    */\n   boolean contains(Object o);\n \n@@ -184,6 +196,10 @@ public interface List extends Collection\n    * @param c the collection to test for\n    * @return true if for every element o in c, contains(o) would return true\n    * @throws NullPointerException if the collection is null\n+   * @throws ClassCastException if the type of any element in c is not a valid\n+   *         type for this list.\n+   * @throws NullPointerException if some element of c is null and this\n+   *         list does not support null values.\n    * @see #contains(Object)\n    */\n   boolean containsAll(Collection c);\n@@ -240,7 +256,11 @@ public interface List extends Collection\n    *\n    * @param o the object to search for\n    * @return the least integer n such that <code>o == null ? get(n) == null :\n-   *         o.equals(get(n))</code>, or -1 if there is no such index\n+   *         o.equals(get(n))</code>, or -1 if there is no such index.\n+   * @throws ClassCastException if the type of o is not a valid\n+   *         type for this list.\n+   * @throws NullPointerException if o is null and this\n+   *         list does not support null values.\n    */\n   int indexOf(Object o);\n \n@@ -263,7 +283,11 @@ public interface List extends Collection\n    * list.\n    *\n    * @return the greatest integer n such that <code>o == null ? get(n) == null\n-   *         : o.equals(get(n))</code>, or -1 if there is no such index\n+   *         : o.equals(get(n))</code>, or -1 if there is no such index.\n+   * @throws ClassCastException if the type of o is not a valid\n+   *         type for this list.\n+   * @throws NullPointerException if o is null and this\n+   *         list does not support null values.\n    */\n   int lastIndexOf(Object o);\n \n@@ -310,6 +334,10 @@ public interface List extends Collection\n    *         the list contained at least one occurrence of o\n    * @throws UnsupportedOperationException if this list does not support the\n    *         remove operation\n+   * @throws ClassCastException if the type of o is not a valid\n+   *         type for this list.\n+   * @throws NullPointerException if o is null and this\n+   *         list does not support removing null values.\n    */\n   boolean remove(Object o);\n \n@@ -322,6 +350,10 @@ public interface List extends Collection\n    * @throws UnsupportedOperationException if this list does not support the\n    *         removeAll operation\n    * @throws NullPointerException if the collection is null\n+   * @throws ClassCastException if the type of any element in c is not a valid\n+   *         type for this list.\n+   * @throws NullPointerException if some element of c is null and this\n+   *         list does not support removing null values.\n    * @see #remove(Object)\n    * @see #contains(Object)\n    */\n@@ -337,6 +369,10 @@ public interface List extends Collection\n    * @throws UnsupportedOperationException if this list does not support the\n    *         retainAll operation\n    * @throws NullPointerException if the collection is null\n+   * @throws ClassCastException if the type of any element in c is not a valid\n+   *         type for this list.\n+   * @throws NullPointerException if some element of c is null and this\n+   *         list does not support retaining null values.\n    * @see #remove(Object)\n    * @see #contains(Object)\n    */\n@@ -355,6 +391,8 @@ public interface List extends Collection\n    *         type\n    * @throws IllegalArgumentException if o cannot be added to this list for\n    *         some other reason\n+   * @throws NullPointerException if o is null and this\n+   *         list does not support null values.\n    */\n   Object set(int index, Object o);\n \n@@ -381,8 +419,6 @@ public interface List extends Collection\n    * @return a List backed by a subsection of this list\n    * @throws IndexOutOfBoundsException if fromIndex &lt; 0\n    *         || toIndex &gt; size() || fromIndex &gt; toIndex\n-   * @throws IllegalArgumentException if fromIndex &gt; toIndex (according to\n-   *         AbstractList). Don't you love Sun's inconsistent specifications?\n    */\n   List subList(int fromIndex, int toIndex);\n "}, {"sha": "75658da5698aed4313e65a2b3032a0dfc4f4f4a4", "filename": "libjava/java/util/Map.java", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b828123e23c9a8fb42b98a54b34141fe4dace764/libjava%2Fjava%2Futil%2FMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b828123e23c9a8fb42b98a54b34141fe4dace764/libjava%2Fjava%2Futil%2FMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FMap.java?ref=b828123e23c9a8fb42b98a54b34141fe4dace764", "patch": "@@ -106,6 +106,10 @@\n    *\n    * @param value the value to search for\n    * @return true if the map contains the value\n+   * @throws ClassCastException if the type of the value is not a valid type\n+   *         for this map.\n+   * @throws NullPointerException if the value is null and the map doesn't\n+   *         support null values.\n    */\n   boolean containsValue(Object value);\n \n@@ -164,7 +168,8 @@\n    * @throws ClassCastException if the key or value is of the wrong type\n    * @throws IllegalArgumentException if something about this key or value\n    *         prevents it from existing in this map\n-   * @throws NullPointerException if the map forbids null keys or values\n+   * @throws NullPointerException if either the key or the value is null,\n+   *         and the map forbids null keys or values\n    * @see #containsKey(Object)\n    */\n   Object put(Object key, Object value);\n@@ -224,8 +229,12 @@\n    * @param key the key to remove\n    * @return the value the key mapped to, or null if not present\n    * @throws UnsupportedOperationException if deletion is unsupported\n+   * @throws NullPointerException if the key is null and this map doesn't\n+   *         support null keys.\n+   * @throws ClassCastException if the type of the key is not a valid type\n+   *         for this map.\n    */\n-  Object remove(Object o);\n+  Object remove(Object key);\n \n   /**\n    * Returns the number of key-value mappings in the map. If there are more"}, {"sha": "eb4df3ef299462ce39636f06615fe66e7239142d", "filename": "libjava/java/util/Set.java", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b828123e23c9a8fb42b98a54b34141fe4dace764/libjava%2Fjava%2Futil%2FSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b828123e23c9a8fb42b98a54b34141fe4dace764/libjava%2Fjava%2Futil%2FSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FSet.java?ref=b828123e23c9a8fb42b98a54b34141fe4dace764", "patch": "@@ -118,6 +118,10 @@ public interface Set extends Collection\n    *\n    * @param o the object to look for\n    * @return true if it is found in the set\n+   * @throws ClassCastException if the type of o is not a valid type\n+   *         for this set.\n+   * @throws NullPointerException if o is null and this set doesn't\n+   *         support null values.\n    */\n   boolean contains(Object o);\n \n@@ -129,6 +133,10 @@ public interface Set extends Collection\n    * @param c the collection to check membership in\n    * @return true if all elements in this set are in c\n    * @throws NullPointerException if c is null\n+   * @throws ClassCastException if the type of any element in c is not\n+   *         a valid type for this set.\n+   * @throws NullPointerException if some element of c is null and this\n+   *         set doesn't support null values.\n    * @see #contains(Object)\n    */\n   boolean containsAll(Collection c);\n@@ -148,6 +156,7 @@ public interface Set extends Collection\n    * equals, this is the sum of the hashcode of all elements in the set.\n    *\n    * @return the sum of the hashcodes of all set elements\n+   * @see #equals(Object)\n    */\n   int hashCode();\n \n@@ -174,6 +183,10 @@ public interface Set extends Collection\n    * @param o the object to remove\n    * @return true if the set changed (an object was removed)\n    * @throws UnsupportedOperationException if this operation is not allowed\n+   * @throws ClassCastException if the type of o is not a valid type\n+   *         for this set.\n+   * @throws NullPointerException if o is null and this set doesn't allow\n+   *         the removal of a null value.\n    */\n   boolean remove(Object o);\n \n@@ -186,6 +199,10 @@ public interface Set extends Collection\n    * @return true if this set changed as a result\n    * @throws UnsupportedOperationException if this operation is not allowed\n    * @throws NullPointerException if c is null\n+   * @throws ClassCastException if the type of any element in c is not\n+   *         a valid type for this set.\n+   * @throws NullPointerException if some element of c is null and this\n+   *         set doesn't support removing null values.\n    * @see #remove(Object)\n    */\n   boolean removeAll(Collection c);\n@@ -199,6 +216,10 @@ public interface Set extends Collection\n    * @return true if this set was modified\n    * @throws UnsupportedOperationException if this operation is not allowed\n    * @throws NullPointerException if c is null\n+   * @throws ClassCastException if the type of any element in c is not\n+   *         a valid type for this set.\n+   * @throws NullPointerException if some element of c is null and this\n+   *         set doesn't support retaining null values.\n    * @see #remove(Object)\n    */\n   boolean retainAll(Collection c);"}, {"sha": "742524e7a68ca55e793c5b0f3a58a35710327228", "filename": "libjava/java/util/SortedMap.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b828123e23c9a8fb42b98a54b34141fe4dace764/libjava%2Fjava%2Futil%2FSortedMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b828123e23c9a8fb42b98a54b34141fe4dace764/libjava%2Fjava%2Futil%2FSortedMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FSortedMap.java?ref=b828123e23c9a8fb42b98a54b34141fe4dace764", "patch": "@@ -86,6 +86,7 @@ public interface SortedMap extends Map\n    * Returns the first (lowest sorted) key in the map.\n    *\n    * @return the first key\n+   * @throws NoSuchElementException if this map is empty.\n    */\n   Object firstKey();\n \n@@ -115,6 +116,7 @@ public interface SortedMap extends Map\n    * Returns the last (highest sorted) key in the map.\n    *\n    * @return the last key\n+   * @throws NoSuchElementException if this map is empty.\n    */\n   Object lastKey();\n "}, {"sha": "81dff0ca2296a1193c18d32d534c2034e1dc4b60", "filename": "libjava/java/util/SortedSet.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b828123e23c9a8fb42b98a54b34141fe4dace764/libjava%2Fjava%2Futil%2FSortedSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b828123e23c9a8fb42b98a54b34141fe4dace764/libjava%2Fjava%2Futil%2FSortedSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FSortedSet.java?ref=b828123e23c9a8fb42b98a54b34141fe4dace764", "patch": "@@ -88,6 +88,7 @@ public interface SortedSet extends Set\n    * Returns the first (lowest sorted) element in the map.\n    *\n    * @return the first element\n+   * @throws NoSuchElementException if the set is empty.\n    */\n   Object first();\n \n@@ -118,6 +119,7 @@ public interface SortedSet extends Set\n    * Returns the last (highest sorted) element in the map.\n    *\n    * @return the last element\n+   * @throws NoSuchElementException if the set is empty.\n    */\n   Object last();\n "}]}