{"sha": "ddce04b8b9370d128bc890e27de8888c84250c5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRjZTA0YjhiOTM3MGQxMjhiYzg5MGUyN2RlODg4OGM4NDI1MGM1Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T14:47:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T14:47:19Z"}, "message": "[multiple changes]\n\n2014-11-20  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma, case Elaborate): Forbid pragma\n\tElaborate in SPARK mode.\n\n2014-11-20  Bob Duff  <duff@adacore.com>\n\n\t* s-taskin.adb, s-tassta.adb (Initialize_ATCB): If Domain\n\tis null, then initialize T.Common.Domain to that of the\n\tactivating task (not the parent task!), as required by RM-D.16.1.\n\tT.Common.Domain should never be null; so Assert. Remove similar\n\tcode from Create_Task in s-tassta.adb.\n\t* s-mudido-affinity.adb: Remove checks for Domain = null,\n\tbecause it can't be null.\n\t* s-taskin.ads, s-taspri-dummy.ads, s-taspri-mingw.ads,\n\ts-taspri-posix.ads, s-taspri-posix-noaltstack.ads,\n\ts-taspri-solaris.ads, s-taspri-vxworks.ads: Mark limited types as\n\texplicitly limited for clarity.\n\n2014-11-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_aggr.adb (Init_Hidden_Discriminants): Code clean up.\n\nFrom-SVN: r217863", "tree": {"sha": "3bfe5b5fea7c8283a4c5cd256056b9a8f8a19f92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bfe5b5fea7c8283a4c5cd256056b9a8f8a19f92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddce04b8b9370d128bc890e27de8888c84250c5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddce04b8b9370d128bc890e27de8888c84250c5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddce04b8b9370d128bc890e27de8888c84250c5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddce04b8b9370d128bc890e27de8888c84250c5b/comments", "author": null, "committer": null, "parents": [{"sha": "b953f511687e03a50fa231119fa55ff9c8c0f279", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b953f511687e03a50fa231119fa55ff9c8c0f279", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b953f511687e03a50fa231119fa55ff9c8c0f279"}], "stats": {"total": 191, "additions": 120, "deletions": 71}, "files": [{"sha": "457d7f95288bd2d1a9964224992e9d2a5082e24f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ddce04b8b9370d128bc890e27de8888c84250c5b", "patch": "@@ -1,3 +1,26 @@\n+2014-11-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma, case Elaborate): Forbid pragma\n+\tElaborate in SPARK mode.\n+\n+2014-11-20  Bob Duff  <duff@adacore.com>\n+\n+\t* s-taskin.adb, s-tassta.adb (Initialize_ATCB): If Domain\n+\tis null, then initialize T.Common.Domain to that of the\n+\tactivating task (not the parent task!), as required by RM-D.16.1.\n+\tT.Common.Domain should never be null; so Assert. Remove similar\n+\tcode from Create_Task in s-tassta.adb.\n+\t* s-mudido-affinity.adb: Remove checks for Domain = null,\n+\tbecause it can't be null.\n+\t* s-taskin.ads, s-taspri-dummy.ads, s-taspri-mingw.ads,\n+\ts-taspri-posix.ads, s-taspri-posix-noaltstack.ads,\n+\ts-taspri-solaris.ads, s-taspri-vxworks.ads: Mark limited types as\n+\texplicitly limited for clarity.\n+\n+2014-11-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Init_Hidden_Discriminants): Code clean up.\n+\n 2014-11-20  Robert Dewar  <dewar@adacore.com>\n \n \t* errout.adb (Error_Msg): Don't suppress continuation msgs for"}, {"sha": "d9a43ff8d289f9e290968496dbde955ad13d50f7", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=ddce04b8b9370d128bc890e27de8888c84250c5b", "patch": "@@ -2108,21 +2108,27 @@ package body Exp_Aggr is\n       -------------------------------\n \n       procedure Init_Hidden_Discriminants (Typ : Entity_Id; List : List_Id) is\n-         Btype       : Entity_Id;\n-         Parent_Type : Entity_Id;\n-         Disc        : Entity_Id;\n-         Discr_Val   : Elmt_Id;\n+         Btype        : Entity_Id;\n+         Parent_Type  : Entity_Id;\n+         Disc         : Entity_Id;\n+         Discr_Val    : Elmt_Id;\n+         In_Aggr_Type : Boolean;\n \n       begin\n          --  The constraints on the hidden discriminants, if present, are kept\n          --  in the Stored_Constraint list of the type itself, or in that of\n-         --  the base type.\n+         --  the base type. If not in the constraints of the aggregate itself,\n+         --  we examine ancestors to find discriminants that are not renamed\n+         --  by other discriminants but constrained explicitly.\n+\n+         In_Aggr_Type := True;\n \n          Btype := Base_Type (Typ);\n          while Is_Derived_Type (Btype)\n            and then (Present (Stored_Constraint (Btype))\n                        or else\n-                     Present (Stored_Constraint (Typ)))\n+                     (In_Aggr_Type\n+                         and then Present (Stored_Constraint (Typ))))\n          loop\n             Parent_Type := Etype (Btype);\n \n@@ -2149,7 +2155,7 @@ package body Exp_Aggr is\n                Discr_Val := First_Elmt (Stored_Constraint (Typ));\n             end if;\n \n-            while Present (Discr_Val) loop\n+            while Present (Discr_Val) and Present (Disc) loop\n \n                --  Only those discriminants of the parent that are not\n                --  renamed by discriminants of the derived type need to\n@@ -2176,6 +2182,7 @@ package body Exp_Aggr is\n                Next_Elmt (Discr_Val);\n             end loop;\n \n+            In_Aggr_Type := False;\n             Btype := Base_Type (Parent_Type);\n          end loop;\n       end Init_Hidden_Discriminants;"}, {"sha": "05e27719082c1b63bb1a375f33364a2c473d8f5a", "filename": "gcc/ada/s-mudido-affinity.adb", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2Fs-mudido-affinity.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2Fs-mudido-affinity.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-mudido-affinity.adb?ref=ddce04b8b9370d128bc890e27de8888c84250c5b", "patch": "@@ -85,8 +85,7 @@ package body System.Multiprocessors.Dispatching_Domains is\n       --  System_Dispatching_Domain, or if CPU is not one of the processors of\n       --  Domain (and is not Not_A_Specific_CPU).\n \n-      if Target.Common.Domain /= null and then\n-        Dispatching_Domain (Target.Common.Domain) /= System_Dispatching_Domain\n+      if Dispatching_Domain (Target.Common.Domain) /= System_Dispatching_Domain\n       then\n          raise Dispatching_Domain_Error with\n            \"task already in user-defined dispatching domain\";\n@@ -201,9 +200,7 @@ package body System.Multiprocessors.Dispatching_Domains is\n       T := ST.All_Tasks_List;\n \n       while T /= null loop\n-         if T.Common.Domain = null or else\n-           T.Common.Domain = ST.System_Domain\n-         then\n+         if T.Common.Domain = ST.System_Domain then\n             Set_Task_Affinity (T);\n          end if;\n \n@@ -275,7 +272,11 @@ package body System.Multiprocessors.Dispatching_Domains is\n             Ada.Task_Identification.Current_Task) return Dispatching_Domain\n    is\n    begin\n-      return Dispatching_Domain (Convert_Ids (T).Common.Domain);\n+      return Result : constant Dispatching_Domain :=\n+        Dispatching_Domain (Convert_Ids (T).Common.Domain)\n+      do\n+         pragma Assert (Result /= null);\n+      end return;\n    end Get_Dispatching_Domain;\n \n    -------------------"}, {"sha": "7ed47697a7b6628f877dbda606c3fadd1b027cce", "filename": "gcc/ada/s-taskin.adb", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2Fs-taskin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2Fs-taskin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.adb?ref=ddce04b8b9370d128bc890e27de8888c84250c5b", "patch": "@@ -110,13 +110,16 @@ package body System.Tasking is\n          return;\n       end if;\n \n-      --  Wouldn't the following be better done using an assignment of an\n-      --  aggregate so that we could be sure no components were forgotten???\n-\n       T.Common.Parent                   := Parent;\n       T.Common.Base_Priority            := Base_Priority;\n       T.Common.Base_CPU                 := Base_CPU;\n-      T.Common.Domain                   := Domain;\n+\n+      --  The Domain defaults to that of the activator\n+\n+      T.Common.Domain                   :=\n+        (if Domain = null then Self_ID.Common.Domain else Domain);\n+      pragma Assert (T.Common.Domain /= null);\n+\n       T.Common.Current_Priority         := 0;\n       T.Common.Protected_Action_Nesting := 0;\n       T.Common.Call                     := null;\n@@ -218,18 +221,18 @@ package body System.Tasking is\n \n       T := STPO.New_ATCB (0);\n       Initialize_ATCB\n-        (Self_ID => null,\n+        (Self_ID          => null,\n          Task_Entry_Point => null,\n-         Task_Arg => Null_Address,\n-         Parent => Null_Task,\n-         Elaborated => null,\n-         Base_Priority => Base_Priority,\n-         Base_CPU => Base_CPU,\n-         Domain => System_Domain,\n-         Task_Info => Task_Info.Unspecified_Task_Info,\n-         Stack_Size => 0,\n-         T => T,\n-         Success => Success);\n+         Task_Arg         => Null_Address,\n+         Parent           => Null_Task,\n+         Elaborated       => null,\n+         Base_Priority    => Base_Priority,\n+         Base_CPU         => Base_CPU,\n+         Domain           => System_Domain,\n+         Task_Info        => Task_Info.Unspecified_Task_Info,\n+         Stack_Size       => 0,\n+         T                => T,\n+         Success          => Success);\n       pragma Assert (Success);\n \n       STPO.Initialize (T);"}, {"sha": "b12af37ea7ecd47caa696beaa17ea0091c0c8c72", "filename": "gcc/ada/s-taskin.ads", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.ads?ref=ddce04b8b9370d128bc890e27de8888c84250c5b", "patch": "@@ -504,7 +504,7 @@ package System.Tasking is\n \n    --  Section used by all GNARL implementations (regular and restricted)\n \n-   type Common_ATCB is record\n+   type Common_ATCB is limited record\n       State : Task_States;\n       pragma Atomic (State);\n       --  Encodes some basic information about the state of a task,\n@@ -721,7 +721,7 @@ package System.Tasking is\n    --  present in the Restricted_Ada_Task_Control_Block structure.\n \n    type Restricted_Ada_Task_Control_Block (Entry_Num : Task_Entry_Index) is\n-   record\n+   limited record\n       Common : Common_ATCB;\n       --  The common part between various tasking implementations\n \n@@ -954,7 +954,7 @@ package System.Tasking is\n    --  than 64-bits explicitly to allow codepeer to analyze this unit when\n    --  a target configuration file forces the maximum integer size to 32.\n \n-   type Ada_Task_Control_Block (Entry_Num : Task_Entry_Index) is record\n+   type Ada_Task_Control_Block (Entry_Num : Task_Entry_Index) is limited record\n       Common : Common_ATCB;\n       --  The common part between various tasking implementations\n \n@@ -1179,10 +1179,9 @@ package System.Tasking is\n       T                : Task_Id;\n       Success          : out Boolean);\n    --  Initialize fields of the TCB for task T, and link into global TCB\n-   --  structures. Call this only with abort deferred and holding\n-   --  RTS_Lock. Self_ID is the calling task (normally the activator of\n-   --  T). Success is set to indicate whether the TCB was successfully\n-   --  initialized. Need more documentation ???\n+   --  structures. Call this only with abort deferred and holding RTS_Lock.\n+   --  Self_ID is the calling task (normally the activator of T). Success is\n+   --  set to indicate whether the TCB was successfully initialized.\n \n private\n "}, {"sha": "a6adf196dcd5e565dafbac5ceb05fa5b201e46eb", "filename": "gcc/ada/s-taspri-dummy.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2Fs-taspri-dummy.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2Fs-taspri-dummy.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-dummy.ads?ref=ddce04b8b9370d128bc890e27de8888c84250c5b", "patch": "@@ -46,7 +46,7 @@ package System.Task_Primitives is\n \n    type Task_Body_Access is access procedure;\n \n-   type Private_Data is record\n+   type Private_Data is limited record\n       Thread : aliased Integer;\n       CV     : aliased Integer;\n       L      : aliased RTS_Lock;"}, {"sha": "64b115f339384fc7f3dc42d9c45afeda1961c6e0", "filename": "gcc/ada/s-taspri-mingw.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2Fs-taspri-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2Fs-taspri-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-mingw.ads?ref=ddce04b8b9370d128bc890e27de8888c84250c5b", "patch": "@@ -97,7 +97,7 @@ private\n       --  Condition variable used to queue threads until condition is signaled\n    end record;\n \n-   type Private_Data is record\n+   type Private_Data is limited record\n       Thread : aliased Win32.HANDLE;\n       pragma Atomic (Thread);\n       --  Thread field may be updated by two different threads of control."}, {"sha": "aadcfbf5bfe86a87f181794fac5256fb5501bca4", "filename": "gcc/ada/s-taspri-posix-noaltstack.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2Fs-taspri-posix-noaltstack.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2Fs-taspri-posix-noaltstack.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-posix-noaltstack.ads?ref=ddce04b8b9370d128bc890e27de8888c84250c5b", "patch": "@@ -97,7 +97,7 @@ private\n       --  Condition variable used to queue threads until condition is signaled\n    end record;\n \n-   type Private_Data is record\n+   type Private_Data is limited record\n       Thread : aliased System.OS_Interface.pthread_t;\n       pragma Atomic (Thread);\n       --  Thread field may be updated by two different threads of control."}, {"sha": "a492a1782e82af78fcb617aa8a3d0fb911ff256b", "filename": "gcc/ada/s-taspri-posix.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2Fs-taspri-posix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2Fs-taspri-posix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-posix.ads?ref=ddce04b8b9370d128bc890e27de8888c84250c5b", "patch": "@@ -96,7 +96,7 @@ private\n       --  Condition variable used to queue threads until condition is signaled\n    end record;\n \n-   type Private_Data is record\n+   type Private_Data is limited record\n       Thread : aliased System.OS_Interface.pthread_t;\n       pragma Atomic (Thread);\n       --  Thread field may be updated by two different threads of control."}, {"sha": "1d5c7dba83897cd733b9d6b5651d67429df774ca", "filename": "gcc/ada/s-taspri-solaris.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2Fs-taspri-solaris.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2Fs-taspri-solaris.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-solaris.ads?ref=ddce04b8b9370d128bc890e27de8888c84250c5b", "patch": "@@ -124,7 +124,7 @@ private\n    --  Note that task support on gdb relies on the fact that the first two\n    --  fields of Private_Data are Thread and LWP.\n \n-   type Private_Data is record\n+   type Private_Data is limited record\n       Thread : aliased System.OS_Interface.thread_t;\n       pragma Atomic (Thread);\n       --  Thread field may be updated by two different threads of control."}, {"sha": "833bf9822f242f350a5d857f2e5055e2b03e38b5", "filename": "gcc/ada/s-taspri-vxworks.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2Fs-taspri-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2Fs-taspri-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-vxworks.ads?ref=ddce04b8b9370d128bc890e27de8888c84250c5b", "patch": "@@ -98,7 +98,7 @@ private\n       --  Condition variable used to queue threads until condition is signaled\n    end record;\n \n-   type Private_Data is record\n+   type Private_Data is limited record\n       Thread : aliased System.OS_Interface.t_id := 0;\n       pragma Atomic (Thread);\n       --  Thread field may be updated by two different threads of control."}, {"sha": "9f9383a2e1d504616279ce83eeb611672148c2bf", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=ddce04b8b9370d128bc890e27de8888c84250c5b", "patch": "@@ -662,18 +662,6 @@ package body System.Tasking.Stages is\n          T.Common.Task_Image_Len := Len;\n       end if;\n \n-      --  The task inherits the dispatching domain of the parent only if no\n-      --  specific domain has been defined in the spec of the task (using the\n-      --  dispatching domain pragma or aspect).\n-\n-      if T.Common.Domain /= null then\n-         null;\n-      elsif T.Common.Activator /= null then\n-         T.Common.Domain := T.Common.Activator.Common.Domain;\n-      else\n-         T.Common.Domain := System.Tasking.System_Domain;\n-      end if;\n-\n       Unlock (Self_ID);\n       Unlock_RTS;\n "}, {"sha": "18048bc5a35b06c946946d320199dff375d2a9cd", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 46, "deletions": 18, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddce04b8b9370d128bc890e27de8888c84250c5b/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=ddce04b8b9370d128bc890e27de8888c84250c5b", "patch": "@@ -13125,7 +13125,9 @@ package body Sem_Prag is\n             Citem : Node_Id;\n \n          begin\n-            SPARK_Msg_N (\"pragma Elaborate not allowed\", N);\n+            if SPARK_Mode = On then\n+               Error_Msg_N (\"pragma Elaborate not allowed in SPARK mode\", N);\n+            end if;\n \n             --  Pragma must be in context items list of a compilation unit\n \n@@ -13207,7 +13209,15 @@ package body Sem_Prag is\n             --  Give a warning if operating in static mode with one of the\n             --  gnatwl/-gnatwE (elaboration warnings enabled) switches set.\n \n-            if Elab_Warnings and not Dynamic_Elaboration_Checks then\n+            if Elab_Warnings\n+                 and not Dynamic_Elaboration_Checks\n+\n+                 --  pragma Elaborate not allowed in SPARK mode anyway. We\n+                 --  already complained about it, no point in generating any\n+                 --  further complaint.\n+\n+                 and SPARK_Mode /= On\n+            then\n                Error_Msg_N\n                  (\"?l?use of pragma Elaborate may not be safe\", N);\n                Error_Msg_N\n@@ -13343,8 +13353,13 @@ package body Sem_Prag is\n             GNAT_Pragma;\n             Check_Arg_Count (1);\n             Check_Arg_Is_One_Of (Arg1, Name_Static, Name_Dynamic);\n+\n+            --  Set flag accordingly (ignore attempt at dynamic elaboration\n+            --  checks in SPARK mode).\n+\n             Dynamic_Elaboration_Checks :=\n-              (Chars (Get_Pragma_Arg (Arg1)) = Name_Dynamic);\n+              (Chars (Get_Pragma_Arg (Arg1)) = Name_Dynamic)\n+                and then SPARK_Mode /= On;\n \n          ---------------\n          -- Eliminate --\n@@ -19541,6 +19556,8 @@ package body Sem_Prag is\n          --  pragma SPARK_Mode [(On | Off)];\n \n          when Pragma_SPARK_Mode => Do_SPARK_Mode : declare\n+            Mode_Id : SPARK_Mode_Type;\n+\n             procedure Check_Pragma_Conformance\n               (Context_Pragma : Node_Id;\n                Entity_Pragma  : Node_Id;\n@@ -19565,6 +19582,11 @@ package body Sem_Prag is\n             procedure Check_Library_Level_Entity (E : Entity_Id);\n             --  Verify that pragma is applied to library-level entity E\n \n+            procedure Set_SPARK_Flags;\n+            --  Sets SPARK_Mode from Mode_Id and SPARK_Mode_Pragma from N,\n+            --  and ensures that Dynamic_Elaboration_Checks are off if the\n+            --  call sets SPARK_Mode On.\n+\n             ------------------------------\n             -- Check_Pragma_Conformance --\n             ------------------------------\n@@ -19642,12 +19664,25 @@ package body Sem_Prag is\n                end if;\n             end Check_Library_Level_Entity;\n \n+            ---------------------\n+            -- Set_SPARK_Flags --\n+            ---------------------\n+\n+            procedure Set_SPARK_Flags is\n+            begin\n+               SPARK_Mode := Mode_Id;\n+               SPARK_Mode_Pragma := N;\n+\n+               if SPARK_Mode = On then\n+                  Dynamic_Elaboration_Checks := False;\n+               end if;\n+            end Set_SPARK_Flags;\n+\n             --  Local variables\n \n             Body_Id : Entity_Id;\n             Context : Node_Id;\n             Mode    : Name_Id;\n-            Mode_Id : SPARK_Mode_Type;\n             Spec_Id : Entity_Id;\n             Stmt    : Node_Id;\n \n@@ -19691,8 +19726,7 @@ package body Sem_Prag is\n                   raise Pragma_Exit;\n                end if;\n \n-               SPARK_Mode_Pragma := N;\n-               SPARK_Mode := Mode_Id;\n+               Set_SPARK_Flags;\n \n             --  The pragma acts as a configuration pragma in a compilation unit\n \n@@ -19703,8 +19737,7 @@ package body Sem_Prag is\n               and then List_Containing (N) = Context_Items (Context)\n             then\n                Check_Valid_Configuration_Pragma;\n-               SPARK_Mode_Pragma := N;\n-               SPARK_Mode := Mode_Id;\n+               Set_SPARK_Flags;\n \n             --  Otherwise the placement of the pragma within the tree dictates\n             --  its associated construct. Inspect the declarative list where\n@@ -19789,8 +19822,7 @@ package body Sem_Prag is\n                        (Context_Pragma => SPARK_Pragma (Spec_Id),\n                         Entity_Pragma  => Empty,\n                         Entity         => Empty);\n-                     SPARK_Mode_Pragma := N;\n-                     SPARK_Mode := Mode_Id;\n+                     Set_SPARK_Flags;\n \n                      Set_SPARK_Pragma               (Spec_Id, N);\n                      Set_SPARK_Pragma_Inherited     (Spec_Id, False);\n@@ -19808,8 +19840,7 @@ package body Sem_Prag is\n                        (Context_Pragma => Empty,\n                         Entity_Pragma  => SPARK_Pragma (Spec_Id),\n                         Entity         => Spec_Id);\n-                     SPARK_Mode_Pragma := N;\n-                     SPARK_Mode := Mode_Id;\n+                     Set_SPARK_Flags;\n \n                      Set_SPARK_Aux_Pragma           (Spec_Id, N);\n                      Set_SPARK_Aux_Pragma_Inherited (Spec_Id, False);\n@@ -19828,8 +19859,7 @@ package body Sem_Prag is\n                     (Context_Pragma => SPARK_Pragma (Body_Id),\n                      Entity_Pragma  => SPARK_Aux_Pragma (Spec_Id),\n                      Entity         => Spec_Id);\n-                  SPARK_Mode_Pragma := N;\n-                  SPARK_Mode := Mode_Id;\n+                  Set_SPARK_Flags;\n \n                   Set_SPARK_Pragma               (Body_Id, N);\n                   Set_SPARK_Pragma_Inherited     (Body_Id, False);\n@@ -19853,8 +19883,7 @@ package body Sem_Prag is\n                     (Context_Pragma => Empty,\n                      Entity_Pragma  => SPARK_Pragma (Body_Id),\n                      Entity         => Body_Id);\n-                  SPARK_Mode_Pragma := N;\n-                  SPARK_Mode := Mode_Id;\n+                  Set_SPARK_Flags;\n \n                   Set_SPARK_Aux_Pragma           (Body_Id, N);\n                   Set_SPARK_Aux_Pragma_Inherited (Body_Id, False);\n@@ -19916,8 +19945,7 @@ package body Sem_Prag is\n                         Entity         => Empty);\n                   end if;\n \n-                  SPARK_Mode_Pragma := N;\n-                  SPARK_Mode := Mode_Id;\n+                  Set_SPARK_Flags;\n \n                   Set_SPARK_Pragma           (Body_Id, N);\n                   Set_SPARK_Pragma_Inherited (Body_Id, False);"}]}