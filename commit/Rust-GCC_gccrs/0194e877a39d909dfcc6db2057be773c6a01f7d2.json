{"sha": "0194e877a39d909dfcc6db2057be773c6a01f7d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE5NGU4NzdhMzlkOTA5ZGZjYzZkYjIwNTdiZTc3M2M2YTAxZjdkMg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-03-29T19:04:54Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-03-29T19:04:54Z"}, "message": "hashtab.c (htab_find_with_hash): Avoid calculating hash2 unless it will be used.\n\n\t* hashtab.c (htab_find_with_hash): Avoid calculating hash2\n\tunless it will be used.  Rearrange loop for better\n\toptimization.\n\t(higher_prime_number): Add static prototype.\n\nFrom-SVN: r32809", "tree": {"sha": "247bd51960c392c1e23b694da85800874dffe326", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/247bd51960c392c1e23b694da85800874dffe326"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0194e877a39d909dfcc6db2057be773c6a01f7d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0194e877a39d909dfcc6db2057be773c6a01f7d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0194e877a39d909dfcc6db2057be773c6a01f7d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0194e877a39d909dfcc6db2057be773c6a01f7d2/comments", "author": null, "committer": null, "parents": [{"sha": "c6b5cb46045d1383c60ec58a470a2cfcee4d0441", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b5cb46045d1383c60ec58a470a2cfcee4d0441", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6b5cb46045d1383c60ec58a470a2cfcee4d0441"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "42231a35b8f34f02af6c4af3c960584d53bf6702", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0194e877a39d909dfcc6db2057be773c6a01f7d2/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0194e877a39d909dfcc6db2057be773c6a01f7d2/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=0194e877a39d909dfcc6db2057be773c6a01f7d2", "patch": "@@ -1,3 +1,10 @@\n+2000-03-29  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* hashtab.c (htab_find_with_hash): Avoid calculating hash2\n+\tunless it will be used.  Rearrange loop for better\n+\toptimization.\n+\t(higher_prime_number): Add static prototype.\n+\n Thu Mar 16 01:33:58 2000  Jeffrey A Law  (law@cygnus.com)\n \n \t* Makefile.in (partition.o): Depend on config.h"}, {"sha": "027f75d12acbcd9abb0625675e028502926557de", "filename": "libiberty/hashtab.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0194e877a39d909dfcc6db2057be773c6a01f7d2/libiberty%2Fhashtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0194e877a39d909dfcc6db2057be773c6a01f7d2/libiberty%2Fhashtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fhashtab.c?ref=0194e877a39d909dfcc6db2057be773c6a01f7d2", "patch": "@@ -55,8 +55,10 @@ Boston, MA 02111-1307, USA.  */\n \n #define DELETED_ENTRY  ((void *) 1)\n \n+static unsigned long higher_prime_number PARAMS ((unsigned long));\n+\n /* The following function returns the nearest prime number which is\n-   greater than given source number. */\n+   greater than a given source number. */\n \n static unsigned long\n higher_prime_number (n)\n@@ -223,24 +225,30 @@ htab_find_with_hash (htab, element, hash)\n {\n   unsigned int index, hash2;\n   size_t size;\n+  void *entry;\n \n   htab->searches++;\n   size = htab->size;\n-  hash2 = 1 + hash % (size - 2);\n   index = hash % size;\n \n+  entry = htab->entries[index];\n+  if (entry == EMPTY_ENTRY\n+      || (entry != DELETED_ENTRY && (*htab->eq_f) (entry, element)))\n+    return entry;\n+\n+  hash2 = 1 + hash % (size - 2);\n+\n   for (;;)\n     {\n-      void *entry = htab->entries[index];\n-      if (entry == EMPTY_ENTRY)\n-\treturn NULL;\n-      else if (entry != DELETED_ENTRY && (*htab->eq_f) (entry, element))\n-\treturn entry;\n-\n       htab->collisions++;\n       index += hash2;\n       if (index >= size)\n \tindex -= size;\n+\n+      entry = htab->entries[index];\n+      if (entry == EMPTY_ENTRY\n+\t  || (entry != DELETED_ENTRY && (*htab->eq_f) (entry, element)))\n+\treturn entry;\n     }\n }\n "}]}