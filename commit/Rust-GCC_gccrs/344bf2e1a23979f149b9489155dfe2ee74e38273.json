{"sha": "344bf2e1a23979f149b9489155dfe2ee74e38273", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ0YmYyZTFhMjM5NzlmMTQ5Yjk0ODkxNTVkZmUyZWU3NGUzODI3Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-06-21T02:24:09Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-06-21T02:24:09Z"}, "message": "re PR c++/48138 (__attribute__((aligned)) should give an error when applied to a typedef or template parameter, at least in C++0x mode.)\n\n\tPR c++/48138\n\t* pt.c (canonicalize_type_argument): New.\n\t(convert_template_argument, unify): Use it.\n\nFrom-SVN: r175236", "tree": {"sha": "14b2e8dd4ee3c89d225f748b1742d9e16a52cabe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14b2e8dd4ee3c89d225f748b1742d9e16a52cabe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/344bf2e1a23979f149b9489155dfe2ee74e38273", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/344bf2e1a23979f149b9489155dfe2ee74e38273", "html_url": "https://github.com/Rust-GCC/gccrs/commit/344bf2e1a23979f149b9489155dfe2ee74e38273", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/344bf2e1a23979f149b9489155dfe2ee74e38273/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7bd161189862841d30c84c4d6bb5c251869adeef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bd161189862841d30c84c4d6bb5c251869adeef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bd161189862841d30c84c4d6bb5c251869adeef"}], "stats": {"total": 50, "additions": 41, "deletions": 9}, "files": [{"sha": "6b84111ae1a844bf161a7be4aaeea15a03edb7c6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/344bf2e1a23979f149b9489155dfe2ee74e38273/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/344bf2e1a23979f149b9489155dfe2ee74e38273/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=344bf2e1a23979f149b9489155dfe2ee74e38273", "patch": "@@ -1,5 +1,9 @@\n 2011-06-20  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/48138\n+\t* pt.c (canonicalize_type_argument): New.\n+\t(convert_template_argument, unify): Use it.\n+\n \tPR c++/47080\n \t* call.c (rejection_reason_code): Add rr_explicit_conversion.\n \t(print_z_candidate): Handle it."}, {"sha": "4d2caa883078ba45c9486011d7e58dea18a26bb7", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/344bf2e1a23979f149b9489155dfe2ee74e38273/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/344bf2e1a23979f149b9489155dfe2ee74e38273/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=344bf2e1a23979f149b9489155dfe2ee74e38273", "patch": "@@ -5916,6 +5916,28 @@ template_template_parm_bindings_ok_p (tree tparms, tree targs)\n   return ret;\n }\n \n+/* Since type attributes aren't mangled, we need to strip them from\n+   template type arguments.  */\n+\n+static tree\n+canonicalize_type_argument (tree arg, tsubst_flags_t complain)\n+{\n+  tree mv;\n+  if (!arg || arg == error_mark_node || arg == TYPE_CANONICAL (arg))\n+    return arg;\n+  mv = TYPE_MAIN_VARIANT (arg);\n+  arg = strip_typedefs (arg);\n+  if (TYPE_ALIGN (arg) != TYPE_ALIGN (mv)\n+      || TYPE_ATTRIBUTES (arg) != TYPE_ATTRIBUTES (mv))\n+    {\n+      if (complain & tf_warning)\n+\twarning (0, \"ignoring attributes on template argument %qT\", arg);\n+      arg = build_aligned_type (arg, TYPE_ALIGN (mv));\n+      arg = cp_build_type_attribute_variant (arg, TYPE_ATTRIBUTES (mv));\n+    }\n+  return arg;\n+}\n+\n /* Convert the indicated template ARG as necessary to match the\n    indicated template PARM.  Returns the converted ARG, or\n    error_mark_node if the conversion was unsuccessful.  Error and\n@@ -6092,7 +6114,7 @@ convert_template_argument (tree parm,\n \t the typedef, which is confusing if those future uses do not\n \t themselves also use the typedef.  */\n       if (TYPE_P (val))\n-\tval = strip_typedefs (val);\n+\tval = canonicalize_type_argument (val, complain);\n     }\n   else\n     {\n@@ -6136,8 +6158,9 @@ convert_template_argument (tree parm,\n       if (TREE_CODE (val) == SCOPE_REF)\n \t{\n \t  /* Strip typedefs from the SCOPE_REF.  */\n-\t  tree type = strip_typedefs (TREE_TYPE (val));\n-\t  tree scope = strip_typedefs (TREE_OPERAND (val, 0));\n+\t  tree type = canonicalize_type_argument (TREE_TYPE (val), complain);\n+\t  tree scope = canonicalize_type_argument (TREE_OPERAND (val, 0),\n+\t\t\t\t\t\t   complain);\n \t  val = build_qualified_name (type, scope, TREE_OPERAND (val, 1),\n \t\t\t\t      QUALIFIED_NAME_IS_TEMPLATE (val));\n \t}\n@@ -15479,7 +15502,7 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict)\n \t    return 1;\n \n \t  /* Strip typedefs as in convert_template_argument.  */\n-\t  arg = strip_typedefs (arg);\n+\t  arg = canonicalize_type_argument (arg, tf_none);\n \t}\n \n       /* If ARG is a parameter pack or an expansion, we cannot unify"}, {"sha": "c8ec07d5107a46be9bc61199a1b695f2731dd869", "filename": "gcc/testsuite/g++.dg/ext/attr-aligned01.C", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/344bf2e1a23979f149b9489155dfe2ee74e38273/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-aligned01.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/344bf2e1a23979f149b9489155dfe2ee74e38273/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-aligned01.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-aligned01.C?ref=344bf2e1a23979f149b9489155dfe2ee74e38273", "patch": "@@ -1,20 +1,25 @@\n // PR c++/48138\n-// { dg-options -std=c++0x }\n \n #define ALIGNED(x) __attribute__((aligned(x)))\n-#define SA(X) static_assert ((X),#X)\n+#define SA(X) int ar[(X)?1:-1];\n \n template<typename T>\n void type_alignment(const T&) {\n   struct { char c; T t; } s;\n-  SA((char*)&s.t - (char*)&s.c == 8);\n+  SA((char*)&s.t - (char*)&s.c == 1);\n }\n \n+template <class T> struct A { char c; T t; };\n+\n int main() {\n   typedef char unaligned[15];\n   typedef char aligned[15] ALIGNED(8);\n \n+  A<aligned> a;\t\t\t// { dg-warning \"ignoring attributes\" }\n+\n+  SA((char*)&a.t - (char*)&a.c == 1);\n+\n   aligned z;\n-  type_alignment(z);\n-  type_alignment<unaligned ALIGNED(8)>(z);\n+  type_alignment(z);\t\t// { dg-warning \"ignoring attributes\" \"\" { xfail *-*-* } }\n+  type_alignment<unaligned ALIGNED(8)>(z); // { dg-warning \"ignoring attributes\" \"\" { xfail *-*-* } }\n }"}]}