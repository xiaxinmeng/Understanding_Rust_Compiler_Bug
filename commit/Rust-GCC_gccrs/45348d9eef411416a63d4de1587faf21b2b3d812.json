{"sha": "45348d9eef411416a63d4de1587faf21b2b3d812", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUzNDhkOWVlZjQxMTQxNmE2M2Q0ZGUxNTg3ZmFmMjFiMmIzZDgxMg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-01-18T22:37:48Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-01-18T22:37:48Z"}, "message": "(cpu, movsi_i, movsf_i, blt, bge, sle, sge): Add SH3E support.\n\n(cpu, movsi_i, movsf_i, blt, bge, sle, sge): Add SH3E\nsupport.\n(push_e, pop_e, movsi_ie, movsf_ie, addsf3, subsf3, mulsf3, macsf3,\ndivsf3, floatsisf2, fix_truncsfsi2, cmpgtsf_t, cmpqesf_t, cmpsf,\nnegsf2, sqrtsf2, abssf2): New patterns.\n(abssf2+9, abssf2+10): Add SH3e support to peepholes\n(abssf2+11, abssf2+12): New peepholes for SH3e.\n\nFrom-SVN: r11065", "tree": {"sha": "3ff805588c5c6567de97f6e0f060899ed459a84e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ff805588c5c6567de97f6e0f060899ed459a84e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45348d9eef411416a63d4de1587faf21b2b3d812", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45348d9eef411416a63d4de1587faf21b2b3d812", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45348d9eef411416a63d4de1587faf21b2b3d812", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45348d9eef411416a63d4de1587faf21b2b3d812/comments", "author": null, "committer": null, "parents": [{"sha": "47fd14f4dfebde589696dd546f81b024206cc489", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47fd14f4dfebde589696dd546f81b024206cc489", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47fd14f4dfebde589696dd546f81b024206cc489"}], "stats": {"total": 307, "additions": 296, "deletions": 11}, "files": [{"sha": "908d5c2b3086bad9d22faf73e056bb84515f6782", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 296, "deletions": 11, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45348d9eef411416a63d4de1587faf21b2b3d812/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45348d9eef411416a63d4de1587faf21b2b3d812/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=45348d9eef411416a63d4de1587faf21b2b3d812", "patch": "@@ -73,7 +73,7 @@\n \n ;; Target CPU.\n \n-(define_attr \"cpu\" \"sh0,sh1,sh2,sh3\"\n+(define_attr \"cpu\" \"sh0,sh1,sh2,sh3,sh3e\"\n   (const (symbol_ref \"sh_cpu_attr\")))\n \n ;; cbranch\tconditional branch instructions\n@@ -142,6 +142,8 @@\n (define_function_unit \"mpy\"    1 0 (eq_attr \"type\" \"smpy\") 2 2)\n (define_function_unit \"mpy\"    1 0 (eq_attr \"type\" \"dmpy\") 3 3)\n \n+;; ??? Must define SH3E function units.\n+\n ; Definitions for filling branch delay slots.\n \n (define_attr \"needs_delay_slot\" \"yes,no\" (const_string \"no\"))\n@@ -1130,6 +1132,28 @@\n   [(set_attr \"type\" \"load,pload,load\")\n    (set_attr \"hit_stack\" \"yes\")])\n \n+(define_insn \"push_e\"\n+  [(set (mem:SF (pre_dec:SI (reg:SI 15)))\n+\t(match_operand:SF 0 \"register_operand\" \"r,f,y\"))]\n+  \"\"\n+  \"@\n+\tmov.l\t%0,@-r15\n+\tfmov.s\t%0,@-r15\n+\tsts.l\t%0,@-r15\"\n+  [(set_attr \"type\" \"store\")\n+   (set_attr \"hit_stack\" \"yes\")])\n+\n+(define_insn \"pop_e\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=r,f,y\")\n+\t(mem:SF (post_inc:SI (reg:SI 15))))]\n+  \"\"\n+  \"@\n+\tmov.l\t@r15+,%0\n+\tfmov.s\t@r15+,%0\n+\tlds.l\t@r15+,%0\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"hit_stack\" \"yes\")])\n+\n ;; These two patterns can happen as the result of optimization, when\n ;; comparisons get simplified to a move of zero or 1 into the T reg.\n ;; They don't disappear completely, because the T reg is a fixed hard reg.\n@@ -1149,8 +1173,10 @@\n (define_insn \"movsi_i\"\n   [(set (match_operand:SI 0 \"general_movdst_operand\" \"=t,r,r,r,r,r,m,<,xl,xl,r\")\n \t(match_operand:SI 1 \"general_movsrc_operand\" \"z,Q,rI,m,xl,t,r,xl,r,>,i\"))]\n-  \"register_operand (operands[0], SImode)\n-   || register_operand (operands[1], SImode)\"\n+  \"\n+   ! TARGET_SH3E &&\n+   (register_operand (operands[0], SImode)\n+    || register_operand (operands[1], SImode))\"\n   \"@\n \ttst\t%1,%1\\;rotcl\t%1\\;xor\t#1,%1\\;rotcr\t%1\n \tmov.l\t%1,%0\n@@ -1166,6 +1192,33 @@\n   [(set_attr \"type\" \"move,pcload,move,load,move,store,store,move,load,move,move\")\n    (set_attr \"length\" \"8,*,*,*,*,*,*,*,*,*,*\")])\n \n+;; t/z is first, so that it will be preferred over r/r when reloading a move\n+;; of a pseudo-reg into the T reg\n+;; ??? This allows moves from macl to fpul to be recognized, but these moves\n+;; will require a reload.\n+(define_insn \"movsi_ie\"\n+  [(set (match_operand:SI 0 \"general_movdst_operand\" \"=t,r,r,r,r,r,m,<,xl,xl,r,y,r\")\n+\t(match_operand:SI 1 \"general_movsrc_operand\" \"z,Q,rI,m,xl,t,r,xl,r,>,i,r,y\"))]\n+  \"TARGET_SH3E\n+   && (register_operand (operands[0], SImode)\n+       || register_operand (operands[1], SImode))\"\n+  \"@\n+\ttst\t%1,%1\\;rotcl\t%1\\;xor\t#1,%1\\;rotcr\t%1\n+\tmov.l\t%1,%0\n+\tmov\t%1,%0\n+\tmov.l\t%1,%0\n+\tsts\t%1,%0\n+\tmovt\t%0\n+\tmov.l\t%1,%0\n+\tsts.l\t%1,%0\n+\tlds\t%1,%0\n+\tlds.l\t%1,%0\n+\tfake\t%1,%0\n+\tlds\t%1,%0\n+\tsts\t%1,%0\"\n+  [(set_attr \"type\" \"move,pcload,move,load,move,store,store,move,load,move,move,move,move\")\n+   (set_attr \"length\" \"8,*,*,*,*,*,*,*,*,*,*,*,*\")])\n+\n (define_expand \"movsi\"\n   [(set (match_operand:SI 0 \"general_movdst_operand\" \"\")\n \t(match_operand:SI 1 \"general_movsrc_operand\" \"\"))]\n@@ -1345,8 +1398,10 @@\n (define_insn \"movsf_i\"\n   [(set (match_operand:SF 0 \"general_movdst_operand\" \"=r,r,r,m,l,r\")\n \t(match_operand:SF 1 \"general_movsrc_operand\"  \"r,I,m,r,r,l\"))]\n-  \"arith_reg_operand (operands[0], SFmode)\n-   || arith_reg_operand (operands[1], SFmode)\"\n+  \"\n+   ! TARGET_SH3E &&\n+   (arith_reg_operand (operands[0], SFmode)\n+    || arith_reg_operand (operands[1], SFmode))\"\n   \"@\n \tmov\t%1,%0\n \tmov\t%1,%0\n@@ -1356,6 +1411,26 @@\n \tsts\t%1,%0\"\n   [(set_attr \"type\" \"move,move,load,store,move,move\")])\n \n+(define_insn \"movsf_ie\"\n+  [(set (match_operand:SF 0 \"general_movdst_operand\" \"=f,r,f,f,f,m,r,m,!r,!f\")\n+\t(match_operand:SF 1 \"general_movsrc_operand\"  \"f,r,G,H,m,f,m,r,f,r\"))]\n+  \"TARGET_SH3E\n+   && (arith_reg_operand (operands[0], SFmode)\n+       || arith_reg_operand (operands[1], SFmode))\"\n+  \"@\n+\tfmov\t%1,%0\n+\tmov\t%1,%0\n+\tfldi0\t%0\n+\tfldi1\t%0\n+\tfmov.s\t%1,%0\n+\tfmov.s\t%1,%0\n+\tmov.l\t%1,%0\n+\tmov.l\t%1,%0\n+\tflds\t%1,fpul\\;sts\tfpul,%0\n+\tlds\t%1,fpul\\;fsts\tfpul,%0\"\n+  [(set_attr \"type\" \"move,move,move,move,load,store,load,store,move,move\")\n+   (set_attr \"length\" \"*,*,*,*,*,*,*,*,4,4\")])\n+\n (define_expand \"movsf\"\n   [(set (match_operand:SF 0 \"general_movdst_operand\" \"\")\n \t(match_operand:SF 1 \"general_movsrc_operand\" \"\"))]\n@@ -1436,7 +1511,18 @@\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n-  \"from_compare (operands, LT);\")\n+  \"\n+{\n+  if (GET_MODE (sh_compare_op0) == SFmode)\n+    {\n+      rtx tmp = sh_compare_op0;\n+      sh_compare_op0 = sh_compare_op1;\n+      sh_compare_op1 = tmp;\n+      emit_insn (gen_bgt (operands[0]));\n+      DONE;\n+    }\n+  from_compare (operands, LT);\n+}\")\n \n (define_expand \"ble\"\n   [(set (reg:SI 18) (gt:SI (match_dup 1) (match_dup 2)))\n@@ -1454,7 +1540,18 @@\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n-  \"from_compare (operands, GE);\")\n+  \"\n+{\n+  if (GET_MODE (sh_compare_op0) == SFmode)\n+    {\n+      rtx tmp = sh_compare_op0;\n+      sh_compare_op0 = sh_compare_op1;\n+      sh_compare_op1 = tmp;\n+      emit_insn (gen_ble (operands[0]));\n+      DONE;\n+    }\n+  from_compare (operands, GE);\n+}\")\n \n (define_expand \"bgtu\"\n   [(set (reg:SI 18) (gtu:SI (match_dup 1) (match_dup 2)))\n@@ -1691,7 +1788,16 @@\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n \t(match_dup 1))]\n   \"\"\n-  \"operands[1] = prepare_scc_operands (LE);\")\n+  \"\n+{\n+  if (GET_MODE (sh_compare_op0) == SFmode)\n+    {\n+      emit_insn (gen_sgt (operands[0]));\n+      emit_insn (gen_xorsi3 (operands[0], operands[0], const1_rtx));\n+      DONE;\n+    }\n+  operands[1] = prepare_scc_operands (LE);\n+}\")\n \n (define_expand \"sgt\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n@@ -1703,7 +1809,16 @@\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n \t(match_dup 1))]\n   \"\"\n-  \"operands[1] = prepare_scc_operands (GE);\")\n+  \"\n+{\n+  if (GET_MODE (sh_compare_op0) == SFmode)\n+    {\n+      emit_insn (gen_slt (operands[0]));\n+      emit_insn (gen_xorsi3 (operands[0], operands[0], const1_rtx));\n+      DONE;\n+    }\n+  operands[1] = prepare_scc_operands (GE);\n+}\")\n \n (define_expand \"sgtu\"\n   [(set (match_operand:SI 0 \"arith_reg_operand\" \"\")\n@@ -1853,7 +1968,144 @@\n   \"jsr\t@%0%#\"\n   [(set_attr \"type\" \"sfunc\")\n    (set_attr \"needs_delay_slot\" \"yes\")])\n+\f\n+;; -------------------------------------------------------------------------\n+;; Floating point instructions.\n+;; -------------------------------------------------------------------------\n+\n+;; ??? All patterns should have a type attribute.\n+\n+(define_insn \"addsf3\"\n+  [(set (match_operand:SF 0 \"arith_reg_operand\" \"=f\")\n+\t(plus:SF (match_operand:SF 1 \"arith_reg_operand\" \"%0\")\n+\t\t (match_operand:SF 2 \"arith_reg_operand\" \"f\")))]\n+  \"TARGET_SH3E\"\n+  \"fadd\t%2,%0\")\n+\n+(define_insn \"subsf3\"\n+  [(set (match_operand:SF 0 \"arith_reg_operand\" \"=f\")\n+\t(minus:SF (match_operand:SF 1 \"arith_reg_operand\" \"0\")\n+\t\t  (match_operand:SF 2 \"arith_reg_operand\" \"f\")))]\n+  \"TARGET_SH3E\"\n+  \"fsub\t%2,%0\")\n+\n+(define_insn \"mulsf3\"\n+  [(set (match_operand:SF 0 \"arith_reg_operand\" \"=f\")\n+\t(mult:SF (match_operand:SF 1 \"arith_reg_operand\" \"%0\")\n+\t\t (match_operand:SF 2 \"arith_reg_operand\" \"f\")))]\n+  \"TARGET_SH3E\"\n+  \"fmul\t%2,%0\")\n+\n+(define_insn \"*macsf3\"\n+  [(set (match_operand:SF 0 \"arith_reg_operand\" \"=f\")\n+\t(plus:SF (mult:SF (match_operand:SF 1 \"arith_reg_operand\" \"%w\")\n+\t\t\t  (match_operand:SF 2 \"arith_reg_operand\" \"f\"))\n+\t\t (match_operand:SF 3 \"arith_reg_operand\" \"0\")))]\n+  \"TARGET_SH3E\"\n+  \"fmac\tfr0,%2,%0\")\n+\n+(define_insn \"divsf3\"\n+  [(set (match_operand:SF 0 \"arith_reg_operand\" \"=f\")\n+\t(div:SF (match_operand:SF 1 \"arith_reg_operand\" \"0\")\n+\t\t(match_operand:SF 2 \"arith_reg_operand\" \"f\")))]\n+  \"TARGET_SH3E\"\n+  \"fdiv\t%2,%0\")\n+\n+;; ??? This is the right solution, but it fails because the movs[if] patterns\n+;; silently clobber FPUL (r22) for int<->fp moves.  Thus we can not explicitly\n+;; use FPUL here.\n+;;\n+;;(define_expand \"floatsisf2\"\n+;;  [(set (reg:SI 22)\n+;;\t(match_operand:SI 1 \"arith_reg_operand\" \"\"))\n+;;   (set (match_operand:SF 0 \"arith_reg_operand\" \"\")\n+;;        (float:SF (reg:SI 22)))]\n+;;  \"TARGET_SH3E\"\n+;;  \"\")\n+;;\n+;;(define_insn \"*floatsisf\"\n+;;  [(set (match_operand:SF 0 \"arith_reg_operand\" \"=f\")\n+;;\t(float:SF (reg:SI 22)))]\n+;;  \"TARGET_SH3E\"\n+;;  \"float\tfpul,%0\")\n+\n+(define_insn \"floatsisf2\"\n+  [(set (match_operand:SF 0 \"arith_reg_operand\" \"=f\")\n+\t(float:SF (match_operand:SI 1 \"arith_reg_operand\" \"r\")))]\n+  \"TARGET_SH3E\"\n+  \"lds\t%1,fpul\\;float\tfpul,%0\"\n+  [(set_attr \"length\" \"4\")])\n+\n+;; ??? This is the right solution, but it fails because the movs[if] patterns\n+;; silently clobber FPUL (r22) for int<->fp moves.  Thus we can not explicitly\n+;; use FPUL here.\n+;;\n+;;(define_expand \"fix_truncsfsi2\"\n+;;  [(set (reg:SI 22)\n+;;\t(fix:SI (match_operand:SF 1 \"arith_reg_operand\" \"f\")))\n+;;   (set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n+;;\t(reg:SI 22))]\n+;;  \"TARGET_SH3E\"\n+;;  \"\")\n+;;\n+;;(define_insn \"*fixsfsi\"\n+;;  [(set (reg:SI 22)\n+;;\t(fix:SI (match_operand:SF 0 \"arith_reg_operand\" \"f\")))]\n+;;  \"TARGET_SH3E\"\n+;;  \"ftrc\t%0,fpul\")\n+\n+(define_insn \"fix_truncsfsi2\"\n+  [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n+\t(fix:SI (match_operand:SF 1 \"arith_reg_operand\" \"f\")))]\n+  \"TARGET_SH3E\"\n+  \"ftrc\t%1,fpul\\;sts\tfpul,%0\"\n+  [(set_attr \"length\" \"4\")])\n+\n+;; ??? This should be SFmode not SImode in the compare, but that would\n+;; require fixing the branch patterns too.\n+(define_insn \"*cmpgtsf_t\"\n+  [(set (reg:SI 18) (gt:SI (match_operand:SF 0 \"arith_reg_operand\" \"f\")\n+\t\t\t   (match_operand:SF 1 \"arith_reg_operand\" \"f\")))]\n+  \"TARGET_SH3E\"\n+  \"fcmp/gt\t%1,%0\")\n+\n+;; ??? This should be SFmode not SImode in the compare, but that would\n+;; require fixing the branch patterns too.\n+(define_insn \"*cmpeqsf_t\"\n+  [(set (reg:SI 18) (eq:SI (match_operand:SF 0 \"arith_reg_operand\" \"f\")\n+\t\t\t   (match_operand:SF 1 \"arith_reg_operand\" \"f\")))]\n+  \"TARGET_SH3E\"\n+  \"fcmp/eq\t%1,%0\")\n+\n+(define_expand \"cmpsf\"\n+  [(set (reg:SI 18) (compare (match_operand:SF 0 \"arith_operand\" \"\")\n+\t\t\t     (match_operand:SF 1 \"arith_operand\" \"\")))]\n+  \"TARGET_SH3E\"\n+  \"\n+{\n+  sh_compare_op0 = operands[0];\n+  sh_compare_op1 = operands[1];\n+  DONE;\n+}\")\n \n+(define_insn \"negsf2\"\n+  [(set (match_operand:SF 0 \"arith_reg_operand\" \"=f\")\n+\t(neg:SF (match_operand:SF 1 \"arith_reg_operand\" \"0\")))]\n+  \"TARGET_SH3E\"\n+  \"fneg\t%0\")\n+\n+(define_insn \"sqrtsf2\"\n+  [(set (match_operand:SF 0 \"arith_reg_operand\" \"=f\")\n+\t(sqrt:DF (match_operand:SF 1 \"arith_reg_operand\" \"0\")))]\n+  \"TARGET_SH3E\"\n+  \"fsqrt\t%0\")\n+\n+(define_insn \"abssf2\"\n+  [(set (match_operand:SF 0 \"arith_reg_operand\" \"=f\")\n+\t(abs:SF (match_operand:SF 1 \"arith_reg_operand\" \"0\")))]\n+  \"TARGET_SH3E\"\n+  \"fabs\t%0\")\n+\f\n ;; -------------------------------------------------------------------------\n ;; Peepholes\n ;; -------------------------------------------------------------------------\n@@ -1949,7 +2201,11 @@\n \t(plus:SI (match_dup 0) (match_operand:SI 1 \"register_operand\" \"r\")))\n    (set (mem:SF (match_dup 0))\n \t(match_operand:SF 2 \"general_movsrc_operand\" \"\"))]\n-  \"REGNO (operands[0]) == 0 && reg_unused_after (operands[0], insn)\"\n+  \"REGNO (operands[0]) == 0\n+   && ((GET_CODE (operands[2]) == REG && REGNO (operands[2]) < 16)\n+       || (GET_CODE (operands[2]) == SUBREG\n+\t   && REGNO (SUBREG_REG (operands[2])) < 16))\n+   && reg_unused_after (operands[0], insn)\"\n   \"mov.l\t%2,@(%0,%1)\")\n \n (define_peephole\n@@ -1958,5 +2214,34 @@\n    (set (match_operand:SF 2 \"general_movdst_operand\" \"\")\n \n \t(mem:SF (match_dup 0)))]\n-  \"REGNO (operands[0]) == 0 && reg_unused_after (operands[0], insn)\"\n+  \"REGNO (operands[0]) == 0\n+   && ((GET_CODE (operands[2]) == REG && REGNO (operands[2]) < 16)\n+       || (GET_CODE (operands[2]) == SUBREG\n+\t   && REGNO (SUBREG_REG (operands[2])) < 16))\n+   && reg_unused_after (operands[0], insn)\"\n   \"mov.l\t@(%0,%1),%2\")\n+\n+(define_peephole\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(plus:SI (match_dup 0) (match_operand:SI 1 \"register_operand\" \"r\")))\n+   (set (mem:SF (match_dup 0))\n+\t(match_operand:SF 2 \"general_movsrc_operand\" \"\"))]\n+  \"REGNO (operands[0]) == 0\n+   && ((GET_CODE (operands[2]) == REG && REGNO (operands[2]) >= FIRST_FP_REG)\n+       || (GET_CODE (operands[2]) == SUBREG\n+\t   && REGNO (SUBREG_REG (operands[2])) >= FIRST_FP_REG))\n+   && reg_unused_after (operands[0], insn)\"\n+  \"fmov.s\t%2,@(%0,%1)\")\n+\n+(define_peephole\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(plus:SI (match_dup 0) (match_operand:SI 1 \"register_operand\" \"r\")))\n+   (set (match_operand:SF 2 \"general_movdst_operand\" \"\")\n+\n+\t(mem:SF (match_dup 0)))]\n+  \"REGNO (operands[0]) == 0\n+   && ((GET_CODE (operands[2]) == REG && REGNO (operands[2]) >= FIRST_FP_REG)\n+       || (GET_CODE (operands[2]) == SUBREG\n+\t   && REGNO (SUBREG_REG (operands[2])) >= FIRST_FP_REG))\n+   && reg_unused_after (operands[0], insn)\"\n+  \"fmov.s\t@(%0,%1),%2\")"}]}