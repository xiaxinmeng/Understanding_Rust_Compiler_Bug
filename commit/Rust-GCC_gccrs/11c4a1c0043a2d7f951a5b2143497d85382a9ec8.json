{"sha": "11c4a1c0043a2d7f951a5b2143497d85382a9ec8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFjNGExYzAwNDNhMmQ3Zjk1MWE1YjIxNDM0OTdkODUzODJhOWVjOA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2010-12-28T19:33:40Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2010-12-28T19:33:40Z"}, "message": "Replace _rdrand_uXX with _rdrandXX_step.\n\ngcc/\n\n2010-12-28  H.J. Lu  <hongjiu.lu@intel.com>\n\t    Uros Bizjak  <ubizjak@gmail.com>\n\n\t* config/i386/i386-builtin-types.def (PUSHORT): New.\n\t(INT_FTYPE_PUSHORT): Likewise.\n\t(INT_FTYPE_PUNSIGNED): Likewise.\n\t(INT_FTYPE_PULONGLONG): Likewise.\n\tRemove \"DEF_FUNCTION_TYPE (UINT16)\".\n\n\t* config/i386/i386.c (ix86_builtins): Remove\n\tIX86_BUILTIN_RDRAND16, IX86_BUILTIN_RDRAND32 and\n\tIX86_BUILTIN_RDRAND64.  Add IX86_BUILTIN_RDRAND16_STEP,\n\tIX86_BUILTIN_RDRAND32_STEP and IX86_BUILTIN_RDRAND64_STEP.\n\t(bdesc_special_args): Remove IX86_BUILTIN_RDRAND16,\n\tIX86_BUILTIN_RDRAND32 and IX86_BUILTIN_RDRAND64.\n\t(ix86_init_mmx_sse_builtins): Handle IX86_BUILTIN_RDRAND16_STEP,\n\tIX86_BUILTIN_RDRAND32_STEP and IX86_BUILTIN_RDRAND64_STEP.\n\t(ix86_expand_builtin): Likewise.\n\t(ix86_expand_special_args_builtin): Remove UINT16_FTYPE_VOID.\n\n\t* config/i386/i386.md (UNSPEC_RDRAND): New.\n\t(UNSPECV_RDRAND): Removed.\n\t(rdrand<mode>): Likewise.\n\t(rdrand<mode>_1): Also set FLAGS_REG.  Replace UNSPECV_RDRAND\n\twith UNSPEC_RDRAND.\n\n\t* config/i386/immintrin.h (_rdrand_u16): Removed.\n\t(_rdrand_u32): Likewise.\n\t(_rdrand_u64): Likewise.\n\t(_rdrand16_step): New.\n\t(_rdrand32_step): Likewise.\n\t(_rdrand64_step): Likewise.\n\n\t* doc/extend.texi (__builtin_ia32_rdrand16): Removed.\n\t(__builtin_ia32_rdrand32): Likewise.\n\t(__builtin_ia32_rdrand64): Likewise.\n\t(__builtin_ia32_rdrand16_step): New.\n\t(__builtin_ia32_rdrand32_step): Likewise.\n\t(__builtin_ia32_rdrand64_step): Likewise.\n\ngcc/testsuite/\n\n2010-12-28  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* gcc.target/i386/rdrand-1.c: Updated.\n\t* gcc.target/i386/rdrand-2.c: Likewise.\n\t* gcc.target/i386/rdrand-3.c: Likewise.\n\nCo-Authored-By: Uros Bizjak <ubizjak@gmail.com>\n\nFrom-SVN: r168298", "tree": {"sha": "5d2b4d2beb50f10c77eca145bde298dcee52706c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d2b4d2beb50f10c77eca145bde298dcee52706c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11c4a1c0043a2d7f951a5b2143497d85382a9ec8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11c4a1c0043a2d7f951a5b2143497d85382a9ec8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11c4a1c0043a2d7f951a5b2143497d85382a9ec8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11c4a1c0043a2d7f951a5b2143497d85382a9ec8/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e8c2fb69aecfe3042ca2283c85a8f6af7f7a0f36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8c2fb69aecfe3042ca2283c85a8f6af7f7a0f36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8c2fb69aecfe3042ca2283c85a8f6af7f7a0f36"}], "stats": {"total": 212, "additions": 144, "deletions": 68}, "files": [{"sha": "71629faa0d842797c85770fc7b12e25c1127caac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11c4a1c0043a2d7f951a5b2143497d85382a9ec8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11c4a1c0043a2d7f951a5b2143497d85382a9ec8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11c4a1c0043a2d7f951a5b2143497d85382a9ec8", "patch": "@@ -1,3 +1,43 @@\n+2010-12-28  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386-builtin-types.def (PUSHORT): New.\n+\t(INT_FTYPE_PUSHORT): Likewise.\n+\t(INT_FTYPE_PUNSIGNED): Likewise.\n+\t(INT_FTYPE_PULONGLONG): Likewise.\n+\tRemove \"DEF_FUNCTION_TYPE (UINT16)\".\n+\n+\t* config/i386/i386.c (ix86_builtins): Remove\n+\tIX86_BUILTIN_RDRAND16, IX86_BUILTIN_RDRAND32 and\n+\tIX86_BUILTIN_RDRAND64.  Add IX86_BUILTIN_RDRAND16_STEP,\n+\tIX86_BUILTIN_RDRAND32_STEP and IX86_BUILTIN_RDRAND64_STEP.\n+\t(bdesc_special_args): Remove IX86_BUILTIN_RDRAND16,\n+\tIX86_BUILTIN_RDRAND32 and IX86_BUILTIN_RDRAND64.\n+\t(ix86_init_mmx_sse_builtins): Handle IX86_BUILTIN_RDRAND16_STEP,\n+\tIX86_BUILTIN_RDRAND32_STEP and IX86_BUILTIN_RDRAND64_STEP.\n+\t(ix86_expand_builtin): Likewise.\n+\t(ix86_expand_special_args_builtin): Remove UINT16_FTYPE_VOID.\n+\n+\t* config/i386/i386.md (UNSPEC_RDRAND): New.\n+\t(UNSPECV_RDRAND): Removed.\n+\t(rdrand<mode>): Likewise.\n+\t(rdrand<mode>_1): Also set FLAGS_REG.  Replace UNSPECV_RDRAND\n+\twith UNSPEC_RDRAND.\n+\n+\t* config/i386/immintrin.h (_rdrand_u16): Removed.\n+\t(_rdrand_u32): Likewise.\n+\t(_rdrand_u64): Likewise.\n+\t(_rdrand16_step): New.\n+\t(_rdrand32_step): Likewise.\n+\t(_rdrand64_step): Likewise.\n+\n+\t* doc/extend.texi (__builtin_ia32_rdrand16): Removed.\n+\t(__builtin_ia32_rdrand32): Likewise.\n+\t(__builtin_ia32_rdrand64): Likewise.\n+\t(__builtin_ia32_rdrand16_step): New.\n+\t(__builtin_ia32_rdrand32_step): Likewise.\n+\t(__builtin_ia32_rdrand64_step): Likewise.\n+\n 2010-12-28  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* Makefile.in (graphite.o): Add dependence on DIAGNOSTIC_H."}, {"sha": "079c8ec3659a6de2efa0f5c512b7ed340b4ad527", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11c4a1c0043a2d7f951a5b2143497d85382a9ec8/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11c4a1c0043a2d7f951a5b2143497d85382a9ec8/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=11c4a1c0043a2d7f951a5b2143497d85382a9ec8", "patch": "@@ -107,6 +107,7 @@ DEF_POINTER_TYPE (PCVOID, VOID, CONST)\n DEF_POINTER_TYPE (PVOID, VOID)\n DEF_POINTER_TYPE (PDOUBLE, DOUBLE)\n DEF_POINTER_TYPE (PFLOAT, FLOAT)\n+DEF_POINTER_TYPE (PUSHORT, USHORT)\n DEF_POINTER_TYPE (PINT, INT)\n DEF_POINTER_TYPE (PULONGLONG, ULONGLONG)\n DEF_POINTER_TYPE (PUNSIGNED, UNSIGNED)\n@@ -128,7 +129,6 @@ DEF_POINTER_TYPE (PCV8SF, V8SF, CONST)\n DEF_FUNCTION_TYPE (FLOAT128)\n DEF_FUNCTION_TYPE (UINT64)\n DEF_FUNCTION_TYPE (UNSIGNED)\n-DEF_FUNCTION_TYPE (UINT16)\n DEF_FUNCTION_TYPE (VOID)\n DEF_FUNCTION_TYPE (PVOID)\n \n@@ -203,6 +203,9 @@ DEF_FUNCTION_TYPE (VOID, PCVOID)\n DEF_FUNCTION_TYPE (VOID, PVOID)\n DEF_FUNCTION_TYPE (VOID, UINT64)\n DEF_FUNCTION_TYPE (VOID, UNSIGNED)\n+DEF_FUNCTION_TYPE (INT, PUSHORT)\n+DEF_FUNCTION_TYPE (INT, PUNSIGNED)\n+DEF_FUNCTION_TYPE (INT, PULONGLONG)\n \n DEF_FUNCTION_TYPE (DI, V2DI, INT)\n DEF_FUNCTION_TYPE (DOUBLE, V2DF, INT)"}, {"sha": "9156d89b15550c2988d385c58a61455023ba2f44", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 57, "deletions": 9, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11c4a1c0043a2d7f951a5b2143497d85382a9ec8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11c4a1c0043a2d7f951a5b2143497d85382a9ec8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=11c4a1c0043a2d7f951a5b2143497d85382a9ec8", "patch": "@@ -24142,9 +24142,9 @@ enum ix86_builtins\n   IX86_BUILTIN_WRGSBASE64,\n \n   /* RDRND instructions.  */\n-  IX86_BUILTIN_RDRAND16,\n-  IX86_BUILTIN_RDRAND32,\n-  IX86_BUILTIN_RDRAND64,\n+  IX86_BUILTIN_RDRAND16_STEP,\n+  IX86_BUILTIN_RDRAND32_STEP,\n+  IX86_BUILTIN_RDRAND64_STEP,\n \n   /* F16C instructions.  */\n   IX86_BUILTIN_CVTPH2PS,\n@@ -24435,11 +24435,6 @@ static const struct builtin_description bdesc_special_args[] =\n   { OPTION_MASK_ISA_FSGSBASE | OPTION_MASK_ISA_64BIT, CODE_FOR_wrfsbasedi, \"__builtin_ia32_wrfsbase64\", IX86_BUILTIN_WRFSBASE64, UNKNOWN, (int) VOID_FTYPE_UINT64 },\n   { OPTION_MASK_ISA_FSGSBASE | OPTION_MASK_ISA_64BIT, CODE_FOR_wrgsbasesi, \"__builtin_ia32_wrgsbase32\", IX86_BUILTIN_WRGSBASE32, UNKNOWN, (int) VOID_FTYPE_UNSIGNED },\n   { OPTION_MASK_ISA_FSGSBASE | OPTION_MASK_ISA_64BIT, CODE_FOR_wrgsbasedi, \"__builtin_ia32_wrgsbase64\", IX86_BUILTIN_WRGSBASE64, UNKNOWN, (int) VOID_FTYPE_UINT64 },\n-\n-  /* RDRND */\n-  { OPTION_MASK_ISA_RDRND, CODE_FOR_rdrandhi, \"__builtin_ia32_rdrand16\", IX86_BUILTIN_RDRAND16, UNKNOWN, (int) UINT16_FTYPE_VOID },\n-  { OPTION_MASK_ISA_RDRND, CODE_FOR_rdrandsi, \"__builtin_ia32_rdrand32\", IX86_BUILTIN_RDRAND32, UNKNOWN, (int) UNSIGNED_FTYPE_VOID },\n-  { OPTION_MASK_ISA_RDRND | OPTION_MASK_ISA_64BIT, CODE_FOR_rdranddi, \"__builtin_ia32_rdrand64\", IX86_BUILTIN_RDRAND64, UNKNOWN, (int) UINT64_FTYPE_VOID },\n };\n \n /* Builtins with variable number of arguments.  */\n@@ -25448,6 +25443,15 @@ ix86_init_mmx_sse_builtins (void)\n   def_builtin_const (OPTION_MASK_ISA_PCLMUL, \"__builtin_ia32_pclmulqdq128\",\n \t\t     V2DI_FTYPE_V2DI_V2DI_INT, IX86_BUILTIN_PCLMULQDQ128);\n \n+  /* RDRND */\n+  def_builtin (OPTION_MASK_ISA_RDRND, \"__builtin_ia32_rdrand16_step\",\n+\t       INT_FTYPE_PUSHORT, IX86_BUILTIN_RDRAND16_STEP);\n+  def_builtin (OPTION_MASK_ISA_RDRND, \"__builtin_ia32_rdrand32_step\",\n+\t       INT_FTYPE_PUNSIGNED, IX86_BUILTIN_RDRAND32_STEP);\n+  def_builtin (OPTION_MASK_ISA_RDRND | OPTION_MASK_ISA_64BIT,\n+\t       \"__builtin_ia32_rdrand64_step\", INT_FTYPE_PULONGLONG,\n+\t       IX86_BUILTIN_RDRAND64_STEP);\n+\n   /* MMX access to the vec_init patterns.  */\n   def_builtin_const (OPTION_MASK_ISA_MMX, \"__builtin_ia32_vec_init_v2si\",\n \t\t     V2SI_FTYPE_INT_INT, IX86_BUILTIN_VEC_INIT_V2SI);\n@@ -26703,7 +26707,6 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n       break;\n     case UINT64_FTYPE_VOID:\n     case UNSIGNED_FTYPE_VOID:\n-    case UINT16_FTYPE_VOID:\n       nargs = 0;\n       klass = load;\n       memory = 0;\n@@ -27215,6 +27218,51 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n           return target;\n         }\n \n+    case IX86_BUILTIN_RDRAND16_STEP:\n+      icode = CODE_FOR_rdrandhi_1;\n+      mode0 = HImode;\n+      goto rdrand_step;\n+\n+    case IX86_BUILTIN_RDRAND32_STEP:\n+      icode = CODE_FOR_rdrandsi_1;\n+      mode0 = SImode;\n+      goto rdrand_step;\n+\n+    case IX86_BUILTIN_RDRAND64_STEP:\n+      icode = CODE_FOR_rdranddi_1;\n+      mode0 = DImode;\n+\n+rdrand_step:\n+      op0 = gen_reg_rtx (mode0);\n+      emit_insn (GEN_FCN (icode) (op0));\n+\n+      op1 = gen_reg_rtx (SImode);\n+      emit_move_insn (op1, CONST1_RTX (SImode));\n+\n+      /* Emit SImode conditional move.  */\n+      if (mode0 == HImode)\n+\t{\n+\t  op2 = gen_reg_rtx (SImode);\n+\t  emit_insn (gen_zero_extendhisi2 (op2, op0));\n+\t}\n+      else if (mode0 == SImode)\n+\top2 = op0;\n+      else\n+\top2 = gen_rtx_SUBREG (SImode, op0, 0);\n+\n+      pat = gen_rtx_GEU (VOIDmode, gen_rtx_REG (CCCmode, FLAGS_REG),\n+\t\t\t const0_rtx);\n+      emit_insn (gen_rtx_SET (VOIDmode, op1,\n+\t\t\t      gen_rtx_IF_THEN_ELSE (SImode, pat, op2, op1)));\n+      emit_move_insn (target, op1);\n+\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      op1 = expand_normal (arg0);\n+      if (!address_operand (op1, VOIDmode))\n+\top1 = copy_addr_to_reg (op1);\n+      emit_move_insn (gen_rtx_MEM (mode0, op1), op0);\n+      return target;\n+\n     default:\n       break;\n     }"}, {"sha": "05937e678dfc4694a251e175271886d7de36622e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 7, "deletions": 28, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11c4a1c0043a2d7f951a5b2143497d85382a9ec8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11c4a1c0043a2d7f951a5b2143497d85382a9ec8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=11c4a1c0043a2d7f951a5b2143497d85382a9ec8", "patch": "@@ -232,6 +232,9 @@\n \n   ;; For BMI support\n   UNSPEC_BEXTR\n+\n+  ;; For RDRAND support\n+  UNSPEC_RDRAND\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -265,7 +268,6 @@\n   UNSPECV_RDGSBASE\n   UNSPECV_WRFSBASE\n   UNSPECV_WRGSBASE\n-  UNSPECV_RDRAND\n   UNSPECV_SPLIT_STACK_RETURN\n ])\n \n@@ -18284,36 +18286,13 @@\n   [(set_attr \"type\" \"other\")\n    (set_attr \"prefix_extra\" \"2\")])\n \n-(define_expand \"rdrand<mode>\"\n-  [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n-\t(unspec_volatile:SWI248 [(const_int 0)] UNSPECV_RDRAND))]\n-  \"TARGET_RDRND\"\n-{\n-  rtx retry_label, insn, ccc;\n-\n-  retry_label = gen_label_rtx ();\n-\n-  emit_label (retry_label);\n-\n-  /* Generate rdrand.  */\n-  emit_insn (gen_rdrand<mode>_1 (operands[0]));\n-\n-  /* Retry if the carry flag isn't valid.  */\n-  ccc = gen_rtx_REG (CCCmode, FLAGS_REG);\n-  ccc = gen_rtx_EQ (VOIDmode, ccc, const0_rtx);\n-  ccc = gen_rtx_IF_THEN_ELSE (VOIDmode, ccc, pc_rtx,\n-\t\t\t      gen_rtx_LABEL_REF (VOIDmode, retry_label));\n-  insn = emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, ccc));\n-  JUMP_LABEL (insn) = retry_label;\n-\n-  DONE;\n-})\n-\n (define_insn \"rdrand<mode>_1\"\n   [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n-\t(unspec_volatile:SWI248 [(const_int 0)] UNSPECV_RDRAND))]\n+\t(unspec:SWI248 [(const_int 0)] UNSPEC_RDRAND))\n+   (set (reg:CCC FLAGS_REG)\n+\t(unspec:CCC [(const_int 0)] UNSPEC_RDRAND))]\n   \"TARGET_RDRND\"\n-  \"rdrand %0\"\n+  \"rdrand\\t%0\"\n   [(set_attr \"type\" \"other\")\n    (set_attr \"prefix_extra\" \"1\")])\n "}, {"sha": "055e49bebef5aa9286ebef8db33cc1c6c79f2984", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11c4a1c0043a2d7f951a5b2143497d85382a9ec8/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11c4a1c0043a2d7f951a5b2143497d85382a9ec8/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=11c4a1c0043a2d7f951a5b2143497d85382a9ec8", "patch": "@@ -57,18 +57,18 @@\n #endif\n \n #ifdef __RDRND__\n-extern __inline unsigned short\n+extern __inline int\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_rdrand_u16 (void)\n+_rdrand16_step (unsigned short *__P)\n {\n-  return __builtin_ia32_rdrand16 ();\n+  return __builtin_ia32_rdrand16_step (__P);\n }\n \n-extern __inline unsigned int\n+extern __inline int\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_rdrand_u32 (void)\n+_rdrand32_step (unsigned int *__P)\n {\n-  return __builtin_ia32_rdrand32 ();\n+  return __builtin_ia32_rdrand32_step (__P);\n }\n #endif /* __RDRND__ */\n \n@@ -132,11 +132,11 @@ _writegsbase_u64 (unsigned long long __B)\n #endif /* __FSGSBASE__ */\n \n #ifdef __RDRND__\n-extern __inline unsigned long long\n+extern __inline int\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_rdrand_u64 (void)\n+_rdrand64_step (unsigned long long *__P)\n {\n-  return __builtin_ia32_rdrand64 ();\n+  return __builtin_ia32_rdrand64_step (__P);\n }\n #endif /* __RDRND__ */\n #endif /* __x86_64__  */"}, {"sha": "958541b1ee4c6196fc4ca1f16739677b6e7195ea", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11c4a1c0043a2d7f951a5b2143497d85382a9ec8/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11c4a1c0043a2d7f951a5b2143497d85382a9ec8/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=11c4a1c0043a2d7f951a5b2143497d85382a9ec8", "patch": "@@ -9381,9 +9381,9 @@ used.  All of them generate the machine instruction that is part of the\n name.\n \n @smallexample\n-unsigned short __builtin_ia32_rdrand16 (void)\n-unsigned int __builtin_ia32_rdrand32 (void)\n-unsigned long long __builtin_ia32_rdrand64 (void)\n+unsigned int __builtin_ia32_rdrand16_step (unsigned short *)\n+unsigned int __builtin_ia32_rdrand32_step (unsigned int *)\n+unsigned int __builtin_ia32_rdrand64_step (unsigned long long *)\n @end smallexample\n \n The following built-in functions are available when @option{-msse4a} is used."}, {"sha": "91d1c11edb93b1e4827cfe2fddf5eb68907d7142", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11c4a1c0043a2d7f951a5b2143497d85382a9ec8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11c4a1c0043a2d7f951a5b2143497d85382a9ec8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=11c4a1c0043a2d7f951a5b2143497d85382a9ec8", "patch": "@@ -1,3 +1,9 @@\n+2010-12-28  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.target/i386/rdrand-1.c: Updated.\n+\t* gcc.target/i386/rdrand-2.c: Likewise.\n+\t* gcc.target/i386/rdrand-3.c: Likewise.\n+\n 2010-12-28  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc.dg/class-extension-4.m: New."}, {"sha": "beec9f1b8aa3a54ed35aa7057586ecb7a3535c3f", "filename": "gcc/testsuite/gcc.target/i386/rdrand-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11c4a1c0043a2d7f951a5b2143497d85382a9ec8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11c4a1c0043a2d7f951a5b2143497d85382a9ec8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-1.c?ref=11c4a1c0043a2d7f951a5b2143497d85382a9ec8", "patch": "@@ -1,12 +1,12 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mrdrnd \" } */\n-/* { dg-final { scan-assembler \"rdrand\\[ \\t]+(%|)ax\" } } */\n-/* { dg-final { scan-assembler \"jnc\\[ \\t]+\" } } */\n+/* { dg-options \"-O2 -mrdrnd -dp\" } */\n+/* { dg-final { scan-assembler-times \"rdrandhi_1\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\*movsicc_noc\" 1 } } */\n \n #include <immintrin.h>\n \n-unsigned short\n-read_rdrand16 (void)\n+int\n+foo (unsigned short *x)\n {\n-  return _rdrand_u16 ();\n+  return _rdrand16_step (x);\n }"}, {"sha": "ea8e906495383c2e1c5336727266b53fa56e0f35", "filename": "gcc/testsuite/gcc.target/i386/rdrand-2.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11c4a1c0043a2d7f951a5b2143497d85382a9ec8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11c4a1c0043a2d7f951a5b2143497d85382a9ec8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-2.c?ref=11c4a1c0043a2d7f951a5b2143497d85382a9ec8", "patch": "@@ -1,12 +1,12 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mrdrnd \" } */\n-/* { dg-final { scan-assembler \"rdrand\\[ \\t]+(%|)eax\" } } */\n-/* { dg-final { scan-assembler \"jnc\\[ \\t]+\" } } */\n+/* { dg-options \"-O2 -mrdrnd -dp\" } */\n+/* { dg-final { scan-assembler-times \"rdrandsi_1\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\*movsicc_noc\" 1 } } */\n \n #include <immintrin.h>\n \n-unsigned int\n-read_rdrand32 (void)\n+int\n+foo (unsigned int *x)\n {\n-  return _rdrand_u32 ();\n+  return _rdrand32_step (x);\n }"}, {"sha": "c494d3bf9ab395758b4f135d29f3a554a997d07c", "filename": "gcc/testsuite/gcc.target/i386/rdrand-3.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11c4a1c0043a2d7f951a5b2143497d85382a9ec8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11c4a1c0043a2d7f951a5b2143497d85382a9ec8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-3.c?ref=11c4a1c0043a2d7f951a5b2143497d85382a9ec8", "patch": "@@ -1,13 +1,13 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O2 -mrdrnd \" } */\n-/* { dg-final { scan-assembler \"rdrand\\[ \\t]+(%|)rax\" } } */\n-/* { dg-final { scan-assembler \"jnc\\[ \\t]+\" } } */\n+/* { dg-options \"-O2 -mrdrnd -dp\" } */\n+/* { dg-final { scan-assembler-times \"rdranddi_1\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\*movsicc_noc\" 1 } } */\n \n #include <immintrin.h>\n \n-unsigned long long\n-read_rdrand64 (void)\n+int\n+foo (unsigned long long *x)\n {\n-  return _rdrand_u64 ();\n+  return _rdrand64_step (x);\n }"}]}