{"sha": "6d42cbe5ad7a7b46437f2576c9920e44dc14b386", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ0MmNiZTVhZDdhN2I0NjQzN2YyNTc2Yzk5MjBlNDRkYzE0YjM4Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-18T05:51:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-18T05:51:58Z"}, "message": "c: Fix -Wunused-but-set-* warning with _Generic [PR96571]\n\nThe following testcase shows various problems with -Wunused-but-set*\nwarnings and _Generic construct.  I think it is best to treat the selector\nand the ignored expressions as (potentially) read, because when they are\nparsed, the vars in there are already marked as TREE_USED.\n\n2020-08-18  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/96571\n\t* c-parser.c (c_parser_generic_selection): Change match_found from bool\n\tto int, holding index of the match.  Call mark_exp_read on the selector\n\texpression and on expressions other than the selected one.\n\n\t* gcc.dg/Wunused-var-4.c: New test.", "tree": {"sha": "a779ecc71eda6e6e0af4fdb3d12ff69855e93c5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a779ecc71eda6e6e0af4fdb3d12ff69855e93c5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d42cbe5ad7a7b46437f2576c9920e44dc14b386", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d42cbe5ad7a7b46437f2576c9920e44dc14b386", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d42cbe5ad7a7b46437f2576c9920e44dc14b386", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d42cbe5ad7a7b46437f2576c9920e44dc14b386/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bc4e811aa7249ec972ee7ea5b9bb23e8a0cd69e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bc4e811aa7249ec972ee7ea5b9bb23e8a0cd69e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bc4e811aa7249ec972ee7ea5b9bb23e8a0cd69e"}], "stats": {"total": 52, "additions": 46, "deletions": 6}, "files": [{"sha": "a8bc301ffadf4ef566b0b6653555be4df65d4a55", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d42cbe5ad7a7b46437f2576c9920e44dc14b386/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d42cbe5ad7a7b46437f2576c9920e44dc14b386/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=6d42cbe5ad7a7b46437f2576c9920e44dc14b386", "patch": "@@ -8686,7 +8686,7 @@ c_parser_generic_selection (c_parser *parser)\n   struct c_expr selector, error_expr;\n   tree selector_type;\n   struct c_generic_association matched_assoc;\n-  bool match_found = false;\n+  int match_found = -1;\n   location_t generic_loc, selector_loc;\n \n   error_expr.original_code = ERROR_MARK;\n@@ -8721,6 +8721,7 @@ c_parser_generic_selection (c_parser *parser)\n       c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n       return selector;\n     }\n+  mark_exp_read (selector.value);\n   selector_type = TREE_TYPE (selector.value);\n   /* In ISO C terms, rvalues (including the controlling expression of\n      _Generic) do not have qualified types.  */\n@@ -8820,18 +8821,18 @@ c_parser_generic_selection (c_parser *parser)\n \n       if (assoc.type == NULL_TREE)\n \t{\n-\t  if (!match_found)\n+\t  if (match_found < 0)\n \t    {\n \t      matched_assoc = assoc;\n-\t      match_found = true;\n+\t      match_found = associations.length ();\n \t    }\n \t}\n       else if (comptypes (assoc.type, selector_type))\n \t{\n-\t  if (!match_found || matched_assoc.type == NULL_TREE)\n+\t  if (match_found < 0 || matched_assoc.type == NULL_TREE)\n \t    {\n \t      matched_assoc = assoc;\n-\t      match_found = true;\n+\t      match_found = associations.length ();\n \t    }\n \t  else\n \t    {\n@@ -8849,13 +8850,19 @@ c_parser_generic_selection (c_parser *parser)\n       c_parser_consume_token (parser);\n     }\n \n+  unsigned int ix;\n+  struct c_generic_association *iter;\n+  FOR_EACH_VEC_ELT (associations, ix, iter)\n+    if (ix != (unsigned) match_found)\n+      mark_exp_read (iter->expression.value);\n+\n   if (!parens.require_close (parser))\n     {\n       c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n       return error_expr;\n     }\n \n-  if (!match_found)\n+  if (match_found < 0)\n     {\n       error_at (selector_loc, \"%<_Generic%> selector of type %qT is not \"\n \t\t\"compatible with any association\","}, {"sha": "08ddcf4407e48a8f833a3f9a96a3bcde5c216f78", "filename": "gcc/testsuite/gcc.dg/Wunused-var-4.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d42cbe5ad7a7b46437f2576c9920e44dc14b386/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d42cbe5ad7a7b46437f2576c9920e44dc14b386/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-4.c?ref=6d42cbe5ad7a7b46437f2576c9920e44dc14b386", "patch": "@@ -0,0 +1,33 @@\n+/* PR c/96571 */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -O2 -Wunused-but-set-variable\" } */\n+\n+enum E { V };\n+\n+int\n+foo (void)\n+{\n+  enum E v;\t\t\t\t/* { dg-bogus \"set but not used\" } */\n+  return _Generic (v, enum E : 0);\n+}\n+\n+int\n+bar (void)\n+{\n+  int a = 0;\t\t\t\t/* { dg-bogus \"set but not used\" } */\n+  return _Generic (0, int : a);\n+}\n+\n+int\n+baz (void)\n+{\n+  int a;\t\t\t\t/* { dg-bogus \"set but not used\" } */\n+  return _Generic (0, long long : a, int : 0);\n+}\n+\n+int\n+qux (void)\n+{\n+  int a;\t\t\t\t/* { dg-bogus \"set but not used\" } */\n+  return _Generic (0, long long : a, default: 0);\n+}"}]}