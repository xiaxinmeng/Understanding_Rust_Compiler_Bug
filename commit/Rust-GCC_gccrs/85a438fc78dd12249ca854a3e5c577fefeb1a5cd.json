{"sha": "85a438fc78dd12249ca854a3e5c577fefeb1a5cd", "node_id": "C_kwDOANBUbNoAKDg1YTQzOGZjNzhkZDEyMjQ5Y2E4NTRhM2U1YzU3N2ZlZmViMWE1Y2Q", "commit": {"author": {"name": "S\u00f6ren Tempel", "email": "soeren@soeren-tempel.net", "date": "2021-12-14T23:07:47Z"}, "committer": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2021-12-14T23:08:50Z"}, "message": "[PATCH] stddef.h: add support for musl typedef macro guards\n\nThe stddef.h header checks/sets various hardcoded toolchain/os specific\nmacro guards to prevent redefining types such as ptrdiff_t, wchar_t, or\nsize_t. However, without this patch, the file does not check/set the\ntypedef macro guards for musl libc. This causes types such as size_t to\nbe defined twice for files which include both musl's stdlib.h as well as\nGCC's ginclude/stddef.h. This is, for example, the case for\nlibgo/sysinfo.c. If libgo/sysinfo.c has multiple typedefs for size_t\nthis confuses -fdump-go-spec and causes size_t not to be included in the\ngenerated type definitions thereby causing a gcc-go compilation failure\non Alpine Linux Edge (which uses musl libc) with the following error:\n\n\tsysinfo.go:7765:13: error: use of undefined type '_size_t'\n\t 7765 | type Size_t _size_t\n\t      |             ^\n\tlibcall_posix.go:49:35: error: non-integer len argument in make\n\t   49 |                 b := make([]byte, len)\n\t      |\n\nThis commit fixes this issue by ensuring that ptrdiff_t, wchar_t, and size_t\nare only defined once in the pre-processed libgo/sysinfo.c file by enhancing\ngcc/ginclude/stddef.h with musl-specific typedef macro guards.\n\ngcc/ChangeLog:\n\n\t* ginclude/stddef.h (__DEFINED_ptrdiff_t): Add support for musl\n\tlibc typedef macro guard.\n\t(__DEFINED_size_t): Ditto.\n\t(__DEFINED_wchar_t): Ditto.", "tree": {"sha": "2023203989d92649f05d0de354a2b34b4f7c72b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2023203989d92649f05d0de354a2b34b4f7c72b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85a438fc78dd12249ca854a3e5c577fefeb1a5cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a438fc78dd12249ca854a3e5c577fefeb1a5cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85a438fc78dd12249ca854a3e5c577fefeb1a5cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a438fc78dd12249ca854a3e5c577fefeb1a5cd/comments", "author": null, "committer": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a888259a71fbbb7f14923751251e056829d76342", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a888259a71fbbb7f14923751251e056829d76342", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a888259a71fbbb7f14923751251e056829d76342"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "50d710a5ab97d1abdc822f22fcc3cf38cdbc3771", "filename": "gcc/ginclude/stddef.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a438fc78dd12249ca854a3e5c577fefeb1a5cd/gcc%2Fginclude%2Fstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a438fc78dd12249ca854a3e5c577fefeb1a5cd/gcc%2Fginclude%2Fstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstddef.h?ref=85a438fc78dd12249ca854a3e5c577fefeb1a5cd", "patch": "@@ -128,6 +128,7 @@ _TYPE_wchar_t;\n #ifndef ___int_ptrdiff_t_h\n #ifndef _GCC_PTRDIFF_T\n #ifndef _PTRDIFF_T_DECLARED /* DragonFly */\n+#ifndef __DEFINED_ptrdiff_t /* musl libc */\n #define _PTRDIFF_T\n #define _T_PTRDIFF_\n #define _T_PTRDIFF\n@@ -137,10 +138,12 @@ _TYPE_wchar_t;\n #define ___int_ptrdiff_t_h\n #define _GCC_PTRDIFF_T\n #define _PTRDIFF_T_DECLARED\n+#define __DEFINED_ptrdiff_t\n #ifndef __PTRDIFF_TYPE__\n #define __PTRDIFF_TYPE__ long int\n #endif\n typedef __PTRDIFF_TYPE__ ptrdiff_t;\n+#endif /* __DEFINED_ptrdiff_t */\n #endif /* _PTRDIFF_T_DECLARED */\n #endif /* _GCC_PTRDIFF_T */\n #endif /* ___int_ptrdiff_t_h */\n@@ -174,6 +177,7 @@ typedef __PTRDIFF_TYPE__ ptrdiff_t;\n #ifndef _SIZE_T_DEFINED\n #ifndef _BSD_SIZE_T_DEFINED_\t/* Darwin */\n #ifndef _SIZE_T_DECLARED\t/* FreeBSD 5 */\n+#ifndef __DEFINED_size_t\t/* musl libc */\n #ifndef ___int_size_t_h\n #ifndef _GCC_SIZE_T\n #ifndef _SIZET_\n@@ -191,6 +195,7 @@ typedef __PTRDIFF_TYPE__ ptrdiff_t;\n #define _SIZE_T_DEFINED\n #define _BSD_SIZE_T_DEFINED_\t/* Darwin */\n #define _SIZE_T_DECLARED\t/* FreeBSD 5 */\n+#define __DEFINED_size_t\t/* musl libc */\n #define ___int_size_t_h\n #define _GCC_SIZE_T\n #define _SIZET_\n@@ -215,6 +220,7 @@ typedef long ssize_t;\n #endif /* _SIZET_ */\n #endif /* _GCC_SIZE_T */\n #endif /* ___int_size_t_h */\n+#endif /* __DEFINED_size_t */\n #endif /* _SIZE_T_DECLARED */\n #endif /* _BSD_SIZE_T_DEFINED_ */\n #endif /* _SIZE_T_DEFINED */\n@@ -251,6 +257,7 @@ typedef long ssize_t;\n #ifndef _BSD_WCHAR_T_DEFINED_    /* Darwin */\n #ifndef _BSD_RUNE_T_DEFINED_\t/* Darwin */\n #ifndef _WCHAR_T_DECLARED /* FreeBSD 5 */\n+#ifndef __DEFINED_wchar_t /* musl libc */\n #ifndef _WCHAR_T_DEFINED_\n #ifndef _WCHAR_T_DEFINED\n #ifndef _WCHAR_T_H\n@@ -272,6 +279,7 @@ typedef long ssize_t;\n #define __INT_WCHAR_T_H\n #define _GCC_WCHAR_T\n #define _WCHAR_T_DECLARED\n+#define __DEFINED_wchar_t\n \n /* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_\n    instead of _WCHAR_T_, and _BSD_RUNE_T_ (which, unlike the other\n@@ -326,6 +334,7 @@ typedef __WCHAR_TYPE__ wchar_t;\n #endif\n #endif\n #endif\n+#endif /* __DEFINED_wchar_t */\n #endif /* _WCHAR_T_DECLARED */\n #endif /* _BSD_RUNE_T_DEFINED_ */\n #endif"}]}