{"sha": "47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdlY2QzOGRiZjg3ZDg3ZjY0YzNkYjNhOWZkMmM3MTZlNjNiNmNhNw==", "commit": {"author": {"name": "Rafael Avila de Espindola", "email": "espindola@google.com", "date": "2007-03-30T22:09:01Z"}, "committer": {"name": "Rafael Espindola", "email": "espindola@gcc.gnu.org", "date": "2007-03-30T22:09:01Z"}, "message": "typeck.c (java_signed_or_unsigned_type): Remove.\n\ngcc/java/ChangeLog:\n   * typeck.c (java_signed_or_unsigned_type): Remove.\n   (java_signed_type): use get_signed_or_unsigned_type instead of\njava_signed_or_unsigned_type.\n   (java_unsigned_type): Ditto.\n   * lang.c (LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE): Remove.\n   * java-tree.h (java_signed_or_unsigned_type): Remove\n\ngcc/Changelog:\n   * tree.h(get_signed_or_unsigned_type): New\n   * fold-const.c (operand_equal_for_comparison_p): Use\nget_signed_or_unsigned_type instead of\nlang_hooks.types.signed_or_unsigned_type.\n   * expr.c (store_expr): Ditto.\n   * langhooks.c (get_signed_or_unsigned_type): New.\n     (lhd_signed_or_unsigned_type): New\n   * langhooks.h (lhd_signed_or_unsigned_type): New.\n   * langhooks-def.h (LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE): Define.\n\ngcc/treelang/ChangeLog:\n   * treetree.c (tree_lang_signed_or_unsigned_type): Remove.\n   (LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE) Remove.\n\ngcc/ada/ChangeLog:\n    * trans.c (Attribute_to_gnu): Use get_signed_or_unsigned_type\ninstead of gnat_signed_or_unsigned_type.\n    * utils.c (gnat_signed_or_unsigned_type): Remove.\n    * misc.c (LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE): Remove\n    * gigi.h (gnat_signed_or_unsigned_type): Remove\n\ngcc/forrtan/trans-types.c:\n   * trans-types.c (gfc_signed_or_unsigned_type): Remove.\n     (gfc_unsigned_type): Use get_signed_or_unsigned_type instead of\ngfc_signed_or_unsigned_type.\n     (gfc_signed_type): Ditto.\n   * trans-types.h (gfc_signed_or_unsigned_type): Remove.\n   * f95-lang.c (LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE): Remove.\n\nFrom-SVN: r123373", "tree": {"sha": "aad122665a7e424450d90c47175d652d463baad7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aad122665a7e424450d90c47175d652d463baad7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/comments", "author": null, "committer": null, "parents": [{"sha": "ccf8e764e9ca5a530de57cdabdb7123734de2d4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccf8e764e9ca5a530de57cdabdb7123734de2d4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccf8e764e9ca5a530de57cdabdb7123734de2d4a"}], "stats": {"total": 150, "additions": 75, "deletions": 75}, "files": [{"sha": "7a03dd94da3ae7df8db84bd0acc81ed0675a1a17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "patch": "@@ -1,3 +1,15 @@\n+2007-03-30  Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* tree.h (get_signed_or_unsigned_type): New.\n+\t* fold-const.c (operand_equal_for_comparison_p): Use\n+\tget_signed_or_unsigned_type instead of\n+\tlang_hooks.types.signed_or_unsigned_type.\n+\t* expr.c (store_expr): Ditto.\n+\t* langhooks.c (get_signed_or_unsigned_type): New.\n+\t(lhd_signed_or_unsigned_type): New.\n+\t* langhooks.h (lhd_signed_or_unsigned_type): New.\n+\t* langhooks-def.h (LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE): Define.\n+\n 2007-03-30  Richard Henderson  <rth@redhat.com>\n \n \t* tree-ssa-loop-ivopts.c: Include target.h."}, {"sha": "60901bf6a6c4dbe71e6fef185208d68dd22f5ea5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "patch": "@@ -1,3 +1,11 @@\n+2007-03-30  Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* trans.c (Attribute_to_gnu): Use get_signed_or_unsigned_type\n+\tinstead of gnat_signed_or_unsigned_type.\n+\t* utils.c (gnat_signed_or_unsigned_type): Remove.\n+\t* misc.c (LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE): Remove\n+\t* gigi.h (gnat_signed_or_unsigned_type): Remove\n+\n 2007-03-09  Roger Sayle  <roger@eyesopen.com>\n \n \t* cuintp.c (UI_To_gnu): Use fold_buildN calls instead of calling"}, {"sha": "b16649fa1a6397691c79c440d8a7dfabb5bc8437", "filename": "gcc/ada/gigi.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Fada%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Fada%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgigi.h?ref=47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "patch": "@@ -454,10 +454,6 @@ extern tree gnat_unsigned_type (tree type_node);\n /* Return the signed version of a TYPE_NODE, a scalar type.  */\n extern tree gnat_signed_type (tree type_node);\n \n-/* Return a type the same as TYPE except unsigned or signed according to\n-   UNSIGNEDP.  */\n-extern tree gnat_signed_or_unsigned_type (int unsignedp, tree type);\n-\n /* Create an expression whose value is that of EXPR,\n    converted to type TYPE.  The TREE_TYPE of the value\n    is always TYPE.  This function implements all reasonable"}, {"sha": "bd22e7e71e010d7c1b827e2cf35ea047c6a0810c", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "patch": "@@ -161,8 +161,6 @@ static tree gnat_type_max_size\t\t(tree);\n #define LANG_HOOKS_SIGNED_TYPE\t\tgnat_signed_type\n #undef  LANG_HOOKS_UNSIGNED_TYPE\n #define LANG_HOOKS_UNSIGNED_TYPE\tgnat_unsigned_type\n-#undef  LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE\n-#define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE gnat_signed_or_unsigned_type\n #undef  LANG_HOOKS_ATTRIBUTE_TABLE\n #define LANG_HOOKS_ATTRIBUTE_TABLE\tgnat_internal_attribute_table\n #undef  LANG_HOOKS_BUILTIN_FUNCTION"}, {"sha": "230dccf2ea50dd10c2a264768d9b77879c8fc544", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "patch": "@@ -876,7 +876,7 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \t  /* 'Length or 'Range_Length.  */\n \t  {\n \t    tree gnu_compute_type\n-\t      = gnat_signed_or_unsigned_type (0,\n+\t      = get_signed_or_unsigned_type (0,\n \t\t\t\t\t      get_base_type (gnu_result_type));\n \n \t    gnu_result"}, {"sha": "1782ca9eec833cdf0d41d58b3b9e7c3f19339006", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "patch": "@@ -2307,17 +2307,6 @@ gnat_signed_type (tree type_node)\n   return type;\n }\n \n-/* Return a type the same as TYPE except unsigned or signed according to\n-   UNSIGNEDP.  */\n-\n-tree\n-gnat_signed_or_unsigned_type (int unsignedp, tree type)\n-{\n-  if (!INTEGRAL_TYPE_P (type) || TYPE_UNSIGNED (type) == unsignedp)\n-    return type;\n-  else\n-    return gnat_type_for_size (TYPE_PRECISION (type), unsignedp);\n-}\n \f\n /* EXP is an expression for the size of an object.  If this size contains\n    discriminant references, replace them with the maximum (if MAX_P) or"}, {"sha": "653eb56ce961f8ef241f988e8a2aef8712353598", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "patch": "@@ -4384,7 +4384,7 @@ store_expr (tree exp, rtx target, int call_param_p)\n \t  if (TYPE_UNSIGNED (TREE_TYPE (exp))\n \t      != SUBREG_PROMOTED_UNSIGNED_P (target))\n \t    exp = fold_convert\n-\t      (lang_hooks.types.signed_or_unsigned_type\n+\t      (get_signed_or_unsigned_type\n \t       (SUBREG_PROMOTED_UNSIGNED_P (target), TREE_TYPE (exp)), exp);\n \n \t  exp = fold_convert (lang_hooks.types.type_for_mode"}, {"sha": "5ee9cf1c56695a469a70d402f90820751ec77333", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "patch": "@@ -3032,7 +3032,7 @@ operand_equal_for_comparison_p (tree arg0, tree arg1, tree other)\n \n       /* Make sure shorter operand is extended the right way\n \t to match the longer operand.  */\n-      primarg1 = fold_convert (lang_hooks.types.signed_or_unsigned_type\n+      primarg1 = fold_convert (get_signed_or_unsigned_type\n \t\t\t       (unsignedp1, TREE_TYPE (primarg1)), primarg1);\n \n       if (operand_equal_p (arg0, fold_convert (type, primarg1), 0))"}, {"sha": "1697e44b4d8d110a70d886a4f134d4f51389cadf", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "patch": "@@ -1,3 +1,12 @@\n+2007-03-30  Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* trans-types.c (gfc_signed_or_unsigned_type): Remove.\n+\t(gfc_unsigned_type): Use get_signed_or_unsigned_type instead of\n+\tgfc_signed_or_unsigned_type.\n+\t(gfc_signed_type): Ditto.\n+\t* trans-types.h (gfc_signed_or_unsigned_type): Remove.\n+\t* f95-lang.c (LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE): Remove.\n+\n 2007-03-30  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n \n \t* symbol.c (gfc_find_gsymbol): Simplify, don't unconditionally"}, {"sha": "c498398dd5db45f77949b30b0bfe48cff56887b9", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "patch": "@@ -115,7 +115,6 @@ static HOST_WIDE_INT gfc_get_alias_set (tree);\n #undef LANG_HOOKS_TYPE_FOR_SIZE\n #undef LANG_HOOKS_UNSIGNED_TYPE\n #undef LANG_HOOKS_SIGNED_TYPE\n-#undef LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE\n #undef LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION\n #undef LANG_HOOKS_CLEAR_BINDING_STACK\n #undef LANG_HOOKS_GET_ALIAS_SET\n@@ -141,7 +140,6 @@ static HOST_WIDE_INT gfc_get_alias_set (tree);\n #define LANG_HOOKS_TYPE_FOR_SIZE           gfc_type_for_size\n #define LANG_HOOKS_UNSIGNED_TYPE           gfc_unsigned_type\n #define LANG_HOOKS_SIGNED_TYPE             gfc_signed_type\n-#define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE gfc_signed_or_unsigned_type\n #define LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION gfc_expand_function\n #define LANG_HOOKS_CLEAR_BINDING_STACK     gfc_clear_binding_stack\n #define LANG_HOOKS_GET_ALIAS_SET\t   gfc_get_alias_set"}, {"sha": "80cdb25b0d35ff9987eb2c1372781c34306a4a00", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "patch": "@@ -1832,32 +1832,20 @@ gfc_type_for_mode (enum machine_mode mode, int unsignedp)\n   return NULL_TREE;\n }\n \n-/* Return a type the same as TYPE except unsigned or\n-   signed according to UNSIGNEDP.  */\n-\n-tree\n-gfc_signed_or_unsigned_type (int unsignedp, tree type)\n-{\n-  if (TREE_CODE (type) != INTEGER_TYPE || TYPE_UNSIGNED (type) == unsignedp)\n-    return type;\n-  else\n-    return gfc_type_for_size (TYPE_PRECISION (type), unsignedp);\n-}\n-\n /* Return an unsigned type the same as TYPE in other respects.  */\n \n tree\n gfc_unsigned_type (tree type)\n {\n-  return gfc_signed_or_unsigned_type (1, type);\n+  return get_signed_or_unsigned_type (1, type);\n }\n \n /* Return a signed type the same as TYPE in other respects.  */\n \n tree\n gfc_signed_type (tree type)\n {\n-  return gfc_signed_or_unsigned_type (0, type);\n+  return get_signed_or_unsigned_type (0, type);\n }\n \n #include \"gt-fortran-trans-types.h\""}, {"sha": "2c05f81d51a13009526adba7275519a4e741b978", "filename": "gcc/fortran/trans-types.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Ffortran%2Ftrans-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Ffortran%2Ftrans-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.h?ref=47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "patch": "@@ -76,7 +76,6 @@ tree gfc_type_for_size (unsigned, int);\n tree gfc_type_for_mode (enum machine_mode, int);\n tree gfc_unsigned_type (tree);\n tree gfc_signed_type (tree);\n-tree gfc_signed_or_unsigned_type (int, tree);\n \n tree gfc_get_element_type (tree);\n tree gfc_get_array_type_bounds (tree, int, tree *, tree *, int);"}, {"sha": "f979728bdaf6aca82c40ce644002681910e2abe9", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "patch": "@@ -1,3 +1,12 @@\n+2007-03-30  Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* typeck.c (java_signed_or_unsigned_type): Removed.\n+\t(java_signed_type): use get_signed_or_unsigned_type instead of\n+\tjava_signed_or_unsigned_type.\n+\t(java_unsigned_type): Ditto.\n+\t* lang.c (LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE): Removed.\n+\t* java-tree.h (java_signed_or_unsigned_type): Removed.\n+\n 2007-03-26  Tom Tromey  <tromey@redhat.com>\n \n \t* Make-lang.in (JAVA_MANFILES): Removed grmiregistry.1."}, {"sha": "c11f83e337c4f4ec8559c8835ced8986aaf07664", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "patch": "@@ -1101,7 +1101,6 @@ extern tree java_type_for_mode (enum machine_mode, int);\n extern tree java_type_for_size (unsigned int, int);\n extern tree java_unsigned_type (tree);\n extern tree java_signed_type (tree);\n-extern tree java_signed_or_unsigned_type (int, tree);\n extern tree java_truthvalue_conversion (tree);\n extern void add_assume_compiled (const char *, int);\n extern void add_enable_assert (const char *, int);"}, {"sha": "723d9a69a4351e658caa50c34d4371ec99e91710", "filename": "gcc/java/lang.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "patch": "@@ -186,8 +186,6 @@ struct language_function GTY(())\n #define LANG_HOOKS_SIGNED_TYPE java_signed_type\n #undef LANG_HOOKS_UNSIGNED_TYPE\n #define LANG_HOOKS_UNSIGNED_TYPE java_unsigned_type\n-#undef LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE\n-#define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE java_signed_or_unsigned_type\n \n #undef LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN\n #define LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN java_dump_tree"}, {"sha": "b35461b47616fb89eb0fcd6f51b6f0cb77cdeb12", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "patch": "@@ -195,39 +195,20 @@ java_type_for_size (unsigned bits, int unsignedp)\n   return 0;\n }\n \n-/* Return a type the same as TYPE except unsigned or\n-   signed according to UNSIGNEDP.  */\n-\n-tree\n-java_signed_or_unsigned_type (int unsignedp, tree type)\n-{\n-  if (! INTEGRAL_TYPE_P (type))\n-    return type;\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (int_type_node))\n-    return unsignedp ? unsigned_int_type_node : int_type_node;\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (byte_type_node))\n-    return unsignedp ? unsigned_byte_type_node : byte_type_node;\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (short_type_node))\n-    return unsignedp ? unsigned_short_type_node : short_type_node;\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (long_type_node))\n-    return unsignedp ? unsigned_long_type_node : long_type_node;\n-  return type;\n-}\n-\n /* Return a signed type the same as TYPE in other respects.  */\n \n tree\n java_signed_type (tree type)\n {\n-  return java_signed_or_unsigned_type (0, type);\n+  return get_signed_or_unsigned_type (0, type);\n }\n \n /* Return an unsigned type the same as TYPE in other respects.  */\n \n tree\n java_unsigned_type (tree type)\n {\n-  return java_signed_or_unsigned_type (1, type);\n+  return get_signed_or_unsigned_type (1, type);\n }\n \n /* Mark EXP saying that we need to be able to take the"}, {"sha": "572990039a276cf73faef680d864236502b3ca99", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "patch": "@@ -130,6 +130,7 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n #define LANG_HOOKS_TREE_SIZE\t\tlhd_tree_size\n #define LANG_HOOKS_TYPES_COMPATIBLE_P\tlhd_types_compatible_p\n #define LANG_HOOKS_BUILTIN_FUNCTION\tlhd_builtin_function\n+#define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE\tlhd_signed_or_unsigned_type\n #define LANG_HOOKS_EXPR_TO_DECL\t\tlhd_expr_to_decl\n #define LANG_HOOKS_TO_TARGET_CHARSET\tlhd_to_target_charset\n #define LANG_HOOKS_INIT_TS\t\tlhd_do_nothing"}, {"sha": "1ba6ec224cf052d20d69ef7e0938fad02e2611f8", "filename": "gcc/langhooks.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "patch": "@@ -621,3 +621,24 @@ lhd_builtin_function (tree decl)\n   lang_hooks.decls.pushdecl (decl);\n   return decl;\n }\n+\n+/* If TYPE is an integral type, return an equivalent type which is\n+    unsigned iff UNSIGNEDP is true.  If TYPE is not an integral type,\n+    return TYPE itself.  */\n+\n+tree\n+get_signed_or_unsigned_type (int unsignedp, tree type)\n+{\n+  if (!INTEGRAL_TYPE_P (type) || TYPE_UNSIGNED (type) == unsignedp)\n+    return type;\n+\n+  return lang_hooks.types.signed_or_unsigned_type(unsignedp, type);\n+}\n+\n+/* Default implementation of the signed_or_unsigned_type language hook */\n+\n+tree\n+lhd_signed_or_unsigned_type (int unsignedp, tree type)\n+{\n+  return lang_hooks.types.type_for_size (TYPE_PRECISION (type), unsignedp);\n+}"}, {"sha": "b7116103f85c4a4f3b215525d6fd2f6bd6b1cccb", "filename": "gcc/langhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "patch": "@@ -461,5 +461,6 @@ extern tree add_builtin_function (const char *name, tree type,\n \t\t\t\t  int function_code, enum built_in_class cl,\n \t\t\t\t  const char *library_name,\n \t\t\t\t  tree attrs);\n+extern tree lhd_signed_or_unsigned_type (int unsignedp, tree type);\n \n #endif /* GCC_LANG_HOOKS_H */"}, {"sha": "64efe7c60fe1d855791cbddb4b13720cbf4646c4", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "patch": "@@ -3806,6 +3806,8 @@ extern bool tree_expr_nonnegative_warnv_p (tree, bool *);\n extern bool may_negate_without_overflow_p (tree);\n extern tree get_inner_array_type (tree);\n \n+extern tree get_signed_or_unsigned_type (int unsignedp, tree type);\n+\n /* From expmed.c.  Since rtl.h is included after tree.h, we can't\n    put the prototype here.  Rtl.h does declare the prototype if\n    tree.h had been included.  */"}, {"sha": "2903de6d788f944cb87de7f1db3427b4d81a2ccb", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "patch": "@@ -1,3 +1,8 @@\n+2007-03-30  Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* treetree.c (tree_lang_signed_or_unsigned_type): Remove.\n+\t(LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE) Remove.\n+\n 2007-03-01  Brooks Moses  <brooks.moses@codesourcery.com>\n \n \t* Make-lang.in: Add install-pdf target as copied from"}, {"sha": "0645b9d1da55036388ef7148a5f1314ff4536fd7", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=47ecd38dbf87d87f64c3db3a9fd2c716e63b6ca7", "patch": "@@ -129,7 +129,6 @@ static tree tree_lang_type_for_size (unsigned precision, int unsignedp);\n static tree tree_lang_type_for_mode (enum machine_mode mode, int unsignedp);\n static tree tree_lang_unsigned_type (tree type_node);\n static tree tree_lang_signed_type (tree type_node);\n-static tree tree_lang_signed_or_unsigned_type (int unsignedp, tree type);\n \n /* Functions to keep track of the current scope.  */\n static void pushlevel (int ignore);\n@@ -156,8 +155,6 @@ static void treelang_expand_function (tree fndecl);\n #define LANG_HOOKS_SIGNED_TYPE tree_lang_signed_type\n #undef LANG_HOOKS_UNSIGNED_TYPE\n #define LANG_HOOKS_UNSIGNED_TYPE tree_lang_unsigned_type\n-#undef LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE\n-#define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE tree_lang_signed_or_unsigned_type\n #undef LANG_HOOKS_TYPE_FOR_MODE\n #define LANG_HOOKS_TYPE_FOR_MODE tree_lang_type_for_mode\n #undef LANG_HOOKS_TYPE_FOR_SIZE\n@@ -884,17 +881,6 @@ tree_lang_signed_type (tree type_node)\n   return tree_lang_type_for_size (TYPE_PRECISION (type_node), 0);\n }\n \n-/* Return a type the same as TYPE except unsigned or signed according to\n-   UNSIGNEDP.  */\n-\n-static tree\n-tree_lang_signed_or_unsigned_type (int unsignedp, tree type)\n-{\n-  if (! INTEGRAL_TYPE_P (type) || TYPE_UNSIGNED (type) == unsignedp)\n-    return type;\n-  else\n-    return tree_lang_type_for_size (TYPE_PRECISION (type), unsignedp);\n-}\n \f\n /* These functions and variables deal with binding contours.  We only\n    need these functions for the list of PARM_DECLs, but we leave the"}]}