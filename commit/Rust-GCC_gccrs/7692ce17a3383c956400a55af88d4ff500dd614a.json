{"sha": "7692ce17a3383c956400a55af88d4ff500dd614a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY5MmNlMTdhMzM4M2M5NTY0MDBhNTVhZjg4ZDRmZjUwMGRkNjE0YQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2017-11-08T18:32:09Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2017-11-08T18:32:09Z"}, "message": "[AArch64] Add STP pattern to store a vec_concat of two 64-bit registers\n\nOn top of the previous vec_merge simplifications [1] we can add this pattern to perform\na store of a vec_concat of two 64-bit values in distinct registers as an STP.\nThis avoids constructing such a vector explicitly in a register and storing it as\na Q register.\nThis way for the code in the testcase we can generate:\n\nconstruct_lane_1:\n        ldp     d1, d0, [x0]\n        fmov    d3, 1.0e+0\n        fmov    d2, 2.0e+0\n        fadd    d4, d1, d3\n        fadd    d5, d0, d2\n        stp     d4, d5, [x1, 32]\n        ret\n\nconstruct_lane_2:\n        ldp     x2, x0, [x0]\n        add     x3, x2, 1\n        add     x4, x0, 2\n        stp     x3, x4, [x1, 32]\n        ret\n\ninstead of the current:\nconstruct_lane_1:\n        ldp     d0, d1, [x0]\n        fmov    d3, 1.0e+0\n        fmov    d2, 2.0e+0\n        fadd    d0, d0, d3\n        fadd    d1, d1, d2\n        dup     v0.2d, v0.d[0]\n        ins     v0.d[1], v1.d[0]\n        str     q0, [x1, 32]\n        ret\n\nconstruct_lane_2:\n        ldp     x2, x3, [x0]\n        add     x0, x2, 1\n        add     x2, x3, 2\n        dup     v0.2d, x0\n        ins     v0.d[1], x2\n        str     q0, [x1, 32]\n        ret\n\nBootstrapped and tested on aarch64-none-linux-gnu.\n\n[1] https://gcc.gnu.org/ml/gcc-patches/2017-06/msg00272.html\n    https://gcc.gnu.org/ml/gcc-patches/2017-06/msg00273.html\n    https://gcc.gnu.org/ml/gcc-patches/2017-06/msg00274.html\n\n\t* config/aarch64/aarch64-simd.md (store_pair_lanes<mode>):\n\tNew pattern.\n\t* config/aarch64/constraints.md (Uml): New constraint.\n\t* config/aarch64/predicates.md (aarch64_mem_pair_lanes_operand): New\n\tpredicate.\n\n\t* gcc.target/aarch64/store_v2vec_lanes.c: New test.\n\nFrom-SVN: r254551", "tree": {"sha": "6b60e45f9e51298e4f08ceb8aa7d81d37be4479f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b60e45f9e51298e4f08ceb8aa7d81d37be4479f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7692ce17a3383c956400a55af88d4ff500dd614a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7692ce17a3383c956400a55af88d4ff500dd614a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7692ce17a3383c956400a55af88d4ff500dd614a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7692ce17a3383c956400a55af88d4ff500dd614a/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "040939a2387eff082f1594fac35f007f93d2dcd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/040939a2387eff082f1594fac35f007f93d2dcd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/040939a2387eff082f1594fac35f007f93d2dcd8"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "805625f8f3d2794582d343f94dfd0f9b2c24f65c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7692ce17a3383c956400a55af88d4ff500dd614a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7692ce17a3383c956400a55af88d4ff500dd614a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7692ce17a3383c956400a55af88d4ff500dd614a", "patch": "@@ -1,3 +1,11 @@\n+2017-11-08  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (store_pair_lanes<mode>):\n+\tNew pattern.\n+\t* config/aarch64/constraints.md (Uml): New constraint.\n+\t* config/aarch64/predicates.md (aarch64_mem_pair_lanes_operand): New\n+\tpredicate.\n+\n 2017-11-08  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* simplify-rtx.c (simplify_ternary_operation): Simplify vec_merge"}, {"sha": "9a6da35f6f9154c46464ca47d9c4efa9a69a6b8d", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7692ce17a3383c956400a55af88d4ff500dd614a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7692ce17a3383c956400a55af88d4ff500dd614a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=7692ce17a3383c956400a55af88d4ff500dd614a", "patch": "@@ -2949,6 +2949,18 @@\n   [(set_attr \"type\" \"neon_load1_1reg_q\")]\n )\n \n+(define_insn \"store_pair_lanes<mode>\"\n+  [(set (match_operand:<VDBL> 0 \"aarch64_mem_pair_lanes_operand\" \"=Uml, Uml\")\n+\t(vec_concat:<VDBL>\n+\t   (match_operand:VDC 1 \"register_operand\" \"w, r\")\n+\t   (match_operand:VDC 2 \"register_operand\" \"w, r\")))]\n+  \"TARGET_SIMD\"\n+  \"@\n+   stp\\\\t%d1, %d2, %0\n+   stp\\\\t%x1, %x2, %0\"\n+  [(set_attr \"type\" \"neon_stp, store_16\")]\n+)\n+\n ;; In this insn, operand 1 should be low, and operand 2 the high part of the\n ;; dest vector.\n "}, {"sha": "af4143ef756464afac29d17f124b436520f90451", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7692ce17a3383c956400a55af88d4ff500dd614a/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7692ce17a3383c956400a55af88d4ff500dd614a/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=7692ce17a3383c956400a55af88d4ff500dd614a", "patch": "@@ -171,6 +171,15 @@\n        (match_test \"aarch64_legitimate_address_p (GET_MODE (op), XEXP (op, 0),\n \t\t\t\t\t\t  PARALLEL, 1)\")))\n \n+;; Used for storing two 64-bit values in an AdvSIMD register using an STP\n+;; as a 128-bit vec_concat.\n+(define_memory_constraint \"Uml\"\n+  \"@internal\n+  A memory address suitable for a load/store pair operation.\"\n+  (and (match_code \"mem\")\n+       (match_test \"aarch64_legitimate_address_p (DFmode, XEXP (op, 0),\n+\t\t\t\t\t\t   PARALLEL, 1)\")))\n+\n (define_memory_constraint \"Utv\"\n   \"@internal\n    An address valid for loading/storing opaque structure"}, {"sha": "2eaf0a7630169c3f4c23632d2a90be9ca15680df", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7692ce17a3383c956400a55af88d4ff500dd614a/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7692ce17a3383c956400a55af88d4ff500dd614a/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=7692ce17a3383c956400a55af88d4ff500dd614a", "patch": "@@ -189,6 +189,13 @@\n        (match_test \"aarch64_legitimate_address_p (mode, XEXP (op, 0), PARALLEL,\n \t\t\t\t\t       0)\")))\n \n+;; Used for storing two 64-bit values in an AdvSIMD register using an STP\n+;; as a 128-bit vec_concat.\n+(define_predicate \"aarch64_mem_pair_lanes_operand\"\n+  (and (match_code \"mem\")\n+       (match_test \"aarch64_legitimate_address_p (DFmode, XEXP (op, 0),\n+\t\t\t\t\t\t   PARALLEL, 1)\")))\n+\n (define_predicate \"aarch64_prefetch_operand\"\n   (match_test \"aarch64_address_valid_for_prefetch_p (op, false)\"))\n "}, {"sha": "d20cadc232376ffff70cc96a046a5595cd03e04b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7692ce17a3383c956400a55af88d4ff500dd614a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7692ce17a3383c956400a55af88d4ff500dd614a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7692ce17a3383c956400a55af88d4ff500dd614a", "patch": "@@ -1,3 +1,7 @@\n+2017-11-08  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/store_v2vec_lanes.c: New test.\n+\n 2017-11-08  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/load_v2vec_lanes_1.c: New test."}, {"sha": "6810db3c54dce81777caf062177facedb464d1d6", "filename": "gcc/testsuite/gcc.target/aarch64/store_v2vec_lanes.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7692ce17a3383c956400a55af88d4ff500dd614a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstore_v2vec_lanes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7692ce17a3383c956400a55af88d4ff500dd614a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstore_v2vec_lanes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstore_v2vec_lanes.c?ref=7692ce17a3383c956400a55af88d4ff500dd614a", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef long long v2di __attribute__ ((vector_size (16)));\n+typedef double v2df __attribute__ ((vector_size (16)));\n+\n+void\n+construct_lane_1 (double *y, v2df *z)\n+{\n+  double y0 = y[0] + 1;\n+  double y1 = y[1] + 2;\n+  v2df x = {y0, y1};\n+  z[2] = x;\n+}\n+\n+void\n+construct_lane_2 (long long *y, v2di *z)\n+{\n+  long long y0 = y[0] + 1;\n+  long long y1 = y[1] + 2;\n+  v2di x = {y0, y1};\n+  z[2] = x;\n+}\n+\n+/* We can use the load_pair_lanes<mode> pattern to vec_concat two DI/DF\n+   values from consecutive memory into a 2-element vector by using\n+   a Q-reg LDR.  */\n+\n+/* { dg-final { scan-assembler-times \"stp\\td\\[0-9\\]+, d\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"stp\\tx\\[0-9\\]+, x\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-not \"ins\\t\" } } */"}]}