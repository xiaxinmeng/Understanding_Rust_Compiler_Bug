{"sha": "8fd05cb0e70cfd8325a6af95bc3e724fa59d99a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZkMDVjYjBlNzBjZmQ4MzI1YTZhZjk1YmMzZTcyNGZhNTlkOTlhMw==", "commit": {"author": {"name": "Vadim Egorov", "email": "egorovv@mailandnews.com", "date": "2000-05-02T04:50:23Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-05-02T04:50:23Z"}, "message": "2000-05-01  Vadim Egorov  <egorovv@@mailandnews.com>\n\n        * bits/char_traits.h: Fix parameter types.\n        * bits/string.tcc: Avoid traits_type::move.\n\nFrom-SVN: r33603", "tree": {"sha": "556df14f76cfd77436bf29613add4e052a437a62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/556df14f76cfd77436bf29613add4e052a437a62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fd05cb0e70cfd8325a6af95bc3e724fa59d99a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd05cb0e70cfd8325a6af95bc3e724fa59d99a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fd05cb0e70cfd8325a6af95bc3e724fa59d99a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd05cb0e70cfd8325a6af95bc3e724fa59d99a3/comments", "author": null, "committer": null, "parents": [{"sha": "b7805411a0e4a53b1a2834ad4570a82aa74ace27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7805411a0e4a53b1a2834ad4570a82aa74ace27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7805411a0e4a53b1a2834ad4570a82aa74ace27"}], "stats": {"total": 54, "additions": 28, "deletions": 26}, "files": [{"sha": "22a8c93370acede923a8f27f6879b51dce3d90e3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd05cb0e70cfd8325a6af95bc3e724fa59d99a3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd05cb0e70cfd8325a6af95bc3e724fa59d99a3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8fd05cb0e70cfd8325a6af95bc3e724fa59d99a3", "patch": "@@ -1,3 +1,8 @@\n+2000-05-01  Vadim Egorov  <egorovv@@mailandnews.com>\n+\n+        * bits/char_traits.h: Fix parameter types.\n+        * bits/string.tcc: Avoid traits_type::move.\n+\n 2000-05-01  Benjamin Kosnik  <bkoz@haight.constant.com>\n \n \t* src/Makefile.am (AC_CXXFLAGS): Add CPUFLAGS here."}, {"sha": "ae46dd29addb444976bd70c66115af1fd8b65c48", "filename": "libstdc++-v3/bits/char_traits.h", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd05cb0e70cfd8325a6af95bc3e724fa59d99a3/libstdc%2B%2B-v3%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd05cb0e70cfd8325a6af95bc3e724fa59d99a3/libstdc%2B%2B-v3%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fchar_traits.h?ref=8fd05cb0e70cfd8325a6af95bc3e724fa59d99a3", "patch": "@@ -1,6 +1,6 @@\n-// Character Traits for use by standard string and iostream\n+// Character Traits for use by standard string and iostream -*- C++ -*-\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -79,9 +79,9 @@ namespace std {\n       { return __c1 < __c2; }\n \n       static int \n-      compare(const char_type* __s1, const char_type* __s2, int_type __n)\n+      compare(const char_type* __s1, const char_type* __s2, size_t __n)\n       { \n-\tfor (int_type __i = 0; __i < __n; ++__i)\n+\tfor (size_t __i = 0; __i < __n; ++__i)\n \t  if (!eq(__s1[__i],__s2[__i]))\n \t    return lt(__s1[__i],__s2[__i]) ? -1 : 1;\n \treturn 0; \n@@ -96,25 +96,25 @@ namespace std {\n       }\n \n       static const char_type* \n-      find(const char_type* __s, int __n, const char_type& __a)\n+      find(const char_type* __s, size_t __n, const char_type& __a)\n       { \n-\tfor (const char_type* __p = __s; __p < __s+__n; ++__p)\n+\tfor (const char_type* __p = __s; size_t(__p - __s) < __n; ++__p)\n \t  if (*__p == __a) return __p;\n \treturn 0;\n       }\n \n       static char_type* \n-      move(char_type* __s1, const char_type* __s2, int_type __n)\n+      move(char_type* __s1, const char_type* __s2, size_t __n)\n       { return (char_type*) memmove(__s1, __s2, __n * sizeof(char_type)); }\n \n       static char_type* \n-      copy(char_type* __s1, const char_type* __s2, int_type __n)\n+      copy(char_type* __s1, const char_type* __s2, size_t __n)\n       { return (char_type*) memcpy(__s1, __s2, __n * sizeof(char_type)); }\n \n       static char_type* \n-      assign(char_type* __s, int_type __n, char_type __a)\n+      assign(char_type* __s, size_t __n, char_type __a)\n       { \n-\tfor (char_type* __p = __s; __p - __s < __n; ++__p) \n+\tfor (char_type* __p = __s; __p < __s + __n; ++__p) \n \t  assign(*__p, __a);\n         return __s; \n       }\n@@ -167,27 +167,27 @@ namespace std {\n       { return __c1 < __c2; }\n \n       static int \n-      compare(const char_type* __s1, const char_type* __s2, int_type __n)\n+      compare(const char_type* __s1, const char_type* __s2, size_t __n)\n       { return memcmp(__s1, __s2, __n); }\n \n       static size_t\n       length(const char_type* __s)\n       { return strlen(__s); }\n \n       static const char_type* \n-      find(const char_type* __s, int __n, const char_type& __a)\n+      find(const char_type* __s, size_t __n, const char_type& __a)\n       { return static_cast<char*>(memchr(__s, __a, __n)); }\n \n       static char_type* \n-      move(char_type* __s1, const char_type* __s2, int_type __n)\n+      move(char_type* __s1, const char_type* __s2, size_t __n)\n       { return static_cast<char*>(memmove(__s1, __s2, __n)); }\n \n       static char_type* \n-      copy(char_type* __s1, const char_type* __s2, int_type __n)\n+      copy(char_type* __s1, const char_type* __s2, size_t __n)\n       {  return static_cast<char*>(memcpy(__s1, __s2, __n)); }\n \n       static char_type* \n-      assign(char_type* __s, int_type __n, char_type __a)\n+      assign(char_type* __s, size_t __n, char_type __a)\n       { return static_cast<char*>(memset(__s, __a, __n)); }\n \n       static char_type \n@@ -232,15 +232,17 @@ namespace std {\n       static void \n       assign(char_type& __c1, const char_type& __c2)\n       { __c1 = __c2; }\n+\n       static bool \n       eq(const char_type& __c1, const char_type& __c2)\n       { return __c1 == __c2; }\n+\n       static bool \n       lt(const char_type& __c1, const char_type& __c2)\n       { return __c1 < __c2; }\n \n       static int \n-      compare(const char_type* __s1, const char_type* __s2, int_type __n)\n+      compare(const char_type* __s1, const char_type* __s2, size_t __n)\n       { \n \tfor (int_type __i = 0; __i < __n; ++__i)\n \t  if (!eq(__s1[__i], __s2[__i]))\n@@ -258,9 +260,9 @@ namespace std {\n       }\n \n       static const char_type* \n-      find (const char_type* __s, int __n, const char_type& __a)\n+      find(const char_type* __s, size_t __n, const char_type& __a)\n       { \n-\tfor (const char_type* __p = __s; __p < __s+__n; ++__p)\n+\tfor (const char_type* __p = __s; size_t(__p - __s) < __n; ++__p)\n \t  if (*__p == __a) \n \t    return __p;\n \treturn 0;\n@@ -272,12 +274,12 @@ namespace std {\n \t\t\t\t\t     __n * sizeof(wchar_t))); }\n \n       static char_type* \n-      copy(char_type* __s1, const char_type* __s2, int_type __n)\n+      copy(char_type* __s1, const char_type* __s2, size_t __n)\n       { return static_cast<wchar_t*>(memcpy(__s1, __s2, \n \t\t\t\t\t    __n * sizeof(wchar_t))); }\n \n       static char_type* \n-      assign(char_type* __s, int_type __n, char_type __a)\n+      assign(char_type* __s, size_t __n, char_type __a)\n       { \n \tfor (char_type* __p = __s; __p < __s + __n; ++__p) \n \t  assign(*__p, __a);\n@@ -324,4 +326,3 @@ namespace std {\n \n #endif /* _CPP_BITS_CHAR_TRAITS_H */\n \n-"}, {"sha": "63c0301776ad04779641101c7a1ca7c66b93a66a", "filename": "libstdc++-v3/bits/string.tcc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd05cb0e70cfd8325a6af95bc3e724fa59d99a3/libstdc%2B%2B-v3%2Fbits%2Fstring.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd05cb0e70cfd8325a6af95bc3e724fa59d99a3/libstdc%2B%2B-v3%2Fbits%2Fstring.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fstring.tcc?ref=8fd05cb0e70cfd8325a6af95bc3e724fa59d99a3", "patch": "@@ -280,7 +280,7 @@ namespace std\n \t  _M_rep()->_M_dispose(__a);\n \t  _M_data(__r->_M_refdata());\n       }\n-      else if (__how_much)\n+      else if (__how_much && __len1 != __len2)\n \t{\n \t  // Work in-place\n \t  traits_type::move(_M_data() + __pos + __len2, __src, __how_much);\n@@ -851,7 +851,3 @@ namespace std\n } // std::\n \n #endif /* _CPP_BITS_STRING_TCC */\n-\n-// Local Variables:\n-// mode:c++\n-// End:"}]}