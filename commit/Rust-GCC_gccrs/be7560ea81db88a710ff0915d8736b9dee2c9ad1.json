{"sha": "be7560ea81db88a710ff0915d8736b9dee2c9ad1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU3NTYwZWE4MWRiODhhNzEwZmYwOTE1ZDg3MzZiOWRlZTJjOWFkMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-07-22T16:02:06Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-07-22T16:02:06Z"}, "message": "alpha.c (get_trap_mode_suffix): New.\n\n        * config/alpha/alpha.c (get_trap_mode_suffix): New.\n        (get_round_mode_suffix): New.\n        (print_operand): Use them for [/].  Remove support for [&'`()+].\n        * config/alpha/alpha.h (PRINT_OPERAND_PUNCT_VALID_P): Update.\n        * config/alpha/alpha.md (attr round_suffix): New.\n        (attr trap_suffix): New.\n        (all insns): Set them appropriately.  Use %/ instead of the\n        myriad punctuators.\n\nFrom-SVN: r44242", "tree": {"sha": "9c99ee469b759dab00020b09cc45210c771569e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c99ee469b759dab00020b09cc45210c771569e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be7560ea81db88a710ff0915d8736b9dee2c9ad1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be7560ea81db88a710ff0915d8736b9dee2c9ad1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be7560ea81db88a710ff0915d8736b9dee2c9ad1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be7560ea81db88a710ff0915d8736b9dee2c9ad1/comments", "author": null, "committer": null, "parents": [{"sha": "e5d4fff46599ec82874600968810e4e0b0b4aee7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5d4fff46599ec82874600968810e4e0b0b4aee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5d4fff46599ec82874600968810e4e0b0b4aee7"}], "stats": {"total": 532, "additions": 324, "deletions": 208}, "files": [{"sha": "33f5f29ff5795d25337fe14448c7f0bf908bd2d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be7560ea81db88a710ff0915d8736b9dee2c9ad1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be7560ea81db88a710ff0915d8736b9dee2c9ad1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be7560ea81db88a710ff0915d8736b9dee2c9ad1", "patch": "@@ -1,3 +1,14 @@\n+2001-07-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (get_trap_mode_suffix): New.\n+\t(get_round_mode_suffix): New.\n+\t(print_operand): Use them for [/].  Remove support for [&'`()+].\n+\t* config/alpha/alpha.h (PRINT_OPERAND_PUNCT_VALID_P): Update.\n+\t* config/alpha/alpha.md (attr round_suffix): New.\n+\t(attr trap_suffix): New.\n+\t(all insns): Set them appropriately.  Use %/ instead of the\n+\tmyriad punctuators.\n+\n 2001-07-22  Neil Booth  <neil@cat.daikokuya.demon.co.uk>\n \n \t* dbxout.c, sdbout.c, varasm.c: Revert most recent debug patch."}, {"sha": "1abf97b5a46a77bb21eee2b1ff7eb0099cb492f3", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 95, "deletions": 82, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be7560ea81db88a710ff0915d8736b9dee2c9ad1/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be7560ea81db88a710ff0915d8736b9dee2c9ad1/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=be7560ea81db88a710ff0915d8736b9dee2c9ad1", "patch": "@@ -119,6 +119,10 @@ static int alpha_does_function_need_gp\n   PARAMS ((void));\n static int alpha_ra_ever_killed\n   PARAMS ((void));\n+static const char *get_trap_mode_suffix\n+  PARAMS ((void));\n+static const char *get_round_mode_suffix\n+  PARAMS ((void));\n static rtx set_frame_related_p\n   PARAMS ((void));\n static const char *alpha_lookup_xfloating_lib_func\n@@ -3719,132 +3723,141 @@ alpha_ra_ever_killed ()\n }\n \n \f\n-/* Print an operand.  Recognize special options, documented below.  */\n+/* Return the trap mode suffix applicable to the current\n+   instruction, or NULL.   */\n \n-void\n-print_operand (file, x, code)\n-    FILE *file;\n-    rtx x;\n-    int code;\n+static const char *\n+get_trap_mode_suffix ()\n {\n-  int i;\n+  enum attr_trap_suffix s = get_attr_trap_suffix (current_output_insn);\n \n-  switch (code)\n+  switch (s)\n     {\n-    case '~':\n-      /* Print the assembler name of the current function.  */\n-      assemble_name (file, alpha_fnname);\n-      break;\n-\n-    case '&':\n-      /* Generates fp-rounding mode suffix: nothing for normal, 'c' for\n-\t chopped, 'm' for minus-infinity, and 'd' for dynamic rounding\n-\t mode.  alpha_fprm controls which suffix is generated.  */\n-      switch (alpha_fprm)\n-\t{\n-\tcase ALPHA_FPRM_NORM:\n-\t  break;\n-\tcase ALPHA_FPRM_MINF: \n-\t  fputc ('m', file);\n-\t  break;\n-\tcase ALPHA_FPRM_CHOP:\n-\t  fputc ('c', file);\n-\t  break;\n-\tcase ALPHA_FPRM_DYN:\n-\t  fputc ('d', file);\n-\t  break;\n-\tdefault:\n-\t  abort ();\n-\t}\n-      break;\n+    case TRAP_SUFFIX_NONE:\n+      return NULL;\n \n-    case '\\'':\n-      /* Generates trap-mode suffix for instructions that accept the su\n-\t suffix only (cmpt et al).  */\n+    case TRAP_SUFFIX_SU:\n       if (alpha_fptm >= ALPHA_FPTM_SU)\n-\tfputs (\"su\", file);\n-      break;\n+\treturn \"su\";\n+      return NULL;\n \n-    case '`':\n-      /* Generates trap-mode suffix for instructions that accept the\n-\t v and sv suffix.  The only instruction that needs this is cvtql.  */\n+    case TRAP_SUFFIX_SUI:\n+      if (alpha_fptm >= ALPHA_FPTM_SUI)\n+\treturn \"sui\";\n+      return NULL;\n+\n+    case TRAP_SUFFIX_V_SV:\n       switch (alpha_fptm)\n \t{\n \tcase ALPHA_FPTM_N:\n-\t  break;\n+\t  return NULL;\n \tcase ALPHA_FPTM_U:\n-\t  fputs (\"v\", file);\n-\t  break;\n+\t  return \"v\";\n \tcase ALPHA_FPTM_SU:\n \tcase ALPHA_FPTM_SUI:\n-\t  fputs (\"sv\", file);\n-\t  break;\n+\t  return \"sv\";\n \t}\n       break;\n \n-    case '(':\n-      /* Generates trap-mode suffix for instructions that accept the\n-\t v, sv, and svi suffix.  The only instruction that needs this\n-\t is cvttq.  */\n+    case TRAP_SUFFIX_V_SV_SVI:\n       switch (alpha_fptm)\n \t{\n \tcase ALPHA_FPTM_N:\n-\t  break;\n+\t  return NULL;\n \tcase ALPHA_FPTM_U:\n-\t  fputs (\"v\", file);\n-\t  break;\n+\t  return \"v\";\n \tcase ALPHA_FPTM_SU:\n-\t  fputs (\"sv\", file);\n-\t  break;\n+\t  return \"sv\";\n \tcase ALPHA_FPTM_SUI:\n-\t  fputs (\"svi\", file);\n-\t  break;\n+\t  return \"svi\";\n \t}\n       break;\n \n-    case ')':\n-      /* Generates trap-mode suffix for instructions that accept the u, su,\n-\t and sui suffix.  This is the bulk of the IEEE floating point\n-\t instructions (addt et al).  */\n+    case TRAP_SUFFIX_U_SU_SUI:\n       switch (alpha_fptm)\n \t{\n \tcase ALPHA_FPTM_N:\n-\t  break;\n+\t  return NULL;\n \tcase ALPHA_FPTM_U:\n-\t  fputc ('u', file);\n-\t  break;\n+\t  return \"u\";\n \tcase ALPHA_FPTM_SU:\n-\t  fputs (\"su\", file);\n-\t  break;\n+\t  return \"su\";\n \tcase ALPHA_FPTM_SUI:\n-\t  fputs (\"sui\", file);\n-\t  break;\n+\t  return \"sui\";\n \t}\n       break;\n+    }\n+  abort ();\n+}\n \n-    case '+':\n-      /* Generates trap-mode suffix for instructions that accept the sui\n-\t suffix (cvtqt and cvtqs).  */\n-      switch (alpha_fptm)\n+/* Return the rounding mode suffix applicable to the current\n+   instruction, or NULL.   */\n+\n+static const char *\n+get_round_mode_suffix ()\n+{\n+  enum attr_round_suffix s = get_attr_round_suffix (current_output_insn);\n+\n+  switch (s)\n+    {\n+    case ROUND_SUFFIX_NONE:\n+      return NULL;\n+    case ROUND_SUFFIX_NORMAL:\n+      switch (alpha_fprm)\n \t{\n-\tcase ALPHA_FPTM_N:\n-\tcase ALPHA_FPTM_U:\n-\tcase ALPHA_FPTM_SU:\t/* cvtqt/cvtqs can't cause underflow */\n-\t  break;\n-\tcase ALPHA_FPTM_SUI:\n-\t  fputs (\"sui\", file);\n-\t  break;\n+\tcase ALPHA_FPRM_NORM:\n+\t  return NULL;\n+\tcase ALPHA_FPRM_MINF: \n+\t  return \"m\";\n+\tcase ALPHA_FPRM_CHOP:\n+\t  return \"c\";\n+\tcase ALPHA_FPRM_DYN:\n+\t  return \"d\";\n \t}\n       break;\n \n+    case ROUND_SUFFIX_C:\n+      return \"c\";\n+    }\n+  abort ();\n+}\n+\n+/* Print an operand.  Recognize special options, documented below.  */\n+\n+void\n+print_operand (file, x, code)\n+    FILE *file;\n+    rtx x;\n+    int code;\n+{\n+  int i;\n+\n+  switch (code)\n+    {\n+    case '~':\n+      /* Print the assembler name of the current function.  */\n+      assemble_name (file, alpha_fnname);\n+      break;\n+\n+    case '/':\n+      {\n+\tconst char *trap = get_trap_mode_suffix ();\n+\tconst char *round = get_round_mode_suffix ();\n+\n+\tif (trap || round)\n+\t  fprintf (file, \"/%s%s\", (trap ? trap : \"\"), (round ? round : \"\"));\n+\n+\tbreak;\n+      }\n+\n     case ',':\n       /* Generates single precision instruction suffix.  */\n-      fprintf (file, \"%c\", (TARGET_FLOAT_VAX ? 'f' : 's'));\n+      fputc ((TARGET_FLOAT_VAX ? 'f' : 's'), file);\n       break;\n \n     case '-':\n       /* Generates double precision instruction suffix.  */\n-      fprintf (file, \"%c\", (TARGET_FLOAT_VAX ? 'g' : 't'));\n+      fputc ((TARGET_FLOAT_VAX ? 'g' : 't'), file);\n       break;\n \n     case 'r':"}, {"sha": "47cc003b662f9b3872408858e7c8c76409993b80", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be7560ea81db88a710ff0915d8736b9dee2c9ad1/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be7560ea81db88a710ff0915d8736b9dee2c9ad1/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=be7560ea81db88a710ff0915d8736b9dee2c9ad1", "patch": "@@ -2234,26 +2234,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n    ~    Generates the name of the current function.\n \n-   &\tGenerates fp-rounding mode suffix: nothing for normal, 'c' for\n-   \tchopped, 'm' for minus-infinity, and 'd' for dynamic rounding\n-\tmode.  alpha_fprm controls which suffix is generated.\n-\n-   '\tGenerates trap-mode suffix for instructions that accept the\n-        su suffix only (cmpt et al).\n-\n-   `    Generates trap-mode suffix for instructions that accept the\n-\tv and sv suffix.  The only instruction that needs this is cvtql.\n-\n-   (\tGenerates trap-mode suffix for instructions that accept the\n-\tv, sv, and svi suffix.  The only instruction that needs this\n-\tis cvttq.\n-\n-   )    Generates trap-mode suffix for instructions that accept the\n-\tu, su, and sui suffix.  This is the bulk of the IEEE floating\n-\tpoint instructions (addt et al).\n-\n-   +    Generates trap-mode suffix for instructions that accept the\n-\tsui suffix (cvtqt and cvtqs).\n+   /\tGenerates the instruction suffix.  The TRAP_SUFFIX and ROUND_SUFFIX\n+\tattributes are examined to determine what is appropriate.\n \n    ,    Generates single precision suffix for floating point\n \tinstructions (s for IEEE, f for VAX)\n@@ -2262,10 +2244,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n \tinstructions (t for IEEE, g for VAX)\n    */\n \n-#define PRINT_OPERAND_PUNCT_VALID_P(CODE)\t\t\t\t\\\n-  ((CODE) == '&' || (CODE) == '`' || (CODE) == '\\'' || (CODE) == '('\t\\\n-   || (CODE) == ')' || (CODE) == '+' || (CODE) == ',' || (CODE) == '-'\t\\\n-   || (CODE) == '~')\n+#define PRINT_OPERAND_PUNCT_VALID_P(CODE) \\\n+  ((CODE) == '/' || (CODE) == ',' || (CODE) == '-' || (CODE) == '~')\n \f\n /* Print a memory address as an operand to reference that memory location.  */\n "}, {"sha": "b40811869a8339e9c3e7ec4afe01f344d3ff6e5b", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 214, "deletions": 102, "changes": 316, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be7560ea81db88a710ff0915d8736b9dee2c9ad1/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be7560ea81db88a710ff0915d8736b9dee2c9ad1/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=be7560ea81db88a710ff0915d8736b9dee2c9ad1", "patch": "@@ -72,17 +72,40 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n ;; Define the operand size an insn operates on.  Used primarily by mul\n ;; and div operations that have size dependant timings.\n \n-(define_attr \"opsize\" \"si,di,udi\" (const_string \"di\"))\n+(define_attr \"opsize\" \"si,di,udi\"\n+  (const_string \"di\"))\n \n-;; The TRAP_TYPE attribute marks instructions that may generate traps\n+;; The TRAP attribute marks instructions that may generate traps\n ;; (which are imprecise and may need a trapb if software completion\n ;; is desired).\n \n-(define_attr \"trap\" \"no,yes\" (const_string \"no\"))\n+(define_attr \"trap\" \"no,yes\"\n+  (const_string \"no\"))\n+\n+;; The ROUND_SUFFIX attribute marks which instructions require a\n+;; rounding-mode suffix.  The value NONE indicates no suffix,\n+;; the value NORMAL indicates a suffix controled by alpha_fprm.\n+\n+(define_attr \"round_suffix\" \"none,normal,c\"\n+  (const_string \"none\"))\n+\n+;; The TRAP_SUFFIX attribute marks instructions requiring a trap-mode suffix:\n+;;   NONE\tno suffix\n+;;   SU\t\taccepts only /su (cmpt et al)\n+;;   SUI\taccepts only /sui (cvtqt and cvtqs)\n+;;   V_SV\taccepts /v and /sv (cvtql only)\n+;;   V_SV_SVI\taccepts /v, /sv and /svi (cvttq only)\n+;;   U_SU_SUI\taccepts /u, /su and /sui (most fp instructions)\n+;;\n+;; The actual suffix emitted is controled by alpha_fptm.\n+\n+(define_attr \"trap_suffix\" \"none,su,sui,v_sv,v_sv_svi,u_su_sui\"\n+  (const_string \"none\"))\n \n ;; The length of an instruction sequence in bytes.\n \n-(define_attr \"length\" \"\" (const_int 4))\n+(define_attr \"length\" \"\"\n+  (const_int 4))\n \f\n ;; On EV4 there are two classes of resources to consider: resources needed\n ;; to issue, and resources needed to execute.  IBUS[01] are in the first\n@@ -2006,46 +2029,56 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n \t(plus:SF (match_operand:SF 1 \"reg_or_fp0_operand\" \"%fG\")\n \t\t (match_operand:SF 2 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"add%,%)%& %R1,%R2,%0\"\n+  \"add%,%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"addsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(plus:SF (match_operand:SF 1 \"reg_or_fp0_operand\" \"%fG\")\n \t\t (match_operand:SF 2 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP\"\n-  \"add%,%)%& %R1,%R2,%0\"\n+  \"add%,%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"*adddf_ieee\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n \t(plus:DF (match_operand:DF 1 \"reg_or_fp0_operand\" \"%fG\")\n \t\t (match_operand:DF 2 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"add%-%)%& %R1,%R2,%0\"\n+  \"add%-%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"adddf3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(plus:DF (match_operand:DF 1 \"reg_or_fp0_operand\" \"%fG\")\n \t\t (match_operand:DF 2 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP\"\n-  \"add%-%)%& %R1,%R2,%0\"\n+  \"add%-%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"*adddf_ext1\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(plus:DF (float_extend:DF\n \t\t  (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\"))\n \t\t (match_operand:DF 2 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n-  \"add%-%)%& %R1,%R2,%0\"\n+  \"add%-%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"*adddf_ext2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n@@ -2054,9 +2087,11 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n \t\t (float_extend:DF\n \t\t  (match_operand:SF 2 \"reg_or_fp0_operand\" \"fG\"))))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n-  \"add%-%)%& %R1,%R2,%0\"\n+  \"add%-%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_expand \"addtf3\"\n   [(use (match_operand 0 \"register_operand\" \"\"))\n@@ -2079,9 +2114,10 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n \t(unspec:SI [(match_operand:DI 1 \"reg_or_fp0_operand\" \"fG\")]\n \t\t   UNSPEC_CVTQL))]\n   \"TARGET_FP\"\n-  \"cvtql%` %R1,%0\"\n+  \"cvtql%/ %R1,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"trap_suffix\" \"v_sv\")])\n \n (define_insn_and_split \"*fix_truncdfsi_ieee\"\n   [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n@@ -2117,17 +2153,21 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n   [(set (match_operand:DI 0 \"reg_no_subreg_operand\" \"=&f\")\n \t(fix:DI (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"cvt%-q%(c %R1,%0\"\n+  \"cvt%-q%/ %R1,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"c\")\n+   (set_attr \"trap_suffix\" \"v_sv_svi\")])\n \n (define_insn \"fix_truncdfdi2\"\n   [(set (match_operand:DI 0 \"reg_no_subreg_operand\" \"=f\")\n \t(fix:DI (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP\"\n-  \"cvt%-q%(c %R1,%0\"\n+  \"cvt%-q%/ %R1,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"c\")\n+   (set_attr \"trap_suffix\" \"v_sv_svi\")])\n \n ;; Likewise between SFmode and SImode.\n \n@@ -2168,18 +2208,22 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n \t(fix:DI (float_extend:DF\n \t\t (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\"))))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"cvt%-q%(c %R1,%0\"\n+  \"cvt%-q%/ %R1,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"c\")\n+   (set_attr \"trap_suffix\" \"v_sv_svi\")])\n \n (define_insn \"fix_truncsfdi2\"\n   [(set (match_operand:DI 0 \"reg_no_subreg_operand\" \"=f\")\n \t(fix:DI (float_extend:DF\n \t\t (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\"))))]\n   \"TARGET_FP\"\n-  \"cvt%-q%(c %R1,%0\"\n+  \"cvt%-q%/ %R1,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"c\")\n+   (set_attr \"trap_suffix\" \"v_sv_svi\")])\n \n (define_expand \"fix_trunctfdi2\"\n   [(use (match_operand:DI 0 \"register_operand\" \"\"))\n@@ -2191,33 +2235,41 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=&f\")\n \t(float:SF (match_operand:DI 1 \"reg_no_subreg_operand\" \"f\")))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"cvtq%,%+%& %1,%0\"\n+  \"cvtq%,%/ %1,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"sui\")])\n \n (define_insn \"floatdisf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(float:SF (match_operand:DI 1 \"reg_no_subreg_operand\" \"f\")))]\n   \"TARGET_FP\"\n-  \"cvtq%,%+%& %1,%0\"\n+  \"cvtq%,%/ %1,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"sui\")])\n \n (define_insn \"*floatdidf_ieee\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n \t(float:DF (match_operand:DI 1 \"reg_no_subreg_operand\" \"f\")))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"cvtq%-%+%& %1,%0\"\n+  \"cvtq%-%/ %1,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"sui\")])\n \n (define_insn \"floatdidf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(float:DF (match_operand:DI 1 \"reg_no_subreg_operand\" \"f\")))]\n   \"TARGET_FP\"\n-  \"cvtq%-%+%& %1,%0\"\n+  \"cvtq%-%/ %1,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"sui\")])\n \n (define_expand \"floatditf2\"\n   [(use (match_operand:TF 0 \"register_operand\" \"\"))\n@@ -2291,17 +2343,21 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=&f\")\n \t(float_truncate:SF (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"cvt%-%,%)%& %R1,%0\"\n+  \"cvt%-%,%/ %R1,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"truncdfsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(float_truncate:SF (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP\"\n-  \"cvt%-%,%)%& %R1,%0\"\n+  \"cvt%-%,%/ %R1,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_expand \"trunctfdf2\"\n   [(use (match_operand:DF 0 \"register_operand\" \"\"))\n@@ -2340,66 +2396,80 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n \t(div:SF (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\")\n \t\t(match_operand:SF 2 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"div%,%)%& %R1,%R2,%0\"\n+  \"div%,%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fdiv\")\n    (set_attr \"opsize\" \"si\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"divsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(div:SF (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\")\n \t\t(match_operand:SF 2 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP\"\n-  \"div%,%)%& %R1,%R2,%0\"\n+  \"div%,%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fdiv\")\n    (set_attr \"opsize\" \"si\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"*divdf3_ieee\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n \t(div:DF (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")\n \t\t(match_operand:DF 2 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"div%-%)%& %R1,%R2,%0\"\n+  \"div%-%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fdiv\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"divdf3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(div:DF (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")\n \t\t(match_operand:DF 2 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP\"\n-  \"div%-%)%& %R1,%R2,%0\"\n+  \"div%-%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fdiv\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"*divdf_ext1\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(div:DF (float_extend:DF (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\"))\n \t\t(match_operand:DF 2 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n-  \"div%-%)%& %R1,%R2,%0\"\n+  \"div%-%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fdiv\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"*divdf_ext2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(div:DF (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")\n \t\t(float_extend:DF\n \t\t (match_operand:SF 2 \"reg_or_fp0_operand\" \"fG\"))))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n-  \"div%-%)%& %R1,%R2,%0\"\n+  \"div%-%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fdiv\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"*divdf_ext3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(div:DF (float_extend:DF (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\"))\n \t\t(float_extend:DF (match_operand:SF 2 \"reg_or_fp0_operand\" \"fG\"))))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n-  \"div%-%)%& %R1,%R2,%0\"\n+  \"div%-%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fdiv\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_expand \"divtf3\"\n   [(use (match_operand 0 \"register_operand\" \"\"))\n@@ -2413,46 +2483,56 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n \t(mult:SF (match_operand:SF 1 \"reg_or_fp0_operand\" \"%fG\")\n \t\t (match_operand:SF 2 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"mul%,%)%& %R1,%R2,%0\"\n+  \"mul%,%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fmul\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"mulsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(mult:SF (match_operand:SF 1 \"reg_or_fp0_operand\" \"%fG\")\n \t\t (match_operand:SF 2 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP\"\n-  \"mul%,%)%& %R1,%R2,%0\"\n+  \"mul%,%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fmul\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"*muldf3_ieee\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n \t(mult:DF (match_operand:DF 1 \"reg_or_fp0_operand\" \"%fG\")\n \t\t (match_operand:DF 2 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"mul%-%)%& %R1,%R2,%0\"\n+  \"mul%-%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fmul\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"muldf3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(mult:DF (match_operand:DF 1 \"reg_or_fp0_operand\" \"%fG\")\n \t\t (match_operand:DF 2 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP\"\n-  \"mul%-%)%& %R1,%R2,%0\"\n+  \"mul%-%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fmul\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"*muldf_ext1\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(mult:DF (float_extend:DF\n \t\t  (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\"))\n \t\t (match_operand:DF 2 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n-  \"mul%-%)%& %R1,%R2,%0\"\n+  \"mul%-%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fmul\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"*muldf_ext2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n@@ -2461,9 +2541,11 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n \t\t (float_extend:DF\n \t\t  (match_operand:SF 2 \"reg_or_fp0_operand\" \"fG\"))))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n-  \"mul%-%)%& %R1,%R2,%0\"\n+  \"mul%-%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fmul\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_expand \"multf3\"\n   [(use (match_operand 0 \"register_operand\" \"\"))\n@@ -2477,56 +2559,68 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n \t(minus:SF (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\")\n \t\t  (match_operand:SF 2 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"sub%,%)%& %R1,%R2,%0\"\n+  \"sub%,%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"subsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(minus:SF (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\")\n \t\t  (match_operand:SF 2 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP\"\n-  \"sub%,%)%& %R1,%R2,%0\"\n+  \"sub%,%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"*subdf3_ieee\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n \t(minus:DF (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")\n \t\t  (match_operand:DF 2 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"sub%-%)%& %R1,%R2,%0\"\n+  \"sub%-%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"subdf3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(minus:DF (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")\n \t\t  (match_operand:DF 2 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP\"\n-  \"sub%-%)%& %R1,%R2,%0\"\n+  \"sub%-%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"*subdf_ext1\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(minus:DF (float_extend:DF\n \t\t   (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\"))\n \t\t  (match_operand:DF 2 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n-  \"sub%-%)%& %R1,%R2,%0\"\n+  \"sub%-%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"*subdf_ext2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(minus:DF (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")\n \t\t  (float_extend:DF\n \t\t   (match_operand:SF 2 \"reg_or_fp0_operand\" \"fG\"))))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n-  \"sub%-%)%& %R1,%R2,%0\"\n+  \"sub%-%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"*subdf_ext3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n@@ -2535,9 +2629,11 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n \t\t  (float_extend:DF\n \t\t   (match_operand:SF 2 \"reg_or_fp0_operand\" \"fG\"))))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n-  \"sub%-%)%& %R1,%R2,%0\"\n+  \"sub%-%/ %R1,%R2,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_expand \"subtf3\"\n   [(use (match_operand 0 \"register_operand\" \"\"))\n@@ -2550,35 +2646,43 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=&f\")\n \t(sqrt:SF (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP && TARGET_FIX && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"sqrt%,%)%& %R1,%0\"\n+  \"sqrt%,%/ %R1,%0\"\n   [(set_attr \"type\" \"fsqrt\")\n    (set_attr \"opsize\" \"si\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"sqrtsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(sqrt:SF (match_operand:SF 1 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP && TARGET_FIX\"\n-  \"sqrt%,%)%& %R1,%0\"\n+  \"sqrt%,%/ %R1,%0\"\n   [(set_attr \"type\" \"fsqrt\")\n    (set_attr \"opsize\" \"si\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"*sqrtdf2_ieee\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n \t(sqrt:DF (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP && TARGET_FIX && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"sqrt%-%)%& %R1,%0\"\n+  \"sqrt%-%/ %R1,%0\"\n   [(set_attr \"type\" \"fsqrt\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \n (define_insn \"sqrtdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(sqrt:DF (match_operand:DF 1 \"reg_or_fp0_operand\" \"fG\")))]\n   \"TARGET_FP && TARGET_FIX\"\n-  \"sqrt%-%)%& %1,%0\"\n+  \"sqrt%-%/ %1,%0\"\n   [(set_attr \"type\" \"fsqrt\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"round_suffix\" \"normal\")\n+   (set_attr \"trap_suffix\" \"u_su_sui\")])\n \f\n ;; Next are all the integer comparisons, and conditional moves and branches\n ;; and some of the related define_expand's and define_split's.\n@@ -3135,19 +3239,21 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n \t\t\t   [(match_operand:DF 2 \"reg_or_fp0_operand\" \"fG\")\n \t\t\t    (match_operand:DF 3 \"reg_or_fp0_operand\" \"fG\")]))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"cmp%-%C1%' %R2,%R3,%0\"\n+  \"cmp%-%C1%/ %R2,%R3,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"trap_suffix\" \"su\")])\n \n (define_insn \"*cmpdf_internal\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(match_operator:DF 1 \"alpha_fp_comparison_operator\"\n \t\t\t   [(match_operand:DF 2 \"reg_or_fp0_operand\" \"fG\")\n \t\t\t    (match_operand:DF 3 \"reg_or_fp0_operand\" \"fG\")]))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n-  \"cmp%-%C1%' %R2,%R3,%0\"\n+  \"cmp%-%C1%/ %R2,%R3,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"trap_suffix\" \"su\")])\n \n (define_insn \"*cmpdf_ieee_ext1\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n@@ -3156,9 +3262,10 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n \t\t\t     (match_operand:SF 2 \"reg_or_fp0_operand\" \"fG\"))\n \t\t\t    (match_operand:DF 3 \"reg_or_fp0_operand\" \"fG\")]))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"cmp%-%C1%' %R2,%R3,%0\"\n+  \"cmp%-%C1%/ %R2,%R3,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"trap_suffix\" \"su\")])\n \n (define_insn \"*cmpdf_ext1\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n@@ -3167,9 +3274,10 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n \t\t\t     (match_operand:SF 2 \"reg_or_fp0_operand\" \"fG\"))\n \t\t\t    (match_operand:DF 3 \"reg_or_fp0_operand\" \"fG\")]))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n-  \"cmp%-%C1%' %R2,%R3,%0\"\n+  \"cmp%-%C1%/ %R2,%R3,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"trap_suffix\" \"su\")])\n \n (define_insn \"*cmpdf_ieee_ext2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n@@ -3178,9 +3286,10 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n \t\t\t    (float_extend:DF\n \t\t\t     (match_operand:SF 3 \"reg_or_fp0_operand\" \"fG\"))]))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"cmp%-%C1%' %R2,%R3,%0\"\n+  \"cmp%-%C1%/ %R2,%R3,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"trap_suffix\" \"su\")])\n \n (define_insn \"*cmpdf_ext2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n@@ -3189,9 +3298,10 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n \t\t\t    (float_extend:DF\n \t\t\t     (match_operand:SF 3 \"reg_or_fp0_operand\" \"fG\"))]))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n-  \"cmp%-%C1%' %R2,%R3,%0\"\n+  \"cmp%-%C1%/ %R2,%R3,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"trap_suffix\" \"su\")])\n \n (define_insn \"*cmpdf_ieee_ext3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=&f\")\n@@ -3201,9 +3311,10 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n \t\t\t    (float_extend:DF\n \t\t\t     (match_operand:SF 3 \"reg_or_fp0_operand\" \"fG\"))]))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n-  \"cmp%-%C1%' %R2,%R3,%0\"\n+  \"cmp%-%C1%/ %R2,%R3,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"trap_suffix\" \"su\")])\n \n (define_insn \"*cmpdf_ext3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n@@ -3213,9 +3324,10 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi\"\n \t\t\t    (float_extend:DF\n \t\t\t     (match_operand:SF 3 \"reg_or_fp0_operand\" \"fG\"))]))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n-  \"cmp%-%C1%' %R2,%R3,%0\"\n+  \"cmp%-%C1%/ %R2,%R3,%0\"\n   [(set_attr \"type\" \"fadd\")\n-   (set_attr \"trap\" \"yes\")])\n+   (set_attr \"trap\" \"yes\")\n+   (set_attr \"trap_suffix\" \"su\")])\n \n (define_insn \"*movdfcc_internal\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")"}]}