{"sha": "74828682c7ad2a365bb92249e678f7ff1642ef7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ4Mjg2ODJjN2FkMmEzNjViYjkyMjQ5ZTY3OGY3ZmYxNjQyZWY3Yw==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "drow@mvista.com", "date": "2003-01-26T07:09:41Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2003-01-26T07:09:41Z"}, "message": "hashtab.h (htab_alloc_with_arg, [...]): Add new types.\n\ninclude/\n\t* hashtab.h (htab_alloc_with_arg, htab_free_with_arg): Add new types.\n\t(struct htab): Add alloc_arg, alloc_with_arg_f, free_with_arg_f.\n\t(htab_create_alloc_ex): New prototype.\n\t(htab_set_functions_ex): New prototype.\n\nlibiberty/\n\t* hashtab.c (htab_create_alloc_ex): New function.\n\t(hatab_set_functions_ex): New function.\n\t(htab_delete, htab_expand): Support alternate allocation functions.\n\nFrom-SVN: r61820", "tree": {"sha": "6d5596276a7688cce28dd2bf1d38c4f18a80d06c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d5596276a7688cce28dd2bf1d38c4f18a80d06c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74828682c7ad2a365bb92249e678f7ff1642ef7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74828682c7ad2a365bb92249e678f7ff1642ef7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74828682c7ad2a365bb92249e678f7ff1642ef7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74828682c7ad2a365bb92249e678f7ff1642ef7c/comments", "author": null, "committer": null, "parents": [{"sha": "7890e8f32010931d748d5b60b989ee84e608dfa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7890e8f32010931d748d5b60b989ee84e608dfa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7890e8f32010931d748d5b60b989ee84e608dfa0"}], "stats": {"total": 110, "additions": 106, "deletions": 4}, "files": [{"sha": "17519e0287b1733b70ff8021b1df0a538c8a5d71", "filename": "include/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74828682c7ad2a365bb92249e678f7ff1642ef7c/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74828682c7ad2a365bb92249e678f7ff1642ef7c/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=74828682c7ad2a365bb92249e678f7ff1642ef7c", "patch": "@@ -1,3 +1,10 @@\n+2003-01-26  Daniel Jacobowitz  <drow@mvista.com>\n+\n+\t* hashtab.h (htab_alloc_with_arg, htab_free_with_arg): Add new types.\n+\t(struct htab): Add alloc_arg, alloc_with_arg_f, free_with_arg_f.\n+\t(htab_create_alloc_ex): New prototype.\n+\t(htab_set_functions_ex): New prototype.\n+\n 2002-07-17  Geoffrey Keating  <geoffk@redhat.com>\n \n \t* splay-tree.h (GTY): Define if undefined."}, {"sha": "4995a9a10e05bed4740c29e4ec2b39782d78c17d", "filename": "include/hashtab.h", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74828682c7ad2a365bb92249e678f7ff1642ef7c/include%2Fhashtab.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74828682c7ad2a365bb92249e678f7ff1642ef7c/include%2Fhashtab.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fhashtab.h?ref=74828682c7ad2a365bb92249e678f7ff1642ef7c", "patch": "@@ -1,5 +1,5 @@\n /* An expandable hash tables datatype.  \n-   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by Vladimir Makarov (vmakarov@cygnus.com).\n \n This program is free software; you can redistribute it and/or modify\n@@ -76,10 +76,16 @@ typedef PTR (*htab_alloc) PARAMS ((size_t, size_t));\n /* We also need a free() routine.  */\n typedef void (*htab_free) PARAMS ((PTR));\n \n+/* Memory allocation and deallocation; variants which take an extra\n+   argument.  */\n+typedef PTR (*htab_alloc_with_arg) PARAMS ((void *, size_t, size_t));\n+typedef void (*htab_free_with_arg) PARAMS ((void *, void *));\n+\n /* Hash tables are of the following type.  The structure\n    (implementation) of this type is not needed for using the hash\n    tables.  All work with hash table should be executed only through\n-   functions mentioned below. */\n+   functions mentioned below.  The size of this structure is subject to\n+   change.  */\n \n struct htab GTY(())\n {\n@@ -115,6 +121,11 @@ struct htab GTY(())\n   /* Pointers to allocate/free functions.  */\n   htab_alloc alloc_f;\n   htab_free free_f;\n+\n+  /* Alternate allocate/free functions, which take an extra argument.  */\n+  PTR GTY((skip (\"\"))) alloc_arg;\n+  htab_alloc_with_arg alloc_with_arg_f;\n+  htab_free_with_arg free_with_arg_f;\n };\n \n typedef struct htab *htab_t;\n@@ -128,10 +139,20 @@ extern htab_t\thtab_create_alloc\tPARAMS ((size_t, htab_hash,\n \t\t\t\t\t\t htab_eq, htab_del,\n \t\t\t\t\t\t htab_alloc, htab_free));\n \n+extern htab_t\thtab_create_alloc_ex\tPARAMS ((size_t, htab_hash,\n+\t\t\t\t\t\t    htab_eq, htab_del,\n+\t\t\t\t\t\t    PTR, htab_alloc_with_arg,\n+\t\t\t\t\t\t    htab_free_with_arg));\n+\n /* Backward-compatibility functions.  */\n extern htab_t htab_create PARAMS ((size_t, htab_hash, htab_eq, htab_del));\n extern htab_t htab_try_create PARAMS ((size_t, htab_hash, htab_eq, htab_del));\n \n+extern void\thtab_set_functions_ex\tPARAMS ((htab_t, htab_hash,\n+\t\t\t\t\t\t htab_eq, htab_del,\n+\t\t\t\t\t\t PTR, htab_alloc_with_arg,\n+\t\t\t\t\t\t htab_free_with_arg));\n+\n extern void\thtab_delete\tPARAMS ((htab_t));\n extern void\thtab_empty\tPARAMS ((htab_t));\n "}, {"sha": "da528e9a1a4b4dd1c108630e699026f610b116d0", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74828682c7ad2a365bb92249e678f7ff1642ef7c/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74828682c7ad2a365bb92249e678f7ff1642ef7c/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=74828682c7ad2a365bb92249e678f7ff1642ef7c", "patch": "@@ -1,3 +1,9 @@\n+2003-01-26  Daniel Jacobowitz  <drow@mvista.com>\n+\n+\t* hashtab.c (htab_create_alloc_ex): New function.\n+\t(hatab_set_functions_ex): New function.\n+\t(htab_delete, htab_expand): Support alternate allocation functions.\n+\n 2003-01-24  Christopher Faylor  <cgf@redhat.com>\n \n \t* configure.in: Remove special pex-cygwin consideration."}, {"sha": "0429936e96146f60486f8c1fc73faaea150b4b94", "filename": "libiberty/hashtab.c", "status": "modified", "additions": 70, "deletions": 2, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74828682c7ad2a365bb92249e678f7ff1642ef7c/libiberty%2Fhashtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74828682c7ad2a365bb92249e678f7ff1642ef7c/libiberty%2Fhashtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fhashtab.c?ref=74828682c7ad2a365bb92249e678f7ff1642ef7c", "patch": "@@ -1,5 +1,5 @@\n /* An expandable hash tables datatype.  \n-   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by Vladimir Makarov (vmakarov@cygnus.com).\n \n This file is part of the libiberty library.\n@@ -191,6 +191,63 @@ htab_create_alloc (size, hash_f, eq_f, del_f, alloc_f, free_f)\n   return result;\n }\n \n+/* As above, but use the variants of alloc_f and free_f which accept\n+   an extra argument.  */\n+\n+htab_t\n+htab_create_alloc_ex (size, hash_f, eq_f, del_f, alloc_arg, alloc_f,\n+\t\t      free_f)\n+     size_t size;\n+     htab_hash hash_f;\n+     htab_eq eq_f;\n+     htab_del del_f;\n+     PTR alloc_arg;\n+     htab_alloc_with_arg alloc_f;\n+     htab_free_with_arg free_f;\n+{\n+  htab_t result;\n+\n+  size = higher_prime_number (size);\n+  result = (htab_t) (*alloc_f) (alloc_arg, 1, sizeof (struct htab));\n+  if (result == NULL)\n+    return NULL;\n+  result->entries = (PTR *) (*alloc_f) (alloc_arg, size, sizeof (PTR));\n+  if (result->entries == NULL)\n+    {\n+      if (free_f != NULL)\n+\t(*free_f) (alloc_arg, result);\n+      return NULL;\n+    }\n+  result->size = size;\n+  result->hash_f = hash_f;\n+  result->eq_f = eq_f;\n+  result->del_f = del_f;\n+  result->alloc_arg = alloc_arg;\n+  result->alloc_with_arg_f = alloc_f;\n+  result->free_with_arg_f = free_f;\n+  return result;\n+}\n+\n+/* Update the function pointers and allocation parameter in the htab_t.  */\n+\n+void\n+htab_set_functions_ex (htab, hash_f, eq_f, del_f, alloc_arg, alloc_f, free_f)\n+     htab_t htab;\n+     htab_hash hash_f;\n+     htab_eq eq_f;\n+     htab_del del_f;\n+     PTR alloc_arg;\n+     htab_alloc_with_arg alloc_f;\n+     htab_free_with_arg free_f;\n+{\n+  htab->hash_f = hash_f;\n+  htab->eq_f = eq_f;\n+  htab->del_f = del_f;\n+  htab->alloc_arg = alloc_arg;\n+  htab->alloc_with_arg_f = alloc_f;\n+  htab->free_with_arg_f = free_f;\n+}\n+\n /* These functions exist solely for backward compatibility.  */\n \n #undef htab_create\n@@ -234,6 +291,11 @@ htab_delete (htab)\n       (*htab->free_f) (htab->entries);\n       (*htab->free_f) (htab);\n     }\n+  else if (htab->free_with_arg_f != NULL)\n+    {\n+      (*htab->free_with_arg_f) (htab->alloc_arg, htab->entries);\n+      (*htab->free_with_arg_f) (htab->alloc_arg, htab);\n+    }\n }\n \n /* This function clears all entries in the given hash table.  */\n@@ -313,7 +375,11 @@ htab_expand (htab)\n \n   nsize = higher_prime_number (htab->size * 2);\n \n-  nentries = (PTR *) (*htab->alloc_f) (nsize, sizeof (PTR));\n+  if (htab->alloc_with_arg_f != NULL)\n+    nentries = (PTR *) (*htab->alloc_with_arg_f) (htab->alloc_arg, nsize,\n+\t\t\t\t\t\t  sizeof (PTR *));\n+  else\n+    nentries = (PTR *) (*htab->alloc_f) (nsize, sizeof (PTR *));\n   if (nentries == NULL)\n     return 0;\n   htab->entries = nentries;\n@@ -340,6 +406,8 @@ htab_expand (htab)\n \n   if (htab->free_f != NULL)\n     (*htab->free_f) (oentries);\n+  else if (htab->free_with_arg_f != NULL)\n+    (*htab->free_with_arg_f) (htab->alloc_arg, oentries);\n   return 1;\n }\n "}]}