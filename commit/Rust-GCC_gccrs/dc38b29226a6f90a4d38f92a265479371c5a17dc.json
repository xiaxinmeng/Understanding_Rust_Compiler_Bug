{"sha": "dc38b29226a6f90a4d38f92a265479371c5a17dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMzOGIyOTIyNmE2ZjkwYTRkMzhmOTJhMjY1NDc5MzcxYzVhMTdkYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-02-15T13:42:02Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-02-15T13:42:02Z"}, "message": "(expand_divmod): prefer divmod in same mode over div in wider mode.\n\nFrom-SVN: r13638", "tree": {"sha": "2d59a46a1e5e307b82faf9ba6fd616174a93749a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d59a46a1e5e307b82faf9ba6fd616174a93749a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc38b29226a6f90a4d38f92a265479371c5a17dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc38b29226a6f90a4d38f92a265479371c5a17dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc38b29226a6f90a4d38f92a265479371c5a17dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc38b29226a6f90a4d38f92a265479371c5a17dc/comments", "author": null, "committer": null, "parents": [{"sha": "2d20490118113ac8f4399720d721fcfa9a1bfcf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d20490118113ac8f4399720d721fcfa9a1bfcf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d20490118113ac8f4399720d721fcfa9a1bfcf8"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "65fb007da57ea969e872d1566f74535e483f15a4", "filename": "gcc/expmed.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc38b29226a6f90a4d38f92a265479371c5a17dc/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc38b29226a6f90a4d38f92a265479371c5a17dc/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=dc38b29226a6f90a4d38f92a265479371c5a17dc", "patch": "@@ -3661,11 +3661,18 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \t    return gen_lowpart (mode, remainder);\n \t}\n \n-      /* Produce the quotient.  */\n-      /* Try a quotient insn, but not a library call.  */\n-      quotient = sign_expand_binop (compute_mode, udiv_optab, sdiv_optab,\n-\t\t\t\t    op0, op1, rem_flag ? NULL_RTX : target,\n-\t\t\t\t    unsignedp, OPTAB_WIDEN);\n+      /* Produce the quotient.  Try a quotient insn, but not a library call.\n+\t If we have a divmod in this mode, use it in preference to widening\n+\t the div (for this test we assume it will not fail). Note that optab2\n+\t is set to the one of the two optabs that the call below will use.  */\n+      quotient\n+\t= sign_expand_binop (compute_mode, udiv_optab, sdiv_optab,\n+\t\t\t     op0, op1, rem_flag ? NULL_RTX : target,\n+\t\t\t     unsignedp,\n+\t\t\t     ((optab2->handlers[(int) compute_mode].insn_code\n+\t\t\t       != CODE_FOR_nothing)\n+\t\t\t      ? OPTAB_DIRECT : OPTAB_WIDEN));\n+\n       if (quotient == 0)\n \t{\n \t  /* No luck there.  Try a quotient-and-remainder insn,"}]}