{"sha": "654cd743c88a28fb292f7c2cf5f4b10e4047e7d9", "node_id": "C_kwDOANBUbNoAKDY1NGNkNzQzYzg4YTI4ZmIyOTJmN2MyY2Y1ZjRiMTBlNDA0N2U3ZDk", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-11-16T02:52:56Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-12-03T17:57:06Z"}, "message": "x86: Add -mmove-max=bits and -mstore-max=bits\n\nAdd -mmove-max=bits and -mstore-max=bits to enable 256-bit/512-bit move\nand store, independent of -mprefer-vector-width=bits:\n\n1. Add X86_TUNE_AVX512_MOVE_BY_PIECES and X86_TUNE_AVX512_STORE_BY_PIECES\nwhich are enabled for Intel Sapphire Rapids processor.\n2. Add -mmove-max=bits to set the maximum number of bits can be moved from\nmemory to memory efficiently.  The default value is derived from\nX86_TUNE_AVX512_MOVE_BY_PIECES, X86_TUNE_AVX256_MOVE_BY_PIECES, and the\npreferred vector width.\n3. Add -mstore-max=bits to set the maximum number of bits can be stored to\nmemory efficiently.  The default value is derived from\nX86_TUNE_AVX512_STORE_BY_PIECES, X86_TUNE_AVX256_STORE_BY_PIECES and the\npreferred vector width.\n\ngcc/\n\n\tPR target/103269\n\t* config/i386/i386-expand.c (ix86_expand_builtin): Pass PVW_NONE\n\tand PVW_NONE to ix86_target_string.\n\t* config/i386/i386-options.c (ix86_target_string): Add arguments\n\tfor move_max and store_max.\n\t(ix86_target_string::add_vector_width): New lambda.\n\t(ix86_debug_options): Pass ix86_move_max and ix86_store_max to\n\tix86_target_string.\n\t(ix86_function_specific_print): Pass ptr->x_ix86_move_max and\n\tptr->x_ix86_store_max to ix86_target_string.\n\t(ix86_valid_target_attribute_tree): Handle x_ix86_move_max and\n\tx_ix86_store_max.\n\t(ix86_option_override_internal): Set the default x_ix86_move_max\n\tand x_ix86_store_max.\n\t* config/i386/i386-options.h (ix86_target_string): Add\n\tprefer_vector_width and prefer_vector_width.\n\t* config/i386/i386.h (TARGET_AVX256_MOVE_BY_PIECES): Removed.\n\t(TARGET_AVX256_STORE_BY_PIECES): Likewise.\n\t(MOVE_MAX): Use 64 if ix86_move_max or ix86_store_max ==\n\tPVW_AVX512.  Use 32 if ix86_move_max or ix86_store_max >=\n\tPVW_AVX256.\n\t(STORE_MAX_PIECES): Use 64 if ix86_store_max == PVW_AVX512.\n\tUse 32 if ix86_store_max >= PVW_AVX256.\n\t* config/i386/i386.opt: Add -mmove-max=bits and -mstore-max=bits.\n\t* config/i386/x86-tune.def (X86_TUNE_AVX512_MOVE_BY_PIECES): New.\n\t(X86_TUNE_AVX512_STORE_BY_PIECES): Likewise.\n\t* doc/invoke.texi: Document -mmove-max=bits and -mstore-max=bits.\n\ngcc/testsuite/\n\n\tPR target/103269\n\t* gcc.target/i386/pieces-memcpy-17.c: New test.\n\t* gcc.target/i386/pieces-memcpy-18.c: Likewise.\n\t* gcc.target/i386/pieces-memcpy-19.c: Likewise.\n\t* gcc.target/i386/pieces-memcpy-20.c: Likewise.\n\t* gcc.target/i386/pieces-memcpy-21.c: Likewise.\n\t* gcc.target/i386/pieces-memset-45.c: Likewise.\n\t* gcc.target/i386/pieces-memset-46.c: Likewise.\n\t* gcc.target/i386/pieces-memset-47.c: Likewise.\n\t* gcc.target/i386/pieces-memset-48.c: Likewise.\n\t* gcc.target/i386/pieces-memset-49.c: Likewise.", "tree": {"sha": "722cd27e76fe5cf1dde2a4870a5a1fae1cfff565", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/722cd27e76fe5cf1dde2a4870a5a1fae1cfff565"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "987baa7444a96ac769ba520cfa4f5a64ee647103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/987baa7444a96ac769ba520cfa4f5a64ee647103", "html_url": "https://github.com/Rust-GCC/gccrs/commit/987baa7444a96ac769ba520cfa4f5a64ee647103"}], "stats": {"total": 294, "additions": 276, "deletions": 18}, "files": [{"sha": "2bbb28e5317644e798465130ff467d6ec2d42368", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=654cd743c88a28fb292f7c2cf5f4b10e4047e7d9", "patch": "@@ -12305,6 +12305,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       char *opts = ix86_target_string (bisa, bisa2, 0, 0, NULL, NULL,\n \t\t\t\t       (enum fpmath_unit) 0,\n \t\t\t\t       (enum prefer_vector_width) 0,\n+\t\t\t\t       PVW_NONE, PVW_NONE,\n \t\t\t\t       false, add_abi_p);\n       if (!opts)\n \terror (\"%qE needs unknown isa option\", fndecl);"}, {"sha": "53bd55a12e3595a87ca604b14d3b39edac30f4f9", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 70, "deletions": 5, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=654cd743c88a28fb292f7c2cf5f4b10e4047e7d9", "patch": "@@ -364,6 +364,8 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n \t\t    const char *arch, const char *tune,\n \t\t    enum fpmath_unit fpmath,\n \t\t    enum prefer_vector_width pvw,\n+\t\t    enum prefer_vector_width move_max,\n+\t\t    enum prefer_vector_width store_max,\n \t\t    bool add_nl_p, bool add_abi_p)\n {\n   /* Flag options.  */\n@@ -542,10 +544,10 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n \t}\n     }\n \n-  /* Add -mprefer-vector-width= option.  */\n-  if (pvw)\n+  auto add_vector_width = [&opts, &num] (prefer_vector_width pvw,\n+\t\t\t\t\t const char *cmd)\n     {\n-      opts[num][0] = \"-mprefer-vector-width=\";\n+      opts[num][0] = cmd;\n       switch ((int) pvw)\n \t{\n \tcase PVW_AVX128:\n@@ -563,7 +565,19 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n-    }\n+    };\n+\n+  /* Add -mprefer-vector-width= option.  */\n+  if (pvw)\n+    add_vector_width (pvw, \"-mprefer-vector-width=\");\n+\n+  /* Add -mmove-max= option.  */\n+  if (move_max)\n+    add_vector_width (move_max, \"-mmove-max=\");\n+\n+  /* Add -mstore-max= option.  */\n+  if (store_max)\n+    add_vector_width (store_max, \"-mstore-max=\");\n \n   /* Any options?  */\n   if (num == 0)\n@@ -630,6 +644,7 @@ ix86_debug_options (void)\n \t\t\t\t   target_flags, ix86_target_flags,\n \t\t\t\t   ix86_arch_string, ix86_tune_string,\n \t\t\t\t   ix86_fpmath, prefer_vector_width_type,\n+\t\t\t\t   ix86_move_max, ix86_store_max,\n \t\t\t\t   true, true);\n \n   if (opts)\n@@ -892,7 +907,9 @@ ix86_function_specific_print (FILE *file, int indent,\n     = ix86_target_string (ptr->x_ix86_isa_flags, ptr->x_ix86_isa_flags2,\n \t\t\t  ptr->x_target_flags, ptr->x_ix86_target_flags,\n \t\t\t  NULL, NULL, ptr->x_ix86_fpmath,\n-\t\t\t  ptr->x_prefer_vector_width_type, false, true);\n+\t\t\t  ptr->x_prefer_vector_width_type,\n+\t\t\t  ptr->x_ix86_move_max, ptr->x_ix86_store_max,\n+\t\t\t  false, true);\n \n   gcc_assert (ptr->arch < PROCESSOR_max);\n   fprintf (file, \"%*sarch = %d (%s)\\n\",\n@@ -1318,6 +1335,10 @@ ix86_valid_target_attribute_tree (tree fndecl, tree args,\n   const char *orig_tune_string = opts->x_ix86_tune_string;\n   enum fpmath_unit orig_fpmath_set = opts_set->x_ix86_fpmath;\n   enum prefer_vector_width orig_pvw_set = opts_set->x_prefer_vector_width_type;\n+  enum prefer_vector_width orig_ix86_move_max_set\n+    = opts_set->x_ix86_move_max;\n+  enum prefer_vector_width orig_ix86_store_max_set\n+    = opts_set->x_ix86_store_max;\n   int orig_tune_defaulted = ix86_tune_defaulted;\n   int orig_arch_specified = ix86_arch_specified;\n   char *option_strings[IX86_FUNCTION_SPECIFIC_MAX] = { NULL, NULL };\n@@ -1393,6 +1414,8 @@ ix86_valid_target_attribute_tree (tree fndecl, tree args,\n       opts->x_ix86_tune_string = orig_tune_string;\n       opts_set->x_ix86_fpmath = orig_fpmath_set;\n       opts_set->x_prefer_vector_width_type = orig_pvw_set;\n+      opts_set->x_ix86_move_max = orig_ix86_move_max_set;\n+      opts_set->x_ix86_store_max = orig_ix86_store_max_set;\n       opts->x_ix86_excess_precision = orig_ix86_excess_precision;\n       opts->x_ix86_unsafe_math_optimizations\n \t= orig_ix86_unsafe_math_optimizations;\n@@ -2691,6 +2714,48 @@ ix86_option_override_internal (bool main_args_p,\n       && (opts_set->x_prefer_vector_width_type == PVW_NONE))\n     opts->x_prefer_vector_width_type = PVW_AVX256;\n \n+  if (opts_set->x_ix86_move_max == PVW_NONE)\n+    {\n+      /* Set the maximum number of bits can be moved from memory to\n+\t memory efficiently.  */\n+      if (ix86_tune_features[X86_TUNE_AVX512_MOVE_BY_PIECES])\n+\topts->x_ix86_move_max = PVW_AVX512;\n+      else if (ix86_tune_features[X86_TUNE_AVX256_MOVE_BY_PIECES])\n+\topts->x_ix86_move_max = PVW_AVX256;\n+      else\n+\t{\n+\t  opts->x_ix86_move_max = opts->x_prefer_vector_width_type;\n+\t  if (opts_set->x_ix86_move_max == PVW_NONE)\n+\t    {\n+\t      if (TARGET_AVX512F_P (opts->x_ix86_isa_flags))\n+\t\topts->x_ix86_move_max = PVW_AVX512;\n+\t      else\n+\t\topts->x_ix86_move_max = PVW_AVX128;\n+\t    }\n+\t}\n+    }\n+\n+  if (opts_set->x_ix86_store_max == PVW_NONE)\n+    {\n+      /* Set the maximum number of bits can be stored to memory\n+\t efficiently.  */\n+      if (ix86_tune_features[X86_TUNE_AVX512_STORE_BY_PIECES])\n+\topts->x_ix86_store_max = PVW_AVX512;\n+      else if (ix86_tune_features[X86_TUNE_AVX256_STORE_BY_PIECES])\n+\topts->x_ix86_store_max = PVW_AVX256;\n+      else\n+\t{\n+\t  opts->x_ix86_store_max = opts->x_prefer_vector_width_type;\n+\t  if (opts_set->x_ix86_store_max == PVW_NONE)\n+\t    {\n+\t      if (TARGET_AVX512F_P (opts->x_ix86_isa_flags))\n+\t\topts->x_ix86_store_max = PVW_AVX512;\n+\t      else\n+\t\topts->x_ix86_store_max = PVW_AVX128;\n+\t    }\n+\t}\n+    }\n+\n   if (opts->x_ix86_recip_name)\n     {\n       char *p = ASTRDUP (opts->x_ix86_recip_name);"}, {"sha": "e218e24d15bbf4893219d5d28397237498a4b9b9", "filename": "gcc/config/i386/i386-options.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Fconfig%2Fi386%2Fi386-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Fconfig%2Fi386%2Fi386-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.h?ref=654cd743c88a28fb292f7c2cf5f4b10e4047e7d9", "patch": "@@ -26,8 +26,10 @@ char *ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n \t\t\t  int flags, int flags2,\n \t\t\t  const char *arch, const char *tune,\n \t\t\t  enum fpmath_unit fpmath,\n-\t\t\t  enum prefer_vector_width pvw, bool add_nl_p,\n-\t\t\t  bool add_abi_p);\n+\t\t\t  enum prefer_vector_width pvw,\n+\t\t\t  enum prefer_vector_width move_max,\n+\t\t\t  enum prefer_vector_width store_max,\n+\t\t\t  bool add_nl_p, bool add_abi_p);\n \n extern enum attr_cpu ix86_schedule;\n "}, {"sha": "4f70085d79348e1cc68c168f351ebbf04ab2b9e5", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=654cd743c88a28fb292f7c2cf5f4b10e4047e7d9", "patch": "@@ -408,10 +408,6 @@ extern unsigned char ix86_tune_features[X86_TUNE_LAST];\n \tix86_tune_features[X86_TUNE_AVOID_LEA_FOR_ADDR]\n #define TARGET_SOFTWARE_PREFETCHING_BENEFICIAL \\\n \tix86_tune_features[X86_TUNE_SOFTWARE_PREFETCHING_BENEFICIAL]\n-#define TARGET_AVX256_MOVE_BY_PIECES \\\n-\tix86_tune_features[X86_TUNE_AVX256_MOVE_BY_PIECES]\n-#define TARGET_AVX256_STORE_BY_PIECES \\\n-\tix86_tune_features[X86_TUNE_AVX256_STORE_BY_PIECES]\n #define TARGET_AVX256_SPLIT_REGS \\\n \tix86_tune_features[X86_TUNE_AVX256_SPLIT_REGS]\n #define TARGET_GENERAL_REGS_SSE_SPILL \\\n@@ -1807,12 +1803,13 @@ typedef struct ix86_args {\n    MOVE_MAX_PIECES defaults to MOVE_MAX.  */\n \n #define MOVE_MAX \\\n-  ((TARGET_AVX512F && !TARGET_PREFER_AVX256) \\\n+  ((TARGET_AVX512F \\\n+    && (ix86_move_max == PVW_AVX512 \\\n+\t|| ix86_store_max == PVW_AVX512)) \\\n    ? 64 \\\n    : ((TARGET_AVX \\\n-       && !TARGET_PREFER_AVX128 \\\n-       && (TARGET_AVX256_MOVE_BY_PIECES \\\n-\t   || TARGET_AVX256_STORE_BY_PIECES)) \\\n+       && (ix86_move_max >= PVW_AVX256 \\\n+\t   || ix86_store_max >= PVW_AVX256)) \\\n       ? 32 \\\n       : ((TARGET_SSE2 \\\n \t  && TARGET_SSE_UNALIGNED_LOAD_OPTIMAL \\\n@@ -1825,11 +1822,10 @@ typedef struct ix86_args {\n    store_by_pieces of 16/32/64 bytes.  */\n #define STORE_MAX_PIECES \\\n   (TARGET_INTER_UNIT_MOVES_TO_VEC \\\n-   ? ((TARGET_AVX512F && !TARGET_PREFER_AVX256) \\\n+   ? ((TARGET_AVX512F && ix86_store_max == PVW_AVX512) \\\n       ? 64 \\\n       : ((TARGET_AVX \\\n-\t  && !TARGET_PREFER_AVX128 \\\n-\t  && TARGET_AVX256_STORE_BY_PIECES) \\\n+\t  && ix86_store_max >= PVW_AVX256) \\\n \t  ? 32 \\\n \t  : ((TARGET_SSE2 \\\n \t      && TARGET_SSE_UNALIGNED_STORE_OPTIMAL) \\"}, {"sha": "e1af3e417b0ac092889dda49f314392cb95627be", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=654cd743c88a28fb292f7c2cf5f4b10e4047e7d9", "patch": "@@ -624,6 +624,14 @@ Enum(prefer_vector_width) String(256) Value(PVW_AVX256)\n EnumValue\n Enum(prefer_vector_width) String(512) Value(PVW_AVX512)\n \n+mmove-max=\n+Target RejectNegative Joined Var(ix86_move_max) Enum(prefer_vector_width) Init(PVW_NONE) Save\n+Maximum number of bits that can be moved from memory to memory efficiently.\n+\n+mstore-max=\n+Target RejectNegative Joined Var(ix86_store_max) Enum(prefer_vector_width) Init(PVW_NONE) Save\n+Maximum number of bits that can be stored to memory efficiently.\n+\n ;; ISA support\n \n m32"}, {"sha": "20cb662737848ccde54f0511a31decf9acbc4c6a", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=654cd743c88a28fb292f7c2cf5f4b10e4047e7d9", "patch": "@@ -512,6 +512,16 @@ DEF_TUNE (X86_TUNE_AVX256_MOVE_BY_PIECES, \"avx256_move_by_pieces\",\n DEF_TUNE (X86_TUNE_AVX256_STORE_BY_PIECES, \"avx256_store_by_pieces\",\n \t  m_CORE_AVX512)\n \n+/* X86_TUNE_AVX512_MOVE_BY_PIECES: Optimize move_by_pieces with 512-bit\n+   AVX instructions.  */\n+DEF_TUNE (X86_TUNE_AVX512_MOVE_BY_PIECES, \"avx512_move_by_pieces\",\n+\t  m_SAPPHIRERAPIDS)\n+\n+/* X86_TUNE_AVX512_STORE_BY_PIECES: Optimize store_by_pieces with 512-bit\n+   AVX instructions.  */\n+DEF_TUNE (X86_TUNE_AVX512_STORE_BY_PIECES, \"avx512_store_by_pieces\",\n+\t  m_SAPPHIRERAPIDS)\n+\n /*****************************************************************************/\n /*****************************************************************************/\n /* Historical relics: tuning flags that helps a specific old CPU designs     */"}, {"sha": "510ed079b99374028e38d20f3edbac12d75f7842", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=654cd743c88a28fb292f7c2cf5f4b10e4047e7d9", "patch": "@@ -1394,6 +1394,7 @@ See RS/6000 and PowerPC Options.\n -mcld  -mcx16  -msahf  -mmovbe  -mcrc32 -mmwait @gol\n -mrecip  -mrecip=@var{opt} @gol\n -mvzeroupper  -mprefer-avx128  -mprefer-vector-width=@var{opt} @gol\n+-mmove-max=@var{bits} -mstore-max=@var{bits} @gol\n -mmmx  -msse  -msse2  -msse3  -mssse3  -msse4.1  -msse4.2  -msse4  -mavx @gol\n -mavx2  -mavx512f  -mavx512pf  -mavx512er  -mavx512cd  -mavx512vl @gol\n -mavx512bw  -mavx512dq  -mavx512ifma  -mavx512vbmi  -msha  -maes @gol\n@@ -31872,6 +31873,18 @@ This option instructs GCC to use 128-bit AVX instructions instead of\n This option instructs GCC to use @var{opt}-bit vector width in instructions\n instead of default on the selected platform.\n \n+@item -mmove-max=@var{bits}\n+@opindex mmove-max\n+This option instructs GCC to set the maximum number of bits can be\n+moved from memory to memory efficiently to @var{bits}.  The valid\n+@var{bits} are 128, 256 and 512.\n+\n+@item -mstore-max=@var{bits}\n+@opindex mstore-max\n+This option instructs GCC to set the maximum number of bits can be\n+stored to memory efficiently to @var{bits}.  The valid @var{bits} are\n+128, 256 and 512.\n+\n @table @samp\n @item none\n No extra limitations applied to GCC other than defined by the selected platform."}, {"sha": "28ab7a6d41cd70cc4b637ec31422e93427816d9e", "filename": "gcc/testsuite/gcc.target/i386/pieces-memcpy-17.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-17.c?ref=654cd743c88a28fb292f7c2cf5f4b10e4047e7d9", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=x86-64 -mprefer-vector-width=256 -mavx512f -mmove-max=512\" } */\n+\n+extern char *dst, *src;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memcpy (dst, src, 66);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqu64\\[ \\\\t\\]+\\[^\\n\\]*%zmm\" 2 } } */\n+/* No need to dynamically realign the stack here.  */\n+/* { dg-final { scan-assembler-not \"and\\[^\\n\\r]*%\\[re\\]sp\" } } */\n+/* Nor use a frame pointer.  */\n+/* { dg-final { scan-assembler-not \"%\\[re\\]bp\" } } */"}, {"sha": "b15a0db9ff0ce17db744844cf329b177d620245a", "filename": "gcc/testsuite/gcc.target/i386/pieces-memcpy-18.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-18.c?ref=654cd743c88a28fb292f7c2cf5f4b10e4047e7d9", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=sapphirerapids\" } */\n+\n+extern char *dst, *src;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memcpy (dst, src, 66);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqu64\\[ \\\\t\\]+\\[^\\n\\]*%zmm\" 2 } } */\n+/* No need to dynamically realign the stack here.  */\n+/* { dg-final { scan-assembler-not \"and\\[^\\n\\r]*%\\[re\\]sp\" } } */\n+/* Nor use a frame pointer.  */\n+/* { dg-final { scan-assembler-not \"%\\[re\\]bp\" } } */"}, {"sha": "a5b5b617578cf18090493b6d361a2d2aff5b921e", "filename": "gcc/testsuite/gcc.target/i386/pieces-memcpy-19.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-19.c?ref=654cd743c88a28fb292f7c2cf5f4b10e4047e7d9", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=sapphirerapids -mmove-max=128 -mstore-max=128\" } */\n+\n+extern char *dst, *src;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memcpy (dst, src, 66);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 8 } } */\n+/* No need to dynamically realign the stack here.  */\n+/* { dg-final { scan-assembler-not \"and\\[^\\n\\r]*%\\[re\\]sp\" } } */\n+/* Nor use a frame pointer.  */\n+/* { dg-final { scan-assembler-not \"%\\[re\\]bp\" } } */"}, {"sha": "1feff48c5b24080e4fdde8ede2d809765752dd36", "filename": "gcc/testsuite/gcc.target/i386/pieces-memcpy-20.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-20.c?ref=654cd743c88a28fb292f7c2cf5f4b10e4047e7d9", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=sapphirerapids -mmove-max=256 -mstore-max=256\" } */\n+\n+extern char *dst, *src;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memcpy (dst, src, 66);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqu(?:64|)\\[ \\\\t\\]+\\[^\\n\\]*%ymm\" 4 } } */\n+/* No need to dynamically realign the stack here.  */\n+/* { dg-final { scan-assembler-not \"and\\[^\\n\\r]*%\\[re\\]sp\" } } */\n+/* Nor use a frame pointer.  */\n+/* { dg-final { scan-assembler-not \"%\\[re\\]bp\" } } */"}, {"sha": "ef439f20f74dc3a0f8ce3a90dc99b716f208cb2b", "filename": "gcc/testsuite/gcc.target/i386/pieces-memcpy-21.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-21.c?ref=654cd743c88a28fb292f7c2cf5f4b10e4047e7d9", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=sapphirerapids -march=x86-64 -mavx2\" } */\n+\n+extern char *dst, *src;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memcpy (dst, src, 66);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqu(?:64|)\\[ \\\\t\\]+\\[^\\n\\]*%ymm\" 4 } } */\n+/* No need to dynamically realign the stack here.  */\n+/* { dg-final { scan-assembler-not \"and\\[^\\n\\r]*%\\[re\\]sp\" } } */\n+/* Nor use a frame pointer.  */\n+/* { dg-final { scan-assembler-not \"%\\[re\\]bp\" } } */"}, {"sha": "70c80e5064b7583209af17e97cf83c2561b4803b", "filename": "gcc/testsuite/gcc.target/i386/pieces-memset-45.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memset-45.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memset-45.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memset-45.c?ref=654cd743c88a28fb292f7c2cf5f4b10e4047e7d9", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=x86-64 -mprefer-vector-width=256 -mavx512f -mtune-ctrl=avx512_store_by_pieces\" } */\n+\n+extern char *dst;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memset (dst, 3, 66);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqu64\\[ \\\\t\\]+\\[^\\n\\]*%zmm\" 1 } } */\n+/* No need to dynamically realign the stack here.  */\n+/* { dg-final { scan-assembler-not \"and\\[^\\n\\r]*%\\[re\\]sp\" } } */\n+/* Nor use a frame pointer.  */\n+/* { dg-final { scan-assembler-not \"%\\[re\\]bp\" } } */"}, {"sha": "ab7894aa2e6e3e49945b43b370491a06a07ceef6", "filename": "gcc/testsuite/gcc.target/i386/pieces-memset-46.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memset-46.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memset-46.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memset-46.c?ref=654cd743c88a28fb292f7c2cf5f4b10e4047e7d9", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=sapphirerapids\" } */\n+\n+extern char *dst;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memset (dst, 3, 66);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqu8\\[ \\\\t\\]+\\[^\\n\\]*%zmm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 1 } } */\n+/* No need to dynamically realign the stack here.  */\n+/* { dg-final { scan-assembler-not \"and\\[^\\n\\r]*%\\[re\\]sp\" } } */\n+/* Nor use a frame pointer.  */\n+/* { dg-final { scan-assembler-not \"%\\[re\\]bp\" } } */"}, {"sha": "8f2c254ad031548f29671dd7e5fd6d82fc9445e1", "filename": "gcc/testsuite/gcc.target/i386/pieces-memset-47.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memset-47.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memset-47.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memset-47.c?ref=654cd743c88a28fb292f7c2cf5f4b10e4047e7d9", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=sapphirerapids -mstore-max=128\" } */\n+\n+extern char *dst;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memset (dst, 3, 66);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqu(?:8|)\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vmovw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 1 } } */\n+/* No need to dynamically realign the stack here.  */\n+/* { dg-final { scan-assembler-not \"and\\[^\\n\\r]*%\\[re\\]sp\" } } */\n+/* Nor use a frame pointer.  */\n+/* { dg-final { scan-assembler-not \"%\\[re\\]bp\" } } */"}, {"sha": "9a7da962183d5ef33665bf42b8c101bb2b475390", "filename": "gcc/testsuite/gcc.target/i386/pieces-memset-48.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memset-48.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memset-48.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memset-48.c?ref=654cd743c88a28fb292f7c2cf5f4b10e4047e7d9", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=sapphirerapids -mstore-max=256\" } */\n+\n+extern char *dst;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memset (dst, 3, 66);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqu(?:8|)\\[ \\\\t\\]+\\[^\\n\\]*%ymm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vmovw\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 1 } } */\n+/* No need to dynamically realign the stack here.  */\n+/* { dg-final { scan-assembler-not \"and\\[^\\n\\r]*%\\[re\\]sp\" } } */\n+/* Nor use a frame pointer.  */\n+/* { dg-final { scan-assembler-not \"%\\[re\\]bp\" } } */"}, {"sha": "ad43f89a9bd89c7901b92f7c61962476439d7e91", "filename": "gcc/testsuite/gcc.target/i386/pieces-memset-49.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memset-49.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/654cd743c88a28fb292f7c2cf5f4b10e4047e7d9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memset-49.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memset-49.c?ref=654cd743c88a28fb292f7c2cf5f4b10e4047e7d9", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=sapphirerapids -march=x86-64 -mavx2\" } */\n+\n+extern char *dst;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memset (dst, 3, 66);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqu(?:8|)\\[ \\\\t\\]+\\[^\\n\\]*%ymm\" 2 } } */\n+/* No need to dynamically realign the stack here.  */\n+/* { dg-final { scan-assembler-not \"and\\[^\\n\\r]*%\\[re\\]sp\" } } */\n+/* Nor use a frame pointer.  */\n+/* { dg-final { scan-assembler-not \"%\\[re\\]bp\" } } */"}]}