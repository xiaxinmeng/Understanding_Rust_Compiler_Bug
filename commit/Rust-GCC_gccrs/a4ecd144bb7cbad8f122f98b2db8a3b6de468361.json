{"sha": "a4ecd144bb7cbad8f122f98b2db8a3b6de468361", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRlY2QxNDRiYjdjYmFkOGYxMjJmOThiMmRiOGEzYjZkZTQ2ODM2MQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-11-11T19:57:48Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-11-11T19:57:48Z"}, "message": "basic_string.h (to_string(int), [...]): Add, per resolution of DR 1261.\n\n2009-11-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/basic_string.h (to_string(int), to_string(unsigned),\n\tto_string(long), to_string(unsigned long), to_string(float),\n\tto_string(double), to_wstring(int), to_wstring(unsigned),\n\tto_wstring(long), to_wstring(unsigned long), to_wstring(float),\n\tto_wstring(double)): Add, per resolution of DR 1261.\n\t* include/ext/vstring.h: Likewise.\n\t* testsuite/21_strings/basic_string/numeric_conversions/char/\n\tdr1261.cc: Add.\n\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n\tdr1261.cc: Likewise.\n\nFrom-SVN: r154102", "tree": {"sha": "39b13993ddc2e135fa9d6a504906c8e16036c5a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39b13993ddc2e135fa9d6a504906c8e16036c5a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4ecd144bb7cbad8f122f98b2db8a3b6de468361", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4ecd144bb7cbad8f122f98b2db8a3b6de468361", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4ecd144bb7cbad8f122f98b2db8a3b6de468361", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4ecd144bb7cbad8f122f98b2db8a3b6de468361/comments", "author": null, "committer": null, "parents": [{"sha": "0bc1b77f3219f3f8038fcc34f13eddc08ba86ce8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bc1b77f3219f3f8038fcc34f13eddc08ba86ce8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bc1b77f3219f3f8038fcc34f13eddc08ba86ce8"}], "stats": {"total": 309, "additions": 309, "deletions": 0}, "files": [{"sha": "b34122c4de56c555f06289145489ee742a890df4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ecd144bb7cbad8f122f98b2db8a3b6de468361/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ecd144bb7cbad8f122f98b2db8a3b6de468361/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a4ecd144bb7cbad8f122f98b2db8a3b6de468361", "patch": "@@ -1,3 +1,16 @@\n+2009-11-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/basic_string.h (to_string(int), to_string(unsigned),\n+\tto_string(long), to_string(unsigned long), to_string(float),\n+\tto_string(double), to_wstring(int), to_wstring(unsigned),\n+\tto_wstring(long), to_wstring(unsigned long), to_wstring(float),\n+\tto_wstring(double)): Add, per resolution of DR 1261.\n+\t* include/ext/vstring.h: Likewise.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/char/\n+\tdr1261.cc: Add.\n+\t* testsuite/21_strings/basic_string/numeric_conversions/wchar_t/\n+\tdr1261.cc: Likewise.\n+\n 2009-11-09  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/doxygen/user.cfg.in: Regenerate, add files."}, {"sha": "269a75ed46817a51f9701d14f05db4b1ecf67eae", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ecd144bb7cbad8f122f98b2db8a3b6de468361/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ecd144bb7cbad8f122f98b2db8a3b6de468361/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=a4ecd144bb7cbad8f122f98b2db8a3b6de468361", "patch": "@@ -2639,6 +2639,30 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return __gnu_cxx::__stoa(&std::strtold, \"stold\", __str.c_str(), __idx); }\n \n   // NB: (v)snprintf vs sprintf.\n+\n+  // DR 1261.\n+  inline string\n+  to_string(int __val)\n+  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),\n+\t\t\t\t\t   \"%d\", __val); }\n+\n+  inline string\n+  to_string(unsigned __val)\n+  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,\n+\t\t\t\t\t   4 * sizeof(unsigned),\n+\t\t\t\t\t   \"%u\", __val); }\n+\n+  inline string\n+  to_string(long __val)\n+  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),\n+\t\t\t\t\t   \"%ld\", __val); }\n+\n+  inline string\n+  to_string(unsigned long __val)\n+  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,\n+\t\t\t\t\t   4 * sizeof(unsigned long),\n+\t\t\t\t\t   \"%lu\", __val); }\n+\n   inline string\n   to_string(long long __val)\n   { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,\n@@ -2651,6 +2675,24 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t\t   4 * sizeof(unsigned long long),\n \t\t\t\t\t   \"%llu\", __val); }\n \n+  inline string\n+  to_string(float __val)\n+  {\n+    const int __n = \n+      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;\n+    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,\n+\t\t\t\t\t   \"%f\", __val);\n+  }\n+\n+  inline string\n+  to_string(double __val)\n+  {\n+    const int __n = \n+      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;\n+    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,\n+\t\t\t\t\t   \"%f\", __val);\n+  }\n+\n   inline string\n   to_string(long double __val)\n   {\n@@ -2699,6 +2741,29 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   stold(const wstring& __str, size_t* __idx = 0)\n   { return __gnu_cxx::__stoa(&std::wcstold, \"stold\", __str.c_str(), __idx); }\n \n+  // DR 1261.\n+  inline wstring\n+  to_wstring(int __val)\n+  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(int),\n+\t\t\t\t\t    L\"%d\", __val); }\n+\n+  inline wstring\n+  to_wstring(unsigned __val)\n+  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,\n+\t\t\t\t\t    4 * sizeof(unsigned),\n+\t\t\t\t\t    L\"%u\", __val); }\n+\n+  inline wstring\n+  to_wstring(long __val)\n+  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(long),\n+\t\t\t\t\t    L\"%ld\", __val); }\n+\n+  inline wstring\n+  to_wstring(unsigned long __val)\n+  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,\n+\t\t\t\t\t    4 * sizeof(unsigned long),\n+\t\t\t\t\t    L\"%lu\", __val); }\n+\n   inline wstring\n   to_wstring(long long __val)\n   { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,\n@@ -2711,6 +2776,24 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t\t    4 * sizeof(unsigned long long),\n \t\t\t\t\t    L\"%llu\", __val); }\n \n+  inline wstring\n+  to_wstring(float __val)\n+  {\n+    const int __n =\n+      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;\n+    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,\n+\t\t\t\t\t    L\"%f\", __val);\n+  }\n+\n+  inline wstring\n+  to_wstring(double __val)\n+  {\n+    const int __n =\n+      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;\n+    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,\n+\t\t\t\t\t    L\"%f\", __val);\n+  }\n+\n   inline wstring\n   to_wstring(long double __val)\n   {"}, {"sha": "183d037a2d214a78ac1566974f3b43cbcfc9ea52", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ecd144bb7cbad8f122f98b2db8a3b6de468361/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ecd144bb7cbad8f122f98b2db8a3b6de468361/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=a4ecd144bb7cbad8f122f98b2db8a3b6de468361", "patch": "@@ -2464,6 +2464,32 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   { return __gnu_cxx::__stoa(&std::strtold, \"stold\", __str.c_str(), __idx); }\n \n   // NB: (v)snprintf vs sprintf.\n+\n+  // DR 1261.\n+  inline __vstring\n+  to_string(int __val)\n+  { return __gnu_cxx::__to_xstring<__vstring>(&std::vsnprintf, 4 * sizeof(int),\n+\t\t\t\t\t      \"%d\", __val); }\n+\n+  inline __vstring\n+  to_string(unsigned __val)\n+  { return __gnu_cxx::__to_xstring<__vstring>(&std::vsnprintf,\n+\t\t\t\t\t      4 * sizeof(unsigned),\n+\t\t\t\t\t      \"%u\", __val); }\n+\n+  inline __vstring\n+  to_string(long __val)\n+  { return __gnu_cxx::__to_xstring<__vstring>(&std::vsnprintf,\n+\t\t\t\t\t      4 * sizeof(long),\n+\t\t\t\t\t      \"%ld\", __val); }\n+\n+  inline __vstring\n+  to_string(unsigned long __val)\n+  { return __gnu_cxx::__to_xstring<__vstring>(&std::vsnprintf,\n+\t\t\t\t\t      4 * sizeof(unsigned long),\n+\t\t\t\t\t      \"%lu\", __val); }\n+\n+\n   inline __vstring\n   to_string(long long __val)\n   { return __gnu_cxx::__to_xstring<__vstring>(&std::vsnprintf,\n@@ -2476,6 +2502,22 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t\t\t\t      4 * sizeof(unsigned long long),\n \t\t\t\t\t      \"%llu\", __val); }\n \n+  inline __vstring\n+  to_string(float __val)\n+  {\n+    const int __n = __numeric_traits<float>::__max_exponent10 + 20;\n+    return __gnu_cxx::__to_xstring<__vstring>(&std::vsnprintf, __n,\n+\t\t\t\t\t      \"%f\", __val);\n+  }\n+\n+  inline __vstring\n+  to_string(double __val)\n+  {\n+    const int __n = __numeric_traits<double>::__max_exponent10 + 20;\n+    return __gnu_cxx::__to_xstring<__vstring>(&std::vsnprintf, __n,\n+\t\t\t\t\t      \"%f\", __val);\n+  }\n+\n   inline __vstring\n   to_string(long double __val)\n   {\n@@ -2524,6 +2566,31 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   { return __gnu_cxx::__stoa(&std::wcstold, \"stold\", __str.c_str(), __idx); }\n \n #ifndef _GLIBCXX_HAVE_BROKEN_VSWPRINTF\n+  // DR 1261.\n+  inline __wvstring\n+  to_wstring(int __val)\n+  { return __gnu_cxx::__to_xstring<__wvstring>(&std::vswprintf,\n+\t\t\t\t\t       4 * sizeof(int),\n+\t\t\t\t\t       L\"%d\", __val); }\n+\n+  inline __wvstring\n+  to_wstring(unsigned __val)\n+  { return __gnu_cxx::__to_xstring<__wvstring>(&std::vswprintf,\n+\t\t\t\t\t       4 * sizeof(unsigned),\n+\t\t\t\t\t       L\"%u\", __val); }\n+\n+  inline __wvstring\n+  to_wstring(long __val)\n+  { return __gnu_cxx::__to_xstring<__wvstring>(&std::vswprintf,\n+\t\t\t\t\t       4 * sizeof(long),\n+\t\t\t\t\t       L\"%ld\", __val); }\n+\n+  inline __wvstring\n+  to_wstring(unsigned long __val)\n+  { return __gnu_cxx::__to_xstring<__wvstring>(&std::vswprintf,\n+\t\t\t\t\t       4 * sizeof(unsigned long),\n+\t\t\t\t\t       L\"%lu\", __val); }\n+\n   inline __wvstring\n   to_wstring(long long __val)\n   { return __gnu_cxx::__to_xstring<__wvstring>(&std::vswprintf,\n@@ -2536,6 +2603,22 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t\t\t\t       4 * sizeof(unsigned long long),\n \t\t\t\t\t       L\"%llu\", __val); }\n \n+  inline __wvstring\n+  to_wstring(float __val)\n+  {\n+    const int __n = __numeric_traits<float>::__max_exponent10 + 20;\n+    return __gnu_cxx::__to_xstring<__wvstring>(&std::vswprintf, __n,\n+\t\t\t\t\t       L\"%f\", __val);\n+  }\n+\n+  inline __wvstring\n+  to_wstring(double __val)\n+  {\n+    const int __n = __numeric_traits<double>::__max_exponent10 + 20;\n+    return __gnu_cxx::__to_xstring<__wvstring>(&std::vswprintf, __n,\n+\t\t\t\t\t       L\"%f\", __val);\n+  }\n+\n   inline __wvstring\n   to_wstring(long double __val)\n   {"}, {"sha": "739ceed3004d4ba6d1e71e02096e67c6f7002169", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/char/dr1261.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ecd144bb7cbad8f122f98b2db8a3b6de468361/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fdr1261.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ecd144bb7cbad8f122f98b2db8a3b6de468361/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fdr1261.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fchar%2Fdr1261.cc?ref=a4ecd144bb7cbad8f122f98b2db8a3b6de468361", "patch": "@@ -0,0 +1,65 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-string-conversions \"\" }\n+\n+// 2009-11-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// DR 1261. Insufficient overloads for to_string / to_wstring\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  const string one(to_string(-2));\n+  VERIFY( one == \"-2\" );\n+\n+  const string two(to_string(10u));\n+  VERIFY( two == \"10\" );\n+\n+  const string three(to_string(2l));\n+  VERIFY( three == \"2\" );\n+\n+  const string four(to_string(3000ul));\n+  VERIFY( four == \"3000\" );\n+\n+  const string five(to_string(7ll));\n+  VERIFY( five == \"7\" );\n+\n+  const string six(to_string(400ull));\n+  VERIFY( six == \"400\" );\n+\n+  const string seven(to_string(-1.0F));\n+  VERIFY( seven == \"-1.000000\" );\n+\n+  const string eight(to_string(2.0));\n+  VERIFY( eight == \"2.000000\" );\n+\n+  const string nine(to_string(-4.0L));\n+  VERIFY( nine == \"-4.000000\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7d754b30102e68c9b8892e1673064600508ad0bd", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/numeric_conversions/wchar_t/dr1261.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ecd144bb7cbad8f122f98b2db8a3b6de468361/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fdr1261.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ecd144bb7cbad8f122f98b2db8a3b6de468361/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fdr1261.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fnumeric_conversions%2Fwchar_t%2Fdr1261.cc?ref=a4ecd144bb7cbad8f122f98b2db8a3b6de468361", "patch": "@@ -0,0 +1,65 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-string-conversions \"\" }\n+\n+// 2009-11-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// DR 1261. Insufficient overloads for to_string / to_wstring\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  const wstring one(to_wstring(-2));\n+  VERIFY( one == L\"-2\" );\n+\n+  const wstring two(to_wstring(10u));\n+  VERIFY( two == L\"10\" );\n+\n+  const wstring three(to_wstring(2l));\n+  VERIFY( three == L\"2\" );\n+\n+  const wstring four(to_wstring(3000ul));\n+  VERIFY( four == L\"3000\" );\n+\n+  const wstring five(to_wstring(7ll));\n+  VERIFY( five == L\"7\" );\n+\n+  const wstring six(to_wstring(400ull));\n+  VERIFY( six == L\"400\" );\n+\n+  const wstring seven(to_wstring(-1.0F));\n+  VERIFY( seven == L\"-1.000000\" );\n+\n+  const wstring eight(to_wstring(2.0));\n+  VERIFY( eight == L\"2.000000\" );\n+\n+  const wstring nine(to_wstring(-4.0L));\n+  VERIFY( nine == L\"-4.000000\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}