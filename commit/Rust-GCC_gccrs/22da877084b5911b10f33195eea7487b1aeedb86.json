{"sha": "22da877084b5911b10f33195eea7487b1aeedb86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJkYTg3NzA4NGI1OTExYjEwZjMzMTk1ZWVhNzQ4N2IxYWVlZGI4Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-22T09:51:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-22T09:51:47Z"}, "message": "[multiple changes]\n\n2016-06-22  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch7.adb (Add_Invariant): Replace the\n\tcurrent type instance with the _object parameter even in ASIS mode.\n\t(Build_Invariant_Procedure_Body): Do not insert the\n\tinvariant procedure body into the tree for ASIS and GNATprove.\n\t(Build_Invariant_Procedure_Declaration): Do not insert the\n\tinvariant procedure declaration into the tree for ASIS and\n\tGNATprove.\n\t* lib-xref-spark_specific.adb (Add_SPARK_Scope): Update comment.\n\n2016-06-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Set_Actual_Subtypes): If the type of the actual\n\thas predicates, the actual subtype must be frozen properly\n\tbecause of the generated tests that may follow.  The predicate\n\tmay be specified by an explicit aspect, or may be inherited in\n\ta derivation.\n\nFrom-SVN: r237684", "tree": {"sha": "a1efe225ac2928ed3055f84886f48b1045507a8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1efe225ac2928ed3055f84886f48b1045507a8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22da877084b5911b10f33195eea7487b1aeedb86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22da877084b5911b10f33195eea7487b1aeedb86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22da877084b5911b10f33195eea7487b1aeedb86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22da877084b5911b10f33195eea7487b1aeedb86/comments", "author": null, "committer": null, "parents": [{"sha": "444656ce62eb1a2fd5e8e872b3804df0b61129a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/444656ce62eb1a2fd5e8e872b3804df0b61129a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/444656ce62eb1a2fd5e8e872b3804df0b61129a4"}], "stats": {"total": 92, "additions": 53, "deletions": 39}, "files": [{"sha": "a8b4fcb2353612b0eeb8653d637e525d62c3f288", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22da877084b5911b10f33195eea7487b1aeedb86/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22da877084b5911b10f33195eea7487b1aeedb86/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=22da877084b5911b10f33195eea7487b1aeedb86", "patch": "@@ -1,3 +1,22 @@\n+2016-06-22  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch7.adb (Add_Invariant): Replace the\n+\tcurrent type instance with the _object parameter even in ASIS mode.\n+\t(Build_Invariant_Procedure_Body): Do not insert the\n+\tinvariant procedure body into the tree for ASIS and GNATprove.\n+\t(Build_Invariant_Procedure_Declaration): Do not insert the\n+\tinvariant procedure declaration into the tree for ASIS and\n+\tGNATprove.\n+\t* lib-xref-spark_specific.adb (Add_SPARK_Scope): Update comment.\n+\n+2016-06-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Set_Actual_Subtypes): If the type of the actual\n+\thas predicates, the actual subtype must be frozen properly\n+\tbecause of the generated tests that may follow.  The predicate\n+\tmay be specified by an explicit aspect, or may be inherited in\n+\ta derivation.\n+\n 2016-06-22  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch4.adb (In_Range_Chec)): New predicate, subsidiary of"}, {"sha": "31522370058abe015bbd06dd73bd37b700f06ce2", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 28, "deletions": 33, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22da877084b5911b10f33195eea7487b1aeedb86/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22da877084b5911b10f33195eea7487b1aeedb86/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=22da877084b5911b10f33195eea7487b1aeedb86", "patch": "@@ -4154,39 +4154,32 @@ package body Exp_Ch7 is\n                   Set_Etype  (Selector_Name (N), Rep_Typ);\n                end if;\n \n-               --  Do not alter the tree for ASIS. As a result all references\n-               --  to Ref_Typ remain as is, but they have sufficent semantic\n-               --  information.\n+               --  Perform the following substitution:\n \n-               if not ASIS_Mode then\n+               --    Ref_Typ  -->  _object\n \n-                  --  Perform the following substitution:\n+               Ref := Make_Identifier (Nloc, Chars (Obj_Id));\n+               Set_Entity (Ref, Obj_Id);\n+               Set_Etype  (Ref, Rep_Typ);\n \n-                  --    Ref_Typ  -->  _object\n+               --  When the pragma denotes a class-wide invariant, perform the\n+               --  following substitution:\n \n-                  Ref := Make_Identifier (Nloc, Chars (Obj_Id));\n-                  Set_Entity (Ref, Obj_Id);\n-                  Set_Etype  (Ref, Rep_Typ);\n+               --    Rep_Typ  -->  Rep_Typ'Class (_object)\n \n-                  --  When the pragma denotes a class-wide invariant, perform\n-                  --  the following substitution:\n-\n-                  --    Rep_Typ  -->  Rep_Typ'Class (_object)\n-\n-                  if Class_Present (Prag) then\n-                     Ref :=\n-                       Make_Type_Conversion (Nloc,\n-                         Subtype_Mark =>\n-                           Make_Attribute_Reference (Nloc,\n-                             Prefix         =>\n-                               New_Occurrence_Of (Rep_Typ, Nloc),\n-                             Attribute_Name => Name_Class),\n-                         Expression   => Ref);\n-                  end if;\n-\n-                  Rewrite (N, Ref);\n-                  Set_Comes_From_Source (N, True);\n+               if Class_Present (Prag) then\n+                  Ref :=\n+                    Make_Type_Conversion (Nloc,\n+                      Subtype_Mark =>\n+                        Make_Attribute_Reference (Nloc,\n+                          Prefix         =>\n+                            New_Occurrence_Of (Rep_Typ, Nloc),\n+                          Attribute_Name => Name_Class),\n+                      Expression   => Ref);\n                end if;\n+\n+               Rewrite (N, Ref);\n+               Set_Comes_From_Source (N, True);\n             end Replace_Type_Ref;\n \n             procedure Replace_Type_Refs is\n@@ -4787,11 +4780,12 @@ package body Exp_Ch7 is\n       Set_Corresponding_Body (Proc_Decl, Proc_Body_Id);\n       Set_Corresponding_Spec (Proc_Body, Proc_Id);\n \n-      --  The body should not be inserted into the tree when the context is a\n-      --  generic unit because it is not part of the template. Note that the\n-      --  body must still be generated in order to resolve the invariants.\n+      --  The body should not be inserted into the tree when the context is\n+      --  ASIS, GNATprove or a generic unit because it is not part of the\n+      --  template. Note that the body must still be generated in order to\n+      --  resolve the invariants.\n \n-      if Inside_A_Generic then\n+      if ASIS_Mode or GNATprove_Mode or Inside_A_Generic then\n          null;\n \n       --  Otherwise the body is part of the freezing actions of the type\n@@ -4988,9 +4982,10 @@ package body Exp_Ch7 is\n                     New_Occurrence_Of (Work_Typ, Loc)))));\n \n       --  The declaration should not be inserted into the tree when the context\n-      --  is a generic unit because it is not part of the template.\n+      --  is ASIS, GNATprove or a generic unit because it is not part of the\n+      --  template.\n \n-      if Inside_A_Generic then\n+      if ASIS_Mode or GNATprove_Mode or Inside_A_Generic then\n          null;\n \n       --  Otherwise insert the declaration"}, {"sha": "8bc660309ac714af3348911a621d6e863aab633c", "filename": "gcc/ada/lib-xref-spark_specific.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22da877084b5911b10f33195eea7487b1aeedb86/gcc%2Fada%2Flib-xref-spark_specific.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22da877084b5911b10f33195eea7487b1aeedb86/gcc%2Fada%2Flib-xref-spark_specific.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-spark_specific.adb?ref=22da877084b5911b10f33195eea7487b1aeedb86", "patch": "@@ -934,10 +934,9 @@ package body SPARK_Specific is\n             D2 := D1;\n          end if;\n \n-         --  Some files do not correspond to Ada units, and as such present no\n-         --  interest for SPARK cross references. Skip these files, as printing\n-         --  their name may require printing the full name with spaces, which\n-         --  is not handled in the code doing I/O of SPARK cross references.\n+         --  Skip dependencies with no entity node, e.g. configuration files\n+         --  with pragmas (.adc) or target description (.atp), since they\n+         --  present no interest for SPARK cross references.\n \n          if Present (Cunit_Entity (Sdep_Table (D1))) then\n             Add_SPARK_File"}, {"sha": "0a60d048d4cd0e4417abf104dd3d045150570bed", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22da877084b5911b10f33195eea7487b1aeedb86/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22da877084b5911b10f33195eea7487b1aeedb86/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=22da877084b5911b10f33195eea7487b1aeedb86", "patch": "@@ -11308,9 +11308,10 @@ package body Sem_Ch6 is\n                  Freeze_Entity (Defining_Identifier (Decl), N));\n \n             --  Ditto if the type has a dynamic predicate, because the\n-            --  generated function will mention the actual subtype.\n+            --  generated function will mention the actual subtype. The\n+            --  predicate may come from an explicit aspect of be inherited.\n \n-            elsif Has_Dynamic_Predicate_Aspect (T) then\n+            elsif Has_Predicates (T) then\n                Insert_List_Before_And_Analyze (Decl,\n                  Freeze_Entity (Defining_Identifier (Decl), N));\n             end if;"}]}