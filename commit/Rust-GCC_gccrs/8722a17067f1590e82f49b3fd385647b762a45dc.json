{"sha": "8722a17067f1590e82f49b3fd385647b762a45dc", "node_id": "C_kwDOANBUbNoAKDg3MjJhMTcwNjdmMTU5MGU4MmY0OWIzZmQzODU2NDdiNzYyYTQ1ZGM", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-11-04T21:58:27Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-11-09T23:25:44Z"}, "message": "c: more precise locations for some -Wpragmas diagnostics\n\ngcc/c-family/ChangeLog:\n\t* c-pragma.c (GCC_BAD_AT): New macro.\n\t(GCC_BAD2_AT): New macro.\n\t(handle_pragma_pack): Use the location of the pertinent token when\n\tissuing diagnostics about invalid constants/actions, and trailing\n\tjunk.\n\t(handle_pragma_target): Likewise for non-string \"GCC option\".\n\t(handle_pragma_message): Likewise for trailing junk.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/bad-pragma-locations.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "21f0cace4088bbeca64d6acff45b8c5daa478e6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21f0cace4088bbeca64d6acff45b8c5daa478e6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8722a17067f1590e82f49b3fd385647b762a45dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8722a17067f1590e82f49b3fd385647b762a45dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8722a17067f1590e82f49b3fd385647b762a45dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8722a17067f1590e82f49b3fd385647b762a45dc/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96276f99352711475236ae5833a781fc55985f01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96276f99352711475236ae5833a781fc55985f01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96276f99352711475236ae5833a781fc55985f01"}], "stats": {"total": 119, "additions": 107, "deletions": 12}, "files": [{"sha": "b2ad991008a995bb1f85621da93f62e2f79a99f3", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8722a17067f1590e82f49b3fd385647b762a45dc/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8722a17067f1590e82f49b3fd385647b762a45dc/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=8722a17067f1590e82f49b3fd385647b762a45dc", "patch": "@@ -39,6 +39,10 @@ along with GCC; see the file COPYING3.  If not see\n   do { warning (OPT_Wpragmas, gmsgid); return; } while (0)\n #define GCC_BAD2(gmsgid, arg) \\\n   do { warning (OPT_Wpragmas, gmsgid, arg); return; } while (0)\n+#define GCC_BAD_AT(loc, gmsgid)\t\t\t\t\t\\\n+  do { warning_at (loc, OPT_Wpragmas, gmsgid); return; } while (0)\n+#define GCC_BAD2_AT(loc, gmsgid, arg)\t\t\t\\\n+  do { warning_at (loc, OPT_Wpragmas, gmsgid, arg); return; } while (0)\n \n struct GTY(()) align_stack {\n   int\t\t       alignment;\n@@ -130,6 +134,7 @@ pop_alignment (tree id)\n static void\n handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n {\n+  location_t loc;\n   tree x, id = 0;\n   int align = -1;\n   enum cpp_ttype token;\n@@ -138,7 +143,7 @@ handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n   if (pragma_lex (&x) != CPP_OPEN_PAREN)\n     GCC_BAD (\"missing %<(%> after %<#pragma pack%> - ignored\");\n \n-  token = pragma_lex (&x);\n+  token = pragma_lex (&x, &loc);\n   if (token == CPP_CLOSE_PAREN)\n     {\n       action = set;\n@@ -147,7 +152,7 @@ handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n   else if (token == CPP_NUMBER)\n     {\n       if (TREE_CODE (x) != INTEGER_CST)\n-\tGCC_BAD (\"invalid constant in %<#pragma pack%> - ignored\");\n+\tGCC_BAD_AT (loc, \"invalid constant in %<#pragma pack%> - ignored\");\n       align = TREE_INT_CST_LOW (x);\n       action = set;\n       if (pragma_lex (&x) != CPP_CLOSE_PAREN)\n@@ -167,19 +172,21 @@ handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n       else if (!strcmp (op, \"pop\"))\n \taction = pop;\n       else\n-\tGCC_BAD2 (\"unknown action %qE for %<#pragma pack%> - ignored\", x);\n+\tGCC_BAD2_AT (loc, \"unknown action %qE for %<#pragma pack%> - ignored\",\n+\t\t     x);\n \n       while ((token = pragma_lex (&x)) == CPP_COMMA)\n \t{\n-\t  token = pragma_lex (&x);\n+\t  token = pragma_lex (&x, &loc);\n \t  if (token == CPP_NAME && id == 0)\n \t    {\n \t      id = x;\n \t    }\n \t  else if (token == CPP_NUMBER && action == push && align == -1)\n \t    {\n \t      if (TREE_CODE (x) != INTEGER_CST)\n-\t\tGCC_BAD (\"invalid constant in %<#pragma pack%> - ignored\");\n+\t\tGCC_BAD_AT (loc,\n+\t\t\t    \"invalid constant in %<#pragma pack%> - ignored\");\n \t      align = TREE_INT_CST_LOW (x);\n \t      if (align == -1)\n \t\taction = set;\n@@ -195,8 +202,8 @@ handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n   else\n     GCC_BAD (\"malformed %<#pragma pack%> - ignored\");\n \n-  if (pragma_lex (&x) != CPP_EOF)\n-    warning (OPT_Wpragmas, \"junk at end of %<#pragma pack%>\");\n+  if (pragma_lex (&x, &loc) != CPP_EOF)\n+    warning_at (loc, OPT_Wpragmas, \"junk at end of %<#pragma pack%>\");\n \n   if (flag_pack_struct)\n     GCC_BAD (\"%<#pragma pack%> has no effect with %<-fpack-struct%> - ignored\");\n@@ -857,6 +864,7 @@ handle_pragma_diagnostic(cpp_reader *ARG_UNUSED(dummy))\n static void\n handle_pragma_target(cpp_reader *ARG_UNUSED(dummy))\n {\n+  location_t loc;\n   enum cpp_ttype token;\n   tree x;\n   bool close_paren_needed_p = false;\n@@ -867,16 +875,16 @@ handle_pragma_target(cpp_reader *ARG_UNUSED(dummy))\n       return;\n     }\n \n-  token = pragma_lex (&x);\n+  token = pragma_lex (&x, &loc);\n   if (token == CPP_OPEN_PAREN)\n     {\n       close_paren_needed_p = true;\n-      token = pragma_lex (&x);\n+      token = pragma_lex (&x, &loc);\n     }\n \n   if (token != CPP_STRING)\n     {\n-      GCC_BAD (\"%<#pragma GCC option%> is not a string\");\n+      GCC_BAD_AT (loc, \"%<#pragma GCC option%> is not a string\");\n       return;\n     }\n \n@@ -1149,6 +1157,7 @@ handle_pragma_reset_options (cpp_reader *ARG_UNUSED(dummy))\n static void\n handle_pragma_message (cpp_reader *ARG_UNUSED(dummy))\n {\n+  location_t loc;\n   enum cpp_ttype token;\n   tree x, message = 0;\n \n@@ -1170,8 +1179,8 @@ handle_pragma_message (cpp_reader *ARG_UNUSED(dummy))\n \n   gcc_assert (message);\n \n-  if (pragma_lex (&x) != CPP_EOF)\n-    warning (OPT_Wpragmas, \"junk at end of %<#pragma message%>\");\n+  if (pragma_lex (&x, &loc) != CPP_EOF)\n+    warning_at (loc, OPT_Wpragmas, \"junk at end of %<#pragma message%>\");\n \n   if (TREE_STRING_LENGTH (message) > 1)\n     inform (input_location, \"%<#pragma message: %s%>\","}, {"sha": "8068839881d9eb69e692f48660846da0783cda0f", "filename": "gcc/testsuite/gcc.dg/bad-pragma-locations.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8722a17067f1590e82f49b3fd385647b762a45dc/gcc%2Ftestsuite%2Fgcc.dg%2Fbad-pragma-locations.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8722a17067f1590e82f49b3fd385647b762a45dc/gcc%2Ftestsuite%2Fgcc.dg%2Fbad-pragma-locations.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbad-pragma-locations.c?ref=8722a17067f1590e82f49b3fd385647b762a45dc", "patch": "@@ -0,0 +1,86 @@\n+/* Verify that we use precise locations when emitting diagnostics\n+   about pragmas.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-fdiagnostics-show-caret\" } */\n+\n+/* pack ****************************************************************************/\n+\n+#pragma pack\n+/* { dg-warning \"missing '\\\\(' after '#pragma pack' - ignored\" \"\" { target *-*-* } .-1 }\n+   { dg-begin-multiline-output \"\" }\n+ #pragma pack\n+         ^~~~\n+   { dg-end-multiline-output \"\" }  */\n+\n+#pragma pack (\n+/* { dg-warning \"malformed '#pragma pack' - ignored\" \"\" { target *-*-* } .-1 }\n+   { dg-begin-multiline-output \"\" }\n+ #pragma pack (\n+         ^~~~\n+   { dg-end-multiline-output \"\" }  */\n+\n+#pragma pack (32\n+/* { dg-warning \"malformed '#pragma pack' - ignored\" \"\" { target *-*-* } .-1 }\n+   { dg-begin-multiline-output \"\" }\n+ #pragma pack (32\n+         ^~~~\n+   { dg-end-multiline-output \"\" }  */\n+\n+#pragma pack (3.14159\n+/* { dg-warning \"invalid constant in '#pragma pack' - ignored\" \"\" { target *-*-* } .-1 }\n+   { dg-begin-multiline-output \"\" }\n+ #pragma pack (3.14159\n+               ^~~~~~~\n+   { dg-end-multiline-output \"\" }  */\n+\n+#pragma pack (push, 3.14159\n+/* { dg-warning \"invalid constant in '#pragma pack' - ignored\" \"\" { target *-*-* } .-1 }\n+   { dg-begin-multiline-output \"\" }\n+ #pragma pack (push, 3.14159\n+                     ^~~~~~~\n+   { dg-end-multiline-output \"\" }  */\n+\n+#pragma pack (toothbrush\n+/* { dg-warning \"unknown action 'toothbrush' for '#pragma pack' - ignored\" \"\" { target *-*-* } .-1 }\n+   { dg-begin-multiline-output \"\" }\n+ #pragma pack (toothbrush\n+               ^~~~~~~~~~\n+   { dg-end-multiline-output \"\" }  */\n+\n+#pragma pack() pyjamas\n+/* { dg-warning \"junk at end of '#pragma pack'\" \"\" { target *-*-* } .-1 }\n+   { dg-begin-multiline-output \"\" }\n+ #pragma pack() pyjamas\n+                ^~~~~~~\n+   { dg-end-multiline-output \"\" }  */\n+\n+/* target ****************************************************************************/\n+\n+#pragma GCC target 42\n+/* { dg-warning \"#pragma GCC option' is not a string\" \"\" { target *-*-* } .-1 }\n+   { dg-begin-multiline-output \"\" }\n+ #pragma GCC target 42\n+                    ^~\n+   { dg-end-multiline-output \"\" }  */\n+\n+#pragma GCC target ( 1776\n+/* { dg-warning \"#pragma GCC option' is not a string\" \"\" { target *-*-* } .-1 }\n+   { dg-begin-multiline-output \"\" }\n+ #pragma GCC target ( 1776\n+                      ^~~~\n+   { dg-end-multiline-output \"\" }  */\n+\n+/* message ****************************************************************************/\n+\n+#pragma message \"foo\" int\n+/* { dg-warning \"junk at end of '#pragma message'\" \"\" { target *-*-* } .-1 }\n+   { dg-message \"'#pragma message: foo'\" \"\" { target *-*-* } .-2 }\n+   { dg-begin-multiline-output \"\" }\n+ #pragma message \"foo\" int\n+                       ^~~\n+   { dg-end-multiline-output \"\" }\n+   { dg-begin-multiline-output \"\" }\n+ #pragma message \"foo\" int\n+         ^~~~~~~\n+   { dg-end-multiline-output \"\" }  */"}]}