{"sha": "62b80eaf3872270d72c8ec9a5b57ae04bab76061", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJiODBlYWYzODcyMjcwZDcyYzhlYzlhNWI1N2FlMDRiYWI3NjA2MQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2006-02-15T09:46:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:46:08Z"}, "message": "sprint.adb (Write_Itype): Preserve Sloc of declaration...\n\n2006-02-13  Ed Schonberg  <schonberg@adacore.com>\n\t    Robert Dewar  <dewar@adacore.com>\n\n\t* sprint.adb (Write_Itype): Preserve Sloc of declaration, if any, to\n\tpreserve the source unit where the itype is declared, and prevent a\n\tbackend abort.\n\t(Note_Implicit_Run_Time_Call): New procedure\n\t(Write_Itype): Handle missing cases (E_Class_Wide_Type and\n\tE_Subprogram_Type)\n\n\t* sprint.ads: Document use of $ for implicit run time routine call\n\nFrom-SVN: r111099", "tree": {"sha": "3d1795da2fde35f2c6ac4fbf797a4d505e65d53a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d1795da2fde35f2c6ac4fbf797a4d505e65d53a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62b80eaf3872270d72c8ec9a5b57ae04bab76061", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62b80eaf3872270d72c8ec9a5b57ae04bab76061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62b80eaf3872270d72c8ec9a5b57ae04bab76061", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62b80eaf3872270d72c8ec9a5b57ae04bab76061/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b8e51f72bd934e95a47811f99347a7bcf2dfbde6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8e51f72bd934e95a47811f99347a7bcf2dfbde6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8e51f72bd934e95a47811f99347a7bcf2dfbde6"}], "stats": {"total": 103, "additions": 99, "deletions": 4}, "files": [{"sha": "761c7cf04ed65002f0e2744f492b4c3f4f337027", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 97, "deletions": 3, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b80eaf3872270d72c8ec9a5b57ae04bab76061/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b80eaf3872270d72c8ec9a5b57ae04bab76061/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=62b80eaf3872270d72c8ec9a5b57ae04bab76061", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,6 +29,7 @@ with Casing;   use Casing;\n with Csets;    use Csets;\n with Debug;    use Debug;\n with Einfo;    use Einfo;\n+with Fname;    use Fname;\n with Lib;      use Lib;\n with Namet;    use Namet;\n with Nlists;   use Nlists;\n@@ -150,6 +151,11 @@ package body Sprint is\n    procedure Indent_End;\n    --  Decrease indentation level\n \n+   procedure Note_Implicit_Run_Time_Call (N : Node_Id);\n+   --  N is the Name field of a function call or procedure statement call.\n+   --  The effect of the call is to output a $ if the call is identified as\n+   --  an implicit call to a run time routine.\n+\n    procedure Print_Debug_Line (S : String);\n    --  Used to print output lines in Debug_Generated_Code mode (this is used\n    --  as the argument for a call to Set_Special_Output in package Output).\n@@ -333,6 +339,30 @@ package body Sprint is\n       Indent := Indent - 3;\n    end Indent_End;\n \n+   ---------------------------------\n+   -- Note_Implicit_Run_Time_Call --\n+   ---------------------------------\n+\n+   procedure Note_Implicit_Run_Time_Call (N : Node_Id) is\n+   begin\n+      if not Comes_From_Source (N)\n+        and then Is_Entity_Name (N)\n+      then\n+         declare\n+            Ent : constant Entity_Id := Entity (N);\n+         begin\n+            if not In_Extended_Main_Source_Unit (Ent)\n+              and then\n+                Is_Predefined_File_Name\n+                  (Unit_File_Name (Get_Source_Unit (Ent)))\n+            then\n+               Col_Check (Length_Of_Name (Chars (Ent)));\n+               Write_Char ('$');\n+            end if;\n+         end;\n+      end if;\n+   end Note_Implicit_Run_Time_Call;\n+\n    --------\n    -- pg --\n    --------\n@@ -1003,7 +1033,7 @@ package body Sprint is\n             Sprint_Bar_List (Choices (Node));\n             Write_Str (\" => \");\n \n-            --  Ada 2005 (AI-287): Print the mbox if present\n+            --  Ada 2005 (AI-287): Print the box if present\n \n             if Box_Present (Node) then\n                Write_Str_With_Col_Check (\"<>\");\n@@ -1539,6 +1569,7 @@ package body Sprint is\n \n          when N_Function_Call =>\n             Set_Debug_Sloc;\n+            Note_Implicit_Run_Time_Call (Name (Node));\n             Sprint_Node (Name (Node));\n             Sprint_Opt_Paren_Comma_List (Parameter_Associations (Node));\n \n@@ -2146,6 +2177,7 @@ package body Sprint is\n          when N_Procedure_Call_Statement =>\n             Write_Indent;\n             Set_Debug_Sloc;\n+            Note_Implicit_Run_Time_Call (Name (Node));\n             Sprint_Node (Name (Node));\n             Sprint_Opt_Paren_Comma_List (Parameter_Associations (Node));\n             Write_Char (';');\n@@ -3212,6 +3244,10 @@ package body Sprint is\n             S : constant Saved_Output_Buffer := Save_Output_Buffer;\n             --  Save current output buffer\n \n+            Old_Sloc : Source_Ptr;\n+            --  Save sloc of related node, so it is not modified when\n+            --  printing with -gnatD.\n+\n          begin\n             --  Write indentation at start of line\n \n@@ -3231,9 +3267,16 @@ package body Sprint is\n                --  Write the declaration enclosed in [], avoiding new line\n                --  at start of declaration, and semicolon at end.\n \n+               --  Note: The itype may be imported from another unit, in which\n+               --  case we do not want to modify the Sloc of the declaration.\n+               --  Otherwise the itype may appear to be in the current unit,\n+               --  and the back-end will reject a reference out of scope.\n+\n                Write_Char ('[');\n                Indent_Annull_Flag := True;\n+               Old_Sloc := Sloc (P);\n                Sprint_Node (P);\n+               Set_Sloc (P, Old_Sloc);\n                Write_Erase_Char (';');\n \n             --  If no constructed declaration, then we have to concoct the\n@@ -3410,7 +3453,58 @@ package body Sprint is\n                      Indent_End;\n                      Write_Indent_Str (\" end record\");\n \n-                     --  For all other Itypes, print ??? (fill in later)\n+                  --  Class-Wide types\n+\n+                  when E_Class_Wide_Type =>\n+                     Write_Header;\n+                     Write_Name_With_Col_Check (Chars (Etype (Typ)));\n+                     Write_Str (\"'Class\");\n+\n+                  --  Subprogram types\n+\n+                  when E_Subprogram_Type =>\n+                     Write_Header;\n+\n+                     if Etype (Typ) = Standard_Void_Type then\n+                        Write_Str (\"procedure\");\n+                     else\n+                        Write_Str (\"function\");\n+                     end if;\n+\n+                     if Present (First_Entity (Typ)) then\n+                        Write_Str (\" (\");\n+\n+                        declare\n+                           Param : Entity_Id;\n+\n+                        begin\n+                           Param := First_Entity (Typ);\n+                           loop\n+                              Write_Id (Param);\n+                              Write_Str (\" : \");\n+\n+                              if Ekind (Param) = E_In_Out_Parameter then\n+                                 Write_Str (\"in out \");\n+                              elsif Ekind (Param) = E_Out_Parameter then\n+                                 Write_Str (\"out \");\n+                              end if;\n+\n+                              Write_Id (Etype (Param));\n+                              Next_Entity (Param);\n+                              exit when No (Param);\n+                              Write_Str (\", \");\n+                           end loop;\n+\n+                           Write_Char (')');\n+                        end;\n+                     end if;\n+\n+                     if Etype (Typ) /= Standard_Void_Type then\n+                        Write_Str (\" return \");\n+                        Write_Id (Etype (Typ));\n+                     end if;\n+\n+                  --  For all other Itypes, print ??? (fill in later)\n \n                   when others =>\n                      Write_Header (True);"}, {"sha": "0e869f05350333ae41206b874ed17c1e7f9bfff8", "filename": "gcc/ada/sprint.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62b80eaf3872270d72c8ec9a5b57ae04bab76061/gcc%2Fada%2Fsprint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62b80eaf3872270d72c8ec9a5b57ae04bab76061/gcc%2Fada%2Fsprint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.ads?ref=62b80eaf3872270d72c8ec9a5b57ae04bab76061", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -56,6 +56,7 @@ package Sprint is\n    --    Operator with range check           {operator} (e.g. {+})\n    --    Free statement                      free expr [storage_pool = xxx]\n    --    Freeze entity with freeze actions   freeze entityname [ actions ]\n+   --    Implicit call to run time routine   $routine-name\n    --    Interpretation                      interpretation type [, entity]\n    --    Intrinsic calls                     function-name!(arg, arg, arg)\n    --    Itype declaration                   [(sub)type declaration without ;]"}]}