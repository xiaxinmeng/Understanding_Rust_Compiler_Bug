{"sha": "62f01243fb27030b8d99c671f27349c2e7465edc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJmMDEyNDNmYjI3MDMwYjhkOTljNjcxZjI3MzQ5YzJlNzQ2NWVkYw==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-08-09T10:21:43Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-08-09T13:16:58Z"}, "message": "Cross-reference parts adapted in 'gcc/omp-oacc-neuter-broadcast.cc'\n\n\tgcc/\n\t* config/nvptx/nvptx.c: Cross-reference parts adapted in\n\t'gcc/omp-oacc-neuter-broadcast.cc'.\n\t* omp-low.c: Likewise.\n\t* omp-oacc-neuter-broadcast.cc: Cross-reference parts adapted from\n\tthe above files.", "tree": {"sha": "9168f7f02487d9a87880f5bfaf580ce809faf702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9168f7f02487d9a87880f5bfaf580ce809faf702"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62f01243fb27030b8d99c671f27349c2e7465edc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62f01243fb27030b8d99c671f27349c2e7465edc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62f01243fb27030b8d99c671f27349c2e7465edc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62f01243fb27030b8d99c671f27349c2e7465edc/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c408512e1f7ca07e07794dc13fd6dfd9d2d7e998", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c408512e1f7ca07e07794dc13fd6dfd9d2d7e998", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c408512e1f7ca07e07794dc13fd6dfd9d2d7e998"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "4e4909e8c5fbe60545b24a0b793e34e72c92cd6f", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f01243fb27030b8d99c671f27349c2e7465edc/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f01243fb27030b8d99c671f27349c2e7465edc/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=62f01243fb27030b8d99c671f27349c2e7465edc", "patch": "@@ -3205,6 +3205,7 @@ nvptx_mach_vector_length ()\n \n /* Loop structure of the function.  The entire function is described as\n    a NULL loop.  */\n+/* See also 'gcc/omp-oacc-neuter-broadcast.cc:struct parallel_g'.  */\n \n struct parallel\n {\n@@ -3282,6 +3283,7 @@ typedef auto_vec<insn_bb_t> insn_bb_vec_t;\n    partitioning mode of the function as a whole.  Populate MAP with\n    head and tail blocks.  We also clear the BB visited flag, which is\n    used when finding partitions.  */\n+/* See also 'gcc/omp-oacc-neuter-broadcast.cc:omp_sese_split_blocks'.  */\n \n static void\n nvptx_split_blocks (bb_insn_map_t *map)\n@@ -3383,6 +3385,7 @@ nvptx_discover_pre (basic_block block, int expected)\n }\n \n /* Dump this parallel and all its inner parallels.  */\n+/* See also 'gcc/omp-oacc-neuter-broadcast.cc:omp_sese_dump_pars'.  */\n \n static void\n nvptx_dump_pars (parallel *par, unsigned depth)\n@@ -3408,6 +3411,7 @@ nvptx_dump_pars (parallel *par, unsigned depth)\n /* If BLOCK contains a fork/join marker, process it to create or\n    terminate a loop structure.  Add this block to the current loop,\n    and then walk successor blocks.   */\n+/* See also 'gcc/omp-oacc-neuter-broadcast.cc:omp_sese_find_par'.  */\n \n static parallel *\n nvptx_find_par (bb_insn_map_t *map, parallel *par, basic_block block)\n@@ -3488,6 +3492,7 @@ nvptx_find_par (bb_insn_map_t *map, parallel *par, basic_block block)\n    to head & tail markers, discovered when splitting blocks.  This\n    speeds up the discovery.  We rely on the BB visited flag having\n    been cleared when splitting blocks.  */\n+/* See also 'gcc/omp-oacc-neuter-broadcast.cc:omp_sese_discover_pars'.  */\n \n static parallel *\n nvptx_discover_pars (bb_insn_map_t *map)"}, {"sha": "926087da70149fc2501c5e1331f78026841bd422", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f01243fb27030b8d99c671f27349c2e7465edc/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f01243fb27030b8d99c671f27349c2e7465edc/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=62f01243fb27030b8d99c671f27349c2e7465edc", "patch": "@@ -615,6 +615,8 @@ omp_copy_decl_1 (tree var, omp_context *ctx)\n \n /* Build COMPONENT_REF and set TREE_THIS_VOLATILE and TREE_READONLY on it\n    as appropriate.  */\n+/* See also 'gcc/omp-oacc-neuter-broadcast.cc:oacc_build_component_ref'.  */\n+\n static tree\n omp_build_component_ref (tree obj, tree field)\n {"}, {"sha": "f855538045177da6e50d07c8915ee456aa13ecbc", "filename": "gcc/omp-oacc-neuter-broadcast.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f01243fb27030b8d99c671f27349c2e7465edc/gcc%2Fomp-oacc-neuter-broadcast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f01243fb27030b8d99c671f27349c2e7465edc/gcc%2Fomp-oacc-neuter-broadcast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-oacc-neuter-broadcast.cc?ref=62f01243fb27030b8d99c671f27349c2e7465edc", "patch": "@@ -56,6 +56,7 @@\n \n /* Loop structure of the function.  The entire function is described as\n    a NULL loop.  */\n+/* Adapted from 'gcc/config/nvptx/nvptx.c:struct parallel'.  */\n \n struct parallel_g\n {\n@@ -183,6 +184,7 @@ omp_sese_active_worker_call (gcall *call)\n    partitioning mode of the function as a whole.  Populate MAP with\n    head and tail blocks.  We also clear the BB visited flag, which is\n    used when finding partitions.  */\n+/* Adapted from 'gcc/config/nvptx/nvptx.c:nvptx_split_blocks'.  */\n \n static void\n omp_sese_split_blocks (bb_stmt_map_t *map)\n@@ -341,6 +343,7 @@ mask_name (unsigned mask)\n }\n \n /* Dump this parallel and all its inner parallels.  */\n+/* Adapted from 'gcc/config/nvptx/nvptx.c:nvptx_dump_pars'.  */\n \n static void\n omp_sese_dump_pars (parallel_g *par, unsigned depth)\n@@ -366,6 +369,7 @@ omp_sese_dump_pars (parallel_g *par, unsigned depth)\n /* If BLOCK contains a fork/join marker, process it to create or\n    terminate a loop structure.  Add this block to the current loop,\n    and then walk successor blocks.   */\n+/* Adapted from 'gcc/config/nvptx/nvptx.c:nvptx_find_par'.  */\n \n static parallel_g *\n omp_sese_find_par (bb_stmt_map_t *map, parallel_g *par, basic_block block)\n@@ -471,6 +475,7 @@ omp_sese_find_par (bb_stmt_map_t *map, parallel_g *par, basic_block block)\n    to head & tail markers, discovered when splitting blocks.  This\n    speeds up the discovery.  We rely on the BB visited flag having\n    been cleared when splitting blocks.  */\n+/* Adapted from 'gcc/config/nvptx/nvptx.c:nvptx_discover_pars'.  */\n \n static parallel_g *\n omp_sese_discover_pars (bb_stmt_map_t *map)\n@@ -931,7 +936,9 @@ worker_single_simple (basic_block from, basic_block to,\n   update_stmt (acc_bar);\n }\n \n-/* This is a copied and renamed omp-low.c:omp_build_component_ref.  */\n+/* Build COMPONENT_REF and set TREE_THIS_VOLATILE and TREE_READONLY on it\n+   as appropriate.  */\n+/* Adapted from 'gcc/omp-low.c:omp_build_component_ref'.  */\n \n static tree\n oacc_build_component_ref (tree obj, tree field)"}]}