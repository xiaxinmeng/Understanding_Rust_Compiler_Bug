{"sha": "20995e68c28c1091be915f5ab4fcfa45c1cd0bc5", "node_id": "C_kwDOANBUbNoAKDIwOTk1ZTY4YzI4YzEwOTFiZTkxNWY1YWI0ZmNmYTQ1YzFjZDBiYzU", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2021-10-13T15:36:45Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2021-10-13T15:36:45Z"}, "message": "Add support for 32-bit hppa targets in muldi3 expander\n\n2021-10-13  John David Anglin  <danglin@gcc.gnu.org>\n\ngcc/ChangeLog:\n\n\t* config/pa/pa.md (muldi3): Add support for inlining 64-bit\n\tmultiplication on 32-bit PA 1.1 and 2.0 targets.", "tree": {"sha": "ae6807a95b286f8d32d0e327f3e327c4622e8aaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae6807a95b286f8d32d0e327f3e327c4622e8aaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20995e68c28c1091be915f5ab4fcfa45c1cd0bc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20995e68c28c1091be915f5ab4fcfa45c1cd0bc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20995e68c28c1091be915f5ab4fcfa45c1cd0bc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20995e68c28c1091be915f5ab4fcfa45c1cd0bc5/comments", "author": null, "committer": null, "parents": [{"sha": "72e0c742bd01f8e7e6dcca64042b9ad7e75979de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72e0c742bd01f8e7e6dcca64042b9ad7e75979de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72e0c742bd01f8e7e6dcca64042b9ad7e75979de"}], "stats": {"total": 80, "additions": 54, "deletions": 26}, "files": [{"sha": "10623dd6fdbf5da5bd267ac380936f12ac6ea9e1", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 54, "deletions": 26, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20995e68c28c1091be915f5ab4fcfa45c1cd0bc5/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20995e68c28c1091be915f5ab4fcfa45c1cd0bc5/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=20995e68c28c1091be915f5ab4fcfa45c1cd0bc5", "patch": "@@ -5374,32 +5374,38 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n         (mult:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t (match_operand:DI 2 \"register_operand\" \"\")))]\n-  \"TARGET_64BIT && ! TARGET_DISABLE_FPREGS && ! TARGET_SOFT_FLOAT\"\n+  \"! optimize_size\n+   && TARGET_PA_11\n+   && ! TARGET_DISABLE_FPREGS\n+   && ! TARGET_SOFT_FLOAT\"\n   \"\n {\n   rtx low_product = gen_reg_rtx (DImode);\n   rtx cross_product1 = gen_reg_rtx (DImode);\n   rtx cross_product2 = gen_reg_rtx (DImode);\n-  rtx cross_scratch = gen_reg_rtx (DImode);\n-  rtx cross_product = gen_reg_rtx (DImode);\n   rtx op1l, op1r, op2l, op2r;\n-  rtx op1shifted, op2shifted;\n-\n-  op1shifted = gen_reg_rtx (DImode);\n-  op2shifted = gen_reg_rtx (DImode);\n-  op1l = gen_reg_rtx (SImode);\n-  op1r = gen_reg_rtx (SImode);\n-  op2l = gen_reg_rtx (SImode);\n-  op2r = gen_reg_rtx (SImode);\n-\n-  emit_move_insn (op1shifted, gen_rtx_LSHIFTRT (DImode, operands[1],\n-\t\t\t\t\t\tGEN_INT (32)));\n-  emit_move_insn (op2shifted, gen_rtx_LSHIFTRT (DImode, operands[2],\n-\t\t\t\t\t\tGEN_INT (32)));\n-  op1r = force_reg (SImode, gen_rtx_SUBREG (SImode, operands[1], 4));\n-  op2r = force_reg (SImode, gen_rtx_SUBREG (SImode, operands[2], 4));\n-  op1l = force_reg (SImode, gen_rtx_SUBREG (SImode, op1shifted, 4));\n-  op2l = force_reg (SImode, gen_rtx_SUBREG (SImode, op2shifted, 4));\n+\n+  if (TARGET_64BIT)\n+    {\n+      rtx op1shifted = gen_reg_rtx (DImode);\n+      rtx op2shifted = gen_reg_rtx (DImode);\n+\n+      emit_move_insn (op1shifted, gen_rtx_LSHIFTRT (DImode, operands[1],\n+\t\t\t\t\t\t    GEN_INT (32)));\n+      emit_move_insn (op2shifted, gen_rtx_LSHIFTRT (DImode, operands[2],\n+\t\t\t\t\t\t    GEN_INT (32)));\n+      op1r = force_reg (SImode, gen_rtx_SUBREG (SImode, operands[1], 4));\n+      op2r = force_reg (SImode, gen_rtx_SUBREG (SImode, operands[2], 4));\n+      op1l = force_reg (SImode, gen_rtx_SUBREG (SImode, op1shifted, 4));\n+      op2l = force_reg (SImode, gen_rtx_SUBREG (SImode, op2shifted, 4));\n+    }\n+  else\n+    {\n+      op1r = force_reg (SImode, gen_lowpart (SImode, operands[1]));\n+      op2r = force_reg (SImode, gen_lowpart (SImode, operands[2]));\n+      op1l = force_reg (SImode, gen_highpart (SImode, operands[1]));\n+      op2l = force_reg (SImode, gen_highpart (SImode, operands[2]));\n+    }\n \n   /* Emit multiplies for the cross products.  */\n   emit_insn (gen_umulsidi3 (cross_product1, op2r, op1l));\n@@ -5408,13 +5414,35 @@\n   /* Emit a multiply for the low sub-word.  */\n   emit_insn (gen_umulsidi3 (low_product, copy_rtx (op2r), copy_rtx (op1r)));\n \n-  /* Sum the cross products and shift them into proper position.  */\n-  emit_insn (gen_adddi3 (cross_scratch, cross_product1, cross_product2));\n-  emit_insn (gen_ashldi3 (cross_product, cross_scratch, GEN_INT (32)));\n+  if (TARGET_64BIT)\n+    {\n+      rtx cross_scratch = gen_reg_rtx (DImode);\n+      rtx cross_product = gen_reg_rtx (DImode);\n \n-  /* Add the cross product to the low product and store the result\n-     into the output operand .  */\n-  emit_insn (gen_adddi3 (operands[0], cross_product, low_product));\n+      /* Sum the cross products and shift them into proper position.  */\n+      emit_insn (gen_adddi3 (cross_scratch, cross_product1, cross_product2));\n+      emit_insn (gen_ashldi3 (cross_product, cross_scratch, GEN_INT (32)));\n+\n+      /* Add the cross product to the low product and store the result\n+\t into the output operand .  */\n+      emit_insn (gen_adddi3 (operands[0], cross_product, low_product));\n+    }\n+  else\n+    {\n+      rtx cross_scratch = gen_reg_rtx (SImode);\n+\n+      /* Sum cross products.  */\n+      emit_move_insn (cross_scratch,\n+\t\t      gen_rtx_PLUS (SImode,\n+\t\t\t\t    gen_lowpart (SImode, cross_product1),\n+\t\t\t\t    gen_lowpart (SImode, cross_product2)));\n+      emit_move_insn (gen_lowpart (SImode, operands[0]),\n+\t\t      gen_lowpart (SImode, low_product));\n+      emit_move_insn (gen_highpart (SImode, operands[0]),\n+\t\t      gen_rtx_PLUS (SImode,\n+\t\t\t\t    gen_highpart (SImode, low_product),\n+\t\t\t\t    cross_scratch));\n+    }\n   DONE;\n }\")\n "}]}