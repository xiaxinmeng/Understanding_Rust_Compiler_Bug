{"sha": "4871239e6404d637ffff8c80558bae40b5880a68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg3MTIzOWU2NDA0ZDYzN2ZmZmY4YzgwNTU4YmFlNDBiNTg4MGE2OA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-07-31T18:29:58Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-07-31T18:29:58Z"}, "message": "Makefile.in: Rename cpp to cpp0, tradcpp to tradcpp0, and xcpp to cpp throughout.\n\n\t* Makefile.in: Rename cpp to cpp0, tradcpp to tradcpp0, and\n\txcpp to cpp throughout.\n\t(native): Remove unnecessary dependency on cpp.\n\n\t* gcc.c (trad_capable_cpp, C specs): Rename cpp to cpp,\n\ttradcpp to tradcpp0.\n\t(.i spec): Add missing output-file spec to cc1 command line.\n\n\t* ch/lang-specs.h, cp/lang-specs.h, f/lang-specs.h,\n\tobjc/lang-specs.h: Rename cpp to cpp0 and/or tradcpp to tradcpp0.\n\nFrom-SVN: r35389", "tree": {"sha": "effd964f5e7fbb6df373b803715395cfba5e267a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/effd964f5e7fbb6df373b803715395cfba5e267a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4871239e6404d637ffff8c80558bae40b5880a68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4871239e6404d637ffff8c80558bae40b5880a68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4871239e6404d637ffff8c80558bae40b5880a68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4871239e6404d637ffff8c80558bae40b5880a68/comments", "author": null, "committer": null, "parents": [{"sha": "5f1240b6bac53ded27c90f910dd2b930dac157a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f1240b6bac53ded27c90f910dd2b930dac157a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f1240b6bac53ded27c90f910dd2b930dac157a0"}], "stats": {"total": 78, "additions": 44, "deletions": 34}, "files": [{"sha": "564cc1d851f117103826851d1569242376c40562", "filename": "gcc/Makefile.in", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4871239e6404d637ffff8c80558bae40b5880a68/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4871239e6404d637ffff8c80558bae40b5880a68/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=4871239e6404d637ffff8c80558bae40b5880a68", "patch": "@@ -448,7 +448,7 @@ COMPILERS = cc1$(exeext) @all_compilers@\n \n # List of things which should already be built whenever we try to use xgcc\n # to compile anything (without linking).\n-GCC_PASSES=xgcc$(exeext) cc1$(exeext) cpp$(exeext) $(EXTRA_PASSES)\n+GCC_PASSES=xgcc$(exeext) cc1$(exeext) cpp0$(exeext) $(EXTRA_PASSES)\n \n # List of things which should already be built whenever we try to use xgcc\n # to link anything.\n@@ -716,10 +716,10 @@ STAGESTUFF = *$(objext) insn-flags.h insn-config.h insn-codes.h \\\n  genconfig$(build_exeext) genpeep$(build_exeext) genattrtab$(build_exeext) \\\n  genattr$(build_exeext) genopinit$(build_exeext) gengenrtl$(build_exeext) \\\n  gencheck$(build_exeext) genrtl.c genrtl.h \\\n- xgcc$(exeext) xcpp$(exeext) cc1$(exeext) cpp$(exeext) $(EXTRA_PASSES) \\\n+ xgcc$(exeext) cpp$(exeext) cc1$(exeext) cpp0$(exeext) $(EXTRA_PASSES) \\\n  $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross$(exeext) cc1obj$(exeext) \\\n  enquire$(exeext) protoize$(exeext) unprotoize$(exeext) \\\n- specs collect2$(exeext) $(USE_COLLECT2) underscore.c tradcpp$(exeext) \\\n+ specs collect2$(exeext) $(USE_COLLECT2) underscore.c tradcpp0$(exeext) \\\n  gcov$(exeext) *.[0-9][0-9].* *.[si] libcpp.a libgcc libgcc.mk \\\n  $(LANG_STAGESTUFF)\n \n@@ -858,22 +858,22 @@ all.internal: start.encap rest.encap doc\n # This is what to compile if making a cross-compiler.\n # Note that we can compile enquire using the cross-compiler just built,\n # although we can't run it on this machine.\n-all.cross: native gcc-cross xcpp$(exeext) specs \\\n+all.cross: native gcc-cross cpp$(exeext) specs \\\n \t$(LIBGCC) $(LIBGCC1_TEST) $(EXTRA_PARTS) lang.all.cross doc\n # This is what to compile if making gcc with a cross-compiler.\n-all.build: native xgcc$(exeext) xcpp$(exeext) $(EXTRA_PARTS) lang.all.build\n+all.build: native xgcc$(exeext) cpp$(exeext) $(EXTRA_PARTS) lang.all.build\n # This is what must be made before installing GCC and converting libraries.\n-start.encap: native xgcc$(exeext) xcpp$(exeext) specs \\\n+start.encap: native xgcc$(exeext) cpp$(exeext) specs \\\n \txlimits.h lang.start.encap\n # These can't be made until after GCC can run.\n rest.encap: $(STMP_FIXPROTO) $(LIBGCC) $(EXTRA_PARTS) lang.rest.encap\n # This is what is made with the host's compiler\n # whether making a cross compiler or not.\n-native: config.status auto-host.h cpp$(exeext) intl.all $(LANGUAGES) \\\n+native: config.status auto-host.h intl.all $(LANGUAGES) \\\n \t$(EXTRA_PASSES) $(EXTRA_PROGRAMS) $(USE_COLLECT2)\n \n # Define the names for selecting languages in LANGUAGES.\n-C c: cc1$(exeext) tradcpp$(exeext)\n+C c: cc1$(exeext) tradcpp0$(exeext)\n PROTO: proto\n \n # Tell GNU make these are phony targets.\n@@ -909,12 +909,10 @@ xgcc$(exeext): gcc.o gccspec.o version.o intl.o prefix.o \\\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ gcc.o gccspec.o intl.o \\\n \t  prefix.o version.o $(EXTRA_GCC_OBJS) $(LIBS)\n \n-# We call this executable `xcpp' rather than `cpp'\n-# since the real preprocessor is named `cpp'.  It too is renamed\n-# when it is installed.\n+# cpp is to cpp0 as gcc is to cc1.\n # The only difference from xgcc is that it's linked with cppspec.o\n # instead of gccspec.o.\n-xcpp$(exeext): gcc.o cppspec.o version.o intl.o prefix.o \\\n+cpp$(exeext): gcc.o cppspec.o version.o intl.o prefix.o \\\n    version.o $(LIBDEPS) $(EXTRA_GCC_OBJS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ gcc.o cppspec.o intl.o \\\n \t  prefix.o version.o $(EXTRA_GCC_OBJS) $(LIBS)\n@@ -1801,8 +1799,8 @@ libcpp.a: $(LIBCPP_OBJS)\n \t$(AR) $(AR_FLAGS) libcpp.a $(LIBCPP_OBJS)\n \tif $(RANLIB_TEST) ; then $(RANLIB) libcpp.a ; else true ; fi\n \n-cpp$(exeext): cppmain.o intl.o libcpp.a $(LIBDEPS)\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o cpp$(exeext) cppmain.o \\\n+cpp0$(exeext): cppmain.o intl.o libcpp.a $(LIBDEPS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o cpp0$(exeext) cppmain.o \\\n \tintl.o libcpp.a $(LIBS)\n \n cppmain.o:  cppmain.c  $(CONFIG_H) cpplib.h intl.h system.h\n@@ -1827,8 +1825,8 @@ mkdeps.o: mkdeps.c $(CONFIG_H) system.h mkdeps.h\n \n # The traditional mode preprocessor, a separate program for ease of\n # maintenance.  Some code is shared with the ISO-C cpp.\n-tradcpp$(exeext): tradcpp.o tradcif.o cppdefault.o version.o intl.o $(LIBDEPS)\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o tradcpp$(exeext) \\\n+tradcpp0$(exeext): tradcpp.o tradcif.o cppdefault.o version.o intl.o $(LIBDEPS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o tradcpp0$(exeext) \\\n \ttradcpp.o tradcif.o cppdefault.o version.o intl.o $(LIBS)\n \n tradcpp.o: tradcpp.c $(CONFIG_H) system.h version.h cppdefault.h\n@@ -2256,20 +2254,20 @@ install-build: force\n install-cross-rest: install-float-h-cross\n \n # Handle cpp installation.\n-install-cpp: xcpp$(exeext)\n+install-cpp: cpp$(exeext)\n \t-if [ -f gcc-cross$(exeext) ] ; then \\\n \t  rm -f $(bindir)/$(CPP_CROSS_NAME)$(exeext); \\\n-\t  $(INSTALL_PROGRAM) -m 755 xcpp$(exeext) $(bindir)/$(CPP_CROSS_NAME)$(exeext); \\\n+\t  $(INSTALL_PROGRAM) -m 755 cpp$(exeext) $(bindir)/$(CPP_CROSS_NAME)$(exeext); \\\n \t  if [ x$(cpp_install_dir) != x ]; then \\\n \t    rm -f $(prefix)/$(cpp_install_dir)/$(CPP_CROSS_NAME)$(exeext); \\\n-\t    $(INSTALL_PROGRAM) -m 755 xcpp$(exeext) $(prefix)/$(cpp_install_dir)/$(CPP_CROSS_NAME)$(exeext); \\\n+\t    $(INSTALL_PROGRAM) -m 755 cpp$(exeext) $(prefix)/$(cpp_install_dir)/$(CPP_CROSS_NAME)$(exeext); \\\n \t  else true; fi; \\\n \telse \\\n \t  rm -f $(bindir)/$(CPP_INSTALL_NAME)$(exeext); \\\n-\t  $(INSTALL_PROGRAM) -m 755 xcpp$(exeext) $(bindir)/$(CPP_INSTALL_NAME)$(exeext); \\\n+\t  $(INSTALL_PROGRAM) -m 755 cpp$(exeext) $(bindir)/$(CPP_INSTALL_NAME)$(exeext); \\\n \t  if [ x$(cpp_install_dir) != x ]; then \\\n \t    rm -f $(prefix)/$(cpp_install_dir)/$(CPP_INSTALL_NAME)$(exeext); \\\n-\t    $(INSTALL_PROGRAM) -m 755 xcpp$(exeext) $(prefix)/$(cpp_install_dir)/$(CPP_INSTALL_NAME)$(exeext); \\\n+\t    $(INSTALL_PROGRAM) -m 755 cpp$(exeext) $(prefix)/$(cpp_install_dir)/$(CPP_INSTALL_NAME)$(exeext); \\\n \t  else true; fi; \\\n \tfi\n \n@@ -2363,10 +2361,10 @@ install-common: native installdirs $(EXTRA_PARTS) lang.install-common\n \t    $(INSTALL_DATA) SYSCALLS.c.X $(libsubdir)/SYSCALLS.c.X; \\\n \t    chmod a-x $(libsubdir)/SYSCALLS.c.X; \\\n \tfi\n-\t-rm -f $(libsubdir)/cpp$(exeext)\n-\t$(INSTALL_PROGRAM) cpp$(exeext) $(libsubdir)/cpp$(exeext)\n-\t-rm -f $(libsubdir)/tradcpp$(exeext)\n-\t$(INSTALL_PROGRAM) tradcpp$(exeext) $(libsubdir)/tradcpp$(exeext)\n+\t-rm -f $(libsubdir)/cpp0$(exeext)\n+\t$(INSTALL_PROGRAM) cpp0$(exeext) $(libsubdir)/cpp0$(exeext)\n+\t-rm -f $(libsubdir)/tradcpp0$(exeext)\n+\t$(INSTALL_PROGRAM) tradcpp0$(exeext) $(libsubdir)/tradcpp0$(exeext)\n # Install gcov if it was compiled.\n \t-if [ -f gcov$(exeext) ]; \\\n \tthen \\"}, {"sha": "b60f4f4990b5edb4ff04dc2d2f1061ebd99c2de4", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4871239e6404d637ffff8c80558bae40b5880a68/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4871239e6404d637ffff8c80558bae40b5880a68/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=4871239e6404d637ffff8c80558bae40b5880a68", "patch": "@@ -1,3 +1,7 @@\n+2000-07-31  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* lang-specs.h: Rename cpp to cpp0 and/or tradcpp to tradcpp0.\n+\n Mon Jul 31 07:58:31 2000  Casper Dik <Casper.Dik@holland.sun.com>\n \n \t* Makefile.in: Remove naked \"^L\"."}, {"sha": "5b0b6b2f1b679cdafde5a77bdb86cc370107c910", "filename": "gcc/ch/lang-specs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4871239e6404d637ffff8c80558bae40b5880a68/gcc%2Fch%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4871239e6404d637ffff8c80558bae40b5880a68/gcc%2Fch%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Flang-specs.h?ref=4871239e6404d637ffff8c80558bae40b5880a68", "patch": "@@ -24,7 +24,7 @@ Boston, MA 02111-1307, USA.  */\n   {\".ch\",  \"@chill\"},\n   {\".chi\", \"@chill\"},\n   {\"@chill\",\n-     \"tradcpp -lang-chill %{!no-gcc:-D__GNUCHILL__=%v1} %(cpp_options)\\\n+     \"tradcpp0 -lang-chill %{!no-gcc:-D__GNUCHILL__=%v1} %(cpp_options)\\\n \t      %{!M:%{!MM:%{!E:%{!pipe:%g.i} |\\n\\\n       cc1chill %{!pipe:%g.i} %(cc1_options) %{!S:-o %{|!pipe:%g.s} |\\n\\\n       as %(asm_options) %{!pipe:%g.s} %A }}}}\\n\"},"}, {"sha": "5a21c7452baa1f44c28c235604b327a964d4ccc9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4871239e6404d637ffff8c80558bae40b5880a68/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4871239e6404d637ffff8c80558bae40b5880a68/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4871239e6404d637ffff8c80558bae40b5880a68", "patch": "@@ -1,3 +1,7 @@\n+2000-07-31  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* lang-specs.h: Rename cpp to cpp0 and/or tradcpp to tradcpp0.\n+\n 2000-07-30  Mark Mitchell  <mark@codesourcery.com>\n \n \tAllow indirect primary bases."}, {"sha": "9c4e308611d514c17dedb16842091e06d2a41d99", "filename": "gcc/cp/lang-specs.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4871239e6404d637ffff8c80558bae40b5880a68/gcc%2Fcp%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4871239e6404d637ffff8c80558bae40b5880a68/gcc%2Fcp%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-specs.h?ref=4871239e6404d637ffff8c80558bae40b5880a68", "patch": "@@ -30,7 +30,7 @@ Boston, MA 02111-1307, USA.  */\n   {\".C\",   \"@c++\"},\n   {\"@c++\",\n #if USE_CPPLIB\n-    \"%{E|M|MM:cpp -lang-c++ %{!no-gcc:-D__GNUG__=%v1}\\\n+    \"%{E|M|MM:cpp0 -lang-c++ %{!no-gcc:-D__GNUG__=%v1}\\\n        %{fnew-abi:-D__GXX_ABI_VERSION=100}\\\n        %{ansi:-trigraphs -$ -D__STRICT_ANSI__} %(cpp_options)}\\\n      %{!E:%{!M:%{!MM:cc1plus -lang-c++ %{!no-gcc:-D__GNUG__=%v1}\\\n@@ -40,7 +40,7 @@ Boston, MA 02111-1307, USA.  */\n        %{!S:-o %{|!pipe:%g.s} |\\n\\\n      as %(asm_options) %{!pipe:%g.s} %A }}}}\"\n #else /* ! USE_CPPLIB */\n-    \"cpp -lang-c++ %{!no-gcc:-D__GNUG__=%v1}\\\n+    \"cpp0 -lang-c++ %{!no-gcc:-D__GNUG__=%v1}\\\n        %{fnew-abi:-D__GXX_ABI_VERSION=100}\\\n        %{ansi:-trigraphs -$ -D__STRICT_ANSI__} %(cpp_options)\\\n        %{!M:%{!MM:%{!E:%{!pipe:%g.ii} |\\n\\"}, {"sha": "e79c92d2960bcddc04329db2b2af7e710fe35a28", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4871239e6404d637ffff8c80558bae40b5880a68/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4871239e6404d637ffff8c80558bae40b5880a68/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=4871239e6404d637ffff8c80558bae40b5880a68", "patch": "@@ -1,3 +1,7 @@\n+2000-07-31  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* lang-specs.h: Rename cpp to cpp0 and/or tradcpp to tradcpp0.\n+\n Thu Jul 27 11:50:08 2000  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* fini.c (main): Avoid automatic aggregate initialization."}, {"sha": "670be7bbf1e50483251d15a56fa3d497fde5cd42", "filename": "gcc/f/lang-specs.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4871239e6404d637ffff8c80558bae40b5880a68/gcc%2Ff%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4871239e6404d637ffff8c80558bae40b5880a68/gcc%2Ff%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flang-specs.h?ref=4871239e6404d637ffff8c80558bae40b5880a68", "patch": "@@ -28,7 +28,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n   {\".fpp\", \"@f77-cpp-input\"},\n   {\".FPP\", \"@f77-cpp-input\"},\n   {\"@f77-cpp-input\",\n-   \"tradcpp -lang-fortran %(cpp_options) %{!M:%{!MM:%{!E:%{!pipe:%g.f |\\n\\\n+   \"tradcpp0 -lang-fortran %(cpp_options) %{!M:%{!MM:%{!E:%{!pipe:%g.f |\\n\\\n     f771 %{!pipe:%g.f} %(cc1_options) %{!S:-o %{|!pipe:%g.s} |\\n\\\n     as %(asm_options) %{!pipe:%g.s} %A }}}}}\\n\"},\n   {\".r\", \"@ratfor\"},\n@@ -45,7 +45,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n      as %(asm_options) %{!pipe:%g.s} %A }}}}\\n\"},\n   /* XXX This is perverse and should not be necessary.  */\n   {\"@f77-version\",\n-   \"tradcpp -lang-fortran %(cpp_options) /dev/null \\n\\\n+   \"tradcpp0 -lang-fortran %(cpp_options) /dev/null \\n\\\n     f771 -fnull-version %1 \\\n       %{!Q:-quiet} -dumpbase g77-version.f %{d*} %{m*} %{a*} \\\n       %{g*} %{O*} %{W*} %{w} %{pedantic*} \\"}, {"sha": "5f61be2f81abca4b5e59938e2225c0cf99b24797", "filename": "gcc/gcc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4871239e6404d637ffff8c80558bae40b5880a68/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4871239e6404d637ffff8c80558bae40b5880a68/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=4871239e6404d637ffff8c80558bae40b5880a68", "patch": "@@ -548,7 +548,7 @@ static const char *link_libgcc_spec = LINK_LIBGCC_SPEC;\n    appropriate -B options.  */\n \n static const char *trad_capable_cpp =\n-\"%{traditional|ftraditional|traditional-cpp:trad}cpp\";\n+\"%{traditional|ftraditional|traditional-cpp:trad}cpp0\";\n \n static const char *cpp_options =\n \"%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n@@ -688,7 +688,7 @@ static struct compiler default_compilers[] =\n   {\".c\", \"@c\"},\n   {\"@c\",\n #if USE_CPPLIB\n-     \"%{E|M|MM:cpp -lang-c %{ansi:-std=c89} %(cpp_options)}\\\n+     \"%{E|M|MM:cpp0 -lang-c %{ansi:-std=c89} %(cpp_options)}\\\n       %{!E:%{!M:%{!MM:cc1 -lang-c %{ansi:-std=c89} %(cpp_options)\\\n \t\t\t  %(cc1_options) %{!S:-o %{|!pipe:%g.s} |\\n\\\n       as %(asm_options) %{!pipe:%g.s} %A }}}}\"\n@@ -709,7 +709,7 @@ static struct compiler default_compilers[] =\n   {\".i\", \"@cpp-output\"},\n   {\"@cpp-output\",\n    \"%{!M:%{!MM:%{!E:\\\n-    cc1 %i %(cc1_options) %{!S:|\\n\\\n+    cc1 %i %(cc1_options) %{!S:-o %{|!pipe:%g.s} |\\n\\\n     as %(asm_options) %{!pipe:%g.s} %A }}}}\"},\n   {\".s\", \"@assembler\"},\n   {\"@assembler\","}, {"sha": "b0fea5257d4d3d6fbd1238773b9bc4c9ca5b4acd", "filename": "gcc/objc/lang-specs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4871239e6404d637ffff8c80558bae40b5880a68/gcc%2Fobjc%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4871239e6404d637ffff8c80558bae40b5880a68/gcc%2Fobjc%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Flang-specs.h?ref=4871239e6404d637ffff8c80558bae40b5880a68", "patch": "@@ -24,7 +24,7 @@ Boston, MA 02111-1307, USA.  */\n   {\".m\", \"@objective-c\"},\n   {\"@objective-c\",\n #if USE_CPPLIB\n-     \"%{E|M|MM:cpp -lang-objc %{ansi:-std=c89} %(cpp_options)}\\\n+     \"%{E|M|MM:cpp0 -lang-objc %{ansi:-std=c89} %(cpp_options)}\\\n       %{!E:%{!M:%{!MM:cc1obj -lang-objc %(cpp_options) %(cc1_options)\\\n \t\t\t     %{gen-decls} %{!S:-o %{|!pipe:%g.s} |\\n\\\n       as %(asm_options) %{!pipe:%g.s} %A }}}}\""}]}