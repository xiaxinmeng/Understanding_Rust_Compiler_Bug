{"sha": "5244b4af5e47bc98a2a9cf36f048981583a1b163", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI0NGI0YWY1ZTQ3YmM5OGEyYTljZjM2ZjA0ODk4MTU4M2ExYjE2Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-21T08:51:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-21T08:54:47Z"}, "message": "phiopt: Optimize x ? __builtin_clz (x) : 32 in GIMPLE [PR97503]\n\nWhile we have at the RTL level noce_try_ifelse_collapse combined with\nsimplify_cond_clz_ctz, that optimization doesn't always trigger because\ne.g. on powerpc there is an define_insn to compare a reg against zero and\ncopy that register to another one and so we end up with a different pseudo\nin the simplify_cond_clz_ctz test and punt.\n\nFor targets that define C?Z_DEFINED_VALUE_AT_ZERO to 2 for certain modes,\nwe can optimize it already in phiopt though, just need to ensure that\nwe transform the __builtin_c?z* calls into .C?Z ifns because my recent\nVRP changes codified that the builtin calls are always undefined at zero,\nwhile ifns honor C?Z_DEFINED_VALUE_AT_ZERO equal to 2.\nAnd, in phiopt we already have popcount handling that does pretty much the\nsame thing, except for always using a zero value rather than the one set\nby C?Z_DEFINED_VALUE_AT_ZERO.\n\nSo, this patch extends that function to handle not just popcount, but also\nclz and ctz.\n\n2020-10-21  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/97503\n\t* tree-ssa-phiopt.c: Include internal-fn.h.\n\t(cond_removal_in_popcount_pattern): Rename to ...\n\t(cond_removal_in_popcount_clz_ctz_pattern): ... this.  Handle not just\n\tpopcount, but also clz and ctz if it has C?Z_DEFINED_VALUE_AT_ZERO 2.\n\n\t* gcc.dg/tree-ssa/pr97503.c: New test.", "tree": {"sha": "6700b853da80be58b71937cb4a7bee63b0c9a660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6700b853da80be58b71937cb4a7bee63b0c9a660"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5244b4af5e47bc98a2a9cf36f048981583a1b163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5244b4af5e47bc98a2a9cf36f048981583a1b163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5244b4af5e47bc98a2a9cf36f048981583a1b163", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5244b4af5e47bc98a2a9cf36f048981583a1b163/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "028a407463ce341487103abc877032384e6427bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/028a407463ce341487103abc877032384e6427bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/028a407463ce341487103abc877032384e6427bf"}], "stats": {"total": 119, "additions": 95, "deletions": 24}, "files": [{"sha": "3a3dae6c786feb91e0755c5aced2b28effe47067", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr97503.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5244b4af5e47bc98a2a9cf36f048981583a1b163/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr97503.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5244b4af5e47bc98a2a9cf36f048981583a1b163/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr97503.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr97503.c?ref=5244b4af5e47bc98a2a9cf36f048981583a1b163", "patch": "@@ -0,0 +1,19 @@\n+/* PR tree-optimization/97503 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-additional-options \"-mbmi -mlzcnt\" { target i?86-*-* x86_64-*-* } } */\n+/* { dg-final { scan-tree-dump-times \"\\.CLZ\" 2 \"optimized\" { target { { i?86-*-* x86_64-*-* aarch64-*-* powerpc*-*-* } && lp64 } } } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_clz\" \"optimized\" { target { { i?86-*-* x86_64-*-* aarch64-*-* powerpc*-*-*} && lp64 } } } } */\n+/* { dg-final { scan-tree-dump-not \"PHI <\" \"optimized\" { target { { i?86-*-* x86_64-*-* aarch64-*-* powerpc*-*-*} && lp64 } } } } */\n+\n+int\n+foo (int x)\n+{\n+  return x ? __builtin_clz (x) : 32;\n+}\n+\n+int\n+bar (unsigned long long x)\n+{\n+  return x ? __builtin_clzll (x) : 64;\n+}"}, {"sha": "c7e84dac51209e24fa901784be5a3bcd08eab0bb", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 76, "deletions": 24, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5244b4af5e47bc98a2a9cf36f048981583a1b163/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5244b4af5e47bc98a2a9cf36f048981583a1b163/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=5244b4af5e47bc98a2a9cf36f048981583a1b163", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"case-cfn-macros.h\"\n #include \"tree-eh.h\"\n #include \"gimple-fold.h\"\n+#include \"internal-fn.h\"\n \n static unsigned int tree_ssa_phiopt_worker (bool, bool, bool);\n static bool two_value_replacement (basic_block, basic_block, edge, gphi *,\n@@ -61,8 +62,9 @@ static bool minmax_replacement (basic_block, basic_block,\n \t\t\t\tedge, edge, gimple *, tree, tree);\n static bool abs_replacement (basic_block, basic_block,\n \t\t\t     edge, edge, gimple *, tree, tree);\n-static bool cond_removal_in_popcount_pattern (basic_block, basic_block,\n-\t\t\t\t\t      edge, edge, gimple *, tree, tree);\n+static bool cond_removal_in_popcount_clz_ctz_pattern (basic_block, basic_block,\n+\t\t\t\t\t\t      edge, edge, gimple *,\n+\t\t\t\t\t\t      tree, tree);\n static bool cond_store_replacement (basic_block, basic_block, edge, edge,\n \t\t\t\t    hash_set<tree> *);\n static bool cond_if_else_store_replacement (basic_block, basic_block, basic_block);\n@@ -344,8 +346,9 @@ tree_ssa_phiopt_worker (bool do_store_elim, bool do_hoist_loads, bool early_p)\n \t  else if (abs_replacement (bb, bb1, e1, e2, phi, arg0, arg1))\n \t    cfgchanged = true;\n \t  else if (!early_p\n-\t\t   && cond_removal_in_popcount_pattern (bb, bb1, e1, e2,\n-\t\t\t\t\t\t\tphi, arg0, arg1))\n+\t\t   && cond_removal_in_popcount_clz_ctz_pattern (bb, bb1, e1,\n+\t\t\t\t\t\t\t\te2, phi, arg0,\n+\t\t\t\t\t\t\t\targ1))\n \t    cfgchanged = true;\n \t  else if (minmax_replacement (bb, bb1, e1, e2, phi, arg0, arg1))\n \t    cfgchanged = true;\n@@ -1777,16 +1780,20 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n \n    <bb 4>\n    c_12 = PHI <_9(2)>\n-*/\n+\n+   Similarly for __builtin_clz or __builtin_ctz if\n+   C?Z_DEFINED_VALUE_AT_ZERO is 2, optab is present and\n+   instead of 0 above it uses the value from that macro.  */\n \n static bool\n-cond_removal_in_popcount_pattern (basic_block cond_bb, basic_block middle_bb,\n-\t\t\t\t  edge e1, edge e2,\n-\t\t\t\t  gimple *phi, tree arg0, tree arg1)\n+cond_removal_in_popcount_clz_ctz_pattern (basic_block cond_bb,\n+\t\t\t\t\t  basic_block middle_bb,\n+\t\t\t\t\t  edge e1, edge e2, gimple *phi,\n+\t\t\t\t\t  tree arg0, tree arg1)\n {\n   gimple *cond;\n   gimple_stmt_iterator gsi, gsi_from;\n-  gimple *popcount;\n+  gimple *call;\n   gimple *cast = NULL;\n   tree lhs, arg;\n \n@@ -1804,35 +1811,67 @@ cond_removal_in_popcount_pattern (basic_block cond_bb, basic_block middle_bb,\n   gsi_next_nondebug (&gsi);\n   if (!gsi_end_p (gsi))\n     {\n-      popcount = gsi_stmt (gsi);\n+      call = gsi_stmt (gsi);\n       gsi_next_nondebug (&gsi);\n       if (!gsi_end_p (gsi))\n \treturn false;\n     }\n   else\n     {\n-      popcount = cast;\n+      call = cast;\n       cast = NULL;\n     }\n \n-  /* Check that we have a popcount builtin.  */\n-  if (!is_gimple_call (popcount))\n+  /* Check that we have a popcount/clz/ctz builtin.  */\n+  if (!is_gimple_call (call) || gimple_call_num_args (call) != 1)\n     return false;\n-  combined_fn cfn = gimple_call_combined_fn (popcount);\n+\n+  arg = gimple_call_arg (call, 0);\n+  lhs = gimple_get_lhs (call);\n+\n+  if (lhs == NULL_TREE)\n+    return false;\n+\n+  combined_fn cfn = gimple_call_combined_fn (call);\n+  internal_fn ifn = IFN_LAST;\n+  int val = 0;\n   switch (cfn)\n     {\n     CASE_CFN_POPCOUNT:\n       break;\n+    CASE_CFN_CLZ:\n+      if (INTEGRAL_TYPE_P (TREE_TYPE (arg)))\n+\t{\n+\t  scalar_int_mode mode = SCALAR_INT_TYPE_MODE (TREE_TYPE (arg));\n+\t  if (direct_internal_fn_supported_p (IFN_CLZ, TREE_TYPE (arg),\n+\t\t\t\t\t      OPTIMIZE_FOR_BOTH)\n+\t      && CLZ_DEFINED_VALUE_AT_ZERO (mode, val) == 2)\n+\t    {\n+\t      ifn = IFN_CLZ;\n+\t      break;\n+\t    }\n+\t}\n+      return false;\n+    CASE_CFN_CTZ:\n+      if (INTEGRAL_TYPE_P (TREE_TYPE (arg)))\n+\t{\n+\t  scalar_int_mode mode = SCALAR_INT_TYPE_MODE (TREE_TYPE (arg));\n+\t  if (direct_internal_fn_supported_p (IFN_CTZ, TREE_TYPE (arg),\n+\t\t\t\t\t      OPTIMIZE_FOR_BOTH)\n+\t      && CTZ_DEFINED_VALUE_AT_ZERO (mode, val) == 2)\n+\t    {\n+\t      ifn = IFN_CTZ;\n+\t      break;\n+\t    }\n+\t}\n+      return false;\n     default:\n       return false;\n     }\n \n-  arg = gimple_call_arg (popcount, 0);\n-  lhs = gimple_get_lhs (popcount);\n-\n   if (cast)\n     {\n-      /* We have a cast stmt feeding popcount builtin.  */\n+      /* We have a cast stmt feeding popcount/clz/ctz builtin.  */\n       /* Check that we have a cast prior to that.  */\n       if (gimple_code (cast) != GIMPLE_ASSIGN\n \t  || !CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (cast)))\n@@ -1845,7 +1884,7 @@ cond_removal_in_popcount_pattern (basic_block cond_bb, basic_block middle_bb,\n \n   cond = last_stmt (cond_bb);\n \n-  /* Cond_bb has a check for b_4 [!=|==] 0 before calling the popcount\n+  /* Cond_bb has a check for b_4 [!=|==] 0 before calling the popcount/clz/ctz\n      builtin.  */\n   if (gimple_code (cond) != GIMPLE_COND\n       || (gimple_cond_code (cond) != NE_EXPR\n@@ -1865,20 +1904,33 @@ cond_removal_in_popcount_pattern (basic_block cond_bb, basic_block middle_bb,\n     }\n \n   /* Check PHI arguments.  */\n-  if (lhs != arg0 || !integer_zerop (arg1))\n+  if (lhs != arg0\n+      || TREE_CODE (arg1) != INTEGER_CST\n+      || wi::to_wide (arg1) != val)\n     return false;\n \n-  /* And insert the popcount builtin and cast stmt before the cond_bb.  */\n+  /* And insert the popcount/clz/ctz builtin and cast stmt before the\n+     cond_bb.  */\n   gsi = gsi_last_bb (cond_bb);\n   if (cast)\n     {\n       gsi_from = gsi_for_stmt (cast);\n       gsi_move_before (&gsi_from, &gsi);\n       reset_flow_sensitive_info (gimple_get_lhs (cast));\n     }\n-  gsi_from = gsi_for_stmt (popcount);\n-  gsi_move_before (&gsi_from, &gsi);\n-  reset_flow_sensitive_info (gimple_get_lhs (popcount));\n+  gsi_from = gsi_for_stmt (call);\n+  if (ifn == IFN_LAST || gimple_call_internal_p (call))\n+    gsi_move_before (&gsi_from, &gsi);\n+  else\n+    {\n+      /* For __builtin_c[lt]z* force .C[LT]Z ifn, because only\n+\t the latter is well defined at zero.  */\n+      call = gimple_build_call_internal (ifn, 1, gimple_call_arg (call, 0));\n+      gimple_call_set_lhs (call, lhs);\n+      gsi_insert_before (&gsi, call, GSI_SAME_STMT);\n+      gsi_remove (&gsi_from, true);\n+    }\n+  reset_flow_sensitive_info (lhs);\n \n   /* Now update the PHI and remove unneeded bbs.  */\n   replace_phi_edge_with_variable (cond_bb, e2, phi, lhs);"}]}