{"sha": "0612883d9dc6eebecdbe937893b86597acae237c", "node_id": "C_kwDOANBUbNoAKDA2MTI4ODNkOWRjNmVlYmVjZGJlOTM3ODkzYjg2NTk3YWNhZTIzN2M", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-10T12:31:02Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-10T12:31:02Z"}, "message": "vect: Pass scalar_costs to finish_cost\n\nWhen finishing the vector costs, it can be useful to know\nwhat the associated scalar costs were.  This allows targets\nto read information collected about the original scalar loop\nwhen trying to make a final judgement about the cost of the\nvector code.\n\nThis patch therefore passes the scalar costs to\nvector_costs::finish_cost.  The parameter is null for the\nscalar costs themselves.\n\ngcc/\n\t* tree-vectorizer.h (vector_costs::finish_cost): Take the\n\tcorresponding scalar costs as a parameter.\n\t(finish_cost): Likewise.\n\t* tree-vect-loop.c (vect_compute_single_scalar_iteration_cost)\n\t(vect_estimate_min_profitable_iters): Update accordingly.\n\t* tree-vect-slp.c (vect_bb_vectorization_profitable_p): Likewise.\n\t* tree-vectorizer.c (vector_costs::finish_cost): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_vector_costs::finish_cost):\n\tLikewise.\n\t* config/rs6000/rs6000.c (rs6000_cost_data::finish_cost): Likewise.", "tree": {"sha": "7e70dd558bb1fe1a5e589f6325cfce88f48f0ec3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e70dd558bb1fe1a5e589f6325cfce88f48f0ec3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0612883d9dc6eebecdbe937893b86597acae237c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0612883d9dc6eebecdbe937893b86597acae237c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0612883d9dc6eebecdbe937893b86597acae237c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0612883d9dc6eebecdbe937893b86597acae237c/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ddc6a57a74c3a388eb1626e59005f54c6e66c57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ddc6a57a74c3a388eb1626e59005f54c6e66c57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ddc6a57a74c3a388eb1626e59005f54c6e66c57"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "cd4332d04e548aede63cb4ab269bc4ffeb87f2e6", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0612883d9dc6eebecdbe937893b86597acae237c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0612883d9dc6eebecdbe937893b86597acae237c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=0612883d9dc6eebecdbe937893b86597acae237c", "patch": "@@ -14745,7 +14745,7 @@ class aarch64_vector_costs : public vector_costs\n \t\t\t      stmt_vec_info stmt_info, tree vectype,\n \t\t\t      int misalign,\n \t\t\t      vect_cost_model_location where) override;\n-  void finish_cost () override;\n+  void finish_cost (const vector_costs *) override;\n \n private:\n   void record_potential_advsimd_unrolling (loop_vec_info);\n@@ -16138,15 +16138,15 @@ aarch64_vector_costs::adjust_body_cost (unsigned int body_cost)\n }\n \n void\n-aarch64_vector_costs::finish_cost ()\n+aarch64_vector_costs::finish_cost (const vector_costs *scalar_costs)\n {\n   loop_vec_info loop_vinfo = dyn_cast<loop_vec_info> (m_vinfo);\n   if (loop_vinfo\n       && m_vec_flags\n       && aarch64_use_new_vector_costs_p ())\n     m_costs[vect_body] = adjust_body_cost (m_costs[vect_body]);\n \n-  vector_costs::finish_cost ();\n+  vector_costs::finish_cost (scalar_costs);\n }\n \n static void initialize_aarch64_code_model (struct gcc_options *);"}, {"sha": "e4843eb0f1cf57de3d6d64f363f1ead1c463a203", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0612883d9dc6eebecdbe937893b86597acae237c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0612883d9dc6eebecdbe937893b86597acae237c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=0612883d9dc6eebecdbe937893b86597acae237c", "patch": "@@ -5268,7 +5268,7 @@ class rs6000_cost_data : public vector_costs\n \t\t\t      stmt_vec_info stmt_info, tree vectype,\n \t\t\t      int misalign,\n \t\t\t      vect_cost_model_location where) override;\n-  void finish_cost () override;\n+  void finish_cost (const vector_costs *) override;\n \n protected:\n   void update_target_cost_per_stmt (vect_cost_for_stmt, stmt_vec_info,\n@@ -5522,7 +5522,7 @@ rs6000_cost_data::adjust_vect_cost_per_loop (loop_vec_info loop_vinfo)\n }\n \n void\n-rs6000_cost_data::finish_cost ()\n+rs6000_cost_data::finish_cost (const vector_costs *scalar_costs)\n {\n   if (loop_vec_info loop_vinfo = dyn_cast<loop_vec_info> (m_vinfo))\n     {\n@@ -5539,7 +5539,7 @@ rs6000_cost_data::finish_cost ()\n \tm_costs[vect_body] += 10000;\n     }\n \n-  vector_costs::finish_cost ();\n+  vector_costs::finish_cost (scalar_costs);\n }\n \n /* Implement targetm.loop_unroll_adjust.  */"}, {"sha": "1cd5dbcb6f7788b467a74b09385c4938525524b3", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0612883d9dc6eebecdbe937893b86597acae237c/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0612883d9dc6eebecdbe937893b86597acae237c/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=0612883d9dc6eebecdbe937893b86597acae237c", "patch": "@@ -1301,7 +1301,7 @@ vect_compute_single_scalar_iteration_cost (loop_vec_info loop_vinfo)\n     (void) add_stmt_cost (loop_vinfo->scalar_costs, si->count,\n \t\t\t  si->kind, si->stmt_info, si->vectype,\n \t\t\t  si->misalign, si->where);\n-  loop_vinfo->scalar_costs->finish_cost ();\n+  loop_vinfo->scalar_costs->finish_cost (nullptr);\n }\n \n \n@@ -4130,8 +4130,8 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n     }\n \n   /* Complete the target-specific cost calculations.  */\n-  finish_cost (loop_vinfo->vector_costs, &vec_prologue_cost,\n-\t       &vec_inside_cost, &vec_epilogue_cost);\n+  finish_cost (loop_vinfo->vector_costs, loop_vinfo->scalar_costs,\n+\t       &vec_prologue_cost, &vec_inside_cost, &vec_epilogue_cost);\n \n   vec_outside_cost = (int)(vec_prologue_cost + vec_epilogue_cost);\n "}, {"sha": "94c75497495b6f28358120bc14af001fcaf027f4", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0612883d9dc6eebecdbe937893b86597acae237c/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0612883d9dc6eebecdbe937893b86597acae237c/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=0612883d9dc6eebecdbe937893b86597acae237c", "patch": "@@ -5344,7 +5344,8 @@ vect_bb_vectorization_profitable_p (bb_vec_info bb_vinfo,\n       while (si < li_scalar_costs.length ()\n \t     && li_scalar_costs[si].first == sl);\n       unsigned dummy;\n-      finish_cost (scalar_target_cost_data, &dummy, &scalar_cost, &dummy);\n+      finish_cost (scalar_target_cost_data, nullptr,\n+\t\t   &dummy, &scalar_cost, &dummy);\n       delete scalar_target_cost_data;\n \n       /* Complete the target-specific vector cost calculation.  */\n@@ -5356,8 +5357,8 @@ vect_bb_vectorization_profitable_p (bb_vec_info bb_vinfo,\n \t}\n       while (vi < li_vector_costs.length ()\n \t     && li_vector_costs[vi].first == vl);\n-      finish_cost (vect_target_cost_data, &vec_prologue_cost,\n-\t\t   &vec_inside_cost, &vec_epilogue_cost);\n+      finish_cost (vect_target_cost_data, scalar_target_cost_data,\n+\t\t   &vec_prologue_cost, &vec_inside_cost, &vec_epilogue_cost);\n       delete vect_target_cost_data;\n \n       vec_outside_cost = vec_prologue_cost + vec_epilogue_cost;"}, {"sha": "71f12b3257e69a033eb23fe4fe05f8c342a290d8", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0612883d9dc6eebecdbe937893b86597acae237c/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0612883d9dc6eebecdbe937893b86597acae237c/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=0612883d9dc6eebecdbe937893b86597acae237c", "patch": "@@ -1703,7 +1703,7 @@ vector_costs::add_stmt_cost (int count, vect_cost_for_stmt kind,\n /* See the comment above the declaration for details.  */\n \n void\n-vector_costs::finish_cost ()\n+vector_costs::finish_cost (const vector_costs *)\n {\n   gcc_assert (!m_finished);\n   m_finished = true;"}, {"sha": "f8f306415121a970d2ec836b1fbf7ec0c75ad2df", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0612883d9dc6eebecdbe937893b86597acae237c/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0612883d9dc6eebecdbe937893b86597acae237c/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=0612883d9dc6eebecdbe937893b86597acae237c", "patch": "@@ -1415,8 +1415,11 @@ class vector_costs\n \t\t\t\t      vect_cost_model_location where);\n \n   /* Finish calculating the cost of the code.  The results can be\n-     read back using the functions below.  */\n-  virtual void finish_cost ();\n+     read back using the functions below.\n+\n+     If the costs describe vector code, SCALAR_COSTS gives the costs\n+     of the corresponding scalar code, otherwise it is null.  */\n+  virtual void finish_cost (const vector_costs *scalar_costs);\n \n   /* The costs in THIS and OTHER both describe ways of vectorizing\n      a main loop.  Return true if the costs described by THIS are\n@@ -1691,10 +1694,11 @@ add_stmt_cost (vector_costs *costs, stmt_info_for_cost *i)\n /* Alias targetm.vectorize.finish_cost.  */\n \n static inline void\n-finish_cost (vector_costs *costs, unsigned *prologue_cost,\n-\t     unsigned *body_cost, unsigned *epilogue_cost)\n+finish_cost (vector_costs *costs, const vector_costs *scalar_costs,\n+\t     unsigned *prologue_cost, unsigned *body_cost,\n+\t     unsigned *epilogue_cost)\n {\n-  costs->finish_cost ();\n+  costs->finish_cost (scalar_costs);\n   *prologue_cost = costs->prologue_cost ();\n   *body_cost = costs->body_cost ();\n   *epilogue_cost = costs->epilogue_cost ();"}]}