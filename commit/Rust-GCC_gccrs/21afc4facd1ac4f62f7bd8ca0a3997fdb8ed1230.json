{"sha": "21afc4facd1ac4f62f7bd8ca0a3997fdb8ed1230", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFhZmM0ZmFjZDFhYzRmNjJmN2JkOGNhMGEzOTk3ZmRiOGVkMTIzMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-05-31T10:46:02Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-31T10:46:02Z"}, "message": "[Ada] Fix strange behavior of Object_Size for packed array subtype\n\n2018-05-31  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <discrete_type>: Do not\n\tdeal with the ___XP suffix for packed array types here...\n\t<E_Array_Subtype>: ...or here when processing the implementation type\n\tbut when processing the original type instead.  Do not reuse the DECL\n\tof the implementation type for the original type.  Tidy up.\n\nFrom-SVN: r260999", "tree": {"sha": "0c0b16eb90408ddbe5c5e9659027efce382ee2dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c0b16eb90408ddbe5c5e9659027efce382ee2dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21afc4facd1ac4f62f7bd8ca0a3997fdb8ed1230", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21afc4facd1ac4f62f7bd8ca0a3997fdb8ed1230", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21afc4facd1ac4f62f7bd8ca0a3997fdb8ed1230", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21afc4facd1ac4f62f7bd8ca0a3997fdb8ed1230/comments", "author": null, "committer": null, "parents": [{"sha": "42e4b796dccc43e0a30cd26186037f3fda7639fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42e4b796dccc43e0a30cd26186037f3fda7639fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42e4b796dccc43e0a30cd26186037f3fda7639fd"}], "stats": {"total": 52, "additions": 20, "deletions": 32}, "files": [{"sha": "b485549ab72ad06b8d34ab980e9dbc9796d28360", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21afc4facd1ac4f62f7bd8ca0a3997fdb8ed1230/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21afc4facd1ac4f62f7bd8ca0a3997fdb8ed1230/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=21afc4facd1ac4f62f7bd8ca0a3997fdb8ed1230", "patch": "@@ -1,3 +1,11 @@\n+2018-05-31  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <discrete_type>: Do not\n+\tdeal with the ___XP suffix for packed array types here...\n+\t<E_Array_Subtype>: ...or here when processing the implementation type\n+\tbut when processing the original type instead.  Do not reuse the DECL\n+\tof the implementation type for the original type.  Tidy up.\n+\n 2018-05-31  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* einfo.ads (Object_Size_Clause): Declare."}, {"sha": "d5911ab2565e20161b84e5ce0ce3382ded901db5", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 12, "deletions": 32, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21afc4facd1ac4f62f7bd8ca0a3997fdb8ed1230/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21afc4facd1ac4f62f7bd8ca0a3997fdb8ed1230/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=21afc4facd1ac4f62f7bd8ca0a3997fdb8ed1230", "patch": "@@ -1888,10 +1888,6 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t\t\t    UI_To_gnu (RM_Size (gnat_entity), bitsizetype));\n \t  TYPE_PACKED_ARRAY_TYPE_P (gnu_type) = 1;\n \n-\t  /* Strip the ___XP suffix for standard DWARF.  */\n-\t  if (gnat_encodings == DWARF_GNAT_ENCODINGS_MINIMAL)\n-\t    gnu_entity_name = TYPE_NAME (gnu_type);\n-\n \t  /* Create a stripped-down declaration, mainly for debugging.  */\n \t  create_type_decl (gnu_entity_name, gnu_type, true, debug_info_p,\n \t\t\t    gnat_entity);\n@@ -2638,17 +2634,6 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t\tset_nonaliased_component_on_array_type (gnu_type);\n \t    }\n \n-\t  /* Strip the ___XP suffix for standard DWARF.  */\n-\t  if (Is_Packed_Array_Impl_Type (gnat_entity)\n-\t      && gnat_encodings == DWARF_GNAT_ENCODINGS_MINIMAL)\n-\t    {\n-\t      Entity_Id gnat_original_array_type\n-\t\t= Underlying_Type (Original_Array_Type (gnat_entity));\n-\n-\t      gnu_entity_name\n-\t\t= get_entity_name (gnat_original_array_type);\n-\t    }\n-\n \t  /* Attach the TYPE_STUB_DECL in case we have a parallel type.  */\n \t  TYPE_STUB_DECL (gnu_type)\n \t    = create_type_stub_decl (gnu_entity_name, gnu_type);\n@@ -2774,13 +2759,10 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t     array subtypes the same alias set.  */\n \t  relate_alias_sets (gnu_type, gnu_base_type, ALIAS_SET_COPY);\n \n-\t  /* If this is a packed type, make this type the same as the packed\n-\t     array type, but do some adjusting in the type first.  */\n+\t  /* If this is a packed type implemented specially, then replace our\n+\t     type with the implementation type.  */\n \t  if (Present (Packed_Array_Impl_Type (gnat_entity)))\n \t    {\n-\t      Entity_Id gnat_index;\n-\t      tree gnu_inner;\n-\n \t      /* First finish the type we had been making so that we output\n \t\t debugging information for it.  */\n \t      process_attributes (&gnu_type, &attr_list, false, gnat_entity);\n@@ -2795,26 +2777,24 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t\t That's sort of \"morally\" true and will make it possible for\n \t\t the debugger to look it up by name in DWARF, which is needed\n \t\t in order to decode the packed array type.  */\n-\t      gnu_decl\n+\t      tree gnu_tmp_decl\n \t\t= create_type_decl (gnu_entity_name, gnu_type,\n \t\t\t\t    !Comes_From_Source (Etype (gnat_entity))\n \t\t\t\t    && artificial_p, debug_info_p,\n \t\t\t\t    gnat_entity);\n-\n \t      /* Save it as our equivalent in case the call below elaborates\n \t\t this type again.  */\n-\t      save_gnu_tree (gnat_entity, gnu_decl, false);\n+\t      save_gnu_tree (gnat_entity, gnu_tmp_decl, false);\n \n-\t      gnu_decl\n-\t\t= gnat_to_gnu_entity (Packed_Array_Impl_Type (gnat_entity),\n-\t\t\t\t      NULL_TREE, false);\n-\t      this_made_decl = true;\n-\t      gnu_type = TREE_TYPE (gnu_decl);\n+\t      gnu_type\n+\t\t= gnat_to_gnu_type (Packed_Array_Impl_Type (gnat_entity));\n \t      save_gnu_tree (gnat_entity, NULL_TREE, false);\n-\t      save_gnu_tree (gnat_entity, gnu_decl, false);\n-\t      saved = true;\n \n-\t      gnu_inner = gnu_type;\n+\t      /* Set the ___XP suffix for GNAT encodings.  */\n+\t      if (gnat_encodings != DWARF_GNAT_ENCODINGS_MINIMAL)\n+\t\tgnu_entity_name = DECL_NAME (TYPE_NAME (gnu_type));\n+\n+\t      tree gnu_inner = gnu_type;\n \t      while (TREE_CODE (gnu_inner) == RECORD_TYPE\n \t\t     && (TYPE_JUSTIFIED_MODULAR_P (gnu_inner)\n \t\t\t || TYPE_PADDING_P (gnu_inner)))\n@@ -2851,7 +2831,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t\t      gcc_checking_assert (!TYPE_ACTUAL_BOUNDS (gnu_inner));\n \t\t    }\n \n-\t\t  for (gnat_index = First_Index (gnat_entity);\n+\t\t  for (Entity_Id gnat_index = First_Index (gnat_entity);\n \t\t       Present (gnat_index);\n \t\t       gnat_index = Next_Index (gnat_index))\n \t\t    SET_TYPE_ACTUAL_BOUNDS"}]}