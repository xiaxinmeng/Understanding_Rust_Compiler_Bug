{"sha": "e12671331b81c8deffc0491e344eb503c0c517c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTEyNjcxMzMxYjgxYzhkZWZmYzA0OTFlMzQ0ZWI1MDNjMGM1MTdjOA==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2011-10-06T19:25:53Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2011-10-06T19:25:53Z"}, "message": "system.h (OUTPUT_ADDR_CONST_EXTRA): Poison.\n\n\t* system.h (OUTPUT_ADDR_CONST_EXTRA): Poison.\n\t* doc/tm.texi.in (OUTPUT_ADDR_CONST_EXTRA): Remove documentation.\n\t* doc/tm.texi: Regenerate.\n\t* target.def (output_addr_const_extra): Use\n\thook_bool_FILEptr_rtx_false.\n\t* targhooks.c (default_asm_output_addr_const_extra): Remove.\n\t* targhooks.h (default_asm_output_addr_const_extra): Remove.\n\t* hooks.c (hook_bool_FILEptr_rtx_false): New functions.\n\t* hooks.h (hook_bool_FILEptr_rtx_false): Declare.\n\nFrom-SVN: r179630", "tree": {"sha": "ed408683173f92d7d0abeb303fe38d4d20bc713b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed408683173f92d7d0abeb303fe38d4d20bc713b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e12671331b81c8deffc0491e344eb503c0c517c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e12671331b81c8deffc0491e344eb503c0c517c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e12671331b81c8deffc0491e344eb503c0c517c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e12671331b81c8deffc0491e344eb503c0c517c8/comments", "author": null, "committer": null, "parents": [{"sha": "ce72a9a305f5de10f43446aaf3c3fecdf77d7987", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce72a9a305f5de10f43446aaf3c3fecdf77d7987", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce72a9a305f5de10f43446aaf3c3fecdf77d7987"}], "stats": {"total": 64, "additions": 22, "deletions": 42}, "files": [{"sha": "16ef45abb0cc15bccfe6ae45dddcaacbaf11fea9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e12671331b81c8deffc0491e344eb503c0c517c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e12671331b81c8deffc0491e344eb503c0c517c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e12671331b81c8deffc0491e344eb503c0c517c8", "patch": "@@ -1,3 +1,15 @@\n+2011-10-06  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* system.h (OUTPUT_ADDR_CONST_EXTRA): Poison.\n+\t* doc/tm.texi.in (OUTPUT_ADDR_CONST_EXTRA): Remove documentation.\n+\t* doc/tm.texi: Regenerate.\n+\t* target.def (output_addr_const_extra): Use\n+\thook_bool_FILEptr_rtx_false.\n+\t* targhooks.c (default_asm_output_addr_const_extra): Remove.\n+\t* targhooks.h (default_asm_output_addr_const_extra): Remove.\n+\t* hooks.c (hook_bool_FILEptr_rtx_false): New functions.\n+\t* hooks.h (hook_bool_FILEptr_rtx_false): Declare.\n+\n 2011-10-06  David S. Miller  <davem@davemloft.net>\n \n \t* config/sparc/sparc.md (popcount<mode>2, clz<mode>2): Split up into..."}, {"sha": "90cef1c5f38537ffdc143c93d6268993f52e7ad2", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e12671331b81c8deffc0491e344eb503c0c517c8/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e12671331b81c8deffc0491e344eb503c0c517c8/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=e12671331b81c8deffc0491e344eb503c0c517c8", "patch": "@@ -7530,18 +7530,6 @@ itself, by calling, for example, @code{output_operand_lossage}, it may just\n return @code{true}.\n @end deftypefn\n \n-@defmac OUTPUT_ADDR_CONST_EXTRA (@var{stream}, @var{x}, @var{fail})\n-A C statement to recognize @var{rtx} patterns that\n-@code{output_addr_const} can't deal with, and output assembly code to\n-@var{stream} corresponding to the pattern @var{x}.  This may be used to\n-allow machine-dependent @code{UNSPEC}s to appear within constants.\n-\n-If @code{OUTPUT_ADDR_CONST_EXTRA} fails to recognize a pattern, it must\n-@code{goto fail}, so that a standard error message is printed.  If it\n-prints an error message itself, by calling, for example,\n-@code{output_operand_lossage}, it may just complete normally.\n-@end defmac\n-\n @defmac ASM_OUTPUT_ASCII (@var{stream}, @var{ptr}, @var{len})\n A C statement to output to the stdio stream @var{stream} an assembler\n instruction to assemble a string constant containing the @var{len}"}, {"sha": "187122eea818d4dc19d6b2dc445c07e03f924a19", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e12671331b81c8deffc0491e344eb503c0c517c8/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e12671331b81c8deffc0491e344eb503c0c517c8/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=e12671331b81c8deffc0491e344eb503c0c517c8", "patch": "@@ -7446,18 +7446,6 @@ itself, by calling, for example, @code{output_operand_lossage}, it may just\n return @code{true}.\n @end deftypefn\n \n-@defmac OUTPUT_ADDR_CONST_EXTRA (@var{stream}, @var{x}, @var{fail})\n-A C statement to recognize @var{rtx} patterns that\n-@code{output_addr_const} can't deal with, and output assembly code to\n-@var{stream} corresponding to the pattern @var{x}.  This may be used to\n-allow machine-dependent @code{UNSPEC}s to appear within constants.\n-\n-If @code{OUTPUT_ADDR_CONST_EXTRA} fails to recognize a pattern, it must\n-@code{goto fail}, so that a standard error message is printed.  If it\n-prints an error message itself, by calling, for example,\n-@code{output_operand_lossage}, it may just complete normally.\n-@end defmac\n-\n @defmac ASM_OUTPUT_ASCII (@var{stream}, @var{ptr}, @var{len})\n A C statement to output to the stdio stream @var{stream} an assembler\n instruction to assemble a string constant containing the @var{len}"}, {"sha": "ae59c333d6158278f0e2a8e8f945c1c633f3741d", "filename": "gcc/hooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e12671331b81c8deffc0491e344eb503c0c517c8/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e12671331b81c8deffc0491e344eb503c0c517c8/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=e12671331b81c8deffc0491e344eb503c0c517c8", "patch": "@@ -132,6 +132,14 @@ hook_void_FILEptr_constcharptr (FILE *a ATTRIBUTE_UNUSED, const char *b ATTRIBUT\n {\n }\n \n+/* Generic hook that takes (FILE *, rtx) and returns false.  */\n+bool\n+hook_bool_FILEptr_rtx_false (FILE *a ATTRIBUTE_UNUSED,\n+\t\t\t     rtx b ATTRIBUTE_UNUSED)\n+{\n+  return false;\n+}\n+\n /* Used for the TARGET_ASM_CAN_OUTPUT_MI_THUNK hook.  */\n bool\n hook_bool_const_tree_hwi_hwi_const_tree_false (const_tree a ATTRIBUTE_UNUSED,"}, {"sha": "2e10d1fd682d1251d4f8e7d386f79c0885f3ae1c", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e12671331b81c8deffc0491e344eb503c0c517c8/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e12671331b81c8deffc0491e344eb503c0c517c8/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=e12671331b81c8deffc0491e344eb503c0c517c8", "patch": "@@ -63,6 +63,7 @@ extern void hook_void_void (void);\n extern void hook_void_constcharptr (const char *);\n extern void hook_void_rtx_int (rtx, int);\n extern void hook_void_FILEptr_constcharptr (FILE *, const char *);\n+extern bool hook_bool_FILEptr_rtx_false (FILE *, rtx);\n extern void hook_void_tree (tree);\n extern void hook_void_tree_treeptr (tree, tree *);\n extern void hook_void_int_int (int, int);"}, {"sha": "c3bec0e03915c9769c1128299904563cd0d7faf4", "filename": "gcc/target.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e12671331b81c8deffc0491e344eb503c0c517c8/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e12671331b81c8deffc0491e344eb503c0c517c8/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=e12671331b81c8deffc0491e344eb503c0c517c8", "patch": "@@ -456,7 +456,7 @@ DEFHOOK\n (output_addr_const_extra,\n  \"\",\n  bool, (FILE *file, rtx x),\n- default_asm_output_addr_const_extra)\n+ hook_bool_FILEptr_rtx_false)\n \n /* ??? The TARGET_PRINT_OPERAND* hooks are part of the asm_out struct,\n    even though that is not reflected in the macro name to override their"}, {"sha": "81fd12f7b781380673a013f96523995bc485267a", "filename": "gcc/targhooks.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e12671331b81c8deffc0491e344eb503c0c517c8/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e12671331b81c8deffc0491e344eb503c0c517c8/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=e12671331b81c8deffc0491e344eb503c0c517c8", "patch": "@@ -371,21 +371,6 @@ default_mangle_assembler_name (const char *name ATTRIBUTE_UNUSED)\n   return get_identifier (stripped);\n }\n \n-/* The default implementation of TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA.  */\n-\n-bool\n-default_asm_output_addr_const_extra (FILE *file ATTRIBUTE_UNUSED,\n-\t\t\t\t     rtx x ATTRIBUTE_UNUSED)\n-{\n-#ifdef OUTPUT_ADDR_CONST_EXTRA\n-  OUTPUT_ADDR_CONST_EXTRA (file, x, fail);\n-  return true;\n-\n-fail:\n-#endif\n-  return false;\n-}\n-\n /* True if MODE is valid for the target.  By \"valid\", we mean able to\n    be manipulated in non-trivial ways.  In particular, this means all\n    the arithmetic is supported."}, {"sha": "f19fb506bf5c1c397d7d5efbe4f771a20832218f", "filename": "gcc/targhooks.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e12671331b81c8deffc0491e344eb503c0c517c8/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e12671331b81c8deffc0491e344eb503c0c517c8/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=e12671331b81c8deffc0491e344eb503c0c517c8", "patch": "@@ -67,8 +67,6 @@ extern void default_print_operand_address (FILE *, rtx);\n extern bool default_print_operand_punct_valid_p (unsigned char);\n extern tree default_mangle_assembler_name (const char *);\n \n-extern bool default_asm_output_addr_const_extra (FILE *, rtx);\n-\n extern bool default_scalar_mode_supported_p (enum machine_mode);\n extern bool targhook_words_big_endian (void);\n extern bool targhook_float_words_big_endian (void);"}]}