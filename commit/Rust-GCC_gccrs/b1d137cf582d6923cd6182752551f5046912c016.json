{"sha": "b1d137cf582d6923cd6182752551f5046912c016", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFkMTM3Y2Y1ODJkNjkyM2NkNjE4Mjc1MjU1MWY1MDQ2OTEyYzAxNg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-12-11T23:43:16Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-12-11T23:43:16Z"}, "message": "reflect, runtime: Let reflect.MakeFunc functions call recover.\n\nFrom-SVN: r205908", "tree": {"sha": "958f4d3468ed91fa20d17ed4c61877af6f98a89a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/958f4d3468ed91fa20d17ed4c61877af6f98a89a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1d137cf582d6923cd6182752551f5046912c016", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d137cf582d6923cd6182752551f5046912c016", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1d137cf582d6923cd6182752551f5046912c016", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d137cf582d6923cd6182752551f5046912c016/comments", "author": null, "committer": null, "parents": [{"sha": "de04d95e64c39dbc5475361146260aed6db02faa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de04d95e64c39dbc5475361146260aed6db02faa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de04d95e64c39dbc5475361146260aed6db02faa"}], "stats": {"total": 111, "additions": 109, "deletions": 2}, "files": [{"sha": "d51115bb1270fd6d56d3ffef8ba141a3c77976f7", "filename": "libgo/go/reflect/makefunc_386.S", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d137cf582d6923cd6182752551f5046912c016/libgo%2Fgo%2Freflect%2Fmakefunc_386.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d137cf582d6923cd6182752551f5046912c016/libgo%2Fgo%2Freflect%2Fmakefunc_386.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fmakefunc_386.S?ref=b1d137cf582d6923cd6182752551f5046912c016", "patch": "@@ -48,6 +48,15 @@ reflect.makeFuncStub:\n \tleal\t8(%ebp), %eax\t/* Set esp field in struct.  */\n \tmovl\t%eax, -24(%ebp)\n \n+\t/* For MakeFunc functions that call recover.  */\n+\tmovl\t4(%ebp), %eax\n+\tmovl\t%eax, (%esp)\n+#ifdef __PIC__\n+\tcall\t__go_makefunc_can_recover@PLT\n+#else\n+\tcall\t__go_makefunc_can_recover\n+#endif\n+\n #ifdef __PIC__\n \tcall\t__go_get_closure@PLT\n #else\n@@ -65,6 +74,13 @@ reflect.makeFuncStub:\n \tcall\treflect.MakeFuncStubGo\n #endif\n \n+\t/* MakeFunc functions can no longer call recover.  */\n+#ifdef __PIC__\n+\tcall __go_makefunc_returning@PLT\n+#else\n+\tcall __go_makefunc_returning\n+#endif\n+\n \t/* Set return registers.  */\n \n \tmovl\t-20(%ebp), %eax"}, {"sha": "88302eee1b22641c018577fbc6febc9a282decd3", "filename": "libgo/go/reflect/makefunc_amd64.S", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d137cf582d6923cd6182752551f5046912c016/libgo%2Fgo%2Freflect%2Fmakefunc_amd64.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d137cf582d6923cd6182752551f5046912c016/libgo%2Fgo%2Freflect%2Fmakefunc_amd64.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fmakefunc_amd64.S?ref=b1d137cf582d6923cd6182752551f5046912c016", "patch": "@@ -61,6 +61,14 @@ reflect.makeFuncStub:\n \tmovdqa\t%xmm6, 0xa0(%rsp)\n \tmovdqa\t%xmm7, 0xb0(%rsp)\n \n+\t/* For MakeFunc functions that call recover.  */\n+\tmovq\t8(%rbp), %rdi\n+#ifdef __PIC__\n+\tcall\t__go_makefunc_can_recover@PLT\n+#else\n+\tcall\t__go_makefunc_can_recover\n+#endif\n+\n \t# Get function type.\n #ifdef __PIC__\n \tcall\t__go_get_closure@PLT\n@@ -77,6 +85,13 @@ reflect.makeFuncStub:\n \tcall\treflect.MakeFuncStubGo\n #endif\n \n+\t/* MakeFunc functions can no longer call recover.  */\n+#ifdef __PIC__\n+\tcall __go_makefunc_returning@PLT\n+#else\n+\tcall __go_makefunc_returning\n+#endif\n+\n \t# The structure will be updated with any return values.  Load\n \t# all possible return registers before returning to the caller.\n "}, {"sha": "fed8db385ae830172aa06ef2e101abf22d1c341b", "filename": "libgo/runtime/go-defer.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d137cf582d6923cd6182752551f5046912c016/libgo%2Fruntime%2Fgo-defer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d137cf582d6923cd6182752551f5046912c016/libgo%2Fruntime%2Fgo-defer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-defer.c?ref=b1d137cf582d6923cd6182752551f5046912c016", "patch": "@@ -27,6 +27,7 @@ __go_defer (_Bool *frame, void (*pfn) (void *), void *arg)\n   n->__pfn = pfn;\n   n->__arg = arg;\n   n->__retaddr = NULL;\n+  n->__makefunc_can_recover = 0;\n   g->defer = n;\n }\n "}, {"sha": "3298ce9505913c456fd913c7dfeb67ea90d3c584", "filename": "libgo/runtime/go-defer.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d137cf582d6923cd6182752551f5046912c016/libgo%2Fruntime%2Fgo-defer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d137cf582d6923cd6182752551f5046912c016/libgo%2Fruntime%2Fgo-defer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-defer.h?ref=b1d137cf582d6923cd6182752551f5046912c016", "patch": "@@ -34,4 +34,10 @@ struct __go_defer_stack\n      set by __go_set_defer_retaddr which is called by the thunks\n      created by defer statements.  */\n   const void *__retaddr;\n+\n+  /* Set to true if a function created by reflect.MakeFunc is\n+     permitted to recover.  The return address of such a function\n+     function will be somewhere in libffi, so __retaddr is not\n+     useful.  */\n+  _Bool __makefunc_can_recover;\n };"}, {"sha": "6cef2660ea4d870fb7b5c4ebc9046f5ad8feebc8", "filename": "libgo/runtime/go-recover.c", "status": "modified", "additions": 70, "deletions": 2, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d137cf582d6923cd6182752551f5046912c016/libgo%2Fruntime%2Fgo-recover.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d137cf582d6923cd6182752551f5046912c016/libgo%2Fruntime%2Fgo-recover.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-recover.c?ref=b1d137cf582d6923cd6182752551f5046912c016", "patch": "@@ -16,12 +16,14 @@\n    __go_can_recover--this is, the thunk.  */\n \n _Bool\n-__go_can_recover (const void* retaddr)\n+__go_can_recover (const void *retaddr)\n {\n   G *g;\n   struct __go_defer_stack *d;\n   const char* ret;\n   const char* dret;\n+  Location loc;\n+  const byte *name;\n \n   g = runtime_g ();\n \n@@ -52,7 +54,73 @@ __go_can_recover (const void* retaddr)\n #endif\n \n   dret = (const char *) d->__retaddr;\n-  return ret <= dret && ret + 16 >= dret;\n+  if (ret <= dret && ret + 16 >= dret)\n+    return 1;\n+\n+  /* If the function calling recover was created by reflect.MakeFunc,\n+     then RETADDR will be somewhere in libffi.  Our caller is\n+     permitted to recover if it was called from libffi.  */\n+  if (!d->__makefunc_can_recover)\n+    return 0;\n+\n+  if (runtime_callers (2, &loc, 1) < 1)\n+    return 0;\n+\n+  /* If we have no function name, then we weren't called by Go code.\n+     Guess that we were called by libffi.  */\n+  if (loc.function.len == 0)\n+    return 1;\n+\n+  if (loc.function.len < 4)\n+    return 0;\n+  name = loc.function.str;\n+  if (*name == '_')\n+    {\n+      if (loc.function.len < 5)\n+\treturn 0;\n+      ++name;\n+    }\n+\n+  if (name[0] == 'f' && name[1] == 'f' && name[2] == 'i' && name[3] == '_')\n+    return 1;\n+\n+  return 0;\n+}\n+\n+/* This function is called when code is about to enter a function\n+   created by reflect.MakeFunc.  It is called by the function stub\n+   used by MakeFunc.  If the stub is permitted to call recover, then a\n+   real MakeFunc function is permitted to call recover.  */\n+\n+void\n+__go_makefunc_can_recover (const void *retaddr)\n+{\n+  struct __go_defer_stack *d;\n+\n+  d = runtime_g ()->defer;\n+  if (d != NULL\n+      && !d->__makefunc_can_recover\n+      && __go_can_recover (retaddr))\n+    d->__makefunc_can_recover = 1;\n+}\n+\n+/* This function is called when code is about to exit a function\n+   created by reflect.MakeFunc.  It is called by the function stub\n+   used by MakeFunc.  It clears the __makefunc_can_recover field.\n+   It's OK to always clear this field, because __go_can_recover will\n+   only be called by a stub created for a function that calls recover.\n+   That stub will not call a function created by reflect.MakeFunc, so\n+   by the time we get here any caller higher up on the call stack no\n+   longer needs the information.  */\n+\n+void\n+__go_makefunc_returning (void)\n+{\n+  struct __go_defer_stack *d;\n+\n+  d = runtime_g ()->defer;\n+  if (d != NULL)\n+    d->__makefunc_can_recover = 0;\n }\n \n /* This is only called when it is valid for the caller to recover the"}, {"sha": "0d0127b6c75acc225aef96ff8a31034a42212efe", "filename": "libgo/runtime/proc.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d137cf582d6923cd6182752551f5046912c016/libgo%2Fruntime%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d137cf582d6923cd6182752551f5046912c016/libgo%2Fruntime%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fproc.c?ref=b1d137cf582d6923cd6182752551f5046912c016", "patch": "@@ -539,6 +539,7 @@ runtime_main(void* dummy __attribute__((unused)))\n \td.__arg = (void*)-1;\n \td.__panic = g->panic;\n \td.__retaddr = nil;\n+\td.__makefunc_can_recover = 0;\n \td.__frame = &frame;\n \tg->defer = &d;\n "}]}