{"sha": "6339db3f4a9f2a7965f9622637589039481140a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMzOWRiM2Y0YTlmMmE3OTY1Zjk2MjI2Mzc1ODkwMzk0ODExNDBhNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-02-15T23:40:22Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-02-15T23:40:22Z"}, "message": "(PRINT_OPERAND_FLOAT): Removed.\n\n(ASM_OUTPUT_{FLOAT,DOUBLE,LONG_DOUBLE}_OPERAND): Defined.\n(PRINT_OPERAND): Turned off: use default.\n\nFrom-SVN: r13644", "tree": {"sha": "15fbe8506bf1eae44b9749e999e139ac57ae174b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15fbe8506bf1eae44b9749e999e139ac57ae174b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6339db3f4a9f2a7965f9622637589039481140a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6339db3f4a9f2a7965f9622637589039481140a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6339db3f4a9f2a7965f9622637589039481140a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6339db3f4a9f2a7965f9622637589039481140a5/comments", "author": null, "committer": null, "parents": [{"sha": "a34259fc5b6aaaa020f5ef77d411777a163b1705", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a34259fc5b6aaaa020f5ef77d411777a163b1705", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a34259fc5b6aaaa020f5ef77d411777a163b1705"}], "stats": {"total": 63, "additions": 47, "deletions": 16}, "files": [{"sha": "1388e0262b23daa64a9803f84359a43cb4881c59", "filename": "gcc/config/m68k/hp320.h", "status": "modified", "additions": 47, "deletions": 16, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6339db3f4a9f2a7965f9622637589039481140a5/gcc%2Fconfig%2Fm68k%2Fhp320.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6339db3f4a9f2a7965f9622637589039481140a5/gcc%2Fconfig%2Fm68k%2Fhp320.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fhp320.h?ref=6339db3f4a9f2a7965f9622637589039481140a5", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  HP-UX 68000/68020 version.\n-   Copyright (C) 1987, 88, 93, 94, 95, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 93, 94, 95, 96, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -178,8 +178,6 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_OUTPUT_COMMON\n #undef ASM_OUTPUT_LOCAL\n #undef ASM_FORMAT_PRIVATE_NAME\n-#undef PRINT_OPERAND\n-#undef PRINT_OPERAND_ADDRESS\n #undef FUNCTION_PROFILER\n #undef ASM_OUTPUT_INTERNAL_LABEL\n #undef GLOBAL_ASM_OP\n@@ -333,23 +331,54 @@ do { long l[3];\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_SOURCE_FILENAME(FILE, FILENAME)\n #define ASM_OUTPUT_SOURCE_LINE(FILE, LINENO)\n \n+/* Output a float value (represented as a C double) as an immediate operand.\n+   This macro is a 68k-specific macro.  */\n+\n+#undef ASM_OUTPUT_FLOAT_OPERAND\n #ifdef AS_BUG_FLOATING_CONSTANT\n-#define PRINT_OPERAND_FLOAT(CODE,FILE,VALUE,INT)\t\\\n- do { REAL_VALUE_TO_TARGET_SINGLE (VALUE, INT);\t\t\\\n-      fprintf (FILE, \"&0x%x\", INT); } while (0)\n+#define ASM_OUTPUT_FLOAT_OPERAND(CODE,FILE,VALUE)\t\t\\\n+ do { long l;\t\t\t\t\t\t\t\\\n+      REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\t\\\n+      fprintf ((FILE), \"&0x%lx\", l);\t\t\t\t\\\n+     } while (0)\n #else\n-#define PRINT_OPERAND_FLOAT(CODE,FILE,VALUE,INT)\t\\\n- do { if (CODE == 'f')\t\t\t\t\t\\\n-        { char dstr[30];\t\t\t\t\\\n-          REAL_VALUE_TO_DECIMAL (VALUE, \"%.9g\", dstr);\t\\\n-          fprintf (FILE, \"&0f%s\", dstr);\t\t\\\n-        }\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\\\n-        {\t\t\t\t\t\t\\\n-          REAL_VALUE_TO_TARGET_SINGLE (VALUE, INT);\t\\\n-          fprintf (FILE, \"&0x%x\", INT); } } while (0)\n+#define ASM_OUTPUT_FLOAT_OPERAND(CODE,FILE,VALUE)\t\t\\\n+ do {\t\t\t\t\t\t\t\t\\\n+      if (CODE == 'f')\t\t\t\t\t\t\\\n+        {\t\t\t\t\t\t\t\\\n+          char dstr[30];\t\t\t\t\t\\\n+          REAL_VALUE_TO_DECIMAL (VALUE, \"%.9g\", dstr);\t\t\\\n+          fprintf ((FILE), \"&0f%s\", dstr);\t\t\t\\\n+        }\t\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+        {\t\t\t\t\t\t\t\\\n+          long l;\t\t\t\t\t\t\\\n+          REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\\\n+          fprintf ((FILE), \"&0x%lx\", l);\t\t\t\\\n+        }\t\t\t\t\t\t\t\\\n+     } while (0)\n #endif /* AS_BUG_FLOATING_CONSTANT */\n \n+/* Output a double value (represented as a C double) as an immediate operand.\n+   This macro is a 68k-specific macro.  */\n+#undef ASM_OUTPUT_DOUBLE_OPERAND\n+#define ASM_OUTPUT_DOUBLE_OPERAND(FILE,VALUE)\t\t\t\t\\\n+ do { char dstr[30];\t\t\t\t\t\t\t\\\n+      REAL_VALUE_TO_DECIMAL (VALUE, \"%.20g\", dstr);\t\t\t\\\n+      fprintf (FILE, \"&0f%s\", dstr);\t\t\t\t\t\\\n+    } while (0)\n+\n+/* Note, long double immediate operands are not actually\n+   generated by m68k.md.  */\n+#undef ASM_OUTPUT_LONG_DOUBLE_OPERAND\n+#define ASM_OUTPUT_LONG_DOUBLE_OPERAND(FILE,VALUE)\t\t\t\\\n+ do { char dstr[30];\t\t\t\t\t\t\t\\\n+      REAL_VALUE_TO_DECIMAL (VALUE, \"%.20g\", dstr);\t\t\t\\\n+      fprintf (FILE, \"&0f%s\", dstr);\t\t\t\t\t\\\n+    } while (0)\n+\n+#if 0\n+#undef PRINT_OPERAND\n #define PRINT_OPERAND(FILE, X, CODE)  \\\n { if (CODE == '.') fprintf (FILE, \".\");\t\t\t\t\t\\\n   else if (CODE == '#') fprintf (FILE, \"&\");\t\t\t\t\\\n@@ -380,7 +409,9 @@ do { long l[3];\t\t\t\t\t\t\t\t\\\n       REAL_VALUE_TO_DECIMAL (r, \"%.20g\", dstr);\t\t\t\t\\\n       fprintf (FILE, \"&0f%s\", dstr); }\t\t\t\t\t\\\n   else { putc ('&', FILE); output_addr_const (FILE, X); }}\n+#endif\n \n+#undef PRINT_OPERAND_ADDRESS\n #define PRINT_OPERAND_ADDRESS(FILE, ADDR)  \\\n { register rtx reg1, reg2, breg, ireg;\t\t\t\t\t\\\n   register rtx addr = ADDR;\t\t\t\t\t\t\\"}]}