{"sha": "13ba36b478bfdfe2881bdc4a83c2caf2fd26fbd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNiYTM2YjQ3OGJmZGZlMjg4MWJkYzRhODNjMmNhZjJmZDI2ZmJkMg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-11-03T13:23:58Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-11-03T13:23:58Z"}, "message": "extend.texi, [...]: Use \"invalid\" instead of \"illegal\".\n\n\t* doc/extend.texi, doc/gcc.texi, doc/install.texi, doc/tm.texi:\n\tUse \"invalid\" instead of \"illegal\".  Use @r in comments in\n\texamples.\n\nFrom-SVN: r46730", "tree": {"sha": "f97dc1fda97d14fca02778ad48559ef6ee6f14df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f97dc1fda97d14fca02778ad48559ef6ee6f14df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13ba36b478bfdfe2881bdc4a83c2caf2fd26fbd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13ba36b478bfdfe2881bdc4a83c2caf2fd26fbd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13ba36b478bfdfe2881bdc4a83c2caf2fd26fbd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13ba36b478bfdfe2881bdc4a83c2caf2fd26fbd2/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6545a2b52497612fb664d5994f319e4e3f4cb495", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6545a2b52497612fb664d5994f319e4e3f4cb495", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6545a2b52497612fb664d5994f319e4e3f4cb495"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "c7349b3222a27e5d1ddd6aafe9c5f695532f7fef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ba36b478bfdfe2881bdc4a83c2caf2fd26fbd2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ba36b478bfdfe2881bdc4a83c2caf2fd26fbd2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13ba36b478bfdfe2881bdc4a83c2caf2fd26fbd2", "patch": "@@ -1,3 +1,9 @@\n+2001-11-03  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* doc/extend.texi, doc/gcc.texi, doc/install.texi, doc/tm.texi:\n+\tUse \"invalid\" instead of \"illegal\".  Use @r in comments in\n+\texamples.\n+\n 2001-11-02  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* c-decl.c (pushdecl): Move block inside if conditional to remove"}, {"sha": "7d2a28a9797a28fb24475c6f16afa47173f187a2", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ba36b478bfdfe2881bdc4a83c2caf2fd26fbd2/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ba36b478bfdfe2881bdc4a83c2caf2fd26fbd2/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=13ba36b478bfdfe2881bdc4a83c2caf2fd26fbd2", "patch": "@@ -1352,10 +1352,10 @@ object.  For example:\n struct foo @{ int x; int y[]; @};\n struct bar @{ struct foo z; @};\n \n-struct foo a = @{ 1, @{ 2, 3, 4 @} @};        // Legal.\n-struct bar b = @{ @{ 1, @{ 2, 3, 4 @} @} @};    // Illegal.\n-struct bar c = @{ @{ 1, @{ @} @} @};            // Legal.\n-struct foo d[1] = @{ @{ 1 @{ 2, 3, 4 @} @} @};  // Illegal.\n+struct foo a = @{ 1, @{ 2, 3, 4 @} @};        // @r{Valid.}\n+struct bar b = @{ @{ 1, @{ 2, 3, 4 @} @} @};    // @r{Invalid.}\n+struct bar c = @{ @{ 1, @{ @} @} @};            // @r{Valid.}\n+struct foo d[1] = @{ @{ 1 @{ 2, 3, 4 @} @} @};  // @r{Invalid.}\n @end example\n \n @node Variable Length"}, {"sha": "6fb37c128a9a6955ddfa9b27cf044ea7a43327ce", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ba36b478bfdfe2881bdc4a83c2caf2fd26fbd2/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ba36b478bfdfe2881bdc4a83c2caf2fd26fbd2/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=13ba36b478bfdfe2881bdc4a83c2caf2fd26fbd2", "patch": "@@ -3937,7 +3937,7 @@ The name of a file or file-like object on the host system which acts as\n a ``bit bucket''.  If you do not define this macro, GCC will use\n @samp{/dev/null} as the bit bucket.  If the target does not support a\n bit bucket, this should be defined to the null string, or some other\n-illegal filename.  If the bit bucket is not writable, GCC will use a\n+invalid filename.  If the bit bucket is not writable, GCC will use a\n temporary file instead.\n \n @findex COLLECT_EXPORT_LIST"}, {"sha": "2ec79c72044ab2ca1dca0fac84266b6f12041ac0", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ba36b478bfdfe2881bdc4a83c2caf2fd26fbd2/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ba36b478bfdfe2881bdc4a83c2caf2fd26fbd2/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=13ba36b478bfdfe2881bdc4a83c2caf2fd26fbd2", "patch": "@@ -3278,7 +3278,7 @@ newer: @command{g++} will complain that types are missing.  These headers assume\n that omitting the type means @code{int}; this assumption worked for C89 but\n is wrong for C++, and is now wrong for C99 also.\n \n-@command{g++} accepts such (illegal) constructs with the option\n+@command{g++} accepts such (invalid) constructs with the option\n @option{-fpermissive}; it\n will assume that any missing type is @code{int} (as defined by C89).\n "}, {"sha": "3ff28f5af1df112134d0a019a996b8e71e72665a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ba36b478bfdfe2881bdc4a83c2caf2fd26fbd2/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ba36b478bfdfe2881bdc4a83c2caf2fd26fbd2/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=13ba36b478bfdfe2881bdc4a83c2caf2fd26fbd2", "patch": "@@ -2454,7 +2454,7 @@ which the compiler may not change modes arbitrarily.\n \n @item CLASS_CANNOT_CHANGE_MODE_P(@var{from}, @var{to})\n A C expression that is true if, for a register in\n-@code{CLASS_CANNOT_CHANGE_MODE}, the requested mode punning is illegal.\n+@code{CLASS_CANNOT_CHANGE_MODE}, the requested mode punning is invalid.\n \n For the example, loading 32-bit integer or floating-point objects into\n floating-point registers on the Alpha extends them to 64-bits."}]}