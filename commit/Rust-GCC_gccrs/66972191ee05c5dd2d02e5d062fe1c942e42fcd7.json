{"sha": "66972191ee05c5dd2d02e5d062fe1c942e42fcd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY5NzIxOTFlZTA1YzVkZDJkMDJlNWQwNjJmZTFjOTQyZTQyZmNkNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-12-06T09:23:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-12-06T09:23:51Z"}, "message": "re PR c++/71537 (GCC rejects consetxpr boolean conversions and comparisons on the result of pointer arithmetic.)\n\n2016-12-06  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/71537\n\t* fold-const-call.c (fold_const_call_1): Remove memchr handling here.\n\t(fold_const_call) <case CFN_BUILT_IN_STRNCMP,\n\tcase CFN_BUILT_IN_STRNCASECMP>: Formatting improvements.\n\t(fold_const_call) <case CFN_BUILT_IN_MEMCMP>: Likewise.  If s2 is 0\n\tand arguments have no side-effects, return 0.\n\t(fold_const_call): Handle CFN_BUILT_IN_MEMCHR.\n\n\t* g++.dg/cpp0x/constexpr-memchr.C: New test.\n\nFrom-SVN: r243285", "tree": {"sha": "7a92a285d47f865cf7dc7522c6b591159d6a2013", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a92a285d47f865cf7dc7522c6b591159d6a2013"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66972191ee05c5dd2d02e5d062fe1c942e42fcd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66972191ee05c5dd2d02e5d062fe1c942e42fcd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66972191ee05c5dd2d02e5d062fe1c942e42fcd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66972191ee05c5dd2d02e5d062fe1c942e42fcd7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bf2d0849a360376182b796042fedaa018b87d605", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf2d0849a360376182b796042fedaa018b87d605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf2d0849a360376182b796042fedaa018b87d605"}], "stats": {"total": 135, "additions": 81, "deletions": 54}, "files": [{"sha": "9ed8f5f829507c019d6b1e75850e767ab3460b51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66972191ee05c5dd2d02e5d062fe1c942e42fcd7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66972191ee05c5dd2d02e5d062fe1c942e42fcd7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66972191ee05c5dd2d02e5d062fe1c942e42fcd7", "patch": "@@ -1,5 +1,13 @@\n 2016-12-06  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/71537\n+\t* fold-const-call.c (fold_const_call_1): Remove memchr handling here.\n+\t(fold_const_call) <case CFN_BUILT_IN_STRNCMP,\n+\tcase CFN_BUILT_IN_STRNCASECMP>: Formatting improvements.\n+\t(fold_const_call) <case CFN_BUILT_IN_MEMCMP>: Likewise.  If s2 is 0\n+\tand arguments have no side-effects, return 0.\n+\t(fold_const_call): Handle CFN_BUILT_IN_MEMCHR.\n+\n \tPR c++/71537\n \t* fold-const-call.c (fold_const_call): Handle\n \tCFN_BUILT_IN_{INDEX,STRCHR,RINDEX,STRRCHR}."}, {"sha": "c85fb41c09cb8c1ae3cf1646e4b3ae198fd45e69", "filename": "gcc/fold-const-call.c", "status": "modified", "additions": 46, "deletions": 54, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66972191ee05c5dd2d02e5d062fe1c942e42fcd7/gcc%2Ffold-const-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66972191ee05c5dd2d02e5d062fe1c942e42fcd7/gcc%2Ffold-const-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const-call.c?ref=66972191ee05c5dd2d02e5d062fe1c942e42fcd7", "patch": "@@ -1491,36 +1491,6 @@ fold_const_call_1 (combined_fn fn, tree type, tree arg0, tree arg1, tree arg2)\n       return NULL_TREE;\n     }\n \n-  switch (fn)\n-    {\n-    case CFN_BUILT_IN_MEMCHR:\n-      {\n-\tchar c;\n-\tif (integer_zerop (arg2)\n-\t    && !TREE_SIDE_EFFECTS (arg0)\n-\t    && !TREE_SIDE_EFFECTS (arg1))\n-\t  return build_int_cst (type, 0);\n-\n-\tif (!tree_fits_uhwi_p (arg2) || !target_char_cst_p (arg1, &c))\n-\t  return NULL_TREE;\n-\n-\tunsigned HOST_WIDE_INT length = tree_to_uhwi (arg2);\n-\tunsigned HOST_WIDE_INT string_length;\n-\tconst char *p1 = c_getstr (arg0, &string_length);\n-\tif (p1)\n-\t  {\n-\t    const char *r\n-\t      = (const char *)memchr (p1, c, MIN (length, string_length));\n-\t    if (r == NULL && length <= string_length)\n-\t      return build_int_cst (type, 0);\n-\t  }\n-\n-\tbreak;\n-      }\n-    default:\n-      break;\n-    }\n-\n   return NULL_TREE;\n }\n \n@@ -1531,47 +1501,69 @@ tree\n fold_const_call (combined_fn fn, tree type, tree arg0, tree arg1, tree arg2)\n {\n   const char *p0, *p1;\n+  char c;\n   unsigned HOST_WIDE_INT s0, s1;\n   size_t s2 = 0;\n   switch (fn)\n     {\n     case CFN_BUILT_IN_STRNCMP:\n-      {\n-\tbool const_size_p = host_size_t_cst_p (arg2, &s2);\n-\tif (const_size_p && s2 == 0\n-\t    && !TREE_SIDE_EFFECTS (arg0)\n-\t    && !TREE_SIDE_EFFECTS (arg1))\n-\t  return build_int_cst (type, 0);\n-\telse if (const_size_p\n-\t\t && (p0 = c_getstr (arg0))\n-\t\t && (p1 = c_getstr (arg1)))\n-\t  return build_int_cst (type, strncmp (p0, p1, s2));\n+      if (!host_size_t_cst_p (arg2, &s2))\n \treturn NULL_TREE;\n-      }\n+      if (s2 == 0\n+\t  && !TREE_SIDE_EFFECTS (arg0)\n+\t  && !TREE_SIDE_EFFECTS (arg1))\n+\treturn build_int_cst (type, 0);\n+      else if ((p0 = c_getstr (arg0)) && (p1 = c_getstr (arg1)))\n+\treturn build_int_cst (type, strncmp (p0, p1, s2));\n+      return NULL_TREE;\n+\n     case CFN_BUILT_IN_STRNCASECMP:\n-      {\n-\tbool const_size_p = host_size_t_cst_p (arg2, &s2);\n-\tif (const_size_p && s2 == 0\n-\t    && !TREE_SIDE_EFFECTS (arg0)\n-\t    && !TREE_SIDE_EFFECTS (arg1))\n-\t  return build_int_cst (type, 0);\n-\telse if (const_size_p\n-\t\t && (p0 = c_getstr (arg0))\n-\t\t && (p1 = c_getstr (arg1))\n-\t\t && strncmp (p0, p1, s2) == 0)\n-\t  return build_int_cst (type, 0);\n+      if (!host_size_t_cst_p (arg2, &s2))\n \treturn NULL_TREE;\n-      }\n+      if (s2 == 0\n+\t  && !TREE_SIDE_EFFECTS (arg0)\n+\t  && !TREE_SIDE_EFFECTS (arg1))\n+\treturn build_int_cst (type, 0);\n+      else if ((p0 = c_getstr (arg0))\n+\t       && (p1 = c_getstr (arg1))\n+\t       && strncmp (p0, p1, s2) == 0)\n+\treturn build_int_cst (type, 0);\n+      return NULL_TREE;\n+\n     case CFN_BUILT_IN_BCMP:\n     case CFN_BUILT_IN_MEMCMP:\n+      if (!host_size_t_cst_p (arg2, &s2))\n+\treturn NULL_TREE;\n+      if (s2 == 0\n+\t  && !TREE_SIDE_EFFECTS (arg0)\n+\t  && !TREE_SIDE_EFFECTS (arg1))\n+\treturn build_int_cst (type, 0);\n       if ((p0 = c_getstr (arg0, &s0))\n \t  && (p1 = c_getstr (arg1, &s1))\n-\t  && host_size_t_cst_p (arg2, &s2)\n \t  && s2 <= s0\n \t  && s2 <= s1)\n \treturn build_cmp_result (type, memcmp (p0, p1, s2));\n       return NULL_TREE;\n \n+    case CFN_BUILT_IN_MEMCHR:\n+      if (!host_size_t_cst_p (arg2, &s2))\n+\treturn NULL_TREE;\n+      if (s2 == 0\n+\t  && !TREE_SIDE_EFFECTS (arg0)\n+\t  && !TREE_SIDE_EFFECTS (arg1))\n+\treturn build_int_cst (type, 0);\n+      if ((p0 = c_getstr (arg0, &s0))\n+\t  && s2 <= s0\n+\t  && target_char_cst_p (arg1, &c))\n+\t{\n+\t  const char *r = (const char *) memchr (p0, c, s2);\n+\t  if (r == NULL)\n+\t    return build_int_cst (type, 0);\n+\t  return fold_convert (type,\n+\t\t\t       fold_build_pointer_plus_hwi (arg0, r - p0));\n+\t}\n+      return NULL_TREE;\n+\n     default:\n       return fold_const_call_1 (fn, type, arg0, arg1, arg2);\n     }"}, {"sha": "b44993b956b927360a25a1651d29b809439ad2ab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66972191ee05c5dd2d02e5d062fe1c942e42fcd7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66972191ee05c5dd2d02e5d062fe1c942e42fcd7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=66972191ee05c5dd2d02e5d062fe1c942e42fcd7", "patch": "@@ -1,5 +1,8 @@\n 2016-12-06  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/71537\n+\t* g++.dg/cpp0x/constexpr-memchr.C: New test.\n+\n \tPR c++/71537\n \t* g++.dg/cpp0x/constexpr-strchr.C: New test.\n "}, {"sha": "e5c07f177ea7c40226f75dce2fd4823669d749a7", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-memchr.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66972191ee05c5dd2d02e5d062fe1c942e42fcd7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-memchr.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66972191ee05c5dd2d02e5d062fe1c942e42fcd7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-memchr.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-memchr.C?ref=66972191ee05c5dd2d02e5d062fe1c942e42fcd7", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do compile { target c++11 } }\n+\n+typedef decltype (sizeof (0)) size_t;\n+constexpr const void *f1 (const char *p, int q) { return __builtin_memchr (p, q, __builtin_strlen (p) + 1); }\n+constexpr const void *f2 (const char *p, int q, size_t r) { return __builtin_memchr (p, q, r); }\n+constexpr const char a[] = \"abcdefedcba\";\n+static_assert (f1 (\"abcde\", 'f') == nullptr, \"\");\n+static_assert (f1 (a, 'g') == nullptr, \"\");\n+static_assert (f1 (a, 'f') == a + 5, \"\");\n+static_assert (f1 (a, 'c') == a + 2, \"\");\n+static_assert (f1 (a, '\\0') == a + 11, \"\");\n+static_assert (f2 (\"abcde\", 'f', 6) == nullptr, \"\");\n+static_assert (f2 (\"abcde\", 'f', 1) == nullptr, \"\");\n+static_assert (f2 (\"abcde\", 'f', 0) == nullptr, \"\");\n+static_assert (f2 (a, 'g', 7) == nullptr, \"\");\n+static_assert (f2 (a, 'g', 0) == nullptr, \"\");\n+static_assert (f2 (a, 'f', 6) == a + 5, \"\");\n+static_assert (f2 (a, 'f', 5) == nullptr, \"\");\n+static_assert (f2 (a, 'c', 12) == a + 2, \"\");\n+static_assert (f2 (a, 'c', 3) == a + 2, \"\");\n+static_assert (f2 (a, 'c', 2) == nullptr, \"\");\n+static_assert (f2 (a, '\\0', 12) == a + 11, \"\");\n+static_assert (f2 (a, '\\0', 11) == nullptr, \"\");\n+static_assert (f2 (a, '\\0', 0) == nullptr, \"\");"}]}