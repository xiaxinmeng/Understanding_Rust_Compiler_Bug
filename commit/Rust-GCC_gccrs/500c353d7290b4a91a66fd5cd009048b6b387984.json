{"sha": "500c353d7290b4a91a66fd5cd009048b6b387984", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAwYzM1M2Q3MjkwYjRhOTFhNjZmZDVjZDAwOTA0OGI2YjM4Nzk4NA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2006-06-26T20:59:16Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2006-06-26T20:59:16Z"}, "message": "function.c (aggregate_value_p): Honor DECL_BY_REFERENCE on a CALL_EXPR target function declaration.\n\n\t* function.c (aggregate_value_p): Honor DECL_BY_REFERENCE on\n\ta CALL_EXPR target function declaration.\n\nFrom-SVN: r115022", "tree": {"sha": "fb88b99d9cc62c8621e0dd0659c248c3e923df15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb88b99d9cc62c8621e0dd0659c248c3e923df15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/500c353d7290b4a91a66fd5cd009048b6b387984", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/500c353d7290b4a91a66fd5cd009048b6b387984", "html_url": "https://github.com/Rust-GCC/gccrs/commit/500c353d7290b4a91a66fd5cd009048b6b387984", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/500c353d7290b4a91a66fd5cd009048b6b387984/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "28df01acc444605ff9f10a74609ee3709a36bcae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28df01acc444605ff9f10a74609ee3709a36bcae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28df01acc444605ff9f10a74609ee3709a36bcae"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "88384c05fdb007bbf47c5899c39fc3f2ff6aa0d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500c353d7290b4a91a66fd5cd009048b6b387984/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500c353d7290b4a91a66fd5cd009048b6b387984/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=500c353d7290b4a91a66fd5cd009048b6b387984", "patch": "@@ -1,3 +1,8 @@\n+2006-06-26  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* function.c (aggregate_value_p): Honor DECL_BY_REFERENCE on\n+\ta CALL_EXPR target function declaration.\n+\n 2006-06-26  Richard Guenther  <rguenther@suse.de>\n \n \t* tree.c (build_string): Do not waste tail padding in"}, {"sha": "177b6184ed7d61ad2275404bf82a7f0d332e0265", "filename": "gcc/function.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500c353d7290b4a91a66fd5cd009048b6b387984/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500c353d7290b4a91a66fd5cd009048b6b387984/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=500c353d7290b4a91a66fd5cd009048b6b387984", "patch": "@@ -1749,15 +1749,21 @@ aggregate_value_p (tree exp, tree fntype)\n \n   tree type = (TYPE_P (exp)) ? exp : TREE_TYPE (exp);\n \n+  /* DECL node associated with FNTYPE when relevant, which we might need to\n+     check for by-invisible-reference returns, typically for CALL_EXPR input\n+     EXPressions.  */\n+  tree fndecl = NULL_TREE;\n+  \n   if (fntype)\n     switch (TREE_CODE (fntype))\n       {\n       case CALL_EXPR:\n-\tfntype = get_callee_fndecl (fntype);\n-\tfntype = fntype ? TREE_TYPE (fntype) : 0;\n+\tfndecl = get_callee_fndecl (fntype);\n+\tfntype = fndecl ? TREE_TYPE (fndecl) : 0;\n \tbreak;\n       case FUNCTION_DECL:\n-\tfntype = TREE_TYPE (fntype);\n+\tfndecl = fntype;\n+\tfntype = TREE_TYPE (fndecl);\n \tbreak;\n       case FUNCTION_TYPE:\n       case METHOD_TYPE:\n@@ -1772,11 +1778,23 @@ aggregate_value_p (tree exp, tree fntype)\n \n   if (TREE_CODE (type) == VOID_TYPE)\n     return 0;\n+\n   /* If the front end has decided that this needs to be passed by\n      reference, do so.  */\n   if ((TREE_CODE (exp) == PARM_DECL || TREE_CODE (exp) == RESULT_DECL)\n       && DECL_BY_REFERENCE (exp))\n     return 1;\n+\n+  /* If the EXPression is a CALL_EXPR, honor DECL_BY_REFERENCE set on the\n+     called function RESULT_DECL, meaning the function returns in memory by\n+     invisible reference.  This check lets front-ends not set TREE_ADDRESSABLE\n+     on the function type, which used to be the way to request such a return\n+     mechanism but might now be causing troubles at gimplification time if\n+     temporaries with the function type need to be created.  */\n+  if (TREE_CODE (exp) == CALL_EXPR && fndecl && DECL_RESULT (fndecl)\n+      && DECL_BY_REFERENCE (DECL_RESULT (fndecl)))\n+    return 1;\n+      \n   if (targetm.calls.return_in_memory (type, fntype))\n     return 1;\n   /* Types that are TREE_ADDRESSABLE must be constructed in memory,"}]}