{"sha": "767537a8b027bcb5807bb45b0268c5da98c2c7a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY3NTM3YThiMDI3YmNiNTgwN2JiNDViMDI2OGM1ZGE5OGMyYzdhMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-16T15:54:50Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-16T19:25:09Z"}, "message": "libstdc++: Warn if __STRICT_ANSI has been undefined\n\nRecent changes to use __int128 as an integer-like type in <ranges> and\nto optimize std::uniform_int_distribution mean that the library relies\non __int128 more heavily than in the past.\n\nThe library expects that if __int128 is supported then either\n__GLIBCXX_TYPE_INT_N_0 is defined (and we treat is like the standard\ninteger types), or __STRICT_ANSI__ is defined (and we need to add\nspecial handling for __int128 as a non-standard integer type).\n\nIf users compile with -std=c++NN -U__STRICT_ANSI__ then it puts the\nlibrary into a broken and inconsistent state, where the compiler doesn't\ndefine the __GLIBCXX_TYPE_INT_N_0 macro, but the library thinks it\ndoesn't need special handling for __int128. What the user should do is\ncompile with -std=gnu++NN instead.\n\nThis adds a warning if it appears that __int128 is supported but neither\n__GLIBCXX_TYPE_INT_N_0 nor __STRICT_ANSI__ is defined.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/c++config: Warn if __STRICT_ANSI__ state is\n\tinconsistent with __GLIBCXX_TYPE_INT_N_0.", "tree": {"sha": "6b0ef58634ac26c6e2575c1f60427f56248ffea9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b0ef58634ac26c6e2575c1f60427f56248ffea9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/767537a8b027bcb5807bb45b0268c5da98c2c7a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/767537a8b027bcb5807bb45b0268c5da98c2c7a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/767537a8b027bcb5807bb45b0268c5da98c2c7a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/767537a8b027bcb5807bb45b0268c5da98c2c7a0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e128aaa6e5d792425afffdeac421f5076c15b9f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e128aaa6e5d792425afffdeac421f5076c15b9f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e128aaa6e5d792425afffdeac421f5076c15b9f0"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "cd7678eb16d48260abfb74e60c5bfc59ecab0b4f", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767537a8b027bcb5807bb45b0268c5da98c2c7a0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767537a8b027bcb5807bb45b0268c5da98c2c7a0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=767537a8b027bcb5807bb45b0268c5da98c2c7a0", "patch": "@@ -524,6 +524,15 @@ namespace std\n \n #define _GLIBCXX_USE_ALLOCATOR_NEW\n \n+#ifdef __SIZEOF_INT128__\n+#if ! defined __GLIBCXX_TYPE_INT_N_0 && ! defined __STRICT_ANSI__\n+// If __int128 is supported, we expect __GLIBCXX_TYPE_INT_N_0 to be defined\n+// unless the compiler is in strict mode. If it's not defined and the strict\n+// macro is not defined, something is wrong.\n+#warning \"__STRICT_ANSI__ seems to have been undefined; this is not supported\"\n+#endif\n+#endif\n+\n #else // !__cplusplus\n # define _GLIBCXX_BEGIN_EXTERN_C\n # define _GLIBCXX_END_EXTERN_C"}]}