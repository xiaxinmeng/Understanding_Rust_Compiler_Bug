{"sha": "da28539cd66190f9e434f80597160e27a598716a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGEyODUzOWNkNjYxOTBmOWU0MzRmODA1OTcxNjBlMjdhNTk4NzE2YQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-09-22T18:37:51Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-09-22T18:37:51Z"}, "message": "std_limits.h (__glibcpp_integral_traps): New.\n\n        * include/std/std_limits.h (__glibcpp_integral_traps): New.\n        (__glibcpp_char_traps, __glibcpp_short_traps, __glibcpp_int_traps,\n        __glibcpp_long_traps, __glibcpp_wchar_t_traps,\n        __glibcpp_long_long_traps, __glibcpp_plain_char_traps,\n        __glibcpp_signed_char_traps, __glibcpp_unsigned_char_traps,\n        __glibcpp_signed_short_traps, __glibcpp_unsigned_short_traps,\n        __glibcpp_signed_int_traps, __glibcpp_unsigned_int_traps,\n        __glibcpp_signed_long_traps, __glibcpp_unsigned_long_traps,\n        __glibcpp_signed_long_long_traps, __glibcpp_unsigned_long_long_traps,\n        __glibcpp_char_is_modulo, __glibcpp_signed_char_is_modulo,\n        __glibcpp_signed_short_is_modulo, __glibcpp_signed_int_is_modulo,\n        __glibcpp_signed_long_is_modulo, __glibcpp_signed_long_long_is_modulo,\n        __glibcpp_wchar_t_is_modulo, __glibcpp_float_is_bounded,\n        __glibcpp_double_is_bounded, __glibcpp_long_double_is_bounded): Kill.\n        (numeric_limits<T>::traps, T integral): Use __glibcpp_integral_traps.\n        (numeric_limits<T>::is_modulo, T integral): Use true.\n        (numeric_limits<T>::is_bounded, T floating): Use true.\n\nFrom-SVN: r57414", "tree": {"sha": "c1fb7c929711df27713c50e044bde3aa77c6707a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1fb7c929711df27713c50e044bde3aa77c6707a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da28539cd66190f9e434f80597160e27a598716a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da28539cd66190f9e434f80597160e27a598716a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da28539cd66190f9e434f80597160e27a598716a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da28539cd66190f9e434f80597160e27a598716a/comments", "author": null, "committer": null, "parents": [{"sha": "cf2214db0c1ff761ecc292c9224349ccd0894143", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf2214db0c1ff761ecc292c9224349ccd0894143", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf2214db0c1ff761ecc292c9224349ccd0894143"}], "stats": {"total": 158, "additions": 47, "deletions": 111}, "files": [{"sha": "7a5741bec99c5caf8c50ce99bcd049f22afbe4ed", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da28539cd66190f9e434f80597160e27a598716a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da28539cd66190f9e434f80597160e27a598716a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=da28539cd66190f9e434f80597160e27a598716a", "patch": "@@ -19,6 +19,24 @@\n \t(numeric_limits<float>::is_iec559): Use has_infinity & has_quiet_NaN.\n \t(numeric_limits<double>, numeric_limits<long double>): Similarly.\n \n+\t* include/std/std_limits.h (__glibcpp_integral_traps): New.\n+\t(__glibcpp_char_traps, __glibcpp_short_traps, __glibcpp_int_traps,\n+\t__glibcpp_long_traps, __glibcpp_wchar_t_traps,\n+\t__glibcpp_long_long_traps, __glibcpp_plain_char_traps,\n+\t__glibcpp_signed_char_traps, __glibcpp_unsigned_char_traps,\n+\t__glibcpp_signed_short_traps, __glibcpp_unsigned_short_traps,\n+\t__glibcpp_signed_int_traps, __glibcpp_unsigned_int_traps,\n+\t__glibcpp_signed_long_traps, __glibcpp_unsigned_long_traps,\n+\t__glibcpp_signed_long_long_traps, __glibcpp_unsigned_long_long_traps,\n+\t__glibcpp_char_is_modulo, __glibcpp_signed_char_is_modulo,\n+\t__glibcpp_signed_short_is_modulo, __glibcpp_signed_int_is_modulo,\n+\t__glibcpp_signed_long_is_modulo, __glibcpp_signed_long_long_is_modulo,\n+\t__glibcpp_wchar_t_is_modulo, __glibcpp_float_is_bounded,\n+\t__glibcpp_double_is_bounded, __glibcpp_long_double_is_bounded): Kill.\n+\t(numeric_limits<T>::traps, T integral): Use __glibcpp_integral_traps.\n+\t(numeric_limits<T>::is_modulo, T integral): Use true.\n+\t(numeric_limits<T>::is_bounded, T floating): Use true.\n+\n 2002-09-18  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* testsuite/18_support/numeric_limits.cc (test_epsilon): New."}, {"sha": "00d01b7153e6bebe54be0ee91840e1d55276b443", "filename": "libstdc++-v3/include/std/std_limits.h", "status": "modified", "additions": 29, "deletions": 111, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da28539cd66190f9e434f80597160e27a598716a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da28539cd66190f9e434f80597160e27a598716a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h?ref=da28539cd66190f9e434f80597160e27a598716a", "patch": "@@ -92,23 +92,11 @@\n // These values can be overridden in the target configuration file.\n // The default values are appropriate for many 32-bit targets.\n \n-#ifndef __glibcpp_char_traps\n-#  define __glibcpp_char_traps true\n-#endif\n-#ifndef __glibcpp_short_traps\n-#  define __glibcpp_short_traps true\n-#endif\n-#ifndef __glibcpp_int_traps\n-#  define __glibcpp_int_traps true\n-#endif\n-#ifndef __glibcpp_long_traps\n-#  define __glibcpp_long_traps true\n-#endif\n-#ifndef __glibcpp_wchar_t_traps\n-#  define __glibcpp_wchar_t_traps true\n-#endif\n-#ifndef __glibcpp_long_long_traps\n-#  define __glibcpp_long_long_traps true\n+// GCC only intrinsicly supports modulo integral types.  The only remaining\n+// integral exceptional values is division by zero.  Only targets that do not\n+// signal division by zero in some \"hard to ignore\" way should use false.\n+#ifndef __glibcpp_integral_traps\n+# define __glibcpp_integral_traps true\n #endif\n \n // You should not need to define any macros below this point, unless\n@@ -151,23 +139,14 @@\n #define __glibcpp_u64_digits10 19\n \n // bool-specific hooks:\n-//     __glibcpp_bool_digits  __glibcpp_int_traps __glibcpp_long_traps\n+//     __glibcpp_bool_digits\n \n #ifndef __glibcpp_bool_digits\n #  define __glibcpp_bool_digits 1\n #endif\n \n // char.\n \n-#define __glibcpp_plain_char_traps true\n-#define __glibcpp_signed_char_traps true\n-#define __glibcpp_unsigned_char_traps true\n-#ifndef __glibcpp_char_is_modulo\n-#  define __glibcpp_char_is_modulo true\n-#endif\n-#ifndef __glibcpp_signed_char_is_modulo\n-#  define __glibcpp_signed_char_is_modulo true\n-#endif\n #if __CHAR_BIT__ == 8\n #  define __glibcpp_signed_char_min __glibcpp_s8_min\n #  define __glibcpp_signed_char_max __glibcpp_s8_max\n@@ -222,11 +201,6 @@\n \n // short\n \n-#define __glibcpp_signed_short_traps true\n-#define __glibcpp_unsigned_short_traps true\n-#ifndef __glibcpp_signed_short_is_modulo\n-#  define __glibcpp_signed_short_is_modulo true\n-#endif\n #if __SHRT_BIT__ == 8\n #  define __glibcpp_signed_short_min __glibcpp_s8_min\n #  define __glibcpp_signed_short_max __glibcpp_s8_max\n@@ -269,11 +243,6 @@\n \n // int\n \n-#define __glibcpp_signed_int_traps true\n-#define __glibcpp_unsigned_int_traps true\n-#ifndef __glibcpp_signed_int_is_modulo\n-#  define __glibcpp_signed_int_is_modulo true\n-#endif\n #if __INT_BIT__ == 8\n #  define __glibcpp_signed_int_min __glibcpp_s8_min\n #  define __glibcpp_signed_int_max __glibcpp_s8_max\n@@ -316,11 +285,6 @@\n \n // long\n \n-#define __glibcpp_signed_long_traps true\n-#define __glibcpp_unsigned_long_traps true\n-#ifndef __glibcpp_signed_long_is_modulo\n-#  define __glibcpp_signed_long_is_modulo true\n-#endif\n #if __LONG_BIT__ == 8\n #  define __glibcpp_signed_long_min __glibcpp_s8_min\n #  define __glibcpp_signed_long_max __glibcpp_s8_max\n@@ -363,11 +327,6 @@\n \n // long long\n \n-#define __glibcpp_signed_long_long_traps true\n-#define __glibcpp_signed_long_long_traps true\n-#ifndef __glibcpp_signed_long_long_is_modulo\n-#  define __glibcpp_signed_long_long_is_modulo true\n-#endif\n #if __LONG_LONG_BIT__ == 8\n #  define __glibcpp_signed_long_long_min __glibcpp_s8_min\n #  define __glibcpp_signed_long_long_max __glibcpp_s8_max\n@@ -400,22 +359,16 @@\n #  define __glibcpp_signed_long_long_max __glibcpp_s64_max\n #  define __glibcpp_signed_long_long_digits __glibcpp_s64_digits\n #  define __glibcpp_signed_long_long_digits10 __glibcpp_s64_digits10\n-#  define __glibcpp_signed_long_long_traps true\n #  define __glibcpp_unsigned_long_long_min __glibcpp_u64_min\n #  define __glibcpp_unsigned_long_long_max __glibcpp_u64_max\n #  define __glibcpp_unsigned_long_long_digits __glibcpp_u64_digits\n #  define __glibcpp_unsigned_long_long_digits10 __glibcpp_u64_digits10\n-#  define __glibcpp_unsigned_long_long_traps true\n #else\n // You must define these macros in the configuration file.\n #endif\n \n // wchar_t\n \n-#define __glibcpp_wchar_t_traps true\n-#ifndef __glibcpp_wchar_t_is_modulo\n-#  define __glibcpp_wchar_t_is_modulo true\n-#endif\n #if __glibcpp_wchar_t_is_signed\n #  if __WCHAR_BIT__ == 8\n #    define __glibcpp_wchar_t_min __glibcpp_s8_min\n@@ -475,10 +428,6 @@\n #  define __glibcpp_float_has_denorm_loss false\n #endif\n \n-#ifndef __glibcpp_float_is_bounded\n-#  define __glibcpp_float_is_bounded true\n-#endif\n-\n #ifndef __glibcpp_float_is_modulo\n #  define __glibcpp_float_is_modulo false\n #endif\n@@ -499,10 +448,6 @@\n #  define __glibcpp_double_has_denorm_loss false\n #endif\n \n-#ifndef __glibcpp_double_is_bounded\n-#  define __glibcpp_double_is_bounded true\n-#endif\n-\n #ifndef __glibcpp_double_is_modulo\n #  define __glibcpp_double_is_modulo false\n #endif\n@@ -523,10 +468,6 @@\n #  define __glibcpp_long_double_has_denorm_loss false\n #endif\n \n-#ifndef __glibcpp_long_double_is_bounded\n-#  define __glibcpp_long_double_is_bounded true\n-#endif\n-\n #ifndef __glibcpp_long_double_is_modulo\n #  define __glibcpp_long_double_is_modulo false\n #endif\n@@ -698,8 +639,7 @@ namespace std\n       // It is not clear what it means for a boolean type to trap.\n       // This is a DR on the LWG issue list.  Here, I use integer\n       // promotion semantics.\n-      static const bool traps = __glibcpp_signed_int_traps\n-               || __glibcpp_signed_long_traps;\n+      static const bool traps = __glibcpp_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n@@ -749,9 +689,9 @@ namespace std\n \n       static const bool is_iec559 = false;\n       static const bool is_bounded = true;\n-      static const bool is_modulo = __glibcpp_char_is_modulo;\n+      static const bool is_modulo = true;\n \n-      static const bool traps = __glibcpp_char_traps;\n+      static const bool traps = __glibcpp_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n@@ -761,8 +701,6 @@ namespace std\n #undef __glibcpp_char_digits\n #undef __glibcpp_char_digits10\n #undef __glibcpp_char_is_signed\n-#undef __glibcpp_char_is_modulo\n-#undef __glibcpp_char_traps\n \n \n \n@@ -809,9 +747,9 @@ namespace std\n \n       static const bool is_iec559 = false;\n       static const bool is_bounded = true;\n-      static const bool is_modulo = __glibcpp_signed_char_is_modulo;\n+      static const bool is_modulo = true;\n \n-      static const bool traps = __glibcpp_signed_char_traps;\n+      static const bool traps = __glibcpp_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n@@ -820,8 +758,6 @@ namespace std\n #undef __glibcpp_signed_char_max\n #undef __glibcpp_signed_char_digits\n #undef __glibcpp_signed_char_digits10\n-#undef __glibcpp_signed_char_is_modulo  \n-#undef __glibcpp_signed_char_traps  \n \n   template<>\n     struct numeric_limits<unsigned char>\n@@ -868,15 +804,14 @@ namespace std\n       static const bool is_bounded = true;\n       static const bool is_modulo = true;\n \n-      static const bool traps = __glibcpp_unsigned_char_traps;\n+      static const bool traps = __glibcpp_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n \n #undef __glibcpp_unsigned_char_max\n #undef __glibcpp_unsigned_char_digits\n #undef __glibcpp_unsigned_char_digits10\n-#undef __glibcpp_unsigned_char_traps  \n \n   template<>\n     struct numeric_limits<wchar_t>\n@@ -921,9 +856,9 @@ namespace std\n \n       static const bool is_iec559 = false;\n       static const bool is_bounded = true;\n-      static const bool is_modulo = __glibcpp_wchar_t_is_modulo;\n+      static const bool is_modulo = true;\n \n-      static const bool traps = __glibcpp_wchar_t_traps;\n+      static const bool traps = __glibcpp_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n@@ -933,8 +868,6 @@ namespace std\n #undef __glibcpp_wchar_t_digits\n #undef __glibcpp_wchar_t_digits10  \n #undef __glibcpp_wchar_t_is_signed\n-#undef __glibcpp_wchar_t_is_modulo\n-#undef __glibcpp_wchar_t_traps  \n   \n   template<>\n     struct numeric_limits<short>\n@@ -979,9 +912,9 @@ namespace std\n \n       static const bool is_iec559 = true;\n       static const bool is_bounded = true;\n-      static const bool is_modulo = __glibcpp_signed_short_is_modulo;\n+      static const bool is_modulo = true;\n \n-      static const bool traps = __glibcpp_signed_short_traps;\n+      static const bool traps = __glibcpp_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n@@ -990,8 +923,6 @@ namespace std\n #undef __glibcpp_signed_short_max\n #undef __glibcpp_signed_short_digits\n #undef __glibcpp_signed_short_digits10\n-#undef __glibcpp_signed_short_is_modulo\n-#undef __glibcpp_signed_short_traps  \n   \n   template<>\n     struct numeric_limits<unsigned short>\n@@ -1038,15 +969,14 @@ namespace std\n       static const bool is_bounded = true;\n       static const bool is_modulo = true;\n \n-      static const bool traps = __glibcpp_unsigned_short_traps;\n+      static const bool traps = __glibcpp_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n \n #undef __glibcpp_unsigned_short_max\n #undef __glibcpp_unsigned_short_digits\n #undef __glibcpp_unsigned_short_digits10\n-#undef __glibcpp_unsigned_short_traps  \n   \n   template<>\n     struct numeric_limits<int>\n@@ -1091,9 +1021,9 @@ namespace std\n \n       static const bool is_iec559 = true;\n       static const bool is_bounded = true;\n-      static const bool is_modulo = __glibcpp_signed_int_is_modulo;\n+      static const bool is_modulo = true;\n \n-      static const bool traps = __glibcpp_signed_int_traps;\n+      static const bool traps = __glibcpp_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n@@ -1102,8 +1032,6 @@ namespace std\n #undef __glibcpp_signed_int_max\n #undef __glibcpp_signed_int_digits\n #undef __glibcpp_signed_int_digits10\n-#undef __glibcpp_signed_int_is_modulo\n-#undef __glibcpp_signed_int_traps  \n   \n   template<>\n     struct numeric_limits<unsigned int>\n@@ -1150,15 +1078,14 @@ namespace std\n       static const bool is_bounded = true;\n       static const bool is_modulo = true;\n \n-      static const bool traps = __glibcpp_unsigned_int_traps;\n+      static const bool traps = __glibcpp_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n \n #undef __glibcpp_unsigned_int_max\n #undef __glibcpp_unsigned_int_digits\n #undef __glibcpp_unsigned_int_digits10\n-#undef __glibcpp_unsigned_int_traps  \n \n   template<>\n     struct numeric_limits<long>\n@@ -1203,9 +1130,9 @@ namespace std\n \n       static const bool is_iec559 = true;\n       static const bool is_bounded = true;\n-      static const bool is_modulo = __glibcpp_signed_long_is_modulo;\n+      static const bool is_modulo = true;\n \n-      static const bool traps = __glibcpp_signed_long_traps;\n+      static const bool traps = __glibcpp_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n@@ -1214,8 +1141,6 @@ namespace std\n #undef __glibcpp_signed_long_max\n #undef __glibcpp_signed_long_digits\n #undef __glibcpp_signed_long_digits10\n-#undef __glibcpp_signed_long_is_modulo\n-#undef __glibcpp_signed_long_traps  \n   \n   template<>\n     struct numeric_limits<unsigned long>\n@@ -1262,15 +1187,14 @@ namespace std\n       static const bool is_bounded = true;\n       static const bool is_modulo = true;\n \n-      static const bool traps = __glibcpp_unsigned_long_traps;\n+      static const bool traps = __glibcpp_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n \n #undef __glibcpp_unsigned_long_max\n #undef __glibcpp_unsigned_long_digits\n #undef __glibcpp_unsigned_long_digits10\n-#undef __glibcpp_unsigned_long_traps  \n \n   template<>\n     struct numeric_limits<long long>\n@@ -1315,9 +1239,9 @@ namespace std\n       \n       static const bool is_iec559 = true;\n       static const bool is_bounded = true;\n-      static const bool is_modulo = __glibcpp_signed_long_long_is_modulo;\n+      static const bool is_modulo = true;\n \n-      static const bool traps = __glibcpp_signed_long_long_traps;\n+      static const bool traps = __glibcpp_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n@@ -1326,8 +1250,6 @@ namespace std\n #undef __glibcpp_signed_long_long_max\n #undef __glibcpp_signed_long_long_digits\n #undef __glibcpp_signed_long_long_digits10\n-#undef __glibcpp_signed_long_long_is_modulo\n-#undef __glibcpp_signed_long_long_traps  \n   \n   template<>\n     struct numeric_limits<unsigned long long>\n@@ -1374,15 +1296,14 @@ namespace std\n       static const bool is_bounded = true;\n       static const bool is_modulo = true;\n \n-      static const bool traps = true;\n+      static const bool traps = __glibcpp_integral_traps;\n       static const bool tinyness_before = false;\n       static const float_round_style round_style = round_toward_zero;\n     };\n \n #undef __glibcpp_unsigned_long_long_max\n #undef __glibcpp_unsigned_long_long_digits\n #undef __glibcpp_unsigned_long_long_digits10\n-#undef __glibcpp_unsigned_long_long_traps  \n \n   template<>\n     struct numeric_limits<float>\n@@ -1429,7 +1350,7 @@ namespace std\n       { return __FLT_DENORM_MIN__; }\n \n       static const bool is_iec559 = has_infinity && has_quiet_NaN;\n-      static const bool is_bounded = __glibcpp_float_is_bounded;\n+      static const bool is_bounded = true;\n       static const bool is_modulo = __glibcpp_float_is_modulo;\n \n       static const bool traps = __glibcpp_float_traps;\n@@ -1438,7 +1359,6 @@ namespace std\n     };\n \n #undef __glibcpp_float_has_denorm_loss\n-#undef __glibcpp_float_is_bounded\n #undef __glibcpp_float_is_modulo\n #undef __glibcpp_float_traps\n #undef __glibcpp_float_tinyness_before\n@@ -1488,7 +1408,7 @@ namespace std\n       { return __DBL_DENORM_MIN__; }\n \n       static const bool is_iec559 = has_infinity && has_quiet_NaN;\n-      static const bool is_bounded = __glibcpp_double_is_bounded;\n+      static const bool is_bounded = true;\n       static const bool is_modulo = __glibcpp_double_is_modulo;\n \n       static const bool traps = __glibcpp_double_traps;\n@@ -1497,7 +1417,6 @@ namespace std\n     };\n \n #undef __glibcpp_double_has_denorm_loss\n-#undef __glibcpp_double_is_bounded\n #undef __glibcpp_double_is_modulo\n #undef __glibcpp_double_traps\n #undef __glibcpp_double_tinyness_before\n@@ -1549,7 +1468,7 @@ namespace std\n       { return __LDBL_DENORM_MIN__; }\n \n       static const bool is_iec559 = has_infinity && has_quiet_NaN;\n-      static const bool is_bounded = __glibcpp_long_double_is_bounded;\n+      static const bool is_bounded = true;\n       static const bool is_modulo = __glibcpp_long_double_is_modulo;\n \n       static const bool traps = __glibcpp_long_double_traps; \n@@ -1558,7 +1477,6 @@ namespace std\n     };\n \n #undef __glibcpp_long_double_has_denorm_loss\n-#undef __glibcpp_long_double_is_bounded\n #undef __glibcpp_long_double_is_modulo\n #undef __glibcpp_long_double_traps\n #undef __glibcpp_long_double_tinyness_before"}]}