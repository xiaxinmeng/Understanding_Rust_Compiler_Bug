{"sha": "57f2ce6a87802906826501b8843013ff2b50713b", "node_id": "C_kwDOANBUbNoAKDU3ZjJjZTZhODc4MDI5MDY4MjY1MDFiODg0MzAxM2ZmMmI1MDcxM2I", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-21T00:16:32Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-21T00:16:32Z"}, "message": "Daily bump.", "tree": {"sha": "83bff2714e659e9fc2c0d88e846891adefb37ce2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83bff2714e659e9fc2c0d88e846891adefb37ce2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57f2ce6a87802906826501b8843013ff2b50713b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57f2ce6a87802906826501b8843013ff2b50713b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57f2ce6a87802906826501b8843013ff2b50713b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57f2ce6a87802906826501b8843013ff2b50713b/comments", "author": null, "committer": null, "parents": [{"sha": "d5cf2a1f15ef6b46881f600dabf70636f531de2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5cf2a1f15ef6b46881f600dabf70636f531de2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5cf2a1f15ef6b46881f600dabf70636f531de2e"}], "stats": {"total": 390, "additions": 389, "deletions": 1}, "files": [{"sha": "9e6cc4746798dcef44ba74e14eb4807094f9296b", "filename": "config/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f2ce6a87802906826501b8843013ff2b50713b/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f2ce6a87802906826501b8843013ff2b50713b/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=57f2ce6a87802906826501b8843013ff2b50713b", "patch": "@@ -1,3 +1,7 @@\n+2022-05-20  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* dfp.m4: Add aarch64 support.\n+\n 2022-05-03  Christophe Lyon  <christophe.lyon@arm.com>\n \n \t* dfp.m4: Add license header."}, {"sha": "b91d3934fe8be6b4d060f3c52818c2dd739a40f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f2ce6a87802906826501b8843013ff2b50713b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f2ce6a87802906826501b8843013ff2b50713b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57f2ce6a87802906826501b8843013ff2b50713b", "patch": "@@ -1,3 +1,118 @@\n+2022-05-20  Wilco Dijkstra  <wilco.dijkstra@arm.com>\n+\n+\t* config/aarch64/aarch64.md\n+\t(and_<SHIFT:optab><mode>3_compare0): Support rotate left.\n+\t(and_<SHIFT:optab>si3_compare0_uxtw): Likewise.\n+\t(<LOGICAL:optab>_<SHIFT:optab><mode>3): Likewise.\n+\t(<LOGICAL:optab>_<SHIFT:optab>si3_uxtw): Likewise.\n+\t(one_cmpl_<optab><mode>2): Likewise.\n+\t(<LOGICAL:optab>_one_cmpl_<SHIFT:optab><mode>3): Likewise.\n+\t(<LOGICAL:optab>_one_cmpl_<SHIFT:optab>sidi_uxtw): New pattern.\n+\t(eor_one_cmpl_<SHIFT:optab><mode>3_alt): Support rotate left.\n+\t(eor_one_cmpl_<SHIFT:optab>sidi3_alt_ze): Likewise.\n+\t(and_one_cmpl_<SHIFT:optab><mode>3_compare0): Likewise.\n+\t(and_one_cmpl_<SHIFT:optab>si3_compare0_uxtw): Likewise.\n+\t(and_one_cmpl_<SHIFT:optab><mode>3_compare0_no_reuse): Likewise.\n+\t(and_<SHIFT:optab><mode>3nr_compare0): Likewise.\n+\t(*<optab>si3_insn_uxtw): Use SHIFT_no_rotate.\n+\t(rolsi3_insn_uxtw): New pattern.\n+\t* config/aarch64/iterators.md (SHIFT): Add rotate left.\n+\t(SHIFT_no_rotate): Add new iterator.\n+\t(SHIFT:shift): Print rotate left as ror.\n+\t(is_rotl): Add test for left rotate.\n+\n+2022-05-20  Wilco Dijkstra  <wilco.dijkstra@arm.com>\n+\n+\t* config.gcc (aarch64*-*-*): Simplify --with-cpu and --with-arch\n+\tprocessing.  Add support for architectural extensions.\n+\t* config/aarch64/aarch64.h (TARGET_CPU_DEFAULT): Remove\n+\tAARCH64_CPU_DEFAULT_FLAGS.\n+\t(TARGET_CPU_NBITS): Remove.\n+\t(TARGET_CPU_MASK): Remove.\n+\t* config/aarch64/aarch64.cc (AARCH64_CPU_DEFAULT_FLAGS): Remove define.\n+\t(get_tune_cpu): Assert CPU is always valid.\n+\t(get_arch): Assert architecture is always valid.\n+\t(aarch64_override_options): Cleanup CPU selection code and simplify logic.\n+\t(aarch64_option_restore): Remove unnecessary checks on tune.\n+\n+2022-05-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/aarch64/aarch64-sve-builtins-base.cc: Replace uses of\n+\t\"FINAL\" and \"OVERRIDE\" with \"final\" and \"override\".\n+\t* config/aarch64/aarch64-sve-builtins-functions.h: Likewise.\n+\t* config/aarch64/aarch64-sve-builtins-shapes.cc: Likewise.\n+\t* config/aarch64/aarch64-sve-builtins-sve2.cc: Likewise.\n+\t* diagnostic-path.h: Likewise.\n+\t* digraph.cc: Likewise.\n+\t* gcc-rich-location.h: Likewise.\n+\t* gimple-array-bounds.cc: Likewise.\n+\t* gimple-loop-versioning.cc: Likewise.\n+\t* gimple-range-cache.cc: Likewise.\n+\t* gimple-range-cache.h: Likewise.\n+\t* gimple-range-fold.cc: Likewise.\n+\t* gimple-range-fold.h: Likewise.\n+\t* gimple-range-tests.cc: Likewise.\n+\t* gimple-range.h: Likewise.\n+\t* gimple-ssa-evrp.cc: Likewise.\n+\t* input.cc: Likewise.\n+\t* json.h: Likewise.\n+\t* read-rtl-function.cc: Likewise.\n+\t* tree-complex.cc: Likewise.\n+\t* tree-diagnostic-path.cc: Likewise.\n+\t* tree-ssa-ccp.cc: Likewise.\n+\t* tree-ssa-copy.cc: Likewise.\n+\t* tree-vrp.cc: Likewise.\n+\t* value-query.h: Likewise.\n+\t* vr-values.h: Likewise.\n+\n+2022-05-20  Marcel Vollweiler  <marcel@codesourcery.com>\n+\n+\t* omp-low.cc (omp_runtime_api_call): Added target_memcpy_async and\n+\ttarget_memcpy_rect_async to omp_runtime_apis array.\n+\n+2022-05-20  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* doc/sourcebuild.texi (Decimal floating point attributes): Document\n+\tdfp_bid effective-target.\n+\n+2022-05-20  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* config/aarch64/aarch64.cc\n+\t(aarch64_split_128bit_move): Handle DFP modes.\n+\t(aarch64_mode_valid_for_sched_fusion_p): Likewise.\n+\t(aarch64_classify_address): Likewise.\n+\t(aarch64_legitimize_address_displacement): Likewise.\n+\t(aarch64_reinterpret_float_as_int): Likewise.\n+\t(aarch64_float_const_zero_rtx_p): Likewise.\n+\t(aarch64_can_const_movi_rtx_p): Likewise.\n+\t(aarch64_anchor_offset): Likewise.\n+\t(aarch64_secondary_reload): Likewise.\n+\t(aarch64_rtx_costs): Likewise.\n+\t(aarch64_legitimate_constant_p): Likewise.\n+\t(aarch64_gimplify_va_arg_expr): Likewise.\n+\t(aapcs_vfp_sub_candidate): Likewise.\n+\t(aarch64_vfp_is_call_or_return_candidate): Likewise.\n+\t(aarch64_output_scalar_simd_mov_immediate): Likewise.\n+\t(aarch64_gen_adjusted_ldpstp): Likewise.\n+\t(aarch64_scalar_mode_supported_p): Accept DFP modes if enabled.\n+\t* config/aarch64/aarch64.md\n+\t(movsf_aarch64): Use SFD iterator and rename into\n+\tmov<mode>_aarch64.\n+\t(movdf_aarch64): Use DFD iterator and rename into\n+\tmov<mode>_aarch64.\n+\t(movtf_aarch64): Use TFD iterator and rename into\n+\tmov<mode>_aarch64.\n+\t(split pattern for move TF mode): Use TFD iterator.\n+\t* config/aarch64/iterators.md\n+\t(GPF_TF_F16_MOV): Add DFP modes.\n+\t(SFD, DFD, TFD): New iterators.\n+\t(GPF_TF): Add DFP modes.\n+\t(TX, DX, DX2): Likewise.\n+\n+2022-05-20  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* configure: Regenerate.\n+\n 2022-05-19  Roger Sayle  <roger@nextmovesoftware.com>\n \n \tPR middle-end/98865"}, {"sha": "3f0681bb0232a33f4c986eea89f5b1bc1274f543", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f2ce6a87802906826501b8843013ff2b50713b/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f2ce6a87802906826501b8843013ff2b50713b/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=57f2ce6a87802906826501b8843013ff2b50713b", "patch": "@@ -1 +1 @@\n-20220520\n+20220521"}, {"sha": "fa3c231d5cce50f50e30b1d3f8a8c417351da173", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f2ce6a87802906826501b8843013ff2b50713b/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f2ce6a87802906826501b8843013ff2b50713b/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=57f2ce6a87802906826501b8843013ff2b50713b", "patch": "@@ -1,3 +1,33 @@\n+2022-05-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer-pass.cc: Replace uses of \"FINAL\" and \"OVERRIDE\" with\n+\t\"final\" and \"override\".\n+\t* call-info.h: Likewise.\n+\t* checker-path.h: Likewise.\n+\t* constraint-manager.cc: Likewise.\n+\t* diagnostic-manager.cc: Likewise.\n+\t* engine.cc: Likewise.\n+\t* exploded-graph.h: Likewise.\n+\t* feasible-graph.h: Likewise.\n+\t* pending-diagnostic.h: Likewise.\n+\t* region-model-impl-calls.cc: Likewise.\n+\t* region-model.cc: Likewise.\n+\t* region-model.h: Likewise.\n+\t* region.h: Likewise.\n+\t* sm-file.cc: Likewise.\n+\t* sm-malloc.cc: Likewise.\n+\t* sm-pattern-test.cc: Likewise.\n+\t* sm-sensitive.cc: Likewise.\n+\t* sm-signal.cc: Likewise.\n+\t* sm-taint.cc: Likewise.\n+\t* state-purge.h: Likewise.\n+\t* store.cc: Likewise.\n+\t* store.h: Likewise.\n+\t* supergraph.h: Likewise.\n+\t* svalue.h: Likewise.\n+\t* trimmed-graph.h: Likewise.\n+\t* varargs.cc: Likewise.\n+\n 2022-05-16  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/105103"}, {"sha": "2f3071c48d9be5b7b9eab7b76ba9119cb8adcc30", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f2ce6a87802906826501b8843013ff2b50713b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f2ce6a87802906826501b8843013ff2b50713b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=57f2ce6a87802906826501b8843013ff2b50713b", "patch": "@@ -1,3 +1,9 @@\n+2022-05-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-format.cc: Replace uses of \"FINAL\" and \"OVERRIDE\" with \"final\"\n+\tand \"override\".\n+\t* c-pretty-print.h: Likewise.\n+\n 2022-05-18  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/105131"}, {"sha": "e4788beb5436f80ce6483ecbbadd337ed9a46616", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f2ce6a87802906826501b8843013ff2b50713b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f2ce6a87802906826501b8843013ff2b50713b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=57f2ce6a87802906826501b8843013ff2b50713b", "patch": "@@ -1,3 +1,9 @@\n+2022-05-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* cxx-pretty-print.h: Replace uses of \"FINAL\" and \"OVERRIDE\" with\n+\t\"final\" and \"override\".\n+\t* error.cc: Likewise.\n+\n 2022-05-18  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/105634"}, {"sha": "495901d6507f718c2991d1347c49063113dbe3ac", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f2ce6a87802906826501b8843013ff2b50713b/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f2ce6a87802906826501b8843013ff2b50713b/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=57f2ce6a87802906826501b8843013ff2b50713b", "patch": "@@ -1,3 +1,10 @@\n+2022-05-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit-playback.h: Replace uses of \"FINAL\" and \"OVERRIDE\" with\n+\t\"final\" and \"override\".\n+\t* jit-recording.cc: Likewise.\n+\t* jit-recording.h: Likewise.\n+\n 2022-05-16  Martin Liska  <mliska@suse.cz>\n \n \t* jit-builtins.cc (find_builtin_by_name): Use ARRAY_SIZE."}, {"sha": "392e6caeb3ca8ba1e4b7ad8bd87a21a50c2df73b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f2ce6a87802906826501b8843013ff2b50713b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f2ce6a87802906826501b8843013ff2b50713b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=57f2ce6a87802906826501b8843013ff2b50713b", "patch": "@@ -1,3 +1,93 @@\n+2022-05-20  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* g++.dg/ext/visibility/visibility-local-extern1.C: Add missing\n+\tdg-require-effective-target fpic.\n+\n+2022-05-20  Wilco Dijkstra  <wilco.dijkstra@arm.com>\n+\n+\t* gcc.target/aarch64/ror_2.c: New test.\n+\t* gcc.target/aarch64/ror_3.c: New test.\n+\n+2022-05-20  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* gcc.dg/torture/convert-dfp-2.c: New test.\n+\t* gcc.dg/torture/convert-dfp.c: New test.\n+\n+2022-05-20  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* g++.dg/eh/dfp-1.C: New test.\n+\t* g++.dg/eh/dfp-2.C: New test.\n+\t* g++.dg/eh/dfp-saves-aarch64.C: New test.\n+\n+2022-05-20  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_dfp_bid): New.\n+\t* gcc.dg/dfp/bid-non-canonical-d128-1.c: Use dfp_bid\n+\teffective-target.\n+\t* gcc.dg/dfp/bid-non-canonical-d128-2.c: Likewise.\n+\t* gcc.dg/dfp/bid-non-canonical-d128-3.c: Likewise.\n+\t* gcc.dg/dfp/bid-non-canonical-d128-4.c: Likewise.\n+\t* gcc.dg/dfp/bid-non-canonical-d32-1.c: Likewise.\n+\t* gcc.dg/dfp/bid-non-canonical-d32-2.c: Likewise.\n+\t* gcc.dg/dfp/bid-non-canonical-d64-1.c: Likewise.\n+\t* gcc.dg/dfp/bid-non-canonical-d64-2.c: Likewise.\n+\n+2022-05-20  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* gcc.target/aarch64/aapcs64/aapcs64.exp: Support new dfp*.c tests.\n+\t* gcc.target/aarch64/aapcs64/func-ret-1.c: Add DFP tests.\n+\t* gcc.target/aarch64/aapcs64/func-ret-3.c: Add DFP tests.\n+\t* gcc.target/aarch64/aapcs64/type-def.h: Add DFP types.\n+\t* gcc.target/aarch64/aapcs64/dfp-1.c: New test.\n+\t* gcc.target/aarch64/aapcs64/ice_dfp_5.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_align_dfp-1.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_align_dfp-4.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_1.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_10.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_11.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_12.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_13.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_14.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_15.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_16.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_17.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_18.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_19.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_2.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_20.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_21.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_22.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_23.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_24.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_25.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_26.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_27.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_3.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_5.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_6.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_7.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_8.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_dfp_9.c: New test.\n+\t* gcc.target/aarch64/aapcs64/test_quad_double_dfp.c: New test.\n+\t* gcc.target/aarch64/aapcs64/va_arg_dfp-1.c: New test.\n+\t* gcc.target/aarch64/aapcs64/va_arg_dfp-10.c: New test.\n+\t* gcc.target/aarch64/aapcs64/va_arg_dfp-11.c: New test.\n+\t* gcc.target/aarch64/aapcs64/va_arg_dfp-12.c: New test.\n+\t* gcc.target/aarch64/aapcs64/va_arg_dfp-13.c: New test.\n+\t* gcc.target/aarch64/aapcs64/va_arg_dfp-14.c: New test.\n+\t* gcc.target/aarch64/aapcs64/va_arg_dfp-16.c: New test.\n+\t* gcc.target/aarch64/aapcs64/va_arg_dfp-2.c: New test.\n+\t* gcc.target/aarch64/aapcs64/va_arg_dfp-3.c: New test.\n+\t* gcc.target/aarch64/aapcs64/va_arg_dfp-4.c: New test.\n+\t* gcc.target/aarch64/aapcs64/va_arg_dfp-5.c: New test.\n+\t* gcc.target/aarch64/aapcs64/va_arg_dfp-6.c: New test.\n+\t* gcc.target/aarch64/aapcs64/va_arg_dfp-8.c: New test.\n+\t* gcc.target/aarch64/aapcs64/va_arg_dfp-9.c: New test.\n+\n+2022-05-20  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* c-c++-common/dfp/pr39986.c: Accept .word directive.\n+\n 2022-05-19  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* g++.dg/cpp0x/variadic-tuple.C: Qualify function to avoid ADL"}, {"sha": "d4dd88b402001fa504886b44bd99744f08d07ee9", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f2ce6a87802906826501b8843013ff2b50713b/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f2ce6a87802906826501b8843013ff2b50713b/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=57f2ce6a87802906826501b8843013ff2b50713b", "patch": "@@ -1,3 +1,8 @@\n+2022-05-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* lex.cc: Replace uses of \"FINAL\" and \"OVERRIDE\" with \"final\" and\n+\t\"override\".\n+\n 2022-02-11  Joseph Myers  <joseph@codesourcery.com>\n \n \t* Makefile.in (po/$(PACKAGE).pot): Also handle cpp_warning_at,"}, {"sha": "774c358fa2a994fd351776c5da459dae6cde137c", "filename": "libdecnumber/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f2ce6a87802906826501b8843013ff2b50713b/libdecnumber%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f2ce6a87802906826501b8843013ff2b50713b/libdecnumber%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FChangeLog?ref=57f2ce6a87802906826501b8843013ff2b50713b", "patch": "@@ -1,3 +1,7 @@\n+2022-05-20  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* configure: Regenerate.\n+\n 2021-10-22  Eric Gallager  <egallager@gcc.gnu.org>\n \n \tPR other/102663"}, {"sha": "cd82a1daaa3b8c8d9c88cc0a733eea8ff3755161", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f2ce6a87802906826501b8843013ff2b50713b/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f2ce6a87802906826501b8843013ff2b50713b/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=57f2ce6a87802906826501b8843013ff2b50713b", "patch": "@@ -1,3 +1,17 @@\n+2022-05-20  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* Makefile.in (D32PBIT_FUNCS): Add _hf_to_sd and _sd_to_hf.\n+\t(D64PBIT_FUNCS): Add _hf_to_dd and _dd_to_hf.\n+\t(D128PBIT_FUNCS): Add _hf_to_td _td_to_hf.\n+\n+2022-05-20  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* config.host: Add t-dfprules to AArch64 targets.\n+\n+2022-05-20  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* configure: Regenerate.\n+\n 2022-05-13  Sebastian Pop  <spop@amazon.com>\n \n \tPR target/105162"}, {"sha": "d3cec76a80c3ddd7c3fc7bf0661c0efada7fad1f", "filename": "libgcc/config/libbid/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f2ce6a87802906826501b8843013ff2b50713b/libgcc%2Fconfig%2Flibbid%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f2ce6a87802906826501b8843013ff2b50713b/libgcc%2Fconfig%2Flibbid%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Flibbid%2FChangeLog?ref=57f2ce6a87802906826501b8843013ff2b50713b", "patch": "@@ -1,3 +1,51 @@\n+2022-05-20  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* bid_binarydecimal.c (CLZ32_MASK16): Delete.\n+\t(CLZ32_MASK8): Delete.\n+\t(CLZ32_MASK4): Delete.\n+\t(CLZ32_MASK2): Delete.\n+\t(CLZ32_MASK1): Delete.\n+\t(clz32_nz): Use __builtin_clz.\n+\t(ctz32_1bit): Delete.\n+\t(ctz32): Use __builtin_ctz.\n+\t(CLZ64_MASK32): Delete.\n+\t(CLZ64_MASK16): Delete.\n+\t(CLZ64_MASK8): Delete.\n+\t(CLZ64_MASK4): Delete.\n+\t(CLZ64_MASK2): Delete.\n+\t(CLZ64_MASK1): Delete.\n+\t(clz64_nz): Use __builtin_clzl.\n+\t(ctz64_1bit): Delete.\n+\t(ctz64): Use __builtin_ctzl.\n+\n+2022-05-20  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* bid_gcc_intrinsics.h (LIBGCC2_HAS_HF_MODE): Define according to\n+\t__LIBGCC_HAS_HF_MODE__.\n+\t(BID_HAS_HF_MODE): Define.\n+\t(HFtype): Define.\n+\t(__bid_extendhfsd): New prototype.\n+\t(__bid_extendhfdd): Likewise.\n+\t(__bid_extendhftd): Likewise.\n+\t(__bid_truncsdhf): Likewise.\n+\t(__bid_truncddhf): Likewise.\n+\t(__bid_trunctdhf): Likewise.\n+\t* _dd_to_hf.c: New file.\n+\t* _hf_to_dd.c: New file.\n+\t* _hf_to_sd.c: New file.\n+\t* _hf_to_td.c: New file.\n+\t* _sd_to_hf.c: New file.\n+\t* _td_to_hf.c: New file.\n+\n+2022-05-20  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* _dd_to_xf.c: Check __LIBGCC_HAS_XF_MODE__.\n+\t* _sd_to_xf.c: Likewise.\n+\t* _td_to_xf.c: Likewise.\n+\t* _xf_to_dd.c: Likewise.\n+\t* _xf_to_sd.c: Likewise.\n+\t* _xf_to_td.c: Likewise.\n+\n 2020-10-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/97164"}, {"sha": "f276d7879e9e99f2b0867b3a9a856f98970f3dfa", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f2ce6a87802906826501b8843013ff2b50713b/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f2ce6a87802906826501b8843013ff2b50713b/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=57f2ce6a87802906826501b8843013ff2b50713b", "patch": "@@ -1,3 +1,41 @@\n+2022-05-20  Marcel Vollweiler  <marcel@codesourcery.com>\n+\n+\t* libgomp.map: Added omp_target_memcpy_async and\n+\tomp_target_memcpy_rect_async.\n+\t* libgomp.texi: Both functions are now supported.\n+\t* omp.h.in: Added omp_target_memcpy_async and\n+\tomp_target_memcpy_rect_async.\n+\t* omp_lib.f90.in: Added interfaces for both new functions.\n+\t* omp_lib.h.in: Likewise.\n+\t* target.c (ialias_redirect): Added for GOMP_task.\n+\t(omp_target_memcpy): Restructured into check and copy part.\n+\t(omp_target_memcpy_check): New helper function for omp_target_memcpy and\n+\tomp_target_memcpy_async that checks requirements.\n+\t(omp_target_memcpy_copy): New helper function for omp_target_memcpy and\n+\tomp_target_memcpy_async that performs the memcpy.\n+\t(omp_target_memcpy_async_helper): New helper function that is used in\n+\tomp_target_memcpy_async for the asynchronous task.\n+\t(omp_target_memcpy_async): Added.\n+\t(omp_target_memcpy_rect): Restructured into check and copy part.\n+\t(omp_target_memcpy_rect_check): New helper function for\n+\tomp_target_memcpy_rect and omp_target_memcpy_rect_async that checks\n+\trequirements.\n+\t(omp_target_memcpy_rect_copy): New helper function for\n+\tomp_target_memcpy_rect and omp_target_memcpy_rect_async that performs\n+\tthe memcpy.\n+\t(omp_target_memcpy_rect_async_helper): New helper function that is used\n+\tin omp_target_memcpy_rect_async for the asynchronous task.\n+\t(omp_target_memcpy_rect_async): Added.\n+\t* task.c (ialias): Added for GOMP_task.\n+\t* testsuite/libgomp.c-c++-common/target-memcpy-async-1.c: New test.\n+\t* testsuite/libgomp.c-c++-common/target-memcpy-async-2.c: New test.\n+\t* testsuite/libgomp.c-c++-common/target-memcpy-rect-async-1.c: New test.\n+\t* testsuite/libgomp.c-c++-common/target-memcpy-rect-async-2.c: New test.\n+\t* testsuite/libgomp.fortran/target-memcpy-async-1.f90: New test.\n+\t* testsuite/libgomp.fortran/target-memcpy-async-2.f90: New test.\n+\t* testsuite/libgomp.fortran/target-memcpy-rect-async-1.f90: New test.\n+\t* testsuite/libgomp.fortran/target-memcpy-rect-async-2.f90: New test.\n+\n 2022-05-18  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* libgomp.texi (OpenMP 5.1): Set 'inoutset' to Y."}, {"sha": "5148c4358d37b2155a4fa2bd91069cd2ac186898", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f2ce6a87802906826501b8843013ff2b50713b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f2ce6a87802906826501b8843013ff2b50713b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=57f2ce6a87802906826501b8843013ff2b50713b", "patch": "@@ -1,3 +1,20 @@\n+2022-05-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/26_numerics/random/bernoulli_distribution/operators/values.cc:\n+\tRun fewer iterations for simulator targets.\n+\t* testsuite/26_numerics/random/binomial_distribution/operators/values.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/discrete_distribution/operators/values.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/geometric_distribution/operators/values.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/negative_binomial_distribution/operators/values.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/poisson_distribution/operators/values.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/uniform_int_distribution/operators/values.cc:\n+\tLikewise.\n+\n 2022-05-19  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/char_traits.h: Only include <cstdint> when"}, {"sha": "39286354eb72412e00e121251f99ed56e269dd0c", "filename": "maintainer-scripts/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57f2ce6a87802906826501b8843013ff2b50713b/maintainer-scripts%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57f2ce6a87802906826501b8843013ff2b50713b/maintainer-scripts%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/maintainer-scripts%2FChangeLog?ref=57f2ce6a87802906826501b8843013ff2b50713b", "patch": "@@ -1,3 +1,7 @@\n+2022-05-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* crontab: Disable snapshots from the gcc-9 branch.\n+\n 2022-04-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* crontab: Snapshots from trunk are now GCC 13 related."}]}