{"sha": "981114e175b2702448171adf1448f9daacb56921", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgxMTE0ZTE3NWIyNzAyNDQ4MTcxYWRmMTQ0OGY5ZGFhY2I1NjkyMQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-10-03T18:04:10Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-10-03T18:04:10Z"}, "message": "re PR c++/29138 (access declarations don't work for classes)\n\n\tPR c++/29138\n\t* decl2.c (grokfield): Don't handle access declarations here.\n\t* parser.c (cp_parser_using_declaration): Handle access\n\tdeclarations too.\n\t(cp_parser_block_declaration): Adjust calls to\n\tcp_parser_using_declaration.\n\t(cp_parser_member_declaration): Likewise.  Use\n\tcp_parser_using_declaration to look for access_declarations.\n\tPR c++/29138\n\t* g++.dg/inherit/access8.C: New test.\n\t* g++.dg/template/dtor4.C: Tweak error messages.\n\nFrom-SVN: r117409", "tree": {"sha": "5af52248c32ff0f2af23a82d7887c3bb88baede1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5af52248c32ff0f2af23a82d7887c3bb88baede1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/981114e175b2702448171adf1448f9daacb56921", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/981114e175b2702448171adf1448f9daacb56921", "html_url": "https://github.com/Rust-GCC/gccrs/commit/981114e175b2702448171adf1448f9daacb56921", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/981114e175b2702448171adf1448f9daacb56921/comments", "author": null, "committer": null, "parents": [{"sha": "9f9900dbb6fe19fad02a53df9efecae35bd65976", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f9900dbb6fe19fad02a53df9efecae35bd65976", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f9900dbb6fe19fad02a53df9efecae35bd65976"}], "stats": {"total": 120, "additions": 89, "deletions": 31}, "files": [{"sha": "835aabbdc070325caa0ed05340f2e12c555a91dd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981114e175b2702448171adf1448f9daacb56921/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981114e175b2702448171adf1448f9daacb56921/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=981114e175b2702448171adf1448f9daacb56921", "patch": "@@ -1,3 +1,14 @@\n+2006-10-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/29138\n+\t* decl2.c (grokfield): Don't handle access declarations here.\n+\t* parser.c (cp_parser_using_declaration): Handle access\n+\tdeclarations too.\n+\t(cp_parser_block_declaration): Adjust calls to\n+\tcp_parser_using_declaration.\n+\t(cp_parser_member_declaration): Likewise.  Use\n+\tcp_parser_using_declaration to look for access_declarations.\n+\n 2006-10-03  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/29291"}, {"sha": "42e924000f8185b82fc95138d3ea97adb8692c32", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981114e175b2702448171adf1448f9daacb56921/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981114e175b2702448171adf1448f9daacb56921/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=981114e175b2702448171adf1448f9daacb56921", "patch": "@@ -769,16 +769,6 @@ grokfield (const cp_declarator *declarator,\n   const char *asmspec = 0;\n   int flags = LOOKUP_ONLYCONVERTING;\n \n-  if (!declspecs->any_specifiers_p\n-      && declarator->kind == cdk_id\n-      && declarator->u.id.qualifying_scope\n-      && TYPE_P (declarator->u.id.qualifying_scope)\n-      && IS_AGGR_TYPE (declarator->u.id.qualifying_scope)\n-      && TREE_CODE (declarator->u.id.unqualified_name) == IDENTIFIER_NODE)\n-    /* Access declaration */\n-    return do_class_using_decl (declarator->u.id.qualifying_scope,\n-\t\t\t\tdeclarator->u.id.unqualified_name);\n-\n   if (init\n       && TREE_CODE (init) == TREE_LIST\n       && TREE_VALUE (init) == error_mark_node"}, {"sha": "cb2346a3da3f183a6444eae889d9e50c7f69bd56", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 46, "deletions": 20, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981114e175b2702448171adf1448f9daacb56921/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981114e175b2702448171adf1448f9daacb56921/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=981114e175b2702448171adf1448f9daacb56921", "patch": "@@ -1518,8 +1518,8 @@ static tree cp_parser_qualified_namespace_specifier\n   (cp_parser *);\n static void cp_parser_namespace_alias_definition\n   (cp_parser *);\n-static void cp_parser_using_declaration\n-  (cp_parser *);\n+static bool cp_parser_using_declaration\n+  (cp_parser *, bool);\n static void cp_parser_using_directive\n   (cp_parser *);\n static void cp_parser_asm_definition\n@@ -7184,7 +7184,8 @@ cp_parser_block_declaration (cp_parser *parser,\n \tcp_parser_using_directive (parser);\n       /* Otherwise, it's a using-declaration.  */\n       else\n-\tcp_parser_using_declaration (parser);\n+\tcp_parser_using_declaration (parser,\n+\t\t\t\t     /*access_declaration_p=*/false);\n     }\n   /* If the next keyword is `__label__' we have a label declaration.  */\n   else if (token1->keyword == RID_LABEL)\n@@ -10582,14 +10583,21 @@ cp_parser_qualified_namespace_specifier (cp_parser* parser)\n   return cp_parser_namespace_name (parser);\n }\n \n-/* Parse a using-declaration.\n+/* Parse a using-declaration, or, if ACCESS_DECLARATION_P is true, an\n+   access declaration.\n \n    using-declaration:\n      using typename [opt] :: [opt] nested-name-specifier unqualified-id ;\n-     using :: unqualified-id ;  */\n+     using :: unqualified-id ;  \n \n-static void\n-cp_parser_using_declaration (cp_parser* parser)\n+   access-declaration:\n+     qualified-id ;  \n+\n+   */\n+\n+static bool\n+cp_parser_using_declaration (cp_parser* parser, \n+\t\t\t     bool access_declaration_p)\n {\n   cp_token *token;\n   bool typename_p = false;\n@@ -10598,18 +10606,23 @@ cp_parser_using_declaration (cp_parser* parser)\n   tree identifier;\n   tree qscope;\n \n-  /* Look for the `using' keyword.  */\n-  cp_parser_require_keyword (parser, RID_USING, \"`using'\");\n-\n-  /* Peek at the next token.  */\n-  token = cp_lexer_peek_token (parser->lexer);\n-  /* See if it's `typename'.  */\n-  if (token->keyword == RID_TYPENAME)\n+  if (access_declaration_p)\n+    cp_parser_parse_tentatively (parser);\n+  else\n     {\n-      /* Remember that we've seen it.  */\n-      typename_p = true;\n-      /* Consume the `typename' token.  */\n-      cp_lexer_consume_token (parser->lexer);\n+      /* Look for the `using' keyword.  */\n+      cp_parser_require_keyword (parser, RID_USING, \"`using'\");\n+      \n+      /* Peek at the next token.  */\n+      token = cp_lexer_peek_token (parser->lexer);\n+      /* See if it's `typename'.  */\n+      if (token->keyword == RID_TYPENAME)\n+\t{\n+\t  /* Remember that we've seen it.  */\n+\t  typename_p = true;\n+\t  /* Consume the `typename' token.  */\n+\t  cp_lexer_consume_token (parser->lexer);\n+\t}\n     }\n \n   /* Look for the optional global scope qualification.  */\n@@ -10643,6 +10656,14 @@ cp_parser_using_declaration (cp_parser* parser)\n \t\t\t\t\t /*declarator_p=*/true,\n \t\t\t\t\t /*optional_p=*/false);\n \n+  if (access_declaration_p)\n+    {\n+      if (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))\n+\tcp_parser_simulate_error (parser);\n+      if (!cp_parser_parse_definitely (parser))\n+\treturn false;\n+    }\n+\n   /* The function we call to handle a using-declaration is different\n      depending on what scope we are in.  */\n   if (qscope == error_mark_node || identifier == error_mark_node)\n@@ -10676,6 +10697,8 @@ cp_parser_using_declaration (cp_parser* parser)\n \n   /* Look for the final `;'.  */\n   cp_parser_require (parser, CPP_SEMICOLON, \"`;'\");\n+  \n+  return true;\n }\n \n /* Parse a using-directive.\n@@ -13551,8 +13574,8 @@ cp_parser_member_declaration (cp_parser* parser)\n   if (cp_lexer_next_token_is_keyword (parser->lexer, RID_USING))\n     {\n       /* Parse the using-declaration.  */\n-      cp_parser_using_declaration (parser);\n-\n+      cp_parser_using_declaration (parser,\n+\t\t\t\t   /*access_declaration_p=*/false);\n       return;\n     }\n \n@@ -13572,6 +13595,9 @@ cp_parser_member_declaration (cp_parser* parser)\n       return;\n     }\n \n+  if (cp_parser_using_declaration (parser, /*access_declaration=*/true))\n+    return;\n+\n   /* Parse the decl-specifier-seq.  */\n   cp_parser_decl_specifier_seq (parser,\n \t\t\t\tCP_PARSER_FLAGS_OPTIONAL,"}, {"sha": "1e456965d9c8a9cfacd955658ebaac80d9b03e15", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981114e175b2702448171adf1448f9daacb56921/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981114e175b2702448171adf1448f9daacb56921/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=981114e175b2702448171adf1448f9daacb56921", "patch": "@@ -1,3 +1,9 @@\n+2006-10-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/29138\n+\t* g++.dg/inherit/access8.C: New test.\n+\t* g++.dg/template/dtor4.C: Tweak error messages.\n+\n 2006-10-03  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/27478"}, {"sha": "a11ea8e04943e49c1b4ae09e14412a94de67228c", "filename": "gcc/testsuite/g++.dg/inherit/access8.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981114e175b2702448171adf1448f9daacb56921/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Faccess8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981114e175b2702448171adf1448f9daacb56921/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Faccess8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Faccess8.C?ref=981114e175b2702448171adf1448f9daacb56921", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/29138\n+\n+class A\n+{\n+public:\n+  int i;\n+  class A1\n+  {\n+    int j;\n+  };\n+};\n+\n+class B : private A\n+{\n+public:\n+  A::i;\n+  A::A1;\n+};\n+\n+void\n+f ()\n+{\n+  B b;\n+  B::A1 a1;\n+}"}, {"sha": "4f277b248bda990075ba4675c488734cd146a680", "filename": "gcc/testsuite/g++.dg/template/dtor4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/981114e175b2702448171adf1448f9daacb56921/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/981114e175b2702448171adf1448f9daacb56921/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor4.C?ref=981114e175b2702448171adf1448f9daacb56921", "patch": "@@ -5,5 +5,5 @@\n \n template<int> struct A\n {\n-  ~A<0>(); // { dg-error \"declaration\" }\n+  ~A<0>(); // { dg-error \"parse error|declaration\" }\n };"}]}