{"sha": "bf4f18bded58c7710276877ea8648b12ac3088be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY0ZjE4YmRlZDU4Yzc3MTAyNzY4NzdlYTg2NDhiMTJhYzMwODhiZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-07-03T08:14:33Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-03T08:14:33Z"}, "message": "[Ada] Extend -gnatw.z warning to array types\n\nThe -gnatw.z switch causes the compiler to issue a warning on record\ntypes subject to both an alignment clause and a size clause, when the\nspecified size is not a multiple of the alignment in bits, because this\nmeans that the Object_Size will be strictly larger than the specified\nsize.\n\nIt makes sense to extend this warning to array types, but not to the\ncases of bit-packed arrays where the size is not a multiple of storage\nunit and the specified alignment is the minimum one, because there would\nbe no way to get rid of it apart from explicitly silencing it.\n\nThe compiler must issue the warning:\n\np.ads:5:03: warning: size is not a multiple of alignment for \"Triplet\"\np.ads:5:03: warning: size of 24 specified at line 4\np.ads:5:03: warning: Object_Size will be increased to 32\n\non the following package:\n\npackage P is\n\n  type Triplet is new String (1 .. 3);\n  for Triplet'Size use 24;\n  for Triplet'Alignment use 4;\n\n  type Arr is array (1 .. 7) of Boolean;\n  pragma Pack (Arr);\n  for Arr'Size use 7;\n  for Arr'Alignment use 1;\n\nend P;\n\n2019-07-03  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst\n\t(Warning message control): Document that -gnatw.z/Z apply to\n\tarray types.\n\t* freeze.adb (Freeze_Entity): Give -gnatw.z warning for array\n\ttypes as well, but not if the specified alignment is the minimum\n\tone.\n\t* gnat_ugn.texi: Regenerate.\n\nFrom-SVN: r272971", "tree": {"sha": "7cbe0b4c236de9c2c629eca88882ca2bb9cb7573", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cbe0b4c236de9c2c629eca88882ca2bb9cb7573"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf4f18bded58c7710276877ea8648b12ac3088be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf4f18bded58c7710276877ea8648b12ac3088be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf4f18bded58c7710276877ea8648b12ac3088be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf4f18bded58c7710276877ea8648b12ac3088be/comments", "author": null, "committer": null, "parents": [{"sha": "1f159b86c1e9ca2df09d6655fc9ad836d5c133e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f159b86c1e9ca2df09d6655fc9ad836d5c133e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f159b86c1e9ca2df09d6655fc9ad836d5c133e9"}], "stats": {"total": 61, "additions": 38, "deletions": 23}, "files": [{"sha": "6a4fcfd9249c77aa476337c0f0a2866efc317b54", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4f18bded58c7710276877ea8648b12ac3088be/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4f18bded58c7710276877ea8648b12ac3088be/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bf4f18bded58c7710276877ea8648b12ac3088be", "patch": "@@ -1,3 +1,13 @@\n+2019-07-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst\n+\t(Warning message control): Document that -gnatw.z/Z apply to\n+\tarray types.\n+\t* freeze.adb (Freeze_Entity): Give -gnatw.z warning for array\n+\ttypes as well, but not if the specified alignment is the minimum\n+\tone.\n+\t* gnat_ugn.texi: Regenerate.\n+\n 2019-07-03  Bob Duff  <duff@adacore.com>\n \n \t* einfo.ads, exp_util.adb, layout.ads, sinfo.ads: Spell \"laid\""}, {"sha": "9af50cc7b8d8eda7aac3b7f4c0236f1e3b0666ad", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4f18bded58c7710276877ea8648b12ac3088be/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4f18bded58c7710276877ea8648b12ac3088be/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=bf4f18bded58c7710276877ea8648b12ac3088be", "patch": "@@ -4045,8 +4045,8 @@ of the pragma in the :title:`GNAT_Reference_manual`).\n :switch:`-gnatw.z`\n   *Activate warnings for size not a multiple of alignment.*\n \n-  This switch activates warnings for cases of record types with\n-  specified ``Size`` and ``Alignment`` attributes where the\n+  This switch activates warnings for cases of array and record types\n+  with specified ``Size`` and ``Alignment`` attributes where the\n   size is not a multiple of the alignment, resulting in an object\n   size that is greater than the specified size. The default\n   is that such warnings are generated.\n@@ -4058,12 +4058,11 @@ of the pragma in the :title:`GNAT_Reference_manual`).\n :switch:`-gnatw.Z`\n   *Suppress warnings for size not a multiple of alignment.*\n \n-  This switch suppresses warnings for cases of record types with\n-  specified ``Size`` and ``Alignment`` attributes where the\n+  This switch suppresses warnings for cases of array and record types\n+  with specified ``Size`` and ``Alignment`` attributes where the\n   size is not a multiple of the alignment, resulting in an object\n-  size that is greater than the specified size.\n-  The warning can also be\n-  suppressed by giving an explicit ``Object_Size`` value.\n+  size that is greater than the specified size. The warning can also\n+  be suppressed by giving an explicit ``Object_Size`` value.\n \n \n .. index:: -Wunused (gcc)"}, {"sha": "5b843f22519516c05e445b7d36fbf6095b469413", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4f18bded58c7710276877ea8648b12ac3088be/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4f18bded58c7710276877ea8648b12ac3088be/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=bf4f18bded58c7710276877ea8648b12ac3088be", "patch": "@@ -5943,17 +5943,29 @@ package body Freeze is\n             Inherit_Aspects_At_Freeze_Point (E);\n          end if;\n \n-         --  Check for incompatible size and alignment for record type\n+         --  Case of array type\n+\n+         if Is_Array_Type (E) then\n+            Freeze_Array_Type (E);\n+         end if;\n+\n+         --  Check for incompatible size and alignment for array/record type\n \n          if Warn_On_Size_Alignment\n-           and then Is_Record_Type (E)\n-           and then Has_Size_Clause (E) and then Has_Alignment_Clause (E)\n+           and then (Is_Array_Type (E) or else Is_Record_Type (E))\n+           and then Has_Size_Clause (E)\n+           and then Has_Alignment_Clause (E)\n \n            --  If explicit Object_Size clause given assume that the programmer\n            --  knows what he is doing, and expects the compiler behavior.\n \n            and then not Has_Object_Size_Clause (E)\n \n+           --  It does not really make sense to warn for the minimum alignment\n+           --  since the programmer could not get rid of the warning.\n+\n+           and then Alignment (E) > 1\n+\n            --  Check for size not a multiple of alignment\n \n            and then RM_Size (E) mod (Alignment (E) * System_Storage_Unit) /= 0\n@@ -5994,15 +6006,10 @@ package body Freeze is\n             end;\n          end if;\n \n-         --  Array type\n-\n-         if Is_Array_Type (E) then\n-            Freeze_Array_Type (E);\n-\n          --  For a class-wide type, the corresponding specific type is\n          --  frozen as well (RM 13.14(15))\n \n-         elsif Is_Class_Wide_Type (E) then\n+         if Is_Class_Wide_Type (E) then\n             Freeze_And_Append (Root_Type (E), N, Result);\n \n             --  If the base type of the class-wide type is still incomplete,"}, {"sha": "752c2acbfeec3791873cdd80f1c34a000410b7be", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf4f18bded58c7710276877ea8648b12ac3088be/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf4f18bded58c7710276877ea8648b12ac3088be/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=bf4f18bded58c7710276877ea8648b12ac3088be", "patch": "@@ -12683,8 +12683,8 @@ sizes or conventions.\n \n @emph{Activate warnings for size not a multiple of alignment.}\n \n-This switch activates warnings for cases of record types with\n-specified @code{Size} and @code{Alignment} attributes where the\n+This switch activates warnings for cases of array and record types\n+with specified @code{Size} and @code{Alignment} attributes where the\n size is not a multiple of the alignment, resulting in an object\n size that is greater than the specified size. The default\n is that such warnings are generated.\n@@ -12701,12 +12701,11 @@ is that such warnings are generated.\n \n @emph{Suppress warnings for size not a multiple of alignment.}\n \n-This switch suppresses warnings for cases of record types with\n-specified @code{Size} and @code{Alignment} attributes where the\n+This switch suppresses warnings for cases of array and record types\n+with specified @code{Size} and @code{Alignment} attributes where the\n size is not a multiple of the alignment, resulting in an object\n-size that is greater than the specified size.\n-The warning can also be\n-suppressed by giving an explicit @code{Object_Size} value.\n+size that is greater than the specified size. The warning can also\n+be suppressed by giving an explicit @code{Object_Size} value.\n @end table\n \n @geindex -Wunused (gcc)"}]}