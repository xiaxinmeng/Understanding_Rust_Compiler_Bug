{"sha": "94d13ad18df325e53e10c4ed44dde8b60c4f6708", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRkMTNhZDE4ZGYzMjVlNTNlMTBjNGVkNDRkZGU4YjYwYzRmNjcwOA==", "commit": {"author": {"name": "Quentin Neill", "email": "quentin.neill.gnu@gmail.com", "date": "2010-11-10T22:02:34Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-11-10T22:02:34Z"}, "message": "Add support for TBM.\n\n2010-11-10 Quentin Neill <quentin.neill.gnu@gmail.com>\n\ngcc/\n\t* config.gcc (i[34567]86-*-*): Include tbmintrin.h.\n    (x86_64-*-*): Likewise.\n\t* config/i386/cpuid.h: Define TBM bit.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Define\n\tand set has_tbm.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Check\n\tisa_flag for TBM.\n\t* config/i386/i386.c (OPTION_MASK_ISA_TBM_SET): New.\n\t(OPTION_MASK_ISA_TBM_UNSET): New.\n\t(ix86_handle_option): Handle -mtbm.\n\t(isa_opts): Add -mtbm.\n\t(enum pta_flags): Add PTA_TBM.\n\t(ix86_option_override_internal): Add TBM support.\n\t(ix86_valid_target_attribute_inner_p): Handle -mtbm.\n\t(IX86_BUILTIN_BEXTRI32): New for TBM intrinsic.\n\t(IX86_BUILTIN_BEXTRI64): Likewise.\n\t(bdesc_args): Add TBM intrinsics.\n\t(ix86_expand_builtin): Add TBM specific case.\n\t* config/i386/i386.h (TARGET_TBM): New for TBM.\n\t* config/i386/i386.md (UNSPEC_BEXTRI): New for TBM.\n\t(tbm_bextri_<mode>): Likewise.\n\t(*tbm_blcfill_<mode>): Likewise.\n\t(*tbm_blci_<mode>): Likewise.\n\t(*tbm_blcic_<mode>): Likewise.\n\t(*tbm_blcmsk_<mode>): Likewise.\n\t(*tbm_blcs_<mode>): Likewise.\n\t(*tbm_blsfill_<mode>): Likewise.\n\t(*tbm_blsic_<mode>): Likewise.\n\t(*tbm_t1mskc_<mode>): Likewise.\n\t(*tbm_tzmsk_<mode>): Likewise.\n\t* config/i386/i386.opt: Add -mtbm.\n\t* config/i386/tbmintrin.h (__bextri_u32): New.\n\t(__blcfill_u32): Likewise.\n\t(__blci_u32): Likewise.\n\t(__blcic_u32): Likewise.\n\t(__blcmsk_u32): Likewise.\n\t(__blcs_u32): Likewise.\n\t(__blsfill_u32): Likewise.\n\t(__blsic_u32): Likewise.\n\t(__t1mskc_u32): Likewise.\n\t(__tzmsk_u32): Likewise.\n\t(__bextri_u64): Likewise.\n\t(__blcfill_u64): Likewise.\n\t(__blci_u64): Likewise.\n\t(__blcic_u64): Likewise.\n\t(__blcmsk_u64): Likewise.\n\t(__blcs_u64): Likewise.\n\t(__blsfill_u64): Likewise.\n\t(__blsic_u64): Likewise.\n\t(__t1mskc_u64): Likewise.\n\t(__tzmsk_u64): Likewise.\n\t* config/i386/x86intrin.h: Add TBM check and tbmintrin.h.\n\t* doc/invoke.texi: Document -mtbm.\n\t* doc/extend.texi: Document TBM built-in functions.\n\ngcc/testsuite/\n\t* g++.dg/other/i386-2.C: Add -mtbm.\n\t* g++.dg/other/i386-3.C: Likewise.\n\t* gcc.target/i386/funcspec-5.c: Add tbm and no-tbm targets.\n\t* gcc.target/i386/funcspec-6.c: Likewise.\n\t* gcc.target/i386/sse-12.c: Add -mtbm.\n\t* gcc.target/i386/sse-13.c: Add -mtbm and test immediate\n\toperand intrinsics.\n\t* gcc.target/i386/sse-14.c: Likewise.\n\t* gcc.target/i386/sse-22.c: Likewise.\n\t* gcc.target/i386/sse-23.c: Likewise.\n\t* gcc.target/i386/tbm-1.c: New file.\n\t* gcc.target/i386/tbm-2.c: Likewise.\n\nFrom-SVN: r166562", "tree": {"sha": "6b83a10f049fee21796c956345f2d360f24917f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b83a10f049fee21796c956345f2d360f24917f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94d13ad18df325e53e10c4ed44dde8b60c4f6708", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94d13ad18df325e53e10c4ed44dde8b60c4f6708", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94d13ad18df325e53e10c4ed44dde8b60c4f6708", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94d13ad18df325e53e10c4ed44dde8b60c4f6708/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91afcfa30c1a15d759f8f59c9d1df403f196a5b6"}], "stats": {"total": 717, "additions": 688, "deletions": 29}, "files": [{"sha": "16920f3715dfe1326ca4e2835a89287e19862259", "filename": "gcc/ChangeLog", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -1,3 +1,60 @@\n+2010-11-10  Quentin Neill  <quentin.neill.gnu@gmail.com>\n+\n+\t* config.gcc (i[34567]86-*-*): Include tbmintrin.h.\n+\t(x86_64-*-*): Likewise.\n+\t* config/i386/cpuid.h: Define TBM bit.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Define\n+\tand set has_tbm.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Check\n+\tisa_flag for TBM.\n+\t* config/i386/i386.c (OPTION_MASK_ISA_TBM_SET): New.\n+\t(OPTION_MASK_ISA_TBM_UNSET): New.\n+\t(ix86_handle_option): Handle -mtbm.\n+\t(isa_opts): Add -mtbm.\n+\t(enum pta_flags): Add PTA_TBM.\n+\t(ix86_option_override_internal): Add TBM support.\n+\t(ix86_valid_target_attribute_inner_p): Handle -mtbm.\n+\t(IX86_BUILTIN_BEXTRI32): New for TBM intrinsic.\n+\t(IX86_BUILTIN_BEXTRI64): Likewise.\n+\t(bdesc_args): Add TBM intrinsics.\n+\t(ix86_expand_builtin): Add TBM specific case.\n+\t* config/i386/i386.h (TARGET_TBM): New for TBM.\n+\t* config/i386/i386.md (UNSPEC_BEXTRI): New for TBM.\n+\t(tbm_bextri_<mode>): Likewise.\n+\t(*tbm_blcfill_<mode>): Likewise.\n+\t(*tbm_blci_<mode>): Likewise.\n+\t(*tbm_blcic_<mode>): Likewise.\n+\t(*tbm_blcmsk_<mode>): Likewise.\n+\t(*tbm_blcs_<mode>): Likewise.\n+\t(*tbm_blsfill_<mode>): Likewise.\n+\t(*tbm_blsic_<mode>): Likewise.\n+\t(*tbm_t1mskc_<mode>): Likewise.\n+\t(*tbm_tzmsk_<mode>): Likewise.\n+\t* config/i386/i386.opt: Add -mtbm.\n+\t* config/i386/tbmintrin.h (__bextri_u32): New.\n+\t(__blcfill_u32): Likewise.\n+\t(__blci_u32): Likewise.\n+\t(__blcic_u32): Likewise.\n+\t(__blcmsk_u32): Likewise.\n+\t(__blcs_u32): Likewise.\n+\t(__blsfill_u32): Likewise.\n+\t(__blsic_u32): Likewise.\n+\t(__t1mskc_u32): Likewise.\n+\t(__tzmsk_u32): Likewise.\n+\t(__bextri_u64): Likewise.\n+\t(__blcfill_u64): Likewise.\n+\t(__blci_u64): Likewise.\n+\t(__blcic_u64): Likewise.\n+\t(__blcmsk_u64): Likewise.\n+\t(__blcs_u64): Likewise.\n+\t(__blsfill_u64): Likewise.\n+\t(__blsic_u64): Likewise.\n+\t(__t1mskc_u64): Likewise.\n+\t(__tzmsk_u64): Likewise.\n+\t* config/i386/x86intrin.h: Add TBM check and tbmintrin.h.\n+\t* doc/invoke.texi: Document -mtbm.\n+\t* doc/extend.texi: Document TBM built-in functions.\n+\n 2010-11-10  Quentin Neill  <quentin.neill.gnu@gmail.com>\n \n \t* config.gcc (i[34567]86-*-*): Include bmiintrin.h."}, {"sha": "67877db3999b597f2ccf396314e027c9a4579368", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -316,7 +316,7 @@ i[34567]86-*-*)\n \t\t       nmmintrin.h bmmintrin.h fma4intrin.h wmmintrin.h\n \t\t       immintrin.h x86intrin.h avxintrin.h xopintrin.h\n \t\t       ia32intrin.h cross-stdarg.h lwpintrin.h popcntintrin.h\n-\t\t       abmintrin.h bmiintrin.h\"\n+\t\t       abmintrin.h bmiintrin.h tbmintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -327,7 +327,7 @@ x86_64-*-*)\n \t\t       nmmintrin.h bmmintrin.h fma4intrin.h wmmintrin.h\n \t\t       immintrin.h x86intrin.h avxintrin.h xopintrin.h\n \t\t       ia32intrin.h cross-stdarg.h lwpintrin.h popcntintrin.h\n-\t\t       abmintrin.h bmiintrin.h\"\n+\t\t       abmintrin.h bmiintrin.h tbmintrin.h\"\n \tneed_64bit_hwint=yes\n \t;;\n ia64-*-*)"}, {"sha": "e9d0fab6f39ab8d26797f0492f65e58b9f1a3d14", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -54,6 +54,7 @@\n #define bit_XOP         (1 << 11)\n #define bit_LWP \t(1 << 15)\n #define bit_FMA4        (1 << 16)\n+#define bit_TBM         (1 << 21)\n \n /* %edx */\n #define bit_LM\t\t(1 << 29)"}, {"sha": "288d5072662da9c38a2e57d2fe3a27321387beb6", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -397,7 +397,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_popcnt = 0, has_aes = 0, has_avx = 0;\n   unsigned int has_pclmul = 0, has_abm = 0, has_lwp = 0;\n   unsigned int has_fma4 = 0, has_xop = 0;\n-  unsigned int has_bmi = 0;\n+  unsigned int has_bmi = 0, has_tbm = 0;\n \n   bool arch;\n \n@@ -464,6 +464,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_lwp = ecx & bit_LWP;\n       has_fma4 = ecx & bit_FMA4;\n       has_xop = ecx & bit_XOP;\n+      has_tbm = ecx & bit_TBM;\n \n       has_longmode = edx & bit_LM;\n       has_3dnowp = edx & bit_3DNOWP;\n@@ -693,6 +694,8 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \toptions = concat (options, \" -mxop\", NULL);\n       if (has_bmi)\n \toptions = concat (options, \" -mbmi\", NULL);\n+      if (has_tbm)\n+\toptions = concat (options, \" -mtbm\", NULL);\n \n       if (has_avx)\n \toptions = concat (options, \" -mavx\", NULL);"}, {"sha": "ca3517726cd867e89057357795a882cdd4f4f51e", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -255,6 +255,8 @@ ix86_target_macros_internal (int isa_flag,\n     def_or_undef (parse_in, \"__ABM__\");\n   if (isa_flag & OPTION_MASK_ISA_BMI)\n     def_or_undef (parse_in, \"__BMI__\");\n+  if (isa_flag & OPTION_MASK_ISA_TBM)\n+    def_or_undef (parse_in, \"__TBM__\");\n   if (isa_flag & OPTION_MASK_ISA_POPCNT)\n     def_or_undef (parse_in, \"__POPCNT__\");\n   if (isa_flag & OPTION_MASK_ISA_FSGSBASE)"}, {"sha": "d52a0a45de78dcddd15cd193ac072d3672cecda9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -2326,7 +2326,7 @@ static int ix86_isa_flags_explicit;\n   (OPTION_MASK_ISA_ABM | OPTION_MASK_ISA_POPCNT)\n \n #define OPTION_MASK_ISA_BMI_SET OPTION_MASK_ISA_BMI\n-\n+#define OPTION_MASK_ISA_TBM_SET OPTION_MASK_ISA_TBM\n #define OPTION_MASK_ISA_POPCNT_SET OPTION_MASK_ISA_POPCNT\n #define OPTION_MASK_ISA_CX16_SET OPTION_MASK_ISA_CX16\n #define OPTION_MASK_ISA_SAHF_SET OPTION_MASK_ISA_SAHF\n@@ -2382,6 +2382,7 @@ static int ix86_isa_flags_explicit;\n #define OPTION_MASK_ISA_PCLMUL_UNSET OPTION_MASK_ISA_PCLMUL\n #define OPTION_MASK_ISA_ABM_UNSET OPTION_MASK_ISA_ABM\n #define OPTION_MASK_ISA_BMI_UNSET OPTION_MASK_ISA_BMI\n+#define OPTION_MASK_ISA_TBM_UNSET OPTION_MASK_ISA_TBM\n #define OPTION_MASK_ISA_POPCNT_UNSET OPTION_MASK_ISA_POPCNT\n #define OPTION_MASK_ISA_CX16_UNSET OPTION_MASK_ISA_CX16\n #define OPTION_MASK_ISA_SAHF_UNSET OPTION_MASK_ISA_SAHF\n@@ -2697,6 +2698,19 @@ ix86_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED, int value)\n \t}\n       return true;\n \n+    case OPT_mtbm:\n+      if (value)\n+\t{\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_TBM_SET;\n+\t  ix86_isa_flags_explicit |= OPTION_MASK_ISA_TBM_SET;\n+\t}\n+      else\n+\t{\n+\t  ix86_isa_flags &= ~OPTION_MASK_ISA_TBM_UNSET;\n+\t  ix86_isa_flags_explicit |= OPTION_MASK_ISA_TBM_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mpopcnt:\n       if (value)\n \t{\n@@ -2866,6 +2880,7 @@ ix86_target_string (int isa, int flags, const char *arch, const char *tune,\n     { \"-mmmx\",\t\tOPTION_MASK_ISA_MMX },\n     { \"-mabm\",\t\tOPTION_MASK_ISA_ABM },\n     { \"-mbmi\",\t\tOPTION_MASK_ISA_BMI },\n+    { \"-mtbm\",\t\tOPTION_MASK_ISA_TBM },\n     { \"-mpopcnt\",\tOPTION_MASK_ISA_POPCNT },\n     { \"-mmovbe\",\tOPTION_MASK_ISA_MOVBE },\n     { \"-mcrc32\",\tOPTION_MASK_ISA_CRC32 },\n@@ -3122,7 +3137,8 @@ ix86_option_override_internal (bool main_args_p)\n       PTA_FSGSBASE = 1 << 24,\n       PTA_RDRND = 1 << 25,\n       PTA_F16C = 1 << 26,\n-      PTA_BMI = 1 << 27\n+      PTA_BMI = 1 << 27,\n+      PTA_TBM = 1 << 28\n       /* if this reaches 32, need to widen struct pta flags below */\n     };\n \n@@ -3461,6 +3477,9 @@ ix86_option_override_internal (bool main_args_p)\n \tif (processor_alias_table[i].flags & PTA_BMI\n \t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_BMI))\n \t  ix86_isa_flags |= OPTION_MASK_ISA_BMI;\n+\tif (processor_alias_table[i].flags & PTA_TBM\n+\t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_TBM))\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_TBM;\n \tif (processor_alias_table[i].flags & PTA_CX16\n \t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_CX16))\n \t  ix86_isa_flags |= OPTION_MASK_ISA_CX16;\n@@ -4299,6 +4318,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[])\n     IX86_ATTR_ISA (\"3dnow\",\tOPT_m3dnow),\n     IX86_ATTR_ISA (\"abm\",\tOPT_mabm),\n     IX86_ATTR_ISA (\"bmi\",\tOPT_mbmi),\n+    IX86_ATTR_ISA (\"tbm\",\tOPT_mtbm),\n     IX86_ATTR_ISA (\"aes\",\tOPT_maes),\n     IX86_ATTR_ISA (\"avx\",\tOPT_mavx),\n     IX86_ATTR_ISA (\"mmx\",\tOPT_mmmx),\n@@ -24044,6 +24064,11 @@ enum ix86_builtins\n   IX86_BUILTIN_BEXTR64,\n   IX86_BUILTIN_CTZS,\n \n+  /* TBM instructions.  */\n+  IX86_BUILTIN_BEXTRI32,\n+  IX86_BUILTIN_BEXTRI64,\n+\n+\n   /* FSGSBASE instructions.  */\n   IX86_BUILTIN_RDFSBASE32,\n   IX86_BUILTIN_RDFSBASE64,\n@@ -24988,6 +25013,10 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_BMI, CODE_FOR_bmi_bextr_di, \"__builtin_ia32_bextr_u64\", IX86_BUILTIN_BEXTR64, UNKNOWN, (int) UINT64_FTYPE_UINT64_UINT64 },\n   { OPTION_MASK_ISA_BMI, CODE_FOR_ctzhi2,       \"__builtin_ctzs\",           IX86_BUILTIN_CTZS,    UNKNOWN, (int) UINT16_FTYPE_UINT16 },\n \n+  /* TBM */\n+  { OPTION_MASK_ISA_TBM, CODE_FOR_tbm_bextri_si, \"__builtin_ia32_bextri_u32\", IX86_BUILTIN_BEXTRI32, UNKNOWN, (int) UINT_FTYPE_UINT_UINT },\n+  { OPTION_MASK_ISA_TBM, CODE_FOR_tbm_bextri_di, \"__builtin_ia32_bextri_u64\", IX86_BUILTIN_BEXTRI64, UNKNOWN, (int) UINT64_FTYPE_UINT64_UINT64 },\n+\n   /* F16C */\n   { OPTION_MASK_ISA_F16C, CODE_FOR_vcvtph2ps, \"__builtin_ia32_vcvtph2ps\", IX86_BUILTIN_CVTPH2PS, UNKNOWN, (int) V4SF_FTYPE_V8HI },\n   { OPTION_MASK_ISA_F16C, CODE_FOR_vcvtph2ps256, \"__builtin_ia32_vcvtph2ps256\", IX86_BUILTIN_CVTPH2PS256, UNKNOWN, (int) V8SF_FTYPE_V8HI },\n@@ -27098,6 +27127,32 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       emit_insn (gen_lwp_slwpcb (target));\n       return target;\n \n+    case IX86_BUILTIN_BEXTRI32:\n+    case IX86_BUILTIN_BEXTRI64:\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      arg1 = CALL_EXPR_ARG (exp, 1);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n+      icode = (fcode == IX86_BUILTIN_BEXTRI32\n+\t  ? CODE_FOR_tbm_bextri_si\n+\t  : CODE_FOR_tbm_bextri_di);\n+      if (!CONST_INT_P (op1))\n+        {\n+          error (\"last argument must be an immediate\");\n+          return const0_rtx;\n+        }\n+      else\n+        {\n+          unsigned char length = (INTVAL (op1) >> 8) & 0xFF;\n+          unsigned char lsb_index = INTVAL (op1) & 0xFF;\n+          op1 = GEN_INT (length);\n+          op2 = GEN_INT (lsb_index);\n+          pat = GEN_FCN (icode) (target, op0, op1, op2);\n+          if (pat)\n+            emit_insn (pat);\n+          return target;\n+        }\n+\n     default:\n       break;\n     }"}, {"sha": "8ef0d7b4d6b23a72aba99908d4b1cafab6eee78c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -60,6 +60,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_ROUND\tOPTION_ISA_ROUND\n #define TARGET_ABM\tOPTION_ISA_ABM\n #define TARGET_BMI\tOPTION_ISA_BMI\n+#define TARGET_TBM\tOPTION_ISA_TBM\n #define TARGET_POPCNT\tOPTION_ISA_POPCNT\n #define TARGET_SAHF\tOPTION_ISA_SAHF\n #define TARGET_MOVBE\tOPTION_ISA_MOVBE"}, {"sha": "10c4bb2e359556f1bffb449243112734ca8e325a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -12098,6 +12098,144 @@\n   [(set_attr \"type\" \"bitmanip\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; TBM instructions.\n+(define_insn \"tbm_bextri_<mode>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+        (zero_extract:SWI48\n+          (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n+          (match_operand:SWI48 2 \"const_0_to_255_operand\" \"n\")\n+          (match_operand:SWI48 3 \"const_0_to_255_operand\" \"n\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+   \"TARGET_TBM\"\n+{\n+  operands[2] = GEN_INT (INTVAL (operands[2]) << 8 | INTVAL (operands[3]));\n+  return \"bextr\\t{%2, %1, %0|%0, %1, %2}\";\n+}\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*tbm_blcfill_<mode>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+        (and:SWI48\n+          (plus:SWI48\n+            (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n+            (const_int 1))\n+          (match_dup 1)))\n+   (clobber (reg:CC FLAGS_REG))]\n+   \"TARGET_TBM\"\n+   \"blcfill\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*tbm_blci_<mode>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+        (ior:SWI48\n+          (not:SWI48\n+            (plus:SWI48\n+              (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n+              (const_int 1)))\n+          (match_dup 1)))\n+   (clobber (reg:CC FLAGS_REG))]\n+   \"TARGET_TBM\"\n+   \"blci\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*tbm_blcic_<mode>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+        (and:SWI48\n+          (plus:SWI48\n+            (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n+            (const_int 1))\n+          (not:SWI48\n+            (match_dup 1))))\n+   (clobber (reg:CC FLAGS_REG))]\n+   \"TARGET_TBM\"\n+   \"blcic\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*tbm_blcmsk_<mode>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+        (xor:SWI48\n+          (plus:SWI48\n+            (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n+            (const_int 1))\n+          (match_dup 1)))\n+   (clobber (reg:CC FLAGS_REG))]\n+   \"TARGET_TBM\"\n+   \"blcmsk\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*tbm_blcs_<mode>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+        (ior:SWI48\n+          (plus:SWI48\n+            (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n+            (const_int 1))\n+          (match_dup 1)))\n+   (clobber (reg:CC FLAGS_REG))]\n+   \"TARGET_TBM\"\n+   \"blcs\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*tbm_blsfill_<mode>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+        (ior:SWI48\n+          (plus:SWI48\n+            (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n+            (const_int -1))\n+          (match_dup 1)))\n+   (clobber (reg:CC FLAGS_REG))]\n+   \"TARGET_TBM\"\n+   \"blsfill\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*tbm_blsic_<mode>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+        (ior:SWI48\n+          (plus:SWI48\n+            (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n+            (const_int -1))\n+          (not:SWI48\n+            (match_dup 1))))\n+   (clobber (reg:CC FLAGS_REG))]\n+   \"TARGET_TBM\"\n+   \"blsic\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*tbm_t1mskc_<mode>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+        (ior:SWI48\n+          (plus:SWI48\n+            (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n+            (const_int 1))\n+          (not:SWI48\n+            (match_dup 1))))\n+   (clobber (reg:CC FLAGS_REG))]\n+   \"TARGET_TBM\"\n+   \"t1mskc\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*tbm_tzmsk_<mode>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+        (and:SWI48\n+          (plus:SWI48\n+            (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n+            (const_int -1))\n+          (not:SWI48\n+            (match_dup 1))))\n+   (clobber (reg:CC FLAGS_REG))]\n+   \"TARGET_TBM\"\n+   \"tzmsk\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"bsr_rex64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(minus:DI (const_int 63)"}, {"sha": "aa1d615f7ef8a460e82b05a9fb2251b5e7ba1b1b", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -362,6 +362,10 @@ mbmi\n Target Report Mask(ISA_BMI) Var(ix86_isa_flags) Save\n Support BMI built-in functions and code generation\n \n+mtbm\n+Target Report Mask(ISA_TBM) Var(ix86_isa_flags) Save\n+Support TBM built-in functions and code generation\n+\n mcx16\n Target Report Mask(ISA_CX16) Var(ix86_isa_flags) Save\n Support code generation of cmpxchg16b instruction."}, {"sha": "8d2431d41cd1a9f84f5effba3bb9e0c77132653f", "filename": "gcc/config/i386/tbmintrin.h", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Fconfig%2Fi386%2Ftbmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Fconfig%2Fi386%2Ftbmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ftbmintrin.h?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -0,0 +1,191 @@\n+/* Copyright (C) 2010 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _X86INTRIN_H_INCLUDED\n+# error \"Never use <tbmintrin.h> directly; include <x86intrin.h> instead.\"\n+#endif\n+\n+#ifndef __TBM__\n+# error \"TBM instruction set not enabled\"\n+#endif /* __TBM__ */\n+\n+#ifndef _TBMINTRIN_H_INCLUDED\n+#define _TBMINTRIN_H_INCLUDED\n+\n+#ifdef __OPTIMIZE__\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__bextri_u32 (unsigned int __X, const unsigned int __I)\n+{\n+\treturn __builtin_ia32_bextri_u32 (__X, __I);\n+}\n+#else\n+#define __bextri_u32(X, I)                                           \\\n+        ((unsigned int)__builtin_ia32_bextri_u32 ((unsigned int)(X), \\\n+\t                                          (unsigned int)(I)))\n+#endif /*__OPTIMIZE__ */\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blcfill_u32 (unsigned int __X)\n+{\n+\tunsigned int tmp = (__X) & ((__X) + 1);\n+\treturn tmp;\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blci_u32 (unsigned int __X)\n+{\n+\tunsigned int tmp = (__X) | (~((__X) + 1));\n+\treturn tmp;\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blcic_u32 (unsigned int __X)\n+{\n+\tunsigned int tmp = (~(__X)) & ((__X) + 1);\n+\treturn tmp;\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blcmsk_u32 (unsigned int __X)\n+{\n+\tunsigned int tmp = (__X) ^ ((__X) + 1);\n+\treturn tmp;\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blcs_u32 (unsigned int __X)\n+{\n+\tunsigned int tmp = (__X) | ((__X) + 1);\n+\treturn tmp;\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blsfill_u32 (unsigned int __X)\n+{\n+\tunsigned int tmp = (__X) | ((__X) - 1);\n+\treturn tmp;\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blsic_u32 (unsigned int __X)\n+{\n+\tunsigned int tmp = (~(__X)) | ((__X) - 1);\n+\treturn tmp;\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__t1mskc_u32 (unsigned int __X)\n+{\n+\tunsigned int tmp = (~(__X)) | ((__X) + 1);\n+\treturn tmp;\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__tzmsk_u32 (unsigned int __X)\n+{\n+\tunsigned int tmp = (~(__X)) & ((__X) - 1);\n+\treturn tmp;\n+}\n+\n+\n+\n+#ifdef __x86_64__\n+#ifdef __OPTIMIZE__\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__bextri_u64 (unsigned long long __X, const unsigned int __I)\n+{\n+\treturn __builtin_ia32_bextri_u64 (__X, __I);\n+}\n+#else\n+#define __bextri_u64(X, I)                                                       \\\n+        ((unsigned long long)__builtin_ia32_bextri_u64 ((unsigned long long)(X), \\\n+\t                                                (unsigned long long)(I)))\n+#endif /*__OPTIMIZE__ */\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blcfill_u64 (unsigned long long __X)\n+{\n+\tunsigned long long tmp = (__X) & ((__X) + 1);\n+\treturn tmp;\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blci_u64 (unsigned long long __X)\n+{\n+\tunsigned long long tmp = (__X) | (~((__X) + 1));\n+\treturn tmp;\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blcic_u64 (unsigned long long __X)\n+{\n+\tunsigned long long tmp = (~(__X)) & ((__X) + 1);\n+\treturn tmp;\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blcmsk_u64 (unsigned long long __X)\n+{\n+\tunsigned long long tmp = (__X) ^ ((__X) + 1);\n+\treturn tmp;\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blcs_u64 (unsigned long long __X)\n+{\n+\tunsigned long long tmp = (__X) | ((__X) + 1);\n+\treturn tmp;\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blsfill_u64 (unsigned long long __X)\n+{\n+\tunsigned long long tmp = (__X) | ((__X) - 1);\n+\treturn tmp;\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blsic_u64 (unsigned long long __X)\n+{\n+\tunsigned long long tmp = (~(__X)) | ((__X) - 1);\n+\treturn tmp;\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__t1mskc_u64 (unsigned long long __X)\n+{\n+\tunsigned long long tmp = (~(__X)) | ((__X) + 1);\n+\treturn tmp;\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__tzmsk_u64 (unsigned long long __X)\n+{\n+\tunsigned long long tmp = (~(__X)) & ((__X) - 1);\n+\treturn tmp;\n+}\n+\n+\n+#endif /* __x86_64__  */\n+#endif /* _TBMINTRIN_H_INCLUDED */\n+"}, {"sha": "72c41753dbe718c778c9cf73f86d2bd03355eedb", "filename": "gcc/config/i386/x86intrin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86intrin.h?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -85,6 +85,10 @@\n #include <bmiintrin.h>\n #endif\n \n+#ifdef __TBM__\n+#include <tbmintrin.h>\n+#endif\n+\n #ifdef __POPCNT__\n #include <popcntintrin.h>\n #endif"}, {"sha": "ccd0d914372d68b9eebf0079421ea04b08afe0be", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -9402,6 +9402,14 @@ unsigned int __builtin_ia32_lzcnt_u32(unsigned int);\n unsigned long long __builtin_ia32_lzcnt_u64 (unsigned long long);\n @end smallexample\n \n+The following built-in functions are available when @option{-mtbm} is used.\n+Both of them generate the immediate form of the bextr machine instruction.\n+@smallexample\n+unsigned int __builtin_ia32_bextri_u32 (unsigned int, const unsigned int);\n+unsigned long long __builtin_ia32_bextri_u64 (unsigned long long, const unsigned long long);\n+@end smallexample\n+\n+\n The following built-in functions are available when @option{-m3dnow} is used.\n All of them generate the machine instruction that is part of the name.\n "}, {"sha": "f19748391f669e662ebdaa6acd70bd275df72d25", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -598,7 +598,7 @@ Objective-C and Objective-C++ Dialects}.\n -mcld -mcx16 -msahf -mmovbe -mcrc32 -mrecip -mvzeroupper @gol\n -mmmx  -msse  -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 -mavx @gol\n -maes -mpclmul -mfsgsbase -mrdrnd -mf16c -mfused-madd @gol\n--msse4a -m3dnow -mpopcnt -mabm -mbmi -mfma4 -mxop -mlwp @gol\n+-msse4a -m3dnow -mpopcnt -mabm -mbmi -mtbm -mfma4 -mxop -mlwp @gol\n -mthreads  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically -mstringop-strategy=@var{alg} @gol\n -mpush-args  -maccumulate-outgoing-args  -m128bit-long-double @gol\n@@ -12452,6 +12452,8 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mno-abm\n @itemx -mbmi\n @itemx -mno-bmi\n+@itemx -mtbm\n+@itemx -mno-tbm\n @opindex mmmx\n @opindex mno-mmx\n @opindex msse"}, {"sha": "52507c0747e1781414e4faaf69c3a74b5aa0cc04", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -1,3 +1,18 @@\n+2010-11-10  Quentin Neill  <quentin.neill.gnu@gmail.com>\n+\n+\t* g++.dg/other/i386-2.C: Add -mtbm.\n+\t* g++.dg/other/i386-3.C: Likewise.\n+\t* gcc.target/i386/funcspec-5.c: Add tbm and no-tbm targets.\n+\t* gcc.target/i386/funcspec-6.c: Likewise.\n+\t* gcc.target/i386/sse-12.c: Add -mtbm.\n+\t* gcc.target/i386/sse-13.c: Add -mtbm and test immediate\n+\toperand intrinsics.\n+\t* gcc.target/i386/sse-14.c: Likewise.\n+\t* gcc.target/i386/sse-22.c: Likewise.\n+\t* gcc.target/i386/sse-23.c: Likewise.\n+\t* gcc.target/i386/tbm-1.c: New file.\n+\t* gcc.target/i386/tbm-2.c: Likewise.\n+\n 2010-11-10  Quentin Neill  <quentin.neill.gnu@gmail.com>\n \n \t* g++.dg/other/i386-2.C: Add -mbmi."}, {"sha": "6f7ca84ca804d7ae5a10d72e46b70f26d7ec8d5f", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -m3dnow -mavx -mxop -maes -mpclmul -mpopcnt -mabm -mbmi -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -m3dnow -mavx -mxop -maes -mpclmul -mpopcnt -mabm -mbmi -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, xopintrin.h, abmintrin.h,\n-   bmiintrin.h, lwpintrin.h, popcntintrin.h and mm3dnow.h are usable with\n-   -O -pedantic-errors.  */\n+   bmiintrin.h, tbmintrin.h, lwpintrin.h, popcntintrin.h and mm3dnow.h\n+   are usable with -O -pedantic-errors.  */\n \n #include <x86intrin.h>\n "}, {"sha": "a8b2039fe9606cc1ac77b7534aa9f8537b83a00b", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -m3dnow -mavx -mxop -maes -mpclmul -mpopcnt -mabm -mbmi -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -m3dnow -mavx -mxop -maes -mpclmul -mpopcnt -mabm -mbmi -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, xopintrin.h, abmintrin.h,\n-   bmiintrin.h, lwpintrin.h, popcntintrin.h and mm3dnow.h are usable with\n-   -O -fkeep-inline-functions.  */\n+   bmiintrin.h, tbmintrin.h, lwpintrin.h, popcntintrin.h and mm3dnow.h\n+   are usable with -O -fkeep-inline-functions.  */\n \n #include <x86intrin.h>"}, {"sha": "906bf217cc1dbe52b98f47dbdf9831c5ec766398", "filename": "gcc/testsuite/gcc.target/i386/bmi-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-5.c?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do link } */\n /* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O0 -mbmi\" } */\n+/* { dg-options \"-O2 -mbmi\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "a4489e0b5a697e0e9e5b96e9cb49208ab37f7476", "filename": "gcc/testsuite/gcc.target/i386/bmi-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-6.c?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do link } */\n-/* { dg-options \"-O0 -mbmi\" } */\n+/* { dg-options \"-O2 -mbmi\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "1e18dcf871fc58f06b9462c5feca7e335863c8e5", "filename": "gcc/testsuite/gcc.target/i386/funcspec-5.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-5.c?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -19,6 +19,7 @@ extern void test_sse4_2 (void)\t\t\t__attribute__((__target__(\"sse4.2\")));\n extern void test_sse4a (void)\t\t\t__attribute__((__target__(\"sse4a\")));\n extern void test_fma4 (void)\t\t\t__attribute__((__target__(\"fma4\")));\n extern void test_ssse3 (void)\t\t\t__attribute__((__target__(\"ssse3\")));\n+extern void test_tbm (void)\t\t\t__attribute__((__target__(\"tbm\")));\n \n extern void test_no_abm (void)\t\t\t__attribute__((__target__(\"no-abm\")));\n extern void test_no_aes (void)\t\t\t__attribute__((__target__(\"no-aes\")));\n@@ -36,6 +37,7 @@ extern void test_no_sse4_2 (void)\t\t__attribute__((__target__(\"no-sse4.2\")));\n extern void test_no_sse4a (void)\t\t__attribute__((__target__(\"no-sse4a\")));\n extern void test_no_fma4 (void)\t\t\t__attribute__((__target__(\"no-fma4\")));\n extern void test_no_ssse3 (void)\t\t__attribute__((__target__(\"no-ssse3\")));\n+extern void test_no_tbm (void)\t\t\t__attribute__((__target__(\"no-tbm\")));\n \n extern void test_arch_i386 (void)\t\t__attribute__((__target__(\"arch=i386\")));\n extern void test_arch_i486 (void)\t\t__attribute__((__target__(\"arch=i486\")));"}, {"sha": "92a3cb52d7bd09b19dfd157c335e15831dc63db3", "filename": "gcc/testsuite/gcc.target/i386/funcspec-6.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-6.c?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -19,6 +19,7 @@ extern void test_sse4_2 (void)\t\t\t__attribute__((__target__(\"sse4.2\")));\n extern void test_sse4a (void)\t\t\t__attribute__((__target__(\"sse4a\")));\n extern void test_fma4 (void)\t\t\t__attribute__((__target__(\"fma4\")));\n extern void test_ssse3 (void)\t\t\t__attribute__((__target__(\"ssse3\")));\n+extern void test_tbm (void)\t\t\t__attribute__((__target__(\"tbm\")));\n \n extern void test_no_abm (void)\t\t\t__attribute__((__target__(\"no-abm\")));\n extern void test_no_aes (void)\t\t\t__attribute__((__target__(\"no-aes\")));\n@@ -36,6 +37,7 @@ extern void test_no_sse4_2 (void)\t\t__attribute__((__target__(\"no-sse4.2\")));\n extern void test_no_sse4a (void)\t\t__attribute__((__target__(\"no-sse4a\")));\n extern void test_no_fma4 (void)\t\t\t__attribute__((__target__(\"no-fma4\")));\n extern void test_no_ssse3 (void)\t\t__attribute__((__target__(\"no-ssse3\")));\n+extern void test_no_tbm (void)\t\t\t__attribute__((__target__(\"no-tbm\")));\n \n extern void test_arch_nocona (void)\t\t__attribute__((__target__(\"arch=nocona\")));\n extern void test_arch_core2 (void)\t\t__attribute__((__target__(\"arch=core2\")));"}, {"sha": "fb53c3c5071e6ee6ab11f450be2490b7233a1fa6", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -1,9 +1,9 @@\n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, xopintrin.h, mm3dnow.h,\n-   fma4intrin.h, abmintrin.h, bmiintrin.h, lwpintrin.h,\n+   fma4intrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,\n    popcntintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mbmi -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mbmi -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "6d84e3a1bb8c15f7979002e5ad76f6ae6ac18d5c", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -5,9 +5,9 @@\n \n /* Test that the intrinsics compile with optimization.  All of them\n    are defined as inline functions in {,x,e,p,t,s,w,a,b,i}mmintrin.h,\n-   xopintrin.h, abmintrin.h, lwpintrin.h, popcntintrin.h and mm3dnow.h\n-   that reference the proper builtin functions.  Defining away\n-   \"extern\" and \"__inline\" results in all of them being compiled as\n+   xopintrin.h, abmintrin.h, tbmintrin.h, lwpintrin.h, popcntintrin.h\n+   and mm3dnow.h that reference the proper builtin functions.  Defining\n+   away \"extern\" and \"__inline\" results in all of them being compiled as\n    proper functions.  */\n \n #define extern\n@@ -141,4 +141,9 @@\n #define __builtin_ia32_lwpins32(D2, D1, F) __builtin_ia32_lwpins32 (D2, D1, 1)\n #define __builtin_ia32_lwpins64(D2, D1, F) __builtin_ia32_lwpins64 (D2, D1, 1)\n \n+/* tbmintrin.h */\n+#define __builtin_ia32_bextri_u32(X, Y) __builtin_ia32_bextri_u32 (X, 1)\n+#define __builtin_ia32_bextri_u64(X, Y) __builtin_ia32_bextri_u64 (X, 1)\n+\n+\n #include <x86intrin.h>"}, {"sha": "41bde1ba2f948628c6abc8600d33c272074ea3bd", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mxop -msse4a -maes -mpclmul -mpopcnt -mabm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mxop -msse4a -maes -mpclmul -mpopcnt -mabm -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n \n #include <mm_malloc.h>\n \n@@ -177,3 +177,9 @@ test_2 ( __lwpins32, unsigned char, unsigned int, unsigned int, 1)\n test_2 ( __lwpval64, void, unsigned long long, unsigned int, 1)\n test_2 ( __lwpins64, unsigned char, unsigned long long, unsigned int, 1)\n #endif\n+\n+/* tbmintrin.h */\n+test_1 ( __bextri_u32, unsigned int, unsigned int, 1)\n+#ifdef __x86_64__\n+test_1 ( __bextri_u64, unsigned long long, unsigned long long, 1)\n+#endif"}, {"sha": "e28164d080de667361470b27cc12e533b78ffb27", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -6,10 +6,10 @@\n \n /* Test that the intrinsics compile without optimization.  All of them\n    are defined as inline functions in {,x,e,p,t,s,w,a}mmintrin.h,\n-   xopintrin.h, lwpintrin.h, popcntintrin.h and mm3dnow.h that\n-   reference the proper builtin functions.  Defining away \"extern\" and\n-   \"__inline\" results in all of them being compiled as proper\n-   functions.  */\n+   xopintrin.h, tbmintrin.h, lwpintrin.h, popcntintrin.h and\n+   mm3dnow.h that reference the proper builtin functions.  Defining\n+   away \"extern\" and \"__inline\" results in all of them being compiled as\n+   proper functions.  */\n \n #define extern\n #define __inline\n@@ -39,7 +39,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"mmx,3dnow,sse,sse2,sse3,ssse3,sse4.1,sse4.2,sse4a,aes,pclmul,xop,popcnt,abm,lwp,fsgsbase,rdrnd,f16c\")\n+#pragma GCC target (\"mmx,3dnow,sse,sse2,sse3,ssse3,sse4.1,sse4.2,sse4a,aes,pclmul,xop,popcnt,abm,lwp,fsgsbase,rdrnd,f16c,tbm\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -188,3 +188,13 @@ test_2 ( __lwpins64, unsigned char, unsigned long long, unsigned int, 1)\n test_1 (_cvtss_sh, unsigned short, float, 1)\n test_1 (_mm_cvtps_ph, __m128i, __m128, 1)\n test_1 (_mm256_cvtps_ph, __m128i, __m256, 1)\n+\n+/* tbmintrin.h (TBM). */\n+#ifdef DIFFERENT_PRAGMAS\n+#pragma GCC target (\"tbm\")\n+#endif\n+#include <x86intrin.h>\n+test_1 ( __bextri_u32, unsigned int, unsigned int, 1)\n+#ifdef __x86_64__\n+test_1 ( __bextri_u64, unsigned long long, unsigned long long, 1)\n+#endif"}, {"sha": "3d932e16bbf04a163237fb00c5fc1a74aaad0684", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -5,9 +5,9 @@\n \n /* Test that the intrinsics compile with optimization.  All of them\n    are defined as inline functions in {,x,e,p,t,s,w,a}mmintrin.h,\n-   xopintrin.h, lwpintrin.h, popcntintrin.h and mm3dnow.h that\n-   reference the proper builtin functions.  Defining away \"extern\" and\n-   \"__inline\" results in all of them being compiled as proper\n+   xopintrin.h, lwpintrin.h, tbmintrin.h, popcntintrin.h and mm3dnow.h\n+   that reference the proper builtin functions.  Defining away \"extern\"\n+   and \"__inline\" results in all of them being compiled as proper\n    functions.  */\n \n #define extern\n@@ -141,7 +141,11 @@\n #define __builtin_ia32_lwpins32(D2, D1, F) __builtin_ia32_lwpins32 (D2, D1, 1)\n #define __builtin_ia32_lwpins64(D2, D1, F) __builtin_ia32_lwpins64 (D2, D1, 1)\n \n-#pragma GCC target (\"3dnow,sse4,sse4a,aes,pclmul,xop,abm,popcnt,lwp,fsgsbase,rdrnd,f16c\")\n+/* tbmintrin.h */\n+#define __builtin_ia32_bextri_u32(X, Y) __builtin_ia32_bextr_u32 (X, 1)\n+#define __builtin_ia32_bextri_u64(X, Y) __builtin_ia32_bextr_u64 (X, 1)\n+\n+#pragma GCC target (\"3dnow,sse4,sse4a,aes,pclmul,xop,abm,popcnt,lwp,tbm,fsgsbase,rdrnd,f16c\")\n #include <wmmintrin.h>\n #include <smmintrin.h>\n #include <mm3dnow.h>"}, {"sha": "2c16d74db49969a2f283cba2a2b3b3e3ced71b4d", "filename": "gcc/testsuite/gcc.target/i386/tbm-1.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftbm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftbm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftbm-1.c?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtbm\" } */\n+/* { dg-final { scan-assembler \"bextr\\[^\\\\n]*(%|)eax\" } } */\n+/* { dg-final { scan-assembler \"blcfill\\[^\\\\n]*(%|)eax\" } } */\n+/* { dg-final { scan-assembler \"blci\\[^\\\\n]*(%|)eax\" } } */\n+/* { dg-final { scan-assembler \"blcic\\[^\\\\n]*(%|)eax\" } } */\n+/* { dg-final { scan-assembler \"blcmsk\\[^\\\\n]*(%|)eax\" } } */\n+/* { dg-final { scan-assembler \"blcs\\[^\\\\n]*(%|)eax\" } } */\n+/* { dg-final { scan-assembler \"blsfill\\[^\\\\n]*(%|)eax\" } } */\n+/* { dg-final { scan-assembler \"blsic\\[^\\\\n]*(%|)eax\" } } */\n+/* { dg-final { scan-assembler \"t1mskc\\[^\\\\n]*(%|)eax\" } } */\n+/* { dg-final { scan-assembler \"tzmsk\\[^\\\\n]*(%|)eax\" } } */\n+\n+#include <x86intrin.h>\n+\n+unsigned int\n+func_bextri32 (unsigned int X)\n+{\n+  return __bextri_u32 (X, 0x101);\n+}\n+\n+unsigned int\n+func_blcfill32 (unsigned int X)\n+{\n+  return __blcfill_u32 (X);\n+}\n+\n+unsigned int\n+func_blci32 (unsigned int X)\n+{\n+  return __blci_u32 (X);\n+}\n+\n+unsigned int\n+func_blcic32 (unsigned int X)\n+{\n+  return __blcic_u32 (X);\n+}\n+\n+unsigned int\n+func_blcmsk32 (unsigned int X)\n+{\n+  return __blcmsk_u32 (X);\n+}\n+\n+unsigned int\n+func_blcs32 (unsigned int X)\n+{\n+  return __blcs_u32 (X);\n+}\n+\n+unsigned int\n+func_blsfill32 (unsigned int X)\n+{\n+  return __blsfill_u32 (X);\n+}\n+\n+unsigned int\n+func_blsic32 (unsigned int X)\n+{\n+  return __blsic_u32 (X);\n+}\n+\n+unsigned int\n+func_t1mskc32 (unsigned int X)\n+{\n+  return __t1mskc_u32 (X);\n+}\n+\n+unsigned int\n+func_tzmsk32 (unsigned int X)\n+{\n+  return __tzmsk_u32 (X);\n+}"}, {"sha": "447e0ab66c6c7a99d46c10a78022063a9214f1c9", "filename": "gcc/testsuite/gcc.target/i386/tbm-2.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftbm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94d13ad18df325e53e10c4ed44dde8b60c4f6708/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftbm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftbm-2.c?ref=94d13ad18df325e53e10c4ed44dde8b60c4f6708", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mtbm\" } */\n+/* { dg-final { scan-assembler \"bextr\\[^\\\\n]*(%|)rax\" } } */\n+/* { dg-final { scan-assembler \"blcfill\\[^\\\\n]*(%|)rax\" } } */\n+/* { dg-final { scan-assembler \"blci\\[^\\\\n]*(%|)rax\" } } */\n+/* { dg-final { scan-assembler \"blcic\\[^\\\\n]*(%|)rax\" } } */\n+/* { dg-final { scan-assembler \"blcmsk\\[^\\\\n]*(%|)rax\" } } */\n+/* { dg-final { scan-assembler \"blcs\\[^\\\\n]*(%|)rax\" } } */\n+/* { dg-final { scan-assembler \"blsfill\\[^\\\\n]*(%|)rax\" } } */\n+/* { dg-final { scan-assembler \"blsic\\[^\\\\n]*(%|)rax\" } } */\n+/* { dg-final { scan-assembler \"t1mskc\\[^\\\\n]*(%|)rax\" } } */\n+/* { dg-final { scan-assembler \"tzmsk\\[^\\\\n]*(%|)rax\" } } */\n+\n+#include <x86intrin.h>\n+\n+unsigned long long\n+func_bextri64 (unsigned long long X)\n+{\n+  return __bextri_u64 (X, 0x101);\n+}\n+\n+unsigned long long\n+func_blcfill64 (unsigned long long X)\n+{\n+  return __blcfill_u64 (X);\n+}\n+\n+unsigned long long\n+func_blci64 (unsigned long long X)\n+{\n+  return __blci_u64 (X);\n+}\n+\n+unsigned long long\n+func_blcic64 (unsigned long long X)\n+{\n+  return __blcic_u64 (X);\n+}\n+\n+unsigned long long\n+func_blcmsk64 (unsigned long long X)\n+{\n+  return __blcmsk_u64 (X);\n+}\n+\n+unsigned long long\n+func_blcs64 (unsigned long long X)\n+{\n+  return __blcs_u64 (X);\n+}\n+\n+unsigned long long\n+func_blsfill64 (unsigned long long X)\n+{\n+  return __blsfill_u64 (X);\n+}\n+\n+unsigned long long\n+func_blsic64 (unsigned long long X)\n+{\n+  return __blsic_u64 (X);\n+}\n+\n+unsigned long long\n+func_t1mskc64 (unsigned long long X)\n+{\n+  return __t1mskc_u64 (X);\n+}\n+\n+unsigned long long\n+func_tzmsk64 (unsigned long long X)\n+{\n+  return __tzmsk_u64 (X);\n+}"}]}