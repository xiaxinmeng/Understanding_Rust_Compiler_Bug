{"sha": "af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3", "node_id": "C_kwDOANBUbNoAKGFmMjg1MmI5ZGMzYjFkOWVmMjBkNzJkMjBkZTVhMmY3OTM4Yjg3YjM", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-13T00:16:39Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-13T00:16:39Z"}, "message": "Daily bump.", "tree": {"sha": "ebc0dd13d50ab2b0d32c1237293385f31e86c96f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebc0dd13d50ab2b0d32c1237293385f31e86c96f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3/comments", "author": null, "committer": null, "parents": [{"sha": "1bac7d31a1276f06bfa6cd3fae775b0ad7fec164", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bac7d31a1276f06bfa6cd3fae775b0ad7fec164", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bac7d31a1276f06bfa6cd3fae775b0ad7fec164"}], "stats": {"total": 460, "additions": 459, "deletions": 1}, "files": [{"sha": "4b8570bc9741febcde17b3bfd9bbae8f8918b525", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3", "patch": "@@ -1,3 +1,8 @@\n+2021-11-12  Alan Modra  <amodra@gmail.com>\n+\n+\t* Makefile.def (configure-opcodes): Depend on configure-bfd.\n+\t* Makefile.in: Regenerate.\n+\n 2021-11-03  Maciej W. Rozycki  <macro@embecosm.com>\n \n \t* MAINTAINERS: Clarify the policy WRT the Write After Approval"}, {"sha": "6767e5348e826393c37891e31504f09f16644c59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 226, "deletions": 0, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3", "patch": "@@ -1,3 +1,229 @@\n+2021-11-12  Stafford Horne  <shorne@gmail.com>\n+\n+\t* config/or1k/or1k-protos.h (or1k_profile_hook): New function.\n+\t* config/or1k/or1k.h (PROFILE_HOOK): Change macro to reference\n+\tnew function or1k_profile_hook.\n+\t* config/or1k/or1k.c (struct machine_function): Add new field\n+\tset_mcount_arg_insn.\n+\t(or1k_profile_hook): New function.\n+\t(or1k_init_pic_reg): Update to inject pic rtx after _mcount arg\n+\twhen profiling.\n+\t(or1k_frame_pointer_required): Frame pointer no longer needed\n+\twhen profiling.\n+\n+2021-11-12  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimization/103209\n+\t* tree-ssa-structalias.c (find_func_aliases_for_call): Fix\n+\tuse of handle_rhs_call\n+\n+2021-11-12  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/103202\n+\t* gimple-range-path.cc\n+\t(path_range_query::compute_ranges_in_block): Solve PHI imports first.\n+\n+2021-11-12  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-pure-const.c (propagate_pure_const): Remove redundant check;\n+\tfix call of ipa_make_function_const and ipa_make_function_pure.\n+\n+2021-11-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_vector_op::n_advsimd_ops): Delete.\n+\t(aarch64_vector_op::m_seen_loads): Likewise.\n+\t(aarch64_vector_costs::aarch64_vector_costs): Don't push to\n+\tm_advsimd_ops.\n+\t(aarch64_vector_op::count_ops): Remove vectype and factor parameters.\n+\tRemove code that tries to predict different vec_flags from the\n+\tcurrent loop's.\n+\t(aarch64_vector_costs::add_stmt_cost): Update accordingly.\n+\tRemove m_advsimd_ops handling.\n+\n+2021-11-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_vector_costs::m_saw_sve_only_op)\n+\t(aarch64_sve_only_stmt_p): Delete.\n+\t(aarch64_vector_costs::prefer_unrolled_loop): New function,\n+\textracted from adjust_body_cost.\n+\t(aarch64_vector_costs::better_main_loop_than_p): New function,\n+\tusing heuristics extracted from adjust_body_cost and\n+\tadjust_body_cost_sve.\n+\t(aarch64_vector_costs::adjust_body_cost_sve): Remove\n+\tadvsimd_cycles_per_iter and could_use_advsimd parameters.\n+\tUpdate after changes above.\n+\t(aarch64_vector_costs::adjust_body_cost): Update after changes above.\n+\n+2021-11-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_vec_op_count::m_vf_factor):\n+\tNew member variable.\n+\t(aarch64_vec_op_count::aarch64_vec_op_count): Add a parameter for it.\n+\t(aarch64_vec_op_count::vf_factor): New function.\n+\t(aarch64_vector_costs::aarch64_vector_costs): When costing for\n+\tneoverse-512tvb, pass a vf_factor of 2 for the Neoverse V1 version\n+\tof an SVE loop.\n+\t(aarch64_vector_costs::adjust_body_cost): Read the vf factor\n+\tinstead of hard-coding 2.\n+\n+2021-11-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c\n+\t(aarch64_vec_op_count::rename_cycles_per_iter): New function.\n+\t(aarch64_vec_op_count::min_nonpred_cycles_per_iter): Likewise.\n+\t(aarch64_vec_op_count::min_pred_cycles_per_iter): Likewise.\n+\t(aarch64_vec_op_count::min_cycles_per_iter): Likewise.\n+\t(aarch64_vec_op_count::dump): Move earlier in file.  Dump the\n+\tabove properties too.\n+\t(aarch64_estimate_min_cycles_per_iter): Delete.\n+\t(adjust_body_cost): Use aarch64_vec_op_count::min_cycles_per_iter\n+\tinstead of aarch64_estimate_min_cycles_per_iter.  Rely on the dump\n+\troutine to print CPI estimates.\n+\t(adjust_body_cost_sve): Likewise.  Use the other functions above\n+\tinstead of doing the work inline.\n+\n+2021-11-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_vec_op_count): Allow default\n+\tinitialization.\n+\t(aarch64_vec_op_count::base_issue_info): Remove handling of null\n+\tissue_infos.\n+\t(aarch64_vec_op_count::simd_issue_info): Likewise.\n+\t(aarch64_vec_op_count::sve_issue_info): Likewise.\n+\t(aarch64_vector_costs::m_ops): Turn into a vector.\n+\t(aarch64_vector_costs::m_advsimd_ops): Likewise.\n+\t(aarch64_vector_costs::aarch64_vector_costs): Add entries to\n+\tthe vectors based on aarch64_tune_params.\n+\t(aarch64_vector_costs::analyze_loop_vinfo): Update the pred_ops\n+\tof all entries in m_ops.\n+\t(aarch64_vector_costs::add_stmt_cost): Call count_ops for all\n+\tentries in m_ops.\n+\t(aarch64_estimate_min_cycles_per_iter): Remove issue_info\n+\tparameter and get the information from the ops instead.\n+\t(aarch64_vector_costs::adjust_body_cost_sve): Take a\n+\taarch64_vec_issue_info instead of a aarch64_vec_op_count.\n+\t(aarch64_vector_costs::adjust_body_cost): Update call accordingly.\n+\tExit earlier if m_ops is empty for either cost structure.\n+\n+2021-11-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_vector_costs::m_scalar_ops)\n+\t(aarch64_vector_costs::m_sve_ops): Replace with...\n+\t(aarch64_vector_costs::m_ops): ...this.\n+\t(aarch64_vector_costs::analyze_loop_vinfo): Update accordingly.\n+\t(aarch64_vector_costs::adjust_body_cost_sve): Likewise.\n+\t(aarch64_vector_costs::aarch64_vector_costs): Likewise.\n+\tInitialize m_vec_flags here rather than in add_stmt_cost.\n+\t(aarch64_vector_costs::count_ops): Test for scalar reductions too.\n+\tAllow vectype to be null.\n+\t(aarch64_vector_costs::add_stmt_cost): Call count_ops for scalar\n+\tcode too.  Don't require vectype to be nonnull.\n+\t(aarch64_vector_costs::adjust_body_cost): Take the loop_vec_info\n+\tand scalar costs as parameters.  Use the scalar costs to determine\n+\tthe cycles per iteration of the scalar loop, then multiply it\n+\tby the estimated VF.\n+\t(aarch64_vector_costs::finish_cost): Update call accordingly.\n+\n+2021-11-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_dr_type): New function.\n+\t(aarch64_vector_costs::count_ops): Use it rather than the\n+\tvectype to determine floatness.\n+\n+2021-11-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_sve_in_loop_reduction_latency):\n+\tRemove vectype parameter and get floatness from the type of the\n+\tstmt lhs instead.\n+\t(arch64_in_loop_reduction_latency): Likewise.\n+\t(aarch64_detect_vector_stmt_subtype): Update caller.\n+\t(aarch64_vector_costs::count_ops): Likewise.\n+\n+2021-11-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_sve_op_count): Fold into...\n+\t(aarch64_vec_op_count): ...this.  Add a constructor.\n+\t(aarch64_vec_op_count::vec_flags): New function.\n+\t(aarch64_vec_op_count::base_issue_info): Likewise.\n+\t(aarch64_vec_op_count::simd_issue_info): Likewise.\n+\t(aarch64_vec_op_count::sve_issue_info): Likewise.\n+\t(aarch64_vec_op_count::m_issue_info): New member variable.\n+\t(aarch64_vec_op_count::m_vec_flags): Likewise.\n+\t(aarch64_vector_costs): Add a constructor.\n+\t(aarch64_vector_costs::m_sve_ops): Change type to aarch64_vec_op_count.\n+\t(aarch64_vector_costs::aarch64_vector_costs): New function.\n+\tInitialize m_scalar_ops, m_advsimd_ops and m_sve_ops.\n+\t(aarch64_vector_costs::count_ops): Remove vec_flags and\n+\tissue_info parameters, using the new aarch64_vec_op_count\n+\tfunctions instead.\n+\t(aarch64_vector_costs::add_stmt_cost): Update call accordingly.\n+\t(aarch64_sve_op_count::dump): Fold into...\n+\t(aarch64_vec_op_count::dump): ..here.\n+\n+2021-11-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c: Include tree-dfa.h.\n+\t(aarch64_check_consecutive_mems): New function that takes MEM_EXPR\n+\tand MEM_OFFSET into account.\n+\t(aarch64_swap_ldrstr_operands): Use it.\n+\t(aarch64_operands_ok_for_ldpstp): Likewise.  Check that the\n+\taddress of the second memory doesn't depend on the result of\n+\tthe first load.\n+\n+2021-11-12  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-pure-const.c (ipa_make_function_pure): Fix exit condition.\n+\n+2021-11-12  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimization/103175\n+\t* ipa-modref.c (modref_lattice::merge): Add sanity check.\n+\t(callee_to_caller_flags): Make flags adjustment sane.\n+\t(modref_eaf_analysis::analyze_ssa_name): Likewise.\n+\n+2021-11-12  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR ipa/103200\n+\t* ipa-modref.c (analyze_function, modref_propagate_in_scc): Do\n+\tnot mark pure/const function if there are side-effects.\n+\n+2021-11-12  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* tree.h (OMP_CLAUSE_MAP_RUNTIME_IMPLICIT_P): New access macro for\n+\t'implicit' bit, using 'base.deprecated_flag' field of tree_node.\n+\t* tree-pretty-print.c (dump_omp_clause): Add support for printing\n+\timplicit attribute in tree dumping.\n+\t* gimplify.c (gimplify_adjust_omp_clauses_1):\n+\tSet OMP_CLAUSE_MAP_RUNTIME_IMPLICIT_P to 1 if map clause is implicitly\n+\tcreated.\n+\t(gimplify_adjust_omp_clauses): Adjust place of adding implicitly created\n+\tclauses, from simple append, to starting of list, after non-map clauses.\n+\t* omp-low.c (lower_omp_target): Add GOMP_MAP_IMPLICIT bits into kind\n+\tvalues passed to libgomp for implicit maps.\n+\n+2021-11-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp-builtins.def (BUILT_IN_GOMP_TEAMS): Remove.\n+\t(BUILT_IN_GOMP_TEAMS4): New.\n+\t* builtin-types.def (BT_FN_VOID_UINT_UINT): Remove.\n+\t(BT_FN_BOOL_UINT_UINT_UINT_BOOL): New.\n+\t* omp-low.c (lower_omp_teams): Use GOMP_teams4 instead of\n+\tGOMP_teams, pass to it also num_teams lower-bound expression\n+\tor a dup of upper-bound if it is missing and a flag whether\n+\tit is the first call or not.\n+\n+2021-11-12  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/102497\n+\t* gimple-predicate-analysis.cc (add_pred): Remove unused\n+\tfunction:\n+\n+2021-11-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103204\n+\t* tree-ssa-sccvn.c (valueize_refs_1): Re-valueize the\n+\ttop operand after folding in an address.\n+\n 2021-11-11  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* gimple-range-path.cc (path_range_query::path_range_query): New"}, {"sha": "f0484966df27e534a163cd478e086d072619082c", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3", "patch": "@@ -1 +1 @@\n-20211112\n+20211113"}, {"sha": "f6bf272628443624826b737bf95887d47a835332", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3", "patch": "@@ -1,3 +1,8 @@\n+2021-11-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* engine.cc (exploded_node::on_stmt_pre): Return when handling\n+\t\"__analyzer_dump_state\".\n+\n 2021-11-11  Richard Biener  <rguenther@suse.de>\n \n \t* supergraph.cc: Include bitmap.h."}, {"sha": "0216f126dd953b4353f713d18714d5f98612ab33", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3", "patch": "@@ -1,3 +1,45 @@\n+2021-11-12  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* parse.c (decode_omp_directive): Fix permitting 'nowait' for some\n+\tcombined directives, add missing 'omp end ... loop'.\n+\t(gfc_ascii_statement): Fix ST_OMP_END_TEAMS_LOOP result.\n+\t* openmp.c (resolve_omp_clauses): Add missing combined loop constructs\n+\tcase values to the 'if(directive-name: ...)' check.\n+\t* trans-openmp.c (gfc_split_omp_clauses): Put nowait on target if\n+\tfirst leaf construct accepting it.\n+\n+2021-11-12  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* trans-types.c (gfc_get_array_descr_info): Use build_debug_expr_decl\n+\tinstead of building DEBUG_EXPR_DECL manually.\n+\n+2021-11-12  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/97896\n+\t* intrinsic.c (add_sym_4ind): Remove.\n+\t(add_functions): Use add_sym4 instead of add_sym4ind.\n+\tDon\u2019t special case the index intrinsic.\n+\t* iresolve.c (gfc_resolve_index_func): Use the individual arguments\n+\tdirectly instead of the full argument list.\n+\t* intrinsic.h (gfc_resolve_index_func): Update the declaration\n+\taccordingly.\n+\t* trans-decl.c (gfc_get_extern_function_decl): Don\u2019t modify the\n+\tlist of arguments in the case of the index intrinsic.\n+\t* trans-array.h (gfc_get_intrinsic_for_expr,\n+\tgfc_get_proc_ifc_for_expr): New.\n+\t* trans-array.c (gfc_get_intrinsic_for_expr,\n+\targ_evaluated_for_scalarization): New.\n+\t(gfc_walk_elemental_function_args): Add intrinsic procedure\n+\tas argument.  Count arguments.  Check arg_evaluated_for_scalarization.\n+\t* trans-intrinsic.c (gfc_walk_intrinsic_function): Update call.\n+\t* trans-stmt.c (get_intrinsic_for_code): New.\n+\t(gfc_trans_call): Update call.\n+\n+2021-11-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* types.def (BT_FN_VOID_UINT_UINT): Remove.\n+\t(BT_FN_BOOL_UINT_UINT_UINT_BOOL): New.\n+\n 2021-11-11  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* gfortran.h (struct gfc_omp_clauses): Rename num_teams to"}, {"sha": "d7f7cc5dd9cae854b603b9055b942beed19a3429", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3", "patch": "@@ -1,3 +1,11 @@\n+2021-11-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/103199\n+\t* docs/examples/tut04-toyvm/toyvm.c (toyvm_function_compile):\n+\tIncrease size of buffer.\n+\t* docs/examples/tut04-toyvm/toyvm.cc\n+\t(compilation_state::create_function): Likewise.\n+\n 2021-09-10  Petter Tomner  <tomner@kth.se>\n \n \t* jit-playback.c: Moved global var processing to after loc handling."}, {"sha": "99120299b9c743e3a990d64a2136bb7ee134d3cb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3", "patch": "@@ -1,3 +1,44 @@\n+2021-11-12  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimization/103209\n+\t* gcc.dg/tree-ssa/pta-callused.c: Update template.\n+\t* gcc.c-torture/execute/pr103209.c: New test.\n+\n+2021-11-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/stp_1.c: New test.\n+\n+2021-11-12  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/unexpected-end.f90: Update dg-error.\n+\t* gfortran.dg/gomp/clauses-1.f90: New test.\n+\t* gfortran.dg/gomp/nowait-2.f90: New test.\n+\t* gfortran.dg/gomp/nowait-3.f90: New test.\n+\n+2021-11-12  Martin Liska  <mliska@suse.cz>\n+\n+\tPR testsuite/103051\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s112.c: Skip test for old Power\n+\tCPUs.\n+\n+2021-11-12  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* c-c++-common/gomp/target-implicit-map-1.c: New test.\n+\t* c-c++-common/goacc/combined-reduction.c: Adjust scan test pattern.\n+\t* c-c++-common/goacc/firstprivate-mappings-1.c: Likewise.\n+\t* c-c++-common/goacc/mdc-1.c: Likewise.\n+\t* g++.dg/goacc/firstprivate-mappings-1.C: Likewise.\n+\n+2021-11-12  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/97896\n+\t* gfortran.dg/index_5.f90: New.\n+\n+2021-11-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103204\n+\t* gcc.dg/torture/pr103204.c: New testcase.\n+\n 2021-11-11  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \t* gcc.target/powerpc/test_mffsl.c: Require Power9."}, {"sha": "67c067254bf8d3466b1a11736787d28aa61ea2eb", "filename": "include/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3", "patch": "@@ -1,3 +1,11 @@\n+2021-11-12  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* gomp-constants.h (GOMP_MAP_FLAG_SPECIAL_3): Define special bit macro.\n+\t(GOMP_MAP_IMPLICIT): New special map kind bits value.\n+\t(GOMP_MAP_FLAG_SPECIAL_BITS): Define helper mask for whole set of\n+\tspecial map kind bits.\n+\t(GOMP_MAP_IMPLICIT_P): New predicate macro for implicit map kinds.\n+\n 2021-11-05  Gerald Pfeifer  <gerald@pfeifer.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "983f81672fb1d1c7e9fd93b5dca273acc57dae2a", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3", "patch": "@@ -1,3 +1,10 @@\n+2021-11-12  Martin Liska  <mliska@suse.cz>\n+\n+\tPR libbacktrace/103167\n+\t* elf.c (elf_uncompress_lzma_block): Cast to unsigned int.\n+\t(elf_uncompress_lzma): Likewise.\n+\t* xztest.c (test_samples): memcpy only if v > 0.\n+\n 2021-10-22  Martin Liska  <mliska@suse.cz>\n \n \tPR testsuite/102742"}, {"sha": "ed26b8d543f52ab361cd4f9bf17c6bf63d606673", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3", "patch": "@@ -1,3 +1,34 @@\n+2021-11-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/103201\n+\t* config/gcn/icv-device.c (omp_get_num_teams, omp_get_team_num): Move\n+\tto ...\n+\t* config/gcn/teams.c: ... here.  New file.\n+\n+2021-11-12  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* target.c (gomp_map_vars_existing): Add 'bool implicit' parameter, add\n+\timplicit map handling to allow a \"superset\" existing map as valid case.\n+\t(get_kind): Adjust to filter out GOMP_MAP_IMPLICIT bits in return value.\n+\t(get_implicit): New function to extract implicit status.\n+\t(gomp_map_fields_existing): Adjust arguments in calls to\n+\tgomp_map_vars_existing, and add uses of get_implicit.\n+\t(gomp_map_vars_internal): Likewise.\n+\t* testsuite/libgomp.c-c++-common/target-implicit-map-1.c: New test.\n+\n+2021-11-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libgomp_g.h (GOMP_teams4): Declare.\n+\t* libgomp.map (GOMP_5.1): Export GOMP_teams4.\n+\t* target.c (GOMP_teams4): New function.\n+\t* config/nvptx/target.c (GOMP_teams): Remove.\n+\t(GOMP_teams4): New function.\n+\t* config/gcn/target.c (GOMP_teams): Remove.\n+\t(GOMP_teams4): New function.\n+\t* testsuite/libgomp.c/teams-4.c (main): Expect exactly 2\n+\tteams instead of <= 2.\n+\t* testsuite/libgomp.c-c++-common/teams-2.c: New test.\n+\n 2021-11-11  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* testsuite/libgomp.fortran/teams-1.f90: New test."}, {"sha": "34a130ea6686c8161b927efbe1c0984b83f50417", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=af2852b9dc3b1d9ef20d72d20de5a2f7938b87b3", "patch": "@@ -1,3 +1,88 @@\n+2021-11-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/59675\n+\t* acinclude.m4 (libtool_VERSION): Bump version.\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.30): Add version and\n+\texport new symbol.\n+\t* configure: Regenerate.\n+\t* include/bits/c++config (__replacement_assert): Remove, declare\n+\t__glibcxx_assert_fail instead.\n+\t* src/c++11/debug.cc (__glibcxx_assert_fail): New function to\n+\treplace __replacement_assert, writing to stderr instead of\n+\tstdout.\n+\t* testsuite/util/testsuite_abi.cc: Update latest version.\n+\n+2021-11-12  Jonathan Wakely  <jwakely@redhat.com>\n+\t    Josh Marshall  <joshua.r.marshall.1991@gmail.com>\n+\n+\t* include/bits/alloc_traits.h (_Destroy): Make constexpr for\n+\tC++20 mode.\n+\t* include/bits/allocator.h (__shrink_to_fit::_S_do_it):\n+\tLikewise.\n+\t* include/bits/stl_algobase.h (__fill_a1): Declare _Bit_iterator\n+\toverload constexpr for C++20.\n+\t* include/bits/stl_bvector.h (_Bit_type, _S_word_bit): Move out\n+\tof inline namespace.\n+\t(_Bit_reference, _Bit_iterator_base, _Bit_iterator)\n+\t(_Bit_const_iterator, _Bvector_impl_data, _Bvector_base)\n+\t(vector<bool, A>>): Add constexpr to every member function.\n+\t(_Bvector_base::_M_allocate): Initialize storage during constant\n+\tevaluation.\n+\t(vector<bool, A>::_M_initialize_value): Use __fill_bvector_n\n+\tinstead of memset.\n+\t(__fill_bvector_n): New helper function to replace memset during\n+\tconstant evaluation.\n+\t* include/bits/stl_uninitialized.h (__uninitialized_copy<false>):\n+\tMove logic to ...\n+\t(__do_uninit_copy): New function.\n+\t(__uninitialized_fill<false>): Move logic to ...\n+\t(__do_uninit_fill): New function.\n+\t(__uninitialized_fill_n<false>): Move logic to ...\n+\t(__do_uninit_fill_n): New function.\n+\t(__uninitialized_copy_a): Add constexpr. Use __do_uninit_copy.\n+\t(__uninitialized_move_a, __uninitialized_move_if_noexcept_a):\n+\tAdd constexpr.\n+\t(__uninitialized_fill_a): Add constexpr. Use __do_uninit_fill.\n+\t(__uninitialized_fill_n_a): Add constexpr. Use\n+\t__do_uninit_fill_n.\n+\t(__uninitialized_default_n, __uninitialized_default_n_a)\n+\t(__relocate_a_1, __relocate_a): Add constexpr.\n+\t* include/bits/stl_vector.h (_Vector_impl_data, _Vector_impl)\n+\t(_Vector_base, vector): Add constexpr to every member function.\n+\t(_Vector_impl::_S_adjust): Disable ASan annotation during\n+\tconstant evaluation.\n+\t(_Vector_base::_S_use_relocate): Disable bitwise-relocation\n+\tduring constant evaluation.\n+\t(vector::_Temporary_value): Use a union for storage.\n+\t* include/bits/vector.tcc (vector, vector<bool>): Add constexpr\n+\tto every member function.\n+\t* include/std/vector (erase_if, erase): Add constexpr.\n+\t* testsuite/23_containers/headers/vector/synopsis.cc: Add\n+\tconstexpr for C++20 mode.\n+\t* testsuite/23_containers/vector/bool/cmp_c++20.cc: Change to\n+\tcompile-only test using constant expressions.\n+\t* testsuite/23_containers/vector/bool/capacity/29134.cc: Adjust\n+\tnamespace for _S_word_bit.\n+\t* testsuite/23_containers/vector/bool/modifiers/insert/31370.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/cmp_c++20.cc: Likewise.\n+\t* testsuite/23_containers/vector/cons/89164.cc: Adjust errors\n+\tfor C++20 and move C++17 test to ...\n+\t* testsuite/23_containers/vector/cons/89164_c++17.cc: ... here.\n+\t* testsuite/23_containers/vector/bool/capacity/constexpr.cc: New test.\n+\t* testsuite/23_containers/vector/bool/cons/constexpr.cc: New test.\n+\t* testsuite/23_containers/vector/bool/element_access/constexpr.cc: New test.\n+\t* testsuite/23_containers/vector/bool/modifiers/assign/constexpr.cc: New test.\n+\t* testsuite/23_containers/vector/bool/modifiers/constexpr.cc: New test.\n+\t* testsuite/23_containers/vector/bool/modifiers/swap/constexpr.cc: New test.\n+\t* testsuite/23_containers/vector/capacity/constexpr.cc: New test.\n+\t* testsuite/23_containers/vector/cons/constexpr.cc: New test.\n+\t* testsuite/23_containers/vector/data_access/constexpr.cc: New test.\n+\t* testsuite/23_containers/vector/element_access/constexpr.cc: New test.\n+\t* testsuite/23_containers/vector/modifiers/assign/constexpr.cc: New test.\n+\t* testsuite/23_containers/vector/modifiers/constexpr.cc: New test.\n+\t* testsuite/23_containers/vector/modifiers/swap/constexpr.cc: New test.\n+\n 2021-11-11  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/debug/deque (deque::operator=(const deque&)): Remove"}]}