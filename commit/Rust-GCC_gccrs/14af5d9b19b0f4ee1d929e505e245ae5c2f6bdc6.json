{"sha": "14af5d9b19b0f4ee1d929e505e245ae5c2f6bdc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRhZjVkOWIxOWIwZjRlZTFkOTI5ZTUwNWUyNDVhZTVjMmY2YmRjNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-03-10T20:05:18Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-03-10T20:30:56Z"}, "message": "c++: Partially revert patch for PR66139.\n\nThe patch for 66139 exposed a long-standing bug with\nsplit_nonconstant_init (since 4.7, apparently): initializion of individual\nelements of an aggregate are not a full-expressions, but\nsplit_nonconstant_init was making full-expressions out of them.  My fix for\n66139 extended the use of split_nonconstant_init, and thus the bug, to\naggregate initialization of temporaries within an expression, in which\ncontext (PR94041) the bug is more noticeable.  PR93922 is a problem with my\nimplementation strategy of splitting out at gimplification time, introducing\nfunction calls that weren't in the GENERIC.  So I'm going to revert the\npatch now and try again for GCC 11.\n\ngcc/cp/ChangeLog\n2020-03-10  Jason Merrill  <jason@redhat.com>\n\n\tPR c++/93922\n\tPR c++/94041\n\tPR c++/52320\n\tPR c++/66139\n\t* cp-gimplify.c (cp_gimplify_init_expr): Partially revert patch for\n\t66139: Don't split_nonconstant_init.  Remove pre_p parameter.", "tree": {"sha": "bab7ae0a1629bb7174dcab14477047e93da64e87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bab7ae0a1629bb7174dcab14477047e93da64e87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14af5d9b19b0f4ee1d929e505e245ae5c2f6bdc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14af5d9b19b0f4ee1d929e505e245ae5c2f6bdc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14af5d9b19b0f4ee1d929e505e245ae5c2f6bdc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14af5d9b19b0f4ee1d929e505e245ae5c2f6bdc6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e00cb200f39d8144de226e76c5d0257b613dbbf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e00cb200f39d8144de226e76c5d0257b613dbbf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e00cb200f39d8144de226e76c5d0257b613dbbf6"}], "stats": {"total": 188, "additions": 11, "deletions": 177}, "files": [{"sha": "e62aefde0c70b6f15a2dd99c6bac18d7f6ece54a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14af5d9b19b0f4ee1d929e505e245ae5c2f6bdc6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14af5d9b19b0f4ee1d929e505e245ae5c2f6bdc6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=14af5d9b19b0f4ee1d929e505e245ae5c2f6bdc6", "patch": "@@ -1,3 +1,12 @@\n+2020-03-10  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/93922\n+\tPR c++/94041\n+\tPR c++/52320\n+\tPR c++/66139\n+\t* cp-gimplify.c (cp_gimplify_init_expr): Partially revert patch for\n+\t66139: Don't split_nonconstant_init.  Remove pre_p parameter.\n+\n 2020-03-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/92031 - bogus taking address of rvalue error."}, {"sha": "23a25e5797531db57d2f2b4a5f0bce3dc3a80692", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14af5d9b19b0f4ee1d929e505e245ae5c2f6bdc6/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14af5d9b19b0f4ee1d929e505e245ae5c2f6bdc6/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=14af5d9b19b0f4ee1d929e505e245ae5c2f6bdc6", "patch": "@@ -513,7 +513,7 @@ gimplify_expr_stmt (tree *stmt_p)\n /* Gimplify initialization from an AGGR_INIT_EXPR.  */\n \n static void\n-cp_gimplify_init_expr (tree *expr_p, gimple_seq *pre_p)\n+cp_gimplify_init_expr (tree *expr_p)\n {\n   tree from = TREE_OPERAND (*expr_p, 1);\n   tree to = TREE_OPERAND (*expr_p, 0);\n@@ -526,22 +526,6 @@ cp_gimplify_init_expr (tree *expr_p, gimple_seq *pre_p)\n   if (TREE_CODE (from) == TARGET_EXPR && TARGET_EXPR_INITIAL (from))\n     from = TARGET_EXPR_INITIAL (from);\n \n-  /* If we might need to clean up a partially constructed object, break down\n-     the CONSTRUCTOR with split_nonconstant_init.  */\n-  if (TREE_CODE (from) == CONSTRUCTOR\n-      && flag_exceptions\n-      && TREE_SIDE_EFFECTS (from)\n-      && TYPE_HAS_NONTRIVIAL_DESTRUCTOR (TREE_TYPE (to)))\n-    {\n-      gimplify_expr (&to, pre_p, NULL, is_gimple_lvalue, fb_lvalue);\n-      replace_placeholders (from, to);\n-      from = split_nonconstant_init (to, from);\n-      cp_genericize_tree (&from, false);\n-      copy_if_shared (&from);\n-      *expr_p = from;\n-      return;\n-    }\n-\n   /* Look through any COMPOUND_EXPRs, since build_compound_expr pushes them\n      inside the TARGET_EXPR.  */\n   for (t = from; t; )\n@@ -734,7 +718,7 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t LHS of an assignment might also be involved in the RHS, as in bug\n \t 25979.  */\n     case INIT_EXPR:\n-      cp_gimplify_init_expr (expr_p, pre_p);\n+      cp_gimplify_init_expr (expr_p);\n       if (TREE_CODE (*expr_p) != INIT_EXPR)\n \treturn GS_OK;\n       /* Fall through.  */"}, {"sha": "90dd8d70d63afad1024f3b6d0130266f7474a731", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist116.C", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e00cb200f39d8144de226e76c5d0257b613dbbf6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist116.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e00cb200f39d8144de226e76c5d0257b613dbbf6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist116.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist116.C?ref=e00cb200f39d8144de226e76c5d0257b613dbbf6", "patch": "@@ -1,29 +0,0 @@\n-// PR c++/66139\n-// { dg-do run { target c++11 } }\n-\n-int constructed = 0;\n-\n-class lock_guard_ext{\n-public:\n-  lock_guard_ext() { ++constructed; }\n-  ~lock_guard_ext() { --constructed; }\n-};\n- \n-struct Access {\n-  lock_guard_ext lock;\n-  int value;\n-};\n- \n-int t() {\n-  throw 0;\n-}\n-\n-Access foo1() {\n-  return { {}, t() };\n-}\n- \n-int main () {\n-  try { foo1(); } catch (int) {}\n-  if (constructed != 0)\n-    __builtin_abort();\n-}"}, {"sha": "415a5de2dd1d35cb72b6585bed69a2ede347451e", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist117.C", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e00cb200f39d8144de226e76c5d0257b613dbbf6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist117.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e00cb200f39d8144de226e76c5d0257b613dbbf6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist117.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist117.C?ref=e00cb200f39d8144de226e76c5d0257b613dbbf6", "patch": "@@ -1,40 +0,0 @@\n-// PR c++/66139\n-// { dg-do run { target c++11 } }\n-\n-#include <initializer_list>\n-\n-int c, d;\n-\n-struct a\n-{\n-  a (int i) { if (i) throw i; c++; }\n-  ~a () { d++; }\n-};\n-\n-void check (void (*f) ())\n-{\n-  try\n-  {\n-    c = d = 0;\n-    f ();\n-  }\n-  catch (int)\n-  {\n-    if (c != 1 || d != 1)\n-      __builtin_abort ();\n-    return;\n-  }\n-  __builtin_abort ();\n-}\n-\n-int main ()\n-{\n-  struct s { a x, y; };\n-  check ([] { s t { 0, 1 }; });\n-  check ([] { s { 0, 1 }; });\n-  check ([] { a t[2] { 0, 1 }; });\n-  using array = a[2];\n-  check ([] { array { 0, 1 }; });\n-  check ([] { std::initializer_list <a> t { 0, 1 }; });\n-  check ([] { std::initializer_list <a> { 0, 1 }; });\n-}"}, {"sha": "4d1f4f3edfc9d7a19e000f39dae06afd34b4a030", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-eh.C", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e00cb200f39d8144de226e76c5d0257b613dbbf6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-eh.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e00cb200f39d8144de226e76c5d0257b613dbbf6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-eh.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-eh.C?ref=e00cb200f39d8144de226e76c5d0257b613dbbf6", "patch": "@@ -1,34 +0,0 @@\n-// Test that we properly clean up if we get an exception in the middle of\n-// constructing the closure object.\n-\n-// { dg-do run }\n-// { dg-require-effective-target c++11 }\n-\n-struct A\n-{\n-  A() {}\n-  A(const A&) { throw 1; }\n-};\n-\n-int bs;\n-struct B\n-{\n-  B() { ++bs; }\n-  B(const B&) { ++bs; }\n-  ~B() { --bs; }\n-};\n-\n-int main()\n-{\n-  {\n-    B b1, b2;\n-    A a;\n-\n-    try\n-      {\n-\t[b1, a, b2]{ };\n-      }\n-    catch(...) {}\n-  }\n-  return bs;\n-}"}, {"sha": "38dba89138c258f3bdae5fbcddbb99a7001fa839", "filename": "gcc/testsuite/g++.dg/eh/aggregate1.C", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e00cb200f39d8144de226e76c5d0257b613dbbf6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Faggregate1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e00cb200f39d8144de226e76c5d0257b613dbbf6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Faggregate1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Faggregate1.C?ref=e00cb200f39d8144de226e76c5d0257b613dbbf6", "patch": "@@ -1,56 +0,0 @@\n-// PR c++/52320\n-// { dg-do run }\n-\n-#if DEBUG\n-extern \"C\" int printf (const char *, ...);\n-#define FUNCTION_NAME __PRETTY_FUNCTION__\n-#define TRACE_FUNCTION printf (\"%p->%s\\n\", this, FUNCTION_NAME);\n-#else\n-#define TRACE_FUNCTION \n-#endif\n-int c,d;\n-#define TRACE_CTOR TRACE_FUNCTION ++c\n-#define TRACE_DTOR TRACE_FUNCTION ++d\n-\n-int throw_at = 0;\n-\n-struct A {\n-  A() { int i = c+1; if (i == throw_at) throw i; TRACE_CTOR; }\n-  A(int i) { if (i == throw_at) throw i; TRACE_CTOR; }\n-  A(const A&) { throw 10; }\n-  A &operator=(const A&) { throw 11; return *this; }\n-  ~A() { TRACE_DTOR; }\n-};\n-\n-int fails;\n-\n-void try_idx (int i)\n-{\n-#if DEBUG\n-  printf (\"trying %d\\n\", i);\n-#endif\n-  throw_at = i;\n-  c = d = 0;\n-  int t = 10;\n-  try {\n-    struct X {\n-      A e1[2], e2;\n-    } \n-    x2[3] = { { 1, 2, 3 }, { 4, 5, 6 } };\n-  } catch (int x) { t = x; }\n-  if (t != i || c != d || c != i-1)\n-    {\n-#if DEBUG\n-      printf (\"%d FAIL\\n\", i);\n-#endif\n-      ++fails;\n-    }\n-}\n-\n-int main()\n-{\n-  for (int i = 1; i <= 10; ++i)\n-    try_idx (i);\n-\n-  return fails;\n-}"}]}