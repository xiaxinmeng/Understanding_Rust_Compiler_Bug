{"sha": "664a90c055c8f86cccd5556f48c74e94a6b7cc05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY0YTkwYzA1NWM4Zjg2Y2NjZDU1NTZmNDhjNzRlOTRhNmI3Y2MwNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2006-01-12T20:10:47Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2006-01-12T20:10:47Z"}, "message": "re PR libstdc++/24660 (versioning weak symbols in libstdc++)\n\n        PR libstdc++/24660\n        * pt.c (check_explicit_specialization): Handle namespace\n        association.\n        * name-lookup.c (set_decl_namespace): Likewise.\n\nFrom-SVN: r109647", "tree": {"sha": "57f736eaf87402c6f247f68dfae3575e795014ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57f736eaf87402c6f247f68dfae3575e795014ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/664a90c055c8f86cccd5556f48c74e94a6b7cc05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/664a90c055c8f86cccd5556f48c74e94a6b7cc05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/664a90c055c8f86cccd5556f48c74e94a6b7cc05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/664a90c055c8f86cccd5556f48c74e94a6b7cc05/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "edf8dc34ff317170ae61310ef64155723f775fbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edf8dc34ff317170ae61310ef64155723f775fbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edf8dc34ff317170ae61310ef64155723f775fbc"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "458c3c786a07187058e8d256c5a9635b9ebce0cb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664a90c055c8f86cccd5556f48c74e94a6b7cc05/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664a90c055c8f86cccd5556f48c74e94a6b7cc05/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=664a90c055c8f86cccd5556f48c74e94a6b7cc05", "patch": "@@ -1,3 +1,10 @@\n+2006-01-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR libstdc++/24660\n+\t* pt.c (check_explicit_specialization): Handle namespace\n+\tassociation.\n+\t* name-lookup.c (set_decl_namespace): Likewise.\n+\n 2006-01-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/24824"}, {"sha": "96ce4a76849d7dcd920a3ab10789d1f27ac00ce0", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664a90c055c8f86cccd5556f48c74e94a6b7cc05/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664a90c055c8f86cccd5556f48c74e94a6b7cc05/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=664a90c055c8f86cccd5556f48c74e94a6b7cc05", "patch": "@@ -2844,7 +2844,7 @@ set_namespace_binding (tree name, tree scope, tree val)\n void\n set_decl_namespace (tree decl, tree scope, bool friendp)\n {\n-  tree old;\n+  tree old, fn;\n \n   /* Get rid of namespace aliases.  */\n   scope = ORIGINAL_NAMESPACE (scope);\n@@ -2865,13 +2865,10 @@ set_decl_namespace (tree decl, tree scope, bool friendp)\n     }\n \n   /* See whether this has been declared in the namespace.  */\n-  old = namespace_binding (DECL_NAME (decl), scope);\n+  old = lookup_qualified_name (scope, DECL_NAME (decl), false, true);\n   if (!old)\n     /* No old declaration at all.  */\n     goto complain;\n-  /* A template can be explicitly specialized in any namespace.  */\n-  if (processing_explicit_instantiation)\n-    return;\n   if (!is_overloaded_fn (decl))\n     /* Don't compare non-function decls with decls_match here, since\n        it can't check for the correct constness at this\n@@ -2880,6 +2877,12 @@ set_decl_namespace (tree decl, tree scope, bool friendp)\n   /* Since decl is a function, old should contain a function decl.  */\n   if (!is_overloaded_fn (old))\n     goto complain;\n+  fn = OVL_CURRENT (old);\n+  if (!is_associated_namespace (scope, DECL_CONTEXT (fn)))\n+    goto complain;\n+  /* A template can be explicitly specialized in any namespace.  */\n+  if (processing_explicit_instantiation)\n+    return;\n   if (processing_template_decl || processing_specialization)\n     /* We have not yet called push_template_decl to turn a\n        FUNCTION_DECL into a TEMPLATE_DECL, so the declarations won't"}, {"sha": "3afe45d2a4ed8797f7d7c53d56d153c8e41791f4", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664a90c055c8f86cccd5556f48c74e94a6b7cc05/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664a90c055c8f86cccd5556f48c74e94a6b7cc05/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=664a90c055c8f86cccd5556f48c74e94a6b7cc05", "patch": "@@ -1901,12 +1901,19 @@ check_explicit_specialization (tree declarator,\n \n \t      /* Find the namespace binding, using the declaration\n \t\t context.  */\n-\t      fns = namespace_binding (dname, CP_DECL_CONTEXT (decl));\n+\t      fns = lookup_qualified_name (current_namespace, dname,\n+\t\t\t\t\t   false, true);\n \t      if (!fns || !is_overloaded_fn (fns))\n \t\t{\n \t\t  error (\"%qD is not a template function\", dname);\n \t\t  fns = error_mark_node;\n \t\t}\n+\t      else\n+\t\t{\n+\t\t  tree fn = OVL_CURRENT (fns);\n+\t\t  if (!is_associated_namespace (current_namespace, DECL_CONTEXT (fn)))\n+\t\t    error (\"%qD is not declared in %qD\", decl, current_namespace);\n+\t\t}\n \t    }\n \n \t  declarator = lookup_template_function (fns, NULL_TREE);"}, {"sha": "0c2f39c1e10c02216251d110c006e177b23da339", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664a90c055c8f86cccd5556f48c74e94a6b7cc05/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664a90c055c8f86cccd5556f48c74e94a6b7cc05/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=664a90c055c8f86cccd5556f48c74e94a6b7cc05", "patch": "@@ -9864,7 +9864,7 @@ Predefined Macros,cpp,The GNU C Preprocessor}).\n * Bound member functions:: You can extract a function pointer to the\n                         method denoted by a @samp{->*} or @samp{.*} expression.\n * C++ Attributes::      Variable, function, and type attributes for C++ only.\n-* Strong Using::      Strong using-directives for namespace composition.\n+* Namespace Association:: Strong using-directives for namespace association.\n * Java Exceptions::     Tweaking exception handling to work with Java.\n * Deprecated Features:: Things will disappear from g++.\n * Backwards Compatibility:: Compatibilities with earlier definitions of C++.\n@@ -10402,29 +10402,33 @@ interface table mechanism, instead of regular virtual table dispatch.\n \n @end table\n \n-See also @xref{Strong Using}.\n+See also @xref{Namespace Association}.\n \n-@node Strong Using\n-@section Strong Using\n+@node Namespace Association\n+@section Namespace Association\n \n @strong{Caution:} The semantics of this extension are not fully\n defined.  Users should refrain from using this extension as its\n semantics may change subtly over time.  It is possible that this\n-extension wil be removed in future versions of G++.\n+extension will be removed in future versions of G++.\n \n A using-directive with @code{__attribute ((strong))} is stronger\n than a normal using-directive in two ways:\n \n @itemize @bullet\n @item\n-Templates from the used namespace can be specialized as though they were members of the using namespace.\n+Templates from the used namespace can be specialized and explicitly\n+instantiated as though they were members of the using namespace.\n \n @item\n The using namespace is considered an associated namespace of all\n templates in the used namespace for purposes of argument-dependent\n name lookup.\n @end itemize\n \n+The used namespace must be nested within the using namespace so that\n+normal unqualified lookup works properly.\n+\n This is useful for composing a namespace transparently from\n implementation namespaces.  For example:\n "}]}