{"sha": "f00008b45ade9e63edf785838b34f5e55909af5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjAwMDA4YjQ1YWRlOWU2M2VkZjc4NTgzOGIzNGY1ZTU1OTA5YWY1ZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-08-14T23:53:43Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-08-14T23:55:35Z"}, "message": "c++: Final bit of name-lookup api simplification\n\nWe no longer need to give name_lookup_real not name_lookup_nonclass\ndifferent names to the name_lookup functions.  This renames the lookup\nfunctions thusly.\n\n\tgcc/cp/\n\t* name-lookup.h (lookup_name_real, lookup_name_nonclass): Rename\n\tto ...\n\t(lookup_name): ... these new overloads.\n\t* name-lookup.c (identifier_type_value_1): Rename lookup_name_real\n\tcall.\n\t(lookup_name_real_1): Rename to ...\n\t(lookup_name_1): ... here.\n\t(lookup_name_real): Rename to ...\n\t(lookup_name): ... here.  Rename lookup_name_real_1 call.\n\t(lookup_name_nonclass): Delete.\n\t* call.c (build_operator_new_call): Rename lookup_name_real call.\n\t(add_operator_candidates): Likewise.\n\t(build_op_delete_call): Rename lookup_name_nonclass call.\n\t* parser.c (cp_parser_lookup_name): Likewise.\n\t* pt.c (tsubst_friend_class, lookup_init_capture_pack): Likewise.\n\t(tsubst_expr): Likewise.\n\t* semantics.c (capture_decltype): Likewise.\n\tlibcc1/\n\t* libcp1plugin.cc (plugin_build_dependent_expr): Rename\n\tlookup_name_real call.", "tree": {"sha": "5969a610a4d5c4e3af6a545e8d68fe116785cdb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5969a610a4d5c4e3af6a545e8d68fe116785cdb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f00008b45ade9e63edf785838b34f5e55909af5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f00008b45ade9e63edf785838b34f5e55909af5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f00008b45ade9e63edf785838b34f5e55909af5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f00008b45ade9e63edf785838b34f5e55909af5e/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "866626efd749ed3e2b7014e88e4340b5a4c73560", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/866626efd749ed3e2b7014e88e4340b5a4c73560", "html_url": "https://github.com/Rust-GCC/gccrs/commit/866626efd749ed3e2b7014e88e4340b5a4c73560"}], "stats": {"total": 96, "additions": 42, "deletions": 54}, "files": [{"sha": "c62d9e227d364df74a04a9a4b835a01bf22bc941", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f00008b45ade9e63edf785838b34f5e55909af5e/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f00008b45ade9e63edf785838b34f5e55909af5e/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=f00008b45ade9e63edf785838b34f5e55909af5e", "patch": "@@ -4704,7 +4704,7 @@ build_operator_new_call (tree fnname, vec<tree, va_gc> **args,\n        up in the global scope.\n \n      we disregard block-scope declarations of \"operator new\".  */\n-  fns = lookup_name_real (fnname, LOOK_where::NAMESPACE, LOOK_want::NORMAL);\n+  fns = lookup_name (fnname, LOOK_where::NAMESPACE);\n   fns = lookup_arg_dependent (fnname, fns, *args);\n \n   if (align_arg)\n@@ -5982,8 +5982,7 @@ add_operator_candidates (z_candidate **candidates,\n      consider.  */\n   if (!memonly)\n     {\n-      tree fns = lookup_name_real (fnname, LOOK_where::BLOCK_NAMESPACE,\n-\t\t\t\t   LOOK_want::NORMAL);\n+      tree fns = lookup_name (fnname, LOOK_where::BLOCK_NAMESPACE);\n       fns = lookup_arg_dependent (fnname, fns, arglist);\n       add_candidates (fns, NULL_TREE, arglist, NULL_TREE,\n \t\t      NULL_TREE, false, NULL_TREE, NULL_TREE,\n@@ -6812,7 +6811,7 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n     fns = NULL_TREE;\n \n   if (fns == NULL_TREE)\n-    fns = lookup_name_nonclass (fnname);\n+    fns = lookup_name (fnname, LOOK_where::BLOCK_NAMESPACE);\n \n   /* Strip const and volatile from addr.  */\n   tree oaddr = addr;"}, {"sha": "ad9c92da254b12ec28b49a4f6fa209521126ba81", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f00008b45ade9e63edf785838b34f5e55909af5e/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f00008b45ade9e63edf785838b34f5e55909af5e/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=f00008b45ade9e63edf785838b34f5e55909af5e", "patch": "@@ -3743,7 +3743,7 @@ identifier_type_value_1 (tree id)\n     return REAL_IDENTIFIER_TYPE_VALUE (id);\n   /* Have to search for it. It must be on the global level, now.\n      Ask lookup_name not to return non-types.  */\n-  id = lookup_name_real (id, LOOK_where::BLOCK_NAMESPACE, LOOK_want::TYPE);\n+  id = lookup_name (id, LOOK_where::BLOCK_NAMESPACE, LOOK_want::TYPE);\n   if (id)\n     return TREE_TYPE (id);\n   return NULL_TREE;\n@@ -5213,8 +5213,7 @@ cp_namespace_decls (tree ns)\n }\n \n /* Given a lookup that returned VAL, use FLAGS to decide if we want to\n-   ignore it or not.  Subroutine of lookup_name_real and\n-   lookup_type_scope.  */\n+   ignore it or not.  Subroutine of lookup_name_1 and lookup_type_scope.  */\n \n static bool\n qualify_lookup (tree val, LOOK_want want)\n@@ -5987,7 +5986,7 @@ suggest_alternative_in_scoped_enum (tree name, tree scoped_enum)\n /* Look up NAME (an IDENTIFIER_NODE) in SCOPE (either a NAMESPACE_DECL\n    or a class TYPE).\n \n-   WANT as for lookup_name_real_1.\n+   WANT as for lookup_name_1.\n \n    Returns a DECL (or OVERLOAD, or BASELINK) representing the\n    declaration found.  If no suitable declaration can be found,\n@@ -6420,10 +6419,13 @@ innermost_non_namespace_value (tree name)\n    LOOK_want::NORMAL for normal lookup (implicit typedefs can be\n    hidden).  LOOK_want::TYPE for only TYPE_DECLS, LOOK_want::NAMESPACE\n    for only NAMESPACE_DECLS.  These two can be bit-ored to find\n-   namespace or type.  */\n+   namespace or type.\n+\n+   WANT can also have LOOK_want::HIDDEN_FRIEND or\n+   LOOK_want::HIDDEN_LAMBDa added to it.  */\n \n static tree\n-lookup_name_real_1 (tree name, LOOK_where where, LOOK_want want)\n+lookup_name_1 (tree name, LOOK_where where, LOOK_want want)\n {\n   tree val = NULL_TREE;\n \n@@ -6560,33 +6562,21 @@ lookup_name_real_1 (tree name, LOOK_where where, LOOK_want want)\n   return val;\n }\n \n-/* Wrapper for lookup_name_real_1.  */\n+/* Wrapper for lookup_name_1.  */\n \n tree\n-lookup_name_real (tree name, LOOK_where where, LOOK_want want)\n+lookup_name (tree name, LOOK_where where, LOOK_want want)\n {\n   bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n-  tree ret = lookup_name_real_1 (name, where, want);\n+  tree ret = lookup_name_1 (name, where, want);\n   timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n   return ret;\n }\n \n-tree\n-lookup_name_nonclass (tree name)\n-{\n-  return lookup_name_real (name, LOOK_where::BLOCK_NAMESPACE, LOOK_want::NORMAL);\n-}\n-\n tree\n lookup_name (tree name)\n {\n-  return lookup_name_real (name, LOOK_where::ALL, LOOK_want::NORMAL);\n-}\n-\n-tree\n-lookup_name (tree name, LOOK_want want)\n-{\n-  return lookup_name_real (name, LOOK_where::ALL, want);\n+  return lookup_name (name, LOOK_where::ALL, LOOK_want::NORMAL);\n }\n \n /* Look up NAME for type used in elaborated name specifier in\n@@ -6595,7 +6585,7 @@ lookup_name (tree name, LOOK_want want)\n    name, more scopes are checked if cleanup or template parameter\n    scope is encountered.\n \n-   Unlike lookup_name_real, we make sure that NAME is actually\n+   Unlike lookup_name_1, we make sure that NAME is actually\n    declared in the desired scope, not from inheritance, nor using\n    directive.  For using declaration, there is DR138 still waiting\n    to be resolved.  Hidden name coming from an earlier friend"}, {"sha": "723fbb0008c0289276a08b6d3d38ee997072019b", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f00008b45ade9e63edf785838b34f5e55909af5e/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f00008b45ade9e63edf785838b34f5e55909af5e/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=f00008b45ade9e63edf785838b34f5e55909af5e", "patch": "@@ -320,24 +320,27 @@ constexpr LOOK_want operator& (LOOK_want a, LOOK_want b)\n   return LOOK_want (unsigned (a) & unsigned (b));\n }\n \n-extern tree lookup_name_real (tree, LOOK_where, LOOK_want);\n+extern tree lookup_name (tree, LOOK_where, LOOK_want = LOOK_want::NORMAL);\n+/* Also declared in c-family/c-common.h.  */\n+extern tree lookup_name (tree name);\n+inline tree lookup_name (tree name, LOOK_want want)\n+{\n+  return lookup_name (name, LOOK_where::ALL, want);\n+}\n+\n extern tree lookup_type_scope (tree, tag_scope);\n extern tree get_namespace_binding (tree ns, tree id);\n extern void set_global_binding (tree decl);\n inline tree get_global_binding (tree id)\n {\n   return get_namespace_binding (NULL_TREE, id);\n }\n-/* Also declared in c-family/c-common.h.  */\n-extern tree lookup_name (tree name);\n-extern tree lookup_name (tree name, LOOK_want);\n extern tree lookup_qualified_name (tree scope, tree name,\n \t\t\t\t   LOOK_want = LOOK_want::NORMAL,\n \t\t\t\t   bool = true);\n extern tree lookup_qualified_name (tree scope, const char *name,\n \t\t\t\t   LOOK_want = LOOK_want::NORMAL,\n \t\t\t\t   bool = true);\n-extern tree lookup_name_nonclass (tree);\n extern bool is_local_extern (tree);\n extern bool pushdecl_class_level (tree);\n extern tree pushdecl_namespace_level (tree, bool);"}, {"sha": "7cc2dbed5fe5bd9d13c8bdc0af59a933c8003219", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f00008b45ade9e63edf785838b34f5e55909af5e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f00008b45ade9e63edf785838b34f5e55909af5e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=f00008b45ade9e63edf785838b34f5e55909af5e", "patch": "@@ -28213,7 +28213,7 @@ cp_parser_nested_requirement (cp_parser *parser)\n \n /* Support Functions */\n \n-/* Return the appropriate prefer_type argument for lookup_name_real based on\n+/* Return the appropriate prefer_type argument for lookup_name based on\n    tag_type.  */\n \n static inline LOOK_want\n@@ -28455,22 +28455,20 @@ cp_parser_lookup_name (cp_parser *parser, tree name,\n       if (!decl)\n \t/* Look it up in the enclosing context.  DR 141: When looking for a\n \t   template-name after -> or ., only consider class templates.  */\n-\tdecl = lookup_name_real (name, LOOK_where::ALL,\n-\t\t\t\t is_namespace ? LOOK_want::NAMESPACE\n-\t\t\t\t /* DR 141: When looking in the\n-\t\t\t\t    current enclosing context for a\n-\t\t\t\t    template-name after -> or ., only\n-\t\t\t\t    consider class templates.  */\n-\t\t\t\t : is_template ? LOOK_want::TYPE\n-\t\t\t\t : prefer_type_arg (tag_type));\n+\tdecl = lookup_name (name, is_namespace ? LOOK_want::NAMESPACE\n+\t\t\t    /* DR 141: When looking in the\n+\t\t\t       current enclosing context for a\n+\t\t\t       template-name after -> or ., only\n+\t\t\t       consider class templates.  */\n+\t\t\t    : is_template ? LOOK_want::TYPE\n+\t\t\t    : prefer_type_arg (tag_type));\n       parser->object_scope = object_type;\n       parser->qualifying_scope = NULL_TREE;\n     }\n   else\n     {\n-      decl = lookup_name_real (name, LOOK_where::ALL,\n-\t\t\t       is_namespace ? LOOK_want::NAMESPACE\n-\t\t\t       : prefer_type_arg (tag_type));\n+      decl = lookup_name (name, is_namespace ? LOOK_want::NAMESPACE\n+\t\t\t  : prefer_type_arg (tag_type));\n       parser->qualifying_scope = NULL_TREE;\n       parser->object_scope = NULL_TREE;\n     }"}, {"sha": "b80fe0a5cc56c50591c38a10ef5955b04046524f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f00008b45ade9e63edf785838b34f5e55909af5e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f00008b45ade9e63edf785838b34f5e55909af5e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f00008b45ade9e63edf785838b34f5e55909af5e", "patch": "@@ -11184,8 +11184,8 @@ tsubst_friend_class (tree friend_tmpl, tree args)\n       push_nested_class (context);\n     }\n \n-  tmpl = lookup_name_real (DECL_NAME (friend_tmpl), LOOK_where::CLASS_NAMESPACE,\n-\t\t\t   LOOK_want::NORMAL | LOOK_want::HIDDEN_FRIEND);\n+  tmpl = lookup_name (DECL_NAME (friend_tmpl), LOOK_where::CLASS_NAMESPACE,\n+\t\t      LOOK_want::NORMAL | LOOK_want::HIDDEN_FRIEND);\n \n   if (tmpl && DECL_CLASS_TEMPLATE_P (tmpl))\n     {\n@@ -17835,7 +17835,7 @@ lookup_init_capture_pack (tree decl)\n   for (int i = 0; i < len; ++i)\n     {\n       tree ename = vec ? make_ith_pack_parameter_name (cname, i) : cname;\n-      tree elt = lookup_name_real (ename, LOOK_where::ALL, LOOK_want::NORMAL);\n+      tree elt = lookup_name (ename);\n       if (vec)\n \tTREE_VEC_ELT (vec, i) = elt;\n       else\n@@ -17940,9 +17940,8 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t    tree inst;\n \t    if (!DECL_PACK_P (decl))\n \t      {\n-\t\tinst = (lookup_name_real\n-\t\t\t(DECL_NAME (decl), LOOK_where::BLOCK,\n-\t\t\t LOOK_want::NORMAL | LOOK_want::HIDDEN_LAMBDA));\n+\t\tinst = lookup_name (DECL_NAME (decl), LOOK_where::BLOCK,\n+\t\t\t\t    LOOK_want::HIDDEN_LAMBDA);\n \t\tgcc_assert (inst != decl && is_capture_proxy (inst));\n \t      }\n \t    else if (is_normal_capture_proxy (decl))"}, {"sha": "b71ca0729a8ff8c85f862b5af581eb540d315d80", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f00008b45ade9e63edf785838b34f5e55909af5e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f00008b45ade9e63edf785838b34f5e55909af5e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=f00008b45ade9e63edf785838b34f5e55909af5e", "patch": "@@ -10322,8 +10322,8 @@ static tree\n capture_decltype (tree decl)\n {\n   tree lam = CLASSTYPE_LAMBDA_EXPR (DECL_CONTEXT (current_function_decl));\n-  tree cap = lookup_name_real (DECL_NAME (decl), LOOK_where::BLOCK,\n-\t\t\t       LOOK_want::NORMAL | LOOK_want::HIDDEN_LAMBDA);\n+  tree cap = lookup_name (DECL_NAME (decl), LOOK_where::BLOCK,\n+\t\t\t  LOOK_want::HIDDEN_LAMBDA);\n   tree type;\n \n   if (cap && is_capture_proxy (cap))"}, {"sha": "a83bfeb0a1614b44a0704c0b9b26d741e12abc3e", "filename": "libcc1/libcp1plugin.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f00008b45ade9e63edf785838b34f5e55909af5e/libcc1%2Flibcp1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f00008b45ade9e63edf785838b34f5e55909af5e/libcc1%2Flibcp1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1plugin.cc?ref=f00008b45ade9e63edf785838b34f5e55909af5e", "patch": "@@ -2652,8 +2652,7 @@ plugin_build_dependent_expr (cc1_plugin::connection *self,\n     }\n   tree res = identifier;\n   if (!scope)\n-    res = lookup_name_real (res, LOOK_where::BLOCK_NAMESPACE,\n-\t\t\t    LOOK_want::NORMAL);\n+    res = lookup_name (res, LOOK_where::BLOCK_NAMESPACE);\n   else if (!TYPE_P (scope) || !dependent_scope_p (scope))\n     {\n       res = lookup_qualified_name (scope, res, LOOK_want::NORMAL, true);"}]}