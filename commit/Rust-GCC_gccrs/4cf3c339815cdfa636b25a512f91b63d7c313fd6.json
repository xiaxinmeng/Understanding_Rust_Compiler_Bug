{"sha": "4cf3c339815cdfa636b25a512f91b63d7c313fd6", "node_id": "C_kwDOANBUbNoAKDRjZjNjMzM5ODE1Y2RmYTYzNmIyNWE1MTJmOTFiNjNkN2MzMTNmZDY", "commit": {"author": {"name": "Thomas Rodgers", "email": "rodgert@appliantology.com", "date": "2022-02-09T20:29:19Z"}, "committer": {"name": "Thomas Rodgers", "email": "rodgert@appliantology.com", "date": "2022-02-09T20:30:51Z"}, "message": "libstdc++: Fix deadlock in atomic wait [PR104442]\n\nThis issue was observed as a deadlock in\n29_atomics/atomic/wait_notify/100334.cc on vxworks. When a wait is\n\"laundered\" (e.g. type T* does not suffice as a waitable address for the\nplatform's native waiting primitive), the address waited is that of the\n_M_ver member of __waiter_pool_base, so several threads may wait on the\nsame address for unrelated atomic<T> objects. As noted in the PR, the\nimplementation correctly exits the wait for the thread whose data\nchanged, but not for any other threads waiting on the same address.\n\nAs noted in the PR the __waiter::_M_do_wait_v member was correctly exiting\nbut the other waiters were not reloading the value of _M_ver before\nre-entering the wait.\n\nMoving the spin call inside the loop accomplishes this, and is\nconsistent with the predicate accepting version of __waiter::_M_do_wait.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/104442\n\t* include/bits/atomic_wait.h (__waiter::_M_do_wait_v): Move spin\n\t loop inside do loop so that threads failing the wait, reload\n\t _M_ver.", "tree": {"sha": "d5b10af825688eb59925bcdb329c3a0990ba6e6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5b10af825688eb59925bcdb329c3a0990ba6e6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cf3c339815cdfa636b25a512f91b63d7c313fd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cf3c339815cdfa636b25a512f91b63d7c313fd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cf3c339815cdfa636b25a512f91b63d7c313fd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cf3c339815cdfa636b25a512f91b63d7c313fd6/comments", "author": null, "committer": null, "parents": [{"sha": "f0caa45aa7adacf4c0f1ca76a886028a5b54d1b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0caa45aa7adacf4c0f1ca76a886028a5b54d1b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0caa45aa7adacf4c0f1ca76a886028a5b54d1b3"}], "stats": {"total": 7, "additions": 3, "deletions": 4}, "files": [{"sha": "6ce7f9343cf562cd9fe87342bdb47a2f283095cf", "filename": "libstdc++-v3/include/bits/atomic_wait.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf3c339815cdfa636b25a512f91b63d7c313fd6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf3c339815cdfa636b25a512f91b63d7c313fd6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h?ref=4cf3c339815cdfa636b25a512f91b63d7c313fd6", "patch": "@@ -388,12 +388,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  void\n \t  _M_do_wait_v(_Tp __old, _ValFn __vfn)\n \t  {\n-\t    __platform_wait_t __val;\n-\t    if (__base_type::_M_do_spin_v(__old, __vfn, __val))\n-\t      return;\n-\n \t    do\n \t      {\n+\t\t__platform_wait_t __val;\n+\t\tif (__base_type::_M_do_spin_v(__old, __vfn, __val))\n+\t\t  return;\n \t\t__base_type::_M_w._M_do_wait(__base_type::_M_addr, __val);\n \t      }\n \t    while (__detail::__atomic_compare(__old, __vfn()));"}]}