{"sha": "f75211822f8d84bb706421d3692e6c1cdbdfc3a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc1MjExODIyZjhkODRiYjcwNjQyMWQzNjkyZTZjMWNkYmRmYzNhOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-07-07T11:57:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-07-07T14:09:21Z"}, "message": "fix detection of negative step DR groups\n\nThis fixes a condition that caused all negative step DR groups to\nbe detected as single element interleaving.  Such groups are\nrejected by interleaving vectorization but miscompiled by SLP\nwhich is fixed by forcing VMAT_STRIDED_SLP for now.\n\n2020-07-07  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-data-refs.c (vect_analyze_data_ref_accesses): Fix\n\tgroup overlap condition to allow negative step DR groups.\n\t* tree-vect-stmts.c (get_group_load_store_type): For\n\tmulti element SLP groups force VMAT_STRIDED_SLP when the step\n\tis negative.\n\n\t* gcc.dg/vect/slp-47.c: New testcase.\n\t* gcc.dg/vect/slp-48.c: Likewise.", "tree": {"sha": "9a9dee5881ce201dd515b0036a850fc16f80b743", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a9dee5881ce201dd515b0036a850fc16f80b743"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f75211822f8d84bb706421d3692e6c1cdbdfc3a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f75211822f8d84bb706421d3692e6c1cdbdfc3a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f75211822f8d84bb706421d3692e6c1cdbdfc3a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f75211822f8d84bb706421d3692e6c1cdbdfc3a8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1b0956a8e1f5609266cbe064b345bbb37b1e7e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1b0956a8e1f5609266cbe064b345bbb37b1e7e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1b0956a8e1f5609266cbe064b345bbb37b1e7e2"}], "stats": {"total": 131, "additions": 126, "deletions": 5}, "files": [{"sha": "7b2ddf664dfefa97ac80f9f9eb7993e18980c411", "filename": "gcc/testsuite/gcc.dg/vect/slp-47.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75211822f8d84bb706421d3692e6c1cdbdfc3a8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-47.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75211822f8d84bb706421d3692e6c1cdbdfc3a8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-47.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-47.c?ref=f75211822f8d84bb706421d3692e6c1cdbdfc3a8", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include \"tree-vect.h\"\n+\n+int x[1024], y[1024];\n+\n+void __attribute__((noipa)) foo()\n+{\n+  for (int i = 0; i < 512; ++i)\n+    {\n+      x[2*i] = y[1023 - (2*i)];\n+      x[2*i+1] = y[1023 - (2*i+1)];\n+    }\n+}\n+\n+void __attribute__((noipa)) bar()\n+{\n+  for (int i = 0; i < 512; ++i)\n+    {\n+      x[2*i] = y[1023 - (2*i+1)];\n+      x[2*i+1] = y[1023 - (2*i)];\n+    }\n+}\n+\n+int \n+main ()\n+{\n+  check_vect ();\n+\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      x[i] = 0;\n+      y[i] = i;\n+      __asm__ volatile (\"\");\n+    }\n+\n+  foo ();\n+  for (int i = 0; i < 1024; ++i)\n+    if (x[i] != y[1023 - i])\n+      abort ();\n+\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      x[i] = 0;\n+      __asm__ volatile (\"\");\n+    }\n+\n+  bar ();\n+  for (int i = 0; i < 1024; ++i)\n+    if (x[i] != y[1023 - i^1])\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" } } */"}, {"sha": "0b327aede8e6bb53d01315553ed9f2c3c3dc3290", "filename": "gcc/testsuite/gcc.dg/vect/slp-48.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75211822f8d84bb706421d3692e6c1cdbdfc3a8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-48.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75211822f8d84bb706421d3692e6c1cdbdfc3a8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-48.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-48.c?ref=f75211822f8d84bb706421d3692e6c1cdbdfc3a8", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include \"tree-vect.h\"\n+\n+int x[1024], y[1024];\n+\n+void __attribute__((noipa)) foo()\n+{\n+  for (int i = 0; i < 512; ++i)\n+    {\n+      x[1023 - (2*i+1)] = y[2*i];\n+      x[1023 - (2*i)] = y[2*i+1];\n+    }\n+}\n+\n+void __attribute__((noipa)) bar()\n+{\n+  for (int i = 0; i < 512; ++i)\n+    {\n+      x[1023 - (2*i+1)] = y[2*i+1];\n+      x[1023 - (2*i)] = y[2*i];\n+    }\n+}\n+\n+int \n+main ()\n+{\n+  check_vect ();\n+\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      x[i] = 0;\n+      y[i] = i;\n+      __asm__ volatile (\"\");\n+    }\n+\n+  foo ();\n+  for (int i = 0; i < 1024; ++i)\n+    if (x[i] != y[1023 - i^1])\n+      abort ();\n+\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      x[i] = 0;\n+      __asm__ volatile (\"\");\n+    }\n+\n+  bar ();\n+  for (int i = 0; i < 1024; ++i)\n+    if (x[i] != y[1023 - i])\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" } } */"}, {"sha": "2b4421b5fb492c2dac0fdf6ed89d77baa1d48af3", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75211822f8d84bb706421d3692e6c1cdbdfc3a8/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75211822f8d84bb706421d3692e6c1cdbdfc3a8/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=f75211822f8d84bb706421d3692e6c1cdbdfc3a8", "patch": "@@ -3074,13 +3074,15 @@ vect_analyze_data_ref_accesses (vec_info *vinfo)\n \t      if (!DR_IS_READ (dra) && init_b - init_prev != type_size_a)\n \t\tbreak;\n \n-\t      /* If the step (if not zero or non-constant) is greater than the\n+\t      /* If the step (if not zero or non-constant) is smaller than the\n \t\t difference between data-refs' inits this splits groups into\n \t\t suitable sizes.  */\n \t      if (tree_fits_shwi_p (DR_STEP (dra)))\n \t\t{\n-\t\t  HOST_WIDE_INT step = tree_to_shwi (DR_STEP (dra));\n-\t\t  if (step != 0 && step <= (init_b - init_a))\n+\t\t  unsigned HOST_WIDE_INT step\n+\t\t    = absu_hwi (tree_to_shwi (DR_STEP (dra)));\n+\t\t  if (step != 0\n+\t\t      && step <= (unsigned HOST_WIDE_INT)(init_b - init_a))\n \t\t    break;\n \t\t}\n \t    }"}, {"sha": "fcae3ef5f353c77c410aa1a852dd27770e5d5b51", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75211822f8d84bb706421d3692e6c1cdbdfc3a8/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75211822f8d84bb706421d3692e6c1cdbdfc3a8/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=f75211822f8d84bb706421d3692e6c1cdbdfc3a8", "patch": "@@ -2150,8 +2150,15 @@ get_group_load_store_type (vec_info *vinfo, stmt_vec_info stmt_info,\n \t    }\n \t  int cmp = compare_step_with_zero (vinfo, stmt_info);\n \t  if (cmp < 0)\n-\t    *memory_access_type = get_negative_load_store_type\n-\t      (vinfo, stmt_info, vectype, vls_type, 1);\n+\t    {\n+\t      if (single_element_p)\n+\t\t/* ???  The VMAT_CONTIGUOUS_REVERSE code generation is\n+\t\t   only correct for single element \"interleaving\" SLP.  */\n+\t\t*memory_access_type = get_negative_load_store_type\n+\t\t\t\t       (vinfo, stmt_info, vectype, vls_type, 1);\n+\t      else\n+\t\t*memory_access_type = VMAT_STRIDED_SLP;\n+\t    }\n \t  else\n \t    {\n \t      gcc_assert (!loop_vinfo || cmp > 0);"}]}