{"sha": "c2bb84be4a6e581bbf45891457ee632a07416982", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJiYjg0YmU0YTZlNTgxYmJmNDU4OTE0NTdlZTYzMmEwNzQxNjk4Mg==", "commit": {"author": {"name": "Sudi Das", "email": "sudi.das@arm.com", "date": "2020-09-18T14:47:46Z"}, "committer": {"name": "Omar Tahir", "email": "omar.tahir@arm.com", "date": "2020-09-18T16:03:39Z"}, "message": "[PATCH 2/5][Arm] New pattern for CSINV instructions\n\nThis patch adds a new pattern, *thumb2_csinv, for generating CSINV nstructions.\n\nThis pattern relies on a few general changes that will be used throughout\nthe following patches:\n\t- A new macro, TARGET_COND_ARITH, which is only true on 8.1-M Mainline\n\t  and represents the existence of these conditional instructions.\n\t- A change to the cond exec hook, arm_have_conditional_execution, which\n\t  now returns false if TARGET_COND_ARITH before reload. This allows for\n\t  some ifcvt transformations when they would usually be disabled. I've\n\t  written a rather verbose comment (with the risk of over-explaining)\n\t  as it's a bit of a confusing change.\n\t- One new predicate.\n\t- *thumb2_movcond has been restricted to only match if !TARGET_COND_ARITH,\n\t  otherwise it triggers undesirable combines.\n\ngcc/ChangeLog:\n\n\t* config/arm/arm.h (TARGET_COND_ARITH): New macro.\n\t* config/arm/arm.c (arm_have_conditional_execution): Return false if\n\tTARGET_COND_ARITH before reload.\n\t* config/arm/predicates.md (arm_comparison_operation): Returns true if\n\tcomparing CC_REGNUM with constant zero.\n\t* config/arm/thumb2.md (*thumb2_csinv): New.\n\t(*thumb2_movcond): Don't match if TARGET_COND_ARITH.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/csinv-1.c: New test.\n\nCo-authored-by: Omar Tahir <omar.tahir@arm.com>", "tree": {"sha": "ef187c78b259df5dc5a7fee70d7b35ef0c90b383", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef187c78b259df5dc5a7fee70d7b35ef0c90b383"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2bb84be4a6e581bbf45891457ee632a07416982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2bb84be4a6e581bbf45891457ee632a07416982", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2bb84be4a6e581bbf45891457ee632a07416982", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2bb84be4a6e581bbf45891457ee632a07416982/comments", "author": {"login": "sudakshina-das-arm", "id": 28538945, "node_id": "MDQ6VXNlcjI4NTM4OTQ1", "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sudakshina-das-arm", "html_url": "https://github.com/sudakshina-das-arm", "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers", "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}", "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions", "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs", "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos", "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c7c5f1d4a4b8328fb4c07483cdbfe4ea7762155", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c7c5f1d4a4b8328fb4c07483cdbfe4ea7762155", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c7c5f1d4a4b8328fb4c07483cdbfe4ea7762155"}], "stats": {"total": 72, "additions": 68, "deletions": 4}, "files": [{"sha": "022ef6c3f1d723bdf421268c81cd0c759c414d9a", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2bb84be4a6e581bbf45891457ee632a07416982/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2bb84be4a6e581bbf45891457ee632a07416982/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c2bb84be4a6e581bbf45891457ee632a07416982", "patch": "@@ -29866,12 +29866,23 @@ arm_frame_pointer_required (void)\n   return false;\n }\n \n-/* Only thumb1 can't support conditional execution, so return true if\n-   the target is not thumb1.  */\n+/* Implement the TARGET_HAVE_CONDITIONAL_EXECUTION hook.\n+   All modes except THUMB1 have conditional execution.\n+   If we have conditional arithmetic, return false before reload to\n+   enable some ifcvt transformations. */\n static bool\n arm_have_conditional_execution (void)\n {\n-  return !TARGET_THUMB1;\n+  bool has_cond_exec, enable_ifcvt_trans;\n+\n+  /* Only THUMB1 cannot support conditional execution. */\n+  has_cond_exec = !TARGET_THUMB1;\n+\n+  /* Enable ifcvt transformations if we have conditional arithmetic, but only\n+     before reload. */\n+  enable_ifcvt_trans = TARGET_COND_ARITH && !reload_completed;\n+\n+  return has_cond_exec && !enable_ifcvt_trans;\n }\n \n /* The AAPCS sets the maximum alignment of a vector to 64 bits.  */"}, {"sha": "f4d3676c5bce8faf5349fc4d6ac5827aa2723327", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2bb84be4a6e581bbf45891457ee632a07416982/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2bb84be4a6e581bbf45891457ee632a07416982/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=c2bb84be4a6e581bbf45891457ee632a07416982", "patch": "@@ -177,6 +177,10 @@ emission of floating point pcs attributes.  */\n \n #define TARGET_CRC32\t\t\t(arm_arch_crc)\n \n+/* Thumb-2 but also has some conditional arithmetic instructions like csinc,\n+   csinv, etc. */\n+#define TARGET_COND_ARITH\t\t(arm_arch8_1m_main)\n+\n /* The following two macros concern the ability to execute coprocessor\n    instructions for VFPv3 or NEON.  TARGET_VFP3/TARGET_VFPD32 are currently\n    only ever tested when we know we are generating for VFP hardware; we need"}, {"sha": "2144520829cc4a28cd7ac1ef528ecd54f0af13c1", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2bb84be4a6e581bbf45891457ee632a07416982/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2bb84be4a6e581bbf45891457ee632a07416982/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=c2bb84be4a6e581bbf45891457ee632a07416982", "patch": "@@ -485,6 +485,18 @@\n   (and (match_operand 0 \"expandable_comparison_operator\")\n        (match_test \"maybe_get_arm_condition_code (op) != ARM_NV\")))\n \n+(define_special_predicate \"arm_comparison_operation\"\n+  (match_code \"eq,ne,le,lt,ge,gt,geu,gtu,leu,ltu,unordered,\n+         ordered,unlt,unle,unge,ungt\")\n+{\n+  if (XEXP (op, 1) != const0_rtx)\n+    return false;\n+  rtx op0 = XEXP (op, 0);\n+  if (!REG_P (op0) || REGNO (op0) != CC_REGNUM)\n+    return false;\n+  return maybe_get_arm_condition_code (op) != ARM_NV;\n+})\n+\n (define_special_predicate \"lt_ge_comparison_operator\"\n   (match_code \"lt,ge\"))\n "}, {"sha": "d648ba1da53c2ced2fa98378ec3a718937d64c72", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2bb84be4a6e581bbf45891457ee632a07416982/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2bb84be4a6e581bbf45891457ee632a07416982/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=c2bb84be4a6e581bbf45891457ee632a07416982", "patch": "@@ -938,6 +938,20 @@\n    (set_attr \"type\" \"multiple\")]\n )\n \n+(define_insn \"*thumb2_csinv\"\n+  [(set (match_operand:SI 0 \"arm_general_register_operand\" \"=r, r\")\n+        (if_then_else:SI\n+         (match_operand 1 \"arm_comparison_operation\" \"\")\n+         (not:SI (match_operand:SI 2 \"arm_general_register_operand\" \"r, r\"))\n+         (match_operand:SI 3 \"reg_or_zero_operand\" \"r, Pz\")))]\n+  \"TARGET_COND_ARITH\"\n+  \"@\n+   csinv\\\\t%0, %3, %2, %D1\n+   csinv\\\\t%0, zr, %2, %D1\"\n+  [(set_attr \"type\" \"csel\")\n+   (set_attr \"predicable\" \"no\")]\n+)\n+\n (define_insn \"*thumb2_movcond\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=Ts,Ts,Ts\")\n \t(if_then_else:SI\n@@ -947,7 +961,7 @@\n \t (match_operand:SI 1 \"arm_rhs_operand\" \"0,TsI,?TsI\")\n \t (match_operand:SI 2 \"arm_rhs_operand\" \"TsI,0,TsI\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_THUMB2\"\n+  \"TARGET_THUMB2 && !TARGET_COND_ARITH\"\n   \"*\n   if (GET_CODE (operands[5]) == LT\n       && (operands[4] == const0_rtx))"}, {"sha": "6b5383aa913d2302b32895ddd304c8c09319a67f", "filename": "gcc/testsuite/gcc.target/arm/csinv-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2bb84be4a6e581bbf45891457ee632a07416982/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcsinv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2bb84be4a6e581bbf45891457ee632a07416982/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcsinv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcsinv-1.c?ref=c2bb84be4a6e581bbf45891457ee632a07416982", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_arch_v8_1m_main_ok } */\n+/* { dg-options \"-O2 -march=armv8.1-m.main\" } */\n+\n+int\n+test_csinv32_condasn1(int w0, int w1, int w2, int w3)\n+{\n+  int w4;\n+\n+  /* { dg-final { scan-assembler \"csinv\\tr\\[0-9\\]*.*ne\" } } */\n+  w4 = (w0 == w1) ? ~w2 : w3;\n+  return w4;\n+}\n+\n+int\n+test_csinv32_condasn2(int w0, int w1, int w2, int w3)\n+{\n+  int w4;\n+\n+  /* { dg-final { scan-assembler \"csinv\\tr\\[0-9\\]*.*eq\" } } */\n+  w4 = (w0 == w1) ? w3 : ~w2;\n+  return w4;\n+}"}]}