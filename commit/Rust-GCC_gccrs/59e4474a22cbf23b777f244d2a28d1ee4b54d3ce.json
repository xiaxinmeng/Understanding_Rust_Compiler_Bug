{"sha": "59e4474a22cbf23b777f244d2a28d1ee4b54d3ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTllNDQ3NGEyMmNiZjIzYjc3N2YyNDRkMmEyOGQxZWU0YjU0ZDNjZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-05T09:31:52Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-05T09:33:55Z"}, "message": "i386: Use int_nonimmediate_operand more\n\nPattern explosing and manual mode checks can be avoided by using\nint_nonimmediate_operand special predicate.\n\nWhile there, rewrite *x86_mov<SWI48:mode>cc_0_m1_neg_leu<SWI:mode>\nto a combine pass splitter.\n\n\t* config/i386/i386.md (*testqi_ext_3): Use\n\tint_nonimmediate_operand instead of manual mode checks.\n\t(*x86_mov<SWI48:mode>cc_0_m1_neg_leu<SWI:mode>):\n\tUse int_nonimmediate_operand predicate.  Rewrite\n\tdefine_insn_and_split pattern to a combine pass splitter.", "tree": {"sha": "1fbb2f4c1efc85b5995599e8f7f0065b0894c1ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fbb2f4c1efc85b5995599e8f7f0065b0894c1ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59e4474a22cbf23b777f244d2a28d1ee4b54d3ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e4474a22cbf23b777f244d2a28d1ee4b54d3ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59e4474a22cbf23b777f244d2a28d1ee4b54d3ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e4474a22cbf23b777f244d2a28d1ee4b54d3ce/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfbbceed1dad352e5be9e2af7b665ae7d9d2537e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfbbceed1dad352e5be9e2af7b665ae7d9d2537e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfbbceed1dad352e5be9e2af7b665ae7d9d2537e"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "8c46dcd92c3fcd26c85f112c9a4729436401888b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e4474a22cbf23b777f244d2a28d1ee4b54d3ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e4474a22cbf23b777f244d2a28d1ee4b54d3ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59e4474a22cbf23b777f244d2a28d1ee4b54d3ce", "patch": "@@ -1,3 +1,11 @@\n+2020-05-05  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*testqi_ext_3): Use\n+\tint_nonimmediate_operand instead of manual mode checks.\n+\t(*x86_mov<SWI48:mode>cc_0_m1_neg_leu<SWI:mode>):\n+\tUse int_nonimmediate_operand predicate.  Rewrite\n+\tdefine_insn_and_split pattern to a combine pass splitter.\n+\n 2020-05-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.ac <i[34567]86-*-*>: Add --32 to tls_as_opt on Solaris."}, {"sha": "5cad481fd9f038d8e88e6537b927bf38e52035d4", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e4474a22cbf23b777f244d2a28d1ee4b54d3ce/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e4474a22cbf23b777f244d2a28d1ee4b54d3ce/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=59e4474a22cbf23b777f244d2a28d1ee4b54d3ce", "patch": "@@ -8714,16 +8714,12 @@\n   [(set (match_operand 0 \"flags_reg_operand\")\n         (match_operator 1 \"compare_operator\"\n \t  [(zero_extract:SWI248\n-\t     (match_operand 2 \"nonimmediate_operand\" \"rm\")\n+\t     (match_operand 2 \"int_nonimmediate_operand\" \"rm\")\n \t     (match_operand 3 \"const_int_operand\" \"n\")\n \t     (match_operand 4 \"const_int_operand\" \"n\"))\n \t   (const_int 0)]))]\n-  \"((TARGET_64BIT && GET_MODE (operands[2]) == DImode)\n-    || GET_MODE (operands[2]) == SImode\n-    || GET_MODE (operands[2]) == HImode\n-    || GET_MODE (operands[2]) == QImode)\n-   /* Ensure that resulting mask is zero or sign extended operand.  */\n-   && INTVAL (operands[4]) >= 0\n+  \"/* Ensure that resulting mask is zero or sign extended operand.  */\n+   INTVAL (operands[4]) >= 0\n    && ((INTVAL (operands[3]) > 0\n \t&& INTVAL (operands[3]) + INTVAL (operands[4]) <= 32)\n        || (<MODE>mode == DImode\n@@ -18038,18 +18034,15 @@\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"length_immediate\" \"0\")])\n \n-(define_insn_and_split \"*x86_mov<SWI48:mode>cc_0_m1_neg_leu<SWI:mode>\"\n-  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+(define_split\n+  [(set (match_operand:SWI48 0 \"register_operand\")\n \t(neg:SWI48\n \t  (leu:SWI48\n-\t    (match_operand:SWI 1 \"nonimmediate_operand\" \"<SWI:r>m\")\n-\t    (match_operand:SWI 2 \"<SWI:immediate_operand>\" \"<SWI:i>\"))))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"CONST_INT_P (operands[2])\n+\t    (match_operand 1 \"int_nonimmediate_operand\")\n+\t    (match_operand 2 \"const_int_operand\"))))]\n+  \"x86_64_immediate_operand (operands[2], VOIDmode)\n    && INTVAL (operands[2]) != -1\n    && INTVAL (operands[2]) != 2147483647\"\n-  \"#\"\n-  \"\"\n   [(set (reg:CC FLAGS_REG) (compare:CC (match_dup 1) (match_dup 2)))\n    (parallel [(set (match_dup 0)\n \t\t   (neg:SWI48 (ltu:SWI48 (reg:CC FLAGS_REG) (const_int 0))))"}]}