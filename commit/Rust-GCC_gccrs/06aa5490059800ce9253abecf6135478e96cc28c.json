{"sha": "06aa5490059800ce9253abecf6135478e96cc28c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZhYTU0OTAwNTk4MDBjZTkyNTNhYmVjZjYxMzU0NzhlOTZjYzI4Yw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-08T15:51:57Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-08T15:51:57Z"}, "message": "Revert _binding -> _value change.\n\n\t* name-lookup.h (get_namespace_value, set_global_value): Rename to\n\t...\n\t(get_namespace_binding, set_global_binding): ... these.\n\t* name-lookup.c (get_namespace_value, set_global_value): Rename to\n\t...\n\t(get_namespace_binding, set_global_binding): ... these.\n\t(arg_assoc_namespace, pushdecl_maybe_friend_1)\n\tcheck_for_out_of_scope_variable, push_overloaded_decl_1,\n\tlookup_name_innermost_nonclass_level, push_namespace): Adjust.\n\t* cp-tree.h (IDENTIFIER_GLOBAL_VALUE)\n\tSET_IDENTIFIER_GLOBAL_VALUE): Adjust.\n\t* decl.c (poplevel): Adjust.\n\t* pt.c (make_constrained_auto): Likewise.\n((--This line, and those below, will be ignored--\n\nM    cp/cp-tree.h\nM    cp/name-lookup.c\nM    cp/name-lookup.h\nM    cp/decl.c\nM    cp/ChangeLog\nM    cp/pt.c\n\nFrom-SVN: r247745", "tree": {"sha": "7441d647fa78de828c7bf0a2d61ecc194102dbad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7441d647fa78de828c7bf0a2d61ecc194102dbad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06aa5490059800ce9253abecf6135478e96cc28c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06aa5490059800ce9253abecf6135478e96cc28c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06aa5490059800ce9253abecf6135478e96cc28c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06aa5490059800ce9253abecf6135478e96cc28c/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e5c24003b9735e5131ba3e76de9b9977c746133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e5c24003b9735e5131ba3e76de9b9977c746133", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e5c24003b9735e5131ba3e76de9b9977c746133"}], "stats": {"total": 57, "additions": 36, "deletions": 21}, "files": [{"sha": "2538783f2c10176912a9a4a8fadf60913974fb31", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06aa5490059800ce9253abecf6135478e96cc28c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06aa5490059800ce9253abecf6135478e96cc28c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=06aa5490059800ce9253abecf6135478e96cc28c", "patch": "@@ -1,3 +1,18 @@\n+2017-05-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\tRevert _binding -> _value change.\n+\t* name-lookup.h (get_namespace_value, set_global_value): Rename to ...\n+\t(get_namespace_binding, set_global_binding): ... these.\n+\t* name-lookup.c (get_namespace_value, set_global_value): Rename to ...\n+\t(get_namespace_binding, set_global_binding): ... these.\n+\t(arg_assoc_namespace, pushdecl_maybe_friend_1,\n+\tcheck_for_out_of_scope_variable, push_overloaded_decl_1,\n+\tlookup_name_innermost_nonclass_level, push_namespace): Adjust.\n+\t* cp-tree.h (IDENTIFIER_GLOBAL_VALUE,\n+\tSET_IDENTIFIER_GLOBAL_VALUE): Adjust.\n+\t* decl.c (poplevel): Adjust.\n+\t* pt.c (make_constrained_auto): Likewise.\n+\n 2017-05-07  Volker Reichelt  <v.reichelt@netcologne.de>\n \n \tPR translation/80280"}, {"sha": "d2d48e7342a494ac26c46a8f974cf2782f3f5b61", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06aa5490059800ce9253abecf6135478e96cc28c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06aa5490059800ce9253abecf6135478e96cc28c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=06aa5490059800ce9253abecf6135478e96cc28c", "patch": "@@ -554,9 +554,9 @@ struct GTY(()) ptrmem_cst {\n typedef struct ptrmem_cst * ptrmem_cst_t;\n \n #define IDENTIFIER_GLOBAL_VALUE(NODE) \\\n-  get_namespace_value (NULL_TREE, (NODE))\n+  get_namespace_binding (NULL_TREE, (NODE))\n #define SET_IDENTIFIER_GLOBAL_VALUE(NODE, VAL) \\\n-  set_global_value ((NODE), (VAL))\n+  set_global_binding ((NODE), (VAL))\n \n #define CLEANUP_P(NODE)\t\tTREE_LANG_FLAG_0 (TRY_BLOCK_CHECK (NODE))\n "}, {"sha": "2b20bf9ef3708a64fcd24ff5e669041666d6b19a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06aa5490059800ce9253abecf6135478e96cc28c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06aa5490059800ce9253abecf6135478e96cc28c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=06aa5490059800ce9253abecf6135478e96cc28c", "patch": "@@ -693,7 +693,7 @@ poplevel (int keep, int reverse, int functionbody)\n \t\t\t\t\t   /*class_p=*/true);\n \t  tree ns_binding = NULL_TREE;\n \t  if (!ob)\n-\t    ns_binding = get_namespace_value (current_namespace, name);\n+\t    ns_binding = get_namespace_binding (current_namespace, name);\n \n \t  if (ob && ob->scope == current_binding_level->level_chain)\n \t    /* We have something like:"}, {"sha": "3e6cd9fb74cf5c2eb79919ea72c7e903759d4d29", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06aa5490059800ce9253abecf6135478e96cc28c/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06aa5490059800ce9253abecf6135478e96cc28c/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=06aa5490059800ce9253abecf6135478e96cc28c", "patch": "@@ -215,7 +215,7 @@ arg_assoc_namespace (struct arg_lookup *k, tree scope)\n       if (arg_assoc_namespace (k, TREE_PURPOSE (value)))\n \treturn true;\n \n-  value = get_namespace_value (scope, k->name);\n+  value = get_namespace_binding (scope, k->name);\n   if (!value)\n     return false;\n \n@@ -1250,7 +1250,7 @@ pushdecl_maybe_friend_1 (tree x, bool is_friend)\n       /* In case this decl was explicitly namespace-qualified, look it\n \t up in its namespace context.  */\n       if (DECL_NAMESPACE_SCOPE_P (x) && namespace_bindings_p ())\n-\tt = get_namespace_value (DECL_CONTEXT (x), name);\n+\tt = get_namespace_binding (DECL_CONTEXT (x), name);\n       else\n \tt = lookup_name_innermost_nonclass_level (name);\n \n@@ -1267,7 +1267,7 @@ pushdecl_maybe_friend_1 (tree x, bool is_friend)\n \t  t = innermost_non_namespace_value (name);\n \t  /* Or in the innermost namespace.  */\n \t  if (! t)\n-\t    t = get_namespace_value (DECL_CONTEXT (x), name);\n+\t    t = get_namespace_binding (DECL_CONTEXT (x), name);\n \t  /* Does it have linkage?  Note that if this isn't a DECL, it's an\n \t     OVERLOAD, which is OK.  */\n \t  if (t && DECL_P (t) && ! (TREE_STATIC (t) || DECL_EXTERNAL (t)))\n@@ -1521,7 +1521,7 @@ pushdecl_maybe_friend_1 (tree x, bool is_friend)\n \t{\n \t  tree decl;\n \n-\t  decl = get_namespace_value (current_namespace, name);\n+\t  decl = get_namespace_binding (current_namespace, name);\n \t  if (decl && TREE_CODE (decl) == OVERLOAD)\n \t    decl = OVL_FUNCTION (decl);\n \n@@ -1568,7 +1568,7 @@ pushdecl_maybe_friend_1 (tree x, bool is_friend)\n       else\n \t{\n \t  /* Here to install a non-global value.  */\n-\t  tree oldglobal = get_namespace_value (current_namespace, name);\n+\t  tree oldglobal = get_namespace_binding (current_namespace, name);\n \t  tree oldlocal = NULL_TREE;\n \t  cp_binding_level *oldscope = NULL;\n \t  cxx_binding *oldbinding = outer_binding (name, NULL, true);\n@@ -1608,7 +1608,7 @@ pushdecl_maybe_friend_1 (tree x, bool is_friend)\n \n \t      if (oldlocal == NULL_TREE)\n \t\toldlocal\n-\t\t  = get_namespace_value (current_namespace, DECL_NAME (d));\n+\t\t  = get_namespace_binding (current_namespace, DECL_NAME (d));\n \t    }\n \n \t  /* If this is an extern function declaration, see if we\n@@ -1972,7 +1972,7 @@ check_for_out_of_scope_variable (tree decl)\n     shadowed = DECL_HAS_SHADOWED_FOR_VAR_P (shadowed)\n       ? DECL_SHADOWED_FOR_VAR (shadowed) : NULL_TREE;\n   if (!shadowed)\n-    shadowed = get_namespace_value (current_namespace, DECL_NAME (decl));\n+    shadowed = get_namespace_binding (current_namespace, DECL_NAME (decl));\n   if (shadowed)\n     {\n       if (!DECL_ERROR_REPORTED (decl))\n@@ -2934,7 +2934,7 @@ push_overloaded_decl_1 (tree decl, int flags, bool is_friend)\n   int doing_global = (namespace_bindings_p () || !(flags & PUSH_LOCAL));\n \n   if (doing_global)\n-    old = get_namespace_value (DECL_CONTEXT (decl), name);\n+    old = get_namespace_binding (DECL_CONTEXT (decl), name);\n   else\n     old = lookup_name_innermost_nonclass_level (name);\n \n@@ -4023,7 +4023,7 @@ namespace_binding_1 (tree name, tree scope)\n    global_namespace.  */\n \n tree\n-get_namespace_value (tree ns, tree name)\n+get_namespace_binding (tree ns, tree name)\n {\n   bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n   if (!ns)\n@@ -4052,11 +4052,11 @@ set_namespace_binding (tree name, tree scope, tree val)\n     supplement_binding (b, val);\n }\n \n-/* Set NAME in the global namespace to VAL.  Does not add it to the\n-   list of things in the namespace.  */\n+/* Set value binding og NAME in the global namespace to VAL.  Does not\n+   add it to the list of things in the namespace.  */\n \n void\n-set_global_value (tree name, tree val)\n+set_global_binding (tree name, tree val)\n {\n   bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n \n@@ -5823,7 +5823,7 @@ lookup_name_innermost_nonclass_level_1 (tree name)\n \n   if (b->kind == sk_namespace)\n     {\n-      t = get_namespace_value (current_namespace, name);\n+      t = get_namespace_binding (current_namespace, name);\n \n       /* extern \"C\" function() */\n       if (t != NULL_TREE && TREE_CODE (t) == TREE_LIST)\n@@ -6475,7 +6475,7 @@ push_namespace (tree name)\n   if (anon)\n     {\n       name = anon_identifier;\n-      d = get_namespace_value (current_namespace, name);\n+      d = get_namespace_binding (current_namespace, name);\n       if (d)\n \t/* Reopening anonymous namespace.  */\n \tneed_new = false;\n@@ -6484,7 +6484,7 @@ push_namespace (tree name)\n   else\n     {\n       /* Check whether this is an extended namespace definition.  */\n-      d = get_namespace_value (current_namespace, name);\n+      d = get_namespace_binding (current_namespace, name);\n       if (d != NULL_TREE && TREE_CODE (d) == NAMESPACE_DECL)\n \t{\n \t  tree dna = DECL_NAMESPACE_ALIAS (d);"}, {"sha": "30c51046efc708d54d211bc9ba33110db7e9f478", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06aa5490059800ce9253abecf6135478e96cc28c/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06aa5490059800ce9253abecf6135478e96cc28c/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=06aa5490059800ce9253abecf6135478e96cc28c", "patch": "@@ -311,8 +311,8 @@ extern tree pushdecl_with_scope (tree, cp_binding_level *, bool);\n extern tree lookup_name_prefer_type (tree, int);\n extern tree lookup_name_real (tree, int, int, bool, int, int);\n extern tree lookup_type_scope (tree, tag_scope);\n-extern tree get_namespace_value (tree ns, tree id);\n-extern void set_global_value (tree id, tree val);\n+extern tree get_namespace_binding (tree ns, tree id);\n+extern void set_global_binding (tree id, tree val);\n extern bool hidden_name_p (tree);\n extern tree remove_hidden_names (tree);\n extern tree lookup_qualified_name (tree, tree, int, bool, /*hidden*/bool = false);"}, {"sha": "b42b1fc10fb72b640dbf3243116cb34bfdfa367d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06aa5490059800ce9253abecf6135478e96cc28c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06aa5490059800ce9253abecf6135478e96cc28c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=06aa5490059800ce9253abecf6135478e96cc28c", "patch": "@@ -24731,7 +24731,7 @@ make_constrained_auto (tree con, tree args)\n static tree\n listify (tree arg)\n {\n-  tree std_init_list = get_namespace_value (std_node, init_list_identifier);\n+  tree std_init_list = get_namespace_binding (std_node, init_list_identifier);\n   tree argvec;\n   if (!std_init_list || !DECL_CLASS_TEMPLATE_P (std_init_list))\n     {    "}]}