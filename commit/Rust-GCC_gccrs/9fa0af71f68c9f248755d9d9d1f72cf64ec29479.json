{"sha": "9fa0af71f68c9f248755d9d9d1f72cf64ec29479", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZhMGFmNzFmNjhjOWYyNDg3NTVkOWQ5ZDFmNzJjZjY0ZWMyOTQ3OQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-06-02T23:40:42Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-06-02T23:40:42Z"}, "message": "(tablejump_internal3, tablejump_internal4): New patterns.\n\n(tablejump): Use them for PIC code.\n\nFrom-SVN: r12139", "tree": {"sha": "4caa0bacc3a52d230bc78d68c0b62ac8ebcfec9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4caa0bacc3a52d230bc78d68c0b62ac8ebcfec9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fa0af71f68c9f248755d9d9d1f72cf64ec29479", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa0af71f68c9f248755d9d9d1f72cf64ec29479", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fa0af71f68c9f248755d9d9d1f72cf64ec29479", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa0af71f68c9f248755d9d9d1f72cf64ec29479/comments", "author": null, "committer": null, "parents": [{"sha": "bca7cce204332f339ef61ce85076f3ef9b73ac1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bca7cce204332f339ef61ce85076f3ef9b73ac1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bca7cce204332f339ef61ce85076f3ef9b73ac1b"}], "stats": {"total": 86, "additions": 65, "deletions": 21}, "files": [{"sha": "18bc6380ae37b7af4f7dda19f179b1527d11400f", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 65, "deletions": 21, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa0af71f68c9f248755d9d9d1f72cf64ec29479/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa0af71f68c9f248755d9d9d1f72cf64ec29479/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=9fa0af71f68c9f248755d9d9d1f72cf64ec29479", "patch": "@@ -5869,10 +5869,20 @@ move\\\\t%0,%z4\\\\n\\\\\n       if (GET_MODE (operands[0]) != Pmode)\n \tabort ();\n \n-      if (!TARGET_LONG64)\n-\temit_jump_insn (gen_tablejump_internal1 (operands[0], operands[1]));\n+      if (! flag_pic)\n+\t{\n+\t  if (!TARGET_LONG64)\n+\t    emit_jump_insn (gen_tablejump_internal1 (operands[0], operands[1]));\n+\t  else\n+\t    emit_jump_insn (gen_tablejump_internal2 (operands[0], operands[1]));\n+\t}\n       else\n-\temit_jump_insn (gen_tablejump_internal2 (operands[0], operands[1]));\n+\t{\n+\t  if (!TARGET_LONG64)\n+\t    emit_jump_insn (gen_tablejump_internal3 (operands[0], operands[1]));\n+\t  else\n+\t    emit_jump_insn (gen_tablejump_internal4 (operands[0], operands[1]));\n+\t}\n \n       DONE;\n     }\n@@ -5883,39 +5893,73 @@ move\\\\t%0,%z4\\\\n\\\\\n \t(match_operand:SI 0 \"register_operand\" \"d\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"!TARGET_LONG64\"\n-  \"*\n-{\n-  /* .cpadd expands to add REG,REG,$gp when pic, and nothing when not pic.  */\n-  if (TARGET_ABICALLS && mips_abi == ABI_32)\n-    output_asm_insn (\\\".cpadd\\\\t%0\\\", operands);\n-  return \\\"%*j\\\\t%0\\\";\n-}\"\n+  \"%*j\\\\t%0\"\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n-   (set (attr \"length\")\n-\t(if_then_else (eq_attr \"abicalls\" \"yes\")\n-\t\t      (const_int 2)\n-\t\t      (const_int 1)))])\n+   (set_attr \"length\"\t\"1\")])\n \n (define_insn \"tablejump_internal2\"\n   [(set (pc)\n \t(match_operand:DI 0 \"register_operand\" \"d\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"TARGET_LONG64\"\n+  \"%*j\\\\t%0\"\n+  [(set_attr \"type\"\t\"jump\")\n+   (set_attr \"mode\"\t\"none\")\n+   (set_attr \"length\"\t\"1\")])\n+\n+(define_expand \"tablejump_internal3\"\n+  [(set (pc)\n+\t(plus:SI (match_operand:SI 0 \"register_operand\" \"d\")\n+\t\t (label_ref:SI (match_operand:SI 1 \"\" \"\"))))]\n+  \"\"\n+  \"\")\n+\n+;;; Make sure that this only matches the insn before ADDR_DIFF_VEC.  Otherwise\n+;;; it is not valid.\n+\n+;;; ??? The length depends on the ABI.  It is two for o32, and one for n32.\n+;;; We just use the conservative number here.\n+\n+(define_insn \"\"\n+  [(set (pc)\n+\t(plus:SI (match_operand:SI 0 \"register_operand\" \"d\")\n+\t\t (label_ref:SI (match_operand:SI 1 \"\" \"\"))))]\n+  \"!TARGET_LONG64 && next_active_insn (insn) != 0\n+   && GET_CODE (PATTERN (next_active_insn (insn))) == ADDR_DIFF_VEC\n+   && PREV_INSN (next_active_insn (insn)) == operands[1]\"\n   \"*\n {\n-  /* .cpdadd expands to dadd REG,REG,$gp when pic, and nothing when not pic. */\n-  /*  ??? SGI as does not have a .cpdadd.  */\n-  if (TARGET_ABICALLS && mips_abi == ABI_32)\n+  /* .cpadd expands to add REG,REG,$gp when pic, and nothing when not pic.  */\n+  if (mips_abi == ABI_32)\n     output_asm_insn (\\\".cpadd\\\\t%0\\\", operands);\n   return \\\"%*j\\\\t%0\\\";\n }\"\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n-   (set (attr \"length\")\n-\t(if_then_else (eq_attr \"abicalls\" \"yes\")\n-\t\t      (const_int 2)\n-\t\t      (const_int 1)))])\n+   (set_attr \"length\"\t\"2\")])\n+\n+(define_expand \"tablejump_internal4\"\n+  [(set (pc)\n+\t(plus:DI (match_operand:DI 0 \"register_operand\" \"d\")\n+\t\t (label_ref:DI (match_operand:SI 1 \"\" \"\"))))]\n+  \"\"\n+  \"\")\n+\n+;;; Make sure that this only matches the insn before ADDR_DIFF_VEC.  Otherwise\n+;;; it is not valid.\n+\n+(define_insn \"\"\n+  [(set (pc)\n+\t(plus:DI (match_operand:DI 0 \"register_operand\" \"d\")\n+\t\t (label_ref:DI (match_operand:SI 1 \"\" \"\"))))]\n+  \"!TARGET_LONG64 && next_active_insn (insn) != 0\n+   && GET_CODE (PATTERN (next_active_insn (insn))) == ADDR_DIFF_VEC\n+   && PREV_INSN (next_active_insn (insn)) == operands[1]\"\n+  \"%*j\\\\t%0\"\n+  [(set_attr \"type\"\t\"jump\")\n+   (set_attr \"mode\"\t\"none\")\n+   (set_attr \"length\"\t\"1\")])\n \n ;; Function return, only allow after optimization, so that we can\n ;; eliminate jumps to jumps if no stack space is used."}]}