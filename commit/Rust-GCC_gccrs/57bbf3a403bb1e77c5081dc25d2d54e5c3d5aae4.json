{"sha": "57bbf3a403bb1e77c5081dc25d2d54e5c3d5aae4", "node_id": "C_kwDOANBUbNoAKDU3YmJmM2E0MDNiYjFlNzdjNTA4MWRjMjVkMmQ1NGU1YzNkNWFhZTQ", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-10-26T20:45:17Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-10-26T20:45:17Z"}, "message": "analyzer: fixes to file-descriptor handling\n\ngcc/analyzer/ChangeLog:\n\t* sm-fd.cc (fd_state_machine::on_open): Transition to \"unchecked\"\n\twhen the mode is symbolic, rather than just on integer constants.\n\t(fd_state_machine::check_for_open_fd): Don't complain about\n\tunchecked values in the start state.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/fd-3.c (test_5): Expect \"opened here\" message\n\teven when flags are symbolic.\n\t(test_read_from_symbolic_fd): New.\n\t(test_write_to_symbolic_fd): New.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "47b211413c221db4ed8e57b11323980f98de9165", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47b211413c221db4ed8e57b11323980f98de9165"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57bbf3a403bb1e77c5081dc25d2d54e5c3d5aae4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57bbf3a403bb1e77c5081dc25d2d54e5c3d5aae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57bbf3a403bb1e77c5081dc25d2d54e5c3d5aae4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57bbf3a403bb1e77c5081dc25d2d54e5c3d5aae4/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "593254ae03a6c0db5946e44b2cfd90dbfc707a17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/593254ae03a6c0db5946e44b2cfd90dbfc707a17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/593254ae03a6c0db5946e44b2cfd90dbfc707a17"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "ae846cd6ec839b13b79df214eeafbbe9fe7a6d79", "filename": "gcc/analyzer/sm-fd.cc", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57bbf3a403bb1e77c5081dc25d2d54e5c3d5aae4/gcc%2Fanalyzer%2Fsm-fd.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57bbf3a403bb1e77c5081dc25d2d54e5c3d5aae4/gcc%2Fanalyzer%2Fsm-fd.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-fd.cc?ref=57bbf3a403bb1e77c5081dc25d2d54e5c3d5aae4", "patch": "@@ -940,25 +940,25 @@ fd_state_machine::on_open (sm_context *sm_ctxt, const supernode *node,\n   if (lhs)\n     {\n       tree arg = gimple_call_arg (call, 1);\n+      enum access_mode mode = READ_WRITE;\n       if (TREE_CODE (arg) == INTEGER_CST)\n \t{\n \t  int flag = TREE_INT_CST_LOW (arg);\n-\t  enum access_mode mode = get_access_mode_from_flag (flag);\n-\n-\t  switch (mode)\n-\t    {\n-\t    case READ_ONLY:\n-\t      sm_ctxt->on_transition (node, stmt, lhs, m_start,\n-\t\t\t\t      m_unchecked_read_only);\n-\t      break;\n-\t    case WRITE_ONLY:\n-\t      sm_ctxt->on_transition (node, stmt, lhs, m_start,\n-\t\t\t\t      m_unchecked_write_only);\n-\t      break;\n-\t    default:\n-\t      sm_ctxt->on_transition (node, stmt, lhs, m_start,\n-\t\t\t\t      m_unchecked_read_write);\n-\t    }\n+\t  mode = get_access_mode_from_flag (flag);\n+\t}\n+      switch (mode)\n+\t{\n+\tcase READ_ONLY:\n+\t  sm_ctxt->on_transition (node, stmt, lhs, m_start,\n+\t\t\t\t  m_unchecked_read_only);\n+\t  break;\n+\tcase WRITE_ONLY:\n+\t  sm_ctxt->on_transition (node, stmt, lhs, m_start,\n+\t\t\t\t  m_unchecked_write_only);\n+\t  break;\n+\tdefault:\n+\t  sm_ctxt->on_transition (node, stmt, lhs, m_start,\n+\t\t\t\t  m_unchecked_read_write);\n \t}\n     }\n   else\n@@ -1096,7 +1096,7 @@ fd_state_machine::check_for_open_fd (\n \n   else\n     {\n-      if (!(is_valid_fd_p (state) || (state == m_stop)))\n+      if (!(is_valid_fd_p (state) || state == m_start || state == m_stop))\n \t{\n \t  if (!is_constant_fd_p (state))\n \t    sm_ctxt->warn ("}, {"sha": "8e71b14f71b69502390fd100d13b166a034c3dfa", "filename": "gcc/testsuite/gcc.dg/analyzer/fd-3.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57bbf3a403bb1e77c5081dc25d2d54e5c3d5aae4/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57bbf3a403bb1e77c5081dc25d2d54e5c3d5aae4/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-3.c?ref=57bbf3a403bb1e77c5081dc25d2d54e5c3d5aae4", "patch": "@@ -50,9 +50,9 @@ test_5 (char *path, void *buf)\n     int flags = O_RDONLY;\n     if (some_condition())\n         flags |= O_NOATIME;\n-    int fd = open (path, flags);\n+    int fd = open (path, flags); /* { dg-message \"\\\\(1\\\\) opened here\" } */\n     read (fd, buf, 1); /* { dg-warning \"'read' on possibly invalid file descriptor 'fd'\" } */\n-    /* { dg-message \"\\\\(1\\\\) 'fd' could be invalid\" \"\" { target *-*-* } .-1 } */\n+    /* { dg-message \"\\\\(2\\\\) 'fd' could be invalid\" \"\" { target *-*-* } .-1 } */\n     close (fd);   \n }\n \n@@ -82,4 +82,16 @@ test_7 (char *path, void *buf)\n         \n     }\n     close(fd);\n-}\n\\ No newline at end of file\n+}\n+\n+void\n+test_read_from_symbolic_fd (int fd, void *buf)\n+{\n+  read (fd, buf, 1);\n+}\n+\n+void\n+test_write_to_symbolic_fd (int fd, void *buf)\n+{\n+  write (fd, buf, 1);\n+}"}]}