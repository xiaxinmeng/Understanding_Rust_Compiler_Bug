{"sha": "788e504636c63174540326bfd7e7431f5d34d9ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg4ZTUwNDYzNmM2MzE3NDU0MDMyNmJmZDdlNzQzMWY1ZDM0ZDlhZA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-08-09T01:06:34Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-08-09T01:06:34Z"}, "message": "utils.c (make_descriptor_field): Add tree parameter.\n\n\t* gcc-interface/utils.c (make_descriptor_field): Add tree parameter.\n\t(build_vms_descriptor32): Adjust calls to it for new parameter.\n\t(build_vms_descriptor): Likewise.\n\nFrom-SVN: r163026", "tree": {"sha": "61ba40a43c173b05f11de64533dc5b87b0ec11c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61ba40a43c173b05f11de64533dc5b87b0ec11c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/788e504636c63174540326bfd7e7431f5d34d9ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/788e504636c63174540326bfd7e7431f5d34d9ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/788e504636c63174540326bfd7e7431f5d34d9ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/788e504636c63174540326bfd7e7431f5d34d9ad/comments", "author": null, "committer": null, "parents": [{"sha": "fb7fb7010a1053e0e8de1f0af39d546993fb5f9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb7fb7010a1053e0e8de1f0af39d546993fb5f9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb7fb7010a1053e0e8de1f0af39d546993fb5f9f"}], "stats": {"total": 350, "additions": 156, "deletions": 194}, "files": [{"sha": "cfedc5ef10a5c89c5498042a83ab2016b7605ff5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788e504636c63174540326bfd7e7431f5d34d9ad/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788e504636c63174540326bfd7e7431f5d34d9ad/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=788e504636c63174540326bfd7e7431f5d34d9ad", "patch": "@@ -1,3 +1,9 @@\n+2010-08-08  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* gcc-interface/utils.c (make_descriptor_field): Add tree parameter.\n+\t(build_vms_descriptor32): Adjust calls to it for new parameter.\n+\t(build_vms_descriptor): Likewise.\n+\n 2010-08-08  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* gcc-interface/decl.c (rec_variant).  Declare.  Declare a VEC of it."}, {"sha": "b74d1b67997856b40d818ae1b18669143e4f7e86", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 150, "deletions": 194, "changes": 344, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788e504636c63174540326bfd7e7431f5d34d9ad/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788e504636c63174540326bfd7e7431f5d34d9ad/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=788e504636c63174540326bfd7e7431f5d34d9ad", "patch": "@@ -198,7 +198,7 @@ static tree split_plus (tree, tree *);\n static tree float_type_for_precision (int, enum machine_mode);\n static tree convert_to_fat_pointer (tree, tree);\n static tree convert_to_thin_pointer (tree, tree);\n-static tree make_descriptor_field (const char *,tree, tree, tree);\n+static tree make_descriptor_field (const char *,tree, tree, tree, tree);\n static bool potential_alignment_gap (tree, tree, tree);\n static void process_attributes (tree, struct attrib *);\n \f\n@@ -2293,7 +2293,7 @@ build_vms_descriptor32 (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n {\n   tree record_type = make_node (RECORD_TYPE);\n   tree pointer32_type;\n-  tree field_list = 0;\n+  tree field_list = NULL_TREE;\n   int klass;\n   int dtype = 0;\n   tree inner_type;\n@@ -2427,34 +2427,30 @@ build_vms_descriptor32 (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n \n   /* Make the type for a descriptor for VMS.  The first four fields are the\n      same for all types.  */\n-  field_list\n-    = chainon (field_list,\n-\t       make_descriptor_field (\"LENGTH\", gnat_type_for_size (16, 1),\n-\t\t\t\t      record_type,\n-\t\t\t\t      size_in_bytes\n-\t\t\t\t      ((mech == By_Descriptor_A\n-\t\t\t\t\t|| mech == By_Short_Descriptor_A)\n-\t\t\t\t       ? inner_type : type)));\n-  field_list\n-    = chainon (field_list,\n-\t       make_descriptor_field (\"DTYPE\", gnat_type_for_size (8, 1),\n-\t\t\t\t      record_type, size_int (dtype)));\n-  field_list\n-    = chainon (field_list,\n-\t       make_descriptor_field (\"CLASS\", gnat_type_for_size (8, 1),\n-\t\t\t\t      record_type, size_int (klass)));\n+  field_list = \n+    make_descriptor_field (\"LENGTH\", gnat_type_for_size (16, 1),\n+\t\t\t   record_type,\n+\t\t\t   size_in_bytes\n+\t\t\t   ((mech == By_Descriptor_A\n+\t\t\t     || mech == By_Short_Descriptor_A)\n+\t\t\t    ? inner_type : type), field_list);\n+  field_list =\n+    make_descriptor_field (\"DTYPE\", gnat_type_for_size (8, 1),\n+\t\t\t   record_type, size_int (dtype), field_list);\n+  field_list =\n+    make_descriptor_field (\"CLASS\", gnat_type_for_size (8, 1),\n+\t\t\t   record_type, size_int (klass), field_list);\n \n   /* Of course this will crash at run time if the address space is not\n      within the low 32 bits, but there is nothing else we can do.  */\n   pointer32_type = build_pointer_type_for_mode (type, SImode, false);\n \n-  field_list\n-    = chainon (field_list,\n-\t       make_descriptor_field (\"POINTER\", pointer32_type, record_type,\n-\t\t\t\t      build_unary_op (ADDR_EXPR,\n-\t\t\t\t\t\t      pointer32_type,\n-\t\t\t\t\t\t      build0 (PLACEHOLDER_EXPR,\n-\t\t\t\t\t\t\t      type))));\n+  field_list =\n+    make_descriptor_field (\"POINTER\", pointer32_type, record_type,\n+\t\t\t   build_unary_op (ADDR_EXPR,\n+\t\t\t\t\t   pointer32_type,\n+\t\t\t\t\t   build0 (PLACEHOLDER_EXPR,\n+\t\t\t\t\t\t   type)), field_list);\n \n   switch (mech)\n     {\n@@ -2466,59 +2462,52 @@ build_vms_descriptor32 (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n \n     case By_Descriptor_SB:\n     case By_Short_Descriptor_SB:\n-      field_list\n-\t= chainon (field_list,\n-\t\t   make_descriptor_field\n-\t\t   (\"SB_L1\", gnat_type_for_size (32, 1), record_type,\n-\t\t    TREE_CODE (type) == ARRAY_TYPE\n-\t\t    ? TYPE_MIN_VALUE (TYPE_DOMAIN (type)) : size_zero_node));\n-      field_list\n-\t= chainon (field_list,\n-\t\t   make_descriptor_field\n-\t\t   (\"SB_U1\", gnat_type_for_size (32, 1), record_type,\n-\t\t    TREE_CODE (type) == ARRAY_TYPE\n-\t\t    ? TYPE_MAX_VALUE (TYPE_DOMAIN (type)) : size_zero_node));\n+      field_list =\n+\tmake_descriptor_field (\"SB_L1\", gnat_type_for_size (32, 1),\n+\t\t\t       record_type,\n+\t\t\t       (TREE_CODE (type) == ARRAY_TYPE\n+\t\t\t\t? TYPE_MIN_VALUE (TYPE_DOMAIN (type))\n+\t\t\t\t: size_zero_node), field_list);\n+      field_list =\n+\tmake_descriptor_field (\"SB_U1\", gnat_type_for_size (32, 1),\n+\t\t\t       record_type,\n+\t\t\t       (TREE_CODE (type) == ARRAY_TYPE\n+\t\t\t\t? TYPE_MAX_VALUE (TYPE_DOMAIN (type))\n+\t\t\t\t: size_zero_node), field_list);\n       break;\n \n     case By_Descriptor_A:\n     case By_Short_Descriptor_A:\n     case By_Descriptor_NCA:\n     case By_Short_Descriptor_NCA:\n-      field_list = chainon (field_list,\n-\t\t\t    make_descriptor_field (\"SCALE\",\n-\t\t\t\t\t\t   gnat_type_for_size (8, 1),\n-\t\t\t\t\t\t   record_type,\n-\t\t\t\t\t\t   size_zero_node));\n-\n-      field_list = chainon (field_list,\n-\t\t\t    make_descriptor_field (\"DIGITS\",\n-\t\t\t\t\t\t   gnat_type_for_size (8, 1),\n-\t\t\t\t\t\t   record_type,\n-\t\t\t\t\t\t   size_zero_node));\n-\n-      field_list\n-\t= chainon (field_list,\n-\t\t   make_descriptor_field\n-\t\t   (\"AFLAGS\", gnat_type_for_size (8, 1), record_type,\n-\t\t    size_int ((mech == By_Descriptor_NCA ||\n-                              mech == By_Short_Descriptor_NCA)\n-\t\t\t      ? 0\n-\t\t\t      /* Set FL_COLUMN, FL_COEFF, and FL_BOUNDS.  */\n-\t\t\t      : (TREE_CODE (type) == ARRAY_TYPE\n-\t\t\t\t && TYPE_CONVENTION_FORTRAN_P (type)\n-\t\t\t\t ? 224 : 192))));\n-\n-      field_list = chainon (field_list,\n-\t\t\t    make_descriptor_field (\"DIMCT\",\n-\t\t\t\t\t\t   gnat_type_for_size (8, 1),\n-\t\t\t\t\t\t   record_type,\n-\t\t\t\t\t\t   size_int (ndim)));\n-\n-      field_list = chainon (field_list,\n-\t\t\t    make_descriptor_field (\"ARSIZE\",\n-\t\t\t\t\t\t   gnat_type_for_size (32, 1),\n-\t\t\t\t\t\t   record_type,\n-\t\t\t\t\t\t   size_in_bytes (type)));\n+      field_list =\n+\tmake_descriptor_field (\"SCALE\", gnat_type_for_size (8, 1),\n+\t\t\t       record_type, size_zero_node, field_list);\n+\n+      field_list =\n+\tmake_descriptor_field (\"DIGITS\", gnat_type_for_size (8, 1),\n+\t\t\t       record_type, size_zero_node, field_list);\n+\n+\n+      field_list =\n+\tmake_descriptor_field (\"AFLAGS\", gnat_type_for_size (8, 1),\n+\t\t\t       record_type,\n+\t\t\t       size_int ((mech == By_Descriptor_NCA ||\n+\t\t\t\t\t  mech == By_Short_Descriptor_NCA)\n+\t\t\t\t\t ? 0\n+\t\t\t\t\t /* Set FL_COLUMN, FL_COEFF, and\n+\t\t\t\t\t    FL_BOUNDS.  */\n+\t\t\t\t\t : (TREE_CODE (type) == ARRAY_TYPE\n+\t\t\t\t\t    && TYPE_CONVENTION_FORTRAN_P (type)\n+\t\t\t\t\t    ? 224 : 192)), field_list);\n+\n+      field_list =\n+\tmake_descriptor_field (\"DIMCT\", gnat_type_for_size (8, 1),\n+\t\t\t       record_type, size_int (ndim), field_list);\n+\n+      field_list =\n+\tmake_descriptor_field (\"ARSIZE\", gnat_type_for_size (32, 1),\n+\t\t\t       record_type, size_in_bytes (type), field_list);\n \n       /* Now build a pointer to the 0,0,0... element.  */\n       tem = build0 (PLACEHOLDER_EXPR, type);\n@@ -2528,16 +2517,10 @@ build_vms_descriptor32 (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n \t\t      convert (TYPE_DOMAIN (inner_type), size_zero_node),\n \t\t      NULL_TREE, NULL_TREE);\n \n-      field_list\n-\t= chainon (field_list,\n-\t\t   make_descriptor_field\n-\t\t   (\"A0\",\n-\t\t    build_pointer_type_for_mode (inner_type, SImode, false),\n-\t\t    record_type,\n-\t\t    build1 (ADDR_EXPR,\n-\t\t\t    build_pointer_type_for_mode (inner_type, SImode,\n-\t\t\t\t\t\t\t false),\n-\t\t\t    tem)));\n+      field_list =\n+\tmake_descriptor_field (\"A0\", pointer32_type, record_type,\n+\t\t\t       build1 (ADDR_EXPR, pointer32_type, tem),\n+\t\t\t       field_list);\n \n       /* Next come the addressing coefficients.  */\n       tem = size_one_node;\n@@ -2555,11 +2538,9 @@ build_vms_descriptor32 (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n \t  fname[0] = ((mech == By_Descriptor_NCA ||\n                        mech == By_Short_Descriptor_NCA) ? 'S' : 'M');\n \t  fname[1] = '0' + i, fname[2] = 0;\n-\t  field_list\n-\t    = chainon (field_list,\n-\t\t       make_descriptor_field (fname,\n-\t\t\t\t\t      gnat_type_for_size (32, 1),\n-\t\t\t\t\t      record_type, idx_length));\n+\t  field_list =\n+\t    make_descriptor_field (fname, gnat_type_for_size (32, 1),\n+\t\t\t\t   record_type, idx_length, field_list);\n \n \t  if (mech == By_Descriptor_NCA || mech == By_Short_Descriptor_NCA)\n \t    tem = idx_length;\n@@ -2571,18 +2552,16 @@ build_vms_descriptor32 (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n \t  char fname[3];\n \n \t  fname[0] = 'L', fname[1] = '0' + i, fname[2] = 0;\n-\t  field_list\n-\t    = chainon (field_list,\n-\t\t       make_descriptor_field\n-\t\t       (fname, gnat_type_for_size (32, 1), record_type,\n-\t\t\tTYPE_MIN_VALUE (idx_arr[i])));\n+\t  field_list =\n+\t    make_descriptor_field (fname, gnat_type_for_size (32, 1),\n+\t\t\t\t   record_type, TYPE_MIN_VALUE (idx_arr[i]),\n+\t\t\t\t   field_list);\n \n \t  fname[0] = 'U';\n-\t  field_list\n-\t    = chainon (field_list,\n-\t\t       make_descriptor_field\n-\t\t       (fname, gnat_type_for_size (32, 1), record_type,\n-\t\t\tTYPE_MAX_VALUE (idx_arr[i])));\n+\t  field_list =\n+\t    make_descriptor_field (fname, gnat_type_for_size (32, 1),\n+\t\t\t\t   record_type, TYPE_MAX_VALUE (idx_arr[i]),\n+\t\t\t\t   field_list);\n \t}\n       break;\n \n@@ -2591,7 +2570,7 @@ build_vms_descriptor32 (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n     }\n \n   TYPE_NAME (record_type) = create_concat_name (gnat_entity, \"DESC\");\n-  finish_record_type (record_type, field_list, 0, false);\n+  finish_record_type (record_type, nreverse (field_list), 0, false);\n   return record_type;\n }\n \n@@ -2607,7 +2586,7 @@ build_vms_descriptor (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n {\n   tree record64_type = make_node (RECORD_TYPE);\n   tree pointer64_type;\n-  tree field_list64 = 0;\n+  tree field_list64 = NULL_TREE;\n   int klass;\n   int dtype = 0;\n   tree inner_type;\n@@ -2737,38 +2716,30 @@ build_vms_descriptor (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n   /* Make the type for a 64-bit descriptor for VMS.  The first six fields\n      are the same for all types.  */\n   field_list64\n-    = chainon (field_list64,\n-\t       make_descriptor_field (\"MBO\", gnat_type_for_size (16, 1),\n-\t\t\t\t      record64_type, size_int (1)));\n+    = make_descriptor_field (\"MBO\", gnat_type_for_size (16, 1),\n+\t\t\t     record64_type, size_int (1), field_list64);\n   field_list64\n-    = chainon (field_list64,\n-\t       make_descriptor_field (\"DTYPE\", gnat_type_for_size (8, 1),\n-\t\t\t\t      record64_type, size_int (dtype)));\n+    = make_descriptor_field (\"DTYPE\", gnat_type_for_size (8, 1),\n+\t\t\t     record64_type, size_int (dtype), field_list64);\n   field_list64\n-    = chainon (field_list64,\n-\t       make_descriptor_field (\"CLASS\", gnat_type_for_size (8, 1),\n-\t\t\t\t      record64_type, size_int (klass)));\n+    = make_descriptor_field (\"CLASS\", gnat_type_for_size (8, 1),\n+\t\t\t     record64_type, size_int (klass), field_list64);\n   field_list64\n-    = chainon (field_list64,\n-\t       make_descriptor_field (\"MBMO\", gnat_type_for_size (32, 1),\n-\t\t\t\t      record64_type, ssize_int (-1)));\n+    = make_descriptor_field (\"MBMO\", gnat_type_for_size (32, 1),\n+\t\t\t     record64_type, ssize_int (-1), field_list64);\n   field_list64\n-    = chainon (field_list64,\n-\t       make_descriptor_field (\"LENGTH\", gnat_type_for_size (64, 1),\n-\t\t\t\t      record64_type,\n-\t\t\t\t      size_in_bytes (mech == By_Descriptor_A\n-\t\t\t\t\t\t     ? inner_type : type)));\n+    = make_descriptor_field (\"LENGTH\", gnat_type_for_size (64, 1),\n+\t\t\t     record64_type,\n+\t\t\t     size_in_bytes (mech == By_Descriptor_A\n+\t\t\t\t\t    ? inner_type : type), field_list64);\n \n   pointer64_type = build_pointer_type_for_mode (type, DImode, false);\n \n   field_list64\n-    = chainon (field_list64,\n-\t       make_descriptor_field (\"POINTER\", pointer64_type,\n-\t\t\t\t      record64_type,\n-\t\t\t\t      build_unary_op (ADDR_EXPR,\n-\t\t\t\t\t\t      pointer64_type,\n-\t\t\t\t\t\t      build0 (PLACEHOLDER_EXPR,\n-\t\t\t\t\t\t\t      type))));\n+    = make_descriptor_field (\"POINTER\", pointer64_type, record64_type,\n+\t\t\t     build_unary_op (ADDR_EXPR, pointer64_type,\n+\t\t\t\t\t     build0 (PLACEHOLDER_EXPR,\n+\t\t\t\t\t\t     type)), field_list64);\n \n   switch (mech)\n     {\n@@ -2778,60 +2749,52 @@ build_vms_descriptor (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n \n     case By_Descriptor_SB:\n       field_list64\n-\t= chainon (field_list64,\n-\t\t   make_descriptor_field\n-\t\t   (\"SB_L1\", gnat_type_for_size (64, 1), record64_type,\n-\t\t    TREE_CODE (type) == ARRAY_TYPE\n-\t\t    ? TYPE_MIN_VALUE (TYPE_DOMAIN (type)) : size_zero_node));\n+\t= make_descriptor_field (\"SB_L1\", gnat_type_for_size (64, 1),\n+\t\t\t\t record64_type,\n+\t\t\t\t (TREE_CODE (type) == ARRAY_TYPE\n+\t\t\t\t  ? TYPE_MIN_VALUE (TYPE_DOMAIN (type))\n+\t\t\t\t  : size_zero_node), field_list64);\n       field_list64\n-\t= chainon (field_list64,\n-\t\t   make_descriptor_field\n-\t\t   (\"SB_U1\", gnat_type_for_size (64, 1), record64_type,\n-\t\t    TREE_CODE (type) == ARRAY_TYPE\n-\t\t    ? TYPE_MAX_VALUE (TYPE_DOMAIN (type)) : size_zero_node));\n+\t= make_descriptor_field (\"SB_U1\", gnat_type_for_size (64, 1),\n+\t\t\t\t record64_type,\n+\t\t\t\t (TREE_CODE (type) == ARRAY_TYPE\n+\t\t\t\t  ? TYPE_MAX_VALUE (TYPE_DOMAIN (type))\n+\t\t\t\t  : size_zero_node), field_list64);\n       break;\n \n     case By_Descriptor_A:\n     case By_Descriptor_NCA:\n-      field_list64 = chainon (field_list64,\n-\t\t\t    make_descriptor_field (\"SCALE\",\n-\t\t\t\t\t\t   gnat_type_for_size (8, 1),\n-\t\t\t\t\t\t   record64_type,\n-\t\t\t\t\t\t   size_zero_node));\n-\n-      field_list64 = chainon (field_list64,\n-\t\t\t    make_descriptor_field (\"DIGITS\",\n-\t\t\t\t\t\t   gnat_type_for_size (8, 1),\n-\t\t\t\t\t\t   record64_type,\n-\t\t\t\t\t\t   size_zero_node));\n+      field_list64\n+\t= make_descriptor_field (\"SCALE\", gnat_type_for_size (8, 1),\n+\t\t\t\t record64_type, size_zero_node, field_list64);\n+\n+      field_list64\n+\t= make_descriptor_field (\"DIGITS\", gnat_type_for_size (8, 1),\n+\t\t\t\t record64_type, size_zero_node, field_list64);\n+\n+      dtype = (mech == By_Descriptor_NCA\n+\t       ? 0\n+\t       /* Set FL_COLUMN, FL_COEFF, and\n+\t\t  FL_BOUNDS.  */\n+\t       : (TREE_CODE (type) == ARRAY_TYPE\n+\t\t  && TYPE_CONVENTION_FORTRAN_P (type)\n+\t\t  ? 224 : 192));\n+      field_list64\n+\t= make_descriptor_field (\"AFLAGS\", gnat_type_for_size (8, 1),\n+\t\t\t\t record64_type, size_int (dtype),\n+\t\t\t\t field_list64);\n \n       field_list64\n-\t= chainon (field_list64,\n-\t\t   make_descriptor_field\n-\t\t   (\"AFLAGS\", gnat_type_for_size (8, 1), record64_type,\n-\t\t    size_int (mech == By_Descriptor_NCA\n-\t\t\t      ? 0\n-\t\t\t      /* Set FL_COLUMN, FL_COEFF, and FL_BOUNDS.  */\n-\t\t\t      : (TREE_CODE (type) == ARRAY_TYPE\n-\t\t\t\t && TYPE_CONVENTION_FORTRAN_P (type)\n-\t\t\t\t ? 224 : 192))));\n-\n-      field_list64 = chainon (field_list64,\n-\t\t\t    make_descriptor_field (\"DIMCT\",\n-\t\t\t\t\t\t   gnat_type_for_size (8, 1),\n-\t\t\t\t\t\t   record64_type,\n-\t\t\t\t\t\t   size_int (ndim)));\n-\n-      field_list64 = chainon (field_list64,\n-\t\t\t    make_descriptor_field (\"MBZ\",\n-\t\t\t\t\t\t   gnat_type_for_size (32, 1),\n-\t\t\t\t\t\t   record64_type,\n-\t\t\t\t\t\t   size_int (0)));\n-      field_list64 = chainon (field_list64,\n-\t\t\t    make_descriptor_field (\"ARSIZE\",\n-\t\t\t\t\t\t   gnat_type_for_size (64, 1),\n-\t\t\t\t\t\t   record64_type,\n-\t\t\t\t\t\t   size_in_bytes (type)));\n+\t= make_descriptor_field (\"DIMCT\", gnat_type_for_size (8, 1),\n+\t\t\t\t record64_type, size_int (ndim), field_list64);\n+\n+      field_list64\n+\t= make_descriptor_field (\"MBZ\", gnat_type_for_size (32, 1),\n+\t\t\t\t record64_type, size_int (0), field_list64);\n+      field_list64\n+\t= make_descriptor_field (\"ARSIZE\", gnat_type_for_size (64, 1),\n+\t\t\t\t record64_type, size_in_bytes (type),\n+\t\t\t\t field_list64);\n \n       /* Now build a pointer to the 0,0,0... element.  */\n       tem = build0 (PLACEHOLDER_EXPR, type);\n@@ -2842,15 +2805,9 @@ build_vms_descriptor (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n \t\t      NULL_TREE, NULL_TREE);\n \n       field_list64\n-\t= chainon (field_list64,\n-\t\t   make_descriptor_field\n-\t\t   (\"A0\",\n-\t\t    build_pointer_type_for_mode (inner_type, DImode, false),\n-\t\t    record64_type,\n-\t\t    build1 (ADDR_EXPR,\n-\t\t\t    build_pointer_type_for_mode (inner_type, DImode,\n-\t\t\t\t\t\t\t false),\n-\t\t\t    tem)));\n+\t= make_descriptor_field (\"A0\", pointer64_type, record64_type,\n+\t\t\t\t build1 (ADDR_EXPR, pointer64_type, tem),\n+\t\t\t\t field_list64);\n \n       /* Next come the addressing coefficients.  */\n       tem = size_one_node;\n@@ -2868,10 +2825,8 @@ build_vms_descriptor (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n \t  fname[0] = (mech == By_Descriptor_NCA ? 'S' : 'M');\n \t  fname[1] = '0' + i, fname[2] = 0;\n \t  field_list64\n-\t    = chainon (field_list64,\n-\t\t       make_descriptor_field (fname,\n-\t\t\t\t\t      gnat_type_for_size (64, 1),\n-\t\t\t\t\t      record64_type, idx_length));\n+\t    = make_descriptor_field (fname, gnat_type_for_size (64, 1),\n+\t\t\t\t     record64_type, idx_length, field_list64);\n \n \t  if (mech == By_Descriptor_NCA)\n \t    tem = idx_length;\n@@ -2884,17 +2839,15 @@ build_vms_descriptor (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n \n \t  fname[0] = 'L', fname[1] = '0' + i, fname[2] = 0;\n \t  field_list64\n-\t    = chainon (field_list64,\n-\t\t       make_descriptor_field\n-\t\t       (fname, gnat_type_for_size (64, 1), record64_type,\n-\t\t\tTYPE_MIN_VALUE (idx_arr[i])));\n+\t    = make_descriptor_field (fname, gnat_type_for_size (64, 1),\n+\t\t\t\t     record64_type,\n+\t\t\t\t     TYPE_MIN_VALUE (idx_arr[i]), field_list64);\n \n \t  fname[0] = 'U';\n \t  field_list64\n-\t    = chainon (field_list64,\n-\t\t       make_descriptor_field\n-\t\t       (fname, gnat_type_for_size (64, 1), record64_type,\n-\t\t\tTYPE_MAX_VALUE (idx_arr[i])));\n+\t    = make_descriptor_field (fname, gnat_type_for_size (64, 1),\n+\t\t\t\t     record64_type,\n+\t\t\t\t     TYPE_MAX_VALUE (idx_arr[i]), field_list64);\n \t}\n       break;\n \n@@ -2903,21 +2856,24 @@ build_vms_descriptor (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n     }\n \n   TYPE_NAME (record64_type) = create_concat_name (gnat_entity, \"DESC64\");\n-  finish_record_type (record64_type, field_list64, 0, false);\n+  finish_record_type (record64_type, nreverse (field_list64), 0, false);\n   return record64_type;\n }\n \n-/* Utility routine for above code to make a field.  */\n+/* Utility routine for above code to make a field.  FIELD_LIST is the\n+   list of decls being built; the new decl is chained on to the front of\n+   the list.  */\n \n static tree\n make_descriptor_field (const char *name, tree type,\n-\t\t       tree rec_type, tree initial)\n+\t\t       tree rec_type, tree initial, tree field_list)\n {\n   tree field\n     = create_field_decl (get_identifier (name), type, rec_type, NULL_TREE,\n \t\t\t NULL_TREE, 0, 0);\n \n   DECL_INITIAL (field) = initial;\n+  DECL_CHAIN (field) = field_list;\n   return field;\n }\n "}]}