{"sha": "9bfda66407d589446ba3973bb1b4d3f23fc6bc88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJmZGE2NjQwN2Q1ODk0NDZiYTM5NzNiYjFiNGQzZjIzZmM2YmM4OA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2017-07-26T23:03:41Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-07-26T23:03:41Z"}, "message": "rs6000-cpus.def (ISA_2_7_MASKS_SERVER): Delete -mvsx-small-integer option.\n\n[gcc]\n2017-07-26  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000-cpus.def (ISA_2_7_MASKS_SERVER): Delete\n\t-mvsx-small-integer option.\n\t(ISA_3_0_MASKS_IEEE): Likewise.\n\t(OTHER_VSX_VECTOR_MASKS): Likewise.\n\t(POWERPC_MASKS): Likewise.\n\t* config/rs6000/rs6000.opt (-mvsx-small-integer): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_hard_regno_mode_ok): Simplify\n\tcode, only testing for DImode being allowed in non-VSX floating\n\tpoint registers.\n\t(rs6000_init_hard_regno_mode_ok): Change TARGET_VSX_SMALL_INTEGER\n\tto TARGET_P8_VECTOR test.  Remove redundant VSX test inside of\n\tanother VSX test.\n\t(rs6000_option_override_internal): Delete -mvsx-small-integer.\n\t(rs6000_expand_vector_set): Change TARGET_VSX_SMALL_INTEGER to\n\tTARGET_P8_VECTOR test.\n\t(rs6000_secondary_reload_simple_move): Likewise.\n\t(rs6000_preferred_reload_class): Delete TARGET_VSX_SMALL_INTEGER,\n\tsince TARGET_P9_VECTOR was already tested.\n\t(rs6000_opt_masks): Remove -mvsx-small-integer.\n\t* config/rs6000/vsx.md (vsx_extract_<mode>): Delete\n\tTARGET_VSX_SMALL_INTEGER, since a test for TARGET_P9_VECTOR was\n\tused.\n\t(vsx_extract_<mode>_p9): Delete TARGET_VSX_SMALL_INTEGER, since a\n\ttest for TARGET_VEXTRACTUB was used, and that uses\n\tTARGET_P9_VECTOR.\n\t(p9 extract splitter): Likewise.\n\t(vsx_extract_<mode>_di_p9): Likewise.\n\t(vsx_extract_<mode>_store_p9): Likewise.\n\t(vsx_extract_si): Delete TARGET_VSX_SMALL_INTEGER, since a test\n\tfor TARGET_P9_VECTOR was used.  Delete code that is now dead with\n\tthe elimination of TARGET_VSX_SMALL_INTEGER.\n\t(vsx_extract_<mode>_p8): Likewise.\n\t(vsx_ext_<VSX_EXTRACT_I:VS_scalar>_fl_<FL_CONV:mode>): Likewise.\n\t(vsx_ext_<VSX_EXTRACT_I:VS_scalar>_ufl_<FL_CONV:mode>): Likewise.\n\t(vsx_set_<mode>_p9): Likewise.\n\t(vsx_set_v4sf_p9): Likewise.\n\t(vsx_set_v4sf_p9_zero): Likewise.\n\t(vsx_insert_extract_v4sf_p9): Likewise.\n\t(vsx_insert_extract_v4sf_p9_2): Likewise.\n\t* config/rs6000/rs6000.md (sign extend splitter): Change\n\tTARGET_VSX_SMALL_INTEGER to TARGET_P8_VECTOR test.\n\t(floatsi<mode>2_lfiwax_mem): Likewise.\n\t(floatunssi<mode>2_lfiwzx_mem): Likewise.\n\t(float<QHI:mode><FP_ISA3:mode>2): Delete TARGET_VSX_SMALL_INTEGER,\n\tsince a test for TARGET_P9_VECTOR was used.\n\t(float<QHI:mode><FP_ISA3:mode>2_internal): Likewise.\n\t(floatuns<QHI:mode><FP_ISA3:mode>2): Likewise.\n\t(floatuns<QHI:mode><FP_ISA3:mode>2_internal): Likewise.\n\t(fix_trunc<mode>si2): Change TARGET_VSX_SMALL_INTEGER to\n\tTARGET_P8_VECTOR test.\n\t(fix_trunc<mode>si2_stfiwx): Likewise.\n\t(fix_trunc<mode>si2_internal): Likewise.\n\t(fix_trunc<SFDF:mode><QHI:mode>2): Delete\n\tTARGET_VSX_SMALL_INTEGER, since a test for TARGET_P9_VECTOR was\n\tused.\n\t(fix_trunc<SFDF:mode><QHI:mode>2_internal): Likewise.\n\t(fixuns_trunc<mode>si2): Change TARGET_VSX_SMALL_INTEGER to\n\tTARGET_P8_VECTOR test.\n\t(fixuns_trunc<mode>si2_stfiwx): Likewise.\n\t(fixuns_trunc<SFDF:mode><QHI:mode>2): Delete\n\tTARGET_VSX_SMALL_INTEGER, since a test for TARGET_P9_VECTOR was\n\tused.\n\t(fixuns_trunc<SFDF:mode><QHI:mode>2_internal): Likewise.\n\t(fctiw<u>z_<mode>_smallint): Delete TARGET_VSX_SMALL_INTEGER,\n\tsince a test for TARGET_P9_VECTOR was used.\n\t(splitter for loading small constants): Likewise.\n\n[gcc/testsuite]\n2017-07-25  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/vsx-himode.c: Delete -mvsx-small-integer\n\toption.\n\t* gcc.target/powerpc/vsx-himode2.c: Likewise.\n\t* gcc.target/powerpc/vsx-himode3.c: Likewise.\n\t* gcc.target/powerpc/vsx-qimode.c: Likewise.\n\t* gcc.target/powerpc/vsx-qimode2.c: Likewise.\n\t* gcc.target/powerpc/vsx-qimode3.c: Likewise.\n\t* gcc.target/powerpc/vsx-simode.c: Likewise.\n\t* gcc.target/powerpc/vsx-simode2.c: Likewise.\n\t* gcc.target/powerpc/vsx-simode3.c: Likewise.\n\nFrom-SVN: r250595", "tree": {"sha": "78ec029821cecb46035e3e80abcf061100d08d68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78ec029821cecb46035e3e80abcf061100d08d68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bfda66407d589446ba3973bb1b4d3f23fc6bc88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bfda66407d589446ba3973bb1b4d3f23fc6bc88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bfda66407d589446ba3973bb1b4d3f23fc6bc88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/comments", "author": null, "committer": null, "parents": [{"sha": "958dc0c2248fa83b12597d3be3e60fa483ec459b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/958dc0c2248fa83b12597d3be3e60fa483ec459b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/958dc0c2248fa83b12597d3be3e60fa483ec459b"}], "stats": {"total": 255, "additions": 140, "deletions": 115}, "files": [{"sha": "cc7f1f997f6da0cd0e4e50acef5deb618acb641a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bfda66407d589446ba3973bb1b4d3f23fc6bc88", "patch": "@@ -1,3 +1,72 @@\n+2017-07-26  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000-cpus.def (ISA_2_7_MASKS_SERVER): Delete\n+\t-mvsx-small-integer option.\n+\t(ISA_3_0_MASKS_IEEE): Likewise.\n+\t(OTHER_VSX_VECTOR_MASKS): Likewise.\n+\t(POWERPC_MASKS): Likewise.\n+\t* config/rs6000/rs6000.opt (-mvsx-small-integer): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_hard_regno_mode_ok): Simplify\n+\tcode, only testing for DImode being allowed in non-VSX floating\n+\tpoint registers.\n+\t(rs6000_init_hard_regno_mode_ok): Change TARGET_VSX_SMALL_INTEGER\n+\tto TARGET_P8_VECTOR test.  Remove redundant VSX test inside of\n+\tanother VSX test.\n+\t(rs6000_option_override_internal): Delete -mvsx-small-integer.\n+\t(rs6000_expand_vector_set): Change TARGET_VSX_SMALL_INTEGER to\n+\tTARGET_P8_VECTOR test.\n+\t(rs6000_secondary_reload_simple_move): Likewise.\n+\t(rs6000_preferred_reload_class): Delete TARGET_VSX_SMALL_INTEGER,\n+\tsince TARGET_P9_VECTOR was already tested.\n+\t(rs6000_opt_masks): Remove -mvsx-small-integer.\n+\t* config/rs6000/vsx.md (vsx_extract_<mode>): Delete\n+\tTARGET_VSX_SMALL_INTEGER, since a test for TARGET_P9_VECTOR was\n+\tused.\n+\t(vsx_extract_<mode>_p9): Delete TARGET_VSX_SMALL_INTEGER, since a\n+\ttest for TARGET_VEXTRACTUB was used, and that uses\n+\tTARGET_P9_VECTOR.\n+\t(p9 extract splitter): Likewise.\n+\t(vsx_extract_<mode>_di_p9): Likewise.\n+\t(vsx_extract_<mode>_store_p9): Likewise.\n+\t(vsx_extract_si): Delete TARGET_VSX_SMALL_INTEGER, since a test\n+\tfor TARGET_P9_VECTOR was used.  Delete code that is now dead with\n+\tthe elimination of TARGET_VSX_SMALL_INTEGER.\n+\t(vsx_extract_<mode>_p8): Likewise.\n+\t(vsx_ext_<VSX_EXTRACT_I:VS_scalar>_fl_<FL_CONV:mode>): Likewise.\n+\t(vsx_ext_<VSX_EXTRACT_I:VS_scalar>_ufl_<FL_CONV:mode>): Likewise.\n+\t(vsx_set_<mode>_p9): Likewise.\n+\t(vsx_set_v4sf_p9): Likewise.\n+\t(vsx_set_v4sf_p9_zero): Likewise.\n+\t(vsx_insert_extract_v4sf_p9): Likewise.\n+\t(vsx_insert_extract_v4sf_p9_2): Likewise.\n+\t* config/rs6000/rs6000.md (sign extend splitter): Change\n+\tTARGET_VSX_SMALL_INTEGER to TARGET_P8_VECTOR test.\n+\t(floatsi<mode>2_lfiwax_mem): Likewise.\n+\t(floatunssi<mode>2_lfiwzx_mem): Likewise.\n+\t(float<QHI:mode><FP_ISA3:mode>2): Delete TARGET_VSX_SMALL_INTEGER,\n+\tsince a test for TARGET_P9_VECTOR was used.\n+\t(float<QHI:mode><FP_ISA3:mode>2_internal): Likewise.\n+\t(floatuns<QHI:mode><FP_ISA3:mode>2): Likewise.\n+\t(floatuns<QHI:mode><FP_ISA3:mode>2_internal): Likewise.\n+\t(fix_trunc<mode>si2): Change TARGET_VSX_SMALL_INTEGER to\n+\tTARGET_P8_VECTOR test.\n+\t(fix_trunc<mode>si2_stfiwx): Likewise.\n+\t(fix_trunc<mode>si2_internal): Likewise.\n+\t(fix_trunc<SFDF:mode><QHI:mode>2): Delete\n+\tTARGET_VSX_SMALL_INTEGER, since a test for TARGET_P9_VECTOR was\n+\tused.\n+\t(fix_trunc<SFDF:mode><QHI:mode>2_internal): Likewise.\n+\t(fixuns_trunc<mode>si2): Change TARGET_VSX_SMALL_INTEGER to\n+\tTARGET_P8_VECTOR test.\n+\t(fixuns_trunc<mode>si2_stfiwx): Likewise.\n+\t(fixuns_trunc<SFDF:mode><QHI:mode>2): Delete\n+\tTARGET_VSX_SMALL_INTEGER, since a test for TARGET_P9_VECTOR was\n+\tused.\n+\t(fixuns_trunc<SFDF:mode><QHI:mode>2_internal): Likewise.\n+\t(fctiw<u>z_<mode>_smallint): Delete TARGET_VSX_SMALL_INTEGER,\n+\tsince a test for TARGET_P9_VECTOR was used.\n+\t(splitter for loading small constants): Likewise.\n+\n 2017-07-26  Andrew Pinski  <apinski@cavium.com>\n \n \t* config/aarch64/aarch64.c (thunderx_vector_cost): Fix"}, {"sha": "51aff3a5c3177f6565e14ffa58b766b4c72feea5", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=9bfda66407d589446ba3973bb1b4d3f23fc6bc88", "patch": "@@ -55,8 +55,7 @@\n \t\t\t\t | OPTION_MASK_EFFICIENT_UNALIGNED_VSX\t\\\n \t\t\t\t | OPTION_MASK_HTM\t\t\t\\\n \t\t\t\t | OPTION_MASK_QUAD_MEMORY\t\t\\\n-\t\t\t\t | OPTION_MASK_QUAD_MEMORY_ATOMIC\t\\\n-\t\t\t\t | OPTION_MASK_VSX_SMALL_INTEGER)\n+\t\t\t\t | OPTION_MASK_QUAD_MEMORY_ATOMIC)\n \n /* Add ISEL back into ISA 3.0, since it is supposed to be a win.  Do not add\n    FLOAT128_HW here until we are ready to make -mfloat128 on by default.  */\n@@ -75,8 +74,7 @@\n #define ISA_3_0_MASKS_IEEE\t(OPTION_MASK_VSX\t\t\t\\\n \t\t\t\t | OPTION_MASK_P8_VECTOR\t\t\\\n \t\t\t\t | OPTION_MASK_P9_VECTOR\t\t\\\n-\t\t\t\t | OPTION_MASK_DIRECT_MOVE\t\t\\\n-\t\t\t\t | OPTION_MASK_VSX_SMALL_INTEGER)\n+\t\t\t\t | OPTION_MASK_DIRECT_MOVE)\n \n /* Flags that need to be turned off if -mno-power9-vector.  */\n #define OTHER_P9_VECTOR_MASKS\t(OPTION_MASK_FLOAT128_HW\t\t\\\n@@ -96,7 +94,6 @@\n \t\t\t\t | OPTION_MASK_FLOAT128_KEYWORD\t\t\\\n \t\t\t\t | OPTION_MASK_FLOAT128_TYPE\t\t\\\n \t\t\t\t | OPTION_MASK_P8_VECTOR\t\t\\\n-\t\t\t\t | OPTION_MASK_VSX_SMALL_INTEGER\t\\\n \t\t\t\t | OPTION_MASK_VSX_TIMODE)\n \n #define POWERPC_7400_MASK\t(OPTION_MASK_PPC_GFXOPT | OPTION_MASK_ALTIVEC)\n@@ -152,7 +149,6 @@\n \t\t\t\t | OPTION_MASK_STRICT_ALIGN_OPTIONAL\t\\\n \t\t\t\t | OPTION_MASK_TOC_FUSION\t\t\\\n \t\t\t\t | OPTION_MASK_VSX\t\t\t\\\n-\t\t\t\t | OPTION_MASK_VSX_SMALL_INTEGER\t\\\n \t\t\t\t | OPTION_MASK_VSX_TIMODE)\n \n #endif"}, {"sha": "cb2a30b62edf99404e56796fe885f37bd90d1d1b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 11, "deletions": 34, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9bfda66407d589446ba3973bb1b4d3f23fc6bc88", "patch": "@@ -2104,14 +2104,11 @@ rs6000_hard_regno_mode_ok (int regno, machine_mode mode)\n \t  if(GET_MODE_SIZE (mode) == UNITS_PER_FP_WORD)\n \t    return 1;\n \n-\t  if (TARGET_VSX_SMALL_INTEGER)\n-\t    {\n-\t      if (mode == SImode)\n-\t\treturn 1;\n+\t  if (TARGET_P8_VECTOR && (mode == SImode))\n+\t    return 1;\n \n-\t      if (TARGET_P9_VECTOR && (mode == HImode || mode == QImode))\n-\t\treturn 1;\n-\t    }\n+\t  if (TARGET_P9_VECTOR && (mode == QImode || mode == HImode))\n+\t    return 1;\n \t}\n \n       if (PAIRED_SIMD_REGNO_P (regno) && TARGET_PAIRED_FLOAT\n@@ -3291,7 +3288,7 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n     rs6000_constraints[RS6000_CONSTRAINT_we] = VSX_REGS;\n \n   /* Support small integers in VSX registers.  */\n-  if (TARGET_VSX_SMALL_INTEGER)\n+  if (TARGET_P8_VECTOR)\n     {\n       rs6000_constraints[RS6000_CONSTRAINT_wH] = ALTIVEC_REGS;\n       rs6000_constraints[RS6000_CONSTRAINT_wI] = FLOAT_REGS;\n@@ -3446,18 +3443,14 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \t    }\n \t}\n \n-      if (TARGET_VSX)\n-\t{\n-\t  reg_addr[DFmode].scalar_in_vmx_p = true;\n-\t  reg_addr[DImode].scalar_in_vmx_p = true;\n-\t}\n+      reg_addr[DFmode].scalar_in_vmx_p = true;\n+      reg_addr[DImode].scalar_in_vmx_p = true;\n \n       if (TARGET_P8_VECTOR)\n-\treg_addr[SFmode].scalar_in_vmx_p = true;\n-\n-      if (TARGET_VSX_SMALL_INTEGER)\n \t{\n+\t  reg_addr[SFmode].scalar_in_vmx_p = true;\n \t  reg_addr[SImode].scalar_in_vmx_p = true;\n+\n \t  if (TARGET_P9_VECTOR)\n \t    {\n \t      reg_addr[HImode].scalar_in_vmx_p = true;\n@@ -4632,20 +4625,6 @@ rs6000_option_override_internal (bool global_init_p)\n \t}\n     }\n \n-  /* Check whether we should allow small integers into VSX registers.  We\n-     require direct move to prevent the register allocator from having to move\n-     variables through memory to do moves.  SImode can be used on ISA 2.07,\n-     while HImode and QImode require ISA 3.0.  */\n-  if (TARGET_VSX_SMALL_INTEGER\n-      && (!TARGET_DIRECT_MOVE || !TARGET_P8_VECTOR))\n-    {\n-      if (rs6000_isa_flags_explicit & OPTION_MASK_VSX_SMALL_INTEGER)\n-\terror (\"-mvsx-small-integer requires -mpower8-vector, \"\n-\t       \"and -mdirect-move\");\n-\n-      rs6000_isa_flags &= ~OPTION_MASK_VSX_SMALL_INTEGER;\n-    }\n-\n   /* Set long double size before the IEEE 128-bit tests.  */\n   if (!global_options_set.x_rs6000_long_double_type_size)\n     {\n@@ -7338,7 +7317,7 @@ rs6000_expand_vector_set (rtx target, rtx val, int elt)\n       else if (mode == V2DImode)\n \tinsn = gen_vsx_set_v2di (target, target, val, elt_rtx);\n \n-      else if (TARGET_P9_VECTOR && TARGET_VSX_SMALL_INTEGER && TARGET_POWERPC64)\n+      else if (TARGET_P9_VECTOR && TARGET_POWERPC64)\n \t{\n \t  if (mode == V4SImode)\n \t    insn = gen_vsx_set_v4si_p9 (target, target, val, elt_rtx);\n@@ -19713,7 +19692,7 @@ rs6000_secondary_reload_simple_move (enum rs6000_reg_type to_type,\n \t}\n \n       /* ISA 2.07: MTVSRWZ or  MFVSRWZ.  */\n-      if (TARGET_VSX_SMALL_INTEGER)\n+      if (TARGET_P8_VECTOR)\n \t{\n \t  if (mode == SImode)\n \t    return true;\n@@ -20547,7 +20526,6 @@ rs6000_preferred_reload_class (rtx x, enum reg_class rclass)\n \t      /* ISA 3.0 can load -128..127 using the XXSPLTIB instruction and\n \t\t a sign extend in the Altivec registers.  */\n \t      if (IN_RANGE (value, -128, 127) && TARGET_P9_VECTOR\n-\t\t  && TARGET_VSX_SMALL_INTEGER\n \t\t  && (rclass == ALTIVEC_REGS || rclass == VSX_REGS))\n \t\treturn ALTIVEC_REGS;\n \t    }\n@@ -36255,7 +36233,6 @@ static struct rs6000_opt_mask const rs6000_opt_masks[] =\n   { \"toc-fusion\",\t\tOPTION_MASK_TOC_FUSION,\t\tfalse, true  },\n   { \"update\",\t\t\tOPTION_MASK_NO_UPDATE,\t\ttrue , true  },\n   { \"vsx\",\t\t\tOPTION_MASK_VSX,\t\tfalse, true  },\n-  { \"vsx-small-integer\",\tOPTION_MASK_VSX_SMALL_INTEGER,\tfalse, true  },\n   { \"vsx-timode\",\t\tOPTION_MASK_VSX_TIMODE,\t\tfalse, true  },\n #ifdef OPTION_MASK_64BIT\n #if TARGET_AIX_OS"}, {"sha": "9eec9a479f55c5abff12d52aaba1ce5c08e6141a", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 19, "deletions": 28, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=9bfda66407d589446ba3973bb1b4d3f23fc6bc88", "patch": "@@ -1004,8 +1004,7 @@\n (define_split\n   [(set (match_operand:DI 0 \"altivec_register_operand\")\n \t(sign_extend:DI (match_operand:SI 1 \"altivec_register_operand\")))]\n-  \"TARGET_VSX_SMALL_INTEGER && TARGET_P8_VECTOR && !TARGET_P9_VECTOR\n-   && reload_completed\"\n+  \"TARGET_P8_VECTOR && !TARGET_P9_VECTOR && reload_completed\"\n   [(const_int 0)]\n {\n   rtx dest = operands[0];\n@@ -5161,7 +5160,7 @@\n   operands[1] = rs6000_address_for_fpconvert (operands[1]);\n   if (GET_CODE (operands[2]) == SCRATCH)\n     operands[2] = gen_reg_rtx (DImode);\n-  if (TARGET_VSX_SMALL_INTEGER)\n+  if (TARGET_P8_VECTOR)\n     emit_insn (gen_extendsidi2 (operands[2], operands[1]));\n   else\n     emit_insn (gen_lfiwax (operands[2], operands[1]));\n@@ -5238,7 +5237,7 @@\n   operands[1] = rs6000_address_for_fpconvert (operands[1]);\n   if (GET_CODE (operands[2]) == SCRATCH)\n     operands[2] = gen_reg_rtx (DImode);\n-  if (TARGET_VSX_SMALL_INTEGER)\n+  if (TARGET_P8_VECTOR)\n     emit_insn (gen_zero_extendsidi2 (operands[2], operands[1]));\n   else\n     emit_insn (gen_lfiwzx (operands[2], operands[1]));\n@@ -5423,8 +5422,7 @@\n \t      (clobber (match_scratch:DI 2))\n \t      (clobber (match_scratch:DI 3))\n \t      (clobber (match_scratch:<QHI:MODE> 4))])]\n-  \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE && TARGET_POWERPC64\n-   && TARGET_VSX_SMALL_INTEGER\"\n+  \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE && TARGET_POWERPC64\"\n {\n   if (MEM_P (operands[1]))\n     operands[1] = rs6000_address_for_fpconvert (operands[1]);\n@@ -5437,8 +5435,7 @@\n    (clobber (match_scratch:DI 2 \"=wK,wi,wK\"))\n    (clobber (match_scratch:DI 3 \"=X,r,X\"))\n    (clobber (match_scratch:<QHI:MODE> 4 \"=X,X,wK\"))]\n-  \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE && TARGET_POWERPC64\n-   && TARGET_VSX_SMALL_INTEGER\"\n+  \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE && TARGET_POWERPC64\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n@@ -5477,8 +5474,7 @@\n \t\t    (match_operand:QHI 1 \"input_operand\" \"\")))\n \t      (clobber (match_scratch:DI 2 \"\"))\n \t      (clobber (match_scratch:DI 3 \"\"))])]\n-  \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE && TARGET_POWERPC64\n-   && TARGET_VSX_SMALL_INTEGER\"\n+  \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE && TARGET_POWERPC64\"\n {\n   if (MEM_P (operands[1]))\n     operands[1] = rs6000_address_for_fpconvert (operands[1]);\n@@ -5490,8 +5486,7 @@\n \t (match_operand:QHI 1 \"reg_or_indexed_operand\" \"wK,r,Z\")))\n    (clobber (match_scratch:DI 2 \"=wK,wi,wJwK\"))\n    (clobber (match_scratch:DI 3 \"=X,r,X\"))]\n-  \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE && TARGET_POWERPC64\n-   && TARGET_VSX_SMALL_INTEGER\"\n+  \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE && TARGET_POWERPC64\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n@@ -5524,7 +5519,7 @@\n   \"TARGET_HARD_FLOAT && <TARGET_FLOAT>\"\n   \"\n {\n-  if (!TARGET_VSX_SMALL_INTEGER)\n+  if (!TARGET_P8_VECTOR)\n     {\n       rtx src = force_reg (<MODE>mode, operands[1]);\n \n@@ -5551,7 +5546,7 @@\n   \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\n    && (<MODE>mode != SFmode || TARGET_SINGLE_FLOAT)\n    && TARGET_STFIWX && can_create_pseudo_p ()\n-   && !TARGET_VSX_SMALL_INTEGER\"\n+   && !TARGET_P8_VECTOR\"\n   \"#\"\n   \"\"\n   [(pc)]\n@@ -5592,7 +5587,7 @@\n \t(fix:SI (match_operand:SFDF 1 \"gpc_reg_operand\" \"d,<rreg>\")))\n    (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"=1,d\"))\n    (clobber (match_operand:DI 3 \"offsettable_mem_operand\" \"=o,o\"))]\n-  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT && !TARGET_VSX_SMALL_INTEGER\"\n+  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT && !TARGET_P8_VECTOR\"\n   \"#\"\n   \"\"\n   [(pc)]\n@@ -5629,8 +5624,7 @@\n   [(parallel [(set (match_operand:<QHI:MODE> 0 \"nonimmediate_operand\")\n \t\t   (fix:QHI (match_operand:SFDF 1 \"gpc_reg_operand\")))\n \t      (clobber (match_scratch:DI 2))])]\n-  \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE_64BIT\n-   && TARGET_VSX_SMALL_INTEGER\"\n+  \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE_64BIT\"\n {\n   if (MEM_P (operands[0]))\n     operands[0] = rs6000_address_for_fpconvert (operands[0]);\n@@ -5641,8 +5635,7 @@\n \t(fix:QHI\n \t (match_operand:SFDF 1 \"gpc_reg_operand\" \"<SFDF:Fv>,<SFDF:Fv>\")))\n    (clobber (match_scratch:DI 2 \"=X,wi\"))]\n-  \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE_64BIT\n-   && TARGET_VSX_SMALL_INTEGER\"\n+  \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE_64BIT\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n@@ -5672,7 +5665,7 @@\n   \"TARGET_HARD_FLOAT && <TARGET_FLOAT> && TARGET_FCTIWUZ && TARGET_STFIWX\"\n   \"\n {\n-  if (!TARGET_VSX_SMALL_INTEGER)\n+  if (!TARGET_P8_VECTOR)\n     {\n       emit_insn (gen_fixuns_trunc<mode>si2_stfiwx (operands[0], operands[1]));\n       DONE;\n@@ -5685,7 +5678,7 @@\n    (clobber (match_scratch:DI 2 \"=d\"))]\n   \"TARGET_HARD_FLOAT && <TARGET_FLOAT> && TARGET_FCTIWUZ\n    && TARGET_STFIWX && can_create_pseudo_p ()\n-   && !TARGET_VSX_SMALL_INTEGER\"\n+   && !TARGET_P8_VECTOR\"\n   \"#\"\n   \"\"\n   [(pc)]\n@@ -5734,8 +5727,7 @@\n   [(parallel [(set (match_operand:<QHI:MODE> 0 \"nonimmediate_operand\")\n \t\t   (unsigned_fix:QHI (match_operand:SFDF 1 \"gpc_reg_operand\")))\n \t      (clobber (match_scratch:DI 2))])]\n-  \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE_64BIT\n-   && TARGET_VSX_SMALL_INTEGER\"\n+  \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE_64BIT\"\n {\n   if (MEM_P (operands[0]))\n     operands[0] = rs6000_address_for_fpconvert (operands[0]);\n@@ -5746,8 +5738,7 @@\n \t(unsigned_fix:QHI\n \t (match_operand:SFDF 1 \"gpc_reg_operand\" \"<SFDF:Fv>,<SFDF:Fv>\")))\n    (clobber (match_scratch:DI 2 \"=X,wi\"))]\n-  \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE_64BIT\n-   && TARGET_VSX_SMALL_INTEGER\"\n+  \"TARGET_P9_VECTOR && TARGET_DIRECT_MOVE_64BIT\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n@@ -5777,7 +5768,7 @@\n (define_insn \"*fctiw<u>z_<mode>_smallint\"\n   [(set (match_operand:SI 0 \"vsx_register_operand\" \"=d,wi\")\n \t(any_fix:SI (match_operand:SFDF 1 \"gpc_reg_operand\" \"<Ff>,<Fv>\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT && TARGET_VSX_SMALL_INTEGER\"\n+  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT && TARGET_P8_VECTOR\"\n   \"@\n    fctiw<u>z %0,%1\n    xscvdp<su>xws %x0,%x1\"\n@@ -5789,7 +5780,7 @@\n   [(set (match_operand:SI 0 \"memory_operand\" \"=Z\")\n \t(any_fix:SI (match_operand:SFDF 1 \"gpc_reg_operand\" \"wa\")))\n    (clobber (match_scratch:SI 2 \"=wa\"))]\n-  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT && TARGET_VSX_SMALL_INTEGER\"\n+  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT && TARGET_P8_VECTOR\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2)\n@@ -6959,7 +6950,7 @@\n (define_split\n   [(set (match_operand:DI 0 \"altivec_register_operand\")\n \t(match_operand:DI 1 \"xxspltib_constant_split\"))]\n-  \"TARGET_VSX_SMALL_INTEGER && TARGET_P9_VECTOR && reload_completed\"\n+  \"TARGET_P9_VECTOR && reload_completed\"\n   [(const_int 0)]\n {\n   rtx op0 = operands[0];"}, {"sha": "1fa65a0551f61467cf77ba29ad776eb92a528c34", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=9bfda66407d589446ba3973bb1b4d3f23fc6bc88", "patch": "@@ -606,10 +606,6 @@ mfloat128-convert\n Target Undocumented Mask(FLOAT128_CVT) Var(rs6000_isa_flags)\n Enable default conversions between __float128 & long double.\n \n-mvsx-small-integer\n-Target Report Mask(VSX_SMALL_INTEGER) Var(rs6000_isa_flags)\n-Enable small integers to be in VSX registers.\n-\n mstack-protector-guard=\n Target RejectNegative Joined Enum(stack_protector_guard) Var(rs6000_stack_protector_guard) Init(SSP_TLS)\n Use given stack-protector guard."}, {"sha": "e6b98e0a335137e62b43f66b235826fa04eb4baa", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 17, "deletions": 34, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=9bfda66407d589446ba3973bb1b4d3f23fc6bc88", "patch": "@@ -2938,7 +2938,7 @@\n   \"VECTOR_MEM_VSX_P (<MODE>mode) && TARGET_DIRECT_MOVE_64BIT\"\n {\n   /* If we have ISA 3.0, we can do a xxextractuw/vextractu{b,h}.  */\n-  if (TARGET_VSX_SMALL_INTEGER && TARGET_P9_VECTOR)\n+  if (TARGET_P9_VECTOR)\n     {\n       emit_insn (gen_vsx_extract_<mode>_p9 (operands[0], operands[1],\n \t\t\t\t\t    operands[2]));\n@@ -2952,8 +2952,7 @@\n \t (match_operand:VSX_EXTRACT_I 1 \"gpc_reg_operand\" \"wK,<VSX_EX>\")\n \t (parallel [(match_operand:QI 2 \"<VSX_EXTRACT_PREDICATE>\" \"n,n\")])))\n    (clobber (match_scratch:SI 3 \"=r,X\"))]\n-  \"VECTOR_MEM_VSX_P (<MODE>mode) && TARGET_VEXTRACTUB\n-   && TARGET_VSX_SMALL_INTEGER\"\n+  \"VECTOR_MEM_VSX_P (<MODE>mode) && TARGET_VEXTRACTUB\"\n {\n   if (which_alternative == 0)\n     return \"#\";\n@@ -2983,8 +2982,7 @@\n \t (match_operand:VSX_EXTRACT_I 1 \"altivec_register_operand\")\n \t (parallel [(match_operand:QI 2 \"const_int_operand\")])))\n    (clobber (match_operand:SI 3 \"int_reg_operand\"))]\n-  \"VECTOR_MEM_VSX_P (<MODE>mode) && TARGET_VEXTRACTUB\n-   && TARGET_VSX_SMALL_INTEGER && reload_completed\"\n+  \"VECTOR_MEM_VSX_P (<MODE>mode) && TARGET_VEXTRACTUB && reload_completed\"\n   [(const_int 0)]\n {\n   rtx op0_si = gen_rtx_REG (SImode, REGNO (operands[0]));\n@@ -3009,8 +3007,7 @@\n \t  (match_operand:VSX_EXTRACT_I 1 \"gpc_reg_operand\" \"wK,<VSX_EX>\")\n \t  (parallel [(match_operand:QI 2 \"const_int_operand\" \"n,n\")]))))\n    (clobber (match_scratch:SI 3 \"=r,X\"))]\n-  \"VECTOR_MEM_VSX_P (<MODE>mode) && TARGET_VEXTRACTUB\n-   && TARGET_VSX_SMALL_INTEGER\"\n+  \"VECTOR_MEM_VSX_P (<MODE>mode) && TARGET_VEXTRACTUB\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 4)\n@@ -3030,8 +3027,7 @@\n \t (parallel [(match_operand:QI 2 \"const_int_operand\" \"n,n\")])))\n    (clobber (match_scratch:<VS_scalar> 3 \"=<VSX_EX>,&r\"))\n    (clobber (match_scratch:SI 4 \"=X,&r\"))]\n-  \"VECTOR_MEM_VSX_P (<MODE>mode) && TARGET_VEXTRACTUB\n-   && TARGET_VSX_SMALL_INTEGER\"\n+  \"VECTOR_MEM_VSX_P (<MODE>mode) && TARGET_VEXTRACTUB\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 3)\n@@ -3048,8 +3044,7 @@\n \t (match_operand:V4SI 1 \"gpc_reg_operand\" \"wJv,wJv,wJv\")\n \t (parallel [(match_operand:QI 2 \"const_0_to_3_operand\" \"n,n,n\")])))\n    (clobber (match_scratch:V4SI 3 \"=wJv,wJv,wJv\"))]\n-  \"VECTOR_MEM_VSX_P (V4SImode) && TARGET_DIRECT_MOVE_64BIT\n-   && (!TARGET_P9_VECTOR || !TARGET_VSX_SMALL_INTEGER)\"\n+  \"VECTOR_MEM_VSX_P (V4SImode) && TARGET_DIRECT_MOVE_64BIT && !TARGET_P9_VECTOR\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n@@ -3067,15 +3062,7 @@\n      instruction.  */\n   value = INTVAL (element);\n   if (value != 1)\n-    {\n-      if (TARGET_P9_VECTOR && TARGET_VSX_SMALL_INTEGER)\n-\t{\n-\t  rtx si_tmp = gen_rtx_REG (SImode, REGNO (vec_tmp));\n-\t  emit_insn (gen_vsx_extract_v4si_p9 (si_tmp,src, element));\n-\t}\n-      else\n-\temit_insn (gen_altivec_vspltw_direct (vec_tmp, src, element));\n-    }\n+    emit_insn (gen_altivec_vspltw_direct (vec_tmp, src, element));\n   else\n     vec_tmp = src;\n \n@@ -3084,13 +3071,13 @@\n       if (can_create_pseudo_p ())\n \tdest = rs6000_address_for_fpconvert (dest);\n \n-      if (TARGET_VSX_SMALL_INTEGER)\n+      if (TARGET_P8_VECTOR)\n \temit_move_insn (dest, gen_rtx_REG (SImode, REGNO (vec_tmp)));\n       else\n \temit_insn (gen_stfiwx (dest, gen_rtx_REG (DImode, REGNO (vec_tmp))));\n     }\n \n-  else if (TARGET_VSX_SMALL_INTEGER)\n+  else if (TARGET_P8_VECTOR)\n     emit_move_insn (dest, gen_rtx_REG (SImode, REGNO (vec_tmp)));\n   else\n     emit_move_insn (gen_rtx_REG (DImode, REGNO (dest)),\n@@ -3108,7 +3095,7 @@\n \t (parallel [(match_operand:QI 2 \"<VSX_EXTRACT_PREDICATE>\" \"n\")])))\n    (clobber (match_scratch:VSX_EXTRACT_I2 3 \"=v\"))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode) && TARGET_DIRECT_MOVE_64BIT\n-   && (!TARGET_P9_VECTOR || !TARGET_VSX_SMALL_INTEGER)\"\n+   && !TARGET_P9_VECTOR\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n@@ -3319,7 +3306,7 @@\n \t  (parallel [(match_operand:QI 2 \"const_int_operand\" \"n\")]))))\n    (clobber (match_scratch:<VSX_EXTRACT_I:VS_scalar> 3 \"=v\"))]\n   \"VECTOR_MEM_VSX_P (<VSX_EXTRACT_I:MODE>mode) && TARGET_DIRECT_MOVE_64BIT\n-   && TARGET_P9_VECTOR && TARGET_VSX_SMALL_INTEGER\"\n+   && TARGET_P9_VECTOR\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 3)\n@@ -3343,7 +3330,7 @@\n \t  (parallel [(match_operand:QI 2 \"const_int_operand\" \"n\")]))))\n    (clobber (match_scratch:<VSX_EXTRACT_I:VS_scalar> 3 \"=v\"))]\n   \"VECTOR_MEM_VSX_P (<VSX_EXTRACT_I:MODE>mode) && TARGET_DIRECT_MOVE_64BIT\n-   && TARGET_P9_VECTOR && TARGET_VSX_SMALL_INTEGER\"\n+   && TARGET_P9_VECTOR\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 3)\n@@ -3365,8 +3352,7 @@\n \t  (match_operand:<VS_scalar> 2 \"gpc_reg_operand\" \"<VSX_EX>\")\n \t  (match_operand:QI 3 \"<VSX_EXTRACT_PREDICATE>\" \"n\")]\n \t UNSPEC_VSX_SET))]\n-  \"VECTOR_MEM_VSX_P (<MODE>mode) && TARGET_P9_VECTOR && TARGET_VSX_SMALL_INTEGER\n-   && TARGET_POWERPC64\"\n+  \"VECTOR_MEM_VSX_P (<MODE>mode) && TARGET_P9_VECTOR && TARGET_POWERPC64\"\n {\n   int ele = INTVAL (operands[3]);\n   int nunits = GET_MODE_NUNITS (<MODE>mode);\n@@ -3390,8 +3376,7 @@\n \t  (match_operand:QI 3 \"const_0_to_3_operand\" \"n\")]\n \t UNSPEC_VSX_SET))\n    (clobber (match_scratch:SI 4 \"=&wJwK\"))]\n-  \"VECTOR_MEM_VSX_P (V4SFmode) && TARGET_P9_VECTOR && TARGET_VSX_SMALL_INTEGER\n-   && TARGET_POWERPC64\"\n+  \"VECTOR_MEM_VSX_P (V4SFmode) && TARGET_P9_VECTOR && TARGET_POWERPC64\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 5)\n@@ -3426,8 +3411,7 @@\n \t  (match_operand:QI 3 \"const_0_to_3_operand\" \"n\")]\n \t UNSPEC_VSX_SET))\n    (clobber (match_scratch:SI 4 \"=&wJwK\"))]\n-  \"VECTOR_MEM_VSX_P (V4SFmode) && TARGET_P9_VECTOR && TARGET_VSX_SMALL_INTEGER\n-   && TARGET_POWERPC64\"\n+  \"VECTOR_MEM_VSX_P (V4SFmode) && TARGET_P9_VECTOR && TARGET_POWERPC64\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 4)\n@@ -3457,8 +3441,7 @@\n \t\t\t  [(match_operand:QI 3 \"const_0_to_3_operand\" \"n\")]))\n \t  (match_operand:QI 4 \"const_0_to_3_operand\" \"n\")]\n \t UNSPEC_VSX_SET))]\n-  \"VECTOR_MEM_VSX_P (V4SFmode) && TARGET_P9_VECTOR && TARGET_VSX_SMALL_INTEGER\n-   && TARGET_POWERPC64\n+  \"VECTOR_MEM_VSX_P (V4SFmode) && TARGET_P9_VECTOR && TARGET_POWERPC64\n    && (INTVAL (operands[3]) == (VECTOR_ELT_ORDER_BIG ? 1 : 2))\"\n {\n   int ele = INTVAL (operands[4]);\n@@ -3486,7 +3469,7 @@\n \t UNSPEC_VSX_SET))\n    (clobber (match_scratch:SI 5 \"=&wJwK\"))]\n   \"VECTOR_MEM_VSX_P (V4SFmode) && VECTOR_MEM_VSX_P (V4SImode)\n-   && TARGET_P9_VECTOR && TARGET_VSX_SMALL_INTEGER && TARGET_POWERPC64\n+   && TARGET_P9_VECTOR && TARGET_POWERPC64\n    && (INTVAL (operands[3]) != (VECTOR_ELT_ORDER_BIG ? 1 : 2))\"\n   \"#\"\n   \"&& 1\""}, {"sha": "228b885dba9aefc900ff1348119a04838c8cbdf5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9bfda66407d589446ba3973bb1b4d3f23fc6bc88", "patch": "@@ -1,3 +1,16 @@\n+2017-07-25  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/vsx-himode.c: Delete -mvsx-small-integer\n+\toption.\n+\t* gcc.target/powerpc/vsx-himode2.c: Likewise.\n+\t* gcc.target/powerpc/vsx-himode3.c: Likewise.\n+\t* gcc.target/powerpc/vsx-qimode.c: Likewise.\n+\t* gcc.target/powerpc/vsx-qimode2.c: Likewise.\n+\t* gcc.target/powerpc/vsx-qimode3.c: Likewise.\n+\t* gcc.target/powerpc/vsx-simode.c: Likewise.\n+\t* gcc.target/powerpc/vsx-simode2.c: Likewise.\n+\t* gcc.target/powerpc/vsx-simode3.c: Likewise.\n+\n 2017-07-26  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/71570"}, {"sha": "2a4e610de72c598ac7c204217d6b05c1ba0a782b", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-himode.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-himode.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-himode.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-himode.c?ref=9bfda66407d589446ba3973bb1b4d3f23fc6bc88", "patch": "@@ -2,7 +2,7 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n-/* { dg-options \"-mcpu=power9 -O2 -mvsx-small-integer\" } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n \n double load_asm_d_constraint (short *p)\n {"}, {"sha": "6ee08cf109aa0563bbd12d0485d0592221157041", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-himode2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-himode2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-himode2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-himode2.c?ref=9bfda66407d589446ba3973bb1b4d3f23fc6bc88", "patch": "@@ -2,7 +2,7 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n-/* { dg-options \"-mcpu=power9 -O2 -mvsx-small-integer\" } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n \n unsigned int foo (unsigned short u)\n {"}, {"sha": "972be677dd635c971d9a9dc5b1644be2ac8cf579", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-himode3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-himode3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-himode3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-himode3.c?ref=9bfda66407d589446ba3973bb1b4d3f23fc6bc88", "patch": "@@ -2,7 +2,7 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n-/* { dg-options \"-mcpu=power9 -O2 -mvsx-small-integer\" } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n \n double load_asm_v_constraint (short *p)\n {"}, {"sha": "1c224cb1b617f4b301313fe1969e1b7114a3e8f9", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-qimode.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-qimode.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-qimode.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-qimode.c?ref=9bfda66407d589446ba3973bb1b4d3f23fc6bc88", "patch": "@@ -2,7 +2,7 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n-/* { dg-options \"-mcpu=power9 -O2 -mvsx-small-integer\" } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n \n double load_asm_d_constraint (signed char *p)\n {"}, {"sha": "478c9da30519e9baf2dc949cfd431769feb99498", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-qimode2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-qimode2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-qimode2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-qimode2.c?ref=9bfda66407d589446ba3973bb1b4d3f23fc6bc88", "patch": "@@ -2,7 +2,7 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n-/* { dg-options \"-mcpu=power9 -O2 -mvsx-small-integer\" } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n \n unsigned int foo (unsigned char u)\n {"}, {"sha": "6537d8b80a0c5b942e22a39e11eb60fb5eb02189", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-qimode3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-qimode3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-qimode3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-qimode3.c?ref=9bfda66407d589446ba3973bb1b4d3f23fc6bc88", "patch": "@@ -2,7 +2,7 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n-/* { dg-options \"-mcpu=power9 -O2 -mvsx-small-integer\" } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n \n double load_asm_v_constraint (signed char *p)\n {"}, {"sha": "77049008845d4c218d2e16d143d32dbf459e7a7b", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-simode.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-simode.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-simode.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-simode.c?ref=9bfda66407d589446ba3973bb1b4d3f23fc6bc88", "patch": "@@ -2,7 +2,7 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n-/* { dg-options \"-mcpu=power8 -O2 -mvsx-small-integer\" } */\n+/* { dg-options \"-mcpu=power8 -O2\" } */\n \n double load_asm_d_constraint (int *p)\n {"}, {"sha": "92053d9ac355899f32f2fc30d78707845ebd0af2", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-simode2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-simode2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-simode2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-simode2.c?ref=9bfda66407d589446ba3973bb1b4d3f23fc6bc88", "patch": "@@ -2,7 +2,7 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n-/* { dg-options \"-mcpu=power8 -O2 -mvsx-small-integer\" } */\n+/* { dg-options \"-mcpu=power8 -O2\" } */\n \n unsigned int foo (unsigned int u)\n {"}, {"sha": "62f5ab46c04f6bcbc5751f179d198409959d5c99", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-simode3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-simode3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bfda66407d589446ba3973bb1b4d3f23fc6bc88/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-simode3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-simode3.c?ref=9bfda66407d589446ba3973bb1b4d3f23fc6bc88", "patch": "@@ -2,7 +2,7 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n-/* { dg-options \"-mcpu=power8 -O2 -mvsx-small-integer\" } */\n+/* { dg-options \"-mcpu=power8 -O2\" } */\n \n double load_asm_v_constraint (int *p)\n {"}]}