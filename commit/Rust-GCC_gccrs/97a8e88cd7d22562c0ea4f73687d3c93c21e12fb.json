{"sha": "97a8e88cd7d22562c0ea4f73687d3c93c21e12fb", "node_id": "C_kwDOANBUbNoAKDk3YThlODhjZDdkMjI1NjJjMGVhNGY3MzY4N2QzYzkzYzIxZTEyZmI", "commit": {"author": {"name": "Jiufu Guo", "email": "guojiufu@linux.ibm.com", "date": "2022-12-19T08:40:01Z"}, "committer": {"name": "Jiufu Guo", "email": "guojiufu@linux.ibm.com", "date": "2022-12-19T09:11:36Z"}, "message": "rs6000: use li;x?oris to build constant\n\nFor constant C:\nIf '(c & 0xFFFFFFFF00008000ULL) == 0xFFFFFFFF00008000ULL' or say:\n32(1) || 16(x) || 1(1) || 15(x), using \"li; xoris\" would be ok.\n\nIf '(c & 0xFFFFFFFF80008000ULL) == 0x80000000ULL' or say:\n32(0) || 1(1) || 15(x) || 1(0) || 15(x), we could use \"li; oris\" to\nbuild constant 'C'.\n\nHere N(M) means N continuous bit M, x for M means it is ok for either\n1 or 0; '||' means concatenation.\n\nThis patch update rs6000_emit_set_long_const to support those constants.\n\n\tPR target/106708\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000.cc (rs6000_emit_set_long_const): Add using\n\t\"li; x?oris\" to build constant.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/pr106708.c: New test.", "tree": {"sha": "16e87c8c821f73f1d3d8c49c3452694f879b4e45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16e87c8c821f73f1d3d8c49c3452694f879b4e45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97a8e88cd7d22562c0ea4f73687d3c93c21e12fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97a8e88cd7d22562c0ea4f73687d3c93c21e12fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97a8e88cd7d22562c0ea4f73687d3c93c21e12fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97a8e88cd7d22562c0ea4f73687d3c93c21e12fb/comments", "author": null, "committer": null, "parents": [{"sha": "17b41a28396b748c1824d92ef431a7d39f48a051", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17b41a28396b748c1824d92ef431a7d39f48a051", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17b41a28396b748c1824d92ef431a7d39f48a051"}], "stats": {"total": 78, "additions": 72, "deletions": 6}, "files": [{"sha": "9318ef151c9c943b89aa90704140ac353157862c", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97a8e88cd7d22562c0ea4f73687d3c93c21e12fb/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97a8e88cd7d22562c0ea4f73687d3c93c21e12fb/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=97a8e88cd7d22562c0ea4f73687d3c93c21e12fb", "patch": "@@ -10251,17 +10251,42 @@ rs6000_emit_set_long_const (rtx dest, HOST_WIDE_INT c)\n       if (ud1 != 0)\n \temit_move_insn (dest, gen_rtx_IOR (DImode, temp, GEN_INT (ud1)));\n     }\n+  else if (ud4 == 0xffff && ud3 == 0xffff && (ud1 & 0x8000))\n+    {\n+      /* li; xoris */\n+      temp = !can_create_pseudo_p () ? dest : gen_reg_rtx (DImode);\n+      emit_move_insn (temp, GEN_INT (sext_hwi (ud1, 16)));\n+      emit_move_insn (dest, gen_rtx_XOR (DImode, temp,\n+\t\t\t\t\t GEN_INT ((ud2 ^ 0xffff) << 16)));\n+    }\n   else if (ud3 == 0 && ud4 == 0)\n     {\n       temp = !can_create_pseudo_p () ? dest : gen_reg_rtx (DImode);\n \n       gcc_assert (ud2 & 0x8000);\n-      emit_move_insn (temp, GEN_INT (sext_hwi (ud2 << 16, 32)));\n-      if (ud1 != 0)\n-\temit_move_insn (temp, gen_rtx_IOR (DImode, temp, GEN_INT (ud1)));\n-      emit_move_insn (dest,\n-\t\t      gen_rtx_ZERO_EXTEND (DImode,\n-\t\t\t\t\t   gen_lowpart (SImode,temp)));\n+\n+      if (ud1 == 0)\n+\t{\n+\t  /* lis; rldicl */\n+\t  emit_move_insn (temp, GEN_INT (sext_hwi (ud2 << 16, 32)));\n+\t  emit_move_insn (dest,\n+\t\t\t  gen_rtx_AND (DImode, temp, GEN_INT (0xffffffff)));\n+\t}\n+      else if (!(ud1 & 0x8000))\n+\t{\n+\t  /* li; oris */\n+\t  emit_move_insn (temp, GEN_INT (ud1));\n+\t  emit_move_insn (dest,\n+\t\t\t  gen_rtx_IOR (DImode, temp, GEN_INT (ud2 << 16)));\n+\t}\n+      else\n+\t{\n+\t  /* lis; ori; rldicl */\n+\t  emit_move_insn (temp, GEN_INT (sext_hwi (ud2 << 16, 32)));\n+\t  emit_move_insn (temp, gen_rtx_IOR (DImode, temp, GEN_INT (ud1)));\n+\t  emit_move_insn (dest,\n+\t\t\t  gen_rtx_AND (DImode, temp, GEN_INT (0xffffffff)));\n+\t}\n     }\n   else if (ud1 == ud3 && ud2 == ud4)\n     {"}, {"sha": "ddb9160d4b8e84e8a94bece3054d10a680432e45", "filename": "gcc/testsuite/gcc.target/powerpc/pr106708.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97a8e88cd7d22562c0ea4f73687d3c93c21e12fb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106708.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97a8e88cd7d22562c0ea4f73687d3c93c21e12fb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106708.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106708.c?ref=97a8e88cd7d22562c0ea4f73687d3c93c21e12fb", "patch": "@@ -0,0 +1,41 @@\n+/* PR target/106708 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mno-prefixed -save-temps\" } */\n+/* { dg-require-effective-target has_arch_ppc64 } */\n+\n+long long arr[]\n+  = {0xffffffff7cdeab55LL, 0x98765432LL, 0xabcd0000LL};\n+\n+void __attribute__ ((__noipa__)) test_li_xoris (long long *arg)\n+{\n+  *arg = 0xffffffff7cdeab55LL;\n+}\n+/* { dg-final { scan-assembler-times {\\mli .*,-21675\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxoris .*0x8321\\M} 1 } } */\n+\n+void __attribute__ ((__noipa__)) test_li_oris (long long *arg)\n+{\n+  *arg = 0x98765432LL;\n+}\n+/* { dg-final { scan-assembler-times {\\mli .*,21554\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\moris .*0x9876\\M} 1 } } */\n+\n+void __attribute__ ((__noipa__)) test_lis_rldicl (long long *arg)\n+{\n+  *arg = 0xabcd0000LL;\n+}\n+/* { dg-final { scan-assembler-times {\\mlis .*,0xabcd\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mrldicl .*,0,32\\M} 1 } } */\n+\n+int\n+main ()\n+{\n+  long long a[sizeof (arr) / sizeof (arr[0])];\n+\n+  test_li_xoris (a);\n+  test_li_oris (a + 1);\n+  test_lis_rldicl (a + 2);\n+  if (__builtin_memcmp (a, arr, sizeof (arr)) != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}