{"sha": "0f200733fe863c7ed4d33ab3fda16471d5d69981", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYyMDA3MzNmZTg2M2M3ZWQ0ZDMzYWIzZmRhMTY0NzFkNWQ2OTk4MQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2019-02-19T02:04:02Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-10T06:59:31Z"}, "message": "AVX512FP16: Add vcmpph/vcmpsh/vcomish/vucomish.\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h: (_mm512_cmp_ph_mask):\n\tNew intrinsic.\n\t(_mm512_mask_cmp_ph_mask): Likewise.\n\t(_mm512_cmp_round_ph_mask): Likewise.\n\t(_mm512_mask_cmp_round_ph_mask): Likewise.\n\t(_mm_cmp_sh_mask): Likewise.\n\t(_mm_mask_cmp_sh_mask): Likewise.\n\t(_mm_cmp_round_sh_mask): Likewise.\n\t(_mm_mask_cmp_round_sh_mask): Likewise.\n\t(_mm_comieq_sh): Likewise.\n\t(_mm_comilt_sh): Likewise.\n\t(_mm_comile_sh): Likewise.\n\t(_mm_comigt_sh): Likewise.\n\t(_mm_comige_sh): Likewise.\n\t(_mm_comineq_sh): Likewise.\n\t(_mm_ucomieq_sh): Likewise.\n\t(_mm_ucomilt_sh): Likewise.\n\t(_mm_ucomile_sh): Likewise.\n\t(_mm_ucomigt_sh): Likewise.\n\t(_mm_ucomige_sh): Likewise.\n\t(_mm_ucomineq_sh): Likewise.\n\t(_mm_comi_round_sh): Likewise.\n\t(_mm_comi_sh): Likewise.\n\t* config/i386/avx512fp16vlintrin.h (_mm_cmp_ph_mask): New intrinsic.\n\t(_mm_mask_cmp_ph_mask): Likewise.\n\t(_mm256_cmp_ph_mask): Likewise.\n\t(_mm256_mask_cmp_ph_mask): Likewise.\n\t* config/i386/i386-builtin-types.def: Add corresponding builtin types.\n\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n\t* config/i386/i386-expand.c\n\t(ix86_expand_args_builtin): Handle new builtin types.\n\t(ix86_expand_round_builtin): Ditto.\n\t* config/i386/i386.md (ssevecmode): Add HF mode.\n\t(MODEFH): New mode iterator.\n\t* config/i386/sse.md\n\t(V48H_AVX512VL): New mode iterator to support HF vector modes.\n\tAjdust corresponding description.\n\t(ssecmpintprefix): New.\n\t(VI12_AVX512VL): Adjust to support HF vector modes.\n\t(cmp_imm_predicate): Likewise.\n\t(<avx512>_cmp<mode>3<mask_scalar_merge_name><round_saeonly_name>):\n\tLikewise.\n\t(avx512f_vmcmp<mode>3<round_saeonly_name>): Likewise.\n\t(avx512f_vmcmp<mode>3_mask<round_saeonly_name>): Likewise.\n\t(<sse>_<unord>comi<round_saeonly_name>): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n\t* gcc.target/i386/sse-22.c: Ditto.", "tree": {"sha": "7d5dfc97e1cc6cf94ddbb6e364b796cee431b314", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d5dfc97e1cc6cf94ddbb6e364b796cee431b314"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f200733fe863c7ed4d33ab3fda16471d5d69981", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f200733fe863c7ed4d33ab3fda16471d5d69981", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f200733fe863c7ed4d33ab3fda16471d5d69981", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f200733fe863c7ed4d33ab3fda16471d5d69981/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98da680f69333ca2cfeab62cd7aa96209e3382c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98da680f69333ca2cfeab62cd7aa96209e3382c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98da680f69333ca2cfeab62cd7aa96209e3382c6"}], "stats": {"total": 434, "additions": 416, "deletions": 18}, "files": [{"sha": "ed8ad84a105c5cbd619e27aea346230e28b7e3b6", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 250, "deletions": 0, "changes": 250, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f200733fe863c7ed4d33ab3fda16471d5d69981/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f200733fe863c7ed4d33ab3fda16471d5d69981/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=0f200733fe863c7ed4d33ab3fda16471d5d69981", "patch": "@@ -985,6 +985,256 @@ _mm_maskz_min_round_sh (__mmask8 __A, __m128h __B, __m128h __C,\n \n #endif /* __OPTIMIZE__ */\n \n+/* vcmpph */\n+#ifdef __OPTIMIZE\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmp_ph_mask (__m512h __A, __m512h __B, const int __C)\n+{\n+  return (__mmask32) __builtin_ia32_vcmpph_v32hf_mask (__A, __B, __C,\n+\t\t\t\t\t\t       (__mmask32) -1);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmp_ph_mask (__mmask32 __A, __m512h __B, __m512h __C,\n+\t\t\t const int __D)\n+{\n+  return (__mmask32) __builtin_ia32_vcmpph_v32hf_mask (__B, __C, __D,\n+\t\t\t\t\t\t       __A);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cmp_round_ph_mask (__m512h __A, __m512h __B, const int __C,\n+\t\t\t  const int __D)\n+{\n+  return (__mmask32) __builtin_ia32_vcmpph_v32hf_mask_round (__A, __B,\n+\t\t\t\t\t\t\t     __C, (__mmask32) -1,\n+\t\t\t\t\t\t\t     __D);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cmp_round_ph_mask (__mmask32 __A, __m512h __B, __m512h __C,\n+\t\t\t       const int __D, const int __E)\n+{\n+  return (__mmask32) __builtin_ia32_vcmpph_v32hf_mask_round (__B, __C,\n+\t\t\t\t\t\t\t     __D, __A,\n+\t\t\t\t\t\t\t     __E);\n+}\n+\n+#else\n+#define _mm512_cmp_ph_mask(A, B, C)\t\t\t\\\n+  (__builtin_ia32_vcmpph_v32hf_mask ((A), (B), (C), (-1)))\n+\n+#define _mm512_mask_cmp_ph_mask(A, B, C, D)\t\t\\\n+  (__builtin_ia32_vcmpph_v32hf_mask ((B), (C), (D), (A)))\n+\n+#define _mm512_cmp_round_ph_mask(A, B, C, D)\t\t\\\n+  (__builtin_ia32_vcmpph_v32hf_mask_round ((A), (B), (C), (-1), (D)))\n+\n+#define _mm512_mask_cmp_round_ph_mask(A, B, C, D, E)\t\\\n+  (__builtin_ia32_vcmpph_v32hf_mask_round ((B), (C), (D), (A), (E)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vcmpsh.  */\n+#ifdef __OPTIMIZE__\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cmp_sh_mask (__m128h __A, __m128h __B, const int __C)\n+{\n+  return (__mmask8)\n+    __builtin_ia32_vcmpsh_v8hf_mask_round (__A, __B,\n+\t\t\t\t\t   __C, (__mmask8) -1,\n+\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmp_sh_mask (__mmask8 __A, __m128h __B, __m128h __C,\n+\t\t      const int __D)\n+{\n+  return (__mmask8)\n+    __builtin_ia32_vcmpsh_v8hf_mask_round (__B, __C,\n+\t\t\t\t\t   __D, __A,\n+\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cmp_round_sh_mask (__m128h __A, __m128h __B, const int __C,\n+\t\t       const int __D)\n+{\n+  return (__mmask8) __builtin_ia32_vcmpsh_v8hf_mask_round (__A, __B,\n+\t\t\t\t\t\t\t   __C, (__mmask8) -1,\n+\t\t\t\t\t\t\t   __D);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmp_round_sh_mask (__mmask8 __A, __m128h __B, __m128h __C,\n+\t\t\t    const int __D, const int __E)\n+{\n+  return (__mmask8) __builtin_ia32_vcmpsh_v8hf_mask_round (__B, __C,\n+\t\t\t\t\t\t\t   __D, __A,\n+\t\t\t\t\t\t\t   __E);\n+}\n+\n+#else\n+#define _mm_cmp_sh_mask(A, B, C)\t\t\\\n+  (__builtin_ia32_vcmpsh_v8hf_mask_round ((A), (B), (C), (-1), \\\n+\t\t\t\t\t  (_MM_FROUND_CUR_DIRECTION)))\n+\n+#define _mm_mask_cmp_sh_mask(A, B, C, D)\t\\\n+  (__builtin_ia32_vcmpsh_v8hf_mask_round ((B), (C), (D), (A),\t\t\\\n+\t\t\t\t\t  (_MM_FROUND_CUR_DIRECTION)))\n+\n+#define _mm_cmp_round_sh_mask(A, B, C, D)\t\t\t\t\\\n+  (__builtin_ia32_vcmpsh_v8hf_mask_round ((A), (B), (C), (-1), (D)))\n+\n+#define _mm_mask_cmp_round_sh_mask(A, B, C, D, E)\t\\\n+  (__builtin_ia32_vcmpsh_v8hf_mask_round ((B), (C), (D), (A), (E)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vcomish.  */\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_comieq_sh (__m128h __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcmpsh_v8hf_mask_round (__A, __B, _CMP_EQ_OS,\n+\t\t\t\t\t\t(__mmask8) -1,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_comilt_sh (__m128h __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcmpsh_v8hf_mask_round (__A, __B, _CMP_LT_OS,\n+\t\t\t\t\t\t(__mmask8) -1,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_comile_sh (__m128h __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcmpsh_v8hf_mask_round (__A, __B, _CMP_LE_OS,\n+\t\t\t\t\t\t(__mmask8) -1,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_comigt_sh (__m128h __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcmpsh_v8hf_mask_round (__A, __B, _CMP_GT_OS,\n+\t\t\t\t\t\t(__mmask8) -1,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_comige_sh (__m128h __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcmpsh_v8hf_mask_round (__A, __B, _CMP_GE_OS,\n+\t\t\t\t\t\t(__mmask8) -1,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_comineq_sh (__m128h __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcmpsh_v8hf_mask_round (__A, __B, _CMP_NEQ_US,\n+\t\t\t\t\t\t(__mmask8) -1,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_ucomieq_sh (__m128h __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcmpsh_v8hf_mask_round (__A, __B, _CMP_EQ_OQ,\n+\t\t\t\t\t\t(__mmask8) -1,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_ucomilt_sh (__m128h __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcmpsh_v8hf_mask_round (__A, __B, _CMP_LT_OQ,\n+\t\t\t\t\t\t(__mmask8) -1,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_ucomile_sh (__m128h __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcmpsh_v8hf_mask_round (__A, __B, _CMP_LE_OQ,\n+\t\t\t\t\t\t(__mmask8) -1,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_ucomigt_sh (__m128h __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcmpsh_v8hf_mask_round (__A, __B, _CMP_GT_OQ,\n+\t\t\t\t\t\t(__mmask8) -1,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_ucomige_sh (__m128h __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcmpsh_v8hf_mask_round (__A, __B, _CMP_GE_OQ,\n+\t\t\t\t\t\t(__mmask8) -1,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_ucomineq_sh (__m128h __A, __m128h __B)\n+{\n+  return __builtin_ia32_vcmpsh_v8hf_mask_round (__A, __B, _CMP_NEQ_UQ,\n+\t\t\t\t\t\t(__mmask8) -1,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+  _mm_comi_sh (__m128h __A, __m128h __B, const int __P)\n+{\n+  return __builtin_ia32_vcmpsh_v8hf_mask_round (__A, __B, __P,\n+\t\t\t\t\t\t(__mmask8) -1,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_comi_round_sh (__m128h __A, __m128h __B, const int __P, const int __R)\n+{\n+  return __builtin_ia32_vcmpsh_v8hf_mask_round (__A, __B, __P,\n+\t\t\t\t\t\t(__mmask8) -1,__R);\n+}\n+\n+#else\n+#define _mm_comi_round_sh(A, B, P, R)\t\t\\\n+  (__builtin_ia32_vcmpsh_v8hf_mask_round ((A), (B), (P), (__mmask8) (-1), (R)))\n+#define _mm_comi_sh(A, B, P)\t\t\\\n+  (__builtin_ia32_vcmpsh_v8hf_mask_round ((A), (B), (P), (__mmask8) (-1), \\\n+\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION))\n+\n+#endif /* __OPTIMIZE__  */\n+\n #ifdef __DISABLE_AVX512FP16__\n #undef __DISABLE_AVX512FP16__\n #pragma GCC pop_options"}, {"sha": "1787ed5f4fff2cac84c5bde634460fff3f1470ed", "filename": "gcc/config/i386/avx512fp16vlintrin.h", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f200733fe863c7ed4d33ab3fda16471d5d69981/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f200733fe863c7ed4d33ab3fda16471d5d69981/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h?ref=0f200733fe863c7ed4d33ab3fda16471d5d69981", "patch": "@@ -308,6 +308,56 @@ _mm256_maskz_min_ph (__mmask16 __A, __m256h __B, __m256h __C)\n \t\t\t\t\t   _mm256_setzero_ph (), __A);\n }\n \n+/* vcmpph */\n+#ifdef __OPTIMIZE\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cmp_ph_mask (__m128h __A, __m128h __B, const int __C)\n+{\n+  return (__mmask8) __builtin_ia32_vcmpph_v8hf_mask (__A, __B, __C,\n+\t\t\t\t\t\t     (__mmask8) -1);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmp_ph_mask (__mmask8 __A, __m128h __B, __m128h __C,\n+\t\t      const int __D)\n+{\n+  return (__mmask8) __builtin_ia32_vcmpph_v8hf_mask (__B, __C, __D, __A);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cmp_ph_mask (__m256h __A, __m256h __B, const int __C)\n+{\n+  return (__mmask16) __builtin_ia32_vcmpph_v16hf_mask (__A, __B, __C,\n+\t\t\t\t\t\t       (__mmask16) -1);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmp_ph_mask (__mmask16 __A, __m256h __B, __m256h __C,\n+\t\t      const int __D)\n+{\n+  return (__mmask16) __builtin_ia32_vcmpph_v16hf_mask (__B, __C, __D,\n+\t\t\t\t\t\t       __A);\n+}\n+\n+#else\n+#define _mm_cmp_ph_mask(A, B, C)\t\t\\\n+  (__builtin_ia32_vcmpph_v8hf_mask ((A), (B), (C), (-1)))\n+\n+#define _mm_mask_cmp_ph_mask(A, B, C, D)\t\\\n+  (__builtin_ia32_vcmpph_v8hf_mask ((B), (C), (D), (A)))\n+\n+#define _mm256_cmp_ph_mask(A, B, C)\t\t\\\n+  (__builtin_ia32_vcmpph_v16hf_mask ((A), (B), (C), (-1)))\n+\n+#define _mm256_mask_cmp_ph_mask(A, B, C, D)\t\\\n+  (__builtin_ia32_vcmpph_v16hf_mask ((B), (C), (D), (A)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n #ifdef __DISABLE_AVX512FP16VL__\n #undef __DISABLE_AVX512FP16VL__\n #pragma GCC pop_options"}, {"sha": "d11c02b725a705fe9f3b5375f24b7880c0c6c957", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f200733fe863c7ed4d33ab3fda16471d5d69981/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f200733fe863c7ed4d33ab3fda16471d5d69981/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=0f200733fe863c7ed4d33ab3fda16471d5d69981", "patch": "@@ -1306,10 +1306,15 @@ DEF_FUNCTION_TYPE (UINT8, PV2DI, PCV2DI, PCVOID)\n DEF_FUNCTION_TYPE (V8HF, V8HI)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, INT)\n+DEF_FUNCTION_TYPE (UQI, V8HF, V8HF, INT, UQI)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, V8HF, UQI)\n+DEF_FUNCTION_TYPE (UQI, V8HF, V8HF, INT, UQI, INT)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, V8HF, UQI, INT)\n DEF_FUNCTION_TYPE (V16HF, V16HF, V16HF)\n+DEF_FUNCTION_TYPE (UHI, V16HF, V16HF, INT, UHI)\n DEF_FUNCTION_TYPE (V16HF, V16HF, V16HF, V16HF, UHI)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, INT)\n+DEF_FUNCTION_TYPE (USI, V32HF, V32HF, INT, USI)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, V32HF, USI)\n+DEF_FUNCTION_TYPE (USI, V32HF, V32HF, INT, USI, INT)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, V32HF, USI, INT)"}, {"sha": "c9d80cb11f6768171f5dd010107f35f431b016b9", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f200733fe863c7ed4d33ab3fda16471d5d69981/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f200733fe863c7ed4d33ab3fda16471d5d69981/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=0f200733fe863c7ed4d33ab3fda16471d5d69981", "patch": "@@ -2799,6 +2799,9 @@ BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_sminv16hf\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_sminv32hf3_mask, \"__builtin_ia32_vminph_v32hf_mask\", IX86_BUILTIN_VMINPH_V32HF_MASK, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmsmaxv8hf3_mask, \"__builtin_ia32_vmaxsh_v8hf_mask\", IX86_BUILTIN_VMAXSH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmsminv8hf3_mask, \"__builtin_ia32_vminsh_v8hf_mask\", IX86_BUILTIN_VMINSH_V8HF_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_cmpv8hf3_mask, \"__builtin_ia32_vcmpph_v8hf_mask\", IX86_BUILTIN_VCMPPH_V8HF_MASK, UNKNOWN, (int) UQI_FTYPE_V8HF_V8HF_INT_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512vl_cmpv16hf3_mask, \"__builtin_ia32_vcmpph_v16hf_mask\", IX86_BUILTIN_VCMPPH_V16HF_MASK, UNKNOWN, (int) UHI_FTYPE_V16HF_V16HF_INT_UHI)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_cmpv32hf3_mask, \"__builtin_ia32_vcmpph_v32hf_mask\", IX86_BUILTIN_VCMPPH_V32HF_MASK, UNKNOWN, (int) USI_FTYPE_V32HF_V32HF_INT_USI)\n \n /* Builtins with rounding support.  */\n BDESC_END (ARGS, ROUND_ARGS)\n@@ -3012,6 +3015,8 @@ BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_smaxv32hf3_mask_round, \"__builti\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_sminv32hf3_mask_round, \"__builtin_ia32_vminph_v32hf_mask_round\", IX86_BUILTIN_VMINPH_V32HF_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmsmaxv8hf3_mask_round, \"__builtin_ia32_vmaxsh_v8hf_mask_round\", IX86_BUILTIN_VMAXSH_V8HF_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vmsminv8hf3_mask_round, \"__builtin_ia32_vminsh_v8hf_mask_round\", IX86_BUILTIN_VMINSH_V8HF_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_cmpv32hf3_mask_round, \"__builtin_ia32_vcmpph_v32hf_mask_round\", IX86_BUILTIN_VCMPPH_V32HF_MASK_ROUND, UNKNOWN, (int) USI_FTYPE_V32HF_V32HF_INT_USI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_vmcmpv8hf3_mask_round, \"__builtin_ia32_vcmpsh_v8hf_mask_round\", IX86_BUILTIN_VCMPSH_V8HF_MASK_ROUND, UNKNOWN, (int) UQI_FTYPE_V8HF_V8HF_INT_UQI_INT)\n \n BDESC_END (ROUND_ARGS, MULTI_ARG)\n "}, {"sha": "e117afb16b898945ee0a83ce699a1c9f4fae0e37", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f200733fe863c7ed4d33ab3fda16471d5d69981/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f200733fe863c7ed4d33ab3fda16471d5d69981/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=0f200733fe863c7ed4d33ab3fda16471d5d69981", "patch": "@@ -9999,14 +9999,17 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case UQI_FTYPE_V8SI_V8SI_INT_UQI:\n     case QI_FTYPE_V4DF_V4DF_INT_UQI:\n     case QI_FTYPE_V8SF_V8SF_INT_UQI:\n+    case UHI_FTYPE_V16HF_V16HF_INT_UHI:\n     case UQI_FTYPE_V2DI_V2DI_INT_UQI:\n     case UQI_FTYPE_V4SI_V4SI_INT_UQI:\n     case UQI_FTYPE_V2DF_V2DF_INT_UQI:\n     case UQI_FTYPE_V4SF_V4SF_INT_UQI:\n+    case UQI_FTYPE_V8HF_V8HF_INT_UQI:\n     case UDI_FTYPE_V64QI_V64QI_INT_UDI:\n     case USI_FTYPE_V32QI_V32QI_INT_USI:\n     case UHI_FTYPE_V16QI_V16QI_INT_UHI:\n     case USI_FTYPE_V32HI_V32HI_INT_USI:\n+    case USI_FTYPE_V32HF_V32HF_INT_USI:\n     case UHI_FTYPE_V16HI_V16HI_INT_UHI:\n     case UQI_FTYPE_V8HI_V8HI_INT_UQI:\n       nargs = 4;\n@@ -10290,6 +10293,9 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n \t      case CODE_FOR_avx512f_cmpv16sf3_mask:\n \t      case CODE_FOR_avx512f_vmcmpv2df3_mask:\n \t      case CODE_FOR_avx512f_vmcmpv4sf3_mask:\n+\t      case CODE_FOR_avx512bw_cmpv32hf3_mask:\n+\t      case CODE_FOR_avx512vl_cmpv16hf3_mask:\n+\t      case CODE_FOR_avx512fp16_cmpv8hf3_mask:\n \t\terror (\"the last argument must be a 5-bit immediate\");\n \t\treturn const0_rtx;\n \n@@ -10710,6 +10716,8 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n     case UQI_FTYPE_V2DF_V2DF_INT_UQI_INT:\n     case UHI_FTYPE_V16SF_V16SF_INT_UHI_INT:\n     case UQI_FTYPE_V4SF_V4SF_INT_UQI_INT:\n+    case USI_FTYPE_V32HF_V32HF_INT_USI_INT:\n+    case UQI_FTYPE_V8HF_V8HF_INT_UQI_INT:\n       nargs_constant = 3;\n       nargs = 5;\n       break;\n@@ -10765,6 +10773,8 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n \t\tcase CODE_FOR_avx512f_cmpv16sf3_mask_round:\n \t\tcase CODE_FOR_avx512f_vmcmpv2df3_mask_round:\n \t\tcase CODE_FOR_avx512f_vmcmpv4sf3_mask_round:\n+\t\tcase CODE_FOR_avx512f_vmcmpv8hf3_mask_round:\n+\t\tcase CODE_FOR_avx512bw_cmpv32hf3_mask_round:\n \t\t  error (\"the immediate argument must be a 5-bit immediate\");\n \t\t  return const0_rtx;\n \t\tdefault:"}, {"sha": "c415487bb06f6236539b0566489365bb00562ec8", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f200733fe863c7ed4d33ab3fda16471d5d69981/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f200733fe863c7ed4d33ab3fda16471d5d69981/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=0f200733fe863c7ed4d33ab3fda16471d5d69981", "patch": "@@ -1229,6 +1229,9 @@\n ;; SSE and x87 SFmode and DFmode floating point modes\n (define_mode_iterator MODEF [SF DF])\n \n+;; SSE floating point modes\n+(define_mode_iterator MODEFH [(HF \"TARGET_AVX512FP16\") SF DF])\n+\n ;; All x87 floating point modes\n (define_mode_iterator X87MODEF [SF DF XF])\n \n@@ -1254,7 +1257,7 @@\n \n ;; SSE vector mode corresponding to a scalar mode\n (define_mode_attr ssevecmode\n-  [(QI \"V16QI\") (HI \"V8HI\") (SI \"V4SI\") (DI \"V2DI\") (SF \"V4SF\") (DF \"V2DF\")])\n+  [(QI \"V16QI\") (HI \"V8HI\") (SI \"V4SI\") (DI \"V2DI\") (HF \"V8HF\") (SF \"V4SF\") (DF \"V2DF\")])\n (define_mode_attr ssevecmodelower\n   [(QI \"v16qi\") (HI \"v8hi\") (SI \"v4si\") (DI \"v2di\") (SF \"v4sf\") (DF \"v2df\")])\n "}, {"sha": "516eb4544bc8408c39b056b50d7c637e7125ae39", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 39, "deletions": 17, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f200733fe863c7ed4d33ab3fda16471d5d69981/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f200733fe863c7ed4d33ab3fda16471d5d69981/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=0f200733fe863c7ed4d33ab3fda16471d5d69981", "patch": "@@ -226,7 +226,7 @@\n    (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n    (V8DF \"TARGET_AVX512F\")  (V4DF \"TARGET_AVX\") V2DF])\n \n-;; All AVX-512{F,VL} vector modes. Supposed TARGET_AVX512F baseline.\n+;; All AVX-512{F,VL} vector modes without HF. Supposed TARGET_AVX512F baseline.\n (define_mode_iterator V48_AVX512VL\n   [V16SI (V8SI \"TARGET_AVX512VL\") (V4SI \"TARGET_AVX512VL\")\n    V8DI  (V4DI \"TARGET_AVX512VL\") (V2DI \"TARGET_AVX512VL\")\n@@ -239,6 +239,16 @@\n    V16SF (V8SF \"TARGET_AVX512VL\")\n    V8DF  (V4DF \"TARGET_AVX512VL\")])\n \n+;; All AVX-512{F,VL} vector modes. Supposed TARGET_AVX512F baseline.\n+(define_mode_iterator V48H_AVX512VL\n+  [V16SI (V8SI \"TARGET_AVX512VL\") (V4SI \"TARGET_AVX512VL\")\n+   V8DI  (V4DI \"TARGET_AVX512VL\") (V2DI \"TARGET_AVX512VL\")\n+   (V32HF \"TARGET_AVX512FP16\")\n+   (V16HF \"TARGET_AVX512FP16 && TARGET_AVX512VL\")\n+   (V8HF \"TARGET_AVX512FP16 && TARGET_AVX512VL\")\n+   V16SF (V8SF \"TARGET_AVX512VL\") (V4SF \"TARGET_AVX512VL\")\n+   V8DF  (V4DF \"TARGET_AVX512VL\") (V2DF \"TARGET_AVX512VL\")])\n+\n ;; 1,2 byte AVX-512{BW,VL} vector modes. Supposed TARGET_AVX512BW baseline.\n (define_mode_iterator VI12_AVX512VL\n   [V64QI (V16QI \"TARGET_AVX512VL\") (V32QI \"TARGET_AVX512VL\")\n@@ -1014,10 +1024,10 @@\n   [(V64QI \"b\") (V32HI \"w\") (V16SI \"k\") (V8DI \"q\")\n    (V32QI \"b\") (V16HI \"w\") (V8SI \"k\") (V4DI \"q\")\n    (V16QI \"b\") (V8HI \"w\") (V4SI \"k\") (V2DI \"q\")\n-   (V16SF \"k\") (V8DF \"q\")\n-   (V8SF \"k\") (V4DF \"q\")\n-   (V4SF \"k\") (V2DF \"q\")\n-   (SF \"k\") (DF \"q\")])\n+   (V32HF \"w\") (V16SF \"k\") (V8DF \"q\")\n+   (V16HF \"w\") (V8SF \"k\") (V4DF \"q\")\n+   (V8HF \"w\") (V4SF \"k\") (V2DF \"q\")\n+   (HF \"w\") (SF \"k\") (DF \"q\")])\n \n ;; Mapping of vector modes to VPTERNLOG suffix\n (define_mode_attr ternlogsuffix\n@@ -1067,6 +1077,18 @@\n    (V32QI \"p\") (V16HI \"p\") (V16HF \"p\")\n    (V64QI \"p\") (V32HI \"p\") (V32HF \"p\")])\n \n+;; SSE prefix for integer and HF vector comparison.\n+(define_mode_attr ssecmpintprefix\n+  [(V2DI  \"p\") (V2DF  \"\")\n+   (V4DI  \"p\") (V4DF  \"\")\n+   (V8DI  \"p\") (V8DF  \"\")\n+   (V4SI  \"p\") (V4SF  \"\")\n+   (V8SI  \"p\") (V8SF  \"\")\n+   (V16SI \"p\") (V16SF \"\")\n+   (V16QI \"p\") (V8HI \"p\") (V8HF \"\")\n+   (V32QI \"p\") (V16HI \"p\") (V16HF \"\")\n+   (V64QI \"p\") (V32HI \"p\") (V32HF \"\")])\n+\n ;; SSE scalar suffix for vector modes\n (define_mode_attr ssescalarmodesuffix\n   [(HF \"sh\") (SF \"ss\") (DF \"sd\")\n@@ -3450,11 +3472,11 @@\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n (define_mode_attr cmp_imm_predicate\n-  [(V16SF \"const_0_to_31_operand\")  (V8DF \"const_0_to_31_operand\")\n+  [(V32HF \"const_0_to_31_operand\") (V16SF \"const_0_to_31_operand\") (V8DF \"const_0_to_31_operand\")\n    (V16SI \"const_0_to_7_operand\")   (V8DI \"const_0_to_7_operand\")\n-   (V8SF \"const_0_to_31_operand\")   (V4DF \"const_0_to_31_operand\")\n+   (V16HF \"const_0_to_31_operand\") (V8SF \"const_0_to_31_operand\") (V4DF \"const_0_to_31_operand\")\n    (V8SI \"const_0_to_7_operand\")    (V4DI \"const_0_to_7_operand\")\n-   (V4SF \"const_0_to_31_operand\")   (V2DF \"const_0_to_31_operand\")\n+   (V8HF \"const_0_to_31_operand\") (V4SF \"const_0_to_31_operand\") (V2DF \"const_0_to_31_operand\")\n    (V4SI \"const_0_to_7_operand\")    (V2DI \"const_0_to_7_operand\")\n    (V32HI \"const_0_to_7_operand\")   (V64QI \"const_0_to_7_operand\")\n    (V16HI \"const_0_to_7_operand\")   (V32QI \"const_0_to_7_operand\")\n@@ -3463,12 +3485,12 @@\n (define_insn \"<avx512>_cmp<mode>3<mask_scalar_merge_name><round_saeonly_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n \t(unspec:<avx512fmaskmode>\n-\t  [(match_operand:V48_AVX512VL 1 \"register_operand\" \"v\")\n-\t   (match_operand:V48_AVX512VL 2 \"nonimmediate_operand\" \"<round_saeonly_constraint>\")\n+\t  [(match_operand:V48H_AVX512VL 1 \"register_operand\" \"v\")\n+\t   (match_operand:V48H_AVX512VL 2 \"nonimmediate_operand\" \"<round_saeonly_constraint>\")\n \t   (match_operand:SI 3 \"<cmp_imm_predicate>\" \"n\")]\n \t  UNSPEC_PCMP))]\n   \"TARGET_AVX512F && <round_saeonly_mode512bit_condition>\"\n-  \"v<sseintprefix>cmp<ssemodesuffix>\\t{%3, <round_saeonly_mask_scalar_merge_op4>%2, %1, %0<mask_scalar_merge_operand4>|%0<mask_scalar_merge_operand4>, %1, %2<round_saeonly_mask_scalar_merge_op4>, %3}\"\n+  \"v<ssecmpintprefix>cmp<ssemodesuffix>\\t{%3, <round_saeonly_mask_scalar_merge_op4>%2, %1, %0<mask_scalar_merge_operand4>|%0<mask_scalar_merge_operand4>, %1, %2<round_saeonly_mask_scalar_merge_op4>, %3}\"\n   [(set_attr \"type\" \"ssecmp\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"evex\")\n@@ -3617,8 +3639,8 @@\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n \t(and:<avx512fmaskmode>\n \t  (unspec:<avx512fmaskmode>\n-\t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_128 2 \"<round_saeonly_nimm_scalar_predicate>\" \"<round_saeonly_constraint>\")\n+\t    [(match_operand:VFH_128 1 \"register_operand\" \"v\")\n+\t     (match_operand:VFH_128 2 \"<round_saeonly_nimm_scalar_predicate>\" \"<round_saeonly_constraint>\")\n \t     (match_operand:SI 3 \"const_0_to_31_operand\" \"n\")]\n \t    UNSPEC_PCMP)\n \t  (const_int 1)))]\n@@ -3633,8 +3655,8 @@\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n \t(and:<avx512fmaskmode>\n \t  (unspec:<avx512fmaskmode>\n-\t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_128 2 \"<round_saeonly_nimm_scalar_predicate>\" \"<round_saeonly_constraint>\")\n+\t    [(match_operand:VFH_128 1 \"register_operand\" \"v\")\n+\t     (match_operand:VFH_128 2 \"<round_saeonly_nimm_scalar_predicate>\" \"<round_saeonly_constraint>\")\n \t     (match_operand:SI 3 \"const_0_to_31_operand\" \"n\")]\n \t    UNSPEC_PCMP)\n \t  (and:<avx512fmaskmode>\n@@ -3650,10 +3672,10 @@\n (define_insn \"<sse>_<unord>comi<round_saeonly_name>\"\n   [(set (reg:CCFP FLAGS_REG)\n \t(compare:CCFP\n-\t  (vec_select:MODEF\n+\t  (vec_select:MODEFH\n \t    (match_operand:<ssevecmode> 0 \"register_operand\" \"v\")\n \t    (parallel [(const_int 0)]))\n-\t  (vec_select:MODEF\n+\t  (vec_select:MODEFH\n \t    (match_operand:<ssevecmode> 1 \"<round_saeonly_nimm_scalar_predicate>\" \"<round_saeonly_constraint>\")\n \t    (parallel [(const_int 0)]))))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode)\""}, {"sha": "d9aa8a70e35f11781a33c4556a144df650fbeddc", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f200733fe863c7ed4d33ab3fda16471d5d69981/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f200733fe863c7ed4d33ab3fda16471d5d69981/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=0f200733fe863c7ed4d33ab3fda16471d5d69981", "patch": "@@ -698,6 +698,13 @@\n #define __builtin_ia32_vminph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vminph_v32hf_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vmaxsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vmaxsh_v8hf_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vminsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vminsh_v8hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vcmpph_v32hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v32hf_mask(A, B, 1, D)\n+#define __builtin_ia32_vcmpph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vcmpph_v32hf_mask_round(A, B, 1, D, 8)\n+#define __builtin_ia32_vcmpsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vcmpsh_v8hf_mask_round(A, B, 1, D, 8)\n+\n+/* avx512fp16vlintrin.h */\n+#define __builtin_ia32_vcmpph_v8hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v8hf_mask(A, B, 1, D)\n+#define __builtin_ia32_vcmpph_v16hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v16hf_mask(A, B, 1, D)\n \n /* vpclmulqdqintrin.h */\n #define __builtin_ia32_vpclmulqdq_v4di(A, B, C)  __builtin_ia32_vpclmulqdq_v4di(A, B, 1) "}, {"sha": "9a2833d78f2bdab90f9d50ae1fb8d4add64bf721", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f200733fe863c7ed4d33ab3fda16471d5d69981/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f200733fe863c7ed4d33ab3fda16471d5d69981/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=0f200733fe863c7ed4d33ab3fda16471d5d69981", "patch": "@@ -715,6 +715,13 @@\n #define __builtin_ia32_vminph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vminph_v32hf_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vmaxsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vmaxsh_v8hf_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vminsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vminsh_v8hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vcmpph_v32hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v32hf_mask(A, B, 1, D)\n+#define __builtin_ia32_vcmpph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vcmpph_v32hf_mask_round(A, B, 1, D, 8)\n+#define __builtin_ia32_vcmpsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vcmpsh_v8hf_mask_round(A, B, 1, D, 8)\n+\n+/* avx512fp16vlintrin.h */\n+#define __builtin_ia32_vcmpph_v8hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v8hf_mask(A, B, 1, D)\n+#define __builtin_ia32_vcmpph_v16hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v16hf_mask(A, B, 1, D)\n \n /* vpclmulqdqintrin.h */\n #define __builtin_ia32_vpclmulqdq_v4di(A, B, C)  __builtin_ia32_vpclmulqdq_v4di(A, B, 1) "}, {"sha": "ce0ad71f190a19083c830d82c6a134afda073afe", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f200733fe863c7ed4d33ab3fda16471d5d69981/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f200733fe863c7ed4d33ab3fda16471d5d69981/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=0f200733fe863c7ed4d33ab3fda16471d5d69981", "patch": "@@ -286,6 +286,7 @@ test_2 (_mm_add_round_sd, __m128d, __m128d, __m128d, 9)\n test_2 (_mm_add_round_ss, __m128, __m128, __m128, 9)\n test_2 (_mm_cmp_sd_mask, __mmask8, __m128d, __m128d, 1)\n test_2 (_mm_cmp_ss_mask, __mmask8, __m128, __m128, 1)\n+test_2 (_mm_cmp_sh_mask, __mmask8, __m128h, __m128h, 1)\n #ifdef __x86_64__\n test_2 (_mm_cvt_roundi64_sd, __m128d, __m128d, long long, 9)\n test_2 (_mm_cvt_roundi64_ss, __m128, __m128, long long, 9)\n@@ -470,6 +471,7 @@ test_3 (_mm256_maskz_shldi_epi64, __m256i, __mmask8, __m256i, __m256i, 1)\n test_3 (_mm_maskz_shldi_epi16, __m128i, __mmask8, __m128i, __m128i, 1)\n test_3 (_mm_maskz_shldi_epi32, __m128i, __mmask8, __m128i, __m128i, 1)\n test_3 (_mm_maskz_shldi_epi64, __m128i, __mmask8, __m128i, __m128i, 1)\n+test_3 (_mm_mask_cmp_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1)\n test_3v (_mm512_i32scatter_epi32, void *, __m512i, __m512i, 1)\n test_3v (_mm512_i32scatter_epi64, void *, __m256i, __m512i, 1)\n test_3v (_mm512_i32scatter_pd, void *, __m256i, __m512d, 1)\n@@ -680,6 +682,11 @@ test_2 (_mm512_max_round_ph, __m512h, __m512h, __m512h, 8)\n test_2 (_mm512_min_round_ph, __m512h, __m512h, __m512h, 8)\n test_2 (_mm_max_round_sh, __m128h, __m128h, __m128h, 8)\n test_2 (_mm_min_round_sh, __m128h, __m128h, __m128h, 8)\n+test_2 (_mm512_cmp_ph_mask, __mmask32, __m512h, __m512h, 1)\n+test_2 (_mm_comi_sh, int, __m128h, __m128h, 1)\n+test_2x (_mm512_cmp_round_ph_mask, __mmask32, __m512h, __m512h, 1, 8)\n+test_2x (_mm_cmp_round_sh_mask, __mmask8, __m128h, __m128h, 1, 8)\n+test_2x (_mm_comi_round_sh, int, __m128h, __m128h, 1, 8)\n test_3 (_mm512_maskz_add_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_sub_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_mul_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n@@ -692,6 +699,9 @@ test_3 (_mm512_maskz_max_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_min_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm_maskz_max_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n test_3 (_mm_maskz_min_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_3 (_mm512_mask_cmp_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1)\n+test_3x (_mm512_mask_cmp_round_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1, 8)\n+test_3x (_mm_mask_cmp_round_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1, 8)\n test_4 (_mm512_mask_add_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm512_mask_sub_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm512_mask_mul_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n@@ -705,6 +715,12 @@ test_4 (_mm512_mask_min_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h,\n test_4 (_mm_mask_max_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4 (_mm_mask_min_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n \n+/* avx512fp16vlintrin.h */\n+test_2 (_mm_cmp_ph_mask, __mmask8, __m128h, __m128h, 1)\n+test_2 (_mm256_cmp_ph_mask, __mmask16, __m256h, __m256h, 1)\n+test_3 (_mm_mask_cmp_ph_mask, __mmask8, __mmask8, __m128h, __m128h, 1)\n+test_3 (_mm256_mask_cmp_ph_mask, __mmask16, __mmask16, __m256h, __m256h, 1)\n+\n /* shaintrin.h */\n test_2 (_mm_sha1rnds4_epu32, __m128i, __m128i, __m128i, 1)\n "}, {"sha": "439346490bd510c4447e7ea461d252d4f90bb27f", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f200733fe863c7ed4d33ab3fda16471d5d69981/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f200733fe863c7ed4d33ab3fda16471d5d69981/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=0f200733fe863c7ed4d33ab3fda16471d5d69981", "patch": "@@ -457,6 +457,7 @@ test_2 (_mm256_shldi_epi64, __m256i, __m256i, __m256i, 1)\n test_2 (_mm_shldi_epi16, __m128i, __m128i, __m128i, 1)\n test_2 (_mm_shldi_epi32, __m128i, __m128i, __m128i, 1)\n test_2 (_mm_shldi_epi64, __m128i, __m128i, __m128i, 1)\n+test_2 (_mm_cmp_sh_mask, __mmask8, __m128h, __m128h, 1)\n #ifdef __x86_64__\n test_2 (_mm_cvt_roundi64_sd, __m128d, __m128d, long long, 9)\n test_2 (_mm_cvt_roundi64_ss, __m128, __m128, long long, 9)\n@@ -581,6 +582,7 @@ test_3 (_mm256_maskz_shldi_epi64, __m256i, __mmask8, __m256i, __m256i, 1)\n test_3 (_mm_maskz_shldi_epi16, __m128i, __mmask8, __m128i, __m128i, 1)\n test_3 (_mm_maskz_shldi_epi32, __m128i, __mmask8, __m128i, __m128i, 1)\n test_3 (_mm_maskz_shldi_epi64, __m128i, __mmask8, __m128i, __m128i, 1)\n+test_3 (_mm_mask_cmp_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1)\n test_3v (_mm512_i32scatter_epi32, void *, __m512i, __m512i, 1)\n test_3v (_mm512_i32scatter_epi64, void *, __m256i, __m512i, 1)\n test_3v (_mm512_i32scatter_pd, void *, __m256i, __m512d, 1)\n@@ -785,6 +787,11 @@ test_2 (_mm512_max_round_ph, __m512h, __m512h, __m512h, 8)\n test_2 (_mm512_min_round_ph, __m512h, __m512h, __m512h, 8)\n test_2 (_mm_max_round_sh, __m128h, __m128h, __m128h, 8)\n test_2 (_mm_min_round_sh, __m128h, __m128h, __m128h, 8)\n+test_2 (_mm512_cmp_ph_mask, __mmask32, __m512h, __m512h, 1)\n+test_2 (_mm_comi_sh, int, __m128h, __m128h, 1)\n+test_2x (_mm512_cmp_round_ph_mask, __mmask32, __m512h, __m512h, 1, 8)\n+test_2x (_mm_cmp_round_sh_mask, __mmask8, __m128h, __m128h, 1, 8)\n+test_2x (_mm_comi_round_sh, int, __m128h, __m128h, 1, 8)\n test_3 (_mm512_maskz_add_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_sub_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_mul_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n@@ -797,6 +804,9 @@ test_3 (_mm512_maskz_max_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm512_maskz_min_round_ph, __m512h, __mmask32, __m512h, __m512h, 8)\n test_3 (_mm_maskz_max_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n test_3 (_mm_maskz_min_round_sh, __m128h, __mmask8, __m128h, __m128h, 8)\n+test_3 (_mm512_mask_cmp_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1)\n+test_3x (_mm512_mask_cmp_round_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1, 8)\n+test_3x (_mm_mask_cmp_round_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1, 8)\n test_4 (_mm512_mask_add_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm512_mask_sub_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n test_4 (_mm512_mask_mul_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 8)\n@@ -810,6 +820,12 @@ test_4 (_mm512_mask_min_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h,\n test_4 (_mm_mask_max_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n test_4 (_mm_mask_min_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 8)\n \n+/* avx512fp16vlintrin.h */\n+test_2 (_mm_cmp_ph_mask, __mmask8, __m128h, __m128h, 1)\n+test_2 (_mm256_cmp_ph_mask, __mmask16, __m256h, __m256h, 1)\n+test_3 (_mm_mask_cmp_ph_mask, __mmask8, __mmask8, __m128h, __m128h, 1)\n+test_3 (_mm256_mask_cmp_ph_mask, __mmask16, __mmask16, __m256h, __m256h, 1)\n+\n /* shaintrin.h */\n test_2 (_mm_sha1rnds4_epu32, __m128i, __m128i, __m128i, 1)\n "}, {"sha": "f6768bac3456c18f87af2c34d09d28381182a999", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f200733fe863c7ed4d33ab3fda16471d5d69981/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f200733fe863c7ed4d33ab3fda16471d5d69981/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=0f200733fe863c7ed4d33ab3fda16471d5d69981", "patch": "@@ -716,6 +716,13 @@\n #define __builtin_ia32_vminph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vminph_v32hf_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vmaxsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vmaxsh_v8hf_mask_round(A, B, C, D, 8)\n #define __builtin_ia32_vminsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vminsh_v8hf_mask_round(A, B, C, D, 8)\n+#define __builtin_ia32_vcmpph_v32hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v32hf_mask(A, B, 1, D)\n+#define __builtin_ia32_vcmpph_v32hf_mask_round(A, B, C, D, E) __builtin_ia32_vcmpph_v32hf_mask_round(A, B, 1, D, 8)\n+#define __builtin_ia32_vcmpsh_v8hf_mask_round(A, B, C, D, E) __builtin_ia32_vcmpsh_v8hf_mask_round(A, B, 1, D, 8)\n+\n+/* avx512fp16vlintrin.h */\n+#define __builtin_ia32_vcmpph_v8hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v8hf_mask(A, B, 1, D)\n+#define __builtin_ia32_vcmpph_v16hf_mask(A, B, C, D) __builtin_ia32_vcmpph_v16hf_mask(A, B, 1, D)\n \n /* vpclmulqdqintrin.h */\n #define __builtin_ia32_vpclmulqdq_v4di(A, B, C)  __builtin_ia32_vpclmulqdq_v4di(A, B, 1) "}]}