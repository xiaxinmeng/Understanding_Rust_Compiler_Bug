{"sha": "1f07810659616221c3bf4177c1fc2ca3607f7728", "node_id": "C_kwDOANBUbNoAKDFmMDc4MTA2NTk2MTYyMjFjM2JmNDE3N2MxZmMyY2EzNjA3Zjc3Mjg", "commit": {"author": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2022-01-11T14:22:43Z"}, "committer": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2022-01-11T14:47:39Z"}, "message": "tree-object-size: Handle GIMPLE_CALL\n\nHandle non-constant expressions in GIMPLE_CALL arguments.  Also handle\nalloca.\n\ngcc/ChangeLog:\n\n\tPR middle-end/70090\n\t* tree-object-size.c (alloc_object_size): Make and return\n\tnon-constant size expression.\n\t(call_object_size): Return expression or unknown based on\n\twhether dynamic object size is requested.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/70090\n\t* gcc.dg/builtin-dynamic-object-size-0.c: Add new tests.\n\t* gcc.dg/builtin-object-size-1.c (test1)\n\t[__builtin_object_size]: Alter expected result for dynamic\n\tobject size.\n\t* gcc.dg/builtin-object-size-2.c (test1)\n\t[__builtin_object_size]: Likewise.\n\t* gcc.dg/builtin-object-size-3.c (test1)\n\t[__builtin_object_size]: Likewise.\n\t* gcc.dg/builtin-object-size-4.c (test1)\n\t[__builtin_object_size]: Likewise.\n\nSigned-off-by: Siddhesh Poyarekar <siddhesh@gotplt.org>", "tree": {"sha": "d1cfc6cb9825541f4f71d526e1e511d8ee4fff1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1cfc6cb9825541f4f71d526e1e511d8ee4fff1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f07810659616221c3bf4177c1fc2ca3607f7728", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f07810659616221c3bf4177c1fc2ca3607f7728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f07810659616221c3bf4177c1fc2ca3607f7728", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f07810659616221c3bf4177c1fc2ca3607f7728/comments", "author": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea19c8f33a3a8d2b52f89f1fade0a21e3c779190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea19c8f33a3a8d2b52f89f1fade0a21e3c779190", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea19c8f33a3a8d2b52f89f1fade0a21e3c779190"}], "stats": {"total": 333, "additions": 325, "deletions": 8}, "files": [{"sha": "930fd49cd1654e33d04a9c542698c28f0da2fcc5", "filename": "gcc/testsuite/gcc.dg/builtin-dynamic-object-size-0.c", "status": "modified", "additions": 268, "deletions": 1, "changes": 269, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f07810659616221c3bf4177c1fc2ca3607f7728/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f07810659616221c3bf4177c1fc2ca3607f7728/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-dynamic-object-size-0.c?ref=1f07810659616221c3bf4177c1fc2ca3607f7728", "patch": "@@ -4,6 +4,73 @@\n typedef __SIZE_TYPE__ size_t;\n #define abort __builtin_abort\n \n+void *\n+__attribute__ ((alloc_size (1)))\n+__attribute__ ((__nothrow__ , __leaf__))\n+__attribute__ ((noinline))\n+alloc_func (size_t sz)\n+{\n+  return __builtin_malloc (sz);\n+}\n+\n+void *\n+__attribute__ ((alloc_size (1, 2)))\n+__attribute__ ((__nothrow__ , __leaf__))\n+__attribute__ ((noinline))\n+calloc_func (size_t cnt, size_t sz)\n+{\n+  return __builtin_calloc (cnt, sz);\n+}\n+\n+void *\n+__attribute__ ((noinline))\n+unknown_allocator (size_t cnt, size_t sz)\n+{\n+  return __builtin_calloc (cnt, sz);\n+}\n+\n+size_t\n+__attribute__ ((noinline))\n+test_unknown (size_t cnt, size_t sz)\n+{\n+  void *ch = unknown_allocator (cnt, sz);\n+  size_t ret = __builtin_dynamic_object_size (ch, 0);\n+  __builtin_free (ch);\n+  return ret;\n+}\n+\n+/* Malloc-like allocator.  */\n+\n+size_t\n+__attribute__ ((noinline))\n+test_malloc (size_t sz)\n+{\n+  void *ch = alloc_func (sz);\n+  size_t ret = __builtin_dynamic_object_size (ch, 0);\n+  __builtin_free (ch);\n+  return ret;\n+}\n+\n+size_t\n+__attribute__ ((noinline))\n+test_builtin_malloc (size_t sz)\n+{\n+  void *ch = __builtin_malloc (sz);\n+  size_t ret = __builtin_dynamic_object_size (ch, 0);\n+  __builtin_free (ch);\n+  return ret;\n+}\n+\n+size_t\n+__attribute__ ((noinline))\n+test_builtin_malloc_cond (int cond)\n+{\n+  void *ch = __builtin_malloc (cond ? 32 : 64);\n+  size_t ret = __builtin_dynamic_object_size (ch, 0);\n+  __builtin_free (ch);\n+  return ret;\n+}\n+\n size_t\n __attribute__ ((noinline))\n test_builtin_malloc_condphi (int cond)\n@@ -21,6 +88,155 @@ test_builtin_malloc_condphi (int cond)\n   return ret;\n }\n \n+size_t\n+__attribute__ ((noinline))\n+test_builtin_malloc_condphi2 (int cond, size_t in)\n+{\n+  void *ch;\n+\n+  if (cond)\n+    ch = __builtin_malloc (in);\n+  else\n+    ch = __builtin_malloc (64);\n+\n+  size_t ret = __builtin_dynamic_object_size (ch, 0);\n+\n+  __builtin_free (ch);\n+  return ret;\n+}\n+\n+size_t\n+__attribute__ ((noinline))\n+test_builtin_malloc_condphi3 (int cond, size_t in, size_t in2)\n+{\n+  void *ch;\n+\n+  if (cond)\n+    ch = __builtin_malloc (in);\n+  else\n+    ch = __builtin_malloc (in2);\n+\n+  size_t ret = __builtin_dynamic_object_size (ch, 0);\n+\n+  __builtin_free (ch);\n+  return ret;\n+}\n+\n+size_t\n+__attribute__ ((noinline))\n+test_builtin_malloc_condphi4 (size_t sz, int cond)\n+{\n+  char *a = __builtin_malloc (sz);\n+  char b[sz / 2];\n+\n+  size_t ret = __builtin_dynamic_object_size (cond ? b : (void *) &a, 0);\n+  __builtin_free (a);\n+  return ret;\n+}\n+\n+size_t\n+__attribute__ ((noinline))\n+test_builtin_malloc_condphi5 (size_t sz, int cond, char *c)\n+{\n+  char *a = __builtin_malloc (sz);\n+\n+  size_t ret = __builtin_dynamic_object_size (cond ? c : (void *) &a, 0);\n+  __builtin_free (a);\n+  return ret;\n+}\n+\n+/* Calloc-like allocator.  */\n+\n+size_t\n+__attribute__ ((noinline))\n+test_calloc (size_t cnt, size_t sz)\n+{\n+  void *ch = calloc_func (cnt, sz);\n+  size_t ret = __builtin_dynamic_object_size (ch, 0);\n+  __builtin_free (ch);\n+  return ret;\n+}\n+\n+size_t\n+__attribute__ ((noinline))\n+test_builtin_calloc (size_t cnt, size_t sz)\n+{\n+  void *ch = __builtin_calloc (cnt, sz);\n+  size_t ret = __builtin_dynamic_object_size (ch, 0);\n+  __builtin_free (ch);\n+  return ret;\n+}\n+\n+size_t\n+__attribute__ ((noinline))\n+test_builtin_calloc_cond (int cond1, int cond2)\n+{\n+  void *ch = __builtin_calloc (cond1 ? 32 : 64, cond2 ? 1024 : 16);\n+  size_t ret = __builtin_dynamic_object_size (ch, 0);\n+  __builtin_free (ch);\n+  return ret;\n+}\n+\n+size_t\n+__attribute__ ((noinline))\n+test_builtin_calloc_condphi (size_t cnt, size_t sz, int cond)\n+{\n+  struct\n+    {\n+      int a;\n+      char b;\n+    } bin[cnt];\n+\n+  char *ch = __builtin_calloc (cnt, sz);\n+  size_t ret = __builtin_dynamic_object_size (cond ? ch : (void *) &bin, 0);\n+\n+  __builtin_free (ch);\n+  return ret;\n+}\n+\n+/* Passthrough functions.  */\n+\n+size_t\n+__attribute__ ((noinline))\n+test_passthrough (size_t sz, char *in)\n+{\n+  char *bin = __builtin_malloc (sz);\n+  char *dest = __builtin_memcpy (bin, in, sz);\n+\n+  size_t ret = __builtin_dynamic_object_size (dest, 0);\n+  __builtin_free (bin);\n+  return ret;\n+}\n+\n+size_t\n+__attribute__ ((noinline))\n+test_passthrough_nonssa (char *in)\n+{\n+  char bin[__builtin_strlen (in) + 1];\n+  char *dest = __builtin_memcpy (bin, in, __builtin_strlen (in) + 1);\n+\n+  return __builtin_dynamic_object_size (dest, 0);\n+}\n+\n+/* Variable length arrays.  */\n+size_t\n+__attribute__ ((noinline))\n+test_dynarray (size_t sz)\n+{\n+  char bin[sz];\n+\n+  return __builtin_dynamic_object_size (bin, 0);\n+}\n+\n+size_t\n+__attribute__ ((noinline))\n+test_dynarray_cond (int cond)\n+{\n+  char bin[cond ? 8 : 16];\n+\n+  return __builtin_dynamic_object_size (bin, 0);\n+}\n+\n size_t\n __attribute__ ((noinline))\n test_deploop (size_t sz, size_t cond)\n@@ -29,7 +245,7 @@ test_deploop (size_t sz, size_t cond)\n \n   for (size_t i = 0; i < sz; i++)\n     if (i == cond)\n-      bin = __builtin_alloca (64);\n+      bin = __builtin_alloca (sz);\n \n   return __builtin_dynamic_object_size (bin, 0);\n }\n@@ -68,10 +284,61 @@ unsigned nfails = 0;\n int\n main (int argc, char **argv)\n {\n+  size_t outsz = test_unknown (32, 42);\n+  if (outsz != -1 && outsz != 32)\n+    FAIL ();\n+  if (test_malloc (2048) != 2048)\n+    FAIL ();\n+  if (test_builtin_malloc (2048) != 2048)\n+    FAIL ();\n+  if (test_builtin_malloc_cond (1) != 32)\n+    FAIL ();\n+  if (test_builtin_malloc_cond (0) != 64)\n+    FAIL ();\n   if (test_builtin_malloc_condphi (1) != 32)\n     FAIL ();\n   if (test_builtin_malloc_condphi (0) != 64)\n     FAIL ();\n+  if (test_builtin_malloc_condphi2 (1, 128) != 128)\n+    FAIL ();\n+  if (test_builtin_malloc_condphi2 (0, 128) != 64)\n+    FAIL ();\n+  if (test_builtin_malloc_condphi3 (1, 128, 256) != 128)\n+    FAIL ();\n+  if (test_builtin_malloc_condphi3 (0, 128, 256) != 256)\n+    FAIL ();\n+  if (test_builtin_malloc_condphi4 (128, 1) != 64)\n+    FAIL ();\n+  if (test_builtin_malloc_condphi4 (128, 0) != sizeof (void *))\n+    FAIL ();\n+  if (test_builtin_malloc_condphi5 (128, 0, argv[0]) != -1)\n+    FAIL ();\n+  if (test_calloc (2048, 4) != 2048 * 4)\n+    FAIL ();\n+  if (test_builtin_calloc (2048, 8) != 2048 * 8)\n+    FAIL ();\n+  if (test_builtin_calloc_cond (0, 0) != 64 * 16)\n+    FAIL ();\n+  if (test_builtin_calloc_cond (1, 1) != 32 * 1024)\n+    FAIL ();\n+  if (test_builtin_calloc_condphi (128, 1, 0)\n+      != 128 * sizeof (struct { int a; char b; }))\n+    FAIL ();\n+  if (test_builtin_calloc_condphi (128, 1, 1) != 128)\n+    FAIL ();\n+  if (test_passthrough (__builtin_strlen (argv[0]) + 1, argv[0])\n+      != __builtin_strlen (argv[0]) + 1)\n+    FAIL ();\n+  if (test_passthrough_nonssa (argv[0]) != __builtin_strlen (argv[0]) + 1)\n+    FAIL ();\n+  if (test_dynarray (__builtin_strlen (argv[0])) != __builtin_strlen (argv[0]))\n+    FAIL ();\n+  if (test_dynarray_cond (0) != 16)\n+    FAIL ();\n+  if (test_dynarray_cond (1) != 8)\n+    FAIL ();\n+  if (test_deploop (128, 4) != 128)\n+    FAIL ();\n   if (test_deploop (128, 129) != 32)\n     FAIL ();\n   if (test_parmsz_simple (argv[0], __builtin_strlen (argv[0]) + 1)"}, {"sha": "06d442796cbf10f737d98f0fffa75bd13c326881", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-1.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f07810659616221c3bf4177c1fc2ca3607f7728/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f07810659616221c3bf4177c1fc2ca3607f7728/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-1.c?ref=1f07810659616221c3bf4177c1fc2ca3607f7728", "patch": "@@ -135,10 +135,17 @@ test1 (void *q, int x)\n     abort ();\n   if (__builtin_object_size (&extb[5], 0) != sizeof (extb) - 5)\n     abort ();\n+#ifdef __builtin_object_size\n+  if (__builtin_object_size (var, 0) != x + 10)\n+    abort ();\n+  if (__builtin_object_size (var + 10, 0) != x)\n+    abort ();\n+#else\n   if (__builtin_object_size (var, 0) != (size_t) -1)\n     abort ();\n   if (__builtin_object_size (var + 10, 0) != (size_t) -1)\n     abort ();\n+#endif\n   if (__builtin_object_size (&var[5], 0) != (size_t) -1)\n     abort ();\n   if (__builtin_object_size (zerol, 0) != 0)"}, {"sha": "2364f2d6afd1917d8ce33ca001b0c2ab287ce395", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-2.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f07810659616221c3bf4177c1fc2ca3607f7728/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f07810659616221c3bf4177c1fc2ca3607f7728/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-2.c?ref=1f07810659616221c3bf4177c1fc2ca3607f7728", "patch": "@@ -137,16 +137,30 @@ test1 (void *q, int x)\n     abort ();\n   if (__builtin_object_size (&extc[5].c[3], 1) != (size_t) -1)\n     abort ();\n+#ifdef __builtin_object_size\n+  if (__builtin_object_size (var, 1) != x + 10)\n+    abort ();\n+  if (__builtin_object_size (var + 10, 1) != x)\n+    abort ();\n+#else\n   if (__builtin_object_size (var, 1) != (size_t) -1)\n     abort ();\n   if (__builtin_object_size (var + 10, 1) != (size_t) -1)\n     abort ();\n+#endif\n   if (__builtin_object_size (&var[5], 1) != (size_t) -1)\n     abort ();\n+#ifdef __builtin_object_size\n+  if (__builtin_object_size (vara, 1) != (x + 10) * sizeof (struct A))\n+    abort ();\n+  if (__builtin_object_size (vara + 10, 1) != x * sizeof (struct A))\n+    abort ();    \n+#else\n   if (__builtin_object_size (vara, 1) != (size_t) -1)\n     abort ();\n   if (__builtin_object_size (vara + 10, 1) != (size_t) -1)\n     abort ();    \n+#endif\n   if (__builtin_object_size (&vara[5], 1) != (size_t) -1)\n     abort ();\n   if (__builtin_object_size (&vara[0].a, 1) != sizeof (vara[0].a))"}, {"sha": "753ee4a1a4fecaff9dfc9a8966cee4078b6464b1", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-3.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f07810659616221c3bf4177c1fc2ca3607f7728/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f07810659616221c3bf4177c1fc2ca3607f7728/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-3.c?ref=1f07810659616221c3bf4177c1fc2ca3607f7728", "patch": "@@ -140,10 +140,17 @@ test1 (void *q, int x)\n     abort ();\n   if (__builtin_object_size (&extb[5], 2) != sizeof (extb) - 5)\n     abort ();\n+#ifdef __builtin_object_size\n+  if (__builtin_object_size (var, 2) != x + 10)\n+    abort ();\n+  if (__builtin_object_size (var + 10, 2) != x)\n+    abort ();\n+#else\n   if (__builtin_object_size (var, 2) != 0)\n     abort ();\n   if (__builtin_object_size (var + 10, 2) != 0)\n     abort ();\n+#endif\n   if (__builtin_object_size (&var[5], 2) != 0)\n     abort ();\n   if (__builtin_object_size (zerol, 2) != 0)"}, {"sha": "c383385e060caa9314e94c6a162785c5df8975dc", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-4.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f07810659616221c3bf4177c1fc2ca3607f7728/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f07810659616221c3bf4177c1fc2ca3607f7728/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-4.c?ref=1f07810659616221c3bf4177c1fc2ca3607f7728", "patch": "@@ -150,16 +150,30 @@ test1 (void *q, int x)\n     abort ();\n   if (__builtin_object_size (&extc[5].c[3], 3) != 0)\n     abort ();\n+#ifdef __builtin_object_size\n+  if (__builtin_object_size (var, 3) != x + 10)\n+    abort ();\n+  if (__builtin_object_size (var + 10, 3) != x)\n+    abort ();\n+#else\n   if (__builtin_object_size (var, 3) != 0)\n     abort ();\n   if (__builtin_object_size (var + 10, 3) != 0)\n     abort ();\n+#endif\n   if (__builtin_object_size (&var[5], 3) != 0)\n     abort ();\n+#ifdef __builtin_object_size\n+  if (__builtin_object_size (vara, 3) != (x + 10) * sizeof (struct A))\n+    abort ();\n+  if (__builtin_object_size (vara + 10, 3) != x * sizeof (struct A))\n+    abort ();    \n+#else\n   if (__builtin_object_size (vara, 3) != 0)\n     abort ();\n   if (__builtin_object_size (vara + 10, 3) != 0)\n     abort ();    \n+#endif\n   if (__builtin_object_size (&vara[5], 3) != 0)\n     abort ();\n   if (__builtin_object_size (&vara[0].a, 3) != sizeof (vara[0].a))"}, {"sha": "a887cc65af12bdfff806d4473b2e81dcbfafdc8d", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f07810659616221c3bf4177c1fc2ca3607f7728/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f07810659616221c3bf4177c1fc2ca3607f7728/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=1f07810659616221c3bf4177c1fc2ca3607f7728", "patch": "@@ -751,7 +751,8 @@ alloc_object_size (const gcall *call, int object_size_type)\n   gcc_assert (is_gimple_call (call));\n \n   tree calltype;\n-  if (tree callfn = gimple_call_fndecl (call))\n+  tree callfn = gimple_call_fndecl (call);\n+  if (callfn)\n     calltype = TREE_TYPE (callfn);\n   else\n     calltype = gimple_call_fntype (call);\n@@ -771,12 +772,13 @@ alloc_object_size (const gcall *call, int object_size_type)\n       if (TREE_CHAIN (p))\n         arg2 = TREE_INT_CST_LOW (TREE_VALUE (TREE_CHAIN (p)))-1;\n     }\n+  else if (gimple_call_builtin_p (call, BUILT_IN_NORMAL)\n+\t   && callfn && ALLOCA_FUNCTION_CODE_P (DECL_FUNCTION_CODE (callfn)))\n+  arg1 = 0;\n \n-  if (arg1 < 0 || arg1 >= (int)gimple_call_num_args (call)\n-      || TREE_CODE (gimple_call_arg (call, arg1)) != INTEGER_CST\n-      || (arg2 >= 0\n-\t  && (arg2 >= (int)gimple_call_num_args (call)\n-\t      || TREE_CODE (gimple_call_arg (call, arg2)) != INTEGER_CST)))\n+  /* Non-const arguments are OK here, let the caller handle constness.  */\n+  if (arg1 < 0 || arg1 >= (int) gimple_call_num_args (call)\n+      || arg2 >= (int) gimple_call_num_args (call))\n     return size_unknown (object_size_type);\n \n   tree bytes = NULL_TREE;\n@@ -787,7 +789,10 @@ alloc_object_size (const gcall *call, int object_size_type)\n   else if (arg1 >= 0)\n     bytes = fold_convert (sizetype, gimple_call_arg (call, arg1));\n \n-  return bytes;\n+  if (bytes)\n+    return STRIP_NOPS (bytes);\n+\n+  return size_unknown (object_size_type);\n }\n \n \n@@ -1242,6 +1247,9 @@ call_object_size (struct object_size_info *osi, tree ptr, gcall *call)\n   gcc_assert (osi->pass == 0);\n   tree bytes = alloc_object_size (call, object_size_type);\n \n+  if (!(object_size_type & OST_DYNAMIC) && TREE_CODE (bytes) != INTEGER_CST)\n+    bytes = size_unknown (object_size_type);\n+\n   object_sizes_set (osi, varno, bytes, bytes);\n }\n "}]}