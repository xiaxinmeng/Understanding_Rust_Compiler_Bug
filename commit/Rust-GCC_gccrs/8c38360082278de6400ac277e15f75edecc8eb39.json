{"sha": "8c38360082278de6400ac277e15f75edecc8eb39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMzODM2MDA4MjI3OGRlNjQwMGFjMjc3ZTE1Zjc1ZWRlY2M4ZWIzOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2016-06-01T12:01:17Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2016-06-01T12:01:17Z"}, "message": "loop-unroll.c (decide_unroll_constant_iterations, [...]): Use likely upper bounds.\n\n\t* loop-unroll.c (decide_unroll_constant_iterations,\n\tdecide_unroll_runtime_iterations, decide_unroll_stupid): Use\n\tlikely upper bounds.\n\t* loop-iv.c (find_simple_exit): Dump likely upper bounds.\n\n\t* gcc.dg/unroll-6.c: Update template.\n\t* gcc.dg/unroll-7.c: New testcase.\n\t* gcc.dg/unroll-8.c: New testcase.\n\nFrom-SVN: r236986", "tree": {"sha": "ae7e412f842bbcac3d8dcd2c7ef4fe40679efea6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae7e412f842bbcac3d8dcd2c7ef4fe40679efea6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c38360082278de6400ac277e15f75edecc8eb39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c38360082278de6400ac277e15f75edecc8eb39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c38360082278de6400ac277e15f75edecc8eb39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c38360082278de6400ac277e15f75edecc8eb39/comments", "author": null, "committer": null, "parents": [{"sha": "268143a480cf8e4142db3ebb2dadaf924f6f3303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/268143a480cf8e4142db3ebb2dadaf924f6f3303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/268143a480cf8e4142db3ebb2dadaf924f6f3303"}], "stats": {"total": 54, "additions": 49, "deletions": 5}, "files": [{"sha": "d7321aeff2f39666a3d54d064ec3d9fa3165c6ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c38360082278de6400ac277e15f75edecc8eb39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c38360082278de6400ac277e15f75edecc8eb39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c38360082278de6400ac277e15f75edecc8eb39", "patch": "@@ -1,3 +1,10 @@\n+2016-06-01  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* loop-unroll.c (decide_unroll_constant_iterations,\n+\tdecide_unroll_runtime_iterations, decide_unroll_stupid): Use\n+\tlikely upper bounds.\n+\t* loop-iv.c (find_simple_exit): Dump likely upper bounds.\n+\n 2016-06-01  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* tree-core.h (enum omp_clause_code): Remove"}, {"sha": "57fb8c1fa7f116682fc39745b7aa7592387f8a59", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c38360082278de6400ac277e15f75edecc8eb39/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c38360082278de6400ac277e15f75edecc8eb39/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=8c38360082278de6400ac277e15f75edecc8eb39", "patch": "@@ -2998,6 +2998,8 @@ find_simple_exit (struct loop *loop, struct niter_desc *desc)\n \n \t  fprintf (dump_file, \"  upper bound: %li\\n\",\n \t\t   (long)get_max_loop_iterations_int (loop));\n+\t  fprintf (dump_file, \"  likely upper bound: %li\\n\",\n+\t\t   (long)get_likely_max_loop_iterations_int (loop));\n \t  fprintf (dump_file, \"  realistic bound: %li\\n\",\n \t\t   (long)get_estimated_loop_iterations_int (loop));\n \t}"}, {"sha": "42b1548d1ffa9f0967e95e0d596ac4c638754465", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c38360082278de6400ac277e15f75edecc8eb39/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c38360082278de6400ac277e15f75edecc8eb39/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=8c38360082278de6400ac277e15f75edecc8eb39", "patch": "@@ -396,7 +396,7 @@ decide_unroll_constant_iterations (struct loop *loop, int flags)\n      of iterations.  */\n   if (desc->niter < 2 * nunroll\n       || ((get_estimated_loop_iterations (loop, &iterations)\n-\t   || get_max_loop_iterations (loop, &iterations))\n+\t   || get_likely_max_loop_iterations (loop, &iterations))\n \t  && wi::ltu_p (iterations, 2 * nunroll)))\n     {\n       if (dump_file)\n@@ -706,7 +706,7 @@ decide_unroll_runtime_iterations (struct loop *loop, int flags)\n \n   /* Check whether the loop rolls.  */\n   if ((get_estimated_loop_iterations (loop, &iterations)\n-       || get_max_loop_iterations (loop, &iterations))\n+       || get_likely_max_loop_iterations (loop, &iterations))\n       && wi::ltu_p (iterations, 2 * nunroll))\n     {\n       if (dump_file)\n@@ -1162,7 +1162,7 @@ decide_unroll_stupid (struct loop *loop, int flags)\n \n   /* Check whether the loop rolls.  */\n   if ((get_estimated_loop_iterations (loop, &iterations)\n-       || get_max_loop_iterations (loop, &iterations))\n+       || get_likely_max_loop_iterations (loop, &iterations))\n       && wi::ltu_p (iterations, 2 * nunroll))\n     {\n       if (dump_file)"}, {"sha": "75d8504da76281dd67a4bf3f4c57914e07a1c3fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c38360082278de6400ac277e15f75edecc8eb39/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c38360082278de6400ac277e15f75edecc8eb39/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8c38360082278de6400ac277e15f75edecc8eb39", "patch": "@@ -1,3 +1,9 @@\n+2016-06-01  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/unroll-6.c: Update template.\n+\t* gcc.dg/unroll-7.c: New testcase.\n+\t* gcc.dg/unroll-8.c: New testcase.\n+\n 2016-06-01  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/opt56.ad[sb]: New test."}, {"sha": "e4c231ea79f6d6d4b3d74082a65f18c6976d8d9d", "filename": "gcc/testsuite/gcc.dg/unroll-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c38360082278de6400ac277e15f75edecc8eb39/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c38360082278de6400ac277e15f75edecc8eb39/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-6.c?ref=8c38360082278de6400ac277e15f75edecc8eb39", "patch": "@@ -28,7 +28,7 @@ int t2()\n         abort ();\n   return 0;\n }\n-/* { dg-final { scan-rtl-dump-times \"upper bound: 999999\" 1 \"loop2_unroll\" } } */\n+/* { dg-final { scan-rtl-dump-times \"  upper bound: 999999\" 1 \"loop2_unroll\" } } */\n /* { dg-final { scan-rtl-dump-not \"realistic bound: 999999\" \"loop2_unroll\" } } */\n-/* { dg-final { scan-rtl-dump-times \"upper bound: 2999999\" 1 \"loop2_unroll\" } } */\n+/* { dg-final { scan-rtl-dump-times \"  upper bound: 2999999\" 1 \"loop2_unroll\" } } */\n /* { dg-final { scan-rtl-dump-times \"realistic bound: 2999999\" 1 \"loop2_unroll\" } } */"}, {"sha": "e7fa4cf0a8c37fa86aab2cf6b0b3cadbc2d1fab2", "filename": "gcc/testsuite/gcc.dg/unroll-7.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c38360082278de6400ac277e15f75edecc8eb39/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c38360082278de6400ac277e15f75edecc8eb39/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-7.c?ref=8c38360082278de6400ac277e15f75edecc8eb39", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-rtl-loop2_unroll -funroll-loops\" } */\n+int t(int *a)\n+{\n+  int i;\n+  for (i=0;i<1000000;i++)\n+    a[i]++;\n+}\n+/* { dg-final { scan-rtl-dump \"Unrolled loop\" \"loop2_unroll\" } } */\n+/* { dg-final { scan-rtl-dump \"number of iterations: .const_int 999999\" \"loop2_unroll\" } } */\n+/* { dg-final { scan-rtl-dump \"upper bound: 999999\" \"loop2_unroll\" } } */\n+/* { dg-final { scan-rtl-dump \"realistic bound: 999999\" \"loop2_unroll\" } } */\n+/* { dg-final { scan-rtl-dump \"Considering unrolling loop with constant number of iterations\" \"loop2_unroll\" } } */\n+/* { dg-final { scan-rtl-dump-not \"Invalid sum\" \"loop2_unroll\" } } */"}, {"sha": "b16df6728333f75eacd900d8ccd5c30a4df68468", "filename": "gcc/testsuite/gcc.dg/unroll-8.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c38360082278de6400ac277e15f75edecc8eb39/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c38360082278de6400ac277e15f75edecc8eb39/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-8.c?ref=8c38360082278de6400ac277e15f75edecc8eb39", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-rtl-loop2_unroll -funroll-loops\" } */\n+struct a {int a[7];};\n+int t(struct a *a, int n)\n+{\n+  int i;\n+  for (i=0;i<n;i++)\n+    a->a[i]++;\n+}\n+/* { dg-final { scan-rtl-dump-not \"Unrolled loop\" \"loop2_unroll\" } } */\n+/* { dg-final { scan-rtl-dump \"likely upper bound: 7\" \"loop2_unroll\" } } */\n+/* { dg-final { scan-rtl-dump \"realistic bound: -1\" \"loop2_unroll\" } } */\n+/* { dg-final { scan-rtl-dump \"Not unrolling loop, doesn't roll\" \"loop2_unroll\" } } */\n+/* { dg-final { scan-rtl-dump-not \"Invalid sum\" \"loop2_unroll\" } } */\n+/* { dg-final { scan-rtl-dump-not \"upper bound: -1\" \"loop2_unroll\" } } */"}]}