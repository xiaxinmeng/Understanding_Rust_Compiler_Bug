{"sha": "ecb4e37b73d7649a447fe63f33dc20826fce0bb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNiNGUzN2I3M2Q3NjQ5YTQ0N2ZlNjNmMzNkYzIwODI2ZmNlMGJiNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-09-22T19:15:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-09-22T19:15:43Z"}, "message": "re PR tree-optimization/37145 (XFAILs from PRE rewrite, SCCVN union optimization disabled)\n\n2008-09-22  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/37145\n\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Re-enable\n\tvalue-numbering union accesses with their offset and size only.\n\t(visit_reference_op_load): Fix simplification of inserted conversions.\n\t* tree-ssa-pre.c (find_or_generate_expression): Do not\n\trecursively generate expressions if running FRE.\n\n\t* gcc.c-torture/compile/20080922-1.c: New testcase.\n\t* gcc.dg/tree-ssa/ssa-fre-7.c: Remove XFAIL.\n\t* gcc.dg/tree-ssa/ssa-fre-8.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-fre-9.c: Likewise.\n\nFrom-SVN: r140562", "tree": {"sha": "011ef08c0c1e906fc44e085fd10886019e133ce7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/011ef08c0c1e906fc44e085fd10886019e133ce7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecb4e37b73d7649a447fe63f33dc20826fce0bb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecb4e37b73d7649a447fe63f33dc20826fce0bb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecb4e37b73d7649a447fe63f33dc20826fce0bb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecb4e37b73d7649a447fe63f33dc20826fce0bb6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "880f8ea3bd9ca8e4d1acf5083760da66b05fea59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/880f8ea3bd9ca8e4d1acf5083760da66b05fea59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/880f8ea3bd9ca8e4d1acf5083760da66b05fea59"}], "stats": {"total": 94, "additions": 72, "deletions": 22}, "files": [{"sha": "8e8d9e19efe65b0e3c3286e0bd4db1e9908086a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb4e37b73d7649a447fe63f33dc20826fce0bb6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb4e37b73d7649a447fe63f33dc20826fce0bb6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ecb4e37b73d7649a447fe63f33dc20826fce0bb6", "patch": "@@ -1,3 +1,12 @@\n+2008-09-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37145\n+\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Re-enable\n+\tvalue-numbering union accesses with their offset and size only.\n+\t(visit_reference_op_load): Fix simplification of inserted conversions.\n+\t* tree-ssa-pre.c (find_or_generate_expression): Do not\n+\trecursively generate expressions if running FRE.\n+\n 2008-09-22  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* config/mips/mips.h (ISA_HAS_BADDU): New macro."}, {"sha": "bbc5e339125519ebab4a91863ef815dacac26c55", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb4e37b73d7649a447fe63f33dc20826fce0bb6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb4e37b73d7649a447fe63f33dc20826fce0bb6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ecb4e37b73d7649a447fe63f33dc20826fce0bb6", "patch": "@@ -1,3 +1,11 @@\n+2008-09-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37145\n+\t* gcc.c-torture/compile/20080922-1.c: New testcase.\n+\t* gcc.dg/tree-ssa/ssa-fre-7.c: Remove XFAIL.\n+\t* gcc.dg/tree-ssa/ssa-fre-8.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-fre-9.c: Likewise.\n+\n 2008-09-22  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* gcc.target/mips/octeon-baddu-1.c: New test."}, {"sha": "853ec4f25bb02fce3bfce0d92f1c93cd1cd72c24", "filename": "gcc/testsuite/gcc.c-torture/compile/20080922-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb4e37b73d7649a447fe63f33dc20826fce0bb6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20080922-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb4e37b73d7649a447fe63f33dc20826fce0bb6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20080922-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20080922-1.c?ref=ecb4e37b73d7649a447fe63f33dc20826fce0bb6", "patch": "@@ -0,0 +1,29 @@\n+typedef struct rtx_def *rtx;\n+typedef struct rtvec_def *rtvec;\n+enum rtx_code { PARALLEL, SET };\n+union rtunion_def {\n+    rtx rt_rtx;\n+    rtvec rt_rtvec;\n+};\n+typedef union rtunion_def rtunion;\n+struct rtx_def {\n+    rtunion fld;\n+};\n+struct rtvec_def {\n+    int num_elem;\n+};\n+extern rtx operand;\n+\n+rtx peephole2_insns (rtx x0, enum rtx_code code)\n+{\n+  switch (code)\n+    {\n+      case SET:\n+\t  operand = (((x0)->fld).rt_rtx);\n+\t  return operand;\n+      case PARALLEL:\n+\t  if ((((((x0)->fld).rt_rtvec))->num_elem) == 2)\n+\t    return 0;\n+\t  break;\n+    }\n+}"}, {"sha": "bd81831eba82147c593abcea692d19609e00f29c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-7.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb4e37b73d7649a447fe63f33dc20826fce0bb6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb4e37b73d7649a447fe63f33dc20826fce0bb6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-7.c?ref=ecb4e37b73d7649a447fe63f33dc20826fce0bb6", "patch": "@@ -29,10 +29,10 @@ intflt foo(intflt j)\n   return a.u.k;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Inserted pretmp\" 1 \"fre\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"Replaced a.u.f with pretmp\" 3 \"fre\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"Replaced a.u.k with j\" 1 \"fre\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump \"= VIEW_CONVERT_EXPR<float>\\\\\\(j_\" \"fre\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump \"return j\" \"optimized\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"Inserted pretmp\" 1 \"fre\" } } */\n+/* { dg-final { scan-tree-dump-times \"Replaced a.u.f with pretmp\" 3 \"fre\" } } */\n+/* { dg-final { scan-tree-dump-times \"Replaced a.u.k with j\" 1 \"fre\" } } */\n+/* { dg-final { scan-tree-dump \"= VIEW_CONVERT_EXPR<float>\\\\\\(j_\" \"fre\" } } */\n+/* { dg-final { scan-tree-dump \"return j\" \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"fre\" } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "6e17bd531b36a5f21d78c6216082dd1544212828", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb4e37b73d7649a447fe63f33dc20826fce0bb6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb4e37b73d7649a447fe63f33dc20826fce0bb6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-8.c?ref=ecb4e37b73d7649a447fe63f33dc20826fce0bb6", "patch": "@@ -28,6 +28,6 @@ intflt foo(int i, int b)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"Replaced u.f with pretmp\" 2 \"fre\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"Inserted pretmp\" 2 \"fre\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"Replaced u.f with pretmp\" 2 \"fre\" } } */\n+/* { dg-final { scan-tree-dump-times \"Inserted pretmp\" 2 \"fre\" } } */\n /* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "18595ed6fe5150ee96adda165f946dfb22ff31d6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-9.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb4e37b73d7649a447fe63f33dc20826fce0bb6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb4e37b73d7649a447fe63f33dc20826fce0bb6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-9.c?ref=ecb4e37b73d7649a447fe63f33dc20826fce0bb6", "patch": "@@ -23,6 +23,6 @@ void __frame_state_for1 (volatile char *state_in)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"Eliminated: 1\" 2 \"fre\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"Insertions: 1\" 2 \"fre\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 1\" 2 \"fre\" } } */\n+/* { dg-final { scan-tree-dump-times \"Insertions: 1\" 2 \"fre\" } } */\n /* { dg-final { cleanup-tree-dump \"fre\" } } */"}, {"sha": "cd344af2d101dae812998dc6a67c4907de6555d2", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb4e37b73d7649a447fe63f33dc20826fce0bb6/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb4e37b73d7649a447fe63f33dc20826fce0bb6/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=ecb4e37b73d7649a447fe63f33dc20826fce0bb6", "patch": "@@ -2730,8 +2730,9 @@ find_or_generate_expression (basic_block block, pre_expr expr,\n     }\n \n   /* If it's still NULL, it must be a complex expression, so generate\n-     it recursively.  */\n-  if (genop == NULL)\n+     it recursively.  Not so for FRE though.  */\n+  if (genop == NULL\n+      && !in_fre)\n     {\n       bitmap_set_t exprset;\n       unsigned int lookfor = get_expr_value_id (expr);"}, {"sha": "290b308b907e8e17e7b870a8401bc020568e803f", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb4e37b73d7649a447fe63f33dc20826fce0bb6/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb4e37b73d7649a447fe63f33dc20826fce0bb6/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=ecb4e37b73d7649a447fe63f33dc20826fce0bb6", "patch": "@@ -612,21 +612,22 @@ copy_reference_ops_from_ref (tree ref, VEC(vn_reference_op_s, heap) **result)\n \t     a matching type is not necessary and a mismatching type\n \t     is always a spurious difference.  */\n \t  temp.type = NULL_TREE;\n-#if FIXME\n \t  /* If this is a reference to a union member, record the union\n \t     member size as operand.  Do so only if we are doing\n \t     expression insertion (during FRE), as PRE currently gets\n \t     confused with this.  */\n \t  if (may_insert\n+\t      && TREE_OPERAND (ref, 2) == NULL_TREE\n \t      && TREE_CODE (DECL_CONTEXT (TREE_OPERAND (ref, 1))) == UNION_TYPE\n \t      && integer_zerop (DECL_FIELD_OFFSET (TREE_OPERAND (ref, 1)))\n \t      && integer_zerop (DECL_FIELD_BIT_OFFSET (TREE_OPERAND (ref, 1))))\n \t    temp.op0 = TYPE_SIZE (TREE_TYPE (TREE_OPERAND (ref, 1)));\n \t  else\n-#endif\n-\t    /* Record field as operand.  */\n-\t    temp.op0 = TREE_OPERAND (ref, 1);\n-\t    temp.op1 = TREE_OPERAND (ref, 2);\t  \n+\t    {\n+\t      /* Record field as operand.  */\n+\t      temp.op0 = TREE_OPERAND (ref, 1);\n+\t      temp.op1 = TREE_OPERAND (ref, 2);\n+\t    }\n \t  break;\n \tcase ARRAY_RANGE_REF:\n \tcase ARRAY_REF:\n@@ -1612,7 +1613,7 @@ defs_to_varying (gimple stmt)\n }\n \n static bool expr_has_constants (tree expr);\n-static tree try_to_simplify (gimple stmt);\n+static tree valueize_expr (tree expr);\n \n /* Visit a copy between LHS and RHS, return true if the value number\n    changed.  */\n@@ -1742,12 +1743,14 @@ visit_reference_op_load (tree lhs, tree op, gimple stmt)\n \t So first simplify and lookup this expression to see if it\n \t is already available.  */\n       tree val = fold_build1 (VIEW_CONVERT_EXPR, TREE_TYPE (op), result);\n-      if (stmt\n-\t  && !is_gimple_min_invariant (val)\n-\t  && TREE_CODE (val) != SSA_NAME)\n+      if ((CONVERT_EXPR_P (val)\n+\t   || TREE_CODE (val) == VIEW_CONVERT_EXPR)\n+\t  && TREE_CODE (TREE_OPERAND (val, 0)) == SSA_NAME)\n         {\n-\t  tree tem = try_to_simplify (stmt);\n-\t  if (tem)\n+\t  tree tem = valueize_expr (vn_get_expr_for (TREE_OPERAND (val, 0)));\n+\t  if ((CONVERT_EXPR_P (tem)\n+\t       || TREE_CODE (tem) == VIEW_CONVERT_EXPR)\n+\t      && (tem = fold_unary (TREE_CODE (val), TREE_TYPE (val), tem)))\n \t    val = tem;\n \t}\n       result = val;"}]}