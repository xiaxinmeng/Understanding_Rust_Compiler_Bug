{"sha": "9693e255ee2536c6823640eba5d0163c2b401161", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY5M2UyNTVlZTI1MzZjNjgyMzY0MGViYTVkMDE2M2MyYjQwMTE2MQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-01-19T22:10:30Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-01-19T22:10:30Z"}, "message": "PR middle-end/98664 - inconsistent -Wfree-nonheap-object for inlined calls to system headers\n\ngcc/ChangeLog:\n\n\tPR middle-end/98664\n\t* tree-ssa-live.c (remove_unused_scope_block_p): Keep scopes for\n\tall functions, even if they're not declared artificial or inline.\n\t* tree.c (tree_inlined_location): Use macro expansion location\n\tonly if scope traversal fails to expose one.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/98664\n\t* gcc.dg/Wvla-larger-than-4.c: Adjust expected output.\n\t* gcc.dg/plugin/diagnostic-test-inlining-3.c: Same.\n\t* g++.dg/warn/Wfree-nonheap-object-5.C: New test.\n\t* gcc.dg/Wfree-nonheap-object-4.c: New test.", "tree": {"sha": "5f5735deb16a463d71fd69e8fcffe5b131aec478", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f5735deb16a463d71fd69e8fcffe5b131aec478"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9693e255ee2536c6823640eba5d0163c2b401161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9693e255ee2536c6823640eba5d0163c2b401161", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9693e255ee2536c6823640eba5d0163c2b401161", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9693e255ee2536c6823640eba5d0163c2b401161/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29853c653245c37ed31b6abcc9799b534372e938", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29853c653245c37ed31b6abcc9799b534372e938", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29853c653245c37ed31b6abcc9799b534372e938"}], "stats": {"total": 273, "additions": 255, "deletions": 18}, "files": [{"sha": "742dba0cf58413e2af8695540dc54919e8b26649", "filename": "gcc/testsuite/g++.dg/warn/Wfree-nonheap-object-5.C", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9693e255ee2536c6823640eba5d0163c2b401161/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWfree-nonheap-object-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9693e255ee2536c6823640eba5d0163c2b401161/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWfree-nonheap-object-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWfree-nonheap-object-5.C?ref=9693e255ee2536c6823640eba5d0163c2b401161", "patch": "@@ -0,0 +1,129 @@\n+/* PR middle-end/98664 - inconsistent --Wfree-nonheap-object for inlined\n+   calls to system headers\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+# 7 \"Wfree-nonheap-object-5.h\" 1 3\n+\n+struct A0\n+{\n+  void *p;\n+\n+  void f0 (void *q) { p = q; }\n+  void g0 (void) {\n+    __builtin_free (p);       // { dg-warning \"\\\\\\[-Wfree-nonheap-object\" }\n+  }\n+};\n+\n+struct A1\n+{\n+  void *p;\n+\n+  void f0 (void *q) { p = q; }\n+  void f1 (void *q) { f0 (q); }\n+\n+  void g0 (void) {\n+    __builtin_free (p);       // { dg-warning \"\\\\\\[-Wfree-nonheap-object\" }\n+  }\n+  void g1 (void) { g0 (); }\n+};\n+\n+struct A2\n+{\n+  void *p;\n+\n+  void f0 (void *q) { p = q; }\n+  void f1 (void *q) { f0 (q); }\n+  void f2 (void *q) { f1 (q); }\n+\n+  void g0 (void) {\n+    __builtin_free (p);       // { dg-warning \"\\\\\\[-Wfree-nonheap-object\" }\n+  }\n+  void g1 (void) { g0 (); }\n+  void g2 (void) { g1 (); }\n+};\n+\n+# 47 \"Wfree-nonheap-object-5.C\"\n+\n+#define NOIPA __attribute__ ((noipa))\n+\n+extern int array[];\n+\n+/* Verify the warning is issued even for calls in a system header inlined\n+   into a function outside the header.  */\n+\n+NOIPA void warn_g0 (struct A0 *p)\n+{\n+  int *q = array + 1;\n+\n+  p->f0 (q);\n+  p->g0 ();\n+}\n+\n+// { dg-message \"inlined from 'void warn_g0\\\\(A0\\\\*\\\\)'\" \"\" { target *-*-* } 0 }\n+\n+\n+/* Also verify the warning can be suppressed.  */\n+\n+NOIPA void nowarn_g0 (struct A0 *p)\n+{\n+  int *q = array + 2;\n+\n+  p->f0 (q);\n+\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wfree-nonheap-object\"\n+  p->g0 ();\n+#pragma GCC diagnostic pop\n+}\n+\n+\n+NOIPA void warn_g1 (struct A1 *p)\n+{\n+  int *q = array + 3;\n+\n+  p->f1 (q);\n+  p->g1 ();\n+}\n+\n+// { dg-message \"inlined from 'void A1::g1\\\\(\\\\)'\" \"\" { target *-*-* } 0 }\n+// { dg-message \"inlined from 'void warn_g1\\\\(A1\\\\*\\\\)'\" \"\" { target *-*-* } 0 }\n+\n+\n+NOIPA void nowarn_g1 (struct A2 *p)\n+{\n+  int *q = array + 4;\n+\n+  p->f1 (q);\n+\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wfree-nonheap-object\"\n+  p->g1 ();\n+#pragma GCC diagnostic pop\n+}\n+\n+\n+NOIPA void warn_g2 (struct A2 *p)\n+{\n+  int *q = array + 5;\n+\n+  p->f2 (q);\n+  p->g2 ();\n+}\n+\n+// { dg-message \"inlined from 'void A2::g1\\\\(\\\\)'\" \"\" { target *-*-* } 0 }\n+// { dg-message \"inlined from 'void A2::g2\\\\(\\\\)'\" \"\" { target *-*-* } 0 }\n+// { dg-message \"inlined from 'void warn_g2\\\\(A2\\\\*\\\\)'\" \"\" { target *-*-* } 0 }\n+\n+\n+NOIPA void nowarn_g2 (struct A2 *p)\n+{\n+  int *q = array + 6;\n+\n+  p->f2 (q);\n+\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wfree-nonheap-object\"\n+  p->g2 ();\n+#pragma GCC diagnostic pop\n+}"}, {"sha": "a7d921248c45eabbfc8b051f612471d3a9c8f53a", "filename": "gcc/testsuite/gcc.dg/Wfree-nonheap-object-4.c", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9693e255ee2536c6823640eba5d0163c2b401161/gcc%2Ftestsuite%2Fgcc.dg%2FWfree-nonheap-object-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9693e255ee2536c6823640eba5d0163c2b401161/gcc%2Ftestsuite%2Fgcc.dg%2FWfree-nonheap-object-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWfree-nonheap-object-4.c?ref=9693e255ee2536c6823640eba5d0163c2b401161", "patch": "@@ -0,0 +1,107 @@\n+/* PR middle-end/98664 - inconsistent --Wfree-nonheap-object for inlined\n+   calls to system headers\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+# 7 \"Wfree-nonheap-object-4.h\" 1 3\n+\n+struct A\n+{\n+  void *p;\n+};\n+\n+void f0 (struct A *p, void *q) { p->p = q; }\n+void f1 (struct A *p, void *q) { f0 (p, q); }\n+void f2 (struct A *p, void *q) { f1 (p, q); }\n+\n+void g0 (struct A *p)\n+{\n+  __builtin_free (p->p);      // { dg-warning \"\\\\\\[-Wfree-nonheap-object\" }\n+}\n+\n+void g1 (struct A *p) { g0 (p); }\n+void g2 (struct A *p) { g1 (p); }\n+\n+# 26 \"Wfree-nonheap-object-4.c\"\n+\n+#define NOIPA __attribute__ ((noipa))\n+\n+extern int array[];\n+\n+/* Verify the warning is issued even for calls in a system header inlined\n+   into a function outside the header.  */\n+\n+NOIPA void warn_g0 (struct A *p)\n+{\n+  int *q = array + 1;\n+\n+  f0 (p, q);\n+  g0 (p);\n+}\n+\n+// { dg-message \"inlined from 'warn_g0'\" \"\" { target *-*-* } 0 }\n+\n+\n+/* Also verify the warning can be suppressed.  */\n+\n+NOIPA void nowarn_g0 (struct A *p)\n+{\n+  int *q = array + 2;\n+\n+  f0 (p, q);\n+\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wfree-nonheap-object\"\n+  g0 (p);\n+#pragma GCC diagnostic pop\n+}\n+\n+\n+NOIPA void warn_g1 (struct A *p)\n+{\n+  int *q = array + 3;\n+\n+  f1 (p, q);\n+  g1 (p);\n+}\n+\n+// { dg-message \"inlined from 'g1'\" \"\" { target *-*-* } 0 }\n+// { dg-message \"inlined from 'warn_g1'\" \"\" { target *-*-* } 0 }\n+\n+\n+NOIPA void nowarn_g1 (struct A *p)\n+{\n+  int *q = array + 4;\n+\n+  f1 (p, q);\n+\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wfree-nonheap-object\"\n+  g1 (p);\n+#pragma GCC diagnostic pop\n+}\n+\n+\n+NOIPA void warn_g2 (struct A *p)\n+{\n+  int *q = array + 5;\n+\n+  f2 (p, q);\n+  g2 (p);\n+}\n+\n+// { dg-message \"inlined from 'g2'\" \"\" { target *-*-* } 0 }\n+// { dg-message \"inlined from 'warn_g2'\" \"\" { target *-*-* } 0 }\n+\n+\n+NOIPA void nowarn_g2 (struct A *p)\n+{\n+  int *q = array + 6;\n+\n+  f2 (p, q);\n+\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wfree-nonheap-object\"\n+  g2 (p);\n+#pragma GCC diagnostic pop\n+}"}, {"sha": "7d27829736fbdfe06b02dcd536247c833df44546", "filename": "gcc/testsuite/gcc.dg/Wvla-larger-than-4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9693e255ee2536c6823640eba5d0163c2b401161/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-larger-than-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9693e255ee2536c6823640eba5d0163c2b401161/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-larger-than-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-larger-than-4.c?ref=9693e255ee2536c6823640eba5d0163c2b401161", "patch": "@@ -17,14 +17,14 @@ static inline void inline_use_vla (unsigned n)\n static inline void use_inlined_vla (unsigned n)\n {\n   inline_use_vla (n);         // this call is okay\n-  inline_use_vla (n + 1);     // this one is not\n+  inline_use_vla (n + 1);     // this one is not (line 20)\n }\n \n void call_inline (void)\n {\n-  use_inlined_vla (31);\n+  use_inlined_vla (31);       // line 25\n }\n \n /* Verify that the inlining context is included and that it points\n    to the correct line number in the inlined function:\n-   { dg-message \"function 'inline_use_vla'..*inlined from 'call_inline' .*:20:\" \"\" { target *-*-* } 0 }  */\n+   { dg-message \"function 'inline_use_vla'.*inlined from 'use_inlined_vla'.*:20:.*inlined from 'call_inline' .*:25:\" \"\" { target *-*-* } 0 }  */"}, {"sha": "56c9546fb8497ca6069755a4674c684d0998de95", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-inlining-3.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9693e255ee2536c6823640eba5d0163c2b401161/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-inlining-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9693e255ee2536c6823640eba5d0163c2b401161/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-inlining-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-inlining-3.c?ref=9693e255ee2536c6823640eba5d0163c2b401161", "patch": "@@ -35,7 +35,8 @@ int main()\n    This test case captures this behavior.  */\n \n /* { dg-regexp \"In function 'foo',\" \"\" } */\n-/* { dg-regexp \"    inlined from 'main' at .+/diagnostic-test-inlining-3.c:15:3:\" \"\" } */\n+/* { dg-regexp \"    inlined from 'bar' at .+/diagnostic-test-inlining-3.c:15:3,\" \"\" } */\n+/* { dg-regexp \"    inlined from 'main' at .+/diagnostic-test-inlining-3.c:20:3:\" \"\" } */\n /* { dg-warning \"3: message\" \"\" { target *-*-* } 9 } */\n /* { dg-begin-multiline-output \"\" }\n    __emit_warning (\"message\");"}, {"sha": "a2aab25e862e01adffc0d4dcf8dcd3675d8c41ef", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9693e255ee2536c6823640eba5d0163c2b401161/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9693e255ee2536c6823640eba5d0163c2b401161/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=9693e255ee2536c6823640eba5d0163c2b401161", "patch": "@@ -555,20 +555,17 @@ remove_unused_scope_block_p (tree scope, bool in_ctor_dtor_block)\n      ;\n    /* When not generating debug info we can eliminate info on unused\n       variables.  */\n-   else if (!flag_auto_profile && debug_info_level == DINFO_LEVEL_NONE\n+   else if (!flag_auto_profile\n+\t    && debug_info_level == DINFO_LEVEL_NONE\n \t    && !optinfo_wants_inlining_info_p ())\n      {\n-       /* Even for -g0 don't prune outer scopes from artificial\n-\t  functions, otherwise diagnostics using tree_nonartificial_location\n-\t  will not be emitted properly.  */\n+       /* Even for -g0 don't prune outer scopes from inlined functions,\n+\t  otherwise late diagnostics from such functions will not be\n+\t  emitted or suppressed properly.  */\n        if (inlined_function_outer_scope_p (scope))\n \t {\n-\t   tree ao = BLOCK_ORIGIN (scope);\n-\t   if (ao\n-\t       && TREE_CODE (ao) == FUNCTION_DECL\n-\t       && DECL_DECLARED_INLINE_P (ao)\n-\t       && lookup_attribute (\"artificial\", DECL_ATTRIBUTES (ao)))\n-\t     unused = false;\n+\t   gcc_assert (TREE_CODE (BLOCK_ORIGIN (scope)) == FUNCTION_DECL);\n+\t   unused = false;\n \t }\n      }\n    else if (BLOCK_VARS (scope) || BLOCK_NUM_NONLOCALIZED_VARS (scope))"}, {"sha": "061fe43aa3157cc5fdb93e260576d4c13f7b03b1", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9693e255ee2536c6823640eba5d0163c2b401161/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9693e255ee2536c6823640eba5d0163c2b401161/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=9693e255ee2536c6823640eba5d0163c2b401161", "patch": "@@ -12638,10 +12638,13 @@ tree_inlined_location (tree exp, bool system_header /* = true */)\n     }\n \n   if (loc == UNKNOWN_LOCATION)\n-    loc = EXPR_LOCATION (exp);\n-\n-  if (system_header)\n-    return expansion_point_location_if_in_system_header (loc);\n+    {\n+      loc = EXPR_LOCATION (exp);\n+      if (system_header)\n+\t/* Only consider macro expansion when the block traversal failed\n+\t   to find a location.  Otherwise it's not relevant.  */\n+\treturn expansion_point_location_if_in_system_header (loc);\n+    }\n \n   return loc;\n }"}]}