{"sha": "cad12a8dfc1b56ede08ef7cd12215c5b3b897adb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FkMTJhOGRmYzFiNTZlZGUwOGVmN2NkMTIyMTVjNWIzYjg5N2FkYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-01-19T23:51:32Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-01-19T23:51:32Z"}, "message": "(print_operand, case 'k'): New case.\n\nFrom-SVN: r3286", "tree": {"sha": "fd717d070500dbd517ed9aa6accb0dcfcaccb963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd717d070500dbd517ed9aa6accb0dcfcaccb963"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cad12a8dfc1b56ede08ef7cd12215c5b3b897adb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cad12a8dfc1b56ede08ef7cd12215c5b3b897adb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cad12a8dfc1b56ede08ef7cd12215c5b3b897adb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cad12a8dfc1b56ede08ef7cd12215c5b3b897adb/comments", "author": null, "committer": null, "parents": [{"sha": "0075180522d04f95a970a78f26b52a5cef36c24b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0075180522d04f95a970a78f26b52a5cef36c24b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0075180522d04f95a970a78f26b52a5cef36c24b"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "0bdae6f4cfdb133a6353846041e019f9fb37fdc6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad12a8dfc1b56ede08ef7cd12215c5b3b897adb/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad12a8dfc1b56ede08ef7cd12215c5b3b897adb/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=cad12a8dfc1b56ede08ef7cd12215c5b3b897adb", "patch": "@@ -709,6 +709,15 @@ print_operand (file, x, code)\n \n   switch (code)\n     {\n+    case 'k':\n+      /* X must be a constant.  Write the 1's complement of the\n+\t constant.  */\n+      if (! INT_P (x))\n+\toutput_operand_lossage (\"invalid %%k value\");\n+\n+      fprintf (file, \"%d\", ~ INT_LOWPART (x));\n+      return;\n+\n     case 'h':\n       /* If constant, output low-order five bits.  Otherwise,\n \t write normally. */\n@@ -898,15 +907,15 @@ print_operand (file, x, code)\n       return;\n \n     case 'U':\n-      /* Print `u' is this has an auto-increment or auto-decrement.  */\n+      /* Print `u' if this has an auto-increment or auto-decrement.  */\n       if (GET_CODE (x) == MEM\n \t  && (GET_CODE (XEXP (x, 0)) == PRE_INC\n \t      || GET_CODE (XEXP (x, 0)) == PRE_DEC))\n \tfprintf (file, \"u\");\n       return;\n \n     case 'I':\n-      /* Print `i' is this is a constant, else nothing.  */\n+      /* Print `i' if this is a constant, else nothing.  */\n       if (INT_P (x))\n \tfprintf (file, \"i\");\n       return;"}]}