{"sha": "21184026d5e37878304c421cba6649fbc44f1b7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjExODQwMjZkNWUzNzg3ODMwNGM0MjFjYmE2NjQ5ZmJjNDRmMWI3Yw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2016-08-26T11:13:42Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2016-08-26T11:13:42Z"}, "message": "Always support float128 on x86.\n\nIn <https://gcc.gnu.org/ml/gcc-bugs/2016-08/msg03233.html>, Nick\nreported i386-elf and ia64-elf failing to build because of\nfloat128_type_node being NULL, but being used by the back end for\n__float128.\n\nThe global float128_type_node is only available conditionally, if\ntarget hooks indicate TFmode is not only available as a scalar mode\nand of the right format, but also supported in libgcc.  The back-end\nsupport, however, expects the type always to be available for\n__float128 even if the libgcc support is missing.\n\nAlthough a target-specific node could be restored in the case where\nlibgcc support is missing, it seems better to address the missing\nlibgcc support.  Thus, this patch enables TFmode soft-fp in libgcc\nglobally for all x86 targets - the only special cases needed being for\ntargets that use soft-fp for SFmode and DFmode, one of which already\nhad the support for TFmode as well (so I based the i[34567]86-*-rtems*\nconfiguration on that present for i[34567]86-*-elfiamcu).  The i386\nimplementation of TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P is then\nremoved as no longer needed.\n\nI can provide such a patch for ia64 if useful, but am not in a\nposition to test it (and while I'm reasonably confident that enabling\nthis support would be right for ia64-elf and ia64-freebsd, I've no\nreal idea if enabling libgcc support for TFmode, with or without also\nenabling it for XFmode, would be safe for ia64-vms).\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\ngcc:\n\t* config/i386/i386.c (ix86_libgcc_floating_mode_supported_p)\n\t(TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P): Remove.\n\t* config/i386/i386elf.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Likewise.\n\t* config/i386/lynx.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Likewise.\n\t* config/i386/netbsd-elf.h (IX86_MAYBE_NO_LIBGCC_TFMODE):\n\tLikewise.\n\t* config/i386/netbsd64.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Likewise.\n\t* config/i386/nto.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Likewise.\n\t* config/i386/openbsd.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Likewise.\n\t* config/i386/rtemself.h (IX86_NO_LIBGCC_TFMODE): Likewise.\n\t* config/i386/vxworks.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Likewise.\n\nlibgcc:\n\t* config.host (i[34567]86-*-* | x86_64-*-*): Enable TFmode soft-fp\n\twhere not already enabled.\n\nFrom-SVN: r239775", "tree": {"sha": "95d37af364be947cd1503f495a39dd53a9da19a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95d37af364be947cd1503f495a39dd53a9da19a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21184026d5e37878304c421cba6649fbc44f1b7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21184026d5e37878304c421cba6649fbc44f1b7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21184026d5e37878304c421cba6649fbc44f1b7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21184026d5e37878304c421cba6649fbc44f1b7c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d1d8d6af37778f9d896285ca5185d07ca2c3450", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d1d8d6af37778f9d896285ca5185d07ca2c3450", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d1d8d6af37778f9d896285ca5185d07ca2c3450"}], "stats": {"total": 81, "additions": 24, "deletions": 57}, "files": [{"sha": "e8917e35b304148c742182599aa4bf7727badf73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21184026d5e37878304c421cba6649fbc44f1b7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21184026d5e37878304c421cba6649fbc44f1b7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21184026d5e37878304c421cba6649fbc44f1b7c", "patch": "@@ -1,3 +1,17 @@\n+2016-08-26  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/i386/i386.c (ix86_libgcc_floating_mode_supported_p)\n+\t(TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P): Remove.\n+\t* config/i386/i386elf.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Likewise.\n+\t* config/i386/lynx.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Likewise.\n+\t* config/i386/netbsd-elf.h (IX86_MAYBE_NO_LIBGCC_TFMODE):\n+\tLikewise.\n+\t* config/i386/netbsd64.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Likewise.\n+\t* config/i386/nto.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Likewise.\n+\t* config/i386/openbsd.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Likewise.\n+\t* config/i386/rtemself.h (IX86_NO_LIBGCC_TFMODE): Likewise.\n+\t* config/i386/vxworks.h (IX86_MAYBE_NO_LIBGCC_TFMODE): Likewise.\n+\n 2016-08-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/70473"}, {"sha": "3b8b93d97499423ab5233399401e8ffecfab3cb1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21184026d5e37878304c421cba6649fbc44f1b7c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21184026d5e37878304c421cba6649fbc44f1b7c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=21184026d5e37878304c421cba6649fbc44f1b7c", "patch": "@@ -43284,31 +43284,6 @@ ix86_vector_mode_supported_p (machine_mode mode)\n   return false;\n }\n \n-/* Implement target hook libgcc_floating_mode_supported_p.  */\n-static bool\n-ix86_libgcc_floating_mode_supported_p (machine_mode mode)\n-{\n-  switch (mode)\n-    {\n-    case SFmode:\n-    case DFmode:\n-    case XFmode:\n-      return true;\n-\n-    case TFmode:\n-#ifdef IX86_NO_LIBGCC_TFMODE\n-      return false;\n-#elif defined IX86_MAYBE_NO_LIBGCC_TFMODE\n-      return TARGET_LONG_DOUBLE_128;\n-#else\n-      return true;\n-#endif\n-\n-    default:\n-      return false;\n-    }\n-}\n-\n /* Target hook for c_mode_for_suffix.  */\n static machine_mode\n ix86_c_mode_for_suffix (char suffix)\n@@ -50568,10 +50543,6 @@ ix86_addr_space_zero_address_valid (addr_space_t as)\n #undef TARGET_VECTOR_MODE_SUPPORTED_P\n #define TARGET_VECTOR_MODE_SUPPORTED_P ix86_vector_mode_supported_p\n \n-#undef TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P\n-#define TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P \\\n-  ix86_libgcc_floating_mode_supported_p\n-\n #undef TARGET_C_MODE_FOR_SUFFIX\n #define TARGET_C_MODE_FOR_SUFFIX ix86_c_mode_for_suffix\n "}, {"sha": "b93ef66a4e0c560b29995581fe0c329832d657e5", "filename": "gcc/config/i386/i386elf.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21184026d5e37878304c421cba6649fbc44f1b7c/gcc%2Fconfig%2Fi386%2Fi386elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21184026d5e37878304c421cba6649fbc44f1b7c/gcc%2Fconfig%2Fi386%2Fi386elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386elf.h?ref=21184026d5e37878304c421cba6649fbc44f1b7c", "patch": "@@ -101,5 +101,3 @@ along with GCC; see the file COPYING3.  If not see\n #undef ASM_OUTPUT_ALIGNED_BSS\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n   asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n-\n-#define IX86_MAYBE_NO_LIBGCC_TFMODE"}, {"sha": "bb9e17a887a41aee44bd1ec9dcfd14beece478b4", "filename": "gcc/config/i386/lynx.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21184026d5e37878304c421cba6649fbc44f1b7c/gcc%2Fconfig%2Fi386%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21184026d5e37878304c421cba6649fbc44f1b7c/gcc%2Fconfig%2Fi386%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flynx.h?ref=21184026d5e37878304c421cba6649fbc44f1b7c", "patch": "@@ -85,5 +85,3 @@ along with GCC; see the file COPYING3.  If not see\n    TLS is detected by configure.  We undefine it here.  */\n \n #undef HAVE_AS_TLS\n-\n-#define IX86_MAYBE_NO_LIBGCC_TFMODE"}, {"sha": "fb59b3202e2ab88192409c4f0595e2a8ef6b9d35", "filename": "gcc/config/i386/netbsd-elf.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21184026d5e37878304c421cba6649fbc44f1b7c/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21184026d5e37878304c421cba6649fbc44f1b7c/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h?ref=21184026d5e37878304c421cba6649fbc44f1b7c", "patch": "@@ -119,5 +119,3 @@ along with GCC; see the file COPYING3.  If not see\n #define DEFAULT_PCC_STRUCT_RETURN 1\n \n #define HAVE_ENABLE_EXECUTE_STACK\n-\n-#define IX86_MAYBE_NO_LIBGCC_TFMODE"}, {"sha": "315e993047d56f256f0fcef5353d6d85e75d4fc0", "filename": "gcc/config/i386/netbsd64.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21184026d5e37878304c421cba6649fbc44f1b7c/gcc%2Fconfig%2Fi386%2Fnetbsd64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21184026d5e37878304c421cba6649fbc44f1b7c/gcc%2Fconfig%2Fi386%2Fnetbsd64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd64.h?ref=21184026d5e37878304c421cba6649fbc44f1b7c", "patch": "@@ -67,5 +67,3 @@ along with GCC; see the file COPYING3.  If not see\n }\n \n #define HAVE_ENABLE_EXECUTE_STACK\n-\n-#define IX86_MAYBE_NO_LIBGCC_TFMODE"}, {"sha": "42433e963338b6c0fc6b16d7ad88161f606d2f3a", "filename": "gcc/config/i386/nto.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21184026d5e37878304c421cba6649fbc44f1b7c/gcc%2Fconfig%2Fi386%2Fnto.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21184026d5e37878304c421cba6649fbc44f1b7c/gcc%2Fconfig%2Fi386%2Fnto.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnto.h?ref=21184026d5e37878304c421cba6649fbc44f1b7c", "patch": "@@ -103,5 +103,3 @@ crti.o%s \\\n #define TARGET_POSIX_IO\n \n #undef DBX_REGISTER_NUMBER\n-\n-#define IX86_MAYBE_NO_LIBGCC_TFMODE"}, {"sha": "15aee25306e26c42e94d6c0f7c84a1f195c602f0", "filename": "gcc/config/i386/openbsd.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21184026d5e37878304c421cba6649fbc44f1b7c/gcc%2Fconfig%2Fi386%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21184026d5e37878304c421cba6649fbc44f1b7c/gcc%2Fconfig%2Fi386%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fopenbsd.h?ref=21184026d5e37878304c421cba6649fbc44f1b7c", "patch": "@@ -99,5 +99,3 @@ along with GCC; see the file COPYING3.  If not see\n #undef ASM_QUAD\n \n #define TARGET_HAVE_NAMED_SECTIONS false\n-\n-#define IX86_MAYBE_NO_LIBGCC_TFMODE"}, {"sha": "21b21737b572625667a316384a2acd34206f2e5c", "filename": "gcc/config/i386/rtemself.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21184026d5e37878304c421cba6649fbc44f1b7c/gcc%2Fconfig%2Fi386%2Frtemself.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21184026d5e37878304c421cba6649fbc44f1b7c/gcc%2Fconfig%2Fi386%2Frtemself.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Frtemself.h?ref=21184026d5e37878304c421cba6649fbc44f1b7c", "patch": "@@ -31,5 +31,3 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE (TARGET_80387 ? 80 : 64)\n-\n-#define IX86_NO_LIBGCC_TFMODE"}, {"sha": "b4f0d91b65eeb6926f0df58a37cce4afa1f08451", "filename": "gcc/config/i386/vxworks.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21184026d5e37878304c421cba6649fbc44f1b7c/gcc%2Fconfig%2Fi386%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21184026d5e37878304c421cba6649fbc44f1b7c/gcc%2Fconfig%2Fi386%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fvxworks.h?ref=21184026d5e37878304c421cba6649fbc44f1b7c", "patch": "@@ -87,8 +87,6 @@ along with GCC; see the file COPYING3.  If not see\n    fixed gap between segments.  */\n #undef ASM_PREFERRED_EH_DATA_FORMAT\n \n-#define IX86_MAYBE_NO_LIBGCC_TFMODE\n-\n /* Define this to be nonzero if static stack checking is supported.  */\n #define STACK_CHECK_STATIC_BUILTIN 1\n "}, {"sha": "d5ecf7776a79eee3c3bfdc6edaaafe445cf31eb4", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21184026d5e37878304c421cba6649fbc44f1b7c/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21184026d5e37878304c421cba6649fbc44f1b7c/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=21184026d5e37878304c421cba6649fbc44f1b7c", "patch": "@@ -1,3 +1,8 @@\n+2016-08-26  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config.host (i[34567]86-*-* | x86_64-*-*): Enable TFmode soft-fp\n+\twhere not already enabled.\n+\n 2016-08-25  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n \n \t* config/mips/linux-unwind.h: Use sys/syscall.h."}, {"sha": "002f650be9a7cd6f69ce3d51639a735ca7eba564", "filename": "libgcc/config.host", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21184026d5e37878304c421cba6649fbc44f1b7c/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21184026d5e37878304c421cba6649fbc44f1b7c/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=21184026d5e37878304c421cba6649fbc44f1b7c", "patch": "@@ -632,7 +632,7 @@ i[34567]86-*-nto-qnx*)\n \textra_parts=crtbegin.o\n \t;;\n i[34567]86-*-rtems*)\n-\ttmake_file=\"$tmake_file i386/t-crtstuff t-softfp-sfdf t-softfp\"\n+\ttmake_file=\"$tmake_file i386/t-crtstuff t-softfp-sfdftf i386/32/t-softfp i386/t-softfp t-softfp\"\n \textra_parts=\"$extra_parts crti.o crtn.o\"\n \t;;\n i[34567]86-*-solaris2* | x86_64-*-solaris2.1[0-9]*)\n@@ -1330,17 +1330,10 @@ i[34567]86-*-linux* | x86_64-*-linux* | \\\n esac\n \n case ${host} in\n-i[34567]86-*-darwin* | x86_64-*-darwin* | \\\n-  i[34567]86-*-kfreebsd*-gnu | x86_64-*-kfreebsd*-gnu | \\\n-  i[34567]86-*-linux* | x86_64-*-linux* | \\\n-  i[34567]86-*-msdosdjgpp* | \\\n-  i[34567]86-*-gnu* | \\\n-  i[34567]86-*-solaris2* | x86_64-*-solaris2.1[0-9]* | \\\n-  i[34567]86-*-cygwin* | x86_64-*-cygwin* | \\\n-  i[34567]86-*-mingw* | x86_64-*-mingw* | \\\n-  i[34567]86-*-dragonfly* | x86_64-*-dragonfly* | \\\n-  i[34567]86-*-freebsd* | x86_64-*-freebsd* | \\\n-  i[34567]86-*-openbsd* | x86_64-*-openbsd*)\n+i[34567]86-*-elfiamcu | i[34567]86-*-rtems*)\n+\t# These use soft-fp for SFmode and DFmode, not just TFmode.\n+\t;;\n+i[34567]86-*-* | x86_64-*-*)\n   \ttmake_file=\"${tmake_file} t-softfp-tf\"\n \tif test \"${host_address}\" = 32; then\n \t\ttmake_file=\"${tmake_file} i386/${host_address}/t-softfp\""}]}