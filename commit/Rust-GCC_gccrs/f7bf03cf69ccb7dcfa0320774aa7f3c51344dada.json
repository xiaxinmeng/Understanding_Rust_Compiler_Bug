{"sha": "f7bf03cf69ccb7dcfa0320774aa7f3c51344dada", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdiZjAzY2Y2OWNjYjdkY2ZhMDMyMDc3NGFhN2YzYzUxMzQ0ZGFkYQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-07-30T21:46:32Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-07-30T21:46:32Z"}, "message": "Decrement followed by cmov improvements.\n\nThe following patch to the x86_64 backend improves the code generated\nfor a decrement followed by a conditional move.  The primary change is\nto recognize that after subtracting one, checking the result is -1 (or\nequivalently that the original value was zero) can be implemented using\nthe borrow/carry flag instead of requiring an explicit test instruction.\nThis is achieved by a new define_insn_and_split that allows combine to\nsplit the desired sequence/composite into a *subsi_3 and *movsicc_noc.\n\nThe other change with this patch is/are a pair of peephole2 optimizations\nto eliminate register-to-register moves generated during register\nallocation.  During reload, the compiler doesn't know that inverting\nthe condition of a conditional cmove can sometimes reduce register\npressure, but this is easy to tidy up during the peephole2 pass (where\nswapping the order of the insn's operands performs the required\nlogic inversion).\n\nBoth improvements are demonstrated by the case below:\n\nint foo(int x) {\n  if (x == 0)\n    x = 16;\n  else x--;\n  return x;\n}\n\nBefore:\nfoo:\tleal    -1(%rdi), %eax\n        testl   %edi, %edi\n        movl    $16, %edx\n        cmove   %edx, %eax\n        ret\n\nAfter:\nfoo:\tsubl    $1, %edi\n        movl    $16, %eax\n        cmovnc  %edi, %eax\n        ret\n\nAnd the value of the peephole2 clean-up can be seen on its own in:\n\nint bar(int x) {\n  x--;\n  if (x == 0)\n    x = 16;\n  return x;\n}\n\nBefore:\nbar:\tmovl    %edi, %eax\n        movl    $16, %edx\n        subl    $1, %eax\n        cmove   %edx, %eax\n        ret\n\nAfter:\nbar:\tsubl    $1, %edi\n        movl    $16, %eax\n        cmovne  %edi, %eax\n        ret\n\nThese idioms were inspired by the source code of NIST SciMark4's\nRandom_nextDouble function, where the tweaks above result in\na ~1% improvement in the MonteCarlo benchmark kernel.\n\n2021-07-30  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog\n\t* config/i386/i386.md (*dec_cmov<mode>): New define_insn_and_split\n\tto generate a conditional move using the carry flag after sub $1.\n\t(peephole2): Eliminate a register-to-register move by inverting\n\tthe condition of a conditional move.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/dec-cmov-1.c: New test.\n\t* gcc.target/i386/dec-cmov-2.c: New test.", "tree": {"sha": "f8ef93f335a6e662a6f470d17f3b5973c417b015", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8ef93f335a6e662a6f470d17f3b5973c417b015"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7bf03cf69ccb7dcfa0320774aa7f3c51344dada", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7bf03cf69ccb7dcfa0320774aa7f3c51344dada", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7bf03cf69ccb7dcfa0320774aa7f3c51344dada", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7bf03cf69ccb7dcfa0320774aa7f3c51344dada/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b2515f5ae86c21fc13021e1a8728a48e68aa7d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b2515f5ae86c21fc13021e1a8728a48e68aa7d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b2515f5ae86c21fc13021e1a8728a48e68aa7d6"}], "stats": {"total": 249, "additions": 249, "deletions": 0}, "files": [{"sha": "73a495390df50764d15d461f432077cdbb0a549e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7bf03cf69ccb7dcfa0320774aa7f3c51344dada/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7bf03cf69ccb7dcfa0320774aa7f3c51344dada/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f7bf03cf69ccb7dcfa0320774aa7f3c51344dada", "patch": "@@ -6756,6 +6756,29 @@\n \t\t\t\t? GEU : LTU, VOIDmode, cc, const0_rtx);\n })\n \n+;; Help combine use borrow flag to test for -1 after dec (add $-1).\n+(define_insn_and_split \"*dec_cmov<mode>\"\n+  [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n+\t(if_then_else:SWI248\n+\t (match_operator 1 \"bt_comparison_operator\"\n+\t  [(match_operand:SWI248 2 \"register_operand\" \"0\") (const_int 0)])\n+\t (plus:SWI248 (match_dup 2) (const_int -1))\n+\t (match_operand:SWI248 3 \"nonimmediate_operand\" \"rm\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_CMOVE\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel [(set (reg:CC FLAGS_REG)\n+\t\t   (compare:CC (match_dup 2) (const_int 1)))\n+\t      (set (match_dup 0) (minus:SWI248 (match_dup 2) (const_int 1)))])\n+   (set (match_dup 0)\n+\t(if_then_else:SWI248 (match_dup 4) (match_dup 0) (match_dup 3)))]\n+{\n+  rtx cc = gen_rtx_REG (CCCmode, FLAGS_REG);\n+  operands[4] = gen_rtx_fmt_ee (GET_CODE (operands[1]) == NE\n+\t\t\t\t? GEU : LTU, VOIDmode, cc, const0_rtx);\n+})\n+\n (define_insn \"*subsi_3_zext\"\n   [(set (reg FLAGS_REG)\n \t(compare (match_operand:SI 1 \"register_operand\" \"0\")\n@@ -19182,6 +19205,70 @@\n     gcc_unreachable ();\n })\n \n+;; Eliminate a reg-reg mov by inverting the condition of a cmov (#1).\n+;; mov r0,r1; dec r0; mov r2,r3; cmov r0,r2 -> dec r1; mov r0,r3; cmov r0, r1\n+(define_peephole2\n+ [(set (match_operand:SWI248 0 \"register_operand\")\n+       (match_operand:SWI248 1 \"register_operand\"))\n+  (parallel [(set (reg FLAGS_REG) (match_operand 5))\n+\t     (set (match_dup 0) (match_operand:SWI248 6))])\n+  (set (match_operand:SWI248 2 \"register_operand\")\n+       (match_operand:SWI248 3))\n+  (set (match_dup 0)\n+       (if_then_else:SWI248 (match_operator 4 \"ix86_comparison_operator\"\n+\t\t\t     [(reg FLAGS_REG) (const_int 0)])\n+\t(match_dup 0)\n+\t(match_dup 2)))]\n+ \"TARGET_CMOVE\n+  && REGNO (operands[2]) != REGNO (operands[0])\n+  && REGNO (operands[2]) != REGNO (operands[1])\n+  && peep2_reg_dead_p (1, operands[1])\n+  && peep2_reg_dead_p (4, operands[2])\n+  && !reg_overlap_mentioned_p (operands[0], operands[3])\"\n+ [(parallel [(set (match_dup 7) (match_dup 8))\n+\t     (set (match_dup 1) (match_dup 9))])\n+  (set (match_dup 0) (match_dup 3))\n+  (set (match_dup 0) (if_then_else:SWI248 (match_dup 4)\n+\t\t\t\t\t  (match_dup 1)\n+\t\t\t\t\t  (match_dup 0)))]\n+{\n+  operands[7] = SET_DEST (XVECEXP (PATTERN (peep2_next_insn (1)), 0, 0));\n+  operands[8] = replace_rtx (operands[5], operands[0], operands[1]);\n+  operands[9] = replace_rtx (operands[6], operands[0], operands[1]);\n+})\n+\n+;; Eliminate a reg-reg mov by inverting the condition of a cmov (#2).\n+;; mov r2,r3; mov r0,r1; dec r0; cmov r0,r2 -> dec r1; mov r0,r3; cmov r0, r1\n+(define_peephole2\n+ [(set (match_operand:SWI248 2 \"register_operand\")\n+       (match_operand:SWI248 3))\n+  (set (match_operand:SWI248 0 \"register_operand\")\n+       (match_operand:SWI248 1 \"register_operand\"))\n+  (parallel [(set (reg FLAGS_REG) (match_operand 5))\n+\t     (set (match_dup 0) (match_operand:SWI248 6))])\n+  (set (match_dup 0)\n+       (if_then_else:SWI248 (match_operator 4 \"ix86_comparison_operator\"\n+\t\t\t     [(reg FLAGS_REG) (const_int 0)])\n+\t(match_dup 0)\n+\t(match_dup 2)))]\n+ \"TARGET_CMOVE\n+  && REGNO (operands[2]) != REGNO (operands[0])\n+  && REGNO (operands[2]) != REGNO (operands[1])\n+  && peep2_reg_dead_p (2, operands[1])\n+  && peep2_reg_dead_p (4, operands[2])\n+  && !reg_overlap_mentioned_p (operands[0], operands[3])\"\n+ [(parallel [(set (match_dup 7) (match_dup 8))\n+\t     (set (match_dup 1) (match_dup 9))])\n+  (set (match_dup 0) (match_dup 3))\n+  (set (match_dup 0) (if_then_else:SWI248 (match_dup 4)\n+\t\t\t\t\t  (match_dup 1)\n+\t\t\t\t\t  (match_dup 0)))]\n+{\n+  operands[7] = SET_DEST (XVECEXP (PATTERN (peep2_next_insn (2)), 0, 0));\n+  operands[8] = replace_rtx (operands[5], operands[0], operands[1]);\n+  operands[9] = replace_rtx (operands[6], operands[0], operands[1]);\n+})\n+\n (define_expand \"mov<mode>cc\"\n   [(set (match_operand:X87MODEF 0 \"register_operand\")\n \t(if_then_else:X87MODEF"}, {"sha": "0eae63fbc9c7f586d81dca8eb8064e363abfe96e", "filename": "gcc/testsuite/gcc.target/i386/dec-cmov-1.c", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7bf03cf69ccb7dcfa0320774aa7f3c51344dada/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdec-cmov-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7bf03cf69ccb7dcfa0320774aa7f3c51344dada/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdec-cmov-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdec-cmov-1.c?ref=f7bf03cf69ccb7dcfa0320774aa7f3c51344dada", "patch": "@@ -0,0 +1,105 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-additional-options \"-march=pentiumpro -mregparm=3\" { target ia32 } } */\n+\n+int foo_m1(int x)\n+{\n+  x--;\n+  if (x == 0)\n+    x = 16;\n+  return x;\n+}\n+\n+int foo_m2(int x)\n+{\n+  x -= 2;\n+  if (x == 0)\n+    x = 16;\n+  return x;\n+}\n+\n+int foo_p1(int x)\n+{\n+  x++;\n+  if (x == 0)\n+    x = 16;\n+  return x;\n+}\n+\n+int foo_p2(int x)\n+{\n+  x += 2;\n+  if (x == 0)\n+    x = 16;\n+  return x;\n+}\n+\n+\n+#ifdef __x86_64__\n+long long fool_m1(long long x)\n+{\n+  x--;\n+  if (x == 0)\n+    x = 16;\n+  return x;\n+}\n+\n+long long fool_m2(long long x)\n+{\n+  x -= 2;\n+  if (x == 0)\n+    x = 16;\n+  return x;\n+}\n+\n+long long fool_p1(long long x)\n+{\n+  x++;\n+  if (x == 0)\n+    x = 16;\n+  return x;\n+}\n+\n+long long fool_p2(long long x)\n+{\n+  x += 2;\n+  if (x == 0)\n+    x = 16;\n+  return x;\n+}\n+#endif /* __X86_64__ */\n+\n+short foos_m1(short x)\n+{\n+  x--;\n+  if (x == 0)\n+    x = 16;\n+  return x;\n+}\n+\n+short foos_m2(short x)\n+{\n+  x -= 2;\n+  if (x == 0)\n+    x = 16;\n+  return x;\n+}\n+\n+short foos_p1(short x)\n+{\n+  x++;\n+  if (x == 0)\n+    x = 16;\n+  return x;\n+}\n+\n+short foos_p2(short x)\n+{\n+  x += 2;\n+  if (x == 0)\n+    x = 16;\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-not \"mov(l|q)\\[ \\\\t\\]*%(e|r)(cx|di), %(e|r)ax\" } } */\n+"}, {"sha": "115db992f395c56d9367e9cd5d9c5f658cc6f170", "filename": "gcc/testsuite/gcc.target/i386/dec-cmov-2.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7bf03cf69ccb7dcfa0320774aa7f3c51344dada/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdec-cmov-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7bf03cf69ccb7dcfa0320774aa7f3c51344dada/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdec-cmov-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fdec-cmov-2.c?ref=f7bf03cf69ccb7dcfa0320774aa7f3c51344dada", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-additional-options \"-march=pentiumpro -mregparm=3\" { target ia32 } } */\n+\n+int foo(int x)\n+{\n+  x--;\n+  if (x == -1)\n+    x = 16;\n+  return x;\n+}\n+\n+int bar(int x)\n+{\n+  if (x == 0)\n+    x = 16;\n+  else x--;\n+  return x;\n+}\n+\n+#ifdef __x86_64__\n+long long fool(long long x)\n+{\n+  x--;\n+  if (x == -1)\n+    x = 16;\n+  return x;\n+}\n+\n+long long barl(long long x)\n+{\n+  if (x == 0)\n+    x = 16;\n+  else x--;\n+  return x;\n+}\n+#endif\n+\n+short foos(short x)\n+{\n+  x--;\n+  if (x == -1)\n+    x = 16;\n+  return x;\n+}\n+\n+short bars(short x)\n+{\n+  if (x == 0)\n+    x = 16;\n+  else x--;\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-not \"lea(l|q)\" } } */\n+/* { dg-final { scan-assembler-not \"test(l|q|w)\" } } */\n+"}]}