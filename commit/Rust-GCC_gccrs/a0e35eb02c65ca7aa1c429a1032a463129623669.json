{"sha": "a0e35eb02c65ca7aa1c429a1032a463129623669", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBlMzVlYjAyYzY1Y2E3YWExYzQyOWExMDMyYTQ2MzEyOTYyMzY2OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-01-14T09:04:50Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-01-14T09:04:50Z"}, "message": "re PR tree-optimization/58921 (ICE with segfault on valid code at -O3 on x86_64-linux-gnu)\n\n2014-01-14  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/58921\n\tPR tree-optimization/59006\n\t* tree-vect-loop-manip.c (vect_loop_versioning): Remove code\n\thoisting invariant stmts.\n\t* tree-vect-stmts.c (vectorizable_load): Insert the splat of\n\tinvariant loads on the preheader edge if possible.\n\n\t* gcc.dg/torture/pr58921.c: New testcase.\n\t* gcc.dg/torture/pr59006.c: Likewise.\n\t* gcc.dg/vect/pr58508.c: XFAIL no longer handled cases.\n\nFrom-SVN: r206599", "tree": {"sha": "c2fa988fd84ae971571c3f7df4e8a8c3314bd336", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2fa988fd84ae971571c3f7df4e8a8c3314bd336"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0e35eb02c65ca7aa1c429a1032a463129623669", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e35eb02c65ca7aa1c429a1032a463129623669", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0e35eb02c65ca7aa1c429a1032a463129623669", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e35eb02c65ca7aa1c429a1032a463129623669/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c76069c9d792c4c1f5ae58dfc76aed463fedbed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c76069c9d792c4c1f5ae58dfc76aed463fedbed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c76069c9d792c4c1f5ae58dfc76aed463fedbed"}], "stats": {"total": 152, "additions": 80, "deletions": 72}, "files": [{"sha": "d9d19491f4f7684d9825558b83b54945f920e3f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e35eb02c65ca7aa1c429a1032a463129623669/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e35eb02c65ca7aa1c429a1032a463129623669/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0e35eb02c65ca7aa1c429a1032a463129623669", "patch": "@@ -1,3 +1,12 @@\n+2014-01-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58921\n+\tPR tree-optimization/59006\n+\t* tree-vect-loop-manip.c (vect_loop_versioning): Remove code\n+\thoisting invariant stmts.\n+\t* tree-vect-stmts.c (vectorizable_load): Insert the splat of\n+\tinvariant loads on the preheader edge if possible.\n+\n 2014-01-14  Joey Ye  <joey.ye@arm.com>\n \n \t* doc/plugin.texi (Building GCC plugins): Update to C++."}, {"sha": "8a3b56d3eb2b076d6a0a6d0b9af7aa41ccd0d672", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e35eb02c65ca7aa1c429a1032a463129623669/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e35eb02c65ca7aa1c429a1032a463129623669/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0e35eb02c65ca7aa1c429a1032a463129623669", "patch": "@@ -1,3 +1,11 @@\n+2014-01-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58921\n+\tPR tree-optimization/59006\n+\t* gcc.dg/torture/pr58921.c: New testcase.\n+\t* gcc.dg/torture/pr59006.c: Likewise.\n+\t* gcc.dg/vect/pr58508.c: XFAIL no longer handled cases.\n+\n 2014-01-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR testsuite/59494"}, {"sha": "7d7c98514d484dd9da6477b26054a37fb4ad358f", "filename": "gcc/testsuite/gcc.dg/torture/pr58921.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e35eb02c65ca7aa1c429a1032a463129623669/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58921.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e35eb02c65ca7aa1c429a1032a463129623669/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58921.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58921.c?ref=a0e35eb02c65ca7aa1c429a1032a463129623669", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+\n+int a[7];\n+int b;\n+\n+void\n+fn1 ()\n+{\n+  for (; b; b++)\n+    a[b] = ((a[b] <= 0) == (a[0] != 0));\n+}\n+\n+int\n+main ()\n+{\n+  return 0;\n+}"}, {"sha": "34de83dac84d6b2859839b6dfcf9afdb926c9886", "filename": "gcc/testsuite/gcc.dg/torture/pr59006.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e35eb02c65ca7aa1c429a1032a463129623669/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr59006.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e35eb02c65ca7aa1c429a1032a463129623669/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr59006.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr59006.c?ref=a0e35eb02c65ca7aa1c429a1032a463129623669", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+int a[8], b;\n+void fn1(void)\n+{\n+  int c;\n+  for (; b; b++)\n+    {\n+      int d = a[b];\n+      c = a[0] ? d : 0;\n+      a[b] = c;\n+    }\n+}"}, {"sha": "c25da416baf1ec7cc27b750ff4146e8db2662b4a", "filename": "gcc/testsuite/gcc.dg/vect/pr58508.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e35eb02c65ca7aa1c429a1032a463129623669/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr58508.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e35eb02c65ca7aa1c429a1032a463129623669/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr58508.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr58508.c?ref=a0e35eb02c65ca7aa1c429a1032a463129623669", "patch": "@@ -66,5 +66,6 @@ void test5 (int* a, int* b)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"hoist\" 8 \"vect\" { xfail vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"hoist\" 8 \"vect\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"hoist\" 3 \"vect\" { xfail vect_no_align } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "77d945e6a505304ac8d4a1a7c7fb40f6b7519b31", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e35eb02c65ca7aa1c429a1032a463129623669/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e35eb02c65ca7aa1c429a1032a463129623669/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=a0e35eb02c65ca7aa1c429a1032a463129623669", "patch": "@@ -2435,73 +2435,6 @@ vect_loop_versioning (loop_vec_info loop_vinfo,\n \t}\n     }\n \n-\n-  /* Extract load statements on memrefs with zero-stride accesses.  */\n-\n-  if (LOOP_REQUIRES_VERSIONING_FOR_ALIAS (loop_vinfo))\n-    {\n-      /* In the loop body, we iterate each statement to check if it is a load.\n-\t Then we check the DR_STEP of the data reference.  If DR_STEP is zero,\n-\t then we will hoist the load statement to the loop preheader.  */\n-\n-      basic_block *bbs = LOOP_VINFO_BBS (loop_vinfo);\n-      int nbbs = loop->num_nodes;\n-\n-      for (int i = 0; i < nbbs; ++i)\n-\t{\n-\t  for (gimple_stmt_iterator si = gsi_start_bb (bbs[i]);\n-\t       !gsi_end_p (si);)\n-\t    {\n-\t      gimple stmt = gsi_stmt (si);\n-\t      stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n-\t      struct data_reference *dr = STMT_VINFO_DATA_REF (stmt_info);\n-\n-\t      if (is_gimple_assign (stmt)\n-\t\t  && (!dr\n-\t\t      || (DR_IS_READ (dr) && integer_zerop (DR_STEP (dr)))))\n-\t\t{\n-\t\t  bool hoist = true;\n-\t\t  ssa_op_iter iter;\n-\t\t  tree var;\n-\n-\t\t  /* We hoist a statement if all SSA uses in it are defined\n-\t\t     outside of the loop.  */\n-\t\t  FOR_EACH_SSA_TREE_OPERAND (var, stmt, iter, SSA_OP_USE)\n-\t\t    {\n-\t\t      gimple def = SSA_NAME_DEF_STMT (var);\n-\t\t      if (!gimple_nop_p (def)\n-\t\t\t  && flow_bb_inside_loop_p (loop, gimple_bb (def)))\n-\t\t\t{\n-\t\t\t  hoist = false;\n-\t\t\t  break;\n-\t\t\t}\n-\t\t    }\n-\n-\t\t  if (hoist)\n-\t\t    {\n-\t\t      if (dr)\n-\t\t\tgimple_set_vuse (stmt, NULL);\n-\n-\t\t      gsi_remove (&si, false);\n-\t\t      gsi_insert_on_edge_immediate (loop_preheader_edge (loop),\n-\t\t\t\t\t\t    stmt);\n-\n-\t\t      if (dump_enabled_p ())\n-\t\t\t{\n-\t\t\t  dump_printf_loc\n-\t\t\t      (MSG_NOTE, vect_location,\n-\t\t\t       \"hoisting out of the vectorized loop: \");\n-\t\t\t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM, stmt, 0);\n-\t\t\t  dump_printf (MSG_NOTE, \"\\n\");\n-\t\t\t}\n-\t\t      continue;\n-\t\t    }\n-\t\t}\n-\t      gsi_next (&si);\n-\t    }\n-\t}\n-    }\n-\n   /* End loop-exit-fixes after versioning.  */\n \n   if (cond_expr_stmt_list)"}, {"sha": "acdaa2db8afe61c0e10410a9fb2ad4f65911e637", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e35eb02c65ca7aa1c429a1032a463129623669/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e35eb02c65ca7aa1c429a1032a463129623669/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=a0e35eb02c65ca7aa1c429a1032a463129623669", "patch": "@@ -6380,12 +6380,39 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t      /* 4. Handle invariant-load.  */\n \t      if (inv_p && !bb_vinfo)\n \t\t{\n-\t\t  gimple_stmt_iterator gsi2 = *gsi;\n \t\t  gcc_assert (!grouped_load);\n-\t\t  gsi_next (&gsi2);\n-\t\t  new_temp = vect_init_vector (stmt, scalar_dest,\n-\t\t\t\t\t       vectype, &gsi2);\n+\t\t  /* If we have versioned for aliasing then we are sure\n+\t\t     this is a loop invariant load and thus we can insert\n+\t\t     it on the preheader edge.  */\n+\t\t  if (LOOP_REQUIRES_VERSIONING_FOR_ALIAS (loop_vinfo))\n+\t\t    {\n+\t\t      if (dump_enabled_p ())\n+\t\t\t{\n+\t\t\t  dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t\t\t   \"hoisting out of the vectorized \"\n+\t\t\t\t\t   \"loop: \");\n+\t\t\t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM, stmt, 0);\n+\t\t\t  dump_printf (MSG_NOTE, \"\\n\");\n+\t\t\t}\n+\t\t      tree tem = copy_ssa_name (scalar_dest, NULL);\n+\t\t      gsi_insert_on_edge_immediate\n+\t\t\t(loop_preheader_edge (loop),\n+\t\t\t gimple_build_assign (tem,\n+\t\t\t\t\t      unshare_expr\n+\t\t\t\t\t        (gimple_assign_rhs1 (stmt))));\n+\t\t      new_temp = vect_init_vector (stmt, tem, vectype, NULL);\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      gimple_stmt_iterator gsi2 = *gsi;\n+\t\t      gsi_next (&gsi2);\n+\t\t      new_temp = vect_init_vector (stmt, scalar_dest,\n+\t\t\t\t\t\t   vectype, &gsi2);\n+\t\t    }\n \t\t  new_stmt = SSA_NAME_DEF_STMT (new_temp);\n+\t\t  set_vinfo_for_stmt (new_stmt,\n+\t\t\t\t      new_stmt_vec_info (new_stmt, loop_vinfo,\n+\t\t\t\t\t\t\t bb_vinfo));\n \t\t}\n \n \t      if (negative)"}]}