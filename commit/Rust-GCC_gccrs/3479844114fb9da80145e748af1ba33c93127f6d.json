{"sha": "3479844114fb9da80145e748af1ba33c93127f6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ3OTg0NDExNGZiOWRhODAxNDVlNzQ4YWYxYmEzM2M5MzEyN2Y2ZA==", "commit": {"author": {"name": "Emmanuel Briot", "email": "briot@adacore.com", "date": "2011-08-03T09:38:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-03T09:38:56Z"}, "message": "prj-proc.adb, [...] (Get_Attribute_Index): do not systematically lower case attribute indexes that contain no \".\" Fix...\n\n2011-08-03  Emmanuel Briot  <briot@adacore.com>\n\n\t* prj-proc.adb, prj-attr.adb, prj-attr.ads (Get_Attribute_Index): do\n\tnot systematically lower case attribute indexes that contain no \".\"\n\tFix definition of several Naming attributes, which take\n\ta unit name as index and therefore should be case insensitive.\n\tMinor refactoring (reduce length of variable names).\n\n2011-08-03  Emmanuel Briot  <briot@adacore.com>\n\n\t* makeutl.adb, makeutl.ads (Get_Switches): new subprogram.\n\nFrom-SVN: r177250", "tree": {"sha": "0bc869b54ef08222cffa183a6bc843f58a9b2a56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bc869b54ef08222cffa183a6bc843f58a9b2a56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3479844114fb9da80145e748af1ba33c93127f6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3479844114fb9da80145e748af1ba33c93127f6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3479844114fb9da80145e748af1ba33c93127f6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3479844114fb9da80145e748af1ba33c93127f6d/comments", "author": {"login": "briot", "id": 42402, "node_id": "MDQ6VXNlcjQyNDAy", "avatar_url": "https://avatars.githubusercontent.com/u/42402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/briot", "html_url": "https://github.com/briot", "followers_url": "https://api.github.com/users/briot/followers", "following_url": "https://api.github.com/users/briot/following{/other_user}", "gists_url": "https://api.github.com/users/briot/gists{/gist_id}", "starred_url": "https://api.github.com/users/briot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/briot/subscriptions", "organizations_url": "https://api.github.com/users/briot/orgs", "repos_url": "https://api.github.com/users/briot/repos", "events_url": "https://api.github.com/users/briot/events{/privacy}", "received_events_url": "https://api.github.com/users/briot/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4437a53072c556b2a81eb96c842c5448ffafa838", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4437a53072c556b2a81eb96c842c5448ffafa838", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4437a53072c556b2a81eb96c842c5448ffafa838"}], "stats": {"total": 305, "additions": 203, "deletions": 102}, "files": [{"sha": "587e390d84c7b7f8c24fb7f007da238fe657d8db", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3479844114fb9da80145e748af1ba33c93127f6d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3479844114fb9da80145e748af1ba33c93127f6d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3479844114fb9da80145e748af1ba33c93127f6d", "patch": "@@ -1,3 +1,15 @@\n+2011-08-03  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* prj-proc.adb, prj-attr.adb, prj-attr.ads (Get_Attribute_Index): do\n+\tnot systematically lower case attribute indexes that contain no \".\"\n+\tFix definition of several Naming attributes, which take\n+\ta unit name as index and therefore should be case insensitive.\n+\tMinor refactoring (reduce length of variable names).\n+\n+2011-08-03  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* makeutl.adb, makeutl.ads (Get_Switches): new subprogram.\n+\n 2011-08-03  Emmanuel Briot  <briot@adacore.com>\n \n \t* gnatcmd.adb, prj-proc.adb, prj-proc.ads, make.adb, prj-part.adb,"}, {"sha": "6127833a2e539bc7b98a5700b7e959591240dc30", "filename": "gcc/ada/makeutl.adb", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3479844114fb9da80145e748af1ba33c93127f6d/gcc%2Fada%2Fmakeutl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3479844114fb9da80145e748af1ba33c93127f6d/gcc%2Fada%2Fmakeutl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.adb?ref=3479844114fb9da80145e748af1ba33c93127f6d", "patch": "@@ -652,6 +652,92 @@ package body Makeutl is\n       return False;\n    end File_Not_A_Source_Of;\n \n+   ------------------\n+   -- Get_Switches --\n+   ------------------\n+\n+   procedure Get_Switches\n+     (Source       : Prj.Source_Id;\n+      Pkg_Name     : Name_Id;\n+      Project_Tree : Project_Tree_Ref;\n+      Value        : out Variable_Value;\n+      Is_Default   : out Boolean)\n+   is\n+   begin\n+      Get_Switches\n+        (Source_File  => Source.File,\n+         Source_Lang  => Source.Language.Name,\n+         Source_Prj   => Source.Project,\n+         Pkg_Name     => Pkg_Name,\n+         Project_Tree => Project_Tree,\n+         Value        => Value,\n+         Is_Default   => Is_Default);\n+   end Get_Switches;\n+\n+   ------------------\n+   -- Get_Switches --\n+   ------------------\n+\n+   procedure Get_Switches\n+     (Source_File  : File_Name_Type;\n+      Source_Lang  : Name_Id;\n+      Source_Prj   : Project_Id;\n+      Pkg_Name     : Name_Id;\n+      Project_Tree : Project_Tree_Ref;\n+      Value        : out Variable_Value;\n+      Is_Default   : out Boolean)\n+   is\n+      Project       : constant Project_Id :=\n+        Ultimate_Extending_Project_Of (Source_Prj);\n+      Pkg : constant Package_Id :=\n+        Prj.Util.Value_Of\n+          (Name        => Pkg_Name,\n+           In_Packages => Project.Decl.Packages,\n+           In_Tree     => Project_Tree);\n+   begin\n+      Is_Default := False;\n+\n+      if Source_File /= No_File then\n+         Value := Prj.Util.Value_Of\n+           (Name                    => Name_Id (Source_File),\n+            Attribute_Or_Array_Name => Name_Switches,\n+            In_Package              => Pkg,\n+            In_Tree                 => Project_Tree,\n+            Allow_Wildcards         => True);\n+      end if;\n+\n+      if Value = Nil_Variable_Value then\n+         Is_Default := True;\n+         Is_Default := True;\n+         Value :=\n+           Prj.Util.Value_Of\n+             (Name                    => Source_Lang,\n+              Attribute_Or_Array_Name => Name_Switches,\n+              In_Package              => Pkg,\n+              In_Tree                 => Project_Tree,\n+              Force_Lower_Case_Index  => True);\n+      end if;\n+\n+      if Value = Nil_Variable_Value then\n+         Value :=\n+           Prj.Util.Value_Of\n+             (Name                    => All_Other_Names,\n+              Attribute_Or_Array_Name => Name_Switches,\n+              In_Package              => Pkg,\n+              In_Tree                 => Project_Tree,\n+              Force_Lower_Case_Index  => True);\n+      end if;\n+\n+      if Value = Nil_Variable_Value then\n+         Value :=\n+           Prj.Util.Value_Of\n+             (Name                    => Source_Lang,\n+              Attribute_Or_Array_Name => Name_Default_Switches,\n+              In_Package              => Pkg,\n+              In_Tree                 => Project_Tree);\n+      end if;\n+   end Get_Switches;\n+\n    ----------\n    -- Hash --\n    ----------"}, {"sha": "8e9e151ee74a31b2e0b90d28696bcf589953acae", "filename": "gcc/ada/makeutl.ads", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3479844114fb9da80145e748af1ba33c93127f6d/gcc%2Fada%2Fmakeutl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3479844114fb9da80145e748af1ba33c93127f6d/gcc%2Fada%2Fmakeutl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.ads?ref=3479844114fb9da80145e748af1ba33c93127f6d", "patch": "@@ -148,6 +148,28 @@ package Makeutl is\n    --  is printed last. Both N1 and N2 are printed in quotation marks. The two\n    --  forms differ only in taking Name_Id or File_name_Type arguments.\n \n+   procedure Get_Switches\n+     (Source       : Source_Id;\n+      Pkg_Name     : Name_Id;\n+      Project_Tree : Project_Tree_Ref;\n+      Value        : out Variable_Value;\n+      Is_Default   : out Boolean);\n+   procedure Get_Switches\n+     (Source_File  : File_Name_Type;\n+      Source_Lang  : Name_Id;\n+      Source_Prj   : Project_Id;\n+      Pkg_Name     : Name_Id;\n+      Project_Tree : Project_Tree_Ref;\n+      Value        : out Variable_Value;\n+      Is_Default   : out Boolean);\n+   --  Compute the switches (Compilation switches for instance) for the given\n+   --  file. This checks various attributes to see whether there are file\n+   --  specific switches, or else defaults on the switches for the\n+   --  corresponding language.\n+   --  Is_Default is set to False if there were file-specific switches\n+   --  Source_File can be set to No_File to force retrieval of the default\n+   --  switches.\n+\n    function Linker_Options_Switches\n      (Project  : Project_Id;\n       In_Tree  : Project_Tree_Ref) return String_List;"}, {"sha": "d584f6cb89f645951d3a23aae7526d17ac21ffa0", "filename": "gcc/ada/prj-attr.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3479844114fb9da80145e748af1ba33c93127f6d/gcc%2Fada%2Fprj-attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3479844114fb9da80145e748af1ba33c93127f6d/gcc%2Fada%2Fprj-attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-attr.adb?ref=3479844114fb9da80145e748af1ba33c93127f6d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -165,10 +165,10 @@ package body Prj.Attr is\n    \"SVseparate_suffix#\" &\n    \"SVcasing#\" &\n    \"SVdot_replacement#\" &\n-   \"sAspecification#\" &  --  Always renamed to \"spec\" in project tree\n-   \"sAspec#\" &\n-   \"sAimplementation#\" & --  Always renamed to \"body\" in project tree\n-   \"sAbody#\" &\n+   \"saspecification#\" &  --  Always renamed to \"spec\" in project tree\n+   \"saspec#\" &\n+   \"saimplementation#\" & --  Always renamed to \"body\" in project tree\n+   \"sabody#\" &\n    \"Laspecification_exceptions#\" &\n    \"Laimplementation_exceptions#\" &\n "}, {"sha": "b171719de69f66d318914f9c5a1fa3fb2afdea10", "filename": "gcc/ada/prj-attr.ads", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3479844114fb9da80145e748af1ba33c93127f6d/gcc%2Fada%2Fprj-attr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3479844114fb9da80145e748af1ba33c93127f6d/gcc%2Fada%2Fprj-attr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-attr.ads?ref=3479844114fb9da80145e748af1ba33c93127f6d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2001-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -152,6 +152,21 @@ package Prj.Attr is\n      (Attribute : Attribute_Node_Id) return Attribute_Kind;\n    --  Returns the attribute kind of a known attribute. Returns Unknown if\n    --  Attribute is Empty_Attribute.\n+   --\n+   --  To use this function, the following code should be used:\n+   --      Pkg : constant Package_Node_Id :=\n+   --        Prj.Attr.Package_Node_Id_Of (Name => <package name>);\n+   --      Att : constant Attribute_Node_Id :=\n+   --        Prj.Attr.Attribute_Node_Id_Of\n+   --          (Name => <attribute name>,\n+   --           Starting_At => First_Attribute_Of (Pkg));\n+   --      Kind : constant Attribute_Kind := Attribute_Kind_Of (Att);\n+   --\n+   --  However, you should not use this function once you have an already\n+   --  parsed project tree. Instead, given a Project_Node_Id corresponding to\n+   --  the attribute declaration (\"for Attr (index) use ...\"), it is simpler to\n+   --  use\n+   --      if Case_Insensitive (Attr, Tree) then ...\n \n    procedure Set_Attribute_Kind_Of\n      (Attribute : Attribute_Node_Id;"}, {"sha": "be3a0a7f3bfb5a535240fd08a841776461fac617", "filename": "gcc/ada/prj-proc.adb", "status": "modified", "additions": 62, "deletions": 96, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3479844114fb9da80145e748af1ba33c93127f6d/gcc%2Fada%2Fprj-proc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3479844114fb9da80145e748af1ba33c93127f6d/gcc%2Fada%2Fprj-proc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-proc.adb?ref=3479844114fb9da80145e748af1ba33c93127f6d", "patch": "@@ -458,41 +458,19 @@ package body Prj.Proc is\n    -------------------------\n \n    function Get_Attribute_Index\n-     (Tree  : Project_Node_Tree_Ref;\n-      Attr  : Project_Node_Id;\n-      Index : Name_Id) return Name_Id\n-   is\n-      Lower : Boolean;\n-\n+     (Tree   : Project_Node_Tree_Ref;\n+      Attr   : Project_Node_Id;\n+      Index  : Name_Id) return Name_Id is\n    begin\n-      if Index = All_Other_Names then\n+      if Index = All_Other_Names\n+        or else not Case_Insensitive (Attr, Tree)\n+      then\n          return Index;\n       end if;\n \n       Get_Name_String (Index);\n-      Lower := Case_Insensitive (Attr, Tree);\n-\n-      --  The index is always case insensitive if it does not include any dot.\n-      --  ??? Why not use the properties from prj-attr, simply, maybe because\n-      --  we don't know whether we have a file as an index?\n-\n-      if not Lower then\n-         Lower := True;\n-\n-         for J in 1 .. Name_Len loop\n-            if Name_Buffer (J) = '.' then\n-               Lower := False;\n-               exit;\n-            end if;\n-         end loop;\n-      end if;\n-\n-      if Lower then\n-         To_Lower (Name_Buffer (1 .. Name_Len));\n-         return Name_Find;\n-      else\n-         return Index;\n-      end if;\n+      To_Lower (Name_Buffer (1 .. Name_Len));\n+      return Name_Find;\n    end Get_Attribute_Index;\n \n    ----------------\n@@ -1440,7 +1418,7 @@ package body Prj.Proc is\n       procedure Process_Expression\n         (Current : Project_Node_Id);\n       procedure Process_Expression_For_Associative_Array\n-        (Current_Item : Project_Node_Id;\n+        (Current : Project_Node_Id;\n          New_Value    : Variable_Value);\n       procedure Process_Expression_Variable_Decl\n         (Current_Item : Project_Node_Id;\n@@ -1869,29 +1847,25 @@ package body Prj.Proc is\n       ----------------------------------------------\n \n       procedure Process_Expression_For_Associative_Array\n-        (Current_Item : Project_Node_Id;\n-         New_Value    : Variable_Value)\n+        (Current   : Project_Node_Id;\n+         New_Value : Variable_Value)\n       is\n-         Current_Item_Name : constant Name_Id :=\n-           Name_Of (Current_Item, Node_Tree);\n+         Name : constant Name_Id := Name_Of (Current, Node_Tree);\n          Current_Location : constant Source_Ptr :=\n-           Location_Of (Current_Item, Node_Tree);\n+           Location_Of (Current, Node_Tree);\n \n          Index_Name : Name_Id :=\n-           Associative_Array_Index_Of (Current_Item, Node_Tree);\n+           Associative_Array_Index_Of (Current, Node_Tree);\n \n          Source_Index : constant Int :=\n-           Source_Index_Of (Current_Item, Node_Tree);\n+           Source_Index_Of (Current, Node_Tree);\n \n-         The_Array         : Array_Id;\n-         The_Array_Element : Array_Element_Id := No_Array_Element;\n+         The_Array : Array_Id;\n+         Elem      : Array_Element_Id := No_Array_Element;\n \n       begin\n          if Index_Name /= All_Other_Names then\n-            Index_Name := Get_Attribute_Index\n-              (Node_Tree,\n-               Current_Item,\n-               Associative_Array_Index_Of (Current_Item, Node_Tree));\n+            Index_Name := Get_Attribute_Index (Node_Tree, Current, Index_Name);\n          end if;\n \n          --  Look for the array in the appropriate list\n@@ -1903,7 +1877,7 @@ package body Prj.Proc is\n          end if;\n \n          while The_Array /= No_Array\n-           and then In_Tree.Arrays.Table (The_Array).Name /= Current_Item_Name\n+           and then In_Tree.Arrays.Table (The_Array).Name /= Name\n          loop\n             The_Array := In_Tree.Arrays.Table (The_Array).Next;\n          end loop;\n@@ -1919,7 +1893,7 @@ package body Prj.Proc is\n \n             if Pkg /= No_Package then\n                In_Tree.Arrays.Table (The_Array) :=\n-                 (Name     => Current_Item_Name,\n+                 (Name     => Name,\n                   Location => Current_Location,\n                   Value    => No_Array_Element,\n                   Next     => In_Tree.Packages.Table (Pkg).Decl.Arrays);\n@@ -1928,62 +1902,60 @@ package body Prj.Proc is\n \n             else\n                In_Tree.Arrays.Table (The_Array) :=\n-                 (Name     => Current_Item_Name,\n+                 (Name     => Name,\n                   Location => Current_Location,\n                   Value    => No_Array_Element,\n                   Next     => Project.Decl.Arrays);\n \n                Project.Decl.Arrays := The_Array;\n             end if;\n \n-            --  Otherwise initialize The_Array_Element as the\n-            --  head of the element list.\n-\n          else\n-            The_Array_Element := In_Tree.Arrays.Table (The_Array).Value;\n+            Elem := In_Tree.Arrays.Table (The_Array).Value;\n          end if;\n \n          --  Look in the list, if any, to find an element\n          --  with the same index and same source index.\n \n-         while The_Array_Element /= No_Array_Element\n+         while Elem /= No_Array_Element\n            and then\n-             (In_Tree.Array_Elements.Table (The_Array_Element).Index /=\n-                Index_Name\n+             (In_Tree.Array_Elements.Table (Elem).Index /= Index_Name\n               or else\n-                In_Tree.Array_Elements.Table (The_Array_Element).Src_Index /=\n-                Source_Index)\n+                In_Tree.Array_Elements.Table (Elem).Src_Index /= Source_Index)\n          loop\n-            The_Array_Element :=\n-              In_Tree.Array_Elements.Table (The_Array_Element).Next;\n+            Elem := In_Tree.Array_Elements.Table (Elem).Next;\n          end loop;\n \n          --  If no such element were found, create a new one\n          --  and insert it in the element list, with the\n          --  proper value.\n \n-         if The_Array_Element = No_Array_Element then\n+         if Elem = No_Array_Element then\n             Array_Element_Table.Increment_Last (In_Tree.Array_Elements);\n-            The_Array_Element :=\n-              Array_Element_Table.Last (In_Tree.Array_Elements);\n+            Elem := Array_Element_Table.Last (In_Tree.Array_Elements);\n \n             In_Tree.Array_Elements.Table\n-              (The_Array_Element) :=\n+              (Elem) :=\n               (Index                => Index_Name,\n                Src_Index            => Source_Index,\n                Index_Case_Sensitive =>\n-                  not Case_Insensitive (Current_Item, Node_Tree),\n+                  not Case_Insensitive (Current, Node_Tree),\n                Value                => New_Value,\n                Next                 => In_Tree.Arrays.Table (The_Array).Value);\n \n-            In_Tree.Arrays.Table (The_Array).Value := The_Array_Element;\n+            In_Tree.Arrays.Table (The_Array).Value := Elem;\n \n+         else\n             --  An element with the same index already exists,\n             --  just replace its value with the new one.\n \n-         else\n-            In_Tree.Array_Elements.Table (The_Array_Element).Value :=\n-              New_Value;\n+            In_Tree.Array_Elements.Table (Elem).Value := New_Value;\n+         end if;\n+\n+         if Name = Snames.Name_External then\n+            Debug_Output\n+              (\"Defined external value (\"\n+               & Get_Name_String (Index_Name) & \")\", New_Value.Value);\n          end if;\n       end Process_Expression_For_Associative_Array;\n \n@@ -1995,80 +1967,74 @@ package body Prj.Proc is\n         (Current_Item : Project_Node_Id;\n          New_Value    : Variable_Value)\n       is\n-         Current_Item_Name : constant Name_Id :=\n-           Name_Of (Current_Item, Node_Tree);\n-         The_Variable : Variable_Id := No_Variable;\n+         Name : constant Name_Id := Name_Of (Current_Item, Node_Tree);\n+         Var : Variable_Id := No_Variable;\n+         Is_Attribute : constant Boolean :=\n+           Kind_Of (Current_Item, Node_Tree) = N_Attribute_Declaration;\n \n       begin\n          --  First, find the list where to find the variable or attribute.\n \n-         if Kind_Of (Current_Item, Node_Tree) =\n-           N_Attribute_Declaration\n-         then\n+         if Is_Attribute then\n             if Pkg /= No_Package then\n-               The_Variable := In_Tree.Packages.Table (Pkg).Decl.Attributes;\n+               Var := In_Tree.Packages.Table (Pkg).Decl.Attributes;\n             else\n-               The_Variable := Project.Decl.Attributes;\n+               Var := Project.Decl.Attributes;\n             end if;\n \n          else\n             if Pkg /= No_Package then\n-               The_Variable := In_Tree.Packages.Table (Pkg).Decl.Variables;\n+               Var := In_Tree.Packages.Table (Pkg).Decl.Variables;\n             else\n-               The_Variable := Project.Decl.Variables;\n+               Var := Project.Decl.Variables;\n             end if;\n          end if;\n \n          --  Loop through the list, to find if it has already been declared.\n \n-         while The_Variable /= No_Variable\n-           and then In_Tree.Variable_Elements.Table (The_Variable).Name /=\n-              Current_Item_Name\n+         while Var /= No_Variable\n+           and then In_Tree.Variable_Elements.Table (Var).Name /= Name\n          loop\n-            The_Variable :=\n-              In_Tree.Variable_Elements.Table (The_Variable).Next;\n+            Var := In_Tree.Variable_Elements.Table (Var).Next;\n          end loop;\n \n          --  If it has not been declared, create a new entry\n          --  in the list.\n \n-         if The_Variable = No_Variable then\n+         if Var = No_Variable then\n \n             --  All single string attribute should already have\n             --  been declared with a default empty string value.\n \n             pragma Assert\n-              (Kind_Of (Current_Item, Node_Tree) /=\n-                 N_Attribute_Declaration,\n-               \"illegal attribute declaration for \"\n-               & Get_Name_String (Current_Item_Name));\n+              (not Is_Attribute,\n+               \"illegal attribute declaration for \" & Get_Name_String (Name));\n \n             Variable_Element_Table.Increment_Last (In_Tree.Variable_Elements);\n-            The_Variable := Variable_Element_Table.Last\n-              (In_Tree.Variable_Elements);\n+            Var := Variable_Element_Table.Last (In_Tree.Variable_Elements);\n \n             --  Put the new variable in the appropriate list\n \n             if Pkg /= No_Package then\n-               In_Tree.Variable_Elements.Table (The_Variable) :=\n+               In_Tree.Variable_Elements.Table (Var) :=\n                  (Next   => In_Tree.Packages.Table (Pkg).Decl.Variables,\n-                  Name   => Current_Item_Name,\n+                  Name   => Name,\n                   Value  => New_Value);\n-               In_Tree.Packages.Table (Pkg).Decl.Variables := The_Variable;\n+               In_Tree.Packages.Table (Pkg).Decl.Variables := Var;\n \n             else\n-               In_Tree.Variable_Elements.Table (The_Variable) :=\n+               In_Tree.Variable_Elements.Table (Var) :=\n                  (Next   => Project.Decl.Variables,\n-                  Name   => Current_Item_Name,\n+                  Name   => Name,\n                   Value  => New_Value);\n-               Project.Decl.Variables := The_Variable;\n+               Project.Decl.Variables := Var;\n             end if;\n \n             --  If the variable/attribute has already been\n             --  declared, just change the value.\n \n          else\n-            In_Tree.Variable_Elements.Table (The_Variable).Value := New_Value;\n+            In_Tree.Variable_Elements.Table (Var).Value := New_Value;\n          end if;\n       end Process_Expression_Variable_Decl;\n "}]}