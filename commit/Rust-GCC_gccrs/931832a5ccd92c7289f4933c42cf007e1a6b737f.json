{"sha": "931832a5ccd92c7289f4933c42cf007e1a6b737f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMxODMyYTVjY2Q5MmM3Mjg5ZjQ5MzNjNDJjZjAwN2UxYTZiNzM3Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-09-07T12:26:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-09-07T12:29:39Z"}, "message": "improve SLP vect dumping\n\nThis adds additional dumping helping in particular basic-block\nvectorization SLP dump reading plus showing what we actually\ngenerate code from.\n\n2020-09-07  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-slp.c (vect_analyze_slp_instance): Dump\n\tstmts we start SLP analysis from, failure and splitting.\n\t(vect_schedule_slp): Dump SLP graph entry and root stmt\n\twe are about to emit code for.", "tree": {"sha": "90fc3bb68d1bdb3224ed76526ed2e45d1ce07066", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90fc3bb68d1bdb3224ed76526ed2e45d1ce07066"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/931832a5ccd92c7289f4933c42cf007e1a6b737f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/931832a5ccd92c7289f4933c42cf007e1a6b737f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/931832a5ccd92c7289f4933c42cf007e1a6b737f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/931832a5ccd92c7289f4933c42cf007e1a6b737f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fe3efe5c141a88a80c1ecc6aebc7f15d6426f62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe3efe5c141a88a80c1ecc6aebc7f15d6426f62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fe3efe5c141a88a80c1ecc6aebc7f15d6426f62"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "dcc80d559177aa8b32dd66f94a640277a4c3c1ea", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931832a5ccd92c7289f4933c42cf007e1a6b737f/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931832a5ccd92c7289f4933c42cf007e1a6b737f/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=931832a5ccd92c7289f4933c42cf007e1a6b737f", "patch": "@@ -2202,6 +2202,15 @@ vect_analyze_slp_instance (vec_info *vinfo,\n \tscalar_stmts.safe_push (next_info);\n     }\n \n+  if (dump_enabled_p ())\n+    {\n+      dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t       \"Starting SLP discovery for\\n\");\n+      for (i = 0; i < scalar_stmts.length (); ++i)\n+\tdump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t \"  %G\", scalar_stmts[i]->stmt);\n+    }\n+\n   /* Build the tree for the SLP instance.  */\n   bool *matches = XALLOCAVEC (bool, group_size);\n   unsigned npermutes = 0;\n@@ -2232,6 +2241,10 @@ vect_analyze_slp_instance (vec_info *vinfo,\n \t      return false;\n \t    }\n \t  /* Fatal mismatch.  */\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t     \"SLP discovery succeeded but node needs \"\n+\t\t\t     \"splitting\\n\");\n \t  matches[0] = true;\n \t  matches[group_size / const_max_nunits * const_max_nunits] = false;\n \t  vect_free_slp_tree (node, false);\n@@ -2374,6 +2387,9 @@ vect_analyze_slp_instance (vec_info *vinfo,\n \t  gcc_assert ((const_nunits & (const_nunits - 1)) == 0);\n \t  unsigned group1_size = i & ~(const_nunits - 1);\n \n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t     \"Splitting SLP group at stmt %u\\n\", i);\n \t  stmt_vec_info rest = vect_split_slp_store_group (stmt_info,\n \t\t\t\t\t\t\t   group1_size);\n \t  bool res = vect_analyze_slp_instance (vinfo, bst_map, stmt_info,\n@@ -2395,6 +2411,9 @@ vect_analyze_slp_instance (vec_info *vinfo,\n \t (some) of the remainder.  FORNOW ignore this possibility.  */\n     }\n \n+  /* Failed to SLP.  */\n+  if (dump_enabled_p ())\n+    dump_printf_loc (MSG_NOTE, vect_location, \"SLP discovery failed\\n\");\n   return false;\n }\n \n@@ -4662,6 +4681,16 @@ vect_schedule_slp (vec_info *vinfo)\n   FOR_EACH_VEC_ELT (slp_instances, i, instance)\n     {\n       slp_tree node = SLP_INSTANCE_TREE (instance);\n+      if (dump_enabled_p ())\n+\t{\n+\t  dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t   \"Vectorizing SLP tree:\\n\");\n+\t  if (SLP_INSTANCE_ROOT_STMT (instance))\n+\t    dump_printf_loc (MSG_NOTE, vect_location, \"Root stmt: %G\",\n+\t\t\t SLP_INSTANCE_ROOT_STMT (instance)->stmt);\n+\t  vect_print_slp_graph (MSG_NOTE, vect_location,\n+\t\t\t\tSLP_INSTANCE_TREE (instance));\n+\t}\n       /* Schedule the tree of INSTANCE.  */\n       vect_schedule_slp_instance (vinfo, node, instance);\n "}]}