{"sha": "386b46cf78f852e82fb1f37ba271858b1f1040b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg2YjQ2Y2Y3OGY4NTJlODJmYjFmMzdiYTI3MTg1OGIxZjEwNDBiMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2006-07-24T00:16:16Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2006-07-24T00:16:16Z"}, "message": "re PR c/25795 (Proccessing the attribute externally_visible too early)\n\n\tPR c/25795\n\tPR c++/27369\n\t* cgraph.c (cgraph_varpool_nodes): Export.\n\t(decide_is_variable_needed): Ignored \"used\" attribute in\n\tunit-at-a-time mode.\n\t* cgraph.h (cgraph_varpool_nodes): Declare.\n\t* cgraphunit.c (decide_is_function_needed): Ignored \"used\" attribute in\n\tunit-at-a-time mode.\n\n\t* gcc.dg/pr25795.c: New test.\n\t* gcc.dg/pr25795-1.c: New test.\n\nFrom-SVN: r115693", "tree": {"sha": "20047ee6f873662157a0d8d8f27ffbacb9260691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20047ee6f873662157a0d8d8f27ffbacb9260691"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/386b46cf78f852e82fb1f37ba271858b1f1040b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386b46cf78f852e82fb1f37ba271858b1f1040b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/386b46cf78f852e82fb1f37ba271858b1f1040b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386b46cf78f852e82fb1f37ba271858b1f1040b3/comments", "author": null, "committer": null, "parents": [{"sha": "3201e73d96ae8bd6425828a807987f35f1f7bd32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3201e73d96ae8bd6425828a807987f35f1f7bd32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3201e73d96ae8bd6425828a807987f35f1f7bd32"}], "stats": {"total": 143, "additions": 122, "deletions": 21}, "files": [{"sha": "d23808d345c38627a9d78f4591e61ae794a56ae4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b46cf78f852e82fb1f37ba271858b1f1040b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b46cf78f852e82fb1f37ba271858b1f1040b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=386b46cf78f852e82fb1f37ba271858b1f1040b3", "patch": "@@ -1,3 +1,14 @@\n+2006-07-23  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR c/25795\n+\tPR c++/27369\n+\t* cgraph.c (cgraph_varpool_nodes): Export.\n+\t(decide_is_variable_needed): Ignored \"used\" attribute in\n+\tunit-at-a-time mode.\n+\t* cgraph.h (cgraph_varpool_nodes): Declare.\n+\t* cgraphunit.c (decide_is_function_needed): Ignored \"used\" attribute in\n+\tunit-at-a-time mode.\n+\n 2006-07-23  Roger Sayle  <roger@eyesopen.com>\n \n \tPR target/28247"}, {"sha": "71f8ce689fd5a085f14a6e6b03742c7c48cd4929", "filename": "gcc/c-common.c", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b46cf78f852e82fb1f37ba271858b1f1040b3/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b46cf78f852e82fb1f37ba271858b1f1040b3/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=386b46cf78f852e82fb1f37ba271858b1f1040b3", "patch": "@@ -4308,20 +4308,9 @@ handle_externally_visible_attribute (tree *pnode, tree name,\n \t       \"%qE attribute have effect only on public objects\", name);\n       *no_add_attrs = true;\n     }\n-  else if (TREE_CODE (node) == FUNCTION_DECL)\n-    {\n-      struct cgraph_node *n = cgraph_node (node);\n-      n->local.externally_visible = true;\n-      if (n->local.finalized)\n-\tcgraph_mark_needed_node (n);\n-    }\n-  else if (TREE_CODE (node) == VAR_DECL)\n-    {\n-      struct cgraph_varpool_node *n = cgraph_varpool_node (node);\n-      n->externally_visible = true;\n-      if (n->finalized)\n-\tcgraph_varpool_mark_needed_node (n);\n-    }\n+  else if (TREE_CODE (node) == FUNCTION_DECL\n+\t   || TREE_CODE (node) == VAR_DECL)\n+    ;\n   else\n     {\n       warning (OPT_Wattributes, \"%qE attribute ignored\", name);"}, {"sha": "b900e8a8d5d1399ced1ce17bf8eeeb9568615403", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b46cf78f852e82fb1f37ba271858b1f1040b3/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b46cf78f852e82fb1f37ba271858b1f1040b3/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=386b46cf78f852e82fb1f37ba271858b1f1040b3", "patch": "@@ -3554,7 +3554,7 @@ finish_decl (tree decl, tree init, tree asmspec_tree)\n     }\n \n   /* If this was marked 'used', be sure it will be output.  */\n-  if (lookup_attribute (\"used\", DECL_ATTRIBUTES (decl)))\n+  if (!flag_unit_at_a_time && lookup_attribute (\"used\", DECL_ATTRIBUTES (decl)))\n     mark_decl_referenced (decl);\n \n   if (TREE_CODE (decl) == TYPE_DECL)"}, {"sha": "5dd0afb24cbb98175e0ebcd0507a4085090148e3", "filename": "gcc/cgraph.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b46cf78f852e82fb1f37ba271858b1f1040b3/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b46cf78f852e82fb1f37ba271858b1f1040b3/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=386b46cf78f852e82fb1f37ba271858b1f1040b3", "patch": "@@ -137,7 +137,7 @@ static GTY((param_is (struct cgraph_varpool_node))) htab_t cgraph_varpool_hash;\n struct cgraph_varpool_node *cgraph_varpool_nodes_queue, *cgraph_varpool_first_unanalyzed_node;\n \n /* The linked list of cgraph varpool nodes.  */\n-static GTY(()) struct cgraph_varpool_node *cgraph_varpool_nodes;\n+struct cgraph_varpool_node *cgraph_varpool_nodes;\n \n /* End of the varpool queue.  Needs to be QTYed to work with PCH.  */\n static GTY(()) struct cgraph_varpool_node *cgraph_varpool_last_needed_node;\n@@ -843,8 +843,10 @@ bool\n decide_is_variable_needed (struct cgraph_varpool_node *node, tree decl)\n {\n   /* If the user told us it is used, then it must be so.  */\n-  if (node->externally_visible\n-      || lookup_attribute (\"used\", DECL_ATTRIBUTES (decl)))\n+  if (node->externally_visible)\n+    return true;\n+  if (!flag_unit_at_a_time\n+      && lookup_attribute (\"used\", DECL_ATTRIBUTES (decl)))\n     return true;\n \n   /* ??? If the assembler name is set by hand, it is possible to assemble\n@@ -861,7 +863,8 @@ decide_is_variable_needed (struct cgraph_varpool_node *node, tree decl)\n \n   /* Externally visible variables must be output.  The exception is\n      COMDAT variables that must be output only when they are needed.  */\n-  if (TREE_PUBLIC (decl) && !DECL_COMDAT (decl) && !DECL_EXTERNAL (decl))\n+  if (TREE_PUBLIC (decl) && !flag_whole_program && !DECL_COMDAT (decl)\n+      && !DECL_EXTERNAL (decl))\n     return true;\n \n   /* When not reordering top level variables, we have to assume that"}, {"sha": "31ddfe37d0ae3c874c1c40c00cdc07e744fcaf7e", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b46cf78f852e82fb1f37ba271858b1f1040b3/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b46cf78f852e82fb1f37ba271858b1f1040b3/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=386b46cf78f852e82fb1f37ba271858b1f1040b3", "patch": "@@ -249,6 +249,7 @@ extern GTY(()) struct cgraph_node *cgraph_expand_queue;\n \n extern GTY(()) struct cgraph_varpool_node *cgraph_varpool_first_unanalyzed_node;\n extern GTY(()) struct cgraph_varpool_node *cgraph_varpool_nodes_queue;\n+extern GTY(()) struct cgraph_varpool_node *cgraph_varpool_nodes;\n extern GTY(()) struct cgraph_asm_node *cgraph_asm_nodes;\n extern GTY(()) int cgraph_order;\n "}, {"sha": "c0e41495ac9eb84b1ace10e80f65b680860e718c", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 72, "deletions": 2, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b46cf78f852e82fb1f37ba271858b1f1040b3/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b46cf78f852e82fb1f37ba271858b1f1040b3/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=386b46cf78f852e82fb1f37ba271858b1f1040b3", "patch": "@@ -198,8 +198,10 @@ decide_is_function_needed (struct cgraph_node *node, tree decl)\n     }\n \n   /* If the user told us it is used, then it must be so.  */\n-  if (node->local.externally_visible\n-      || lookup_attribute (\"used\", DECL_ATTRIBUTES (decl)))\n+  if (node->local.externally_visible)\n+    return true;\n+\n+  if (!flag_unit_at_a_time && lookup_attribute (\"used\", DECL_ATTRIBUTES (decl)))\n     return true;\n \n   /* ??? If the assembler name is set by hand, it is possible to assemble\n@@ -937,6 +939,71 @@ cgraph_analyze_function (struct cgraph_node *node)\n   current_function_decl = NULL;\n }\n \n+/* Look for externally_visible and used attributes and mark cgraph nodes\n+   accordingly.\n+\n+   We cannot mark the nodes at the point the attributes are processed (in\n+   handle_*_attribute) because the copy of the declarations available at that\n+   point may not be canonical.  For example, in:\n+\n+    void f();\n+    void f() __attribute__((used));\n+\n+   the declaration we see in handle_used_attribute will be the second\n+   declaration -- but the front end will subsequently merge that declaration\n+   with the original declaration and discard the second declaration.\n+\n+   Furthermore, we can't mark these nodes in cgraph_finalize_function because:\n+\n+    void f() {}\n+    void f() __attribute__((externally_visible));\n+\n+   is valid.\n+\n+   So, we walk the nodes at the end of the translation unit, applying the\n+   attributes at that point.  */\n+\n+static void\n+process_function_and_variable_attributes (struct cgraph_node *first,\n+                                          struct cgraph_varpool_node *first_var)\n+{\n+  struct cgraph_node *node;\n+  struct cgraph_varpool_node *vnode;\n+\n+  for (node = cgraph_nodes; node != first; node = node->next)\n+    {\n+      tree decl = node->decl;\n+      if (lookup_attribute (\"used\", DECL_ATTRIBUTES (decl)))\n+\t{\n+\t  mark_decl_referenced (decl);\n+\t  if (node->local.finalized)\n+\t     cgraph_mark_needed_node (node);\n+\t}\n+      if (lookup_attribute (\"externally_visible\", DECL_ATTRIBUTES (decl)))\n+\t{\n+\t  if (node->local.finalized)\n+\t    cgraph_mark_needed_node (node);\n+\t  node->externally_visible = true;\n+\t}\n+    }\n+  for (vnode = cgraph_varpool_nodes; vnode != first_var; vnode = vnode->next)\n+    {\n+      tree decl = vnode->decl;\n+      if (lookup_attribute (\"used\", DECL_ATTRIBUTES (decl)))\n+\t{\n+\t  mark_decl_referenced (decl);\n+\t  if (vnode->finalized)\n+\t    cgraph_varpool_mark_needed_node (vnode);\n+\t}\n+      if (lookup_attribute (\"externally_visible\", DECL_ATTRIBUTES (decl)))\n+\t{\n+\t  if (vnode->finalized)\n+\t    cgraph_varpool_mark_needed_node (vnode);\n+\t  vnode->externally_visible = true;\n+\t}\n+    }\n+}\n+\n /* Analyze the whole compilation unit once it is parsed completely.  */\n \n void\n@@ -946,6 +1013,7 @@ cgraph_finalize_compilation_unit (void)\n   /* Keep track of already processed nodes when called multiple times for\n      intermodule optimization.  */\n   static struct cgraph_node *first_analyzed;\n+  static struct cgraph_varpool_node *first_analyzed_var;\n \n   finish_aliases_1 ();\n \n@@ -963,6 +1031,7 @@ cgraph_finalize_compilation_unit (void)\n     }\n \n   timevar_push (TV_CGRAPH);\n+  process_function_and_variable_attributes (first_analyzed, first_analyzed_var);\n   cgraph_varpool_analyze_pending_decls ();\n   if (cgraph_dump_file)\n     {\n@@ -1047,6 +1116,7 @@ cgraph_finalize_compilation_unit (void)\n       dump_cgraph (cgraph_dump_file);\n     }\n   first_analyzed = cgraph_nodes;\n+  first_analyzed_var = cgraph_varpool_nodes;\n   ggc_collect ();\n   timevar_pop (TV_CGRAPH);\n }"}, {"sha": "8e92c9bcb66afb979d86cad39b309c806d8df571", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b46cf78f852e82fb1f37ba271858b1f1040b3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b46cf78f852e82fb1f37ba271858b1f1040b3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=386b46cf78f852e82fb1f37ba271858b1f1040b3", "patch": "@@ -1,3 +1,10 @@\n+2006-07-24  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR c/25795\n+\tPR c++/27369\n+\t* gcc.dg/pr25795.c: New test.\n+\t* gcc.dg/pr25795-1.c: New test.\n+\n 2006-07-23  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.dg/fold-cond-1.c: Increase test case portability by checking"}, {"sha": "e568b25440e904c7e64daf5105c81c4bb07b5256", "filename": "gcc/testsuite/gcc.dg/pr25795-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b46cf78f852e82fb1f37ba271858b1f1040b3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr25795-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b46cf78f852e82fb1f37ba271858b1f1040b3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr25795-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr25795-1.c?ref=386b46cf78f852e82fb1f37ba271858b1f1040b3", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fwhole-program\" } */\n+/* { dg-final { scan-assembler-not \"mystr\" } } */\n+\n+\n+extern const char *mystr;       /* normally in a header */\n+const char *mystr;\n+main()\n+{\n+}"}, {"sha": "decbe54e39f231c3a6214d4ae8a4a9757d749340", "filename": "gcc/testsuite/gcc.dg/pr25795.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b46cf78f852e82fb1f37ba271858b1f1040b3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr25795.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b46cf78f852e82fb1f37ba271858b1f1040b3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr25795.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr25795.c?ref=386b46cf78f852e82fb1f37ba271858b1f1040b3", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fwhole-program\" } */\n+/* { dg-final { scan-assembler \"mystr\" } } */\n+\n+\n+extern const char *mystr;       /* normally in a header */\n+const char *mystr __attribute__ ((externally_visible));\n+main()\n+{\n+}"}]}