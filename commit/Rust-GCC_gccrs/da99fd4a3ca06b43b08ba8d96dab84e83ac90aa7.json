{"sha": "da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE5OWZkNGEzY2EwNmI0M2IwOGJhOGQ5NmRhYjg0ZTgzYWM5MGFhNw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-01-14T14:35:19Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-01-14T14:35:19Z"}, "message": "x86: Add -mindirect-branch=\n\nAdd -mindirect-branch= option to convert indirect call and jump to call\nand return thunks.  The default is 'keep', which keeps indirect call and\njump unmodified.  'thunk' converts indirect call and jump to call and\nreturn thunk.  'thunk-inline' converts indirect call and jump to inlined\ncall and return thunk.  'thunk-extern' converts indirect call and jump to\nexternal call and return thunk provided in a separate object file.  You\ncan control this behavior for a specific function by using the function\nattribute indirect_branch.\n\n2 kinds of thunks are geneated.  Memory thunk where the function address\nis at the top of the stack:\n\n__x86_indirect_thunk:\n\tcall L2\nL1:\n\tpause\n\tlfence\n\tjmp L1\nL2:\n\tlea 8(%rsp), %rsp|lea 4(%esp), %esp\n\tret\n\nIndirect jmp via memory, \"jmp mem\", is converted to\n\n\tpush memory\n\tjmp __x86_indirect_thunk\n\nIndirect call via memory, \"call mem\", is converted to\n\n\tjmp L2\nL1:\n\tpush [mem]\n\tjmp __x86_indirect_thunk\nL2:\n\tcall L1\n\nRegister thunk where the function address is in a register, reg:\n\n__x86_indirect_thunk_reg:\n\tcall\tL2\nL1:\n\tpause\n\tlfence\n\tjmp\tL1\nL2:\n\tmovq\t%reg, (%rsp)|movl    %reg, (%esp)\n\tret\n\nwhere reg is one of (r|e)ax, (r|e)dx, (r|e)cx, (r|e)bx, (r|e)si, (r|e)di,\n(r|e)bp, r8, r9, r10, r11, r12, r13, r14 and r15.\n\nIndirect jmp via register, \"jmp reg\", is converted to\n\n\tjmp __x86_indirect_thunk_reg\n\nIndirect call via register, \"call reg\", is converted to\n\n\tcall __x86_indirect_thunk_reg\n\ngcc/\n\n\t* config/i386/i386-opts.h (indirect_branch): New.\n\t* config/i386/i386-protos.h (ix86_output_indirect_jmp): Likewise.\n\t* config/i386/i386.c (ix86_using_red_zone): Disallow red-zone\n\twith local indirect jump when converting indirect call and jump.\n\t(ix86_set_indirect_branch_type): New.\n\t(ix86_set_current_function): Call ix86_set_indirect_branch_type.\n\t(indirectlabelno): New.\n\t(indirect_thunk_needed): Likewise.\n\t(indirect_thunk_bnd_needed): Likewise.\n\t(indirect_thunks_used): Likewise.\n\t(indirect_thunks_bnd_used): Likewise.\n\t(INDIRECT_LABEL): Likewise.\n\t(indirect_thunk_name): Likewise.\n\t(output_indirect_thunk): Likewise.\n\t(output_indirect_thunk_function): Likewise.\n\t(ix86_output_indirect_branch): Likewise.\n\t(ix86_output_indirect_jmp): Likewise.\n\t(ix86_code_end): Call output_indirect_thunk_function if needed.\n\t(ix86_output_call_insn): Call ix86_output_indirect_branch if\n\tneeded.\n\t(ix86_handle_fndecl_attribute): Handle indirect_branch.\n\t(ix86_attribute_table): Add indirect_branch.\n\t* config/i386/i386.h (machine_function): Add indirect_branch_type\n\tand has_local_indirect_jump.\n\t* config/i386/i386.md (indirect_jump): Set has_local_indirect_jump\n\tto true.\n\t(tablejump): Likewise.\n\t(*indirect_jump): Use ix86_output_indirect_jmp.\n\t(*tablejump_1): Likewise.\n\t(simple_return_indirect_internal): Likewise.\n\t* config/i386/i386.opt (mindirect-branch=): New option.\n\t(indirect_branch): New.\n\t(keep): Likewise.\n\t(thunk): Likewise.\n\t(thunk-inline): Likewise.\n\t(thunk-extern): Likewise.\n\t* doc/extend.texi: Document indirect_branch function attribute.\n\t* doc/invoke.texi: Document -mindirect-branch= option.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/indirect-thunk-1.c: New test.\n\t* gcc.target/i386/indirect-thunk-2.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-3.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-4.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-5.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-6.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-7.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-1.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-2.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-3.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-4.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-5.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-6.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-7.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-8.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-bnd-1.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-bnd-2.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-bnd-3.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-bnd-4.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-extern-1.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-extern-2.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-extern-3.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-extern-4.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-extern-5.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-extern-6.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-extern-7.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-inline-1.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-inline-2.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-inline-3.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-inline-4.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-inline-5.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-inline-6.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-inline-7.c: Likewise.\n\nFrom-SVN: r256660", "tree": {"sha": "8fdb3330633e4c8d2e0399ebd851bee095f1ae05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fdb3330633e4c8d2e0399ebd851bee095f1ae05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f05a4f0727bac6f4456fbbecdc1315cc8bd59cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f05a4f0727bac6f4456fbbecdc1315cc8bd59cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f05a4f0727bac6f4456fbbecdc1315cc8bd59cf"}], "stats": {"total": 1590, "additions": 1571, "deletions": 19}, "files": [{"sha": "46c4881f7fcb28e5ab5f7091cf16466d30d0086f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -1,3 +1,44 @@\n+2018-01-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386-opts.h (indirect_branch): New.\n+\t* config/i386/i386-protos.h (ix86_output_indirect_jmp): Likewise.\n+\t* config/i386/i386.c (ix86_using_red_zone): Disallow red-zone\n+\twith local indirect jump when converting indirect call and jump.\n+\t(ix86_set_indirect_branch_type): New.\n+\t(ix86_set_current_function): Call ix86_set_indirect_branch_type.\n+\t(indirectlabelno): New.\n+\t(indirect_thunk_needed): Likewise.\n+\t(indirect_thunk_bnd_needed): Likewise.\n+\t(indirect_thunks_used): Likewise.\n+\t(indirect_thunks_bnd_used): Likewise.\n+\t(INDIRECT_LABEL): Likewise.\n+\t(indirect_thunk_name): Likewise.\n+\t(output_indirect_thunk): Likewise.\n+\t(output_indirect_thunk_function): Likewise.\n+\t(ix86_output_indirect_branch): Likewise.\n+\t(ix86_output_indirect_jmp): Likewise.\n+\t(ix86_code_end): Call output_indirect_thunk_function if needed.\n+\t(ix86_output_call_insn): Call ix86_output_indirect_branch if\n+\tneeded.\n+\t(ix86_handle_fndecl_attribute): Handle indirect_branch.\n+\t(ix86_attribute_table): Add indirect_branch.\n+\t* config/i386/i386.h (machine_function): Add indirect_branch_type\n+\tand has_local_indirect_jump.\n+\t* config/i386/i386.md (indirect_jump): Set has_local_indirect_jump\n+\tto true.\n+\t(tablejump): Likewise.\n+\t(*indirect_jump): Use ix86_output_indirect_jmp.\n+\t(*tablejump_1): Likewise.\n+\t(simple_return_indirect_internal): Likewise.\n+\t* config/i386/i386.opt (mindirect-branch=): New option.\n+\t(indirect_branch): New.\n+\t(keep): Likewise.\n+\t(thunk): Likewise.\n+\t(thunk-inline): Likewise.\n+\t(thunk-extern): Likewise.\n+\t* doc/extend.texi: Document indirect_branch function attribute.\n+\t* doc/invoke.texi: Document -mindirect-branch= option.\n+\n 2018-01-14  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/83051"}, {"sha": "46366cbfa725b55d36f5159cab3cfb8a037e0d3c", "filename": "gcc/config/i386/i386-opts.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Fconfig%2Fi386%2Fi386-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Fconfig%2Fi386%2Fi386-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-opts.h?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -106,4 +106,17 @@ enum prefer_vector_width {\n     PVW_AVX512\n };\n \n+/* This is used to mitigate variant #2 of the speculative execution\n+   vulnerabilities on x86 processors identified by CVE-2017-5715, aka\n+   Spectre.  They convert indirect branches and function returns to\n+   call and return thunks to avoid speculative execution via indirect\n+   call, jmp and ret.  */\n+enum indirect_branch {\n+  indirect_branch_unset = 0,\n+  indirect_branch_keep,\n+  indirect_branch_thunk,\n+  indirect_branch_thunk_inline,\n+  indirect_branch_thunk_extern\n+};\n+\n #endif"}, {"sha": "bf11cc426f946672fbefb617548f61d55cf70b8c", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -305,6 +305,7 @@ extern enum attr_cpu ix86_schedule;\n #endif\n \n extern const char * ix86_output_call_insn (rtx_insn *insn, rtx call_op);\n+extern const char * ix86_output_indirect_jmp (rtx call_op, bool ret_p);\n extern bool ix86_operands_ok_for_move_multiple (rtx *operands, bool load,\n \t\t\t\t\t\tmachine_mode mode);\n extern int ix86_min_insn_size (rtx_insn *);"}, {"sha": "ab022d23fedfd4f58e32f4dce066e2cef0874a28", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 636, "deletions": 12, "changes": 648, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -2724,12 +2724,23 @@ make_pass_insert_endbranch (gcc::context *ctxt)\n   return new pass_insert_endbranch (ctxt);\n }\n \n-/* Return true if a red-zone is in use.  */\n+/* Return true if a red-zone is in use.  We can't use red-zone when\n+   there are local indirect jumps, like \"indirect_jump\" or \"tablejump\",\n+   which jumps to another place in the function, since \"call\" in the\n+   indirect thunk pushes the return address onto stack, destroying\n+   red-zone.\n+\n+   TODO: If we can reserve the first 2 WORDs, for PUSH and, another\n+   for CALL, in red-zone, we can allow local indirect jumps with\n+   indirect thunk.  */\n \n bool\n ix86_using_red_zone (void)\n {\n-  return TARGET_RED_ZONE && !TARGET_64BIT_MS_ABI;\n+  return (TARGET_RED_ZONE\n+\t  && !TARGET_64BIT_MS_ABI\n+\t  && (!cfun->machine->has_local_indirect_jump\n+\t      || cfun->machine->indirect_branch_type == indirect_branch_keep));\n }\n \f\n /* Return a string that documents the current -m options.  The caller is\n@@ -5802,6 +5813,37 @@ ix86_set_func_type (tree fndecl)\n     }\n }\n \n+/* Set the indirect_branch_type field from the function FNDECL.  */\n+\n+static void\n+ix86_set_indirect_branch_type (tree fndecl)\n+{\n+  if (cfun->machine->indirect_branch_type == indirect_branch_unset)\n+    {\n+      tree attr = lookup_attribute (\"indirect_branch\",\n+\t\t\t\t    DECL_ATTRIBUTES (fndecl));\n+      if (attr != NULL)\n+\t{\n+\t  tree args = TREE_VALUE (attr);\n+\t  if (args == NULL)\n+\t    gcc_unreachable ();\n+\t  tree cst = TREE_VALUE (args);\n+\t  if (strcmp (TREE_STRING_POINTER (cst), \"keep\") == 0)\n+\t    cfun->machine->indirect_branch_type = indirect_branch_keep;\n+\t  else if (strcmp (TREE_STRING_POINTER (cst), \"thunk\") == 0)\n+\t    cfun->machine->indirect_branch_type = indirect_branch_thunk;\n+\t  else if (strcmp (TREE_STRING_POINTER (cst), \"thunk-inline\") == 0)\n+\t    cfun->machine->indirect_branch_type = indirect_branch_thunk_inline;\n+\t  else if (strcmp (TREE_STRING_POINTER (cst), \"thunk-extern\") == 0)\n+\t    cfun->machine->indirect_branch_type = indirect_branch_thunk_extern;\n+\t  else\n+\t    gcc_unreachable ();\n+\t}\n+      else\n+\tcfun->machine->indirect_branch_type = ix86_indirect_branch;\n+    }\n+}\n+\n /* Establish appropriate back-end context for processing the function\n    FNDECL.  The argument might be NULL to indicate processing at top\n    level, outside of any function scope.  */\n@@ -5817,7 +5859,10 @@ ix86_set_current_function (tree fndecl)\n \t one is extern inline and one isn't.  Call ix86_set_func_type\n \t to set the func_type field.  */\n       if (fndecl != NULL_TREE)\n-\tix86_set_func_type (fndecl);\n+\t{\n+\t  ix86_set_func_type (fndecl);\n+\t  ix86_set_indirect_branch_type (fndecl);\n+\t}\n       return;\n     }\n \n@@ -5837,6 +5882,7 @@ ix86_set_current_function (tree fndecl)\n     }\n \n   ix86_set_func_type (fndecl);\n+  ix86_set_indirect_branch_type (fndecl);\n \n   tree new_tree = DECL_FUNCTION_SPECIFIC_TARGET (fndecl);\n   if (new_tree == NULL_TREE)\n@@ -10644,6 +10690,220 @@ ix86_setup_frame_addresses (void)\n # endif\n #endif\n \n+/* Label count for call and return thunks.  It is used to make unique\n+   labels in call and return thunks.  */\n+static int indirectlabelno;\n+\n+/* True if call and return thunk functions are needed.  */\n+static bool indirect_thunk_needed = false;\n+/* True if call and return thunk functions with the BND prefix are\n+   needed.  */\n+static bool indirect_thunk_bnd_needed = false;\n+\n+/* Bit masks of integer registers, which contain branch target, used\n+   by call and return thunks functions.  */\n+static int indirect_thunks_used;\n+/* Bit masks of integer registers, which contain branch target, used\n+   by call and return thunks functions with the BND prefix.  */\n+static int indirect_thunks_bnd_used;\n+\n+#ifndef INDIRECT_LABEL\n+# define INDIRECT_LABEL \"LIND\"\n+#endif\n+\n+/* Fills in the label name that should be used for the indirect thunk.  */\n+\n+static void\n+indirect_thunk_name (char name[32], int regno, bool need_bnd_p)\n+{\n+  if (USE_HIDDEN_LINKONCE)\n+    {\n+      const char *bnd = need_bnd_p ? \"_bnd\" : \"\";\n+      if (regno >= 0)\n+\t{\n+\t  const char *reg_prefix;\n+\t  if (LEGACY_INT_REGNO_P (regno))\n+\t    reg_prefix = TARGET_64BIT ? \"r\" : \"e\";\n+\t  else\n+\t    reg_prefix = \"\";\n+\t  sprintf (name, \"__x86_indirect_thunk%s_%s%s\",\n+\t\t   bnd, reg_prefix, reg_names[regno]);\n+\t}\n+      else\n+\tsprintf (name, \"__x86_indirect_thunk%s\", bnd);\n+    }\n+  else\n+    {\n+      if (regno >= 0)\n+\t{\n+\t  if (need_bnd_p)\n+\t    ASM_GENERATE_INTERNAL_LABEL (name, \"LITBR\", regno);\n+\t  else\n+\t    ASM_GENERATE_INTERNAL_LABEL (name, \"LITR\", regno);\n+\t}\n+      else\n+\t{\n+\t  if (need_bnd_p)\n+\t    ASM_GENERATE_INTERNAL_LABEL (name, \"LITB\", 0);\n+\t  else\n+\t    ASM_GENERATE_INTERNAL_LABEL (name, \"LIT\", 0);\n+\t}\n+    }\n+}\n+\n+/* Output a call and return thunk for indirect branch.  If BND_P is\n+   true, the BND prefix is needed.   If REGNO != -1,  the function\n+   address is in REGNO and the call and return thunk looks like:\n+\n+\tcall\tL2\n+   L1:\n+\tpause\n+\tjmp\tL1\n+   L2:\n+\tmov\t%REG, (%sp)\n+\tret\n+\n+   Otherwise, the function address is on the top of stack and the\n+   call and return thunk looks like:\n+\n+\tcall L2\n+  L1:\n+\tpause\n+\tjmp L1\n+  L2:\n+\tlea WORD_SIZE(%sp), %sp\n+\tret\n+ */\n+\n+static void\n+output_indirect_thunk (bool need_bnd_p, int regno)\n+{\n+  char indirectlabel1[32];\n+  char indirectlabel2[32];\n+\n+  ASM_GENERATE_INTERNAL_LABEL (indirectlabel1, INDIRECT_LABEL,\n+\t\t\t       indirectlabelno++);\n+  ASM_GENERATE_INTERNAL_LABEL (indirectlabel2, INDIRECT_LABEL,\n+\t\t\t       indirectlabelno++);\n+\n+  /* Call */\n+  if (need_bnd_p)\n+    fputs (\"\\tbnd call\\t\", asm_out_file);\n+  else\n+    fputs (\"\\tcall\\t\", asm_out_file);\n+  assemble_name_raw (asm_out_file, indirectlabel2);\n+  fputc ('\\n', asm_out_file);\n+\n+  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, indirectlabel1);\n+\n+  /* Pause + lfence.  */\n+  fprintf (asm_out_file, \"\\tpause\\n\\tlfence\\n\");\n+\n+  /* Jump.  */\n+  fputs (\"\\tjmp\\t\", asm_out_file);\n+  assemble_name_raw (asm_out_file, indirectlabel1);\n+  fputc ('\\n', asm_out_file);\n+\n+  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, indirectlabel2);\n+\n+  if (regno >= 0)\n+    {\n+      /* MOV.  */\n+      rtx xops[2];\n+      xops[0] = gen_rtx_MEM (word_mode, stack_pointer_rtx);\n+      xops[1] = gen_rtx_REG (word_mode, regno);\n+      output_asm_insn (\"mov\\t{%1, %0|%0, %1}\", xops);\n+    }\n+  else\n+    {\n+      /* LEA.  */\n+      rtx xops[2];\n+      xops[0] = stack_pointer_rtx;\n+      xops[1] = plus_constant (Pmode, stack_pointer_rtx, UNITS_PER_WORD);\n+      output_asm_insn (\"lea\\t{%E1, %0|%0, %E1}\", xops);\n+    }\n+\n+  if (need_bnd_p)\n+    fputs (\"\\tbnd ret\\n\", asm_out_file);\n+  else\n+    fputs (\"\\tret\\n\", asm_out_file);\n+}\n+\n+/* Output a funtion with a call and return thunk for indirect branch.\n+   If BND_P is true, the BND prefix is needed.   If REGNO != -1,  the\n+   function address is in REGNO.  Otherwise, the function address is\n+   on the top of stack.  */\n+\n+static void\n+output_indirect_thunk_function (bool need_bnd_p, int regno)\n+{\n+  char name[32];\n+  tree decl;\n+\n+  /* Create __x86_indirect_thunk/__x86_indirect_thunk_bnd.  */\n+  indirect_thunk_name (name, regno, need_bnd_p);\n+  decl = build_decl (BUILTINS_LOCATION, FUNCTION_DECL,\n+\t\t     get_identifier (name),\n+\t\t     build_function_type_list (void_type_node, NULL_TREE));\n+  DECL_RESULT (decl) = build_decl (BUILTINS_LOCATION, RESULT_DECL,\n+\t\t\t\t   NULL_TREE, void_type_node);\n+  TREE_PUBLIC (decl) = 1;\n+  TREE_STATIC (decl) = 1;\n+  DECL_IGNORED_P (decl) = 1;\n+\n+#if TARGET_MACHO\n+  if (TARGET_MACHO)\n+    {\n+      switch_to_section (darwin_sections[picbase_thunk_section]);\n+      fputs (\"\\t.weak_definition\\t\", asm_out_file);\n+      assemble_name (asm_out_file, name);\n+      fputs (\"\\n\\t.private_extern\\t\", asm_out_file);\n+      assemble_name (asm_out_file, name);\n+      putc ('\\n', asm_out_file);\n+      ASM_OUTPUT_LABEL (asm_out_file, name);\n+      DECL_WEAK (decl) = 1;\n+    }\n+  else\n+#endif\n+    if (USE_HIDDEN_LINKONCE)\n+      {\n+\tcgraph_node::create (decl)->set_comdat_group (DECL_ASSEMBLER_NAME (decl));\n+\n+\ttargetm.asm_out.unique_section (decl, 0);\n+\tswitch_to_section (get_named_section (decl, NULL, 0));\n+\n+\ttargetm.asm_out.globalize_label (asm_out_file, name);\n+\tfputs (\"\\t.hidden\\t\", asm_out_file);\n+\tassemble_name (asm_out_file, name);\n+\tputc ('\\n', asm_out_file);\n+\tASM_DECLARE_FUNCTION_NAME (asm_out_file, name, decl);\n+      }\n+    else\n+      {\n+\tswitch_to_section (text_section);\n+\tASM_OUTPUT_LABEL (asm_out_file, name);\n+      }\n+\n+  DECL_INITIAL (decl) = make_node (BLOCK);\n+  current_function_decl = decl;\n+  allocate_struct_function (decl, false);\n+  init_function_start (decl);\n+  /* We're about to hide the function body from callees of final_* by\n+     emitting it directly; tell them we're a thunk, if they care.  */\n+  cfun->is_thunk = true;\n+  first_function_block_is_cold = false;\n+  /* Make sure unwind info is emitted for the thunk if needed.  */\n+  final_start_function (emit_barrier (), asm_out_file, 1);\n+\n+  output_indirect_thunk (need_bnd_p, regno);\n+\n+  final_end_function ();\n+  init_insn_lengths ();\n+  free_after_compilation (cfun);\n+  set_cfun (NULL);\n+  current_function_decl = NULL;\n+}\n+\n static int pic_labels_used;\n \n /* Fills in the label name that should be used for a pc thunk for\n@@ -10670,11 +10930,32 @@ ix86_code_end (void)\n   rtx xops[2];\n   int regno;\n \n+  if (indirect_thunk_needed)\n+    output_indirect_thunk_function (false, -1);\n+  if (indirect_thunk_bnd_needed)\n+    output_indirect_thunk_function (true, -1);\n+\n+  for (regno = FIRST_REX_INT_REG; regno <= LAST_REX_INT_REG; regno++)\n+    {\n+      int i = regno - FIRST_REX_INT_REG + LAST_INT_REG + 1;\n+      if ((indirect_thunks_used & (1 << i)))\n+\toutput_indirect_thunk_function (false, regno);\n+\n+      if ((indirect_thunks_bnd_used & (1 << i)))\n+\toutput_indirect_thunk_function (true, regno);\n+    }\n+\n   for (regno = FIRST_INT_REG; regno <= LAST_INT_REG; regno++)\n     {\n       char name[32];\n       tree decl;\n \n+      if ((indirect_thunks_used & (1 << regno)))\n+\toutput_indirect_thunk_function (false, regno);\n+\n+      if ((indirect_thunks_bnd_used & (1 << regno)))\n+\toutput_indirect_thunk_function (true, regno);\n+\n       if (!(pic_labels_used & (1 << regno)))\n \tcontinue;\n \n@@ -28155,12 +28436,292 @@ ix86_nopic_noplt_attribute_p (rtx call_op)\n   return false;\n }\n \n+/* Output indirect branch via a call and return thunk.  CALL_OP is a\n+   register which contains the branch target.  XASM is the assembly\n+   template for CALL_OP.  Branch is a tail call if SIBCALL_P is true.\n+   A normal call is converted to:\n+\n+\tcall __x86_indirect_thunk_reg\n+\n+   and a tail call is converted to:\n+\n+\tjmp __x86_indirect_thunk_reg\n+ */\n+\n+static void\n+ix86_output_indirect_branch_via_reg (rtx call_op, bool sibcall_p)\n+{\n+  char thunk_name_buf[32];\n+  char *thunk_name;\n+  bool need_bnd_p = ix86_bnd_prefixed_insn_p (current_output_insn);\n+  int regno = REGNO (call_op);\n+\n+  if (cfun->machine->indirect_branch_type\n+      != indirect_branch_thunk_inline)\n+    {\n+      if (cfun->machine->indirect_branch_type == indirect_branch_thunk)\n+\t{\n+\t  int i = regno;\n+\t  if (i >= FIRST_REX_INT_REG)\n+\t    i -= (FIRST_REX_INT_REG - LAST_INT_REG - 1);\n+\t  if (need_bnd_p)\n+\t    indirect_thunks_bnd_used |= 1 << i;\n+\t  else\n+\t    indirect_thunks_used |= 1 << i;\n+\t}\n+      indirect_thunk_name (thunk_name_buf, regno, need_bnd_p);\n+      thunk_name = thunk_name_buf;\n+    }\n+  else\n+    thunk_name = NULL;\n+\n+  if (sibcall_p)\n+    {\n+      if (thunk_name != NULL)\n+\t{\n+\t  if (need_bnd_p)\n+\t    fprintf (asm_out_file, \"\\tbnd jmp\\t%s\\n\", thunk_name);\n+\t  else\n+\t    fprintf (asm_out_file, \"\\tjmp\\t%s\\n\", thunk_name);\n+\t}\n+      else\n+\toutput_indirect_thunk (need_bnd_p, regno);\n+    }\n+  else\n+    {\n+      if (thunk_name != NULL)\n+\t{\n+\t  if (need_bnd_p)\n+\t    fprintf (asm_out_file, \"\\tbnd call\\t%s\\n\", thunk_name);\n+\t  else\n+\t    fprintf (asm_out_file, \"\\tcall\\t%s\\n\", thunk_name);\n+\t  return;\n+\t}\n+\n+      char indirectlabel1[32];\n+      char indirectlabel2[32];\n+\n+      ASM_GENERATE_INTERNAL_LABEL (indirectlabel1,\n+\t\t\t\t   INDIRECT_LABEL,\n+\t\t\t\t   indirectlabelno++);\n+      ASM_GENERATE_INTERNAL_LABEL (indirectlabel2,\n+\t\t\t\t   INDIRECT_LABEL,\n+\t\t\t\t   indirectlabelno++);\n+\n+      /* Jump.  */\n+      if (need_bnd_p)\n+\tfputs (\"\\tbnd jmp\\t\", asm_out_file);\n+      else\n+\tfputs (\"\\tjmp\\t\", asm_out_file);\n+      assemble_name_raw (asm_out_file, indirectlabel2);\n+      fputc ('\\n', asm_out_file);\n+\n+      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, indirectlabel1);\n+\n+      if (thunk_name != NULL)\n+\t{\n+\t  if (need_bnd_p)\n+\t    fprintf (asm_out_file, \"\\tbnd jmp\\t%s\\n\", thunk_name);\n+\t  else\n+\t    fprintf (asm_out_file, \"\\tjmp\\t%s\\n\", thunk_name);\n+\t}\n+      else\n+\toutput_indirect_thunk (need_bnd_p, regno);\n+\n+      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, indirectlabel2);\n+\n+      /* Call.  */\n+      if (need_bnd_p)\n+\tfputs (\"\\tbnd call\\t\", asm_out_file);\n+      else\n+\tfputs (\"\\tcall\\t\", asm_out_file);\n+      assemble_name_raw (asm_out_file, indirectlabel1);\n+      fputc ('\\n', asm_out_file);\n+    }\n+}\n+\n+/* Output indirect branch via a call and return thunk.  CALL_OP is\n+   the branch target.  XASM is the assembly template for CALL_OP.\n+   Branch is a tail call if SIBCALL_P is true.  A normal call is\n+   converted to:\n+\n+\tjmp L2\n+   L1:\n+\tpush CALL_OP\n+\tjmp __x86_indirect_thunk\n+   L2:\n+\tcall L1\n+\n+   and a tail call is converted to:\n+\n+\tpush CALL_OP\n+\tjmp __x86_indirect_thunk\n+ */\n+\n+static void\n+ix86_output_indirect_branch_via_push (rtx call_op, const char *xasm,\n+\t\t\t\t      bool sibcall_p)\n+{\n+  char thunk_name_buf[32];\n+  char *thunk_name;\n+  char push_buf[64];\n+  bool need_bnd_p = ix86_bnd_prefixed_insn_p (current_output_insn);\n+  int regno = -1;\n+\n+  if (cfun->machine->indirect_branch_type\n+      != indirect_branch_thunk_inline)\n+    {\n+      if (cfun->machine->indirect_branch_type == indirect_branch_thunk)\n+\t{\n+\t  if (need_bnd_p)\n+\t    indirect_thunk_bnd_needed = true;\n+\t  else\n+\t    indirect_thunk_needed = true;\n+\t}\n+      indirect_thunk_name (thunk_name_buf, regno, need_bnd_p);\n+      thunk_name = thunk_name_buf;\n+    }\n+  else\n+    thunk_name = NULL;\n+\n+  snprintf (push_buf, sizeof (push_buf), \"push{%c}\\t%s\",\n+\t    TARGET_64BIT ? 'q' : 'l', xasm);\n+\n+  if (sibcall_p)\n+    {\n+      output_asm_insn (push_buf, &call_op);\n+      if (thunk_name != NULL)\n+\t{\n+\t  if (need_bnd_p)\n+\t    fprintf (asm_out_file, \"\\tbnd jmp\\t%s\\n\", thunk_name);\n+\t  else\n+\t    fprintf (asm_out_file, \"\\tjmp\\t%s\\n\", thunk_name);\n+\t}\n+      else\n+\toutput_indirect_thunk (need_bnd_p, regno);\n+    }\n+  else\n+    {\n+      char indirectlabel1[32];\n+      char indirectlabel2[32];\n+\n+      ASM_GENERATE_INTERNAL_LABEL (indirectlabel1,\n+\t\t\t\t   INDIRECT_LABEL,\n+\t\t\t\t   indirectlabelno++);\n+      ASM_GENERATE_INTERNAL_LABEL (indirectlabel2,\n+\t\t\t\t   INDIRECT_LABEL,\n+\t\t\t\t   indirectlabelno++);\n+\n+      /* Jump.  */\n+      if (need_bnd_p)\n+\tfputs (\"\\tbnd jmp\\t\", asm_out_file);\n+      else\n+\tfputs (\"\\tjmp\\t\", asm_out_file);\n+      assemble_name_raw (asm_out_file, indirectlabel2);\n+      fputc ('\\n', asm_out_file);\n+\n+      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, indirectlabel1);\n+\n+      /* An external function may be called via GOT, instead of PLT.  */\n+      if (MEM_P (call_op))\n+\t{\n+\t  struct ix86_address parts;\n+\t  rtx addr = XEXP (call_op, 0);\n+\t  if (ix86_decompose_address (addr, &parts)\n+\t      && parts.base == stack_pointer_rtx)\n+\t    {\n+\t      /* Since call will adjust stack by -UNITS_PER_WORD,\n+\t\t we must convert \"disp(stack, index, scale)\" to\n+\t\t \"disp+UNITS_PER_WORD(stack, index, scale)\".  */\n+\t      if (parts.index)\n+\t\t{\n+\t\t  addr = gen_rtx_MULT (Pmode, parts.index,\n+\t\t\t\t       GEN_INT (parts.scale));\n+\t\t  addr = gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n+\t\t\t\t       addr);\n+\t\t}\n+\t      else\n+\t\taddr = stack_pointer_rtx;\n+\n+\t      rtx disp;\n+\t      if (parts.disp != NULL_RTX)\n+\t\tdisp = plus_constant (Pmode, parts.disp,\n+\t\t\t\t      UNITS_PER_WORD);\n+\t      else\n+\t\tdisp = GEN_INT (UNITS_PER_WORD);\n+\n+\t      addr = gen_rtx_PLUS (Pmode, addr, disp);\n+\t      call_op = gen_rtx_MEM (GET_MODE (call_op), addr);\n+\t    }\n+\t}\n+\n+      output_asm_insn (push_buf, &call_op);\n+\n+      if (thunk_name != NULL)\n+\t{\n+\t  if (need_bnd_p)\n+\t    fprintf (asm_out_file, \"\\tbnd jmp\\t%s\\n\", thunk_name);\n+\t  else\n+\t    fprintf (asm_out_file, \"\\tjmp\\t%s\\n\", thunk_name);\n+\t}\n+      else\n+\toutput_indirect_thunk (need_bnd_p, regno);\n+\n+      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, indirectlabel2);\n+\n+      /* Call.  */\n+      if (need_bnd_p)\n+\tfputs (\"\\tbnd call\\t\", asm_out_file);\n+      else\n+\tfputs (\"\\tcall\\t\", asm_out_file);\n+      assemble_name_raw (asm_out_file, indirectlabel1);\n+      fputc ('\\n', asm_out_file);\n+    }\n+}\n+\n+/* Output indirect branch via a call and return thunk.  CALL_OP is\n+   the branch target.  XASM is the assembly template for CALL_OP.\n+   Branch is a tail call if SIBCALL_P is true.   */\n+\n+static void\n+ix86_output_indirect_branch (rtx call_op, const char *xasm,\n+\t\t\t     bool sibcall_p)\n+{\n+  if (REG_P (call_op))\n+    ix86_output_indirect_branch_via_reg (call_op, sibcall_p);\n+  else\n+    ix86_output_indirect_branch_via_push (call_op, xasm, sibcall_p);\n+}\n+/* Output indirect jump.  CALL_OP is the jump target.  Jump is a\n+   function return if RET_P is true.  */\n+\n+const char *\n+ix86_output_indirect_jmp (rtx call_op, bool ret_p)\n+{\n+  if (cfun->machine->indirect_branch_type != indirect_branch_keep)\n+    {\n+      /* We can't have red-zone if this isn't a function return since\n+\t \"call\" in the indirect thunk pushes the return address onto\n+\t stack, destroying red-zone.  */\n+      if (!ret_p && ix86_red_zone_size != 0)\n+\tgcc_unreachable ();\n+\n+      ix86_output_indirect_branch (call_op, \"%0\", true);\n+      return \"\";\n+    }\n+  else\n+    return \"%!jmp\\t%A0\";\n+}\n+\n /* Output the assembly for a call instruction.  */\n \n const char *\n ix86_output_call_insn (rtx_insn *insn, rtx call_op)\n {\n   bool direct_p = constant_call_address_operand (call_op, VOIDmode);\n+  bool output_indirect_p\n+    = (!TARGET_SEH\n+       && cfun->machine->indirect_branch_type != indirect_branch_keep);\n   bool seh_nop_p = false;\n   const char *xasm;\n \n@@ -28170,10 +28731,21 @@ ix86_output_call_insn (rtx_insn *insn, rtx call_op)\n \t{\n \t  if (ix86_nopic_noplt_attribute_p (call_op))\n \t    {\n+\t      direct_p = false;\n \t      if (TARGET_64BIT)\n-\t\txasm = \"%!jmp\\t{*%p0@GOTPCREL(%%rip)|[QWORD PTR %p0@GOTPCREL[rip]]}\";\n+\t\t{\n+\t\t  if (output_indirect_p)\n+\t\t    xasm = \"{%p0@GOTPCREL(%%rip)|[QWORD PTR %p0@GOTPCREL[rip]]}\";\n+\t\t  else\n+\t\t    xasm = \"%!jmp\\t{*%p0@GOTPCREL(%%rip)|[QWORD PTR %p0@GOTPCREL[rip]]}\";\n+\t\t}\n \t      else\n-\t\txasm = \"%!jmp\\t{*%p0@GOT|[DWORD PTR %p0@GOT]}\";\n+\t\t{\n+\t\t  if (output_indirect_p)\n+\t\t    xasm = \"{%p0@GOT|[DWORD PTR %p0@GOT]}\";\n+\t\t  else\n+\t\t    xasm = \"%!jmp\\t{*%p0@GOT|[DWORD PTR %p0@GOT]}\";\n+\t\t}\n \t    }\n \t  else\n \t    xasm = \"%!jmp\\t%P0\";\n@@ -28183,9 +28755,17 @@ ix86_output_call_insn (rtx_insn *insn, rtx call_op)\n       else if (TARGET_SEH)\n \txasm = \"%!rex.W jmp\\t%A0\";\n       else\n-\txasm = \"%!jmp\\t%A0\";\n+\t{\n+\t  if (output_indirect_p)\n+\t    xasm = \"%0\";\n+\t  else\n+\t    xasm = \"%!jmp\\t%A0\";\n+\t}\n \n-      output_asm_insn (xasm, &call_op);\n+      if (output_indirect_p && !direct_p)\n+\tix86_output_indirect_branch (call_op, xasm, true);\n+      else\n+\toutput_asm_insn (xasm, &call_op);\n       return \"\";\n     }\n \n@@ -28223,18 +28803,37 @@ ix86_output_call_insn (rtx_insn *insn, rtx call_op)\n     {\n       if (ix86_nopic_noplt_attribute_p (call_op))\n \t{\n+\t  direct_p = false;\n \t  if (TARGET_64BIT)\n-\t    xasm = \"%!call\\t{*%p0@GOTPCREL(%%rip)|[QWORD PTR %p0@GOTPCREL[rip]]}\";\n+\t    {\n+\t      if (output_indirect_p)\n+\t\txasm = \"{%p0@GOTPCREL(%%rip)|[QWORD PTR %p0@GOTPCREL[rip]]}\";\n+\t      else\n+\t\txasm = \"%!call\\t{*%p0@GOTPCREL(%%rip)|[QWORD PTR %p0@GOTPCREL[rip]]}\";\n+\t    }\n \t  else\n-\t    xasm = \"%!call\\t{*%p0@GOT|[DWORD PTR %p0@GOT]}\";\n+\t    {\n+\t      if (output_indirect_p)\n+\t\txasm = \"{%p0@GOT|[DWORD PTR %p0@GOT]}\";\n+\t      else\n+\t\txasm = \"%!call\\t{*%p0@GOT|[DWORD PTR %p0@GOT]}\";\n+\t    }\n \t}\n       else\n \txasm = \"%!call\\t%P0\";\n     }\n   else\n-    xasm = \"%!call\\t%A0\";\n+    {\n+      if (output_indirect_p)\n+\txasm = \"%0\";\n+      else\n+\txasm = \"%!call\\t%A0\";\n+    }\n \n-  output_asm_insn (xasm, &call_op);\n+  if (output_indirect_p && !direct_p)\n+    ix86_output_indirect_branch (call_op, xasm, false);\n+  else\n+    output_asm_insn (xasm, &call_op);\n \n   if (seh_nop_p)\n     return \"nop\";\n@@ -40392,7 +40991,7 @@ ix86_handle_struct_attribute (tree *node, tree name, tree, int,\n }\n \n static tree\n-ix86_handle_fndecl_attribute (tree *node, tree name, tree, int,\n+ix86_handle_fndecl_attribute (tree *node, tree name, tree args, int,\n \t\t\t      bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n@@ -40401,6 +41000,29 @@ ix86_handle_fndecl_attribute (tree *node, tree name, tree, int,\n                name);\n       *no_add_attrs = true;\n     }\n+\n+  if (is_attribute_p (\"indirect_branch\", name))\n+    {\n+      tree cst = TREE_VALUE (args);\n+      if (TREE_CODE (cst) != STRING_CST)\n+\t{\n+\t  warning (OPT_Wattributes,\n+\t\t   \"%qE attribute requires a string constant argument\",\n+\t\t   name);\n+\t  *no_add_attrs = true;\n+\t}\n+      else if (strcmp (TREE_STRING_POINTER (cst), \"keep\") != 0\n+\t       && strcmp (TREE_STRING_POINTER (cst), \"thunk\") != 0\n+\t       && strcmp (TREE_STRING_POINTER (cst), \"thunk-inline\") != 0\n+\t       && strcmp (TREE_STRING_POINTER (cst), \"thunk-extern\") != 0)\n+\t{\n+\t  warning (OPT_Wattributes,\n+\t\t   \"argument to %qE attribute is not \"\n+\t\t   \"(keep|thunk|thunk-inline|thunk-extern)\", name);\n+\t  *no_add_attrs = true;\n+\t}\n+    }\n+\n   return NULL_TREE;\n }\n \n@@ -44847,6 +45469,8 @@ static const struct attribute_spec ix86_attribute_table[] =\n     ix86_handle_no_caller_saved_registers_attribute, NULL },\n   { \"naked\", 0, 0, true, false, false, false,\n     ix86_handle_fndecl_attribute, NULL },\n+  { \"indirect_branch\", 1, 1, true, false, false, false,\n+    ix86_handle_fndecl_attribute, NULL },\n \n   /* End element.  */\n   { NULL, 0, 0, false, false, false, false, NULL, NULL }"}, {"sha": "3b939086112d1f91273f47765cc94ea18d04aa0c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -2570,6 +2570,13 @@ struct GTY(()) machine_function {\n   /* Function type.  */\n   ENUM_BITFIELD(function_type) func_type : 2;\n \n+  /* How to generate indirec branch.  */\n+  ENUM_BITFIELD(indirect_branch) indirect_branch_type : 3;\n+\n+  /* If true, the current function has local indirect jumps, like\n+     \"indirect_jump\" or \"tablejump\".  */\n+  BOOL_BITFIELD has_local_indirect_jump : 1;\n+\n   /* If true, the current function is a function specified with\n      the \"interrupt\" or \"no_caller_saved_registers\" attribute.  */\n   BOOL_BITFIELD no_caller_saved_registers : 1;"}, {"sha": "1ba144da87e28caf40cbd6fa4cdf84b88d146671", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -12313,13 +12313,18 @@\n {\n   if (TARGET_X32)\n     operands[0] = convert_memory_address (word_mode, operands[0]);\n+  cfun->machine->has_local_indirect_jump = true;\n })\n \n (define_insn \"*indirect_jump\"\n   [(set (pc) (match_operand:W 0 \"indirect_branch_operand\" \"rBw\"))]\n   \"\"\n-  \"%!jmp\\t%A0\"\n-  [(set_attr \"type\" \"ibr\")\n+  \"* return ix86_output_indirect_jmp (operands[0], false);\"\n+  [(set (attr \"type\")\n+     (if_then_else (match_test \"(cfun->machine->indirect_branch_type\n+\t\t\t\t != indirect_branch_keep)\")\n+\t(const_string \"multi\")\n+\t(const_string \"ibr\")))\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"maybe_prefix_bnd\" \"1\")])\n \n@@ -12362,14 +12367,19 @@\n \n   if (TARGET_X32)\n     operands[0] = convert_memory_address (word_mode, operands[0]);\n+  cfun->machine->has_local_indirect_jump = true;\n })\n \n (define_insn \"*tablejump_1\"\n   [(set (pc) (match_operand:W 0 \"indirect_branch_operand\" \"rBw\"))\n    (use (label_ref (match_operand 1)))]\n   \"\"\n-  \"%!jmp\\t%A0\"\n-  [(set_attr \"type\" \"ibr\")\n+  \"* return ix86_output_indirect_jmp (operands[0], false);\"\n+  [(set (attr \"type\")\n+     (if_then_else (match_test \"(cfun->machine->indirect_branch_type\n+\t\t\t\t != indirect_branch_keep)\")\n+\t(const_string \"multi\")\n+\t(const_string \"ibr\")))\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"maybe_prefix_bnd\" \"1\")])\n \f\n@@ -13097,8 +13107,12 @@\n   [(simple_return)\n    (use (match_operand 0 \"register_operand\" \"r\"))]\n   \"reload_completed\"\n-  \"%!jmp\\t%A0\"\n-  [(set_attr \"type\" \"ibr\")\n+  \"* return ix86_output_indirect_jmp (operands[0], true);\"\n+  [(set (attr \"type\")\n+     (if_then_else (match_test \"(cfun->machine->indirect_branch_type\n+\t\t\t\t != indirect_branch_keep)\")\n+\t(const_string \"multi\")\n+\t(const_string \"ibr\")))\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"maybe_prefix_bnd\" \"1\")])\n "}, {"sha": "59e5cc8e7e4ea5f0aeb5d0974a329964864d97ec", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -1021,3 +1021,23 @@ indirect jump.\n mforce-indirect-call\n Target Report Var(flag_force_indirect_call) Init(0)\n Make all function calls indirect.\n+\n+mindirect-branch=\n+Target Report RejectNegative Joined Enum(indirect_branch) Var(ix86_indirect_branch) Init(indirect_branch_keep)\n+Convert indirect call and jump to call and return thunks.\n+\n+Enum\n+Name(indirect_branch) Type(enum indirect_branch)\n+Known indirect branch choices (for use with the -mindirect-branch= option):\n+\n+EnumValue\n+Enum(indirect_branch) String(keep) Value(indirect_branch_keep)\n+\n+EnumValue\n+Enum(indirect_branch) String(thunk) Value(indirect_branch_thunk)\n+\n+EnumValue\n+Enum(indirect_branch) String(thunk-inline) Value(indirect_branch_thunk_inline)\n+\n+EnumValue\n+Enum(indirect_branch) String(thunk-extern) Value(indirect_branch_thunk_extern)"}, {"sha": "ddb6035be969433635c3da1078ee48a678bef0e7", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -5754,6 +5754,16 @@ Specify which floating-point unit to use.  You must specify the\n @code{target(\"fpmath=sse+387\")} because the comma would separate\n different options.\n \n+@item indirect_branch(\"@var{choice}\")\n+@cindex @code{indirect_branch} function attribute, x86\n+On x86 targets, the @code{indirect_branch} attribute causes the compiler\n+to convert indirect call and jump with @var{choice}.  @samp{keep}\n+keeps indirect call and jump unmodified.  @samp{thunk} converts indirect\n+call and jump to call and return thunk.  @samp{thunk-inline} converts\n+indirect call and jump to inlined call and return thunk.\n+@samp{thunk-extern} converts indirect call and jump to external call\n+and return thunk provided in a separate object file.\n+\n @item nocf_check\n @cindex @code{nocf_check} function attribute\n The @code{nocf_check} attribute on a function is used to inform the"}, {"sha": "c0073a1340bd98e32b30e43b2b701c5774d50b46", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -1229,7 +1229,8 @@ See RS/6000 and PowerPC Options.\n -mstack-protector-guard-reg=@var{reg} @gol\n -mstack-protector-guard-offset=@var{offset} @gol\n -mstack-protector-guard-symbol=@var{symbol} -mmitigate-rop @gol\n--mgeneral-regs-only  -mcall-ms2sysv-xlogues}\n+-mgeneral-regs-only -mcall-ms2sysv-xlogues @gol\n+-mindirect-branch=@var{choice}}\n \n @emph{x86 Windows Options}\n @gccoptlist{-mconsole  -mcygwin  -mno-cygwin  -mdll @gol\n@@ -26845,6 +26846,17 @@ Generate code that uses only the general-purpose registers.  This\n prevents the compiler from using floating-point, vector, mask and bound\n registers.\n \n+@item -mindirect-branch=@var{choice}\n+@opindex -mindirect-branch\n+Convert indirect call and jump with @var{choice}.  The default is\n+@samp{keep}, which keeps indirect call and jump unmodified.\n+@samp{thunk} converts indirect call and jump to call and return thunk.\n+@samp{thunk-inline} converts indirect call and jump to inlined call\n+and return thunk.  @samp{thunk-extern} converts indirect call and jump\n+to external call and return thunk provided in a separate object file.\n+You can control this behavior for a specific function by using the\n+function attribute @code{indirect_branch}.  @xref{Function Attributes}.\n+\n @end table\n \n These @samp{-m} switches are supported in addition to the above"}, {"sha": "c623fc504c1fe3bace61ff9903ea492325102c4b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -1,3 +1,39 @@\n+2018-01-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.target/i386/indirect-thunk-1.c: New test.\n+\t* gcc.target/i386/indirect-thunk-2.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-3.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-4.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-5.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-6.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-7.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-1.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-2.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-3.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-4.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-5.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-6.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-7.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-8.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-bnd-1.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-bnd-2.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-bnd-3.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-bnd-4.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-extern-1.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-extern-2.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-extern-3.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-extern-4.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-extern-5.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-extern-6.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-extern-7.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-inline-1.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-inline-2.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-inline-3.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-inline-4.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-inline-5.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-inline-6.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-inline-7.c: Likewise.\n+\n 2018-01-14  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/83051"}, {"sha": "d983e1c3e26eab14f82ae8f33fc9577f1c1db408", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-1.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk -fno-pic\" } */\n+\n+typedef void (*dispatch_t)(long offset);\n+\n+dispatch_t dispatch;\n+\n+void\n+male_indirect_jump (long offset)\n+{\n+  dispatch(offset);\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?dispatch\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk_(r|e)ax\" { target x32 } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */"}, {"sha": "58f09b42d8a7b14280c45bd15a5c8bfa40e27073", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-2.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk -fno-pic\" } */\n+\n+typedef void (*dispatch_t)(long offset);\n+\n+dispatch_t dispatch[256];\n+\n+void\n+male_indirect_jump (long offset)\n+{\n+  dispatch[offset](offset);\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?dispatch\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk_(r|e)ax\" { target x32 } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */"}, {"sha": "f20d35c19b6a2b713d2586d4d8af53ad2e217dae", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-3.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-3.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk -fno-pic\" } */\n+\n+typedef void (*dispatch_t)(long offset);\n+\n+dispatch_t dispatch;\n+\n+int\n+male_indirect_jump (long offset)\n+{\n+  dispatch(offset);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?dispatch\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*__x86_indirect_thunk_(r|e)ax\" { target x32 } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */"}, {"sha": "0eff8fb658a9f6353b6a6e28b94d66651a6fb59f", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-4.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-4.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk -fno-pic\" } */\n+\n+typedef void (*dispatch_t)(long offset);\n+\n+dispatch_t dispatch[256];\n+\n+int\n+male_indirect_jump (long offset)\n+{\n+  dispatch[offset](offset);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?dispatch\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*__x86_indirect_thunk_(r|e)ax\" { target x32 } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */"}, {"sha": "a25b20dd80825f3b50e02a6a75f86ea5cdabcf24", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-5.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fpic -fno-plt -mindirect-branch=thunk\" } */\n+\n+extern void bar (void);\n+\n+void\n+foo (void)\n+{\n+  bar ();\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*bar@GOT\" } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */"}, {"sha": "cff114a6c293fd9bd8a9a6f1dcdbbc0e4be45f06", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-6.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-6.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fpic -fno-plt -mindirect-branch=thunk\" } */\n+\n+extern void bar (void);\n+\n+int\n+foo (void)\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*bar@GOT\" } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" } } */\n+/* { dg-final { scan-assembler-times \"jmp\\[ \\t\\]*\\.LIND\" 2 } } */\n+/* { dg-final { scan-assembler-times \"call\\[ \\t\\]*\\.LIND\" 2 } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */"}, {"sha": "afdb60079864a454a8f50313db2f87a5cf9d9c8d", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-7.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-7.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk -fno-pic\" } */\n+\n+void func0 (void);\n+void func1 (void);\n+void func2 (void);\n+void func3 (void);\n+void func4 (void);\n+void func4 (void);\n+void func5 (void);\n+\n+void\n+bar (int i)\n+{\n+  switch (i)\n+    {\n+    default:\n+      func0 ();\n+      break;\n+    case 1:\n+      func1 ();\n+      break;\n+    case 2:\n+      func2 ();\n+      break;\n+    case 3:\n+      func3 ();\n+      break;\n+    case 4:\n+      func4 ();\n+      break;\n+    case 5:\n+      func5 ();\n+      break;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*\\.L\\[0-9\\]+\\\\(,%\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk_(r|e)ax\" { target x32 } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */"}, {"sha": "d64d978b69958eb4fc80de46c3b3c309c6695dd9", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-1.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-pic\" } */\n+\n+typedef void (*dispatch_t)(long offset);\n+\n+dispatch_t dispatch;\n+\n+extern void male_indirect_jump (long)\n+  __attribute__ ((indirect_branch(\"thunk\")));\n+\n+void\n+male_indirect_jump (long offset)\n+{\n+  dispatch(offset);\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?dispatch\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk_(r|e)ax\" { target x32 } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */"}, {"sha": "93067454d3dc359018758528bed54b98328fc419", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-2.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-pic\" } */\n+\n+typedef void (*dispatch_t)(long offset);\n+\n+dispatch_t dispatch[256];\n+\n+__attribute__ ((indirect_branch(\"thunk\")))\n+void\n+male_indirect_jump (long offset)\n+{\n+  dispatch[offset](offset);\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?dispatch\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk_(r|e)ax\" { target x32 } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */"}, {"sha": "97744d65729f802a506cec5fdd04db124f6f1714", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-3.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-3.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-pic\" } */\n+\n+typedef void (*dispatch_t)(long offset);\n+\n+dispatch_t dispatch;\n+extern int male_indirect_jump (long)\n+  __attribute__ ((indirect_branch(\"thunk-inline\")));\n+\n+int\n+male_indirect_jump (long offset)\n+{\n+  dispatch(offset);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?dispatch\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler-times \"jmp\\[ \\t\\]*\\.LIND\" 2 } } */\n+/* { dg-final { scan-assembler-times \"call\\[ \\t\\]*\\.LIND\" 2 } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */\n+/* { dg-final { scan-assembler-not \"__x86_indirect_thunk\" } } */\n+/* { dg-final { scan-assembler-not \"pushq\\[ \\t\\]%rax\" { target x32 } } } */"}, {"sha": "bfce3ea5cb25f8701705c5982de11abf21f59418", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-4.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-4.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-pic\" } */\n+\n+typedef void (*dispatch_t)(long offset);\n+\n+dispatch_t dispatch[256];\n+\n+__attribute__ ((indirect_branch(\"thunk-inline\")))\n+int\n+male_indirect_jump (long offset)\n+{\n+  dispatch[offset](offset);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?dispatch\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler-times \"jmp\\[ \\t\\]*\\.LIND\" 2 } } */\n+/* { dg-final { scan-assembler-times \"call\\[ \\t\\]*\\.LIND\" 2 } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */\n+/* { dg-final { scan-assembler-not \"__x86_indirect_thunk\" } } */\n+/* { dg-final { scan-assembler-not \"pushq\\[ \\t\\]%rax\" { target x32 } } } */"}, {"sha": "0833606046b52ee197f546e098406c8e4dbd0055", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-5.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-5.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-pic\" } */\n+\n+typedef void (*dispatch_t)(long offset);\n+\n+dispatch_t dispatch;\n+extern int male_indirect_jump (long)\n+  __attribute__ ((indirect_branch(\"thunk-extern\")));\n+\n+int\n+male_indirect_jump (long offset)\n+{\n+  dispatch(offset);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?dispatch\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler-times \"jmp\\[ \\t\\]*\\.LIND\" 1 { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler-times \"call\\[ \\t\\]*\\.LIND\" 1 { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*__x86_indirect_thunk_(r|e)ax\" { target x32 } } } */\n+/* { dg-final { scan-assembler-not {\\t(lfence|pause)} } } */"}, {"sha": "2eba0fbd9b2a265d73ffc1279c63d706ba25880f", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-6.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-6.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-pic\" } */\n+\n+typedef void (*dispatch_t)(long offset);\n+\n+dispatch_t dispatch[256];\n+\n+__attribute__ ((indirect_branch(\"thunk-extern\")))\n+int\n+male_indirect_jump (long offset)\n+{\n+  dispatch[offset](offset);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?dispatch\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler-times \"jmp\\[ \\t\\]*\\.LIND\" 1 { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler-times \"call\\[ \\t\\]*\\.LIND\" 1 { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*__x86_indirect_thunk_(r|e)ax\" { target x32 } } } */\n+/* { dg-final { scan-assembler-not {\\t(lfence|pause)} } } */"}, {"sha": "f58427eae116e20593d24d67ce3d1bd74bd90760", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-7.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-7.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-pic\" } */\n+\n+void func0 (void);\n+void func1 (void);\n+void func2 (void);\n+void func3 (void);\n+void func4 (void);\n+void func4 (void);\n+void func5 (void);\n+\n+__attribute__ ((indirect_branch(\"thunk-extern\")))\n+void\n+bar (int i)\n+{\n+  switch (i)\n+    {\n+    default:\n+      func0 ();\n+      break;\n+    case 1:\n+      func1 ();\n+      break;\n+    case 2:\n+      func2 ();\n+      break;\n+    case 3:\n+      func3 ();\n+      break;\n+    case 4:\n+      func4 ();\n+      break;\n+    case 5:\n+      func5 ();\n+      break;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*\\.L\\[0-9\\]+\\\\(,%\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk_(r|e)ax\" { target x32 } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" } } */\n+/* { dg-final { scan-assembler-not {\\t(lfence|pause)} } } */\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[ \\t\\]*\\.LIND\" } } */"}, {"sha": "564ed39547c2fef99b840ae1bcf419c7c7809cd6", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-8.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-8.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk -fno-pic\" } */\n+\n+void func0 (void);\n+void func1 (void);\n+void func2 (void);\n+void func3 (void);\n+void func4 (void);\n+void func4 (void);\n+void func5 (void);\n+\n+__attribute__ ((indirect_branch(\"keep\")))\n+void\n+bar (int i)\n+{\n+  switch (i)\n+    {\n+    default:\n+      func0 ();\n+      break;\n+    case 1:\n+      func1 ();\n+      break;\n+    case 2:\n+      func2 ();\n+      break;\n+    case 3:\n+      func3 ();\n+      break;\n+    case 4:\n+      func4 ();\n+      break;\n+    case 5:\n+      func5 ();\n+      break;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-not \"__x86_indirect_thunk\" } } */\n+/* { dg-final { scan-assembler-not {\\t(lfence|pause)} } } */\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[ \\t\\]*\\.LIND\" } } */"}, {"sha": "50fbee20a5a828759ff33db2b21efe91f144a684", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-bnd-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-1.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { ! x32 } } } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk -fcheck-pointer-bounds -mmpx -fno-pic\" } */\n+\n+void (*dispatch) (char *);\n+char buf[10];\n+\n+void\n+foo (void)\n+{\n+  dispatch (buf);\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?dispatch\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"pushq\\[ \\t\\]%rax\" { target x32 } } } */\n+/* { dg-final { scan-assembler \"bnd jmp\\[ \\t\\]*__x86_indirect_thunk_bnd\" } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"bnd call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"bnd ret\" } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */"}, {"sha": "2976e67adcedf6dc276b008215b02b809637ca60", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-bnd-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-2.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile { target { ! x32 } } } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk -fcheck-pointer-bounds -mmpx -fno-pic\" } */\n+\n+void (*dispatch) (char *);\n+char buf[10];\n+\n+int\n+foo (void)\n+{\n+  dispatch (buf);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?dispatch\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"pushq\\[ \\t\\]%rax\" { target x32 } } } */\n+/* { dg-final { scan-assembler \"bnd jmp\\[ \\t\\]*__x86_indirect_thunk_bnd\" } } */\n+/* { dg-final { scan-assembler \"bnd jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"bnd call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"bnd ret\" } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */"}, {"sha": "da4bc98ef237a05bf56f97a502e98eafea554a05", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-bnd-3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-3.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target { *-*-linux* && { ! x32 } } } } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk -fcheck-pointer-bounds -mmpx -fpic -fno-plt\" } */\n+\n+void bar (char *);\n+char buf[10];\n+\n+void\n+foo (void)\n+{\n+  bar (buf);\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*bar@GOT\" } } */\n+/* { dg-final { scan-assembler \"bnd jmp\\[ \\t\\]*__x86_indirect_thunk_bnd\" } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"bnd call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"bnd ret\" } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */"}, {"sha": "c64d12ef989a51a7b7827aa47d40cf8bef79c15b", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-bnd-4.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-4.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target { *-*-linux* && { ! x32 } } } } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk -fcheck-pointer-bounds -mmpx -fpic -fno-plt\" } */\n+\n+void bar (char *);\n+char buf[10];\n+\n+int\n+foo (void)\n+{\n+  bar (buf);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*bar@GOT\" } } */\n+/* { dg-final { scan-assembler \"bnd jmp\\[ \\t\\]*__x86_indirect_thunk\" } } */\n+/* { dg-final { scan-assembler \"bnd jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler-times \"bnd call\\[ \\t\\]*\\.LIND\" 2 } } */\n+/* { dg-final { scan-assembler \"bnd ret\" } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */"}, {"sha": "49f27b4946575271be7c5486cd2cac6eac346425", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-extern-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-1.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk-extern -fno-pic\" } */\n+\n+typedef void (*dispatch_t)(long offset);\n+\n+dispatch_t dispatch;\n+\n+void\n+male_indirect_jump (long offset)\n+{\n+  dispatch(offset);\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?dispatch\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk_(r|e)ax\" { target x32 } } } */\n+/* { dg-final { scan-assembler-not {\\t(lfence|pause)} } } */\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[ \\t\\]*\\.LIND\" } } */"}, {"sha": "a1e3eb6fc741aff51dbd9971c7cc194ff9785c3b", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-extern-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-2.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk-extern -fno-pic\" } */\n+\n+typedef void (*dispatch_t)(long offset);\n+\n+dispatch_t dispatch[256];\n+\n+void\n+male_indirect_jump (long offset)\n+{\n+  dispatch[offset](offset);\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?dispatch\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk_(r|e)ax\" { target x32 } } } */\n+/* { dg-final { scan-assembler-not {\\t(lfence|pause)} } } */\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[ \\t\\]*\\.LIND\" } } */"}, {"sha": "395634e7e5c3f43dbde86a08766315c611d81f5f", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-extern-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-3.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk-extern -fno-pic\" } */\n+\n+typedef void (*dispatch_t)(long offset);\n+\n+dispatch_t dispatch;\n+\n+int\n+male_indirect_jump (long offset)\n+{\n+  dispatch(offset);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?dispatch\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler-times \"jmp\\[ \\t\\]*\\.LIND\" 1 { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler-times \"call\\[ \\t\\]*\\.LIND\" 1 { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*__x86_indirect_thunk_(r|e)ax\" { target x32 } } } */\n+/* { dg-final { scan-assembler-not {\\t(lfence|pause)} } } */"}, {"sha": "fd3f63379a19cf5a7f2f72d57e00d291f5ae21d8", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-extern-4.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-4.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk-extern -fno-pic\" } */\n+\n+typedef void (*dispatch_t)(long offset);\n+\n+dispatch_t dispatch[256];\n+\n+int\n+male_indirect_jump (long offset)\n+{\n+  dispatch[offset](offset);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?dispatch\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler-times \"jmp\\[ \\t\\]*\\.LIND\" 1 { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler-times \"call\\[ \\t\\]*\\.LIND\" 1 { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*__x86_indirect_thunk_(r|e)ax\" { target x32 } } } */\n+/* { dg-final { scan-assembler-not {\\t(lfence|pause)} } } */"}, {"sha": "ba2f92b6f34876fa6b480d17e540b921f7cf08d5", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-extern-5.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-5.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fpic -fno-plt -mindirect-branch=thunk-extern\" } */\n+\n+extern void bar (void);\n+\n+void\n+foo (void)\n+{\n+  bar ();\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*bar@GOT\" } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" } } */\n+/* { dg-final { scan-assembler-not {\\t(lfence|pause)} } } */\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[ \\t\\]*\\.LIND\" } } */"}, {"sha": "0c5a2d472c6c27de6412aff173b3a972b0a21394", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-extern-6.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-6.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fpic -fno-plt -mindirect-branch=thunk-extern\" } */\n+\n+extern void bar (void);\n+\n+int\n+foo (void)\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*bar@GOT\" } } */\n+/* { dg-final { scan-assembler-times \"jmp\\[ \\t\\]*\\.LIND\" 1 } } */\n+/* { dg-final { scan-assembler-times \"call\\[ \\t\\]*\\.LIND\" 1 } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" } } */\n+/* { dg-final { scan-assembler-not {\\t(lfence|pause)} } } */"}, {"sha": "665252327aacad2e158dde9320819bf9bf236f35", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-extern-7.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-7.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk-extern -fno-pic\" } */\n+\n+void func0 (void);\n+void func1 (void);\n+void func2 (void);\n+void func3 (void);\n+void func4 (void);\n+void func4 (void);\n+void func5 (void);\n+\n+void\n+bar (int i)\n+{\n+  switch (i)\n+    {\n+    default:\n+      func0 ();\n+      break;\n+    case 1:\n+      func1 ();\n+      break;\n+    case 2:\n+      func2 ();\n+      break;\n+    case 3:\n+      func3 ();\n+      break;\n+    case 4:\n+      func4 ();\n+      break;\n+    case 5:\n+      func5 ();\n+      break;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*\\.L\\[0-9\\]+\\\\(,%\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk_(r|e)ax\" { target x32 } } } */\n+/* { dg-final { scan-assembler-not {\\t(lfence|pause)} } } */\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[ \\t\\]*\\.LIND\" } } */"}, {"sha": "68c0ff713b3324c55f35fb918bff09bd17dbf485", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-inline-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-1.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk-inline -fno-pic\" } */\n+\n+typedef void (*dispatch_t)(long offset);\n+\n+dispatch_t dispatch;\n+\n+void\n+male_indirect_jump (long offset)\n+{\n+  dispatch(offset);\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?dispatch\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */\n+/* { dg-final { scan-assembler-not \"__x86_indirect_thunk\" } } */\n+/* { dg-final { scan-assembler-not \"pushq\\[ \\t\\]%rax\" { target x32 } } } */"}, {"sha": "e2da1fcb68307af3b52fb1708c1ba6f13ad185fb", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-inline-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-2.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk-inline -fno-pic\" } */\n+\n+typedef void (*dispatch_t)(long offset);\n+\n+dispatch_t dispatch[256];\n+\n+void\n+male_indirect_jump (long offset)\n+{\n+  dispatch[offset](offset);\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?dispatch\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */\n+/* { dg-final { scan-assembler-not \"__x86_indirect_thunk\" } } */\n+/* { dg-final { scan-assembler-not \"pushq\\[ \\t\\]%rax\" { target x32 } } } */"}, {"sha": "244fec708d681cd77932eeb72140c177953dd1ad", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-inline-3.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-3.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk-inline -fno-pic\" } */\n+\n+typedef void (*dispatch_t)(long offset);\n+\n+dispatch_t dispatch;\n+\n+int\n+male_indirect_jump (long offset)\n+{\n+  dispatch(offset);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?dispatch\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler-times \"jmp\\[ \\t\\]*\\.LIND\" 2 } } */\n+/* { dg-final { scan-assembler-times \"call\\[ \\t\\]*\\.LIND\" 2 } } */\n+/* { dg-final { scan-assembler-times {\\tpause} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlfence} 1 } } */\n+/* { dg-final { scan-assembler-not \"__x86_indirect_thunk\" } } */\n+/* { dg-final { scan-assembler-not \"pushq\\[ \\t\\]%rax\" { target x32 } } } */"}, {"sha": "107ebe32f548f05dcc6f6fda939b260aa856c0db", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-inline-4.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-4.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk-inline -fno-pic\" } */\n+\n+typedef void (*dispatch_t)(long offset);\n+\n+dispatch_t dispatch[256];\n+\n+int\n+male_indirect_jump (long offset)\n+{\n+  dispatch[offset](offset);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*_?dispatch\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler-times \"jmp\\[ \\t\\]*\\.LIND\" 2 } } */\n+/* { dg-final { scan-assembler-times \"call\\[ \\t\\]*\\.LIND\" 2 } } */\n+/* { dg-final { scan-assembler-times {\\tpause} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlfence} 1 } } */\n+/* { dg-final { scan-assembler-not \"__x86_indirect_thunk\" } } */\n+/* { dg-final { scan-assembler-not \"pushq\\[ \\t\\]%rax\" { target x32 } } } */"}, {"sha": "17b04ef2229ca35230bda4c9a84f328ecb32227b", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-inline-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-5.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fpic -fno-plt -mindirect-branch=thunk-inline\" } */\n+\n+extern void bar (void);\n+\n+void\n+foo (void)\n+{\n+  bar ();\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*bar@GOT\" } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */\n+/* { dg-final { scan-assembler-not \"__x86_indirect_thunk\" } } */"}, {"sha": "d9eb11285aa2427b2ef5887846abe1dedbeb62c9", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-inline-6.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-6.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fpic -fno-plt -mindirect-branch=thunk-inline\" } */\n+\n+extern void bar (void);\n+\n+int\n+foo (void)\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*bar@GOT\" } } */\n+/* { dg-final { scan-assembler-times \"jmp\\[ \\t\\]*\\.LIND\" 2 } } */\n+/* { dg-final { scan-assembler-times \"call\\[ \\t\\]*\\.LIND\" 2 } } */\n+/* { dg-final { scan-assembler-times {\\tpause} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlfence} 1 } } */\n+/* { dg-final { scan-assembler-not \"__x86_indirect_thunk\" } } */"}, {"sha": "d02b1dcb1b9fd32397417e06b311caf7b0e1fbfc", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-inline-7.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-inline-7.c?ref=da99fd4a3ca06b43b08ba8d96dab84e83ac90aa7", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk-inline -fno-pic\" } */\n+\n+void func0 (void);\n+void func1 (void);\n+void func2 (void);\n+void func3 (void);\n+void func4 (void);\n+void func4 (void);\n+void func5 (void);\n+\n+void\n+bar (int i)\n+{\n+  switch (i)\n+    {\n+    default:\n+      func0 ();\n+      break;\n+    case 1:\n+      func1 ();\n+      break;\n+    case 2:\n+      func2 ();\n+      break;\n+    case 3:\n+      func3 ();\n+      break;\n+    case 4:\n+      func4 ();\n+      break;\n+    case 5:\n+      func5 ();\n+      break;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler \"push(?:l|q)\\[ \\t\\]*\\.L\\[0-9\\]+\\\\(,%\" { target { ! x32 } } } } */\n+/* { dg-final { scan-assembler-not \"pushq\\[ \\t\\]%rax\" { target x32 } } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */\n+/* { dg-final { scan-assembler-not \"__x86_indirect_thunk\" } } */"}]}