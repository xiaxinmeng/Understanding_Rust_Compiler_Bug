{"sha": "a981c964023a0ce4a6450c7ebd059450d81cbc1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk4MWM5NjQwMjNhMGNlNGE2NDUwYzdlYmQwNTk0NTBkODFjYmMxZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-08-01T14:02:10Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-08-01T14:02:10Z"}, "message": "ada-tree.h (DECL_PARM_ALT): Now DECL_PARM_ALT_TYPE.\n\n\t* gcc-interface/ada-tree.h (DECL_PARM_ALT): Now DECL_PARM_ALT_TYPE.\n\t* gcc-interface/decl.c (gnat_to_gnu_param): Fix formatting, simplify\n\tand adjust for above renaming.\n\t* gcc-interface/utils.c (convert_vms_descriptor): Likewise. Add new\n\tgnu_expr_alt_type parameter.  Convert the expression to it instead\n\tof changing its type in place.\n\t(build_function_stub): Adjust call to above function.\n\nFrom-SVN: r138518", "tree": {"sha": "0c627408280bbfa72c8c792436ff4b7096d2bb97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c627408280bbfa72c8c792436ff4b7096d2bb97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a981c964023a0ce4a6450c7ebd059450d81cbc1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a981c964023a0ce4a6450c7ebd059450d81cbc1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a981c964023a0ce4a6450c7ebd059450d81cbc1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a981c964023a0ce4a6450c7ebd059450d81cbc1e/comments", "author": null, "committer": null, "parents": [{"sha": "de1132d194a883fb817520e0c1f1a44b294fd7f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de1132d194a883fb817520e0c1f1a44b294fd7f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de1132d194a883fb817520e0c1f1a44b294fd7f5"}], "stats": {"total": 101, "additions": 51, "deletions": 50}, "files": [{"sha": "5819c4948dcbf43d153e2bf86c6757f132d7ee75", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a981c964023a0ce4a6450c7ebd059450d81cbc1e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a981c964023a0ce4a6450c7ebd059450d81cbc1e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a981c964023a0ce4a6450c7ebd059450d81cbc1e", "patch": "@@ -1,3 +1,13 @@\n+2008-08-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/ada-tree.h (DECL_PARM_ALT): Now DECL_PARM_ALT_TYPE.\n+\t* gcc-interface/decl.c (gnat_to_gnu_param): Fix formatting, simplify\n+\tand adjust for above renaming.\n+\t* gcc-interface/utils.c (convert_vms_descriptor): Likewise. Add new\n+\tgnu_expr_alt_type parameter.  Convert the expression to it instead\n+\tof changing its type in place.\n+\t(build_function_stub): Adjust call to above function.\n+\n 2008-08-01  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Constant>: Remove dead"}, {"sha": "1db5ce28ecf6b66c63b6f58a9d675ccc04f48bfd", "filename": "gcc/ada/gcc-interface/ada-tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a981c964023a0ce4a6450c7ebd059450d81cbc1e/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a981c964023a0ce4a6450c7ebd059450d81cbc1e/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-tree.h?ref=a981c964023a0ce4a6450c7ebd059450d81cbc1e", "patch": "@@ -294,10 +294,10 @@ struct lang_type GTY(()) {tree t; };\n #define SET_DECL_FUNCTION_STUB(NODE, X) \\\n   SET_DECL_LANG_SPECIFIC (FUNCTION_DECL_CHECK (NODE), X)\n \n-/* In a PARM_DECL, points to the alternate TREE_TYPE */\n-#define DECL_PARM_ALT(NODE) \\\n+/* In a PARM_DECL, points to the alternate TREE_TYPE.  */\n+#define DECL_PARM_ALT_TYPE(NODE) \\\n   GET_DECL_LANG_SPECIFIC (PARM_DECL_CHECK (NODE))\n-#define SET_DECL_PARM_ALT(NODE, X) \\\n+#define SET_DECL_PARM_ALT_TYPE(NODE, X) \\\n   SET_DECL_LANG_SPECIFIC (PARM_DECL_CHECK (NODE), X)\n \n /* In a FIELD_DECL corresponding to a discriminant, contains the"}, {"sha": "c9e90457803e18ffa675ef79ab0ae537cc080072", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a981c964023a0ce4a6450c7ebd059450d81cbc1e/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a981c964023a0ce4a6450c7ebd059450d81cbc1e/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=a981c964023a0ce4a6450c7ebd059450d81cbc1e", "patch": "@@ -4841,11 +4841,11 @@ gnat_to_gnu_param (Entity_Id gnat_param, Mechanism_Type mech,\n     gnu_param_type\n       = TREE_TYPE (TREE_TYPE (TYPE_FIELDS (TREE_TYPE (gnu_param_type))));\n \n-  /* VMS descriptors are themselves passed by reference.\n-     Build both a 32bit and 64bit descriptor, one of which will be chosen\n-     in fill_vms_descriptor. */\n+  /* VMS descriptors are themselves passed by reference.  */\n   if (mech == By_Descriptor)\n     {\n+      /* Build both a 32-bit and 64-bit descriptor, one of which will be\n+\t chosen in fill_vms_descriptor.  */\n       gnu_param_type_alt\n         = build_pointer_type (build_vms_descriptor32 (gnu_param_type,\n \t\t\t\t\t\t      Mechanism (gnat_param),\n@@ -4856,14 +4856,10 @@ gnat_to_gnu_param (Entity_Id gnat_param, Mechanism_Type mech,\n \t\t\t\t\t\t    gnat_subprog));\n     }\n   else if (mech == By_Short_Descriptor)\n-    {\n-      gnu_param_type_alt = NULL_TREE;\n-\n-      gnu_param_type\n-        = build_pointer_type (build_vms_descriptor32 (gnu_param_type,\n+    gnu_param_type\n+      = build_pointer_type (build_vms_descriptor32 (gnu_param_type,\n \t\t\t\t\t\t    Mechanism (gnat_param),\n \t\t\t\t\t\t    gnat_subprog));\n-    }\n \n   /* Arrays are passed as pointers to element type for foreign conventions.  */\n   else if (foreign\n@@ -4961,8 +4957,9 @@ gnat_to_gnu_param (Entity_Id gnat_param, Mechanism_Type mech,\n   DECL_POINTS_TO_READONLY_P (gnu_param)\n     = (ro_param && (by_ref || by_component_ptr));\n \n-  /* Save the alternate descriptor for later. */\n-  SET_DECL_PARM_ALT (gnu_param, gnu_param_type_alt);\n+  /* Save the alternate descriptor type, if any.  */\n+  if (gnu_param_type_alt)\n+    SET_DECL_PARM_ALT_TYPE (gnu_param, gnu_param_type_alt);\n \n   /* If no Mechanism was specified, indicate what we're using, then\n      back-annotate it.  */"}, {"sha": "dcf0558ec9db9e3de3eb3f2b817e1c290fbc8452", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 30, "deletions": 36, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a981c964023a0ce4a6450c7ebd059450d81cbc1e/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a981c964023a0ce4a6450c7ebd059450d81cbc1e/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=a981c964023a0ce4a6450c7ebd059450d81cbc1e", "patch": "@@ -3564,54 +3564,45 @@ convert_vms_descriptor32 (tree gnu_type, tree gnu_expr, Entity_Id gnat_subprog)\n     gcc_unreachable ();\n }\n \n-/* Convert GNU_EXPR, a pointer to a VMS descriptor, to GNU_TYPE, a\n-   regular pointer or fat pointer type.  GNAT_SUBPROG is the subprogram to\n-   which the VMS descriptor is passed.  */\n+/* Convert GNU_EXPR, a pointer to a VMS descriptor, to GNU_TYPE, a regular\n+   pointer or fat pointer type.  GNU_EXPR_ALT_TYPE is the alternate (32-bit)\n+   pointer type of GNU_EXPR.  GNAT_SUBPROG is the subprogram to which the\n+   VMS descriptor is passed.  */\n \n static tree\n-convert_vms_descriptor (tree gnu_type, tree gnu_expr, Entity_Id gnat_subprog)\n+convert_vms_descriptor (tree gnu_type, tree gnu_expr, tree gnu_expr_alt_type,\n+\t\t\tEntity_Id gnat_subprog)\n {\n   tree desc_type = TREE_TYPE (TREE_TYPE (gnu_expr));\n   tree desc = build1 (INDIRECT_REF, desc_type, gnu_expr);\n   tree mbo = TYPE_FIELDS (desc_type);\n   const char *mbostr = IDENTIFIER_POINTER (DECL_NAME (mbo));\n   tree mbmo = TREE_CHAIN (TREE_CHAIN (TREE_CHAIN (mbo)));\n-  tree is64bit;\n-  tree save_type = TREE_TYPE (gnu_expr);\n-  tree gnu_expr32, gnu_expr64;\n+  tree is64bit, gnu_expr32, gnu_expr64;\n \n+  /* If the field name is not MBO, it must be 32-bit and no alternate.\n+     Otherwise primary must be 64-bit and alternate 32-bit.  */\n   if (strcmp (mbostr, \"MBO\") != 0)\n-    /* If the field name is not MBO, it must be 32bit and no alternate */\n     return convert_vms_descriptor32 (gnu_type, gnu_expr, gnat_subprog);\n \n-  /* Otherwise primary must be 64bit and alternate 32bit */\n-\n-  /* Test for 64bit descriptor */\n+  /* Build the test for 64-bit descriptor.  */\n   mbo = build3 (COMPONENT_REF, TREE_TYPE (mbo), desc, mbo, NULL_TREE);\n   mbmo = build3 (COMPONENT_REF, TREE_TYPE (mbmo), desc, mbmo, NULL_TREE);\n-  is64bit = build_binary_op (TRUTH_ANDIF_EXPR, integer_type_node,\n-            build_binary_op (EQ_EXPR, integer_type_node,\n-                                convert (integer_type_node, mbo),\n-                                integer_one_node),\n-            build_binary_op (EQ_EXPR, integer_type_node,\n-                                convert (integer_type_node, mbmo),\n-                                integer_minus_one_node));\n-\n-  gnu_expr64 = convert_vms_descriptor64 (gnu_type, gnu_expr,\n-                                         gnat_subprog);\n-  /* Convert 32bit alternate. Hack alert ??? */\n-  TREE_TYPE (gnu_expr) = DECL_PARM_ALT (gnu_expr);\n-  gnu_expr32 = convert_vms_descriptor32 (gnu_type, gnu_expr,\n-                                         gnat_subprog);\n-  TREE_TYPE (gnu_expr) = save_type;\n-\n-  if (POINTER_TYPE_P (gnu_type))\n-     return build3 (COND_EXPR, gnu_type, is64bit, gnu_expr64, gnu_expr32);\n-\n-  else if (TYPE_FAT_POINTER_P (gnu_type))\n-      return build3 (COND_EXPR, gnu_type, is64bit, gnu_expr64, gnu_expr32);\n-  else\n-    gcc_unreachable ();\n+  is64bit\n+    = build_binary_op (TRUTH_ANDIF_EXPR, integer_type_node,\n+\t\t       build_binary_op (EQ_EXPR, integer_type_node,\n+\t\t\t\t\tconvert (integer_type_node, mbo),\n+\t\t\t\t\tinteger_one_node),\n+\t\t       build_binary_op (EQ_EXPR, integer_type_node,\n+\t\t\t\t\tconvert (integer_type_node, mbmo),\n+\t\t\t\t\tinteger_minus_one_node));\n+\n+  /* Build the 2 possible end results.  */\n+  gnu_expr64 = convert_vms_descriptor64 (gnu_type, gnu_expr, gnat_subprog);\n+  gnu_expr = fold_convert (gnu_expr_alt_type, gnu_expr);\n+  gnu_expr32 = convert_vms_descriptor32 (gnu_type, gnu_expr, gnat_subprog);\n+\n+  return build3 (COND_EXPR, gnu_type, is64bit, gnu_expr64, gnu_expr32);\n }\n \n /* Build a stub for the subprogram specified by the GCC tree GNU_SUBPROG\n@@ -3642,8 +3633,11 @@ build_function_stub (tree gnu_subprog, Entity_Id gnat_subprog)\n        gnu_arg_types = TREE_CHAIN (gnu_arg_types))\n     {\n       if (DECL_BY_DESCRIPTOR_P (gnu_stub_param))\n-\tgnu_param = convert_vms_descriptor (TREE_VALUE (gnu_arg_types),\n-\t\t\t\t\t    gnu_stub_param, gnat_subprog);\n+\tgnu_param\n+\t  = convert_vms_descriptor (TREE_VALUE (gnu_arg_types),\n+\t\t\t\t    gnu_stub_param,\n+\t\t\t\t    DECL_PARM_ALT_TYPE (gnu_stub_param),\n+\t\t\t\t    gnat_subprog);\n       else\n \tgnu_param = gnu_stub_param;\n "}]}