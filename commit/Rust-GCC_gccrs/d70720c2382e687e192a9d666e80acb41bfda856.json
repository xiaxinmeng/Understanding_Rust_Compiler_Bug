{"sha": "d70720c2382e687e192a9d666e80acb41bfda856", "node_id": "C_kwDOANBUbNoAKGQ3MDcyMGMyMzgyZTY4N2UxOTJhOWQ2NjZlODBhY2I0MWJmZGE4NTY", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-11-04T17:32:09Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-11-04T17:32:09Z"}, "message": "middle-end: convert negate + right shift into compare greater.\n\nThis turns an inversion of the sign bit + arithmetic right shift into a\ncomparison with 0.\n\ni.e.\n\nvoid fun1(int32_t *x, int n)\n{\n    for (int i = 0; i < (n & -16); i++)\n      x[i] = (-x[i]) >> 31;\n}\n\nnow generates:\n\n.L3:\n        ldr     q0, [x0]\n        cmgt    v0.4s, v0.4s, #0\n        str     q0, [x0], 16\n        cmp     x0, x1\n        bne     .L3\n\ninstead of:\n\n.L3:\n        ldr     q0, [x0]\n        neg     v0.4s, v0.4s\n        sshr    v0.4s, v0.4s, 31\n        str     q0, [x0], 16\n        cmp     x0, x1\n        bne     .L3\n\ngcc/ChangeLog:\n\n\t* match.pd: New negate+shift pattern.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/signbit-2.c: New test.\n\t* gcc.dg/signbit-3.c: New test.\n\t* gcc.dg/signbit-4.c: New test.\n\t* gcc.dg/signbit-5.c: New test.\n\t* gcc.dg/signbit-6.c: New test.\n\t* gcc.target/aarch64/signbit-1.c: New test.", "tree": {"sha": "af6adf8a4e4441b83b55e63e81b52026d4ca02ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af6adf8a4e4441b83b55e63e81b52026d4ca02ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d70720c2382e687e192a9d666e80acb41bfda856", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d70720c2382e687e192a9d666e80acb41bfda856", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d70720c2382e687e192a9d666e80acb41bfda856", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d70720c2382e687e192a9d666e80acb41bfda856/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "004afb984beb6efbe25f44a5857b1c27ebc2ec82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/004afb984beb6efbe25f44a5857b1c27ebc2ec82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/004afb984beb6efbe25f44a5857b1c27ebc2ec82"}], "stats": {"total": 290, "additions": 289, "deletions": 1}, "files": [{"sha": "917833dd14baa1f510c21008144e3a6762362133", "filename": "gcc/match.pd", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70720c2382e687e192a9d666e80acb41bfda856/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70720c2382e687e192a9d666e80acb41bfda856/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=d70720c2382e687e192a9d666e80acb41bfda856", "patch": "@@ -37,7 +37,8 @@ along with GCC; see the file COPYING3.  If not see\n    integer_pow2p\n    uniform_integer_cst_p\n    HONOR_NANS\n-   uniform_vector_p)\n+   uniform_vector_p\n+   expand_vec_cmp_expr_p)\n \n /* Operator lists.  */\n (define_operator_list tcc_comparison\n@@ -831,6 +832,39 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n     { tree utype = unsigned_type_for (type); }\n     (convert (rshift (lshift (convert:utype @0) @2) @3))))))\n \n+/* Fold (-x >> C) into -(x > 0) where C = precision(type) - 1.  */\n+(for cst (INTEGER_CST VECTOR_CST)\n+ (simplify\n+  (rshift (negate:s @0) cst@1)\n+   (if (!TYPE_UNSIGNED (type)\n+        && TYPE_OVERFLOW_UNDEFINED (type))\n+    (with { tree stype = TREE_TYPE (@1);\n+\t    tree bt = truth_type_for (type);\n+\t    tree zeros = build_zero_cst (type);\n+\t    tree cst = NULL_TREE; }\n+     (switch\n+      /* Handle scalar case.  */\n+      (if (INTEGRAL_TYPE_P (type)\n+\t   /* If we apply the rule to the scalar type before vectorization\n+\t      we will enforce the result of the comparison being a bool\n+\t      which will require an extra AND on the result that will be\n+\t      indistinguishable from when the user did actually want 0\n+\t      or 1 as the result so it can't be removed.  */\n+\t   && canonicalize_math_after_vectorization_p ()\n+\t   && wi::eq_p (wi::to_wide (@1), TYPE_PRECISION (type) - 1))\n+       (negate (convert (gt @0 { zeros; }))))\n+      /* Handle vector case.  */\n+      (if (VECTOR_INTEGER_TYPE_P (type)\n+\t   /* First check whether the target has the same mode for vector\n+\t      comparison results as it's operands do.  */\n+\t   && TYPE_MODE (bt) == TYPE_MODE (type)\n+\t   /* Then check to see if the target is able to expand the comparison\n+\t      with the given type later on, otherwise we may ICE.  */\n+\t   && expand_vec_cmp_expr_p (type, bt, GT_EXPR)\n+\t   && (cst = uniform_integer_cst_p (@1)) != NULL\n+\t   && wi::eq_p (wi::to_wide (cst), element_precision (type) - 1))\n+       (view_convert (gt:bt @0 { zeros; }))))))))\n+\n /* Fold (C1/X)*C2 into (C1*C2)/X.  */\n (simplify\n  (mult (rdiv@3 REAL_CST@0 @1) REAL_CST@2)"}, {"sha": "fc0157cbc5c7996b481f2998bc30176c96a669bb", "filename": "gcc/testsuite/gcc.dg/signbit-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70720c2382e687e192a9d666e80acb41bfda856/gcc%2Ftestsuite%2Fgcc.dg%2Fsignbit-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70720c2382e687e192a9d666e80acb41bfda856/gcc%2Ftestsuite%2Fgcc.dg%2Fsignbit-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsignbit-2.c?ref=d70720c2382e687e192a9d666e80acb41bfda856", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O3 --save-temps -fdump-tree-optimized\" } */\n+\n+#include <stdint.h>\n+\n+void fun1(int32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (-x[i]) >> 31;\n+}\n+\n+void fun2(int32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (-x[i]) >> 30;\n+}\n+\n+/* { dg-final { scan-tree-dump-times {\\s+>\\s+\\{ 0, 0, 0, 0 \\}} 1 optimized } } */\n+/* { dg-final { scan-tree-dump-not {\\s+>>\\s+31} optimized } } */"}, {"sha": "19e9c06c349b3287610f817628f00938ece60bf7", "filename": "gcc/testsuite/gcc.dg/signbit-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70720c2382e687e192a9d666e80acb41bfda856/gcc%2Ftestsuite%2Fgcc.dg%2Fsignbit-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70720c2382e687e192a9d666e80acb41bfda856/gcc%2Ftestsuite%2Fgcc.dg%2Fsignbit-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsignbit-3.c?ref=d70720c2382e687e192a9d666e80acb41bfda856", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O1 --save-temps -fdump-tree-optimized\" } */\n+\n+#include <stdint.h>\n+\n+void fun1(int32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (-x[i]) >> 31;\n+}\n+\n+/* { dg-final { scan-tree-dump-times {\\s+>\\s+0;} 1 optimized } } */\n+/* { dg-final { scan-tree-dump-not {\\s+>>\\s+31} optimized } } */"}, {"sha": "bc459ba60a760bdf49e94dbec762f378c24fe9b5", "filename": "gcc/testsuite/gcc.dg/signbit-4.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70720c2382e687e192a9d666e80acb41bfda856/gcc%2Ftestsuite%2Fgcc.dg%2Fsignbit-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70720c2382e687e192a9d666e80acb41bfda856/gcc%2Ftestsuite%2Fgcc.dg%2Fsignbit-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsignbit-4.c?ref=d70720c2382e687e192a9d666e80acb41bfda856", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -fwrapv\" } */\n+\n+#include <stdint.h>\n+#include <limits.h>\n+#include <stdio.h>\n+\n+#ifndef N\n+#define N 65\n+#endif\n+\n+#ifndef TYPE\n+#define TYPE int32_t\n+#endif\n+\n+#ifndef DEBUG\n+#define DEBUG 1\n+#endif\n+\n+#define BASE ((TYPE) -1 < 0 ? -126 : 4)\n+\n+__attribute__ ((noinline, noipa))\n+void fun1(TYPE *x, int n)\n+{\n+    for (int i = 0; i < n; i++)\n+      x[i] = (-x[i]) >> 31;\n+}\n+\n+__attribute__ ((noinline, noipa, optimize(\"O0\")))\n+void fun2(TYPE *x, int n)\n+{\n+    for (int i = 0; i < n; i++)\n+      x[i] = (-x[i]) >> 31;\n+}\n+\n+int main ()\n+{\n+  TYPE a[N];\n+  TYPE b[N];\n+\n+  a[0] = INT_MIN;\n+  b[0] = INT_MIN;\n+\n+  for (int i = 1; i < N; ++i)\n+    {\n+      a[i] = BASE + i * 13;\n+      b[i] = BASE + i * 13;\n+      if (DEBUG)\n+        printf (\"%d: 0x%x\\n\", i, a[i]);\n+    }\n+\n+  fun1 (a, N);\n+  fun2 (b, N);\n+\n+  for (int i = 0; i < N; ++i)\n+    {\n+      if (DEBUG)\n+        printf (\"%d = 0x%x == 0x%x\\n\", i, a[i], b[i]);\n+\n+      if (a[i] != b[i])\n+        __builtin_abort ();\n+    }\n+  return 0;\n+}\n+"}, {"sha": "22a92704773e3282759524b74d35196a477d43dd", "filename": "gcc/testsuite/gcc.dg/signbit-5.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70720c2382e687e192a9d666e80acb41bfda856/gcc%2Ftestsuite%2Fgcc.dg%2Fsignbit-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70720c2382e687e192a9d666e80acb41bfda856/gcc%2Ftestsuite%2Fgcc.dg%2Fsignbit-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsignbit-5.c?ref=d70720c2382e687e192a9d666e80acb41bfda856", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+#include <stdint.h>\n+#include <limits.h>\n+#include <stdio.h>\n+\n+#ifndef N\n+#define N 65\n+#endif\n+\n+#ifndef TYPE\n+#define TYPE int32_t\n+#endif\n+\n+#ifndef DEBUG\n+#define DEBUG 1\n+#endif\n+\n+#define BASE ((TYPE) -1 < 0 ? -126 : 4)\n+\n+__attribute__ ((noinline, noipa))\n+void fun1(TYPE *x, int n)\n+{\n+    for (int i = 0; i < n; i++)\n+      x[i] = (-x[i]) >> 31;\n+}\n+\n+__attribute__ ((noinline, noipa, optimize(\"O1\")))\n+void fun2(TYPE *x, int n)\n+{\n+    for (int i = 0; i < n; i++)\n+      x[i] = (-x[i]) >> 31;\n+}\n+\n+int main ()\n+{\n+  TYPE a[N];\n+  TYPE b[N];\n+\n+  a[0] = INT_MIN;\n+  b[0] = INT_MIN;\n+\n+  for (int i = 1; i < N; ++i)\n+    {\n+      a[i] = BASE + i * 13;\n+      b[i] = BASE + i * 13;\n+      if (DEBUG)\n+        printf (\"%d: 0x%x\\n\", i, a[i]);\n+    }\n+\n+  fun1 (a, N);\n+  fun2 (b, N);\n+\n+  for (int i = 0; i < N; ++i)\n+    {\n+      if (DEBUG)\n+        printf (\"%d = 0x%x == 0x%x\\n\", i, a[i], b[i]);\n+\n+      if (a[i] != b[i])\n+        __builtin_abort ();\n+    }\n+  return 0;\n+}\n+"}, {"sha": "da186624cfa057dfc3780c8af4f6b1335ba07e7e", "filename": "gcc/testsuite/gcc.dg/signbit-6.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70720c2382e687e192a9d666e80acb41bfda856/gcc%2Ftestsuite%2Fgcc.dg%2Fsignbit-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70720c2382e687e192a9d666e80acb41bfda856/gcc%2Ftestsuite%2Fgcc.dg%2Fsignbit-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsignbit-6.c?ref=d70720c2382e687e192a9d666e80acb41bfda856", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1\" } */\n+\n+#include <stdint.h>\n+#include <limits.h>\n+#include <stdio.h>\n+\n+#ifndef N\n+#define N 65\n+#endif\n+\n+#ifndef TYPE\n+#define TYPE int32_t\n+#endif\n+\n+#ifndef DEBUG\n+#define DEBUG 1\n+#endif\n+\n+#define BASE ((TYPE) -1 < 0 ? -126 : 4)\n+\n+__attribute__ ((noinline, noipa))\n+void fun1(TYPE *x, int n)\n+{\n+    for (int i = 0; i < n; i++)\n+      x[i] = (-x[i]) >> 31;\n+}\n+\n+__attribute__ ((noinline, noipa, optimize(\"O0\")))\n+void fun2(TYPE *x, int n)\n+{\n+    for (int i = 0; i < n; i++)\n+      x[i] = (-x[i]) >> 31;\n+}\n+\n+int main ()\n+{\n+  TYPE a[N];\n+  TYPE b[N];\n+\n+  a[0] = INT_MIN;\n+  b[0] = INT_MIN;\n+\n+  for (int i = 1; i < N; ++i)\n+    {\n+      a[i] = BASE + i * 13;\n+      b[i] = BASE + i * 13;\n+      if (DEBUG)\n+        printf (\"%d: 0x%x\\n\", i, a[i]);\n+    }\n+\n+  fun1 (a, N);\n+  fun2 (b, N);\n+\n+  if (DEBUG)\n+    printf (\"%d = 0x%x == 0x%x\\n\", 0, a[0], b[0]);\n+\n+  if (a[0] != 0x0 || b[0] != -1)\n+        __builtin_abort ();\n+\n+\n+  for (int i = 1; i < N; ++i)\n+    {\n+      if (DEBUG)\n+        printf (\"%d = 0x%x == 0x%x\\n\", i, a[i], b[i]);\n+\n+      if (a[i] != b[i])\n+        __builtin_abort ();\n+    }\n+  return 0;\n+}\n+"}, {"sha": "a5654d139cb019f52414ef440a05e550ae05f2a6", "filename": "gcc/testsuite/gcc.target/aarch64/signbit-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70720c2382e687e192a9d666e80acb41bfda856/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsignbit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70720c2382e687e192a9d666e80acb41bfda856/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsignbit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsignbit-1.c?ref=d70720c2382e687e192a9d666e80acb41bfda856", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#pragma GCC target \"+nosve\"\n+\n+void fun1(int32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (-x[i]) >> 31;\n+}\n+\n+void fun2(int32_t *x, int n)\n+{\n+    for (int i = 0; i < (n & -16); i++)\n+      x[i] = (-x[i]) >> 30;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tcmgt\\t} 1 } } */"}]}