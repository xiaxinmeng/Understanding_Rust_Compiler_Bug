{"sha": "4da97565d3c23bcced3f1f1512c4496c8ec68e2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRhOTc1NjVkM2MyM2JjY2VkM2YxZjE1MTJjNDQ5NmM4ZWM2OGUyYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-04-15T15:24:03Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-04-15T15:24:03Z"}, "message": "re PR c++/52748 ([C++11] N3276 changes to decltype)\n\n\tPR c++/52748\n\t* pt.c (tsubst) [DECLTYPE_TYPE]: If ~id is an expression\n\trather than a destructor name, it isn't an unqualified-name.\n\t(tsubst_copy_and_build): Pass down decltype_flag to operator\n\thandling code, too.\n\nFrom-SVN: r197982", "tree": {"sha": "b4245ad54be60b456349f28ff3b8b771b421be0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4245ad54be60b456349f28ff3b8b771b421be0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4da97565d3c23bcced3f1f1512c4496c8ec68e2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4da97565d3c23bcced3f1f1512c4496c8ec68e2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4da97565d3c23bcced3f1f1512c4496c8ec68e2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4da97565d3c23bcced3f1f1512c4496c8ec68e2b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a68329c23e76f311a22744e1b0d48421c4a5ec32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a68329c23e76f311a22744e1b0d48421c4a5ec32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a68329c23e76f311a22744e1b0d48421c4a5ec32"}], "stats": {"total": 95, "additions": 78, "deletions": 17}, "files": [{"sha": "209c9cb0ac0688f3257e6719b7e194260ea88450", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4da97565d3c23bcced3f1f1512c4496c8ec68e2b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4da97565d3c23bcced3f1f1512c4496c8ec68e2b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4da97565d3c23bcced3f1f1512c4496c8ec68e2b", "patch": "@@ -1,5 +1,11 @@\n 2013-04-15  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/52748\n+\t* pt.c (tsubst) [DECLTYPE_TYPE]: If ~id is an expression\n+\trather than a destructor name, it isn't an unqualified-name.\n+\t(tsubst_copy_and_build): Pass down decltype_flag to operator\n+\thandling code, too.\n+\n \tPR c++/56388\n \t* semantics.c (insert_capture_proxy): Just use index 1 in the\n \tstmt_list_stack."}, {"sha": "36520a471e305b514a23d5245d6e148922b7ff80", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4da97565d3c23bcced3f1f1512c4496c8ec68e2b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4da97565d3c23bcced3f1f1512c4496c8ec68e2b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4da97565d3c23bcced3f1f1512c4496c8ec68e2b", "patch": "@@ -11782,8 +11782,17 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \telse if (DECLTYPE_FOR_LAMBDA_PROXY (t))\n \t  type = lambda_proxy_type (type);\n \telse\n-\t  type = finish_decltype_type\n-\t    (type, DECLTYPE_TYPE_ID_EXPR_OR_MEMBER_ACCESS_P (t), complain);\n+\t  {\n+\t    bool id = DECLTYPE_TYPE_ID_EXPR_OR_MEMBER_ACCESS_P (t);\n+\t    if (id && TREE_CODE (DECLTYPE_TYPE_EXPR (t)) == BIT_NOT_EXPR\n+\t\t&& EXPR_P (type))\n+\t      /* In a template ~id could be either a complement expression\n+\t\t or an unqualified-id naming a destructor; if instantiating\n+\t\t it produces an expression, it's not an id-expression or\n+\t\t member access.  */\n+\t      id = false;\n+\t    type = finish_decltype_type (type, id, complain);\n+\t  }\n \treturn cp_build_qualified_type_real (type,\n \t\t\t\t\t     cp_type_quals (t)\n \t\t\t\t\t     | cp_type_quals (type),\n@@ -13431,9 +13440,8 @@ tsubst_copy_and_build (tree t,\n \n   /* N3276 decltype magic only applies to calls at the top level or on the\n      right side of a comma.  */\n-  if (TREE_CODE (t) != CALL_EXPR\n-      && TREE_CODE (t) != COMPOUND_EXPR)\n-    complain &= ~tf_decltype;\n+  tsubst_flags_t decltype_flag = (complain & tf_decltype);\n+  complain &= ~tf_decltype;\n \n   switch (TREE_CODE (t))\n     {\n@@ -13521,7 +13529,8 @@ tsubst_copy_and_build (tree t,\n \t      r = convert_from_reference (r);\n \t  }\n \telse\n-\t  r = build_x_indirect_ref (input_location, r, RO_UNARY_STAR, complain);\n+\t  r = build_x_indirect_ref (input_location, r, RO_UNARY_STAR,\n+\t\t\t\t    complain|decltype_flag);\n \tRETURN (r);\n       }\n \n@@ -13598,7 +13607,8 @@ tsubst_copy_and_build (tree t,\n     case POSTINCREMENT_EXPR:\n       op1 = tsubst_non_call_postfix_expression (TREE_OPERAND (t, 0),\n \t\t\t\t\t\targs, complain, in_decl);\n-      RETURN (build_x_unary_op (input_location, TREE_CODE (t), op1, complain));\n+      RETURN (build_x_unary_op (input_location, TREE_CODE (t), op1,\n+\t\t\t\tcomplain|decltype_flag));\n \n     case PREDECREMENT_EXPR:\n     case PREINCREMENT_EXPR:\n@@ -13610,7 +13620,8 @@ tsubst_copy_and_build (tree t,\n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n       RETURN (build_x_unary_op (input_location, TREE_CODE (t),\n-\t\t\t       RECUR (TREE_OPERAND (t, 0)), complain));\n+\t\t\t       RECUR (TREE_OPERAND (t, 0)),\n+\t\t\t\tcomplain|decltype_flag));\n \n     case FIX_TRUNC_EXPR:\n       RETURN (cp_build_unary_op (FIX_TRUNC_EXPR, RECUR (TREE_OPERAND (t, 0)),\n@@ -13627,7 +13638,8 @@ tsubst_copy_and_build (tree t,\n       else\n \top1 = tsubst_non_call_postfix_expression (op1, args, complain,\n \t\t\t\t\t\t  in_decl);\n-      RETURN (build_x_unary_op (input_location, ADDR_EXPR, op1, complain));\n+      RETURN (build_x_unary_op (input_location, ADDR_EXPR, op1,\n+\t\t\t\tcomplain|decltype_flag));\n \n     case PLUS_EXPR:\n     case MINUS_EXPR:\n@@ -13676,7 +13688,7 @@ tsubst_copy_and_build (tree t,\n \t    ? ERROR_MARK\n \t    : TREE_CODE (TREE_OPERAND (t, 1))),\n \t   /*overload=*/NULL,\n-\t   complain);\n+\t   complain|decltype_flag);\n \tif (EXPR_P (r) && TREE_NO_WARNING (t))\n \t  TREE_NO_WARNING (r) = TREE_NO_WARNING (t);\n \n@@ -13692,7 +13704,8 @@ tsubst_copy_and_build (tree t,\n       op1 = tsubst_non_call_postfix_expression (TREE_OPERAND (t, 0),\n \t\t\t\t\t\targs, complain, in_decl);\n       RETURN (build_x_array_ref (EXPR_LOCATION (t), op1,\n-\t\t\t\tRECUR (TREE_OPERAND (t, 1)), complain));\n+\t\t\t\t RECUR (TREE_OPERAND (t, 1)),\n+\t\t\t\t complain|decltype_flag));\n \n     case SIZEOF_EXPR:\n       if (PACK_EXPANSION_P (TREE_OPERAND (t, 0)))\n@@ -13785,7 +13798,7 @@ tsubst_copy_and_build (tree t,\n \t   RECUR (TREE_OPERAND (t, 0)),\n \t   TREE_CODE (TREE_OPERAND (t, 1)),\n \t   RECUR (TREE_OPERAND (t, 2)),\n-\t   complain);\n+\t   complain|decltype_flag);\n \t/* TREE_NO_WARNING must be set if either the expression was\n \t   parenthesized or it uses an operator such as >>= rather\n \t   than plain assignment.  In the former case, it was already\n@@ -13874,7 +13887,7 @@ tsubst_copy_and_build (tree t,\n \tRETURN (build_x_compound_expr (EXPR_LOCATION (t),\n \t\t\t\t       op0,\n \t\t\t\t       RECUR (TREE_OPERAND (t, 1)),\n-\t\t\t\t       complain));\n+\t\t\t\t       complain|decltype_flag));\n       }\n \n     case CALL_EXPR:\n@@ -13886,10 +13899,6 @@ tsubst_copy_and_build (tree t,\n \tbool koenig_p;\n \ttree ret;\n \n-\t/* Don't pass tf_decltype down to subexpressions.  */\n-\ttsubst_flags_t decltype_flag = (complain & tf_decltype);\n-\tcomplain &= ~tf_decltype;\n-\n \tfunction = CALL_EXPR_FN (t);\n \t/* When we parsed the expression,  we determined whether or\n \t   not Koenig lookup should be performed.  */"}, {"sha": "27797a2fa314df928655eb380ac8791a2ec07537", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype-call3.C", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4da97565d3c23bcced3f1f1512c4496c8ec68e2b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-call3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4da97565d3c23bcced3f1f1512c4496c8ec68e2b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-call3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-call3.C?ref=4da97565d3c23bcced3f1f1512c4496c8ec68e2b", "patch": "@@ -43,6 +43,50 @@ A operator==(B,B);\n A operator->*(B,B);\n \n #define TRY(E) static_cast<decltype(E)*>(0)\n+\n+template <class B>\n+void f()\n+{\n+  B b;\n+  TRY(b(0));\n+  TRY(b[0]);\n+  TRY(b=0);\n+  TRY(b+=0);\n+  TRY(b-=0);\n+  TRY(b*=0);\n+  TRY(b/=0);\n+  TRY(b^=0);\n+  TRY(b&=0);\n+  TRY(b|=0);\n+  TRY(b<<=0);\n+  TRY(b>>=0);\n+\n+  TRY(-b);\n+  TRY(+b);\n+  TRY(*b);\n+  TRY(&b);\n+  TRY(!b);\n+  TRY(~b);\n+  TRY(++b);\n+  TRY(--b);\n+\n+  TRY(b+b);\n+  TRY(b-b);\n+  TRY(b*b);\n+  TRY(b/b);\n+  TRY(b%b);\n+  TRY(b^b);\n+  TRY(b&b);\n+  TRY(b|b);\n+  TRY(b>b);\n+  TRY(b<b);\n+  TRY((b,b));\n+  TRY(b<<b);\n+  TRY(b>>b);\n+  TRY(b==b);\n+  TRY(b->*b);\n+}\n+\n int main()\n {\n   B b;\n@@ -83,4 +127,6 @@ int main()\n   TRY(b>>b);\n   TRY(b==b);\n   TRY(b->*b);\n+\n+  f<B>();\n }"}]}