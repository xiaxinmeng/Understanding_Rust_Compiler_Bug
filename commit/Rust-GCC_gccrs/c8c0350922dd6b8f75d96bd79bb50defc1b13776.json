{"sha": "c8c0350922dd6b8f75d96bd79bb50defc1b13776", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhjMDM1MDkyMmRkNmI4Zjc1ZDk2YmQ3OWJiNTBkZWZjMWIxMzc3Ng==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-05-23T07:43:13Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-23T07:43:13Z"}, "message": "i386.c (get_pic_label_name): New.\n\n        * config/i386/i386.c (get_pic_label_name): New.\n        (load_pic_register): Remove.\n        (output_set_got): New.\n        (ix86_expand_prologue): Use gen_set_got; mark insn REG_MAYBE_DEAD.\n        * config/i386/i386.md (UNSPEC_SET_GOT): New.\n        (UNSPECV_PROLOGUE_SET_GOT, UNSPECV_PROLOGUE_GET_PC): Remove.\n        (prologue_set_got, prologue_get_pc): Remove.\n        (set_got, set_got_nopic, set_got_deep, set_got_nodeep): New.\n        (builtin_setjmp_receiver): Use gen_set_got.\n        * config/i386/i386-protos.h: Update.\n\nFrom-SVN: r53773", "tree": {"sha": "f1439a904007439715062fb9bf92dd5024deb42f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1439a904007439715062fb9bf92dd5024deb42f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8c0350922dd6b8f75d96bd79bb50defc1b13776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8c0350922dd6b8f75d96bd79bb50defc1b13776", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8c0350922dd6b8f75d96bd79bb50defc1b13776", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8c0350922dd6b8f75d96bd79bb50defc1b13776/comments", "author": null, "committer": null, "parents": [{"sha": "d51f363255ccc73e798b73d789d62968cb9aee29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d51f363255ccc73e798b73d789d62968cb9aee29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d51f363255ccc73e798b73d789d62968cb9aee29"}], "stats": {"total": 148, "additions": 91, "deletions": 57}, "files": [{"sha": "cb83350e9ea290e48378b3a6fa0af880b85aa554", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c0350922dd6b8f75d96bd79bb50defc1b13776/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c0350922dd6b8f75d96bd79bb50defc1b13776/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8c0350922dd6b8f75d96bd79bb50defc1b13776", "patch": "@@ -1,3 +1,16 @@\n+2002-05-23  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.c (get_pic_label_name): New.\n+\t(load_pic_register): Remove.\n+\t(output_set_got): New.\n+\t(ix86_expand_prologue): Use gen_set_got; mark insn REG_MAYBE_DEAD.\n+\t* config/i386/i386.md (UNSPEC_SET_GOT): New.\n+\t(UNSPECV_PROLOGUE_SET_GOT, UNSPECV_PROLOGUE_GET_PC): Remove.\n+\t(prologue_set_got, prologue_get_pc): Remove.\n+\t(set_got, set_got_nopic, set_got_deep, set_got_nodeep): New.\n+\t(builtin_setjmp_receiver): Use gen_set_got.\n+\t* config/i386/i386-protos.h: Update.\n+\n Thu May 23 09:22:23 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* gcse.c (hash_expr): Do not use alias set for hashing."}, {"sha": "21babe91c2d198410398e7eee64f197dffb39e41", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c0350922dd6b8f75d96bd79bb50defc1b13776/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c0350922dd6b8f75d96bd79bb50defc1b13776/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=c8c0350922dd6b8f75d96bd79bb50defc1b13776", "patch": "@@ -28,7 +28,6 @@ extern int ix86_frame_pointer_required PARAMS ((void));\n extern void ix86_setup_frame_addresses PARAMS ((void));\n \n extern void ix86_asm_file_end PARAMS ((FILE *));\n-extern void load_pic_register PARAMS ((void));\n extern HOST_WIDE_INT ix86_initial_elimination_offset PARAMS((int, int));\n extern void ix86_expand_prologue PARAMS ((void));\n extern void ix86_expand_epilogue PARAMS ((int));\n@@ -96,6 +95,7 @@ extern void print_operand_address PARAMS ((FILE*, rtx));\n extern void split_di PARAMS ((rtx[], int, rtx[], rtx[]));\n extern void split_ti PARAMS ((rtx[], int, rtx[], rtx[]));\n \n+extern const char *output_set_got PARAMS ((rtx));\n extern const char *output_387_binary_op PARAMS ((rtx, rtx*));\n extern const char *output_fix_trunc PARAMS ((rtx, rtx*));\n extern const char *output_fp_compare PARAMS ((rtx, rtx*, int, int));"}, {"sha": "96d0916d86a6a1096599cf59ffa441f8eb5b9758", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 47, "deletions": 18, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c0350922dd6b8f75d96bd79bb50defc1b13776/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c0350922dd6b8f75d96bd79bb50defc1b13776/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c8c0350922dd6b8f75d96bd79bb50defc1b13776", "patch": "@@ -647,6 +647,7 @@ static char internal_label_prefix[16];\n static int internal_label_prefix_len;\n \f\n static int local_symbolic_operand PARAMS ((rtx, enum machine_mode));\n+static const char *get_pic_label_name PARAMS ((void));\n static void output_pic_addr_const PARAMS ((FILE *, rtx, int));\n static void put_condition_code PARAMS ((enum rtx_code, enum machine_mode,\n \t\t\t\t       int, int, FILE *));\n@@ -3795,6 +3796,14 @@ ix86_setup_frame_addresses ()\n \f\n static char pic_label_name[32];\n \n+static const char *\n+get_pic_label_name ()\n+{\n+  if (! pic_label_name[0])\n+    ASM_GENERATE_INTERNAL_LABEL (pic_label_name, \"LPR\", 0);\n+  return pic_label_name;\n+}\n+\n /* This function generates code for -fpic that loads %ebx with\n    the return address of the caller and then returns.  */\n \n@@ -3847,33 +3856,45 @@ ix86_asm_file_end (file)\n   output_asm_insn (\"ret\", xops);\n }\n \n-void\n-load_pic_register ()\n-{\n-  rtx gotsym, pclab;\n+/* Emit code for the SET_GOT patterns.  */\n \n-  if (TARGET_64BIT)\n-    abort ();\n+const char *\n+output_set_got (dest)\n+     rtx dest;\n+{\n+  rtx xops[3];\n \n-  gotsym = gen_rtx_SYMBOL_REF (Pmode, \"_GLOBAL_OFFSET_TABLE_\");\n+  xops[0] = dest;\n+  xops[1] = gen_rtx_SYMBOL_REF (Pmode, \"_GLOBAL_OFFSET_TABLE_\");\n \n-  if (TARGET_DEEP_BRANCH_PREDICTION)\n+  if (! TARGET_DEEP_BRANCH_PREDICTION || !flag_pic)\n     {\n-      if (! pic_label_name[0])\n-\tASM_GENERATE_INTERNAL_LABEL (pic_label_name, \"LPR\", 0);\n-      pclab = gen_rtx_MEM (QImode, gen_rtx_SYMBOL_REF (Pmode, pic_label_name));\n+      xops[2] = gen_rtx_LABEL_REF (Pmode, gen_label_rtx ());\n+\n+      if (!flag_pic)\n+\toutput_asm_insn (\"mov{l}\\t{%2, %0|%0, %2}\", xops);\n+      else\n+\toutput_asm_insn (\"call\\t%a2\", xops);\n+\n+      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",\n+\t\t\t\t CODE_LABEL_NUMBER (XEXP (xops[2], 0)));\n+\n+      if (flag_pic)\n+\toutput_asm_insn (\"pop{l}\\t%0\", xops);\n     }\n   else\n     {\n-      pclab = gen_rtx_LABEL_REF (VOIDmode, gen_label_rtx ());\n+      xops[2] = gen_rtx_SYMBOL_REF (Pmode, get_pic_label_name ());\n+      xops[2] = gen_rtx_MEM (QImode, xops[2]);\n+      output_asm_insn (\"call\\t%X2\", xops);\n     }\n \n-  emit_insn (gen_prologue_get_pc (pic_offset_table_rtx, pclab));\n-\n-  if (! TARGET_DEEP_BRANCH_PREDICTION)\n-    emit_insn (gen_popsi1 (pic_offset_table_rtx));\n+  if (!flag_pic || TARGET_DEEP_BRANCH_PREDICTION)\n+    output_asm_insn (\"add{l}\\t{%1, %0|%0, %1}\", xops);\n+  else\n+    output_asm_insn (\"add{l}\\t{%1+[.-%X2], %0|%0, %a1+(.-%X2)}\", xops);\n \n-  emit_insn (gen_prologue_set_got (pic_offset_table_rtx, gotsym, pclab));\n+  return \"\";\n }\n \n /* Generate an \"push\" pattern for input ARG.  */\n@@ -4197,7 +4218,15 @@ ix86_expand_prologue ()\n #endif\n \n   if (pic_reg_used)\n-    load_pic_register ();\n+    {\n+      insn = emit_insn (gen_set_got (pic_offset_table_rtx));\n+\n+      /* ??? The current_function_uses_pic_offset_table flag is woefully\n+\t inaccurate, as it isn't updated as code gets deleted.  Allow the\n+\t thing to be removed.  A better solution would be to actually get\n+\t proper liveness for ebx, as then we won't save/restore it too.  */\n+      REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_MAYBE_DEAD, const0_rtx, NULL);\n+    }\n \n   /* If we are profiling, make sure no instructions are scheduled before\n      the call to mcount.  However, if -fpic, the above call will have"}, {"sha": "a385ead7ad573424a493c12bd47e41789280c49a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 30, "deletions": 38, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c0350922dd6b8f75d96bd79bb50defc1b13776/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c0350922dd6b8f75d96bd79bb50defc1b13776/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c8c0350922dd6b8f75d96bd79bb50defc1b13776", "patch": "@@ -69,6 +69,7 @@\n    (UNSPEC_SSE_PROLOGUE_SAVE\t13)\n    (UNSPEC_FLDCW\t\t14)\n    (UNSPEC_GOTPCREL\t\t15)\n+   (UNSPEC_SET_GOT\t\t16)\n \n    ; For SSE/MMX support:\n    (UNSPEC_FIX\t\t\t30)\n@@ -97,8 +98,6 @@\n \n (define_constants\n   [(UNSPECV_BLOCKAGE\t\t0)\n-   (UNSPECV_PROLOGUE_SET_GOT\t1)\n-   (UNSPECV_PROLOGUE_GET_PC\t2)\n    (UNSPECV_EH_RETURN\t\t13)\n    (UNSPECV_EMMS\t\t31)\n    (UNSPECV_LDMXCSR\t\t37)\n@@ -13120,46 +13119,39 @@\n   \"\"\n   \"ix86_expand_prologue (); DONE;\")\n \n-(define_insn \"prologue_set_got\"\n+(define_expand \"set_got\"\n+  [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t\t   (unspec:SI [(const_int 0)] UNSPEC_SET_GOT))\n+\t      (clobber (reg:CC 17))])]\n+  \"!TARGET_64BIT\"\n+  \"\")\n+\n+(define_insn \"*set_got_nopic\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(unspec_volatile:SI\n-\t [(plus:SI (match_dup 0)\n-\t\t   (plus:SI (match_operand:SI 1 \"symbolic_operand\" \"\")\n-\t\t\t    (minus:SI (pc) (match_operand 2 \"\" \"\"))))]\n-\t UNSPECV_PROLOGUE_SET_GOT))\n+\t(unspec:SI [(const_int 0)] UNSPEC_SET_GOT))\n    (clobber (reg:CC 17))]\n-  \"!TARGET_64BIT\"\n-{\n-  if (GET_CODE (operands[2]) == LABEL_REF)\n-     operands[2] = XEXP (operands[2], 0);\n-  if (TARGET_DEEP_BRANCH_PREDICTION) \n-    return \"add{l}\\t{%1, %0|%0, %1}\";\n-  else  \n-    return \"add{l}\\t{%1+[.-%X2], %0|%0, %a1+(.-%X2)}\";\n-}\n-  [(set_attr \"type\" \"alu\")\n-   ; Since this insn may have two constant operands, we must set the\n-   ; length manually.\n-   (set_attr \"length_immediate\" \"4\")\n-   (set_attr \"mode\" \"SI\")])\n+  \"!TARGET_64BIT && !flag_pic\"\n+  { return output_set_got (operands[0]); }\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"11\")])\n \n-(define_insn \"prologue_get_pc\"\n+(define_insn \"*set_got_deep\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=b\")\n+\t(unspec:SI [(const_int 0)] UNSPEC_SET_GOT))\n+   (clobber (reg:CC 17))]\n+  \"!TARGET_64BIT && TARGET_DEEP_BRANCH_PREDICTION\"\n+  { return output_set_got (operands[0]); }\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"11\")])\n+\n+(define_insn \"*set_got_nodeep\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-    (unspec_volatile:SI [(plus:SI (pc) (match_operand 1 \"\" \"\"))]\n-\t\t\tUNSPECV_PROLOGUE_GET_PC))]\n+\t(unspec:SI [(const_int 0)] UNSPEC_SET_GOT))\n+   (clobber (reg:CC 17))]\n   \"!TARGET_64BIT\"\n-{\n-  if (GET_CODE (operands[1]) == LABEL_REF)\n-    operands[1] = XEXP (operands[1], 0);\n-  output_asm_insn (\"call\\t%X1\", operands);\n-  if (! TARGET_DEEP_BRANCH_PREDICTION)\n-    {\n-      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",\n-\t\t\t\t CODE_LABEL_NUMBER (operands[1]));\n-    }\n-  RET;\n-}\n-  [(set_attr \"type\" \"multi\")])\n+  { return output_set_got (operands[0]); }\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"12\")])\n \n (define_expand \"epilogue\"\n   [(const_int 1)]\n@@ -16212,7 +16204,7 @@\n   [(label_ref (match_operand 0 \"\" \"\"))]\n   \"!TARGET_64BIT && flag_pic\"\n {\n-  load_pic_register ();\n+  emit_insn (gen_set_got (pic_offset_table_rtx));\n   DONE;\n })\n \f"}]}