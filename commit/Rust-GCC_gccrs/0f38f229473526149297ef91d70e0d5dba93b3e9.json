{"sha": "0f38f229473526149297ef91d70e0d5dba93b3e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYzOGYyMjk0NzM1MjYxNDkyOTdlZjkxZDcwZTBkNWRiYTkzYjNlOQ==", "commit": {"author": {"name": "Tejas Belagod", "email": "tejas.belagod@arm.com", "date": "2010-09-15T11:18:07Z"}, "committer": {"name": "Tejas Belagod", "email": "belagod@gcc.gnu.org", "date": "2010-09-15T11:18:07Z"}, "message": "neon.md (vec_pack_trunc_<mode>): Instruction pattern for vmovn.\n\ngcc/\n\n2010-09-15  Tejas Belagod  <tejas.belagod@arm.com>\n\n        * config/arm/neon.md (vec_pack_trunc_<mode>): Instruction\n        pattern for vmovn. Expansion in case of non \n        -mvectorize-with-neon-quad.\n        (neon_vec_pack_trunc_<mode>): Instruction pattern for vmovn for\n        non- -mvectorize-with-neon-quad case.\n        (move_lo_quad_<mode>): New expansion to vmov into low part.\n        (move_hi_quad_<mode>): New expansion to vmov into high part.\n        (move_lo_quad_v4si): Refactor to move_lo_quad_<mode> expansion.\n        (move_lo_quad_v4sf): Likewise.\n        (move_lo_quad_v8hi): Likewise.\n        (neon_move_lo_quad_<mode>): Instruction pattern for vmov into\n        low part.\n        (neon_move_hi_quad_<mode>): Instruction pattern for vmov into\n        high part.\n        * config/arm/iterators.md (ANY128): New mode iterator.\n        (V_narrow_pack): New mode attribute.\n        (V_HALF): Add attribute.\n        (V_DOUBLE): Add attribute.\n        (V_mode_nunits): Add attribute.\n\ngcc/testsuite\n\n2010-09-15  Tejas Belagod  <tejas.belagod@arm.com>\n\n        * lib/target-supports.exp\n        (check_effective_target_vect_pack_trunc): Set vect_pack_trunc\n        supported flag to true for neon.\n\nFrom-SVN: r164302", "tree": {"sha": "0d24d029120d7f37c483aa98d5173116ba105a00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d24d029120d7f37c483aa98d5173116ba105a00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f38f229473526149297ef91d70e0d5dba93b3e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f38f229473526149297ef91d70e0d5dba93b3e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f38f229473526149297ef91d70e0d5dba93b3e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f38f229473526149297ef91d70e0d5dba93b3e9/comments", "author": {"login": "tejas-belagod-arm", "id": 92718852, "node_id": "U_kgDOBYbHBA", "avatar_url": "https://avatars.githubusercontent.com/u/92718852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tejas-belagod-arm", "html_url": "https://github.com/tejas-belagod-arm", "followers_url": "https://api.github.com/users/tejas-belagod-arm/followers", "following_url": "https://api.github.com/users/tejas-belagod-arm/following{/other_user}", "gists_url": "https://api.github.com/users/tejas-belagod-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/tejas-belagod-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tejas-belagod-arm/subscriptions", "organizations_url": "https://api.github.com/users/tejas-belagod-arm/orgs", "repos_url": "https://api.github.com/users/tejas-belagod-arm/repos", "events_url": "https://api.github.com/users/tejas-belagod-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/tejas-belagod-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0064e82503bc7ab7139db3eedc6870bfb94b1176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0064e82503bc7ab7139db3eedc6870bfb94b1176", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0064e82503bc7ab7139db3eedc6870bfb94b1176"}], "stats": {"total": 173, "additions": 120, "deletions": 53}, "files": [{"sha": "f68cc5d8ca0624cdb9abfdc8270ff48a0a92c28b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f38f229473526149297ef91d70e0d5dba93b3e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f38f229473526149297ef91d70e0d5dba93b3e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f38f229473526149297ef91d70e0d5dba93b3e9", "patch": "@@ -1,3 +1,25 @@\n+2010-09-15  Tejas Belagod  <tejas.belagod@arm.com>\n+\n+\t* config/arm/neon.md (vec_pack_trunc_<mode>): Instruction\n+\tpattern for vmovn. Expansion in case of non \n+\t-mvectorize-with-neon-quad.\n+\t(neon_vec_pack_trunc_<mode>): Instruction pattern for vmovn for\n+\tnon- -mvectorize-with-neon-quad case.\n+\t(move_lo_quad_<mode>): New expansion to vmov into low part.\n+\t(move_hi_quad_<mode>): New expansion to vmov into high part.\n+\t(move_lo_quad_v4si): Refactor to move_lo_quad_<mode> expansion.\n+\t(move_lo_quad_v4sf): Likewise.\n+\t(move_lo_quad_v8hi): Likewise.\n+\t(neon_move_lo_quad_<mode>): Instruction pattern for vmov into\n+\tlow part.\n+\t(neon_move_hi_quad_<mode>): Instruction pattern for vmov into\n+\thigh part.\n+\t* config/arm/iterators.md (ANY128): New mode iterator.\n+\t(V_narrow_pack): New mode attribute.\n+\t(V_HALF): Add attribute.\n+\t(V_DOUBLE): Add attribute.\n+\t(V_mode_nunits): Add attribute.\n+\n 2010-09-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/alpha/alpha.c (alpha_expand_prologue): If stack checking"}, {"sha": "8e9f1001aba6377db311b81df4b8077b05081b7f", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f38f229473526149297ef91d70e0d5dba93b3e9/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f38f229473526149297ef91d70e0d5dba93b3e9/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=0f38f229473526149297ef91d70e0d5dba93b3e9", "patch": "@@ -28,6 +28,8 @@\n ;; registers.\n (define_mode_iterator ANY64 [DI DF V8QI V4HI V2SI V2SF])\n \n+(define_mode_iterator ANY128 [V2DI V2DF V16QI V8HI V4SI V4SF])\n+\n ;; A list of integer modes that are up to one word long\n (define_mode_iterator QHSI [QI HI SI])\n \n@@ -227,9 +229,13 @@\n ;; Narrower modes with the same number of elements.\n (define_mode_attr V_narrow [(V8HI \"V8QI\") (V4SI \"V4HI\") (V2DI \"V2SI\")])\n \n+;; Narrower modes with double the number of elements.\n+(define_mode_attr V_narrow_pack [(V4SI \"V8HI\") (V8HI \"V16QI\") (V2DI \"V4SI\")\n+\t\t\t\t (V4HI \"V8QI\") (V2SI \"V4HI\")  (DI \"V2SI\")])\n+\n ;; Modes with half the number of equal-sized elements.\n (define_mode_attr V_HALF [(V16QI \"V8QI\") (V8HI \"V4HI\")\n-              (V4SI  \"V2SI\") (V4SF \"V2SF\")\n+              (V4SI  \"V2SI\") (V4SF \"V2SF\") (V2DF \"DF\")\n                           (V2DI \"DI\")])\n \n ;; Same, but lower-case.\n@@ -239,7 +245,7 @@\n \n ;; Modes with twice the number of equal-sized elements.\n (define_mode_attr V_DOUBLE [(V8QI \"V16QI\") (V4HI \"V8HI\")\n-                (V2SI \"V4SI\") (V2SF \"V4SF\")\n+                (V2SI \"V4SI\") (V2SF \"V4SF\") (DF \"V2DF\")\n                             (DI \"V2DI\")])\n \n ;; Same, but lower-case.\n@@ -362,7 +368,8 @@\n                                  (V4HI \"4\") (V8HI \"8\")\n                                  (V2SI \"2\") (V4SI \"4\")\n                                  (V2SF \"2\") (V4SF \"4\")\n-                                 (DI \"1\")   (V2DI \"2\")])\n+                                 (DI \"1\")   (V2DI \"2\")\n+                                 (DF \"1\")   (V2DF \"2\")])\n \n ;; Same as V_widen, but lower-case.\n (define_mode_attr V_widen_l [(V8QI \"v8hi\") (V4HI \"v4si\") ( V2SI \"v2di\")])"}, {"sha": "3bb74a2d3ee8dc7ade1ec8135de6f0443c53c2b1", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 80, "deletions": 49, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f38f229473526149297ef91d70e0d5dba93b3e9/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f38f229473526149297ef91d70e0d5dba93b3e9/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=0f38f229473526149297ef91d70e0d5dba93b3e9", "patch": "@@ -1117,12 +1117,13 @@\n ; vector registers. Make an attempt at removing unnecessary moves, though\n ; we're really at the mercy of the register allocator.\n \n-(define_insn \"move_lo_quad_v4si\"\n-  [(set (match_operand:V4SI 0 \"s_register_operand\" \"+w\")\n-        (vec_concat:V4SI\n-          (match_operand:V2SI 1 \"s_register_operand\" \"w\")\n-          (vec_select:V2SI (match_dup 0)\n-\t\t\t   (parallel [(const_int 2) (const_int 3)]))))]\n+(define_insn \"neon_move_lo_quad_<mode>\"\n+  [(set (match_operand:ANY128 0 \"s_register_operand\" \"+w\")\n+        (vec_concat:ANY128\n+          (match_operand:<V_HALF> 1 \"s_register_operand\" \"w\")\n+          (vec_select:<V_HALF> \n+\t\t(match_dup 0)\n+\t        (match_operand:ANY128 2 \"vect_par_constant_high\" \"\"))))]\n   \"TARGET_NEON\"\n {\n   int dest = REGNO (operands[0]);\n@@ -1136,66 +1137,61 @@\n   [(set_attr \"neon_type\" \"neon_bp_simple\")]\n )\n \n-(define_insn \"move_lo_quad_v4sf\"\n-  [(set (match_operand:V4SF 0 \"s_register_operand\" \"+w\")\n-        (vec_concat:V4SF\n-          (match_operand:V2SF 1 \"s_register_operand\" \"w\")\n-          (vec_select:V2SF (match_dup 0)\n-\t\t\t   (parallel [(const_int 2) (const_int 3)]))))]\n+(define_insn \"neon_move_hi_quad_<mode>\"\n+  [(set (match_operand:ANY128 0 \"s_register_operand\" \"+w\")\n+        (vec_concat:ANY128\n+          (match_operand:<V_HALF> 1 \"s_register_operand\" \"w\")\n+          (vec_select:<V_HALF>\n+\t\t(match_dup 0)\n+\t        (match_operand:ANY128 2 \"vect_par_constant_low\" \"\"))))]\n   \"TARGET_NEON\"\n {\n   int dest = REGNO (operands[0]);\n   int src = REGNO (operands[1]);\n \n   if (dest != src)\n-    return \"vmov\\t%e0, %P1\";\n+    return \"vmov\\t%f0, %P1\";\n   else\n     return \"\";\n }\n   [(set_attr \"neon_type\" \"neon_bp_simple\")]\n )\n \n-(define_insn \"move_lo_quad_v8hi\"\n-  [(set (match_operand:V8HI 0 \"s_register_operand\" \"+w\")\n-        (vec_concat:V8HI\n-          (match_operand:V4HI 1 \"s_register_operand\" \"w\")\n-          (vec_select:V4HI (match_dup 0)\n-                           (parallel [(const_int 4) (const_int 5)\n-                                      (const_int 6) (const_int 7)]))))]\n-  \"TARGET_NEON\"\n+(define_expand \"move_hi_quad_<mode>\"\n+ [(match_operand:ANY128 0 \"s_register_operand\" \"\")\n+  (match_operand:<V_HALF> 1 \"s_register_operand\" \"\")]\n+ \"TARGET_NEON\"\n {\n-  int dest = REGNO (operands[0]);\n-  int src = REGNO (operands[1]);\n+  rtvec v = rtvec_alloc (<V_mode_nunits>/2);\n+  rtx t1;\n+  int i;\n \n-  if (dest != src)\n-    return \"vmov\\t%e0, %P1\";\n-  else\n-    return \"\";\n-}\n-  [(set_attr \"neon_type\" \"neon_bp_simple\")]\n-)\n+  for (i=0; i < (<V_mode_nunits>/2); i++)\n+     RTVEC_ELT (v, i) = GEN_INT (i);\n \n-(define_insn \"move_lo_quad_v16qi\"\n-  [(set (match_operand:V16QI 0 \"s_register_operand\" \"+w\")\n-        (vec_concat:V16QI\n-          (match_operand:V8QI 1 \"s_register_operand\" \"w\")\n-          (vec_select:V8QI (match_dup 0)\n-                           (parallel [(const_int 8)  (const_int 9)\n-                                      (const_int 10) (const_int 11)\n-                                      (const_int 12) (const_int 13)\n-                                      (const_int 14) (const_int 15)]))))]\n-  \"TARGET_NEON\"\n+  t1 = gen_rtx_PARALLEL (<MODE>mode, v);\n+  emit_insn (gen_neon_move_hi_quad_<mode> (operands[0], operands[1], t1));\n+\n+  DONE;\n+})\n+\n+(define_expand \"move_lo_quad_<mode>\"\n+ [(match_operand:ANY128 0 \"s_register_operand\" \"\")\n+  (match_operand:<V_HALF> 1 \"s_register_operand\" \"\")]\n+ \"TARGET_NEON\"\n {\n-  int dest = REGNO (operands[0]);\n-  int src = REGNO (operands[1]);\n+  rtvec v = rtvec_alloc (<V_mode_nunits>/2);\n+  rtx t1;\n+  int i;\n \n-  if (dest != src)\n-    return \"vmov\\t%e0, %P1\";\n-  else\n-    return \"\";\n-}\n-  [(set_attr \"neon_type\" \"neon_bp_simple\")]\n-)\n+  for (i=0; i < (<V_mode_nunits>/2); i++)\n+     RTVEC_ELT (v, i) = GEN_INT ((<V_mode_nunits>/2) + i);\n+\n+  t1 = gen_rtx_PARALLEL (<MODE>mode, v);\n+  emit_insn (gen_neon_move_lo_quad_<mode> (operands[0], operands[1], t1));\n+\n+  DONE;\n+})\n \n ;; Reduction operations\n \n@@ -5390,3 +5386,38 @@\n \n  }\n )\n+\n+(define_insn \"vec_pack_trunc_<mode>\"\n+ [(set (match_operand:<V_narrow_pack> 0 \"register_operand\" \"=&w\")\n+       (vec_concat:<V_narrow_pack> \n+\t\t(truncate:<V_narrow> \n+\t\t\t(match_operand:VN 1 \"register_operand\" \"w\"))\n+\t\t(truncate:<V_narrow>\n+\t\t\t(match_operand:VN 2 \"register_operand\" \"w\"))))]\n+ \"TARGET_NEON\"\n+ \"vmovn.i<V_sz_elem>\\t%e0, %q1\\n\\tvmovn.i<V_sz_elem>\\t%f0, %q2\"\n+ [(set_attr \"neon_type\" \"neon_shift_1\")]\n+)\n+\n+;; For the non-quad case.\n+(define_insn \"neon_vec_pack_trunc_<mode>\"\n+ [(set (match_operand:<V_narrow> 0 \"register_operand\" \"=w\")\n+       (truncate:<V_narrow> (match_operand:VN 1 \"register_operand\" \"\")))]\n+ \"TARGET_NEON\"\n+ \"vmovn.i<V_sz_elem>\\t%0, %q1\"\n+ [(set_attr \"neon_type\" \"neon_shift_1\")]\n+)\n+\n+(define_expand \"vec_pack_trunc_<mode>\"\n+ [(match_operand:<V_narrow_pack> 0 \"register_operand\" \"\")\n+  (match_operand:VSHFT 1 \"register_operand\" \"\")\n+  (match_operand:VSHFT 2 \"register_operand\")]\n+ \"TARGET_NEON\"\n+{\n+  rtx tempreg = gen_reg_rtx (<V_DOUBLE>mode);\n+  \n+  emit_insn (gen_move_lo_quad_<V_double> (tempreg, operands[1])); \n+  emit_insn (gen_move_hi_quad_<V_double> (tempreg, operands[2])); \n+  emit_insn (gen_neon_vec_pack_trunc_<V_double> (operands[0], tempreg));\n+  DONE;\n+})"}, {"sha": "0aaea14ebaf532ab51321df378434afe41578808", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f38f229473526149297ef91d70e0d5dba93b3e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f38f229473526149297ef91d70e0d5dba93b3e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f38f229473526149297ef91d70e0d5dba93b3e9", "patch": "@@ -1,3 +1,9 @@\n+2010-09-15  Tejas Belagod  <tejas.belagod@arm.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_vect_pack_trunc): Set vect_pack_trunc\n+\tsupported flag to true for neon.\n+\n 2010-09-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/45665"}, {"sha": "864f14e049dae926e3f99b4aa83ad869ca3914ba", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f38f229473526149297ef91d70e0d5dba93b3e9/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f38f229473526149297ef91d70e0d5dba93b3e9/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=0f38f229473526149297ef91d70e0d5dba93b3e9", "patch": "@@ -2676,7 +2676,8 @@ proc check_effective_target_vect_pack_trunc { } {\n         if { ([istarget powerpc*-*-*] && ![istarget powerpc-*-linux*paired*])\n              || [istarget i?86-*-*]\n              || [istarget x86_64-*-*]\n-             || [istarget spu-*-*] } {\n+             || [istarget spu-*-*]\n+             || ([istarget arm*-*-*] && [check_effective_target_arm_neon]) } {\n             set et_vect_pack_trunc_saved 1\n         }\n     }"}]}