{"sha": "e4a2a52b35e99a40f8bd3992a6b53650908fd188", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRhMmE1MmIzNWU5OWE0MGY4YmQzOTkyYTZiNTM2NTA5MDhmZDE4OA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-01-12T17:12:00Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-01-16T14:15:09Z"}, "message": "Enforce type checking on implicit returns\n\nThis change enforces strict type checkon on all ExprWithBlock. This\nincludes unreachable tail expressions. Specific test cases have been added\nfor context to ensure the failure cases are hit accordingly.\n\nThis change also improves the diagnostic errors for mismatched types\nwhere the reference HirId was lost leading to default locations.", "tree": {"sha": "15df17d22c70ada60c27af51cd89a5dd1dba5e01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15df17d22c70ada60c27af51cd89a5dd1dba5e01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4a2a52b35e99a40f8bd3992a6b53650908fd188", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4a2a52b35e99a40f8bd3992a6b53650908fd188", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4a2a52b35e99a40f8bd3992a6b53650908fd188", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4a2a52b35e99a40f8bd3992a6b53650908fd188/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d96e1594dd378078987900819afc611bd0db19b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d96e1594dd378078987900819afc611bd0db19b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d96e1594dd378078987900819afc611bd0db19b0"}], "stats": {"total": 491, "additions": 375, "deletions": 116}, "files": [{"sha": "fb227ace132a048570a1c06d97ac66276988ae96", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=e4a2a52b35e99a40f8bd3992a6b53650908fd188", "patch": "@@ -239,7 +239,7 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n   void visit (TyTy::ADTType &type) override\n   {\n     ::Btype *compiled_type = nullptr;\n-    bool ok = ctx->lookup_compiled_types (type.get_ref (), &compiled_type);\n+    bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n@@ -260,31 +260,31 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n   void visit (TyTy::BoolType &type) override\n   {\n     ::Btype *compiled_type = nullptr;\n-    bool ok = ctx->lookup_compiled_types (type.get_ref (), &compiled_type);\n+    bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n   void visit (TyTy::IntType &type) override\n   {\n     ::Btype *compiled_type = nullptr;\n-    bool ok = ctx->lookup_compiled_types (type.get_ref (), &compiled_type);\n+    bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n   void visit (TyTy::UintType &type) override\n   {\n     ::Btype *compiled_type = nullptr;\n-    bool ok = ctx->lookup_compiled_types (type.get_ref (), &compiled_type);\n+    bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }\n \n   void visit (TyTy::FloatType &type) override\n   {\n     ::Btype *compiled_type = nullptr;\n-    bool ok = ctx->lookup_compiled_types (type.get_ref (), &compiled_type);\n+    bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n     rust_assert (ok);\n     translated = compiled_type;\n   }"}, {"sha": "8c7eda525b83286e9e57496972947be2f019e1f5", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=e4a2a52b35e99a40f8bd3992a6b53650908fd188", "patch": "@@ -246,7 +246,7 @@ class CompileItem : public HIRCompileBase\n       return true;\n     });\n \n-    if (function_body->has_expr ())\n+    if (function_body->has_expr () && function_body->tail_expr_reachable ())\n       {\n \t// the previous passes will ensure this is a valid return\n \t// dead code elimination should remove any bad trailing expressions"}, {"sha": "b394289c0b4204e9b6e05925ea41c8c9e6e5d2c1", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=e4a2a52b35e99a40f8bd3992a6b53650908fd188", "patch": "@@ -90,7 +90,7 @@ CompileBlock::visit (HIR::BlockExpr &expr)\n     return true;\n   });\n \n-  if (expr.has_expr ())\n+  if (expr.has_expr () && expr.tail_expr_reachable ())\n     {\n       // the previous passes will ensure this is a valid return\n       // dead code elimination should remove any bad trailing expressions"}, {"sha": "3cf044e5ec550b4ad03b8c93b1e9757706b62c6a", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=e4a2a52b35e99a40f8bd3992a6b53650908fd188", "patch": "@@ -190,15 +190,16 @@ class ASTLoweringItem : public ASTLoweringBase\n       = std::unique_ptr<HIR::BlockExpr> (\n \tASTLoweringBlock::translate (function.get_definition ().get (),\n \t\t\t\t     &terminated));\n-    if (!terminated && function.has_return_type ())\n-      rust_error_at (function.get_definition ()->get_locus (),\n-\t\t     \"missing return\");\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, function.get_node_id (),\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n+    mappings->insert_location (crate_num,\n+\t\t\t       function_body->get_mappings ().get_hirid (),\n+\t\t\t       function.get_locus ());\n+\n     auto fn\n       = new HIR::Function (mapping, std::move (function_name),\n \t\t\t   std::move (qualifiers), std::move (generic_params),"}, {"sha": "84d09bcd1bb9f538f085d6c821a80ff3df74c4c5", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=e4a2a52b35e99a40f8bd3992a6b53650908fd188", "patch": "@@ -122,10 +122,9 @@ class ASTLoweringType : public ASTLoweringBase\n   }\n \n private:\n-  ASTLoweringType () : translated (nullptr) {}\n+  ASTLoweringType () : translated (nullptr), translated_segment (nullptr) {}\n \n   HIR::Type *translated;\n-\n   HIR::TypePathSegment *translated_segment;\n };\n "}, {"sha": "55c6f7294bb0b0820cde78db8456246bc2359daa", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=e4a2a52b35e99a40f8bd3992a6b53650908fd188", "patch": "@@ -89,29 +89,30 @@ ASTLoweringBlock::visit (AST::BlockExpr &expr)\n     return true;\n   });\n \n-  HIR::ExprWithoutBlock *tail_expr = nullptr;\n-  if (expr.has_tail_expr () && !block_did_terminate)\n-    {\n-      tail_expr = (HIR::ExprWithoutBlock *) ASTLoweringExpr::translate (\n-\texpr.get_tail_expr ().get ());\n-    }\n-  else if (expr.has_tail_expr () && block_did_terminate)\n+  bool tail_reachable = expr.has_tail_expr () && !block_did_terminate;\n+  if (expr.has_tail_expr () && block_did_terminate)\n     {\n       // warning unreachable tail expressions\n       rust_warning_at (expr.get_tail_expr ()->get_locus_slow (), 0,\n \t\t       \"unreachable expression\");\n     }\n \n+  HIR::ExprWithoutBlock *tail_expr = nullptr;\n+  if (expr.has_tail_expr ())\n+    {\n+      tail_expr = (HIR::ExprWithoutBlock *) ASTLoweringExpr::translate (\n+\texpr.get_tail_expr ().get ());\n+    }\n+\n   auto crate_num = mappings->get_current_crate ();\n   Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n \t\t\t\t mappings->get_next_hir_id (crate_num),\n \t\t\t\t UNKNOWN_LOCAL_DEFID);\n-\n   translated\n     = new HIR::BlockExpr (mapping, std::move (block_stmts),\n \t\t\t  std::unique_ptr<HIR::ExprWithoutBlock> (tail_expr),\n-\t\t\t  std::move (inner_attribs), std::move (outer_attribs),\n-\t\t\t  expr.get_locus ());\n+\t\t\t  tail_reachable, std::move (inner_attribs),\n+\t\t\t  std::move (outer_attribs), expr.get_locus ());\n \n   terminated = block_did_terminate || expr.has_tail_expr ();\n }"}, {"sha": "0d670861973e5d6fec67a35fa6f2a8a55f4f78cd", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=e4a2a52b35e99a40f8bd3992a6b53650908fd188", "patch": "@@ -2524,11 +2524,10 @@ class BlockExpr : public ExprWithBlock\n public:\n   std::vector<Attribute> inner_attrs;\n \n-  // bool has_statements;\n   std::vector<std::unique_ptr<Stmt> > statements;\n-  // bool has_expr;\n   std::unique_ptr<ExprWithoutBlock> expr; // inlined from Statements\n \n+  bool tail_reachable;\n   Location locus;\n \n   std::string as_string () const override;\n@@ -2539,15 +2538,17 @@ class BlockExpr : public ExprWithBlock\n   // Returns whether the block contains an expression\n   bool has_expr () const { return expr != nullptr; }\n \n+  bool tail_expr_reachable () const { return tail_reachable; }\n+\n   BlockExpr (Analysis::NodeMapping mappings,\n \t     std::vector<std::unique_ptr<Stmt> > block_statements,\n-\t     std::unique_ptr<ExprWithoutBlock> block_expr,\n+\t     std::unique_ptr<ExprWithoutBlock> block_expr, bool tail_reachable,\n \t     std::vector<Attribute> inner_attribs,\n \t     std::vector<Attribute> outer_attribs, Location locus)\n     : ExprWithBlock (std::move (mappings), std::move (outer_attribs)),\n       inner_attrs (std::move (inner_attribs)),\n       statements (std::move (block_statements)), expr (std::move (block_expr)),\n-      locus (locus)\n+      tail_reachable (tail_reachable), locus (locus)\n   {}\n \n   // Copy constructor with clone"}, {"sha": "4b474aec4a4a040d3c16d3d37e9924a4350e6bbc", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 67, "deletions": 27, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=e4a2a52b35e99a40f8bd3992a6b53650908fd188", "patch": "@@ -36,10 +36,13 @@ class TypeCheckExpr : public TypeCheckBase\n   {\n     TypeCheckExpr resolver (is_final_expr);\n     expr->accept_vis (resolver);\n-    if (resolver.infered != nullptr)\n-      resolver.context->insert_type (expr->get_mappings ().get_hirid (),\n-\t\t\t\t     resolver.infered);\n \n+    if (resolver.infered == nullptr)\n+      resolver.infered\n+\t= new TyTy::UnitType (expr->get_mappings ().get_hirid ());\n+\n+    resolver.context->insert_type (expr->get_mappings ().get_hirid (),\n+\t\t\t\t   resolver.infered);\n     return resolver.infered;\n   }\n \n@@ -104,6 +107,10 @@ class TypeCheckExpr : public TypeCheckBase\n       }\n \n     infered = TyTy::TypeCheckCallExpr::go (lookup, expr);\n+\n+    TyTy::InferType infer (expr.get_mappings ().get_hirid ());\n+    infered = infer.combine (infered);\n+    infered->set_ref (expr.get_mappings ().get_hirid ());\n   }\n \n   void visit (HIR::AssignmentExpr &expr)\n@@ -159,8 +166,9 @@ class TypeCheckExpr : public TypeCheckBase\n \treturn;\n       }\n \n-    // FIXME this needs to be cloned for memory management later on\n-    infered = lookup;\n+    TyTy::InferType infer (expr.get_mappings ().get_hirid ());\n+    infered = infer.combine (lookup);\n+    infered->set_ref (expr.get_mappings ().get_hirid ());\n   }\n \n   void visit (HIR::LiteralExpr &expr)\n@@ -250,6 +258,10 @@ class TypeCheckExpr : public TypeCheckBase\n \tgcc_unreachable ();\n \tbreak;\n       }\n+\n+    TyTy::InferType infer (expr.get_mappings ().get_hirid ());\n+    infered = infer.combine (infered);\n+    infered->set_ref (expr.get_mappings ().get_hirid ());\n   }\n \n   void visit (HIR::ArithmeticOrLogicalExpr &expr)\n@@ -266,7 +278,6 @@ class TypeCheckExpr : public TypeCheckBase\n     auto rhs = TypeCheckExpr::Resolve (expr.get_rhs ());\n \n     infered = lhs->combine (rhs);\n-    // FIXME this will need to turn into bool\n   }\n \n   void visit (HIR::LazyBooleanExpr &expr)\n@@ -281,40 +292,69 @@ class TypeCheckExpr : public TypeCheckBase\n   void visit (HIR::IfExpr &expr)\n   {\n     TypeCheckExpr::Resolve (expr.get_if_condition ());\n-    TypeCheckExpr::Resolve (expr.get_if_block ());\n+    auto blk_expr = TypeCheckExpr::Resolve (expr.get_if_block ());\n \n-    // if without else always resolves to unit type\n-    infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n+    if (is_final_expr\n+\t&& context->peek_return_type ()->get_kind () != TyTy::TypeKind::UNIT)\n+      {\n+\tauto expected_ty = context->peek_return_type ();\n+\tinfered = expected_ty->combine (blk_expr);\n+      }\n   }\n \n   void visit (HIR::IfExprConseqElse &expr)\n   {\n-    // this must combine to what the type is expected\n-    // this might be a parameter or the last expr in an if + else in a BlockExpr\n-    // then it must resolve to fn return type\n-    // else its a unit-type\n-    infered = is_final_expr\n-\t\t? context->peek_return_type ()\n-\t\t: new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n-\n-    TypeCheckExpr::Resolve (expr.get_if_condition (), is_final_expr);\n-    auto if_blk_ty = TypeCheckExpr::Resolve (expr.get_if_block ());\n-    auto else_blk_ty = TypeCheckExpr::Resolve (expr.get_else_block ());\n-\n-    if (is_final_expr)\n+    // check and resolve all types in the conditional var\n+    TypeCheckExpr::Resolve (expr.get_if_condition ());\n+\n+    auto if_blk_resolved = TypeCheckExpr::Resolve (expr.get_if_block ());\n+    auto else_blk_resolved = TypeCheckExpr::Resolve (expr.get_else_block ());\n+\n+    TyTy::TyBase *if_block_tyty = nullptr;\n+    if (expr.get_if_block ()->has_expr ())\n+      if_block_tyty\n+\t= TypeCheckExpr::Resolve (expr.get_if_block ()->expr.get ());\n+    else\n+      if_block_tyty = if_blk_resolved;\n+\n+    TyTy::TyBase *else_block_tyty = nullptr;\n+    if (expr.get_else_block ()->has_expr ())\n+      else_block_tyty\n+\t= TypeCheckExpr::Resolve (expr.get_else_block ()->expr.get ());\n+    else\n+      else_block_tyty = else_blk_resolved;\n+\n+    if (context->peek_return_type ()->get_kind () != TyTy::TypeKind::UNIT)\n       {\n-\tinfered = infered->combine (if_blk_ty);\n-\tinfered = infered->combine (else_blk_ty);\n+\t// this must combine to what the type is expected\n+\t// this might be a parameter or the last expr in an if + else in a\n+\t// BlockExpr then it must resolve to fn return type else its a unit-type\n+\tauto expected_ty\n+\t  = is_final_expr\n+\t      ? context->peek_return_type ()\n+\t      : new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n+\n+\tauto if_blk_combined = expected_ty->combine (if_block_tyty);\n+\tauto else_blk_combined = expected_ty->combine (else_block_tyty);\n+\n+\tinfered = if_blk_combined->combine (else_blk_combined);\n       }\n   }\n \n   void visit (HIR::IfExprConseqIf &expr)\n   {\n     TypeCheckExpr::Resolve (expr.get_if_condition ());\n-    TypeCheckExpr::Resolve (expr.get_if_block ());\n-    TypeCheckExpr::Resolve (expr.get_conseq_if_expr ());\n+    auto if_blk = TypeCheckExpr::Resolve (expr.get_if_block ());\n+    auto elif_blk = TypeCheckExpr::Resolve (expr.get_conseq_if_expr ());\n \n-    infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n+    if (is_final_expr\n+\t&& context->peek_return_type ()->get_kind () != TyTy::TypeKind::UNIT)\n+      {\n+\tauto expected_ty = context->peek_return_type ();\n+\n+\tinfered = expected_ty->combine (if_blk);\n+\tinfered = infered->combine (elif_blk);\n+      }\n   }\n \n   void visit (HIR::BlockExpr &expr);"}, {"sha": "20f5adbdf87b723aa44e0fc7a9d0891d5619fe28", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=e4a2a52b35e99a40f8bd3992a6b53650908fd188", "patch": "@@ -85,6 +85,12 @@ class TypeCheckItem : public TypeCheckBase\n     context->push_return_type (resolve_fn_type.go ());\n \n     TypeCheckExpr::Resolve (function.function_body.get ());\n+    if (function.function_body->has_expr ())\n+      {\n+\tauto resolved\n+\t  = TypeCheckExpr::Resolve (function.function_body->expr.get ());\n+\tcontext->peek_return_type ()->combine (resolved);\n+      }\n \n     context->pop_return_type ();\n   }"}, {"sha": "ecee372feffb1b6acebf560fe91eec65d245cc6f", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=e4a2a52b35e99a40f8bd3992a6b53650908fd188", "patch": "@@ -83,7 +83,12 @@ class TypeCheckTopLevel : public TypeCheckBase\n     if (!function.has_function_return_type ())\n       ret_type = new TyTy::UnitType (function.get_mappings ().get_hirid ());\n     else\n-      ret_type = TypeCheckType::Resolve (function.return_type.get ());\n+      {\n+\tTyTy::InferType infer (function.get_mappings ().get_hirid ());\n+\tauto resolved = TypeCheckType::Resolve (function.return_type.get ());\n+\tret_type = infer.combine (resolved);\n+\tret_type->set_ref (function.return_type->get_mappings ().get_hirid ());\n+      }\n \n     std::vector<TyTy::ParamType *> params;\n     for (auto &param : function.function_params)"}, {"sha": "1a01774984a4a02fffd159fd1bb8babfac1a77bc", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=e4a2a52b35e99a40f8bd3992a6b53650908fd188", "patch": "@@ -119,7 +119,6 @@ class TypeCheckType : public TypeCheckBase\n \n     // this might be a struct type (TyTy::ADT) reference\n     // TODO\n-    printf (\"UNREACHABLE %s\\n\", path.as_string ().c_str ());\n     gcc_unreachable ();\n   }\n "}, {"sha": "a5b9b8bc9f5afa2cdb25cc8ff575353068f331c8", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=e4a2a52b35e99a40f8bd3992a6b53650908fd188", "patch": "@@ -47,7 +47,7 @@ TypeCheckExpr::visit (HIR::BlockExpr &expr)\n     bool is_final_stmt = expr.is_final_stmt (s);\n     bool is_final_expr = is_final_stmt && !expr.has_expr ();\n \n-    auto infered = TypeCheckStmt::Resolve (s, is_final_stmt);\n+    auto infered = TypeCheckStmt::Resolve (s, is_final_expr);\n     if (is_final_expr)\n       {\n \tdelete block_tyty;\n@@ -57,13 +57,10 @@ TypeCheckExpr::visit (HIR::BlockExpr &expr)\n     return true;\n   });\n \n+  // tail expression must be checked as part of the caller since\n+  // the result of this is very dependant on what we expect it to be\n   if (expr.has_expr ())\n-    {\n-      auto tail_tyty = TypeCheckExpr::Resolve (expr.expr.get (), true);\n-\n-      delete block_tyty;\n-      block_tyty = tail_tyty;\n-    }\n+    TypeCheckExpr::Resolve (expr.expr.get ());\n \n   // now that the stmts have been resolved we must resolve the block of locals\n   // and make sure the variables have been resolved\n@@ -74,7 +71,6 @@ TypeCheckExpr::visit (HIR::BlockExpr &expr)\n       rust_fatal_error (expr.get_locus (), \"failed to lookup locals per block\");\n       return;\n     }\n-\n   TyTyResolver::Resolve (rib, mappings, resolver, context);\n \n   infered = block_tyty;"}, {"sha": "3bea57d3fc22774cc54d2a2f29de8329fc3ee106", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 55, "deletions": 39, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=e4a2a52b35e99a40f8bd3992a6b53650908fd188", "patch": "@@ -38,7 +38,7 @@ class BaseRules : public TyVisitor\n     Location def_locus = mappings->lookup_location (base->get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n \t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n-    rust_fatal_error (def_locus, \"declared here\");\n+    rust_error_at (def_locus, \"declared here\");\n   }\n \n   virtual void visit (ADTType &type) override\n@@ -47,7 +47,7 @@ class BaseRules : public TyVisitor\n     Location def_locus = mappings->lookup_location (base->get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n \t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n-    rust_fatal_error (def_locus, \"declared here\");\n+    rust_error_at (def_locus, \"declared here\");\n   }\n \n   virtual void visit (InferType &type) override\n@@ -56,7 +56,7 @@ class BaseRules : public TyVisitor\n     Location def_locus = mappings->lookup_location (base->get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n \t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n-    rust_fatal_error (def_locus, \"declared here\");\n+    rust_error_at (def_locus, \"declared here\");\n   }\n \n   virtual void visit (FnType &type) override\n@@ -65,7 +65,7 @@ class BaseRules : public TyVisitor\n     Location def_locus = mappings->lookup_location (base->get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n \t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n-    rust_fatal_error (def_locus, \"declared here\");\n+    rust_error_at (def_locus, \"declared here\");\n   }\n \n   virtual void visit (ParamType &type) override\n@@ -74,7 +74,7 @@ class BaseRules : public TyVisitor\n     Location def_locus = mappings->lookup_location (base->get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n \t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n-    rust_fatal_error (def_locus, \"declared here\");\n+    rust_error_at (def_locus, \"declared here\");\n   }\n \n   virtual void visit (ArrayType &type) override\n@@ -83,7 +83,7 @@ class BaseRules : public TyVisitor\n     Location def_locus = mappings->lookup_location (base->get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n \t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n-    rust_fatal_error (def_locus, \"declared here\");\n+    rust_error_at (def_locus, \"declared here\");\n   }\n \n   virtual void visit (BoolType &type) override\n@@ -92,7 +92,7 @@ class BaseRules : public TyVisitor\n     Location def_locus = mappings->lookup_location (base->get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n \t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n-    rust_fatal_error (def_locus, \"declared here\");\n+    rust_error_at (def_locus, \"declared here\");\n   }\n \n   virtual void visit (IntType &type) override\n@@ -101,7 +101,7 @@ class BaseRules : public TyVisitor\n     Location def_locus = mappings->lookup_location (base->get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n \t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n-    rust_fatal_error (def_locus, \"declared here\");\n+    rust_error_at (def_locus, \"declared here\");\n   }\n \n   virtual void visit (UintType &type) override\n@@ -110,7 +110,7 @@ class BaseRules : public TyVisitor\n     Location def_locus = mappings->lookup_location (base->get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n \t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n-    rust_fatal_error (def_locus, \"declared here\");\n+    rust_error_at (def_locus, \"declared here\");\n   }\n \n   virtual void visit (FloatType &type) override\n@@ -119,7 +119,7 @@ class BaseRules : public TyVisitor\n     Location def_locus = mappings->lookup_location (base->get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n \t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n-    rust_fatal_error (def_locus, \"declared here\");\n+    rust_error_at (def_locus, \"declared here\");\n   }\n \n   virtual void visit (ErrorType &type) override\n@@ -128,7 +128,7 @@ class BaseRules : public TyVisitor\n     Location def_locus = mappings->lookup_location (base->get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n \t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n-    rust_fatal_error (def_locus, \"declared here\");\n+    rust_error_at (def_locus, \"declared here\");\n   }\n \n   virtual void visit (StructFieldType &type) override\n@@ -137,13 +137,13 @@ class BaseRules : public TyVisitor\n     Location def_locus = mappings->lookup_location (base->get_ref ());\n     rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n \t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n-    rust_fatal_error (def_locus, \"declared here\");\n+    rust_error_at (def_locus, \"declared here\");\n   }\n \n protected:\n   BaseRules (TyBase *base)\n     : mappings (Analysis::Mappings::get ()), base (base),\n-      resolved (new ErrorType (base->get_ref ()))\n+      resolved (new ErrorType (base->get_ref (), base->get_ref ()))\n   {}\n \n   Analysis::Mappings *mappings;\n@@ -164,25 +164,23 @@ class InferRules : protected BaseRules\n \n   // we are an inference variable so this means we can take the other as the\n   // type\n-  void visit (UnitType &type) override\n-  {\n-    resolved = new UnitType (type.get_ref ());\n-  }\n+  void visit (InferType &type) override { resolved = type.clone (); }\n \n-  void visit (BoolType &type) override\n-  {\n-    resolved = new BoolType (type.get_ref ());\n-  }\n+  void visit (UnitType &type) override { resolved = type.clone (); }\n \n-  void visit (IntType &type) override\n-  {\n-    resolved = new IntType (type.get_ref (), type.get_kind ());\n-  }\n+  void visit (BoolType &type) override { resolved = type.clone (); }\n \n-  void visit (UintType &type) override\n-  {\n-    resolved = new UintType (type.get_ref (), type.get_kind ());\n-  }\n+  void visit (IntType &type) override { resolved = type.clone (); }\n+\n+  void visit (UintType &type) override { resolved = type.clone (); }\n+\n+  void visit (FloatType &type) override { resolved = type.clone (); }\n+\n+  void visit (ParamType &type) override { resolved = type.clone (); }\n+\n+  void visit (ArrayType &type) override { resolved = type.clone (); }\n+\n+  void visit (ADTType &type) override { resolved = type.clone (); }\n \n private:\n   InferType *base;\n@@ -217,7 +215,7 @@ class UnitRules : protected BaseRules\n \n   void visit (UnitType &type) override\n   {\n-    resolved = new UnitType (type.get_ref ());\n+    resolved = new UnitType (type.get_ref (), type.get_ty_ref ());\n   }\n \n private:\n@@ -280,8 +278,8 @@ class ArrayRules : protected BaseRules\n \treturn;\n       }\n \n-    resolved\n-      = new ArrayType (type.get_ref (), type.get_capacity (), base_resolved);\n+    resolved = new ArrayType (type.get_ref (), type.get_ty_ref (),\n+\t\t\t      type.get_capacity (), base_resolved);\n   }\n \n private:\n@@ -301,7 +299,7 @@ class BoolRules : protected BaseRules\n \n   void visit (BoolType &type) override\n   {\n-    resolved = new BoolType (type.get_ref ());\n+    resolved = new BoolType (type.get_ref (), type.get_ty_ref ());\n   }\n \n private:\n@@ -321,8 +319,14 @@ class IntRules : protected BaseRules\n \n   void visit (IntType &type) override\n   {\n-    // FIXME we should look at the IntTypeKind and check if i8 vs i16 etc..\n-    resolved = new IntType (type.get_ref (), type.get_kind ());\n+    if (type.get_kind () != base->get_kind ())\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved\n+      = new IntType (type.get_ref (), type.get_ty_ref (), type.get_kind ());\n   }\n \n private:\n@@ -342,8 +346,14 @@ class UintRules : protected BaseRules\n \n   void visit (UintType &type) override\n   {\n-    // FIXME we should look at the IntTypeKind and check if u8 vs u16 etc..\n-    resolved = new UintType (type.get_ref (), type.get_kind ());\n+    if (type.get_kind () != base->get_kind ())\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved\n+      = new UintType (type.get_ref (), type.get_ty_ref (), type.get_kind ());\n   }\n \n private:\n@@ -363,8 +373,14 @@ class FloatRules : protected BaseRules\n \n   void visit (FloatType &type) override\n   {\n-    // FIXME we should look at the FloatKind and respect it\n-    resolved = new FloatType (type.get_ref (), type.get_kind ());\n+    if (type.get_kind () != base->get_kind ())\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved\n+      = new FloatType (type.get_ref (), type.get_ty_ref (), type.get_kind ());\n   }\n \n private:"}, {"sha": "6696aa72a459dadd074b2a89ce9a4de48dbddf6e", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 86, "deletions": 1, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=e4a2a52b35e99a40f8bd3992a6b53650908fd188", "patch": "@@ -44,6 +44,12 @@ UnitType::combine (TyBase *other)\n   return r.combine (other);\n }\n \n+TyBase *\n+UnitType::clone ()\n+{\n+  return new UnitType (get_ref (), get_ty_ref ());\n+}\n+\n void\n InferType::accept_vis (TyVisitor &vis)\n {\n@@ -53,7 +59,7 @@ InferType::accept_vis (TyVisitor &vis)\n std::string\n InferType::as_string () const\n {\n-  return \"[_]\";\n+  return \"?\";\n }\n \n TyBase *\n@@ -63,6 +69,12 @@ InferType::combine (TyBase *other)\n   return r.combine (other);\n }\n \n+TyBase *\n+InferType::clone ()\n+{\n+  return new InferType (get_ref (), get_ty_ref ());\n+}\n+\n void\n ErrorType::accept_vis (TyVisitor &vis)\n {\n@@ -78,10 +90,17 @@ ErrorType::as_string () const\n TyBase *\n ErrorType::combine (TyBase *other)\n {\n+  // FIXME\n   // rust_error_at ();\n   return this;\n }\n \n+TyBase *\n+ErrorType::clone ()\n+{\n+  return new ErrorType (get_ref ());\n+}\n+\n void\n StructFieldType::accept_vis (TyVisitor &vis)\n {\n@@ -101,6 +120,13 @@ StructFieldType::combine (TyBase *other)\n   return r.combine (other);\n }\n \n+TyBase *\n+StructFieldType::clone ()\n+{\n+  return new StructFieldType (get_ref (), get_ty_ref (), get_name (),\n+\t\t\t      get_field_type ()->clone ());\n+}\n+\n void\n ADTType::accept_vis (TyVisitor &vis)\n {\n@@ -123,6 +149,16 @@ ADTType::combine (TyBase *other)\n   return nullptr;\n }\n \n+TyBase *\n+ADTType::clone ()\n+{\n+  std::vector<StructFieldType *> cloned_fields;\n+  for (auto &f : fields)\n+    cloned_fields.push_back ((StructFieldType *) f->clone ());\n+\n+  return new ADTType (get_ref (), get_ty_ref (), get_name (), cloned_fields);\n+}\n+\n void\n FnType::accept_vis (TyVisitor &vis)\n {\n@@ -150,6 +186,17 @@ FnType::combine (TyBase *other)\n   return r.combine (other);\n }\n \n+TyBase *\n+FnType::clone ()\n+{\n+  std::vector<ParamType *> cloned_params;\n+  for (auto &p : params)\n+    cloned_params.push_back ((ParamType *) p->clone ());\n+\n+  return new FnType (get_ref (), get_ty_ref (), cloned_params,\n+\t\t     get_return_type ()->clone ());\n+}\n+\n void\n ParamType::accept_vis (TyVisitor &vis)\n {\n@@ -169,6 +216,13 @@ ParamType::combine (TyBase *other)\n   return r.combine (other);\n }\n \n+TyBase *\n+ParamType::clone ()\n+{\n+  return new ParamType (get_ref (), get_ty_ref (), get_identifier (),\n+\t\t\tget_base_type ()->clone ());\n+}\n+\n void\n ArrayType::accept_vis (TyVisitor &vis)\n {\n@@ -188,6 +242,13 @@ ArrayType::combine (TyBase *other)\n   return r.combine (other);\n }\n \n+TyBase *\n+ArrayType::clone ()\n+{\n+  return new ArrayType (get_ref (), get_ty_ref (), get_capacity (),\n+\t\t\tget_type ()->clone ());\n+}\n+\n void\n BoolType::accept_vis (TyVisitor &vis)\n {\n@@ -207,6 +268,12 @@ BoolType::combine (TyBase *other)\n   return r.combine (other);\n }\n \n+TyBase *\n+BoolType::clone ()\n+{\n+  return new BoolType (get_ref (), get_ty_ref ());\n+}\n+\n void\n IntType::accept_vis (TyVisitor &vis)\n {\n@@ -240,6 +307,12 @@ IntType::combine (TyBase *other)\n   return r.combine (other);\n }\n \n+TyBase *\n+IntType::clone ()\n+{\n+  return new IntType (get_ref (), get_ty_ref (), get_kind ());\n+}\n+\n void\n UintType::accept_vis (TyVisitor &vis)\n {\n@@ -273,6 +346,12 @@ UintType::combine (TyBase *other)\n   return r.combine (other);\n }\n \n+TyBase *\n+UintType::clone ()\n+{\n+  return new UintType (get_ref (), get_ty_ref (), get_kind ());\n+}\n+\n void\n FloatType::accept_vis (TyVisitor &vis)\n {\n@@ -300,6 +379,12 @@ FloatType::combine (TyBase *other)\n   return r.combine (other);\n }\n \n+TyBase *\n+FloatType::clone ()\n+{\n+  return new FloatType (get_ref (), get_ty_ref (), get_kind ());\n+}\n+\n void\n TypeCheckCallExpr::visit (FnType &type)\n {"}, {"sha": "2a6d2a8cb97f9275eb54cde695c2ce67a30d6acf", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 94, "deletions": 13, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=e4a2a52b35e99a40f8bd3992a6b53650908fd188", "patch": "@@ -54,6 +54,12 @@ class TyBase\n \n   HirId get_ref () const { return ref; }\n \n+  void set_ref (HirId id) { ref = id; }\n+\n+  HirId get_ty_ref () const { return ty_ref; }\n+\n+  void set_ty_ref (HirId id) { ty_ref = id; }\n+\n   virtual void accept_vis (TyVisitor &vis) = 0;\n \n   virtual std::string as_string () const = 0;\n@@ -64,17 +70,24 @@ class TyBase\n \n   TypeKind get_kind () const { return kind; }\n \n+  virtual TyBase *clone () = 0;\n+\n protected:\n-  TyBase (HirId ref, TypeKind kind) : kind (kind), ref (ref) {}\n+  TyBase (HirId ref, HirId ty_ref, TypeKind kind)\n+    : kind (kind), ref (ref), ty_ref (ty_ref)\n+  {}\n \n   TypeKind kind;\n   HirId ref;\n+  HirId ty_ref;\n };\n \n class InferType : public TyBase\n {\n public:\n-  InferType (HirId ref) : TyBase (ref, TypeKind::INFER) {}\n+  InferType (HirId ref) : TyBase (ref, ref, TypeKind::INFER) {}\n+\n+  InferType (HirId ref, HirId ty_ref) : TyBase (ref, ty_ref, TypeKind::INFER) {}\n \n   void accept_vis (TyVisitor &vis) override;\n \n@@ -83,12 +96,16 @@ class InferType : public TyBase\n   std::string as_string () const override;\n \n   TyBase *combine (TyBase *other) override;\n+\n+  TyBase *clone () final override;\n };\n \n class ErrorType : public TyBase\n {\n public:\n-  ErrorType (HirId ref) : TyBase (ref, TypeKind::ERROR) {}\n+  ErrorType (HirId ref) : TyBase (ref, ref, TypeKind::ERROR) {}\n+\n+  ErrorType (HirId ref, HirId ty_ref) : TyBase (ref, ty_ref, TypeKind::ERROR) {}\n \n   void accept_vis (TyVisitor &vis) override;\n \n@@ -97,12 +114,16 @@ class ErrorType : public TyBase\n   std::string as_string () const override;\n \n   TyBase *combine (TyBase *other) override;\n+\n+  TyBase *clone () final override;\n };\n \n class UnitType : public TyBase\n {\n public:\n-  UnitType (HirId ref) : TyBase (ref, TypeKind::UNIT) {}\n+  UnitType (HirId ref) : TyBase (ref, ref, TypeKind::UNIT) {}\n+\n+  UnitType (HirId ref, HirId ty_ref) : TyBase (ref, ty_ref, TypeKind::UNIT) {}\n \n   void accept_vis (TyVisitor &vis) override;\n \n@@ -111,13 +132,19 @@ class UnitType : public TyBase\n   std::string as_string () const override;\n \n   TyBase *combine (TyBase *other) override;\n+\n+  TyBase *clone () final override;\n };\n \n class StructFieldType : public TyBase\n {\n public:\n   StructFieldType (HirId ref, std::string name, TyBase *ty)\n-    : TyBase (ref, TypeKind::FIELD), name (name), ty (ty)\n+    : TyBase (ref, ref, TypeKind::FIELD), name (name), ty (ty)\n+  {}\n+\n+  StructFieldType (HirId ref, HirId ty_ref, std::string name, TyBase *ty)\n+    : TyBase (ref, ty_ref, TypeKind::FIELD), name (name), ty (ty)\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n@@ -132,6 +159,8 @@ class StructFieldType : public TyBase\n \n   TyBase *get_field_type () { return ty; }\n \n+  TyBase *clone () final override;\n+\n private:\n   std::string name;\n   TyBase *ty;\n@@ -142,7 +171,13 @@ class ADTType : public TyBase\n public:\n   ADTType (HirId ref, std::string identifier,\n \t   std::vector<StructFieldType *> fields)\n-    : TyBase (ref, TypeKind::ADT), identifier (identifier), fields (fields)\n+    : TyBase (ref, ref, TypeKind::ADT), identifier (identifier), fields (fields)\n+  {}\n+\n+  ADTType (HirId ref, HirId ty_ref, std::string identifier,\n+\t   std::vector<StructFieldType *> fields)\n+    : TyBase (ref, ty_ref, TypeKind::ADT), identifier (identifier),\n+      fields (fields)\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n@@ -155,6 +190,8 @@ class ADTType : public TyBase\n \n   size_t num_fields () const { return fields.size (); }\n \n+  std::string get_name () const { return identifier; }\n+\n   StructFieldType *get_field (size_t index) { return fields.at (index); }\n \n   StructFieldType *get_field (const std::string &lookup)\n@@ -167,6 +204,8 @@ class ADTType : public TyBase\n     return nullptr;\n   }\n \n+  TyBase *clone () final override;\n+\n private:\n   std::string identifier;\n   std::vector<StructFieldType *> fields;\n@@ -176,7 +215,12 @@ class ParamType : public TyBase\n {\n public:\n   ParamType (HirId ref, std::string identifier, TyBase *type)\n-    : TyBase (ref, TypeKind::PARAM), identifier (identifier), type (type)\n+    : TyBase (ref, ref, TypeKind::PARAM), identifier (identifier), type (type)\n+  {}\n+\n+  ParamType (HirId ref, HirId ty_ref, std::string identifier, TyBase *type)\n+    : TyBase (ref, ty_ref, TypeKind::PARAM), identifier (identifier),\n+      type (type)\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n@@ -189,6 +233,8 @@ class ParamType : public TyBase\n \n   TyBase *get_base_type () { return type; }\n \n+  TyBase *clone () final override;\n+\n private:\n   std::string identifier;\n   TyBase *type;\n@@ -198,7 +244,12 @@ class FnType : public TyBase\n {\n public:\n   FnType (HirId ref, std::vector<ParamType *> params, TyBase *type)\n-    : TyBase (ref, TypeKind::FNDEF), params (params), type (type)\n+    : TyBase (ref, ref, TypeKind::FNDEF), params (params), type (type)\n+  {}\n+\n+  FnType (HirId ref, HirId ty_ref, std::vector<ParamType *> params,\n+\t  TyBase *type)\n+    : TyBase (ref, ty_ref, TypeKind::FNDEF), params (params), type (type)\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n@@ -215,6 +266,8 @@ class FnType : public TyBase\n \n   TyBase *get_return_type () { return type; }\n \n+  TyBase *clone () final override;\n+\n private:\n   std::vector<ParamType *> params;\n   TyBase *type;\n@@ -224,7 +277,11 @@ class ArrayType : public TyBase\n {\n public:\n   ArrayType (HirId ref, size_t capacity, TyBase *type)\n-    : TyBase (ref, TypeKind::ARRAY), capacity (capacity), type (type)\n+    : TyBase (ref, ref, TypeKind::ARRAY), capacity (capacity), type (type)\n+  {}\n+\n+  ArrayType (HirId ref, HirId ty_ref, size_t capacity, TyBase *type)\n+    : TyBase (ref, ty_ref, TypeKind::ARRAY), capacity (capacity), type (type)\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n@@ -237,6 +294,8 @@ class ArrayType : public TyBase\n \n   TyBase *get_type () { return type; }\n \n+  TyBase *clone () final override;\n+\n private:\n   size_t capacity;\n   TyBase *type;\n@@ -245,13 +304,17 @@ class ArrayType : public TyBase\n class BoolType : public TyBase\n {\n public:\n-  BoolType (HirId ref) : TyBase (ref, TypeKind::BOOL) {}\n+  BoolType (HirId ref) : TyBase (ref, ref, TypeKind::BOOL) {}\n+\n+  BoolType (HirId ref, HirId ty_ref) : TyBase (ref, ty_ref, TypeKind::BOOL) {}\n \n   void accept_vis (TyVisitor &vis) override;\n \n   std::string as_string () const override;\n \n   TyBase *combine (TyBase *other) override;\n+\n+  TyBase *clone () final override;\n };\n \n class IntType : public TyBase\n@@ -267,7 +330,11 @@ class IntType : public TyBase\n   };\n \n   IntType (HirId ref, IntKind kind)\n-    : TyBase (ref, TypeKind::INT), int_kind (kind)\n+    : TyBase (ref, ref, TypeKind::INT), int_kind (kind)\n+  {}\n+\n+  IntType (HirId ref, HirId ty_ref, IntKind kind)\n+    : TyBase (ref, ty_ref, TypeKind::INT), int_kind (kind)\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n@@ -278,6 +345,8 @@ class IntType : public TyBase\n \n   IntKind get_kind () const { return int_kind; }\n \n+  TyBase *clone () final override;\n+\n private:\n   IntKind int_kind;\n };\n@@ -295,7 +364,11 @@ class UintType : public TyBase\n   };\n \n   UintType (HirId ref, UintKind kind)\n-    : TyBase (ref, TypeKind::UINT), uint_kind (kind)\n+    : TyBase (ref, ref, TypeKind::UINT), uint_kind (kind)\n+  {}\n+\n+  UintType (HirId ref, HirId ty_ref, UintKind kind)\n+    : TyBase (ref, ty_ref, TypeKind::UINT), uint_kind (kind)\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n@@ -306,6 +379,8 @@ class UintType : public TyBase\n \n   UintKind get_kind () const { return uint_kind; }\n \n+  TyBase *clone () final override;\n+\n private:\n   UintKind uint_kind;\n };\n@@ -320,7 +395,11 @@ class FloatType : public TyBase\n   };\n \n   FloatType (HirId ref, FloatKind kind)\n-    : TyBase (ref, TypeKind::FLOAT), float_kind (kind)\n+    : TyBase (ref, ref, TypeKind::FLOAT), float_kind (kind)\n+  {}\n+\n+  FloatType (HirId ref, HirId ty_ref, FloatKind kind)\n+    : TyBase (ref, ty_ref, TypeKind::FLOAT), float_kind (kind)\n   {}\n \n   void accept_vis (TyVisitor &vis) override;\n@@ -331,6 +410,8 @@ class FloatType : public TyBase\n \n   FloatKind get_kind () const { return float_kind; }\n \n+  TyBase *clone () final override;\n+\n private:\n   FloatKind float_kind;\n };"}, {"sha": "b450e1873f715f8aeaff31f387ff97e61a20b1e1", "filename": "gcc/testsuite/rust.test/fail_compilation/implicit_returns_err1.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fimplicit_returns_err1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fimplicit_returns_err1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fimplicit_returns_err1.rs?ref=e4a2a52b35e99a40f8bd3992a6b53650908fd188", "patch": "@@ -0,0 +1,12 @@\n+fn test(x: i32) -> i32 {\n+    if x > 1 {\n+        1\n+    } else {\n+        2\n+    }\n+    3\n+}\n+\n+fn main() {\n+    let a = test(1);\n+}"}, {"sha": "b5fbd0ac642bf9660a84bbeebbd9292e9805a03c", "filename": "gcc/testsuite/rust.test/fail_compilation/implicit_returns_err2.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fimplicit_returns_err2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fimplicit_returns_err2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fimplicit_returns_err2.rs?ref=e4a2a52b35e99a40f8bd3992a6b53650908fd188", "patch": "@@ -0,0 +1,8 @@\n+fn test(x: i32) -> i32 {\n+    return 1;\n+    true\n+}\n+\n+fn main() {\n+    let a = test(1);\n+}"}, {"sha": "a83385e8a44a148a2a50930f5f70bee6fec1b8e2", "filename": "gcc/testsuite/rust.test/fail_compilation/implicit_returns_err3.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fimplicit_returns_err3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a2a52b35e99a40f8bd3992a6b53650908fd188/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fimplicit_returns_err3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fimplicit_returns_err3.rs?ref=e4a2a52b35e99a40f8bd3992a6b53650908fd188", "patch": "@@ -0,0 +1,9 @@\n+fn test(x: i32) -> i32 {\n+    if x > 1 {\n+        1\n+    }\n+}\n+\n+fn main() {\n+    let a = test(9);\n+}"}]}