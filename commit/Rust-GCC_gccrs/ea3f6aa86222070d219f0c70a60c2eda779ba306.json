{"sha": "ea3f6aa86222070d219f0c70a60c2eda779ba306", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEzZjZhYTg2MjIyMDcwZDIxOWYwYzcwYTYwYzJlZGE3NzliYTMwNg==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2011-10-18T12:36:16Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2011-10-18T12:36:16Z"}, "message": "re PR rtl-optimization/50205 (ICE: in code_motion_path_driver, at sel-sched.c:6581 with -fselective-scheduling2 and custom flags)\n\n\tPR rtl-optimization/50205\n\t* sel-sched.c (count_occurrences_1): Simplify on the assumption that\n\tp->x is a register.  Forbid substitution when the same register is\n\tfound in a different mode.\n\t(count_occurrences_equiv): Assert that 'what' is a register.\n\n\t* gcc.dg/pr50205.c: New.\n\nFrom-SVN: r180135", "tree": {"sha": "d81160bdc6decd0db9c1c8ba11fe91db4af9dcda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d81160bdc6decd0db9c1c8ba11fe91db4af9dcda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea3f6aa86222070d219f0c70a60c2eda779ba306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea3f6aa86222070d219f0c70a60c2eda779ba306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea3f6aa86222070d219f0c70a60c2eda779ba306", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea3f6aa86222070d219f0c70a60c2eda779ba306/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "748c5114543cb803cdb494105510217046d20513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/748c5114543cb803cdb494105510217046d20513", "html_url": "https://github.com/Rust-GCC/gccrs/commit/748c5114543cb803cdb494105510217046d20513"}], "stats": {"total": 46, "additions": 33, "deletions": 13}, "files": [{"sha": "674d90567bbdb43f98e0aa2d802c483e5130ab37", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3f6aa86222070d219f0c70a60c2eda779ba306/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3f6aa86222070d219f0c70a60c2eda779ba306/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea3f6aa86222070d219f0c70a60c2eda779ba306", "patch": "@@ -1,3 +1,11 @@\n+2011-10-18  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR rtl-optimization/50205\n+\t* sel-sched.c (count_occurrences_1): Simplify on the assumption that\n+\tp->x is a register.  Forbid substitution when the same register is\n+\tfound in a different mode.\n+\t(count_occurrences_equiv): Assert that 'what' is a register.\n+\n 2011-10-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/50767"}, {"sha": "2af01aea99e439c267b1c598179d8fb9f07ee288", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3f6aa86222070d219f0c70a60c2eda779ba306/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3f6aa86222070d219f0c70a60c2eda779ba306/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=ea3f6aa86222070d219f0c70a60c2eda779ba306", "patch": "@@ -813,18 +813,12 @@ count_occurrences_1 (rtx *cur_rtx, void *arg)\n {\n   rtx_search_arg_p p = (rtx_search_arg_p) arg;\n \n-  /* The last param FOR_GCSE is true, because otherwise it performs excessive\n-    substitutions like\n-\tr8 = r33\n-\tr16 = r33\n-    for the last insn it presumes r33 equivalent to r8, so it changes it to\n-    r33.  Actually, there's no change, but it spoils debugging.  */\n-  if (exp_equiv_p (*cur_rtx, p->x, 0, true))\n-    {\n-      /* Bail out if we occupy more than one register.  */\n-      if (REG_P (*cur_rtx)\n-          && HARD_REGISTER_P (*cur_rtx)\n-          && hard_regno_nregs[REGNO(*cur_rtx)][GET_MODE (*cur_rtx)] > 1)\n+  if (REG_P (*cur_rtx) && REGNO (*cur_rtx) == REGNO (p->x))\n+    {\n+      /* Bail out if mode is different or more than one register is used.  */\n+      if (GET_MODE (*cur_rtx) != GET_MODE (p->x)\n+          || (HARD_REGISTER_P (*cur_rtx)\n+\t      && hard_regno_nregs[REGNO(*cur_rtx)][GET_MODE (*cur_rtx)] > 1))\n         {\n           p->n = 0;\n           return 1;\n@@ -837,7 +831,6 @@ count_occurrences_1 (rtx *cur_rtx, void *arg)\n     }\n \n   if (GET_CODE (*cur_rtx) == SUBREG\n-      && REG_P (p->x)\n       && (!REG_P (SUBREG_REG (*cur_rtx))\n \t  || REGNO (SUBREG_REG (*cur_rtx)) == REGNO (p->x)))\n     {\n@@ -859,6 +852,7 @@ count_occurrences_equiv (rtx what, rtx where)\n {\n   struct rtx_search_arg arg;\n \n+  gcc_assert (REG_P (what));\n   arg.x = what;\n   arg.n = 0;\n "}, {"sha": "a883aa5979e58b0ae9a4ee153a26afbf01560086", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3f6aa86222070d219f0c70a60c2eda779ba306/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3f6aa86222070d219f0c70a60c2eda779ba306/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea3f6aa86222070d219f0c70a60c2eda779ba306", "patch": "@@ -1,3 +1,8 @@\n+2011-10-18  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR rtl-optimization/50205\n+\t* gcc.dg/pr50205.c: New.\n+\n 2011-10-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/50767"}, {"sha": "ff523d07f3753f1029efe273698d508232bed28f", "filename": "gcc/testsuite/gcc.dg/pr50205.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3f6aa86222070d219f0c70a60c2eda779ba306/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50205.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3f6aa86222070d219f0c70a60c2eda779ba306/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50205.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50205.c?ref=ea3f6aa86222070d219f0c70a60c2eda779ba306", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target powerpc*-*-* ia64-*-* i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -fno-cprop-registers -fno-dce -fno-forward-propagate -fselective-scheduling2 -funroll-loops -fno-web\" } */\n+extern int a[];\n+\n+void foo (void)\n+{\n+  int i;\n+  for (i = 0; i < 199; i++)\n+    {\n+      if (a[i] != i)\n+\t__builtin_abort ();\n+    }\n+}"}]}