{"sha": "89453706e0032f9a9c2107631873d9dad38dc14c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk0NTM3MDZlMDAzMmY5YTljMjEwNzYzMTg3M2Q5ZGFkMzhkYzE0Yw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2018-05-23T17:31:05Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2018-05-23T17:31:05Z"}, "message": "testsuite: Introduce be/le selectors\n\nThis patch creates \"be\" and \"le\" selectors, which can be used by all\narchitectures, similar to ilp32 and lp64.\n\n\n\t* doc/sourcebuild.texi (Endianness): New subsubsection.\n\ngcc/testsuite/\n\t* lib/target-supports.exp (check_effective_target_be): New.\n\t(check_effective_target_le): New.\n\nFrom-SVN: r260623", "tree": {"sha": "b52bc1928c80ad8cb0845efe311bf3ac89f40950", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b52bc1928c80ad8cb0845efe311bf3ac89f40950"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89453706e0032f9a9c2107631873d9dad38dc14c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89453706e0032f9a9c2107631873d9dad38dc14c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89453706e0032f9a9c2107631873d9dad38dc14c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89453706e0032f9a9c2107631873d9dad38dc14c/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a347241b939399be041672fa6dfbc6c8c1853e28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a347241b939399be041672fa6dfbc6c8c1853e28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a347241b939399be041672fa6dfbc6c8c1853e28"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "555a0f7ac006127484aa04327fe77eae9f0639c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89453706e0032f9a9c2107631873d9dad38dc14c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89453706e0032f9a9c2107631873d9dad38dc14c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89453706e0032f9a9c2107631873d9dad38dc14c", "patch": "@@ -1,3 +1,7 @@\n+2017-05-23  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* doc/sourcebuild.texi (Endianness): New subsubsection.\n+\n 2018-05-23  Luis Machado  <luis.machado@linaro.org>\n \n \t* config/aarch64/aarch64-protos.h (cpu_prefetch_tune)"}, {"sha": "596007d630d9ca15f10c8cc25ff11364df32f796", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89453706e0032f9a9c2107631873d9dad38dc14c/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89453706e0032f9a9c2107631873d9dad38dc14c/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=89453706e0032f9a9c2107631873d9dad38dc14c", "patch": "@@ -1313,6 +1313,16 @@ By convention, keywords ending in @code{_nocache} can also include options\n specified for the particular test in an earlier @code{dg-options} or\n @code{dg-add-options} directive.\n \n+@subsubsection Endianness\n+\n+@table @code\n+@item be\n+Target uses big-endian memory order for multi-byte and multi-word data.\n+\n+@item le\n+Target uses little-endian memory order for multi-byte and multi-word data.\n+@end table\n+\n @subsubsection Data type sizes\n \n @table @code"}, {"sha": "e9b35d5f4d3e61796a0914e8fe2b25e8b2555461", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89453706e0032f9a9c2107631873d9dad38dc14c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89453706e0032f9a9c2107631873d9dad38dc14c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=89453706e0032f9a9c2107631873d9dad38dc14c", "patch": "@@ -1,3 +1,8 @@\n+2017-05-23  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* lib/target-supports.exp (check_effective_target_be): New.\n+\t(check_effective_target_le): New.\n+\n 2018-05-23  Marek Polacek  <polacek@redhat.com>\n \n \t* g++.dg/cpp2a/range-for1.C: New test."}, {"sha": "0a53d7b1aadd350e8167614e1d73b678f6ec93e8", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89453706e0032f9a9c2107631873d9dad38dc14c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89453706e0032f9a9c2107631873d9dad38dc14c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=89453706e0032f9a9c2107631873d9dad38dc14c", "patch": "@@ -2523,6 +2523,22 @@ proc check_effective_target_next_runtime { } {\n     }]\n }\n \n+# Return 1 if we're generating code for big-endian memory order.\n+\n+proc check_effective_target_be { } {\n+    return [check_no_compiler_messages be object {\n+\tint dummy[__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__ ? 1 : -1];\n+    }]\n+}\n+\n+# Return 1 if we're generating code for little-endian memory order.\n+\n+proc check_effective_target_le { } {\n+    return [check_no_compiler_messages le object {\n+\tint dummy[__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__ ? 1 : -1];\n+    }]\n+}\n+\n # Return 1 if we're generating 32-bit code using default options, 0\n # otherwise.\n "}]}