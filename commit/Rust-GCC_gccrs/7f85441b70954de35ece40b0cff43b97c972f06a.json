{"sha": "7f85441b70954de35ece40b0cff43b97c972f06a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y4NTQ0MWI3MDk1NGRlMzVlY2U0MGIwY2ZmNDNiOTdjOTcyZjA2YQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1997-12-22T09:35:49Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-12-22T09:35:49Z"}, "message": "call.c (add_builtin_candidate): Add default case in enumeration switch.\n\n        * call.c (add_builtin_candidate): Add default case in enumeration\n        switch.\n        (build_new_op): Likewise.\n        (convert_like): Likewise.\n        * cvt.c (build_expr_type_conversion): Likewise.\n        * tree.c (real_lvalue_p): Likewise.\n        (lvalue_p): Likewise.\n        (cp_tree_equal): Likewise.\n        * typeck.c (comptypes): Likewise.\n        (build_component_ref): Likewise.\n        (build_function_call_real): Likewise.\n        (build_binary_op_nodefault): Likewise.\n        (build_unary_op): Likewise.\n        (build_modify_expr): Likewise.\n        * typeck2.c (initializer_constant_valid_p): Likewise.\n\nFrom-SVN: r17187", "tree": {"sha": "cba1ef4d2b5838af886de2683ccf23e4e5c8510b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cba1ef4d2b5838af886de2683ccf23e4e5c8510b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f85441b70954de35ece40b0cff43b97c972f06a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f85441b70954de35ece40b0cff43b97c972f06a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f85441b70954de35ece40b0cff43b97c972f06a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f85441b70954de35ece40b0cff43b97c972f06a/comments", "author": null, "committer": null, "parents": [{"sha": "9e04c65a52d300b345d4136d95c93d49aef54781", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e04c65a52d300b345d4136d95c93d49aef54781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e04c65a52d300b345d4136d95c93d49aef54781"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "4f8795b491cbd297912ad3df58a692f0976accab", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f85441b70954de35ece40b0cff43b97c972f06a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f85441b70954de35ece40b0cff43b97c972f06a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7f85441b70954de35ece40b0cff43b97c972f06a", "patch": "@@ -1,3 +1,21 @@\n+Mon Dec 22 11:36:27 1997  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+ \n+\t* call.c (add_builtin_candidate): Add default case in enumeration\n+\tswitch.\n+\t(build_new_op): Likewise.\n+\t(convert_like): Likewise.\n+\t* cvt.c (build_expr_type_conversion): Likewise.\n+\t* tree.c (real_lvalue_p): Likewise.\n+\t(lvalue_p): Likewise.\n+\t(cp_tree_equal): Likewise.\n+\t* typeck.c (comptypes): Likewise.\n+\t(build_component_ref): Likewise.\n+\t(build_function_call_real): Likewise.\n+\t(build_binary_op_nodefault): Likewise.\n+\t(build_unary_op): Likewise.\n+\t(build_modify_expr): Likewise.\n+\t* typeck2.c (initializer_constant_valid_p): Likewise.\n+\n Sun Dec 21 15:59:00 1997  Nick Clifton  <nickc@cygnus.com>\n \n \t* decl2.c (lang_decode_option): Add support for -Wunknown-pragmas."}, {"sha": "d803952dd12da8fd51a413060cbca00db61a96f9", "filename": "gcc/cp/call.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f85441b70954de35ece40b0cff43b97c972f06a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f85441b70954de35ece40b0cff43b97c972f06a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=7f85441b70954de35ece40b0cff43b97c972f06a", "patch": "@@ -3605,6 +3605,9 @@ add_builtin_candidate (candidates, code, code2, fnname, type1, type2,\n     case POSTDECREMENT_EXPR:\n       args[1] = integer_zero_node;\n       type2 = integer_type_node;\n+      break;\n+    default:\n+      break;\n     }\n \n   switch (code)\n@@ -4785,6 +4788,9 @@ build_new_op (code, flags, arg1, arg2, arg3)\n \n     case CALL_EXPR:\n       return build_object_call (arg1, arg2);\n+\n+    default:\n+      break;\n     }\n \n   /* The comma operator can have void args.  */\n@@ -4920,6 +4926,9 @@ build_new_op (code, flags, arg1, arg2, arg3)\n \tcase COMPOUND_EXPR:\n \tcase COMPONENT_REF:\n \t  return NULL_TREE;\n+\n+\tdefault:\n+\t  break;\n \t}\n       if (flags & LOOKUP_COMPLAIN)\n \t{\n@@ -4994,6 +5003,9 @@ build_new_op (code, flags, arg1, arg2, arg3)\n \t  cp_warning (\"comparison between `%#T' and `%#T'\", \n \t\t      TREE_TYPE (arg1), TREE_TYPE (arg2));\n \t}\n+      break;\n+    default:\n+      break;\n     }\n \n   /* We need to strip any leading REF_BIND so that bitfields don't cause\n@@ -5306,6 +5318,9 @@ convert_like (convs, expr)\n       /* Call build_user_type_conversion again for the error.  */\n       return build_user_type_conversion\n \t(TREE_TYPE (convs), TREE_OPERAND (convs, 0), LOOKUP_NORMAL);\n+\n+    default:\n+      break;\n     };\n \n   expr = convert_like (TREE_OPERAND (convs, 0), expr);\n@@ -5328,6 +5343,9 @@ convert_like (convs, expr)\n \t error_mark_node);\n     case LVALUE_CONV:\n       return decay_conversion (expr);\n+\n+    default:\n+      break;\n     }\n   return ocp_convert (TREE_TYPE (convs), expr, CONV_IMPLICIT,\n \t\t      LOOKUP_NORMAL|LOOKUP_NO_CONVERSION);"}, {"sha": "ad47a84b7774ff8730b76802c18f4b49dc4e7933", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f85441b70954de35ece40b0cff43b97c972f06a/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f85441b70954de35ece40b0cff43b97c972f06a/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=7f85441b70954de35ece40b0cff43b97c972f06a", "patch": "@@ -1468,6 +1468,9 @@ build_expr_type_conversion (desires, expr, complain)\n \t  win = (desires & WANT_FLOAT); break;\n \tcase POINTER_TYPE:\n \t  win = (desires & WANT_POINTER); break;\n+\n+\tdefault:\n+\t  break;\n \t}\n \n       if (win)"}, {"sha": "6b8c54e88dcdcdbfd8438b0e2e6e0755733addc3", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f85441b70954de35ece40b0cff43b97c972f06a/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f85441b70954de35ece40b0cff43b97c972f06a/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=7f85441b70954de35ece40b0cff43b97c972f06a", "patch": "@@ -125,6 +125,9 @@ real_lvalue_p (ref)\n     case MIN_EXPR:\n       return (real_lvalue_p (TREE_OPERAND (ref, 0))\n \t      && real_lvalue_p (TREE_OPERAND (ref, 1)));\n+\n+    default:\n+      break;\n     }\n \n   return 0;\n@@ -210,6 +213,9 @@ lvalue_p (ref)\n     case MIN_EXPR:\n       return (lvalue_p (TREE_OPERAND (ref, 0))\n \t      && lvalue_p (TREE_OPERAND (ref, 1)));\n+\n+    default:\n+      break;\n     }\n \n   return 0;\n@@ -2053,6 +2059,9 @@ cp_tree_equal (t1, t2)\n       if (TREE_CODE_CLASS (TREE_CODE (TREE_OPERAND (t1, 0))) == 't')\n \treturn comptypes (TREE_OPERAND (t1, 0), TREE_OPERAND (t2, 0), 1);\n       break;\n+\n+    default:\n+      break;\n     }\n \n   switch (TREE_CODE_CLASS (code1))"}, {"sha": "e706e82d61c841efc4a2418ee9d585487eba5ff0", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f85441b70954de35ece40b0cff43b97c972f06a/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f85441b70954de35ece40b0cff43b97c972f06a/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=7f85441b70954de35ece40b0cff43b97c972f06a", "patch": "@@ -844,6 +844,9 @@ comptypes (type1, type2, strict)\n       if (TYPE_IDENTIFIER (t1) != TYPE_IDENTIFIER (t2))\n \treturn 0;\n       return comptypes (TYPE_CONTEXT (t1), TYPE_CONTEXT (t2), 1);\n+\n+    default:\n+      break;\n     }\n   return attrval == 2 && val == 1 ? 2 : val;\n }\n@@ -1788,6 +1791,9 @@ build_component_ref (datum, component, basetype_path, protect)\n \t\t\t      basetype_path, protect),\n \t build_component_ref (TREE_OPERAND (datum, 2), component,\n \t\t\t      basetype_path, protect));\n+\n+    default:\n+      break;\n     }\n \n   code = TREE_CODE (basetype);\n@@ -2724,6 +2730,9 @@ build_function_call_real (function, params, require_complete, flags)\n \tif (coerced_params == 0)\n \t  return integer_zero_node;\n \treturn build_unary_op (ABS_EXPR, TREE_VALUE (coerced_params), 0);\n+\n+      default:\n+\tbreak;\n       }\n \n   /* C++ */\n@@ -3568,6 +3577,9 @@ build_binary_op_nodefault (code, orig_op0, orig_op1, error_code)\n \t  pedwarn (\"ANSI C++ forbids comparison between pointer and integer\");\n \t}\n       break;\n+\n+    default:\n+      break;\n     }\n \n   if ((code0 == INTEGER_TYPE || code0 == REAL_TYPE || code0 == COMPLEX_TYPE)\n@@ -4334,6 +4346,9 @@ build_unary_op (code, xarg, noconvert)\n \t      TREE_NO_UNUSED_WARNING (compound) = 1;\n \t      return compound;\n \t    }\n+\n+\t  default:\n+\t    break;\n \t  }\n \n \t/* Complain about anything else that is not a true lvalue.  */\n@@ -4497,6 +4512,10 @@ build_unary_op (code, xarg, noconvert)\n \tcase FIX_CEIL_EXPR:\n \t  if (! lvalue_p (arg) && pedantic)\n \t    pedwarn (\"taking the address of a cast to non-reference type\");\n+\t  break;\n+\t  \n+\tdefault:\n+\t  break;\n \t}\n \n       /* Allow the address of a constructor if all the elements\n@@ -4550,6 +4569,9 @@ build_unary_op (code, xarg, noconvert)\n \n \treturn addr;\n       }\n+\n+    default:\n+      break;\n     }\n \n   if (!errstring)\n@@ -5783,6 +5805,9 @@ build_modify_expr (lhs, modifycode, rhs)\n \t\t\t from warn_if_unused_value.  */\n \t\t      cp_convert (void_type_node, rhs), cond);\n       }\n+\n+    default:\n+      break;\n     }\n \n   if (TREE_CODE (lhs) == OFFSET_REF)\n@@ -5934,6 +5959,9 @@ build_modify_expr (lhs, modifycode, rhs)\n \t  return result;\n \treturn cp_convert (TREE_TYPE (lhs), result);\n       }\n+\n+    default:\n+      break;\n     }\n \n   /* Now we have handled acceptable kinds of LHS that are not truly lvalues."}, {"sha": "e867e447fb3f8688b3f182db0e5bb8735bc674da", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f85441b70954de35ece40b0cff43b97c972f06a/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f85441b70954de35ece40b0cff43b97c972f06a/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=7f85441b70954de35ece40b0cff43b97c972f06a", "patch": "@@ -473,6 +473,9 @@ initializer_constant_valid_p (value, endtype)\n \t  return null_pointer_node;\n \treturn 0;\n       }\n+\n+    default:\n+      break;\n     }\n \n   return 0;"}]}