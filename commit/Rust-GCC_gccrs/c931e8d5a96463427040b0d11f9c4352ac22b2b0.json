{"sha": "c931e8d5a96463427040b0d11f9c4352ac22b2b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkzMWU4ZDVhOTY0NjM0MjcwNDBiMGQxMWY5YzQzNTJhYzIyYjJiMA==", "commit": {"author": {"name": "Cooper Qu", "email": "cooper.qu@linux.alibaba.com", "date": "2020-07-13T08:15:08Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2020-07-30T16:25:52Z"}, "message": "RISC-V: Add support for TLS stack protector canary access\n\ngcc/\n\t* config/riscv/riscv-opts.h (stack_protector_guard): New enum.\n\t* config/riscv/riscv.c (riscv_option_override): Handle\n\tthe new options.\n\t* config/riscv/riscv.md (stack_protect_set): New pattern to handle\n\tflexible stack protector guard settings.\n\t(stack_protect_set_<mode>): Ditto.\n\t(stack_protect_test): Ditto.\n\t(stack_protect_test_<mode>): Ditto.\n\t* config/riscv/riscv.opt (mstack-protector-guard=,\n\tmstack-protector-guard-reg=, mstack-protector-guard-offset=): New\n\toptions.\n\t* doc/invoke.texi (Option Summary) [RISC-V Options]:\n\tAdd -mstack-protector-guard=, -mstack-protector-guard-reg=, and\n\t-mstack-protector-guard-offset=.\n\t(RISC-V Options): Ditto.\n\nSigned-off-by: cooper <cooper.qu@linux.alibaba.com>\nSigned-off-by: Guo Ren <guoren@linux.alibaba.com>", "tree": {"sha": "7c12893a5d0b6583368da7a8dca22d352ccdfca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c12893a5d0b6583368da7a8dca22d352ccdfca9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c931e8d5a96463427040b0d11f9c4352ac22b2b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c931e8d5a96463427040b0d11f9c4352ac22b2b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c931e8d5a96463427040b0d11f9c4352ac22b2b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c931e8d5a96463427040b0d11f9c4352ac22b2b0/comments", "author": {"login": "Cooper-Qu", "id": 68842787, "node_id": "MDQ6VXNlcjY4ODQyNzg3", "avatar_url": "https://avatars.githubusercontent.com/u/68842787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cooper-Qu", "html_url": "https://github.com/Cooper-Qu", "followers_url": "https://api.github.com/users/Cooper-Qu/followers", "following_url": "https://api.github.com/users/Cooper-Qu/following{/other_user}", "gists_url": "https://api.github.com/users/Cooper-Qu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cooper-Qu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cooper-Qu/subscriptions", "organizations_url": "https://api.github.com/users/Cooper-Qu/orgs", "repos_url": "https://api.github.com/users/Cooper-Qu/repos", "events_url": "https://api.github.com/users/Cooper-Qu/events{/privacy}", "received_events_url": "https://api.github.com/users/Cooper-Qu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "febd7c43bce0a305aa24ed214ea6a5cba69753dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/febd7c43bce0a305aa24ed214ea6a5cba69753dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/febd7c43bce0a305aa24ed214ea6a5cba69753dd"}], "stats": {"total": 183, "additions": 182, "deletions": 1}, "files": [{"sha": "2a3f9d9eef57aeabe6bff7530522b74ee7a59a79", "filename": "gcc/config/riscv/riscv-opts.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c931e8d5a96463427040b0d11f9c4352ac22b2b0/gcc%2Fconfig%2Friscv%2Friscv-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c931e8d5a96463427040b0d11f9c4352ac22b2b0/gcc%2Fconfig%2Friscv%2Friscv-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-opts.h?ref=c931e8d5a96463427040b0d11f9c4352ac22b2b0", "patch": "@@ -51,4 +51,10 @@ enum riscv_align_data {\n   riscv_align_data_type_natural\n };\n \n+/* Where to get the canary for the stack protector.  */\n+enum stack_protector_guard {\n+  SSP_TLS,\t\t\t/* per-thread canary in TLS block */\n+  SSP_GLOBAL\t\t\t/* global canary */\n+};\n+\n #endif /* ! GCC_RISCV_OPTS_H */"}, {"sha": "63b0c3877b0d3e5da2cfcd82c7b1e28985b4186d", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c931e8d5a96463427040b0d11f9c4352ac22b2b0/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c931e8d5a96463427040b0d11f9c4352ac22b2b0/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=c931e8d5a96463427040b0d11f9c4352ac22b2b0", "patch": "@@ -4775,6 +4775,53 @@ riscv_option_override (void)\n \t   \" [%<-mriscv-attribute%>]\");\n #endif\n \n+  if (riscv_stack_protector_guard == SSP_GLOBAL\n+      && global_options_set.x_riscv_stack_protector_guard_offset_str)\n+    {\n+      error (\"incompatible options %<-mstack-protector-guard=global%> and \"\n+\t     \"%<-mstack-protector-guard-offset=%s%>\",\n+\t     riscv_stack_protector_guard_offset_str);\n+    }\n+\n+  if (riscv_stack_protector_guard == SSP_TLS\n+      && !(global_options_set.x_riscv_stack_protector_guard_offset_str\n+\t   && global_options_set.x_riscv_stack_protector_guard_reg_str))\n+    {\n+      error (\"both %<-mstack-protector-guard-offset%> and \"\n+\t     \"%<-mstack-protector-guard-reg%> must be used \"\n+\t     \"with %<-mstack-protector-guard=sysreg%>\");\n+    }\n+\n+  if (global_options_set.x_riscv_stack_protector_guard_reg_str)\n+    {\n+      const char *str = riscv_stack_protector_guard_reg_str;\n+      int reg = decode_reg_name (str);\n+\n+      if (!IN_RANGE (reg, GP_REG_FIRST + 1, GP_REG_LAST))\n+\terror (\"%qs is not a valid base register in %qs\", str,\n+\t       \"-mstack-protector-guard-reg=\");\n+\n+      riscv_stack_protector_guard_reg = reg;\n+    }\n+\n+  if (global_options_set.x_riscv_stack_protector_guard_offset_str)\n+    {\n+      char *end;\n+      const char *str = riscv_stack_protector_guard_offset_str;\n+      errno = 0;\n+      long offs = strtol (riscv_stack_protector_guard_offset_str, &end, 0);\n+\n+      if (!*str || *end || errno)\n+\terror (\"%qs is not a valid number in %qs\", str,\n+\t       \"-mstack-protector-guard-offset=\");\n+\n+      if (!SMALL_OPERAND (offs))\n+\terror (\"%qs is not a valid offset in %qs\", str,\n+\t       \"-mstack-protector-guard-offset=\");\n+\n+      riscv_stack_protector_guard_offset = offs;\n+    }\n+\n }\n \n /* Implement TARGET_CONDITIONAL_REGISTER_USAGE.  */"}, {"sha": "f15bad3b29eaee4de8eac907c77bec4a7c5c72e4", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c931e8d5a96463427040b0d11f9c4352ac22b2b0/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c931e8d5a96463427040b0d11f9c4352ac22b2b0/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=c931e8d5a96463427040b0d11f9c4352ac22b2b0", "patch": "@@ -65,6 +65,10 @@\n   UNSPECV_BLOCKAGE\n   UNSPECV_FENCE\n   UNSPECV_FENCE_I\n+\n+  ;; Stack Smash Protector\n+  UNSPEC_SSP_SET\n+  UNSPEC_SSP_TEST\n ])\n \n (define_constants\n@@ -2523,6 +2527,82 @@\n   \"\"\n {})\n \n+;; Named patterns for stack smashing protection.\n+\n+(define_expand \"stack_protect_set\"\n+  [(match_operand 0 \"memory_operand\")\n+   (match_operand 1 \"memory_operand\")]\n+  \"\"\n+{\n+  machine_mode mode = GET_MODE (operands[0]);\n+  if (riscv_stack_protector_guard == SSP_TLS)\n+  {\n+    rtx reg = gen_rtx_REG (Pmode, riscv_stack_protector_guard_reg);\n+    rtx offset = GEN_INT (riscv_stack_protector_guard_offset);\n+    rtx addr = gen_rtx_PLUS (Pmode, reg, offset);\n+    operands[1] = gen_rtx_MEM (Pmode, addr);\n+  }\n+\n+  emit_insn ((mode == DImode\n+\t      ? gen_stack_protect_set_di\n+\t      : gen_stack_protect_set_si) (operands[0], operands[1]));\n+  DONE;\n+})\n+\n+;; DO NOT SPLIT THIS PATTERN.  It is important for security reasons that the\n+;; canary value does not live beyond the life of this sequence.\n+(define_insn \"stack_protect_set_<mode>\"\n+  [(set (match_operand:GPR 0 \"memory_operand\" \"=m\")\n+\t(unspec:GPR [(match_operand:GPR 1 \"memory_operand\" \"m\")]\n+\t UNSPEC_SSP_SET))\n+   (set (match_scratch:GPR 2 \"=&r\") (const_int 0))]\n+  \"\"\n+  \"<load>\\\\t%2, %1\\;<store>\\\\t%2, %0\\;li\\t%2, 0\"\n+  [(set_attr \"length\" \"12\")])\n+\n+(define_expand \"stack_protect_test\"\n+  [(match_operand 0 \"memory_operand\")\n+   (match_operand 1 \"memory_operand\")\n+   (match_operand 2)]\n+  \"\"\n+{\n+  rtx result;\n+  machine_mode mode = GET_MODE (operands[0]);\n+\n+  result = gen_reg_rtx(mode);\n+  if (riscv_stack_protector_guard == SSP_TLS)\n+  {\n+      rtx reg = gen_rtx_REG (Pmode, riscv_stack_protector_guard_reg);\n+      rtx offset = GEN_INT (riscv_stack_protector_guard_offset);\n+      rtx addr = gen_rtx_PLUS (Pmode, reg, offset);\n+      operands[1] = gen_rtx_MEM (Pmode, addr);\n+  }\n+  emit_insn ((mode == DImode\n+\t\t  ? gen_stack_protect_test_di\n+\t\t  : gen_stack_protect_test_si) (result,\n+\t\t\t\t\t        operands[0],\n+\t\t\t\t\t        operands[1]));\n+\n+  if (mode == DImode)\n+    emit_jump_insn (gen_cbranchdi4 (gen_rtx_EQ (VOIDmode, result, const0_rtx),\n+\t\t\t\t    result, const0_rtx, operands[2]));\n+  else\n+    emit_jump_insn (gen_cbranchsi4 (gen_rtx_EQ (VOIDmode, result, const0_rtx),\n+\t\t\t\t    result, const0_rtx, operands[2]));\n+\n+  DONE;\n+})\n+\n+(define_insn \"stack_protect_test_<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=r\")\n+\t(unspec:GPR [(match_operand:GPR 1 \"memory_operand\" \"m\")\n+\t\t     (match_operand:GPR 2 \"memory_operand\" \"m\")]\n+\t UNSPEC_SSP_TEST))\n+   (clobber (match_scratch:GPR 3 \"=&r\"))]\n+  \"\"\n+  \"<load>\\t%3, %1\\;<load>\\t%0, %2\\;xor\\t%0, %3, %0\\;li\\t%3, 0\"\n+  [(set_attr \"length\" \"12\")])\n+\n (include \"sync.md\")\n (include \"peephole.md\")\n (include \"pic.md\")"}, {"sha": "f01d3ab79c3b47e952a5effd81e1f55969152082", "filename": "gcc/config/riscv/riscv.opt", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c931e8d5a96463427040b0d11f9c4352ac22b2b0/gcc%2Fconfig%2Friscv%2Friscv.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c931e8d5a96463427040b0d11f9c4352ac22b2b0/gcc%2Fconfig%2Friscv%2Friscv.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.opt?ref=c931e8d5a96463427040b0d11f9c4352ac22b2b0", "patch": "@@ -151,3 +151,31 @@ Enum(riscv_align_data) String(xlen) Value(riscv_align_data_type_xlen)\n \n EnumValue\n Enum(riscv_align_data) String(natural) Value(riscv_align_data_type_natural)\n+\n+mstack-protector-guard=\n+Target RejectNegative Joined Enum(stack_protector_guard) Var(riscv_stack_protector_guard) Init(SSP_GLOBAL)\n+Use given stack-protector guard.\n+\n+Enum\n+Name(stack_protector_guard) Type(enum stack_protector_guard)\n+Valid arguments to -mstack-protector-guard=:\n+\n+EnumValue\n+Enum(stack_protector_guard) String(tls) Value(SSP_TLS)\n+\n+EnumValue\n+Enum(stack_protector_guard) String(global) Value(SSP_GLOBAL)\n+\n+mstack-protector-guard-reg=\n+Target RejectNegative Joined Var(riscv_stack_protector_guard_reg_str)\n+Use the given base register for addressing the stack-protector guard.\n+\n+TargetVariable\n+int riscv_stack_protector_guard_reg = 0\n+\n+mstack-protector-guard-offset=\n+Target RejectNegative Joined Integer Var(riscv_stack_protector_guard_offset_str)\n+Use the given offset for addressing the stack-protector guard.\n+\n+TargetVariable\n+long riscv_stack_protector_guard_offset = 0"}, {"sha": "5a5159d39b36803a00c23e1976dc2e06a3b304ef", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c931e8d5a96463427040b0d11f9c4352ac22b2b0/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c931e8d5a96463427040b0d11f9c4352ac22b2b0/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c931e8d5a96463427040b0d11f9c4352ac22b2b0", "patch": "@@ -1140,7 +1140,9 @@ See RS/6000 and PowerPC Options.\n -mexplicit-relocs  -mno-explicit-relocs @gol\n -mrelax  -mno-relax @gol\n -mriscv-attribute  -mmo-riscv-attribute @gol\n--malign-data=@var{type}}\n+-malign-data=@var{type} @gol\n++-mstack-protector-guard=@var{guard} -mstack-protector-guard-reg=@var{reg} @gol\n++-mstack-protector-guard-offset=@var{offset}}\n \n @emph{RL78 Options}\n @gccoptlist{-msim  -mmul=none  -mmul=g13  -mmul=g14  -mallregs @gol\n@@ -25795,6 +25797,24 @@ Control how GCC aligns variables and constants of array, structure, or union\n types.  Supported values for @var{type} are @samp{xlen} which uses x register\n width as the alignment value, and @samp{natural} which uses natural alignment.\n @samp{xlen} is the default.\n+\n+@item -mstack-protector-guard=@var{guard}\n+@itemx -mstack-protector-guard-reg=@var{reg}\n+@itemx -mstack-protector-guard-offset=@var{offset}\n+@opindex mstack-protector-guard\n+@opindex mstack-protector-guard-reg\n+@opindex mstack-protector-guard-offset\n+Generate stack protection code using canary at @var{guard}.  Supported\n+locations are @samp{global} for a global canary or @samp{tls} for per-thread\n+canary in the TLS block.\n+\n+With the latter choice the options\n+@option{-mstack-protector-guard-reg=@var{reg}} and\n+@option{-mstack-protector-guard-offset=@var{offset}} furthermore specify\n+which register to use as base register for reading the canary,\n+and from what offset from that base register. There is no default\n+register or offset as this is entirely for use within the Linux\n+kernel.\n @end table\n \n @node RL78 Options"}]}