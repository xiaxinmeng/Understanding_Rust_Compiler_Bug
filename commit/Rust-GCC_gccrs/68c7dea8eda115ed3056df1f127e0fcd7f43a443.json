{"sha": "68c7dea8eda115ed3056df1f127e0fcd7f43a443", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhjN2RlYThlZGExMTVlZDMwNTZkZjFmMTI3ZTBmY2Q3ZjQzYTQ0Mw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2000-12-16T19:02:54Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-12-16T19:02:54Z"}, "message": "libjava.exp (test_libjava_from_javac): Strange quoting trick for `.class' link case.\n\n\t* lib/libjava.exp (test_libjava_from_javac): Strange quoting trick\n\tfor `.class' link case.\n\t(bytecompile_file): Change directory outside of `catch'.\n\n\t* libjava.lang/Thread_1.java: Removed.\n\t* libjava.lang/Thread_1.out: Likewise.\n\n\t* libjava.lang/N19990310_4.xfail: New file.\n\t* libjava.lang/stub.xfail: Added new failure modes.\n\t* libjava.lang/stringconst.xfail: New file.\n\t* libjava.lang/PR162.xfail: New file.\n\t* libjava.lang/Final.xfail: Removed.\n\nFrom-SVN: r38311", "tree": {"sha": "b49c7e68a96cfbcd7b79d484314e0561680cbf08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b49c7e68a96cfbcd7b79d484314e0561680cbf08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68c7dea8eda115ed3056df1f127e0fcd7f43a443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c7dea8eda115ed3056df1f127e0fcd7f43a443", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68c7dea8eda115ed3056df1f127e0fcd7f43a443", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c7dea8eda115ed3056df1f127e0fcd7f43a443/comments", "author": null, "committer": null, "parents": [{"sha": "2bed3391384aef335885b8271a085e1c18f3d0f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bed3391384aef335885b8271a085e1c18f3d0f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bed3391384aef335885b8271a085e1c18f3d0f1"}], "stats": {"total": 231, "additions": 30, "deletions": 201}, "files": [{"sha": "eb203074e041e43706de17490ec3781444d35d96", "filename": "libjava/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c7dea8eda115ed3056df1f127e0fcd7f43a443/libjava%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c7dea8eda115ed3056df1f127e0fcd7f43a443/libjava%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FChangeLog?ref=68c7dea8eda115ed3056df1f127e0fcd7f43a443", "patch": "@@ -1,3 +1,18 @@\n+2000-12-16  Tom Tromey  <tromey@redhat.com>\n+\n+\t* lib/libjava.exp (test_libjava_from_javac): Strange quoting trick\n+\tfor `.class' link case.\n+\t(bytecompile_file): Change directory outside of `catch'.\n+\n+\t* libjava.lang/Thread_1.java: Removed.\n+\t* libjava.lang/Thread_1.out: Likewise.\n+\n+\t* libjava.lang/N19990310_4.xfail: New file.\n+\t* libjava.lang/stub.xfail: Added new failure modes.\n+\t* libjava.lang/stringconst.xfail: New file.\n+\t* libjava.lang/PR162.xfail: New file.\n+\t* libjava.lang/Final.xfail: Removed.\n+\n 2000-12-15  Tom Tromey  <tromey@redhat.com>\n \n \t* libjava.lang/instinit.out: Removed erroneous line."}, {"sha": "085fdc2b61875ceb71a9f9bcb2131be23d6c1334", "filename": "libjava/testsuite/lib/libjava.exp", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c7dea8eda115ed3056df1f127e0fcd7f43a443/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c7dea8eda115ed3056df1f127e0fcd7f43a443/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flib%2Flibjava.exp?ref=68c7dea8eda115ed3056df1f127e0fcd7f43a443", "patch": "@@ -18,8 +18,6 @@ proc libjava_tcompile {source destfile type options} {\n     # This strange-looking expression really does quote the `$'.\n     regsub -all -- {\\$} $source {\\$} source\n     regsub -all -- {\\$} $destfile {\\$} destfile\n-    verbose \"Now source = $source\"\n-    verbose \"Now destfile = $destfile\"\n     return [target_compile $source $destfile $type $options]\n }\n \n@@ -88,19 +86,17 @@ proc bytecompile_file { file objdir {classpath {}} } {\n     if {$classpath != \"\"} then {\n         set env(CLASSPATH) $classpath\n     }\n+    set here [pwd]\n+    cd $dirname\n     if {[catch {\n-\tset here [pwd]\n-\tcd $dirname\n \tset q [eval exec \"$javac [list $file] -d $objdir 2>@ stdout\"]\n-\tcd $here\n-\t# \"return\" a result\n-\tset q $q\n     } msg]} then {\n \tverbose \"couldn't compile $file: $msg\"\n \tset r 0\n     } else {\n \tset r 1\n     }\n+    cd $here\n     return $r\n }\n \n@@ -581,8 +577,15 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n \t    }\n \t}\n     } else {\n+\t# This is no evil: we de-listify CLASS_FILES so that we can\n+\t# turn around and quote the `$' in it for the shell.  I really\n+\t# hate DejaGNU.  It is so !@#$!@# unpredictable.\n+\tset hack \"\"\n+\tforeach stupid $class_files {\n+\t    set hack \"$hack $stupid\"\n+\t}\n \tset x [prune_warnings \\\n-\t\t [libjava_tcompile $class_files \"$executable\" $type $args]]\n+\t\t [libjava_tcompile $hack \"$executable\" $type $args]]\n     }\n     if {[info exists opts(xfail-byte)]} {\n \tsetup_xfail *-*-*"}, {"sha": "c999f8ee0cacd3ef53674f0ae2f7b925ec977e3a", "filename": "libjava/testsuite/libjava.lang/N19990310_4.xfail", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c7dea8eda115ed3056df1f127e0fcd7f43a443/libjava%2Ftestsuite%2Flibjava.lang%2FN19990310_4.xfail", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c7dea8eda115ed3056df1f127e0fcd7f43a443/libjava%2Ftestsuite%2Flibjava.lang%2FN19990310_4.xfail", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FN19990310_4.xfail?ref=68c7dea8eda115ed3056df1f127e0fcd7f43a443", "previous_filename": "libjava/testsuite/libjava.lang/Final.xfail"}, {"sha": "c999f8ee0cacd3ef53674f0ae2f7b925ec977e3a", "filename": "libjava/testsuite/libjava.lang/PR162.xfail", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c7dea8eda115ed3056df1f127e0fcd7f43a443/libjava%2Ftestsuite%2Flibjava.lang%2FPR162.xfail", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c7dea8eda115ed3056df1f127e0fcd7f43a443/libjava%2Ftestsuite%2Flibjava.lang%2FPR162.xfail", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FPR162.xfail?ref=68c7dea8eda115ed3056df1f127e0fcd7f43a443", "patch": "@@ -0,0 +1 @@\n+xfail-output"}, {"sha": "42f8c840000749576e1911adb698488741b5431a", "filename": "libjava/testsuite/libjava.lang/Thread_1.java", "status": "removed", "additions": 0, "deletions": 184, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bed3391384aef335885b8271a085e1c18f3d0f1/libjava%2Ftestsuite%2Flibjava.lang%2FThread_1.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bed3391384aef335885b8271a085e1c18f3d0f1/libjava%2Ftestsuite%2Flibjava.lang%2FThread_1.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FThread_1.java?ref=2bed3391384aef335885b8271a085e1c18f3d0f1", "patch": "@@ -1,184 +0,0 @@\n-// Various thread tests.\n-\n-public class Thread_1 extends Thread\n-{\n-  // The group for the workers.\n-  static ThreadGroup subgroup;\n-\n-  // Which piece of test code to try.\n-  static int test_case;\n-\n-  // Names of the tests.\n-  static final int JOIN_GOOD = 0;\n-  static final int JOIN_TIMEOUT = 1;\n-  static final int JOIN_INTERRUPTED = 2;\n-  static final int THREAD_EXIT = 3;\n-\n-  // True if this is normal; false if daemon.\n-  boolean normal;\n-  // The other thread in the test.\n-  Thread_1 other;\n-  // True when the thread has entered run().\n-  boolean started;\n-\n-  public void run ()\n-  {\n-    try\n-      {\n-\tif (normal)\n-\t  {\n-\t    System.out.println (\"test \" + test_case);\n-\t    // Tell the main thread to start the daemon thread.\n-\t    synchronized (this)\n-\t      {\n-\t\tstarted = true;\n-\t\tnotify ();\n-\t      }\n-\t    // Now wait for daemon to start.\n-\t    synchronized (other)\n-\t      {\n-\t\twhile (! other.started)\n-\t\t  other.wait ();\n-\t      }\n-\t    switch (test_case)\n-\t      {\n-\t      case JOIN_GOOD:\n-\t\tother.join ();\n-\t\tSystem.out.println (\"joined\");\n-\t\tbreak;\n-\t      case JOIN_TIMEOUT:\n-\t\tother.join (10);\n-\t\tSystem.out.println (other.isAlive());\n-\t\tother.join ();\n-\t\tbreak;\n-\t      case JOIN_INTERRUPTED:\n-\t\tother.join ();\n-\t\tSystem.out.println (\"joined\");\n-\t\tbreak;\n-\t      case THREAD_EXIT:\n-\t\t// Nothing.\n-\t\tbreak;\n-\n-\t      default:\n-\t\tSystem.out.println (\"failure\");\n-\t\tbreak;\n-\t      }\n-\t  }\n-\telse\n-\t  {\n-\t    // Let the normal thread start first.\n-\t    synchronized (other)\n-\t      {\n-\t\twhile (! other.started)\n-\t\t  other.wait();\n-\t      }\n-\t    // Tell normal thread that we've started.\n-\t    synchronized (this)\n-\t      {\n-\t\tstarted = true;\n-\t\tnotify ();\n-\t      }\n-\t    switch (test_case)\n-\t      {\n-\t      case JOIN_GOOD:\n-\t\tSystem.out.println (\"daemon done\");\n-\t\tbreak;\n-\t      case JOIN_TIMEOUT:\n-\t\tsleep (50);\n-\t\tbreak;\n-\t      case JOIN_INTERRUPTED:\n-\t\tother.interrupt ();\n-\t\tbreak;\n-\t      case THREAD_EXIT:\n-\t\t// Wait for a while.  However, don't wait indefinitely\n-\t\t// -- we want this thread to terminate so that the\n-\t\t// process won't hang if there is a bug.\n-\t\tsleep (10000);\n-\t\tSystem.out.println (\"daemon still alive\");\n-\t\tbreak;\n-\n-\t      default:\n-\t\tSystem.out.println (\"failure\");\n-\t\tbreak;\n-\t      }\n-\t  }\n-      }\n-    catch (InterruptedException e)\n-      {\n-\tSystem.out.println (\"interrupted\");\n-      }\n-  }\n-\n-  public void setOther (Thread_1 x)\n-  {\n-    other = x;\n-  }\n-\n-  Thread_1 (String name, boolean x)\n-  {\n-    super (subgroup, name);\n-    normal = x;\n-    started = false;\n-    setDaemon (! normal);\n-  }\n-\n-  // Run a single test.\n-  static Thread_1 doit (int what)\n-  {\n-    // FIXME: we used to just use the same threads each time.  That\n-    // didn't work -- must debug.\n-    Thread_1 dt = new Thread_1 (\"daemon\", false);\n-    Thread_1 nt = new Thread_1 (\"normal\", true);\n-\n-    dt.setOther(nt);\n-    nt.setOther(dt);\n-\n-    test_case = what;\n-    try\n-      {\n-\tnt.start();\n-\tdt.start();\n-\n-\t// Don't wait for the threads if we're doing the exit test.\n-\tif (what != THREAD_EXIT)\n-\t  {\n-\t    nt.join ();\n-\t    dt.join ();\n-\t  }\n-      }\n-    catch (InterruptedException e)\n-      {\n-\tSystem.out.println (\"caught bad exception\");\n-      }\n-\n-    return dt;\n-  }\n-\n-  public static void main (String[] args)\n-  {\n-    subgroup = new ThreadGroup (\"sub\");\n-\n-    doit (JOIN_GOOD);\n-\n-    System.out.println (\"active count = \" + subgroup.activeCount ());\n-\n-    Thread_1 dt = doit (JOIN_TIMEOUT);\n-    // Make sure that joining a dead thread works.\n-    System.out.println (\"still alive: \" + dt.isAlive ());\n-    try\n-      {\n-\tdt.join ();\n-      }\n-    catch (InterruptedException e)\n-      {\n-\tSystem.out.println (\"exception caught\");\n-      }\n-\n-    doit (JOIN_INTERRUPTED);\n-\n-    // Note: this test has a race conditoin.  So we don't run it any\n-    // more.\n-    // This test must come last.\n-    // doit (THREAD_EXIT);\n-  }\n-}"}, {"sha": "62385487214e99aa6ae31fe763e5ddc9c0246b5a", "filename": "libjava/testsuite/libjava.lang/Thread_1.out", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bed3391384aef335885b8271a085e1c18f3d0f1/libjava%2Ftestsuite%2Flibjava.lang%2FThread_1.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bed3391384aef335885b8271a085e1c18f3d0f1/libjava%2Ftestsuite%2Flibjava.lang%2FThread_1.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FThread_1.out?ref=2bed3391384aef335885b8271a085e1c18f3d0f1", "patch": "@@ -1,9 +0,0 @@\n-test 0\n-daemon done\n-joined\n-active count = 0\n-test 1\n-true\n-still alive: false\n-test 2\n-interrupted"}, {"sha": "c999f8ee0cacd3ef53674f0ae2f7b925ec977e3a", "filename": "libjava/testsuite/libjava.lang/stringconst.xfail", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c7dea8eda115ed3056df1f127e0fcd7f43a443/libjava%2Ftestsuite%2Flibjava.lang%2Fstringconst.xfail", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c7dea8eda115ed3056df1f127e0fcd7f43a443/libjava%2Ftestsuite%2Flibjava.lang%2Fstringconst.xfail", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2Fstringconst.xfail?ref=68c7dea8eda115ed3056df1f127e0fcd7f43a443", "patch": "@@ -0,0 +1 @@\n+xfail-output"}, {"sha": "bee72d37d58d61cbe5bd2982f1e270f5ea7c9d7c", "filename": "libjava/testsuite/libjava.lang/stub.xfail", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c7dea8eda115ed3056df1f127e0fcd7f43a443/libjava%2Ftestsuite%2Flibjava.lang%2Fstub.xfail", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c7dea8eda115ed3056df1f127e0fcd7f43a443/libjava%2Ftestsuite%2Flibjava.lang%2Fstub.xfail", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2Fstub.xfail?ref=68c7dea8eda115ed3056df1f127e0fcd7f43a443", "patch": "@@ -1 +1,3 @@\n xfail-byte\n+xfail-gcj\n+xfail-gcjC"}]}