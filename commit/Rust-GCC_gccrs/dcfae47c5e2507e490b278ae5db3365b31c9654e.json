{"sha": "dcfae47c5e2507e490b278ae5db3365b31c9654e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNmYWU0N2M1ZTI1MDdlNDkwYjI3OGFlNWRiMzM2NWIzMWM5NjU0ZQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2005-09-09T08:39:18Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2005-09-09T08:39:18Z"}, "message": "Makefile.in (LIBGCC_DEPS): Add libgcc2.h.\n\n* Makefile.in (LIBGCC_DEPS): Add libgcc2.h.\n* libgcc2.c (__clz_tab[], __popcount_tab[]): Set the fixed dimension of\n  these arrays.\n* libgcc2.h (__clz_tab[], __popcount_tab[]): Add exports of these arrays.\n* longlong.h: Only provide a prototype for the __clz_tab[] array if this\n  header has not been included from libgcc2.h.\n* config/stormy16/stormy16-lib2.c: Include libgcc2.h rather than defining\n  own types.\n  Provide prototypes for exported functions.\n  Use the __clz_tab[] and __popcount_tab[] arrays provided by libgcc2.c.\n\nFrom-SVN: r104081", "tree": {"sha": "ac8df5d57a52e84f47e0d0efe6a0dda135e8261b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac8df5d57a52e84f47e0d0efe6a0dda135e8261b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcfae47c5e2507e490b278ae5db3365b31c9654e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcfae47c5e2507e490b278ae5db3365b31c9654e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcfae47c5e2507e490b278ae5db3365b31c9654e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcfae47c5e2507e490b278ae5db3365b31c9654e/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a174b2f8ec2e48a091a8857099451912a69f5e99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a174b2f8ec2e48a091a8857099451912a69f5e99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a174b2f8ec2e48a091a8857099451912a69f5e99"}], "stats": {"total": 193, "additions": 138, "deletions": 55}, "files": [{"sha": "185cc136807619e86955d8d771faeb6152c9cfeb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfae47c5e2507e490b278ae5db3365b31c9654e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfae47c5e2507e490b278ae5db3365b31c9654e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dcfae47c5e2507e490b278ae5db3365b31c9654e", "patch": "@@ -1,3 +1,18 @@\n+2005-09-09  Nick Clifton  <nickc@redhat.com>\n+\n+\t* Makefile.in (LIBGCC_DEPS): Add libgcc2.h.\n+\t* libgcc2.c (__clz_tab[], __popcount_tab[]): Set the fixed\n+\tdimension of these arrays.\n+\t* libgcc2.h (__clz_tab[], __popcount_tab[]): Add exports of\n+\tthese arrays.\n+\t* longlong.h: Only provide a prototype for the __clz_tab[] array\n+\tif this header has not been included from libgcc2.h.\n+\t* config/stormy16/stormy16-lib2.c: Include libgcc2.h rather than\n+\tdefining own types.\n+\tProvide prototypes for exported functions.\n+\tUse the __clz_tab[] and __popcount_tab[] arrays provided by\n+\tlibgcc2.c.\n+\n 2005-09-08  Josh Conner  <jconner@apple.com>\n \n \tPR c++/23180"}, {"sha": "69e482dd50969c784b24629b04f7e24911ddd5f7", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfae47c5e2507e490b278ae5db3365b31c9654e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfae47c5e2507e490b278ae5db3365b31c9654e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=dcfae47c5e2507e490b278ae5db3365b31c9654e", "patch": "@@ -1350,7 +1350,7 @@ libgcc.mk: config.status Makefile mklibgcc $(LIB2ADD) $(LIB2ADD_ST) specs \\\n # All the things that might cause us to want to recompile bits of libgcc.\n LIBGCC_DEPS = $(GCC_PASSES) $(LANGUAGES) stmp-int-hdrs $(STMP_FIXPROTO) \\\n \tlibgcc.mk $(srcdir)/libgcc2.c $(srcdir)/libgcov.c $(TCONFIG_H) \\\n-\t$(MACHMODE_H) longlong.h gbl-ctors.h config.status \\\n+\t$(MACHMODE_H) longlong.h gbl-ctors.h config.status $(srcdir)/libgcc2.h \\\n \ttsystem.h $(FPBIT) $(DPBIT) $(TPBIT) $(LIB2ADD) \\\n \t$(LIB2ADD_ST) $(LIB2ADDEH) $(LIB2ADDEHDEP) $(EXTRA_PARTS) \\\n \t$(srcdir)/config/$(LIB1ASMSRC) \\"}, {"sha": "e8b215869f08d81c3611e30bac7fb4ca1192373f", "filename": "gcc/config/stormy16/stormy16-lib2.c", "status": "modified", "additions": 104, "deletions": 44, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfae47c5e2507e490b278ae5db3365b31c9654e/gcc%2Fconfig%2Fstormy16%2Fstormy16-lib2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfae47c5e2507e490b278ae5db3365b31c9654e/gcc%2Fconfig%2Fstormy16%2Fstormy16-lib2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16-lib2.c?ref=dcfae47c5e2507e490b278ae5db3365b31c9654e", "patch": "@@ -1,19 +1,79 @@\n-typedef\t\t int HItype\t\t__attribute__ ((mode (HI)));\n-typedef\t\t int SItype\t\t__attribute__ ((mode (SI)));\n-typedef unsigned int USItype\t\t__attribute__ ((mode (SI)));\n+/* This file contains 16-bit versions of some of the functions found in\n+   libgcc2.c.  Really libgcc ought to be moved out of the gcc directory\n+   and into its own top level directory, and then split up into multiple\n+   files.  On this glorious day maybe this code can be integrated into\n+   it too.  */\n+\n+/* Copyright (C) 2005  Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 2, or (at your option) any later\n+   version.\n+\n+   In addition to the permissions in the GNU General Public License, the\n+   Free Software Foundation gives you unlimited permission to link the\n+   compiled version of this file into combinations with other programs,\n+   and to distribute those combinations without any restriction coming\n+   from the use of this file.  (The General Public License restrictions\n+   do apply in other respects; for example, they cover modification of\n+   the file, and distribution when not linked into a combine\n+   executable.)\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+   for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING.  If not, write to the Free\n+   Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+   02110-1301, USA.  */\n+\n+#include \"tconfig.h\"\n+#include \"tsystem.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+\n+#ifdef HAVE_GAS_HIDDEN\n+#define ATTRIBUTE_HIDDEN  __attribute__ ((__visibility__ (\"hidden\")))\n+#else\n+#define ATTRIBUTE_HIDDEN\n+#endif\n+\n+#include \"libgcc2.h\"\n+#undef int\n+\n+/* These prototypes would normally live in libgcc2.h, but this can\n+   only happen once the code below is integrated into libgcc2.c.  */\n+\n+extern USItype udivmodsi4 (USItype, USItype, word_type);\n+extern SItype __divsi3 (SItype, SItype);\n+extern SItype __modsi3 (SItype, SItype);\n+extern SItype __udivsi3 (SItype, SItype);\n+extern SItype __umodsi3 (SItype, SItype);\n+extern SItype __ashlsi3 (SItype, SItype);\n+extern SItype __ashrsi3 (SItype, SItype);\n+extern USItype __lshrsi3 (USItype, USItype);\n+extern int __popcounthi2 (UHWtype);\n+extern int __parityhi2 (UHWtype);\n+extern int __clzhi2 (UHWtype);\n+extern int __ctzhi2 (UHWtype);\n+\n \n-typedef int word_type\t\t\t__attribute__ ((mode (__word__)));\n \n USItype\n-udivmodsi4(USItype num, USItype den, word_type modwanted)\n+udivmodsi4 (USItype num, USItype den, word_type modwanted)\n {\n   USItype bit = 1;\n   USItype res = 0;\n \n-  while (den < num && bit && !(den & (1L<<31)))\n+  while (den < num && bit && !(den & (1L << 31)))\n     {\n-      den <<=1;\n-      bit <<=1;\n+      den <<= 1;\n+      bit <<= 1;\n     }\n   while (bit)\n     {\n@@ -22,15 +82,15 @@ udivmodsi4(USItype num, USItype den, word_type modwanted)\n \t  num -= den;\n \t  res |= bit;\n \t}\n-      bit >>=1;\n-      den >>=1;\n+      bit >>= 1;\n+      den >>= 1;\n     }\n-  if (modwanted) return num;\n+\n+  if (modwanted)\n+    return num;\n   return res;\n }\n \n-\n-\n SItype\n __divsi3 (SItype a, SItype b)\n {\n@@ -57,8 +117,6 @@ __divsi3 (SItype a, SItype b)\n   return res;\n }\n \n-\n-\n SItype\n __modsi3 (SItype a, SItype b)\n {\n@@ -82,17 +140,12 @@ __modsi3 (SItype a, SItype b)\n   return res;\n }\n \n-\n-\n-\n SItype\n __udivsi3 (SItype a, SItype b)\n {\n   return udivmodsi4 (a, b, 0);\n }\n \n-\n-\n SItype\n __umodsi3 (SItype a, SItype b)\n {\n@@ -141,51 +194,58 @@ __lshrsi3 (USItype a, USItype b)\n   return a;\n }\n \n-static const unsigned char __popcount_tab[] =\n-{\n-  0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,\n-  1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,\n-  1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,\n-  2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,\n-  1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,\n-  2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,\n-  2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,\n-  3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8,\n-};\n-\n+/* Returns the number of set bits in X.\n+   FIXME:  The return type really should be unsigned,\n+   but this is not how the builtin is prototyped.  */\n int\n-__popcounthi2 (unsigned int x)\n+__popcounthi2 (UHWtype x)\n {\n-  unsigned int ret;\n+  int ret;\n \n   ret = __popcount_tab [x & 0xff];\n   ret += __popcount_tab [(x >> 8) & 0xff];\n \n   return ret;\n }\n \n+/* Returns the number of set bits in X, modulo 2.\n+   FIXME:  The return type really should be unsigned,\n+   but this is not how the builtin is prototyped.  */\n+\n int\n-__parityhi2 (unsigned int x)\n+__parityhi2 (UHWtype x)\n {\n   x ^= x >> 8;\n   x ^= x >> 4;\n   x &= 0xf;\n   return (0x6996 >> x) & 1;\n }\n \n+/* Returns the number of leading zero bits in X.\n+   FIXME:  The return type really should be unsigned,\n+   but this is not how the builtin is prototyped.  */\n+\n int\n-__ctzhi2 (unsigned int x)\n+__clzhi2 (UHWtype x)\n {\n-  extern int __ctzsi2 (unsigned long);\n-  unsigned long y = x;\n-\n-  return __ctzsi2 (y << 16) - 16;\n+  if (x > 0xff)\n+    return 8 - __clz_tab[x >> 8];\n+  return 16 - __clz_tab[x];\n }\n \n+/* Returns the number of trailing zero bits in X.\n+   FIXME:  The return type really should be unsigned,\n+   but this is not how the builtin is prototyped.  */\n+\n int\n-__clzhi2 (unsigned int x)\n+__ctzhi2 (UHWtype x)\n {\n-  extern int __clzsi2 (unsigned long);\n-\n-  return __clzsi2 (x) - 16;\n+  /* This is cunning.  It converts X into a number with only the one bit\n+     set, the bit was the least significant bit in X.  From this we can\n+     use the __clz_tab[] array to compute the number of trailing bits.  */\n+  x &= - x;\n+\n+  if (x > 0xff)\n+    return __clz_tab[x >> 8] + 7;\n+  return __clz_tab[x] - 1;\n }"}, {"sha": "5950cc9ed11813f45d720fb731a5dc2b42c42733", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfae47c5e2507e490b278ae5db3365b31c9654e/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfae47c5e2507e490b278ae5db3365b31c9654e/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=dcfae47c5e2507e490b278ae5db3365b31c9654e", "patch": "@@ -648,7 +648,7 @@ __udiv_w_sdiv (UWtype *rp __attribute__ ((__unused__)),\n #endif\n \n #ifdef L_clz\n-const UQItype __clz_tab[] =\n+const UQItype __clz_tab[256] =\n {\n   0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n   6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n@@ -657,7 +657,7 @@ const UQItype __clz_tab[] =\n   8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,\n   8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,\n   8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,\n-  8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,\n+  8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8\n };\n #endif\n \f\n@@ -731,7 +731,7 @@ extern const UQItype __popcount_tab[] ATTRIBUTE_HIDDEN;\n #endif\n \n #ifdef L_popcount_tab\n-const UQItype __popcount_tab[] =\n+const UQItype __popcount_tab[256] =\n {\n     0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,\n     1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,\n@@ -740,7 +740,7 @@ const UQItype __popcount_tab[] =\n     1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,\n     2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,\n     2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6,3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,\n-    3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8,\n+    3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7,4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8\n };\n #endif\n \f"}, {"sha": "56ffc61f4beb02e31b82bbb5bcb0671a6bfc9d9b", "filename": "gcc/libgcc2.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfae47c5e2507e490b278ae5db3365b31c9654e/gcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfae47c5e2507e490b278ae5db3365b31c9654e/gcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.h?ref=dcfae47c5e2507e490b278ae5db3365b31c9654e", "patch": "@@ -373,6 +373,16 @@ typedef union\n   DWtype ll;\n } DWunion;\n \n+/* Defined for L_popcount_tab.  Exported here because some targets may\n+   want to use it for their own versions of the __popcount builtins.  */\n+extern const UQItype __popcount_tab[256];\n+\n+/* Defined for L_clz.  Exported here because some targets may want to use\n+   it for their own versions of the __clz builtins.  It contains the bit\n+   position of the first set bit for the numbers 0 - 255.  This avoids the\n+   need for a seperate table for the __ctz builtins.  */\n+extern const UQItype __clz_tab[256];\n+\n #include \"longlong.h\"\n \n #undef int"}, {"sha": "3f42347c7f36c944e53f3b52eea5855bf5deea12", "filename": "gcc/longlong.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfae47c5e2507e490b278ae5db3365b31c9654e/gcc%2Flonglong.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfae47c5e2507e490b278ae5db3365b31c9654e/gcc%2Flonglong.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flonglong.h?ref=dcfae47c5e2507e490b278ae5db3365b31c9654e", "patch": "@@ -1,6 +1,6 @@\n /* longlong.h -- definitions for mixed size 32/64 bit arithmetic.\n-   Copyright (C) 1991, 1992, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2004\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1992, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2004,\n+   2005  Free Software Foundation, Inc.\n \n    This definition file is free software; you can redistribute it\n    and/or modify it under the terms of the GNU General Public\n@@ -29,8 +29,7 @@\n    DItype, UDItype -- Signed and unsigned 64 bit types.\n \n    On a 32 bit machine UWtype should typically be USItype;\n-   on a 64 bit machine, UWtype should typically be UDItype.\n-*/\n+   on a 64 bit machine, UWtype should typically be UDItype.  */\n \n #define __BITS4 (W_TYPE_SIZE / 4)\n #define __ll_B ((UWtype) 1 << (W_TYPE_SIZE / 2))\n@@ -42,6 +41,7 @@\n #define UWtype\t\tUSItype\n #define UHWtype\t\tUSItype\n #define UDWtype\t\tUDItype\n+extern const UQItype __clz_tab[256] ATTRIBUTE_HIDDEN;\n #endif\n \n /* Define auxiliary asm macros.\n@@ -129,7 +129,6 @@ extern UDItype __udiv_qrnnd (UDItype *, UDItype, UDItype, UDItype);\n #define count_trailing_zeros(COUNT,X)\t((COUNT) = __builtin_ctzl (X))\n #define COUNT_LEADING_ZEROS_0 64\n #else\n-extern const UQItype __clz_tab[] ATTRIBUTE_HIDDEN;\n #define count_leading_zeros(COUNT,X) \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     UDItype __xr = (X), __t, __a;\t\t\t\t\t\\\n@@ -1312,7 +1311,6 @@ UDItype __umulsidi3 (USItype, USItype);\n #endif\n \n #if !defined (count_leading_zeros)\n-extern const UQItype __clz_tab[] ATTRIBUTE_HIDDEN;\n #define count_leading_zeros(count, x) \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     UWtype __xr = (x);\t\t\t\t\t\t\t\\"}]}