{"sha": "47853c73001ded810bfe6e4ca7f7ef34be600681", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc4NTNjNzMwMDFkZWQ4MTBiZmU2ZTRjYTdmN2VmMzRiZTYwMDY4MQ==", "commit": {"author": {"name": "Artjoms Sinkarovs", "email": "artyom.shinkaroff@gmail.com", "date": "2010-11-04T10:54:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-11-04T10:54:33Z"}, "message": "passes.c (init_optimization_passes): Move veclower after SSA.\n\n2010-11-04  Artjoms Sinkarovs <artyom.shinakroff@gmail.com>\n\tRichard Guenther  <rguenther@suse.de>\n\n\t* passes.c (init_optimization_passes): Move veclower after SSA.\n\t* tree-vect-generic.c (uniform_vector_p): New function.\n\t(expand_vector_operations_1): Handle conversion.\n\t(pass_lower_vector): Update SSA form.\n\n\ttestsuite/\n\t* gcc.dg/vec-scal-opt.c: New testcase.\n\t* gcc.dg/vec-scal-opt1.c: New testcase.\n\t* gcc.dg/vec-scal-opt2.c: New testcase.\n\nFrom-SVN: r166303", "tree": {"sha": "deda1d4b4cc70866a2c7abdb650bf6e35c900463", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/deda1d4b4cc70866a2c7abdb650bf6e35c900463"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47853c73001ded810bfe6e4ca7f7ef34be600681", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47853c73001ded810bfe6e4ca7f7ef34be600681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47853c73001ded810bfe6e4ca7f7ef34be600681", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47853c73001ded810bfe6e4ca7f7ef34be600681/comments", "author": {"login": "ashinkarov", "id": 892232, "node_id": "MDQ6VXNlcjg5MjIzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/892232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashinkarov", "html_url": "https://github.com/ashinkarov", "followers_url": "https://api.github.com/users/ashinkarov/followers", "following_url": "https://api.github.com/users/ashinkarov/following{/other_user}", "gists_url": "https://api.github.com/users/ashinkarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashinkarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashinkarov/subscriptions", "organizations_url": "https://api.github.com/users/ashinkarov/orgs", "repos_url": "https://api.github.com/users/ashinkarov/repos", "events_url": "https://api.github.com/users/ashinkarov/events{/privacy}", "received_events_url": "https://api.github.com/users/ashinkarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8ed14ce4ecb92c728dca62a02090d5cf6f10fcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ed14ce4ecb92c728dca62a02090d5cf6f10fcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8ed14ce4ecb92c728dca62a02090d5cf6f10fcf"}], "stats": {"total": 186, "additions": 169, "deletions": 17}, "files": [{"sha": "7c903436186b67e39cc204a25f1e53adc447aae6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47853c73001ded810bfe6e4ca7f7ef34be600681/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47853c73001ded810bfe6e4ca7f7ef34be600681/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47853c73001ded810bfe6e4ca7f7ef34be600681", "patch": "@@ -1,3 +1,11 @@\n+2010-11-04  Artjoms Sinkarovs <artyom.shinakroff@gmail.com>\n+\tRichard Guenther  <rguenther@suse.de>\n+\n+\t* passes.c (init_optimization_passes): Move veclower after SSA.\n+\t* tree-vect-generic.c (uniform_vector_p): New function.\n+\t(expand_vector_operations_1): Handle conversion.\n+\t(pass_lower_vector): Update SSA form.\n+\n 2010-11-04  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* gcc/configure.ac: Filter -mdynamic-no-pic from CFLAGS when testing for"}, {"sha": "5da5ea8ab6cd954b96aa69076037743980060028", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47853c73001ded810bfe6e4ca7f7ef34be600681/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47853c73001ded810bfe6e4ca7f7ef34be600681/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=47853c73001ded810bfe6e4ca7f7ef34be600681", "patch": "@@ -736,7 +736,6 @@ init_optimization_passes (void)\n   NEXT_PASS (pass_refactor_eh);\n   NEXT_PASS (pass_lower_eh);\n   NEXT_PASS (pass_build_cfg);\n-  NEXT_PASS (pass_lower_vector);\n   NEXT_PASS (pass_warn_function_return);\n   NEXT_PASS (pass_build_cgraph_edges);\n   NEXT_PASS (pass_inline_parameters);\n@@ -755,6 +754,7 @@ init_optimization_passes (void)\n \n       NEXT_PASS (pass_referenced_vars);\n       NEXT_PASS (pass_build_ssa);\n+      NEXT_PASS (pass_lower_vector);\n       NEXT_PASS (pass_early_warn_uninitialized);\n       /* Note that it is not strictly necessary to schedule an early\n \t inline pass here.  However, some test cases (e.g.,"}, {"sha": "e76da86e091827c6c0e4154b019dc9729af8f15a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47853c73001ded810bfe6e4ca7f7ef34be600681/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47853c73001ded810bfe6e4ca7f7ef34be600681/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=47853c73001ded810bfe6e4ca7f7ef34be600681", "patch": "@@ -1,7 +1,14 @@\n+2010-11-04  Artjoms Sinkarovs <artyom.shinakroff@gmail.com>\n+\tRichard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/vec-scal-opt.c: New testcase.\n+\t* gcc.dg/vec-scal-opt1.c: New testcase.\n+\t* gcc.dg/vec-scal-opt2.c: New testcase.\n+\n 2010-11-04  Iain Sandoe  <iains@gcc.gnu.org>\n \n-\t* lib/plugin-support.exp (plugin-test-execute): Filter -mdynamic-no-pic from\n-\tplugin build flags on Darwin targets.\n+\t* lib/plugin-support.exp (plugin-test-execute): Filter -mdynamic-no-pic\n+\tfrom plugin build flags on Darwin targets.\n \n 2010-11-03  H.J. Lu  <hongjiu.lu@intel.com>\n "}, {"sha": "0af49cf8b7f266dba835e4e2c72caf35b451b9ac", "filename": "gcc/testsuite/gcc.dg/vec-scal-opt.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47853c73001ded810bfe6e4ca7f7ef34be600681/gcc%2Ftestsuite%2Fgcc.dg%2Fvec-scal-opt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47853c73001ded810bfe6e4ca7f7ef34be600681/gcc%2Ftestsuite%2Fgcc.dg%2Fvec-scal-opt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvec-scal-opt.c?ref=47853c73001ded810bfe6e4ca7f7ef34be600681", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-veclower\" } */\n+\n+#define vidx(type, vec, idx) (*((type *) &(vec) + idx))\n+#define vector(elcount, type)  \\\n+__attribute__((vector_size((elcount)*sizeof(type)))) type\n+\n+short k;\n+\n+int main (int argc, char *argv[]) {\n+   k = argc;\n+   vector(8, short) v0 = {argc,1,2,3,4,5,6,7};\n+   vector(8, short) v2 = {k,   k,k,k,k,k,k,k};\n+   vector(8, short) r1;\n+\n+   r1 = v0 >> v2;\n+\n+   return vidx(short, r1, 0);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \">> k.\\[0-9_\\]*\" 1 \"veclower\" } } */\n+/* { dg-final { cleanup-tree-dump \"veclower\" } } */"}, {"sha": "e4ef8a9a3e2df6b8da506ba38ae8b653337dfda3", "filename": "gcc/testsuite/gcc.dg/vec-scal-opt1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47853c73001ded810bfe6e4ca7f7ef34be600681/gcc%2Ftestsuite%2Fgcc.dg%2Fvec-scal-opt1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47853c73001ded810bfe6e4ca7f7ef34be600681/gcc%2Ftestsuite%2Fgcc.dg%2Fvec-scal-opt1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvec-scal-opt1.c?ref=47853c73001ded810bfe6e4ca7f7ef34be600681", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-veclower\" } */\n+\n+#define vidx(type, vec, idx) (*((type *) &(vec) + idx))\n+#define vector(elcount, type)  \\\n+__attribute__((vector_size((elcount)*sizeof(type)))) type\n+\n+short k;\n+\n+int main (int argc, char *argv[]) {\n+   vector(8, short) v0 = {argc,1,2,3,4,5,6,7};\n+   vector(8, short) r1;\n+\n+   r1 = v0 >> (vector(8, short)){2,2,2,2,2,2,2,2};\n+\n+   return vidx(short, r1, 0);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \">> 2\" 1 \"veclower\" } } */\n+/* { dg-final { cleanup-tree-dump \"veclower\" } } */"}, {"sha": "f9ed1bbd95816f309bc329786914f9b59db4bd88", "filename": "gcc/testsuite/gcc.dg/vec-scal-opt2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47853c73001ded810bfe6e4ca7f7ef34be600681/gcc%2Ftestsuite%2Fgcc.dg%2Fvec-scal-opt2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47853c73001ded810bfe6e4ca7f7ef34be600681/gcc%2Ftestsuite%2Fgcc.dg%2Fvec-scal-opt2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvec-scal-opt2.c?ref=47853c73001ded810bfe6e4ca7f7ef34be600681", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-veclower\" } */\n+\n+#define vidx(type, vec, idx) (*((type *) &(vec) + idx))\n+#define vector(elcount, type)  \\\n+__attribute__((vector_size((elcount)*sizeof(type)))) type\n+\n+int main (int argc, char *argv[]) {\n+   vector(8, short) v0 = {argc,1,2,3,4,5,6,7};\n+   vector(8, short) v1 = {2,2,2,2,2,2,2,2};\n+   vector(8, short) r1;\n+\n+   r1 = v0 >> v1;\n+\n+   return vidx(short, r1, 0);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \">> 2\" 1 \"veclower\" } } */\n+/* { dg-final { cleanup-tree-dump \"veclower\" } } */"}, {"sha": "3f582402443dc05fcc22f2f61031bca62906a74a", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 90, "deletions": 14, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47853c73001ded810bfe6e4ca7f7ef34be600681/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47853c73001ded810bfe6e4ca7f7ef34be600681/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=47853c73001ded810bfe6e4ca7f7ef34be600681", "patch": "@@ -284,6 +284,55 @@ expand_vector_addition (gimple_stmt_iterator *gsi,\n \t\t\t\t    a, b, code);\n }\n \n+/* Check if vector VEC consists of all the equal elements and\n+   that the number of elements corresponds to the type of VEC.\n+   The function returns first element of the vector\n+   or NULL_TREE if the vector is not uniform.  */\n+static tree\n+uniform_vector_p (tree vec)\n+{\n+  tree first, t, els;\n+  unsigned i;\n+\n+  if (vec == NULL_TREE)\n+    return NULL_TREE;\n+\n+  if (TREE_CODE (vec) == VECTOR_CST)\n+    {\n+      els = TREE_VECTOR_CST_ELTS (vec);\n+      first = TREE_VALUE (els);\n+      els = TREE_CHAIN (els);\n+\n+      for (t = els; t; t = TREE_CHAIN (t))\n+\tif (!operand_equal_p (first, TREE_VALUE (t), 0))\n+\t  return NULL_TREE;\n+\n+      return first;\n+    }\n+\n+  else if (TREE_CODE (vec) == CONSTRUCTOR)\n+    {\n+      first = error_mark_node;\n+\n+      FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (vec), i, t)\n+        {\n+          if (i == 0)\n+            {\n+              first = t;\n+              continue;\n+            }\n+\t  if (!operand_equal_p (first, t, 0))\n+\t    return NULL_TREE;\n+        }\n+      if (i != TYPE_VECTOR_SUBPARTS (TREE_TYPE (vec)))\n+\treturn NULL_TREE;\n+      \n+      return first;\n+    }\n+  \n+  return NULL_TREE;\n+}\n+\n static tree\n expand_vector_operation (gimple_stmt_iterator *gsi, tree type, tree compute_type,\n \t\t\t gimple assign, enum tree_code code)\n@@ -392,7 +441,7 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi)\n   tree lhs, rhs1, rhs2 = NULL, type, compute_type;\n   enum tree_code code;\n   enum machine_mode compute_mode;\n-  optab op;\n+  optab op = NULL;\n   enum gimple_rhs_class rhs_class;\n   tree new_rhs;\n \n@@ -434,18 +483,44 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi)\n       || code == LROTATE_EXPR\n       || code == RROTATE_EXPR)\n     {\n-      /* If the 2nd argument is vector, we need a vector/vector shift */\n+      bool vector_scalar_shift;\n+      op = optab_for_tree_code (code, type, optab_scalar);\n+      \n+      /* Vector/Scalar shift is supported.  */\n+      vector_scalar_shift = (op && (optab_handler (op, TYPE_MODE (type)) \n+\t\t\t\t    != CODE_FOR_nothing));\n+\n+      /* If the 2nd argument is vector, we need a vector/vector shift.\n+         Except all the elements in the second vector are the same.  */\n       if (VECTOR_MODE_P (TYPE_MODE (TREE_TYPE (rhs2))))\n-\top = optab_for_tree_code (code, type, optab_vector);\n-      else\n-\t{\n-\t  /* Try for a vector/scalar shift, and if we don't have one, see if we\n-\t     have a vector/vector shift */\n-\t  op = optab_for_tree_code (code, type, optab_scalar);\n-\t  if (!op\n-\t      || optab_handler (op, TYPE_MODE (type)) == CODE_FOR_nothing)\n-\t    op = optab_for_tree_code (code, type, optab_vector);\n-\t}\n+        {\n+          tree first;\n+          gimple def_stmt;\n+\n+          /* Check whether we have vector <op> {x,x,x,x} where x\n+             could be a scalar variable or a constant. Transform\n+             vector <op> {x,x,x,x} ==> vector <op> scalar.  */\n+          if (vector_scalar_shift \n+              && ((TREE_CODE (rhs2) == VECTOR_CST\n+\t\t   && (first = uniform_vector_p (rhs2)) != NULL_TREE)\n+\t\t  || (TREE_CODE (rhs2) == SSA_NAME \n+\t\t      && (def_stmt = SSA_NAME_DEF_STMT (rhs2))\n+\t\t      && gimple_assign_single_p (def_stmt)\n+\t\t      && (first = uniform_vector_p\n+\t\t\t    (gimple_assign_rhs1 (def_stmt))) != NULL_TREE)))\n+            {\n+              gimple_assign_set_rhs2 (stmt, first);\n+              update_stmt (stmt);\n+              rhs2 = first;\n+            }\n+          else\n+            op = optab_for_tree_code (code, type, optab_vector);\n+        }\n+    \n+      /* Try for a vector/scalar shift, and if we don't have one, see if we\n+         have a vector/vector shift */\n+      else if (!vector_scalar_shift)\n+        op = optab_for_tree_code (code, type, optab_vector);\n     }\n   else\n     op = optab_for_tree_code (code, type, optab_default);\n@@ -559,8 +634,9 @@ struct gimple_opt_pass pass_lower_vector =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_ggc_collect\n-    | TODO_verify_stmts\t\t\t/* todo_flags_finish */\n+  TODO_dump_func | TODO_update_ssa\t/* todo_flags_finish */\n+    | TODO_verify_ssa\n+    | TODO_verify_stmts | TODO_verify_flow\n  }\n };\n "}]}