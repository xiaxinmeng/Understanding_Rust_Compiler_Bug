{"sha": "3bc63227d5eb38a70adee7375e5d3596e9c7ec01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JjNjMyMjdkNWViMzhhNzBhZGVlNzM3NWU1ZDM1OTZlOWM3ZWMwMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-08-02T00:52:09Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-08-02T00:52:09Z"}, "message": "re PR c++/60417 ([DR 1518] Bogus error on C++03 aggregate initialization)\n\n\tPR c++/60417\n\t* init.c (build_vec_init): Set CONSTRUCTOR_IS_DIRECT_INIT on\n\tinit-list for trailing elements.\n\t* typeck2.c (process_init_constructor_array): Likewise.\n\nFrom-SVN: r213511", "tree": {"sha": "02b57039678bac4037bf83635219fe9879d8222d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02b57039678bac4037bf83635219fe9879d8222d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bc63227d5eb38a70adee7375e5d3596e9c7ec01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc63227d5eb38a70adee7375e5d3596e9c7ec01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bc63227d5eb38a70adee7375e5d3596e9c7ec01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc63227d5eb38a70adee7375e5d3596e9c7ec01/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f42589ed151f62e68caf4e9c8ad0cf57e6bb456f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f42589ed151f62e68caf4e9c8ad0cf57e6bb456f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f42589ed151f62e68caf4e9c8ad0cf57e6bb456f"}], "stats": {"total": 62, "additions": 42, "deletions": 20}, "files": [{"sha": "dc4aebe9f50504960a9065d76c371228dd08dfe3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc63227d5eb38a70adee7375e5d3596e9c7ec01/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc63227d5eb38a70adee7375e5d3596e9c7ec01/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3bc63227d5eb38a70adee7375e5d3596e9c7ec01", "patch": "@@ -1,3 +1,10 @@\n+2014-08-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/60417\n+\t* init.c (build_vec_init): Set CONSTRUCTOR_IS_DIRECT_INIT on\n+\tinit-list for trailing elements.\n+\t* typeck2.c (process_init_constructor_array): Likewise.\n+\n 2014-08-01  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tDR 217 again"}, {"sha": "eeee5bb362033b7f0d06baa8467609e511c81cb1", "filename": "gcc/cp/init.c", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc63227d5eb38a70adee7375e5d3596e9c7ec01/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc63227d5eb38a70adee7375e5d3596e9c7ec01/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=3bc63227d5eb38a70adee7375e5d3596e9c7ec01", "patch": "@@ -3545,19 +3545,11 @@ build_vec_init (tree base, tree maxindex, tree init,\n       try_block = begin_try_block ();\n     }\n \n-  /* If the initializer is {}, then all elements are initialized from {}.\n-     But for non-classes, that's the same as value-initialization.  */\n+  bool empty_list = false;\n   if (init && BRACE_ENCLOSED_INITIALIZER_P (init)\n       && CONSTRUCTOR_NELTS (init) == 0)\n-    {\n-      if (CLASS_TYPE_P (type))\n-\t/* Leave init alone.  */;\n-      else\n-\t{\n-\t  init = NULL_TREE;\n-\t  explicit_value_init_p = true;\n-\t}\n-    }\n+    /* Skip over the handling of non-empty init lists.  */\n+    empty_list = true;\n \n   /* Maybe pull out constant value when from_array? */\n \n@@ -3677,14 +3669,8 @@ build_vec_init (tree base, tree maxindex, tree init,\n \t    vec_free (new_vec);\n \t}\n \n-      /* Any elements without explicit initializers get {}.  */\n-      if (cxx_dialect >= cxx11 && AGGREGATE_TYPE_P (type))\n-\tinit = build_constructor (init_list_type_node, NULL);\n-      else\n-\t{\n-\t  init = NULL_TREE;\n-\t  explicit_value_init_p = true;\n-\t}\n+      /* Any elements without explicit initializers get T{}.  */\n+      empty_list = true;\n     }\n   else if (from_array)\n     {\n@@ -3699,6 +3685,26 @@ build_vec_init (tree base, tree maxindex, tree init,\n \t}\n     }\n \n+  /* If the initializer is {}, then all elements are initialized from T{}.\n+     But for non-classes, that's the same as value-initialization.  */\n+  if (empty_list)\n+    {\n+      if (cxx_dialect >= cxx11 && AGGREGATE_TYPE_P (type))\n+\t{\n+\t  if (BRACE_ENCLOSED_INITIALIZER_P (init)\n+\t      && CONSTRUCTOR_NELTS (init) == 0)\n+\t    /* Reuse it.  */;\n+\t  else\n+\t    init = build_constructor (init_list_type_node, NULL);\n+\t  CONSTRUCTOR_IS_DIRECT_INIT (init) = true;\n+\t}\n+      else\n+\t{\n+\t  init = NULL_TREE;\n+\t  explicit_value_init_p = true;\n+\t}\n+    }\n+\n   /* Now, default-initialize any remaining elements.  We don't need to\n      do that if a) the type does not need constructing, or b) we've\n      already initialized all the elements."}, {"sha": "20523faf09b406bf053a8e61135767fdef5bcb30", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc63227d5eb38a70adee7375e5d3596e9c7ec01/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc63227d5eb38a70adee7375e5d3596e9c7ec01/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=3bc63227d5eb38a70adee7375e5d3596e9c7ec01", "patch": "@@ -1239,8 +1239,9 @@ process_init_constructor_array (tree type, tree init,\n \t  {\n \t    /* If this type needs constructors run for default-initialization,\n \t       we can't rely on the back end to do it for us, so make the\n-\t       initialization explicit by list-initializing from {}.  */\n+\t       initialization explicit by list-initializing from T{}.  */\n \t    next = build_constructor (init_list_type_node, NULL);\n+\t    CONSTRUCTOR_IS_DIRECT_INIT (next) = true;\n \t    next = massage_init_elt (TREE_TYPE (type), next, complain);\n \t    if (initializer_zerop (next))\n \t      /* The default zero-initialization is fine for us; don't"}, {"sha": "d1dbb39fc612043968661ba8c13a66b5585ae44d", "filename": "gcc/testsuite/g++.dg/init/explicit2.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc63227d5eb38a70adee7375e5d3596e9c7ec01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fexplicit2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc63227d5eb38a70adee7375e5d3596e9c7ec01/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fexplicit2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fexplicit2.C?ref=3bc63227d5eb38a70adee7375e5d3596e9c7ec01", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/60417\n+\n+struct A { explicit A(int = 0); };\n+\n+int main()\n+{\n+  A a[1] = { };\n+}"}]}