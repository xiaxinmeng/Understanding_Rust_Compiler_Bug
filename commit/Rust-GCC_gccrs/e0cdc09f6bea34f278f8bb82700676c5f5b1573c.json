{"sha": "e0cdc09f6bea34f278f8bb82700676c5f5b1573c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBjZGMwOWY2YmVhMzRmMjc4ZjhiYjgyNzAwNjc2YzVmNWIxNTczYw==", "commit": {"author": {"name": "Matthias Klose", "email": "doko@ubuntu.com", "date": "2012-11-14T21:29:15Z"}, "committer": {"name": "Matthias Klose", "email": "doko@gcc.gnu.org", "date": "2012-11-14T21:29:15Z"}, "message": "invoke.texi: Document -print-multiarch.\n\n2012-11-14  Matthias Klose  <doko@ubuntu.com>\n\n        * doc/invoke.texi: Document -print-multiarch.\n        * doc/install.texi: Document --enable-multiarch.\n        * doc/fragments.texi: Document MULTILIB_OSDIRNAMES, MULTIARCH_DIRNAME.\n        * configure.ac: Add --enable-multiarch option.\n        * configure: Regenerate.\n        * Makefile.in (s-mlib): Pass MULTIARCH_DIRNAME to genmultilib.\n        enable_multiarch, with_float: New macros.\n        if_multiarch: New macro, define in terms of enable_multiarch.\n        * genmultilib: Add new argument for the multiarch name.\n        * gcc.c (multiarch_dir): Define.\n        (for_each_path): Search for multiarch suffixes.\n        (driver_handle_option): Handle multiarch option.\n        (do_spec_1): Pass -imultiarch if defined.\n        (main): Print multiarch.\n        (set_multilib_dir): Separate multilib and multiarch names\n        from multilib_select.\n        (print_multilib_info): Ignore multiarch names in multilib_select.\n        * incpath.c (add_standard_paths): Search the multiarch include dirs.\n        * cppdefault.h (default_include): Document multiarch in multilib\n        member.\n        * cppdefault.c: [LOCAL_INCLUDE_DIR, STANDARD_INCLUDE_DIR] Add an\n        include directory for multiarch directories.\n        * common.opt: New options --print-multiarch and -imultilib.\n        * config.gcc <i[34567]86-*-linux* | x86_64-*-linux*> (tmake_file):\n        Include i386/t-linux.\n        <i[34567]86-*-kfreebsd*-gnu | x86_64-*-kfreebsd*-gnu> (tmake_file):\n        Include i386/t-kfreebsd.\n        <i[34567]86-*-gnu*> (tmake_file): Include i386/t-gnu.\n        * config/i386/t-linux64: Add multiarch names in\n        MULTILIB_OSDIRNAMES, define MULTIARCH_DIRNAME.\n        * config/i386/t-gnu: New file.\n        * config/i386/t-kfreebsd: Likewise.\n        * config/i386/t-linux: Likewise.\n\nFrom-SVN: r193508", "tree": {"sha": "798f236c1a228f52fb496d836f7871c8ddfaf6d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/798f236c1a228f52fb496d836f7871c8ddfaf6d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0cdc09f6bea34f278f8bb82700676c5f5b1573c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0cdc09f6bea34f278f8bb82700676c5f5b1573c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0cdc09f6bea34f278f8bb82700676c5f5b1573c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/comments", "author": {"login": "doko42", "id": 11258518, "node_id": "MDQ6VXNlcjExMjU4NTE4", "avatar_url": "https://avatars.githubusercontent.com/u/11258518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doko42", "html_url": "https://github.com/doko42", "followers_url": "https://api.github.com/users/doko42/followers", "following_url": "https://api.github.com/users/doko42/following{/other_user}", "gists_url": "https://api.github.com/users/doko42/gists{/gist_id}", "starred_url": "https://api.github.com/users/doko42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doko42/subscriptions", "organizations_url": "https://api.github.com/users/doko42/orgs", "repos_url": "https://api.github.com/users/doko42/repos", "events_url": "https://api.github.com/users/doko42/events{/privacy}", "received_events_url": "https://api.github.com/users/doko42/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "46de9f5e3757fbcaea992772f7094bf93b0f8c35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46de9f5e3757fbcaea992772f7094bf93b0f8c35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46de9f5e3757fbcaea992772f7094bf93b0f8c35"}], "stats": {"total": 346, "additions": 316, "deletions": 30}, "files": [{"sha": "0c9b78933bc2799935a265b36ddd9317d945c433", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0cdc09f6bea34f278f8bb82700676c5f5b1573c", "patch": "@@ -1,3 +1,39 @@\n+2012-11-14  Matthias Klose  <doko@ubuntu.com>\n+\n+\t* doc/invoke.texi: Document -print-multiarch.\n+\t* doc/install.texi: Document --enable-multiarch.\n+\t* doc/fragments.texi: Document MULTILIB_OSDIRNAMES, MULTIARCH_DIRNAME.\n+\t* configure.ac: Add --enable-multiarch option.\n+\t* configure: Regenerate.\n+\t* Makefile.in (s-mlib): Pass MULTIARCH_DIRNAME to genmultilib.\n+\tenable_multiarch, with_float: New macros.\n+\tif_multiarch: New macro, define in terms of enable_multiarch.\n+\t* genmultilib: Add new argument for the multiarch name.\n+\t* gcc.c (multiarch_dir): Define.\n+\t(for_each_path): Search for multiarch suffixes.\n+\t(driver_handle_option): Handle multiarch option.\n+\t(do_spec_1): Pass -imultiarch if defined.\n+\t(main): Print multiarch.\n+\t(set_multilib_dir): Separate multilib and multiarch names\n+\tfrom multilib_select.\n+\t(print_multilib_info): Ignore multiarch names in multilib_select.\n+\t* incpath.c (add_standard_paths): Search the multiarch include dirs.\n+\t* cppdefault.h (default_include): Document multiarch in multilib\n+\tmember.\n+\t* cppdefault.c: [LOCAL_INCLUDE_DIR, STANDARD_INCLUDE_DIR] Add an\n+        include directory for multiarch directories.\n+\t* common.opt: New options --print-multiarch and -imultilib.\n+\t* config.gcc <i[34567]86-*-linux* | x86_64-*-linux*> (tmake_file):\n+\tInclude i386/t-linux.\n+\t<i[34567]86-*-kfreebsd*-gnu | x86_64-*-kfreebsd*-gnu> (tmake_file):\n+\tInclude i386/t-kfreebsd.\n+\t<i[34567]86-*-gnu*> (tmake_file): Include i386/t-gnu.\n+\t* config/i386/t-linux64: Add multiarch names in\n+\tMULTILIB_OSDIRNAMES, define MULTIARCH_DIRNAME.\n+\t* config/i386/t-gnu: New file.\n+\t* config/i386/t-kfreebsd: Likewise.\n+\t* config/i386/t-linux: Likewise.\n+\n 2012-11-14  Jan Hubicka  <jh@suse.cz>\n \n \t* tree.c (set_call_expr_flags): New function."}, {"sha": "fb2fd8657a399584c79a0e5ec991081402961135", "filename": "gcc/Makefile.in", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e0cdc09f6bea34f278f8bb82700676c5f5b1573c", "patch": "@@ -530,6 +530,18 @@ extra_modes_file=@extra_modes_file@\n extra_opt_files=@extra_opt_files@\n host_hook_obj=@out_host_hook_obj@\n \n+# Multiarch support\n+enable_multiarch = @enable_multiarch@\n+with_float = @with_float@\n+ifeq ($(enable_multiarch),yes)\n+  if_multiarch = $(1)\n+else ifeq ($(enable_multiarch),auto)\n+  # SYSTEM_HEADER_DIR is makefile syntax, cannot be evaluated in configure.ac\n+  if_multiarch = $(if $(wildcard $(shell echo $(SYSTEM_HEADER_DIR))/../../usr/lib/*/crti.o),$(1))\n+else\n+  if_multiarch =\n+endif\n+\n # ------------------------\n # Installation directories\n # ------------------------\n@@ -1809,10 +1821,11 @@ s-mlib: $(srcdir)/genmultilib Makefile\n \t    \"$(MULTILIB_EXCLUSIONS)\" \\\n \t    \"$(MULTILIB_OSDIRNAMES)\" \\\n \t    \"$(MULTILIB_REQUIRED)\" \\\n+\t    \"$(MULTIARCH_DIRNAME)\" \\\n \t    \"@enable_multilib@\" \\\n \t    > tmp-mlib.h; \\\n \telse \\\n-\t  $(SHELL) $(srcdir)/genmultilib '' '' '' '' '' '' '' '' no\\\n+\t  $(SHELL) $(srcdir)/genmultilib '' '' '' '' '' '' '' '' \"$(MULTIARCH_DIRNAME)\" no \\\n \t    > tmp-mlib.h; \\\n \tfi\n \t$(SHELL) $(srcdir)/../move-if-change tmp-mlib.h multilib.h"}, {"sha": "0a7c953942e3dc385581950868519e904db67799", "filename": "gcc/common.opt", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=e0cdc09f6bea34f278f8bb82700676c5f5b1573c", "patch": "@@ -348,6 +348,9 @@ Driver Alias(print-multi-lib)\n -print-multi-os-directory\n Driver Alias(print-multi-os-directory)\n \n+-print-multiarch\n+Driver Alias(print-multiarch)\n+\n -print-prog-name\n Driver Separate Alias(print-prog-name=)\n \n@@ -2357,6 +2360,10 @@ iplugindir=\n Common Joined Var(plugindir_string) Init(0)\n -iplugindir=<dir>\tSet <dir> to be the default plugin directory\n \n+imultiarch\n+Common Joined Separate RejectDriver Var(imultiarch) Init(0)\n+-imultiarch <dir>\tSet <dir> to be the multiarch include subdirectory\n+\n l\n Driver Joined Separate\n \n@@ -2413,6 +2420,9 @@ Driver Var(print_multi_lib)\n \n print-multi-os-directory\n Driver Var(print_multi_os_directory)\n+ \n+print-multiarch\n+Driver Var(print_multiarch)\n \n print-prog-name=\n Driver JoinedOrMissing Var(print_prog_name)"}, {"sha": "665a7436349ece7fc5dab22ce92eb7e6c2712383", "filename": "gcc/config.gcc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=e0cdc09f6bea34f278f8bb82700676c5f5b1573c", "patch": "@@ -3640,9 +3640,14 @@ case ${target} in\n \n \ti[34567]86-*-darwin* | x86_64-*-darwin*)\n \t\t;;\n-\ti[34567]86-*-linux* | x86_64-*-linux* | \\\n-\t  i[34567]86-*-kfreebsd*-gnu | x86_64-*-kfreebsd*-gnu | \\\n-\t  i[34567]86-*-gnu*)\n+\ti[34567]86-*-linux* | x86_64-*-linux*)\n+\t\ttmake_file=\"$tmake_file i386/t-linux\"\n+\t\t;;\n+\ti[34567]86-*-kfreebsd*-gnu | x86_64-*-kfreebsd*-gnu)\n+\t\ttmake_file=\"$tmake_file i386/t-kfreebsd\"\n+\t\t;;\n+\ti[34567]86-*-gnu*)\n+\t\ttmake_file=\"$tmake_file i386/t-gnu\"\n \t\t;;\n \ti[34567]86-*-solaris2* | x86_64-*-solaris2.1[0-9]*)\n \t\t;;"}, {"sha": "5f946c71604ff9897aec3b9e4774c6d290f580ab", "filename": "gcc/config/i386/t-gnu", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fconfig%2Fi386%2Ft-gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fconfig%2Fi386%2Ft-gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-gnu?ref=e0cdc09f6bea34f278f8bb82700676c5f5b1573c", "patch": "@@ -0,0 +1 @@\n+MULTIARCH_DIRNAME = $(call if_multiarch,i386-gnu)"}, {"sha": "b4310df8afbb94994c12a70a2e7982c03308c565", "filename": "gcc/config/i386/t-kfreebsd", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fconfig%2Fi386%2Ft-kfreebsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fconfig%2Fi386%2Ft-kfreebsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-kfreebsd?ref=e0cdc09f6bea34f278f8bb82700676c5f5b1573c", "patch": "@@ -0,0 +1,5 @@\n+MULTIARCH_DIRNAME = $(call if_multiarch,i386-kfreebsd-gnu)\n+\n+# MULTILIB_OSDIRNAMES are set in t-linux64.\n+KFREEBSD_OS = $(filter kfreebsd%, $(word 3, $(subst -, ,$(target))))\n+MULTILIB_OSDIRNAMES := $(subst linux,$(KFREEBSD_OS),$(MULTILIB_OSDIRNAMES))"}, {"sha": "155314c08a7c0f873cba994382b79ff14d37e86b", "filename": "gcc/config/i386/t-linux", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fconfig%2Fi386%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fconfig%2Fi386%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-linux?ref=e0cdc09f6bea34f278f8bb82700676c5f5b1573c", "patch": "@@ -0,0 +1 @@\n+MULTIARCH_DIRNAME = $(call if_multiarch,i386-linux-gnu)"}, {"sha": "dfaf2763d8935c3f08df59101ef947d2d31a4075", "filename": "gcc/config/i386/t-linux64", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fconfig%2Fi386%2Ft-linux64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fconfig%2Fi386%2Ft-linux64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-linux64?ref=e0cdc09f6bea34f278f8bb82700676c5f5b1573c", "patch": "@@ -34,6 +34,6 @@\n comma=,\n MULTILIB_OPTIONS    = $(subst $(comma),/,$(TM_MULTILIB_CONFIG))\n MULTILIB_DIRNAMES   = $(patsubst m%, %, $(subst /, ,$(MULTILIB_OPTIONS)))\n-MULTILIB_OSDIRNAMES = m64=../lib64\n-MULTILIB_OSDIRNAMES+= m32=$(if $(wildcard $(shell echo $(SYSTEM_HEADER_DIR))/../../usr/lib32),../lib32,../lib)\n-MULTILIB_OSDIRNAMES+= mx32=../libx32\n+MULTILIB_OSDIRNAMES = m64=../lib64$(call if_multiarch,:x86_64-linux-gnu)\n+MULTILIB_OSDIRNAMES+= m32=$(if $(wildcard $(shell echo $(SYSTEM_HEADER_DIR))/../../usr/lib32),../lib32,../lib)$(call if_multiarch,:i386-linux-gnu)\n+MULTILIB_OSDIRNAMES+= mx32=../libx32$(call if_multiarch,:x32-linux-gnu)"}, {"sha": "cdfbaad4d9ed065154567cbc4d394b9ca69da822", "filename": "gcc/configure", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=e0cdc09f6bea34f278f8bb82700676c5f5b1573c", "patch": "@@ -765,6 +765,8 @@ SYSROOT_CFLAGS_FOR_TARGET\n enable_shared\n enable_fixed_point\n enable_decimal_float\n+with_float\n+enable_multiarch\n enable_multilib\n coverage_flags\n valgrind_command\n@@ -874,6 +876,7 @@ enable_coverage\n enable_gather_detailed_mem_stats\n with_stabs\n enable_multilib\n+enable_multiarch\n enable___cxa_atexit\n enable_decimal_float\n enable_fixed_point\n@@ -1574,6 +1577,7 @@ Optional Features:\n   --enable-gather-detailed-mem-stats\n                           enable detailed memory allocation stats gathering\n   --enable-multilib       enable library support for multiple ABIs\n+  --enable-multiarch      enable support for multiarch paths\n   --enable-__cxa_atexit   enable __cxa_atexit for C++\n   --enable-decimal-float={no,yes,bid,dpd}\n \t\t\tenable decimal float extension to C.  Selecting 'bid'\n@@ -7016,6 +7020,36 @@ fi\n \n \n \n+# Determine whether or not multiarch is enabled.\n+# Check whether --enable-multiarch was given.\n+if test \"${enable_multiarch+set}\" = set; then :\n+  enableval=$enable_multiarch; case \"${withval}\" in\n+yes|no|auto) enable_multiarch=$withval;;\n+*) as_fn_error \"bad value ${withval} given for --enable-multiarch option\" \"$LINENO\" 5 ;;\n+esac\n+else\n+  enable_multiarch=auto\n+fi\n+\n+if test x${enable_multiarch} = xauto; then\n+  if test x${with_native_system_header_dir} != x; then\n+    ma_msg_suffix=\", disabled auto check (configured with --native-system-header-dir)\"\n+    enable_multiarch=no\n+  fi\n+  if test x$host != x$target && test \"x$with_sysroot\" = x; then\n+    ma_msg_suffix=\", disabled auto check (cross build configured without --with-sysroot)\"\n+    enable_multiarch=no\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for multiarch configuration\" >&5\n+$as_echo_n \"checking for multiarch configuration... \" >&6; }\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $enable_multiarch$ma_msg_suffix\" >&5\n+$as_echo \"$enable_multiarch$ma_msg_suffix\" >&6; }\n+\n+# needed for setting the multiarch name for soft-float/hard-float ABIs\n+\n+\n # Enable __cxa_atexit for C++.\n # Check whether --enable-__cxa_atexit was given.\n if test \"${enable___cxa_atexit+set}\" = set; then :\n@@ -7038,7 +7072,6 @@ else\n \n   case $target in\n     powerpc*-*-linux* | i?86*-*-linux* | x86_64*-*-linux* | s390*-*-linux* | \\\n-    i?86*-*-gnu* | \\\n     i?86*-*-mingw* | x86_64*-*-mingw* | \\\n     i?86*-*-cygwin*)\n       enable_decimal_float=yes\n@@ -17786,7 +17819,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17789 \"configure\"\n+#line 17822 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -17892,7 +17925,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17895 \"configure\"\n+#line 17928 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "ac25623976ef21c276929a1924e0c0ba53385c23", "filename": "gcc/configure.ac", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=e0cdc09f6bea34f278f8bb82700676c5f5b1573c", "patch": "@@ -613,6 +613,31 @@ AC_ARG_ENABLE(multilib,\n [], [enable_multilib=yes])\n AC_SUBST(enable_multilib)\n \n+# Determine whether or not multiarch is enabled.\n+AC_ARG_ENABLE(multiarch,\n+[AS_HELP_STRING([--enable-multiarch],\n+\t\t[enable support for multiarch paths])],\n+[case \"${withval}\" in\n+yes|no|auto) enable_multiarch=$withval;;\n+*) AC_MSG_ERROR(bad value ${withval} given for --enable-multiarch option) ;;\n+esac], [enable_multiarch=auto])\n+if test x${enable_multiarch} = xauto; then\n+  if test x${with_native_system_header_dir} != x; then\n+    ma_msg_suffix=\", disabled auto check (configured with --native-system-header-dir)\"\n+    enable_multiarch=no\n+  fi\n+  if test x$host != x$target && test \"x$with_sysroot\" = x; then\n+    ma_msg_suffix=\", disabled auto check (cross build configured without --with-sysroot)\"\n+    enable_multiarch=no\n+  fi\n+fi\n+AC_MSG_CHECKING(for multiarch configuration)\n+AC_SUBST(enable_multiarch)\n+AC_MSG_RESULT($enable_multiarch$ma_msg_suffix)\n+\n+# needed for setting the multiarch name for soft-float/hard-float ABIs\n+AC_SUBST(with_float)\n+\n # Enable __cxa_atexit for C++.\n AC_ARG_ENABLE(__cxa_atexit,\n [AS_HELP_STRING([--enable-__cxa_atexit], [enable __cxa_atexit for C++])],"}, {"sha": "99c4c8814dfe32f715943c3a9de59d77ff4c9ca5", "filename": "gcc/cppdefault.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fcppdefault.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fcppdefault.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppdefault.c?ref=e0cdc09f6bea34f278f8bb82700676c5f5b1573c", "patch": "@@ -63,6 +63,7 @@ const struct default_include cpp_include_defaults[]\n #endif\n #ifdef LOCAL_INCLUDE_DIR\n     /* /usr/local/include comes before the fixincluded header files.  */\n+    { LOCAL_INCLUDE_DIR, 0, 0, 1, 1, 2 },\n     { LOCAL_INCLUDE_DIR, 0, 0, 1, 1, 0 },\n #endif\n #ifdef PREFIX_INCLUDE_DIR\n@@ -90,6 +91,7 @@ const struct default_include cpp_include_defaults[]\n #endif\n #ifdef NATIVE_SYSTEM_HEADER_DIR\n     /* /usr/include comes dead last.  */\n+    { NATIVE_SYSTEM_HEADER_DIR, NATIVE_SYSTEM_HEADER_COMPONENT, 0, 0, 1, 2 },\n     { NATIVE_SYSTEM_HEADER_DIR, NATIVE_SYSTEM_HEADER_COMPONENT, 0, 0, 1, 0 },\n #endif\n     { 0, 0, 0, 0, 0, 0 }"}, {"sha": "7f58a1be31082c5a08cedefc1d846d40e2920bcb", "filename": "gcc/cppdefault.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fcppdefault.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fcppdefault.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppdefault.h?ref=e0cdc09f6bea34f278f8bb82700676c5f5b1573c", "patch": "@@ -43,9 +43,11 @@ struct default_include\n \t\t\t\t   C++.  */\n   const char add_sysroot;\t/* FNAME should be prefixed by\n \t\t\t\t   cpp_SYSROOT.  */\n-  const char multilib;\t\t/* FNAME should have the multilib path\n-\t\t\t\t   specified with -imultilib\n-\t\t\t\t   appended.  */\n+  const char multilib;\t\t/* FNAME should have appended\n+\t\t\t\t   - the multilib path specified with -imultilib\n+\t\t\t\t     when set to 1,\n+\t\t\t\t   - the multiarch path specified with\n+\t\t\t\t     -imultiarch, when set to 2.  */\n };\n \n extern const struct default_include cpp_include_defaults[];"}, {"sha": "28cef689f157a7db74430be6cedae31775fea211", "filename": "gcc/doc/fragments.texi", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fdoc%2Ffragments.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fdoc%2Ffragments.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ffragments.texi?ref=e0cdc09f6bea34f278f8bb82700676c5f5b1573c", "patch": "@@ -93,6 +93,12 @@ Write one element in @code{MULTILIB_DIRNAMES} for each element in\n default value will be @code{MULTILIB_OPTIONS}, with all slashes treated\n as spaces.\n \n+@code{MULTILIB_DIRNAMES} describes the multilib directories using GCC\n+conventions and is applied to directories that are part of the GCC\n+installation.  When multilib-enabled, the compiler will add a\n+subdirectory of the form @var{prefix}/@var{multilib} before each\n+directory in the search path for libraries and crt files.\n+\n For example, if @code{MULTILIB_OPTIONS} is set to @samp{m68000/m68020\n msoft-float}, then the default value of @code{MULTILIB_DIRNAMES} is\n @samp{m68000 m68020 msoft-float}.  You may specify a different value if\n@@ -152,6 +158,60 @@ compiler.  In that case, set @code{MULTILIB_EXTRA_OPTS} to be the list\n of options to be used for all builds.  If you set this, you should\n probably set @code{CRTSTUFF_T_CFLAGS} to a dash followed by it.\n \n+@findex MULTILIB_OSDIRNAMES\n+@item MULTILIB_OSDIRNAMES\n+If @code{MULTILIB_OPTIONS} is used, this variable specifies \n+a list of subdirectory names, that are used to modify the search\n+path depending on the chosen multilib.  Unlike @code{MULTILIB_DIRNAMES},\n+@code{MULTILIB_OSDIRNAMES} describes the multilib directories using\n+operating systems conventions, and is applied to the directories such as\n+@code{lib} or those in the @env{LIBRARY_PATH} environment variable.\n+The format is either the same as of\n+@code{MULTILIB_DIRNAMES}, or a set of mappings.  When it is the same\n+as @code{MULTILIB_DIRNAMES}, it describes the multilib directories\n+using operating system conventions, rather than GCC conventions.  When it is a set\n+of mappings of the form @var{gccdir}=@var{osdir}, the left side gives\n+the GCC convention and the right gives the equivalent OS defined\n+location.  If the @var{osdir} part begins with a @samp{!},\n+GCC will not search in the non-multilib directory and use\n+exclusively the multilib directory.  Otherwise, the compiler will\n+examine the search path for libraries and crt files twice; the first\n+time it will add @var{multilib} to each directory in the search path,\n+the second it will not.\n+\n+For configurations that support both multilib and multiarch,\n+@code{MULTILIB_OSDIRNAMES} also encodes the multiarch name, thus\n+subsuming @code{MULTIARCH_DIRNAME}.  The multiarch name is appended to\n+each directory name, separated by a colon (e.g.\n+@samp{../lib32:i386-linux-gnu}).\n+\n+Each multiarch subdirectory will be searched before the corresponding OS\n+multilib directory, for example @samp{/lib/i386-linux-gnu} before\n+@samp{/lib/../lib32}.  The multiarch name will also be used to modify the\n+system header search path, as explained for @code{MULTIARCH_DIRNAME}.\n+\n+@findex MULTIARCH_DIRNAME\n+@item MULTIARCH_DIRNAME\n+This variable specifies the multiarch name for configurations that are\n+multiarch-enabled but not multilibbed configurations.\n+\n+The multiarch name is used to augment the search path for libraries, crt\n+files and system header files with additional locations.  The compiler\n+will add a multiarch subdirectory of the form\n+@var{prefix}/@var{multiarch} before each directory in the library and\n+crt search path.  It will also add two directories\n+@code{LOCAL_INCLUDE_DIR}/@var{multiarch} and\n+@code{NATIVE_SYSTEM_HEADER_DIR}/@var{multiarch}) to the system header\n+search path, respectively before @code{LOCAL_INCLUDE_DIR} and\n+@code{NATIVE_SYSTEM_HEADER_DIR}.\n+\n+@code{MULTIARCH_DIRNAME} is not used for configurations that support\n+both multilib and multiarch.  In that case, multiarch names are encoded\n+in @code{MULTILIB_OSDIRNAMES} instead.\n+\n+More documentation about multiarch can be found at\n+@uref{http://wiki.debian.org/Multiarch}.\n+\n @findex SPECS\n @item SPECS\n Unfortunately, setting @code{MULTILIB_EXTRA_OPTS} is not enough, since"}, {"sha": "7396158acea5035da8078f71d3e47891943f399a", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=e0cdc09f6bea34f278f8bb82700676c5f5b1573c", "patch": "@@ -1033,6 +1033,15 @@ libraries to support different target variants, calling\n conventions, etc.@: should not be built.  The default is to build a\n predefined set of them.\n \n+@item --enable-multiarch\n+Specify whether to enable or disable multiarch support.  The default is\n+to check for glibc start files in a multiarch location, and enable it\n+if the files are found.  The auto detection is enabled for native builds,\n+and for cross builds configured with @option{--with-sysroot}, and without\n+@option{--with-native-system-header-dir}.\n+More documentation about multiarch can be found at\n+@uref{http://wiki.debian.org/Multiarch}.\n+\n Some targets provide finer-grained control over which multilibs are built\n (e.g., @option{--disable-softfloat}):\n @table @code"}, {"sha": "e019e3d2cdb659a89857193677281fa0b7d1a582", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e0cdc09f6bea34f278f8bb82700676c5f5b1573c", "patch": "@@ -6336,6 +6336,11 @@ sibling directories this prints e.g.@: @file{../lib64}, @file{../lib} or\n @file{../lib32}, or if OS libraries are present in @file{lib/@var{subdir}}\n subdirectories it prints e.g.@: @file{amd64}, @file{sparcv9} or @file{ev6}.\n \n+@item -print-multiarch\n+@opindex print-multiarch\n+Print the path to OS libraries for the selected multiarch,\n+relative to some @file{lib} subdirectory.\n+\n @item -print-prog-name=@var{program}\n @opindex print-prog-name\n Like @option{-print-file-name}, but searches for a program such as @samp{cpp}."}, {"sha": "e584319369e9597e5b30949be1815221ca2d5bde", "filename": "gcc/gcc.c", "status": "modified", "additions": 70, "deletions": 12, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=e0cdc09f6bea34f278f8bb82700676c5f5b1573c", "patch": "@@ -1163,6 +1163,11 @@ static const char *multilib_dir;\n    set_multilib_dir based on the compilation options.  */\n \n static const char *multilib_os_dir;\n+\n+/* Subdirectory to use for locating libraries in multiarch conventions.  Set by\n+   set_multilib_dir based on the compilation options.  */\n+\n+static const char *multiarch_dir;\n \f\n /* Structure to keep track of the specs that have been defined so far.\n    These are accessed using %(specname) in a compiler or link\n@@ -2094,6 +2099,7 @@ for_each_path (const struct path_prefix *paths,\n   struct prefix_list *pl;\n   const char *multi_dir = NULL;\n   const char *multi_os_dir = NULL;\n+  const char *multiarch_suffix = NULL;\n   const char *multi_suffix;\n   const char *just_multi_suffix;\n   char *path = NULL;\n@@ -2111,11 +2117,14 @@ for_each_path (const struct path_prefix *paths,\n     }\n   if (do_multi && multilib_os_dir && strcmp (multilib_os_dir, \".\") != 0)\n     multi_os_dir = concat (multilib_os_dir, dir_separator_str, NULL);\n+  if (multiarch_dir)\n+    multiarch_suffix = concat (multiarch_dir, dir_separator_str, NULL);\n \n   while (1)\n     {\n       size_t multi_dir_len = 0;\n       size_t multi_os_dir_len = 0;\n+      size_t multiarch_len = 0;\n       size_t suffix_len;\n       size_t just_suffix_len;\n       size_t len;\n@@ -2124,16 +2133,15 @@ for_each_path (const struct path_prefix *paths,\n \tmulti_dir_len = strlen (multi_dir);\n       if (multi_os_dir)\n \tmulti_os_dir_len = strlen (multi_os_dir);\n+      if (multiarch_suffix)\n+\tmultiarch_len = strlen (multiarch_suffix);\n       suffix_len = strlen (multi_suffix);\n       just_suffix_len = strlen (just_multi_suffix);\n \n       if (path == NULL)\n \t{\n \t  len = paths->max_len + extra_space + 1;\n-\t  if (suffix_len > multi_os_dir_len)\n-\t    len += suffix_len;\n-\t  else\n-\t    len += multi_os_dir_len;\n+\t  len += MAX (MAX (suffix_len, multi_os_dir_len), multiarch_len);\n \t  path = XNEWVEC (char, len);\n \t}\n \n@@ -2162,6 +2170,16 @@ for_each_path (const struct path_prefix *paths,\n \t\tbreak;\n \t    }\n \n+\t  /* Now try the multiarch path.  */\n+\t  if (!skip_multi_dir\n+\t      && !pl->require_machine_suffix && multiarch_dir)\n+\t    {\n+\t      memcpy (path + len, multiarch_suffix, multiarch_len + 1);\n+\t      ret = callback (path, callback_info);\n+\t      if (ret)\n+\t\tbreak;\n+\t    }\n+\n \t  /* Now try the base path.  */\n \t  if (!pl->require_machine_suffix\n \t      && !(pl->os_multilib ? skip_multi_os_dir : skip_multi_dir))\n@@ -2990,6 +3008,9 @@ display_help (void)\n   fputs (_(\"  -print-libgcc-file-name  Display the name of the compiler's companion library\\n\"), stdout);\n   fputs (_(\"  -print-file-name=<lib>   Display the full path to library <lib>\\n\"), stdout);\n   fputs (_(\"  -print-prog-name=<prog>  Display the full path to compiler component <prog>\\n\"), stdout);\n+  fputs (_(\"\\\n+  -print-multiarch         Display the target's normalized GNU triplet, used as\\n\\\n+                           a component in the library path\\n\"), stdout);\n   fputs (_(\"  -print-multi-directory   Display the root directory for versions of libgcc\\n\"), stdout);\n   fputs (_(\"\\\n   -print-multi-lib         Display the mapping between command line options and\\n\\\n@@ -3274,6 +3295,7 @@ driver_handle_option (struct gcc_options *opts,\n     case OPT_print_multi_directory:\n     case OPT_print_sysroot:\n     case OPT_print_multi_os_directory:\n+    case OPT_print_multiarch:\n     case OPT_print_sysroot_headers_suffix:\n     case OPT_time:\n     case OPT_wrapper:\n@@ -4924,6 +4946,15 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t\t  do_spec_1 (\" \", 0, NULL);\n \t\t}\n \n+\t      if (multiarch_dir)\n+\t\t{\n+\t\t  do_spec_1 (\"-imultiarch\", 1, NULL);\n+\t\t  /* Make this a separate argument.  */\n+\t\t  do_spec_1 (\" \", 0, NULL);\n+\t\t  do_spec_1 (multiarch_dir, 1, NULL);\n+\t\t  do_spec_1 (\" \", 0, NULL);\n+\t\t}\n+\n \t      if (gcc_exec_prefix)\n \t\t{\n \t\t  do_spec_1 (\"-iprefix\", 1, NULL);\n@@ -6593,6 +6624,15 @@ main (int argc, char **argv)\n       return (0);\n     }\n \n+  if (print_multiarch)\n+    {\n+      if (multiarch_dir == NULL)\n+\tprintf (\"\\n\");\n+      else\n+\tprintf (\"%s\\n\", multiarch_dir);\n+      return (0);\n+    }\n+\n   if (print_sysroot)\n     {\n       if (target_system_root)\n@@ -7364,7 +7404,9 @@ default_arg (const char *p, int len)\n    options are present, then we will ignore this completely. Passing\n    that, gcc will consider each multilib_select in turn using the same\n    rules for matching the options. If a match is found, that subdirectory\n-   will be used.  */\n+   will be used.\n+   A subdirectory name is optionally followed by a colon and the corresponding\n+   multiarch name.  */\n \n static void\n set_multilib_dir (void)\n@@ -7576,10 +7618,25 @@ set_multilib_dir (void)\n \t    q++;\n \t  if (q < end)\n \t    {\n-\t      char *new_multilib_os_dir = XNEWVEC (char, end - q);\n-\t      memcpy (new_multilib_os_dir, q + 1, end - q - 1);\n-\t      new_multilib_os_dir[end - q - 1] = '\\0';\n-\t      multilib_os_dir = new_multilib_os_dir;\n+\t      const char *q2 = q + 1, *ml_end = end;\n+\t      char *new_multilib_os_dir;\n+\n+\t      while (q2 < end && *q2 != ':')\n+\t\tq2++;\n+\t      if (*q2 == ':')\n+\t\tml_end = q2;\n+\t      new_multilib_os_dir = XNEWVEC (char, ml_end - q);\n+\t      memcpy (new_multilib_os_dir, q + 1, ml_end - q - 1);\n+\t      new_multilib_os_dir[ml_end - q - 1] = '\\0';\n+\t      multilib_os_dir = *new_multilib_os_dir ? new_multilib_os_dir : \".\";\n+\n+\t      if (q2 < end && *q2 == ':')\n+\t\t{\n+\t\t  char *new_multiarch_dir = XNEWVEC (char, end - q2);\n+\t\t  memcpy (new_multiarch_dir, q2 + 1, end - q2 - 1);\n+\t\t  new_multiarch_dir[end - q2 - 1] = '\\0';\n+\t\t  multiarch_dir = new_multiarch_dir;\n+\t\t}\n \t      break;\n \t    }\n \t}\n@@ -7639,9 +7696,10 @@ print_multilib_info (void)\n \t}\n \n       /* When --disable-multilib was used but target defines\n-\t MULTILIB_OSDIRNAMES, entries starting with .: are there just\n-\t to find multilib_os_dir, so skip them from output.  */\n-      if (this_path[0] == '.' && this_path[1] == ':')\n+\t MULTILIB_OSDIRNAMES, entries starting with .: (and not starting\n+         with .:: for multiarch configurations) are there just to find\n+         multilib_os_dir, so skip them from output.  */\n+      if (this_path[0] == '.' && this_path[1] == ':' && this_path[2] != ':')\n \tskip = 1;\n \n       /* Check for matches with the multilib_exclusions. We don't bother"}, {"sha": "09b63465b26a6e35d7e91f256137085958ed62c5", "filename": "gcc/genmultilib", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fgenmultilib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fgenmultilib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmultilib?ref=e0cdc09f6bea34f278f8bb82700676c5f5b1573c", "patch": "@@ -84,6 +84,8 @@\n # This argument can be used together with MULTILIB_EXCEPTIONS and will take\n # effect after the MULTILIB_EXCEPTIONS.\n \n+# The optional ninth argument is the multiarch name.\n+\n # The last option should be \"yes\" if multilibs are enabled.  If it is not\n # \"yes\", all GCC multilib dir names will be \".\".\n \n@@ -133,7 +135,8 @@ extra=$5\n exclusions=$6\n osdirnames=$7\n multilib_required=$8\n-enable_multilib=$9\n+multiarch=$9\n+enable_multilib=${10}\n \n echo \"static const char *const multilib_raw[] = {\"\n \n@@ -261,13 +264,19 @@ fi\n # names.\n toosdirnames=\n defaultosdirname=\n+if [ -n \"${multiarch}\" ]; then\n+  defaultosdirname=::${multiarch}\n+fi\n if [ -n \"${osdirnames}\" ]; then\n   set x ${osdirnames}\n   shift\n   while [ $# != 0 ] ; do\n     case \"$1\" in\n       .=*)\n         defaultosdirname=`echo $1 | sed 's|^.=|:|'`\n+\tif [ -n \"${multiarch}\" ]; then\n+\t  defaultosdirname=${defaultosdirname}:${multiarch}\n+\tfi\n \tshift\n \t;;\n       *=*)\n@@ -353,13 +362,13 @@ for combo in ${combinations}; do\n     dirout=`echo ${combo} | sed -e 's/=/-/g'`\n   fi\n   # Remove the leading and trailing slashes.\n-  dirout=`echo ${dirout} | sed -e 's|^/||' -e 's|/$||g'`\n+  dirout=`echo ${dirout} | sed -e 's|^/||' -e 's|/*:/*|:|' -e 's|/$||g'`\n \n   # Use the OS directory names rather than the option names.\n   if [ -n \"${toosdirnames}\" ]; then\n     osdirout=`echo ${combo} | sed ${toosdirnames}`\n     # Remove the leading and trailing slashes.\n-    osdirout=`echo ${osdirout} | sed -e 's|^/||' -e 's|/$||g'`\n+    osdirout=`echo ${osdirout} | sed -e 's|^/||' -e 's|/*:/*|:|' -e 's|/$||g'`\n     if [ \"x${enable_multilib}\" != xyes ]; then\n       dirout=\".:${osdirout}\"\n       disable_multilib=yes"}, {"sha": "efcd2c75e573e305b8bf088b8ec39cad6bcf919c", "filename": "gcc/incpath.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fincpath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0cdc09f6bea34f278f8bb82700676c5f5b1573c/gcc%2Fincpath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fincpath.c?ref=e0cdc09f6bea34f278f8bb82700676c5f5b1573c", "patch": "@@ -150,8 +150,14 @@ add_standard_paths (const char *sysroot, const char *iprefix,\n \t      if (!filename_ncmp (p->fname, cpp_GCC_INCLUDE_DIR, len))\n \t\t{\n \t\t  char *str = concat (iprefix, p->fname + len, NULL);\n-\t\t  if (p->multilib && imultilib)\n+\t\t  if (p->multilib == 1 && imultilib)\n \t\t    str = concat (str, dir_separator_str, imultilib, NULL);\n+\t\t  else if (p->multilib == 2)\n+\t\t    {\n+\t\t      if (!imultiarch)\n+\t\t\tcontinue;\n+\t\t      str = concat (str, dir_separator_str, imultiarch, NULL);\n+\t\t    }\n \t\t  add_path (str, SYSTEM, p->cxx_aware, false);\n \t\t}\n \t    }\n@@ -203,8 +209,14 @@ add_standard_paths (const char *sysroot, const char *iprefix,\n \t  else\n \t    str = update_path (p->fname, p->component);\n \n-\t  if (p->multilib && imultilib)\n+\t  if (p->multilib == 1 && imultilib)\n \t    str = concat (str, dir_separator_str, imultilib, NULL);\n+\t  else if (p->multilib == 2)\n+\t    {\n+\t      if (!imultiarch)\n+\t\tcontinue;\n+\t      str = concat (str, dir_separator_str, imultiarch, NULL);\n+\t    }\n \n \t  add_path (str, SYSTEM, p->cxx_aware, false);\n \t}"}]}