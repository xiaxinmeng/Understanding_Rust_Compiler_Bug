{"sha": "87fc34a461cf362947a430d8a241f653fd83bc7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdmYzM0YTQ2MWNmMzYyOTQ3YTQzMGQ4YTI0MWY2NTNmZDgzYmM3Yg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-23T12:47:02Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-23T12:47:02Z"}, "message": "c++: Fix pretty printing pointer to function type [PR98767]\n\nWhen pretty printing a pointer to function type,\npp_cxx_parameter_declaration_clause ends up always outputting an empty\nfunction parameter list because the loop that outputs the list iterates\nover 'args' instead of 'types', and 'args' is empty when a FUNCTION_TYPE\nis passed to this routine (as opposed to a FUNCTION_DECL).\n\nThis patch fixes this by making the loop iterate over 'types' instead.\nThis patch also moves the retrofitted chain-of-PARM_DECLs printing from\nhere to pp_cxx_requires_expr, the only caller that uses it.  Doing so\nlets us easily output the trailing '...' in the parameter list of a\nvariadic function, which this patch also implements.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/98767\n\t* cxx-pretty-print.c (pp_cxx_parameter_declaration_clause):\n\tAdjust parameter list loop to iterate over 'types' instead of\n\t'args'.  Output the trailing '...' for a variadic function.\n\tRemove PARM_DECL support.\n\t(pp_cxx_requires_expr): Pretty print the parameter list directly\n\tinstead of going through pp_cxx_parameter_declaration_clause.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/98767\n\t* g++.dg/concepts/diagnostic17.C: New test.", "tree": {"sha": "14ddc556452e0d0c2345ecda011b16cd71b70cc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14ddc556452e0d0c2345ecda011b16cd71b70cc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87fc34a461cf362947a430d8a241f653fd83bc7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87fc34a461cf362947a430d8a241f653fd83bc7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87fc34a461cf362947a430d8a241f653fd83bc7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87fc34a461cf362947a430d8a241f653fd83bc7b/comments", "author": null, "committer": null, "parents": [{"sha": "5f8aed72e76970d2c6fa06fb23fdaa47660555b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f8aed72e76970d2c6fa06fb23fdaa47660555b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f8aed72e76970d2c6fa06fb23fdaa47660555b0"}], "stats": {"total": 64, "additions": 45, "deletions": 19}, "files": [{"sha": "3709d0f2b2d3f81d50fab22b12be8cef69beec90", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fc34a461cf362947a430d8a241f653fd83bc7b/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fc34a461cf362947a430d8a241f653fd83bc7b/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=87fc34a461cf362947a430d8a241f653fd83bc7b", "patch": "@@ -1537,38 +1537,36 @@ pp_cxx_parameter_declaration (cxx_pretty_printer *pp, tree t)\n static void\n pp_cxx_parameter_declaration_clause (cxx_pretty_printer *pp, tree t)\n {\n-  tree args;\n-  tree types;\n-  bool abstract;\n-\n-  // For a requires clause or the explicit printing of a parameter list\n-  // we expect T to be a chain of PARM_DECLs. Otherwise, the list of\n-  // args and types are taken from the function decl T.\n-  if (TREE_CODE (t) == PARM_DECL)\n+  gcc_assert (FUNC_OR_METHOD_TYPE_P (t) || TREE_CODE (t) == FUNCTION_DECL);\n+  tree types, args;\n+  if (TYPE_P (t))\n     {\n-      args = t;\n-      types = t;\n-      abstract = false;\n+      types = TYPE_ARG_TYPES (t);\n+      args = NULL_TREE;\n     }\n   else\n     {\n-      bool type_p = TYPE_P (t);\n-      args = type_p ? NULL : FUNCTION_FIRST_USER_PARM (t);\n-      types = type_p ? TYPE_ARG_TYPES (t) : FUNCTION_FIRST_USER_PARMTYPE (t);\n-      abstract = args == NULL || pp->flags & pp_c_flag_abstract;\n+      types = FUNCTION_FIRST_USER_PARMTYPE (t);\n+      args = FUNCTION_FIRST_USER_PARM (t);\n     }\n-  bool first = true;\n+  bool abstract = !args || (pp->flags & pp_c_flag_abstract);\n \n   /* Skip artificial parameter for non-static member functions.  */\n   if (TREE_CODE (t) == METHOD_TYPE)\n     types = TREE_CHAIN (types);\n \n+  bool first = true;\n   pp_cxx_left_paren (pp);\n-  for (; args; args = TREE_CHAIN (args), types = TREE_CHAIN (types))\n+  for (; types != void_list_node; types = TREE_CHAIN (types))\n     {\n       if (!first)\n \tpp_cxx_separate_with (pp, ',');\n       first = false;\n+      if (!types)\n+\t{\n+\t  pp_cxx_ws_string (pp, \"...\");\n+\t  break;\n+\t}\n       pp_cxx_parameter_declaration (pp, abstract ? TREE_VALUE (types) : args);\n       if (!abstract && pp->flags & pp_cxx_flag_default_argument)\n \t{\n@@ -1577,6 +1575,8 @@ pp_cxx_parameter_declaration_clause (cxx_pretty_printer *pp, tree t)\n \t  pp_cxx_whitespace (pp);\n \t  pp->assignment_expression (TREE_PURPOSE (types));\n \t}\n+      if (!abstract)\n+\targs = TREE_CHAIN (args);\n     }\n   pp_cxx_right_paren (pp);\n }\n@@ -2775,9 +2775,18 @@ void\n pp_cxx_requires_expr (cxx_pretty_printer *pp, tree t)\n {\n   pp_string (pp, \"requires\");\n-  if (tree parms = TREE_OPERAND (t, 0))\n+  if (tree parms = REQUIRES_EXPR_PARMS (t))\n     {\n-      pp_cxx_parameter_declaration_clause (pp, parms);\n+      bool first = true;\n+      pp_cxx_left_paren (pp);\n+      for (; parms; parms = TREE_CHAIN (parms))\n+\t{\n+\t  if (!first)\n+\t    pp_cxx_separate_with (pp, ',' );\n+\t  first = false;\n+\t  pp_cxx_parameter_declaration (pp, parms);\n+\t}\n+      pp_cxx_right_paren (pp);\n       pp_cxx_whitespace (pp);\n     }\n   pp_cxx_requirement_body (pp, TREE_OPERAND (t, 1));"}, {"sha": "49d5733faea39ae30073d1ce3de3bce7d20f98ba", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic17.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87fc34a461cf362947a430d8a241f653fd83bc7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87fc34a461cf362947a430d8a241f653fd83bc7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic17.C?ref=87fc34a461cf362947a430d8a241f653fd83bc7b", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/98767\n+// { dg-do compile { target c++20 } }\n+\n+template <typename Function, typename... Args>\n+concept Callable = requires(Function func, Args... args) { func(args...); };\n+\n+static_assert(Callable<int(*)(), bool>); // { dg-error \"failed\" }\n+// { dg-message {Function = int \\(\\*\\)\\(\\)} \"\" { target *-*-* } 5 }\n+\n+static_assert(Callable<char(*)(int*), bool>); // { dg-error \"failed\" }\n+// { dg-message {Function = char \\(\\*\\)\\(int\\*\\)} \"\" { target *-*-* } 5 }\n+\n+static_assert(Callable<short(*)(int*, int), bool>); // { dg-error \"failed\" }\n+// { dg-message {Function = short int \\(\\*\\)\\(int\\*, int\\)} \"\" { target *-*-* } 5 }\n+\n+static_assert(Callable<long(*)(int*, int, ...), bool>); // { dg-error \"failed\" }\n+// { dg-message {Function = long int \\(\\*\\)\\(int\\*, int, \\.\\.\\.\\)} \"\" { target *-*-* } 5 }"}]}