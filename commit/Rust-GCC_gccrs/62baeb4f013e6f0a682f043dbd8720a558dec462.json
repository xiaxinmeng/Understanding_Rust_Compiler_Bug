{"sha": "62baeb4f013e6f0a682f043dbd8720a558dec462", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJiYWViNGYwMTNlNmYwYTY4MmYwNDNkYmQ4NzIwYTU1OGRlYzQ2Mg==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2006-10-28T01:00:21Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2006-10-28T01:00:21Z"}, "message": "darwin.c: Fix formatting and grammar.\n\n2006-10-27  Eric Christopher  <echristo@apple.com>\n\n\t    * config/darwin.c: Fix formatting and grammar.\n\nFrom-SVN: r118099", "tree": {"sha": "540dee9cc8034abc8b84fd2c2e5cf0034f91441e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/540dee9cc8034abc8b84fd2c2e5cf0034f91441e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62baeb4f013e6f0a682f043dbd8720a558dec462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62baeb4f013e6f0a682f043dbd8720a558dec462", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62baeb4f013e6f0a682f043dbd8720a558dec462", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62baeb4f013e6f0a682f043dbd8720a558dec462/comments", "author": null, "committer": null, "parents": [{"sha": "922764658ec609feccae60a43b2ddac84355e745", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/922764658ec609feccae60a43b2ddac84355e745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/922764658ec609feccae60a43b2ddac84355e745"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "855dccbbcf3f5fd97162ead600e0cba1b718e865", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62baeb4f013e6f0a682f043dbd8720a558dec462/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62baeb4f013e6f0a682f043dbd8720a558dec462/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62baeb4f013e6f0a682f043dbd8720a558dec462", "patch": "@@ -1,3 +1,7 @@\n+2006-10-27  Eric Christopher  <echristo@apple.com>\n+\n+\t* config/darwin.c: Fix formatting and grammar.\n+\n 2006-10-27  Jan Hubicka  <jh@suse.cz>\n \n \t* builtins.c (fold_builtin): Don't generate NOP_EXPR that is going\n@@ -38,7 +42,7 @@\n \t* config/i386/geode.md: New file.\n \n \t* doc/invoke.texi: Add entry about geode processor.\n-    \n+\n 2006-10-27  Mike Stump  <mrs@apple.com>\n \n \t* config/darwin-c.c (darwin_cpp_builtins): Move __STATIC__ and\n@@ -653,13 +657,13 @@\n \t(init_alias_heapvars): Initialize nonlocal_for_type and\n \tnonlocal_all.\n \t(delete_alias_heapvars): Free nonlocal_for_type and null out\n-\tnonlocal_all. \n+\tnonlocal_all.\n \n 2006-10-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* fold-const.c (add_double): Rename to add_double_with_sign.\n \tAdd 'unsigned_p' parameter and take it into account for the overflow.\n-\t(mul_double): Rename to mul_double_with_sign. \n+\t(mul_double): Rename to mul_double_with_sign.\n \tAdd 'unsigned_p' parameter and take it into account for the overflow.\n \t(fold_div_compare): Call add_double_with_sign instead of add_double\n \tand mul_double_with_sign instead of mul_double, passing them the\n@@ -716,17 +720,17 @@\n 2006-10-17  Wolfgang Gellerich  <gellerich@de.ibm.com>\n \n \t* config/s390/contraints.md: New file.\n-        * config/s390/s390-protos.h (s390_mem_constraint, \n-\ts390_O_constraint_str, s390_N_constraint_str, \n+        * config/s390/s390-protos.h (s390_mem_constraint,\n+\ts390_O_constraint_str, s390_N_constraint_str,\n \ts390_float_const_zero_p): Function prototypes added.\n-\t* config/s390/s390.c (s390_extra_constraint_str, \n-\ts390_const_double_ok_for_constraint_p, \n+\t* config/s390/s390.c (s390_extra_constraint_str,\n+\ts390_const_double_ok_for_constraint_p,\n \ts390_const_ok_for_constraint_p): Functions removed.\n         (s390_mem_constraint, s390_O_constraint_str, s390_N_constraint_str,\n \ts390_float_const_zero_p): New functions.\n \t* config/s390/s390.h (REG_CLASS_FROM_LETTER, CONST_OK_FOR_CONSTRAINT_P,\n-\tCONST_DOUBLE_OK_FOR_CONSTRAINT_P, EXTRA_CONSTRAINT_STR, \n-\tEXTRA_MEMORY_CONSTRAINT, EXTRA_ADDRESS_CONSTRAINT, CONSTRAINT_LEN): \n+\tCONST_DOUBLE_OK_FOR_CONSTRAINT_P, EXTRA_CONSTRAINT_STR,\n+\tEXTRA_MEMORY_CONSTRAINT, EXTRA_ADDRESS_CONSTRAINT, CONSTRAINT_LEN):\n \tMacro definitions removed.\n \t(s390_const_ok_for_constraint_p, s390_const_double_ok_for_constraint_p,\n \ts390_extra_constraint_str): Functions removed."}, {"sha": "dfd84ef5191e00641ce99685e7cebc1332310b93", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62baeb4f013e6f0a682f043dbd8720a558dec462/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62baeb4f013e6f0a682f043dbd8720a558dec462/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=62baeb4f013e6f0a682f043dbd8720a558dec462", "patch": "@@ -220,7 +220,8 @@ indirect_data (rtx sym_ref)\n   int lprefix;\n   const char *name;\n \n-  /* If we aren't generating fix-and-continue code, don't do anything special.  */\n+  /* If we aren't generating fix-and-continue code, don't do anything\n+     special.  */\n   if (TARGET_FIX_AND_CONTINUE == 0)\n     return 0;\n \n@@ -712,7 +713,8 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t\t\t\t   gen_rtx_LO_SUM (Pmode, temp_reg, asym));\n \t      emit_insn (gen_rtx_SET (VOIDmode, reg, mem));\n #else\n-\t      /* Some other CPU -- WriteMe! but right now there are no other platform that can use dynamic-no-pic  */\n+\t      /* Some other CPU -- WriteMe! but right now there are no other\n+\t\t platforms that can use dynamic-no-pic  */\n \t      gcc_unreachable ();\n #endif\n \t      pic_ref = reg;\n@@ -1110,12 +1112,15 @@ machopic_select_section (tree exp, int reloc,\n \t\t\t? darwin_sections[text_unlikely_coal_section]\n \t\t\t: unlikely_text_section ());\n       else\n-\tbase_section = weak_p ? darwin_sections[text_coal_section] : text_section;\n+\tbase_section = weak_p ? darwin_sections[text_coal_section]\n+\t  : text_section;\n     }\n   else if (decl_readonly_section_1 (exp, reloc, MACHOPIC_INDIRECT))\n-    base_section = weak_p ? darwin_sections[const_coal_section] : darwin_sections[const_section];\n+    base_section = weak_p ? darwin_sections[const_coal_section]\n+      : darwin_sections[const_section];\n   else if (TREE_READONLY (exp) || TREE_CONSTANT (exp))\n-    base_section = weak_p ? darwin_sections[const_data_coal_section] : darwin_sections[const_data_section];\n+    base_section = weak_p ? darwin_sections[const_data_coal_section]\n+      : darwin_sections[const_data_section];\n   else\n     base_section = weak_p ? darwin_sections[data_coal_section] : data_section;\n "}]}