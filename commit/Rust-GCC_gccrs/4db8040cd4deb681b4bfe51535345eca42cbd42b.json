{"sha": "4db8040cd4deb681b4bfe51535345eca42cbd42b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRiODA0MGNkNGRlYjY4MWI0YmZlNTE1MzUzNDVlY2E0MmNiZDQyYg==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-07-20T20:26:11Z"}, "committer": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-07-20T20:26:11Z"}, "message": "tree.h (tree_expr_nonzero_p): Export.\n\n2005-07-20  James A. Morrison  <phython@gcc.gnu.org>\n\n        * tree.h (tree_expr_nonzero_p): Export.\n        * fold-const.c (tree_expr_nonzero_p): Likewise.\n        Return true for CALL_EXPRs that are alloca calls.\n        (fold_binary): Use omit_one_operand when checking EQ_EXPRs or NE_EXPRs\n        against zero.\n        * tree-flow.h (expr_computes_nonzero): Remove.\n        * tree-vrp.c (expr_computes_nonzero): Remove.\n        (vrp_expr_computes_nonzero): Use tree_expr_nonzero_p.\n        (extract_range_from_unary_expr): Likewise.\n        * tree-ssa-dom.c (record_equivalences_from_stmt): Use\n        tree_expr_nonzero_p.\n\nFrom-SVN: r102201", "tree": {"sha": "7f921cc272661cbe1016b176fa359221ff219a4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f921cc272661cbe1016b176fa359221ff219a4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4db8040cd4deb681b4bfe51535345eca42cbd42b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4db8040cd4deb681b4bfe51535345eca42cbd42b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4db8040cd4deb681b4bfe51535345eca42cbd42b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4db8040cd4deb681b4bfe51535345eca42cbd42b/comments", "author": null, "committer": null, "parents": [{"sha": "09350e36ee3973f286340455d1e8c01506699f73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09350e36ee3973f286340455d1e8c01506699f73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09350e36ee3973f286340455d1e8c01506699f73"}], "stats": {"total": 85, "additions": 46, "deletions": 39}, "files": [{"sha": "ba47d056cbf81ae2c3d997b57189b93bb6d8540b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db8040cd4deb681b4bfe51535345eca42cbd42b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db8040cd4deb681b4bfe51535345eca42cbd42b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4db8040cd4deb681b4bfe51535345eca42cbd42b", "patch": "@@ -1,3 +1,17 @@\n+2005-07-20  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\t* tree.h (tree_expr_nonzero_p): Export.\n+\t* fold-const.c (tree_expr_nonzero_p): Likewise.\n+\tReturn true for CALL_EXPRs that are alloca calls.\n+\t(fold_binary): Use omit_one_operand when checking EQ_EXPRs or NE_EXPRs\n+\tagainst zero.\n+\t* tree-flow.h (expr_computes_nonzero): Remove.\n+\t* tree-vrp.c (expr_computes_nonzero): Remove.\n+ \t(vrp_expr_computes_nonzero): Use tree_expr_nonzero_p.\n+\t(extract_range_from_unary_expr): Likewise.\n+\t* tree-ssa-dom.c (record_equivalences_from_stmt): Use\n+\ttree_expr_nonzero_p.\n+\n 2005-07-20  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* config/bfin/bfin-protos.h (legitimize_pic_address): Don't declare."}, {"sha": "7b83eb3ef5f835351f25fabc7b542147cb9c81f3", "filename": "gcc/fold-const.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db8040cd4deb681b4bfe51535345eca42cbd42b/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db8040cd4deb681b4bfe51535345eca42cbd42b/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=4db8040cd4deb681b4bfe51535345eca42cbd42b", "patch": "@@ -132,7 +132,6 @@ static bool reorder_operands_p (tree, tree);\n static tree fold_negate_const (tree, tree);\n static tree fold_not_const (tree, tree);\n static tree fold_relational_const (enum tree_code, tree, tree, tree);\n-static bool tree_expr_nonzero_p (tree);\n \n /* We know that A1 + B1 = SUM1, using 2's complement arithmetic and ignoring\n    overflow.  Suppose A, B and SUM have the same respective signs as A1, B1,\n@@ -9694,10 +9693,12 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t}\n \n       if ((code == EQ_EXPR || code == NE_EXPR)\n-\t  && !TREE_SIDE_EFFECTS (arg0)\n \t  && integer_zerop (arg1)\n \t  && tree_expr_nonzero_p (arg0))\n-\treturn constant_boolean_node (code==NE_EXPR, type);\n+        {\n+\t  tree res = constant_boolean_node (code==NE_EXPR, type);\n+\t  return omit_one_operand (type, res, arg0);\n+\t}\n \n       t1 = fold_relational_const (code, type, arg0, arg1);\n       return t1 == NULL_TREE ? NULL_TREE : t1;\n@@ -10797,7 +10798,7 @@ tree_expr_nonnegative_p (tree t)\n    For floating point we further ensure that T is not denormal.\n    Similar logic is present in nonzero_address in rtlanal.h.  */\n \n-static bool\n+bool\n tree_expr_nonzero_p (tree t)\n {\n   tree type = TREE_TYPE (t);\n@@ -10904,6 +10905,9 @@ tree_expr_nonzero_p (tree t)\n       return tree_expr_nonzero_p (TREE_OPERAND (t, 1))\n \t     || tree_expr_nonzero_p (TREE_OPERAND (t, 0));\n \n+    case CALL_EXPR:\n+      return alloca_call_p (t);\n+\n     default:\n       break;\n     }"}, {"sha": "acbc2d6bc0a07b5defbc125d720449877bb288f8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db8040cd4deb681b4bfe51535345eca42cbd42b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db8040cd4deb681b4bfe51535345eca42cbd42b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4db8040cd4deb681b4bfe51535345eca42cbd42b", "patch": "@@ -1,3 +1,7 @@\n+2005-07-20  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\t* gcc.dg/fold-alloc-1.c: New test.\n+\n 2005-07-20  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* gcc.dg/20020312-2.c, gcc.dg/sibcall-3.c, gcc.dg/sibcall-4.c,"}, {"sha": "735a22f3a7e48150353f6416523f449b38a68208", "filename": "gcc/testsuite/gcc.dg/fold-alloca-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db8040cd4deb681b4bfe51535345eca42cbd42b/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-alloca-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db8040cd4deb681b4bfe51535345eca42cbd42b/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-alloca-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-alloca-1.c?ref=4db8040cd4deb681b4bfe51535345eca42cbd42b", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-useless\" } */\n+\n+void *alloca (__SIZE_TYPE__);\n+void link_error ();\n+\n+int main (int argc, char *argv[]) {\n+\tchar *foo;\n+\tif ((foo = alloca(argc)) == 0)\n+\t  link_error ();\n+\treturn 0;\n+}\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"useless\" } } */\n+/* { dg-final { cleanup-tree-dump \"useless\" } } */"}, {"sha": "16bcb803c3eacfbd6ed1661090f36aa9c4928c77", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db8040cd4deb681b4bfe51535345eca42cbd42b/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db8040cd4deb681b4bfe51535345eca42cbd42b/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=4db8040cd4deb681b4bfe51535345eca42cbd42b", "patch": "@@ -659,7 +659,6 @@ bool fold_stmt_inplace (tree);\n tree widen_bitfield (tree, tree, tree);\n \n /* In tree-vrp.c  */\n-bool expr_computes_nonzero (tree);\n tree vrp_evaluate_conditional (tree, bool);\n void simplify_stmt_using_ranges (tree);\n "}, {"sha": "7b79c79caa3758aa5336ac1ef97ad7ee17c13cc6", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db8040cd4deb681b4bfe51535345eca42cbd42b/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db8040cd4deb681b4bfe51535345eca42cbd42b/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=4db8040cd4deb681b4bfe51535345eca42cbd42b", "patch": "@@ -2633,7 +2633,7 @@ record_equivalences_from_stmt (tree stmt,\n \t      || is_gimple_min_invariant (rhs)))\n \tSSA_NAME_VALUE (lhs) = rhs;\n \n-      if (expr_computes_nonzero (rhs))\n+      if (tree_expr_nonzero_p (rhs))\n \trecord_var_is_nonzero (lhs);\n     }\n "}, {"sha": "e7d877d7d58f31d4359cabc2f6e06f238e20abcb", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 3, "deletions": 33, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db8040cd4deb681b4bfe51535345eca42cbd42b/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db8040cd4deb681b4bfe51535345eca42cbd42b/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=4db8040cd4deb681b4bfe51535345eca42cbd42b", "patch": "@@ -95,36 +95,6 @@ static sbitmap blocks_visited;\n static value_range_t **vr_value;\n \n \n-/* Return true if EXPR computes a non-zero value.  */\n-\n-bool\n-expr_computes_nonzero (tree expr)\n-{\n-  /* Type casts won't change anything, so just strip them.  */\n-  STRIP_NOPS (expr);\n-\n-  /* Calling alloca, guarantees that the value is non-NULL.  */\n-  if (alloca_call_p (expr))\n-    return true;\n-\n-  /* The address of a non-weak symbol is never NULL, unless the user\n-     has requested not to remove NULL pointer checks.  */\n-  if (flag_delete_null_pointer_checks\n-      && TREE_CODE (expr) == ADDR_EXPR\n-      && VAR_OR_FUNCTION_DECL_P (TREE_OPERAND (expr, 0))\n-      && !DECL_WEAK (TREE_OPERAND (expr, 0)))\n-    return true;\n-\n-  /* IOR of any value with a nonzero value will result in a nonzero\n-     value.  */\n-  if (TREE_CODE (expr) == BIT_IOR_EXPR\n-      && integer_nonzerop (TREE_OPERAND (expr, 1)))\n-    return true;\n-\n-  return false;\n-}\n-\n-\n /* Return true if ARG is marked with the nonnull attribute in the\n    current function signature.  */\n \n@@ -393,13 +363,13 @@ symbolic_range_p (value_range_t *vr)\n }\n \n \n-/* Like expr_computes_nonzero, but this function uses value ranges\n+/* Like tree_expr_nonzero_p, but this function uses value ranges\n    obtained so far.  */\n \n static bool\n vrp_expr_computes_nonzero (tree expr)\n {\n-  if (expr_computes_nonzero (expr))\n+  if (tree_expr_nonzero_p (expr))\n     return true;\n \n   /* If we have an expression of the form &X->a, then the expression\n@@ -1319,7 +1289,7 @@ extract_range_from_unary_expr (value_range_t *vr, tree expr)\n      determining if it evaluates to NULL [0, 0] or non-NULL (~[0, 0]).  */\n   if (POINTER_TYPE_P (TREE_TYPE (expr)) || POINTER_TYPE_P (TREE_TYPE (op0)))\n     {\n-      if (range_is_nonnull (&vr0) || expr_computes_nonzero (expr))\n+      if (range_is_nonnull (&vr0) || tree_expr_nonzero_p (expr))\n \tset_value_range_to_nonnull (vr, TREE_TYPE (expr));\n       else if (range_is_null (&vr0))\n \tset_value_range_to_null (vr, TREE_TYPE (expr));"}, {"sha": "10472fe839b51aeef9ca81a5c0abb3f3646d6a0e", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4db8040cd4deb681b4bfe51535345eca42cbd42b/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4db8040cd4deb681b4bfe51535345eca42cbd42b/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=4db8040cd4deb681b4bfe51535345eca42cbd42b", "patch": "@@ -3851,6 +3851,8 @@ extern enum tree_code swap_tree_comparison (enum tree_code);\n extern bool ptr_difference_const (tree, tree, HOST_WIDE_INT *);\n extern enum tree_code invert_tree_comparison (enum tree_code, bool);\n \n+extern bool tree_expr_nonzero_p (tree);\n+\n /* In builtins.c */\n extern tree fold_builtin (tree, tree, bool);\n extern tree fold_builtin_fputs (tree, bool, bool, tree);"}]}