{"sha": "1860430ab5868a9c0baa626e0bccc16a49f3c80e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg2MDQzMGFiNTg2OGE5YzBiYWE2MjZlMGJjY2MxNmE0OWYzYzgwZQ==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@gmail.com", "date": "2012-08-29T18:43:08Z"}, "committer": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "2012-08-29T18:43:08Z"}, "message": "Add simd_fast_mersenne_twister_engine class.\n\n\t* include/ext/random: New file.\n\t* include/ext/random.tcc: New file.\n\t* include/Makefile.am (ext_headers): Add random and random.tcc.\n\t* testsuite/26_numerics/random/simd_fast_mersenne_twister_engine/\n\toperators/inequal.cc: New file.\n\t* testsuite/26_numerics/random/simd_fast_mersenne_twister_engine/\n\toperators/equal.cc: New file.\n\t* testsuite/26_numerics/random/simd_fast_mersenne_twister_engine/\n\toperators/serialize.cc: New file.\n\t* testsuite/26_numerics/random/simd_fast_mersenne_twister_engine/\n\tcons/seed2.cc: New file.\n\t* testsuite/26_numerics/random/simd_fast_mersenne_twister_engine/\n\tcons/default.cc: New file.\n\t* testsuite/26_numerics/random/simd_fast_mersenne_twister_engine/\n\tcons/seed_seq.cc: New file.\n\t* testsuite/26_numerics/random/simd_fast_mersenne_twister_engine/\n\tcons/copy.cc: New file.\n\t* testsuite/26_numerics/random/simd_fast_mersenne_twister_engine/\n\tcons/seed1.cc: New file.\n\nFrom-SVN: r190783", "tree": {"sha": "99892b71173d7e412b5e38cfa5f2c399e2ef3fcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99892b71173d7e412b5e38cfa5f2c399e2ef3fcf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1860430ab5868a9c0baa626e0bccc16a49f3c80e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1860430ab5868a9c0baa626e0bccc16a49f3c80e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1860430ab5868a9c0baa626e0bccc16a49f3c80e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1860430ab5868a9c0baa626e0bccc16a49f3c80e/comments", "author": {"login": "drepper", "id": 2918631, "node_id": "MDQ6VXNlcjI5MTg2MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2918631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drepper", "html_url": "https://github.com/drepper", "followers_url": "https://api.github.com/users/drepper/followers", "following_url": "https://api.github.com/users/drepper/following{/other_user}", "gists_url": "https://api.github.com/users/drepper/gists{/gist_id}", "starred_url": "https://api.github.com/users/drepper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drepper/subscriptions", "organizations_url": "https://api.github.com/users/drepper/orgs", "repos_url": "https://api.github.com/users/drepper/repos", "events_url": "https://api.github.com/users/drepper/events{/privacy}", "received_events_url": "https://api.github.com/users/drepper/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "487ebcbff524a58a579f309d364c227c15980a00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/487ebcbff524a58a579f309d364c227c15980a00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/487ebcbff524a58a579f309d364c227c15980a00"}], "stats": {"total": 1408, "additions": 1397, "deletions": 11}, "files": [{"sha": "047f444beba91bb09ca448ed1200b5dc7664cb33", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1860430ab5868a9c0baa626e0bccc16a49f3c80e", "patch": "@@ -1,3 +1,26 @@\n+2012-08-29  Ulrich Drepper  <drepper@gmail.com>\n+\n+\tAdd simd_fast_mersenne_twister_engine class.\n+\t* include/ext/random: New file.\n+\t* include/ext/random.tcc: New file.\n+\t* include/Makefile.am (ext_headers): Add random and random.tcc.\n+\t* testsuite/26_numerics/random/simd_fast_mersenne_twister_engine/\n+\toperators/inequal.cc: New file.\n+\t* testsuite/26_numerics/random/simd_fast_mersenne_twister_engine/\n+\toperators/equal.cc: New file.\n+\t* testsuite/26_numerics/random/simd_fast_mersenne_twister_engine/\n+\toperators/serialize.cc: New file.\n+\t* testsuite/26_numerics/random/simd_fast_mersenne_twister_engine/\n+\tcons/seed2.cc: New file.\n+\t* testsuite/26_numerics/random/simd_fast_mersenne_twister_engine/\n+\tcons/default.cc: New file.\n+\t* testsuite/26_numerics/random/simd_fast_mersenne_twister_engine/\n+\tcons/seed_seq.cc: New file.\n+\t* testsuite/26_numerics/random/simd_fast_mersenne_twister_engine/\n+\tcons/copy.cc: New file.\n+\t* testsuite/26_numerics/random/simd_fast_mersenne_twister_engine/\n+\tcons/seed1.cc: New file.\n+\n 2012-08-28  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/54102, part 2"}, {"sha": "d3d6f4af858b1f5f34d35216ddd2961ca2c1719b", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=1860430ab5868a9c0baa626e0bccc16a49f3c80e", "patch": "@@ -518,6 +518,8 @@ ext_headers = \\\n \t${ext_srcdir}/pointer.h \\\n \t${ext_srcdir}/pool_allocator.h \\\n \t${ext_srcdir}/rb_tree \\\n+\t${ext_srcdir}/random \\\n+\t${ext_srcdir}/random.tcc \\\n \t${ext_srcdir}/rope \\\n \t${ext_srcdir}/ropeimpl.h \\\n \t${ext_srcdir}/slist \\\n@@ -1099,7 +1101,7 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \tvisibility=`cat stamp-visibility` ;\\\n \texterntemplate=`cat stamp-extern-template` ;\\\n \tldbl_compat='s,g,g,' ;\\\n-\tgrep \"^[ \t]*#[ \t]*define[ \t][ \t]*_GLIBCXX_LONG_DOUBLE_COMPAT[ \t][ \t]*1[ \t]*$$\" \\\n+\tgrep \"^[\t]*#[\t]*define[\t][\t]*_GLIBCXX_LONG_DOUBLE_COMPAT[\t][\t]*1[\t]*$$\" \\\n \t${CONFIG_HEADER} > /dev/null 2>&1 \\\n \t&& ldbl_compat='s,^#undef _GLIBCXX_LONG_DOUBLE_COMPAT$$,#define _GLIBCXX_LONG_DOUBLE_COMPAT 1,' ;\\\n \tsed -e \"s,define __GLIBCXX__,define __GLIBCXX__ $$date,\" \\\n@@ -1113,7 +1115,7 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t    -e 's/VERSION/_GLIBCXX_VERSION/g' \\\n \t    -e 's/WORDS_/_GLIBCXX_WORDS_/g' \\\n \t    -e 's/ICONV_CONST/_GLIBCXX_ICONV_CONST/g' \\\n-\t    -e '/[ \t]_GLIBCXX_LONG_DOUBLE_COMPAT[ \t]/d' \\\n+\t    -e '/[\t]_GLIBCXX_LONG_DOUBLE_COMPAT[\t]/d' \\\n \t    < ${CONFIG_HEADER} >> $@ ;\\\n \techo \"\" >> $@ ;\\\n \techo \"#endif // _GLIBCXX_CXX_CONFIG_H\" >> $@"}, {"sha": "34fcf78bcb3d54fdd737fada1f786b9dddb2b2da", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=1860430ab5868a9c0baa626e0bccc16a49f3c80e", "patch": "@@ -1,9 +1,9 @@\n-# Makefile.in generated by automake 1.11.1 from Makefile.am.\n+# Makefile.in generated by automake 1.11.3 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,\n-# Inc.\n+# 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software\n+# Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n@@ -769,6 +769,8 @@ ext_headers = \\\n \t${ext_srcdir}/pointer.h \\\n \t${ext_srcdir}/pool_allocator.h \\\n \t${ext_srcdir}/rb_tree \\\n+\t${ext_srcdir}/random \\\n+\t${ext_srcdir}/random.tcc \\\n \t${ext_srcdir}/rope \\\n \t${ext_srcdir}/ropeimpl.h \\\n \t${ext_srcdir}/slist \\\n@@ -1175,6 +1177,7 @@ Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status\n \t    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \\\n \t    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \\\n \tesac;\n+$(top_srcdir)/fragment.am:\n \n $(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)\n \tcd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh\n@@ -1210,10 +1213,15 @@ install-am: all-am\n \n installcheck: installcheck-am\n install-strip:\n-\t$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\\n-\t  install_sh_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" INSTALL_STRIP_FLAG=-s \\\n-\t  `test -z '$(STRIP)' || \\\n-\t    echo \"INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'\"` install\n+\tif test -z '$(STRIP)'; then \\\n+\t  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\\n+\t    install_sh_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" INSTALL_STRIP_FLAG=-s \\\n+\t      install; \\\n+\telse \\\n+\t  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\\n+\t    install_sh_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" INSTALL_STRIP_FLAG=-s \\\n+\t    \"INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'\" install; \\\n+\tfi\n mostlyclean-generic:\n \n clean-generic:\n@@ -1491,7 +1499,7 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \tvisibility=`cat stamp-visibility` ;\\\n \texterntemplate=`cat stamp-extern-template` ;\\\n \tldbl_compat='s,g,g,' ;\\\n-\tgrep \"^[ \t]*#[ \t]*define[ \t][ \t]*_GLIBCXX_LONG_DOUBLE_COMPAT[ \t][ \t]*1[ \t]*$$\" \\\n+\tgrep \"^[\t]*#[\t]*define[\t][\t]*_GLIBCXX_LONG_DOUBLE_COMPAT[\t][\t]*1[\t]*$$\" \\\n \t${CONFIG_HEADER} > /dev/null 2>&1 \\\n \t&& ldbl_compat='s,^#undef _GLIBCXX_LONG_DOUBLE_COMPAT$$,#define _GLIBCXX_LONG_DOUBLE_COMPAT 1,' ;\\\n \tsed -e \"s,define __GLIBCXX__,define __GLIBCXX__ $$date,\" \\\n@@ -1505,7 +1513,7 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t    -e 's/VERSION/_GLIBCXX_VERSION/g' \\\n \t    -e 's/WORDS_/_GLIBCXX_WORDS_/g' \\\n \t    -e 's/ICONV_CONST/_GLIBCXX_ICONV_CONST/g' \\\n-\t    -e '/[ \t]_GLIBCXX_LONG_DOUBLE_COMPAT[ \t]/d' \\\n+\t    -e '/[\t]_GLIBCXX_LONG_DOUBLE_COMPAT[\t]/d' \\\n \t    < ${CONFIG_HEADER} >> $@ ;\\\n \techo \"\" >> $@ ;\\\n \techo \"#endif // _GLIBCXX_CXX_CONFIG_H\" >> $@"}, {"sha": "05cbc8fa493b931727eb59b8102977bdcaf7444a", "filename": "libstdc++-v3/include/ext/random", "status": "added", "additions": 382, "deletions": 0, "changes": 382, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom?ref=1860430ab5868a9c0baa626e0bccc16a49f3c80e", "patch": "@@ -0,0 +1,382 @@\n+// Random number extensions -*- C++ -*-\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file ext/random\n+ *  This file is a GNU extension to the Standard C++ Library.\n+ */\n+\n+#ifndef _EXT_RANDOM\n+#define _EXT_RANDOM 1\n+\n+#pragma GCC system_header\n+\n+#include <random>\n+#ifdef __SSE2__\n+# include <x86intrin.h>\n+#endif\n+\n+\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  /* Mersenne twister implementation optimized for vector operations.\n+   *\n+   * Reference: http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/\n+   */\n+  template<typename _UIntType, size_t __m,\n+\t   size_t __pos1, size_t __sl1, size_t __sl2,\n+\t   size_t __sr1, size_t __sr2,\n+\t   uint32_t __msk1, uint32_t __msk2,\n+\t   uint32_t __msk3, uint32_t __msk4,\n+\t   uint32_t __parity1, uint32_t __parity2,\n+\t   uint32_t __parity3, uint32_t __parity4>\n+    class simd_fast_mersenne_twister_engine\n+    {\n+      static_assert(std::is_unsigned<_UIntType>::value, \"template argument \"\n+\t\t    \"substituting _UIntType not an unsigned integral type\");\n+      static_assert(__sr1 < 32, \"first right shift too large\");\n+      static_assert(__sr2 < 16, \"second right shift too large\");\n+      static_assert(__sl1 < 32, \"first left shift too large\");\n+      static_assert(__sl2 < 16, \"second left shift too large\");\n+\n+    public:\n+      typedef _UIntType result_type;\n+\n+    private:\n+      static constexpr size_t m_w = sizeof(result_type) * 8;\n+      static constexpr size_t _M_nstate = __m / 128 + 1;\n+      static constexpr size_t _M_nstate32 = _M_nstate * 4;\n+\n+      static_assert(std::is_unsigned<_UIntType>::value, \"template argument \"\n+\t\t    \"substituting _UIntType not an unsigned integral type\");\n+      static_assert(__pos1 < _M_nstate, \"POS1 not smaller than state size\");\n+      static_assert(16 % sizeof(_UIntType) == 0,\n+\t\t    \"UIntType size must divide 16\");\n+\n+    public:\n+      static constexpr size_t state_size = _M_nstate * (16\n+\t\t\t\t\t\t\t/ sizeof(result_type));\n+      static constexpr result_type default_seed = 5489u;\n+\n+      // constructors and member function\n+      explicit\n+      simd_fast_mersenne_twister_engine(result_type __sd = default_seed)\n+      { seed(__sd); }\n+\n+      template<typename _Sseq, typename = typename\n+\tstd::enable_if<!std::is_same<_Sseq, simd_fast_mersenne_twister_engine>::value>\n+\t       ::type>\n+\texplicit\n+\tsimd_fast_mersenne_twister_engine(_Sseq& __q)\n+\t{ seed(__q); }\n+\n+      void\n+      seed(result_type __sd = default_seed);\n+\n+      template<typename _Sseq>\n+\ttypename std::enable_if<std::is_class<_Sseq>::value>::type\n+\tseed(_Sseq& __q);\n+\n+      static constexpr result_type\n+      min()\n+      { return 0; };\n+\n+      static constexpr result_type\n+      max()\n+      { return std::numeric_limits<result_type>::max(); }\n+\n+      void\n+      discard(unsigned long long __z);\n+\n+      result_type\n+      operator()()\n+      {\n+\tif (__builtin_expect(_M_pos >= state_size, 0))\n+\t  _M_gen_rand();\n+\n+\treturn _M_stateT[_M_pos++];\n+      }\n+\n+#ifdef __SSE2__\n+      friend bool\n+      operator==(const simd_fast_mersenne_twister_engine& __lhs,\n+\t\t const simd_fast_mersenne_twister_engine& __rhs)\n+      { __m128i __res = _mm_cmpeq_epi8(__lhs._M_state[0], __rhs._M_state[0]);\n+\tfor (size_t __i = 1; __i < __lhs._M_nstate; ++__i)\n+\t  __res = _mm_and_si128(__res, _mm_cmpeq_epi8(__lhs._M_state[__i],\n+\t\t\t\t\t\t      __rhs._M_state[__i]));\n+\treturn (_mm_movemask_epi8(__res) == 0xffff\n+\t\t&& __lhs._M_pos == __rhs._M_pos); }\n+#else\n+      friend bool\n+      operator==(const simd_fast_mersenne_twister_engine& __lhs,\n+\t\t const simd_fast_mersenne_twister_engine& __rhs)\n+      { return (std::equal(__lhs._M_stateT, __lhs._M_stateT + state_size,\n+\t\t\t   __rhs._M_stateT)\n+\t\t&& __lhs._M_pos == __rhs._M_pos); }\n+#endif\n+\n+      template<typename _UIntType_2, size_t __m_2,\n+\t       size_t __pos1_2, size_t __sl1_2, size_t __sl2_2,\n+\t       size_t __sr1_2, size_t __sr2_2,\n+\t       uint32_t __msk1_2, uint32_t __msk2_2,\n+\t       uint32_t __msk3_2, uint32_t __msk4_2,\n+\t       uint32_t __parity1_2, uint32_t __parity2_2,\n+\t       uint32_t __parity3_2, uint32_t __parity4_2,\n+\t       typename _CharT, typename _Traits>\n+\tfriend std::basic_ostream<_CharT, _Traits>&\n+\toperator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const __gnu_cxx::simd_fast_mersenne_twister_engine<_UIntType_2,\n+\t\t   __m_2, __pos1_2, __sl1_2, __sl2_2, __sr1_2, __sr2_2,\n+\t\t   __msk1_2, __msk2_2, __msk3_2, __msk4_2,\n+\t\t   __parity1_2, __parity2_2, __parity3_2, __parity4_2>& __x);\n+\n+      template<typename _UIntType_2, size_t __m_2,\n+\t       size_t __pos1_2, size_t __sl1_2, size_t __sl2_2,\n+\t       size_t __sr1_2, size_t __sr2_2,\n+\t       uint32_t __msk1_2, uint32_t __msk2_2,\n+\t       uint32_t __msk3_2, uint32_t __msk4_2,\n+\t       uint32_t __parity1_2, uint32_t __parity2_2,\n+\t       uint32_t __parity3_2, uint32_t __parity4_2,\n+\t       typename _CharT, typename _Traits>\n+\tfriend std::basic_istream<_CharT, _Traits>&\n+\toperator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   __gnu_cxx::simd_fast_mersenne_twister_engine<_UIntType_2,\n+\t\t   __m_2, __pos1_2, __sl1_2, __sl2_2, __sr1_2, __sr2_2,\n+\t\t   __msk1_2, __msk2_2, __msk3_2, __msk4_2,\n+\t\t   __parity1_2, __parity2_2, __parity3_2, __parity4_2>& __x);\n+\n+    private:\n+      union\n+      {\n+#ifdef __SSE2__\n+\t__m128i _M_state[_M_nstate];\n+#endif\n+\tuint32_t _M_state32[_M_nstate32];\n+\tresult_type _M_stateT[state_size];\n+      } __attribute__ ((__aligned__ (16)));\n+      size_t _M_pos;\n+\n+      void _M_gen_rand(void);\n+      void _M_period_certification();\n+  };\n+\n+\n+  template<typename _UIntType, size_t __m,\n+\t   size_t __pos1, size_t __sl1, size_t __sl2,\n+\t   size_t __sr1, size_t __sr2,\n+\t   uint32_t __msk1, uint32_t __msk2,\n+\t   uint32_t __msk3, uint32_t __msk4,\n+\t   uint32_t __parity1, uint32_t __parity2,\n+\t   uint32_t __parity3, uint32_t __parity4>\n+    inline bool\n+    operator!=(const __gnu_cxx::simd_fast_mersenne_twister_engine<_UIntType,\n+\t       __m, __pos1, __sl1, __sl2, __sr1, __sr2, __msk1, __msk2, __msk3,\n+\t       __msk4, __parity1, __parity2, __parity3, __parity4>& __lhs,\n+\t       const __gnu_cxx::simd_fast_mersenne_twister_engine<_UIntType,\n+\t       __m, __pos1, __sl1, __sl2, __sr1, __sr2, __msk1, __msk2, __msk3,\n+\t       __msk4, __parity1, __parity2, __parity3, __parity4>& __rhs)\n+    { return !(__lhs == __rhs); }\n+\n+\n+  /* Definitions for the SIMD-oriented Fast Mersenne Twister as defined\n+   * in the C implementation by Daito and Matsumoto, as both a 32-bit\n+   * and 64-bit version.\n+   */\n+  typedef simd_fast_mersenne_twister_engine<uint32_t, 607, 2,\n+\t\t\t\t\t    15, 3, 13, 3,\n+\t\t\t\t\t    0xfdff37ffU, 0xef7f3f7dU,\n+\t\t\t\t\t    0xff777b7dU, 0x7ff7fb2fU,\n+\t\t\t\t\t    0x00000001U, 0x00000000U,\n+\t\t\t\t\t    0x00000000U, 0x5986f054U>\n+    sfmt607;\n+\n+  typedef simd_fast_mersenne_twister_engine<uint64_t, 607, 2,\n+\t\t\t\t\t    15, 3, 13, 3,\n+\t\t\t\t\t    0xfdff37ffU, 0xef7f3f7dU,\n+\t\t\t\t\t    0xff777b7dU, 0x7ff7fb2fU,\n+\t\t\t\t\t    0x00000001U, 0x00000000U,\n+\t\t\t\t\t    0x00000000U, 0x5986f054U>\n+    sfmt607_64;\n+\n+\n+  typedef simd_fast_mersenne_twister_engine<uint32_t, 1279, 7,\n+\t\t\t\t\t    14, 3, 5, 1,\n+\t\t\t\t\t    0xf7fefffdU, 0x7fefcfffU,\n+\t\t\t\t\t    0xaff3ef3fU, 0xb5ffff7fU,\n+\t\t\t\t\t    0x00000001U, 0x00000000U,\n+\t\t\t\t\t    0x00000000U, 0x20000000U>\n+    sfmt1279;\n+\n+  typedef simd_fast_mersenne_twister_engine<uint64_t, 1279, 7,\n+\t\t\t\t\t    14, 3, 5, 1,\n+\t\t\t\t\t    0xf7fefffdU, 0x7fefcfffU,\n+\t\t\t\t\t    0xaff3ef3fU, 0xb5ffff7fU,\n+\t\t\t\t\t    0x00000001U, 0x00000000U,\n+\t\t\t\t\t    0x00000000U, 0x20000000U>\n+    sfmt1279_64;\n+\n+\n+  typedef simd_fast_mersenne_twister_engine<uint32_t, 2281, 12,\n+\t\t\t\t\t    19, 1, 5, 1,\n+\t\t\t\t\t    0xbff7ffbfU, 0xfdfffffeU,\n+\t\t\t\t\t    0xf7ffef7fU, 0xf2f7cbbfU,\n+\t\t\t\t\t    0x00000001U, 0x00000000U,\n+\t\t\t\t\t    0x00000000U, 0x41dfa600U>\n+    sfmt2281;\n+\n+  typedef simd_fast_mersenne_twister_engine<uint64_t, 2281, 12,\n+\t\t\t\t\t    19, 1, 5, 1,\n+\t\t\t\t\t    0xbff7ffbfU, 0xfdfffffeU,\n+\t\t\t\t\t    0xf7ffef7fU, 0xf2f7cbbfU,\n+\t\t\t\t\t    0x00000001U, 0x00000000U,\n+\t\t\t\t\t    0x00000000U, 0x41dfa600U>\n+    sfmt2281_64;\n+\n+\n+  typedef simd_fast_mersenne_twister_engine<uint32_t, 4253, 17,\n+\t\t\t\t\t    20, 1, 7, 1,\n+\t\t\t\t\t    0x9f7bffffU, 0x9fffff5fU,\n+\t\t\t\t\t    0x3efffffbU, 0xfffff7bbU,\n+\t\t\t\t\t    0xa8000001U, 0xaf5390a3U,\n+\t\t\t\t\t    0xb740b3f8U, 0x6c11486dU>\n+    sfmt4253;\n+\n+  typedef simd_fast_mersenne_twister_engine<uint64_t, 4253, 17,\n+\t\t\t\t\t    20, 1, 7, 1,\n+\t\t\t\t\t    0x9f7bffffU, 0x9fffff5fU,\n+\t\t\t\t\t    0x3efffffbU, 0xfffff7bbU,\n+\t\t\t\t\t    0xa8000001U, 0xaf5390a3U,\n+\t\t\t\t\t    0xb740b3f8U, 0x6c11486dU>\n+    sfmt4253_64;\n+\n+\n+  typedef simd_fast_mersenne_twister_engine<uint32_t, 11213, 68,\n+\t\t\t\t\t    14, 3, 7, 3,\n+\t\t\t\t\t    0xeffff7fbU, 0xffffffefU,\n+\t\t\t\t\t    0xdfdfbfffU, 0x7fffdbfdU,\n+\t\t\t\t\t    0x00000001U, 0x00000000U,\n+\t\t\t\t\t    0xe8148000U, 0xd0c7afa3U>\n+    sfmt11213;\n+\n+  typedef simd_fast_mersenne_twister_engine<uint64_t, 11213, 68,\n+\t\t\t\t\t    14, 3, 7, 3,\n+\t\t\t\t\t    0xeffff7fbU, 0xffffffefU,\n+\t\t\t\t\t    0xdfdfbfffU, 0x7fffdbfdU,\n+\t\t\t\t\t    0x00000001U, 0x00000000U,\n+\t\t\t\t\t    0xe8148000U, 0xd0c7afa3U>\n+    sfmt11213_64;\n+\n+\n+  typedef simd_fast_mersenne_twister_engine<uint32_t, 19937, 122,\n+\t\t\t\t\t    18, 1, 11, 1,\n+\t\t\t\t\t    0xdfffffefU, 0xddfecb7fU,\n+\t\t\t\t\t    0xbffaffffU, 0xbffffff6U,\n+\t\t\t\t\t    0x00000001U, 0x00000000U,\n+\t\t\t\t\t    0x00000000U, 0x13c9e684U>\n+    sfmt19937;\n+\n+  typedef simd_fast_mersenne_twister_engine<uint64_t, 19937, 122,\n+\t\t\t\t\t    18, 1, 11, 1,\n+\t\t\t\t\t    0xdfffffefU, 0xddfecb7fU,\n+\t\t\t\t\t    0xbffaffffU, 0xbffffff6U,\n+\t\t\t\t\t    0x00000001U, 0x00000000U,\n+\t\t\t\t\t    0x00000000U, 0x13c9e684U>\n+    sfmt19937_64;\n+\n+\n+  typedef simd_fast_mersenne_twister_engine<uint32_t, 44497, 330,\n+\t\t\t\t\t    5, 3, 9, 3,\n+\t\t\t\t\t    0xeffffffbU, 0xdfbebfffU,\n+\t\t\t\t\t    0xbfbf7befU, 0x9ffd7bffU,\n+\t\t\t\t\t    0x00000001U, 0x00000000U,\n+\t\t\t\t\t    0xa3ac4000U, 0xecc1327aU>\n+    sfmt44497;\n+\n+  typedef simd_fast_mersenne_twister_engine<uint64_t, 44497, 330,\n+\t\t\t\t\t    5, 3, 9, 3,\n+\t\t\t\t\t    0xeffffffbU, 0xdfbebfffU,\n+\t\t\t\t\t    0xbfbf7befU, 0x9ffd7bffU,\n+\t\t\t\t\t    0x00000001U, 0x00000000U,\n+\t\t\t\t\t    0xa3ac4000U, 0xecc1327aU>\n+    sfmt44497_64;\n+\n+\n+  typedef simd_fast_mersenne_twister_engine<uint32_t, 86243, 366,\n+\t\t\t\t\t    6, 7, 19, 1,\n+\t\t\t\t\t    0xfdbffbffU, 0xbff7ff3fU,\n+\t\t\t\t\t    0xfd77efffU, 0xbf9ff3ffU,\n+\t\t\t\t\t    0x00000001U, 0x00000000U,\n+\t\t\t\t\t    0x00000000U, 0xe9528d85U>\n+    sfmt86243;\n+\n+  typedef simd_fast_mersenne_twister_engine<uint64_t, 86243, 366,\n+\t\t\t\t\t    6, 7, 19, 1,\n+\t\t\t\t\t    0xfdbffbffU, 0xbff7ff3fU,\n+\t\t\t\t\t    0xfd77efffU, 0xbf9ff3ffU,\n+\t\t\t\t\t    0x00000001U, 0x00000000U,\n+\t\t\t\t\t    0x00000000U, 0xe9528d85U>\n+    sfmt86243_64;\n+\n+\n+  typedef simd_fast_mersenne_twister_engine<uint32_t, 132049, 110,\n+\t\t\t\t\t    19, 1, 21, 1,\n+\t\t\t\t\t    0xffffbb5fU, 0xfb6ebf95U,\n+\t\t\t\t\t    0xfffefffaU, 0xcff77fffU,\n+\t\t\t\t\t    0x00000001U, 0x00000000U,\n+\t\t\t\t\t    0xcb520000U, 0xc7e91c7dU>\n+    sfmt132049;\n+\n+  typedef simd_fast_mersenne_twister_engine<uint64_t, 132049, 110,\n+\t\t\t\t\t    19, 1, 21, 1,\n+\t\t\t\t\t    0xffffbb5fU, 0xfb6ebf95U,\n+\t\t\t\t\t    0xfffefffaU, 0xcff77fffU,\n+\t\t\t\t\t    0x00000001U, 0x00000000U,\n+\t\t\t\t\t    0xcb520000U, 0xc7e91c7dU>\n+    sfmt132049_64;\n+\n+\n+  typedef simd_fast_mersenne_twister_engine<uint32_t, 216091, 627,\n+\t\t\t\t\t    11, 3, 10, 1,\n+\t\t\t\t\t    0xbff7bff7U, 0xbfffffffU,\n+\t\t\t\t\t    0xbffffa7fU, 0xffddfbfbU,\n+\t\t\t\t\t    0xf8000001U, 0x89e80709U,\n+\t\t\t\t\t    0x3bd2b64bU, 0x0c64b1e4U>\n+    sfmt216091;\n+\n+  typedef simd_fast_mersenne_twister_engine<uint64_t, 216091, 627,\n+\t\t\t\t\t    11, 3, 10, 1,\n+\t\t\t\t\t    0xbff7bff7U, 0xbfffffffU,\n+\t\t\t\t\t    0xbffffa7fU, 0xffddfbfbU,\n+\t\t\t\t\t    0xf8000001U, 0x89e80709U,\n+\t\t\t\t\t    0x3bd2b64bU, 0x0c64b1e4U>\n+    sfmt216091_64;\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+\n+#include \"random.tcc\"\n+\n+#endif /* _EXT_RANDOM */"}, {"sha": "2a6fde0208fcc46108ddabf934aa2f8c9c0a4b92", "filename": "libstdc++-v3/include/ext/random.tcc", "status": "added", "additions": 445, "deletions": 0, "changes": 445, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc?ref=1860430ab5868a9c0baa626e0bccc16a49f3c80e", "patch": "@@ -0,0 +1,445 @@\n+// Random number extensions -*- C++ -*-\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file ext/random.tcc\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{ext/random}\n+ */\n+\n+#ifndef _EXT_RANDOM_TCC\n+#define _EXT_RANDOM_TCC 1\n+\n+#pragma GCC system_header\n+\n+\n+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+\n+  template<typename _UIntType, size_t __m,\n+\t   size_t __pos1, size_t __sl1, size_t __sl2,\n+\t   size_t __sr1, size_t __sr2,\n+\t   uint32_t __msk1, uint32_t __msk2,\n+\t   uint32_t __msk3, uint32_t __msk4,\n+\t   uint32_t __parity1, uint32_t __parity2,\n+\t   uint32_t __parity3, uint32_t __parity4>\n+    void simd_fast_mersenne_twister_engine<_UIntType, __m,\n+\t\t\t\t\t   __pos1, __sl1, __sl2, __sr1, __sr2,\n+\t\t\t\t\t   __msk1, __msk2, __msk3, __msk4,\n+\t\t\t\t\t   __parity1, __parity2, __parity3,\n+\t\t\t\t\t   __parity4>::\n+    seed(_UIntType __seed)\n+    {\n+      _M_state32[0] = static_cast<uint32_t>(__seed);\n+      for (size_t __i = 1; __i < _M_nstate32; ++__i)\n+\t_M_state32[__i] = (1812433253UL\n+\t\t\t   * (_M_state32[__i - 1] ^ (_M_state32[__i - 1] >> 30))\n+\t\t\t   + __i);\n+      _M_pos = state_size;\n+      _M_period_certification();\n+    }\n+\n+\n+  namespace {\n+\n+    inline uint32_t _Func1(uint32_t __x)\n+    {\n+      return (__x ^ (__x >> 27)) * UINT32_C(1664525);\n+    }\n+\n+    inline uint32_t _Func2(uint32_t __x)\n+    {\n+      return (__x ^ (__x >> 27)) * UINT32_C(1566083941);\n+    }\n+\n+  }\n+\n+\n+  template<typename _UIntType, size_t __m,\n+\t   size_t __pos1, size_t __sl1, size_t __sl2,\n+\t   size_t __sr1, size_t __sr2,\n+\t   uint32_t __msk1, uint32_t __msk2,\n+\t   uint32_t __msk3, uint32_t __msk4,\n+\t   uint32_t __parity1, uint32_t __parity2,\n+\t   uint32_t __parity3, uint32_t __parity4>\n+    template<typename _Sseq>\n+      typename std::enable_if<std::is_class<_Sseq>::value>::type\n+      simd_fast_mersenne_twister_engine<_UIntType, __m,\n+\t\t\t\t\t__pos1, __sl1, __sl2, __sr1, __sr2,\n+\t\t\t\t\t__msk1, __msk2, __msk3, __msk4,\n+\t\t\t\t\t__parity1, __parity2, __parity3,\n+\t\t\t\t\t__parity4>::\n+      seed(_Sseq& __q)\n+      {\n+\tsize_t __lag;\n+\n+\tif (_M_nstate32 >= 623)\n+\t  __lag = 11;\n+\telse if (_M_nstate32 >= 68)\n+\t  __lag = 7;\n+\telse if (_M_nstate32 >= 39)\n+\t  __lag = 5;\n+\telse\n+\t  __lag = 3;\n+\tconst size_t __mid = (_M_nstate32 - __lag) / 2;\n+\n+\tstd::fill(_M_state32, _M_state32 + _M_nstate32, UINT32_C(0x8b8b8b8b));\n+\tuint32_t __arr[_M_nstate32];\n+\t__q.generate(__arr + 0, __arr + _M_nstate32);\n+\n+\tuint32_t __r = _Func1(_M_state32[0] ^ _M_state32[__mid]\n+\t\t\t      ^ _M_state32[_M_nstate32  - 1]);\n+\t_M_state32[__mid] += __r;\n+\t__r += _M_nstate32;\n+\t_M_state32[__mid + __lag] += __r;\n+\t_M_state32[0] = __r;\n+\n+\tfor (size_t __i = 1, __j = 0; __j < _M_nstate32; ++__j)\n+\t  {\n+\t    __r = _Func1(_M_state32[__i]\n+\t\t\t ^ _M_state32[(__i + __mid) % _M_nstate32]\n+\t\t\t ^ _M_state32[(__i + _M_nstate32 - 1) % _M_nstate32]);\n+\t    _M_state32[(__i + __mid) % _M_nstate32] += __r;\n+\t    __r += __arr[__j] + __i;\n+\t    _M_state32[(__i + __mid + __lag) % _M_nstate32] += __r;\n+\t    _M_state32[__i] = __r;\n+\t    __i = (__i + 1) % _M_nstate32;\n+\t  }\n+\tfor (size_t __j = 0; __j < _M_nstate32; ++__j)\n+\t  {\n+\t    const size_t __i = (__j + 1) % _M_nstate32;\n+\t    __r = _Func2(_M_state32[__i]\n+\t\t\t + _M_state32[(__i + __mid) % _M_nstate32]\n+\t\t\t + _M_state32[(__i + _M_nstate32 - 1) % _M_nstate32]);\n+\t    _M_state32[(__i + __mid) % _M_nstate32] ^= __r;\n+\t    __r -= __i;\n+\t    _M_state32[(__i + __mid + __lag) % _M_nstate32] ^= __r;\n+\t    _M_state32[__i] = __r;\n+\t  }\n+\n+\t_M_pos = state_size;\n+\t_M_period_certification();\n+      }\n+\n+\n+  template<typename _UIntType, size_t __m,\n+\t   size_t __pos1, size_t __sl1, size_t __sl2,\n+\t   size_t __sr1, size_t __sr2,\n+\t   uint32_t __msk1, uint32_t __msk2,\n+\t   uint32_t __msk3, uint32_t __msk4,\n+\t   uint32_t __parity1, uint32_t __parity2,\n+\t   uint32_t __parity3, uint32_t __parity4>\n+    void simd_fast_mersenne_twister_engine<_UIntType, __m,\n+\t\t\t\t\t   __pos1, __sl1, __sl2, __sr1, __sr2,\n+\t\t\t\t\t   __msk1, __msk2, __msk3, __msk4,\n+\t\t\t\t\t   __parity1, __parity2, __parity3,\n+\t\t\t\t\t   __parity4>::\n+    _M_period_certification(void)\n+    {\n+      static const uint32_t __parity[4] = { __parity1, __parity2,\n+\t\t\t\t\t    __parity3, __parity4 };\n+      uint32_t __inner = 0;\n+      for (size_t __i = 0; __i < 4; ++__i)\n+\tif (__parity[__i] != 0)\n+\t  __inner ^= _M_state32[__i] & __parity[__i];\n+\n+      if (__builtin_parity(__inner) & 1)\n+\treturn;\n+      for (size_t __i = 0; __i < 4; ++__i)\n+\tif (__parity[__i] != 0)\n+\t  {\n+\t    _M_state32[__i] ^= 1 << (__builtin_ffs(__parity[__i]) - 1);\n+\t    return;\n+\t  }\n+      __builtin_unreachable();\n+    }\n+\n+\n+  template<typename _UIntType, size_t __m,\n+\t   size_t __pos1, size_t __sl1, size_t __sl2,\n+\t   size_t __sr1, size_t __sr2,\n+\t   uint32_t __msk1, uint32_t __msk2,\n+\t   uint32_t __msk3, uint32_t __msk4,\n+\t   uint32_t __parity1, uint32_t __parity2,\n+\t   uint32_t __parity3, uint32_t __parity4>\n+    void simd_fast_mersenne_twister_engine<_UIntType, __m,\n+\t\t\t\t\t   __pos1, __sl1, __sl2, __sr1, __sr2,\n+\t\t\t\t\t   __msk1, __msk2, __msk3, __msk4,\n+\t\t\t\t\t   __parity1, __parity2, __parity3,\n+\t\t\t\t\t   __parity4>::\n+    discard(unsigned long long __z)\n+    {\n+      while (__z > state_size - _M_pos)\n+\t{\n+\t  __z -= state_size - _M_pos;\n+\n+\t  _M_gen_rand();\n+\t}\n+\n+      _M_pos += __z;\n+    }\n+\n+\n+#ifdef  __SSE2__\n+\n+  namespace {\n+\n+    template<size_t __sl1, size_t __sl2, size_t __sr1, size_t __sr2,\n+\t     uint32_t __msk1, uint32_t __msk2, uint32_t __msk3, uint32_t __msk4>\n+      inline __m128i __sse2_recursion(__m128i __a, __m128i __b,\n+\t\t\t\t      __m128i __c, __m128i __d)\n+      {\n+\t__m128i __y = _mm_srli_epi32(__b, __sr1);\n+\t__m128i __z = _mm_srli_si128(__c, __sr2);\n+\t__m128i __v = _mm_slli_epi32(__d, __sl1);\n+\t__z = _mm_xor_si128(__z, __a);\n+\t__z = _mm_xor_si128(__z, __v);\n+\t__m128i __x = _mm_slli_si128(__a, __sl2);\n+\t__y = _mm_and_si128(__y, _mm_set_epi32(__msk4, __msk3, __msk2, __msk1));\n+\t__z = _mm_xor_si128(__z, __x);\n+\treturn _mm_xor_si128(__z, __y);\n+      }\n+\n+  }\n+\n+\n+  template<typename _UIntType, size_t __m,\n+\t   size_t __pos1, size_t __sl1, size_t __sl2,\n+\t   size_t __sr1, size_t __sr2,\n+\t   uint32_t __msk1, uint32_t __msk2,\n+\t   uint32_t __msk3, uint32_t __msk4,\n+\t   uint32_t __parity1, uint32_t __parity2,\n+\t   uint32_t __parity3, uint32_t __parity4>\n+    void simd_fast_mersenne_twister_engine<_UIntType, __m,\n+\t\t\t\t\t   __pos1, __sl1, __sl2, __sr1, __sr2,\n+\t\t\t\t\t   __msk1, __msk2, __msk3, __msk4,\n+\t\t\t\t\t   __parity1, __parity2, __parity3,\n+\t\t\t\t\t   __parity4>::\n+    _M_gen_rand(void)\n+    {\n+      __m128i __r1 = _mm_load_si128(&_M_state[_M_nstate - 2]);\n+      __m128i __r2 = _mm_load_si128(&_M_state[_M_nstate - 1]);\n+\n+      size_t __i;\n+      for (__i = 0; __i < _M_nstate - __pos1; ++__i)\n+\t{\n+\t  __m128i __r = __sse2_recursion<__sl1, __sl2, __sr1, __sr2,\n+\t\t\t\t\t __msk1, __msk2, __msk3, __msk4>\n+\t    (_M_state[__i], _M_state[__i + __pos1], __r1, __r2);\n+\t  _mm_store_si128(&_M_state[__i], __r);\n+\t  __r1 = __r2;\n+\t  __r2 = __r;\n+\t}\n+      for (; __i < _M_nstate; ++__i)\n+\t{\n+\t  __m128i __r = __sse2_recursion<__sl1, __sl2, __sr1, __sr2,\n+\t\t\t\t\t __msk1, __msk2, __msk3, __msk4>\n+\t    (_M_state[__i], _M_state[__i + __pos1 - _M_nstate], __r1, __r2);\n+\t  _mm_store_si128(&_M_state[__i], __r);\n+\t  __r1 = __r2;\n+\t  __r2 = __r;\n+\t}\n+\n+      _M_pos = 0;\n+    }\n+\n+\n+#else\n+\n+  namespace {\n+\n+    template<size_t __shift>\n+      inline void __rshift(uint32_t *__out, const uint32_t *__in)\n+      {\n+\tuint64_t __th = ((static_cast<uint64_t>(__in[3]) << 32)\n+\t\t\t | static_cast<uint64_t>(__in[2]));\n+\tuint64_t __tl = ((static_cast<uint64_t>(__in[1]) << 32)\n+\t\t\t | static_cast<uint64_t>(__in[0]));\n+\n+\tuint64_t __oh = __th >> (__shift * 8);\n+\tuint64_t __ol = __tl >> (__shift * 8);\n+\t__ol |= __th << (64 - __shift * 8);\n+\t__out[1] = static_cast<uint32_t>(__ol >> 32);\n+\t__out[0] = static_cast<uint32_t>(__ol);\n+\t__out[3] = static_cast<uint32_t>(__oh >> 32);\n+\t__out[2] = static_cast<uint32_t>(__oh);\n+      }\n+\n+\n+    template<size_t __shift>\n+      inline void __lshift(uint32_t *__out, const uint32_t *__in)\n+      {\n+\tuint64_t __th = ((static_cast<uint64_t>(__in[3]) << 32)\n+\t\t\t | static_cast<uint64_t>(__in[2]));\n+\tuint64_t __tl = ((static_cast<uint64_t>(__in[1]) << 32)\n+\t\t\t | static_cast<uint64_t>(__in[0]));\n+\n+\tuint64_t __oh = __th << (__shift * 8);\n+\tuint64_t __ol = __tl << (__shift * 8);\n+\t__oh |= __tl >> (64 - __shift * 8);\n+\t__out[1] = static_cast<uint32_t>(__ol >> 32);\n+\t__out[0] = static_cast<uint32_t>(__ol);\n+\t__out[3] = static_cast<uint32_t>(__oh >> 32);\n+\t__out[2] = static_cast<uint32_t>(__oh);\n+      }\n+\n+\n+    template<size_t __sl1, size_t __sl2, size_t __sr1, size_t __sr2,\n+\t     uint32_t __msk1, uint32_t __msk2, uint32_t __msk3, uint32_t __msk4>\n+      inline void __recursion(uint32_t *__r,\n+\t\t\t      const uint32_t *__a, const uint32_t *__b,\n+\t\t\t      const uint32_t *__c, const uint32_t *__d)\n+      {\n+\tuint32_t __x[4];\n+\tuint32_t __y[4];\n+\n+\t__lshift<__sl2>(__x, __a);\n+\t__rshift<__sr2>(__y, __c);\n+\t__r[0] = (__a[0] ^ __x[0] ^ ((__b[0] >> __sr1) & __msk1)\n+\t\t  ^ __y[0] ^ (__d[0] << __sl1));\n+\t__r[1] = (__a[1] ^ __x[1] ^ ((__b[1] >> __sr1) & __msk2)\n+\t\t  ^ __y[1] ^ (__d[1] << __sl1));\n+\t__r[2] = (__a[2] ^ __x[2] ^ ((__b[2] >> __sr1) & __msk3)\n+\t\t  ^ __y[2] ^ (__d[2] << __sl1));\n+\t__r[3] = (__a[3] ^ __x[3] ^ ((__b[3] >> __sr1) & __msk4)\n+\t\t  ^ __y[3] ^ (__d[3] << __sl1));\n+      }\n+\n+  }\n+\n+\n+  template<typename _UIntType, size_t __m,\n+\t   size_t __pos1, size_t __sl1, size_t __sl2,\n+\t   size_t __sr1, size_t __sr2,\n+\t   uint32_t __msk1, uint32_t __msk2,\n+\t   uint32_t __msk3, uint32_t __msk4,\n+\t   uint32_t __parity1, uint32_t __parity2,\n+\t   uint32_t __parity3, uint32_t __parity4>\n+    void simd_fast_mersenne_twister_engine<_UIntType, __m,\n+\t\t\t\t\t   __pos1, __sl1, __sl2, __sr1, __sr2,\n+\t\t\t\t\t   __msk1, __msk2, __msk3, __msk4,\n+\t\t\t\t\t   __parity1, __parity2, __parity3,\n+\t\t\t\t\t   __parity4>::\n+    _M_gen_rand(void)\n+    {\n+      const uint32_t *__r1 = &_M_state32[_M_nstate32 - 8];\n+      const uint32_t *__r2 = &_M_state32[_M_nstate32 - 4];\n+      static constexpr size_t __pos1_32 = __pos1 * 4;\n+\n+      size_t __i;\n+      for (__i = 0; __i < _M_nstate32 - __pos1_32; __i += 4)\n+\t{\n+\t  __recursion<__sl1, __sl2, __sr1, __sr2,\n+\t\t      __msk1, __msk2, __msk3, __msk4>\n+\t    (&_M_state32[__i], &_M_state32[__i],\n+\t     &_M_state32[__i + __pos1_32], __r1, __r2);\n+\t  __r1 = __r2;\n+\t  __r2 = &_M_state32[__i];\n+\t}\n+\n+      for (; __i < _M_nstate32; __i += 4)\n+\t{\n+\t  __recursion<__sl1, __sl2, __sr1, __sr2,\n+\t\t      __msk1, __msk2, __msk3, __msk4>\n+\t    (&_M_state32[__i], &_M_state32[__i],\n+\t     &_M_state32[__i + __pos1_32 - _M_nstate32], __r1, __r2);\n+\t  __r1 = __r2;\n+\t  __r2 = &_M_state32[__i];\n+\t}\n+\n+      _M_pos = 0;\n+    }\n+\n+#endif\n+\n+\n+  template<typename _UIntType, size_t __m,\n+\t   size_t __pos1, size_t __sl1, size_t __sl2,\n+\t   size_t __sr1, size_t __sr2,\n+\t   uint32_t __msk1, uint32_t __msk2,\n+\t   uint32_t __msk3, uint32_t __msk4,\n+\t   uint32_t __parity1, uint32_t __parity2,\n+\t   uint32_t __parity3, uint32_t __parity4,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const __gnu_cxx::simd_fast_mersenne_twister_engine<_UIntType,\n+\t       __m, __pos1, __sl1, __sl2, __sr1, __sr2,\n+\t       __msk1, __msk2, __msk3, __msk4,\n+\t       __parity1, __parity2, __parity3, __parity4>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;\n+      typedef typename __ostream_type::ios_base __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);\n+      __os.fill(__space);\n+\n+      for (size_t __i = 0; __i < __x._M_nstate32; ++__i)\n+\t__os << __x._M_state32[__i] << __space;\n+      __os << __x._M_pos;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      return __os;\n+    }\n+\n+\n+  template<typename _UIntType, size_t __m,\n+\t   size_t __pos1, size_t __sl1, size_t __sl2,\n+\t   size_t __sr1, size_t __sr2,\n+\t   uint32_t __msk1, uint32_t __msk2,\n+\t   uint32_t __msk3, uint32_t __msk4,\n+\t   uint32_t __parity1, uint32_t __parity2,\n+\t   uint32_t __parity3, uint32_t __parity4,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       __gnu_cxx::simd_fast_mersenne_twister_engine<_UIntType,\n+\t       __m, __pos1, __sl1, __sl2, __sr1, __sr2,\n+\t       __msk1, __msk2, __msk3, __msk4,\n+\t       __parity1, __parity2, __parity3, __parity4>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits> __istream_type;\n+      typedef typename __istream_type::ios_base __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      for (size_t __i = 0; __i < __x._M_nstate32; ++__i)\n+\t__is >> __x._M_state32[__i];\n+      __is >> __x._M_pos;\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+\n+\n+#endif // _EXT_RANDOM_TCC"}, {"sha": "8371f4628faba286201c5e07f5f668c38e77e993", "filename": "libstdc++-v3/testsuite/26_numerics/random/simd_fast_mersenne_twister_engine/cons/copy.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Fcons%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Fcons%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Fcons%2Fcopy.cc?ref=1860430ab5868a9c0baa626e0bccc16a49f3c80e", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-02-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+// 2012-08-28  Ulrich Drepper  <drepper@gmail.com>, adapted for SFMT\n+//\n+// Copyright (C) 2010, 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+\n+void\n+test01()\n+{\n+  typedef uint32_t value_type;\n+\n+  __gnu_cxx::simd_fast_mersenne_twister_engine<value_type, 607, 2,\n+\t\t\t\t\t       15, 3, 13, 3,\n+\t\t\t\t\t       0xfdff37ffU, 0xef7f3f7dU,\n+\t\t\t\t\t       0xff777b7dU, 0x7ff7fb2fU,\n+\t\t\t\t\t       0x00000001U, 0x00000000U,\n+\t\t\t\t\t       0x00000000U, 0x5986f054U> e(1);\n+\n+  const auto f(e);\n+  auto g(f);\n+  g = g; // Suppress unused warning.\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5b6489a4028ebfaa159f718b2de7a3806e0aa32b", "filename": "libstdc++-v3/testsuite/26_numerics/random/simd_fast_mersenne_twister_engine/cons/default.cc", "status": "added", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Fcons%2Fdefault.cc?ref=1860430ab5868a9c0baa626e0bccc16a49f3c80e", "patch": "@@ -0,0 +1,183 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+// 2012-08-28  Ulrich Drepper  <drepper@gmail.com>, adapted for SFMT\n+//\n+// Copyright (C) 2008, 2009, 2010, 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <iostream>\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+\n+template<class SFMT>\n+void run_test(std::initializer_list<typename SFMT::result_type> vals)\n+{\n+  typedef typename SFMT::result_type result_type;\n+  SFMT e;\n+\n+  e.seed(sizeof(result_type) == 4 ? 1234 : 4321);\n+  e.discard(990);\n+  bool success = true;\n+  for (auto i : vals)\n+    {\n+      result_type r = e();\n+      success &= r == i;\n+      std::cout << r << \" vs \" << i << std::endl;\n+    }\n+  VERIFY( success );\n+}\n+\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::sfmt19937 e;\n+\n+  VERIFY( e.min() == 0 );\n+  VERIFY( e.max() == std::numeric_limits<uint32_t>::max() );\n+\n+  run_test<__gnu_cxx::sfmt607>({ UINT32_C(1318548553), UINT32_C(1985957974),\n+\tUINT32_C(1367744196), UINT32_C(3463392791), UINT32_C(2780736231),\n+\tUINT32_C(3894488561), UINT32_C(3157036262), UINT32_C(3491812767),\n+\tUINT32_C(1724574180), UINT32_C(3645035493) });\n+\n+  run_test<__gnu_cxx::sfmt607_64>({UINT64_C(15510024334182072935),\n+\tUINT64_C(5793753331747412752), UINT64_C(16198353238554625740),\n+\tUINT64_C(2233208824926016498), UINT64_C(3566091399820823780),\n+\tUINT64_C(16608268514591292798), UINT64_C(10684941689666043359),\n+\tUINT64_C(12463424292910456802), UINT64_C(5902567440240131366),\n+\tUINT64_C(7228030834036501150) });\n+\n+  run_test<__gnu_cxx::sfmt1279>({ UINT32_C(66657331), UINT32_C(637106837),\n+\tUINT32_C(406927341), UINT32_C(3964420203), UINT32_C(2127134160),\n+\tUINT32_C(1327235047), UINT32_C(227339400), UINT32_C(97109542),\n+\tUINT32_C(1814799261), UINT32_C(340888197) });\n+\n+  run_test<__gnu_cxx::sfmt1279_64>({ UINT64_C(16431921382083697129),\n+\tUINT64_C(3107599092104940900), UINT64_C(4055245506102959965),\n+\tUINT64_C(16096064917153424198), UINT64_C(14429331498726837109),\n+\tUINT64_C(9539664361920633782), UINT64_C(1435296568185387099),\n+\tUINT64_C(15922567183295047131), UINT64_C(641988285517426228),\n+\tUINT64_C(15936274870984512675) });\n+\n+  run_test<__gnu_cxx::sfmt2281>({ UINT32_C(2662391944), UINT32_C(1176696104),\n+\tUINT32_C(3587947451), UINT32_C(4098993357), UINT32_C(3140998698),\n+\tUINT32_C(870759742), UINT32_C(623529127), UINT32_C(3458807285),\n+\tUINT32_C(3341615957), UINT32_C(195614711) });\n+\n+  run_test<__gnu_cxx::sfmt2281_64>({ UINT64_C(16747191622237074632),\n+\tUINT64_C(15804170396401370381), UINT64_C(3395175278324920203),\n+\tUINT64_C(1541877340159274442), UINT64_C(14176322102994316687),\n+\tUINT64_C(5130618305074712143), UINT64_C(6769693652413407081),\n+\tUINT64_C(17733765687477661079), UINT64_C(5189766940360047353),\n+\tUINT64_C(1333654688569723389) });\n+\n+  run_test<__gnu_cxx::sfmt4253>({ UINT32_C(90342133), UINT32_C(1083987943),\n+\tUINT32_C(1785481425), UINT32_C(1921212667), UINT32_C(3164342992),\n+\tUINT32_C(1489324569), UINT32_C(603530523), UINT32_C(952851722),\n+\tUINT32_C(2380944844), UINT32_C(3335854133) });\n+\n+  run_test<__gnu_cxx::sfmt4253_64>({ UINT64_C(11570915401962514263),\n+\tUINT64_C(206693220452528225), UINT64_C(16553299974633247759),\n+\tUINT64_C(1069562842508952901), UINT64_C(7203975672387749585),\n+\tUINT64_C(7552781925224963166), UINT64_C(16865729458807008705),\n+\tUINT64_C(7848963629493506078), UINT64_C(9282397173969292817),\n+\tUINT64_C(10738488504584559289) });\n+\n+  run_test<__gnu_cxx::sfmt11213>({ UINT32_C(2072997009), UINT32_C(1332330347),\n+\tUINT32_C(179681555), UINT32_C(2315290438), UINT32_C(2429393974),\n+\tUINT32_C(509881964), UINT32_C(3807607878), UINT32_C(3055319970),\n+\tUINT32_C(671840881), UINT32_C(3477325874) });\n+\n+  run_test<__gnu_cxx::sfmt11213_64>({ UINT64_C(373867573626408653),\n+\tUINT64_C(4732829340233638861), UINT64_C(16174630176505735656),\n+\tUINT64_C(10063018133994900869), UINT64_C(17308645173308419196),\n+\tUINT64_C(11091353816581371951), UINT64_C(15078420471318089727),\n+\tUINT64_C(17965717592743818706), UINT64_C(12301543162252389155),\n+\tUINT64_C(1724943167823308511) });\n+\n+  run_test<__gnu_cxx::sfmt19937>({ UINT32_C(4002809368), UINT32_C(421169044),\n+\tUINT32_C(1112642589), UINT32_C(3076213779), UINT32_C(3387033971),\n+\tUINT32_C(2499610950), UINT32_C(3057240914), UINT32_C(1662679783),\n+\tUINT32_C(461224431), UINT32_C(1168395933) });\n+\n+  run_test<__gnu_cxx::sfmt19937_64>({ UINT64_C(8032857516355555296),\n+\tUINT64_C(14023605983059313116), UINT64_C(1032336061815461376),\n+\tUINT64_C(9840995337876562612), UINT64_C(9869256223029203587),\n+\tUINT64_C(12227975697177267636), UINT64_C(12728115115844186033),\n+\tUINT64_C(7752058479783205470), UINT64_C(729733219713393087),\n+\tUINT64_C(12954017801239007622) });\n+\n+  run_test<__gnu_cxx::sfmt44497>({ UINT32_C(1483092082), UINT32_C(1895679637),\n+\tUINT32_C(9122740), UINT32_C(635864575), UINT32_C(320732971),\n+\tUINT32_C(4253159584), UINT32_C(30097521), UINT32_C(839233316),\n+\tUINT32_C(1431693534), UINT32_C(645981752) });\n+\n+  run_test<__gnu_cxx::sfmt44497_64>({ UINT64_C(6246103978016445638),\n+\tUINT64_C(4198275826138953222), UINT64_C(12473679170573289212),\n+\tUINT64_C(14745709982748360209), UINT64_C(3630790792408208113),\n+\tUINT64_C(4195294399578350499), UINT64_C(3742595698794327253),\n+\tUINT64_C(17388385867517445933), UINT64_C(4261866397667814669),\n+\tUINT64_C(17394085161690598095) });\n+\n+  run_test<__gnu_cxx::sfmt86243>({ UINT32_C(3910985535), UINT32_C(100094501),\n+\tUINT32_C(3120362616), UINT32_C(1854432382), UINT32_C(314688154),\n+\tUINT32_C(522122712), UINT32_C(3026095676), UINT32_C(3681962735),\n+\tUINT32_C(1851548627), UINT32_C(2153846465) });\n+\n+  run_test<__gnu_cxx::sfmt86243_64>({ UINT64_C(250135615696586029),\n+\tUINT64_C(4836277875486422184), UINT64_C(12389320296183057446),\n+\tUINT64_C(7983028875884559442), UINT64_C(10079555227308335361),\n+\tUINT64_C(14829333386540244214), UINT64_C(12159744972103351172),\n+\tUINT64_C(4932579842314286356), UINT64_C(5200375244476537050),\n+\tUINT64_C(11795681221121010641) });\n+\n+  run_test<__gnu_cxx::sfmt132049>({ UINT32_C(1551023420), UINT32_C(1462317554),\n+\tUINT32_C(2882528449), UINT32_C(1136299843), UINT32_C(292840589),\n+\tUINT32_C(1307775247), UINT32_C(463274356), UINT32_C(1430357686),\n+\tUINT32_C(3907607055), UINT32_C(3462509184) });\n+\n+  run_test<__gnu_cxx::sfmt132049_64>({ UINT64_C(649482638765113922),\n+\tUINT64_C(14205859353699897918), UINT64_C(14077261854908137257),\n+\tUINT64_C(9564785861212212042), UINT64_C(7310747921257808846),\n+\tUINT64_C(13759009477111470372), UINT64_C(11942123860149328831),\n+\tUINT64_C(12868386070200572127), UINT64_C(18348617059674004332),\n+\tUINT64_C(4233208019331956061) });\n+\n+  run_test<__gnu_cxx::sfmt216091>({ UINT32_C(4171954654), UINT32_C(2938491210),\n+\tUINT32_C(1356393891), UINT32_C(3558249995), UINT32_C(3711769979),\n+\tUINT32_C(3434953144), UINT32_C(1601628304), UINT32_C(2187495640),\n+\tUINT32_C(1762169715), UINT32_C(2141213778) });\n+\n+  run_test<__gnu_cxx::sfmt216091_64>({ UINT64_C(11322404276387828766),\n+\tUINT64_C(9653391575000195546), UINT64_C(1767839622905368464),\n+\tUINT64_C(1690838241348740821), UINT64_C(817628268513271254),\n+\tUINT64_C(15111277786569319196), UINT64_C(15817118810543358764),\n+\tUINT64_C(5639001693408668083), UINT64_C(9959854003669400568),\n+\tUINT64_C(13675983279642398887) });\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1926958ea4e97534db847d05a21929c494141a90", "filename": "libstdc++-v3/testsuite/26_numerics/random/simd_fast_mersenne_twister_engine/cons/seed1.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Fcons%2Fseed1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Fcons%2Fseed1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Fcons%2Fseed1.cc?ref=1860430ab5868a9c0baa626e0bccc16a49f3c80e", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+// 2012-08-28  Ulrich Drepper  <drepper@gmail.com>, adapted for SFMT\n+//\n+// Copyright (C) 2008, 2009, 2010, 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+\n+void\n+test01()\n+{\n+  unsigned long seed = 2;\n+  __gnu_cxx::simd_fast_mersenne_twister_engine<\n+    uint64_t, 607, 2,\n+    15, 3, 13, 3,\n+    0xfdff37ffU, 0xef7f3f7dU,\n+    0xff777b7dU, 0x7ff7fb2fU,\n+    0x00000001U, 0x00000000U,\n+    0x00000000U, 0x5986f054U> x(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "464512c4521bade809fd99f96bbd447bafa483d6", "filename": "libstdc++-v3/testsuite/26_numerics/random/simd_fast_mersenne_twister_engine/cons/seed2.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Fcons%2Fseed2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Fcons%2Fseed2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Fcons%2Fseed2.cc?ref=1860430ab5868a9c0baa626e0bccc16a49f3c80e", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+// 2012-08-28  Ulrich Drepper  <drepper@gmail.com>, adapted for SFMT\n+//\n+// Copyright (C) 2008, 2009, 2010, 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+\n+void\n+test01()\n+{\n+  double seed = 2.0;\n+  __gnu_cxx::simd_fast_mersenne_twister_engine<\n+    uint64_t, 607, 2,\n+    15, 3, 13, 3,\n+    0xfdff37ffU, 0xef7f3f7dU,\n+    0xff777b7dU, 0x7ff7fb2fU,\n+    0x00000001U, 0x00000000U,\n+    0x00000000U, 0x5986f054U> x(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4820fa493d91bb8976028dd888864b4bf5453217", "filename": "libstdc++-v3/testsuite/26_numerics/random/simd_fast_mersenne_twister_engine/cons/seed_seq.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Fcons%2Fseed_seq.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Fcons%2Fseed_seq.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Fcons%2Fseed_seq.cc?ref=1860430ab5868a9c0baa626e0bccc16a49f3c80e", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-02-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+// 2012-08-28  Ulrich Drepper  <drepper@gmail.com>, adapted for SFMT\n+//\n+// Copyright (C) 2010, 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+\n+void\n+test01()\n+{\n+  std::seed_seq seed;\n+  __gnu_cxx::simd_fast_mersenne_twister_engine<\n+    uint32_t, 607, 2,\n+    15, 3, 13, 3,\n+    0xfdff37ffU, 0xef7f3f7dU,\n+    0xff777b7dU, 0x7ff7fb2fU,\n+    0x00000001U, 0x00000000U,\n+    0x00000000U, 0x5986f054U> x(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "80022a68d89ae17cacbc43357ebbab438251a83c", "filename": "libstdc++-v3/testsuite/26_numerics/random/simd_fast_mersenne_twister_engine/operators/equal.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Foperators%2Fequal.cc?ref=1860430ab5868a9c0baa626e0bccc16a49f3c80e", "patch": "@@ -0,0 +1,49 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+// 2012-08-28  Ulrich Drepper  <drepper@gmail.com>, adapted for SFMT\n+//\n+// Copyright (C) 2008, 2009, 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.3.2 Class template mersenne_twister_engine [rand.eng.mers]\n+// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::sfmt19937 u, v;\n+\n+  VERIFY( u == v );\n+\n+  u.discard(100);\n+  v.discard(100);\n+\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "15aaf127814c9094431efa288ed12990fad905d8", "filename": "libstdc++-v3/testsuite/26_numerics/random/simd_fast_mersenne_twister_engine/operators/inequal.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Foperators%2Finequal.cc?ref=1860430ab5868a9c0baa626e0bccc16a49f3c80e", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+// 2012-08-28  Ulrich Drepper  <drepper@gmail.com>, adapted for SFMT\n+//\n+// Copyright (C) 2010, 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.3.2 Class template mersenne_twister_engine [rand.eng.mers]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::sfmt19937 u, v;\n+\n+  VERIFY( !(u != v) );\n+\n+  u.discard(100);\n+  v.discard(100);\n+\n+  VERIFY( !(u != v) );\n+\n+  v.discard(1);\n+\n+  VERIFY( u != v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ddc62b5605e1fd1a1ee8c86c82583f6669f3a24a", "filename": "libstdc++-v3/testsuite/26_numerics/random/simd_fast_mersenne_twister_engine/operators/serialize.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1860430ab5868a9c0baa626e0bccc16a49f3c80e/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Foperators%2Fserialize.cc?ref=1860430ab5868a9c0baa626e0bccc16a49f3c80e", "patch": "@@ -0,0 +1,66 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+// 2012-08-28  Ulrich Drepper  <drepper@gmail.com>, adapted for SFMT\n+//\n+// Copyright (C) 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.3.2 Class template mersenne_twister_engine [rand.eng.mers]\n+// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+\n+#include <sstream>\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  __gnu_cxx::sfmt19937 u, v;\n+\n+  u(); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+  for (unsigned i = 0; i < 1000; ++i)\n+    VERIFY( u() == v() );\n+\n+  str.clear();\n+  str << v;\n+\n+  u();\n+  u();\n+  u();\n+\n+  str >> u;\n+  VERIFY( u == v );\n+  for (unsigned i = 0; i < 1000; ++i)\n+    VERIFY( u() == v() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}