{"sha": "8926bd5d5c308154694122957e2a54c965ebee08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkyNmJkNWQ1YzMwODE1NDY5NDEyMjk1N2UyYTU0Yzk2NWViZWUwOA==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-11-14T11:11:18Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-11-14T11:11:18Z"}, "message": "In gcc/objc/: 2010-11-14 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/objc/:\n2010-11-14  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * objc-act.c (objc_add_property_declaration): Check that the decl\n        we received from the parser is a FIELD_DECL; reject array and\n        bitfield properties.  Convert the warning when a property is\n        readonly and a setter is specified into an error.  Convert errors\n        when a property declaration does not match a property declaration\n        in a superclass into warnings.\n        (objc_add_synthesize_declaration_for_property): Use\n        DECL_BIT_FIELD_TYPE to determine the type of an instance variable\n        if it is a bitfield.  Throw an error if we are asked to synthesize\n        setters/getters for a bitfield instance variable but the property\n        is not appropriate - it must be assign and nonatomic.  If the\n        property is readonly, allow the instance variable type to be a\n        specialization of the property type.\n        (objc_type_valid_for_messaging): Fixed returning 'false' for a\n        Class qualified with a protocol when the 'accept_classes' argument\n        is 'false'.\n\nIn gcc/testsuite/:\n2010-11-14  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * objc.dg/property/at-property-21.m: New.\n        * objc.dg/property/at-property-22.m: New.\n        * objc.dg/property/at-property-23.m: New.       \n        * objc.dg/property/synthesize-9.m: New.\n        * objc.dg/property/synthesize-10.m: New.\n        * objc.dg/property/synthesize-11.m: New.        \n        * obj-c++.dg/property/at-property-21.mm: New.\n        * obj-c++.dg/property/at-property-22.mm: New.\n        * obj-c++.dg/property/at-property-23.mm: New.   \n        * obj-c++.dg/property/synthesize-9.mm: New.\n        * obj-c++.dg/property/synthesize-10.mm: New.\n        * obj-c++.dg/property/synthesize-11.mm: New.    \n\n        * objc.dg/property/at-property-4.m: Updated to match new compiler\n        where some errors have been converted into warnings and vice versa.\n        * objc.dg/property/at-property-16.m: Same change.\n        * objc.dg/property/at-property-18.m: Same change.\n        * objc.dg/property/property-neg-5.m: Same change.\n        * obj-c++.dg/property/at-property-4.mm: Same change.\n        * obj-c++.dg/property/at-property-16.mm: Same change.\n        * obj-c++.dg/property/at-property-18.mm: Same change.\n        * obj-c++.dg/property/property-neg-5.mm: Same change.\n        \n        * obj-c++.dg/property/dynamic-2.mm: Enable tests that were\n        commented out because of testsuite problems; I found out that\n        using dg-warning instead of dg-message gets them to work.\n        * obj-c++.dg/property/property-neg-3.mm: Same change.\n        * obj-c++.dg/property/synthesize-6.mm: Same change.\n        * obj-c++.dg/property/at-property-5.mm: Same change.    \n        * obj-c++.dg/property/at-property-14.mm: Same change.   \n        * obj-c++.dg/property/at-property-18.mm: Same change.\n        * obj-c++.dg/property/at-property-16.mm: Same change (in this file,\n        some tests still do not work due to some other testsuite issue).\n\nFrom-SVN: r166730", "tree": {"sha": "b6f11702f34e4302b1b845cbdea6c13f0797e1f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6f11702f34e4302b1b845cbdea6c13f0797e1f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8926bd5d5c308154694122957e2a54c965ebee08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8926bd5d5c308154694122957e2a54c965ebee08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8926bd5d5c308154694122957e2a54c965ebee08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8926bd5d5c308154694122957e2a54c965ebee08/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8a7a250d322e4913add44c4bd6d854d25650d389", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a7a250d322e4913add44c4bd6d854d25650d389", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a7a250d322e4913add44c4bd6d854d25650d389"}], "stats": {"total": 1091, "additions": 979, "deletions": 112}, "files": [{"sha": "9dfc4f9572111483adc23703eb3b30e5cc314cb9", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -1,3 +1,22 @@\n+2010-11-14  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc-act.c (objc_add_property_declaration): Check that the decl\n+\twe received from the parser is a FIELD_DECL; reject array and\n+\tbitfield properties.  Convert the warning when a property is\n+\treadonly and a setter is specified into an error.  Convert errors\n+\twhen a property declaration does not match a property declaration\n+\tin a superclass into warnings.\n+\t(objc_add_synthesize_declaration_for_property): Use\n+\tDECL_BIT_FIELD_TYPE to determine the type of an instance variable\n+\tif it is a bitfield.  Throw an error if we are asked to synthesize\n+\tsetters/getters for a bitfield instance variable but the property\n+\tis not appropriate - it must be assign and nonatomic.  If the\n+\tproperty is readonly, allow the instance variable type to be a\n+\tspecialization of the property type.\n+\t(objc_type_valid_for_messaging): Fixed returning 'false' for a\n+\tClass qualified with a protocol when the 'accept_classes' argument\n+\tis 'false'.\n+\n 2010-11-13  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-act.c (objc_get_protocol_qualified_type): detect cases"}, {"sha": "da97e14ced27e802b21a2602e941c5753aa12e9c", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 97, "deletions": 17, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -948,8 +948,7 @@ objc_add_property_declaration (location_t location, tree decl,\n \n   if (parsed_property_readonly && parsed_property_setter_ident)\n     {\n-      /* Maybe this should be an error ?  The Apple documentation says it is a warning.  */\n-      warning_at (location, 0, \"%<readonly%> attribute conflicts with %<setter%> attribute\");\n+      error_at (location, \"%<readonly%> attribute conflicts with %<setter%> attribute\");\n       property_readonly = false;\n     }\n \n@@ -989,16 +988,43 @@ objc_add_property_declaration (location_t location, tree decl,\n   /* At this point we know that we are either in an interface, a\n      category, or a protocol.  */\n \n-  /* Check that the property does not have an initial value specified.\n-     This should never happen as the parser doesn't allow this, but\n-     it's just in case.  */\n-  if (DECL_INITIAL (decl))\n+  /* We expect a FIELD_DECL from the parser.  Make sure we didn't get\n+     something else, as that would confuse the checks below.  */\n+  if (TREE_CODE (decl) != FIELD_DECL)\n+    {\n+      error_at (location, \"invalid property declaration\");\n+      return;      \n+    }\n+\n+  /* Do some spot-checks for the most obvious invalid types.  */\n+\n+  if (TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE)\n     {\n-      error_at (location, \"property can not have an initial value\");\n+      error_at (location, \"property can not be an array\");\n       return;\n     }\n \n-  /* TODO: Check that the property type is an Objective-C object or a \"POD\".  */\n+  /* The C++/ObjC++ parser seems to reject the ':' for a bitfield when\n+     parsing, while the C/ObjC parser accepts it and gives us a\n+     FIELD_DECL with a DECL_INITIAL set.  So we use the DECL_INITIAL\n+     to check for a bitfield when doing ObjC.  */\n+#ifndef OBJCPLUS\n+  if (DECL_INITIAL (decl))\n+    {\n+      /* A @property is not an actual variable, but it is a way to\n+\t describe a pair of accessor methods, so its type (which is\n+\t the type of the return value of the getter and the first\n+\t argument of the setter) can't be a bitfield (as return values\n+\t and arguments of functions can not be bitfields).  The\n+\t underlying instance variable could be a bitfield, but that is\n+\t a different matter.  */\n+      error_at (location, \"property can not be a bit-field\");\n+      return;      \n+    }\n+#endif\n+\n+  /* TODO: Check that the property type is an Objective-C object or a\n+     \"POD\".  */\n \n   /* Implement -Wproperty-assign-default (which is enabled by default).  */\n   if (warn_property_assign_default\n@@ -1136,7 +1162,8 @@ objc_add_property_declaration (location_t location, tree decl,\n \t  \n       if (PROPERTY_NONATOMIC (x) != parsed_property_nonatomic)\n \t{\n-\t  error_at (location, \"'nonatomic' attribute of property %qD conflicts with previous declaration\", decl);\n+\t  warning_at (location, 0,\n+\t\t      \"'nonatomic' attribute of property %qD conflicts with previous declaration\", decl);\n       \n \t  if (original_location != UNKNOWN_LOCATION)\n \t    inform (original_location, \"originally specified here\");\n@@ -1145,7 +1172,8 @@ objc_add_property_declaration (location_t location, tree decl,\n \n       if (PROPERTY_GETTER_NAME (x) != parsed_property_getter_ident)\n \t{\n-\t  error_at (location, \"'getter' attribute of property %qD conflicts with previous declaration\", decl);\n+\t  warning_at (location, 0,\n+\t\t      \"'getter' attribute of property %qD conflicts with previous declaration\", decl);\n       \n \t  if (original_location != UNKNOWN_LOCATION)\n \t    inform (original_location, \"originally specified here\");\n@@ -1157,7 +1185,8 @@ objc_add_property_declaration (location_t location, tree decl,\n \t{\n \t  if (PROPERTY_SETTER_NAME (x) != parsed_property_setter_ident)\n \t    {\n-\t      error_at (location, \"'setter' attribute of property %qD conflicts with previous declaration\", decl);\n+\t      warning_at (location, 0,\n+\t\t\t  \"'setter' attribute of property %qD conflicts with previous declaration\", decl);\n \t      \n \t      if (original_location != UNKNOWN_LOCATION)\n \t\tinform (original_location, \"originally specified here\");\n@@ -1167,7 +1196,8 @@ objc_add_property_declaration (location_t location, tree decl,\n \n       if (PROPERTY_ASSIGN_SEMANTICS (x) != property_assign_semantics)\n \t{\n-\t  error_at (location, \"assign semantics attributes of property %qD conflict with previous declaration\", decl);\n+\t  warning_at (location, 0,\n+\t\t      \"assign semantics attributes of property %qD conflict with previous declaration\", decl);\n       \n \t  if (original_location != UNKNOWN_LOCATION)\n \t    inform (original_location, \"originally specified here\");\n@@ -1177,7 +1207,8 @@ objc_add_property_declaration (location_t location, tree decl,\n       /* It's ok to have a readonly property that becomes a readwrite, but not vice versa.  */\n       if (PROPERTY_READONLY (x) == 0  &&  property_readonly == 1)\n \t{\n-\t  error_at (location, \"'readonly' attribute of property %qD conflicts with previous declaration\", decl);\n+\t  warning_at (location, 0,\n+\t\t      \"'readonly' attribute of property %qD conflicts with previous declaration\", decl);\n       \n \t  if (original_location != UNKNOWN_LOCATION)\n \t    inform (original_location, \"originally specified here\");\n@@ -9854,15 +9885,27 @@ objc_add_synthesize_declaration_for_property (location_t location, tree interfac\n      instance variable is only used in one synthesized property).  */\n   {\n     tree ivar = is_ivar (CLASS_IVARS (interface), ivar_name);\n+    tree type_of_ivar;\n     if (!ivar)\n       {\n \terror_at (location, \"ivar %qs used by %<@synthesize%> declaration must be an existing ivar\", \n \t\t  IDENTIFIER_POINTER (property_name));\n \treturn;\n       }\n \n-    /* If the instance variable has a different C type, we warn.  */\n-    if (!comptypes (TREE_TYPE (property), TREE_TYPE (ivar)))\n+    if (DECL_BIT_FIELD_TYPE (ivar))\n+      type_of_ivar = DECL_BIT_FIELD_TYPE (ivar);\n+    else\n+      type_of_ivar = TREE_TYPE (ivar);\n+    \n+    /* If the instance variable has a different C type, we throw an error ...  */\n+    if (!comptypes (TREE_TYPE (property), type_of_ivar)\n+\t/* ... unless the property is readonly, in which case we allow\n+\t   the instance variable to be more specialized (this means we\n+\t   can generate the getter all right and it works).  */\n+\t&& (!PROPERTY_READONLY (property)\n+\t    || !objc_compare_types (TREE_TYPE (property),\n+\t\t\t\t    type_of_ivar, -5, NULL_TREE)))\n       {\n \tlocation_t original_location = DECL_SOURCE_LOCATION (ivar);\n \t\n@@ -9873,6 +9916,43 @@ objc_add_synthesize_declaration_for_property (location_t location, tree interfac\n \tif (original_location != UNKNOWN_LOCATION)\n \t  inform (original_location, \"originally specified here\");\n       }\n+\n+    /* If the instance variable is a bitfield, the property must be\n+       'assign', 'nonatomic' because the runtime getter/setter helper\n+       do not work with bitfield instance variables.  */\n+    if (DECL_BIT_FIELD_TYPE (ivar))\n+      {\n+\t/* If there is an error, we return and not generate any\n+\t   getter/setter because trying to set up the runtime\n+\t   getter/setter helper calls with bitfields is at high risk\n+\t   of ICE.  */\n+\n+\tif (PROPERTY_ASSIGN_SEMANTICS (property) != OBJC_PROPERTY_ASSIGN)\n+\t  {\n+\t    location_t original_location = DECL_SOURCE_LOCATION (ivar);\n+\t    \n+\t    error_at (location, \"'assign' property %qs is using bit-field instance variable %qs\",\n+\t\t      IDENTIFIER_POINTER (property_name),\n+\t\t      IDENTIFIER_POINTER (ivar_name));\n+\t\n+\t    if (original_location != UNKNOWN_LOCATION)\n+\t      inform (original_location, \"originally specified here\");\n+\t    return;\n+\t  }\n+\n+\tif (!PROPERTY_NONATOMIC (property))\n+\t  {\n+\t    location_t original_location = DECL_SOURCE_LOCATION (ivar);\n+\t    \n+\t    error_at (location, \"'atomic' property %qs is using bit-field instance variable %qs\",\n+\t\t      IDENTIFIER_POINTER (property_name),\n+\t\t      IDENTIFIER_POINTER (ivar_name));\n+\t    \n+\t    if (original_location != UNKNOWN_LOCATION)\n+\t      inform (original_location, \"originally specified here\");\n+\t    return;\n+\t  }\n+      }\n   }\n \n   /* Check that no other property is using the same instance\n@@ -12566,8 +12646,8 @@ objc_type_valid_for_messaging (tree type, bool accept_classes)\n   if (objc_is_object_id (type))\n     return true;\n \n-  if (accept_classes && objc_is_class_id (type))\n-    return true;\n+  if (objc_is_class_id (type))\n+    return accept_classes;\n \n   if (TYPE_HAS_OBJC_INFO (type))\n     return true;"}, {"sha": "5e1989464ff4f5c092fdd56c8b0d548c51d8555b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -1,3 +1,39 @@\n+2010-11-14  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc.dg/property/at-property-21.m: New.\n+\t* objc.dg/property/at-property-22.m: New.\n+\t* objc.dg/property/at-property-23.m: New.\t\n+\t* objc.dg/property/synthesize-9.m: New.\n+\t* objc.dg/property/synthesize-10.m: New.\n+\t* objc.dg/property/synthesize-11.m: New.\t\n+\t* obj-c++.dg/property/at-property-21.mm: New.\n+\t* obj-c++.dg/property/at-property-22.mm: New.\n+\t* obj-c++.dg/property/at-property-23.mm: New.\t\n+\t* obj-c++.dg/property/synthesize-9.mm: New.\n+\t* obj-c++.dg/property/synthesize-10.mm: New.\n+\t* obj-c++.dg/property/synthesize-11.mm: New.\t\n+\n+\t* objc.dg/property/at-property-4.m: Updated to match new compiler\n+\twhere some errors have been converted into warnings and vice versa.\n+\t* objc.dg/property/at-property-16.m: Same change.\n+\t* objc.dg/property/at-property-18.m: Same change.\n+\t* objc.dg/property/property-neg-5.m: Same change.\n+\t* obj-c++.dg/property/at-property-4.mm: Same change.\n+\t* obj-c++.dg/property/at-property-16.mm: Same change.\n+\t* obj-c++.dg/property/at-property-18.mm: Same change.\n+\t* obj-c++.dg/property/property-neg-5.mm: Same change.\n+\t\n+\t* obj-c++.dg/property/dynamic-2.mm: Enable tests that were\n+\tcommented out because of testsuite problems; I found out that\n+\tusing dg-warning instead of dg-message gets them to work.\n+\t* obj-c++.dg/property/property-neg-3.mm: Same change.\n+\t* obj-c++.dg/property/synthesize-6.mm: Same change.\n+\t* obj-c++.dg/property/at-property-5.mm: Same change.\t\n+\t* obj-c++.dg/property/at-property-14.mm: Same change.\t\n+\t* obj-c++.dg/property/at-property-18.mm: Same change.\n+\t* obj-c++.dg/property/at-property-16.mm: Same change (in this file,\n+\tsome tests still do not work due to some other testsuite issue).\n+\n 2010-11-13  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/auto20.C: New."}, {"sha": "33744ebfa93d21b3e0f83516b98a7612e946e9ec", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-14.mm", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-14.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-14.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-14.mm?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -9,16 +9,12 @@ @interface MyRootClass\n }\n \n /* Test the warnings on 'assign'.  */\n-/* FIXME - there is a problem with the testuite in running the following test.  The compiler\n-   generates the messages, but the testsuite still complains.  */\n-/*@property id property_a; */     /*  dg-warning \"object property .property.a. has no .assign., .retain. or .copy. attribute\"  */\n-\t\t\t      /*  dg-message \".assign. can be unsafe for Objective-C objects\" \"\" { target *-*-* } 12  */\n+@property id property_a;   /*  { dg-warning \"object property .property.a. has no .assign., .retain. or .copy. attribute\" } */\n+\t\t\t   /*  { dg-warning \".assign. can be unsafe for Objective-C objects\" \"\" { target *-*-* } 12 } */\n \n @property (readonly) id property_b; /* No 'assign' warning (assign semantics do not matter if the property is readonly).  */\n @property id *property_c;           /* No 'assign' warning (the type is not an Objective-C object).  */\n @property Class property_d;         /* No 'assign' warning (Classes are static objects so assign semantics do not matter for them).  */\n-/* FIXME - there is a problem with the testuite in running the following test.  The compiler\n-   generates the messages, but the testsuite still complains.  */\n-/*@property MyRootClass *property_e;*/  /*  dg-warning \"object property .property.e. has no .assign., .retain. or .copy. attribute\"  */\n-\t\t\t            /*  dg-message \".assign. can be unsafe for Objective-C objects\" \"\" { target *-*-* } 18  */\n+@property MyRootClass *property_e;  /* { dg-warning \"object property .property.e. has no .assign., .retain. or .copy. attribute\" } */\n+\t\t\t            /* { dg-warning \".assign. can be unsafe for Objective-C objects\" \"\" { target *-*-* } 18 } */\n @end"}, {"sha": "8cab00a7a9a846a8140bc9eb85064e62a6399536", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-16.mm", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-16.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-16.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-16.mm?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -10,15 +10,16 @@ @interface MyRootClass\n {\n   Class isa;\n }\n-@property (assign) id a;\n-@property (retain) id b;\n-@property int c;\n-@property (nonatomic) int d;\n-@property int e;\n-@property int f;\n-@property int g;\n-@property (readonly) int h;\n-@property (readonly,getter=getMe) int i;\n+@property (assign) id a;                  /* { dg-warning \"originally specified here\" } */\n+@property (retain) id b;                  /* { dg-warning \"originally specified here\" } */\n+@property int c;                          /* { dg-warning \"originally specified here\" } */\n+@property (nonatomic) int d;              /* { dg-warning \"originally specified here\" } */\n+/* FIXME: The compiler generates these errors, but the testsuite still fails the tests.  */\n+@property int e;                          /* dg-warning \"originally specified here\" */\n+@property int f;                          /* dg-warning \"originally specified here\" */\n+@property int g;                          /* dg-warning \"originally specified here\" */\n+@property (readonly) int h;               /* Ok */\n+@property (readonly,getter=getMe) int i;  /* { dg-warning \"originally specified here\" } */\n @end\n \n @interface MyClass : MyRootClass\n@@ -32,23 +33,16 @@ @interface MyClass : MyRootClass\n @property (readonly) int h;\n @property (readonly,getter=getMe) int i;\n @end\n-/* FIXME - there is a problem with the testuite in running the following test.  The compiler generates the messages, but the testsuite still complains.  */\n+\n @interface MyClass2 : MyRootClass\n-/* @property (retain) id a; */         /*  dg-error \"assign semantics attributes of property .a. conflict with previous declaration\"  */\n-                                 /*  dg-message \"originally specified here\" \"\" { target *-*-* } 13  */\n-/* @property (assign) id b; */         /*  dg-error \"assign semantics attributes of property .b. conflict with previous declaration\"  */\n-                                 /*  dg-message \"originally specified here\" \"\" { target *-*-* } 14  */\n-/* @property (nonatomic) int c; */     /*  dg-error \".nonatomic. attribute of property .c. conflicts with previous declaration\"  */\n-                                 /*  dg-message \"originally specified here\" \"\" { target *-*-* } 15  */\n-/* @property int d; */                 /*  dg-error \".nonatomic. attribute of property .d. conflicts with previous declaration\"  */\n-                                 /*  dg-message \"originally specified here\" \"\" { target *-*-* } 16  */\n-/* @property (setter=setX:) int e; */  /*  dg-error \".setter. attribute of property .e. conflicts with previous declaration\"  */\n-                                 /*  dg-message \"originally specified here\" \"\" { target *-*-* } 17  */\n-/* @property (getter=x) int f; */      /*  dg-error \".getter. attribute of property .f. conflicts with previous declaration\"  */\n-                                 /*  dg-message \"originally specified here\" \"\" { target *-*-* } 18  */\n-/* @property (readonly) int g; */      /*  dg-error \".readonly. attribute of property .g. conflicts with previous declaration\"  */\n-                                 /*  dg-message \"originally specified here\" \"\" { target *-*-* } 19  */\n+@property (retain) id a;         /* { dg-warning \"assign semantics attributes of property .a. conflict with previous declaration\" } */\n+@property (assign) id b;         /* { dg-warning \"assign semantics attributes of property .b. conflict with previous declaration\" } */\n+@property (nonatomic) int c;     /* { dg-warning \".nonatomic. attribute of property .c. conflicts with previous declaration\" } */\n+@property int d;                 /* { dg-warning \".nonatomic. attribute of property .d. conflicts with previous declaration\" } */\n+/* FIXME: The compiler generates these errors, but the testsuite still fails the tests.  */\n+/*@property (setter=setX:) int e;*/  /*  dg-warning \".setter. attribute of property .e. conflicts with previous declaration\"  */\n+/*@property (getter=x) int f;*/      /*  dg-warning \".getter. attribute of property .f. conflicts with previous declaration\"  */\n+/*@property (readonly) int g;*/      /*  dg-warning \".readonly. attribute of property .g. conflicts with previous declaration\"  */\n @property (readwrite) int h;     /* Ok */\n-/* @property (readonly) int i; */      /*  dg-error \".getter. attribute of property .i. conflicts with previous declaration\"  */\n-                                 /*  dg-message \"originally specified here\" \"\" { target *-*-* } 21  */\n+@property (readonly) int i;      /* { dg-warning \".getter. attribute of property .i. conflicts with previous declaration\" } */\n @end"}, {"sha": "72abb6b76b5ecdfc0253371baf27cbd784850140", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-18.mm", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-18.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-18.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-18.mm?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -24,24 +24,23 @@ @interface MyRootClass\n @property (readonly,getter=getMe) int i;\n @property (nonatomic) float j;\n @end\n-/* FIXME - there is a problem with the testuite in running the following test.  The compiler generates the messages, but the testsuite still complains.  */\n @interface MyRootClass (Category)\n-/*@property (retain) id a; */        /*  dg-error \"assign semantics attributes of property .a. conflict with previous declaration\"  */\n-                                 /*  dg-message \"originally specified here\" \"\" { target *-*-* } 16  */\n-/*@property (assign) id b;  */       /*  dg-error \"assign semantics attributes of property .b. conflict with previous declaration\"  */\n-                                 /*  dg-message \"originally specified here\" \"\" { target *-*-* } 17  */\n-/*@property (nonatomic) int c; */     /*  dg-error \".nonatomic. attribute of property .c. conflicts with previous declaration\"  */\n-                                 /*  dg-message \"originally specified here\" \"\" { target *-*-* } 18  */\n-/*@property int d; */                /*  dg-error \".nonatomic. attribute of property .d. conflicts with previous declaration\"  */\n-                                 /*  dg-message \"originally specified here\" \"\" { target *-*-* } 19  */\n-/*@property (setter=setX:) int e; */ /*  dg-error \".setter. attribute of property .e. conflicts with previous declaration\"  */\n-                                 /*  dg-message \"originally specified here\" \"\" { target *-*-* } 20  */\n-/*@property (getter=x) int f; */     /*  dg-error \".getter. attribute of property .f. conflicts with previous declaration\"  */\n-                                 /*  dg-message \"originally specified here\" \"\" { target *-*-* } 21  */\n-/*@property (readonly) int g; */      /*  dg-error \".readonly. attribute of property .g. conflicts with previous declaration\"  */\n-                                 /*  dg-message \"originally specified here\" \"\" { target *-*-* } 22  */\n-@property (readwrite) int h;    /* Ok */\n-/*@property (readonly) int i; */     /*  dg-error \".getter. attribute of property .i. conflicts with previous declaration\"  */\n-                                 /*  dg-message \"originally specified here\" \"\" { target *-*-* } 24  */\n+@property (retain) id a;         /* { dg-warning \"assign semantics attributes of property .a. conflict with previous declaration\" } */\n+                                 /* { dg-warning \"originally specified here\" \"\" { target *-*-* } 16 } */\n+@property (assign) id b;         /* { dg-warning \"assign semantics attributes of property .b. conflict with previous declaration\" } */\n+                                 /* { dg-warning \"originally specified here\" \"\" { target *-*-* } 17 } */\n+@property (nonatomic) int c;     /* { dg-warning \".nonatomic. attribute of property .c. conflicts with previous declaration\" } */\n+                                 /* { dg-warning \"originally specified here\" \"\" { target *-*-* } 18 } */\n+@property int d;                 /* { dg-warning \".nonatomic. attribute of property .d. conflicts with previous declaration\" } */\n+                                 /* { dg-warning \"originally specified here\" \"\" { target *-*-* } 19 } */\n+@property (setter=setX:) int e;  /* { dg-warning \".setter. attribute of property .e. conflicts with previous declaration\" } */\n+                                 /* { dg-warning \"originally specified here\" \"\" { target *-*-* } 20 } */\n+@property (getter=x) int f;      /* { dg-warning \".getter. attribute of property .f. conflicts with previous declaration\" } */\n+                                 /* { dg-warning \"originally specified here\" \"\" { target *-*-* } 21 } */\n+@property (readonly) int g;      /* { dg-warning \".readonly. attribute of property .g. conflicts with previous declaration\" } */\n+                                 /* { dg-warning \"originally specified here\" \"\" { target *-*-* } 22 } */\n+@property (readwrite) int h;     /* Ok */\n+@property (readonly) int i;      /* { dg-warning \".getter. attribute of property .i. conflicts with previous declaration\" } */\n+                                 /* { dg-warning \"originally specified here\" \"\" { target *-*-* } 24 } */\n @property (nonatomic) float j;   /* Ok */\n @end"}, {"sha": "6106b7ee2aa6fe1305a9761802a4d9b4644f7471", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-21.mm", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-21.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-21.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-21.mm?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -0,0 +1,23 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@protocol MyProtocol\n+- (void) message;\n+@end\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+}\n+\n+/* Test the warnings on 'assign' with protocols.  */\n+@property id <MyProtocol> property_a;      /* { dg-warning \"object property .property.a. has no .assign., .retain. or .copy. attribute\" } */\n+\t\t\t                   /* { dg-warning \".assign. can be unsafe for Objective-C objects\" \"\" { target *-*-* } 16 } */\n+\n+@property MyRootClass <MyProtocol> *property_b; /* { dg-warning \"object property .property.b. has no .assign., .retain. or .copy. attribute\" } */\n+\t\t\t                        /* { dg-warning \".assign. can be unsafe for Objective-C objects\" \"\" { target *-*-* } 19 } */\n+\n+@property Class <MyProtocol> property_c;   /* No 'assign' warning (Classes are static objects so assign semantics do not matter for them). */\n+@end"}, {"sha": "af7f3bc1b4ea89aaa5e6fcf4ca858bed8ceaabad", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-22.mm", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-22.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-22.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-22.mm?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -0,0 +1,172 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+\n+/* Test properties of different types.  */\n+\n+#include <stdlib.h>\n+#include <objc/objc.h>\n+#include <objc/runtime.h>\n+\n+enum colour { Red, Black };\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+}\n++ (id) initialize;\n++ (id) alloc;\n+- (id) init;\n++ (Class) class;\n+@end\n+\n+@implementation MyRootClass\n++ (id) initialize { return self; }\n++ (id) alloc { return class_createInstance (self, 0); }\n+- (id) init { return self; }\n++ (Class) class { return self; }\n+@end\n+\n+\n+@interface MyClass : MyRootClass\n+{\n+  /* A bunch of C types.  */\n+  char         pchar;\n+  short        pshort;\n+  int          pint;\n+  long         plong;\n+  float        pfloat;\n+  double       pdouble;\n+  enum colour  penum;\n+\n+  /* A bunch of pointers to C types.  */\n+  char        *pcharp;\n+  short       *pshortp;\n+  int         *pintp;\n+  long        *plongp;\n+  float       *pfloatp;\n+  double      *pdoublep;\n+  enum colour *penump;\n+\n+  /* A bunch of Objective-C types.  */\n+  id           pid;\n+  Class        pclass;\n+  MyClass     *pMyClassp;\n+}\n+@property (assign) char pchar;\n+@property (assign) short pshort;\n+@property (assign) int pint;\n+@property (assign) long plong;\n+@property (assign) float pfloat;\n+@property (assign) double pdouble;\n+@property (assign) enum colour penum;\n+\n+@property (assign) char *pcharp;\n+@property (assign) short *pshortp;\n+@property (assign) int *pintp;\n+@property (assign) long *plongp;\n+@property (assign) float *pfloatp;\n+@property (assign) double *pdoublep;\n+@property (assign) enum colour *penump;\n+\n+@property (assign) id pid;\n+@property (assign) Class pclass;\n+@property (assign) MyClass *pMyClassp;\n+@end\n+\n+@implementation MyClass\n+@synthesize pchar;\n+@synthesize pshort;\n+@synthesize pint;\n+@synthesize plong;\n+@synthesize pfloat;\n+@synthesize pdouble;\n+@synthesize penum;\n+\n+@synthesize pcharp;\n+@synthesize pshortp;\n+@synthesize pintp;\n+@synthesize plongp;\n+@synthesize pfloatp;\n+@synthesize pdoublep;\n+@synthesize penump;\n+\n+@synthesize pid;\n+@synthesize pclass;\n+@synthesize pMyClassp;\n+@end\n+\n+int main (void)\n+{\n+  MyClass *object = [[MyClass alloc] init];\n+\n+  object.pchar = 1;\n+  if (object.pchar != 1)\n+    abort ();\n+\n+  object.pshort = 2;\n+  if (object.pshort != 2)\n+    abort ();\n+\n+  object.pint = 3;\n+  if (object.pint != 3)\n+    abort ();\n+\n+  object.plong = 4;\n+  if (object.plong != 4)\n+    abort ();\n+\n+  object.pfloat = 0;\n+  if (object.pfloat != 0)\n+    abort ();\n+\n+  object.pdouble = 0;\n+  if (object.pdouble != 0)\n+    abort ();\n+\n+  object.penum = Black;\n+  if (object.penum != Black)\n+    abort ();\n+\n+  object.pcharp = 0;\n+  if (object.pcharp != 0)\n+    abort ();\n+  \n+  object.pshortp = 0;\n+  if (object.pshortp != 0)\n+    abort ();\n+\n+  object.pintp = 0;\n+  if (object.pintp != 0)\n+    abort ();\n+    \n+  object.plongp = 0;\n+  if (object.plongp != 0)\n+    abort ();\n+    \n+  object.pfloatp = 0;\n+  if (object.pfloatp != 0)\n+    abort ();\n+    \n+  object.pdoublep = 0;\n+  if (object.pdoublep != 0)\n+    abort ();\n+    \n+  object.penump = 0;\n+  if (object.penump != 0)\n+    abort ();\n+\n+  object.pid = object;\n+  if (object.pid != object)\n+    abort ();\n+\n+  object.pclass = [MyClass class];\n+  if (object.pclass != [MyClass class])\n+    abort ();\n+\n+  object.pMyClassp = object;\n+  if (object.pMyClassp != object)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "73138f64c4a3cdaf4e555c831839b7e91571d2e7", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-23.mm", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-23.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-23.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-23.mm?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -0,0 +1,18 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+\n+/* Test that properties of type arrays or bitfields are rejected.  */\n+\n+#include <stdlib.h>\n+#include <objc/objc.h>\n+#include <objc/runtime.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+}\n+@property int a[8]; /* { dg-error \"property can not be an array\" } */\n+@property int b:8;  /* { dg-error \"expected\" } */\n+@property int c[];  /* { dg-error \"property can not be an array\" } */\n+                    /* { dg-error \"ISO C.. forbids zero-size array\" \"\" { target *-*-* } 16 } */\n+@end"}, {"sha": "941aab8e33cec418456c544242c0c738efdeade9", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-4.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-4.mm?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -28,7 +28,7 @@ - (void) mySetter2: (int)property;\n /* Now test various problems.  */\n \n @property (readonly, readwrite) int a;    /* { dg-error \".readonly. attribute conflicts with .readwrite. attribute\" } */\n-@property (readonly, setter=mySetterB:) int b; /* { dg-warning \".readonly. attribute conflicts with .setter. attribute\" } */\n+@property (readonly, setter=mySetterB:) int b; /* { dg-error \".readonly. attribute conflicts with .setter. attribute\" } */\n \n @property (assign, retain) id c;          /* { dg-error \".assign. attribute conflicts with .retain. attribute\" } */\n @property (assign, copy) id d;            /* { dg-error \".assign. attribute conflicts with .copy. attribute\" } */"}, {"sha": "92dd114c879251ac80f11e357fb147794b98ed3d", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-5.mm", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-5.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-5.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-5.mm?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -17,10 +17,8 @@ @interface MyRootClass\n }\n \n /* Test various error messages.  */\n-/* FIXME - there is a problem with the testuite in running the following test.  The compiler\n-   generates the messages, but the testsuite still complains.  */\n-/*@property id property_a;*/      /*  dg-warning \"object property .property.a. has no .assign., .retain. or .copy. attribute\"  */\n-\t\t\t      /*  dg-message \".assign. can be unsafe for Objective-C objects\" \"\" { target *-*-* } 20  */\n+@property id property_a;      /* { dg-warning \"object property .property.a. has no .assign., .retain. or .copy. attribute\" } */\n+\t\t\t      /* { dg-warning \".assign. can be unsafe for Objective-C objects\" \"\" { target *-*-* } 20 } */\n @property int property_b = 4; /* { dg-error \"expected\" } */\n @property (retain) int property_c; /* { dg-error \".retain. attribute is only valid for Objective-C objects\" } */\n @property (copy) int property_d; /* { dg-error \".copy. attribute is only valid for Objective-C objects\" } */\n@@ -29,10 +27,8 @@ @interface MyRootClass\n @property (retain) id property_f;\n @property (retain) id property_g;\n @property (retain) id property_h;\n-/* FIXME - there is a problem with the testuite in running the following test.  The compiler\n-   generates the messages, but the testsuite still complains.  */\n-/*@property (retain) id property_e;*/ /*  dg-error \"redeclaration of property .property_e.\"  */\n-   \t\t\t          /*  dg-message \"originally specified here\" \"\" { target *-*-* } 26  */\n+@property (retain) id property_e; /* { dg-error \"redeclaration of property .property_e.\" } */\n+   \t\t\t          /* { dg-warning \"originally specified here\" \"\" { target *-*-* } 26 } */\n @end\n \n @property id test; /* { dg-error \"misplaced .@property. Objective-C.. construct\" } */"}, {"sha": "39ef6b2b7d7e31983d613acbf4dd31fe3205931e", "filename": "gcc/testsuite/obj-c++.dg/property/dynamic-2.mm", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdynamic-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdynamic-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdynamic-2.mm?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -39,9 +39,7 @@ @interface AnotherTest : MyRootClass\n \n @implementation AnotherTest\n @dynamic one;\n-/* FIXME - there is a problem with the testuite in running the following test.  The compiler\n-   generates the messages, but the testsuite still complains.  */\n-/*@dynamic one;*/ /*  dg-error \"property .one. already specified in .@dynamic.\" */\n-              /*  dg-message \"originally specified here\" \"\" { target *-*-* } 40 */\n+@dynamic one; /* { dg-error \"property .one. already specified in .@dynamic.\" } */\n+              /* { dg-warning \"originally specified here\" \"\" { target *-*-* } 41 } */\n @dynamic three; /* { dg-error \"no declaration of property .three. found in the interface\" } */\n @end"}, {"sha": "a298bf015721d54aa35fa7089b0b0353ab7d2827", "filename": "gcc/testsuite/obj-c++.dg/property/property-neg-3.mm", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-3.mm?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -9,8 +9,6 @@ @interface Person\n \n @implementation  Person\n @dynamic firstName;\n-/* FIXME - there is a problem with the testuite in running the following test.  The compiler\n-   generates the messages, but the testsuite still complains.  */\n-/*@synthesize firstName;*/ /*  dg-error \"property .firstName. already specified in .@dynamic.\"  */\n-                       /*  dg-message \"originally specified here\" \"\" { target *-*-* } 11  */\n+@synthesize firstName; /* { dg-error \"property .firstName. already specified in .@dynamic.\" } */\n+                       /* { dg-warning \"originally specified here\" \"\" { target *-*-* } 11 } */\n @end"}, {"sha": "464470cba7b80718240f1f2a2c0baac508200343", "filename": "gcc/testsuite/obj-c++.dg/property/property-neg-5.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-5.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-5.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-5.mm?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n \n @interface Foo\n-@property ( readonly, getter = HELLO, setter = THERE : ) int value; /* { dg-warning \".readonly. attribute conflicts with .setter. attribute\" } */\n+@property ( readonly, getter = HELLO, setter = THERE : ) int value; /* { dg-error \".readonly. attribute conflicts with .setter. attribute\" } */\n @end"}, {"sha": "fc4683187df93269956feaf4d6a9dd94c8866754", "filename": "gcc/testsuite/obj-c++.dg/property/synthesize-10.mm", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-10.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-10.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-10.mm?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -0,0 +1,53 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+\n+/* Test @synthesize with bitfield instance variables.  */\n+\n+#include <stdlib.h>\n+#include <objc/objc.h>\n+#include <objc/runtime.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+  int countA : 2;\n+  int countB : 3;\n+  int countC : 4;\n+}\n++ (id) initialize;\n++ (id) alloc;\n+- (id) init;\n+@property (nonatomic) int countA;\n+@property (nonatomic) int countB;\n+@property (nonatomic) int countC;\n+@end\n+\n+@implementation MyRootClass\n++ (id) initialize { return self; }\n++ (id) alloc { return class_createInstance (self, 0); }\n+- (id) init { return self; }\n+@synthesize countA;\n+@synthesize countB;\n+@synthesize countC;\n+@end\n+\n+int main (void)\n+{\n+  MyRootClass *object = [[MyRootClass alloc] init];\n+\n+  object.countA = 1;\n+  object.countB = 3;\n+  object.countC = 4;\n+\n+  if (object.countA != 1)\n+    abort ();\n+\n+  if (object.countB != 3)\n+    abort ();\n+\n+  if (object.countC != 4)\n+    abort ();\n+  \n+  return 0;\n+}"}, {"sha": "5d808d038f6feb7fc56147c2bc3970e2c5877ea8", "filename": "gcc/testsuite/obj-c++.dg/property/synthesize-11.mm", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-11.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-11.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-11.mm?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -0,0 +1,31 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+\n+/* Test errors when @synthesize is used with bitfield instance variables in an incorrect way.  */\n+\n+#include <stdlib.h>\n+#include <objc/objc.h>\n+#include <objc/runtime.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+  int countA : 2;                  /* { dg-warning \"originally specified here\" } */\n+  int countB : 3;                  /* { dg-warning \"originally specified here\" } */\n+}\n++ (id) initialize;\n++ (id) alloc;\n+- (id) init;\n+@property int countA;       \n+@property (nonatomic) short countB;\n+@end\n+\n+@implementation MyRootClass\n++ (id) initialize { return self; }\n++ (id) alloc { return class_createInstance (self, 0); }\n+- (id) init { return self; }\n+@synthesize countA; /* { dg-error \".atomic. property .countA. is using bit-field instance variable .countA.\" } */\n+@synthesize countB; /* { dg-error \"property .countB. is using instance variable .countB. of incompatible type\" } */\n+@end /* { dg-warning \"incomplete implementation of class\" } */\n+/* { dg-warning \"method definition for ..setCountA.. not found\" \"\" { target *-*-* } 29 } */\n+/* { dg-warning \"method definition for ..countA. not found\" \"\" { target *-*-* } 29 } */"}, {"sha": "f6f5293e41de18005d0d6945c9493bca4002308e", "filename": "gcc/testsuite/obj-c++.dg/property/synthesize-6.mm", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-6.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-6.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-6.mm?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -14,19 +14,17 @@ @interface Test\n @property int v1;\n @property int v2;\n @end\n-#if 0 /* This is a problem in the testsuite; the compiler is fine, but the testsuite still barfs on the following.  */\n @implementation Test\n-@synthesize v1 = v;  /* dg-message \"originally specified here\" */\n-@synthesize v2 = v;  /* dg-error \"property .v2. is using the same instance variable as property .v1.\" */\n+@synthesize v1 = v;  /* { dg-warning \"originally specified here\" } */\n+@synthesize v2 = v;  /* { dg-error \"property .v2. is using the same instance variable as property .v1.\" } */\n @end\n-#endif\n @interface Test2 : Test\n @property int w1;\n @end\n \n @implementation Test2\n @synthesize w1;      /* { dg-error \"ivar .w1. used by .@synthesize. declaration must be an existing ivar\" } */\n @end\n-/* { dg-warning \"incomplete implementation\" \"\" { target *-*-* } 29 } */\n-/* { dg-warning \"method definition for .-setW1:. not found\" \"\" { target *-*-* } 29 } */\n-/* { dg-warning \"method definition for .-w1. not found\" \"\" { target *-*-* } 29 } */\n+/* { dg-warning \"incomplete implementation\" \"\" { target *-*-* } 27 } */\n+/* { dg-warning \"method definition for .-setW1:. not found\" \"\" { target *-*-* } 27 } */\n+/* { dg-warning \"method definition for .-w1. not found\" \"\" { target *-*-* } 27 } */"}, {"sha": "bcf195f9015f523f62ea5a52ad8665e8706bb8a1", "filename": "gcc/testsuite/obj-c++.dg/property/synthesize-9.mm", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-9.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-9.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-9.mm?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -0,0 +1,80 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+\n+/* Test that when using @synthesize with a readonly property, the\n+   instance variable can be a specialization of the property type.  */\n+\n+#include <objc/objc.h>\n+\n+@protocol MyProtocol\n+- (void)aMethod;\n+@end\n+\n+@interface ClassA\n+@end\n+\n+@interface ClassB : ClassA\n+@end\n+\n+\n+/* This is all OK.  */\n+@interface Test\n+{\n+  int v;\n+  float w;\n+  id x;\n+  Test *y;\n+  id <MyProtocol> *z;\n+  ClassA *a;\n+  ClassB *b;\n+  ClassA <MyProtocol> *c;\n+}\n+@property (assign, readonly) int v;\n+@property (assign, readonly) float w;\n+@property (assign, readonly) id x;\n+@property (assign, readonly) Test *y;\n+@property (assign, readonly) id <MyProtocol> *z;\n+@property (assign, readonly) ClassA *a;\n+@property (assign, readonly) ClassB *b;\n+@end\n+\n+@implementation Test\n+@synthesize v;\n+@synthesize w;\n+@synthesize x;\n+@synthesize y;\n+@synthesize z;\n+@synthesize a;\n+@synthesize b;\n+@end\n+\n+\n+/* This is sometimes OK, sometimes not OK.  */\n+@interface Test2\n+{\n+  int v;                   /* { dg-warning \"originally specified here\" } */\n+  float w;                 /* { dg-warning \"originally specified here\" } */\n+  id x;                    /* { dg-warning \"originally specified here\" } */\n+  Test *y;                 \n+  id <MyProtocol> *z;      /* { dg-warning \"originally specified here\" } */\n+  ClassA *a;               /* { dg-warning \"originally specified here\" } */\n+  ClassB *b;               \n+}\n+@property (assign, readonly) float v;\n+@property (assign, readonly) id w;\n+@property (assign, readonly) int x;\n+@property (assign, readonly) id y;\n+@property (assign, readonly) Test *z;\n+@property (assign, readonly) ClassB *a;\n+@property (assign, readonly) ClassA *b;\n+@end\n+\n+@implementation Test2\n+@synthesize v; /* { dg-error \"property .v. is using instance variable .v. of incompatible type\" } */\n+@synthesize w; /* { dg-error \"property .w. is using instance variable .w. of incompatible type\" } */\n+@synthesize x; /* { dg-error \"property .x. is using instance variable .x. of incompatible type\" } */\n+@synthesize y;\n+@synthesize z; /* { dg-error \"property .z. is using instance variable .z. of incompatible type\" } */\n+@synthesize a; /* { dg-error \"property .a. is using instance variable .a. of incompatible type\" } */\n+@synthesize b; \n+@end"}, {"sha": "95f82e41beb7651ebd7251443644689a0ec65a96", "filename": "gcc/testsuite/objc.dg/property/at-property-16.m", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-16.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-16.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-16.m?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -34,22 +34,22 @@ @interface MyClass : MyRootClass\n @end\n \n @interface MyClass2 : MyRootClass\n-@property (retain) id a;         /* { dg-error \"assign semantics attributes of property .a. conflict with previous declaration\" } */\n+@property (retain) id a;         /* { dg-warning \"assign semantics attributes of property .a. conflict with previous declaration\" } */\n                                  /* { dg-message \"originally specified here\" \"\" { target *-*-* } 13 } */\n-@property (assign) id b;         /* { dg-error \"assign semantics attributes of property .b. conflict with previous declaration\" } */\n+@property (assign) id b;         /* { dg-warning \"assign semantics attributes of property .b. conflict with previous declaration\" } */\n                                  /* { dg-message \"originally specified here\" \"\" { target *-*-* } 14 } */\n-@property (nonatomic) int c;     /* { dg-error \".nonatomic. attribute of property .c. conflicts with previous declaration\" } */\n+@property (nonatomic) int c;     /* { dg-warning \".nonatomic. attribute of property .c. conflicts with previous declaration\" } */\n                                  /* { dg-message \"originally specified here\" \"\" { target *-*-* } 15 } */\n-@property int d;                 /* { dg-error \".nonatomic. attribute of property .d. conflicts with previous declaration\" } */\n+@property int d;                 /* { dg-warning \".nonatomic. attribute of property .d. conflicts with previous declaration\" } */\n                                  /* { dg-message \"originally specified here\" \"\" { target *-*-* } 16 } */\n-@property (setter=setX:) int e;  /* { dg-error \".setter. attribute of property .e. conflicts with previous declaration\" } */\n+@property (setter=setX:) int e;  /* { dg-warning \".setter. attribute of property .e. conflicts with previous declaration\" } */\n                                  /* { dg-message \"originally specified here\" \"\" { target *-*-* } 17 } */\n-@property (getter=x) int f;      /* { dg-error \".getter. attribute of property .f. conflicts with previous declaration\" } */\n+@property (getter=x) int f;      /* { dg-warning \".getter. attribute of property .f. conflicts with previous declaration\" } */\n                                  /* { dg-message \"originally specified here\" \"\" { target *-*-* } 18 } */\n-@property (readonly) int g;      /* { dg-error \".readonly. attribute of property .g. conflicts with previous declaration\" } */\n+@property (readonly) int g;      /* { dg-warning \".readonly. attribute of property .g. conflicts with previous declaration\" } */\n                                  /* { dg-message \"originally specified here\" \"\" { target *-*-* } 19 } */\n @property (readwrite) int h;     /* Ok */\n-@property (readonly) int i;      /* { dg-error \".getter. attribute of property .i. conflicts with previous declaration\" } */\n+@property (readonly) int i;      /* { dg-warning \".getter. attribute of property .i. conflicts with previous declaration\" } */\n                                  /* { dg-message \"originally specified here\" \"\" { target *-*-* } 21 } */\n @end\n "}, {"sha": "e6ffb39cbd20135afa23f05d91b0ae04120f2e06", "filename": "gcc/testsuite/objc.dg/property/at-property-18.m", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-18.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-18.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-18.m?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -26,22 +26,22 @@ @interface MyRootClass\n @end\n \n @interface MyRootClass (Category)\n-@property (retain) id a;         /* { dg-error \"assign semantics attributes of property .a. conflict with previous declaration\" } */\n+@property (retain) id a;         /* { dg-warning \"assign semantics attributes of property .a. conflict with previous declaration\" } */\n                                  /* { dg-message \"originally specified here\" \"\" { target *-*-* } 16 } */\n-@property (assign) id b;         /* { dg-error \"assign semantics attributes of property .b. conflict with previous declaration\" } */\n+@property (assign) id b;         /* { dg-warning \"assign semantics attributes of property .b. conflict with previous declaration\" } */\n                                  /* { dg-message \"originally specified here\" \"\" { target *-*-* } 17 } */\n-@property (nonatomic) int c;     /* { dg-error \".nonatomic. attribute of property .c. conflicts with previous declaration\" } */\n+@property (nonatomic) int c;     /* { dg-warning \".nonatomic. attribute of property .c. conflicts with previous declaration\" } */\n                                  /* { dg-message \"originally specified here\" \"\" { target *-*-* } 18 } */\n-@property int d;                 /* { dg-error \".nonatomic. attribute of property .d. conflicts with previous declaration\" } */\n+@property int d;                 /* { dg-warning \".nonatomic. attribute of property .d. conflicts with previous declaration\" } */\n                                  /* { dg-message \"originally specified here\" \"\" { target *-*-* } 19 } */\n-@property (setter=setX:) int e;  /* { dg-error \".setter. attribute of property .e. conflicts with previous declaration\" } */\n+@property (setter=setX:) int e;  /* { dg-warning \".setter. attribute of property .e. conflicts with previous declaration\" } */\n                                  /* { dg-message \"originally specified here\" \"\" { target *-*-* } 20 } */\n-@property (getter=x) int f;      /* { dg-error \".getter. attribute of property .f. conflicts with previous declaration\" } */\n+@property (getter=x) int f;      /* { dg-warning \".getter. attribute of property .f. conflicts with previous declaration\" } */\n                                  /* { dg-message \"originally specified here\" \"\" { target *-*-* } 21 } */\n-@property (readonly) int g;      /* { dg-error \".readonly. attribute of property .g. conflicts with previous declaration\" } */\n+@property (readonly) int g;      /* { dg-warning \".readonly. attribute of property .g. conflicts with previous declaration\" } */\n                                  /* { dg-message \"originally specified here\" \"\" { target *-*-* } 22 } */\n @property (readwrite) int h;     /* Ok */\n-@property (readonly) int i;      /* { dg-error \".getter. attribute of property .i. conflicts with previous declaration\" } */\n+@property (readonly) int i;      /* { dg-warning \".getter. attribute of property .i. conflicts with previous declaration\" } */\n                                  /* { dg-message \"originally specified here\" \"\" { target *-*-* } 24 } */\n @property (nonatomic) float j;   /* Ok */\n @end"}, {"sha": "d1f54b1cda8e24396157827b1b74098aff4b5848", "filename": "gcc/testsuite/objc.dg/property/at-property-21.m", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-21.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-21.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-21.m?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -0,0 +1,23 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@protocol MyProtocol\n+- (void) message;\n+@end\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+}\n+\n+/* Test the warnings on 'assign' with protocols.  */\n+@property id <MyProtocol> property_a;      /* { dg-warning \"object property .property.a. has no .assign., .retain. or .copy. attribute\" } */\n+\t\t\t                   /* { dg-message \".assign. can be unsafe for Objective-C objects\" \"\" { target *-*-* } 16 } */\n+\n+@property MyRootClass <MyProtocol> *property_b; /* { dg-warning \"object property .property.b. has no .assign., .retain. or .copy. attribute\" } */\n+\t\t\t                        /* { dg-message \".assign. can be unsafe for Objective-C objects\" \"\" { target *-*-* } 19 } */\n+\n+@property Class <MyProtocol> property_c;   /* No 'assign' warning (Classes are static objects so assign semantics do not matter for them). */\n+@end"}, {"sha": "af7f3bc1b4ea89aaa5e6fcf4ca858bed8ceaabad", "filename": "gcc/testsuite/objc.dg/property/at-property-22.m", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-22.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-22.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-22.m?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -0,0 +1,172 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+\n+/* Test properties of different types.  */\n+\n+#include <stdlib.h>\n+#include <objc/objc.h>\n+#include <objc/runtime.h>\n+\n+enum colour { Red, Black };\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+}\n++ (id) initialize;\n++ (id) alloc;\n+- (id) init;\n++ (Class) class;\n+@end\n+\n+@implementation MyRootClass\n++ (id) initialize { return self; }\n++ (id) alloc { return class_createInstance (self, 0); }\n+- (id) init { return self; }\n++ (Class) class { return self; }\n+@end\n+\n+\n+@interface MyClass : MyRootClass\n+{\n+  /* A bunch of C types.  */\n+  char         pchar;\n+  short        pshort;\n+  int          pint;\n+  long         plong;\n+  float        pfloat;\n+  double       pdouble;\n+  enum colour  penum;\n+\n+  /* A bunch of pointers to C types.  */\n+  char        *pcharp;\n+  short       *pshortp;\n+  int         *pintp;\n+  long        *plongp;\n+  float       *pfloatp;\n+  double      *pdoublep;\n+  enum colour *penump;\n+\n+  /* A bunch of Objective-C types.  */\n+  id           pid;\n+  Class        pclass;\n+  MyClass     *pMyClassp;\n+}\n+@property (assign) char pchar;\n+@property (assign) short pshort;\n+@property (assign) int pint;\n+@property (assign) long plong;\n+@property (assign) float pfloat;\n+@property (assign) double pdouble;\n+@property (assign) enum colour penum;\n+\n+@property (assign) char *pcharp;\n+@property (assign) short *pshortp;\n+@property (assign) int *pintp;\n+@property (assign) long *plongp;\n+@property (assign) float *pfloatp;\n+@property (assign) double *pdoublep;\n+@property (assign) enum colour *penump;\n+\n+@property (assign) id pid;\n+@property (assign) Class pclass;\n+@property (assign) MyClass *pMyClassp;\n+@end\n+\n+@implementation MyClass\n+@synthesize pchar;\n+@synthesize pshort;\n+@synthesize pint;\n+@synthesize plong;\n+@synthesize pfloat;\n+@synthesize pdouble;\n+@synthesize penum;\n+\n+@synthesize pcharp;\n+@synthesize pshortp;\n+@synthesize pintp;\n+@synthesize plongp;\n+@synthesize pfloatp;\n+@synthesize pdoublep;\n+@synthesize penump;\n+\n+@synthesize pid;\n+@synthesize pclass;\n+@synthesize pMyClassp;\n+@end\n+\n+int main (void)\n+{\n+  MyClass *object = [[MyClass alloc] init];\n+\n+  object.pchar = 1;\n+  if (object.pchar != 1)\n+    abort ();\n+\n+  object.pshort = 2;\n+  if (object.pshort != 2)\n+    abort ();\n+\n+  object.pint = 3;\n+  if (object.pint != 3)\n+    abort ();\n+\n+  object.plong = 4;\n+  if (object.plong != 4)\n+    abort ();\n+\n+  object.pfloat = 0;\n+  if (object.pfloat != 0)\n+    abort ();\n+\n+  object.pdouble = 0;\n+  if (object.pdouble != 0)\n+    abort ();\n+\n+  object.penum = Black;\n+  if (object.penum != Black)\n+    abort ();\n+\n+  object.pcharp = 0;\n+  if (object.pcharp != 0)\n+    abort ();\n+  \n+  object.pshortp = 0;\n+  if (object.pshortp != 0)\n+    abort ();\n+\n+  object.pintp = 0;\n+  if (object.pintp != 0)\n+    abort ();\n+    \n+  object.plongp = 0;\n+  if (object.plongp != 0)\n+    abort ();\n+    \n+  object.pfloatp = 0;\n+  if (object.pfloatp != 0)\n+    abort ();\n+    \n+  object.pdoublep = 0;\n+  if (object.pdoublep != 0)\n+    abort ();\n+    \n+  object.penump = 0;\n+  if (object.penump != 0)\n+    abort ();\n+\n+  object.pid = object;\n+  if (object.pid != object)\n+    abort ();\n+\n+  object.pclass = [MyClass class];\n+  if (object.pclass != [MyClass class])\n+    abort ();\n+\n+  object.pMyClassp = object;\n+  if (object.pMyClassp != object)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "c1fd29df4f350cce9f0030da812d183ae3275b76", "filename": "gcc/testsuite/objc.dg/property/at-property-23.m", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-23.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-23.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-23.m?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -0,0 +1,17 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+\n+/* Test that properties of type arrays or bitfields are rejected.  */\n+\n+#include <stdlib.h>\n+#include <objc/objc.h>\n+#include <objc/runtime.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+}\n+@property int a[8]; /* { dg-error \"property can not be an array\" } */\n+@property int b:8;  /* { dg-error \"property can not be a bit-field\" } */\n+@property int c[];  /* { dg-error \"property can not be an array\" } */\n+@end"}, {"sha": "941aab8e33cec418456c544242c0c738efdeade9", "filename": "gcc/testsuite/objc.dg/property/at-property-4.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-4.m?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -28,7 +28,7 @@ - (void) mySetter2: (int)property;\n /* Now test various problems.  */\n \n @property (readonly, readwrite) int a;    /* { dg-error \".readonly. attribute conflicts with .readwrite. attribute\" } */\n-@property (readonly, setter=mySetterB:) int b; /* { dg-warning \".readonly. attribute conflicts with .setter. attribute\" } */\n+@property (readonly, setter=mySetterB:) int b; /* { dg-error \".readonly. attribute conflicts with .setter. attribute\" } */\n \n @property (assign, retain) id c;          /* { dg-error \".assign. attribute conflicts with .retain. attribute\" } */\n @property (assign, copy) id d;            /* { dg-error \".assign. attribute conflicts with .copy. attribute\" } */"}, {"sha": "464470cba7b80718240f1f2a2c0baac508200343", "filename": "gcc/testsuite/objc.dg/property/property-neg-5.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-5.m?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n \n @interface Foo\n-@property ( readonly, getter = HELLO, setter = THERE : ) int value; /* { dg-warning \".readonly. attribute conflicts with .setter. attribute\" } */\n+@property ( readonly, getter = HELLO, setter = THERE : ) int value; /* { dg-error \".readonly. attribute conflicts with .setter. attribute\" } */\n @end"}, {"sha": "fc4683187df93269956feaf4d6a9dd94c8866754", "filename": "gcc/testsuite/objc.dg/property/synthesize-10.m", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fsynthesize-10.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fsynthesize-10.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fsynthesize-10.m?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -0,0 +1,53 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+\n+/* Test @synthesize with bitfield instance variables.  */\n+\n+#include <stdlib.h>\n+#include <objc/objc.h>\n+#include <objc/runtime.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+  int countA : 2;\n+  int countB : 3;\n+  int countC : 4;\n+}\n++ (id) initialize;\n++ (id) alloc;\n+- (id) init;\n+@property (nonatomic) int countA;\n+@property (nonatomic) int countB;\n+@property (nonatomic) int countC;\n+@end\n+\n+@implementation MyRootClass\n++ (id) initialize { return self; }\n++ (id) alloc { return class_createInstance (self, 0); }\n+- (id) init { return self; }\n+@synthesize countA;\n+@synthesize countB;\n+@synthesize countC;\n+@end\n+\n+int main (void)\n+{\n+  MyRootClass *object = [[MyRootClass alloc] init];\n+\n+  object.countA = 1;\n+  object.countB = 3;\n+  object.countC = 4;\n+\n+  if (object.countA != 1)\n+    abort ();\n+\n+  if (object.countB != 3)\n+    abort ();\n+\n+  if (object.countC != 4)\n+    abort ();\n+  \n+  return 0;\n+}"}, {"sha": "e49d23424b9d5294826eb585a9565451712df7c9", "filename": "gcc/testsuite/objc.dg/property/synthesize-11.m", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fsynthesize-11.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fsynthesize-11.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fsynthesize-11.m?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -0,0 +1,31 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+\n+/* Test errors when @synthesize is used with bitfield instance variables in an incorrect way.  */\n+\n+#include <stdlib.h>\n+#include <objc/objc.h>\n+#include <objc/runtime.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+  int countA : 2;                  /* { dg-message \"originally specified here\" } */\n+  int countB : 3;                  /* { dg-message \"originally specified here\" } */\n+}\n++ (id) initialize;\n++ (id) alloc;\n+- (id) init;\n+@property int countA;       \n+@property (nonatomic) short countB;\n+@end\n+\n+@implementation MyRootClass\n++ (id) initialize { return self; }\n++ (id) alloc { return class_createInstance (self, 0); }\n+- (id) init { return self; }\n+@synthesize countA; /* { dg-error \".atomic. property .countA. is using bit-field instance variable .countA.\" } */\n+@synthesize countB; /* { dg-error \"property .countB. is using instance variable .countB. of incompatible type\" } */\n+@end /* { dg-warning \"incomplete implementation of class\" } */\n+/* { dg-warning \"method definition for ..setCountA.. not found\" \"\" { target *-*-* } 29 } */\n+/* { dg-warning \"method definition for ..countA. not found\" \"\" { target *-*-* } 29 } */"}, {"sha": "7eae31d3f4db18ea98cc82c93a18d678ff034d4e", "filename": "gcc/testsuite/objc.dg/property/synthesize-9.m", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fsynthesize-9.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926bd5d5c308154694122957e2a54c965ebee08/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fsynthesize-9.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fsynthesize-9.m?ref=8926bd5d5c308154694122957e2a54c965ebee08", "patch": "@@ -0,0 +1,80 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+\n+/* Test that when using @synthesize with a readonly property, the\n+   instance variable can be a specialization of the property type.  */\n+\n+#include <objc/objc.h>\n+\n+@protocol MyProtocol\n+- (void)aMethod;\n+@end\n+\n+@interface ClassA\n+@end\n+\n+@interface ClassB : ClassA\n+@end\n+\n+\n+/* This is all OK.  */\n+@interface Test\n+{\n+  int v;\n+  float w;\n+  id x;\n+  Test *y;\n+  id <MyProtocol> *z;\n+  ClassA *a;\n+  ClassB *b;\n+  ClassA <MyProtocol> *c;\n+}\n+@property (assign, readonly) int v;\n+@property (assign, readonly) float w;\n+@property (assign, readonly) id x;\n+@property (assign, readonly) Test *y;\n+@property (assign, readonly) id <MyProtocol> *z;\n+@property (assign, readonly) ClassA *a;\n+@property (assign, readonly) ClassB *b;\n+@end\n+\n+@implementation Test\n+@synthesize v;\n+@synthesize w;\n+@synthesize x;\n+@synthesize y;\n+@synthesize z;\n+@synthesize a;\n+@synthesize b;\n+@end\n+\n+\n+/* This is sometimes OK, sometimes not OK.  */\n+@interface Test2\n+{\n+  int v;                   /* { dg-message \"originally specified here\" } */\n+  float w;                 /* { dg-message \"originally specified here\" } */\n+  id x;                    /* { dg-message \"originally specified here\" } */\n+  Test *y;                 \n+  id <MyProtocol> *z;      /* { dg-message \"originally specified here\" } */\n+  ClassA *a;               /* { dg-message \"originally specified here\" } */\n+  ClassB *b;               \n+}\n+@property (assign, readonly) float v;\n+@property (assign, readonly) id w;\n+@property (assign, readonly) int x;\n+@property (assign, readonly) id y;\n+@property (assign, readonly) Test *z;\n+@property (assign, readonly) ClassB *a;\n+@property (assign, readonly) ClassA *b;\n+@end\n+\n+@implementation Test2\n+@synthesize v; /* { dg-error \"property .v. is using instance variable .v. of incompatible type\" } */\n+@synthesize w; /* { dg-error \"property .w. is using instance variable .w. of incompatible type\" } */\n+@synthesize x; /* { dg-error \"property .x. is using instance variable .x. of incompatible type\" } */\n+@synthesize y;\n+@synthesize z; /* { dg-error \"property .z. is using instance variable .z. of incompatible type\" } */\n+@synthesize a; /* { dg-error \"property .a. is using instance variable .a. of incompatible type\" } */\n+@synthesize b; \n+@end"}]}