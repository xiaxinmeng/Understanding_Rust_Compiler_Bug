{"sha": "3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FhMzRjMWQ4Zjk0ZmM1NmQ2NmRlM2I4ZDA5ZGJkOGMyYzllODUyNQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-11-11T22:50:48Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-11-11T22:50:48Z"}, "message": "re PR fortran/44054 (Handle -Werror, -Werror=, -fdiagnostics-show-option, !GCC$ diagnostic (pragmas) and color)\n\nlibcpp/ChangeLog:\n\n2014-11-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR fortran/44054\n\t* include/line-map.h (linemap_position_for_loc_and_offset):\n\tDeclare.\n\t* line-map.c (linemap_position_for_loc_and_offset): New.\n\n\ngcc/fortran/ChangeLog:\n\n2014-11-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR fortran/44054\n\t* gfortran.h (warn_use_without_only): Remove.\n\t(gfc_diagnostics_finish): Declare.\n\t* error.c: Include tree-diagnostics.h\n\t(gfc_format_decoder): New.\n\t(gfc_diagnostics_init): Use gfc_format_decoder. Set default caret\n\tchar.\n\t(gfc_diagnostics_finish): Restore tree diagnostics defaults, but\n\tkeep gfc_diagnostics_starter and finalizer. Restore default caret.\n\t* options.c: Remove all uses of warn_use_without_only.\n\t* lang.opt (Wuse-without-only): Add Var.\n\t* f95-lang.c (gfc_be_parse_file): Call gfc_diagnostics_finish.\n\t* module.c (gfc_use_module): Use gfc_warning_now_2.\n\t* parse.c (decode_statement): Likewise.\n\t(decode_gcc_attribute): Likewise.\n\t(next_free): Likewise.\n\t(next_fixed): Likewise.\n\n\ngcc/testsuite/ChangeLog:\n\n2014-11-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR fortran/44054\n\t* lib/gfortran-dg.exp: Update regexp to match locus and message\n\twithout caret.\n\t* gfortran.dg/use_without_only_1.f90: Add column numbers.\n        * gfortran.dg/warnings_are_errors_1.f: Update.\n\nFrom-SVN: r217383", "tree": {"sha": "131a5405db6b77d647e372c65ba2c7ec3a8b9360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/131a5405db6b77d647e372c65ba2c7ec3a8b9360"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/comments", "author": null, "committer": null, "parents": [{"sha": "c256f14362ccf94cbb302145e85fab84531ca61d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c256f14362ccf94cbb302145e85fab84531ca61d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c256f14362ccf94cbb302145e85fab84531ca61d"}], "stats": {"total": 218, "additions": 181, "deletions": 37}, "files": [{"sha": "7fd573cd39c36eecb97cb6ff31e0cc8a463d7e90", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525", "patch": "@@ -1,3 +1,23 @@\n+2014-11-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR fortran/44054\n+\t* gfortran.h (warn_use_without_only): Remove.\n+\t(gfc_diagnostics_finish): Declare.\n+\t* error.c: Include tree-diagnostics.h\n+\t(gfc_format_decoder): New.\n+\t(gfc_diagnostics_init): Use gfc_format_decoder. Set default caret\n+\tchar.\n+\t(gfc_diagnostics_finish): Restore tree diagnostics defaults, but\n+\tkeep gfc_diagnostics_starter and finalizer. Restore default caret.\n+\t* options.c: Remove all uses of warn_use_without_only.\n+\t* lang.opt (Wuse-without-only): Add Var.\n+\t* f95-lang.c (gfc_be_parse_file): Call gfc_diagnostics_finish.\n+\t* module.c (gfc_use_module): Use gfc_warning_now_2.\n+\t* parse.c (decode_statement): Likewise.\n+\t(decode_gcc_attribute): Likewise.\n+\t(next_free): Likewise.\n+\t(next_fixed): Likewise.\n+\n 2014-11-11  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR fortran/63701"}, {"sha": "cbab7314ac28c92c95066a32ab87b616cdb705b2", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525", "patch": "@@ -40,6 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"diagnostic.h\"\n #include \"diagnostic-color.h\"\n+#include \"tree-diagnostic.h\" /* tree_diagnostics_defaults */\n \n static int suppress_errors = 0;\n \n@@ -958,6 +959,38 @@ gfc_warning_now (const char *gmsgid, ...)\n   buffer_flag = i;\n }\n \n+/* Called from output_format -- during diagnostic message processing\n+   to handle Fortran specific format specifiers with the following meanings:\n+\n+   %C  Current locus (no argument)\n+*/\n+static bool\n+gfc_format_decoder (pretty_printer *pp,\n+\t\t    text_info *text, const char *spec,\n+\t\t    int precision ATTRIBUTE_UNUSED, bool wide ATTRIBUTE_UNUSED,\n+\t\t    bool plus ATTRIBUTE_UNUSED, bool hash ATTRIBUTE_UNUSED)\n+{\n+  switch (*spec)\n+    {\n+    case 'C':\n+      {\n+\tstatic const char *result = \"(1)\";\n+\tgcc_assert (gfc_current_locus.nextc - gfc_current_locus.lb->line >= 0);\n+\tunsigned int c1 = gfc_current_locus.nextc - gfc_current_locus.lb->line;\n+\tgcc_assert (text->locus);\n+\t*text->locus\n+\t  = linemap_position_for_loc_and_offset (line_table,\n+\t\t\t\t\t\t gfc_current_locus.lb->location,\n+\t\t\t\t\t\t c1);\n+\tglobal_dc->caret_char = '1';\n+\tpp_string (pp, result);\n+\treturn true;\n+      }\n+    default:\n+      return false;\n+    }\n+}\n+\n /* Return a malloc'd string describing a location.  The caller is\n    responsible for freeing the memory.  */\n static char *\n@@ -1356,5 +1389,17 @@ gfc_diagnostics_init (void)\n {\n   diagnostic_starter (global_dc) = gfc_diagnostic_starter;\n   diagnostic_finalizer (global_dc) = gfc_diagnostic_finalizer;\n+  diagnostic_format_decoder (global_dc) = gfc_format_decoder;\n+  global_dc->caret_char = '^';\n+}\n+\n+void\n+gfc_diagnostics_finish (void)\n+{\n+  tree_diagnostics_defaults (global_dc);\n+  /* We still want to use the gfc starter and finalizer, not the tree\n+     defaults.  */\n+  diagnostic_starter (global_dc) = gfc_diagnostic_starter;\n+  diagnostic_finalizer (global_dc) = gfc_diagnostic_finalizer;\n   global_dc->caret_char = '^';\n }"}, {"sha": "223e9381e69f66aa5df28612fc05d93c7bd4f094", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525", "patch": "@@ -230,6 +230,10 @@ gfc_be_parse_file (void)\n   /* Clear the binding level stack.  */\n   while (!global_bindings_p ())\n     poplevel (0, 0);\n+\n+  /* Switch to the default tree diagnostics here, because there may be\n+     diagnostics before gfc_finish().  */\n+  gfc_diagnostics_finish ();\n }\n \n "}, {"sha": "83d2b1a7d9cba4cdbc5e542c4a326234b59e67b9", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525", "patch": "@@ -2455,7 +2455,6 @@ typedef struct\n   int warn_tabs;\n   int warn_underflow;\n   int warn_intrinsic_shadow;\n-  int warn_use_without_only;\n   int warn_intrinsics_std;\n   int warn_character_truncation;\n   int warn_array_temp;\n@@ -2691,7 +2690,8 @@ typedef struct gfc_error_buf\n } gfc_error_buf;\n \n void gfc_error_init_1 (void);\n-void gfc_diagnostics_init(void);\n+void gfc_diagnostics_init (void);\n+void gfc_diagnostics_finish (void);\n void gfc_buffer_error (int);\n \n const char *gfc_print_wide_char (gfc_char_t);"}, {"sha": "d6fe60308b0b532db095e233dce612957a72dd03", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525", "patch": "@@ -262,7 +262,7 @@ Fortran\n ; Documented in C/C++\n \n Wuse-without-only\n-Fortran Warning\n+Fortran Var(warn_use_without_only) Warning\n Warn about USE statements that have no ONLY qualifier\n \n Wopenmp-simd"}, {"sha": "56351f02c04c759feb3af9917ef3c56e54c83afd", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525", "patch": "@@ -6744,8 +6744,9 @@ gfc_use_module (gfc_use_list *module)\n   only_flag = module->only_flag;\n   current_intmod = INTMOD_NONE;\n \n-  if (!only_flag && gfc_option.warn_use_without_only) \n-    gfc_warning_now (\"USE statement at %C has no ONLY qualifier\");\n+  if (!only_flag)\n+    gfc_warning_now_2 (OPT_Wuse_without_only,\n+\t\t       \"USE statement at %C has no ONLY qualifier\");\n \n   filename = XALLOCAVEC (char, strlen (module_name) + strlen (MODULE_EXTENSION)\n \t\t\t       + 1);"}, {"sha": "74b4d6d67bf7f68b977c5266375430405af17040", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525", "patch": "@@ -107,7 +107,6 @@ gfc_init_options (unsigned int decoded_options_count,\n   gfc_option.warn_tabs = 1;\n   gfc_option.warn_underflow = 1;\n   gfc_option.warn_intrinsic_shadow = 0;\n-  gfc_option.warn_use_without_only = 0;\n   gfc_option.warn_intrinsics_std = 0;\n   gfc_option.warn_align_commons = 1;\n   gfc_option.warn_real_q_constant = 0;\n@@ -737,10 +736,6 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.warn_intrinsic_shadow = value;\n       break;\n \n-    case OPT_Wuse_without_only:\n-      gfc_option.warn_use_without_only = value;\n-      break;\n-\n     case OPT_Walign_commons:\n       gfc_option.warn_align_commons = value;\n       break;"}, {"sha": "f9c16833af183e0e22283274f2793554f13e563c", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525", "patch": "@@ -550,7 +550,7 @@ decode_statement (void)\n      stored an error message of some sort.  */\n \n   if (gfc_error_check () == 0)\n-    gfc_error_now (\"Unclassifiable statement at %C\");\n+    gfc_error_now_2 (\"Unclassifiable statement at %C\");\n \n   reject_statement ();\n \n@@ -797,7 +797,7 @@ decode_gcc_attribute (void)\n      stored an error message of some sort.  */\n \n   if (gfc_error_check () == 0)\n-    gfc_error_now (\"Unclassifiable GCC directive at %C\");\n+    gfc_error_now_2 (\"Unclassifiable GCC directive at %C\");\n \n   reject_statement ();\n \n@@ -836,17 +836,17 @@ next_free (void)\n \t  gfc_match_small_literal_int (&i, &cnt);\n \n \t  if (cnt > 5)\n-\t    gfc_error_now (\"Too many digits in statement label at %C\");\n+\t    gfc_error_now_2 (\"Too many digits in statement label at %C\");\n \n \t  if (i == 0)\n-\t    gfc_error_now (\"Zero is not a valid statement label at %C\");\n+\t    gfc_error_now_2 (\"Zero is not a valid statement label at %C\");\n \n \t  do\n \t    c = gfc_next_ascii_char ();\n \t  while (ISDIGIT(c));\n \n \t  if (!gfc_is_whitespace (c))\n-\t    gfc_error_now (\"Non-numeric character in statement label at %C\");\n+\t    gfc_error_now_2 (\"Non-numeric character in statement label at %C\");\n \n \t  return ST_NONE;\n \t}\n@@ -858,7 +858,7 @@ next_free (void)\n \n \t  if (at_bol && gfc_peek_ascii_char () == ';')\n \t    {\n-\t      gfc_error_now (\"Semicolon at %C needs to be preceded by \"\n+\t      gfc_error_now_2 (\"Semicolon at %C needs to be preceded by \"\n \t\t\t     \"statement\");\n \t      gfc_next_ascii_char (); /* Eat up the semicolon.  */\n \t      return ST_NONE;\n@@ -917,8 +917,8 @@ next_free (void)\n   if (at_bol && c == ';')\n     {\n       if (!(gfc_option.allow_std & GFC_STD_F2008))\n-\tgfc_error_now (\"Fortran 2008: Semicolon at %C without preceding \"\n-\t\t       \"statement\");\n+\tgfc_error_now_2 (\"Fortran 2008: Semicolon at %C without preceding \"\n+\t\t\t \"statement\");\n       gfc_next_ascii_char (); /* Eat up the semicolon.  */\n       return ST_NONE;\n     }\n@@ -1017,7 +1017,7 @@ next_fixed (void)\n   if (digit_flag)\n     {\n       if (label == 0)\n-\tgfc_warning_now (\"Zero is not a valid statement label at %C\");\n+\tgfc_warning_now_2 (\"Zero is not a valid statement label at %C\");\n       else\n \t{\n \t  /* We've found a valid statement label.  */"}, {"sha": "9c1e65213f12295efd0f7a778644b6a168fcdab2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525", "patch": "@@ -1,3 +1,11 @@\n+2014-11-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR fortran/44054\n+\t* lib/gfortran-dg.exp: Update regexp to match locus and message\n+\twithout caret.\n+\t* gfortran.dg/use_without_only_1.f90: Add column numbers.\n+        * gfortran.dg/warnings_are_errors_1.f: Update.\n+\n 2014-11-11  David Malcolm  <dmalcolm@redhat.com>\n \n \t* ChangeLog.jit: New."}, {"sha": "3fea702c2a49302148abac08ebfa6aee9f12e8ed", "filename": "gcc/testsuite/gfortran.dg/use_without_only_1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_without_only_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_without_only_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_without_only_1.f90?ref=3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525", "patch": "@@ -6,17 +6,17 @@ MODULE foo\n END MODULE\n \n MODULE testmod\n-  USE foo ! { dg-warning \"has no ONLY qualifier\" }\n+  USE foo ! { dg-warning \"6:has no ONLY qualifier\" }\n   IMPLICIT NONE\n CONTAINS\n   SUBROUTINE S1\n-     USE foo ! { dg-warning \"has no ONLY qualifier\" }\n+     USE foo ! { dg-warning \"9:has no ONLY qualifier\" }\n   END SUBROUTINE S1\n   SUBROUTINE S2\n      USE foo, ONLY: bar \n   END SUBROUTINE\n   SUBROUTINE S3\n-     USE ISO_C_BINDING ! { dg-warning \"has no ONLY qualifier\" }\n+     USE ISO_C_BINDING ! { dg-warning \"9:has no ONLY qualifier\" }\n   END SUBROUTINE S3\n END MODULE\n ! { dg-final { cleanup-modules \"foo testmod\" } }"}, {"sha": "49bf1129f4ea05c8d7c07bd8b1083091d8d0abb4", "filename": "gcc/testsuite/gfortran.dg/warnings_are_errors_1.f", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarnings_are_errors_1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarnings_are_errors_1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarnings_are_errors_1.f?ref=3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525", "patch": "@@ -1,5 +1,6 @@\n ! { dg-do compile }\n ! { dg-options \" -Werror\" }\n+! { dg-message \"warnings being treated as errors\" \"\" { target *-*-* } 0 }\n ! PR fortran/21061\n ! gfortran ignores -Werror\n ! fixed-form tests\n@@ -8,7 +9,7 @@ program warnings_are_errors_1\n        integer(kind=1) :: i\n        real :: r1, r2(3)\n ! gfc_warning_now:\n-0      r1 = 0 ! { dg-warning \"Zero is not a valid statement label\" }\n+0      r1 = 0 ! { dg-error \"Zero is not a valid statement label\" }\n !\n 34 5   i=0 \n ! gfc_notify_std(GFC_STD_F95_DEL):"}, {"sha": "98958e3e6db341e2ff09a16f3bb27c6460460e05", "filename": "gcc/testsuite/lib/gfortran-dg.exp", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/gcc%2Ftestsuite%2Flib%2Fgfortran-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/gcc%2Ftestsuite%2Flib%2Fgfortran-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgfortran-dg.exp?ref=3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525", "patch": "@@ -49,34 +49,45 @@ proc gfortran-dg-test { prog do_what extra_tool_flags } {\n     #              1       2\n     #     Error: Some error at (1) and (2)\n     #\n-    # Where [locus] is either [line] or [line].[columns] .\n+    # or\n+    #     [name]:[locus]: Error: Some error\n+    #\n+    # Where [locus] is either [line] or [line].[column] or\n+    # [line].[column]-[column] .\n     #\n     # We collapse these to look like:\n     #  [name]:[line]:[column]: Error: Some error at (1) and (2)\n     # or\n     #  [name]:[line]:[column]: Error: Some error at (1) and (2)\n     #  [name]:[line2]:[column]: Error: Some error at (1) and (2)\n-    # We proceed in two steps: first we deal with the form with two\n-    # different locus lines, then with the form with only one locus line.\n     #\n     # Note that these regexps only make sense in the combinations used below.\n     # Note also that is imperative that we first deal with the form with\n     # two loci.\n-    set locus_regexp \"(\\[^\\n\\]*):(\\[0-9\\]+)\\[\\.:\\](\\[0-9\\]*)(-\\[0-9\\]*)?:\\n\\n\\[^\\n\\]*\\n\\[^\\n\\]*\\n\"\n-    set diag_regexp \"(\\[^\\n\\]*)\\n\"\n+    set locus_regexp \"(\\[^\\n\\]+:\\[0-9\\]+)\\[\\.:\\](\\[0-9\\]+)(-\\[0-9\\]+)?:\\n\\n\\[^\\n\\]+\\n\\[^\\n\\]+\\n\"\n+    set diag_regexp \"(\\[^\\n\\]+)\\n\"\n \n-    # Add column number if none exists\n-    set colnum_regexp \"(Warning: |Error: )?(\\[^\\n\\]*):(\\[0-9\\]+):(\\[ \\n\\])\"\n-    regsub -all $colnum_regexp $comp_output \"\\\\2:\\\\3:0:\\\\4\\\\1\" comp_output\n+    # We proceed in steps:\n \n-    set two_loci \"$locus_regexp$locus_regexp$diag_regexp\"\n-    set single_locus \"$locus_regexp$diag_regexp\"\n-    regsub -all $two_loci $comp_output \"\\\\1:\\\\2:\\\\3: \\\\9\\n\\\\5:\\\\6:\\\\7: \\\\9\\n\" comp_output\n-    regsub -all $single_locus $comp_output \"\\\\1:\\\\2:\\\\3: \\\\5\\n\" comp_output\n+    # 1. We add first a column number if none exists.\n+    # (Some Fortran diagnostics have the locus after Warning|Error)\n+    set colnum_regexp \"(^|\\n)(Warning: |Error: )?(\\[^:\\n\\]+:\\[0-9\\]+):(\\[ \\n\\])\"\n+    regsub -all $colnum_regexp $comp_output \"\\\\1\\\\3:0:\\\\4\\\\2\" comp_output\n+    verbose \"comput_output0:\\n$comp_output\"\n \n-    # Add a line number if none exists\n-    regsub -all \"(^|\\n)(Warning: |Error: )\" $comp_output \"\\\\1:0:0: \\\\2\" comp_output\n+    # 2. We deal with the form with two different locus lines,\n+    set two_loci \"(^|\\n)$locus_regexp$locus_regexp$diag_regexp\"\n+    regsub -all $two_loci $comp_output \"\\\\1\\\\2:\\\\3: \\\\8\\n\\\\5\\:\\\\6: \\\\8\\n\" comp_output\n+    verbose \"comput_output1:\\n$comp_output\"\n \n+    # 3. then with the form with only one locus line.\n+    set single_locus \"(^|\\n)$locus_regexp$diag_regexp\"\n+    regsub -all $single_locus $comp_output \"\\\\1\\\\2:\\\\3: \\\\5\\n\" comp_output\n+    verbose \"comput_output2:\\n$comp_output\"\n+\n+    # 4. Add a line number if none exists\n+    regsub -all \"(^|\\n)(Warning: |Error: )\" $comp_output \"\\\\1:0:0: \\\\2\" comp_output\n+    verbose \"comput_output3:\\n$comp_output\"\n     return [list $comp_output $output_file]\n }\n "}, {"sha": "b75d521cf9fbb620cf91065f6da227e53aace15e", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525", "patch": "@@ -1,3 +1,10 @@\n+2014-11-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR fortran/44054\n+\t* include/line-map.h (linemap_position_for_loc_and_offset):\n+\tDeclare.\n+\t* line-map.c (linemap_position_for_loc_and_offset): New.\n+\n 2014-11-11  David Malcolm  <dmalcolm@redhat.com>\n \n \t* ChangeLog.jit: New."}, {"sha": "2fcee1906bea500b8a138edefad9b756f9351876", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525", "patch": "@@ -603,6 +603,14 @@ source_location\n linemap_position_for_line_and_column (const struct line_map *,\n \t\t\t\t      linenum_type, unsigned int);\n \n+/* Encode and return a source_location starting from location LOC and\n+   shifting it by OFFSET columns.  This function does not support\n+   virtual locations.  */\n+source_location\n+linemap_position_for_loc_and_offset (struct line_maps *set,\n+\t\t\t\t     source_location loc,\n+\t\t\t\t     unsigned int offset);\n+\n /* Return the file this map is for.  */\n #define LINEMAP_FILE(MAP)\t\t\t\t\t\\\n   (linemap_check_ordinary (MAP)->d.ordinary.to_file)"}, {"sha": "aff0294936c3e2526bdfd01440ac192f811a54b2", "filename": "libcpp/line-map.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=3aa34c1d8f94fc56d66de3b8d09dbd8c2c9e8525", "patch": "@@ -633,6 +633,50 @@ linemap_position_for_line_and_column (const struct line_map *map,\n \t  + (column & ((1 << ORDINARY_MAP_NUMBER_OF_COLUMN_BITS (map)) - 1)));\n }\n \n+/* Encode and return a source_location starting from location LOC and\n+   shifting it by OFFSET columns.  This function does not support\n+   virtual locations.  */\n+\n+source_location\n+linemap_position_for_loc_and_offset (struct line_maps *set,\n+\t\t\t\t     source_location loc,\n+\t\t\t\t     unsigned int offset)\n+{\n+  const struct line_map * map = NULL;\n+\n+  /* This function does not support virtual locations yet.  */\n+  linemap_assert (!linemap_location_from_macro_expansion_p (set, loc));\n+\n+  if (offset == 0\n+      /* Adding an offset to a reserved location (like\n+\t UNKNOWN_LOCATION for the C/C++ FEs) does not really make\n+\t sense.  So let's leave the location intact in that case.  */\n+      || loc < RESERVED_LOCATION_COUNT)\n+    return loc;\n+\n+  /* We find the real location and shift it.  */\n+  loc = linemap_resolve_location (set, loc, LRK_SPELLING_LOCATION, &map);\n+  /* The new location (loc + offset) should be higher than the first\n+     location encoded by MAP.  */\n+  linemap_assert (MAP_START_LOCATION (map) < loc + offset);\n+\n+  /* If MAP is not the last line map of its set, then the new location\n+     (loc + offset) should be less than the first location encoded by\n+     the next line map of the set.  */\n+  if (map != LINEMAPS_LAST_ORDINARY_MAP (set))\n+    linemap_assert (loc + offset < MAP_START_LOCATION (&map[1]));\n+\n+  offset += SOURCE_COLUMN (map, loc);\n+  linemap_assert (offset < (1u << map->d.ordinary.column_bits));\n+\n+  source_location r = \n+    linemap_position_for_line_and_column (map,\n+\t\t\t\t\t  SOURCE_LINE (map, loc),\n+\t\t\t\t\t  offset);\n+  linemap_assert (map == linemap_lookup (set, r));\n+  return r;\n+}\n+\n /* Given a virtual source location yielded by a map (either an\n    ordinary or a macro map), returns that map.  */\n "}]}