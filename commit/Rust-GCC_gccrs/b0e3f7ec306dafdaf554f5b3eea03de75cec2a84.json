{"sha": "b0e3f7ec306dafdaf554f5b3eea03de75cec2a84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBlM2Y3ZWMzMDZkYWZkYWY1NTRmNWIzZWVhMDNkZTc1Y2VjMmE4NA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2003-07-15T23:31:52Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2003-07-15T23:31:52Z"}, "message": "re PR c++/11531 (ICE on invalid code (returning to void))\n\n        PR c++/11531\n        * diagnostic.c (diagnostic_report_diagnostic): Don't ICE if we're\n        not recursing on hard error.\n        (diagnostic_for_decl): Likewise.\n        * diagnostic.def: Rearrange.\n\ncp/\n        * typeck.c (check_return_expr): Fix thinko in diagnostic.\n\nFrom-SVN: r69425", "tree": {"sha": "8c95ca0c8979930a9bfa16aad26f060327c7ca5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c95ca0c8979930a9bfa16aad26f060327c7ca5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0e3f7ec306dafdaf554f5b3eea03de75cec2a84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0e3f7ec306dafdaf554f5b3eea03de75cec2a84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0e3f7ec306dafdaf554f5b3eea03de75cec2a84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0e3f7ec306dafdaf554f5b3eea03de75cec2a84/comments", "author": null, "committer": null, "parents": [{"sha": "71628aa09889112d4acdfcea51b85d43808e1d74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71628aa09889112d4acdfcea51b85d43808e1d74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71628aa09889112d4acdfcea51b85d43808e1d74"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "24c45c7458411ec34d85597195a30cdc194d2d5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e3f7ec306dafdaf554f5b3eea03de75cec2a84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e3f7ec306dafdaf554f5b3eea03de75cec2a84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0e3f7ec306dafdaf554f5b3eea03de75cec2a84", "patch": "@@ -1,3 +1,11 @@\n+2003-07-16  Gabriel Dos Reis  <gcc@integrable-solutions.net>\n+\n+\tPR c++/11531\n+\t* diagnostic.c (diagnostic_report_diagnostic): Don't ICE if we're\n+\tnot recursing on hard error.\n+\t(diagnostic_for_decl): Likewise.\n+\t* diagnostic.def: Rearrange.\n+\n 2003-07-15  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* dwarf2out.c (expand_builtin_init_dwarf_reg_sizes):"}, {"sha": "1d25e8615ef32e62609c58c2a9f822d61ed2dd17", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e3f7ec306dafdaf554f5b3eea03de75cec2a84/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e3f7ec306dafdaf554f5b3eea03de75cec2a84/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b0e3f7ec306dafdaf554f5b3eea03de75cec2a84", "patch": "@@ -1,3 +1,8 @@\n+2003-07-16  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\tPR c++/11531\n+\t* typeck.c (check_return_expr): Fix thinko in diagnostic.\n+\n 2003-07-15  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/10108"}, {"sha": "b0bb1ac9e406e7d7dc003c91087073be7c6fc893", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e3f7ec306dafdaf554f5b3eea03de75cec2a84/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e3f7ec306dafdaf554f5b3eea03de75cec2a84/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b0e3f7ec306dafdaf554f5b3eea03de75cec2a84", "patch": "@@ -6123,7 +6123,7 @@ check_return_expr (tree retval)\n      that's supposed to return a value.  */\n   if (!retval && fn_returns_value_p)\n     {\n-      pedwarn (\"return-statement with no value, in function returning `%D'\",\n+      pedwarn (\"return-statement with no value, in function returning '%T'\",\n \t       valtype);\n       /* Clear this, so finish_function won't say that we reach the\n \t end of a non-void function (which we don't, we gave a\n@@ -6140,8 +6140,8 @@ check_return_expr (tree retval)\n \t   its side-effects.  */\n \t  finish_expr_stmt (retval);\n       else\n-\tpedwarn (\"return-statement with a value, in function returning `%D'\",\n-\t\t retval);\n+\tpedwarn (\"return-statement with a value, in function \"\n+                 \"returning 'void'\");\n \n       current_function_returns_null = 1;\n "}, {"sha": "34756112d681c3ee9127fb92c89192e53000b1bb", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e3f7ec306dafdaf554f5b3eea03de75cec2a84/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e3f7ec306dafdaf554f5b3eea03de75cec2a84/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=b0e3f7ec306dafdaf554f5b3eea03de75cec2a84", "patch": "@@ -1020,7 +1020,7 @@ void\n diagnostic_report_diagnostic (diagnostic_context *context,\n \t\t\t      diagnostic_info *diagnostic)\n {\n-  if (context->lock++)\n+  if (context->lock++ && diagnostic->kind < DK_SORRY)\n     error_recursion (context);\n \n   if (diagnostic_count_diagnostic (context, diagnostic))\n@@ -1042,7 +1042,7 @@ static void\n diagnostic_for_decl (diagnostic_context *context,\n \t\t     diagnostic_info *diagnostic, tree decl)\n {\n-  if (context->lock++)\n+  if (context->lock++ && diagnostic->kind < DK_SORRY)\n     error_recursion (context);\n \n   if (diagnostic_count_diagnostic (context, diagnostic))"}, {"sha": "6820bb72e9fe05856385e2d5bec350dabfb84f57", "filename": "gcc/diagnostic.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e3f7ec306dafdaf554f5b3eea03de75cec2a84/gcc%2Fdiagnostic.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e3f7ec306dafdaf554f5b3eea03de75cec2a84/gcc%2Fdiagnostic.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.def?ref=b0e3f7ec306dafdaf554f5b3eea03de75cec2a84", "patch": "@@ -1,7 +1,7 @@\n DEFINE_DIAGNOSTIC_KIND (DK_FATAL, \"fatal error: \")\n DEFINE_DIAGNOSTIC_KIND (DK_ICE, \"internal compiler error: \")\n-DEFINE_DIAGNOSTIC_KIND (DK_SORRY, \"sorry, unimplemented: \")\n DEFINE_DIAGNOSTIC_KIND (DK_ERROR, \"error: \")\n+DEFINE_DIAGNOSTIC_KIND (DK_SORRY, \"sorry, unimplemented: \")\n DEFINE_DIAGNOSTIC_KIND (DK_WARNING, \"warning: \")\n DEFINE_DIAGNOSTIC_KIND (DK_ANACHRONISM, \"anachronism: \")\n DEFINE_DIAGNOSTIC_KIND (DK_NOTE, \"note: \")"}, {"sha": "e9a2d79f42242a88d2c8f908bf8b61c91ca1822a", "filename": "gcc/testsuite/g++.dg/other/crash-1.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e3f7ec306dafdaf554f5b3eea03de75cec2a84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcrash-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e3f7ec306dafdaf554f5b3eea03de75cec2a84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcrash-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcrash-1.C?ref=b0e3f7ec306dafdaf554f5b3eea03de75cec2a84", "patch": "@@ -0,0 +1,3 @@\n+\n+void f() { return 0; }          // { dg-error \"return-statement\" }\n+"}]}