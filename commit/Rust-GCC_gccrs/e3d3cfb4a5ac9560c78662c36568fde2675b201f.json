{"sha": "e3d3cfb4a5ac9560c78662c36568fde2675b201f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNkM2NmYjRhNWFjOTU2MGM3ODY2MmMzNjU2OGZkZTI2NzViMjAxZg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2013-09-17T13:29:41Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2013-09-17T13:29:41Z"}, "message": "re PR tree-optimization/58088 (ICE in gcc.c)\n\n[gcc/]\n2013-09-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\tPR tree-optimization/58088\n\t* fold-const.c (mask_with_trailing_zeros): New function.\n\t(fold_binary_loc): Make sure we don't recurse infinitely\n\twhen the X in (X & C1) | C2 is a tree of the form (Y * K1) & K2.\n\tUse mask_with_trailing_zeros where appropriate.\n\n[gcc/testsuite]\n2013-09-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\tPR tree-optimization/58088\n\t* gcc.c-torture/compile/pr58088.c: New test.\n\nFrom-SVN: r202652", "tree": {"sha": "c7ad9c99c8373202fc0c56229c3ab24d5189bba2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7ad9c99c8373202fc0c56229c3ab24d5189bba2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3d3cfb4a5ac9560c78662c36568fde2675b201f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3d3cfb4a5ac9560c78662c36568fde2675b201f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3d3cfb4a5ac9560c78662c36568fde2675b201f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3d3cfb4a5ac9560c78662c36568fde2675b201f/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4fce5f027cf84b6237b6f7d90b3b00f7ab7ca4d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fce5f027cf84b6237b6f7d90b3b00f7ab7ca4d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fce5f027cf84b6237b6f7d90b3b00f7ab7ca4d4"}], "stats": {"total": 80, "additions": 63, "deletions": 17}, "files": [{"sha": "16e7ae2a5cd8fe7095a5161a32c6accc6f68d79b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d3cfb4a5ac9560c78662c36568fde2675b201f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d3cfb4a5ac9560c78662c36568fde2675b201f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3d3cfb4a5ac9560c78662c36568fde2675b201f", "patch": "@@ -1,3 +1,11 @@\n+2013-09-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR tree-optimization/58088\n+\t* fold-const.c (mask_with_trailing_zeros): New function.\n+\t(fold_binary_loc): Make sure we don't recurse infinitely\n+\twhen the X in (X & C1) | C2 is a tree of the form (Y * K1) & K2.\n+\tUse mask_with_trailing_zeros where appropriate.\n+\n 2013-09-17  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \t* config/i386/i386.c (distance_agu_use_in_bb) : Proper initialization"}, {"sha": "d23c1737ed33fb668918d9e0b9b2137383694bcc", "filename": "gcc/fold-const.c", "status": "modified", "additions": 45, "deletions": 17, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d3cfb4a5ac9560c78662c36568fde2675b201f/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d3cfb4a5ac9560c78662c36568fde2675b201f/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e3d3cfb4a5ac9560c78662c36568fde2675b201f", "patch": "@@ -9942,6 +9942,24 @@ exact_inverse (tree type, tree cst)\n     }\n }\n \n+/*  Mask out the tz least significant bits of X of type TYPE where\n+    tz is the number of trailing zeroes in Y.  */\n+static double_int\n+mask_with_tz (tree type, double_int x, double_int y)\n+{\n+  int tz = y.trailing_zeros ();\n+\n+  if (tz > 0)\n+    {\n+      double_int mask;\n+\n+      mask = ~double_int::mask (tz);\n+      mask = mask.ext (TYPE_PRECISION (type), TYPE_UNSIGNED (type));\n+      return mask & x;\n+    }\n+  return x;\n+}\n+\n /* Fold a binary expression of code CODE and type TYPE with operands\n    OP0 and OP1.  LOC is the location of the resulting expression.\n    Return the folded expression if folding is successful.  Otherwise,\n@@ -11266,6 +11284,8 @@ fold_binary_loc (location_t loc,\n \t{\n \t  double_int c1, c2, c3, msk;\n \t  int width = TYPE_PRECISION (type), w;\n+\t  bool try_simplify = true;\n+\n \t  c1 = tree_to_double_int (TREE_OPERAND (arg0, 1));\n \t  c2 = tree_to_double_int (arg1);\n \n@@ -11300,7 +11320,21 @@ fold_binary_loc (location_t loc,\n \t\t  break;\n \t\t}\n \t    }\n-\t  if (c3 != c1)\n+\n+\t  /* If X is a tree of the form (Y * K1) & K2, this might conflict\n+\t     with that optimization from the BIT_AND_EXPR optimizations.\n+\t     This could end up in an infinite recursion.  */\n+\t  if (TREE_CODE (TREE_OPERAND (arg0, 0)) == MULT_EXPR\n+\t      && TREE_CODE (TREE_OPERAND (TREE_OPERAND (arg0, 0), 1))\n+\t                    == INTEGER_CST)\n+\t  {\n+\t    tree t = TREE_OPERAND (TREE_OPERAND (arg0, 0), 1);\n+\t    double_int masked = mask_with_tz (type, c3, tree_to_double_int (t));\n+\n+\t    try_simplify = (masked != c1);\n+\t  }\n+\n+\t  if (try_simplify && c3 != c1)\n \t    return fold_build2_loc (loc, BIT_IOR_EXPR, type,\n \t\t\t\t    fold_build2_loc (loc, BIT_AND_EXPR, type,\n \t\t\t\t\t\t     TREE_OPERAND (arg0, 0),\n@@ -11690,22 +11724,16 @@ fold_binary_loc (location_t loc,\n \t  && TREE_CODE (arg0) == MULT_EXPR\n \t  && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST)\n \t{\n-\t  int arg1tz\n-\t    = tree_to_double_int (TREE_OPERAND (arg0, 1)).trailing_zeros ();\n-\t  if (arg1tz > 0)\n-\t    {\n-\t      double_int arg1mask, masked;\n-\t      arg1mask = ~double_int::mask (arg1tz);\n-\t      arg1mask = arg1mask.ext (TYPE_PRECISION (type),\n-\t\t\t\t\t TYPE_UNSIGNED (type));\n-\t      masked = arg1mask & tree_to_double_int (arg1);\n-\t      if (masked.is_zero ())\n-\t\treturn omit_two_operands_loc (loc, type, build_zero_cst (type),\n-\t\t\t\t\t      arg0, arg1);\n-\t      else if (masked != tree_to_double_int (arg1))\n-\t\treturn fold_build2_loc (loc, code, type, op0,\n-\t\t\t\t\tdouble_int_to_tree (type, masked));\n-\t    }\n+\t  double_int masked\n+\t    = mask_with_tz (type, tree_to_double_int (arg1),\n+\t                    tree_to_double_int (TREE_OPERAND (arg0, 1)));\n+\n+\t  if (masked.is_zero ())\n+\t    return omit_two_operands_loc (loc, type, build_zero_cst (type),\n+\t                                  arg0, arg1);\n+\t  else if (masked != tree_to_double_int (arg1))\n+\t    return fold_build2_loc (loc, code, type, op0,\n+\t                            double_int_to_tree (type, masked));\n \t}\n \n       /* For constants M and N, if M == (1LL << cst) - 1 && (N & M) == M,"}, {"sha": "a7b90f0a9579dddf8bb33c7c5bf4e161cb61f903", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d3cfb4a5ac9560c78662c36568fde2675b201f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d3cfb4a5ac9560c78662c36568fde2675b201f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e3d3cfb4a5ac9560c78662c36568fde2675b201f", "patch": "@@ -1,3 +1,8 @@\n+2013-09-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR tree-optimization/58088\n+\t* gcc.c-torture/compile/pr58088.c: New test.\n+\n 2013-09-17  Nick Clifton  <nickc@redhat.com>\n \n \t* lib/target-supports.exp (check_effective_target_trampolines):"}, {"sha": "07a9c68a7fff25d96676aff468dd8645c6cb00fe", "filename": "gcc/testsuite/gcc.c-torture/compile/pr58088.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d3cfb4a5ac9560c78662c36568fde2675b201f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr58088.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d3cfb4a5ac9560c78662c36568fde2675b201f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr58088.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr58088.c?ref=e3d3cfb4a5ac9560c78662c36568fde2675b201f", "patch": "@@ -0,0 +1,5 @@\n+int\n+bar (int i)\n+{\n+  return 1 | ((i * 2) & 254);\n+}"}]}