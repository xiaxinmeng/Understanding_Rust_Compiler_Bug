{"sha": "66b4d2611346c270f63a49b778bef0be28f95ccb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZiNGQyNjExMzQ2YzI3MGY2M2E0OWI3NzhiZWYwYmUyOGY5NWNjYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2016-06-10T16:00:24Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2016-06-10T16:00:24Z"}, "message": "predict.c (predict_loops): Remove PRED_LOOP_BRANCH.\n\n\t* predict.c (predict_loops): Remove PRED_LOOP_BRANCH.\n\t* predict.def (PRED_LOOP_BRANCH): Remove.\n\nFrom-SVN: r237311", "tree": {"sha": "16882eee8ded0ae2c3d85874f4bb2ea7dcbaf17c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16882eee8ded0ae2c3d85874f4bb2ea7dcbaf17c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66b4d2611346c270f63a49b778bef0be28f95ccb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b4d2611346c270f63a49b778bef0be28f95ccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66b4d2611346c270f63a49b778bef0be28f95ccb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b4d2611346c270f63a49b778bef0be28f95ccb/comments", "author": null, "committer": null, "parents": [{"sha": "2704efe8c461992f8b2f6cacc6d0769c2a8341c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2704efe8c461992f8b2f6cacc6d0769c2a8341c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2704efe8c461992f8b2f6cacc6d0769c2a8341c3"}], "stats": {"total": 23, "additions": 5, "deletions": 18}, "files": [{"sha": "af960257eaecdaebc262f495b0f6dff41652b38e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b4d2611346c270f63a49b778bef0be28f95ccb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b4d2611346c270f63a49b778bef0be28f95ccb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66b4d2611346c270f63a49b778bef0be28f95ccb", "patch": "@@ -1,3 +1,8 @@\n+2016-06-10  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* predict.c (predict_loops): Remove PRED_LOOP_BRANCH.\n+\t* predict.def (PRED_LOOP_BRANCH): Remove.\n+\n 2016-06-10  David Malcolm  <dmalcolm@redhat.com>\n \n \t* Makefile.in (OBJS): Add ggc-tests.o."}, {"sha": "7a3398427e488dc9d8f1f5d819c1e96fcb1e3521", "filename": "gcc/predict.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b4d2611346c270f63a49b778bef0be28f95ccb/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b4d2611346c270f63a49b778bef0be28f95ccb/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=66b4d2611346c270f63a49b778bef0be28f95ccb", "patch": "@@ -1805,18 +1805,6 @@ predict_loops (void)\n \t  if (predicted_by_p (bb, PRED_CONTINUE))\n \t    continue;\n \n-\t  /* Loop branch heuristics - predict an edge back to a\n-\t     loop's head as taken.  */\n-\t  if (bb == loop->latch)\n-\t    {\n-\t      e = find_edge (loop->latch, loop->header);\n-\t      if (e)\n-\t\t{\n-\t\t  header_found = 1;\n-\t\t  predict_edge_def (e, PRED_LOOP_BRANCH, TAKEN);\n-\t\t}\n-\t    }\n-\n \t  /* Loop exit heuristics - predict an edge exiting the loop if the\n \t     conditional has no loop header successors as not taken.  */\n \t  if (!header_found"}, {"sha": "c0a3f3684a9683e2c192571aa2d905293272de03", "filename": "gcc/predict.def", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b4d2611346c270f63a49b778bef0be28f95ccb/gcc%2Fpredict.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b4d2611346c270f63a49b778bef0be28f95ccb/gcc%2Fpredict.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.def?ref=66b4d2611346c270f63a49b778bef0be28f95ccb", "patch": "@@ -88,12 +88,6 @@ DEF_PREDICTOR (PRED_NORETURN, \"noreturn call\", PROB_VERY_LIKELY,\n DEF_PREDICTOR (PRED_COLD_FUNCTION, \"cold function call\", PROB_VERY_LIKELY,\n \t       PRED_FLAG_FIRST_MATCH)\n \n-/* Loopback edge is taken.\n-   FIXME: This is currently disabled because loop_optimizer_init force\n-   loops to have simple latches.  */\n-DEF_PREDICTOR (PRED_LOOP_BRANCH, \"loop branch\", HITRATE (86),\n-\t       PRED_FLAG_FIRST_MATCH)\n-\n /* Edge causing loop to terminate is probably not taken.  */\n DEF_PREDICTOR (PRED_LOOP_EXIT, \"loop exit\", HITRATE (92),\n \t       PRED_FLAG_FIRST_MATCH)"}]}