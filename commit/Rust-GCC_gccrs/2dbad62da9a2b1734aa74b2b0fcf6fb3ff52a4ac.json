{"sha": "2dbad62da9a2b1734aa74b2b0fcf6fb3ff52a4ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRiYWQ2MmRhOWEyYjE3MzRhYTc0YjJiMGZjZjZmYjNmZjUyYTRhYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-11-13T11:58:46Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-11-13T11:58:46Z"}, "message": "c-ada-spec.c (get_underlying_decl): Do not look through typedefs.\n\n\t* c-ada-spec.c (get_underlying_decl): Do not look through typedefs.\n\t(dump_forward_type): Do not generate a declaration for function types.\n\t(dump_nested_type) <ARRAY_TYPE>: Do not generate a nested declaration\n\tof the component type if it is declared in another file.\n\nFrom-SVN: r278129", "tree": {"sha": "a738d8dfc1981fad6e056fff988c1f14f57a55b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a738d8dfc1981fad6e056fff988c1f14f57a55b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dbad62da9a2b1734aa74b2b0fcf6fb3ff52a4ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dbad62da9a2b1734aa74b2b0fcf6fb3ff52a4ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dbad62da9a2b1734aa74b2b0fcf6fb3ff52a4ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dbad62da9a2b1734aa74b2b0fcf6fb3ff52a4ac/comments", "author": null, "committer": null, "parents": [{"sha": "46927ade0f5933c4eb22b049996fa15080b7f652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46927ade0f5933c4eb22b049996fa15080b7f652", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46927ade0f5933c4eb22b049996fa15080b7f652"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "c7813a12d7db623279e7c0a6aea8f56ccdddad4d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dbad62da9a2b1734aa74b2b0fcf6fb3ff52a4ac/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dbad62da9a2b1734aa74b2b0fcf6fb3ff52a4ac/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2dbad62da9a2b1734aa74b2b0fcf6fb3ff52a4ac", "patch": "@@ -1,3 +1,10 @@\n+2019-11-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-ada-spec.c (get_underlying_decl): Do not look through typedefs.\n+\t(dump_forward_type): Do not generate a declaration for function types.\n+\t(dump_nested_type) <ARRAY_TYPE>: Do not generate a nested declaration\n+\tof the component type if it is declared in another file.\n+\n 2019-11-12  Martin Liska  <mliska@suse.cz>\n \n \t* c-opts.c (c_common_post_options):"}, {"sha": "5a142ce91be87bde9cc7ee79efe5f672ca37cacd", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dbad62da9a2b1734aa74b2b0fcf6fb3ff52a4ac/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dbad62da9a2b1734aa74b2b0fcf6fb3ff52a4ac/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=2dbad62da9a2b1734aa74b2b0fcf6fb3ff52a4ac", "patch": "@@ -1025,7 +1025,9 @@ get_underlying_decl (tree type)\n \n   if (TYPE_P (type))\n     {\n-      type = TYPE_MAIN_VARIANT (type);\n+      /* Strip qualifiers but do not look through typedefs.  */\n+      if (TYPE_QUALS_NO_ADDR_SPACE (type))\n+\ttype = TYPE_MAIN_VARIANT (type);\n \n       /* type is a typedef.  */\n       if (TYPE_NAME (type) && DECL_P (TYPE_NAME (type)))\n@@ -2454,6 +2456,9 @@ dump_forward_type (pretty_printer *buffer, tree type, tree t, int spc)\n   if (DECL_SOURCE_FILE (decl) != DECL_SOURCE_FILE (t))\n     return;\n \n+  if (TREE_CODE (type) == FUNCTION_TYPE)\n+    return;\n+\n   /* Generate an incomplete type declaration.  */\n   pp_string (buffer, \"type \");\n   dump_ada_node (buffer, decl, NULL_TREE, spc, false, true);\n@@ -2522,7 +2527,10 @@ dump_nested_type (pretty_printer *buffer, tree field, tree t, tree parent,\n       while (TREE_CODE (tmp) == ARRAY_TYPE)\n \ttmp = TREE_TYPE (tmp);\n       decl = get_underlying_decl (tmp);\n-      if (decl && !DECL_NAME (decl) && !TREE_VISITED (decl))\n+      if (decl\n+\t  && !DECL_NAME (decl)\n+\t  && DECL_SOURCE_FILE (decl) == DECL_SOURCE_FILE (t)\n+\t  && !TREE_VISITED (decl))\n \t{\n \t  /* Generate full declaration.  */\n \t  dump_nested_type (buffer, decl, t, parent, spc);"}]}