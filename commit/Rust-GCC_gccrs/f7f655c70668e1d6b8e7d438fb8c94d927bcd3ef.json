{"sha": "f7f655c70668e1d6b8e7d438fb8c94d927bcd3ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdmNjU1YzcwNjY4ZTFkNmI4ZTdkNDM4ZmI4Yzk0ZDkyN2JjZDNlZg==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2005-04-28T20:52:12Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2005-04-28T20:52:12Z"}, "message": "optc-gen.awk (END): Make sure no variable is defined more than once.\n\n* optc-gen.awk (END): Make sure no variable is defined more\nthan once.\n* opth-gen.awk (END): Allocate bits on a per-variable basis.\nAllow for bitfield variables other than target_flags.\n* doc/options.text (Mask): Document that you may specify a\nvariable other than target_flags.\n\nFrom-SVN: r98940", "tree": {"sha": "aeacd772adaa4ebc4fcc69669e083225f5e6479e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aeacd772adaa4ebc4fcc69669e083225f5e6479e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7f655c70668e1d6b8e7d438fb8c94d927bcd3ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7f655c70668e1d6b8e7d438fb8c94d927bcd3ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7f655c70668e1d6b8e7d438fb8c94d927bcd3ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7f655c70668e1d6b8e7d438fb8c94d927bcd3ef/comments", "author": null, "committer": null, "parents": [{"sha": "b4ad897d570a81c1c1e92470b66915244bcc7ec9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4ad897d570a81c1c1e92470b66915244bcc7ec9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4ad897d570a81c1c1e92470b66915244bcc7ec9"}], "stats": {"total": 68, "additions": 53, "deletions": 15}, "files": [{"sha": "4a0d72375742fa76f97e96ec6b904a026614feb9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f655c70668e1d6b8e7d438fb8c94d927bcd3ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f655c70668e1d6b8e7d438fb8c94d927bcd3ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7f655c70668e1d6b8e7d438fb8c94d927bcd3ef", "patch": "@@ -1,3 +1,12 @@\n+2005-04-28  DJ Delorie  <dj@redhat.com>\n+\n+\t* optc-gen.awk (END): Make sure no variable is defined more\n+\tthan once.\n+\t* opth-gen.awk (END): Allocate bits on a per-variable basis.\n+\tAllow for bitfield variables other than target_flags.\n+\t* doc/options.text (Mask): Document that you may specify a\n+\tvariable other than target_flags.\n+\n 2005-04-28  Martin Koegler <mkoegler@auto.tuwien.ac.at>\n \n \tPR rtl-optimization/18877"}, {"sha": "d5d1984de52a2479bb0c6bdb6c6225ab025dbf46", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f655c70668e1d6b8e7d438fb8c94d927bcd3ef/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f655c70668e1d6b8e7d438fb8c94d927bcd3ef/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=f7f655c70668e1d6b8e7d438fb8c94d927bcd3ef", "patch": "@@ -154,14 +154,20 @@ The variable specified by the @code{Var} property should be statically\n initialized to @var{value}.\n \n @item Mask(@var{name})\n-The option is associated with a bit in the @code{target_flags} variable\n-(@pxref{Run-time Target}) and is active when that bit is set.\n-\n-The options-processing script will automatically allocate a unique\n-bit for the option and set the macro @code{MASK_@var{name}} to the\n-appropriate bitmask.  It will also declare a @code{TARGET_@var{name}}\n-macro that has the value 1 when the option is active and 0 otherwise.\n-You can disable this behavior using @code{MaskExists}.\n+The option is associated with a bit in the @code{target_flags}\n+variable (@pxref{Run-time Target}) and is active when that bit is set.\n+You may also specify @code{Var} to select a variable other than\n+@code{target_flags}.\n+\n+The options-processing script will automatically allocate a unique bit\n+for the option.  If the option is attached to @samp{target_flags},\n+the script will set the macro @code{MASK_@var{name}} to the appropriate\n+bitmask.  It will also declare a @code{TARGET_@var{name}} macro that has\n+the value 1 when the option is active and 0 otherwise.  If you use @code{Var}\n+to attach the option to a different variable, the associated macros are\n+called @code{OPTION_MASK_@var{name}} and @code{OPTION_@var{name}} respectively.\n+\n+You can disable automatic bit alloction using @code{MaskExists}.\n \n @item InverseMask(@var{othername})\n @itemx InverseMask(@var{othername}, @var{thisname})"}, {"sha": "ebf6a44fcc0d26629ab965cec24eae248ac39bb9", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f655c70668e1d6b8e7d438fb8c94d927bcd3ef/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f655c70668e1d6b8e7d438fb8c94d927bcd3ef/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=f7f655c70668e1d6b8e7d438fb8c94d927bcd3ef", "patch": "@@ -72,9 +72,13 @@ for (i = 0; i < n_opts; i++) {\n \tinit = opt_args(\"Init\", flags[i])\n \tif (init != \"\")\n \t\tinit = \" = \" init;\n+\telse if (name in var_seen)\n+\t\tcontinue;\n \n \tprintf (\"/* Set by -%s.\\n   %s  */\\nint %s%s;\\n\\n\",\n \t    opts[i], help[i], name,init)\n+\n+\tvar_seen[name] = 1;\n }\n \n "}, {"sha": "92c0e7e3723626215c4f32bb345cde3412b0314d", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f655c70668e1d6b8e7d438fb8c94d927bcd3ef/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f655c70668e1d6b8e7d438fb8c94d927bcd3ef/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=f7f655c70668e1d6b8e7d438fb8c94d927bcd3ef", "patch": "@@ -75,24 +75,43 @@ for (i = 0; i < n_opts; i++) {\n \n     }\n \n-masknum = 0\n for (i = 0; i < n_opts; i++) {\n \tname = opt_args(\"Mask\", flags[i])\n+\tvname = var_name(flags[i])\n+\tmask = \"MASK_\"\n+\tif (vname != \"\") {\n+\t\tmask = \"OPTION_MASK_\"\n+\t}\n \tif (name != \"\" && !flag_set_p(\"MaskExists\", flags[i]))\n-\t\tprint \"#define MASK_\" name \" (1 << \" masknum++ \")\"\n+\t\tprint \"#define \" mask name \" (1 << \" masknum[vname]++ \")\"\n }\n for (i = 0; i < n_extra_masks; i++) {\n-\tprint \"#define MASK_\" extra_masks[i] \" (1 << \" masknum++ \")\"\n+\tprint \"#define MASK_\" extra_masks[i] \" (1 << \" masknum[\"\"]++ \")\"\n+}\n+\n+for (var in masknum) {\n+\tif (masknum[var] > 31) {\n+\t\tif (var == \"\")\n+\t\t\tprint \"#error too many target masks\"\n+\t\telse\n+\t\t\tprint \"#error too many masks for \" var\n+\t}\n }\n-if (masknum > 31)\n-\tprint \"#error too many target masks\"\n print \"\"\n \n for (i = 0; i < n_opts; i++) {\n \tname = opt_args(\"Mask\", flags[i])\n+\tvname = var_name(flags[i])\n+\tmacro = \"OPTION_\"\n+\tmask = \"OPTION_MASK_\"\n+\tif (vname == \"\") {\n+\t\tvname = \"target_flags\"\n+\t\tmacro = \"TARGET_\"\n+\t\tmask = \"MASK_\"\n+\t}\n \tif (name != \"\" && !flag_set_p(\"MaskExists\", flags[i]))\n-\t\tprint \"#define TARGET_\" name \\\n-\t\t      \" ((target_flags & MASK_\" name \") != 0)\"\n+\t\tprint \"#define \" macro name \\\n+\t\t      \" ((\" vname \" & \" mask name \") != 0)\"\n }\n for (i = 0; i < n_extra_masks; i++) {\n \tprint \"#define TARGET_\" extra_masks[i] \\"}]}