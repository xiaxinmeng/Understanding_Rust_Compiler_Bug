{"sha": "28f7d9d05ad70afad626d4bc54c633d31eb7430a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhmN2Q5ZDA1YWQ3MGFmYWQ2MjZkNGJjNTRjNjMzZDMxZWI3NDMwYQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-04-25T15:45:15Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2001-04-25T15:45:15Z"}, "message": "decl.c (init_decl_processing): Add new class \"protectionDomain\" field.\n\ngcc/java:\n\n2001-04-25  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n\n\t* decl.c (init_decl_processing): Add new class \"protectionDomain\"\n\tfield.\n\t* class.c (make_class_data): Set initial value for \"protectionDomain\".\n\nlibjava:\n\n2001-04-25  Bryce McKinlay  <bryce@albatross.co.nz>\n\n\tjava.security merge and ClassLoader compliance fixes.\n\n\t* java/lang/Class.h (Class): Include ProtectionDomain.h.\n\tNew protectionDomain field.\n\t(forName): Add initialize parameter. Fixes declaration to comply with\n\tJDK spec.\n\t* java/lang/natClass.cc (forName): Correct declaration of the three-arg\n\tvariant. Honour\t\"initialize\" flag.\n\t(getProtectionDomain0): New method.\n\t* java/lang/Class.java: Fix forName() declaration.\n\t(getPackage): New method based on Classpath implementation.\n\t(getProtectionDomain0): New native method decl.\n\t(getProtectionDomain): New method.\n\t* java/lang/ClassLoader.java (getParent): Now final.\n\t(definedPackages): New field.\n\t(getPackage): New.\n\t(defineClass): New variant with protectionDomain argument.\n\t(definePackage): New.\n\t(getPackages): New.\n\t(findSystemClass): Now final.\n\t(getSystemResourceAsStream): Remove redundant \"final\" modifier.\n\t(getSystemResource): Remove redundant \"final\" modifier.\n\t(getResources): Now final.\n\t(protectionDomainPermission): New static field.\n\t(unknownProtectionDomain): Ditto.\n\t(defaultProtectionDomain): Ditto.\n\t(getSystemClassLoader): Now non-native.\n\t* java/util/ResourceBundle.java (tryGetSomeBundle): Use the correct\n\targuments for Class.forName().\n\t* java/lang/Package.java: New file.\n\t* gnu/gcj/runtime/VMClassLoader.java (getVMClassLoader): Removed.\n\t(instance): Static initialize singleton.\n\t(findClass): Override this, not findSystemClass.\n\t* java/lang/natClassLoader.cc (defineClass0): Set class's\n\tprotectionDomain field as specified.\n\t(getSystemClassLoader): Removed.\n\t(findClass): Renamed from findSystemClass. Call the interpreter via\n\tURLClassLoader.findClass if loading class via dlopen fails.\n\n\t* java/security/*.java: java.security import/merge with Classpath.\n\t* java/security/acl/*.java: Likewise.\n\t* java/security/interfaces/*.java: Likewise.\n\t* java/security/spec/*.java: Likewise.\n\t* java/net/NetPermission.java: Likewise.\n\t* java/net/SocketPermission.java: Likewise.\n\t* gnu/java/security/provider/DefaultPolicy.java: Likewise.\n\n\t* Makefile.am: Add new classes.\n\t* Makefile.in: Rebuilt.\n\t* gcj/javaprims.h: CNI namespace rebuild.\n\nFrom-SVN: r41543", "tree": {"sha": "e9e280e2d95c4a16d714ee23d9f0345ef0401260", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9e280e2d95c4a16d714ee23d9f0345ef0401260"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28f7d9d05ad70afad626d4bc54c633d31eb7430a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28f7d9d05ad70afad626d4bc54c633d31eb7430a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28f7d9d05ad70afad626d4bc54c633d31eb7430a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28f7d9d05ad70afad626d4bc54c633d31eb7430a/comments", "author": null, "committer": null, "parents": [{"sha": "744cfa53c3f98a0cb0d952a176c8bc03aee1abba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/744cfa53c3f98a0cb0d952a176c8bc03aee1abba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/744cfa53c3f98a0cb0d952a176c8bc03aee1abba"}], "stats": {"total": 13438, "additions": 11888, "deletions": 1550}, "files": [{"sha": "a1464cf82c770b53f3d5176ce6e7c61fc37634b9", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,3 +1,9 @@\n+2001-04-25  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n+\n+\t* decl.c (init_decl_processing): Add new class \"protectionDomain\"\n+\tfield.\n+\t* class.c (make_class_data): Set initial value for \"protectionDomain\".\n+\n 2001-04-22  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* jvspec.c (lang_specific_driver): Fix memory allocation"}, {"sha": "741881ff774e818000566c6865f3133ad007af2a", "filename": "gcc/java/class.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1455,6 +1455,7 @@ make_class_data (type)\n   PUSH_FIELD_VALUE (cons, \"ancestors\", null_pointer_node);\n   PUSH_FIELD_VALUE (cons, \"idt\", null_pointer_node);\n   PUSH_FIELD_VALUE (cons, \"arrayclass\", null_pointer_node);\n+  PUSH_FIELD_VALUE (cons, \"protectionDomain\", null_pointer_node);\n \n   FINISH_RECORD_CONSTRUCTOR (cons);\n "}, {"sha": "57bcf6154d6b2f4537b37fa78bd0e3a7e6d1786b", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -647,6 +647,7 @@ init_decl_processing ()\n   PUSH_FIELD (class_type_node, field, \"ancestors\", ptr_type_node);\n   PUSH_FIELD (class_type_node, field, \"idt\", ptr_type_node);  \n   PUSH_FIELD (class_type_node, field, \"arrayclass\", ptr_type_node);  \n+  PUSH_FIELD (class_type_node, field, \"protectionDomain\", ptr_type_node);\n   for (t = TYPE_FIELDS (class_type_node);  t != NULL_TREE;  t = TREE_CHAIN (t))\n     FIELD_PRIVATE (t) = 1;\n   push_super_field (class_type_node, object_type_node);"}, {"sha": "8a0812a8015d8ae9f096e6b269bd45e193eddad7", "filename": "libjava/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,3 +1,56 @@\n+2001-04-25  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\tjava.security merge and ClassLoader compliance fixes.\n+\n+\t* java/lang/Class.h (Class): Include ProtectionDomain.h. \n+\tNew protectionDomain field.\n+\t(forName): Add initialize parameter. Fixes declaration to comply with \n+\tJDK spec.\n+\t* java/lang/natClass.cc (forName): Correct declaration of the three-arg\n+\tvariant. Honour\t\"initialize\" flag.\n+\t(getProtectionDomain0): New method.\n+\t* java/lang/Class.java: Fix forName() declaration.\n+\t(getPackage): New method based on Classpath implementation.\n+\t(getProtectionDomain0): New native method decl.\n+\t(getProtectionDomain): New method.\n+\t* java/lang/ClassLoader.java (getParent): Now final.\n+\t(definedPackages): New field.\n+\t(getPackage): New.\n+\t(defineClass): New variant with protectionDomain argument.\n+\t(definePackage): New.\n+\t(getPackages): New.\n+\t(findSystemClass): Now final.\n+\t(getSystemResourceAsStream): Remove redundant \"final\" modifier.\n+\t(getSystemResource): Remove redundant \"final\" modifier.\n+\t(getResources): Now final.\n+\t(protectionDomainPermission): New static field.\n+\t(unknownProtectionDomain): Ditto.\n+\t(defaultProtectionDomain): Ditto.\n+\t(getSystemClassLoader): Now non-native.\n+\t* java/util/ResourceBundle.java (tryGetSomeBundle): Use the correct\n+\targuments for Class.forName().\n+\t* java/lang/Package.java: New file.\n+\t* gnu/gcj/runtime/VMClassLoader.java (getVMClassLoader): Removed.\n+\t(instance): Static initialize singleton.\n+\t(findClass): Override this, not findSystemClass.\n+\t* java/lang/natClassLoader.cc (defineClass0): Set class's\n+\tprotectionDomain field as specified.\n+\t(getSystemClassLoader): Removed.\n+\t(findClass): Renamed from findSystemClass. Call the interpreter via\n+\tURLClassLoader.findClass if loading class via dlopen fails.\n+\n+\t* java/security/*.java: java.security import/merge with Classpath.\n+\t* java/security/acl/*.java: Likewise.\n+\t* java/security/interfaces/*.java: Likewise.\n+\t* java/security/spec/*.java: Likewise.\n+\t* java/net/NetPermission.java: Likewise.\n+\t* java/net/SocketPermission.java: Likewise.\n+\t* gnu/java/security/provider/DefaultPolicy.java: Likewise.\n+\t\n+\t* Makefile.am: Add new classes.\n+\t* Makefile.in: Rebuilt.\n+\t* gcj/javaprims.h: CNI namespace rebuild.\n+\n 2001-04-24  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* configure.in (CPPFLAGS): Added builddir and srcdir to CPPFLAGS"}, {"sha": "0a61a4f998fbf185846834c28d92691d887ddcfc", "filename": "libjava/Makefile.am", "status": "modified", "additions": 68, "deletions": 9, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -843,6 +843,7 @@ java/lang/NullPointerException.java \\\n java/lang/Number.java \\\n java/lang/NumberFormatException.java \\\n java/lang/OutOfMemoryError.java\t\\\n+java/lang/Package.java \\\n java/lang/Process.java \\\n java/lang/Runnable.java\t\\\n java/lang/Runtime.java \\\n@@ -1036,6 +1037,7 @@ gnu/java/locale/Calendar.java \\\n gnu/java/locale/Calendar_de.java \\\n gnu/java/locale/Calendar_en.java \\\n gnu/java/locale/Calendar_nl.java \\\n+gnu/java/security/provider/DefaultPolicy.java \\\n gnu/java/security/provider/Gnu.java \\\n gnu/java/security/provider/SHA.java \\\n gnu/java/security/provider/SHA1PRNG.java \\\n@@ -1068,6 +1070,7 @@ java/net/InetAddress.java \\\n java/net/JarURLConnection.java \\\n java/net/MalformedURLException.java \\\n java/net/MulticastSocket.java \\\n+java/net/NetPermission.java \\\n java/net/NoRouteToHostException.java \\\n java/net/PlainDatagramSocketImpl.java \\\n java/net/PlainSocketImpl.java \\\n@@ -1078,6 +1081,7 @@ java/net/SocketException.java \\\n java/net/SocketImpl.java \\\n java/net/SocketImplFactory.java\t\\\n java/net/SocketOptions.java \\\n+java/net/SocketPermission.java \\\n java/net/URL.java \\\n java/net/URLClassLoader.java \\\n java/net/URLConnection.java \\\n@@ -1087,34 +1091,80 @@ java/net/URLStreamHandler.java \\\n java/net/URLStreamHandlerFactory.java \\\n java/net/UnknownHostException.java \\\n java/net/UnknownServiceException.java \\\n+java/security/AccessControlContext.java \\\n+java/security/AccessControlException.java \\\n+java/security/AccessController.java \\\n+java/security/AlgorithmParameterGenerator.java \\\n+java/security/AlgorithmParameters.java \\\n java/security/AlgorithmParameterGeneratorSpi.java \\\n+java/security/AlgorithmParametersSpi.java \\\n+java/security/AllPermission.java \\\n java/security/BasicPermission.java \\\n+java/security/Certificate.java \\\n+java/security/CodeSource.java \\\n java/security/DigestException.java \\\n java/security/DigestOutputStream.java \\\n+java/security/DummyKeyPairGenerator.java \\\n+java/security/DummySignature.java \\\n+java/security/DigestInputStream.java \\\n+java/security/DomainCombiner.java \\\n+java/security/DummyMessageDigest.java \\\n java/security/GeneralSecurityException.java \\\n java/security/Guard.java \\\n+java/security/GuardedObject.java \\\n+java/security/Identity.java \\\n+java/security/IdentityScope.java \\\n java/security/InvalidAlgorithmParameterException.java \\\n java/security/InvalidKeyException.java \\\n java/security/InvalidParameterException.java \\\n java/security/Key.java \\\n-java/security/KeyException.java\t\\\n-java/security/KeyPair.java \\\n+java/security/KeyFactorySpi.java \\\n java/security/KeyPairGenerator.java \\\n+java/security/KeyStoreException.java \\\n+java/security/KeyException.java \\\n+java/security/KeyManagementException.java \\\n java/security/KeyPairGeneratorSpi.java \\\n+java/security/KeyStoreSpi.java \\\n+java/security/KeyFactory.java \\\n+java/security/KeyPair.java \\\n+java/security/KeyStore.java \\\n java/security/MessageDigest.java \\\n+java/security/MessageDigestSpi.java \\\n java/security/NoSuchAlgorithmException.java \\\n java/security/NoSuchProviderException.java \\\n java/security/Permission.java \\\n-java/security/PermissionCollection.java\t\\\n java/security/Principal.java \\\n+java/security/PrivilegedExceptionAction.java \\\n+java/security/PublicKey.java \\\n+java/security/PermissionCollection.java \\\n java/security/PrivateKey.java \\\n+java/security/ProtectionDomain.java \\\n+java/security/Permissions.java \\\n+java/security/PrivilegedAction.java \\\n java/security/Provider.java \\\n-java/security/PublicKey.java \\\n+java/security/Policy.java \\\n+java/security/PrivilegedActionException.java \\\n+java/security/ProviderException.java \\\n java/security/SecureClassLoader.java \\\n-java/security/SecureRandom.java\t\\\n+java/security/SecureRandomSpi.java \\\n+java/security/SecurityPermission.java \\\n+java/security/SignatureException.java \\\n+java/security/SignedObject.java \\\n+java/security/SecureRandom.java \\\n java/security/Security.java \\\n java/security/Signature.java \\\n-java/security/SignatureException.java \\\n+java/security/SignatureSpi.java \\\n+java/security/Signer.java \\\n+java/security/UnrecoverableKeyException.java \\\n+java/security/UnresolvedPermission.java \\\n+java/security/acl/Acl.java \\\n+java/security/acl/AclNotFoundException.java \\\n+java/security/acl/LastOwnerException.java \\\n+java/security/acl/Owner.java \\\n+java/security/acl/AclEntry.java \\\n+java/security/acl/Group.java \\\n+java/security/acl/NotOwnerException.java \\\n+java/security/acl/Permission.java \\\n java/security/cert/CRL.java \\\n java/security/cert/CRLException.java \\\n java/security/cert/Certificate.java \\\n@@ -1130,19 +1180,28 @@ java/security/cert/X509CRLEntry.java \\\n java/security/cert/X509Certificate.java \\\n java/security/cert/X509Extension.java \\\n java/security/interfaces/DSAKey.java \\\n-java/security/interfaces/DSAParams.java\t\\\n+java/security/interfaces/DSAKeyPairGenerator.java \\\n+java/security/interfaces/DSAParams.java \\\n java/security/interfaces/DSAPrivateKey.java \\\n java/security/interfaces/DSAPublicKey.java \\\n+java/security/interfaces/RSAKey.java \\\n java/security/interfaces/RSAPrivateCrtKey.java \\\n java/security/interfaces/RSAPrivateKey.java \\\n java/security/interfaces/RSAPublicKey.java \\\n java/security/spec/AlgorithmParameterSpec.java \\\n-java/security/spec/InvalidKeySpecException.java\t\\\n+java/security/spec/DSAParameterSpec.java \\\n+java/security/spec/DSAPrivateKeySpec.java \\\n+java/security/spec/DSAPublicKeySpec.java \\\n+java/security/spec/EncodedKeySpec.java \\\n+java/security/spec/InvalidKeySpecException.java \\\n java/security/spec/InvalidParameterSpecException.java \\\n-java/security/spec/KeySpec.java\t\\\n+java/security/spec/KeySpec.java \\\n+java/security/spec/PKCS8EncodedKeySpec.java \\\n+java/security/spec/RSAKeyGenParameterSpec.java \\\n java/security/spec/RSAPrivateCrtKeySpec.java \\\n java/security/spec/RSAPrivateKeySpec.java \\\n java/security/spec/RSAPublicKeySpec.java \\\n+java/security/spec/X509EncodedKeySpec.java \\\n java/sql/Array.java \\\n java/sql/BatchUpdateException.java \\\n java/sql/Blob.java \\"}, {"sha": "b191f8602e5131fe51636fda53e2b7c6810ac08d", "filename": "libjava/Makefile.in", "status": "modified", "additions": 152, "deletions": 64, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -119,43 +119,29 @@ here = @here@\n libgcj_basedir = @libgcj_basedir@\n \n AUTOMAKE_OPTIONS = foreign\n-@TESTSUBDIR_TRUE@SUBDIRS = \\\n-@TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n-@TESTSUBDIR_FALSE@SUBDIRS = \\\n-@TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n-@USE_LIBDIR_TRUE@toolexeclibdir = \\\n-@USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = \\\n-@USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexecdir = \\\n-@USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n-@XLIB_AWT_TRUE@cond_x_ltlibrary = \\\n-@XLIB_AWT_TRUE@libgcjx.la\n-@XLIB_AWT_FALSE@cond_x_ltlibrary = \\\n+@TESTSUBDIR_TRUE@SUBDIRS = @TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n+@TESTSUBDIR_FALSE@SUBDIRS = @TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n+@USE_LIBDIR_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n+@XLIB_AWT_TRUE@cond_x_ltlibrary = @XLIB_AWT_TRUE@libgcjx.la\n+@XLIB_AWT_FALSE@cond_x_ltlibrary = \n \n toolexeclib_LTLIBRARIES = libgcj.la $(cond_x_ltlibrary)\n toolexeclib_DATA = libgcj.spec\n data_DATA = libgcj.jar\n \n-@NEEDS_DATA_START_TRUE@toolexeclib_LIBRARIES = \\\n-@NEEDS_DATA_START_TRUE@libgcjdata.a\n-@NEEDS_DATA_START_TRUE@libgcjdata_a_SOURCES = \\\n-@NEEDS_DATA_START_TRUE@libgcjdata.c\n+@NEEDS_DATA_START_TRUE@toolexeclib_LIBRARIES = @NEEDS_DATA_START_TRUE@libgcjdata.a\n+@NEEDS_DATA_START_TRUE@libgcjdata_a_SOURCES = @NEEDS_DATA_START_TRUE@libgcjdata.c\n \n-@NATIVE_TRUE@bin_PROGRAMS = \\\n-@NATIVE_TRUE@jv-convert gij\n+@NATIVE_TRUE@bin_PROGRAMS = @NATIVE_TRUE@jv-convert gij\n \n bin_SCRIPTS = addr2name.awk\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = \\\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/fastjar$(EXEEXT)\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = \\\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@fastjar\n-@CANADIAN_FALSE@ZIP = \\\n-@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/fastjar$(EXEEXT)\n-@CANADIAN_TRUE@GCJH = \\\n-@CANADIAN_TRUE@gcjh\n-@CANADIAN_FALSE@GCJH = \\\n-@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = @CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/fastjar$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = @CANADIAN_TRUE@@NULL_TARGET_FALSE@fastjar\n+@CANADIAN_FALSE@ZIP = @CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/fastjar$(EXEEXT)\n+@CANADIAN_TRUE@GCJH = @CANADIAN_TRUE@gcjh\n+@CANADIAN_FALSE@GCJH = @CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n \n GCJ_WITH_FLAGS = $(GCJ) --encoding=UTF-8\n \n@@ -174,10 +160,8 @@ AM_CXXFLAGS = -fno-rtti -fvtable-thunks -fnon-call-exceptions \\\n \t-fdollars-in-identifiers \\\n \t@LIBGCJ_CXXFLAGS@ @X_CFLAGS@ $(WARNINGS) -D_GNU_SOURCE\n \n-@USING_GCC_TRUE@AM_CFLAGS = \\\n-@USING_GCC_TRUE@@LIBGCJ_CFLAGS@ $(WARNINGS)\n-@USING_GCC_FALSE@AM_CFLAGS = \\\n-@USING_GCC_FALSE@@LIBGCJ_CFLAGS@\n+@USING_GCC_TRUE@AM_CFLAGS = @USING_GCC_TRUE@@LIBGCJ_CFLAGS@ $(WARNINGS)\n+@USING_GCC_FALSE@AM_CFLAGS = @USING_GCC_FALSE@@LIBGCJ_CFLAGS@\n \n JCFLAGS = -g\n JC1FLAGS = @LIBGCJ_JAVAFLAGS@ $(GCJFLAGS)\n@@ -245,8 +229,7 @@ extra_headers = java/lang/Object.h java/lang/Class.h\n \n NM = nm\n \n-@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = \\\n-@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS\n+@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = @NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS\n \n CONVERT_DIR = gnu/gcj/convert\n \n@@ -592,6 +575,7 @@ java/lang/NullPointerException.java \\\n java/lang/Number.java \\\n java/lang/NumberFormatException.java \\\n java/lang/OutOfMemoryError.java\t\\\n+java/lang/Package.java \\\n java/lang/Process.java \\\n java/lang/Runnable.java\t\\\n java/lang/Runtime.java \\\n@@ -779,6 +763,7 @@ gnu/java/locale/Calendar.java \\\n gnu/java/locale/Calendar_de.java \\\n gnu/java/locale/Calendar_en.java \\\n gnu/java/locale/Calendar_nl.java \\\n+gnu/java/security/provider/DefaultPolicy.java \\\n gnu/java/security/provider/Gnu.java \\\n gnu/java/security/provider/SHA.java \\\n gnu/java/security/provider/SHA1PRNG.java \\\n@@ -811,6 +796,7 @@ java/net/InetAddress.java \\\n java/net/JarURLConnection.java \\\n java/net/MalformedURLException.java \\\n java/net/MulticastSocket.java \\\n+java/net/NetPermission.java \\\n java/net/NoRouteToHostException.java \\\n java/net/PlainDatagramSocketImpl.java \\\n java/net/PlainSocketImpl.java \\\n@@ -821,6 +807,7 @@ java/net/SocketException.java \\\n java/net/SocketImpl.java \\\n java/net/SocketImplFactory.java\t\\\n java/net/SocketOptions.java \\\n+java/net/SocketPermission.java \\\n java/net/URL.java \\\n java/net/URLClassLoader.java \\\n java/net/URLConnection.java \\\n@@ -830,34 +817,80 @@ java/net/URLStreamHandler.java \\\n java/net/URLStreamHandlerFactory.java \\\n java/net/UnknownHostException.java \\\n java/net/UnknownServiceException.java \\\n+java/security/AccessControlContext.java \\\n+java/security/AccessControlException.java \\\n+java/security/AccessController.java \\\n+java/security/AlgorithmParameterGenerator.java \\\n+java/security/AlgorithmParameters.java \\\n java/security/AlgorithmParameterGeneratorSpi.java \\\n+java/security/AlgorithmParametersSpi.java \\\n+java/security/AllPermission.java \\\n java/security/BasicPermission.java \\\n+java/security/Certificate.java \\\n+java/security/CodeSource.java \\\n java/security/DigestException.java \\\n java/security/DigestOutputStream.java \\\n+java/security/DummyKeyPairGenerator.java \\\n+java/security/DummySignature.java \\\n+java/security/DigestInputStream.java \\\n+java/security/DomainCombiner.java \\\n+java/security/DummyMessageDigest.java \\\n java/security/GeneralSecurityException.java \\\n java/security/Guard.java \\\n+java/security/GuardedObject.java \\\n+java/security/Identity.java \\\n+java/security/IdentityScope.java \\\n java/security/InvalidAlgorithmParameterException.java \\\n java/security/InvalidKeyException.java \\\n java/security/InvalidParameterException.java \\\n java/security/Key.java \\\n-java/security/KeyException.java\t\\\n-java/security/KeyPair.java \\\n+java/security/KeyFactorySpi.java \\\n java/security/KeyPairGenerator.java \\\n+java/security/KeyStoreException.java \\\n+java/security/KeyException.java \\\n+java/security/KeyManagementException.java \\\n java/security/KeyPairGeneratorSpi.java \\\n+java/security/KeyStoreSpi.java \\\n+java/security/KeyFactory.java \\\n+java/security/KeyPair.java \\\n+java/security/KeyStore.java \\\n java/security/MessageDigest.java \\\n+java/security/MessageDigestSpi.java \\\n java/security/NoSuchAlgorithmException.java \\\n java/security/NoSuchProviderException.java \\\n java/security/Permission.java \\\n-java/security/PermissionCollection.java\t\\\n java/security/Principal.java \\\n+java/security/PrivilegedExceptionAction.java \\\n+java/security/PublicKey.java \\\n+java/security/PermissionCollection.java \\\n java/security/PrivateKey.java \\\n+java/security/ProtectionDomain.java \\\n+java/security/Permissions.java \\\n+java/security/PrivilegedAction.java \\\n java/security/Provider.java \\\n-java/security/PublicKey.java \\\n+java/security/Policy.java \\\n+java/security/PrivilegedActionException.java \\\n+java/security/ProviderException.java \\\n java/security/SecureClassLoader.java \\\n-java/security/SecureRandom.java\t\\\n+java/security/SecureRandomSpi.java \\\n+java/security/SecurityPermission.java \\\n+java/security/SignatureException.java \\\n+java/security/SignedObject.java \\\n+java/security/SecureRandom.java \\\n java/security/Security.java \\\n java/security/Signature.java \\\n-java/security/SignatureException.java \\\n+java/security/SignatureSpi.java \\\n+java/security/Signer.java \\\n+java/security/UnrecoverableKeyException.java \\\n+java/security/UnresolvedPermission.java \\\n+java/security/acl/Acl.java \\\n+java/security/acl/AclNotFoundException.java \\\n+java/security/acl/LastOwnerException.java \\\n+java/security/acl/Owner.java \\\n+java/security/acl/AclEntry.java \\\n+java/security/acl/Group.java \\\n+java/security/acl/NotOwnerException.java \\\n+java/security/acl/Permission.java \\\n java/security/cert/CRL.java \\\n java/security/cert/CRLException.java \\\n java/security/cert/Certificate.java \\\n@@ -873,19 +906,28 @@ java/security/cert/X509CRLEntry.java \\\n java/security/cert/X509Certificate.java \\\n java/security/cert/X509Extension.java \\\n java/security/interfaces/DSAKey.java \\\n-java/security/interfaces/DSAParams.java\t\\\n+java/security/interfaces/DSAKeyPairGenerator.java \\\n+java/security/interfaces/DSAParams.java \\\n java/security/interfaces/DSAPrivateKey.java \\\n java/security/interfaces/DSAPublicKey.java \\\n+java/security/interfaces/RSAKey.java \\\n java/security/interfaces/RSAPrivateCrtKey.java \\\n java/security/interfaces/RSAPrivateKey.java \\\n java/security/interfaces/RSAPublicKey.java \\\n java/security/spec/AlgorithmParameterSpec.java \\\n-java/security/spec/InvalidKeySpecException.java\t\\\n+java/security/spec/DSAParameterSpec.java \\\n+java/security/spec/DSAPrivateKeySpec.java \\\n+java/security/spec/DSAPublicKeySpec.java \\\n+java/security/spec/EncodedKeySpec.java \\\n+java/security/spec/InvalidKeySpecException.java \\\n java/security/spec/InvalidParameterSpecException.java \\\n-java/security/spec/KeySpec.java\t\\\n+java/security/spec/KeySpec.java \\\n+java/security/spec/PKCS8EncodedKeySpec.java \\\n+java/security/spec/RSAKeyGenParameterSpec.java \\\n java/security/spec/RSAPrivateCrtKeySpec.java \\\n java/security/spec/RSAPrivateKeySpec.java \\\n java/security/spec/RSAPublicKeySpec.java \\\n+java/security/spec/X509EncodedKeySpec.java \\\n java/sql/Array.java \\\n java/sql/BatchUpdateException.java \\\n java/sql/Blob.java \\\n@@ -1320,6 +1362,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/lang/reflect/TypeSignature.P \\\n .deps/gnu/java/locale/Calendar.P .deps/gnu/java/locale/Calendar_de.P \\\n .deps/gnu/java/locale/Calendar_en.P .deps/gnu/java/locale/Calendar_nl.P \\\n+.deps/gnu/java/security/provider/DefaultPolicy.P \\\n .deps/gnu/java/security/provider/Gnu.P \\\n .deps/gnu/java/security/provider/SHA.P \\\n .deps/gnu/java/security/provider/SHA1PRNG.P .deps/interpret.P \\\n@@ -1546,12 +1589,13 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/lang/NoSuchMethodException.P \\\n .deps/java/lang/NullPointerException.P .deps/java/lang/Number.P \\\n .deps/java/lang/NumberFormatException.P .deps/java/lang/Object.P \\\n-.deps/java/lang/OutOfMemoryError.P .deps/java/lang/Process.P \\\n-.deps/java/lang/Runnable.P .deps/java/lang/Runtime.P \\\n-.deps/java/lang/RuntimeException.P .deps/java/lang/RuntimePermission.P \\\n-.deps/java/lang/SecurityException.P .deps/java/lang/SecurityManager.P \\\n-.deps/java/lang/Short.P .deps/java/lang/StackOverflowError.P \\\n-.deps/java/lang/String.P .deps/java/lang/StringBuffer.P \\\n+.deps/java/lang/OutOfMemoryError.P .deps/java/lang/Package.P \\\n+.deps/java/lang/Process.P .deps/java/lang/Runnable.P \\\n+.deps/java/lang/Runtime.P .deps/java/lang/RuntimeException.P \\\n+.deps/java/lang/RuntimePermission.P .deps/java/lang/SecurityException.P \\\n+.deps/java/lang/SecurityManager.P .deps/java/lang/Short.P \\\n+.deps/java/lang/StackOverflowError.P .deps/java/lang/String.P \\\n+.deps/java/lang/StringBuffer.P \\\n .deps/java/lang/StringIndexOutOfBoundsException.P \\\n .deps/java/lang/System.P .deps/java/lang/Thread.P \\\n .deps/java/lang/ThreadDeath.P .deps/java/lang/ThreadGroup.P \\\n@@ -1605,45 +1649,80 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/net/HttpURLConnection.P .deps/java/net/InetAddress.P \\\n .deps/java/net/JarURLConnection.P \\\n .deps/java/net/MalformedURLException.P .deps/java/net/MulticastSocket.P \\\n-.deps/java/net/NoRouteToHostException.P \\\n+.deps/java/net/NetPermission.P .deps/java/net/NoRouteToHostException.P \\\n .deps/java/net/PlainDatagramSocketImpl.P \\\n .deps/java/net/PlainSocketImpl.P .deps/java/net/ProtocolException.P \\\n .deps/java/net/ServerSocket.P .deps/java/net/Socket.P \\\n .deps/java/net/SocketException.P .deps/java/net/SocketImpl.P \\\n .deps/java/net/SocketImplFactory.P .deps/java/net/SocketOptions.P \\\n-.deps/java/net/URL.P .deps/java/net/URLClassLoader.P \\\n-.deps/java/net/URLConnection.P .deps/java/net/URLDecoder.P \\\n-.deps/java/net/URLEncoder.P .deps/java/net/URLStreamHandler.P \\\n+.deps/java/net/SocketPermission.P .deps/java/net/URL.P \\\n+.deps/java/net/URLClassLoader.P .deps/java/net/URLConnection.P \\\n+.deps/java/net/URLDecoder.P .deps/java/net/URLEncoder.P \\\n+.deps/java/net/URLStreamHandler.P \\\n .deps/java/net/URLStreamHandlerFactory.P \\\n .deps/java/net/UnknownHostException.P \\\n .deps/java/net/UnknownServiceException.P \\\n .deps/java/net/natInetAddress.P \\\n .deps/java/net/natPlainDatagramSocketImpl.P \\\n .deps/java/net/natPlainSocketImpl.P \\\n+.deps/java/security/AccessControlContext.P \\\n+.deps/java/security/AccessControlException.P \\\n+.deps/java/security/AccessController.P \\\n+.deps/java/security/AlgorithmParameterGenerator.P \\\n .deps/java/security/AlgorithmParameterGeneratorSpi.P \\\n-.deps/java/security/BasicPermission.P \\\n-.deps/java/security/DigestException.P \\\n+.deps/java/security/AlgorithmParameters.P \\\n+.deps/java/security/AlgorithmParametersSpi.P \\\n+.deps/java/security/AllPermission.P \\\n+.deps/java/security/BasicPermission.P .deps/java/security/Certificate.P \\\n+.deps/java/security/CodeSource.P .deps/java/security/DigestException.P \\\n+.deps/java/security/DigestInputStream.P \\\n .deps/java/security/DigestOutputStream.P \\\n+.deps/java/security/DomainCombiner.P \\\n+.deps/java/security/DummyKeyPairGenerator.P \\\n+.deps/java/security/DummyMessageDigest.P \\\n+.deps/java/security/DummySignature.P \\\n .deps/java/security/GeneralSecurityException.P \\\n-.deps/java/security/Guard.P \\\n+.deps/java/security/Guard.P .deps/java/security/GuardedObject.P \\\n+.deps/java/security/Identity.P .deps/java/security/IdentityScope.P \\\n .deps/java/security/InvalidAlgorithmParameterException.P \\\n .deps/java/security/InvalidKeyException.P \\\n .deps/java/security/InvalidParameterException.P \\\n .deps/java/security/Key.P .deps/java/security/KeyException.P \\\n+.deps/java/security/KeyFactory.P .deps/java/security/KeyFactorySpi.P \\\n+.deps/java/security/KeyManagementException.P \\\n .deps/java/security/KeyPair.P .deps/java/security/KeyPairGenerator.P \\\n .deps/java/security/KeyPairGeneratorSpi.P \\\n-.deps/java/security/MessageDigest.P \\\n+.deps/java/security/KeyStore.P .deps/java/security/KeyStoreException.P \\\n+.deps/java/security/KeyStoreSpi.P .deps/java/security/MessageDigest.P \\\n+.deps/java/security/MessageDigestSpi.P \\\n .deps/java/security/NoSuchAlgorithmException.P \\\n .deps/java/security/NoSuchProviderException.P \\\n .deps/java/security/Permission.P \\\n .deps/java/security/PermissionCollection.P \\\n+.deps/java/security/Permissions.P .deps/java/security/Policy.P \\\n .deps/java/security/Principal.P .deps/java/security/PrivateKey.P \\\n-.deps/java/security/Provider.P .deps/java/security/PublicKey.P \\\n+.deps/java/security/PrivilegedAction.P \\\n+.deps/java/security/PrivilegedActionException.P \\\n+.deps/java/security/PrivilegedExceptionAction.P \\\n+.deps/java/security/ProtectionDomain.P .deps/java/security/Provider.P \\\n+.deps/java/security/ProviderException.P .deps/java/security/PublicKey.P \\\n .deps/java/security/SecureClassLoader.P \\\n-.deps/java/security/SecureRandom.P .deps/java/security/Security.P \\\n+.deps/java/security/SecureRandom.P \\\n+.deps/java/security/SecureRandomSpi.P .deps/java/security/Security.P \\\n+.deps/java/security/SecurityPermission.P \\\n .deps/java/security/Signature.P \\\n-.deps/java/security/SignatureException.P .deps/java/security/cert/CRL.P \\\n-.deps/java/security/cert/CRLException.P \\\n+.deps/java/security/SignatureException.P \\\n+.deps/java/security/SignatureSpi.P .deps/java/security/SignedObject.P \\\n+.deps/java/security/Signer.P \\\n+.deps/java/security/UnrecoverableKeyException.P \\\n+.deps/java/security/UnresolvedPermission.P \\\n+.deps/java/security/acl/Acl.P .deps/java/security/acl/AclEntry.P \\\n+.deps/java/security/acl/AclNotFoundException.P \\\n+.deps/java/security/acl/Group.P \\\n+.deps/java/security/acl/LastOwnerException.P \\\n+.deps/java/security/acl/NotOwnerException.P \\\n+.deps/java/security/acl/Owner.P .deps/java/security/acl/Permission.P \\\n+.deps/java/security/cert/CRL.P .deps/java/security/cert/CRLException.P \\\n .deps/java/security/cert/Certificate.P \\\n .deps/java/security/cert/CertificateEncodingException.P \\\n .deps/java/security/cert/CertificateException.P \\\n@@ -1657,19 +1736,28 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/security/cert/X509Certificate.P \\\n .deps/java/security/cert/X509Extension.P \\\n .deps/java/security/interfaces/DSAKey.P \\\n+.deps/java/security/interfaces/DSAKeyPairGenerator.P \\\n .deps/java/security/interfaces/DSAParams.P \\\n .deps/java/security/interfaces/DSAPrivateKey.P \\\n .deps/java/security/interfaces/DSAPublicKey.P \\\n+.deps/java/security/interfaces/RSAKey.P \\\n .deps/java/security/interfaces/RSAPrivateCrtKey.P \\\n .deps/java/security/interfaces/RSAPrivateKey.P \\\n .deps/java/security/interfaces/RSAPublicKey.P \\\n .deps/java/security/spec/AlgorithmParameterSpec.P \\\n+.deps/java/security/spec/DSAParameterSpec.P \\\n+.deps/java/security/spec/DSAPrivateKeySpec.P \\\n+.deps/java/security/spec/DSAPublicKeySpec.P \\\n+.deps/java/security/spec/EncodedKeySpec.P \\\n .deps/java/security/spec/InvalidKeySpecException.P \\\n .deps/java/security/spec/InvalidParameterSpecException.P \\\n .deps/java/security/spec/KeySpec.P \\\n+.deps/java/security/spec/PKCS8EncodedKeySpec.P \\\n+.deps/java/security/spec/RSAKeyGenParameterSpec.P \\\n .deps/java/security/spec/RSAPrivateCrtKeySpec.P \\\n .deps/java/security/spec/RSAPrivateKeySpec.P \\\n-.deps/java/security/spec/RSAPublicKeySpec.P .deps/java/sql/Array.P \\\n+.deps/java/security/spec/RSAPublicKeySpec.P \\\n+.deps/java/security/spec/X509EncodedKeySpec.P .deps/java/sql/Array.P \\\n .deps/java/sql/BatchUpdateException.P .deps/java/sql/Blob.P \\\n .deps/java/sql/CallableStatement.P .deps/java/sql/Clob.P \\\n .deps/java/sql/Connection.P .deps/java/sql/DataTruncation.P \\\n@@ -2111,7 +2199,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  d=$(srcdir); \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\"}, {"sha": "de121242e947bcd29db5e60cccff82558690702b", "filename": "libjava/gcj/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fgcj%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fgcj%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2FMakefile.in?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -202,7 +202,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  d=$(srcdir); \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\"}, {"sha": "f16e97db9038d203930d0f44cfec9ce3bfe89b8f", "filename": "libjava/gcj/javaprims.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fgcj%2Fjavaprims.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fgcj%2Fjavaprims.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Fjavaprims.h?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -39,7 +39,6 @@ extern \"Java\"\n   {\n     namespace io\n     {\n-      class BlockDataException;\n       class BufferedInputStream;\n       class BufferedOutputStream;\n       class BufferedReader;\n@@ -176,6 +175,7 @@ extern \"Java\"\n       class NumberFormatException;\n       class Object;\n       class OutOfMemoryError;\n+      class Package;\n       class Process;\n       class Runnable;\n       class Runtime;\n@@ -233,10 +233,12 @@ extern \"Java\"\n       class ArrayList;\n       class Arrays;\n       class Arrays$ListImpl;\n+      class BasicMapEntry;\n       class BitSet;\n       class Calendar;\n       class Collection;\n       class Collections;\n+      class Collections$ReverseComparator;\n       class Collections$SynchronizedCollection;\n       class Collections$SynchronizedIterator;\n       class Collections$SynchronizedList;\n@@ -302,6 +304,12 @@ extern \"Java\"\n       class Timer$TaskQueue;\n       class TimerTask;\n       class TooManyListenersException;\n+      class TreeMap;\n+      class TreeMap$Node;\n+      class TreeMap$SubMap;\n+      class TreeMap$TreeIterator;\n+      class TreeMap$VerifyResult;\n+      class TreeSet;\n       class Vector;\n       class WeakHashMap;\n       class WeakHashMap$Entry;"}, {"sha": "cc3436928ece69ab9099b722d23a1f9f1442ed86", "filename": "libjava/gnu/gcj/runtime/VMClassLoader.java", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fgnu%2Fgcj%2Fruntime%2FVMClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fgnu%2Fgcj%2Fruntime%2FVMClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FVMClassLoader.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -65,18 +65,11 @@ else if (new File (e).isDirectory ())\n   /** This is overridden to search the internal hash table, which \n    * will only search existing linked-in classes.   This will make\n    * the default implementation of loadClass (in ClassLoader) work right.\n+   * The implementation of this method is in java/lang/natClassLoader.cc.\n    */\n-  protected final native Class findSystemClass(String name) \n-    throws java.lang.ClassNotFoundException, java.lang.LinkageError;\n-\n-  // Return the sole VMClassLoader.\n-  private static synchronized VMClassLoader getVMClassLoader ()\n-  {\n-    if (redirect == null)\n-      redirect = new VMClassLoader ();\n-    return redirect;\n-  }\n+  protected native Class findClass(String name) \n+    throws java.lang.ClassNotFoundException;\n \n   // The only VMClassLoader that can exist.\n-  private static VMClassLoader redirect;\n+  public static VMClassLoader instance = new VMClassLoader ();\n }"}, {"sha": "a4b9f35c12d20ec3d145e2b337811253595442c1", "filename": "libjava/gnu/java/security/provider/DefaultPolicy.java", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FDefaultPolicy.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FDefaultPolicy.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FDefaultPolicy.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,55 @@\n+/* DefaultPolicy.java \n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package gnu.java.security.provider;\n+\n+import java.security.*;\n+\n+/** \n+  * This is just a stub policy implementation which grants all permissions\n+  * to any code source. FIXME: This should be replaced with a real\n+  * implementation that reads the policy configuration from a file, like\n+  * $JAVA_HOME/jre/lib/security/java.security.\n+  */\n+public class DefaultPolicy extends Policy\n+{\n+  static Permissions allPermissions = new Permissions();\n+  \n+  static\n+  {\n+    allPermissions.add(new AllPermission());\n+  }\n+\n+  public PermissionCollection getPermissions(CodeSource codesource)\n+  {\n+    return allPermissions;\n+  }\n+  \n+  public void refresh()\n+  {\n+    // Nothing.\n+  }\n+}"}, {"sha": "a0cd730ef26ed89e497938a71a7762687facb22c", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -19,6 +19,7 @@ details.  */\n #include <java/lang/String.h>\n #include <java/net/URL.h>\n #include <java/lang/reflect/Modifier.h>\n+#include <java/security/ProtectionDomain.h>\n \n // We declare these here to avoid including gcj/cni.h.\n extern \"C\" void _Jv_InitClass (jclass klass);\n@@ -105,7 +106,8 @@ struct _Jv_ifaces\n class java::lang::Class : public java::lang::Object\n {\n public:\n-  static jclass forName (jstring className, java::lang::ClassLoader *loader);\n+  static jclass forName (jstring className, jboolean initialize, \n+\t\t\t java::lang::ClassLoader *loader);\n   static jclass forName (jstring className);\n   JArray<jclass> *getClasses (void);\n \n@@ -135,6 +137,7 @@ class java::lang::Class : public java::lang::Object\n \t\t    jint offset);\n   java::lang::reflect::Field *getPrivateField (jstring);\n   java::lang::reflect::Method *getPrivateMethod (jstring, JArray<jclass> *);\n+  java::security::ProtectionDomain *getProtectionDomain0 ();\n \n public:\n   JArray<java::lang::reflect::Field *> *getFields (void);\n@@ -380,6 +383,8 @@ class java::lang::Class : public java::lang::Object\n   _Jv_IDispatchTable *idt;\n   // Pointer to the class that represents an array of this class.\n   jclass arrayclass;\n+  // Security Domain to which this class belongs (or null).\n+  java::security::ProtectionDomain *protectionDomain;\n };\n \n #endif /* __JAVA_LANG_CLASS_H__ */"}, {"sha": "549eaec9cf2172740df55d0db9ed393186104c9b", "filename": "libjava/java/lang/Class.java", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Flang%2FClass.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Flang%2FClass.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -12,6 +12,7 @@\n import java.io.Serializable;\n import java.io.InputStream;\n import java.lang.reflect.*;\n+import java.security.*;\n \n /**\n  * @author Tom Tromey <tromey@cygnus.com>\n@@ -30,7 +31,9 @@ public final class Class implements Serializable\n {\n   public static native Class forName (String className)\n     throws ClassNotFoundException;\n-  public static native Class forName (String className, ClassLoader loader)\n+  /** @since 1.2 */\n+  public static native Class forName (String className, boolean initialize,\n+\t\t\t\t      ClassLoader loader)\n     throws ClassNotFoundException;\n   public native Class[] getClasses ();\n   public native ClassLoader getClassLoader ();\n@@ -88,6 +91,30 @@ public Field getField (String fieldName)\n   private native Field[] _getFields (Field[] result, int offset);\n   public native Field[] getFields () throws SecurityException;\n \n+  /**\n+   * Returns the <code>Package</code> in which this class is defined\n+   * Returns null when this information is not available from the\n+   * classloader of this class or when the classloader of this class\n+   * is null.\n+   *\n+   * @since 1.2\n+   */\n+  public Package getPackage()\n+  {\n+    ClassLoader cl = getClassLoader();\n+    if (cl != null)\n+      {\n+        String name = getName();\n+\tString pkg = \"\";\n+\tint idx = name.lastIndexOf('.');\n+\tif (idx >= 0)\n+\t  pkg = name.substring(0, idx);\n+\treturn cl.getPackage(pkg);\n+      }\n+    else\n+      return null;\n+  }\n+\n   public native Class[] getInterfaces ();\n \n   private final native void getSignature (StringBuffer buffer);\n@@ -154,6 +181,35 @@ public Object[] getSigners ()\n   public native Object newInstance ()\n     throws InstantiationException, IllegalAccessException;\n \n+  // We need a native method to retrieve the protection domain, because we\n+  // can't add fields to java.lang.Class that are accessible from Java.\n+  private native ProtectionDomain getProtectionDomain0();\n+\n+  /**\n+   * Returns the protection domain of this class. If the classloader\n+   * did not record the protection domain when creating this class\n+   * the unknown protection domain is returned which has a <code>null</code>\n+   * code source and all permissions.\n+   *\n+   * @exception SecurityException if a security manager exists and the caller\n+   * does not have <code>RuntimePermission(\"getProtectionDomain\")</code>.\n+   *\n+   * @since 1.2\n+   */\n+  public ProtectionDomain getProtectionDomain()\n+  {\n+    SecurityManager sm = System.getSecurityManager();\n+    if (sm != null)\n+      sm.checkPermission(ClassLoader.protectionDomainPermission);\n+    \n+    ProtectionDomain protectionDomain = getProtectionDomain0();\n+\n+    if (protectionDomain == null)\n+      return ClassLoader.unknownProtectionDomain;\n+    else\n+      return protectionDomain;\n+  }\n+\n   public String toString ()\n   {\n     if (isPrimitive ())"}, {"sha": "56d73e6f833fd6acc51135a78dbcd5538c77cf96", "filename": "libjava/java/lang/ClassLoader.java", "status": "modified", "additions": 184, "deletions": 26, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Flang%2FClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Flang%2FClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClassLoader.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,6 +1,6 @@\n // ClassLoader.java - Define policies for loading Java classes.\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -14,7 +14,14 @@\n import java.io.IOException;\n import java.net.URL;\n import java.net.URLConnection;\n+import java.security.AllPermission;\n+import java.security.CodeSource;\n+import java.security.Permission;\n+import java.security.Permissions;\n+import java.security.Policy;\n+import java.security.ProtectionDomain;\n import java.util.Enumeration;\n+import java.util.HashMap;\n import java.util.Stack;\n \n /**\n@@ -25,18 +32,24 @@\n  * @author  Kresten Krab Thorup\n  */\n \n-public abstract class ClassLoader {\n-\n+public abstract class ClassLoader\n+{\n   static private ClassLoader system;\n   private ClassLoader parent;\n+  private HashMap definedPackages = new HashMap();\n \n-  public ClassLoader getParent ()\n+  public final ClassLoader getParent ()\n   {\n     /* FIXME: security */\n     return parent;\n   }\n-    \n-  public static native ClassLoader getSystemClassLoader ();\n+\n+  public static ClassLoader getSystemClassLoader ()\n+  {\n+    if (system == null)\n+      system = gnu.gcj.runtime.VMClassLoader.instance;\n+    return system;\n+  }\n \n   /**\n    * Creates a <code>ClassLoader</code> with no parent.\n@@ -55,6 +68,7 @@ protected ClassLoader()\n    * <code>checkCreateClassLoader</code> on the current \n    * security manager. \n    * @exception java.lang.SecurityException if not allowed\n+   * @since 1.2\n    */\n   protected ClassLoader(ClassLoader parent) \n   {\n@@ -71,11 +85,15 @@ protected ClassLoader(ClassLoader parent)\n    * @see       ClassLoader#loadClass(String,boolean)\n    * @exception java.lang.ClassNotFoundException \n    */ \n-  public Class loadClass(String name) \n-    throws java.lang.ClassNotFoundException, java.lang.LinkageError\n+  public Class loadClass(String name)\n+    throws java.lang.ClassNotFoundException\n   { \n     return loadClass (name, false);\n   }\n+  \n+  /* findClass implementation for the system classloader. \n+  native Class systemFindClass(String name)\n+    throws java.lang.ClassNotFoundException;\n \n   /** \n    * Loads the class by the given name.  The default implementation\n@@ -96,7 +114,7 @@ public Class loadClass(String name)\n    * @deprecated \n    */ \n   protected Class loadClass(String name, boolean link)\n-    throws java.lang.ClassNotFoundException, java.lang.LinkageError\n+    throws java.lang.ClassNotFoundException\n   {\n     Class c = findLoadedClass (name);\n \n@@ -106,7 +124,7 @@ protected Class loadClass(String name, boolean link)\n \t  if (parent != null)\n \t    return parent.loadClass (name, link);\n \t  else\n-\t    c = findSystemClass (name);\n+\t    c = system.findClass (name);\n \t} catch (ClassNotFoundException ex) {\n \t  /* ignore, we'll try findClass */;\n \t}\n@@ -130,13 +148,36 @@ protected Class loadClass(String name, boolean link)\n    * @param name Name of the class to find.\n    * @return     The class found.\n    * @exception  java.lang.ClassNotFoundException\n+   * @since 1.2\n    */\n   protected Class findClass (String name)\n     throws ClassNotFoundException\n   {\n     throw new ClassNotFoundException (name);\n   }\n \n+  // Protection Domain definitions \n+  // FIXME: should there be a special protection domain used for native code?\n+  \n+  // The permission required to check what a classes protection domain is.\n+  static final Permission protectionDomainPermission\n+    = new RuntimePermission(\"getProtectionDomain\");\n+  // The protection domain returned if we cannot determine it. \n+  static ProtectionDomain unknownProtectionDomain;\n+  // Protection domain to use when a class is defined without one specified.\n+  static ProtectionDomain defaultProtectionDomain;\n+\n+  static\n+  {\n+    Permissions permissions = new Permissions();\n+    permissions.add(new AllPermission());\n+    unknownProtectionDomain = new ProtectionDomain(null, permissions);  \n+\n+    CodeSource cs = new CodeSource(null, null);\n+    defaultProtectionDomain =\n+      new ProtectionDomain(cs, Policy.getPolicy().getPermissions(cs));\n+  }\n+\n   /** \n    * Defines a class, given the class-data.  According to the JVM, this\n    * method should not be used; instead use the variant of this method\n@@ -158,9 +199,14 @@ protected Class findClass (String name)\n   protected final Class defineClass(byte[] data, int off, int len) \n     throws ClassFormatError\n   {\n-    return defineClass (null, data, off, len);\n+    return defineClass (null, data, off, len, defaultProtectionDomain);\n   }\n \n+  protected final Class defineClass(String name, byte[] data, int off, int len)\n+  {\n+    return defineClass (name, data, off, len, defaultProtectionDomain);\n+  }\n+  \n   /** \n    * Defines a class, given the class-data.  This is preferable\n    * over <code>defineClass(byte[],off,len)</code> since it is more\n@@ -182,14 +228,16 @@ protected final Class defineClass(byte[] data, int off, int len)\n    * @param     data    bytes in class file format.\n    * @param     off     offset to start interpreting data.\n    * @param     len     length of data in class file.\n+   * @param     protectionDomain security protection domain for the class.\n    * @return    the class defined.\n    * @exception java.lang.ClassNotFoundException \n    * @exception java.lang.LinkageError\n    */\n   protected final synchronized Class defineClass(String name,\n \t\t\t\t\t\t byte[] data,\n \t\t\t\t\t\t int off,\n-\t\t\t\t\t\t int len)\n+\t\t\t\t\t\t int len,\n+\t\t\t\t\t\t ProtectionDomain protectionDomain)\n     throws ClassFormatError\n   {\n     if (data==null || data.length < off+len || off<0 || len<0)\n@@ -201,13 +249,16 @@ protected final synchronized Class defineClass(String name,\n       throw new java.lang.LinkageError (\"class \" \n \t\t\t\t\t+ name \n \t\t\t\t\t+ \" already loaded\");\n+    \n+    if (protectionDomain == null)\n+      protectionDomain = defaultProtectionDomain;\n \n     try {\n       // Since we're calling into native code here, \n       // we better make sure that any generated\n       // exception is to spec!\n \n-      return defineClass0 (name, data, off, len);\n+      return defineClass0 (name, data, off, len, protectionDomain);\n \n     } catch (ClassFormatError x) {\n       throw x;\t\t// rethrow\n@@ -229,10 +280,10 @@ protected final synchronized Class defineClass(String name,\n   private native Class defineClass0 (String name,\n \t\t\t\t     byte[] data,\n \t\t\t\t     int off,\n-\t\t\t\t     int len)\n+\t\t\t\t     int len,\n+\t\t\t\t     ProtectionDomain protectionDomain)\n     throws ClassFormatError;\n \n-\n   /** \n    * Link the given class.  This will bring the class to a state where\n    * the class initializer can be run.  Linking involves the following\n@@ -262,13 +313,11 @@ private native Class defineClass0 (String name,\n    * @exception java.lang.LinkageError\n    */\n   protected final void resolveClass(Class clazz)\n-    throws java.lang.LinkageError\n   {\n     resolveClass0(clazz);\n   }\n \n   static void resolveClass0(Class clazz)\n-    throws java.lang.LinkageError\n   {\n     synchronized (clazz)\n       {\n@@ -288,14 +337,123 @@ static void resolveClass0(Class clazz)\n \n   /** Internal method.  Calls _Jv_PrepareClass and\n    * _Jv_PrepareCompiledClass.  This is only called from resolveClass.  */ \n-  private static native void linkClass0(Class clazz)\n-    throws java.lang.LinkageError;\n+  private static native void linkClass0(Class clazz);\n \n   /** Internal method.  Marks the given clazz to be in an erroneous\n    * state, and calls notifyAll() on the class object.  This should only\n    * be called when the caller has the lock on the class object.  */\n   private static native void markClassErrorState0(Class clazz);\n \n+  /**\n+   * Defines a new package and creates a Package object.\n+   * The package should be defined before any class in the package is\n+   * defined with <code>defineClass()</code>. The package should not yet\n+   * be defined before in this classloader or in one of its parents (which\n+   * means that <code>getPackage()</code> should return <code>null</code>).\n+   * All parameters except the <code>name</code> of the package may be\n+   * <code>null</code>.\n+   * <p>\n+   * Subclasses should call this method from their <code>findClass()</code>\n+   * implementation before calling <code>defineClass()</code> on a Class\n+   * in a not yet defined Package (which can be checked by calling\n+   * <code>getPackage()</code>).\n+   *\n+   * @param name The name of the Package\n+   * @param specTitle The name of the specification\n+   * @param specVendor The name of the specification designer\n+   * @param specVersion The version of this specification\n+   * @param implTitle The name of the implementation\n+   * @param implVendor The vendor that wrote this implementation\n+   * @param implVersion The version of this implementation\n+   * @param sealed If sealed the origin of the package classes\n+   * @return the Package object for the specified package\n+   *\n+   * @exception IllegalArgumentException if the package name is null or if\n+   * it was already defined by this classloader or one of its parents.\n+   *\n+   * @see Package\n+   * @since 1.2\n+   */\n+  protected Package definePackage(String name,\n+\t\t\t\t  String specTitle, String specVendor,\n+\t\t\t\t  String specVersion, String implTitle,\n+\t\t\t\t  String implVendor, String implVersion,\n+\t\t\t\t  URL sealed)\n+  {\n+    if (getPackage(name) != null)\n+      throw new IllegalArgumentException(\"Package \" + name\n+\t\t\t\t\t + \" already defined\");\n+    Package p = new Package(name,\n+\t\t\t    specTitle, specVendor, specVersion,\n+\t\t\t    implTitle, implVendor, implVersion,\n+\t\t\t    sealed);\n+    synchronized (definedPackages)\n+    {\n+      definedPackages.put(name, p);\n+    }\n+    return p;\n+  }\n+\n+  /**\n+   * Returns the Package object for the requested package name. It returns\n+   * null when the package is not defined by this classloader or one of its\n+   * parents.\n+   *\n+   * @since 1.2\n+   */\n+  protected Package getPackage(String name)\n+  {\n+    Package p;\n+    if (parent == null)\n+      // XXX - Should we use the bootstrap classloader?\n+      p = null;\n+    else\n+      p = parent.getPackage(name);\n+\n+    if (p == null)\n+      {\n+        synchronized (definedPackages)\n+\t{\n+\t  p = (Package) definedPackages.get(name);\n+\t}\n+      }\n+\n+    return p;\n+  }\n+\n+  /**\n+   * Returns all Package objects defined by this classloader and its parents.\n+   *\n+   * @since 1.2\n+   */\n+  protected Package[] getPackages()\n+  {\n+    Package[] allPackages;\n+\n+    // Get all our packages.\n+    Package[] packages;\n+    synchronized(definedPackages)\n+    {\n+      packages = new Package[definedPackages.size()];\n+      definedPackages.values().toArray(packages);\n+    }\n+\n+    // If we have a parent get all packages defined by our parents.\n+    if (parent != null)\n+      {\n+\tPackage[] parentPackages = parent.getPackages();\n+\tallPackages = new Package[parentPackages.length + packages.length];\n+\tSystem.arraycopy(parentPackages, 0, allPackages, 0,\n+\t\t\t parentPackages.length);\n+\tSystem.arraycopy(packages, 0, allPackages, parentPackages.length,\n+\t\t\t packages.length);\n+      }\n+    else\n+      // XXX - Should we use the bootstrap classloader?\n+      allPackages = packages;\n+\n+    return allPackages;\n+  }\n \n   /** \n    * Returns a class found in a system-specific way, typically\n@@ -307,14 +465,14 @@ private static native void linkClass0(Class clazz)\n    * @exception java.lang.LinkageError \n    * @exception java.lang.ClassNotFoundException \n    */\n-  protected Class findSystemClass(String name) \n-    throws java.lang.ClassNotFoundException, java.lang.LinkageError\n+  protected final Class findSystemClass(String name) \n+    throws java.lang.ClassNotFoundException\n   {\n     return getSystemClassLoader ().loadClass (name);\n   }\n \n   /*\n-   * Does currently nothing.\n+   * Does currently nothing. FIXME.\n    */ \n   protected final void setSigners(Class claz, Object[] signers) {\n     /* claz.setSigners (signers); */\n@@ -328,13 +486,13 @@ protected final void setSigners(Class claz, Object[] signers) {\n    * @param     name  class to find.\n    * @return    the class loaded, or null.\n    */ \n-  protected native Class findLoadedClass(String name);\n+  protected final native Class findLoadedClass(String name);\n \n-  public static final InputStream getSystemResourceAsStream(String name) {\n+  public static InputStream getSystemResourceAsStream(String name) {\n     return getSystemClassLoader().getResourceAsStream (name);\n   }\n \n-  public static final URL getSystemResource(String name) {\n+  public static URL getSystemResource(String name) {\n     return getSystemClassLoader().getResource (name);\n   }\n \n@@ -397,7 +555,7 @@ protected URL findResource (String name)\n     return null;\n   }\n \n-  public Enumeration getResources (String name) throws IOException\n+  public final Enumeration getResources (String name) throws IOException\n   {\n     // The rules say search the parent class if non-null,\n     // otherwise search the built-in class loader (assumed to be"}, {"sha": "26bcb98b5c648e9c861bce58b00f0a21a890c975", "filename": "libjava/java/lang/Package.java", "status": "added", "additions": 287, "deletions": 0, "changes": 287, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Flang%2FPackage.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Flang%2FPackage.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FPackage.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,287 @@\n+/* java.lang.Package - Everything you ever wanted to know about a package.\n+   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.lang;\n+\n+import java.net.URL;\n+import java.util.NoSuchElementException;\n+import java.util.StringTokenizer;\n+\n+/**\n+ * Everything you ever wanted to know about a package. This class makes it\n+ * possible to attach specification and implementation information to a\n+ * package as explained in the\n+ * <a href=\"http://java.sun.com/products/jdk/1.3/docs/guide/versioning/spec/VersioningSpecification.html#PackageVersionSpecification\">Package Versioning Specification</a>\n+ * section of the\n+ * <a href=\"http://java.sun.com/products/jdk/1.3/docs/guide/versioning/spec/VersioningSpecification.html\">Product Versioning Specification</a>.\n+ * It also allows packages to be sealed with respect to the originating URL.\n+ * <p>\n+ * The most usefull method is the <code>isCompatibleWith()</code> method that\n+ * compares a desired version of a specification with the version of the\n+ * specification as implemented by a package. A package is considered\n+ * compatible with another version if the version of the specification is\n+ * equal or higher then the requested version. Version numbers are represented\n+ * as strings of positive numbers seperated by dots (e.g. \"1.2.0\").\n+ * The first number is called the major number, the second the minor,\n+ * the third the micro, etc. A version is considered higher then another\n+ * version if it has a bigger major number then the another version or when\n+ * the major numbers of the versions are equal if it has a bigger minor number\n+ * then the other version, etc. (If a version has no minor, micro, etc numbers\n+ * then they are considered the be 0.)\n+ *\n+ * @since 1.2\n+ * @author Mark Wielaard (mark@klomp.org)\n+ */\n+public class Package\n+{\n+  /** The name of the Package */\n+  final private String name;\n+\n+  /** The name if the implementation */\n+  final private String implTitle;\n+  /** The vendor that wrote this implementation */\n+  final private String implVendor;\n+  /** The version of this implementation */\n+  final private String implVersion;\n+\n+  /** The name of the specification */\n+  final private String specTitle;\n+  /** The name of the specification designer */\n+  final private String specVendor;\n+  /** The version of this specification */\n+  final private String specVersion;\n+\n+  /** If sealed the origin of the package classes, otherwise null */\n+  final private URL sealed;\n+\n+  /** \n+   * A package local constructor for the Package class.\n+   * All parameters except the <code>name</code> of the package may be\n+   * <code>null</code>.\n+   * There are no public constructors defined for Package this is a package\n+   * local constructor that is used by java.lang.Classloader.definePackage().\n+   * \n+   * @param name The name of the Package\n+   * @param specTitle The name of the specification\n+   * @param specVendor The name of the specification designer\n+   * @param specVersion The version of this specification\n+   * @param implTitle The name of the implementation\n+   * @param implVendor The vendor that wrote this implementation\n+   * @param implVersion The version of this implementation\n+   * @param sealed If sealed the origin of the package classes\n+   */\n+  Package(String name,\n+\t  String specTitle, String specVendor, String specVersion,\n+\t  String implTitle, String implVendor, String implVersion, URL sealed)\n+  {\n+    if (name == null)\n+      throw new IllegalArgumentException(\"null Package name\");\n+\n+    this.name = name;\n+\n+    this.implTitle = implTitle;\n+    this.implVendor = implVendor;\n+    this.implVersion = implVersion;\n+\n+    this.specTitle = specTitle;\n+    this.specVendor = specVendor;\n+    this.specVersion = specVersion;\n+\n+    this.sealed = sealed;\n+  }\n+\n+  /** \n+   * Returns the Package name.\n+   */\n+  public String getName()\n+  {\n+    return name;\n+  }\n+\n+  /** \n+   * Returns the name of the implementation or null if unknown.\n+   */\n+  public String getImplementationTitle()\n+  {\n+    return implTitle;\n+  }\n+\n+  /** \n+   * Returns the vendor that wrote this implementation or null if unknown.\n+   */\n+  public String getImplementationVendor()\n+  {\n+    return implVendor;\n+  }\n+\n+  /** \n+   * Returns the version of this implementation or null if unknown.\n+   */\n+  public String getImplementationVersion()\n+  {\n+    return implVersion;\n+  }\n+\n+  /** \n+   * Returns the name of the specification or null if unknown.\n+   */\n+  public String getSpecificationTitle()\n+  {\n+    return specTitle;\n+  }\n+\n+  /** \n+   * Returns the name of the specification designer or null if unknown.\n+   */\n+  public String getSpecificationVendor()\n+  {\n+    return specVendor;\n+  }\n+\n+  /** \n+   * Returns the version of the specification or null if unknown.\n+   */\n+  public String getSpecificationVersion()\n+  {\n+    return specVersion;\n+  }\n+\n+  /** \n+   * Returns true if this Package is sealed.\n+   */\n+  public boolean isSealed()\n+  {\n+    return (sealed != null);\n+  }\n+\n+  /** \n+   * Returns true if this Package is sealed and the origin of the classes is\n+   * the given URL.\n+   * \n+   * @param url \n+   */\n+  public boolean isSealed(URL url)\n+  {\n+    return url.equals(sealed);\n+  }\n+\n+  /**\n+   * Checks if the version of the specification is higher or at least as high\n+   * as the desired version.\n+   * @param version the (minimal) desired version of the specification\n+   * @exception NumberFormatException when either version or the\n+   * specification version is not a correctly formatted version number\n+   * @exception NullPointerException if the supplied version or the\n+   * Package specification version is null.\n+   */\n+  public boolean isCompatibleWith(String version) throws NumberFormatException\n+  {\n+    StringTokenizer versionTokens = new StringTokenizer(version, \".\");\n+    StringTokenizer specTokens = new StringTokenizer(specVersion, \".\");\n+    try\n+      {\n+\twhile (versionTokens.hasMoreElements())\n+\t  {\n+\t    int vers = Integer.parseInt(versionTokens.nextToken());\n+\t    int spec = Integer.parseInt(specTokens.nextToken());\n+\t    if (spec < vers)\n+\t      return false;\n+\t    else if (spec > vers)\n+\t      return true;\n+\t    // They must be equal, next Token please!\n+\t  }\n+      }\n+    catch (NoSuchElementException e)\n+      {\n+\t// this must have been thrown by spec.netToken() so return false\n+\treturn false;\n+      }\n+\n+    // They must have been exactly the same version.\n+    // Or the specVersion has more subversions. That is also good.\n+    return true;\n+  }\n+\n+  /**\n+   * Returns the named package if it is known by the callers class loader.\n+   * It may return null if the package is unknown, when there is no\n+   * information on that particular package available or when the callers\n+   * classloader is null.\n+   * @param name the name of the desired package\n+   */\n+  public static Package getPackage(String name)\n+  {\n+    // Get the caller's classloader\n+    SecurityManager sm = System.getSecurityManager();\n+    Class c = sm.getClassContext()[1];\n+    ClassLoader cl = c.getClassLoader();\n+\n+    if (cl != null)\n+      return cl.getPackage(name);\n+    else\n+      return null;\n+  }\n+\n+  /**\n+   * Returns all the packages that are known to the callers class loader.\n+   * It may return an empty array if the classloader of the caller is null.\n+   */\n+  public static Package[] getPackages()\n+  {\n+    // Get the caller's classloader\n+    SecurityManager sm = System.getSecurityManager();\n+    Class c = sm.getClassContext()[1];\n+    ClassLoader cl = c.getClassLoader();\n+\n+    if (cl != null)\n+      return cl.getPackages();\n+    else\n+      return new Package[0];\n+  }\n+\n+  /** \n+   * Returns the hashCode of the name of this package.\n+   */\n+  public int hashCode()\n+  {\n+    return name.hashCode();\n+  }\n+\n+  /** \n+   * Returns a string representation of this package name, specification,\n+   * implementation and class origin if sealed.\n+   */\n+  public String toString()\n+  {\n+    return \"package: \" + name +\n+\t   \" spec: \" + specTitle +\n+\t   \" version: \" + specVersion +\n+\t   \" vendor: \" + specVendor +\n+\t   \" implementation: \" + implTitle +\n+\t   \" version: \" + implVersion +\n+\t   \" vendor: \" + implVendor + \" sealed: \" + sealed;\n+  }\n+}"}, {"sha": "d7c2a54b5215977930adc42dd039d3622688102c", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -72,7 +72,8 @@ static _Jv_Utf8Const *finit_leg_name = _Jv_makeUtf8Const (\"$finit$\", 7);\n \f\n \n jclass\n-java::lang::Class::forName (jstring className, java::lang::ClassLoader *loader)\n+java::lang::Class::forName (jstring className, jboolean initialize,\n+                            java::lang::ClassLoader *loader)\n {\n   if (! className)\n     throw new java::lang::NullPointerException;\n@@ -90,19 +91,20 @@ java::lang::Class::forName (jstring className, java::lang::ClassLoader *loader)\n \t\t  ? _Jv_FindClassFromSignature (name->data, loader)\n \t\t  : _Jv_FindClass (name, loader));\n \n-  if (klass)\n-    _Jv_InitClass (klass);\n-  else\n+  if (klass == NULL)\n     throw new java::lang::ClassNotFoundException (className);\n \n+  if (initialize)\n+    _Jv_InitClass (klass);\n+\n   return klass;\n }\n \n jclass\n java::lang::Class::forName (jstring className)\n {\n   // FIXME: should use class loader from calling method.\n-  return forName (className, NULL);\n+  return forName (className, true, NULL);\n }\n \n java::lang::reflect::Constructor *\n@@ -1415,3 +1417,10 @@ java::lang::Class::getPrivateMethod (jstring name, JArray<jclass> *param_types)\n     }\n   throw new java::lang::NoSuchMethodException;\n }\n+\n+// Private accessor method for Java code to retrieve the protection domain.\n+java::security::ProtectionDomain *\n+java::lang::Class::getProtectionDomain0 ()\n+{\n+  return protectionDomain;\n+}"}, {"sha": "6b7f5fa493340d017f43dfcdc9403d5241207a4a", "filename": "libjava/java/lang/natClassLoader.cc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClassLoader.cc?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -48,20 +48,12 @@ details.  */\n \n /////////// java.lang.ClassLoader native methods ////////////\n \n-java::lang::ClassLoader *\n-java::lang::ClassLoader::getSystemClassLoader (void)\n-{\n-  JvSynchronize sync (&ClassLoaderClass);\n-  if (! system)\n-    system = gnu::gcj::runtime::VMClassLoader::getVMClassLoader ();\n-  return system;\n-}\n-\n java::lang::Class *\n java::lang::ClassLoader::defineClass0 (jstring name,\n \t\t\t\t       jbyteArray data, \n \t\t\t\t       jint offset,\n-\t\t\t\t       jint length)\n+\t\t\t\t       jint length,\n+\t\t\t\t       java::security::ProtectionDomain *pd)\n {\n #ifdef INTERPRETER\n   jclass klass;\n@@ -109,6 +101,8 @@ java::lang::ClassLoader::defineClass0 (jstring name,\n \n       throw ex;\n     }\n+    \n+  klass->protectionDomain = pd;\n \n   // if everything proceeded sucessfully, we're loaded.\n   JvAssert (klass->state == JV_STATE_LOADED);\n@@ -180,10 +174,10 @@ java::lang::ClassLoader::markClassErrorState0 (java::lang::Class *klass)\n }\n \n \n-/** this is the only native method in VMClassLoader, so \n-    we define it here. */\n+// This is the findClass() implementation for the System classloader. It is \n+// the only native method in VMClassLoader, so we define it here.\n jclass\n-gnu::gcj::runtime::VMClassLoader::findSystemClass (jstring name)\n+gnu::gcj::runtime::VMClassLoader::findClass (jstring name)\n {\n   _Jv_Utf8Const *name_u = _Jv_makeUtf8Const (name);\n   jclass klass = _Jv_FindClassInCache (name_u, 0);\n@@ -213,6 +207,12 @@ gnu::gcj::runtime::VMClassLoader::findSystemClass (jstring name)\n \t}\n     }\n \n+  // Now try loading using the interpreter.\n+  if (! klass)\n+    {\n+      klass = java::net::URLClassLoader::findClass (name);\n+    }\n+\n   return klass;\n }\n "}, {"sha": "f458b1c5020f33af0eda85fa9e9e97bf05a06b43", "filename": "libjava/java/net/NetPermission.java", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fnet%2FNetPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fnet%2FNetPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FNetPermission.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,65 @@\n+/* NetPermission.java -- A class for basic miscellaneous network permission\n+   Copyright (C) 1998, 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.net;\n+\n+import java.security.BasicPermission;\n+\n+/**\n+ * This class is used to model miscellaneous network permissions.  It is\n+ * a subclass of BasicPermission.  This means that it models a \"boolean\"\n+ * permission.  One that you either have or do not have.  Thus there is\n+ * no permitted action list associated with this object. \n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public final class NetPermission extends BasicPermission\n+  implements java.io.Serializable\n+{\n+  /**\n+   * Initializes a new instance of <code>NetPermission</code> with the\n+   * specified name.\n+   *\n+   * @param name The name of this permission.\n+   */\n+  public NetPermission(String name)\n+  {\n+    super(name);\n+  }\n+\n+  /**\n+   * Initializes a new instance of <code>NetPermission</code> with the \n+   * specified name and value.  Note that the value field is irrelevant and is \n+   * ignored.  This constructor should never need to be used.\n+   *\n+   * @param name The name of this permission\n+   * @param perms The permitted actions of this permission (ignored)\n+   */\n+  public NetPermission(String name, String perms)\n+  {\n+    super(name);\n+  }\n+}"}, {"sha": "0ddadad5bc6237996c6dda993e17f16c8b724347", "filename": "libjava/java/net/SocketPermission.java", "status": "added", "additions": 377, "deletions": 0, "changes": 377, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fnet%2FSocketPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fnet%2FSocketPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketPermission.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,377 @@\n+/* SocketPermission.java -- Class modeling permissions for socket operations\n+   Copyright (C) 1998, 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.net;\n+\n+import java.security.Permission;\n+import java.security.PermissionCollection;\n+\n+/**\n+ * This class models a specific set of permssions for connecting to a\n+ * host.  There are two elements to this, the host/port combination and\n+ * the permission list.\n+ * <p>\n+ * The host/port combination is specified as followed\n+ * <p>\n+ * <pre>\n+ * hostname[:[-]port[-[port]]]\n+ * </pre>\n+ * <p>\n+ * The hostname portion can be either a hostname or IP address.  If it is\n+ * a hostname, a wildcard is allowed in hostnames.  This wildcard is a \"*\"\n+ * and matches one or more characters.  Only one \"*\" may appear in the\n+ * host and it must be the leftmost character.  For example,\n+ * \"*.urbanophile.com\" matches all hosts in the \"urbanophile.com\" domain.\n+ * <p>\n+ * The port portion can be either a single value, or a range of values\n+ * treated as inclusive.  The first or the last port value in the range\n+ * can be omitted in which case either the minimum or maximum legal\n+ * value for a port (respectively) is used by default.  Here are some\n+ * examples:\n+ * <p><ul>\n+ * <li>8080 - Represents port 8080 only\n+ * <li>2000-3000 - Represents ports 2000 through 3000 inclusive\n+ * <li>-4000 - Represents ports 0 through 4000 inclusive\n+ * <li>1024- - Represents ports 1024 through 65535 inclusive\n+ * </ul><p>\n+ * The permission list is a comma separated list of individual permissions.\n+ * These individual permissions are:\n+ * <p>\n+ * accept<br>\n+ * connect<br>\n+ * listen<br>\n+ * resolve<br>\n+ * <p>\n+ * The \"listen\" permission is only relevant if the host is localhost.  If\n+ * any permission at all is specified, then resolve permission is implied to\n+ * exist.\n+ * <p>\n+ * Here are a variety of examples of how to create SocketPermission's\n+ * <p><pre>\n+ * SocketPermission(\"www.urbanophile.com\", \"connect\");\n+ *   Can connect to any port on www.urbanophile.com\n+ * SocketPermission(\"www.urbanophile.com:80\", \"connect,accept\");\n+ *   Can connect to or accept connections from www.urbanophile.com on port 80\n+ * SocketPermission(\"localhost:1024-\", \"listen,accept,connect\");\n+ *   Can connect to, accept from, an listen on any local port number 1024 and up.\n+ * SocketPermission(\"*.edu\", \"connect\");\n+ *   Can connect to any host in the edu domain\n+ * SocketPermission(\"197.197.20.1\", \"accept\");\n+ *   Can accept connections from 197.197.20.1\n+ * </pre><p>\n+ *\n+ * @since 1.2\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public final class SocketPermission extends Permission\n+  implements java.io.Serializable\n+{\n+\n+// FIXME: Needs serialization work, including readObject/writeObject methods.\n+  /**\n+   * A hostname/port combination as described above\n+   */\n+  protected transient String hostport;\n+\n+  /**\n+   * A comma separated list of actions for which we have permission\n+   */\n+  protected String actions;\n+\n+  /**\n+   * Initializes a new instance of <code>SocketPermission</code> with the \n+   * specified host/port combination and actions string.\n+   *\n+   * @param hostport The hostname/port number combination\n+   * @param perms The actions string\n+   */\n+  public SocketPermission(String hostport, String actions)\n+  {\n+    super(hostport);\n+\n+    this.hostport = hostport;\n+    this.actions = actions;\n+  }\n+\n+  /**\n+   * Tests this object for equality against another.  This will be true if\n+   * and only if the passed object is an instance of \n+   * <code>SocketPermission</code> and both its hostname/port combination \n+   * and permissions string are identical.\n+   *\n+   * @param obj The object to test against for equality\n+   *\n+   * @return <code>true</code> if object is equal to this object, \n+   *         <code>false</code> otherwise.\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if (obj == null)\n+      return (false);\n+\n+    if (!(obj instanceof SocketPermission))\n+      return (false);\n+\n+    if (((SocketPermission) obj).hostport.equals(hostport))\n+      if (((SocketPermission) obj).actions.equals(actions))\n+\treturn (true);\n+\n+    return (false);\n+  }\n+\n+  /**\n+   * Returns a hash code value for this object.  Overrides the \n+   * Permission.hashCode()\n+   *\n+   * @return A hash code\n+   */\n+  public int hashCode()\n+  {\n+    int hash = 100;\n+\n+    // FIXME: Get a real hash function\n+    for (int i = 0; i < hostport.length(); i++)\n+      hash = hash + (int) hostport.charAt(i) * 7;\n+\n+    return (hash);\n+  }\n+\n+  /**\n+   * Returns the list of permission actions in this object in canonical\n+   * order.  The canonical order is \"connect,listen,accept,resolve\"\n+   *\n+   * @return The permitted action string.\n+   */\n+  public String getActions()\n+  {\n+    boolean found = false;\n+    StringBuffer sb = new StringBuffer(\"\");\n+\n+    if (actions.indexOf(\"connect\") != -1)\n+      {\n+\tsb.append(\"connect\");\n+\tfound = true;\n+      }\n+\n+    if (actions.indexOf(\"listen\") != -1)\n+      if (found)\n+\t  sb.append(\",listen\");\n+      else\n+\t{\n+\t  sb.append(\"listen\");\n+\t  found = true;\n+\t}\n+\n+    if (actions.indexOf(\"accept\") != -1)\n+      if (found)\n+\tsb.append(\",accept\");\n+      else\n+\t{\n+\t  sb.append(\"accept\");\n+\t  found = true;\n+\t}\n+\n+    if (found)\n+      sb.append(\",resolve\");\n+    else if (actions.indexOf(\"resolve\") != -1)\n+      sb.append(\"resolve\");\n+\n+    return (sb.toString());\n+  }\n+\n+  /**\n+   * Returns a new <code>PermissionCollection</code> object that can hold\n+   * <code>SocketPermission</code>'s.\n+   *\n+   * @return A new <code>PermissionCollection</code>.\n+   */\n+  public PermissionCollection newPermissionCollection()\n+  {\n+    // FIXME: Implement\n+\n+    return (null);\n+  }\n+\n+  /**\n+   * Returns true if the permission object passed it is implied by the\n+   * this permission.  This will be true if \n+   * <p><ul>\n+   * <li>The argument is of type SocketPermission\n+   * <li>The actions list of the argument are in this object's actions\n+   * <li>The port range of the argument is within this objects port range\n+   * <li>The hostname is equal to or a subset of this objects hostname\n+   * </ul>\n+   * <p>\n+   * The argument's hostname will be a subset of this object's hostname if:\n+   * <p><ul>\n+   * <li>The argument's hostname or IP address is equal to this object's.\n+   * <li>The argument's canonical hostname is equal to this object's.\n+   * <li>The argument's canonical name matches this domains hostname with wildcards\n+   * </ul>\n+   *\n+   * @param perm The Permission to check against\n+   *\n+   * @return <code>true</code> if the <code>Permission</code> is implied by \n+   * this object, <code>false</code> otherwise.\n+   */\n+  public boolean implies(Permission perm)\n+  {\n+    SocketPermission p;\n+\n+    // First make sure we are the right object type\n+    if (perm instanceof SocketPermission)\n+      p = (SocketPermission) perm;\n+    else\n+      return (false);\n+\n+    // Next check the actions\n+    String ourlist = getActions();\n+    String theirlist = p.getActions();\n+\n+    if (!ourlist.startsWith(theirlist))\n+      return (false);\n+\n+    // Now check ports\n+    int ourfirstport = 0, ourlastport = 0, theirfirstport = 0, theirlastport =\n+      0;\n+\n+    // Get ours\n+    if (hostport.indexOf(\":\") == -1)\n+      {\n+\tourfirstport = 0;\n+\tourlastport = 65535;\n+      }\n+    else\n+      {\n+\t// FIXME:  Needs bulletproofing.\n+\t// This will dump if hostport if all sorts of bad data was passed to\n+\t// the constructor\n+\tString range = hostport.substring(hostport.indexOf(\":\") + 1);\n+\tif (range.startsWith(\"-\"))\n+\t  ourfirstport = 0;\n+\telse if (range.indexOf(\"-\") == -1)\n+\t  ourfirstport = Integer.parseInt(range);\n+\telse\n+\t  ourfirstport =\n+\t    Integer.parseInt(range.substring(0, range.indexOf(\"-\")));\n+\n+\tif (range.endsWith(\"-\"))\n+\t  ourlastport = 65535;\n+\telse if (range.indexOf(\"-\") == -1)\n+\t  ourlastport = Integer.parseInt(range);\n+\telse\n+\t  ourlastport =\n+\t    Integer.parseInt(range.\n+\t\t\t     substring(range.indexOf(\"-\") + 1,\n+\t\t\t\t       range.length()));\n+      }\n+\n+    // Get theirs\n+    if (p.hostport.indexOf(\":\") == -1)\n+      {\n+\ttheirfirstport = 0;\n+\tourlastport = 65535;\n+      }\n+    else\n+      {\n+\t// This will dump if hostport if all sorts of bad data was passed to\n+\t// the constructor\n+\tString range = p.hostport.substring(hostport.indexOf(\":\") + 1);\n+\tif (range.startsWith(\"-\"))\n+\t  theirfirstport = 0;\n+\telse if (range.indexOf(\"-\") == -1)\n+\t  theirfirstport = Integer.parseInt(range);\n+\telse\n+\t  theirfirstport =\n+\t    Integer.parseInt(range.substring(0, range.indexOf(\"-\")));\n+\n+\tif (range.endsWith(\"-\"))\n+\t  theirlastport = 65535;\n+\telse if (range.indexOf(\"-\") == -1)\n+\t  theirlastport = Integer.parseInt(range);\n+\telse\n+\t  theirlastport =\n+\t    Integer.parseInt(range.\n+\t\t\t     substring(range.indexOf(\"-\") + 1,\n+\t\t\t\t       range.length()));\n+      }\n+\n+    // Now check them\n+    if ((theirfirstport < ourfirstport) || (theirlastport > ourlastport))\n+      return (false);\n+\n+    // Finally we can check the hosts\n+    String ourhost, theirhost;\n+\n+    // Get ours\n+    if (hostport.indexOf(\":\") == -1)\n+      ourhost = hostport;\n+    else\n+      ourhost = hostport.substring(0, hostport.indexOf(\":\"));\n+\n+    // Get theirs\n+    if (p.hostport.indexOf(\":\") == -1)\n+      theirhost = p.hostport;\n+    else\n+      theirhost = p.hostport.substring(0, p.hostport.indexOf(\":\"));\n+\n+    // Are they equal?\n+    if (ourhost.equals(theirhost))\n+      return (true);\n+\n+    // Try the canonical names\n+    String ourcanonical = null, theircanonical = null;\n+    try\n+      {\n+\tourcanonical = InetAddress.getByName(ourhost).getHostName();\n+\ttheircanonical = InetAddress.getByName(theirhost).getHostName();\n+      }\n+    catch (UnknownHostException e)\n+      {\n+\t// Who didn't resolve?  Just assume current address is canonical enough\n+\t// Is this ok to do?\n+\tif (ourcanonical == null)\n+\t  ourcanonical = ourhost;\n+\tif (theircanonical == null)\n+\t  theircanonical = theirhost;\n+      }\n+\n+    if (ourcanonical.equals(theircanonical))\n+      return (true);\n+\n+    // Well, last chance.  Try for a wildcard\n+    if (ourhost.indexOf(\"*.\") != -1)\n+      {\n+\tString wild_domain = ourhost.substring(ourhost.indexOf(\"*\" + 1));\n+\tif (theircanonical.endsWith(wild_domain))\n+\t  return (true);\n+      }\n+\n+    // Didn't make it\n+    return (false);\n+  }\n+}"}, {"sha": "5daa044462dd837f2f8287233fa39c4f758edaf4", "filename": "libjava/java/security/AccessControlContext.java", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FAccessControlContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FAccessControlContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FAccessControlContext.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,164 @@\n+/* AccessControlContext.java --- Access Control Context Class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+/**\n+   AccessControlContext makes system resource access decsion \n+   based on permission rights.  \n+\n+   It is used for a specific context and has only one method\n+   checkPermission. It is similar to AccessController except\n+   that it makes decsions based on the current context instead\n+   of the the current thread.\n+\n+   It is created by call AccessController.getContext method.\n+\n+   @author Mark Benvenuto\n+   @since JDK 1.2\n+ */\n+public final class AccessControlContext\n+{\n+  private ProtectionDomain protectionDomain[];\n+  private DomainCombiner combiner;\n+\n+  /**\n+     Construct a new AccessControlContext with the specified\n+     ProtectionDomains. <code>context</code> must not be \n+     null and duplicates will be removed.\n+\n+     @param context The ProtectionDomains to use\n+   */\n+  public AccessControlContext(ProtectionDomain[]context)\n+  {\n+    int i, j, k, count = context.length, count2 = 0;\n+    for (i = 0, j = 0; i < count; i++)\n+      {\n+\tfor (k = 0; k < i; k++)\n+\t  if (context[k] == protectionDomain[i])\n+\t    break;\n+\tif (k != i)\t\t//it means previous loop did not complete\n+\t  continue;\n+\n+\tcount2++;\n+      }\n+\n+    protectionDomain = new ProtectionDomain[count2];\n+    for (i = 0, j = 0; i < count2; i++)\n+      {\n+\tfor (k = 0; k < i; k++)\n+\t  if (context[k] == protectionDomain[i])\n+\t    break;\n+\tif (k != i)\t\t//it means previous loop did not complete\n+\t  continue;\n+\n+\tprotectionDomain[j++] = context[i];\n+      }\n+  }\n+\n+  /**\n+     Construct a new AccessControlContext with the specified\n+     ProtectionDomains and DomainCombiner\n+\n+     @param context The ProtectionDomains to use\n+\n+     @since JDK 1.3\n+   */\n+  public AccessControlContext(AccessControlContext acc,\n+\t\t\t      DomainCombiner combiner)\n+  {\n+    this(acc.protectionDomain);\n+    this.combiner = combiner;\n+  }\n+\n+  /**\n+     Returns the Domain Combiner associated with the AccessControlContext\n+\n+     @returns the DomainCombiner\n+   */\n+  public DomainCombiner getDomainCombiner()\n+  {\n+    return combiner;\n+  }\n+\n+  /**\n+     Determines whether or not the specific permission is granted\n+     depending on the context it is within. \n+\n+     @param perm a permission to check\n+\n+     @throws AccessControlException if the permssion is not permitted\n+   */\n+  public void checkPermission(Permission perm) throws AccessControlException\n+  {\n+    for (int i = 0; i < protectionDomain.length; i++)\n+      if (protectionDomain[i].implies(perm) == true)\n+\treturn;\n+\n+    throw new AccessControlException(\"Permission not granted\");\n+  }\n+\n+  /**\n+     Checks if two AccessControlContexts are equal.\n+\n+     It first checks if obj is an AccessControlContext class, and\n+     then checks if each ProtectionDomain matches.\n+\n+     @param obj The object to compare this class to\n+\n+     @return true if equal, false otherwise\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if (obj instanceof AccessControlContext)\n+      {\n+\tAccessControlContext acc = (AccessControlContext) obj;\n+\n+\tif (acc.protectionDomain.length != protectionDomain.length)\n+\t  return false;\n+\n+\tfor (int i = 0; i < protectionDomain.length; i++)\n+\t  if (acc.protectionDomain[i] != protectionDomain[i])\n+\t    return false;\n+\treturn true;\n+      }\n+    return false;\n+  }\n+\n+  /**\n+     Computes a hash code of this class\n+\n+     @return a hash code representing this class\n+   */\n+  public int hashCode()\n+  {\n+    int h = 0;\n+    for (int i = 0; i < protectionDomain.length; i++)\n+      h ^= protectionDomain[i].hashCode();\n+\n+    return h;\n+  }\n+}"}, {"sha": "2749a9d93f8a0cb1e01f5032bc056b1025e6d4e8", "filename": "libjava/java/security/AccessControlException.java", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FAccessControlException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FAccessControlException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FAccessControlException.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,80 @@\n+/* AccessControlException.java -- Permission is denied\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+/**\n+ * This exception is thrown when the <code>AccessController</code> denies\n+ * an attempt to perform an operation.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public class AccessControlException extends SecurityException\n+{\n+  /**\n+   * The <code>Permission</code> associated with this exception\n+   */\n+  private Permission perm;\n+\n+  /**\n+   * This method initializes a new instance of <code>AccessControlException</code>\n+   * with a descriptive error message.  There will be no <code>Permission</code>\n+   * object associated with this exception.\n+   *\n+   * @param msg The descriptive error message\n+   */\n+  public AccessControlException(String msg)\n+  {\n+    super(msg);\n+  }\n+\n+  /**\n+   * This method initializes a new instance of <code>AccessControlException</code>\n+   * with a descriptive error message and an instance of <code>Permission</code>\n+   * that is the permission that caused the exception to be thrown.\n+   *\n+   * @param msg The descriptive error message\n+   * @param perm The <code>Permission</code> object that caused this exception.\n+   */\n+  public AccessControlException(String msg, Permission perm)\n+  {\n+    super(msg);\n+    this.perm = perm;\n+  }\n+\n+  /**\n+   * This method returns the <code>Permission</code> object that caused\n+   * this exception to be thrown.\n+   *\n+   * @return The requested <code>Permission</code> object, or <code>null</code> if none is available.\n+   */\n+  public Permission getPermission()\n+  {\n+    return (perm);\n+  }\n+}"}, {"sha": "c830fa4c3fab99b4a211256d0c368727cf438a0e", "filename": "libjava/java/security/AccessController.java", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FAccessController.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FAccessController.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FAccessController.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,185 @@\n+/* AccessController.java --- Access control context and permission checker\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+/**\n+ * Access control context and permission checker.\n+ * Can check permissions in the access control context of the current thread\n+ * through the <code>checkPermission()</code> method.\n+ * Manipulates the access control context for code that needs to be executed\n+ * the protection domain of the calling class (by explicitly ignoring the\n+ * context of the calling code) in the <code>doPriviliged()</code> methods.\n+ * And provides a <code>getContext()</code> method which gives the access\n+ * control context of the current thread that can be used for checking\n+ * permissions at a later time and/or in another thread.\n+ * <p>\n+ * XXX - Mostly a stub implementation at the moment. Needs native support\n+ * from the VM to function correctly. XXX - Do not forget to think about\n+ * how to handle <code>java.lang.reflect.Method.invoke()</code> on the\n+ * <code>doPrivileged()</code> methods.\n+ *\n+ * @author Mark Wielaard (mark@klomp.org)\n+ * @since 1.2\n+ */\n+public final class AccessController\n+{\n+  /**\n+   * This class only has static methods so there is no public contructor.\n+   */\n+  private AccessController()\n+  {\n+  }\n+\n+  /**\n+   * Checks wether the access control context of the current thread allows\n+   * the given Permission. Throws an <code>AccessControlException</code>\n+   * when the permission is not allowed in the current context. Otherwise\n+   * returns silently without throwing an exception.\n+   *\n+   * @param perm the permission to be checked.\n+   * @exception AccessControlException thrown if the current context does not\n+   * allow the given permission.\n+   */\n+  public static void checkPermission(Permission perm)\n+  {\n+    getContext().checkPermission(perm);\n+  }\n+\n+  /**\n+   * Calls the <code>run()</code> method of the given action with as\n+   * (initial) access control context only the protection domain of the\n+   * calling class. Calls to <code>checkPermission()</code> in the\n+   * <code>run()</code> method ignore all earlier protection domains of\n+   * classes in the call chain. Note that the protection domains of classes\n+   * called by the code in the <code>run()</code> method are not ignored.\n+   *\n+   * @param action the <code>PrivilegedAction</code> whose <code>run()</code>\n+   * should be be called.\n+   * @returns the result of the <code>action.run()</code> method.\n+   */\n+  public static Object doPrivileged(PrivilegedAction action)\n+  {\n+    return action.run();\n+  }\n+\n+  /**\n+   * Calls the <code>run()</code> method of the given action with as\n+   * (initial) access control context the given context combined with the\n+   * protection domain of the calling class. Calls to\n+   * <code>checkPermission()</code> in the <code>run()</code> method ignore\n+   * all earlier protection domains of classes in the call chain, but add\n+   * checks for the protection domains given in the supplied context.\n+   *\n+   * @param action the <code>PrivilegedAction</code> whose <code>run()</code>\n+   * should be be called.\n+   * @param context the <code>AccessControlContext</code> whose protection\n+   * domains should be added to the protection domain of the calling class.\n+   * @returns the result of the <code>action.run()</code> method.\n+   */\n+  public static Object doPrivileged(PrivilegedAction action,\n+\t\t\t\t    AccessControlContext context)\n+  {\n+    return action.run();\n+  }\n+\n+  /**\n+   * Calls the <code>run()</code> method of the given action with as\n+   * (initial) access control context only the protection domain of the\n+   * calling class. Calls to <code>checkPermission()</code> in the\n+   * <code>run()</code> method ignore all earlier protection domains of\n+   * classes in the call chain. Note that the protection domains of classes\n+   * called by the code in the <code>run()</code> method are not ignored.\n+   * If the <code>run()</code> method throws an exception then this method\n+   * will wrap that exception in an <code>PrivilegedActionException</code>.\n+   *\n+   * @param action the <code>PrivilegedExceptionAction</code> whose\n+   * <code>run()</code> should be be called.\n+   * @returns the result of the <code>action.run()</code> method.\n+   * @exception PriviligedActionException wrapped around any exception that\n+   * is thrown in the <code>run()</code> method.\n+   */\n+  public static Object doPrivileged(PrivilegedExceptionAction action)\n+    throws PrivilegedActionException\n+  {\n+\n+    try\n+      {\n+\treturn action.run();\n+      }\n+    catch (Exception e)\n+      {\n+\tthrow new PrivilegedActionException(e);\n+      }\n+  }\n+\n+  /**\n+   * Calls the <code>run()</code> method of the given action with as\n+   * (initial) access control context the given context combined with the\n+   * protection domain of the calling class. Calls to\n+   * <code>checkPermission()</code> in the <code>run()</code> method ignore\n+   * all earlier protection domains of classes in the call chain, but add\n+   * checks for the protection domains given in the supplied context.\n+   * If the <code>run()</code> method throws an exception then this method\n+   * will wrap that exception in an <code>PrivilegedActionException</code>.\n+   *\n+   * @param action the <code>PrivilegedExceptionAction</code> whose\n+   * <code>run()</code> should be be called.\n+   * @param context the <code>AccessControlContext</code> whose protection\n+   * domains should be added to the protection domain of the calling class.\n+   * @returns the result of the <code>action.run()</code> method.\n+   * @exception PriviligedActionException wrapped around any exception that\n+   * is thrown in the <code>run()</code> method.\n+   */\n+  public static Object doPrivileged(PrivilegedExceptionAction action,\n+\t\t\t\t    AccessControlContext context)\n+    throws PrivilegedActionException\n+  {\n+\n+    try\n+      {\n+\treturn action.run();\n+      }\n+    catch (Exception e)\n+      {\n+\tthrow new PrivilegedActionException(e);\n+      }\n+  }\n+\n+  /**\n+   * Returns the complete access control context of the current thread.\n+   * <p>\n+   * XXX - Should this include all the protection domains in the call chain\n+   * or only the domains till the last <code>doPrivileged()</code> call?\n+   * <p>\n+   * XXX - needs native support. Currently returns an empty context.\n+   */\n+  public static AccessControlContext getContext()\n+  {\n+    // For now just return an new empty context\n+    return new AccessControlContext(new ProtectionDomain[0]);\n+  }\n+}"}, {"sha": "b10cb48d15b1c8c6f0d0f8d76f1c5ff98ef30ebb", "filename": "libjava/java/security/AlgorithmParameterGenerator.java", "status": "added", "additions": 219, "deletions": 0, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FAlgorithmParameterGenerator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FAlgorithmParameterGenerator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FAlgorithmParameterGenerator.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,219 @@\n+/* AlgorithmParameterGenerator.java --- Algorithm Parameter Generator\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+/**\n+   AlgorithmParameterGenerator is used to generate \n+   algorithm parameters for specified algorithms.\n+   This class is used to generate the algorithm parameters\n+   for a specific algorithm.\n+\n+   @since JDK 1.2\n+   @author Mark Benvenuto\n+ */\n+public class AlgorithmParameterGenerator\n+{\n+  private AlgorithmParameterGeneratorSpi paramGenSpi;\n+  private Provider provider;\n+  private String algorithm;\n+\n+  /**\n+     Creates an instance of AlgorithmParameters\n+\n+     @param paramSpi A parameters engine to use\n+     @param provider A provider to use\n+     @param algorithm The algorithm \n+   */\n+  protected AlgorithmParameterGenerator(AlgorithmParameterGeneratorSpi\n+\t\t\t\t\tparamGenSpi, Provider provider,\n+\t\t\t\t\tString algorithm)\n+  {\n+    this.paramGenSpi = paramGenSpi;\n+    this.provider = provider;\n+    this.algorithm = algorithm;\n+  }\n+\n+  /**\n+     Returns the name of the algorithm used\n+\n+     @return A string with the name of the algorithm\n+   */\n+  public final String getAlgorithm()\n+  {\n+    return algorithm;\n+  }\n+\n+  /** \n+     Gets an instance of the AlgorithmParameterGenerator class \n+     which generates algorithm parameters for the specified algorithm. \n+     If the algorithm is not found then, it throws NoSuchAlgorithmException.\n+\n+     @param algorithm the name of algorithm to choose\n+     @return a AlgorithmParameterGenerator repesenting the desired algorithm\n+\n+     @throws NoSuchAlgorithmException if the algorithm is not implemented by providers\n+   */\n+  public static AlgorithmParameterGenerator getInstance(String algorithm)\n+    throws NoSuchAlgorithmException\n+  {\n+    Provider[] p = Security.getProviders();\n+\n+    for (int i = 0; i < p.length; i++)\n+      {\n+\tString classname =\n+\t  p[i].getProperty(\"AlgorithmParameterGenerator.\" + algorithm);\n+\tif (classname != null)\n+\t  return getInstance(classname, algorithm, p[i]);\n+      }\n+\n+    throw new NoSuchAlgorithmException(algorithm);\n+  }\n+\n+  /** \n+     Gets an instance of the AlgorithmParameterGenerator class \n+     which generates algorithm parameters for the specified algorithm. \n+     If the algorithm is not found then, it throws NoSuchAlgorithmException.\n+\n+     @param algorithm the name of algorithm to choose\n+     @param provider the name of the provider to find the algorithm in\n+     @return a AlgorithmParameterGenerator repesenting the desired algorithm\n+\n+     @throws NoSuchAlgorithmException if the algorithm is not implemented by the provider\n+     @throws NoSuchProviderException if the provider is not found\n+   */\n+  public static AlgorithmParameterGenerator getInstance(String algorithm,\n+\t\t\t\t\t\t\tString provider)\n+    throws NoSuchAlgorithmException, NoSuchProviderException\n+  {\n+    Provider p = Security.getProvider(provider);\n+    if (p == null)\n+      throw new NoSuchProviderException();\n+\n+    return getInstance(p.\n+\t\t       getProperty(\"AlgorithmParameterGenerator.\" +\n+\t\t\t\t   algorithm), algorithm, p);\n+  }\n+\n+  private static AlgorithmParameterGenerator getInstance(String classname,\n+\t\t\t\t\t\t\t String algorithm,\n+\t\t\t\t\t\t\t Provider provider)\n+    throws NoSuchAlgorithmException\n+  {\n+\n+    try\n+      {\n+\treturn new\n+\t  AlgorithmParameterGenerator((AlgorithmParameterGeneratorSpi) Class.\n+\t\t\t\t      forName(classname).newInstance(),\n+\t\t\t\t      provider, algorithm);\n+      }\n+    catch (ClassNotFoundException cnfe)\n+      {\n+\tthrow new NoSuchAlgorithmException(\"Class not found\");\n+      }\n+    catch (InstantiationException ie)\n+      {\n+\tthrow new NoSuchAlgorithmException(\"Class instantiation failed\");\n+      }\n+    catch (IllegalAccessException iae)\n+      {\n+\tthrow new NoSuchAlgorithmException(\"Illegal Access\");\n+      }\n+  }\n+\n+  /**\n+     Gets the provider that the class is from.\n+\n+     @return the provider of this class\n+   */\n+  public final Provider getProvider()\n+  {\n+    return provider;\n+  }\n+\n+  /**\n+     Initializes the Algorithm Parameter Generator with the specified\n+     size. (Since no source of randomness is supplied, a default\n+     one is supplied).\n+\n+     @param size size (in bits) to use\n+   */\n+  public final void init(int size)\n+  {\n+    init(size, new SecureRandom());\n+  }\n+\n+  /**\n+     Initializes the Algorithm Parameter Generator with the specified\n+     size and source of randomness.\n+\n+     @param size size (in bits) to use\n+     @param random source of randomness to use\n+   */\n+  public final void init(int size, SecureRandom random)\n+  {\n+    paramGenSpi.engineInit(size, random);\n+  }\n+\n+  /**\n+     Initializes the Algorithm Parameter Generator with the specified\n+     AlgorithmParameterSpec. (Since no source of randomness is supplied, \n+     a default one is supplied).\n+\n+     @param genParamSpec the AlgorithmParameterSpec class to use\n+   */\n+  public final void init(AlgorithmParameterSpec genParamSpec) throws\n+    InvalidAlgorithmParameterException\n+  {\n+    init(genParamSpec, new SecureRandom());\n+  }\n+\n+  /**\n+     Initializes the Algorithm Parameter Generator with the specified\n+     AlgorithmParameterSpec and source of randomness.\n+\n+     @param genParamSpec the AlgorithmParameterSpec class to use\n+     @param random source of randomness to use\n+   */\n+  public final void init(AlgorithmParameterSpec genParamSpec,\n+\t\t\t SecureRandom random) throws\n+    InvalidAlgorithmParameterException\n+  {\n+    paramGenSpi.engineInit(genParamSpec, random);\n+  }\n+\n+  /**\n+     Generate a new set of AlgorithmParameters.\n+\n+     @returns a new set of algorithm parameters\n+   */\n+  public final AlgorithmParameters generateParameters()\n+  {\n+    return paramGenSpi.engineGenerateParameters();\n+  }\n+}"}, {"sha": "6cae4305b86feaf53df6f497157b200e72d37391", "filename": "libjava/java/security/AlgorithmParameterGeneratorSpi.java", "status": "modified", "additions": 72, "deletions": 14, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FAlgorithmParameterGeneratorSpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FAlgorithmParameterGeneratorSpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FAlgorithmParameterGeneratorSpi.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,25 +1,83 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* AlgorithmParameterGeneratorSpi.java --- Algorithm Parameter Generator SPI\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n package java.security;\n+import java.security.spec.AlgorithmParameterSpec;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 7, 2000.\n- */\n+   AlgorithmParameterGeneratorSpi is the Service Provider \n+   Interface for the AlgorithmParameterGenerator class. \n+   This class is used to generate the algorithm parameters\n+   for a specific algorithm.\n \n-/**\n- * Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Stubbed.\n+   @since JDK 1.2\n+   @author Mark Benvenuto\n  */\n-\n-// JDK1.2\n public abstract class AlgorithmParameterGeneratorSpi\n {\n-  // FIXME: Stubbed.\n+\n+  /**\n+     Constructs a new AlgorithmParameterGeneratorSpi\n+   */\n+  public AlgorithmParameterGeneratorSpi()\n+  {\n+  }\n+\n+  /**\n+     Initializes the parameter generator with the specified size\n+     and SecureRandom\n+\n+     @param size the size( in number of bits) \n+     @param random the SecureRandom class to use for randomness\n+   */\n+  protected abstract void engineInit(int size, SecureRandom random);\n+\n+  /**\n+     Initializes the parameter generator with the specified\n+     AlgorithmParameterSpec and SecureRandom classes.\n+\n+     If genParamSpec is an invalid AlgorithmParameterSpec for this\n+     AlgorithmParameterGeneratorSpi then it throws\n+     InvalidAlgorithmParameterException\n+\n+     @param genParamSpec the AlgorithmParameterSpec class to use\n+     @param random the SecureRandom class to use for randomness\n+\n+     @throws InvalidAlgorithmParameterException genParamSpec is invalid\n+   */\n+  protected abstract void engineInit(AlgorithmParameterSpec genParamSpec,\n+\t\t\t\t     SecureRandom random) throws\n+    InvalidAlgorithmParameterException;\n+\n+\n+  /**\n+     Generate a new set of AlgorithmParameters.\n+\n+     @returns a new set of algorithm parameters\n+   */\n+  protected abstract AlgorithmParameters engineGenerateParameters();\n+\n }"}, {"sha": "5c570b5448af43320fe220d567e7f248596b444d", "filename": "libjava/java/security/AlgorithmParameters.java", "status": "added", "additions": 265, "deletions": 0, "changes": 265, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FAlgorithmParameters.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FAlgorithmParameters.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FAlgorithmParameters.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,265 @@\n+/* AlgorithmParameters.java --- Algorithm Parameters Implementation Class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.security;\n+import java.security.spec.InvalidParameterSpecException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.io.IOException;\n+\n+/**\n+   AlgorithmParameters is the Algorithm Parameters class which \n+   provides an interface through which to modify parameters for \n+   classes. This class is used to manage the algorithm parameters.\n+\n+   @since JDK 1.2\n+   @author Mark Benvenuto\n+ */\n+public class AlgorithmParameters\n+{\n+  private AlgorithmParametersSpi paramSpi;\n+  private Provider provider;\n+  private String algorithm;\n+\n+  /**\n+     Creates an instance of AlgorithmParameters\n+\n+     @param paramSpi A parameters engine to use\n+     @param provider A provider to use\n+     @param algorithm The algorithm \n+   */\n+  protected AlgorithmParameters(AlgorithmParametersSpi paramSpi,\n+\t\t\t\tProvider provider, String algorithm)\n+  {\n+    this.paramSpi = paramSpi;\n+    this.provider = provider;\n+    this.algorithm = algorithm;\n+  }\n+\n+  /**\n+     Returns the name of the algorithm used\n+\n+     @return A string with the name of the algorithm\n+   */\n+  public final String getAlgorithm()\n+  {\n+    return algorithm;\n+  }\n+\n+  /** \n+     Gets an instance of the AlgorithmParameters class representing\n+     the specified algorithm parameters. If the algorithm is not \n+     found then, it throws NoSuchAlgorithmException.\n+\n+     The returned AlgorithmParameters must still be intialized with\n+     init().\n+\n+     @param algorithm the name of algorithm to choose\n+     @return a AlgorithmParameters repesenting the desired algorithm\n+\n+     @throws NoSuchAlgorithmException if the algorithm is not implemented by providers\n+   */\n+  public static AlgorithmParameters getInstance(String algorithm) throws\n+    NoSuchAlgorithmException\n+  {\n+    Provider[] p = Security.getProviders();\n+\n+    for (int i = 0; i < p.length; i++)\n+      {\n+\tString classname =\n+\t  p[i].getProperty(\"AlgorithmParameters.\" + algorithm);\n+\tif (classname != null)\n+\t  return getInstance(classname, algorithm, p[i]);\n+      }\n+\n+    throw new NoSuchAlgorithmException(algorithm);\n+  }\n+\n+  /** \n+     Gets an instance of the AlgorithmParameters class representing\n+     the specified algorithm parameters from the specified provider. \n+     If the algorithm is not found then, it throws \n+     NoSuchAlgorithmException. If the provider is not found, then \n+     it throws NoSuchProviderException.\n+\n+     The returned AlgorithmParameters must still be intialized with\n+     init().\n+\n+     @param algorithm the name of algorithm to choose\n+     @param provider the name of the provider to find the algorithm in\n+     @return a AlgorithmParameters repesenting the desired algorithm\n+\n+     @throws NoSuchAlgorithmException if the algorithm is not implemented by the provider\n+     @throws NoSuchProviderException if the provider is not found\n+   */\n+  public static AlgorithmParameters getInstance(String algorithm,\n+\t\t\t\t\t\tString provider) throws\n+    NoSuchAlgorithmException, NoSuchProviderException\n+  {\n+    Provider p = Security.getProvider(provider);\n+    if (p == null)\n+      throw new NoSuchProviderException();\n+\n+    return getInstance(p.getProperty(\"AlgorithmParameters.\" + algorithm),\n+\t\t       algorithm, p);\n+  }\n+\n+  private static AlgorithmParameters getInstance(String classname,\n+\t\t\t\t\t\t String algorithm,\n+\t\t\t\t\t\t Provider provider)\n+    throws NoSuchAlgorithmException\n+  {\n+\n+    try\n+      {\n+\treturn new AlgorithmParameters((AlgorithmParametersSpi) Class.\n+\t\t\t\t       forName(classname).newInstance(),\n+\t\t\t\t       provider, algorithm);\n+      }\n+    catch (ClassNotFoundException cnfe)\n+      {\n+\tthrow new NoSuchAlgorithmException(\"Class not found\");\n+      }\n+    catch (InstantiationException ie)\n+      {\n+\tthrow new NoSuchAlgorithmException(\"Class instantiation failed\");\n+      }\n+    catch (IllegalAccessException iae)\n+      {\n+\tthrow new NoSuchAlgorithmException(\"Illegal Access\");\n+      }\n+  }\n+\n+  /**\n+     Gets the provider that the class is from.\n+\n+     @return the provider of this class\n+   */\n+  public final Provider getProvider()\n+  {\n+    return provider;\n+  }\n+\n+  /**\n+     Initializes the engine with the specified \n+     AlgorithmParameterSpec class.\n+\n+     @param paramSpec A AlgorithmParameterSpec to initialize with\n+\n+     @throws InvalidParameterSpecException For an inapporiate ParameterSpec class\n+   */\n+  public final void init(AlgorithmParameterSpec paramSpec) throws\n+    InvalidParameterSpecException\n+  {\n+    paramSpi.engineInit(paramSpec);\n+  }\n+\n+  /**\n+     Initializes the engine with the specified \n+     parameters stored in the byte array and decodes them\n+     according to the ASN.1 specification. If the ASN.1\n+     specification exists then it succeeds or else it throws\n+     IOException.\n+\n+     @param params Parameters to initialize with\n+\n+     @throws IOException Decoding Error\n+   */\n+  public final void init(byte[]params) throws IOException\n+  {\n+    paramSpi.engineInit(params);\n+  }\n+\n+  /**\n+     Initializes the engine with the specified \n+     parameters stored in the byte array and decodes them\n+     according to the specified decoding specification. \n+     If format is null, then it is decoded using the ASN.1 \n+     specification if it exists or else it throws\n+     IOException.\n+\n+     @param params Parameters to initialize with\n+     @param format Name of decoding format to use\n+\n+     @throws IOException Decoding Error\n+   */\n+  public final void init(byte[]params, String format) throws IOException\n+  {\n+    paramSpi.engineInit(params, format);\n+  }\n+\n+  /**\n+     Returns a specification of this AlgorithmParameters object.\n+     paramSpec identifies the class to return the AlgortihmParameters\n+     in. \n+\n+     @param paramSpec Class to return AlgorithmParameters in\n+\n+     @return the parameter specification\n+\n+     @throws InvalidParameterSpecException if the paramSpec is an invalid parameter class\n+   */\n+  public final AlgorithmParameterSpec getParameterSpec(Class paramSpec) throws\n+    InvalidParameterSpecException\n+  {\n+    return paramSpi.engineGetParameterSpec(paramSpec);\n+  }\n+\n+  /**\n+     Returns the parameters in the default encoding format. \n+     The primary encoding format is ASN.1 format if it exists\n+     for the specified type.\n+\n+     @return byte array representing the parameters\n+   */\n+  public final byte[] getEncoded() throws IOException\n+  {\n+    return paramSpi.engineGetEncoded();\n+  }\n+\n+  /**\n+     Returns the parameters in the specified encoding format. \n+     If <code>format</code> is <code>null</code> then the \n+     primary encoding format is used, the ASN.1 format, \n+     if it exists for the specified type.\n+\n+     @return byte array representing the parameters\n+   */\n+  public final byte[] getEncoded(String format) throws IOException\n+  {\n+    return paramSpi.engineGetEncoded(format);\n+  }\n+\n+  /**\n+     Returns a string representation of the encoding format\n+\n+     @return a string containing the string representation\n+   */\n+  public final String toString()\n+  {\n+    return paramSpi.engineToString();\n+  }\n+}"}, {"sha": "04f90278bf1731b4d7c4d7db85ab8af337a9a7d0", "filename": "libjava/java/security/AlgorithmParametersSpi.java", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FAlgorithmParametersSpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FAlgorithmParametersSpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FAlgorithmParametersSpi.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,134 @@\n+/* AlgorithmParametersSpi.java --- Algorithm Parameters SPI\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+import java.security.spec.InvalidParameterSpecException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.io.IOException;\n+\n+/**\n+   AlgorithmParametersSpi is the Service Provider Interface\n+   for the Algorithm Parameters class. This class is used\n+   to manage the algorithm parameters.\n+\n+   @since JDK 1.2\n+   @author Mark Benvenuto\n+ */\n+public abstract class AlgorithmParametersSpi\n+{\n+  /**\n+     Creates a new instance of AlgorithmParametersSpi\n+   */\n+  public AlgorithmParametersSpi()\n+  {\n+  }\n+\n+  /**\n+     Initializes the engine with the specified \n+     AlgorithmParameterSpec class.\n+\n+     @param paramSpec A AlgorithmParameterSpec to initialize with\n+\n+     @throws InvalidParameterSpecException For an inapporiate ParameterSpec class\n+   */\n+  protected abstract void engineInit(AlgorithmParameterSpec paramSpec) throws\n+    InvalidParameterSpecException;\n+\n+  /**\n+     Initializes the engine with the specified \n+     parameters stored in the byte array and decodes them\n+     according to the ASN.1 specification. If the ASN.1\n+     specification exists then it succeeds or else it throws\n+     IOException.\n+\n+     @param params Parameters to initialize with\n+\n+     @throws IOException Decoding Error\n+   */\n+  protected abstract void engineInit(byte[]params) throws IOException;\n+\n+  /**\n+     Initializes the engine with the specified \n+     parameters stored in the byte array and decodes them\n+     according to the specified decoding specification. \n+     If format is null, then it is decoded using the ASN.1 \n+     specification if it exists or else it throws\n+     IOException.\n+\n+     @param params Parameters to initialize with\n+     @param format Name of decoding format to use\n+\n+     @throws IOException Decoding Error\n+   */\n+  protected abstract void engineInit(byte[]params,\n+\t\t\t\t     String format) throws IOException;\n+\n+\n+  /**\n+     Returns a specification of this AlgorithmParameters object.\n+     paramSpec identifies the class to return the AlgortihmParameters\n+     in. \n+\n+     @param paramSpec Class to return AlgorithmParameters in\n+\n+     @return the parameter specification\n+\n+     @throws InvalidParameterSpecException if the paramSpec is an invalid parameter class\n+   */\n+  protected abstract AlgorithmParameterSpec engineGetParameterSpec(Class\n+\t\t\t\t\t\t\t\t   paramSpec)\n+    throws InvalidParameterSpecException;\n+\n+\n+  /**\n+     Returns the parameters in the default encoding format. \n+     The primary encoding format is ASN.1 format if it exists\n+     for the specified type.\n+\n+     @return byte array representing the parameters\n+   */\n+  protected abstract byte[] engineGetEncoded() throws IOException;\n+\n+\n+  /**\n+     Returns the parameters in the specified encoding format. \n+     If <code>format</code> is <code>null</code> then the \n+     primary encoding format is used, the ASN.1 format, \n+     if it exists for the specified type.\n+\n+     @return byte array representing the parameters\n+   */\n+  protected abstract byte[] engineGetEncoded(String format) throws\n+    IOException;\n+\n+  /**\n+     Returns a string describing the parameters in the \n+     AlgorithmParametersSpi class.\n+\n+     @return A string representing the format of the parameters.\n+   */\n+  protected abstract String engineToString();\n+}"}, {"sha": "1c1c94b7c392c7b99a2611c26de24ba0eed51c78", "filename": "libjava/java/security/AllPermission.java", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FAllPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FAllPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FAllPermission.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,123 @@\n+/* AllPermission.java -- Permission to do anything\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+/**\n+ * This class is a permission that implies all other permissions.  Granting\n+ * this permission effectively grants all others.  Extreme caution should\n+ * be exercised in granting this permission.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public class AllPermission extends Permission\n+{\n+  /**\n+   * This method initializes a new instance of <code>AllPermission</code>.  It\n+   * performs no actions.\n+   */\n+  public AllPermission()\n+  {\n+    super(\"all\");\n+  }\n+\n+  /**\n+   * This method initializes a new instance of <code>AllPermission</code>.  The\n+   * arguments passed to this method are used to set internal field for the\n+   * permission name.  However, these are not used in \n+   * determining the actual permissions granted.  This class always will\n+   * return <code>true</code> in its implies method.\n+   *\n+   * @param name The name of this permission.\n+   * @param actions The action list for this permission - ignored in this class.\n+   */\n+  public AllPermission(String name, String actions)\n+  {\n+    super(name);\n+  }\n+\n+  /**\n+   * This method always returns <code>true</code> to indicate that this\n+   * permission always implies that any other permission is also granted.\n+   *\n+   * @param perm The <code>Permission</code> to test against - ignored in this class.\n+   *\n+   * @return Always returns <code>true</code>\n+   */\n+  public boolean implies(Permission perm)\n+  {\n+    return (true);\n+  }\n+\n+  /**\n+   * This method tests this class for equality against another <code>Object</code>.\n+   * This will return <code>true</code> if and only if the specified \n+   * <code>Object</code> is an instance of <code>AllPermission</code>.\n+   *\n+   * @param obj The <code>Object</code> to test for equality to this object\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if (obj instanceof AllPermission)\n+      return (true);\n+\n+    return (false);\n+  }\n+\n+  /**\n+   * This method returns a hash code for this object.\n+   *\n+   * @return A hash value for this object.\n+   */\n+  public int hashCode()\n+  {\n+    return (System.identityHashCode(this));\n+  }\n+\n+  /**\n+   * This method returns the list of actions associated with this object.\n+   * This will always be the empty string (\"\") for this class.\n+   *\n+   * @return The action list.\n+   */\n+  public String getActions()\n+  {\n+    return (\"\");\n+  }\n+\n+  /**\n+   * This method returns a new instance of <code>PermissionCollection</code>\n+   * suitable for holding instance of <code>AllPermission</code>.\n+   *\n+   * @return A new <code>PermissionCollection</code>.\n+   */\n+  public PermissionCollection newPermissionCollection()\n+  {\n+    return (null);\n+  }\n+}"}, {"sha": "4c7e5fbc7cddd09941dd64c801ca27fc3239b2dc", "filename": "libjava/java/security/BasicPermission.java", "status": "modified", "additions": 79, "deletions": 102, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FBasicPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FBasicPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FBasicPermission.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -7,7 +7,7 @@\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -24,42 +24,35 @@\n This exception does not however invalidate any other reasons why the\n executable file might be covered by the GNU General Public License. */\n \n-\n package java.security;\n \n import java.io.Serializable;\n import java.util.Hashtable;\n import java.util.Enumeration;\n \n /**\n-  * This class implements a simple model for named permissions without an\n-  * associated action list.  That is, either the named permission is granted\n-  * or it is not.  \n-  * <p>\n-  * It also supports trailing wildcards to allow the\n-  * easy granting of permissions in a hierarchical fashion.  (For example,\n-  * the name \"org.gnu.*\" might grant all permissions under the \"org.gnu\"\n-  * permissions hierarchy).  The only valid wildcard character is a '*'\n-  * which matches anything.  It must be the rightmost element in the\n-  * permission name and must follow a '.' or else the Permission name must\n-  * consist of only a '*'.  Any other occurrence of a '*' is not valid.\n-  * <p>\n-  * This class ignores the action list.  Subclasses can choose to implement\n-  * actions on top of this class if desired.\n-  *\n-  * @version 0.1\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public abstract class BasicPermission extends Permission implements Serializable\n+ * This class implements a simple model for named permissions without an\n+ * associated action list.  That is, either the named permission is granted\n+ * or it is not.  \n+ * <p>\n+ * It also supports trailing wildcards to allow the\n+ * easy granting of permissions in a hierarchical fashion.  (For example,\n+ * the name \"org.gnu.*\" might grant all permissions under the \"org.gnu\"\n+ * permissions hierarchy).  The only valid wildcard character is a '*'\n+ * which matches anything.  It must be the rightmost element in the\n+ * permission name and must follow a '.' or else the Permission name must\n+ * consist of only a '*'.  Any other occurrence of a '*' is not valid.\n+ * <p>\n+ * This class ignores the action list.  Subclasses can choose to implement\n+ * actions on top of this class if desired.\n+ *\n+ * @version 0.1\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public abstract class BasicPermission extends Permission implements\n+  Serializable\n {\n-\n-  /*************************************************************************/\n-\n-  /*\n-   * Constructors\n-   */\n-\n   /**\n    * This method initializes a new instance of <code>BasicPermission</code>\n    * with the specified name.  If the name contains an illegal wildcard\n@@ -70,23 +63,21 @@ public abstract class BasicPermission extends Permission implements Serializable\n    * @exception IllegalArgumentException If the name contains an invalid wildcard character\n    * @exception NullPointerException If the name is null\n    */\n-  public \n-  BasicPermission(String name) throws IllegalArgumentException, NullPointerException\n+  public BasicPermission(String name) \n+    throws IllegalArgumentException, NullPointerException\n   {\n     super(name);\n \n     if (name.indexOf(\"*\") != -1)\n       {\n \tif (!name.endsWith(\".*\") && !name.equals(\"*\"))\n-          throw new IllegalArgumentException(\"Bad wildcard: \" + name);\n+\t  throw new IllegalArgumentException(\"Bad wildcard: \" + name);\n \n \tif (name.indexOf(\"*\") != name.lastIndexOf(\"*\"))\n-          throw new IllegalArgumentException(\"Bad wildcard: \" + name);\n+\t  throw new IllegalArgumentException(\"Bad wildcard: \" + name);\n       }\n   }\n \n-  /*************************************************************************/\n-\n   /**\n    * This method initializes a new instance of <code>BasicPermission</code>\n    * with the specified name.  If the name contains an illegal wildcard\n@@ -99,15 +90,13 @@ public abstract class BasicPermission extends Permission implements Serializable\n    * @exception IllegalArgumentException If the name contains an invalid wildcard character\n    * @exception NullPointerException If the name is null\n    */\n-  public\n-  BasicPermission(String name, String actions) throws IllegalArgumentException, NullPointerException\n+  public BasicPermission(String name, String actions) \n+    throws IllegalArgumentException, NullPointerException\n   {\n     // ignore actions\n     this(name);\n   }\n \n-  /*************************************************************************/\n-\n   /**\n    * This method tests to see if the specified permission is implied by \n    * this permission.  This will be true if the following conditions are met:\n@@ -124,8 +113,7 @@ public abstract class BasicPermission extends Permission implements Serializable\n    *\n    * @return <code>true</code> if the specified permission is implied by this one or <code>false</code> otherwise.\n    */\n-  public boolean\n-  implies(Permission perm)\n+  public boolean implies(Permission perm)\n   {\n     if (!(perm instanceof BasicPermission))\n       return false;\n@@ -144,8 +132,6 @@ public abstract class BasicPermission extends Permission implements Serializable\n     return false;\n   }\n \n-  /*************************************************************************/\n-\n   /**\n    * This method tests to see if this object is equal to the specified\n    * <code>Object</code>.  This will be true if and only if the specified\n@@ -160,50 +146,41 @@ public abstract class BasicPermission extends Permission implements Serializable\n    *\n    * @return <code>true</code> if the specified <code>Object</code> is equal to this object or <code>false</code> otherwise.\n    */\n-  public boolean\n-  equals(Object obj)\n+  public boolean equals(Object obj)\n   {\n     if (!(obj instanceof BasicPermission))\n-      return(false);\n+      return (false);\n \n-    if (!getName().equals(((BasicPermission)obj).getName()))\n-      return(false);\n+    if (!getName().equals(((BasicPermission) obj).getName()))\n+      return (false);\n \n-    return(true);\n+    return (true);\n   }\n \n-  /*************************************************************************/\n-\n   /**\n    * This method returns a hash code for this permission object.  The hash\n    * code returned is the value returned by calling the <code>hashCode</code>\n    * method on the <code>String</code> that is the name of this permission.\n    *\n    * @return A hash value for this object\n    */\n-  public int\n-  hashCode()\n+  public int hashCode()\n   {\n-    return(getName().hashCode());\n+    return (getName().hashCode());\n   }\n \n-  /*************************************************************************/\n-\n   /**\n    * This method returns a list of the actions associated with this \n    * permission.  This method always returns the empty string (\"\") since\n    * this class ignores actions.\n    *\n    * @return The action list.\n    */\n-  public String\n-  getActions()\n+  public String getActions()\n   {\n-    return(\"\");\n+    return (\"\");\n   }\n \n-  /*************************************************************************/\n-\n   /**\n    * This method returns an instance of <code>PermissionCollection</code>\n    * suitable for storing <code>BasicPermission</code> objects.  This returns\n@@ -214,58 +191,58 @@ public abstract class BasicPermission extends Permission implements Serializable\n    *\n    * @return A new empty <code>PermissionCollection</code> object.\n    */\n-  public PermissionCollection\n-  newPermissionCollection()\n+  public PermissionCollection newPermissionCollection()\n   {\n-    return new PermissionCollection() \n+    return new PermissionCollection()\n+    {\n+      Hashtable permissions = new Hashtable();\n+      boolean allAllowed = false;\n+\n+      public void add(Permission permission)\n+      {\n+\tif (isReadOnly())\n+\t  throw new IllegalStateException(\"readonly\");\n+\n+\tBasicPermission bp = (BasicPermission) permission;\n+\tString name = bp.getName();\n+\tif (name.equals(\"*\"))\n+\t  allAllowed = true;\n+\tpermissions.put(name, bp);\n+      }\n+\n+      public boolean implies(Permission permission)\n       {\n-\tHashtable permissions = new Hashtable();\n-\tboolean allAllowed = false;\n-      \n-\tpublic void add(Permission permission) \n-\t{\n-\t  if (isReadOnly())\n-\t    throw new IllegalStateException(\"readonly\");\n+\tif (!(permission instanceof BasicPermission))\n+\t  return false;\n \n-\t  BasicPermission bp = (BasicPermission) permission;\n-\t  String name = bp.getName();\n-\t  if (name.equals(\"*\"))\n-\t    allAllowed = true;\n-\t  permissions.put(name, bp);\n-\t}\n-      \n-\tpublic boolean implies(Permission permission)\n-\t{\n-\t  if (!(permission instanceof BasicPermission))\n-\t    return false;\n-\t    \n-\t  if (allAllowed)\n-\t    return true;\n+\tif (allAllowed)\n+\t  return true;\n \n-\t  BasicPermission toImply = (BasicPermission) permission;\n-\t  String name = toImply.getName();\n-\t  if (name.equals(\"*\"))\n-\t    return false;\n+\tBasicPermission toImply = (BasicPermission) permission;\n+\tString name = toImply.getName();\n+\tif (name.equals(\"*\"))\n+\t  return false;\n \n-\t  int prefixLength = name.length();\n-\t  if (name.endsWith(\"*\"))\n-\t    prefixLength -= 2;\n+\tint prefixLength = name.length();\n+\tif (name.endsWith(\"*\"))\n+\t  prefixLength -= 2;\n \n-\t  while (true) {\n+\twhile (true)\n+\t  {\n \t    if (permissions.get(name) != null)\n \t      return true;\n-\t      \n+\n \t    prefixLength = name.lastIndexOf('.', prefixLength);\n \t    if (prefixLength < 0)\n \t      return false;\n \t    name = name.substring(0, prefixLength + 1) + '*';\n \t  }\n-\t}\n-      \n-\tpublic Enumeration elements()\n-\t{\n-\t  return permissions.elements();\n-\t}\n-      };\n+      }\n+\n+      public Enumeration elements()\n+      {\n+\treturn permissions.elements();\n+      }\n+    };\n   }\n-} // class BasicPermission\n+}"}, {"sha": "af3ce1ed032fbb1c89db1edfd85def3165a6c04a", "filename": "libjava/java/security/Certificate.java", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FCertificate.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FCertificate.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FCertificate.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,114 @@\n+/* Certificate.java -- Interface for modeling digital certificates\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.IOException;\n+\n+/**\n+ * This interface models a digital certificate which verifies the \n+ * authenticity of a party.  This class simply allows certificate\n+ * information to be queried, it does not guarantee that the certificate\n+ * is valid.\n+ * <p>\n+ * This class is deprecated in favor of the new java.security.cert package.\n+ * It exists for backward compatibility only.\n+ * \n+ * @deprecated\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public interface Certificate\n+{\n+\n+  /**\n+   * This method returns the <code>Principal</code> that is guaranteeing\n+   * this certificate.\n+   *\n+   * @return The <code>Principal</code> guaranteeing the certificate\n+   */\n+  public abstract Principal getGuarantor();\n+\n+  /**\n+   * This method returns the <code>Principal</code> being guaranteed by\n+   * this certificate.\n+   *\n+   * @return The <code>Principal</code> guaranteed by this certificate.\n+   */\n+  public abstract Principal getPrincipal();\n+\n+  /**\n+   * This method returns the public key for the <code>Principal</code> that\n+   * is being guaranteed.\n+   *\n+   * @return The <code>PublicKey</code> of the <code>Principal</code> being guaranteed\n+   */\n+  public abstract PublicKey getPublicKey();\n+\n+  /**\n+   * This method returns the encoding format of the certificate (e.g., \"PGP\",\n+   * \"X.509\").  This format is used by the <code>encode</code. and\n+   * <code>decode</code> methods.\n+   *\n+   * @return The encoding format being used\n+   */\n+  public abstract String getFormat();\n+\n+  /**\n+   * This method writes the certificate to an <code>OutputStream</code> in\n+   * a format that can be understood by the <code>decode</code> method.\n+   *\n+   * @param out The <code>OutputStream</code> to write to.\n+   *\n+   * @exception KeyException If there is a problem with the internals of this certificate\n+   * @exception IOException If an error occurs writing to the stream.\n+   */\n+  public abstract void\n+    encode(OutputStream out) throws KeyException, IOException;\n+\n+  /**\n+   * This method reads an encoded certificate from an <code>InputStream</code>.\n+   *\n+   * @param in The <code>InputStream</code> to read from.\n+   *\n+   * @param KeyException If there is a problem with the certificate data\n+   * @param IOException If an error occurs reading from the stream.\n+   */\n+  public abstract void\n+    decode(InputStream in) throws KeyException, IOException;\n+\n+  /**\n+   * This method returns a <code>String</code> representation of the contents\n+   * of this certificate.\n+   *\n+   * @param detail <code>true</code> to provided detailed information about this certificate, <code>false</code> otherwise\n+   */\n+  public abstract String toString(boolean detail);\n+}"}, {"sha": "3ee679519ecc20c6c2086e363225340909850fb7", "filename": "libjava/java/security/CodeSource.java", "status": "added", "additions": 316, "deletions": 0, "changes": 316, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FCodeSource.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FCodeSource.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FCodeSource.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,316 @@\n+/* CodeSource.java -- Code location and certifcates\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+import java.io.Serializable;\n+import java.net.URL;\n+import java.net.SocketPermission;\n+\n+/**\n+ * This class represents a location from which code is loaded (as\n+ * represented by a URL) and the list of certificates that are used to\n+ * check the signatures of signed code loaded from this source.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public class CodeSource implements Serializable\n+{\n+  private static final String linesep = System.getProperty(\"line.separator\");\n+\n+  /**\n+   * This is the URL that represents the code base from which code will\n+   * be loaded.\n+   */\n+  private URL location;\n+\n+  /**\n+   * This is the list of certificates for this code base\n+   */\n+  // What is the serialized form of this?\n+  private java.security.cert.Certificate[] certs;\n+\n+  /**\n+   * This method initializes a new instance of <code>CodeSource</code> that\n+   * loads code from the specified URL location and which uses the \n+   * specified certificates for verifying signatures.\n+   *\n+   * @param location The location from which code will be loaded\n+   * @param certs The list of certificates used for verifying signatures on code from this source\n+   */\n+  public CodeSource(URL location, java.security.cert.Certificate[] certs)\n+  {\n+    this.location = location;\n+    this.certs = certs;\n+  }\n+\n+  /**\n+   * This method returns the URL specifying the location from which code\n+   * will be loaded under this <code>CodeSource</code>.\n+   *\n+   * @return The code location for this <code>CodeSource</code>.\n+   */\n+  public final URL getLocation()\n+  {\n+    return location;\n+  }\n+\n+  /**\n+   * This method returns the list of digital certificates that can be used\n+   * to verify the signatures of code loaded under this <code>CodeSource</code>.\n+   *\n+   * @return The certifcate list for this <code>CodeSource</code>.\n+   */\n+  public final java.security.cert.Certificate[] getCertificates()\n+  {\n+    return certs;\n+  }\n+\n+  /**\n+   * This method tests to see if a specified <code>CodeSource</code> is \n+   * implied by this object.  Effectively, to meet this test, the specified\n+   * object must have all the certifcates this object has (but may have \n+   * more) and must have a location that is a subset of this object's.  In order\n+   * for this object to imply the specified object, the following must be\n+   * true:\n+   * <p>\n+   * <ol>\n+   * <li>The specified <code>CodeSource</code> must not be <code>null</code>.\n+   * <li>If the specified <code>CodeSource</code> has a certificate list, \n+   * all of that object's certificates must be present in the certificate\n+   * list of this object.\n+   * <li>If this object does not have a <code>null</code> location, then\n+   * the following addtional tests must be passed.\n+   * <ol>\n+   * <li>The specified <code>CodeSource</code> must not have a <code>null</code> location.\n+   * <li>The specified <code>CodeSource</code>'s location must be equal to\n+   * this object's location, or<br>\n+   * <ul>\n+   * <li>The specifiec <code>CodeSource</code>'s location protocol, port, \n+   * and ref (aka, anchor) must equal this objects, and\n+   * <li>The specified <code>CodeSource</code>'s location host must imply this\n+   * object's location host, as determined by contructing \n+   * <code>SocketPermission</code> objects from each with no action list and\n+   * using that classes's <code>implies</code> method. And,\n+   * <li>If this object's location file ends with a '/', then the specified\n+   * object's location file must start with this object's location file.\n+   * Otherwise, the specified object's location file must start with this\n+   * object's location file with the '/' character appended to it.\n+   * </ul>\n+   * </ol>\n+   * </ol>\n+   *\n+   * @param cs The <code>CodeSource</code> to test against this object\n+   *\n+   * @return <code>true</code> if this specified <code>CodeSource</code> is specified by this object, <code>false</code> otherwise.\n+   */\n+  public boolean implies(CodeSource cs)\n+  {\n+    if (cs == null)\n+      return false;\n+\n+    // First check the certificate list\n+    java.security.cert.Certificate[] their_certs = cs.getCertificates();\n+    java.security.cert.Certificate[] our_certs = getCertificates();\n+\n+    if (our_certs != null)\n+      {\n+\tif (their_certs == null)\n+\t  return false;\n+\n+\tfor (int i = 0; i < our_certs.length; i++)\n+\t  {\n+\t    int j;\n+\t    for (j = 0; j < their_certs.length; j++)\n+\t      if (our_certs[i].equals(their_certs[j]))\n+\t\tbreak;\n+\n+\t    if (j == their_certs.length)\n+\t      return false;\n+\t  }\n+      }\n+\n+    // Next check the location\n+    URL their_loc = getLocation();\n+    URL our_loc = getLocation();\n+\n+    if (our_loc == null)\n+      return true;\n+    else if (their_loc == null)\n+      return false;\n+\n+    if (!our_loc.getProtocol().equals(their_loc.getProtocol()))\n+      return false;\n+\n+    if (our_loc.getPort() != -1)\n+      if (our_loc.getPort() != their_loc.getPort())\n+\treturn false;\n+\n+    if (our_loc.getRef() != null)\n+      if (!our_loc.getRef().equals(their_loc.getRef()))\n+\treturn false;\n+\n+    // See javadoc comments for what we are doing here.\n+    if (our_loc.getHost() != null)\n+      {\n+\tString their_host = their_loc.getHost();\n+\tif (their_host == null)\n+\t  return false;\n+\n+\tSocketPermission our_sockperm =\n+\t  new SocketPermission(our_loc.getHost(), \"accept\");\n+\tSocketPermission their_sockperm =\n+\t  new SocketPermission(their_host, \"accept\");\n+\n+\tif (!our_sockperm.implies(their_sockperm))\n+\t  return false;\n+      }\n+\n+    String our_file = our_loc.getFile();\n+    if (our_file != null)\n+      {\n+\tif (!our_file.endsWith(\"/\"))\n+\t  our_file = our_file + \"/\";\n+\n+\tString their_file = their_loc.getFile();\n+\tif (their_file == null)\n+\t  return false;\n+\n+\tif (!their_file.startsWith(our_file))\n+\t  return false;\n+      }\n+\n+    return true;\n+  }\n+\n+  /**\n+   * This method tests the specified <code>Object</code> for equality with\n+   * this object.  This will be true if and only if:\n+   * <p>\n+   * <ul>\n+   * <li>The specified object is not <code>null</code>.\n+   * <li>The specified object is an instance of <code>CodeSource</code>.\n+   * <li>The specified object's location is the same as this object's.\n+   * <li>The specified object's certificate list contains the exact same\n+   * entries as the object's.  Note that the order of the certificate lists\n+   * is not significant.\n+   * </ul>\n+   *\n+   * @param obj The <code>Object</code> to test against.\n+   *\n+   * @return <code>true</code> if the specified object is equal to this one, <code>false</code> otherwise.\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if (obj == null)\n+      return false;\n+\n+    if (!(obj instanceof CodeSource))\n+      return false;\n+\n+    CodeSource cs = (CodeSource) obj;\n+\n+    // First check the certificate list\n+    java.security.cert.Certificate[] their_certs = cs.getCertificates();\n+    java.security.cert.Certificate[] our_certs = getCertificates();\n+\n+    if ((our_certs == null) && (their_certs != null))\n+      return false;\n+    else if ((our_certs != null) && (their_certs == null))\n+      return false;\n+\n+    if (our_certs != null)\n+      {\n+\tif (our_certs.length != their_certs.length)\n+\t  return false;\n+\n+\tfor (int i = 0; i < our_certs.length; i++)\n+\t  {\n+\t    int j;\n+\t    for (j = 0; j < their_certs.length; j++)\n+\t      if (our_certs[i].equals(their_certs[j]))\n+\t\tbreak;\n+\n+\t    if (j == their_certs.length)\n+\t      return false;\n+\t  }\n+      }\n+\n+    // Now the location\n+    URL their_loc = cs.getLocation();\n+    URL our_loc = getLocation();\n+\n+    if ((our_loc == null) && (their_loc != null))\n+      return false;\n+\n+    if (!our_loc.equals(their_loc))\n+      return false;\n+\n+    return true;\n+  }\n+\n+  /**\n+   * This method returns a hash value for this object.\n+   *\n+   * @return A hash value for this object.\n+   */\n+  public int hashCode()\n+  {\n+    URL location = getLocation();\n+    if (location == null)\n+      return System.identityHashCode(this);\n+\n+    return location.hashCode();\n+  }\n+\n+  /**\n+   * This method returns a <code>String</code> that represents this object.\n+   * This <code>String</code> will contain the object's hash code, location,\n+   * and certificate list.\n+   *\n+   * @return A <code>String</code> for this object\n+   */\n+  public String toString()\n+  {\n+    StringBuffer sb = new StringBuffer(\"\");\n+\n+    sb.append(super.toString() + \" (\" + linesep);\n+    sb.append(\"Location: \" + getLocation() + linesep);\n+\n+    java.security.cert.Certificate[] certs = getCertificates();\n+    if (certs == null)\n+      sb.append(\"<none>\" + linesep);\n+    else\n+      for (int i = 0; i < certs.length; i++)\n+\tsb.append(certs[i] + linesep);\n+\n+    sb.append(\")\" + linesep);\n+\n+    return sb.toString();\n+  }\n+}"}, {"sha": "31994086d26fcc2aa85e6bc0bafea289a3a386a2", "filename": "libjava/java/security/DigestException.java", "status": "modified", "additions": 39, "deletions": 13, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FDigestException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FDigestException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FDigestException.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,30 +1,56 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* DigestException.java -- A generic message digest exception\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n \n-package java.security;\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 1, 2000.\n- */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n \n /**\n- * Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n+ * This exception indicates that a generic message digest exception has \n+ * occurred.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n-\n public class DigestException extends GeneralSecurityException\n {\n+  /**\n+   * This method initializes a new <code>DigestException</code> with no\n+   * descriptive message.\n+   */\n   public DigestException()\n   {\n     super();\n   }\n \n+  /**\n+   * This method initializes a new instance of <code>DigestException</code>\n+   * with a descriptive error message.\n+   *\n+   * @param msg The descriptive message\n+   */\n   public DigestException(String msg)\n   {\n     super(msg);"}, {"sha": "bfb6c405700de57ad84dc82c8aa5f5acf905d885", "filename": "libjava/java/security/DigestInputStream.java", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FDigestInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FDigestInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FDigestInputStream.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,155 @@\n+/* DigestInputStream.java --- An Input stream tied to a message digest\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+//import java.security.MessageDigest;\n+import java.io.InputStream;\n+import java.io.FilterInputStream;\n+import java.io.IOException;\n+\n+/**\n+   DigestInputStream is a class that ties an InputStream with a \n+   MessageDigest. The Message Digest is used by the class to \n+   update it self as bytes are read from the InputStream.\n+\n+   The updating to the digest depends on the on flag which is set\n+   to true by default to tell the class to update the data\n+   in the message digest.\n+\n+   @version 0.0\n+   @author Mark Benvenuto <ivymccough@worldnet.att.net>\n+ */\n+public class DigestInputStream extends FilterInputStream\n+{\n+  /**\n+     The message digest for the DigestInputStream \n+   */\n+  protected MessageDigest digest;\n+\n+  //Manages the on flag\n+  private boolean state = true;\n+\n+  /**\n+     Constructs a new DigestInputStream.\n+     It associates a MessageDigest with the stream to \n+     compute the stream as data is written.\n+\n+     @param stream An InputStream to associate this stream with\n+     @param digest A MessageDigest to hash the stream with\n+   */\n+  public DigestInputStream(InputStream stream, MessageDigest digest)\n+  {\n+    super(stream);\n+    //this.in = stream;\n+    this.digest = digest;\n+  }\n+\n+  /**\n+     Returns the MessageDigest associated with this DigestInputStream \n+\n+     @return The MessageDigest used to hash this stream\n+   */\n+  public MessageDigest getMessageDigest()\n+  {\n+    return digest;\n+  }\n+\n+  /**\n+     Sets the current MessageDigest to current parameter\n+\n+     @param digest A MessageDigest to associate with this stream\n+   */\n+  public void setMessageDigest(MessageDigest digest)\n+  {\n+    this.digest = digest;\n+  }\n+\n+  /** \n+     Reads a byte from the input stream and updates the digest.\n+     This method reads the underlying input stream and if the \n+     on flag is true then updates the message digest.\n+\n+     @return Returns a byte from the input stream, -1 is returned to indicate that \n+     the end of stream was reached before this read call\n+\n+     @throws IOException if an IO error occurs in the underlying input stream,\n+     this error is thrown\n+   */\n+  public int read() throws IOException\n+  {\n+    int temp = in.read();\n+\n+    if (state == true && temp != -1)\n+      digest.update((byte) temp);\n+\n+    return temp;\n+  }\n+\n+  /** \n+     Reads bytes from the input stream and updates the digest.\n+     This method reads the underlying input stream and if the \n+     on flag is true then updates the message digest.\n+\n+     @param b a byte array to store the data from the input stream\n+     @param off an offset to start at in the array\n+     @param len length of data to read\n+     @return Returns count of bytes read, -1 is returned to indicate that \n+     the end of stream was reached before this read call\n+\n+     @throws IOException if an IO error occurs in the underlying input stream,\n+     this error is thrown\n+   */\n+  public int read(byte[]b, int off, int len) throws IOException\n+  {\n+    int temp = in.read(b, off, len);\n+\n+    if (state == true && temp != -1)\n+      digest.update(b, off, len);\n+\n+    return temp;\n+  }\n+\n+  /**\n+     Sets the flag specifing if this DigestInputStream updates the\n+     digest in the write() methods. The default is on;\n+\n+     @param on True means it digests stream, false means it does not\n+   */\n+  public void on(boolean on)\n+  {\n+    state = on;\n+  }\n+\n+  /**\n+     Converts the input stream and underlying message digest to a string.\n+\n+     @return A string representing the input stream and message digest.\n+   */\n+  public String toString()\n+  {\n+    return \"[Digest Input Stream] \" + digest.toString();\n+  }\n+}"}, {"sha": "6817a45a0f809510712b49dd7afff8efe1fec1fe", "filename": "libjava/java/security/DigestOutputStream.java", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FDigestOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FDigestOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FDigestOutputStream.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -7,7 +7,7 @@\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -24,7 +24,6 @@\n This exception does not however invalidate any other reasons why the\n executable file might be covered by the GNU General Public License. */\n \n-\n package java.security;\n \n import java.io.OutputStream;\n@@ -42,12 +41,12 @@ true by default that tells the class to update the data in the\n \n    @version 0.0\n    @author Mark Benvenuto <ivymccough@worldnet.att.net>\n-*/\n+ */\n public class DigestOutputStream extends FilterOutputStream\n {\n   /**\n      The message digest for the DigestOutputStream\n-  */\n+   */\n   protected MessageDigest digest;\n \n   //Manages the on flag\n@@ -60,29 +59,29 @@ public class DigestOutputStream extends FilterOutputStream\n \n      @param stream An OutputStream to associate this stream with\n      @param digest A MessageDigest to hash the stream with\n-  */\n-  public DigestOutputStream (OutputStream stream, MessageDigest digest)\n+   */\n+  public DigestOutputStream(OutputStream stream, MessageDigest digest)\n   {\n-    super (stream);\n+    super(stream);\n     this.digest = digest;\n   }\n \n   /**\n      Returns the MessageDigest associated with this DigestOutputStream\n \n      @return The MessageDigest used to hash this stream\n-  */\n-  public MessageDigest getMessageDigest ()\n+   */\n+  public MessageDigest getMessageDigest()\n   {\n     return digest;\n   }\n-  \n+\n   /**\n      Sets the current MessageDigest to current parameter\n-\t\n+\n      @param digest A MessageDigest to associate with this stream\n-  */\n-  public void setMessageDigest (MessageDigest digest)\n+   */\n+  public void setMessageDigest(MessageDigest digest)\n   {\n     this.digest = digest;\n   }\n@@ -93,16 +92,16 @@ public void setMessageDigest (MessageDigest digest)\n      the underlying output stream.\n \n      @param b A byte to write to the output stream\n-     \n+\n      @exception IOException if the underlying output stream \n      cannot write the byte, this is thrown.\n-  */\n-  public void write (int b) throws IOException\n+   */\n+  public void write(int b) throws IOException\n   {\n     if (state)\n-      digest.update ((byte)b);\n-    \n-    super.write (b);\n+      digest.update((byte) b);\n+\n+    super.write(b);\n   }\n \n   /**\n@@ -115,22 +114,22 @@ public void write (int b) throws IOException\n \n      @exception IOException if the underlying output stream \n      cannot write the bytes, this is thrown.\n-  */\n-  public void write (byte[] b, int off, int len) throws IOException\n+   */\n+  public void write(byte[]b, int off, int len) throws IOException\n   {\n     if (state)\n-      digest.update (b, off, len);\n+      digest.update(b, off, len);\n \n-    super.write (b, off, len);\n+    super.write(b, off, len);\n   }\n \n   /**\n      Sets the flag specifying if this DigestOutputStream updates the\n      digest in the write() methods. The default is on;\n \n      @param on True means it digests stream, false means it does not\n-  */\n-  public void on (boolean on)\n+   */\n+  public void on(boolean on)\n   {\n     state = on;\n   }\n@@ -139,7 +138,7 @@ public void on (boolean on)\n      Converts the output stream and underlying message digest to a string.\n \n      @return A string representing the output stream and message digest.\n-  */\n+   */\n   public String toString()\n   {\n     return \"[Digest Output Stream] \" + digest.toString();"}, {"sha": "57f78b16403478c04dbd3f8eef7f222c6123f524", "filename": "libjava/java/security/DomainCombiner.java", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FDomainCombiner.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FDomainCombiner.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FDomainCombiner.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,53 @@\n+/* DomainCombiner.java - Combines ProtectionDomains\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+/**\n+   A public interface used to combine two ProtectionDomains in a new\n+   ProtectionDomain and update the current Protection Domains\n+   associated with the current AccessControllerContext.\n+\n+   It can add, subtract, or update ProtectionDomains or possibly\n+   remove duplicates or any possible complex action but just not add\n+   ones that do not already exist in either array.\n+\n+   @since JDK 1.3\n+   @author Mark Benvenuto \n+ */\n+public interface DomainCombiner\n+{\n+  /**\n+     Combines the current ProtectionDomains of the Thread with new\n+     ProtectionDomains.\n+\n+     @param currentDomains - the ProtectionDomains for the current thread.\n+     @param assignedDomains - ProtectionsDomains to add\n+     @returns a new array of all the ProtectionDomains \n+   */\n+  public ProtectionDomain[] combine(ProtectionDomain[]currentDomains,\n+\t\t\t\t    ProtectionDomain[]assignedDomains);\n+}"}, {"sha": "6b3f146f7e4d9791fb8f89dcb6d08b4a2b62d490", "filename": "libjava/java/security/DummyKeyPairGenerator.java", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FDummyKeyPairGenerator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FDummyKeyPairGenerator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FDummyKeyPairGenerator.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,48 @@\n+/* DummyKeyPairGenerator.java\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+final class DummyKeyPairGenerator extends KeyPairGenerator\n+{\n+  private KeyPairGeneratorSpi kpgSpi = null;\n+\n+  public DummyKeyPairGenerator(KeyPairGeneratorSpi kpgSpi, String algorithm)\n+  {\n+    super(algorithm);\n+    this.kpgSpi = kpgSpi;\n+  }\n+\n+  public void initialize(int keysize, SecureRandom random)\n+  {\n+    kpgSpi.initialize(keysize, random);\n+  }\n+\n+  public KeyPair generateKeyPair()\n+  {\n+    return kpgSpi.generateKeyPair();\n+  }\n+}"}, {"sha": "775afa0ca95a890515ef6ead1e7d395f441502cd", "filename": "libjava/java/security/DummyMessageDigest.java", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FDummyMessageDigest.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FDummyMessageDigest.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FDummyMessageDigest.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,62 @@\n+/* DummyMessageDigest.java\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+import java.security.MessageDigest;\n+import java.security.MessageDigestSpi;\n+import java.security.DigestException;\n+\n+final class DummyMessageDigest extends MessageDigest\n+{\n+  private MessageDigestSpi mdSpi = null;\n+\n+  public DummyMessageDigest(MessageDigestSpi mdSpi, String algorithm)\n+  {\n+    super(algorithm);\n+    this.mdSpi = mdSpi;\n+  }\n+\n+  protected void engineUpdate(byte input)\n+  {\n+    mdSpi.engineUpdate(input);\n+  }\n+\n+  protected void engineUpdate(byte[]input, int offset, int len)\n+  {\n+    mdSpi.engineUpdate(input, offset, len);\n+  }\n+\n+  protected byte[] engineDigest()\n+  {\n+    return mdSpi.engineDigest();\n+  }\n+\n+  protected void engineReset()\n+  {\n+    mdSpi.engineReset();\n+  }\n+}"}, {"sha": "6c0624ca5fa98e1d5ced6effca8d7dc6b786aed4", "filename": "libjava/java/security/DummySignature.java", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FDummySignature.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FDummySignature.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FDummySignature.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,83 @@\n+/* DummySignature.java\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+final class DummySignature extends Signature\n+{\n+  private SignatureSpi sigSpi = null;\n+\n+  public DummySignature(SignatureSpi sigSpi, String algorithm)\n+  {\n+    super(algorithm);\n+    this.sigSpi = sigSpi;\n+  }\n+\n+  protected void engineInitVerify(PublicKey publicKey)\n+    throws InvalidKeyException\n+  {\n+    sigSpi.engineInitVerify(publicKey);\n+  }\n+\n+  protected void engineInitSign(PrivateKey privateKey)\n+    throws InvalidKeyException\n+  {\n+    sigSpi.engineInitSign(privateKey);\n+  }\n+\n+  protected void engineUpdate(byte b) throws SignatureException\n+  {\n+    sigSpi.engineUpdate(b);\n+  }\n+\n+  protected void engineUpdate(byte[]b, int off, int len)\n+    throws SignatureException\n+  {\n+    sigSpi.engineUpdate(b, off, len);\n+  }\n+\n+  protected byte[] engineSign() throws SignatureException\n+  {\n+    return sigSpi.engineSign();\n+  }\n+\n+  protected boolean engineVerify(byte[]sigBytes) throws SignatureException\n+  {\n+    return sigSpi.engineVerify(sigBytes);\n+  }\n+\n+  protected void engineSetParameter(String param, Object value)\n+    throws InvalidParameterException\n+  {\n+    sigSpi.engineSetParameter(param, value);\n+  }\n+\n+  protected Object engineGetParameter(String param)\n+    throws InvalidParameterException\n+  {\n+    return sigSpi.engineGetParameter(param);\n+  }\n+}"}, {"sha": "f0bf39bb51c25209143e1f01d9d3ae00b3b7b201", "filename": "libjava/java/security/GeneralSecurityException.java", "status": "modified", "additions": 44, "deletions": 14, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FGeneralSecurityException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FGeneralSecurityException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FGeneralSecurityException.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,31 +1,61 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* GeneralSecurityException.java -- Common superclass of security exceptions\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n \n-package java.security;\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 1, 2000.\n- */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n \n /**\n- * Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n+ * This class is the common superclass of all security exceptions.  All\n+ * exceptions in java.security extend this class with the exception (no\n+ * pun intended) of <code>AccessControlException</code> and \n+ * <code>CertificateException</code> which extend <code>SecurityException</code>\n+ * and <code>ProviderException</code> which extens <code>RuntimeException</code>.\n+ * and <code>InvalidParamterException</code> which extends\n+ * <code>IllegalArgumentException</code>.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n-\n-// JDK1.2\n public class GeneralSecurityException extends Exception\n {\n+  /**\n+   * This method initializes a new instance of <code>GeneralSecurityException</code> \n+   * with no descriptive error message.\n+   */\n   public GeneralSecurityException()\n   {\n     super();\n   }\n \n+  /**\n+   * This method initializes a new instance of <code>GeneralSecurityException</code>\n+   * with a descriptive error message.\n+   *\n+   * @param msg The descriptive error message.\n+   */\n   public GeneralSecurityException(String msg)\n   {\n     super(msg);"}, {"sha": "c4420731ed46455e43b96ed0b9c044c2f97c05f4", "filename": "libjava/java/security/Guard.java", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FGuard.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FGuard.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FGuard.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -7,7 +7,7 @@\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -24,31 +24,27 @@\n This exception does not however invalidate any other reasons why the\n executable file might be covered by the GNU General Public License. */\n \n-\n package java.security;\n \n /**\n-  * This interface specifies a mechanism for querying whether or not\n-  * access is allowed to a guarded object.\n-  *\n-  * @version 0.0\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n+ * This interface specifies a mechanism for querying whether or not\n+ * access is allowed to a guarded object.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n public interface Guard\n {\n-\n-/**\n-  * This method tests whether or not access is allowed to the specified\n-  * guarded object.  Access is allowed if this method returns silently.  If\n-  * access is denied, an exception is generated.\n-  *\n-  * @param obj The <code>Object</code> to test\n-  *\n-  * @exception SecurityException If access to the object is denied.\n-  */\n-public abstract void\n-checkGuard(Object obj) throws SecurityException;\n-\n-} // interface Guard\n-\n+  /**\n+   * This method tests whether or not access is allowed to the specified\n+   * guarded object.  Access is allowed if this method returns silently.  If\n+   * access is denied, an exception is generated.\n+   *\n+   * @param obj The <code>Object</code> to test\n+   *\n+   * @exception SecurityException If access to the object is denied.\n+   */\n+  public abstract void checkGuard(Object obj) throws SecurityException;\n+\n+}"}, {"sha": "4e4689669870777fcd1ad75e715ff78abc24f57d", "filename": "libjava/java/security/GuardedObject.java", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FGuardedObject.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FGuardedObject.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FGuardedObject.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,84 @@\n+/* GuardedObject.java -- An object protected by a Guard\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * This class is an object that is guarded by a <code>Guard</code> object.\n+ * The object that is being guarded is retrieved by a call to the only \n+ * method in this class - <code>getObject</code>.  That method returns the\n+ * guarded <code>Object</code> after first checking with the \n+ * <code>Guard</code>.  If the <code>Guard</code> disallows access, an\n+ * exception will be thrown.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public class GuardedObject implements Serializable\n+{\n+  /**\n+   * This is the Guard that is protecting the object.\n+   */\n+  private Guard guard;\n+\n+  /**\n+   * This is the object that is being guarded.\n+   */\n+  private Object object;\n+\n+  /**\n+   * This method initializes a new instance of <code>GuardedObject</code>\n+   * that protects the specified <code>Object</code> using the specified\n+   * <code>Guard</code>\n+   *\n+   * @param object The <code>Object</code> to guard\n+   * @param guard The <code>Guard</code> that is protecting the object.\n+   */\n+  public GuardedObject(Object object, Guard guard)\n+  {\n+    this.object = object;\n+    this.guard = guard;\n+  }\n+\n+  /**\n+   * This method first call the <code>checkGuard</code> method on the \n+   * <code>Guard</code> object protecting the guarded object.  If the \n+   * <code>Guard</code> disallows access, an exception is thrown, otherwise\n+   * the <code>Object</code> is returned.\n+   *\n+   * @return The object being guarded\n+   *\n+   * @exception SecurityException If the <code>Guard</code> disallows access to the object.\n+   */\n+  public Object getObject() throws SecurityException\n+  {\n+    guard.checkGuard(object);\n+    return (object);\n+  }\n+}"}, {"sha": "d8e024f6d11106968d6a2932a25fe08b9136f01f", "filename": "libjava/java/security/Identity.java", "status": "added", "additions": 363, "deletions": 0, "changes": 363, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FIdentity.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FIdentity.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FIdentity.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,363 @@\n+/* Identity.java --- Identity Class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+   This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+import java.io.Serializable;\n+import java.util.Vector;\n+\n+/**\n+   The Identity class is used to repsent people and companies that \n+   can be authenticated using public key encryption. The identities\n+   can also be abstract objects such as smart cards.\n+\n+   Identity object store a name and public key for each identity.\n+   The names cannot be changed and the identities can be scoped.\n+   Each identity (name and public key) within a scope is unique \n+   to that scope.\n+\n+   Each identity has a set of ceritificates which all specify the \n+   same public key but not necessarily the same name.\n+\n+   The Identity class can be subclassed to allow additional \n+   information to be attached to it.\n+\n+   @since JDK 1.1\n+\n+   @deprecated Use java.security.KeyStore, the java.security.cert \n+   package, and java.security.Principal. \n+\n+   @author Mark Benvenuto       \n+ */\n+public abstract class Identity implements Principal, Serializable\n+{\n+  private String name;\n+  private IdentityScope scope;\n+  private PublicKey publicKey;\n+  private String info;\n+  private Vector certificates;\n+\n+  /**\n+     Creates a new instance of Identity from Serialized Data\n+   */\n+  protected Identity()\n+  {\n+  }\n+\n+  /**\n+     Creates a new instance of Identity with the specified name \n+     and IdentityScope.\n+\n+     @param name the name to use\n+     @param scope the scope to use\n+\n+     @throws KeyManagementException if the identity is already \n+     present\n+   */\n+  public Identity(String name, IdentityScope scope)\n+    throws KeyManagementException\n+  {\n+    this.name = name;\n+    this.scope = scope;\n+  }\n+\n+  /**\n+     Creates a new instance of Identity with the specified name \n+     and no scope.\n+\n+     @param name the name to use\n+   */\n+  public Identity(String name)\n+  {\n+    this.name = name;\n+    this.scope = null;\n+  }\n+\n+  /**\n+     Gets the name for this Identity.\n+\n+     @return the name\n+   */\n+  public final String getName()\n+  {\n+    return name;\n+  }\n+\n+  /**\n+     Gets the scope for this Identity.\n+\n+     @return the scope\n+   */\n+  public final IdentityScope getScope()\n+  {\n+    return scope;\n+  }\n+\n+  /**\n+     Gets the public key for this identity.\n+\n+     @return the public key\n+   */\n+  public PublicKey getPublicKey()\n+  {\n+    return publicKey;\n+  }\n+\n+  /**\n+     Sets the public key for this identity.\n+     The old key and all certificates are removed.\n+\n+     This class checks the security manager with the call \n+     checkSecurityAccess with \"setIdentityPublicKey\".\n+\n+     @param key the public key to use\n+\n+     @throws KeyManagementException if this public key is used by \n+     another identity in the current scope.\n+     @throws SecurityException - if the security manager denies \n+     access to \"setIdentityPublicKey\"\n+   */\n+  public void setPublicKey(PublicKey key) throws KeyManagementException\n+  {\n+    SecurityManager sm = System.getSecurityManager();\n+    if (sm != null)\n+      sm.checkSecurityAccess(\"setIdentityPublicKey\");\n+\n+    this.publicKey = key;\n+  }\n+\n+  /**\n+     Sets the general information string.\n+\n+     This class checks the security manager with the call \n+     checkSecurityAccess with \"setIdentityInfo\".\n+\n+     @param info the general information string.\n+\n+     @throws SecurityException - if the security manager denies \n+     access to \"setIdentityInfo\"\n+   */\n+  public void setInfo(String info)\n+  {\n+    SecurityManager sm = System.getSecurityManager();\n+    if (sm != null)\n+      sm.checkSecurityAccess(\"setIdentityInfo\");\n+\n+    this.info = info;\n+  }\n+\n+  /**\n+     Gets the general information string.\n+\n+     @return the string\n+   */\n+  public String getInfo()\n+  {\n+    return info;\n+  }\n+\n+  /**\n+     Adds a certificate to the list of ceritificates for this \n+     identity. The public key in this certificate must match the \n+     existing public key if it exists.\n+\n+     This class checks the security manager with the call \n+     checkSecurityAccess with \"addIdentityCertificate\".\n+\n+     @param certificate the certificate to add\n+\n+     @throws KeyManagementException if the certificate is invalid\n+     or the public key conflicts\n+     @throws SecurityException - if the security manager denies \n+     access to \"addIdentityCertificate\"\n+   */\n+  public void addCertificate(java.security.Certificate certificate)\n+    throws KeyManagementException\n+  {\n+    SecurityManager sm = System.getSecurityManager();\n+    if (sm != null)\n+      sm.checkSecurityAccess(\"addIdentityCertificate\");\n+\n+    //Check public key of this certificate against the first one \n+    //in the vector\n+    if (certificates.size() > 0)\n+      {\n+\tif (((Certificate) certificates.firstElement()).getPublicKey() !=\n+\t    publicKey)\n+\t  throw new KeyManagementException(\"Public key does not match\");\n+      }\n+    certificates.addElement(certificate);\n+  }\n+\n+  /**\n+     Removes a certificate from the list of ceritificates for this \n+     identity. \n+\n+     This class checks the security manager with the call \n+     checkSecurityAccess with \"removeIdentityCertificate\".\n+\n+     @param certificate the certificate to add\n+\n+     @throws KeyManagementException if the certificate is invalid\n+     @throws SecurityException - if the security manager denies \n+     access to \"removeIdentityCertificate\"\n+   */\n+  public void removeCertificate(Certificate certificate)\n+    throws KeyManagementException\n+  {\n+    SecurityManager sm = System.getSecurityManager();\n+    if (sm != null)\n+      sm.checkSecurityAccess(\"removeIdentityCertificate\");\n+\n+    if (certificates.contains(certificate) == false)\n+      throw new KeyManagementException(\"Certificate not found\");\n+\n+    certificates.removeElement(certificate);\n+  }\n+\n+  /**\n+     Returns an array of certificates for this identity.\n+\n+     @returns array of certificates\n+   */\n+  public Certificate[] certificates()\n+  {\n+    Certificate certs[] = new Certificate[certificates.size()];\n+    int max = certificates.size();\n+    for (int i = 0; i < max; i++)\n+      certs[i] = (Certificate) certificates.elementAt(i);\n+    return certs;\n+  }\n+\n+  /**\n+     Checks for equality between this Identity and the specified \n+     object. If first checks if they are the same object, then \n+     if the name and scope matches and returns true if successful.\n+     If these tests fail, identityEquals is called.\n+\n+     @return true if they are equal, false otherwise\n+   */\n+  public final boolean equals(Object identity)\n+  {\n+    if (identity instanceof Identity)\n+      {\n+\tif (identity == this)\n+\t  return true;\n+\n+\tif ((((Identity) identity).getName() == this.name) &&\n+\t    (((Identity) identity).getScope() == this.scope))\n+\t  return true;\n+\n+\treturn identityEquals((Identity) identity);\n+      }\n+    return false;\n+  }\n+\n+  /**\n+     Checks for equality between this Identity and the specified \n+     object. A subclass should override this method. The default \n+     behavior is to return true if the public key and names match.\n+\n+     @return true if they are equal, false otherwise\n+   */\n+  protected boolean identityEquals(Identity identity)\n+  {\n+    return ((identity.getName() == this.name) &&\n+\t    (identity.getPublicKey() == this.publicKey));\n+  }\n+\n+  /**\n+     Returns a string representing this Identity.\n+\n+     This class checks the security manager with the call \n+     checkSecurityAccess with \"printIdentity\".\n+\n+     @returns a string representing this Identity.\n+\n+     @throws SecurityException - if the security manager denies \n+     access to \"printIdentity\"\n+   */\n+  public String toString()\n+  {\n+    SecurityManager sm = System.getSecurityManager();\n+    if (sm != null)\n+      sm.checkSecurityAccess(\"printIdentity\");\n+\n+    /* TODO: Insert proper format here */\n+    return (name + \":@\" + scope + \" Public Key: \" + publicKey);\n+  }\n+\n+  /**\n+     Returns a detailed string representing this Identity.\n+\n+     This class checks the security manager with the call \n+     checkSecurityAccess with \"printIdentity\".\n+\n+     @param detailed indicates whether or not to provide detailed \n+     information\n+\n+     @returns a string representing this Identity.\n+\n+     @throws SecurityException - if the security manager denies \n+     access to \"printIdentity\"\n+   */\n+  public String toString(boolean detailed)\n+  {\n+    SecurityManager sm = System.getSecurityManager();\n+    if (sm != null)\n+      sm.checkSecurityAccess(\"printIdentity\");\n+\n+    if (detailed)\n+      {\n+\t/* TODO: Insert proper detailed format here */\n+\treturn (name + \":@\" + scope + \" Public Key: \" + publicKey);\n+      }\n+    else\n+      {\n+\t/* TODO: Insert proper format here */\n+\treturn (name + \":@\" + scope + \" Public Key: \" + publicKey);\n+      }\n+  }\n+\n+  /**\n+     Gets the hashcode for this Identity.\n+\n+     @returns the hashcode\n+   */\n+  public int hashCode()\n+  {\n+    int ret = name.hashCode();\n+    if (publicKey != null)\n+      ret |= publicKey.hashCode();\n+    if (scope != null)\n+      ret |= scope.hashCode();\n+    if (info != null)\n+      ret |= info.hashCode();\n+    if (certificates != null)\n+      ret |= certificates.hashCode();\n+\n+    return ret;\n+  }\n+}"}, {"sha": "4054888e5161958761adadd1613db50498ba3c82", "filename": "libjava/java/security/IdentityScope.java", "status": "added", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FIdentityScope.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FIdentityScope.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FIdentityScope.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,205 @@\n+/* IdentityScope.java --- IdentityScope Class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+   This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+import java.util.Enumeration;\n+\n+/**\n+   IdentityScope represents a scope of an identity. IdentityScope \n+   is also an Identity and can have a name and scope along with \n+   the other qualitites identities posses.\n+\n+   An IdentityScope contains other Identity objects. All Identity \n+   objects are manipulated in the scope the same way. The scope \n+   is suppose to apply different scope to different type of \n+   Identities.\n+\n+   No identity within the same scope can have the same public key.\n+\n+   @since JDK 1.1\n+\n+   @deprecated Use java.security.KeyStore, the java.security.cert \n+   package, and java.security.Principal. \n+\n+   @author Mark Benvenuto       \n+ */\n+public abstract class IdentityScope extends Identity\n+{\n+  private static IdentityScope systemScope = null;\n+\n+  /**\n+     Creates a new instance of IdentityScope from Serialized Data\n+   */\n+  protected IdentityScope()\n+  {\n+    super();\n+  }\n+\n+  /**\n+     Creates a new instance of IdentityScope with the specified name \n+     and no scope.\n+\n+     @param name the name to use\n+   */\n+  public IdentityScope(String name)\n+  {\n+    super(name);\n+  }\n+\n+  /**\n+     Creates a new instance of IdentityScope with the specified name \n+     and IdentityScope.\n+\n+     @param name the name to use\n+     @param scope the scope to use\n+\n+     @throws KeyManagementException if the identity scope is already \n+     present\n+   */\n+  public IdentityScope(String name, IdentityScope scope)\n+    throws KeyManagementException\n+  {\n+    super(name, scope);\n+  }\n+\n+  /**\n+     Gets the system's Scope.\n+   */\n+  public static IdentityScope getSystemScope()\n+  {\n+    if (systemScope == null)\n+      {\n+\t//Load it\n+\t//systemScope;\n+      }\n+    return systemScope;\n+  }\n+\n+  /**\n+     Sets the scope of the system.\n+\n+     This class checks the security manager with the call \n+     checkSecurityAccess with \"setSystemScope\".\n+\n+     @param scope the new sustem scope\n+\n+     @throws SecurityException - if the security manager denies \n+     access to \"setSystemScope\"\n+   */\n+  protected static void setSystemScope(IdentityScope scope)\n+  {\n+    SecurityManager sm = System.getSecurityManager();\n+    if (sm != null)\n+      sm.checkSecurityAccess(\"setSystemScope\");\n+\n+    systemScope = scope;\n+  }\n+\n+  /**\n+     Gets the number of entries within this IdentityScope.\n+\n+     @returns the number of entries\n+   */\n+  public abstract int size();\n+\n+  /**\n+     Gets the specified Identity within this scope\n+     by specified name.\n+\n+     @param name name of Identity to get\n+\n+     @returns an identity representing the name or null if it \n+     cannot be found\n+   */\n+  public abstract Identity getIdentity(String name);\n+\n+  /**\n+     Gets the specified Identity within this scope\n+     by the specified Principal.\n+\n+     @param principal The Principal of the Identity to get\n+\n+     @returns an identity representing the principal or null if it \n+     cannot be found\n+   */\n+  public Identity getIdentity(Principal principal)\n+  {\n+    return getIdentity(principal.getName());\n+  }\n+\n+  /**\n+     Gets the specified Identity within this scope\n+     by the specified public key.\n+\n+     @param key the PublicKey of the Identity to get\n+\n+     @returns an identity representing the public key or null if it \n+     cannot be found\n+   */\n+  public abstract Identity getIdentity(PublicKey key);\n+\n+  /**\n+     Adds an identity to his scope.\n+\n+     @param identity the identity to add\n+\n+     @throws KeyManagementException if it is an invalid identity,\n+     an identity with the same key exists, or another error\n+     occurs.\n+   */\n+  public abstract void addIdentity(Identity identity)\n+    throws KeyManagementException;\n+\n+  /**\n+     Removes an identity to his scope.\n+\n+     @param identity the identity to remove\n+\n+     @throws KeyManagementException if it is a missing identity, \n+     or another error occurs.\n+   */\n+  public abstract void removeIdentity(Identity identity)\n+    throws KeyManagementException;\n+\n+  /**\n+     Returns an Enumeration of identities.\n+\n+     @returns an enumeration of the identities.\n+   */\n+  public abstract Enumeration identities();\n+\n+  /**\n+     Returns a string representing this IdentityScope.\n+     It includes the name, the scope name, and number of identities.\n+\n+     @returns a string representing this IdentityScope.\n+   */\n+  public String toString()\n+  {\n+    return (super.getName() + \" \" + super.getScope().getName()\n+\t    + \" \" + size());\n+  }\n+}"}, {"sha": "39f69f2c7d604b4a6c53febd4c01b8c2dec0cf79", "filename": "libjava/java/security/InvalidAlgorithmParameterException.java", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FInvalidAlgorithmParameterException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FInvalidAlgorithmParameterException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FInvalidAlgorithmParameterException.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,10 +1,28 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* InvalidAlgorithmParameterException.java\n+   Copyright (C) 2000  Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n package java.security;\n "}, {"sha": "64bc576b81f2b98819977367d36aadb888ee63d1", "filename": "libjava/java/security/InvalidKeyException.java", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FInvalidKeyException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FInvalidKeyException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FInvalidKeyException.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,10 +1,27 @@\n /* Copyright (C) 2000  Free Software Foundation\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n package java.security;\n "}, {"sha": "1444130d7cca514656baf256ff6ba407d2940712", "filename": "libjava/java/security/InvalidParameterException.java", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FInvalidParameterException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FInvalidParameterException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FInvalidParameterException.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,10 +1,27 @@\n /* Copyright (C) 2000  Free Software Foundation\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n package java.security;\n "}, {"sha": "bec79a32678c27543e57a5b61e15b791323135e5", "filename": "libjava/java/security/Key.java", "status": "modified", "additions": 63, "deletions": 16, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKey.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,28 +1,75 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Key.java -- A abstract representation of a digital key\n+   Copyright (C) 1998, 2000 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n- \n package java.security;\n+\n import java.io.Serializable;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 1, 2000.\n+ * This interfaces models the base characteristics that all keys must\n+ * have.  These are:  a key algorithm, an encoded form, and a format used\n+ * to encode the key.  Specific key types inherit from this interface.\n+ * <p>\n+ * Note that since this interface extends <code>Serializable</code>, all\n+ * keys may be serialized.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n-\n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n- */\n- \n public interface Key extends Serializable\n {\n+ /**\n+   * The verion identifier used for serialization.\n+   */\n   public static final long serialVersionUID = 6603384152749567654L;\n \n-  public String getAlgorithm();\n-  public String getFormat();\n-  public byte[] getEncoded();\n+  /**\n+   * This method returns the name of the algorithm for this key.  This is a\n+   * <code>String</code> such as \"RSA\".\n+   *\n+   * @return The name of the algorithm in use\n+   */\n+  public abstract String getAlgorithm();\n+\n+  /**\n+   * This method returns the name of the encoding format for this key.  This\n+   * is the name of the ASN.1 data format used for this key, such as\n+   * \"X.509\" or \"PKCS#8\".  This method returns <code>null</code> if this key\n+   * does not have an encoding format.\n+   *\n+   * @return The name of the encoding format for this key, or <code>null</code> if there is no such format.\n+   */\n+  public abstract String getFormat();\n+\n+  /**\n+   * This method returns the encoded form of the key.  If this key does not\n+   * support encoding, this method returns <code>null</code>\n+   *\n+   * @return The encoded form of the key, or <code>null</code> if no encoded form is available.\n+   */\n+  public abstract byte[] getEncoded();\n }"}, {"sha": "7fa485c184d015d128fe018490f72e4d1f011936", "filename": "libjava/java/security/KeyException.java", "status": "modified", "additions": 38, "deletions": 13, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FKeyException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FKeyException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKeyException.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,30 +1,55 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* KeyException.java -- Thrown when there is a problem with a key\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n \n-package java.security;\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 1, 2000.\n- */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n \n /**\n- * Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n+ * This exception is thrown when there is a problem with a key.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n-\n public class KeyException extends GeneralSecurityException\n {\n+  /**\n+   * This method initializes a new instance of <code>KeyException</code>\n+   * with no descriptive message.\n+   */\n   public KeyException()\n   {\n     super();\n   }\n \n+  /**\n+   * This method initializes a new instance of <code>KeyException</code>\n+   * with a descriptive message.\n+   *\n+   * @param msg The descriptive message.\n+   */\n   public KeyException(String msg)\n   {\n     super(msg);"}, {"sha": "7bbc355391b12d29ad6516c724bd5e41a4f9afb9", "filename": "libjava/java/security/KeyFactory.java", "status": "added", "additions": 232, "deletions": 0, "changes": 232, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FKeyFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FKeyFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKeyFactory.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,232 @@\n+/* KeyFactory.java --- Key Factory Class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+import java.security.spec.KeySpec;\n+import java.security.spec.InvalidKeySpecException;\n+\n+/**\n+   Key factories are used to convert keys (opaque cryptographic \n+   keys of type Key) into key specifications (transparent \n+   representations of the underlying key material).\n+\n+   Key factories are bi-directional. They allow a key class \n+   to be converted into a key specification (key material) and\n+   back again.\n+\n+   For example DSA public keys can be specified as \n+   DSAPublicKeySpec or X509EncodedKeySpec. The key factory\n+   translate these key specifications. \n+\n+   @since JDK 1.2\n+   @author Mark Benvenuto\n+ */\n+public class KeyFactory\n+{\n+  private KeyFactorySpi keyFacSpi;\n+  private Provider provider;\n+  private String algorithm;\n+\n+  /**\n+     Constructs a new keyFactory with the specified parameters.\n+\n+     @param keyFacSpi Key Factory SPI to use\n+     @param provider the provider of the Key Factory SPI\n+     @param algorithm the name of the key algorithm for this key factory\n+   */\n+  protected KeyFactory(KeyFactorySpi keyFacSpi, Provider provider,\n+\t\t       String algorithm)\n+  {\n+    this.keyFacSpi = keyFacSpi;\n+    this.provider = provider;\n+    this.algorithm = algorithm;\n+  }\n+\n+  /** \n+     Gets an instance of the KeyFactory class representing\n+     the specified key factory. If the algorithm is not \n+     found then, it throws NoSuchAlgorithmException.\n+\n+     @param algorithm the name of algorithm to choose\n+     @return a KeyFactory repesenting the desired algorithm\n+\n+     @throws NoSuchAlgorithmException if the algorithm is not implemented by providers\n+   */\n+  public static KeyFactory getInstance(String algorithm)\n+    throws NoSuchAlgorithmException\n+  {\n+    Provider[] p = Security.getProviders();\n+\n+    for (int i = 0; i < p.length; i++)\n+      {\n+\tString classname = p[i].getProperty(\"KeyFactory.\" + algorithm);\n+\tif (classname != null)\n+\t  return getInstance(classname, algorithm, p[i]);\n+      }\n+\n+    throw new NoSuchAlgorithmException(algorithm);\n+  }\n+\n+  /** \n+     Gets an instance of the KeyFactory class representing\n+     the specified key factory from the specified provider. \n+     If the algorithm is not found then, it throws \n+     NoSuchAlgorithmException. If the provider is not found, then \n+     it throws NoSuchProviderException.\n+\n+     @param algorithm the name of algorithm to choose\n+     @param provider the name of the provider to find the algorithm in\n+     @return a KeyFactory repesenting the desired algorithm\n+\n+     @throws NoSuchAlgorithmException if the algorithm is not implemented by the provider\n+     @throws NoSuchProviderException if the provider is not found\n+   */\n+  public static KeyFactory getInstance(String algorithm, String provider)\n+    throws NoSuchAlgorithmException, NoSuchProviderException\n+  {\n+    Provider p = Security.getProvider(provider);\n+    if (p == null)\n+      throw new NoSuchProviderException();\n+\n+    return getInstance(p.getProperty(\"KeyFactory.\" + algorithm),\n+\t\t       algorithm, p);\n+  }\n+\n+  private static KeyFactory getInstance(String classname,\n+\t\t\t\t\tString algorithm,\n+\t\t\t\t\tProvider provider)\n+    throws NoSuchAlgorithmException\n+  {\n+\n+    try\n+      {\n+\treturn new KeyFactory((KeyFactorySpi) Class.forName(classname).\n+\t\t\t      newInstance(), provider, algorithm);\n+      }\n+    catch (ClassNotFoundException cnfe)\n+      {\n+\tthrow new NoSuchAlgorithmException(\"Class not found\");\n+      }\n+    catch (InstantiationException ie)\n+      {\n+\tthrow new NoSuchAlgorithmException(\"Class instantiation failed\");\n+      }\n+    catch (IllegalAccessException iae)\n+      {\n+\tthrow new NoSuchAlgorithmException(\"Illegal Access\");\n+      }\n+  }\n+\n+  /**\n+     Gets the provider that the class is from.\n+\n+     @return the provider of this class\n+   */\n+  public final Provider getProvider()\n+  {\n+    return provider;\n+  }\n+\n+  /**\n+     Returns the name of the algorithm used\n+\n+     @return A string with the name of the algorithm\n+   */\n+  public final String getAlgorithm()\n+  {\n+    return algorithm;\n+  }\n+\n+  /**\n+     Generates a public key from the provided key specification.\n+\n+     @param keySpec key specification\n+\n+     @return the public key\n+\n+     @throws InvalidKeySpecException invalid key specification for\n+     this key factory to produce a public key\n+   */\n+  public final PublicKey generatePublic(KeySpec keySpec) throws\n+    InvalidKeySpecException\n+  {\n+    return keyFacSpi.engineGeneratePublic(keySpec);\n+  }\n+\n+  /**\n+     Generates a private key from the provided key specification.\n+\n+     @param keySpec key specification\n+\n+     @return the private key\n+\n+     @throws InvalidKeySpecException invalid key specification for\n+     this key factory to produce a private key\n+   */\n+  public final PrivateKey generatePrivate(KeySpec keySpec) throws\n+    InvalidKeySpecException\n+  {\n+    return keyFacSpi.engineGeneratePrivate(keySpec);\n+  }\n+\n+  /**\n+     Returns a key specification for the given key. keySpec \n+     identifies the specification class to return the key \n+     material in.\n+\n+     @param key the key\n+     @param keySpec the specification class to return the \n+     key material in.\n+\n+     @return the key specification in an instance of the requested\n+     specification class\n+\n+     @throws InvalidKeySpecException the requested key specification\n+     is inappropriate for this key or the key is \n+     unrecognized.\n+   */\n+  public final KeySpec getKeySpec(Key key, Class keySpec)\n+    throws InvalidKeySpecException\n+  {\n+    return keyFacSpi.engineGetKeySpec(key, keySpec);\n+  }\n+\n+  /**\n+     Translates the key from an unknown or untrusted provider\n+     into a key for this key factory.\n+\n+     @param the key from an unknown or untrusted provider\n+\n+     @return the translated key\n+\n+     @throws InvalidKeySpecException if the key cannot be \n+     processed by this key factory\n+   */\n+  public final Key translateKey(Key key) throws InvalidKeyException\n+  {\n+    return keyFacSpi.engineTranslateKey(key);\n+  }\n+}"}, {"sha": "e53e1c0ba68fbb6ec8c1bb1e24f4464d07e1fd33", "filename": "libjava/java/security/KeyFactorySpi.java", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FKeyFactorySpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FKeyFactorySpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKeyFactorySpi.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,120 @@\n+/* KeyFactorySpi.java --- Key Factory Service Provider Interface\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+import java.security.spec.KeySpec;\n+import java.security.spec.InvalidKeySpecException;\n+\n+/**\n+   KeyFactorySpi is the Service Provider Interface (SPI) for the \n+   KeyFactory class. This is the interface for providers to \n+   supply to implement a key factory for an algorithm.\n+\n+   Key factories are used to convert keys (opaque cryptographic \n+   keys of type Key) into key specifications (transparent \n+   representations of the underlying key material).\n+\n+   Key factories are bi-directional. They allow a key class \n+   to be converted into a key specification (key material) and\n+   back again.\n+\n+   For example DSA public keys can be specified as \n+   DSAPublicKeySpec or X509EncodedKeySpec. The key factory\n+   translate these key specifications. \n+\n+   @since JDK 1.2\n+   @author Mark Benvenuto\n+ */\n+public abstract class KeyFactorySpi\n+{\n+  /**\n+     Constucts a new KeyFactorySpi.\n+   */\n+  public KeyFactorySpi()\n+  {\n+  }\n+\n+  /**\n+     Generates a public key from the provided key specification.\n+\n+     @param keySpec key specification\n+\n+     @return the public key\n+\n+     @throws InvalidKeySpecException invalid key specification for\n+     this key factory to produce a public key\n+   */\n+  protected abstract PublicKey engineGeneratePublic(KeySpec keySpec)\n+    throws InvalidKeySpecException;\n+\n+\n+  /**\n+     Generates a private key from the provided key specification.\n+\n+     @param keySpec key specification\n+\n+     @return the private key\n+\n+     @throws InvalidKeySpecException invalid key specification for\n+     this key factory to produce a private key\n+   */\n+  protected abstract PrivateKey engineGeneratePrivate(KeySpec keySpec)\n+    throws InvalidKeySpecException;\n+\n+  /**\n+     Returns a key specification for the given key. keySpec \n+     identifies the specification class to return the key \n+     material in.\n+\n+     @param key the key\n+     @param keySpec the specification class to return the \n+     key material in.\n+\n+     @return the key specification in an instance of the requested\n+     specification class\n+\n+     @throws InvalidKeySpecException the requested key specification\n+     is inappropriate for this key or the key is \n+     unrecognized.\n+   */\n+  protected abstract KeySpec engineGetKeySpec(Key key, Class keySpec)\n+    throws InvalidKeySpecException;\n+\n+\n+  /**\n+     Translates the key from an unknown or untrusted provider\n+     into a key for this key factory.\n+\n+     @param the key from an unknown or untrusted provider\n+\n+     @return the translated key\n+\n+     @throws InvalidKeySpecException if the key cannot be \n+     processed by this key factory\n+   */\n+  protected abstract Key engineTranslateKey(Key key)\n+    throws InvalidKeyException;\n+}"}, {"sha": "7738c8f23a33c2ae5accbbc42493da5f8258dba9", "filename": "libjava/java/security/KeyManagementException.java", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FKeyManagementException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FKeyManagementException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKeyManagementException.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,58 @@\n+/* KeyManagementException.java -- What it says\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+/**\n+   * This exception is thrown whenever a problem related to the management of\n+   * security keys is encountered.\n+   *\n+   * @version 0.0\n+   *\n+   * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public class KeyManagementException extends KeyException\n+{\n+  /**\n+   * This method initializes a new instance of <code>KeyManagementException</code>\n+   * with no descriptive error message.\n+   */\n+  public KeyManagementException()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * This method initializes a new instance of <code>KeyManagementException</code>\n+   * with a descriptive error message.\n+   *\n+   * @param msg The descriptive error message\n+   */\n+  public KeyManagementException(String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "f5c474a94969fdb00c8f34b89cdeae691185e55a", "filename": "libjava/java/security/KeyPair.java", "status": "modified", "additions": 53, "deletions": 20, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FKeyPair.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FKeyPair.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKeyPair.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,41 +1,74 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* KeyPair.java --- Key Pair Class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n- \n package java.security;\n+import java.io.Serializable;\n \n /**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date February 9, 2000.\n- */\n+   KeyPair serves as a simple container for public and private keys.\n+   If properly initialized, this class should be treated like the\n+   private key since it contains it and take approriate security\n+   measures.\n \n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n+   @author Mark Benvenuto\n  */\n- \n-public class KeyPair implements java.io.Serializable\n+public final class KeyPair implements Serializable\n {\n-  public KeyPair (PublicKey publicKey, PrivateKey privateKey)\n+  private PublicKey publicKey;\n+  private PrivateKey privateKey;\n+\n+  /**\n+     Initializes the KeyPair with a pubilc and private key.\n+\n+     @param publicKey Public Key to store\n+     @param privateKey Private Key to store\n+   */\n+  public KeyPair(PublicKey publicKey, PrivateKey privateKey)\n   {\n     this.publicKey = publicKey;\n     this.privateKey = privateKey;\n   }\n \n-  public PublicKey getPublic ()\n+  /**\n+     Returns the public key stored in the KeyPair\n+\n+     @return The public key\n+   */\n+  public PublicKey getPublic()\n   {\n     return publicKey;\n   }\n \n-  public PrivateKey getPrivate ()\n+  /**\n+     Returns the private key stored in the KeyPair\n+\n+     @return The private key\n+   */\n+  public PrivateKey getPrivate()\n   {\n     return privateKey;\n   }\n-\n-  // The keys.\n-  private PublicKey publicKey;\n-  private PrivateKey privateKey;\n }"}, {"sha": "aff73103575644c5f7c97816a075bb5d94e8a8fe", "filename": "libjava/java/security/KeyPairGenerator.java", "status": "modified", "additions": 217, "deletions": 47, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FKeyPairGenerator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FKeyPairGenerator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKeyPairGenerator.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,86 +1,256 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* KeyPairGenerator.java --- Key Pair Generator Class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n package java.security;\n+import java.security.spec.AlgorithmParameterSpec;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 10, 2000.\n- */\n+   KeyPairGenerator is the class used to generate key pairs\n+   for a security algorithm.\n \n-/**\n- * Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Partially implemented to the 1.1 spec.\n- * It is known not to comply with the 1.2 spec.\n- */\n+   The KeyPairGenerator is created with the getInstance()\n+   methods. The class is used to generate public and private\n+   keys for an algorithm and associate it with \n+   algorithm parameters.\n \n+   @author Mark Benvenuto\n+ */\n public abstract class KeyPairGenerator extends KeyPairGeneratorSpi\n {\n+  private Provider provider;\n+  private String algorithm;\n+\n+  /**\n+     Constructs a new KeyPairGenerator\n+\n+     @param algorithm the algorithm to use\n+   */\n   protected KeyPairGenerator(String algorithm)\n   {\n-    name = algorithm;\n+    this.algorithm = algorithm;\n+    this.provider = null;\n   }\n \n-  public static KeyPairGenerator getInstance(String algorithm)\n-    throws NoSuchAlgorithmException\n+  /**\n+     Returns the name of the algorithm used\n+\n+     @return A string with the name of the algorithm\n+   */\n+  public String getAlgorithm()\n   {\n+    return algorithm;\n+  }\n+\n+  /** \n+     Gets an instance of the KeyPairGenerator class \n+     which generates key pairs for the specified algorithm. \n+     If the algorithm is not found then, it throws NoSuchAlgorithmException.\n+\n+     @param algorithm the name of algorithm to choose\n+     @return a AlgorithmParameterGenerator repesenting the desired algorithm\n+\n+     @throws NoSuchAlgorithmException if the algorithm is not implemented by providers\n+   */\n+  public static KeyPairGenerator getInstance(String algorithm) throws\n+    NoSuchAlgorithmException\n+  {\n+    Provider[] p = Security.getProviders();\n+\n     String name = \"KeyPairGenerator.\" + algorithm;\n-    Provider[] provs = Security.getProviders();\n-    for (int i = 0; i < provs.length; ++i)\n+    for (int i = 0; i < p.length; i++)\n       {\n-\tString val = provs[i].getProperty(name);\n-\tif (val != null)\n-\t  {\n-\t    try\n-\t      {\n-\t\treturn (KeyPairGenerator) Class.forName(val).newInstance();\n-\t      }\n-\t    catch (Throwable _)\n-\t      {\n-\t\t// We just ignore failures.\n-\t      }\n-\t  }\n+\tString classname = p[i].getProperty(name);\n+\tif (classname != null)\n+\t  return getInstance(classname, algorithm, p[i]);\n       }\n \n     throw new NoSuchAlgorithmException(algorithm);\n   }\n \n+  /** \n+     Gets an instance of the KeyPairGenerator class \n+     which generates key pairs for the specified algorithm. \n+     If the algorithm is not found then, it throws NoSuchAlgorithmException.\n+\n+     @param algorithm the name of algorithm to choose\n+     @param provider the name of the provider to find the algorithm in\n+     @return a AlgorithmParameterGenerator repesenting the desired algorithm\n+\n+     @throws NoSuchAlgorithmException if the algorithm is not implemented by the provider\n+     @throws NoSuchProviderException if the provider is not found\n+   */\n   public static KeyPairGenerator getInstance(String algorithm, String provider)\n     throws NoSuchAlgorithmException, NoSuchProviderException\n   {\n-    String name = \"KeyPairGenerator.\" + algorithm;\n     Provider p = Security.getProvider(provider);\n     if (p == null)\n-      throw new NoSuchProviderException(provider);\n-    String val = p.getProperty(name);\n-    if (val != null)\n+      throw new NoSuchProviderException();\n+\n+    return getInstance(p.getProperty(\"KeyPairGenerator.\" + algorithm),\n+\t\t       algorithm, p);\n+  }\n+\n+  private static KeyPairGenerator getInstance(String classname,\n+\t\t\t\t\t      String algorithm,\n+\t\t\t\t\t      Provider provider)\n+    throws NoSuchAlgorithmException\n+  {\n+    try\n       {\n-\ttry\n-\t  {\n-\t    return (KeyPairGenerator) Class.forName(val).newInstance();\n-\t  }\n-\tcatch (Throwable _)\n+\tObject o = Class.forName(classname).newInstance();\n+\tKeyPairGenerator kpg;\n+\tif (o instanceof KeyPairGeneratorSpi)\n+\t  kpg =\n+\t    (KeyPairGenerator) (new\n+\t\t\t\tDummyKeyPairGenerator((KeyPairGeneratorSpi) o,\n+\t\t\t\t\t\t      algorithm));\n+\telse\n \t  {\n-\t    // Nothing.\n+\t    kpg = (KeyPairGenerator) o;\n+\t    kpg.algorithm = algorithm;\n \t  }\n+\n+\tkpg.provider = provider;\n+\treturn kpg;\n+      }\n+    catch (ClassNotFoundException cnfe)\n+      {\n+\tthrow new NoSuchAlgorithmException(\"Class not found\");\n+      }\n+    catch (InstantiationException ie)\n+      {\n+\tthrow new NoSuchAlgorithmException(\"Class instantiation failed\");\n       }\n+    catch (IllegalAccessException iae)\n+      {\n+\tthrow new NoSuchAlgorithmException(\"Illegal Access\");\n+      }\n+  }\n \n-    throw new NoSuchAlgorithmException(algorithm);\n+  /**\n+     Gets the provider that the class is from.\n+\n+     @return the provider of this class\n+   */\n+  public final Provider getProvider()\n+  {\n+    return provider;\n   }\n \n-  public String getAlgorithm()\n+  /**\n+     Initializes the KeyPairGenerator for the specified key size.\n+     (Since no source of randomness is specified, a default one is\n+     provided.)\n+\n+     @param keysize Size of key to generate\n+   */\n+  public void initialize(int keysize)\n+  {\n+    initialize(keysize, new SecureRandom());\n+  }\n+\n+  /**\n+     Initializes the KeyPairGenerator for the specified key size\n+     and specified SecureRandom.\n+\n+     @param keysize Size of key to generate\n+     @param random SecureRandom to use\n+\n+     @since JDK 1.2\n+   */\n+  public void initialize(int keysize, SecureRandom random)\n+  {\n+    initialize(keysize, random);\n+  }\n+\n+  /**\n+     Initializes the KeyPairGenerator with the specified\n+     AlgorithmParameterSpec class.\n+     (Since no source of randomness is specified, a default one is\n+     provided.)\n+\n+     @param params AlgorithmParameterSpec to initialize with\n+\n+     @since JDK 1.2\n+   */\n+  public void initialize(AlgorithmParameterSpec params)\n+    throws InvalidAlgorithmParameterException\n   {\n-    return name;\n+    initialize(params, new SecureRandom());\n   }\n \n-  public abstract void initialize(int strength, SecureRandom random);\n-  public abstract KeyPair generateKeyPair();\n+  /**\n+     Initializes the KeyPairGenerator with the specified\n+     AlgorithmParameterSpec class and specified SecureRandom.\n \n-  // Algorithm name.\n-  private String name;\n+     @param params AlgorithmParameterSpec to initialize with\n+     @param random SecureRandom to use\n+\n+     @since JDK 1.2\n+   */\n+  public void initialize(AlgorithmParameterSpec params, SecureRandom random)\n+    throws InvalidAlgorithmParameterException\n+  {\n+    super.initialize(params, random);\n+  }\n+\n+  /**\n+     Generates a KeyPair according the rules for the algorithm.\n+     Unless intialized, algorithm defaults will be used. It \n+     creates a unique key pair each time.\n+\n+     Same as generateKeyPair();\n+\n+     @return a key pair\n+   */\n+  public final KeyPair genKeyPair()\n+  {\n+    try\n+      {\n+\treturn getInstance(\"DSA\", \"GNU\").generateKeyPair();\n+      }\n+    catch (Exception e)\n+      {\n+\tSystem.err.println(\"genKeyPair failed: \" + e);\n+\te.printStackTrace();\n+\treturn null;\n+      }\n+  }\n+\n+  /**\n+     Generates a KeyPair according the rules for the algorithm.\n+     Unless intialized, algorithm defaults will be used. It \n+     creates a unique key pair each time.\n+\n+     Same as genKeyPair();\n+\n+     @return a key pair\n+   */\n+  public KeyPair generateKeyPair()\n+  {\n+    return genKeyPair();\n+  }\n }"}, {"sha": "39e652717d2ef0c6cccb99b559e552dac47ff129", "filename": "libjava/java/security/KeyPairGeneratorSpi.java", "status": "modified", "additions": 69, "deletions": 13, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FKeyPairGeneratorSpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FKeyPairGeneratorSpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKeyPairGeneratorSpi.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,26 +1,82 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* KeyPairGeneratorSpi.java --- Key Pair Generator SPI Class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n package java.security;\n+import java.security.spec.AlgorithmParameterSpec;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 7, 2000.\n- */\n+   KeyPairGeneratorSpi is the interface used to generate key pairs\n+   for security algorithms.\n \n-/**\n- * Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Partially implemented.\n+   @author Mark Benvenuto\n  */\n-\n-// JDK1.2\n public abstract class KeyPairGeneratorSpi\n {\n+  /**\n+     Constructs a new KeyPairGeneratorSpi\n+   */\n+  public KeyPairGeneratorSpi()\n+  {\n+  }\n+\n+  /**\n+     Initialize the KeyPairGeneratorSpi with the specified\n+     key size and source of randomness\n+\n+     @param keysize size of the key to generate\n+     @param random A SecureRandom source of randomness  \n+   */\n   public abstract void initialize(int keysize, SecureRandom random);\n+\n+  /**\n+     Initialize the KeyPairGeneratorSpi with the specified\n+     AlgorithmParameterSpec and source of randomness\n+\n+     This is a concrete method. It may be overridden by the provider\n+     and if the AlgorithmParameterSpec class is invalid\n+     throw InvalidAlgorithmParameterException. By default this\n+     method just throws UnsupportedOperationException.\n+\n+     @param params A AlgorithmParameterSpec to intialize with\n+     @param random A SecureRandom source of randomness  \n+\n+     @throws InvalidAlgorithmParameterException\n+   */\n+  public void initialize(AlgorithmParameterSpec params, SecureRandom random)\n+    throws InvalidAlgorithmParameterException\n+  {\n+    throw new java.lang.UnsupportedOperationException();\n+  }\n+\n+  /**\n+     Generates a KeyPair according the rules for the algorithm.\n+     Unless intialized, algorithm defaults will be used. It \n+     creates a unique key pair each time.\n+\n+     @return a key pair\n+   */\n   public abstract KeyPair generateKeyPair();\n }"}, {"sha": "bd9b025951577354f60bbd962510449ed3b94bc7", "filename": "libjava/java/security/KeyStore.java", "status": "added", "additions": 447, "deletions": 0, "changes": 447, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FKeyStore.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FKeyStore.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKeyStore.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,447 @@\n+/* KeyStore.java --- Key Store Class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.security.cert.CertificateException;\n+import java.util.Date;\n+import java.util.Enumeration;\n+\n+/**\n+   Keystore represents an in-memory collection of keys and \n+   certificates. There are two types of entries:\n+\n+   * Key Entry\n+\n+   This type of keystore entry store sensitive crytographic key\n+   information in a protected format.Typically this is a secret \n+   key or a private key with a certificate chain.\n+\n+\n+   * Trusted Ceritificate Entry\n+\n+   This type of keystore entry contains a single public key \n+   certificate belonging to annother entity. It is called trusted\n+   because the keystore owner trusts that the certificates\n+   belongs to the subject (owner) of the certificate.\n+\n+   The keystore contains an \"alias\" string for each entry. \n+\n+   The structure and persistentence of the key store is not \n+   specified. Any method could be used to protect sensitive \n+   (private or secret) keys. Smart cards or integrated \n+   cryptographic engines could be used or the keystore could \n+   be simply stored in a file. \n+ */\n+public class KeyStore\n+{\n+  private KeyStoreSpi keyStoreSpi;\n+  private Provider provider;\n+  private String type;\n+\n+  /**\n+     Creates an instance of KeyStore\n+\n+     @param keyStoreSpi A KeyStore engine to use\n+     @param provider A provider to use\n+     @param type The type of KeyStore\n+   */\n+  protected KeyStore(KeyStoreSpi keyStoreSpi, Provider provider, String type)\n+  {\n+    this.keyStoreSpi = keyStoreSpi;\n+    this.provider = provider;\n+    this.type = type;\n+  }\n+\n+  /** \n+     Gets an instance of the KeyStore class representing\n+     the specified keystore. If the type is not \n+     found then, it throws CertificateException.\n+\n+     @param type the type of certificate to choose\n+\n+     @return a KeyStore repesenting the desired type\n+\n+     @throws KeyStoreException if the type of keystore is not implemented by providers\n+   */\n+  public static KeyStore getInstance(String type) throws KeyStoreException\n+  {\n+    Provider[] p = Security.getProviders();\n+\n+    for (int i = 0; i < p.length; i++)\n+      {\n+\tString classname = p[i].getProperty(\"KeyStore.\" + type);\n+\tif (classname != null)\n+\t  return getInstance(classname, type, p[i]);\n+      }\n+\n+    throw new KeyStoreException(type);\n+  }\n+\n+  /** \n+     Gets an instance of the KeyStore class representing\n+     the specified key store from the specified provider. \n+     If the type is not found then, it throws CertificateException. \n+     If the provider is not found, then it throws \n+     NoSuchProviderException.\n+\n+     @param type the type of certificate to choose\n+\n+     @return a KeyStore repesenting the desired type\n+\n+     @throws KeyStoreException if the type of keystore is not implemented by providers\n+     @throws NoSuchProviderException if the provider is not found\n+   */\n+  public static KeyStore getInstance(String type, String provider)\n+    throws KeyStoreException, NoSuchProviderException\n+  {\n+    Provider p = Security.getProvider(provider);\n+    if (p == null)\n+      throw new NoSuchProviderException();\n+\n+    return getInstance(p.getProperty(\"KeyStore.\" + type), type, p);\n+  }\n+\n+  private static KeyStore getInstance(String classname,\n+\t\t\t\t      String type,\n+\t\t\t\t      Provider provider)\n+    throws KeyStoreException\n+  {\n+    try\n+      {\n+\treturn new KeyStore((KeyStoreSpi) Class.forName(classname).\n+\t\t\t    newInstance(), provider, type);\n+      }\n+    catch (ClassNotFoundException cnfe)\n+      {\n+\tthrow new KeyStoreException(\"Class not found\");\n+      }\n+    catch (InstantiationException ie)\n+      {\n+\tthrow new KeyStoreException(\"Class instantiation failed\");\n+      }\n+    catch (IllegalAccessException iae)\n+      {\n+\tthrow new KeyStoreException(\"Illegal Access\");\n+      }\n+  }\n+\n+\n+  /**\n+     Gets the provider that the class is from.\n+\n+     @return the provider of this class\n+   */\n+  public final Provider getProvider()\n+  {\n+    return provider;\n+  }\n+\n+  /**\n+     Returns the type of the KeyStore supported\n+\n+     @return A string with the type of KeyStore\n+   */\n+  public final String getType()\n+  {\n+    return type;\n+  }\n+\n+  /**\n+     Returns the key associated with given alias using the \n+     supplied password.\n+\n+     @param alias an alias for the key to get\n+     @param password password to access key with\n+\n+     @return the requested key, or null otherwise\n+\n+     @throws NoSuchAlgorithmException if there is no algorithm\n+     for recovering the key\n+     @throws UnrecoverableKeyException key cannot be reocovered\n+     (wrong password).\n+   */\n+  public final Key getKey(String alias, char[]password)\n+    throws KeyStoreException, NoSuchAlgorithmException,\n+    UnrecoverableKeyException\n+  {\n+    return keyStoreSpi.engineGetKey(alias, password);\n+  }\n+\n+  /**\n+     Gets a Certificate chain for the specified alias.\n+\n+     @param alias the alias name\n+\n+     @return a chain of Certificates ( ordered from the user's \n+     certificate to the Certificate Authority's ) or \n+     null if the alias does not exist or there is no\n+     certificate chain for the alias ( the alias refers\n+     to a trusted certificate entry or there is no entry).\n+   */\n+  public final java.security.cert.\n+    Certificate[] getCertificateChain(String alias) throws KeyStoreException\n+  {\n+    return keyStoreSpi.engineGetCertificateChain(alias);\n+  }\n+\n+  /**\n+     Gets a Certificate for the specified alias.\n+\n+     If there is a trusted certificate entry then that is returned.\n+     it there is a key entry with a certificate chain then the\n+     first certificate is return or else null.\n+\n+     @param alias the alias name\n+\n+     @return a Certificate or null if the alias does not exist \n+     or there is no certificate for the alias\n+   */\n+  public final java.security.cert.Certificate getCertificate(String alias)\n+    throws KeyStoreException\n+  {\n+    return keyStoreSpi.engineGetCertificate(alias);\n+  }\n+\n+  /**\n+     Gets entry creation date for the specified alias.\n+\n+     @param alias the alias name\n+\n+     @returns the entry creation date or null\n+   */\n+  public final Date getCreationDate(String alias) throws KeyStoreException\n+  {\n+    return keyStoreSpi.engineGetCreationDate(alias);\n+  }\n+\n+  /**\n+     Assign the key to the alias in the keystore, protecting it\n+     with the given password. It will overwrite an existing \n+     entry and if the key is a PrivateKey, also add the \n+     certificate chain representing the corresponding public key.\n+\n+     @param alias the alias name\n+     @param key the key to add\n+     @password the password to protect with\n+     @param chain the certificate chain for the corresponding\n+     public key\n+\n+     @throws KeyStoreException if it fails\n+   */\n+  public final void setKeyEntry(String alias, Key key, char[]password,\n+\t\t\t\tjava.security.cert.\n+\t\t\t\tCertificate[]chain) throws KeyStoreException\n+  {\n+    keyStoreSpi.engineSetKeyEntry(alias, key, password, chain);\n+  }\n+\n+  /**\n+     Assign the key to the alias in the keystore. It will overwrite\n+     an existing entry and if the key is a PrivateKey, also \n+     add the certificate chain representing the corresponding \n+     public key.\n+\n+     @param alias the alias name\n+     @param key the key to add\n+     @param chain the certificate chain for the corresponding\n+     public key\n+\n+     @throws KeyStoreException if it fails\n+   */\n+  public final void setKeyEntry(String alias, byte[]key,\n+\t\t\t\tjava.security.cert.\n+\t\t\t\tCertificate[]chain) throws KeyStoreException\n+  {\n+    keyStoreSpi.engineSetKeyEntry(alias, key, chain);\n+  }\n+\n+  /**\n+     Assign the certificate to the alias in the keystore. It \n+     will overwrite an existing entry.\n+\n+     @param alias the alias name\n+     @param cert the certificate to add\n+\n+     @throws KeyStoreException if it fails\n+   */\n+  public final void setCertificateEntry(String alias,\n+\t\t\t\t\tjava.security.cert.\n+\t\t\t\t\tCertificate cert) throws\n+    KeyStoreException\n+  {\n+    keyStoreSpi.engineSetCertificateEntry(alias, cert);\n+  }\n+\n+  /**\n+     Deletes the entry for the specified entry.\n+\n+     @param alias the alias name\n+\n+     @throws KeyStoreException if it fails\n+   */\n+  public final void deleteEntry(String alias) throws KeyStoreException\n+  {\n+    keyStoreSpi.engineDeleteEntry(alias);\n+  }\n+\n+  /**\n+     Generates a list of all the aliases in the keystore.\n+\n+     @return an Enumeration of the aliases\n+   */\n+  public final Enumeration aliases() throws KeyStoreException\n+  {\n+    return keyStoreSpi.engineAliases();\n+  }\n+\n+  /**\n+     Determines if the keystore contains the specified alias.\n+\n+     @param alias the alias name\n+\n+     @return true if it contains the alias, false otherwise\n+   */\n+  public final boolean containsAlias(String alias) throws KeyStoreException\n+  {\n+    return keyStoreSpi.engineContainsAlias(alias);\n+  }\n+\n+  /**\n+     Returns the number of entries in the keystore.\n+\n+     @returns the number of keystore entries.\n+   */\n+  public final int size() throws KeyStoreException\n+  {\n+    return keyStoreSpi.engineSize();\n+  }\n+\n+  /**\n+     Determines if the keystore contains a key entry for \n+     the specified alias.\n+\n+     @param alias the alias name\n+\n+     @return true if it is a key entry, false otherwise\n+   */\n+  public final boolean isKeyEntry(String alias) throws KeyStoreException\n+  {\n+    return keyStoreSpi.engineIsKeyEntry(alias);\n+  }\n+\n+\n+  /**\n+     Determines if the keystore contains a certificate entry for \n+     the specified alias.\n+\n+     @param alias the alias name\n+\n+     @return true if it is a certificate entry, false otherwise\n+   */\n+  public final boolean isCertificateEntry(String alias)\n+    throws KeyStoreException\n+  {\n+    return keyStoreSpi.engineIsCertificateEntry(alias);\n+  }\n+\n+  /**\n+     Determines if the keystore contains the specified certificate \n+     entry and returns the alias.\n+\n+     It checks every entry and for a key entry checks only the\n+     first certificate in the chain.\n+\n+     @param cert Certificate to look for\n+\n+     @return alias of first matching certificate, null if it \n+     does not exist.\n+   */\n+  public final String getCertificateAlias(java.security.cert.Certificate cert)\n+    throws KeyStoreException\n+  {\n+    return keyStoreSpi.engineGetCertificateAlias(cert);\n+  }\n+\n+  /**\n+     Stores the keystore in the specified output stream and it\n+     uses the specified key it keep it secure.\n+\n+     @param stream the output stream to save the keystore to\n+     @param password the password to protect the keystore integrity with\n+\n+     @throws IOException if an I/O error occurs.\n+     @throws NoSuchAlgorithmException the data integrity algorithm \n+     used cannot be found.\n+     @throws CertificateException if any certificates could not be\n+     stored in the output stream.\n+   */\n+  public final void store(OutputStream stream, char[]password)\n+    throws KeyStoreException, IOException, NoSuchAlgorithmException,\n+    CertificateException\n+  {\n+    keyStoreSpi.engineStore(stream, password);\n+  }\n+\n+  /**\n+     Loads the keystore from the specified input stream and it\n+     uses the specified password to check for integrity if supplied.\n+\n+     @param stream the input stream to load the keystore from\n+     @param password the password to check the keystore integrity with\n+\n+     @throws IOException if an I/O error occurs.\n+     @throws NoSuchAlgorithmException the data integrity algorithm \n+     used cannot be found.\n+     @throws CertificateException if any certificates could not be\n+     stored in the output stream.\n+   */\n+  public final void load(InputStream stream, char[]password)\n+    throws IOException, NoSuchAlgorithmException, CertificateException\n+  {\n+    keyStoreSpi.engineLoad(stream, password);\n+  }\n+\n+  /**\n+     Returns the default KeyStore type. This method looks up the\n+     type in <JAVA_HOME>/lib/security/java.security with the \n+     property \"keystore.type\" or if that fails then \"jks\" .\n+   */\n+  public static final String getDefaultType()\n+  {\n+    String tmp;\n+    //Security reads every property in java.security so it \n+    //will return this property if it exists. \n+    tmp = Security.getProperty(\"keystore.type\");\n+\n+    if (tmp == null)\n+      tmp = \"jks\";\n+\n+    return tmp;\n+  }\n+}"}, {"sha": "f7d3c0d23b359043246e604ec1eaeac6a923a3b6", "filename": "libjava/java/security/KeyStoreException.java", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FKeyStoreException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FKeyStoreException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKeyStoreException.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,57 @@\n+/* KeyStoreException.java -- Indicates a problem with the key store\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+/**\n+ * Indicates a problem with the key store.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public class KeyStoreException extends GeneralSecurityException\n+{\n+  /**\n+   * This method initializes a new <code>KeyStoreException</code> with no\n+   * detailed error message.\n+   */\n+  public KeyStoreException()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * This method initializes a new <code>KeyStoreException</code> with a\n+   * detailed error message.\n+   *\n+   * @param msg The descriptive error message.\n+   */\n+  public KeyStoreException(String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "73715f3a232ad5e8d83f3c4f1890e1b197de56b3", "filename": "libjava/java/security/KeyStoreSpi.java", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FKeyStoreSpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FKeyStoreSpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKeyStoreSpi.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,262 @@\n+/* KeyStoreSpi.java --- Key Store Service Provider Interface\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.security.cert.CertificateException;\n+import java.util.Date;\n+import java.util.Enumeration;\n+\n+/**\n+   KeyStoreSpi is the Service Provider Interface (SPI) for the \n+   KeyStore class. This is the interface for providers to \n+   supply to implement a keystore for a particular keystore \n+   type.\n+\n+   @since JDK 1.2\n+   @author Mark Benvenuto\n+ */\n+public abstract class KeyStoreSpi\n+{\n+  /**\n+     Constructs a new KeyStoreSpi\n+   */\n+  public KeyStoreSpi()\n+  {\n+  }\n+\n+  /**\n+     Returns the key associated with given alias using the \n+     supplied password.\n+\n+     @param alias an alias for the key to get\n+     @param password password to access key with\n+\n+     @return the requested key, or null otherwise\n+\n+     @throws NoSuchAlgorithmException if there is no algorithm\n+     for recovering the key\n+     @throws UnrecoverableKeyException key cannot be reocovered\n+     (wrong password).\n+   */\n+  public abstract Key engineGetKey(String alias, char[]password)\n+    throws NoSuchAlgorithmException, UnrecoverableKeyException;\n+\n+  /**\n+     Gets a Certificate chain for the specified alias.\n+\n+     @param alias the alias name\n+\n+     @return a chain of Certificates ( ordered from the user's \n+     certificate to the Certificate Authority's ) or \n+     null if the alias does not exist or there is no\n+     certificate chain for the alias ( the alias refers\n+     to a trusted certificate entry or there is no entry).\n+   */\n+  public abstract java.security.cert.\n+    Certificate[] engineGetCertificateChain(String alias);\n+\n+\n+  /**\n+     Gets a Certificate for the specified alias.\n+\n+     If there is a trusted certificate entry then that is returned.\n+     it there is a key entry with a certificate chain then the\n+     first certificate is return or else null.\n+\n+     @param alias the alias name\n+\n+     @return a Certificate or null if the alias does not exist \n+     or there is no certificate for the alias\n+   */\n+  public abstract java.security.cert.\n+    Certificate engineGetCertificate(String alias);\n+\n+  /**\n+     Gets entry creation date for the specified alias.\n+\n+     @param alias the alias name\n+\n+     @returns the entry creation date or null\n+   */\n+  public abstract Date engineGetCreationDate(String alias);\n+\n+  /**\n+     Assign the key to the alias in the keystore, protecting it\n+     with the given password. It will overwrite an existing \n+     entry and if the key is a PrivateKey, also add the \n+     certificate chain representing the corresponding public key.\n+\n+     @param alias the alias name\n+     @param key the key to add\n+     @password the password to protect with\n+     @param chain the certificate chain for the corresponding\n+     public key\n+\n+     @throws KeyStoreException if it fails\n+   */\n+  public abstract void engineSetKeyEntry(String alias, Key key,\n+\t\t\t\t\t char[]password,\n+\t\t\t\t\t java.security.cert.\n+\t\t\t\t\t Certificate[]chain) throws\n+    KeyStoreException;\n+\n+  /**\n+     Assign the key to the alias in the keystore. It will overwrite\n+     an existing entry and if the key is a PrivateKey, also \n+     add the certificate chain representing the corresponding \n+     public key.\n+\n+     @param alias the alias name\n+     @param key the key to add\n+     @param chain the certificate chain for the corresponding\n+     public key\n+\n+     @throws KeyStoreException if it fails\n+   */\n+  public abstract void engineSetKeyEntry(String alias, byte[]key,\n+\t\t\t\t\t java.security.cert.\n+\t\t\t\t\t Certificate[]chain) throws\n+    KeyStoreException;\n+\n+\n+  /**\n+     Assign the certificate to the alias in the keystore. It \n+     will overwrite an existing entry.\n+\n+     @param alias the alias name\n+     @param cert the certificate to add\n+\n+     @throws KeyStoreException if it fails\n+   */\n+  public abstract void engineSetCertificateEntry(String alias,\n+\t\t\t\t\t\t java.security.cert.\n+\t\t\t\t\t\t Certificate cert) throws\n+    KeyStoreException;\n+\n+  /**\n+     Deletes the entry for the specified entry.\n+\n+     @param alias the alias name\n+\n+     @throws KeyStoreException if it fails\n+   */\n+  public abstract void engineDeleteEntry(String alias)\n+    throws KeyStoreException;\n+\n+  /**\n+     Generates a list of all the aliases in the keystore.\n+\n+     @return an Enumeration of the aliases\n+   */\n+  public abstract Enumeration engineAliases();\n+\n+  /**\n+     Determines if the keystore contains the specified alias.\n+\n+     @param alias the alias name\n+\n+     @return true if it contains the alias, false otherwise\n+   */\n+  public abstract boolean engineContainsAlias(String alias);\n+\n+  /**\n+     Returns the number of entries in the keystore.\n+\n+     @returns the number of keystore entries.\n+   */\n+  public abstract int engineSize();\n+\n+  /**\n+     Determines if the keystore contains a key entry for \n+     the specified alias.\n+\n+     @param alias the alias name\n+\n+     @return true if it is a key entry, false otherwise\n+   */\n+  public abstract boolean engineIsKeyEntry(String alias);\n+\n+  /**\n+     Determines if the keystore contains a certificate entry for \n+     the specified alias.\n+\n+     @param alias the alias name\n+\n+     @return true if it is a certificate entry, false otherwise\n+   */\n+  public abstract boolean engineIsCertificateEntry(String alias);\n+\n+  /**\n+     Determines if the keystore contains the specified certificate \n+     entry and returns the alias.\n+\n+     It checks every entry and for a key entry checks only the\n+     first certificate in the chain.\n+\n+     @param cert Certificate to look for\n+\n+     @return alias of first matching certificate, null if it \n+     does not exist.\n+   */\n+  public abstract String engineGetCertificateAlias(java.security.cert.\n+\t\t\t\t\t\t   Certificate cert);\n+\n+  /**\n+     Stores the keystore in the specified output stream and it\n+     uses the specified key it keep it secure.\n+\n+     @param stream the output stream to save the keystore to\n+     @param password the password to protect the keystore integrity with\n+\n+     @throws IOException if an I/O error occurs.\n+     @throws NoSuchAlgorithmException the data integrity algorithm \n+     used cannot be found.\n+     @throws CertificateException if any certificates could not be\n+     stored in the output stream.\n+   */\n+  public abstract void engineStore(OutputStream stream, char[]password)\n+    throws IOException, NoSuchAlgorithmException, CertificateException;\n+\n+\n+  /**\n+     Loads the keystore from the specified input stream and it\n+     uses the specified password to check for integrity if supplied.\n+\n+     @param stream the input stream to load the keystore from\n+     @param password the password to check the keystore integrity with\n+\n+     @throws IOException if an I/O error occurs.\n+     @throws NoSuchAlgorithmException the data integrity algorithm \n+     used cannot be found.\n+     @throws CertificateException if any certificates could not be\n+     stored in the output stream.\n+   */\n+  public abstract void engineLoad(InputStream stream, char[]password)\n+    throws IOException, NoSuchAlgorithmException, CertificateException;\n+}"}, {"sha": "d8f6b0657472a133747d32a7b7fd57da7cff75bf", "filename": "libjava/java/security/MessageDigest.java", "status": "modified", "additions": 250, "deletions": 78, "changes": 328, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FMessageDigest.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FMessageDigest.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FMessageDigest.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,144 +1,316 @@\n-// MessageDigest.java\n+/* MessageDigest.java --- The message digest interface.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-/* Copyright (C) 2000  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-package java.security;\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date February 11, 2000.\n- */\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * Written using on-line Java Platform 1.1 API Specification.\n- * Status:  Believed complete and correct to 1.1 spec.\n- * It is known not to comply with the 1.2 spec.\n- */\n+package java.security;\n \n-public abstract class MessageDigest\n+public abstract class MessageDigest extends MessageDigestSpi\n {\n-  protected MessageDigest (String algorithm)\n+  private String algorithm;\n+  private Provider provider;\n+  private byte[] lastDigest;\n+\n+  /**\n+     Creates a MessageDigest representing the specified\n+     algorithm.\n+\n+     @param algorithm the name of digest algorithm to choose\n+   */\n+  protected MessageDigest(String algorithm)\n   {\n-    name = algorithm;\n+    this.algorithm = algorithm;\n+    provider = null;\n   }\n \n-  public static MessageDigest getInstance (String algorithm)\n+  /** \n+     Gets an instance of the MessageDigest class representing\n+     the specified digest. If the algorithm is not found then, \n+     it throws NoSuchAlgorithmException.\n+\n+     @param algorithm the name of digest algorithm to choose\n+     @return a MessageDigest representing the desired algorithm\n+\n+     @exception NoSuchAlgorithmException if the algorithm is not implemented by providers\n+   */\n+  public static MessageDigest getInstance(String algorithm)\n     throws NoSuchAlgorithmException\n   {\n+    Provider[] p = Security.getProviders();\n     String name = \"MessageDigest.\" + algorithm;\n-    Provider[] provs = Security.getProviders ();\n-    for (int i = 0; i < provs.length; ++i)\n+\n+    for (int i = 0; i < p.length; i++)\n       {\n-\tString val = provs[i].getProperty (name);\n-\tif (val != null)\n-\t  {\n-\t    try\n-\t      {\n-\t\treturn (MessageDigest) Class.forName(val).newInstance ();\n-\t      }\n-\t    catch (Throwable _)\n-\t      {\n-\t\t// We just ignore failures.\n-\t      }\n-\t  }\n+\tString classname = p[i].getProperty(name);\n+\tif (classname != null)\n+\t  return getInstance(classname, algorithm, p[i]);\n       }\n \n-    throw new NoSuchAlgorithmException (algorithm);\n+    throw new NoSuchAlgorithmException(algorithm);\n   }\n \n-  public static MessageDigest getInstance (String algorithm, String provider)\n+  /** \n+     Gets an instance of the MessageDigest class representing\n+     the specified digest from the specified provider. If the \n+     algorithm is not found then, it throws NoSuchAlgorithmException.\n+     If the provider is not found, then it throws\n+     NoSuchProviderException.\n+\n+     @param algorithm the name of digest algorithm to choose\n+     @param provider the name of the provider to find the algorithm in\n+     @return a MessageDigest representing the desired algorithm\n+\n+     @exception NoSuchAlgorithmException if the algorithm is not implemented by the provider\n+     @exception NoSuchProviderException if the provider is not found\n+   */\n+\n+  public static MessageDigest getInstance(String algorithm, String provider)\n     throws NoSuchAlgorithmException, NoSuchProviderException\n   {\n-    String name = \"MessageDigest.\" + algorithm;\n-    Provider p = Security.getProvider (provider);\n+    Provider p = Security.getProvider(provider);\n+\n     if (p == null)\n-      throw new NoSuchProviderException (provider);\n-    String val = p.getProperty (name);\n-    if (val != null)\n+      throw new NoSuchProviderException(provider);\n+\n+    return getInstance(p.getProperty(\"MessageDigest.\" + algorithm),\n+\t\t       algorithm, p);\n+  }\n+\n+  private static MessageDigest getInstance(String classname,\n+\t\t\t\t\t   String algorithm,\n+\t\t\t\t\t   Provider provider)\n+    throws NoSuchAlgorithmException\n+  {\n+    if (classname == null)\n+      throw new NoSuchAlgorithmException(algorithm);\n+\n+    try\n+      {\n+\tMessageDigest m =\n+\t  (MessageDigest) Class.forName(classname).newInstance();\n+\tm.algorithm = algorithm;\n+\tm.provider = provider;\n+\treturn m;\n+      }\n+    catch (ClassNotFoundException cnfe)\n+      {\n+\tthrow new NoSuchAlgorithmException(algorithm + \": Class not found.\");\n+      }\n+    catch (InstantiationException ie)\n       {\n-\ttry\n-\t  {\n-\t    return (MessageDigest) Class.forName(val).newInstance ();\n-\t  }\n-\tcatch (Throwable _)\n-\t  {\n-\t    // Nothing.\n-\t  }\n+\tthrow new NoSuchAlgorithmException(algorithm\n+\t\t\t\t\t   + \": Class instantiation failed.\");\n       }\n+    catch (IllegalAccessException iae)\n+      {\n+\tthrow new NoSuchAlgorithmException(algorithm + \": Illegal Access\");\n+      }\n+  }\n+\n \n-    throw new NoSuchAlgorithmException (algorithm);\n+  /**\n+     Gets the provider that the MessageDigest is from.\n+\n+     @return the provider the this MessageDigest\n+   */\n+  public final Provider getProvider()\n+  {\n+    return provider;\n   }\n \n-  public void update (byte input)\n+  /**\n+     Updates the digest with the byte.\n+\n+     @param input byte to update the digest with\n+   */\n+  public void update(byte input)\n   {\n-    engineUpdate (input);\n+    engineUpdate(input);\n   }\n \n-  public void update (byte[] input, int offset, int len)\n+  /**\n+     Updates the digest with the bytes from the array from the\n+     specified offset to the specified length.\n+\n+     @param input bytes to update the digest with\n+     @param offset the offset to start at\n+     @param len length of the data to update with\n+   */\n+  public void update(byte[]input, int offset, int len)\n   {\n-    engineUpdate (input, offset, len);\n+    engineUpdate(input, 0, input.length);\n   }\n \n-  public void update (byte[] input)\n+  /**\n+     Updates the digest with the bytes from the array.\n+\n+     @param input bytes to update the digest with\n+   */\n+  public void update(byte[]input)\n   {\n-    engineUpdate (input, 0, input.length);\n+    engineUpdate(input, 0, input.length);\n   }\n \n-  public byte[] digest ()\n+  /**\n+     Computes the digest of the stored data.\n+\n+     @return a byte array representing the message digest\n+   */\n+  public byte[] digest()\n+  {\n+    return lastDigest = engineDigest();\n+  }\n+\n+  /**\n+     Computes the final digest of the stored bytes and returns\n+     them. \n+\n+     @param buf An array of bytes to store the digest\n+     @param offset An offset to start storing the digest at\n+     @param len The length of the buffer\n+     @return Returns the length of the buffer\n+   */\n+  public int digest(byte[]buf, int offset, int len) throws DigestException\n   {\n-    return engineDigest ();\n+    return engineDigest(buf, offset, len);\n   }\n \n-  public byte[] digest (byte[] input)\n+  /**\n+     Computes a final update using the input array of bytes,\n+     then computes a final digest and returns it. It calls \n+     update(input) and then digest();\n+\n+     @param buf An array of bytes to perform final update with\n+     @return a byte array representing the message digest\n+   */\n+  public byte[] digest(byte[]input)\n   {\n-    update (input);\n-    return engineDigest ();\n+    update(input);\n+    return digest();\n   }\n \n-  public String toString ()\n+  /**\n+     Returns a representation of the MessageDigest as a String.\n+\n+     @return a string representing the message digest\n+   */\n+  public String toString()\n   {\n-    // There is no spec for this.\n-    return \"[MessageDigest: \" + name + \"]\";\n+    return (getClass()).getName()\n+      + \" Message Digest <\" + digestToString() + \">\";\n   }\n \n-  public static boolean isEqual (byte[] digesta, byte[] digestb)\n+  /**\n+     Does a simple byte comparison of the two digests.\n+\n+     @param digesta first digest to compare\n+     @param digestb second digest to compare\n+     @return true if they are equal, false otherwise\n+   */\n+  public static boolean isEqual(byte[]digesta, byte[]digestb)\n   {\n-    if (digesta == digestb)\n-      return true;\n     if (digesta.length != digestb.length)\n       return false;\n+\n     for (int i = digesta.length - 1; i >= 0; --i)\n       if (digesta[i] != digestb[i])\n \treturn false;\n+\n     return true;\n   }\n \n-  public void reset ()\n+\n+  /**\n+     Resets the message digest.\n+   */\n+  public void reset()\n+  {\n+    engineReset();\n+  }\n+\n+  /** \n+     Gets the name of the algorithm currently used.\n+     The names of algorithms are usually SHA-1 or MD5.\n+\n+     @return name of algorithm.\n+   */\n+  public final String getAlgorithm()\n   {\n-    engineReset ();\n+    return algorithm;\n   }\n \n-  public final String getAlgorithm ()\n+  /**\n+     Gets the length of the message digest.\n+     The default is zero which means that this message digest\n+     does not implement this function.\n+\n+     @return length of the message digest\n+   */\n+  public final int getDigestLength()\n   {\n-    return name;\n+    return engineGetDigestLength();\n   }\n \n-  protected abstract void engineUpdate (byte input);\n-  protected abstract void engineUpdate (byte input[], int offset, int len);\n-  protected abstract byte[] engineDigest ();\n-  protected abstract void engineReset ();\n+  /**\n+     Returns a clone of this class if supported.\n+     If it does not then it throws CloneNotSupportedException.\n+     The cloning of this class depends on whether the subclass\n+     MessageDigestSpi implements Cloneable which contains the\n+     actual implementation of the appropriate algorithm.\n \n+     @return clone of this class\n+\n+     @exception CloneNotSupportedException this class does not support cloning\n+   */\n   public Object clone() throws CloneNotSupportedException\n   {\n-    return super.clone ();\n+    if (this instanceof Cloneable)\n+      return super.clone();\n+    else\n+      throw new CloneNotSupportedException();\n+  }\n+\n+  private String digestToString()\n+  {\n+    byte[] digest = lastDigest;\n+\n+    if (digest == null)\n+      return \"incomplete\";\n+\n+    StringBuffer buf = new StringBuffer();\n+    int len = digest.length;\n+    for (int i = 0; i < len; ++i)\n+      {\n+\tbyte b = digest[i];\n+\tbyte high = (byte) ((b & 0xff) >>> 4);\n+\tbyte low = (byte) (b & 0xf);\n+\n+\tbuf.append(high > 9 ? ('a' - 10) + high : '0' + high);\n+\tbuf.append(low > 9 ? ('a' - 10) + low : '0' + low);\n+      }\n+\n+    return buf.toString();\n   }\n \n-  // Algorithm name.\n-  private String name;\n }"}, {"sha": "ce9e54d55535f162a282fe0df0789cf8a17d2c1c", "filename": "libjava/java/security/MessageDigestSpi.java", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FMessageDigestSpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FMessageDigestSpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FMessageDigestSpi.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,147 @@\n+/* MessageDigestSpi.java --- The message digest service provider interface.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+/**\n+   This is the Service Provider Interface (SPI) for MessageDigest\n+   class in java.security. It provides the back end functionality\n+   for the MessageDigest class so that it can compute message \n+   hashes. The default hashes are SHA-1 and MD5. A message hash\n+   takes data of arbitrary length and produces a unique number\n+   representing it. \n+\n+   Cryptography service providers who want to implement their\n+   own message digest hashes need only to subclass this class.\n+\n+   The implementation of a Cloneable interface is left to up to \n+   the programmer of a subclass.\n+\n+   @version 0.0\n+\n+   @author Mark Benvenuto <ivymccough@worldnet.att.net>\n+ */\n+public abstract class MessageDigestSpi\n+{\n+  /**\n+     Default constructor of the MessageDigestSpi class\n+   */\n+  public MessageDigestSpi()\n+  {\n+  }\n+\n+  /**\n+     Returns the length of the digest.  It may be overridden by the\n+     provider to return the length of the digest.  Default is to\n+     return 0.  It is concrete for backwards compatibility with JDK1.1\n+     message digest classes.\n+\n+     @return Length of Digest in Bytes\n+\n+     @since 1.2\n+   */\n+  protected int engineGetDigestLength()\n+  {\n+    return 0;\n+  }\n+\n+  /**\n+     Updates the digest with the specified byte.\n+\n+     @param input the byte to update digest with\n+   */\n+  protected abstract void engineUpdate(byte input);\n+\n+\n+  /**\n+     Updates the digest with the specified bytes starting with the\n+     offset and proceeding for the specified length.\n+\n+     @param input the byte array to update digest with\n+     @param offset the offset of the byte to start with\n+     @param len the number of the bytes to update with\n+   */\n+  protected abstract void engineUpdate(byte[]input, int offset, int len);\n+\n+  /**\n+     Computes the final digest of the stored bytes and returns\n+     them. It performs any necessary padding. The message digest\n+     should reset sensitive data after performing the digest.\n+\n+     @return An array of bytes containing the digest\n+   */\n+  protected abstract byte[] engineDigest();\n+\n+  /**\n+     Computes the final digest of the stored bytes and returns\n+     them. It performs any necessary padding. The message digest\n+     should reset sensitive data after performing the digest.  This\n+     method is left concrete for backwards compatibility with JDK1.1\n+     message digest classes.\n+\n+     @param buf An array of bytes to store the digest\n+     @param offset An offset to start storing the digest at\n+     @param len The length of the buffer\n+     @return Returns the length of the buffer\n+\n+     @since 1.2\n+   */\n+  protected int engineDigest(byte[]buf, int offset, int len)\n+    throws DigestException\n+  {\n+    if (engineGetDigestLength() > len)\n+      throw new DigestException(\"Buffer is too small.\");\n+\n+    byte tmp[] = engineDigest();\n+    if (tmp.length > len)\n+      throw new DigestException(\"Buffer is too small\");\n+\n+    System.arraycopy(tmp, 0, buf, offset, tmp.length);\n+    return tmp.length;\n+  }\n+\n+  /**\n+     Resets the digest engine. Reinitializes internal variables \n+     and clears sensitive data.\n+   */\n+  protected abstract void engineReset();\n+\n+  /**\n+     Returns a clone of this class.\n+\n+     If cloning is not supported, then by default the class throws a\n+     CloneNotSupportedException.  The MessageDigestSpi provider\n+     implementation has to overload this class in order to be\n+     cloneable.\n+   */\n+  public Object clone() throws CloneNotSupportedException\n+  {\n+    if (this instanceof Cloneable)\n+      return super.clone();\n+    else\n+      throw new CloneNotSupportedException();\n+  }\n+}"}, {"sha": "966398b0542c17920ee7734baf278b17fe738a5c", "filename": "libjava/java/security/NoSuchAlgorithmException.java", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FNoSuchAlgorithmException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FNoSuchAlgorithmException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FNoSuchAlgorithmException.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,20 +1,56 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* NoSuchAlgorithmException.java -- What it says\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n- \n package java.security;\n- \n-public class NoSuchAlgorithmException extends Exception\n+\n+/**\n+ * This exception is thrown when the requested security algorithm is\n+ * not available\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public class NoSuchAlgorithmException extends GeneralSecurityException\n {\n+  /**\n+   * This method initializes a new instance of <code>NoSuchAlgorithmException</code>\n+   * with no descriptive error message.\n+   */\n   public NoSuchAlgorithmException()\n   {\n     super();\n   }\n \n+  /**\n+   * This method initializes a new instance of <code>NoSuchAlgorithmException</code>\n+   * with a descriptive error message.\n+   *\n+   * @param msg The descriptive error message\n+   */\n   public NoSuchAlgorithmException(String msg)\n   {\n     super(msg);"}, {"sha": "051d48a19b6ac5cc9a81f0466b24a0ab3345969b", "filename": "libjava/java/security/NoSuchProviderException.java", "status": "modified", "additions": 39, "deletions": 13, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FNoSuchProviderException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FNoSuchProviderException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FNoSuchProviderException.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,30 +1,56 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* NoSuchProviderException.java -- What it says\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n \n-package java.security;\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 4, 2000.\n- */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n \n /**\n- * Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n+ * This exception is thrown when the requested security provider is\n+ * not available.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n-\n public class NoSuchProviderException extends GeneralSecurityException\n {\n+  /**\n+   * This method initializes a new instance of <code>NoSuchProviderException</code>\n+   * with no descriptive error message.\n+   */\n   public NoSuchProviderException()\n   {\n     super();\n   }\n \n+  /**\n+   * This method initializes a new instance of <code>NoSuchProviderException</code>\n+   * with a descriptive error message.\n+   *\n+   * @param msg The descriptive error message.\n+   */\n   public NoSuchProviderException(String msg)\n   {\n     super(msg);"}, {"sha": "4866df35dc747cab56defa618155f36683b766f2", "filename": "libjava/java/security/Permission.java", "status": "modified", "additions": 116, "deletions": 158, "changes": 274, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPermission.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -7,7 +7,7 @@\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -24,168 +24,126 @@\n This exception does not however invalidate any other reasons why the\n executable file might be covered by the GNU General Public License. */\n \n-\n package java.security;\n \n import java.io.Serializable;\n \n /**\n-  * This class is the abstract superclass of all classes that implement\n-  * the concept of a permission.  A permission consists of a permission name \n-  * and optionally a list of actions that relate to the permission.  The\n-  * actual meaning of the name of the permission is defined only in the\n-  * context of a subclass.  It may name a resource to which access permissions\n-  * are granted (for example, the name of a file) or it might represent\n-  * something else entirely.  Similarly, the action list only has meaning\n-  * within the context of a subclass.  Some permission names may have no\n-  * actions associated with them.  That is, you either have the permission\n-  * or you don't.\n-  *\n-  * The most important method in this class is <code>implies</code>.  This\n-  * checks whether if one has this permission, then the specified\n-  * permission is also implied.  As a conceptual example, consider the\n-  * permissions \"Read All Files\" and \"Read File foo\".  The permission\n-  * \"Read All Files\" implies that the caller has permission to read the\n-  * file foo.\n-  *\n-  * <code>Permission</code>'s are not dynamic objects.  Once created, a \n-  * <code>Permission</code>'s name and action list cannot be changed.\n-  *\n-  * @version 0.0\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public abstract class Permission implements Guard, Serializable\n-{\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Variables\n- */\n-\n-/**\n-  * This is the name assigned to this permission object.\n-  */ \n-protected String name; // Taken from the serializable form information\n-\n-/*************************************************************************/\n-\n-/*\n- * Constructors\n+ * This class is the abstract superclass of all classes that implement\n+ * the concept of a permission.  A permission consists of a permission name \n+ * and optionally a list of actions that relate to the permission.  The\n+ * actual meaning of the name of the permission is defined only in the\n+ * context of a subclass.  It may name a resource to which access permissions\n+ * are granted (for example, the name of a file) or it might represent\n+ * something else entirely.  Similarly, the action list only has meaning\n+ * within the context of a subclass.  Some permission names may have no\n+ * actions associated with them.  That is, you either have the permission\n+ * or you don't.\n+ *\n+ * The most important method in this class is <code>implies</code>.  This\n+ * checks whether if one has this permission, then the specified\n+ * permission is also implied.  As a conceptual example, consider the\n+ * permissions \"Read All Files\" and \"Read File foo\".  The permission\n+ * \"Read All Files\" implies that the caller has permission to read the\n+ * file foo.\n+ *\n+ * <code>Permission</code>'s are not dynamic objects.  Once created, a \n+ * <code>Permission</code>'s name and action list cannot be changed.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n-\n-/**\n-  * This method initializes a new instance of <code>Permission</code> to\n-  * have the specified name.\n-  */\n-public\n-Permission(String name)\n-{\n-  this.name = name;\n-}\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Methods\n- */\n-\n-/**\n-  * This method returns the name of this <code>Permission</code>\n-  *\n-  * @return The name of this <code>Permission</code>\n-  */\n-public String\n-getName()\n-{\n-  return(name);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the list of actions for this <code>Permission</code>\n-  * as a <code>String</code>.\n-  *\n-  * @return The action list for this <code>Permission</code>.\n-  */\n-public abstract String\n-getActions();\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method implements the <code>Guard</code> interface for this class.\n-  * It calls the <code>checkPermission</code> method in \n-  * <code>SecurityManager</code> with this <code>Permission</code> as its\n-  * argument.  This method returns silently if the security check succeeds\n-  * or throws an exception if it fails.\n-  *\n-  * @param obj The <code>Object</code> being guarded - ignored by this class\n-  *\n-  * @exception SecurityException If the security check fails\n-  */\n-public void\n-checkGuard(Object obj) throws SecurityException\n-{\n-  SecurityManager sm = System.getSecurityManager();\n-//  if (sm != null)\n-//    sm.checkPermission(this);\n-}\n-  \n-/*************************************************************************/\n-\n-/**\n-  * This method tests whether this <code>Permission</code> implies that the\n-  * specified <code>Permission</code> is also granted.\n-  *\n-  * @param perm The <code>Permission</code> to test against\n-  *\n-  * @return <code>true</code> if the specified <code>Permission</code> is implied by this one, <code>false</code> otherwise.\n-  */\n-public abstract boolean\n-implies(Permission perm);\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns a hash code for this <code>Permission</code>.\n-  *\n-  * @return A hash value.\n-  */\n-public abstract int\n-hashCode();\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns a <code>String</code> representation of this\n-  * <code>Permission</code> object.\n-  *\n-  * @return This object as a <code>String</code>.\n-  */\n-public String\n-toString()\n-{\n-  return(\"'\\\"\" + getClass().getName() + \"\\\" \\\"\" + getName() + \n-         \"\\\"\" + \" \\\"\" + getActions() + \"\\\")'\");\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns an empty <code>PermissionCollection</code> object\n-  * that can store permissions of this type, or <code>null</code> if no\n-  * such collection is defined.\n-  *\n-  * @return A new <code>PermissionCollection</code>\n-  */\n-public PermissionCollection\n-newPermissionCollection()\n+public abstract class Permission implements Guard, Serializable\n {\n-  return(null);\n+  /**\n+   * This is the name assigned to this permission object.\n+   */\n+  protected String name;\t// Taken from the serializable form information\n+\n+  /**\n+   * This method initializes a new instance of <code>Permission</code> to\n+   * have the specified name.\n+   */\n+  public Permission(String name)\n+  {\n+    this.name = name;\n+  }\n+\n+  /**\n+   * This method returns the name of this <code>Permission</code>\n+   *\n+   * @return The name of this <code>Permission</code>\n+   */\n+  public String getName()\n+  {\n+    return (name);\n+  }\n+\n+  /**\n+   * This method returns the list of actions for this <code>Permission</code>\n+   * as a <code>String</code>.\n+   *\n+   * @return The action list for this <code>Permission</code>.\n+   */\n+  public abstract String getActions();\n+\n+  /**\n+   * This method implements the <code>Guard</code> interface for this class.\n+   * It calls the <code>checkPermission</code> method in \n+   * <code>SecurityManager</code> with this <code>Permission</code> as its\n+   * argument.  This method returns silently if the security check succeeds\n+   * or throws an exception if it fails.\n+   *\n+   * @param obj The <code>Object</code> being guarded - ignored by this class\n+   *\n+   * @exception SecurityException If the security check fails\n+   */\n+  public void checkGuard(Object obj) throws SecurityException\n+  {\n+    SecurityManager sm = System.getSecurityManager();\n+    if (sm != null)\n+      sm.checkPermission(this);\n+  }\n+\n+  /**\n+   * This method tests whether this <code>Permission</code> implies that the\n+   * specified <code>Permission</code> is also granted.\n+   *\n+   * @param perm The <code>Permission</code> to test against\n+   *\n+   * @return <code>true</code> if the specified <code>Permission</code> is implied by this one, <code>false</code> otherwise.\n+   */\n+  public abstract boolean implies(Permission perm);\n+\n+  /**\n+   * This method returns a hash code for this <code>Permission</code>.\n+   *\n+   * @return A hash value.\n+   */\n+  public abstract int hashCode();\n+\n+  /**\n+   * This method returns a <code>String</code> representation of this\n+   * <code>Permission</code> object.\n+   *\n+   * @return This object as a <code>String</code>.\n+   */\n+  public String toString()\n+  {\n+    return (\"'\\\"\" + getClass().getName() + \"\\\" \\\"\" + getName() +\n+\t    \"\\\"\" + \" \\\"\" + getActions() + \"\\\")'\");\n+  }\n+\n+  /**\n+   * This method returns an empty <code>PermissionCollection</code> object\n+   * that can store permissions of this type, or <code>null</code> if no\n+   * such collection is defined.\n+   *\n+   * @return A new <code>PermissionCollection</code>\n+   */\n+  public PermissionCollection newPermissionCollection()\n+  {\n+    return null;\n+  }\n }\n-\n-} // class Permission\n-"}, {"sha": "f709a0ab423d4c23cb7e0423d8c115005a30b4ee", "filename": "libjava/java/security/PermissionCollection.java", "status": "modified", "additions": 131, "deletions": 175, "changes": 306, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FPermissionCollection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FPermissionCollection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPermissionCollection.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -7,7 +7,7 @@\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -24,184 +24,140 @@\n This exception does not however invalidate any other reasons why the\n executable file might be covered by the GNU General Public License. */\n \n-\n package java.security;\n \n import java.io.Serializable;\n import java.util.Enumeration;\n \n-/**\n-  * This class models a group of Java permissions.  It has convenient\n-  * methods for determining whether or not a given permission is implied\n-  * by any of the permissions in this collection.\n-  * <p>\n-  * Some care must be taken in storing permissions.  First, a collection of\n-  * the appropriate type must be created.  This is done by calling the\n-  * <code>newPermissionCollection</code> method on an object of the \n-  * permission class you wish to add to the collection.  If this method\n-  * returns <code>null</code>, any type of <code>PermissionCollection</code>\n-  * can be used to store permissions of that type.  However, if a\n-  * <code>PermissionCollection</code> collection object is returned, that\n-  * type must be used.  \n-  * <p>\n-  * The <code>PermissionCollection</code>'s returned\n-  * by the <code>newPermissionCollection</code> instance in a subclass of\n-  * <code>Permission</code> is a homogeneous collection.  It only will \n-  * hold permissions of one specified type - instances of the class that\n-  * created it.  Not all <code>PermissionCollection</code> subclasses\n-  * have to hold permissions of only one type however.  For example,\n-  * the <code>Permissions</code> class holds permissions of many types.\n-  * <p>\n-  * Since the <code>newPermissionCollection</code> in <code>Permission</code>\n-  * itself returns <code>null</code>, by default a permission can be stored\n-  * in any type of collection unless it overrides that method to create its\n-  * own collection type.\n-  *\n-  * @version 0.0\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public abstract class PermissionCollection extends Object implements Serializable\n-{\n-\n-/*************************************************************************/\n-\n-/*\n- * Class Variables\n- */\n-\n-public static final String linesep = null;\n-\n-static\n-{\n-  String linesep = System.getProperty(\"line.separator\");\n-  if (linesep == null);\n-    linesep = \"\\n\";\n-}\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Variables\n- */\n-\n-/**\n-  * Indicates whether or not this collection is read only.\n-  */\n-private boolean readOnly; \n-\n-/*************************************************************************/\n-\n-/*\n- * Constructors\n- */\n-\n-/**\n-  * This method initializes a new instance of <code>PermissionCollection</code>.\n-  * This is provided only as a default constructor and does nothing in this\n-  * class.\n-  */\n-public\n-PermissionCollection()\n+  /**\n+   * This class models a group of Java permissions.  It has convenient\n+   * methods for determining whether or not a given permission is implied\n+   * by any of the permissions in this collection.\n+   * <p>\n+   * Some care must be taken in storing permissions.  First, a collection of\n+   * the appropriate type must be created.  This is done by calling the\n+   * <code>newPermissionCollection</code> method on an object of the \n+   * permission class you wish to add to the collection.  If this method\n+   * returns <code>null</code>, any type of <code>PermissionCollection</code>\n+   * can be used to store permissions of that type.  However, if a\n+   * <code>PermissionCollection</code> collection object is returned, that\n+   * type must be used.  \n+   * <p>\n+   * The <code>PermissionCollection</code>'s returned\n+   * by the <code>newPermissionCollection</code> instance in a subclass of\n+   * <code>Permission</code> is a homogeneous collection.  It only will \n+   * hold permissions of one specified type - instances of the class that\n+   * created it.  Not all <code>PermissionCollection</code> subclasses\n+   * have to hold permissions of only one type however.  For example,\n+   * the <code>Permissions</code> class holds permissions of many types.\n+   * <p>\n+   * Since the <code>newPermissionCollection</code> in <code>Permission</code>\n+   * itself returns <code>null</code>, by default a permission can be stored\n+   * in any type of collection unless it overrides that method to create its\n+   * own collection type.\n+   *\n+   * @version 0.0\n+   *\n+   * @author Aaron M. Renn (arenn@urbanophile.com)\n+   */\n+public abstract class PermissionCollection extends Object implements\n+  Serializable\n {\n-  ;\n+  public static final String linesep = null;\n+\n+  static\n+  {\n+    String linesep = System.getProperty(\"line.separator\");\n+    if (linesep == null);\n+      linesep = \"\\n\";\n+  }\n+\n+  /**\n+   * Indicates whether or not this collection is read only.\n+   */\n+  private boolean readOnly;\n+\n+  /**\n+   * This method initializes a new instance of <code>PermissionCollection</code>.\n+   * This is provided only as a default constructor and does nothing in this\n+   * class.\n+   */\n+  public PermissionCollection()\n+  {\n+  }\n+\n+  /**\n+   * This method tests whether or not this <code>PermissionCollection</code>\n+   * object is read only.\n+   *\n+   * @return <code>true</code> if this collection is read only, <code>false</code> otherwise\n+   */\n+  public boolean isReadOnly()\n+  {\n+    return (readOnly);\n+  }\n+\n+  /**\n+   * This method sets this <code>PermissionCollection</code> object to be\n+   * read only.  No further permissions can be added to it after calling this\n+   * method.\n+   */\n+  public void setReadOnly()\n+  {\n+    readOnly = true;\n+  }\n+\n+ /**\n+   * This method adds a new <code>Permission</code> object to the collection.\n+   *\n+   * @param perm The <code>Permission</code> to add.\n+   *\n+   * @exception SecurityException If the collection is marked read only.\n+   * @exception IllegalArgumentException If a permission of the specified type cannot be added\n+   */\n+  public abstract void\n+    add(Permission perm) throws SecurityException, IllegalArgumentException;\n+\n+  /**\n+   * This method returns an <code>Enumeration</code> of all the objects in\n+   * this collection.\n+   *\n+   * @return An <code>Enumeration</code> of this collection's objects.\n+   */\n+  public abstract Enumeration elements();\n+\n+  /**\n+   * This method tests whether the specified <code>Permission</code> object is\n+   * implied by this collection of <code>Permission</code> objects.\n+   *\n+   * @param perm The <code>Permission</code> object to test.\n+   *\n+   * @return <code>true</code> if the specified <code>Permission</code> is implied by this collection, <code>false</code> otherwise.\n+   */\n+  public abstract boolean implies(Permission perm);\n+\n+  /**\n+   * This method returns a <code>String</code> representation of this\n+   * collection.  It will print the class name and has code in the same\n+   * manner as <code>Object.toString()</code> then print a listing of all\n+   * the <code>Permission</code> objects contained.\n+   *\n+   * @return A <code>String</code> representing this object.\n+   */\n+  public String toString()\n+  {\n+    StringBuffer sb = new StringBuffer(\"\");\n+\n+    sb.append(super.toString() + \" (\" + linesep);\n+    Enumeration e = elements();\n+    while (e.hasMoreElements())\n+      {\n+\tObject obj = e.nextElement();\n+\tif (obj instanceof Permission)\n+\t  sb.append(((Permission) obj).toString() + linesep);\n+      }\n+\n+    sb.append(\")\" + linesep);\n+    return (sb.toString());\n+  }\n }\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Methods\n- */\n-\n-/**\n-  * This method tests whether or not this <code>PermissionCollection</code>\n-  * object is read only.\n-  *\n-  * @return <code>true</code> if this collection is read only, <code>false</code> otherwise\n-  */\n-public boolean\n-isReadOnly()\n-{\n-  return(readOnly);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets this <code>PermissionCollection</code> object to be\n-  * read only.  No further permissions can be added to it after calling this\n-  * method.\n-  */\n-public void\n-setReadOnly()\n-{\n-  readOnly = true;\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method adds a new <code>Permission</code> object to the collection.\n-  *\n-  * @param perm The <code>Permission</code> to add.\n-  *\n-  * @exception SecurityException If the collection is marked read only.\n-  * @exception IllegalArgumentException If a permission of the specified type cannot be added\n-  */\n-public abstract void\n-add(Permission perm) throws SecurityException, IllegalArgumentException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns an <code>Enumeration</code> of all the objects in\n-  * this collection.\n-  *\n-  * @return An <code>Enumeration</code> of this collection's objects.\n-  */\n-public abstract Enumeration\n-elements();\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method tests whether the specified <code>Permission</code> object is\n-  * implied by this collection of <code>Permission</code> objects.\n-  *\n-  * @param perm The <code>Permission</code> object to test.\n-  *\n-  * @return <code>true</code> if the specified <code>Permission</code> is implied by this collection, <code>false</code> otherwise.\n-  */\n-public abstract boolean\n-implies(Permission perm);\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns a <code>String</code> representation of this\n-  * collection.  It will print the class name and has code in the same\n-  * manner as <code>Object.toString()</code> then print a listing of all\n-  * the <code>Permission</code> objects contained.\n-  *\n-  * @return A <code>String</code> representing this object.\n-  */\n-public String\n-toString()\n-{\n-  StringBuffer sb = new StringBuffer(\"\");\n-\n-  sb.append(super.toString() + \" (\" + linesep);\n-  Enumeration e = elements();\n-  while (e.hasMoreElements())\n-    {\n-      Object obj = e.nextElement();\n-      if (obj instanceof Permission)\n-        sb.append(((Permission)obj).toString() + linesep);\n-    }\n-\n-  sb.append(\")\" + linesep);\n-  return(sb.toString());\n-}\n-\n-} // class PermissionCollection\n-"}, {"sha": "44bc3d37c17c81d9abd2252b54a306fc5179a62e", "filename": "libjava/java/security/Permissions.java", "status": "added", "additions": 257, "deletions": 0, "changes": 257, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FPermissions.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FPermissions.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPermissions.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,257 @@\n+/* Permissions.java -- A collection of permission collections\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+import java.io.Serializable;\n+import java.util.Hashtable;\n+import java.util.Enumeration;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * This class is a heterogeneous collection of permissions.  It is \n+ * organized as a collection of <code>PermissionCollection</code>'s stored\n+ * in a hashtable.  Each individual <code>PermissionCollection</code>\n+ * contains permissions of a single type.  If a specific type of \n+ * <code>Permission</code> does not provide a collection type to use\n+ * via its <code>newPermissionCollection</code> method, then a default\n+ * collection type which stores its permissions in a hash table will be\n+ * used.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public class Permissions extends PermissionCollection implements Serializable\n+{\n+  /**\n+   * Holds instances of <code>AllPermission</code>.\n+   */\n+  private PermissionCollection allPermission;\n+\n+  /**\n+   * This is the <code>Hashtable</code> that contains our collections.\n+   */\n+  Hashtable perms = new Hashtable();\n+\n+  /**\n+   * This method initializes a new instance of <code>Permissions</code>.\n+   */\n+  public Permissions()\n+  {\n+  }\n+\n+  /**\n+   * This method adds a new <code>Permission</code> to this collection.  It\n+   * will be stored in a <code>PermissionCollection</code> of the appropriate\n+   * type, as determined by calling <code>newPermissionCollection</code> on\n+   * the specified permission (if an appropriate collection does not already\n+   * exist).  If this object does not specify a particular type of collection,\n+   * a default collection which stores in permissions in a hash table will\n+   * be used.\n+   *\n+   * @param perm The <code>Permission</code> object to be added to this collection.\n+   *\n+   * @exception SecurityException If this collection is marked as read only.\n+   * @exception IllegalArgumentException If the specified <code>Permission</code> cannot be added to this collection\n+   */\n+  public void add(Permission perm)\n+    throws SecurityException, IllegalArgumentException\n+  {\n+    if (isReadOnly())\n+      throw new SecurityException(\"PermissionCollection is read only\");\n+\n+    if (perm instanceof AllPermission)\n+      {\n+\tif (allPermission == null)\n+\t  {\n+\t    allPermission = new\n+\t      DefaultPermissionCollection(\"java.security.AllPermission\");\n+\n+\t    perms.put(\"java.security.AllPermission\", allPermission);\n+\t  }\n+      }\n+    else\n+      {\n+\tObject obj = perms.get(perm.getClass().getName());\n+\tif (obj != null)\n+\t  {\n+\t    if (!(obj instanceof PermissionCollection))\n+\t      throw new RuntimeException(\"Internal error in Permissions\");\n+\n+\t    ((PermissionCollection) obj).add(perm);\n+\t  }\n+\telse\n+\t  {\n+\t    PermissionCollection pc = perm.newPermissionCollection();\n+\t    if (pc == null)\n+\t      pc = new DefaultPermissionCollection(perm.getClass().getName());\n+\n+\t    pc.add(perm);\n+\n+\t    perms.put(perm.getClass().getName(), pc);\n+\t  }\n+      }\n+  }\n+\n+  /**\n+   * This method tests whether or not the specified <code>Permission</code>\n+   * is implied by this <code>PermissionCollection</code>.\n+   *\n+   * @param perm The <code>Permission</code> to test.\n+   *\n+   * @return <code>true</code> if the specified permission is implied by this <code>PermissionCollection</code>, or <code>false</code> otherwise.\n+   */\n+  public boolean implies(Permission perm)\n+  {\n+    if (allPermission != null)\n+      return (true);\n+\n+    Object obj = perms.get(perm.getClass().getName());\n+    if (obj == null)\n+      return (false);\n+\n+    if (!(obj instanceof PermissionCollection))\n+      return (false);\n+\n+    return (((PermissionCollection) obj).implies(perm));\n+  }\n+\n+  /**\n+   * This method returns an <code>Enumeration</code> which contains a\n+   * list of all <code>Permission</code> objects contained in this\n+   * collection.\n+   *\n+   * @return An <code>Enumeration</code> of this collection's elements.\n+   */\n+  public Enumeration elements()\n+  {\n+    return new Enumeration()\n+    {\n+      Enumeration main_enum = perms.elements();\n+      Enumeration sub_enum;\n+\n+      public boolean hasMoreElements()\n+      {\n+\tif (sub_enum == null)\n+\t  if (main_enum == null)\n+\t    return (false);\n+\t  else\n+\t    {\n+\t      if (!main_enum.hasMoreElements())\n+\t\treturn (false);\n+\t      else\n+\t\t{\n+\t\t  try\n+\t\t    {\n+\t\t      PermissionCollection pc =\n+\t\t\t(PermissionCollection) main_enum.nextElement();\n+\t\t      sub_enum = pc.elements();\n+\t\t    }\n+\t\t  catch (NoSuchElementException e)\n+\t\t    {\n+\t\t      return (false);\n+\t\t    }\n+\t\t}\n+\t    }\n+\telse if (!sub_enum.hasMoreElements())\n+\t  {\n+\t    sub_enum = null;\n+\t    return (hasMoreElements());\n+\t  }\n+\n+\treturn (true);\n+      }\n+\n+      public Object nextElement() throws NoSuchElementException\n+      {\n+\tif (!hasMoreElements())\n+\t  throw new NoSuchElementException();\n+\n+\treturn (sub_enum.nextElement());\n+      }\n+    };\n+  }\n+  \n+  static class DefaultPermissionCollection extends PermissionCollection\n+    implements Serializable\n+  {\n+\n+    // Type of Permission we can store\n+    private Class permcls;\n+\n+    // Hashtable where we store permissions.\n+    private Hashtable perms = new Hashtable();\n+\n+    DefaultPermissionCollection(String permtype) throws IllegalArgumentException\n+    {\n+      try\n+\t{\n+\t  permcls = Class.forName(permtype);\n+\t}\n+      catch(ClassNotFoundException e)\n+\t{\n+\t  throw new IllegalArgumentException(e.getMessage());\n+\t}\n+    }\n+\n+    public void add(Permission perm) \n+      throws SecurityException, IllegalArgumentException\n+    {\n+      if (isReadOnly())\n+\tthrow new SecurityException(\"PermissionCollection is read only\");\n+\n+      if (!permcls.isInstance(perm))\n+\tthrow new IllegalArgumentException(\"Wrong permission type: \" + \n+                                \t   perm.getClass().getName());\n+\n+      if (perms.get(perm.getName()) != null)\n+\tthrow new IllegalArgumentException(\"Duplicate permission: \" +\n+                                \t   perm.getName());\n+\n+      perms.put(perm.getName(), perm);\n+    }\n+\n+    public boolean implies(Permission perm)\n+    {\n+      Object obj = perms.get(perm.getName());\n+      if (obj == null)\n+\treturn(false);\n+\n+      if (!(obj instanceof Permission))\n+\treturn(false);\n+\n+      Permission p = (Permission)obj;\n+\n+      return(p.implies(perm));\n+    }\n+\n+    public Enumeration elements()\n+    {\n+      return(perms.elements());\n+    }\n+  }\n+}"}, {"sha": "3a4a49352cb4a39563b43f85f68b5c6e81ce46de", "filename": "libjava/java/security/Policy.java", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FPolicy.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FPolicy.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPolicy.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,150 @@\n+/* Policy.java --- Policy Manager Class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+/**\n+   Policy is an abstract class for managing the system security\n+   policy for the Java application environment. It specifies\n+   which permissions are available for code from various\n+   sources. The security policy is represented through a \n+   subclass of Policy.\n+\n+   Only one Policy is in effect at any time. ProtectionDomain\n+   initializes itself with information from this class on the \n+   set of permssions to grant.\n+\n+   The location for the actual Policy could be anywhere in any\n+   form because it depends on the Policy implementation. The\n+   default system is in a flat ASCII file or it could be in a \n+   database.\n+\n+   The current installed Policy can be accessed with getPolicy\n+   and changed with setPolicy if the code has the correct\n+   permissions.\n+\n+   The refresh method causes the Policy class to refresh/reload\n+   its configuration. The method used to refresh depends on the \n+   Policy implementation.\n+\n+   When a protection domain initializes its permissions it uses\n+   code like:\n+   <code>\n+   policy = Policy.getPolicy();\n+   permissionCollection perms = policy.getPermissions(MyCodeSource)     \n+   </code>\n+   The protection domain passes the Policy handler a CodeSource\n+   object which contains the codebase URL and public key. The \n+   Policy implementation then returns the proper set of \n+   permissions for the CodeSource.\n+\n+   The default Policy implementation can be changed by setting\n+   the \"policy.provider\" security provider in java.security\n+   to the correct Policy implementation class.\n+\n+   @author Mark Benvenuto\n+\n+   @since JDK 1.2\n+ */\n+public abstract class Policy\n+{\n+  // FIXME: The class name of the Policy provider should really be sourced \n+  // from the \"java.security\" configuration file. For now, just hard-code \n+  // a stub implementation.\n+  static private Policy currentPolicy \n+    = new gnu.java.security.provider.DefaultPolicy();\n+\n+  /**\n+     Constructs a new Policy class.\n+   */\n+  public Policy()\n+  {\n+  }\n+\n+  /**\n+     Gets the currently installed Policy handler. The value should\n+     not be cached as it can be changed by setPolicy. This \n+     function first calls <code>SecurityManager.checkPermission</code>\n+     with <code>SecurityPermission(\"getPolicy\")</code> to check\n+     if the caller has Permission to get the current Policy.\n+\n+     @return the current Policy\n+\n+     @throws SecurityException if the security manager exists\n+     the caller does not have permission to \n+     <code>getPolicy</code>.\n+   */\n+  public static Policy getPolicy()\n+  {\n+    SecurityManager sm = System.getSecurityManager();\n+    if (sm != null)\n+      sm.checkPermission(new SecurityPermission(\"getPolicy\"));\n+\n+    return currentPolicy;\n+  }\n+\n+  /**\n+     Sets the currently installed Policy handler. This \n+     function first calls <code>SecurityManager.checkPermission</code>\n+     with <code>SecurityPermission(\"setPolicy\")</code> to check\n+     if the caller has Permission to get the current Policy.\n+\n+     @param policy the new Policy to use\n+\n+     @throws SecurityException if the security manager exists\n+     the caller does not have permission to \n+     <code>getPolicy</code>.\n+   */\n+  public static void setPolicy(Policy policy)\n+  {\n+    SecurityManager sm = System.getSecurityManager();\n+    if (sm != null)\n+      sm.checkPermission(new SecurityPermission(\"setPolicy\"));\n+\n+    currentPolicy = policy;\n+  }\n+\n+\n+  /**\n+     Evalutes the global policy and returns a set of Permissions \n+     allowed for the specified CodeSource.\n+\n+     @param codesource The CodeSource to get Permission for\n+\n+     @return a set of permissions for codesource specified by \n+     the current policy\n+\n+     @throws SecurityException if the current thread does not\n+     have permission to call <code>getPermissions</code>\n+   */\n+  public abstract PermissionCollection getPermissions(CodeSource codesource);\n+\n+  /**\n+     Refreshes and/or reloads the current Policy. The actual\n+     behavior of this method depends on the implementation. \n+   */\n+  public abstract void refresh();\n+}"}, {"sha": "cdba3a1990fa395e9fbfda95135fb87fc9d14087", "filename": "libjava/java/security/Principal.java", "status": "modified", "additions": 41, "deletions": 55, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FPrincipal.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FPrincipal.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPrincipal.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -7,7 +7,7 @@\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -24,62 +24,48 @@\n This exception does not however invalidate any other reasons why the\n executable file might be covered by the GNU General Public License. */\n \n-\n package java.security;\n \n /**\n-  * This interface models an entity (such as a user or a certificate authority)\n-  * for the purposes of applying the Java security model.\n-  *\n-  * @version 0.0\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n+   * This interface models an entity (such as a user or a certificate authority)\n+   * for the purposes of applying the Java security model.\n+   *\n+   * @version 0.0\n+   *\n+   * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n public interface Principal\n {\n-\n-/**\n-  * This method returns a <code>String</code> that names this \n-  * <code>Principal</code>.\n-  *\n-  * @return The name of this <code>Principal</code>.\n-  */\n-public abstract String\n-getName();\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method tests another <code>Principal</code> object for equality\n-  * with this one.\n-  * \n-  * @param obj The <code>Object</code> (which is a <code>Principal</code>) to test for equality against.\n-  *\n-  * @return <code>true</code> if the specified <code>Principal</code> is equal to this one, <code>false</code> otherwise.\n-  */\n-public abstract boolean\n-equals(Object obj);\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns a hash code value for this <code>Principal</code>.\n-  *\n-  * @return A hash value\n-  */\n-public abstract int\n-hashCode();\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns a <code>String</code> representation of this\n-  * <code>Principal</code>.\n-  *\n-  * @return This <code>Principal</code> represented as a <code>String</code>.\n-  */\n-public abstract String\n-toString();\n-\n-} // interface Principal\n-\n+  /**\n+   * This method returns a <code>String</code> that names this \n+   * <code>Principal</code>.\n+   *\n+   * @return The name of this <code>Principal</code>.\n+   */\n+  public abstract String getName();\n+\n+  /**\n+   * This method tests another <code>Principal</code> object for equality\n+   * with this one.\n+   * \n+   * @param obj The <code>Object</code> (which is a <code>Principal</code>) to test for equality against.\n+   *\n+   * @return <code>true</code> if the specified <code>Principal</code> is equal to this one, <code>false</code> otherwise.\n+   */\n+  public abstract boolean equals(Object obj);\n+\n+  /**\n+   * This method returns a hash code value for this <code>Principal</code>.\n+   *\n+   * @return A hash value\n+   */\n+  public abstract int hashCode();\n+\n+  /**\n+   * This method returns a <code>String</code> representation of this\n+   * <code>Principal</code>.\n+   *\n+   * @return This <code>Principal</code> represented as a <code>String</code>.\n+   */\n+  public abstract String toString();\n+}"}, {"sha": "7a736a5a538d9bde87b75d6f66ad10969a9210da", "filename": "libjava/java/security/PrivateKey.java", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FPrivateKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FPrivateKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPrivateKey.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,24 +1,40 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* PrivateKey.java -- \"Super-interface\" for all private keys\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+   This file is part of GNU Classpath.\n+\n+   GNU Classpath is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   GNU Classpath is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GNU Classpath; see the file COPYING.  If not, write to the\n+   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.\n+\n+   As a special exception, if you link this library with other files to\n+   produce an executable, this library does not by itself cause the\n+   resulting executable to be covered by the GNU General Public License.\n+   This exception does not however invalidate any other reasons why the\n+   executable file might be covered by the GNU General Public License. */\n \n-   This file is part of libgcj.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n- \n package java.security;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 1, 2000.\n- */\n-\n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n+   * This interface specified no methods.  In simply provides a common\n+   * super-interface for all algorithm specific private key values.\n+   *\n+   * @version 0.0\n+   *\n+   * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n- \n-public interface PrivateKey extends Key\n+public interface PrivateKey\n {\n-  // This interface contains no methods or constants.  It merely serves\n-  // to group (and provide type safety for) all private key interfaces.\n }"}, {"sha": "c061d5fb21091bf867d35b04dd69e8d1aca99a3b", "filename": "libjava/java/security/PrivilegedAction.java", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FPrivilegedAction.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FPrivilegedAction.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPrivilegedAction.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,49 @@\n+/* PrivilegedAction.java -- Perform a privileged action\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+/**\n+ * This interface specifes a single <code>run</code> method that \n+ * executes a privileged operation.  This method is called by \n+ * <code>AccessController.doPrivileged()</code> after that method\n+ * activiates the required privileges.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public interface PrivilegedAction\n+{\n+  /**\n+   * This method performs an operation that requires higher privileges to\n+   * perform.  It is called when a section of code invokes\n+   * <code>AccessController.doPrivileged()</code>.\n+   *\n+   * @return obj An implementation dependent return value\n+   */\n+  public abstract Object run();\n+}"}, {"sha": "55f2e1737ce244b1aacd7d5554ee5c0dd3d280a8", "filename": "libjava/java/security/PrivilegedActionException.java", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FPrivilegedActionException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FPrivilegedActionException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPrivilegedActionException.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,102 @@\n+/* PrivilegedActionException.java -- An exception occurred in a \n+   privileged action.\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+\n+/**\n+ * This exception is thrown when an exception is thrown during a\n+ * privileged action being performed with the \n+ * <code>AccessController.doPrivileged()</code> method.  It wrappers the\n+ * actual exception thrown in the privileged code.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public class PrivilegedActionException extends Exception\n+{\n+\n+  /**\n+   * This is the actual exception that occurred\n+   */\n+  private Exception e;\n+\n+  /**\n+   * This method initializes a new instance of <code>PrivilegedActionException</code>\n+   * that wrappers the specified <code>Exception</code>.\n+   *\n+   * @param e The <code>Exception</code> to wrapper\n+   */\n+  public PrivilegedActionException(Exception e)\n+  {\n+    this.e = e;\n+  }\n+\n+  /**\n+   * This method returns the underlying <code>Exception</code> that caused\n+   * this exception to be raised.\n+   *\n+   * @return The wrappered <code>Exception</code>.\n+   */\n+  public Exception getException()\n+  {\n+    return (e);\n+  }\n+\n+  /**\n+   * This method prints the stack trace of the wrappered exception.\n+   */\n+  public void printStackTrace()\n+  {\n+    e.printStackTrace();\n+  }\n+\n+  /**\n+   * This method prints the stack trace of the wrappered exception to the\n+   * specified <code>PrintStream</code>.\n+   *\n+   * @param ps The <code>PrintStream</code> to print the stack trace to.\n+   */\n+  public void printStackTrace(PrintStream ps)\n+  {\n+    e.printStackTrace(ps);\n+  }\n+\n+  /**\n+   * This method prints the stack trace of the wrappered exception to the\n+   * specified <code>PrintWriter</code>.\n+   *\n+   * @param pw The <code>PrintWriter</code> to print the stack trace to.\n+   */\n+  public void printStackTrace(PrintWriter pw)\n+  {\n+    e.printStackTrace(pw);\n+  }\n+}"}, {"sha": "2ce97f5e0a4f870018f43b8541cdf55d2e4cdcc2", "filename": "libjava/java/security/PrivilegedExceptionAction.java", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FPrivilegedExceptionAction.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FPrivilegedExceptionAction.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPrivilegedExceptionAction.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,52 @@\n+/* PrivilegedExceptionAction.java -- Perform a privileged operation\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+/**\n+ * This interface defines a method that is called by \n+ * <code>AccessController.doPrivileged()</code> in order to perform a\n+ * privileged operation with higher privileges enabled.  This interface\n+ * differs from <code>PrivilegedAction</code> in that the <code>run</code>\n+ * method in this interface may throw a checked exception.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public interface PrivilegedExceptionAction\n+{\n+  /**\n+   * This method performs an operation that requires higher privileges to\n+   * successfully complete.  It is called when a section of code invokes\n+   * <code>AccessController.doPrivileged()</code>.\n+   *\n+   * @return obj An implementation defined return value.\n+   *\n+   * @exception Exception An implementation specific exception.\n+   */\n+  public abstract Object run() throws Exception;\n+}"}, {"sha": "94eb141e9b7fb059a13fc92f4ae8357850c8519f", "filename": "libjava/java/security/ProtectionDomain.java", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FProtectionDomain.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FProtectionDomain.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FProtectionDomain.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,132 @@\n+/* ProtectionDomain.java -- A security domain\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+/**\n+ * This class represents a group of classes, along with the permissions\n+ * they are granted.  The classes are identified by a <code>CodeSource</code>.\n+ * Thus, any class loaded from the specified <code>CodeSource</code> is\n+ * treated as part of this domain.  The set of permissions is represented\n+ * by a <code>PermissionCollection</code>.\n+ * <p>\n+ * Every class in the system will belong to one and only one\n+ * <code>ProtectionDomain</code>.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public class ProtectionDomain\n+{\n+  private static final String linesep = System.getProperty(\"line.separator\");\n+\n+  /**\n+   * This is the <code>CodeSource</code> for this protection domain\n+   */\n+  private CodeSource code_source;\n+\n+  /**\n+   * This is the set of permissions granted to this domain\n+   */\n+  private PermissionCollection perms;\n+\n+  /**\n+   * This method initializes a new instance of <code>ProtectionDomain</code>\n+   * representing the specified <code>CodeSource</code> and permission set.\n+   * No permissions may be added to the <code>PermissionCollection</code>\n+   * and this contructor will call the <code>setReadOnly</code> method on\n+   * the specified permission set.\n+   *\n+   * @param code_source The <code>CodeSource</code> for this domain\n+   * @param perms The permission set for this domain\n+   *\n+   * @see java.security.PermissionCollection#setReadOnly()\n+   */\n+  public ProtectionDomain(CodeSource code_source, PermissionCollection perms)\n+  {\n+    this.code_source = code_source;\n+    this.perms = perms;\n+    if (perms != null)\n+      perms.setReadOnly();\n+  }\n+\n+  /**\n+     * This method returns the <code>CodeSource</code> for this domain.\n+     *\n+     * @return This domain's <code>CodeSource</code>.\n+   */\n+  public final CodeSource getCodeSource()\n+  {\n+    return code_source;\n+  }\n+\n+  /**\n+   * This method returns the set of permissions granted to this domain.\n+   *\n+   * @return The permission set for this domain\n+   */\n+  public final PermissionCollection getPermissions()\n+  {\n+    return perms;\n+  }\n+\n+  /**\n+   * This method tests whether or not the specified <code>Permission</code> is\n+   * implied by the set of permissions granted to this domain.\n+   *\n+   * @param perm The <code>Permission</code> to test.\n+   *\n+   * @return <code>true</code> if the specified <code>Permission</code> is implied for this domain, <code>false</code> otherwise.\n+   */\n+  public boolean implies(Permission perm)\n+  {\n+    PermissionCollection pc = getPermissions();\n+    if (pc == null)\n+      return (false);\n+\n+    return (pc.implies(perm));\n+  }\n+\n+  /**\n+   * This method returns a <code>String</code> representation of this\n+   * object.  It will print the <code>CodeSource</code> and \n+   * permission set associated with this domain.\n+   *\n+   * @return A <code>String</code> representation of this object.\n+   */\n+  public String toString()\n+  {\n+    StringBuffer sb = new StringBuffer(\"\");\n+\n+    sb.append(super.toString() + \" (\" + linesep);\n+    sb.append(code_source.toString());\n+    sb.append(perms.toString());\n+    sb.append(\")\" + linesep);\n+\n+    return sb.toString();\n+  }\n+}"}, {"sha": "7668225265cabba5ac822f959f6470f698d2af4a", "filename": "libjava/java/security/Provider.java", "status": "modified", "additions": 122, "deletions": 165, "changes": 287, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FProvider.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FProvider.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FProvider.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -7,7 +7,7 @@\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -24,176 +24,133 @@\n This exception does not however invalidate any other reasons why the\n executable file might be covered by the GNU General Public License. */\n \n-\n package java.security;\n \n import java.io.Serializable;\n import java.util.Properties;\n \n /**\n-  * This class represents a Java security architecture service provider.\n-  * The services provided by a such a provider can range from security\n-  * algorithms to key generation.\n-  * <p>\n-  * Providers are installed by name and verion number.  There is one\n-  * standard provider supplied with the class library.  This is the\n-  * \"GNU\" provider, which can also be accessed by the alias \"SUN\" for\n-  * compatibility with the JDK.\n-  *\n-  * @version 0.0\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public abstract class Provider extends Properties implements Serializable\n-{\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Variables\n+ * This class represents a Java security architecture service provider.\n+ * The services provided by a such a provider can range from security\n+ * algorithms to key generation.\n+ * <p>\n+ * Providers are installed by name and verion number.  There is one\n+ * standard provider supplied with the class library.  This is the\n+ * \"GNU\" provider, which can also be accessed by the alias \"SUN\" for\n+ * compatibility with the JDK.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n-\n-/**\n-  * This is a textual description of the provider\n-  */\n-private String info;\n-\n-/**\n-  * This is the name of the provider\n-  */\n-private String name;\n-\n-/**\n-  * This is the version number of the provider\n-  */\n-private double version;\n-\n-private static final long serialVersionUID = -4298000515446427739L;\n-\n-/*************************************************************************/\n-\n-/*\n- * Constructors\n- */\n-\n-/**\n-  * This method initializes a new instance of <code>Provider</code> to have\n-  * the specified name, version, and description information.\n-  *\n-  * @param name The name to assign to this <code>Provider</code>.\n-  * @param version The version number for this <code>Provider</code>.\n-  * @param info A textual description of this provider.\n-  */\n-protected\n-Provider(String name, double version, String info)\n-{\n-  this.name = name;\n-  this.version = version;\n-  this.info = info;\n-} \n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Methods\n- */\n-\n-/**\n-  * This method returns the name assigned to this <code>Provider</code>.\n-  *\n-  * @return The <code>Provider</code>'s name.\n-  */\n-public String\n-getName()\n-{\n-  return(name);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method retunrs the version number of this <code>Provider</code>.\n-  * \n-  * @return The <code>Provider</code>'s version number.\n-  */\n-public double\n-getVersion()\n-{\n-  return(version);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns a textual description of the <code>Provider</code>.\n-  *\n-  * @return A description of the <code>Provider</code>.\n-  */\n-public String\n-getInfo()\n-{\n-  return(info);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified key to have the specified value.\n-  *\n-  * @param key The property key\n-  * @param value The property value\n-  *\n-  * @return The previous value for this key, or <code>null</code> if no previous value.\n-  */\n-public Object\n-put(Object key, Object value)\n-{\n-  return(super.put(key, value));\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method removes the specified key entry (and its associated value)\n-  * from the property mapping list.\n-  * \n-  * @param key The key to remove\n-  *\n-  * @return The previous value for this key, or <code>null</code> if no previous value.\n-  */\n-public Object\n-remove(Object key)\n-{\n-  return(super.remove(key));\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method clears the entire property list such that it no longer\n-  * contains the properties used to look up the services provided by\n-  * the <code>Provider</code>.\n-  */\n-public void\n-clear()\n-{\n-  super.clear();\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns a <code>String</code> representation of this\n-  * object.  This will include the <code>Provider</code> name and\n-  * version number.\n-  *\n-  * @return A <code>String</code> representation of this object.\n-  */\n-public String\n-toString()\n+public abstract class Provider extends Properties implements Serializable\n {\n-  return(getClass().getName() + \": name=\" + getName() + \" version=\" + version);\n+  /**\n+   * This is a textual description of the provider\n+   */\n+  private String info;\n+\n+  /**\n+   * This is the name of the provider\n+   */\n+  private String name;\n+\n+  /**\n+   * This is the version number of the provider\n+   */\n+  private double version;\n+\n+  /**\n+   * This method initializes a new instance of <code>Provider</code> to have\n+   * the specified name, version, and description information.\n+   *\n+   * @param name The name to assign to this <code>Provider</code>.\n+   * @param version The version number for this <code>Provider</code>.\n+   * @param info A textual description of this provider.\n+   */\n+  protected Provider(String name, double version, String info)\n+  {\n+    this.name = name;\n+    this.version = version;\n+    this.info = info;\n+  }\n+\n+  /**\n+   * This method returns the name assigned to this <code>Provider</code>.\n+   *\n+   * @return The <code>Provider</code>'s name.\n+   */\n+  public String getName()\n+  {\n+    return (name);\n+  }\n+\n+  /**\n+   * This method retunrs the version number of this <code>Provider</code>.\n+   * \n+   * @return The <code>Provider</code>'s version number.\n+   */\n+  public double getVersion()\n+  {\n+    return (version);\n+  }\n+\n+  /**\n+   * This method returns a textual description of the <code>Provider</code>.\n+   *\n+   * @return A description of the <code>Provider</code>.\n+   */\n+  public String getInfo()\n+  {\n+    return (info);\n+  }\n+\n+  /**\n+   * This method sets the specified key to have the specified value.\n+   *\n+   * @param key The property key\n+   * @param value The property value\n+   *\n+   * @return The previous value for this key, or <code>null</code> if no previous value.\n+   */\n+  public Object put(Object key, Object value)\n+  {\n+    return (super.put(key, value));\n+  }\n+\n+  /**\n+   * This method removes the specified key entry (and its associated value)\n+   * from the property mapping list.\n+   * \n+   * @param key The key to remove\n+   *\n+   * @return The previous value for this key, or <code>null</code> if no previous value.\n+   */\n+  public Object remove(Object key)\n+  {\n+    return (super.remove(key));\n+  }\n+\n+  /**\n+   * This method clears the entire property list such that it no longer\n+   * contains the properties used to look up the services provided by\n+   * the <code>Provider</code>.\n+   */\n+  public void clear()\n+  {\n+    super.clear();\n+  }\n+\n+  /**\n+   * This method returns a <code>String</code> representation of this\n+   * object.  This will include the <code>Provider</code> name and\n+   * version number.\n+   *\n+   * @return A <code>String</code> representation of this object.\n+   */\n+  public String toString()\n+  {\n+    return (getClass().getName() + \": name=\" + getName() + \" version=\" +\n+\t    version);\n+  }\n }\n-\n-} // class Provider\n-"}, {"sha": "e1b8322b23154fbf752091464918e3af20f76ff9", "filename": "libjava/java/security/ProviderException.java", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FProviderException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FProviderException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FProviderException.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,58 @@\n+/* ProviderException.java -- Generic security provider runtime exception\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+/**\n+ * This exception indicates that a runtime problem was encounterd with\n+ * a security provider. \n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public class ProviderException extends RuntimeException\n+{\n+  /**\n+   * This method initializes a new instance of <code>ProviderException</code>\n+   * with no descriptive error message.\n+   */\n+  public ProviderException()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * This method initializes a new instance of <code>ProviderException</code>\n+   * with a descriptive error message.\n+   *\n+   * @param msg The descriptive error message.\n+   */\n+  public ProviderException(String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "a56ffe48ab57579224ad792b6085dbecb86401bd", "filename": "libjava/java/security/PublicKey.java", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FPublicKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FPublicKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FPublicKey.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,24 +1,39 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* PublicKey.java -- \"Super-interface\" for all public keys\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n- \n package java.security;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 1, 2000.\n- */\n-\n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n+ * This interface specified no methods.  In simply provides a common\n+ * super-interface for all algorithm specific public key values.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n- \n-public interface PublicKey extends Key\n+public interface PublicKey\n {\n-  // This interface contains no methods or constants.  It merely serves\n-  // to group (and provide type safety for) all private key interfaces.\n }"}, {"sha": "f81b4203a24df51543e5795ea42e8246c2e7b8a3", "filename": "libjava/java/security/SecureClassLoader.java", "status": "modified", "additions": 89, "deletions": 17, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FSecureClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FSecureClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSecureClassLoader.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,24 +1,96 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* SecureClassLoader.java --- A Secure Class Loader\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n package java.security;\n \n-// JDK1.2\n-public class SecureClassLoader extends ClassLoader \n+/**\n+   A Secure Class Loader for loading classes with additional \n+   support for specifying code source and permissions when\n+   they are retrieved by the system policy handler.\n+\n+   @since JDK 1.2\n+\n+   @author Mark Benvenuto\n+ */\n+public class SecureClassLoader extends ClassLoader\n {\n-    public SecureClassLoader ()\n-    { \n-      this (null);\n-    }\n-\n-    public SecureClassLoader (ClassLoader parent)\n-    { \n-      super (parent);\n-    }\n-}\n+  protected SecureClassLoader(ClassLoader parent)\n+  {\n+    super(parent);\n+    // FIXME: What else?\n+  }\n+\n+  protected SecureClassLoader()\n+  {\n+    // FIXME: What do we need to do here?\n+  }\n \n+  /** \n+     Creates a class using an array of bytes and a \n+     CodeSource.\n+\n+     @param name the name to give the class.  null if unknown.\n+     @param b the data representing the classfile, in classfile format.\n+     @param off the offset into the data where the classfile starts.\n+     @param len the length of the classfile data in the array.\n+     @param cs the CodeSource for the class\n+\n+     @return the class that was defined and optional CodeSource.\n+\n+     @exception ClassFormatError if the byte array is not in proper classfile format.\n+   */\n+  protected final Class defineClass(String name, byte[] b, int off, int len,\n+\t\t\t\t    CodeSource cs)\n+  {\n+    // FIXME: Need to cache ProtectionDomains according to 1.3 docs.\n+    ProtectionDomain protectionDomain =\n+      new ProtectionDomain(cs, getPermissions(cs));\n+    try\n+      {\n+\treturn super.defineClass(name, b, off, len, protectionDomain);\n+      }\n+    catch (ClassFormatError cfe)\n+      {\n+\treturn null;\n+      }\n+  }\n+\n+  /**\n+     Returns a PermissionCollection for the specified CodeSource.\n+     The default implmentation invokes \n+     java.security.Policy.getPermissions.\n+\n+     This method is called by defineClass that takes a CodeSource\n+     arguement to build a proper ProtectionDomain for the class\n+     being defined.\n+\n+   */\n+  protected PermissionCollection getPermissions(CodeSource cs)\n+  {\n+    Policy policy = Policy.getPolicy();\n+    return policy.getPermissions(cs);\n+  }\n+}"}, {"sha": "39a39474fd5f14b6f83d4b2080340c3212380273", "filename": "libjava/java/security/SecureRandom.java", "status": "modified", "additions": 336, "deletions": 13, "changes": 349, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FSecureRandom.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FSecureRandom.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSecureRandom.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,25 +1,348 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* SecureRandom.java --- Secure Random class implmentation\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n package java.security;\n+import java.io.Serializable;\n import java.util.Random;\n+import java.util.Enumeration;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 7, 2000.\n- */\n+   SecureRandom is the class interface for using SecureRandom\n+   providers. It provides an interface to the SecureRandomSpi\n+   engine so that programmers can generate pseudo-random numbers.\n \n-/**\n- * Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Stubbed.\n+   @author Mark Benvenuto <ivymccough@worldnet.att.net>\n  */\n-\n public class SecureRandom extends Random\n {\n-  // FIXME: Stubbed.\n+  //Serialized Field\n+  long counter = 0;\t\t//Serialized\n+  MessageDigest digest = null;\n+  Provider provider = null;\n+  byte[] randomBytes = null;\t//Always null\n+  int randomBytesUsed = 0;\n+  SecureRandomSpi secureRandomSpi = null;\n+  byte[] state = null;\n+\n+  /**\n+     Default constructor for SecureRandom. It constructs a \n+     new SecureRandom by instantating the first SecureRandom \n+     algorithm in the default security provier. \n+\n+     It is not seeded and should be seeded using setseed or else\n+     on the first call to getnextBytes it will force a seed.\n+\n+     It is maintained for backwards compatability and programs\n+     should use getInstance.\n+   */\n+  public SecureRandom()\n+  {\n+    Provider p[] = Security.getProviders();\n+\n+    //Format of Key: SecureRandom.algname\n+    String key;\n+\n+    String classname = null;\n+    int i, flag = 0;\n+    Enumeration e;\n+    for (i = 0; i < p.length; i++)\n+      {\n+\te = p[i].propertyNames();\n+\twhile (e.hasMoreElements())\n+\t  {\n+\t    key = (String) e.nextElement();\n+\t    if (key.startsWith(\"SecureRandom.\"))\n+\t      if ((classname = p[i].getProperty(key)) != null)\n+\t\tbreak;\n+\t  }\n+\tif (classname != null)\n+\t    break;\n+      }\n+\n+    //if( classname == null)\n+    //  throw new NoSuchAlgorithmException();\n+\n+    try\n+      {\n+\tthis.secureRandomSpi =\n+\t  (SecureRandomSpi) Class.forName(classname).newInstance();\n+\n+\t//s.algorithm = algorithm;\n+\tthis.provider = p[i];\n+      }\n+    catch (ClassNotFoundException cnfe)\n+      {\n+\t//throw new NoSuchAlgorithmException(\"Class not found\");\n+      }\n+    catch (InstantiationException ie)\n+      {\n+\t//throw new NoSuchAlgorithmException(\"Class instantiation failed\");\n+      }\n+    catch (IllegalAccessException iae)\n+      {\n+\t//throw new NoSuchAlgorithmException(\"Illegal Access\");\n+      }\n+  }\n+\n+  /**\n+     A constructor for SecureRandom. It constructs a new \n+     SecureRandom by instantating the first SecureRandom algorithm \n+     in the default security provier. \n+\n+     It is seeded with the passed function and is useful if the user\n+     has access to hardware random device (like a radiation detector).\n+\n+     It is maintained for backwards compatability and programs\n+     should use getInstance.\n+\n+     @param seed Seed bytes for class\n+   */\n+  public SecureRandom(byte[] seed)\n+  {\n+    this();\n+    setSeed(seed);\n+  }\n+\n+  /**\n+     A constructor for SecureRandom. It constructs a new \n+     SecureRandom using the specified SecureRandomSpi from\n+     the specified security provier. \n+\n+     @param secureRandomSpi A SecureRandomSpi class\n+     @param provider A Provider class\n+   */\n+  protected SecureRandom(SecureRandomSpi secureRandomSpi, Provider provider)\n+  {\n+    this.secureRandomSpi = secureRandomSpi;\n+    this.provider = provider;\n+  }\n+\n+  /**\n+     Returns an instance of a SecureRandom. It creates the class\n+     for the specified algorithm if it exists from a provider.\n+\n+     @param algorithm A SecureRandom algorithm to use\n+\n+     @return Returns a new SecureRandom implmenting the chosen algorithm\n+\n+     @throws NoSuchAlgorithmException if the algorithm cannot be found\n+   */\n+  public static SecureRandom getInstance(String algorithm) throws\n+    NoSuchAlgorithmException\n+  {\n+    Provider p[] = Security.getProviders();\n+\n+    //Format of Key: SecureRandom.algname\n+    StringBuffer key = new StringBuffer(\"SecureRandom.\");\n+    key.append(algorithm);\n+\n+    String classname = null;\n+    int i;\n+    for (i = 0; i < p.length; i++)\n+      {\n+\tif ((classname = p[i].getProperty(key.toString())) != null)\n+\t  break;\n+      }\n+\n+    if (classname == null)\n+        throw new NoSuchAlgorithmException();\n+\n+    try\n+      {\n+\treturn new SecureRandom((SecureRandomSpi) Class.forName(classname).\n+\t\t\t\tnewInstance(), p[i]);\n+      }\n+    catch (ClassNotFoundException cnfe)\n+      {\n+\tthrow new NoSuchAlgorithmException(\"Class not found\");\n+      }\n+    catch (InstantiationException ie)\n+      {\n+\tthrow new NoSuchAlgorithmException(\"Class instantiation failed\");\n+      }\n+    catch (IllegalAccessException iae)\n+      {\n+\tthrow new NoSuchAlgorithmException(\"Illegal Access\");\n+      }\n+\n+  }\n+\n+  /**\n+     Returns an instance of a SecureRandom. It creates the class\n+     for the specified algorithm from the specified provider.\n+\n+     @param algorithm A SecureRandom algorithm to use\n+     @param provider A security provider to use\n+\n+     @return Returns a new SecureRandom implmenting the chosen algorithm\n+\n+     @throws NoSuchAlgorithmException if the algorithm cannot be found\n+     @throws NoSuchProviderException if the provider cannot be found\n+   */\n+  public static SecureRandom getInstance(String algorithm,\n+\t\t\t\t\t String provider) throws\n+    NoSuchAlgorithmException, NoSuchProviderException\n+  {\n+    Provider p = Security.getProvider(provider);\n+    if (p == null)\n+      throw new NoSuchProviderException();\n+\n+    //Format of Key: SecureRandom.algName\n+    StringBuffer key = new StringBuffer(\"SecureRandom.\");\n+    key.append(algorithm);\n+\n+    String classname = p.getProperty(key.toString());\n+    if (classname == null)\n+      throw new NoSuchAlgorithmException();\n+\n+    try\n+      {\n+\treturn new SecureRandom((SecureRandomSpi) Class.forName(classname).\n+\t\t\t\tnewInstance(), p);\n+      }\n+    catch (ClassNotFoundException cnfe)\n+      {\n+\tthrow new NoSuchAlgorithmException(\"Class not found\");\n+      }\n+    catch (InstantiationException ie)\n+      {\n+\tthrow new NoSuchAlgorithmException(\"Class instantiation failed\");\n+      }\n+    catch (IllegalAccessException iae)\n+      {\n+\tthrow new NoSuchAlgorithmException(\"Illegal Access\");\n+      }\n+\n+  }\n+\n+  /**\n+     Returns the provider being used by the current SecureRandom class.\n+\n+     @return The provider from which this SecureRandom was attained\n+   */\n+  public final Provider getProvider()\n+  {\n+    return provider;\n+  }\n+\n+  /**\n+     Seeds the SecureRandom. The class is re-seeded for each call and \n+     each seed builds on the previous seed so as not to weaken security.\n+\n+     @param seed seed bytes to seed with\n+   */\n+  public void setSeed(byte[] seed)\n+  {\n+    secureRandomSpi.engineSetSeed(seed);\n+  }\n+\n+  /**\n+     Seeds the SecureRandom. The class is re-seeded for each call and \n+     each seed builds on the previous seed so as not to weaken security.\n+\n+     @param seed 8 seed bytes to seed with\n+   */\n+  public void setSeed(long seed)\n+  {\n+    byte tmp[] = { (byte) (0xff & (seed >> 56)), (byte) (0xff & (seed >> 48)),\n+      (byte) (0xff & (seed >> 40)), (byte) (0xff & (seed >> 32)),\n+      (byte) (0xff & (seed >> 24)), (byte) (0xff & (seed >> 16)),\n+      (byte) (0xff & (seed >> 8)), (byte) (0xff & seed)\n+    };\n+    secureRandomSpi.engineSetSeed(tmp);\n+  }\n+\n+  /**\n+     Generates a user specified number of bytes. This function\n+     is the basis for all the random functions.\n+\n+     @param bytes array to store generated bytes in\n+   */\n+  public void nextBytes(byte[] bytes)\n+  {\n+    randomBytesUsed += bytes.length;\n+    counter++;\n+    secureRandomSpi.engineNextBytes(bytes);\n+  }\n+\n+  /**\n+     Generates an integer containing the user specified\n+     number of random bits. It is right justified and padded\n+     with zeros.\n+\n+     @param numBits number of random bits to get, 0 <= numBits <= 32;\n+\n+     @return the random bits\n+   */\n+  protected final int next(int numBits)\n+  {\n+    if (numBits == 0)\n+      return 0;\n+\n+    byte tmp[] = new byte[numBits / 8 + (1 * (numBits % 8))];\n+\n+    secureRandomSpi.engineNextBytes(tmp);\n+    randomBytesUsed += tmp.length;\n+    counter++;\n+\n+    int ret = 0;\n+\n+    for (int i = 0; i < tmp.length; i++)\n+      ret |= tmp[i] << (8 * i);\n+\n+    return ret;\n+  }\n+\n+  /**\n+     Returns the given number of seed bytes. This method is\n+     maintained only for backwards capability. \n+\n+     @param numBytes number of seed bytes to get\n+\n+     @return an array containing the seed bytes\n+   */\n+  public static byte[] getSeed(int numBytes)\n+  {\n+    byte tmp[] = new byte[numBytes];\n+\n+    new Random().nextBytes(tmp);\n+    return tmp;\n+    //return secureRandomSpi.engineGenerateSeed( numBytes );\n+  }\n+\n+  /**\n+     Returns the specified number of seed bytes.\n+\n+     @param numBytes number of seed bytes to get\n+\n+     @return an array containing the seed bytes\n+   */\n+  public byte[] generateSeed(int numBytes)\n+  {\n+    return secureRandomSpi.engineGenerateSeed(numBytes);\n+  }\n+\n }"}, {"sha": "e62144566a59f1c6fa3949c322587c3a63d65bef", "filename": "libjava/java/security/SecureRandomSpi.java", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FSecureRandomSpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FSecureRandomSpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSecureRandomSpi.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,72 @@\n+/* SecureRandomSpi.java --- Secure Random Service Provider Interface\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+import java.io.Serializable;\n+\n+/**\n+   SecureRandomSpi is the Service Provider Interface for SecureRandom\n+   providers. It provides an interface for providers to the \n+   SecureRandom engine to write their own pseudo-random number\n+   generator.\n+\n+   @since JDK 1.2       \n+\n+   @author Mark Benvenuto <ivymccough@worldnet.att.net>\n+ */\n+public abstract class SecureRandomSpi implements Serializable\n+{\n+  /**\n+     Default Constructor for SecureRandomSpi\n+   */\n+  public SecureRandomSpi()\n+  {\n+  }\n+\n+  /**\n+     Updates the seed for SecureRandomSpi but does not reset seed. \n+     It does to this so repeated called never decrease randomness.\n+   */\n+  protected abstract void engineSetSeed(byte[] seed);\n+\n+  /**\n+     Gets a user specified number of bytes depending on the length\n+     of the array?\n+\n+     @param bytes array to fill with random bytes\n+   */\n+  protected abstract void engineNextBytes(byte[] bytes);\n+\n+  /**\n+     Gets a user specified number of bytes specified by the \n+     parameter.\n+\n+     @param numBytes number of random bytes to generate\n+\n+     @return an array full of random bytes\n+   */\n+  protected abstract byte[] engineGenerateSeed(int numBytes);\n+}"}, {"sha": "c5187d80acf53c8cc45d313c90acb94af6b8435b", "filename": "libjava/java/security/Security.java", "status": "modified", "additions": 277, "deletions": 62, "changes": 339, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FSecurity.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FSecurity.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSecurity.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,107 +1,322 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Security.java --- Java base security class implmentation\n+   Copyright (C) 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n \n-package java.security;\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n+package java.security;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.FileNotFoundException;\n+import java.security.Provider;\n+import java.util.Vector;\n import java.util.Enumeration;\n import java.util.Properties;\n-import java.util.Vector;\n \n /**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date February 8, 2000.\n- */\n+   Security class that loads the Providers and provides an \n+   interface to security properties.\n \n-/**\n- * Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Still missing the deprecated getAlgorithmProperty method.\n+   @author Mark Benvenuto <ivymccough@worldnet.att.net>\n  */\n \n-public final class Security\n+public final class Security extends Object\n {\n-  public static int insertProviderAt (Provider provider, int position)\n+  private static Vector providers = new Vector();\n+  private static int providerCount = 0;\n+  private static Properties secprops;\n+\n+  static\n   {\n-    SecurityManager sm = System.getSecurityManager ();\n-    if (sm != null)\n+    loadProviders();\n+  }\n+\n+  private static void loadProviders()\n+  {\n+    String separator = System.getProperty(\"file.separator\");\n+    String secfilestr = System.getProperty(\"java.home\") +\n+      separator + \"lib\" + separator + \"security\" + separator +\n+      \"classpath.security\";\n+\n+    providerCount = 0;\n+    try\n+      {\n+\tFile secFile = new File(secfilestr);\n+\tFileInputStream fin = new FileInputStream(secFile);\n+\tsecprops = new Properties();\n+\tsecprops.load(fin);\n+\n+\tint i = 1;\n+\tString name;\n+\tStringBuffer pname = new StringBuffer(\"security.provider.\");\n+\n+\twhile ((name = secprops.getProperty(pname.append(i).toString())) !=\n+\t       null)\n+\t  {\n+\t    Exception exception = null;\n+\t    try\n+\t      {\n+\t\tproviders.addElement(Class.forName(name).newInstance());\n+\t\tproviderCount++;\n+\t\ti++;\n+\t      }\n+\t    catch (ClassNotFoundException x)\n+\t      {\n+\t        exception = x;\n+\t      }\n+\t    catch (InstantiationException x)\n+\t      {\n+\t        exception = x;\n+\t      }\n+\t    catch (IllegalAccessException x)\n+\t      {\n+\t        exception = x;\n+\t      }\n+\t    if (exception != null)\n+\t      System.err.println (\"Error loading security provider \" + name\n+\t                          + \": \" + exception);\n+\t  }\n+      }\n+    catch (FileNotFoundException ignored)\n+      {\n+        // Actually we probibly shouldn't ignore these, once the security\n+\t// properties file is actually installed somewhere.\n+      }\n+    catch (IOException ignored)\n       {\n-\t// FIXME: need SecurityPermission.\n-\t// sm.checkSecurityAccess (\"insertProvider.\" + provider.getName ());\n       }\n-    if (providers.indexOf (provider) != -1)\n-      return -1;\n-    if (position > providers.size ())\n-      position = providers.size ();\n-    providers.insertElementAt (provider, position);\n-    return providers.indexOf (provider);\n   }\n \n-  public static int addProvider (Provider provider)\n+  /**\n+     Gets a specific property for an algorithm. This is used to produce specialized\n+     algorithm parsers.\n+\n+     @deprecated it used to a return the value of a propietary property\n+     for the \"SUN\" Cryptographic Service Provider to obtain \n+     algorithm-specific parameters. Used AlogorithmParameters and \n+     KeyFactory instead.\n+\n+     @param algName name of algorithm to get property of \n+     @param propName name of property to check\n+\n+     @return a string containing the value of the property\n+   */\n+  public static String getAlgorithmProperty(String algName, String propName)\n   {\n-    return insertProviderAt (provider, providers.size ());\n+    /* TODO: Figure out what this actually does */\n+    return null;\n   }\n \n-  public static void removeProvider (String name)\n+  /**\n+     Adds a new provider at the specified position. This allows dynamic loading\n+     of providers. It will check for duplication of providers.\n+\n+     This class checks the security manager with the call checkSecurityAccess\n+     with \"insertProvider.\"+provider.getName() to see if the user can add this\n+     provider.\n+\n+     @param provider the provider to add\n+     @param position position to add the provider at\n+\n+     @return the position the provider was added at, or -1 if a duplicate provider\n+     was found\n+\n+     @throws SecurityException - if the security manager denies access to add a \n+     new provider\n+   */\n+  public static int insertProviderAt(Provider provider, int position)\n   {\n-    SecurityManager sm = System.getSecurityManager ();\n+    SecurityManager sm = System.getSecurityManager();\n     if (sm != null)\n+      sm.checkSecurityAccess(\"insertProvider.\" + provider.getName());\n+\n+    for (int i = 0; i < providerCount; i++)\n       {\n-\t// FIXME: need SecurityPermission.\n-\t// sm.checkSecurityAccess (\"removeProvider.\" + name);\n+\tif (((Provider) providers.elementAt(i)).getName() ==\n+\t    provider.getName())\n+\t  return -1;\n       }\n-    Provider p = getProvider (name);\n-    if (p != null)\n-      providers.removeElement (p);\n-  }\n \n-  public static Provider[] getProviders ()\n-  {\n-    Provider[] r = new Provider[providers.size ()];\n-    providers.copyInto (r);\n-    return r;\n+    if (position < 0)\n+        position = 0;\n+    if (position > providerCount)\n+      position = providerCount;\n+\n+    providers.insertElementAt(provider, position);\n+    providerCount++;\n+\n+    return position;\n   }\n \n-  public static Provider getProvider (String name)\n+\n+  /**\n+     Adds a new provider. This allows dynamic loading\n+     of providers. It will check for duplication of providers.\n+\n+     This method checks the security manager with the call checkSecurityAccess\n+     with \"insertProvider.\"+provider.getName() to see if the user can add this\n+     provider.\n+\n+     @param provider the provider to add\n+\n+     @return the position the provider was added at, or -1 if a duplicate provider\n+     was found\n+\n+     @throws SecurityException - if the security manager denies access to add a \n+     new provider\n+   */\n+  public static int addProvider(Provider provider)\n   {\n-    Enumeration e = providers.elements ();\n-    while (e.hasMoreElements ())\n+    SecurityManager sm = System.getSecurityManager();\n+\n+    if (sm != null)\n+      sm.checkSecurityAccess(\"insertProvider.\" + provider.getName());\n+\n+    for (int i = 0; i < providerCount; i++)\n       {\n-\tProvider p = (Provider) e.nextElement ();\n-\tif (name.equals (p.getName ()))\n-\t  return p;\n+\tif (((Provider) providers.elementAt(i)).getName() ==\n+\t    provider.getName())\n+\t  return -1;\n       }\n-    return null;\n+\n+    providers.addElement(provider);\n+    providerCount++;\n+\n+    return providerCount - 1;\n   }\n \n-  public static String getProperty (String key)\n+  /**\n+     Removes a provider. This allows dynamic unloading\n+     of providers. It will automatically shift up providers to a higher\n+     ranking. If the provider is not installed, it fails silently.\n+\n+     This method checks the security manager with the call checkSecurityAccess\n+     with \"removeProvider.\"+provider.getName() to see if the user can remove this\n+     provider.\n+\n+     @param name name of the provider to add\n+\n+     @throws SecurityException - if the security manager denies access to remove a \n+     new provider\n+   */\n+  public static void removeProvider(String name)\n   {\n-    SecurityManager sm = System.getSecurityManager ();\n+    SecurityManager sm = System.getSecurityManager();\n     if (sm != null)\n+      sm.checkSecurityAccess(\"removeProvider.\" + name);\n+\n+    Provider p = null;\n+    for (int i = 0; i < providerCount; i++)\n       {\n-\t// FIXME: need SecurityPermission.\n-\t// sm.checkSecurityAccess (\"getProperty.\" + key);\n+\tif (((Provider) providers.elementAt(i)).getName() == name)\n+\t  {\n+\t    p = (Provider) providers.elementAt(i);\n+\t    break;\n+\t  }\n       }\n-    return props.getProperty (key);\n+\n+    if (p != null)\n+      if (providers.removeElement(p))\n+\t  providerCount--;\n+\n   }\n \n-  public static void setProperty (String key, String value)\n+  /**\n+     Returns array containing all the providers. It is in the preference order \n+     of the providers.\n+\n+     @return an array of installed providers\n+   */\n+  public static Provider[] getProviders()\n   {\n-    SecurityManager sm = System.getSecurityManager ();\n-    if (sm != null)\n+    Provider array[] = new Provider[providerCount];\n+    for (int i = 0; i < providerCount; i++)\n+      array[i] = (Provider) providers.elementAt(i);\n+    return array;\n+  }\n+\n+  /**\n+     Returns the provider with the specified name. It will return null \n+     if the provider cannot be found. \n+\n+     @param name name of the requested provider\n+\n+     @return requested provider\n+   */\n+  public static Provider getProvider(String name)\n+  {\n+    Provider p = null;\n+    for (int i = 0; i < providerCount; i++)\n       {\n-\t// FIXME: need SecurityPermission.\n-\t// sm.checkSecurityAccess (\"setProperty.\" + key);\n+\tp = (Provider) providers.elementAt(i);\n+\tif (p.getName() == name)\n+\t  break;\n       }\n-    props.setProperty (key, value);\n+    return p;\n+  }\n+\n+  /**\n+     Gets the value of a security property.\n+\n+     This method checks the security manager with the call checkSecurityAccess\n+     with \"getProperty.\"+key to see if the user can get this property.\n+\n+     @param key property to get\n+\n+     @return value of the property      \n+\n+     @throws SecurityException - if the security manager denies access to \n+     getting a property\n+   */\n+  public static String getProperty(String key)\n+  {\n+    SecurityManager sm = System.getSecurityManager();\n+    if (sm != null)\n+      sm.checkSecurityAccess(\"getProperty.\" + key);\n+\n+    return secprops.getProperty(key);\n   }\n \n-  // The providers we list.\n-  private static Vector providers = new Vector ();\n \n-  // Security propertiesl\n-  private static Properties props = new Properties ();\n+  /**\n+     Sets the value of a security property.\n+\n+     This method checks the security manager with the call checkSecurityAccess\n+     with \"setProperty.\"+key to see if the user can get this property.\n+\n+     @param key property to set\n+     @param datnum new value of property\n+\n+     @throws SecurityException - if the security manager denies access to \n+     setting a property\n+   */\n+  public static void setProperty(String key, String datnum)\n+  {\n+    SecurityManager sm = System.getSecurityManager();\n+    if (sm != null)\n+      sm.checkSecurityAccess(\"setProperty.\" + key);\n+\n+    secprops.put(key, datnum);\n+  }\n }"}, {"sha": "1e95f0a813c9b1ea9600d6ec6d8b06b7c7c76237", "filename": "libjava/java/security/SecurityPermission.java", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FSecurityPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FSecurityPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSecurityPermission.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,98 @@\n+/* SecurityPermission.java -- Class for named security permissions\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+/**\n+ * This class provides a mechanism for specified named permissions \n+ * related to the Java security framework.  These permissions have no\n+ * associated actions list.  They are either granted or no granted.\n+ * <p>\n+ * The list of valid permission names is:\n+ * <p><ul>\n+ * <li>getPolicy - Allows retrieval of the system security policy.\n+ * <li>setPolicy - Allows the security policy to be changed.\n+ * <li>getProperty.&lt;key&gt; - Allows retrieval of the value of the named\n+ * property or all properties if &lt;key&gt is a '*'.\n+ * <li>setProperty.&lt;key&gt; - Allows changing of the value of the named\n+ * property or all properties if &lt;key&gt is a '*'.\n+ * <li>insertProvider.&lt;key&gt; - Allows the named provider to be added,\n+ * or any provide if the key is '*'.\n+ * <li>removeProvider.&lt;key&gt; - Allows the named provider to be removed,\n+ * or any provide if the key is '*'.\n+ * <li>setSystemScope - Allows the system identity scope to be set.\n+ * <li>setIdentityPublicKey - Allows the public key of an Identity to be set.\n+ * <li>SetIdentityInfo - Allows the description of an Identity to be set.\n+ * <li>addIdentityCertificate - Allows a certificate to be set for the public\n+ * key of an identity.\n+ * <li>removeIdentityCertificate - Allows a certificate to be removed from the \n+ * public key of an identity.\n+ * <li>clearProviderProperties.&lt;key%gt; - Allows the properties of the\n+ * named provider to be cleared, or all providers if key is '*'.\n+ * <li>putProviderProperty.&lt;key%gt; - Allows the properties of the\n+ * named provider to be changed, or all providers if key is '*'.\n+ * <li>removeProviderProperty.&lt;key%gt; - Allows the properties of the\n+ * named provider to be deleted, or all providers if key is '*'.\n+ * <li>getSignerPrivateKey - Allows the retrieval of the private key for\n+ * a signer.\n+ * <li>setSignerKeyPair - Allows the public and private key of a Signer to\n+ * be changed.\n+ * </ul>\n+ * <p>\n+ * There is some degree of security risk in granting any of these permissions.\n+ * Some of them can completely compromise system security.  Please exercise\n+ * extreme caution in granting these permissions.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public final class SecurityPermission extends BasicPermission\n+{\n+  /**\n+   * This method initializes a new instance of <code>SecurityPermission</code>\n+   * to have the specified name.\n+   *\n+   * @param name The name to assign to this permission.\n+   */\n+  public SecurityPermission(String name)\n+  {\n+    super(name);\n+  }\n+\n+  /**\n+   * This method initializes a new instance of <code>SecurityPermission</code>\n+   * to have the specified name.  The actions parameter is ignored in this\n+   * class.\n+   *\n+   * @param name The name to assign to this permission.\n+   * @param actions The action list for this permission - ignored.\n+   */\n+  public SecurityPermission(String name, String actions)\n+  {\n+    super(name, actions);\n+  }\n+}"}, {"sha": "e9ea5cc2e5d8f86f28dba96abec3e89bf241b690", "filename": "libjava/java/security/Signature.java", "status": "modified", "additions": 414, "deletions": 99, "changes": 513, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FSignature.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FSignature.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSignature.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,173 +1,488 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Signature.java --- Signature Class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n package java.security;\n+import java.security.spec.AlgorithmParameterSpec;\n \n /**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date February 11, 2000.\n- */\n+   Signature is used to provide an interface to digital signature \n+   algorithms. Digital signatures provide authentication and data \n+   integrity of digital data. \n \n-/**\n- * Written using on-line Java Platform 1.1 API Specification.\n- * Status:  Believed complete and correct to 1.1 spec.\n- * It is known not to comply with the 1.2 spec.\n- */\n+   The GNU provider provides the NIST standard DSA which uses DSA \n+   and SHA-1. It can be specified by SHA/DSA, SHA-1/DSA or its \n+   OID. If the RSA signature algorithm is provided then\n+   it could be MD2/RSA. MD5/RSA, or SHA-1/RSA. The algorithm must\n+   be specified because there is no default.\n+\n+   Signature provides implementation-independent algorithms which \n+   are requested by the user through getInstance. It can be \n+   requested by specifying just the algorithm name or by \n+   specifying both the algorithm name and provider name. \n \n-public abstract class Signature\n+   The three phases of using Signature are:\n+\n+   1. Initialing\n+\n+   * It must be initialized with a private key for \n+   signing. \n+   * It must be initialized with a public key for \n+   verifying.\n+\n+   2. Updating\n+\n+   Update the bytes for signing or verifying with calls \n+   to update.\n+\n+   3. Signing or Verify the signature on the currently stored\n+   bytes by calling sign or verify.\n+\n+   @author Mark Benvenuto <ivymccough@worldnet.att.net>\n+   @since JDK 1.1\n+ */\n+public abstract class Signature extends SignatureSpi\n {\n-  protected Signature (String name)\n+  /**\n+     Possible state variable which signifies if it has not been \n+     initialized.\n+   */\n+  protected static final int UNINITIALIZED = 1;\n+\n+  /**\n+     Possible state variable which signifies if it has been \n+     initialized for signing.\n+   */\n+  protected static final int SIGN = 2;\n+\n+  /**\n+     Possible state variable which signifies if it has been \n+     initialized for verifying.\n+   */\n+  protected static final int VERIFY = 3;\n+\n+  /**\n+     State of this Signature class.\n+   */\n+  protected int state = UNINITIALIZED;\n+\n+  private String algorithm;\n+  private Provider provider;\n+\n+  /**\n+     Creates a new signature for this algorithm.\n+\n+     @param algorithm the algorithm to use\n+   */\n+  protected Signature(String algorithm)\n   {\n+    this.algorithm = algorithm;\n     state = UNINITIALIZED;\n-    this.name = name;\n   }\n \n-  public static Signature getInstance (String algorithm)\n+  /** \n+     Gets an instance of the Signature class representing\n+     the specified signature. If the algorithm is not found then, \n+     it throws NoSuchAlgorithmException.\n+\n+     @param algorithm the name of signature algorithm to choose\n+     @return a Signature repesenting the desired algorithm\n+\n+     @throws NoSuchAlgorithmException if the algorithm is not implemented by providers\n+   */\n+  public static Signature getInstance(String algorithm)\n     throws NoSuchAlgorithmException\n   {\n     String name = \"Signature.\" + algorithm;\n-    Provider[] provs = Security.getProviders ();\n-    for (int i = 0; i < provs.length; ++i)\n+    Provider[] p = Security.getProviders();\n+\n+    for (int i = 0; i < p.length; i++)\n       {\n-\tString val = provs[i].getProperty (name);\n-\tif (val != null)\n-\t  {\n-\t    try\n-\t      {\n-\t\treturn (Signature) Class.forName(val).newInstance ();\n-\t      }\n-\t    catch (Throwable _)\n-\t      {\n-\t\t// We just ignore failures.\n-\t      }\n-\t  }\n+\tString classname = p[i].getProperty(name);\n+\tif (classname != null)\n+\t  return getInstance(classname, algorithm, p[i]);\n       }\n \n-    throw new NoSuchAlgorithmException (algorithm);\n+    throw new NoSuchAlgorithmException(algorithm);\n   }\n \n-  public static Signature getInstance (String algorithm, String provider)\n+  /** \n+     Gets an instance of the Signature class representing\n+     the specified signature from the specified provider. If the \n+     algorithm is not found then, it throws NoSuchAlgorithmException.\n+     If the provider is not found, then it throws\n+     NoSuchProviderException.\n+\n+     @param algorithm the name of signature algorithm to choose\n+     @param provider the name of the provider to find the algorithm in\n+     @return a Signature repesenting the desired algorithm\n+\n+     @throws NoSuchAlgorithmException if the algorithm is not implemented by the provider\n+     @throws NoSuchProviderException if the provider is not found\n+   */\n+  public static Signature getInstance(String algorithm, String provider)\n     throws NoSuchAlgorithmException, NoSuchProviderException\n   {\n-    String name = \"Signature.\" + algorithm;\n-    Provider p = Security.getProvider (provider);\n+    Provider p = Security.getProvider(provider);\n     if (p == null)\n-      throw new NoSuchProviderException (provider);\n-    String val = p.getProperty (name);\n-    if (val != null)\n+      throw new NoSuchProviderException();\n+\n+    return getInstance(p.getProperty(\"Signature.\" + algorithm), algorithm, p);\n+  }\n+\n+  private static Signature getInstance(String classname,\n+\t\t\t\t       String algorithm,\n+\t\t\t\t       Provider provider)\n+    throws NoSuchAlgorithmException\n+  {\n+    try\n       {\n-\ttry\n-\t  {\n-\t    return (Signature) Class.forName(val).newInstance ();\n-\t  }\n-\tcatch (Throwable _)\n+\tObject o = Class.forName(classname).newInstance();\n+\tSignature sig;\n+\tif (o instanceof SignatureSpi)\n+\t  sig = (Signature) (new DummySignature((SignatureSpi) o, algorithm));\n+\telse\n \t  {\n-\t    // Nothing.\n+\t    sig = (Signature) o;\n+\t    sig.algorithm = algorithm;\n \t  }\n+\n+\tsig.provider = provider;\n+\treturn sig;\n+      }\n+    catch (ClassNotFoundException cnfe)\n+      {\n+\tthrow new NoSuchAlgorithmException(\"Class not found\");\n+      }\n+    catch (InstantiationException ie)\n+      {\n+\tthrow new NoSuchAlgorithmException(\"Class instantiation failed\");\n+      }\n+    catch (IllegalAccessException iae)\n+      {\n+\tthrow new NoSuchAlgorithmException(\"Illegal Access\");\n       }\n+  }\n+\n+  /**\n+     Gets the provider that the Signature is from.\n+\n+     @return the provider the this Signature \n+   */\n+  public final Provider getProvider()\n+  {\n+    return provider;\n+  }\n+\n+  /**\n+     Initializes this class with the public key for \n+     verification purposes.\n+\n+     @param publicKey the public key to verify with\n \n-    throw new NoSuchAlgorithmException (algorithm);\n+     @throws InvalidKeyException invalid key\n+   */\n+  public final void initVerify(PublicKey publicKey) throws InvalidKeyException\n+  {\n+    state = VERIFY;\n+    engineInitVerify(publicKey);\n   }\n \n-  public final void initVerify (PublicKey publicKey)\n+  /**\n+     Verify Signature with a certificate. This is a FIPS 140-1 compatible method\n+     since it verifies a signature with a certificate.\n+\n+     If the certificate is an X.509 certificate, has a KeyUsage parameter and\n+     the parameter indicates this key is not to be used for signing then an \n+     error is returned.\n+\n+     @param certificate a certificate containing a public key to verify with\n+   */\n+  public final void initVerify(java.security.cert.Certificate certificate)\n     throws InvalidKeyException\n   {\n-    engineInitVerify (publicKey);\n+    state = VERIFY;\n+    if (certificate.getType().equals(\"X509\"))\n+      {\n+\tjava.security.cert.X509Certificate cert =\n+\t  (java.security.cert.X509Certificate) certificate;\n+\n+\tboolean[]array = cert.getKeyUsage();\n+\tif (array != null && array[0] == false)\n+\t  throw new InvalidKeyException\n+\t    (\"KeyUsage of this Certificate indicates it cannot be used for digital signing\");\n+      }\n+    this.initVerify(certificate.getPublicKey());\n   }\n \n-  public final void initSign (PrivateKey privateKey)\n+  /**\n+     Initializes this class with the private key for \n+     signing purposes.\n+\n+     @param privateKey the private key to sign with\n+\n+     @throws InvalidKeyException invalid key\n+   */\n+  public final void initSign(PrivateKey privateKey) throws InvalidKeyException\n+  {\n+    state = SIGN;\n+    engineInitSign(privateKey);\n+  }\n+\n+  /**\n+     Initializes this class with the private key and source \n+     of randomness for signing purposes.\n+\n+     @param privateKey the private key to sign with\n+     @param random Source of randomness\n+\n+     @throws InvalidKeyException invalid key\n+\n+     @since JDK 1.2\n+   */\n+  public final void initSign(PrivateKey privateKey, SecureRandom random)\n     throws InvalidKeyException\n   {\n-    engineInitSign (privateKey);\n+    state = SIGN;\n+    engineInitSign(privateKey, random);\n   }\n \n-  public final byte[] sign ()\n-    throws SignatureException\n+\n+  /**\n+     Returns the signature bytes of all the data fed to this class.\n+     The format of the output depends on the underlying signature\n+     algorithm.\n+\n+     @return the signature\n+\n+     @throws SignatureException engine not properly initialized\n+   */\n+  public final byte[] sign() throws SignatureException\n   {\n-    return engineSign ();\n+    if (state == SIGN)\n+      {\n+\tstate = UNINITIALIZED;\n+\treturn engineSign();\n+      }\n+    else\n+      throw new SignatureException();\n   }\n \n-  public final boolean verify (byte[] signature)\n+  /**\n+     Generates signature bytes of all the data fed to this class \n+     and outputs it to the passed array. The format of the \n+     output depends on the underlying signature algorithm.\n+\n+     After calling this method, the signature is reset to its\n+     initial state and can be used to generate additional\n+     signatures.\n+\n+     @param outbuff array of bytes\n+     @param offset the offset to start at in the array\n+     @param len the length of the bytes to put into the array. \n+     Neither this method or the GNU provider will \n+     return partial digests. If len is less than the \n+     signature length, this method will throw \n+     SignatureException. If it is greater than or equal\n+     then it is ignored.\n+\n+     @return number of bytes in outbuf\n+\n+     @throws SignatureException engine not properly initialized\n+\n+     @since JDK 1.2\n+   */\n+  public final int sign(byte[]outbuf, int offset, int len)\n     throws SignatureException\n   {\n-    return engineVerify (signature);\n+    if (state == SIGN)\n+      {\n+\tstate = UNINITIALIZED;\n+\treturn engineSign(outbuf, offset, len);\n+      }\n+    else\n+      throw new SignatureException();\n   }\n \n-  public final void update (byte b)\n-    throws SignatureException\n+  /**\n+     Verifies the passed signature.\n+\n+     @param signature the signature bytes to verify\n+\n+     @return true if verified, false otherwise\n+\n+     @throws SignatureException engine not properly initialized\n+     or wrong signature\n+   */\n+  public final boolean verify(byte[]signature) throws SignatureException\n   {\n-    engineUpdate (b);\n+    if (state == VERIFY)\n+      {\n+\tstate = UNINITIALIZED;\n+\treturn engineVerify(signature);\n+      }\n+    else\n+      throw new SignatureException();\n   }\n \n-  public final void update (byte[] data)\n-    throws SignatureException\n+  /**\n+     Updates the data to be signed or verified with the specified \n+     byte.\n+\n+     @param b byte to update with\n+\n+     @throws SignatureException Engine not properly initialized\n+   */\n+  public final void update(byte b) throws SignatureException\n   {\n-    engineUpdate (data, 0, data.length);\n+    if (state != UNINITIALIZED)\n+      engineUpdate(b);\n+    else\n+      throw new SignatureException();\n   }\n \n-  public final void update (byte[] data, int off, int len)\n+  /**\n+     Updates the data to be signed or verified with the specified \n+     bytes.\n+\n+     @param data array of bytes\n+\n+     @throws SignatureException engine not properly initialized\n+   */\n+  public final void update(byte[]data) throws SignatureException\n+  {\n+    if (state != UNINITIALIZED)\n+      engineUpdate(data, 0, data.length);\n+    else\n+      throw new SignatureException();\n+  }\n+\n+  /**\n+     Updates the data to be signed or verified with the specified \n+     bytes.\n+\n+     @param data array of bytes\n+     @param off the offset to start at in the array\n+     @param len the length of the bytes to use in the array\n+\n+     @throws SignatureException engine not properly initialized\n+   */\n+  public final void update(byte[]data, int off, int len)\n     throws SignatureException\n   {\n-    engineUpdate (data, off, len);\n+    if (state != UNINITIALIZED)\n+      engineUpdate(data, off, len);\n+    else\n+      throw new SignatureException();\n   }\n \n-  public final String getAlgorithm ()\n+  /** \n+     Gets the name of the algorithm currently used.\n+     The names of algorithms are usually SHA/DSA or SHA/RSA.\n+\n+     @return name of algorithm.\n+   */\n+  public final String getAlgorithm()\n   {\n-    return name;\n+    return algorithm;\n   }\n \n-  public String toString ()\n+  /**\n+     Returns a representation of the Signature as a String\n+\n+     @return a string representing the signature\n+   */\n+  public String toString()\n   {\n-    // There is no spec for this.  FIXME: this is a bad choice.\n-    return name + \"; state = \" + state;\n+    return (algorithm + \" Signature\");\n   }\n \n-  public final void setParameter (String param, Object value)\n+  /**\n+     Sets the specified algorithm parameter to the specified value.\n+\n+     @param param parameter name\n+     @param value parameter value\n+\n+     @throws InvalidParameterException invalid parameter, parameter \n+     already set and cannot set again, a security exception, \n+     etc.\n+\n+     @deprecated use the other setParameter\n+   */\n+  public final void setParameter(String param, Object value)\n     throws InvalidParameterException\n   {\n-    engineSetParameter (param, value);\n+    engineSetParameter(param, value);\n   }\n \n-  public final Object getParameter (String param)\n-    throws InvalidParameterException\n+  /**\n+     Sets the signature engine with the specified \n+     AlgorithmParameterSpec;\n+\n+     By default this always throws UnsupportedOperationException \n+     if not overridden;\n+\n+     @param params the parameters\n+\n+     @throws InvalidParameterException invalid parameter, parameter \n+     already set and cannot set again, a security exception, \n+     etc.\n+   */\n+  public final void setParameter(AlgorithmParameterSpec params)\n+    throws InvalidAlgorithmParameterException\n   {\n-    return engineGetParameter (param);\n-  }\n-\n-  protected abstract void engineInitVerify (PublicKey publicKey)\n-    throws InvalidKeyException;\n-  protected abstract void engineInitSign (PrivateKey privateKey)\n-    throws InvalidKeyException;\n-  protected abstract void engineUpdate (byte b)\n-    throws SignatureException;\n-  protected abstract void engineUpdate (byte[] b, int off, int len)\n-    throws SignatureException;\n-  protected abstract byte[] engineSign ()\n-    throws SignatureException;\n-  protected abstract boolean engineVerify (byte[] sigBytes)\n-    throws SignatureException;\n-  protected abstract void engineSetParameter (String param, Object value)\n-    throws InvalidParameterException;\n-  protected abstract Object engineGetParameter (String param)\n-    throws InvalidParameterException;\n+    engineSetParameter(params);\n+  }\n \n-  public Object clone() throws CloneNotSupportedException\n+  /**\n+     Gets the value for the specified algorithm parameter.\n+\n+     @param param parameter name\n+\n+     @return parameter value\n+\n+     @throws InvalidParameterException invalid parameter\n+\n+     @deprecated use the other getParameter\n+   */\n+  public final Object getParameter(String param)\n+    throws InvalidParameterException\n   {\n-    return super.clone ();\n+    return engineGetParameter(param);\n   }\n \n-  protected static final int UNINITIALIZED = 0;\n-  protected static final int SIGN          = 2;\n-  protected static final int VERIFY        = 3;\n+  /**\n+     Returns a clone if cloneable.\n \n-  // Current state.\n-  protected int state;\n+     @return a clone if cloneable.\n \n-  // Name of this object.\n-  private String name;\n+     @throws CloneNotSupportedException if the implementation does \n+     not support cloning\n+   */\n+  public Object clone() throws CloneNotSupportedException\n+  {\n+    throw new CloneNotSupportedException();\n+  }\n }"}, {"sha": "449b75ff1fff2f45103adb71285cbb8e40c3f202", "filename": "libjava/java/security/SignatureException.java", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FSignatureException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FSignatureException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSignatureException.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,30 +1,54 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* SignatureException.java -- Generic error in signature\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n \n-package java.security;\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 1, 2000.\n- */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n \n /**\n- * Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n+ * This exception is thrown when a problem is encountered with a\n+ * digital signature.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n-\n public class SignatureException extends GeneralSecurityException\n {\n+  /**\n+   * This method initializes a new instance of <code>SignatureException</code>\n+   * with no descriptive error message.\n+   */\n   public SignatureException()\n   {\n     super();\n   }\n \n+  /**\n+   * This method initializes a new instance of <code>SignatureException</code>\n+   * with a descriptive error message.\n+   */\n   public SignatureException(String msg)\n   {\n     super(msg);"}, {"sha": "17719a56a2c58046e4156f88ccdb10dad0248630", "filename": "libjava/java/security/SignatureSpi.java", "status": "added", "additions": 243, "deletions": 0, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FSignatureSpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FSignatureSpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSignatureSpi.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,243 @@\n+/* SignatureSpi.java --- Signature Service Provider Interface\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+/**\n+   SignatureSpi defines the Service Provider Interface (SPI)\n+   for the Signature class. The signature class provides an \n+   interface to a digital signature algorithm. Digital signatures\n+   are used for authentication and integrity of data.\n+\n+   @author Mark Benvenuto <ivymccough@worldnet.att.net>\n+\n+   @since JDK 1.2\n+ */\n+public abstract class SignatureSpi\n+{\n+  /**\n+     Source of randomness\n+   */\n+  protected SecureRandom appRandom;\n+\n+  /**\n+     Creates a new instance of SignatureSpi.\n+   */\n+  public SignatureSpi()\n+  {\n+    appRandom = null;\n+  }\n+\n+  /**\n+     Initializes this class with the public key for \n+     verification purposes.\n+\n+     @param publicKey the public key to verify with\n+\n+     @throws InvalidKeyException invalid key\n+   */\n+  protected abstract void engineInitVerify(PublicKey publicKey)\n+    throws InvalidKeyException;\n+\n+  /**\n+     Initializes this class with the private key for \n+     signing purposes.\n+\n+     @param privateKey the private key to sign with\n+\n+     @throws InvalidKeyException invalid key\n+   */\n+  protected abstract void engineInitSign(PrivateKey privateKey)\n+    throws InvalidKeyException;\n+\n+  /**\n+     Initializes this class with the private key and source \n+     of randomness for signing purposes.\n+\n+     This cannot be abstract backward compatibility reasons\n+\n+     @param privateKey the private key to sign with\n+     @param random Source of randomness\n+\n+     @throws InvalidKeyException invalid key\n+\n+     @since JDK 1.2\n+   */\n+  protected void engineInitSign(PrivateKey privateKey, SecureRandom random)\n+    throws InvalidKeyException\n+  {\n+    appRandom = random;\n+    engineInitSign(privateKey);\n+  }\n+\n+  /**\n+     Updates the data to be signed or verified with the specified \n+     byte.\n+\n+     @param b byte to update with\n+\n+     @throws SignatureException Engine not properly initialized\n+   */\n+  protected abstract void engineUpdate(byte b) throws SignatureException;\n+\n+  /**\n+     Updates the data to be signed or verified with the specified \n+     bytes.\n+\n+     @param b array of bytes\n+     @param off the offset to start at in the array\n+     @param len the length of the bytes to use in the array\n+\n+     @throws SignatureException engine not properly initialized\n+   */\n+  protected abstract void engineUpdate(byte[] b, int off, int len)\n+    throws SignatureException;\n+\n+  /**\n+     Returns the signature bytes of all the data fed to this class.\n+     The format of the output depends on the underlying signature\n+     algorithm.\n+\n+     @return the signature\n+\n+     @throws SignatureException engine not properly initialized\n+   */\n+  protected abstract byte[] engineSign() throws SignatureException;\n+\n+  /**\n+     Generates signature bytes of all the data fed to this class \n+     and outputs it to the passed array. The format of the \n+     output depends on the underlying signature algorithm.\n+\n+     This cannot be abstract backward compatibility reasons.\n+     After calling this method, the signature is reset to its\n+     initial state and can be used to generate additional\n+     signatures.\n+\n+     @param outbuff array of bytes\n+     @param offset the offset to start at in the array\n+     @param len the length of the bytes to put into the array. \n+     Neither this method or the GNU provider will \n+     return partial digests. If len is less than the \n+     signature length, this method will throw \n+     SignatureException. If it is greater than or equal\n+     then it is ignored.\n+\n+     @return number of bytes in outbuf\n+\n+     @throws SignatureException engine not properly initialized\n+\n+     @since JDK 1.2\n+   */\n+  protected int engineSign(byte[] outbuf, int offset, int len)\n+    throws SignatureException\n+  {\n+    byte tmp[] = engineSign();\n+\n+    if (tmp.length > len)\n+      throw new SignatureException(\"Invalid Length\");\n+\n+    System.arraycopy(outbuf, offset, tmp, 0, tmp.length);\n+\n+    return tmp.length;\n+  }\n+\n+  /**\n+     Verifies the passed signature.\n+\n+     @param sigBytes the signature bytes to verify\n+\n+     @return true if verified, false otherwise\n+\n+     @throws SignatureException engine not properly initialized\n+     or wrong signature\n+   */\n+  protected abstract boolean engineVerify(byte[] sigBytes)\n+    throws SignatureException;\n+\n+  /**\n+     Sets the specified algorithm parameter to the specified value.\n+\n+     @param param parameter name\n+     @param value parameter value\n+\n+     @throws InvalidParameterException invalid parameter, parameter \n+     already set and cannot set again, a security exception, \n+     etc.\n+\n+     @deprecated use the other setParameter\n+   */\n+  protected abstract void engineSetParameter(String param, Object value)\n+    throws InvalidParameterException;\n+\n+  /**\n+     Sets the signature engine with the specified \n+     AlgorithmParameterSpec;\n+\n+     This cannot be abstract backward compatibility reasons\n+     By default this always throws UnsupportedOperationException \n+     if not overridden;\n+\n+     @param params the parameters\n+\n+     @throws InvalidParameterException invalid parameter, parameter \n+     already set and cannot set again, a security exception, \n+     etc.\n+   */\n+  protected void engineSetParameter(AlgorithmParameterSpec params)\n+    throws InvalidAlgorithmParameterException\n+  {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  /**\n+     Gets the value for the specified algorithm parameter.\n+\n+     @param param parameter name\n+\n+     @return parameter value\n+\n+     @throws InvalidParameterException invalid parameter\n+\n+     @deprecated use the other getParameter\n+   */\n+  protected abstract Object engineGetParameter(String param)\n+    throws InvalidParameterException;\n+\n+  /**\n+     Returns a clone if cloneable.\n+\n+     @return a clone if cloneable.\n+\n+     @throws CloneNotSupportedException if the implementation does \n+     not support cloning\n+   */\n+  public Object clone() throws CloneNotSupportedException\n+  {\n+    throw new CloneNotSupportedException();\n+  }\n+}"}, {"sha": "34f80e96706e8f00090c97328e631637d3e73df6", "filename": "libjava/java/security/SignedObject.java", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FSignedObject.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FSignedObject.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSignedObject.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,166 @@\n+/* SignedObject.java --- Signed Object Class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+/**\n+   SignedObject is used for storing rutime objects whose integrity\n+   cannot be compromised without being detected.\n+\n+   SignedObject contains a Serializable object which is yet to be \n+   signed and its signature.\n+\n+   The signed copy is a \"deep copy\" (in serialized form) of the \n+   original object. Any changes to the original will not affect \n+   the original.\n+\n+   Several things to note are that, first there is no need to \n+   initialize the signature engine as this class will handle that \n+   automatically. Second, verification will only succeed if the\n+   public key corresponds to the private key used to generate \n+   the SignedObject.\n+\n+   For fexibility, the signature engine can be specified in the \n+   constructor or the verify method. The programmer who writes \n+   code that verifies the SignedObject has not changed should be \n+   aware of the Signature engine they use. A malicious Signature \n+   may choose to always return true on verification and \n+   bypass the secrity check.\n+\n+   The GNU provider provides the NIST standard DSA which uses DSA \n+   and SHA-1. It can be specified by SHA/DSA, SHA-1/DSA or its \n+   OID. If the RSA signature algorithm is provided then\n+   it could be MD2/RSA. MD5/RSA, or SHA-1/RSA. The algorithm must\n+   be specified because there is no default.\n+\n+   @author Mark Benvenuto <ivymccough@worldnet.att.net>\n+\n+   @since JDK 1.2\n+ */\n+public final class SignedObject implements Serializable\n+{\n+  private byte[] content;\n+  private byte[] signature;\n+  private String thealgorithm;\n+\n+  /**\n+     Constructs a new SignedObject from a Serializeable object. The \n+     object is signed with private key and signature engine\n+\n+     @param object the object to sign\n+     @param signingKey the key to sign with\n+     @param signingEngine the signature engine to use\n+\n+     @throws IOException serialization error occured\n+     @throws InvalidKeyException invalid key\n+     @throws SignatureException signing error\n+   */\n+  public SignedObject(Serializable object, PrivateKey signingKey,\n+\t\t      Signature signingEngine) throws IOException,\n+    InvalidKeyException, SignatureException\n+  {\n+    thealgorithm = signingEngine.getAlgorithm();\n+\n+    ByteArrayOutputStream ostream = new ByteArrayOutputStream();\n+    ObjectOutputStream p = new ObjectOutputStream(ostream);\n+    p.writeObject(object);\n+    p.flush();\n+\n+    content = ostream.toByteArray();\n+\n+    signingEngine.initSign(signingKey);\n+    signingEngine.update(content);\n+    signature = signingEngine.sign();\n+  }\n+\n+  /**\n+     Returns the encapsulated object. The object is \n+     de-serialized before being returned.\n+\n+     @return the encapsulated object\n+\n+     @throws IOException de-serialization error occured\n+     @throws ClassNotFoundException de-serialization error occured\n+   */\n+  public Object getObject() throws IOException, ClassNotFoundException\n+  {\n+    ByteArrayInputStream istream = new ByteArrayInputStream(content);\n+\n+    return new ObjectInputStream(istream).readObject();\n+  }\n+\n+  /**\n+     Returns the signature of the encapsulated object.\n+\n+     @return a byte array containing the signature\n+   */\n+  public byte[] getSignature()\n+  {\n+    return signature;\n+  }\n+\n+  /**\n+     Returns the name of the signature algorithm.\n+\n+     @return the name of the signature algorithm.\n+   */\n+  public String getAlgorithm()\n+  {\n+    return thealgorithm;\n+  }\n+\n+  /**\n+     Verifies the SignedObject by checking that the signature that \n+     this class contains for the encapsulated object.\n+\n+     @param verificationKey the public key to use\n+     @param verificationEngine the signature engine to use\n+\n+     @return true if signature is correct, false otherwise\n+\n+     @throws InvalidKeyException invalid key\n+     @throws SignatureException signature verification failed\n+   */\n+  public boolean verify(PublicKey verificationKey,\n+\t\t\tSignature verificationEngine) throws\n+    InvalidKeyException, SignatureException\n+  {\n+    verificationEngine.initVerify(verificationKey);\n+    verificationEngine.update(content);\n+    return verificationEngine.verify(signature);\n+  }\n+\n+  //     readObject is called to restore the state of the SignedObject from a\n+  //     stream.\n+  //private void readObject(ObjectInputStream s)\n+  //                 throws IOException, ClassNotFoundException\n+}"}, {"sha": "9ba62c5424dd6a3fc74cd31d8d4a27dd7cf536a6", "filename": "libjava/java/security/Signer.java", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FSigner.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FSigner.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSigner.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,142 @@\n+/* Signer.java --- Signer Class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+/**\n+   Signer is a subclass used to store a digital signature key with \n+   an Identity.\n+\n+   @author Mark Benvenuto <ivymccough@worldnet.att.net>\n+\n+   @since JDK 1.1\n+ */\n+public abstract class Signer extends Identity\n+{\n+  private PrivateKey privateKey = null;\n+\n+  /**\n+     Constructs a new Signer.\n+   */\n+  protected Signer()\n+  {\n+  }\n+\n+  /**\n+     Constructs a new Signer with the specified name.\n+\n+     @param name the name of the identity.\n+   */\n+  public Signer(String name)\n+  {\n+    super(name);\n+  }\n+\n+  /**\n+     Constructs a new Signer with the specifid name and \n+     IdentityScope.\n+\n+     @param name the name of the identity.\n+     @scope the IdentityScope to use\n+\n+     @throws KeyManagementException if duplicate identity name \n+     within scope\n+   */\n+  public Signer(String name, IdentityScope scope)\n+    throws KeyManagementException\n+  {\n+    super(name, scope);\n+  }\n+\n+  /**\n+     Returns the private key for this signer.\n+\n+     This class checks the security manager with the call \n+     checkSecurityAccess with \"getSignerPrivateKey\".\n+\n+     @returns the private key for the signer\n+\n+     @throws SecurityException - if the security manager denies \n+     access to \"getSignerPrivateKey\"\n+   */\n+  public PrivateKey getPrivateKey()\n+  {\n+    SecurityManager sm = System.getSecurityManager();\n+    if (sm != null)\n+      sm.checkSecurityAccess(\"getSignerPrivateKey\");\n+\n+    return privateKey;\n+  }\n+\n+  /**\n+     Specifies the KeyPair associated with this Signer.\n+\n+     This class checks the security manager with the call \n+     checkSecurityAccess with \"setSignerKeyPair\".\n+\n+     @param pair the keyPair\n+\n+     @throws InvalidParameterException invalidly intialized key pair\n+     @throws KeyException another key error\n+     @throws SecurityException - if the security manager denies \n+     access to \"getSignerPrivateKey\"\n+   */\n+  public final void setKeyPair(KeyPair pair)\n+    throws InvalidParameterException, KeyException\n+  {\n+    SecurityManager sm = System.getSecurityManager();\n+    if (sm != null)\n+      sm.checkSecurityAccess(\"setSignerKeyPair\");\n+\n+    try\n+      {\n+\tif (pair.getPublic() != null)\n+\t  setPublicKey(pair.getPublic());\n+\telse\n+\t  throw new InvalidParameterException();\n+\n+      }\n+    catch (KeyManagementException kme)\n+      {\n+\tthrow new KeyException();\n+      }\n+\n+    if (pair.getPrivate() != null)\n+        privateKey = pair.getPrivate();\n+    else\n+      throw new InvalidParameterException();\n+  }\n+\n+  /**\n+     Returns a string representing this Signer.\n+\n+     @returns a string representing this Signer.\n+   */\n+  public String toString()\n+  {\n+    return (getName() + \": \" + privateKey);\n+  }\n+}"}, {"sha": "eae616a5af69db1262d5fe5fb04f0578f77b55e5", "filename": "libjava/java/security/UnrecoverableKeyException.java", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FUnrecoverableKeyException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FUnrecoverableKeyException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FUnrecoverableKeyException.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,58 @@\n+/* UnrecoverableKeyException.java -- Cannot recover a key from the key store\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+/**\n+ * This exception is thrown when a key cannot be recovered from the key\n+ * store.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public class UnrecoverableKeyException extends GeneralSecurityException\n+{\n+  /**\n+   * This method initializes a new instance of <code>UnrecoverableKeyException</code>\n+   * with no descriptive error message.\n+   */\n+  public UnrecoverableKeyException()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * This method initializes a new instance of <code>UnrecoverableKeyException</code>\n+   * with a descriptive error message.\n+   *\n+   * @param msg The descriptive error message.\n+   */\n+  public UnrecoverableKeyException(String msg)\n+  {\n+    super(msg);\n+  }\n+}"}, {"sha": "f77ed627e67a3fd86432e2cac6a1b4f1b0addb6f", "filename": "libjava/java/security/UnresolvedPermission.java", "status": "added", "additions": 184, "deletions": 0, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FUnresolvedPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2FUnresolvedPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FUnresolvedPermission.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,184 @@\n+/* UnresolvedPermission.java -- Placeholder for unresolved permissions.\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * This class is used to hold instances of all permissions that cannot\n+ * be resolved to available permission classes when the security \n+ * <code>Policy</code> object is instantiated.  This may happen when the\n+ * necessary security class has not yet been downloaded from the network.\n+ * <p>\n+ * Instances of this class are re-resolved when <code>AccessController</code>\n+ * check is done.  At that time, a scan is made of all existing\n+ * <code>UnresolvedPermission</code> objects and they are converted to\n+ * objects of the appropriate permission type if the class for that type\n+ * is then available.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public class UnresolvedPermission extends Permission implements Serializable\n+{\n+\n+  /**\n+   * The list of actions associated with this permission object\n+   */\n+  private String actions;\n+\n+  /**\n+   * The list of <code>Certificates</code> associated with this object\n+   */\n+  private Certificate[] certs;\n+\n+  /**\n+   * The name of the class this object should be resolved to.\n+   */\n+  private String type;\n+\n+  /**\n+   * This method initializes a new instance of <code>UnresolvedPermission</code>\n+   * with all the information necessary to resolve it to an instance of the\n+   * proper class at a future time.\n+   *\n+   * @param type The name of the desired class this permission should be resolved to\n+   * @param name The name of this permission\n+   * @param actions The action list for this permission\n+   * @param certs The list of certificates this permission's class was signed with\n+   */\n+  public UnresolvedPermission(String type, String name, String actions,\n+\t\t\t      Certificate[] certs)\n+  {\n+    super(name);\n+\n+    this.type = type;\n+    this.actions = actions;\n+    this.certs = certs;\n+  }\n+\n+  /**\n+   * This method returns the list of actions associated with this\n+   * permission.\n+   *\n+   * @return The action list\n+   */\n+  public String getActions()\n+  {\n+    return (actions);\n+  }\n+\n+  /**\n+   * This method returns <code>false</code> always to indicate that this\n+   * permission does not imply the specified permission.  An \n+   * <code>UnresolvedPermission</code> never grants any permissions.\n+   *\n+   * @param perm The <code>Permission</code> object to test against - ignored by this class\n+   *\n+   * @return <code>false</code> to indicate this permission does not imply the specified permission.\n+   */\n+  public boolean implies(Permission perm)\n+  {\n+    return (false);\n+  }\n+\n+  /**\n+   * This method tests this permission for equality against the specified\n+   * <code>Object</code>.  This will be true if and only if the following\n+   * conditions are met:\n+   * <p>\n+   * <ul>\n+   * <li>The specified <code>Object</code> is an instance of \n+   * <code>UnresolvedPermission</code>, or a subclass.\n+   * <li>The specified permission has the same type (i.e., desired class name)\n+   * as this permission.\n+   * <li>The specified permission has the same name as this one.\n+   * <li>The specified permissoin has the same action list as this one.\n+   * <li>The specified permission has the same certificate list as this one.\n+   * </ul>\n+   *\n+   * @param obj The <code>Object</code> to test for equality\n+   *\n+   * @return <code>true</code> if the specified object is equal to this one, <code>false</code> otherwise.\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if (!(obj instanceof UnresolvedPermission))\n+      return (false);\n+\n+    UnresolvedPermission up = (UnresolvedPermission) obj;\n+\n+    if (!getName().equals(up.getName()))\n+      return (false);\n+\n+    if (!getActions().equals(up.getActions()))\n+      return (false);\n+\n+    if (!type.equals(up.type))\n+      return (false);\n+\n+    if (!certs.equals(up.certs))\n+      return (false);\n+\n+    return (true);\n+  }\n+\n+  /**\n+   * Returns a hash code value for this object.\n+   *\n+   * @return A hash value\n+   */\n+  public int hashCode()\n+  {\n+    return (System.identityHashCode(this));\n+  }\n+\n+  /**\n+   * This method returns a <code>String</code> representation of this\n+   * class.  The format is: '(unresolved \"ClassName \"name\" \"actions\")'\n+   *\n+   * @return A <code>String</code> representation of this object\n+   */\n+  public String toString()\n+  {\n+    return \"(unresolved \" + type + \" \" + getName() + \" \" + getActions() + \")\";\n+  }\n+\n+  /**\n+   * This class returns a <code>PermissionCollection</code> object that can\n+   * be used to store instances of <code>UnresolvedPermission</code>.  If\n+   * <code>null</code> is returned, the caller is free to use any desired\n+   * <code>PermissionCollection</code>.\n+   *\n+   * @return A new <code>PermissionCollection</code>.\n+   */\n+  public PermissionCollection newPermissionCollection()\n+  {\n+    return (null);\n+  }\n+}"}, {"sha": "e5a3e088faa22f935adcbe75ea70032642538938", "filename": "libjava/java/security/acl/Acl.java", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Facl%2FAcl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Facl%2FAcl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Facl%2FAcl.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,138 @@\n+/* Acl.java -- An access control list\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security.acl;\n+\n+import java.security.Principal;\n+import java.util.Enumeration;\n+\n+/**\n+ * A Java access control list (ACL) is a group of individual ACL entries.\n+ * These entries consist of a <code>Principal</code> and a list of\n+ * permissions this <code>Principal</code> is either granted or denied.\n+ * A given <code>Principal</code> can have at most one positive ACL entry\n+ * (i.e., one that grants permissions) and one negative ACL entry (i.e., one\n+ * that denies permissions).  If a given permission is both granted and\n+ * denied, the ACL treats it as if it were never granted or denied.  If\n+ * both a <code>Principal</code> and a <code>Group</code> to which the\n+ * <code>Principal</code> belongs have an ACL entry, the permissions for\n+ * the individual <code>Principal</code> take precedence over the \n+ * permissions of the <code>Group</code> if there is a conflict.\n+ * <p\n+ * Additionally, the ACL interface extends the <code>Owner</code> interface\n+ * and so an ACL has owners.  Actions which modify the ACL are restricted\n+ * to owners.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public interface Acl extends Owner\n+{\n+\n+  /**\n+   * This method returns the name of this ACL.\n+   *\n+   * @return The name of this ACL\n+   */\n+  public abstract String getName();\n+\n+  /**\n+   * This method sets the name of the ACL\n+   *\n+   * @param caller The <code>Principal</code> requesting the action.\n+   * @param name The new name for this ACL.\n+   *\n+   * @exception NotOwnerException If the caller is not an owner of this ACL.\n+   */\n+  public abstract void setName(Principal caller, String name)\n+    throws NotOwnerException;\n+\n+  /**\n+   * This method adds the specified entry to the ACL\n+   *\n+   * @param caller The <code>Principal</code> requesting the addition\n+   * @param entry The ACL entry to add\n+   *\n+   * @return <code>true</code> if the entry was added, <code>false</code> if there is already an entry of the same type for the <code>Principal</code>.\n+   *\n+   * @exception NotOwnerException If the caller is not an owner of this ACL.\n+   */\n+  public abstract boolean addEntry(Principal caller, AclEntry entry) \n+    throws NotOwnerException;\n+\n+  /**\n+   * This method delets the specified entry from the ACL\n+   *\n+   * @param caller The <code>Principal</code> requesting the deletion.\n+   * @param entry The ACL entry to delete\n+   *\n+   * @return <code>true</code> if the entry was deleted, or <code>false</code> if this entry was not part of the ACL to begin with\n+   *\n+   * @exception NotOwnerException If the caller is not an owner of this ACL.\n+   */\n+  public abstract boolean removeEntry(Principal caller, AclEntry entry)\n+    throws NotOwnerException;\n+\n+  /**\n+   * This method returns a list of all the entries in the ACL as an\n+   * <code>Enumeration</code>.\n+   *\n+   * @return An enumeration of the ACL entries\n+   */\n+  public abstract Enumeration entries();\n+\n+  /**\n+   * This method tests whether or not the specified <code>Principal</code>\n+   * has the specified <code>Permission</code>\n+   *\n+   * @param user The <code>Principal</code> to test\n+   * @param perm The <code>Permission</code> to test for\n+   *\n+   * @return <code>true</code> if the user has been granted the permission, <code>false</code> otherwise\n+   */\n+  public abstract boolean checkPermission(Principal user, Permission perm);\n+\n+  /**\n+   * This method returns a list of <code>Permission</code>'s that are granted\n+   * to a particular <code>Principal</code>.  This includes any permissions\n+   * that are granted to <code>Group</code>'s to which the <code>Principal</code>\n+   * belongs unless they are overridden by a negative ACL.  This permission\n+   * list is returned as an <code>Enumeration</code>.\n+   *\n+   * @param user The <code>Principal</code> to retrieve permissions for.\n+   *\n+   * @return A list of permissions for the <code>Principal</code>.\n+   */\n+  public abstract Enumeration getPermissions(Principal user);\n+\n+  /**\n+   * This method returns the ACL as a <code>String</code>\n+   *\n+   * @return A <code>String</code> representation of this ACL\n+   */\n+  public abstract String toString();\n+}"}, {"sha": "8741bce53c9520d207707d8a882113fc96e2e5a4", "filename": "libjava/java/security/acl/AclEntry.java", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Facl%2FAclEntry.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Facl%2FAclEntry.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Facl%2FAclEntry.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,132 @@\n+/* AclEntry.java -- An entry in an ACL list.\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security.acl;\n+\n+import java.security.Principal;\n+import java.util.Enumeration;\n+\n+/**\n+ * This interface models an entry in an access control list (ACL).  Java\n+ * ACL's consist of a list of entries, where each consists of a \n+ * <code>Principal</code> and a list of <code>Permission</code>'s which\n+ * have been granted to that <code>Principal</code>.  An ACL can also\n+ * be <em>negative</em>, which indicates that the list of \n+ * <code>Permission</code>'s is a list of permissions that are <em>not</em>\n+ * granted to the <code>Principal</code>.  A <code>Principal</code> can\n+ * have at most one regular (or positive) ACL entry and one negative\n+ * ACL entry.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public interface AclEntry extends Cloneable\n+{\n+ /**\n+   * This method returns the <code>Principal</code> associated with this\n+   * ACL entry.\n+   *\n+   * @return The <code>Principal</code> for this ACL entry\n+   */\n+  public abstract Principal getPrincipal();\n+\n+  /**\n+   * This method sets ths <code>Principal</code> associated with this\n+   * ACL entry.  This operation will only succeed if there is not already\n+   * a <code>Principal</code> assigned.\n+   *\n+   * @param user The <code>Principal</code> for this ACL entry\n+   *\n+   * @return <code>true</code> if the <code>Principal</code> was successfully set or <code>false</code> if this entry already has a <code>Principal</code>.\n+   */\n+  public abstract boolean setPrincipal(Principal user);\n+\n+  /**\n+   * This method sets this ACL entry to be a <em>negative</em> entry, indicating\n+   * that it contains a list of permissions that are <em>not</em> granted\n+   * to the entry's <code>Principal</code>.  Note that there is no way to\n+   * undo this operation.\n+   */\n+  public abstract void setNegativePermissions();\n+\n+  /**\n+   * This method tests whether or not this ACL entry is a negative entry or not.\n+   *\n+   * @return <code>true</code> if this ACL entry is negative, <code>false</code> otherwise\n+   */\n+  public abstract boolean isNegative();\n+\n+  /**\n+   * This method adds the specified permission to this ACL entry.\n+   *\n+   * @param perm The <code>Permission</code> to add\n+   *\n+   * @return <code>true</code> if the permission was added or <code>false</code> if it was already set for this entry\n+   */\n+  public abstract boolean addPermission(Permission permission);\n+\n+  /**\n+   * This method deletes the specified permission to this ACL entry.\n+   *\n+   * @param perm The <code>Permission</code> to delete from this ACL entry.\n+   *\n+   * @return <code>true</code> if the permission was successfully deleted or <code>false</code> if the permission was not part of this ACL to begin with\n+   */\n+  public abstract boolean removePermission(Permission perm);\n+\n+  /**\n+   * This method tests whether or not the specified permission is associated\n+   * with this ACL entry.\n+   *\n+   * @param perm The <code>Permission</code> to test\n+   *\n+   * @return <code>true</code> if this permission is associated with this entry or <code>false</code> otherwise\n+   */\n+  public abstract boolean checkPermission(Permission permission);\n+\n+  /**\n+   * This method returns a list of all <code>Permission</code> objects\n+   * associated with this ACL entry as an <code>Enumeration</code>.\n+   *\n+   * @return A list of permissions for this ACL entry\n+   */\n+  public abstract Enumeration permissions();\n+\n+  /**\n+   * This method returns this object as a <code>String</code>.\n+   *\n+   * @return A <code>String</code> representation of this object\n+   */\n+  public abstract String toString();\n+\n+  /**\n+   * This method returns a clone of this ACL entry\n+   *\n+   * @return A clone of this ACL entry\n+   */\n+  public abstract Object clone();\n+}"}, {"sha": "2593cff64795d419ab20bba475c2725bdfd593b4", "filename": "libjava/java/security/acl/AclNotFoundException.java", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Facl%2FAclNotFoundException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Facl%2FAclNotFoundException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Facl%2FAclNotFoundException.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,46 @@\n+/* AclNotFoundException.java -- What it says\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security.acl;\n+\n+/**\n+ * This exception is thrown when a requested access control list (ACL) is\n+ * not found.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public class AclNotFoundException extends Exception\n+{\n+  /**\n+   * Initializes a new instance of this class with no descriptive message\n+   */\n+  public AclNotFoundException()\n+  {\n+    super();\n+  }\n+}"}, {"sha": "ccdd0370213eb4492392f9c4b0f7d7217fd0f98c", "filename": "libjava/java/security/acl/Group.java", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Facl%2FGroup.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Facl%2FGroup.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Facl%2FGroup.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,79 @@\n+/* Group.java -- Represents a group of Principals\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security.acl;\n+\n+import java.security.Principal;\n+import java.util.Enumeration;\n+\n+/**\n+ * This interface represents a group of <code>Principals</code>.  Note that\n+ * since this interface extends <code>Principal</code>, a <code>Group</code>\n+ * can be used where ever a <code>Principal</code> is requested.  This\n+ * includes arguments to the methods in this interface.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public interface Group\n+{\n+  /**\n+   * This method adds a new <code>Principal</code> to this group.\n+   *\n+   * @param user The new <code>Principal</code> to add\n+   *\n+   * @return <code>true</code> if the user was successfully added or <code>false</code> if the user is already a member\n+   */\n+  public abstract boolean addMember(Principal user);\n+\n+  /**\n+   * This method deletes a member from the group.\n+   *\n+   * @param user The <code>Principal</code> to delete\n+   *\n+   * @return <code>true</code> if the user was successfully deleted or <code>false</code> if the user is not a member of the group\n+   */\n+  public abstract boolean removeMember(Principal user);\n+\n+  /**\n+   * This method tests whether or not a given <code>Principal</code> is a\n+   * member of this group.\n+   *\n+   * @param user The <code>Principal</code> to test for membership\n+   *\n+   * @return <code>true</code> if the user is member, <code>false</code> otherwise\n+   */\n+  public abstract boolean isMember();\n+\n+  /**\n+   * This method returns a list of all members of the group as an \n+   * <code>Enumeration</code>.\n+   *\n+   * @return The list of all members of the group\n+   */\n+  public abstract Enumeration members();\n+}"}, {"sha": "c85c2cb1d95e6bea40d9c5852c3952c2a103b38d", "filename": "libjava/java/security/acl/LastOwnerException.java", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Facl%2FLastOwnerException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Facl%2FLastOwnerException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Facl%2FLastOwnerException.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,47 @@\n+/* LastOwnerException.java -- User attempted to delete last ACL owner\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security.acl;\n+\n+/**\n+ * This exception is thrown when an attempt is made to delete the last owner\n+ * of an access control list (ACL)\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public class LastOwnerException extends java.lang.Exception\n+{\n+  /**\n+   * Initialize a new instance of <code>LastOwnerException</code> that does\n+   * not have a log message.\n+   */\n+  public LastOwnerException()\n+  {\n+    super();\n+  }\n+}"}, {"sha": "80bc797d9d48eb3eb4220d7237395a65d7b8c59e", "filename": "libjava/java/security/acl/NotOwnerException.java", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Facl%2FNotOwnerException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Facl%2FNotOwnerException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Facl%2FNotOwnerException.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,49 @@\n+/* NotOwnerException.java -- Attempt to modify an unowned ACL\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security.acl;\n+\n+/**\n+ * This exception is thrown whenever an operation is attempted that requires\n+ * the caller to be the owner of the access control list (ACL) when the caller\n+ * is in fact not the owner of the ACL.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public class NotOwnerException extends java.lang.Exception\n+{\n+\n+  /**\n+   * Initializes a new instance of <code>NotOwnerException</code> that does\n+   * not have a descriptive message.\n+   */\n+  public NotOwnerException()\n+  {\n+    super();\n+  }\n+}"}, {"sha": "c6fec0f8fe3f18e4598778f25cc9b24d472b8562", "filename": "libjava/java/security/acl/Owner.java", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Facl%2FOwner.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Facl%2FOwner.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Facl%2FOwner.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,84 @@\n+/* Owner.java -- ACL owner\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security.acl;\n+\n+import java.security.Principal;\n+\n+/**\n+ * This interface provides a mechanism for maintaining a list of owners\n+ * of an access control list (ACL).  Since a <code>Principal</code> must\n+ * be an owner in order to modify the owner list, a mechanism must be\n+ * provided to specify the initial owner of the ACL.  The proper way to do\n+ * this is for the implementing class to specify the initial owner in\n+ * the contructor for that class.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public interface Owner\n+{\n+  /**\n+   * This method adds an owner to the access control list (ACL).  Only a\n+   * <code>Principal</code> who is already an owner can perform this operation.\n+   *\n+   * @param caller The <code>Principal</code> who is requesting that an owner be added\n+   * @param owner The <code>Principal</code> to add as a new owner\n+   *\n+   * @param <code>true</code> if the new owner was successfully added or <code>false</code> if the specified new owner is already an owner\n+   *\n+   * @exception NotOwnerException If the caller is not already an owner of this ACL\n+   */\n+  public abstract boolean addOwner(Principal caller, Principal owner) \n+    throws NotOwnerException;\n+\n+  /**\n+   * This method delets an owner from the access control list (ACL).  Only a\n+   * <code>Principal</code> who is an owner can perform this operation.  An\n+   * owner can delete itself from the list.  If there is only one\n+   * owner remaining on this list, any attempt to delete it will throw an\n+   * exception.\n+   *\n+   * @param caller The <code>Principal</code> who is requesting that an owner be deleted\n+   * @param owner The <code>Principal</code> to delete as an owner\n+   *\n+   * @param <code>true</code> if the new owner was successfully deleted or <code>false</code> if the specified owner is not currently an owner\n+   *\n+   * @exception NotOwnerException If the caller is not already an owner of this ACL\n+   * @exception LastOwnerException If completing the operation would delete the last ACL owner\n+   */\n+  public abstract boolean deleteOwner(Principal caller, Principal owner) \n+    throws NotOwnerException, LastOwnerException;\n+\n+  /**\n+   * This method tests whether or not a given <code>Principal</code> is an\n+   * owner of this access control list (ACL).\n+   *\n+   * @return <code>true</code> if the <code>Principal</code> is an owner, <code>false</code> otherwise\n+   */\n+  public abstract boolean isOwner(Principal owner);\n+}"}, {"sha": "956903873c3298fcd26ec952eeb90ebd881d7214", "filename": "libjava/java/security/acl/Permission.java", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Facl%2FPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Facl%2FPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Facl%2FPermission.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,56 @@\n+/* Permission.java -- Information about an ACL permission\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security.acl;\n+\n+/**\n+ * This interface provides information about a permission that can be\n+ * granted.  Note that this is <em>not</em> the same as the class\n+ * <code>java.security.Permission</code>.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public interface Permission\n+{\n+  /**\n+   * This method tests whether or not a specified <code>Permission</code>\n+   * (passed as an <code>Object</code>) is the same as this permission.\n+   *\n+   * @param perm The permission to check for equality\n+   *\n+   * @return <code>true</code> if the specified permission is the same as this one, <code>false</code> otherwise\n+   */\n+  public abstract boolean equals(Object perm);\n+\n+  /**\n+   * This method returns this <code>Permission</code> as a <code>String</code>.\n+   *\n+   * @return A <code>String</code> representing this permission.\n+   */\n+  public String toString();\n+}"}, {"sha": "1670b5a4d8792b377d1f23fc1b0fc126e3001428", "filename": "libjava/java/security/interfaces/DSAKey.java", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAKey.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,23 +1,45 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* DSAKey.java -- Interface for Digital Signature Algorith key\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n- \n package java.security.interfaces;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 1, 2000.\n- */\n-\n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n+ * This interface is implemented by a class to return the parameters\n+ * of a Digital Signature Algorithm (DSA) public or private key.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n- \n public interface DSAKey\n {\n-  public DSAParams getParams();\n+  /**\n+   * This method returns non-secret parameters of the DSA key\n+   *\n+   * @return The DSA parameters\n+   */\n+  public abstract DSAParams getParams();\n }"}, {"sha": "af087e04052cbfbeb599539d318e3e7005afd134", "filename": "libjava/java/security/interfaces/DSAKeyPairGenerator.java", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAKeyPairGenerator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAKeyPairGenerator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAKeyPairGenerator.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,75 @@\n+/* DSAKeyPairGenerator.java -- Initialize a DSA key generator\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security.interfaces;\n+\n+import java.security.SecureRandom;\n+import java.security.InvalidParameterException;\n+\n+/**\n+ * This interface contains methods for intializing a Digital Signature\n+ * Algorithm key generation engine.  The initialize methods may be called\n+ * any number of times.  If no explicity initialization call is made, then\n+ * the engine defaults to generating 1024-bit keys using pre-calculated\n+ * base, prime, and subprime values.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public interface DSAKeyPairGenerator\n+{\n+  /**\n+   * Initializes the key generator with the specified DSA parameters and\n+   * random bit source\n+   *\n+   * @param params The DSA parameters to use\n+   * @param random The random bit source to use\n+   *\n+   * @exception InvalidParameterException If the parameters passed are not valid\n+   */\n+  public abstract void initialize(DSAParams params, SecureRandom random)\n+    throws InvalidParameterException;\n+\n+  /**\n+   * Initializes the key generator to a give modulus.  If the <code>genParams</code>\n+   * value is <code>true</code> then new base, prime, and subprime values\n+   * will be generated for the given modulus.  If not, the pre-calculated\n+   * values will be used.  If no pre-calculated values exist for the specified\n+   * modulus, an exception will be thrown.  It is guaranteed that there will\n+   * always be pre-calculated values for all modulus values between 512 and\n+   * 1024 bits inclusives.\n+   *\n+   * @param modlen The modulus length\n+   * @param genParams <code>true</code> to generate new DSA parameters, <code>false</code> otherwise\n+   * @param random The random bit source to use\n+   *\n+   * @exception InvalidParameterException If a parameter is invalid\n+   */\n+  public abstract void initialize(int modlen, boolean genParams, \n+\t\t\t\t  SecureRandom random)\n+    throws InvalidParameterException;\n+}"}, {"sha": "fea3aa8e757b876911e583d35f519cb2772a0c80", "filename": "libjava/java/security/interfaces/DSAParams.java", "status": "modified", "additions": 51, "deletions": 16, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAParams.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAParams.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAParams.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,26 +1,61 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* DSAParams.java -- Digital Signature Algorithm parameter access\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n- \n package java.security.interfaces;\n+\n import java.math.BigInteger;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 1, 2000.\n+ * This interface allows the Digital Signature Algorithm (DSA) parameters\n+ * to be queried.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n-\n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n- */\n- \n public interface DSAParams\n {\n-  public BigInteger getP();\n-  public BigInteger getQ();\n-  public BigInteger getG();\n+  /**\n+   * Returns the base, or 'g' value\n+   *\n+   * @return The DSA base value\n+   */\n+  public abstract BigInteger getG();\n+\n+  /**\n+   * Returns the prime, or 'p' value\n+   *\n+   * @return The DSA prime value\n+   */\n+  public abstract BigInteger getP();\n+\n+  /**\n+   * Returns the subprime, or 'q' value\n+   *\n+   * @return The DSA subprime value\n+   */\n+  public abstract BigInteger getQ();\n }"}, {"sha": "70a432d4aa887461dc426a3cc78466f318bca88b", "filename": "libjava/java/security/interfaces/DSAPrivateKey.java", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPrivateKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPrivateKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPrivateKey.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,27 +1,45 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* DSAPublicKey.java -- A Digital Signature Algorithm private key\n+   Copyright (C) 1998, 2000 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n- \n package java.security.interfaces;\n+\n import java.security.PrivateKey;\n import java.math.BigInteger;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 1, 2000.\n- */\n-\n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n+ * This interface models a Digital Signature Algorithm (DSA) private key\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n- \n public interface DSAPrivateKey extends DSAKey, PrivateKey\n {\n-  public static final long serialVersionUID = 7776497482533790279L;\n-\n+  /**\n+   * This method returns the value of the DSA private key\n+   */\n   public BigInteger getX();\n }"}, {"sha": "6a2ad8ff3e94d14939e8102abe06acf3ebcce116", "filename": "libjava/java/security/interfaces/DSAPublicKey.java", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPublicKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPublicKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FDSAPublicKey.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,27 +1,45 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* DSAPublicKey.java -- A Digital Signature Algorithm public key\n+   Copyright (C) 1998, 2000 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n- \n package java.security.interfaces;\n+\n import java.security.PublicKey;\n import java.math.BigInteger;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 1, 2000.\n- */\n-\n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n+ * This interface models a Digital Signature Algorithm (DSA) public key\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n- \n public interface DSAPublicKey extends DSAKey, PublicKey\n {\n-  public static final long serialVersionUID = 1234526332779022332L;\n-\n+  /**\n+   * This method returns the value of the DSA public key\n+   */\n   public BigInteger getY();\n }"}, {"sha": "1233f95f1d13588bda4ed69ac0d909b3b0a836a5", "filename": "libjava/java/security/interfaces/RSAKey.java", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAKey.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,44 @@\n+/* RSAKey.java --- A generic RSA Key interface\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+package java.security.interfaces;\n+\n+/**\n+   A generic RSA Key interface for public and private keys\n+\n+   @since JDK 1.3\n+\n+   @author Mark Benvenuto\n+ */\n+public interface RSAKey\n+{\n+  /**\n+     Generates a modulus.\n+\n+     @returns a modulus\n+   */\n+  public java.math.BigInteger getModulus();\n+}"}, {"sha": "7e895dc12b02a73b533efa95893aee44c9c8236f", "filename": "libjava/java/security/interfaces/RSAPrivateCrtKey.java", "status": "modified", "additions": 72, "deletions": 20, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPrivateCrtKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPrivateCrtKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPrivateCrtKey.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,30 +1,82 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* RSAPrivateCrtKey.java -- An RSA private key in CRT format\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n- \n package java.security.interfaces;\n+\n import java.math.BigInteger;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 1, 2000.\n- */\n-\n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n+ * This interface provides access to information about an RSA private\n+ * key in Chinese Remainder Theorem (CRT) format.\n+ *\n+ * @version 0.0\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n- \n-// JDK1.2\n public interface RSAPrivateCrtKey extends RSAPrivateKey\n {\n-  public BigInteger getPublicExponent();\n-  public BigInteger getPrimeP();\n-  public BigInteger getPrimeQ();\n-  public BigInteger getPrimeExponentP();\n-  public BigInteger getPrimeExponentQ();\n-  public BigInteger getCrtCoefficient();\n+  /**\n+   * Returns the public exponent for this key\n+   *\n+   * @return The public exponent for this key\n+   */\n+  public abstract BigInteger getPublicExponent();\n+\n+  /**\n+   * Returns the primeP value\n+   *\n+   * @return The primeP value\n+   */\n+  public abstract BigInteger getPrimeP();\n+\n+  /**\n+   * Returns the primeQ value\n+   *\n+   * @return The primeQ value\n+   */\n+  public abstract BigInteger getPrimeQ();\n+\n+  /**\n+   * Returns the primeExponentP\n+   *\n+   * @return The primeExponentP\n+   */\n+  public abstract BigInteger getPrimeExponentP();\n+\n+  /**\n+   * Returns the primeExponentQ\n+   *\n+   * @return The primeExponentQ\n+   */\n+  public abstract BigInteger getPrimeExponentQ();\n+\n+  /**\n+   * Returns the CRT coefficient\n+   *\n+   * @return The CRT coefficient\n+   */\n+  public abstract BigInteger getCrtCoefficient();\n }"}, {"sha": "f474795fe2d7a3ef6210dbc9ae98cda8da1f4c38", "filename": "libjava/java/security/interfaces/RSAPrivateKey.java", "status": "modified", "additions": 37, "deletions": 17, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPrivateKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPrivateKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPrivateKey.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,27 +1,47 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* RSAPrivateKey.java -- An RSA private key\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n- \n package java.security.interfaces;\n+\n import java.security.PrivateKey;\n import java.math.BigInteger;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 1, 2000.\n- */\n-\n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n+ * This interface provides access to information about an RSA private key.\n+ *\n+ * @version 0.1\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n- \n-// JDK1.2\n-public interface RSAPrivateKey extends PrivateKey\n+public interface RSAPrivateKey extends PrivateKey, RSAKey\n {\n-  public BigInteger getModulus();\n-  public BigInteger getPrivateExponent();\n+  /**\n+   * Returns the private exponent value for this key\n+   *\n+   * @return The private exponent value for this key\n+   */\n+  public abstract BigInteger getPrivateExponent();\n }"}, {"sha": "51a555e8375d5ad19dc4ffca7c28f6591fea6665", "filename": "libjava/java/security/interfaces/RSAPublicKey.java", "status": "modified", "additions": 37, "deletions": 17, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPublicKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPublicKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Finterfaces%2FRSAPublicKey.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,27 +1,47 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* RSAPublicKey.java -- An RSA public key\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n- \n package java.security.interfaces;\n+\n import java.security.PublicKey;\n import java.math.BigInteger;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 1, 2000.\n- */\n-\n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n+ * This interface provides access to information about an RSA public key.\n+ *\n+ * @version 0.1\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n- \n-// JDK1.2\n-public interface RSAPublicKey extends PublicKey\n+public interface RSAPublicKey extends PublicKey, RSAKey\n {\n-  public BigInteger getModulus();\n-  public BigInteger getPublicExponent();\n+  /**\n+   * Returns the public exponent value for this key\n+   *\n+   * @return The public exponent value for this key\n+   */\n+  public abstract BigInteger getPublicExponent();\n }"}, {"sha": "63f5314ecc2e383b64294fb8f1f67d6339265868", "filename": "libjava/java/security/spec/AlgorithmParameterSpec.java", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FAlgorithmParameterSpec.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FAlgorithmParameterSpec.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fspec%2FAlgorithmParameterSpec.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,25 +1,41 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* AlgorithmParameterSpec.java --- Algorithm Parameter Spec Interface\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.security.spec;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 1, 2000.\n- */\n+\tA transparent interface for Algorithm Parameter Specifications. \n+\tIt contains no member functions. It is used to group\n+\talgorithm parameter classes.\n \n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n- */\n- \n-// JDK1.2\n-public interface AlgorithmParameterSpec\n+\t@since JDK 1.2\n+\n+\t@author Mark Benvenuto\n+*/\n+public abstract interface AlgorithmParameterSpec\n {\n-  // This interface contains no methods or constants. Its only purpose is\n-  // to group (and provide type safety for) all key specifications.\n }"}, {"sha": "b90408955014b77080287c22eb2718c0639b5e55", "filename": "libjava/java/security/spec/DSAParameterSpec.java", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FDSAParameterSpec.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FDSAParameterSpec.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fspec%2FDSAParameterSpec.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,89 @@\n+/* DSAParameterSpec.java --- DSA Parameter Specificaton class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.security.spec;\n+import java.security.interfaces.DSAParams;\n+import java.math.BigInteger;\n+\n+/**\n+\tDSA Parameter class Specification. Used to maintain the DSA\n+\tParameters.\n+\n+\t@since JDK 1.2\n+\n+\t@author Mark Benvenuto\n+*/\n+public class DSAParameterSpec extends Object implements AlgorithmParameterSpec, DSAParams\n+{\n+  private BigInteger p = null;\n+  private BigInteger q = null;\n+  private BigInteger g = null;\n+\n+  /**\n+     Constructs a new DSAParameterSpec with the specified p, q, and g.\n+\n+     @param p the prime\n+     @param q the sub-prime\n+     @param g the base\n+  */\n+  public DSAParameterSpec(BigInteger p, BigInteger q, BigInteger g) \n+  {\n+    this.p = p;\n+    this.q = q;\n+    this.g = g;\n+  }\n+  /**\n+     Returns p for the DSA algorithm.\n+\n+     @return Returns the requested BigInteger\n+  */\n+  public BigInteger getP() \n+  {\n+    return this.q;\n+  }\n+\n+  /**\n+     Returns p for the DSA algorithm.\n+\n+     @return Returns the requested BigInteger\n+  */\n+  public BigInteger getQ() \n+  {\n+    return this.q;\n+  }\n+\n+  /**\n+     Returns g for the DSA algorithm.\n+\n+     @return Returns the requested BigInteger\n+  */\n+  public BigInteger getG()\n+  {\n+    return this.g;\n+  }\n+\n+}"}, {"sha": "ee31b96ff4fe61b68d0dbbdce5d62c8d297ca1e0", "filename": "libjava/java/security/spec/DSAPrivateKeySpec.java", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FDSAPrivateKeySpec.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FDSAPrivateKeySpec.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fspec%2FDSAPrivateKeySpec.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,102 @@\n+/* DSAPrivateKeySpec.java --- DSA Private Key Specificaton class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.security.spec;\n+import java.math.BigInteger;\n+\n+/**\n+\tDSA Private Key class Specification. Used to maintain the DSA\n+\tPrivate Keys.\n+\n+\t@since JDK 1.2\n+\n+\t@author Mark Benvenuto\n+*/\n+public class DSAPrivateKeySpec extends Object implements KeySpec \n+{\n+  private BigInteger x = null;\n+  private BigInteger p = null;\n+  private BigInteger q = null;\n+  private BigInteger g = null;\n+\n+  /**\n+     Constructs a new DSAPrivateKeySpec with the specified x, p, q, and g.\n+\n+     @param x the private key\n+     @param p the prime\n+     @param q the sub-prime\n+     @param g the base\n+  */\n+  public DSAPrivateKeySpec(BigInteger x, BigInteger p, BigInteger q, BigInteger g) \n+  {\n+    this.x = x;\n+    this.p = p;\n+    this.q = q;\n+    this.g = g;\n+  }\n+\n+  /**\n+     Returns private key x for the DSA algorithm.\n+\n+     @return Returns the requested BigInteger\n+  */\n+  public BigInteger getX() \n+  {\n+    return this.x;\n+  }\n+\n+  /**\n+     Returns p for the DSA algorithm.\n+\n+     @return Returns the requested BigInteger\n+  */\n+  public BigInteger getP() \n+  {\n+    return this.q;\n+  }\n+\n+  /**\n+     Returns p for the DSA algorithm.\n+\n+     @return Returns the requested BigInteger\n+  */\n+  public BigInteger getQ() \n+  {\n+    return this.q;\n+  }\n+\n+  /**\n+     Returns g for the DSA algorithm.\n+\n+     @return Returns the requested BigInteger\n+  */\n+  public BigInteger getG() \n+  {\n+    return this.g;\n+  }\n+\n+}"}, {"sha": "d1fd237adb23ea97756a51c0a77a698bc04169df", "filename": "libjava/java/security/spec/DSAPublicKeySpec.java", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FDSAPublicKeySpec.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FDSAPublicKeySpec.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fspec%2FDSAPublicKeySpec.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,102 @@\n+/* DSAPublicKeySpec.java --- DSA Public Key Specificaton class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.security.spec;\n+import java.math.BigInteger;\n+\n+/**\n+\tDSA Public Key class Specification. Used to maintain the DSA\n+\tPublic Keys.\n+\n+\t@since JDK 1.2\n+\n+\t@author Mark Benvenuto\n+*/\n+public class DSAPublicKeySpec extends Object implements KeySpec \n+{\n+  private BigInteger y = null;\n+  private BigInteger p = null;\n+  private BigInteger q = null;\n+  private BigInteger g = null;\n+\n+  /**\n+     Constructs a new DSAPublicKeySpec with the specified y, p, q, and g.\n+\n+     @param y the public key\n+     @param p the prime\n+     @param q the sub-prime\n+     @param g the base\n+  */\n+  public DSAPublicKeySpec(BigInteger x, BigInteger p, BigInteger q, BigInteger g) \n+  {\n+    this.y = y;\n+    this.p = p;\n+    this.q = q;\n+    this.g = g;\n+  }\n+\n+  /**\n+     Returns public key y for the DSA algorithm.\n+\n+     @return Returns the requested BigInteger\n+  */\n+  public BigInteger getY() \n+  {\n+    return this.y;\n+  }\n+\n+  /**\n+     Returns p for the DSA algorithm.\n+\n+     @return Returns the requested BigInteger\n+  */\n+  public BigInteger getP() \n+  {\n+    return this.q;\n+  }\n+\n+  /**\n+     Returns p for the DSA algorithm.\n+\n+     @return Returns the requested BigInteger\n+  */\n+  public BigInteger getQ() \n+  {\n+    return this.q;\n+  }\n+\n+  /**\n+     Returns g for the DSA algorithm.\n+\n+     @return Returns the requested BigInteger\n+  */\n+  public BigInteger getG() \n+  {\n+    return this.g;\n+  }\n+\n+}"}, {"sha": "d0a83f816af5ae05a57028e795dbf2dda30c05c1", "filename": "libjava/java/security/spec/EncodedKeySpec.java", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FEncodedKeySpec.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FEncodedKeySpec.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fspec%2FEncodedKeySpec.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,74 @@\n+/* EncodedKeySpec.java --- Encoded Key Specificaton class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.security.spec;\n+\n+/**\n+\tEncoded Key Specification class which is used to store \n+\tbyte encoded keys.\n+\n+\t@since JDK 1.2\n+\n+\t@author Mark Benvenuto\n+*/\n+public abstract class EncodedKeySpec \n+{\n+\n+  private byte[] encodedKey;\n+\n+  /**\n+     Constructs a new EncodedKeySpec with the specified encoded key.\n+\n+     @param encodedKey A key to store\n+  */\n+  public EncodedKeySpec(byte[] encodedKey) \n+  {\n+    this.encodedKey = encodedKey;\n+  }\n+\n+  /**\n+     Gets the encoded key in byte format.\n+\n+     @returns the encoded key\n+  */\n+  public byte[] getEncoded() \n+  {\n+    return this.encodedKey;\n+  }\n+\n+  /**\n+     Returns the name of the key format used.\n+\n+     This name is the format such as \"PKCS#8\" or \"X.509\" which\n+     if it matches a Key class name of the same type can be \n+     transformed using the apporiate KeyFactory. \n+\n+     @return a string representing the name\n+  */\n+  public abstract String getFormat();\n+\n+}"}, {"sha": "15fa8839d6b43821e6a7f98f77ad23ca11cd1f66", "filename": "libjava/java/security/spec/InvalidKeySpecException.java", "status": "modified", "additions": 41, "deletions": 15, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FInvalidKeySpecException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FInvalidKeySpecException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fspec%2FInvalidKeySpecException.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,33 +1,59 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* InvalidKeySpecException.java --- Invalid KeySpec Exception\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.security.spec;\n import java.security.GeneralSecurityException;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 1, 2000.\n- */\n+\tException for an invalid key specification.\n \n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n- */\n+\t@since JDK 1.2\n \n-// JDK1.2\n-public class InvalidKeySpecException extends GeneralSecurityException\n+\t@author Mark Benvenuto\n+*/\n+public class InvalidKeySpecException extends GeneralSecurityException \n {\n-  public InvalidKeySpecException()\n+\n+  /**\n+     Constructs an InvalidKeySpecException without a message string.\n+  */\n+  public InvalidKeySpecException() \n   {\n     super();\n   }\n \n+  /**\n+     Constructs an InvalidKeySpecException with a message string.\n+\n+     @param msg A message to display with exception\n+  */\n   public InvalidKeySpecException(String msg)\n   {\n-    super(msg);\n+    super( msg );\n   }\n+\n }"}, {"sha": "f3e87928491091823052819ee95b65be2c88cbcb", "filename": "libjava/java/security/spec/InvalidParameterSpecException.java", "status": "modified", "additions": 41, "deletions": 15, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FInvalidParameterSpecException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FInvalidParameterSpecException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fspec%2FInvalidParameterSpecException.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,33 +1,59 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* InvalidParameterSpecException.java --- Invalid ParameterSpec Exception\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.security.spec;\n import java.security.GeneralSecurityException;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 1, 2000.\n- */\n+\tException for an invalid algorithm specification.\n \n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n- */\n+\t@since JDK 1.2\n \n-// JDK1.2\n+\t@author Mark Benvenuto\n+*/\n public class InvalidParameterSpecException extends GeneralSecurityException\n {\n-  public InvalidParameterSpecException()\n+\n+  /**\n+     Constructs an InvalidParameterSpecException without a message string.\n+  */\n+  public InvalidParameterSpecException() \n   {\n     super();\n   }\n \n-  public InvalidParameterSpecException(String msg)\n+  /**\n+     Constructs an InvalidParameterSpecException with a message string.\n+\n+     @param msg A message to display with exception\n+  */\n+  public InvalidParameterSpecException(String msg) \n   {\n-    super(msg);\n+    super( msg );\n   }\n+\n }"}, {"sha": "6c74dc5443e94b8ecb8446e34bf4cc7317ce3ba7", "filename": "libjava/java/security/spec/KeySpec.java", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FKeySpec.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FKeySpec.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fspec%2FKeySpec.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,25 +1,41 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* KeySpec.java --- Key Specification interface\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.security.spec;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 1, 2000.\n- */\n+\tA transparent interface for Key Specifications.\n+\tIt contains no member functions. It is used to group\n+\tkey classes.\n \n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n- */\n- \n-// JDK1.2\n-public interface KeySpec\n+\t@since JDK 1.2\n+\n+\t@author Mark Benvenuto\n+*/\n+public abstract interface KeySpec \n {\n-  // This interface contains no methods or constants. Its only purpose is\n-  // to group (and provide type safety for) all key specifications.\n }"}, {"sha": "c2c0084833f8acfa58829f0d563ba6392ef25fb9", "filename": "libjava/java/security/spec/PKCS8EncodedKeySpec.java", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FPKCS8EncodedKeySpec.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FPKCS8EncodedKeySpec.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fspec%2FPKCS8EncodedKeySpec.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,70 @@\n+/* PKCS8EncodedKeySpec.java --- PKCS8 Encoded Key Specificaton class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.security.spec;\n+\n+/**\n+\tPKCS8 Encoded Key Specification class which is used to store \n+\t\"PKCS#8\" byte encoded keys.\n+\n+\t@since JDK 1.2\n+\n+\t@author Mark Benvenuto\n+*/\n+public class PKCS8EncodedKeySpec extends EncodedKeySpec\n+{\n+  /**\n+     Constructs a new PKCS8EncodedKeySpec with the specified encoded key.\n+\n+     @param encodedKey A key to store, assumed to be \"PKCS#8\"\n+  */\n+  public PKCS8EncodedKeySpec(byte[] encodedKey)\n+  {\n+    super( encodedKey );\n+  }\n+\n+  /**\n+\tGets the encoded key in byte format.\n+\n+\t@returns the encoded key\n+*/\n+  public byte[] getEncoded()\n+  {\n+    return super.getEncoded();\n+  }\n+\n+  /**\n+\tReturns the name of the key format used which is \"PKCS#8\"\n+\n+\t@return a string representing the name\n+*/\n+  public String getFormat()\n+  {\n+    return \"PKCS#8\";\n+  }\n+\n+}"}, {"sha": "1d9d9327f3601493c6fd36e5df228900c6d82135", "filename": "libjava/java/security/spec/RSAKeyGenParameterSpec.java", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FRSAKeyGenParameterSpec.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FRSAKeyGenParameterSpec.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fspec%2FRSAKeyGenParameterSpec.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,86 @@\n+/* RSAKeyGenParameterSpec.java --- RSA Key Generator Parameter Spec Class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.security.spec;\n+import java.math.BigInteger;\n+\n+/**\n+   This class generates a set of RSA Key parameters used in the generation\n+   of RSA keys.\n+\n+   @since JDK 1.3\n+\n+   @author Mark Benvenuto\n+*/\n+public class RSAKeyGenParameterSpec implements AlgorithmParameterSpec\n+{\n+  private int keysize;\n+  private BigInteger publicExponent;\n+\n+  /**\n+     Public Exponent F0 = 3\n+  */\n+  public static final BigInteger F0 = new BigInteger(\"3\");\n+\n+  /**\n+     Public Exponent F4 = 3\n+  */\n+  public static final BigInteger F4 = new BigInteger(\"65537\");\n+\n+  /**\n+     Create a new RSAKeyGenParameterSpec to store the RSA key's keysize \n+     and public exponent\n+\n+     @param keysize Modulus size of key in bits\n+     @param publicExponent - the exponent\n+  */\n+  public RSAKeyGenParameterSpec(int keysize, BigInteger publicExponent)\n+  {\n+    this.keysize = keysize;\n+    this.publicExponent = publicExponent;\n+  }\n+    \n+  /**\n+     Return the size of the key.\n+\n+     @return the size of the key.\n+  */\n+  public int getKeysize()\n+  {\n+    return keysize;\n+  }\n+    \n+  /**\n+     Return the public exponent.\n+\n+     @return the public exponent.\n+  */\n+  public BigInteger getPublicExponent()\n+  {\n+    return publicExponent;\n+  }\n+}"}, {"sha": "53813c644b4575702f11d786c5f60dece56b1cfc", "filename": "libjava/java/security/spec/RSAPrivateCrtKeySpec.java", "status": "modified", "additions": 130, "deletions": 13, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FRSAPrivateCrtKeySpec.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FRSAPrivateCrtKeySpec.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fspec%2FRSAPrivateCrtKeySpec.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,23 +1,140 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* RSAPrivateCrtKeySpec.java --- RSA Private Certificate Key Specificaton class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.security.spec;\n+import java.math.BigInteger;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 7, 2000.\n- */\n+\tRSA Private Certificate Key class Specification. Used to \n+\tmaintain the RSA Private Certificate Keys with the \n+\t<I>Chinese Remainder Theorem</I>(CRT) as specified by PKCS#1.\n \n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Stubbed.\n- */\n- \n-// JDK1.2\n+\t@since JDK 1.2\n+\n+\t@author Mark Benvenuto\n+*/\n public class RSAPrivateCrtKeySpec extends RSAPrivateKeySpec\n {\n+  private BigInteger publicExponent;\n+  private BigInteger primeP;\n+  private BigInteger primeQ;\n+  private BigInteger primeExponentP;\n+  private BigInteger primeExponentQ;\n+  private BigInteger crtCoefficient;\n+\n+  /**\n+     Constructs a new RSAPrivateKeySpec with the specified\n+     variables.\n+\n+     @param modulus the RSA modulus\n+     @param publicExponent the public key exponent\n+     @param privateExponent the private key exponent\n+     @param primeP the prime P\n+     @param primeQ the prime Q\n+     @param primeExponentP the prime exponent P\n+     @param primeExponentQ the prime exponent P\n+     @param crtCoefficient the CRT coefficient\n+  */\n+  public RSAPrivateCrtKeySpec(BigInteger modulus,\n+\t\t\t      BigInteger publicExponent,\n+\t\t\t      BigInteger privateExponent,\n+\t\t\t      BigInteger primeP,\n+\t\t\t      BigInteger primeQ,\n+\t\t\t      BigInteger primeExponentP,\n+\t\t\t      BigInteger primeExponentQ,\n+\t\t\t      BigInteger crtCoefficient)\n+  {\n+    super( modulus, privateExponent);\n+    this.publicExponent = publicExponent;\n+    this.primeP = primeP;\n+    this.primeQ = primeQ;\n+    this.primeExponentP = primeExponentP;\n+    this.primeExponentQ = primeExponentQ;\n+    this.crtCoefficient = crtCoefficient;\n+  }\n+\n+  /**\n+     Gets the RSA public exponent.\n+\n+     @return the RSA public exponent\n+  */\n+  public BigInteger getPublicExponent()\n+  {\n+    return this.publicExponent;\n+  }\n+\n+  /**\n+     Gets the RSA prime P.\n+\n+     @return the RSA prime P\n+  */\n+  public BigInteger getPrimeP()\n+  {\n+    return this.primeP;\n+  }\n+\n+  /**\n+     Gets the RSA prime Q.\n+\n+     @return the RSA prime Q\n+  */\n+  public BigInteger getPrimeQ()\n+  {\n+    return this.primeQ;\n+  }\n+\n+  /**\n+     Gets the RSA prime exponent P.\n+\n+     @return the RSA prime exponent P\n+  */\n+  public BigInteger getPrimeExponentP()\n+  {\n+    return this.primeExponentP;\n+  }\n+\n+  /**\n+     Gets the RSA prime exponent P.\n+\n+     @return the RSA prime exponent Q\n+  */\n+  public BigInteger getPrimeExponentQ()\n+  {\n+    return this.primeExponentQ;\n+  }\n+\n+  /**\n+     Gets the RSA CRT coefficient.\n+\n+     @return the RSA CRT coefficient\n+  */\n+  public BigInteger getCrtCoefficient()\n+  {\n+    return this.crtCoefficient;\n+  }\n+\n }"}, {"sha": "a502950ebaa5c58feed35f7d4e07df9c4caa938f", "filename": "libjava/java/security/spec/RSAPrivateKeySpec.java", "status": "modified", "additions": 67, "deletions": 13, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FRSAPrivateKeySpec.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FRSAPrivateKeySpec.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fspec%2FRSAPrivateKeySpec.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,23 +1,77 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* RSAPrivateKeySpec.java --- RSA Private Key Specificaton class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.security.spec;\n+import java.math.BigInteger;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 7, 2000.\n- */\n+\tRSA Private Key class Specification. Used to maintain the RSA\n+\tPrivate Keys.\n \n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Stubbed.\n- */\n- \n-// JDK1.2\n+\t@since JDK 1.2\n+\n+\t@author Mark Benvenuto\n+*/\n public class RSAPrivateKeySpec implements KeySpec\n {\n+  private BigInteger modulus;\n+  private BigInteger privateExponent;\n+\n+  /**\n+     Constructs a new RSAPrivateKeySpec with the specified\n+     modulus and privateExponent.\n+\n+     @param modulus the RSA modulus\n+     @param privateExponent the private key exponent\n+  */\n+  public RSAPrivateKeySpec(BigInteger modulus, BigInteger privateExponent)\n+  {\n+    this.modulus = modulus;\n+    this.privateExponent = privateExponent;\n+  }\n+\n+  /**\n+     Gets the RSA modulus.\n+\n+     @return the RSA modulus\n+  */\n+  public BigInteger getModulus()\n+  {\n+    return this.modulus;\n+  }\n+\n+  /**\n+     Gets the RSA private exponent.\n+\n+     @return the RSA private exponent\n+  */\n+  public BigInteger getPrivateExponent()\n+  {\n+    return this.privateExponent;\n+  }\n+\n }"}, {"sha": "0024a08eeee91f824aa2b6d33244d670314d06c8", "filename": "libjava/java/security/spec/RSAPublicKeySpec.java", "status": "modified", "additions": 67, "deletions": 13, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FRSAPublicKeySpec.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FRSAPublicKeySpec.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fspec%2FRSAPublicKeySpec.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -1,23 +1,77 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* RSAPublicKeySpec.java --- RSA Public Key Specificaton class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.security.spec;\n+import java.math.BigInteger;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 10, 2000.\n- */\n+\tRSA Public Key class Specification. Used to maintain the RSA\n+\tPublic Keys.\n \n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Stubbed.\n- */\n- \n-// JDK1.2\n+\t@since JDK 1.2\n+\n+\t@author Mark Benvenuto\n+*/\n public class RSAPublicKeySpec implements KeySpec\n {\n+  private BigInteger modulus;\n+  private BigInteger publicExponent;\n+\n+  /**\n+     Constructs a new RSAPublicKeySpec with the specified\n+     modulus and publicExponent.\n+\n+     @param modulus the RSA modulus\n+     @param publicExponent the public key exponent\n+  */\n+  public RSAPublicKeySpec(BigInteger modulus, BigInteger publicExponent)\n+  {\n+    this.modulus = modulus;\n+    this.publicExponent = publicExponent;\n+  }\n+\n+  /**\n+     Gets the RSA modulus.\n+\n+     @return the RSA modulus\n+  */\n+  public BigInteger getModulus()\n+  {\n+    return this.modulus;\n+  }\n+\n+  /**\n+     Gets the RSA public exponent.\n+\n+     @return the RSA public exponent\n+  */\n+  public BigInteger getPublicExponent()\n+  {\n+    return this.publicExponent;\n+  }\n+\n }"}, {"sha": "165b543c0e15f0cb038ac3106d8179d134eea4ed", "filename": "libjava/java/security/spec/X509EncodedKeySpec.java", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FX509EncodedKeySpec.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f7d9d05ad70afad626d4bc54c633d31eb7430a/libjava%2Fjava%2Fsecurity%2Fspec%2FX509EncodedKeySpec.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fspec%2FX509EncodedKeySpec.java?ref=28f7d9d05ad70afad626d4bc54c633d31eb7430a", "patch": "@@ -0,0 +1,71 @@\n+/* X509EncodedKeySpec.java --- X.509 Encoded Key Specificaton class\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.security.spec;\n+\n+/**\n+\tX.509 Encoded Key Specification class which is used to store \n+\t\"X.509\" byte encoded keys.\n+\n+\t@since JDK 1.2\n+\n+\t@author Mark Benvenuto\n+*/\n+public class X509EncodedKeySpec extends EncodedKeySpec\n+{\n+\n+  /**\n+     Constructs a new X509EncodedKeySpec with the specified encoded key.\n+\n+     @param encodedKey A key to store, assumed to be \"X.509\"\n+  */\n+  public X509EncodedKeySpec(byte[] encodedKey)\n+  {\n+    super( encodedKey );\n+  }\n+\n+  /**\n+     Gets the encoded key in byte format.\n+\n+     @returns the encoded key\n+  */\n+  public byte[] getEncoded()\n+  {\n+    return super.getEncoded();\n+  }\n+\n+  /**\n+     Returns the name of the key format used which is \"X.509\"\n+\n+     @return a string representing the name\n+  */\n+  public String getFormat()\n+  {\n+    return \"X.509\";\n+  }\n+\n+}"}]}