{"sha": "65958285a0d780258a51b32017ccce33ddd834c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU5NTgyODVhMGQ3ODAyNThhNTFiMzIwMTdjY2NlMzNkZGQ4MzRjNg==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2004-11-02T20:29:21Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2004-11-02T20:29:21Z"}, "message": "c-lang.c (LANG_HOOKS_TYPES_COMPATIBLE_P): Remove.\n\n[gcc/ChangeLog]\n2004-11-02  Ziemowit Laski  <zlaski@apple.com>\n\n\t* c-lang.c (LANG_HOOKS_TYPES_COMPATIBLE_P): Remove.\n\t(c_types_compatible_p): Move function definition...\n\t* c-objc-common.c (c_types_compatible_p): ...here.\n\t* c-objc-common.h (LANG_HOOKS_TYPES_COMPATIBLE_P): Moved here from\n\tc-lang.c.\n\n[gcc/cp/ChangeLog]\n2004-11-02  Ziemowit Laski  <zlaski@apple.com>\n\n\t* cp-lang.c (cxx_types_compatible_p): Remove prototype and definition.\n\t(LANG_HOOKS_TYPES_COMPATIBLE_P): Move to cp-objcp-common.h.\n\t* cp-objcp-common.c (cxx_types_compatible_p): Moved definition here\n\tfrom cp-lang.c.\n\t* cp-objcp-common.h (cxx_types_compatible_p): Moved prototype here\n\tfrom cp-lang.c.\n\t(LANG_HOOKS_TYPES_COMPATIBLE_P): Moved here from cp-lang.c.\n\nFrom-SVN: r89997", "tree": {"sha": "5a4b016e43899a5b48fc6e95881c03a32063597f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a4b016e43899a5b48fc6e95881c03a32063597f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65958285a0d780258a51b32017ccce33ddd834c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65958285a0d780258a51b32017ccce33ddd834c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65958285a0d780258a51b32017ccce33ddd834c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65958285a0d780258a51b32017ccce33ddd834c6/comments", "author": null, "committer": null, "parents": [{"sha": "bd80bd9b93b62fa5388caac9e7adf33c05de52be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd80bd9b93b62fa5388caac9e7adf33c05de52be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd80bd9b93b62fa5388caac9e7adf33c05de52be"}], "stats": {"total": 80, "additions": 49, "deletions": 31}, "files": [{"sha": "7f09ec28e7548290b65a1ac5004f862a07d87c05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65958285a0d780258a51b32017ccce33ddd834c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65958285a0d780258a51b32017ccce33ddd834c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65958285a0d780258a51b32017ccce33ddd834c6", "patch": "@@ -1,3 +1,11 @@\n+2004-11-02  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* c-lang.c (LANG_HOOKS_TYPES_COMPATIBLE_P): Remove.\n+\t(c_types_compatible_p): Move function definition...\n+\t* c-objc-common.c (c_types_compatible_p): ...here.\n+\t* c-objc-common.h (LANG_HOOKS_TYPES_COMPATIBLE_P): Moved here from\n+\tc-lang.c.\n+\n 2004-11-02  Steven Bosscher  <stevenb@suse.de>\n \n \t* cfgloop.h (struct loop): Update comment."}, {"sha": "8eb090c4d62ddc86e2f47845623320d6eba7527f", "filename": "gcc/c-lang.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65958285a0d780258a51b32017ccce33ddd834c6/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65958285a0d780258a51b32017ccce33ddd834c6/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=65958285a0d780258a51b32017ccce33ddd834c6", "patch": "@@ -44,8 +44,6 @@ enum c_language_kind c_language = clk_c;\n #define LANG_HOOKS_NAME \"GNU C\"\n #undef LANG_HOOKS_INIT\n #define LANG_HOOKS_INIT c_objc_common_init\n-#undef LANG_HOOKS_TYPES_COMPATIBLE_P\n-#define LANG_HOOKS_TYPES_COMPATIBLE_P c_types_compatible_p\n \n /* Each front end provides its own lang hook initializer.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n@@ -92,10 +90,4 @@ finish_file (void)\n {\n }\n \n-int\n-c_types_compatible_p (tree x, tree y)\n-{\n-    return comptypes (TYPE_MAIN_VARIANT (x), TYPE_MAIN_VARIANT (y));\n-}\n-\n #include \"gtype-c.h\""}, {"sha": "d9e8b93e481e3578ca9f6be4e8c37e8d26057bea", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65958285a0d780258a51b32017ccce33ddd834c6/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65958285a0d780258a51b32017ccce33ddd834c6/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=65958285a0d780258a51b32017ccce33ddd834c6", "patch": "@@ -296,3 +296,9 @@ c_initialize_diagnostics (diagnostic_context *context)\n   /* It is safe to free this object because it was previously XNEW()'d.  */\n   XDELETE (base);\n }\n+\n+int\n+c_types_compatible_p (tree x, tree y)\n+{\n+    return comptypes (TYPE_MAIN_VARIANT (x), TYPE_MAIN_VARIANT (y));\n+}"}, {"sha": "4c7be6327ab7a496a20f8e1dfcbb41cfa8acf064", "filename": "gcc/c-objc-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65958285a0d780258a51b32017ccce33ddd834c6/gcc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65958285a0d780258a51b32017ccce33ddd834c6/gcc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.h?ref=65958285a0d780258a51b32017ccce33ddd834c6", "patch": "@@ -66,6 +66,8 @@ extern void c_initialize_diagnostics (diagnostic_context *);\n #define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL c_warn_unused_global_decl\n #undef LANG_HOOKS_PRINT_IDENTIFIER\n #define LANG_HOOKS_PRINT_IDENTIFIER c_print_identifier\n+#undef LANG_HOOKS_TYPES_COMPATIBLE_P\n+#define LANG_HOOKS_TYPES_COMPATIBLE_P c_types_compatible_p\n #undef LANG_HOOKS_FUNCTION_ENTER_NESTED\n #define LANG_HOOKS_FUNCTION_ENTER_NESTED c_push_function_context\n #undef LANG_HOOKS_FUNCTION_LEAVE_NESTED"}, {"sha": "61691e9d98c24fc3b89bc3a4f82837047fc33bb6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65958285a0d780258a51b32017ccce33ddd834c6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65958285a0d780258a51b32017ccce33ddd834c6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=65958285a0d780258a51b32017ccce33ddd834c6", "patch": "@@ -1,3 +1,13 @@\n+2004-11-02  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* cp-lang.c (cxx_types_compatible_p): Remove prototype and definition.\n+\t(LANG_HOOKS_TYPES_COMPATIBLE_P): Move to cp-objcp-common.h.\n+\t* cp-objcp-common.c (cxx_types_compatible_p): Moved definition here\n+\tfrom cp-lang.c.\n+\t* cp-objcp-common.h (cxx_types_compatible_p): Moved prototype here\n+\tfrom cp-lang.c.\n+\t(LANG_HOOKS_TYPES_COMPATIBLE_P): Moved here from cp-lang.c.\n+\n 2004-11-01  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/18064"}, {"sha": "da5d6fb5cb202d3659797b2aece8553ea6a26d4e", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65958285a0d780258a51b32017ccce33ddd834c6/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65958285a0d780258a51b32017ccce33ddd834c6/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=65958285a0d780258a51b32017ccce33ddd834c6", "patch": "@@ -39,16 +39,12 @@ enum c_language_kind c_language = clk_cxx;\n /* Lang hooks common to C++ and ObjC++ are declared in cp/cp-objcp-common.h;\n    consequently, there should be very few hooks below.  */\n \n-static int cxx_types_compatible_p (tree, tree);\n-\n #undef LANG_HOOKS_NAME\n #define LANG_HOOKS_NAME \"GNU C++\"\n #undef LANG_HOOKS_INIT\n #define LANG_HOOKS_INIT cxx_init\n #undef LANG_HOOKS_DECL_PRINTABLE_NAME\n #define LANG_HOOKS_DECL_PRINTABLE_NAME\tcxx_printable_name\n-#undef LANG_HOOKS_TYPES_COMPATIBLE_P\n-#define LANG_HOOKS_TYPES_COMPATIBLE_P cxx_types_compatible_p\n #undef LANG_HOOKS_FOLD_OBJ_TYPE_REF\n #define LANG_HOOKS_FOLD_OBJ_TYPE_REF cp_fold_obj_type_ref\n \n@@ -99,25 +95,6 @@ const char *const tree_code_name[] = {\n /* Lang hook routines common to C++ and ObjC++ appear in cp/cp-objcp-common.c;\n    there should be very few routines below.  */\n \n-/* This compares two types for equivalence (\"compatible\" in C-based languages).\n-   This routine should only return 1 if it is sure.  It should not be used\n-   in contexts where erroneously returning 0 causes problems.  */\n-\n-static int cxx_types_compatible_p (tree x, tree y)\n-{\n-  if (same_type_ignoring_top_level_qualifiers_p (x, y))\n-    return 1;\n-\n-  /* Once we get to the middle-end, references and pointers are\n-     interchangeable.  FIXME should we try to replace all references with\n-     pointers?  */\n-  if (POINTER_TYPE_P (x) && POINTER_TYPE_P (y)\n-      && same_type_p (TREE_TYPE (x), TREE_TYPE (y)))\n-    return 1;\n-\n-  return 0;\n-}\n-\n /* The following function does something real, but only in Objective-C++.  */\n \n tree"}, {"sha": "a58549b7326894c3921813eb2be7bf37e663c01e", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65958285a0d780258a51b32017ccce33ddd834c6/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65958285a0d780258a51b32017ccce33ddd834c6/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=65958285a0d780258a51b32017ccce33ddd834c6", "patch": "@@ -148,6 +148,26 @@ cxx_initialize_diagnostics (diagnostic_context *context)\n   free (base);\n }\n \n+/* This compares two types for equivalence (\"compatible\" in C-based languages).\n+   This routine should only return 1 if it is sure.  It should not be used\n+   in contexts where erroneously returning 0 causes problems.  */\n+\n+int\n+cxx_types_compatible_p (tree x, tree y)\n+{\n+  if (same_type_ignoring_top_level_qualifiers_p (x, y))\n+    return 1;\n+\n+  /* Once we get to the middle-end, references and pointers are\n+     interchangeable.  FIXME should we try to replace all references with\n+     pointers?  */\n+  if (POINTER_TYPE_P (x) && POINTER_TYPE_P (y)\n+      && same_type_p (TREE_TYPE (x), TREE_TYPE (y)))\n+    return 1;\n+\n+  return 0;\n+}\n+\n /* Stubs to keep c-opts.c happy.  */\n void\n push_file_scope (void)"}, {"sha": "7a2a2343b7c379e0713f43ea16655abf9cba2cd4", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65958285a0d780258a51b32017ccce33ddd834c6/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65958285a0d780258a51b32017ccce33ddd834c6/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=65958285a0d780258a51b32017ccce33ddd834c6", "patch": "@@ -30,6 +30,7 @@ extern tree cp_expr_size (tree);\n extern size_t cp_tree_size (enum tree_code);\n extern bool cp_var_mod_type_p (tree, tree);\n extern void cxx_initialize_diagnostics (struct diagnostic_context *);\n+extern int cxx_types_compatible_p (tree, tree);\n \n /* In cp/cp-lang.c and objcp/objcp-lang.c.  */\n \n@@ -86,6 +87,8 @@ extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t,\n #define LANG_HOOKS_PRINT_TYPE cxx_print_type\n #undef LANG_HOOKS_PRINT_IDENTIFIER\n #define LANG_HOOKS_PRINT_IDENTIFIER cxx_print_identifier\n+#undef LANG_HOOKS_TYPES_COMPATIBLE_P\n+#define LANG_HOOKS_TYPES_COMPATIBLE_P cxx_types_compatible_p\n #undef LANG_HOOKS_PRINT_ERROR_FUNCTION\n #define LANG_HOOKS_PRINT_ERROR_FUNCTION\tcxx_print_error_function\n #undef LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL"}]}