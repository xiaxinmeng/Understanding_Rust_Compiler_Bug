{"sha": "b1d673bef74ea8295ec3775ec3133a478f9593f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFkNjczYmVmNzRlYTgyOTVlYzM3NzVlYzMxMzNhNDc4Zjk1OTNmNw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-05-30T21:41:21Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-05-30T21:41:21Z"}, "message": "emit-rtl.c (gen_complex_constant_part): New function for getting the constant real or imaginary part of a complex constant.\n\n\n\t* emit-rtl.c (gen_complex_constant_part): New function for getting\n\tthe constant real or imaginary part of a complex constant.\n\t(gen_realpart): Use it.\n\t(gen_imagpart): Likewise.\n\nFrom-SVN: r67252", "tree": {"sha": "e3f7936041f7780813578631d0a29df7c23cc0c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3f7936041f7780813578631d0a29df7c23cc0c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1d673bef74ea8295ec3775ec3133a478f9593f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d673bef74ea8295ec3775ec3133a478f9593f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1d673bef74ea8295ec3775ec3133a478f9593f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d673bef74ea8295ec3775ec3133a478f9593f7/comments", "author": null, "committer": null, "parents": [{"sha": "65d2d7642efba08fbd9aa2c46f17ef3fedd1946a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65d2d7642efba08fbd9aa2c46f17ef3fedd1946a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65d2d7642efba08fbd9aa2c46f17ef3fedd1946a"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "07455ab8d2a208b7851795dbd35858aa6f5cecca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d673bef74ea8295ec3775ec3133a478f9593f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d673bef74ea8295ec3775ec3133a478f9593f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1d673bef74ea8295ec3775ec3133a478f9593f7", "patch": "@@ -1,3 +1,10 @@\n+2003-05-30  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* emit-rtl.c (gen_complex_constant_part): New function for getting\n+\tthe constant real or imaginary part of a complex constant.\n+\t(gen_realpart): Use it.\n+\t(gen_imagpart): Likewise.\n+\n 2003-05-30  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* doc/invoke.texi: Fix typos."}, {"sha": "1bb79dd0aa44a1e56ccaa1debe2ee9dca7487b21", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d673bef74ea8295ec3775ec3133a478f9593f7/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d673bef74ea8295ec3775ec3133a478f9593f7/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=b1d673bef74ea8295ec3775ec3133a478f9593f7", "patch": "@@ -202,6 +202,8 @@ static int reg_attrs_htab_eq            PARAMS ((const void *,\n static reg_attrs *get_reg_attrs\t\tPARAMS ((tree, int));\n static tree component_ref_for_mem_expr\tPARAMS ((tree));\n static rtx gen_const_vector_0\t\tPARAMS ((enum machine_mode));\n+static rtx gen_complex_constant_part\tPARAMS ((enum machine_mode,\n+\t\t\t\t\t\t rtx, int));\n \n /* Probability of the conditional branch currently proceeded by try_split.\n    Set to -1 otherwise.  */\n@@ -1294,6 +1296,35 @@ gen_lowpart_common (mode, x)\n   return 0;\n }\n \f\n+/* Return the constant real or imaginary part (which has mode MODE)\n+   of a complex value X.  The IMAGPART_P argument determines whether\n+   the real or complex component should be returned.  This function\n+   returns NULL_RTX if the component isn't a constant.  */\n+\n+static rtx\n+gen_complex_constant_part (mode, x, imagpart_p)\n+     enum machine_mode mode;\n+     rtx x;\n+     int imagpart_p;\n+{\n+  tree decl, part;\n+\n+  if (GET_CODE (x) == MEM\n+      && GET_CODE (XEXP (x, 0)) == SYMBOL_REF\n+      && TREE_CONSTANT_POOL_ADDRESS_P (XEXP (x, 0)))\n+    {\n+      decl = SYMBOL_REF_DECL (XEXP (x, 0));\n+      if (decl != NULL_TREE && TREE_CODE (decl) == COMPLEX_CST)\n+\t{\n+\t  part = imagpart_p ? TREE_IMAGPART (decl) : TREE_REALPART (decl);\n+\t  if (TREE_CODE (part) == REAL_CST\n+\t      || TREE_CODE (part) == INTEGER_CST)\n+\t    return expand_expr (part, NULL_RTX, mode, 0);\n+\t}\n+    }\n+  return NULL_RTX;\n+}\n+\n /* Return the real part (which has mode MODE) of a complex value X.\n    This always comes at the low address in memory.  */\n \n@@ -1302,6 +1333,13 @@ gen_realpart (mode, x)\n      enum machine_mode mode;\n      rtx x;\n {\n+  rtx part;\n+\n+  /* Handle complex constants.  */\n+  part = gen_complex_constant_part (mode, x, 0);\n+  if (part != NULL_RTX)\n+    return part;\n+\n   if (WORDS_BIG_ENDIAN\n       && GET_MODE_BITSIZE (mode) < BITS_PER_WORD\n       && REG_P (x)\n@@ -1322,6 +1360,13 @@ gen_imagpart (mode, x)\n      enum machine_mode mode;\n      rtx x;\n {\n+  rtx part;\n+\n+  /* Handle complex constants.  */\n+  part = gen_complex_constant_part (mode, x, 1);\n+  if (part != NULL_RTX)\n+    return part;\n+\n   if (WORDS_BIG_ENDIAN)\n     return gen_lowpart (mode, x);\n   else if (! WORDS_BIG_ENDIAN"}]}