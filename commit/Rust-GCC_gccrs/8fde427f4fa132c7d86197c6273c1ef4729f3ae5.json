{"sha": "8fde427f4fa132c7d86197c6273c1ef4729f3ae5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZkZTQyN2Y0ZmExMzJjN2Q4NjE5N2M2MjczYzFlZjQ3MjlmM2FlNQ==", "commit": {"author": {"name": "Yufeng Zhang", "email": "yufeng.zhang@arm.com", "date": "2013-12-05T17:28:08Z"}, "committer": {"name": "Yufeng Zhang", "email": "yufeng@gcc.gnu.org", "date": "2013-12-05T17:28:08Z"}, "message": "gimple-ssa-strength-reduction.c (find_basis_for_candidate): Guard the get_alternative_base call with flag_expensive_optimizations.\n\ngcc/\n\n\t* gimple-ssa-strength-reduction.c (find_basis_for_candidate): Guard\n\tthe get_alternative_base call with flag_expensive_optimizations.\n\t(alloc_cand_and_find_basis): Likewise.\n\nFrom-SVN: r205713", "tree": {"sha": "65ea1d9cc7b0918e824467cd9492a4b543b5278f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65ea1d9cc7b0918e824467cd9492a4b543b5278f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fde427f4fa132c7d86197c6273c1ef4729f3ae5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fde427f4fa132c7d86197c6273c1ef4729f3ae5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fde427f4fa132c7d86197c6273c1ef4729f3ae5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fde427f4fa132c7d86197c6273c1ef4729f3ae5/comments", "author": null, "committer": null, "parents": [{"sha": "8c8952918b75f4fa6adbbe44cd641d5fd0bb55e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c8952918b75f4fa6adbbe44cd641d5fd0bb55e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c8952918b75f4fa6adbbe44cd641d5fd0bb55e3"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "58f9782598bb350c64517e7f3c23d44134e9f6c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fde427f4fa132c7d86197c6273c1ef4729f3ae5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fde427f4fa132c7d86197c6273c1ef4729f3ae5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8fde427f4fa132c7d86197c6273c1ef4729f3ae5", "patch": "@@ -1,3 +1,9 @@\n+2013-12-05  Yufeng Zhang  <yufeng.zhang@arm.com>\n+\n+\t* gimple-ssa-strength-reduction.c (find_basis_for_candidate): Guard\n+\tthe get_alternative_base call with flag_expensive_optimizations.\n+\t(alloc_cand_and_find_basis): Likewise.\n+\n 2013-12-05  Tejas Belagod  <tejas.belagod@arm.com>\n \n \t* rtlanal.c (set_noop_p): Return nonzero in case of redundant vec_select"}, {"sha": "f5148ea858b45b74bab47a63498460ad8b06a209", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fde427f4fa132c7d86197c6273c1ef4729f3ae5/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fde427f4fa132c7d86197c6273c1ef4729f3ae5/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=8fde427f4fa132c7d86197c6273c1ef4729f3ae5", "patch": "@@ -437,7 +437,10 @@ static struct pointer_map_t *alt_base_map;\n \n /* Given BASE, use the tree affine combiniation facilities to\n    find the underlying tree expression for BASE, with any\n-   immediate offset excluded.  */\n+   immediate offset excluded.\n+\n+   N.B. we should eliminate this backtracking with better forward\n+   analysis in a future release.  */\n \n static tree\n get_alternative_base (tree base)\n@@ -565,7 +568,7 @@ find_basis_for_candidate (slsr_cand_t c)\n \t}\n     }\n \n-  if (!basis && c->kind == CAND_REF)\n+  if (flag_expensive_optimizations && !basis && c->kind == CAND_REF)\n     {\n       tree alt_base_expr = get_alternative_base (c->base_expr);\n       if (alt_base_expr)\n@@ -650,7 +653,7 @@ alloc_cand_and_find_basis (enum cand_kind kind, gimple gs, tree base,\n     c->basis = find_basis_for_candidate (c);\n \n   record_potential_basis (c, base);\n-  if (kind == CAND_REF)\n+  if (flag_expensive_optimizations && kind == CAND_REF)\n     {\n       tree alt_base = get_alternative_base (base);\n       if (alt_base)"}]}