{"sha": "6f78c52d4bd08caec4f3b11ad2302e7cde044c1e", "node_id": "C_kwDOANBUbNoAKDZmNzhjNTJkNGJkMDhjYWVjNGYzYjExYWQyMzAyZTdjZGUwNDRjMWU", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-30T09:45:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-05-02T22:05:06Z"}, "message": "c++: improve template-id location\n\nOn PR102629 I noticed that we were giving the entire lambda as the location\nfor this template-id.\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (tsubst_copy_and_build) [TEMPLATE_ID_EXPR]: Copy location.\n\t(do_auto_deduction): Use expr location.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/lambda-pack-init7.C: Check column number.", "tree": {"sha": "b4ae10b84de404f1e80ce51c85b1170c72dcf87b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4ae10b84de404f1e80ce51c85b1170c72dcf87b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f78c52d4bd08caec4f3b11ad2302e7cde044c1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f78c52d4bd08caec4f3b11ad2302e7cde044c1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f78c52d4bd08caec4f3b11ad2302e7cde044c1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f78c52d4bd08caec4f3b11ad2302e7cde044c1e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcb4bd0789d13dd4d07428bff712d01d3ea71ebe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcb4bd0789d13dd4d07428bff712d01d3ea71ebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcb4bd0789d13dd4d07428bff712d01d3ea71ebe"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "3edee50924f6a71a5e8f14cc687f97e0bdb0ef08", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f78c52d4bd08caec4f3b11ad2302e7cde044c1e/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f78c52d4bd08caec4f3b11ad2302e7cde044c1e/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=6f78c52d4bd08caec4f3b11ad2302e7cde044c1e", "patch": "@@ -20091,6 +20091,7 @@ tsubst_copy_and_build (tree t,\n \t  object = NULL_TREE;\n \n \ttree tid = lookup_template_function (templ, targs);\n+\tprotected_set_expr_location (tid, EXPR_LOCATION (t));\n \n \tif (object)\n \t  RETURN (build3 (COMPONENT_REF, TREE_TYPE (tid),\n@@ -30181,6 +30182,8 @@ do_auto_deduction (tree type, tree init, tree auto_node,\n     /* Nothing we can do with this, even in deduction context.  */\n     return type;\n \n+  location_t loc = cp_expr_loc_or_input_loc (init);\n+\n   /* [dcl.spec.auto]: Obtain P from T by replacing the occurrences of auto\n      with either a new invented type template parameter U or, if the\n      initializer is a braced-init-list (8.5.4), with\n@@ -30195,9 +30198,9 @@ do_auto_deduction (tree type, tree init, tree auto_node,\n \t{\n           if (complain & tf_warning_or_error)\n             {\n-\t      if (permerror (input_location, \"direct-list-initialization of \"\n+\t      if (permerror (loc, \"direct-list-initialization of \"\n \t\t\t     \"%<auto%> requires exactly one element\"))\n-\t        inform (input_location,\n+\t\tinform (loc,\n \t\t        \"for deduction to %<std::initializer_list%>, use copy-\"\n \t\t        \"list-initialization (i.e. add %<=%> before the %<{%>)\");\n             }\n@@ -30288,9 +30291,10 @@ do_auto_deduction (tree type, tree init, tree auto_node,\n \t\t  && (auto_node\n \t\t      == DECL_SAVED_AUTO_RETURN_TYPE (current_function_decl))\n \t\t  && LAMBDA_FUNCTION_P (current_function_decl))\n-\t\terror (\"unable to deduce lambda return type from %qE\", init);\n+\t\terror_at (loc, \"unable to deduce lambda return type from %qE\",\n+\t\t\t  init);\n \t      else\n-\t\terror (\"unable to deduce %qT from %qE\", type, init);\n+\t\terror_at (loc, \"unable to deduce %qT from %qE\", type, init);\n \t      type_unification_real (tparms, targs, parms, &init, 1, 0,\n \t\t\t\t     DEDUCE_CALL,\n \t\t\t\t     NULL, /*explain_p=*/true);\n@@ -30362,23 +30366,23 @@ do_auto_deduction (tree type, tree init, tree auto_node,\n \t\t{\n \t\tcase adc_unspecified:\n \t\tcase adc_unify:\n-\t\t  error(\"placeholder constraints not satisfied\");\n+\t\t  error_at (loc, \"placeholder constraints not satisfied\");\n \t\t  break;\n \t\tcase adc_variable_type:\n \t\tcase adc_decomp_type:\n-\t\t  error (\"deduced initializer does not satisfy \"\n-\t\t\t \"placeholder constraints\");\n+\t\t  error_at (loc, \"deduced initializer does not satisfy \"\n+\t\t\t    \"placeholder constraints\");\n \t\t  break;\n \t\tcase adc_return_type:\n-\t\t  error (\"deduced return type does not satisfy \"\n-\t\t\t \"placeholder constraints\");\n+\t\t  error_at (loc, \"deduced return type does not satisfy \"\n+\t\t\t    \"placeholder constraints\");\n \t\t  break;\n \t\tcase adc_requirement:\n-\t\t  error (\"deduced expression type does not satisfy \"\n-\t\t\t \"placeholder constraints\");\n+\t\t  error_at (loc, \"deduced expression type does not satisfy \"\n+\t\t\t    \"placeholder constraints\");\n \t\t  break;\n \t\t}\n-\t      diagnose_constraints (input_location, auto_node, full_targs);\n+\t      diagnose_constraints (loc, auto_node, full_targs);\n \t    }\n \t  return error_mark_node;\n \t}"}, {"sha": "face7258c2ee32698d144b9e27628f9eb424bff0", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-pack-init7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f78c52d4bd08caec4f3b11ad2302e7cde044c1e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f78c52d4bd08caec4f3b11ad2302e7cde044c1e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-pack-init7.C?ref=6f78c52d4bd08caec4f3b11ad2302e7cde044c1e", "patch": "@@ -8,7 +8,7 @@ struct S {};\n \n template <typename... Args>\n void foo(Args&&... args) {\n-  [...args = forward<Args> /*(args)*/] { // { dg-error \"\" }\n+  [...args = forward<Args> /*(args)*/] { // { dg-error \"14:\" }\n     [](auto...) { } (forward<Args>(args)...);\n   };\n }"}]}