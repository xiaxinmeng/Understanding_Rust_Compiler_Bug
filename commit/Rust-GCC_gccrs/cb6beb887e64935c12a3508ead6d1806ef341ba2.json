{"sha": "cb6beb887e64935c12a3508ead6d1806ef341ba2", "node_id": "C_kwDOANBUbNoAKGNiNmJlYjg4N2U2NDkzNWMxMmEzNTA4ZWFkNmQxODA2ZWYzNDFiYTI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-02-11T00:24:47Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-02-16T11:34:20Z"}, "message": "libstdc++: Fix non-reserved names in PSTL headers\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/pstl/algorithm_fwd.h (__pattern_search_n)\n\t(__brick_unique_copy, __brick_adjacent_find)\n\t(__brick_generate_n, __pattern_generate_n): Use reserved names\n\tfor parameters.\n\t* include/pstl/algorithm_impl.h (__brick_unique_copy)\n\t(__pattern_reverse, __brick_generate_n): Likewise.\n\t* include/pstl/execution_impl.h (__prefer_unsequenced_tag)\n\t(__prefer_parallel_tag): Likewise.\n\t* include/pstl/glue_algorithm_impl.h (transform): Likewise.\n\t* include/pstl/glue_numeric_defs.h (adjacent_difference):\n\tLikewise.\n\t* include/pstl/numeric_impl.h (__brick_adjacent_difference):\n\tLikewise.\n\t* include/pstl/parallel_backend_tbb.h (__merge_func): Likewise.\n\t* include/pstl/unseq_backend_simd.h (_Combiner)\n\t(__simd_min_element, __simd_minmax_element): Likewise.\n\t* testsuite/17_intro/names_pstl.cc: New test.", "tree": {"sha": "de06cac451cc60edba9e1cb781ac9601a7e7fb25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de06cac451cc60edba9e1cb781ac9601a7e7fb25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb6beb887e64935c12a3508ead6d1806ef341ba2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb6beb887e64935c12a3508ead6d1806ef341ba2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb6beb887e64935c12a3508ead6d1806ef341ba2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb6beb887e64935c12a3508ead6d1806ef341ba2/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b9bd33d69d0c30330a465e6bad262d90c94d4ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b9bd33d69d0c30330a465e6bad262d90c94d4ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b9bd33d69d0c30330a465e6bad262d90c94d4ea"}], "stats": {"total": 110, "additions": 63, "deletions": 47}, "files": [{"sha": "e85125c4dc70a09f84835b222877ed627aab78fa", "filename": "libstdc++-v3/include/pstl/algorithm_fwd.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb6beb887e64935c12a3508ead6d1806ef341ba2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Falgorithm_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb6beb887e64935c12a3508ead6d1806ef341ba2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Falgorithm_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Falgorithm_fwd.h?ref=cb6beb887e64935c12a3508ead6d1806ef341ba2", "patch": "@@ -364,17 +364,17 @@ __brick_search_n(_ForwardIterator, _ForwardIterator, _Size, const _Tp&, _BinaryP\n                  /*vector=*/std::true_type) noexcept;\n \n template <class _ExecutionPolicy, class _ForwardIterator, class _Size, class _Tp, class _BinaryPredicate,\n-          class IsVector>\n+          class _IsVector>\n _ForwardIterator\n __pattern_search_n(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _Size, const _Tp&, _BinaryPredicate,\n-                   IsVector,\n+\t\t   _IsVector,\n                    /*is_parallel=*/std::false_type) noexcept;\n \n template <class _ExecutionPolicy, class _RandomAccessIterator, class _Size, class _Tp, class _BinaryPredicate,\n-          class IsVector>\n+          class _IsVector>\n _RandomAccessIterator\n __pattern_search_n(_ExecutionPolicy&&, _RandomAccessIterator, _RandomAccessIterator, _Size, const _Tp&,\n-                   _BinaryPredicate, IsVector,\n+                   _BinaryPredicate, _IsVector,\n                    /*is_parallel=*/std::true_type) noexcept;\n \n //------------------------------------------------------------------------\n@@ -528,8 +528,8 @@ __pattern_unique(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _Binary\n // unique_copy\n //------------------------------------------------------------------------\n \n-template <class _ForwardIterator, class OutputIterator, class _BinaryPredicate>\n-OutputIterator __brick_unique_copy(_ForwardIterator, _ForwardIterator, OutputIterator, _BinaryPredicate,\n+template <class _ForwardIterator, class _OutputIterator, class _BinaryPredicate>\n+  _OutputIterator __brick_unique_copy(_ForwardIterator, _ForwardIterator, _OutputIterator, _BinaryPredicate,\n                                    /*vector=*/std::false_type) noexcept;\n \n template <class _RandomAccessIterator, class _OutputIterator, class _BinaryPredicate>\n@@ -823,12 +823,12 @@ __pattern_partial_sort_copy(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterat\n template <class _ForwardIterator, class _BinaryPredicate>\n _ForwardIterator\n __brick_adjacent_find(_ForwardIterator, _ForwardIterator, _BinaryPredicate,\n-                      /* IsVector = */ std::true_type, bool) noexcept;\n+                      /* _IsVector = */ std::true_type, bool) noexcept;\n \n template <class _ForwardIterator, class _BinaryPredicate>\n _ForwardIterator\n __brick_adjacent_find(_ForwardIterator, _ForwardIterator, _BinaryPredicate,\n-                      /* IsVector = */ std::false_type, bool) noexcept;\n+                      /* _IsVector = */ std::false_type, bool) noexcept;\n \n template <class _ExecutionPolicy, class _ForwardIterator, class _BinaryPredicate, class _IsVector>\n _ForwardIterator\n@@ -920,22 +920,22 @@ _ForwardIterator\n __pattern_generate(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _Generator,\n                    /*is_parallel=*/std::true_type, _IsVector);\n \n-template <class OutputIterator, class Size, class _Generator>\n-OutputIterator __brick_generate_n(OutputIterator, Size, _Generator,\n+template <class _OutputIterator, class _Size, class _Generator>\n+  _OutputIterator __brick_generate_n(_OutputIterator, _Size, _Generator,\n                                   /* is_vector = */ std::true_type) noexcept;\n \n-template <class OutputIterator, class Size, class _Generator>\n-OutputIterator __brick_generate_n(OutputIterator, Size, _Generator,\n+template <class _OutputIterator, class _Size, class _Generator>\n+  _OutputIterator __brick_generate_n(_OutputIterator, _Size, _Generator,\n                                   /* is_vector = */ std::false_type) noexcept;\n \n-template <class _ExecutionPolicy, class OutputIterator, class Size, class _Generator, class _IsVector>\n-OutputIterator\n-__pattern_generate_n(_ExecutionPolicy&&, OutputIterator, Size, _Generator,\n+template <class _ExecutionPolicy, class _OutputIterator, class _Size, class _Generator, class _IsVector>\n+  _OutputIterator\n+__pattern_generate_n(_ExecutionPolicy&&, _OutputIterator, _Size, _Generator,\n                      /*is_parallel=*/std::false_type, _IsVector) noexcept;\n \n-template <class _ExecutionPolicy, class OutputIterator, class Size, class _Generator, class _IsVector>\n-OutputIterator\n-__pattern_generate_n(_ExecutionPolicy&&, OutputIterator, Size, _Generator,\n+template <class _ExecutionPolicy, class _OutputIterator, class _Size, class _Generator, class _IsVector>\n+  _OutputIterator\n+__pattern_generate_n(_ExecutionPolicy&&, _OutputIterator, _Size, _Generator,\n                      /*is_parallel=*/std::true_type, _IsVector);\n \n //------------------------------------------------------------------------"}, {"sha": "32c19990ed0fb4c1993ff9702cffcc3fc34b0176", "filename": "libstdc++-v3/include/pstl/algorithm_impl.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb6beb887e64935c12a3508ead6d1806ef341ba2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Falgorithm_impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb6beb887e64935c12a3508ead6d1806ef341ba2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Falgorithm_impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Falgorithm_impl.h?ref=cb6beb887e64935c12a3508ead6d1806ef341ba2", "patch": "@@ -1293,17 +1293,17 @@ __pattern_unique(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIt\n // unique_copy\n //------------------------------------------------------------------------\n \n-template <class _ForwardIterator, class OutputIterator, class _BinaryPredicate>\n-OutputIterator\n-__brick_unique_copy(_ForwardIterator __first, _ForwardIterator __last, OutputIterator __result, _BinaryPredicate __pred,\n+template <class _ForwardIterator, class _OutputIterator, class _BinaryPredicate>\n+  _OutputIterator\n+__brick_unique_copy(_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, _BinaryPredicate __pred,\n                     /*vector=*/std::false_type) noexcept\n {\n     return std::unique_copy(__first, __last, __result, __pred);\n }\n \n-template <class _RandomAccessIterator, class OutputIterator, class _BinaryPredicate>\n-OutputIterator\n-__brick_unique_copy(_RandomAccessIterator __first, _RandomAccessIterator __last, OutputIterator __result,\n+template <class _RandomAccessIterator, class _OutputIterator, class _BinaryPredicate>\n+  _OutputIterator\n+__brick_unique_copy(_RandomAccessIterator __first, _RandomAccessIterator __last, _OutputIterator __result,\n                     _BinaryPredicate __pred, /*vector=*/std::true_type) noexcept\n {\n #if (_PSTL_MONOTONIC_PRESENT)\n@@ -1449,10 +1449,10 @@ __brick_reverse(_BidirectionalIterator __first, _BidirectionalIterator __last, _\n template <class _ExecutionPolicy, class _BidirectionalIterator, class _IsVector>\n void\n __pattern_reverse(_ExecutionPolicy&&, _BidirectionalIterator __first, _BidirectionalIterator __last,\n-                  _IsVector _is_vector,\n+                  _IsVector __is_vector,\n                   /*is_parallel=*/std::false_type) noexcept\n {\n-    __internal::__brick_reverse(__first, __last, _is_vector);\n+    __internal::__brick_reverse(__first, __last, __is_vector);\n }\n \n template <class _ExecutionPolicy, class _BidirectionalIterator, class _IsVector>\n@@ -2514,16 +2514,16 @@ __pattern_generate(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Forward\n     });\n }\n \n-template <class OutputIterator, class Size, class _Generator>\n-OutputIterator\n-__brick_generate_n(OutputIterator __first, Size __count, _Generator __g, /* is_vector = */ std::true_type) noexcept\n+template <class _OutputIterator, class _Size, class _Generator>\n+  _OutputIterator\n+__brick_generate_n(_OutputIterator __first, _Size __count, _Generator __g, /* is_vector = */ std::true_type) noexcept\n {\n     return __unseq_backend::__simd_generate_n(__first, __count, __g);\n }\n \n-template <class OutputIterator, class Size, class _Generator>\n-OutputIterator\n-__brick_generate_n(OutputIterator __first, Size __count, _Generator __g, /* is_vector = */ std::false_type) noexcept\n+template <class _OutputIterator, class _Size, class _Generator>\n+  _OutputIterator\n+__brick_generate_n(_OutputIterator __first, _Size __count, _Generator __g, /* is_vector = */ std::false_type) noexcept\n {\n     return std::generate_n(__first, __count, __g);\n }"}, {"sha": "e0969a1db9c1128953b73aa3852295fc814a5af4", "filename": "libstdc++-v3/include/pstl/execution_impl.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb6beb887e64935c12a3508ead6d1806ef341ba2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fexecution_impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb6beb887e64935c12a3508ead6d1806ef341ba2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fexecution_impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fexecution_impl.h?ref=cb6beb887e64935c12a3508ead6d1806ef341ba2", "patch": "@@ -139,18 +139,18 @@ __is_parallelization_preferred(_ExecutionPolicy&& __exec)\n                                   typename __internal::__is_random_access_iterator<_IteratorTypes...>::type());\n }\n \n-template <typename policy, typename... _IteratorTypes>\n+template <typename __policy, typename... _IteratorTypes>\n struct __prefer_unsequenced_tag\n {\n-    static constexpr bool value = __internal::__allow_unsequenced<policy>::value &&\n+    static constexpr bool value = __internal::__allow_unsequenced<__policy>::value &&\n                                   __internal::__is_random_access_iterator<_IteratorTypes...>::value;\n     typedef std::integral_constant<bool, value> type;\n };\n \n-template <typename policy, typename... _IteratorTypes>\n+template <typename __policy, typename... _IteratorTypes>\n struct __prefer_parallel_tag\n {\n-    static constexpr bool value = __internal::__allow_parallel<policy>::value &&\n+    static constexpr bool value = __internal::__allow_parallel<__policy>::value &&\n                                   __internal::__is_random_access_iterator<_IteratorTypes...>::value;\n     typedef std::integral_constant<bool, value> type;\n };"}, {"sha": "b16306f2e99036f97ce562eb8b0f5805a3bffff5", "filename": "libstdc++-v3/include/pstl/glue_algorithm_impl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb6beb887e64935c12a3508ead6d1806ef341ba2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_algorithm_impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb6beb887e64935c12a3508ead6d1806ef341ba2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_algorithm_impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_algorithm_impl.h?ref=cb6beb887e64935c12a3508ead6d1806ef341ba2", "patch": "@@ -340,7 +340,7 @@ transform(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterato\n     typedef typename iterator_traits<_ForwardIterator>::reference _OutputType;\n     return __pstl::__internal::__pattern_walk3(\n         std::forward<_ExecutionPolicy>(__exec), __first1, __last1, __first2, __result,\n-        [__op](_Input1Type x, _Input2Type y, _OutputType z) mutable { z = __op(x, y); },\n+        [__op](_Input1Type __x, _Input2Type __y, _OutputType __z) mutable { __z = __op(__x, __y); },\n         __pstl::__internal::__is_vectorization_preferred<_ExecutionPolicy, _ForwardIterator1, _ForwardIterator2,\n                                                          _ForwardIterator>(__exec),\n         __pstl::__internal::__is_parallelization_preferred<_ExecutionPolicy, _ForwardIterator1, _ForwardIterator2,"}, {"sha": "9029a05f0ddd4633218f068d206f8a46bae257f5", "filename": "libstdc++-v3/include/pstl/glue_numeric_defs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb6beb887e64935c12a3508ead6d1806ef341ba2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_numeric_defs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb6beb887e64935c12a3508ead6d1806ef341ba2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_numeric_defs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_numeric_defs.h?ref=cb6beb887e64935c12a3508ead6d1806ef341ba2", "patch": "@@ -105,7 +105,7 @@ transform_inclusive_scan(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _\n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryOperation>\n __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2>\n adjacent_difference(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _ForwardIterator1 __last,\n-                    _ForwardIterator2 __d_first, _BinaryOperation op);\n+                    _ForwardIterator2 __d_first, _BinaryOperation __op);\n \n template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>\n __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2>"}, {"sha": "0b02bcf0789178a879b6517f54dd1206d737828c", "filename": "libstdc++-v3/include/pstl/numeric_impl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb6beb887e64935c12a3508ead6d1806ef341ba2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fnumeric_impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb6beb887e64935c12a3508ead6d1806ef341ba2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fnumeric_impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fnumeric_impl.h?ref=cb6beb887e64935c12a3508ead6d1806ef341ba2", "patch": "@@ -297,10 +297,10 @@ __brick_adjacent_difference(_ForwardIterator __first, _ForwardIterator __last, _\n     return std::adjacent_difference(__first, __last, __d_first, __op);\n }\n \n-template <class _ForwardIterator1, class _ForwardIterator2, class BinaryOperation>\n+template <class _ForwardIterator1, class _ForwardIterator2, class _BinaryOperation>\n _ForwardIterator2\n __brick_adjacent_difference(_ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __d_first,\n-                            BinaryOperation __op, /*is_vector=*/std::true_type) noexcept\n+\t\t\t    _BinaryOperation __op, /*is_vector=*/std::true_type) noexcept\n {\n     _PSTL_ASSERT(__first != __last);\n "}, {"sha": "3fd1a06ebd89fc749f3bacaa2b7d5d3d26fc8e58", "filename": "libstdc++-v3/include/pstl/parallel_backend_tbb.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb6beb887e64935c12a3508ead6d1806ef341ba2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_backend_tbb.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb6beb887e64935c12a3508ead6d1806ef341ba2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_backend_tbb.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fparallel_backend_tbb.h?ref=cb6beb887e64935c12a3508ead6d1806ef341ba2", "patch": "@@ -803,9 +803,9 @@ class __merge_func\n \n     struct __cleanup_range\n     {\n-        template <typename Iterator>\n+        template <typename _Iterator>\n         void\n-        operator()(Iterator __first, Iterator __last)\n+        operator()(_Iterator __first, _Iterator __last)\n         {\n             if (__last - __first < __merge_cut_off)\n                 _Cleanup()(__first, __last);"}, {"sha": "7cda7ffeddc3085b90008361ef49ae2d695c2733", "filename": "libstdc++-v3/include/pstl/unseq_backend_simd.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb6beb887e64935c12a3508ead6d1806ef341ba2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Funseq_backend_simd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb6beb887e64935c12a3508ead6d1806ef341ba2/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Funseq_backend_simd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Funseq_backend_simd.h?ref=cb6beb887e64935c12a3508ead6d1806ef341ba2", "patch": "@@ -532,7 +532,7 @@ struct _Combiner\n     _BinaryOp* __bin_op; // Here is a pointer to function because of default ctor\n \n     _Combiner() : __value{}, __bin_op(nullptr) {}\n-    _Combiner(const _Tp& value, const _BinaryOp* bin_op) : __value(value), __bin_op(const_cast<_BinaryOp*>(bin_op)) {}\n+    _Combiner(const _Tp& value, const _BinaryOp* __bin_op) : __value(value), __bin_op(const_cast<_BinaryOp*>(__bin_op)) {}\n     _Combiner(const _Combiner& __obj) : __value{}, __bin_op(__obj.__bin_op) {}\n \n     void\n@@ -624,8 +624,8 @@ __simd_min_element(_ForwardIterator __first, _Size __n, _Compare __comp) noexcep\n         _Compare* __min_comp;\n \n         _ComplexType() : __min_val{}, __min_ind{}, __min_comp(nullptr) {}\n-        _ComplexType(const _ValueType& val, const _Compare* comp)\n-            : __min_val(val), __min_ind(0), __min_comp(const_cast<_Compare*>(comp))\n+        _ComplexType(const _ValueType& __val, const _Compare* comp)\n+            : __min_val(__val), __min_ind(0), __min_comp(const_cast<_Compare*>(comp))\n         {\n         }\n         _ComplexType(const _ComplexType& __obj)\n@@ -685,8 +685,8 @@ __simd_minmax_element(_ForwardIterator __first, _Size __n, _Compare __comp) noex\n         _Compare* __minmax_comp;\n \n         _ComplexType() : __min_val{}, __max_val{}, __min_ind{}, __max_ind{}, __minmax_comp(nullptr) {}\n-        _ComplexType(const _ValueType& min_val, const _ValueType& max_val, const _Compare* comp)\n-            : __min_val(min_val), __max_val(max_val), __min_ind(0), __max_ind(0),\n+        _ComplexType(const _ValueType& __min_val, const _ValueType& __max_val, const _Compare* comp)\n+            : __min_val(__min_val), __max_val(__max_val), __min_ind(0), __max_ind(0),\n               __minmax_comp(const_cast<_Compare*>(comp))\n         {\n         }"}, {"sha": "e5f3ca91aa2e6df237998222b9fba6bc694f75fe", "filename": "libstdc++-v3/testsuite/17_intro/names_pstl.cc", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb6beb887e64935c12a3508ead6d1806ef341ba2/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fnames_pstl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb6beb887e64935c12a3508ead6d1806ef341ba2/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fnames_pstl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fnames_pstl.cc?ref=cb6beb887e64935c12a3508ead6d1806ef341ba2", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile { target c++17 } }\n+// { dg-additional-options \"-DTBB_SUPPRESS_DEPRECATED_MESSAGES=1\" { target tbb_backend} }\n+\n+// The TBB headers use non-reserved names (because they're not part of the\n+// implementation) so we need to include them before the macro definitions\n+// in names.cc:\n+#if __has_include(<tbb/tbb.h>)\n+# include <tbb/tbb.h>\n+#endif\n+// Now we can define the macros to poison uses of non-reserved names:\n+#include \"names.cc\"\n+// And finally, include all the headers that have PSTL content:\n+#include <execution>\n+#include <algorithm>\n+#include <memory>\n+#include <numeric>"}]}