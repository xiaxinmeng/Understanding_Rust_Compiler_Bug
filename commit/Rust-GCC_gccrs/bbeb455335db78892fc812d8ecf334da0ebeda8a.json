{"sha": "bbeb455335db78892fc812d8ecf334da0ebeda8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJlYjQ1NTMzNWRiNzg4OTJmYzgxMmQ4ZWNmMzM0ZGEwZWJlZGE4YQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2013-10-17T21:20:46Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2013-10-17T21:20:46Z"}, "message": "p8vector-fp.c: New test for floating point scalar operations when...\n\n2013-10-03  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/p8vector-fp.c: New test for floating point\n\tscalar operations when using -mupper-regs-sf and -mupper-regs-df.\n\t* gcc.target/powerpc/ppc-target-1.c: Update tests to allow either\n\tVSX scalar operations or the traditional floating point form of\n\tthe instruction.\n\t* gcc.target/powerpc/ppc-target-2.c: Likewise.\n\t* gcc.target/powerpc/recip-3.c: Likewise.\n\t* gcc.target/powerpc/recip-5.c: Likewise.\n\t* gcc.target/powerpc/pr72747.c: Likewise.\n\t* gcc.target/powerpc/vsx-builtin-3.c: Likewise.\n\nFrom-SVN: r203800", "tree": {"sha": "0a9191e3e438f93b5f3317669989670d833548d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a9191e3e438f93b5f3317669989670d833548d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbeb455335db78892fc812d8ecf334da0ebeda8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbeb455335db78892fc812d8ecf334da0ebeda8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbeb455335db78892fc812d8ecf334da0ebeda8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbeb455335db78892fc812d8ecf334da0ebeda8a/comments", "author": null, "committer": null, "parents": [{"sha": "92fd70fbd1c8e2cde05da1c2c27ff973d35242ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92fd70fbd1c8e2cde05da1c2c27ff973d35242ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92fd70fbd1c8e2cde05da1c2c27ff973d35242ca"}], "stats": {"total": 139, "additions": 139, "deletions": 0}, "files": [{"sha": "3cfd8161dd630cf368d6125fb24deea4c6f7f103", "filename": "gcc/testsuite/gcc.target/powerpc/p8vector-fp.c", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbeb455335db78892fc812d8ecf334da0ebeda8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-fp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbeb455335db78892fc812d8ecf334da0ebeda8a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-fp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-fp.c?ref=bbeb455335db78892fc812d8ecf334da0ebeda8a", "patch": "@@ -0,0 +1,139 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mcpu=power8 -O2 -mupper-regs-df -mupper-regs-sf -fno-math-errno\" } */\n+\n+float abs_sf (float *p)\n+{\n+  float f = *p;\n+  __asm__ (\"# reg %x0\" : \"+v\" (f));\n+  return __builtin_fabsf (f);\n+}\n+\n+float nabs_sf (float *p)\n+{\n+  float f = *p;\n+  __asm__ (\"# reg %x0\" : \"+v\" (f));\n+  return - __builtin_fabsf (f);\n+}\n+\n+float neg_sf (float *p)\n+{\n+  float f = *p;\n+  __asm__ (\"# reg %x0\" : \"+v\" (f));\n+  return - f;\n+}\n+\n+float add_sf (float *p, float *q)\n+{\n+  float f1 = *p;\n+  float f2 = *q;\n+  __asm__ (\"# reg %x0, %x1\" : \"+v\" (f1), \"+v\" (f2));\n+  return f1 + f2;\n+}\n+\n+float sub_sf (float *p, float *q)\n+{\n+  float f1 = *p;\n+  float f2 = *q;\n+  __asm__ (\"# reg %x0, %x1\" : \"+v\" (f1), \"+v\" (f2));\n+  return f1 - f2;\n+}\n+\n+float mul_sf (float *p, float *q)\n+{\n+  float f1 = *p;\n+  float f2 = *q;\n+  __asm__ (\"# reg %x0, %x1\" : \"+v\" (f1), \"+v\" (f2));\n+  return f1 * f2;\n+}\n+\n+float div_sf (float *p, float *q)\n+{\n+  float f1 = *p;\n+  float f2 = *q;\n+  __asm__ (\"# reg %x0, %x1\" : \"+v\" (f1), \"+v\" (f2));\n+  return f1 / f2;\n+}\n+\n+float sqrt_sf (float *p)\n+{\n+  float f = *p;\n+  __asm__ (\"# reg %x0\" : \"+v\" (f));\n+  return __builtin_sqrtf (f);\n+}\n+\n+\f\n+double abs_df (double *p)\n+{\n+  double d = *p;\n+  __asm__ (\"# reg %x0\" : \"+v\" (d));\n+  return __builtin_fabs (d);\n+}\n+\n+double nabs_df (double *p)\n+{\n+  double d = *p;\n+  __asm__ (\"# reg %x0\" : \"+v\" (d));\n+  return - __builtin_fabs (d);\n+}\n+\n+double neg_df (double *p)\n+{\n+  double d = *p;\n+  __asm__ (\"# reg %x0\" : \"+v\" (d));\n+  return - d;\n+}\n+\n+double add_df (double *p, double *q)\n+{\n+  double d1 = *p;\n+  double d2 = *q;\n+  __asm__ (\"# reg %x0, %x1\" : \"+v\" (d1), \"+v\" (d2));\n+  return d1 + d2;\n+}\n+\n+double sub_df (double *p, double *q)\n+{\n+  double d1 = *p;\n+  double d2 = *q;\n+  __asm__ (\"# reg %x0, %x1\" : \"+v\" (d1), \"+v\" (d2));\n+  return d1 - d2;\n+}\n+\n+double mul_df (double *p, double *q)\n+{\n+  double d1 = *p;\n+  double d2 = *q;\n+  __asm__ (\"# reg %x0, %x1\" : \"+v\" (d1), \"+v\" (d2));\n+  return d1 * d2;\n+}\n+\n+double div_df (double *p, double *q)\n+{\n+  double d1 = *p;\n+  double d2 = *q;\n+  __asm__ (\"# reg %x0, %x1\" : \"+v\" (d1), \"+v\" (d2));\n+  return d1 / d2;\n+}\n+\n+double sqrt_df (float *p)\n+{\n+  double d = *p;\n+  __asm__ (\"# reg %x0\" : \"+v\" (d));\n+  return __builtin_sqrt (d);\n+}\n+\n+/* { dg-final { scan-assembler \"xsabsdp\"  } } */\n+/* { dg-final { scan-assembler \"xsadddp\"  } } */\n+/* { dg-final { scan-assembler \"xsaddsp\"  } } */\n+/* { dg-final { scan-assembler \"xsdivdp\"  } } */\n+/* { dg-final { scan-assembler \"xsdivsp\"  } } */\n+/* { dg-final { scan-assembler \"xsmuldp\"  } } */\n+/* { dg-final { scan-assembler \"xsmulsp\"  } } */\n+/* { dg-final { scan-assembler \"xsnabsdp\" } } */\n+/* { dg-final { scan-assembler \"xsnegdp\"  } } */\n+/* { dg-final { scan-assembler \"xssqrtdp\" } } */\n+/* { dg-final { scan-assembler \"xssqrtsp\" } } */\n+/* { dg-final { scan-assembler \"xssubdp\"  } } */\n+/* { dg-final { scan-assembler \"xssubsp\"  } } */"}]}