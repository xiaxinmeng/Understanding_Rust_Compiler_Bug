{"sha": "0bcec3673dd7f32b3b276cbea50428e5c7cb9d3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJjZWMzNjczZGQ3ZjMyYjNiMjc2Y2JlYTUwNDI4ZTVjN2NiOWQzYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-02T11:55:13Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-02T11:55:13Z"}, "message": "(chain_member_purpose): New function.\n\nFrom-SVN: r9292", "tree": {"sha": "c76d6859dd6c171ad68d4156811f69d9660cd66f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c76d6859dd6c171ad68d4156811f69d9660cd66f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bcec3673dd7f32b3b276cbea50428e5c7cb9d3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bcec3673dd7f32b3b276cbea50428e5c7cb9d3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bcec3673dd7f32b3b276cbea50428e5c7cb9d3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bcec3673dd7f32b3b276cbea50428e5c7cb9d3b/comments", "author": null, "committer": null, "parents": [{"sha": "df52f9914d7066cec5bc14b21470c44a70c00244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df52f9914d7066cec5bc14b21470c44a70c00244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df52f9914d7066cec5bc14b21470c44a70c00244"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "eb5f6bfd5f9e70f28521525cf2af8b27e8b4da85", "filename": "gcc/tree.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bcec3673dd7f32b3b276cbea50428e5c7cb9d3b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bcec3673dd7f32b3b276cbea50428e5c7cb9d3b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=0bcec3673dd7f32b3b276cbea50428e5c7cb9d3b", "patch": "@@ -1723,6 +1723,24 @@ chain_member_value (elem, chain)\n   return 0;\n }\n \n+/* Return nonzero if ELEM is equal to TREE_PURPOSE (TREE_VALUE (CHAIN)) \n+   for any piece of chain CHAIN. */\n+\n+int\n+chain_member_purpose (elem, chain)\n+     tree elem, chain;\n+{\n+\n+  while (chain)\n+    {\n+      if (elem == TREE_PURPOSE (TREE_VALUE (chain)))\n+\treturn 1;\n+      chain = TREE_CHAIN (chain);\n+    }\n+\n+  return 0;\n+}\n+\n /* Return the length of a chain of nodes chained through TREE_CHAIN.\n    We expect a null pointer to mark the end of the chain.\n    This is the Lisp primitive `length'.  */"}]}