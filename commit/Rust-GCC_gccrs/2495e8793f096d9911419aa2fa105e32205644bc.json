{"sha": "2495e8793f096d9911419aa2fa105e32205644bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ5NWU4NzkzZjA5NmQ5OTExNDE5YWEyZmExMDVlMzIyMDU2NDRiYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-09-11T06:45:44Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-09-11T06:45:44Z"}, "message": "* gcc.target/frv: New directory of FR-V-specific tests.\n\nFrom-SVN: r87345", "tree": {"sha": "8e0f39e8d60f5db7b44aaf2b22ab004c9d21e0bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e0f39e8d60f5db7b44aaf2b22ab004c9d21e0bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2495e8793f096d9911419aa2fa105e32205644bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2495e8793f096d9911419aa2fa105e32205644bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2495e8793f096d9911419aa2fa105e32205644bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2495e8793f096d9911419aa2fa105e32205644bc/comments", "author": null, "committer": null, "parents": [{"sha": "70601cc243b361146a24149bf50145b86dc55dbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70601cc243b361146a24149bf50145b86dc55dbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70601cc243b361146a24149bf50145b86dc55dbe"}], "stats": {"total": 700, "additions": 700, "deletions": 0}, "files": [{"sha": "36d777da6009e8d1e52963428e33612e5132280e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2495e8793f096d9911419aa2fa105e32205644bc", "patch": "@@ -1,3 +1,7 @@\n+2004-09-11  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* gcc.target/frv: New directory of FR-V-specific tests.\n+\n 2004-09-10  James E Wilson  <wilson@specifixinc.com>\n \n \t* gcc.dg/convert-vec-1.c: New test."}, {"sha": "cb4232b3c3bebdecad27458635b19d9fe50e624a", "filename": "gcc/testsuite/gcc.target/frv/all-accs-1.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-accs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-accs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-accs-1.c?ref=2495e8793f096d9911419aa2fa105e32205644bc", "patch": "@@ -0,0 +1,65 @@\n+/* Check that ACCs and ACCGs are treated as global variables even if\n+   media.h isn't included.  */\n+/* { dg-do run } */\n+extern void abort (void);\n+extern void exit (int);\n+\n+void\n+set ()\n+{\n+#define SET(X) __MWTACC (X, (X) | 0x100), __MWTACCG (X, X)\n+  SET (0);\n+  SET (1);\n+  SET (2);\n+  SET (3);\n+#if defined (__CPU_FR450__)\n+  SET (8);\n+  SET (9);\n+  SET (10);\n+  SET (11);\n+#elif __FRV_ACC__ > 4\n+  SET (4);\n+  SET (5);\n+  SET (6);\n+  SET (7);\n+#endif\n+#undef SET\n+}\n+\n+void\n+check ()\n+{\n+  int diff1, diff2;\n+\n+  diff1 = diff2 = 0;\n+\n+#define CHECK(X) \\\n+\t(diff1 |= (__MRDACC (X) ^ (X | 0x100)), \\\n+\t diff2 |= (__MRDACCG (X) ^ X))\n+  CHECK (0);\n+  CHECK (1);\n+  CHECK (2);\n+  CHECK (3);\n+#if defined (__CPU_FR450__)\n+  CHECK (8);\n+  CHECK (9);\n+  CHECK (10);\n+  CHECK (11);\n+#elif __FRV_ACC__ > 4\n+  CHECK (4);\n+  CHECK (5);\n+  CHECK (6);\n+  CHECK (7);\n+#endif\n+#undef CHECK\n+  if ((diff1 | diff2) != 0)\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  set ();\n+  check ();\n+  exit (0);\n+}"}, {"sha": "28ab497caeeaca8b1f75b173f81aea1170c9af69", "filename": "gcc/testsuite/gcc.target/frv/all-mclracca-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-mclracca-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-mclracca-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Fall-mclracca-1.c?ref=2495e8793f096d9911419aa2fa105e32205644bc", "patch": "@@ -0,0 +1,24 @@\n+/* GCSE used to reuse the value of __MRDACC.  */\n+/* { dg-do run } */\n+extern void abort (void);\n+extern void exit (int);\n+\n+void foo (int *z)\n+{\n+  __MWTACC (3, 1);\n+  if (__MRDACC (3) != 1)\n+    *z = 1;\n+  __MCLRACCA ();\n+  if (__MRDACC (3) != 1)\n+    *z = 2;\n+}\n+\n+int main ()\n+{\n+  int z = 3;\n+\n+  foo (&z);\n+  if (z != 2)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "85ca7cfbf0a46f4bee795c09d8d6430b3e57d54a", "filename": "gcc/testsuite/gcc.target/frv/fr400-builtins-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr400-builtins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr400-builtins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr400-builtins-1.c?ref=2495e8793f096d9911419aa2fa105e32205644bc", "patch": "@@ -0,0 +1,28 @@\n+/* Test prefetch support.  */\n+/* { dg-options \"-mcpu=fr400\" } */\n+/* { dg-do run } */\n+\n+unsigned char global[64];\n+\n+int foo (unsigned int *x, int n)\n+{\n+  unsigned short local[16];\n+\n+  __data_prefetch0 (x);\n+  __data_prefetch0 (&x[8]);\n+  __data_prefetch0 (&x[n]);\n+  __data_prefetch0 (local);\n+  __data_prefetch0 (&local[16]);\n+  __data_prefetch0 (&local[n]);\n+  __data_prefetch0 (global);\n+  __data_prefetch0 (&global[32]);\n+  __data_prefetch0 (&global[n]);\n+}\n+\n+int main ()\n+{\n+  unsigned int i[16];\n+\n+  foo (i, 2);\n+  return 0;\n+}"}, {"sha": "66f30055e85da5149e61dbad59870ce72fe94369", "filename": "gcc/testsuite/gcc.target/frv/fr400-builtins-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr400-builtins-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr400-builtins-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr400-builtins-2.c?ref=2495e8793f096d9911419aa2fa105e32205644bc", "patch": "@@ -0,0 +1,10 @@\n+/* Test prefetch support.  */\n+/* { dg-options \"-mcpu=fr400\" } */\n+/* { dg-do compile } */\n+\n+void foo (void *x)\n+{\n+  __data_prefetch0 (x);\n+}\n+\n+/* { dg-final { scan-assembler \"\\tdcpl \" } } */"}, {"sha": "98e304e278a3f01249dbedddce2bdaebb96dfc1c", "filename": "gcc/testsuite/gcc.target/frv/fr405-builtins-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr405-builtins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr405-builtins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr405-builtins-1.c?ref=2495e8793f096d9911419aa2fa105e32205644bc", "patch": "@@ -0,0 +1,39 @@\n+/* Test the IACC multiply/accumulate instructions.  Also test the IACC\n+   read/write functions.  */\n+/* { dg-options \"-mcpu=fr405\" } */\n+/* { dg-do run } */\n+extern void abort (void);\n+extern void exit (int);\n+\n+int main ()\n+{\n+  long long res, res1, res2, res3;\n+\n+  __SMU (0x12345678, 0x40004000);\n+  __SMASS (0x12000000, 0x11223344);\n+  __SMSSS (0x01020304, 0x54321000);\n+\n+  res = __IACCreadll (0);\n+  res1 = 0x12345678LL * 0x40004000LL;\n+  res2 = 0x12000000LL * 0x11223344LL;\n+  res3 = 0x01020304LL * 0x54321000LL;\n+  if (res != res1 + res2 - res3)\n+    abort ();\n+\n+  __IACCsetll (0, 0x7ffffffffffffff0LL);\n+  __SMASS (0x100, 0x100);\n+  if (__IACCreadll (0) != 0x7fffffffffffffffLL)\n+    abort ();\n+\n+  __IACCsetl (0, -0x7ffffffe);\n+  __IACCsetl (1, 0);\n+  __SMSSS (0x10001, 0x10000);\n+  if (__IACCreadl (0) != -0x7fffffff - 1 || __IACCreadl (1) != -0x10000)\n+    abort ();\n+\n+  __SMSSS (0x10001, 0x10000);\n+  if (__IACCreadl (0) != -0x7fffffff - 1 || __IACCreadl (1) != 0)\n+    abort ();\n+\n+  exit (0);\n+}"}, {"sha": "778547c4dc05ca28a32b88e3d573e0018296eb05", "filename": "gcc/testsuite/gcc.target/frv/fr405-builtins-2.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr405-builtins-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr405-builtins-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr405-builtins-2.c?ref=2495e8793f096d9911419aa2fa105e32205644bc", "patch": "@@ -0,0 +1,69 @@\n+/* Test the SCUTSS instruction.  */\n+/* { dg-options \"-mcpu=fr405\" } */\n+/* { dg-do run } */\n+extern void abort (void);\n+extern void exit (int);\n+\n+int main ()\n+{\n+  struct {\n+    long long value;\n+    int cut_point;\n+    int result;\n+  } values[] = {\n+    /* Non-saturating values */\n+\n+    { +0x0000000000001234LL, 44, +0x01234000 },\n+    { ~0x0000000000001234LL, 44, ~0x01234fff },\n+\n+    { +0x0000011223300fffLL, 20, +0x11223301 },\n+    { ~0x0000011223300fffLL, 20, ~0x11223300 },\n+    { +0x0000011223300800LL, 20, +0x11223301 },\n+    { ~0x0000011223300800LL, 20, ~0x11223300 },\n+    { +0x00000112233007ffLL, 20, +0x11223300 },\n+    { ~0x00000112233007ffLL, 20, ~0x112232ff },\n+    { +0x0000011223300000LL, 20, +0x11223300 },\n+    { ~0x0000011223300000LL, 20, ~0x112232ff },\n+\n+    { +0x1234567fffffffffLL, -4, +0x01234568 },\n+    { ~0x1234567fffffffffLL, -4, ~0x01234567 },\n+    { +0x1234567800000000LL, -4, +0x01234568 },\n+    { ~0x1234567800000000LL, -4, ~0x01234567 },\n+    { +0x12345677ffffffffLL, -4, +0x01234567 },\n+    { ~0x12345677ffffffffLL, -4, ~0x01234566 },\n+    { +0x1234567000000000LL, -4, +0x01234567 },\n+    { ~0x1234567000000000LL, -4, ~0x01234566 },\n+\n+    /* Saturation tests */\n+\n+    { +0x4000000000000000LL, 44, +0x7fffffff },\n+    { ~0x4000000000000000LL, 44, ~0x7fffffff },\n+    { +0x0000000000080000LL, 44, +0x7fffffff },\n+    { ~0x0000000000080000LL, 44, ~0x7fffffff },\n+    { +0x000000000007ffffLL, 44, +0x7ffff000 },\n+    { ~0x000000000007ffffLL, 44, ~0x7fffffff },\n+    { +0x000000000007fffeLL, 44, +0x7fffe000 },\n+    { ~0x000000000007fffeLL, 44, ~0x7fffefff },\n+\n+    { +0x4000000000000000LL, 20, +0x7fffffff },\n+    { ~0x4000000000000000LL, 20, ~0x7fffffff },\n+    { +0x0000080000000000LL, 20, +0x7fffffff },\n+    { ~0x0000080000000000LL, 20, ~0x7fffffff },\n+    { +0x000007ffffffffffLL, 20, +0x7fffffff },\n+    { ~0x000007ffffffffffLL, 20, ~0x7fffffff },\n+    { +0x000007fffffff000LL, 20, +0x7fffffff },\n+    { ~0x000007fffffff000LL, 20, ~0x7ffffffe },\n+    { +0x000007ffffffe000LL, 20, +0x7ffffffe },\n+    { ~0x000007ffffffefffLL, 20, ~0x7ffffffe }\n+  };\n+\n+  unsigned int i;\n+\n+  for (i = 0; i < sizeof (values) / sizeof (values[0]); i++)\n+    {\n+      __IACCsetll (0, values[i].value);\n+      if (__SCUTSS (values[i].cut_point) != values[i].result)\n+\tabort ();\n+    }\n+  exit (0);\n+}"}, {"sha": "91fd96d7f626c4cec905e108e6a41b452e4ae59b", "filename": "gcc/testsuite/gcc.target/frv/fr405-builtins-3.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr405-builtins-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr405-builtins-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr405-builtins-3.c?ref=2495e8793f096d9911419aa2fa105e32205644bc", "patch": "@@ -0,0 +1,58 @@\n+/* Test the remaining integer instructions.  */\n+/* { dg-options \"-mcpu=fr405\" } */\n+/* { dg-do run } */\n+extern void abort (void);\n+extern void exit (int);\n+\n+int main ()\n+{\n+  if (__SLASS (0x112233, 4) != 0x1122330)\n+    abort ();\n+\n+  if (__SLASS (0x7ffff, 12) != 0x7ffff000)\n+    abort ();\n+\n+  if (__SLASS (0x80000, 12) != 0x7fffffff)\n+    abort ();\n+\n+  if (__SLASS (-0x7ffff, 12) != -0x7ffff000)\n+    abort ();\n+\n+  if (__SLASS (-0x80000, 12) != -0x7fffffff - 1)\n+    abort ();\n+\n+  if (__SLASS (-0x80001, 12) != -0x7fffffff - 1)\n+    abort ();\n+\n+  if (__ADDSS (0x7fffffff, 1) != 0x7fffffff)\n+    abort ();\n+\n+  if (__ADDSS (0x7ffffffd, 1) != 0x7ffffffe)\n+    abort ();\n+\n+  if (__ADDSS (-0x7fffffff, -2) != -0x7fffffff - 1)\n+    abort ();\n+\n+  if (__ADDSS (-0x7ffffffd, -2) != -0x7fffffff)\n+    abort ();\n+\n+  if (__SUBSS (0x7fffffff, -1) != 0x7fffffff)\n+    abort ();\n+\n+  if (__SUBSS (0x7ffffffd, -1) != 0x7ffffffe)\n+    abort ();\n+\n+  if (__SUBSS (-0x7fffffff, 2) != -0x7fffffff - 1)\n+    abort ();\n+\n+  if (__SUBSS (-0x7ffffffd, 2) != -0x7fffffff)\n+    abort ();\n+\n+  if (__SCAN (0x12345678, 0) != 3)\n+    abort ();\n+\n+  if (__SCAN (0x12345678, 0x24680000) != 17)\n+    abort ();\n+\n+  exit (0);\n+}"}, {"sha": "cb7986ddb968a66abe68e75c9e53c9a5111317bd", "filename": "gcc/testsuite/gcc.target/frv/fr450-builtins-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-1.c?ref=2495e8793f096d9911419aa2fa105e32205644bc", "patch": "@@ -0,0 +1,27 @@\n+/* Test __MQLCLRHS.  */\n+/* { dg-options \"-mcpu=fr450\" } */\n+/* { dg-do run } */\n+extern void abort (void);\n+extern void exit (int);\n+\n+int main ()\n+{\n+  struct { unsigned long long a, b, c; } entries[] = {\n+    { 0x10002000e800d800ULL, 0x0800080008000800ULL, 0x10002000e800d800ULL },\n+    { 0x10002000e800d800ULL, 0xf800f800f800f800ULL, 0xf000e00018002800ULL },\n+    { 0x1000100010001000ULL, 0xf000f80008001000ULL, 0x0000f00010000000ULL },\n+    { 0xf000f000f000f000ULL, 0xf000f80008001000ULL, 0x00001000f0000000ULL },\n+    { 0x8000800080008000ULL, 0x80007fff80010000ULL, 0x000080007fff8000ULL },\n+    { 0x7fff7fff7fff7fffULL, 0x80007fff80010000ULL, 0x0000000000007fffULL },\n+    { 0x8001800180018001ULL, 0x80007fff80010000ULL, 0x0000000000008001ULL },\n+    { 0x800080000001ffffULL, 0x0001ffff80008000ULL, 0x80007fff00000000ULL }\n+  };\n+\n+  unsigned int i;\n+\n+  for (i = 0; i < sizeof (entries) / sizeof (entries[0]); i++)\n+    if (__MQLCLRHS (entries[i].a, entries[i].b) != entries[i].c)\n+      abort ();\n+\n+  exit (0);\n+}"}, {"sha": "663d735cf0bd92c9a6c5f48fab4028c78f4a608c", "filename": "gcc/testsuite/gcc.target/frv/fr450-builtins-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-2.c?ref=2495e8793f096d9911419aa2fa105e32205644bc", "patch": "@@ -0,0 +1,27 @@\n+/* Test __MLMTHS.  */\n+/* { dg-options \"-mcpu=fr450\" } */\n+/* { dg-do run } */\n+extern void abort (void);\n+extern void exit (int);\n+\n+int main ()\n+{\n+  struct { unsigned long long a, b, c; } entries[] = {\n+    { 0x10002000e800d800ULL, 0x0800080008000800ULL, 0x08000800f800f800ULL },\n+    { 0x10002000e800d800ULL, 0xf800f800f800f800ULL, 0xf800f80008000800ULL },\n+    { 0x1000100010001000ULL, 0xe800f80008001800ULL, 0x1000f80008001000ULL },\n+    { 0xf000f000f000f000ULL, 0xe800f80008001800ULL, 0xf0000800f800f000ULL },\n+    { 0x8000800080008000ULL, 0x80007fff80010000ULL, 0x7fff80017fff0000ULL },\n+    { 0x7fff7fff7fff7fffULL, 0x80007fff80010000ULL, 0x7fff7fff80010000ULL },\n+    { 0x8001800180018001ULL, 0x80007fff80010000ULL, 0x800180017fff0000ULL },\n+    { 0x800080000001ffffULL, 0x0001ffff80008000ULL, 0xffff00010001ffffULL }\n+  };\n+\n+  unsigned int i;\n+\n+  for (i = 0; i < sizeof (entries) / sizeof (entries[0]); i++)\n+    if (__MQLMTHS (entries[i].a, entries[i].b) != entries[i].c)\n+      abort ();\n+\n+  exit (0);\n+}"}, {"sha": "00478a4ae49fd1b30f8861964b9a56cda7de6c63", "filename": "gcc/testsuite/gcc.target/frv/fr450-builtins-3.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-3.c?ref=2495e8793f096d9911419aa2fa105e32205644bc", "patch": "@@ -0,0 +1,25 @@\n+/* Test __MQSLLHI.  */\n+/* { dg-options \"-mcpu=fr450\" } */\n+/* { dg-do run } */\n+extern void abort (void);\n+extern void exit (int);\n+\n+int main ()\n+{\n+  if (__MQSLLHI (0x0001000200030004ULL, 1) != 0x0002000400060008ULL)\n+    abort ();\n+\n+  if (__MQSLLHI (0xfffffffefffcfff8ULL, 1) != 0xfffefffcfff8fff0ULL)\n+    abort ();\n+\n+  if (__MQSLLHI (0xfffffffefffcfff8ULL, 12) != 0xf000e000c0008000ULL)\n+    abort ();\n+\n+  if (__MQSLLHI (0x123456789abcdef0ULL, 12) != 0x40008000c0000000ULL)\n+    abort ();\n+\n+  if (__MQSLLHI (0x123456789abcdef0ULL, 16) != 0x123456789abcdef0ULL)\n+    abort ();\n+\n+  exit (0);\n+}"}, {"sha": "1eee1861ae5c48981c19cdb8983d7cbc7672d130", "filename": "gcc/testsuite/gcc.target/frv/fr450-builtins-4.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-4.c?ref=2495e8793f096d9911419aa2fa105e32205644bc", "patch": "@@ -0,0 +1,25 @@\n+/* Test __MQSRAHI.  */\n+/* { dg-options \"-mcpu=fr450\" } */\n+/* { dg-do run } */\n+extern void abort (void);\n+extern void exit (int);\n+\n+int main ()\n+{\n+  if (__MQSRAHI (0x0001000200030004ULL, 1) != 0x0000000100010002ULL)\n+    abort ();\n+\n+  if (__MQSRAHI (0xfffffffefffcfff8ULL, 1) != 0xfffffffffffefffcULL)\n+    abort ();\n+\n+  if (__MQSRAHI (0x8000c000e000f000ULL, 12) != 0xfff8fffcfffeffffULL)\n+    abort ();\n+\n+  if (__MQSRAHI (0x123456789abcdef0ULL, 12) != 0x00010005fff9fffdULL)\n+    abort ();\n+\n+  if (__MQSRAHI (0x123456789abcdef0ULL, 16) != 0x123456789abcdef0ULL)\n+    abort ();\n+\n+  exit (0);\n+}"}, {"sha": "c94e8ff80ff712770bca3735218199474dba6885", "filename": "gcc/testsuite/gcc.target/frv/fr450-builtins-5.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-5.c?ref=2495e8793f096d9911419aa2fa105e32205644bc", "patch": "@@ -0,0 +1,35 @@\n+/* Test that all accumulator registers are accessible.  */\n+/* { dg-options \"-mcpu=fr450\" } */\n+/* { dg-do run } */\n+extern void abort (void);\n+extern void exit (int);\n+\n+#define TEST_ACC(X) \\\n+  (__MWTACC (X, 0x11220000 | X), __MRDACC (X) ^ (0x11220000 | X))\n+\n+#define TEST_ACCG(X) \\\n+  (__MWTACCG (X, X), __MRDACCG (X) ^ X)\n+\n+#define ZERO_ACC(X) \\\n+  (__MRDACC (X) | __MRDACCG (X))\n+\n+int\n+main ()\n+{\n+  if (TEST_ACC (0) | TEST_ACC (1) | TEST_ACC (2) | TEST_ACC (3))\n+    abort ();\n+  if (TEST_ACC (8) | TEST_ACC (9) | TEST_ACC (10) | TEST_ACC (11))\n+    abort ();\n+  if (TEST_ACCG (0) | TEST_ACCG (1) | TEST_ACCG (2) | TEST_ACCG (3))\n+    abort ();\n+  if (TEST_ACCG (8) | TEST_ACCG (9) | TEST_ACCG (10) | TEST_ACCG (11))\n+    abort ();\n+\n+  __MCLRACCA ();\n+  if (ZERO_ACC (0) | ZERO_ACC (1) | ZERO_ACC (2) | ZERO_ACC (3))\n+    abort ();\n+  if (ZERO_ACC (8) | ZERO_ACC (9) | ZERO_ACC (10) | ZERO_ACC (11))\n+    abort ();\n+\n+  exit (0);\n+}"}, {"sha": "0624eb1f59908ac8e7a70189e365b914bc79fc99", "filename": "gcc/testsuite/gcc.target/frv/fr450-builtins-6.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-6.c?ref=2495e8793f096d9911419aa2fa105e32205644bc", "patch": "@@ -0,0 +1,23 @@\n+/* Test a situation in which an M5 instruction (mrdacc) and M4 instruction\n+   (mqmulhu) can be issued together.  */\n+/* { dg-options \"-mcpu=fr450\" } */\n+/* { dg-do run } */\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main ()\n+{\n+  __MQMULHU (0, 0x0011002200330044ULL, 0x0002000300040001ULL);\n+  __MQMULHU (8, 0x0100020003000400ULL, 0x0001000200030004ULL);\n+\n+  /* 0x22 + 0x66 + 0xcc + 0x44 = 0x198 */\n+  /* 0x100 + 0x400 + 0x900 + 0x1000 = 0x1e00 */\n+  if (__MRDACC (0) + __MRDACC (1)\n+      + __MRDACC (2) + __MRDACC (3)\n+      + __MRDACC (8) + __MRDACC (9)\n+      + __MRDACC (10) + __MRDACC (11) != 0x1f98)\n+    abort ();\n+\n+  exit (0);\n+}"}, {"sha": "dbba44a85ca02cc1a75c3fa230155604e7fa0963", "filename": "gcc/testsuite/gcc.target/frv/fr450-builtins-7.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-7.c?ref=2495e8793f096d9911419aa2fa105e32205644bc", "patch": "@@ -0,0 +1,24 @@\n+/* Test that the code from fr450-builtins-6.c packs together an\n+   M4 and M5 instruction.  */\n+/* { dg-options \"-O2 -mcpu=fr450\" } */\n+/* { dg-do compile } */\n+/* { dg-final { scan-assembler \"mqmulhu.p\\[^\\t\\]*\\t*mrdacc\" } } */\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main ()\n+{\n+  __MQMULHU (0, 0x0011002200330044ULL, 0x0002000300040001ULL);\n+  __MQMULHU (8, 0x0100020003000400ULL, 0x0001000200030004ULL);\n+\n+  /* 0x22 + 0x66 + 0xcc + 0x44 = 0x198 */\n+  /* 0x100 + 0x400 + 0x900 + 0x1000 = 0x1e00 */\n+  if (__MRDACC (0) + __MRDACC (1)\n+      + __MRDACC (2) + __MRDACC (3)\n+      + __MRDACC (8) + __MRDACC (9)\n+      + __MRDACC (10) + __MRDACC (11) != 0x1f98)\n+    abort ();\n+\n+  exit (0);\n+}"}, {"sha": "2c23f8cd879353222b754e34294631b58af1a1e3", "filename": "gcc/testsuite/gcc.target/frv/fr450-builtins-8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-8.c?ref=2495e8793f096d9911419aa2fa105e32205644bc", "patch": "@@ -0,0 +1,22 @@\n+/* Test a situation in which an M6 instruction (mdcutssi) and M4 instruction\n+   (mqmulhu) can be issued together.  */\n+/* { dg-options \"-mcpu=fr450\" } */\n+/* { dg-do run } */\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main ()\n+{\n+  __MQMULHU (0, 0x0001001101111111ULL, 0x0001000200030004ULL);\n+  __MQMULHU (8, 0x0002002202222222ULL, 0x0004000400040004ULL);\n+  if (__MDCUTSSI (0, 8)\n+      + __MDCUTSSI (2, 8)\n+      + __MDCUTSSI (8, 8)\n+      + __MDCUTSSI (10, 8)\n+      != (0x0000000100000022ULL + 0x0000033300004444ULL\n+\t  + 0x0000000800000088ULL + 0x0000088800008888ULL))\n+    abort ();\n+\n+  exit (0);\n+}"}, {"sha": "5f32ba2818fbaeb4355f488fb1a55e6071dfe5c1", "filename": "gcc/testsuite/gcc.target/frv/fr450-builtins-9.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr450-builtins-9.c?ref=2495e8793f096d9911419aa2fa105e32205644bc", "patch": "@@ -0,0 +1,23 @@\n+/* Test a situation in which an M6 instruction (mdcutssi) and M4 instruction\n+   (mqmulhu) can be issued together.  */\n+/* { dg-options \"-O2 -mcpu=fr450\" } */\n+/* { dg-do compile } */\n+/* { dg-final { scan-assembler \"mqmulhu.p\\[^\\t\\]*\\t*mdcutssi\" } } */\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main ()\n+{\n+  __MQMULHU (0, 0x0001001101111111ULL, 0x0001000200030004ULL);\n+  __MQMULHU (8, 0x0002002202222222ULL, 0x0004000400040004ULL);\n+  if (__MDCUTSSI (0, 8)\n+      + __MDCUTSSI (2, 8)\n+      + __MDCUTSSI (8, 8)\n+      + __MDCUTSSI (10, 8)\n+      != (0x0000000100000022ULL + 0x0000033300004444ULL\n+\t  + 0x0000000800000088ULL + 0x0000088800008888ULL))\n+    abort ();\n+\n+  exit (0);\n+}"}, {"sha": "d728f12a4fc4672fc7fdadb26b6bcdc8b4c0fd7f", "filename": "gcc/testsuite/gcc.target/frv/fr550-builtins-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr550-builtins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr550-builtins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr550-builtins-1.c?ref=2495e8793f096d9911419aa2fa105e32205644bc", "patch": "@@ -0,0 +1,42 @@\n+/* Test prefetch support.  */\n+/* { dg-do run } */\n+extern void abort (void);\n+extern void exit (int);\n+\n+unsigned char global[64];\n+\n+void\n+foo (unsigned int *x, int n)\n+{\n+  unsigned short local[16];\n+\n+  __data_prefetch0 (x);\n+  __data_prefetch0 (&x[8]);\n+  __data_prefetch0 (&x[n]);\n+  __data_prefetch0 (local);\n+  __data_prefetch0 (&local[16]);\n+  __data_prefetch0 (&local[n]);\n+  __data_prefetch0 (global);\n+  __data_prefetch0 (&global[32]);\n+  __data_prefetch0 (&global[n]);\n+\n+#if __FRV_VLIW__ > 1\n+  __data_prefetch (x);\n+  __data_prefetch (&x[8]);\n+  __data_prefetch (&x[n]);\n+  __data_prefetch (local);\n+  __data_prefetch (&local[16]);\n+  __data_prefetch (&local[n]);\n+  __data_prefetch (global);\n+  __data_prefetch (&global[32]);\n+  __data_prefetch (&global[n]);\n+#endif\n+}\n+\n+int main ()\n+{\n+  unsigned int i[16];\n+\n+  foo (i, 2);\n+  exit (0);\n+}"}, {"sha": "ce39f462c7e2f8449df9b6f622497e2d0bf89553", "filename": "gcc/testsuite/gcc.target/frv/fr550-builtins-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr550-builtins-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr550-builtins-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr550-builtins-2.c?ref=2495e8793f096d9911419aa2fa105e32205644bc", "patch": "@@ -0,0 +1,9 @@\n+/* Test prefetch support.  */\n+/* { dg-do compile } */\n+\n+void foo (void *x)\n+{\n+  __data_prefetch0 (x);\n+}\n+\n+/* { dg-final { scan-assembler \"\\tdcpl \" } } */"}, {"sha": "b5347de7452817a36877f3fe16108ed150a7bde9", "filename": "gcc/testsuite/gcc.target/frv/fr550-builtins-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr550-builtins-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr550-builtins-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr550-builtins-3.c?ref=2495e8793f096d9911419aa2fa105e32205644bc", "patch": "@@ -0,0 +1,13 @@\n+/* Test prefetch support.  */\n+/* { dg-do compile } */\n+\n+#if __FRV_VLIW__ > 1\n+void foo (void *x)\n+{\n+  __data_prefetch (x);\n+}\n+#else\n+asm (\";\\tnop.p\\n;\\tnldub \");\n+#endif\n+\n+/* { dg-final { scan-assembler \"\\tnop.p.*\\tnldub \" } } */"}, {"sha": "801dfee207dc3bf6a2f7fda325e6a7a617b19b0c", "filename": "gcc/testsuite/gcc.target/frv/fr550-builtins-4.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr550-builtins-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr550-builtins-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr550-builtins-4.c?ref=2495e8793f096d9911419aa2fa105e32205644bc", "patch": "@@ -0,0 +1,48 @@\n+/* Test the __M{,D}{ADD,SUB}ACC functions.  */\n+/* { dg-do run } */\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main ()\n+{\n+  __MWTACC (6, 10);\n+  __MWTACC (7, 25);\n+  __MADDACCS (5, 6);\n+  if (__MRDACC (5) != 35)\n+    abort ();\n+  __MSUBACCS (4, 6);\n+  if (__MRDACC (4) != -15)\n+    abort ();\n+  __MASACCS (4, 6);\n+  if (__MRDACC (4) != 35 || __MRDACC (5) != -15)\n+    abort ();\n+\n+  __MWTACC (0, 100);\n+  __MWTACC (1, 150);\n+  __MWTACC (2, 1000);\n+  __MWTACC (3, 1500);\n+  __MDADDACCS (2, 0);\n+  if (__MRDACC (2) != 250 || __MRDACC (3) != 2500)\n+    abort ();\n+\n+  __MWTACC (0, 100);\n+  __MWTACC (1, 150);\n+  __MWTACC (2, 1000);\n+  __MWTACC (3, 1500);\n+  __MDSUBACCS (2, 0);\n+  if (__MRDACC (2) != -50 || __MRDACC (3) != -500)\n+    abort ();\n+\n+  __MWTACC (0, 100);\n+  __MWTACC (1, 150);\n+  __MWTACC (2, 1000);\n+  __MWTACC (3, 1500);\n+  __MDASACCS (0, 0);\n+  if (__MRDACC (0) != 250 || __MRDACC (1) != -50)\n+    abort ();\n+  if (__MRDACC (2) != 2500 || __MRDACC (3) != -500)\n+    abort ();\n+\n+  exit (0);\n+}"}, {"sha": "ff75ea17dfee0904cefdc2fd080f1c34c6b0eaa5", "filename": "gcc/testsuite/gcc.target/frv/fr550-builtins-5.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr550-builtins-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr550-builtins-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffr550-builtins-5.c?ref=2495e8793f096d9911419aa2fa105e32205644bc", "patch": "@@ -0,0 +1,25 @@\n+/* Test that __MADDACC only changes the registers it's supposed to.  */\n+/* { dg-do run } */\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main ()\n+{\n+  __MWTACC (0, 1);\n+  __MWTACC (1, 1);\n+  __MWTACC (2, 1);\n+  __MWTACC (3, 1);\n+  __MWTACC (4, 1);\n+  __MWTACC (5, 1);\n+  __MWTACC (6, 1);\n+  __MWTACC (7, 1);\n+  __MADDACCS (0, 2);\n+  __MADDACCS (4, 6);\n+  if ((__MRDACC (0) - 2)\n+      | (__MRDACC (1) - 1)\n+      | (__MRDACC (4) - 2)\n+      | (__MRDACC (5) - 1))\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "f2c4359b4260c2c2780e56b7cec4366aeaa7a7da", "filename": "gcc/testsuite/gcc.target/frv/frv.exp", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffrv.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2495e8793f096d9911419aa2fa105e32205644bc/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffrv.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Ffrv%2Ffrv.exp?ref=2495e8793f096d9911419aa2fa105e32205644bc", "patch": "@@ -0,0 +1,35 @@\n+# The name of each test starts with the architecture it requires.  Tests that\n+# work on all variants start with \"all\".\n+\n+if {![istarget frv-*-*]} {\n+    return 0\n+}\n+\n+load_lib gcc-dg.exp\n+\n+# Find out which architecture is used by default.\n+set mainarch \"fr500\"\n+foreach flag [target_info multilib_flags] {\n+    regexp \"^-mcpu=(.*)\" $flag dummy mainarch\n+    if {$flag == \"-mno-pack\"} {\n+\t# -mno-pack disables media intrinsics.\n+\treturn 0\n+    }\n+}\n+\n+# Set $archs to \"all\" plus the list of architectures we can test.\n+set archs [list \"all\" $mainarch]\n+switch $mainarch {\n+    fr405 { lappend archs fr400 }\n+    fr450 { lappend archs fr405 fr400 }\n+}\n+\n+# Set $files to the list of files we can test.\n+set files \"\"\n+foreach arch $archs {\n+    lappend files [lsort [glob -nocomplain $srcdir/$subdir/${arch}*.c]]\n+}\n+\n+dg-init\n+gcc-dg-runtest [eval concat $files] \"\"\n+dg-finish"}]}