{"sha": "dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJjOWY2YzZlZThkZWNiNDBhZWQ2Yzc5MGViZTQzMzdiNTJhMzdkZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-01-16T16:44:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-01-16T16:44:35Z"}, "message": "re PR fortran/46416 (libquadmath: missing functions)\n\n\tPR fortran/46416\n\t* quadmath.h (cbrtq, finiteq, isnanq, signbitq, sqrtq): Remove\n\tconst from prototype argument.\n\t(cimagq, conjq, cprojq, crealq, fdimq, fmaxq, fminq, ilogbq,\n\tllrintq, log2q, lrintq, nearbyintq, remquoq): New prototypes.\n\t(__quadmath_extern_inline): Define.\n\t(cimagq, conjq, crealq): New inlines.\n\t* Makefile.am (libquadmath_la_SOURCES): Add math/cimagq.c,\n\tmath/conjq.c, math/cprojq.c, math/crealq.c, math/fdimq.c,\n\tmath/fmaxq.c, math/fminq.c, math/ilogbq.c, math/llrintq.c,\n\tmath/log2q.c, math/lrintq.c, math/nearbyintq.c and math/remquoq.c.\n\t* Makefile.in: Regenerated.\n\t* quadmath_weak.h (cimagq, conjq, cprojq, crealq, fdimq, fmaxq,\n\tfminq, ilogbq, llrintq, log2q, lrintq, nearbyintq, remquoq): Add.\n\t* quadmath-imp.h (__LITTLE_ENDIAN__): Don't define.\n\t(ieee854_float128): Use __BYTE_ORDER == __ORDER_BIG_ENDIAN__\n\ttests instead of __BIG_ENDIAN__.\n\t* quadmath.map (QUADMATH_1.0): Add cimagq, conjq, cprojq, crealq,\n\tfdimq, fmaxq, fminq, ilogbq, llrintq, log2q, lrintq, nearbyintq\n\tand remquoq.\n\t* libquadmath.texi (cimagq, conjq, cprojq, crealq, fdimq, fmaxq,\n\tfminq, ilogbq, llrintq, log2q, lrintq, nearbyintq, remquoq): Add.\n\t* math/cprojq.c: New file.\n\t* math/ilogbq.c: New file.\n\t* math/fminq.c: New file.\n\t* math/llrintq.c: New file.\n\t* math/log2q.c: New file.\n\t* math/lrintq.c: New file.\n\t* math/crealq.c: New file.\n\t* math/nearbyintq.c: New file.\n\t* math/fmaxq.c: New file.\n\t* math/conjq.c: New file.\n\t* math/remquoq.c: New file.\n\t* math/cimagq.c: New file.\n\t* math/fdimq.c: New file.\n\n\t* math/ldexpq.c: Include errno.h.  Set errno to ERANGE if needed.\n\nFrom-SVN: r168854", "tree": {"sha": "cbbd98da06ef06f334e26d4cd08eea03e60befdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbbd98da06ef06f334e26d4cd08eea03e60befdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa23b182095ab7bd85605c62f2209c439b8a8018", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa23b182095ab7bd85605c62f2209c439b8a8018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa23b182095ab7bd85605c62f2209c439b8a8018"}], "stats": {"total": 1128, "additions": 1094, "deletions": 34}, "files": [{"sha": "c376950ea617752ffde28773dc9b348a6c96bc20", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "patch": "@@ -1,5 +1,43 @@\n 2011-01-16  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR fortran/46416\n+\t* quadmath.h (cbrtq, finiteq, isnanq, signbitq, sqrtq): Remove\n+\tconst from prototype argument.\n+\t(cimagq, conjq, cprojq, crealq, fdimq, fmaxq, fminq, ilogbq,\n+\tllrintq, log2q, lrintq, nearbyintq, remquoq): New prototypes.\n+\t(__quadmath_extern_inline): Define.\n+\t(cimagq, conjq, crealq): New inlines.\n+\t* Makefile.am (libquadmath_la_SOURCES): Add math/cimagq.c,\n+\tmath/conjq.c, math/cprojq.c, math/crealq.c, math/fdimq.c,\n+\tmath/fmaxq.c, math/fminq.c, math/ilogbq.c, math/llrintq.c,\n+\tmath/log2q.c, math/lrintq.c, math/nearbyintq.c and math/remquoq.c.\n+\t* Makefile.in: Regenerated.\n+\t* quadmath_weak.h (cimagq, conjq, cprojq, crealq, fdimq, fmaxq,\n+\tfminq, ilogbq, llrintq, log2q, lrintq, nearbyintq, remquoq): Add.\n+\t* quadmath-imp.h (__LITTLE_ENDIAN__): Don't define.\n+\t(ieee854_float128): Use __BYTE_ORDER == __ORDER_BIG_ENDIAN__\n+\ttests instead of __BIG_ENDIAN__.\n+\t* quadmath.map (QUADMATH_1.0): Add cimagq, conjq, cprojq, crealq,\n+\tfdimq, fmaxq, fminq, ilogbq, llrintq, log2q, lrintq, nearbyintq\n+\tand remquoq.\n+\t* libquadmath.texi (cimagq, conjq, cprojq, crealq, fdimq, fmaxq,\n+\tfminq, ilogbq, llrintq, log2q, lrintq, nearbyintq, remquoq): Add.\n+\t* math/cprojq.c: New file.\n+\t* math/ilogbq.c: New file.\n+\t* math/fminq.c: New file.\n+\t* math/llrintq.c: New file.\n+\t* math/log2q.c: New file.\n+\t* math/lrintq.c: New file.\n+\t* math/crealq.c: New file.\n+\t* math/nearbyintq.c: New file.\n+\t* math/fmaxq.c: New file.\n+\t* math/conjq.c: New file.\n+\t* math/remquoq.c: New file.\n+\t* math/cimagq.c: New file.\n+\t* math/fdimq.c: New file.\n+\n+\t* math/ldexpq.c: Include errno.h.  Set errno to ERANGE if needed.\n+\n \tPR fortran/46416\n \t* quadmath.h (cacosq, cacoshq, casinq, casinhq, catanq, catanhq):\n \tNew prototypes."}, {"sha": "b20142bfa2e6efcea6fa821e68b2bfb100ec6eb5", "filename": "libquadmath/Makefile.am", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FMakefile.am?ref=dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "patch": "@@ -63,7 +63,10 @@ libquadmath_la_SOURCES = \\\n   math/nanq.c math/tgammaq.c math/finiteq.c math/nextafterq.c \\\n   math/truncq.c math/floorq.c math/powq.c math/fmaq.c \\\n   math/cacoshq.c math/cacosq.c math/casinhq.c math/casinq.c \\\n-  math/catanhq.c math/catanq.c\n+  math/catanhq.c math/catanq.c math/cimagq.c math/conjq.c math/cprojq.c \\\n+  math/crealq.c math/fdimq.c math/fmaxq.c math/fminq.c math/ilogbq.c \\\n+  math/llrintq.c math/log2q.c math/lrintq.c math/nearbyintq.c math/remquoq.c\n+\n \n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and"}, {"sha": "d73e6315778b5028993f3c483ec3c96ff59279e9", "filename": "libquadmath/Makefile.in", "status": "modified", "additions": 64, "deletions": 2, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FMakefile.in?ref=dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "patch": "@@ -125,7 +125,14 @@ am__dirstamp = $(am__leading_dot)dirstamp\n @BUILD_LIBQUADMATH_TRUE@\tmath/powq.lo math/fmaq.lo \\\n @BUILD_LIBQUADMATH_TRUE@\tmath/cacoshq.lo math/cacosq.lo \\\n @BUILD_LIBQUADMATH_TRUE@\tmath/casinhq.lo math/casinq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/catanhq.lo math/catanq.lo\n+@BUILD_LIBQUADMATH_TRUE@\tmath/catanhq.lo math/catanq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/cimagq.lo math/conjq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/cprojq.lo math/crealq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/fdimq.lo math/fmaxq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/fminq.lo math/ilogbq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/llrintq.lo math/log2q.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/lrintq.lo math/nearbyintq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/remquoq.lo\n libquadmath_la_OBJECTS = $(am_libquadmath_la_OBJECTS)\n libquadmath_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \\\n \t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\\n@@ -329,7 +336,9 @@ AUTOMAKE_OPTIONS = 1.8 foreign\n @BUILD_LIBQUADMATH_TRUE@  math/nanq.c math/tgammaq.c math/finiteq.c math/nextafterq.c \\\n @BUILD_LIBQUADMATH_TRUE@  math/truncq.c math/floorq.c math/powq.c math/fmaq.c \\\n @BUILD_LIBQUADMATH_TRUE@  math/cacoshq.c math/cacosq.c math/casinhq.c math/casinq.c \\\n-@BUILD_LIBQUADMATH_TRUE@  math/catanhq.c math/catanq.c\n+@BUILD_LIBQUADMATH_TRUE@  math/catanhq.c math/catanq.c math/cimagq.c math/conjq.c math/cprojq.c \\\n+@BUILD_LIBQUADMATH_TRUE@  math/crealq.c math/fdimq.c math/fmaxq.c math/fminq.c math/ilogbq.c \\\n+@BUILD_LIBQUADMATH_TRUE@  math/llrintq.c math/log2q.c math/lrintq.c math/nearbyintq.c math/remquoq.c\n \n \n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n@@ -581,6 +590,20 @@ math/casinhq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n math/casinq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n math/catanhq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n math/catanq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/cimagq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/conjq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/cprojq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/crealq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/fdimq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/fmaxq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/fminq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/ilogbq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/llrintq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/log2q.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/lrintq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/nearbyintq.lo: math/$(am__dirstamp) \\\n+\tmath/$(DEPDIR)/$(am__dirstamp)\n+math/remquoq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n libquadmath.la: $(libquadmath_la_OBJECTS) $(libquadmath_la_DEPENDENCIES) \n \t$(libquadmath_la_LINK) $(am_libquadmath_la_rpath) $(libquadmath_la_OBJECTS) $(libquadmath_la_LIBADD) $(LIBS)\n \n@@ -644,8 +667,12 @@ mostlyclean-compile:\n \t-rm -f math/cbrtq.lo\n \t-rm -f math/ceilq.$(OBJEXT)\n \t-rm -f math/ceilq.lo\n+\t-rm -f math/cimagq.$(OBJEXT)\n+\t-rm -f math/cimagq.lo\n \t-rm -f math/complex.$(OBJEXT)\n \t-rm -f math/complex.lo\n+\t-rm -f math/conjq.$(OBJEXT)\n+\t-rm -f math/conjq.lo\n \t-rm -f math/copysignq.$(OBJEXT)\n \t-rm -f math/copysignq.lo\n \t-rm -f math/coshq.$(OBJEXT)\n@@ -654,6 +681,10 @@ mostlyclean-compile:\n \t-rm -f math/cosq.lo\n \t-rm -f math/cosq_kernel.$(OBJEXT)\n \t-rm -f math/cosq_kernel.lo\n+\t-rm -f math/cprojq.$(OBJEXT)\n+\t-rm -f math/cprojq.lo\n+\t-rm -f math/crealq.$(OBJEXT)\n+\t-rm -f math/crealq.lo\n \t-rm -f math/erfq.$(OBJEXT)\n \t-rm -f math/erfq.lo\n \t-rm -f math/expm1q.$(OBJEXT)\n@@ -662,18 +693,26 @@ mostlyclean-compile:\n \t-rm -f math/expq.lo\n \t-rm -f math/fabsq.$(OBJEXT)\n \t-rm -f math/fabsq.lo\n+\t-rm -f math/fdimq.$(OBJEXT)\n+\t-rm -f math/fdimq.lo\n \t-rm -f math/finiteq.$(OBJEXT)\n \t-rm -f math/finiteq.lo\n \t-rm -f math/floorq.$(OBJEXT)\n \t-rm -f math/floorq.lo\n \t-rm -f math/fmaq.$(OBJEXT)\n \t-rm -f math/fmaq.lo\n+\t-rm -f math/fmaxq.$(OBJEXT)\n+\t-rm -f math/fmaxq.lo\n+\t-rm -f math/fminq.$(OBJEXT)\n+\t-rm -f math/fminq.lo\n \t-rm -f math/fmodq.$(OBJEXT)\n \t-rm -f math/fmodq.lo\n \t-rm -f math/frexpq.$(OBJEXT)\n \t-rm -f math/frexpq.lo\n \t-rm -f math/hypotq.$(OBJEXT)\n \t-rm -f math/hypotq.lo\n+\t-rm -f math/ilogbq.$(OBJEXT)\n+\t-rm -f math/ilogbq.lo\n \t-rm -f math/isinfq.$(OBJEXT)\n \t-rm -f math/isinfq.lo\n \t-rm -f math/isnanq.$(OBJEXT)\n@@ -688,20 +727,28 @@ mostlyclean-compile:\n \t-rm -f math/ldexpq.lo\n \t-rm -f math/lgammaq.$(OBJEXT)\n \t-rm -f math/lgammaq.lo\n+\t-rm -f math/llrintq.$(OBJEXT)\n+\t-rm -f math/llrintq.lo\n \t-rm -f math/llroundq.$(OBJEXT)\n \t-rm -f math/llroundq.lo\n \t-rm -f math/log10q.$(OBJEXT)\n \t-rm -f math/log10q.lo\n \t-rm -f math/log1pq.$(OBJEXT)\n \t-rm -f math/log1pq.lo\n+\t-rm -f math/log2q.$(OBJEXT)\n+\t-rm -f math/log2q.lo\n \t-rm -f math/logq.$(OBJEXT)\n \t-rm -f math/logq.lo\n+\t-rm -f math/lrintq.$(OBJEXT)\n+\t-rm -f math/lrintq.lo\n \t-rm -f math/lroundq.$(OBJEXT)\n \t-rm -f math/lroundq.lo\n \t-rm -f math/modfq.$(OBJEXT)\n \t-rm -f math/modfq.lo\n \t-rm -f math/nanq.$(OBJEXT)\n \t-rm -f math/nanq.lo\n+\t-rm -f math/nearbyintq.$(OBJEXT)\n+\t-rm -f math/nearbyintq.lo\n \t-rm -f math/nextafterq.$(OBJEXT)\n \t-rm -f math/nextafterq.lo\n \t-rm -f math/powq.$(OBJEXT)\n@@ -710,6 +757,8 @@ mostlyclean-compile:\n \t-rm -f math/rem_pio2q.lo\n \t-rm -f math/remainderq.$(OBJEXT)\n \t-rm -f math/remainderq.lo\n+\t-rm -f math/remquoq.$(OBJEXT)\n+\t-rm -f math/remquoq.lo\n \t-rm -f math/rintq.$(OBJEXT)\n \t-rm -f math/rintq.lo\n \t-rm -f math/roundq.$(OBJEXT)\n@@ -776,39 +825,52 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/catanq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/cbrtq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/ceilq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/cimagq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/complex.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/conjq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/copysignq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/coshq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/cosq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/cosq_kernel.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/cprojq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/crealq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/erfq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/expm1q.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/expq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/fabsq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/fdimq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/finiteq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/floorq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/fmaq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/fmaxq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/fminq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/fmodq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/frexpq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/hypotq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/ilogbq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/isinfq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/isnanq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/j0q.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/j1q.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/jnq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/ldexpq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/lgammaq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/llrintq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/llroundq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/log10q.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/log1pq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/log2q.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/logq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/lrintq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/lroundq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/modfq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/nanq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/nearbyintq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/nextafterq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/powq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/rem_pio2q.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/remainderq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/remquoq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/rintq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/roundq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/scalblnq.Plo@am__quote@"}, {"sha": "b336f9b4a128fc8c7a29e4b52786de3803bed231", "filename": "libquadmath/libquadmath.texi", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Flibquadmath.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Flibquadmath.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Flibquadmath.texi?ref=dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "patch": "@@ -111,30 +111,39 @@ The following mathematical functions are available:\n @item @code{expm1q}: exponential minus 1 function\n @need 800\n @item @code{fabsq}: absolute value function\n+@item @code{fdimq}: positive difference function\n @item @code{finiteq}: check finiteness of value\n @item @code{floorq}: floor value function\n @item @code{fmaq}: fused multiply and add\n+@item @code{fmaxq}: determine maximum of two values\n+@item @code{fminq}: determine minimum of two values\n @item @code{fmodq}: remainder value function\n @item @code{frexpq}: extract mantissa and exponent\n @item @code{hypotq}: Eucledian distance function\n+@item @code{ilogbq}: get exponent of the value\n @item @code{isinfq}: check for infinity\n @item @code{isnanq}: check for not a number\n @item @code{j0q}: Bessel function of the first kind, first order\n @item @code{j1q}: Bessel function of the first kind, second order\n @item @code{jnq}: Bessel function of the first kind, @var{n}-th order\n @item @code{ldexpq}: load exponent of the value\n @item @code{lgammaq}: logarithmic gamma function\n+@item @code{llrintq}: round to nearest integer value\n @item @code{llroundq}: round to nearest integer value away from zero\n @item @code{logq}: natural logarithm function\n @item @code{log10q}: base 10 logarithm function\n @item @code{log1pq}: compute natural logarithm of the value plus one\n+@item @code{log2q}: base 2 logarithm function\n @need 800\n+@item @code{lrintq}: round to nearest integer value\n @item @code{lroundq}: round to nearest integer value away from zero\n @item @code{modfq}: decompose the floating-point number\n @item @code{nanq}: return quiet NaN\n+@item @code{nearbyintq}: round to nearest integer\n @item @code{nextafterq}: next representable floating-point number\n @item @code{powq}: power function\n @item @code{remainderq}: remainder function\n+@item @code{remquoq}: remainder and part of quotient\n @item @code{rintq}: round-to-nearest integral value\n @item @code{roundq}: round-to-nearest integral value, return @code{__float128}\n @item @code{scalblnq}: compute exponent using @code{FLT_RADIX}\n@@ -152,8 +161,10 @@ The following mathematical functions are available:\n @item @code{y0q}: Bessel function of the second kind, first order\n @item @code{y1q}: Bessel function of the second kind, second order\n @item @code{ynq}: Bessel function of the second kind, @var{n}-th order\n-@item @code{cabsq} complex absolute value function:\n+@item @code{cabsq} complex absolute value function\n @item @code{cargq}: calculate the argument\n+@item @code{cimagq} imaginary part of complex number\n+@item @code{crealq}: real part of complex number\n @item @code{cacoshq}: complex arc hyperbolic cosine function\n @item @code{cacosq}: complex arc cosine function\n @item @code{casinhq}: complex arc hyperbolic sine function\n@@ -168,7 +179,9 @@ The following mathematical functions are available:\n                      real value\n @item @code{clogq}: complex natural logarithm\n @item @code{clog10q}: complex base 10 logarithm\n+@item @code{conjq}: complex conjugate function\n @item @code{cpowq}: complex power function\n+@item @code{cprojq}: project into Riemann Sphere\n @item @code{csinq}: complex sine function\n @item @code{csinhq}: complex hyperbolic sine function\n @item @code{csqrtq}: complex square root"}, {"sha": "9b3bf70a10d555a7cd2abbe8b0d260940cbb613e", "filename": "libquadmath/math/cimagq.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Fcimagq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Fcimagq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcimagq.c?ref=dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "patch": "@@ -0,0 +1,27 @@\n+/* Return imaginary part of complex __float128 value.\n+   Copyright (C) 1997, 1998 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.  */\n+\n+#include \"quadmath-imp.h\"\n+\n+__float128\n+cimagq (__complex128 z)\n+{\n+  return __imag__ z;\n+}"}, {"sha": "8587d12193bebf2edf818fda1c9ce627dcbe32e7", "filename": "libquadmath/math/conjq.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Fconjq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Fconjq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fconjq.c?ref=dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "patch": "@@ -0,0 +1,27 @@\n+/* Return complex conjugate of complex __float128 value.\n+   Copyright (C) 1997, 1998 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.  */\n+\n+#include \"quadmath-imp.h\"\n+\n+__complex128\n+conjq (__complex128 z)\n+{\n+  return ~z;\n+}"}, {"sha": "6092c7325030f60055845bd8d233e9c493e3fb58", "filename": "libquadmath/math/cprojq.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Fcprojq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Fcprojq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcprojq.c?ref=dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "patch": "@@ -0,0 +1,40 @@\n+/* Compute projection of complex __float128 value to Riemann sphere.\n+   Copyright (C) 1997, 1999, 2010 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.  */\n+\n+#include \"quadmath-imp.h\"\n+\n+\n+__complex128\n+cprojq (__complex128 x)\n+{\n+  if (isnanq (__real__ x) && isnanq (__imag__ x))\n+    return x;\n+  else if (!finiteq (__real__ x) || !finiteq (__imag__ x))\n+    {\n+      __complex128 res;\n+\n+      __real__ res = __builtin_inf ();\n+      __imag__ res = copysignq (0.0, __imag__ x);\n+\n+      return res;\n+    }\n+\n+  return x;\n+}"}, {"sha": "71f4a4405aa0118923be3fde80882c34407c84fa", "filename": "libquadmath/math/crealq.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Fcrealq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Fcrealq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcrealq.c?ref=dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "patch": "@@ -0,0 +1,27 @@\n+/* Return real part of complex __float128 value.\n+   Copyright (C) 1997, 1998 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.  */\n+\n+#include \"quadmath-imp.h\"\n+\n+__float128\n+crealq (__complex128 z)\n+{\n+  return __real__ z;\n+}"}, {"sha": "539fb08c641f38cea2792802451d740644a79c43", "filename": "libquadmath/math/fdimq.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Ffdimq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Ffdimq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ffdimq.c?ref=dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "patch": "@@ -0,0 +1,43 @@\n+/* Return positive difference between arguments.\n+   Copyright (C) 1997, 2004, 2009 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.  */\n+\n+#include <errno.h>\n+#include \"quadmath-imp.h\"\n+\n+__float128\n+fdimq (__float128 x, __float128 y)\n+{\n+  int clsx = fpclassifyq (x);\n+  int clsy = fpclassifyq (y);\n+\n+  if (clsx == QUADFP_NAN || clsy == QUADFP_NAN\n+      || (y < 0 && clsx == QUADFP_INFINITE && clsy == QUADFP_INFINITE))\n+    /* Raise invalid flag.  */\n+    return x - y;\n+\n+  if (x <= y)\n+    return 0.0Q;\n+\n+  __float128 r = x - y;\n+  if (isinfq (r))\n+    errno = ERANGE;\n+\n+  return r;\n+}"}, {"sha": "e8ed6f440aaecd876f9abd67e15434888b9adfea", "filename": "libquadmath/math/fmaxq.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Ffmaxq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Ffmaxq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ffmaxq.c?ref=dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "patch": "@@ -0,0 +1,28 @@\n+/* Return maximum numeric value of X and Y.\n+   Copyright (C) 1997 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.  */\n+\n+#include \"quadmath-imp.h\"\n+\n+\n+__float128\n+fmaxq (__float128 x, __float128 y)\n+{\n+  return (__builtin_isgreaterequal (x, y) || isnanq (y)) ? x : y;\n+}"}, {"sha": "2fbe4116a6dd74ed86ac080ff418a05cc04f6866", "filename": "libquadmath/math/fminq.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Ffminq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Ffminq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ffminq.c?ref=dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "patch": "@@ -0,0 +1,28 @@\n+/* Return minimum numeric value of X and Y.\n+   Copyright (C) 1997 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.  */\n+\n+#include \"quadmath-imp.h\"\n+\n+\n+__float128\n+fminq (__float128 x, __float128 y)\n+{\n+  return (__builtin_islessequal (x, y) || isnanq (y)) ? x : y;\n+}"}, {"sha": "47986f5b3110d77fc8a598bd4e625c18352d7e19", "filename": "libquadmath/math/ilogbq.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Filogbq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Filogbq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Filogbq.c?ref=dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "patch": "@@ -0,0 +1,64 @@\n+/* s_ilogbl.c -- long double version of s_ilogb.c.\n+ * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n+ */\n+\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice\n+ * is preserved.\n+ * ====================================================\n+ */\n+\n+#if defined(LIBM_SCCS) && !defined(lint)\n+static char rcsid[] = \"$NetBSD: $\";\n+#endif\n+\n+/* ilogbl(long double x)\n+ * return the binary exponent of non-zero x\n+ * ilogbl(0) = FP_ILOGB0\n+ * ilogbl(NaN) = FP_ILOGBNAN (no signal is raised)\n+ * ilogbl(+-Inf) = INT_MAX (no signal is raised)\n+ */\n+\n+#include <limits.h>\n+#include <math.h>\n+#include \"quadmath-imp.h\"\n+\n+#ifndef FP_ILOGB0\n+# define FP_ILOGB0 INT_MIN\n+#endif\n+#ifndef FP_ILOGBNAN\n+# define FP_ILOGBNAN INT_MAX\n+#endif\n+\n+int\n+ilogbq (__float128 x)\n+{\n+\tint64_t hx,lx;\n+\tint ix;\n+\n+\tGET_FLT128_WORDS64(hx,lx,x);\n+\thx &= 0x7fffffffffffffffLL;\n+\tif(hx <= 0x0001000000000000LL) {\n+\t    if((hx|lx)==0)\n+\t\treturn FP_ILOGB0;\t/* ilogbl(0) = FP_ILOGB0 */\n+\t    else\t\t\t/* subnormal x */\n+\t\tif(hx==0) {\n+\t\t    for (ix = -16431; lx>0; lx<<=1) ix -=1;\n+\t\t} else {\n+\t\t    for (ix = -16382, hx<<=15; hx>0; hx<<=1) ix -=1;\n+\t\t}\n+\t    return ix;\n+\t}\n+\telse if (hx<0x7fff000000000000LL) return (hx>>48)-0x3fff;\n+\telse if (FP_ILOGBNAN != INT_MAX) {\n+\t    /* ISO C99 requires ilogbl(+-Inf) == INT_MAX.  */\n+\t    if (((hx^0x7fff000000000000LL)|lx) == 0)\n+\t\treturn INT_MAX;\n+\t}\n+\treturn FP_ILOGBNAN;\n+}"}, {"sha": "394d4590ccaa39f710fecef8351f749a8d82497e", "filename": "libquadmath/math/ldexpq.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Fldexpq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Fldexpq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fldexpq.c?ref=dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "patch": "@@ -14,13 +14,14 @@\n  * ====================================================\n  */\n \n+#include <errno.h>\n #include \"quadmath-imp.h\"\n \n __float128\n ldexpq (__float128 value, int exp)\n {\n   if(!finiteq(value)||value==0.0Q) return value;\n   value = scalbnq(value,exp);\n-  /* if(!__finitel(value)||value==0.0Q) __set_errno (ERANGE); */\n+  if(!finiteq(value)||value==0.0Q) errno = ERANGE;\n   return value;\n }"}, {"sha": "eef31d823b6ead7c47a64b95afdd76d3986b89ca", "filename": "libquadmath/math/llrintq.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Fllrintq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Fllrintq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fllrintq.c?ref=dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "patch": "@@ -0,0 +1,71 @@\n+/* Round argument to nearest integral value according to current rounding\n+   direction.\n+   Copyright (C) 1997, 1999, 2006 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997 and\n+   \t\t  Jakub Jelinek <jj@ultra.linux.cz>, 1999.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.  */\n+\n+#include \"quadmath-imp.h\"\n+\n+static const __float128 two112[2] =\n+{\n+  5.19229685853482762853049632922009600E+33Q, /* 0x406F000000000000, 0 */\n+ -5.19229685853482762853049632922009600E+33Q  /* 0xC06F000000000000, 0 */\n+};\n+\n+long long int\n+llrintq (__float128 x)\n+{\n+  int32_t j0;\n+  uint64_t i0,i1;\n+  volatile __float128 w;\n+  __float128 t;\n+  long long int result;\n+  int sx;\n+\n+  GET_FLT128_WORDS64 (i0, i1, x);\n+  j0 = ((i0 >> 48) & 0x7fff) - 0x3fff;\n+  sx = i0 >> 63;\n+  i0 &= 0x0000ffffffffffffLL;\n+  i0 |= 0x0001000000000000LL;\n+\n+  if (j0 < (int32_t) (8 * sizeof (long long int)) - 1)\n+    {\n+      w = two112[sx] + x;\n+      t = w - two112[sx];\n+      GET_FLT128_WORDS64 (i0, i1, t);\n+      j0 = ((i0 >> 48) & 0x7fff) - 0x3fff;\n+      i0 &= 0x0000ffffffffffffLL;\n+      i0 |= 0x0001000000000000LL;\n+\n+      if (j0 < 0)\n+\tresult = 0;\n+      else if (j0 <= 48)\n+\tresult = i0 >> (48 - j0);\n+      else\n+\tresult = ((long long int) i0 << (j0 - 48)) | (i1 >> (112 - j0));\n+    }\n+  else\n+    {\n+      /* The number is too large.  It is left implementation defined\n+\t what happens.  */\n+      return (long long int) x;\n+    }\n+\n+  return sx ? -result : result;\n+}"}, {"sha": "963b38c848370e1fd22880de22a46e0f405691b0", "filename": "libquadmath/math/log2q.c", "status": "added", "additions": 248, "deletions": 0, "changes": 248, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Flog2q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Flog2q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flog2q.c?ref=dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "patch": "@@ -0,0 +1,248 @@\n+/*                                                      log2l.c\n+ *      Base 2 logarithm, 128-bit long double precision\n+ *\n+ *\n+ *\n+ * SYNOPSIS:\n+ *\n+ * long double x, y, log2l();\n+ *\n+ * y = log2l( x );\n+ *\n+ *\n+ *\n+ * DESCRIPTION:\n+ *\n+ * Returns the base 2 logarithm of x.\n+ *\n+ * The argument is separated into its exponent and fractional\n+ * parts.  If the exponent is between -1 and +1, the (natural)\n+ * logarithm of the fraction is approximated by\n+ *\n+ *     log(1+x) = x - 0.5 x^2 + x^3 P(x)/Q(x).\n+ *\n+ * Otherwise, setting  z = 2(x-1)/x+1),\n+ *\n+ *     log(x) = z + z^3 P(z)/Q(z).\n+ *\n+ *\n+ *\n+ * ACCURACY:\n+ *\n+ *                      Relative error:\n+ * arithmetic   domain     # trials      peak         rms\n+ *    IEEE      0.5, 2.0     100,000    2.6e-34     4.9e-35\n+ *    IEEE     exp(+-10000)  100,000    9.6e-35     4.0e-35\n+ *\n+ * In the tests over the interval exp(+-10000), the logarithms\n+ * of the random arguments were uniformly distributed over\n+ * [-10000, +10000].\n+ *\n+ */\n+\n+/*\n+   Cephes Math Library Release 2.2:  January, 1991\n+   Copyright 1984, 1991 by Stephen L. Moshier\n+   Adapted for glibc November, 2001\n+\n+    This library is free software; you can redistribute it and/or\n+    modify it under the terms of the GNU Lesser General Public\n+    License as published by the Free Software Foundation; either\n+    version 2.1 of the License, or (at your option) any later version.\n+\n+    This library is distributed in the hope that it will be useful,\n+    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+    Lesser General Public License for more details.\n+\n+    You should have received a copy of the GNU Lesser General Public\n+    License along with this library; if not, write to the Free Software\n+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA \n+ */\n+\n+#include \"quadmath-imp.h\"\n+\n+/* Coefficients for ln(1+x) = x - x**2/2 + x**3 P(x)/Q(x)\n+ * 1/sqrt(2) <= x < sqrt(2)\n+ * Theoretical peak relative error = 5.3e-37,\n+ * relative peak error spread = 2.3e-14\n+ */\n+static const __float128 P[13] =\n+{\n+  1.313572404063446165910279910527789794488E4Q,\n+  7.771154681358524243729929227226708890930E4Q,\n+  2.014652742082537582487669938141683759923E5Q,\n+  3.007007295140399532324943111654767187848E5Q,\n+  2.854829159639697837788887080758954924001E5Q,\n+  1.797628303815655343403735250238293741397E5Q,\n+  7.594356839258970405033155585486712125861E4Q,\n+  2.128857716871515081352991964243375186031E4Q,\n+  3.824952356185897735160588078446136783779E3Q,\n+  4.114517881637811823002128927449878962058E2Q,\n+  2.321125933898420063925789532045674660756E1Q,\n+  4.998469661968096229986658302195402690910E-1Q,\n+  1.538612243596254322971797716843006400388E-6Q\n+};\n+static const __float128 Q[12] =\n+{\n+  3.940717212190338497730839731583397586124E4Q,\n+  2.626900195321832660448791748036714883242E5Q,\n+  7.777690340007566932935753241556479363645E5Q,\n+  1.347518538384329112529391120390701166528E6Q,\n+  1.514882452993549494932585972882995548426E6Q,\n+  1.158019977462989115839826904108208787040E6Q,\n+  6.132189329546557743179177159925690841200E5Q,\n+  2.248234257620569139969141618556349415120E5Q,\n+  5.605842085972455027590989944010492125825E4Q,\n+  9.147150349299596453976674231612674085381E3Q,\n+  9.104928120962988414618126155557301584078E2Q,\n+  4.839208193348159620282142911143429644326E1Q\n+/* 1.000000000000000000000000000000000000000E0Q, */\n+};\n+\n+/* Coefficients for log(x) = z + z^3 P(z^2)/Q(z^2),\n+ * where z = 2(x-1)/(x+1)\n+ * 1/sqrt(2) <= x < sqrt(2)\n+ * Theoretical peak relative error = 1.1e-35,\n+ * relative peak error spread 1.1e-9\n+ */\n+static const __float128 R[6] =\n+{\n+  1.418134209872192732479751274970992665513E5Q,\n+ -8.977257995689735303686582344659576526998E4Q,\n+  2.048819892795278657810231591630928516206E4Q,\n+ -2.024301798136027039250415126250455056397E3Q,\n+  8.057002716646055371965756206836056074715E1Q,\n+ -8.828896441624934385266096344596648080902E-1Q\n+};\n+static const __float128 S[6] =\n+{\n+  1.701761051846631278975701529965589676574E6Q,\n+ -1.332535117259762928288745111081235577029E6Q,\n+  4.001557694070773974936904547424676279307E5Q,\n+ -5.748542087379434595104154610899551484314E4Q,\n+  3.998526750980007367835804959888064681098E3Q,\n+ -1.186359407982897997337150403816839480438E2Q\n+/* 1.000000000000000000000000000000000000000E0Q, */\n+};\n+\n+static const __float128\n+/* log2(e) - 1 */\n+LOG2EA = 4.4269504088896340735992468100189213742664595E-1Q,\n+/* sqrt(2)/2 */\n+SQRTH = 7.071067811865475244008443621048490392848359E-1Q;\n+\n+\n+/* Evaluate P[n] x^n  +  P[n-1] x^(n-1)  +  ...  +  P[0] */\n+\n+static __float128\n+neval (__float128 x, const __float128 *p, int n)\n+{\n+  __float128 y;\n+\n+  p += n;\n+  y = *p--;\n+  do\n+    {\n+      y = y * x + *p--;\n+    }\n+  while (--n > 0);\n+  return y;\n+}\n+\n+\n+/* Evaluate x^n+1  +  P[n] x^(n)  +  P[n-1] x^(n-1)  +  ...  +  P[0] */\n+\n+static __float128\n+deval (__float128 x, const __float128 *p, int n)\n+{\n+  __float128 y;\n+\n+  p += n;\n+  y = x + *p--;\n+  do\n+    {\n+      y = y * x + *p--;\n+    }\n+  while (--n > 0);\n+  return y;\n+}\n+\n+\n+\n+__float128\n+log2q (__float128 x)\n+{\n+  __float128 z;\n+  __float128 y;\n+  int e;\n+  int64_t hx, lx;\n+\n+/* Test for domain */\n+  GET_FLT128_WORDS64 (hx, lx, x);\n+  if (((hx & 0x7fffffffffffffffLL) | lx) == 0)\n+    return (-1.0Q / (x - x));\n+  if (hx < 0)\n+    return (x - x) / (x - x);\n+  if (hx >= 0x7fff000000000000LL)\n+    return (x + x);\n+\n+/* separate mantissa from exponent */\n+\n+/* Note, frexp is used so that denormal numbers\n+ * will be handled properly.\n+ */\n+  x = frexpq (x, &e);\n+\n+\n+/* logarithm using log(x) = z + z**3 P(z)/Q(z),\n+ * where z = 2(x-1)/x+1)\n+ */\n+  if ((e > 2) || (e < -2))\n+    {\n+      if (x < SQRTH)\n+\t{\t\t\t/* 2( 2x-1 )/( 2x+1 ) */\n+\t  e -= 1;\n+\t  z = x - 0.5Q;\n+\t  y = 0.5Q * z + 0.5Q;\n+\t}\n+      else\n+\t{\t\t\t/*  2 (x-1)/(x+1)   */\n+\t  z = x - 0.5Q;\n+\t  z -= 0.5Q;\n+\t  y = 0.5Q * x + 0.5Q;\n+\t}\n+      x = z / y;\n+      z = x * x;\n+      y = x * (z * neval (z, R, 5) / deval (z, S, 5));\n+      goto done;\n+    }\n+\n+\n+/* logarithm using log(1+x) = x - .5x**2 + x**3 P(x)/Q(x) */\n+\n+  if (x < SQRTH)\n+    {\n+      e -= 1;\n+      x = 2.0 * x - 1.0Q;\t/*  2x - 1  */\n+    }\n+  else\n+    {\n+      x = x - 1.0Q;\n+    }\n+  z = x * x;\n+  y = x * (z * neval (x, P, 12) / deval (x, Q, 11));\n+  y = y - 0.5 * z;\n+\n+done:\n+\n+/* Multiply log of fraction by log2(e)\n+ * and base 2 exponent by 1\n+ */\n+  z = y * LOG2EA;\n+  z += x * LOG2EA;\n+  z += y;\n+  z += x;\n+  z += e;\n+  return (z);\n+}"}, {"sha": "d1497ae38829371e36975f063fc382d6c901612a", "filename": "libquadmath/math/lrintq.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Flrintq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Flrintq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flrintq.c?ref=dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "patch": "@@ -0,0 +1,85 @@\n+/* Round argument to nearest integral value according to current rounding\n+   direction.\n+   Copyright (C) 1997, 1999, 2004, 2006 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997 and\n+   \t\t  Jakub Jelinek <jj@ultra.linux.cz>, 1999.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.  */\n+\n+#include \"quadmath-imp.h\"\n+\n+static const __float128 two112[2] =\n+{\n+  5.19229685853482762853049632922009600E+33Q, /* 0x406F000000000000, 0 */\n+ -5.19229685853482762853049632922009600E+33Q  /* 0xC06F000000000000, 0 */\n+};\n+\n+long int\n+lrintq (__float128 x)\n+{\n+  int32_t j0;\n+  uint64_t i0,i1;\n+  volatile __float128 w;\n+  __float128 t;\n+  long int result;\n+  int sx;\n+\n+  GET_FLT128_WORDS64 (i0, i1, x);\n+  j0 = ((i0 >> 48) & 0x7fff) - 0x3fff;\n+  sx = i0 >> 63;\n+  i0 &= 0x0000ffffffffffffLL;\n+  i0 |= 0x0001000000000000LL;\n+\n+  if (j0 < 48)\n+    {\n+      w = two112[sx] + x;\n+      t = w - two112[sx];\n+      GET_FLT128_WORDS64 (i0, i1, t);\n+      j0 = ((i0 >> 48) & 0x7fff) - 0x3fff;\n+      i0 &= 0x0000ffffffffffffLL;\n+      i0 |= 0x0001000000000000LL;\n+\n+      result = (j0 < 0 ? 0 : i0 >> (48 - j0));\n+    }\n+  else if (j0 < (int32_t) (8 * sizeof (long int)) - 1)\n+    {\n+      if (j0 >= 112)\n+\tresult = ((long int) i0 << (j0 - 48)) | (i1 << (j0 - 112));\n+      else\n+\t{\n+\t  w = two112[sx] + x;\n+\t  t = w - two112[sx];\n+\t  GET_FLT128_WORDS64 (i0, i1, t);\n+\t  j0 = ((i0 >> 48) & 0x7fff) - 0x3fff;\n+\t  i0 &= 0x0000ffffffffffffLL;\n+\t  i0 |= 0x0001000000000000LL;\n+\n+\t  if (j0 == 48)\n+\t    result = (long int) i0;\n+\t  else\n+\t    result = ((long int) i0 << (j0 - 48)) | (i1 >> (112 - j0));\n+\t}\n+    }\n+  else\n+    {\n+      /* The number is too large.  It is left implementation defined\n+\t what happens.  */\n+      return (long int) x;\n+    }\n+\n+  return sx ? -result : result;\n+}"}, {"sha": "8e92c5afd4bffd7f959f67d9f84485956bdf67db", "filename": "libquadmath/math/nearbyintq.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Fnearbyintq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Fnearbyintq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fnearbyintq.c?ref=dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "patch": "@@ -0,0 +1,98 @@\n+/* nearbyintq.c -- __float128 version of s_nearbyint.c.\n+ * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n+ */\n+\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice\n+ * is preserved.\n+ * ====================================================\n+ */\n+\n+/*\n+ * nearbyintq(x)\n+ * Return x rounded to integral value according to the prevailing\n+ * rounding mode.\n+ * Method:\n+ *\tUsing floating addition.\n+ * Exception:\n+ *\tInexact flag raised if x not equal to rintq(x).\n+ */\n+\n+#include \"quadmath-imp.h\"\n+#ifdef HAVE_FENV_H\n+# include <fenv.h>\n+# if defined HAVE_FEHOLDEXCEPT && defined HAVE_FESETENV\n+#   define USE_FENV_H\n+# endif\n+#endif\n+\n+static const __float128\n+TWO112[2]={\n+  5.19229685853482762853049632922009600E+33Q, /* 0x406F000000000000, 0 */\n+ -5.19229685853482762853049632922009600E+33Q  /* 0xC06F000000000000, 0 */\n+};\n+\n+__float128\n+nearbyintq(__float128 x)\n+{\n+#ifdef USE_FENV_H\n+\tfenv_t env;\n+#endif\n+\tint64_t i0,j0,sx;\n+\tuint64_t i,i1;\n+\t__float128 w,t;\n+\tGET_FLT128_WORDS64(i0,i1,x);\n+\tsx = (((uint64_t)i0)>>63);\n+\tj0 = ((i0>>48)&0x7fff)-0x3fff;\n+\tif(j0<48) {\n+\t    if(j0<0) {\n+\t\tif(((i0&0x7fffffffffffffffLL)|i1)==0) return x;\n+\t\ti1 |= (i0&0x0000ffffffffffffLL);\n+\t\ti0 &= 0xffffe00000000000ULL;\n+\t\ti0 |= ((i1|-i1)>>16)&0x0000800000000000LL;\n+\t\tSET_FLT128_MSW64(x,i0);\n+#ifdef USE_FENV_H\n+\t\tfeholdexcept (&env);\n+#endif\n+\t        w = TWO112[sx]+x;\n+\t        t = w-TWO112[sx];\n+#ifdef USE_FENV_H\n+\t        fesetenv (&env);\n+#endif\n+\t\tGET_FLT128_MSW64(i0,t);\n+\t\tSET_FLT128_MSW64(t,(i0&0x7fffffffffffffffLL)|(sx<<63));\n+\t        return t;\n+\t    } else {\n+\t\ti = (0x0000ffffffffffffLL)>>j0;\n+\t\tif(((i0&i)|i1)==0) return x; /* x is integral */\n+\t\ti>>=1;\n+\t\tif(((i0&i)|i1)!=0) {\n+\t\t    if(j0==47) i1 = 0x4000000000000000ULL; else\n+\t\t    i0 = (i0&(~i))|((0x0000200000000000LL)>>j0);\n+\t\t}\n+\t    }\n+\t} else if (j0>111) {\n+\t    if(j0==0x4000) return x+x;\t/* inf or NaN */\n+\t    else return x;\t\t/* x is integral */\n+\t} else {\n+\t    i = -1ULL>>(j0-48);\n+\t    if((i1&i)==0) return x;\t/* x is integral */\n+\t    i>>=1;\n+\t    if((i1&i)!=0) i1 = (i1&(~i))|((0x4000000000000000LL)>>(j0-48));\n+\t}\n+\tSET_FLT128_WORDS64(x,i0,i1);\n+#ifdef USE_FENV_H\n+\tfeholdexcept (&env);\n+#endif\n+\tw = TWO112[sx]+x;\n+\tt = w-TWO112[sx];\n+#ifdef USE_FENV_H\t\n+\tfesetenv (&env);\n+#endif\n+\treturn t;\n+}"}, {"sha": "3e3b4f68ce4e3f3c713af3f07ab3627e3c945575", "filename": "libquadmath/math/remquoq.c", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Fremquoq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fmath%2Fremquoq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fremquoq.c?ref=dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "patch": "@@ -0,0 +1,107 @@\n+/* Compute remainder and a congruent to the quotient.\n+   Copyright (C) 1997, 1999, 2002 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997 and\n+\t\t  Jakub Jelinek <jj@ultra.linux.cz>, 1999.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.  */\n+\n+#include \"quadmath-imp.h\"\n+\n+\n+static const __float128 zero = 0.0;\n+\n+\n+__float128\n+remquoq (__float128 x, __float128 y, int *quo)\n+{\n+  int64_t hx,hy;\n+  u_int64_t sx,lx,ly,qs;\n+  int cquo;\n+\n+  GET_FLT128_WORDS64 (hx, lx, x);\n+  GET_FLT128_WORDS64 (hy, ly, y);\n+  sx = hx & 0x8000000000000000ULL;\n+  qs = sx ^ (hy & 0x8000000000000000ULL);\n+  hy &= 0x7fffffffffffffffLL;\n+  hx &= 0x7fffffffffffffffLL;\n+\n+  /* Purge off exception values.  */\n+  if ((hy | ly) == 0)\n+    return (x * y) / (x * y); \t\t\t/* y = 0 */\n+  if ((hx >= 0x7fff000000000000LL)\t\t/* x not finite */\n+      || ((hy >= 0x7fff000000000000LL)\t\t/* y is NaN */\n+\t  && (((hy - 0x7fff000000000000LL) | ly) != 0)))\n+    return (x * y) / (x * y);\n+\n+  if (hy <= 0x7ffbffffffffffffLL)\n+    x = fmodq (x, 8 * y);              /* now x < 8y */\n+      \n+  if (((hx - hy) | (lx - ly)) == 0)\n+    {\n+      *quo = qs ? -1 : 1;\n+      return zero * x;\n+    }\n+\n+  x  = fabsq (x);\n+  y  = fabsq (y);\n+  cquo = 0;\n+\n+  if (x >= 4 * y)\n+    {\n+      x -= 4 * y;\n+      cquo += 4;\n+    }\n+  if (x >= 2 * y)\n+    {\n+      x -= 2 * y;\n+      cquo += 2;\n+    }\n+\n+  if (hy < 0x0002000000000000LL)\n+    {\n+      if (x + x > y)\n+\t{\n+\t  x -= y;\n+\t  ++cquo;\n+\t  if (x + x >= y)\n+\t    {\n+\t      x -= y;\n+\t      ++cquo;\n+\t    }\n+\t}\n+    }\n+  else\n+    {\n+      __float128 y_half = 0.5Q * y;\n+      if (x > y_half)\n+\t{\n+\t  x -= y;\n+\t  ++cquo;\n+\t  if (x >= y_half)\n+\t    {\n+\t      x -= y;\n+\t      ++cquo;\n+\t    }\n+\t}\n+    }\n+\n+  *quo = qs ? -cquo : cquo;\n+\n+  if (sx)\n+    x = -x;\n+  return x;\n+}"}, {"sha": "58e3146e36452b15c78297d501f26d8b5f606245", "filename": "libquadmath/quadmath-imp.h", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fquadmath-imp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fquadmath-imp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath-imp.h?ref=dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "patch": "@@ -42,26 +42,19 @@ extern __float128 __quadmath_kernel_cosq (__float128, __float128);\n #endif\n \n \n-// If we don't have macros to know endianess, assume little endian\n-#if !defined(__BIG_ENDIAN__) && !defined(__LITTLE_ENDIAN__)\n-# define __LITTLE_ENDIAN__ 1\n-#endif\n-\n-\n // Main union type we use to manipulate the floating-point type\n typedef union\n {\n   __float128 value;\n \n   struct\n   {\n-#if __BIG_ENDIAN__\n+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n     unsigned negative:1;\n     unsigned exponent:15;\n     uint64_t mant_high:48;\n     uint64_t mant_low:64;\n-#endif\n-#if __LITTLE_ENDIAN__\n+#else\n     uint64_t mant_low:64;\n     uint64_t mant_high:48;\n     unsigned exponent:15;\n@@ -71,25 +64,23 @@ typedef union\n \n   struct\n   {\n-#if __BIG_ENDIAN__\n+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n     uint64_t high;\n     uint64_t low;\n-#endif\n-#if __LITTLE_ENDIAN__\n+#else\n     uint64_t low;\n     uint64_t high;\n #endif\n   } words64;\n \n   struct\n   {\n-#if __BIG_ENDIAN__\n+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n     uint32_t w0;\n     uint32_t w1;\n     uint32_t w2;\n     uint32_t w3;\n-#endif\n-#if __LITTLE_ENDIAN__\n+#else\n     uint32_t w3;\n     uint32_t w2;\n     uint32_t w1;\n@@ -99,14 +90,13 @@ typedef union\n \n   struct\n   {\n-#if __BIG_ENDIAN__\n+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n     unsigned negative:1;\n     unsigned exponent:15;\n     unsigned quiet_nan:1;\n     uint64_t mant_high:47;\n     uint64_t mant_low:64;\n-#endif\n-#if __LITTLE_ENDIAN__\n+#else\n     uint64_t mant_low:64;\n     uint64_t mant_high:47;\n     unsigned quiet_nan:1;"}, {"sha": "268c299111e732d1b0d47400f8c04f8021a66a7f", "filename": "libquadmath/quadmath.h", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fquadmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fquadmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath.h?ref=dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "patch": "@@ -36,7 +36,7 @@ extern __float128 asinhq (__float128);\n extern __float128 atanq (__float128);\n extern __float128 atanhq (__float128);\n extern __float128 atan2q (__float128, __float128);\n-extern __float128 cbrtq (const __float128);\n+extern __float128 cbrtq (__float128);\n extern __float128 ceilq (__float128);\n extern __float128 copysignq (__float128, __float128);\n extern __float128 coshq (__float128);\n@@ -46,38 +46,47 @@ extern __float128 erfcq (__float128);\n extern __float128 expq (__float128);\n extern __float128 expm1q (__float128);\n extern __float128 fabsq (__float128);\n-extern int finiteq (const __float128);\n+extern __float128 fdimq (__float128, __float128);\n+extern int finiteq (__float128);\n extern __float128 floorq (__float128);\n extern __float128 fmaq (__float128, __float128, __float128);\n+extern __float128 fmaxq (__float128, __float128);\n+extern __float128 fminq (__float128, __float128);\n extern __float128 fmodq (__float128, __float128);\n extern __float128 frexpq (__float128, int *);\n extern __float128 hypotq (__float128, __float128);\n extern int isinfq (__float128);\n-extern int isnanq (const __float128);\n+extern int ilogbq (__float128);\n+extern int isnanq (__float128);\n extern __float128 j0q (__float128);\n extern __float128 j1q (__float128);\n extern __float128 jnq (int, __float128);\n extern __float128 ldexpq (__float128, int);\n extern __float128 lgammaq (__float128);\n+extern long long int llrintq (__float128);\n extern long long int llroundq (__float128);\n extern __float128 logq (__float128);\n extern __float128 log10q (__float128);\n+extern __float128 log2q (__float128);\n extern __float128 log1pq (__float128);\n+extern long int lrintq (__float128);\n extern long int lroundq (__float128);\n extern __float128 modfq (__float128, __float128 *);\n extern __float128 nanq (const char *);\n+extern __float128 nearbyintq (__float128);\n extern __float128 nextafterq (__float128, __float128);\n extern __float128 powq (__float128, __float128);\n extern __float128 remainderq (__float128, __float128);\n+extern __float128 remquoq (__float128, __float128, int *);\n extern __float128 rintq (__float128);\n extern __float128 roundq (__float128);\n extern __float128 scalblnq (__float128, long int);\n extern __float128 scalbnq (__float128, int);\n-extern int signbitq (const __float128);\n+extern int signbitq (__float128);\n extern void sincosq (__float128, __float128 *, __float128 *);\n extern __float128 sinhq (__float128);\n extern __float128 sinq (__float128);\n-extern __float128 sqrtq (const __float128);\n+extern __float128 sqrtq (__float128);\n extern __float128 tanq (__float128);\n extern __float128 tanhq (__float128);\n extern __float128 tgammaq (__float128);\n@@ -90,6 +99,8 @@ extern __float128 ynq (int, __float128);\n // Prototypes for complex functions\n extern __float128 cabsq (__complex128);\n extern __float128 cargq (__complex128);\n+extern __float128 cimagq (__complex128);\n+extern __float128 crealq (__complex128);\n extern __complex128 cacosq (__complex128);\n extern __complex128 cacoshq (__complex128);\n extern __complex128 casinq (__complex128);\n@@ -102,7 +113,9 @@ extern __complex128 cexpq (__complex128);\n extern __complex128 cexpiq (__float128);\n extern __complex128 clogq (__complex128);\n extern __complex128 clog10q (__complex128);\n+extern __complex128 conjq (__complex128);\n extern __complex128 cpowq (__complex128, __complex128);\n+extern __complex128 cprojq (__complex128);\n extern __complex128 csinq (__complex128);\n extern __complex128 csinhq (__complex128);\n extern __complex128 csqrtq (__complex128);\n@@ -146,4 +159,25 @@ extern void quadmath_dtoaq (char *, size_t, size_t, __float128);\n #define M_SQRT2q\t1.4142135623730950488016887242096981Q  /* sqrt(2) */\n #define M_SQRT1_2q\t0.7071067811865475244008443621048490Q  /* 1/sqrt(2) */\n \n+#define __quadmath_extern_inline \\\n+  extern inline __attribute__ ((__gnu_inline__))\n+\n+__quadmath_extern_inline __float128\n+cimagq (__complex128 __z)\n+{\n+  return __imag__ __z;\n+}\n+\n+__quadmath_extern_inline __float128\n+crealq (__complex128 __z)\n+{\n+  return __real__ __z;\n+}\n+\n+__quadmath_extern_inline __complex128\n+conjq (__complex128 __z)\n+{\n+  return __extension__ ~__z;\n+}\n+\n #endif"}, {"sha": "eab606dac6099b5b525911541cb3c932c31bae12", "filename": "libquadmath/quadmath.map", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fquadmath.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fquadmath.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath.map?ref=dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "patch": "@@ -7,12 +7,6 @@ QUADMATH_1.0 {\n     atanq;\n     atanhq;\n     atan2q;\n-    cacoshq;\n-    cacosq;\n-    casinhq;\n-    casinq;\n-    catanhq;\n-    catanq;\n     cbrtq;\n     ceilq;\n     copysignq;\n@@ -23,29 +17,38 @@ QUADMATH_1.0 {\n     expq;\n     expm1q;\n     fabsq;\n+    fdimq;\n     finiteq;\n     floorq;\n     fmaq;\n+    fmaxq;\n+    fminq;\n     fmodq;\n     frexpq;\n     hypotq;\n+    ilogbq;\n     isinfq;\n     isnanq;\n     j0q;\n     j1q;\n     jnq;\n     ldexpq;\n     lgammaq;\n+    llrintq;\n     llroundq;\n     logq;\n     log10q;\n     log1pq;\n+    log2q;\n+    lrintq;\n     lroundq;\n     modfq;\n     nanq;\n+    nearbyintq;\n     nextafterq;\n     powq;\n     remainderq;\n+    remquoq;\n     rintq;\n     roundq;\n     scalblnq;\n@@ -64,13 +67,23 @@ QUADMATH_1.0 {\n     ynq;\n     cabsq;\n     cargq;\n+    cimagq;\n+    crealq;\n+    cacoshq;\n+    cacosq;\n+    casinhq;\n+    casinq;\n+    catanhq;\n+    catanq;\n     ccosq;\n     ccoshq;\n     cexpq;\n     cexpiq;\n     clogq;\n     clog10q;\n+    conjq;\n     cpowq;\n+    cprojq;\n     csinq;\n     csinhq;\n     csqrtq;"}, {"sha": "28cc14ad8bb8232f8906fcb4d19700090434eaaf", "filename": "libquadmath/quadmath_weak.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fquadmath_weak.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbc9f6c6ee8decb40aed6c790ebe4337b52a37df/libquadmath%2Fquadmath_weak.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath_weak.h?ref=dbc9f6c6ee8decb40aed6c790ebe4337b52a37df", "patch": "@@ -53,29 +53,38 @@ __qmath3 (erfcq)\n __qmath3 (expq)\n __qmath3 (expm1q)\n __qmath3 (fabsq)\n+__qmath3 (fdimq)\n __qmath3 (finiteq)\n __qmath3 (floorq)\n __qmath3 (fmaq)\n+__qmath3 (fmaxq)\n+__qmath3 (fminq)\n __qmath3 (fmodq)\n __qmath3 (frexpq)\n __qmath3 (hypotq)\n+__qmath3 (ilogbq)\n __qmath3 (isinfq)\n __qmath3 (isnanq)\n __qmath3 (j0q)\n __qmath3 (j1q)\n __qmath3 (jnq)\n __qmath3 (ldexpq)\n __qmath3 (lgammaq)\n+__qmath3 (llrintq)\n __qmath3 (llroundq)\n __qmath3 (logq)\n __qmath3 (log10q)\n __qmath3 (log1pq)\n+__qmath3 (log2q)\n+__qmath3 (lrintq)\n __qmath3 (lroundq)\n __qmath3 (modfq)\n __qmath3 (nanq)\n+__qmath3 (nearbyintq)\n __qmath3 (nextafterq)\n __qmath3 (powq)\n __qmath3 (remainderq)\n+__qmath3 (remquoq)\n __qmath3 (rintq)\n __qmath3 (roundq)\n __qmath3 (scalblnq)\n@@ -97,6 +106,8 @@ __qmath3 (ynq)\n // Prototypes for complex functions\n __qmath3 (cabsq)\n __qmath3 (cargq)\n+__qmath3 (cimagq)\n+__qmath3 (crealq)\n __qmath3 (cacosq)\n __qmath3 (cacoshq)\n __qmath3 (casinq)\n@@ -109,7 +120,9 @@ __qmath3 (cexpq)\n __qmath3 (cexpiq)\n __qmath3 (clogq)\n __qmath3 (clog10q)\n+__qmath3 (conjq)\n __qmath3 (cpowq)\n+__qmath3 (cprojq)\n __qmath3 (csinq)\n __qmath3 (csinhq)\n __qmath3 (csqrtq)"}]}