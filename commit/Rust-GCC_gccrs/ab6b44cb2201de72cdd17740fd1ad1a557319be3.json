{"sha": "ab6b44cb2201de72cdd17740fd1ad1a557319be3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI2YjQ0Y2IyMjAxZGU3MmNkZDE3NzQwZmQxYWQxYTU1NzMxOWJlMw==", "commit": {"author": {"name": "Matthew Fortune", "email": "mpf@gcc.gnu.org", "date": "2017-01-19T16:05:59Z"}, "committer": {"name": "Matthew Fortune", "email": "mpf@gcc.gnu.org", "date": "2017-01-19T16:05:59Z"}, "message": "MIPS: PR target/78176 add -mlxc1-sxc1.\n\ngcc/\n\n\tPR target/78176\n\t* config.gcc (supported_defaults): Add lxc1-sxc1.\n\t(with_lxc1_sxc1): Add validation.\n\t(all_defaults): Add lxc1-sxc1.\n\t* config/mips/mips.opt (mlxc1-sxc1): New option.\n\t* gcc/config/mips/mips.h (OPTION_DEFAULT_SPECS): Add a default for\n\tmlxc1-sxc1.\n\t(TARGET_CPU_CPP_BUILTINS): Add builtin_define for\n\t__mips_no_lxc1_sxc1.\n\t(ISA_HAS_LXC1_SXC1): Gate with mips_lxc1_sxc1.\n\t* gcc/doc/invoke.texi (-mlxc1-sxc1): Document the new option.\n\t* doc/install.texi (--with-lxc1-sxc1): Document the new option.\n\ngcc/testsuite/\n\n\t* gcc.target/mips/lxc1-sxc1-1.c: New file.\n\t* gcc.target/mips/lxc1-sxc1-2.c: Likewise.\n\t* gcc.target/mips/mips.exp (mips_option_groups): Add ghost option\n\tHAS_LXC1.\n\t(mips_option_groups): Add -m[no-]lxc1-sxc1.\n\t(mips-dg-init): Detect default -mno-lxc1-sxc1.\n\t(mips-dg-options): Handle HAS_LXC1 arch upgrade/downgrade.\n\nFrom-SVN: r244640", "tree": {"sha": "ae0716bdf6bac1b9b8b9cef9772bca16a85af21c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae0716bdf6bac1b9b8b9cef9772bca16a85af21c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab6b44cb2201de72cdd17740fd1ad1a557319be3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab6b44cb2201de72cdd17740fd1ad1a557319be3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab6b44cb2201de72cdd17740fd1ad1a557319be3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab6b44cb2201de72cdd17740fd1ad1a557319be3/comments", "author": null, "committer": null, "parents": [{"sha": "a08895999d4a0d4b23b9b3debd08257e6c8122ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a08895999d4a0d4b23b9b3debd08257e6c8122ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a08895999d4a0d4b23b9b3debd08257e6c8122ab"}], "stats": {"total": 214, "additions": 209, "deletions": 5}, "files": [{"sha": "f933e1ad240e1aa9fdcb86f6d11d3bdfe2b8859a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6b44cb2201de72cdd17740fd1ad1a557319be3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6b44cb2201de72cdd17740fd1ad1a557319be3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab6b44cb2201de72cdd17740fd1ad1a557319be3", "patch": "@@ -1,3 +1,18 @@\n+2017-01-19  Doug Gilmore  <doug.gilmore@imgtec.com>\n+\n+\tPR target/78176\n+\t* config.gcc (supported_defaults): Add lxc1-sxc1.\n+\t(with_lxc1_sxc1): Add validation.\n+\t(all_defaults): Add lxc1-sxc1.\n+\t* config/mips/mips.opt (mlxc1-sxc1): New option.\n+\t* gcc/config/mips/mips.h (OPTION_DEFAULT_SPECS): Add a default for\n+\tmlxc1-sxc1.\n+\t(TARGET_CPU_CPP_BUILTINS): Add builtin_define for\n+\t__mips_no_lxc1_sxc1.\n+\t(ISA_HAS_LXC1_SXC1): Gate with mips_lxc1_sxc1.\n+\t* gcc/doc/invoke.texi (-mlxc1-sxc1): Document the new option.\n+\t* doc/install.texi (--with-lxc1-sxc1): Document the new option.\n+\n 2017-01-19  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/72488"}, {"sha": "dd8c08cfd9328f6e1e3f148f4318248ceee37087", "filename": "gcc/config.gcc", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6b44cb2201de72cdd17740fd1ad1a557319be3/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6b44cb2201de72cdd17740fd1ad1a557319be3/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=ab6b44cb2201de72cdd17740fd1ad1a557319be3", "patch": "@@ -3940,7 +3940,7 @@ case \"${target}\" in\n \t\t;;\n \n \tmips*-*-*)\n-\t\tsupported_defaults=\"abi arch arch_32 arch_64 float fpu nan fp_32 odd_spreg_32 tune tune_32 tune_64 divide llsc mips-plt synci\"\n+\t\tsupported_defaults=\"abi arch arch_32 arch_64 float fpu nan fp_32 odd_spreg_32 tune tune_32 tune_64 divide llsc mips-plt synci lxc1-sxc1\"\n \n \t\tcase ${with_float} in\n \t\t\"\" | soft | hard)\n@@ -4063,6 +4063,21 @@ case \"${target}\" in\n \t\t\texit 1\n \t\t\t;;\n \t\tesac\n+\n+\t\tcase ${with_lxc1_sxc1} in\n+\t\tyes)\n+\t\t\twith_lxc1_sxc1=lxc1-sxc1\n+\t\t\t;;\n+\t\tno)\n+\t\t\twith_lxc1_sxc1=no-lxc1-sxc1\n+\t\t\t;;\n+\t\t\"\")\n+\t\t\t;;\n+\t\t*)\n+\t\t\techo \"Unknown lxc1-sxc1 type used in --with-lxc1-sxc1\" 1>&2\n+\t\t\texit 1\n+\t\t\t;;\n+\t\tesac\n \t\t;;\n \n \tnds32*-*-*)\n@@ -4496,7 +4511,7 @@ case ${target} in\n esac\n \n t=\n-all_defaults=\"abi cpu cpu_32 cpu_64 arch arch_32 arch_64 tune tune_32 tune_64 schedule float mode fpu nan fp_32 odd_spreg_32 divide llsc mips-plt synci tls\"\n+all_defaults=\"abi cpu cpu_32 cpu_64 arch arch_32 arch_64 tune tune_32 tune_64 schedule float mode fpu nan fp_32 odd_spreg_32 divide llsc mips-plt synci tls lxc1-sxc1\"\n for option in $all_defaults\n do\n \teval \"val=\\$with_\"`echo $option | sed s/-/_/g`"}, {"sha": "4205589af459aa1696c85486232514d360aad21f", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6b44cb2201de72cdd17740fd1ad1a557319be3/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6b44cb2201de72cdd17740fd1ad1a557319be3/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=ab6b44cb2201de72cdd17740fd1ad1a557319be3", "patch": "@@ -637,6 +637,8 @@ struct mips_cpu_info {\n \t\t\t\t\t\t\t\t\t\\\n       if (TARGET_CACHE_BUILTIN)\t\t\t\t\t\t\\\n \tbuiltin_define (\"__GCC_HAVE_BUILTIN_MIPS_CACHE\");\t\t\\\n+      if (!ISA_HAS_LXC1_SXC1)\t\t\t\t\t\t\\\n+\tbuiltin_define (\"__mips_no_lxc1_sxc1\");\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n@@ -866,7 +868,8 @@ struct mips_cpu_info {\n   {\"divide\", \"%{!mdivide-traps:%{!mdivide-breaks:-mdivide-%(VALUE)}}\" }, \\\n   {\"llsc\", \"%{!mllsc:%{!mno-llsc:-m%(VALUE)}}\" }, \\\n   {\"mips-plt\", \"%{!mplt:%{!mno-plt:-m%(VALUE)}}\" }, \\\n-  {\"synci\", \"%{!msynci:%{!mno-synci:-m%(VALUE)}}\" }\n+  {\"synci\", \"%{!msynci:%{!mno-synci:-m%(VALUE)}}\" },\t\t\t\\\n+  {\"lxc1-sxc1\", \"%{!mlxc1-sxc1:%{!mno-lxc1-sxc1:-m%(VALUE)}}\" } \\\n \n /* A spec that infers the:\n    -mnan=2008 setting from a -mips argument,\n@@ -1036,7 +1039,8 @@ struct mips_cpu_info {\n \n /* ISA has floating-point indexed load and store instructions\n    (LWXC1, LDXC1, SWXC1 and SDXC1).  */\n-#define ISA_HAS_LXC1_SXC1\tISA_HAS_FP4\n+#define ISA_HAS_LXC1_SXC1\t(ISA_HAS_FP4\t\t\t\t\\\n+\t\t\t\t && mips_lxc1_sxc1)\n \n /* ISA has paired-single instructions.  */\n #define ISA_HAS_PAIRED_SINGLE\t((ISA_MIPS64\t\t\t\t\\"}, {"sha": "75ebafdba26949b1bad3f6e174ddf097709b96d2", "filename": "gcc/config/mips/mips.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6b44cb2201de72cdd17740fd1ad1a557319be3/gcc%2Fconfig%2Fmips%2Fmips.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6b44cb2201de72cdd17740fd1ad1a557319be3/gcc%2Fconfig%2Fmips%2Fmips.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.opt?ref=ab6b44cb2201de72cdd17740fd1ad1a557319be3", "patch": "@@ -388,6 +388,10 @@ mlra\n Target Report Var(mips_lra_flag) Init(1) Save\n Use LRA instead of reload.\n \n+mlxc1-sxc1\n+Target Report Var(mips_lxc1_sxc1) Init(1)\n+Use lwxc1/swxc1/ldxc1/sdxc1 instructions where applicable.\n+\n mtune=\n Target RejectNegative Joined Var(mips_tune_option) ToLower Enum(mips_arch_opt_value)\n -mtune=PROCESSOR\tOptimize the output for PROCESSOR."}, {"sha": "712b82a1442a64e65311d752f7b07029293a99b7", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6b44cb2201de72cdd17740fd1ad1a557319be3/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6b44cb2201de72cdd17740fd1ad1a557319be3/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=ab6b44cb2201de72cdd17740fd1ad1a557319be3", "patch": "@@ -1375,6 +1375,25 @@ On MIPS targets, make @option{-msynci} the default when no\n On MIPS targets, make @option{-mno-synci} the default when no\n @option{-msynci} option is passed.  This is the default.\n \n+@item --with-lxc1-sxc1\n+On MIPS targets, make @option{-mlxc1-sxc1} the default when no\n+@option{-mno-lxc1-sxc1} option is passed.  This is the default.\n+\n+@item --without-lxc1-sxc1\n+On MIPS targets, make @option{-mno-lxc1-sxc1} the default when no\n+@option{-mlxc1-sxc1} option is passed.  The indexed load/store\n+instructions are not directly a problem but can lead to unexpected\n+behaviour when deployed in an application intended for a 32-bit address\n+space but run on a 64-bit processor.  The issue is seen because all\n+known MIPS 64-bit Linux kernels execute o32 and n32 applications\n+with 64-bit addressing enabled which affects the overflow behaviour\n+of the indexed addressing mode.  GCC will assume that ordinary\n+32-bit arithmetic overflow behaviour is the same whether performed\n+as an @code{addu} instruction or as part of the address calculation\n+in @code{lwxc1} type instructions.  This assumption holds true in a\n+pure 32-bit environment and can hold true in a 64-bit environment if\n+the address space is accurately set to be 32-bit for o32 and n32.\n+\n @item --with-mips-plt\n On MIPS targets, make use of copy relocations and PLTs.\n These features are extensions to the traditional"}, {"sha": "a13a450b1ee25c7f1e1ec1ca286fb90d7c184107", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6b44cb2201de72cdd17740fd1ad1a557319be3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6b44cb2201de72cdd17740fd1ad1a557319be3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ab6b44cb2201de72cdd17740fd1ad1a557319be3", "patch": "@@ -19932,6 +19932,12 @@ it is unused.\n \n This optimization is off by default at all optimization levels.\n \n+@item -mlxc1-sxc1\n+@itemx -mno-lxc1-sxc1\n+@opindex mlxc1-sxc1\n+When applicable, enable (disable) the generation of @code{lwxc1},\n+@code{swxc1}, @code{ldxc1}, @code{sdxc1} instructions.  Enabled by default.\n+\n @end table\n \n @node MMIX Options"}, {"sha": "0ba8f93b6a889492ca5b86e9880d3cd06f96c583", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6b44cb2201de72cdd17740fd1ad1a557319be3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6b44cb2201de72cdd17740fd1ad1a557319be3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab6b44cb2201de72cdd17740fd1ad1a557319be3", "patch": "@@ -1,3 +1,14 @@\n+2017-01-19  Matthew Fortune  <matthew.fortune@imgtec.com>\n+\n+\tPR target/78176\n+\t* gcc.target/mips/lxc1-sxc1-1.c: New file.\n+\t* gcc.target/mips/lxc1-sxc1-2.c: Likewise.\n+\t* gcc.target/mips/mips.exp (mips_option_groups): Add ghost option\n+\tHAS_LXC1.\n+\t(mips_option_groups): Add -m[no-]lxc1-sxc1.\n+\t(mips-dg-init): Detect default -mno-lxc1-sxc1.\n+\t(mips-dg-options): Handle HAS_LXC1 arch upgrade/downgrade.\n+\n 2017-01-19  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \tPR fortran/70696"}, {"sha": "f455eb8776a680828c58545d1f6ea0058d8d786f", "filename": "gcc/testsuite/gcc.target/mips/lxc1-sxc1-1.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6b44cb2201de72cdd17740fd1ad1a557319be3/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Flxc1-sxc1-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6b44cb2201de72cdd17740fd1ad1a557319be3/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Flxc1-sxc1-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Flxc1-sxc1-1.c?ref=ab6b44cb2201de72cdd17740fd1ad1a557319be3", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-options \"(HAS_LXC1) -mno-lxc1-sxc1\" } */\n+/* { dg-final { scan-assembler-not \"\\tldxc1\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tsdxc1\\t\" } } */\n+\n+#ifndef __mips_no_lxc1_sxc1\n+#error missing definition of __mips_no_lxc1_sxc1\n+#endif\n+\n+double ldexp(double x, int exp);\n+\n+typedef struct\n+{\n+  double** rows;\n+} d_mat_struct;\n+\n+typedef d_mat_struct d_mat_t[1];\n+\n+#define d_mat_entry(mat,i,j) (*((mat)->rows[i] + (j)))\n+\n+double __attribute__((noinline))\n+ldxc1_test (int kappa, int zeros, double ctt, int* expo, d_mat_t r, double* s)\n+{\n+  int kappa2 = kappa;\n+  double tmp = 0.0;\n+\n+  do\n+    {\n+      kappa--;\n+      if (kappa > zeros + 1)\n+\t{\n+\t  tmp = d_mat_entry(r, kappa - 1, kappa - 1) * ctt;\n+\t  tmp = ldexp(tmp, (expo[kappa - 1] - expo[kappa2]));\n+\t}\n+    }\n+  while ((kappa >= zeros + 2) && (s[kappa - 1] <= tmp));\n+\n+  return tmp;\n+}\n+\n+#define SIZE 20\n+\n+int main(void)\n+{\n+  int kappa = SIZE - 1;\n+  int zeros = 1;\n+  double ctt = 2;\n+\n+  int expo[SIZE] = {0};\n+  double s[SIZE] = {0};\n+  double rows_data[SIZE][SIZE] = {0};\n+  double* rows[SIZE];\n+\n+  for (int i = 0; i < SIZE; i++)\n+    rows[i] = rows_data[i];\n+\n+  d_mat_t r = { rows };\n+\n+  ldxc1_test(kappa, zeros, ctt, expo, r, s);\n+  return 0;\n+}"}, {"sha": "dfbf6b5c170f51ed35d3657679bf1557d7458b5e", "filename": "gcc/testsuite/gcc.target/mips/lxc1-sxc1-2.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6b44cb2201de72cdd17740fd1ad1a557319be3/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Flxc1-sxc1-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6b44cb2201de72cdd17740fd1ad1a557319be3/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Flxc1-sxc1-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Flxc1-sxc1-2.c?ref=ab6b44cb2201de72cdd17740fd1ad1a557319be3", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-options \"(HAS_LXC1) -mlxc1-sxc1\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+/* { dg-final { scan-assembler \"\\tldxc1\\t\" } } */\n+\n+#ifdef __mips_no_lxc1_sxc1\n+#error unexpected definition of __mips_no_lxc1_sxc1\n+#endif\n+\n+double ldexp(double x, int exp);\n+\n+typedef struct\n+{\n+  double** rows;\n+} d_mat_struct;\n+\n+typedef d_mat_struct d_mat_t[1];\n+\n+#define d_mat_entry(mat,i,j) (*((mat)->rows[i] + (j)))\n+\n+double __attribute__((noinline))\n+ldxc1_test (int kappa, int zeros, double ctt, int* expo, d_mat_t r, double* s)\n+{\n+  int kappa2 = kappa;\n+  double tmp = 0.0;\n+\n+  do\n+    {\n+      kappa--;\n+      if (kappa > zeros + 1)\n+\t{\n+\t  tmp = d_mat_entry(r, kappa - 1, kappa - 1) * ctt;\n+\t  tmp = ldexp(tmp, (expo[kappa - 1] - expo[kappa2]));\n+\t}\n+    }\n+  while ((kappa >= zeros + 2) && (s[kappa - 1] <= tmp));\n+\n+  return tmp;\n+}\n+\n+#define SIZE 20\n+\n+int main(void)\n+{\n+  int kappa = SIZE - 1;\n+  int zeros = 1;\n+  double ctt = 2;\n+\n+  int expo[SIZE] = {0};\n+  double s[SIZE] = {0};\n+  double rows_data[SIZE][SIZE] = {0};\n+  double* rows[SIZE];\n+\n+  for (int i = 0; i < SIZE; i++)\n+    rows[i] = rows_data[i];\n+\n+  d_mat_t r = { rows };\n+\n+  ldxc1_test(kappa, zeros, ctt, expo, r, s);\n+  return 0;\n+}"}, {"sha": "5296a15f616fedb839ff12289692bc4e6d653c28", "filename": "gcc/testsuite/gcc.target/mips/mips.exp", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6b44cb2201de72cdd17740fd1ad1a557319be3/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6b44cb2201de72cdd17740fd1ad1a557319be3/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp?ref=ab6b44cb2201de72cdd17740fd1ad1a557319be3", "patch": "@@ -258,6 +258,7 @@ set mips_option_groups {\n     madd \"HAS_MADD\"\n     maddps \"HAS_MADDPS\"\n     lsa \"(|!)HAS_LSA\"\n+    lxc1 \"HAS_LXC1\"\n     section_start \"-Wl,--section-start=.*\"\n     frame-header \"-mframe-header-opt|-mno-frame-header-opt\"\n     stack-protector \"-fstack-protector\"\n@@ -282,6 +283,7 @@ foreach option {\n     gpopt\n     local-sdata\n     long-calls\n+    lxc1-sxc1\n     paired-single\n     plt\n     shared\n@@ -855,6 +857,12 @@ proc mips-dg-init {} {\n \t    \"-mno-smartmips\",\n \t    #endif\n \n+\t    #ifdef __mips_no_lxc1_sxc1\n+\t    \"-mno-lxc1-sxc1\",\n+\t    #else\n+\t    \"-mlxc1-sxc1\"\n+\t    #endif\n+\n \t    #ifdef __mips_synci\n \t    \"-msynci\",\n \t    #else\n@@ -1173,7 +1181,8 @@ proc mips-dg-options { args } {\n \t#\n \t#\n \t} elseif { $isa < 4\n-\t\t   && [mips_have_test_option_p options \"HAS_MOVN\"] } {\n+\t\t   && ([mips_have_test_option_p options \"HAS_LXC1\"]\n+\t\t       || [mips_have_test_option_p options \"HAS_MOVN\"]) } {\n \t    mips_make_test_option options \"-mips4\"\n         # We need MIPS III or higher for:\n \t#\n@@ -1214,6 +1223,7 @@ proc mips-dg-options { args } {\n \t\t       || [mips_have_test_option_p options \"-mfp32\"]\n \t\t       || [mips_have_test_option_p options \"-mfix-r10000\"]\n \t\t       || [mips_have_test_option_p options \"NOT_HAS_DMUL\"]\n+\t\t       || [mips_have_test_option_p options \"HAS_LXC1\"]\n \t\t       || [mips_have_test_option_p options \"HAS_MOVN\"]\n \t\t       || [mips_have_test_option_p options \"HAS_MADD\"]\n \t\t       || [mips_have_test_option_p options \"-mpaired-single\"]"}]}