{"sha": "9188b2863c0a2b6c91dbd6e6e373fada6b34f225", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE4OGIyODYzYzBhMmI2YzkxZGJkNmU2ZTM3M2ZhZGE2YjM0ZjIyNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-05-19T07:10:42Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-05-19T07:10:42Z"}, "message": "rtl.h (reg_info): Add an nregs field.\n\ngcc/\n\t* rtl.h (reg_info): Add an nregs field.\n\t(REG_NREGS): Use it.\n\t(SET_REGNO_RAW): Delete.\n\t(set_regno_raw): New function.\n\t* regs.h (END_HARD_REGNO): Make equivalent to END_REGNO.\n\t(END_REGNO): Redefine in terms of REG_NREGS.\n\t* read-rtl.c (read_rtx_code): Call set_regno_raw instead of\n\tSET_REGNO_RAW.\n\t* emit-rtl.c (set_mode_and_regno): Likewise.\n\t* df-scan.c (df_ref_change_reg_with_loc): Use set_mode_and_regno\n\tinstead of SET_REGNO_RAW.\n\nFrom-SVN: r223342", "tree": {"sha": "b85ed03cf9e1c089c04a38231fdb767555930dc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b85ed03cf9e1c089c04a38231fdb767555930dc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9188b2863c0a2b6c91dbd6e6e373fada6b34f225", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9188b2863c0a2b6c91dbd6e6e373fada6b34f225", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9188b2863c0a2b6c91dbd6e6e373fada6b34f225", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9188b2863c0a2b6c91dbd6e6e373fada6b34f225/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8deccbb7c8e1a654f96a396125fd55a06d908de8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8deccbb7c8e1a654f96a396125fd55a06d908de8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8deccbb7c8e1a654f96a396125fd55a06d908de8"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "92e2bd402f52ab0d2f3e145066a99222d0e56ae9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9188b2863c0a2b6c91dbd6e6e373fada6b34f225/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9188b2863c0a2b6c91dbd6e6e373fada6b34f225/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9188b2863c0a2b6c91dbd6e6e373fada6b34f225", "patch": "@@ -1,3 +1,17 @@\n+2015-05-19  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* rtl.h (reg_info): Add an nregs field.\n+\t(REG_NREGS): Use it.\n+\t(SET_REGNO_RAW): Delete.\n+\t(set_regno_raw): New function.\n+\t* regs.h (END_HARD_REGNO): Make equivalent to END_REGNO.\n+\t(END_REGNO): Redefine in terms of REG_NREGS.\n+\t* read-rtl.c (read_rtx_code): Call set_regno_raw instead of\n+\tSET_REGNO_RAW.\n+\t* emit-rtl.c (set_mode_and_regno): Likewise.\n+\t* df-scan.c (df_ref_change_reg_with_loc): Use set_mode_and_regno\n+\tinstead of SET_REGNO_RAW.\n+\n 2015-05-19  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* rtl.h (PUT_MODE_RAW): New macro."}, {"sha": "3aec13cdb6ad8714d6e5b244581df06d9def2afb", "filename": "gcc/df-scan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9188b2863c0a2b6c91dbd6e6e373fada6b34f225/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9188b2863c0a2b6c91dbd6e6e373fada6b34f225/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=9188b2863c0a2b6c91dbd6e6e373fada6b34f225", "patch": "@@ -1930,7 +1930,7 @@ df_ref_change_reg_with_loc (rtx loc, unsigned int new_regno)\n \t\t\t\t    DF_REG_EQ_USE_GET (new_regno),\n \t\t\t\t    new_regno, loc);\n     }\n-  SET_REGNO_RAW (loc, new_regno);\n+  set_mode_and_regno (loc, GET_MODE (loc), new_regno);\n }\n \n "}, {"sha": "9766336fdc83feb9179b5a3a2abdd38c2fa82913", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9188b2863c0a2b6c91dbd6e6e373fada6b34f225/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9188b2863c0a2b6c91dbd6e6e373fada6b34f225/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=9188b2863c0a2b6c91dbd6e6e373fada6b34f225", "patch": "@@ -435,8 +435,11 @@ gen_blockage (void)\n void\n set_mode_and_regno (rtx x, machine_mode mode, unsigned int regno)\n {\n+  unsigned int nregs = (HARD_REGISTER_NUM_P (regno)\n+\t\t\t? hard_regno_nregs[regno][mode]\n+\t\t\t: 1);\n   PUT_MODE_RAW (x, mode);\n-  SET_REGNO_RAW (x, regno);\n+  set_regno_raw (x, regno, nregs);\n }\n \n /* Generate a new REG rtx.  Make sure ORIGINAL_REGNO is set properly, and"}, {"sha": "749efaff8af4691a0ec3a9b4be4cf16ffd3b0b10", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9188b2863c0a2b6c91dbd6e6e373fada6b34f225/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9188b2863c0a2b6c91dbd6e6e373fada6b34f225/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=9188b2863c0a2b6c91dbd6e6e373fada6b34f225", "patch": "@@ -1349,7 +1349,7 @@ read_rtx_code (const char *code_name)\n       case 'r':\n \tread_name (&name);\n \tvalidate_const_int (name.string);\n-\tSET_REGNO_RAW (return_rtx, atoi (name.string));\n+\tset_regno_raw (return_rtx, atoi (name.string), 1);\n \tREG_ATTRS (return_rtx) = NULL;\n \tbreak;\n "}, {"sha": "a1374d10941ad3e86bd23747862527bfd2a633f6", "filename": "gcc/regs.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9188b2863c0a2b6c91dbd6e6e373fada6b34f225/gcc%2Fregs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9188b2863c0a2b6c91dbd6e6e373fada6b34f225/gcc%2Fregs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregs.h?ref=9188b2863c0a2b6c91dbd6e6e373fada6b34f225", "patch": "@@ -288,11 +288,11 @@ end_hard_regno (machine_mode mode, unsigned int regno)\n \n /* Likewise for hard register X.  */\n \n-#define END_HARD_REGNO(X) end_hard_regno (GET_MODE (X), REGNO (X))\n+#define END_HARD_REGNO(X) END_REGNO (X)\n \n /* Likewise for hard or pseudo register X.  */\n \n-#define END_REGNO(X) (HARD_REGISTER_P (X) ? END_HARD_REGNO (X) : REGNO (X) + 1)\n+#define END_REGNO(X) (REGNO (X) + REG_NREGS (X))\n \n /* Add to REGS all the registers required to store a value of mode MODE\n    in register REGNO.  */"}, {"sha": "e7d06c2ecdd7e771250695ba99a6fbee29c4dfec", "filename": "gcc/rtl.h", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9188b2863c0a2b6c91dbd6e6e373fada6b34f225/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9188b2863c0a2b6c91dbd6e6e373fada6b34f225/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=9188b2863c0a2b6c91dbd6e6e373fada6b34f225", "patch": "@@ -210,7 +210,9 @@ struct GTY(()) reg_info {\n   /* The value of REGNO.  */\n   unsigned int regno;\n \n-  unsigned int unused : 32;\n+  /* The value of REG_NREGS.  */\n+  unsigned int nregs : 8;\n+  unsigned int unused : 24;\n \n   /* The value of REG_ATTRS.  */\n   reg_attrs *attrs;\n@@ -1712,15 +1714,11 @@ inline rtx_insn *JUMP_LABEL_AS_INSN (const rtx_insn *insn)\n    be used on RHS.  Use SET_REGNO to change the value.  */\n #define REGNO(RTX) (rhs_regno(RTX))\n #define SET_REGNO(RTX, N) (df_ref_change_reg_with_loc (RTX, N))\n-#define SET_REGNO_RAW(RTX, N) (REG_CHECK (RTX)->regno = N)\n \n /* Return the number of consecutive registers in a REG.  This is always\n    1 for pseudo registers and is determined by HARD_REGNO_NREGS for\n    hard registers.  */\n-#define REG_NREGS(RTX) \\\n-  (REGNO (RTX) < FIRST_PSEUDO_REGISTER \\\n-   ? (unsigned int) hard_regno_nregs[REGNO (RTX)][GET_MODE (RTX)] \\\n-   : 1)\n+#define REG_NREGS(RTX) (REG_CHECK (RTX)->nregs)\n \n /* ORIGINAL_REGNO holds the number the register originally had; for a\n    pseudo register turned into a hard reg this will hold the old pseudo\n@@ -1735,6 +1733,15 @@ rhs_regno (const_rtx x)\n   return REG_CHECK (x)->regno;\n }\n \n+/* Change the REGNO and REG_NREGS of REG X to the specified values,\n+   bypassing the df machinery.  */\n+static inline void\n+set_regno_raw (rtx x, unsigned int regno, unsigned int nregs)\n+{\n+  reg_info *reg = REG_CHECK (x);\n+  reg->regno = regno;\n+  reg->nregs = nregs;\n+}\n \n /* 1 if RTX is a reg or parallel that is the current function's return\n    value.  */"}]}