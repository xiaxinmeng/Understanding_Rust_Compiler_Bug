{"sha": "f05744511998309f6694ad18abcc22fbac025dc2", "node_id": "C_kwDOANBUbNoAKGYwNTc0NDUxMTk5ODMwOWY2Njk0YWQxOGFiY2MyMmZiYWMwMjVkYzI", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-03-10T11:47:28Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-03-10T11:47:28Z"}, "message": "Add size_of intrinsic\n\nThis is another type of intrisic since the function contains no parameters\nbut the argument for the size_of is the generic parameter T. Which uses\nTYPE_SIZE_UNIT to get the type size in bytes. GCC will optimize the\nfunction call away when you turn optimizations on.\n\nAddresses #658", "tree": {"sha": "241e3d36eb4e5e23c55f44113e4024176c1f3b3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/241e3d36eb4e5e23c55f44113e4024176c1f3b3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f05744511998309f6694ad18abcc22fbac025dc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f05744511998309f6694ad18abcc22fbac025dc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f05744511998309f6694ad18abcc22fbac025dc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f05744511998309f6694ad18abcc22fbac025dc2/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "796c978c4894d6510116180522315c97989c4ccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/796c978c4894d6510116180522315c97989c4ccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/796c978c4894d6510116180522315c97989c4ccf"}], "stats": {"total": 94, "additions": 93, "deletions": 1}, "files": [{"sha": "3665f5d35f791b784bb689f9e9d015b4de61ef06", "filename": "gcc/rust/backend/rust-compile-intrinsic.cc", "status": "modified", "additions": 93, "deletions": 1, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f05744511998309f6694ad18abcc22fbac025dc2/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f05744511998309f6694ad18abcc22fbac025dc2/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc?ref=f05744511998309f6694ad18abcc22fbac025dc2", "patch": "@@ -172,10 +172,13 @@ class SimpleIntrinsics\n \n static tree\n offset_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype);\n+static tree\n+sizeof_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype);\n \n static const std::map<std::string,\n \t\t      std::function<tree (Context *, TyTy::BaseType *)>>\n-  generic_intrinsics = {{\"offset\", &offset_intrinsic_handler}};\n+  generic_intrinsics = {{\"offset\", &offset_intrinsic_handler},\n+\t\t\t{\"size_of\", &sizeof_intrinsic_handler}};\n \n Intrinsics::Intrinsics (Context *ctx) : ctx (ctx) {}\n \n@@ -308,5 +311,94 @@ offset_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype_tyty)\n   return fndecl;\n }\n \n+static tree\n+sizeof_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype_tyty)\n+{\n+  rust_assert (fntype_tyty->get_kind () == TyTy::TypeKind::FNDEF);\n+  TyTy::FnType *fntype = static_cast<TyTy::FnType *> (fntype_tyty);\n+  const Resolver::CanonicalPath &canonical_path = fntype->get_ident ().path;\n+\n+  // items can be forward compiled which means we may not need to invoke this\n+  // code. We might also have already compiled this generic function as well.\n+  tree lookup = NULL_TREE;\n+  if (ctx->lookup_function_decl (fntype->get_ty_ref (), &lookup,\n+\t\t\t\t fntype->get_id (), fntype))\n+    {\n+      // has this been added to the list then it must be finished\n+      if (ctx->function_completed (lookup))\n+\t{\n+\t  tree dummy = NULL_TREE;\n+\t  if (!ctx->lookup_function_decl (fntype->get_ty_ref (), &dummy))\n+\t    {\n+\t      ctx->insert_function_decl (fntype, lookup);\n+\t    }\n+\t  return lookup;\n+\t}\n+    }\n+\n+  if (fntype->has_subsititions_defined ())\n+    {\n+      // override the Hir Lookups for the substituions in this context\n+      fntype->override_context ();\n+    }\n+\n+  // offset intrinsic has two params dst pointer and offset isize\n+  if (fntype->get_params ().size () != 0)\n+    {\n+      rust_error_at (fntype->get_ident ().locus,\n+\t\t     \"invalid number of parameters for size of intrinsic\");\n+      return error_mark_node;\n+    }\n+\n+  // get the template parameter type tree fn size_of<T>();\n+  rust_assert (fntype->get_num_substitutions () == 1);\n+  auto &param_mapping = fntype->get_substs ().at (0);\n+  const TyTy::ParamType *param_tyty = param_mapping.get_param_ty ();\n+  TyTy::BaseType *resolved_tyty = param_tyty->resolve ();\n+  tree template_parameter_type\n+    = TyTyResolveCompile::compile (ctx, resolved_tyty);\n+\n+  // build the intrinsic function\n+  tree compiled_fn_type = TyTyResolveCompile::compile (ctx, fntype);\n+  std::string ir_symbol_name\n+    = canonical_path.get () + fntype->subst_as_string ();\n+  std::string asm_name = ctx->mangle_item (fntype, canonical_path);\n+\n+  unsigned int flags = 0;\n+  tree fndecl\n+    = ctx->get_backend ()->function (compiled_fn_type, ir_symbol_name, asm_name,\n+\t\t\t\t     flags, fntype->get_ident ().locus);\n+  TREE_PUBLIC (fndecl) = 0;\n+  TREE_READONLY (fndecl) = 1;\n+  DECL_ARTIFICIAL (fndecl) = 1;\n+  DECL_EXTERNAL (fndecl) = 0;\n+  DECL_DECLARED_INLINE_P (fndecl) = 1;\n+\n+  tree enclosing_scope = NULL_TREE;\n+  Location start_location = Location ();\n+  Location end_location = Location ();\n+\n+  tree code_block = ctx->get_backend ()->block (fndecl, enclosing_scope, {},\n+\t\t\t\t\t\tstart_location, end_location);\n+  ctx->push_block (code_block);\n+\n+  // BUILTIN size_of FN BODY BEGIN\n+  tree size_expr = TYPE_SIZE_UNIT (template_parameter_type);\n+  auto return_statement\n+    = ctx->get_backend ()->return_statement (fndecl, {size_expr}, Location ());\n+  ctx->add_statement (return_statement);\n+  // BUILTIN size_of FN BODY END\n+\n+  tree bind_tree = ctx->pop_block ();\n+\n+  gcc_assert (TREE_CODE (bind_tree) == BIND_EXPR);\n+  DECL_SAVED_TREE (fndecl) = bind_tree;\n+\n+  ctx->pop_fn ();\n+  ctx->push_function (fndecl);\n+\n+  return fndecl;\n+}\n+\n } // namespace Compile\n } // namespace Rust"}]}