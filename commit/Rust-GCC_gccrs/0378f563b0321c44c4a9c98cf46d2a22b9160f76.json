{"sha": "0378f563b0321c44c4a9c98cf46d2a22b9160f76", "node_id": "C_kwDOANBUbNoAKDAzNzhmNTYzYjAzMjFjNDRjNGE5Yzk4Y2Y0NmQyYTIyYjkxNjBmNzY", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-11T18:00:48Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-11T18:00:48Z"}, "message": "c++: dependent bases and 'this' availability [PR103831]\n\nHere during satisfaction of B's constraints we're failing to reject the\nobject-less call to the non-static member function A::size ultimately\nbecause satisfaction is performed in the (access) context of the class\ntemplate B, which has a dependent base, and so the any_dependent_bases_p\ncheck within build_new_method_call causes us to not reject the call.\n(Subsequent constexpr evaluation of the call succeeds since the function\nis effectively static.)\n\nThis patch fixes this by refining the any_dependent_bases_p check within\nbuild_new_method_call: if we're in a context where 'this' is unavailable,\nthen we cannot resolve the implicit object regardless of the presence of\na dependent base.  So let's also check current_class_ptr alongside a_d_b_p.\n\n\tPR c++/103831\n\ngcc/cp/ChangeLog:\n\n\t* call.c (build_new_method_call): Consider dependent bases only\n\tif 'this' is available.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-class3.C: New test.\n\t* g++.dg/template/non-dependent18.C: New test.", "tree": {"sha": "19cbe16081528335a8b3402da691793765ae4636", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19cbe16081528335a8b3402da691793765ae4636"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0378f563b0321c44c4a9c98cf46d2a22b9160f76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0378f563b0321c44c4a9c98cf46d2a22b9160f76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0378f563b0321c44c4a9c98cf46d2a22b9160f76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0378f563b0321c44c4a9c98cf46d2a22b9160f76/comments", "author": null, "committer": null, "parents": [{"sha": "46de918f9892e637845bd97b4ca95011d46d3733", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46de918f9892e637845bd97b4ca95011d46d3733", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46de918f9892e637845bd97b4ca95011d46d3733"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "d4a07a7a9b35556348fb7c2da8f2cbcebce0828d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0378f563b0321c44c4a9c98cf46d2a22b9160f76/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0378f563b0321c44c4a9c98cf46d2a22b9160f76/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=0378f563b0321c44c4a9c98cf46d2a22b9160f76", "patch": "@@ -11125,7 +11125,7 @@ build_new_method_call (tree instance, tree fns, vec<tree, va_gc> **args,\n \t\t     we know we really need it.  */\n \t\t  cand->first_arg = instance;\n \t\t}\n-\t      else if (any_dependent_bases_p ())\n+\t      else if (current_class_ptr && any_dependent_bases_p ())\n \t\t/* We can't tell until instantiation time whether we can use\n \t\t   *this as the implicit object argument.  */;\n \t      else"}, {"sha": "68b50b71278b10f8e0c885c2ffcfce2e997054d7", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-class3.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0378f563b0321c44c4a9c98cf46d2a22b9160f76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-class3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0378f563b0321c44c4a9c98cf46d2a22b9160f76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-class3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-class3.C?ref=0378f563b0321c44c4a9c98cf46d2a22b9160f76", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/103831\n+// { dg-do compile { target c++20 } }\n+\n+struct A {\n+  constexpr int size() { return 42; } // non-static\n+};\n+\n+template<class T>\n+  requires (T::size() == 42) // { dg-error \"without object\" }\n+struct B : T { };\n+\n+template struct B<A>; // { dg-error \"constraint\" }"}, {"sha": "3e1556821a64397bc9bfa507d121eed90be02cf3", "filename": "gcc/testsuite/g++.dg/template/non-dependent18.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0378f563b0321c44c4a9c98cf46d2a22b9160f76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0378f563b0321c44c4a9c98cf46d2a22b9160f76/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent18.C?ref=0378f563b0321c44c4a9c98cf46d2a22b9160f76", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/103831\n+// { dg-do compile { target c++11 } }\n+\n+struct A {\n+  constexpr int size() { return 42; } // non-static\n+};\n+\n+template<class T>\n+struct B : T {\n+  static_assert(A::size() == 42, \"\"); // { dg-error \"without object\" }\n+\n+  static int f() {\n+    static_assert(A::size() == 42, \"\"); // { dg-error \"without object\" }\n+    return A::size(); // { dg-error \"without object\" }\n+  }\n+\n+  int n = A::size();\n+  static const int m = A::size(); // { dg-error \"without object\" }\n+};"}]}