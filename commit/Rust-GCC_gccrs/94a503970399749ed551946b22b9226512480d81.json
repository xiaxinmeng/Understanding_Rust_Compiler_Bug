{"sha": "94a503970399749ed551946b22b9226512480d81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRhNTAzOTcwMzk5NzQ5ZWQ1NTE5NDZiMjJiOTIyNjUxMjQ4MGQ4MQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-04-27T06:53:07Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-04-27T06:53:07Z"}, "message": "c-parse.in (malloced_yyss, [...]): New.\n\n        * c-parse.in (malloced_yyss, malloced_yyvs): New.\n        (yyoverflow): Re-add.  Set them.\n        (free_parser_stacks): New.\n        * c-common.h: Declare it.\n        * c-lex.c (c_common_parse_file): Call it.\n\n        * parse.y (malloced_yyss, malloced_yyvs): New.\n        (yyoverflow): Re-add.  Set them.\n        (free_parser_stacks): New.\n\nFrom-SVN: r52827", "tree": {"sha": "bd925997654b688081b11a738196c7806d4cef5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd925997654b688081b11a738196c7806d4cef5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94a503970399749ed551946b22b9226512480d81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94a503970399749ed551946b22b9226512480d81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94a503970399749ed551946b22b9226512480d81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94a503970399749ed551946b22b9226512480d81/comments", "author": null, "committer": null, "parents": [{"sha": "9c0a0632bca68c00acf45fc5ccc6811a652d1406", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0a0632bca68c00acf45fc5ccc6811a652d1406", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c0a0632bca68c00acf45fc5ccc6811a652d1406"}], "stats": {"total": 128, "additions": 127, "deletions": 1}, "files": [{"sha": "0fd205f5b131168bc1dda954a7db6e6ceabe1125", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a503970399749ed551946b22b9226512480d81/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a503970399749ed551946b22b9226512480d81/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=94a503970399749ed551946b22b9226512480d81", "patch": "@@ -1,3 +1,11 @@\n+2002-04-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-parse.in (malloced_yyss, malloced_yyvs): New.\n+\t(yyoverflow): Re-add.  Set them.\n+\t(free_parser_stacks): New.\n+\t* c-common.h: Declare it.\n+\t* c-lex.c (c_common_parse_file): Call it.\n+\n 2002-04-26  Richard Henderson  <rth@redhat.com>\n \n \t* cfgrtl.c (tidy_fallthru_edge): Don't use next_real_insn"}, {"sha": "a8439d4966a61835f8e9f53bf94df61583a7f3dd", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a503970399749ed551946b22b9226512480d81/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a503970399749ed551946b22b9226512480d81/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=94a503970399749ed551946b22b9226512480d81", "patch": "@@ -328,6 +328,8 @@ extern tree gettags\t\t\t\tPARAMS ((void));\n extern int (*lang_missing_noreturn_ok_p)\tPARAMS ((tree));\n \n extern int yyparse\t\t\t\tPARAMS ((void));\n+extern void free_parser_stacks\t\t\tPARAMS ((void));\n+\n extern stmt_tree current_stmt_tree              PARAMS ((void));\n extern tree *current_scope_stmt_stack           PARAMS ((void));\n extern void begin_stmt_tree                     PARAMS ((tree *));"}, {"sha": "acdcf340c327f93030faf134255492a384d57aa7", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a503970399749ed551946b22b9226512480d81/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a503970399749ed551946b22b9226512480d81/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=94a503970399749ed551946b22b9226512480d81", "patch": "@@ -159,6 +159,7 @@ c_common_parse_file (set_yydebug)\n   cpp_finish_options (parse_in);\n \n   yyparse ();\n+  free_parser_stacks ();\n }\n \n struct c_fileinfo *"}, {"sha": "679d42d0089832b61366e21b7a8eb56b595a5e5d", "filename": "gcc/c-parse.in", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a503970399749ed551946b22b9226512480d81/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a503970399749ed551946b22b9226512480d81/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=94a503970399749ed551946b22b9226512480d81", "patch": "@@ -61,6 +61,49 @@ end ifobjc\n \n /* Like YYERROR but do call yyerror.  */\n #define YYERROR1 { yyerror (\"syntax error\"); YYERROR; }\n+\n+/* Like the default stack expander, except (1) use realloc when possible,\n+   (2) impose no hard maxiumum on stack size, (3) REALLY do not use alloca.\n+\n+   Irritatingly, YYSTYPE is defined after this %{ %} block, so we cannot\n+   give malloced_yyvs its proper type.  This is ok since all we need from\n+   it is to be able to free it.  */\n+\n+static short *malloced_yyss;\n+static void *malloced_yyvs;\n+\n+#define yyoverflow(MSG, SS, SSSIZE, VS, VSSIZE, YYSSZ)\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  size_t newsize;\t\t\t\t\t\t\t\\\n+  short *newss;\t\t\t\t\t\t\t\t\\\n+  YYSTYPE *newvs;\t\t\t\t\t\t\t\\\n+  newsize = *(YYSSZ) *= 2;\t\t\t\t\t\t\\\n+  if (malloced_yyss)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      newss = (short *)\t\t\t\t\t\t\t\\\n+\treally_call_realloc (*(SS), newsize * sizeof (short));\t\t\\\n+      newvs = (YYSTYPE *)\t\t\t\t\t\t\\\n+\treally_call_realloc (*(VS), newsize * sizeof (YYSTYPE));\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      newss = (short *) really_call_malloc (newsize * sizeof (short));\t\\\n+      newvs = (YYSTYPE *) really_call_malloc (newsize * sizeof (YYSTYPE)); \\\n+      if (newss)\t\t\t\t\t\t\t\\\n+        memcpy (newss, *(SS), (SSSIZE));\t\t\t\t\\\n+      if (newvs)\t\t\t\t\t\t\t\\\n+        memcpy (newvs, *(VS), (VSSIZE));\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (!newss || !newvs)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      yyerror (MSG);\t\t\t\t\t\t\t\\\n+      return 2;\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  *(SS) = newss;\t\t\t\t\t\t\t\\\n+  *(VS) = newvs;\t\t\t\t\t\t\t\\\n+  malloced_yyss = newss;\t\t\t\t\t\t\\\n+  malloced_yyvs = (void *) newvs;\t\t\t\t\t\\\n+} while (0)\n %}\n \n %start program\n@@ -3908,3 +3951,15 @@ make_pointer_declarator (type_quals_attrs, target)\n     itarget = tree_cons (attrs, target, NULL_TREE);\n   return build1 (INDIRECT_REF, quals, itarget);\n }\n+\n+/* Free malloced parser stacks if necessary.  */\n+\n+void\n+free_parser_stacks ()\n+{\n+  if (malloced_yyss)\n+    {\n+      free (malloced_yyss);\n+      free (malloced_yyvs);\n+    }\n+}"}, {"sha": "237d66964cde4c142426c0325f62a90e9e6a70b5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a503970399749ed551946b22b9226512480d81/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a503970399749ed551946b22b9226512480d81/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=94a503970399749ed551946b22b9226512480d81", "patch": "@@ -1,3 +1,9 @@\n+2002-04-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* parse.y (malloced_yyss, malloced_yyvs): New.\n+\t(yyoverflow): Re-add.  Set them.\n+\t(free_parser_stacks): New.\n+\n 2002-04-26  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/6497"}, {"sha": "2574d1dd0612b994261446d979f53e3690b735e2", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a503970399749ed551946b22b9226512480d81/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a503970399749ed551946b22b9226512480d81/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=94a503970399749ed551946b22b9226512480d81", "patch": "@@ -48,6 +48,49 @@ extern struct obstack permanent_obstack;\n /* Like YYERROR but do call yyerror.  */\n #define YYERROR1 { yyerror (\"syntax error\"); YYERROR; }\n \n+/* Like the default stack expander, except (1) use realloc when possible,\n+   (2) impose no hard maxiumum on stack size, (3) REALLY do not use alloca.\n+\n+   Irritatingly, YYSTYPE is defined after this %{ %} block, so we cannot\n+   give malloced_yyvs its proper type.  This is ok since all we need from\n+   it is to be able to free it.  */\n+\n+static short *malloced_yyss;\n+static void *malloced_yyvs;\n+\n+#define yyoverflow(MSG, SS, SSSIZE, VS, VSSIZE, YYSSZ)\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  size_t newsize;\t\t\t\t\t\t\t\\\n+  short *newss;\t\t\t\t\t\t\t\t\\\n+  YYSTYPE *newvs;\t\t\t\t\t\t\t\\\n+  newsize = *(YYSSZ) *= 2;\t\t\t\t\t\t\\\n+  if (malloced_yyss)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      newss = (short *)\t\t\t\t\t\t\t\\\n+\treally_call_realloc (*(SS), newsize * sizeof (short));\t\t\\\n+      newvs = (YYSTYPE *)\t\t\t\t\t\t\\\n+\treally_call_realloc (*(VS), newsize * sizeof (YYSTYPE));\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      newss = (short *) really_call_malloc (newsize * sizeof (short));\t\\\n+      newvs = (YYSTYPE *) really_call_malloc (newsize * sizeof (YYSTYPE)); \\\n+      if (newss)\t\t\t\t\t\t\t\\\n+        memcpy (newss, *(SS), (SSSIZE));\t\t\t\t\\\n+      if (newvs)\t\t\t\t\t\t\t\\\n+        memcpy (newvs, *(VS), (VSSIZE));\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (!newss || !newvs)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      yyerror (MSG);\t\t\t\t\t\t\t\\\n+      return 2;\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  *(SS) = newss;\t\t\t\t\t\t\t\\\n+  *(VS) = newvs;\t\t\t\t\t\t\t\\\n+  malloced_yyss = newss;\t\t\t\t\t\t\\\n+  malloced_yyvs = (void *) newvs;\t\t\t\t\t\\\n+} while (0)\n+\n #define OP0(NODE) (TREE_OPERAND (NODE, 0))\n #define OP1(NODE) (TREE_OPERAND (NODE, 1))\n \n@@ -3970,5 +4013,16 @@ debug_yytranslate (value)\n {\n   return yytname[YYTRANSLATE (value)];\n }\n-\n #endif\n+\n+/* Free malloced parser stacks if necessary.  */\n+\n+void\n+free_parser_stacks ()\n+{\n+  if (malloced_yyss)\n+    {\n+      free (malloced_yyss);\n+      free (malloced_yyvs);\n+    }\n+}"}]}