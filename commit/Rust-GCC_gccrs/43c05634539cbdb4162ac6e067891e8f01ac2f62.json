{"sha": "43c05634539cbdb4162ac6e067891e8f01ac2f62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNjMDU2MzQ1MzljYmRiNDE2MmFjNmUwNjc4OTFlOGYwMWFjMmY2Mg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2000-11-23T06:20:16Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-11-23T06:20:16Z"}, "message": "sh.md (mova_const): New pattern.\n\n* config/sh/sh.md (mova_const): New pattern.\n(GOTaddr2picreg): Use it.\n* config/sh/sh.c (broken_move): Match it.\n(mova_p): Don't match it.\n(machine_dependent_reorg): Adjust it.\n\nFrom-SVN: r37690", "tree": {"sha": "f8110cfbc374f4abd66b6b9a9615c8f25897ba28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8110cfbc374f4abd66b6b9a9615c8f25897ba28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43c05634539cbdb4162ac6e067891e8f01ac2f62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43c05634539cbdb4162ac6e067891e8f01ac2f62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43c05634539cbdb4162ac6e067891e8f01ac2f62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43c05634539cbdb4162ac6e067891e8f01ac2f62/comments", "author": null, "committer": null, "parents": [{"sha": "5e18f6d629b6956b5e669921073fe951f93d1fac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e18f6d629b6956b5e669921073fe951f93d1fac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e18f6d629b6956b5e669921073fe951f93d1fac"}], "stats": {"total": 42, "additions": 31, "deletions": 11}, "files": [{"sha": "3bb689cadb80c663ac93742613bc87f26ca818ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43c05634539cbdb4162ac6e067891e8f01ac2f62/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43c05634539cbdb4162ac6e067891e8f01ac2f62/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43c05634539cbdb4162ac6e067891e8f01ac2f62", "patch": "@@ -1,3 +1,11 @@\n+Thu Nov 23 04:10:30 2000  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config/sh/sh.md (mova_const): New pattern.\n+\t(GOTaddr2picreg): Use it.\n+\t* config/sh/sh.c (broken_move): Match it.\n+\t(mova_p): Don't match it.\n+\t(machine_dependent_reorg): Adjust it.\n+\n Thu Nov 23 02:09:09 2000  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/sh/sh.h (FIRST_GENERAL_REG, LAST_GENERAL_REG): New."}, {"sha": "e41ae320b91d17daf82a6f95c0e26ac994781b9e", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43c05634539cbdb4162ac6e067891e8f01ac2f62/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43c05634539cbdb4162ac6e067891e8f01ac2f62/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=43c05634539cbdb4162ac6e067891e8f01ac2f62", "patch": "@@ -2071,7 +2071,11 @@ broken_move (insn)\n \t  /* We can load any 8 bit value if we don't care what the high\n \t     order bits end up as.  */\n \t  && GET_MODE (SET_DEST (pat)) != QImode\n-\t  && CONSTANT_P (SET_SRC (pat))\n+\t  && (CONSTANT_P (SET_SRC (pat))\n+\t      /* Match mova_const.  */\n+\t      || (GET_CODE (SET_SRC (pat)) == UNSPEC\n+\t\t  && XINT (SET_SRC (pat), 1) == UNSPEC_MOVA\n+\t\t  && GET_CODE (XVECEXP (SET_SRC (pat), 0, 0)) == CONST))\n \t  && ! (TARGET_SH3E\n \t\t&& GET_CODE (SET_SRC (pat)) == CONST_DOUBLE\n \t\t&& (fp_zero_operand (SET_SRC (pat))\n@@ -2097,7 +2101,9 @@ mova_p (insn)\n   return (GET_CODE (insn) == INSN\n \t  && GET_CODE (PATTERN (insn)) == SET\n \t  && GET_CODE (SET_SRC (PATTERN (insn))) == UNSPEC\n-\t  && XINT (SET_SRC (PATTERN (insn)), 1) == UNSPEC_MOVA);\n+\t  && XINT (SET_SRC (PATTERN (insn)), 1) == UNSPEC_MOVA\n+\t  /* Don't match mova_const.  */\n+\t  && XVECEXP (SET_SRC (PATTERN (insn)), 0, 0) == LABEL_REF);\n }\n \n /* Find the last barrier from insn FROM which is close enough to hold the\n@@ -3280,14 +3286,11 @@ machine_dependent_reorg (first)\n \t\t      XEXP (clobber, 0) = gen_rtx_SCRATCH (Pmode);\n \t\t    }\n \t\t  /* This is a mova needing a label.  Create it.  */\n-\t\t  else if (GET_CODE (src) == CONST\n-\t\t\t   && GET_CODE (XEXP (src, 0)) == UNSPEC\n-\t\t\t   && XINT (XEXP (src, 0), 1) == UNSPEC_MOVA\n-\t\t\t   && GET_CODE (XVECEXP (XEXP (src, 0),\n-\t\t\t\t\t\t 0, 0)) == CONST)\n+\t\t  else if (GET_CODE (src) == UNSPEC\n+\t\t\t   && XINT (src, 1) == UNSPEC_MOVA\n+\t\t\t   && GET_CODE (XVECEXP (src, 0, 0)) == CONST)\n \t\t    {\n-\t\t      lab = add_constant (XVECEXP (XEXP (src, 0),\n-\t\t\t\t\t\t   0, 0), mode, 0);\n+\t\t      lab = add_constant (XVECEXP (src, 0, 0), mode, 0);\n \t\t      newsrc = gen_rtx_LABEL_REF (VOIDmode, lab);\n \t\t      newsrc = gen_rtx_UNSPEC (VOIDmode,\n \t\t\t\t\t       gen_rtvec (1, newsrc),"}, {"sha": "34649e0c69113a74e6b8b0733ee27a51ed2c52a0", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43c05634539cbdb4162ac6e067891e8f01ac2f62/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43c05634539cbdb4162ac6e067891e8f01ac2f62/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=43c05634539cbdb4162ac6e067891e8f01ac2f62", "patch": "@@ -3570,10 +3570,19 @@\n   [(set_attr \"in_delay_slot\" \"no\")\n    (set_attr \"type\" \"arith\")])\n \n+;; machine_dependent_reorg() will make this a `mova'.\n+(define_insn \"mova_const\"\n+  [(set (reg:SI R0_REG)\n+\t(unspec [(match_operand 0 \"immediate_operand\" \"i\")] 1))]\n+  \"\"\n+  \"#\"\n+  [(set_attr \"in_delay_slot\" \"no\")\n+   (set_attr \"type\" \"arith\")])\n+\n (define_expand \"GOTaddr2picreg\"\n   [(set (reg:SI R0_REG)\n-\t(const (unspec [(const (unspec [(match_dup 1)] UNSPEC_PIC))]\n-\t\t       UNSPEC_MOVA)))\n+\t(unspec [(const (unspec [(match_dup 1)] UNSPEC_PIC))]\n+\t\tUNSPEC_MOVA))\n    (set (match_dup 0) (const (unspec [(match_dup 1)] UNSPEC_PIC)))\n    (set (match_dup 0) (plus:SI (match_dup 0) (reg:SI R0_REG)))]\n   \"\" \""}]}