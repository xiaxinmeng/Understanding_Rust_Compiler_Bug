{"sha": "2a74759f9ed10c57b7fe38c5285adb6e77b3746e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE3NDc1OWY5ZWQxMGM1N2I3ZmUzOGM1Mjg1YWRiNmU3N2IzNzQ2ZQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-06-10T14:26:20Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-06-10T14:26:20Z"}, "message": "[AArch64] Add a big-endian lane flip at expand-time in saturating math patterns.\n\n\t* config/aarch64/aarch64-simd.md (aarch64_sqdmulh_lane<mode>):\n\tNew expander.\n\t(aarch64_sqrdmulh_lane<mode>): Likewise.\n\t(aarch64_sq<r>dmulh_lane<mode>): Rename to...\n\t(aarch64_sq<r>dmulh_lane<mode>_internal): ...this.\n\t(aarch64_sqdmulh_laneq<mode>): New expander.\n\t(aarch64_sqrdmulh_laneq<mode>): Likewise.\n\t(aarch64_sq<r>dmulh_laneq<mode>): Rename to...\n\t(aarch64_sq<r>dmulh_laneq<mode>_internal): ...this.\n\t(aarch64_sqdmulh_lane<mode>): New expander.\n\t(aarch64_sqrdmulh_lane<mode>): Likewise.\n\t(aarch64_sq<r>dmulh_lane<mode>): Rename to...\n\t(aarch64_sq<r>dmulh_lane<mode>_internal): ...this.\n\t(aarch64_sqdmlal_lane<mode>): Add lane flip for big-endian.\n\t(aarch64_sqdmlal_laneq<mode>): Likewise.\n\t(aarch64_sqdmlsl_lane<mode>): Likewise.\n\t(aarch64_sqdmlsl_laneq<mode>): Likewise.\n\t(aarch64_sqdmlal2_lane<mode>): Likewise.\n\t(aarch64_sqdmlal2_laneq<mode>): Likewise.\n\t(aarch64_sqdmlsl2_lane<mode>): Likewise.\n\t(aarch64_sqdmlsl2_laneq<mode>): Likewise.\n\t(aarch64_sqdmull_lane<mode>): Likewise.\n\t(aarch64_sqdmull_laneq<mode>): Likewise.\n\t(aarch64_sqdmull2_lane<mode>): Likewise.\n\t(aarch64_sqdmull2_laneq<mode>): Likewise.\n\nFrom-SVN: r211414", "tree": {"sha": "a3e5a562a3fa81760a23a47716aa63267d9cbed9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3e5a562a3fa81760a23a47716aa63267d9cbed9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a74759f9ed10c57b7fe38c5285adb6e77b3746e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a74759f9ed10c57b7fe38c5285adb6e77b3746e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a74759f9ed10c57b7fe38c5285adb6e77b3746e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a74759f9ed10c57b7fe38c5285adb6e77b3746e/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b82ef848dc741bdd01707574c3f2bdd615cdef54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b82ef848dc741bdd01707574c3f2bdd615cdef54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b82ef848dc741bdd01707574c3f2bdd615cdef54"}], "stats": {"total": 150, "additions": 145, "deletions": 5}, "files": [{"sha": "7b17baa34c22bdfd3e37b334e8a64ec4684a3353", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a74759f9ed10c57b7fe38c5285adb6e77b3746e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a74759f9ed10c57b7fe38c5285adb6e77b3746e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a74759f9ed10c57b7fe38c5285adb6e77b3746e", "patch": "@@ -1,3 +1,31 @@\n+2014-06-10  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_sqdmulh_lane<mode>):\n+\tNew expander.\n+\t(aarch64_sqrdmulh_lane<mode>): Likewise.\n+\t(aarch64_sq<r>dmulh_lane<mode>): Rename to...\n+\t(aarch64_sq<r>dmulh_lane<mode>_internal): ...this.\n+\t(aarch64_sqdmulh_laneq<mode>): New expander.\n+\t(aarch64_sqrdmulh_laneq<mode>): Likewise.\n+\t(aarch64_sq<r>dmulh_laneq<mode>): Rename to...\n+\t(aarch64_sq<r>dmulh_laneq<mode>_internal): ...this.\n+\t(aarch64_sqdmulh_lane<mode>): New expander.\n+\t(aarch64_sqrdmulh_lane<mode>): Likewise.\n+\t(aarch64_sq<r>dmulh_lane<mode>): Rename to...\n+\t(aarch64_sq<r>dmulh_lane<mode>_internal): ...this.\n+\t(aarch64_sqdmlal_lane<mode>): Add lane flip for big-endian.\n+\t(aarch64_sqdmlal_laneq<mode>): Likewise.\n+\t(aarch64_sqdmlsl_lane<mode>): Likewise.\n+\t(aarch64_sqdmlsl_laneq<mode>): Likewise.\n+\t(aarch64_sqdmlal2_lane<mode>): Likewise.\n+\t(aarch64_sqdmlal2_laneq<mode>): Likewise.\n+\t(aarch64_sqdmlsl2_lane<mode>): Likewise.\n+\t(aarch64_sqdmlsl2_laneq<mode>): Likewise.\n+\t(aarch64_sqdmull_lane<mode>): Likewise.\n+\t(aarch64_sqdmull_laneq<mode>): Likewise.\n+\t(aarch64_sqdmull2_lane<mode>): Likewise.\n+\t(aarch64_sqdmull2_laneq<mode>): Likewise.\n+\n 2014-06-10  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/61438"}, {"sha": "8c840f50dfe419c0541b0f4128b3d2293e02f81d", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 117, "deletions": 5, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a74759f9ed10c57b7fe38c5285adb6e77b3746e/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a74759f9ed10c57b7fe38c5285adb6e77b3746e/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=2a74759f9ed10c57b7fe38c5285adb6e77b3746e", "patch": "@@ -2650,7 +2650,41 @@\n \n ;; sq<r>dmulh_lane\n \n-(define_insn \"aarch64_sq<r>dmulh_lane<mode>\"\n+(define_expand \"aarch64_sqdmulh_lane<mode>\"\n+  [(match_operand:VDQHS 0 \"register_operand\" \"\")\n+   (match_operand:VDQHS 1 \"register_operand\" \"\")\n+   (match_operand:<VCOND> 2 \"register_operand\" \"\")\n+   (match_operand:SI 3 \"immediate_operand\" \"\")]\n+  \"TARGET_SIMD\"\n+  {\n+     aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCOND>mode));\n+     operands[3] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[3])));\n+     emit_insn (gen_aarch64_sqdmulh_lane<mode>_internal (operands[0],\n+                                                         operands[1],\n+                                                         operands[2],\n+                                                         operands[3]));\n+     DONE;\n+  }\n+)\n+\n+(define_expand \"aarch64_sqrdmulh_lane<mode>\"\n+  [(match_operand:VDQHS 0 \"register_operand\" \"\")\n+   (match_operand:VDQHS 1 \"register_operand\" \"\")\n+   (match_operand:<VCOND> 2 \"register_operand\" \"\")\n+   (match_operand:SI 3 \"immediate_operand\" \"\")]\n+  \"TARGET_SIMD\"\n+  {\n+     aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCOND>mode));\n+     operands[3] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[3])));\n+     emit_insn (gen_aarch64_sqrdmulh_lane<mode>_internal (operands[0],\n+                                                          operands[1],\n+                                                          operands[2],\n+                                                          operands[3]));\n+     DONE;\n+  }\n+)\n+\n+(define_insn \"aarch64_sq<r>dmulh_lane<mode>_internal\"\n   [(set (match_operand:VDQHS 0 \"register_operand\" \"=w\")\n         (unspec:VDQHS\n \t  [(match_operand:VDQHS 1 \"register_operand\" \"w\")\n@@ -2666,7 +2700,41 @@\n   [(set_attr \"type\" \"neon_sat_mul_<Vetype>_scalar<q>\")]\n )\n \n-(define_insn \"aarch64_sq<r>dmulh_laneq<mode>\"\n+(define_expand \"aarch64_sqdmulh_laneq<mode>\"\n+  [(match_operand:VDQHS 0 \"register_operand\" \"\")\n+   (match_operand:VDQHS 1 \"register_operand\" \"\")\n+   (match_operand:<VCONQ> 2 \"register_operand\" \"\")\n+   (match_operand:SI 3 \"immediate_operand\" \"\")]\n+  \"TARGET_SIMD\"\n+  {\n+     aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode));\n+     operands[3] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[3])));\n+     emit_insn (gen_aarch64_sqdmulh_laneq<mode>_internal (operands[0],\n+                                                          operands[1],\n+                                                          operands[2],\n+                                                          operands[3]));\n+     DONE;\n+   }\n+)\n+\n+(define_expand \"aarch64_sqrdmulh_laneq<mode>\"\n+  [(match_operand:VDQHS 0 \"register_operand\" \"\")\n+   (match_operand:VDQHS 1 \"register_operand\" \"\")\n+   (match_operand:<VCONQ> 2 \"register_operand\" \"\")\n+   (match_operand:SI 3 \"immediate_operand\" \"\")]\n+  \"TARGET_SIMD\"\n+  {\n+     aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode));\n+     operands[3] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[3])));\n+     emit_insn (gen_aarch64_sqrdmulh_laneq<mode>_internal (operands[0],\n+                                                           operands[1],\n+                                                           operands[2],\n+                                                           operands[3]));\n+     DONE;\n+   }\n+)\n+\n+(define_insn \"aarch64_sq<r>dmulh_laneq<mode>_internal\"\n   [(set (match_operand:VDQHS 0 \"register_operand\" \"=w\")\n         (unspec:VDQHS\n \t  [(match_operand:VDQHS 1 \"register_operand\" \"w\")\n@@ -2676,13 +2744,46 @@\n \t VQDMULH))]\n   \"TARGET_SIMD\"\n   \"*\n-   aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode));\n    operands[3] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[3])));\n    return \\\"sq<r>dmulh\\\\t%0.<Vtype>, %1.<Vtype>, %2.<Vetype>[%3]\\\";\"\n   [(set_attr \"type\" \"neon_sat_mul_<Vetype>_scalar<q>\")]\n )\n \n-(define_insn \"aarch64_sq<r>dmulh_lane<mode>\"\n+(define_expand \"aarch64_sqdmulh_lane<mode>\"\n+  [(match_operand:SD_HSI 0 \"register_operand\" \"\")\n+   (match_operand:SD_HSI 1 \"register_operand\" \"\")\n+   (match_operand:<VCONQ> 2 \"register_operand\" \"\")\n+   (match_operand:SI 3 \"immediate_operand\" \"\")]\n+  \"TARGET_SIMD\"\n+  {\n+    aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode));\n+    operands[3] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[3])));\n+    emit_insn (gen_aarch64_sqdmulh_lane<mode>_internal (operands[0],\n+                                                        operands[1],\n+                                                        operands[2],\n+                                                        operands[3]));\n+    DONE;\n+  }\n+)\n+\n+(define_expand \"aarch64_sqrdmulh_lane<mode>\"\n+  [(match_operand:SD_HSI 0 \"register_operand\" \"\")\n+   (match_operand:SD_HSI 1 \"register_operand\" \"\")\n+   (match_operand:<VCONQ> 2 \"register_operand\" \"\")\n+   (match_operand:SI 3 \"immediate_operand\" \"\")]\n+  \"TARGET_SIMD\"\n+  {\n+    aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode));\n+    operands[3] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[3])));\n+    emit_insn (gen_aarch64_sqrdmulh_lane<mode>_internal (operands[0],\n+                                                         operands[1],\n+                                                         operands[2],\n+                                                         operands[3]));\n+    DONE;\n+  }\n+)\n+\n+(define_insn \"aarch64_sq<r>dmulh_lane<mode>_internal\"\n   [(set (match_operand:SD_HSI 0 \"register_operand\" \"=w\")\n         (unspec:SD_HSI\n \t  [(match_operand:SD_HSI 1 \"register_operand\" \"w\")\n@@ -2692,7 +2793,6 @@\n \t VQDMULH))]\n   \"TARGET_SIMD\"\n   \"*\n-   aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode));\n    operands[3] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[3])));\n    return \\\"sq<r>dmulh\\\\t%<v>0, %<v>1, %2.<v>[%3]\\\";\"\n   [(set_attr \"type\" \"neon_sat_mul_<Vetype>_scalar<q>\")]\n@@ -2774,6 +2874,7 @@\n   \"TARGET_SIMD\"\n {\n   aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<VCON>mode) / 2);\n+  operands[4] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[4])));\n   emit_insn (gen_aarch64_sqdmlal_lane<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t      operands[2], operands[3],\n \t\t\t\t\t\t      operands[4]));\n@@ -2789,6 +2890,7 @@\n   \"TARGET_SIMD\"\n {\n   aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<VCON>mode));\n+  operands[4] = GEN_INT (ENDIAN_LANE_N (<VCON>mode, INTVAL (operands[4])));\n   emit_insn (gen_aarch64_sqdmlal_lane<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t      operands[2], operands[3],\n \t\t\t\t\t\t      operands[4]));\n@@ -2804,6 +2906,7 @@\n   \"TARGET_SIMD\"\n {\n   aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<VCON>mode) / 2);\n+  operands[4] = GEN_INT (ENDIAN_LANE_N (<VCON>mode, INTVAL (operands[4])));\n   emit_insn (gen_aarch64_sqdmlsl_lane<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t      operands[2], operands[3],\n \t\t\t\t\t\t      operands[4]));\n@@ -2819,6 +2922,7 @@\n   \"TARGET_SIMD\"\n {\n   aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<VCON>mode));\n+  operands[4] = GEN_INT (ENDIAN_LANE_N (<VCON>mode, INTVAL (operands[4])));\n   emit_insn (gen_aarch64_sqdmlsl_lane<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t      operands[2], operands[3],\n \t\t\t\t\t\t      operands[4]));\n@@ -2930,6 +3034,7 @@\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n   aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<MODE>mode) / 2);\n+  operands[4] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[4])));\n   emit_insn (gen_aarch64_sqdmlal2_lane<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t\t       operands[4], p));\n@@ -2946,6 +3051,7 @@\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n   aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<MODE>mode));\n+  operands[4] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[4])));\n   emit_insn (gen_aarch64_sqdmlal2_lane<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t\t       operands[4], p));\n@@ -2962,6 +3068,7 @@\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n   aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<MODE>mode) / 2);\n+  operands[4] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[4])));\n   emit_insn (gen_aarch64_sqdmlsl2_lane<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t\t       operands[4], p));\n@@ -2978,6 +3085,7 @@\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n   aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<MODE>mode));\n+  operands[4] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[4])));\n   emit_insn (gen_aarch64_sqdmlsl2_lane<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t\t       operands[4], p));\n@@ -3098,6 +3206,7 @@\n   \"TARGET_SIMD\"\n {\n   aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCON>mode) / 2);\n+  operands[3] = GEN_INT (ENDIAN_LANE_N (<VCON>mode, INTVAL (operands[3])));\n   emit_insn (gen_aarch64_sqdmull_lane<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t      operands[2], operands[3]));\n   DONE;\n@@ -3111,6 +3220,7 @@\n   \"TARGET_SIMD\"\n {\n   aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCON>mode));\n+  operands[3] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[3])));\n   emit_insn (gen_aarch64_sqdmull_lane<mode>_internal\n \t       (operands[0], operands[1], operands[2], operands[3]));\n   DONE;\n@@ -3203,6 +3313,7 @@\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n   aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<MODE>mode) / 2);\n+  operands[3] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[3])));\n   emit_insn (gen_aarch64_sqdmull2_lane<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t\t       p));\n@@ -3218,6 +3329,7 @@\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n   aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<MODE>mode));\n+  operands[3] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[3])));\n   emit_insn (gen_aarch64_sqdmull2_lane<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t\t       p));"}]}