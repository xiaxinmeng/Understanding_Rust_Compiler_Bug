{"sha": "4aab97f958a6befb29c9cd0edad3057ca2c7977f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFhYjk3Zjk1OGE2YmVmYjI5YzljZDBlZGFkMzA1N2NhMmM3OTc3Zg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2008-09-02T19:49:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-09-02T19:49:41Z"}, "message": "i386.c (X86_64_VARARGS_SIZE): Removed.\n\n\t* config/i386/i386.c (X86_64_VARARGS_SIZE): Removed.\n\t(setup_incoming_varargs_64): Assume cum != NULL. Set/check\n\tix86_varargs_gpr_size and ix86_varargs_fpr_size.  Use\n\tix86_varargs_gpr_size instead of X86_64_REGPARM_MAX.\n\tDon't set ix86_save_varrargs_registers.\n\t(ix86_setup_incoming_varargs): Assume cum != NULL.\n\t(ix86_va_start): Check ix86_varargs_gpr_size and\n\tix86_varargs_fpr_size instead of cfun->va_list_gpr_size and\n\tcfun->va_list_fpr_size, respectively.  Subtract 8*X86_64_REGPARM_MAX\n\tfrom frame pointer if ix86_varargs_gpr_size == 0.\n\t(ix86_compute_frame_layout): Updated.\n\t* config/i386/i386.h (ix86_save_varrargs_registers): Removed.\n\t(ix86_varargs_gpr_size): Define.\n\t(ix86_varargs_fpr_size): Likewise.\n\t(machine_function): Remove save_varrargs_registers.\n\tAdd varargs_gpr_size and varargs_fpr_size.\n\n\t* gcc.target/i386/amd64-abi-3.c: New test.\n\t* gcc.target/i386/amd64-abi-4.c: Likewise.\n\t* gcc.target/i386/amd64-abi-5.c: Likewise.\n\t* gcc.target/i386/amd64-abi-6.c: Likewise.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r139910", "tree": {"sha": "32bf6fc9cff05ad9cea4cb3384b053e60bda1dd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32bf6fc9cff05ad9cea4cb3384b053e60bda1dd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4aab97f958a6befb29c9cd0edad3057ca2c7977f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aab97f958a6befb29c9cd0edad3057ca2c7977f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aab97f958a6befb29c9cd0edad3057ca2c7977f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aab97f958a6befb29c9cd0edad3057ca2c7977f/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "777b1fbef1bd93ab526300f4e8da4d3c2f78d99a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/777b1fbef1bd93ab526300f4e8da4d3c2f78d99a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/777b1fbef1bd93ab526300f4e8da4d3c2f78d99a"}], "stats": {"total": 278, "additions": 256, "deletions": 22}, "files": [{"sha": "d56cf0359a5d3b2044563faf7ad129ea151f165f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab97f958a6befb29c9cd0edad3057ca2c7977f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab97f958a6befb29c9cd0edad3057ca2c7977f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4aab97f958a6befb29c9cd0edad3057ca2c7977f", "patch": "@@ -1,3 +1,23 @@\n+2008-09-02  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386.c (X86_64_VARARGS_SIZE): Removed.\n+\t(setup_incoming_varargs_64): Assume cum != NULL. Set/check\n+\tix86_varargs_gpr_size and ix86_varargs_fpr_size.  Use\n+\tix86_varargs_gpr_size instead of X86_64_REGPARM_MAX.\n+\tDon't set ix86_save_varrargs_registers.\n+\t(ix86_setup_incoming_varargs): Assume cum != NULL.\n+\t(ix86_va_start): Check ix86_varargs_gpr_size and\n+\tix86_varargs_fpr_size instead of cfun->va_list_gpr_size and\n+\tcfun->va_list_fpr_size, respectively.  Subtract 8*X86_64_REGPARM_MAX\n+\tfrom frame pointer if ix86_varargs_gpr_size == 0.\n+\t(ix86_compute_frame_layout): Updated.\n+\t* config/i386/i386.h (ix86_save_varrargs_registers): Removed.\n+\t(ix86_varargs_gpr_size): Define.\n+\t(ix86_varargs_fpr_size): Likewise.\n+\t(machine_function): Remove save_varrargs_registers.\n+\tAdd varargs_gpr_size and varargs_fpr_size.\n+\n 2008-09-02  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/alpha/alpha.c (va_list_skip_additions,"}, {"sha": "2c016328e4c08fff4e469ba654ce6ec72b23aa79", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab97f958a6befb29c9cd0edad3057ca2c7977f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab97f958a6befb29c9cd0edad3057ca2c7977f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4aab97f958a6befb29c9cd0edad3057ca2c7977f", "patch": "@@ -1631,9 +1631,6 @@ rtx ix86_compare_op0 = NULL_RTX;\n rtx ix86_compare_op1 = NULL_RTX;\n rtx ix86_compare_emitted = NULL_RTX;\n \n-/* Size of the register save area.  */\n-#define X86_64_VARARGS_SIZE (X86_64_REGPARM_MAX * UNITS_PER_WORD + X86_64_SSE_REGPARM_MAX * 16)\n-\n /* Define the structure for the machine field in struct function.  */\n \n struct stack_local_entry GTY(())\n@@ -6312,14 +6309,24 @@ setup_incoming_varargs_64 (CUMULATIVE_ARGS *cum)\n   int i;\n   int regparm = ix86_regparm;\n \n-  if((cum ? cum->call_abi : ix86_cfun_abi ()) != DEFAULT_ABI)\n+  if (cum->call_abi != DEFAULT_ABI)\n     regparm = DEFAULT_ABI != SYSV_ABI ? X86_64_REGPARM_MAX : X64_REGPARM_MAX;\n \n-  if (! cfun->va_list_gpr_size && ! cfun->va_list_fpr_size)\n-    return;\n+  /* GPR size of varargs save area.  */\n+  if (cfun->va_list_gpr_size)\n+    ix86_varargs_gpr_size = X86_64_REGPARM_MAX * UNITS_PER_WORD;\n+  else\n+    ix86_varargs_gpr_size = 0;\n+\n+  /* FPR size of varargs save area.  We don't need it if we don't pass\n+     anything in SSE registers.  */\n+  if (cum->sse_nregs && cfun->va_list_fpr_size)\n+    ix86_varargs_fpr_size = X86_64_SSE_REGPARM_MAX * 16;\n+  else\n+    ix86_varargs_fpr_size = 0;\n \n-  /* Indicate to allocate space on the stack for varargs save area.  */\n-  ix86_save_varrargs_registers = 1;\n+  if (! ix86_varargs_gpr_size && ! ix86_varargs_fpr_size)\n+    return;\n \n   save_area = frame_pointer_rtx;\n   set = get_varargs_alias_set ();\n@@ -6337,7 +6344,7 @@ setup_incoming_varargs_64 (CUMULATIVE_ARGS *cum)\n \t\t\t\t\tx86_64_int_parameter_registers[i]));\n     }\n \n-  if (cum->sse_nregs && cfun->va_list_fpr_size)\n+  if (ix86_varargs_fpr_size)\n     {\n       /* Now emit code to save SSE registers.  The AX parameter contains number\n \t of SSE parameter registers used to call this function.  We use\n@@ -6382,7 +6389,7 @@ setup_incoming_varargs_64 (CUMULATIVE_ARGS *cum)\n       tmp_reg = gen_reg_rtx (Pmode);\n       emit_insn (gen_rtx_SET (VOIDmode, tmp_reg,\n \t\t\t      plus_constant (save_area,\n-\t\t\t\t\t     8 * X86_64_REGPARM_MAX + 127)));\n+\t\t\t\t\t     ix86_varargs_gpr_size + 127)));\n       mem = gen_rtx_MEM (BLKmode, plus_constant (tmp_reg, -127));\n       MEM_NOTRAP_P (mem) = 1;\n       set_mem_alias_set (mem, set);\n@@ -6438,7 +6445,7 @@ ix86_setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   if (stdarg_p (fntype))\n     function_arg_advance (&next_cum, mode, type, 1);\n \n-  if ((cum ? cum->call_abi : DEFAULT_ABI) == MS_ABI)\n+  if (cum->call_abi == MS_ABI)\n     setup_incoming_varargs_ms_64 (&next_cum);\n   else\n     setup_incoming_varargs_64 (&next_cum);\n@@ -6501,7 +6508,7 @@ ix86_va_start (tree valist, rtx nextarg)\n       expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n     }\n \n-  if (cfun->va_list_fpr_size)\n+  if (TARGET_SSE && cfun->va_list_fpr_size)\n     {\n       type = TREE_TYPE (fpr);\n       t = build2 (MODIFY_EXPR, type, fpr,\n@@ -6520,12 +6527,15 @@ ix86_va_start (tree valist, rtx nextarg)\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n-  if (cfun->va_list_gpr_size || cfun->va_list_fpr_size)\n+  if (ix86_varargs_gpr_size || ix86_varargs_fpr_size)\n     {\n       /* Find the register save area.\n \t Prologue of the function save it right above stack frame.  */\n       type = TREE_TYPE (sav);\n       t = make_tree (type, frame_pointer_rtx);\n+      if (!ix86_varargs_gpr_size)\n+\tt = build2 (POINTER_PLUS_EXPR, type, t,\n+\t\t    size_int (-8 * X86_64_REGPARM_MAX));\n       t = build2 (MODIFY_EXPR, type, sav, t);\n       TREE_SIDE_EFFECTS (t) = 1;\n       expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -7500,13 +7510,8 @@ ix86_compute_frame_layout (struct ix86_frame *frame)\n   offset += frame->nregs * UNITS_PER_WORD;\n \n   /* Va-arg area */\n-  if (ix86_save_varrargs_registers)\n-    {\n-      offset += X86_64_VARARGS_SIZE;\n-      frame->va_arg_size = X86_64_VARARGS_SIZE;\n-    }\n-  else\n-    frame->va_arg_size = 0;\n+  frame->va_arg_size = ix86_varargs_gpr_size + ix86_varargs_fpr_size;\n+  offset += frame->va_arg_size;\n \n   /* Align start of frame for local function.  */\n   frame->padding1 = ((offset + stack_alignment_needed - 1)"}, {"sha": "6f6529a252eba867a76dd0056f8c6dc04e019a8a", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab97f958a6befb29c9cd0edad3057ca2c7977f/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab97f958a6befb29c9cd0edad3057ca2c7977f/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=4aab97f958a6befb29c9cd0edad3057ca2c7977f", "patch": "@@ -2390,7 +2390,8 @@ struct machine_function GTY(())\n {\n   struct stack_local_entry *stack_locals;\n   const char *some_ld_name;\n-  int save_varrargs_registers;\n+  int varargs_gpr_size;\n+  int varargs_fpr_size;\n   int accesses_prev_frame;\n   int optimize_mode_switching[MAX_386_ENTITIES];\n   int needs_cld;\n@@ -2416,7 +2417,8 @@ struct machine_function GTY(())\n };\n \n #define ix86_stack_locals (cfun->machine->stack_locals)\n-#define ix86_save_varrargs_registers (cfun->machine->save_varrargs_registers)\n+#define ix86_varargs_gpr_size (cfun->machine->varargs_gpr_size)\n+#define ix86_varargs_fpr_size (cfun->machine->varargs_fpr_size)\n #define ix86_optimize_mode_switching (cfun->machine->optimize_mode_switching)\n #define ix86_current_function_needs_cld (cfun->machine->needs_cld)\n #define ix86_tls_descriptor_calls_expanded_in_cfun \\"}, {"sha": "4d3bafcc63cd6b2b67c75c7108c29642e3f983fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab97f958a6befb29c9cd0edad3057ca2c7977f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab97f958a6befb29c9cd0edad3057ca2c7977f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4aab97f958a6befb29c9cd0edad3057ca2c7977f", "patch": "@@ -1,3 +1,10 @@\n+2008-09-02  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.target/i386/amd64-abi-3.c: New test.\n+\t* gcc.target/i386/amd64-abi-4.c: Likewise.\n+\t* gcc.target/i386/amd64-abi-5.c: Likewise.\n+\t* gcc.target/i386/amd64-abi-6.c: Likewise.\n+\n 2008-09-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/36766"}, {"sha": "3841e6dabeee8fa56fb35c82c51dd2a67fbdc236", "filename": "gcc/testsuite/gcc.target/i386/amd64-abi-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab97f958a6befb29c9cd0edad3057ca2c7977f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab97f958a6befb29c9cd0edad3057ca2c7977f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-3.c?ref=4aab97f958a6befb29c9cd0edad3057ca2c7977f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mno-sse\" } */\n+/* { dg-final { scan-assembler \"subq\\[\\\\t \\]*\\\\\\$88,\\[\\\\t \\]*%rsp\" } } */\n+/* { dg-final { scan-assembler-not \"subq\\[\\\\t \\]*\\\\\\$216,\\[\\\\t \\]*%rsp\" } } */\n+\n+#include <stdarg.h>\n+\n+void foo (va_list va_arglist);\n+\n+void\n+test (int a1, ...)\n+{\n+  va_list va_arglist;\n+  va_start (va_arglist, a1);\n+  foo (va_arglist);\n+  va_end (va_arglist);\n+}"}, {"sha": "8f32029662957e37ce55cd89a37beb595a07f5aa", "filename": "gcc/testsuite/gcc.target/i386/amd64-abi-4.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab97f958a6befb29c9cd0edad3057ca2c7977f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab97f958a6befb29c9cd0edad3057ca2c7977f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-4.c?ref=4aab97f958a6befb29c9cd0edad3057ca2c7977f", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mno-sse\" } */\n+\n+#include <stdarg.h>\n+#include <assert.h>\n+\n+int n1 = 30;\n+int n2 = 324;\n+void *n3 = (void *) &n2;\n+int n4 = 407;\n+\n+int e1;\n+int e2;\n+void *e3;\n+int e4;\n+\n+static void\n+__attribute__((noinline))\n+foo (va_list va_arglist)\n+{\n+  e2 = va_arg (va_arglist, int);\n+  e3 = va_arg (va_arglist, void *);\n+  e4 = va_arg (va_arglist, int);\n+}\n+\n+static void\n+__attribute__((noinline))\n+test (int a1, ...)\n+{\n+  e1 = a1;\n+  va_list va_arglist;\n+  va_start (va_arglist, a1);\n+  foo (va_arglist);\n+  va_end (va_arglist);\n+}\n+\n+int\n+main ()\n+{\n+  test (n1, n2, n3, n4);\n+  assert (n1 == e1);\n+  assert (n2 == e2);\n+  assert (n3 == e3);\n+  assert (n4 == e4);\n+  return 0;\n+}"}, {"sha": "e4ba1fd5d2896ec39057037febd81b78059b12c9", "filename": "gcc/testsuite/gcc.target/i386/amd64-abi-5.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab97f958a6befb29c9cd0edad3057ca2c7977f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab97f958a6befb29c9cd0edad3057ca2c7977f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-5.c?ref=4aab97f958a6befb29c9cd0edad3057ca2c7977f", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2\" } */\n+\n+#include <stdarg.h>\n+#include <assert.h>\n+\n+int n1 = 30;\n+double n2 = 324;\n+double n3 = 39494.94;\n+double n4 = 407;\n+double n5 = 32.304;\n+double n6 = 394.14;\n+double n7 = 4.07;\n+double n8 = 32.4;\n+double n9 = 314.194;\n+double n10 = 0.1407;\n+\n+int e1;\n+double e2;\n+double e3;\n+double e4;\n+double e5;\n+double e6;\n+double e7;\n+double e8;\n+double e9;\n+double e10;\n+\n+static void\n+__attribute__((noinline))\n+test (int a1, ...)\n+{\n+  e1 = a1;\n+  va_list va_arglist;\n+  va_start (va_arglist, a1);\n+  e2 = va_arg (va_arglist, double);\n+  e3 = va_arg (va_arglist, double);\n+  e4 = va_arg (va_arglist, double);\n+  e5 = va_arg (va_arglist, double);\n+  e6 = va_arg (va_arglist, double);\n+  e7 = va_arg (va_arglist, double);\n+  e8 = va_arg (va_arglist, double);\n+  e9 = va_arg (va_arglist, double);\n+  e10 = va_arg (va_arglist, double);\n+  va_end (va_arglist);\n+}\n+\n+int\n+main ()\n+{\n+  test (n1, n2, n3, n4, n5, n6, n7, n8, n9, n10);\n+  assert (n1 == e1);\n+  assert (n2 == e2);\n+  assert (n3 == e3);\n+  assert (n4 == e4);\n+  assert (n5 == e5);\n+  assert (n6 == e6);\n+  assert (n7 == e7);\n+  assert (n8 == e8);\n+  assert (n9 == e9);\n+  assert (n10 == e10);\n+  return 0;\n+}"}, {"sha": "255b5479eb3d90e50b9b0a4f12bdb08eafb768ca", "filename": "gcc/testsuite/gcc.target/i386/amd64-abi-6.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4aab97f958a6befb29c9cd0edad3057ca2c7977f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4aab97f958a6befb29c9cd0edad3057ca2c7977f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famd64-abi-6.c?ref=4aab97f958a6befb29c9cd0edad3057ca2c7977f", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2\" } */\n+\n+#include <stdarg.h>\n+#include <assert.h>\n+\n+int n1 = 30;\n+double n2 = 324;\n+double n3 = 39494.94;\n+double n4 = 407;\n+double n5 = 32.304;\n+double n6 = 394.14;\n+double n7 = 4.07;\n+double n8 = 32.4;\n+double n9 = 314.194;\n+double n10 = 0.1407;\n+\n+int e1;\n+double e2;\n+double e3;\n+double e4;\n+double e5;\n+double e6;\n+double e7;\n+double e8;\n+double e9;\n+double e10;\n+\n+static void\n+__attribute__((noinline))\n+foo (va_list va_arglist)\n+{\n+  e2 = va_arg (va_arglist, double);\n+  e3 = va_arg (va_arglist, double);\n+  e4 = va_arg (va_arglist, double);\n+  e5 = va_arg (va_arglist, double);\n+  e6 = va_arg (va_arglist, double);\n+  e7 = va_arg (va_arglist, double);\n+  e8 = va_arg (va_arglist, double);\n+  e9 = va_arg (va_arglist, double);\n+  e10 = va_arg (va_arglist, double);\n+}\n+\n+static void\n+__attribute__((noinline))\n+test (int a1, ...)\n+{\n+  va_list va_arglist;\n+  e1 = a1;\n+  va_start (va_arglist, a1);\n+  foo (va_arglist);\n+  va_end (va_arglist);\n+}\n+\n+int\n+main ()\n+{\n+  test (n1, n2, n3, n4, n5, n6, n7, n8, n9, n10);\n+  assert (n1 == e1);\n+  assert (n2 == e2);\n+  assert (n3 == e3);\n+  assert (n4 == e4);\n+  assert (n5 == e5);\n+  assert (n6 == e6);\n+  assert (n7 == e7);\n+  assert (n8 == e8);\n+  assert (n9 == e9);\n+  assert (n10 == e10);\n+  return 0;\n+}"}]}