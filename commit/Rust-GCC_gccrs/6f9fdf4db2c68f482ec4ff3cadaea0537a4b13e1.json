{"sha": "6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY5ZmRmNGRiMmM2OGY0ODJlYzRmZjNjYWRhZWEwNTM3YTRiMTNlMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-02-04T22:05:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-02-04T22:05:15Z"}, "message": "PR c/4475, c++/3780:\n\n\t* c-common.def (SWITCH_STMT): Add SWITCH_TYPE operand.\n\t* c-common.h (SWITCH_TYPE): Define.\n\t* c-typeck.c (c_start_case): Set SWITCH_TYPE.\n\t* stmt.c (all_cases_count): Set lastval to thisval at end of loop.\n\tRename spareness variable to sparseness.\n\t(expand_end_case_type): Renamed from expand_end_case, use orig_type\n\tif non-NULL instead of TREE_TYPE (orig_index).\n\t* tree.h (expand_end_case_type): Renamed from expand_end_case.\n\t(expand_end_case): Define using expand_end_case_type.\n\t* c-semantics.c (genrtl_switch_stmt): Pass SWITCH_TYPE\n\tto expand_end_case_type.\n\t* doc/c-tree.texi (SWITCH_STMT): Document SWITCH_TYPE.\n\n\t* semantics.c (begin_switch_stmt): Clear SWITCH_TYPE.\n\t(finish_switch_cond): Set SWITCH_TYPE.\n\n\t* gcc.dg/Wswitch.c: Fix typos.  Don't return unconditionally\n\tbefore all tests.  Move warning one line above to match where it\n\tC frontend emits.\n\t* gcc.dg/Wswitch-2.c: New test.\n\t* g++.dg/warn/Wswitch-1.C: New test.\n\t* g++.dg/warn/Wswitch-2.C: New test.\n\nFrom-SVN: r49497", "tree": {"sha": "abbbeb9e68d3bc70e43d55d15b23db2b78adbf38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abbbeb9e68d3bc70e43d55d15b23db2b78adbf38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "79109502a02948f16653b44b434b8b4ef8aebd54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79109502a02948f16653b44b434b8b4ef8aebd54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79109502a02948f16653b44b434b8b4ef8aebd54"}], "stats": {"total": 225, "additions": 196, "deletions": 29}, "files": [{"sha": "afd68d6fb02d2895a10a6ee95c6d11633d21375d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1", "patch": "@@ -1,3 +1,19 @@\n+2002-02-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/4475, c++/3780:\n+\t* c-common.def (SWITCH_STMT): Add SWITCH_TYPE operand.\n+\t* c-common.h (SWITCH_TYPE): Define.\n+\t* c-typeck.c (c_start_case): Set SWITCH_TYPE.\n+\t* stmt.c (all_cases_count): Set lastval to thisval at end of loop.\n+\tRename spareness variable to sparseness.\n+\t(expand_end_case_type): Renamed from expand_end_case, use orig_type\n+\tif non-NULL instead of TREE_TYPE (orig_index).\n+\t* tree.h (expand_end_case_type): Renamed from expand_end_case.\n+\t(expand_end_case): Define using expand_end_case_type.\n+\t* c-semantics.c (genrtl_switch_stmt): Pass SWITCH_TYPE\n+\tto expand_end_case_type.\n+\t* doc/c-tree.texi (SWITCH_STMT): Document SWITCH_TYPE.\n+\n 2002-02-04  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* pa.h (PREFERRED_STACK_BOUNDARY): Define to match standard rounding."}, {"sha": "293f4b21bd32b606caebc312cd70e969fd77fa67", "filename": "gcc/c-common.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Fc-common.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Fc-common.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.def?ref=6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1", "patch": "@@ -71,8 +71,8 @@ DEFTREECODE (BREAK_STMT, \"break_stmt\", 'e', 0)\n DEFTREECODE (CONTINUE_STMT, \"continue_stmt\", 'e', 0)\n \n /* Used to represent a 'switch' statement. The operands are\n-   SWITCH_COND and SWITCH_BODY, respectively. */\n-DEFTREECODE (SWITCH_STMT, \"switch_stmt\", 'e', 2)\n+   SWITCH_COND, SWITCH_BODY and SWITCH_TYPE, respectively. */\n+DEFTREECODE (SWITCH_STMT, \"switch_stmt\", 'e', 3)\n \n /* Used to represent a 'goto' statement. The operand is GOTO_DESTINATION. */\n DEFTREECODE (GOTO_STMT, \"goto_stmt\", 'e', 1)"}, {"sha": "c90cbfb076b19a6e454834c665969cfe3b770358", "filename": "gcc/c-common.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1", "patch": "@@ -603,10 +603,12 @@ extern tree strip_array_types                   PARAMS ((tree));\n #define FOR_EXPR(NODE)          TREE_OPERAND (FOR_STMT_CHECK (NODE), 2)\n #define FOR_BODY(NODE)          TREE_OPERAND (FOR_STMT_CHECK (NODE), 3)\n \n-/* SWITCH_STMT accessors. These give access to the condition and body\n+/* SWITCH_STMT accessors. These give access to the condition, body and\n+   original condition type (before any compiler conversions)\n    of the switch statement, respectively.  */\n #define SWITCH_COND(NODE)       TREE_OPERAND (SWITCH_STMT_CHECK (NODE), 0)\n #define SWITCH_BODY(NODE)       TREE_OPERAND (SWITCH_STMT_CHECK (NODE), 1)\n+#define SWITCH_TYPE(NODE)\tTREE_OPERAND (SWITCH_STMT_CHECK (NODE), 2)\n \n /* CASE_LABEL accessors. These give access to the high and low values\n    of a case label, respectively.  */"}, {"sha": "8f99bc1f64c679f26aee024e647fe56a2372a298", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1", "patch": "@@ -644,7 +644,7 @@ genrtl_switch_stmt (t)\n   emit_line_note (input_filename, lineno);\n   expand_start_case (1, cond, TREE_TYPE (cond), \"switch statement\");\n   expand_stmt (SWITCH_BODY (t));\n-  expand_end_case (cond);\n+  expand_end_case_type (cond, SWITCH_TYPE (t));\n }\n \n /* Create a CASE_LABEL tree node and return it.  */"}, {"sha": "8c34a17c5d3ab1b278bb288f489474c1fc7b45f4", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1", "patch": "@@ -7176,15 +7176,15 @@ c_start_case (exp)\n      tree exp;\n {\n   enum tree_code code;\n-  tree type;\n+  tree type, orig_type = error_mark_node;\n   struct c_switch *cs;\n \n   if (exp != error_mark_node)\n     {\n       code = TREE_CODE (TREE_TYPE (exp));\n-      type = TREE_TYPE (exp);\n+      orig_type = TREE_TYPE (exp);\n \n-      if (! INTEGRAL_TYPE_P (type)\n+      if (! INTEGRAL_TYPE_P (orig_type)\n \t  && code != ERROR_MARK)\n \t{\n \t  error (\"switch quantity not an integer\");\n@@ -7206,7 +7206,7 @@ c_start_case (exp)\n \n   /* Add this new SWITCH_STMT to the stack.  */\n   cs = (struct c_switch *) xmalloc (sizeof (*cs));\n-  cs->switch_stmt = build_stmt (SWITCH_STMT, exp, NULL_TREE, NULL_TREE);\n+  cs->switch_stmt = build_stmt (SWITCH_STMT, exp, NULL_TREE, orig_type);\n   cs->cases = splay_tree_new (case_compare, NULL, NULL);\n   cs->next = switch_stack;\n   switch_stack = cs;"}, {"sha": "f0cb0704b432d2520ee583ca12be36e1de934502", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1", "patch": "@@ -1,3 +1,8 @@\n+2002-02-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* semantics.c (begin_switch_stmt): Clear SWITCH_TYPE.\n+\t(finish_switch_cond): Set SWITCH_TYPE.\n+\n 2002-02-04  Richard Henderson  <rth@redhat.com>\n \n \t* method.c (use_thunk): Always initialize the block tree.  Reindent."}, {"sha": "c344a3016efacea864050672ba0c249073c55cc1", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1", "patch": "@@ -500,7 +500,7 @@ tree\n begin_switch_stmt ()\n {\n   tree r;\n-  r = build_stmt (SWITCH_STMT, NULL_TREE, NULL_TREE);\n+  r = build_stmt (SWITCH_STMT, NULL_TREE, NULL_TREE, NULL_TREE);\n   add_stmt (r);\n   do_pushlevel ();\n   return r;\n@@ -513,6 +513,7 @@ finish_switch_cond (cond, switch_stmt)\n      tree cond;\n      tree switch_stmt;\n {\n+  tree orig_type = NULL;\n   if (!processing_template_decl)\n     {\n       tree type;\n@@ -525,6 +526,7 @@ finish_switch_cond (cond, switch_stmt)\n \t  error (\"switch quantity not an integer\");\n \t  cond = error_mark_node;\n \t}\n+      orig_type = TREE_TYPE (cond);\n       if (cond != error_mark_node)\n \t{\n \t  cond = default_conversion (cond);\n@@ -542,6 +544,7 @@ finish_switch_cond (cond, switch_stmt)\n \tcond = index;\n     }\n   FINISH_COND (cond, switch_stmt, SWITCH_COND (switch_stmt));\n+  SWITCH_TYPE (switch_stmt) = orig_type;\n   push_switch (switch_stmt);\n }\n "}, {"sha": "65b39db0bb8880a41b7afd7f5d7bac6db1a2efdd", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1", "patch": "@@ -1631,7 +1631,8 @@ Used to represent a @code{switch} statement.  The @code{SWITCH_COND} is\n the expression on which the switch is occurring.  See the documentation\n for an @code{IF_STMT} for more information on the representation used\n for the condition.  The @code{SWITCH_BODY} is the body of the switch\n-statement.\n+statement.   The @code{SWITCH_TYPE} is the original type of switch\n+expression as given in the source, before any compiler conversions.\n \n @item TRY_BLOCK\n Used to represent a @code{try} block.  The body of the try block is"}, {"sha": "99f910a9d2194a956b4e1a470d6624b7109c4edd", "filename": "gcc/stmt.c", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1", "patch": "@@ -4876,20 +4876,20 @@ add_case_node (low, high, label, duplicate)\n /* Returns the number of possible values of TYPE.\n    Returns -1 if the number is unknown, variable, or if the number does not\n    fit in a HOST_WIDE_INT.\n-   Sets *SPARENESS to 2 if TYPE is an ENUMERAL_TYPE whose values\n+   Sets *SPARSENESS to 2 if TYPE is an ENUMERAL_TYPE whose values\n    do not increase monotonically (there may be duplicates);\n    to 1 if the values increase monotonically, but not always by 1;\n    otherwise sets it to 0.  */\n \n HOST_WIDE_INT\n-all_cases_count (type, spareness)\n+all_cases_count (type, sparseness)\n      tree type;\n-     int *spareness;\n+     int *sparseness;\n {\n   tree t;\n   HOST_WIDE_INT count, minval, lastval;\n \n-  *spareness = 0;\n+  *sparseness = 0;\n \n   switch (TREE_CODE (type))\n     {\n@@ -4928,11 +4928,12 @@ all_cases_count (type, spareness)\n \t{\n \t  HOST_WIDE_INT thisval = tree_low_cst (TREE_VALUE (t), 0);\n \n-\t  if (*spareness == 2 || thisval < lastval)\n-\t    *spareness = 2;\n+\t  if (*sparseness == 2 || thisval <= lastval)\n+\t    *sparseness = 2;\n \t  else if (thisval != minval + count)\n-\t    *spareness = 1;\n+\t    *sparseness = 1;\n \n+\t  lastval = thisval;\n \t  count++;\n \t}\n     }\n@@ -5213,11 +5214,13 @@ free_case_nodes (cn)\n \n /* Terminate a case (Pascal) or switch (C) statement\n    in which ORIG_INDEX is the expression to be tested.\n+   If ORIG_TYPE is not NULL, it is the original ORIG_INDEX\n+   type as given in the source before any compiler conversions.\n    Generate the code to test it and jump to the right place.  */\n \n void\n-expand_end_case (orig_index)\n-     tree orig_index;\n+expand_end_case_type (orig_index, orig_type)\n+     tree orig_index, orig_type;\n {\n   tree minval = NULL_TREE, maxval = NULL_TREE, range = NULL_TREE;\n   rtx default_label = 0;\n@@ -5241,6 +5244,8 @@ expand_end_case (orig_index)\n   index_expr = thiscase->data.case_stmt.index_expr;\n   index_type = TREE_TYPE (index_expr);\n   unsignedp = TREE_UNSIGNED (index_type);\n+  if (orig_type == NULL)\n+    orig_type = TREE_TYPE (orig_index);\n \n   do_pending_stack_adjust ();\n \n@@ -5261,9 +5266,9 @@ expand_end_case (orig_index)\n \t No sense trying this if there's a default case, however.  */\n \n       if (!thiscase->data.case_stmt.default_label\n-\t  && TREE_CODE (TREE_TYPE (orig_index)) == ENUMERAL_TYPE\n+\t  && TREE_CODE (orig_type) == ENUMERAL_TYPE\n \t  && TREE_CODE (index_expr) != INTEGER_CST)\n-\tcheck_for_full_enumeration_handling (TREE_TYPE (orig_index));\n+\tcheck_for_full_enumeration_handling (orig_type);\n \n       /* If we don't have a default-label, create one here,\n \t after the body of the switch.  */\n@@ -5420,7 +5425,7 @@ expand_end_case (orig_index)\n \t\t default code is emitted.  */\n \n \t      use_cost_table\n-\t\t= (TREE_CODE (TREE_TYPE (orig_index)) != ENUMERAL_TYPE\n+\t\t= (TREE_CODE (orig_type) != ENUMERAL_TYPE\n \t\t   && estimate_case_costs (thiscase->data.case_stmt.case_list));\n \t      balance_case_nodes (&thiscase->data.case_stmt.case_list, NULL);\n \t      emit_case_nodes (index, thiscase->data.case_stmt.case_list,"}, {"sha": "6393589a19aa41a99d78ef70ce22ea420ba1d60b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1", "patch": "@@ -1,3 +1,12 @@\n+2002-02-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/Wswitch.c: Fix typos.  Don't return unconditionally\n+\tbefore all tests.  Move warning one line above to match where it\n+\tC frontend emits.\n+\t* gcc.dg/Wswitch-2.c: New test.\n+\t* g++.dg/warn/Wswitch-1.C: New test.\n+\t* g++.dg/warn/Wswitch-2.C: New test.\n+\n 2002-02-04  Richard Henderson  <rth@redhat.com>\n \n \t* g++.dg/abi/offsetof.C: Fix size comparison."}, {"sha": "e9fcb581817661ecf438a669b989698f338c6079", "filename": "gcc/testsuite/g++.dg/warn/Wswitch-1.C", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWswitch-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWswitch-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWswitch-1.C?ref=6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1", "patch": "@@ -0,0 +1,63 @@\n+/* PR c/4475, PR c++/3780 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wswitch\" } */\n+\n+enum e { e1, e2 };\n+\n+int\n+foo (int i, int j, enum e ei, enum e ej, enum e ek, enum e el,\n+     enum e em, enum e en, enum e eo, enum e ep)\n+{\n+  switch (i)\n+    {\n+    case 1: return 1;\n+    case 2: return 2;\n+    }\n+  switch (j)\n+    {\n+    case 3: return 4;\n+    case 4: return 3;\n+    default: break;\n+    }\n+  switch (ei)\n+    { /* { dg-warning \"enumeration value `e1' not handled in switch\" \"enum e1\" { target *-*-* } 24 } */\n+    } /* { dg-warning \"enumeration value `e2' not handled in switch\" \"enum e2\" } */\n+  switch (ej)\n+    {\n+    default: break;\n+    }\n+  switch (ek)\n+    {\n+    case e1: return 1;\n+    } /* { dg-warning \"enumeration value `e2' not handled in switch\" \"enum e2\" } */\n+  switch (el)\n+    {\n+    case e1: return 1;\n+    default: break;\n+    }\n+  switch (em)\n+    {\n+    case e1: return 1;\n+    case e2: return 2;\n+    }\n+  switch (en)\n+    {\n+    case e1: return 1;\n+    case e2: return 2;\n+    default: break;\n+    }\n+  switch (eo)\n+    {\n+    case e1: return 1;\n+    case e2: return 2;\n+    case 3: return 3;\n+    } /* { dg-warning \"case value `3' not in enumerated type `e'\" \"excess 3\" } */\n+  switch (ep)\n+    {\n+    case e1: return 1;\n+    case e2: return 2;\n+    case 3: return 3;\n+    default: break;\n+    } /* Since there is a default, no warning about ``case 3'' */\n+  return 0;\n+}"}, {"sha": "b151e2310c7c3688ebe5c0e8417787a1295380f7", "filename": "gcc/testsuite/g++.dg/warn/Wswitch-2.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWswitch-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWswitch-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWswitch-2.C?ref=6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1", "patch": "@@ -0,0 +1,31 @@\n+/* Further -Wswitch tests.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wswitch\" } */\n+\n+enum e { e1 = 0, e2 = 1, e3 = 1, e4 = 2 };\n+\n+int\n+foo (enum e ei, int j)\n+{\n+  switch (ei)\n+    {\n+    case e1: return 1;\n+    case e3: return 2;\n+    case e4: return 3;\n+    }\t/* No warning here since e2 has the same value as e3.  */\n+  switch (ei)\n+    {\n+    case e1: return 1;\n+    case e2: return 2;\n+    }\t/* { dg-warning \"enumeration value `e4' not handled in switch\" \"enum e4\" } */\n+  switch ((int) ei)\n+    {\n+    case e1: return 1;\n+    }\t/* No warning here since switch condition was cast to int.  */\n+  switch ((enum e) j)\n+    {\n+    case e2: return 1;\n+    case e4: return 2;\n+    }\t/* { dg-warning \"enumeration value `e1' not handled in switch\" \"enum e1\" } */\n+  return 0;\n+}"}, {"sha": "b151e2310c7c3688ebe5c0e8417787a1295380f7", "filename": "gcc/testsuite/gcc.dg/Wswitch-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-2.c?ref=6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1", "patch": "@@ -0,0 +1,31 @@\n+/* Further -Wswitch tests.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wswitch\" } */\n+\n+enum e { e1 = 0, e2 = 1, e3 = 1, e4 = 2 };\n+\n+int\n+foo (enum e ei, int j)\n+{\n+  switch (ei)\n+    {\n+    case e1: return 1;\n+    case e3: return 2;\n+    case e4: return 3;\n+    }\t/* No warning here since e2 has the same value as e3.  */\n+  switch (ei)\n+    {\n+    case e1: return 1;\n+    case e2: return 2;\n+    }\t/* { dg-warning \"enumeration value `e4' not handled in switch\" \"enum e4\" } */\n+  switch ((int) ei)\n+    {\n+    case e1: return 1;\n+    }\t/* No warning here since switch condition was cast to int.  */\n+  switch ((enum e) j)\n+    {\n+    case e2: return 1;\n+    case e4: return 2;\n+    }\t/* { dg-warning \"enumeration value `e1' not handled in switch\" \"enum e1\" } */\n+  return 0;\n+}"}, {"sha": "014919b87bd7540edfe54ae82142063719aebc68", "filename": "gcc/testsuite/gcc.dg/Wswitch.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch.c?ref=6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1", "patch": "@@ -1,4 +1,4 @@\n-/* PR gcc/4475, PR gcc/3780 */\n+/* PR c/4475, PR c++/3780 */\n /* { dg-do compile } */\n /* { dg-options \"-Wswitch\" } */\n \n@@ -17,19 +17,19 @@ foo (int i, int j, enum e ei, enum e ej, enum e ek, enum e el,\n     {\n     case 3: return 4;\n     case 4: return 3;\n-    default: return 7;\n+    default: break;\n     }\n   switch (ei)\n-    { /* { dg-warning \"enumeration value `e1' not handled in switch\" \"enum e1\" { target *-*-* } 24 } */\n-    } /* { dg-warning \"enumeration value `e2' not handled in switch\" \"enum e2\" } */\n+    { /* { dg-warning \"enumeration value `e1' not handled in switch\" \"enum e1\" } */\n+    } /* { dg-warning \"enumeration value `e2' not handled in switch\" \"enum e2\" { target *-*-* } 23 } */\n   switch (ej)\n     {\n     default: break;\n     }\n   switch (ek)\n     {\n     case e1: return 1;\n-    } /* { dg-warning \"enumeration value `e2' not handled in switch\" \"enum e1\" } */\n+    } /* { dg-warning \"enumeration value `e2' not handled in switch\" \"enum e2\" } */\n   switch (el)\n     {\n     case e1: return 1;\n@@ -58,6 +58,6 @@ foo (int i, int j, enum e ei, enum e ej, enum e ek, enum e el,\n     case e2: return 2;\n     case 3: return 3;\n     default: break;\n-    } /* Since there is a default, no warning about ``case 3'' } */\n+    } /* Since there is a default, no warning about ``case 3'' */\n   return 0;\n }"}, {"sha": "842c0a9924f82d88a511a938fc6d90ebb44da923", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6f9fdf4db2c68f482ec4ff3cadaea0537a4b13e1", "patch": "@@ -2772,7 +2772,8 @@ extern struct nesting * current_nesting_level\tPARAMS ((void));\n extern tree last_cleanup_this_contour\t\tPARAMS ((void));\n extern void expand_start_case\t\t\tPARAMS ((int, tree, tree,\n \t\t\t\t\t\t       const char *));\n-extern void expand_end_case\t\t\tPARAMS ((tree));\n+extern void expand_end_case_type\t\tPARAMS ((tree, tree));\n+#define expand_end_case(cond) expand_end_case_type (cond, NULL)\n extern int add_case_node                        PARAMS ((tree, tree,\n \t\t\t\t\t\t\t tree, tree *));\n extern int pushcase\t\t\t\tPARAMS ((tree,"}]}