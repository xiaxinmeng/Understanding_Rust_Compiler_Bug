{"sha": "4eee656926d2ff1d11587c909a828267a5e3f40a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVlZTY1NjkyNmQyZmYxZDExNTg3YzkwOWE4MjgyNjdhNWUzZjQwYQ==", "commit": {"author": {"name": "Victor Kaplansky", "email": "victork@il.ibm.com", "date": "2008-08-06T16:26:46Z"}, "committer": {"name": "Victor Kaplansky", "email": "victork@gcc.gnu.org", "date": "2008-08-06T16:26:46Z"}, "message": "tree-vect-transform.c (vect_model_simple_cost): Return immediately if stmt is pure SLP.\n\n2008-08-06  Victor Kaplansky  <victork@il.ibm.com>\n            Ira Rosen  <irar@il.ibm.com>\n\n        * tree-vect-transform.c (vect_model_simple_cost): Return\n        immediately if stmt is pure SLP.\n        (vect_model_store_cost): Ditto.\n        (vect_model_load_cost): Ditto.\n        (vectorizable_store): Remove PURE_SLP check before call\n        to vect_model_store_cost.\n        (vect_model_store_cost): When checking whether stmt describe\n        strided access, add a check that it is not slp_node.\n\nTestsute\n\n\t* gcc.dg/vect/costmodel/ppc/costmodel-slp-34.c: New test.\n\n\n\n\nCo-Authored-By: Ira Rosen <irar@il.ibm.com>\n\nFrom-SVN: r138815", "tree": {"sha": "63f90eac8f0b5c7190cda47958d6b127285cdbbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63f90eac8f0b5c7190cda47958d6b127285cdbbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4eee656926d2ff1d11587c909a828267a5e3f40a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eee656926d2ff1d11587c909a828267a5e3f40a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eee656926d2ff1d11587c909a828267a5e3f40a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eee656926d2ff1d11587c909a828267a5e3f40a/comments", "author": null, "committer": null, "parents": [{"sha": "2d12797c692346ff8d9ca935835a3e0b659ab4b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d12797c692346ff8d9ca935835a3e0b659ab4b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d12797c692346ff8d9ca935835a3e0b659ab4b8"}], "stats": {"total": 107, "additions": 104, "deletions": 3}, "files": [{"sha": "e9a060604c08d80aec7b93ad359325312036c85d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eee656926d2ff1d11587c909a828267a5e3f40a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eee656926d2ff1d11587c909a828267a5e3f40a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4eee656926d2ff1d11587c909a828267a5e3f40a", "patch": "@@ -1,3 +1,15 @@\n+2008-08-06  Victor Kaplansky  <victork@il.ibm.com>\n+\t    Ira Rosen  <irar@il.ibm.com>\n+\n+\t* tree-vect-transform.c (vect_model_simple_cost): Return\n+\timmediately if stmt is pure SLP.\n+\t(vect_model_store_cost): Ditto.\n+\t(vect_model_load_cost): Ditto.\n+\t(vectorizable_store): Remove PURE_SLP check before call\n+\tto vect_model_store_cost.\n+\t(vect_model_store_cost): When checking whether stmt describe\n+\tstrided access, add a check that it is not slp_node.\n+\n 2008-08-06  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 8715"}, {"sha": "ea0a55b2af9f7ca6fbe9fcab69f6367bf1ea68c4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eee656926d2ff1d11587c909a828267a5e3f40a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eee656926d2ff1d11587c909a828267a5e3f40a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4eee656926d2ff1d11587c909a828267a5e3f40a", "patch": "@@ -1,3 +1,7 @@\n+2008-08-06  Victor Kaplansky  <victork@il.ibm.com>\n+\n+\t* gcc.dg/vect/costmodel/ppc/costmodel-slp-34.c: New test.\n+\n 2008-08-06  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 8715"}, {"sha": "376c7e4ee07cde710cea59f67f1f372e756e920c", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/ppc/costmodel-slp-34.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eee656926d2ff1d11587c909a828267a5e3f40a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fppc%2Fcostmodel-slp-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eee656926d2ff1d11587c909a828267a5e3f40a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fppc%2Fcostmodel-slp-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fppc%2Fcostmodel-slp-34.c?ref=4eee656926d2ff1d11587c909a828267a5e3f40a", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdarg.h>\n+#include \"../../tree-vect.h\"\n+\n+struct mystr {\n+  int f1;\n+  int f2;\n+};\n+\n+struct mystr af[16] = {\n+  10, 11, 12, 13, 14, 15, 16, 17,\n+  20, 21, 22, 23, 24, 25, 26, 27,\n+  30, 31, 32, 33, 34, 35, 36, 37,\n+  40, 41, 42, 43, 44, 45, 46, 47\n+};\n+\n+struct mystr bf[16] = {\n+  12, 13, 14, 15, 16, 17, 18, 19,\n+  22, 23, 24, 25, 26, 27, 28, 29,\n+  32, 33, 34, 35, 36, 37, 38, 39,\n+  42, 43, 44, 45, 46, 47, 48, 49\n+};\n+\n+struct mystr cf[16];\n+\n+int res1[16] = {\n+  22, 26, 30, 34, 42, 46, 50, 54,\n+  62, 66, 70, 74, 82, 86, 90, 94,\n+};\n+\n+int res2[16] = {\n+  24, 28, 32, 36, 44, 48, 52, 56,\n+  64, 68, 72, 76, 84, 88, 92, 96,\n+};\n+\n+__attribute__ ((noinline)) void\n+foo (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+  {\n+    cf[i].f1 = af[i].f1 + bf[i].f1;\n+    cf[i].f2 = af[i].f2 + bf[i].f2;\n+  }\n+}\n+\n+\n+\n+int\n+main (void)\n+{ \n+  int i;\n+\n+  check_vect ();\n+  foo ();\n+\n+  /* Check resiults. */ \n+  for (i = 0; i < 16; i++)\n+    {\n+      if (cf[i].f1 != res1[i])\n+\tabort ();\n+      if (cf[i].f2 != res2[i])\n+        abort ();\n+\n+    }\n+  return 0;\n+} \n+\n+/* { dg-final { scan-tree-dump-times \"vectorization not profitable\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\"  } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "9d3d40a70fab244c8ebebf3d55884f2077eb4efe", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eee656926d2ff1d11587c909a828267a5e3f40a/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eee656926d2ff1d11587c909a828267a5e3f40a/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=4eee656926d2ff1d11587c909a828267a5e3f40a", "patch": "@@ -580,6 +580,10 @@ vect_model_simple_cost (stmt_vec_info stmt_info, int ncopies,\n   int i;\n   int inside_cost = 0, outside_cost = 0;\n \n+  /* The SLP costs were already calculated during SLP tree build.  */\n+  if (PURE_SLP_STMT (stmt_info))\n+    return;\n+\n   inside_cost = ncopies * TARG_VEC_STMT_COST;\n \n   /* FORNOW: Assuming maximum 2 args per stmts.  */\n@@ -629,11 +633,15 @@ vect_model_store_cost (stmt_vec_info stmt_info, int ncopies,\n   int group_size;\n   int inside_cost = 0, outside_cost = 0;\n \n+  /* The SLP costs were already calculated during SLP tree build.  */\n+  if (PURE_SLP_STMT (stmt_info))\n+    return;\n+\n   if (dt == vect_constant_def || dt == vect_invariant_def)\n     outside_cost = TARG_SCALAR_TO_VEC_COST;\n \n   /* Strided access?  */\n-  if (DR_GROUP_FIRST_DR (stmt_info)) \n+  if (DR_GROUP_FIRST_DR (stmt_info) && !slp_node) \n     group_size = vect_cost_strided_group_size (stmt_info);\n   /* Not a strided access.  */\n   else\n@@ -683,6 +691,10 @@ vect_model_load_cost (stmt_vec_info stmt_info, int ncopies, slp_tree slp_node)\n   struct data_reference *dr = STMT_VINFO_DATA_REF (stmt_info), *first_dr;\n   int inside_cost = 0, outside_cost = 0;\n \n+  /* The SLP costs were already calculated during SLP tree build.  */\n+  if (PURE_SLP_STMT (stmt_info))\n+    return;\n+\n   /* Strided accesses?  */\n   first_stmt = DR_GROUP_FIRST_DR (stmt_info);\n   if (first_stmt && !slp_node)\n@@ -4865,8 +4877,7 @@ vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   if (!vec_stmt) /* transformation not required.  */\n     {\n       STMT_VINFO_TYPE (stmt_info) = store_vec_info_type;\n-      if (!PURE_SLP_STMT (stmt_info))\n-\tvect_model_store_cost (stmt_info, ncopies, dt, NULL);\n+      vect_model_store_cost (stmt_info, ncopies, dt, NULL);\n       return true;\n     }\n "}]}