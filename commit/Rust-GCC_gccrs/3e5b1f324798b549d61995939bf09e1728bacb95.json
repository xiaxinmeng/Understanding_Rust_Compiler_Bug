{"sha": "3e5b1f324798b549d61995939bf09e1728bacb95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U1YjFmMzI0Nzk4YjU0OWQ2MTk5NTkzOWJmMDllMTcyOGJhY2I5NQ==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2014-02-24T16:54:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-24T16:54:41Z"}, "message": "s-fileio.adb (Errno_Message): Remove, use shared version from s-os_lib instead.\n\n2014-02-24  Thomas Quinot  <quinot@adacore.com>\n\n\t* s-fileio.adb (Errno_Message): Remove, use shared version from\n\ts-os_lib instead.\n\t* s-crtrun.ads, Makefile.rtl: Remove now unused unit.\n\t* g-stseme (Socket_Error_Message): Reimplement in terms of new\n\ts-os_lib function.\n\t* g-socthi.ads, g-socthi.adb: Change profile of\n\tSocket_Error_Message to return String to allow the above.\n\t* g-socket.adb, g-socthi-mingw.adb, g-socthi-mingw.ads,\n\t* g-socthi-vms.adb, g-socthi-vms.ads, g-socthi-vxworks.adb,\n\t* g-socthi-vxworks.ads: Update to account for the above profile\n\tchange.\n\t* a-tags.adb: Use strlen builtin binding provided by s-crtl.\n\t* s-crtl.ads (strncpy): New procedure.\n\t* s-os_lib.adb (Copy_Attributes): Import just once (strncpy):\n\tUse import from s-crtl.\n\t* a-envvar.adb, osint.adb: Use imports of C runtime functions\n\tfrom s-crtl instead of re-importing locally.\n\nFrom-SVN: r208079", "tree": {"sha": "7da7de3843015498f4fd50b583ef216d74825c10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7da7de3843015498f4fd50b583ef216d74825c10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e5b1f324798b549d61995939bf09e1728bacb95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e5b1f324798b549d61995939bf09e1728bacb95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e5b1f324798b549d61995939bf09e1728bacb95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e5b1f324798b549d61995939bf09e1728bacb95/comments", "author": null, "committer": null, "parents": [{"sha": "c6d2191a0da9f40899da20933f008242f90262e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d2191a0da9f40899da20933f008242f90262e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6d2191a0da9f40899da20933f008242f90262e0"}], "stats": {"total": 417, "additions": 160, "deletions": 257}, "files": [{"sha": "e31ec1edf7ba13168bdd25541d62d2aca30fe220", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3e5b1f324798b549d61995939bf09e1728bacb95", "patch": "@@ -1,3 +1,23 @@\n+2014-02-24  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* s-fileio.adb (Errno_Message): Remove, use shared version from\n+\ts-os_lib instead.\n+\t* s-crtrun.ads, Makefile.rtl: Remove now unused unit.\n+\t* g-stseme (Socket_Error_Message): Reimplement in terms of new\n+\ts-os_lib function.\n+\t* g-socthi.ads, g-socthi.adb: Change profile of\n+\tSocket_Error_Message to return String to allow the above.\n+\t* g-socket.adb, g-socthi-mingw.adb, g-socthi-mingw.ads,\n+\t* g-socthi-vms.adb, g-socthi-vms.ads, g-socthi-vxworks.adb,\n+\t* g-socthi-vxworks.ads: Update to account for the above profile\n+\tchange.\n+\t* a-tags.adb: Use strlen builtin binding provided by s-crtl.\n+\t* s-crtl.ads (strncpy): New procedure.\n+\t* s-os_lib.adb (Copy_Attributes): Import just once (strncpy):\n+\tUse import from s-crtl.\n+\t* a-envvar.adb, osint.adb: Use imports of C runtime functions\n+\tfrom s-crtl instead of re-importing locally.\n+\n 2014-02-24  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_prag.adb (Analyze_Global_Item): Emit the"}, {"sha": "6496dc7396c4ec9f44d900e7f8bca2dd947447a3", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=3e5b1f324798b549d61995939bf09e1728bacb95", "patch": "@@ -509,7 +509,6 @@ GNATRTL_NONTASKING_OBJS= \\\n   s-conca9$(objext) \\\n   s-crc32$(objext)  \\\n   s-crtl$(objext)   \\\n-  s-crtrun$(objext) \\\n   s-diflio$(objext) \\\n   s-dim$(objext)    \\\n   s-diinio$(objext) \\"}, {"sha": "85368f8bf95bf62ec256433f632ef255437d5a3c", "filename": "gcc/ada/a-envvar.adb", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fa-envvar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fa-envvar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-envvar.adb?ref=3e5b1f324798b549d61995939bf09e1728bacb95", "patch": "@@ -29,7 +29,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with System;\n+with System.CRTL;\n with Interfaces.C.Strings;\n with Ada.Unchecked_Deallocation;\n \n@@ -188,14 +188,11 @@ package body Ada.Environment_Variables is\n    -----------\n \n    function Value (Name : String) return String is\n-      use System;\n+      use System, System.CRTL;\n \n       procedure Get_Env_Value_Ptr (Name, Length, Ptr : Address);\n       pragma Import (C, Get_Env_Value_Ptr, \"__gnat_getenv\");\n \n-      procedure Strncpy (Astring_Addr, Cstring : Address; N : Integer);\n-      pragma Import (C, Strncpy, \"strncpy\");\n-\n       Env_Value_Ptr    : aliased Address;\n       Env_Value_Length : aliased Integer;\n       F_Name           : aliased String (1 .. Name'Length + 1);\n@@ -215,7 +212,7 @@ package body Ada.Environment_Variables is\n          declare\n             Result : aliased String (1 .. Env_Value_Length);\n          begin\n-            Strncpy (Result'Address, Env_Value_Ptr, Env_Value_Length);\n+            strncpy (Result'Address, Env_Value_Ptr, size_t (Env_Value_Length));\n             return Result;\n          end;\n       else"}, {"sha": "887bd148718d2cda0adb7e7dc74253aeaf461344", "filename": "gcc/ada/a-tags.adb", "status": "modified", "additions": 10, "deletions": 29, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fa-tags.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fa-tags.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tags.adb?ref=3e5b1f324798b549d61995939bf09e1728bacb95", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,6 +31,7 @@\n \n with Ada.Exceptions;\n with Ada.Unchecked_Conversion;\n+with System.CRTL;             use System.CRTL;\n with System.HTable;\n with System.Storage_Elements; use System.Storage_Elements;\n with System.WCh_Con;          use System.WCh_Con;\n@@ -56,10 +57,6 @@ package body Ada.Tags is\n    --  table.  This is Inline_Always since it is called from other Inline_\n    --  Always subprograms where we want no out of line code to be generated.\n \n-   function Length (Str : Cstring_Ptr) return Natural;\n-   --  Length of string represented by the given pointer (treating the string\n-   --  as a C-style string, which is Nul terminated).\n-\n    function OSD (T : Tag) return Object_Specific_Data_Ptr;\n    --  Ada 2005 (AI-251): Given a pointer T to a secondary dispatch table,\n    --  retrieve the address of the record containing the Object Specific\n@@ -273,10 +270,11 @@ package body Ada.Tags is\n \n       function Hash (F : System.Address) return HTable_Headers is\n          function H is new System.HTable.Hash (HTable_Headers);\n-         Str : constant Cstring_Ptr    := To_Cstring_Ptr (F);\n-         Res : constant HTable_Headers := H (Str (1 .. Length (Str)));\n+         Str : String (1 .. Integer (strlen (F)));\n+         for Str'Address use F;\n+         pragma Import (Ada, Str);\n       begin\n-         return Res;\n+         return H (Str);\n       end Hash;\n \n       -----------------\n@@ -310,7 +308,8 @@ package body Ada.Tags is\n    procedure Check_TSD (TSD : Type_Specific_Data_Ptr) is\n       T : Tag;\n \n-      E_Tag_Len : constant Integer := Length (TSD.External_Tag);\n+      E_Tag_Len : constant Integer :=\n+        Integer (strlen (TSD.External_Tag.all'Address));\n       E_Tag     : String (1 .. E_Tag_Len);\n       for E_Tag'Address use TSD.External_Tag.all'Address;\n       pragma Import (Ada, E_Tag);\n@@ -487,7 +486,7 @@ package body Ada.Tags is\n       TSD_Ptr := To_Addr_Ptr (To_Address (T) - DT_Typeinfo_Ptr_Size);\n       TSD     := To_Type_Specific_Data_Ptr (TSD_Ptr.all);\n       Result  := TSD.Expanded_Name;\n-      return Result (1 .. Length (Result));\n+      return Result (1 .. Integer (strlen  (Result.all'Address)));\n    end Expanded_Name;\n \n    ------------------\n@@ -507,7 +506,7 @@ package body Ada.Tags is\n       TSD_Ptr := To_Addr_Ptr (To_Address (T) - DT_Typeinfo_Ptr_Size);\n       TSD     := To_Type_Specific_Data_Ptr (TSD_Ptr.all);\n       Result  := TSD.External_Tag;\n-      return Result (1 .. Length (Result));\n+      return Result (1 .. Integer (strlen (Result.all'Address)));\n    end External_Tag;\n \n    ---------------------\n@@ -731,24 +730,6 @@ package body Ada.Tags is\n         and then D_TSD.Access_Level = A_TSD.Access_Level;\n    end Is_Descendant_At_Same_Level;\n \n-   ------------\n-   -- Length --\n-   ------------\n-\n-   --  Should this be reimplemented using the strlen GCC builtin???\n-\n-   function Length (Str : Cstring_Ptr) return Natural is\n-      Len : Integer;\n-\n-   begin\n-      Len := 1;\n-      while Str (Len) /= ASCII.NUL loop\n-         Len := Len + 1;\n-      end loop;\n-\n-      return Len - 1;\n-   end Length;\n-\n    -------------------\n    -- Offset_To_Top --\n    -------------------"}, {"sha": "f65b2709ea299c276df2934ff2faf70920d4c7ca", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=3e5b1f324798b549d61995939bf09e1728bacb95", "patch": "@@ -1720,8 +1720,7 @@ package body GNAT.Sockets is\n       use type C.Strings.chars_ptr;\n    begin\n       raise Socket_Error with\n-        Err_Code_Image (Error)\n-        & C.Strings.Value (Socket_Error_Message (Error));\n+        Err_Code_Image (Error) & Socket_Error_Message (Error);\n    end Raise_Socket_Error;\n \n    ----------"}, {"sha": "625eb82754ef8286219546f0d60040bb24b3b39a", "filename": "gcc/ada/g-socthi-dummy.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fg-socthi-dummy.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fg-socthi-dummy.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-dummy.adb?ref=3e5b1f324798b549d61995939bf09e1728bacb95", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2012, AdaCore                     --\n+--                     Copyright (C) 2001-2013, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "47b5e6cfd7808333d3f3589b1550b67312f3cb43", "filename": "gcc/ada/g-socthi-dummy.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fg-socthi-dummy.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fg-socthi-dummy.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-dummy.ads?ref=3e5b1f324798b549d61995939bf09e1728bacb95", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2012, AdaCore                     --\n+--                     Copyright (C) 2001-2013, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "daeefbead00306db5be090e856fe2728d5411aae", "filename": "gcc/ada/g-socthi-mingw.adb", "status": "modified", "additions": 51, "deletions": 50, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fg-socthi-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fg-socthi-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-mingw.adb?ref=3e5b1f324798b549d61995939bf09e1728bacb95", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                    Copyright (C) 2001-2012, AdaCore                      --\n+--                     Copyright (C) 2001-2013, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -565,69 +565,70 @@ package body GNAT.Sockets.Thin is\n    -- Socket_Error_Message --\n    --------------------------\n \n-   function Socket_Error_Message\n-     (Errno : Integer) return C.Strings.chars_ptr\n-   is\n+   function Socket_Error_Message (Errno : Integer) return String is\n       use GNAT.Sockets.SOSC;\n \n+      Errm : C.Strings.chars_ptr;\n+\n    begin\n       case Errno is\n-         when EINTR =>           return Error_Messages (N_EINTR);\n-         when EBADF =>           return Error_Messages (N_EBADF);\n-         when EACCES =>          return Error_Messages (N_EACCES);\n-         when EFAULT =>          return Error_Messages (N_EFAULT);\n-         when EINVAL =>          return Error_Messages (N_EINVAL);\n-         when EMFILE =>          return Error_Messages (N_EMFILE);\n-         when EWOULDBLOCK =>     return Error_Messages (N_EWOULDBLOCK);\n-         when EINPROGRESS =>     return Error_Messages (N_EINPROGRESS);\n-         when EALREADY =>        return Error_Messages (N_EALREADY);\n-         when ENOTSOCK =>        return Error_Messages (N_ENOTSOCK);\n-         when EDESTADDRREQ =>    return Error_Messages (N_EDESTADDRREQ);\n-         when EMSGSIZE =>        return Error_Messages (N_EMSGSIZE);\n-         when EPROTOTYPE =>      return Error_Messages (N_EPROTOTYPE);\n-         when ENOPROTOOPT =>     return Error_Messages (N_ENOPROTOOPT);\n-         when EPROTONOSUPPORT => return Error_Messages (N_EPROTONOSUPPORT);\n-         when ESOCKTNOSUPPORT => return Error_Messages (N_ESOCKTNOSUPPORT);\n-         when EOPNOTSUPP =>      return Error_Messages (N_EOPNOTSUPP);\n-         when EPFNOSUPPORT =>    return Error_Messages (N_EPFNOSUPPORT);\n-         when EAFNOSUPPORT =>    return Error_Messages (N_EAFNOSUPPORT);\n-         when EADDRINUSE =>      return Error_Messages (N_EADDRINUSE);\n-         when EADDRNOTAVAIL =>   return Error_Messages (N_EADDRNOTAVAIL);\n-         when ENETDOWN =>        return Error_Messages (N_ENETDOWN);\n-         when ENETUNREACH =>     return Error_Messages (N_ENETUNREACH);\n-         when ENETRESET =>       return Error_Messages (N_ENETRESET);\n-         when ECONNABORTED =>    return Error_Messages (N_ECONNABORTED);\n-         when ECONNRESET =>      return Error_Messages (N_ECONNRESET);\n-         when ENOBUFS =>         return Error_Messages (N_ENOBUFS);\n-         when EISCONN =>         return Error_Messages (N_EISCONN);\n-         when ENOTCONN =>        return Error_Messages (N_ENOTCONN);\n-         when ESHUTDOWN =>       return Error_Messages (N_ESHUTDOWN);\n-         when ETOOMANYREFS =>    return Error_Messages (N_ETOOMANYREFS);\n-         when ETIMEDOUT =>       return Error_Messages (N_ETIMEDOUT);\n-         when ECONNREFUSED =>    return Error_Messages (N_ECONNREFUSED);\n-         when ELOOP =>           return Error_Messages (N_ELOOP);\n-         when ENAMETOOLONG =>    return Error_Messages (N_ENAMETOOLONG);\n-         when EHOSTDOWN =>       return Error_Messages (N_EHOSTDOWN);\n-         when EHOSTUNREACH =>    return Error_Messages (N_EHOSTUNREACH);\n+         when EINTR =>           Errm := N_EINTR;\n+         when EBADF =>           Errm := N_EBADF;\n+         when EACCES =>          Errm := N_EACCES;\n+         when EFAULT =>          Errm := N_EFAULT;\n+         when EINVAL =>          Errm := N_EINVAL;\n+         when EMFILE =>          Errm := N_EMFILE;\n+         when EWOULDBLOCK =>     Errm := N_EWOULDBLOCK;\n+         when EINPROGRESS =>     Errm := N_EINPROGRESS;\n+         when EALREADY =>        Errm := N_EALREADY;\n+         when ENOTSOCK =>        Errm := N_ENOTSOCK;\n+         when EDESTADDRREQ =>    Errm := N_EDESTADDRREQ;\n+         when EMSGSIZE =>        Errm := N_EMSGSIZE;\n+         when EPROTOTYPE =>      Errm := N_EPROTOTYPE;\n+         when ENOPROTOOPT =>     Errm := N_ENOPROTOOPT;\n+         when EPROTONOSUPPORT => Errm := N_EPROTONOSUPPORT;\n+         when ESOCKTNOSUPPORT => Errm := N_ESOCKTNOSUPPORT;\n+         when EOPNOTSUPP =>      Errm := N_EOPNOTSUPP;\n+         when EPFNOSUPPORT =>    Errm := N_EPFNOSUPPORT;\n+         when EAFNOSUPPORT =>    Errm := N_EAFNOSUPPORT;\n+         when EADDRINUSE =>      Errm := N_EADDRINUSE;\n+         when EADDRNOTAVAIL =>   Errm := N_EADDRNOTAVAIL;\n+         when ENETDOWN =>        Errm := N_ENETDOWN;\n+         when ENETUNREACH =>     Errm := N_ENETUNREACH;\n+         when ENETRESET =>       Errm := N_ENETRESET;\n+         when ECONNABORTED =>    Errm := N_ECONNABORTED;\n+         when ECONNRESET =>      Errm := N_ECONNRESET;\n+         when ENOBUFS =>         Errm := N_ENOBUFS;\n+         when EISCONN =>         Errm := N_EISCONN;\n+         when ENOTCONN =>        Errm := N_ENOTCONN;\n+         when ESHUTDOWN =>       Errm := N_ESHUTDOWN;\n+         when ETOOMANYREFS =>    Errm := N_ETOOMANYREFS;\n+         when ETIMEDOUT =>       Errm := N_ETIMEDOUT;\n+         when ECONNREFUSED =>    Errm := N_ECONNREFUSED;\n+         when ELOOP =>           Errm := N_ELOOP;\n+         when ENAMETOOLONG =>    Errm := N_ENAMETOOLONG;\n+         when EHOSTDOWN =>       Errm := N_EHOSTDOWN;\n+         when EHOSTUNREACH =>    Errm := N_EHOSTUNREACH;\n \n          --  Windows-specific error codes\n \n-         when WSASYSNOTREADY =>  return Error_Messages (N_WSASYSNOTREADY);\n+         when WSASYSNOTREADY =>  Errm := N_WSASYSNOTREADY;\n          when WSAVERNOTSUPPORTED =>\n-                                 return Error_Messages (N_WSAVERNOTSUPPORTED);\n+                                 Errm := N_WSAVERNOTSUPPORTED;\n          when WSANOTINITIALISED =>\n-                                 return Error_Messages (N_WSANOTINITIALISED);\n-         when WSAEDISCON =>      return Error_Messages (N_WSAEDISCON);\n+                                 Errm := N_WSANOTINITIALISED;\n+         when WSAEDISCON =>      Errm := N_WSAEDISCON;\n \n          --  h_errno values\n \n-         when HOST_NOT_FOUND =>  return Error_Messages (N_HOST_NOT_FOUND);\n-         when TRY_AGAIN =>       return Error_Messages (N_TRY_AGAIN);\n-         when NO_RECOVERY =>     return Error_Messages (N_NO_RECOVERY);\n-         when NO_DATA =>         return Error_Messages (N_NO_DATA);\n+         when HOST_NOT_FOUND =>  Errm := N_HOST_NOT_FOUND;\n+         when TRY_AGAIN =>       Errm := N_TRY_AGAIN;\n+         when NO_RECOVERY =>     Errm := N_NO_RECOVERY;\n+         when NO_DATA =>         Errm := N_NO_DATA;\n \n-         when others =>          return Error_Messages (N_OTHERS);\n+         when others =>          Errm := N_OTHERS;\n       end case;\n+      return Value (Errm);\n    end Socket_Error_Message;\n \n end GNAT.Sockets.Thin;"}, {"sha": "4a7c51fe3f3a9d18f9297c32c3e926ffa4beca39", "filename": "gcc/ada/g-socthi-mingw.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fg-socthi-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fg-socthi-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-mingw.ads?ref=3e5b1f324798b549d61995939bf09e1728bacb95", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2012, AdaCore                     --\n+--                     Copyright (C) 2001-2013, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -56,7 +56,7 @@ package GNAT.Sockets.Thin is\n    procedure Set_Socket_Errno (Errno : Integer);\n    --  Set last socket error number\n \n-   function Socket_Error_Message (Errno : Integer) return C.Strings.chars_ptr;\n+   function Socket_Error_Message (Errno : Integer) return String;\n    --  Returns the error message string for the error number Errno. If Errno is\n    --  not known, returns \"Unknown system error\".\n "}, {"sha": "5248c62f0666affc1afb7e4ff88f78f17d66e44c", "filename": "gcc/ada/g-socthi-vms.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fg-socthi-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fg-socthi-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vms.adb?ref=3e5b1f324798b549d61995939bf09e1728bacb95", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2012, AdaCore                     --\n+--                     Copyright (C) 2001-2013, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -500,8 +500,6 @@ package body GNAT.Sockets.Thin is\n    -- Socket_Error_Message --\n    --------------------------\n \n-   function Socket_Error_Message\n-     (Errno : Integer) return C.Strings.chars_ptr\n-   is separate;\n+   function Socket_Error_Message (Errno : Integer) return String is separate;\n \n end GNAT.Sockets.Thin;"}, {"sha": "9be7e4a198c481d088071c90486cbb5dba000486", "filename": "gcc/ada/g-socthi-vms.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fg-socthi-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fg-socthi-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vms.ads?ref=3e5b1f324798b549d61995939bf09e1728bacb95", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2012, AdaCore                     --\n+--                     Copyright (C) 2002-2013, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -59,7 +59,7 @@ package GNAT.Sockets.Thin is\n    procedure Set_Socket_Errno (Errno : Integer) renames GNAT.OS_Lib.Set_Errno;\n    --  Set last socket error number\n \n-   function Socket_Error_Message (Errno : Integer) return C.Strings.chars_ptr;\n+   function Socket_Error_Message (Errno : Integer) return String;\n    --  Returns the error message string for the error number Errno. If Errno is\n    --  not known, returns \"Unknown system error\".\n "}, {"sha": "689f450e6596f4306025db505d8876695ff5233a", "filename": "gcc/ada/g-socthi-vxworks.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fg-socthi-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fg-socthi-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vxworks.adb?ref=3e5b1f324798b549d61995939bf09e1728bacb95", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2012, AdaCore                     --\n+--                     Copyright (C) 2002-2013, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -485,8 +485,6 @@ package body GNAT.Sockets.Thin is\n    -- Socket_Error_Message --\n    --------------------------\n \n-   function Socket_Error_Message\n-     (Errno : Integer) return C.Strings.chars_ptr\n-   is separate;\n+   function Socket_Error_Message (Errno : Integer) return String is separate;\n \n end GNAT.Sockets.Thin;"}, {"sha": "4eb3a0f2230178b93f1e4131f0eaf418e12910c4", "filename": "gcc/ada/g-socthi-vxworks.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fg-socthi-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fg-socthi-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vxworks.ads?ref=3e5b1f324798b549d61995939bf09e1728bacb95", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2012, AdaCore                     --\n+--                     Copyright (C) 2002-2013, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -57,7 +57,7 @@ package GNAT.Sockets.Thin is\n    procedure Set_Socket_Errno (Errno : Integer) renames GNAT.OS_Lib.Set_Errno;\n    --  Set last socket error number\n \n-   function Socket_Error_Message (Errno : Integer) return C.Strings.chars_ptr;\n+   function Socket_Error_Message (Errno : Integer) return String;\n    --  Returns the error message string for the error number Errno. If Errno is\n    --  not known, returns \"Unknown system error\".\n "}, {"sha": "fe7119e3a561c9ea98668d187e0c90417a6b303b", "filename": "gcc/ada/g-socthi.adb", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fg-socthi.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fg-socthi.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi.adb?ref=3e5b1f324798b549d61995939bf09e1728bacb95", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2012, AdaCore                     --\n+--                     Copyright (C) 2001-2013, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -57,8 +57,7 @@ package body GNAT.Sockets.Thin is\n    --  non-blocking mode and we spend a period of time Quantum between\n    --  two attempts on a blocking operation.\n \n-   Unknown_System_Error : constant C.Strings.chars_ptr :=\n-                            C.Strings.New_String (\"Unknown system error\");\n+   Unknown_System_Error : constant String := \"Unknown system error\";\n \n    --  Comments required for following functions ???\n \n@@ -490,8 +489,6 @@ package body GNAT.Sockets.Thin is\n    -- Socket_Error_Message --\n    --------------------------\n \n-   function Socket_Error_Message\n-     (Errno : Integer) return C.Strings.chars_ptr\n-   is separate;\n+   function Socket_Error_Message (Errno : Integer) return String is separate;\n \n end GNAT.Sockets.Thin;"}, {"sha": "250f7a1c4e642071caaf80474fe40801458c4f4a", "filename": "gcc/ada/g-socthi.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fg-socthi.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fg-socthi.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi.ads?ref=3e5b1f324798b549d61995939bf09e1728bacb95", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2012, AdaCore                     --\n+--                     Copyright (C) 2001-2013, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -58,7 +58,7 @@ package GNAT.Sockets.Thin is\n    function Socket_Errno return Integer renames GNAT.OS_Lib.Errno;\n    --  Returns last socket error number\n \n-   function Socket_Error_Message (Errno : Integer) return C.Strings.chars_ptr;\n+   function Socket_Error_Message (Errno : Integer) return String;\n    --  Returns the error message string for the error number Errno. If Errno is\n    --  not known, returns \"Unknown system error\".\n "}, {"sha": "40e7c495af3d35de1703da3495badc38a7c79d60", "filename": "gcc/ada/g-stseme.adb", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fg-stseme.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fg-stseme.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-stseme.adb?ref=3e5b1f324798b549d61995939bf09e1728bacb95", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2007-2009, AdaCore                     --\n+--                     Copyright (C) 2007-2013, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,25 +34,15 @@\n --  since on that platform socket errno values are distinct from the system\n --  ones: there is a specific variant of this function in g-socthi-mingw.adb.\n \n-with System.CRTL.Runtime;\n-\n separate (GNAT.Sockets.Thin)\n \n --------------------------\n -- Socket_Error_Message --\n --------------------------\n \n function Socket_Error_Message\n-  (Errno : Integer) return C.Strings.chars_ptr\n+  (Errno : Integer) return String\n is\n-   use type Interfaces.C.Strings.chars_ptr;\n-   C_Msg : constant C.Strings.chars_ptr :=\n-             System.CRTL.Runtime.strerror (Errno);\n-\n begin\n-   if C_Msg = C.Strings.Null_Ptr then\n-      return Unknown_System_Error;\n-   else\n-      return C_Msg;\n-   end if;\n+   return Errno_Message (Errno, Default => Unknown_System_Error);\n end Socket_Error_Message;"}, {"sha": "cde3dd143daa5073ec94192d7b80c47d6cadd773", "filename": "gcc/ada/s-crtl.ads", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fs-crtl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fs-crtl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-crtl.ads?ref=3e5b1f324798b549d61995939bf09e1728bacb95", "patch": "@@ -67,13 +67,26 @@ package System.CRTL is\n    pragma Convention (C, Filename_Encoding);\n    --  Describes the filename's encoding\n \n-   function atoi (A : System.Address) return Integer;\n-   pragma Import (C, atoi, \"atoi\");\n+   --------------------\n+   -- GCC intrinsics --\n+   --------------------\n+\n+   --  The following functions are imported with convention Intrinsic so that\n+   --  we take advantage of back-end builtins if present (else we fall back\n+   --  to C library functions by the same names).\n \n    function strlen (A : System.Address) return size_t;\n    pragma Import (Intrinsic, strlen, \"strlen\");\n-   --  Import with convention Intrinsic so that we take advantage of the GCC\n-   --  builtin where available (and fall back to the library function if not).\n+\n+   procedure strncpy (dest, src : System.Address; n : size_t);\n+   pragma Import (Intrinsic, strncpy, \"strncpy\");\n+\n+   -------------------------------\n+   -- Other C runtime functions --\n+   -------------------------------\n+\n+   function atoi (A : System.Address) return Integer;\n+   pragma Import (C, atoi, \"atoi\");\n \n    procedure clearerr (stream : FILEs);\n    pragma Import (C, clearerr, \"clearerr\");"}, {"sha": "281e54fe5ed1d9ba47803b1fbc4ab06880793a0e", "filename": "gcc/ada/s-crtrun.ads", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d2191a0da9f40899da20933f008242f90262e0/gcc%2Fada%2Fs-crtrun.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d2191a0da9f40899da20933f008242f90262e0/gcc%2Fada%2Fs-crtrun.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-crtrun.ads?ref=c6d2191a0da9f40899da20933f008242f90262e0", "patch": "@@ -1,46 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                        GNAT RUN-TIME COMPONENTS                          --\n---                                                                          --\n---                  S Y S T E M . C R T L . R U N T I M E                   --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---             Copyright (C) 2009, Free Software Foundation, Inc.           --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This package provides the low level interface to the C runtime library\n---  (additional declarations for use in the Ada runtime only, not in the\n---  compiler itself).\n-\n-with Interfaces.C.Strings;\n-\n-package System.CRTL.Runtime is\n-   pragma Preelaborate;\n-\n-   subtype chars_ptr is Interfaces.C.Strings.chars_ptr;\n-\n-   function strerror (errno : int) return chars_ptr;\n-   pragma Import (C, strerror, \"strerror\");\n-\n-end System.CRTL.Runtime;"}, {"sha": "c166729838e06c14a1028a3389707530c13d95d6", "filename": "gcc/ada/s-fileio.adb", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fs-fileio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fs-fileio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fileio.adb?ref=3e5b1f324798b549d61995939bf09e1728bacb95", "patch": "@@ -33,10 +33,9 @@ with Ada.Finalization;  use Ada.Finalization;\n with Ada.IO_Exceptions; use Ada.IO_Exceptions;\n \n with Interfaces.C;\n-with Interfaces.C.Strings; use Interfaces.C.Strings;\n with Interfaces.C_Streams; use Interfaces.C_Streams;\n \n-with System.CRTL.Runtime;\n+with System.CRTL;\n with System.Case_Util;    use System.Case_Util;\n with System.OS_Lib;\n with System.Soft_Links;\n@@ -130,15 +129,9 @@ package body System.File_IO is\n    --  the access method from the Access_Method field of the FCB.\n \n    function Errno_Message\n-     (Errno : Integer := OS_Lib.Errno) return String;\n-   function Errno_Message\n-     (Name : String;\n+     (Name  : String;\n       Errno : Integer := OS_Lib.Errno) return String;\n-   --  Return a message suitable for \"raise ... with Errno_Message (...)\".\n-   --  Errno defaults to the current errno, but should be passed explicitly if\n-   --  there is significant code in between the call that sets errno and the\n-   --  call to Errno_Message, in case that code also sets errno. The version\n-   --  with Name includes that file name in the message.\n+   --  Return Errno_Message for Errno, with file name prepended\n \n    procedure Raise_Device_Error\n      (File  : AFCB_Ptr;\n@@ -241,7 +234,7 @@ package body System.File_IO is\n       Close_Status : int := 0;\n       Dup_Strm     : Boolean := False;\n       File         : AFCB_Ptr renames File_Ptr.all;\n-      Errno        : Integer;\n+      Errno        : Integer := 0;\n \n    begin\n       --  Take a task lock, to protect the global data value Open_Files\n@@ -351,7 +344,7 @@ package body System.File_IO is\n          --  we did the open, and we want to unlink the right file.\n \n          if unlink (Filename'Address) = -1 then\n-            raise Use_Error with Errno_Message;\n+            raise Use_Error with OS_Lib.Errno_Message;\n          end if;\n       end;\n    end Delete;\n@@ -383,23 +376,12 @@ package body System.File_IO is\n    -- Errno_Message --\n    -------------------\n \n-   function Errno_Message (Errno : Integer := OS_Lib.Errno) return String is\n-      Message : constant chars_ptr := CRTL.Runtime.strerror (Errno);\n-\n-   begin\n-      if Message = Null_Ptr then\n-         return \"errno =\" & Errno'Img;\n-      else\n-         return Value (Message);\n-      end if;\n-   end Errno_Message;\n-\n    function Errno_Message\n      (Name  : String;\n       Errno : Integer := OS_Lib.Errno) return String\n    is\n    begin\n-      return Name & \": \" & String'(Errno_Message (Errno));\n+      return Name & \": \" & OS_Lib.Errno_Message (Err => Errno);\n    end Errno_Message;\n \n    --------------\n@@ -1321,7 +1303,7 @@ package body System.File_IO is\n          clearerr (File.Stream);\n       end if;\n \n-      raise Device_Error with Errno_Message (Errno);\n+      raise Device_Error with OS_Lib.Errno_Message (Err => Errno);\n    end Raise_Device_Error;\n \n    --------------"}, {"sha": "0f1b4d115ef60077fe3b4cea8aa6d51a5125a12a", "filename": "gcc/ada/s-os_lib.adb", "status": "modified", "additions": 31, "deletions": 57, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fs-os_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e5b1f324798b549d61995939bf09e1728bacb95/gcc%2Fada%2Fs-os_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.adb?ref=3e5b1f324798b549d61995939bf09e1728bacb95", "patch": "@@ -40,6 +40,11 @@ with System.Soft_Links;\n \n package body System.OS_Lib is\n \n+   subtype size_t is CRTL.size_t;\n+\n+   procedure Strncpy (dest, src : System.Address; n : size_t)\n+     renames CRTL.strncpy;\n+\n    --  Imported procedures Dup and Dup2 are used in procedures Spawn and\n    --  Non_Blocking_Spawn.\n \n@@ -49,6 +54,13 @@ package body System.OS_Lib is\n    procedure Dup2 (Old_Fd, New_Fd : File_Descriptor);\n    pragma Import (C, Dup2, \"__gnat_dup2\");\n \n+   function Copy_Attributes\n+     (From, To : System.Address;\n+      Mode     : Integer) return Integer;\n+   pragma Import (C, Copy_Attributes, \"__gnat_copy_attribs\");\n+   --  Mode = 0 - copy only time stamps.\n+   --  Mode = 1 - copy time stamps and read/write/execute attributes\n+\n    On_Windows : constant Boolean := Directory_Separator = '\\';\n    --  An indication that we are on Windows. Used in Normalize_Pathname, to\n    --  deal with drive letters in the beginning of absolute paths.\n@@ -265,17 +277,17 @@ package body System.OS_Lib is\n    -----------\n \n    procedure Close (FD : File_Descriptor) is\n-      procedure C_Close (FD : File_Descriptor);\n-      pragma Import (C, C_Close, \"close\");\n+      use CRTL;\n+      Discard : constant int := close (int (FD));\n+      pragma Unreferenced (Discard);\n    begin\n-      C_Close (FD);\n+      null;\n    end Close;\n \n    procedure Close (FD : File_Descriptor; Status : out Boolean) is\n-      function C_Close (FD : File_Descriptor) return Integer;\n-      pragma Import (C, C_Close, \"close\");\n+      use CRTL;\n    begin\n-      Status := (C_Close (FD) = 0);\n+      Status := (close (int (FD)) = 0);\n    end Close;\n \n    ---------------\n@@ -442,14 +454,6 @@ package body System.OS_Lib is\n       -------------\n \n       procedure Copy_To (To_Name : String) is\n-\n-         function Copy_Attributes\n-           (From, To : System.Address;\n-            Mode     : Integer) return Integer;\n-         pragma Import (C, Copy_Attributes, \"__gnat_copy_attribs\");\n-         --  Mode = 0 - copy only time stamps.\n-         --  Mode = 1 - copy time stamps and read/write/execute attributes\n-\n          C_From : String (1 .. Name'Length + 1);\n          C_To   : String (1 .. To_Name'Length + 1);\n \n@@ -609,13 +613,6 @@ package body System.OS_Lib is\n    ----------------------\n \n    procedure Copy_Time_Stamps (Source, Dest : String; Success : out Boolean) is\n-      function Copy_Attributes\n-        (From, To : System.Address;\n-         Mode     : Integer) return Integer;\n-      pragma Import (C, Copy_Attributes, \"__gnat_copy_attribs\");\n-      --  Mode = 0 - copy only time stamps.\n-      --  Mode = 1 - copy time stamps and read/write/execute attributes\n-\n    begin\n       if Is_Regular_File (Source) and then Is_Writable_File (Dest) then\n          declare\n@@ -976,9 +973,6 @@ package body System.OS_Lib is\n       procedure Get_Suffix_Ptr (Length, Ptr : Address);\n       pragma Import (C, Get_Suffix_Ptr, \"__gnat_get_debuggable_suffix_ptr\");\n \n-      procedure Strncpy (Astring_Addr, Cstring : Address; N : Integer);\n-      pragma Import (C, Strncpy, \"strncpy\");\n-\n       Suffix_Ptr    : Address;\n       Suffix_Length : Integer;\n       Result        : String_Access;\n@@ -988,7 +982,7 @@ package body System.OS_Lib is\n       Result := new String (1 .. Suffix_Length);\n \n       if Suffix_Length > 0 then\n-         Strncpy (Result.all'Address, Suffix_Ptr, Suffix_Length);\n+         Strncpy (Result.all'Address, Suffix_Ptr, size_t (Suffix_Length));\n       end if;\n \n       return Result;\n@@ -1002,9 +996,6 @@ package body System.OS_Lib is\n       procedure Get_Suffix_Ptr (Length, Ptr : Address);\n       pragma Import (C, Get_Suffix_Ptr, \"__gnat_get_executable_suffix_ptr\");\n \n-      procedure Strncpy (Astring_Addr, Cstring : Address; N : Integer);\n-      pragma Import (C, Strncpy, \"strncpy\");\n-\n       Suffix_Ptr    : Address;\n       Suffix_Length : Integer;\n       Result        : String_Access;\n@@ -1014,7 +1005,7 @@ package body System.OS_Lib is\n       Result := new String (1 .. Suffix_Length);\n \n       if Suffix_Length > 0 then\n-         Strncpy (Result.all'Address, Suffix_Ptr, Suffix_Length);\n+         Strncpy (Result.all'Address, Suffix_Ptr, size_t (Suffix_Length));\n       end if;\n \n       return Result;\n@@ -1028,9 +1019,6 @@ package body System.OS_Lib is\n       procedure Get_Suffix_Ptr (Length, Ptr : Address);\n       pragma Import (C, Get_Suffix_Ptr, \"__gnat_get_object_suffix_ptr\");\n \n-      procedure Strncpy (Astring_Addr, Cstring : Address; N : Integer);\n-      pragma Import (C, Strncpy, \"strncpy\");\n-\n       Suffix_Ptr    : Address;\n       Suffix_Length : Integer;\n       Result        : String_Access;\n@@ -1040,7 +1028,7 @@ package body System.OS_Lib is\n       Result := new String (1 .. Suffix_Length);\n \n       if Suffix_Length > 0 then\n-         Strncpy (Result.all'Address, Suffix_Ptr, Suffix_Length);\n+         Strncpy (Result.all'Address, Suffix_Ptr, size_t (Suffix_Length));\n       end if;\n \n       return Result;\n@@ -1055,9 +1043,6 @@ package body System.OS_Lib is\n       pragma Import\n         (C, Target_Exec_Ext_Ptr, \"__gnat_target_debuggable_extension\");\n \n-      procedure Strncpy (Astring_Addr, Cstring : Address; N : Integer);\n-      pragma Import (C, Strncpy, \"strncpy\");\n-\n       Suffix_Length : Integer;\n       Result        : String_Access;\n \n@@ -1066,7 +1051,8 @@ package body System.OS_Lib is\n       Result := new String (1 .. Suffix_Length);\n \n       if Suffix_Length > 0 then\n-         Strncpy (Result.all'Address, Target_Exec_Ext_Ptr, Suffix_Length);\n+         Strncpy\n+           (Result.all'Address, Target_Exec_Ext_Ptr, size_t (Suffix_Length));\n       end if;\n \n       return Result;\n@@ -1081,9 +1067,6 @@ package body System.OS_Lib is\n       pragma Import\n         (C, Target_Exec_Ext_Ptr, \"__gnat_target_executable_extension\");\n \n-      procedure Strncpy (Astring_Addr, Cstring : Address; N : Integer);\n-      pragma Import (C, Strncpy, \"strncpy\");\n-\n       Suffix_Length : Integer;\n       Result        : String_Access;\n \n@@ -1092,7 +1075,8 @@ package body System.OS_Lib is\n       Result := new String (1 .. Suffix_Length);\n \n       if Suffix_Length > 0 then\n-         Strncpy (Result.all'Address, Target_Exec_Ext_Ptr, Suffix_Length);\n+         Strncpy\n+           (Result.all'Address, Target_Exec_Ext_Ptr, size_t (Suffix_Length));\n       end if;\n \n       return Result;\n@@ -1107,9 +1091,6 @@ package body System.OS_Lib is\n       pragma Import\n         (C, Target_Object_Ext_Ptr, \"__gnat_target_object_extension\");\n \n-      procedure Strncpy (Astring_Addr, Cstring : Address; N : Integer);\n-      pragma Import (C, Strncpy, \"strncpy\");\n-\n       Suffix_Length : Integer;\n       Result        : String_Access;\n \n@@ -1118,7 +1099,8 @@ package body System.OS_Lib is\n       Result := new String (1 .. Suffix_Length);\n \n       if Suffix_Length > 0 then\n-         Strncpy (Result.all'Address, Target_Object_Ext_Ptr, Suffix_Length);\n+         Strncpy\n+           (Result.all'Address, Target_Object_Ext_Ptr, size_t (Suffix_Length));\n       end if;\n \n       return Result;\n@@ -1132,9 +1114,6 @@ package body System.OS_Lib is\n       procedure Get_Env_Value_Ptr (Name, Length, Ptr : Address);\n       pragma Import (C, Get_Env_Value_Ptr, \"__gnat_getenv\");\n \n-      procedure Strncpy (Astring_Addr, Cstring : Address; N : Integer);\n-      pragma Import (C, Strncpy, \"strncpy\");\n-\n       Env_Value_Ptr    : aliased Address;\n       Env_Value_Length : aliased Integer;\n       F_Name           : aliased String (1 .. Name'Length + 1);\n@@ -1150,7 +1129,8 @@ package body System.OS_Lib is\n       Result := new String (1 .. Env_Value_Length);\n \n       if Env_Value_Length > 0 then\n-         Strncpy (Result.all'Address, Env_Value_Ptr, Env_Value_Length);\n+         Strncpy\n+           (Result.all'Address, Env_Value_Ptr, size_t (Env_Value_Length));\n       end if;\n \n       return Result;\n@@ -1456,9 +1436,6 @@ package body System.OS_Lib is\n       function Locate_Exec_On_Path (C_Exec_Name : Address) return Address;\n       pragma Import (C, Locate_Exec_On_Path, \"__gnat_locate_exec_on_path\");\n \n-      procedure Free (Ptr : System.Address);\n-      pragma Import (C, Free, \"free\");\n-\n       C_Exec_Name  : String (1 .. Exec_Name'Length + 1);\n       Path_Addr    : Address;\n       Path_Len     : Integer;\n@@ -1476,7 +1453,7 @@ package body System.OS_Lib is\n \n       else\n          Result := To_Path_String_Access (Path_Addr, Path_Len);\n-         Free (Path_Addr);\n+         CRTL.free (Path_Addr);\n \n          --  Always return an absolute path name\n \n@@ -1506,9 +1483,6 @@ package body System.OS_Lib is\n         (C_File_Name, Path_Val : Address) return Address;\n       pragma Import (C, Locate_Regular_File, \"__gnat_locate_regular_file\");\n \n-      procedure Free (Ptr : System.Address);\n-      pragma Import (C, Free, \"free\");\n-\n       Path_Addr    : Address;\n       Path_Len     : Integer;\n       Result       : String_Access;\n@@ -1522,7 +1496,7 @@ package body System.OS_Lib is\n \n       else\n          Result := To_Path_String_Access (Path_Addr, Path_Len);\n-         Free (Path_Addr);\n+         CRTL.free (Path_Addr);\n          return Result;\n       end if;\n    end Locate_Regular_File;"}]}