{"sha": "36e170203e7f09f6c23c7378f835e21c402b57c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZlMTcwMjAzZTdmMDlmNmMyM2M3Mzc4ZjgzNWUyMWM0MDJiNTdjOQ==", "commit": {"author": {"name": "Venkataramanan Kumar", "email": "venkataramanan.kumar@linaro.org", "date": "2014-04-23T17:01:39Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2014-04-23T17:01:39Z"}, "message": "[AARCH64] Use standard patterns for stack protection.\n\nFrom-SVN: r209712", "tree": {"sha": "43e225956b580d8bdb05bec58ad22950220fb702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43e225956b580d8bdb05bec58ad22950220fb702"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36e170203e7f09f6c23c7378f835e21c402b57c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36e170203e7f09f6c23c7378f835e21c402b57c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36e170203e7f09f6c23c7378f835e21c402b57c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36e170203e7f09f6c23c7378f835e21c402b57c9/comments", "author": null, "committer": null, "parents": [{"sha": "57b77d46b6a45f8d7ef8fd82cfddfa1aafce8cab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b77d46b6a45f8d7ef8fd82cfddfa1aafce8cab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57b77d46b6a45f8d7ef8fd82cfddfa1aafce8cab"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "638c0da2d295289b1c6ee17b323afd2d5a788721", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e170203e7f09f6c23c7378f835e21c402b57c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e170203e7f09f6c23c7378f835e21c402b57c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36e170203e7f09f6c23c7378f835e21c402b57c9", "patch": "@@ -1,3 +1,9 @@\n+2014-04-23 Venkataramanan Kumar  <venkataramanan.kumar@linaro.org>\n+\n+\t* config/aarch64/aarch64.md (stack_protect_set, stack_protect_test)\n+\t(stack_protect_set_<mode>, stack_protect_test_<mode>): Add\n+\tmachine descriptions for Stack Smashing Protector.\n+\n 2014-04-23  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* aarch64.md (<optab>_rol<mode>3): New pattern."}, {"sha": "7965db4c9c79c2e5b400b3639df6e2ef15b288e6", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36e170203e7f09f6c23c7378f835e21c402b57c9/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36e170203e7f09f6c23c7378f835e21c402b57c9/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=36e170203e7f09f6c23c7378f835e21c402b57c9", "patch": "@@ -103,6 +103,8 @@\n     UNSPEC_USHL_2S\n     UNSPEC_USHR64\n     UNSPEC_VSTRUCTDUMMY\n+    UNSPEC_SP_SET\n+    UNSPEC_SP_TEST\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -3800,6 +3802,67 @@\n   DONE;\n })\n \n+;; Named patterns for stack smashing protection.\n+(define_expand \"stack_protect_set\"\n+  [(match_operand 0 \"memory_operand\")\n+   (match_operand 1 \"memory_operand\")]\n+  \"\"\n+{\n+  enum machine_mode mode = GET_MODE (operands[0]);\n+\n+  emit_insn ((mode == DImode\n+\t      ? gen_stack_protect_set_di\n+\t      : gen_stack_protect_set_si) (operands[0], operands[1]));\n+  DONE;\n+})\n+\n+(define_insn \"stack_protect_set_<mode>\"\n+  [(set (match_operand:PTR 0 \"memory_operand\" \"=m\")\n+\t(unspec:PTR [(match_operand:PTR 1 \"memory_operand\" \"m\")]\n+\t UNSPEC_SP_SET))\n+   (set (match_scratch:PTR 2 \"=&r\") (const_int 0))]\n+  \"\"\n+  \"ldr\\\\t%x2, %1\\;str\\\\t%x2, %0\\;mov\\t%x2,0\"\n+  [(set_attr \"length\" \"12\")\n+   (set_attr \"type\" \"multiple\")])\n+\n+(define_expand \"stack_protect_test\"\n+  [(match_operand 0 \"memory_operand\")\n+   (match_operand 1 \"memory_operand\")\n+   (match_operand 2)]\n+  \"\"\n+{\n+\n+  rtx result = gen_reg_rtx (Pmode);\n+\n+  enum machine_mode mode = GET_MODE (operands[0]);\n+\n+  emit_insn ((mode == DImode\n+\t      ? gen_stack_protect_test_di\n+\t      : gen_stack_protect_test_si) (result,\n+\t\t\t\t\t    operands[0],\n+\t\t\t\t\t    operands[1]));\n+\n+  if (mode == DImode)\n+    emit_jump_insn (gen_cbranchdi4 (gen_rtx_EQ (VOIDmode, result, const0_rtx),\n+\t\t\t\t    result, const0_rtx, operands[2]));\n+  else\n+    emit_jump_insn (gen_cbranchsi4 (gen_rtx_EQ (VOIDmode, result, const0_rtx),\n+\t\t\t\t    result, const0_rtx, operands[2]));\n+  DONE;\n+})\n+\n+(define_insn \"stack_protect_test_<mode>\"\n+  [(set (match_operand:PTR 0 \"register_operand\")\n+\t(unspec:PTR [(match_operand:PTR 1 \"memory_operand\" \"m\")\n+\t\t     (match_operand:PTR 2 \"memory_operand\" \"m\")]\n+\t UNSPEC_SP_TEST))\n+   (clobber (match_scratch:PTR 3 \"=&r\"))]\n+  \"\"\n+  \"ldr\\t%x3, %x1\\;ldr\\t%x0, %x2\\;eor\\t%x0, %x3, %x0\"\n+  [(set_attr \"length\" \"12\")\n+   (set_attr \"type\" \"multiple\")])\n+\n ;; AdvSIMD Stuff\n (include \"aarch64-simd.md\")\n "}]}