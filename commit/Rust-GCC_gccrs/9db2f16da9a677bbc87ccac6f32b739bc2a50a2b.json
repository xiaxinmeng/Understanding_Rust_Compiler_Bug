{"sha": "9db2f16da9a677bbc87ccac6f32b739bc2a50a2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRiMmYxNmRhOWE2NzdiYmM4N2NjYWM2ZjMyYjczOWJjMmE1MGEyYg==", "commit": {"author": {"name": "Adrian Straetling", "email": "straetling@de.ibm.com", "date": "2005-05-09T17:04:41Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-05-09T17:04:41Z"}, "message": "s390.md: (\"GPR\", \"P\"): New mode macros.\n\n2005-05-09  Adrian Straetling  <straetling@de.ibm.com>\n\n\t* config/s390/s390.md: (\"GPR\", \"P\"): New mode macros.\n\t(\"cmpdi\", \"cmpsi\"): Merge.\n\t(\"strlendi\", \"strlensi\"): Merge.\n\t(\"*strlendi\", \"*strlensi\"): Merge.\n\t(\"movmemdi\", \"movmemsi\"): Merge.\n\t(\"clrmemdi\", \"clrmemsi\"): Merge.\n\nFrom-SVN: r99450", "tree": {"sha": "b8db3aa7bddff7302a974a4f38d921c757a526ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8db3aa7bddff7302a974a4f38d921c757a526ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9db2f16da9a677bbc87ccac6f32b739bc2a50a2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9db2f16da9a677bbc87ccac6f32b739bc2a50a2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9db2f16da9a677bbc87ccac6f32b739bc2a50a2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9db2f16da9a677bbc87ccac6f32b739bc2a50a2b/comments", "author": null, "committer": null, "parents": [{"sha": "f52c81dd6b355644a61421f736a6ba167fa93668", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f52c81dd6b355644a61421f736a6ba167fa93668", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f52c81dd6b355644a61421f736a6ba167fa93668"}], "stats": {"total": 122, "additions": 39, "deletions": 83}, "files": [{"sha": "b6ed448d5384504958939277a1bb58ce6146b255", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9db2f16da9a677bbc87ccac6f32b739bc2a50a2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9db2f16da9a677bbc87ccac6f32b739bc2a50a2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9db2f16da9a677bbc87ccac6f32b739bc2a50a2b", "patch": "@@ -1,3 +1,13 @@\n+\n+2005-05-09  Adrian Straetling  <straetling@de.ibm.com>\n+\n+\t* config/s390/s390.md: (\"GPR\", \"P\"): New mode macros.\n+\t(\"cmpdi\", \"cmpsi\"): Merge.\n+\t(\"strlendi\", \"strlensi\"): Merge.\n+\t(\"*strlendi\", \"*strlensi\"): Merge.\n+\t(\"movmemdi\", \"movmemsi\"): Merge.\n+\t(\"clrmemdi\", \"clrmemsi\"): Merge.\n+\n 2005-05-09  Adrian Straetling  <straetling@de.ibm.com>\n \n \t* config/s390/s390.md: (\"HQI\"): New mode macro."}, {"sha": "60084682829057a4bf904717244ded342a0298f3", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 29, "deletions": 83, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9db2f16da9a677bbc87ccac6f32b739bc2a50a2b/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9db2f16da9a677bbc87ccac6f32b739bc2a50a2b/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=9db2f16da9a677bbc87ccac6f32b739bc2a50a2b", "patch": "@@ -235,6 +235,14 @@\n \n ;; Macros\n \n+;; This mode macro allows 31-bit and 64-bit GPR patterns to be generated\n+;; from the same template.\n+(define_mode_macro GPR [(DI \"TARGET_64BIT\") SI])\n+\n+;; This mode macro allows :P to be used for patterns that operate on\n+;; pointer-sized quantities.  Exactly one of the two alternatives will match.\n+(define_mode_macro P [(DI \"TARGET_64BIT\") (SI \"!TARGET_64BIT\")])\n+\n ;; This mode macro allows the QI and HI patterns to be defined from\n ;; the same template.\n (define_mode_macro HQI [HI QI])\n@@ -256,21 +264,10 @@\n ;;- Compare instructions.\n ;;\n \n-(define_expand \"cmpdi\"\n+(define_expand \"cmp<mode>\"\n   [(set (reg:CC 33)\n-        (compare:CC (match_operand:DI 0 \"register_operand\" \"\")\n-                    (match_operand:DI 1 \"general_operand\" \"\")))]\n-  \"TARGET_64BIT\"\n-{\n-  s390_compare_op0 = operands[0];\n-  s390_compare_op1 = operands[1];\n-  DONE;\n-})\n-\n-(define_expand \"cmpsi\"\n-  [(set (reg:CC 33)\n-        (compare:CC (match_operand:SI 0 \"register_operand\" \"\")\n-                    (match_operand:SI 1 \"general_operand\" \"\")))]\n+        (compare:CC (match_operand:GPR 0 \"register_operand\" \"\")\n+                    (match_operand:GPR 1 \"general_operand\" \"\")))]\n   \"\"\n {\n   s390_compare_op0 = operands[0];\n@@ -1731,72 +1728,37 @@\n ; strlenM instruction pattern(s).\n ;\n \n-(define_expand \"strlendi\"\n+(define_expand \"strlen<mode>\"\n   [(set (reg:QI 0) (match_operand:QI 2 \"immediate_operand\" \"\"))\n    (parallel\n     [(set (match_dup 4)\n-\t  (unspec:DI [(const_int 0)\n+\t  (unspec:P [(const_int 0)\n \t\t      (match_operand:BLK 1 \"memory_operand\" \"\")\n \t\t      (reg:QI 0)\n \t\t      (match_operand 3 \"immediate_operand\" \"\")] UNSPEC_SRST))\n-     (clobber (scratch:DI))\n+     (clobber (scratch:P))\n      (clobber (reg:CC 33))])\n    (parallel\n-    [(set (match_operand:DI 0 \"register_operand\" \"\")\n-          (minus:DI (match_dup 4) (match_dup 5)))\n+    [(set (match_operand:P 0 \"register_operand\" \"\")\n+          (minus:P (match_dup 4) (match_dup 5)))\n      (clobber (reg:CC 33))])]\n-  \"TARGET_64BIT\"\n-{\n-  operands[4] = gen_reg_rtx (DImode);\n-  operands[5] = gen_reg_rtx (DImode);\n-  emit_move_insn (operands[5], force_operand (XEXP (operands[1], 0), NULL_RTX));\n-  operands[1] = replace_equiv_address (operands[1], operands[5]);\n-})\n-\n-(define_insn \"*strlendi\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n-\t(unspec:DI [(match_operand:DI 2 \"general_operand\" \"0\")\n-\t\t    (mem:BLK (match_operand:DI 3 \"register_operand\" \"1\"))\n-\t\t    (reg:QI 0)\n-\t\t    (match_operand 4 \"immediate_operand\" \"\")] UNSPEC_SRST))\n-   (clobber (match_scratch:DI 1 \"=a\"))\n-   (clobber (reg:CC 33))]\n-  \"TARGET_64BIT\"\n-  \"srst\\t%0,%1\\;jo\\t.-4\"\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"type\" \"vs\")])\n-\n-(define_expand \"strlensi\"\n-  [(set (reg:QI 0) (match_operand:QI 2 \"immediate_operand\" \"\"))\n-   (parallel\n-    [(set (match_dup 4)\n-\t  (unspec:SI [(const_int 0)\n-\t\t      (match_operand:BLK 1 \"memory_operand\" \"\")\n-\t\t      (reg:QI 0)\n-\t\t      (match_operand 3 \"immediate_operand\" \"\")] UNSPEC_SRST))\n-     (clobber (scratch:SI))\n-     (clobber (reg:CC 33))])\n-   (parallel\n-    [(set (match_operand:SI 0 \"register_operand\" \"\")\n-          (minus:SI (match_dup 4) (match_dup 5)))\n-     (clobber (reg:CC 33))])]\n-  \"!TARGET_64BIT\"\n+  \"\"\n {\n-  operands[4] = gen_reg_rtx (SImode);\n-  operands[5] = gen_reg_rtx (SImode);\n+  operands[4] = gen_reg_rtx (Pmode);\n+  operands[5] = gen_reg_rtx (Pmode);\n   emit_move_insn (operands[5], force_operand (XEXP (operands[1], 0), NULL_RTX));\n   operands[1] = replace_equiv_address (operands[1], operands[5]);\n })\n \n-(define_insn \"*strlensi\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n-\t(unspec:SI [(match_operand:SI 2 \"general_operand\" \"0\")\n-\t\t    (mem:BLK (match_operand:SI 3 \"register_operand\" \"1\"))\n+(define_insn \"*strlen<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=a\")\n+\t(unspec:P [(match_operand:P 2 \"general_operand\" \"0\")\n+\t\t    (mem:BLK (match_operand:P 3 \"register_operand\" \"1\"))\n \t\t    (reg:QI 0)\n \t\t    (match_operand 4 \"immediate_operand\" \"\")] UNSPEC_SRST))\n-   (clobber (match_scratch:SI 1 \"=a\"))\n+   (clobber (match_scratch:P 1 \"=a\"))\n    (clobber (reg:CC 33))]\n-  \"!TARGET_64BIT\"\n+  \"\"\n   \"srst\\t%0,%1\\;jo\\t.-4\"\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"vs\")])\n@@ -1805,18 +1767,10 @@\n ; movmemM instruction pattern(s).\n ;\n \n-(define_expand \"movmemdi\"\n+(define_expand \"movmem<mode>\"\n   [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n         (match_operand:BLK 1 \"memory_operand\" \"\"))\n-   (use (match_operand:DI 2 \"general_operand\" \"\"))\n-   (match_operand 3 \"\" \"\")]\n-  \"TARGET_64BIT\"\n-  \"s390_expand_movmem (operands[0], operands[1], operands[2]); DONE;\")\n-\n-(define_expand \"movmemsi\"\n-  [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n-        (match_operand:BLK 1 \"memory_operand\" \"\"))\n-   (use (match_operand:SI 2 \"general_operand\" \"\"))\n+   (use (match_operand:GPR 2 \"general_operand\" \"\"))\n    (match_operand 3 \"\" \"\")]\n   \"\"\n   \"s390_expand_movmem (operands[0], operands[1], operands[2]); DONE;\")\n@@ -1951,18 +1905,10 @@\n ; clrmemM instruction pattern(s).\n ;\n \n-(define_expand \"clrmemdi\"\n-  [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n-        (const_int 0))\n-   (use (match_operand:DI 1 \"general_operand\" \"\"))\n-   (match_operand 2 \"\" \"\")]\n-  \"TARGET_64BIT\"\n-  \"s390_expand_clrmem (operands[0], operands[1]); DONE;\")\n-\n-(define_expand \"clrmemsi\"\n+(define_expand \"clrmem<mode>\"\n   [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n         (const_int 0))\n-   (use (match_operand:SI 1 \"general_operand\" \"\"))\n+   (use (match_operand:GPR 1 \"general_operand\" \"\"))\n    (match_operand 2 \"\" \"\")]\n   \"\"\n   \"s390_expand_clrmem (operands[0], operands[1]); DONE;\")"}]}