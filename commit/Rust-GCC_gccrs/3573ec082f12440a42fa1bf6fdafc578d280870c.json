{"sha": "3573ec082f12440a42fa1bf6fdafc578d280870c", "node_id": "C_kwDOANBUbNoAKDM1NzNlYzA4MmYxMjQ0MGE0MmZhMWJmNmZkYWZjNTc4ZDI4MDg3MGM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-10-21T14:39:52Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-12-04T21:00:45Z"}, "message": "Add capture tracking to the type info for closures", "tree": {"sha": "2ce6527f0f43d80eb645d8ba0e7405e94defe545", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ce6527f0f43d80eb645d8ba0e7405e94defe545"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3573ec082f12440a42fa1bf6fdafc578d280870c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3573ec082f12440a42fa1bf6fdafc578d280870c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3573ec082f12440a42fa1bf6fdafc578d280870c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3573ec082f12440a42fa1bf6fdafc578d280870c/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5c354de73ddccb7738778c1e013d42b96aeb048", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5c354de73ddccb7738778c1e013d42b96aeb048", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5c354de73ddccb7738778c1e013d42b96aeb048"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "7ea1bd900ba6c7e3b16008212a597f70b0a4c302", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3573ec082f12440a42fa1bf6fdafc578d280870c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3573ec082f12440a42fa1bf6fdafc578d280870c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc?ref=3573ec082f12440a42fa1bf6fdafc578d280870c", "patch": "@@ -1492,8 +1492,10 @@ TypeCheckExpr::visit (HIR::ClosureExpr &expr)\n \t\t expr.get_locus ());\n \n   // generate the closure type\n+  NodeId closure_node_id = expr.get_mappings ().get_nodeid ();\n+  const std::set<NodeId> &captures = resolver->get_captures (closure_node_id);\n   infered = new TyTy::ClosureType (ref, id, ident, closure_args, result_type,\n-\t\t\t\t   subst_refs);\n+\t\t\t\t   subst_refs, captures);\n \n   // FIXME\n   // all closures automatically inherit the appropriate fn trait. Lets just"}, {"sha": "86f40af0fbe56472964d92e641826ef752e2cb2b", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3573ec082f12440a42fa1bf6fdafc578d280870c/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3573ec082f12440a42fa1bf6fdafc578d280870c/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=3573ec082f12440a42fa1bf6fdafc578d280870c", "patch": "@@ -1675,8 +1675,7 @@ std::string\n ClosureType::as_string () const\n {\n   std::string params_buf = parameters->as_string ();\n-  return \"|\" + params_buf + \"| {\" + result_type.get_tyty ()->as_string ()\n-\t + \"} {\" + raw_bounds_as_string () + \"}\";\n+  return \"|\" + params_buf + \"| {\" + result_type.get_tyty ()->as_string () + \"}\";\n }\n \n BaseType *\n@@ -1714,7 +1713,7 @@ ClosureType::clone () const\n {\n   return new ClosureType (get_ref (), get_ty_ref (), ident, id,\n \t\t\t  (TyTy::TupleType *) parameters->clone (), result_type,\n-\t\t\t  clone_substs (), get_combined_refs (),\n+\t\t\t  clone_substs (), captures, get_combined_refs (),\n \t\t\t  specified_bounds);\n }\n "}, {"sha": "8b39e5138fb7c29093fc61965a01171409aead0f", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3573ec082f12440a42fa1bf6fdafc578d280870c/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3573ec082f12440a42fa1bf6fdafc578d280870c/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=3573ec082f12440a42fa1bf6fdafc578d280870c", "patch": "@@ -1628,13 +1628,15 @@ class ClosureType : public BaseType, public SubstitutionRef\n   ClosureType (HirId ref, DefId id, RustIdent ident,\n \t       TyTy::TupleType *parameters, TyVar result_type,\n \t       std::vector<SubstitutionParamMapping> subst_refs,\n+\t       std::set<NodeId> captures,\n \t       std::set<HirId> refs = std::set<HirId> (),\n \t       std::vector<TypeBoundPredicate> specified_bounds\n \t       = std::vector<TypeBoundPredicate> ())\n     : BaseType (ref, ref, TypeKind::CLOSURE, ident, refs),\n       SubstitutionRef (std::move (subst_refs),\n \t\t       SubstitutionArgumentMappings::error ()),\n-      parameters (parameters), result_type (std::move (result_type)), id (id)\n+      parameters (parameters), result_type (std::move (result_type)), id (id),\n+      captures (captures)\n   {\n     LocalDefId local_def_id = id.localDefId;\n     rust_assert (local_def_id != UNKNOWN_LOCAL_DEFID);\n@@ -1644,13 +1646,15 @@ class ClosureType : public BaseType, public SubstitutionRef\n   ClosureType (HirId ref, HirId ty_ref, RustIdent ident, DefId id,\n \t       TyTy::TupleType *parameters, TyVar result_type,\n \t       std::vector<SubstitutionParamMapping> subst_refs,\n+\t       std::set<NodeId> captures,\n \t       std::set<HirId> refs = std::set<HirId> (),\n \t       std::vector<TypeBoundPredicate> specified_bounds\n \t       = std::vector<TypeBoundPredicate> ())\n     : BaseType (ref, ty_ref, TypeKind::CLOSURE, ident, refs),\n       SubstitutionRef (std::move (subst_refs),\n \t\t       SubstitutionArgumentMappings::error ()),\n-      parameters (parameters), result_type (std::move (result_type)), id (id)\n+      parameters (parameters), result_type (std::move (result_type)), id (id),\n+      captures (captures)\n   {\n     LocalDefId local_def_id = id.localDefId;\n     rust_assert (local_def_id != UNKNOWN_LOCAL_DEFID);\n@@ -1699,10 +1703,13 @@ class ClosureType : public BaseType, public SubstitutionRef\n \n   void setup_fn_once_output () const;\n \n+  const std::set<NodeId> &get_captures () const { return captures; }\n+\n private:\n   TyTy::TupleType *parameters;\n   TyVar result_type;\n   DefId id;\n+  std::set<NodeId> captures;\n };\n \n class ArrayType : public BaseType"}]}