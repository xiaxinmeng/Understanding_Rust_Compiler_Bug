{"sha": "35e66bd1d966810d0939fb61573d49a79467d694", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVlNjZiZDFkOTY2ODEwZDA5MzlmYjYxNTczZDQ5YTc5NDY3ZDY5NA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-08-23T22:33:11Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-08-23T22:33:11Z"}, "message": "(twoval_comparison_p): Add new arg, SAVE_P; all callers changed.\n\n(fold, case EQ_EXPR): If SAVE_P is true after call to twoval_comparison_p\ncall save_expr on the expression we make.\n\nFrom-SVN: r5194", "tree": {"sha": "08b2b5f0bd4d883a42642af7b8055dd51725468c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08b2b5f0bd4d883a42642af7b8055dd51725468c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35e66bd1d966810d0939fb61573d49a79467d694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35e66bd1d966810d0939fb61573d49a79467d694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35e66bd1d966810d0939fb61573d49a79467d694", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35e66bd1d966810d0939fb61573d49a79467d694/comments", "author": null, "committer": null, "parents": [{"sha": "6bf1675f909d3e671c165dd66c4328bb8cbd342c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bf1675f909d3e671c165dd66c4328bb8cbd342c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bf1675f909d3e671c165dd66c4328bb8cbd342c"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "81b938813e80708c2c445487755e4bb9b7030a73", "filename": "gcc/fold-const.c", "status": "modified", "additions": 32, "deletions": 14, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35e66bd1d966810d0939fb61573d49a79467d694/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35e66bd1d966810d0939fb61573d49a79467d694/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=35e66bd1d966810d0939fb61573d49a79467d694", "patch": "@@ -61,7 +61,7 @@ static tree fold_convert PROTO((tree, tree));\n static enum tree_code invert_tree_comparison PROTO((enum tree_code));\n static enum tree_code swap_tree_comparison PROTO((enum tree_code));\n static int operand_equal_for_comparison_p PROTO((tree, tree, tree));\n-static int twoval_comparison_p PROTO((tree, tree *, tree *));\n+static int twoval_comparison_p PROTO((tree, tree *, tree *, int *));\n static tree eval_subst\tPROTO((tree, tree, tree, tree, tree));\n static tree omit_one_operand PROTO((tree, tree, tree));\n static tree distribute_bit_expr PROTO((enum tree_code, tree, tree, tree));\n@@ -1900,46 +1900,59 @@ operand_equal_for_comparison_p (arg0, arg1, other)\n    two different values, which will be stored in *CVAL1 and *CVAL2; if\n    they are non-zero it means that some operands have already been found.\n    No variables may be used anywhere else in the expression except in the\n-   comparisons.\n+   comparisons.  If SAVE_P is true it means we removed a SAVE_EXPR around\n+   the expression and save_expr needs to be called with CVAL1 and CVAL2.\n \n    If this is true, return 1.  Otherwise, return zero.  */\n \n static int\n-twoval_comparison_p (arg, cval1, cval2)\n+twoval_comparison_p (arg, cval1, cval2, save_p)\n      tree arg;\n      tree *cval1, *cval2;\n+     int *save_p;\n {\n   enum tree_code code = TREE_CODE (arg);\n   char class = TREE_CODE_CLASS (code);\n \n   /* We can handle some of the 'e' cases here.  */\n-  if (class == 'e'\n-      && (code == TRUTH_NOT_EXPR\n-\t  || (code == SAVE_EXPR && SAVE_EXPR_RTL (arg) == 0)))\n+  if (class == 'e' && code == TRUTH_NOT_EXPR)\n     class = '1';\n   else if (class == 'e'\n \t   && (code == TRUTH_ANDIF_EXPR || code == TRUTH_ORIF_EXPR\n \t       || code == COMPOUND_EXPR))\n     class = '2';\n+  else if (class == 'e' && code == SAVE_EXPR && SAVE_EXPR_RTL (arg) == 0)\n+    {\n+      /* If we've already found a CVAL1 or CVAL2, this expression is\n+\t two complex to handle.  */\n+      if (*cval1 || *cval2)\n+\treturn 0;\n+\n+      class = '1';\n+      *save_p = 1;\n+    }\n \n   switch (class)\n     {\n     case '1':\n-      return twoval_comparison_p (TREE_OPERAND (arg, 0), cval1, cval2);\n+      return twoval_comparison_p (TREE_OPERAND (arg, 0), cval1, cval2, save_p);\n \n     case '2':\n-      return (twoval_comparison_p (TREE_OPERAND (arg, 0), cval1, cval2)\n-\t      && twoval_comparison_p (TREE_OPERAND (arg, 1), cval1, cval2));\n+      return (twoval_comparison_p (TREE_OPERAND (arg, 0), cval1, cval2, save_p)\n+\t      && twoval_comparison_p (TREE_OPERAND (arg, 1),\n+\t\t\t\t      cval1, cval2, save_p));\n \n     case 'c':\n       return 1;\n \n     case 'e':\n       if (code == COND_EXPR)\n-\treturn (twoval_comparison_p (TREE_OPERAND (arg, 0), cval1, cval2)\n-\t\t&& twoval_comparison_p (TREE_OPERAND (arg, 1), cval1, cval2)\n+\treturn (twoval_comparison_p (TREE_OPERAND (arg, 0),\n+\t\t\t\t     cval1, cval2, save_p)\n+\t\t&& twoval_comparison_p (TREE_OPERAND (arg, 1),\n+\t\t\t\t\tcval1, cval2, save_p)\n \t\t&& twoval_comparison_p (TREE_OPERAND (arg, 2),\n-\t\t\t\t\tcval1, cval2));\n+\t\t\t\t\tcval1, cval2, save_p));\n       return 0;\n \t  \n     case '<':\n@@ -4346,8 +4359,9 @@ fold (expr)\n       if (TREE_CODE (arg1) == INTEGER_CST && TREE_CODE (arg0) != INTEGER_CST)\n \t{\n \t  tree cval1 = 0, cval2 = 0;\n+\t  int save_p = 0;\n \n-\t  if (twoval_comparison_p (arg0, &cval1, &cval2)\n+\t  if (twoval_comparison_p (arg0, &cval1, &cval2, &save_p)\n \t      /* Don't handle degenerate cases here; they should already\n \t\t have been handled anyway.  */\n \t      && cval1 != 0 && cval2 != 0\n@@ -4419,7 +4433,11 @@ fold (expr)\n \t\t      return omit_one_operand (type, integer_one_node, arg0);\n \t\t    }\n \n-\t\t  return fold (build (code, type, cval1, cval2));\n+\t\t  t = build (code, type, cval1, cval2);\n+\t\t  if (save_p)\n+\t\t    return save_expr (t);\n+\t\t  else\n+\t\t    return fold (t);\n \t\t}\n \t    }\n \t}"}]}