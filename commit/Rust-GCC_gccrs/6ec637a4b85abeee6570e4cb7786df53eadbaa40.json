{"sha": "6ec637a4b85abeee6570e4cb7786df53eadbaa40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVjNjM3YTRiODVhYmVlZTY1NzBlNGNiNzc4NmRmNTNlYWRiYWE0MA==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2009-05-07T22:34:08Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2009-05-07T22:34:08Z"}, "message": "re PR c/39037 (FLOAT_CONST_DECIMAL64 pragma not supported)\n\ngcc/\n\tPR c/39037\n\t* c-common.h (mark_valid_location_for_stdc_pragma,\n\tvalid_location_for_stdc_pragma_p, set_float_const_decimal64,\n\tclear_float_const_decimal64, float_const_decimal64_p): New.\n\t* c.opt (Wunsuffixed-float-constants): New.\n\t* c-lex.c (interpret_float): Use pragma FLOAT_CONST_DECIMAL64 for\n\tunsuffixed float constant, handle new warning.\n\t* c-cppbuiltin.c (c_cpp_builtins): Use cast for double constants.\n\t* c-decl.c (c_scope): New flag float_const_decimal64.\n\t(set_float_const_decimal64, clear_float_const_decimal64,\n\tfloat_const_decimal64_p): New.\n\t(push_scope): Set new flag.\n\t* c-parser.c (c_parser_translation_unit): Mark when it's valid\n\tto use STDC pragmas.\n\t(c_parser_external_declaration): Ditto.\n\t(c_parser_compound_statement_nostart): Ditto.\n\t* c-pragma.c (valid_location_for_stdc_pragma,\n\tmark_valid_location_for_stdc_pragma,\n\tvalid_location_for_stdc_pragma_p, handle_stdc_pragma,\n\thandle_pragma_float_const_decimal64): New.\n\t(init_pragma): Register new pragma FLOAT_CONST_DECIMAL64.\n\t* cp/semantics.c (valid_location_for_stdc_pragma_p,\n\tset_float_const_decimal64, clear_float_const_decimal64,\n\tfloat_const_decimal64_p): New dummy functions.\n\t* doc/extend.texi (Decimal Float): Remove statement that the\n\tpragma, and suffix for double constants, are not supported.\n\t* doc/invoke.texi (Warning Options): List new option.\n\t(-Wunsuffixed-float-constants): New.\n\ngcc/testsuite\n\tPR c/39037\n\t* gcc.dg/Wunsuffixed-float-constants-1.c: New test.\n\t* gcc.dg/cpp/pragma-float-const-decimal64-1.c: New test.\n\t* gcc.dg/dfp/float-constant-double.c: New test.\n\t* gcc.dg/dfp/pragma-float-const-decimal64-1.c: New test.\n\t* gcc.dg/dfp/pragma-float-const-decimal64-2.c: New test.\n\t* gcc.dg/dfp/pragma-float-const-decimal64-3.c: New test.\n\t* gcc.dg/dfp/pragma-float-const-decimal64-4.c: New test.\n\t* gcc.dg/dfp/pragma-float-const-decimal64-5.c: New test.\n\t* gcc.dg/dfp/pragma-float-const-decimal64-6.c: New test.\n\t* gcc.dg/dfp/pragma-float-const-decimal64-7.c: New test.\n\t* gcc.dg/dfp/pragma-float-const-decimal64-8.c: New test.\n\t* g++.dg/cpp/pragma-float-const-decimal64-1.C: New test.\n\nFrom-SVN: r147259", "tree": {"sha": "478b0f3a70632c6c119442bb4244b21106b8a03a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/478b0f3a70632c6c119442bb4244b21106b8a03a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ec637a4b85abeee6570e4cb7786df53eadbaa40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ec637a4b85abeee6570e4cb7786df53eadbaa40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ec637a4b85abeee6570e4cb7786df53eadbaa40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ec637a4b85abeee6570e4cb7786df53eadbaa40/comments", "author": null, "committer": null, "parents": [{"sha": "2995ed9a270259c4fbaa457913860bfab76565c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2995ed9a270259c4fbaa457913860bfab76565c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2995ed9a270259c4fbaa457913860bfab76565c0"}], "stats": {"total": 938, "additions": 923, "deletions": 15}, "files": [{"sha": "7d24caae3542338a26b6186492bee27adc1f00c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ec637a4b85abeee6570e4cb7786df53eadbaa40", "patch": "@@ -1,3 +1,34 @@\n+2009-05-07  Janis Johnson  <janis187@us.ibm.com>\n+\n+\tPR c/39037\n+\t* c-common.h (mark_valid_location_for_stdc_pragma,\n+\tvalid_location_for_stdc_pragma_p, set_float_const_decimal64,\n+\tclear_float_const_decimal64, float_const_decimal64_p): New.\n+\t* c.opt (Wunsuffixed-float-constants): New.\n+\t* c-lex.c (interpret_float): Use pragma FLOAT_CONST_DECIMAL64 for\n+\tunsuffixed float constant, handle new warning.\n+\t* c-cppbuiltin.c (c_cpp_builtins): Use cast for double constants.\n+\t* c-decl.c (c_scope): New flag float_const_decimal64.\n+\t(set_float_const_decimal64, clear_float_const_decimal64,\n+\tfloat_const_decimal64_p): New.\n+\t(push_scope): Set new flag.\n+\t* c-parser.c (c_parser_translation_unit): Mark when it's valid\n+\tto use STDC pragmas.\n+\t(c_parser_external_declaration): Ditto.\n+\t(c_parser_compound_statement_nostart): Ditto.\n+\t* c-pragma.c (valid_location_for_stdc_pragma,\n+\tmark_valid_location_for_stdc_pragma,\n+\tvalid_location_for_stdc_pragma_p, handle_stdc_pragma,\n+\thandle_pragma_float_const_decimal64): New.\n+\t(init_pragma): Register new pragma FLOAT_CONST_DECIMAL64.\n+\t* cp/semantics.c (valid_location_for_stdc_pragma_p,\n+\tset_float_const_decimal64, clear_float_const_decimal64,\n+\tfloat_const_decimal64_p): New dummy functions.\n+\t* doc/extend.texi (Decimal Float): Remove statement that the\n+\tpragma, and suffix for double constants, are not supported.\n+\t* doc/invoke.texi (Warning Options): List new option.\n+\t(-Wunsuffixed-float-constants): New.\n+\n 2009-05-08  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* config/i386/i386.c: Do not include c-common.h."}, {"sha": "250a7ff74fa0052db79096fa71329b5a77588acf", "filename": "gcc/c-common.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=6ec637a4b85abeee6570e4cb7786df53eadbaa40", "patch": "@@ -809,6 +809,11 @@ extern void warn_logical_operator (location_t, enum tree_code,\n extern void check_main_parameter_types (tree decl);\n extern bool c_determine_visibility (tree);\n extern bool same_scalar_type_ignoring_signedness (tree, tree);\n+extern void mark_valid_location_for_stdc_pragma (bool);\n+extern bool valid_location_for_stdc_pragma_p (void);\n+extern void set_float_const_decimal64 (void);\n+extern void clear_float_const_decimal64 (void);\n+extern bool float_const_decimal64_p (void);\n \n #define c_sizeof(T)  c_sizeof_or_alignof_type (T, true, 1)\n #define c_alignof(T) c_sizeof_or_alignof_type (T, false, 1)"}, {"sha": "921addbccf0961cc3518b1191d40b83428bc8a06", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=6ec637a4b85abeee6570e4cb7786df53eadbaa40", "patch": "@@ -619,14 +619,11 @@ c_cpp_builtins (cpp_reader *pfile)\n                                  TARGET_DEC_EVAL_METHOD);\n \n   builtin_define_float_constants (\"FLT\", \"F\", \"%s\", float_type_node);\n-  /* Cast the double precision constants when single precision constants are\n-     specified. The correct result is computed by the compiler when using \n-     macros that include a cast. This has the side-effect of making the value \n-     unusable in const expressions. */\n-  if (flag_single_precision_constant)\n-    builtin_define_float_constants (\"DBL\", \"L\", \"((double)%s)\", double_type_node);\n-  else\n-    builtin_define_float_constants (\"DBL\", \"\", \"%s\", double_type_node);\n+  /* Cast the double precision constants.  This is needed when single\n+     precision constants are specified or when pragma FLOAT_CONST_DECIMAL64\n+     is used.  The correct result is computed by the compiler when using\n+     macros that include a cast.  */\n+  builtin_define_float_constants (\"DBL\", \"L\", \"((double)%s)\", double_type_node);\n   builtin_define_float_constants (\"LDBL\", \"L\", \"%s\", long_double_type_node);\n \n   /* For decfloat.h.  */"}, {"sha": "409c458e195a0655b44b9770fcef6ea2be30ebde", "filename": "gcc/c-decl.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=6ec637a4b85abeee6570e4cb7786df53eadbaa40", "patch": "@@ -342,6 +342,9 @@ struct GTY((chain_next (\"%h.outer\"))) c_scope {\n \n   /* True means make a BLOCK for this scope no matter what.  */\n   BOOL_BITFIELD keep : 1;\n+\n+  /* True means that an unsuffixed float constant is _Decimal64.  */\n+  BOOL_BITFIELD float_const_decimal64 : 1;\n };\n \n /* The scope currently in effect.  */\n@@ -674,6 +677,30 @@ keep_next_level (void)\n   keep_next_level_flag = true;\n }\n \n+/* Set the flag for the FLOAT_CONST_DECIMAL64 pragma being ON.  */\n+\n+void\n+set_float_const_decimal64 (void)\n+{\n+  current_scope->float_const_decimal64 = true;\n+}\n+\n+/* Clear the flag for the FLOAT_CONST_DECIMAL64 pragma.  */\n+\n+void\n+clear_float_const_decimal64 (void)\n+{\n+  current_scope->float_const_decimal64 = false;\n+}\n+\n+/* Return nonzero if an unsuffixed float constant is _Decimal64.  */\n+\n+bool\n+float_const_decimal64_p (void)\n+{\n+  return current_scope->float_const_decimal64;\n+}\n+\n /* Identify this scope as currently being filled with parameters.  */\n \n void\n@@ -705,6 +732,13 @@ push_scope (void)\n \n       keep_next_level_flag = false;\n       next_is_function_body = false;\n+\n+      /* The FLOAT_CONST_DECIMAL64 pragma applies to nested scopes.  */\n+      if (current_scope->outer)\n+\tcurrent_scope->float_const_decimal64\n+\t  = current_scope->outer->float_const_decimal64;\n+      else\n+\tcurrent_scope->float_const_decimal64 = false;\n     }\n   else\n     {\n@@ -717,6 +751,12 @@ push_scope (void)\n       else\n \tscope = GGC_CNEW (struct c_scope);\n \n+      /* The FLOAT_CONST_DECIMAL64 pragma applies to nested scopes.  */\n+      if (current_scope)\n+\tscope->float_const_decimal64 = current_scope->float_const_decimal64;\n+      else\n+\tscope->float_const_decimal64 = false;\n+\n       scope->keep          = keep_next_level_flag;\n       scope->outer         = current_scope;\n       scope->depth\t   = current_scope ? (current_scope->depth + 1) : 0;"}, {"sha": "fc89279a7d9e20468cf925baa3ccfc40b3fc467a", "filename": "gcc/c-lex.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=6ec637a4b85abeee6570e4cb7786df53eadbaa40", "patch": "@@ -617,11 +617,21 @@ interpret_float (const cpp_token *token, unsigned int flags)\n   char *copy;\n   size_t copylen;\n \n-  /* Default (no suffix) is double.  */\n+  /* Default (no suffix) depends on whether the FLOAT_CONST_DECIMAL64\n+     pragma has been used and is either double or _Decimal64.  Types\n+     that are not allowed with decimal float default to double.  */\n   if (flags & CPP_N_DEFAULT)\n     {\n       flags ^= CPP_N_DEFAULT;\n       flags |= CPP_N_MEDIUM;\n+\n+      if (((flags & CPP_N_HEX) == 0) && ((flags & CPP_N_IMAGINARY) == 0))\n+\t{\n+\t  warning (OPT_Wunsuffixed_float_constants,\n+\t\t   \"unsuffixed float constant\");\n+\t  if (float_const_decimal64_p ())\n+\t    flags |= CPP_N_DFLOAT;\n+\t}\n     }\n \n   /* Decode _Fract and _Accum.  */"}, {"sha": "033c8350776bf78b40df320ed0133b27269a4925", "filename": "gcc/c-parser.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=6ec637a4b85abeee6570e4cb7786df53eadbaa40", "patch": "@@ -976,6 +976,7 @@ c_parser_translation_unit (c_parser *parser)\n   else\n     {\n       void *obstack_position = obstack_alloc (&parser_obstack, 0);\n+      mark_valid_location_for_stdc_pragma (false);\n       do\n \t{\n \t  ggc_collect ();\n@@ -1060,7 +1061,9 @@ c_parser_external_declaration (c_parser *parser)\n       c_parser_consume_token (parser);\n       break;\n     case CPP_PRAGMA:\n+      mark_valid_location_for_stdc_pragma (true);\n       c_parser_pragma (parser, pragma_external);\n+      mark_valid_location_for_stdc_pragma (false);\n       break;\n     case CPP_PLUS:\n     case CPP_MINUS:\n@@ -3350,17 +3353,20 @@ c_parser_compound_statement_nostart (c_parser *parser)\n {\n   bool last_stmt = false;\n   bool last_label = false;\n+  bool save_valid_for_pragma = valid_location_for_stdc_pragma_p ();\n   location_t label_loc = UNKNOWN_LOCATION;  /* Quiet warning.  */\n   if (c_parser_next_token_is (parser, CPP_CLOSE_BRACE))\n     {\n       c_parser_consume_token (parser);\n       return;\n     }\n+  mark_valid_location_for_stdc_pragma (true);\n   if (c_parser_next_token_is_keyword (parser, RID_LABEL))\n     {\n       location_t err_loc = c_parser_peek_token (parser)->location;\n       /* Read zero or more forward-declarations for labels that nested\n \t functions can jump to.  */\n+      mark_valid_location_for_stdc_pragma (false);\n       while (c_parser_next_token_is_keyword (parser, RID_LABEL))\n \t{\n \t  c_parser_consume_token (parser);\n@@ -3391,6 +3397,7 @@ c_parser_compound_statement_nostart (c_parser *parser)\n   /* We must now have at least one statement, label or declaration.  */\n   if (c_parser_next_token_is (parser, CPP_CLOSE_BRACE))\n     {\n+      mark_valid_location_for_stdc_pragma (save_valid_for_pragma);\n       c_parser_error (parser, \"expected declaration or statement\");\n       c_parser_consume_token (parser);\n       return;\n@@ -3409,12 +3416,14 @@ c_parser_compound_statement_nostart (c_parser *parser)\n \t    label_loc = c_parser_peek_token (parser)->location;\n \t  last_label = true;\n \t  last_stmt = false;\n+\t  mark_valid_location_for_stdc_pragma (false);\n \t  c_parser_label (parser);\n \t}\n       else if (!last_label\n \t       && c_parser_next_token_starts_declspecs (parser))\n \t{\n \t  last_label = false;\n+\t  mark_valid_location_for_stdc_pragma (false);\n \t  c_parser_declaration_or_fndef (parser, true, true, true, true);\n \t  if (last_stmt)\n \t    pedwarn_c90 (loc, \n@@ -3441,6 +3450,7 @@ c_parser_compound_statement_nostart (c_parser *parser)\n \t      ext = disable_extension_diagnostics ();\n \t      c_parser_consume_token (parser);\n \t      last_label = false;\n+\t      mark_valid_location_for_stdc_pragma (false);\n \t      c_parser_declaration_or_fndef (parser, true, true, true, true);\n \t      /* Following the old parser, __extension__ does not\n \t\t disable this diagnostic.  */\n@@ -3467,13 +3477,15 @@ c_parser_compound_statement_nostart (c_parser *parser)\n \t}\n       else if (c_parser_next_token_is (parser, CPP_EOF))\n \t{\n+\t  mark_valid_location_for_stdc_pragma (save_valid_for_pragma);\n \t  c_parser_error (parser, \"expected declaration or statement\");\n \t  return;\n \t}\n       else if (c_parser_next_token_is_keyword (parser, RID_ELSE))\n         {\n           if (parser->in_if_block) \n             {\n+\t      mark_valid_location_for_stdc_pragma (save_valid_for_pragma);\n               error_at (loc, \"\"\"expected %<}%> before %<else%>\");\n               return;\n             }\n@@ -3489,6 +3501,7 @@ c_parser_compound_statement_nostart (c_parser *parser)\n \tstatement:\n \t  last_label = false;\n \t  last_stmt = true;\n+\t  mark_valid_location_for_stdc_pragma (false);\n \t  c_parser_statement_after_labels (parser);\n \t}\n \n@@ -3497,6 +3510,8 @@ c_parser_compound_statement_nostart (c_parser *parser)\n   if (last_label)\n     error_at (label_loc, \"label at end of compound statement\");\n   c_parser_consume_token (parser);\n+  /* Restore the value we started with.  */\n+  mark_valid_location_for_stdc_pragma (save_valid_for_pragma);\n }\n \n /* Parse a label (C90 6.6.1, C99 6.8.1)."}, {"sha": "bd71d1d79e8079062006aece18c855f7c1441fa6", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=6ec637a4b85abeee6570e4cb7786df53eadbaa40", "patch": "@@ -1162,6 +1162,116 @@ handle_pragma_message (cpp_reader *ARG_UNUSED(dummy))\n     inform (input_location, \"#pragma message: %s\", TREE_STRING_POINTER (message));\n }\n \n+/* Mark whether the current location is valid for a STDC pragma.  */\n+\n+static bool valid_location_for_stdc_pragma;\n+\n+void\n+mark_valid_location_for_stdc_pragma (bool flag)\n+{\n+  valid_location_for_stdc_pragma = flag;\n+}\n+\n+/* Return true if the current location is valid for a STDC pragma.  */\n+\n+bool\n+valid_location_for_stdc_pragma_p (void)\n+{\n+  return valid_location_for_stdc_pragma;\n+}\n+\n+enum pragma_switch_t { ON, OFF, DEFAULT, BAD };\n+\n+/* A STDC pragma must appear outside of external declarations or\n+   preceding all explicit declarations and statements inside a compound\n+   statement; its behavior is undefined if used in any other context.\n+   It takes a switch of ON, OFF, or DEFAULT.  */\n+\n+static enum pragma_switch_t\n+handle_stdc_pragma (const char *pname)\n+{\n+  const char *arg;\n+  tree t;\n+  enum pragma_switch_t ret;\n+\n+  if (!valid_location_for_stdc_pragma_p ())\n+    {\n+      warning (OPT_Wpragmas, \"invalid location for %<pragma %s%>, ignored\",\n+\t       pname);\n+      return BAD;\n+    }\n+\n+  if (pragma_lex (&t) != CPP_NAME)\n+    {\n+      warning (OPT_Wpragmas, \"malformed %<#pragma %s%>, ignored\", pname);\n+      return BAD;\n+    }\n+\n+  arg = IDENTIFIER_POINTER (t);\n+\n+  if (!strcmp (arg, \"ON\"))\n+    ret = ON;\n+  else if (!strcmp (arg, \"OFF\"))\n+    ret = OFF;\n+  else if (!strcmp (arg, \"DEFAULT\"))\n+    ret = DEFAULT;\n+  else\n+    {\n+      warning (OPT_Wpragmas, \"malformed %<#pragma %s%>, ignored\", pname);\n+      return BAD;\n+    }\n+\n+  if (pragma_lex (&t) != CPP_EOF)\n+    {\n+      warning (OPT_Wpragmas, \"junk at end of %<#pragma %s%>\", pname);\n+      return BAD;\n+    }\n+\n+  return ret;\n+}\n+\n+/* #pragma STDC FLOAT_CONST_DECIMAL64 ON\n+   #pragma STDC FLOAT_CONST_DECIMAL64 OFF\n+   #pragma STDC FLOAT_CONST_DECIMAL64 DEFAULT */\n+\n+static void\n+handle_pragma_float_const_decimal64 (cpp_reader *ARG_UNUSED (dummy))\n+{\n+  if (c_dialect_cxx ())\n+    {\n+      if (warn_unknown_pragmas > in_system_header)\n+\twarning (OPT_Wunknown_pragmas,\n+\t\t \"%<#pragma STDC FLOAT_CONST_DECIMAL64%> is not supported\"\n+\t\t \" for C++\");\n+      return;\n+    }\n+\n+  if (!targetm.decimal_float_supported_p ())\n+    {\n+      if (warn_unknown_pragmas > in_system_header)\n+\twarning (OPT_Wunknown_pragmas,\n+\t\t \"%<#pragma STDC FLOAT_CONST_DECIMAL64%> is not supported\"\n+\t\t \" on this target\");\n+      return;\n+    }\n+\n+  pedwarn (input_location, OPT_pedantic,\n+\t   \"ISO C does not support %<#pragma STDC FLOAT_CONST_DECIMAL64%>\");\n+\n+  switch (handle_stdc_pragma (\"STDC FLOAT_CONST_DECIMAL64\"))\n+    {\n+    case ON:\n+      set_float_const_decimal64 ();\n+      break;\n+    case OFF:\n+    case DEFAULT:\n+      clear_float_const_decimal64 ();\n+      break;\n+    case BAD:\n+      break;\n+    }\n+}\n+\n /* A vector of registered pragma callbacks.  */\n \n DEF_VEC_O (pragma_handler);\n@@ -1330,6 +1440,9 @@ init_pragma (void)\n   c_register_pragma (\"GCC\", \"pop_options\", handle_pragma_pop_options);\n   c_register_pragma (\"GCC\", \"reset_options\", handle_pragma_reset_options);\n \n+  c_register_pragma (\"STDC\", \"FLOAT_CONST_DECIMAL64\",\n+\t\t     handle_pragma_float_const_decimal64);\n+\n   c_register_pragma_with_expansion (0, \"redefine_extname\", handle_pragma_redefine_extname);\n   c_register_pragma (0, \"extern_prefix\", handle_pragma_extern_prefix);\n "}, {"sha": "fc34ff57f78b46850ecb52fa917393be363b5e74", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=6ec637a4b85abeee6570e4cb7786df53eadbaa40", "patch": "@@ -476,6 +476,10 @@ Wunknown-pragmas\n C ObjC C++ ObjC++ Warning\n Warn about unrecognized pragmas\n \n+Wunsuffixed-float-constants\n+C ObjC Var(warn_unsuffixed_float_constants) Warning\n+Warn about unsuffixed float constants\n+\n Wunused-macros\n C ObjC C++ ObjC++ Warning\n Warn about macros defined in the main file that are not used"}, {"sha": "4c0c91d590573c97036358467fcaf1a11101b187", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=6ec637a4b85abeee6570e4cb7786df53eadbaa40", "patch": "@@ -5050,4 +5050,23 @@ finish_trait_expr (cp_trait_kind kind, tree type1, tree type2)\n \t  ? boolean_true_node : boolean_false_node);\n }\n \n+/* Do-nothing variants of functions to handle pragma FLOAT_CONST_DECIMAL64,\n+   which is ignored for C++.  */\n+\n+void\n+set_float_const_decimal64 (void)\n+{\n+}\n+\n+void\n+clear_float_const_decimal64 (void)\n+{\n+}\n+\n+bool\n+float_const_decimal64_p (void)\n+{\n+  return 0;\n+}\n+\n #include \"gt-cp-semantics.h\""}, {"sha": "43bebf911c00520549c11d5b532f72336b7d2749", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=6ec637a4b85abeee6570e4cb7786df53eadbaa40", "patch": "@@ -957,10 +957,6 @@ GCC support of decimal float as specified by the draft technical report\n is incomplete:\n \n @itemize @bullet\n-@item\n-Pragma @code{FLOAT_CONST_DECIMAL64} is not supported, nor is the @samp{d}\n-suffix for literal constants of type @code{double}.\n-\n @item\n When the value of a decimal floating type cannot be represented in the\n integer type to which it is being converted, the result is undefined"}, {"sha": "3fc575d34de25c585a7abfb9855e86d28b6de5c9", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6ec637a4b85abeee6570e4cb7786df53eadbaa40", "patch": "@@ -259,8 +259,8 @@ Objective-C and Objective-C++ Dialects}.\n -Wswitch  -Wswitch-default  -Wswitch-enum -Wsync-nand @gol\n -Wsystem-headers  -Wtrigraphs  -Wtype-limits  -Wundef  -Wuninitialized @gol\n -Wunknown-pragmas  -Wno-pragmas -Wunreachable-code @gol\n--Wunused  -Wunused-function  -Wunused-label  -Wunused-parameter @gol\n--Wunused-value  -Wunused-variable @gol\n+-Wunsuffixed-float-constants  -Wunused  -Wunused-function @gol\n+-Wunused-label  -Wunused-parameter  -Wunused-value  -Wunused-variable @gol\n -Wvariadic-macros -Wvla @gol\n -Wvolatile-register-var  -Wwrite-strings}\n \n@@ -4218,6 +4218,15 @@ minimum maximum, so we do not diagnose overlength strings in C++@.\n \n This option is implied by @option{-pedantic}, and can be disabled with\n @option{-Wno-overlength-strings}.\n+\n+@item -Wunsuffixed-float-constants\n+@opindex Wunsuffixed-float-constants\n+\n+GCC will issue a warning for any floating constant that does not have\n+a suffix.  When used together with @option{-Wsystem-headers} it will\n+warn about such constants in system header files.  This can be useful\n+when preparing code to use with the @code{FLOAT_CONST_DECIMAL64} pragma\n+from the decimal floating-point extension to C99.\n @end table\n \n @node Debugging Options"}, {"sha": "2dc3dd9e3e9e0187973ac9a5bcefa29131d5dda7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6ec637a4b85abeee6570e4cb7786df53eadbaa40", "patch": "@@ -1,3 +1,19 @@\n+2009-05-07  Janis Johnson  <janis187@us.ibm.com>\n+\n+\tPR c/39037\n+\t* gcc.dg/Wunsuffixed-float-constants-1.c: New test.\n+\t* gcc.dg/cpp/pragma-float-const-decimal64-1.c: New test.\n+\t* gcc.dg/dfp/float-constant-double.c: New test.\n+\t* gcc.dg/dfp/pragma-float-const-decimal64-1.c: New test.\n+\t* gcc.dg/dfp/pragma-float-const-decimal64-2.c: New test.\n+\t* gcc.dg/dfp/pragma-float-const-decimal64-3.c: New test.\n+\t* gcc.dg/dfp/pragma-float-const-decimal64-4.c: New test.\n+\t* gcc.dg/dfp/pragma-float-const-decimal64-5.c: New test.\n+\t* gcc.dg/dfp/pragma-float-const-decimal64-6.c: New test.\n+\t* gcc.dg/dfp/pragma-float-const-decimal64-7.c: New test.\n+\t* gcc.dg/dfp/pragma-float-const-decimal64-8.c: New test.\n+\t* g++.dg/cpp/pragma-float-const-decimal64-1.C: New test.\n+\n 2009-05-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/40057"}, {"sha": "31e1ad6d5070805a9a01ac3052a647312d60852b", "filename": "gcc/testsuite/g++.dg/cpp/pragma-float-const-decimal64-1.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpragma-float-const-decimal64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpragma-float-const-decimal64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpragma-float-const-decimal64-1.C?ref=6ec637a4b85abeee6570e4cb7786df53eadbaa40", "patch": "@@ -0,0 +1,5 @@\n+// { dg-do compile }\n+// { dg-options \"-Wunknown-pragmas\" }\n+\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\t// { dg-warning \"not supported for C\\\\\\+\\\\\\+\" }\n+double d = 1.0;"}, {"sha": "b4a38d5cb106bc9643cb6f82e19554ddcdb7666b", "filename": "gcc/testsuite/gcc.dg/Wunsuffixed-float-constants-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2Fgcc.dg%2FWunsuffixed-float-constants-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2Fgcc.dg%2FWunsuffixed-float-constants-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunsuffixed-float-constants-1.c?ref=6ec637a4b85abeee6570e4cb7786df53eadbaa40", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wunsuffixed-float-constants\" } */\n+\n+#define VAL 0.5;\n+\n+double a = 1.1d;\n+\n+/* With FLOAT_CONST_DECIMAL64 switched to ON these would have type\n+   _Decimal64.  */\n+\n+double b = VAL;\t\t/* { dg-warning \"unsuffixed float constant\" } */\n+double c = 1.2;\t\t/* { dg-warning \"unsuffixed float constant\" } */\n+\n+/* With FLOAT_CONST_DECIMAL64 switched to ON these are still binary.  */\n+\n+double d = 0x5.0p1;\t/* No warning for hex constant.  */\n+double e = 3.1i;\t/* No warning for imaginary constant.  */"}, {"sha": "633383899dd2b56c879ff5a237acc90f760f79a8", "filename": "gcc/testsuite/gcc.dg/cpp/pragma-float-const-decimal64-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-float-const-decimal64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-float-const-decimal64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpragma-float-const-decimal64-1.c?ref=6ec637a4b85abeee6570e4cb7786df53eadbaa40", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile { target { ! dfp } } } */\n+/* { dg-options \"-std=gnu99 -Wunknown-pragmas\" } */\n+\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\t/* { dg-warning \"not supported on this target\" } */\n+double d = 1.0;"}, {"sha": "3f8de656bf6070fba08cd3636a9b04b80b37a67f", "filename": "gcc/testsuite/gcc.dg/dfp/float-constant-double.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffloat-constant-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffloat-constant-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffloat-constant-double.c?ref=6ec637a4b85abeee6570e4cb7786df53eadbaa40", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* Constant float values of type double in <float.h> are suffixed with L\n+   and cast to double so they can be used within code that uses pragma\n+   FLOAT_CONST_DECIMAL64.  If they were not suffixed then use of the macro\n+   would have them interpreted as _Decimal64, leading to errors when used\n+   in expressions with other operands of type double.  */\n+\n+#include <float.h>\n+\n+extern double a, b, c, d;\n+\n+void\n+foo ()\n+{\n+  _Pragma (\"STDC FLOAT_CONST_DECIMAL64 ON\")\n+  a = 0.1d * DBL_MAX;\n+  b = DBL_EPSILON * 10.0d;\n+  c = DBL_MIN * 200.0d;\n+}"}, {"sha": "79fabf34484e7bb69a50b71ebb9eca2b14d2d13d", "filename": "gcc/testsuite/gcc.dg/dfp/pragma-float-const-decimal64-1.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-1.c?ref=6ec637a4b85abeee6570e4cb7786df53eadbaa40", "patch": "@@ -0,0 +1,85 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wall\" } */\n+\n+/* N1312 7.1.1: The FLOAT_CONST_DECIMAL64 pragma.\n+   C99 6.4.4.2a (New).\n+\n+   Verify that the pragma has the expected result by using unsuffixed\n+   float constants as operands in expressions that would mix binary and\n+   decimal operands if the pragma had no effect, or the wrong effect.  */\n+\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\n+double a = 1.0 * 2.0dd;\n+\n+double\n+f1 (void)\n+{\n+#pragma STDC FLOAT_CONST_DECIMAL64 OFF\n+  double b = 2.0 * 3.0d;\n+\n+  {\n+    double c = 3.0 * 4.0d;\n+    b = b + c;\n+  }\n+\n+  {\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\n+    double d = 4.0 * 5.0dd;\n+\n+    b = b + d;\n+  }\n+\n+  {\n+     /* Default is OFF.  */\n+#pragma STDC FLOAT_CONST_DECIMAL64 DEFAULT\n+     double e = 5.0 * 6.0d;\n+     b = b + e;\n+  }\n+\n+  return b;\n+}\n+\n+double\n+f2 (void)\n+{\n+  /* Use value from outer scope, which is ON.  */\n+  double b = 2.0 * 3.0dd;\n+\n+  {\n+#pragma STDC FLOAT_CONST_DECIMAL64 OFF\n+    double c = 3.0 * 4.0d;\n+\n+    {\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\n+      double d = 4.0 * 5.0dd;\n+\n+      {\n+#pragma STDC FLOAT_CONST_DECIMAL64 DEFAULT\n+\tdouble e = 5.0 * 6.0d;\n+\n+\t{\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\n+\t  double f = 6.0 * 7.0dd;\n+\n+\t  b = a + b + c + d + e + f;\n+\t}\n+      }\n+    }\n+  }\n+  return b;\n+}\n+\n+/* Use previous value from this scope, which is ON.  */\n+double f = 6.0 * 7.0dd;\n+\n+double\n+f3 (void)\n+{\n+#pragma STDC FLOAT_CONST_DECIMAL64 OFF\n+  double b = 2.0 * 3.0d;\n+\n+  return b + f;\n+}\n+\n+/* Return to the state from this scope, which is ON.  */\n+double g = 7.0 + 8.0dd;"}, {"sha": "212748c6c78db6783381a6878239a794955d2cd9", "filename": "gcc/testsuite/gcc.dg/dfp/pragma-float-const-decimal64-2.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-2.c?ref=6ec637a4b85abeee6570e4cb7786df53eadbaa40", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wall\" } */\n+\n+/* N1312 7.1.1: The FLOAT_CONST_DECIMAL64 pragma.\n+   C99 6.4.4.2a (New).\n+\n+   Verify that the pragma has the expected result by using unsuffixed\n+   float constants as operands in expressions that would mix binary and\n+   decimal operands if the pragma had no effect, or the wrong effect.\n+   Use _Pragma rather than #pragma.  */\n+\n+_Pragma (\"STDC FLOAT_CONST_DECIMAL64 ON\")\n+double a = 1.0 * 2.0dd;\n+\n+double\n+f1 (void)\n+{\n+_Pragma (\"STDC FLOAT_CONST_DECIMAL64 OFF\")\n+  double b = 2.0 * 3.0d;\n+\n+  {\n+    double c = 3.0 * 4.0d;\n+    b = b + c;\n+  }\n+\n+  {\n+_Pragma (\"STDC FLOAT_CONST_DECIMAL64 ON\")\n+    double d = 4.0 * 5.0dd;\n+\n+    b = b + d;\n+  }\n+\n+  {\n+     /* Default is OFF.  */\n+_Pragma (\"STDC FLOAT_CONST_DECIMAL64 DEFAULT\")\n+     double e = 5.0 * 6.0d;\n+     b = b + e;\n+  }\n+\n+  return b;\n+}\n+\n+double\n+f2 (void)\n+{\n+  /* Use value from outer scope, which is ON.  */\n+  double b = 2.0 * 3.0dd;\n+\n+  {\n+_Pragma (\"STDC FLOAT_CONST_DECIMAL64 OFF\")\n+    double c = 3.0 * 4.0d;\n+\n+    {\n+_Pragma (\"STDC FLOAT_CONST_DECIMAL64 ON\")\n+      double d = 4.0 * 5.0dd;\n+\n+      {\n+_Pragma (\"STDC FLOAT_CONST_DECIMAL64 DEFAULT\")\n+\tdouble e = 5.0 * 6.0d;\n+\n+\t{\n+_Pragma (\"STDC FLOAT_CONST_DECIMAL64 ON\")\n+\t  double f = 6.0 * 7.0dd;\n+\n+\t  b = a + b + c + d + e + f;\n+\t}\n+      }\n+    }\n+  }\n+  return b;\n+}\n+\n+/* Use previous value from this scope, which is ON.  */\n+double f = 6.0 * 7.0dd;\n+\n+double\n+f3 (void)\n+{\n+_Pragma (\"STDC FLOAT_CONST_DECIMAL64 OFF\")\n+  double b = 2.0 * 3.0d;\n+\n+  return b + f;\n+}\n+\n+/* Return to the state from this scope, which is ON.  */\n+double g = 7.0 + 8.0dd;"}, {"sha": "b9286aac11a9395fd6e0d5ea99efe1f222d2f749", "filename": "gcc/testsuite/gcc.dg/dfp/pragma-float-const-decimal64-3.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-3.c?ref=6ec637a4b85abeee6570e4cb7786df53eadbaa40", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wall\" } */\n+\n+/* N1312 7.1.1: The FLOAT_CONST_DECIMAL64 pragma.\n+   C99 6.4.4.2a (New).  */\n+\n+/* Check that defining macros whose names are the same as the tokens used\n+   in the pragma doesn't affect use of the pragma.  */\n+\n+#define ON YES\n+#define OFF NO\n+#define DEFAULT NOPE\n+#define STDC OFFICIAL\n+#define FLOAT_CONST_DECIMAL64 NEW_PRAGMA\n+\n+double a;\n+\n+void\n+f1a (void)\n+{\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\n+  a = 1.0dd + 2.0;\n+}\n+\n+void\n+f1b (void)\n+{\n+#pragma STDC FLOAT_CONST_DECIMAL64 OFF\n+  a = 2.0d + 3.0;\n+}\n+\n+void\n+f1c (void)\n+{\n+#pragma STDC FLOAT_CONST_DECIMAL64 DEFAULT\n+  a = 3.0d + 4.0;\n+}\n+\n+/* Check that a macro can be used for the entire pragma.  */\n+\n+#define PRAGMA(x) _Pragma (#x)\n+#define DEFAULT_FLOAT_IS_DECIMAL PRAGMA(STDC FLOAT_CONST_DECIMAL64 ON)\n+#define DEFAULT_FLOAT_IS_BINARY PRAGMA(STDC FLOAT_CONST_DECIMAL64 OFF)\n+\n+void\n+f2a (void)\n+{\n+  DEFAULT_FLOAT_IS_DECIMAL\n+  a = 5.0 * 6.0dd;\n+}\n+\n+void\n+f2b (void)\n+{\n+  DEFAULT_FLOAT_IS_BINARY\n+  a = 6.0 * 7.0d;\n+}\n+\n+/* _Pragma can be used with macros, including the use of a macro for the\n+    switch.  */\n+\n+#undef ON\n+#undef OFF\n+#undef DEFAULT\n+#undef STDC\n+#undef FLOAT_CONST_DECIMAL64\n+\n+#define SWITCH ON\n+#define FLOAT_CONST_DECIMAL64(x) PRAGMA(STDC FLOAT_CONST_DECIMAL64 x)\n+\n+void\n+f3a (void)\n+{\n+  FLOAT_CONST_DECIMAL64(SWITCH)\n+  a = 1.0 * 7.0dd;\n+}\n+\n+void\n+f3b (void)\n+{\n+  FLOAT_CONST_DECIMAL64(OFF)\n+  a = 1.0 + 2.0d;\n+}"}, {"sha": "86cec1dbd4596621df4911cae1965f914a70a50a", "filename": "gcc/testsuite/gcc.dg/dfp/pragma-float-const-decimal64-4.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-4.c?ref=6ec637a4b85abeee6570e4cb7786df53eadbaa40", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* N1312 7.1.1: The FLOAT_CONST_DECIMAL64 pragma.\n+   C99 6.4.4.2a (New).\n+\n+   Check that malformed versions of pragma STDC FLOAT_CONST_DECIMAL64\n+   are detected.  */\n+\n+double a;\n+\n+void f1 (void)\n+{\n+#pragma STDC FLOAT_CONST_DECIMAL64\t/* { dg-warning \"malformed\" } */\n+  a = 1.0;\n+}\n+\n+void f2 (void)\n+{\n+#pragma STDC FLOAT_CONST_DECIMAL64 DFP\t/* { dg-warning \"malformed\" } */\n+  a = 2.0;\n+}\n+\n+void f3 (void)\n+{\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON DFP /* { dg-warning \"junk at end\" } */\n+  a = 3.0;\n+}\n+\n+void f4 (void)\n+{\n+  _Pragma ( \"STDC FLOAT_CONST_DECIMAL64\" )\t/* { dg-warning \"malformed\" } */\n+  a = 1.0;\n+}\n+\n+void f5 (void)\n+{\n+  _Pragma ( \"STDC FLOAT_CONST_DECIMAL64 DFP\" )\t/* { dg-warning \"malformed\" } */\n+  a = 2.0;\n+}\n+\n+void f6 (void)\n+{\n+  _Pragma ( \"STDC FLOAT_CONST_DECIMAL64 ON DFP\" ) /* { dg-warning \"junk at end\" } */\n+  a = 3.0;\n+}"}, {"sha": "75e9525dda02969a4e83f80d0647fc9e83b33ae6", "filename": "gcc/testsuite/gcc.dg/dfp/pragma-float-const-decimal64-5.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-5.c?ref=6ec637a4b85abeee6570e4cb7786df53eadbaa40", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -pedantic\" } */\n+\n+/* N1312 7.1.1: The FLOAT_CONST_DECIMAL64 pragma.\n+   C99 6.4.4.2a (New).\n+\n+   Check that there is a pedantic warning for the use of pragma\n+   STD FLOAT_CONST_DECIMAL64.  */\n+\n+double a;\n+\n+void f1 (void)\n+{\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\t\t/* { dg-warning \"ISO C\" } */\n+  a = 1.0;\n+}\n+\n+void f2 (void)\n+{\n+#pragma STDC FLOAT_CONST_DECIMAL64 OFF\t\t/* { dg-warning \"ISO C\" } */\n+  a = 2.0;\n+}\n+\n+void f3 (void)\n+{\n+#pragma STDC FLOAT_CONST_DECIMAL64 DEFAULT\t/* { dg-warning \"ISO C\" } */\n+  a = 3.0;\n+}\n+\n+void f4 (void)\n+{\n+  _Pragma (\"STDC FLOAT_CONST_DECIMAL64 ON\")\t/* { dg-warning \"ISO C\" } */\n+  a = 1.0;\n+}\n+\n+void f5 (void)\n+{\n+  _Pragma (\"STDC FLOAT_CONST_DECIMAL64 OFF\")\t/* { dg-warning \"ISO C\" } */\n+  a = 2.0;\n+}\n+\n+void f6 (void)\n+{\n+  _Pragma (\"STDC FLOAT_CONST_DECIMAL64 DEFAULT\")\t/* { dg-warning \"ISO C\" } */\n+  a = 3.0;\n+}"}, {"sha": "03c1715bee660b6aad2e86c53d2499542d2a34db", "filename": "gcc/testsuite/gcc.dg/dfp/pragma-float-const-decimal64-6.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-6.c?ref=6ec637a4b85abeee6570e4cb7786df53eadbaa40", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -pedantic-errors\" } */\n+\n+/* N1312 7.1.1: The FLOAT_CONST_DECIMAL64 pragma.\n+   C99 6.4.4.2a (New).\n+\n+   Check that there is a pedantic error for the use of pragma\n+   STD FLOAT_CONST_DECIMAL64.  */\n+\n+double a;\n+\n+void f1 (void)\n+{\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\t\t/* { dg-error \"ISO C\" } */\n+  a = 1.0;\n+}\n+\n+void f2 (void)\n+{\n+#pragma STDC FLOAT_CONST_DECIMAL64 OFF\t\t/* { dg-error \"ISO C\" } */\n+  a = 2.0;\n+}\n+\n+void f3 (void)\n+{\n+#pragma STDC FLOAT_CONST_DECIMAL64 DEFAULT\t/* { dg-error \"ISO C\" } */\n+  a = 3.0;\n+}\n+\n+void f4 (void)\n+{\n+  _Pragma (\"STDC FLOAT_CONST_DECIMAL64 ON\")\t/* { dg-error \"ISO C\" } */\n+  a = 1.0;\n+}\n+\n+void f5 (void)\n+{\n+  _Pragma (\"STDC FLOAT_CONST_DECIMAL64 OFF\")\t/* { dg-error \"ISO C\" } */\n+  a = 2.0;\n+}\n+\n+void f6 (void)\n+{\n+  _Pragma (\"STDC FLOAT_CONST_DECIMAL64 DEFAULT\") /* { dg-error \"ISO C\" } */\n+  a = 3.0;\n+}"}, {"sha": "7533ee7f0dec0bf5174a6daa32349601e29870b3", "filename": "gcc/testsuite/gcc.dg/dfp/pragma-float-const-decimal64-7.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-7.c?ref=6ec637a4b85abeee6570e4cb7786df53eadbaa40", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wall\" } */\n+\n+/* N1312 7.1.1: The FLOAT_CONST_DECIMAL64 pragma.\n+   C99 6.4.4.2a (New).\n+\n+   Check that when pragma FLOAT_CONST_DECIMAL64 is in effect so that\n+   unsuffixed constants are _Decimal64, invalid types are still reported\n+   as invalid.  */\n+\n+double\n+f1 (void)\n+{\n+#pragma STDC FLOAT_CONST_DECIMAL64 OFF\n+  double a = 0x1.0p1;\n+  double b = 1.0i;\n+\n+  return a + b;\n+}\n+\n+double\n+f2 (void)\n+{\n+#pragma STDC FLOAT_CONST_DECIMAL64 OFF\n+  double a = 0x1.0p1dd;\t\t/* { dg-error \"with hex\" } */\n+  double b = 1.0idd;\t\t/* { dg-error \"invalid suffix\" } */\n+\n+  return a + b;\n+}\n+\n+double\n+f3 (void)\n+{\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\n+  double a = 0x1.0p1;\t/* Hex constant is not affected by pragma.  */\n+  double b = 1.0i;\t/* Imaginary constant is not affected by pragma.  */\n+\n+  return a + b;\n+}"}, {"sha": "5dbbda5b8f29519e2d76a558e3697b0ce4999d83", "filename": "gcc/testsuite/gcc.dg/dfp/pragma-float-const-decimal64-8.c", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec637a4b85abeee6570e4cb7786df53eadbaa40/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-8.c?ref=6ec637a4b85abeee6570e4cb7786df53eadbaa40", "patch": "@@ -0,0 +1,174 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wall\" } */\n+\n+/* N1312 7.1.1: The FLOAT_CONST_DECIMAL64 pragma.\n+   C99 6.4.4.2a (New).\n+\n+   Pragma STDC FLOAT_CONST_DECIMAL64 \"shall occur either outside external\n+   declarations or preceding all explicit declarations and statements\n+   inside a compound statement.\" */\n+\n+#pragma STDC FLOAT_CONST_DECIMAL64 OFF\n+\n+#define MAX 200\n+\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\n+\n+double a;\n+\n+#pragma STDC FLOAT_CONST_DECIMAL64 OFF\n+\n+struct S1 {\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\t/* { dg-warning \"invalid location\" } */\n+  int i;\n+  int j;\n+};\n+\n+struct S2 {\n+  int i;\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\t/* { dg-warning \"invalid location\" } */\n+  int j;\n+};\n+\n+struct S3 {\n+  int i;\n+  int j;\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\t/* { dg-warning \"invalid location\" } */\n+};\n+\n+enum E1 {\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\t/* { dg-error \"#pragma\" } */\n+  one,\n+  two\n+};\n+\n+enum E2 {\n+  red,\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\t/* { dg-error \"#pragma\" } */\n+  blue\n+};\n+\n+enum E3 {\n+  cat,\n+  dog\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\t/* { dg-error \"#pragma\" } */\n+};\n+\n+double\n+#pragma STDC FLOAT_CONST_DECIMAL64 OFF\t/* { dg-error \"#pragma\" } */\n+b;\n+\n+double\n+f1 (void)\n+{\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\n+  return a;\n+}\n+\n+double\n+f2 (void)\n+{\n+  double b;\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\t/* { dg-warning \"invalid location\" } */\n+  b = 0.5;\n+  return a + b;\n+}\n+\n+#pragma STDC FLOAT_CONST_DECIMAL64 OFF\n+\n+double\n+f3 (void)\n+{\n+  typedef double b32;\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\t/* { dg-warning \"invalid location\" } */\n+  b32 b = 0.5;\n+  return b;\n+}\n+\n+double\n+f4 (int i)\n+{\n+top:\n+#pragma STDC FLOAT_CONST_DECIMAL64 OFF\t/* { dg-warning \"invalid location\" } */\n+  if (i == 0)\n+    return a;  \n+  a *= 2.;\n+  i = 0;\n+  goto top;\n+}\n+\n+double\n+f5 (int i)\n+{\n+  a = a * i;\n+#pragma STDC FLOAT_CONST_DECIMAL64 OFF\t/* { dg-warning \"invalid location\" } */\n+  return a * 2.;\n+}\n+\n+double\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\t/* { dg-error \"#pragma\" } */\n+f6 (void)\n+{\n+  return a;\n+}\n+\n+double\n+f7\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\t/* { dg-error \"#pragma\" } */\n+(void)\t\t\t\t\t/* { dg-error \"before\" } */\n+{\n+  return a;\n+}\n+\n+double\n+f8 (void)\n+{\n+  {\n+#pragma STDC FLOAT_CONST_DECIMAL64 OFF\n+  }\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON   /* { dg-warning \"invalid location\" } */\n+  return a;\n+}\n+\n+extern void foo9 (void *);\n+\n+double\n+f9 (void)\n+{\n+  __label__ here;\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\t/* { dg-warning \"invalid location\" } */\n+  foo9 (&&here);\n+here:\n+  return a;\n+}\n+\n+double\n+f10 (void)\n+{\n+  void foo10 (void)\n+  {\n+    a = 1.0;\n+  }\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\t/* { dg-warning \"invalid location\" } */\n+  return a;\n+}\n+\n+double\n+f11 (void)\n+{\n+  __extension__\n+   struct A {\n+    struct { char a; };\n+    char b;\n+  };\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\t/* { dg-warning \"invalid location\" } */\n+  return a;\n+}\n+\n+double\n+f12 (void)\n+{\n+  __extension__ ({ a = 0.5; });\n+#pragma STDC FLOAT_CONST_DECIMAL64 ON\t/* { dg-warning \"invalid location\" } */\n+  return a;\n+}"}]}