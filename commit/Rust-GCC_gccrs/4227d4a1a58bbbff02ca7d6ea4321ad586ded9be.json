{"sha": "4227d4a1a58bbbff02ca7d6ea4321ad586ded9be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIyN2Q0YTFhNThiYmJmZjAyY2E3ZDZlYTQzMjFhZDU4NmRlZDliZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-01-20T23:12:25Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-01-20T23:12:25Z"}, "message": "re PR c++/42038 (ICE: tree check: expected class 'type', have 'exceptional' (error_mark) in useless_type_conversion_p)\n\n/cp\n2010-01-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/42038\n\t* except.c (expand_start_catch_block): Deal correctly with\n\tdo_begin_catch returning error_mark_node.\n\n/testsuite\n2010-01-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/42038\n\t* g++.dg/parse/crash55.C: New.\n\nFrom-SVN: r156094", "tree": {"sha": "7ef1177de88817d855322a3464d821fd48a1013c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ef1177de88817d855322a3464d821fd48a1013c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4227d4a1a58bbbff02ca7d6ea4321ad586ded9be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4227d4a1a58bbbff02ca7d6ea4321ad586ded9be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4227d4a1a58bbbff02ca7d6ea4321ad586ded9be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4227d4a1a58bbbff02ca7d6ea4321ad586ded9be/comments", "author": null, "committer": null, "parents": [{"sha": "4a4d4c08ed9c1843d70c528024ca1cc36207bd63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a4d4c08ed9c1843d70c528024ca1cc36207bd63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a4d4c08ed9c1843d70c528024ca1cc36207bd63"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "5f7190ed3c2311ec81c24455fc99feb3e0a894c4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4227d4a1a58bbbff02ca7d6ea4321ad586ded9be/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4227d4a1a58bbbff02ca7d6ea4321ad586ded9be/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4227d4a1a58bbbff02ca7d6ea4321ad586ded9be", "patch": "@@ -1,3 +1,9 @@\n+2010-01-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/42038\n+\t* except.c (expand_start_catch_block): Deal correctly with\n+\tdo_begin_catch returning error_mark_node.\n+\n 2010-01-20  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/41788"}, {"sha": "4f4f85b490d64f9f5110943de4f32e9e456c1733", "filename": "gcc/cp/except.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4227d4a1a58bbbff02ca7d6ea4321ad586ded9be/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4227d4a1a58bbbff02ca7d6ea4321ad586ded9be/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=4227d4a1a58bbbff02ca7d6ea4321ad586ded9be", "patch": "@@ -1,6 +1,6 @@\n /* Handle exceptional things in C++.\n    Copyright (C) 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n+   2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by Michael Tiemann <tiemann@cygnus.com>\n    Rewritten by Mike Stump <mrs@cygnus.com>, based upon an\n@@ -417,7 +417,7 @@ tree\n expand_start_catch_block (tree decl)\n {\n   tree exp;\n-  tree type;\n+  tree type, init;\n \n   if (! doing_eh (1))\n     return NULL_TREE;\n@@ -450,10 +450,12 @@ expand_start_catch_block (tree decl)\n   /* Call __cxa_end_catch at the end of processing the exception.  */\n   push_eh_cleanup (type);\n \n+  init = do_begin_catch ();\n+\n   /* If there's no decl at all, then all we need to do is make sure\n      to tell the runtime that we've begun handling the exception.  */\n-  if (decl == NULL || decl == error_mark_node)\n-    finish_expr_stmt (do_begin_catch ());\n+  if (decl == NULL || decl == error_mark_node || init == error_mark_node)\n+    finish_expr_stmt (init);\n \n   /* If the C++ object needs constructing, we need to do that before\n      calling __cxa_begin_catch, so that std::uncaught_exception gets\n@@ -463,15 +465,14 @@ expand_start_catch_block (tree decl)\n     {\n       exp = do_get_exception_ptr ();\n       initialize_handler_parm (decl, exp);\n-      finish_expr_stmt (do_begin_catch ());\n+      finish_expr_stmt (init);\n     }\n \n   /* Otherwise the type uses a bitwise copy, and we don't have to worry\n      about the value of std::uncaught_exception and therefore can do the\n      copy with the return value of __cxa_end_catch instead.  */\n   else\n     {\n-      tree init = do_begin_catch ();\n       tree init_type = type;\n \n       /* Pointers are passed by values, everything else by reference.  */"}, {"sha": "76d2bc5c1635cf63b2bfa32611f675c74f980271", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4227d4a1a58bbbff02ca7d6ea4321ad586ded9be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4227d4a1a58bbbff02ca7d6ea4321ad586ded9be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4227d4a1a58bbbff02ca7d6ea4321ad586ded9be", "patch": "@@ -1,3 +1,8 @@\n+2010-01-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/42038\n+\t* g++.dg/parse/crash55.C: New.\n+\n 2010-01-20  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/42782"}, {"sha": "7676d49bcd9fe54ac4cce94e55605a8557d457e6", "filename": "gcc/testsuite/g++.dg/parse/crash55.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4227d4a1a58bbbff02ca7d6ea4321ad586ded9be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4227d4a1a58bbbff02ca7d6ea4321ad586ded9be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash55.C?ref=4227d4a1a58bbbff02ca7d6ea4321ad586ded9be", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/42038\n+\n+extern int __cxa_begin_catch;\n+\n+void f(void)\n+{\n+  try { } catch (int) { } // { dg-error \"cannot be used\" }\n+}"}]}