{"sha": "1cbdef5105b002f57a9e60be4768084b3c36e405", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNiZGVmNTEwNWIwMDJmNTdhOWU2MGJlNDc2ODA4NGIzYzM2ZTQwNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-05-03T12:03:01Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-05-03T12:03:01Z"}, "message": "elf.h (MAX_OFILE_ALIGNMENT): Remove.\n\n\t* config/alpha/elf.h (MAX_OFILE_ALIGNMENT): Remove.\n\nFrom-SVN: r187095", "tree": {"sha": "415c3f9a551c1e53ccf211e6ebca56b9ab4599b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/415c3f9a551c1e53ccf211e6ebca56b9ab4599b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cbdef5105b002f57a9e60be4768084b3c36e405", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cbdef5105b002f57a9e60be4768084b3c36e405", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cbdef5105b002f57a9e60be4768084b3c36e405", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cbdef5105b002f57a9e60be4768084b3c36e405/comments", "author": null, "committer": null, "parents": [{"sha": "520b49f3f1f40d401695c62329446c99e95f3894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/520b49f3f1f40d401695c62329446c99e95f3894", "html_url": "https://github.com/Rust-GCC/gccrs/commit/520b49f3f1f40d401695c62329446c99e95f3894"}], "stats": {"total": 60, "additions": 22, "deletions": 38}, "files": [{"sha": "1bff6dee2892e24695e35a82f6234abbbb5f6aec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cbdef5105b002f57a9e60be4768084b3c36e405/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cbdef5105b002f57a9e60be4768084b3c36e405/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1cbdef5105b002f57a9e60be4768084b3c36e405", "patch": "@@ -1,3 +1,7 @@\n+2012-05-03  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/elf.h (MAX_OFILE_ALIGNMENT): Remove.\n+\n 2012-05-03  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* tree-switch-conversion.c (gen_inbound_check): Free post-dominance\n@@ -63,8 +67,7 @@\n 2012-05-03  Michael Matz  <matz@suse.de>\n \n \tPR bootstrap/53197\n-\t* tree-ssa-dse.c (dse_optimize_stmt): Take pointer to\n-\titerator.\n+\t* tree-ssa-dse.c (dse_optimize_stmt): Take pointer to iterator.\n \t(dse_enter_block): Properly iterate the whole sequence even\n \tif the last statement was removed.\n \n@@ -152,16 +155,15 @@\n \t(gsi_seq): Adjust.\n \t* tree-flow-inline.h (phi_nodes_ptr): New function.\n \n-\t* gimple-iterator.c (gsi_insert_seq_nodes_before): Adjust to \n+\t* gimple-iterator.c (gsi_insert_seq_nodes_before): Adjust to\n \tdatastructure and interface change.\n \t(gsi_insert_seq_before_without_update): Ditto.\n \t(gsi_insert_seq_nodes_after): Ditto.\n \t(gsi_insert_seq_after_without_update): Ditto.\n \t(gsi_split_seq_after): Ditto, don't use gimple_seq_alloc.\n \t(gsi_split_seq_before): Ditto.\n \t(gsi_start_phis): Adjust.\n-\t* tree-vect-loop.c (vect_determine_vectorization_factor): Use\n-\tgsi_none.\n+\t* tree-vect-loop.c (vect_determine_vectorization_factor): Use gsi_none.\n \t(vect_transform_loop): Ditto.\n \t* gimple.c (gimple_seq_add_stmt, gimple_seq_add_seq,\n \tgimple_seq_copy): Don't use gimple_seq_alloc.\n@@ -247,15 +249,13 @@\n \n \t* tree-ssa-loop-im.c (move_computations_stmt): First remove\n \tthen insert stmt.\n-\t* tree-complex.c (update_complex_components_on_edge): Don't\n-\tcopy gsi.\n+\t* tree-complex.c (update_complex_components_on_edge): Don't copy gsi.\n \t* tree-phinodes.c (resize_phi_node): Don't resize stmt in-place,\n \treturn new stmt.\n \t(reserve_phi_args_for_new_edge): Change call to above,\n \tuse gsi_set_stmt.\n \n-\t* omp-low.c (lower_omp): Change prototype to take pointer to\n-\tsequence.\n+\t* omp-low.c (lower_omp): Change prototype to take pointer to sequence.\n \t(lower_rec_input_clauses): Use gimple_seq_add_seq instead of\n \titerators.  Adjust call to lower_omp.\n \t(lower_lastprivate_clauses): Adjust call to lower_omp.\n@@ -287,8 +287,7 @@\n \t(gimple_try_catch_may_fallthru): Call gsi_start with lvalue.\n \t* tree-nested.c (walk_body): Take pointer to sequence, use\n \twalk_gimple_seq_mod.\n-\t(walk_function): Adjust call to walk_body, set possibly changed\n-\tbody.\n+\t(walk_function): Adjust call to walk_body, set possibly changed body.\n \t(walk_gimple_omp_for): Adjust calls to walk_body.\n \t(convert_nonlocal_omp_clauses): Ditto.\n \t(convert_nonlocal_reference_stmt): Ditto.\n@@ -358,11 +357,10 @@\n \t* config/i386/i386-c.c (ix86_target_macros_internal): Set\n \tHLE defines.\n \t(ix86_target_string)<-mhle>: New.\n-\t(ix86_valid_target_attribute_inner_p)<OPT_mhle>: Ditto.\n-\t* config/i386/i386.c (ix86_target_string)<OPTION_MASK_ISA_HLE>:\n-\tNew.\n-\t(ix86_valid_target_attribute_inner_p)<OPT_mhle>: Ditto.\n-\t(ix86_option_override_internal)<PTA_HLE>: New switch, set it\n+\t(ix86_valid_target_attribute_inner_p) <OPT_mhle>: Ditto.\n+\t* config/i386/i386.c (ix86_target_string) <OPTION_MASK_ISA_HLE>: New.\n+\t(ix86_valid_target_attribute_inner_p) <OPT_mhle>: Ditto.\n+\t(ix86_option_override_internal) <PTA_HLE>: New switch, set it\n \tenabled for generic, generic64 and core-avx2.\n \t(ix86_print_operand): Generate HLE lock prefixes.\n \t(ix86_memmodel_check): New.\n@@ -424,7 +422,8 @@\n \t(host_integerp): Likewise.\n \t(int_fits_type_p): Likewise.\n \t* varasm.c (output_constructor_regular_field): Sign-extend the\n-\tfield-offset to cater for negative offsets produced by the Ada frontend.\n+\tfield-offset to cater for negative offsets produced by the Ada\n+\tfrontend.\n \t* omp-low.c (extract_omp_for_data): Convert the loop step to\n \tsigned for pointer adjustments.\n \n@@ -507,15 +506,15 @@\n \tUpdate calls to simple_move and find_decomposable_shift_zext.\n \n 2012-05-01  Ian Bolton  <ian.bolton@arm.com>\n-            Sameera Deshpande  <sameera.deshpande@arm.com>\n-            Greta Yorsh  <greta.yorsh@arm.com>\n+\t    Sameera Deshpande  <sameera.deshpande@arm.com>\n+\t    Greta Yorsh  <greta.yorsh@arm.com>\n \n \t* config/arm/arm-protos.h (thumb_unexpanded_epilogue): Rename to...\n-        (thumb1_unexpanded_epilogue): ...this.\n+\t(thumb1_unexpanded_epilogue): ...this.\n \t* config/arm/arm.c (thumb_unexpanded_epilogue): Rename to...\n-        (thumb1_unexpanded_epilogue): ...this.\n+\t(thumb1_unexpanded_epilogue): ...this.\n \t* config/arm/arm.md (thumb_unexpanded_epilogue): Rename to...\n-        (thumb1_unexpanded_epilogue): ...this.\n+\t(thumb1_unexpanded_epilogue): ...this.\n \n 2012-05-01  Richard Earnshaw  <rearnsha@arm.com>\n \n@@ -551,7 +550,7 @@\n \t(update_edge_key): Ditto.\n \t(flatten_function): Ditto.\n \t(ipa_inline): Ditto.\n-\t(inlinw_always_inline_functions): Ditto.\n+\t(inline_always_inline_functions): Ditto.\n \t(early_inline_small_functions): Ditto.\n \n 2012-04-30  Uros Bizjak  <ubizjak@gmail.com>"}, {"sha": "a7d04f276cc3621628b75fa81ee665d7ec6c8fbe", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cbdef5105b002f57a9e60be4768084b3c36e405/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cbdef5105b002f57a9e60be4768084b3c36e405/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=1cbdef5105b002f57a9e60be4768084b3c36e405", "patch": "@@ -67,21 +67,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n   ASM_OUTPUT_ALIGNED_LOCAL (FILE, NAME, SIZE, ALIGN);\t\t\t\\\n } while (0)\n \n-/* The biggest alignment supported by ELF in bits. 32-bit ELF \n-   supports section alignment up to (0x80000000 * 8), while \n-   64-bit ELF supports (0x8000000000000000 * 8). If this macro \n-   is not defined, the default is the largest alignment supported \n-   by 32-bit ELF and representable on a 32-bit host. Use this\n-   macro to limit the alignment which can be specified using\n-   the `__attribute__ ((aligned (N)))' construct.\n-\n-   This value is really 2^63.  Since gcc figures the alignment in bits,\n-   we could only potentially get to 2^60 on suitable hosts.  Due to other\n-   considerations in varasm, we must restrict this to what fits in an int.  */\n-\n-#undef  MAX_OFILE_ALIGNMENT\n-#define MAX_OFILE_ALIGNMENT (((unsigned int) 1 << 28) * 8)\n-\n #undef  BSS_SECTION_ASM_OP\n #define BSS_SECTION_ASM_OP\t\"\\t.section\\t.bss\"\n #undef  SBSS_SECTION_ASM_OP"}]}