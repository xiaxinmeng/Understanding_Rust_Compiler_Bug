{"sha": "8c357d884b16cb3c14cba8a61be5b53fd04a6bfe", "node_id": "C_kwDOANBUbNoAKDhjMzU3ZDg4NGIxNmNiM2MxNGNiYThhNjFiZTViNTNmZDA0YTZiZmU", "commit": {"author": {"name": "Cesar Philippidis", "email": "cesar@codesourcery.com", "date": "2017-04-05T15:23:58Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-11-02T19:51:40Z"}, "message": "Add 'libgomp.oacc-fortran/declare-allocatable-1.f90'\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-fortran/declare-allocatable-1.f90: New.\n\nCo-authored-by: Thomas Schwinge <thomas@codesourcery.com>", "tree": {"sha": "c031ac0e23bb969240bce769a284eefa97d573e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c031ac0e23bb969240bce769a284eefa97d573e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c357d884b16cb3c14cba8a61be5b53fd04a6bfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c357d884b16cb3c14cba8a61be5b53fd04a6bfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c357d884b16cb3c14cba8a61be5b53fd04a6bfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c357d884b16cb3c14cba8a61be5b53fd04a6bfe/comments", "author": {"login": "cesarjp", "id": 4576177, "node_id": "MDQ6VXNlcjQ1NzYxNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4576177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cesarjp", "html_url": "https://github.com/cesarjp", "followers_url": "https://api.github.com/users/cesarjp/followers", "following_url": "https://api.github.com/users/cesarjp/following{/other_user}", "gists_url": "https://api.github.com/users/cesarjp/gists{/gist_id}", "starred_url": "https://api.github.com/users/cesarjp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cesarjp/subscriptions", "organizations_url": "https://api.github.com/users/cesarjp/orgs", "repos_url": "https://api.github.com/users/cesarjp/repos", "events_url": "https://api.github.com/users/cesarjp/events{/privacy}", "received_events_url": "https://api.github.com/users/cesarjp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1a6b912b5f905e768da4d0f434591b4d523be49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a6b912b5f905e768da4d0f434591b4d523be49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1a6b912b5f905e768da4d0f434591b4d523be49"}], "stats": {"total": 268, "additions": 268, "deletions": 0}, "files": [{"sha": "1c8ccd9f61f25f874d3f846d564731b992859601", "filename": "libgomp/testsuite/libgomp.oacc-fortran/declare-allocatable-1.f90", "status": "added", "additions": 268, "deletions": 0, "changes": 268, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c357d884b16cb3c14cba8a61be5b53fd04a6bfe/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-allocatable-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c357d884b16cb3c14cba8a61be5b53fd04a6bfe/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-allocatable-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-allocatable-1.f90?ref=8c357d884b16cb3c14cba8a61be5b53fd04a6bfe", "patch": "@@ -0,0 +1,268 @@\n+! Test OpenACC 'declare create' with allocatable arrays.\n+\n+! { dg-do run }\n+\n+!TODO-OpenACC-declare-allocate\n+! Not currently implementing correct '-DACC_MEM_SHARED=0' behavior:\n+! Missing support for OpenACC \"Changes from Version 2.0 to 2.5\":\n+! \"The 'declare create' directive with a Fortran 'allocatable' has new behavior\".\n+! { dg-xfail-run-if TODO { *-*-* } { -DACC_MEM_SHARED=0 } }\n+\n+!TODO { dg-additional-options -fno-inline } for stable results regarding OpenACC 'routine'.\n+\n+! { dg-additional-options -fopt-info-all-omp }\n+! { dg-additional-options -foffload=-fopt-info-all-omp }\n+\n+! { dg-additional-options --param=openacc-privatization=noisy }\n+! { dg-additional-options -foffload=--param=openacc-privatization=noisy }\n+! Prune a few: uninteresting, and potentially varying depending on GCC configuration (data types):\n+! { dg-prune-output {note: variable '[Di]\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} }\n+\n+! { dg-additional-options -Wopenacc-parallelism }\n+\n+! It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n+! passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n+! so to maintain compatibility with earlier Tcl releases, we manually\n+! initialize counter variables:\n+! { dg-line l_dummy[variable c 0] }\n+! { dg-message dummy {} { target iN-VAl-Id } l_dummy } to avoid\n+! \"WARNING: dg-line var l_dummy defined, but not used\".\n+\n+\n+module vars\n+  implicit none\n+  integer, parameter :: n = 100\n+  real*8, allocatable :: b(:)\n+ !$acc declare create (b)\n+end module vars\n+\n+program test\n+  use vars\n+  use openacc\n+  implicit none\n+  real*8 :: a\n+  integer :: i\n+\n+  interface\n+     subroutine sub1\n+       !$acc routine gang\n+     end subroutine sub1\n+\n+     subroutine sub2\n+     end subroutine sub2\n+\n+     real*8 function fun1 (ix)\n+       integer ix\n+       !$acc routine seq\n+     end function fun1\n+\n+     real*8 function fun2 (ix)\n+       integer ix\n+       !$acc routine seq\n+     end function fun2\n+  end interface\n+\n+  if (allocated (b)) error stop\n+\n+  ! Test local usage of an allocated declared array.\n+\n+  allocate (b(n))\n+\n+  if (.not.allocated (b)) error stop\n+  if (.not.acc_is_present (b)) error stop\n+\n+  a = 2.0\n+\n+  !$acc parallel loop ! { dg-line l[incr c] }\n+  ! { dg-note {variable 'i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l$c }\n+  !   { dg-note {variable 'i' ought to be adjusted for OpenACC privatization level: 'vector'} {} { target *-*-* } l$c }\n+  !   { dg-note {variable 'i' adjusted for OpenACC privatization level: 'vector'} {} { target { ! openacc_host_selected } } l$c }\n+  ! { dg-note {variable 'i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l$c }\n+  ! { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l$c }\n+  do i = 1, n\n+     b(i) = i * a\n+  end do\n+\n+  if (.not.acc_is_present (b)) error stop\n+\n+  !$acc update host(b)\n+\n+  do i = 1, n\n+     if (b(i) /= i*a) error stop\n+  end do\n+\n+  deallocate (b)\n+\n+  ! Test the usage of an allocated declared array inside an acc\n+  ! routine subroutine.\n+\n+  allocate (b(n))\n+\n+  if (.not.allocated (b)) error stop\n+  if (.not.acc_is_present (b)) error stop\n+\n+  !$acc parallel\n+  call sub1 ! { dg-line l[incr c] }\n+  ! { dg-optimized {assigned OpenACC gang worker vector loop parallelism} {} { target *-*-* } l$c }\n+  !$acc end parallel\n+\n+  if (.not.acc_is_present (b)) error stop\n+\n+  !$acc update host(b)\n+\n+  do i = 1, n\n+     if (b(i) /= i*2) error stop\n+  end do\n+\n+  deallocate (b)\n+\n+  ! Test the usage of an allocated declared array inside a host\n+  ! subroutine.\n+\n+  call sub2\n+\n+  if (.not.acc_is_present (b)) error stop\n+\n+  !$acc update host(b)\n+\n+  do i = 1, n\n+     if (b(i) /= 1.0) error stop\n+  end do\n+\n+  deallocate (b)\n+\n+  if (allocated (b)) error stop\n+\n+  ! Test the usage of an allocated declared array inside an acc\n+  ! routine function.\n+\n+  allocate (b(n))\n+\n+  if (.not.allocated (b)) error stop\n+  if (.not.acc_is_present (b)) error stop\n+\n+  !$acc parallel loop ! { dg-line l[incr c] }\n+  ! { dg-note {variable 'i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l$c }\n+  !   { dg-note {variable 'i' ought to be adjusted for OpenACC privatization level: 'vector'} {} { target *-*-* } l$c }\n+  !   { dg-note {variable 'i' adjusted for OpenACC privatization level: 'vector'} {} { target { ! openacc_host_selected } } l$c }\n+  ! { dg-note {variable 'i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l$c }\n+  ! { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l$c }\n+  do i = 1, n\n+     b(i) = 1.0\n+  end do\n+\n+  !$acc parallel loop ! { dg-line l[incr c] }\n+  ! { dg-note {variable 'i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l$c }\n+  !   { dg-note {variable 'i' ought to be adjusted for OpenACC privatization level: 'vector'} {} { target *-*-* } l$c }\n+  !   { dg-note {variable 'i' adjusted for OpenACC privatization level: 'vector'} {} { target { ! openacc_host_selected } } l$c }\n+  ! { dg-note {variable 'i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l$c }\n+  ! { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l$c }\n+  do i = 1, n\n+     b(i) = fun1 (i) ! { dg-line l[incr c] }\n+     ! { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l$c }\n+  end do\n+\n+  if (.not.acc_is_present (b)) error stop\n+\n+  !$acc update host(b)\n+\n+  do i = 1, n\n+     if (b(i) /= i) error stop\n+  end do\n+\n+  deallocate (b)\n+\n+  ! Test the usage of an allocated declared array inside a host\n+  ! function.\n+\n+  allocate (b(n))\n+\n+  if (.not.allocated (b)) error stop\n+  if (.not.acc_is_present (b)) error stop\n+\n+  !$acc parallel loop ! { dg-line l[incr c] }\n+  ! { dg-note {variable 'i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l$c }\n+  !   { dg-note {variable 'i' ought to be adjusted for OpenACC privatization level: 'vector'} {} { target *-*-* } l$c }\n+  !   { dg-note {variable 'i' adjusted for OpenACC privatization level: 'vector'} {} { target { ! openacc_host_selected } } l$c }\n+  ! { dg-note {variable 'i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l$c }\n+  ! { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l$c }\n+  do i = 1, n\n+     b(i) = 1.0\n+  end do\n+\n+  !$acc update host(b)\n+\n+  do i = 1, n\n+     b(i) = fun2 (i)\n+  end do\n+\n+  if (.not.acc_is_present (b)) error stop\n+\n+  do i = 1, n\n+     if (b(i) /= i*i) error stop\n+  end do\n+\n+  deallocate (b)\n+end program test ! { dg-line l[incr c] }\n+! { dg-bogus {note: variable 'overflow\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {TODO n/a} { xfail *-*-* } l$c }\n+! { dg-bogus {note: variable 'not_prev_allocated\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {TODO n/a} { xfail *-*-* } l$c }\n+! { dg-bogus {note: variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: artificial} {TODO n/a} { xfail *-*-* } l$c }\n+\n+! Set each element in array 'b' at index i to i*2.\n+\n+subroutine sub1 ! { dg-line subroutine_sub1 }\n+  use vars\n+  implicit none\n+  integer i\n+  !$acc routine gang\n+  ! { dg-bogus {[Ww]arning: region is worker partitioned but does not contain worker partitioned code} {TODO default 'gang' 'vector'} { xfail *-*-* } subroutine_sub1 }\n+\n+  !$acc loop ! { dg-line l[incr c] }\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l$c }\n+  ! { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l$c }\n+  do i = 1, n\n+     b(i) = i*2\n+  end do\n+end subroutine sub1\n+\n+! Allocate array 'b', and set it to all 1.0.\n+\n+subroutine sub2\n+  use vars\n+  use openacc\n+  implicit none\n+  integer i\n+\n+  allocate (b(n))\n+\n+  if (.not.allocated (b)) error stop\n+  if (.not.acc_is_present (b)) error stop\n+\n+  !$acc parallel loop ! { dg-line l[incr c] }\n+  ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l$c }\n+  ! { dg-optimized {assigned OpenACC gang vector loop parallelism} {} { target *-*-* } l$c }\n+  do i = 1, n\n+     b(i) = 1.0\n+  end do\n+end subroutine sub2\n+\n+! Return b(i) * i;\n+\n+real*8 function fun1 (i)\n+  use vars\n+  implicit none\n+  integer i\n+  !$acc routine seq\n+\n+  fun1 = b(i) * i\n+end function fun1\n+\n+! Return b(i) * i * i;\n+\n+real*8 function fun2 (i)\n+  use vars\n+  implicit none\n+  integer i\n+\n+  fun2 = b(i) * i * i\n+end function fun2"}]}