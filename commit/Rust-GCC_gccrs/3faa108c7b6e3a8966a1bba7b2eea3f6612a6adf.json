{"sha": "3faa108c7b6e3a8966a1bba7b2eea3f6612a6adf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZhYTEwOGM3YjZlM2E4OTY2YTFiYmE3YjJlZWEzZjY2MTJhNmFkZg==", "commit": {"author": {"name": "Alex Samuel", "email": "samuel@codesourcery.com", "date": "2000-06-05T18:24:07Z"}, "committer": {"name": "Alex Samuel", "email": "samuel@gcc.gnu.org", "date": "2000-06-05T18:24:07Z"}, "message": "cp-demangle.c (demangle_prefix): Cast argument to isdigit to unsigned char.\n\n\t* cp-demangle.c (demangle_prefix): Cast argument to isdigit to\n\tunsigned char.\n\t(demangle_unqualified_name): Likewise.\n\t(demangle_number_literally): Likewise.\n\t(demangle_type): Likewise.\n\t(demangle_substitution): Likewise.\n\t(is_mangled_char): Likewise, for isalnum.\n\nFrom-SVN: r34411", "tree": {"sha": "4c63a175faccf871e9c10851f6f95295eed2837c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c63a175faccf871e9c10851f6f95295eed2837c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3faa108c7b6e3a8966a1bba7b2eea3f6612a6adf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3faa108c7b6e3a8966a1bba7b2eea3f6612a6adf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3faa108c7b6e3a8966a1bba7b2eea3f6612a6adf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3faa108c7b6e3a8966a1bba7b2eea3f6612a6adf/comments", "author": null, "committer": null, "parents": [{"sha": "77b9151288dfa9236e85bde9b5f68bdab7cc3dfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77b9151288dfa9236e85bde9b5f68bdab7cc3dfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77b9151288dfa9236e85bde9b5f68bdab7cc3dfc"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "db7e5599c01af7a37b6db05f7d3ffc73a7d3d9be", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3faa108c7b6e3a8966a1bba7b2eea3f6612a6adf/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3faa108c7b6e3a8966a1bba7b2eea3f6612a6adf/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=3faa108c7b6e3a8966a1bba7b2eea3f6612a6adf", "patch": "@@ -1,3 +1,13 @@\n+2000-06-05  Alex Samuel  <samuel@codesourcery.com>\n+\n+\t* cp-demangle.c (demangle_prefix): Cast argument to isdigit to\n+\tunsigned char.\n+\t(demangle_unqualified_name): Likewise.\n+\t(demangle_number_literally): Likewise.\n+\t(demangle_type): Likewise.\n+\t(demangle_substitution): Likewise.\n+\t(is_mangled_char): Likewise, for isalnum.\n+\n 2000-06-04  Alex Samuel  <samuel@codesourcery.com>\n \n \t* Makefile.in (CFILES): Add cp-demangle.c and dyn-string.c."}, {"sha": "0a3729330a49bd30656cae4099e62fea75b8674a", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3faa108c7b6e3a8966a1bba7b2eea3f6612a6adf/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3faa108c7b6e3a8966a1bba7b2eea3f6612a6adf/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=3faa108c7b6e3a8966a1bba7b2eea3f6612a6adf", "patch": "@@ -1042,7 +1042,7 @@ demangle_prefix (dm, template_p)\n \n       peek = peek_char (dm);\n       \n-      if (isdigit (peek)\n+      if (isdigit ((unsigned char) peek)\n \t  || (peek >= 'a' && peek <= 'z')\n \t  || peek == 'C' || peek == 'D'\n \t  || peek == 'S')\n@@ -1103,7 +1103,7 @@ demangle_unqualified_name (dm)\n \n   DEMANGLE_TRACE (\"unqualified-name\", dm);\n \n-  if (isdigit (peek))\n+  if (isdigit ((unsigned char) peek))\n     RETURN_IF_ERROR (demangle_source_name (dm));\n   else if (peek >= 'a' && peek <= 'z')\n     {\n@@ -1207,7 +1207,7 @@ demangle_number_literally (dm, str, base, is_signed)\n   while (1)\n     {\n       char peek = peek_char (dm);\n-      if (isdigit (peek)\n+      if (isdigit ((unsigned char) peek)\n \t  || (base == 36 && peek >= 'A' && peek <= 'Z'))\n \t/* Accumulate digits.  */\n \tdyn_string_append_char (str, next_char (dm));\n@@ -1792,7 +1792,7 @@ demangle_type (dm)\n \n   /* A <class-enum-type> can start with a digit (a <source-name>), an\n      N (a <nested-name>), or a Z (a <local-name>).  */\n-  if (isdigit (peek) || peek == 'N' || peek == 'Z')\n+  if (isdigit ((unsigned char) peek) || peek == 'N' || peek == 'Z')\n     RETURN_IF_ERROR (demangle_class_enum_type (dm, &template_p));\n   else if (peek >= 'a' && peek <= 'z')\n     {\n@@ -2555,7 +2555,7 @@ demangle_substitution (dm, template_p, special_std_substitution)\n   /* If the following character is 0-9 or a capital letter, interpret\n      the sequence up to the next underscore as a base-36 substitution\n      index.  */\n-  else if (isdigit (peek) \n+  else if (isdigit ((unsigned char) peek) \n \t   || (peek >= 'A' && peek <= 'Z'))\n     RETURN_IF_ERROR (demangle_number (dm, &seq_id, 36, 0));\n   else \n@@ -2710,7 +2710,7 @@ demangle_discriminator (dm, suppress_first)\n       if (flag_verbose)\n \tresult_append (dm, \" [#\");\n       /* Check if there's a number following the underscore.  */\n-      if (isdigit (peek_char (dm)))\n+      if (isdigit ((unsigned char) peek_char (dm)))\n \t{\n \t  int discriminator;\n \t  /* Demangle the number.  */\n@@ -2821,7 +2821,8 @@ static void print_usage\n   PARAMS ((FILE* fp, int exit_value));\n \n /* Non-zero if CHAR is a character than can occur in a mangled name.  */\n-#define is_mangled_char(CHAR)  (isalnum (CHAR) || (CHAR) == '_')\n+#define is_mangled_char(CHAR)                                           \\\n+  (isalnum ((unsigned char) (CHAR)) || (CHAR) == '_')\n \n /* The name of this program, as invoked.  */\n const char* program_name;"}]}