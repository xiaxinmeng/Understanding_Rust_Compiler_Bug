{"sha": "6bb760348681ba40cd1f94eb0b36024592f4948e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJiNzYwMzQ4NjgxYmE0MGNkMWY5NGViMGIzNjAyNDU5MmY0OTQ4ZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-10-15T23:37:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-10-15T23:37:54Z"}, "message": "forward_list.h: Remove pointless const qualifiers in const_casts.\n\n2008-10-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/forward_list.h: Remove pointless const qualifiers in\n\tconst_casts.\n\t* include/bits/forward_list.tcc: Likewise.\n\n\t* include/bits/forward_list.h (forward_list<>::pointer,\n\tconst_pointer, reference, const_reference): Fix, use _Tp_alloc_type.\n\t* testsuite/23_containers/forward_list/requirements/\n\texplicit_instantiation/1.cc: New.\n\t* testsuite/23_containers/forward_list/requirements/\n\texplicit_instantiation/1.cc: Likewise.\n\nFrom-SVN: r141153", "tree": {"sha": "be83331ac51cf92b266923d8171dd28aae9b9e99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be83331ac51cf92b266923d8171dd28aae9b9e99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bb760348681ba40cd1f94eb0b36024592f4948e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bb760348681ba40cd1f94eb0b36024592f4948e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bb760348681ba40cd1f94eb0b36024592f4948e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bb760348681ba40cd1f94eb0b36024592f4948e/comments", "author": null, "committer": null, "parents": [{"sha": "8f47a7f6d81ea93edcea5fe63c61a7c727f7cb1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f47a7f6d81ea93edcea5fe63c61a7c727f7cb1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f47a7f6d81ea93edcea5fe63c61a7c727f7cb1e"}], "stats": {"total": 156, "additions": 120, "deletions": 36}, "files": [{"sha": "378632274993f31d394128349f5ffb6c3a10e3f8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb760348681ba40cd1f94eb0b36024592f4948e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb760348681ba40cd1f94eb0b36024592f4948e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6bb760348681ba40cd1f94eb0b36024592f4948e", "patch": "@@ -1,3 +1,16 @@\n+2008-10-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/forward_list.h: Remove pointless const qualifiers in\n+\tconst_casts.\n+\t* include/bits/forward_list.tcc: Likewise.\n+\n+\t* include/bits/forward_list.h (forward_list<>::pointer,\n+\tconst_pointer, reference, const_reference): Fix, use _Tp_alloc_type.\n+\t* testsuite/23_containers/forward_list/requirements/\n+\texplicit_instantiation/1.cc: New.\n+\t* testsuite/23_containers/forward_list/requirements/\n+\texplicit_instantiation/1.cc: Likewise.\n+\n 2008-10-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/forward_list.h (forward_list<>::max_size): Use"}, {"sha": "5e8cfec5ed5aca25b49df7ab601a59e583d9e9a6", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 30, "deletions": 32, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb760348681ba40cd1f94eb0b36024592f4948e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb760348681ba40cd1f94eb0b36024592f4948e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=6bb760348681ba40cd1f94eb0b36024592f4948e", "patch": "@@ -31,8 +31,8 @@\n  *  This is a Standard C++ Library header.\n  */\n \n-#ifndef _GLIBCXX_FORWARD_LIST_H\n-#define _GLIBCXX_FORWARD_LIST_H 1\n+#ifndef _FORWARD_LIST_H\n+#define _FORWARD_LIST_H 1\n \n #pragma GCC system_header\n \n@@ -282,6 +282,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef typename _Alloc::template rebind<_Fwd_list_node<_Tp>>::other\n         _Node_alloc_type;\n \n+      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;\n+\n       struct _Fwd_list_impl \n       : public _Node_alloc_type\n       {\n@@ -300,7 +302,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _Fwd_list_impl _M_impl;\n \n     public:\n-      typedef _Alloc                          allocator_type;\n       typedef _Fwd_list_iterator<_Tp>         iterator;\n       typedef _Fwd_list_const_iterator<_Tp>   const_iterator;\n \n@@ -314,15 +315,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_get_Node_allocator() const\n       { return *static_cast<const _Node_alloc_type*>(&this->_M_impl); }\n \n-      allocator_type\n-      get_allocator() const\n-      { return this->_M_get_Node_allocator(); }\n-\n       _Fwd_list_base()\n       : _M_impl()\n       { this->_M_impl._M_head._M_next = 0; }\n \n-      _Fwd_list_base(const allocator_type& __a)\n+      _Fwd_list_base(const _Alloc& __a)\n       : _M_impl(__a)\n       { this->_M_impl._M_head._M_next = 0; }\n \n@@ -371,7 +368,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         _M_insert_after(const_iterator __pos, _Args&&... __args)\n         {\n           _Fwd_list_node_base* __to\n-            = const_cast<_Fwd_list_node_base* const>(__pos._M_node);\n+            = const_cast<_Fwd_list_node_base*>(__pos._M_node);\n           _Node* __thing = _M_create_node(std::forward<_Args>(__args)...);\n           __thing->_M_next = __to->_M_next;\n           __to->_M_next = __thing;\n@@ -425,21 +422,22 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     class forward_list : private _Fwd_list_base<_Tp, _Alloc>\n     {\n     private:\n-      typedef _Fwd_list_base<_Tp, _Alloc>       _Base;\n-      typedef _Fwd_list_node<_Tp>               _Node;\n+      typedef _Fwd_list_base<_Tp, _Alloc>                  _Base;\n+      typedef _Fwd_list_node<_Tp>                          _Node;\n+      typedef typename _Base::_Tp_alloc_type               _Tp_alloc_type;\n \n     public:\n       // types:\n-      typedef typename _Alloc::reference        reference;\n-      typedef typename _Alloc::const_reference  const_reference;\n-      typedef _Fwd_list_iterator<_Tp>           iterator;\n-      typedef _Fwd_list_const_iterator<_Tp>     const_iterator;\n-      typedef std::size_t                       size_type;\n-      typedef std::ptrdiff_t                    difference_type;\n-      typedef _Tp                               value_type;\n-      typedef typename _Base::allocator_type    allocator_type;\n-      typedef typename _Alloc::pointer          pointer;\n-      typedef typename _Alloc::const_pointer    const_pointer;\n+      typedef _Tp                                          value_type;\n+      typedef typename _Tp_alloc_type::pointer             pointer;\n+      typedef typename _Tp_alloc_type::const_pointer       const_pointer;\n+      typedef typename _Tp_alloc_type::reference           reference;\n+      typedef typename _Tp_alloc_type::const_reference     const_reference;\n+      typedef _Fwd_list_iterator<_Tp>                      iterator;\n+      typedef _Fwd_list_const_iterator<_Tp>                const_iterator;\n+      typedef std::size_t                                  size_type;\n+      typedef std::ptrdiff_t                               difference_type;\n+      typedef _Alloc                                       allocator_type;\n \n       // 23.2.3.1 construct/copy/destroy:\n \n@@ -647,7 +645,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       /// Get a copy of the memory allocation object.\n       allocator_type\n       get_allocator() const\n-      { return _Base::get_allocator(); }\n+      { return this->_M_get_Node_allocator(); }\n \n       // 23.2.3.2 iterators:\n \n@@ -858,7 +856,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       insert_after(const_iterator __pos, const _Tp& __val)\n       {\n         _Fwd_list_node_base* __to\n-          = const_cast<_Fwd_list_node_base* const>(__pos._M_node);\n+\t  = const_cast<_Fwd_list_node_base*>(__pos._M_node);\n         _Node* __thing = _M_create_node(__val);\n         __thing->_M_next = __to->_M_next;\n         __to->_M_next = __thing;\n@@ -872,7 +870,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       insert_after(const_iterator __pos, _Tp&& __val)\n       {\n         _Fwd_list_node_base* __to\n-          = const_cast<_Fwd_list_node_base* const>(__pos._M_node);\n+          = const_cast<_Fwd_list_node_base*>(__pos._M_node);\n         _Node* __thing = _M_create_node(std::move(__val));\n         __thing->_M_next = __to->_M_next;\n         __to->_M_next = __thing;\n@@ -950,7 +948,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       erase_after(const_iterator __pos)\n       {\n         _Fwd_list_node_base* __tmp\n-          = const_cast<_Fwd_list_node_base* const>(__pos._M_node);\n+          = const_cast<_Fwd_list_node_base*>(__pos._M_node);\n         if (__tmp)\n           return iterator(_Base::_M_erase_after(__tmp));\n         else\n@@ -980,7 +978,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       erase_after(const_iterator __pos, iterator __last)\n       {\n         _Fwd_list_node_base* __tmp\n-          = const_cast<_Fwd_list_node_base* const>(__pos._M_node);\n+          = const_cast<_Fwd_list_node_base*>(__pos._M_node);\n         return iterator(_M_erase_after(__tmp, __last._M_node));\n       }\n \n@@ -1060,9 +1058,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         if (!__list.empty() && &__list != this)\n           {\n             _Fwd_list_node_base* __tmp\n-              = const_cast<_Fwd_list_node_base* const>(__pos._M_node);\n+              = const_cast<_Fwd_list_node_base*>(__pos._M_node);\n             const_iterator __before = __list.cbefore_begin();\n-            __tmp->_M_transfer_after(const_cast<_Fwd_list_node_base* const>\n+            __tmp->_M_transfer_after(const_cast<_Fwd_list_node_base*>\n \t\t\t\t     (__before._M_node));\n           }\n       }\n@@ -1100,10 +1098,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n                    const_iterator __before, const_iterator __last)\n       {\n         _Fwd_list_node_base* __tmp\n-          = const_cast<_Fwd_list_node_base* const>(__pos._M_node);\n-        __tmp->_M_transfer_after(const_cast<_Fwd_list_node_base* const>\n+          = const_cast<_Fwd_list_node_base*>(__pos._M_node);\n+        __tmp->_M_transfer_after(const_cast<_Fwd_list_node_base*>\n \t\t\t\t (__before._M_node),\n-\t\t\t\t const_cast<_Fwd_list_node_base* const>\n+\t\t\t\t const_cast<_Fwd_list_node_base*>\n \t\t\t\t (__last._M_node));\n       }\n \n@@ -1335,4 +1333,4 @@ _GLIBCXX_END_NAMESPACE // namespace std\n \n #endif // __GXX_EXPERIMENTAL_CXX0X__\n \n-#endif // _GLIBCXX_FORWARD_LIST_H\n+#endif // _FORWARD_LIST_H"}, {"sha": "a7fabf83353b73bb672884ff06d7189b65821237", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb760348681ba40cd1f94eb0b36024592f4948e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb760348681ba40cd1f94eb0b36024592f4948e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=6bb760348681ba40cd1f94eb0b36024592f4948e", "patch": "@@ -299,7 +299,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t size_type __n, const _Tp& __val)\n     {\n       _Fwd_list_node_base* __to\n-\t= const_cast<_Fwd_list_node_base* const>(__pos._M_node);\n+\t= const_cast<_Fwd_list_node_base*>(__pos._M_node);\n       _Fwd_list_node_base* __keep = __to->_M_next;\n       for (size_type __i = 0; __i < __n; ++__i)\n \t{\n@@ -317,7 +317,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t   _InputIterator __first, _InputIterator __last)\n       {\n \t_Fwd_list_node_base* __to\n-\t  = const_cast<_Fwd_list_node_base* const>(__pos._M_node);\n+\t  = const_cast<_Fwd_list_node_base*>(__pos._M_node);\n \t_Fwd_list_node_base* __keep = __to->_M_next;\n \t_InputIterator __curr = __first;\n \twhile (__curr != __last)\n@@ -335,7 +335,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     insert_after(const_iterator __pos, std::initializer_list<_Tp> __il)\n     {\n       _Fwd_list_node_base* __to\n-\t= const_cast<_Fwd_list_node_base* const>(__pos._M_node);\n+\t= const_cast<_Fwd_list_node_base*>(__pos._M_node);\n       _Fwd_list_node_base* __keep = __to->_M_next;\n       const _Tp* __item = __il.begin();\n       while (__item != __il.end())\n@@ -431,7 +431,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         while (++__next != __last)\n \t{\n \t  if (__binary_pred(*__first, *__next))\n-              erase_after(__first);\n+\t    erase_after(__first);\n \t  else\n \t    __first = __next;\n \t  __next = __first;"}, {"sha": "2650632e26cba05bff49e5dbb6b3d6249a2dce8d", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/explicit_instantiation/1.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb760348681ba40cd1f94eb0b36024592f4948e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb760348681ba40cd1f94eb0b36024592f4948e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=6bb760348681ba40cd1f94eb0b36024592f4948e", "patch": "@@ -0,0 +1,36 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <forward_list>\n+\n+// { dg-do compile }\n+\n+template class std::forward_list<int>;"}, {"sha": "ca34423cc4d3e87a71e4835b25d16c2241b63d08", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/explicit_instantiation/3.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb760348681ba40cd1f94eb0b36024592f4948e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb760348681ba40cd1f94eb0b36024592f4948e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=6bb760348681ba40cd1f94eb0b36024592f4948e", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <forward_list>\n+\n+// { dg-do compile }\n+\n+// libstdc++/21770\n+template class std::forward_list<int, std::allocator<char> >;"}]}