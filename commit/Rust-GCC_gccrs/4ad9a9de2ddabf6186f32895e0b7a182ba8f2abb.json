{"sha": "4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFkOWE5ZGUyZGRhYmY2MTg2ZjMyODk1ZTBiN2ExODJiYThmMmFiYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-12-13T21:59:39Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-12-13T21:59:39Z"}, "message": "lto-streamer-out.c (write_symbol): Use proper 64-bit host type.\n\n\t* lto-streamer-out.c (write_symbol): Use proper 64-bit host type.\n\t* lto-cgraph.c (input_cgraph_opt_section): Use 'int' for offsets.\n\t* lto-streamer-in.c (lto_read_body): Likewise.\n\t(lto_input_toplevel_asms): Likewise.\n\t* lto-section-in.c (lto_create_simple_input_block): Likewise.\n\t* ipa-inline-analysis.c (inline_read_section): Likewise.\n\t* ipa-prop.c (ipa_prop_read_section): Likewise.\n\n\t* df.h (DF_NOTE): Fix typo in comment.\nlto/\n\t* lto.h (lto_parse_hex): Delete.\n\t* lto.c (lto_read_decls): Use 'int' for offsets.\n\t(lto_parse_hex): Make static and return proper 64-bit host type.\n\t(lto_resolution_read): Use proper 64-bit host type.\n\nFrom-SVN: r182310", "tree": {"sha": "94f0149b723a3c60aa550ad41671de4d896fe032", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94f0149b723a3c60aa550ad41671de4d896fe032"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb/comments", "author": null, "committer": null, "parents": [{"sha": "03eee7f75c04f8c88666deca3f3c801532997ce3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03eee7f75c04f8c88666deca3f3c801532997ce3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03eee7f75c04f8c88666deca3f3c801532997ce3"}], "stats": {"total": 94, "additions": 55, "deletions": 39}, "files": [{"sha": "bf8184e16aaf42bcc3f6e6bdf82f990649b3bb8d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb", "patch": "@@ -1,3 +1,15 @@\n+2011-12-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* lto-streamer-out.c (write_symbol): Use proper 64-bit host type.\n+\t* lto-cgraph.c (input_cgraph_opt_section): Use 'int' for offsets.\n+\t* lto-streamer-in.c (lto_read_body): Likewise.\n+\t(lto_input_toplevel_asms): Likewise.\n+\t* lto-section-in.c (lto_create_simple_input_block): Likewise.\n+\t* ipa-inline-analysis.c (inline_read_section): Likewise.\n+\t* ipa-prop.c (ipa_prop_read_section): Likewise.\n+\n+\t* df.h (DF_NOTE): Fix typo in comment.\n+\n 2011-12-13  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* trans-mem.c (ipa_tm_create_version_alias): Set DECL_CONTEXT and\n@@ -14,7 +26,7 @@\n \t* config/mips/mips-cpus.def: Add Octeon2.\n \t* config/mips/mips-tables.opt: Regenerate.\n \t* config/mips/mips.md (define_attr \"cpu\"): Add Octeon2.\n-\t* config/mips/driver-native.c (host_detect_local_cpu): Support Octeon2 also.\n+\t* config/mips/driver-native.c (host_detect_local_cpu): Support Octeon2.\n \t* config/mips/octeon.md (octeon_arith): Add Octeon2.\n \t(octeon_condmove): Likewise.\n \t(octeon_load): Rename to ..\n@@ -58,7 +70,7 @@\n \n 2011-12-13  Aldy Hernandez  <aldyh@redhat.com>\n \n-\tPR/51443\n+\tPR middle-end/51443\n \t* trans-mem.c (struct diagnose_tm): Remove saw_unsafe.\n \t(diagnose_tm_1): Same.\n \t(ipa_tm_execute): Do not test tm_may_enter_irr before we set it."}, {"sha": "f59b52582c163d27e9f905ceec7796544a5b4896", "filename": "gcc/df.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb", "patch": "@@ -53,7 +53,7 @@ union df_ref_d;\n #define DF_RD      3      /* Reaching Defs. */\n #define DF_CHAIN   4      /* Def-Use and/or Use-Def Chains. */\n #define DF_WORD_LR 5      /* Subreg tracking lr.  */\n-#define DF_NOTE    6      /* REG_DEF and REG_UNUSED notes. */\n+#define DF_NOTE    6      /* REG_DEAD and REG_UNUSED notes.  */\n #define DF_MD      7      /* Multiple Definitions. */\n \n #define DF_LAST_PROBLEM_PLUS1 (DF_MD + 1)"}, {"sha": "0652e6417d837a0385457ada67402afdb63a5fb6", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb", "patch": "@@ -3019,9 +3019,9 @@ inline_read_section (struct lto_file_decl_data *file_data, const char *data,\n {\n   const struct lto_function_header *header =\n     (const struct lto_function_header *) data;\n-  const int32_t cfg_offset = sizeof (struct lto_function_header);\n-  const int32_t main_offset = cfg_offset + header->cfg_size;\n-  const int32_t string_offset = main_offset + header->main_size;\n+  const int cfg_offset = sizeof (struct lto_function_header);\n+  const int main_offset = cfg_offset + header->cfg_size;\n+  const int string_offset = main_offset + header->main_size;\n   struct data_in *data_in;\n   struct lto_input_block ib;\n   unsigned int i, count2, j;"}, {"sha": "17e3b4ffb17cadc36ef961836bc6ad4df52ceb94", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb", "patch": "@@ -3003,9 +3003,9 @@ ipa_prop_read_section (struct lto_file_decl_data *file_data, const char *data,\n {\n   const struct lto_function_header *header =\n     (const struct lto_function_header *) data;\n-  const int32_t cfg_offset = sizeof (struct lto_function_header);\n-  const int32_t main_offset = cfg_offset + header->cfg_size;\n-  const int32_t string_offset = main_offset + header->main_size;\n+  const int cfg_offset = sizeof (struct lto_function_header);\n+  const int main_offset = cfg_offset + header->cfg_size;\n+  const int string_offset = main_offset + header->main_size;\n   struct data_in *data_in;\n   struct lto_input_block ib_main;\n   unsigned int i;"}, {"sha": "5e899bc5f105668f109a5fd61706d22e9325222b", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb", "patch": "@@ -1689,9 +1689,9 @@ input_cgraph_opt_section (struct lto_file_decl_data *file_data,\n {\n   const struct lto_function_header *header =\n     (const struct lto_function_header *) data;\n-  const int32_t cfg_offset = sizeof (struct lto_function_header);\n-  const int32_t main_offset = cfg_offset + header->cfg_size;\n-  const int32_t string_offset = main_offset + header->main_size;\n+  const int cfg_offset = sizeof (struct lto_function_header);\n+  const int main_offset = cfg_offset + header->cfg_size;\n+  const int string_offset = main_offset + header->main_size;\n   struct data_in *data_in;\n   struct lto_input_block ib_main;\n   unsigned int i;"}, {"sha": "fb0c70d81c46557c71cf671272851d39f0390868", "filename": "gcc/lto-section-in.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb/gcc%2Flto-section-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb/gcc%2Flto-section-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-section-in.c?ref=4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb", "patch": "@@ -224,7 +224,7 @@ lto_create_simple_input_block (struct lto_file_decl_data *file_data,\n     = (const struct lto_simple_header *) data;\n \n   struct lto_input_block* ib_main;\n-  int32_t main_offset = sizeof (struct lto_simple_header);\n+  int main_offset = sizeof (struct lto_simple_header);\n \n   if (!data)\n     return NULL;"}, {"sha": "f2614cf47037f766827b1896061bca93c5deea32", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb", "patch": "@@ -979,9 +979,9 @@ lto_read_body (struct lto_file_decl_data *file_data, tree fn_decl,\n {\n   const struct lto_function_header *header;\n   struct data_in *data_in;\n-  int32_t cfg_offset;\n-  int32_t main_offset;\n-  int32_t string_offset;\n+  int cfg_offset;\n+  int main_offset;\n+  int string_offset;\n   struct lto_input_block ib_cfg;\n   struct lto_input_block ib_main;\n \n@@ -1172,7 +1172,7 @@ lto_input_toplevel_asms (struct lto_file_decl_data *file_data, int order_base)\n   const char *data = lto_get_section_data (file_data, LTO_section_asm,\n \t\t\t\t\t   NULL, &len);\n   const struct lto_asm_header *header = (const struct lto_asm_header *) data;\n-  int32_t string_offset;\n+  int string_offset;\n   struct data_in *data_in;\n   struct lto_input_block ib;\n   tree str;"}, {"sha": "9593134fb02cd53cedfbeec34ac4fb89241115ee", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb", "patch": "@@ -1290,7 +1290,7 @@ write_symbol (struct streamer_tree_cache_d *cache,\n   enum gcc_plugin_symbol_kind kind;\n   enum gcc_plugin_symbol_visibility visibility;\n   unsigned slot_num;\n-  uint64_t size;\n+  unsigned HOST_WIDEST_INT size;\n   const char *comdat;\n   unsigned char c;\n \n@@ -1348,7 +1348,7 @@ write_symbol (struct streamer_tree_cache_d *cache,\n      when symbol has attribute (visibility(\"hidden\")) specified.\n      targetm.binds_local_p check DECL_VISIBILITY_SPECIFIED and gets this\n      right. */\n-     \n+\n   if (DECL_EXTERNAL (t)\n       && !targetm.binds_local_p (t))\n     visibility = GCCPV_DEFAULT;\n@@ -1370,14 +1370,9 @@ write_symbol (struct streamer_tree_cache_d *cache,\n       }\n \n   if (kind == GCCPK_COMMON\n-      && DECL_SIZE (t)\n-      && TREE_CODE (DECL_SIZE (t)) == INTEGER_CST)\n-    {\n-      size = (HOST_BITS_PER_WIDE_INT >= 64)\n-\t? (uint64_t) int_size_in_bytes (TREE_TYPE (t))\n-\t: (((uint64_t) TREE_INT_CST_HIGH (DECL_SIZE_UNIT (t))) << 32)\n-\t\t| TREE_INT_CST_LOW (DECL_SIZE_UNIT (t));\n-    }\n+      && DECL_SIZE_UNIT (t)\n+      && TREE_CODE (DECL_SIZE_UNIT (t)) == INTEGER_CST)\n+    size = TREE_INT_CST_LOW (DECL_SIZE_UNIT (t));\n   else\n     size = 0;\n "}, {"sha": "73a9cbacd0f5ba49b04a30f29458e98cad05f03a", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb", "patch": "@@ -1,3 +1,10 @@\n+2011-12-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* lto.h (lto_parse_hex): Delete.\n+\t* lto.c (lto_read_decls): Use 'int' for offsets.\n+\t(lto_parse_hex): Make static and return proper 64-bit host type.\n+\t(lto_resolution_read): Use proper 64-bit host type.\n+\n 2011-12-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/48354"}, {"sha": "d84dbfddd1bc9519ae8a9fda19eb36c9ac1075b5", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb", "patch": "@@ -267,7 +267,7 @@ lto_read_in_decl_state (struct data_in *data_in, const uint32_t *data,\n   uint32_t ix;\n   tree decl;\n   uint32_t i, j;\n-  \n+\n   ix = *data++;\n   decl = streamer_tree_cache_get (data_in->reader_cache, ix);\n   if (TREE_CODE (decl) != FUNCTION_DECL)\n@@ -886,9 +886,9 @@ lto_read_decls (struct lto_file_decl_data *decl_data, const void *data,\n \t\tVEC(ld_plugin_symbol_resolution_t,heap) *resolutions)\n {\n   const struct lto_decl_header *header = (const struct lto_decl_header *) data;\n-  const int32_t decl_offset = sizeof (struct lto_decl_header);\n-  const int32_t main_offset = decl_offset + header->decl_state_size;\n-  const int32_t string_offset = main_offset + header->main_size;\n+  const int decl_offset = sizeof (struct lto_decl_header);\n+  const int main_offset = decl_offset + header->decl_state_size;\n+  const int string_offset = main_offset + header->main_size;\n   struct lto_input_block ib_main;\n   struct data_in *data_in;\n   unsigned int i;\n@@ -939,17 +939,20 @@ lto_read_decls (struct lto_file_decl_data *decl_data, const void *data,\n \n   if (data_ptr != data_end)\n     internal_error (\"bytecode stream: garbage at the end of symbols section\");\n-  \n+\n   /* Set the current decl state to be the global state. */\n   decl_data->current_decl_state = decl_data->global_decl_state;\n \n   lto_data_in_delete (data_in);\n }\n \n-/* strtoll is not portable. */\n-int64_t\n-lto_parse_hex (const char *p) {\n-  uint64_t ret = 0;\n+/* Custom version of strtoll, which is not portable.  */\n+\n+static HOST_WIDEST_INT\n+lto_parse_hex (const char *p)\n+{\n+  HOST_WIDEST_INT ret = 0;\n+\n   for (; *p != '\\0'; ++p)\n     {\n       char c = *p;\n@@ -965,6 +968,7 @@ lto_parse_hex (const char *p) {\n         internal_error (\"could not parse hex number\");\n       ret |= part;\n     }\n+\n   return ret;\n }\n \n@@ -1000,7 +1004,7 @@ lto_resolution_read (splay_tree file_ids, FILE *resolution, lto_file *file)\n     {\n       int t;\n       char offset_p[17];\n-      int64_t offset;\n+      HOST_WIDEST_INT offset;\n       t = fscanf (resolution, \"@0x%16s\", offset_p);\n       if (t != 1)\n         internal_error (\"could not parse file offset\");"}, {"sha": "8fde159b36a413f91dd491436bf2296c1097a4a4", "filename": "gcc/lto/lto.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb/gcc%2Flto%2Flto.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb/gcc%2Flto%2Flto.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.h?ref=4ad9a9de2ddabf6186f32895e0b7a182ba8f2abb", "patch": "@@ -68,6 +68,4 @@ struct lto_section_list\n   struct lto_section_slot *first, *last;\n };\n \n-int64_t lto_parse_hex (const char *p);\n-\n #endif /* LTO_H */"}]}