{"sha": "6ab3e7dde0bb5e0ebae56b7182b049c6a3626955", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFiM2U3ZGRlMGJiNWUwZWJhZTU2YjcxODJiMDQ5YzZhMzYyNjk1NQ==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-05-18T11:09:27Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-05-18T11:09:27Z"}, "message": "cppinit.c (cpp_reader_init): Initialise col_adjust and default tab stop size.\n\n\t* cppinit.c (cpp_reader_init): Initialise col_adjust and\n\tdefault tab stop size.\n\t(no_num, OPT_ftabstop): New.\n\t(handle_option): Handle \"ftabstop=\" command-line option.\n\t(print_help): Document it.\n\t* cpplex.c (COLUMN): Remove.\n\t(handle_newline): Reset col_adjust.\n\t(skip_whitespace): Update col_adjust as tabs encountered.\n\t(_cpp_lex_line): Update to use col_adjust.  Call\n\tskip_whitespace for all whitespace.\n\t* cpplib.h (struct cpp_options): New member tabstop.\n\t(struct cpp_reader): New member col_adjust.\n\t(CPP_BUF_COL): Update.\n\t(CPP_BUF_COLUMN): New.\n\t* cpp.texi: Document \"-ftabstop=\" command line option.\n\nFrom-SVN: r33982", "tree": {"sha": "183a804a4d784ff0a4492f7cc32f7ac45a78527e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/183a804a4d784ff0a4492f7cc32f7ac45a78527e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ab3e7dde0bb5e0ebae56b7182b049c6a3626955", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ab3e7dde0bb5e0ebae56b7182b049c6a3626955", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ab3e7dde0bb5e0ebae56b7182b049c6a3626955", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ab3e7dde0bb5e0ebae56b7182b049c6a3626955/comments", "author": null, "committer": null, "parents": [{"sha": "fc5b21380eee9b33e07a59dbdb91c05cfe18a3cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc5b21380eee9b33e07a59dbdb91c05cfe18a3cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc5b21380eee9b33e07a59dbdb91c05cfe18a3cf"}], "stats": {"total": 82, "additions": 68, "deletions": 14}, "files": [{"sha": "dc6182aeaa8e178cc3e65e2b380805d4c551827f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab3e7dde0bb5e0ebae56b7182b049c6a3626955/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab3e7dde0bb5e0ebae56b7182b049c6a3626955/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ab3e7dde0bb5e0ebae56b7182b049c6a3626955", "patch": "@@ -1,3 +1,21 @@\n+2000-05-18  Neil Booth  <NeilB@earthling.net>\n+\n+\t* cppinit.c (cpp_reader_init): Initialise col_adjust and\n+\tdefault tab stop size.\n+\t(no_num, OPT_ftabstop): New.\n+\t(handle_option): Handle \"ftabstop=\" command-line option.\n+\t(print_help): Document it.\n+\t* cpplex.c (COLUMN): Remove.\n+\t(handle_newline): Reset col_adjust.\n+\t(skip_whitespace): Update col_adjust as tabs encountered.\n+\t(_cpp_lex_line): Update to use col_adjust.  Call\n+\tskip_whitespace for all whitespace.\n+\t* cpplib.h (struct cpp_options): New member tabstop.\n+\t(struct cpp_reader): New member col_adjust.\n+\t(CPP_BUF_COL): Update.\n+\t(CPP_BUF_COLUMN): New.\n+\t* cpp.texi: Document \"-ftabstop=\" command line option.\n+\n Wed May 17 18:19:41 2000  Philippe De Muyter  <phdm@macqel.be>\n \n \t* configure.in (NO_MINUS_C_MINUS_O): Macro made availabe for AC_OUTPUT"}, {"sha": "9a48f5ed45259f546fda3ef226b0b403285765b6", "filename": "gcc/cpp.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab3e7dde0bb5e0ebae56b7182b049c6a3626955/gcc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab3e7dde0bb5e0ebae56b7182b049c6a3626955/gcc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.texi?ref=6ab3e7dde0bb5e0ebae56b7182b049c6a3626955", "patch": "@@ -3155,6 +3155,13 @@ Because of the clash with @samp{-l}, you must use the awkward syntax\n above.  In a future release, this option will be replaced by\n @samp{-flint} or @samp{-Wlint}; we are not sure which yet.\n \n+@item -ftabstop=NUMBER\n+@findex -ftabstop\n+Indicates the distance between tabstops.  This helps the preprocessor\n+report correct column numbers in warnings or errors, even if tabs appear\n+on the line.  Values less than 1 or greater than 100 are ignored.  The\n+default is 8.\n+\n @item -$\n @findex -$\n Forbid the use of @samp{$} in identifiers.  The C standard does not"}, {"sha": "120f3861b44b341ac217782b15f2e30c9ea1aa5a", "filename": "gcc/cppinit.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab3e7dde0bb5e0ebae56b7182b049c6a3626955/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab3e7dde0bb5e0ebae56b7182b049c6a3626955/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=6ab3e7dde0bb5e0ebae56b7182b049c6a3626955", "patch": "@@ -545,6 +545,7 @@ cpp_reader_init (pfile)\n   CPP_OPTION (pfile, warn_import) = 1;\n   CPP_OPTION (pfile, discard_comments) = 1;\n   CPP_OPTION (pfile, show_column) = 1;\n+  CPP_OPTION (pfile, tabstop) = 8;\n \n   CPP_OPTION (pfile, pending) =\n     (struct cpp_pending *) xcalloc (1, sizeof (struct cpp_pending));\n@@ -1079,6 +1080,7 @@ new_pending_directive (pend, text, handler)\n #define no_fil N_(\"File name missing after %s\")\n #define no_mac N_(\"Macro name missing after %s\")\n #define no_pth N_(\"Path name missing after %s\")\n+#define no_num N_(\"Number missing after %s\")\n \n /* This is the list of all command line options, with the leading\n    \"-\" removed.  It must be sorted in ASCII collating order.  */\n@@ -1108,6 +1110,7 @@ new_pending_directive (pend, text, handler)\n   DEF_OPT(\"fno-show-column\",          0,      OPT_fno_show_column)            \\\n   DEF_OPT(\"fpreprocessed\",            0,      OPT_fpreprocessed)              \\\n   DEF_OPT(\"fshow-column\",             0,      OPT_fshow_column)               \\\n+  DEF_OPT(\"ftabstop=\",                no_num, OPT_ftabstop)                   \\\n   DEF_OPT(\"g\",                        no_arg, OPT_g)  /* arg optional */      \\\n   DEF_OPT(\"h\",                        0,      OPT_h)                          \\\n   DEF_OPT(\"idirafter\",                no_dir, OPT_idirafter)                  \\\n@@ -1312,6 +1315,16 @@ handle_option (pfile, argc, argv)\n \tcase OPT_fno_show_column:\n \t  CPP_OPTION (pfile, show_column) = 0;\n \t  break;\n+\tcase OPT_ftabstop:\n+\t  /* Silently ignore empty string, non-longs and silly values.  */\n+\t  if (arg[0] != '\\0')\n+\t    {\n+\t      char *endptr;\n+\t      long tabstop = strtol (arg, &endptr, 10);\n+\t      if (*endptr == '\\0' && tabstop >= 1 && tabstop <= 100)\n+\t\tCPP_OPTION (pfile, tabstop) = tabstop;\n+\t    }\n+\t  break;\n \tcase OPT_w:\n \t  CPP_OPTION (pfile, inhibit_warnings) = 1;\n \t  break;\n@@ -1833,6 +1846,7 @@ Switches:\\n\\\n   -dD                       Preserve macro definitions in output\\n\\\n   -dN                       As -dD except that only the names are preserved\\n\\\n   -dI                       Include #include directives in the output\\n\\\n+  -ftabstop=<number>        Distance between tab stops for column reporting\\n\\\n   -P                        Do not generate #line directives\\n\\\n   -$                        Do not allow '$' in identifiers\\n\\\n   -remap                    Remap file names when including files.\\n\\"}, {"sha": "f0414a0fdca0864c023bade6e1150130600b2843", "filename": "gcc/cpplex.c", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab3e7dde0bb5e0ebae56b7182b049c6a3626955/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab3e7dde0bb5e0ebae56b7182b049c6a3626955/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=6ab3e7dde0bb5e0ebae56b7182b049c6a3626955", "patch": "@@ -96,7 +96,6 @@ typedef unsigned int (* speller) PARAMS ((unsigned char *, cpp_toklist *,\n       (name).text = (list)->namebuf + (list)->name_used;} while (0)\n \n #define IS_DIRECTIVE(list) (TOK_TYPE (list, 0) == CPP_HASH)\n-#define COLUMN(cur) ((cur) - buffer->line_base)\n \n /* Maybe put these in the ISTABLE eventually.  */\n #define IS_HSPACE(c) ((c) == ' ' || (c) == '\\t')\n@@ -109,6 +108,7 @@ typedef unsigned int (* speller) PARAMS ((unsigned char *, cpp_toklist *,\n   if ((cur) < (limit) && *(cur) == '\\r' + '\\n' - c) \\\n     (cur)++; \\\n   CPP_BUMP_LINE_CUR (pfile, (cur)); \\\n+  pfile->col_adjust = 0; \\\n   } while (0)\n \n #define IMMED_TOKEN() (!(cur_token->flags & PREV_WHITESPACE))\n@@ -2506,7 +2506,9 @@ skip_line_comment2 (pfile)\n   return multiline;\n }\n \n-/* Skips whitespace, stopping at next non-whitespace character.  */\n+/* Skips whitespace, stopping at next non-whitespace character.\n+   Adjusts pfile->col_adjust to account for tabs.  This enables tokens\n+   to be assigned the correct column.  */\n static void\n skip_whitespace (pfile, in_directive)\n      cpp_reader *pfile;\n@@ -2520,6 +2522,12 @@ skip_whitespace (pfile, in_directive)\n     {\n       unsigned char c = *cur++;\n \n+      if (c == '\\t')\n+\t{\n+\t  unsigned int col = CPP_BUF_COLUMN (buffer, cur - 1);\n+\t  pfile->col_adjust += (CPP_OPTION (pfile, tabstop) - 1\n+\t\t\t\t- col % CPP_OPTION(pfile, tabstop));\n+\t}\n       if (IS_HSPACE(c))\t\t/* FIXME: Fix ISTABLE.  */\n \tcontinue;\n       if (!is_space(c) || IS_NEWLINE (c)) /* Main loop handles newlines.  */\n@@ -2847,6 +2855,7 @@ _cpp_lex_line (pfile, list)\n   register const unsigned char *cur = buffer->cur;\n   unsigned char flags = 0;\n \n+  pfile->col_adjust = 0;\n  expanded:\n   token_limit = list->tokens + list->tokens_cap;\n   cur_token = list->tokens + list->tokens_used;\n@@ -2855,25 +2864,24 @@ _cpp_lex_line (pfile, list)\n     {\n       unsigned char c = *cur++;\n \n-      /* Optimize whitespace skipping, in particular the case of a\n-\t single whitespace character, as every other token is probably\n-\t whitespace. (' ' '\\t' '\\v' '\\f' '\\0').  */\n+      /* Optimize whitespace skipping, as most tokens are probably\n+\t separated by whitespace. (' ' '\\t' '\\v' '\\f' '\\0').  */\n+\n       if (is_hspace ((unsigned int) c))\n \t{\n-\t  if (c == '\\0' || (cur < buffer->rlimit && is_hspace (*cur)))\n-\t    {\n-\t      buffer->cur = cur - (c == '\\0');\t/* Get the null warning.  */\n-\t      skip_whitespace (pfile, IS_DIRECTIVE (list));\n-\t      cur = buffer->cur;\n-\t    }\n+\t  /* Step back to get the null warning and tab correction.  */\n+\t  buffer->cur = cur - 1;\n+\t  skip_whitespace (pfile, IS_DIRECTIVE (list));\n+\t  cur = buffer->cur;\n+\n \t  flags = PREV_WHITESPACE;\n \t  if (cur == buffer->rlimit)\n \t    break;\n \t  c = *cur++;\n \t}\n \n       /* Initialize current token.  Its type is set in the switch.  */\n-      cur_token->col = COLUMN (cur);\n+      cur_token->col = CPP_BUF_COLUMN (buffer, cur);\n       cur_token->flags = flags;\n       flags = 0;\n \n@@ -2947,7 +2955,7 @@ _cpp_lex_line (pfile, list)\n \t    }\n \n \tdo_parse_string:\n-\t  /* Here c is one of ' \" > or ).  */\n+\t  /* Here c is one of ' \" or >.  */\n \t  INIT_NAME (list, cur_token->val.name);\n \t  buffer->cur = cur;\n \t  parse_string2 (pfile, list, &cur_token->val.name, c);"}, {"sha": "a46ada3eacc10d28716e3ae9193b51f85b03c805", "filename": "gcc/cpplib.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab3e7dde0bb5e0ebae56b7182b049c6a3626955/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab3e7dde0bb5e0ebae56b7182b049c6a3626955/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=6ab3e7dde0bb5e0ebae56b7182b049c6a3626955", "patch": "@@ -302,6 +302,9 @@ struct cpp_options\n   const char *in_fname;\n   const char *out_fname;\n \n+  /* Characters between tab stops.  */\n+  unsigned int tabstop;\n+\n   /* Pending options - -D, -U, -A, -I, -ixxx. */\n   struct cpp_pending *pending;\n \n@@ -510,6 +513,9 @@ struct cpp_reader\n   struct if_stack *if_stack;\n   const unsigned char *potential_control_macro;\n \n+  /* Token column position adjustment owing to tabs in whitespace.  */\n+  unsigned int col_adjust;\n+\n   /* Buffer of -M output.  */\n   struct deps *deps;\n \n@@ -586,7 +592,8 @@ struct cpp_printer\n #define CPP_OPTION(PFILE, OPTION) ((PFILE)->opts.OPTION)\n #define CPP_BUFFER(PFILE) ((PFILE)->buffer)\n #define CPP_BUF_LINE(BUF) ((BUF)->lineno)\n-#define CPP_BUF_COL(BUF) ((BUF)->cur - (BUF)->line_base)\n+#define CPP_BUF_COLUMN(BUF, CUR) ((CUR) - (BUF)->line_base + pfile->col_adjust)\n+#define CPP_BUF_COL(BUF) CPP_BUF_COLUMN(BUF, (BUF)->cur)\n \n /* Name under which this program was invoked.  */\n extern const char *progname;"}]}