{"sha": "eb59ddf57fbc4bf1d2deaf0665ede4aa37181069", "node_id": "C_kwDOANBUbNoAKGViNTlkZGY1N2ZiYzRiZjFkMmRlYWYwNjY1ZWRlNGFhMzcxODEwNjk", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-03-29T10:17:01Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-03-29T19:30:44Z"}, "message": "testsuite: Allow setting gpp_std_list in configuration files\n\nThis allows the gpp_std_list variable to be set in ~/.dejagnurc instead\nof using the GXX_TESTSUITE_STDS environment variable.  This is\nconsistent with how other defaults such as tool_timeout can be set.\n\nThe environment variable can still be used to override the default.\n\ngcc/testsuite/ChangeLog:\n\n\t* lib/g++-dg.exp: Update comments.\n\t* lib/g++.exp (gpp_std_list): Check for an existing value before\n\tsetting it to an empty list.", "tree": {"sha": "359d38104ecf7eeea7af8b6a96ebe414eec75de2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/359d38104ecf7eeea7af8b6a96ebe414eec75de2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb59ddf57fbc4bf1d2deaf0665ede4aa37181069", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb59ddf57fbc4bf1d2deaf0665ede4aa37181069", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb59ddf57fbc4bf1d2deaf0665ede4aa37181069", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb59ddf57fbc4bf1d2deaf0665ede4aa37181069/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95768878c718f80e3d562130e2118831bc7fdbf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95768878c718f80e3d562130e2118831bc7fdbf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95768878c718f80e3d562130e2118831bc7fdbf6"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "59e8081a29dd59ecf6d8505669d6824b4e03b19d", "filename": "gcc/testsuite/lib/g++-dg.exp", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb59ddf57fbc4bf1d2deaf0665ede4aa37181069/gcc%2Ftestsuite%2Flib%2Fg%2B%2B-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb59ddf57fbc4bf1d2deaf0665ede4aa37181069/gcc%2Ftestsuite%2Flib%2Fg%2B%2B-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fg%2B%2B-dg.exp?ref=eb59ddf57fbc4bf1d2deaf0665ede4aa37181069", "patch": "@@ -27,8 +27,8 @@ proc g++-dg-prune { system text } {\n     return [gcc-dg-prune $system $text]\n }\n \n-# Modified dg-runtest that runs tests in both C++98 and C++11 modes\n-# unless they specifically specify one or the other.\n+# Modified dg-runtest that runs tests in multiple standard modes,\n+# unless they specifically specify one standard.\n proc g++-dg-runtest { testcases flags default-extra-flags } {\n     global runtests\n \n@@ -39,7 +39,7 @@ proc g++-dg-runtest { testcases flags default-extra-flags } {\n \t}\n \n \t# If the testcase specifies a standard, use that one.\n-\t# If not, run it under both standards, allowing GNU extensions\n+\t# If not, run it under several standards, allowing GNU extensions\n \t# if there's a dg-options line.\n \tif ![search_for $test \"-std=*++\"] {\n \t    if [search_for $test \"dg-options\"] {\n@@ -48,6 +48,7 @@ proc g++-dg-runtest { testcases flags default-extra-flags } {\n \t\tset std_prefix \"-std=c++\"\n \t    }\n \n+\t    # See g++.exp for the initial value of this list.\n \t    global gpp_std_list\n \t    if { [llength $gpp_std_list] > 0 } {\n \t\tset std_list $gpp_std_list"}, {"sha": "24ef068b2395361759deb654281e22a9abbf9729", "filename": "gcc/testsuite/lib/g++.exp", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb59ddf57fbc4bf1d2deaf0665ede4aa37181069/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb59ddf57fbc4bf1d2deaf0665ede4aa37181069/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp?ref=eb59ddf57fbc4bf1d2deaf0665ede4aa37181069", "patch": "@@ -32,7 +32,11 @@ load_lib target-libpath.exp\n \n \n set gpp_compile_options \"\"\n-set gpp_std_list { }\n+# Allow gpp_std_list to be set in configuration files, e.g., ~/.dejagnurc\n+if ![info exists gpp_std_list] {\n+    set gpp_std_list { }\n+}\n+# Allow gpp_std_list to be set from the environment.\n if [info exists env(GXX_TESTSUITE_STDS)] {\n     set gpp_std_list [split $env(GXX_TESTSUITE_STDS) \",\"]\n }"}]}