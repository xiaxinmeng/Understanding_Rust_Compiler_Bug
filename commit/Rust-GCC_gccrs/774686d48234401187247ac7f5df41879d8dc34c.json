{"sha": "774686d48234401187247ac7f5df41879d8dc34c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc0Njg2ZDQ4MjM0NDAxMTg3MjQ3YWM3ZjVkZjQxODc5ZDhkYzM0Yw==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-06-08T03:10:03Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-06-08T05:27:46Z"}, "message": "predcom: Adjust some unnecessary update_ssa calls\n\nAs Richi suggested in PR100794, this patch is to remove\nsome unnecessary update_ssa calls with flag\nTODO_update_ssa_only_virtuals, also do some refactoring.\n\nBootstrapped/regtested on powerpc64le-linux-gnu P9,\nx86_64-redhat-linux and aarch64-linux-gnu, built well\non Power9 ppc64le with --with-build-config=bootstrap-O3,\nand passed both P8 and P9 SPEC2017 full build with\n{-O3, -Ofast} + {,-funroll-loops}.\n\ngcc/ChangeLog:\n\n\t* tree-predcom.c (execute_pred_commoning): Remove update_ssa call.\n\t(tree_predictive_commoning_loop): Factor some cleanup stuffs into\n\tlambda function cleanup, remove scev_reset call, and adjust return\n\tvalue.\n\t(tree_predictive_commoning): Adjust for different changed values,\n\tonly set flag TODO_update_ssa_only_virtuals if changed.\n\t(pass_data pass_data_predcom): Remove TODO_update_ssa_only_virtuals\n\tfrom todo_flags_finish.", "tree": {"sha": "6030eded58b47df5c3d3c7b4146efd7851793d28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6030eded58b47df5c3d3c7b4146efd7851793d28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/774686d48234401187247ac7f5df41879d8dc34c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/774686d48234401187247ac7f5df41879d8dc34c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/774686d48234401187247ac7f5df41879d8dc34c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/774686d48234401187247ac7f5df41879d8dc34c/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a98f830332e5a623278aaeea39c2a88177b2a9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a98f830332e5a623278aaeea39c2a88177b2a9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a98f830332e5a623278aaeea39c2a88177b2a9a"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "02f911a08bb171dea52fcdee480df2916c36ad22", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/774686d48234401187247ac7f5df41879d8dc34c/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/774686d48234401187247ac7f5df41879d8dc34c/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=774686d48234401187247ac7f5df41879d8dc34c", "patch": "@@ -2280,8 +2280,6 @@ execute_pred_commoning (class loop *loop, vec<chain_p> chains,\n \t    remove_stmt (a->stmt);\n \t}\n     }\n-\n-  update_ssa (TODO_update_ssa_only_virtuals);\n }\n \n /* For each reference in CHAINS, if its defining statement is\n@@ -3174,9 +3172,10 @@ insert_init_seqs (class loop *loop, vec<chain_p> chains)\n       }\n }\n \n-/* Performs predictive commoning for LOOP.  Sets bit 1<<0 of return value\n-   if LOOP was unrolled; Sets bit 1<<1 of return value if loop closed ssa\n-   form was corrupted.  */\n+/* Performs predictive commoning for LOOP.  Sets bit 1<<1 of return value\n+   if LOOP was unrolled; Sets bit 1<<2 of return value if loop closed ssa\n+   form was corrupted.  Non-zero return value indicates some changes were\n+   applied to this loop.  */\n \n static unsigned\n tree_predictive_commoning_loop (class loop *loop)\n@@ -3188,7 +3187,6 @@ tree_predictive_commoning_loop (class loop *loop)\n   unsigned unroll_factor;\n   class tree_niter_desc desc;\n   bool unroll = false, loop_closed_ssa = false;\n-  edge exit;\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"Processing loop %d\\n\",  loop->num);\n@@ -3244,13 +3242,22 @@ tree_predictive_commoning_loop (class loop *loop)\n   determine_roots (loop, components, &chains);\n   release_components (components);\n \n+  auto cleanup = [&]() {\n+    release_chains (chains);\n+    free_data_refs (datarefs);\n+    BITMAP_FREE (looparound_phis);\n+    free_affine_expand_cache (&name_expansions);\n+  };\n+\n   if (!chains.exists ())\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file,\n \t\t \"Predictive commoning failed: no suitable chains\\n\");\n-      goto end;\n+      cleanup ();\n+      return 0;\n     }\n+\n   prepare_initializers (loop, chains);\n   loop_closed_ssa = prepare_finalizers (loop, chains);\n \n@@ -3268,10 +3275,8 @@ tree_predictive_commoning_loop (class loop *loop)\n   /* Determine the unroll factor, and if the loop should be unrolled, ensure\n      that its number of iterations is divisible by the factor.  */\n   unroll_factor = determine_unroll_factor (chains);\n-  scev_reset ();\n   unroll = (unroll_factor > 1\n \t    && can_unroll_loop_p (loop, unroll_factor, &desc));\n-  exit = single_dom_exit (loop);\n \n   /* Execute the predictive commoning transformations, and possibly unroll the\n      loop.  */\n@@ -3285,8 +3290,6 @@ tree_predictive_commoning_loop (class loop *loop)\n       dta.chains = chains;\n       dta.tmp_vars = tmp_vars;\n \n-      update_ssa (TODO_update_ssa_only_virtuals);\n-\n       /* Cfg manipulations performed in tree_transform_and_unroll_loop before\n \t execute_pred_commoning_cbck is called may cause phi nodes to be\n \t reallocated, which is a problem since CHAINS may point to these\n@@ -3295,6 +3298,7 @@ tree_predictive_commoning_loop (class loop *loop)\n \t the phi nodes in execute_pred_commoning_cbck.  A bit hacky.  */\n       replace_phis_by_defined_names (chains);\n \n+      edge exit = single_dom_exit (loop);\n       tree_transform_and_unroll_loop (loop, unroll_factor, exit, &desc,\n \t\t\t\t      execute_pred_commoning_cbck, &dta);\n       eliminate_temp_copies (loop, tmp_vars);\n@@ -3307,14 +3311,9 @@ tree_predictive_commoning_loop (class loop *loop)\n       execute_pred_commoning (loop, chains, tmp_vars);\n     }\n \n-end: ;\n-  release_chains (chains);\n-  free_data_refs (datarefs);\n-  BITMAP_FREE (looparound_phis);\n+  cleanup ();\n \n-  free_affine_expand_cache (&name_expansions);\n-\n-  return (unroll ? 1 : 0) | (loop_closed_ssa ? 2 : 0);\n+  return (unroll ? 2 : 1) | (loop_closed_ssa ? 4 : 1);\n }\n \n /* Runs predictive commoning.  */\n@@ -3335,12 +3334,19 @@ tree_predictive_commoning (void)\n \n   if (changed > 0)\n     {\n-      scev_reset ();\n+      ret = TODO_update_ssa_only_virtuals;\n \n+      /* Some loop(s) got unrolled.  */\n       if (changed > 1)\n-\trewrite_into_loop_closed_ssa (NULL, TODO_update_ssa);\n+\t{\n+\t  scev_reset ();\n \n-      ret = TODO_cleanup_cfg;\n+\t  /* Need to fix up loop closed SSA.  */\n+\t  if (changed >= 4)\n+\t    rewrite_into_loop_closed_ssa (NULL, TODO_update_ssa);\n+\n+\t  ret |= TODO_cleanup_cfg;\n+\t}\n     }\n \n   return ret;\n@@ -3369,7 +3375,7 @@ const pass_data pass_data_predcom =\n   0, /* properties_provided */\n   0, /* properties_destroyed */\n   0, /* todo_flags_start */\n-  TODO_update_ssa_only_virtuals, /* todo_flags_finish */\n+  0, /* todo_flags_finish */\n };\n \n class pass_predcom : public gimple_opt_pass"}]}