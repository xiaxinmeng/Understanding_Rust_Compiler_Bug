{"sha": "7ca643e17ea01be20f1bfd91091ff658ff23bc3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NhNjQzZTE3ZWEwMWJlMjBmMWJmZDkxMDkxZmY2NThmZjIzYmMzZA==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2012-06-04T19:19:58Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2012-06-04T19:19:58Z"}, "message": "PR preprocessor/53463 - Fix system header detection for built-in macro tokens\n\nThe location for a built-in macro token is BUILTIN_LOCATION.  When we\nsee that location value, we cannot know if that token was used in a\nsystem header or not.  And that can trigger some unwanted warnings on\ne.g, the use of __LONG_LONG_MAX__ built-in macro in system headers\nwhen we compile with -pedantic, like in the test case accompanying\nthis patch.\n\nIn that case, I think we ought to step-up to see where the built-in\nmacro has been expanded, until we see a location that is not for a\nbuilt-in macro.  Then we can check if the resulting location is in a\nsystem header or not.\n\nNow that we step up to the location of first non-built-in-macro token,\nit appeared that for\ntestsuite/c-c++-common/dfp/convert-int-saturate.c, G++ then fails to\nemit the warning in:\n\n    volatile unsigned int usi;\n    int\n    main ()\n    {\n      usi = DEC32_MAX;  /* { dg-warning \"overflow in implicit constant conversion\" } */\n     ...\n    }\n\nBecause DEC32_MAX is defined in the system header float.h as a\nbuilt-in macro:\n\n    #define DEC32_MAX\t__DEC32_MAX__\n\nAnd during the parsing of the assignment expression that should have\nled to the warning above, input_location is set to the location for\nthe DEC32_MAX, which is actually the location for the built-in\n__DECL32_MAX_EXP.\n\nA possible fix is to use the location of the \"=\" operator as the\ndefault location for assignment expressions.  This is what the patch\ndoes.\n\nI had to adjust a couple of tests to arrange for this.\n\nBootstrapped and tested on x86_64-unknown-linux-gnu against trunk.\n\nlibcpp/\n\n\tPR preprocessor/53463\n\t* line-map.c (linemap_location_in_system_header_p): For built-in\n\tmacro tokens, check the first expansion point location for that is\n\tnot for a token coming from a built-in macro.\n\ngcc/cp/\n\n\tPR preprocessor/53463\n\t* parser.c (cp_parser_assignment_expression): Use the location\n\tfor the LHS as the default location for the expression.\n\ngcc/testsuite/\n\n\tPR preprocessor/53463\n\t* g++.dg/cpp/limits.C: New test.\n\t* g++.dg/parse/error19.C: Adjust.\n\t* g++.dg/warn/Wconversion-real-integer2.C: Likewise.\n\t* g++.dg/warn/pr35635.C: Likewise.\n\t* g++.old-deja/g++.pt/assign1.C: Likewise.\n\nFrom-SVN: r188203", "tree": {"sha": "21b0dd6452ab80ed34b7dec7d98597cf279e3564", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21b0dd6452ab80ed34b7dec7d98597cf279e3564"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ca643e17ea01be20f1bfd91091ff658ff23bc3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ca643e17ea01be20f1bfd91091ff658ff23bc3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ca643e17ea01be20f1bfd91091ff658ff23bc3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ca643e17ea01be20f1bfd91091ff658ff23bc3d/comments", "author": null, "committer": null, "parents": [{"sha": "aadd9700d5a475c506a11b3d1ab8b20c89b63b45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aadd9700d5a475c506a11b3d1ab8b20c89b63b45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aadd9700d5a475c506a11b3d1ab8b20c89b63b45"}], "stats": {"total": 92, "additions": 81, "deletions": 11}, "files": [{"sha": "9448591306ebe1a2b4615c8031a8fd3d5fe5b15a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca643e17ea01be20f1bfd91091ff658ff23bc3d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca643e17ea01be20f1bfd91091ff658ff23bc3d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ca643e17ea01be20f1bfd91091ff658ff23bc3d", "patch": "@@ -1,3 +1,9 @@\n+2012-06-04  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR preprocessor/53463\n+\t* parser.c (cp_parser_assignment_expression): Use the location\n+\tfor the '=' as the default location for the expression.\n+\n 2012-06-04  Edmar Wienskoski  <edmar@freescale.com>\n \n \tPR target/53559"}, {"sha": "2afcbc0639a427b3ebe58cdf78a5a055e3f871e4", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca643e17ea01be20f1bfd91091ff658ff23bc3d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca643e17ea01be20f1bfd91091ff658ff23bc3d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=7ca643e17ea01be20f1bfd91091ff658ff23bc3d", "patch": "@@ -7481,6 +7481,7 @@ cp_parser_assignment_expression (cp_parser* parser, bool cast_p,\n \t  if (assignment_operator != ERROR_MARK)\n \t    {\n \t      bool non_constant_p;\n+\t      location_t saved_input_location;\n \n \t      /* Parse the right-hand side of the assignment.  */\n \t      tree rhs = cp_parser_initializer_clause (parser, &non_constant_p);\n@@ -7493,11 +7494,15 @@ cp_parser_assignment_expression (cp_parser* parser, bool cast_p,\n \t      if (cp_parser_non_integral_constant_expression (parser,\n \t\t\t\t\t\t\t      NIC_ASSIGNMENT))\n \t\treturn error_mark_node;\n-\t      /* Build the assignment expression.  */\n+\t      /* Build the assignment expression.  Its default\n+\t\t location is the location of the '=' token.  */\n+\t      saved_input_location = input_location;\n+\t      input_location = loc;\n \t      expr = build_x_modify_expr (loc, expr,\n \t\t\t\t\t  assignment_operator,\n \t\t\t\t\t  rhs,\n \t\t\t\t\t  tf_warning_or_error);\n+\t      input_location = saved_input_location;\n \t    }\n \t}\n     }"}, {"sha": "2d125fcebea6e75953e8493a891ae98be19fb587", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca643e17ea01be20f1bfd91091ff658ff23bc3d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca643e17ea01be20f1bfd91091ff658ff23bc3d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7ca643e17ea01be20f1bfd91091ff658ff23bc3d", "patch": "@@ -1,3 +1,12 @@\n+2012-06-04  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR preprocessor/53463\n+\t* g++.dg/cpp/limits.C: New test.\n+\t* g++.dg/parse/error19.C: Adjust.\n+\t* g++.dg/warn/Wconversion-real-integer2.C: Likewise.\n+\t* g++.dg/warn/pr35635.C: Likewise.\n+\t* g++.old-deja/g++.pt/assign1.C: Likewise.\n+\n 2012-06-04  Edmar Wienskoski  <edmar@freescale.com>\n \n \tPR target/53559"}, {"sha": "b64e1e2eecbd1ada28f70135c02e79ae702f2dc3", "filename": "gcc/testsuite/g++.dg/cpp/limits.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca643e17ea01be20f1bfd91091ff658ff23bc3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Flimits.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca643e17ea01be20f1bfd91091ff658ff23bc3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Flimits.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Flimits.C?ref=7ca643e17ea01be20f1bfd91091ff658ff23bc3d", "patch": "@@ -0,0 +1,21 @@\n+// { dg-options \"-pedantic\" }\n+// { dg-do compile }\n+\n+#include <limits>\n+\n+// Compiling this with -pedantic was wrongly triggering this error:\n+// libstdc++-v3/include/limits:1269:45: warning : use of C++0x long long integer constant [-Wlong-long]\n+//       min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }\n+//                                             ^\n+// libstdc++-v3/include/limits:1272:44: warning : use of C++0x long long integer constant [-Wlong-long]\n+//       max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }\n+//                                            ^\n+// libstdc++-v3/include/limits:1342:44: warning : use of C++0x long long integer constant [-Wlong-long]\n+//       max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__ * 2ULL + 1\n+//                                            ^\n+\n+int\n+main ()\n+{\n+    return 0;\n+}"}, {"sha": "6d84f7142463e0a559b157eee493adff29c09a83", "filename": "gcc/testsuite/g++.dg/parse/error19.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca643e17ea01be20f1bfd91091ff658ff23bc3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca643e17ea01be20f1bfd91091ff658ff23bc3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror19.C?ref=7ca643e17ea01be20f1bfd91091ff658ff23bc3d", "patch": "@@ -10,6 +10,6 @@ const A& foo();\n \n void bar()\n {\n-  foo()=A(0); // { dg-error \"12:no match for 'operator='\" }\n+  foo()=A(0); // { dg-error \"8:no match for 'operator='\" }\n   // { dg-message \"candidate\" \"candidate note\" { target *-*-* } 13 }\n }"}, {"sha": "0494588c15b7bd158a2ac25e176faa5246941712", "filename": "gcc/testsuite/g++.dg/warn/Wconversion-real-integer2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca643e17ea01be20f1bfd91091ff658ff23bc3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real-integer2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca643e17ea01be20f1bfd91091ff658ff23bc3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real-integer2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-real-integer2.C?ref=7ca643e17ea01be20f1bfd91091ff658ff23bc3d", "patch": "@@ -23,11 +23,11 @@\n //\n // That is more useful.\n \n-#define INT_MAX __INT_MAX__ // { dg-warning \"conversion to .float. alters .int. constant value\" }\n+#define INT_MAX __INT_MAX__ \n \n float  vfloat;\n \n void h (void)\n {\n-    vfloat = INT_MAX; // { dg-message \"in expansion of macro 'INT_MAX'\" }\n+    vfloat = INT_MAX; // { dg-warning \"conversion to .float. alters .int. constant value\" }\n }"}, {"sha": "de68ceb484c49bf104032d850ccca49618ec0b83", "filename": "gcc/testsuite/g++.dg/warn/pr35635.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca643e17ea01be20f1bfd91091ff658ff23bc3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr35635.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca643e17ea01be20f1bfd91091ff658ff23bc3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr35635.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr35635.C?ref=7ca643e17ea01be20f1bfd91091ff658ff23bc3d", "patch": "@@ -62,9 +62,9 @@ void func3()\n   /* At least one branch of ? does not fit in the destination, thus\n      warn.  */\n   uchar_x = bar != 0 ? 2.1 : 10; /* { dg-warning \"conversion\" } */\n-  uchar_x = bar != 0 \n+  uchar_x = bar != 0  /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n     ? (unsigned char) 1024 \n-    : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+    : -1; \n }\n \n void func4()"}, {"sha": "95cbee0daddf676712507b49ea45f7a8c99258fb", "filename": "gcc/testsuite/g++.old-deja/g++.pt/assign1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca643e17ea01be20f1bfd91091ff658ff23bc3d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fassign1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca643e17ea01be20f1bfd91091ff658ff23bc3d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fassign1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fassign1.C?ref=7ca643e17ea01be20f1bfd91091ff658ff23bc3d", "patch": "@@ -2,7 +2,7 @@\n // Origin: Mark Mitchell <mark@codesourcery.com>\n \n template <class T>\n-struct S {\t\t\t// { dg-error \"const|operator=\" }\n+struct S {  // { dg-error \"const member\\[^\\n\\r\\]*can't use default assignment operator\" }\n   S();\n   T t;\n };"}, {"sha": "1a5c1462da13dd21f66b5e2e9ae5aa94ba6cd7f9", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca643e17ea01be20f1bfd91091ff658ff23bc3d/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca643e17ea01be20f1bfd91091ff658ff23bc3d/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=7ca643e17ea01be20f1bfd91091ff658ff23bc3d", "patch": "@@ -1,3 +1,10 @@\n+2012-06-04  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR preprocessor/53463\n+\t* line-map.c (linemap_location_in_system_header_p): For built-in\n+\tmacro tokens, check the first expansion point location that is not\n+\tfor a token coming from a built-in macro.\n+\n 2012-05-29  Joseph Myers  <joseph@codesourcery.com>\n \n \t* directives.c: Fix typos."}, {"sha": "e6a344f0afab4a5314545190ddb998931e93ec02", "filename": "libcpp/line-map.c", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca643e17ea01be20f1bfd91091ff658ff23bc3d/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca643e17ea01be20f1bfd91091ff658ff23bc3d/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=7ca643e17ea01be20f1bfd91091ff658ff23bc3d", "patch": "@@ -755,13 +755,35 @@ linemap_location_in_system_header_p (struct line_maps *set,\n {\n   const struct line_map *map = NULL;\n \n-  location =\n-    linemap_resolve_location (set, location, LRK_SPELLING_LOCATION, &map);\n-\n   if (location < RESERVED_LOCATION_COUNT)\n     return false;\n \n-  return LINEMAP_SYSP (map);\n+  /* Let's look at where the token for LOCATION comes from.  */\n+  while (true)\n+    {\n+      map = linemap_lookup (set, location);\n+      if (map != NULL)\n+\t{\n+\t  if (!linemap_macro_expansion_map_p (map))\n+\t    /* It's a normal token.  */\n+\t    return LINEMAP_SYSP (map);\n+\t  else\n+\t    {\n+\t      /* It's a token resulting from a macro expansion.  */\n+\t      source_location loc =\n+\t\tlinemap_macro_map_loc_unwind_toward_spelling (map, location);\n+\t      if (loc < RESERVED_LOCATION_COUNT)\n+\t\t/* This token might come from a built-in macro.  Let's\n+\t\t   look at where that macro got expanded.  */\n+\t\tlocation = linemap_macro_map_loc_to_exp_point (map, location);\n+\t      else\n+\t\tlocation = loc;\n+\t    }\n+\t}\n+      else\n+\tbreak;\n+    }\n+  return false;\n }\n \n /* Return TRUE if LOCATION is a source code location of a token coming"}]}