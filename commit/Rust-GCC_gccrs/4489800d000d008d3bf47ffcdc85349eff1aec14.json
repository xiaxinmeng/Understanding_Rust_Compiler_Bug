{"sha": "4489800d000d008d3bf47ffcdc85349eff1aec14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ4OTgwMGQwMDBkMDA4ZDNiZjQ3ZmZjZGM4NTM0OWVmZjFhZWMxNA==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2011-03-25T19:11:26Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2011-03-25T19:11:26Z"}, "message": "files.c (file_hash_eq): Use filename_cmp instead of strcmp.\n\n2011-03-25  Kai Tietz  <ktietz@redhat.com>\n\n\t* files.c (file_hash_eq): Use filename_cmp\n\tinstead of strcmp.\n\t(nonexistent_file_hash_eq): Likewise.\n\t(remap_filename): Likewise.\n\tHandle absolute DOS-path,\n\t(append_file_to_dir): Check for IS_DIR_SEPARATOR\n\tinstead of slash.\n\t(read_name_map): Likewise.\n\t* linemap.c (linemap_add): Use filename_cmp\n\tinstead of strcmp.\n\t* mkdeps.c (apply_vpath): Use filename_ncmp\n\tinstead of strncmp.\n\t(deps_restore): Use filename_cmp instead of\n\tstrcmp.\n\t* init.c (read_original_directory): Use\n\tIS_DIR_SEPARATOR instead of checking for slash.\n\nFrom-SVN: r171521", "tree": {"sha": "3c0770ee3a7ff6a848c29032309a198598258211", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c0770ee3a7ff6a848c29032309a198598258211"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4489800d000d008d3bf47ffcdc85349eff1aec14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4489800d000d008d3bf47ffcdc85349eff1aec14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4489800d000d008d3bf47ffcdc85349eff1aec14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4489800d000d008d3bf47ffcdc85349eff1aec14/comments", "author": null, "committer": null, "parents": [{"sha": "75f6ec9afdb6457f7a728a4360b0a37160b88c4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75f6ec9afdb6457f7a728a4360b0a37160b88c4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75f6ec9afdb6457f7a728a4360b0a37160b88c4b"}], "stats": {"total": 50, "additions": 39, "deletions": 11}, "files": [{"sha": "cfd07d4590be2bc63fab61ae3ba22b76e073f449", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4489800d000d008d3bf47ffcdc85349eff1aec14/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4489800d000d008d3bf47ffcdc85349eff1aec14/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=4489800d000d008d3bf47ffcdc85349eff1aec14", "patch": "@@ -1,3 +1,22 @@\n+2011-03-25  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* files.c (file_hash_eq): Use filename_cmp\n+\tinstead of strcmp.\n+\t(nonexistent_file_hash_eq): Likewise.\n+\t(remap_filename): Likewise.\n+\tHandle absolute DOS-path,\n+\t(append_file_to_dir): Check for IS_DIR_SEPARATOR\n+\tinstead of slash.\n+\t(read_name_map): Likewise.\n+\t* linemap.c (linemap_add): Use filename_cmp\n+\tinstead of strcmp.\n+\t* mkdeps.c (apply_vpath): Use filename_ncmp\n+\tinstead of strncmp.\n+\t(deps_restore): Use filename_cmp instead of\n+\tstrcmp.\n+\t* init.c (read_original_directory): Use\n+\tIS_DIR_SEPARATOR instead of checking for slash.\n+\n 2011-03-21  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR preprocessor/48192"}, {"sha": "e3cff498d8c4c5cb29534b3c7da9f2907231a3a2", "filename": "libcpp/files.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4489800d000d008d3bf47ffcdc85349eff1aec14/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4489800d000d008d3bf47ffcdc85349eff1aec14/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=4489800d000d008d3bf47ffcdc85349eff1aec14", "patch": "@@ -1155,15 +1155,15 @@ file_hash_eq (const void *p, const void *q)\n   else\n     hname = entry->u.dir->name;\n \n-  return strcmp (hname, fname) == 0;\n+  return filename_cmp (hname, fname) == 0;\n }\n \n /* Compare entries in the nonexistent file hash table.  These are just\n    strings.  */\n static int\n nonexistent_file_hash_eq (const void *p, const void *q)\n {\n-  return strcmp ((const char *) p, (const char *) q) == 0;\n+  return filename_cmp ((const char *) p, (const char *) q) == 0;\n }\n \n /* Initialize everything in this source file.  */\n@@ -1413,7 +1413,7 @@ append_file_to_dir (const char *fname, cpp_dir *dir)\n   flen = strlen (fname);\n   path = XNEWVEC (char, dlen + 1 + flen + 1);\n   memcpy (path, dir->name, dlen);\n-  if (dlen && path[dlen - 1] != '/')\n+  if (dlen && !IS_DIR_SEPARATOR (path[dlen - 1]))\n     path[dlen++] = '/';\n   memcpy (&path[dlen], fname, flen + 1);\n \n@@ -1461,7 +1461,7 @@ read_name_map (cpp_dir *dir)\n   len = dir->len;\n   name = (char *) alloca (len + sizeof (FILE_NAME_MAP_FILE) + 1);\n   memcpy (name, dir->name, len);\n-  if (len && name[len - 1] != '/')\n+  if (len && !IS_DIR_SEPARATOR (name[len - 1]))\n     name[len++] = '/';\n   strcpy (name + len, FILE_NAME_MAP_FILE);\n   f = fopen (name, \"r\");\n@@ -1532,10 +1532,18 @@ remap_filename (cpp_reader *pfile, _cpp_file *file)\n \tread_name_map (dir);\n \n       for (index = 0; dir->name_map[index]; index += 2)\n-\tif (!strcmp (dir->name_map[index], fname))\n+\tif (!filename_cmp (dir->name_map[index], fname))\n \t    return xstrdup (dir->name_map[index + 1]);\n-\n+      if (IS_ABSOLUTE_PATH (fname))\n+\treturn NULL;\n       p = strchr (fname, '/');\n+#ifdef HAVE_DOS_BASED_FILE_SYSTEM\n+      {\n+\tchar *p2 = strchr (fname, '\\\\');\n+\tif (!p || (p > p2))\n+\t  p = p2;\n+      }\n+#endif\n       if (!p || p == fname)\n \treturn NULL;\n "}, {"sha": "5c6dacf205e3a558c20452f9d8758287b72ffe7a", "filename": "libcpp/init.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4489800d000d008d3bf47ffcdc85349eff1aec14/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4489800d000d008d3bf47ffcdc85349eff1aec14/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=4489800d000d008d3bf47ffcdc85349eff1aec14", "patch": "@@ -26,6 +26,7 @@ along with this program; see the file COPYING3.  If not see\n #include \"internal.h\"\n #include \"mkdeps.h\"\n #include \"localedir.h\"\n+#include \"filenames.h\"\n \n static void init_library (void);\n static void mark_named_operators (cpp_reader *, int);\n@@ -640,8 +641,8 @@ read_original_directory (cpp_reader *pfile)\n \n   if (token->type != CPP_STRING\n       || ! (token->val.str.len >= 5\n-\t    && token->val.str.text[token->val.str.len-2] == '/'\n-\t    && token->val.str.text[token->val.str.len-3] == '/'))\n+\t    && IS_DIR_SEPARATOR (token->val.str.text[token->val.str.len-2])\n+\t    && IS_DIR_SEPARATOR (token->val.str.text[token->val.str.len-3])))\n     {\n       _cpp_backup_tokens (pfile, 3);\n       return;"}, {"sha": "86e2484fd0a755fbef4ddf81e5cc68ccab1cc1e2", "filename": "libcpp/line-map.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4489800d000d008d3bf47ffcdc85349eff1aec14/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4489800d000d008d3bf47ffcdc85349eff1aec14/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=4489800d000d008d3bf47ffcdc85349eff1aec14", "patch": "@@ -138,7 +138,7 @@ linemap_add (struct line_maps *set, enum lc_reason reason,\n       else\n \t{\n \t  from = INCLUDED_FROM (set, map - 1);\n-\t  error = to_file && strcmp (from->to_file, to_file);\n+\t  error = to_file && filename_cmp (from->to_file, to_file);\n \t}\n \n       /* Depending upon whether we are handling preprocessed input or"}, {"sha": "af11ac3a6e324d635b8abbacdc9015f07cb37c37", "filename": "libcpp/mkdeps.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4489800d000d008d3bf47ffcdc85349eff1aec14/libcpp%2Fmkdeps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4489800d000d008d3bf47ffcdc85349eff1aec14/libcpp%2Fmkdeps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmkdeps.c?ref=4489800d000d008d3bf47ffcdc85349eff1aec14", "patch": "@@ -130,7 +130,7 @@ apply_vpath (struct deps *d, const char *t)\n       unsigned int i;\n       for (i = 0; i < d->nvpaths; i++)\n \t{\n-\t  if (!strncmp (d->vpathv[i], t, d->vpathlv[i]))\n+\t  if (!filename_ncmp (d->vpathv[i], t, d->vpathlv[i]))\n \t    {\n \t      const char *p = t + d->vpathlv[i];\n \t      if (!IS_DIR_SEPARATOR (*p))\n@@ -421,7 +421,7 @@ deps_restore (struct deps *deps, FILE *fd, const char *self)\n       buf[num_to_read] = '\\0';\n \n       /* Generate makefile dependencies from .pch if -nopch-deps.  */\n-      if (self != NULL && strcmp (buf, self) != 0)\n+      if (self != NULL && filename_cmp (buf, self) != 0)\n         deps_add_dep (deps, buf);\n     }\n "}]}