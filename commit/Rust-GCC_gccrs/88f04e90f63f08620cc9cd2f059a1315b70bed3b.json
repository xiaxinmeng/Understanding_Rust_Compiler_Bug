{"sha": "88f04e90f63f08620cc9cd2f059a1315b70bed3b", "node_id": "C_kwDOANBUbNoAKDg4ZjA0ZTkwZjYzZjA4NjIwY2M5Y2QyZjA1OWExMzE1YjcwYmVkM2I", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-07T07:01:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-07T07:01:04Z"}, "message": "c++: Improve handling of foreigner namespace attributes\n\nIn some cases we want to look up or remove both standard\nattributes and attributes from gnu namespace but not others.\nThis patch arranges for ATTR_NS of \"\" to stand for ATTR_NS\nNULL or \"gnu\", so that we don't need 2 separate calls, and\nintroduces is_attribute_namespace_p function which allows\ntesting the namespace of an attribute similar way.\n\nThe patch also uses the new lookup_attribute overload and extra\ntests to avoid emitting weird warnings on foreign namespace attributes\nwhich we should just ignore (perhaps with a warning), but shouldn't\nimply any meaning to them just because they have a name matching some\nstandard or gnu attribute name.\n\n2022-10-07  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/\n\t* attribs.h (is_attribute_namespace_p): New inline function.\n\t(lookup_attribute): Document meaning of ATTR_NS equal to \"\".\n\t* attribs.cc (remove_attribute): Use is_attribute_namespace_p.\n\t(private_lookup_attribute): For ATTR_NS \"\" match either standard\n\tattribute or \"gnu\" namespace one.\ngcc/c-family/\n\t* c-common.cc (attribute_fallthrough_p): Lookup fallthrough attribute\n\tonly in gnu namespace or as standard attribute, treat fallthrough\n\tattributes in other namespaces like any other unknown attribute.\ngcc/cp/\n\t* parser.cc (cp_parser_check_std_attribute): Only do checks if\n\tattribute is a standard attribute or in gnu namespace and only\n\tlookup other attributes in those namespaces.\n\t* cp-gimplify.cc (lookup_hotness_attribute): Adjust function comment.\n\tOnly return true for standard attribute or gnu namespace attribute.\n\t(remove_hotness_attribute): Only remove hotness attributes when\n\tthey are standard or in gnu namespace, implement it in a single\n\tloop rather than former 4 now 8 remove_attribute calls.\ngcc/testsuite/\n\t* g++.dg/cpp1z/fallthrough2.C: New test.\n\t* g++.dg/cpp2a/attr-likely7.C: New test.", "tree": {"sha": "868dae2613d56d7f3cb26d24e62ff81a8d2d7745", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/868dae2613d56d7f3cb26d24e62ff81a8d2d7745"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88f04e90f63f08620cc9cd2f059a1315b70bed3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f04e90f63f08620cc9cd2f059a1315b70bed3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88f04e90f63f08620cc9cd2f059a1315b70bed3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f04e90f63f08620cc9cd2f059a1315b70bed3b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "348e46fa8cba960c23170673bfc0c1b4fb384975", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/348e46fa8cba960c23170673bfc0c1b4fb384975", "html_url": "https://github.com/Rust-GCC/gccrs/commit/348e46fa8cba960c23170673bfc0c1b4fb384975"}], "stats": {"total": 150, "additions": 123, "deletions": 27}, "files": [{"sha": "27dea7485616a40c55dbbae10002386c887c9b77", "filename": "gcc/attribs.cc", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f04e90f63f08620cc9cd2f059a1315b70bed3b/gcc%2Fattribs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f04e90f63f08620cc9cd2f059a1315b70bed3b/gcc%2Fattribs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.cc?ref=88f04e90f63f08620cc9cd2f059a1315b70bed3b", "patch": "@@ -1645,7 +1645,8 @@ remove_attribute (const char *attr_name, tree list)\n   return list;\n }\n \n-/* Similarly but also match namespace on the removed attributes.  */\n+/* Similarly but also match namespace on the removed attributes.\n+   ATTR_NS \"\" stands for NULL or \"gnu\" namespace.  */\n \n tree\n remove_attribute (const char *attr_ns, const char *attr_name, tree list)\n@@ -1659,15 +1660,11 @@ remove_attribute (const char *attr_ns, const char *attr_name, tree list)\n       tree l = *p;\n \n       tree attr = get_attribute_name (l);\n-      if (is_attribute_p (attr_name, attr))\n+      if (is_attribute_p (attr_name, attr)\n+\t  && is_attribute_namespace_p (attr_ns, l))\n \t{\n-\t  tree ns = get_attribute_namespace (l);\n-\t  if ((ns == NULL_TREE && attr_ns == NULL)\n-\t      || (ns && attr_ns && is_attribute_p (attr_ns, ns)))\n-\t    {\n-\t      *p = TREE_CHAIN (l);\n-\t      continue;\n-\t    }\n+\t  *p = TREE_CHAIN (l);\n+\t  continue;\n \t}\n       p = &TREE_CHAIN (l);\n     }\n@@ -2088,14 +2085,20 @@ private_lookup_attribute (const char *attr_ns, const char *attr_name,\n \t  tree ns = get_attribute_namespace (list);\n \t  if (ns == NULL_TREE)\n \t    {\n-\t      if (attr_ns == NULL)\n+\t      if (attr_ns_len == 0)\n \t\tbreak;\n \t    }\n \t  else if (attr_ns)\n \t    {\n \t      ident_len = IDENTIFIER_LENGTH (ns);\n-\t      if (cmp_attribs (attr_ns, attr_ns_len, IDENTIFIER_POINTER (ns),\n-\t\t\t       ident_len))\n+\t      if (attr_ns_len == 0)\n+\t\t{\n+\t\t  if (cmp_attribs (\"gnu\", strlen (\"gnu\"),\n+\t\t\t\t   IDENTIFIER_POINTER (ns), ident_len))\n+\t\t    break;\n+\t\t}\n+\t      else if (cmp_attribs (attr_ns, attr_ns_len,\n+\t\t\t\t    IDENTIFIER_POINTER (ns), ident_len))\n \t\tbreak;\n \t    }\n \t}"}, {"sha": "1dc16e4bc4e949d263b5b531db05d0c2f27217c4", "filename": "gcc/attribs.h", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f04e90f63f08620cc9cd2f059a1315b70bed3b/gcc%2Fattribs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f04e90f63f08620cc9cd2f059a1315b70bed3b/gcc%2Fattribs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.h?ref=88f04e90f63f08620cc9cd2f059a1315b70bed3b", "patch": "@@ -188,6 +188,22 @@ is_attribute_p (const char *attr_name, const_tree ident)\n \t\t      IDENTIFIER_POINTER (ident), IDENTIFIER_LENGTH (ident));\n }\n \n+/* Given an attribute ATTR and a string ATTR_NS, return true\n+   if the attribute namespace is valid for the string.  ATTR_NS \"\" stands\n+   for standard attribute (NULL get_attribute_namespace) or \"gnu\"\n+   namespace.  */\n+\n+static inline bool\n+is_attribute_namespace_p (const char *attr_ns, const_tree attr)\n+{\n+  tree ident = get_attribute_namespace (attr);\n+  if (attr_ns == NULL)\n+    return ident == NULL_TREE;\n+  if (attr_ns[0])\n+    return ident && is_attribute_p (attr_ns, ident);\n+  return ident == NULL_TREE || is_attribute_p (\"gnu\", ident);\n+}\n+\n /* Given an attribute name ATTR_NAME and a list of attributes LIST,\n    return a pointer to the attribute's list element if the attribute\n    is part of the list, or NULL_TREE if not found.  If the attribute\n@@ -217,7 +233,8 @@ lookup_attribute (const char *attr_name, tree list)\n     }\n }\n \n-/* Similar to lookup_attribute, but also match the attribute namespace.  */\n+/* Similar to lookup_attribute, but also match the attribute namespace.\n+   ATTR_NS \"\" stands for either standard attribute or \"gnu\" namespace.  */\n \n static inline tree\n lookup_attribute (const char *attr_ns, const char *attr_name, tree list)"}, {"sha": "9ec9100cc90554a83af07e3d5221b892be9fc057", "filename": "gcc/c-family/c-common.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f04e90f63f08620cc9cd2f059a1315b70bed3b/gcc%2Fc-family%2Fc-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f04e90f63f08620cc9cd2f059a1315b70bed3b/gcc%2Fc-family%2Fc-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.cc?ref=88f04e90f63f08620cc9cd2f059a1315b70bed3b", "patch": "@@ -6008,12 +6008,12 @@ attribute_fallthrough_p (tree attr)\n {\n   if (attr == error_mark_node)\n    return false;\n-  tree t = lookup_attribute (\"fallthrough\", attr);\n+  tree t = lookup_attribute (\"\", \"fallthrough\", attr);\n   if (t == NULL_TREE)\n     return false;\n   /* It is no longer true that \"this attribute shall appear at most once in\n      each attribute-list\", but we still give a warning.  */\n-  if (lookup_attribute (\"fallthrough\", TREE_CHAIN (t)))\n+  if (lookup_attribute (\"\", \"fallthrough\", TREE_CHAIN (t)))\n     warning (OPT_Wattributes, \"attribute %<fallthrough%> specified multiple \"\n \t     \"times\");\n   /* No attribute-argument-clause shall be present.  */\n@@ -6024,7 +6024,8 @@ attribute_fallthrough_p (tree attr)\n   for (t = attr; t != NULL_TREE; t = TREE_CHAIN (t))\n     {\n       tree name = get_attribute_name (t);\n-      if (!is_attribute_p (\"fallthrough\", name))\n+      if (!is_attribute_p (\"fallthrough\", name)\n+\t  || !is_attribute_namespace_p (\"\", t))\n \t{\n \t  if (!c_dialect_cxx () && get_attribute_namespace (t) == NULL_TREE)\n \t    /* The specifications of standard attributes in C mean"}, {"sha": "cb8bbd8277f8c3a2201ca9c36f297f2dbe277696", "filename": "gcc/cp/cp-gimplify.cc", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f04e90f63f08620cc9cd2f059a1315b70bed3b/gcc%2Fcp%2Fcp-gimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f04e90f63f08620cc9cd2f059a1315b70bed3b/gcc%2Fcp%2Fcp-gimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.cc?ref=88f04e90f63f08620cc9cd2f059a1315b70bed3b", "patch": "@@ -3028,32 +3028,44 @@ cp_fold (tree x)\n   return x;\n }\n \n-/* Look up either \"hot\" or \"cold\" in attribute list LIST.  */\n+/* Look up \"hot\", \"cold\", \"likely\" or \"unlikely\" in attribute list LIST.  */\n \n tree\n lookup_hotness_attribute (tree list)\n {\n   for (; list; list = TREE_CHAIN (list))\n     {\n       tree name = get_attribute_name (list);\n-      if (is_attribute_p (\"hot\", name)\n-\t  || is_attribute_p (\"cold\", name)\n-\t  || is_attribute_p (\"likely\", name)\n-\t  || is_attribute_p (\"unlikely\", name))\n+      if ((is_attribute_p (\"hot\", name)\n+\t   || is_attribute_p (\"cold\", name)\n+\t   || is_attribute_p (\"likely\", name)\n+\t   || is_attribute_p (\"unlikely\", name))\n+\t  && is_attribute_namespace_p (\"\", list))\n \tbreak;\n     }\n   return list;\n }\n \n-/* Remove both \"hot\" and \"cold\" attributes from LIST.  */\n+/* Remove \"hot\", \"cold\", \"likely\" and \"unlikely\" attributes from LIST.  */\n \n static tree\n remove_hotness_attribute (tree list)\n {\n-  list = remove_attribute (\"hot\", list);\n-  list = remove_attribute (\"cold\", list);\n-  list = remove_attribute (\"likely\", list);\n-  list = remove_attribute (\"unlikely\", list);\n+  for (tree *p = &list; *p; )\n+    {\n+      tree l = *p;\n+      tree name = get_attribute_name (l);\n+      if ((is_attribute_p (\"hot\", name)\n+\t   || is_attribute_p (\"cold\", name)\n+\t   || is_attribute_p (\"likely\", name)\n+\t   || is_attribute_p (\"unlikely\", name))\n+\t  && is_attribute_namespace_p (\"\", l))\n+\t{\n+\t  *p = TREE_CHAIN (l);\n+\t  continue;\n+\t}\n+      p = &TREE_CHAIN (l);\n+    }\n   return list;\n }\n "}, {"sha": "555476e42e7bee2493dfc51d6db3ea235d8dac33", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f04e90f63f08620cc9cd2f059a1315b70bed3b/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f04e90f63f08620cc9cd2f059a1315b70bed3b/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=88f04e90f63f08620cc9cd2f059a1315b70bed3b", "patch": "@@ -29265,7 +29265,8 @@ cp_parser_check_std_attribute (location_t loc, tree attributes, tree attribute)\n   if (attributes)\n     for (const auto &a : alist)\n       if (is_attribute_p (a, get_attribute_name (attribute))\n-\t  && lookup_attribute (a, attributes))\n+\t  && is_attribute_namespace_p (\"\", attribute)\n+\t  && lookup_attribute (\"\", a, attributes))\n \t{\n \t  if (!from_macro_expansion_at (loc))\n \t    warning_at (loc, OPT_Wattributes, \"attribute %qs specified \""}, {"sha": "b74323fd168920d5aa236198d168789b24bdf85d", "filename": "gcc/testsuite/g++.dg/cpp1z/fallthrough2.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f04e90f63f08620cc9cd2f059a1315b70bed3b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffallthrough2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f04e90f63f08620cc9cd2f059a1315b70bed3b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffallthrough2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffallthrough2.C?ref=88f04e90f63f08620cc9cd2f059a1315b70bed3b", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do compile { target c++17 } }\n+// { dg-options \"-Wextra -Wall -Wpedantic\" }\n+\n+int\n+foo (int i)\n+{\n+  switch (i)\n+    {\n+    case 2:\n+      ++i;\n+      [[fallthrough, whatever::fallthrough]];\t\t// { dg-bogus \"attribute 'fallthrough' specified multiple times\" }\n+    case 3:\t\t\t\t\t\t// { dg-warning \"'fallthrough' attribute ignored\" \"\" { target *-*-* } .-1 }\n+      ++i;\n+      [[fallthrough, whatever2::fallthrough(1, 2, 3)]];\t// { dg-bogus \"attribute 'fallthrough' specified multiple times\" }\n+    case 4:\t\t\t\t\t\t// { dg-warning \"'fallthrough' attribute ignored\" \"\" { target *-*-* } .-1 }\n+      [[whatever3::fallthrough(\"abcd\")]];\t\t// { dg-warning \"attributes at the beginning of statement are ignored\" }\n+    case 5:\n+      [[whatever4::fallthrough]];\t\t\t// { dg-bogus \"attribute 'fallthrough' not preceding a case label or default label\" }\n+      ++i;\t\t\t\t\t\t// { dg-warning \"attributes at the beginning of statement are ignored\" \"\" { target *-*-* } .-1 }\n+    default:\n+      break;\n+    }\n+  return i;\n+}"}, {"sha": "638a6d9728e681ea5124e137d29d49e445cd0dd8", "filename": "gcc/testsuite/g++.dg/cpp2a/attr-likely7.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88f04e90f63f08620cc9cd2f059a1315b70bed3b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fattr-likely7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88f04e90f63f08620cc9cd2f059a1315b70bed3b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fattr-likely7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fattr-likely7.C?ref=88f04e90f63f08620cc9cd2f059a1315b70bed3b", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile { target c++20 } }\n+// { dg-additional-options -fdump-tree-gimple }\n+// { dg-final { scan-tree-dump-times \"hot label\" 5 \"gimple\" } }\n+// { dg-final { scan-tree-dump-times \"cold label\" 3 \"gimple\" } }\n+\n+bool b;\n+\n+template <class T> int f()\n+{\n+  if (b)\n+    [[likely, whatever::unlikely (\"abcd\")]] return 0;\t\t// { dg-bogus \"ignoring attribute 'unlikely' after earlier 'likely'\" }\n+  else\t\t\t\t\t\t\t\t// { dg-warning \"attributes at the beginning of statement are ignored\" \"\" { target *-*-* } .-1 }\n+    [[unlikely, whatever2::hot]] flabel: return 1;\t\t// { dg-warning \"'whatever2::hot' scoped attribute directive ignored\" }\n+  switch (b)\n+    {\n+      [[likely, whatever3::cold (1, 2, 3)]] case true: break;\t// { dg-warning \"'whatever3::cold' scoped attribute directive ignored\" }\n+    };\n+  return 1;\n+}\n+\n+int main()\n+{\n+  if (b)\n+    [[whatever4::unlikely (1), likely]] return 0;\t\t// { dg-bogus \"ignoring attribute 'likely' after earlier 'unlikely'\" }\n+  else if (b)\t\t\t\t\t\t\t// { dg-warning \"attributes at the beginning of statement are ignored\" \"\" { target *-*-* } .-1 }\n+    [[whatever5::hot, unlikely]] elabel:\t\t\t// { dg-warning \"'whatever5::hot' scoped attribute directive ignored\" }\n+      return 1;\n+  else\n+    [[whatever6::cold, likely]] b = false;\t\t\t// { dg-bogus \"ignoring attribute 'likely' after earlier 'cold'\" }\n+\t\t\t\t\t\t\t\t// { dg-warning \"attributes at the beginning of statement are ignored\" \"\" { target *-*-* } .-1 }\n+  f<int>();\n+\n+  switch (b)\n+    {\n+      [[whatever7::unlikely (1), likely]] case true: break;\t// { dg-warning \"'whatever7::unlikely' scoped attribute directive ignored\" }\n+      [[whatever8::unlikely, unlikely]] case false: break;\t// { dg-bogus \"attribute 'unlikely' specified multiple times\" }\n+    };\t\t\t\t\t\t\t\t// { dg-warning \"'whatever8::unlikely' scoped attribute directive ignored\" \"\" { target *-*-* } .-1 }\n+}"}]}