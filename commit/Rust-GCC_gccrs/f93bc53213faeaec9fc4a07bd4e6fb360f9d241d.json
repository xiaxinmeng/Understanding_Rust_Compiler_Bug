{"sha": "f93bc53213faeaec9fc4a07bd4e6fb360f9d241d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkzYmM1MzIxM2ZhZWFlYzlmYzRhMDdiZDRlNmZiMzYwZjlkMjQxZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-02-22T21:34:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-02-22T21:34:07Z"}, "message": "re PR target/69888 (ICE: SIGSEGV in decide_alg (i386.c:26169) due to infinite (?) recursion with -minline-all-stringops -mmemset-strategy=no_stringop:-1:noalign)\n\n\tPR target/69888\n\t* config/i386/i386.c (decide_alg): Ensure we don't recurse with\n\tidentical arguments.  Formatting and spelling fixes.\n\n\t* gcc.target/i386/pr69888.c: New test.\n\nFrom-SVN: r233614", "tree": {"sha": "62acd1a73c8d21cb374843f8b731238857b2ebab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62acd1a73c8d21cb374843f8b731238857b2ebab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f93bc53213faeaec9fc4a07bd4e6fb360f9d241d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f93bc53213faeaec9fc4a07bd4e6fb360f9d241d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f93bc53213faeaec9fc4a07bd4e6fb360f9d241d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f93bc53213faeaec9fc4a07bd4e6fb360f9d241d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "78250306ccc6a32aa473beab781457e2161db607", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78250306ccc6a32aa473beab781457e2161db607", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78250306ccc6a32aa473beab781457e2161db607"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "1266d58defcd6cbdac173f4dbf3233fb2fb734d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f93bc53213faeaec9fc4a07bd4e6fb360f9d241d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f93bc53213faeaec9fc4a07bd4e6fb360f9d241d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f93bc53213faeaec9fc4a07bd4e6fb360f9d241d", "patch": "@@ -1,5 +1,9 @@\n 2016-02-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/69888\n+\t* config/i386/i386.c (decide_alg): Ensure we don't recurse with\n+\tidentical arguments.  Formatting and spelling fixes.\n+\n \tPR target/69885\n \t* doc/md.texi (ashl@var{m}3): Document that mode of operand 2 must\n \tbe specified."}, {"sha": "5c034f2430433a7db7e391b77a504e77f8c10977", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f93bc53213faeaec9fc4a07bd4e6fb360f9d241d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f93bc53213faeaec9fc4a07bd4e6fb360f9d241d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f93bc53213faeaec9fc4a07bd4e6fb360f9d241d", "patch": "@@ -26032,11 +26032,12 @@ decide_alg (HOST_WIDE_INT count, HOST_WIDE_INT expected_size,\n \t    bool memset, bool zero_memset, bool have_as,\n \t    int *dynamic_check, bool *noalign)\n {\n-  const struct stringop_algs * algs;\n+  const struct stringop_algs *algs;\n   bool optimize_for_speed;\n   int max = 0;\n   const struct processor_costs *cost;\n   int i;\n+  HOST_WIDE_INT orig_expected_size = expected_size;\n   bool any_alg_usable_p = false;\n \n   *noalign = false;\n@@ -26066,7 +26067,7 @@ decide_alg (HOST_WIDE_INT count, HOST_WIDE_INT expected_size,\n       any_alg_usable_p |= usable;\n \n       if (candidate != libcall && candidate && usable)\n-\t  max = algs->size[i].max;\n+\tmax = algs->size[i].max;\n     }\n \n   /* If expected size is not known but max size is small enough\n@@ -26076,7 +26077,7 @@ decide_alg (HOST_WIDE_INT count, HOST_WIDE_INT expected_size,\n       && expected_size == -1)\n     expected_size = min_size / 2 + max_size / 2;\n \n-  /* If user specified the algorithm, honnor it if possible.  */\n+  /* If user specified the algorithm, honor it if possible.  */\n   if (ix86_stringop_alg != no_stringop\n       && alg_usable_p (ix86_stringop_alg, memset, have_as))\n     return ix86_stringop_alg;\n@@ -26152,20 +26153,20 @@ decide_alg (HOST_WIDE_INT count, HOST_WIDE_INT expected_size,\n \t  || !alg_usable_p (algs->unknown_size, memset, have_as)))\n     {\n       enum stringop_alg alg;\n+      HOST_WIDE_INT new_expected_size = max > 0 ? max / 2 : 2048;\n \n-      /* If there aren't any usable algorithms, then recursing on\n-         smaller sizes isn't going to find anything.  Just return the\n-         simple byte-at-a-time copy loop.  */\n-      if (!any_alg_usable_p)\n+      /* If there aren't any usable algorithms or if recursing with the\n+\t same arguments as before, then recursing on smaller sizes or\n+\t same size isn't going to find anything.  Just return the simple\n+\t byte-at-a-time copy loop.  */\n+      if (!any_alg_usable_p || orig_expected_size == new_expected_size)\n         {\n           /* Pick something reasonable.  */\n           if (TARGET_INLINE_STRINGOPS_DYNAMICALLY)\n             *dynamic_check = 128;\n           return loop_1_byte;\n         }\n-      if (max <= 0)\n-\tmax = 4096;\n-      alg = decide_alg (count, max / 2, min_size, max_size, memset,\n+      alg = decide_alg (count, new_expected_size, min_size, max_size, memset,\n \t\t\tzero_memset, have_as, dynamic_check, noalign);\n       gcc_assert (*dynamic_check == -1);\n       if (TARGET_INLINE_STRINGOPS_DYNAMICALLY)"}, {"sha": "a9529afae69270d0439a4b6110bc7b211ee6ee3d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f93bc53213faeaec9fc4a07bd4e6fb360f9d241d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f93bc53213faeaec9fc4a07bd4e6fb360f9d241d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f93bc53213faeaec9fc4a07bd4e6fb360f9d241d", "patch": "@@ -1,3 +1,8 @@\n+2016-02-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/69888\n+\t* gcc.target/i386/pr69888.c: New test.\n+\n 2016-02-22  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/69882"}, {"sha": "498fe5acc2cfca7a9172e4e53c5b469ef6705918", "filename": "gcc/testsuite/gcc.target/i386/pr69888.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f93bc53213faeaec9fc4a07bd4e6fb360f9d241d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69888.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f93bc53213faeaec9fc4a07bd4e6fb360f9d241d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69888.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr69888.c?ref=f93bc53213faeaec9fc4a07bd4e6fb360f9d241d", "patch": "@@ -0,0 +1,10 @@\n+/* PR target/69888 */\n+/* { dg-do compile } */\n+/* { dg-options \"-minline-all-stringops -mmemset-strategy=no_stringop:-1:noalign\" } */\n+/* { dg-additional-options \"-march=geode\" { target ia32 } } */\n+\n+void\n+foo (char *p)\n+{\n+  __builtin_memset (p, 0, 32);\n+}"}]}