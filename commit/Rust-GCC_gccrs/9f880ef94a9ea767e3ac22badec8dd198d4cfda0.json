{"sha": "9f880ef94a9ea767e3ac22badec8dd198d4cfda0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY4ODBlZjk0YTllYTc2N2UzYWMyMmJhZGVjOGRkMTk4ZDRjZmRhMA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-01-19T20:33:29Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-01-19T20:33:29Z"}, "message": "re PR c++/13592 (C++ parser regression)\n\n\tPR c++/13592\n\t* call.c (build_field_call): Remove.\n\t(n_build_method_call): Likewise.\n\t(build_method_call): Likewise.\n\t(build_new_method_call): Do not call build_field_call.\n\t* class.c (n_build_method_call): Remove.\n\t(print_class_statistics): Do not print it.\n\t* cp-tree.h (build_method_call): Remove declaration.\n\t(finish_object_call_expr): Likewise.\n\t(build_new_1): Do not use build_method_call.\n\t* parser.c (cp_parser_postfix_expression): Use finish_call_expr\n\twhen the function appearing on the right-hand-side of \".\" or \"->\"\n\tis not actually a function.\n\t* pt.c (tsubst_copy_and_build): Likewise.\n\t* semantics.c (finish_object_call_expr): Remove.\n\n\tPR c++/13592\n\t* g++.dg/template/call2.C: New test.\n\nFrom-SVN: r76173", "tree": {"sha": "de54ed902338fbf89d7510d0543652e38f2d398f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de54ed902338fbf89d7510d0543652e38f2d398f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f880ef94a9ea767e3ac22badec8dd198d4cfda0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f880ef94a9ea767e3ac22badec8dd198d4cfda0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f880ef94a9ea767e3ac22badec8dd198d4cfda0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f880ef94a9ea767e3ac22badec8dd198d4cfda0/comments", "author": null, "committer": null, "parents": [{"sha": "62e882937cf07a66f220adbb9ea1ae171db55ad5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e882937cf07a66f220adbb9ea1ae171db55ad5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62e882937cf07a66f220adbb9ea1ae171db55ad5"}], "stats": {"total": 274, "additions": 77, "deletions": 197}, "files": [{"sha": "976b0752fd638bbe61284dafb586e90ef2cad63e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f880ef94a9ea767e3ac22badec8dd198d4cfda0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f880ef94a9ea767e3ac22badec8dd198d4cfda0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9f880ef94a9ea767e3ac22badec8dd198d4cfda0", "patch": "@@ -1,3 +1,21 @@\n+2004-01-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/13592\n+\t* call.c (build_field_call): Remove.\n+\t(n_build_method_call): Likewise.\n+\t(build_method_call): Likewise.\n+\t(build_new_method_call): Do not call build_field_call.\n+\t* class.c (n_build_method_call): Remove.\n+\t(print_class_statistics): Do not print it.\n+\t* cp-tree.h (build_method_call): Remove declaration.\n+\t(finish_object_call_expr): Likewise.\n+\t(build_new_1): Do not use build_method_call.\n+\t* parser.c (cp_parser_postfix_expression): Use finish_call_expr\n+\twhen the function appearing on the right-hand-side of \".\" or \"->\"\n+\tis not actually a function.\n+\t* pt.c (tsubst_copy_and_build): Likewise.\n+\t* semantics.c (finish_object_call_expr): Remove.\n+\n 2004-01-18  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/13710"}, {"sha": "ea4e0669fb45889696fc448a4a67f37d044bab5b", "filename": "gcc/cp/call.c", "status": "modified", "additions": 0, "deletions": 137, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f880ef94a9ea767e3ac22badec8dd198d4cfda0/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f880ef94a9ea767e3ac22badec8dd198d4cfda0/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=9f880ef94a9ea767e3ac22badec8dd198d4cfda0", "patch": "@@ -40,7 +40,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"target.h\"\n #include \"convert.h\"\n \n-static tree build_field_call (tree, tree, tree);\n static struct z_candidate * tourney (struct z_candidate *);\n static int equal_functions (tree, tree);\n static int joust (struct z_candidate *, struct z_candidate *, bool);\n@@ -128,42 +127,6 @@ build_vfield_ref (tree datum, tree type)\n \t\tdatum, TYPE_VFIELD (type));\n }\n \n-/* Build a call to a member of an object.  I.e., one that overloads\n-   operator ()(), or is a pointer-to-function or pointer-to-method.  */\n-\n-static tree\n-build_field_call (tree instance_ptr, tree decl, tree parms)\n-{\n-  tree instance;\n-\n-  if (decl == error_mark_node || decl == NULL_TREE)\n-    return decl;\n-\n-  if (TREE_CODE (decl) == FIELD_DECL || TREE_CODE (decl) == VAR_DECL)\n-    {\n-      /* If it's a field, try overloading operator (),\n-\t or calling if the field is a pointer-to-function.  */\n-      instance = build_indirect_ref (instance_ptr, NULL);\n-      instance = build_class_member_access_expr (instance, decl, \n-\t\t\t\t\t\t /*access_path=*/NULL_TREE,\n-\t\t\t\t\t\t /*preserve_reference=*/false);\n-\n-      if (instance == error_mark_node)\n-\treturn error_mark_node;\n-\n-      if (IS_AGGR_TYPE (TREE_TYPE (instance)))\n-\treturn build_new_op (CALL_EXPR, LOOKUP_NORMAL,\n-\t\t\t     instance, parms, NULL_TREE);\n-      else if (TREE_CODE (TREE_TYPE (instance)) == FUNCTION_TYPE\n-\t       || (TREE_CODE (TREE_TYPE (instance)) == POINTER_TYPE\n-\t\t   && (TREE_CODE (TREE_TYPE (TREE_TYPE (instance)))\n-\t\t       == FUNCTION_TYPE)))\n-\treturn build_function_call (instance, parms);\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n /* Returns nonzero iff the destructor name specified in NAME\n    (a BIT_NOT_EXPR) matches BASETYPE.  The operand of NAME can take many\n    forms...  */\n@@ -342,102 +305,6 @@ build_call (tree function, tree parms)\n    `operator()()' is defined for the type of that field, then we return\n    that result.  */\n \n-#ifdef GATHER_STATISTICS\n-extern int n_build_method_call;\n-#endif\n-\n-tree\n-build_method_call (tree instance, tree name, tree parms,\n-                   tree basetype_path, int flags)\n-{\n-  tree fn;\n-  tree object_type;\n-  tree template_args = NULL_TREE;\n-  bool has_template_args = false;\n-\n-#ifdef GATHER_STATISTICS\n-  n_build_method_call++;\n-#endif\n-\n-  if (error_operand_p (instance)\n-      || name == error_mark_node\n-      || parms == error_mark_node)\n-    return error_mark_node;\n-\n-  my_friendly_assert (!processing_template_decl, 20030707);\n-\n-  if (TREE_CODE (TREE_TYPE (instance)) == REFERENCE_TYPE)\n-    instance = convert_from_reference (instance);\n-  object_type = TREE_TYPE (instance);\n-\n-  if (TREE_CODE (name) == BIT_NOT_EXPR)\n-    {\n-      tree instance_ptr;\n-\n-      if (parms)\n-\terror (\"destructors take no parameters\");\n-\n-      if (! check_dtor_name (object_type, name))\n-\terror\n-\t  (\"destructor name `~%T' does not match type `%T' of expression\",\n-\t   TREE_OPERAND (name, 0), object_type);\n-\n-      if (! TYPE_HAS_DESTRUCTOR (complete_type (object_type)))\n-\treturn convert_to_void (instance, /*implicit=*/NULL);\n-      instance = default_conversion (instance);\n-      instance_ptr = build_unary_op (ADDR_EXPR, instance, 0);\n-      return build_delete (build_pointer_type (object_type),\n-\t\t\t   instance_ptr, sfk_complete_destructor,\n-\t\t\t   LOOKUP_NORMAL|LOOKUP_DESTRUCTOR, 0);\n-    }\n-\n-  if (!CLASS_TYPE_P (object_type))\n-    {\n-      if ((flags & LOOKUP_COMPLAIN) \n-\t  && TREE_TYPE (instance) != error_mark_node)\n-\terror (\"request for member `%D' in `%E', which is of non-aggregate type `%T'\",\n-\t       name, instance, object_type);\n-      return error_mark_node;\n-    }\n-\n-  if (TREE_CODE (name) == TEMPLATE_ID_EXPR)\n-    {\n-      template_args = TREE_OPERAND (name, 1);\n-      has_template_args = true;\n-      name = TREE_OPERAND (name, 0);\n-    }\n-  if (TREE_CODE (name) == OVERLOAD)\n-    name = DECL_NAME (get_first_fn (name));\n-  else if (DECL_P (name))\n-    name = DECL_NAME (name);\n-  if (has_template_args)\n-    fn = lookup_fnfields (object_type, name, /*protect=*/2);\n-  else\n-    fn = lookup_member (object_type, name, /*protect=*/2, /*want_type=*/false);\n-  \n-  if (fn && TREE_CODE (fn) == TREE_LIST)\n-    {\n-      error (\"request for member `%D' is ambiguous\", name);\n-      print_candidates (fn);\n-      return error_mark_node;\n-    }\n-\n-  /* If the name could not be found, issue an error.  */\n-  if (!fn)\n-    return unqualified_name_lookup_error (name);\n-\n-  if (BASELINK_P (fn) && has_template_args)\n-    BASELINK_FUNCTIONS (fn)\n-      = build_nt (TEMPLATE_ID_EXPR,\n-\t\t  BASELINK_FUNCTIONS (fn),\n-\t\t  template_args);\n-  if (BASELINK_P (fn) && basetype_path)\n-    BASELINK_ACCESS_BINFO (fn) = basetype_path;\n-\n-  return build_new_method_call (instance, fn, parms, \n-\t\t\t\t/*conversion_path=*/NULL_TREE, flags);\n-}\n-\n /* New overloading code.  */\n \n struct z_candidate GTY(()) {\n@@ -5058,9 +4925,6 @@ build_new_method_call (tree instance, tree fns, tree args,\n \n   if (!BASELINK_P (fns))\n     {\n-      call = build_field_call (instance_ptr, fns, args);\n-      if (call)\n-\tgoto finish;\n       error (\"call to non-function `%D'\", fns);\n       return error_mark_node;\n     }\n@@ -5221,7 +5085,6 @@ build_new_method_call (tree instance, tree fns, tree args,\n       if (!is_dummy_object (instance_ptr) && TREE_SIDE_EFFECTS (instance))\n \tcall = build (COMPOUND_EXPR, TREE_TYPE (call), instance, call);\n     }\n- finish:;\n   \n   if (processing_template_decl && call != error_mark_node)\n     return build_min_non_dep"}, {"sha": "af5afb0c7903fe3e2f2b42462408ae6faf5fd32e", "filename": "gcc/cp/class.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f880ef94a9ea767e3ac22badec8dd198d4cfda0/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f880ef94a9ea767e3ac22badec8dd198d4cfda0/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=9f880ef94a9ea767e3ac22badec8dd198d4cfda0", "patch": "@@ -227,7 +227,6 @@ int n_vtable_searches = 0;\n int n_vtable_elems = 0;\n int n_convert_harshness = 0;\n int n_compute_conversion_costs = 0;\n-int n_build_method_call = 0;\n int n_inner_fields_searched = 0;\n #endif\n \n@@ -6288,8 +6287,6 @@ print_class_statistics (void)\n #ifdef GATHER_STATISTICS\n   fprintf (stderr, \"convert_harshness = %d\\n\", n_convert_harshness);\n   fprintf (stderr, \"compute_conversion_costs = %d\\n\", n_compute_conversion_costs);\n-  fprintf (stderr, \"build_method_call = %d (inner = %d)\\n\",\n-\t   n_build_method_call, n_inner_fields_searched);\n   if (n_vtables)\n     {\n       fprintf (stderr, \"vtables = %d; vtable searches = %d\\n\","}, {"sha": "f7d3a65087830d37af182fba807779fe5768f438", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f880ef94a9ea767e3ac22badec8dd198d4cfda0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f880ef94a9ea767e3ac22badec8dd198d4cfda0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9f880ef94a9ea767e3ac22badec8dd198d4cfda0", "patch": "@@ -3299,7 +3299,7 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, OP_FLAG, TYPENAME_FLAG };\n #define B_CLR(A,X) ((A)[(X)>>3] &= ~(1 << ((X)&7)))\n #define B_TST(A,X) ((A)[(X)>>3] &   (1 << ((X)&7)))\n \n-/* These are uses as bits in flags passed to build_method_call\n+/* These are uses as bits in flags passed to build_new_method_call\n    to control its error reporting behavior.\n \n    LOOKUP_PROTECT means flag access violations.\n@@ -3512,7 +3512,6 @@ extern tree build_vfield_ref\t\t\t(tree, tree);\n extern tree build_conditional_expr\t\t(tree, tree, tree);\n extern tree build_addr_func (tree);\n extern tree build_call (tree, tree);\n-extern tree build_method_call (tree, tree, tree, tree, int);\n extern bool null_ptr_cst_p (tree);\n extern bool sufficient_parms_p (tree);\n extern tree type_decays_to (tree);\n@@ -4062,7 +4061,6 @@ extern tree perform_koenig_lookup               (tree, tree);\n extern tree finish_call_expr                    (tree, tree, bool, bool);\n extern tree finish_increment_expr               (tree, enum tree_code);\n extern tree finish_this_expr                    (void);\n-extern tree finish_object_call_expr             (tree, tree, tree);\n extern tree finish_pseudo_destructor_expr       (tree, tree, tree);\n extern tree finish_unary_op_expr                (enum tree_code, tree);\n extern tree finish_compound_literal             (tree, tree);"}, {"sha": "6111f6b768c9105ce0708719cafd9d45ef11b1dd", "filename": "gcc/cp/init.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f880ef94a9ea767e3ac22badec8dd198d4cfda0/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f880ef94a9ea767e3ac22badec8dd198d4cfda0/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=9f880ef94a9ea767e3ac22badec8dd198d4cfda0", "patch": "@@ -1251,8 +1251,8 @@ expand_default_init (tree binfo, tree true_exp, tree exp, tree init, int flags)\n    from TRUE_EXP.  In constructors, we don't know anything about\n    the value being initialized.\n \n-   FLAGS is just passes to `build_method_call'.  See that function for\n-   its description.  */\n+   FLAGS is just passed to `build_new_method_call'.  See that function\n+   for its description.  */\n \n static void\n expand_aggr_init_1 (tree binfo, tree true_exp, tree exp, tree init, int flags)\n@@ -2031,6 +2031,7 @@ build_new_1 (tree exp)\n   else\n     {\n       tree fnname;\n+      tree fns;\n \n       fnname = ansi_opname (code);\n \n@@ -2049,11 +2050,18 @@ build_new_1 (tree exp)\n \t    }\n \t  /* Create the argument list.  */\n \t  args = tree_cons (NULL_TREE, size, placement);\n-\t  /* Call the function.  */\n-\t  alloc_call = build_method_call (build_dummy_object (true_type),\n-\t\t\t\t\t  fnname, args, \n-\t\t\t\t\t  TYPE_BINFO (true_type),\n-\t\t\t\t\t  LOOKUP_NORMAL);\n+\t  /* Do name-lookup to find the appropriate operator.  */\n+\t  fns = lookup_fnfields (true_type, fnname, /*protect=*/2);\n+\t  if (TREE_CODE (fns) == TREE_LIST)\n+\t    {\n+\t      error (\"request for member `%D' is ambiguous\", fnname);\n+\t      print_candidates (fns);\n+\t      return error_mark_node;\n+\t    }\n+\t  alloc_call = build_new_method_call (build_dummy_object (true_type),\n+\t\t\t\t\t      fns, args,\n+\t\t\t\t\t      /*conversion_path=*/NULL_TREE,\n+\t\t\t\t\t      LOOKUP_NORMAL);\n \t}\n       else\n \t{"}, {"sha": "a9b62d068b1ca91129211fc5266a94ab7cd1d1a7", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f880ef94a9ea767e3ac22badec8dd198d4cfda0/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f880ef94a9ea767e3ac22badec8dd198d4cfda0/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9f880ef94a9ea767e3ac22badec8dd198d4cfda0", "patch": "@@ -3761,12 +3761,18 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p)\n \t\t      = build_min_nt (CALL_EXPR, postfix_expression, args);\n \t\t    break;\n \t\t  }\n-\t\t  \n-\t\tpostfix_expression\n-\t\t  = (build_new_method_call \n-\t\t     (instance, fn, args, NULL_TREE, \n-\t\t      (idk == CP_ID_KIND_QUALIFIED \n-\t\t       ? LOOKUP_NONVIRTUAL : LOOKUP_NORMAL)));\n+\n+\t\tif (BASELINK_P (fn))\n+\t\t  postfix_expression\n+\t\t    = (build_new_method_call \n+\t\t       (instance, fn, args, NULL_TREE, \n+\t\t\t(idk == CP_ID_KIND_QUALIFIED \n+\t\t\t ? LOOKUP_NONVIRTUAL : LOOKUP_NORMAL)));\n+\t\telse\n+\t\t  postfix_expression\n+\t\t    = finish_call_expr (postfix_expression, args,\n+\t\t\t\t\t/*disallow_virtual=*/false,\n+\t\t\t\t\t/*koenig_p=*/false);\n \t      }\n \t    else if (TREE_CODE (postfix_expression) == OFFSET_REF\n \t\t     || TREE_CODE (postfix_expression) == MEMBER_REF"}, {"sha": "967e9d1da8e2c5533846ecf40b7f4abda737b670", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f880ef94a9ea767e3ac22badec8dd198d4cfda0/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f880ef94a9ea767e3ac22badec8dd198d4cfda0/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9f880ef94a9ea767e3ac22badec8dd198d4cfda0", "patch": "@@ -8279,11 +8279,18 @@ tsubst_copy_and_build (tree t,\n \tif (TREE_CODE (function) == OFFSET_REF)\n \t  return build_offset_ref_call_from_tree (function, call_args);\n \tif (TREE_CODE (function) == COMPONENT_REF)\n-\t  return (build_new_method_call \n-\t\t  (TREE_OPERAND (function, 0),\n-\t\t   TREE_OPERAND (function, 1),\n-\t\t   call_args, NULL_TREE, \n-\t\t   qualified_p ? LOOKUP_NONVIRTUAL : LOOKUP_NORMAL));\n+\t  {\n+\t    if (!BASELINK_P (TREE_OPERAND (function, 1)))\n+\t      return finish_call_expr (function, call_args,\n+\t\t\t\t       /*disallow_virtual=*/false,\n+\t\t\t\t       /*koenig_p=*/false);\n+\t    else\n+\t      return (build_new_method_call \n+\t\t      (TREE_OPERAND (function, 0),\n+\t\t       TREE_OPERAND (function, 1),\n+\t\t       call_args, NULL_TREE, \n+\t\t       qualified_p ? LOOKUP_NONVIRTUAL : LOOKUP_NORMAL));\n+\t  }\n \treturn finish_call_expr (function, call_args, \n \t\t\t\t /*disallow_virtual=*/qualified_p,\n \t\t\t\t koenig_p);"}, {"sha": "059ed1591e51ebcaae8c242d9e99f271fb6b791c", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f880ef94a9ea767e3ac22badec8dd198d4cfda0/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f880ef94a9ea767e3ac22badec8dd198d4cfda0/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=9f880ef94a9ea767e3ac22badec8dd198d4cfda0", "patch": "@@ -1774,42 +1774,6 @@ finish_this_expr (void)\n   return result;\n }\n \n-/* Finish a member function call using OBJECT and ARGS as arguments to\n-   FN.  Returns an expression for the call.  */\n-\n-tree \n-finish_object_call_expr (tree fn, tree object, tree args)\n-{\n-  if (DECL_DECLARES_TYPE_P (fn))\n-    {\n-      if (processing_template_decl)\n-\t/* This can happen on code like:\n-\n-\t   class X;\n-\t   template <class T> void f(T t) {\n-\t     t.X();\n-\t   }  \n-\n-\t   We just grab the underlying IDENTIFIER.  */\n-\tfn = DECL_NAME (fn);\n-      else\n-\t{\n-\t  error (\"calling type `%T' like a method\", fn);\n-\t  return error_mark_node;\n-\t}\n-    }\n-  \n-  if (processing_template_decl)\n-    return build_nt (CALL_EXPR,\n-\t\t     build_nt (COMPONENT_REF, object, fn),\n-\t\t     args);\n-\n-  if (name_p (fn))\n-    return build_method_call (object, fn, args, NULL_TREE, LOOKUP_NORMAL);\n-  else\n-    return build_new_method_call (object, fn, args, NULL_TREE, LOOKUP_NORMAL);\n-}\n-\n /* Finish a pseudo-destructor expression.  If SCOPE is NULL, the\n    expression was of the form `OBJECT.~DESTRUCTOR' where DESTRUCTOR is\n    the TYPE for the type given.  If SCOPE is non-NULL, the expression"}, {"sha": "a473f27af29cb74fec7a0188eb290d7ee6d10525", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f880ef94a9ea767e3ac22badec8dd198d4cfda0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f880ef94a9ea767e3ac22badec8dd198d4cfda0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f880ef94a9ea767e3ac22badec8dd198d4cfda0", "patch": "@@ -1,3 +1,8 @@\n+2004-01-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/13592\n+\t* g++.dg/template/call2.C: New test.\n+\n 2004-01-19  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.dg/compat/fnptr-by-value-1_x.c, scalar-by-value-1_y.c"}, {"sha": "86d5c2e82b5abe89b02c6377eed786d8692d79c9", "filename": "gcc/testsuite/g++.dg/template/call2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f880ef94a9ea767e3ac22badec8dd198d4cfda0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcall2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f880ef94a9ea767e3ac22badec8dd198d4cfda0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcall2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcall2.C?ref=9f880ef94a9ea767e3ac22badec8dd198d4cfda0", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/13592\n+\n+struct S { \n+  void operator()(int); \n+}; \n+ \n+struct A { \n+  template <typename> void foo(); \n+  S s; \n+}; \n+ \n+template <typename> void A::foo() { \n+  s(0); \n+} "}]}