{"sha": "66d76fc91e78c98c75ad9ef7f11758fc68988172", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZkNzZmYzkxZTc4Yzk4Yzc1YWQ5ZWY3ZjExNzU4ZmM2ODk4ODE3Mg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2016-10-11T14:12:09Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2016-10-11T14:12:09Z"}, "message": "re PR target/77924 (-mfloat128-type change broke AIX)\n\n2016-10-11  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/77924\n\t* config/rs6000/rs6000.c (rs6000_init_builtins): Only create the\n\tdistinct __ibm128 IBM extended double type if long doubles are\n\t128-bits and the default format for long double is IEEE 128-bit.\n\nFrom-SVN: r240994", "tree": {"sha": "81b2a4cbe2c6c10abe444be504eae93ba9724e33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81b2a4cbe2c6c10abe444be504eae93ba9724e33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66d76fc91e78c98c75ad9ef7f11758fc68988172", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66d76fc91e78c98c75ad9ef7f11758fc68988172", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66d76fc91e78c98c75ad9ef7f11758fc68988172", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66d76fc91e78c98c75ad9ef7f11758fc68988172/comments", "author": null, "committer": null, "parents": [{"sha": "207f844e6e998d5f82589404bc82b11db99b6e83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/207f844e6e998d5f82589404bc82b11db99b6e83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/207f844e6e998d5f82589404bc82b11db99b6e83"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "7143ebf42051665b2af1af2643f9137f8c9f66ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d76fc91e78c98c75ad9ef7f11758fc68988172/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d76fc91e78c98c75ad9ef7f11758fc68988172/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66d76fc91e78c98c75ad9ef7f11758fc68988172", "patch": "@@ -1,3 +1,10 @@\n+2016-10-11  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/77924\n+\t* config/rs6000/rs6000.c (rs6000_init_builtins): Only create the\n+\tdistinct __ibm128 IBM extended double type if long doubles are\n+\t128-bits and the default format for long double is IEEE 128-bit.\n+\n 2016-10-11  Richard Biener  <rguenther@suse.de>\n \n \t* dwarf2out.c (DEBUG_STR_OFFSETS_SECTION): Remove conditional."}, {"sha": "3a164e9b1c87f5c7d872bc0ba0e98506533e4c15", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d76fc91e78c98c75ad9ef7f11758fc68988172/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d76fc91e78c98c75ad9ef7f11758fc68988172/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=66d76fc91e78c98c75ad9ef7f11758fc68988172", "patch": "@@ -16572,10 +16572,10 @@ rs6000_init_builtins (void)\n      floating point, we need make sure the type is non-zero or else self-test\n      fails during bootstrap.\n \n-     We don't register a built-in type for __ibm128 or __float128 if the type\n-     is the same as long double.  Instead we add a #define for __ibm128 or\n-     __float128 in rs6000_cpu_cpp_builtins to long double.  */\n-  if (TARGET_IEEEQUAD || !TARGET_LONG_DOUBLE_128)\n+     We don't register a built-in type for __ibm128 if the type is the same as\n+     long double.  Instead we add a #define for __ibm128 in\n+     rs6000_cpu_cpp_builtins to long double.  */\n+  if (TARGET_LONG_DOUBLE_128 && FLOAT128_IEEE_P (TFmode))\n     {\n       ibm128_float_type_node = make_node (REAL_TYPE);\n       TYPE_PRECISION (ibm128_float_type_node) = 128;"}]}