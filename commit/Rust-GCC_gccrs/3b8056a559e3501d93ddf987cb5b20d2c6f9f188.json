{"sha": "3b8056a559e3501d93ddf987cb5b20d2c6f9f188", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I4MDU2YTU1OWUzNTAxZDkzZGRmOTg3Y2I1YjIwZDJjNmY5ZjE4OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-22T17:04:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-22T17:04:57Z"}, "message": "[multiple changes]\n\n2014-01-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): A subprogram\n\tbody generated for an expression function within a protected body\n\tneeds a set of renaming declarations if the expression function\n\tcomes from source.\n\n2014-01-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* lib-xref.adb (Get_Type_Reference): In semantics-only mode,\n\tlist interface progenitor of a tagged concurrent type, for better\n\tsource navigation.\n\n2014-01-22  Robert Dewar  <dewar@adacore.com>\n\n\t* lib.adb (In_Extended_Main_Code_Unit): Return False for\n\tStandard_Location.\n\t(In_Extended_Main_Source_Unit): Return False for Standard_Location.\n\t* lib.ads (In_Extended_Main_Code_Unit): Add documentation on\n\ttreatment of Slocs No_Location and Standard_Location.\n\t* restrict.adb (Check_Restriction_No_Dependence): Explicitly\n\tcheck for entity with Standard_Location Sloc, rather than relying\n\ton Lib routines to do that.\n\t* sem_res.adb (Resolve_Call): Implement SPARK_05 restriction\n\tthat a call cannot occur before a later occuring body within\n\tthe same unit.\n\nFrom-SVN: r206931", "tree": {"sha": "fb500cca254aaedb7e5fc375e0443cd50f454d3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb500cca254aaedb7e5fc375e0443cd50f454d3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b8056a559e3501d93ddf987cb5b20d2c6f9f188", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8056a559e3501d93ddf987cb5b20d2c6f9f188", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b8056a559e3501d93ddf987cb5b20d2c6f9f188", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8056a559e3501d93ddf987cb5b20d2c6f9f188/comments", "author": null, "committer": null, "parents": [{"sha": "fba9ebfc51f21a9ba4848c721bb925078737b024", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fba9ebfc51f21a9ba4848c721bb925078737b024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fba9ebfc51f21a9ba4848c721bb925078737b024"}], "stats": {"total": 95, "additions": 87, "deletions": 8}, "files": [{"sha": "51f7ed64ba9573d050c921a0dff2a61a8dfdc129", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8056a559e3501d93ddf987cb5b20d2c6f9f188/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8056a559e3501d93ddf987cb5b20d2c6f9f188/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3b8056a559e3501d93ddf987cb5b20d2c6f9f188", "patch": "@@ -1,3 +1,30 @@\n+2014-01-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): A subprogram\n+\tbody generated for an expression function within a protected body\n+\tneeds a set of renaming declarations if the expression function\n+\tcomes from source.\n+\n+2014-01-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* lib-xref.adb (Get_Type_Reference): In semantics-only mode,\n+\tlist interface progenitor of a tagged concurrent type, for better\n+\tsource navigation.\n+\n+2014-01-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* lib.adb (In_Extended_Main_Code_Unit): Return False for\n+\tStandard_Location.\n+\t(In_Extended_Main_Source_Unit): Return False for Standard_Location.\n+\t* lib.ads (In_Extended_Main_Code_Unit): Add documentation on\n+\ttreatment of Slocs No_Location and Standard_Location.\n+\t* restrict.adb (Check_Restriction_No_Dependence): Explicitly\n+\tcheck for entity with Standard_Location Sloc, rather than relying\n+\ton Lib routines to do that.\n+\t* sem_res.adb (Resolve_Call): Implement SPARK_05 restriction\n+\tthat a call cannot occur before a later occuring body within\n+\tthe same unit.\n+\n 2014-01-22  Thomas Quinot  <quinot@adacore.com>\n \n \t* rtsfind.adb: Update comment."}, {"sha": "409e736aee0dc32fb1811dac03e7f4b6c041d248", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8056a559e3501d93ddf987cb5b20d2c6f9f188/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8056a559e3501d93ddf987cb5b20d2c6f9f188/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=3b8056a559e3501d93ddf987cb5b20d2c6f9f188", "patch": "@@ -1309,6 +1309,22 @@ package body Lib.Xref is\n                         Right := '>';\n                      end if;\n \n+                  --  For a synchronized type that implements an interface, we\n+                  --  treat the first progenitor as the parent. This is only\n+                  --  needed when compiling a package declaration on its own,\n+                  --  if the body is present interfaces are handled properly.\n+\n+                  elsif Is_Concurrent_Type (Tref)\n+                    and then Is_Tagged_Type (Tref)\n+                    and then not Expander_Active\n+                  then\n+                     if Left /= '(' then\n+                        Left := '<';\n+                        Right := '>';\n+                     end if;\n+\n+                     Tref := Entity (First (Interface_List (Parent (Tref))));\n+\n                   --  If the completion of a private type is itself a derived\n                   --  type, we need the parent of the full view.\n "}, {"sha": "9ea496f3d265ddcad919c6533fdaf73bd1d2d0b9", "filename": "gcc/ada/lib.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8056a559e3501d93ddf987cb5b20d2c6f9f188/gcc%2Fada%2Flib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8056a559e3501d93ddf987cb5b20d2c6f9f188/gcc%2Fada%2Flib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.adb?ref=3b8056a559e3501d93ddf987cb5b20d2c6f9f188", "patch": "@@ -718,7 +718,7 @@ package body Lib is\n    is\n    begin\n       if Sloc (N) = Standard_Location then\n-         return True;\n+         return False;\n \n       elsif Sloc (N) = No_Location then\n          return False;\n@@ -750,7 +750,7 @@ package body Lib is\n    function In_Extended_Main_Code_Unit (Loc : Source_Ptr) return Boolean is\n    begin\n       if Loc = Standard_Location then\n-         return True;\n+         return False;\n \n       elsif Loc = No_Location then\n          return False;\n@@ -787,7 +787,7 @@ package body Lib is\n       --  Special value cases\n \n       elsif Nloc = Standard_Location then\n-         return True;\n+         return False;\n \n       elsif Nloc = No_Location then\n          return False;\n@@ -826,7 +826,7 @@ package body Lib is\n       --  Special value cases\n \n       elsif Loc = Standard_Location then\n-         return True;\n+         return False;\n \n       elsif Loc = No_Location then\n          return False;"}, {"sha": "5c490cd2014c1088e20a98e676867ae5fb904307", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8056a559e3501d93ddf987cb5b20d2c6f9f188/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8056a559e3501d93ddf987cb5b20d2c6f9f188/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=3b8056a559e3501d93ddf987cb5b20d2c6f9f188", "patch": "@@ -520,6 +520,14 @@ package Lib is\n    --  instantiations are included in the extended main unit for this call.\n    --  If the main unit is itself a subunit, then the extended main code unit\n    --  includes its parent unit, and the parent unit spec if it is separate.\n+   --\n+   --  This routine (and the following three routines) all return False if\n+   --  Sloc (N) is No_Location or Standard_Location. In an earlier version,\n+   --  they returned True for Standard_Location, but this was odd, and some\n+   --  archeology indicated that this was done for the sole benefit of the\n+   --  call in Restrict.Check_Restriction_No_Dependence, so we have moved\n+   --  the special case check to that routine. This avoids some difficulties\n+   --  with some other calls that malfunctioned with the odd return of True.\n \n    function In_Extended_Main_Code_Unit (Loc : Source_Ptr) return Boolean;\n    --  Same function as above, but argument is a source pointer rather"}, {"sha": "01c5f87a973de5c00378f5ea8126aba5d2711687", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8056a559e3501d93ddf987cb5b20d2c6f9f188/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8056a559e3501d93ddf987cb5b20d2c6f9f188/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=3b8056a559e3501d93ddf987cb5b20d2c6f9f188", "patch": "@@ -625,8 +625,12 @@ package body Restrict is\n    begin\n       --  Ignore call if node U is not in the main source unit. This avoids\n       --  cascaded errors, e.g. when Ada.Containers units with other units.\n+      --  However, allow Standard_Location here, since this catches some cases\n+      --  of constructs that get converted to run-time calls.\n \n-      if not In_Extended_Main_Source_Unit (U) then\n+      if not In_Extended_Main_Source_Unit (U)\n+        and then Sloc (U) /= Standard_Location\n+      then\n          return;\n       end if;\n "}, {"sha": "62dd8898760e4f3b6706f4f0e3644c0051ee748e", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8056a559e3501d93ddf987cb5b20d2c6f9f188/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8056a559e3501d93ddf987cb5b20d2c6f9f188/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=3b8056a559e3501d93ddf987cb5b20d2c6f9f188", "patch": "@@ -3218,13 +3218,13 @@ package body Sem_Ch6 is\n       --  family index (if applicable). This form of early expansion is done\n       --  when the Expander is active because Install_Private_Data_Declarations\n       --  references entities which were created during regular expansion. The\n-      --  body may be the rewritting of an expression function, and we need to\n-      --  verify that the original node is in the source.\n+      --  subprogram entity must come from source, and not be an internally\n+      --  generated subprogram.\n \n       if Expander_Active\n-        and then Comes_From_Source (Original_Node (N))\n         and then Present (Prot_Typ)\n         and then Present (Spec_Id)\n+        and then Comes_From_Source (Spec_Id)\n         and then not Is_Eliminated (Spec_Id)\n       then\n          Install_Private_Data_Declarations"}, {"sha": "537a6e166ae4fddde39e8061181885d276ff21a0", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8056a559e3501d93ddf987cb5b20d2c6f9f188/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8056a559e3501d93ddf987cb5b20d2c6f9f188/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=3b8056a559e3501d93ddf987cb5b20d2c6f9f188", "patch": "@@ -5468,6 +5468,30 @@ package body Sem_Res is\n          end if;\n       end if;\n \n+      --  If the SPARK_05 restriction is active, we are not allowed\n+      --  to have a call to a subprogram before we see its completion.\n+\n+      if not Has_Completion (Nam)\n+        and then Restriction_Check_Required (SPARK_05)\n+\n+        --  Don't flag strange internal calls\n+\n+        and then Comes_From_Source (N)\n+        and then Comes_From_Source (Nam)\n+\n+        --  Only flag calls in extended main source\n+\n+        and then In_Extended_Main_Source_Unit (Nam)\n+        and then In_Extended_Main_Source_Unit (N)\n+\n+        --  Exclude enumeration literals from this processing\n+\n+        and then Ekind (Nam) /= E_Enumeration_Literal\n+      then\n+         Check_SPARK_Restriction\n+           (\"call to subprogram cannot appear before its body\", N);\n+      end if;\n+\n       --  Check that this is not a call to a protected procedure or entry from\n       --  within a protected function.\n "}]}