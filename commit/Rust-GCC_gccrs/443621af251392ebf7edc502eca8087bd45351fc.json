{"sha": "443621af251392ebf7edc502eca8087bd45351fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQzNjIxYWYyNTEzOTJlYmY3ZWRjNTAyZWNhODA4N2JkNDUzNTFmYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-08-19T04:55:15Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-19T04:55:15Z"}, "message": "unwind-ia64.c (UNW_REG_B0): New.\n\n        * config/ia64/unwind-ia64.c (UNW_REG_B0): New.\n        (struct _Unwind_Context): Expand br_loc to hold it.\n        (uw_frame_state_for): Handle leaf functions better.\n        (uw_update_reg_address): Update for br_loc change.\n\nFrom-SVN: r45024", "tree": {"sha": "c4238b13299a8f75b4210cbf0f85bcac40404a43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4238b13299a8f75b4210cbf0f85bcac40404a43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/443621af251392ebf7edc502eca8087bd45351fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/443621af251392ebf7edc502eca8087bd45351fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/443621af251392ebf7edc502eca8087bd45351fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/443621af251392ebf7edc502eca8087bd45351fc/comments", "author": null, "committer": null, "parents": [{"sha": "3dff7ed031b733e5472f5d2bc39a3c846c395cbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dff7ed031b733e5472f5d2bc39a3c846c395cbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dff7ed031b733e5472f5d2bc39a3c846c395cbc"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "10bb6de7573158c96daf6d33d1c78d191c54f05f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/443621af251392ebf7edc502eca8087bd45351fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/443621af251392ebf7edc502eca8087bd45351fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=443621af251392ebf7edc502eca8087bd45351fc", "patch": "@@ -1,3 +1,10 @@\n+2001-08-18  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/ia64/unwind-ia64.c (UNW_REG_B0): New.\n+\t(struct _Unwind_Context): Expand br_loc to hold it.\n+\t(uw_frame_state_for): Handle leaf functions better.\n+\t(uw_update_reg_address): Update for br_loc change.\n+\n 2001-08-18  Richard Henderson  <rth@redhat.com>\n \n \t* crtstuff.c: Move list heads before code that uses them."}, {"sha": "052f83948392249344c4a5f6b316b747dc620743", "filename": "gcc/config/ia64/unwind-ia64.c", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/443621af251392ebf7edc502eca8087bd45351fc/gcc%2Fconfig%2Fia64%2Funwind-ia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/443621af251392ebf7edc502eca8087bd45351fc/gcc%2Fconfig%2Fia64%2Funwind-ia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Funwind-ia64.c?ref=443621af251392ebf7edc502eca8087bd45351fc", "patch": "@@ -93,7 +93,7 @@ enum unw_register_index\n   UNW_REG_F31 = UNW_REG_F2 + 29,\n \n   /* Branch registers.  */\n-  UNW_REG_B1,\n+  UNW_REG_B0, UNW_REG_B1,\n   UNW_REG_B5 = UNW_REG_B1 + 4,\n \n   UNW_NUM_REGS\n@@ -205,7 +205,7 @@ struct _Unwind_Context\n     } nat;\n   } ireg[32 - 2];\n \n-  unsigned long *br_loc[6 - 1];\n+  unsigned long *br_loc[7];\n   void *fr_loc[32 - 2];\n };\n \n@@ -1471,6 +1471,21 @@ uw_frame_state_for (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n \t not profide a personality routine or LSDA.  */\n #ifdef MD_FALLBACK_FRAME_STATE_FOR\n       MD_FALLBACK_FRAME_STATE_FOR (context, fs, success);\n+\n+      /* [SCRA 11.4.1] A leaf function with no memory stack, no exception\n+\t handlers, and which keeps the return value in B0 does not need\n+\t an unwind table entry.\n+\n+\t This can only happen in the frame after unwinding through a signal\n+\t handler.  Avoid infinite looping by requiring that B0 != RP.  */\n+      if (context->br_loc[0] && *context->br_loc[0] != context->rp)\n+\t{\n+\t  fs->curr.reg[UNW_REG_RP].where = UNW_WHERE_BR;\n+\t  fs->curr.reg[UNW_REG_RP].when = -1;\n+\t  fs->curr.reg[UNW_REG_RP].val = 0;\n+\t  goto success;\n+\t}\n+\n       return _URC_END_OF_STACK;\n     success:\n       return _URC_NO_REASON;\n@@ -1557,8 +1572,11 @@ uw_update_reg_address (struct _Unwind_Context *context,\n       break;\n \n     case UNW_WHERE_BR:\n-      if (rval >= 1 && rval <= 5)\n-\taddr = context->br_loc[rval - 1];\n+      /* Note that while RVAL can only be 1-5 from normal descriptors,\n+\t we can want to look at B0 due to having manually unwound a\n+\t signal frame.  */\n+      if (rval >= 0 && rval <= 5)\n+\taddr = context->br_loc[rval];\n       else\n \tabort ();\n       break;\n@@ -1624,7 +1642,7 @@ uw_update_reg_address (struct _Unwind_Context *context,\n       break;\n \n     case UNW_REG_B1 ... UNW_REG_B5:\n-      context->br_loc[regno - UNW_REG_B1] = addr;\n+      context->br_loc[regno - UNW_REG_B0] = addr;\n       break;\n \n     case UNW_REG_BSP:"}]}