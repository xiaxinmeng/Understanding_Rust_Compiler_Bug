{"sha": "54cdb2f5a5b01a482d7cbce30e7b738558eecf59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRjZGIyZjVhNWIwMWE0ODJkN2NiY2UzMGU3YjczODU1OGVlY2Y1OQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-06-03T09:25:47Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-06-15T01:43:15Z"}, "message": "Optimize multiplication for V8QI,V16QI,V32QI under TARGET_AVX512BW.\n\n2020-06-13   Hongtao Liu  <hongtao.liu@intel.com>\n\ngcc/ChangeLog:\n\tPR target/95488\n\t* config/i386/i386-expand.c (ix86_expand_vecmul_qihi): New\n\tfunction.\n\t* config/i386/i386-protos.h (ix86_expand_vecmul_qihi): Declare.\n\t* config/i386/sse.md (mul<mode>3): Drop mask_name since\n\tthere's no real simd int8 multiplication instruction with\n\tmask. Also optimize it under TARGET_AVX512BW.\n\t(mulv8qi3): New expander.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.target/i386/avx512bw-pr95488-1.c: New test.\n\t* gcc.target/i386/avx512bw-pr95488-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-pr95488-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-pr95488-2.c: Ditto.", "tree": {"sha": "ccae80dbe6df3f68a0d5eba65c76b43cb8a2ad88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccae80dbe6df3f68a0d5eba65c76b43cb8a2ad88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54cdb2f5a5b01a482d7cbce30e7b738558eecf59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54cdb2f5a5b01a482d7cbce30e7b738558eecf59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54cdb2f5a5b01a482d7cbce30e7b738558eecf59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54cdb2f5a5b01a482d7cbce30e7b738558eecf59/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0dcb572c08a7b4596f5481cb4491d755a63578ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dcb572c08a7b4596f5481cb4491d755a63578ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dcb572c08a7b4596f5481cb4491d755a63578ab"}], "stats": {"total": 236, "additions": 234, "deletions": 2}, "files": [{"sha": "3a414f69b3b5c845c0470c83579db5291fdd0f25", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54cdb2f5a5b01a482d7cbce30e7b738558eecf59/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54cdb2f5a5b01a482d7cbce30e7b738558eecf59/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=54cdb2f5a5b01a482d7cbce30e7b738558eecf59", "patch": "@@ -19466,6 +19466,71 @@ ix86_expand_vec_interleave (rtx targ, rtx op0, rtx op1, bool high_p)\n   gcc_assert (ok);\n }\n \n+/* Optimize vector MUL generation for V8QI, V16QI and V32QI\n+   under TARGET_AVX512BW. i.e. for v16qi a * b, it has\n+\n+   vpmovzxbw ymm2, xmm0\n+   vpmovzxbw ymm3, xmm1\n+   vpmullw   ymm4, ymm2, ymm3\n+   vpmovwb   xmm0, ymm4\n+\n+   it would take less instructions than ix86_expand_vecop_qihi.\n+   Return true if success.  */\n+\n+bool\n+ix86_expand_vecmul_qihi (rtx dest, rtx op1, rtx op2)\n+{\n+  machine_mode himode, qimode = GET_MODE (dest);\n+  rtx hop1, hop2, hdest;\n+  rtx (*gen_extend)(rtx, rtx);\n+  rtx (*gen_truncate)(rtx, rtx);\n+\n+  /* There's no V64HImode multiplication instruction.  */\n+  if (qimode == E_V64QImode)\n+    return false;\n+\n+  /* vpmovwb only available under AVX512BW.  */\n+  if (!TARGET_AVX512BW)\n+    return false;\n+  if ((qimode == V8QImode || qimode == V16QImode)\n+      && !TARGET_AVX512VL)\n+    return false;\n+  /* Not generate zmm instruction when prefer 128/256 bit vector width.  */\n+  if (qimode == V32QImode\n+      && (TARGET_PREFER_AVX128 || TARGET_PREFER_AVX256))\n+    return false;\n+\n+  switch (qimode)\n+    {\n+    case E_V8QImode:\n+      himode = V8HImode;\n+      gen_extend = gen_zero_extendv8qiv8hi2;\n+      gen_truncate = gen_truncv8hiv8qi2;\n+      break;\n+    case E_V16QImode:\n+      himode = V16HImode;\n+      gen_extend = gen_zero_extendv16qiv16hi2;\n+      gen_truncate = gen_truncv16hiv16qi2;\n+      break;\n+    case E_V32QImode:\n+      himode = V32HImode;\n+      gen_extend = gen_zero_extendv32qiv32hi2;\n+      gen_truncate = gen_truncv32hiv32qi2;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  hop1 = gen_reg_rtx (himode);\n+  hop2 = gen_reg_rtx (himode);\n+  hdest = gen_reg_rtx (himode);\n+  emit_insn (gen_extend (hop1, op1));\n+  emit_insn (gen_extend (hop2, op2));\n+  emit_insn (gen_rtx_SET (hdest, simplify_gen_binary (MULT, himode,\n+\t\t\t\t\t\t      hop1, hop2)));\n+  emit_insn (gen_truncate (dest, hdest));\n+  return true;\n+}\n \n /* Expand a vector operation CODE for a V*QImode in terms of the\n    same operation on V*HImode.  */"}, {"sha": "f5320494fa1e3414a4dc4f347fc50e6f19118d5d", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54cdb2f5a5b01a482d7cbce30e7b738558eecf59/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54cdb2f5a5b01a482d7cbce30e7b738558eecf59/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=54cdb2f5a5b01a482d7cbce30e7b738558eecf59", "patch": "@@ -204,6 +204,7 @@ extern void ix86_expand_round (rtx, rtx);\n extern void ix86_expand_rounddf_32 (rtx, rtx);\n extern void ix86_expand_round_sse4 (rtx, rtx);\n \n+extern bool ix86_expand_vecmul_qihi (rtx, rtx, rtx);\n extern void ix86_expand_vecop_qihi (enum rtx_code, rtx, rtx, rtx);\n \n extern rtx ix86_split_stack_guard (void);"}, {"sha": "aa9fdc87c682e6cabc800413843a2ce8f79cbde2", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54cdb2f5a5b01a482d7cbce30e7b738558eecf59/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54cdb2f5a5b01a482d7cbce30e7b738558eecf59/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=54cdb2f5a5b01a482d7cbce30e7b738558eecf59", "patch": "@@ -11658,12 +11658,24 @@\n    (set_attr \"prefix\" \"orig,maybe_evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_expand \"mul<mode>3<mask_name>\"\n+(define_expand \"mulv8qi3\"\n+  [(set (match_operand:V8QI 0 \"register_operand\")\n+\t(mult:V8QI (match_operand:V8QI 1 \"register_operand\")\n+\t\t   (match_operand:V8QI 2 \"register_operand\")))]\n+  \"TARGET_AVX512VL && TARGET_AVX512BW\"\n+{\n+  gcc_assert (ix86_expand_vecmul_qihi (operands[0], operands[1], operands[2]));\n+  DONE;\n+})\n+\n+(define_expand \"mul<mode>3\"\n   [(set (match_operand:VI1_AVX512 0 \"register_operand\")\n \t(mult:VI1_AVX512 (match_operand:VI1_AVX512 1 \"register_operand\")\n \t\t       (match_operand:VI1_AVX512 2 \"register_operand\")))]\n-  \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n+  \"TARGET_SSE2\"\n {\n+  if (ix86_expand_vecmul_qihi (operands[0], operands[1], operands[2]))\n+    DONE;\n   ix86_expand_vecop_qihi (MULT, operands[0], operands[1], operands[2]);\n   DONE;\n })"}, {"sha": "594e511868d72b6b8be55e6e4278e421e1d7a524", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr95488-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54cdb2f5a5b01a482d7cbce30e7b738558eecf59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr95488-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54cdb2f5a5b01a482d7cbce30e7b738558eecf59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr95488-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr95488-1.c?ref=54cdb2f5a5b01a482d7cbce30e7b738558eecf59", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/95488  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw\" }  */\n+/* { dg-final { scan-assembler-times \"vpmovzxbw\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vpmullw\\[^\\n\\]*zmm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpmovwb\" 2 } } */\n+\n+typedef char v32qi __attribute__ ((vector_size (32)));\n+typedef unsigned char v32uqi __attribute__ ((vector_size (32)));\n+\n+__attribute__((noipa)) v32qi\n+mul_512 (v32qi a, v32qi b)\n+{\n+  return  a * b;\n+}\n+\n+__attribute__((noipa)) v32uqi\n+umul_512 (v32uqi a, v32uqi b)\n+{\n+  return  a * b;\n+}"}, {"sha": "de319664618de8a7e47c3448ad2573ba61d83c0c", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr95488-2.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54cdb2f5a5b01a482d7cbce30e7b738558eecf59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr95488-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54cdb2f5a5b01a482d7cbce30e7b738558eecf59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr95488-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr95488-2.c?ref=54cdb2f5a5b01a482d7cbce30e7b738558eecf59", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512bw } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+\n+#ifndef CHECK\n+#define CHECK \"avx512f-helper.h\"\n+#endif\n+\n+#include CHECK\n+\n+#ifndef TEST\n+#define TEST avx512bw_test\n+#endif\n+\n+#include \"avx512bw-pr95488-1.c\"\n+\n+#define TEST_MULB(typeV, typeS, N, fn)\t\t\\\n+do\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    typeV v1, v2, res;\t\t\t\t\\\n+    typeS s1[N], s2[N], exp[N];\t\t\\\n+    int i,j;\t\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+    for (i = 0; i < N; i++)\t\t\t\\\n+      {\t\t\t\t\t\\\n+\ts1[i] = i * i;\t\t\t\t\\\n+\ts2[i] = i + 20;\t\t\t\\\n+      }\t\t\t\t\t\\\n+    for (i = 0; i < N; i++)\t\t\t\\\n+      exp[i] = s1[i] * s2[i];\t\t\t\\\n+    v1 = *(typeV *)&s1[0];\t\t\t\\\n+    v2 = *(typeV *)&s2[0];\t\t\t\\\n+    res = fn (v1, v2);\t\t\t\t\\\n+    for (j = 0; j < N; j++)\t\t\t\\\n+      {\t\t\t\t\t\\\n+\tif (res[j] != exp[j])\t\t\t\\\n+\t  abort();\t\t\t\t\\\n+      }\t\t\t\t\t\\\n+}\t\t\t\t\t\t\\\n+while (0)\n+\n+static void\n+TEST (void)\n+{\n+  TEST_MULB (v32qi, char, 32, mul_512);\n+  TEST_MULB (v32uqi, unsigned char, 32, umul_512);\n+}"}, {"sha": "b3674fbd04fb45d34ebbd0841f697407713d9abf", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr95488-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54cdb2f5a5b01a482d7cbce30e7b738558eecf59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr95488-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54cdb2f5a5b01a482d7cbce30e7b738558eecf59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr95488-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr95488-1.c?ref=54cdb2f5a5b01a482d7cbce30e7b738558eecf59", "patch": "@@ -0,0 +1,36 @@\n+/* PR target/pr95488  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" }  */\n+/* { dg-final { scan-assembler-times \"vpmovzxbw\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vpmullw\\[^\\n\\]*ymm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpmullw\\[^\\n\\]*xmm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpmovwb\" 4 } } */\n+\n+typedef char v16qi __attribute__ ((vector_size (16)));\n+typedef char v8qi __attribute__ ((vector_size (8)));\n+typedef unsigned char v16uqi __attribute__ ((vector_size (16)));\n+typedef unsigned char v8uqi __attribute__ ((vector_size (8)));\n+\n+__attribute__((noipa)) v8qi\n+mul_128 (v8qi a, v8qi b)\n+{\n+  return  a * b;\n+}\n+\n+__attribute__((noipa)) v16qi\n+mul_256 (v16qi a, v16qi b)\n+{\n+  return  a * b;\n+}\n+\n+__attribute__((noipa)) v8uqi\n+umul_128 (v8uqi a, v8uqi b)\n+{\n+  return  a * b;\n+}\n+\n+__attribute__((noipa)) v16uqi\n+umul_256 (v16uqi a, v16uqi b)\n+{\n+  return  a * b;\n+}"}, {"sha": "45d7437bab63d256048934b9d25b11bb67308fea", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr95488-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54cdb2f5a5b01a482d7cbce30e7b738558eecf59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr95488-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54cdb2f5a5b01a482d7cbce30e7b738558eecf59/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr95488-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr95488-2.c?ref=54cdb2f5a5b01a482d7cbce30e7b738558eecf59", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512bw } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+\n+#ifndef CHECK\n+#define CHECK \"avx512f-helper.h\"\n+#endif\n+\n+#include CHECK\n+\n+#ifndef TEST\n+#define TEST avx512bw_test\n+#endif\n+\n+#include \"avx512vl-pr95488-1.c\"\n+\n+#define TEST_MULB(typeV, typeS, N, fn)\t\t\\\n+do\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    typeV v1, v2, res;\t\t\t\t\\\n+    int i,j;\t\t\t\t\t\\\n+    typeS s1[N], s2[N], exp[N];\t\t\\\n+\t\t\t\t\t\t\\\n+    for (i = 0; i < N; i++)\t\t\t\\\n+      {\t\t\t\t\t\\\n+\ts1[i] = i * i;\t\t\t\t\\\n+\ts2[i] = i + 20;\t\t\t\\\n+      }\t\t\t\t\t\\\n+    for (i = 0; i < N; i++)\t\t\t\\\n+      exp[i] = s1[i] * s2[i];\t\t\t\\\n+    v1 = *(typeV *)s1;\t\t\t\t\\\n+    v2 = *(typeV *)s2;\t\t\t\t\\\n+    res = fn (v1, v2);\t\t\t\t\\\n+    for (j = 0; j < N; j++)\t\t\t\\\n+      {\t\t\t\t\t\\\n+\tif (res[j] != exp[j])\t\t\t\\\n+\t  abort();\t\t\t\t\\\n+      }\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\\\n+while (0)\n+\n+static void\n+TEST (void)\n+{\n+  TEST_MULB(v8qi, char, 8, mul_128);\n+  TEST_MULB(v8uqi, unsigned char, 8, umul_128);\n+  TEST_MULB(v16qi, char, 16, mul_256);\n+  TEST_MULB(v16uqi, unsigned char, 16, umul_256);\n+}"}]}