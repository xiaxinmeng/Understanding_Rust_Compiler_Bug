{"sha": "2724e58f9632352aecea376a0fdbbae54c4a2895", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcyNGU1OGY5NjMyMzUyYWVjZWEzNzZhMGZkYmJhZTU0YzRhMjg5NQ==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2009-06-23T12:27:37Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2009-06-23T12:27:37Z"}, "message": "utils.c (handle_vector_size_attribute): Import from c-common.c and populate in gnat_internal_attribute_table.\n\n        * gcc-interface/utils.c (handle_vector_size_attribute): Import from\n        c-common.c and populate in gnat_internal_attribute_table.\n\nFrom-SVN: r148849", "tree": {"sha": "3d4fbf581e60afab42da16f0d285e11ceefb3c52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d4fbf581e60afab42da16f0d285e11ceefb3c52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2724e58f9632352aecea376a0fdbbae54c4a2895", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2724e58f9632352aecea376a0fdbbae54c4a2895", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2724e58f9632352aecea376a0fdbbae54c4a2895", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2724e58f9632352aecea376a0fdbbae54c4a2895/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fef015a857bef16bfc6304fab250ad0195c4fb1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fef015a857bef16bfc6304fab250ad0195c4fb1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fef015a857bef16bfc6304fab250ad0195c4fb1a"}], "stats": {"total": 94, "additions": 93, "deletions": 1}, "files": [{"sha": "60bcdaeb10bd507258bca268ade6890074e71d4f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2724e58f9632352aecea376a0fdbbae54c4a2895/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2724e58f9632352aecea376a0fdbbae54c4a2895/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2724e58f9632352aecea376a0fdbbae54c4a2895", "patch": "@@ -1,3 +1,8 @@\n+2009-06-23  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gcc-interface/utils.c (handle_vector_size_attribute): Import from\n+\tc-common.c and populate in gnat_internal_attribute_table.\n+\t\n 2009-06-23  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_res.adb (Valid_Conversion, Full_Designated_Type): Use"}, {"sha": "ea3f7368480f132c319c303a5ca020560ae5b16f", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 88, "deletions": 1, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2724e58f9632352aecea376a0fdbbae54c4a2895/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2724e58f9632352aecea376a0fdbbae54c4a2895/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=2724e58f9632352aecea376a0fdbbae54c4a2895", "patch": "@@ -100,6 +100,7 @@ static tree handle_sentinel_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noreturn_attribute (tree *, tree, tree, int, bool *);\n static tree handle_malloc_attribute (tree *, tree, tree, int, bool *);\n static tree handle_type_generic_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_vector_size_attribute (tree *, tree, tree, int, bool *);\n \n /* Fake handler for attributes we don't properly support, typically because\n    they'd require dragging a lot of the common-c front-end circuitry.  */\n@@ -118,7 +119,9 @@ const struct attribute_spec gnat_internal_attribute_table[] =\n   { \"sentinel\",     0, 1,  false, true,  true,  handle_sentinel_attribute },\n   { \"noreturn\",     0, 0,  true,  false, false, handle_noreturn_attribute },\n   { \"malloc\",       0, 0,  true,  false, false, handle_malloc_attribute },\n-  { \"type generic\", 0, 0, false, true, true, handle_type_generic_attribute },\n+  { \"type generic\", 0, 0,  false, true, true, handle_type_generic_attribute },\n+\n+  { \"vector_size\",  1, 1,  false, true, false,  handle_vector_size_attribute },\n \n   /* ??? format and format_arg are heavy and not supported, which actually\n      prevents support for stdio builtins, which we however declare as part\n@@ -5275,6 +5278,90 @@ handle_type_generic_attribute (tree *node, tree ARG_UNUSED (name),\n   return NULL_TREE;\n }\n \n+/* Handle a \"vector_size\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_vector_size_attribute (tree *node, tree name, tree args,\n+\t\t\t      int ARG_UNUSED (flags),\n+\t\t\t      bool *no_add_attrs)\n+{\n+  unsigned HOST_WIDE_INT vecsize, nunits;\n+  enum machine_mode orig_mode;\n+  tree type = *node, new_type, size;\n+\n+  *no_add_attrs = true;\n+\n+  size = TREE_VALUE (args);\n+\n+  if (!host_integerp (size, 1))\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      return NULL_TREE;\n+    }\n+\n+  /* Get the vector size (in bytes).  */\n+  vecsize = tree_low_cst (size, 1);\n+\n+  /* We need to provide for vector pointers, vector arrays, and\n+     functions returning vectors.  For example:\n+\n+       __attribute__((vector_size(16))) short *foo;\n+\n+     In this case, the mode is SI, but the type being modified is\n+     HI, so we need to look further.  */\n+\n+  while (POINTER_TYPE_P (type)\n+\t || TREE_CODE (type) == FUNCTION_TYPE\n+\t || TREE_CODE (type) == METHOD_TYPE\n+\t || TREE_CODE (type) == ARRAY_TYPE\n+\t || TREE_CODE (type) == OFFSET_TYPE)\n+    type = TREE_TYPE (type);\n+\n+  /* Get the mode of the type being modified.  */\n+  orig_mode = TYPE_MODE (type);\n+\n+  if ((!INTEGRAL_TYPE_P (type)\n+       && !SCALAR_FLOAT_TYPE_P (type)\n+       && !FIXED_POINT_TYPE_P (type))\n+      || (!SCALAR_FLOAT_MODE_P (orig_mode)\n+\t  && GET_MODE_CLASS (orig_mode) != MODE_INT\n+\t  && !ALL_SCALAR_FIXED_POINT_MODE_P (orig_mode))\n+      || !host_integerp (TYPE_SIZE_UNIT (type), 1)\n+      || TREE_CODE (type) == BOOLEAN_TYPE)\n+    {\n+      error (\"invalid vector type for attribute %qE\", name);\n+      return NULL_TREE;\n+    }\n+\n+  if (vecsize % tree_low_cst (TYPE_SIZE_UNIT (type), 1))\n+    {\n+      error (\"vector size not an integral multiple of component size\");\n+      return NULL;\n+    }\n+\n+  if (vecsize == 0)\n+    {\n+      error (\"zero vector size\");\n+      return NULL;\n+    }\n+\n+  /* Calculate how many units fit in the vector.  */\n+  nunits = vecsize / tree_low_cst (TYPE_SIZE_UNIT (type), 1);\n+  if (nunits & (nunits - 1))\n+    {\n+      error (\"number of components of the vector not a power of two\");\n+      return NULL_TREE;\n+    }\n+\n+  new_type = build_vector_type (type, nunits);\n+\n+  /* Build back pointers if needed.  */\n+  *node = lang_hooks.types.reconstruct_complex_type (*node, new_type);\n+\n+  return NULL_TREE;\n+}\n+\n /* ----------------------------------------------------------------------- *\n  *                              BUILTIN FUNCTIONS                          *\n  * ----------------------------------------------------------------------- */"}]}