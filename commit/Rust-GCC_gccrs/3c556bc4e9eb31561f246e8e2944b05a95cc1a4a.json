{"sha": "3c556bc4e9eb31561f246e8e2944b05a95cc1a4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M1NTZiYzRlOWViMzE1NjFmMjQ2ZThlMjk0NGIwNWE5NWNjMWE0YQ==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2016-08-16T13:09:40Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2016-08-16T13:09:40Z"}, "message": "re PR tree-optimization/69848 (poor vectorization of a loop from SPEC2006 464.h264ref)\n\n\tPR tree-optimization/69848\n\t* config/aarch64/aarch64-simd.md (vcond<mode><mode>): Invert NE\n\tand swtich operands to avoid additional NOT instruction.\n\t(vcond<v_cmp_mixed><mode>): Ditto.\n\t(vcondu<mode><mode>, vcondu<mode><v_cmp_mixed>): Ditto.\n\n\tgcc/testsuite\n\t* gcc.target/aarch64/simd/vcond-ne-bit.c: New test.\n\nFrom-SVN: r239502", "tree": {"sha": "3f3f8f1a9f4e26388ee99a4cec27390b5ef38284", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f3f8f1a9f4e26388ee99a4cec27390b5ef38284"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c556bc4e9eb31561f246e8e2944b05a95cc1a4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c556bc4e9eb31561f246e8e2944b05a95cc1a4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c556bc4e9eb31561f246e8e2944b05a95cc1a4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c556bc4e9eb31561f246e8e2944b05a95cc1a4a/comments", "author": null, "committer": null, "parents": [{"sha": "edd1a1cb736d0b32396633f2ff45de46a33efb74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edd1a1cb736d0b32396633f2ff45de46a33efb74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edd1a1cb736d0b32396633f2ff45de46a33efb74"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "e2d39a8792d156d0f4926058d898f583e658ea4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c556bc4e9eb31561f246e8e2944b05a95cc1a4a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c556bc4e9eb31561f246e8e2944b05a95cc1a4a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c556bc4e9eb31561f246e8e2944b05a95cc1a4a", "patch": "@@ -1,3 +1,11 @@\n+2016-08-16  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/69848\n+\t* config/aarch64/aarch64-simd.md (vcond<mode><mode>): Invert NE\n+\tand swtich operands to avoid additional NOT instruction.\n+\t(vcond<v_cmp_mixed><mode>): Ditto.\n+\t(vcondu<mode><mode>, vcondu<mode><v_cmp_mixed>): Ditto.\n+\n 2016-08-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* doc/install.texi (*-*-solaris2*): Adjust latest change."}, {"sha": "70140744bb5a7b6dded304c16291cfdce4375c10", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c556bc4e9eb31561f246e8e2944b05a95cc1a4a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c556bc4e9eb31561f246e8e2944b05a95cc1a4a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=3c556bc4e9eb31561f246e8e2944b05a95cc1a4a", "patch": "@@ -2573,7 +2573,17 @@\n   \"TARGET_SIMD\"\n {\n   rtx mask = gen_reg_rtx (<V_cmp_result>mode);\n+  enum rtx_code code = GET_CODE (operands[3]);\n \n+  /* NE is handled as !EQ in vec_cmp patterns, we can explicitly invert\n+     it as well as switch operands 1/2 in order to avoid the additional\n+     NOT instruction.  */\n+  if (code == NE)\n+    {\n+      operands[3] = gen_rtx_fmt_ee (EQ, GET_MODE (operands[3]),\n+\t\t\t\t    operands[4], operands[5]);\n+      std::swap (operands[1], operands[2]);\n+    }\n   emit_insn (gen_vec_cmp<mode><v_cmp_result> (mask, operands[3],\n \t\t\t\t\t      operands[4], operands[5]));\n   emit_insn (gen_vcond_mask_<mode><v_cmp_result> (operands[0], operands[1],\n@@ -2593,7 +2603,17 @@\n   \"TARGET_SIMD\"\n {\n   rtx mask = gen_reg_rtx (<V_cmp_result>mode);\n+  enum rtx_code code = GET_CODE (operands[3]);\n \n+  /* NE is handled as !EQ in vec_cmp patterns, we can explicitly invert\n+     it as well as switch operands 1/2 in order to avoid the additional\n+     NOT instruction.  */\n+  if (code == NE)\n+    {\n+      operands[3] = gen_rtx_fmt_ee (EQ, GET_MODE (operands[3]),\n+\t\t\t\t    operands[4], operands[5]);\n+      std::swap (operands[1], operands[2]);\n+    }\n   emit_insn (gen_vec_cmp<mode><v_cmp_result> (mask, operands[3],\n \t\t\t\t\t      operands[4], operands[5]));\n   emit_insn (gen_vcond_mask_<v_cmp_mixed><v_cmp_result> (\n@@ -2614,7 +2634,17 @@\n   \"TARGET_SIMD\"\n {\n   rtx mask = gen_reg_rtx (<MODE>mode);\n+  enum rtx_code code = GET_CODE (operands[3]);\n \n+  /* NE is handled as !EQ in vec_cmp patterns, we can explicitly invert\n+     it as well as switch operands 1/2 in order to avoid the additional\n+     NOT instruction.  */\n+  if (code == NE)\n+    {\n+      operands[3] = gen_rtx_fmt_ee (EQ, GET_MODE (operands[3]),\n+\t\t\t\t    operands[4], operands[5]);\n+      std::swap (operands[1], operands[2]);\n+    }\n   emit_insn (gen_vec_cmp<mode><mode> (mask, operands[3],\n \t\t\t\t      operands[4], operands[5]));\n   emit_insn (gen_vcond_mask_<mode><v_cmp_result> (operands[0], operands[1],\n@@ -2633,7 +2663,17 @@\n   \"TARGET_SIMD\"\n {\n   rtx mask = gen_reg_rtx (<V_cmp_result>mode);\n+  enum rtx_code code = GET_CODE (operands[3]);\n \n+  /* NE is handled as !EQ in vec_cmp patterns, we can explicitly invert\n+     it as well as switch operands 1/2 in order to avoid the additional\n+     NOT instruction.  */\n+  if (code == NE)\n+    {\n+      operands[3] = gen_rtx_fmt_ee (EQ, GET_MODE (operands[3]),\n+\t\t\t\t    operands[4], operands[5]);\n+      std::swap (operands[1], operands[2]);\n+    }\n   emit_insn (gen_vec_cmp<v_cmp_mixed><v_cmp_mixed> (\n \t\t\t\t\t\t  mask, operands[3],\n \t\t\t\t\t\t  operands[4], operands[5]));"}, {"sha": "764ff69f8bf07067aa6f2dfd670b5d9a535c01a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c556bc4e9eb31561f246e8e2944b05a95cc1a4a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c556bc4e9eb31561f246e8e2944b05a95cc1a4a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c556bc4e9eb31561f246e8e2944b05a95cc1a4a", "patch": "@@ -1,3 +1,8 @@\n+2016-08-16  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/69848\n+\t* gcc.target/aarch64/simd/vcond-ne-bit.c: New test.\n+\n 2016-08-16  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.dg/tree-prof/val-prof-7.c (int main): Change size"}, {"sha": "25170c2c1510578323818834bde12abe049d5a6a", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vcond-ne-bit.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c556bc4e9eb31561f246e8e2944b05a95cc1a4a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcond-ne-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c556bc4e9eb31561f246e8e2944b05a95cc1a4a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcond-ne-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvcond-ne-bit.c?ref=3c556bc4e9eb31561f246e8e2944b05a95cc1a4a", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps\" } */\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target vect_condition } */\n+#include <stdlib.h>\n+\n+int fn1 (int) __attribute__ ((noinline));\n+\n+int a[128];\n+int fn1(int d) {\n+  int b, c = 1;\n+  for (b = 0; b < 128; b++)\n+    if (a[b])\n+      c = 0;\n+  return c;\n+}\n+\n+int\n+main (void)\n+{\n+  int i;\n+  for (i = 0; i < 128; i++)\n+    a[i] = 0;\n+  if (fn1(10) != 1)\n+    abort ();\n+  a[3] = 2;\n+  a[24] = 1;\n+  if (fn1(10) != 0)\n+    abort ();\n+  return 0;\n+}\n+/* { dg-final { scan-assembler-not \"\\[ \\t\\]not\\[ \\t\\]\" } } */"}]}