{"sha": "914b938884f9903681305184534a2e9869760f84", "node_id": "C_kwDOANBUbNoAKDkxNGI5Mzg4ODRmOTkwMzY4MTMwNTE4NDUzNGEyZTk4Njk3NjBmODQ", "commit": {"author": {"name": "Nikos Alexandris", "email": "nikos-alexandris@protonmail.com", "date": "2023-03-03T21:55:59Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-06T13:29:34Z"}, "message": "Add length checking for tuple patterns\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-hir-type-check-pattern.cc (TypeCheckPattern::visit):\n\t\tAdd length checking for tuple patterns.\n\t(TypeCheckPattern::emit_pattern_size_error): New function.\n\t* typecheck/rust-hir-type-check-pattern.h: New function\n\t\temit_pattern_size_error.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/tuple_mismatch.rs: New test.\n\nSigned-off-by: Nikos Alexandris <nikos-alexandris@protonmail.com>", "tree": {"sha": "be7f9744330462b38d9ee00c73118ed696951670", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be7f9744330462b38d9ee00c73118ed696951670"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/914b938884f9903681305184534a2e9869760f84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/914b938884f9903681305184534a2e9869760f84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/914b938884f9903681305184534a2e9869760f84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/914b938884f9903681305184534a2e9869760f84/comments", "author": {"login": "nikos-alexandris", "id": 69969563, "node_id": "MDQ6VXNlcjY5OTY5NTYz", "avatar_url": "https://avatars.githubusercontent.com/u/69969563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikos-alexandris", "html_url": "https://github.com/nikos-alexandris", "followers_url": "https://api.github.com/users/nikos-alexandris/followers", "following_url": "https://api.github.com/users/nikos-alexandris/following{/other_user}", "gists_url": "https://api.github.com/users/nikos-alexandris/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikos-alexandris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikos-alexandris/subscriptions", "organizations_url": "https://api.github.com/users/nikos-alexandris/orgs", "repos_url": "https://api.github.com/users/nikos-alexandris/repos", "events_url": "https://api.github.com/users/nikos-alexandris/events{/privacy}", "received_events_url": "https://api.github.com/users/nikos-alexandris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdd36f1de036c7ab94c46f50015a88655ee1cbf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdd36f1de036c7ab94c46f50015a88655ee1cbf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdd36f1de036c7ab94c46f50015a88655ee1cbf8"}], "stats": {"total": 63, "additions": 55, "deletions": 8}, "files": [{"sha": "b7412bc405d5d7c48988c11fe34670692594962e", "filename": "gcc/rust/typecheck/rust-hir-type-check-pattern.cc", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/914b938884f9903681305184534a2e9869760f84/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/914b938884f9903681305184534a2e9869760f84/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc?ref=914b938884f9903681305184534a2e9869760f84", "patch": "@@ -262,16 +262,30 @@ TypeCheckPattern::visit (HIR::TuplePattern &pattern)\n \t  = *static_cast<HIR::TuplePatternItemsMultiple *> (\n \t    pattern.get_items ().get ());\n \n+\tif (parent->get_kind () != TyTy::TUPLE)\n+\t  {\n+\t    rust_error_at (pattern.get_locus (), \"expected %s, found tuple\",\n+\t\t\t   parent->as_string ().c_str ());\n+\t    break;\n+\t  }\n+\n+\tconst auto &patterns = ref.get_patterns ();\n+\tsize_t nitems_to_resolve = patterns.size ();\n+\n+\tTyTy::TupleType &par = *static_cast<TyTy::TupleType *> (parent);\n+\tif (patterns.size () != par.get_fields ().size ())\n+\t  {\n+\t    emit_pattern_size_error (pattern, par.get_fields ().size (),\n+\t\t\t\t     patterns.size ());\n+\t    nitems_to_resolve\n+\t      = std::min (nitems_to_resolve, par.get_fields ().size ());\n+\t  }\n+\n \tstd::vector<TyTy::TyVar> pattern_elems;\n-\tfor (size_t i = 0; i < ref.get_patterns ().size (); i++)\n+\tfor (size_t i = 0; i < nitems_to_resolve; i++)\n \t  {\n-\t    auto &p = ref.get_patterns ()[i];\n-\t    TyTy::BaseType *par_type = parent;\n-\t    if (parent->get_kind () == TyTy::TUPLE)\n-\t      {\n-\t\tTyTy::TupleType &par = *static_cast<TyTy::TupleType *> (parent);\n-\t\tpar_type = par.get_field (i);\n-\t      }\n+\t    auto &p = patterns[i];\n+\t    TyTy::BaseType *par_type = par.get_field (i);\n \n \t    TyTy::BaseType *elem\n \t      = TypeCheckPattern::Resolve (p.get (), par_type);\n@@ -407,5 +421,21 @@ TypeCheckPattern::visit (HIR::SlicePattern &pattern)\n \t\t \"type checking qualified path patterns not supported\");\n }\n \n+void\n+TypeCheckPattern::emit_pattern_size_error (const HIR::Pattern &pattern,\n+\t\t\t\t\t   size_t expected_field_count,\n+\t\t\t\t\t   size_t got_field_count)\n+{\n+  RichLocation r (pattern.get_locus ());\n+  r.add_range (mappings->lookup_location (parent->get_ref ()));\n+  rust_error_at (r,\n+\t\t \"expected a tuple with %lu %s, found one \"\n+\t\t \"with %lu %s\",\n+\t\t (unsigned long) expected_field_count,\n+\t\t expected_field_count == 1 ? \"element\" : \"elements\",\n+\t\t (unsigned long) got_field_count,\n+\t\t got_field_count == 1 ? \"element\" : \"elements\");\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "a4fbf888213d1eb4711b9c4661debb593c4b837d", "filename": "gcc/rust/typecheck/rust-hir-type-check-pattern.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/914b938884f9903681305184534a2e9869760f84/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/914b938884f9903681305184534a2e9869760f84/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.h?ref=914b938884f9903681305184534a2e9869760f84", "patch": "@@ -51,6 +51,10 @@ class TypeCheckPattern : public TypeCheckBase, public HIR::HIRPatternVisitor\n \t\t\t\t Analysis::NodeMapping mappings,\n \t\t\t\t Location locus);\n \n+  void emit_pattern_size_error (const HIR::Pattern &pattern,\n+\t\t\t\tsize_t expected_field_count,\n+\t\t\t\tsize_t got_field_count);\n+\n   TyTy::BaseType *parent;\n   TyTy::BaseType *infered;\n };"}, {"sha": "fbeb4b27fd48746827900a1ab33561d3968238b0", "filename": "gcc/testsuite/rust/compile/tuple_mismatch.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/914b938884f9903681305184534a2e9869760f84/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftuple_mismatch.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/914b938884f9903681305184534a2e9869760f84/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftuple_mismatch.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftuple_mismatch.rs?ref=914b938884f9903681305184534a2e9869760f84", "patch": "@@ -0,0 +1,13 @@\n+fn main() {\n+    let (_,) = 1; // { dg-error \"expected <integer>, found tuple\" }\n+    let (_,) = (1, 2); // { dg-error \"expected a tuple with 2 elements, found one with 1 element\" }\n+    let (_, _) = (1, 2, 3); // { dg-error \"expected a tuple with 3 elements, found one with 2 elements\" }\n+    let (_, _) = (1,); // { dg-error \"expected a tuple with 1 element, found one with 2 elements\" }\n+}\n+\n+// The lhs and rhs sizes don't match, but we still resolve 'a' to be bool, we don't\n+// error out immediately once we notice the size mismatch.\n+fn foo() -> i32 { // { dg-error \"expected .i32. got .bool.\" }\n+    let (a, _) = (true, 2, 3); // { dg-error \"expected a tuple with 3 elements, found one with 2 elements\" }\n+    a\n+}"}]}