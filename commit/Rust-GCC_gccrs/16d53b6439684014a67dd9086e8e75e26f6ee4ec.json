{"sha": "16d53b6439684014a67dd9086e8e75e26f6ee4ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZkNTNiNjQzOTY4NDAxNGE2N2RkOTA4NmU4ZTc1ZTI2ZjZlZTRlYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-04-06T03:12:19Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-04-06T03:12:19Z"}, "message": "cp-tree.h (instantiate_decl): Change prototype.\n\n\t* cp-tree.h (instantiate_decl): Change prototype.\n\t* decl2.c (mark_used): Adjust call.\n\t* optimize.c (inlinable_function_p): Adjust handling of templates.\n\t* pt.c (do_decl_instantiation): Adjust call to instantiate_decl.\n\t(do_type_instantiation): Likewise.\n\t(instantiate_decl): Defer more templates.\n\t(instantiate_pending_templates): Adjust logic to handle inline\n\tfriend functions.\n\nFrom-SVN: r32959", "tree": {"sha": "40b36e31ab940371efa53fd3d29c1160f917bf91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40b36e31ab940371efa53fd3d29c1160f917bf91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16d53b6439684014a67dd9086e8e75e26f6ee4ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16d53b6439684014a67dd9086e8e75e26f6ee4ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16d53b6439684014a67dd9086e8e75e26f6ee4ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16d53b6439684014a67dd9086e8e75e26f6ee4ec/comments", "author": null, "committer": null, "parents": [{"sha": "256172c40c392ccf732d008b096461a6e4923fec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/256172c40c392ccf732d008b096461a6e4923fec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/256172c40c392ccf732d008b096461a6e4923fec"}], "stats": {"total": 84, "additions": 48, "deletions": 36}, "files": [{"sha": "020da6be87009ef4807cb82ac81a5dc1e98f98b2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16d53b6439684014a67dd9086e8e75e26f6ee4ec/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16d53b6439684014a67dd9086e8e75e26f6ee4ec/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=16d53b6439684014a67dd9086e8e75e26f6ee4ec", "patch": "@@ -1,5 +1,14 @@\n 2000-04-05  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* cp-tree.h (instantiate_decl): Change prototype.\n+\t* decl2.c (mark_used): Adjust call.\n+\t* optimize.c (inlinable_function_p): Adjust handling of templates.\n+\t* pt.c (do_decl_instantiation): Adjust call to instantiate_decl.\n+\t(do_type_instantiation): Likewise.\n+\t(instantiate_decl): Defer more templates.\n+\t(instantiate_pending_templates): Adjust logic to handle inline\n+\tfriend functions.\n+\n \t* Makefile.in (GGC_H): New variable.  Use it throughout in place\n \tof ggc.h.\n \t"}, {"sha": "cbdd4862ed509dcbc41a89965dd1fedd9e7b94b7", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16d53b6439684014a67dd9086e8e75e26f6ee4ec/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16d53b6439684014a67dd9086e8e75e26f6ee4ec/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=16d53b6439684014a67dd9086e8e75e26f6ee4ec", "patch": "@@ -4123,7 +4123,7 @@ extern int more_specialized\t\t\tPARAMS ((tree, tree, tree));\n extern void mark_class_instantiated\t\tPARAMS ((tree, int));\n extern void do_decl_instantiation\t\tPARAMS ((tree, tree, tree));\n extern void do_type_instantiation\t\tPARAMS ((tree, tree));\n-extern tree instantiate_decl\t\t\tPARAMS ((tree));\n+extern tree instantiate_decl\t\t\tPARAMS ((tree, int));\n extern tree get_bindings\t\t\tPARAMS ((tree, tree, tree));\n extern void add_tree\t\t\t\tPARAMS ((tree));\n extern void add_maybe_template\t\t\tPARAMS ((tree, tree));"}, {"sha": "982bd2d4606c06b2fd4fc9e074f3a9d64dedd6f5", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16d53b6439684014a67dd9086e8e75e26f6ee4ec/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16d53b6439684014a67dd9086e8e75e26f6ee4ec/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=16d53b6439684014a67dd9086e8e75e26f6ee4ec", "patch": "@@ -5237,7 +5237,7 @@ mark_used (decl)\n       && DECL_LANG_SPECIFIC (decl) && DECL_TEMPLATE_INFO (decl)\n       && (!DECL_EXPLICIT_INSTANTIATION (decl)\n \t  || (TREE_CODE (decl) == FUNCTION_DECL && DECL_INLINE (decl))))\n-    instantiate_decl (decl);\n+    instantiate_decl (decl, /*defer_ok=*/1);\n }\n \n /* Helper function for named_class_head_sans_basetype nonterminal.  We"}, {"sha": "63ec81a26abf3982be62dfb7d47d864e2b0a20ba", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16d53b6439684014a67dd9086e8e75e26f6ee4ec/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16d53b6439684014a67dd9086e8e75e26f6ee4ec/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=16d53b6439684014a67dd9086e8e75e26f6ee4ec", "patch": "@@ -463,10 +463,6 @@ inlinable_function_p (fn, id)\n      it.  */\n   else if (!DECL_INLINE (fn))\n     ;\n-  /* If we don't have the function body available, we can't inline\n-     it.  */\n-  else if (!DECL_SAVED_TREE (fn))\n-    ;\n   /* We can't inline varargs functions.  */\n   else if (varargs_function_p (fn))\n     ;\n@@ -481,6 +477,21 @@ inlinable_function_p (fn, id)\n   /* Squirrel away the result so that we don't have to check again.  */\n   DECL_UNINLINABLE (fn) = !inlinable;\n \n+  /* We can inline a template instantiation only if it's fully\n+     instantiated.  */\n+  if (inlinable \n+      && DECL_TEMPLATE_INFO (fn) \n+      && TI_PENDING_TEMPLATE_FLAG (DECL_TEMPLATE_INFO (fn)))\n+    {\n+      fn = instantiate_decl (fn, /*defer_ok=*/0);\n+      inlinable = !TI_PENDING_TEMPLATE_FLAG (DECL_TEMPLATE_INFO (fn));\n+    }\n+\n+  /* If we don't have the function body available, we can't inline\n+     it.  */\n+  if (!DECL_SAVED_TREE (fn))\n+    inlinable = 0;\n+\n   /* Don't do recursive inlining, either.  We don't record this in\n      DECL_UNLINABLE; we may be able to inline this function later.  */\n   if (inlinable)\n@@ -492,16 +503,6 @@ inlinable_function_p (fn, id)\n \t  inlinable = 0;\n     }\n \n-  /* We can inline a template instantiation only if it's fully\n-     instantiated.  */\n-  if (inlinable\n-      && DECL_TEMPLATE_INFO (fn) \n-      && TI_PENDING_TEMPLATE_FLAG (DECL_TEMPLATE_INFO (fn)))\n-    {\n-      fn = instantiate_decl (fn);\n-      inlinable = !TI_PENDING_TEMPLATE_FLAG (DECL_TEMPLATE_INFO (fn));\n-    }\n-\n   /* Return the result.  */\n   return inlinable;\n }"}, {"sha": "23239930503c9d5696fb331e5bc5fee5e3a9fe69", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16d53b6439684014a67dd9086e8e75e26f6ee4ec/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16d53b6439684014a67dd9086e8e75e26f6ee4ec/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=16d53b6439684014a67dd9086e8e75e26f6ee4ec", "patch": "@@ -9129,7 +9129,7 @@ do_decl_instantiation (declspecs, declarator, storage)\n   mark_decl_instantiated (result, extern_p);\n   repo_template_instantiated (result, extern_p);\n   if (! extern_p)\n-    instantiate_decl (result);\n+    instantiate_decl (result, /*defer_ok=*/1);\n }\n \n void\n@@ -9265,7 +9265,7 @@ do_type_instantiation (t, storage)\n \t    mark_decl_instantiated (tmp, extern_p);\n \t    repo_template_instantiated (tmp, extern_p);\n \t    if (! extern_p)\n-\t      instantiate_decl (tmp);\n+\t      instantiate_decl (tmp, /*defer_ok=*/1);\n \t  }\n \n     for (tmp = TYPE_FIELDS (t); tmp; tmp = TREE_CHAIN (tmp))\n@@ -9274,7 +9274,7 @@ do_type_instantiation (t, storage)\n \t  mark_decl_instantiated (tmp, extern_p);\n \t  repo_template_instantiated (tmp, extern_p);\n \t  if (! extern_p)\n-\t    instantiate_decl (tmp);\n+\t    instantiate_decl (tmp, /*defer_ok=*/1);\n \t}\n \n     for (tmp = CLASSTYPE_TAGS (t); tmp; tmp = TREE_CHAIN (tmp))\n@@ -9376,11 +9376,14 @@ regenerate_decl_from_template (decl, tmpl)\n   register_specialization (decl, gen_tmpl, args);\n }\n \n-/* Produce the definition of D, a _DECL generated from a template.  */\n+/* Produce the definition of D, a _DECL generated from a template.  If\n+   DEFER_OK is non-zero, then we don't have to actually do the\n+   instantiation now; we just have to do it sometime.  */\n \n tree\n-instantiate_decl (d)\n+instantiate_decl (d, defer_ok)\n      tree d;\n+     int defer_ok;\n {\n   tree tmpl = DECL_TI_TEMPLATE (d);\n   tree args = DECL_TI_ARGS (d);\n@@ -9513,20 +9516,18 @@ instantiate_decl (d)\n       && ! (TREE_CODE (d) == FUNCTION_DECL && DECL_INLINE (d)))\n     goto out;\n \n+  /* We need to set up DECL_INITIAL regardless of pattern_defined if\n+     the variable is a static const initialized in the class body.  */\n   if (TREE_CODE (d) == VAR_DECL \n       && TREE_READONLY (d)\n       && DECL_INITIAL (d) == NULL_TREE\n       && DECL_INITIAL (code_pattern) != NULL_TREE)\n-    /* We need to set up DECL_INITIAL regardless of pattern_defined if\n-       the variable is a static const initialized in the class body.  */;\n-  else if (pattern_defined && nested\n-\t   && TREE_CODE (d) == FUNCTION_DECL && DECL_INLINE (d))\n-    /* An inline function used in another function; instantiate it now so\n-       we can inline it.  */;\n-  else if (! pattern_defined || ! at_eof)\n-    {\n-      /* Defer all other templates.  We restore the source position\n-         here because it's used by add_pending_template.  */\n+    ;\n+  /* Defer all other templates, unless we have been explicitly\n+     forbidden from doing so.  We restore the source position here\n+     because it's used by add_pending_template.  */\n+  else if (! pattern_defined || defer_ok)\n+    {\n       lineno = line;\n       input_filename = file;\n \n@@ -9657,7 +9658,7 @@ instantiate_pending_templates ()\n \t\t\t fn;\n \t\t\t fn = TREE_CHAIN (fn))\n \t\t      if (! DECL_ARTIFICIAL (fn))\n-\t\t\tinstantiate_decl (fn);\n+\t\t\tinstantiate_decl (fn, /*defer_ok=*/0);\n \t\t  if (COMPLETE_TYPE_P (instantiation))\n \t\t    {\n \t\t      instantiated_something = 1;\n@@ -9674,18 +9675,19 @@ instantiate_pending_templates ()\n \t    }\n \t  else\n \t    {\n-\t      if (DECL_TEMPLATE_INSTANTIATION (instantiation)\n+\t      if (!DECL_TEMPLATE_SPECIALIZATION (instantiation)\n \t\t  && !DECL_TEMPLATE_INSTANTIATED (instantiation))\n \t\t{\n-\t\t  instantiation = instantiate_decl (instantiation);\n+\t\t  instantiation = instantiate_decl (instantiation,\n+\t\t\t\t\t\t    /*defer_ok=*/0);\n \t\t  if (DECL_TEMPLATE_INSTANTIATED (instantiation))\n \t\t    {\n \t\t      instantiated_something = 1;\n \t\t      reconsider = 1;\n \t\t    }\n \t\t}\n \n-\t      if (!DECL_TEMPLATE_INSTANTIATION (instantiation)\n+\t      if (DECL_TEMPLATE_SPECIALIZATION (instantiation)\n \t\t  || DECL_TEMPLATE_INSTANTIATED (instantiation))\n \t\t/* If INSTANTIATION has been instantiated, then we don't\n \t\t   need to consider it again in the future.  */\n@@ -9717,7 +9719,7 @@ instantiate_pending_templates ()\n \t      template = TREE_PURPOSE (*t);\n \t      args = get_bindings (template, fn, NULL_TREE);\n \t      fn = instantiate_template (template, args);\n-\t      instantiate_decl (fn);\n+\t      instantiate_decl (fn, /*defer_ok=*/0);\n \t      reconsider = 1;\n \t    }\n \t"}]}