{"sha": "23b49089a4f20c24535c964d1b0eba0995dff6c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNiNDkwODlhNGYyMGMyNDUzNWM5NjRkMWIwZWJhMDk5NWRmZjZjOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-09-19T17:06:12Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-09-19T17:06:12Z"}, "message": "PR libstdc++/71500 restore C++11 compatibility in <regex>\n\n\tPR libstdc++/71500\n\t* include/bits/regex_executor.tcc\n\t(_Backref_matcher<BidIt, regex_traits<C>>::_M_apply): Use\n\tstd::__equal4 instead of C++14 4-iterator overloads of std::equal.\n\t* include/bits/stl_algobase.h (__equal4): New functions implementing\n\t4-iterator overloads of std::equal for use in C++11.\n\t(equal(It1, It1, It2, It2), equal(It1, It1, It2, It2, BinaryPred)):\n\tMove function bodies to new __equal4 functions.\n\t* testsuite/28_regex/simple_c++11.cc: New.\n\nFrom-SVN: r252981", "tree": {"sha": "510adcafc26cbaa2b9ba3b3c9cabfd685f0dc193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/510adcafc26cbaa2b9ba3b3c9cabfd685f0dc193"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23b49089a4f20c24535c964d1b0eba0995dff6c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23b49089a4f20c24535c964d1b0eba0995dff6c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23b49089a4f20c24535c964d1b0eba0995dff6c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23b49089a4f20c24535c964d1b0eba0995dff6c8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f0b8c7b4b4fc8c2f042f8dc3443a5bd2ef14b2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f0b8c7b4b4fc8c2f042f8dc3443a5bd2ef14b2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f0b8c7b4b4fc8c2f042f8dc3443a5bd2ef14b2d"}], "stats": {"total": 153, "additions": 105, "deletions": 48}, "files": [{"sha": "f9424a58c8a506474e7a9e5bfd80be91b17f377d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23b49089a4f20c24535c964d1b0eba0995dff6c8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23b49089a4f20c24535c964d1b0eba0995dff6c8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=23b49089a4f20c24535c964d1b0eba0995dff6c8", "patch": "@@ -1,5 +1,15 @@\n 2017-09-19  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/71500\n+\t* include/bits/regex_executor.tcc\n+\t(_Backref_matcher<BidIt, regex_traits<C>>::_M_apply): Use\n+\tstd::__equal4 instead of C++14 4-iterator overloads of std::equal.\n+\t* include/bits/stl_algobase.h (__equal4): New functions implementing\n+\t4-iterator overloads of std::equal for use in C++11.\n+\t(equal(It1, It1, It2, It2), equal(It1, It1, It2, It2, BinaryPred)):\n+\tMove function bodies to new __equal4 functions.\n+\t* testsuite/28_regex/simple_c++11.cc: New.\n+\n \tPR libstdc++/82254\n \t* include/std/type_traits (__is_invocable): Add partial specialization\n \tfor INVOKE<void> case and remove is_void<R> check from partial\n@@ -356,7 +366,7 @@\n 2017-09-11  Tim Shen  <timshen@google.com>\n \n \tPR libstdc++/71500\n-\t* include/bits/regex_executor.tcc: Support icase in regex_tratis<...>\n+\t* include/bits/regex_executor.tcc: Support icase in regex_traits<...>\n \tfor back reference matches.\n \t* testsuite/28_regex/regression.cc: Test case.\n "}, {"sha": "2ceba35e7b828e6f60afaf49cbf54678b6c2a3e2", "filename": "libstdc++-v3/include/bits/regex_executor.tcc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23b49089a4f20c24535c964d1b0eba0995dff6c8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23b49089a4f20c24535c964d1b0eba0995dff6c8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc?ref=23b49089a4f20c24535c964d1b0eba0995dff6c8", "patch": "@@ -366,17 +366,17 @@ namespace __detail\n \t       _BiIter __actual_end)\n       {\n \tif (!_M_icase)\n-\t  return std::equal(__expected_begin, __expected_end,\n-\t\t\t    __actual_begin, __actual_end);\n+\t  return std::__equal4(__expected_begin, __expected_end,\n+\t\t\t       __actual_begin, __actual_end);\n \ttypedef std::ctype<_CharT> __ctype_type;\n \tconst auto& __fctyp = use_facet<__ctype_type>(_M_traits.getloc());\n-\treturn std::equal(__expected_begin, __expected_end,\n-\t\t\t  __actual_begin, __actual_end,\n-\t\t\t  [this, &__fctyp](_CharT __lhs, _CharT __rhs)\n-\t\t\t  {\n-\t\t\t    return __fctyp.tolower(__lhs)\n-\t\t\t\t== __fctyp.tolower(__rhs);\n-\t\t\t  });\n+\treturn std::__equal4(__expected_begin, __expected_end,\n+\t\t\t     __actual_begin, __actual_end,\n+\t\t\t     [this, &__fctyp](_CharT __lhs, _CharT __rhs)\n+\t\t\t     {\n+\t\t\t       return __fctyp.tolower(__lhs)\n+\t\t\t\t == __fctyp.tolower(__rhs);\n+\t\t\t     });\n       }\n \n       bool _M_icase;"}, {"sha": "a80934c4faaabf94b27bfc4f1365682e1812462a", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 58, "deletions": 38, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23b49089a4f20c24535c964d1b0eba0995dff6c8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23b49089a4f20c24535c964d1b0eba0995dff6c8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=23b49089a4f20c24535c964d1b0eba0995dff6c8", "patch": "@@ -1082,6 +1082,60 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       return true;\n     }\n \n+#if __cplusplus >= 201103L\n+  // 4-iterator version of std::equal<It1, It2> for use in C++11.\n+  template<typename _II1, typename _II2>\n+    inline bool\n+    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)\n+    {\n+      using _RATag = random_access_iterator_tag;\n+      using _Cat1 = typename iterator_traits<_II1>::iterator_category;\n+      using _Cat2 = typename iterator_traits<_II2>::iterator_category;\n+      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;\n+      if (_RAIters())\n+\t{\n+\t  auto __d1 = std::distance(__first1, __last1);\n+\t  auto __d2 = std::distance(__first2, __last2);\n+\t  if (__d1 != __d2)\n+\t    return false;\n+\t  return _GLIBCXX_STD_A::equal(__first1, __last1, __first2);\n+\t}\n+\n+      for (; __first1 != __last1 && __first2 != __last2;\n+\t  ++__first1, (void)++__first2)\n+\tif (!(*__first1 == *__first2))\n+\t  return false;\n+      return __first1 == __last1 && __first2 == __last2;\n+    }\n+\n+  // 4-iterator version of std::equal<It1, It2, BinaryPred> for use in C++11.\n+  template<typename _II1, typename _II2, typename _BinaryPredicate>\n+    inline bool\n+    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2,\n+\t     _BinaryPredicate __binary_pred)\n+    {\n+      using _RATag = random_access_iterator_tag;\n+      using _Cat1 = typename iterator_traits<_II1>::iterator_category;\n+      using _Cat2 = typename iterator_traits<_II2>::iterator_category;\n+      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;\n+      if (_RAIters())\n+\t{\n+\t  auto __d1 = std::distance(__first1, __last1);\n+\t  auto __d2 = std::distance(__first2, __last2);\n+\t  if (__d1 != __d2)\n+\t    return false;\n+\t  return _GLIBCXX_STD_A::equal(__first1, __last1, __first2,\n+\t\t\t\t       __binary_pred);\n+\t}\n+\n+      for (; __first1 != __last1 && __first2 != __last2;\n+\t  ++__first1, (void)++__first2)\n+\tif (!bool(__binary_pred(*__first1, *__first2)))\n+\t  return false;\n+      return __first1 == __last1 && __first2 == __last2;\n+    }\n+#endif // C++11\n+\n #if __cplusplus > 201103L\n \n #define __cpp_lib_robust_nonmodifying_seq_ops 201304\n@@ -1112,24 +1166,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_requires_valid_range(__first1, __last1);\n       __glibcxx_requires_valid_range(__first2, __last2);\n \n-      using _RATag = random_access_iterator_tag;\n-      using _Cat1 = typename iterator_traits<_II1>::iterator_category;\n-      using _Cat2 = typename iterator_traits<_II2>::iterator_category;\n-      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;\n-      if (_RAIters())\n-\t{\n-\t  auto __d1 = std::distance(__first1, __last1);\n-\t  auto __d2 = std::distance(__first2, __last2);\n-\t  if (__d1 != __d2)\n-\t    return false;\n-\t  return _GLIBCXX_STD_A::equal(__first1, __last1, __first2);\n-\t}\n-\n-      for (; __first1 != __last1 && __first2 != __last2;\n-\t  ++__first1, (void)++__first2)\n-\tif (!(*__first1 == *__first2))\n-\t  return false;\n-      return __first1 == __last1 && __first2 == __last2;\n+      return _GLIBCXX_STD_A::__equal4(__first1, __last1, __first2, __last2);\n     }\n \n   /**\n@@ -1159,27 +1196,10 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_requires_valid_range(__first1, __last1);\n       __glibcxx_requires_valid_range(__first2, __last2);\n \n-      using _RATag = random_access_iterator_tag;\n-      using _Cat1 = typename iterator_traits<_IIter1>::iterator_category;\n-      using _Cat2 = typename iterator_traits<_IIter2>::iterator_category;\n-      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;\n-      if (_RAIters())\n-\t{\n-\t  auto __d1 = std::distance(__first1, __last1);\n-\t  auto __d2 = std::distance(__first2, __last2);\n-\t  if (__d1 != __d2)\n-\t    return false;\n-\t  return _GLIBCXX_STD_A::equal(__first1, __last1, __first2,\n-\t\t\t\t       __binary_pred);\n-\t}\n-\n-      for (; __first1 != __last1 && __first2 != __last2;\n-\t  ++__first1, (void)++__first2)\n-\tif (!bool(__binary_pred(*__first1, *__first2)))\n-\t  return false;\n-      return __first1 == __last1 && __first2 == __last2;\n+      return _GLIBCXX_STD_A::__equal4(__first1, __last1, __first2, __last2,\n+\t\t\t\t      __binary_pred);\n     }\n-#endif\n+#endif // C++14\n \n   /**\n    *  @brief Performs @b dictionary comparison on ranges."}, {"sha": "2cfa503fc07962ea53f8dedf37e9aca4c355b6ee", "filename": "libstdc++-v3/testsuite/28_regex/simple_c++11.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23b49089a4f20c24535c964d1b0eba0995dff6c8/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fsimple_c%2B%2B11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23b49089a4f20c24535c964d1b0eba0995dff6c8/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fsimple_c%2B%2B11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fsimple_c%2B%2B11.cc?ref=23b49089a4f20c24535c964d1b0eba0995dff6c8", "patch": "@@ -0,0 +1,27 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+#include <regex>\n+\n+// Ensure compilation of trivial example still works with C++11.\n+// https://gcc.gnu.org/ml/libstdc++/2017-09/msg00040.html\n+std::regex r{\"\"};\n+std::cmatch m;\n+bool b = regex_match(\"\", m, r);"}]}