{"sha": "a5ad7492f88de013afdf2183c96cf1225fb6021e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVhZDc0OTJmODhkZTAxM2FmZGYyMTgzYzk2Y2YxMjI1ZmI2MDIxZQ==", "commit": {"author": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2014-06-26T14:24:34Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2014-06-26T14:24:34Z"}, "message": "Removed file marked as removed in r211987.\n\nFrom-SVN: r212031", "tree": {"sha": "f26e43efef7a10b21cc3f845cc9eab3e41b7bc22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f26e43efef7a10b21cc3f845cc9eab3e41b7bc22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5ad7492f88de013afdf2183c96cf1225fb6021e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5ad7492f88de013afdf2183c96cf1225fb6021e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5ad7492f88de013afdf2183c96cf1225fb6021e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5ad7492f88de013afdf2183c96cf1225fb6021e/comments", "author": null, "committer": null, "parents": [{"sha": "e01fa630f7ea16113f040ad536cf1844a6498831", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e01fa630f7ea16113f040ad536cf1844a6498831", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e01fa630f7ea16113f040ad536cf1844a6498831"}], "stats": {"total": 108, "additions": 0, "deletions": 108}, "files": [{"sha": "e12fce6e4bc768847d5e35c3913e9e6c5f333d73", "filename": "gcc/ipa-ref-inline.h", "status": "removed", "additions": 0, "deletions": 108, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01fa630f7ea16113f040ad536cf1844a6498831/gcc%2Fipa-ref-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01fa630f7ea16113f040ad536cf1844a6498831/gcc%2Fipa-ref-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-ref-inline.h?ref=e01fa630f7ea16113f040ad536cf1844a6498831", "patch": "@@ -1,108 +0,0 @@\n-/* IPA reference lists.\n-   Copyright (C) 2010-2014 Free Software Foundation, Inc.\n-   Contributed by Jan Hubicka\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* Return callgraph node REF is referring.  */\n-static inline struct cgraph_node *\n-ipa_ref_node (struct ipa_ref *ref)\n-{\n-  return cgraph (ref->referred);\n-}\n-\n-/* Return varpool node REF is referring.  */\n-\n-static inline varpool_node *\n-ipa_ref_varpool_node (struct ipa_ref *ref)\n-{\n-  return varpool (ref->referred);\n-}\n-\n-/* Return cgraph node REF is in.  */\n-\n-static inline struct cgraph_node *\n-ipa_ref_referring_node (struct ipa_ref *ref)\n-{\n-  return cgraph (ref->referring);\n-}\n-\n-/* Return varpool node REF is in.  */\n-\n-static inline varpool_node *\n-ipa_ref_referring_varpool_node (struct ipa_ref *ref)\n-{\n-  return varpool (ref->referring);\n-}\n-\n-/* Return reference list REF is in.  */\n-\n-static inline struct ipa_ref_list *\n-ipa_ref_referring_ref_list (struct ipa_ref *ref)\n-{\n-  return &ref->referring->ref_list;\n-}\n-\n-/* Return reference list REF is in.  */\n-\n-static inline struct ipa_ref_list *\n-ipa_ref_referred_ref_list (struct ipa_ref *ref)\n-{\n-  return &ref->referred->ref_list;\n-}\n-\n-/* Return first reference in LIST or NULL if empty.  */\n-\n-static inline struct ipa_ref *\n-ipa_ref_list_first_reference (struct ipa_ref_list *list)\n-{\n-  if (!vec_safe_length (list->references))\n-    return NULL;\n-  return &(*list->references)[0];\n-}\n-\n-/* Return first referring ref in LIST or NULL if empty.  */\n-\n-static inline struct ipa_ref *\n-ipa_ref_list_first_referring (struct ipa_ref_list *list)\n-{\n-  if (!list->referring.length ())\n-    return NULL;\n-  return list->referring[0];\n-}\n-\n-/* Clear reference list.  */\n-\n-static inline void\n-ipa_empty_ref_list (struct ipa_ref_list *list)\n-{\n-  list->referring.create (0);\n-  list->references = NULL;\n-}\n-\n-/* Clear reference list.  */\n-\n-static inline unsigned int\n-ipa_ref_list_nreferences (struct ipa_ref_list *list)\n-{\n-  return vec_safe_length (list->references);\n-}\n-\n-#define ipa_ref_list_reference_iterate(L,I,P) \\\n-   vec_safe_iterate ((L)->references, (I), &(P))\n-#define ipa_ref_list_referring_iterate(L,I,P) \\\n-   (L)->referring.iterate ((I), &(P))"}]}