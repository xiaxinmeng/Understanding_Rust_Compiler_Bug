{"sha": "d1ff0847b2df6ad21f77e26e7e516643c5aa7d40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFmZjA4NDdiMmRmNmFkMjFmNzdlMjZlN2U1MTY2NDNjNWFhN2Q0MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-03-26T16:08:31Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-03-26T16:08:31Z"}, "message": "aarch64: Add costs for storing one element of a vector\n\nStoring one element of a vector is costed as a vec_to_scalar\nfollowed by a scalar_store.  However, vec_to_scalar is also\nused for reductions and for vector-to-GPR moves, which makes\nit difficult to pick one cost for them all.\n\nThis patch therefore adds a cost for extracting one element\nof a vector in preparation for storing it out.  The store\nitself is still costed separately.\n\nLike with the previous patches, this one only becomes active if\na CPU selects use_new_vector_costs.  It should therefore have\na very low impact on other CPUs.\n\ngcc/\n\t* config/aarch64/aarch64-protos.h\n\t(simd_vec_cost::store_elt_extra_cost): New member variable.\n\t* config/aarch64/aarch64.c (generic_advsimd_vector_cost): Update\n\taccordingly, using the vec_to_scalar cost for the new field.\n\t(generic_sve_vector_cost, a64fx_advsimd_vector_cost): Likewise.\n\t(a64fx_sve_vector_cost, qdf24xx_advsimd_vector_cost): Likewise.\n\t(thunderx_advsimd_vector_cost, tsv110_advsimd_vector_cost): Likewise.\n\t(cortexa57_advsimd_vector_cost, exynosm1_advsimd_vector_cost)\n\t(xgene1_advsimd_vector_cost, thunderx2t99_advsimd_vector_cost)\n\t(thunderx3t110_advsimd_vector_cost): Likewise.\n\t(aarch64_detect_vector_stmt_subtype): Detect single-element stores.", "tree": {"sha": "440a0b8c313edb0c1413035c48bd295afca6dbe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/440a0b8c313edb0c1413035c48bd295afca6dbe7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1ff0847b2df6ad21f77e26e7e516643c5aa7d40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1ff0847b2df6ad21f77e26e7e516643c5aa7d40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1ff0847b2df6ad21f77e26e7e516643c5aa7d40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1ff0847b2df6ad21f77e26e7e516643c5aa7d40/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1a831f0dd869543788f08f94dc7ff64df3f2064", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a831f0dd869543788f08f94dc7ff64df3f2064", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1a831f0dd869543788f08f94dc7ff64df3f2064"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "fabe3df70716bfcebff0b871321bf73365d03269", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ff0847b2df6ad21f77e26e7e516643c5aa7d40/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ff0847b2df6ad21f77e26e7e516643c5aa7d40/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=d1ff0847b2df6ad21f77e26e7e516643c5aa7d40", "patch": "@@ -224,6 +224,10 @@ struct simd_vec_cost\n   const int reduc_f32_cost;\n   const int reduc_f64_cost;\n \n+  /* Additional cost of storing a single vector element, on top of the\n+     normal cost of a scalar store.  */\n+  const int store_elt_extra_cost;\n+\n   /* Cost of a vector-to-scalar operation.  */\n   const int vec_to_scalar_cost;\n "}, {"sha": "20bb75bd56c6cdf8f09deee56fb7b316024b070a", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1ff0847b2df6ad21f77e26e7e516643c5aa7d40/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1ff0847b2df6ad21f77e26e7e516643c5aa7d40/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=d1ff0847b2df6ad21f77e26e7e516643c5aa7d40", "patch": "@@ -601,6 +601,7 @@ static const advsimd_vec_cost generic_advsimd_vector_cost =\n   2, /* reduc_f16_cost  */\n   2, /* reduc_f32_cost  */\n   2, /* reduc_f64_cost  */\n+  2, /* store_elt_extra_cost  */\n   2, /* vec_to_scalar_cost  */\n   1, /* scalar_to_vec_cost  */\n   1, /* align_load_cost  */\n@@ -626,6 +627,7 @@ static const sve_vec_cost generic_sve_vector_cost =\n     2, /* reduc_f16_cost  */\n     2, /* reduc_f32_cost  */\n     2, /* reduc_f64_cost  */\n+    2, /* store_elt_extra_cost  */\n     2, /* vec_to_scalar_cost  */\n     1, /* scalar_to_vec_cost  */\n     1, /* align_load_cost  */\n@@ -667,6 +669,7 @@ static const advsimd_vec_cost a64fx_advsimd_vector_cost =\n   13, /* reduc_f16_cost  */\n   13, /* reduc_f32_cost  */\n   13, /* reduc_f64_cost  */\n+  13, /* store_elt_extra_cost  */\n   13, /* vec_to_scalar_cost  */\n   4, /* scalar_to_vec_cost  */\n   6, /* align_load_cost  */\n@@ -691,6 +694,7 @@ static const sve_vec_cost a64fx_sve_vector_cost =\n     13, /* reduc_f16_cost  */\n     13, /* reduc_f32_cost  */\n     13, /* reduc_f64_cost  */\n+    13, /* store_elt_extra_cost  */\n     13, /* vec_to_scalar_cost  */\n     4, /* scalar_to_vec_cost  */\n     6, /* align_load_cost  */\n@@ -731,6 +735,7 @@ static const advsimd_vec_cost qdf24xx_advsimd_vector_cost =\n   1, /* reduc_f16_cost  */\n   1, /* reduc_f32_cost  */\n   1, /* reduc_f64_cost  */\n+  1, /* store_elt_extra_cost  */\n   1, /* vec_to_scalar_cost  */\n   1, /* scalar_to_vec_cost  */\n   1, /* align_load_cost  */\n@@ -768,6 +773,7 @@ static const advsimd_vec_cost thunderx_advsimd_vector_cost =\n   2, /* reduc_f16_cost  */\n   2, /* reduc_f32_cost  */\n   2, /* reduc_f64_cost  */\n+  2, /* store_elt_extra_cost  */\n   2, /* vec_to_scalar_cost  */\n   2, /* scalar_to_vec_cost  */\n   3, /* align_load_cost  */\n@@ -804,6 +810,7 @@ static const advsimd_vec_cost tsv110_advsimd_vector_cost =\n   3, /* reduc_f16_cost  */\n   3, /* reduc_f32_cost  */\n   3, /* reduc_f64_cost  */\n+  3, /* store_elt_extra_cost  */\n   3, /* vec_to_scalar_cost  */\n   2, /* scalar_to_vec_cost  */\n   5, /* align_load_cost  */\n@@ -839,6 +846,7 @@ static const advsimd_vec_cost cortexa57_advsimd_vector_cost =\n   8, /* reduc_f16_cost  */\n   8, /* reduc_f32_cost  */\n   8, /* reduc_f64_cost  */\n+  8, /* store_elt_extra_cost  */\n   8, /* vec_to_scalar_cost  */\n   8, /* scalar_to_vec_cost  */\n   4, /* align_load_cost  */\n@@ -875,6 +883,7 @@ static const advsimd_vec_cost exynosm1_advsimd_vector_cost =\n   3, /* reduc_f16_cost  */\n   3, /* reduc_f32_cost  */\n   3, /* reduc_f64_cost  */\n+  3, /* store_elt_extra_cost  */\n   3, /* vec_to_scalar_cost  */\n   3, /* scalar_to_vec_cost  */\n   5, /* align_load_cost  */\n@@ -910,6 +919,7 @@ static const advsimd_vec_cost xgene1_advsimd_vector_cost =\n   4, /* reduc_f16_cost  */\n   4, /* reduc_f32_cost  */\n   4, /* reduc_f64_cost  */\n+  4, /* store_elt_extra_cost  */\n   4, /* vec_to_scalar_cost  */\n   4, /* scalar_to_vec_cost  */\n   10, /* align_load_cost  */\n@@ -946,6 +956,7 @@ static const advsimd_vec_cost thunderx2t99_advsimd_vector_cost =\n   6, /* reduc_f16_cost  */\n   6, /* reduc_f32_cost  */\n   6, /* reduc_f64_cost  */\n+  6, /* store_elt_extra_cost  */\n   6, /* vec_to_scalar_cost  */\n   5, /* scalar_to_vec_cost  */\n   4, /* align_load_cost  */\n@@ -982,6 +993,7 @@ static const advsimd_vec_cost thunderx3t110_advsimd_vector_cost =\n   5, /* reduc_f16_cost  */\n   5, /* reduc_f32_cost  */\n   5, /* reduc_f64_cost  */\n+  5, /* store_elt_extra_cost  */\n   5, /* vec_to_scalar_cost  */\n   5, /* scalar_to_vec_cost  */\n   4, /* align_load_cost  */\n@@ -14259,6 +14271,14 @@ aarch64_detect_vector_stmt_subtype (vec_info *vinfo, vect_cost_for_stmt kind,\n   if (aarch64_sve_mode_p (TYPE_MODE (vectype)))\n     sve_costs = aarch64_tune_params.vec_costs->sve;\n \n+  /* Detect cases in which vec_to_scalar is describing the extraction of a\n+     vector element in preparation for a scalar store.  The store itself is\n+     costed separately.  */\n+  if (kind == vec_to_scalar\n+      && STMT_VINFO_DATA_REF (stmt_info)\n+      && DR_IS_WRITE (STMT_VINFO_DATA_REF (stmt_info)))\n+    return simd_costs->store_elt_extra_cost;\n+\n   /* Detect cases in which vec_to_scalar represents an in-loop reduction.  */\n   if (kind == vec_to_scalar\n       && where == vect_body"}]}