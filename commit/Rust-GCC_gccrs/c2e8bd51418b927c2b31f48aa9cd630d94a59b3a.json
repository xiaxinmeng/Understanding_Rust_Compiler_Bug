{"sha": "c2e8bd51418b927c2b31f48aa9cd630d94a59b3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJlOGJkNTE0MThiOTI3YzJiMzFmNDhhYTljZDYzMGQ5NGE1OWIzYQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-07-09T23:29:33Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-07-09T23:29:33Z"}, "message": "PR tree-optimization\n\n\ngcc/ChangeLog:\n\n\tPR tree-optimization\n\t* tree-ssa-strlen.c (handle_char_store): Constrain a single character\n\toptimization to just single character stores.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization\n\t* gcc.dg/strlenopt-26.c: Exit with test result status.\n\t* gcc.dg/strlenopt-67.c: New test.\n\nFrom-SVN: r273317", "tree": {"sha": "a7ddb5fb711afabfe5545986fb93805959e02ae4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7ddb5fb711afabfe5545986fb93805959e02ae4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2e8bd51418b927c2b31f48aa9cd630d94a59b3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2e8bd51418b927c2b31f48aa9cd630d94a59b3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2e8bd51418b927c2b31f48aa9cd630d94a59b3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2e8bd51418b927c2b31f48aa9cd630d94a59b3a/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a0aeb7fb93da156b64fd08391c79ff35a69af7ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0aeb7fb93da156b64fd08391c79ff35a69af7ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0aeb7fb93da156b64fd08391c79ff35a69af7ba"}], "stats": {"total": 171, "additions": 145, "deletions": 26}, "files": [{"sha": "f37b1f061e83c66042325500cd48e5c119ba5f4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e8bd51418b927c2b31f48aa9cd630d94a59b3a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e8bd51418b927c2b31f48aa9cd630d94a59b3a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2e8bd51418b927c2b31f48aa9cd630d94a59b3a", "patch": "@@ -1,3 +1,9 @@\n+2019-07-09  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/90989\n+\t* tree-ssa-strlen.c (handle_char_store): Constrain a single character\n+\toptimization to just single character stores.\n+\n 2019-07-09  Joern Rennecke  <joern.rennecke@riscy-ip.com>\n \n \t* tree-vect-stmts.c (vectorizable_comparison) <!slp_node>:"}, {"sha": "b0255219450deecbd05e51b07f664102b696d149", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e8bd51418b927c2b31f48aa9cd630d94a59b3a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e8bd51418b927c2b31f48aa9cd630d94a59b3a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c2e8bd51418b927c2b31f48aa9cd630d94a59b3a", "patch": "@@ -1,3 +1,9 @@\n+2019-07-09  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/90989\n+\t* gcc.dg/strlenopt-26.c: Exit with test result status.\n+\t* gcc.dg/strlenopt-67.c: New test.\n+\n 2019-07-09  Dragan Mladjenovic  <dmladjenovic@wavecomp.com>\n \n \t* gcc.target/mips/cfgcleanup-jalr1.c: New test."}, {"sha": "6bb0263d315b4443a93f9d859aebcd1d04f9c289", "filename": "gcc/testsuite/gcc.dg/strlenopt-26.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e8bd51418b927c2b31f48aa9cd630d94a59b3a/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e8bd51418b927c2b31f48aa9cd630d94a59b3a/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-26.c?ref=c2e8bd51418b927c2b31f48aa9cd630d94a59b3a", "patch": "@@ -17,8 +17,7 @@ main (void)\n {\n   char p[] = \"foobar\";\n   const char *volatile q = \"xyzzy\";\n-  fn1 (p, q);\n-  return 0;\n+  return fn1 (p, q);\n }\n \n /* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 2 \"strlen\" } } */"}, {"sha": "a2bcfba68ba6e8d68951bd0612e1c82045edca56", "filename": "gcc/testsuite/gcc.dg/strlenopt-67.c", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e8bd51418b927c2b31f48aa9cd630d94a59b3a/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-67.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e8bd51418b927c2b31f48aa9cd630d94a59b3a/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-67.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-67.c?ref=c2e8bd51418b927c2b31f48aa9cd630d94a59b3a", "patch": "@@ -0,0 +1,104 @@\n+/* PR tree-optimization/90989 - incorrrect strlen result after second strcpy\n+   into the same destination.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -fdump-tree-optimized\" } */\n+\n+// #include \"strlenopt.h\"\n+\n+char a[4];\n+\n+int f4 (void)\n+{\n+  char b[4];\n+  __builtin_strcpy (b, \"12\");\n+\n+  int i = __builtin_strcmp (a, b);\n+\n+  __builtin_strcpy (b, \"123\");\n+  if (__builtin_strlen (b) != 3)\n+    __builtin_abort ();\n+\n+  return i;\n+}\n+\n+int f6 (void)\n+{\n+  char b[6];\n+  __builtin_strcpy (b, \"1234\");\n+\n+  int i = __builtin_strcmp (a, b);\n+\n+  __builtin_strcpy (b, \"12345\");\n+  if (__builtin_strlen (b) != 5)\n+    __builtin_abort ();\n+\n+  return i;\n+}\n+\n+int f8 (void)\n+{\n+  char b[8];\n+  __builtin_strcpy (b, \"1234\");\n+\n+  int i = __builtin_strcmp (a, b);\n+\n+  __builtin_strcpy (b, \"1234567\");\n+  if (__builtin_strlen (b) != 7)\n+    __builtin_abort ();\n+\n+  return i;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"abort|strlen\" 0 \"optimized\" } } */\n+/* PR tree-optimization/ - incorrrect strlen result after second strcpy\n+   into the same destination.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -fdump-tree-optimized\" } */\n+\n+// #include \"strlenopt.h\"\n+\n+char a[4];\n+\n+int f4 (void)\n+{\n+  char b[4];\n+  __builtin_strcpy (b, \"12\");\n+\n+  int i = __builtin_strcmp (a, b);\n+\n+  __builtin_strcpy (b, \"123\");\n+  if (__builtin_strlen (b) != 3)\n+    __builtin_abort ();\n+\n+  return i;\n+}\n+\n+int f6 (void)\n+{\n+  char b[6];\n+  __builtin_strcpy (b, \"1234\");\n+\n+  int i = __builtin_strcmp (a, b);\n+\n+  __builtin_strcpy (b, \"12345\");\n+  if (__builtin_strlen (b) != 5)\n+    __builtin_abort ();\n+\n+  return i;\n+}\n+\n+int f8 (void)\n+{\n+  char b[8];\n+  __builtin_strcpy (b, \"1234\");\n+\n+  int i = __builtin_strcmp (a, b);\n+\n+  __builtin_strcpy (b, \"1234567\");\n+  if (__builtin_strlen (b) != 7)\n+    __builtin_abort ();\n+\n+  return i;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"abort|strlen\" 0 \"optimized\" } } */"}, {"sha": "88b6bd7869ef8b60ff7f426ae5b7323afc2a1118", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e8bd51418b927c2b31f48aa9cd630d94a59b3a/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e8bd51418b927c2b31f48aa9cd630d94a59b3a/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=c2e8bd51418b927c2b31f48aa9cd630d94a59b3a", "patch": "@@ -3462,34 +3462,38 @@ handle_char_store (gimple_stmt_iterator *gsi)\n \t      return false;\n \t    }\n \t}\n-      /* If si->nonzero_chars > OFFSET, we aren't overwriting '\\0',\n-\t and if we aren't storing '\\0', we know that the length of the\n-\t string and any other zero terminated string in memory remains\n-\t the same.  In that case we move to the next gimple statement and\n-\t return to signal the caller that it shouldn't invalidate anything.\n-\n-\t This is benefical for cases like:\n-\n-\t char p[20];\n-\t void foo (char *q)\n-\t {\n-\t   strcpy (p, \"foobar\");\n-\t   size_t len = strlen (p);        // This can be optimized into 6\n-\t   size_t len2 = strlen (q);        // This has to be computed\n-\t   p[0] = 'X';\n-\t   size_t len3 = strlen (p);        // This can be optimized into 6\n-\t   size_t len4 = strlen (q);        // This can be optimized into len2\n-\t   bar (len, len2, len3, len4);\n-        }\n-\t*/\n-      else if (storing_nonzero_p && cmp > 0)\n+\n+      if (cmp > 0\n+\t  && storing_nonzero_p\n+\t  && TREE_CODE (TREE_TYPE (rhs)) == INTEGER_TYPE)\n \t{\n+\t  /* Handle a single non-nul character store.\n+\t     If si->nonzero_chars > OFFSET, we aren't overwriting '\\0',\n+\t     and if we aren't storing '\\0', we know that the length of the\n+\t     string and any other zero terminated string in memory remains\n+\t     the same.  In that case we move to the next gimple statement and\n+\t     return to signal the caller that it shouldn't invalidate anything.\n+\n+\t     This is benefical for cases like:\n+\n+\t     char p[20];\n+\t     void foo (char *q)\n+\t     {\n+\t       strcpy (p, \"foobar\");\n+\t       size_t len = strlen (p);     // can be folded to 6\n+\t       size_t len2 = strlen (q);    // has to be computed\n+\t       p[0] = 'X';\n+\t       size_t len3 = strlen (p);    // can be folded to 6\n+\t       size_t len4 = strlen (q);    // can be folded to len2\n+\t       bar (len, len2, len3, len4);\n+\t       } */\n \t  gsi_next (gsi);\n \t  return false;\n \t}\n-      else if (storing_all_zeros_p\n-\t       || storing_nonzero_p\n-\t       || (offset != 0 && cmp > 0))\n+\n+      if (storing_all_zeros_p\n+\t  || storing_nonzero_p\n+\t  || (offset != 0 && cmp > 0))\n \t{\n \t  /* When STORING_NONZERO_P, we know that the string will start\n \t     with at least OFFSET + 1 nonzero characters.  If storing"}]}