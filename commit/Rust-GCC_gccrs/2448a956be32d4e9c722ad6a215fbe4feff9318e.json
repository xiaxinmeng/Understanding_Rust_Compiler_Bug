{"sha": "2448a956be32d4e9c722ad6a215fbe4feff9318e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ0OGE5NTZiZTMyZDRlOWM3MjJhZDZhMjE1ZmJlNGZlZmY5MzE4ZQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-04-26T14:59:40Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-04-26T14:59:40Z"}, "message": "re PR c/67784 (Incorrect parsing when using declarations in for loops and typedefs)\n\n\tPR c/67784\n\t* c-parser.c (c_parser_maybe_reclassify_token): New function factored\n\tout of ...\n\t(c_parser_for_statement): ... here.\n\t(c_parser_if_statement): Use it.\n\t(c_parser_switch_statement): Use it.\n\t(c_parser_while_statement): Use it.\n\n\t* gcc.dg/pr67784-3.c: New test.\n\t* gcc.dg/pr67784-4.c: New test.\n\t* gcc.dg/pr67784-5.c: New test.\n\nFrom-SVN: r235446", "tree": {"sha": "aac11b3deddf21f556c7669b55a684b4503ed9f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aac11b3deddf21f556c7669b55a684b4503ed9f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2448a956be32d4e9c722ad6a215fbe4feff9318e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2448a956be32d4e9c722ad6a215fbe4feff9318e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2448a956be32d4e9c722ad6a215fbe4feff9318e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2448a956be32d4e9c722ad6a215fbe4feff9318e/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ea79f1a60435385f4bed7844ccf00d6a99e90c17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea79f1a60435385f4bed7844ccf00d6a99e90c17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea79f1a60435385f4bed7844ccf00d6a99e90c17"}], "stats": {"total": 250, "additions": 218, "deletions": 32}, "files": [{"sha": "139d770f82a9ee540460b7b73155e52840847b8e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2448a956be32d4e9c722ad6a215fbe4feff9318e/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2448a956be32d4e9c722ad6a215fbe4feff9318e/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=2448a956be32d4e9c722ad6a215fbe4feff9318e", "patch": "@@ -1,3 +1,13 @@\n+2016-04-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/67784\n+\t* c-parser.c (c_parser_maybe_reclassify_token): New function factored\n+\tout of ...\n+\t(c_parser_for_statement): ... here.\n+\t(c_parser_if_statement): Use it.\n+\t(c_parser_switch_statement): Use it.\n+\t(c_parser_while_statement): Use it.\n+\n 2016-04-20  Ilya Verbin  <ilya.verbin@intel.com>\n \n \tPR c++/69363"}, {"sha": "74423a6b233b65a75ecf0d59294af6fd00b0f683", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 41, "deletions": 32, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2448a956be32d4e9c722ad6a215fbe4feff9318e/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2448a956be32d4e9c722ad6a215fbe4feff9318e/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=2448a956be32d4e9c722ad6a215fbe4feff9318e", "patch": "@@ -5425,6 +5425,43 @@ c_parser_else_body (c_parser *parser, const token_indent_info &else_tinfo,\n   return c_end_compound_stmt (body_loc, block, flag_isoc99);\n }\n \n+/* We might need to reclassify any previously-lexed identifier, e.g.\n+   when we've left a for loop with an if-statement without else in the\n+   body - we might have used a wrong scope for the token.  See PR67784.  */\n+\n+static void\n+c_parser_maybe_reclassify_token (c_parser *parser)\n+{\n+  if (c_parser_next_token_is (parser, CPP_NAME))\n+    {\n+      c_token *token = c_parser_peek_token (parser);\n+\n+      if (token->id_kind != C_ID_CLASSNAME)\n+\t{\n+\t  tree decl = lookup_name (token->value);\n+\n+\t  token->id_kind = C_ID_ID;\n+\t  if (decl)\n+\t    {\n+\t      if (TREE_CODE (decl) == TYPE_DECL)\n+\t\ttoken->id_kind = C_ID_TYPENAME;\n+\t    }\n+\t  else if (c_dialect_objc ())\n+\t    {\n+\t      tree objc_interface_decl = objc_is_class_name (token->value);\n+\t      /* Objective-C class names are in the same namespace as\n+\t\t variables and typedefs, and hence are shadowed by local\n+\t\t declarations.  */\n+\t      if (objc_interface_decl)\n+\t\t{\n+\t\t  token->value = objc_interface_decl;\n+\t\t  token->id_kind = C_ID_CLASSNAME;\n+\t\t}\n+\t    }\n+\t}\n+    }\n+}\n+\n /* Parse an if statement (C90 6.6.4, C99 6.8.4).\n \n    if-statement:\n@@ -5523,6 +5560,7 @@ c_parser_if_statement (c_parser *parser, bool *if_p, vec<tree> *chain)\n   if (flag_cilkplus && contains_array_notation_expr (if_stmt))\n     if_stmt = fix_conditional_array_notations (if_stmt);\n   add_stmt (if_stmt);\n+  c_parser_maybe_reclassify_token (parser);\n }\n \n /* Parse a switch statement (C90 6.6.4, C99 6.8.4).\n@@ -5578,6 +5616,7 @@ c_parser_switch_statement (c_parser *parser)\n     }\n   c_break_label = save_break;\n   add_stmt (c_end_compound_stmt (switch_loc, block, flag_isoc99));\n+  c_parser_maybe_reclassify_token (parser);\n }\n \n /* Parse a while statement (C90 6.6.5, C99 6.8.5).\n@@ -5620,6 +5659,7 @@ c_parser_while_statement (c_parser *parser, bool ivdep, bool *if_p)\n   body = c_parser_c99_block_statement (parser, if_p);\n   c_finish_loop (loc, cond, NULL, body, c_break_label, c_cont_label, true);\n   add_stmt (c_end_compound_stmt (loc, block, flag_isoc99));\n+  c_parser_maybe_reclassify_token (parser);\n \n   token_indent_info next_tinfo\n     = get_token_indent_info (c_parser_peek_token (parser));\n@@ -5916,38 +5956,7 @@ c_parser_for_statement (c_parser *parser, bool ivdep, bool *if_p)\n   else\n     c_finish_loop (loc, cond, incr, body, c_break_label, c_cont_label, true);\n   add_stmt (c_end_compound_stmt (loc, block, flag_isoc99 || c_dialect_objc ()));\n-\n-  /* We might need to reclassify any previously-lexed identifier, e.g.\n-     when we've left a for loop with an if-statement without else in the\n-     body - we might have used a wrong scope for the token.  See PR67784.  */\n-  if (c_parser_next_token_is (parser, CPP_NAME))\n-    {\n-      c_token *token = c_parser_peek_token (parser);\n-\n-      if (token->id_kind != C_ID_CLASSNAME)\n-\t{\n-\t  tree decl = lookup_name (token->value);\n-\n-\t  token->id_kind = C_ID_ID;\n-\t  if (decl)\n-\t    {\n-\t      if (TREE_CODE (decl) == TYPE_DECL)\n-\t\ttoken->id_kind = C_ID_TYPENAME;\n-\t    }\n-\t  else if (c_dialect_objc ())\n-\t    {\n-\t      tree objc_interface_decl = objc_is_class_name (token->value);\n-\t      /* Objective-C class names are in the same namespace as\n-\t\t variables and typedefs, and hence are shadowed by local\n-\t\t declarations.  */\n-\t      if (objc_interface_decl)\n-\t\t{\n-\t\t  token->value = objc_interface_decl;\n-\t\t  token->id_kind = C_ID_CLASSNAME;\n-\t\t}\n-\t    }\n-\t}\n-    }\n+  c_parser_maybe_reclassify_token (parser);\n \n   token_indent_info next_tinfo\n     = get_token_indent_info (c_parser_peek_token (parser));"}, {"sha": "c4be021d6f38d0169724477b418ddbf3cc13bb4e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2448a956be32d4e9c722ad6a215fbe4feff9318e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2448a956be32d4e9c722ad6a215fbe4feff9318e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2448a956be32d4e9c722ad6a215fbe4feff9318e", "patch": "@@ -1,3 +1,10 @@\n+2016-04-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/67784\n+\t* gcc.dg/pr67784-3.c: New test.\n+\t* gcc.dg/pr67784-4.c: New test.\n+\t* gcc.dg/pr67784-5.c: New test.\n+\n 2016-04-26  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* gcc.dg/fold-plusmult.c: Adjust."}, {"sha": "45e3c44b26625c45a4b585682c2ebbc008c22547", "filename": "gcc/testsuite/gcc.dg/pr67784-3.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2448a956be32d4e9c722ad6a215fbe4feff9318e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67784-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2448a956be32d4e9c722ad6a215fbe4feff9318e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67784-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67784-3.c?ref=2448a956be32d4e9c722ad6a215fbe4feff9318e", "patch": "@@ -0,0 +1,50 @@\n+/* PR c/67784 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+typedef int T;\n+\n+void\n+fn1 (void)\n+{\n+  if (sizeof (enum { T }) == 0)\n+    ;\n+  T x;\n+}\n+\n+void\n+fn2 (void)\n+{\n+  int i = 0;\n+  if (sizeof (enum { T }) == 0)\n+    i++;\n+  T x;\n+}\n+\n+void\n+fn3 (void)\n+{\n+  if (sizeof (enum { T }) == 0)\n+    {\n+    }\n+  T x;\n+}\n+\n+void\n+fn4 (void)\n+{\n+  if (sizeof (enum { T }) == 0)\n+L:\n+    ;\n+  T x;\n+}\n+\n+void\n+fn5 (void)\n+{\n+  if (sizeof (enum { T }) == 0)\n+    ;\n+  else\n+    ;\n+  T x;\n+}"}, {"sha": "81a43fddd11e536cc9e10acbf2f64772e90ae94b", "filename": "gcc/testsuite/gcc.dg/pr67784-4.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2448a956be32d4e9c722ad6a215fbe4feff9318e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67784-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2448a956be32d4e9c722ad6a215fbe4feff9318e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67784-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67784-4.c?ref=2448a956be32d4e9c722ad6a215fbe4feff9318e", "patch": "@@ -0,0 +1,55 @@\n+/* PR c/67784 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+typedef int T;\n+\n+void\n+fn1 (void)\n+{\n+  switch (sizeof (enum { T }))\n+    if (1)\n+      ;\n+  T x;\n+}\n+\n+void\n+fn2 (void)\n+{\n+  int i = 0;\n+  switch (sizeof (enum { T }))\n+    if (1)\n+      i++;\n+  T x;\n+}\n+\n+void\n+fn3 (void)\n+{\n+  switch (sizeof (enum { T }))\n+    if (1)\n+      {\n+      }\n+  T x;\n+}\n+\n+void\n+fn4 (void)\n+{\n+  switch (sizeof (enum { T }))\n+    if (1)\n+L:\n+      ;\n+  T x;\n+}\n+\n+void\n+fn5 (void)\n+{\n+  switch (sizeof (enum { T }))\n+    if (1)\n+      ;\n+    else\n+      ;\n+  T x;\n+}"}, {"sha": "0934eceeca696b9fec436513728a4842c305dc36", "filename": "gcc/testsuite/gcc.dg/pr67784-5.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2448a956be32d4e9c722ad6a215fbe4feff9318e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67784-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2448a956be32d4e9c722ad6a215fbe4feff9318e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67784-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr67784-5.c?ref=2448a956be32d4e9c722ad6a215fbe4feff9318e", "patch": "@@ -0,0 +1,55 @@\n+/* PR c/67784 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+typedef int T;\n+\n+void\n+fn1 (void)\n+{\n+  while (sizeof (enum { T }))\n+    if (1)\n+      ;\n+  T x;\n+}\n+\n+void\n+fn2 (void)\n+{\n+  int i = 0;\n+  while (sizeof (enum { T }))\n+    if (1)\n+      i++;\n+  T x;\n+}\n+\n+void\n+fn3 (void)\n+{\n+  while (sizeof (enum { T }))\n+    if (1)\n+      {\n+      }\n+  T x;\n+}\n+\n+void\n+fn4 (void)\n+{\n+  while (sizeof (enum { T }))\n+    if (1)\n+L:\n+      ;\n+  T x;\n+}\n+\n+void\n+fn5 (void)\n+{\n+  while (sizeof (enum { T }))\n+    if (1)\n+      ;\n+    else\n+      ;\n+  T x;\n+}"}]}