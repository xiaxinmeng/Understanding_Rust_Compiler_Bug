{"sha": "cf3791ae4c9d51be572563af5d5cf427d232d5df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YzNzkxYWU0YzlkNTFiZTU3MjU2M2FmNWQ1Y2Y0MjdkMjMyZDVkZg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-07-27T12:31:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-07-27T12:31:06Z"}, "message": "invoke.texi (min-virtual-mappings, [...]): Remove param documentation.\n\n2012-07-27  Richard Guenther  <rguenther@suse.de>\n\n\t* doc/invoke.texi (min-virtual-mappings, virtual-mappings-ratio):\n\tRemove param documentation.\n\t* params.def (PARAM_MIN_VIRTUAL_MAPPINGS,\n\tPARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO): Remove.\n\t* tree-flow.h (mark_set_for_renaming): Remove.\n\t* tree-into-ssa.c (struct update_ssa_stats_d): Remove.\n\t(add_new_name_mapping): Remove bookkeeping code.\n\t(dump_update_ssa): Remove stats dumping code.\n\t(init_update_ssa): Remove stats allocation code.\n\t(delete_update_ssa): Remove stats freeing code.\n\t(mark_set_for_renaming): Remove.\n\t(switch_virtuals_to_full_rewrite_p): Likewise.\n\t(switch_virtuals_to_full_rewrite): Likewise.\n\t(update_ssa): Do not call switch_virtuals_to_full_rewrite.\n\nFrom-SVN: r189911", "tree": {"sha": "6d9219d1baf1d8772de95d49d9046972880f64e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d9219d1baf1d8772de95d49d9046972880f64e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf3791ae4c9d51be572563af5d5cf427d232d5df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf3791ae4c9d51be572563af5d5cf427d232d5df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf3791ae4c9d51be572563af5d5cf427d232d5df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf3791ae4c9d51be572563af5d5cf427d232d5df/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "047ae0983ac06b300a79b980b2bac154bfac8fb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/047ae0983ac06b300a79b980b2bac154bfac8fb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/047ae0983ac06b300a79b980b2bac154bfac8fb6"}], "stats": {"total": 195, "additions": 17, "deletions": 178}, "files": [{"sha": "4ef15abfedc42a8400a366aa1fc8bf97639c40c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3791ae4c9d51be572563af5d5cf427d232d5df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3791ae4c9d51be572563af5d5cf427d232d5df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf3791ae4c9d51be572563af5d5cf427d232d5df", "patch": "@@ -1,3 +1,20 @@\n+2012-07-27  Richard Guenther  <rguenther@suse.de>\n+\n+\t* doc/invoke.texi (min-virtual-mappings, virtual-mappings-ratio):\n+\tRemove param documentation.\n+\t* params.def (PARAM_MIN_VIRTUAL_MAPPINGS,\n+\tPARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO): Remove.\n+\t* tree-flow.h (mark_set_for_renaming): Remove.\n+\t* tree-into-ssa.c (struct update_ssa_stats_d): Remove.\n+\t(add_new_name_mapping): Remove bookkeeping code.\n+\t(dump_update_ssa): Remove stats dumping code.\n+\t(init_update_ssa): Remove stats allocation code.\n+\t(delete_update_ssa): Remove stats freeing code.\n+\t(mark_set_for_renaming): Remove.\n+\t(switch_virtuals_to_full_rewrite_p): Likewise.\n+\t(switch_virtuals_to_full_rewrite): Likewise.\n+\t(update_ssa): Do not call switch_virtuals_to_full_rewrite.\n+\n 2012-07-27  Marek Polacek  <polacek@redhat.com>\n \n \t* cgraphunit.c: Rename varpool_finalize_variable to"}, {"sha": "bdbc2a49ad90d81dc2ba350984acd7e0de70f502", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3791ae4c9d51be572563af5d5cf427d232d5df/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3791ae4c9d51be572563af5d5cf427d232d5df/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=cf3791ae4c9d51be572563af5d5cf427d232d5df", "patch": "@@ -9155,18 +9155,6 @@ Small integer constants can use a shared data structure, reducing the\n compiler's memory usage and increasing its speed.  This sets the maximum\n value of a shared integer constant.  The default value is 256.\n \n-@item min-virtual-mappings\n-Specifies the minimum number of virtual mappings in the incremental\n-SSA updater that should be registered to trigger the virtual mappings\n-heuristic defined by virtual-mappings-ratio.  The default value is\n-100.\n-\n-@item virtual-mappings-ratio\n-If the number of virtual mappings is virtual-mappings-ratio bigger\n-than the number of virtual symbols to be updated, then the incremental\n-SSA updater switches to a full update for those symbols.  The default\n-ratio is 3.\n-\n @item ssp-buffer-size\n The minimum size of buffers (i.e.@: arrays) that receive stack smashing\n protection when @option{-fstack-protection} is used."}, {"sha": "efa686061e7684a1282b544e2b39f3a5dd2277b3", "filename": "gcc/params.def", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3791ae4c9d51be572563af5d5cf427d232d5df/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3791ae4c9d51be572563af5d5cf427d232d5df/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=cf3791ae4c9d51be572563af5d5cf427d232d5df", "patch": "@@ -644,30 +644,6 @@ DEFPARAM (PARAM_INTEGER_SHARE_LIMIT,\n \t  \"The upper bound for sharing integer constants\",\n \t  256, 2, 2)\n \n-/* Incremental SSA updates for virtual operands may be very slow if\n-   there is a large number of mappings to process.  In those cases, it\n-   is faster to rewrite the virtual symbols from scratch as if they\n-   had been recently introduced.  This heuristic cannot be applied to\n-   SSA mappings for real SSA names, only symbols kept in FUD chains.\n-\n-   PARAM_MIN_VIRTUAL_MAPPINGS specifies the minimum number of virtual\n-   mappings that should be registered to trigger the heuristic.\n-\n-   PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO specifies the ratio between\n-   mappings and symbols.  If the number of virtual mappings is\n-   PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO bigger than the number of\n-   virtual symbols to be updated, then the updater switches to a full\n-   update for those symbols.  */\n-DEFPARAM (PARAM_MIN_VIRTUAL_MAPPINGS,\n-\t  \"min-virtual-mappings\",\n-\t  \"Minimum number of virtual mappings to consider switching to full virtual renames\",\n-\t  100, 0, 0)\n-\n-DEFPARAM (PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO,\n-\t  \"virtual-mappings-ratio\",\n-\t  \"Ratio between virtual mappings and virtual symbols to do full virtual renames\",\n-\t  3, 0, 0)\n-\n DEFPARAM (PARAM_SSP_BUFFER_SIZE,\n \t  \"ssp-buffer-size\",\n \t  \"The lower bound for a buffer to be considered for stack smashing protection\","}, {"sha": "75f91871cf0eb142229de3d2bc21ad1214a7d00c", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3791ae4c9d51be572563af5d5cf427d232d5df/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3791ae4c9d51be572563af5d5cf427d232d5df/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=cf3791ae4c9d51be572563af5d5cf427d232d5df", "patch": "@@ -575,7 +575,6 @@ bool name_registered_for_update_p (tree);\n void release_ssa_name_after_update_ssa (tree);\n void compute_global_livein (bitmap, bitmap);\n void mark_sym_for_renaming (tree);\n-void mark_set_for_renaming (bitmap);\n bool symbol_marked_for_renaming (tree);\n tree get_current_def (tree);\n void set_current_def (tree, tree);"}, {"sha": "335d9c0ad8216a3d4500c1f1b13838a3db2d2340", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 0, "deletions": 141, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3791ae4c9d51be572563af5d5cf427d232d5df/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3791ae4c9d51be572563af5d5cf427d232d5df/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=cf3791ae4c9d51be572563af5d5cf427d232d5df", "patch": "@@ -140,21 +140,6 @@ static htab_t repl_tbl;\n    NULL if they need to be initialized by register_new_name_mapping.  */\n static struct function *update_ssa_initialized_fn = NULL;\n \n-/* Statistics kept by update_ssa to use in the virtual mapping\n-   heuristic.  If the number of virtual mappings is beyond certain\n-   threshold, the updater will switch from using the mappings into\n-   renaming the virtual symbols from scratch.  In some cases, the\n-   large number of name mappings for virtual names causes significant\n-   slowdowns in the PHI insertion code.  */\n-struct update_ssa_stats_d\n-{\n-  unsigned num_virtual_mappings;\n-  unsigned num_total_mappings;\n-  bitmap virtual_symbols;\n-  unsigned num_virtual_symbols;\n-};\n-static struct update_ssa_stats_d update_ssa_stats;\n-\n /* Global data to attach to the main dominator walk structure.  */\n struct mark_def_sites_global_data\n {\n@@ -662,26 +647,6 @@ add_new_name_mapping (tree new_tree, tree old)\n   /* OLD and NEW_TREE must be different SSA names for the same symbol.  */\n   gcc_assert (new_tree != old && SSA_NAME_VAR (new_tree) == SSA_NAME_VAR (old));\n \n-  /* If this mapping is for virtual names, we will need to update\n-     virtual operands.  If this is a mapping for .MEM, then we gather\n-     the symbols associated with each name.  */\n-  if (!is_gimple_reg (new_tree))\n-    {\n-      tree sym;\n-\n-      update_ssa_stats.num_virtual_mappings++;\n-      update_ssa_stats.num_virtual_symbols++;\n-\n-      /* Keep counts of virtual mappings and symbols to use in the\n-\t virtual mapping heuristic.  If we have large numbers of\n-\t virtual mappings for a relatively low number of symbols, it\n-\t will make more sense to rename the symbols from scratch.\n-\t Otherwise, the insertion of PHI nodes for each of the old\n-\t names in these mappings will be very slow.  */\n-      sym = SSA_NAME_VAR (new_tree);\n-      bitmap_set_bit (update_ssa_stats.virtual_symbols, DECL_UID (sym));\n-    }\n-\n   /* We may need to grow NEW_SSA_NAMES and OLD_SSA_NAMES because our\n      caller may have created new names since the set was created.  */\n   if (new_ssa_names->n_bits <= num_ssa_names - 1)\n@@ -704,9 +669,6 @@ add_new_name_mapping (tree new_tree, tree old)\n   SET_BIT (new_ssa_names, SSA_NAME_VERSION (new_tree));\n   SET_BIT (old_ssa_names, SSA_NAME_VERSION (old));\n \n-  /* Update mapping counter to use in the virtual mapping heuristic.  */\n-  update_ssa_stats.num_total_mappings++;\n-\n   timevar_pop (TV_TREE_SSA_INCREMENTAL);\n }\n \n@@ -2827,18 +2789,6 @@ dump_update_ssa (FILE *file)\n \n       EXECUTE_IF_SET_IN_SBITMAP (new_ssa_names, 0, i, sbi)\n \tdump_names_replaced_by (file, ssa_name (i));\n-\n-      fprintf (file, \"\\n\");\n-      fprintf (file, \"Number of virtual NEW -> OLD mappings: %7u\\n\",\n-\t       update_ssa_stats.num_virtual_mappings);\n-      fprintf (file, \"Number of real NEW -> OLD mappings:    %7u\\n\",\n-\t       update_ssa_stats.num_total_mappings\n-\t       - update_ssa_stats.num_virtual_mappings);\n-      fprintf (file, \"Number of total NEW -> OLD mappings:   %7u\\n\",\n-\t       update_ssa_stats.num_total_mappings);\n-\n-      fprintf (file, \"\\nNumber of virtual symbols: %u\\n\",\n-\t       update_ssa_stats.num_virtual_symbols);\n     }\n \n   if (!bitmap_empty_p (SYMS_TO_RENAME (cfun)))\n@@ -2886,8 +2836,6 @@ init_update_ssa (struct function *fn)\n \n   repl_tbl = htab_create (20, repl_map_hash, repl_map_eq, repl_map_free);\n   names_to_release = NULL;\n-  memset (&update_ssa_stats, 0, sizeof (update_ssa_stats));\n-  update_ssa_stats.virtual_symbols = BITMAP_ALLOC (NULL);\n   update_ssa_initialized_fn = fn;\n }\n \n@@ -2910,7 +2858,6 @@ delete_update_ssa (void)\n   repl_tbl = NULL;\n \n   bitmap_clear (SYMS_TO_RENAME (update_ssa_initialized_fn));\n-  BITMAP_FREE (update_ssa_stats.virtual_symbols);\n \n   if (names_to_release)\n     {\n@@ -2994,22 +2941,6 @@ mark_sym_for_renaming (tree sym)\n }\n \n \n-/* Register all the symbols in SET to be renamed by update_ssa.  */\n-\n-void\n-mark_set_for_renaming (bitmap set)\n-{\n-  bitmap_iterator bi;\n-  unsigned i;\n-\n-  if (set == NULL || bitmap_empty_p (set))\n-    return;\n-\n-  EXECUTE_IF_SET_IN_BITMAP (set, 0, i, bi)\n-    mark_sym_for_renaming (referenced_var (i));\n-}\n-\n-\n /* Return true if there is any work to be done by update_ssa\n    for function FN.  */\n \n@@ -3171,73 +3102,6 @@ insert_updated_phi_nodes_for (tree var, bitmap_head *dfs, bitmap blocks,\n }\n \n \n-/* Heuristic to determine whether SSA name mappings for virtual names\n-   should be discarded and their symbols rewritten from scratch.  When\n-   there is a large number of mappings for virtual names, the\n-   insertion of PHI nodes for the old names in the mappings takes\n-   considerable more time than if we inserted PHI nodes for the\n-   symbols instead.\n-\n-   Currently the heuristic takes these stats into account:\n-\n-   \t- Number of mappings for virtual SSA names.\n-\t- Number of distinct virtual symbols involved in those mappings.\n-\n-   If the number of virtual mappings is much larger than the number of\n-   virtual symbols, then it will be faster to compute PHI insertion\n-   spots for the symbols.  Even if this involves traversing the whole\n-   CFG, which is what happens when symbols are renamed from scratch.  */\n-\n-static bool\n-switch_virtuals_to_full_rewrite_p (void)\n-{\n-  if (update_ssa_stats.num_virtual_mappings < (unsigned) MIN_VIRTUAL_MAPPINGS)\n-    return false;\n-\n-  if (update_ssa_stats.num_virtual_mappings\n-      > (unsigned) VIRTUAL_MAPPINGS_TO_SYMS_RATIO\n-        * update_ssa_stats.num_virtual_symbols)\n-    return true;\n-\n-  return false;\n-}\n-\n-\n-/* Remove every virtual mapping and mark all the affected virtual\n-   symbols for renaming.  */\n-\n-static void\n-switch_virtuals_to_full_rewrite (void)\n-{\n-  unsigned i = 0;\n-  sbitmap_iterator sbi;\n-\n-  if (dump_file)\n-    {\n-      fprintf (dump_file, \"\\nEnabled virtual name mapping heuristic.\\n\");\n-      fprintf (dump_file, \"\\tNumber of virtual mappings:       %7u\\n\",\n-\t       update_ssa_stats.num_virtual_mappings);\n-      fprintf (dump_file, \"\\tNumber of unique virtual symbols: %7u\\n\",\n-\t       update_ssa_stats.num_virtual_symbols);\n-      fprintf (dump_file, \"Updating FUD-chains from top of CFG will be \"\n-\t                  \"faster than processing\\nthe name mappings.\\n\\n\");\n-    }\n-\n-  /* Remove all virtual names from NEW_SSA_NAMES and OLD_SSA_NAMES.\n-     Note that it is not really necessary to remove the mappings from\n-     REPL_TBL, that would only waste time.  */\n-  EXECUTE_IF_SET_IN_SBITMAP (new_ssa_names, 0, i, sbi)\n-    if (!is_gimple_reg (ssa_name (i)))\n-      RESET_BIT (new_ssa_names, i);\n-\n-  EXECUTE_IF_SET_IN_SBITMAP (old_ssa_names, 0, i, sbi)\n-    if (!is_gimple_reg (ssa_name (i)))\n-      RESET_BIT (old_ssa_names, i);\n-\n-  mark_set_for_renaming (update_ssa_stats.virtual_symbols);\n-}\n-\n-\n /* Given a set of newly created SSA names (NEW_SSA_NAMES) and a set of\n    existing SSA names (OLD_SSA_NAMES), update the SSA form so that:\n \n@@ -3366,11 +3230,6 @@ update_ssa (unsigned update_flags)\n       def_blocks = NULL;\n     }\n \n-  /* Heuristic to avoid massive slow downs when the replacement\n-     mappings include lots of virtual names.  */\n-  if (insert_phi_p && switch_virtuals_to_full_rewrite_p ())\n-    switch_virtuals_to_full_rewrite ();\n-\n   /* If there are names defined in the replacement table, prepare\n      definition and use sites for all the names in NEW_SSA_NAMES and\n      OLD_SSA_NAMES.  */"}]}