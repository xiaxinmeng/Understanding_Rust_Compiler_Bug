{"sha": "49638674a46e58ff8bfb41c5346386dca9569375", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk2Mzg2NzRhNDZlNThmZjhiZmI0MWM1MzQ2Mzg2ZGNhOTU2OTM3NQ==", "commit": {"author": {"name": "Mike Crowe", "email": "mac@mcrowe.com", "date": "2019-12-02T16:22:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-12-02T16:22:53Z"}, "message": "libstdc++: Improve tests for try_lock_until members of mutex types\n\n2019-12-02  Mike Crowe  <mac@mcrowe.com>\n\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/3.cc:\n\tNew test. Ensure that timed_mutex::try_lock_until actually times out\n\tafter the specified time when using both system_clock and\n\tsteady_clock.\n\t* testsuite/30_threads/timed_mutex/try_lock_until/3.cc: New test.\n\tLikewise but for recursive_timed_mutex.\n\t* testsuite/30_threads/timed_mutex/try_lock_until/57641.cc: Template\n\ttest functions and use them to test both steady_clock and system_clock.\n\t* testsuite/30_threads/unique_lock/locking/4.cc: Likewise. Wrap call\n\tto timed_mutex::try_lock_until in VERIFY macro to check its return\n\tvalue.\n\nFrom-SVN: r278900", "tree": {"sha": "364e2e5c6ab134ac925cebc4c6d9f20dbd606e0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/364e2e5c6ab134ac925cebc4c6d9f20dbd606e0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49638674a46e58ff8bfb41c5346386dca9569375", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49638674a46e58ff8bfb41c5346386dca9569375", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49638674a46e58ff8bfb41c5346386dca9569375", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49638674a46e58ff8bfb41c5346386dca9569375/comments", "author": {"login": "mikecrowe", "id": 93615, "node_id": "MDQ6VXNlcjkzNjE1", "avatar_url": "https://avatars.githubusercontent.com/u/93615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikecrowe", "html_url": "https://github.com/mikecrowe", "followers_url": "https://api.github.com/users/mikecrowe/followers", "following_url": "https://api.github.com/users/mikecrowe/following{/other_user}", "gists_url": "https://api.github.com/users/mikecrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikecrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikecrowe/subscriptions", "organizations_url": "https://api.github.com/users/mikecrowe/orgs", "repos_url": "https://api.github.com/users/mikecrowe/repos", "events_url": "https://api.github.com/users/mikecrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/mikecrowe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74fee04253a5007213634150b4505cd6fcab9910", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74fee04253a5007213634150b4505cd6fcab9910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74fee04253a5007213634150b4505cd6fcab9910"}], "stats": {"total": 194, "additions": 185, "deletions": 9}, "files": [{"sha": "24a4a35d1731fb40177904f90d0e83d5d661d1f7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49638674a46e58ff8bfb41c5346386dca9569375/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49638674a46e58ff8bfb41c5346386dca9569375/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=49638674a46e58ff8bfb41c5346386dca9569375", "patch": "@@ -1,3 +1,17 @@\n+2019-12-02  Mike Crowe  <mac@mcrowe.com>\n+\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/3.cc:\n+\tNew test. Ensure that timed_mutex::try_lock_until actually times out\n+\tafter the specified time when using both system_clock and\n+\tsteady_clock.\n+\t* testsuite/30_threads/timed_mutex/try_lock_until/3.cc: New test.\n+\tLikewise but for recursive_timed_mutex.\n+\t* testsuite/30_threads/timed_mutex/try_lock_until/57641.cc: Template\n+\ttest functions and use them to test both steady_clock and system_clock.\n+\t* testsuite/30_threads/unique_lock/locking/4.cc: Likewise. Wrap call\n+\tto timed_mutex::try_lock_until in VERIFY macro to check its return\n+\tvalue.\n+\n 2019-11-30  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* acinclude.m4 (GLIBCXX_ENABLE_FILESYSTEM_TS): Enable by default for"}, {"sha": "162d0f8542b6a2dcfff315434756600057c5a932", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock_until/3.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49638674a46e58ff8bfb41c5346386dca9569375/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49638674a46e58ff8bfb41c5346386dca9569375/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F3.cc?ref=49638674a46e58ff8bfb41c5346386dca9569375", "patch": "@@ -0,0 +1,74 @@\n+// { dg-do run }\n+// { dg-options \"-pthread\"  }\n+// { dg-require-effective-target c++14 }\n+// { dg-require-effective-target pthread }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <mutex>\n+#include <thread>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+template <typename clock_type>\n+void test()\n+{\n+  typedef std::recursive_timed_mutex mutex_type;\n+\n+  try\n+    {\n+      mutex_type m;\n+      m.lock();\n+      bool b;\n+\n+      std::thread t([&] {\n+\ttry\n+\t  {\n+\t    using namespace std::chrono;\n+\t    const auto timeout = 100ms;\n+\t    const auto start = clock_type::now();\n+\t    const auto b = m.try_lock_until(start + timeout);\n+\t    const auto t = clock_type::now() - start;\n+\t    VERIFY( !b );\n+\t    VERIFY( t >= timeout );\n+\t  }\n+\tcatch (const std::system_error& e)\n+\t  {\n+\t    VERIFY( false );\n+\t  }\n+\t});\n+      t.join();\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+int main()\n+{\n+  test<std::chrono::system_clock>();\n+  test<std::chrono::steady_clock>();\n+}"}, {"sha": "f0bf90f9b9e703363ec0f2ebe6e93dd19d698491", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock_until/3.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49638674a46e58ff8bfb41c5346386dca9569375/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49638674a46e58ff8bfb41c5346386dca9569375/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F3.cc?ref=49638674a46e58ff8bfb41c5346386dca9569375", "patch": "@@ -0,0 +1,74 @@\n+// { dg-do run }\n+// { dg-options \"-pthread\"  }\n+// { dg-require-effective-target c++14 }\n+// { dg-require-effective-target pthread }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <mutex>\n+#include <thread>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+template <typename clock_type>\n+void test()\n+{\n+  typedef std::timed_mutex mutex_type;\n+\n+  try\n+    {\n+      mutex_type m;\n+      m.lock();\n+      bool b;\n+\n+      std::thread t([&] {\n+\ttry\n+\t  {\n+\t    using namespace std::chrono;\n+\t    const auto timeout = 100ms;\n+\t    const auto start = clock_type::now();\n+\t    const auto b = m.try_lock_until(start + timeout);\n+\t    const auto t = clock_type::now() - start;\n+\t    VERIFY( !b );\n+\t    VERIFY( t >= timeout );\n+\t  }\n+\tcatch (const std::system_error& e)\n+\t  {\n+\t    VERIFY( false );\n+\t  }\n+\t});\n+      t.join();\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+int main()\n+{\n+  test<std::chrono::system_clock>();\n+  test<std::chrono::steady_clock>();\n+}"}, {"sha": "6355d8f327a8ae4bb06441e1ba0e861a04b8431e", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock_until/57641.cc", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49638674a46e58ff8bfb41c5346386dca9569375/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F57641.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49638674a46e58ff8bfb41c5346386dca9569375/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F57641.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F57641.cc?ref=49638674a46e58ff8bfb41c5346386dca9569375", "patch": "@@ -49,18 +49,26 @@ struct clock\n std::timed_mutex mx;\n bool locked = false;\n \n+template <typename ClockType>\n void f()\n {\n-  locked = mx.try_lock_until(clock::now() + C::milliseconds(1));\n+  locked = mx.try_lock_until(ClockType::now() + C::milliseconds(1));\n }\n \n-int main()\n+template <typename ClockType>\n+void test()\n {\n   std::lock_guard<std::timed_mutex> l(mx);\n-  auto start = C::system_clock::now();\n-  std::thread t(f);\n+  auto start = ClockType::now();\n+  std::thread t(f<ClockType>);\n   t.join();\n-  auto stop = C::system_clock::now();\n+  auto stop = ClockType::now();\n   VERIFY( (stop - start) < C::seconds(9) );\n   VERIFY( !locked );\n }\n+\n+int main()\n+{\n+  test<C::system_clock>();\n+  test<C::steady_clock>();\n+}"}, {"sha": "2c46a8678222091f599b20572aea745f3fcf47bf", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/locking/4.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49638674a46e58ff8bfb41c5346386dca9569375/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49638674a46e58ff8bfb41c5346386dca9569375/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F4.cc?ref=49638674a46e58ff8bfb41c5346386dca9569375", "patch": "@@ -26,21 +26,22 @@\n #include <system_error>\n #include <testsuite_hooks.h>\n \n-int main()\n+template <typename clock_type>\n+void test()\n {\n   typedef std::timed_mutex mutex_type;\n   typedef std::unique_lock<mutex_type> lock_type;\n-  typedef std::chrono::system_clock clock_type;\n \n   try \n     {\n       mutex_type m;\n       lock_type l(m, std::defer_lock);\n-      clock_type::time_point t = clock_type::now() + std::chrono::seconds(1);\n+      const typename clock_type::time_point t = clock_type::now()\n+\t+ std::chrono::seconds(1);\n \n       try\n \t{\n-\t  l.try_lock_until(t);\n+\t  VERIFY( l.try_lock_until(t) );\n \t}\n       catch(const std::system_error&)\n \t{\n@@ -61,6 +62,11 @@ int main()\n     {\n       VERIFY( false );\n     }\n+}\n \n+int main()\n+{\n+  test<std::chrono::system_clock>();\n+  test<std::chrono::steady_clock>();\n   return 0;\n }"}]}