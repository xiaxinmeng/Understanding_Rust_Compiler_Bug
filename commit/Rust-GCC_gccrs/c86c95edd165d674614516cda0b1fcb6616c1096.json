{"sha": "c86c95edd165d674614516cda0b1fcb6616c1096", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg2Yzk1ZWRkMTY1ZDY3NDYxNDUxNmNkYTBiMWZjYjY2MTZjMTA5Ng==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-08-09T19:53:42Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-08-09T20:24:05Z"}, "message": "Ensure toupper and tolower follow the expected pattern.\n\nIf the parameter is not compatible with the LHS, assume this is not really a\nbuiltin function to avoid a trap.\n\n\tgcc/\n\tPR tree-optimization/101741\n\t* gimple-range-fold.cc (fold_using_range::range_of_builtin_call): Check\n\ttype of parameter for toupper/tolower.\n\n\tgcc/testsuite/\n\t* gcc.dg/pr101741.c: New.", "tree": {"sha": "6913e1adb20c43817eff84403208ff1bf0ed58e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6913e1adb20c43817eff84403208ff1bf0ed58e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c86c95edd165d674614516cda0b1fcb6616c1096", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c86c95edd165d674614516cda0b1fcb6616c1096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c86c95edd165d674614516cda0b1fcb6616c1096", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c86c95edd165d674614516cda0b1fcb6616c1096/comments", "author": null, "committer": null, "parents": [{"sha": "f5a2d78072fc161e8ca3117126030041f1503c3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a2d78072fc161e8ca3117126030041f1503c3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5a2d78072fc161e8ca3117126030041f1503c3f"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "d3e3e14ff64fe94edcefa2c55d4bcce6915e9eac", "filename": "gcc/gimple-range-fold.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c86c95edd165d674614516cda0b1fcb6616c1096/gcc%2Fgimple-range-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c86c95edd165d674614516cda0b1fcb6616c1096/gcc%2Fgimple-range-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-fold.cc?ref=c86c95edd165d674614516cda0b1fcb6616c1096", "patch": "@@ -894,6 +894,9 @@ fold_using_range::range_of_builtin_call (irange &r, gcall *call,\n     case CFN_BUILT_IN_TOUPPER:\n       {\n \targ = gimple_call_arg (call, 0);\n+\t// If the argument isn't compatible with the LHS, do nothing.\n+\tif (!range_compatible_p (type, TREE_TYPE (arg)))\n+\t  return false;\n \tif (!src.get_operand (r, arg))\n \t  return false;\n \n@@ -913,6 +916,9 @@ fold_using_range::range_of_builtin_call (irange &r, gcall *call,\n      case CFN_BUILT_IN_TOLOWER:\n       {\n \targ = gimple_call_arg (call, 0);\n+\t// If the argument isn't compatible with the LHS, do nothing.\n+\tif (!range_compatible_p (type, TREE_TYPE (arg)))\n+\t  return false;\n \tif (!src.get_operand (r, arg))\n \t  return false;\n "}, {"sha": "6587dca77d588e8101552a8a43ac3e9ede0e2725", "filename": "gcc/testsuite/gcc.dg/pr101741.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c86c95edd165d674614516cda0b1fcb6616c1096/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101741.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c86c95edd165d674614516cda0b1fcb6616c1096/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101741.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101741.c?ref=c86c95edd165d674614516cda0b1fcb6616c1096", "patch": "@@ -0,0 +1,16 @@\n+/* PR tree-optimization/101741 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 \" } */\n+\n+int\n+foo (void);\n+\n+unsigned int\n+toupper (int c)\n+{\n+  c = foo ();\n+  while (c)\n+    c = toupper (c);\n+\n+  return c;\n+}"}]}