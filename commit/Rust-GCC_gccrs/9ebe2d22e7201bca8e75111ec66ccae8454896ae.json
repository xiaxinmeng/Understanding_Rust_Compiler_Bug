{"sha": "9ebe2d22e7201bca8e75111ec66ccae8454896ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWViZTJkMjJlNzIwMWJjYThlNzUxMTFlYzY2Y2NhZTg0NTQ4OTZhZQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-01-15T08:16:17Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-01-15T08:16:17Z"}, "message": "re PR fortran/28172 ([4.2 and 4.1 only] alternate return in contained procedure segfaults)\n\n2007-01-15  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/28172\n\t* trans-stmt.c (gfc_trans_call): If it does not have one, get\n\ta backend_decl for an alternate return.\n\n\tPR fortran/29389\n\t* resolve.c (pure_function): Statement functions are pure. Note\n\tthat this will have to recurse to comply fully with F95.\n\n\tPR fortran/29712\n\t* resolve.c (resolve_function): Only a reference to the final\n\tdimension of an assumed size array is an error in an inquiry\n\tfunction.\n\n\tPR fortran/30283\n\t* resolve.c (resolve_function): Make sure that the function\n\texpression has a type.\n\n2007-01-15  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/28172\n\t* gfortran.dg/altreturn_4.f90: New test.\n\n\tPR fortran/29389\n\t* gfortran.dg/stfunc_4.f90: New test.\n\n\tPR fortran/29712\n\t* gfortran.dg/bound_2.f90: Reinstate commented out line.\n\t* gfortran.dg/initialization_1.f90: Change warning.\n\n\tPR fortran/30283\n\t* gfortran.dg/specification_type_resolution_2.f90: New test.\n\nFrom-SVN: r120790", "tree": {"sha": "a550028d50f83d692906ac5ccf4710e018f70359", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a550028d50f83d692906ac5ccf4710e018f70359"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ebe2d22e7201bca8e75111ec66ccae8454896ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ebe2d22e7201bca8e75111ec66ccae8454896ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ebe2d22e7201bca8e75111ec66ccae8454896ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ebe2d22e7201bca8e75111ec66ccae8454896ae/comments", "author": null, "committer": null, "parents": [{"sha": "32d6b8aef41aa68e506f2e66ca10b1fdafbb3aaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32d6b8aef41aa68e506f2e66ca10b1fdafbb3aaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32d6b8aef41aa68e506f2e66ca10b1fdafbb3aaf"}], "stats": {"total": 129, "additions": 124, "deletions": 5}, "files": [{"sha": "d88fa83046a2f603f4a043986e387cfa95df3427", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ebe2d22e7201bca8e75111ec66ccae8454896ae/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ebe2d22e7201bca8e75111ec66ccae8454896ae/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9ebe2d22e7201bca8e75111ec66ccae8454896ae", "patch": "@@ -1,3 +1,22 @@\n+2007-01-15  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/28172\n+\t* trans-stmt.c (gfc_trans_call): If it does not have one, get\n+\ta backend_decl for an alternate return.\n+\n+\tPR fortran/29389\n+\t* resolve.c (pure_function): Statement functions are pure. Note\n+\tthat this will have to recurse to comply fully with F95.\n+\n+\tPR fortran/29712\n+\t* resolve.c (resolve_function): Only a reference to the final\n+\tdimension of an assumed size array is an error in an inquiry\n+\tfunction.\n+\n+\tPR fortran/30283\n+\t* resolve.c (resolve_function): Make sure that the function\n+\texpression has a type.\n+\n 2007-01-14  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/30410"}, {"sha": "59adf8b82e470974bcfb58fa29ccf9d6293817e2", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ebe2d22e7201bca8e75111ec66ccae8454896ae/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ebe2d22e7201bca8e75111ec66ccae8454896ae/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=9ebe2d22e7201bca8e75111ec66ccae8454896ae", "patch": "@@ -1501,6 +1501,11 @@ pure_function (gfc_expr * e, const char **name)\n {\n   int pure;\n \n+  if (e->symtree != NULL\n+        && e->symtree->n.sym != NULL\n+        && e->symtree->n.sym->attr.proc == PROC_ST_FUNCTION)\n+    return 1;\n+\n   if (e->value.function.esym)\n     {\n       pure = gfc_pure (e->value.function.esym);\n@@ -1654,9 +1659,15 @@ resolve_function (gfc_expr * expr)\n \n       for (arg = expr->value.function.actual; arg; arg = arg->next)\n \t{\n-\t  if (inquiry && arg->next != NULL && arg->next->expr\n-\t\t&& arg->next->expr->expr_type != EXPR_CONSTANT)\n-\t    break;\n+\t  if (inquiry && arg->next != NULL && arg->next->expr)\n+\t    {\n+\t      if (arg->next->expr->expr_type != EXPR_CONSTANT)\n+\t\tbreak;\n+\n+\t      if ((int)mpz_get_si (arg->next->expr->value.integer)\n+\t\t\t< arg->expr->rank)\n+\t\tbreak;\n+\t    }\n \n \t  if (arg->expr != NULL\n \t\t&& arg->expr->rank > 0\n@@ -1723,6 +1734,17 @@ resolve_function (gfc_expr * expr)\n   if (t == SUCCESS)\n     find_noncopying_intrinsics (expr->value.function.esym,\n \t\t\t\texpr->value.function.actual);\n+\n+  /* Make sure that the expression has a typespec that works.  */\n+  if (expr->ts.type == BT_UNKNOWN)\n+    {\n+      if (expr->symtree->n.sym->result\n+\t    && expr->symtree->n.sym->result->ts.type != BT_UNKNOWN)\n+\texpr->ts = expr->symtree->n.sym->result->ts;\n+      else\n+\texpr->ts = expr->symtree->n.sym->result->ts;\n+    }\n+\n   return t;\n }\n "}, {"sha": "ed37272f4044fe9aa729d5f9b08bf02bebb806d0", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ebe2d22e7201bca8e75111ec66ccae8454896ae/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ebe2d22e7201bca8e75111ec66ccae8454896ae/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=9ebe2d22e7201bca8e75111ec66ccae8454896ae", "patch": "@@ -349,6 +349,8 @@ gfc_trans_call (gfc_code * code, bool dependency_check)\n \t  gcc_assert(select_code->op == EXEC_SELECT);\n \t  sym = select_code->expr->symtree->n.sym;\n \t  se.expr = convert (gfc_typenode_for_spec (&sym->ts), se.expr);\n+\t  if (sym->backend_decl == NULL)\n+\t    sym->backend_decl = gfc_get_symbol_decl (sym);\n \t  gfc_add_modify_expr (&se.pre, sym->backend_decl, se.expr);\n \t}\n       else"}, {"sha": "b8cf1a9c09d913c9d71a2ecc8e1debbba26ba1ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ebe2d22e7201bca8e75111ec66ccae8454896ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ebe2d22e7201bca8e75111ec66ccae8454896ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9ebe2d22e7201bca8e75111ec66ccae8454896ae", "patch": "@@ -1,3 +1,18 @@\n+2007-01-15  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/28172\n+\t* gfortran.dg/altreturn_4.f90: New test.\n+\n+\tPR fortran/29389\n+\t* gfortran.dg/stfunc_4.f90: New test.\n+\n+\tPR fortran/29712\n+\t* gfortran.dg/bound_2.f90: Reinstate commented out line.\n+\t* gfortran.dg/initialization_1.f90: Change warning.\n+\n+\tPR fortran/30283\n+\t* gfortran.dg/specification_type_resolution_2.f90: New test.\n+\n 2007-01-14  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/tree-prof/stringop-1.c: Update pattern for memcpy folding."}, {"sha": "409ea51be7e4ea60c1705d6ae66af6f91dbc4689", "filename": "gcc/testsuite/gfortran.dg/altreturn_4.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ebe2d22e7201bca8e75111ec66ccae8454896ae/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ebe2d22e7201bca8e75111ec66ccae8454896ae/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_4.f90?ref=9ebe2d22e7201bca8e75111ec66ccae8454896ae", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do compile }\n+! Tests the fix for PR28172, in which an ICE would result from\n+! the contained call with an alternate retrun.\n+\n+! Contributed by Tobias Schl\ufffdter <tobi@gcc.gnu.org>\n+\n+program blubb\n+  call otherini(*998)\n+  stop\n+998 stop\n+contains\n+ subroutine init\n+   call otherini(*999)\n+   return\n+999 stop\n+ end subroutine init\n+end program blubb"}, {"sha": "5c4026b54e28423efa2702eb4841335fc55463cf", "filename": "gcc/testsuite/gfortran.dg/bound_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ebe2d22e7201bca8e75111ec66ccae8454896ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fbound_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ebe2d22e7201bca8e75111ec66ccae8454896ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fbound_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbound_2.f90?ref=9ebe2d22e7201bca8e75111ec66ccae8454896ae", "patch": "@@ -194,7 +194,7 @@ end subroutine sub3\n   subroutine foo (x,n)\n     integer :: x(7,n,2,*), n\n \n-    !if (ubound(x,1) /= 7 .or. ubound(x,2) /= 4 .or. ubound(x,3) /= 2) call abort\n+    if (ubound(x,1) /= 7 .or. ubound(x,2) /= 4 .or. ubound(x,3) /= 2) call abort\n   end subroutine foo\n \n   subroutine jackal (b, c)"}, {"sha": "24a1a4fd07281ff16de8a5782f83c6ac7cc043f1", "filename": "gcc/testsuite/gfortran.dg/initialization_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ebe2d22e7201bca8e75111ec66ccae8454896ae/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ebe2d22e7201bca8e75111ec66ccae8454896ae/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_1.f90?ref=9ebe2d22e7201bca8e75111ec66ccae8454896ae", "patch": "@@ -27,7 +27,7 @@ subroutine foo(ch1, x, y)\n     integer :: l1 = len (ch1)     ! { dg-warning \"assumed character length variable\" }\n \n ! These are warnings because they are gfortran extensions.\n-    integer :: m3 = size (x, 1)   ! { dg-warning \"upper bound in the last dimension\" }\n+    integer :: m3 = size (x, 1)   ! { dg-warning \"Evaluation of nonstandard initialization\" }\n     integer :: m4(2) = shape (z)  ! { dg-warning \"Evaluation of nonstandard initialization\" }\n \n ! This does not depend on non-constant properties."}, {"sha": "0fcb7bd873cee11448ea7661d5146d62e45abca9", "filename": "gcc/testsuite/gfortran.dg/specification_type_resolution_2.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ebe2d22e7201bca8e75111ec66ccae8454896ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fspecification_type_resolution_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ebe2d22e7201bca8e75111ec66ccae8454896ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fspecification_type_resolution_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fspecification_type_resolution_2.f90?ref=9ebe2d22e7201bca8e75111ec66ccae8454896ae", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do compile }\n+! Tests the fix for PR30283 in which the type of the result\n+! of bar was getting lost\n+\n+! Contributed by Harald Anlauf <anlauf@gmx.de>\n+\n+module gfcbug50\n+  implicit none\n+contains\n+\n+  subroutine foo (n, y)\n+    integer, intent(in)         :: n\n+    integer, dimension(bar (n)) :: y\n+    ! Array bound is specification expression, which is allowed (F2003, sect.7.1.6)\n+  end subroutine foo\n+\n+  pure function bar (n) result (l)\n+    integer, intent(in) :: n\n+    integer             :: l\n+    l = n\n+  end function bar\n+\n+end module gfcbug50\n+\n+! { dg-final { cleanup-modules \"gfcbug50\" } }"}, {"sha": "e995fb86becfadd8bb35be640ec4d7eadd4394b2", "filename": "gcc/testsuite/gfortran.dg/stfunc_4.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ebe2d22e7201bca8e75111ec66ccae8454896ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fstfunc_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ebe2d22e7201bca8e75111ec66ccae8454896ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fstfunc_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fstfunc_4.f90?ref=9ebe2d22e7201bca8e75111ec66ccae8454896ae", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do run }\n+! Tests the fix for PR29389, in which the  statement function would not be\n+! recognised as PURE within a PURE procedure.\n+\n+! Contributed by Francois-Xavier Coudert <fxcoudert@gcc.gnu.org>\n+\n+  INTEGER :: st1, i = 99, a(4), q = 6\n+  st1 (i) = i * i * i \n+  FORALL(i=1:4) a(i) = st1 (i) \n+  FORALL(i=1:4) a(i) = u (a(i)) - a(i)** 2 \n+  if (any (a .ne. 0)) call abort ()\n+  if (i .ne. 99) call abort ()\n+contains\n+  pure integer function u (x)\n+    integer,intent(in) :: x\n+    st2 (i) = i * i\n+    u = st2(x)\n+  end function\n+end"}]}