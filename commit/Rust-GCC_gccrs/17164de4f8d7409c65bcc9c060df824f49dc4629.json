{"sha": "17164de4f8d7409c65bcc9c060df824f49dc4629", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTcxNjRkZTRmOGQ3NDA5YzY1YmNjOWMwNjBkZjgyNGY0OWRjNDYyOQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2018-03-14T00:56:48Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2018-03-14T00:56:48Z"}, "message": "check.c (gfc_check_kill_sub): Remove check for INTEGER(4) or (8).\n\n2018-03-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\t* check.c (gfc_check_kill_sub):  Remove check for INTEGER(4) or (8).\n\t* intrinsic.c (add_functions): Remove reference to gfc_resolve_kill.\n\t(add_subroutines): Remove reference to gfc_resolve_kill_sub.\n\t* intrinsic.texi: Update documentation.\n\t* iresolve.c (gfc_resolve_kill, gfc_resolve_kill_sub): Remove.\n\t* trans-decl.c (gfc_build_intrinsic_function_decls):  Add\n\tgfor_fndecl_kill and gfor_fndecl_kill_sub\n\t* trans-intrinsic.c (conv_intrinsic_kill, conv_intrinsic_kill_sub): new\n\tfunctions.\n\t(gfc_conv_intrinsic_function): Use conv_intrinsic_kill.\n        (gfc_conv_intrinsic_subroutine): Use conv_intrinsic_kill_sub.\n\t* trans.h: Declare gfor_fndecl_kill and gfor_fndecl_kill_sub.\n \n2018-03-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\t* libgfortran/gfortran.map: Remove _gfortran_kill_i4,\n\t_gfortran_kill_i4_sub, _gfortran_kill_i8, and _gfortran_kill_i8_sub.\n\tAdd _gfortran_kill and _gfortran_kill_sub.\n\t* libgfortran/intrinsics/kill.c: Eliminate _gfortran_kill_i4,\n\t_gfortran_kill_i4_sub, _gfortran_kill_i8, and _gfortran_kill_i8_sub.\n\tAdd _gfortran_kill and _gfortran_kill_sub.\n\nFrom-SVN: r258511", "tree": {"sha": "4c1fd5011e287acfee4fd1f3326d29671b63f937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c1fd5011e287acfee4fd1f3326d29671b63f937"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17164de4f8d7409c65bcc9c060df824f49dc4629", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17164de4f8d7409c65bcc9c060df824f49dc4629", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17164de4f8d7409c65bcc9c060df824f49dc4629", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17164de4f8d7409c65bcc9c060df824f49dc4629/comments", "author": null, "committer": null, "parents": [{"sha": "10f499af34794b5b4c400c2f5d2cb05bd524b0ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10f499af34794b5b4c400c2f5d2cb05bd524b0ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10f499af34794b5b4c400c2f5d2cb05bd524b0ff"}], "stats": {"total": 250, "additions": 152, "deletions": 98}, "files": [{"sha": "19854f1f5742ffa9bf86d7c54bca1fc6bdc6e4c0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17164de4f8d7409c65bcc9c060df824f49dc4629/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17164de4f8d7409c65bcc9c060df824f49dc4629/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=17164de4f8d7409c65bcc9c060df824f49dc4629", "patch": "@@ -1,3 +1,18 @@\n+2018-03-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\t* check.c (gfc_check_kill_sub):  Remove check for INTEGER(4) or (8).\n+\t* intrinsic.c (add_functions): Remove reference to gfc_resolve_kill.\n+\t(add_subroutines): Remove reference to gfc_resolve_kill_sub.\n+\t* intrinsic.texi: Update documentation.\n+\t* iresolve.c (gfc_resolve_kill, gfc_resolve_kill_sub): Remove.\n+\t* trans-decl.c (gfc_build_intrinsic_function_decls):  Add\n+\tgfor_fndecl_kill and gfor_fndecl_kill_sub\n+\t* trans-intrinsic.c (conv_intrinsic_kill, conv_intrinsic_kill_sub): new\n+\tfunctions.\n+\t(gfc_conv_intrinsic_function): Use conv_intrinsic_kill.\n+        (gfc_conv_intrinsic_subroutine): Use conv_intrinsic_kill_sub.\n+\t* trans.h: Declare gfor_fndecl_kill and gfor_fndecl_kill_sub.\n+\n 2018-03-11  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/84546"}, {"sha": "23b1964c39b15bb32f4b95d71b52298cdc0264de", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17164de4f8d7409c65bcc9c060df824f49dc4629/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17164de4f8d7409c65bcc9c060df824f49dc4629/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=17164de4f8d7409c65bcc9c060df824f49dc4629", "patch": "@@ -2783,20 +2783,13 @@ gfc_check_kill_sub (gfc_expr *pid, gfc_expr *sig, gfc_expr *status)\n   if (!scalar_check (sig, 1))\n     return false;\n \n-  if (status == NULL)\n-    return true;\n-\n-  if (!type_check (status, 2, BT_INTEGER))\n-    return false;\n-\n-  if (!scalar_check (status, 2))\n-    return false;\n-\n-  if (status->ts.kind != 4 && status->ts.kind != 8)\n+  if (status)\n     {\n-      gfc_error (\"Invalid kind type parameter for STATUS at %L\",\n-\t\t &status->where);\n-      return false;\n+      if (!type_check (status, 2, BT_INTEGER))\n+\treturn false;\n+\n+      if (!scalar_check (status, 2))\n+\treturn false;\n     }\n \n   return true;"}, {"sha": "d9cc2493d3c7046bd4778e6d9570f23f98bb85ee", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17164de4f8d7409c65bcc9c060df824f49dc4629/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17164de4f8d7409c65bcc9c060df824f49dc4629/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=17164de4f8d7409c65bcc9c060df824f49dc4629", "patch": "@@ -2255,7 +2255,7 @@ add_functions (void)\n   make_generic (\"ishftc\", GFC_ISYM_ISHFTC, GFC_STD_F95);\n \n   add_sym_2 (\"kill\", GFC_ISYM_KILL, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n-\t     di, GFC_STD_GNU, gfc_check_kill, NULL, gfc_resolve_kill,\n+\t     di, GFC_STD_GNU, gfc_check_kill, NULL, NULL,\n \t     pid, BT_INTEGER, di, REQUIRED, sig, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"kill\", GFC_ISYM_KILL, GFC_STD_GNU);\n@@ -3724,7 +3724,7 @@ add_subroutines (void)\n \t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_3s (\"kill\", GFC_ISYM_KILL, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n-\t      gfc_check_kill_sub, NULL, gfc_resolve_kill_sub,\n+\t      gfc_check_kill_sub, NULL, NULL,\n \t      pid, BT_INTEGER, di, REQUIRED, INTENT_IN,\n \t      sig, BT_INTEGER, di, REQUIRED, INTENT_IN,\n \t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);"}, {"sha": "e38440d9b56ac92219001069c1d76efec3941c42", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17164de4f8d7409c65bcc9c060df824f49dc4629/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17164de4f8d7409c65bcc9c060df824f49dc4629/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=17164de4f8d7409c65bcc9c060df824f49dc4629", "patch": "@@ -8719,7 +8719,7 @@ Sends the signal specified by @var{SIG} to the process @var{PID}.\n See @code{kill(2)}.\n \n This intrinsic is provided in both subroutine and function forms;\n-however,  only one form can be used in any given program unit.\n+however, only one form can be used in any given program unit.\n \n @item @emph{Class}:\n Subroutine, function\n@@ -8732,16 +8732,13 @@ Subroutine, function\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{PID} @tab Shall be a scalar @code{INTEGER} with\n-@code{INTENT(IN)}\n-@item @var{SIG} @tab Shall be a scalar @code{INTEGER} with\n-@code{INTENT(IN)}\n-@item @var{STATUS} @tab [Subroutine](Optional) status flag of type\n-@code{INTEGER(4)} or @code{INTEGER(8)}.\n+@item @var{PID} @tab Shall be a scalar @code{INTEGER} with @code{INTENT(IN)}.\n+@item @var{SIG} @tab Shall be a scalar @code{INTEGER} with @code{INTENT(IN)}.\n+@item @var{STATUS} @tab [Subroutine](Optional)\n+Shall be a scalar @code{INTEGER}.\n Returns 0 on success; otherwise a system-specific error code is returned.\n @item @var{STATUS} @tab [Function] The kind type parameter is that of\n-@code{pid} if @code{pid} is of type @code{INTEGER(4)} or @code{INTEGER(8)};\n-otherwise, it is default integer kind.\n+@code{pid}.\n Returns 0 on success; otherwise a system-specific error code is returned.\n @end multitable\n "}, {"sha": "f15b8f2773a02b2d753e19b41ff655bca100dbad", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17164de4f8d7409c65bcc9c060df824f49dc4629/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17164de4f8d7409c65bcc9c060df824f49dc4629/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=17164de4f8d7409c65bcc9c060df824f49dc4629", "patch": "@@ -1491,19 +1491,6 @@ gfc_resolve_ishftc (gfc_expr *f, gfc_expr *i, gfc_expr *shift, gfc_expr *size)\n }\n \n \n-void\n-gfc_resolve_kill (gfc_expr *f, gfc_expr *pid,\n-\t\t  gfc_expr *sig ATTRIBUTE_UNUSED)\n-{\n-  f->ts.type = BT_INTEGER;\n-  if (pid->ts.kind == 4 || pid->ts.kind == 8)\n-    f->ts.kind = pid->ts.kind;\n-  else\n-    f->ts.kind = gfc_default_integer_kind;\n-  f->value.function.name = gfc_get_string (PREFIX (\"kill_i%d\"), f->ts.kind);\n-}\n-\n-\n void\n gfc_resolve_lbound (gfc_expr *f, gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n {\n@@ -3460,22 +3447,6 @@ gfc_resolve_rename_sub (gfc_code *c)\n }\n \n \n-void\n-gfc_resolve_kill_sub (gfc_code *c)\n-{\n-  const char *name;\n-  int kind;\n-\n-  if (c->ext.actual->next->next->expr != NULL)\n-    kind = c->ext.actual->next->next->expr->ts.kind;\n-  else\n-    kind = gfc_default_integer_kind;\n-\n-  name = gfc_get_string (PREFIX (\"kill_i%d_sub\"), kind);\n-  c->resolved_sym = gfc_get_intrinsic_sub_symbol (name);\n-}\n-\n-\n void\n gfc_resolve_link_sub (gfc_code *c)\n {"}, {"sha": "6c4a2214ce7b83fed0422e3b86b67aa44211afe1", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17164de4f8d7409c65bcc9c060df824f49dc4629/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17164de4f8d7409c65bcc9c060df824f49dc4629/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=17164de4f8d7409c65bcc9c060df824f49dc4629", "patch": "@@ -123,7 +123,6 @@ tree gfor_fndecl_system_clock8;\n tree gfor_fndecl_ieee_procedure_entry;\n tree gfor_fndecl_ieee_procedure_exit;\n \n-\n /* Coarray run-time library function decls.  */\n tree gfor_fndecl_caf_init;\n tree gfor_fndecl_caf_finalize;\n@@ -215,6 +214,9 @@ tree gfor_fndecl_convert_char4_to_char1;\n tree gfor_fndecl_size0;\n tree gfor_fndecl_size1;\n tree gfor_fndecl_iargc;\n+tree gfor_fndecl_kill;\n+tree gfor_fndecl_kill_sub;\n+\n \n /* Intrinsic functions implemented in Fortran.  */\n tree gfor_fndecl_sc_kind;\n@@ -3494,6 +3496,14 @@ gfc_build_intrinsic_function_decls (void)\n   gfor_fndecl_iargc = gfc_build_library_function_decl (\n \tget_identifier (PREFIX (\"iargc\")), gfc_int4_type_node, 0);\n   TREE_NOTHROW (gfor_fndecl_iargc) = 1;\n+\n+  gfor_fndecl_kill_sub = gfc_build_library_function_decl (\n+\tget_identifier (PREFIX (\"kill_sub\")), void_type_node,\n+\t3, gfc_int4_type_node, gfc_int4_type_node, gfc_pint4_type_node);\n+\n+  gfor_fndecl_kill = gfc_build_library_function_decl (\n+\tget_identifier (PREFIX (\"kill\")), gfc_int4_type_node,\n+\t2, gfc_int4_type_node, gfc_int4_type_node);\n }\n \n "}, {"sha": "a45aec708fb97b33c38ee07032730e221e129978", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 87, "deletions": 1, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17164de4f8d7409c65bcc9c060df824f49dc4629/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17164de4f8d7409c65bcc9c060df824f49dc4629/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=17164de4f8d7409c65bcc9c060df824f49dc4629", "patch": "@@ -8115,6 +8115,85 @@ gfc_conv_intrinsic_iargc (gfc_se * se, gfc_expr * expr)\n }\n \n \n+/* Generate code for the KILL intrinsic.  */\n+\n+static void\n+conv_intrinsic_kill (gfc_se *se, gfc_expr *expr)\n+{\n+  tree *args;\n+  tree int4_type_node = gfc_get_int_type (4);\n+  tree pid;\n+  tree sig;\n+  tree tmp;\n+  unsigned int num_args;\n+\n+  num_args = gfc_intrinsic_argument_list_length (expr);\n+  args = XALLOCAVEC (tree, num_args);\n+  gfc_conv_intrinsic_function_args (se, expr, args, num_args);\n+\n+  /* Convert PID to a INTEGER(4) entity.  */\n+  pid = convert (int4_type_node, args[0]);\n+\n+  /* Convert SIG to a INTEGER(4) entity.  */\n+  sig = convert (int4_type_node, args[1]);\n+\n+  tmp = build_call_expr_loc (input_location, gfor_fndecl_kill, 2, pid, sig);\n+\n+  se->expr = fold_convert (TREE_TYPE (args[0]), tmp);\n+}\n+\n+\n+static tree\n+conv_intrinsic_kill_sub (gfc_code *code)\n+{\n+  stmtblock_t block;\n+  gfc_se se, se_stat;\n+  tree int4_type_node = gfc_get_int_type (4);\n+  tree pid;\n+  tree sig;\n+  tree statp;\n+  tree tmp;\n+\n+  /* Make the function call.  */\n+  gfc_init_block (&block);\n+  gfc_init_se (&se, NULL);\n+\n+  /* Convert PID to a INTEGER(4) entity.  */\n+  gfc_conv_expr (&se, code->ext.actual->expr);\n+  gfc_add_block_to_block (&block, &se.pre);\n+  pid = fold_convert (int4_type_node, gfc_evaluate_now (se.expr, &block));\n+  gfc_add_block_to_block (&block, &se.post);\n+\n+  /* Convert SIG to a INTEGER(4) entity.  */\n+  gfc_conv_expr (&se, code->ext.actual->next->expr);\n+  gfc_add_block_to_block (&block, &se.pre);\n+  sig = fold_convert (int4_type_node, gfc_evaluate_now (se.expr, &block));\n+  gfc_add_block_to_block (&block, &se.post);\n+\n+  /* Deal with an optional STATUS.  */\n+  if (code->ext.actual->next->next->expr)\n+    {\n+      gfc_init_se (&se_stat, NULL);\n+      gfc_conv_expr (&se_stat, code->ext.actual->next->next->expr);\n+      statp = gfc_create_var (gfc_get_int_type (4), \"_statp\");\n+    }\n+  else\n+    statp = NULL_TREE;\n+\n+  tmp = build_call_expr_loc (input_location, gfor_fndecl_kill_sub, 3, pid, sig,\n+\tstatp ? gfc_build_addr_expr (NULL_TREE, statp) : null_pointer_node);\n+\n+  gfc_add_expr_to_block (&block, tmp);\n+\n+  if (statp && statp != se_stat.expr)\n+    gfc_add_modify (&block, se_stat.expr,\n+\t\t    fold_convert (TREE_TYPE (se_stat.expr), statp));\n+\n+  return gfc_finish_block (&block);\n+}\n+\n+\n+\n /* The loc intrinsic returns the address of its argument as\n    gfc_index_integer_kind integer.  */\n \n@@ -9068,6 +9147,10 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       gfc_conv_intrinsic_isnan (se, expr);\n       break;\n \n+    case GFC_ISYM_KILL:\n+      conv_intrinsic_kill (se, expr);\n+      break;\n+\n     case GFC_ISYM_LSHIFT:\n       gfc_conv_intrinsic_shift (se, expr, false, false);\n       break;\n@@ -9344,7 +9427,6 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n     case GFC_ISYM_GETPID:\n     case GFC_ISYM_GETUID:\n     case GFC_ISYM_HOSTNM:\n-    case GFC_ISYM_KILL:\n     case GFC_ISYM_IERRNO:\n     case GFC_ISYM_IRAND:\n     case GFC_ISYM_ISATTY:\n@@ -10821,6 +10903,10 @@ gfc_conv_intrinsic_subroutine (gfc_code *code)\n       res = conv_intrinsic_free (code);\n       break;\n \n+    case GFC_ISYM_KILL:\n+      res = conv_intrinsic_kill_sub (code);\n+      break;\n+\n     case GFC_ISYM_SYSTEM_CLOCK:\n       res = conv_intrinsic_system_clock (code);\n       break;"}, {"sha": "c6b362542deded9d396202ff5f7b922e56a75769", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17164de4f8d7409c65bcc9c060df824f49dc4629/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17164de4f8d7409c65bcc9c060df824f49dc4629/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=17164de4f8d7409c65bcc9c060df824f49dc4629", "patch": "@@ -903,6 +903,8 @@ extern GTY(()) tree gfor_fndecl_convert_char4_to_char1;\n extern GTY(()) tree gfor_fndecl_size0;\n extern GTY(()) tree gfor_fndecl_size1;\n extern GTY(()) tree gfor_fndecl_iargc;\n+extern GTY(()) tree gfor_fndecl_kill;\n+extern GTY(()) tree gfor_fndecl_kill_sub;\n \n /* Implemented in Fortran.  */\n extern GTY(()) tree gfor_fndecl_sc_kind;"}, {"sha": "2d40ef080cbf2ce7527aadb5b688c32b1163dd54", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17164de4f8d7409c65bcc9c060df824f49dc4629/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17164de4f8d7409c65bcc9c060df824f49dc4629/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=17164de4f8d7409c65bcc9c060df824f49dc4629", "patch": "@@ -1,3 +1,12 @@\n+2018-03-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\t* libgfortran/gfortran.map: Remove _gfortran_kill_i4,\n+\t_gfortran_kill_i4_sub, _gfortran_kill_i8, and _gfortran_kill_i8_sub.\n+\tAdd _gfortran_kill and _gfortran_kill_sub.\n+\t* libgfortran/intrinsics/kill.c: Eliminate _gfortran_kill_i4,\n+\t_gfortran_kill_i4_sub, _gfortran_kill_i8, and _gfortran_kill_i8_sub.\n+\tAdd _gfortran_kill and _gfortran_kill_sub.\n+\n 2018-02-23  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR fortran/84519"}, {"sha": "29af0dc3619f0576fb52c81155cb8765212fc4c0", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17164de4f8d7409c65bcc9c060df824f49dc4629/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17164de4f8d7409c65bcc9c060df824f49dc4629/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=17164de4f8d7409c65bcc9c060df824f49dc4629", "patch": "@@ -318,10 +318,8 @@ GFORTRAN_8 {\n     _gfortran_ishftc8;\n     _gfortran_itime_i4;\n     _gfortran_itime_i8;\n-    _gfortran_kill_i4;\n-    _gfortran_kill_i4_sub;\n-    _gfortran_kill_i8;\n-    _gfortran_kill_i8_sub;\n+    _gfortran_kill;\n+    _gfortran_kill_sub;\n     _gfortran_link_i4;\n     _gfortran_link_i4_sub;\n     _gfortran_link_i8;"}, {"sha": "3b062b3424d2031a32d44978be3725bc9e636cb8", "filename": "libgfortran/intrinsics/kill.c", "status": "modified", "additions": 12, "deletions": 39, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17164de4f8d7409c65bcc9c060df824f49dc4629/libgfortran%2Fintrinsics%2Fkill.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17164de4f8d7409c65bcc9c060df824f49dc4629/libgfortran%2Fintrinsics%2Fkill.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fkill.c?ref=17164de4f8d7409c65bcc9c060df824f49dc4629", "patch": "@@ -32,61 +32,34 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    INTEGER, INTENT(IN) :: PID, SIGNAL\n    INTEGER(KIND=1), INTENT(OUT), OPTIONAL :: STATUS\n \n-   INTEGER(KIND=1) FUNCTION KILL(PID, SIGNAL)\n+   INTEGER FUNCTION KILL(PID, SIGNAL)\n    INTEGER, INTENT(IN) :: PID, SIGNAL */\n \n #ifdef HAVE_KILL\n-extern void kill_i4_sub (GFC_INTEGER_4 *, GFC_INTEGER_4 *, GFC_INTEGER_4 *);\n-iexport_proto(kill_i4_sub);\n+extern void kill_sub (GFC_INTEGER_4, GFC_INTEGER_4, GFC_INTEGER_4 *);\n+iexport_proto(kill_sub);\n \n void\n-kill_i4_sub (GFC_INTEGER_4 *pid, GFC_INTEGER_4 *signal,\n-\t     GFC_INTEGER_4 *status)\n+kill_sub (GFC_INTEGER_4 pid, GFC_INTEGER_4 signal, GFC_INTEGER_4 *status)\n {\n   int val;\n \n-  val = kill (*pid, *signal);\n+  val = kill (pid, signal);\n \n   if (status != NULL) \n     *status = (val == 0) ? 0 : errno;\n }\n-iexport(kill_i4_sub);\n+iexport(kill_sub);\n \n-extern void kill_i8_sub (GFC_INTEGER_8 *, GFC_INTEGER_8 *, GFC_INTEGER_8 *);\n-iexport_proto(kill_i8_sub);\n-\n-void\n-kill_i8_sub (GFC_INTEGER_8 *pid, GFC_INTEGER_8 *signal,\n-\t     GFC_INTEGER_8 *status)\n-{\n-  int val;\n-\n-  val = kill (*pid, *signal);\n-\n-  if (status != NULL) \n-    *status = (val == 0) ? 0 : errno;\n-}\n-iexport(kill_i8_sub);\n-\n-extern GFC_INTEGER_4 kill_i4 (GFC_INTEGER_4 *, GFC_INTEGER_4 *);\n-export_proto(kill_i4);\n+extern GFC_INTEGER_4 kill (GFC_INTEGER_4, GFC_INTEGER_4);\n+export_proto(kill);\n \n GFC_INTEGER_4\n-kill_i4 (GFC_INTEGER_4 *pid, GFC_INTEGER_4 *signal)\n+kill (GFC_INTEGER_4 pid, GFC_INTEGER_4 signal)\n {\n-  GFC_INTEGER_4 val;\n-  kill_i4_sub (pid, signal, &val);\n-  return val;\n+  int val;\n+  val = (int)kill (pid, signal);\n+  return ((val == 0) ? 0 : errno);\n }\n \n-extern GFC_INTEGER_8 kill_i8 (GFC_INTEGER_8 *, GFC_INTEGER_8 *);\n-export_proto(kill_i8);\n-\n-GFC_INTEGER_8\n-kill_i8 (GFC_INTEGER_8 *pid, GFC_INTEGER_8 *signal)\n-{\n-  GFC_INTEGER_8 val;\n-  kill_i8_sub (pid, signal, &val);\n-  return val;\n-}\n #endif"}]}