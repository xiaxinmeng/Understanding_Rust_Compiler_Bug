{"sha": "afa4401edd8a6a882848a6613d5441b0d0a10587", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZhNDQwMWVkZDhhNmE4ODI4NDhhNjYxM2Q1NDQxYjBkMGExMDU4Nw==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-05-17T11:59:01Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-05-17T11:59:01Z"}, "message": "testsuite/arm: Factorize and increase coverage in mve-sub_1.c\n\nUse a template macro to factorize the existing test functions.\n\nThis patch also adds a version to check subtraction with __fp16 type.\n\n2021-05-17  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/testsuite/\n\t* gcc.target/arm/simd/mve-vsub_1.c: Factorize and add __fp16 test.", "tree": {"sha": "24d28ccd78d75121e5f135377959034c841c2d8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24d28ccd78d75121e5f135377959034c841c2d8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afa4401edd8a6a882848a6613d5441b0d0a10587", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afa4401edd8a6a882848a6613d5441b0d0a10587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afa4401edd8a6a882848a6613d5441b0d0a10587", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afa4401edd8a6a882848a6613d5441b0d0a10587/comments", "author": null, "committer": null, "parents": [{"sha": "e87d568e9e3e331e22850127308abedd0642e5e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e87d568e9e3e331e22850127308abedd0642e5e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e87d568e9e3e331e22850127308abedd0642e5e8"}], "stats": {"total": 60, "additions": 21, "deletions": 39}, "files": [{"sha": "5a6c34584cfcf45f3eb2656aad47c8c30b2ff872", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-vsub_1.c", "status": "modified", "additions": 21, "deletions": 39, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afa4401edd8a6a882848a6613d5441b0d0a10587/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vsub_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afa4401edd8a6a882848a6613d5441b0d0a10587/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vsub_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vsub_1.c?ref=afa4401edd8a6a882848a6613d5441b0d0a10587", "patch": "@@ -5,60 +5,42 @@\n \n #include <stdint.h>\n \n-void test_vsub_i32 (int32_t * dest, int32_t * a, int32_t * b) {\n-  int i;\n-  for (i=0; i<4; i++) {\n-    dest[i] = a[i] - b[i];\n-  }\n+#define FUNC(SIGN, TYPE, BITS, NB, OP, NAME)\t\t\t\t\\\n+  void test_ ## NAME ##_ ## SIGN ## BITS ## x ## NB (TYPE##BITS##_t * __restrict__ dest, \\\n+\t\t\t\t\t\t     TYPE##BITS##_t *a, TYPE##BITS##_t *b) { \\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    for (i=0; i<NB; i++) {\t\t\t\t\t\t\\\n+      dest[i] = a[i] OP b[i];\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n }\n \n-void test_vsub_i32_u (uint32_t * dest, uint32_t * a, uint32_t * b) {\n-  int i;\n-  for (i=0; i<4; i++) {\n-    dest[i] = a[i] - b[i];\n-  }\n-}\n+/* 128-bit vectors.  */\n+FUNC(s, int, 32, 4, -, vsub)\n+FUNC(u, uint, 32, 4, -, vsub)\n+FUNC(s, int, 16, 8, -, vsub)\n+FUNC(u, uint, 16, 8, -, vsub)\n+FUNC(s, int, 8, 16, -, vsub)\n+FUNC(u, uint, 8, 16, -, vsub)\n \n /* { dg-final { scan-assembler-times {vsub\\.i32\\tq[0-9]+, q[0-9]+, q[0-9]+} 2 } } */\n-\n-void test_vsub_i16 (int16_t * dest, int16_t * a, int16_t * b) {\n-  int i;\n-  for (i=0; i<8; i++) {\n-    dest[i] = a[i] - b[i];\n-  }\n-}\n-\n-void test_vsub_i16_u (uint16_t * dest, uint16_t * a, uint16_t * b) {\n-  int i;\n-  for (i=0; i<8; i++) {\n-    dest[i] = a[i] - b[i];\n-  }\n-}\n-\n /* { dg-final { scan-assembler-times {vsub\\.i16\\tq[0-9]+, q[0-9]+, q[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsub\\.i8\\tq[0-9]+, q[0-9]+, q[0-9]+} 2 } } */\n \n-void test_vsub_i8 (int8_t * dest, int8_t * a, int8_t * b) {\n-  int i;\n-  for (i=0; i<16; i++) {\n-    dest[i] = a[i] - b[i];\n-  }\n-}\n-\n-void test_vsub_i8_u (uint8_t * dest, uint8_t * a, uint8_t * b) {\n+void test_vsub_f32 (float * dest, float * a, float * b) {\n   int i;\n-  for (i=0; i<16; i++) {\n+  for (i=0; i<4; i++) {\n     dest[i] = a[i] - b[i];\n   }\n }\n+/* { dg-final { scan-assembler-times {vsub\\.f32\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } } */\n \n-/* { dg-final { scan-assembler-times {vsub\\.i8\\tq[0-9]+, q[0-9]+, q[0-9]+} 2 } } */\n \n-void test_vsub_f32 (float * dest, float * a, float * b) {\n+void test_vsub_f16 (__fp16 * dest, __fp16 * a, __fp16 * b) {\n   int i;\n-  for (i=0; i<4; i++) {\n+  for (i=0; i<8; i++) {\n     dest[i] = a[i] - b[i];\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsub\\.f32\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsub\\.f16\\tq[0-9]+, q[0-9]+, q[0-9]+} 1 } } */\n "}]}