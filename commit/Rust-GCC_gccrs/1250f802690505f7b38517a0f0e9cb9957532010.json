{"sha": "1250f802690505f7b38517a0f0e9cb9957532010", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI1MGY4MDI2OTA1MDVmN2IzODUxN2EwZjBlOWNiOTk1NzUzMjAxMA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-01-22T11:18:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-22T11:18:34Z"}, "message": "sem_warn.adb (Check_Use_Clause): Don't give no entities used msg if errors found.\n\n2014-01-22  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_warn.adb (Check_Use_Clause): Don't give no entities used\n\tmsg if errors found.\n\t(Check_One_Unit): Same change.\n\n2014-01-22  Robert Dewar  <dewar@adacore.com>\n\n\t* ug_words: Add missing/wrong entries for VMS warning switches.\n\t* sem_prag.adb (Check_Duplicate_Pragma): Avoid flagging parent type.\n\nFrom-SVN: r206920", "tree": {"sha": "ed7b39a4ddfe3cd018327d32401f6db2f8221ef5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed7b39a4ddfe3cd018327d32401f6db2f8221ef5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1250f802690505f7b38517a0f0e9cb9957532010", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1250f802690505f7b38517a0f0e9cb9957532010", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1250f802690505f7b38517a0f0e9cb9957532010", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1250f802690505f7b38517a0f0e9cb9957532010/comments", "author": null, "committer": null, "parents": [{"sha": "54533a0b36101d77e146f1d88e8dfcaad467730a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54533a0b36101d77e146f1d88e8dfcaad467730a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54533a0b36101d77e146f1d88e8dfcaad467730a"}], "stats": {"total": 664, "additions": 439, "deletions": 225}, "files": [{"sha": "8afa4db1985f21b2339ea9ba17fe2eb80c2b6e33", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1250f802690505f7b38517a0f0e9cb9957532010/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1250f802690505f7b38517a0f0e9cb9957532010/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1250f802690505f7b38517a0f0e9cb9957532010", "patch": "@@ -1,3 +1,14 @@\n+2014-01-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_warn.adb (Check_Use_Clause): Don't give no entities used\n+\tmsg if errors found.\n+\t(Check_One_Unit): Same change.\n+\n+2014-01-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* ug_words: Add missing/wrong entries for VMS warning switches.\n+\t* sem_prag.adb (Check_Duplicate_Pragma): Avoid flagging parent type.\n+\n 2014-01-22  Jerome Guitton  <guitton@adacore.com>\n \n \t* mlib-tgt-specific-vxworks.adb (Get_Target_Suffix): Replace xscale by"}, {"sha": "3649149969672c2cd09932f7dfd7eedd99560d76", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1250f802690505f7b38517a0f0e9cb9957532010/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1250f802690505f7b38517a0f0e9cb9957532010/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=1250f802690505f7b38517a0f0e9cb9957532010", "patch": "@@ -5339,6 +5339,22 @@ an explicit @option{-gnatws} or\n implicit @option{-gnatwe} that is activated by the\n use of @option{-gnatg}.\n \n+@item -gnatw.n\n+@emph{Activate warnings on atomic synchronization.}\n+@cindex @option{-gnatw.n} (@command{gcc})\n+@cindex Atomic Synchronization, warnings\n+This switch actives warnings when an access to an atomic variable\n+requires the generation of atomic synchronization code. These\n+warnings are off by default and this warning is not included\n+in @code{-gnatwa}.\n+\n+@item -gnatw.N\n+@emph{Suppress warnings on atomic synchronization.}\n+@cindex @option{-gnatw.n} (@command{gcc})\n+@cindex Atomic Synchronization, warnings\n+This switch suppresses warnings when an access to an atomic variable\n+requires the generation of atomic synchronization code.\n+\n @item -gnatwo\n @emph{Activate warnings on address clause overlays.}\n @cindex @option{-gnatwo} (@command{gcc})"}, {"sha": "53be17ce68c357b4457051b770114698cf27e4d7", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1250f802690505f7b38517a0f0e9cb9957532010/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1250f802690505f7b38517a0f0e9cb9957532010/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=1250f802690505f7b38517a0f0e9cb9957532010", "patch": "@@ -2823,6 +2823,8 @@ package body Sem_Prag is\n       --  Check if a rep item of the same name as the current pragma is already\n       --  chained as a rep pragma to the given entity. If so give a message\n       --  about the duplicate, and then raise Pragma_Exit so does not return.\n+      --  Note that if E is a type, then this routine avoids flagging a pragma\n+      --  which applies to a parent type from which E is derived.\n \n       procedure Check_Duplicated_Export_Name (Nam : Node_Id);\n       --  Nam is an N_String_Literal node containing the external name set by\n@@ -3924,6 +3926,36 @@ package body Sem_Prag is\n          P := Get_Rep_Item (E, Pragma_Name (N), Check_Parents => False);\n \n          if Present (P) then\n+\n+            --  If the entity is a type, then we have to make sure that the\n+            --  ostensible duplicate is not for a parent type from which this\n+            --  type is derived.\n+\n+            if Is_Type (E) then\n+               if Nkind (P) = N_Pragma then\n+                  declare\n+                     Args : constant List_Id :=\n+                              Pragma_Argument_Associations (P);\n+                  begin\n+                     if Present (Args)\n+                       and then Is_Entity_Name (Expression (First (Args)))\n+                       and then Is_Type (Entity (Expression (First (Args))))\n+                       and then Entity (Expression (First (Args))) /= E\n+                     then\n+                        return;\n+                     end if;\n+                  end;\n+\n+               elsif Nkind (P) = N_Aspect_Specification\n+                 and then Is_Type (Entity (P))\n+                 and then Entity (P) /= E\n+               then\n+                  return;\n+               end if;\n+            end if;\n+\n+            --  Here we have a definite duplicate\n+\n             Error_Msg_Name_1 := Pragma_Name (N);\n             Error_Msg_Sloc := Sloc (P);\n "}, {"sha": "c2bef7add10bd768ce3fa9af1b9e7fb10479c45f", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1250f802690505f7b38517a0f0e9cb9957532010/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1250f802690505f7b38517a0f0e9cb9957532010/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=1250f802690505f7b38517a0f0e9cb9957532010", "patch": "@@ -2130,11 +2130,18 @@ package body Sem_Warn is\n                   Nam := First (Names (N));\n                   while Present (Nam) loop\n                      if Entity (Nam) = Pack then\n-                        Error_Msg_Qual_Level := 1;\n-                        Error_Msg_NE -- CODEFIX\n-                          (\"?u?no entities of package& are referenced!\",\n-                             Nam, Pack);\n-                        Error_Msg_Qual_Level := 0;\n+\n+                        --  Suppress message if any serious errors detected\n+                        --  that turn off expansion, and thus result in false\n+                        --  positives for this warning.\n+\n+                        if Serious_Errors_Detected = 0 then\n+                           Error_Msg_Qual_Level := 1;\n+                           Error_Msg_NE -- CODEFIX\n+                             (\"?u?no entities of package& are referenced!\",\n+                                Nam, Pack);\n+                           Error_Msg_Qual_Level := 0;\n+                        end if;\n                      end if;\n \n                      Next (Nam);\n@@ -2402,8 +2409,13 @@ package body Sem_Warn is\n                            --  Else give the warning\n \n                            else\n-                              if not\n-                                Has_Unreferenced (Entity (Name (Item)))\n+                              --  Warn if we unreferenced flag set and we have\n+                              --  not had serious errors. The reason we inhibit\n+                              --  the message if there are errors is to prevent\n+                              --  false positives from disabling expansion.\n+\n+                              if not Has_Unreferenced (Entity (Name (Item)))\n+                                and then Serious_Errors_Detected = 0\n                               then\n                                  Error_Msg_N -- CODEFIX\n                                    (\"?u?no entities of & are referenced!\",\n@@ -2541,6 +2553,8 @@ package body Sem_Warn is\n    --  Start of processing for Check_Unused_Withs\n \n    begin\n+      --  Immediate return if no semantics or warning flag not set\n+\n       if not Opt.Check_Withs or else Operating_Mode = Check_Syntax then\n          return;\n       end if;"}, {"sha": "c16da0402079cac8075711849979ae0cc6852283", "filename": "gcc/ada/ug_words", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1250f802690505f7b38517a0f0e9cb9957532010/gcc%2Fada%2Fug_words", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1250f802690505f7b38517a0f0e9cb9957532010/gcc%2Fada%2Fug_words", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fug_words?ref=1250f802690505f7b38517a0f0e9cb9957532010", "patch": "@@ -160,17 +160,25 @@ gcc -c          ^ GNAT COMPILE\n -gnatw.H        ^ /WARNINGS=NOAVOIDGAPS\n -gnatwi         ^ /WARNINGS=IMPLEMENTATION\n -gnatwI         ^ /WARNINGS=NOIMPLEMENTATION\n+-gnatw.i        ^ /WARNINGS=OVERLAPPING_ACTUALS\n+-gnatw.I        ^ /WARNINGS=NOOVERLAPPING_ACTUALS\n -gnatwj         ^ /WARNINGS=OBSOLESCENT\n -gnatwJ         ^ /WARNINGS=NOOBSOLESCENT\n -gnatwk         ^ /WARNINGS=CONSTANT_VARIABLES\n -gnatwK         ^ /WARNINGS=NOCONSTANT_VARIABLES\n+-gnatw.k        ^ /WARNINGS=STANDARD_REDEFINITION\n+-gnatw.K        ^ /WARNINGS=NOSTANDARD_REDEFINITION\n -gnatwl         ^ /WARNINGS=ELABORATION\n -gnatwL         ^ /WARNINGS=NOELABORATION\n+-gnatwl         ^ /WARNINGS=INHERITED_ASPECTS\n+-gnatwL         ^ /WARNINGS=NOINHERITED_ASPECTS\n -gnatwm         ^ /WARNINGS=MODIFIED_UNREF\n -gnatwM         ^ /WARNINGS=NOMODIFIED_UNREF\n -gnatw.m        ^ /WARNINGS=SUSPICIOUS_MODULUES\n -gnatw.M        ^ /WARNINGS=NOSUSPICIOUS_MODULUES\n -gnatwn         ^ /WARNINGS=NORMAL\n+-gnatw.n        ^ /WARNINGS=ATOMIC_SYNCHRONIZATION\n+-gnatw.N        ^ /WARNINGS=NOATOMIC_SYNCHRONIZATION\n -gnatwo         ^ /WARNINGS=OVERLAYS\n -gnatwO         ^ /WARNINGS=NOOVERLAYS\n -gnatw.o        ^ /WARNINGS=OUT_PARAM_UNREF\n@@ -188,14 +196,20 @@ gcc -c          ^ GNAT COMPILE\n -gnatwr         ^ /WARNINGS=REDUNDANT\n -gnatwR         ^ /WARNINGS=NOREDUNDANT\n -gnatws         ^ /WARNINGS=SUPPRESS\n+-gnatw.s        ^ /WARNINGS=OVERRIDING_SIZE\n+-gnatw.S        ^ /WARNINGS=NOOVERRIDING_SIZE\n -gnatwt         ^ /WARNINGS=DELETED_CODE\n -gnatwT         ^ /WARNINGS=NODELETED_CODE\n+-gnatw.t        ^ /WARNINGS=SUSPICIOUS_CONTRACT\n+-gnatw.T        ^ /WARNINGS=NOSUSPICIOUS_CONTRACT\n -gnatwu         ^ /WARNINGS=UNUSED\n -gnatwU         ^ /WARNINGS=NOUNUSED\n -gnatw.u        ^ /WARNINGS=UNORDERED_ENUMERATIONS\n -gnatw.U        ^ /WARNINGS=NOUNORDERED_ENUMERATIONS\n -gnatwv         ^ /WARNINGS=VARIABLES_UNINITIALIZED\n -gnatwV         ^ /WARNINGS=NOVARIABLES_UNINITIALIZED\n+-gnatw.v        ^ /WARNINGS=REVERSE_BIT_ORDER\n+-gnatw.V        ^ /WARNINGS=NOREVERSE_BIT_ORDER\n -gnatww         ^ /WARNINGS=LOWBOUND_ASSUMED\n -gnatwW         ^ /WARNINGS=NOLOWBOUND_ASSUMED\n -gnatw.w        ^ /WARNINGS=WARNINGS_OFF_PRAGMAS\n@@ -204,8 +218,8 @@ gcc -c          ^ GNAT COMPILE\n -gnatwX         ^ /WARNINGS=NOIMPORT_EXPORT_PRAGMAS\n -gnatw.x        ^ /WARNINGS=LOCAL_RAISE_HANDLING\n -gnatw.X        ^ /WARNINGS=NOLOCAL_RAISE_HANDLING\n--gnatwy         ^ /WARNINGS=ADA_2005_COMPATIBILITY\n--gnatwY         ^ /WARNINGS=NOADA_2005_COMPATIBILITY\n+-gnatwy         ^ /WARNINGS=ADA_COMPATIBILITY\n+-gnatwY         ^ /WARNINGS=NOADA_COMPATIBILITY\n -gnatw.y        ^ /WARNINGS=WHY_SPEC_NEEDS_BODY\n -gnatw.Y        ^ /WARNINGS=NOWHY_SPEC_NEEDS_BODY\n -gnatwz         ^ /WARNINGS=UNCHECKED_CONVERSIONS\n@@ -250,3 +264,4 @@ stderr          ^ SYS$ERROR\n -H32            ^ /32_MALLOC\n -H64            ^ /64_MALLOC\n -Wall           ^ /WARNINGS=ALL_GCC\n+-Wuninitialized ^ /WARNINGS=UNINITIALIZED"}, {"sha": "c3ad7565be6049dd6514a64193ebf500cd613579", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 342, "deletions": 216, "changes": 558, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1250f802690505f7b38517a0f0e9cb9957532010/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1250f802690505f7b38517a0f0e9cb9957532010/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=1250f802690505f7b38517a0f0e9cb9957532010", "patch": "@@ -3132,6 +3132,10 @@ package VMS_Data is\n                                                \"-gnatwi \"                  &\n                                             \"NOIMPLEMENTATION \"            &\n                                                \"-gnatwI \"                  &\n+                                            \"OVERLAPPING_ACTUALS \"         &\n+                                               \"-gnatw.i \"                 &\n+                                            \"NOOVERLAPPING_ACTUALS \"       &\n+                                               \"-gnatw.I \"                 &\n                                             \"OBSOLESCENT \"                 &\n                                                \"-gnatwj \"                  &\n                                             \"NOOBSOLESCENT \"               &\n@@ -3148,6 +3152,10 @@ package VMS_Data is\n                                                \"-gnatwl \"                  &\n                                             \"NOELABORATION \"               &\n                                                \"-gnatwL \"                  &\n+                                            \"INHERITED_ASPECTS \"           &\n+                                               \"-gnatw.l \"                 &\n+                                            \"NOINHERITED_ASPECTS \"         &\n+                                               \"-gnatw.L \"                 &\n                                             \"MODIFIED_UNREF \"              &\n                                                \"-gnatwm \"                  &\n                                             \"NOMODIFIED_UNREF \"            &\n@@ -3158,6 +3166,10 @@ package VMS_Data is\n                                                \"-gnatw.M \"                 &\n                                             \"NORMAL \"                      &\n                                                \"-gnatwn \"                  &\n+                                            \"ATOMIC_SYNCHRONIZATION \"      &\n+                                               \"-gnatw.n \"                 &\n+                                            \"NOATOMIC_SYNCHRONIZATION \"    &\n+                                               \"-gnatw.N \"                 &\n                                             \"OVERLAYS \"                    &\n                                                \"-gnatwo \"                  &\n                                             \"NOOVERLAYS \"                  &\n@@ -3170,12 +3182,12 @@ package VMS_Data is\n                                                \"-gnatwp \"                  &\n                                             \"NOINEFFECTIVE_INLINE \"        &\n                                                \"-gnatwP \"                  &\n-                                            \"MISSING_PARENS \"              &\n-                                               \"-gnatwq \"                  &\n                                             \"PARAMETER_ORDER \"             &\n                                                \"-gnatw.p \"                 &\n                                             \"NOPARAMETER_ORDER \"           &\n                                                \"-gnatw.P \"                 &\n+                                            \"MISSING_PARENS \"              &\n+                                               \"-gnatwq \"                  &\n                                             \"NOMISSING_PARENS \"            &\n                                                \"-gnatwQ \"                  &\n                                             \"REDUNDANT \"                   &\n@@ -3196,6 +3208,10 @@ package VMS_Data is\n                                                \"-gnatwt \"                  &\n                                             \"NODELETED_CODE \"              &\n                                                \"-gnatwT \"                  &\n+                                            \"SUSPICIOUS_CONTRACT \"         &\n+                                               \"-gnatw.t \"                 &\n+                                            \"NOSUSPICIOUS_CONTRACT \"       &\n+                                               \"-gnatw.T \"                 &\n                                             \"UNINITIALIZED \"               &\n                                                \"-Wuninitialized \"          &\n                                             \"UNUSED \"                      &\n@@ -3230,9 +3246,9 @@ package VMS_Data is\n                                                \"-gnatw.x \"                 &\n                                             \"NOLOCAL_RAISE_HANDLING \"      &\n                                                \"-gnatw.X \"                 &\n-                                            \"ADA_2005_COMPATIBILITY \"      &\n+                                            \"ADA_COMPATIBILITY \"           &\n                                                \"-gnatwy \"                  &\n-                                            \"NOADA_2005_COMPATIBILITY \"    &\n+                                            \"NOADA_COMPATIBILITY \"         &\n                                                \"-gnatwY \"                  &\n                                             \"WHY_SPEC_NEEDS_BODY \"         &\n                                                \"-gnatw.y \"                 &\n@@ -3256,272 +3272,382 @@ package VMS_Data is\n    --   error. Second, if the compiler detects a situation that is sure to\n    --   raise an exception at runtime, it generates a warning message.\n    --\n-   --   You may specify the following keywords to change this behavior:\n-   --\n-   --   DEFAULT (D)             The default behavior above.\n-   --\n-   --   ALL                     Activate all optional warnings.\n-   --                           Activates most optional warning messages,\n-   --                           see remaining list in this section for\n-   --                           details on optional warning messages that\n-   --                           can be individually controlled.\n-   --                           The warnings that are not turned on by\n-   --                           this option are BIASED_ROUNDING,\n-   --                           IMPLICIT_DEREFERENCE, HIDING and\n-   --                           ELABORATION. All other optional Ada\n-   --                           warnings are turned on.\n-   --\n-   --   EVERY                   Activate every optional warning.\n-   --                           Activates all optional warnings, including\n-   --                           those listed above as exceptions for ALL.\n-   --\n-   --   NOALL                   Suppress all optional errors.\n-   --                           Suppresses all optional warning messages\n-   --                           that can be activated by option ALL.\n-   --\n-   --   ALL_GCC                 Request additional messages from the GCC\n-   --                           backend.  Most of these are not relevant\n-   --                           to Ada.\n-   --\n-   --   CONDITIONALS            Activate warnings for conditional\n-   --                           Expressions used in tests that are known\n-   --                           to be True or False at compile time. The\n-   --                           default is that such warnings are not\n-   --                           generated.\n+   --   You may specify the following keywords to change this behavior.\n+   --\n+   --   DEFAULT (D)               The default behavior. This includes the\n+   --                             following categories of warnings:\n+   --\n+   --                               ADA_COMPATIBILITY\n+   --                               ADDRESS_CLAUSE_OVERLAY\n+   --                               BIASED_REPRESENTATION\n+   --                               IMPORT_EXPORT_PRAGMAS\n+   --                               FAILING_ASSERTIONS\n+   --                               IMPLEMENTATION\n+   --                               LOWBOUND_ASSUMED\n+   --                               MISSING_PARENS\n+   --                               OVERLAPPING_ACTUALS\n+   --                               REVERSE_BIT_ORDER\n+   --                               SUSPICIOUS_CONTRACT\n+   --                               SUSPICIOUS_MODULUS\n+   --                               UNCHECKED_CONVERSIONS\n+   --                               UNRECOGNIZED_PRAGMA\n+   --                               VARIABLES_UNINITIALIZED\n+   --\n+   --                             as well as all warnings that cannot be\n+   --                             individually suppressed.\n+   --\n+   --   ALL                       Activate all optional warnings.\n+   --                             Activates the most commong used optional\n+   --                             warning messages. The warnings that are not\n+   --                             turned on by this are:\n+   --\n+   --                               ADDRESS_CLAUSE_OVERLAY\n+   --                               ATOMIC_SYNCHRONIZATION\n+   --                               AVOID_GAPS\n+   --                               BAD_FIXED_VALUE\n+   --                               BIASED_ROUNDING\n+   --                               DELETED_CODE\n+   --                               ELABORATION\n+   --                               HIDING\n+   --                               IMPLICIT_DEREFERENCE\n+   --                               INHERITED_ASPECTS\n+   --                               OUT_PARAM_UNREF\n+   --                               OVERLAPPING_ACTUALS\n+   --                               OVERRIDING_SIZE\n+   --                               STANDARD_REDEFINITION\n+   --                               SUSPICIOUS_MODULUS\n+   --                               UNORDERED_ENUMERATION\n+   --                               WARNINGS_OFF_PRAGMAS\n+   --                               WHY_BODY_NEEDED\n+   --\n+   --                             All other optional warnings are turned on.\n+   --\n+   --   OPTIONAL                  Turn on standard optional warnings.\n+   --                             This has the same effect as ALL.\n+   --\n+   --   NOALL                     Suppress all optional errors.\n+   --                             Suppresses all optional warning messages\n+   --                             including those not activated by ALL.\n+   --\n+   --   NOOPTIONAL                Turn off standard optional warnings.\n+   --                             This has the same effect as NOALL\n+   --\n+   --   EVERY                     Activate every optional warning.\n+   --                             Activates all optional warnings, including\n+   --                             those listed above as exceptions for ALL.\n+   --\n+   --   ALL_GCC                   Request additional messages from the GCC\n+   --                             backend. Most of these are not Ada-relevant.\n+   --\n+   --   UNINITIALIZED             Activate warnings for uninitialized\n+   --                             variables. This is a GCC option, not an Ada\n+   --                             option. You must also specify the /OPTIMIZE\n+   --                             qualifier with a value other than NONE (in\n+   --                             other words, this option is effective only\n+   --                             if optimization is turned on).\n+\n+   --   ERRORS                    Warning messages are to be treated as errors.\n+   --                             The warning string still appears, but the\n+   --                             warning messages are counted as errors, and\n+   --                             prevent the generation of an object file.\n+   --\n+   --   SUPPRESS                  Completely suppress the output of all warning\n+   --                             messages. Same as /NOWARNINGS.\n+   --\n+   --   NORMAL                    Sets normal warning mode, in which enabled\n+   --                             warnings are issued and treated as warnings\n+   --                             rather than errors. This is the default mode.\n+   --                             It can be used to cancel the effect of an\n+   --                             explicit /WARNINGS=SUPPRESS or\n+   --                             /WARNINGS=ERRORS. It also cancels the effect\n+   --                             of the implicit /WARNINGS=ERRORS that is\n+   --                             activated by the use of /STYLE=GNAT.\n+   --\n+   --   TAG_WARNINGS              Causes the string [xxx] to be added to\n+   --                             warnings that are controlled by the warning\n+   --                             switch -gnat??. See below for list of these\n+   --                             equivalent switch names.\n    --\n-   --   NOCONDITIONALS          Suppress warnings for conditional\n-   --                           expressions used in tests that are known\n-   --                           to be True or False at compile time.\n+   --   NOTAG_WARNINGS          Turns off warning tag output (default setting).\n    --\n-   --   IMPLICIT_DEREFERENCE    Activate warnings on implicit dereferencing.\n-   --                           The use of a prefix of an access type in an\n-   --                           indexed component, slice, or selected component\n-   --                           without an explicit .all will generate\n-   --                           a warning. With this warning enabled, access\n-   --                           checks occur only at points where an explicit\n-   --                           .all appears in the source code (assuming no\n-   --                           warnings are generated as a result of this\n-   --                           option). The default is that such warnings are\n-   --                           not generated. Note that /WARNINGS=ALL does not\n-   --                           affect the setting of this warning option.\n-   --\n-   --   NOIMPLICIT_DEREFERENCE  Suppress warnings on implicit dereferencing.\n-   --                           in indexed components, slices, and selected\n-   --                           components.\n-   --\n-   --   ELABORATION             Activate warnings on missing pragma\n-   --                           Elaborate_All statements. The default is\n-   --                           that such warnings are not generated.\n-   --\n-   --   NOELABORATION           Suppress warnings on missing pragma\n-   --                           Elaborate_All statements.\n-   --\n-   --   ERRORS                  Warning messages are to be treated as errors.\n-   --                           The warning string still appears, but the\n-   --                           warning messages are counted as errors, and\n-   --                           prevent the generation of an object file.\n+   --   The remaining entries control individual warning categories. If one\n+   --   of these options is preceded by NO (e.g. NOAVOID_GAPS), then the\n+   --   corresponding class of warnings is suppressed. The -gnatwxx tag\n+   --   below the name indicates the non-VMS warning switch option. This is\n+   --   used in the warning tags generated by TAG_WARNINGS (above)\n+   --\n+   --   ADA_COMPATIBILITY       Activate warnings for Ada compatibility issues.\n+   --   (-gnatwy)               This generates warnings for usages which are\n+   --                           legal, but may cause difficulties with later\n+   --                           Ada versions (e.g. the use of INTERFACE as an\n+   --                           identifier, which is legal in Ada 85, but in\n+   --                           Ada 2005, this is a reserved word).\n+   --\n+   --   ATOMIC_SYNCHRONIZATION  Activate info msgs for atomic synchronization.\n+   --   (-gnatw.n)              This generates information messages when an\n+   --                           access to an atomic variable requires the\n+   --                           generation of atomic synchronization code.\n+   --\n+   --   AVOID_GAPS              Activate warnings for gaps in records.\n+   --   (-gnatw.h)              This outputs a warning if a representation\n+   --                           clause for a record leaves unallocated bits.\n+   --\n+   --   BAD_FIXED_VALUES        Activate warnings on bad fixed values.\n+   --   (-gnatwb)               When this is enabled, a fixed-type literal\n+   --                           will generate a warning if its value does not\n+   --                           correspond to an exact value of the type and\n+   --                           is thus subject to rounding.\n+   --\n+   --   BIASED_REPRESENTATION   Activate warnings for biased representations.\n+   --   (-gnatw.b)              A warning will be generated if a size clause\n+   --                           or a component clause forces use of a biased\n+   --                           representation (e.g. range 1..5 with size 2).\n+   --\n+   --   CONDITIONALS            Activate warnings for conditional expressions\n+   --   (-gnatwc)               in tests where the expression is known to\n+   --                           be True or False at compile time.\n+   --\n+   --   DELETED_CODE            Activate warning for conditional deleted code.\n+   --   (-gnatwt)               This option generates warnings for tracking of\n+   --                           code in conditionals (IF and CASE statements)\n+   --                           that is detected to be dead code which cannot\n+   --                           be executed, and which is removed by the\n+   --                           front end. This may be useful for detecting\n+   --                           deactivated code in certified applications.\n+   --\n+   --   CONSTANT_VARIABLES      Activate warnings on constant variables.\n+   --   (-gnatwk)               A warning is output for a variable which could\n+   --                           have been declared as a constant.\n+   --\n+   --   ELABORATION             Activate warnings on missing pragma Elaborate\n+   --   (-gnatwl)               and Elaborate_All statements.\n+   --\n+   --   FAILING_ASSERTIONS      Activate warnings on failing assertions.\n+   --   (-gnatw.a)              Generates a warning for assertions that are\n+   --                           sure to fail.\n    --\n    --   HIDING                  Activate warnings on hiding declarations.\n-   --                           A declaration is considered hiding if it is\n-   --                           for a non-overloadable entity, and it declares\n+   --   (-gnatwh)               A declaration is considered hiding if it is\n+   --                           for a non-overloadable entity, and declares\n    --                           an entity with the same name as some other\n-   --                           entity that is directly or use-visible. The\n-   --                           default is that such warnings are not\n-   --                           generated.\n+   --                           entity that is directly or use-visible.\n    --\n-   --   NOHIDING                Suppress warnings on hiding declarations.\n+   --   IMPORT_EXPORT_PRAGMAS   Activate warnings on import-export pragmas.\n+   --   (-gnatwx)               This generates a warning on an Export or Import\n+   --                           pragma when the compiler detects a possible\n+   --                           conflict between the Ada and foreign language\n+   --                           calling sequences. For example, the use of\n+   --                           default parameters in a convention C procedure\n+   --                           is dubious because the C compiler cannot supply\n+   --                           the proper default, so a warning is issued.\n    --\n    --   IMPLEMENTATION          Activate warnings for a with of an internal\n-   --                           GNAT implementation unit, defined as any unit\n-   --                           from the Ada, Interfaces, GNAT, DEC or\n-   --                           System hierarchies that is not documented in\n-   --                           either the Ada Reference Manual or the GNAT\n-   --                           Programmer's Reference Manual. Such units are\n-   --                           intended only for internal implementation\n-   --                           purposes and should not be with'ed by user\n-   --                           programs. The default is that such warnings\n-   --                           are generated.\n-   --\n-   --   NOIMPLEMENTATION        Disables warnings for a with of an internal\n-   --                           GNAT implementation unit.\n-   --\n-   --   INEFFECTIVE_INLINE      Activate warnings on ineffective pragma Inlines\n-   --                           Activates warnings for failure of front end\n-   --                           inlining (activated by /INLINE=FULL) to inline\n-   --                           a particular call. There are many reasons for\n-   --                           not being able to inline a call, including most\n+   --   (-gnatwi)               GNAT implementation unit, defined as any unit\n+   --                           from the Ada, Interfaces, GNAT, DEC or System\n+   --                           hierarchies that is not documented in the\n+   --                           Ada Reference Manual or the GNAT Programmer's\n+   --                           Reference Manual. Such units are intended only\n+   --                           for internal implementation purposes and may\n+   --                           change from version to veresion, and should\n+   --                           not be with'ed by user programs.\n+   --\n+   --   IMPLICIT_DEREFERENCE    Activate warnings on implicit dereferencing.\n+   --   (-gnatwd)               The use of a prefix of an access type in an\n+   --                           indexed component, slice, or selected component\n+   --                           without an explicit .all will generate a\n+   --                           warning. When this warning is enabled, and no\n+   --                           warnings of this type are generated, access\n+   --                           checks occur only at points where the source\n+   --                           program contains an explicit use of .all.\n+   --\n+   --   INEFFECTIVE_INLINE      Activate warnings on ineffective Inlines.\n+   --   (-gnatwp)               Activates warnings for failure of front end\n+   --                           inlining (activated by /INLINE=FULL) to\n+   --                           inline a particular call when a pragma Inline\n+   --                           applies. There are many reasons for not\n+   --                           being able to inline a call, including most\n    --                           commonly that the call is too complex to\n    --                           inline. This warning can also be turned on\n    --                           using /INLINE=FULL.\n    --\n-   --   NOINEFFECTIVE_INLINE    Suppress warnings on ineffective pragma Inlines\n-   --                           Suppresses warnings on ineffective pragma\n-   --                           Inlines. If the inlining mechanism cannot\n-   --                           inline a call, it will simply ignore the\n-   --                           request silently.\n+   --   INHERITED_ASPECTS       Activate info messages for inherited aspects.\n+   --   (-gantw.l)              Outputs information messages for tagged types\n+   --                           that inherit aspects from a parent.\n    --\n-   --   MISSING_COMPONENT_CLAUSES\n-   --                           Activate warnings for cases when there are\n-   --                           component clauses for a record type, but not\n-   --                           for every component of the record.\n+   --   LOCAL_RAISE_HANDLING    Activate warnings for No_Exception_Propagation.\n+   --   (-gnatw.x)              This generates warnings for exception usage\n+   --                           when the No_Exception_Propagation restriction\n+   --                           is in effect. Warnings are given for implicit\n+   --                           or explicit exception raises which are not\n+   --                           covered by a local handler, and for exception\n+   --                           handlers which do not cover a local raise.\n    --\n-   --   NOMISSING_COMPONENT_CLAUSES\n-   --                           Suppress warnings for cases when there are\n-   --                           missing component clauses for a record type.\n+   --   LOWBOUND_ASSUMED        Activate warnings for low bound assumptions.\n+   --   (-gnatww)               Outputs warnings if code appears to depend on\n+   --                           an assumption about the lower bound of one of\n+   --                           the subprogram parameters (for example using\n+   --                           S(1 .. 5) instead of S(S'First .. S'First + 4).\n    --\n-   --   MISSING_PARENS\n-   --                           Activate warnings for cases where parentheses\n+   --   MISSING_COMPONENT_CLAUSES\n+   --   (-gnatw.c)              Activate warnings for unrepped component.\n+   --                           Generates a warning for a record component\n+   --                           which does not have a component clause if\n+   --                           at least one component claused is present\n+   --                           for some other component of the record.\n+   --\n+   --   MISSING_PARENS          Activate warnings for missing parentheses.\n+   --   (-gnatwq)               Outputs a warning for cases where parentheses\n    --                           are not used and the result is potential\n    --                           ambiguity from a reader's point of view.\n    --                           For example (not a > b) when a and b are\n    --                           modular means (not (a) > b) and very likely\n    --                           the programmer intended (not (a > b)).\n    --\n-   --   NOMISSING_PARENS\n-   --                           Suppress warnings for cases where parentheses\n-   --                           are not used and the result is potential\n-   --                           ambiguity from a reader's point of view.\n-   --\n-   --   MODIFIED_UNREF          Activates warnings for variables that are\n-   --                           assigned (using an initialization value or with\n-   --                           one or more assignment statements) but whose\n-   --                           value is never read. The warning is suppressed\n-   --                           for volatile variables and also for variables\n+   --   MODIFIED_UNREF          Activate warning for assigned but not read.\n+   --   (-gnatwm)               Outputs a warning for variables that are\n+   --                           assigned (using an initialization value or an\n+   --                           assignment statements) but whose value is\n+   --                           never read. The warning is suppressed for\n+   --                           volatile variables and also for variables\n    --                           that are renamings of other variables or for\n-   --                           which an address clause is given. This warning\n-   --                           can also be turned on using /WARNINGS/OPTIONAL.\n-   --\n-   --   NOMODIFIED_UNREF        Disables warnings for variables that are\n-   --                           assigned or initialized, but never read.\n+   --                           which an address clause is given.\n    --\n-   --   NORMAL                  Sets normal warning mode, in which enabled\n-   --                           warnings are issued and treated as warnings\n-   --                           rather than errors. This is the default mode.\n-   --                           It can be used to cancel the effect of an\n-   --                           explicit /WARNINGS=SUPPRESS or\n-   --                           /WARNINGS=ERRORS. It also cancels the effect\n-   --                           of the implicit /WARNINGS=ERRORS that is\n-   --                           activated by the use of /STYLE=GNAT.\n+   --   OBJECT_RENAME           Activate warnings for non limited objects\n+   --   (-gnatw.r)              renaming parameterless functions.\n    --\n    --   OBSOLESCENT             Activates warnings for calls to subprograms\n-   --                           marked with pragma Obsolescent and for use of\n+   --   (-gnatwj)               marked with pragma Obsolescent and for use of\n    --                           features in Annex J of the Ada Reference\n    --                           Manual. In the case of Annex J, not all\n-   --                           features are flagged. In particular use of the\n-   --                           renamed packages (like Text_IO), use of package\n-   --                           ASCII and use of the attribute 'Constrained are\n-   --                           not flagged, since these are very common and\n-   --                           would generate many annoying positive warnings.\n-   --                           The default is that such warnings are not\n-   --                           generated.\n-   --\n-   --   NOOBSOLESCENT           Disables warnings on use of obsolescent\n-   --                           features.\n-   --\n-   --   OBJECT_RENAME           Activate warnings for non limited objects\n-   --                           renaming parameterless functions.\n-   --\n-   --   NOOBJECT_RENAME         Suppress warnings for non limited objects\n-   --                           renaming parameterless functions.\n-   --\n-   --   OPTIONAL                Equivalent to ALL.\n-   --\n-   --   NOOPTIONAL              Equivalent to NOALL.\n+   --                           features are flagged. In particular use of\n+   --                           the renamed packages (like Text_IO), use of\n+   --                           package ASCII,  and use of the attribute\n+   --                           'Constrained are not flagged, since these are\n+   --                           common and would generate many annoying\n+   --                           false-positive warnings.\n+   --\n+   --   OUT_PARAM_UNREF         Activate warnings on unreferenced OUT params.\n+   --   (-gantw.o)              This switch activates warnings for variables\n+   --                           that are modified by using them as actuals for\n+   --                           a call to a procedure with an out mode formal,\n+   --                           where the resulting assigned value is never\n+   --                           read. It is applicable in the case where there\n+   --                           is more than one out mode formal. If there is\n+   --                           only one out mode formal, the warning is issued\n+   --                           by default (controlled by UNUSED). The warning\n+   --                           is suppressed for volatile variables and also\n+   --                           for variables that are renamings of other\n+   --                           variables or for which an address clause\n+   --                           is given.\n+   --\n+   --   OVERLAPPING_ACTUALS     Activate warnings on overlapping actuals.\n+   --   (-gnatw.i)              Enables a warning on statically detectable\n+   --                           overlapping actuals in a subprogram call,\n+   --                           when one of the actuals is an in-out\n+   --                           parameter, and the types of the actuals\n+   --                           are not by-copy types.\n    --\n    --   OVERLAYS                Activate warnings for possibly unintended\n-   --                           initialization effects of defining address\n-   --                           clauses that cause one variable to overlap\n-   --                           another. The default is that such warnings\n-   --                           are generated.\n-   --\n-   --   NOOVERLAYS              Suppress warnings on possibly unintended\n-   --                           initialization effects of defining address\n+   --   (-gnatwo)               initialization effects of defining address\n    --                           clauses that cause one variable to overlap\n    --                           another.\n    --\n-   --   REDUNDANT               Activate warnings for redundant constructs.\n-   --                           In particular assignments of a variable to\n-   --                           itself, and a type conversion that converts\n-   --                           an object to its own type. The default\n-   --                           is that such warnings are not generated.\n+   --   OVERRIDING_SIZE         Activate warning on overridden size clause.\n+   --   (-gnatw.s)              Generates a warning if an explicit size clause\n+   --                           is overridden by a component clause in a record\n+   --                           or a component size in an array.\n    --\n-   --   NOREDUNDANT             Suppress warnings for redundant constructs.\n+   --   PARAMETER_ORDER         Activate warnings for suspicious parameter\n+   --   (-gnatw.p)              ordering. A warning is generated if positional\n+   --                           ordering is used and the actuals match the\n+   --                           formal names, but are in the wrong order (e.g.\n+   --                           GEN (B, A), when the formals of GEN are A, B.)\n+   --                           No warning is generated for named parameters,\n+   --                           so GEN (A => B, B => A) would be allowed.\n    --\n-   --   SUPPRESS                Completely suppress the output of all warning\n-   --                           messages.  Same as /NOWARNINGS.\n+   --   REDUNDANT               Activate warnings for redundant constructs.\n+   --   (-gnatwr)               In particular assignments of a variable to\n+   --                           itself, and a type conversion that converts\n+   --                           an object to its own type.\n+   --\n+   --   REVERSE_BIT_ORDER       Activates info messages for reverse bit order.\n+   --   (-gnatw.v)              Generates information messages that show the\n+   --                           effect of specifying reverse bit order for\n+   --                           a record on individual components.\n+   --\n+   --   STANDARD_REDEFINITION   Activate warnings on standard redefinition.\n+   --   (-gnatw.k)              Generates a warning message if a declaration\n+   --                           declares an identifier that matches one that\n+   --                           is declared in package Standard (e.g. Float).\n+   --\n+   --   SUSPICIOUS_CONTRACT     Activate warnings on suspicious postconditions.\n+   --   (-gnatw.t)              This generates warnings if a postcondition for\n+   --                           a function does not mention the result, or if\n+   --                           a postcondition for a procedure depends only on\n+   --                           the entry values of the parameters.\n+   --\n+   --   SUSPICIOUS_MODULUS      Warn on suspicious modulus values, for\n+   --   (-gnatw.m)              example \"mod 7\" is suspicious for a size with\n+   --                           7 bits, since it was likely intended to be\n+   --                           \"mod 2**7\". Similarly \"mod 32\" is considered\n+   --                           suspicious, since it was likely intended to\n+   --                           be \"mod 2**32\".\n    --\n    --   UNCHECKED_CONVERSIONS   Activates warnings on unchecked conversions.\n-   --                           Causes warnings to be generated for\n-   --                           unchecked conversions when the two types are\n-   --                           known at compile time to have different sizes.\n-   --                           The default is that such warnings are\n-   --                           generated.\n+   --   (-gnatwz)               Causes warnings to be generated for unchecked\n+   --                           conversions between types that are known at\n+   --                           compile time to have different sizes.\n    --\n-   --   NOUNCHECKED_CONVERSIONS Suppress warnings for unchecked conversions.\n+   --   UNORDERED_ENUMERATION   Activate warnings for unordered enumeration.\n+   --   (-gnatw.u)              Causes warnings to be generated if for an\n+   --                           enumeration type that does not have a pragma\n+   --                           Ordered that applies, if a subtype with a\n+   --                           range is used, or a comparison other than\n+   --                           [in]equality appears for values of the type.\n    --\n-   --   UNINITIALIZED           Generate warnings for uninitialized variables.\n-   --                           This is a GCC option, not an Ada option.\n-   --                           You must also specify the /OPTIMIZE qualifier\n-   --                           with a value other than NONE (in other words,\n-   --                           this keyword works only if optimization is\n-   --                           turned on).\n+   --   UNRECOGNIZED_PRAGMAS    Activate warnings for unrecognized pragmas.\n+   --   (-gnatwg)               Such pragmas are ignored other than generating\n+   --                           these warnings.\n    --\n    --   UNREFERENCED_FORMALS    Activate warnings on unreferenced formals.\n-   --                           Causes a warning to be generated if a formal\n+   --   (-gnatwf)               Causes a warning to be generated if a formal\n    --                           parameter is not referenced in the body of\n-   --                           the subprogram. This warning can also be turned\n-   --                           on using option ALL or UNUSED.\n-   --\n-   --   NOUNREFERENCED_FORMALS  Suppress warnings on unreferenced formals.\n-   --                           Suppresses warnings for unreferenced formal\n-   --                           parameters. Note that the combination UNUSED\n-   --                           followed by NOUNREFERENCED_FORMALS has the\n-   --                           effect of warning on unreferenced entities\n-   --                           other than subprogram formals.\n+   --                           the subprogram. Note that the combination\n+   --                           UNUSED followed by NOUNREFERENCED_FORMALS\n+   --                           has the effect of warning on unreferenced\n+   --                           entities other than subprogram formals.\n    --\n    --   UNUSED                  Activates warnings to be generated for entities\n-   --                           that are defined but not referenced, and for\n+   --   (-gantwu)               that are defined but not referenced, and for\n    --                           units that are with'ed and not referenced. In\n    --                           the case of packages, a warning is also\n    --                           generated if no entities in the package are\n    --                           referenced. This means that if the package\n    --                           is referenced but the only references are in\n-   --                           use clauses or renames declarations, a warning\n-   --                           is still generated. A warning is also generated\n-   --                           for a generic package that is with'ed but never\n-   --                           instantiated.  In the case where a package or\n-   --                           subprogram body is compiled, and there is a\n-   --                           with on the corresponding spec that is only\n-   --                           referenced in the body, a warning is also\n-   --                           generated, noting that the with can be moved\n-   --                           to the body. The default is that such warnings\n-   --                           are not generated.\n-   --\n-   --   NOUNUSED                Suppress warnings for unused entities and\n-   --                           packages.\n+   --                           in use clauses or renames declarations, a\n+   --                           warning is still generated. A warning is also\n+   --                           generated for a generic package that is\n+   --                           with'ed but never instantiated. In the case\n+   --                           where a package or subprogram body is\n+   --                           compiled, and there is a with on the\n+   --                           corresponding spec that is only referenced\n+   --                           in the body, a warning is also generated,\n+   --                           noting the with can be moved to the body.\n    --\n    --   VARIABLES_UNINITIALIZED Activates warnings on unassigned variables.\n-   --                           Causes warnings to be generated when a variable\n-   --                           is accessed which may not be properly\n-   --                           uninitialized. The default is that such\n-   --                           warnings are generated.\n-   --\n-   --   NOVARIABLES_UNINITIALIZED\n-   --                           Suppress warnings for uninitialized variables.\n+   --   (-gnatwv)               Causes warnings to be generated when a\n+   --                           variable is accessed which may not be\n+   --                           properly initialized.\n    --\n-   --   TAG_WARNINGS            Causes the string [xxx] to be added to warnings\n-   --                           that are controlled by the warning string xxx,\n-   --                           e.g. [REDUNDANT], or if the warning is enabled\n-   --                           by default, the tag is [enabled by default].\n-   --\n-   --   NOTAG_WARNINGS          Turns off warning tag output (default setting).\n+   --   WARNINGS_OFF_PRAGMAS    Activates warnings for pragma Warnings (Off).\n+   --   (-gnatw.w)              This generates a warning if the specific string\n+   --                           version the pragma is used as a local pragma\n+   --                           (i.e. not a configuration pragma) and no\n+   --                           warning is suppressed as a result.\n    --\n    --   WHY_SPEC_NEEDS_BODY     Generates information messages showing why a\n-   --                           package specification requires a body.\n+   --   (-gnatw.y)              package specification requires a body.\n    --\n-   --   NO_WHY_SPEC_NEEDS_BODY  Turns off information messages showing why a\n-   --                           package specification requires a body.\n-\n    S_GCC_WarnX   : aliased constant S := \"/NOWARNINGS \"                    &\n                                             \"-gnatws\";\n    --  NODOC (see /WARNINGS)"}]}