{"sha": "624980241ec69afc7b354f81cc64a1fd77131f3e", "node_id": "C_kwDOANBUbNoAKDYyNDk4MDI0MWVjNjlhZmM3YjM1NGY4MWNjNjRhMWZkNzcxMzFmM2U", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-21T00:16:31Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-09-21T00:16:31Z"}, "message": "Daily bump.", "tree": {"sha": "84529457b7b8ae11484b4ce1ef9c7a0480731071", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84529457b7b8ae11484b4ce1ef9c7a0480731071"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/624980241ec69afc7b354f81cc64a1fd77131f3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/624980241ec69afc7b354f81cc64a1fd77131f3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/624980241ec69afc7b354f81cc64a1fd77131f3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/624980241ec69afc7b354f81cc64a1fd77131f3e/comments", "author": null, "committer": null, "parents": [{"sha": "73cf73af2392e00917de042a4692f6a0b6329ee8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73cf73af2392e00917de042a4692f6a0b6329ee8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73cf73af2392e00917de042a4692f6a0b6329ee8"}], "stats": {"total": 485, "additions": 484, "deletions": 1}, "files": [{"sha": "810b906cbea3ba5df3d2f6bbc7187bf0c0d15761", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624980241ec69afc7b354f81cc64a1fd77131f3e/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624980241ec69afc7b354f81cc64a1fd77131f3e/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=624980241ec69afc7b354f81cc64a1fd77131f3e", "patch": "@@ -1,3 +1,7 @@\n+2021-09-20  Harald Anlauf  <anlauf@gmx.de>\n+\n+\t* MAINTAINERS (Reviewers): Add myself as Fortran reviewer.\n+\n 2021-09-17  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* Makefile.def: Add a jit check target for the jit"}, {"sha": "6521f96547ca08a440d60cd2255aa0a05e4b3a84", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624980241ec69afc7b354f81cc64a1fd77131f3e/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624980241ec69afc7b354f81cc64a1fd77131f3e/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=624980241ec69afc7b354f81cc64a1fd77131f3e", "patch": "@@ -1,3 +1,8 @@\n+2021-09-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* config-list.mk: --enable-obsolete for hppa2.0-hpux10.1 and\n+\thppa2.0-hpux11.9.\n+\n 2021-09-15  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_commit.py: Add FIXME note."}, {"sha": "acbbb71e0531da1a904e2c108ce8405daf04bf3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624980241ec69afc7b354f81cc64a1fd77131f3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624980241ec69afc7b354f81cc64a1fd77131f3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=624980241ec69afc7b354f81cc64a1fd77131f3e", "patch": "@@ -1,3 +1,81 @@\n+2021-09-20  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-fold.cc (fold_using_range::range_of_phi): Ignore\n+\tundefined edges, apply an equivalence if appropriate.\n+\t* gimple-range-gori.cc (gori_compute::outgoing_edge_range_p): Return\n+\tUNDEFINED if EDGE_EXECUTABLE is not set.\n+\t* gimple-range.cc (gimple_ranger::gimple_ranger): Set all edges\n+\tas EXECUTABLE upon startup.\n+\t(gimple_ranger::range_on_edge): Return UNDEFINED for edges without\n+\tEDGE_EXECUTABLE set.\n+\t* vr-values.c (set_and_propagate_unexecutable): New.\n+\t(simplify_using_ranges::fold_cond): Call set_and_propagate.\n+\t(simplify_using_ranges::simplify_switch_using_ranges): Ditto.\n+\t* vr-values.h: Add prototype.\n+\n+2021-09-20  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* value-relation.cc (equiv_oracle::register_initial_def): New.\n+\t(equiv_oracle::register_relation): Call register_initial_def.\n+\t(equiv_oracle::add_equiv_to_block): New.  Split register_relation.\n+\t(relation_oracle::register_stmt): Check def block of PHI arguments.\n+\t* value-relation.h (equiv_oracle): Add new prototypes.\n+\n+2021-09-20  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* cppbuiltin.c (define_builtin_macros_for_compilation_flags):\n+\tDefine __RECIPROCAL_MATH__, __NO_SIGNED_ZEROS__,\n+\t__NO_TRAPPING_MATH__, __ASSOCIATIVE_MATH__, and\n+\t__ROUNDING_MATH__ according to their corresponding flags.\n+\t* doc/cpp.texi: Document __RECIPROCAL_MATH__,\n+\t__NO_SIGNED_ZEROS__, __NO_TRAPPING_MATH__, __ASSOCIATIVE_MATH__,\n+\tand __ROUNDING_MATH__.\n+\n+2021-09-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-stmts.c (vectorizable_load): Use the vectype\n+\tfrom the SLP node.\n+\n+2021-09-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-data-refs.c (vect_duplicate_ssa_name_ptr_info):\n+\tDo not compute alignment of the vectorized access here.\n+\n+2021-09-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment):\n+\tStore -1 for runtime alias peeling iterations.\n+\n+2021-09-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* config.gcc: Obsolete hppa[12]*-*-hpux10* and hppa[12]*-*-hpux11*.\n+\n+2021-09-20  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* input.c (string_concat_db::record_string_concatenation)\n+\t(string_concat_db::get_string_concatenation): Skip for\n+\t'RESERVED_LOCATION_P'.\n+\n+2021-09-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/65206\n+\t* tree-data-ref.h (struct data_reference): Add alt_indices,\n+\torder it last.\n+\t* tree-data-ref.c (free_data_ref): Release alt_indices.\n+\t(dr_analyze_indices): Work on struct indices and get DR_REF as tree.\n+\t(create_data_ref): Adjust.\n+\t(initialize_data_dependence_relation): Split into head\n+\tand tail.  When the base objects fail to match up try\n+\tagain with pointer-based analysis of indices.\n+\t* tree-vectorizer.c (vec_info_shared::check_datarefs): Do\n+\tnot compare the lazily computed alternate set of indices.\n+\n+2021-09-20  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* gcc.c: Test for execute OK when we find the\n+\tprograms for assembler linker and dsymutil and those\n+\twere specified at configure-time.\n+\n 2021-09-19  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/102403"}, {"sha": "ed865cb70abe5f8c41cc735333e02410df0fbfd9", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624980241ec69afc7b354f81cc64a1fd77131f3e/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624980241ec69afc7b354f81cc64a1fd77131f3e/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=624980241ec69afc7b354f81cc64a1fd77131f3e", "patch": "@@ -1 +1 @@\n-20210920\n+20210921"}, {"sha": "56d9baf7e7a67aa21147bcea796b6745929370cf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 336, "deletions": 0, "changes": 336, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624980241ec69afc7b354f81cc64a1fd77131f3e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624980241ec69afc7b354f81cc64a1fd77131f3e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=624980241ec69afc7b354f81cc64a1fd77131f3e", "patch": "@@ -1,3 +1,339 @@\n+2021-09-20  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* inline.adb (Has_Excluded_Declaration): Remove redundant guard;\n+\tthe guarded code will call First on a No_List, which is\n+\twell-defined and gives Empty.\n+\n+2021-09-20  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* inline.adb (Has_Excluded_Declaration): Rename and reduce scope\n+\tof a local variable.\n+\n+2021-09-20  Bob Duff  <duff@adacore.com>\n+\n+\t* uintp.ads, uintp.adb (Present, No): New functions for\n+\tcomparing with No_Uint.\n+\t* checks.adb, einfo-utils.adb, exp_aggr.adb, exp_attr.adb,\n+\texp_ch3.adb, exp_ch4.adb, exp_dbug.adb, exp_disp.adb,\n+\texp_util.adb, repinfo.adb, repinfo-input.adb, scn.adb,\n+\tsem_attr.adb, sem_ch13.adb, sem_eval.adb, sem_util.adb,\n+\tsinfo-utils.adb, treepr.adb: Use Present (...) instead of \"...\n+\t/= No_Uint\", and No (...) instead of \"... = No_Uint\".\n+\n+2021-09-20  Claire Dross  <dross@adacore.com>\n+\n+\t* libgnat/s-ficobl.ads: The entire package has a SPARK_Mode =>\n+\tOff aspect.\n+\n+2021-09-20  Doug Rupp  <rupp@adacore.com>\n+\n+\t* libgnat/a-calend.adb: Remove time_t, replace with OS_Time.\n+\t* libgnat/s-os_lib.ads: Fix comments regarding time_t conversion\n+\tfunctions to reflect the use of To_Ada in in Ada.Calendar\n+\tpackage body.\n+\t* sysdep.c (__gnat_localtime_tzoff): Use OS_Time instead of\n+\ttime_t.\n+\n+2021-09-20  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Actual): Remove\n+\n+2021-09-20  Bob Duff  <duff@adacore.com>\n+\n+\t* einfo-utils.ads, einfo-utils.adb, fe.h, einfo.ads,\n+\tgen_il-fields.ads: Remove unused and no-longer-used routines.\n+\tMove related routines together.  Rewrite incorrect\n+\tdocumentation, and documentation that will be incorrect when\n+\te.g. Esize-related routines are fixed.  Remove unused field\n+\tNormalized_Position_Max.\n+\t* cstand.adb, exp_pakd.adb, freeze.adb,\n+\tgen_il-gen-gen_entities.adb, itypes.adb, layout.adb,\n+\tsem_ch10.adb, sem_ch12.adb, sem_ch13.adb, sem_ch3.adb,\n+\tsem_ch7.adb, sem_ch8.adb, sem_ch9.adb, sem_prag.adb,\n+\tsem_util.adb, ttypes.ads: Update calls to routines removed from\n+\tor renamed in Einfo.Utils.\n+\t* uintp.ads (Upos): Fix this subtype, which was unintentionally\n+\tdeclared to include Uint_0.\n+\n+2021-09-20  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch7.adb (Expand_N_Package_Declaration): Fix wording in\n+\tcomment.\n+\t* exp_disp.adb (Mark_DT): Remove unnecessary initialization of\n+\tI_Depth.\n+\n+2021-09-20  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* contracts.adb (Add_Contract_Item): Accept volatile-related\n+\tproperties on constants.\n+\t(Analyze_Object_Contract): Check external properties on\n+\tconstants; accept volatile constants.\n+\t(Check_Type_Or_Object_External_Properties): Replace \"variable\"\n+\twith \"object\" in error messages; replace Decl_Kind with a local\n+\tconstant.\n+\t* sem_prag.adb (Analyze_Pragma): Accept volatile-related\n+\tproperties on constants.\n+\n+2021-09-20  Pierre-Alexandre Bazin  <bazin@adacore.com>\n+\n+\t* libgnat/a-strfix.adb (\"*\"): Added loop invariants and lemmas\n+\tfor proof.\n+\t(Delete): Added assertions for proof, and conditions to avoid\n+\toverflow.\n+\t(Head): Added loop invariant.\n+\t(Insert): Same as Delete.\n+\t(Move): Declared with SPARK_Mode Off.\n+\t(Overwrite): Added assertions for proof, and conditions to avoid\n+\toverflow.\n+\t(Replace_Slice): Added assertions for proof, and conditions to\n+\tavoid overflow.\n+\t(Tail): Added loop invariant and avoided overflows.\n+\t(Translate): Added loop invariants.\n+\t(Trim): Ensured empty strings returned start at 1.\n+\t* libgnat/a-strfix.ads (Index): Rewrote contract cases for\n+\teasier proof.\n+\t(Index_Non_Blank): Separated the null string case.\n+\t(Count): Specified Mapping shouldn't be null.\n+\t(Find_Token): Specified Source'First should be Positive when no\n+\tFrom is given.\n+\t(Translate): Specified Mapping shouldn't be null.\n+\t(\"*\"): Rewrote postcondition for easier proof.\n+\t* libgnat/a-strsea.adb (Belongs): Added postcondition.\n+\t(Count): Rewrote loops and added loop invariants to avoid\n+\toverflows.\n+\t(Find_Token): Added loop invariants.\n+\t(Index): Rewrote loops to avoid overflows and added loop\n+\tinvariants for proof.\n+\t(Index_Non_Blank): Added loop invariants.\n+\t(Is_Identity): New function isolated without SPARK_Mode.\n+\t* libgnat/a-strsea.ads: Fix starting comment as package is no\n+\tlonger private.\n+\t(Match): Declared ghost expression function Match.\n+\t(Is_Identity): Described identity in the postcondition.\n+\t(Index, Index_Non_Blank, Count, Find_Token): Added contract from\n+\ta-strfix.ads.\n+\n+2021-09-20  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (Resolve_Aspect_Aggregate): Move comments after\n+\tspecs; fix typo in header box; cleanup whitespace.\n+\n+2021-09-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-objrea.adb (Get_Load_Address): Return 0 for ELF.\n+\n+2021-09-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* adaint.c (__gnat_get_executable_load_address): Add Win32 support.\n+\t* libgnat/s-objrea.ads (Get_Xcode_Bounds): Fix typo in comment.\n+\t(Object_File): Minor reformatting.\n+\t(ELF_Object_File): Uncomment predicate.\n+\t(PECOFF_Object_File): Likewise.\n+\t(XCOFF32_Object_File): Likewise.\n+\t* libgnat/s-objrea.adb: Minor reformatting throughout.\n+\t(Get_Load_Address): Implement for PE-COFF.\n+\t* libgnat/s-dwalin.ads: Remove clause for System.Storage_Elements\n+\tand use consistent wording in comments.\n+\t(Dwarf_Context): Set type of Low, High and Load_Address to Address.\n+\t* libgnat/s-dwalin.adb (Get_Load_Displacement): New function.\n+\t(Is_Inside): Call Get_Load_Displacement.\n+\t(Low_Address): Likewise.\n+\t(Open): Adjust to type change.\n+\t(Aranges_Lookup): Change type of Addr to Address.\n+\t(Read_Aranges_Entry): Likewise for Start and adjust.\n+\t(Enable_Cach): Adjust to type change.\n+\t(Symbolic_Address): Change type of Addr to Address.\n+\t(Symbolic_Traceback): Call Get_Load_Displacement.\n+\n+2021-09-20  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_disp.adb (Make_DT): Move call to Set_Has_Dispatch_Table,\n+\tso it is executed regardless of the Generate_SCIL mode.\n+\n+2021-09-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_util.ads (Force_Evaluation): Add formal parameter\n+\tDiscr_Number, to indicate discriminant expression for which an\n+\texternal name must be created.\n+\t(Remove_Side_Effects): Ditto.\n+\t* exp_util.adb (Force_Evaluation): Call Remove_Side_Effects with\n+\tadded parameter.\n+\t(Remove_Side_Effects, Build_Temporary): If Discr_Number is\n+\tpositive, create an external name with suffix DISCR and the\n+\tgiven discriminant number, analogous to what is done for\n+\ttemporaries for array type bounds.\n+\t* sem_ch3.adb (Process_Discriminant_Expressions): If the\n+\tconstraint is for an object or component declaration and the\n+\tcorresponding entity may be visible in another unit, invoke\n+\tForce_Evaluation with the new parameter.\n+\n+2021-09-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gen_il-internals.ads (Invalid_Val): Remove, unused and\n+\tgenerates warnings.\n+\n+2021-09-20  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_aggr.adb, exp_ch4.adb, exp_ch5.adb, sprint.adb: Refine\n+\ttypes of local constants.\n+\n+2021-09-20  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Fold\n+\tPreelaborable_Initialization attribute in cases where it hasn't\n+\tbeen folded by the analyzer.\n+\t* exp_disp.adb (Original_View_In_Visible_Part): This function is\n+\tremoved and moved to sem_util.adb.\n+\t* sem_attr.adb (Attribute_22): Add\n+\tAttribute_Preelaborable_Initialization as an Ada 2022 attribute.\n+\t(Analyze_Attribute, Attribute_Preelaborable_Initialization):\n+\tCheck that the prefix of the attribute is either a formal\n+\tprivate or derived type, or a composite type declared within the\n+\tvisible part of a package or generic package.\n+\t(Eval_Attribute): Perform folding of\n+\tPreelaborable_Initialization attribute based on\n+\tHas_Preelaborable_Initialization applied to the prefix type.\n+\t* sem_ch3.adb (Resolve_Aspects): Add specialized code for\n+\tPreelaborable_Initialization used at the end of a package\n+\tvisible part for setting Known_To_Have_Preelab_Init on types\n+\tthat are specified with True or that have a conjunction of one\n+\tor more P_I attributes applied to formal types.\n+\t* sem_ch7.adb (Analyze_Package_Specification): On call to\n+\tHas_Preelaborable_Initialization, pass True for new formal\n+\tFormal_Types_Have_Preelab_Init, so that error checking treats\n+\tsubcomponents that are declared within types in generics as\n+\thaving preelaborable initialization when the subcomponents are\n+\tof formal types.\n+\t* sem_ch13.adb (Analyze_Aspects_At_Freeze_Point): Add test for\n+\tP_I to prevent calling Make_Pragma_From_Boolean_Aspect, since\n+\tthis aspect is handled specially and the\n+\tKnown_To_Have_Preelab_Init flag will get set on types that have\n+\tthe aspect by other means.\n+\t(Analyze_Aspect_Specifications.Analyze_One_Aspect): Add test for\n+\tAspect_Preelaborable_Initialization for allowing the aspect to\n+\tbe specified on formal type declarations.\n+\t(Is_Operational_Item): Treat Attribute_Put_Image as an\n+\toperational attribute.  The need for this was encountered while\n+\tworking on these changes.\n+\t* sem_util.ads (Has_Preelaborable_Initialization): Add\n+\tFormal_Types_Have_Preelab_Init as a new formal parameter that\n+\tdefaults to False.\n+\t(Is_Conjunction_Of_Formal_Preelab_Init_Attributes): New\n+\tfunction.\n+\t(Original_View_In_Visible_Part): Moved here from exp_disp.adb,\n+\tso it can be called by Analyze_Attribute.\n+\t* sem_util.adb (Has_Preelaborable_Initialization): Return True\n+\tfor formal private and derived types when new formal\n+\tFormal_Types_Have_Preelab_Init is True, and pass along the\n+\tFormal_Types_Have_Preelab_Init flag in the array component case.\n+\t(Check_Components): Pass along Formal_Types_Have_Preelab_Init\n+\tflag on call to Has_Preelaborable_Initialization.\n+\t(Is_Conjunction_Of_Formal_Preelab_Init_Attributes): New function\n+\tthat returns True when passed an expression that includes one or\n+\tmore attributes for Preelaborable_Initialization applied to\n+\tprefixes that denote formal types.\n+\t(Is_Formal_Preelab_Init_Attribute): New utility function nested\n+\twithin Is_Conjunction_Of_Formal_Preelab_Init_Attributes that\n+\tdetermines whether a node is a P_I attribute applied to a\n+\tgeneric formal type.\n+\t(Original_View_In_Visible_Part): Moved here from exp_util.adb,\n+\tso it can be called by Analyze_Attribute.\n+\t* snames.ads-tmpl: Add note near the start of spec giving\n+\tdetails about what needs to be done when adding a name that\n+\tcorresponds to both an attribute and a pragma.  Delete existing\n+\toccurrence of Name_Preelaborable_Initialization, and add a note\n+\tcomment in the list of Name_* constants at that place,\n+\tindicating that it's included in type Pragma_Id, etc., echoing\n+\tother such comments for names that are both an attribute and a\n+\tpragma.  Insert Name_Preelaborable_Initialization in the\n+\talphabetized set of Name_* constants corresponding to\n+\tattributes (between First_Attribute_Name and\n+\tLast_Attribute_Name).\n+\t(type Attribute_Id): Add new literal\n+\tAttribute_Preelaborable_Initialization.\n+\t(type Pragma_Id): Move Pragma_Preelaborable_Initialization from\n+\tits current position to the end of the type, in the special set\n+\tof pragma literals that have corresponding atttributes. Add to\n+\taccompanying comment, indicating that functions Get_Pragma_Id\n+\tand Is_Pragma_Name need to be updated when adding a pragma\n+\tliteral to the special set.\n+\t* snames.adb-tmpl (Get_Pragma_Id): Add case alternative for\n+\tPragma_Preelaborable_Initialization.\n+\t(Is_Pragma_Name): Add test for\n+\tName_Preelaborable_Initialization.\n+\n+2021-09-20  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_ch4.adb (Finc_Non_Universal_Interpretations): Fix check.\n+\n+2021-09-20  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (Build_Discriminant_Constraints): Exit once a\n+\tfirst discriminant is found and the Discrim_Present flag is set.\n+\n+2021-09-20  Bob Duff  <duff@adacore.com>\n+\n+\t* gnat1drv.adb (Gnat1drv): Avoid calling List_Rep_Info in\n+\tGenerate_SCIL and GNATprove_Mode.\n+\t* repinfo.adb (List_Common_Type_Info): Fix comment.\n+\n+2021-09-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-dwalin.ads: Remove clause for Ada.Exceptions.Traceback,\n+\tadd clause for System.Traceback_Entries and alphabetize.\n+\t(AET): Delete.\n+\t(STE): New package renaming.\n+\t(Symbolic_Traceback): Adjust.\n+\t* libgnat/s-dwalin.adb: Remove clauses for Ada.Exceptions.Traceback\n+\tand System.Traceback_Entries.\n+\t(Symbolic_Traceback): Adjust.\n+\n+2021-09-20  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_ch4.adb (Find_Non_Universal_Interpretations): Check if\n+\ttypes are compatible before adding interpretation.\n+\n+2021-09-20  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Type_Conversion): Add guard to protect\n+\tagainst calculating accessibility levels against internal\n+\tcompiler-generated types.\n+\n+2021-09-20  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_dim.adb (Dimensions_Msg_Of): Capitalize comment.\n+\n+2021-09-20  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* adabkend.adb (Scan_Back_End_Switches): Replace switch-scanning\n+\tlogic with call to Backend_Utils.Scan_Common_Back_End_Switches.\n+\t* back_end.adb (Scan_Back_End_Switches): Replace switch-scanning\n+\tlogic with call to Backend_Utils.Scan_Common_Back_End_Switches.\n+\t* backend_utils.adb: New file.\n+\t* backend_utils.ads: New file.\n+\t* gcc-interface/Make-lang.in: Add ada/backend_utils.o.\n+\n+2021-09-20  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* atree.adb (Get_32_Bit_Field): Declare result before returning.\n+\n+2021-09-20  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* exp_ch7.adb (Expand_N_Package_Body): Replace\n+\tBuild_And_Insert_Cuda_Initialization with Expand_CUDA_Package.\n+\t* gnat_cuda.adb (Expand_CUDA_Package): New procedure.\n+\t(Build_And_Insert_Cuda_Initialization): Make internal.\n+\t* gnat_cuda.ads (Expand_CUDA_Package): New procedure.\n+\t(Build_And_Insert_Cuda_Initialization): Remove from spec.\n+\n+2021-09-20  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* usage.adb (Usage): Update -gnatw.c messages.\n+\n+2021-09-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_aux.adb (Is_By_Reference_Type): Do not test Error_Posted.\n+\n 2021-09-15  Alexandre Oliva  <oliva@adacore.com>\n \n \t* gcc-interface/utils.c: Include opts.h."}, {"sha": "9c590355b2397ac2089c251b06374bf53655ae2a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624980241ec69afc7b354f81cc64a1fd77131f3e/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624980241ec69afc7b354f81cc64a1fd77131f3e/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=624980241ec69afc7b354f81cc64a1fd77131f3e", "patch": "@@ -1,3 +1,10 @@\n+2021-09-20  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins_optimize_pragma): Define or\n+\tundefine __RECIPROCAL_MATH__, __NO_SIGNED_ZEROS__,\n+\t__NO_TRAPPING_MATH__, __ASSOCIATIVE_MATH__, and\n+\t__ROUNDING_MATH__ according to the new optimization flags.\n+\n 2021-09-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-omp.c (c_omp_split_clauses): Split order clause also to"}, {"sha": "08e7d4cc72523fe93f053684d4c391cba15ef581", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624980241ec69afc7b354f81cc64a1fd77131f3e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624980241ec69afc7b354f81cc64a1fd77131f3e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=624980241ec69afc7b354f81cc64a1fd77131f3e", "patch": "@@ -1,3 +1,14 @@\n+2021-09-20  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.h (gfc_omp_clauses): Add order_unconstrained.\n+\t* dump-parse-tree.c (show_omp_clauses): Dump it.\n+\t* openmp.c (gfc_match_omp_clauses): Match unconstrained/reproducible\n+\tmodifiers to ordered(concurrent).\n+\t(OMP_DISTRIBUTE_CLAUSES): Accept ordered clause.\n+\t(resolve_omp_clauses): Reject ordered + order on same directive.\n+\t* trans-openmp.c (gfc_trans_omp_clauses, gfc_split_omp_clauses): Pass\n+\ton unconstrained modifier of ordered(concurrent).\n+\n 2021-09-17  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/102366"}, {"sha": "aca4514ce4e8f547caf50e1d98e63c6418307251", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624980241ec69afc7b354f81cc64a1fd77131f3e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624980241ec69afc7b354f81cc64a1fd77131f3e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=624980241ec69afc7b354f81cc64a1fd77131f3e", "patch": "@@ -1,3 +1,45 @@\n+2021-09-20  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/evrp-ignore.c: New.\n+\n+2021-09-20  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* gcc.dg/associative-math-1.c: New test.\n+\t* gcc.dg/associative-math-2.c: New test.\n+\t* gcc.dg/no-signed-zeros-1.c: New test.\n+\t* gcc.dg/no-signed-zeros-2.c: New test.\n+\t* gcc.dg/no-trapping-math-1.c: New test.\n+\t* gcc.dg/no-trapping-math-2.c: New test.\n+\t* gcc.dg/reciprocal-math-1.c: New test.\n+\t* gcc.dg/reciprocal-math-2.c: New test.\n+\t* gcc.dg/rounding-math-1.c: New test.\n+\t* gcc.dg/rounding-math-2.c: New test.\n+\n+2021-09-20  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/order-5.f90: New test.\n+\t* gfortran.dg/gomp/order-6.f90: New test.\n+\t* gfortran.dg/gomp/order-7.f90: New test.\n+\t* gfortran.dg/gomp/order-8.f90: New test.\n+\t* gfortran.dg/gomp/order-9.f90: New test.\n+\n+2021-09-20  Christophe Lyon  <christophe.lyon@foss.st.com>\n+\t    Torbj\u00f6rn SVENSSON  <torbjorn.svensson@st.com>\n+\n+\t* lib/prune.exp (prune_gcc_output): Remove .exe suffix from\n+\ttoolchain executables names.\n+\n+2021-09-20  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gcc.dg/plugin/diagnostic-test-string-literals-1.c: Adjust\n+\texpected error diagnostics.\n+\n+2021-09-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/65206\n+\t* gcc.dg/torture/20210916.c: New testcase.\n+\t* gcc.dg/vect/pr65206.c: Likewise.\n+\n 2021-09-19  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/102403"}]}