{"sha": "df2d2fe0ee88ae01866e2437e00db0ccbea25c71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYyZDJmZTBlZTg4YWUwMTg2NmUyNDM3ZTAwZGIwY2NiZWEyNWM3MQ==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2019-08-21T08:29:23Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-21T08:29:23Z"}, "message": "[Ada] Max_Entry_Queue_Length aspect for protected entries\n\nAllow values of negative one to be accepted as a valid parameter as a\nspecial case.\n\n2019-08-21  Justin Squirek  <squirek@adacore.com>\n\ngcc/ada/\n\n\t* doc/gnat_rm/implementation_defined_pragmas.rst: Modify\n\tdocumentation to reflect expected behavior.\n\t* gnat_rm.texi: Regenerate.\n\t* sem_prag.adb (Analyze_Pragma): Modify handling of pragma\n\tMax_Entry_Queue_Length to not reject integer values of negative\n\tone.\n\t* sem_util.adb (Get_Max_Queue_Length): Add processing for values\n\tof negative one to fit within the current scheme.\n\nFrom-SVN: r274774", "tree": {"sha": "c42b70e7ad355b23c6053b93037eded6fd55990d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c42b70e7ad355b23c6053b93037eded6fd55990d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df2d2fe0ee88ae01866e2437e00db0ccbea25c71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2d2fe0ee88ae01866e2437e00db0ccbea25c71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df2d2fe0ee88ae01866e2437e00db0ccbea25c71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2d2fe0ee88ae01866e2437e00db0ccbea25c71/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e78c638a7846b3c96c80b920ab38416abd35997", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e78c638a7846b3c96c80b920ab38416abd35997", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e78c638a7846b3c96c80b920ab38416abd35997"}], "stats": {"total": 52, "additions": 39, "deletions": 13}, "files": [{"sha": "db943199570637fa7cc0c4a3228de1a52fe881e6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2d2fe0ee88ae01866e2437e00db0ccbea25c71/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2d2fe0ee88ae01866e2437e00db0ccbea25c71/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=df2d2fe0ee88ae01866e2437e00db0ccbea25c71", "patch": "@@ -1,3 +1,14 @@\n+2019-08-21  Justin Squirek  <squirek@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Modify\n+\tdocumentation to reflect expected behavior.\n+\t* gnat_rm.texi: Regenerate.\n+\t* sem_prag.adb (Analyze_Pragma): Modify handling of pragma\n+\tMax_Entry_Queue_Length to not reject integer values of negative\n+\tone.\n+\t* sem_util.adb (Get_Max_Queue_Length): Add processing for values\n+\tof negative one to fit within the current scheme.\n+\n 2019-08-20  Arnaud Charlet  <charlet@adacore.com>\n \n \t* exp_unst.adb (Unnest_Subprograms, Unnest_Subprogram): Take"}, {"sha": "625a38ff77d5639de021bc436c69d731e0530bc0", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2d2fe0ee88ae01866e2437e00db0ccbea25c71/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2d2fe0ee88ae01866e2437e00db0ccbea25c71/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=df2d2fe0ee88ae01866e2437e00db0ccbea25c71", "patch": "@@ -3888,8 +3888,10 @@ Syntax::\n \n This pragma is used to specify the maximum callers per entry queue for\n individual protected entries and entry families. It accepts a single\n-positive integer as a parameter and must appear after the declaration\n-of an entry.\n+integer (-1 or more) as a parameter and must appear after the declaration of an\n+entry.\n+\n+A value of -1 represents no additional restriction on queue length.\n \n Pragma No_Body\n =============="}, {"sha": "d5aa3965601206f76d295712b0e64adbea622222", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2d2fe0ee88ae01866e2437e00db0ccbea25c71/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2d2fe0ee88ae01866e2437e00db0ccbea25c71/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=df2d2fe0ee88ae01866e2437e00db0ccbea25c71", "patch": "@@ -1764,9 +1764,9 @@ Syntax:\n pragma Aggregate_Individually_Assign;\n @end example\n \n-Where possible GNAT will store the binary representation of a record aggregate\n+Where possible, GNAT will store the binary representation of a record aggregate\n in memory for space and performance reasons. This configuration pragma changes\n-this behaviour so that record aggregates are instead always converted into\n+this behavior so that record aggregates are instead always converted into\n individual assignment statements.\n \n @node Pragma Allow_Integer_Address,Pragma Annotate,Pragma Aggregate_Individually_Assign,Implementation Defined Pragmas\n@@ -5394,8 +5394,10 @@ pragma Max_Entry_Queue (static_integer_EXPRESSION);\n \n This pragma is used to specify the maximum callers per entry queue for\n individual protected entries and entry families. It accepts a single\n-positive integer as a parameter and must appear after the declaration\n-of an entry.\n+integer (-1 or more) as a parameter and must appear after the declaration of an\n+entry.\n+\n+A value of -1 represents no additional restriction on queue length.\n \n @node Pragma No_Body,Pragma No_Caching,Pragma Max_Queue_Length,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-no-body}@anchor{a1}"}, {"sha": "4ec8611fccfff8ff79f7626bf30551ec8d4bc89c", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2d2fe0ee88ae01866e2437e00db0ccbea25c71/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2d2fe0ee88ae01866e2437e00db0ccbea25c71/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=df2d2fe0ee88ae01866e2437e00db0ccbea25c71", "patch": "@@ -19538,7 +19538,7 @@ package body Sem_Prag is\n             | Pragma_Max_Entry_Queue_Depth\n             | Pragma_Max_Queue_Length\n          =>\n-         Max_Queue_Length : declare\n+         Max_Entry_Queue_Length : declare\n             Arg        : Node_Id;\n             Entry_Decl : Node_Id;\n             Entry_Id   : Entity_Id;\n@@ -19589,9 +19589,9 @@ package body Sem_Prag is\n \n             Val := Expr_Value (Arg);\n \n-            if Val <= 0 then\n+            if Val < -1 then\n                Error_Pragma_Arg\n-                 (\"argument for pragma% must be positive\", Arg1);\n+                 (\"argument for pragma% cannot be less than -1\", Arg1);\n \n             elsif not UI_Is_In_Int_Range (Val) then\n                Error_Pragma_Arg\n@@ -19609,7 +19609,7 @@ package body Sem_Prag is\n             end if;\n \n             Record_Rep_Item (Entry_Id, N);\n-         end Max_Queue_Length;\n+         end Max_Entry_Queue_Length;\n \n          -----------------\n          -- Memory_Size --"}, {"sha": "f837b6fd91214e4f6ca5721797ae99bcd1636455", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2d2fe0ee88ae01866e2437e00db0ccbea25c71/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2d2fe0ee88ae01866e2437e00db0ccbea25c71/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=df2d2fe0ee88ae01866e2437e00db0ccbea25c71", "patch": "@@ -9752,16 +9752,27 @@ package body Sem_Util is\n    function Get_Max_Queue_Length (Id : Entity_Id) return Uint is\n       pragma Assert (Is_Entry (Id));\n       Prag : constant Entity_Id := Get_Pragma (Id, Pragma_Max_Queue_Length);\n+      Max  : Uint;\n \n    begin\n-      --  A value of 0 represents no maximum specified, and entries and entry\n-      --  families with no Max_Queue_Length aspect or pragma default to it.\n+      --  A value of 0 or -1 represents no maximum specified, and entries and\n+      --  entry families with no Max_Queue_Length aspect or pragma default to\n+      --  it.\n \n       if not Present (Prag) then\n          return Uint_0;\n       end if;\n \n-      return Intval (Expression (First (Pragma_Argument_Associations (Prag))));\n+      Max := Intval (Expression (First (Pragma_Argument_Associations (Prag))));\n+\n+      --  Since -1 and 0 are equivalent, return 0 for instances of -1 for\n+      --  uniformity.\n+\n+      if Max = -1 then\n+         return Uint_0;\n+      end if;\n+\n+      return Max;\n    end Get_Max_Queue_Length;\n \n    ------------------------"}]}