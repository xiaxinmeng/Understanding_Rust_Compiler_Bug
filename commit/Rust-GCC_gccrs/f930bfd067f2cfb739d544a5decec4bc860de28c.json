{"sha": "f930bfd067f2cfb739d544a5decec4bc860de28c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkzMGJmZDA2N2YyY2ZiNzM5ZDU0NGE1ZGVjZWM0YmM4NjBkZTI4Yw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@redhat.com", "date": "2002-10-10T19:40:34Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2002-10-10T19:40:34Z"}, "message": "Fix miscompilation of testcase 20021010-1.c for v850 target with -O -mv850e.\n\n\t* cse.c (fold_rtx): Don't perform associative optimization for DIV and\n\tUDIV.\n\nFrom-SVN: r58026", "tree": {"sha": "654cc2d25b2b6e08c5b5f9f8bf645624b16c5bab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/654cc2d25b2b6e08c5b5f9f8bf645624b16c5bab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f930bfd067f2cfb739d544a5decec4bc860de28c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f930bfd067f2cfb739d544a5decec4bc860de28c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f930bfd067f2cfb739d544a5decec4bc860de28c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f930bfd067f2cfb739d544a5decec4bc860de28c/comments", "author": null, "committer": null, "parents": [{"sha": "61fdde38f06b62cacc760427871ec6efd35749a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61fdde38f06b62cacc760427871ec6efd35749a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61fdde38f06b62cacc760427871ec6efd35749a2"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "8206b2d76e687cc52323485ce08b63509422cc92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f930bfd067f2cfb739d544a5decec4bc860de28c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f930bfd067f2cfb739d544a5decec4bc860de28c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f930bfd067f2cfb739d544a5decec4bc860de28c", "patch": "@@ -1,3 +1,8 @@\n+2002-10-10  Jim Wilson  <wilson@redhat.com>\n+\n+\t* cse.c (fold_rtx): Don't perform associative optimization for DIV and\n+\tUDIV.\n+\n 2002-10-10  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/aix52.h: New file."}, {"sha": "378a91292b3599309de63b1e593713011c645212", "filename": "gcc/cse.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f930bfd067f2cfb739d544a5decec4bc860de28c/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f930bfd067f2cfb739d544a5decec4bc860de28c/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=f930bfd067f2cfb739d544a5decec4bc860de28c", "patch": "@@ -4212,7 +4212,7 @@ fold_rtx (x, insn)\n \tfrom_plus:\n \tcase SMIN:    case SMAX:      case UMIN:    case UMAX:\n \tcase IOR:     case AND:       case XOR:\n-\tcase MULT:    case DIV:       case UDIV:\n+\tcase MULT:\n \tcase ASHIFT:  case LSHIFTRT:  case ASHIFTRT:\n \t  /* If we have (<op> <reg> <const_int>) for an associative OP and REG\n \t     is known to be of similar form, we may be able to replace the\n@@ -4260,11 +4260,9 @@ fold_rtx (x, insn)\n \t\tbreak;\n \n \t      /* Compute the code used to compose the constants.  For example,\n-\t\t A/C1/C2 is A/(C1 * C2), so if CODE == DIV, we want MULT.  */\n+\t\t A-C1-C2 is A-(C1 + C2), so if CODE == MINUS, we want PLUS.  */\n \n-\t      associate_code\n-\t\t= (code == MULT || code == DIV || code == UDIV ? MULT\n-\t\t   : is_shift || code == PLUS || code == MINUS ? PLUS : code);\n+\t      associate_code = (is_shift || code == MINUS ? PLUS : code);\n \n \t      new_const = simplify_binary_operation (associate_code, mode,\n \t\t\t\t\t\t     const_arg1, inner_const);\n@@ -4302,6 +4300,14 @@ fold_rtx (x, insn)\n \t    }\n \t  break;\n \n+\tcase DIV:       case UDIV:\n+\t  /* ??? The associative optimization performed immediately above is\n+\t     also possible for DIV and UDIV using associate_code of MULT.\n+\t     However, we would need extra code to verify that the\n+\t     multiplication does not overflow, that is, there is no overflow\n+\t     in the calculation of new_const.  */\n+\t  break;\n+\n \tdefault:\n \t  break;\n \t}"}]}