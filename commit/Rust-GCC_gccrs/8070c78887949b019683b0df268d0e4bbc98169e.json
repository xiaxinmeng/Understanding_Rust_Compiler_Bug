{"sha": "8070c78887949b019683b0df268d0e4bbc98169e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA3MGM3ODg4Nzk0OWIwMTk2ODNiMGRmMjY4ZDBlNGJiYzk4MTY5ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-10-18T02:09:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-10-18T02:09:13Z"}, "message": "* tree.h, vector.h: Fix accidental divergence from SGI release.\n\nFrom-SVN: r15989", "tree": {"sha": "09af98e2a3f4e59e088485629a4a01512ad4d44c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09af98e2a3f4e59e088485629a4a01512ad4d44c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8070c78887949b019683b0df268d0e4bbc98169e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8070c78887949b019683b0df268d0e4bbc98169e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8070c78887949b019683b0df268d0e4bbc98169e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8070c78887949b019683b0df268d0e4bbc98169e/comments", "author": null, "committer": null, "parents": [{"sha": "c12158208e14854ea5d5d475d95673996a25736f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c12158208e14854ea5d5d475d95673996a25736f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c12158208e14854ea5d5d475d95673996a25736f"}], "stats": {"total": 66, "additions": 40, "deletions": 26}, "files": [{"sha": "ca1c01a626f38fa05943a934fcdb382960c39065", "filename": "libstdc++/stl/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8070c78887949b019683b0df268d0e4bbc98169e/libstdc%2B%2B%2Fstl%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8070c78887949b019683b0df268d0e4bbc98169e/libstdc%2B%2B%2Fstl%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstl%2FChangeLog?ref=8070c78887949b019683b0df268d0e4bbc98169e", "patch": "@@ -1,3 +1,7 @@\n+Fri Oct 17 19:07:42 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* tree.h, vector.h: Fix accidental divergence from SGI release.\n+\n Tue Sep  9 19:47:28 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* algo.h, algobase.h, alloc.h, bvector.h, deque.h, hashtable.h,"}, {"sha": "80e0cafa352b59c26c6ac2499b5fff0bd60460a7", "filename": "libstdc++/stl/tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8070c78887949b019683b0df268d0e4bbc98169e/libstdc%2B%2B%2Fstl%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8070c78887949b019683b0df268d0e4bbc98169e/libstdc%2B%2B%2Fstl%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstl%2Ftree.h?ref=8070c78887949b019683b0df268d0e4bbc98169e", "patch": "@@ -523,10 +523,10 @@ class rb_tree {\n public:\n                                 // allocation/deallocation\n     rb_tree(const Compare& comp = Compare())\n-      : key_compare(comp), node_count(0) { init(); }\n+      : node_count(0), key_compare(comp) { init(); }\n \n     rb_tree(const rb_tree<Key, Value, KeyOfValue, Compare, Alloc>& x) \n-      : key_compare(x.key_compare), node_count(0) { \n+      : node_count(0), key_compare(x.key_compare) { \n         header = get_node();\n         color(header) = __rb_tree_red;\n         if (x.root() == 0) {"}, {"sha": "1c7867e8b03078cf73bbfb79ee07eac6d1d2e91f", "filename": "libstdc++/stl/vector.h", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8070c78887949b019683b0df268d0e4bbc98169e/libstdc%2B%2B%2Fstl%2Fvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8070c78887949b019683b0df268d0e4bbc98169e/libstdc%2B%2B%2Fstl%2Fvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstl%2Fvector.h?ref=8070c78887949b019683b0df268d0e4bbc98169e", "patch": "@@ -61,6 +61,12 @@ class vector {\n     void deallocate() {\n       if (start) data_allocator::deallocate(start, end_of_storage - start);\n     }\n+\n+    void fill_initialize(size_type n, const T& value) {\n+      start = allocate_and_fill(n, value);\n+      finish = start + n;\n+      end_of_storage = finish;\n+    }\n public:\n     iterator begin() { return start; }\n     const_iterator begin() const { return start; }\n@@ -75,22 +81,18 @@ class vector {\n         return const_reverse_iterator(begin()); \n     }\n     size_type size() const { return size_type(end() - begin()); }\n-    size_type max_size() const { return size_type(-1); }\n+    size_type max_size() const { return size_type(-1) / sizeof(T); }\n     size_type capacity() const { return size_type(end_of_storage - begin()); }\n     bool empty() const { return begin() == end(); }\n     reference operator[](size_type n) { return *(begin() + n); }\n     const_reference operator[](size_type n) const { return *(begin() + n); }\n+\n     vector() : start(0), finish(0), end_of_storage(0) {}\n-    vector(size_type n, const T& value) {\n-      start = allocate_and_fill(n, value);\n-      finish = start + n;\n-      end_of_storage = finish;\n-    }\n-    explicit vector(size_type n) {\n-      start = allocate_and_fill(n, T());\n-      finish = start + n;\n-      end_of_storage = finish;\n-    }\n+    vector(size_type n, const T& value) { fill_initialize(n, value); }\n+    vector(int n, const T& value) { fill_initialize(n, value); }\n+    vector(long n, const T& value) { fill_initialize(n, value); }\n+    explicit vector(size_type n) { fill_initialize(n, T()); }\n+\n     vector(const vector<T, Alloc>& x) {\n       start = allocate_and_copy(x.end() - x.begin(), x.begin(), x.end());\n       finish = start + (x.end() - x.begin());\n@@ -119,7 +121,7 @@ class vector {\n     void reserve(size_type n) {\n       if (capacity() < n) {\n         const size_type old_size = size();\n-        const iterator tmp = allocate_and_copy(n, start, finish);\n+        iterator tmp = allocate_and_copy(n, start, finish);\n         destroy(start, finish);\n         deallocate();\n         start = tmp;\n@@ -162,7 +164,15 @@ class vector {\n     void insert(iterator position,\n                 const_iterator first, const_iterator last);\n #endif /* __STL_MEMBER_TEMPLATES */\n-    void insert (iterator position, size_type n, const T& x);\n+\n+    void insert (iterator pos, size_type n, const T& x);\n+    void insert (iterator pos, int n, const T& x) {\n+      insert(pos, (size_type) n, x);\n+    }\n+    void insert (iterator pos, long n, const T& x) {\n+      insert(pos, (size_type) n, x);\n+    }\n+\n     void pop_back() {\n         --finish;\n         destroy(finish);\n@@ -291,7 +301,7 @@ template <class T, class Alloc>\n vector<T, Alloc>& vector<T, Alloc>::operator=(const vector<T, Alloc>& x) {\n   if (&x != this) {\n     if (x.size() > capacity()) {\n-      const iterator tmp = allocate_and_copy(x.end() - x.begin(),\n+      iterator tmp = allocate_and_copy(x.end() - x.begin(),\n                                              x.begin(), x.end());\n       destroy(start, finish);\n       deallocate();\n@@ -323,7 +333,7 @@ void vector<T, Alloc>::insert_aux(iterator position, const T& x) {\n   else {\n     const size_type old_size = size();\n     const size_type len = old_size != 0 ? 2 * old_size : 1;\n-    const iterator new_start = data_allocator::allocate(len);\n+    iterator new_start = data_allocator::allocate(len);\n     iterator new_finish = new_start;\n #       ifdef __STL_USE_EXCEPTIONS\n     try {\n@@ -351,10 +361,10 @@ void vector<T, Alloc>::insert_aux(iterator position, const T& x) {\n template <class T, class Alloc>\n void vector<T, Alloc>::insert(iterator position, size_type n, const T& x) {\n   if (n != 0) {\n-    if (size_type (end_of_storage - finish) >= n) {\n+    if (size_type(end_of_storage - finish) >= n) {\n       T x_copy = x;\n       const size_type elems_after = finish - position;\n-      const iterator old_finish = finish;\n+      iterator old_finish = finish;\n       if (elems_after > n) {\n         uninitialized_copy(finish - n, finish, finish);\n         finish += n;\n@@ -372,7 +382,7 @@ void vector<T, Alloc>::insert(iterator position, size_type n, const T& x) {\n     else {\n       const size_type old_size = size();        \n       const size_type len = old_size + max(old_size, n);\n-      const iterator new_start = data_allocator::allocate(len);\n+      iterator new_start = data_allocator::allocate(len);\n       iterator new_finish = new_start;\n #         ifdef __STL_USE_EXCEPTIONS\n       try {\n@@ -417,9 +427,9 @@ void vector<T, Alloc>::range_insert(iterator position,\n   if (first != last) {\n     size_type n = 0;\n     distance(first, last, n);\n-    if (size_type (end_of_storage - finish) >= n) {\n+    if (size_type(end_of_storage - finish) >= n) {\n       const size_type elems_after = finish - position;\n-      const iterator old_finish = finish;\n+      iterator old_finish = finish;\n       if (elems_after > n) {\n         uninitialized_copy(finish - n, finish, finish);\n         finish += n;\n@@ -439,7 +449,7 @@ void vector<T, Alloc>::range_insert(iterator position,\n     else {\n       const size_type old_size = size();\n       const size_type len = old_size + max(old_size, n);\n-      const iterator new_start = data_allocator::allocate(len);\n+      iterator new_start = data_allocator::allocate(len);\n       iterator new_finish = new_start;\n #         ifdef __STL_USE_EXCEPTIONS\n       try {\n@@ -473,9 +483,9 @@ void vector<T, Alloc>::insert(iterator position,\n   if (first != last) {\n     size_type n = 0;\n     distance(first, last, n);\n-    if (end_of_storage - finish >= n) {\n+    if (size_type(end_of_storage - finish) >= n) {\n       const size_type elems_after = finish - position;\n-      const iterator old_finish = finish;\n+      iterator old_finish = finish;\n       if (elems_after > n) {\n         uninitialized_copy(finish - n, finish, finish);\n         finish += n;\n@@ -493,7 +503,7 @@ void vector<T, Alloc>::insert(iterator position,\n     else {\n       const size_type old_size = size();\n       const size_type len = old_size + max(old_size, n);\n-      const iterator new_start = data_allocator::allocate(len);\n+      iterator new_start = data_allocator::allocate(len);\n       iterator new_finish = new_start;\n #         ifdef __STL_USE_EXCEPTIONS\n       try {"}]}