{"sha": "70863cbd39741c9dafba7cdaeab284f55e142187", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA4NjNjYmQzOTc0MWM5ZGFmYmE3Y2RhZWFiMjg0ZjU1ZTE0MjE4Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-09-30T07:28:51Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-09-30T07:28:51Z"}, "message": "PR libstdc++/12352 (cont)\n\n2003-09-30  Paolo Carlini  <pcarlini@unitus.it>\n\n\tPR libstdc++/12352 (cont)\n\t* src/localename.cc (locale::_Impl::_Impl(const char*, size_t)):\n\tDon't leak __cloc; don't leak if any of the _M_init_facet(...)\n\tcalls fail.\n\t(locale::_Impl::_Impl(const _Impl&, size_t)): Tweak.\n\t(locale::_Impl::~_Impl): Don't do anything if !_M_facets,\n\t!_M_caches, !_M_names.\n\nFrom-SVN: r71936", "tree": {"sha": "70491cfcb7c1f356c54e06e98b831bd61ddbc66d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70491cfcb7c1f356c54e06e98b831bd61ddbc66d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70863cbd39741c9dafba7cdaeab284f55e142187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70863cbd39741c9dafba7cdaeab284f55e142187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70863cbd39741c9dafba7cdaeab284f55e142187", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70863cbd39741c9dafba7cdaeab284f55e142187/comments", "author": null, "committer": null, "parents": [{"sha": "573850d4cba486247fc9f166502c98e20c09f915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/573850d4cba486247fc9f166502c98e20c09f915", "html_url": "https://github.com/Rust-GCC/gccrs/commit/573850d4cba486247fc9f166502c98e20c09f915"}], "stats": {"total": 162, "additions": 80, "deletions": 82}, "files": [{"sha": "78c99b957cc0cfe2967c25e6b75f73528f3b5f77", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70863cbd39741c9dafba7cdaeab284f55e142187/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70863cbd39741c9dafba7cdaeab284f55e142187/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=70863cbd39741c9dafba7cdaeab284f55e142187", "patch": "@@ -1,3 +1,13 @@\n+2003-09-30  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\tPR libstdc++/12352 (cont)\n+\t* src/localename.cc (locale::_Impl::_Impl(const char*, size_t)):\n+\tDon't leak __cloc; don't leak if any of the _M_init_facet(...)\n+\tcalls fail.\n+\t(locale::_Impl::_Impl(const _Impl&, size_t)): Tweak.\n+\t(locale::_Impl::~_Impl): Don't do anything if !_M_facets,\n+\t!_M_caches, !_M_names.\n+\n 2003-09-29  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* configure.host: Handle Solaris 2.5 micro releases explicitly."}, {"sha": "28e68b86416997055caf4c69ff7db0849eea0d4a", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 70, "deletions": 82, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70863cbd39741c9dafba7cdaeab284f55e142187/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70863cbd39741c9dafba7cdaeab284f55e142187/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=70863cbd39741c9dafba7cdaeab284f55e142187", "patch": "@@ -91,18 +91,21 @@ namespace std\n   locale::_Impl::\n   ~_Impl() throw()\n   {\n-    for (size_t __i = 0; __i < _M_facets_size; ++__i)\n-      if (_M_facets[__i])\n-\t_M_facets[__i]->_M_remove_reference();\n+    if (_M_facets)\n+      for (size_t __i = 0; __i < _M_facets_size; ++__i)\n+\tif (_M_facets[__i])\n+\t  _M_facets[__i]->_M_remove_reference();\n     delete [] _M_facets;\n \n-    for (size_t __i = 0; __i < _M_facets_size; ++__i)\n-      if (_M_caches[__i])\n-\t_M_caches[__i]->_M_remove_reference(); \n+    if (_M_caches)\n+      for (size_t __i = 0; __i < _M_facets_size; ++__i)\n+\tif (_M_caches[__i])\n+\t  _M_caches[__i]->_M_remove_reference(); \n     delete [] _M_caches;\n \n-    for (size_t __i = 0; __i < _S_categories_size; ++__i)\n-      delete [] _M_names[__i];  \n+    if (_M_names)\n+      for (size_t __i = 0; __i < _S_categories_size; ++__i)\n+\tdelete [] _M_names[__i];  \n     delete [] _M_names;\n   }\n \n@@ -115,32 +118,25 @@ namespace std\n     _M_names = 0;\n     try\n       {\n-\t_M_facets = new const facet*[_M_facets_size]; \n+\t_M_facets = new const facet*[_M_facets_size];\n+\tfor (size_t __i = 0; __i < _M_facets_size; ++__i)\n+\t  {\n+\t    _M_facets[__i] = __imp._M_facets[__i];\n+\t    if (_M_facets[__i])\n+\t      _M_facets[__i]->_M_add_reference();\n+\t  }\n \t_M_caches = new const facet*[_M_facets_size];\n+\tfor (size_t __i = 0; __i < _M_facets_size; ++__i)\n+\t  {\n+\t    _M_caches[__i] = __imp._M_caches[__i];\n+\t    if (_M_caches[__i])\n+\t      _M_caches[__i]->_M_add_reference(); \t\n+\t  }\n \t_M_names = new char*[_S_categories_size];\n-      }\n-    catch(...)\n-      {\n-\tdelete [] _M_facets;\n-\tdelete [] _M_caches;\t\t\n-\t__throw_exception_again;\n-      }\n-\n-    for (size_t __i = 0; __i < _M_facets_size; ++__i)\n-      {\n-\t_M_facets[__i] = __imp._M_facets[__i];\n-\t_M_caches[__i] = __imp._M_caches[__i];\n-\tif (_M_facets[__i])\n-\t  _M_facets[__i]->_M_add_reference();\n-\tif (_M_caches[__i])\n-\t  _M_caches[__i]->_M_add_reference(); \t\n-      }\n+\tfor (size_t __i = 0; __i < _S_categories_size; ++__i)\n+\t  _M_names[__i] = 0;\n \n-    // Name all the categories.\n-    for (size_t __i = 0; __i < _S_categories_size; ++__i)\n-      _M_names[__i] = 0;\n-    try\n-      {\n+\t// Name all the categories.\n \tfor (size_t __i = 0; __i < _S_categories_size; ++__i)\n \t  {\n \t    char* __new = new char[std::strlen(__imp._M_names[__i]) + 1];\n@@ -170,24 +166,16 @@ namespace std\n     try\n       {\n \t_M_facets = new const facet*[_M_facets_size];\n+\tfor (size_t __i = 0; __i < _M_facets_size; ++__i)\n+\t  _M_facets[__i] = 0;\n \t_M_caches = new const facet*[_M_facets_size];\n+\tfor (size_t __i = 0; __i < _M_facets_size; ++__i)\n+\t  _M_caches[__i] = 0;\n \t_M_names = new char*[_S_categories_size];\n-      }\n-    catch(...)\n-      {\n-\tdelete [] _M_facets;\n-\tdelete [] _M_caches;\n-\t__throw_exception_again;\n-      }      \n-\n-    for (size_t __i = 0; __i < _M_facets_size; ++__i)\n-      _M_facets[__i] = _M_caches[__i] = 0;\n+\tfor (size_t __i = 0; __i < _S_categories_size; ++__i)\n+\t  _M_names[__i] = 0;\n \n-    // Name all the categories.\n-    for (size_t __i = 0; __i < _S_categories_size; ++__i)\n-      _M_names[__i] = 0;\n-    try\n-      {\n+\t// Name all the categories.\n \tconst size_t __len = std::strlen(__s);\n \tif (!std::strchr(__s, ';'))\n \t  {\n@@ -212,47 +200,47 @@ namespace std\n \t\t_M_names[__i] = __new;\n \t      }\n \t  }\n+ \n+\t// Construct all standard facets and add them to _M_facets.\n+\t_M_init_facet(new std::ctype<char>(__cloc, 0, false));\n+\t_M_init_facet(new codecvt<char, char, mbstate_t>(__cloc));\n+\t_M_init_facet(new numpunct<char>(__cloc));\n+\t_M_init_facet(new num_get<char>);\n+\t_M_init_facet(new num_put<char>);\n+\t_M_init_facet(new std::collate<char>(__cloc));\n+\t_M_init_facet(new moneypunct<char, false>(__cloc, __s));\n+\t_M_init_facet(new moneypunct<char, true>(__cloc, __s));\n+\t_M_init_facet(new money_get<char>);\n+\t_M_init_facet(new money_put<char>);\n+\t_M_init_facet(new __timepunct<char>(__cloc, __s));\n+\t_M_init_facet(new time_get<char>);\n+\t_M_init_facet(new time_put<char>);\n+\t_M_init_facet(new std::messages<char>(__cloc, __s));\n+\t\n+#ifdef  _GLIBCXX_USE_WCHAR_T\n+\t_M_init_facet(new std::ctype<wchar_t>(__cloc));\n+\t_M_init_facet(new codecvt<wchar_t, char, mbstate_t>(__cloc));\n+\t_M_init_facet(new numpunct<wchar_t>(__cloc));\n+\t_M_init_facet(new num_get<wchar_t>);\n+\t_M_init_facet(new num_put<wchar_t>);\n+\t_M_init_facet(new std::collate<wchar_t>(__cloc));\n+\t_M_init_facet(new moneypunct<wchar_t, false>(__cloc, __s));\n+\t_M_init_facet(new moneypunct<wchar_t, true>(__cloc, __s));\n+\t_M_init_facet(new money_get<wchar_t>);\n+\t_M_init_facet(new money_put<wchar_t>);\n+\t_M_init_facet(new __timepunct<wchar_t>(__cloc, __s));\n+\t_M_init_facet(new time_get<wchar_t>);\n+\t_M_init_facet(new time_put<wchar_t>);\n+\t_M_init_facet(new std::messages<wchar_t>(__cloc, __s));\n+#endif\t  \n+\tlocale::facet::_S_destroy_c_locale(__cloc);\n       }\n     catch(...)\n       {\n+\tlocale::facet::_S_destroy_c_locale(__cloc);\n \tthis->~_Impl();\n \t__throw_exception_again;\n-      }\n-\n-    // Construct all standard facets and add them to _M_facets.\n-    _M_init_facet(new std::ctype<char>(__cloc, 0, false));\n-    _M_init_facet(new codecvt<char, char, mbstate_t>(__cloc));\n-    _M_init_facet(new numpunct<char>(__cloc));\n-    _M_init_facet(new num_get<char>);\n-    _M_init_facet(new num_put<char>);\n-    _M_init_facet(new std::collate<char>(__cloc));\n-    _M_init_facet(new moneypunct<char, false>(__cloc, __s));\n-    _M_init_facet(new moneypunct<char, true>(__cloc, __s));\n-    _M_init_facet(new money_get<char>);\n-    _M_init_facet(new money_put<char>);\n-    _M_init_facet(new __timepunct<char>(__cloc, __s));\n-    _M_init_facet(new time_get<char>);\n-    _M_init_facet(new time_put<char>);\n-    _M_init_facet(new std::messages<char>(__cloc, __s));\n-\t\n-#ifdef  _GLIBCXX_USE_WCHAR_T\n-    _M_init_facet(new std::ctype<wchar_t>(__cloc));\n-    _M_init_facet(new codecvt<wchar_t, char, mbstate_t>(__cloc));\n-    _M_init_facet(new numpunct<wchar_t>(__cloc));\n-    _M_init_facet(new num_get<wchar_t>);\n-    _M_init_facet(new num_put<wchar_t>);\n-    _M_init_facet(new std::collate<wchar_t>(__cloc));\n-    _M_init_facet(new moneypunct<wchar_t, false>(__cloc, __s));\n-    _M_init_facet(new moneypunct<wchar_t, true>(__cloc, __s));\n-    _M_init_facet(new money_get<wchar_t>);\n-    _M_init_facet(new money_put<wchar_t>);\n-    _M_init_facet(new __timepunct<wchar_t>(__cloc, __s));\n-    _M_init_facet(new time_get<wchar_t>);\n-    _M_init_facet(new time_put<wchar_t>);\n-    _M_init_facet(new std::messages<wchar_t>(__cloc, __s));\n-#endif\t  \n-\n-    locale::facet::_S_destroy_c_locale(__cloc);\n+      }\t\n   }\n \n   // Construct \"C\" _Impl."}]}