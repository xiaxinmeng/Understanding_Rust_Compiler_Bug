{"sha": "ef87d898649555989d8dc35fa08ac792cb017417", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY4N2Q4OTg2NDk1NTU5ODlkOGRjMzVmYTA4YWM3OTJjYjAxNzQxNw==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2008-03-15T16:58:09Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2008-03-15T16:58:09Z"}, "message": "arm.md (insv): Use gen_insv_t2 and gen_insv_zero.\n\n2008-03-15  Paul Brook  <paul@codesourcery.com>\n\n\t* config/arm/arm.md (insv): Use gen_insv_t2 and gen_insv_zero.\n\t(extzv): Use gen_extzv_t2.\n\t(insv_t2, insv_zero, extv, extzv_t2): New patterns.\n\nFrom-SVN: r133254", "tree": {"sha": "383648114c1b4078287692053342861feb64963a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/383648114c1b4078287692053342861feb64963a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef87d898649555989d8dc35fa08ac792cb017417", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef87d898649555989d8dc35fa08ac792cb017417", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef87d898649555989d8dc35fa08ac792cb017417", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef87d898649555989d8dc35fa08ac792cb017417/comments", "author": null, "committer": null, "parents": [{"sha": "6b927641f37658c63ac5ade02e3e10d1a85c6463", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b927641f37658c63ac5ade02e3e10d1a85c6463", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b927641f37658c63ac5ade02e3e10d1a85c6463"}], "stats": {"total": 93, "additions": 90, "deletions": 3}, "files": [{"sha": "7c10c75f5db9cc5b1464ef8265797eb024b0e891", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef87d898649555989d8dc35fa08ac792cb017417/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef87d898649555989d8dc35fa08ac792cb017417/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef87d898649555989d8dc35fa08ac792cb017417", "patch": "@@ -1,3 +1,9 @@\n+2008-03-15  Paul Brook  <paul@codesourcery.com>\n+\n+\t* config/arm/arm.md (insv): Use gen_insv_t2 and gen_insv_zero.\n+\t(extzv): Use gen_extzv_t2.\n+\t(insv_t2, insv_zero, extv, extzv_t2): New patterns.\n+\n 2008-03-15  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-ccp.c (get_symbol_constant_value): Export."}, {"sha": "dcac1346281985f9b3a020f85a7627ab96a77fb4", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 84, "deletions": 3, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef87d898649555989d8dc35fa08ac792cb017417/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef87d898649555989d8dc35fa08ac792cb017417/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=ef87d898649555989d8dc35fa08ac792cb017417", "patch": "@@ -2145,20 +2145,50 @@\n ;;; the value before we insert.  This loses some of the advantage of having\n ;;; this insv pattern, so this pattern needs to be reevalutated.\n \n-; ??? Use Thumb-2 bitfield insert/extract instructions\n (define_expand \"insv\"\n   [(set (zero_extract:SI (match_operand:SI 0 \"s_register_operand\" \"\")\n                          (match_operand:SI 1 \"general_operand\" \"\")\n                          (match_operand:SI 2 \"general_operand\" \"\"))\n         (match_operand:SI 3 \"reg_or_int_operand\" \"\"))]\n-  \"TARGET_ARM\"\n+  \"TARGET_ARM || arm_arch_thumb2\"\n   \"\n   {\n     int start_bit = INTVAL (operands[2]);\n     int width = INTVAL (operands[1]);\n     HOST_WIDE_INT mask = (((HOST_WIDE_INT)1) << width) - 1;\n     rtx target, subtarget;\n \n+    if (arm_arch_thumb2)\n+      {\n+\tbool use_bfi = TRUE;\n+\n+\tif (GET_CODE (operands[3]) == CONST_INT)\n+\t  {\n+\t    HOST_WIDE_INT val = INTVAL (operands[3]) & mask;\n+\n+\t    if (val == 0)\n+\t      {\n+\t\temit_insn (gen_insv_zero (operands[0], operands[1],\n+\t\t\t\t\t  operands[2]));\n+\t\tDONE;\n+\t      }\n+\n+\t    /* See if the set can be done with a single orr instruction.  */\n+\t    if (val == mask && const_ok_for_arm (val << start_bit))\n+\t      use_bfi = FALSE;\n+\t  }\n+\t  \n+\tif (use_bfi)\n+\t  {\n+\t    if (GET_CODE (operands[3]) != REG)\n+\t      operands[3] = force_reg (SImode, operands[3]);\n+\n+\t    emit_insn (gen_insv_t2 (operands[0], operands[1], operands[2],\n+\t\t\t\t    operands[3]));\n+\t    DONE;\n+\t  }\n+      }\n+\n     target = operands[0];\n     /* Avoid using a subreg as a subtarget, and avoid writing a paradoxical \n        subreg as the final target.  */\n@@ -2282,6 +2312,28 @@\n   }\"\n )\n \n+(define_insn \"insv_zero\"\n+  [(set (zero_extract:SI (match_operand:SI 0 \"s_register_operand\" \"+r\")\n+                         (match_operand:SI 1 \"const_int_operand\" \"M\")\n+                         (match_operand:SI 2 \"const_int_operand\" \"M\"))\n+        (const_int 0))]\n+  \"arm_arch_thumb2\"\n+  \"bfc%?\\t%0, %2, %1\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n+\n+(define_insn \"insv_t2\"\n+  [(set (zero_extract:SI (match_operand:SI 0 \"s_register_operand\" \"+r\")\n+                         (match_operand:SI 1 \"const_int_operand\" \"M\")\n+                         (match_operand:SI 2 \"const_int_operand\" \"M\"))\n+        (match_operand:SI 3 \"s_register_operand\" \"r\"))]\n+  \"arm_arch_thumb2\"\n+  \"bfi%?\\t%0, %3, %2, %1\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n+\n ; constants for op 2 will never be given to these patterns.\n (define_insn_and_split \"*anddi_notdi_di\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n@@ -3287,12 +3339,19 @@\n    (set (match_operand:SI              0 \"register_operand\" \"\")\n \t(lshiftrt:SI (match_dup 4)\n \t\t     (match_operand:SI 3 \"const_int_operand\" \"\")))]\n-  \"TARGET_THUMB1\"\n+  \"TARGET_THUMB1 || arm_arch_thumb2\"\n   \"\n   {\n     HOST_WIDE_INT lshift = 32 - INTVAL (operands[2]) - INTVAL (operands[3]);\n     HOST_WIDE_INT rshift = 32 - INTVAL (operands[2]);\n     \n+    if (arm_arch_thumb2)\n+      {\n+\temit_insn (gen_extzv_t2 (operands[0], operands[1], operands[2],\n+\t\t\t\t operands[3]));\n+\tDONE;\n+      }\n+\n     operands[3] = GEN_INT (rshift);\n     \n     if (lshift == 0)\n@@ -3306,6 +3365,28 @@\n   }\"\n )\n \n+(define_insn \"extv\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(sign_extract:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n+                         (match_operand:SI 2 \"const_int_operand\" \"M\")\n+                         (match_operand:SI 3 \"const_int_operand\" \"M\")))]\n+  \"arm_arch_thumb2\"\n+  \"sbfx%?\\t%0, %1, %3, %2\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n+\n+(define_insn \"extzv_t2\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(zero_extract:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n+                         (match_operand:SI 2 \"const_int_operand\" \"M\")\n+                         (match_operand:SI 3 \"const_int_operand\" \"M\")))]\n+  \"arm_arch_thumb2\"\n+  \"ubfx%?\\t%0, %1, %3, %2\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"predicable\" \"yes\")]\n+)\n+\n \f\n ;; Unary arithmetic insns\n "}]}