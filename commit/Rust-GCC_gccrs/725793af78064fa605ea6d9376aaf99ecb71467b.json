{"sha": "725793af78064fa605ea6d9376aaf99ecb71467b", "node_id": "C_kwDOANBUbNoAKDcyNTc5M2FmNzgwNjRmYTYwNWVhNmQ5Mzc2YWFmOTllY2I3MTQ2N2I", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-06-27T21:00:33Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-06-27T21:00:33Z"}, "message": "Add 'final' and 'override' to opt_pass vfunc impls\n\ngcc/ChangeLog:\n\t* adjust-alignment.cc: Add \"final\" and \"override\" to opt_pass\n\tvfunc implementations, removing redundant \"virtual\" as\n\tappropriate.\n\t* asan.cc: Likewise.\n\t* auto-inc-dec.cc: Likewise.\n\t* auto-profile.cc: Likewise.\n\t* bb-reorder.cc: Likewise.\n\t* cfgcleanup.cc: Likewise.\n\t* cfgexpand.cc: Likewise.\n\t* cfgrtl.cc: Likewise.\n\t* cgraphbuild.cc: Likewise.\n\t* combine-stack-adj.cc: Likewise.\n\t* combine.cc: Likewise.\n\t* compare-elim.cc: Likewise.\n\t* config/i386/i386-features.cc: Likewise.\n\t* coroutine-passes.cc: Likewise.\n\t* cprop.cc: Likewise.\n\t* cse.cc: Likewise.\n\t* dce.cc: Likewise.\n\t* df-core.cc: Likewise.\n\t* dse.cc: Likewise.\n\t* dwarf2cfi.cc: Likewise.\n\t* early-remat.cc: Likewise.\n\t* except.cc: Likewise.\n\t* final.cc: Likewise.\n\t* function.cc: Likewise.\n\t* fwprop.cc: Likewise.\n\t* gcse.cc: Likewise.\n\t* gimple-harden-conditionals.cc: Likewise.\n\t* gimple-if-to-switch.cc: Likewise.\n\t* gimple-isel.cc: Likewise.\n\t* gimple-laddress.cc: Likewise.\n\t* gimple-loop-interchange.cc: Likewise.\n\t* gimple-loop-jam.cc: Likewise.\n\t* gimple-loop-versioning.cc: Likewise.\n\t* gimple-low.cc: Likewise.\n\t* gimple-ssa-backprop.cc: Likewise.\n\t* gimple-ssa-evrp.cc: Likewise.\n\t* gimple-ssa-isolate-paths.cc: Likewise.\n\t* gimple-ssa-nonnull-compare.cc: Likewise.\n\t* gimple-ssa-split-paths.cc: Likewise.\n\t* gimple-ssa-store-merging.cc: Likewise.\n\t* gimple-ssa-strength-reduction.cc: Likewise.\n\t* gimple-ssa-warn-access.cc: Likewise.\n\t* gimple-ssa-warn-alloca.cc: Likewise.\n\t* gimple-ssa-warn-restrict.cc: Likewise.\n\t* gimple-warn-recursion.cc: Likewise.\n\t* graphite.cc: Likewise.\n\t* ifcvt.cc: Likewise.\n\t* init-regs.cc: Likewise.\n\t* ipa-comdats.cc: Likewise.\n\t* ipa-cp.cc: Likewise.\n\t* ipa-devirt.cc: Likewise.\n\t* ipa-fnsummary.cc: Likewise.\n\t* ipa-free-lang-data.cc: Likewise.\n\t* ipa-icf.cc: Likewise.\n\t* ipa-inline.cc: Likewise.\n\t* ipa-modref.cc: Likewise.\n\t* ipa-profile.cc: Likewise.\n\t* ipa-pure-const.cc: Likewise.\n\t* ipa-reference.cc: Likewise.\n\t* ipa-split.cc: Likewise.\n\t* ipa-sra.cc: Likewise.\n\t* ipa-visibility.cc: Likewise.\n\t* ipa.cc: Likewise.\n\t* ira.cc: Likewise.\n\t* jump.cc: Likewise.\n\t* loop-init.cc: Likewise.\n\t* lower-subreg.cc: Likewise.\n\t* mode-switching.cc: Likewise.\n\t* modulo-sched.cc: Likewise.\n\t* multiple_target.cc: Likewise.\n\t* omp-expand.cc: Likewise.\n\t* omp-low.cc: Likewise.\n\t* omp-oacc-kernels-decompose.cc: Likewise.\n\t* omp-oacc-neuter-broadcast.cc: Likewise.\n\t* omp-offload.cc: Likewise.\n\t* omp-simd-clone.cc: Likewise.\n\t* passes.cc: Likewise.\n\t* postreload-gcse.cc: Likewise.\n\t* postreload.cc: Likewise.\n\t* predict.cc: Likewise.\n\t* recog.cc: Likewise.\n\t* ree.cc: Likewise.\n\t* reg-stack.cc: Likewise.\n\t* regcprop.cc: Likewise.\n\t* reginfo.cc: Likewise.\n\t* regrename.cc: Likewise.\n\t* reorg.cc: Likewise.\n\t* sancov.cc: Likewise.\n\t* sanopt.cc: Likewise.\n\t* sched-rgn.cc: Likewise.\n\t* stack-ptr-mod.cc: Likewise.\n\t* store-motion.cc: Likewise.\n\t* tracer.cc: Likewise.\n\t* trans-mem.cc: Likewise.\n\t* tree-call-cdce.cc: Likewise.\n\t* tree-cfg.cc: Likewise.\n\t* tree-cfgcleanup.cc: Likewise.\n\t* tree-complex.cc: Likewise.\n\t* tree-eh.cc: Likewise.\n\t* tree-emutls.cc: Likewise.\n\t* tree-if-conv.cc: Likewise.\n\t* tree-into-ssa.cc: Likewise.\n\t* tree-loop-distribution.cc: Likewise.\n\t* tree-nrv.cc: Likewise.\n\t* tree-object-size.cc: Likewise.\n\t* tree-parloops.cc: Likewise.\n\t* tree-predcom.cc: Likewise.\n\t* tree-profile.cc: Likewise.\n\t* tree-sra.cc: Likewise.\n\t* tree-ssa-ccp.cc: Likewise.\n\t* tree-ssa-copy.cc: Likewise.\n\t* tree-ssa-dce.cc: Likewise.\n\t* tree-ssa-dom.cc: Likewise.\n\t* tree-ssa-dse.cc: Likewise.\n\t* tree-ssa-forwprop.cc: Likewise.\n\t* tree-ssa-ifcombine.cc: Likewise.\n\t* tree-ssa-loop-ch.cc: Likewise.\n\t* tree-ssa-loop-im.cc: Likewise.\n\t* tree-ssa-loop-ivcanon.cc: Likewise.\n\t* tree-ssa-loop-prefetch.cc: Likewise.\n\t* tree-ssa-loop-split.cc: Likewise.\n\t* tree-ssa-loop-unswitch.cc: Likewise.\n\t* tree-ssa-loop.cc: Likewise.\n\t* tree-ssa-math-opts.cc: Likewise.\n\t* tree-ssa-phiopt.cc: Likewise.\n\t* tree-ssa-phiprop.cc: Likewise.\n\t* tree-ssa-pre.cc: Likewise.\n\t* tree-ssa-reassoc.cc: Likewise.\n\t* tree-ssa-sccvn.cc: Likewise.\n\t* tree-ssa-sink.cc: Likewise.\n\t* tree-ssa-strlen.cc: Likewise.\n\t* tree-ssa-structalias.cc: Likewise.\n\t* tree-ssa-uncprop.cc: Likewise.\n\t* tree-ssa-uninit.cc: Likewise.\n\t* tree-ssanames.cc: Likewise.\n\t* tree-stdarg.cc: Likewise.\n\t* tree-switch-conversion.cc: Likewise.\n\t* tree-tailcall.cc: Likewise.\n\t* tree-vect-generic.cc: Likewise.\n\t* tree-vectorizer.cc: Likewise.\n\t* tree-vrp.cc: Likewise.\n\t* tsan.cc: Likewise.\n\t* ubsan.cc: Likewise.\n\t* var-tracking.cc: Likewise.\n\t* vtable-verify.cc: Likewise.\n\t* web.cc: Likewise.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "b2b9dad06cb0640262e139cb59cf7c6a39a2423c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2b9dad06cb0640262e139cb59cf7c6a39a2423c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/725793af78064fa605ea6d9376aaf99ecb71467b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/725793af78064fa605ea6d9376aaf99ecb71467b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/725793af78064fa605ea6d9376aaf99ecb71467b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/725793af78064fa605ea6d9376aaf99ecb71467b/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ce49a6e69a913e08b596b2da8f794cc21558d3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ce49a6e69a913e08b596b2da8f794cc21558d3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ce49a6e69a913e08b596b2da8f794cc21558d3c"}], "stats": {"total": 1321, "additions": 769, "deletions": 552}, "files": [{"sha": "5c5f8f4e5c07b4f9b6f534b3c700d13abd9907a2", "filename": "gcc/adjust-alignment.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fadjust-alignment.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fadjust-alignment.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fadjust-alignment.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -50,7 +50,7 @@ class pass_adjust_alignment : public gimple_opt_pass\n     : gimple_opt_pass (pass_data_adjust_alignment, ctxt)\n   {}\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n }; // class pass_adjust_alignment\n \n } // anon namespace"}, {"sha": "8276f12cc69438b99aa87cf318963397da344ec9", "filename": "gcc/asan.cc", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fasan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fasan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -4222,9 +4222,15 @@ class pass_asan : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_asan (m_ctxt); }\n-  virtual bool gate (function *) { return gate_asan () || gate_hwasan (); }\n-  virtual unsigned int execute (function *) { return asan_instrument (); }\n+  opt_pass * clone () final override { return new pass_asan (m_ctxt); }\n+  bool gate (function *) final override\n+  {\n+    return gate_asan () || gate_hwasan ();\n+  }\n+  unsigned int execute (function *) final override\n+  {\n+    return asan_instrument ();\n+  }\n \n }; // class pass_asan\n \n@@ -4259,11 +4265,14 @@ class pass_asan_O0 : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return !optimize && (gate_asan () || gate_hwasan ());\n     }\n-  virtual unsigned int execute (function *) { return asan_instrument (); }\n+  unsigned int execute (function *) final override\n+  {\n+    return asan_instrument ();\n+  }\n \n }; // class pass_asan_O0\n "}, {"sha": "481e7af68956d859546929a36fd82abad86ba217", "filename": "gcc/auto-inc-dec.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fauto-inc-dec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fauto-inc-dec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fauto-inc-dec.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1692,7 +1692,7 @@ class pass_inc_dec : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       if (!AUTO_INC_DEC)\n \treturn false;\n@@ -1701,7 +1701,7 @@ class pass_inc_dec : public rtl_opt_pass\n     }\n \n \n-  unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_inc_dec\n "}, {"sha": "6533722817f6d6708041ebfdc7e9ad100affa768", "filename": "gcc/auto-profile.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fauto-profile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fauto-profile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fauto-profile.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1752,13 +1752,13 @@ class pass_ipa_auto_profile : public simple_ipa_opt_pass\n   }\n \n   /* opt_pass methods: */\n-  virtual bool\n-  gate (function *)\n+  bool\n+  gate (function *) final override\n   {\n     return flag_auto_profile;\n   }\n-  virtual unsigned int\n-  execute (function *)\n+  unsigned int\n+  execute (function *) final override\n   {\n     return autofdo::auto_profile ();\n   }"}, {"sha": "5cd48255f8a12ec88eafad0626fb1f0ce708c83b", "filename": "gcc/bb-reorder.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fbb-reorder.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fbb-reorder.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -2633,15 +2633,15 @@ class pass_reorder_blocks : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       if (targetm.cannot_modify_jumps_p ())\n \treturn false;\n       return (optimize > 0\n \t      && (flag_reorder_blocks || flag_reorder_blocks_and_partition));\n     }\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_reorder_blocks\n \n@@ -2794,8 +2794,8 @@ class pass_duplicate_computed_gotos : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *);\n+  bool gate (function *) final override;\n+  unsigned int execute (function *) final override;\n \n }; // class pass_duplicate_computed_gotos\n \n@@ -2937,8 +2937,8 @@ class pass_partition_blocks : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *);\n+  bool gate (function *) final override;\n+  unsigned int execute (function *) final override;\n \n }; // class pass_partition_blocks\n "}, {"sha": "18047da7b2424d440acd12fc3ab0b21b476d79c6", "filename": "gcc/cfgcleanup.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fcfgcleanup.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fcfgcleanup.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -3227,7 +3227,7 @@ class pass_jump : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_jump\n \n@@ -3274,11 +3274,11 @@ class pass_jump_after_combine : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n   {\n     return flag_thread_jumps && flag_expensive_optimizations;\n   }\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_jump_after_combine\n \n@@ -3322,7 +3322,7 @@ class pass_jump2 : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       cleanup_cfg (flag_crossjumping ? CLEANUP_CROSSJUMP : 0);\n       return 0;"}, {"sha": "1d7f6b260d04dcf6cd5831bd3df0202afa36a04d", "filename": "gcc/cfgexpand.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fcfgexpand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fcfgexpand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -6573,7 +6573,7 @@ class pass_expand : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_expand\n "}, {"sha": "a05c338a4c81f40403352b8f85597e41a87fa91d", "filename": "gcc/cfgrtl.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fcfgrtl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fcfgrtl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -483,7 +483,7 @@ class pass_free_cfg : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_free_cfg\n \n@@ -3698,7 +3698,7 @@ class pass_into_cfg_layout_mode : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       cfg_layout_initialize (0);\n       return 0;\n@@ -3737,7 +3737,7 @@ class pass_outof_cfg_layout_mode : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_outof_cfg_layout_mode\n "}, {"sha": "bae44591a29caa43e5dc603a96ef4df2786f99ce", "filename": "gcc/cgraphbuild.cc", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fcgraphbuild.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fcgraphbuild.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphbuild.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -290,7 +290,7 @@ class pass_build_cgraph_edges : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_build_cgraph_edges\n \n@@ -484,8 +484,11 @@ class pass_rebuild_cgraph_edges : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_rebuild_cgraph_edges (m_ctxt); }\n-  virtual unsigned int execute (function *)\n+  opt_pass * clone () final override\n+  {\n+    return new pass_rebuild_cgraph_edges (m_ctxt);\n+  }\n+  unsigned int execute (function *) final override\n   {\n     return cgraph_edge::rebuild_edges ();\n   }\n@@ -524,10 +527,10 @@ class pass_remove_cgraph_callee_edges : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () {\n+  opt_pass * clone () final override {\n     return new pass_remove_cgraph_callee_edges (m_ctxt);\n   }\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_remove_cgraph_callee_edges\n "}, {"sha": "e76d60a8f7e4c11a4197ca4def77d684ca0ffdd5", "filename": "gcc/combine-stack-adj.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fcombine-stack-adj.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fcombine-stack-adj.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine-stack-adj.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -823,8 +823,8 @@ class pass_stack_adjustments : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *)\n+  bool gate (function *) final override;\n+  unsigned int execute (function *) final override\n     {\n       return rest_of_handle_stack_adjustments ();\n     }"}, {"sha": "a8305273e4447fa202c2d4d912682d79e6131671", "filename": "gcc/combine.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fcombine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fcombine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -15015,8 +15015,8 @@ class pass_combine : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return (optimize > 0); }\n-  virtual unsigned int execute (function *)\n+  bool gate (function *) final override { return (optimize > 0); }\n+  unsigned int execute (function *) final override\n     {\n       return rest_of_handle_combine ();\n     }"}, {"sha": "e869d9d32498b6a3e4f0558f79ffe02401a73f69", "filename": "gcc/compare-elim.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fcompare-elim.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fcompare-elim.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcompare-elim.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -954,15 +954,15 @@ class pass_compare_elim_after_reload : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       /* Setting this target hook value is how a backend indicates the need.  */\n       if (targetm.flags_regnum == INVALID_REGNUM)\n \treturn false;\n       return flag_compare_elim_after_reload;\n     }\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return execute_compare_elim_after_reload ();\n     }"}, {"sha": "be385869e17ba8fc2f03ddef363f041266c1dcc6", "filename": "gcc/config/i386/i386-features.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1880,13 +1880,13 @@ class pass_insert_vzeroupper : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return TARGET_AVX && TARGET_VZEROUPPER\n \t&& flag_expensive_optimizations && !optimize_size;\n     }\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return rest_of_handle_insert_vzeroupper ();\n     }\n@@ -1915,23 +1915,23 @@ class pass_stv : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return ((!timode_p || TARGET_64BIT)\n \t      && TARGET_STV && TARGET_SSE2 && optimize > 1);\n     }\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return convert_scalars_to_vector (timode_p);\n     }\n \n-  opt_pass *clone ()\n+  opt_pass *clone () final override\n     {\n       return new pass_stv (m_ctxt);\n     }\n \n-  void set_pass_param (unsigned int n, bool param)\n+  void set_pass_param (unsigned int n, bool param) final override\n     {\n       gcc_assert (n == 0);\n       timode_p = param;\n@@ -2142,14 +2142,14 @@ class pass_insert_endbr_and_patchable_area : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       need_endbr = (flag_cf_protection & CF_BRANCH) != 0;\n       patchable_area_size = crtl->patch_area_size - crtl->patch_area_entry;\n       return need_endbr || patchable_area_size;\n     }\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       timevar_push (TV_MACH_DEP);\n       rest_of_insert_endbr_and_patchable_area (need_endbr,\n@@ -2406,7 +2406,7 @@ class pass_remove_partial_avx_dependency : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return (TARGET_AVX\n \t      && TARGET_SSE_PARTIAL_REG_DEPENDENCY\n@@ -2415,7 +2415,7 @@ class pass_remove_partial_avx_dependency : public rtl_opt_pass\n \t      && optimize_function_for_speed_p (cfun));\n     }\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return remove_partial_avx_dependency ();\n     }"}, {"sha": "21ac94698052e94a8111693f441738aad314fc86", "filename": "gcc/coroutine-passes.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fcoroutine-passes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fcoroutine-passes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoroutine-passes.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -213,9 +213,9 @@ class pass_coroutine_lower_builtins : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_coroutines; };\n+  bool gate (function *) final override { return flag_coroutines; };\n \n-  virtual unsigned int execute (function *f ATTRIBUTE_UNUSED)\n+  unsigned int execute (function *f ATTRIBUTE_UNUSED) final override\n   {\n     return execute_lower_coro_builtins ();\n   }\n@@ -511,12 +511,12 @@ class pass_coroutine_early_expand_ifns : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *f)\n+  bool gate (function *f) final override\n     {\n       return flag_coroutines && f->coroutine_component;\n     }\n \n-  virtual unsigned int execute (function *f ATTRIBUTE_UNUSED)\n+  unsigned int execute (function *f ATTRIBUTE_UNUSED) final override\n   {\n     return execute_early_expand_coro_ifns ();\n   }"}, {"sha": "580f811545d6213f98d8cf5889f9dbd70bae7e9f", "filename": "gcc/cprop.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fcprop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fcprop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcprop.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1953,15 +1953,18 @@ class pass_rtl_cprop : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_rtl_cprop (m_ctxt); }\n-  virtual bool gate (function *fun)\n+  opt_pass * clone () final override { return new pass_rtl_cprop (m_ctxt); }\n+  bool gate (function *fun) final override\n     {\n       return optimize > 0 && flag_gcse\n \t&& !fun->calls_setjmp\n \t&& dbg_cnt (cprop);\n     }\n \n-  virtual unsigned int execute (function *) { return execute_rtl_cprop (); }\n+  unsigned int execute (function *) final override\n+  {\n+    return execute_rtl_cprop ();\n+  }\n \n }; // class pass_rtl_cprop\n "}, {"sha": "b13afd4ba72eda7b771a7db1c89cfbb44ebd7e45", "filename": "gcc/cse.cc", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fcse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fcse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -7571,8 +7571,11 @@ class pass_cse : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return optimize > 0; }\n-  virtual unsigned int execute (function *) { return rest_of_handle_cse (); }\n+  bool gate (function *) final override { return optimize > 0; }\n+  unsigned int execute (function *) final override\n+  {\n+    return rest_of_handle_cse ();\n+  }\n \n }; // class pass_cse\n \n@@ -7642,12 +7645,15 @@ class pass_cse2 : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return optimize > 0 && flag_rerun_cse_after_loop;\n     }\n \n-  virtual unsigned int execute (function *) { return rest_of_handle_cse2 (); }\n+  unsigned int execute (function *) final override\n+  {\n+    return rest_of_handle_cse2 ();\n+  }\n \n }; // class pass_cse2\n \n@@ -7715,12 +7721,12 @@ class pass_cse_after_global_opts : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return optimize > 0 && flag_rerun_cse_after_global_opts;\n     }\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return rest_of_handle_cse_after_global_opts ();\n     }"}, {"sha": "64aa0aa471d620b6636b4cbc93d6e36ab90796c8", "filename": "gcc/dce.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fdce.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fdce.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -849,12 +849,12 @@ class pass_ud_rtl_dce : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return optimize > 1 && flag_dce && dbg_cnt (dce_ud);\n     }\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return rest_of_handle_ud_dce ();\n     }\n@@ -1280,12 +1280,12 @@ class pass_fast_rtl_dce : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return optimize > 0 && flag_dce && dbg_cnt (dce_fast);\n     }\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return rest_of_handle_fast_dce ();\n     }"}, {"sha": "b53464ccfde816b14d663ea29897712d916f025b", "filename": "gcc/df-core.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fdf-core.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fdf-core.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -741,8 +741,8 @@ class pass_df_initialize_opt : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return optimize > 0; }\n-  virtual unsigned int execute (function *)\n+  bool gate (function *) final override { return optimize > 0; }\n+  unsigned int execute (function *) final override\n     {\n       return rest_of_handle_df_initialize ();\n     }\n@@ -781,8 +781,8 @@ class pass_df_initialize_no_opt : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return optimize == 0; }\n-  virtual unsigned int execute (function *)\n+  bool gate (function *) final override { return optimize == 0; }\n+  unsigned int execute (function *) final override\n     {\n       return rest_of_handle_df_initialize ();\n     }\n@@ -848,7 +848,7 @@ class pass_df_finish : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return rest_of_handle_df_finish ();\n     }"}, {"sha": "90a4c1f22dba6a672a8b4ea8ad9fe9755084c3a3", "filename": "gcc/dse.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fdse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fdse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -3755,12 +3755,15 @@ class pass_rtl_dse1 : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return optimize > 0 && flag_dse && dbg_cnt (dse1);\n     }\n \n-  virtual unsigned int execute (function *) { return rest_of_handle_dse (); }\n+  unsigned int execute (function *) final override\n+  {\n+    return rest_of_handle_dse ();\n+  }\n \n }; // class pass_rtl_dse1\n \n@@ -3795,12 +3798,15 @@ class pass_rtl_dse2 : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return optimize > 0 && flag_dse && dbg_cnt (dse2);\n     }\n \n-  virtual unsigned int execute (function *) { return rest_of_handle_dse (); }\n+  unsigned int execute (function *) final override\n+  {\n+    return rest_of_handle_dse ();\n+  }\n \n }; // class pass_rtl_dse2\n "}, {"sha": "bef3165e691ea93e7272ebf8adaf5cc66d04b6b7", "filename": "gcc/dwarf2cfi.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fdwarf2cfi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fdwarf2cfi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -3788,8 +3788,11 @@ class pass_dwarf2_frame : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *) { return execute_dwarf2_frame (); }\n+  bool gate (function *) final override;\n+  unsigned int execute (function *) final override\n+  {\n+    return execute_dwarf2_frame ();\n+  }\n \n }; // class pass_dwarf2_frame\n "}, {"sha": "5c368293c35eda79a56d2547167eb72b827bb400", "filename": "gcc/early-remat.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fearly-remat.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fearly-remat.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fearly-remat.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -2615,12 +2615,12 @@ class pass_early_remat : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n   {\n     return optimize > 1 && NUM_POLY_INT_COEFFS > 1;\n   }\n \n-  virtual unsigned int execute (function *f)\n+  unsigned int execute (function *f) final override\n   {\n     auto_sbitmap selected_modes (NUM_MACHINE_MODES);\n     bitmap_clear (selected_modes);"}, {"sha": "7d7ce40c8466cd4b146d8807ce1a85066d5262d6", "filename": "gcc/except.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -2047,7 +2047,7 @@ class pass_set_nothrow_function_flags : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return set_nothrow_function_flags ();\n     }\n@@ -2722,8 +2722,8 @@ class pass_convert_to_eh_region_ranges : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *)\n+  bool gate (function *) final override;\n+  unsigned int execute (function *) final override\n     {\n       int ret = convert_to_eh_region_ranges ();\n       maybe_add_nop_after_section_switch ();"}, {"sha": "0352786e49b140f0973e7498338bb7dd4c23578c", "filename": "gcc/final.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ffinal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ffinal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -804,7 +804,10 @@ class pass_compute_alignments : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *) { return compute_alignments (); }\n+  unsigned int execute (function *) final override\n+  {\n+    return compute_alignments ();\n+  }\n \n }; // class pass_compute_alignments\n \n@@ -4356,7 +4359,10 @@ class pass_final : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *) { return rest_of_handle_final (); }\n+  unsigned int execute (function *) final override\n+  {\n+    return rest_of_handle_final ();\n+  }\n \n }; // class pass_final\n \n@@ -4400,7 +4406,7 @@ class pass_shorten_branches : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return rest_of_handle_shorten_branches ();\n     }\n@@ -4575,7 +4581,7 @@ class pass_clean_state : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return rest_of_clean_state ();\n     }"}, {"sha": "0c3e4fffb05b7d318301a059cbb5872a0e19dcd9", "filename": "gcc/function.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ffunction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ffunction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -2029,7 +2029,7 @@ class pass_instantiate_virtual_regs : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return instantiate_virtual_regs ();\n     }\n@@ -6516,7 +6516,7 @@ class pass_leaf_regs : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return rest_of_handle_check_leaf_regs ();\n     }\n@@ -6617,7 +6617,7 @@ class pass_thread_prologue_and_epilogue : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return rest_of_handle_thread_prologue_and_epilogue ();\n     }\n@@ -6655,7 +6655,7 @@ class pass_zero_call_used_regs: public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_zero_call_used_regs\n \n@@ -6926,7 +6926,7 @@ class pass_match_asm_constraints : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_match_asm_constraints\n "}, {"sha": "fc652ab9a1f0aa2ee7536c43b19238b8c59dd48a", "filename": "gcc/fwprop.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ffwprop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ffwprop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffwprop.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1029,8 +1029,8 @@ class pass_rtl_fwprop : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return gate_fwprop (); }\n-  virtual unsigned int execute (function *) { return fwprop (false); }\n+  bool gate (function *) final override { return gate_fwprop (); }\n+  unsigned int execute (function *) final override { return fwprop (false); }\n \n }; // class pass_rtl_fwprop\n \n@@ -1065,8 +1065,8 @@ class pass_rtl_fwprop_addr : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return gate_fwprop (); }\n-  virtual unsigned int execute (function *) { return fwprop (true); }\n+  bool gate (function *) final override { return gate_fwprop (); }\n+  unsigned int execute (function *) final override { return fwprop (true); }\n \n }; // class pass_rtl_fwprop_addr\n "}, {"sha": "f06278a5534c3c5b9a925971b1f124e3c8985dc7", "filename": "gcc/gcse.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgcse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgcse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -4049,8 +4049,11 @@ class pass_rtl_pre : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *) { return execute_rtl_pre (); }\n+  bool gate (function *) final override;\n+  unsigned int execute (function *)  final override\n+  {\n+    return execute_rtl_pre ();\n+  }\n \n }; // class pass_rtl_pre\n \n@@ -4099,8 +4102,11 @@ class pass_rtl_hoist : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *) { return execute_rtl_hoist (); }\n+  bool gate (function *) final override;\n+  unsigned int execute (function *) final override\n+  {\n+    return execute_rtl_hoist ();\n+  }\n \n }; // class pass_rtl_hoist\n "}, {"sha": "4ca6776fca71dd5125e740c8d59df646c4c139c6", "filename": "gcc/gimple-harden-conditionals.cc", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-harden-conditionals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-harden-conditionals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-harden-conditionals.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -71,11 +71,15 @@ class pass_harden_compares : public gimple_opt_pass\n   pass_harden_compares (gcc::context *ctxt)\n     : gimple_opt_pass (pass_data_harden_compares, ctxt)\n   {}\n-  opt_pass *clone () { return new pass_harden_compares (m_ctxt); }\n-  virtual bool gate (function *) {\n+  opt_pass *clone ()  final override\n+  {\n+    return new pass_harden_compares (m_ctxt);\n+  }\n+  bool gate (function *) final override\n+  {\n     return flag_harden_compares;\n   }\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n };\n \n /* Define a pass to harden conditionals in branches.  This pass must\n@@ -102,11 +106,15 @@ class pass_harden_conditional_branches : public gimple_opt_pass\n   pass_harden_conditional_branches (gcc::context *ctxt)\n     : gimple_opt_pass (pass_data_harden_conditional_branches, ctxt)\n   {}\n-  opt_pass *clone () { return new pass_harden_conditional_branches (m_ctxt); }\n-  virtual bool gate (function *) {\n+  opt_pass *clone () final override\n+  {\n+    return new pass_harden_conditional_branches (m_ctxt);\n+  }\n+  bool gate (function *) final override\n+  {\n     return flag_harden_conditional_branches;\n   }\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n };\n \n }"}, {"sha": "70daae2003c65c94e8cdf6c652beca44017fabf2", "filename": "gcc/gimple-if-to-switch.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-if-to-switch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-if-to-switch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-if-to-switch.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -480,13 +480,13 @@ class pass_if_to_switch : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n   {\n     return (jump_table_cluster::is_enabled ()\n \t    || bit_test_cluster::is_enabled ());\n   }\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_if_to_switch\n "}, {"sha": "aa9c12907356e7df275fba69e794bf242ab2431a", "filename": "gcc/gimple-isel.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-isel.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-isel.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-isel.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -355,12 +355,12 @@ class pass_gimple_isel : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return true;\n     }\n \n-  virtual unsigned int execute (function *fun)\n+  unsigned int execute (function *fun) final override\n     {\n       return gimple_expand_vec_exprs (fun);\n     }"}, {"sha": "11754dac5c38d7edbc8afb10795d6dca158840b0", "filename": "gcc/gimple-laddress.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-laddress.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-laddress.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-laddress.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -66,9 +66,9 @@ class pass_laddress : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_laddress (m_ctxt); }\n-  virtual bool gate (function *) { return optimize != 0; }\n-  virtual unsigned int execute (function *);\n+  opt_pass * clone () final override { return new pass_laddress (m_ctxt); }\n+  bool gate (function *) final override { return optimize != 0; }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_laddress\n "}, {"sha": "71772b6d149edb2555ffd1bd1b35e9c8cede8f04", "filename": "gcc/gimple-loop-interchange.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-loop-interchange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-loop-interchange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-loop-interchange.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1705,9 +1705,9 @@ class pass_linterchange : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_linterchange (m_ctxt); }\n-  virtual bool gate (function *) { return flag_loop_interchange; }\n-  virtual unsigned int execute (function *);\n+  opt_pass * clone () final override { return new pass_linterchange (m_ctxt); }\n+  bool gate (function *) final override { return flag_loop_interchange; }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_linterchange\n "}, {"sha": "9b18b52a54ce66ed03a993be81141bc6614f6428", "filename": "gcc/gimple-loop-jam.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-loop-jam.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-loop-jam.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-loop-jam.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -641,8 +641,8 @@ class pass_loop_jam : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_unroll_jam != 0; }\n-  virtual unsigned int execute (function *);\n+  bool gate (function *) final override { return flag_unroll_jam != 0; }\n+  unsigned int execute (function *) final override;\n \n };\n "}, {"sha": "6bcf6eba691bb15def3477a02cc971080e52f8c7", "filename": "gcc/gimple-loop-versioning.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-loop-versioning.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-loop-versioning.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-loop-versioning.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1782,8 +1782,11 @@ class pass_loop_versioning : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_version_loops_for_strides; }\n-  virtual unsigned int execute (function *);\n+  bool gate (function *) final override\n+  {\n+    return flag_version_loops_for_strides;\n+  }\n+  unsigned int execute (function *) final override;\n };\n \n unsigned int"}, {"sha": "4cd27dd19b05ac67c65b6a935422a3abb53646c4", "filename": "gcc/gimple-low.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-low.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-low.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -192,7 +192,10 @@ class pass_lower_cf : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *) { return lower_function_body (); }\n+  unsigned int execute (function *) final override\n+  {\n+    return lower_function_body ();\n+  }\n \n }; // class pass_lower_cf\n "}, {"sha": "55986ddbfe3f53f534832b80763dfea99873d7b7", "filename": "gcc/gimple-ssa-backprop.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-ssa-backprop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-ssa-backprop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-backprop.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -945,9 +945,9 @@ class pass_backprop : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_backprop (m_ctxt); }\n-  virtual bool gate (function *) { return flag_ssa_backprop; }\n-  virtual unsigned int execute (function *);\n+  opt_pass * clone () final override { return new pass_backprop (m_ctxt); }\n+  bool gate (function *) final override { return flag_ssa_backprop; }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_backprop\n "}, {"sha": "793a3ea1f1928ac0dc00e47b61791322edcb9eb0", "filename": "gcc/gimple-ssa-evrp.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-ssa-evrp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-ssa-evrp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -377,12 +377,12 @@ class pass_early_vrp : public gimple_opt_pass\n     {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_early_vrp (m_ctxt); }\n-  virtual bool gate (function *)\n+  opt_pass * clone () final override { return new pass_early_vrp (m_ctxt); }\n+  bool gate (function *) final override\n     {\n       return flag_tree_vrp != 0;\n     }\n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     { return execute_early_vrp (); }\n \n }; // class pass_vrp"}, {"sha": "87ecd19ef4a49c8e907dcb444c58ae7d78afb54a", "filename": "gcc/gimple-ssa-isolate-paths.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-ssa-isolate-paths.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-ssa-isolate-paths.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-isolate-paths.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -969,8 +969,11 @@ class pass_isolate_erroneous_paths : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_isolate_erroneous_paths (m_ctxt); }\n-  virtual bool gate (function *)\n+  opt_pass * clone () final override\n+  {\n+    return new pass_isolate_erroneous_paths (m_ctxt);\n+  }\n+  bool gate (function *) final override\n     {\n       /* If we do not have a suitable builtin function for the trap statement,\n \t then do not perform the optimization.  */\n@@ -979,7 +982,7 @@ class pass_isolate_erroneous_paths : public gimple_opt_pass\n \t      || warn_null_dereference);\n     }\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return gimple_ssa_isolate_erroneous_paths ();\n     }"}, {"sha": "f9ce8c7a0834c35bbe0fdf52db9ba0f991f4ace7", "filename": "gcc/gimple-ssa-nonnull-compare.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-ssa-nonnull-compare.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-ssa-nonnull-compare.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-nonnull-compare.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -126,9 +126,9 @@ class pass_warn_nonnull_compare : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return warn_nonnull_compare; }\n+  bool gate (function *) final override { return warn_nonnull_compare; }\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_warn_nonnull_compare\n "}, {"sha": "f2e43e52c952424d28462d74ca08c58ba002fe2c", "filename": "gcc/gimple-ssa-split-paths.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-ssa-split-paths.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-ssa-split-paths.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-split-paths.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -579,9 +579,12 @@ class pass_split_paths : public gimple_opt_pass\n       : gimple_opt_pass (pass_data_split_paths, ctxt)\n     {}\n    /* opt_pass methods: */\n-   opt_pass * clone () { return new pass_split_paths (m_ctxt); }\n-   virtual bool gate (function *) { return gate_split_paths (); }\n-   virtual unsigned int execute (function *) { return execute_split_paths (); }\n+  opt_pass * clone () final override { return new pass_split_paths (m_ctxt); }\n+  bool gate (function *) final override { return gate_split_paths (); }\n+  unsigned int execute (function *) final override\n+  {\n+    return execute_split_paths ();\n+  }\n \n }; // class pass_split_paths\n "}, {"sha": "0640168bcc4570c3bc14cadcb65665a1ab942a36", "filename": "gcc/gimple-ssa-store-merging.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-ssa-store-merging.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-ssa-store-merging.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1037,12 +1037,12 @@ class pass_optimize_bswap : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return flag_expensive_optimizations && optimize && BITS_PER_UNIT == 8;\n     }\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_optimize_bswap\n \n@@ -2433,16 +2433,16 @@ class pass_store_merging : public gimple_opt_pass\n   /* Pass not supported for PDP-endian, nor for insane hosts or\n      target character sizes where native_{encode,interpret}_expr\n      doesn't work properly.  */\n-  virtual bool\n-  gate (function *)\n+  bool\n+  gate (function *) final override\n   {\n     return flag_store_merging\n \t   && BYTES_BIG_ENDIAN == WORDS_BIG_ENDIAN\n \t   && CHAR_BIT == 8\n \t   && BITS_PER_UNIT == 8;\n   }\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n private:\n   hash_map<tree_operand_hash, class imm_store_chain_info *> m_stores;"}, {"sha": "2b559e96fc832518f27ef6c8ebb5346f3560d681", "filename": "gcc/gimple-ssa-strength-reduction.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-ssa-strength-reduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-ssa-strength-reduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -4002,8 +4002,8 @@ class pass_strength_reduction : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_tree_slsr; }\n-  virtual unsigned int execute (function *);\n+  bool gate (function *) final override { return flag_tree_slsr; }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_strength_reduction\n "}, {"sha": "04aa849a4b12a090da31670f830f7e07d57619e1", "filename": "gcc/gimple-ssa-warn-access.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-ssa-warn-access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-ssa-warn-access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-access.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -2075,13 +2075,13 @@ class pass_waccess : public gimple_opt_pass\n \n   ~pass_waccess ();\n \n-  opt_pass *clone ();\n+  opt_pass *clone () final override;\n \n-  virtual bool gate (function *);\n+  bool gate (function *) final override;\n \n-  void set_pass_param (unsigned, bool);\n+  void set_pass_param (unsigned, bool) final override;\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n private:\n   /* Not copyable or assignable.  */"}, {"sha": "83a241a3a4ba6be4b3def32983826f24e234c705", "filename": "gcc/gimple-ssa-warn-alloca.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-ssa-warn-alloca.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-ssa-warn-alloca.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-alloca.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -58,8 +58,8 @@ class pass_walloca : public gimple_opt_pass\n   pass_walloca (gcc::context *ctxt)\n     : gimple_opt_pass(pass_data_walloca, ctxt), xlimit_certain_p (false)\n   {}\n-  opt_pass *clone () { return new pass_walloca (m_ctxt); }\n-  void set_pass_param (unsigned int n, bool param)\n+  opt_pass *clone () final override { return new pass_walloca (m_ctxt); }\n+  void set_pass_param (unsigned int n, bool param) final override\n     {\n       gcc_assert (n == 0);\n       // Set to true to enable only warnings for alloca calls that\n@@ -69,8 +69,8 @@ class pass_walloca : public gimple_opt_pass\n       // the \"may be too large\" kind.\n       xlimit_certain_p = param;\n     }\n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *);\n+  bool gate (function *) final override;\n+  unsigned int execute (function *) final override;\n \n  private:\n   // Set to TRUE the first time we run this pass on a function."}, {"sha": "6b6097a3d4c3710fa8d08d830ec6288c644a5594", "filename": "gcc/gimple-ssa-warn-restrict.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-ssa-warn-restrict.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-ssa-warn-restrict.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-restrict.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -64,8 +64,8 @@ class pass_wrestrict : public gimple_opt_pass\n  public:\n   pass_wrestrict (gcc::context *);\n \n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *);\n+  bool gate (function *) final override;\n+  unsigned int execute (function *) final override;\n \n   void check_call (gimple *);\n "}, {"sha": "9b04899cf787de9b33e48a735bf2adede8ae07e0", "filename": "gcc/gimple-warn-recursion.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-warn-recursion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgimple-warn-recursion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-warn-recursion.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -52,9 +52,9 @@ class pass_warn_recursion : public gimple_opt_pass\n   pass_warn_recursion (gcc::context *);\n \n private:\n-  virtual bool gate (function *) { return warn_infinite_recursion; }\n+  bool gate (function *) final override { return warn_infinite_recursion; }\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n   bool find_function_exit (basic_block);\n "}, {"sha": "a88b13c021988c1253d081081b4fba3fdb87240f", "filename": "gcc/graphite.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgraphite.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fgraphite.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -574,7 +574,7 @@ class pass_graphite : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return gate_graphite_transforms (); }\n+  bool gate (function *) final override { return gate_graphite_transforms (); }\n \n }; // class pass_graphite\n \n@@ -609,8 +609,11 @@ class pass_graphite_transforms : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return gate_graphite_transforms (); }\n-  virtual unsigned int execute (function *fun) { return graphite_transforms (fun); }\n+  bool gate (function *) final override { return gate_graphite_transforms (); }\n+  unsigned int execute (function *fun) final override\n+  {\n+    return graphite_transforms (fun);\n+  }\n \n }; // class pass_graphite_transforms\n "}, {"sha": "25aff38189e5206ea96f770b533ec4d4cde741c2", "filename": "gcc/ifcvt.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fifcvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fifcvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -5934,12 +5934,12 @@ class pass_rtl_ifcvt : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return (optimize > 0) && dbg_cnt (if_conversion);\n     }\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return rest_of_handle_if_conversion ();\n     }\n@@ -5981,13 +5981,13 @@ class pass_if_after_combine : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return optimize > 0 && flag_if_conversion\n \t&& dbg_cnt (if_after_combine);\n     }\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       if_convert (true);\n       return 0;\n@@ -6027,13 +6027,13 @@ class pass_if_after_reload : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return optimize > 0 && flag_if_conversion2\n \t&& dbg_cnt (if_after_reload);\n     }\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       if_convert (true);\n       return 0;"}, {"sha": "652befefdaa6540ec6c6eb3c403f5a466ed00a18", "filename": "gcc/init-regs.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Finit-regs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Finit-regs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finit-regs.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -153,8 +153,8 @@ class pass_initialize_regs : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return optimize > 0; }\n-  virtual unsigned int execute (function *)\n+  bool gate (function *) final override { return optimize > 0; }\n+  unsigned int execute (function *) final override\n     {\n       initialize_uninitialized_regs ();\n       return 0;"}, {"sha": "da792065ed3e5e9ea7e18eed3601dddfb9f7456d", "filename": "gcc/ipa-comdats.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-comdats.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-comdats.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-comdats.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -420,8 +420,8 @@ class pass_ipa_comdats : public ipa_opt_pass_d\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *) { return ipa_comdats (); }\n+  bool gate (function *) final override;\n+  unsigned int execute (function *) final override { return ipa_comdats (); }\n \n }; // class pass_ipa_comdats\n "}, {"sha": "18d2559e5a307f2e692bc3f61ba3d73d7c7d9507", "filename": "gcc/ipa-cp.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-cp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-cp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -6657,14 +6657,14 @@ class pass_ipa_cp : public ipa_opt_pass_d\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       /* FIXME: We should remove the optimize check after we ensure we never run\n \t IPA passes when not optimizing.  */\n       return (flag_ipa_cp && optimize) || in_lto_p;\n     }\n \n-  virtual unsigned int execute (function *) { return ipcp_driver (); }\n+  unsigned int execute (function *) final override { return ipcp_driver (); }\n \n }; // class pass_ipa_cp\n "}, {"sha": "412ca14f66b231ea1f15f6acd844a3feb420bcb9", "filename": "gcc/ipa-devirt.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-devirt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-devirt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -3969,7 +3969,7 @@ class pass_ipa_devirt : public ipa_opt_pass_d\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       /* In LTO, always run the IPA passes and decide on function basis if the\n \t pass is enabled.  */\n@@ -3982,7 +3982,7 @@ class pass_ipa_devirt : public ipa_opt_pass_d\n \t      && optimize);\n     }\n \n-  virtual unsigned int execute (function *) { return ipa_devirt (); }\n+  unsigned int execute (function *) final override { return ipa_devirt (); }\n \n }; // class pass_ipa_devirt\n \n@@ -4361,12 +4361,12 @@ class pass_ipa_odr : public ipa_opt_pass_d\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return (in_lto_p || flag_lto);\n     }\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return 0;\n     }"}, {"sha": "e2a86680a21ee20dbbcf1456b81382a6aca41675", "filename": "gcc/ipa-fnsummary.cc", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-fnsummary.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-fnsummary.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -4846,8 +4846,11 @@ class pass_local_fn_summary : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_local_fn_summary (m_ctxt); }\n-  virtual unsigned int execute (function *)\n+  opt_pass * clone () final override\n+  {\n+    return new pass_local_fn_summary (m_ctxt);\n+  }\n+  unsigned int execute (function *) final override\n     {\n       return compute_fn_summary_for_current ();\n     }\n@@ -4889,14 +4892,17 @@ class pass_ipa_free_fn_summary : public simple_ipa_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass *clone () { return new pass_ipa_free_fn_summary (m_ctxt); }\n-  void set_pass_param (unsigned int n, bool param)\n+  opt_pass *clone () final override\n+  {\n+    return new pass_ipa_free_fn_summary (m_ctxt);\n+  }\n+  void set_pass_param (unsigned int n, bool param) final override\n     {\n       gcc_assert (n == 0);\n       small_p = param;\n     }\n-  virtual bool gate (function *) { return true; }\n-  virtual unsigned int execute (function *)\n+  bool gate (function *) final override { return true; }\n+  unsigned int execute (function *) final override\n     {\n       ipa_free_fn_summary ();\n       /* Free ipa-prop structures if they are no longer needed.  */\n@@ -4950,7 +4956,7 @@ class pass_ipa_fn_summary : public ipa_opt_pass_d\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *) { return 0; }\n+  unsigned int execute (function *) final override { return 0; }\n \n }; // class pass_ipa_fn_summary\n "}, {"sha": "ccdbf849c25cad65229bbc95cb4c8f48f3cb5c0a", "filename": "gcc/ipa-free-lang-data.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-free-lang-data.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-free-lang-data.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-free-lang-data.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1173,7 +1173,7 @@ class pass_ipa_free_lang_data : public simple_ipa_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *) { return free_lang_data (); }\n+  unsigned int execute (function *) final override { return free_lang_data (); }\n \n }; // class pass_ipa_free_lang_data\n "}, {"sha": "65baa84c01162ffc2a3ff7f43e13f0625e44734e", "filename": "gcc/ipa-icf.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-icf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-icf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -3638,12 +3638,12 @@ class pass_ipa_icf : public ipa_opt_pass_d\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n   {\n     return in_lto_p || flag_ipa_icf_variables || flag_ipa_icf_functions;\n   }\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n   {\n     return ipa_icf_driver();\n   }"}, {"sha": "14969198cde1c675f8058043144c72bfa7b37c31", "filename": "gcc/ipa-inline.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-inline.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-inline.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -3100,7 +3100,7 @@ class pass_early_inline : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_early_inline\n \n@@ -3150,7 +3150,7 @@ class pass_ipa_inline : public ipa_opt_pass_d\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *) { return ipa_inline (); }\n+  unsigned int execute (function *) final override { return ipa_inline (); }\n \n }; // class pass_ipa_inline\n "}, {"sha": "0d9abacf0a6b93f3ad5ad68b4b4937aeaec030c9", "filename": "gcc/ipa-modref.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-modref.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-modref.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -3508,15 +3508,15 @@ class pass_modref : public gimple_opt_pass\n \t: gimple_opt_pass (pass_data_modref, ctxt) {}\n \n     /* opt_pass methods: */\n-    opt_pass *clone ()\n+    opt_pass *clone () final override\n     {\n       return new pass_modref (m_ctxt);\n     }\n-    virtual bool gate (function *)\n+    bool gate (function *) final override\n     {\n       return flag_ipa_modref;\n     }\n-    virtual unsigned int execute (function *);\n+    unsigned int execute (function *) final override;\n };\n \n /* Encode TT to the output block OB using the summary streaming API.  */\n@@ -4170,12 +4170,12 @@ class pass_ipa_modref : public ipa_opt_pass_d\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass *clone () { return new pass_ipa_modref (m_ctxt); }\n-  virtual bool gate (function *)\n+  opt_pass *clone () final override { return new pass_ipa_modref (m_ctxt); }\n+  bool gate (function *) final override\n   {\n     return true;\n   }\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n };\n "}, {"sha": "e0acc5d018897e581a6f44ebc103eb2d4f64e6b4", "filename": "gcc/ipa-profile.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-profile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-profile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-profile.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1053,8 +1053,8 @@ class pass_ipa_profile : public ipa_opt_pass_d\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_ipa_profile || in_lto_p; }\n-  virtual unsigned int execute (function *) { return ipa_profile (); }\n+  bool gate (function *) final override { return flag_ipa_profile || in_lto_p; }\n+  unsigned int execute (function *) final override { return ipa_profile (); }\n \n }; // class pass_ipa_profile\n "}, {"sha": "572a6da274ffce6bf6e14823a07f405e487c3597", "filename": "gcc/ipa-pure-const.cc", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-pure-const.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-pure-const.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -168,8 +168,8 @@ class pass_ipa_pure_const : public ipa_opt_pass_d\n   pass_ipa_pure_const(gcc::context *ctxt);\n \n   /* opt_pass methods: */\n-  bool gate (function *) { return gate_pure_const (); }\n-  unsigned int execute (function *fun);\n+  bool gate (function *) final override { return gate_pure_const (); }\n+  unsigned int execute (function *fun) final override;\n \n   void register_hooks (void);\n \n@@ -2154,9 +2154,12 @@ class pass_local_pure_const : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_local_pure_const (m_ctxt); }\n-  virtual bool gate (function *) { return gate_pure_const (); }\n-  virtual unsigned int execute (function *);\n+  opt_pass * clone () final override\n+  {\n+    return new pass_local_pure_const (m_ctxt);\n+  }\n+  bool gate (function *) final override { return gate_pure_const (); }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_local_pure_const\n \n@@ -2270,8 +2273,11 @@ class pass_warn_function_noreturn : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return warn_suggest_attribute_noreturn; }\n-  virtual unsigned int execute (function *fun)\n+  bool gate (function *) final override\n+  {\n+    return warn_suggest_attribute_noreturn;\n+  }\n+  unsigned int execute (function *fun) final override\n     {\n       if (!TREE_THIS_VOLATILE (current_function_decl)\n \t  && EDGE_COUNT (EXIT_BLOCK_PTR_FOR_FN (fun)->preds) == 0)\n@@ -2316,9 +2322,9 @@ class pass_nothrow : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_nothrow (m_ctxt); }\n-  virtual bool gate (function *) { return optimize; }\n-  virtual unsigned int execute (function *);\n+  opt_pass * clone () final override { return new pass_nothrow (m_ctxt); }\n+  bool gate (function *) final override { return optimize; }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_nothrow\n "}, {"sha": "bd6ee0d8c575418ae0c371b2e59378e41a8568b0", "filename": "gcc/ipa-reference.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-reference.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-reference.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1299,14 +1299,14 @@ class pass_ipa_reference : public ipa_opt_pass_d\n     {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return ((in_lto_p || flag_ipa_reference)\n \t      /* Don't bother doing anything if the program has errors.  */\n \t      && !seen_error ());\n     }\n \n-  virtual unsigned int execute (function *) { return propagate (); }\n+  unsigned int execute (function *) final override { return propagate (); }\n \n }; // class pass_ipa_reference\n "}, {"sha": "16734617d0381d0dbb5f0c3cf588c3ba9729a19d", "filename": "gcc/ipa-split.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-split.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-split.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1915,8 +1915,8 @@ class pass_split_functions : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *)\n+  bool gate (function *) final override;\n+  unsigned int execute (function *) final override\n     {\n       return execute_split_functions ();\n     }\n@@ -1974,8 +1974,8 @@ class pass_feedback_split_functions : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *)\n+  bool gate (function *) final override;\n+  unsigned int execute (function *) final override\n     {\n       return execute_feedback_split_functions ();\n     }"}, {"sha": "2237ac6d92f2f37fe6a77d09069ab434fe40d389", "filename": "gcc/ipa-sra.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-sra.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-sra.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-sra.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -4049,14 +4049,17 @@ class pass_ipa_sra : public ipa_opt_pass_d\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       /* TODO: We should remove the optimize check after we ensure we never run\n \t IPA passes when not optimizing.  */\n       return (flag_ipa_sra && optimize);\n     }\n \n-  virtual unsigned int execute (function *) { return ipa_sra_analysis (); }\n+  unsigned int execute (function *)  final override\n+  {\n+    return ipa_sra_analysis ();\n+  }\n \n }; // class pass_ipa_sra\n "}, {"sha": "8a27e7bcdfd12772765af584e5ef576d90d2d8b7", "filename": "gcc/ipa-visibility.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-visibility.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa-visibility.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-visibility.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -959,12 +959,12 @@ class pass_ipa_whole_program_visibility : public ipa_opt_pass_d\n \n   /* opt_pass methods: */\n \n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       /* Do not re-run on ltrans stage.  */\n       return !flag_ltrans;\n     }\n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return whole_program_function_and_variable_visibility ();\n     }\n@@ -988,7 +988,7 @@ class pass_ipa_function_and_variable_visibility : public simple_ipa_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return function_and_variable_visibility (flag_whole_program && !flag_lto);\n     }"}, {"sha": "d17aa86aebb5360936ce0bf733f0d8ecd421f760", "filename": "gcc/ipa.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fipa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1342,8 +1342,11 @@ class pass_ipa_cdtor_merge : public ipa_opt_pass_d\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *) { return ipa_cdtor_merge (); }\n+  bool gate (function *) final override;\n+  unsigned int execute (function *) final override\n+  {\n+    return ipa_cdtor_merge ();\n+  }\n \n }; // class pass_ipa_cdtor_merge\n \n@@ -1565,7 +1568,7 @@ class pass_ipa_single_use : public ipa_opt_pass_d\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *) { return ipa_single_use (); }\n+  unsigned int execute (function *) final override { return ipa_single_use (); }\n \n }; // class pass_ipa_single_use\n "}, {"sha": "42c9cead9f8e087c47b510f8fdf6aab217f162db", "filename": "gcc/ira.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fira.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fira.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -6074,11 +6074,11 @@ class pass_ira : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return !targetm.no_register_allocation;\n     }\n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       ira (dump_file);\n       return 0;\n@@ -6117,11 +6117,11 @@ class pass_reload : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return !targetm.no_register_allocation;\n     }\n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       do_reload ();\n       return 0;"}, {"sha": "e6207169be08122b86970109cc4655b077741179", "filename": "gcc/jump.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fjump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fjump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -182,7 +182,10 @@ class pass_cleanup_barriers : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *) { return cleanup_barriers (); }\n+  unsigned int execute (function *) final override\n+  {\n+    return cleanup_barriers ();\n+  }\n \n }; // class pass_cleanup_barriers\n "}, {"sha": "648aa290916b8455fd79528108a242e5918ed61c", "filename": "gcc/loop-init.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Floop-init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Floop-init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -357,7 +357,7 @@ class pass_loop2 : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *);\n+  bool gate (function *) final override;\n \n }; // class pass_loop2\n \n@@ -429,7 +429,7 @@ class pass_rtl_loop_init : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *) { return rtl_loop_init (); }\n+  unsigned int execute (function *) final override { return rtl_loop_init (); }\n \n }; // class pass_rtl_loop_init\n \n@@ -467,7 +467,7 @@ class pass_rtl_loop_done : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_rtl_loop_done\n \n@@ -523,8 +523,8 @@ class pass_rtl_move_loop_invariants : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_move_loop_invariants; }\n-  virtual unsigned int execute (function *fun)\n+  bool gate (function *) final override { return flag_move_loop_invariants; }\n+  unsigned int execute (function *fun) final override\n     {\n       if (number_of_loops (fun) > 1)\n \tmove_loop_invariants ();\n@@ -565,12 +565,12 @@ class pass_rtl_unroll_loops : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return (flag_unroll_loops || flag_unroll_all_loops || cfun->has_unroll);\n     }\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_rtl_unroll_loops\n \n@@ -625,8 +625,8 @@ class pass_rtl_doloop : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *);\n+  bool gate (function *) final override;\n+  unsigned int execute (function *) final override;\n \n }; // class pass_rtl_doloop\n "}, {"sha": "03e9326c663bd29308f4c88872fc07133757ca5a", "filename": "gcc/lower-subreg.cc", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Flower-subreg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Flower-subreg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1769,8 +1769,8 @@ class pass_lower_subreg : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_split_wide_types != 0; }\n-  virtual unsigned int execute (function *)\n+  bool gate (function *) final override { return flag_split_wide_types != 0; }\n+  unsigned int execute (function *) final override\n     {\n       decompose_multiword_subregs (false);\n       return 0;\n@@ -1811,9 +1811,11 @@ class pass_lower_subreg2 : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_split_wide_types\n-\t\t\t\t\t  && flag_split_wide_types_early; }\n-  virtual unsigned int execute (function *)\n+  bool gate (function *) final override\n+  {\n+    return flag_split_wide_types && flag_split_wide_types_early;\n+  }\n+  unsigned int execute (function *) final override\n     {\n       decompose_multiword_subregs (true);\n       return 0;\n@@ -1854,8 +1856,8 @@ class pass_lower_subreg3 : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_split_wide_types; }\n-  virtual unsigned int execute (function *)\n+  bool gate (function *) final override { return flag_split_wide_types; }\n+  unsigned int execute (function *) final override\n     {\n       decompose_multiword_subregs (true);\n       return 0;"}, {"sha": "b0f6e7cedd429043838b93cb099f578a39d3c977", "filename": "gcc/mode-switching.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fmode-switching.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fmode-switching.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmode-switching.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -893,8 +893,8 @@ class pass_mode_switching : public rtl_opt_pass\n   /* opt_pass methods: */\n   /* The epiphany backend creates a second instance of this pass, so we need\n      a clone method.  */\n-  opt_pass * clone () { return new pass_mode_switching (m_ctxt); }\n-  virtual bool gate (function *)\n+  opt_pass * clone () final override { return new pass_mode_switching (m_ctxt); }\n+  bool gate (function *) final override\n     {\n #ifdef OPTIMIZE_MODE_SWITCHING\n       return true;\n@@ -903,7 +903,7 @@ class pass_mode_switching : public rtl_opt_pass\n #endif\n     }\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n #ifdef OPTIMIZE_MODE_SWITCHING\n       optimize_mode_switching ();"}, {"sha": "162de199da684b687359c92401e154ac1f25fcd1", "filename": "gcc/modulo-sched.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fmodulo-sched.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fmodulo-sched.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -3338,12 +3338,12 @@ class pass_sms : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n {\n   return (optimize > 0 && flag_modulo_sched);\n }\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_sms\n "}, {"sha": "3e2d26882c8e9f449025f9399ee238564565b2e8", "filename": "gcc/multiple_target.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fmultiple_target.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fmultiple_target.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmultiple_target.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -526,8 +526,11 @@ class pass_target_clone : public simple_ipa_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *) { return ipa_target_clone (); }\n+  bool gate (function *) final override;\n+  unsigned int execute (function *) final override\n+  {\n+    return ipa_target_clone ();\n+  }\n };\n \n bool"}, {"sha": "1023c56fc3deae2337fe00dec067916f878fd5be", "filename": "gcc/omp-expand.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fomp-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fomp-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -10625,7 +10625,7 @@ class pass_expand_omp : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       bool gate = ((flag_openacc != 0 || flag_openmp != 0\n \t\t    || flag_openmp_simd != 0)\n@@ -10672,12 +10672,18 @@ class pass_expand_omp_ssa : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *fun)\n+  bool gate (function *fun) final override\n     {\n       return !(fun->curr_properties & PROP_gimple_eomp);\n     }\n-  virtual unsigned int execute (function *) { return execute_expand_omp (); }\n-  opt_pass * clone () { return new pass_expand_omp_ssa (m_ctxt); }\n+  unsigned int execute (function *) final override\n+  {\n+    return execute_expand_omp ();\n+  }\n+  opt_pass * clone () final override\n+  {\n+    return new pass_expand_omp_ssa (m_ctxt);\n+  }\n \n }; // class pass_expand_omp_ssa\n "}, {"sha": "b9d5529f212773379e7de430ff0dfb60d6398416", "filename": "gcc/omp-low.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fomp-low.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fomp-low.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -14697,7 +14697,10 @@ class pass_lower_omp : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *) { return execute_lower_omp (); }\n+  unsigned int execute (function *) final override\n+  {\n+    return execute_lower_omp ();\n+  }\n \n }; // class pass_lower_omp\n \n@@ -15005,11 +15008,11 @@ class pass_diagnose_omp_blocks : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n   {\n     return flag_openacc || flag_openmp || flag_openmp_simd;\n   }\n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return diagnose_omp_structured_block_errors ();\n     }"}, {"sha": "524060e2fca2841ae9f9cdc804499b4dacdd7a4f", "filename": "gcc/omp-oacc-kernels-decompose.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fomp-oacc-kernels-decompose.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fomp-oacc-kernels-decompose.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-oacc-kernels-decompose.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1615,12 +1615,12 @@ class pass_omp_oacc_kernels_decompose : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n   {\n     return (flag_openacc\n \t    && param_openacc_kernels == OPENACC_KERNELS_DECOMPOSE);\n   }\n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n   {\n     return omp_oacc_kernels_decompose ();\n   }"}, {"sha": "b6177794cde78b91953ed5e293cf8978c0516541", "filename": "gcc/omp-oacc-neuter-broadcast.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fomp-oacc-neuter-broadcast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fomp-oacc-neuter-broadcast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-oacc-neuter-broadcast.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1945,7 +1945,7 @@ class pass_omp_oacc_neuter_broadcast : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *fun)\n+  bool gate (function *fun) final override\n   {\n     if (!flag_openacc)\n       return false;\n@@ -1961,7 +1961,7 @@ class pass_omp_oacc_neuter_broadcast : public gimple_opt_pass\n     return true;\n   }\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return execute_omp_oacc_neuter_broadcast ();\n     }"}, {"sha": "3a89119371ca66913d5155e97edfe72b00b3cc55", "filename": "gcc/omp-offload.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fomp-offload.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fomp-offload.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -2450,9 +2450,9 @@ class pass_oacc_loop_designation : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_openacc; };\n+  bool gate (function *) final override { return flag_openacc; };\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return execute_oacc_loop_designation ();\n     }\n@@ -2480,9 +2480,9 @@ class pass_oacc_device_lower : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_openacc; };\n+  bool gate (function *) final override { return flag_openacc; };\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return execute_oacc_device_lower ();\n     }\n@@ -2714,13 +2714,13 @@ class pass_omp_device_lower : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *fun)\n+  bool gate (function *fun) final override\n     {\n       return (!(fun->curr_properties & PROP_gimple_lomp_dev)\n \t      || (flag_openmp\n \t\t  && cgraph_node::get (fun->decl)->calls_declare_variant_alt));\n     }\n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return execute_omp_device_lower ();\n     }\n@@ -2760,7 +2760,7 @@ class pass_omp_target_link : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *fun)\n+  bool gate (function *fun) final override\n     {\n #ifdef ACCEL_COMPILER\n       return offloading_function_p (fun->decl);\n@@ -2770,7 +2770,7 @@ class pass_omp_target_link : public gimple_opt_pass\n #endif\n     }\n \n-  virtual unsigned execute (function *);\n+  unsigned execute (function *) final override;\n };\n \n /* Callback for walk_gimple_stmt used to scan for link var operands.  */"}, {"sha": "32649bc3f9a127781e3933cecbcc51f04fee5301", "filename": "gcc/omp-simd-clone.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fomp-simd-clone.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fomp-simd-clone.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-simd-clone.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1819,8 +1819,11 @@ class pass_omp_simd_clone : public simple_ipa_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *) { return ipa_omp_simd_clone (); }\n+  bool gate (function *) final override;\n+  unsigned int execute (function *) final override\n+  {\n+    return ipa_omp_simd_clone ();\n+  }\n };\n \n bool"}, {"sha": "78a07f8691a2dc9bd2f5232b85efdd1705194982", "filename": "gcc/passes.cc", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fpasses.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fpasses.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -417,13 +417,13 @@ class pass_build_ssa_passes : public simple_ipa_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       /* Don't bother doing anything if the program has errors.  */\n       return (!seen_error () && !in_lto_p);\n     }\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return execute_build_ssa_passes ();\n     }\n@@ -451,7 +451,7 @@ class pass_local_optimization_passes : public simple_ipa_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       /* Don't bother doing anything if the program has errors.  */\n       return (!seen_error () && !in_lto_p);\n@@ -480,7 +480,7 @@ class pass_ipa_remove_symbols : public simple_ipa_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       /* Don't bother doing anything if the program has errors.  */\n       return (!seen_error () && !in_lto_p);\n@@ -531,7 +531,7 @@ class pass_all_early_optimizations : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return (optimize >= 1\n \t      /* Don't bother doing anything if the program has errors.  */\n@@ -571,7 +571,10 @@ class pass_all_optimizations : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return optimize >= 1 && !optimize_debug; }\n+  bool gate (function *) final override\n+  {\n+    return optimize >= 1 && !optimize_debug;\n+  }\n \n }; // class pass_all_optimizations\n \n@@ -606,7 +609,10 @@ class pass_all_optimizations_g : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return optimize >= 1 && optimize_debug; }\n+  bool gate (function *) final override\n+  {\n+    return optimize >= 1 && optimize_debug;\n+  }\n \n }; // class pass_all_optimizations_g\n \n@@ -641,7 +647,7 @@ class pass_rest_of_compilation : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       /* Early return if there were errors.  We can run afoul of our\n \t consistency checks, and there's not really much point in fixing them.  */\n@@ -681,7 +687,7 @@ class pass_postreload : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return reload_completed; }\n+  bool gate (function *) final override { return reload_completed; }\n \n }; // class pass_postreload\n \n@@ -716,7 +722,7 @@ class pass_late_compilation : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n   {\n     return reload_completed || targetm.no_register_allocation;\n   }\n@@ -756,15 +762,15 @@ class pass_pre_slp_scalar_cleanup : public gimple_opt_pass\n   {\n   }\n \n-  virtual bool\n-  gate (function *fun)\n+  bool\n+  gate (function *fun) final override\n   {\n     return flag_tree_slp_vectorize\n \t   && (fun->pending_TODOs & PENDING_TODO_force_next_scalar_cleanup);\n   }\n \n-  virtual unsigned int\n-  execute (function *fun)\n+  unsigned int\n+  execute (function *fun) final override\n   {\n     fun->pending_TODOs &= ~PENDING_TODO_force_next_scalar_cleanup;\n     return 0;"}, {"sha": "1c795b43ca36b1f486950adbe9ad97b390b0b75f", "filename": "gcc/postreload-gcse.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fpostreload-gcse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fpostreload-gcse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload-gcse.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1447,13 +1447,16 @@ class pass_gcse2 : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *fun)\n+  bool gate (function *fun) final override\n     {\n       return (optimize > 0 && flag_gcse_after_reload\n \t      && optimize_function_for_speed_p (fun));\n     }\n \n-  virtual unsigned int execute (function *) { return rest_of_handle_gcse2 (); }\n+  unsigned int execute (function *) final override\n+  {\n+    return rest_of_handle_gcse2 ();\n+  }\n \n }; // class pass_gcse2\n "}, {"sha": "d1c99fe6dc9b21b191cd3d5fb0ac5ee059b3642e", "filename": "gcc/postreload.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fpostreload.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fpostreload.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -2339,9 +2339,12 @@ class pass_postreload_cse : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return (optimize > 0 && reload_completed); }\n+  bool gate (function *) final override\n+  {\n+    return (optimize > 0 && reload_completed);\n+  }\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_postreload_cse\n "}, {"sha": "b36caa3ae82b38211b0f134275fa7d7cc098f09b", "filename": "gcc/predict.cc", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fpredict.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fpredict.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -4078,8 +4078,8 @@ class pass_profile : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_guess_branch_prob; }\n-  virtual unsigned int execute (function *);\n+  bool gate (function *) final override { return flag_guess_branch_prob; }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_profile\n \n@@ -4232,14 +4232,17 @@ class pass_strip_predict_hints : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_strip_predict_hints (m_ctxt); }\n-  void set_pass_param (unsigned int n, bool param)\n+  opt_pass * clone () final override\n+  {\n+    return new pass_strip_predict_hints (m_ctxt);\n+  }\n+  void set_pass_param (unsigned int n, bool param) final override\n     {\n       gcc_assert (n == 0);\n       early_p = param;\n     }\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n private:\n   bool early_p;"}, {"sha": "dac172bc7c001d3a09682913970d7c627b7a00d1", "filename": "gcc/recog.cc", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Frecog.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Frecog.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -4358,9 +4358,12 @@ class pass_peephole2 : public rtl_opt_pass\n   /* opt_pass methods: */\n   /* The epiphany backend creates a second instance of this pass, so we need\n      a clone method.  */\n-  opt_pass * clone () { return new pass_peephole2 (m_ctxt); }\n-  virtual bool gate (function *) { return (optimize > 0 && flag_peephole2); }\n-  virtual unsigned int execute (function *)\n+  opt_pass * clone () final override { return new pass_peephole2 (m_ctxt); }\n+  bool gate (function *) final override\n+  {\n+    return (optimize > 0 && flag_peephole2);\n+  }\n+  unsigned int execute (function *) final override\n     {\n       return rest_of_handle_peephole2 ();\n     }\n@@ -4400,8 +4403,11 @@ class pass_split_all_insns : public rtl_opt_pass\n   /* opt_pass methods: */\n   /* The epiphany backend creates a second instance of this pass, so\n      we need a clone method.  */\n-  opt_pass * clone () { return new pass_split_all_insns (m_ctxt); }\n-  virtual unsigned int execute (function *)\n+  opt_pass * clone () final override\n+  {\n+    return new pass_split_all_insns (m_ctxt);\n+  }\n+  unsigned int execute (function *) final override\n     {\n       split_all_insns ();\n       return 0;\n@@ -4440,13 +4446,13 @@ class pass_split_after_reload : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       /* If optimizing, then go ahead and split insns now.  */\n       return optimize > 0;\n     }\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       split_all_insns ();\n       return 0;\n@@ -4495,12 +4501,12 @@ class pass_split_before_sched2 : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return enable_split_before_sched2 ();\n     }\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       split_all_insns ();\n       return 0;\n@@ -4539,8 +4545,8 @@ class pass_split_before_regstack : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *)\n+  bool gate (function *) final override;\n+  unsigned int execute (function *) final override\n     {\n       split_all_insns ();\n       return 0;\n@@ -4598,7 +4604,7 @@ class pass_split_for_shorten_branches : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       /* The placement of the splitting that we do for shorten_branches\n \t depends on whether regstack is used by the target or not.  */\n@@ -4609,7 +4615,7 @@ class pass_split_for_shorten_branches : public rtl_opt_pass\n #endif\n     }\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return split_all_insns_noflow ();\n     }"}, {"sha": "da64ef679b7f0d754a6e5765d7fab0a28ce8788d", "filename": "gcc/ree.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Free.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Free.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Free.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1403,8 +1403,11 @@ class pass_ree : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return (optimize > 0 && flag_ree); }\n-  virtual unsigned int execute (function *) { return rest_of_handle_ree (); }\n+  bool gate (function *) final override { return (optimize > 0 && flag_ree); }\n+  unsigned int execute (function *) final override\n+  {\n+    return rest_of_handle_ree ();\n+  }\n \n }; // class pass_ree\n "}, {"sha": "fd032501ad9c9c0e48e0aa06051a5fb660a5ded1", "filename": "gcc/reg-stack.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Freg-stack.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Freg-stack.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -3413,7 +3413,7 @@ class pass_stack_regs : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n #ifdef STACK_REGS\n       return true;\n@@ -3468,7 +3468,7 @@ class pass_stack_regs_run : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return rest_of_handle_stack_regs ();\n     }"}, {"sha": "ce9d32a4fb74e0599a56ac9b91074a2b7e4bf05b", "filename": "gcc/regcprop.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fregcprop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fregcprop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregcprop.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1293,12 +1293,12 @@ class pass_cprop_hardreg : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return (optimize > 0 && (flag_cprop_registers));\n     }\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_cprop_hardreg\n "}, {"sha": "705779d5c1822d6e8d69b1b256d88a99c46f296c", "filename": "gcc/reginfo.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Freginfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Freginfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -953,7 +953,7 @@ class pass_reginfo_init : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *) { return reginfo_init (); }\n+  unsigned int execute (function *) final override { return reginfo_init (); }\n \n }; // class pass_reginfo_init\n "}, {"sha": "b15eb80f022953dbf6af0c5f7107571df2b665db", "filename": "gcc/regrename.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fregrename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fregrename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -2012,12 +2012,15 @@ class pass_regrename : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return (optimize > 0 && (flag_rename_registers));\n     }\n \n-  virtual unsigned int execute (function *) { return regrename_optimize (); }\n+  unsigned int execute (function *) final override\n+  {\n+    return regrename_optimize ();\n+  }\n \n }; // class pass_regrename\n "}, {"sha": "07b2045986cdf4d92674901f0995ae92dad895b7", "filename": "gcc/reorg.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Freorg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Freorg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -3866,8 +3866,8 @@ class pass_delay_slots : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *)\n+  bool gate (function *) final override;\n+  unsigned int execute (function *) final override\n     {\n       return rest_of_handle_delay_slots ();\n     }\n@@ -3917,12 +3917,12 @@ class pass_machine_reorg : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return targetm.machine_dependent_reorg != 0;\n     }\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       targetm.machine_dependent_reorg ();\n       return 0;"}, {"sha": "052fa4ef881ed25109ffb51f1736690aae9ae429", "filename": "gcc/sancov.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fsancov.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fsancov.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsancov.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -308,17 +308,17 @@ template <bool O0> class pass_sancov : public gimple_opt_pass\n \n   static const pass_data data;\n   opt_pass *\n-  clone ()\n+  clone () final override\n   {\n     return new pass_sancov<O0> (m_ctxt);\n   }\n-  virtual bool\n-  gate (function *fun)\n+  bool\n+  gate (function *fun) final override\n   {\n     return sanitize_coverage_p (fun->decl) && (!O0 || !optimize);\n   }\n-  virtual unsigned int\n-  execute (function *fun)\n+  unsigned int\n+  execute (function *fun) final override\n   {\n     return sancov_pass (fun);\n   }"}, {"sha": "e9d188d78891436ccdc05305dbd60705fe24b002", "filename": "gcc/sanopt.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fsanopt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fsanopt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanopt.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -942,7 +942,7 @@ class pass_sanopt : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n   {\n     /* SANITIZE_RETURN is handled in the front-end.  When trapping,\n        SANITIZE_UNREACHABLE is handled by builtin_decl_unreachable.  */\n@@ -951,7 +951,7 @@ class pass_sanopt : public gimple_opt_pass\n       mask |= SANITIZE_UNREACHABLE;\n     return flag_sanitize & ~mask;\n   }\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_sanopt\n "}, {"sha": "0dc2a8f28516eddb92d0a81ab88169feef9f31c4", "filename": "gcc/sched-rgn.cc", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fsched-rgn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fsched-rgn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -3779,7 +3779,7 @@ class pass_live_range_shrinkage : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n #ifdef INSN_SCHEDULING\n       return flag_live_range_shrinkage;\n@@ -3788,7 +3788,7 @@ class pass_live_range_shrinkage : public rtl_opt_pass\n #endif\n     }\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return rest_of_handle_live_range_shrinkage ();\n     }\n@@ -3826,8 +3826,11 @@ class pass_sched : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *) { return rest_of_handle_sched (); }\n+  bool gate (function *) final override;\n+  unsigned int execute (function *) final override\n+  {\n+    return rest_of_handle_sched ();\n+  }\n \n }; // class pass_sched\n \n@@ -3872,8 +3875,8 @@ class pass_sched2 : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *)\n+  bool gate (function *) final override;\n+  unsigned int execute (function *) final override\n     {\n       return rest_of_handle_sched2 ();\n     }\n@@ -3922,8 +3925,8 @@ class pass_sched_fusion : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *)\n+  bool gate (function *) final override;\n+  unsigned int execute (function *) final override\n     {\n       return rest_of_handle_sched_fusion ();\n     }"}, {"sha": "4ccbb1cace32c80076181bbc67215023809e0ce5", "filename": "gcc/stack-ptr-mod.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fstack-ptr-mod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fstack-ptr-mod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstack-ptr-mod.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -71,7 +71,7 @@ class pass_stack_ptr_mod : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_stack_ptr_mod\n "}, {"sha": "b61c06868447fb4873fa02e834105cfe5c507fd9", "filename": "gcc/store-motion.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fstore-motion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fstore-motion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstore-motion.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1243,8 +1243,8 @@ class pass_rtl_store_motion : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *)\n+  bool gate (function *) final override;\n+  unsigned int execute (function *) final override\n     {\n       return execute_rtl_store_motion ();\n     }"}, {"sha": "64517846dc444dd63c41844c13d4502b3c4100df", "filename": "gcc/tracer.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftracer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftracer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftracer.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -424,12 +424,12 @@ class pass_tracer : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return (optimize > 0 && flag_tracer && flag_reorder_blocks);\n     }\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_tracer\n "}, {"sha": "131dce05476ac1fde16ad61a27623b4a81c3ff3f", "filename": "gcc/trans-mem.cc", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftrans-mem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftrans-mem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -864,8 +864,11 @@ class pass_diagnose_tm_blocks : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_tm; }\n-  virtual unsigned int execute (function *) { return diagnose_tm_blocks (); }\n+  bool gate (function *) final override { return flag_tm; }\n+  unsigned int execute (function *) final override\n+  {\n+    return diagnose_tm_blocks ();\n+  }\n \n }; // class pass_diagnose_tm_blocks\n \n@@ -1850,8 +1853,11 @@ class pass_lower_tm : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_tm; }\n-  virtual unsigned int execute (function *) { return execute_lower_tm (); }\n+  bool gate (function *) final override { return flag_tm; }\n+  unsigned int execute (function *) final override\n+  {\n+    return execute_lower_tm ();\n+  }\n \n }; // class pass_lower_tm\n \n@@ -2144,7 +2150,7 @@ class pass_tm_init : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return gate_tm_init (); }\n+  bool gate (function *) final override { return gate_tm_init (); }\n \n }; // class pass_tm_init\n \n@@ -3162,7 +3168,10 @@ class pass_tm_mark : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *) { return execute_tm_mark (); }\n+  unsigned int execute (function *) final override\n+  {\n+    return execute_tm_mark ();\n+  }\n \n }; // class pass_tm_mark\n \n@@ -3324,7 +3333,7 @@ class pass_tm_edges : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_tm_edges\n \n@@ -4085,8 +4094,11 @@ class pass_tm_memopt : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_tm && optimize > 0; }\n-  virtual unsigned int execute (function *) { return execute_tm_memopt (); }\n+  bool gate (function *) final override { return flag_tm && optimize > 0; }\n+  unsigned int execute (function *) final override\n+  {\n+    return execute_tm_memopt ();\n+  }\n \n }; // class pass_tm_memopt\n \n@@ -5667,8 +5679,8 @@ class pass_ipa_tm : public simple_ipa_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_tm; }\n-  virtual unsigned int execute (function *) { return ipa_tm_execute (); }\n+  bool gate (function *) final override { return flag_tm; }\n+  unsigned int execute (function *) final override { return ipa_tm_execute (); }\n \n }; // class pass_ipa_tm\n "}, {"sha": "feb61f362cf78c6a7c5de5e816434413781e272f", "filename": "gcc/tree-call-cdce.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-call-cdce.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-call-cdce.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-call-cdce.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1171,15 +1171,15 @@ class pass_call_cdce : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       /* The limit constants used in the implementation\n \t assume IEEE floating point format.  Other formats\n \t can be supported in the future if needed.  */\n       return flag_tree_builtin_call_dce != 0;\n     }\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_call_cdce\n "}, {"sha": "bfcb1425f7e2e46e3d525808adda11560041dd68", "filename": "gcc/tree-cfg.cc", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-cfg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-cfg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -407,7 +407,10 @@ class pass_build_cfg : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *) { return execute_build_cfg (); }\n+  unsigned int execute (function *) final override\n+  {\n+    return execute_build_cfg ();\n+  }\n \n }; // class pass_build_cfg\n \n@@ -9209,9 +9212,15 @@ class pass_split_crit_edges : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *) { return split_critical_edges (); }\n+  unsigned int execute (function *)  final override\n+  {\n+    return split_critical_edges ();\n+  }\n \n-  opt_pass * clone () { return new pass_split_crit_edges (m_ctxt); }\n+  opt_pass * clone () final override\n+  {\n+    return new pass_split_crit_edges (m_ctxt);\n+  }\n }; // class pass_split_crit_edges\n \n } // anon namespace\n@@ -9468,7 +9477,7 @@ class pass_warn_function_return : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_warn_function_return\n \n@@ -9674,8 +9683,8 @@ class pass_warn_unused_result : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_warn_unused_result; }\n-  virtual unsigned int execute (function *)\n+  bool gate (function *)  final override { return flag_warn_unused_result; }\n+  unsigned int execute (function *) final override\n     {\n       do_warn_unused_result (gimple_body (current_function_decl));\n       return 0;\n@@ -9884,8 +9893,11 @@ class pass_fixup_cfg : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_fixup_cfg (m_ctxt); }\n-  virtual unsigned int execute (function *) { return execute_fixup_cfg (); }\n+  opt_pass * clone () final override { return new pass_fixup_cfg (m_ctxt); }\n+  unsigned int execute (function *) final override\n+  {\n+    return execute_fixup_cfg ();\n+  }\n \n }; // class pass_fixup_cfg\n "}, {"sha": "a6d0bf2c40ae8e741b63349ad86e538e1369275c", "filename": "gcc/tree-cfgcleanup.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-cfgcleanup.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-cfgcleanup.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1406,8 +1406,8 @@ class pass_merge_phi : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_merge_phi (m_ctxt); }\n-  virtual unsigned int execute (function *);\n+  opt_pass * clone () final override { return new pass_merge_phi (m_ctxt); }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_merge_phi\n \n@@ -1584,7 +1584,7 @@ class pass_cleanup_cfg_post_optimizing : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return execute_cleanup_cfg_post_optimizing ();\n     }"}, {"sha": "61950a0f0991a52cd915bd797f88cf40c43208a8", "filename": "gcc/tree-complex.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-complex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-complex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1915,8 +1915,11 @@ class pass_lower_complex : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_lower_complex (m_ctxt); }\n-  virtual unsigned int execute (function *) { return tree_lower_complex (); }\n+  opt_pass * clone () final override { return new pass_lower_complex (m_ctxt); }\n+  unsigned int execute (function *) final override\n+  {\n+    return tree_lower_complex ();\n+  }\n \n }; // class pass_lower_complex\n \n@@ -1952,14 +1955,17 @@ class pass_lower_complex_O0 : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *fun)\n+  bool gate (function *fun) final override\n     {\n       /* With errors, normal optimization passes are not run.  If we don't\n \t lower complex operations at all, rtl expansion will abort.  */\n       return !(fun->curr_properties & PROP_gimple_lcx);\n     }\n \n-  virtual unsigned int execute (function *) { return tree_lower_complex (); }\n+  unsigned int execute (function *) final override\n+  {\n+    return tree_lower_complex ();\n+  }\n \n }; // class pass_lower_complex_O0\n "}, {"sha": "076ecd3ec9ab728b7366a0e13b50e60bf56fcf34", "filename": "gcc/tree-eh.cc", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-eh.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-eh.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -2176,7 +2176,7 @@ class pass_lower_eh : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_lower_eh\n \n@@ -3295,8 +3295,8 @@ class pass_refactor_eh : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_exceptions != 0; }\n-  virtual unsigned int execute (function *)\n+  bool gate (function *) final override { return flag_exceptions != 0; }\n+  unsigned int execute (function *) final override\n     {\n       refactor_eh_r (gimple_body (current_function_decl));\n       return 0;\n@@ -3497,8 +3497,8 @@ class pass_lower_resx : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_exceptions != 0; }\n-  virtual unsigned int execute (function *);\n+  bool gate (function *) final override { return flag_exceptions != 0; }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_lower_resx\n \n@@ -3922,8 +3922,11 @@ class pass_lower_eh_dispatch : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *fun) { return fun->eh->region_tree != NULL; }\n-  virtual unsigned int execute (function *);\n+  bool gate (function *fun) final override\n+  {\n+    return fun->eh->region_tree != NULL;\n+  }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_lower_eh_dispatch\n \n@@ -4859,13 +4862,13 @@ class pass_cleanup_eh : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_cleanup_eh (m_ctxt); }\n-  virtual bool gate (function *fun)\n+  opt_pass * clone () final override { return new pass_cleanup_eh (m_ctxt); }\n+  bool gate (function *fun) final override\n     {\n       return fun->eh != NULL && fun->eh->region_tree != NULL;\n     }\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_cleanup_eh\n "}, {"sha": "b5aa307f60d64dc3b6f32d8c1669ede9fc3db4b1", "filename": "gcc/tree-emutls.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-emutls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-emutls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-emutls.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -838,13 +838,16 @@ class pass_ipa_lower_emutls : public simple_ipa_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       /* If the target supports TLS natively, we need do nothing here.  */\n       return !targetm.have_tls;\n     }\n \n-  virtual unsigned int execute (function *) { return ipa_lower_emutls (); }\n+  unsigned int execute (function *) final override\n+  {\n+    return ipa_lower_emutls ();\n+  }\n \n }; // class pass_ipa_lower_emutls\n "}, {"sha": "3c659f6b5a7fd110d89b361b1b9f33aee0b174ea", "filename": "gcc/tree-if-conv.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-if-conv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-if-conv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -3424,8 +3424,8 @@ class pass_if_conversion : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *);\n+  bool gate (function *) final override;\n+  unsigned int execute (function *) final override;\n \n }; // class pass_if_conversion\n "}, {"sha": "46df57ae0e1a66a401f9be3fdd070f86706287af", "filename": "gcc/tree-into-ssa.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-into-ssa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-into-ssa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -2403,13 +2403,13 @@ class pass_build_ssa : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *fun)\n+  bool gate (function *fun) final override\n     {\n       /* Do nothing for funcions that was produced already in SSA form.  */\n       return !(fun->curr_properties & PROP_ssa);\n     }\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_build_ssa\n "}, {"sha": "18b97fc3801a81f28c6f6bdb0e3cc9f099bb88e7", "filename": "gcc/tree-loop-distribution.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-loop-distribution.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-loop-distribution.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -3897,13 +3897,13 @@ class pass_loop_distribution : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return flag_tree_loop_distribution\n \t|| flag_tree_loop_distribute_patterns;\n     }\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_loop_distribution\n "}, {"sha": "1faa481a8c92196f7219f2233d7965f8d8966913", "filename": "gcc/tree-nrv.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-nrv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-nrv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nrv.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -125,9 +125,9 @@ class pass_nrv : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return optimize > 0; }\n+  bool gate (function *) final override { return optimize > 0; }\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_nrv\n \n@@ -344,7 +344,7 @@ class pass_return_slot : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_return_slot\n "}, {"sha": "4eb454a4a33b01c86826110191a90e069d799c5e", "filename": "gcc/tree-object-size.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-object-size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-object-size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -2124,8 +2124,8 @@ class pass_object_sizes : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_object_sizes (m_ctxt); }\n-  virtual unsigned int execute (function *fun)\n+  opt_pass * clone () final override { return new pass_object_sizes (m_ctxt); }\n+  unsigned int execute (function *fun) final override\n   {\n     return object_sizes_execute (fun, false);\n   }\n@@ -2164,7 +2164,7 @@ class pass_early_object_sizes : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *fun)\n+  unsigned int execute (function *fun) final override\n   {\n     return object_sizes_execute (fun, true);\n   }"}, {"sha": "2c3ef436ab77bcedbe0d3433708435203cf7c401", "filename": "gcc/tree-parloops.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-parloops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-parloops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -4173,16 +4173,19 @@ class pass_parallelize_loops : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n   {\n     if (oacc_kernels_p)\n       return flag_openacc;\n     else\n       return flag_tree_parallelize_loops > 1;\n   }\n-  virtual unsigned int execute (function *);\n-  opt_pass * clone () { return new pass_parallelize_loops (m_ctxt); }\n-  void set_pass_param (unsigned int n, bool param)\n+  unsigned int execute (function *) final override;\n+  opt_pass * clone () final override\n+  {\n+    return new pass_parallelize_loops (m_ctxt);\n+  }\n+  void set_pass_param (unsigned int n, bool param) final override\n     {\n       gcc_assert (n == 0);\n       oacc_kernels_p = param;"}, {"sha": "5d923fba17094852f952e136fa5e2e171abafc02", "filename": "gcc/tree-predcom.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-predcom.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-predcom.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -3514,8 +3514,8 @@ class pass_predcom : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool\n-  gate (function *)\n+  bool\n+  gate (function *) final override\n   {\n     if (flag_predictive_commoning != 0)\n       return true;\n@@ -3529,8 +3529,8 @@ class pass_predcom : public gimple_opt_pass\n     return false;\n   }\n \n-  virtual unsigned int\n-  execute (function *fun)\n+  unsigned int\n+  execute (function *fun) final override\n   {\n     bool allow_unroll_p = flag_predictive_commoning != 0;\n     return run_tree_predictive_commoning (fun, allow_unroll_p);"}, {"sha": "2beb49241f29ec88638e16678686b3a787b99672", "filename": "gcc/tree-profile.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-profile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-profile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -884,8 +884,8 @@ class pass_ipa_tree_profile : public simple_ipa_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *) { return tree_profiling (); }\n+  bool gate (function *) final override;\n+  unsigned int execute (function *) final override { return tree_profiling (); }\n \n }; // class pass_ipa_tree_profile\n "}, {"sha": "461c8e0b0f4055a043473cf3d7790d61de1077d0", "filename": "gcc/tree-sra.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-sra.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-sra.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -4743,8 +4743,11 @@ class pass_sra_early : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return gate_intra_sra (); }\n-  virtual unsigned int execute (function *) { return early_intra_sra (); }\n+  bool gate (function *) final override { return gate_intra_sra (); }\n+  unsigned int execute (function *) final override\n+  {\n+    return early_intra_sra ();\n+  }\n \n }; // class pass_sra_early\n \n@@ -4779,8 +4782,8 @@ class pass_sra : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return gate_intra_sra (); }\n-  virtual unsigned int execute (function *) { return late_intra_sra (); }\n+  bool gate (function *) final override { return gate_intra_sra (); }\n+  unsigned int execute (function *) final override { return late_intra_sra (); }\n \n }; // class pass_sra\n "}, {"sha": "85c046078249ccffa9de11ffc298708a3e0c29c5", "filename": "gcc/tree-ssa-ccp.cc", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-ccp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-ccp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -2994,14 +2994,17 @@ class pass_ccp : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_ccp (m_ctxt); }\n-  void set_pass_param (unsigned int n, bool param)\n+  opt_pass * clone () final override { return new pass_ccp (m_ctxt); }\n+  void set_pass_param (unsigned int n, bool param) final override\n     {\n       gcc_assert (n == 0);\n       nonzero_p = param;\n     }\n-  virtual bool gate (function *) { return flag_tree_ccp != 0; }\n-  virtual unsigned int execute (function *) { return do_ssa_ccp (nonzero_p); }\n+  bool gate (function *) final override { return flag_tree_ccp != 0; }\n+  unsigned int execute (function *) final override\n+  {\n+    return do_ssa_ccp (nonzero_p);\n+  }\n \n  private:\n   /* Determines whether the pass instance records nonzero bits.  */\n@@ -4202,8 +4205,8 @@ class pass_fold_builtins : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_fold_builtins (m_ctxt); }\n-  virtual unsigned int execute (function *);\n+  opt_pass * clone () final override { return new pass_fold_builtins (m_ctxt); }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_fold_builtins\n \n@@ -4553,9 +4556,9 @@ class pass_post_ipa_warn : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_post_ipa_warn (m_ctxt); }\n-  virtual bool gate (function *) { return warn_nonnull != 0; }\n-  virtual unsigned int execute (function *);\n+  opt_pass * clone () final override { return new pass_post_ipa_warn (m_ctxt); }\n+  bool gate (function *) final override { return warn_nonnull != 0; }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_fold_builtins\n "}, {"sha": "782ceb500cc25f943a4e60082a9ad2a48577da09", "filename": "gcc/tree-ssa-copy.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-copy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-copy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -642,9 +642,12 @@ class pass_copy_prop : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_copy_prop (m_ctxt); }\n-  virtual bool gate (function *) { return flag_tree_copy_prop != 0; }\n-  virtual unsigned int execute (function *) { return execute_copy_prop (); }\n+  opt_pass * clone () final override { return new pass_copy_prop (m_ctxt); }\n+  bool gate (function *) final override { return flag_tree_copy_prop != 0; }\n+  unsigned int execute (function *) final override\n+  {\n+    return execute_copy_prop ();\n+  }\n \n }; // class pass_copy_prop\n "}, {"sha": "5df64922594a74024e95c5921f232723db741ebb", "filename": "gcc/tree-ssa-dce.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-dce.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-dce.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1974,9 +1974,9 @@ class pass_dce : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_dce (m_ctxt); }\n-  virtual bool gate (function *) { return flag_tree_dce != 0; }\n-  virtual unsigned int execute (function *) { return tree_ssa_dce (); }\n+  opt_pass * clone () final override { return new pass_dce (m_ctxt); }\n+  bool gate (function *) final override { return flag_tree_dce != 0; }\n+  unsigned int execute (function *) final override { return tree_ssa_dce (); }\n \n }; // class pass_dce\n \n@@ -2011,14 +2011,14 @@ class pass_cd_dce : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_cd_dce (m_ctxt); }\n-  void set_pass_param (unsigned n, bool param)\n+  opt_pass * clone () final override { return new pass_cd_dce (m_ctxt); }\n+  void set_pass_param (unsigned n, bool param) final override\n     {\n       gcc_assert (n == 0);\n       update_address_taken_p = param;\n     }\n-  virtual bool gate (function *) { return flag_tree_dce != 0; }\n-  virtual unsigned int execute (function *)\n+  bool gate (function *) final override { return flag_tree_dce != 0; }\n+  unsigned int execute (function *) final override\n     {\n       return (tree_ssa_cd_dce ()\n \t      | (update_address_taken_p ? TODO_update_address_taken : 0));"}, {"sha": "e282123b2d97ff85793a4b547ee9e88078ca5718", "filename": "gcc/tree-ssa-dom.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-dom.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-dom.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -728,14 +728,14 @@ class pass_dominator : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_dominator (m_ctxt); }\n-  void set_pass_param (unsigned int n, bool param)\n+  opt_pass * clone () final override { return new pass_dominator (m_ctxt); }\n+  void set_pass_param (unsigned int n, bool param) final override\n     {\n       gcc_assert (n == 0);\n       may_peel_loop_headers_p = param;\n     }\n-  virtual bool gate (function *) { return flag_tree_dom != 0; }\n-  virtual unsigned int execute (function *);\n+  bool gate (function *) final override { return flag_tree_dom != 0; }\n+  unsigned int execute (function *) final override;\n \n  private:\n   /* This flag is used to prevent loops from being peeled repeatedly in jump"}, {"sha": "62efafe384debaceedb2f539c288f28bf17d555c", "filename": "gcc/tree-ssa-dse.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-dse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-dse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1491,9 +1491,9 @@ class pass_dse : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_dse (m_ctxt); }\n-  virtual bool gate (function *) { return flag_tree_dse != 0; }\n-  virtual unsigned int execute (function *);\n+  opt_pass * clone () final override { return new pass_dse (m_ctxt); }\n+  bool gate (function *) final override { return flag_tree_dse != 0; }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_dse\n "}, {"sha": "69567ab3275939e084a7ae2e6e73d72b824b9762", "filename": "gcc/tree-ssa-forwprop.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-forwprop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-forwprop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -3266,9 +3266,9 @@ class pass_forwprop : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_forwprop (m_ctxt); }\n-  virtual bool gate (function *) { return flag_tree_forwprop; }\n-  virtual unsigned int execute (function *);\n+  opt_pass * clone () final override { return new pass_forwprop (m_ctxt); }\n+  bool gate (function *) final override { return flag_tree_forwprop; }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_forwprop\n "}, {"sha": "80c41c454890fb0243ab225bad113198fa4af8b7", "filename": "gcc/tree-ssa-ifcombine.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-ifcombine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-ifcombine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ifcombine.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -829,7 +829,7 @@ class pass_tree_ifcombine : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_tree_ifcombine\n "}, {"sha": "843a436f8c8ea42dd0b98ebabbf3503500f90b89", "filename": "gcc/tree-ssa-loop-ch.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-loop-ch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-loop-ch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -311,12 +311,12 @@ class pass_ch : public ch_base\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_tree_ch != 0; }\n+  bool gate (function *) final override { return flag_tree_ch != 0; }\n   \n   /* Initialize and finalize loop structures, copying headers inbetween.  */\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n-  opt_pass * clone () { return new pass_ch (m_ctxt); }\n+  opt_pass * clone () final override { return new pass_ch (m_ctxt); }\n \n protected:\n   /* ch_base method: */\n@@ -347,14 +347,14 @@ class pass_ch_vect : public ch_base\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *fun)\n+  bool gate (function *fun) final override\n   {\n     return flag_tree_ch != 0\n \t   && (flag_tree_loop_vectorize != 0 || fun->has_force_vectorize_loops);\n   }\n   \n   /* Just copy headers, no initialization/finalization of loop structures.  */\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n protected:\n   /* ch_base method: */"}, {"sha": "2ea815050d18b93422bc2add54bf7d6c4d85f9b1", "filename": "gcc/tree-ssa-loop-im.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-loop-im.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-loop-im.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -3600,9 +3600,9 @@ class pass_lim : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_lim (m_ctxt); }\n-  virtual bool gate (function *) { return flag_tree_loop_im != 0; }\n-  virtual unsigned int execute (function *);\n+  opt_pass * clone () final override { return new pass_lim (m_ctxt); }\n+  bool gate (function *) final override { return flag_tree_loop_im != 0; }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_lim\n "}, {"sha": "766bffa0274898f313934044f3549a1b46d7383e", "filename": "gcc/tree-ssa-loop-ivcanon.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-loop-ivcanon.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-loop-ivcanon.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1538,8 +1538,8 @@ class pass_iv_canon : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_tree_loop_ivcanon != 0; }\n-  virtual unsigned int execute (function *fun);\n+  bool gate (function *) final override { return flag_tree_loop_ivcanon != 0; }\n+  unsigned int execute (function *fun) final override;\n \n }; // class pass_iv_canon\n \n@@ -1585,7 +1585,7 @@ class pass_complete_unroll : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_complete_unroll\n \n@@ -1643,8 +1643,8 @@ class pass_complete_unrolli : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return optimize >= 2; }\n-  virtual unsigned int execute (function *);\n+  bool gate (function *) final override { return optimize >= 2; }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_complete_unrolli\n "}, {"sha": "8f190ae469bbbc71397f63727563efc72edb9bb6", "filename": "gcc/tree-ssa-loop-prefetch.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-loop-prefetch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-loop-prefetch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -2069,8 +2069,11 @@ class pass_loop_prefetch : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_prefetch_loop_arrays > 0; }\n-  virtual unsigned int execute (function *);\n+  bool gate (function *) final override\n+  {\n+    return flag_prefetch_loop_arrays > 0;\n+  }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_loop_prefetch\n "}, {"sha": "d61bad5ba47bbbabb6461b3b3b16a4f5c59853ba", "filename": "gcc/tree-ssa-loop-split.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-loop-split.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-loop-split.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-split.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1724,8 +1724,8 @@ class pass_loop_split : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_split_loops != 0; }\n-  virtual unsigned int execute (function *);\n+  bool gate (function *) final override { return flag_split_loops != 0; }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_loop_split\n "}, {"sha": "afae9825eda56e289aa5216cc85c1c26f54bb3eb", "filename": "gcc/tree-ssa-loop-unswitch.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-loop-unswitch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-loop-unswitch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-unswitch.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1614,8 +1614,8 @@ class pass_tree_unswitch : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_unswitch_loops != 0; }\n-  virtual unsigned int execute (function *);\n+  bool gate (function *) final override { return flag_unswitch_loops != 0; }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_tree_unswitch\n "}, {"sha": "1c058b08c2f3ed7b72b495e3681244fef17ea2f9", "filename": "gcc/tree-ssa-loop.cc", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-loop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-loop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -67,9 +67,9 @@ class pass_fix_loops : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_tree_loop_optimize; }\n+  bool gate (function *) final override { return flag_tree_loop_optimize; }\n \n-  virtual unsigned int execute (function *fn);\n+  unsigned int execute (function *fn) final override;\n }; // class pass_fix_loops\n \n unsigned int\n@@ -134,7 +134,7 @@ class pass_tree_loop : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *fn) { return gate_loop (fn); }\n+  bool gate (function *fn) final override { return gate_loop (fn); }\n \n }; // class pass_tree_loop\n \n@@ -189,7 +189,7 @@ class pass_oacc_kernels : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *fn) { return gate_oacc_kernels (fn); }\n+  bool gate (function *fn) final override { return gate_oacc_kernels (fn); }\n \n }; // class pass_oacc_kernels\n \n@@ -226,7 +226,7 @@ class pass_ipa_oacc : public simple_ipa_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n   {\n     return (optimize\n \t    && flag_openacc\n@@ -303,7 +303,7 @@ class pass_tree_no_loop : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *fn) { return !gate_loop (fn); }\n+  bool gate (function *fn) final override { return !gate_loop (fn); }\n \n }; // class pass_tree_no_loop\n \n@@ -341,7 +341,7 @@ class pass_tree_loop_init : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_tree_loop_init\n \n@@ -395,8 +395,8 @@ class pass_scev_cprop : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_tree_scev_cprop; }\n-  virtual unsigned int execute (function *);\n+  bool gate (function *) final override { return flag_tree_scev_cprop; }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_scev_cprop\n \n@@ -446,8 +446,8 @@ class pass_iv_optimize : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_ivopts != 0; }\n-  virtual unsigned int execute (function *);\n+  bool gate (function *) final override { return flag_ivopts != 0; }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_iv_optimize\n \n@@ -503,7 +503,10 @@ class pass_tree_loop_done : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *) { return tree_ssa_loop_done (); }\n+  unsigned int execute (function *) final override\n+  {\n+    return tree_ssa_loop_done ();\n+  }\n \n }; // class pass_tree_loop_done\n "}, {"sha": "fe9f37b4cd4ee9a2cb5f680820dac35aec0eb303", "filename": "gcc/tree-ssa-math-opts.cc", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-math-opts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-math-opts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -920,8 +920,11 @@ class pass_cse_reciprocals : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return optimize && flag_reciprocal_math; }\n-  virtual unsigned int execute (function *);\n+  bool gate (function *) final override\n+  {\n+    return optimize && flag_reciprocal_math;\n+  }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_cse_reciprocals\n \n@@ -2249,14 +2252,14 @@ class pass_cse_sincos : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       /* We no longer require either sincos or cexp, since powi expansion\n \t piggybacks on this pass.  */\n       return optimize;\n     }\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_cse_sincos\n \n@@ -4892,12 +4895,12 @@ class pass_optimize_widening_mul : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return flag_expensive_optimizations && optimize;\n     }\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_optimize_widening_mul\n "}, {"sha": "7efcc0791bf5a5bd13e48db12a684f2e75b63db0", "filename": "gcc/tree-ssa-phiopt.cc", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-phiopt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-phiopt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -3960,14 +3960,14 @@ class pass_phiopt : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_phiopt (m_ctxt); }\n-  void set_pass_param (unsigned n, bool param)\n+  opt_pass * clone () final override { return new pass_phiopt (m_ctxt); }\n+  void set_pass_param (unsigned n, bool param) final override\n     {\n       gcc_assert (n == 0);\n       early_p = param;\n     }\n-  virtual bool gate (function *) { return flag_ssa_phiopt; }\n-  virtual unsigned int execute (function *)\n+  bool gate (function *) final override { return flag_ssa_phiopt; }\n+  unsigned int execute (function *) final override\n     {\n       return tree_ssa_phiopt_worker (false,\n \t\t\t\t     !early_p ? gate_hoist_loads () : false,\n@@ -4009,8 +4009,11 @@ class pass_cselim : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_tree_cselim; }\n-  virtual unsigned int execute (function *) { return tree_ssa_cs_elim (); }\n+  bool gate (function *) final override { return flag_tree_cselim; }\n+  unsigned int execute (function *) final override\n+  {\n+    return tree_ssa_cs_elim ();\n+  }\n \n }; // class pass_cselim\n "}, {"sha": "965f1d1c4ebd727253c985f3bedca33f44863e89", "filename": "gcc/tree-ssa-phiprop.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-phiprop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-phiprop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiprop.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -476,8 +476,8 @@ class pass_phiprop : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_tree_phiprop; }\n-  virtual unsigned int execute (function *);\n+  bool gate (function *) final override { return flag_tree_phiprop; }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_phiprop\n "}, {"sha": "e029bd36da3e7981986b38393beac42d7bf3bc05", "filename": "gcc/tree-ssa-pre.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-pre.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-pre.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -4339,9 +4339,9 @@ class pass_pre : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     { return flag_tree_pre != 0 || flag_code_hoisting != 0; }\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_pre\n "}, {"sha": "e13e2cb308d4b23e8a65a9c2dcc368d47f102749", "filename": "gcc/tree-ssa-reassoc.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-reassoc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-reassoc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -7132,15 +7132,15 @@ class pass_reassoc : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_reassoc (m_ctxt); }\n-  void set_pass_param (unsigned int n, bool param)\n+  opt_pass * clone () final override { return new pass_reassoc (m_ctxt); }\n+  void set_pass_param (unsigned int n, bool param) final override\n     {\n       gcc_assert (n == 0);\n       insert_powi_p = param;\n       bias_loop_carried_phi_ranks_p = !param;\n     }\n-  virtual bool gate (function *) { return flag_tree_reassoc != 0; }\n-  virtual unsigned int execute (function *)\n+  bool gate (function *) final override { return flag_tree_reassoc != 0; }\n+  unsigned int execute (function *) final override\n   {\n     return execute_reassoc (insert_powi_p, bias_loop_carried_phi_ranks_p);\n   }"}, {"sha": "ee5b95c7af06f8b46e7898d25f9de90ddc17abd2", "filename": "gcc/tree-ssa-sccvn.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-sccvn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-sccvn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -8295,17 +8295,17 @@ class pass_fre : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_fre (m_ctxt); }\n-  void set_pass_param (unsigned int n, bool param)\n+  opt_pass * clone () final override { return new pass_fre (m_ctxt); }\n+  void set_pass_param (unsigned int n, bool param) final override\n     {\n       gcc_assert (n == 0);\n       may_iterate = param;\n     }\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return flag_tree_fre != 0 && (may_iterate || optimize > 1);\n     }\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n private:\n   bool may_iterate;"}, {"sha": "2e744d6ae507d7c52f8c3671534be8040045e132", "filename": "gcc/tree-ssa-sink.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-sink.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-sink.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -828,10 +828,10 @@ class pass_sink_code : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_tree_sink != 0; }\n-  virtual unsigned int execute (function *);\n-  opt_pass *clone (void) { return new pass_sink_code (m_ctxt); }\n-  void set_pass_param (unsigned n, bool param)\n+  bool gate (function *) final override { return flag_tree_sink != 0; }\n+  unsigned int execute (function *) final override;\n+  opt_pass *clone (void) final override { return new pass_sink_code (m_ctxt); }\n+  void set_pass_param (unsigned n, bool param) final override\n     {\n       gcc_assert (n == 0);\n       unsplit_edges = param;"}, {"sha": "2cceba6f7afaf1abfa33e3da51764262dd1ac49f", "filename": "gcc/tree-ssa-strlen.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-strlen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-strlen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -5962,8 +5962,8 @@ class pass_warn_printf : public gimple_opt_pass\n     : gimple_opt_pass (pass_data_warn_printf, ctxt)\n   {}\n \n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *fun)\n+  bool gate (function *) final override;\n+  unsigned int execute (function *fun) final override\n   {\n     return printf_strlen_execute (fun, true);\n   }\n@@ -5999,10 +5999,10 @@ class pass_strlen : public gimple_opt_pass\n     : gimple_opt_pass (pass_data_strlen, ctxt)\n   {}\n \n-  opt_pass * clone () { return new pass_strlen (m_ctxt); }\n+  opt_pass * clone () final override { return new pass_strlen (m_ctxt); }\n \n-  virtual bool gate (function *);\n-  virtual unsigned int execute (function *fun)\n+  bool gate (function *) final override;\n+  unsigned int execute (function *fun) final override\n   {\n     return printf_strlen_execute (fun, false);\n   }"}, {"sha": "dcf13d939bde40fedd17ce72b528773640bc789f", "filename": "gcc/tree-ssa-structalias.cc", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-structalias.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-structalias.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -8085,7 +8085,7 @@ class pass_build_alias : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_tree_pta; }\n+  bool gate (function *) final override { return flag_tree_pta; }\n \n }; // class pass_build_alias\n \n@@ -8123,7 +8123,7 @@ class pass_build_ealias : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_tree_pta; }\n+  bool gate (function *) final override { return flag_tree_pta; }\n \n }; // class pass_build_ealias\n \n@@ -8737,17 +8737,20 @@ class pass_ipa_pta : public simple_ipa_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return (optimize\n \t      && flag_ipa_pta\n \t      /* Don't bother doing anything if the program has errors.  */\n \t      && !seen_error ());\n     }\n \n-  opt_pass * clone () { return new pass_ipa_pta (m_ctxt); }\n+  opt_pass * clone () final override { return new pass_ipa_pta (m_ctxt); }\n \n-  virtual unsigned int execute (function *) { return ipa_pta_execute (); }\n+  unsigned int execute (function *) final override\n+  {\n+    return ipa_pta_execute ();\n+  }\n \n }; // class pass_ipa_pta\n "}, {"sha": "510f8319d8c78007229a7a02b8f8bf098d3ea7c8", "filename": "gcc/tree-ssa-uncprop.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-uncprop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-uncprop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uncprop.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -453,9 +453,9 @@ class pass_uncprop : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_uncprop (m_ctxt); }\n-  virtual bool gate (function *) { return flag_tree_dom != 0; }\n-  virtual unsigned int execute (function *);\n+  opt_pass * clone () final override { return new pass_uncprop (m_ctxt); }\n+  bool gate (function *) final override { return flag_tree_dom != 0; }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_uncprop\n "}, {"sha": "06a19821e1836214343c75fb99a96d7fa1c41742", "filename": "gcc/tree-ssa-uninit.cc", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-uninit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssa-uninit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1320,9 +1320,12 @@ class pass_late_warn_uninitialized : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass *clone () { return new pass_late_warn_uninitialized (m_ctxt); }\n-  virtual bool gate (function *) { return gate_warn_uninitialized (); }\n-  virtual unsigned int execute (function *);\n+  opt_pass *clone () final override\n+  {\n+    return new pass_late_warn_uninitialized (m_ctxt);\n+  }\n+  bool gate (function *) final override { return gate_warn_uninitialized (); }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_late_warn_uninitialized\n \n@@ -1462,8 +1465,8 @@ class pass_early_warn_uninitialized : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return gate_warn_uninitialized (); }\n-  virtual unsigned int execute (function *fun)\n+  bool gate (function *) final override { return gate_warn_uninitialized (); }\n+  unsigned int execute (function *fun) final override\n   {\n     return execute_early_warn_uninitialized (fun);\n   }"}, {"sha": "bc22ece636a119793adc051bfaa03e2ae9b26316", "filename": "gcc/tree-ssanames.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssanames.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-ssanames.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -920,7 +920,7 @@ class pass_release_ssa_names : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_release_ssa_names\n "}, {"sha": "ed4c8d8c77584f385d667e8538e9363ca71b37f9", "filename": "gcc/tree-stdarg.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-stdarg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-stdarg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1126,7 +1126,7 @@ class pass_stdarg : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       /* Always run this pass, in order to expand va_arg internal_fns.  We\n \t also need to do that if fun->stdarg == 0, because a va_arg may also\n@@ -1135,7 +1135,7 @@ class pass_stdarg : public gimple_opt_pass\n       return true;\n     }\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_stdarg\n \n@@ -1185,12 +1185,12 @@ class pass_lower_vaarg : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return (cfun->curr_properties & PROP_gimple_lva) == 0;\n     }\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_lower_vaarg\n "}, {"sha": "5291fb806b5854df7ef47e22461efe22fc206648", "filename": "gcc/tree-switch-conversion.cc", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-switch-conversion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-switch-conversion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -2427,8 +2427,11 @@ class pass_convert_switch : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return flag_tree_switch_conversion != 0; }\n-  virtual unsigned int execute (function *);\n+  bool gate (function *) final override\n+  {\n+    return flag_tree_switch_conversion != 0;\n+  }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_convert_switch\n \n@@ -2506,18 +2509,18 @@ template <bool O0> class pass_lower_switch: public gimple_opt_pass\n \n   static const pass_data data;\n   opt_pass *\n-  clone ()\n+  clone () final override\n   {\n     return new pass_lower_switch<O0> (m_ctxt);\n   }\n \n-  virtual bool\n-  gate (function *)\n+  bool\n+  gate (function *) final override\n   {\n     return !O0 || !optimize;\n   }\n \n-  virtual unsigned int execute (function *fun);\n+  unsigned int execute (function *fun) final override;\n }; // class pass_lower_switch\n \n template <bool O0>"}, {"sha": "6745d57580b6e9815c3bbe398eedafc85e5ff13c", "filename": "gcc/tree-tailcall.cc", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-tailcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-tailcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1261,9 +1261,12 @@ class pass_tail_recursion : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_tail_recursion (m_ctxt); }\n-  virtual bool gate (function *) { return gate_tail_calls (); }\n-  virtual unsigned int execute (function *)\n+  opt_pass * clone () final override\n+  {\n+    return new pass_tail_recursion (m_ctxt);\n+  }\n+  bool gate (function *) final override { return gate_tail_calls (); }\n+  unsigned int execute (function *) final override\n     {\n       return tree_optimize_tail_calls_1 (false);\n     }\n@@ -1301,8 +1304,11 @@ class pass_tail_calls : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return gate_tail_calls (); }\n-  virtual unsigned int execute (function *) { return execute_tail_calls (); }\n+  bool gate (function *) final override { return gate_tail_calls (); }\n+  unsigned int execute (function *) final override\n+  {\n+    return execute_tail_calls ();\n+  }\n \n }; // class pass_tail_calls\n "}, {"sha": "350129555a0c71c0896c4f1003163f3b3557c11b", "filename": "gcc/tree-vect-generic.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-vect-generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-vect-generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -2418,12 +2418,12 @@ class pass_lower_vector : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *fun)\n+  bool gate (function *fun) final override\n     {\n       return !(fun->curr_properties & PROP_gimple_lvec);\n     }\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return expand_vector_operations ();\n     }\n@@ -2462,8 +2462,11 @@ class pass_lower_vector_ssa : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_lower_vector_ssa (m_ctxt); }\n-  virtual unsigned int execute (function *)\n+  opt_pass * clone () final override\n+  {\n+    return new pass_lower_vector_ssa (m_ctxt);\n+  }\n+  unsigned int execute (function *) final override\n     {\n       return expand_vector_operations ();\n     }"}, {"sha": "53dc4520963094dc3d192faa5e28db87c5cc7a44", "filename": "gcc/tree-vectorizer.cc", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-vectorizer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-vectorizer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -1193,12 +1193,12 @@ class pass_vectorize : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *fun)\n+  bool gate (function *fun) final override\n     {\n       return flag_tree_loop_vectorize || fun->has_force_vectorize_loops;\n     }\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_vectorize\n \n@@ -1405,9 +1405,12 @@ class pass_simduid_cleanup : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_simduid_cleanup (m_ctxt); }\n-  virtual bool gate (function *fun) { return fun->has_simduid_loops; }\n-  virtual unsigned int execute (function *);\n+  opt_pass * clone () final override\n+  {\n+    return new pass_simduid_cleanup (m_ctxt);\n+  }\n+  bool gate (function *fun) final override { return fun->has_simduid_loops; }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_simduid_cleanup\n \n@@ -1463,9 +1466,9 @@ class pass_slp_vectorize : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_slp_vectorize (m_ctxt); }\n-  virtual bool gate (function *) { return flag_tree_slp_vectorize != 0; }\n-  virtual unsigned int execute (function *);\n+  opt_pass * clone () final override { return new pass_slp_vectorize (m_ctxt); }\n+  bool gate (function *) final override { return flag_tree_slp_vectorize != 0; }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_slp_vectorize\n \n@@ -1696,12 +1699,15 @@ class pass_ipa_increase_alignment : public simple_ipa_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return flag_section_anchors && flag_tree_loop_vectorize;\n     }\n \n-  virtual unsigned int execute (function *) { return increase_alignment (); }\n+  unsigned int execute (function *) final override\n+  {\n+    return increase_alignment ();\n+  }\n \n }; // class pass_ipa_increase_alignment\n "}, {"sha": "ef7978da234a273f7ada181ad69b9ee13c147729", "filename": "gcc/tree-vrp.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-vrp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftree-vrp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -4398,14 +4398,14 @@ class pass_vrp : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_vrp (m_ctxt); }\n-  void set_pass_param (unsigned int n, bool param)\n+  opt_pass * clone () final override { return new pass_vrp (m_ctxt); }\n+  void set_pass_param (unsigned int n, bool param) final override\n     {\n       gcc_assert (n == 0);\n       warn_array_bounds_p = param;\n     }\n-  virtual bool gate (function *) { return flag_tree_vrp != 0; }\n-  virtual unsigned int execute (function *fun)\n+  bool gate (function *) final override { return flag_tree_vrp != 0; }\n+  unsigned int execute (function *fun) final override\n     {\n       if ((my_pass == 1 && param_vrp1_mode == VRP_MODE_RANGER)\n \t  || (my_pass == 2 && param_vrp2_mode == VRP_MODE_RANGER))"}, {"sha": "79d4582acd17f7552547c26604e841eba327fa83", "filename": "gcc/tsan.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftsan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Ftsan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -909,13 +909,13 @@ class pass_tsan : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_tsan (m_ctxt); }\n-  virtual bool gate (function *)\n+  opt_pass * clone () final override { return new pass_tsan (m_ctxt); }\n+  bool gate (function *) final override\n {\n   return sanitize_flags_p (SANITIZE_THREAD);\n }\n \n-  virtual unsigned int execute (function *) { return tsan_pass (); }\n+  unsigned int execute (function *) final override { return tsan_pass (); }\n \n }; // class pass_tsan\n \n@@ -950,12 +950,12 @@ class pass_tsan_O0 : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return (sanitize_flags_p (SANITIZE_THREAD) && !optimize);\n     }\n \n-  virtual unsigned int execute (function *) { return tsan_pass (); }\n+  unsigned int execute (function *) final override { return tsan_pass (); }\n \n }; // class pass_tsan_O0\n "}, {"sha": "e51d1e41bab04e075c65606ab6fc42b146cb4c51", "filename": "gcc/ubsan.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fubsan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fubsan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -2348,7 +2348,7 @@ class pass_ubsan : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return sanitize_flags_p ((SANITIZE_NULL | SANITIZE_SI_OVERFLOW\n \t\t\t\t| SANITIZE_BOOL | SANITIZE_ENUM\n@@ -2360,7 +2360,7 @@ class pass_ubsan : public gimple_opt_pass\n \t\t\t\t| SANITIZE_BUILTIN));\n     }\n \n-  virtual unsigned int execute (function *);\n+  unsigned int execute (function *) final override;\n \n }; // class pass_ubsan\n "}, {"sha": "235981d100f6fdef817412bf050b1befc1810075", "filename": "gcc/var-tracking.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fvar-tracking.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fvar-tracking.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -10592,12 +10592,12 @@ class pass_variable_tracking : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  bool gate (function *) final override\n     {\n       return (flag_var_tracking && !targetm.delay_vartrack);\n     }\n \n-  virtual unsigned int execute (function *)\n+  unsigned int execute (function *) final override\n     {\n       return variable_tracking_main ();\n     }"}, {"sha": "24894e7f10825c8e6a029b4f4f672da0f90ec68b", "filename": "gcc/vtable-verify.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fvtable-verify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fvtable-verify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvtable-verify.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -818,8 +818,8 @@ class pass_vtable_verify : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return (flag_vtable_verify); }\n-  virtual unsigned int execute (function *);\n+  bool gate (function *) final override { return (flag_vtable_verify); }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_vtable_verify\n "}, {"sha": "bd0ec94f1f47984a809a8eed4e2b1c0cc45da327", "filename": "gcc/web.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fweb.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725793af78064fa605ea6d9376aaf99ecb71467b/gcc%2Fweb.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fweb.cc?ref=725793af78064fa605ea6d9376aaf99ecb71467b", "patch": "@@ -323,8 +323,8 @@ class pass_web : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *) { return (optimize > 0 && flag_web); }\n-  virtual unsigned int execute (function *);\n+  bool gate (function *) final override { return (optimize > 0 && flag_web); }\n+  unsigned int execute (function *) final override;\n \n }; // class pass_web\n "}]}