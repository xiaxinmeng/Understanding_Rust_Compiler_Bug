{"sha": "d8af84e67b08377cf813eb4d4bbf8ae2e8226fa1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhhZjg0ZTY3YjA4Mzc3Y2Y4MTNlYjRkNGJiZjhhZTJlODIyNmZhMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-11-12T19:41:36Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-11-12T19:41:36Z"}, "message": "Implement resolutions of LWG 2399, 2400 and 2401.\n\n\t* include/bits/shared_ptr.h (shared_ptr, weak_ptr): Define\n\t_Convertible alias template to simplify constraints.\n\t(shared_ptr(unique_ptr<TD>&&)): Constrain (LWG 2399).\n\t* include/bits/shared_ptr_base.h: Likewise.\n\t(_Sp_counted_deleter::_M_get_deleter()): Use addressof (LWG 2400).\n\t* include/std/functional (function::operator=(nullptr_t)): Add\n\tnoexcept (LWG 2401).\n\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Adjust dg-error.\n\t* testsuite/20_util/shared_ptr/cons/void_neg.cc: Adjust dg-error.\n\nFrom-SVN: r217442", "tree": {"sha": "3e204d7b474dd6286194676bad64a5cf2b9c3f37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e204d7b474dd6286194676bad64a5cf2b9c3f37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8af84e67b08377cf813eb4d4bbf8ae2e8226fa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8af84e67b08377cf813eb4d4bbf8ae2e8226fa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8af84e67b08377cf813eb4d4bbf8ae2e8226fa1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8af84e67b08377cf813eb4d4bbf8ae2e8226fa1/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e147937eac9eb182c419a4bd4f5155b341d7188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e147937eac9eb182c419a4bd4f5155b341d7188", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e147937eac9eb182c419a4bd4f5155b341d7188"}], "stats": {"total": 76, "additions": 50, "deletions": 26}, "files": [{"sha": "8960ef744ccf03b1e28c4b86cb980ae665bbd5d1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8af84e67b08377cf813eb4d4bbf8ae2e8226fa1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8af84e67b08377cf813eb4d4bbf8ae2e8226fa1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d8af84e67b08377cf813eb4d4bbf8ae2e8226fa1", "patch": "@@ -7,6 +7,16 @@\n \t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Adjust dg-error.\n \t* testsuite/20_util/shared_ptr/cons/void_neg.cc: Adjust dg-error.\n \n+\t* include/bits/shared_ptr.h (shared_ptr, weak_ptr): Define\n+\t_Convertible alias template to simplify constraints.\n+\t(shared_ptr(unique_ptr<TD>&&)): Constrain (LWG 2399).\n+\t* include/bits/shared_ptr_base.h: Likewise.\n+\t(_Sp_counted_deleter::_M_get_deleter()): Use addressof (LWG 2400).\n+\t* include/std/functional (function::operator=(nullptr_t)): Add\n+\tnoexcept (LWG 2401).\n+\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Adjust dg-error.\n+\t* testsuite/20_util/shared_ptr/cons/void_neg.cc: Adjust dg-error.\n+\n 2014-11-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c++/33911"}, {"sha": "22cb58a89fe86d987c0a401577639e9c82ad89e4", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8af84e67b08377cf813eb4d4bbf8ae2e8226fa1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8af84e67b08377cf813eb4d4bbf8ae2e8226fa1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=d8af84e67b08377cf813eb4d4bbf8ae2e8226fa1", "patch": "@@ -92,6 +92,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     class shared_ptr : public __shared_ptr<_Tp>\n     {\n+      template<typename _Ptr>\n+\tusing _Convertible\n+\t  = typename enable_if<is_convertible<_Ptr, _Tp*>::value>::type;\n+\n     public:\n       /**\n        *  @brief  Construct an empty %shared_ptr.\n@@ -213,8 +217,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @param  __r  A %shared_ptr.\n        *  @post   get() == __r.get() && use_count() == __r.use_count()\n        */\n-      template<typename _Tp1, typename = typename\n-\t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n+      template<typename _Tp1, typename = _Convertible<_Tp1*>>\n \tshared_ptr(const shared_ptr<_Tp1>& __r) noexcept\n         : __shared_ptr<_Tp>(__r) { }\n \n@@ -231,8 +234,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @param  __r  A %shared_ptr rvalue.\n        *  @post   *this contains the old value of @a __r, @a __r is empty.\n        */\n-      template<typename _Tp1, typename = typename\n-\t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n+      template<typename _Tp1, typename = _Convertible<_Tp1*>>\n \tshared_ptr(shared_ptr<_Tp1>&& __r) noexcept\n \t: __shared_ptr<_Tp>(std::move(__r)) { }\n \n@@ -253,7 +255,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tshared_ptr(std::auto_ptr<_Tp1>&& __r);\n #endif\n \n-      template<typename _Tp1, typename _Del>\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2399. shared_ptr's constructor from unique_ptr should be constrained\n+      template<typename _Tp1, typename _Del, typename\n+\t       = _Convertible<typename unique_ptr<_Tp1, _Del>::pointer>>\n \tshared_ptr(std::unique_ptr<_Tp1, _Del>&& __r)\n \t: __shared_ptr<_Tp>(std::move(__r)) { }\n \n@@ -464,25 +469,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     class weak_ptr : public __weak_ptr<_Tp>\n     {\n+      template<typename _Ptr>\n+\tusing _Convertible\n+\t  = typename enable_if<is_convertible<_Ptr, _Tp*>::value>::type;\n+\n     public:\n       constexpr weak_ptr() noexcept = default;\n \n-      template<typename _Tp1, typename = typename\n-\t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n+      template<typename _Tp1, typename = _Convertible<_Tp1*>>\n \tweak_ptr(const shared_ptr<_Tp1>& __r) noexcept\n \t: __weak_ptr<_Tp>(__r) { }\n \n       weak_ptr(const weak_ptr&) noexcept = default;\n \n-      template<typename _Tp1, typename = typename\n-\t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n+      template<typename _Tp1, typename = _Convertible<_Tp1*>>\n \tweak_ptr(const weak_ptr<_Tp1>& __r) noexcept\n \t: __weak_ptr<_Tp>(__r) { }\n \n       weak_ptr(weak_ptr&&) noexcept = default;\n \n-      template<typename _Tp1, typename = typename\n-\t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n+      template<typename _Tp1, typename = _Convertible<_Tp1*>>\n \tweak_ptr(weak_ptr<_Tp1>&& __r) noexcept\n \t: __weak_ptr<_Tp>(std::move(__r)) { }\n "}, {"sha": "fe397d0e7e9bd311d365d9f8ed1e2c8bd7565c57", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8af84e67b08377cf813eb4d4bbf8ae2e8226fa1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8af84e67b08377cf813eb4d4bbf8ae2e8226fa1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=d8af84e67b08377cf813eb4d4bbf8ae2e8226fa1", "patch": "@@ -477,7 +477,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_get_deleter(const std::type_info& __ti) noexcept\n       {\n #ifdef __GXX_RTTI\n-        return __ti == typeid(_Deleter) ? &_M_impl._M_del() : nullptr;\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 2400. shared_ptr's get_deleter() should use addressof()\n+        return __ti == typeid(_Deleter)\n+\t  ? std::__addressof(_M_impl._M_del())\n+\t  : nullptr;\n #else\n         return nullptr;\n #endif\n@@ -862,6 +866,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, _Lock_policy _Lp>\n     class __shared_ptr\n     {\n+      template<typename _Ptr>\n+\tusing _Convertible\n+\t  = typename enable_if<is_convertible<_Ptr, _Tp*>::value>::type;\n+\n     public:\n       typedef _Tp   element_type;\n \n@@ -916,8 +924,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __shared_ptr& operator=(const __shared_ptr&) noexcept = default;\n       ~__shared_ptr() = default;\n \n-      template<typename _Tp1, typename = typename\n-\t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n+      template<typename _Tp1, typename = _Convertible<_Tp1*>>\n \t__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept\n \t: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)\n \t{ }\n@@ -929,8 +936,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__r._M_ptr = 0;\n       }\n \n-      template<typename _Tp1, typename = typename\n-\t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n+      template<typename _Tp1, typename = _Convertible<_Tp1*>>\n \t__shared_ptr(__shared_ptr<_Tp1, _Lp>&& __r) noexcept\n \t: _M_ptr(__r._M_ptr), _M_refcount()\n \t{\n@@ -950,7 +956,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       // If an exception is thrown this constructor has no effect.\n-      template<typename _Tp1, typename _Del>\n+      template<typename _Tp1, typename _Del, typename\n+\t       = _Convertible<typename unique_ptr<_Tp1, _Del>::pointer>>\n \t__shared_ptr(std::unique_ptr<_Tp1, _Del>&& __r)\n \t: _M_ptr(__r.get()), _M_refcount()\n \t{\n@@ -1331,6 +1338,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, _Lock_policy _Lp>\n     class __weak_ptr\n     {\n+      template<typename _Ptr>\n+\tusing _Convertible\n+\t  = typename enable_if<is_convertible<_Ptr, _Tp*>::value>::type;\n+\n     public:\n       typedef _Tp element_type;\n \n@@ -1356,14 +1367,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       //\n       // It is not possible to avoid spurious access violations since\n       // in multithreaded programs __r._M_ptr may be invalidated at any point.\n-      template<typename _Tp1, typename = typename\n-\t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n+      template<typename _Tp1, typename = _Convertible<_Tp1*>>\n \t__weak_ptr(const __weak_ptr<_Tp1, _Lp>& __r) noexcept\n \t: _M_refcount(__r._M_refcount)\n         { _M_ptr = __r.lock().get(); }\n \n-      template<typename _Tp1, typename = typename\n-\t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n+      template<typename _Tp1, typename = _Convertible<_Tp1*>>\n \t__weak_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept\n \t: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)\n \t{ }\n@@ -1372,8 +1381,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_ptr(__r._M_ptr), _M_refcount(std::move(__r._M_refcount))\n       { __r._M_ptr = nullptr; }\n \n-      template<typename _Tp1, typename = typename\n-\t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n+      template<typename _Tp1, typename = _Convertible<_Tp1*>>\n \t__weak_ptr(__weak_ptr<_Tp1, _Lp>&& __r) noexcept\n \t: _M_ptr(__r.lock().get()), _M_refcount(std::move(__r._M_refcount))\n         { __r._M_ptr = nullptr; }"}, {"sha": "71d97ad039931258469645217d4a5423030a70e5", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8af84e67b08377cf813eb4d4bbf8ae2e8226fa1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8af84e67b08377cf813eb4d4bbf8ae2e8226fa1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=d8af84e67b08377cf813eb4d4bbf8ae2e8226fa1", "patch": "@@ -2102,7 +2102,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n        *  The target of @c *this is deallocated, leaving it empty.\n        */\n       function&\n-      operator=(nullptr_t)\n+      operator=(nullptr_t) noexcept\n       {\n \tif (_M_manager)\n \t  {"}, {"sha": "d354d204976b08d3cf4b72995c65f9eb9ff1559c", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/43820_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8af84e67b08377cf813eb4d4bbf8ae2e8226fa1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8af84e67b08377cf813eb4d4bbf8ae2e8226fa1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc?ref=d8af84e67b08377cf813eb4d4bbf8ae2e8226fa1", "patch": "@@ -32,7 +32,7 @@ void test01()\n {\n   X* px = 0;\n   std::shared_ptr<X> p1(px);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 878 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 886 }\n \n   std::shared_ptr<X> p9(ap());  // { dg-error \"here\" }\n   // { dg-error \"incomplete\" \"\" { target *-*-* } 307 }"}, {"sha": "d833aea1786c4c80a5e491d5404f0d38d2d5a6ba", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/void_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8af84e67b08377cf813eb4d4bbf8ae2e8226fa1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8af84e67b08377cf813eb4d4bbf8ae2e8226fa1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc?ref=d8af84e67b08377cf813eb4d4bbf8ae2e8226fa1", "patch": "@@ -25,5 +25,5 @@\n void test01()\n {\n   std::shared_ptr<void> p((void*)nullptr);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 877 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 885 }\n }"}]}