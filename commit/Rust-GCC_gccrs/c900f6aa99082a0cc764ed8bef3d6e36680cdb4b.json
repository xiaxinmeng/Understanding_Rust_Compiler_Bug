{"sha": "c900f6aa99082a0cc764ed8bef3d6e36680cdb4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkwMGY2YWE5OTA4MmEwY2M3NjRlZDhiZWYzZDZlMzY2ODBjZGI0Yg==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-11-10T17:23:49Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-11-10T17:23:49Z"}, "message": "tree-ssa-alias.c (compute_may_aliases): Remove call to delete_old_heap_vars.\n\n2005-11-10  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-ssa-alias.c (compute_may_aliases): Remove call to \n\tdelete_old_heap_vars.\n\t* tree-dfa.c (referenced_var_remove): Remove function.\n\t* tree-ssa.c (init_tree_ssa): Call init_alias_heapvars.\n\t(delete_tree_ssa): Remove call to delete_old_heapvars.\n\tAdd call to delete_alias_heapvars.\n\t* tree-flow.h (referenced_var_remove): Remove prototype\n\t(init_alias_heapvars): New prototype.\n\t(delete_alias_heapvars): Ditto.\n\t* Makefile.in (tree-ssa-structalias.o): Add\n\tgt-tree-ssa-structalias.o\n\t(GTFILES): Add tree-ssa-structalias.h and\n\ttree-ssa-structalias.c.\n\t(s-gtype): Add gt-tree-ssa-structalias.h.\n\t* tree-ssa-structalias.c (heapvars): Remove.\n\t(oldheapvars): Remove.\n\t(heapvar_for_stmt): New variable.\n\t(heapvar_lookup): New function.\n\t(heapvar_insert): Ditto.\n\t(get_constraint_for): See if we have an old heapvar\n\tto reuse.\n\t(init_alias_heapvars): New function.\n\t(delete_alias_heapvars): Ditto.\n\tAdd include of gt-tree-ssa-structalias.h.\n\nFrom-SVN: r106743", "tree": {"sha": "e1aebf7e655deddbb9685829f76a4937d5270573", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1aebf7e655deddbb9685829f76a4937d5270573"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c900f6aa99082a0cc764ed8bef3d6e36680cdb4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c900f6aa99082a0cc764ed8bef3d6e36680cdb4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c900f6aa99082a0cc764ed8bef3d6e36680cdb4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c900f6aa99082a0cc764ed8bef3d6e36680cdb4b/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0618ee3194d08195e5f5996998d25126a7e129c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0618ee3194d08195e5f5996998d25126a7e129c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0618ee3194d08195e5f5996998d25126a7e129c2"}], "stats": {"total": 158, "additions": 92, "deletions": 66}, "files": [{"sha": "3a0cbc6a21e7d3d03fa8726eac6cb783b1db8817", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c900f6aa99082a0cc764ed8bef3d6e36680cdb4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c900f6aa99082a0cc764ed8bef3d6e36680cdb4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c900f6aa99082a0cc764ed8bef3d6e36680cdb4b", "patch": "@@ -1,3 +1,30 @@\n+2005-11-10  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree-ssa-alias.c (compute_may_aliases): Remove call to \n+\tdelete_old_heap_vars.\n+\t* tree-dfa.c (referenced_var_remove): Remove function.\n+\t* tree-ssa.c (init_tree_ssa): Call init_alias_heapvars.\n+\t(delete_tree_ssa): Remove call to delete_old_heapvars.\n+\tAdd call to delete_alias_heapvars.\n+\t* tree-flow.h (referenced_var_remove): Remove prototype\n+\t(init_alias_heapvars): New prototype.\n+\t(delete_alias_heapvars): Ditto.\n+\t* Makefile.in (tree-ssa-structalias.o): Add\n+\tgt-tree-ssa-structalias.o\n+\t(GTFILES): Add tree-ssa-structalias.h and\n+\ttree-ssa-structalias.c.\n+\t(s-gtype): Add gt-tree-ssa-structalias.h.\n+\t* tree-ssa-structalias.c (heapvars): Remove.\n+\t(oldheapvars): Remove.\n+\t(heapvar_for_stmt): New variable.\n+\t(heapvar_lookup): New function.\n+\t(heapvar_insert): Ditto.\n+\t(get_constraint_for): See if we have an old heapvar\n+\tto reuse.\n+\t(init_alias_heapvars): New function.\n+\t(delete_alias_heapvars): Ditto.\n+\tAdd include of gt-tree-ssa-structalias.h.\n+\n 2005-11-10  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR middle-end/22127"}, {"sha": "934d439c36c577c415a6ea728b730633ba08d839", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c900f6aa99082a0cc764ed8bef3d6e36680cdb4b/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c900f6aa99082a0cc764ed8bef3d6e36680cdb4b/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c900f6aa99082a0cc764ed8bef3d6e36680cdb4b", "patch": "@@ -1743,7 +1743,8 @@ stor-layout.o : stor-layout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    toplev.h\n tree-ssa-structalias.o: tree-ssa-structalias.c tree-ssa-structalias.h \\\n    $(SYSTEM_H) $(CONFIG_H) $(GGC_H) $(TREE_H) $(TREE_FLOW_H) \\\n-   $(TM_H) coretypes.h cgraph.h tree-pass.h $(TIMEVAR_H)\n+   $(TM_H) coretypes.h cgraph.h tree-pass.h $(TIMEVAR_H) \\\n+   gt-tree-ssa-structalias.h\n tree-ssa.o : tree-ssa.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) output.h $(DIAGNOSTIC_H) \\\n    toplev.h function.h $(TIMEVAR_H) $(TM_H) coretypes.h \\\n@@ -2756,7 +2757,8 @@ GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/tree-chrec.h $(srcdir)/tree-vect-generic.c \\\n   $(srcdir)/tree-ssa-operands.h $(srcdir)/tree-ssa-operands.c \\\n   $(srcdir)/tree-profile.c $(srcdir)/tree-nested.c \\\n-  $(srcdir)/ipa-reference.c \\\n+  $(srcdir)/ipa-reference.c $(srcdir)/tree-ssa-structalias.h \\\n+  $(srcdir)/tree-ssa-structalias.c \\\n   $(srcdir)/targhooks.c $(out_file) \\\n   @all_gtfiles@\n \n@@ -2778,6 +2780,7 @@ gt-tree-profile.h gt-tree-ssa-address.h \\\n gt-tree-ssanames.h gt-tree-iterator.h gt-gimplify.h \\\n gt-tree-phinodes.h gt-tree-nested.h \\\n gt-tree-ssa-operands.h gt-tree-ssa-propagate.h \\\n+gt-tree-ssa-structalias.h \\\n gt-stringpool.h gt-targhooks.h : s-gtype ; @true\n \n define echo_quoted_to_gtyp"}, {"sha": "9fc48d5cbe8c8fdb77941a46917763acb7aaf55f", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c900f6aa99082a0cc764ed8bef3d6e36680cdb4b/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c900f6aa99082a0cc764ed8bef3d6e36680cdb4b/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=c900f6aa99082a0cc764ed8bef3d6e36680cdb4b", "patch": "@@ -609,18 +609,6 @@ referenced_var_insert (unsigned int uid, tree to)\n   *(struct int_tree_map **)  loc = h;\n }\n \n-/* Remove the pair DECL_UID (TO), TO from the referenced vars\n-   hashtable.  */\n-\n-void\n-referenced_var_remove (tree to)\n-{ \n-  struct int_tree_map in;\n-  in.uid = DECL_UID (to);\n-  in.to = to;\n-  htab_remove_elt_with_hash (referenced_vars, &in, in.uid);\n-}\n-\n /* Add VAR to the list of dereferenced variables.\n \n    WALK_STATE contains a hash table used to avoid adding the same"}, {"sha": "8b01f8b4cc967f1e6e74f16ae39747122af95d94", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c900f6aa99082a0cc764ed8bef3d6e36680cdb4b/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c900f6aa99082a0cc764ed8bef3d6e36680cdb4b/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=c900f6aa99082a0cc764ed8bef3d6e36680cdb4b", "patch": "@@ -423,7 +423,6 @@ extern GTY((param_is (struct int_tree_map))) htab_t referenced_vars;\n \n extern tree referenced_var_lookup (unsigned int);\n extern tree referenced_var_lookup_if_exists (unsigned int);\n-extern void referenced_var_remove (tree);\n #define num_referenced_vars htab_elements (referenced_vars)\n #define referenced_var(i) referenced_var_lookup (i)\n \n@@ -892,7 +891,9 @@ int push_fields_onto_fieldstack (tree, VEC(fieldoff_s,heap) **,\n \t\t\t\t HOST_WIDE_INT, bool *);\n void sort_fieldstack (VEC(fieldoff_s,heap) *);\n \n-void delete_old_heap_vars (void);\n+void init_alias_heapvars (void);\n+void delete_alias_heapvars (void);\n+\n #include \"tree-flow-inline.h\"\n \n #endif /* _TREE_FLOW_H  */"}, {"sha": "84c522554b21c5147efdce1f0f34ab9e72f7851c", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c900f6aa99082a0cc764ed8bef3d6e36680cdb4b/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c900f6aa99082a0cc764ed8bef3d6e36680cdb4b/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=c900f6aa99082a0cc764ed8bef3d6e36680cdb4b", "patch": "@@ -252,8 +252,6 @@ compute_may_aliases (void)\n   \n   memset (&alias_stats, 0, sizeof (alias_stats));\n \n-  delete_old_heap_vars ();\n-\n   /* Initialize aliasing information.  */\n   ai = init_alias_info ();\n "}, {"sha": "db230af72408636e981766b88ce97a20691e007e", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 55, "deletions": 47, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c900f6aa99082a0cc764ed8bef3d6e36680cdb4b/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c900f6aa99082a0cc764ed8bef3d6e36680cdb4b/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=c900f6aa99082a0cc764ed8bef3d6e36680cdb4b", "patch": "@@ -159,9 +159,8 @@ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n   TODO: We could handle unions, but to be honest, it's probably not\n   worth the pain or slowdown.  */\n \n-static VEC(tree, heap) *heapvars = NULL;\n-static VEC(tree, heap) *oldheapvars = NULL;\n-\n+static GTY ((if_marked (\"tree_map_marked_p\"), param_is (struct tree_map))) \n+  htab_t heapvar_for_stmt;\n static bool use_field_sensitive = true;\n static unsigned int create_variable_info_for (tree, const char *);\n static struct constraint_expr get_constraint_for (tree, bool *);\n@@ -311,6 +310,38 @@ static varinfo_t var_anyoffset;\n static tree anyoffset_tree;\n static unsigned int anyoffset_id;\n \n+\n+/* Lookup a heap var for STMT, and return it if we find one.  */\n+\n+static tree \n+heapvar_lookup (tree stmt)\n+{\n+  struct tree_map *h, in;\n+  in.from = from;\n+\n+  h = htab_find_with_hash (heapvar_for_stmt, &in, htab_hash_pointer (from));\n+  if (h)\n+    return h->to;\n+  return NULL_TREE;\n+}\n+\n+/* Insert a mapping FROM->TO in the heap var for statement\n+   hashtable.  */\n+\n+static void\n+heapvar_insert (tree from, tree to)\n+{\n+  struct tree_map *h;\n+  void **loc;\n+\n+  h = ggc_alloc (sizeof (struct tree_map));\n+  h->hash = htab_hash_pointer (from);\n+  h->from = from;\n+  h->to = to;\n+  loc = htab_find_slot_with_hash (heapvar_for_stmt, h, h->hash, INSERT);\n+  *(struct tree_map **) loc = h;\n+}  \n+\n /* Return a new variable info structure consisting for a variable\n    named NAME, and using constraint graph node NODE.  */\n \n@@ -2213,12 +2244,16 @@ get_constraint_for (tree t, bool *need_anyoffset)\n \t    if (call_expr_flags (t) & (ECF_MALLOC | ECF_MAY_BE_ALLOCA))\n \t      {\n \t\tvarinfo_t vi;\n-\t\ttree heapvar;\n+\t\ttree heapvar = heapvar_lookup (t);\n \t\t\n-\t\theapvar = create_tmp_var_raw (ptr_type_node, \"HEAP\");\n-\t\tVEC_safe_push (tree, heap, heapvars, heapvar);\n-\t\tDECL_EXTERNAL (heapvar) = 1;\n-\t\tadd_referenced_tmp_var (heapvar);\n+\t\tif (heapvar == NULL)\n+\t\t  {\t\t    \n+\t\t    heapvar = create_tmp_var_raw (ptr_type_node, \"HEAP\");\n+\t\t    DECL_EXTERNAL (heapvar) = 1;\n+\t\t    add_referenced_tmp_var (heapvar);\n+\t\t    heapvar_insert (t, heapvar);\n+\t\t  }\n+\n \t\ttemp.var = create_variable_info_for (heapvar,\n \t\t\t\t\t\t     alias_get_name (heapvar));\n \t\t\n@@ -3768,45 +3803,18 @@ delete_points_to_sets (void)\n   have_alias_info = false;\n }\n \n-/* Delete old heap vars, since nothing else will remove them for\n-   us.  */\n-void\n-delete_old_heap_vars (void)\n+/* Initialize the heapvar for statement mapping.  */\n+void \n+init_alias_heapvars (void)\n {\n-  if (!in_ssa_p)\n-    {\n-      VEC_free (tree, heap, heapvars);\n-      VEC_free (tree, heap, oldheapvars);\n-      heapvars = NULL;\n-      oldheapvars = NULL;\n-    }\n-  /* Why is this complicated?\n-     We can't remove the heapvars from the referenced var array until\n-     they go away from the ssa form, and we can't remove them from the\n-     ssa form until we've renamed it.  We can't renamed it if it's not\n-     in the referenced vars array. \n-     Thus, we have to first mark it for renaming, and then the *next*\n-     time after that we call this function, we can remove it from\n-     referenced vars.  */\n+  heapvar_for_stmt = htab_create_ggc (11, tree_map_hash, tree_map_eq, NULL);\n+}\n \n-  if (!VEC_empty (tree, heapvars))\n-    {\n-      int i;\n-      tree heapvar;\n-      for (i = 0; VEC_iterate (tree, heapvars, i, heapvar); i++)\n-\t{\n-\t  if (in_ssa_p)\n-\t    mark_sym_for_renaming (heapvar);\n-\t  DECL_EXTERNAL (heapvar) = false;\n-\t  bitmap_clear_bit (call_clobbered_vars, DECL_UID (heapvar));\n-\t}\n-      if (!VEC_empty (tree, oldheapvars))\n-\t{\n-\t  for (i = 0; VEC_iterate (tree, oldheapvars, i, heapvar); i++)\n-\t    referenced_var_remove (heapvar);\n-\t}\n-      VEC_free (tree, heap, oldheapvars);\n-      oldheapvars = heapvars;\n-      heapvars = NULL;\n-    }\n+void\n+delete_alias_heapvars (void)\n+{\n+  htab_delete (heapvar_for_stmt);  \n }\n+\n+  \n+#include \"gt-tree-ssa-structalias.h\""}, {"sha": "081d21a7b97c7a7ea91ab9869bf9bfb36a7efbd3", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c900f6aa99082a0cc764ed8bef3d6e36680cdb4b/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c900f6aa99082a0cc764ed8bef3d6e36680cdb4b/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=c900f6aa99082a0cc764ed8bef3d6e36680cdb4b", "patch": "@@ -803,6 +803,7 @@ init_tree_ssa (void)\n \t\t\t\t     int_tree_map_eq, NULL);\n   call_clobbered_vars = BITMAP_ALLOC (NULL);\n   addressable_vars = BITMAP_ALLOC (NULL);\n+  init_alias_heapvars ();\n   init_ssanames ();\n   init_phinodes ();\n   global_var = NULL_TREE;\n@@ -848,7 +849,6 @@ delete_tree_ssa (void)\n       set_phi_nodes (bb, NULL);\n     }\n \n-  delete_old_heap_vars ();\n   /* Remove annotations from every referenced variable.  */\n   FOR_EACH_REFERENCED_VAR (var, rvi)\n     {\n@@ -868,6 +868,7 @@ delete_tree_ssa (void)\n   addressable_vars = NULL;\n   modified_noreturn_calls = NULL;\n   aliases_computed_p = false;\n+  delete_alias_heapvars ();\n   gcc_assert (!need_ssa_update_p ());\n }\n "}]}