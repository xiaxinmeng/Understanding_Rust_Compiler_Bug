{"sha": "7eeb8c04e53fa880ee559efb727517ce778d17a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VlYjhjMDRlNTNmYTg4MGVlNTU5ZWZiNzI3NTE3Y2U3NzhkMTdhMA==", "commit": {"author": {"name": "Thomas Rodgers", "email": "rodgert@twrodgers.com", "date": "2021-04-21T17:01:06Z"}, "committer": {"name": "Thomas Rodgers", "email": "rodgert@twrodgers.com", "date": "2021-04-21T20:28:08Z"}, "message": "[libstdc++] Fix test timeout in stop_calback/destroy.cc\n\nA change was made to __atomic_semaphore::_S_do_try_acquire() to\n(ideally) let the compare_exchange reload the value of __old rather than\nalways reloading it twice. This causes _M_acquire to spin indefinitely\nif the value of __old is already 0.\n\nlibstdc++-v3/ChangeLog:\n\t* include/bits/semaphore_base.h: Always reload __old in\n\t__atomic_semaphore::_S_do_try_acquire().\n\t* testsuite/30_threads/stop_token/stop_callback/destroy.cc:\n\tre-enable testcase.", "tree": {"sha": "621519737fb1cff7636225ea7364b6b25f6244f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/621519737fb1cff7636225ea7364b6b25f6244f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7eeb8c04e53fa880ee559efb727517ce778d17a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eeb8c04e53fa880ee559efb727517ce778d17a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eeb8c04e53fa880ee559efb727517ce778d17a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eeb8c04e53fa880ee559efb727517ce778d17a0/comments", "author": {"login": "rodgert", "id": 120839, "node_id": "MDQ6VXNlcjEyMDgzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/120839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodgert", "html_url": "https://github.com/rodgert", "followers_url": "https://api.github.com/users/rodgert/followers", "following_url": "https://api.github.com/users/rodgert/following{/other_user}", "gists_url": "https://api.github.com/users/rodgert/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodgert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodgert/subscriptions", "organizations_url": "https://api.github.com/users/rodgert/orgs", "repos_url": "https://api.github.com/users/rodgert/repos", "events_url": "https://api.github.com/users/rodgert/events{/privacy}", "received_events_url": "https://api.github.com/users/rodgert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rodgert", "id": 120839, "node_id": "MDQ6VXNlcjEyMDgzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/120839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodgert", "html_url": "https://github.com/rodgert", "followers_url": "https://api.github.com/users/rodgert/followers", "following_url": "https://api.github.com/users/rodgert/following{/other_user}", "gists_url": "https://api.github.com/users/rodgert/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodgert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodgert/subscriptions", "organizations_url": "https://api.github.com/users/rodgert/orgs", "repos_url": "https://api.github.com/users/rodgert/repos", "events_url": "https://api.github.com/users/rodgert/events{/privacy}", "received_events_url": "https://api.github.com/users/rodgert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a44895ce7ffbc26b4d765c40b5b346f8c9a9b762", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a44895ce7ffbc26b4d765c40b5b346f8c9a9b762", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a44895ce7ffbc26b4d765c40b5b346f8c9a9b762"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "84b33423fff44d02c10efa8873c39c9908a51c4d", "filename": "libstdc++-v3/include/bits/semaphore_base.h", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eeb8c04e53fa880ee559efb727517ce778d17a0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsemaphore_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eeb8c04e53fa880ee559efb727517ce778d17a0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsemaphore_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsemaphore_base.h?ref=7eeb8c04e53fa880ee559efb727517ce778d17a0", "patch": "@@ -196,9 +196,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __atomic_semaphore& operator=(const __atomic_semaphore&) = delete;\n \n     static _GLIBCXX_ALWAYS_INLINE bool\n-    _S_do_try_acquire(__detail::__platform_wait_t* __counter,\n-\t\t      __detail::__platform_wait_t& __old) noexcept\n+    _S_do_try_acquire(__detail::__platform_wait_t* __counter) noexcept\n     {\n+      auto __old = __atomic_impl::load(__counter, memory_order::acquire);\n       if (__old == 0)\n \treturn false;\n \n@@ -211,18 +211,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _GLIBCXX_ALWAYS_INLINE void\n     _M_acquire() noexcept\n     {\n-      auto __old = __atomic_impl::load(&_M_counter, memory_order::acquire);\n       auto const __pred =\n-\t[this, &__old] { return _S_do_try_acquire(&this->_M_counter, __old); };\n+\t[this] { return _S_do_try_acquire(&this->_M_counter); };\n       std::__atomic_wait_address_bare(&_M_counter, __pred);\n     }\n \n     bool\n     _M_try_acquire() noexcept\n     {\n-      auto __old = __atomic_impl::load(&_M_counter, memory_order::acquire);\n       auto const __pred =\n-\t[this, &__old] { return _S_do_try_acquire(&this->_M_counter, __old); };\n+\t[this] { return _S_do_try_acquire(&this->_M_counter); };\n       return std::__detail::__atomic_spin(__pred);\n     }\n \n@@ -231,9 +229,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_try_acquire_until(const chrono::time_point<_Clock,\n \t\t\t   _Duration>& __atime) noexcept\n       {\n-\tauto __old = __atomic_impl::load(&_M_counter, memory_order_relaxed);\n \tauto const __pred =\n-\t  [this, &__old] { return _S_do_try_acquire(&this->_M_counter, __old); };\n+\t  [this] { return _S_do_try_acquire(&this->_M_counter); };\n \n \treturn __atomic_wait_address_until_bare(&_M_counter, __pred, __atime);\n       }\n@@ -243,9 +240,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_try_acquire_for(const chrono::duration<_Rep, _Period>& __rtime)\n \tnoexcept\n       {\n-\tauto __old = __atomic_impl::load(&_M_counter, memory_order_relaxed);\n \tauto const __pred =\n-\t  [this, &__old] { return _S_do_try_acquire(&this->_M_counter, __old); };\n+\t  [this] { return _S_do_try_acquire(&this->_M_counter); };\n \n \treturn __atomic_wait_address_for_bare(&_M_counter, __pred, __rtime);\n       }"}, {"sha": "061ed448c33f48f97db15ca9bc912f1619fe3ae2", "filename": "libstdc++-v3/testsuite/30_threads/stop_token/stop_callback/destroy.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eeb8c04e53fa880ee559efb727517ce778d17a0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fstop_token%2Fstop_callback%2Fdestroy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eeb8c04e53fa880ee559efb727517ce778d17a0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fstop_token%2Fstop_callback%2Fdestroy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fstop_token%2Fstop_callback%2Fdestroy.cc?ref=7eeb8c04e53fa880ee559efb727517ce778d17a0", "patch": "@@ -21,8 +21,6 @@\n // { dg-require-effective-target pthread }\n // { dg-require-gthreads \"\" }\n \n-// { dg-skip-if \"FIXME: times out\" { *-*-* } }\n-\n #include <stop_token>\n #include <atomic>\n #include <thread>"}]}