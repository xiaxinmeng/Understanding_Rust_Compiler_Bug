{"sha": "a7817e1db2b3b314507787b957afce31a56e7d13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc4MTdlMWRiMmIzYjMxNDUwNzc4N2I5NTdhZmNlMzFhNTZlN2QxMw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-10-11T07:09:36Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-10-11T07:09:36Z"}, "message": "linker-map.gnu (GLIBCPP_3.2.1): Add.\n\n\n2002-10-10  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* config/linker-map.gnu (GLIBCPP_3.2.1): Add.\n\t(GLIBCPP_3.2): Don't export locale::_S_*.\n\t* src/ios.cc: Move globals into __gnu_cxx. Make old exported\n\tsymbols match.\n\t* src/locale.cc: Same.\n\t* src/localename.cc: Same.\n\t* src/globals.cc: Same.\n\nFrom-SVN: r58042", "tree": {"sha": "cdd64cd7bca0a1f9bfb3360b37bc3c4b83167acc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdd64cd7bca0a1f9bfb3360b37bc3c4b83167acc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7817e1db2b3b314507787b957afce31a56e7d13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7817e1db2b3b314507787b957afce31a56e7d13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7817e1db2b3b314507787b957afce31a56e7d13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7817e1db2b3b314507787b957afce31a56e7d13/comments", "author": null, "committer": null, "parents": [{"sha": "349e9f4b0b9e34a4a7408064caf7d23e786073a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/349e9f4b0b9e34a4a7408064caf7d23e786073a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/349e9f4b0b9e34a4a7408064caf7d23e786073a5"}], "stats": {"total": 199, "additions": 156, "deletions": 43}, "files": [{"sha": "3aa1a554a3f2fb03e5bc325996a68cad1741d9d9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7817e1db2b3b314507787b957afce31a56e7d13/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7817e1db2b3b314507787b957afce31a56e7d13/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a7817e1db2b3b314507787b957afce31a56e7d13", "patch": "@@ -1,3 +1,13 @@\n+2002-10-10  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* config/linker-map.gnu (GLIBCPP_3.2.1): Add.\n+\t(GLIBCPP_3.2): Don't export locale::_S_*. \n+\t* src/ios.cc: Move globals into __gnu_cxx. Make old exported\n+\tsymbols match.\n+\t* src/locale.cc: Same.\n+\t* src/localename.cc: Same.\t\n+\t* src/globals.cc: Same. \n+\n 2002-10-10  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* docs/html/21_strings/howto.html:  Write #5, char_traits."}, {"sha": "a43ab2cc0c5ad39679e3749f2d1eddfdef4d955a", "filename": "libstdc++-v3/config/linker-map.gnu", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7817e1db2b3b314507787b957afce31a56e7d13/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7817e1db2b3b314507787b957afce31a56e7d13/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu?ref=a7817e1db2b3b314507787b957afce31a56e7d13", "patch": "@@ -20,7 +20,6 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-\n GLIBCPP_3.2 {\n \n   global:\n@@ -29,7 +28,18 @@ GLIBCPP_3.2 {\n     # All but the last are terminated with a semicolon.\n     extern \"C++\"\n     {\n-      std::[A-Za-z]*;\n+      std::[A-Za-k]*;\n+      std::length_error*;\n+      std::logic_error*;\n+      std::locale::[A-Za-z]*;\n+      std::locale::_Impl*;\n+      std::locale::_S_classic;\n+      std::locale::_S_global;\n+      std::locale::_S_num_categories;\n+      std::locale::facet*;\n+      std::locale::id*;\n+      std::locale::locale*;\n+      std::[A-Zm-z]*;\n       std::__throw_*;\n       std::__basic_file*;\n       std::__num_base*;\n@@ -43,6 +53,11 @@ GLIBCPP_3.2 {\n \n     # Names not in an 'extern' block are mangled names.\n \n+    _ZNSt6localeC1E*;\n+    _ZNSt6locale11_M_coalesceERKS_S1_j;\n+    _ZNSt6locale21_S_normalize_categoryEj;\n+    _ZNSt6localeD*;\n+\n     # std::has_facet*\n     _ZSt9has_facet*;\n \n@@ -97,6 +112,15 @@ GLIBCPP_3.2 {\n     *;\n };\n \n+# Symbols added after GLIBCPP_3.2\n+GLIBCPP_3.2.1 {\n+\n+  _ZNSt7codecvtIcc11__mbstate_tEC1EP15__locale_structj;\n+  _ZNSt7codecvtIcc11__mbstate_tEC2EP15__locale_structj;\n+  _ZNSt7codecvtIwc11__mbstate_tEC1EP15__locale_structj;\n+  _ZNSt7codecvtIwc11__mbstate_tEC2EP15__locale_structj;\n+\n+} GLIBCPP_3.2;\n \n # Symbols in the support library (libsupc++) have their own tag.\n CXXABI_1.2 {"}, {"sha": "27f8be19891f10ff8117d63fc938a38960f03ba4", "filename": "libstdc++-v3/src/globals.cc", "status": "modified", "additions": 82, "deletions": 27, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7817e1db2b3b314507787b957afce31a56e7d13/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7817e1db2b3b314507787b957afce31a56e7d13/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc?ref=a7817e1db2b3b314507787b957afce31a56e7d13", "patch": "@@ -44,20 +44,32 @@\n // Because <iostream> declares the standard streams to be [io]stream\n // types instead of say [io]fstream types, it is also necessary to\n // allocate the actual file buffers in this file.\n-namespace std \n+namespace __gnu_cxx\n {\n-  // Standard \"C\" locale.\n+  using namespace std;\n+\n+  // NB: The asm directives renames these non-exported, namespace\n+  // __gnu_cxx symbols into the mistakenly exported, namespace std\n+  // symbols in GLIBCPP_3.2.\n+  // The rename syntax is \n+  //   asm (\".symver currentname,oldname@@GLIBCPP_3.2\")\n+  // At the same time, these new __gnu_cxx symbols are not exported.\n+  // In the future, GLIBCXX_ABI > 5 should remove all asm directives\n+  // in this file.\n   typedef char fake_locale[sizeof(locale)]\n   __attribute__ ((aligned(__alignof__(locale))));\n   fake_locale c_locale;\n+  asm (\".symver _ZN9__gnu_cxx8c_localeE,_ZSt8c_locale@@GLIBCPP_3.2\");\n \n   typedef char fake_locale_Impl[sizeof(locale::_Impl)]\n   __attribute__ ((aligned(__alignof__(locale::_Impl))));\n   fake_locale_Impl c_locale_impl;\n-  \n+  asm (\".symver _ZN9__gnu_cxx13c_locale_implE,\\\n+        _ZSt13c_locale_impl@@GLIBCPP_3.2\");\n   typedef char fake_facet_vec[sizeof(locale::facet*)]\n   __attribute__ ((aligned(__alignof__(locale::facet*))));\n   fake_facet_vec facet_vec[_GLIBCPP_NUM_FACETS];\n+  asm (\".symver _ZN9__gnu_cxx9facet_vecE,_ZSt9facet_vec@@GLIBCPP_3.2\");\n \n   typedef char fake_facet_name[sizeof(char*)]\n   __attribute__ ((aligned(__alignof__(char*))));\n@@ -66,142 +78,161 @@ namespace std\n   typedef char fake_ctype_c[sizeof(std::ctype<char>)]\n   __attribute__ ((aligned(__alignof__(std::ctype<char>))));\n   fake_ctype_c ctype_c;\n+  asm (\".symver _ZN9__gnu_cxx7ctype_cE,_ZSt7ctype_c@@GLIBCPP_3.2\");\n \n   typedef char fake_collate_c[sizeof(std::collate<char>)]\n   __attribute__ ((aligned(__alignof__(std::collate<char>))));\n   fake_collate_c collate_c;\n+  asm (\".symver _ZN9__gnu_cxx9collate_cE,_ZSt9collate_c@@GLIBCPP_3.2\");\n \n   typedef char fake_numpunct_c[sizeof(numpunct<char>)]\n   __attribute__ ((aligned(__alignof__(numpunct<char>))));\n   fake_numpunct_c numpunct_c;\n+  asm (\".symver _ZN9__gnu_cxx10numpunct_cE,_ZSt10numpunct_c@@GLIBCPP_3.2\");\n \n   typedef char fake_num_get_c[sizeof(num_get<char>)]\n   __attribute__ ((aligned(__alignof__(num_get<char>))));\n   fake_num_get_c num_get_c;\n+  asm (\".symver _ZN9__gnu_cxx9num_get_cE,_ZSt9num_get_c@@GLIBCPP_3.2\");\n \n   typedef char fake_num_put_c[sizeof(num_put<char>)]\n   __attribute__ ((aligned(__alignof__(num_put<char>))));\n   fake_num_put_c num_put_c;\n+  asm (\".symver _ZN9__gnu_cxx9num_put_cE,_ZSt9num_put_c@@GLIBCPP_3.2\");\n \n   typedef char fake_codecvt_c[sizeof(codecvt<char, char, mbstate_t>)]\n   __attribute__ ((aligned(__alignof__(codecvt<char, char, mbstate_t>))));\n   fake_codecvt_c codecvt_c;\n+  asm (\".symver _ZN9__gnu_cxx9codecvt_cE,_ZSt9codecvt_c@@GLIBCPP_3.2\");\n \n   typedef char fake_moneypunct_c[sizeof(moneypunct<char, true>)]\n   __attribute__ ((aligned(__alignof__(moneypunct<char, true>))));\n   fake_moneypunct_c moneypunct_tc;\n   fake_moneypunct_c moneypunct_fc;\n+  asm (\".symver _ZN9__gnu_cxx13moneypunct_tcE,\\\n+        _ZSt13moneypunct_tc@@GLIBCPP_3.2\");\n+  asm (\".symver _ZN9__gnu_cxx13moneypunct_fcE,\\\n+        _ZSt13moneypunct_fc@@GLIBCPP_3.2\");\n \n   typedef char fake_money_get_c[sizeof(money_get<char>)]\n   __attribute__ ((aligned(__alignof__(money_get<char>))));\n   fake_money_get_c money_get_c;\n+  asm (\".symver _ZN9__gnu_cxx11money_get_cE,_ZSt11money_get_c@@GLIBCPP_3.2\");\n   \n   typedef char fake_money_put_c[sizeof(money_put<char>)]\n   __attribute__ ((aligned(__alignof__(money_put<char>))));\n   fake_money_put_c money_put_c;\n+  asm (\".symver _ZN9__gnu_cxx11money_put_cE,_ZSt11money_put_c@@GLIBCPP_3.2\");\n \n   typedef char fake_timepunct_c[sizeof(__timepunct<char>)]\n   __attribute__ ((aligned(__alignof__(__timepunct<char>))));\n   fake_timepunct_c timepunct_c;\n+  asm (\".symver _ZN9__gnu_cxx11timepunct_cE,_ZSt11timepunct_c@@GLIBCPP_3.2\");\n \n   typedef char fake_time_get_c[sizeof(time_get<char>)]\n   __attribute__ ((aligned(__alignof__(time_get<char>))));\n   fake_time_get_c time_get_c;\n+  asm (\".symver _ZN9__gnu_cxx10time_get_cE,_ZSt10time_get_c@@GLIBCPP_3.2\");\n \n   typedef char fake_time_put_c[sizeof(time_put<char>)]\n   __attribute__ ((aligned(__alignof__(time_put<char>))));\n   fake_time_put_c time_put_c;\n+  asm (\".symver _ZN9__gnu_cxx10time_put_cE,_ZSt10time_put_c@@GLIBCPP_3.2\");\n \n   typedef char fake_messages_c[sizeof(messages<char>)]\n   __attribute__ ((aligned(__alignof__(messages<char>))));\n   fake_messages_c messages_c;\n+  asm (\".symver _ZN9__gnu_cxx10messages_cE,_ZSt10messages_c@@GLIBCPP_3.2\");\n \n #ifdef  _GLIBCPP_USE_WCHAR_T\n   typedef char fake_wtype_w[sizeof(std::ctype<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(std::ctype<wchar_t>))));\n   fake_wtype_w ctype_w;\n+  asm (\".symver _ZN9__gnu_cxx7ctype_wE,_ZSt7ctype_w@@GLIBCPP_3.2\");\n \n   typedef char fake_wollate_w[sizeof(std::collate<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(std::collate<wchar_t>))));\n   fake_wollate_w collate_w;\n+  asm (\".symver _ZN9__gnu_cxx9collate_wE,_ZSt9collate_w@@GLIBCPP_3.2\");\n \n   typedef char fake_numpunct_w[sizeof(numpunct<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(numpunct<wchar_t>))));\n   fake_numpunct_w numpunct_w;\n+  asm (\".symver _ZN9__gnu_cxx10numpunct_wE,_ZSt10numpunct_w@@GLIBCPP_3.2\");\n \n   typedef char fake_num_get_w[sizeof(num_get<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(num_get<wchar_t>))));\n   fake_num_get_w num_get_w;\n+  asm (\".symver _ZN9__gnu_cxx9num_get_wE,_ZSt9num_get_w@@GLIBCPP_3.2\");\n \n   typedef char fake_num_put_w[sizeof(num_put<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(num_put<wchar_t>))));\n   fake_num_put_w num_put_w;\n+  asm (\".symver _ZN9__gnu_cxx9num_put_wE,_ZSt9num_put_w@@GLIBCPP_3.2\");\n \n   typedef char fake_wodecvt_w[sizeof(codecvt<wchar_t, char, mbstate_t>)]\n   __attribute__ ((aligned(__alignof__(codecvt<wchar_t, char, mbstate_t>))));\n   fake_wodecvt_w codecvt_w;\n+  asm (\".symver _ZN9__gnu_cxx9codecvt_wE,_ZSt9codecvt_w@@GLIBCPP_3.2\");\n \n   typedef char fake_moneypunct_w[sizeof(moneypunct<wchar_t, true>)]\n   __attribute__ ((aligned(__alignof__(moneypunct<wchar_t, true>))));\n   fake_moneypunct_w moneypunct_tw;\n   fake_moneypunct_w moneypunct_fw;\n+  asm (\".symver _ZN9__gnu_cxx13moneypunct_twE,\\\n+        _ZSt13moneypunct_tw@@GLIBCPP_3.2\");\n+  asm (\".symver _ZN9__gnu_cxx13moneypunct_fwE,\\\n+        _ZSt13moneypunct_fw@@GLIBCPP_3.2\");\n \n   typedef char fake_money_get_w[sizeof(money_get<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(money_get<wchar_t>))));\n   fake_money_get_w money_get_w;\n+  asm (\".symver _ZN9__gnu_cxx11money_get_wE,_ZSt11money_get_w@@GLIBCPP_3.2\");\n   \n   typedef char fake_money_put_w[sizeof(money_put<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(money_put<wchar_t>))));\n   fake_money_put_w money_put_w;\n+  asm (\".symver _ZN9__gnu_cxx11money_put_wE,_ZSt11money_put_w@@GLIBCPP_3.2\");\n \n   typedef char fake_timepunct_w[sizeof(__timepunct<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(__timepunct<wchar_t>))));\n   fake_timepunct_w timepunct_w;\n+  asm (\".symver _ZN9__gnu_cxx11timepunct_wE,_ZSt11timepunct_w@@GLIBCPP_3.2\");\n \n   typedef char fake_time_get_w[sizeof(time_get<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(time_get<wchar_t>))));\n   fake_time_get_w time_get_w;\n+  asm (\".symver _ZN9__gnu_cxx10time_get_wE,_ZSt10time_get_w@@GLIBCPP_3.2\");\n \n   typedef char fake_time_put_w[sizeof(time_put<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(time_put<wchar_t>))));\n   fake_time_put_w time_put_w;\n+  asm (\".symver _ZN9__gnu_cxx10time_put_wE,_ZSt10time_put_w@@GLIBCPP_3.2\");\n \n   typedef char fake_messages_w[sizeof(messages<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(messages<wchar_t>))));\n   fake_messages_w messages_w;\n+  asm (\".symver _ZN9__gnu_cxx10messages_wE,_ZSt10messages_w@@GLIBCPP_3.2\");\n #endif\n \n-  // Standard stream objects.\n-  typedef char fake_istream[sizeof(istream)]\n-  __attribute__ ((aligned(__alignof__(istream))));\n-  typedef char fake_ostream[sizeof(ostream)] \n-  __attribute__ ((aligned(__alignof__(ostream))));\n-  fake_istream cin;\n-  fake_ostream cout;\n-  fake_ostream cerr;\n-  fake_ostream clog;\n-\n-  typedef char fake_filebuf[sizeof(__gnu_cxx::stdio_filebuf<char>)]\n-  __attribute__ ((aligned(__alignof__(__gnu_cxx::stdio_filebuf<char>))));\n+  typedef char fake_filebuf[sizeof(stdio_filebuf<char>)]\n+  __attribute__ ((aligned(__alignof__(stdio_filebuf<char>))));\n   fake_filebuf buf_cout;\n   fake_filebuf buf_cin;\n   fake_filebuf buf_cerr;\n+  asm (\".symver _ZN9__gnu_cxx8buf_coutE,_ZSt8buf_cout@@GLIBCPP_3.2\");\n+  asm (\".symver _ZN9__gnu_cxx7buf_cinE,_ZSt7buf_cin@@GLIBCPP_3.2\");\n+  asm (\".symver _ZN9__gnu_cxx8buf_cerrE,_ZSt8buf_cerr@@GLIBCPP_3.2\");\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n-  typedef char fake_wistream[sizeof(wistream)] \n-  __attribute__ ((aligned(__alignof__(wistream))));\n-  typedef char fake_wostream[sizeof(wostream)] \n-  __attribute__ ((aligned(__alignof__(wostream))));\n-  fake_wistream wcin;\n-  fake_wostream wcout;\n-  fake_wostream wcerr;\n-  fake_wostream wclog;\n-\n-  typedef char fake_wfilebuf[sizeof(__gnu_cxx::stdio_filebuf<wchar_t>)]\n-  __attribute__ ((aligned(__alignof__(__gnu_cxx::stdio_filebuf<wchar_t>))));\n+  typedef char fake_wfilebuf[sizeof(stdio_filebuf<wchar_t>)]\n+  __attribute__ ((aligned(__alignof__(stdio_filebuf<wchar_t>))));\n   fake_wfilebuf buf_wcout;\n   fake_wfilebuf buf_wcin;\n   fake_wfilebuf buf_wcerr;\n+  asm (\".symver _ZN9__gnu_cxx9buf_wcoutE,_ZSt9buf_wcout@@GLIBCPP_3.2\");\n+  asm (\".symver _ZN9__gnu_cxx8buf_wcinE,_ZSt8buf_wcin@@GLIBCPP_3.2\");\n+  asm (\".symver _ZN9__gnu_cxx9buf_wcerrE,_ZSt9buf_wcerr@@GLIBCPP_3.2\");\n #endif\n \n   // Globals for once-only runtime initialization of mutex objects.  This\n@@ -226,4 +257,28 @@ namespace std\n   _GLIBCPP_mutex_address_init ()\n   { __GTHREAD_MUTEX_INIT_FUNCTION (_GLIBCPP_mutex_address); }\n #endif\n-}\n+} // namespace __gnu_cxx\n+\n+namespace std\n+{\n+  // Standard stream objects.\n+  typedef char fake_istream[sizeof(istream)]\n+  __attribute__ ((aligned(__alignof__(istream))));\n+  typedef char fake_ostream[sizeof(ostream)] \n+  __attribute__ ((aligned(__alignof__(ostream))));\n+  fake_istream cin;\n+  fake_ostream cout;\n+  fake_ostream cerr;\n+  fake_ostream clog;\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  typedef char fake_wistream[sizeof(wistream)] \n+  __attribute__ ((aligned(__alignof__(wistream))));\n+  typedef char fake_wostream[sizeof(wostream)] \n+  __attribute__ ((aligned(__alignof__(wostream))));\n+  fake_wistream wcin;\n+  fake_wostream wcout;\n+  fake_wostream wcerr;\n+  fake_wostream wclog;\n+#endif\n+} // namespace std"}, {"sha": "7bfdc5b4bb4095cbb03e88f20e4b69527dce569c", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7817e1db2b3b314507787b957afce31a56e7d13/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7817e1db2b3b314507787b957afce31a56e7d13/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=a7817e1db2b3b314507787b957afce31a56e7d13", "patch": "@@ -39,28 +39,34 @@\n #include <bits/atomicity.h>\n #include <ext/stdio_filebuf.h>\n \n-namespace std \n+namespace __gnu_cxx\n {\n   // Extern declarations for global objects in src/globals.cc.\n+  extern stdio_filebuf<char> buf_cout;\n+  extern stdio_filebuf<char> buf_cin;\n+  extern stdio_filebuf<char> buf_cerr;\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  extern stdio_filebuf<wchar_t> buf_wcout;\n+  extern stdio_filebuf<wchar_t> buf_wcin;\n+  extern stdio_filebuf<wchar_t> buf_wcerr;\n+#endif\n+} // namespace __gnu_cxx\n+\n+namespace std \n+{\n+  using namespace __gnu_cxx;\n+  \n   extern istream cin;\n   extern ostream cout;\n   extern ostream cerr;\n   extern ostream clog;\n \n-  using __gnu_cxx::stdio_filebuf;\n-  extern stdio_filebuf<char> buf_cout;\n-  extern stdio_filebuf<char> buf_cin;\n-  extern stdio_filebuf<char> buf_cerr;\n-\n #ifdef _GLIBCPP_USE_WCHAR_T\n   extern wistream wcin;\n   extern wostream wcout;\n   extern wostream wcerr;\n   extern wostream wclog;\n-\n-  extern stdio_filebuf<wchar_t> buf_wcout;\n-  extern stdio_filebuf<wchar_t> buf_wcin;\n-  extern stdio_filebuf<wchar_t> buf_wcerr;\n #endif\n \n   // Definitions for static const data members of __ios_flags."}, {"sha": "f858a327cd12f0ac825b6ee2d3a45363af3c190d", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7817e1db2b3b314507787b957afce31a56e7d13/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7817e1db2b3b314507787b957afce31a56e7d13/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=a7817e1db2b3b314507787b957afce31a56e7d13", "patch": "@@ -34,11 +34,16 @@\n #include <locale>\n #include <bits/atomicity.h>\n \n-namespace std \n+namespace __gnu_cxx\n {\n   // Defined in globals.cc.\n-  extern locale \t\tc_locale;\n-  extern locale::_Impl \t\tc_locale_impl;\n+  extern std::locale \t\tc_locale;\n+  extern std::locale::_Impl \tc_locale_impl;\n+} // namespace __gnu_cxx\n+\n+namespace std \n+{\n+  using namespace __gnu_cxx;\n \n   // Definitions for static const data members of locale.\n   const locale::category \tlocale::none;\n@@ -50,9 +55,15 @@ namespace std\n   const locale::category \tlocale::messages;\n   const locale::category \tlocale::all;\n \n+  // In the future, GLIBCXX_ABI > 5 should remove all asm directives\n+  // in this file, and remove exports of any static data members of locale.\n   locale::_Impl* \t\tlocale::_S_classic;\n+\n   locale::_Impl* \t\tlocale::_S_global; \n+\n   const size_t \t\t\tlocale::_S_categories_size;\n+  asm (\".symver _ZNSt6locale18_S_categories_sizeE,_ZNSt6locale17_S_num_categoriesE@@GLIBCPP_3.2\");\n+\n   const size_t \t\t\tlocale::_S_extra_categories_size;\n \n   // Definitions for static const data members of locale::id"}, {"sha": "0a2c5210215f6714531d956de469ec4adbfd3cdd", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7817e1db2b3b314507787b957afce31a56e7d13/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7817e1db2b3b314507787b957afce31a56e7d13/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=a7817e1db2b3b314507787b957afce31a56e7d13", "patch": "@@ -30,8 +30,10 @@\n #include <cstring>\n #include <locale>\n \n-namespace std\n+namespace __gnu_cxx\n {\n+  using namespace std;\n+\n   // Defined in globals.cc.\n   extern locale::facet** facet_vec;\n   extern char* facet_name[6 + _GLIBCPP_NUM_CATEGORIES];\n@@ -66,6 +68,11 @@ namespace std\n   extern time_put<wchar_t> \t\t\ttime_put_w;\n   extern std::messages<wchar_t> \t\tmessages_w;\n #endif\n+} // namespace __gnu_cxx\n+\n+namespace std\n+{\n+  using namespace __gnu_cxx;\n \n   locale::_Impl::\n   ~_Impl() throw()"}]}