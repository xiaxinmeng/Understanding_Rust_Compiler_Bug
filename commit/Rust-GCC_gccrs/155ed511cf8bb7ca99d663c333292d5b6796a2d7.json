{"sha": "155ed511cf8bb7ca99d663c333292d5b6796a2d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU1ZWQ1MTFjZjhiYjdjYTk5ZDY2M2MzMzMyOTJkNWI2Nzk2YTJkNw==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2019-01-09T21:44:56Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2019-01-09T21:44:56Z"}, "message": "PR other/16615 [4/5]\n\n2019-01-09  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tPR other/16615 [4/5]\n\n\tgcc/\n\t* config/pa/pa.c: Change \"can not\" to \"cannot\".\n\t* gimple-ssa-evrp-analyze.c: Likewise.\n\t* ipa-icf.c: Likewise.\n\t* ipa-polymorphic-call.c: Likewise.\n\t* ipa-pure-const.c: Likewise.\n\t* lra-constraints.c: Likewise.\n\t* lra-remat.c: Likewise.\n\t* reload1.c: Likewise.\n\t* reorg.c: Likewise.\n\t* tree-ssa-uninit.c: Likewise.\n\n\tgcc/ada/\n\t* exp_ch11.adb: Change \"can not\" to \"cannot\".\n\t* sem_ch4.adb: Likewise.\n\n\tgcc/fortran/\n\t* expr.c: Change \"can not\" to \"cannot\".\n\n\tlibobjc/\n\t* objc/runtime.h: Change \"can not\" to \"cannot\".\n\nFrom-SVN: r267786", "tree": {"sha": "fc58aefeb5d946589ce39d0614ebb28a8e7e1cff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc58aefeb5d946589ce39d0614ebb28a8e7e1cff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/155ed511cf8bb7ca99d663c333292d5b6796a2d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/155ed511cf8bb7ca99d663c333292d5b6796a2d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/155ed511cf8bb7ca99d663c333292d5b6796a2d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/155ed511cf8bb7ca99d663c333292d5b6796a2d7/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/430002e1d97ca7b02d6c9baa1378bdda4fbf7527"}], "stats": {"total": 103, "additions": 70, "deletions": 33}, "files": [{"sha": "e04c52a0133163b936dd9d83693a607a6de2305c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=155ed511cf8bb7ca99d663c333292d5b6796a2d7", "patch": "@@ -1,3 +1,18 @@\n+2019-01-09  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR other/16615\n+\n+\t* config/pa/pa.c: Change \"can not\" to \"cannot\".\n+\t* gimple-ssa-evrp-analyze.c: Likewise.\n+\t* ipa-icf.c: Likewise.\n+\t* ipa-polymorphic-call.c: Likewise.\n+\t* ipa-pure-const.c: Likewise.\n+\t* lra-constraints.c: Likewise.\n+\t* lra-remat.c: Likewise.\n+\t* reload1.c: Likewise.\n+\t* reorg.c: Likewise.\n+\t* tree-ssa-uninit.c: Likewise.\n+\n 2019-01-09  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR other/16615"}, {"sha": "d4d7eb27a5e71744e5cf59650837cbfdfe5ade2c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=155ed511cf8bb7ca99d663c333292d5b6796a2d7", "patch": "@@ -1,3 +1,10 @@\n+2019-01-09  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR other/16615\n+\n+\t* exp_ch11.adb: Change \"can not\" to \"cannot\".\n+\t* sem_ch4.adb: Likewise.\n+\n 2019-01-09  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR other/16615"}, {"sha": "7296e6f11089759c8a1cbb6008508b9de4880ef6", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=155ed511cf8bb7ca99d663c333292d5b6796a2d7", "patch": "@@ -63,9 +63,10 @@ package body Exp_Ch11 is\n    --  N is the node on which the warning is placed.\n \n    procedure Warn_If_No_Propagation (N : Node_Id);\n-   --  Called for an exception raise that is not a local raise (and thus can\n-   --  not be optimized to a goto). Issues warning if No_Exception_Propagation\n-   --  restriction is set. N is the node for the raise or equivalent call.\n+   --  Called for an exception raise that is not a local raise (and thus\n+   --  cannot be optimized to a goto). Issues warning if\n+   --  No_Exception_Propagation restriction is set.\n+   --  N is the node for the raise or equivalent call.\n \n    ---------------------------\n    -- Expand_At_End_Handler --"}, {"sha": "2c40011781decfd7b96358fef77625fc3d53d75b", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=155ed511cf8bb7ca99d663c333292d5b6796a2d7", "patch": "@@ -1908,8 +1908,8 @@ package body Sem_Ch4 is\n          while Present (Op_Id) loop\n             if Ekind (Op_Id) = E_Operator then\n \n-               --  Do not consider operators declared in dead code, they can\n-               --  not be part of the resolution.\n+               --  Do not consider operators declared in dead code, they\n+               --  cannot be part of the resolution.\n \n                if Is_Eliminated (Op_Id) then\n                   null;"}, {"sha": "5b83031c5ad43e583d148623683251f7774fff95", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=155ed511cf8bb7ca99d663c333292d5b6796a2d7", "patch": "@@ -1135,8 +1135,8 @@ hppa_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n       /* If the newoffset will not fit in 14 bits (ldo), then\n \t handling this would take 4 or 5 instructions (2 to load\n \t the SYMBOL_REF + 1 or 2 to load the newoffset + 1 to\n-\t add the new offset and the SYMBOL_REF.)  Combine can\n-\t not handle 4->2 or 5->2 combinations, so do not create\n+\t add the new offset and the SYMBOL_REF.)  Combine cannot\n+\t handle 4->2 or 5->2 combinations, so do not create\n \t them.  */\n       if (! VAL_14_BITS_P (newoffset)\n \t  && GET_CODE (XEXP (x, 0)) == SYMBOL_REF)\n@@ -9835,8 +9835,8 @@ pa_som_tm_clone_table_section (void)\n \n /* On hpux10, the linker will give an error if we have a reference\n    in the read-only data section to a symbol defined in a shared\n-   library.  Therefore, expressions that might require a reloc can\n-   not be placed in the read-only data section.  */\n+   library.  Therefore, expressions that might require a reloc\n+   cannot be placed in the read-only data section.  */\n \n static section *\n pa_select_section (tree exp, int reloc,"}, {"sha": "9a030c81656e88023f2c1c2141a0ac495637d4f4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=155ed511cf8bb7ca99d663c333292d5b6796a2d7", "patch": "@@ -1,3 +1,9 @@\n+2019-01-09  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR other/16615\n+\n+\t* expr.c: Change \"can not\" to \"cannot\".\n+\n 2019-01-09  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR other/16615"}, {"sha": "965214b0b2e4f36fde7a1af9d453e0fd0d81f1d5", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=155ed511cf8bb7ca99d663c333292d5b6796a2d7", "patch": "@@ -6060,12 +6060,14 @@ gfc_check_vardef_context (gfc_expr* e, bool pointer, bool alloc_obj,\n \t  if (context)\n \t    {\n \t      if (assoc->target->expr_type == EXPR_VARIABLE)\n-\t\tgfc_error (\"%qs at %L associated to vector-indexed target can\"\n-\t\t\t   \" not be used in a variable definition context (%s)\",\n+\t\tgfc_error (\"%qs at %L associated to vector-indexed target\"\n+\t\t\t   \" cannot be used in a variable definition\"\n+\t\t\t   \" context (%s)\",\n \t\t\t   name, &e->where, context);\n \t      else\n-\t\tgfc_error (\"%qs at %L associated to expression can\"\n-\t\t\t   \" not be used in a variable definition context (%s)\",\n+\t\tgfc_error (\"%qs at %L associated to expression\"\n+\t\t\t   \" cannot be used in a variable definition\"\n+\t\t\t   \" context (%s)\",\n \t\t\t   name, &e->where, context);\n \t    }\n \t  return false;"}, {"sha": "bb4e2d6e79831b7ae7ce130c845b6653f1842705", "filename": "gcc/gimple-ssa-evrp-analyze.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Fgimple-ssa-evrp-analyze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Fgimple-ssa-evrp-analyze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp-analyze.c?ref=155ed511cf8bb7ca99d663c333292d5b6796a2d7", "patch": "@@ -319,8 +319,8 @@ evrp_range_analyzer::record_ranges_from_stmt (gimple *stmt, bool temporary)\n \t    }\n \t  else\n \t    {\n-\t      /* We're going to need to unwind this range.  We can\n-\t\t not use VR as that's a stack object.  We have to allocate\n+\t      /* We're going to need to unwind this range.  We cannot\n+\t\t use VR as that's a stack object.  We have to allocate\n \t\t a new range and push the old range onto the stack.  We\n \t\t also have to be very careful about sharing the underlying\n \t\t bitmaps.  Ugh.  */"}, {"sha": "849e9b4e9f5b84ff64f5f635c01f49092b9eaecd", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=155ed511cf8bb7ca99d663c333292d5b6796a2d7", "patch": "@@ -1160,8 +1160,8 @@ sem_function::merge (sem_item *alias_item)\n \t\t     \"profitable (function is too small).\\n\");\n \t}\n       /* If user paid attention to mark function noinline, assume it is\n-\t somewhat special and do not try to turn it into a wrapper that can\n-\t not be undone by inliner.  */\n+\t somewhat special and do not try to turn it into a wrapper that\n+\t cannot be undone by inliner.  */\n       else if (lookup_attribute (\"noinline\", DECL_ATTRIBUTES (alias->decl)))\n \t{\n \t  if (dump_file)"}, {"sha": "b93bf5561ae0d087038eaf5c200c9867edb2baff", "filename": "gcc/ipa-polymorphic-call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Fipa-polymorphic-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Fipa-polymorphic-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-polymorphic-call.c?ref=155ed511cf8bb7ca99d663c333292d5b6796a2d7", "patch": "@@ -2202,8 +2202,8 @@ ipa_polymorphic_call_context::combine_with (ipa_polymorphic_call_context ctx,\n \t  updated = true;\n \t}\n \n-      /* If we do not know how the context is being used, we can\n-\t not clear MAYBE_IN_CONSTRUCTION because it may be offseted\n+      /* If we do not know how the context is being used, we cannot\n+\t clear MAYBE_IN_CONSTRUCTION because it may be offseted\n \t to other component of OUTER_TYPE later and we know nothing\n \t about it.  */\n       if (otr_type && maybe_in_construction"}, {"sha": "37b58853fe1fb17e5c53cce21062468b7ef709ea", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=155ed511cf8bb7ca99d663c333292d5b6796a2d7", "patch": "@@ -1792,8 +1792,8 @@ propagate_nothrow (void)\n \t\t\t\t   function_or_virtual_thunk_symbol (&avail,\n \t\t\t\t\t\t\t\t     e->caller);\n \n-\t\t  /* We can use info about the callee only if we know it can\n-\t\t     not be interposed.\n+\t\t  /* We can use info about the callee only if we know it\n+\t\t     cannot be interposed.\n \t\t     When callee is compiled with non-call exceptions we also\n \t\t     must check that the declaration is bound to current\n \t\t     body as other semantically equivalent body may still"}, {"sha": "4f434e5332ff55cbc3ea54cda2b34c71b42e45f9", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=155ed511cf8bb7ca99d663c333292d5b6796a2d7", "patch": "@@ -2647,8 +2647,8 @@ process_alt_operands (int only_alternative)\n \t\t     class which does not have actually enough regs to\n \t\t     hold the value (e.g. x86 AREG for mode requiring\n \t\t     more one general reg).  Therefore we have 2\n-\t\t     conditions to check that the reload pseudo can\n-\t\t     not hold the mode value.  */\n+\t\t     conditions to check that the reload pseudo cannot\n+\t\t     hold the mode value.  */\n \t\t  && (!targetm.hard_regno_mode_ok\n \t\t      (ira_class_hard_regs[this_alternative][0],\n \t\t       GET_MODE (*curr_id->operand_loc[nop])))"}, {"sha": "10838116143e50878ac8c08d3a57997c5ec93ff1", "filename": "gcc/lra-remat.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Flra-remat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Flra-remat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-remat.c?ref=155ed511cf8bb7ca99d663c333292d5b6796a2d7", "patch": "@@ -110,8 +110,8 @@ struct cand\n \n /* Vector containing all candidates.  */\n static vec<cand_t> all_cands;\n-/* Map: insn -> candidate representing it.  It is null if the insn can\n-   not be used for rematerialization.  */\n+/* Map: insn -> candidate representing it.  It is null if the insn cannot\n+   be used for rematerialization.  */\n static cand_t *insn_to_cand;\n /* A secondary map, for candidates that involve two insns, where the\n    second one makes the equivalence.  The candidate must not be used"}, {"sha": "42012e4a6b3989a6c36d6a559976efa45a42d920", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=155ed511cf8bb7ca99d663c333292d5b6796a2d7", "patch": "@@ -4029,8 +4029,8 @@ update_eliminables_and_spill (void)\n \tdid_spill = true;\n \n \t/* Regardless of the state of spills, if we previously had\n-\t   a register that we thought we could eliminate, but now can\n-\t   not eliminate, we must run another pass.\n+\t   a register that we thought we could eliminate, but now\n+\t   cannot eliminate, we must run another pass.\n \n \t   Consider pseudos which have an entry in reg_equiv_* which\n \t   reference an eliminable register.  We must make another pass"}, {"sha": "84128a4fe9e8e9453d8627dc2c4fe138ad338047", "filename": "gcc/reorg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=155ed511cf8bb7ca99d663c333292d5b6796a2d7", "patch": "@@ -1066,8 +1066,8 @@ steal_delay_list_from_target (rtx_insn *insn, rtx condition, rtx_sequence *seq,\n \n      We cannot steal the delay list if one of the instructions in the\n      current delay_list modifies the condition codes and the jump in the\n-     sequence is a conditional jump. We cannot do this because we can\n-     not change the direction of the jump because the condition codes\n+     sequence is a conditional jump. We cannot do this because we cannot\n+     change the direction of the jump because the condition codes\n      will effect the direction of the jump in the sequence.  */\n \n   CLEAR_RESOURCE (&cc_set);"}, {"sha": "55a55a05c96604ed3ca6c6f94e18aba37e3787a1", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155ed511cf8bb7ca99d663c333292d5b6796a2d7/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=155ed511cf8bb7ca99d663c333292d5b6796a2d7", "patch": "@@ -1564,8 +1564,8 @@ is_included_in (pred_chain one_pred, pred_chain_union preds)\n    individual predicate chains (won't be a compile time problem\n    as the chains are pretty short).  When the function returns\n    false, it does not necessarily mean *PREDS1 is not a superset\n-   of *PREDS2, but mean it may not be so since the analysis can\n-   not prove it.  In such cases, false warnings may still be\n+   of *PREDS2, but mean it may not be so since the analysis cannot\n+   prove it.  In such cases, false warnings may still be\n    emitted.  */\n \n static bool"}, {"sha": "f2f6ca57e64a367c21f6e52c44e3b74556d6ce78", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155ed511cf8bb7ca99d663c333292d5b6796a2d7/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155ed511cf8bb7ca99d663c333292d5b6796a2d7/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=155ed511cf8bb7ca99d663c333292d5b6796a2d7", "patch": "@@ -1,3 +1,9 @@\n+2019-01-09  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR other/16615\n+\n+\t* objc/runtime.h: Change \"can not\" to \"cannot\".\n+\n 2019-01-09  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR other/16615"}, {"sha": "dc7d12d248f03ac360030dd24a634082c75c0d6f", "filename": "libobjc/objc/runtime.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/155ed511cf8bb7ca99d663c333292d5b6796a2d7/libobjc%2Fobjc%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/155ed511cf8bb7ca99d663c333292d5b6796a2d7/libobjc%2Fobjc%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fruntime.h?ref=155ed511cf8bb7ca99d663c333292d5b6796a2d7", "patch": "@@ -224,8 +224,8 @@ objc_EXPORT SEL * sel_copyTypedSelectorList (const char *name,\n    This is useful if you have the name of the selector, and would\n    really like to get a selector for it that includes the type\n    encoding.  Unfortunately, if the program contains multiple selector\n-   with the same name but different types, sel_getTypedSelector can\n-   not possibly know which one you need, and so will return NULL.\n+   with the same name but different types, sel_getTypedSelector cannot\n+   possibly know which one you need, and so will return NULL.\n \n    Compatibility Note: the Apple/NeXT runtime has untyped selectors,\n    so it does not have this function, which is specific to the GNU"}]}