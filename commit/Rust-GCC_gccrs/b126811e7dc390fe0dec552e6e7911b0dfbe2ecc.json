{"sha": "b126811e7dc390fe0dec552e6e7911b0dfbe2ecc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEyNjgxMWU3ZGMzOTBmZTBkZWM1NTJlNmU3OTExYjBkZmJlMmVjYw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-08-10T15:08:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-08-10T15:08:14Z"}, "message": "tree.h (can_trust_pointer_alignment): Remove.\n\n2011-08-10  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.h (can_trust_pointer_alignment): Remove.\n\t* builtins.c (can_trust_pointer_alignment): Remove.\n\n\tcp/\n\t* call.c (build_over_call): Call memcpy unconditionally.\n\nFrom-SVN: r177625", "tree": {"sha": "b9a01e3bd62e45f7afb9af8a6261043a32f33a07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9a01e3bd62e45f7afb9af8a6261043a32f33a07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b126811e7dc390fe0dec552e6e7911b0dfbe2ecc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b126811e7dc390fe0dec552e6e7911b0dfbe2ecc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b126811e7dc390fe0dec552e6e7911b0dfbe2ecc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b126811e7dc390fe0dec552e6e7911b0dfbe2ecc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0e3a99ae913c732f015b0dcfecb85d3236cc142f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e3a99ae913c732f015b0dcfecb85d3236cc142f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e3a99ae913c732f015b0dcfecb85d3236cc142f"}], "stats": {"total": 38, "additions": 10, "deletions": 28}, "files": [{"sha": "a727916693fb3c9a286b82b65676583eeac1e61c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b126811e7dc390fe0dec552e6e7911b0dfbe2ecc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b126811e7dc390fe0dec552e6e7911b0dfbe2ecc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b126811e7dc390fe0dec552e6e7911b0dfbe2ecc", "patch": "@@ -1,3 +1,8 @@\n+2011-08-10  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.h (can_trust_pointer_alignment): Remove.\n+\t* builtins.c (can_trust_pointer_alignment): Remove.\n+\n 2011-08-10  Artjoms Sinkarovs <artyom.shinakroff@gmail.com>\n \n \t* c-typeck.c (scalar_to_vector): New function. Try scalar to"}, {"sha": "6c16821c348759028e682961192b38c69e6506dc", "filename": "gcc/builtins.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b126811e7dc390fe0dec552e6e7911b0dfbe2ecc/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b126811e7dc390fe0dec552e6e7911b0dfbe2ecc/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b126811e7dc390fe0dec552e6e7911b0dfbe2ecc", "patch": "@@ -453,16 +453,6 @@ get_object_alignment (tree exp)\n   return align;\n }\n \n-/* Returns true iff we can trust that alignment information has been\n-   calculated properly.  */\n-\n-bool\n-can_trust_pointer_alignment (void)\n-{\n-  /* We rely on TER to compute accurate alignment information.  */\n-  return (optimize && flag_tree_ter);\n-}\n-\n /* Return the alignment in bits of EXP, a pointer valued expression.\n    The alignment returned is, by default, the alignment of the thing that\n    EXP points to.  If it is not a POINTER_TYPE, 0 is returned."}, {"sha": "be846ce52a3c0008c2116db05e071e2b4d6a983f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b126811e7dc390fe0dec552e6e7911b0dfbe2ecc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b126811e7dc390fe0dec552e6e7911b0dfbe2ecc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b126811e7dc390fe0dec552e6e7911b0dfbe2ecc", "patch": "@@ -1,3 +1,7 @@\n+2011-08-10  Richard Guenther  <rguenther@suse.de>\n+\n+\t* call.c (build_over_call): Call memcpy unconditionally.\n+\n 2011-08-08  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/50020"}, {"sha": "4494eccfa39bd42acd25438a7dddfff2a3cf6ce3", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b126811e7dc390fe0dec552e6e7911b0dfbe2ecc/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b126811e7dc390fe0dec552e6e7911b0dfbe2ecc/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=b126811e7dc390fe0dec552e6e7911b0dfbe2ecc", "patch": "@@ -6767,33 +6767,17 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n       else\n \t{\n \t  /* We must only copy the non-tail padding parts.\n-\t     Use __builtin_memcpy for the bitwise copy.\n-\t     FIXME fix 22488 so we can go back to using MODIFY_EXPR\n-\t     instead of an explicit call to memcpy.  */\n-\t\n+\t     Use __builtin_memcpy for the bitwise copy.  */\n \t  tree arg0, arg1, arg2, t;\n-\t  tree test = NULL_TREE;\n \n \t  arg2 = TYPE_SIZE_UNIT (as_base);\n \t  arg1 = arg;\n \t  arg0 = cp_build_addr_expr (to, complain);\n \n-\t  if (!can_trust_pointer_alignment ())\n-\t    {\n-\t      /* If we can't be sure about pointer alignment, a call\n-\t\t to __builtin_memcpy is expanded as a call to memcpy, which\n-\t\t is invalid with identical args.  Otherwise it is\n-\t\t expanded as a block move, which should be safe.  */\n-\t      arg0 = save_expr (arg0);\n-\t      arg1 = save_expr (arg1);\n-\t      test = build2 (EQ_EXPR, boolean_type_node, arg0, arg1);\n-\t    }\n \t  t = implicit_built_in_decls[BUILT_IN_MEMCPY];\n \t  t = build_call_n (t, 3, arg0, arg1, arg2);\n \n \t  t = convert (TREE_TYPE (arg0), t);\n-\t  if (test)\n-\t    t = build3 (COND_EXPR, TREE_TYPE (t), test, arg0, t);\n \t  val = cp_build_indirect_ref (t, RO_NULL, complain);\n           TREE_NO_WARNING (val) = 1;\n \t}"}, {"sha": "c8d292a3d4f7c79aa30b139508c764548495f3b0", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b126811e7dc390fe0dec552e6e7911b0dfbe2ecc/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b126811e7dc390fe0dec552e6e7911b0dfbe2ecc/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b126811e7dc390fe0dec552e6e7911b0dfbe2ecc", "patch": "@@ -5358,7 +5358,6 @@ extern tree build_va_arg_indirect_ref (tree);\n extern tree build_string_literal (int, const char *);\n extern bool validate_arglist (const_tree, ...);\n extern rtx builtin_memset_read_str (void *, HOST_WIDE_INT, enum machine_mode);\n-extern bool can_trust_pointer_alignment (void);\n extern bool is_builtin_name (const char *);\n extern bool is_builtin_fn (tree);\n extern unsigned int get_object_alignment_1 (tree, unsigned HOST_WIDE_INT *);"}]}