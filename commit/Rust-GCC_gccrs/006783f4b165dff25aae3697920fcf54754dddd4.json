{"sha": "006783f4b165dff25aae3697920fcf54754dddd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA2NzgzZjRiMTY1ZGZmMjVhYWUzNjk3OTIwZmNmNTQ3NTRkZGRkNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-13T20:18:54Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-14T00:17:58Z"}, "message": "c++: debug location of variable cleanups [PR88742]\n\nPR49951 complained about the debugger jumping back to the declaration of a\nlocal variable when we run its destructor.  That was fixed in 4.7, but broke\nagain in 4.8.  PR58123 fixed an inconsistency in the behavior, but not the\njumping around.  This patch addresses the issue by setting EXPR_LOCATION on\na cleanup destructor call to the location of the closing brace of the\ncompound-statement, or whatever token ends the scope of the variable.\n\nThe change to cp_parser_compound_statement is so input_location is the }\nrather than the ; of the last substatement.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/88742\n\tPR c++/49951\n\tPR c++/58123\n\t* semantics.c (set_cleanup_locs): New.\n\t(do_poplevel): Call it.\n\t* parser.c (cp_parser_compound_statement): Consume the }\n\tbefore finish_compound_stmt.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/88742\n\t* g++.dg/debug/cleanup1.C: New test.\n\t* c-c++-common/Wimplicit-fallthrough-6.c: Adjust diagnostic line.\n\t* c-c++-common/Wimplicit-fallthrough-7.c: Likewise.\n\t* g++.dg/cpp2a/constexpr-dtor3.C: Likewise.\n\t* g++.dg/ext/constexpr-attr-cleanup1.C: Likewise.\n\t* g++.dg/tm/inherit2.C: Likewise.\n\t* g++.dg/tm/unsafe1.C: Likewise.\n\t* g++.dg/warn/Wimplicit-fallthrough-1.C: Likewise.\n\t* g++.dg/gcov/gcov-2.C: Adjust coverage counts.", "tree": {"sha": "0d473b30518596d5f997103a4f1c01786aee9d3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d473b30518596d5f997103a4f1c01786aee9d3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/006783f4b165dff25aae3697920fcf54754dddd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/006783f4b165dff25aae3697920fcf54754dddd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/006783f4b165dff25aae3697920fcf54754dddd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/006783f4b165dff25aae3697920fcf54754dddd4/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d0d35d518a12ee43c1fbd77df73a66d02305a69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0d35d518a12ee43c1fbd77df73a66d02305a69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d0d35d518a12ee43c1fbd77df73a66d02305a69"}], "stats": {"total": 109, "additions": 85, "deletions": 24}, "files": [{"sha": "aec3aa3587ff09926a259962288d7fa7fb063ab4", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006783f4b165dff25aae3697920fcf54754dddd4/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006783f4b165dff25aae3697920fcf54754dddd4/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=006783f4b165dff25aae3697920fcf54754dddd4", "patch": "@@ -12126,11 +12126,12 @@ cp_parser_compound_statement (cp_parser *parser, tree in_statement_expr,\n   if (function_body)\n     maybe_splice_retval_cleanup (compound_stmt);\n \n-  /* Finish the compound-statement.  */\n-  finish_compound_stmt (compound_stmt);\n   /* Consume the `}'.  */\n   braces.require_close (parser);\n \n+  /* Finish the compound-statement.  */\n+  finish_compound_stmt (compound_stmt);\n+\n   return compound_stmt;\n }\n "}, {"sha": "125772238d3cb7681262c8b096d21e8e5c1479e3", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006783f4b165dff25aae3697920fcf54754dddd4/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006783f4b165dff25aae3697920fcf54754dddd4/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=006783f4b165dff25aae3697920fcf54754dddd4", "patch": "@@ -602,6 +602,22 @@ add_decl_expr (tree decl)\n   add_stmt (r);\n }\n \n+/* Set EXPR_LOCATION of the cleanups of any CLEANUP_STMT in STMTS to LOC.  */\n+\n+static void\n+set_cleanup_locs (tree stmts, location_t loc)\n+{\n+  if (TREE_CODE (stmts) == CLEANUP_STMT)\n+    {\n+      protected_set_expr_location (CLEANUP_EXPR (stmts), loc);\n+      set_cleanup_locs (CLEANUP_BODY (stmts), loc);\n+    }\n+  else if (TREE_CODE (stmts) == STATEMENT_LIST)\n+    for (tree_stmt_iterator i = tsi_start (stmts);\n+\t !tsi_end_p (i); tsi_next (&i))\n+      set_cleanup_locs (tsi_stmt (i), loc);\n+}\n+\n /* Finish a scope.  */\n \n tree\n@@ -614,6 +630,9 @@ do_poplevel (tree stmt_list)\n \n   stmt_list = pop_stmt_list (stmt_list);\n \n+  /* input_location is the last token of the scope, usually a }.  */\n+  set_cleanup_locs (stmt_list, input_location);\n+\n   if (!processing_template_decl)\n     {\n       stmt_list = c_build_bind_expr (input_location, block, stmt_list);"}, {"sha": "9593f670709efa4e878ce77a453a1cd880f06327", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-6.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006783f4b165dff25aae3697920fcf54754dddd4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006783f4b165dff25aae3697920fcf54754dddd4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-6.c?ref=006783f4b165dff25aae3697920fcf54754dddd4", "patch": "@@ -121,8 +121,8 @@ f (int i)\n \tint j = 0;\n \tbar (j);\n \tif (j == 8)\n-\t  return; /* { dg-warning \"statement may fall through\" \"\" { target c++ } } */\n-      }\n+\t  return;\n+      } /* { dg-warning \"statement may fall through\" \"\" { target c++ } } */\n     case 2:\n       bar (99);\n     }\n@@ -151,8 +151,8 @@ f (int i)\n \tif (j == 8)\n \t  bar (1);\n \telse\n-\t  return; /* { dg-warning \"statement may fall through\" \"\" { target c++ } } */\n-      }\n+\t  return;\n+      } /* { dg-warning \"statement may fall through\" \"\" { target c++ } } */\n     case 2:\n       bar (99);\n     }\n@@ -181,8 +181,8 @@ f (int i)\n \tif (j == 8)\n \t  bar (1);\n \telse\n-\t  bar (2); /* { dg-warning \"statement may fall through\" \"\" { target c++ } } */\n-      }\n+\t  bar (2);\n+      } /* { dg-warning \"statement may fall through\" \"\" { target c++ } } */\n     case 2:\n       bar (99);\n     }\n@@ -281,8 +281,8 @@ f (int i)\n     case 1:\n       { /* { dg-warning \"statement may fall through\" \"\" { target c } } */\n \tint j = 9;\n-\tswitch (j); /* { dg-warning \"statement may fall through\" \"\" { target c++ } } */\n-      }\n+\tswitch (j);\n+      } /* { dg-warning \"statement may fall through\" \"\" { target c++ } } */\n     case 2:\n       bar (99);\n     }"}, {"sha": "343b625080727486c38dd84566b50b811b2611a0", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006783f4b165dff25aae3697920fcf54754dddd4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006783f4b165dff25aae3697920fcf54754dddd4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-7.c?ref=006783f4b165dff25aae3697920fcf54754dddd4", "patch": "@@ -22,8 +22,8 @@ f (int i)\n     {\n     case 1:\n       { /* { dg-warning \"statement may fall through\" \"\" { target c } } */\n-\tint a[i]; /* { dg-warning \"statement may fall through\" \"\" { target c++ } } */\n-      }\n+\tint a[i];\n+      } /* { dg-warning \"statement may fall through\" \"\" { target c++ } } */\n     case 2:\n       bar (99);\n     }"}, {"sha": "7700bb7b03658a908365d2aa25bb4cd7d3848f34", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dtor3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006783f4b165dff25aae3697920fcf54754dddd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006783f4b165dff25aae3697920fcf54754dddd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor3.C?ref=006783f4b165dff25aae3697920fcf54754dddd4", "patch": "@@ -149,9 +149,9 @@ constexpr int x3 = f3 ();\n constexpr int\n f4 ()\n {\n-  W7 w13 = 5;\t\t\t// { dg-message \"in 'constexpr' expansion of\" }\n+  W7 w13 = 5;\n   return 0;\n-}\n+}\t\t\t// { dg-message \"in 'constexpr' expansion of\" }\n \n constexpr int x4 = f4 ();\t// { dg-message \"in 'constexpr' expansion of\" }\n "}, {"sha": "ae0515aef7b906f84035b3b60e730fc0b7acfa4a", "filename": "gcc/testsuite/g++.dg/debug/cleanup1.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006783f4b165dff25aae3697920fcf54754dddd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fcleanup1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006783f4b165dff25aae3697920fcf54754dddd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fcleanup1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fcleanup1.C?ref=006783f4b165dff25aae3697920fcf54754dddd4", "patch": "@@ -0,0 +1,41 @@\n+// PR c++/88742\n+// { dg-additional-options -fdump-tree-gimple-lineno }\n+\n+\n+class C {\n+public:\n+  C() {}\n+  ~C() {}\n+  operator int() { return 1; }\n+};\n+\n+int main() {\n+  C a;\n+  C b;\n+  C c;\n+\n+  if (C e = C())\n+    {\n+      if (C d = C())\n+        {\n+        }\n+      else\n+        {\n+          return 42;\n+        } // { dg-final { scan-tree-dump-times \":25:9. C::~C\" 1 \"gimple\" } }\n+    } // { dg-final { scan-tree-dump-times \":26:5. C::~C\" 1 \"gimple\" } }\n+\n+  while (C f = C())\n+    {\n+      break;\n+    } // { dg-final { scan-tree-dump-times \":31:5. C::~C\" 1 \"gimple\" } }\n+\n+  for (C h = C(); C i = C(); )\n+    break; // { dg-final { scan-tree-dump-times \":34:10. C::~C\" 2 \"gimple\" } }\n+\n+  switch (C g = C())\n+    {\n+    default:\n+      break;\n+    } // { dg-final { scan-tree-dump-times \":40:5. C::~C\" 1 \"gimple\" } }\n+} // { dg-final { scan-tree-dump-times \":41:1. C::~C\" 3 \"gimple\" } }"}, {"sha": "ab5fd17e815adbe045bc9c7ce1c745f895221a29", "filename": "gcc/testsuite/g++.dg/ext/constexpr-attr-cleanup1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006783f4b165dff25aae3697920fcf54754dddd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-attr-cleanup1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006783f4b165dff25aae3697920fcf54754dddd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-attr-cleanup1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-attr-cleanup1.C?ref=006783f4b165dff25aae3697920fcf54754dddd4", "patch": "@@ -15,9 +15,9 @@ cleanup2 (int *x)\n constexpr bool\n foo ()\n {\n-  int a __attribute__((cleanup (cleanup))) = 1;\t// { dg-message \"in 'constexpr' expansion of\" }\n+  int a __attribute__((cleanup (cleanup))) = 1;\n   return true;\n-}\n+} // { dg-message \"in 'constexpr' expansion of\" }\n \n constexpr bool\n bar ()"}, {"sha": "2b4cdd844e95c7871ca02c9e2c3d4eb24c5ae41a", "filename": "gcc/testsuite/g++.dg/gcov/gcov-2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006783f4b165dff25aae3697920fcf54754dddd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006783f4b165dff25aae3697920fcf54754dddd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov-2.C?ref=006783f4b165dff25aae3697920fcf54754dddd4", "patch": "@@ -20,9 +20,9 @@ private:\n \n void foo()\n {\n-  C c;\t\t\t\t\t/* count(2) */\n+  C c;\t\t\t\t\t/* count(1) */\n   c.seti (1);\t\t\t\t/* count(1) */\n-}\n+}\t\t\t\t\t/* count(1) */\n \n int main()\n {"}, {"sha": "366f9b30e90927cacbfe3be4e4a0914d7ab05500", "filename": "gcc/testsuite/g++.dg/tm/inherit2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006783f4b165dff25aae3697920fcf54754dddd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Finherit2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006783f4b165dff25aae3697920fcf54754dddd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Finherit2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Finherit2.C?ref=006783f4b165dff25aae3697920fcf54754dddd4", "patch": "@@ -26,8 +26,8 @@ int main()\n     B b; // ok\n     D1 d1; // ok\n     B& b1 = d1;\n-    D2 x; // { dg-error \"\" \"destructor of D2 is not transaction-safe\" }\n+    D2 x;\n     b1.f(); // ok, calls D1::f()\n     delete b2; // undefined behavior: calls unsafe destructor of D2\n-  }\n+  } // { dg-error \"\" \"destructor of D2 is not transaction-safe\" }\n }"}, {"sha": "710fb1a303135d9283291adb257955359be32d53", "filename": "gcc/testsuite/g++.dg/tm/unsafe1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006783f4b165dff25aae3697920fcf54754dddd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Funsafe1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006783f4b165dff25aae3697920fcf54754dddd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Funsafe1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Funsafe1.C?ref=006783f4b165dff25aae3697920fcf54754dddd4", "patch": "@@ -5,8 +5,8 @@ struct S {\n   virtual ~S();\n };\n void f() transaction_safe {\n-  S s;\t\t     // { dg-error \"unsafe\" \"invocation of unsafe destructor\" }\n-}\n+  S s;\n+} // { dg-error \"unsafe\" \"invocation of unsafe destructor\" }\n \n int g(int x) { // is transaction-safe\n   if (x <= 0)"}, {"sha": "b5ebd3daaad914f9b18738dc1d5f5a5f4e44ab5f", "filename": "gcc/testsuite/g++.dg/warn/Wimplicit-fallthrough-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006783f4b165dff25aae3697920fcf54754dddd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWimplicit-fallthrough-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006783f4b165dff25aae3697920fcf54754dddd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWimplicit-fallthrough-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWimplicit-fallthrough-1.C?ref=006783f4b165dff25aae3697920fcf54754dddd4", "patch": "@@ -25,8 +25,8 @@ fn2 ()\n   switch (0) {\n   case 0:\n   {\n-    A b; // { dg-warning \"statement may fall through\" }\n-  }\n+    A b;\n+  } // { dg-warning \"statement may fall through\" }\n   default:\n     a = 0;\n   }"}]}