{"sha": "04dbd891905aafb4186382d5417afeefc9522e67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRkYmQ4OTE5MDVhYWZiNDE4NjM4MmQ1NDE3YWZlZWZjOTUyMmU2Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-06-27T17:42:18Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-06-27T17:42:18Z"}, "message": "stl_algo.h (is_partitioned): Add in C++0x mode.\n\n2008-06-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_algo.h (is_partitioned): Add in C++0x mode.\n\t* include/bits/algorithmfwd.h: Add.\n\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc: Update.\n\t* testsuite/25_algorithms/is_partitioned/1.cc: New.\n\t* testsuite/25_algorithms/is_partitioned/check_type.cc: Likewise.\n\t* testsuite/25_algorithms/is_partitioned/requirements/\n\texplicit_instantiation/2.cc: Likewise.\n\t* testsuite/25_algorithms/is_partitioned/requirements/\n\texplicit_instantiation/pod.cc: Likewise.\n\nFrom-SVN: r137196", "tree": {"sha": "517220c33ec740e6c6b2b7fdeef004e34703439d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/517220c33ec740e6c6b2b7fdeef004e34703439d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04dbd891905aafb4186382d5417afeefc9522e67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04dbd891905aafb4186382d5417afeefc9522e67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04dbd891905aafb4186382d5417afeefc9522e67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04dbd891905aafb4186382d5417afeefc9522e67/comments", "author": null, "committer": null, "parents": [{"sha": "70cf5bc1f101cb34ac6ecc867ea9c10325bb1f4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70cf5bc1f101cb34ac6ecc867ea9c10325bb1f4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70cf5bc1f101cb34ac6ecc867ea9c10325bb1f4d"}], "stats": {"total": 277, "additions": 269, "deletions": 8}, "files": [{"sha": "1531ff3b2d7310009105a9090c4cd7984923ef52", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04dbd891905aafb4186382d5417afeefc9522e67/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04dbd891905aafb4186382d5417afeefc9522e67/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=04dbd891905aafb4186382d5417afeefc9522e67", "patch": "@@ -1,3 +1,15 @@\n+2008-06-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_algo.h (is_partitioned): Add in C++0x mode.\n+\t* include/bits/algorithmfwd.h: Add.\n+\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc: Update.\n+\t* testsuite/25_algorithms/is_partitioned/1.cc: New.\n+\t* testsuite/25_algorithms/is_partitioned/check_type.cc: Likewise.\n+\t* testsuite/25_algorithms/is_partitioned/requirements/\n+\texplicit_instantiation/2.cc: Likewise.\n+\t* testsuite/25_algorithms/is_partitioned/requirements/\n+\texplicit_instantiation/pod.cc: Likewise.\n+\n 2008-06-27  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_numeric.h (iota): Add in C++0x mode."}, {"sha": "4b78983517eca4ee0f24cc51362db3772e43a7d3", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04dbd891905aafb4186382d5417afeefc9522e67/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04dbd891905aafb4186382d5417afeefc9522e67/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=04dbd891905aafb4186382d5417afeefc9522e67", "patch": "@@ -49,6 +49,7 @@\n   inplace_merge\n   is_heap (C++0x)\n   is_heap_until (C++0x)\n+  is_partitioned (C++0x)\n   is_sorted (C++0x)\n   is_sorted_until (C++0x)\n   iter_swap\n@@ -231,6 +232,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     _RAIter \n     is_heap_until(_RAIter, _RAIter, _Compare);\n \n+  template<typename _IIter, typename _Predicate>\n+    bool\n+    is_partitioned(_IIter, _IIter, _Predicate);\n+\n   template<typename _FIter>\n     bool \n     is_sorted(_FIter, _FIter);"}, {"sha": "f0199a439466d4d842935acfbb76308d74e24572", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04dbd891905aafb4186382d5417afeefc9522e67/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04dbd891905aafb4186382d5417afeefc9522e67/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=04dbd891905aafb4186382d5417afeefc9522e67", "patch": "@@ -730,8 +730,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n   /**\n-   *  @brief Checks that a predicate is true for all the elements\n-   *         of a sequence.\n+   *  @brief  Checks that a predicate is true for all the elements\n+   *          of a sequence.\n    *  @param  first   An input iterator.\n    *  @param  last    An input iterator.\n    *  @param  pred    A predicate.\n@@ -746,8 +746,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     { return __last == std::find_if_not(__first, __last, __pred); }\n \n   /**\n-   *  @brief Checks that a predicate is false for all the elements\n-   *         of a sequence.\n+   *  @brief  Checks that a predicate is false for all the elements\n+   *          of a sequence.\n    *  @param  first   An input iterator.\n    *  @param  last    An input iterator.\n    *  @param  pred    A predicate.\n@@ -762,8 +762,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     { return __last == _GLIBCXX_STD_P::find_if(__first, __last, __pred); }\n \n   /**\n-   *  @brief Checks that a predicate is false for at least an element\n-   *         of a sequence.\n+   *  @brief  Checks that a predicate is false for at least an element\n+   *          of a sequence.\n    *  @param  first   An input iterator.\n    *  @param  last    An input iterator.\n    *  @param  pred    A predicate.\n@@ -778,8 +778,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     { return !std::none_of(__first, __last, __pred); }\n \n   /**\n-   *  @brief Find the first element in a sequence for which a\n-   *         predicate is false.\n+   *  @brief  Find the first element in a sequence for which a\n+   *          predicate is false.\n    *  @param  first  An input iterator.\n    *  @param  last   An input iterator.\n    *  @param  pred   A predicate.\n@@ -799,6 +799,24 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return std::__find_if_not(__first, __last, __pred,\n \t\t\t\tstd::__iterator_category(__first));\n     }\n+\n+  /**\n+   *  @brief  Checks whether the sequence is partitioned.\n+   *  @param  first  An input iterator.\n+   *  @param  last   An input iterator.\n+   *  @param  pred   A predicate.\n+   *  @return  True if the range @p [first,last) is partioned by @p pred,\n+   *  i.e. if all elements that satisfy @p pred appear before those that\n+   *  do not.\n+  */\n+  template<typename _InputIterator, typename _Predicate>\n+    inline bool\n+    is_partitioned(_InputIterator __first, _InputIterator __last,\n+\t\t   _Predicate __pred)\n+    {\n+      __first = std::find_if_not(__first, __last, __pred);\n+      return std::none_of(__first, __last, __pred);\n+    }\n #endif\n \n "}, {"sha": "8aa882aa9498bdf494a70d57cca505a146374bb1", "filename": "libstdc++-v3/testsuite/25_algorithms/headers/algorithm/synopsis.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04dbd891905aafb4186382d5417afeefc9522e67/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04dbd891905aafb4186382d5417afeefc9522e67/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc?ref=04dbd891905aafb4186382d5417afeefc9522e67", "patch": "@@ -51,6 +51,10 @@ namespace std\n   template<typename _IIter, typename _Predicate>\n     _IIter\n     find_if_not(_IIter, _IIter, _Predicate);\n+\n+  template<typename _IIter, typename _Predicate>\n+    bool\n+    is_partitioned(_IIter, _IIter, _Predicate);\n #endif\n \n   template<typename _FIter1, typename _FIter2>"}, {"sha": "b644cc5313f3d104932ea5749d177262205a8258", "filename": "libstdc++-v3/testsuite/25_algorithms/is_partitioned/1.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04dbd891905aafb4186382d5417afeefc9522e67/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04dbd891905aafb4186382d5417afeefc9522e67/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2F1.cc?ref=04dbd891905aafb4186382d5417afeefc9522e67", "patch": "@@ -0,0 +1,81 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+\n+typedef test_container<int, input_iterator_wrapper> Container;\n+int array[] = {0, 0, 1, 1, 1, 0, 0, 1};\n+\n+bool\n+predicate(const int& i) \n+{ return i == 1; }\n+\n+void\n+test1()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  Container con(array, array);\n+  VERIFY( std::is_partitioned(con.begin(), con.end(), predicate) );\n+}\n+\n+void\n+test2()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  Container con(array, array + 1);\n+  VERIFY( std::is_partitioned(con.begin(), con.end(), predicate) );\n+}\n+\n+void\n+test3()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  Container con(array, array + 8);\n+  VERIFY( !std::is_partitioned(con.begin(), con.end(), predicate) );\n+}\n+\n+void\n+test4()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  Container con(array + 2, array + 7);\n+  VERIFY( std::is_partitioned(con.begin(), con.end(), predicate) );\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  test4();\n+  return 0;\n+}"}, {"sha": "98fa31c8413114126310f9b37bbc45f76b7f8768", "filename": "libstdc++-v3/testsuite/25_algorithms/is_partitioned/check_type.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04dbd891905aafb4186382d5417afeefc9522e67/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04dbd891905aafb4186382d5417afeefc9522e67/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2Fcheck_type.cc?ref=04dbd891905aafb4186382d5417afeefc9522e67", "patch": "@@ -0,0 +1,50 @@\n+// 2008-06-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+struct X { };\n+\n+using __gnu_test::input_iterator_wrapper;\n+\n+bool\n+pred_function(const X&)\n+{ return true; }\n+\n+struct pred_obj\n+{\n+  bool \n+  operator()(const X&)\n+  { return true; }\n+};\n+\n+bool\n+test1(input_iterator_wrapper<X>& begin,\n+      input_iterator_wrapper<X>& end)\n+{ return std::is_partitioned(begin, end, pred_function); }\n+\n+bool\n+test2(input_iterator_wrapper<X>& begin,\n+      input_iterator_wrapper<X>& end)\n+{ return std::is_partitioned(begin, end, pred_obj()); }"}, {"sha": "d717273e9bcfe9f861f68b0478c697daa736bd05", "filename": "libstdc++-v3/testsuite/25_algorithms/is_partitioned/requirements/explicit_instantiation/2.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04dbd891905aafb4186382d5417afeefc9522e67/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04dbd891905aafb4186382d5417afeefc9522e67/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=04dbd891905aafb4186382d5417afeefc9522e67", "patch": "@@ -0,0 +1,46 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_api.h>\n+\n+namespace std\n+{\n+  using __gnu_test::NonDefaultConstructible;\n+\n+  typedef NonDefaultConstructible \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n+\n+  template bool is_partitioned(iterator_type, iterator_type, predicate_type);\n+} "}, {"sha": "be152b3c5694a9216122315178fd8c3dadc58ce8", "filename": "libstdc++-v3/testsuite/25_algorithms/is_partitioned/requirements/explicit_instantiation/pod.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04dbd891905aafb4186382d5417afeefc9522e67/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04dbd891905aafb4186382d5417afeefc9522e67/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=04dbd891905aafb4186382d5417afeefc9522e67", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  using __gnu_test::pod_int;\n+\n+  typedef pod_int \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n+\n+  template bool is_partitioned(iterator_type, iterator_type, predicate_type);\n+} "}]}