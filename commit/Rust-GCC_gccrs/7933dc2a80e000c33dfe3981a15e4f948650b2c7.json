{"sha": "7933dc2a80e000c33dfe3981a15e4f948650b2c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkzM2RjMmE4MGUwMDBjMzNkZmUzOTgxYTE1ZTRmOTQ4NjUwYjJjNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-05-16T18:24:01Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-05-16T18:24:01Z"}, "message": "utility: Simplify the last commit, the whole std::get code is C++0x only.\n\n2011-05-16  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/utility: Simplify the last commit, the whole\n\tstd::get code is C++0x only.\n\nFrom-SVN: r173799", "tree": {"sha": "5ccff8e4a92f878fbb67cc900dc17d732aa28baa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ccff8e4a92f878fbb67cc900dc17d732aa28baa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7933dc2a80e000c33dfe3981a15e4f948650b2c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7933dc2a80e000c33dfe3981a15e4f948650b2c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7933dc2a80e000c33dfe3981a15e4f948650b2c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7933dc2a80e000c33dfe3981a15e4f948650b2c7/comments", "author": null, "committer": null, "parents": [{"sha": "18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18eeaec47bc14ce2a1ffc7011a4f7bdb33bc070c"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "9b99d8b43f55d9bee89c0356bff72c40c0f58e75", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7933dc2a80e000c33dfe3981a15e4f948650b2c7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7933dc2a80e000c33dfe3981a15e4f948650b2c7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7933dc2a80e000c33dfe3981a15e4f948650b2c7", "patch": "@@ -1,3 +1,8 @@\n+2011-05-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/utility: Simplify the last commit, the whole\n+\tstd::get code is C++0x only.\n+\n 2011-05-16  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/utility (get(std::pair<>&&)): Add."}, {"sha": "5c6bd03c0ea7bbb22b21014658033b94ad33df24", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7933dc2a80e000c33dfe3981a15e4f948650b2c7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7933dc2a80e000c33dfe3981a15e4f948650b2c7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=7933dc2a80e000c33dfe3981a15e4f948650b2c7", "patch": "@@ -87,19 +87,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n    // Various functions which give std::pair a tuple-like interface.\n   template<class _Tp1, class _Tp2>\n-    struct tuple_size<std::pair<_Tp1, _Tp2> >\n+    struct tuple_size<std::pair<_Tp1, _Tp2>>\n     { static const std::size_t value = 2; };\n \n   template<class _Tp1, class _Tp2>\n     const std::size_t\n     tuple_size<std::pair<_Tp1, _Tp2> >::value;\n \n   template<class _Tp1, class _Tp2>\n-    struct tuple_element<0, std::pair<_Tp1, _Tp2> >\n+    struct tuple_element<0, std::pair<_Tp1, _Tp2>>\n     { typedef _Tp1 type; };\n  \n   template<class _Tp1, class _Tp2>\n-    struct tuple_element<1, std::pair<_Tp1, _Tp2> >\n+    struct tuple_element<1, std::pair<_Tp1, _Tp2>>\n     { typedef _Tp2 type; };\n \n   template<std::size_t _Int>\n@@ -110,19 +110,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       template<typename _Tp1, typename _Tp2>\n         static _Tp1&\n-        __get(std::pair<_Tp1, _Tp2>& __pair) _GLIBCXX_NOEXCEPT\n+        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept\n         { return __pair.first; }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n       template<typename _Tp1, typename _Tp2>\n         static _Tp1&&\n         __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept\n         { return std::forward<_Tp1>(__pair.first); }\n-#endif\n \n       template<typename _Tp1, typename _Tp2>\n         static const _Tp1&\n-        __const_get(const std::pair<_Tp1, _Tp2>& __pair) _GLIBCXX_NOEXCEPT\n+        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept\n         { return __pair.first; }\n     };\n \n@@ -131,37 +129,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       template<typename _Tp1, typename _Tp2>\n         static _Tp2&\n-        __get(std::pair<_Tp1, _Tp2>& __pair) _GLIBCXX_NOEXCEPT\n+        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept\n         { return __pair.second; }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n       template<typename _Tp1, typename _Tp2>\n         static _Tp2&&\n         __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept\n         { return std::forward<_Tp2>(__pair.second); }\n-#endif\n \n       template<typename _Tp1, typename _Tp2>\n         static const _Tp2&\n-        __const_get(const std::pair<_Tp1, _Tp2>& __pair) _GLIBCXX_NOEXCEPT\n+        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept\n         { return __pair.second; }\n     };\n \n   template<std::size_t _Int, class _Tp1, class _Tp2>\n-    inline typename tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&\n-    get(std::pair<_Tp1, _Tp2>& __in) _GLIBCXX_NOEXCEPT\n+    inline typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&\n+    get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     { return __pair_get<_Int>::__get(__in); }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n   template<std::size_t _Int, class _Tp1, class _Tp2>\n-    inline typename tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\n+    inline typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&\n     get(std::pair<_Tp1, _Tp2>&& __in) noexcept\n     { return __pair_get<_Int>::__move_get(std::move(__in)); }\n-#endif\n \n   template<std::size_t _Int, class _Tp1, class _Tp2>\n-    inline const typename tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&\n-    get(const std::pair<_Tp1, _Tp2>& __in) _GLIBCXX_NOEXCEPT\n+    inline const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&\n+    get(const std::pair<_Tp1, _Tp2>& __in) noexcept\n     { return __pair_get<_Int>::__const_get(__in); }\n \n _GLIBCXX_END_NAMESPACE_VERSION"}]}