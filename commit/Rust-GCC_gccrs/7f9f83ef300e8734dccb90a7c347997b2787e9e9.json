{"sha": "7f9f83ef300e8734dccb90a7c347997b2787e9e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y5ZjgzZWYzMDBlODczNGRjY2I5MGE3YzM0Nzk5N2IyNzg3ZTllOQ==", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-01-29T16:51:44Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-01-29T19:54:41Z"}, "message": "[PR97701] LRA: Don't narrow class only for REG or MEM.\n\nReload pseudos of ALL_REGS class did not narrow class from constraint\nin insn (set (pseudo) (lo_sum ...)) because lo_sum is considered an\nobject (OBJECT_P) although the insn is not a classic move.  To permit\nnarrowing we are starting to use MEM_P and REG_P instead of OBJECT_P.\n\ngcc/ChangeLog:\n\n\tPR target/97701\n\t* lra-constraints.c (in_class_p): Don't narrow class only for REG\n\tor MEM.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/97701\n\t* gcc.target/aarch64/pr97701.c: New.", "tree": {"sha": "55c36a274feef77806287dc0a394bcd0c4bb41a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55c36a274feef77806287dc0a394bcd0c4bb41a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f9f83ef300e8734dccb90a7c347997b2787e9e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f9f83ef300e8734dccb90a7c347997b2787e9e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f9f83ef300e8734dccb90a7c347997b2787e9e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f9f83ef300e8734dccb90a7c347997b2787e9e9/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "726b7aa004d6885388a76521222602b8552a41ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/726b7aa004d6885388a76521222602b8552a41ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/726b7aa004d6885388a76521222602b8552a41ee"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "e739a466a0de94ffefa2922e8409302607e29842", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9f83ef300e8734dccb90a7c347997b2787e9e9/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9f83ef300e8734dccb90a7c347997b2787e9e9/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=7f9f83ef300e8734dccb90a7c347997b2787e9e9", "patch": "@@ -250,6 +250,7 @@ in_class_p (rtx reg, enum reg_class cl, enum reg_class *new_class,\n {\n   enum reg_class rclass, common_class;\n   machine_mode reg_mode;\n+  rtx src;\n   int class_size, hard_regno, nregs, i, j;\n   int regno = REGNO (reg);\n \n@@ -265,6 +266,7 @@ in_class_p (rtx reg, enum reg_class cl, enum reg_class *new_class,\n     }\n   reg_mode = GET_MODE (reg);\n   rclass = get_reg_class (regno);\n+  src = curr_insn_set != NULL ? SET_SRC (curr_insn_set) : NULL;\n   if (regno < new_regno_start\n       /* Do not allow the constraints for reload instructions to\n \t influence the classes of new pseudos.  These reloads are\n@@ -273,12 +275,10 @@ in_class_p (rtx reg, enum reg_class cl, enum reg_class *new_class,\n \t where other reload pseudos are no longer allocatable.  */\n       || (!allow_all_reload_class_changes_p\n \t  && INSN_UID (curr_insn) >= new_insn_uid_start\n-\t  && curr_insn_set != NULL\n-\t  && ((OBJECT_P (SET_SRC (curr_insn_set))\n-\t       && ! CONSTANT_P (SET_SRC (curr_insn_set)))\n-\t      || (GET_CODE (SET_SRC (curr_insn_set)) == SUBREG\n-\t\t  && OBJECT_P (SUBREG_REG (SET_SRC (curr_insn_set)))\n-\t\t  && ! CONSTANT_P (SUBREG_REG (SET_SRC (curr_insn_set)))))))\n+\t  && src != NULL\n+\t  && ((REG_P (src) || MEM_P (src))\n+\t      || (GET_CODE (src) == SUBREG\n+\t\t  && (REG_P (SUBREG_REG (src)) || MEM_P (SUBREG_REG (src)))))))\n     /* When we don't know what class will be used finally for reload\n        pseudos, we use ALL_REGS.  */\n     return ((regno >= new_regno_start && rclass == ALL_REGS)"}, {"sha": "ede3540c48d825464c779b014ac8216f94186f1f", "filename": "gcc/testsuite/gcc.target/aarch64/pr97701.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9f83ef300e8734dccb90a7c347997b2787e9e9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr97701.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9f83ef300e8734dccb90a7c347997b2787e9e9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr97701.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr97701.c?ref=7f9f83ef300e8734dccb90a7c347997b2787e9e9", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+extern char a[][12][18][17][17];\n+extern short b[][12][18][17][17];\n+extern int c[][2][8][7];\n+short *d;\n+void e(signed f, int g, char h, char i, char j) {\n+  for (int k = 648; k; k += f)\n+    for (short l; l < j; l += 9)\n+      for (long m = f + 6LL; m < (h ? h : i); m += 2)\n+        for (int n = 0; n < 16; n += 3LL) {\n+          for (int o = g; o; o++)\n+            a[k][l][m][n][o] = b[k][l][m][n][o] = d[k] ? 2 : 0;\n+          c[k][l][m][0] = 0;\n+        }\n+}"}]}