{"sha": "8c093661a31d1c66b2c9f7783b5836d35605b10c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMwOTM2NjFhMzFkMWM2NmIyYzlmNzc4M2I1ODM2ZDM1NjA1YjEwYw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-08-28T18:32:35Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-08-28T18:32:35Z"}, "message": "stl_algo.h (__heap_select, [...]): New.\n\n2006-08-28  Roger Sayle  <roger@eyesopen.com>\n\t    Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_algo.h (__heap_select, __introselect): New.\n\t(nth_element): New implementation.\n\t(partial_copy): Use __heap_select.\n\t* testsuite/performance/25_algorithms/nth_element_worst_case.cc: New.\n\nCo-Authored-By: Paolo Carlini <pcarlini@suse.de>\n\nFrom-SVN: r116520", "tree": {"sha": "92f27d7d9d5efc33ad159804dbe2d3503cdbda3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92f27d7d9d5efc33ad159804dbe2d3503cdbda3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c093661a31d1c66b2c9f7783b5836d35605b10c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c093661a31d1c66b2c9f7783b5836d35605b10c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c093661a31d1c66b2c9f7783b5836d35605b10c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c093661a31d1c66b2c9f7783b5836d35605b10c/comments", "author": null, "committer": null, "parents": [{"sha": "03a569a38c07e2094cd76fd1e951a3e52c7568fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a569a38c07e2094cd76fd1e951a3e52c7568fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03a569a38c07e2094cd76fd1e951a3e52c7568fa"}], "stats": {"total": 263, "additions": 207, "deletions": 56}, "files": [{"sha": "eedd86e8654421bf8a4d40a36250f01215cdc51d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c093661a31d1c66b2c9f7783b5836d35605b10c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c093661a31d1c66b2c9f7783b5836d35605b10c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8c093661a31d1c66b2c9f7783b5836d35605b10c", "patch": "@@ -1,3 +1,11 @@\n+2006-08-28  Roger Sayle  <roger@eyesopen.com>\n+\t    Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_algo.h (__heap_select, __introselect): New.\n+\t(nth_element): New implementation.\n+\t(partial_copy): Use __heap_select.\n+\t* testsuite/performance/25_algorithms/nth_element_worst_case.cc: New.\n+\n 2006-08-28  Paolo Carlini  <pcarlini@suse.de>\n \t    Roger Sayle  <roger@eyesopen.com>\n "}, {"sha": "04b6154d4b4f62d3f7272036953b344ed8644a3e", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 137, "deletions": 56, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c093661a31d1c66b2c9f7783b5836d35605b10c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c093661a31d1c66b2c9f7783b5836d35605b10c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=8c093661a31d1c66b2c9f7783b5836d35605b10c", "patch": "@@ -2464,7 +2464,47 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @if maint\n-   *  This is a helper function for the sort routine.\n+   *  This is a helper function for the sort routines.\n+   *  @endif\n+  */\n+  template<typename _RandomAccessIterator>\n+    void\n+    __heap_select(_RandomAccessIterator __first,\n+\t\t  _RandomAccessIterator __middle,\n+\t\t  _RandomAccessIterator __last)\n+    {\n+      typedef typename iterator_traits<_RandomAccessIterator>::value_type\n+\t_ValueType;\n+\n+      std::make_heap(__first, __middle);\n+      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)\n+\tif (*__i < *__first)\n+\t  std::__pop_heap(__first, __middle, __i, _ValueType(*__i));\n+    }\n+\n+  /**\n+   *  @if maint\n+   *  This is a helper function for the sort routines.\n+   *  @endif\n+  */\n+  template<typename _RandomAccessIterator, typename _Compare>\n+    void\n+    __heap_select(_RandomAccessIterator __first,\n+\t\t  _RandomAccessIterator __middle,\n+\t\t  _RandomAccessIterator __last, _Compare __comp)\n+    {\n+      typedef typename iterator_traits<_RandomAccessIterator>::value_type\n+\t_ValueType;\n+\n+      std::make_heap(__first, __middle, __comp);\n+      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)\n+\tif (__comp(*__i, *__first))\n+\t  std::__pop_heap(__first, __middle, __i, _ValueType(*__i), __comp);\n+    }\n+\n+  /**\n+   *  @if maint\n+   *  This is a helper function for the sort routines.\n    *  @endif\n   */\n   template<typename _Size>\n@@ -2493,7 +2533,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  the range @p [middle,last) then @p *j<*i and @p *k<*i are both false.\n   */\n   template<typename _RandomAccessIterator>\n-    void\n+    inline void\n     partial_sort(_RandomAccessIterator __first,\n \t\t _RandomAccessIterator __middle,\n \t\t _RandomAccessIterator __last)\n@@ -2508,10 +2548,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __glibcxx_requires_valid_range(__first, __middle);\n       __glibcxx_requires_valid_range(__middle, __last);\n \n-      std::make_heap(__first, __middle);\n-      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)\n-\tif (*__i < *__first)\n-\t  std::__pop_heap(__first, __middle, __i, _ValueType(*__i));\n+      std::__heap_select(__first, __middle, __last);\n       std::sort_heap(__first, __middle);\n     }\n \n@@ -2534,7 +2571,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  are both false.\n   */\n   template<typename _RandomAccessIterator, typename _Compare>\n-    void\n+    inline void\n     partial_sort(_RandomAccessIterator __first,\n \t\t _RandomAccessIterator __middle,\n \t\t _RandomAccessIterator __last,\n@@ -2551,10 +2588,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __glibcxx_requires_valid_range(__first, __middle);\n       __glibcxx_requires_valid_range(__middle, __last);\n \n-      std::make_heap(__first, __middle, __comp);\n-      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)\n-\tif (__comp(*__i, *__first))\n-\t  std::__pop_heap(__first, __middle, __i, _ValueType(*__i), __comp);\n+      std::__heap_select(__first, __middle, __last, __comp);\n       std::sort_heap(__first, __middle, __comp);\n     }\n \n@@ -2792,7 +2826,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       if (__first != __last)\n \t{\n-\t  std::__introsort_loop(__first, __last, __lg(__last - __first) * 2);\n+\t  std::__introsort_loop(__first, __last,\n+\t\t\t\tstd::__lg(__last - __first) * 2);\n \t  std::__final_insertion_sort(__first, __last);\n \t}\n     }\n@@ -2828,8 +2863,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       if (__first != __last)\n \t{\n-\t  std::__introsort_loop(__first, __last, __lg(__last - __first) * 2,\n-\t\t\t\t__comp);\n+\t  std::__introsort_loop(__first, __last,\n+\t\t\t\tstd::__lg(__last - __first) * 2, __comp);\n \t  std::__final_insertion_sort(__first, __last, __comp);\n \t}\n     }\n@@ -3904,6 +3939,79 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t    _DistanceType(__buf.size()), __comp);\n     }\n \n+\n+  template<typename _RandomAccessIterator, typename _Size>\n+    void\n+    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,\n+\t\t  _RandomAccessIterator __last, _Size __depth_limit)\n+    {\n+      typedef typename iterator_traits<_RandomAccessIterator>::value_type\n+\t_ValueType;\n+\n+      while (__last - __first > 3)\n+\t{\n+\t  if (__depth_limit == 0)\n+\t    {\n+\t      std::__heap_select(__first, __nth + 1, __last);\n+\t      // Place the nth largest element in its final position.\n+\t      std::iter_swap(__first, __nth);\n+\t      return;\n+\t    }\n+\t  --__depth_limit;\n+\t  _RandomAccessIterator __cut =\n+\t    std::__unguarded_partition(__first, __last,\n+\t\t\t\t       _ValueType(std::__median(*__first,\n+\t\t\t\t\t\t\t\t*(__first\n+\t\t\t\t\t\t\t\t  + (__last\n+\t\t\t\t\t\t\t\t     - __first)\n+\t\t\t\t\t\t\t\t  / 2),\n+\t\t\t\t\t\t\t\t*(__last\n+\t\t\t\t\t\t\t\t  - 1))));\n+\t  if (__cut <= __nth)\n+\t    __first = __cut;\n+\t  else\n+\t    __last = __cut;\n+\t}\n+      std::__insertion_sort(__first, __last);\n+    }\n+\n+  template<typename _RandomAccessIterator, typename _Size, typename _Compare>\n+    void\n+    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,\n+\t\t  _RandomAccessIterator __last, _Size __depth_limit,\n+\t\t  _Compare __comp)\n+    {\n+      typedef typename iterator_traits<_RandomAccessIterator>::value_type\n+\t_ValueType;\n+\n+      while (__last - __first > 3)\n+\t{\n+\t  if (__depth_limit == 0)\n+\t    {\n+\t      std::__heap_select(__first, __nth + 1, __last, __comp);\n+\t      // Place the nth largest element in its final position.\n+\t      std::iter_swap(__first, __nth);\n+\t      return;\n+\t    }\n+\t  --__depth_limit;\n+\t  _RandomAccessIterator __cut =\n+\t    std::__unguarded_partition(__first, __last,\n+\t\t\t\t       _ValueType(std::__median(*__first,\n+\t\t\t\t\t\t\t\t*(__first\n+\t\t\t\t\t\t\t\t  + (__last\n+\t\t\t\t\t\t\t\t     - __first)\n+\t\t\t\t\t\t\t\t  / 2),\n+\t\t\t\t\t\t\t\t*(__last - 1),\n+\t\t\t\t\t\t\t\t__comp)),\n+\t\t\t\t       __comp);\n+\t  if (__cut <= __nth)\n+\t    __first = __cut;\n+\t  else\n+\t    __last = __cut;\n+\t}\n+      std::__insertion_sort(__first, __last, __comp);\n+    }\n+\n   /**\n    *  @brief Sort a sequence just enough to find a particular position.\n    *  @param  first   An iterator.\n@@ -3920,9 +4028,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  holds that @p *j<*i is false.\n   */\n   template<typename _RandomAccessIterator>\n-    void\n-    nth_element(_RandomAccessIterator __first,\n-\t\t_RandomAccessIterator __nth,\n+    inline void\n+    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,\n \t\t_RandomAccessIterator __last)\n     {\n       typedef typename iterator_traits<_RandomAccessIterator>::value_type\n@@ -3935,23 +4042,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __glibcxx_requires_valid_range(__first, __nth);\n       __glibcxx_requires_valid_range(__nth, __last);\n \n-      while (__last - __first > 3)\n-\t{\n-\t  _RandomAccessIterator __cut =\n-\t    std::__unguarded_partition(__first, __last,\n-\t\t\t\t       _ValueType(std::__median(*__first,\n-\t\t\t\t\t\t\t\t*(__first\n-\t\t\t\t\t\t\t\t  + (__last\n-\t\t\t\t\t\t\t\t     - __first)\n-\t\t\t\t\t\t\t\t  / 2),\n-\t\t\t\t\t\t\t\t*(__last\n-\t\t\t\t\t\t\t\t  - 1))));\n-\t  if (__cut <= __nth)\n-\t    __first = __cut;\n-\t  else\n-\t    __last = __cut;\n-\t}\n-      std::__insertion_sort(__first, __last);\n+      if (__first == __last || __nth == __last)\n+\treturn;\n+\n+      std::__introselect(__first, __nth, __last,\n+\t\t\t std::__lg(__last - __first) * 2);\n     }\n \n   /**\n@@ -3971,11 +4066,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  holds that @p comp(*j,*i) is false.\n   */\n   template<typename _RandomAccessIterator, typename _Compare>\n-    void\n-    nth_element(_RandomAccessIterator __first,\n-\t\t_RandomAccessIterator __nth,\n-\t\t_RandomAccessIterator __last,\n-\t\t\t    _Compare __comp)\n+    inline void\n+    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,\n+\t\t_RandomAccessIterator __last, _Compare __comp)\n     {\n       typedef typename iterator_traits<_RandomAccessIterator>::value_type\n \t_ValueType;\n@@ -3988,23 +4081,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __glibcxx_requires_valid_range(__first, __nth);\n       __glibcxx_requires_valid_range(__nth, __last);\n \n-      while (__last - __first > 3)\n-\t{\n-\t  _RandomAccessIterator __cut =\n-\t    std::__unguarded_partition(__first, __last,\n-\t\t\t\t       _ValueType(std::__median(*__first,\n-\t\t\t\t\t\t\t\t*(__first\n-\t\t\t\t\t\t\t\t  + (__last\n-\t\t\t\t\t\t\t\t     - __first)\n-\t\t\t\t\t\t\t\t  / 2),\n-\t\t\t\t\t\t\t\t*(__last - 1),\n-\t\t\t\t\t\t\t      __comp)), __comp);\n-\t  if (__cut <= __nth)\n-\t    __first = __cut;\n-\t  else\n-\t    __last = __cut;\n-\t}\n-      std::__insertion_sort(__first, __last, __comp);\n+      if (__first == __last || __nth == __last)\n+\treturn;\n+\n+      std::__introselect(__first, __nth, __last,\n+\t\t\t std::__lg(__last - __first) * 2, __comp);\n     }\n \n   /**"}, {"sha": "f287e687bf49c3fe5fe3d3ae91529cf68fb2b881", "filename": "libstdc++-v3/testsuite/performance/25_algorithms/nth_element_worst_case.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c093661a31d1c66b2c9f7783b5836d35605b10c/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F25_algorithms%2Fnth_element_worst_case.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c093661a31d1c66b2c9f7783b5836d35605b10c/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F25_algorithms%2Fnth_element_worst_case.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F25_algorithms%2Fnth_element_worst_case.cc?ref=8c093661a31d1c66b2c9f7783b5836d35605b10c", "patch": "@@ -0,0 +1,62 @@\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <vector>\n+#include <algorithm>\n+#include <testsuite_performance.h>\n+\n+int main()\n+{\n+  using namespace __gnu_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+\n+  const int max_size = 8192;\n+\n+  std::vector<int> v[max_size];\n+\n+  for (int i = 0; i < max_size; ++i)\n+    {\n+      for (int j = 0; j < i; j += 4)\n+\t{\n+\t  v[i].push_back(j / 2);\n+\t  v[i].push_back((i - 2) - (j / 2));\n+\t}\n+\n+      for (int j = 1; j < i; j += 2)\n+\tv[i].push_back(j);\n+    }\n+\n+  start_counters(time, resource);\n+  for (int i = 0; i < max_size; ++i)\n+    std::nth_element(v[i].begin(), v[i].begin() + i, v[i].end());\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"\", time, resource);\n+\n+  return 0;\n+}"}]}