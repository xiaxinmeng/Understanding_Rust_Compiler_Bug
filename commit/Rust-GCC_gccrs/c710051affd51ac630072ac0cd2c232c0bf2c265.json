{"sha": "c710051affd51ac630072ac0cd2c232c0bf2c265", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzcxMDA1MWFmZmQ1MWFjNjMwMDcyYWMwY2QyYzIzMmMwYmYyYzI2NQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-10-23T15:21:51Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-11-10T17:48:07Z"}, "message": "analyzer: remove dead code\n\ngcc/analyzer/ChangeLog:\n\n\t* constraint-manager.cc (constraint_manager::merge): Remove\n\tunused code.\n\t* constraint-manager.h: Likewise.\n\t* program-state.cc (sm_state_map::sm_state_map): Likewise.\n\t(program_state::program_state): Likewise.\n\t(test_sm_state_map): Likewise.\n\t* program-state.h: Likewise.\n\t* region-model-reachability.cc (reachable_regions::reachable_regions): Likewise.\n\t* region-model-reachability.h: Likewise.\n\t* region-model.cc (region_model::handle_unrecognized_call): Likewise.\n\t(region_model::get_reachable_svalues): Likewise.\n\t(region_model::can_merge_with_p): Likewise.", "tree": {"sha": "7b46ad20cae1397cecc8358b1d0123e01a593a46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b46ad20cae1397cecc8358b1d0123e01a593a46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c710051affd51ac630072ac0cd2c232c0bf2c265", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c710051affd51ac630072ac0cd2c232c0bf2c265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c710051affd51ac630072ac0cd2c232c0bf2c265", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c710051affd51ac630072ac0cd2c232c0bf2c265/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e929ef532ad52cde873dfc0849907b020ffc5afd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e929ef532ad52cde873dfc0849907b020ffc5afd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e929ef532ad52cde873dfc0849907b020ffc5afd"}], "stats": {"total": 54, "additions": 23, "deletions": 31}, "files": [{"sha": "590bf322563707aa021b78b22e482a3055d764c1", "filename": "gcc/analyzer/constraint-manager.cc", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c710051affd51ac630072ac0cd2c232c0bf2c265/gcc%2Fanalyzer%2Fconstraint-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c710051affd51ac630072ac0cd2c232c0bf2c265/gcc%2Fanalyzer%2Fconstraint-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fconstraint-manager.cc?ref=c710051affd51ac630072ac0cd2c232c0bf2c265", "patch": "@@ -1790,9 +1790,8 @@ class merger_fact_visitor : public fact_visitor\n {\n public:\n   merger_fact_visitor (const constraint_manager *cm_b,\n-\t\t       constraint_manager *out,\n-\t\t       const model_merger &merger)\n-  : m_cm_b (cm_b), m_out (out), m_merger (merger)\n+\t\t       constraint_manager *out)\n+  : m_cm_b (cm_b), m_out (out)\n   {}\n \n   void on_fact (const svalue *lhs, enum tree_code code, const svalue *rhs)\n@@ -1826,7 +1825,6 @@ class merger_fact_visitor : public fact_visitor\n private:\n   const constraint_manager *m_cm_b;\n   constraint_manager *m_out;\n-  const model_merger &m_merger;\n };\n \n /* Use MERGER to merge CM_A and CM_B into *OUT.\n@@ -1838,14 +1836,13 @@ class merger_fact_visitor : public fact_visitor\n void\n constraint_manager::merge (const constraint_manager &cm_a,\n \t\t\t   const constraint_manager &cm_b,\n-\t\t\t   constraint_manager *out,\n-\t\t\t   const model_merger &merger)\n+\t\t\t   constraint_manager *out)\n {\n   /* Merge the equivalence classes and constraints.\n      The easiest way to do this seems to be to enumerate all of the facts\n      in cm_a, see which are also true in cm_b,\n      and add those to *OUT.  */\n-  merger_fact_visitor v (&cm_b, out, merger);\n+  merger_fact_visitor v (&cm_b, out);\n   cm_a.for_each_fact (&v);\n }\n "}, {"sha": "1142b1f06e60695c44f2533eeb9e2ca0fdb7f7ff", "filename": "gcc/analyzer/constraint-manager.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c710051affd51ac630072ac0cd2c232c0bf2c265/gcc%2Fanalyzer%2Fconstraint-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c710051affd51ac630072ac0cd2c232c0bf2c265/gcc%2Fanalyzer%2Fconstraint-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fconstraint-manager.h?ref=c710051affd51ac630072ac0cd2c232c0bf2c265", "patch": "@@ -274,8 +274,7 @@ class constraint_manager\n \n   static void merge (const constraint_manager &cm_a,\n \t\t     const constraint_manager &cm_b,\n-\t\t     constraint_manager *out,\n-\t\t     const model_merger &merger);\n+\t\t     constraint_manager *out);\n \n   void for_each_fact (fact_visitor *) const;\n "}, {"sha": "5c59c096d0c16d0a5f564e7575ae104eff9f8866", "filename": "gcc/analyzer/program-state.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c710051affd51ac630072ac0cd2c232c0bf2c265/gcc%2Fanalyzer%2Fprogram-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c710051affd51ac630072ac0cd2c232c0bf2c265/gcc%2Fanalyzer%2Fprogram-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.cc?ref=c710051affd51ac630072ac0cd2c232c0bf2c265", "patch": "@@ -154,8 +154,8 @@ sm_state_map::entry_t::cmp (const entry_t &entry_a, const entry_t &entry_b)\n \n /* sm_state_map's ctor.  */\n \n-sm_state_map::sm_state_map (const state_machine &sm, int sm_idx)\n-: m_sm (sm), m_sm_idx (sm_idx), m_map (), m_global_state (sm.get_start_state ())\n+sm_state_map::sm_state_map (const state_machine &sm)\n+: m_sm (sm), m_map (), m_global_state (sm.get_start_state ())\n {\n }\n \n@@ -656,7 +656,7 @@ program_state::program_state (const extrinsic_state &ext_state)\n   const int num_states = ext_state.get_num_checkers ();\n   for (int i = 0; i < num_states; i++)\n     {\n-      sm_state_map *sm = new sm_state_map (ext_state.get_sm (i), i);\n+      sm_state_map *sm = new sm_state_map (ext_state.get_sm (i));\n       m_checker_states.quick_push (sm);\n     }\n }\n@@ -1251,7 +1251,7 @@ test_sm_state_map ()\n     const svalue *y_sval = model.get_rvalue (y, NULL);\n     const svalue *z_sval = model.get_rvalue (z, NULL);\n \n-    sm_state_map map (*sm, 0);\n+    sm_state_map map (*sm);\n     ASSERT_TRUE (map.is_empty_p ());\n     ASSERT_EQ (map.get_state (x_sval, ext_state), start);\n \n@@ -1280,7 +1280,7 @@ test_sm_state_map ()\n     const svalue *y_sval = model.get_rvalue (y, NULL);\n     const svalue *z_sval = model.get_rvalue (z, NULL);\n \n-    sm_state_map map (*sm, 0);\n+    sm_state_map map (*sm);\n     ASSERT_TRUE (map.is_empty_p ());\n     ASSERT_EQ (map.get_state (x_sval, ext_state), start);\n     ASSERT_EQ (map.get_state (y_sval, ext_state), start);\n@@ -1303,9 +1303,9 @@ test_sm_state_map ()\n     const svalue *y_sval = model.get_rvalue (y, NULL);\n     const svalue *z_sval = model.get_rvalue (z, NULL);\n \n-    sm_state_map map0 (*sm, 0);\n-    sm_state_map map1 (*sm, 0);\n-    sm_state_map map2 (*sm, 0);\n+    sm_state_map map0 (*sm);\n+    sm_state_map map1 (*sm);\n+    sm_state_map map2 (*sm);\n \n     ASSERT_EQ (map0.hash (), map1.hash ());\n     ASSERT_EQ (map0, map1);\n@@ -1326,9 +1326,9 @@ test_sm_state_map ()\n     const state_machine::state_t TEST_STATE_2 = &test_state_2;\n     const state_machine::state test_state_3 (\"test state 3\", 3);\n     const state_machine::state_t TEST_STATE_3 = &test_state_3;\n-    sm_state_map map0 (*sm, 0);\n-    sm_state_map map1 (*sm, 0);\n-    sm_state_map map2 (*sm, 0);\n+    sm_state_map map0 (*sm);\n+    sm_state_map map1 (*sm);\n+    sm_state_map map2 (*sm);\n \n     ASSERT_EQ (map0.hash (), map1.hash ());\n     ASSERT_EQ (map0, map1);"}, {"sha": "1532210f6e01d39cdca824e82a91300a1d5c1f65", "filename": "gcc/analyzer/program-state.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c710051affd51ac630072ac0cd2c232c0bf2c265/gcc%2Fanalyzer%2Fprogram-state.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c710051affd51ac630072ac0cd2c232c0bf2c265/gcc%2Fanalyzer%2Fprogram-state.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.h?ref=c710051affd51ac630072ac0cd2c232c0bf2c265", "patch": "@@ -104,7 +104,7 @@ class sm_state_map\n   typedef hash_map <const svalue *, entry_t> map_t;\n   typedef map_t::iterator iterator_t;\n \n-  sm_state_map (const state_machine &sm, int m_sm_idx);\n+  sm_state_map (const state_machine &sm);\n \n   sm_state_map *clone () const;\n \n@@ -168,7 +168,6 @@ class sm_state_map\n \n private:\n   const state_machine &m_sm;\n-  int m_sm_idx;\n   map_t m_map;\n   state_machine::state_t m_global_state;\n };"}, {"sha": "9fc70d29daad94c226fcd4e63e316055ab834e5a", "filename": "gcc/analyzer/region-model-reachability.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c710051affd51ac630072ac0cd2c232c0bf2c265/gcc%2Fanalyzer%2Fregion-model-reachability.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c710051affd51ac630072ac0cd2c232c0bf2c265/gcc%2Fanalyzer%2Fregion-model-reachability.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-reachability.cc?ref=c710051affd51ac630072ac0cd2c232c0bf2c265", "patch": "@@ -58,9 +58,8 @@ along with GCC; see the file COPYING3.  If not see\n \n namespace ana {\n \n-reachable_regions::reachable_regions (region_model *model,\n-\t\t\t\t      region_model_manager *mgr)\n-: m_model (model), m_store (model->get_store ()), m_mgr (mgr),\n+reachable_regions::reachable_regions (region_model *model)\n+: m_model (model), m_store (model->get_store ()),\n   m_reachable_base_regs (), m_mutable_base_regs ()\n {\n }"}, {"sha": "4d30c1fdd1d308c0a4bdc24cfec020f17691f0a7", "filename": "gcc/analyzer/region-model-reachability.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c710051affd51ac630072ac0cd2c232c0bf2c265/gcc%2Fanalyzer%2Fregion-model-reachability.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c710051affd51ac630072ac0cd2c232c0bf2c265/gcc%2Fanalyzer%2Fregion-model-reachability.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-reachability.h?ref=c710051affd51ac630072ac0cd2c232c0bf2c265", "patch": "@@ -35,7 +35,7 @@ namespace ana {\n class reachable_regions\n {\n public:\n-  reachable_regions (region_model *model, region_model_manager *mgr);\n+  reachable_regions (region_model *model);\n \n   /* Callback called for each cluster when initializing this object.  */\n   static void init_cluster_cb (const region *base_reg,\n@@ -97,7 +97,6 @@ class reachable_regions\n private:\n   region_model *m_model;\n   store *m_store;\n-  region_model_manager *m_mgr;\n \n   /* The base regions already seen.  */\n   hash_set<const region *> m_reachable_base_regs;"}, {"sha": "d30047b279d7f9bdb34384b8b7c9f9165d871d88", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c710051affd51ac630072ac0cd2c232c0bf2c265/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c710051affd51ac630072ac0cd2c232c0bf2c265/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=c710051affd51ac630072ac0cd2c232c0bf2c265", "patch": "@@ -836,7 +836,7 @@ region_model::handle_unrecognized_call (const gcall *call,\n {\n   tree fndecl = get_fndecl_for_call (call, ctxt);\n \n-  reachable_regions reachable_regs (this, m_mgr);\n+  reachable_regions reachable_regs (this);\n \n   /* Determine the reachable regions and their mutability.  */\n   {\n@@ -904,7 +904,7 @@ void\n region_model::get_reachable_svalues (svalue_set *out,\n \t\t\t\t     const svalue *extra_sval)\n {\n-  reachable_regions reachable_regs (this, m_mgr);\n+  reachable_regions reachable_regs (this);\n \n   /* Add globals and regions that already escaped in previous\n      unknown calls.  */\n@@ -2857,8 +2857,7 @@ region_model::can_merge_with_p (const region_model &other_model,\n   /* Merge constraints.  */\n   constraint_manager::merge (*m_constraints,\n \t\t\t      *other_model.m_constraints,\n-\t\t\t      out_model->m_constraints,\n-\t\t\t      m);\n+\t\t\t      out_model->m_constraints);\n \n   return true;\n }"}]}