{"sha": "d0ce5baeb642bab57252c687cdf0ffb522e7a2a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBjZTViYWViNjQyYmFiNTcyNTJjNjg3Y2RmMGZmYjUyMmU3YTJhMw==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-04-16T13:17:51Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-04-16T20:28:14Z"}, "message": "coroutines: Back out mandate for tail-calls at O < 2 [PR94359]\n\nFor symmetric transfers to work with C++20 coroutines, it is\ncurrently necessary to tail call the callee coroutine from resume\nmethod of the caller coroutine.  However there are several targets\nwhich don't support an indirect tail call to an arbitrary callee.\n\nUnfortunately, the target 'function_ok_for_sibcall' is not usable\nfrom the front end in all cases.  While it is possible to add a new\nhook to cover this circumstance, it is too late in the release\ncycle to be sure of getting the setting correct for all targets.\n\nSo, this patch backs out the use of function_ok_for_sibcall () and\nthe mandate of CALL_EXPR_MUST_TAIL_CALL from the symmetric\ntransfer.\n\nTargets that can make indirect tail calls to arbitrary callees will\nstill be able to make use of the symmetric transfer (without risking\noverrunning the stack) for optimization levels >= 2.\n\nThe draft standard does not mandate unlimited symmetric transfers,\nso removing this is a QOI issue (albeit an important one) rather\nthan a correctness one.\n\nThe test is moved and adjusted so that it can be opted into by any\ntarget that supports the necessary tailcall.\n\ngcc/cp/ChangeLog:\n\n2020-04-16  Iain Sandoe  <iain@sandoe.co.uk>\n\n\tPR c++/94359\n\t* coroutines.cc (build_actor_fn): Back out use of\n\ttargetm.function_ok_for_sibcall.  Do not mark the resume\n\tcall as CALL_EXPR_MUST_TAIL_CALL.\n\ngcc/testsuite/ChangeLog:\n\n2020-04-16  Iain Sandoe  <iain@sandoe.co.uk>\n\n\tPR c++/94359\n\t* g++.dg/coroutines/torture/symmetric-transfer-00-basic.C: Move..\n\t* g++.dg/coroutines/symmetric-transfer-00-basic.C: ..here and\n\tadjust to run at O2 for targets supporting the necessary tail\n\tcall.", "tree": {"sha": "1ca88acb5496e62386de0fc3ef9a9d5f8cf8b053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ca88acb5496e62386de0fc3ef9a9d5f8cf8b053"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0ce5baeb642bab57252c687cdf0ffb522e7a2a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0ce5baeb642bab57252c687cdf0ffb522e7a2a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0ce5baeb642bab57252c687cdf0ffb522e7a2a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0ce5baeb642bab57252c687cdf0ffb522e7a2a3/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b084efe3fcdfcf88e1703800b9b99347e89beefb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b084efe3fcdfcf88e1703800b9b99347e89beefb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b084efe3fcdfcf88e1703800b9b99347e89beefb"}], "stats": {"total": 29, "additions": 8, "deletions": 21}, "files": [{"sha": "0a8e7521c4f86d00610974dfcd890a9deefafd45", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ce5baeb642bab57252c687cdf0ffb522e7a2a3/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ce5baeb642bab57252c687cdf0ffb522e7a2a3/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=d0ce5baeb642bab57252c687cdf0ffb522e7a2a3", "patch": "@@ -2377,21 +2377,9 @@ build_actor_fn (location_t loc, tree coro_frame_type, tree actor, tree fnbody,\n     (loc, builtin_decl_explicit (BUILT_IN_CORO_RESUME), 1, addr);\n \n   /* In order to support an arbitrary number of coroutine continuations,\n-     we must tail call them.  However, some targets might not support this\n-     for indirect calls, or calls between DSOs.\n-     FIXME: see if there's an alternate strategy for such targets.  */\n-  /* Now we have the actual call, and we can mark it as a tail.  */\n+     we must tail call them.  However, some targets do not support indirect\n+     tail calls to arbitrary callees.  See PR94359.  */\n   CALL_EXPR_TAILCALL (resume) = true;\n-  /* Temporarily, switch cfun so that we can use the target hook.  */\n-  push_struct_function (actor);\n-  if (targetm.function_ok_for_sibcall (NULL_TREE, resume))\n-    {\n-      /* ... and for optimisation levels 0..1, which do not normally tail-\n-\t-call, mark it as requiring a tail-call for correctness.  */\n-      if (optimize < 2)\n-\tCALL_EXPR_MUST_TAIL_CALL (resume) = true;\n-    }\n-  pop_cfun ();\n   resume = coro_build_cvt_void_expr_stmt (resume, loc);\n   add_stmt (resume);\n "}, {"sha": "b78ae20d9d483b5339406a8545846adb7bef06d9", "filename": "gcc/testsuite/g++.dg/coroutines/symmetric-transfer-00-basic.C", "status": "renamed", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ce5baeb642bab57252c687cdf0ffb522e7a2a3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fsymmetric-transfer-00-basic.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ce5baeb642bab57252c687cdf0ffb522e7a2a3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fsymmetric-transfer-00-basic.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fsymmetric-transfer-00-basic.C?ref=d0ce5baeb642bab57252c687cdf0ffb522e7a2a3", "patch": "@@ -1,10 +1,9 @@\n-// { dg-do run }\n-// See PR94359 - some targets are unable to make general indirect tailcalls\n-// for example, between different DSOs.\n-// { dg-xfail-run-if \"\" { hppa*-*-hpux11* } }\n-// { dg-xfail-run-if \"\" { ia64-*-linux-gnu } }\n-// { dg-xfail-run-if \"\" { { lp64 && { powerpc*-linux-gnu } } || { *-*-aix* } } }\n-// { dg-xfail-run-if \"\" { sparc*-*-* } }\n+// See PR94359, we will need either a general solution to this, or at least\n+// some hook for targets to opt in, for now the test will work on targets that\n+// can do the tailcall (which would normally be available for O2+)\n+\n+// { dg-do run { target { i?86-*-linux-gnu x86_64-*-linux-gnu *-*-darwin* } } }\n+// { dg-additional-options \"-O2\" }\n \n #if __has_include(<coroutine>)\n ", "previous_filename": "gcc/testsuite/g++.dg/coroutines/torture/symmetric-transfer-00-basic.C"}]}