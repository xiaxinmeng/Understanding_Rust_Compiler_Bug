{"sha": "1ed591276485161e9ef3f0a513adbfcf4b4e2968", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVkNTkxMjc2NDg1MTYxZTllZjNmMGE1MTNhZGJmY2Y0YjRlMjk2OA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-02-06T00:16:39Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-02-06T00:16:39Z"}, "message": "Daily bump.", "tree": {"sha": "10b827e83dfeb93b000907e8a5d2af7f1ec6e427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10b827e83dfeb93b000907e8a5d2af7f1ec6e427"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ed591276485161e9ef3f0a513adbfcf4b4e2968", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ed591276485161e9ef3f0a513adbfcf4b4e2968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ed591276485161e9ef3f0a513adbfcf4b4e2968", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ed591276485161e9ef3f0a513adbfcf4b4e2968/comments", "author": null, "committer": null, "parents": [{"sha": "a1265ee47800550ac4c7c6b7d3924431ad545449", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1265ee47800550ac4c7c6b7d3924431ad545449", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1265ee47800550ac4c7c6b7d3924431ad545449"}], "stats": {"total": 177, "additions": 176, "deletions": 1}, "files": [{"sha": "036394685afa2edeae08ba4d456e2cb67b37b53b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed591276485161e9ef3f0a513adbfcf4b4e2968/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed591276485161e9ef3f0a513adbfcf4b4e2968/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ed591276485161e9ef3f0a513adbfcf4b4e2968", "patch": "@@ -1,3 +1,104 @@\n+2021-02-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR driver/98943\n+\t* gcc.c (driver::maybe_run_linker): Check for input file\n+\taccessibility if not linking.\n+\n+2021-02-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98855\n+\t* tree-vectorizer.h (add_stmt_cost): New overload.\n+\t* tree-vect-slp.c (li_cost_vec_cmp): New.\n+\t(vect_bb_slp_scalar_cost): Cost individual loop regions\n+\tseparately.  Account for the scalar instance root stmt.\n+\n+2021-02-05  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR debug/98656\n+\t* tree-switch-conversion.c (jump_table_cluster::emit): Add loc\n+\targument.\n+\t(bit_test_cluster::emit): Reuse location_t for newly created\n+\tgswitch statement.\n+\t(switch_decision_tree::try_switch_expansion): Preserve\n+\tlocation_t.\n+\t* tree-switch-conversion.h: Change function signatures.\n+\n+2021-02-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/98957\n+\t* config/i386/i386-options.c (m_NONE, m_ALL): Define.\n+\t* config/i386/x86-tune.def (X86_TUNE_BRANCH_PREDICTION_HINTS,\n+\tX86_TUNE_PROMOTE_QI_REGS): Use m_NONE instead of 0U.\n+\t(X86_TUNE_QIMODE_MATH): Use m_ALL instead of ~0U.\n+\n+2021-02-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (get_high): Define builtin.\n+\t* config/aarch64/aarch64-simd.md (aarch64_get_high<mode>): Define.\n+\t* config/aarch64/arm_neon.h (__GET_HIGH): Delete.\n+\t(vget_high_f16): Reimplement using new builtin.\n+\t(vget_high_f32): Likewise.\n+\t(vget_high_f64): Likewise.\n+\t(vget_high_p8): Likewise.\n+\t(vget_high_p16): Likewise.\n+\t(vget_high_p64): Likewise.\n+\t(vget_high_s8): Likewise.\n+\t(vget_high_s16): Likewise.\n+\t(vget_high_s32): Likewise.\n+\t(vget_high_s64): Likewise.\n+\t(vget_high_u8): Likewise.\n+\t(vget_high_u16): Likewise.\n+\t(vget_high_u32): Likewise.\n+\t(vget_high_u64): Likewise.\n+\n+2021-02-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (get_low): Define builtin.\n+\t* config/aarch64/aarch64-simd.md (aarch64_get_low<mode>): Define.\n+\t* config/aarch64/arm_neon.h (__GET_LOW): Delete.\n+\t(vget_low_f16): Reimplement using new builtin.\n+\t(vget_low_f32): Likewise.\n+\t(vget_low_f64): Likewise.\n+\t(vget_low_p8): Likewise.\n+\t(vget_low_p16): Likewise.\n+\t(vget_low_p64): Likewise.\n+\t(vget_low_s8): Likewise.\n+\t(vget_low_s16): Likewise.\n+\t(vget_low_s32): Likewise.\n+\t(vget_low_s64): Likewise.\n+\t(vget_low_u8): Likewise.\n+\t(vget_low_u16): Likewise.\n+\t(vget_low_u32): Likewise.\n+\t(vget_low_u64): Likewise.\n+\n+2021-02-05  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* gcc.c (print_multilib_info): Check all required argument is provided\n+\tby default arg.\n+\n+2021-02-05  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/98537\n+\t* config/i386/i386-expand.c (ix86_expand_sse_cmp): Don't\n+\tgenerate integer mask comparison for 128/256-bits vector when\n+\top_true/op_false is NULL_RTX or CONSTM1_RTX/CONST0_RTX. Also\n+\tdelete redundant !maskcmp condition.\n+\t(ix86_expand_int_vec_cmp): Ditto but no redundant deletion\n+\there.\n+\t(ix86_expand_sse_movcc): Delete definition of maskcmp, add the\n+\tcondition directly to if (maskcmp), add extra check for\n+\tcmpmode, it should be MODE_INT.\n+\t(ix86_expand_fp_vec_cmp): Pass NULL to ix86_expand_sse_cmp's\n+\tparameters op_true/op_false.\n+\t(ix86_use_mask_cmp_p): New.\n+\n+2021-02-05  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/98172\n+\t* config/i386/x86-tune.def (X86_TUNE_AVX256_UNALIGNED_LOAD_OPTIMAL):\n+\tRemove m_GENERIC from ~list.\n+\t(X86_TUNE_AVX256_UNALIGNED_STORE_OPTIMAL): Ditto.\n+\n 2021-02-04  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/97932"}, {"sha": "e72848010d188031c11b8e6bb9ac7b374e5e1be0", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed591276485161e9ef3f0a513adbfcf4b4e2968/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed591276485161e9ef3f0a513adbfcf4b4e2968/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=1ed591276485161e9ef3f0a513adbfcf4b4e2968", "patch": "@@ -1 +1 @@\n-20210205\n+20210206"}, {"sha": "5522353d02675e86984618b992f0f8d2b0f8c1fd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed591276485161e9ef3f0a513adbfcf4b4e2968/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed591276485161e9ef3f0a513adbfcf4b4e2968/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1ed591276485161e9ef3f0a513adbfcf4b4e2968", "patch": "@@ -1,3 +1,23 @@\n+2021-02-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/98947\n+\t* call.c (build_conditional_expr_1): Don't call mark_lvalue_use\n+\ton arg2/arg3.\n+\t* expr.c (mark_use) <case MODIFY_EXPR>: Don't check read_p when\n+\tissuing the -Wvolatile warning.  Only set TREE_THIS_VOLATILE if\n+\ta warning was emitted.\n+\n+2021-02-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/96462\n+\t* name-lookup.c (lookup_using_decl): Hoist the destructor check.\n+\n+2021-02-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/97878\n+\t* decl.c (check_array_initializer): For structured bindings, require\n+\tthe array type to be complete.\n+\n 2021-02-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/98717"}, {"sha": "2fb2ebf56ff765754df7659a80af51e9f6cc5fbf", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed591276485161e9ef3f0a513adbfcf4b4e2968/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed591276485161e9ef3f0a513adbfcf4b4e2968/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=1ed591276485161e9ef3f0a513adbfcf4b4e2968", "patch": "@@ -1,3 +1,12 @@\n+2021-02-05  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-tree.h (DEF_D_INTRINSIC): Don't insert INTRINSIC_ into the\n+\tintrinsic code name.\n+\t* intrinsics.cc (DEF_D_INTRINSIC): Don't insert INTRISIC_ and\n+\tBUILT_IN_ into the intrinsic and built-in code names.\n+\t* intrinsics.def:  Explicitly use full intrinsic and built-in\n+\tcodes in all definitions.\n+\n 2021-02-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* dmd/MERGE: Merge upstream dmd 46133f761."}, {"sha": "6d0c5f42a6b99e5aa201f921c08027b978e17ad7", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed591276485161e9ef3f0a513adbfcf4b4e2968/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed591276485161e9ef3f0a513adbfcf4b4e2968/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=1ed591276485161e9ef3f0a513adbfcf4b4e2968", "patch": "@@ -1,3 +1,7 @@\n+2021-02-05  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.pot: Regenerate.\n+\n 2021-01-19  Joseph Myers  <joseph@codesourcery.com>\n \n \t* de.po: Update."}, {"sha": "1ad4252af8848e562583560b5202ae7717c9c455", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed591276485161e9ef3f0a513adbfcf4b4e2968/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed591276485161e9ef3f0a513adbfcf4b4e2968/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1ed591276485161e9ef3f0a513adbfcf4b4e2968", "patch": "@@ -1,3 +1,40 @@\n+2021-02-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/98947\n+\t* g++.dg/cpp2a/volatile5.C: New test.\n+\n+2021-02-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/96462\n+\t* g++.dg/cpp2a/using-enum-8.C: New test.\n+\n+2021-02-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR driver/98943\n+\t* c-c++-common/pr98943.c: New.\n+\n+2021-02-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98855\n+\t* g++.dg/vect/slp-pr98855.cc: New testcase.\n+\n+2021-02-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/97878\n+\t* g++.dg/cpp1z/decomp54.C: New test.\n+\n+2021-02-05  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/98537\n+\t* g++.target/i386/avx512bw-pr98537-1.C: New test.\n+\t* g++.target/i386/avx512vl-pr98537-1.C: New test.\n+\t* g++.target/i386/avx512vl-pr98537-2.C: New test.\n+\t* gcc.target/i386/avx512vl-pr88547-1.c: Adjust testcase,\n+\tinteger mask comparison should not be generated.\n+\t* gcc.target/i386/avx512vl-pr92686-vpcmp-1.c: Remove.\n+\t* gcc.target/i386/avx512vl-pr92686-vpcmp-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-pr92686-vpcmp-intelasm-1.c: Ditto.\n+\n 2021-02-04  Julian Brown  <julian@codesourcery.com>\n \n \t* gfortran.dg/goacc/derived-chartypes-1.f90: New test."}, {"sha": "e1054f1afbe77aa3fc9423e7a5829dde00462381", "filename": "libcpp/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed591276485161e9ef3f0a513adbfcf4b4e2968/libcpp%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed591276485161e9ef3f0a513adbfcf4b4e2968/libcpp%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fpo%2FChangeLog?ref=1ed591276485161e9ef3f0a513adbfcf4b4e2968", "patch": "@@ -1,3 +1,7 @@\n+2021-02-05  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* cpplib.pot: Regenerate.\n+\n 2021-01-07  Joseph Myers  <joseph@codesourcery.com>\n \n \t* es.po: Update."}]}