{"sha": "98b453092af6c698369040d0505bbb8bac002099", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThiNDUzMDkyYWY2YzY5ODM2OTA0MGQwNTA1YmJiOGJhYzAwMjA5OQ==", "commit": {"author": {"name": "Aaron W. LaFramboise", "email": "aaronavay62@aaronwl.com", "date": "2008-08-07T19:30:14Z"}, "committer": {"name": "Aaron W. LaFramboise", "email": "aaronwl@gcc.gnu.org", "date": "2008-08-07T19:30:14Z"}, "message": "pex-win32.c (argv_to_argc): New function.\n\n2008-08-07  Aaron W. LaFramboise  <aaronavay62@aaronwl.com>\n\n\t* pex-win32.c (argv_to_argc): New function.\n\t(spawn_script): Duplicate argv before calling win32_spawn.\n\nFrom-SVN: r138849", "tree": {"sha": "3d4f7c1bd556ef0a71c732bb5bd313e2e0fcf3f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d4f7c1bd556ef0a71c732bb5bd313e2e0fcf3f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98b453092af6c698369040d0505bbb8bac002099", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b453092af6c698369040d0505bbb8bac002099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98b453092af6c698369040d0505bbb8bac002099", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b453092af6c698369040d0505bbb8bac002099/comments", "author": null, "committer": null, "parents": [{"sha": "056dd1af584c70c831ecb94d906e453d7d282be1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056dd1af584c70c831ecb94d906e453d7d282be1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/056dd1af584c70c831ecb94d906e453d7d282be1"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "837035c05f1ddfabad482eb38e0273f53d5b3f85", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b453092af6c698369040d0505bbb8bac002099/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b453092af6c698369040d0505bbb8bac002099/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=98b453092af6c698369040d0505bbb8bac002099", "patch": "@@ -1,3 +1,8 @@\n+2008-08-07  Aaron W. LaFramboise  <aaronavay62@aaronwl.com>\n+\n+\t* pex-win32.c (argv_to_argc): New function.\n+\t(spawn_script): Duplicate argv before calling win32_spawn.\n+\n 2008-07-31  Jakub Jelinek  <jakub@redhat.com>\n \n \t* mkstemps.c (mkstemps): Keep looping even for EISDIR."}, {"sha": "5897866347d7b1b08ac7d1e62a44349387a2d558", "filename": "libiberty/pex-win32.c", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b453092af6c698369040d0505bbb8bac002099/libiberty%2Fpex-win32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b453092af6c698369040d0505bbb8bac002099/libiberty%2Fpex-win32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpex-win32.c?ref=98b453092af6c698369040d0505bbb8bac002099", "patch": "@@ -321,6 +321,18 @@ msys_rootify (const char *executable)\n }\n #endif\n \n+/* Return the number of arguments in an argv array, not including the null\n+   terminating argument. */\n+\n+static int\n+argv_to_argc (char *const *argv)\n+{\n+  char *const *i = argv;\n+  while (*i)\n+    i++;\n+  return i - argv;\n+}\n+\n /* Return a Windows command-line from ARGV.  It is the caller's\n    responsibility to free the string returned.  */\n \n@@ -522,6 +534,9 @@ env_compare (const void *a_ptr, const void *b_ptr)\n   return c1 - c2;\n }\n \n+/* Execute a Windows executable as a child process.  This will fail if the\n+ * target is not actually an executable, such as if it is a shell script. */\n+\n static pid_t\n win32_spawn (const char *executable,\n \t     BOOL search,\n@@ -619,6 +634,9 @@ win32_spawn (const char *executable,\n   return (pid_t) -1;\n }\n \n+/* Spawn a script.  This simulates the Unix script execution mechanism.\n+   This function is called as a fallback if win32_spawn fails. */\n+\n static pid_t\n spawn_script (const char *executable, char *const *argv,\n               char* const *env,\n@@ -630,6 +648,8 @@ spawn_script (const char *executable, char *const *argv,\n   int save_errno = errno;\n   int fd = _open (executable, _O_RDONLY);\n \n+  /* Try to open script, check header format, extract interpreter path,\n+     and spawn script using that interpretter. */\n   if (fd >= 0)\n     {\n       char buf[MAX_PATH + 5];\n@@ -642,16 +662,28 @@ spawn_script (const char *executable, char *const *argv,\n \t  eol = strchr (buf, '\\n');\n \t  if (eol && strncmp (buf, \"#!\", 2) == 0)\n \t    {\n+            \n+\t      /* Header format is OK. */\n \t      char *executable1;\n-\t      const char ** avhere = (const char **) --argv;\n+              int new_argc;\n+              const char **avhere;\n+\n+\t      /* Extract interpreter path. */\n \t      do\n \t\t*eol = '\\0';\n \t      while (*--eol == '\\r' || *eol == ' ' || *eol == '\\t');\n \t      for (executable1 = buf + 2; *executable1 == ' ' || *executable1 == '\\t'; executable1++)\n \t\tcontinue;\n-\n \t      backslashify (executable1);\n+\n+\t      /* Duplicate argv, prepending the interpreter path. */\n+\t      new_argc = argv_to_argc (argv) + 1;\n+\t      avhere = XNEWVEC (const char *, new_argc + 1);\n \t      *avhere = executable1;\n+\t      memcpy (avhere + 1, argv, new_argc * sizeof(*argv));\n+\t      argv = (char *const *)avhere;\n+\n+\t      /* Spawn the child. */\n #ifndef USE_MINGW_MSYS\n \t      executable = strrchr (executable1, '\\\\') + 1;\n \t      if (!executable)\n@@ -686,6 +718,7 @@ spawn_script (const char *executable, char *const *argv,\n \t\t    }\n \t\t}\n #endif\n+\t      free (avhere);\n \t    }\n \t}\n     }"}]}