{"sha": "74d4d0244c8f4aab17ab7d476fb568416b018442", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRkNGQwMjQ0YzhmNGFhYjE3YWI3ZDQ3NmZiNTY4NDE2YjAxODQ0Mg==", "commit": {"author": {"name": "David Ung", "email": "davidu@mips.com", "date": "2007-07-03T18:00:06Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-07-03T18:00:06Z"}, "message": "invoke.texi: Document -march=74kf3_2.\n\ngcc/\n2007-07-03  David Ung  <davidu@mips.com>\n\t    Richard Sandiford  <richard@codesourcery.com>\n\n\t* doc/invoke.texi: Document -march=74kf3_2.\n\t* config/mips/mips.h (PROCESSOR_74KF3_2): New processor_type.\n\t(TUNE_74K): Check for it.\n\t* config/mips/mips.c (mips_cpu_info): Add 74kf3_2.\n\t(mips_rtx_cost_data): Add an entry for PROCESSOR_74KF3_2.\n\t* config/mips/mips.md (cpu): Add 74kf3_2.\n\t* config/mips/74k.md (r74k_int_logical, r74k_int_arith, r74k_int_nop)\n\t(r74k_int_cmove, r74k_int_mult, r74k_int_mul3, r74k_int_mfhilo)\n\t(r74k_int_mthilo, r74k_int_div, r74k_int_call, r74k_int_jump)\n\t(r74k_int_load, r74k_int_store, r74k_unknown, r74k_multi): Add\n\t74kf3_2 to the CPU list.\n\t(r74kf3_2_fadd, r74kf3_2_fmove, r74kf3_2_fload, r74kf3_2_fstore)\n\t(r74kf3_2_fmul_sf, r74kf3_2_fmul_df, r74kf3_2_fdiv_sf)\n\t(r74kf3_2_fdiv_df, r74kf3_2_frsqrt_sf, r74kf3_2_frsqrt_df)\n\t(r74kf3_2_fcmp, r74kf3_2_fcvt, r74kf3_2_fxfer_to_c1)\n\t(r74kf3_2_fxfer_from_c1): New insn reservations.\n\nCo-Authored-By: Richard Sandiford <richard@codesourcery.com>\n\nFrom-SVN: r126267", "tree": {"sha": "da75fa020ec67a1578d13adcb2bab5725f006479", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da75fa020ec67a1578d13adcb2bab5725f006479"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74d4d0244c8f4aab17ab7d476fb568416b018442", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d4d0244c8f4aab17ab7d476fb568416b018442", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74d4d0244c8f4aab17ab7d476fb568416b018442", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d4d0244c8f4aab17ab7d476fb568416b018442/comments", "author": null, "committer": null, "parents": [{"sha": "bdd77024de587f1761dfbffc96d7b8392f855986", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdd77024de587f1761dfbffc96d7b8392f855986", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdd77024de587f1761dfbffc96d7b8392f855986"}], "stats": {"total": 157, "additions": 136, "deletions": 21}, "files": [{"sha": "e58836cad6dbe04762ac29110169420c54b7e11d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d4d0244c8f4aab17ab7d476fb568416b018442/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d4d0244c8f4aab17ab7d476fb568416b018442/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74d4d0244c8f4aab17ab7d476fb568416b018442", "patch": "@@ -1,3 +1,23 @@\n+2007-07-03  David Ung  <davidu@mips.com>\n+\t    Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* doc/invoke.texi: Document -march=74kf3_2.\n+\t* config/mips/mips.h (PROCESSOR_74KF3_2): New processor_type.\n+\t(TUNE_74K): Check for it.\n+\t* config/mips/mips.c (mips_cpu_info): Add 74kf3_2.\n+\t(mips_rtx_cost_data): Add an entry for PROCESSOR_74KF3_2.\n+\t* config/mips/mips.md (cpu): Add 74kf3_2.\n+\t* config/mips/74k.md (r74k_int_logical, r74k_int_arith, r74k_int_nop)\n+\t(r74k_int_cmove, r74k_int_mult, r74k_int_mul3, r74k_int_mfhilo)\n+\t(r74k_int_mthilo, r74k_int_div, r74k_int_call, r74k_int_jump)\n+\t(r74k_int_load, r74k_int_store, r74k_unknown, r74k_multi): Add\n+\t74kf3_2 to the CPU list.\n+\t(r74kf3_2_fadd, r74kf3_2_fmove, r74kf3_2_fload, r74kf3_2_fstore)\n+\t(r74kf3_2_fmul_sf, r74kf3_2_fmul_df, r74kf3_2_fdiv_sf)\n+\t(r74kf3_2_fdiv_df, r74kf3_2_frsqrt_sf, r74kf3_2_frsqrt_df)\n+\t(r74kf3_2_fcmp, r74kf3_2_fcvt, r74kf3_2_fxfer_to_c1)\n+\t(r74kf3_2_fxfer_from_c1): New insn reservations.\n+\n 2007-07-03  Richard Sandiford  <richard@codesourcery.com>\n \t    David Ung  <davidu@mips.com>\n "}, {"sha": "1d3aaa4f51ddf07cd86abe60446e817f89dda974", "filename": "gcc/config/mips/74k.md", "status": "modified", "additions": 90, "deletions": 14, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d4d0244c8f4aab17ab7d476fb568416b018442/gcc%2Fconfig%2Fmips%2F74k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d4d0244c8f4aab17ab7d476fb568416b018442/gcc%2Fconfig%2Fmips%2F74k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F74k.md?ref=74d4d0244c8f4aab17ab7d476fb568416b018442", "patch": "@@ -40,74 +40,74 @@\n ;;    sllv, slt, slti, sltiu, sltu, sra, srav, srl, srlv, sub, subu, wsbh,\n ;;    xor, xori\n (define_insn_reservation \"r74k_int_arith\" 2\n-  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1,74kf3_2\")\n        (eq_attr \"type\" \"arith,const,shift,slt,clz\"))\n   \"r74k_alu\")\n \n (define_insn_reservation \"r74k_int_nop\" 0\n-  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1,74kf3_2\")\n        (eq_attr \"type\" \"nop\"))\n   \"nothing\")\n \n (define_insn_reservation \"r74k_int_cmove\" 4\n-  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1,74kf3_2\")\n        (eq_attr \"type\" \"condmove\"))\n   \"r74k_agen*2\")\n \n ;; MDU: fully pipelined multiplier\n ;; mult, madd, msub - delivers result to hi/lo in 4 cycle (pipelined)\n (define_insn_reservation \"r74k_int_mult\" 4\n-  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1,74kf3_2\")\n        (eq_attr \"type\" \"imul,imadd\"))\n   \"r74k_alu+r74k_mul\")\n \n ;; mul - delivers result to general register in 7 cycles\n (define_insn_reservation \"r74k_int_mul3\" 7\n-  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1,74kf3_2\")\n        (eq_attr \"type\" \"imul3\"))\n   \"r74k_alu+r74k_mul\")\n \n ;; mfhi, mflo, mflhxu - deliver result to gpr in 7 cycles\n (define_insn_reservation \"r74k_int_mfhilo\" 7\n-  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1,74kf3_2\")\n        (eq_attr \"type\" \"mfhilo\"))\n   \"r74k_alu+r74k_mul\")\n \n ;; mthi, mtlo, mtlhx - deliver result to hi/lo, thence madd, handled as bypass\n (define_insn_reservation \"r74k_int_mthilo\" 7\n-  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1,74kf3_2\")\n        (eq_attr \"type\" \"mthilo\"))\n   \"r74k_alu+r74k_mul\")\n \n ;; div - default to 50 cycles for 32bit operands.  Faster for 8 bit,\n ;; but is tricky to identify.\n (define_insn_reservation \"r74k_int_div\" 50\n-  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1,74kf3_2\")\n        (eq_attr \"type\" \"idiv\"))\n   \"r74k_alu+r74k_mul*50\")\n \n ;; call\n (define_insn_reservation \"r74k_int_call\" 1\n-  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1,74kf3_2\")\n        (eq_attr \"type\" \"call\"))\n   \"r74k_agen\")\n \n ;; branch/jump\n (define_insn_reservation \"r74k_int_jump\" 1\n-  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1,74kf3_2\")\n        (eq_attr \"type\" \"branch,jump\"))\n   \"r74k_agen\")\n \n ;; loads: lb, lbu, lh, lhu, ll, lw, lwl, lwr, lwpc, lwxs\n ;; prefetch: prefetch, prefetchx\n (define_insn_reservation \"r74k_int_load\" 3 \n-  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1,74kf3_2\")\n        (eq_attr \"type\" \"load,prefetch,prefetchx\"))\n   \"r74k_agen\")\n \n ;; stores\n (define_insn_reservation \"r74k_int_store\" 1\n-  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1,74kf3_2\")\n        (and (eq_attr \"type\" \"store\")\n             (eq_attr \"mode\" \"!unknown\")))\n   \"r74k_agen\")\n@@ -118,12 +118,12 @@\n ;;            affects scheduling via log links, but not used here).\n ;;\n (define_insn_reservation \"r74k_unknown\" 1 \n-  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1,74kf3_2\")\n        (eq_attr \"type\" \"unknown\"))\n   \"r74k_alu\")\n \n (define_insn_reservation \"r74k_multi\" 10\n-  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1\")\n+  (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1,74kf3_2\")\n        (eq_attr \"type\" \"multi\"))\n   \"(r74k_alu+r74k_agen)*10\")\n \n@@ -170,6 +170,11 @@\n        (eq_attr \"type\" \"fadd,fabs,fneg\"))\n   \"r74k_fpu_arith*2\")\n \n+(define_insn_reservation \"r74kf3_2_fadd\" 6\n+  (and (eq_attr \"cpu\" \"74kf3_2\")\n+       (eq_attr \"type\" \"fadd,fabs,fneg\"))\n+  \"r74k_fpu_arith\")\n+\n ;; fmove, fcmove\n (define_insn_reservation \"r74kf1_1_fmove\" 4\n   (and (eq_attr \"cpu\" \"74kf1_1\")\n@@ -181,6 +186,11 @@\n        (eq_attr \"type\" \"fmove\"))\n   \"r74k_fpu_arith*2\")\n \n+(define_insn_reservation \"r74kf3_2_fmove\" 6\n+  (and (eq_attr \"cpu\" \"74kf3_2\")\n+       (eq_attr \"type\" \"fmove\"))\n+  \"r74k_fpu_arith\")\n+\n ;; fload\n (define_insn_reservation \"r74kf1_1_fload\" 4\n   (and (eq_attr \"cpu\" \"74kf1_1\")\n@@ -192,6 +202,11 @@\n        (eq_attr \"type\" \"fpload,fpidxload\"))\n   \"r74k_agen+(r74k_fpu_ldst*2)\")\n \n+(define_insn_reservation \"r74kf3_2_fload\" 6\n+  (and (eq_attr \"cpu\" \"74kf3_2\")\n+       (eq_attr \"type\" \"fpload,fpidxload\"))\n+  \"r74k_agen+r74k_fpu_ldst\")\n+\n ;; fstore\n (define_insn_reservation \"r74kf1_1_fstore\" 1\n   (and (eq_attr \"cpu\" \"74kf1_1\")\n@@ -203,6 +218,11 @@\n        (eq_attr \"type\" \"fpstore,fpidxstore\"))\n   \"r74k_agen+(r74k_fpu_ldst*2)\")\n \n+(define_insn_reservation \"r74kf3_2_fstore\" 1\n+  (and (eq_attr \"cpu\" \"74kf3_2\")\n+       (eq_attr \"type\" \"fpstore,fpidxstore\"))\n+  \"r74k_agen+r74k_fpu_ldst\")\n+\n ;; fmul, fmadd\n (define_insn_reservation \"r74kf1_1_fmul_sf\" 4\n   (and (eq_attr \"cpu\" \"74kf1_1\")\n@@ -216,6 +236,12 @@\n \t    (eq_attr \"mode\" \"SF\")))\n   \"r74k_fpu_arith*2\")\n \n+(define_insn_reservation \"r74kf3_2_fmul_sf\" 6\n+  (and (eq_attr \"cpu\" \"74kf3_2\")\n+       (and (eq_attr \"type\" \"fmul,fmadd\")\n+\t    (eq_attr \"mode\" \"SF\")))\n+  \"r74k_fpu_arith\")\n+\n (define_insn_reservation \"r74kf1_1_fmul_df\" 5\n   (and (eq_attr \"cpu\" \"74kf1_1\")\n        (and (eq_attr \"type\" \"fmul,fmadd\")\n@@ -228,6 +254,12 @@\n \t    (eq_attr \"mode\" \"DF\")))\n   \"r74k_fpu_arith*4\")\n \n+(define_insn_reservation \"r74kf3_2_fmul_df\" 7\n+  (and (eq_attr \"cpu\" \"74kf3_2\")\n+       (and (eq_attr \"type\" \"fmul,fmadd\")\n+\t    (eq_attr \"mode\" \"DF\")))\n+  \"r74k_fpu_arith*2\")\n+\n ;; fdiv, fsqrt\n (define_insn_reservation \"r74kf1_1_fdiv_sf\" 17\n   (and (eq_attr \"cpu\" \"74kf1_1\")\n@@ -241,6 +273,12 @@\n \t    (eq_attr \"mode\" \"SF\")))\n   \"r74k_fpu_arith*28\")\n \n+(define_insn_reservation \"r74kf3_2_fdiv_sf\" 25\n+  (and (eq_attr \"cpu\" \"74kf3_2\")\n+       (and (eq_attr \"type\" \"fdiv,fsqrt\")\n+\t    (eq_attr \"mode\" \"SF\")))\n+  \"r74k_fpu_arith*14\")\n+\n (define_insn_reservation \"r74kf1_1_fdiv_df\" 32\n   (and (eq_attr \"cpu\" \"74kf1_1\")\n        (and (eq_attr \"type\" \"fdiv,fsqrt\")\n@@ -253,6 +291,12 @@\n \t    (eq_attr \"mode\" \"DF\")))\n   \"r74k_fpu_arith*58\")\n \n+(define_insn_reservation \"r74kf3_2_fdiv_df\" 48\n+  (and (eq_attr \"cpu\" \"74kf3_2\")\n+       (and (eq_attr \"type\" \"fdiv,fsqrt\")\n+\t    (eq_attr \"mode\" \"DF\")))\n+  \"r74k_fpu_arith*29\")\n+\n ;; frsqrt\n (define_insn_reservation \"r74kf1_1_frsqrt_sf\" 17\n   (and (eq_attr \"cpu\" \"74kf1_1\")\n@@ -266,6 +310,12 @@\n \t    (eq_attr \"mode\" \"SF\")))\n   \"r74k_fpu_arith*28\")\n \n+(define_insn_reservation \"r74kf3_2_frsqrt_sf\" 25\n+  (and (eq_attr \"cpu\" \"74kf3_2\")\n+       (and (eq_attr \"type\" \"frsqrt\")\n+\t    (eq_attr \"mode\" \"SF\")))\n+  \"r74k_fpu_arith*14\")\n+\n (define_insn_reservation \"r74kf1_1_frsqrt_df\" 36\n   (and (eq_attr \"cpu\" \"74kf1_1\")\n        (and (eq_attr \"type\" \"frsqrt\")\n@@ -278,6 +328,12 @@\n \t    (eq_attr \"mode\" \"DF\")))\n   \"r74k_fpu_arith*62\")\n \n+(define_insn_reservation \"r74kf3_2_frsqrt_df\" 54\n+  (and (eq_attr \"cpu\" \"74kf3_2\")\n+       (and (eq_attr \"type\" \"frsqrt\")\n+\t    (eq_attr \"mode\" \"DF\")))\n+  \"r74k_fpu_arith*31\")\n+\n ;; fcmp\n (define_insn_reservation \"r74kf1_1_fcmp\" 4\n   (and (eq_attr \"cpu\" \"74kf1_1\")\n@@ -289,6 +345,11 @@\n        (eq_attr \"type\" \"fcmp\"))\n   \"r74k_fpu_arith*2\")\n \n+(define_insn_reservation \"r74kf3_2_fcmp\" 6\n+  (and (eq_attr \"cpu\" \"74kf3_2\")\n+       (eq_attr \"type\" \"fcmp\"))\n+  \"r74k_fpu_arith\")\n+\n ;; fcvt\n (define_insn_reservation \"r74kf1_1_fcvt\" 4\n   (and (eq_attr \"cpu\" \"74kf1_1\")\n@@ -300,6 +361,11 @@\n        (eq_attr \"type\" \"fcvt\"))\n   \"r74k_fpu_arith*2\")\n \n+(define_insn_reservation \"r74kf3_2_fcvt\" 6\n+  (and (eq_attr \"cpu\" \"74kf3_2\")\n+       (eq_attr \"type\" \"fcvt\"))\n+  \"r74k_fpu_arith\")\n+\n ;; fxfer (MTC1, DMTC1: latency is 4) (MFC1, DMFC1: latency is 1)\n (define_insn_reservation \"r74kf1_1_fxfer_to_c1\" 4\n   (and (eq_attr \"cpu\" \"74kf1_1\")\n@@ -311,6 +377,11 @@\n        (eq_attr \"type\" \"mtc\"))\n   \"r74k_fpu_arith*2\")\n \n+(define_insn_reservation \"r74kf3_2_fxfer_to_c1\" 6\n+  (and (eq_attr \"cpu\" \"74kf3_2\")\n+       (eq_attr \"type\" \"mtc\"))\n+  \"r74k_fpu_arith\")\n+\n (define_insn_reservation \"r74kf1_1_fxfer_from_c1\" 1\n   (and (eq_attr \"cpu\" \"74kf1_1\")\n        (eq_attr \"type\" \"mfc\"))\n@@ -320,3 +391,8 @@\n   (and (eq_attr \"cpu\" \"74kf2_1\")\n        (eq_attr \"type\" \"mfc\"))\n   \"r74k_fpu_arith*2\")\n+\n+(define_insn_reservation \"r74kf3_2_fxfer_from_c1\" 1\n+  (and (eq_attr \"cpu\" \"74kf3_2\")\n+       (eq_attr \"type\" \"mfc\"))\n+  \"r74k_fpu_arith\")"}, {"sha": "3331b9e7a683929dc00659215052b7a8af90f80e", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d4d0244c8f4aab17ab7d476fb568416b018442/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d4d0244c8f4aab17ab7d476fb568416b018442/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=74d4d0244c8f4aab17ab7d476fb568416b018442", "patch": "@@ -799,6 +799,7 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n   { \"74kf1_1\", PROCESSOR_74KF1_1, 33 },\n   { \"74kfx\", PROCESSOR_74KF1_1, 33 },\n   { \"74kx\", PROCESSOR_74KF1_1, 33 },\n+  { \"74kf3_2\", PROCESSOR_74KF3_2, 33 },\n \n   /* MIPS64 */\n   { \"5kc\", PROCESSOR_5KC, 64 },\n@@ -978,6 +979,19 @@ static struct mips_rtx_cost_data const mips_rtx_cost_data[PROCESSOR_MAX] =\n                        1,           /* branch_cost */\n                        4            /* memory_latency */\n     },\n+    { /* 74KF3_2 */\n+      COSTS_N_INSNS (6),            /* fp_add */\n+      COSTS_N_INSNS (6),            /* fp_mult_sf */\n+      COSTS_N_INSNS (7),            /* fp_mult_df */\n+      COSTS_N_INSNS (25),           /* fp_div_sf */\n+      COSTS_N_INSNS (48),           /* fp_div_df */\n+      COSTS_N_INSNS (5),            /* int_mult_si */\n+      COSTS_N_INSNS (5),            /* int_mult_di */\n+      COSTS_N_INSNS (41),           /* int_div_si */\n+      COSTS_N_INSNS (41),           /* int_div_di */\n+                       1,           /* branch_cost */\n+                       4            /* memory_latency */\n+    },\n     { /* M4k */\n       DEFAULT_COSTS\n     },\n@@ -10798,6 +10812,7 @@ mips_issue_rate (void)\n     case PROCESSOR_74KC:\n     case PROCESSOR_74KF2_1:\n     case PROCESSOR_74KF1_1:\n+    case PROCESSOR_74KF3_2:\n     case PROCESSOR_R4130:\n     case PROCESSOR_R5400:\n     case PROCESSOR_R5500:"}, {"sha": "8338829e94188daa4e175e6c6637a8d2717dad8c", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d4d0244c8f4aab17ab7d476fb568416b018442/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d4d0244c8f4aab17ab7d476fb568416b018442/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=74d4d0244c8f4aab17ab7d476fb568416b018442", "patch": "@@ -46,6 +46,7 @@ enum processor_type {\n   PROCESSOR_74KC,\n   PROCESSOR_74KF2_1,\n   PROCESSOR_74KF1_1,\n+  PROCESSOR_74KF3_2,\n   PROCESSOR_M4K,\n   PROCESSOR_R3900,\n   PROCESSOR_R6000,\n@@ -250,7 +251,8 @@ extern const struct mips_rtx_cost_data *mips_cost;\n \t\t\t\t     || mips_tune == PROCESSOR_SB1A)\n #define TUNE_74K                    (mips_tune == PROCESSOR_74KC\t\\\n \t\t\t\t     || mips_tune == PROCESSOR_74KF2_1\t\\\n-\t\t\t\t     || mips_tune == PROCESSOR_74KF1_1)\n+\t\t\t\t     || mips_tune == PROCESSOR_74KF1_1  \\\n+\t\t\t\t     || mips_tune == PROCESSOR_74KF3_2)\n \n /* True if the pre-reload scheduler should try to create chains of\n    multiply-add or multiply-subtract instructions.  For example,"}, {"sha": "1d72ff6f6b1da9a76e97caf6be447e7613eaf3f2", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d4d0244c8f4aab17ab7d476fb568416b018442/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d4d0244c8f4aab17ab7d476fb568416b018442/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=74d4d0244c8f4aab17ab7d476fb568416b018442", "patch": "@@ -397,7 +397,7 @@\n ;; Attribute describing the processor.  This attribute must match exactly\n ;; with the processor_type enumeration in mips.h.\n (define_attr \"cpu\"\n-  \"r3000,4kc,4kp,5kc,5kf,20kc,24kc,24kf2_1,24kf1_1,74kc,74kf2_1,74kf1_1,m4k,r3900,r6000,r4000,r4100,r4111,r4120,r4130,r4300,r4600,r4650,r5000,r5400,r5500,r7000,r8000,r9000,sb1,sb1a,sr71000\"\n+  \"r3000,4kc,4kp,5kc,5kf,20kc,24kc,24kf2_1,24kf1_1,74kc,74kf2_1,74kf1_1,74kf3_2,m4k,r3900,r6000,r4000,r4100,r4111,r4120,r4130,r4300,r4600,r4650,r5000,r5400,r5500,r7000,r8000,r9000,sb1,sb1a,sr71000\"\n   (const (symbol_ref \"mips_tune\")))\n \n ;; The type of hardware hazard associated with this instruction."}, {"sha": "2b5fff220148d989f6b3f7883870f2111abbf8c2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d4d0244c8f4aab17ab7d476fb568416b018442/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d4d0244c8f4aab17ab7d476fb568416b018442/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=74d4d0244c8f4aab17ab7d476fb568416b018442", "patch": "@@ -11428,7 +11428,7 @@ The processor names are:\n @samp{24kc}, @samp{24kf2_1}, @samp{24kf1_1},\n @samp{24kec}, @samp{24kef2_1}, @samp{24kef1_1},\n @samp{34kc}, @samp{34kf2_1}, @samp{34kf1_1},\n-@samp{74kc}, @samp{74kf2_1}, @samp{74kf1_1},\n+@samp{74kc}, @samp{74kf2_1}, @samp{74kf1_1}, @samp{74kf3_2},\n @samp{m4k},\n @samp{orion},\n @samp{r2000}, @samp{r3000}, @samp{r3900}, @samp{r4000}, @samp{r4400},\n@@ -11447,11 +11447,13 @@ In processor names, a final @samp{000} can be abbreviated as @samp{k}\n @samp{vr} may be written @samp{r}.\n \n Names of the form @samp{@var{n}f2_1} refer to processors with\n-FPUs clocked at half the rate of the core.  Names of the form\n+FPUs clocked at half the rate of the core, names of the form\n @samp{@var{n}f1_1} refer to processors with FPUs clocked at the same\n-rate as the core.  For compatibility reasons, @samp{@var{n}f} is\n-accepted as a synonym for @samp{@var{n}f2_1} while @samp{@var{n}x} and\n-@samp{@var{b}fx} are accepted as synonyms for @samp{@var{n}f1_1}.\n+rate as the core, and names of the form @samp{@var{n}f3_2} refer to\n+processors with FPUs clocked a ratio of 3:2 with respect to the core.\n+For compatibility reasons, @samp{@var{n}f} is accepted as a synonym\n+for @samp{@var{n}f2_1} while @samp{@var{n}x} and @samp{@var{b}fx} are\n+accepted as synonyms for @samp{@var{n}f1_1}.\n \n GCC defines two macros based on the value of this option.  The first\n is @samp{_MIPS_ARCH}, which gives the name of target architecture, as"}]}