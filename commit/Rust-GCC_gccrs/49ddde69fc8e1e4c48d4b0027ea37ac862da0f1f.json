{"sha": "49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDlkZGRlNjlmYzhlMWU0YzQ4ZDRiMDAyN2VhMzdhYzg2MmRhMGYxZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-14T07:48:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-14T07:48:32Z"}, "message": "openmp: Also implicitly mark as declare target to functions mentioned in target regions\n\nOpenMP 5.0 also specifies that functions referenced from target regions\n(except for target regions with device(ancestor:)) are also implicitly declare target to.\n\nThis patch implements that.\n\n2020-05-14  Jakub Jelinek  <jakub@redhat.com>\n\n\t* function.h (struct function): Add has_omp_target bit.\n\t* omp-offload.c (omp_discover_declare_target_fn_r): New function,\n\told renamed to ...\n\t(omp_discover_declare_target_tgt_fn_r): ... this.\n\t(omp_discover_declare_target_var_r): Call\n\tomp_discover_declare_target_tgt_fn_r instead of\n\tomp_discover_declare_target_fn_r.\n\t(omp_discover_implicit_declare_target): Also queue functions with\n\thas_omp_target bit set, for those walk with\n\tomp_discover_declare_target_fn_r, for declare target to functions\n\twalk with omp_discover_declare_target_tgt_fn_r.\ngcc/c/\n\t* c-parser.c (c_parser_omp_target): Set cfun->has_omp_target.\ngcc/cp/\n\t* cp-gimplify.c (cp_genericize_r): Set cfun->has_omp_target.\ngcc/fortran/\n\t* trans-openmp.c: Include function.h.\n\t(gfc_trans_omp_target): Set cfun->has_omp_target.\nlibgomp/\n\t* testsuite/libgomp.c-c++-common/target-40.c: New test.", "tree": {"sha": "5cb3ecbf1dbf9cc8e8e3b975b3f83a959e3353de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cb3ecbf1dbf9cc8e8e3b975b3f83a959e3353de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42ef8a5e662a765dc794a7a5c0227bcd83556e44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42ef8a5e662a765dc794a7a5c0227bcd83556e44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42ef8a5e662a765dc794a7a5c0227bcd83556e44"}], "stats": {"total": 136, "additions": 128, "deletions": 8}, "files": [{"sha": "ce5ccabfcef7e17f3c5dcbc607cd718b4530795f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f", "patch": "@@ -1,3 +1,17 @@\n+2020-05-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* function.h (struct function): Add has_omp_target bit.\n+\t* omp-offload.c (omp_discover_declare_target_fn_r): New function,\n+\told renamed to ...\n+\t(omp_discover_declare_target_tgt_fn_r): ... this.\n+\t(omp_discover_declare_target_var_r): Call\n+\tomp_discover_declare_target_tgt_fn_r instead of\n+\tomp_discover_declare_target_fn_r.\n+\t(omp_discover_implicit_declare_target): Also queue functions with\n+\thas_omp_target bit set, for those walk with\n+\tomp_discover_declare_target_fn_r, for declare target to functions\n+\twalk with omp_discover_declare_target_tgt_fn_r.\n+\n 2020-05-14  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/95046"}, {"sha": "9ae494a45e7a79622fb3a50ebf8ba1119d0cd7b2", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f", "patch": "@@ -1,3 +1,7 @@\n+2020-05-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (c_parser_omp_target): Set cfun->has_omp_target.\n+\n 2020-05-07  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/94703"}, {"sha": "5c8502bcceb270435e231082a489371bccfe98a1", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f", "patch": "@@ -19866,6 +19866,7 @@ c_parser_omp_target (c_parser *parser, enum pragma_context context, bool *if_p)\n \t  }\n       pc = &OMP_CLAUSE_CHAIN (*pc);\n     }\n+  cfun->has_omp_target = true;\n   return true;\n }\n "}, {"sha": "5f5b31b24748224edacb5b76a54d563f458472ca", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f", "patch": "@@ -1,3 +1,7 @@\n+2020-05-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cp-gimplify.c (cp_genericize_r): Set cfun->has_omp_target.\n+\n 2020-05-13  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/79706"}, {"sha": "ede98929179d29d0a3a6aa4f4a942865e098dc5d", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f", "patch": "@@ -1558,6 +1558,10 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n       }\n       break;\n \n+    case OMP_TARGET:\n+      cfun->has_omp_target = true;\n+      break;\n+\n     case TRY_BLOCK:\n       {\n         *walk_subtrees = 0;"}, {"sha": "a3b673f7ed9cac274b0a6246bcce5c856c010476", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f", "patch": "@@ -1,3 +1,8 @@\n+2020-05-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* trans-openmp.c: Include function.h.\n+\t(gfc_trans_omp_target): Set cfun->has_omp_target.\n+\n 2020-05-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/93497"}, {"sha": "e27ce41b7ce984457231a2e3bb60f620c64fcccf", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f", "patch": "@@ -44,6 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #undef GCC_DIAG_STYLE\n #define GCC_DIAG_STYLE __gcc_gfc__\n #include \"attribs.h\"\n+#include \"function.h\"\n \n int ompws_flags;\n \n@@ -5392,6 +5393,7 @@ gfc_trans_omp_target (gfc_code *code)\n \t\t\t omp_clauses);\n       if (code->op != EXEC_OMP_TARGET)\n \tOMP_TARGET_COMBINED (stmt) = 1;\n+      cfun->has_omp_target = true;\n     }\n   gfc_add_expr_to_block (&block, stmt);\n   return gfc_finish_block (&block);"}, {"sha": "d55cbddd0b51f78cf272f9f660d5ee0fd006d5d6", "filename": "gcc/function.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f", "patch": "@@ -421,6 +421,9 @@ struct GTY(()) function {\n \n   /* Set if this is a coroutine-related function.  */\n   unsigned int coroutine_component : 1;\n+\n+  /* Set if there are any OMP_TARGET regions in the function.  */\n+  unsigned int has_omp_target : 1;\n };\n \n /* Add the decl D to the local_decls list of FUN.  */"}, {"sha": "3e7012d649f7a6f17c2b3bfa4c95df387b7941d7", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f", "patch": "@@ -190,7 +190,7 @@ omp_declare_target_var_p (tree decl)\n    declare target to.  */\n \n static tree\n-omp_discover_declare_target_fn_r (tree *tp, int *walk_subtrees, void *data)\n+omp_discover_declare_target_tgt_fn_r (tree *tp, int *walk_subtrees, void *data)\n {\n   if (TREE_CODE (*tp) == FUNCTION_DECL\n       && !omp_declare_target_fn_p (*tp)\n@@ -219,6 +219,24 @@ omp_discover_declare_target_fn_r (tree *tp, int *walk_subtrees, void *data)\n   return NULL_TREE;\n }\n \n+/* Similarly, but ignore references outside of OMP_TARGET regions.  */\n+\n+static tree\n+omp_discover_declare_target_fn_r (tree *tp, int *walk_subtrees, void *data)\n+{\n+  if (TREE_CODE (*tp) == OMP_TARGET)\n+    {\n+      /* And not OMP_DEVICE_ANCESTOR.  */\n+      walk_tree_without_duplicates (&OMP_TARGET_BODY (*tp),\n+\t\t\t\t    omp_discover_declare_target_tgt_fn_r,\n+\t\t\t\t    data);\n+      *walk_subtrees = 0;\n+    }\n+  else if (TYPE_P (*tp))\n+    *walk_subtrees = 0;\n+  return NULL_TREE;\n+}\n+\n /* Helper function for omp_discover_implicit_declare_target, called through\n    walk_tree.  Mark referenced FUNCTION_DECLs implicitly as\n    declare target to.  */\n@@ -227,7 +245,7 @@ static tree\n omp_discover_declare_target_var_r (tree *tp, int *walk_subtrees, void *data)\n {\n   if (TREE_CODE (*tp) == FUNCTION_DECL)\n-    return omp_discover_declare_target_fn_r (tp, walk_subtrees, data);\n+    return omp_discover_declare_target_tgt_fn_r (tp, walk_subtrees, data);\n   else if (VAR_P (*tp)\n \t   && is_global_var (*tp)\n \t   && !omp_declare_target_var_p (*tp))\n@@ -271,21 +289,31 @@ omp_discover_implicit_declare_target (void)\n   auto_vec<tree> worklist;\n \n   FOR_EACH_DEFINED_FUNCTION (node)\n-    if (omp_declare_target_fn_p (node->decl) && DECL_SAVED_TREE (node->decl))\n-      worklist.safe_push (node->decl);\n+    if (DECL_SAVED_TREE (node->decl))\n+      {\n+        if (omp_declare_target_fn_p (node->decl))\n+\t  worklist.safe_push (node->decl);\n+\telse if (DECL_STRUCT_FUNCTION (node->decl)\n+\t\t && DECL_STRUCT_FUNCTION (node->decl)->has_omp_target)\n+\t  worklist.safe_push (node->decl);\n+      }\n   FOR_EACH_STATIC_INITIALIZER (vnode)\n     if (omp_declare_target_var_p (vnode->decl))\n       worklist.safe_push (vnode->decl);\n   while (!worklist.is_empty ())\n     {\n       tree decl = worklist.pop ();\n-      if (TREE_CODE (decl) == FUNCTION_DECL)\n+      if (VAR_P (decl))\n+\twalk_tree_without_duplicates (&DECL_INITIAL (decl),\n+\t\t\t\t      omp_discover_declare_target_var_r,\n+\t\t\t\t      &worklist);\n+      else if (omp_declare_target_fn_p (decl))\n \twalk_tree_without_duplicates (&DECL_SAVED_TREE (decl),\n-\t\t\t\t      omp_discover_declare_target_fn_r,\n+\t\t\t\t      omp_discover_declare_target_tgt_fn_r,\n \t\t\t\t      &worklist);\n       else\n-\twalk_tree_without_duplicates (&DECL_INITIAL (decl),\n-\t\t\t\t      omp_discover_declare_target_var_r,\n+\twalk_tree_without_duplicates (&DECL_SAVED_TREE (decl),\n+\t\t\t\t      omp_discover_declare_target_fn_r,\n \t\t\t\t      &worklist);\n     }\n }"}, {"sha": "4bfce6920bfcda1b933f2ee91bc0f5d2cb671c5e", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f", "patch": "@@ -1,3 +1,7 @@\n+2020-05-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c-c++-common/target-40.c: New test.\n+\n 2020-05-13  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/94690"}, {"sha": "22bbdd97b7ef208464d3cdfa692a477df89bed50", "filename": "libgomp/testsuite/libgomp.c-c++-common/target-40.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-40.c?ref=49ddde69fc8e1e4c48d4b0027ea37ac862da0f1f", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O0\" } */\n+\n+extern\n+#ifdef __cplusplus\n+\"C\"\n+#endif\n+void abort (void);\n+volatile int v;\n+#pragma omp declare target to (v)\n+typedef void (*fnp1) (void);\n+typedef fnp1 (*fnp2) (void);\n+void f1 (void) { v++; }\n+void f2 (void) { v += 4; }\n+void f3 (void) { v += 16; f1 (); }\n+fnp1 f4 (void) { v += 64; return f2; }\n+int a = 1;\n+int *b = &a;\n+int **c = &b;\n+fnp2 f5 (void) { f3 (); return f4; }\n+#pragma omp declare target to (c)\n+\n+int\n+main ()\n+{\n+  int err = 0;\n+  #pragma omp target map(from:err)\n+  {\n+    volatile int xa;\n+    int *volatile xb;\n+    int **volatile xc;\n+    fnp2 xd;\n+    fnp1 xe;\n+    err = 0;\n+    xa = a;\n+    err |= xa != 1;\n+    xb = b;\n+    err |= xb != &a;\n+    xc = c;\n+    err |= xc != &b;\n+    xd = f5 ();\n+    err |= v != 17;\n+    xe = xd ();\n+    err |= v != 81;\n+    xe ();\n+    err |= v != 85;\n+  }\n+  if (err)\n+    abort ();\n+  return 0;\n+}"}]}