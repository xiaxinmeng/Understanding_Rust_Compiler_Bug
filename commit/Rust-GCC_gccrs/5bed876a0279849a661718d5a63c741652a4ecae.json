{"sha": "5bed876a0279849a661718d5a63c741652a4ecae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJlZDg3NmEwMjc5ODQ5YTY2MTcxOGQ1YTYzYzc0MTY1MmE0ZWNhZQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2005-06-15T10:33:51Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2005-06-15T10:33:51Z"}, "message": "c-common.h (same_scalar_type_ignoring_signedness): Protoize.\n\n\t* c-common.h (same_scalar_type_ignoring_signedness): Protoize.\n\n\t* c-common.c (same_scalar_type_ignoring_signedness): New.\n\n\t* c-typeck.c (build_binary_op): Check compatability of vector\n\ttypes.  Move error report after switch.\n\tDo not clobber code[01] on *_DIV_EXPR case.\n\n\t* testsuite/gcc.dg/simd-1.c: Update error messages.\n\t* testsuite/gcc.dg/simd-1b.c: Re-enable tests.  Update error\n\tmessages.\n\t* testsuite/gcc.dg/simd-2.c: Update error messages.\n\t* testsuite/gcc.dg/simd-4.c: New.\n\nFrom-SVN: r100976", "tree": {"sha": "cddc58e82c86c8f543c8c9fe3f96bcc986824672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cddc58e82c86c8f543c8c9fe3f96bcc986824672"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bed876a0279849a661718d5a63c741652a4ecae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bed876a0279849a661718d5a63c741652a4ecae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bed876a0279849a661718d5a63c741652a4ecae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bed876a0279849a661718d5a63c741652a4ecae/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d7f88d86489c2d9868994347173c0b9d5f7ef285", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f88d86489c2d9868994347173c0b9d5f7ef285", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7f88d86489c2d9868994347173c0b9d5f7ef285"}], "stats": {"total": 116, "additions": 90, "deletions": 26}, "files": [{"sha": "d1fb305f3c5de6f07e58e2ada5a6a67d71c68280", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed876a0279849a661718d5a63c741652a4ecae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed876a0279849a661718d5a63c741652a4ecae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5bed876a0279849a661718d5a63c741652a4ecae", "patch": "@@ -1,3 +1,19 @@\n+2005-06-15  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* c-common.h (same_scalar_type_ignoring_signedness): Protoize.\n+\n+\t* c-common.c (same_scalar_type_ignoring_signedness): New.\n+\n+\t* c-typeck.c (build_binary_op): Check compatability of vector\n+\ttypes.  Move error report after switch.\n+\tDo not clobber code[01] on *_DIV_EXPR case.\n+\n+\t* testsuite/gcc.dg/simd-1.c: Update error messages.\n+\t* testsuite/gcc.dg/simd-1b.c: Re-enable tests.  Update error\n+\tmessages.\n+\t* testsuite/gcc.dg/simd-2.c: Update error messages.\n+\t* testsuite/gcc.dg/simd-4.c: New.\n+\n 2005-06-15  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* Makefile.in (local-alloc.o): Depend on $(GGC_H) and reload.h."}, {"sha": "b7263aac48a1f88ea20908f4f8ede580aac9450f", "filename": "gcc/c-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed876a0279849a661718d5a63c741652a4ecae/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed876a0279849a661718d5a63c741652a4ecae/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=5bed876a0279849a661718d5a63c741652a4ecae", "patch": "@@ -6030,4 +6030,19 @@ resolve_overloaded_builtin (tree function, tree params)\n     }\n }\n \n+/* Ignoring their sign, return true if two scalar types are the same.  */\n+bool\n+same_scalar_type_ignoring_signedness (tree t1, tree t2)\n+{\n+  enum tree_code c1 = TREE_CODE (t1), c2 = TREE_CODE (t2);\n+\n+  gcc_assert ((c1 == INTEGER_TYPE || c1 == REAL_TYPE)\n+\t      && (c2 == INTEGER_TYPE || c2 == REAL_TYPE));\n+\n+  /* Equality works here because c_common_signed_type uses\n+     TYPE_MAIN_VARIANT.  */\n+  return lang_hooks.types.signed_type (t1)\n+    == lang_hooks.types.signed_type (t2);\n+}\n+\n #include \"gt-c-common.h\""}, {"sha": "2c594605872f4feba1c1b05156ee4af869d36fdd", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed876a0279849a661718d5a63c741652a4ecae/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed876a0279849a661718d5a63c741652a4ecae/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=5bed876a0279849a661718d5a63c741652a4ecae", "patch": "@@ -657,6 +657,7 @@ extern tree convert_and_check (tree, tree);\n extern void overflow_warning (tree);\n extern void unsigned_conversion_warning (tree, tree);\n extern bool c_determine_visibility (tree);\n+extern bool same_scalar_type_ignoring_signedness (tree, tree);\n \n #define c_sizeof(T)  c_sizeof_or_alignof_type (T, true, 1)\n #define c_alignof(T) c_sizeof_or_alignof_type (T, false, 1)"}, {"sha": "445193d980285ae877facf987aa8fe75a9b79d41", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed876a0279849a661718d5a63c741652a4ecae/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed876a0279849a661718d5a63c741652a4ecae/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=5bed876a0279849a661718d5a63c741652a4ecae", "patch": "@@ -7548,12 +7548,14 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t  && (code1 == INTEGER_TYPE || code1 == REAL_TYPE\n \t      || code1 == COMPLEX_TYPE || code1 == VECTOR_TYPE))\n \t{\n+\t  enum tree_code tcode0 = code0, tcode1 = code1;\n+\n \t  if (code0 == COMPLEX_TYPE || code0 == VECTOR_TYPE)\n-\t    code0 = TREE_CODE (TREE_TYPE (TREE_TYPE (op0)));\n+\t    tcode0 = TREE_CODE (TREE_TYPE (TREE_TYPE (op0)));\n \t  if (code1 == COMPLEX_TYPE || code1 == VECTOR_TYPE)\n-\t    code1 = TREE_CODE (TREE_TYPE (TREE_TYPE (op1)));\n+\t    tcode1 = TREE_CODE (TREE_TYPE (TREE_TYPE (op1)));\n \n-\t  if (!(code0 == INTEGER_TYPE && code1 == INTEGER_TYPE))\n+\t  if (!(tcode0 == INTEGER_TYPE && tcode1 == INTEGER_TYPE))\n \t    resultcode = RDIV_EXPR;\n \t  else\n \t    /* Although it would be tempting to shorten always here, that\n@@ -7793,6 +7795,15 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n   if (code0 == ERROR_MARK || code1 == ERROR_MARK)\n     return error_mark_node;\n \n+  if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE\n+      && (!tree_int_cst_equal (TYPE_SIZE (type0), TYPE_SIZE (type1))\n+\t  || !same_scalar_type_ignoring_signedness (TREE_TYPE (type0),\n+\t\t\t\t\t\t    TREE_TYPE (type1))))\n+    {\n+      binary_op_error (code);\n+      return error_mark_node;\n+    }\n+\n   if ((code0 == INTEGER_TYPE || code0 == REAL_TYPE || code0 == COMPLEX_TYPE\n        || code0 == VECTOR_TYPE)\n       &&"}, {"sha": "d6e6a64160b8057425f1dae5cfe29ed853c57bd6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed876a0279849a661718d5a63c741652a4ecae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed876a0279849a661718d5a63c741652a4ecae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5bed876a0279849a661718d5a63c741652a4ecae", "patch": "@@ -1,3 +1,10 @@\n+2005-06-15  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/simd-1.c: Update error messages.\n+\t* gcc.dg/simd-1b.c: Re-enable tests.  Update error messages.\n+\t* gcc.dg/simd-2.c: Update error messages.\n+\t* gcc.dg/simd-4.c: New.\n+\n 2005-06-15  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/20678"}, {"sha": "faf33dd00fb408984b18984ead921fb77d28eb3c", "filename": "gcc/testsuite/gcc.dg/simd-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed876a0279849a661718d5a63c741652a4ecae/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed876a0279849a661718d5a63c741652a4ecae/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1.c?ref=5bed876a0279849a661718d5a63c741652a4ecae", "patch": "@@ -54,8 +54,8 @@ hanneke ()\n   a = -b;\n \n   /* Operators on incompatible SIMD types.  */\n-  a = b + c; /* { dg-error \"can't convert between vector values of different size\" } */\n-  a = b - c; /* { dg-error \"can't convert between vector values of different size\" } */\n-  a = b * c; /* { dg-error \"can't convert between vector values of different size\" } */\n-  a = b / c; /* { dg-error \"can't convert between vector values of different size\" } */\n+  a = b + c; /* { dg-error \"invalid operands to binary +\" } */\n+  a = b - c; /* { dg-error \"invalid operands to binary -\" } */\n+  a = b * c; /* { dg-error \"invalid operands to binary *\" } */\n+  a = b / c; /* { dg-error \"invalid operands to binary /\" } */\n }"}, {"sha": "56d94b91c68fa9e5f092b50b5a0187588bc336c9", "filename": "gcc/testsuite/gcc.dg/simd-1b.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed876a0279849a661718d5a63c741652a4ecae/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed876a0279849a661718d5a63c741652a4ecae/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1b.c?ref=5bed876a0279849a661718d5a63c741652a4ecae", "patch": "@@ -14,23 +14,23 @@ void\n hanneke ()\n {\n   /* Operators on compatible SIMD types.  */\n-  a %= b; /* { dg-bogus \"invalid operands to binary %\" \"\" { xfail *-*-* } } */\n+  a %= b; /* { dg-error \"invalid operands to binary %\" } */\n   c &= d;\n   a |= b;\n   c ^= d;\n-  a >>= b; /* { dg-bogus \"invalid operands to binary >>\" \"\" { xfail *-*-* } } */\n-  c <<= d; /* { dg-bogus \"invalid operands to binary <<\" \"\" { xfail *-*-* } } */\n+  a >>= b; /* { dg-error \"invalid operands to binary >>\" } */\n+  c <<= d; /* { dg-error \"invalid operands to binary <<\" } */\n   a = +b;\n   c = ~d;\n \n   /* Operators on incompatible SIMD types.  */\n-/*  a = b % c;  { dg*error \"can't convert between vector values of different size\" } */\n-  a = b % c; /* { dg-bogus \"invalid operands to binary %\" \"\" { xfail *-*-* } } */\n-  d = c & b; /* { dg-error \"can't convert between vector values of different size\" } */\n-  a = b | c; /* { dg-error \"can't convert between vector values of different size\" } */\n-  d = c ^ b; /* { dg-error \"can't convert between vector values of different size\" } */\n-/*  a = b >> c;  { dg*error \"can't convert between vector values of different size\" } */\n-  a = b >> c; /* { dg-bogus \"invalid operands to binary >>\" \"\" { xfail *-*-* } } */\n-/*  d = c << b;  { dg*error \"can't convert between vector values of different size\" } */\n-  d = c << b; /* { dg-bogus \"invalid operands to binary <<\" \"\" { xfail *-*-* } } */\n+  a = b % c; /* { dg-error \"invalid operands to binary\" } */\n+  a = b % c; /* { dg-error \"invalid operands to binary\" } */\n+  d = c & b; /* { dg-error \"invalid operands to binary\" } */\n+  a = b | c; /* { dg-error \"invalid operands to binary\" } */\n+  d = c ^ b; /* { dg-error \"invalid operands to binary\" } */\n+  a = b >> c; /*  { dg-error \"invalid operands to binary\" } */\n+  a = b >> c; /* { dg-error \"invalid operands to binary\" } */\n+  d = c << b; /* { dg-error \"invalid operands to binary\" } */\n+  d = c << b; /* { dg-error \"invalid operands to binary\" } */\n }"}, {"sha": "09e28a7798af7c81dcd087c8cbc35878911fdf47", "filename": "gcc/testsuite/gcc.dg/simd-2.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed876a0279849a661718d5a63c741652a4ecae/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed876a0279849a661718d5a63c741652a4ecae/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-2.c?ref=5bed876a0279849a661718d5a63c741652a4ecae", "patch": "@@ -33,11 +33,10 @@ hanneke ()\n   foo = a; /* { dg-error \"incompatible types in assignment\" } */\n \n   /* Casted assignment between scalar and SIMD of same size.  */\n-  foo = (typeof (foo)) foo2; /* { dg-bogus \"aggregate value used where a float was expected\" \"\" { xfail *-*-* } } */\n+  foo = (typeof (foo)) foo2; /* { dg-error \"aggregate value used where a float was expected\" } */\n \n   /* Casted assignment between scalar and SIMD of different size.  */\n-/*  foo1 = (typeof (foo1)) foo2;  { dg*error \"can't convert between vector values of different size\" } */\n-  foo1 = (typeof (foo1)) foo2; /* { dg-bogus \"aggregate value used where a float was expected\" \"\" { xfail *-*-* } } */\n+  foo1 = (typeof (foo1)) foo2; /* { dg-error \"aggregate value used where a float was expected\" } */\n \n   /* Operators on compatible SIMD types.  */\n   a += b + b;\n@@ -48,8 +47,8 @@ hanneke ()\n   c = -d;\n \n   /* Operators on incompatible SIMD types.  */\n-  a = b + c; /* { dg-error \"can't convert between vector values of different size\" } */\n-  a = b - c; /* { dg-error \"can't convert between vector values of different size\" } */\n-  a = b * c; /* { dg-error \"can't convert between vector values of different size\" } */\n-  a = b / c; /* { dg-error \"can't convert between vector values of different size\" } */\n+  a = b + c; /* { dg-error \"invalid operands to binary\" } */\n+  a = b - c; /* { dg-error \"invalid operands to binary\" } */\n+  a = b * c; /* { dg-error \"invalid operands to binary\" } */\n+  a = b / c; /* { dg-error \"invalid operands to binary\" } */\n }"}, {"sha": "f7b28d45229801a2d4b28d500f0b7f9d979ffe11", "filename": "gcc/testsuite/gcc.dg/simd-4.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bed876a0279849a661718d5a63c741652a4ecae/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bed876a0279849a661718d5a63c741652a4ecae/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-4.c?ref=5bed876a0279849a661718d5a63c741652a4ecae", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+typedef int myint;\n+\n+float __attribute__((vector_size(16))) b;\n+int __attribute__((vector_size(16))) d;\n+myint __attribute__((vector_size(16))) d2;\n+unsigned int __attribute__((vector_size(16))) e;\n+\n+void foo()\n+{\n+\tb + d; /* { dg-error \"invalid operands to binary\" } */\n+\td += e;\n+\td2 += d;\n+}"}]}