{"sha": "848be0946c097a25e63acea3e16eee11fc41e6c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ4YmUwOTQ2YzA5N2EyNWU2M2FjZWEzZTE2ZWVlMTFmYzQxZTZjOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-10-24T09:08:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-10-24T09:08:56Z"}, "message": "re PR debug/54828 (ICE in based_loc_descr at dwarf2out.c:10560 with -g -O0)\n\n\tPR debug/54828\n\t* gimple.h (is_gimple_sizepos): New inline function.\n\t* gimplify.c (gimplify_one_sizepos): Use it.  Remove useless\n\tfinal assignment to expr variable.\n\t* tree.c (RETURN_TRUE_IF_VAR): Return true also if\n\t!TYPE_SIZES_GIMPLIFIED (type) and _t is going to be gimplified\n\tinto a local temporary.\n\n\t* g++.dg/debug/pr54828.C: New test.\n\nFrom-SVN: r192759", "tree": {"sha": "5d960bdbe98ce91b7d6e48d032f6ef7eee82c859", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d960bdbe98ce91b7d6e48d032f6ef7eee82c859"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/848be0946c097a25e63acea3e16eee11fc41e6c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/848be0946c097a25e63acea3e16eee11fc41e6c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/848be0946c097a25e63acea3e16eee11fc41e6c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/848be0946c097a25e63acea3e16eee11fc41e6c9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9106d8d2153532281e2527d997e2a570ac06669b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9106d8d2153532281e2527d997e2a570ac06669b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9106d8d2153532281e2527d997e2a570ac06669b"}], "stats": {"total": 61, "additions": 55, "deletions": 6}, "files": [{"sha": "e8be5419cb2e4e2599a102e744fca1bdee2c59e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848be0946c097a25e63acea3e16eee11fc41e6c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848be0946c097a25e63acea3e16eee11fc41e6c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=848be0946c097a25e63acea3e16eee11fc41e6c9", "patch": "@@ -1,3 +1,13 @@\n+2012-10-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/54828\n+\t* gimple.h (is_gimple_sizepos): New inline function.\n+\t* gimplify.c (gimplify_one_sizepos): Use it.  Remove useless\n+\tfinal assignment to expr variable.\n+\t* tree.c (RETURN_TRUE_IF_VAR): Return true also if\n+\t!TYPE_SIZES_GIMPLIFIED (type) and _t is going to be gimplified\n+\tinto a local temporary.\n+\n 2012-10-23  David S. Miller  <davem@davemloft.net>\n \n \t* config/sparc/constraints.md (\"T\", \"W\"): Change"}, {"sha": "b34016aaac139bac5064ffbddf63ab1960a2fe3c", "filename": "gcc/gimple.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848be0946c097a25e63acea3e16eee11fc41e6c9/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848be0946c097a25e63acea3e16eee11fc41e6c9/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=848be0946c097a25e63acea3e16eee11fc41e6c9", "patch": "@@ -957,6 +957,24 @@ struct gimplify_ctx\n   bool in_cleanup_point_expr;\n };\n \n+/* Return true if gimplify_one_sizepos doesn't need to gimplify\n+   expr (when in TYPE_SIZE{,_UNIT} and similar type/decl size/bitsize\n+   fields).  */\n+static inline bool\n+is_gimple_sizepos (tree expr)\n+{\n+  /* gimplify_one_sizepos doesn't need to do anything if the value isn't there,\n+     is constant, or contains A PLACEHOLDER_EXPR.  We also don't want to do\n+     anything if it's already a VAR_DECL.  If it's a VAR_DECL from another\n+     function, the gimplifier will want to replace it with a new variable,\n+     but that will cause problems if this type is from outside the function.\n+     It's OK to have that here.  */\n+  return (expr == NULL_TREE\n+\t  || TREE_CONSTANT (expr)\n+\t  || TREE_CODE (expr) == VAR_DECL\n+\t  || CONTAINS_PLACEHOLDER_P (expr));\n+}                                        \n+\n extern enum gimplify_status gimplify_expr (tree *, gimple_seq *, gimple_seq *,\n \t\t\t\t\t   bool (*) (tree), fallback_t);\n extern void gimplify_type_sizes (tree, gimple_seq *);"}, {"sha": "0919d9ff76a2636d79cc32deaebefb6656aef34f", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848be0946c097a25e63acea3e16eee11fc41e6c9/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848be0946c097a25e63acea3e16eee11fc41e6c9/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=848be0946c097a25e63acea3e16eee11fc41e6c9", "patch": "@@ -8147,15 +8147,12 @@ gimplify_one_sizepos (tree *expr_p, gimple_seq *stmt_p)\n      a VAR_DECL.  If it's a VAR_DECL from another function, the gimplifier\n      will want to replace it with a new variable, but that will cause problems\n      if this type is from outside the function.  It's OK to have that here.  */\n-  if (expr == NULL_TREE || TREE_CONSTANT (expr)\n-      || TREE_CODE (expr) == VAR_DECL\n-      || CONTAINS_PLACEHOLDER_P (expr))\n+  if (is_gimple_sizepos (expr))\n     return;\n \n   *expr_p = unshare_expr (expr);\n \n   gimplify_expr (expr_p, stmt_p, NULL, is_gimple_val, fb_rvalue);\n-  expr = *expr_p;\n }\n \n /* Gimplify the body of statements of FNDECL and return a GIMPLE_BIND node"}, {"sha": "0648f1e69cb545bb9927f72f74e4115097621f59", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848be0946c097a25e63acea3e16eee11fc41e6c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848be0946c097a25e63acea3e16eee11fc41e6c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=848be0946c097a25e63acea3e16eee11fc41e6c9", "patch": "@@ -1,3 +1,8 @@\n+2012-10-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/54828\n+\t* g++.dg/debug/pr54828.C: New test.\n+\n 2012-10-23  Dominique d'Humieres  <dominiq@lps.ens.fr>\n \n         * gcc.dg/vect/vect-82_64.c: Adjust the dump file."}, {"sha": "80b9a3ce070b1ad1c7d23ed491dd8cbaccd07a93", "filename": "gcc/testsuite/g++.dg/debug/pr54828.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848be0946c097a25e63acea3e16eee11fc41e6c9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr54828.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848be0946c097a25e63acea3e16eee11fc41e6c9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr54828.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr54828.C?ref=848be0946c097a25e63acea3e16eee11fc41e6c9", "patch": "@@ -0,0 +1,14 @@\n+// PR debug/54828\n+// { dg-do compile }\n+// { dg-options \"-g\" }\n+\n+struct T { T (); virtual ~T (); };\n+struct S : public virtual T { S (); virtual ~S (); };\n+int v;\n+void foo (char *);\n+\n+S::S ()\n+{\n+  char s[v];\n+  foo (s);\n+}"}, {"sha": "7cb1ea14d1d7652f16e0f9dc8a21cb625639a545", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/848be0946c097a25e63acea3e16eee11fc41e6c9/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/848be0946c097a25e63acea3e16eee11fc41e6c9/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=848be0946c097a25e63acea3e16eee11fc41e6c9", "patch": "@@ -8467,14 +8467,19 @@ variably_modified_type_p (tree type, tree fn)\n   tree t;\n \n /* Test if T is either variable (if FN is zero) or an expression containing\n-   a variable in FN.  */\n+   a variable in FN.  If TYPE isn't gimplified, return true also if\n+   gimplify_one_sizepos would gimplify the expression into a local\n+   variable.  */\n #define RETURN_TRUE_IF_VAR(T)\t\t\t\t\t\t\\\n   do { tree _t = (T);\t\t\t\t\t\t\t\\\n     if (_t != NULL_TREE\t\t\t\t\t\t\t\\\n \t&& _t != error_mark_node\t\t\t\t\t\\\n \t&& TREE_CODE (_t) != INTEGER_CST\t\t\t\t\\\n \t&& TREE_CODE (_t) != PLACEHOLDER_EXPR\t\t\t\t\\\n-\t&& (!fn || walk_tree (&_t, find_var_from_fn, fn, NULL)))\t\\\n+\t&& (!fn\t\t\t\t\t\t\t\t\\\n+\t    || (!TYPE_SIZES_GIMPLIFIED (type)\t\t\t\t\\\n+\t\t&& !is_gimple_sizepos (_t))\t\t\t\t\\\n+\t    || walk_tree (&_t, find_var_from_fn, fn, NULL)))\t\t\\\n       return true;  } while (0)\n \n   if (type == error_mark_node)"}]}