{"sha": "75c7257f75227e3db09120e38562cf3a3c136ced", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVjNzI1N2Y3NTIyN2UzZGIwOTEyMGUzODU2MmNmM2EzYzEzNmNlZA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-05-23T10:18:19Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-05-23T10:18:19Z"}, "message": "[AArch64] Fix possible wrong code generation when comparing DImode values.\n\ngcc/\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_cm<optab>di): Add clobber of CC_REGNUM to unsplit pattern.\n\nFrom-SVN: r199241", "tree": {"sha": "287bb3cff3821496887f4c3c9e239118156f2c3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/287bb3cff3821496887f4c3c9e239118156f2c3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75c7257f75227e3db09120e38562cf3a3c136ced", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c7257f75227e3db09120e38562cf3a3c136ced", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75c7257f75227e3db09120e38562cf3a3c136ced", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c7257f75227e3db09120e38562cf3a3c136ced/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "af6d44b57389b939aa515c177ce35d1e23b2cc07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af6d44b57389b939aa515c177ce35d1e23b2cc07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af6d44b57389b939aa515c177ce35d1e23b2cc07"}], "stats": {"total": 47, "additions": 15, "deletions": 32}, "files": [{"sha": "fdfa20c0ddc2811bd3ed1eae9a5f4393edefff4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c7257f75227e3db09120e38562cf3a3c136ced/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c7257f75227e3db09120e38562cf3a3c136ced/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75c7257f75227e3db09120e38562cf3a3c136ced", "patch": "@@ -1,3 +1,8 @@\n+2013-05-23  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_cm<optab>di): Add clobber of CC_REGNUM to unsplit pattern.\n+\n 2013-05-23  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/57381"}, {"sha": "f91cf814accdd681f09a7c06ed4e2242425f979c", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 10, "deletions": 32, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c7257f75227e3db09120e38562cf3a3c136ced/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c7257f75227e3db09120e38562cf3a3c136ced/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=75c7257f75227e3db09120e38562cf3a3c136ced", "patch": "@@ -3280,7 +3280,8 @@\n \t  (COMPARISONS:DI\n \t    (match_operand:DI 1 \"register_operand\" \"w,w,r\")\n \t    (match_operand:DI 2 \"aarch64_simd_reg_or_zero\" \"w,ZDz,r\")\n-\t  )))]\n+\t  )))\n+     (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_SIMD\"\n   \"@\n   cm<n_optab>\\t%d0, %d<cmp_1>, %d<cmp_2>\n@@ -3291,15 +3292,7 @@\n       happening in the 'w' constraint cases.  */\n    && GP_REGNUM_P (REGNO (operands[0]))\n    && GP_REGNUM_P (REGNO (operands[1]))\"\n-  [(set (reg:CC CC_REGNUM)\n-    (compare:CC\n-      (match_dup 1)\n-      (match_dup 2)))\n-  (set (match_dup 0)\n-    (neg:DI\n-      (COMPARISONS:DI\n-\t(match_operand 3 \"cc_register\" \"\")\n-\t(const_int 0))))]\n+  [(const_int 0)]\n   {\n     enum machine_mode mode = SELECT_CC_MODE (<CMP>, operands[1], operands[2]);\n     rtx cc_reg = aarch64_gen_compare_reg (<CMP>, operands[1], operands[2]);\n@@ -3332,7 +3325,8 @@\n \t  (UCOMPARISONS:DI\n \t    (match_operand:DI 1 \"register_operand\" \"w,r\")\n \t    (match_operand:DI 2 \"aarch64_simd_reg_or_zero\" \"w,r\")\n-\t  )))]\n+\t  )))\n+    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_SIMD\"\n   \"@\n   cm<n_optab>\\t%d0, %d<cmp_1>, %d<cmp_2>\n@@ -3342,17 +3336,9 @@\n       happening in the 'w' constraint cases.  */\n    && GP_REGNUM_P (REGNO (operands[0]))\n    && GP_REGNUM_P (REGNO (operands[1]))\"\n-  [(set (reg:CC CC_REGNUM)\n-    (compare:CC\n-      (match_dup 1)\n-      (match_dup 2)))\n-  (set (match_dup 0)\n-    (neg:DI\n-      (UCOMPARISONS:DI\n-\t(match_operand 3 \"cc_register\" \"\")\n-\t(const_int 0))))]\n+  [(const_int 0)]\n   {\n-    enum machine_mode mode = SELECT_CC_MODE (<CMP>, operands[1], operands[2]);\n+    enum machine_mode mode = CCmode;\n     rtx cc_reg = aarch64_gen_compare_reg (<CMP>, operands[1], operands[2]);\n     rtx comparison = gen_rtx_<CMP> (mode, operands[1], operands[2]);\n     emit_insn (gen_cstoredi_neg (operands[0], comparison, cc_reg));\n@@ -3385,7 +3371,8 @@\n \t    (and:DI\n \t      (match_operand:DI 1 \"register_operand\" \"w,r\")\n \t      (match_operand:DI 2 \"register_operand\" \"w,r\"))\n-\t    (const_int 0))))]\n+\t    (const_int 0))))\n+    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_SIMD\"\n   \"@\n   cmtst\\t%d0, %d1, %d2\n@@ -3395,16 +3382,7 @@\n       happening in the 'w' constraint cases.  */\n    && GP_REGNUM_P (REGNO (operands[0]))\n    && GP_REGNUM_P (REGNO (operands[1]))\"\n-   [(set (reg:CC_NZ CC_REGNUM)\n-\t(compare:CC_NZ\n-\t (and:DI (match_dup 1)\n-\t\t  (match_dup 2))\n-\t (const_int 0)))\n-  (set (match_dup 0)\n-    (neg:DI\n-      (ne:DI\n-\t(match_operand 3 \"cc_register\" \"\")\n-\t(const_int 0))))]\n+  [(const_int 0)]\n   {\n     rtx and_tree = gen_rtx_AND (DImode, operands[1], operands[2]);\n     enum machine_mode mode = SELECT_CC_MODE (NE, and_tree, const0_rtx);"}]}