{"sha": "fd1e52dc252b33f918891458774f784e96fdf47e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQxZTUyZGMyNTJiMzNmOTE4ODkxNDU4Nzc0Zjc4NGU5NmZkZjQ3ZQ==", "commit": {"author": {"name": "Jim Wilson", "email": "jimw@sifive.com", "date": "2018-06-04T23:44:43Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2018-06-04T23:44:43Z"}, "message": "RISC-V: Don't clobber retval when __builtin_eh_return called.\n\n\tgcc/\n\t* config/riscv/riscv-protos.h (riscv_expand_epilogue): Change bool arg\n\tto int.\n\t* config/riscv/riscv.c (riscv_for_each_saved_reg): New args epilogue\n\tand maybe_eh_return.  Change regno to unsigned int.  Use new args to\n\thandle EH_RETURN_DATA_REGNO registers properly.\n\t(riscv_expand_prologue): Pass new args to riscv_for_each_saved_reg.\n\t(riscv_expand_epilogue): Update comment.  Change argument name and\n\ttype.  Update code to use new name and type.  Pass new args to\n\triscv_for_each_saved_reg.  Only use EH_RETURN_STACKADJ_RTX when\n\tEXCEPTION_RETURN.\n\t* config/riscv/riscv.md (NORMAL_RETURN): New.\n\t(SIBCALL_RETURN, EXCEPTION_RETURN): New.\n\t(epilogue, sibcall_epilogue): Update riscv_expand_epilogue arg.\n\t(eh_return): Call gen_eh_return_internal and emit barrier.\n\t(eh_return_internal): Call riscv_expand_epilogue.\n\nFrom-SVN: r261176", "tree": {"sha": "03263010be208d5849160a44dc4bb222b68e0daa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03263010be208d5849160a44dc4bb222b68e0daa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd1e52dc252b33f918891458774f784e96fdf47e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd1e52dc252b33f918891458774f784e96fdf47e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd1e52dc252b33f918891458774f784e96fdf47e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd1e52dc252b33f918891458774f784e96fdf47e/comments", "author": null, "committer": null, "parents": [{"sha": "7f5a3982462c30aab676a3bf09ef4a62a30c7696", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f5a3982462c30aab676a3bf09ef4a62a30c7696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f5a3982462c30aab676a3bf09ef4a62a30c7696"}], "stats": {"total": 91, "additions": 74, "deletions": 17}, "files": [{"sha": "ebf9dc43ee6a46da7435a62561950c304647d395", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e52dc252b33f918891458774f784e96fdf47e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e52dc252b33f918891458774f784e96fdf47e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd1e52dc252b33f918891458774f784e96fdf47e", "patch": "@@ -1,3 +1,21 @@\n+2018-06-04  Jim Wilson  <jimw@sifive.com>\n+\n+\t* config/riscv/riscv-protos.h (riscv_expand_epilogue): Change bool arg\n+\tto int.\n+\t* config/riscv/riscv.c (riscv_for_each_saved_reg): New args epilogue\n+\tand maybe_eh_return.  Change regno to unsigned int.  Use new args to\n+\thandle EH_RETURN_DATA_REGNO registers properly.\n+\t(riscv_expand_prologue): Pass new args to riscv_for_each_saved_reg.\n+\t(riscv_expand_epilogue): Update comment.  Change argument name and\n+\ttype.  Update code to use new name and type.  Pass new args to\n+\triscv_for_each_saved_reg.  Only use EH_RETURN_STACKADJ_RTX when\n+\tEXCEPTION_RETURN.\n+\t* config/riscv/riscv.md (NORMAL_RETURN): New.\n+\t(SIBCALL_RETURN, EXCEPTION_RETURN): New.\n+\t(epilogue, sibcall_epilogue): Update riscv_expand_epilogue arg.\n+\t(eh_return): Call gen_eh_return_internal and emit barrier.\n+\t(eh_return_internal): Call riscv_expand_epilogue.\n+\n 2018-06-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gimple-ssa-store-merging.c (struct merged_store_group): Move up"}, {"sha": "f158ed007dd78c7012882398f372a9d8970723cf", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e52dc252b33f918891458774f784e96fdf47e/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e52dc252b33f918891458774f784e96fdf47e/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=fd1e52dc252b33f918891458774f784e96fdf47e", "patch": "@@ -66,7 +66,7 @@ extern bool riscv_expand_block_move (rtx, rtx, rtx);\n extern rtx riscv_return_addr (int, rtx);\n extern HOST_WIDE_INT riscv_initial_elimination_offset (int, int);\n extern void riscv_expand_prologue (void);\n-extern void riscv_expand_epilogue (bool);\n+extern void riscv_expand_epilogue (int);\n extern bool riscv_epilogue_uses (unsigned int);\n extern bool riscv_can_use_return_insn (void);\n extern rtx riscv_function_value (const_tree, const_tree, enum machine_mode);"}, {"sha": "c418dc1ec2e18296cd8df54c88f5f65d930c4a5b", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e52dc252b33f918891458774f784e96fdf47e/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e52dc252b33f918891458774f784e96fdf47e/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=fd1e52dc252b33f918891458774f784e96fdf47e", "patch": "@@ -3502,23 +3502,45 @@ riscv_save_restore_reg (machine_mode mode, int regno,\n    of the frame.  */\n \n static void\n-riscv_for_each_saved_reg (HOST_WIDE_INT sp_offset, riscv_save_restore_fn fn)\n+riscv_for_each_saved_reg (HOST_WIDE_INT sp_offset, riscv_save_restore_fn fn,\n+\t\t\t  bool epilogue, bool maybe_eh_return)\n {\n   HOST_WIDE_INT offset;\n \n   /* Save the link register and s-registers. */\n   offset = cfun->machine->frame.gp_sp_offset - sp_offset;\n-  for (int regno = GP_REG_FIRST; regno <= GP_REG_LAST; regno++)\n+  for (unsigned int regno = GP_REG_FIRST; regno <= GP_REG_LAST; regno++)\n     if (BITSET_P (cfun->machine->frame.mask, regno - GP_REG_FIRST))\n       {\n-\triscv_save_restore_reg (word_mode, regno, offset, fn);\n+\tbool handle_reg = TRUE;\n+\n+\t/* If this is a normal return in a function that calls the eh_return\n+\t   builtin, then do not restore the eh return data registers as that\n+\t   would clobber the return value.  But we do still need to save them\n+\t   in the prologue, and restore them for an exception return, so we\n+\t   need special handling here.  */\n+\tif (epilogue && !maybe_eh_return && crtl->calls_eh_return)\n+\t  {\n+\t    unsigned int i, regnum;\n+\n+\t    for (i = 0; (regnum = EH_RETURN_DATA_REGNO (i)) != INVALID_REGNUM;\n+\t\t i++)\n+\t      if (regno == regnum)\n+\t\t{\n+\t\t  handle_reg = FALSE;\n+\t\t  break;\n+\t\t}\n+\t  }\n+\n+\tif (handle_reg)\n+\t  riscv_save_restore_reg (word_mode, regno, offset, fn);\n \toffset -= UNITS_PER_WORD;\n       }\n \n   /* This loop must iterate over the same space as its companion in\n      riscv_compute_frame_info.  */\n   offset = cfun->machine->frame.fp_sp_offset - sp_offset;\n-  for (int regno = FP_REG_FIRST; regno <= FP_REG_LAST; regno++)\n+  for (unsigned int regno = FP_REG_FIRST; regno <= FP_REG_LAST; regno++)\n     if (BITSET_P (cfun->machine->frame.fmask, regno - FP_REG_FIRST))\n       {\n \tmachine_mode mode = TARGET_DOUBLE_FLOAT ? DFmode : SFmode;\n@@ -3694,7 +3716,7 @@ riscv_expand_prologue (void)\n \t\t\t    GEN_INT (-step1));\n       RTX_FRAME_RELATED_P (emit_insn (insn)) = 1;\n       size -= step1;\n-      riscv_for_each_saved_reg (size, riscv_save_reg);\n+      riscv_for_each_saved_reg (size, riscv_save_reg, false, false);\n     }\n \n   frame->mask = mask; /* Undo the above fib.  */\n@@ -3756,11 +3778,11 @@ riscv_adjust_libcall_cfi_epilogue ()\n   return dwarf;\n }\n \n-/* Expand an \"epilogue\" or \"sibcall_epilogue\" pattern; SIBCALL_P\n-   says which.  */\n+/* Expand an \"epilogue\", \"sibcall_epilogue\", or \"eh_return_internal\" pattern;\n+   style says which.  */\n \n void\n-riscv_expand_epilogue (bool sibcall_p)\n+riscv_expand_epilogue (int style)\n {\n   /* Split the frame into two.  STEP1 is the amount of stack we should\n      deallocate before restoring the registers.  STEP2 is the amount we\n@@ -3771,7 +3793,8 @@ riscv_expand_epilogue (bool sibcall_p)\n   unsigned mask = frame->mask;\n   HOST_WIDE_INT step1 = frame->total_size;\n   HOST_WIDE_INT step2 = 0;\n-  bool use_restore_libcall = !sibcall_p && riscv_use_save_libcall (frame);\n+  bool use_restore_libcall = ((style == NORMAL_RETURN)\n+\t\t\t      && riscv_use_save_libcall (frame));\n   rtx ra = gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM);\n   rtx insn;\n \n@@ -3781,14 +3804,14 @@ riscv_expand_epilogue (bool sibcall_p)\n \n   if (cfun->machine->naked_p)\n     {\n-      gcc_assert (!sibcall_p);\n+      gcc_assert (style == NORMAL_RETURN);\n \n       emit_jump_insn (gen_return ());\n \n       return;\n     }\n \n-  if (!sibcall_p && riscv_can_use_return_insn ())\n+  if ((style == NORMAL_RETURN) && riscv_can_use_return_insn ())\n     {\n       emit_jump_insn (gen_return ());\n       return;\n@@ -3863,7 +3886,8 @@ riscv_expand_epilogue (bool sibcall_p)\n     frame->mask = 0; /* Temporarily fib that we need not save GPRs.  */\n \n   /* Restore the registers.  */\n-  riscv_for_each_saved_reg (frame->total_size - step2, riscv_restore_reg);\n+  riscv_for_each_saved_reg (frame->total_size - step2, riscv_restore_reg,\n+\t\t\t    true, style == EXCEPTION_RETURN);\n \n   if (use_restore_libcall)\n     {\n@@ -3902,14 +3926,14 @@ riscv_expand_epilogue (bool sibcall_p)\n     }\n \n   /* Add in the __builtin_eh_return stack adjustment. */\n-  if (crtl->calls_eh_return)\n+  if ((style == EXCEPTION_RETURN) && crtl->calls_eh_return)\n     emit_insn (gen_add3_insn (stack_pointer_rtx, stack_pointer_rtx,\n \t\t\t      EH_RETURN_STACKADJ_RTX));\n \n   /* Return from interrupt.  */\n   if (cfun->machine->interrupt_handler_p)\n     emit_insn (gen_riscv_mret ());\n-  else if (!sibcall_p)\n+  else if (style != SIBCALL_RETURN)\n     emit_jump_insn (gen_simple_return_internal (ra));\n }\n "}, {"sha": "b9faf00d076eb625f30876831ce961a595beb7a0", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd1e52dc252b33f918891458774f784e96fdf47e/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd1e52dc252b33f918891458774f784e96fdf47e/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=fd1e52dc252b33f918891458774f784e96fdf47e", "patch": "@@ -73,6 +73,10 @@\n    (S0_REGNUM\t\t\t8)\n    (S1_REGNUM\t\t\t9)\n    (S2_REGNUM\t\t\t18)\n+\n+   (NORMAL_RETURN\t\t0)\n+   (SIBCALL_RETURN\t\t1)\n+   (EXCEPTION_RETURN\t\t2)\n ])\n \n (include \"predicates.md\")\n@@ -2036,15 +2040,15 @@\n   [(const_int 2)]\n   \"\"\n {\n-  riscv_expand_epilogue (false);\n+  riscv_expand_epilogue (NORMAL_RETURN);\n   DONE;\n })\n \n (define_expand \"sibcall_epilogue\"\n   [(const_int 2)]\n   \"\"\n {\n-  riscv_expand_epilogue (true);\n+  riscv_expand_epilogue (SIBCALL_RETURN);\n   DONE;\n })\n \n@@ -2086,6 +2090,9 @@\n     emit_insn (gen_eh_set_lr_di (operands[0]));\n   else\n     emit_insn (gen_eh_set_lr_si (operands[0]));\n+\n+  emit_jump_insn (gen_eh_return_internal ());\n+  emit_barrier ();\n   DONE;\n })\n \n@@ -2114,6 +2121,14 @@\n   DONE;\n })\n \n+(define_insn_and_split \"eh_return_internal\"\n+  [(eh_return)]\n+  \"\"\n+  \"#\"\n+  \"epilogue_completed\"\n+  [(const_int 0)]\n+  \"riscv_expand_epilogue (EXCEPTION_RETURN); DONE;\")\n+\n ;;\n ;;  ....................\n ;;"}]}