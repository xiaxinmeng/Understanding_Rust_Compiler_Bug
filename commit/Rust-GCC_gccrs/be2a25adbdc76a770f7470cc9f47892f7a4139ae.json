{"sha": "be2a25adbdc76a770f7470cc9f47892f7a4139ae", "node_id": "C_kwDOANBUbNoAKGJlMmEyNWFkYmRjNzZhNzcwZjc0NzBjYzlmNDc4OTJmN2E0MTM5YWU", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-09-20T16:34:08Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-09-22T18:48:28Z"}, "message": "Add missing float fold_range prototype for floats.\n\nUnary operations require op2 to be the range of the type of the LHS.\nThis is so the type for the LHS can be properly set.\n\n\t* range-op-float.cc (range_operator_float::fold_range): New base\n\t  method for \"int = float op int\".\n\t* range-op.cc (range_op_handler::fold_range): New case.\n\t* range-op.h: Update prototypes.", "tree": {"sha": "8ce71a877a1dbee074dac21640572edc6254cd52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ce71a877a1dbee074dac21640572edc6254cd52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be2a25adbdc76a770f7470cc9f47892f7a4139ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be2a25adbdc76a770f7470cc9f47892f7a4139ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be2a25adbdc76a770f7470cc9f47892f7a4139ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be2a25adbdc76a770f7470cc9f47892f7a4139ae/comments", "author": null, "committer": null, "parents": [{"sha": "a7a6649f4e7c459a95dee1600554ad06aaeb1cf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a6649f4e7c459a95dee1600554ad06aaeb1cf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7a6649f4e7c459a95dee1600554ad06aaeb1cf6"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "aa5b7ed073dc6c221ba69c06d988d99319739326", "filename": "gcc/range-op-float.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be2a25adbdc76a770f7470cc9f47892f7a4139ae/gcc%2Frange-op-float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be2a25adbdc76a770f7470cc9f47892f7a4139ae/gcc%2Frange-op-float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op-float.cc?ref=be2a25adbdc76a770f7470cc9f47892f7a4139ae", "patch": "@@ -58,6 +58,16 @@ range_operator_float::fold_range (frange &r ATTRIBUTE_UNUSED,\n   return false;\n }\n \n+bool\n+range_operator_float::fold_range (irange &r ATTRIBUTE_UNUSED,\n+\t\t\t\t  tree type ATTRIBUTE_UNUSED,\n+\t\t\t\t  const frange &lh ATTRIBUTE_UNUSED,\n+\t\t\t\t  const irange &rh ATTRIBUTE_UNUSED,\n+\t\t\t\t  relation_kind rel ATTRIBUTE_UNUSED) const\n+{\n+  return false;\n+}\n+\n bool\n range_operator_float::fold_range (irange &r ATTRIBUTE_UNUSED,\n \t\t\t\t  tree type ATTRIBUTE_UNUSED,"}, {"sha": "072ebd321090260acd1dfaef8fa87ccad681cbab", "filename": "gcc/range-op.cc", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be2a25adbdc76a770f7470cc9f47892f7a4139ae/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be2a25adbdc76a770f7470cc9f47892f7a4139ae/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=be2a25adbdc76a770f7470cc9f47892f7a4139ae", "patch": "@@ -4208,9 +4208,16 @@ range_op_handler::fold_range (vrange &r, tree type,\n \t\t\t   as_a <irange> (rh), rel);\n \n   if (is_a <irange> (r))\n-    return m_float->fold_range (as_a <irange> (r), type,\n-\t\t\t\tas_a <frange> (lh),\n-\t\t\t\tas_a <frange> (rh), rel);\n+    {\n+      if (is_a <irange> (rh))\n+\treturn m_float->fold_range (as_a <irange> (r), type,\n+\t\t\t\t    as_a <frange> (lh),\n+\t\t\t\t    as_a <irange> (rh), rel);\n+      else\n+\treturn m_float->fold_range (as_a <irange> (r), type,\n+\t\t\t\t    as_a <frange> (lh),\n+\t\t\t\t    as_a <frange> (rh), rel);\n+    }\n   return m_float->fold_range (as_a <frange> (r), type,\n \t\t\t      as_a <frange> (lh),\n \t\t\t      as_a <frange> (rh), rel);"}, {"sha": "b2f063afb07475337e7fe9f6c4aa7ab51d9a4069", "filename": "gcc/range-op.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be2a25adbdc76a770f7470cc9f47892f7a4139ae/gcc%2Frange-op.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be2a25adbdc76a770f7470cc9f47892f7a4139ae/gcc%2Frange-op.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.h?ref=be2a25adbdc76a770f7470cc9f47892f7a4139ae", "patch": "@@ -117,6 +117,11 @@ class range_operator_float\n \t\t\t   const frange &lh,\n \t\t\t   const frange &rh,\n \t\t\t   relation_kind rel = VREL_VARYING) const;\n+  // Unary operations have the range of the LHS as op2.\n+  virtual bool fold_range (irange &r, tree type,\n+\t\t\t   const frange &lh,\n+\t\t\t   const irange &rh,\n+\t\t\t   relation_kind rel = VREL_VARYING) const;\n   virtual bool fold_range (irange &r, tree type,\n \t\t\t   const frange &lh,\n \t\t\t   const frange &rh,"}]}