{"sha": "e928cf47f350e46eacb48ed954112e603ef3800a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkyOGNmNDdmMzUwZTQ2ZWFjYjQ4ZWQ5NTQxMTJlNjAzZWYzODAwYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-09-01T19:31:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-09-01T19:31:25Z"}, "message": "libcpp: __VA_OPT__ p1042r1 placemarker changes [PR101488]\n\nSo, besides missing #__VA_OPT__ patch for which I've posted patch last week,\nP1042R1 introduced some placemarker changes for __VA_OPT__, most notably\nthe addition of before \"removal of placemarker tokens,\" rescanning ...\nand the\n #define H4(X, ...) __VA_OPT__(a X ## X) ## b\nH4(, 1)  // replaced by a b\nexample mentioned there where we replace it currently with ab\n\nThe following patch are the minimum changes (except for the\n__builtin_expect) that achieve the same preprocessing between current\nclang++ and patched gcc on all the testcases I've tried (i.e. gcc __VA_OPT__\ntestsuite in c-c++-common/cpp/va-opt* including the new test and the clang\nclang/test/Preprocessor/macro_va_opt* testcases).\n\nAt one point I was trying to implement the __VA_OPT__(args) case as if\nfor non-empty __VA_ARGS__ it expanded as if __VA_OPT__( and ) were missing,\nbut from the tests it seems that is not how it should work, in particular\nif after (or before) we have some macro argument and it is not followed\n(or preceded) by ##, then it should be macro expanded even when __VA_OPT__\nis after ## or ) is followed by ##.  And it seems that not removing any\npadding tokens isn't possible either, because the expansion of the arguments\ntypically has a padding token at the start and end and those at least\naccording to the testsuite need to go.  It is unclear if it would be enough\nto remove just one or if all padding tokens should be removed.\nAnyway, e.g. the previous removal of all padding tokens at the end of\n__VA_OPT__ is undesirable, as it e.g. eats also the padding tokens needed\nfor the H4 example from the paper.\n\n2021-09-01  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR preprocessor/101488\n\t* macro.c (replace_args): Fix up handling of CPP_PADDING tokens at the\n\tstart or end of __VA_OPT__ arguments when preceeded or followed by ##.\n\n\t* c-c++-common/cpp/va-opt-3.c: Adjust expected output.\n\t* c-c++-common/cpp/va-opt-7.c: New test.", "tree": {"sha": "92368ca50bcf88efd93a798ca2332fe04cff8809", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92368ca50bcf88efd93a798ca2332fe04cff8809"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e928cf47f350e46eacb48ed954112e603ef3800a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e928cf47f350e46eacb48ed954112e603ef3800a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e928cf47f350e46eacb48ed954112e603ef3800a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e928cf47f350e46eacb48ed954112e603ef3800a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c5003c6873a941ef75fd31be85dbd37af1fcd23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c5003c6873a941ef75fd31be85dbd37af1fcd23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c5003c6873a941ef75fd31be85dbd37af1fcd23"}], "stats": {"total": 139, "additions": 123, "deletions": 16}, "files": [{"sha": "5b4f175264508902d25771ff34534fb081627b16", "filename": "gcc/testsuite/c-c++-common/cpp/va-opt-3.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e928cf47f350e46eacb48ed954112e603ef3800a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e928cf47f350e46eacb48ed954112e603ef3800a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-3.c?ref=e928cf47f350e46eacb48ed954112e603ef3800a", "patch": "@@ -85,10 +85,10 @@ t25 f19 (f16 (), 1);\n t26 f20 (f21 (), 2);\n /* { dg-final { scan-file va-opt-3.i \"t26 f17 h;\" } } */\n t27 f22 (, x);\n-/* { dg-final { scan-file va-opt-3.i \"t27 123;\" } } */\n+/* { dg-final { scan-file va-opt-3.i \"t27 1 23;\" } } */\n t28 f23 (, x);\n-/* { dg-final { scan-file va-opt-3.i \"t28 123;\" } } */\n+/* { dg-final { scan-file va-opt-3.i \"t28 1 23;\" } } */\n t29 f24 (, x);\n-/* { dg-final { scan-file va-opt-3.i \"t29 123;\" } } */\n+/* { dg-final { scan-file va-opt-3.i \"t29 12 3;\" } } */\n t30 f25 (, x);\n-/* { dg-final { scan-file va-opt-3.i \"t30 123;\" } } */\n+/* { dg-final { scan-file va-opt-3.i \"t30 12 3;\" } } */"}, {"sha": "06cdb2534a3b48f19fd862e32dfedc4c5870536c", "filename": "gcc/testsuite/c-c++-common/cpp/va-opt-7.c", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e928cf47f350e46eacb48ed954112e603ef3800a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e928cf47f350e46eacb48ed954112e603ef3800a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-7.c?ref=e928cf47f350e46eacb48ed954112e603ef3800a", "patch": "@@ -0,0 +1,101 @@\n+/* PR preprocessor/101488 */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=gnu99\" { target c } } */\n+/* { dg-options \"-std=c++2a\" { target c++ } } */\n+\n+#define f0() n\n+#define f1(x,...) a ## __VA_OPT__ (a) ## a\n+#define f2(x,...) a ## __VA_OPT__ () ## a\n+#define f3(x,...) a ## __VA_OPT__ (x) ## a\n+#define f4(x,...) a ## __VA_OPT__ (x##x) ## a\n+#define f5(x,...) a ## __VA_OPT__ (x##x 1) ## a\n+#define f6(x,...) a ## __VA_OPT__ (1 x##x) ## a\n+#define f7(x,...) __VA_OPT__ (f0 x ## x ) ## 1\n+#define f8(x,...) __VA_OPT__ (f0 x) ## 1\n+#define f9(x,...) f0 ## __VA_OPT__ (x 1) ## 1\n+#define f10(x,...) f0 ## __VA_OPT__ (x ## x 1) ## 1\n+#define f11(x, ...) __VA_OPT__(a x ## x) ## b\n+#define f12(x, ...) a ## __VA_OPT__(x ## x b)\n+#define f13(x) x ## x b\n+#define ab def\n+#define bc ghi\n+#define abc jkl\n+#define f14(x, ...) a ## __VA_OPT__(x b x) ## c\n+t1 f1(,);\n+/* { dg-final { scan-file va-opt-7.i \"t1 aa;\" } } */\n+t2 f1(,1);\n+/* { dg-final { scan-file va-opt-7.i \"t2 aaa;\" } } */\n+t3 f1(2,1);\n+/* { dg-final { scan-file va-opt-7.i \"t3 aaa;\" } } */\n+t4 f2(,);\n+/* { dg-final { scan-file va-opt-7.i \"t4 aa;\" } } */\n+t5 f2(,1);\n+/* { dg-final { scan-file va-opt-7.i \"t5 aa;\" } } */\n+t6 f2(2,1);\n+/* { dg-final { scan-file va-opt-7.i \"t6 aa;\" } } */\n+t7 f3(,);\n+/* { dg-final { scan-file va-opt-7.i \"t7 aa;\" } } */\n+t8 f3(,1);\n+/* { dg-final { scan-file va-opt-7.i \"t8 aa;\" } } */\n+t9 f3(2,1);\n+/* { dg-final { scan-file va-opt-7.i \"t9 a2a;\" } } */\n+t10 f4(,);\n+/* { dg-final { scan-file va-opt-7.i \"t10 aa;\" } } */\n+t11 f4(,1);\n+/* { dg-final { scan-file va-opt-7.i \"t11 aa;\" } } */\n+t12 f4(2,1);\n+/* { dg-final { scan-file va-opt-7.i \"t12 a22a;\" } } */\n+t13 f5(,);\n+/* { dg-final { scan-file va-opt-7.i \"t13 aa;\" } } */\n+t14 f5(,1);\n+/* { dg-final { scan-file va-opt-7.i \"t14 a 1a;\" } } */\n+t15 f5(2,1);\n+/* { dg-final { scan-file va-opt-7.i \"t15 a22 1a;\" } } */\n+t16 f6(,);\n+/* { dg-final { scan-file va-opt-7.i \"t16 aa;\" } } */\n+t17 f6(,1);\n+/* { dg-final { scan-file va-opt-7.i \"t17 a1 a;\" } } */\n+t18 f6(2,1);\n+/* { dg-final { scan-file va-opt-7.i \"t18 a1 22a;\" } } */\n+t19 f7(,);\n+/* { dg-final { scan-file va-opt-7.i \"t19 1;\" } } */\n+t20 f7(,1);\n+/* { dg-final { scan-file va-opt-7.i \"t20 f0 1;\" } } */\n+t21 f7(2,1);\n+/* { dg-final { scan-file va-opt-7.i \"t21 f0 221;\" } } */\n+t22 f8(,);\n+/* { dg-final { scan-file va-opt-7.i \"t22 1;\" } } */\n+t23 f8(,1);\n+/* { dg-final { scan-file va-opt-7.i \"t23 f0 1;\" } } */\n+t24 f8(2,1);\n+/* { dg-final { scan-file va-opt-7.i \"t24 f0 21;\" } } */\n+t25 f9(,);\n+/* { dg-final { scan-file va-opt-7.i \"t25 f01;\" } } */\n+t26 f9(,1);\n+/* { dg-final { scan-file va-opt-7.i \"t26 f0 11;\" } } */\n+t27 f9(2,1);\n+/* { dg-final { scan-file va-opt-7.i \"t27 f02 11;\" } } */\n+t28 f10(,);\n+/* { dg-final { scan-file va-opt-7.i \"t28 f01;\" } } */\n+t29 f10(,1);\n+/* { dg-final { scan-file va-opt-7.i \"t29 f0 11;\" } } */\n+t30 f10(2,1);\n+/* { dg-final { scan-file va-opt-7.i \"t30 f022 11;\" } } */\n+t31 f11(,);\n+/* { dg-final { scan-file va-opt-7.i \"t31 b;\" } } */\n+t32 f11(,1);\n+/* { dg-final { scan-file va-opt-7.i \"t32 a b;\" } } */\n+t33 f11(2,1);\n+/* { dg-final { scan-file va-opt-7.i \"t33 a 22b;\" } } */\n+t34 f12(,);\n+/* { dg-final { scan-file va-opt-7.i \"t34 a;\" } } */\n+t35 f12(,1);\n+/* { dg-final { scan-file va-opt-7.i \"t35 a b;\" } } */\n+t36 f12(2,1);\n+/* { dg-final { scan-file va-opt-7.i \"t36 a22 b;\" } } */\n+t37 f14(,);\n+/* { dg-final { scan-file va-opt-7.i \"t37 ac;\" } } */\n+t38 f14(,1);\n+/* { dg-final { scan-file va-opt-7.i \"t38 a b c;\" } } */\n+t39 f14(f13(),1);\n+/* { dg-final { scan-file va-opt-7.i \"t39 def b ghi;\" } } */"}, {"sha": "b3ba352ae0952ad9d7fcc0fadd8c5c8175d4a284", "filename": "libcpp/macro.c", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e928cf47f350e46eacb48ed954112e603ef3800a/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e928cf47f350e46eacb48ed954112e603ef3800a/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=e928cf47f350e46eacb48ed954112e603ef3800a", "patch": "@@ -2026,6 +2026,7 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n   i = 0;\n   vaopt_state vaopt_tracker (pfile, macro->variadic, &args[macro->paramc - 1]);\n   const cpp_token **vaopt_start = NULL;\n+  unsigned vaopt_padding_tokens = 0;\n   for (src = macro->exp.tokens; src < limit; src++)\n     {\n       unsigned int arg_tokens_count;\n@@ -2035,7 +2036,7 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \n       /* __VA_OPT__ handling.  */\n       vaopt_state::update_type vostate = vaopt_tracker.update (src);\n-      if (vostate != vaopt_state::INCLUDE)\n+      if (__builtin_expect (vostate != vaopt_state::INCLUDE, false))\n \t{\n \t  if (vostate == vaopt_state::BEGIN)\n \t    {\n@@ -2060,7 +2061,9 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \n \t      /* Remove any tail padding from inside the __VA_OPT__.  */\n \t      paste_flag = tokens_buff_last_token_ptr (buff);\n-\t      while (paste_flag && paste_flag != start\n+\t      while (vaopt_padding_tokens--\n+\t\t     && paste_flag\n+\t\t     && paste_flag != start\n \t\t     && (*paste_flag)->type == CPP_PADDING)\n \t\t{\n \t\t  tokens_buff_remove_last_token (buff);\n@@ -2104,6 +2107,7 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \t  continue;\n \t}\n \n+      vaopt_padding_tokens = 0;\n       if (src->type != CPP_MACRO_ARG)\n \t{\n \t  /* Allocate a virtual location for token SRC, and add that\n@@ -2181,11 +2185,8 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \t\t  else\n \t\t    paste_flag = tmp_token_ptr;\n \t\t}\n-\t      /* Remove the paste flag if the RHS is a placemarker, unless the\n-\t\t previous emitted token is at the beginning of __VA_OPT__;\n-\t\t placemarkers within __VA_OPT__ are ignored in that case.  */\n-\t      else if (arg_tokens_count == 0\n-\t\t       && tmp_token_ptr != vaopt_start)\n+\t      /* Remove the paste flag if the RHS is a placemarker.  */\n+\t      else if (arg_tokens_count == 0)\n \t\tpaste_flag = tmp_token_ptr;\n \t    }\n \t}\n@@ -2215,7 +2216,8 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \n       /* Padding on the left of an argument (unless RHS of ##).  */\n       if ((!pfile->state.in_directive || pfile->state.directive_wants_padding)\n-\t  && src != macro->exp.tokens && !(src[-1].flags & PASTE_LEFT)\n+\t  && src != macro->exp.tokens\n+\t  && !(src[-1].flags & PASTE_LEFT)\n \t  && !last_token_is (buff, vaopt_start))\n \t{\n \t  const cpp_token *t = padding_token (pfile, src);\n@@ -2260,8 +2262,12 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \t\ttoken_index += j;\n \n \t      index = expanded_token_index (pfile, macro, src, token_index);\n-\t      tokens_buff_add_token (buff, virt_locs,\n-\t\t\t\t     macro_arg_token_iter_get_token (&from),\n+\t      const cpp_token *tok = macro_arg_token_iter_get_token (&from);\n+\t      if (tok->type == CPP_PADDING)\n+\t\tvaopt_padding_tokens++;\n+\t      else\n+\t\tvaopt_padding_tokens = 0;\n+\t      tokens_buff_add_token (buff, virt_locs, tok,\n \t\t\t\t     macro_arg_token_iter_get_location (&from),\n \t\t\t\t     src->src_loc, map, index);\n \t      macro_arg_token_iter_forward (&from);\n@@ -2301,13 +2307,13 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \t\t     NODE_NAME (node), src->val.macro_arg.arg_no);\n \n       /* Avoid paste on RHS (even case count == 0).  */\n-      if (!pfile->state.in_directive && !(src->flags & PASTE_LEFT)\n-\t  && !last_token_is (buff, vaopt_start))\n+      if (!pfile->state.in_directive && !(src->flags & PASTE_LEFT))\n \t{\n \t  const cpp_token *t = &pfile->avoid_paste;\n \t  tokens_buff_add_token (buff, virt_locs,\n \t\t\t\t t, t->src_loc, t->src_loc,\n \t\t\t\t NULL, 0);\n+\t  vaopt_padding_tokens++;\n \t}\n \n       /* Add a new paste flag, or remove an unwanted one.  */"}]}