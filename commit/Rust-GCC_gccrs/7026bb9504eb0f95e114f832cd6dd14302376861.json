{"sha": "7026bb9504eb0f95e114f832cd6dd14302376861", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAyNmJiOTUwNGViMGY5NWUxMTRmODMyY2Q2ZGQxNDMwMjM3Njg2MQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-09-26T07:34:23Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-10-22T02:29:04Z"}, "message": "Refactor implementation of *_bcst{_1,_2,_3} patterns.\n\nAdd new predicate bcst_mem_operand and corresponding constraint \"Br\"\nto merge \"$(pattern)_bcst{_1,_2,_3}\" into \"$(pattern)\", also delete\nthose separate \"*_bcst{_1,_2,_3}\" patterns.\n\ngcc/ChangeLog:\n\n\tPR target/87767\n\t* config/i386/constraints.md (\"Br\"): New special memory\n\tconstraint.\n\t* config/i386/i386-expand.c (ix86_binary_operator_ok): Both\n\tsource operand cannot be in memory or bcst_memory_operand.\n\t* config/i386/i386.c (ix86_print_operand): Print bcst_mem_operand.\n\t* config/i386/i386.h (VALID_BCST_MODE_P): New.\n\t* config/i386/predicates.md (bcst_mem_operand): New predicate\n\tfor AVX512 embedding broadcast memory operand.\n\t(bcst_vector_operand): New predicate, vector_operand or\n\tbcst_mem_operand.\n\t* config/i386/sse.md\n\t(*<plusminus_insn><mode>3<mask_name><round_name>): Extend\n\tpredicate and constraints to handle bcst_mem_operand.\n\t(*mul<mode>3<mask_name><round_name>): Ditto.\n\t(<sse>_div<mode>3<mask_name><round_name>): Ditto.\n\t(<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name><round_name>):\n\tDitto.\n\t(<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name><round_name>):\n\tDitto.\n\t(<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name><round_name>):\n\tDitto.\n\t(<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name><round_name>):\n\tDitto.\n\t(*<plusminus_insn><mode>3): Ditto.\n\t(avx512dq_mul<mode>3<mask_name>): Ditto.\n\t(*<sse4_1_avx2>_mul<mode>3<mask_name>): Ditto.\n\t(*andnot<mode>3): Ditto.\n\t(<mask_codefor><code><mode>3<mask_name>): Ditto.\n\t(*sub<mode>3<mask_name>_bcst): Removed.\n\t(*add<mode>3<mask_name>_bcst): Ditto.\n\t(*mul<mode>3<mask_name>_bcst): Ditto.\n\t(*<avx512>_div<mode>3<mask_name>_bcst): Ditto.\n\t(*<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name>_bcst_1):\n\tDitto.\n\t(*<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name>_bcst_2):\n\tDitto.\n\t(*<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name>_bcst_3):\n\tDitto.\n\t(*<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_1):\n\tDitto.\n\t(*<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_2):\n\tDitto.\n\t(*<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_3):\n\tDitto.\n\t(*<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_1):\n\tDitto.\n\t(*<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_2):\n\tDitto.\n\t(*<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_3):\n\tDitto.\n\t(*<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name>_bcst_1):\n\tDitto.\n\t(*<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name>_bcst_2):\n\tDitto.\n\t(*<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name>_bcst_3):\n\tDitto.\n\t(*sub<mode>3_bcst): Ditto.\n\t(*add<mode>3_bcst): Ditto.\n\t(*avx512dq_mul<mode>3<mask_name>_bcst): Ditto.\n\t(*avx512f_mul<mode>3<mask_name>_bcst): Ditto.\n\t(*andnot<mode>3_bcst): Ditto.\n\t(*<code><mode>3_bcst): Ditto.\n\t* config/i386/subst.md (bcst_round_constraint): New subst\n\tattribute.\n\t(bcst_round_nimm_predicate): Ditto.\n\t(bcst_mask_prefix3): Ditto.\n\t(bcst_mask_prefix4): Ditto.", "tree": {"sha": "be8b1d951c195583ba47e565f99e0cbbf0a82125", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be8b1d951c195583ba47e565f99e0cbbf0a82125"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7026bb9504eb0f95e114f832cd6dd14302376861", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7026bb9504eb0f95e114f832cd6dd14302376861", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7026bb9504eb0f95e114f832cd6dd14302376861", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7026bb9504eb0f95e114f832cd6dd14302376861/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4de7b010038933dd6ca96bf186ca49f243d0def6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4de7b010038933dd6ca96bf186ca49f243d0def6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4de7b010038933dd6ca96bf186ca49f243d0def6"}], "stats": {"total": 438, "additions": 102, "deletions": 336}, "files": [{"sha": "0b902d543b3ec59f7bd9862a51290037a229bb0d", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7026bb9504eb0f95e114f832cd6dd14302376861/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7026bb9504eb0f95e114f832cd6dd14302376861/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=7026bb9504eb0f95e114f832cd6dd14302376861", "patch": "@@ -183,6 +183,10 @@\n   \"@internal Memory operand without REX prefix.\"\n   (match_operand 0 \"norex_memory_operand\"))\n \n+(define_special_memory_constraint \"Br\"\n+  \"@internal bcst memory operand.\"\n+  (match_operand 0 \"bcst_mem_operand\"))\n+\n (define_constraint \"Bs\"\n   \"@internal Sibcall memory operand.\"\n   (ior (and (not (match_test \"TARGET_INDIRECT_BRANCH_REGISTER\"))"}, {"sha": "3e8afe683dc57ef1ad568c0149d78d5e566189ee", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7026bb9504eb0f95e114f832cd6dd14302376861/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7026bb9504eb0f95e114f832cd6dd14302376861/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=7026bb9504eb0f95e114f832cd6dd14302376861", "patch": "@@ -1045,7 +1045,8 @@ ix86_binary_operator_ok (enum rtx_code code, machine_mode mode,\n   rtx src2 = operands[2];\n \n   /* Both source operands cannot be in memory.  */\n-  if (MEM_P (src1) && MEM_P (src2))\n+  if ((MEM_P (src1) || bcst_mem_operand (src1, mode))\n+      && (MEM_P (src2) || bcst_mem_operand (src2, mode)))\n     return false;\n \n   /* Canonicalize operand order for commutative operators.  */"}, {"sha": "502d24057b54dffd549e25baabf96223fa7b2232", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7026bb9504eb0f95e114f832cd6dd14302376861/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7026bb9504eb0f95e114f832cd6dd14302376861/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7026bb9504eb0f95e114f832cd6dd14302376861", "patch": "@@ -13098,6 +13098,43 @@ ix86_print_operand (FILE *file, rtx x, int code)\n       fputs (dstr, file);\n     }\n \n+  /* Print bcst_mem_operand.  */\n+  else if (GET_CODE (x) == VEC_DUPLICATE)\n+    {\n+      machine_mode vmode = GET_MODE (x);\n+      /* Must be bcst_memory_operand.  */\n+      gcc_assert (bcst_mem_operand (x, vmode));\n+\n+      rtx mem = XEXP (x,0);\n+      ix86_print_operand (file, mem, 0);\n+\n+      switch (vmode)\n+\t{\n+\tcase E_V2DImode:\n+\tcase E_V2DFmode:\n+\t  fputs (\"{1to2}\", file);\n+\t  break;\n+\tcase E_V4SImode:\n+\tcase E_V4SFmode:\n+\tcase E_V4DImode:\n+\tcase E_V4DFmode:\n+\t  fputs (\"{1to4}\", file);\n+\t  break;\n+\tcase E_V8SImode:\n+\tcase E_V8SFmode:\n+\tcase E_V8DFmode:\n+\tcase E_V8DImode:\n+\t  fputs (\"{1to8}\", file);\n+\t  break;\n+\tcase E_V16SFmode:\n+\tcase E_V16SImode:\n+\t  fputs (\"{1to16}\", file);\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+    }\n+\n   else\n     {\n       /* We have patterns that allow zero sets of memory, for instance."}, {"sha": "24207d042115bcac86e445fb0cc33681985ca70b", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7026bb9504eb0f95e114f832cd6dd14302376861/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7026bb9504eb0f95e114f832cd6dd14302376861/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=7026bb9504eb0f95e114f832cd6dd14302376861", "patch": "@@ -1272,6 +1272,10 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n   (TARGET_FMA4 && ((MODE) == V4SFmode || (MODE) == V2DFmode \\\n \t\t  || (MODE) == V8SFmode || (MODE) == V4DFmode))\n \n+#define VALID_BCST_MODE_P(MODE)\t\t\t\\\n+  ((MODE) == SFmode || (MODE) == DFmode\t\t\\\n+   || (MODE) == SImode || (MODE) == DImode)\n+\n /* It is possible to write patterns to move flags; but until someone\n    does it,  */\n #define AVOID_CCMODE_COPIES"}, {"sha": "be57cdaf7680146f041a898ebc02a07730289d6e", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7026bb9504eb0f95e114f832cd6dd14302376861/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7026bb9504eb0f95e114f832cd6dd14302376861/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=7026bb9504eb0f95e114f832cd6dd14302376861", "patch": "@@ -1081,6 +1081,19 @@\n   (ior (match_operand 0 \"register_operand\")\n        (match_operand 0 \"vector_memory_operand\")))\n \n+(define_predicate \"bcst_mem_operand\"\n+  (and (match_code \"vec_duplicate\")\n+       (and (match_test \"TARGET_AVX512F\")\n+\t    (ior (match_test \"TARGET_AVX512VL\")\n+\t\t (match_test \"GET_MODE_SIZE (GET_MODE (op)) == 64\")))\n+       (match_test \"VALID_BCST_MODE_P (GET_MODE_INNER (GET_MODE (op)))\")\n+       (match_test \"memory_operand (XEXP (op, 0), GET_MODE (XEXP (op, 0)))\")))\n+\n+; Return true when OP is bcst_mem_operand or vector_memory_operand.\n+(define_predicate \"bcst_vector_operand\"\n+  (ior (match_operand 0 \"vector_operand\")\n+       (match_operand 0 \"bcst_mem_operand\")))\n+\n ;; Return true when OP is either nonimmediate operand, or any\n ;; CONST_VECTOR.\n (define_predicate \"nonimmediate_or_const_vector_operand\""}, {"sha": "52635f6bc08bff39f9f94d2e851e9f654295dbfc", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 38, "deletions": 335, "changes": 373, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7026bb9504eb0f95e114f832cd6dd14302376861/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7026bb9504eb0f95e114f832cd6dd14302376861/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=7026bb9504eb0f95e114f832cd6dd14302376861", "patch": "@@ -1756,44 +1756,16 @@\n (define_insn \"*<plusminus_insn><mode>3<mask_name><round_name>\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n \t(plusminus:VF\n-\t  (match_operand:VF 1 \"<round_nimm_predicate>\" \"<comm>0,v\")\n-\t  (match_operand:VF 2 \"<round_nimm_predicate>\" \"xBm,<round_constraint>\")))]\n+\t  (match_operand:VF 1 \"<bcst_round_nimm_predicate>\" \"<comm>0,v\")\n+\t  (match_operand:VF 2 \"<bcst_round_nimm_predicate>\" \"xBm,<bcst_round_constraint>\")))]\n   \"TARGET_SSE && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n    && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    <plusminus_mnemonic><ssemodesuffix>\\t{%2, %0|%0, %2}\n    v<plusminus_mnemonic><ssemodesuffix>\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2<round_mask_op3>}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseadd\")\n-   (set_attr \"prefix\" \"<mask_prefix3>\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*sub<mode>3<mask_name>_bcst\"\n-  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v\")\n-\t(minus:VF_AVX512\n-\t  (match_operand:VF_AVX512 1 \"register_operand\" \"v\")\n-\t  (vec_duplicate:VF_AVX512\n-\t    (match_operand:<ssescalarmode> 2 \"memory_operand\" \"m\"))))]\n-  \"TARGET_AVX512F\n-   && ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\n-   && <mask_mode512bit_condition>\"\n-  \"vsub<ssemodesuffix>\\t{%2<avx512bcst>, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2<avx512bcst>}\"\n-  [(set_attr \"prefix\" \"evex\")\n-   (set_attr \"type\" \"sseadd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*add<mode>3<mask_name>_bcst\"\n-  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v\")\n-\t(plus:VF_AVX512\n-\t  (vec_duplicate:VF_AVX512\n-\t    (match_operand:<ssescalarmode> 1 \"memory_operand\" \"m\"))\n-\t  (match_operand:VF_AVX512 2 \"register_operand\" \"v\")))]\n-  \"TARGET_AVX512F\n-   && ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\n-   && <mask_mode512bit_condition>\"\n-  \"vadd<ssemodesuffix>\\t{%1<avx512bcst>, %2, %0<mask_operand3>|%0<mask_operand3>, %2, %1<avx512bcst>}\"\n-  [(set_attr \"prefix\" \"evex\")\n-   (set_attr \"type\" \"sseadd\")\n+   (set_attr \"prefix\" \"<bcst_mask_prefix3>\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; Standard scalar operation patterns which preserve the rest of the\n@@ -1846,32 +1818,19 @@\n (define_insn \"*mul<mode>3<mask_name><round_name>\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n \t(mult:VF\n-\t  (match_operand:VF 1 \"<round_nimm_predicate>\" \"%0,v\")\n-\t  (match_operand:VF 2 \"<round_nimm_predicate>\" \"xBm,<round_constraint>\")))]\n-  \"TARGET_SSE\n-   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n+\t  (match_operand:VF 1 \"<bcst_round_nimm_predicate>\" \"%0,v\")\n+\t  (match_operand:VF 2 \"<bcst_round_nimm_predicate>\" \"xBm,<bcst_round_constraint>\")))]\n+  \"TARGET_SSE && ix86_binary_operator_ok (MULT, <MODE>mode, operands)\n    && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    mul<ssemodesuffix>\\t{%2, %0|%0, %2}\n    vmul<ssemodesuffix>\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2<round_mask_op3>}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"ssemul\")\n-   (set_attr \"prefix\" \"<mask_prefix3>\")\n+   (set_attr \"prefix\" \"<bcst_mask_prefix3>\")\n    (set_attr \"btver2_decode\" \"direct,double\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*mul<mode>3<mask_name>_bcst\"\n-  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v\")\n-\t(mult:VF_AVX512\n-\t  (vec_duplicate:VF_AVX512\n-\t     (match_operand:<ssescalarmode> 1 \"memory_operand\" \"m\"))\n-\t  (match_operand:VF_AVX512 2 \"register_operand\" \"v\")))]\n-  \"TARGET_AVX512F && <mask_mode512bit_condition>\"\n-  \"vmul<ssemodesuffix>\\t{%1<avx512bcst>, %2, %0<mask_operand3>|%0<mask_operand3>, %2, %1<avx512bcst>}\"\n-  [(set_attr \"prefix\" \"evex\")\n-   (set_attr \"type\" \"ssemul\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n ;; Standard scalar operation patterns which preserve the rest of the\n ;; vector for combiner.\n (define_insn \"*<sse>_vm<multdiv_mnemonic><mode>3\"\n@@ -1943,26 +1902,14 @@\n   [(set (match_operand:VF 0 \"register_operand\" \"=x,v\")\n \t(div:VF\n \t  (match_operand:VF 1 \"register_operand\" \"0,v\")\n-\t  (match_operand:VF 2 \"<round_nimm_predicate>\" \"xBm,<round_constraint>\")))]\n+\t  (match_operand:VF 2 \"<bcst_round_nimm_predicate>\" \"xBm,<bcst_round_constraint>\")))]\n   \"TARGET_SSE && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    div<ssemodesuffix>\\t{%2, %0|%0, %2}\n    vdiv<ssemodesuffix>\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2<round_mask_op3>}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"ssediv\")\n-   (set_attr \"prefix\" \"<mask_prefix3>\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*<avx512>_div<mode>3<mask_name>_bcst\"\n-  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v\")\n-\t(div:VF_AVX512\n-\t  (match_operand:VF_AVX512 1 \"register_operand\" \"v\")\n-\t  (vec_duplicate:VF_AVX512\n-\t     (match_operand:<ssescalarmode> 2 \"memory_operand\" \"m\"))))]\n-  \"TARGET_AVX512F && <mask_mode512bit_condition>\"\n-  \"vdiv<ssemodesuffix>\\t{%2<avx512bcst>, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2<avx512bcst>}\"\n-  [(set_attr \"prefix\" \"evex\")\n-    (set_attr \"type\" \"ssediv\")\n+   (set_attr \"prefix\" \"<bcst_mask_prefix3>\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<sse>_rcp<mode>2\"\n@@ -4055,9 +4002,9 @@\n (define_insn \"<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name><round_name>\"\n   [(set (match_operand:VF_SF_AVX512VL 0 \"register_operand\" \"=v,v,v\")\n \t(fma:VF_SF_AVX512VL\n-\t  (match_operand:VF_SF_AVX512VL 1 \"<round_nimm_predicate>\" \"%0,0,v\")\n-\t  (match_operand:VF_SF_AVX512VL 2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n-\t  (match_operand:VF_SF_AVX512VL 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\")))]\n+\t  (match_operand:VF_SF_AVX512VL 1 \"<bcst_round_nimm_predicate>\" \"%0,0,v\")\n+\t  (match_operand:VF_SF_AVX512VL 2 \"<bcst_round_nimm_predicate>\" \"<bcst_round_constraint>,v,<bcst_round_constraint>\")\n+\t  (match_operand:VF_SF_AVX512VL 3 \"<bcst_round_nimm_predicate>\" \"v,<bcst_round_constraint>,0\")))]\n   \"TARGET_AVX512F && <sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    vfmadd132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n@@ -4066,46 +4013,6 @@\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name>_bcst_1\"\n-  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v\")\n-\t(fma:VF_AVX512\n-\t  (match_operand:VF_AVX512 1 \"register_operand\" \"%0\")\n-\t  (match_operand:VF_AVX512 2 \"register_operand\" \"v\")\n-\t  (vec_duplicate:VF_AVX512\n-\t    (match_operand:<ssescalarmode> 3 \"memory_operand\" \"m\"))))]\n-  \"TARGET_AVX512F && <sd_mask_mode512bit_condition>\"\n-  \"vfmadd213<ssemodesuffix>\\t{%3<avx512bcst>, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<avx512bcst>}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name>_bcst_2\"\n-  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v,v\")\n-\t(fma:VF_AVX512\n-\t  (vec_duplicate:VF_AVX512\n-\t    (match_operand:<ssescalarmode> 1 \"memory_operand\" \"m,m\"))\n-\t  (match_operand:VF_AVX512 2 \"register_operand\" \"0,v\")\n-\t  (match_operand:VF_AVX512 3 \"register_operand\" \"v,0\")))]\n-  \"TARGET_AVX512F && <sd_mask_mode512bit_condition>\"\n-  \"@\n-   vfmadd132<ssemodesuffix>\\t{%1<avx512bcst>, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %1<avx512bcst>}\n-   vfmadd231<ssemodesuffix>\\t{%1<avx512bcst>, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %1<avx512bcst>}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name>_bcst_3\"\n-  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v,v\")\n-\t(fma:VF_AVX512\n-\t  (match_operand:VF_AVX512 1 \"register_operand\" \"0,v\")\n-\t  (vec_duplicate:VF_AVX512\n-\t    (match_operand:<ssescalarmode> 2 \"memory_operand\" \"m,m\"))\n-\t  (match_operand:VF_AVX512 3 \"register_operand\" \"v,0\")))]\n-  \"TARGET_AVX512F && <sd_mask_mode512bit_condition>\"\n-  \"@\n-   vfmadd132<ssemodesuffix>\\t{%2<avx512bcst>, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<avx512bcst>}\n-   vfmadd231<ssemodesuffix>\\t{%2<avx512bcst>, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<avx512bcst>}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n (define_insn \"<avx512>_fmadd_<mode>_mask<round_name>\"\n   [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VF_AVX512VL\n@@ -4171,10 +4078,10 @@\n (define_insn \"<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name><round_name>\"\n   [(set (match_operand:VF_SF_AVX512VL 0 \"register_operand\" \"=v,v,v\")\n \t(fma:VF_SF_AVX512VL\n-\t  (match_operand:VF_SF_AVX512VL   1 \"<round_nimm_predicate>\" \"%0,0,v\")\n-\t  (match_operand:VF_SF_AVX512VL   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n+\t  (match_operand:VF_SF_AVX512VL   1 \"<bcst_round_nimm_predicate>\" \"%0,0,v\")\n+\t  (match_operand:VF_SF_AVX512VL   2 \"<bcst_round_nimm_predicate>\" \"<bcst_round_constraint>,v,<bcst_round_constraint>\")\n \t  (neg:VF_SF_AVX512VL\n-\t    (match_operand:VF_SF_AVX512VL 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\"))))]\n+\t    (match_operand:VF_SF_AVX512VL 3 \"<bcst_round_nimm_predicate>\" \"v,<bcst_round_constraint>,0\"))))]\n   \"TARGET_AVX512F && <sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    vfmsub132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n@@ -4183,49 +4090,6 @@\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_1\"\n-  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v\")\n-\t(fma:VF_AVX512\n-\t  (match_operand:VF_AVX512 1 \"register_operand\" \"%0\")\n-\t  (match_operand:VF_AVX512 2 \"register_operand\" \"v\")\n-\t  (neg:VF_AVX512\n-\t    (vec_duplicate:VF_AVX512\n-\t      (match_operand:<ssescalarmode> 3 \"memory_operand\" \"m\")))))]\n-  \"TARGET_AVX512F && <sd_mask_mode512bit_condition>\"\n-  \"vfmsub213<ssemodesuffix>\\t{%3<avx512bcst>, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<avx512bcst>}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_2\"\n-  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v,v\")\n-\t(fma:VF_AVX512\n-\t  (vec_duplicate:VF_AVX512\n-\t    (match_operand:<ssescalarmode> 1 \"memory_operand\" \"m,m\"))\n-\t  (match_operand:VF_AVX512 2 \"register_operand\" \"0,v\")\n-\t  (neg:VF_AVX512\n-\t    (match_operand:VF_AVX512 3 \"register_operand\" \"v,0\"))))]\n-  \"TARGET_AVX512F && <sd_mask_mode512bit_condition>\"\n-  \"@\n-   vfmsub132<ssemodesuffix>\\t{%1<avx512bcst>, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %1<avx512bcst>}\n-   vfmsub231<ssemodesuffix>\\t{%1<avx512bcst>, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %1<avx512bcst>}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_3\"\n-  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v,v\")\n-\t(fma:VF_AVX512\n-\t  (match_operand:VF_AVX512 1 \"register_operand\" \"0,v\")\n-\t  (vec_duplicate:VF_AVX512\n-\t    (match_operand:<ssescalarmode> 2 \"memory_operand\" \"m,m\"))\n-\t  (neg:VF_AVX512\n-\t    (match_operand:VF_AVX512 3 \"nonimmediate_operand\" \"v,0\"))))]\n-  \"TARGET_AVX512F && <sd_mask_mode512bit_condition>\"\n-  \"@\n-   vfmsub132<ssemodesuffix>\\t{%2<avx512bcst>, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<avx512bcst>}\n-   vfmsub231<ssemodesuffix>\\t{%2<avx512bcst>, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<avx512bcst>}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n (define_insn \"<avx512>_fmsub_<mode>_mask<round_name>\"\n   [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VF_AVX512VL\n@@ -4294,9 +4158,9 @@\n   [(set (match_operand:VF_SF_AVX512VL 0 \"register_operand\" \"=v,v,v\")\n \t(fma:VF_SF_AVX512VL\n \t  (neg:VF_SF_AVX512VL\n-\t    (match_operand:VF_SF_AVX512VL 1 \"<round_nimm_predicate>\" \"%0,0,v\"))\n-\t  (match_operand:VF_SF_AVX512VL   2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n-\t  (match_operand:VF_SF_AVX512VL   3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\")))]\n+\t    (match_operand:VF_SF_AVX512VL 1 \"<bcst_round_nimm_predicate>\" \"%0,0,v\"))\n+\t  (match_operand:VF_SF_AVX512VL   2 \"<bcst_round_nimm_predicate>\" \"<bcst_round_constraint>,v,<bcst_round_constraint>\")\n+\t  (match_operand:VF_SF_AVX512VL   3 \"<bcst_round_nimm_predicate>\" \"v,<bcst_round_constraint>,0\")))]\n   \"TARGET_AVX512F && <sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    vfnmadd132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n@@ -4305,49 +4169,6 @@\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_1\"\n-  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v\")\n-\t(fma:VF_AVX512\n-\t  (neg:VF_AVX512\n-\t    (match_operand:VF_AVX512 1 \"register_operand\" \"%0\"))\n-\t  (match_operand:VF_AVX512 2 \"register_operand\" \"v\")\n-\t  (vec_duplicate:VF_AVX512\n-\t    (match_operand:<ssescalarmode> 3 \"memory_operand\" \"m\"))))]\n-  \"TARGET_AVX512F && <sd_mask_mode512bit_condition>\"\n-  \"vfnmadd213<ssemodesuffix>\\t{%3<avx512bcst>, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<avx512bcst>}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_2\"\n-  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v,v\")\n-\t(fma:VF_AVX512\n-\t  (neg:VF_AVX512\n-\t    (vec_duplicate:VF_AVX512\n-\t      (match_operand:<ssescalarmode> 1 \"memory_operand\" \"m,m\")))\n-\t  (match_operand:VF_AVX512 2 \"register_operand\" \"0,v\")\n-\t  (match_operand:VF_AVX512 3 \"register_operand\" \"v,0\")))]\n-  \"TARGET_AVX512F && <sd_mask_mode512bit_condition>\"\n-  \"@\n-   vfnmadd132<ssemodesuffix>\\t{%1<avx512bcst>, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %1<avx512bcst>}\n-   vfnmadd231<ssemodesuffix>\\t{%1<avx512bcst>, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %1<avx512bcst>}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_3\"\n-  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v,v\")\n-\t(fma:VF_AVX512\n-\t  (neg:VF_AVX512\n-\t    (match_operand:VF_AVX512 1 \"register_operand\" \"0,v\"))\n-\t  (vec_duplicate:VF_AVX512\n-\t    (match_operand:<ssescalarmode> 2 \"memory_operand\" \"m,m\"))\n-\t  (match_operand:VF_AVX512 3 \"register_operand\" \"v,0\")))]\n-  \"TARGET_AVX512F && <sd_mask_mode512bit_condition>\"\n-  \"@\n-   vfnmadd132<ssemodesuffix>\\t{%2<avx512bcst>, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<avx512bcst>}\n-   vfnmadd231<ssemodesuffix>\\t{%2<avx512bcst>, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<avx512bcst>}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n (define_insn \"<avx512>_fnmadd_<mode>_mask<round_name>\"\n   [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VF_AVX512VL\n@@ -4417,10 +4238,10 @@\n   [(set (match_operand:VF_SF_AVX512VL 0 \"register_operand\" \"=v,v,v\")\n \t(fma:VF_SF_AVX512VL\n \t  (neg:VF_SF_AVX512VL\n-\t    (match_operand:VF_SF_AVX512VL 1 \"<round_nimm_predicate>\" \"%0,0,v\"))\n-\t  (match_operand:VF_SF_AVX512VL 2 \"<round_nimm_predicate>\" \"<round_constraint>,v,<round_constraint>\")\n+\t    (match_operand:VF_SF_AVX512VL 1 \"<bcst_round_nimm_predicate>\" \"%0,0,v\"))\n+\t  (match_operand:VF_SF_AVX512VL 2 \"<bcst_round_nimm_predicate>\" \"<bcst_round_constraint>,v,<bcst_round_constraint>\")\n \t  (neg:VF_SF_AVX512VL\n-\t    (match_operand:VF_SF_AVX512VL 3 \"<round_nimm_predicate>\" \"v,<round_constraint>,0\"))))]\n+\t    (match_operand:VF_SF_AVX512VL 3 \"<bcst_round_nimm_predicate>\" \"v,<bcst_round_constraint>,0\"))))]\n   \"TARGET_AVX512F && <sd_mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    vfnmsub132<ssemodesuffix>\\t{<round_sd_mask_op4>%2, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<round_sd_mask_op4>}\n@@ -4429,52 +4250,6 @@\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name>_bcst_1\"\n-  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v\")\n-\t(fma:VF_AVX512\n-\t  (neg:VF_AVX512\n-\t    (match_operand:VF_AVX512 1 \"register_operand\" \"%0\"))\n-\t  (match_operand:VF_AVX512 2 \"register_operand\" \"v\")\n-\t  (neg:VF_AVX512\n-\t    (vec_duplicate:VF_AVX512\n-\t      (match_operand:<ssescalarmode> 3 \"memory_operand\" \"m\")))))]\n-  \"TARGET_AVX512F && <sd_mask_mode512bit_condition>\"\n-  \"vfnmsub213<ssemodesuffix>\\t{%3<avx512bcst>, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %3<avx512bcst>}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name>_bcst_2\"\n-  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v,v\")\n-\t(fma:VF_AVX512\n-\t  (neg:VF_AVX512\n-\t    (vec_duplicate:VF_AVX512\n-\t      (match_operand:<ssescalarmode> 1 \"memory_operand\" \"m,m\")))\n-\t  (match_operand:VF_AVX512 2 \"register_operand\" \"0,v\")\n-\t  (neg:VF_AVX512\n-\t    (match_operand:VF_AVX512 3 \"register_operand\" \"v,0\"))))]\n-  \"TARGET_AVX512F && <sd_mask_mode512bit_condition>\"\n-  \"@\n-   vfnmsub132<ssemodesuffix>\\t{%1<avx512bcst>, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %1<avx512bcst>}\n-   vfnmsub231<ssemodesuffix>\\t{%1<avx512bcst>, %2, %0<sd_mask_op4>|%0<sd_mask_op4>, %2, %1<avx512bcst>}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name>_bcst_3\"\n-  [(set (match_operand:VF_AVX512 0 \"register_operand\" \"=v,v\")\n-\t(fma:VF_AVX512\n-\t  (neg:VF_AVX512\n-\t    (match_operand:VF_AVX512 1 \"register_operand\" \"0,v\"))\n-\t  (vec_duplicate:VF_AVX512\n-\t    (match_operand:<ssescalarmode> 2 \"memory_operand\" \"m,m\"))\n-\t  (neg:VF_AVX512\n-\t    (match_operand:VF_AVX512 3 \"register_operand\" \"v,0\"))))]\n-  \"TARGET_AVX512F && <sd_mask_mode512bit_condition>\"\n-  \"@\n-   vfnmsub132<ssemodesuffix>\\t{%2<avx512bcst>, %3, %0<sd_mask_op4>|%0<sd_mask_op4>, %3, %2<avx512bcst>}\n-   vfnmsub231<ssemodesuffix>\\t{%2<avx512bcst>, %1, %0<sd_mask_op4>|%0<sd_mask_op4>, %1, %2<avx512bcst>}\"\n-  [(set_attr \"type\" \"ssemuladd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n (define_insn \"<avx512>_fnmsub_<mode>_mask<round_name>\"\n   [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v,v\")\n \t(vec_merge:VF_AVX512VL\n@@ -11563,40 +11338,16 @@\n (define_insn \"*<plusminus_insn><mode>3\"\n   [(set (match_operand:VI_AVX2 0 \"register_operand\" \"=x,v\")\n \t(plusminus:VI_AVX2\n-\t  (match_operand:VI_AVX2 1 \"vector_operand\" \"<comm>0,v\")\n-\t  (match_operand:VI_AVX2 2 \"vector_operand\" \"xBm,vm\")))]\n+\t  (match_operand:VI_AVX2 1 \"bcst_vector_operand\" \"<comm>0,v\")\n+\t  (match_operand:VI_AVX2 2 \"bcst_vector_operand\" \"xBm,vmBr\")))]\n   \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"@\n    p<plusminus_mnemonic><ssemodesuffix>\\t{%2, %0|%0, %2}\n    vp<plusminus_mnemonic><ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseiadd\")\n    (set_attr \"prefix_data16\" \"1,*\")\n-   (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n-\n-(define_insn \"*sub<mode>3_bcst\"\n-  [(set (match_operand:VI48_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(minus:VI48_AVX512VL\n-\t  (match_operand:VI48_AVX512VL 1 \"register_operand\" \"v\")\n-\t  (vec_duplicate:VI48_AVX512VL\n-\t    (match_operand:<ssescalarmode> 2 \"memory_operand\" \"m\"))))]\n-  \"TARGET_AVX512F && ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\"\n-  \"vpsub<ssemodesuffix>\\t{%2<avx512bcst>, %1, %0|%0, %1, %2<avx512bcst>}\"\n-  [(set_attr \"type\" \"sseiadd\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n-\n-(define_insn \"*add<mode>3_bcst\"\n-  [(set (match_operand:VI48_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(plus:VI48_AVX512VL\n-\t  (vec_duplicate:VI48_AVX512VL\n-\t    (match_operand:<ssescalarmode> 1 \"memory_operand\" \"m\"))\n-\t  (match_operand:VI48_AVX512VL 2 \"register_operand\" \"v\")))]\n-  \"TARGET_AVX512F && ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n-  \"vpadd<ssemodesuffix>\\t{%1<avx512bcst>, %2, %0|%0, %2, %1<avx512bcst>}\"\n-  [(set_attr \"type\" \"sseiadd\")\n-   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"prefix\" \"orig,maybe_evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"*<plusminus_insn><mode>3_mask\"\n@@ -12110,24 +11861,13 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"avx512dq_mul<mode>3<mask_name>\"\n-  [(set (match_operand:VI8 0 \"register_operand\" \"=v\")\n-\t(mult:VI8\n-\t  (match_operand:VI8 1 \"register_operand\" \"v\")\n-\t  (match_operand:VI8 2 \"nonimmediate_operand\" \"vm\")))]\n-  \"TARGET_AVX512DQ && <mask_mode512bit_condition>\"\n-  \"vpmullq\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n-  [(set_attr \"type\" \"sseimul\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n-\n-(define_insn \"*avx512dq_mul<mode>3<mask_name>_bcst\"\n   [(set (match_operand:VI8_AVX512VL 0 \"register_operand\" \"=v\")\n \t(mult:VI8_AVX512VL\n-\t  (vec_duplicate:VI8_AVX512VL\n-\t    (match_operand:<ssescalarmode> 1 \"memory_operand\" \"m\"))\n-\t  (match_operand:VI8_AVX512VL 2 \"register_operand\" \"v\")))]\n-  \"TARGET_AVX512DQ\"\n-  \"vpmullq\\t{%1<avx512bcst>, %2, %0<mask_operand3>|%0<mask_operand3>, %2, %1<avx512bcst>}\"\n+\t  (match_operand:VI8_AVX512VL 1 \"bcst_vector_operand\" \"%v\")\n+\t  (match_operand:VI8_AVX512VL 2 \"bcst_vector_operand\" \"vmBr\")))]\n+  \"TARGET_AVX512DQ && <mask_mode512bit_condition>\n+  && ix86_binary_operator_ok (MULT, <MODE>mode, operands)\"\n+  \"vpmullq\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"sseimul\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n@@ -12157,33 +11897,21 @@\n (define_insn \"*<sse4_1_avx2>_mul<mode>3<mask_name>\"\n   [(set (match_operand:VI4_AVX512F 0 \"register_operand\" \"=Yr,*x,v\")\n \t(mult:VI4_AVX512F\n-\t  (match_operand:VI4_AVX512F 1 \"vector_operand\" \"%0,0,v\")\n-\t  (match_operand:VI4_AVX512F 2 \"vector_operand\" \"YrBm,*xBm,vm\")))]\n-  \"TARGET_SSE4_1 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n-   && <mask_mode512bit_condition>\"\n+\t  (match_operand:VI4_AVX512F 1 \"bcst_vector_operand\" \"%0,0,v\")\n+\t  (match_operand:VI4_AVX512F 2 \"bcst_vector_operand\" \"YrBm,*xBm,vmBr\")))]\n+  \"TARGET_SSE4_1 && ix86_binary_operator_ok (MULT, <MODE>mode, operands)\n+  && <mask_mode512bit_condition>\"\n   \"@\n    pmulld\\t{%2, %0|%0, %2}\n    pmulld\\t{%2, %0|%0, %2}\n    vpmulld\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"sseimul\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"<mask_prefix4>\")\n+   (set_attr \"prefix\" \"<bcst_mask_prefix4>\")\n    (set_attr \"btver2_decode\" \"vector,vector,vector\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"*avx512f_mul<mode>3<mask_name>_bcst\"\n-  [(set (match_operand:VI4_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(mult:VI4_AVX512VL\n-\t  (vec_duplicate:VI4_AVX512VL\n-\t    (match_operand:<ssescalarmode> 1 \"memory_operand\" \"m\"))\n-\t  (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")))]\n-  \"TARGET_AVX512F\"\n-   \"vpmulld\\t{%1<avx512bcst>, %2, %0<mask_operand3>|%0<mask_operand3>, %2, %1<avx512bcst>}\"\n-  [(set_attr \"type\" \"sseimul\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n-\n (define_expand \"mul<mode>3\"\n   [(set (match_operand:VI8_AVX2_AVX512F 0 \"register_operand\")\n \t(mult:VI8_AVX2_AVX512F\n@@ -13210,7 +12938,7 @@\n   [(set (match_operand:VI 0 \"register_operand\" \"=x,x,v\")\n \t(and:VI\n \t  (not:VI (match_operand:VI 1 \"register_operand\" \"0,x,v\"))\n-\t  (match_operand:VI 2 \"vector_operand\" \"xBm,xm,vm\")))]\n+\t  (match_operand:VI 2 \"bcst_vector_operand\" \"xBm,xm,vmBr\")))]\n   \"TARGET_SSE\"\n {\n   char buf[64];\n@@ -13309,19 +13037,6 @@\n \t      ]\n \t      (const_string \"<sseinsnmode>\")))])\n \n-(define_insn \"*andnot<mode>3_bcst\"\n-  [(set (match_operand:VI48_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(and:VI48_AVX512VL\n-\t  (not:VI48_AVX512VL\n-\t     (match_operand:VI48_AVX512VL 1 \"register_operand\" \"v\"))\n-\t  (vec_duplicate:VI48_AVX512VL\n-\t    (match_operand:<ssescalarmode> 2 \"memory_operand\" \"m\"))))]\n-  \"TARGET_AVX512F\"\n-  \"vpandn<ssemodesuffix>\\t{%2<avx512bcst>, %1, %0|%0, %1, %2<avx512bcst>}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n-\n (define_insn \"*andnot<mode>3_mask\"\n   [(set (match_operand:VI48_AVX512VL 0 \"register_operand\" \"=v\")\n \t(vec_merge:VI48_AVX512VL\n@@ -13351,10 +13066,10 @@\n (define_insn \"<mask_codefor><code><mode>3<mask_name>\"\n   [(set (match_operand:VI48_AVX_AVX512F 0 \"register_operand\" \"=x,x,v\")\n \t(any_logic:VI48_AVX_AVX512F\n-\t  (match_operand:VI48_AVX_AVX512F 1 \"vector_operand\" \"%0,x,v\")\n-\t  (match_operand:VI48_AVX_AVX512F 2 \"vector_operand\" \"xBm,xm,vm\")))]\n+\t  (match_operand:VI48_AVX_AVX512F 1 \"bcst_vector_operand\" \"%0,x,v\")\n+\t  (match_operand:VI48_AVX_AVX512F 2 \"bcst_vector_operand\" \"xBm,xm,vmBr\")))]\n   \"TARGET_SSE && <mask_mode512bit_condition>\n-   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n+   && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n {\n   char buf[64];\n   const char *ops;\n@@ -13540,18 +13255,6 @@\n \t      ]\n \t      (const_string \"<sseinsnmode>\")))])\n \n-(define_insn \"*<code><mode>3_bcst\"\n-  [(set (match_operand:VI48_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(any_logic:VI48_AVX512VL\n-\t  (vec_duplicate:VI48_AVX512VL\n-\t    (match_operand:<ssescalarmode> 1 \"memory_operand\" \"m\"))\n-\t  (match_operand:VI48_AVX512VL 2 \"register_operand\" \"v\")))]\n-  \"TARGET_AVX512F && <mask_avx512vl_condition>\"\n-  \"vp<logic><ssemodesuffix>\\t{%1<avx512bcst>, %2, %0<mask_operand3>|%0<mask_operand3>, %2, %1<avx512bcst>}\"\n-  [(set_attr \"type\" \"sseiadd\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n-\n (define_mode_iterator VI1248_AVX512VLBW\n   [(V64QI \"TARGET_AVX512BW\") (V32QI \"TARGET_AVX512VL && TARGET_AVX512BW\")\n    (V16QI \"TARGET_AVX512VL && TARGET_AVX512BW\")"}, {"sha": "e037a9649aa22650822e12c1c75b46233d6fd369", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7026bb9504eb0f95e114f832cd6dd14302376861/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7026bb9504eb0f95e114f832cd6dd14302376861/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=7026bb9504eb0f95e114f832cd6dd14302376861", "patch": "@@ -60,7 +60,9 @@\n (define_subst_attr \"mask_prefix\" \"mask\" \"vex\" \"evex\")\n (define_subst_attr \"mask_prefix2\" \"mask\" \"maybe_vex\" \"evex\")\n (define_subst_attr \"mask_prefix3\" \"mask\" \"orig,vex\" \"evex,evex\")\n+(define_subst_attr \"bcst_mask_prefix3\" \"mask\" \"orig,maybe_evex\" \"evex,evex\")\n (define_subst_attr \"mask_prefix4\" \"mask\" \"orig,orig,vex\" \"evex,evex,evex\")\n+(define_subst_attr \"bcst_mask_prefix4\" \"mask\" \"orig,orig,maybe_evex\" \"evex,evex,evex\")\n (define_subst_attr \"mask_expand_op3\" \"mask\" \"3\" \"5\")\n \n (define_subst \"mask\"\n@@ -130,9 +132,11 @@\n (define_subst_attr \"round_mask_op4\" \"round\" \"\" \"<round_mask_operand4>\")\n (define_subst_attr \"round_sd_mask_op4\" \"round\" \"\" \"<round_sd_mask_operand4>\")\n (define_subst_attr \"round_constraint\" \"round\" \"vm\" \"v\")\n+(define_subst_attr \"bcst_round_constraint\" \"round\" \"vmBr\" \"v\")\n (define_subst_attr \"round_constraint2\" \"round\" \"m\" \"v\")\n (define_subst_attr \"round_constraint3\" \"round\" \"rm\" \"r\")\n (define_subst_attr \"round_nimm_predicate\" \"round\" \"vector_operand\" \"register_operand\")\n+(define_subst_attr \"bcst_round_nimm_predicate\" \"round\" \"bcst_vector_operand\" \"register_operand\")\n (define_subst_attr \"round_nimm_scalar_predicate\" \"round\" \"nonimmediate_operand\" \"register_operand\")\n (define_subst_attr \"round_prefix\" \"round\" \"vex\" \"evex\")\n (define_subst_attr \"round_mode512bit_condition\" \"round\" \"1\" \"(<MODE>mode == V16SFmode"}]}