{"sha": "827bdee40df26e3b67824885c60a775d4c3dbe41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI3YmRlZTQwZGYyNmUzYjY3ODI0ODg1YzYwYTc3NWQ0YzNkYmU0MQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2000-10-06T18:12:07Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-10-06T18:12:07Z"}, "message": "sh.md (call, call_value): Use `TARGET_SH2' instead of `! TARGET_SH1'.\n\n* config/sh/sh.md (call, call_value): Use `TARGET_SH2' instead of\n`! TARGET_SH1'.  Reindent.\n\nFrom-SVN: r36759", "tree": {"sha": "44d61370ec4c98691b11054450c1d69765d6d4fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44d61370ec4c98691b11054450c1d69765d6d4fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/827bdee40df26e3b67824885c60a775d4c3dbe41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/827bdee40df26e3b67824885c60a775d4c3dbe41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/827bdee40df26e3b67824885c60a775d4c3dbe41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/827bdee40df26e3b67824885c60a775d4c3dbe41/comments", "author": null, "committer": null, "parents": [{"sha": "c70eaeafa005e95e565806c8c9b30e54c8e8642f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c70eaeafa005e95e565806c8c9b30e54c8e8642f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c70eaeafa005e95e565806c8c9b30e54c8e8642f"}], "stats": {"total": 75, "additions": 42, "deletions": 33}, "files": [{"sha": "ce617b3f28b9bcfc8a73fd8a2c19a09675a6d514", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827bdee40df26e3b67824885c60a775d4c3dbe41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827bdee40df26e3b67824885c60a775d4c3dbe41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=827bdee40df26e3b67824885c60a775d4c3dbe41", "patch": "@@ -1,3 +1,8 @@\n+2000-10-06  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config/sh/sh.md (call, call_value): Use `TARGET_SH2' instead of\n+\t`! TARGET_SH1'.  Reindent.\n+\n 2000-10-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtins.c (is_valid_printf_arglist, expand_builtin_printf):"}, {"sha": "25983569970029066ec3f83ae1b9e80d8c384fd3", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 37, "deletions": 33, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/827bdee40df26e3b67824885c60a775d4c3dbe41/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/827bdee40df26e3b67824885c60a775d4c3dbe41/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=827bdee40df26e3b67824885c60a775d4c3dbe41", "patch": "@@ -3331,22 +3331,24 @@\n \t      (clobber (reg:SI 17))])]\n   \"\"\n   \"\n-if (flag_pic && ! TARGET_SH1 && ! flag_unroll_loops\n-    && GET_CODE (operands[0]) == MEM\n-    && GET_CODE (XEXP (operands[0], 0)) == SYMBOL_REF)\n-  {\n-    rtx reg = gen_reg_rtx (SImode), lab = gen_label_rtx ();\n-\n-    if (SYMBOL_REF_FLAG (XEXP (operands[0], 0)))\n-      emit_insn (gen_sym_label2reg (reg, XEXP (operands[0], 0), lab));\n-    else\n-      emit_insn (gen_symPLT_label2reg (reg, XEXP (operands[0], 0), lab));\n-    operands[0] = reg;\n-    emit_call_insn (gen_calli_pcrel (operands[0], operands[1], lab));\n-    DONE;\n-  }\n-else\n-  operands[0] = force_reg (SImode, XEXP (operands[0], 0));\")\n+{\n+  if (flag_pic && TARGET_SH2 && ! flag_unroll_loops\n+      && GET_CODE (operands[0]) == MEM\n+      && GET_CODE (XEXP (operands[0], 0)) == SYMBOL_REF)\n+    {\n+      rtx reg = gen_reg_rtx (SImode), lab = gen_label_rtx ();\n+\n+      if (SYMBOL_REF_FLAG (XEXP (operands[0], 0)))\n+\temit_insn (gen_sym_label2reg (reg, XEXP (operands[0], 0), lab));\n+      else\n+\temit_insn (gen_symPLT_label2reg (reg, XEXP (operands[0], 0), lab));\n+      operands[0] = reg;\n+      emit_call_insn (gen_calli_pcrel (operands[0], operands[1], lab));\n+      DONE;\n+    }\n+  else\n+    operands[0] = force_reg (SImode, XEXP (operands[0], 0));\n+}\")\n \n (define_expand \"call_value\"\n   [(parallel [(set (match_operand 0 \"arith_reg_operand\" \"\")\n@@ -3356,23 +3358,25 @@ else\n \t      (clobber (reg:SI 17))])]\n   \"\"\n   \"\n-if (flag_pic && ! TARGET_SH1 && ! flag_unroll_loops\n-    && GET_CODE (operands[1]) == MEM\n-    && GET_CODE (XEXP (operands[1], 0)) == SYMBOL_REF)\n-  {\n-    rtx reg = gen_reg_rtx (SImode), lab = gen_label_rtx ();\n-\n-    if (SYMBOL_REF_FLAG (XEXP (operands[1], 0)))\n-      emit_insn (gen_sym_label2reg (reg, XEXP (operands[1], 0), lab));\n-    else\n-      emit_insn (gen_symPLT_label2reg (reg, XEXP (operands[1], 0), lab));\n-    operands[1] = reg;\n-    emit_call_insn (gen_call_valuei_pcrel (operands[0], operands[1],\n-\t\t\t\t\t   operands[2], lab));\n-    DONE;\n-  }\n-else\n-  operands[1] = force_reg (SImode, XEXP (operands[1], 0));\")\n+{\n+  if (flag_pic && TARGET_SH2 && ! flag_unroll_loops\n+      && GET_CODE (operands[1]) == MEM\n+      && GET_CODE (XEXP (operands[1], 0)) == SYMBOL_REF)\n+    {\n+      rtx reg = gen_reg_rtx (SImode), lab = gen_label_rtx ();\n+\n+      if (SYMBOL_REF_FLAG (XEXP (operands[1], 0)))\n+\temit_insn (gen_sym_label2reg (reg, XEXP (operands[1], 0), lab));\n+      else\n+\temit_insn (gen_symPLT_label2reg (reg, XEXP (operands[1], 0), lab));\n+      operands[1] = reg;\n+      emit_call_insn (gen_call_valuei_pcrel (operands[0], operands[1],\n+\t\t\t\t\t     operands[2], lab));\n+      DONE;\n+    }\n+  else\n+    operands[1] = force_reg (SImode, XEXP (operands[1], 0));\n+}\")\n \n (define_insn \"indirect_jump\"\n   [(set (pc)"}]}