{"sha": "eda0ed2597cfab9c967d229b7df2986ef92e663d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRhMGVkMjU5N2NmYWI5Yzk2N2QyMjliN2RmMjk4NmVmOTJlNjYzZA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-08-13T21:02:00Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-08-13T21:02:00Z"}, "message": "re PR fortran/32926 (ICE with external function as argument)\n\n2007-08-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/32926\n\t* match.c (gfc_match_call): Do not create a new symtree in the\n\tcase where the existing symbol is external and not referenced.\n\n2007-08-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/32926\n\t* gfortran.dg/external_procedures_3.f90: New test.\n\nFrom-SVN: r127398", "tree": {"sha": "3f83c824eeb73cf13412e3276dbd038231c3b913", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f83c824eeb73cf13412e3276dbd038231c3b913"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eda0ed2597cfab9c967d229b7df2986ef92e663d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eda0ed2597cfab9c967d229b7df2986ef92e663d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eda0ed2597cfab9c967d229b7df2986ef92e663d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eda0ed2597cfab9c967d229b7df2986ef92e663d/comments", "author": null, "committer": null, "parents": [{"sha": "5a8af0b4ef5b662dca364091fc4d662eca12bb29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a8af0b4ef5b662dca364091fc4d662eca12bb29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a8af0b4ef5b662dca364091fc4d662eca12bb29"}], "stats": {"total": 61, "additions": 55, "deletions": 6}, "files": [{"sha": "b6edba44b407380fbdf067be7601c02b1f7b0b36", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda0ed2597cfab9c967d229b7df2986ef92e663d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda0ed2597cfab9c967d229b7df2986ef92e663d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=eda0ed2597cfab9c967d229b7df2986ef92e663d", "patch": "@@ -1,3 +1,9 @@\n+2007-08-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/32926\n+\t* match.c (gfc_match_call): Do not create a new symtree in the\n+\tcase where the existing symbol is external and not referenced.\n+\n 2007-08-13  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/32827"}, {"sha": "5f56948e0f6137202567eef4dd3a45925231e219", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda0ed2597cfab9c967d229b7df2986ef92e663d/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda0ed2597cfab9c967d229b7df2986ef92e663d/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=eda0ed2597cfab9c967d229b7df2986ef92e663d", "patch": "@@ -2333,13 +2333,16 @@ gfc_match_call (void)\n   if (!sym->attr.generic\n \t&& !sym->attr.subroutine)\n     {\n-      /* ...create a symbol in this scope...  */\n-      if (sym->ns != gfc_current_ns\n-\t    && gfc_get_sym_tree (name, NULL, &st) == 1)\n-        return MATCH_ERROR;\n+      if (!(sym->attr.external && !sym->attr.referenced))\n+\t{\n+\t  /* ...create a symbol in this scope...  */\n+\t  if (sym->ns != gfc_current_ns\n+\t        && gfc_get_sym_tree (name, NULL, &st) == 1)\n+            return MATCH_ERROR;\n \n-      if (sym != st->n.sym)\n-\tsym = st->n.sym;\n+\t  if (sym != st->n.sym)\n+\t    sym = st->n.sym;\n+\t}\n \n       /* ...and then to try to make the symbol into a subroutine.  */\n       if (gfc_add_subroutine (&sym->attr, sym->name, NULL) == FAILURE)"}, {"sha": "9595f222548fa79d2420d99fecff7c5a60193519", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda0ed2597cfab9c967d229b7df2986ef92e663d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda0ed2597cfab9c967d229b7df2986ef92e663d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eda0ed2597cfab9c967d229b7df2986ef92e663d", "patch": "@@ -1,3 +1,8 @@\n+2007-08-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/32926\n+\t* gfortran.dg/external_procedures_3.f90: New test.\n+\n 2007-08-13  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/32827"}, {"sha": "987ba793cd0fe6d799221c6294e12d42e1fbfc09", "filename": "gcc/testsuite/gfortran.dg/external_procedures_3.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda0ed2597cfab9c967d229b7df2986ef92e663d/gcc%2Ftestsuite%2Fgfortran.dg%2Fexternal_procedures_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda0ed2597cfab9c967d229b7df2986ef92e663d/gcc%2Ftestsuite%2Fgfortran.dg%2Fexternal_procedures_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fexternal_procedures_3.f90?ref=eda0ed2597cfab9c967d229b7df2986ef92e663d", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do run }\n+! Tests the fix for PR32926, in which the call to fcn\n+! in bar would cause an ICE because it had not been referenced\n+! in the namespace where it was declared.\n+!\n+! Contributed by Ralph Baker Kearfott <rbk@louisiana.edu>\n+!\n+subroutine foobar1\n+  common // chr\n+  character(8) :: chr\n+  chr = \"foobar1\"\n+end subroutine\n+subroutine foobar2\n+  common // chr\n+  character(8) :: chr\n+  chr = \"foobar2\"\n+end subroutine\n+\n+subroutine foo (fcn)\n+  external fcn\n+  call bar\n+contains\n+  subroutine bar\n+    call fcn\n+  end subroutine bar\n+end subroutine foo\n+\n+  external foo, foobar1, foobar2\n+  common // chr\n+  character(8) :: chr\n+  call foo (foobar1)\n+  if (chr .ne. \"foobar1\") call abort ()\n+  call foo (foobar2)\n+  if (chr .ne. \"foobar2\") call abort ()\n+end"}]}