{"sha": "b978975256b9186e27f7c626f67a5e5bddb10e33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk3ODk3NTI1NmI5MTg2ZTI3ZjdjNjI2ZjY3YTVlNWJkZGIxMGUzMw==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2018-11-16T11:47:47Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@gcc.gnu.org", "date": "2018-11-16T11:47:47Z"}, "message": "S/390: Add a new pattern for r{o,x}sbg\n\nFixes rXsbg_mode_sXl test failures.\n\nCombine used to give us\n\n(set (reg:SI 65)\n    (ior:SI (lshiftrt:SI (reg:SI 3 %r3 [ bD.2238 ])\n            (const_int 2 [0x2]))\n        (reg:SI 2 %r2 [ aD.2237 ])))\n\nbut now we get\n\n(set (reg:SI 65)\n    (ior:SI (subreg:SI (zero_extract:DI (reg:DI 69)\n                (const_int 32 [0x20])\n                (const_int 30 [0x1e])) 4)\n        (subreg:SI (reg:DI 68) 4)))\n\nor\n\n(set (reg:SI 65)\n    (ior:SI (subreg:SI (and:DI (lshiftrt:DI (reg:DI 69)\n                    (const_int 2 [0x2]))\n                (const_int 4294967295 [0xffffffff])) 4)\n        (subreg:SI (reg:DI 68) 4)))\n\nwith an extra subreg, which appears because pseudos, unlike hard\nregisters, can be accessed only using their natural mode.\n\nThis patch adds a special case for that.  Also, it performs r*sbg\nbit index computations during gcc run, so that expectations do not\ndepend on which concrete pattern was matched.\n\ngcc/ChangeLog:\n\n2018-11-16  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* config/s390/s390.md\n\t(*r<noxa>sbg_<mode>_srl_bitmask): Do not delegate arithmetic to\n\tassembler.\n\t(*r<noxa>sbg_<mode>_sll): Likewise.\n\t(*r<noxa>sbg_<mode>_srl): Likewise.\n\t(*r<noxa>sbg_sidi_srl): New pattern.\n\ngcc/testsuite/ChangeLog:\n\n2018-11-16  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* gcc.target/s390/md/rXsbg_mode_sXl.c: Do not use arithmetic in\n\tr{o,x}sbg expectations.\n\t* gcc.target/s390/risbg-ll-2.c: Likewise.\n\nFrom-SVN: r266203", "tree": {"sha": "25400d1fbe22803be77a0fdcae181213b7471cd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25400d1fbe22803be77a0fdcae181213b7471cd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b978975256b9186e27f7c626f67a5e5bddb10e33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b978975256b9186e27f7c626f67a5e5bddb10e33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b978975256b9186e27f7c626f67a5e5bddb10e33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b978975256b9186e27f7c626f67a5e5bddb10e33/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "43c6ad435bcb037b426545696c5a657994f2fecf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43c6ad435bcb037b426545696c5a657994f2fecf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43c6ad435bcb037b426545696c5a657994f2fecf"}], "stats": {"total": 75, "additions": 63, "deletions": 12}, "files": [{"sha": "8ca2e73ef966a9392a8148192a711799323f919a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b978975256b9186e27f7c626f67a5e5bddb10e33/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b978975256b9186e27f7c626f67a5e5bddb10e33/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b978975256b9186e27f7c626f67a5e5bddb10e33", "patch": "@@ -1,3 +1,12 @@\n+2018-11-16  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* config/s390/s390.md\n+\t(*r<noxa>sbg_<mode>_srl_bitmask): Do not delegate arithmetic to\n+\tassembler.\n+\t(*r<noxa>sbg_<mode>_sll): Likewise.\n+\t(*r<noxa>sbg_<mode>_srl): Likewise.\n+\t(*r<noxa>sbg_sidi_srl): New pattern.\n+\n 2018-11-16  Jerome Lambourg  <lambourg@adacore.com>\n \n \t* config/vxworks.h (TARGET_VXWORKS_HAVE_CTORS_DTORS): New macro."}, {"sha": "7a556d40224943747516efd719186b7285854c8d", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b978975256b9186e27f7c626f67a5e5bddb10e33/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b978975256b9186e27f7c626f67a5e5bddb10e33/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=b978975256b9186e27f7c626f67a5e5bddb10e33", "patch": "@@ -4276,7 +4276,12 @@\n   \"TARGET_Z10\n    && s390_extzv_shift_ok (<bitsize>, 64 - INTVAL (operands[3]),\n                            INTVAL (operands[2]))\"\n-  \"r<noxa>sbg\\t%0,%1,%<bfstart>2,%<bfend>2,64-%3\"\n+  {\n+    static char buffer[256];\n+    sprintf (buffer, \"r<noxa>sbg\\t%%0,%%1,%%<bfstart>2,%%<bfend>2,%ld\",\n+             64 - INTVAL (operands[3]));\n+    return buffer;\n+  }\n   [(set_attr \"op_type\" \"RIE\")])\n \n ; rosbg, rxsbg\n@@ -4309,7 +4314,12 @@\n \t  (match_operand:GPR 3 \"nonimmediate_operand\" \"0\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_Z10\"\n-  \"r<noxa>sbg\\t%0,%1,<bitoff>,63-%2,%2\"\n+  {\n+    static char buffer[256];\n+    sprintf (buffer, \"r<noxa>sbg\\t%%0,%%1,<bitoff>,%ld,%%2\",\n+             63 - INTVAL (operands[2]));\n+    return buffer;\n+  }\n   [(set_attr \"op_type\" \"RIE\")])\n \n ;; unsigned {int,long} a, b\n@@ -4325,7 +4335,33 @@\n \t  (match_operand:GPR 3 \"nonimmediate_operand\" \"0\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_Z10\"\n-  \"r<noxa>sbg\\t%0,%1,<bitoff_plus>%2,63,64-%2\"\n+  {\n+    static char buffer[256];\n+    sprintf (buffer, \"r<noxa>sbg\\t%%0,%%1,%ld,63,%ld\",\n+             <bitoff_plus> INTVAL (operands[2]), 64 - INTVAL (operands[2]));\n+    return buffer;\n+  }\n+  [(set_attr \"op_type\" \"RIE\")])\n+\n+; rosbg, rxsbg\n+(define_insn \"*r<noxa>sbg_sidi_srl\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d\")\n+        (IXOR:SI\n+          (subreg:SI\n+            (zero_extract:DI\n+              (match_operand:DI 1 \"nonimmediate_operand\" \"d\")\n+              (const_int 32)\n+              (match_operand:DI 2 \"immediate_operand\" \"\"))\n+            4)\n+          (match_operand:SI 3 \"nonimmediate_operand\" \"0\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_Z10\"\n+  {\n+    static char buffer[256];\n+    sprintf (buffer, \"r<noxa>sbg\\t%%0,%%1,%ld,63,%ld\",\n+             64 - INTVAL (operands[2]), 32 + INTVAL (operands[2]));\n+    return buffer;\n+  }\n   [(set_attr \"op_type\" \"RIE\")])\n \n ;; These two are generated by combine for s.bf &= val."}, {"sha": "647ea5dfeeb66bb968fa15196a9dbac8ccadd630", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b978975256b9186e27f7c626f67a5e5bddb10e33/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b978975256b9186e27f7c626f67a5e5bddb10e33/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b978975256b9186e27f7c626f67a5e5bddb10e33", "patch": "@@ -1,3 +1,9 @@\n+2018-11-16  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* gcc.target/s390/md/rXsbg_mode_sXl.c: Do not use arithmetic in\n+\tr{o,x}sbg expectations.\n+\t* gcc.target/s390/risbg-ll-2.c: Likewise.\n+\n 2018-11-16  Richard Biener  <rguenther@suse.de>\n \n \tPR testsuite/88053"}, {"sha": "600914280e5c6431b8f85b02bfaeab29b3b25d68", "filename": "gcc/testsuite/gcc.target/s390/md/rXsbg_mode_sXl.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b978975256b9186e27f7c626f67a5e5bddb10e33/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2FrXsbg_mode_sXl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b978975256b9186e27f7c626f67a5e5bddb10e33/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2FrXsbg_mode_sXl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmd%2FrXsbg_mode_sXl.c?ref=b978975256b9186e27f7c626f67a5e5bddb10e33", "patch": "@@ -39,28 +39,28 @@ rosbg_si_sll (unsigned int a, unsigned int b)\n {\n   return a | (b << 1);\n }\n-/* { dg-final { scan-assembler-times \"rosbg\\t%r.,%r.,32,63-1,1\" 1 } } */\n+/* { dg-final { scan-assembler-times \"rosbg\\t%r.,%r.,32,62,1\" 1 } } */\n \n __attribute__ ((noinline)) unsigned int\n rosbg_si_srl (unsigned int a, unsigned int b)\n {\n   return a | (b >> 2);\n }\n-/* { dg-final { scan-assembler-times \"rosbg\\t%r.,%r.,32\\\\+2,63,64-2\" 1 } } */\n+/* { dg-final { scan-assembler-times \"rosbg\\t%r.,%r.,34,63,62\" 1 } } */\n \n __attribute__ ((noinline)) unsigned int\n rxsbg_si_sll (unsigned int a, unsigned int b)\n {\n   return a ^ (b << 1);\n }\n-/* { dg-final { scan-assembler-times \"rxsbg\\t%r.,%r.,32,63-1,1\" 1 } } */\n+/* { dg-final { scan-assembler-times \"rxsbg\\t%r.,%r.,32,62,1\" 1 } } */\n \n __attribute__ ((noinline)) unsigned int\n rxsbg_si_srl (unsigned int a, unsigned int b)\n {\n   return a ^ (b >> 2);\n }\n-/* { dg-final { scan-assembler-times \"rxsbg\\t%r.,%r.,32\\\\+2,63,64-2\" 1 } } */\n+/* { dg-final { scan-assembler-times \"rxsbg\\t%r.,%r.,34,63,62\" 1 } } */\n \n __attribute__ ((noinline)) unsigned long long\n di_sll (unsigned long long x)\n@@ -79,28 +79,28 @@ rosbg_di_sll (unsigned long long a, unsigned long long b)\n {\n   return a | (b << 1);\n }\n-/* { dg-final { scan-assembler-times \"rosbg\\t%r.,%r.,0,63-1,1\" 1 } } */\n+/* { dg-final { scan-assembler-times \"rosbg\\t%r.,%r.,0,62,1\" 1 } } */\n \n __attribute__ ((noinline)) unsigned long long\n rosbg_di_srl (unsigned long long a, unsigned long long b)\n {\n   return a | (b >> 2);\n }\n-/* { dg-final { scan-assembler-times \"rosbg\\t%r.,%r.,2,63,64-2\" 1 } } */\n+/* { dg-final { scan-assembler-times \"rosbg\\t%r.,%r.,2,63,62\" 1 } } */\n \n __attribute__ ((noinline)) unsigned long long\n rxsbg_di_sll (unsigned long long a, unsigned long long b)\n {\n   return a ^ (b << 1);\n }\n-/* { dg-final { scan-assembler-times \"rxsbg\\t%r.,%r.,0,63-1,1\" 1 } } */\n+/* { dg-final { scan-assembler-times \"rxsbg\\t%r.,%r.,0,62,1\" 1 } } */\n \n __attribute__ ((noinline)) unsigned long long\n rxsbg_di_srl (unsigned long long a, unsigned long long b)\n {\n   return a ^ (b >> 2);\n }\n-/* { dg-final { scan-assembler-times \"rxsbg\\t%r.,%r.,2,63,64-2\" 1 } } */\n+/* { dg-final { scan-assembler-times \"rxsbg\\t%r.,%r.,2,63,62\" 1 } } */\n \n int\n main (void)"}, {"sha": "754c17311dd77eeca7e21fb0d2732040c3e4b27d", "filename": "gcc/testsuite/gcc.target/s390/risbg-ll-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b978975256b9186e27f7c626f67a5e5bddb10e33/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Frisbg-ll-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b978975256b9186e27f7c626f67a5e5bddb10e33/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Frisbg-ll-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Frisbg-ll-2.c?ref=b978975256b9186e27f7c626f67a5e5bddb10e33", "patch": "@@ -114,7 +114,7 @@ i32 f9 (i64 v_x, i32 v_y)\n i32 f10 (i64 v_x, i32 v_y)\n {\n   /* { dg-final { scan-assembler \"f10:\\n\\tsrlg\\t%r2,%r2,48\\n\\trosbg\\t%r2,%r3,32,39,0\" { target { lp64 } } } } */\n-  /* { dg-final { scan-assembler \"f10:\\n\\tnilf\\t%r4,4278190080\\n\\trosbg\\t%r4,%r2,32\\\\\\+16,63,64-16\" { target { ! lp64 } } } } */\n+  /* { dg-final { scan-assembler \"f10:\\n\\tnilf\\t%r4,4278190080\\n\\trosbg\\t%r4,%r2,48,63,48\" { target { ! lp64 } } } } */\n   i64 v_shr6 = ((ui64)v_x) >> 48;\n   i32 v_conv = (ui32)v_shr6;\n   i32 v_and1 = v_y & -16777216;"}]}