{"sha": "13eb1f7f0de383603d383c0644873ac8cb1afc62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNlYjFmN2YwZGUzODM2MDNkMzgzYzA2NDQ4NzNhYzhjYjFhZmM2Mg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-03-28T17:01:49Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-03-28T17:01:49Z"}, "message": "expr.c (store_constructor): SIZE now signed.\n\n\t* expr.c (store_constructor): SIZE now signed.\n\tFor EXPR_SIZE, don't evaluate size; just needed if constant.\n\t* fold-const.c (fold): Fix a number of cases when folded tree is\n\twrong type.\n\t* function.c (flush_addressof): Reenable.\n\t* tree.h (flush_addressof): Likewise.\n\t* toplev.c (independent_decode_option): Look at strings_processed.\n\t* config/alpha/alpha.h (MINIMUM_ATOMIC_ALIGNMENT): Cast to unsigned.\n\nFrom-SVN: r32783", "tree": {"sha": "8ddabb9ddd5277b376e6de09f3dacadff7114776", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ddabb9ddd5277b376e6de09f3dacadff7114776"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13eb1f7f0de383603d383c0644873ac8cb1afc62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13eb1f7f0de383603d383c0644873ac8cb1afc62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13eb1f7f0de383603d383c0644873ac8cb1afc62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13eb1f7f0de383603d383c0644873ac8cb1afc62/comments", "author": null, "committer": null, "parents": [{"sha": "5a97f7c2d7fa5680ef0942f27ddb2d399dac2227", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a97f7c2d7fa5680ef0942f27ddb2d399dac2227", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a97f7c2d7fa5680ef0942f27ddb2d399dac2227"}], "stats": {"total": 89, "additions": 50, "deletions": 39}, "files": [{"sha": "fb06be1bcddd23c472eaaf6510318ab0d49ecd87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13eb1f7f0de383603d383c0644873ac8cb1afc62/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13eb1f7f0de383603d383c0644873ac8cb1afc62/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13eb1f7f0de383603d383c0644873ac8cb1afc62", "patch": "@@ -1,3 +1,14 @@\n+Tue Mar 28 11:55:48 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* expr.c (store_constructor): SIZE now signed.\n+\tFor EXPR_SIZE, don't evaluate size; just needed if constant.\n+\t* fold-const.c (fold): Fix a number of cases when folded tree is\n+\twrong type.\n+\t* function.c (flush_addressof): Reenable.\n+\t* tree.h (flush_addressof): Likewise.\n+\t* toplev.c (independent_decode_option): Look at strings_processed.\n+\t* config/alpha/alpha.h (MINIMUM_ATOMIC_ALIGNMENT): Cast to unsigned.\n+\n Tue Mar 28 08:29:46 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* regmove.c (struct csa_memlist): Make mem field rtx *."}, {"sha": "452899d4ed997d2d9725a6ff6c3f327e56e43c14", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13eb1f7f0de383603d383c0644873ac8cb1afc62/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13eb1f7f0de383603d383c0644873ac8cb1afc62/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=13eb1f7f0de383603d383c0644873ac8cb1afc62", "patch": "@@ -519,7 +519,7 @@ extern const char *alpha_mlat_string;\t/* For -mmemory-latency= */\n \n /* For atomic access to objects, must have at least 32-bit alignment\n    unless the machine has byte operations.  */\n-#define MINIMUM_ATOMIC_ALIGNMENT (TARGET_BWX ? 8 : 32)\n+#define MINIMUM_ATOMIC_ALIGNMENT ((unsigned int) (TARGET_BWX ? 8 : 32))\n \n /* Align all constants and variables to at least a word boundary so\n    we can pick up pieces of them faster.  */"}, {"sha": "37a352ed385f25e503bb21d01483f5273306bd95", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13eb1f7f0de383603d383c0644873ac8cb1afc62/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13eb1f7f0de383603d383c0644873ac8cb1afc62/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=13eb1f7f0de383603d383c0644873ac8cb1afc62", "patch": "@@ -572,7 +572,6 @@ lang_decode_option (argc, argv)\n #endif\n   ;\n      char **argv;\n-\n {\n   int strings_processed;\n   char *p = argv[0];"}, {"sha": "447382b96d56d46a682b1ef5b2f84c79c1e3e264", "filename": "gcc/expr.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13eb1f7f0de383603d383c0644873ac8cb1afc62/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13eb1f7f0de383603d383c0644873ac8cb1afc62/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=13eb1f7f0de383603d383c0644873ac8cb1afc62", "patch": "@@ -147,7 +147,7 @@ static void store_constructor_field PARAMS ((rtx, unsigned HOST_WIDE_INT,\n \t\t\t\t\t     HOST_WIDE_INT, enum machine_mode,\n \t\t\t\t\t     tree, tree, unsigned int, int));\n static void store_constructor\tPARAMS ((tree, rtx, unsigned int, int,\n-\t\t\t\t\t unsigned HOST_WIDE_INT));\n+\t\t\t\t\t HOST_WIDE_INT));\n static rtx store_field\t\tPARAMS ((rtx, HOST_WIDE_INT,\n \t\t\t\t\t HOST_WIDE_INT, enum machine_mode,\n \t\t\t\t\t tree, enum machine_mode, int,\n@@ -4121,11 +4121,11 @@ store_constructor (exp, target, align, cleared, size)\n      rtx target;\n      unsigned int align;\n      int cleared;\n-     unsigned HOST_WIDE_INT size;\n+     HOST_WIDE_INT size;\n {\n   tree type = TREE_TYPE (exp);\n #ifdef WORD_REGISTER_OPERATIONS\n-  rtx exp_size = expr_size (exp);\n+  HOST_WIDE_INT exp_size = int_size_in_bytes (type);\n #endif\n \n   /* We know our target cannot conflict, since safe_from_p has been called.  */\n@@ -4285,8 +4285,8 @@ store_constructor (exp, target, align, cleared, size)\n \t      && bitpos % BITS_PER_WORD == 0\n \t      && GET_MODE_CLASS (mode) == MODE_INT\n \t      && TREE_CODE (value) == INTEGER_CST\n-\t      && GET_CODE (exp_size) == CONST_INT\n-\t      && bitpos + BITS_PER_WORD <= INTVAL (exp_size) * BITS_PER_UNIT)\n+\t      && exp_size >= 0\n+\t      && bitpos + BITS_PER_WORD <= exp_size * BITS_PER_UNIT)\n \t    {\n \t      tree type = TREE_TYPE (value);\n \t      if (TYPE_PRECISION (type) < BITS_PER_WORD)"}, {"sha": "19b2f70320116c7bc1c858632b84192bc12048df", "filename": "gcc/fold-const.c", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13eb1f7f0de383603d383c0644873ac8cb1afc62/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13eb1f7f0de383603d383c0644873ac8cb1afc62/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=13eb1f7f0de383603d383c0644873ac8cb1afc62", "patch": "@@ -4734,10 +4734,8 @@ fold (expr)\n \t      STRIP_SIGN_NOPS (op);\n \t    }\n \t  else\n-\t    {\n-\t      /* Strip any conversions that don't change the mode.  */\n-\t      STRIP_NOPS (op);\n-\t    }\n+\t    /* Strip any conversions that don't change the mode.  */\n+\t    STRIP_NOPS (op);\n \t  \n \t  if (TREE_CODE (op) == COMPLEX_CST)\n \t    subop = TREE_REALPART (op);\n@@ -5226,7 +5224,7 @@ fold (expr)\n \n     case CONJ_EXPR:\n       if (TREE_CODE (TREE_TYPE (arg0)) != COMPLEX_TYPE)\n-\treturn arg0;\n+\treturn convert (type, arg0);\n       else if (TREE_CODE (arg0) == COMPLEX_EXPR)\n \treturn build (COMPLEX_EXPR, type,\n \t\t      TREE_OPERAND (arg0, 0),\n@@ -5881,15 +5879,15 @@ fold (expr)\n \n     case MIN_EXPR:\n       if (operand_equal_p (arg0, arg1, 0))\n-\treturn arg0;\n+\treturn omit_one_operand (type, arg0, arg1);\n       if (INTEGRAL_TYPE_P (type)\n \t  && operand_equal_p (arg1, TYPE_MIN_VALUE (type), 1))\n \treturn omit_one_operand (type, arg1, arg0);\n       goto associate;\n \n     case MAX_EXPR:\n       if (operand_equal_p (arg0, arg1, 0))\n-\treturn arg0;\n+\treturn omit_one_operand (type, arg0, arg1);\n       if (INTEGRAL_TYPE_P (type)\n \t  && TYPE_MAX_VALUE (type)\n \t  && operand_equal_p (arg1, TYPE_MAX_VALUE (type), 1))\n@@ -5913,13 +5911,13 @@ fold (expr)\n \t (\"true\" is a fixed value perhaps depending on the language.)  */\n       /* If first arg is constant zero, return it.  */\n       if (integer_zerop (arg0))\n-\treturn arg0;\n+\treturn convert (type, arg0);\n     case TRUTH_AND_EXPR:\n       /* If either arg is constant true, drop it.  */\n       if (TREE_CODE (arg0) == INTEGER_CST && ! integer_zerop (arg0))\n-\treturn non_lvalue (arg1);\n+\treturn non_lvalue (convert (type, arg1));\n       if (TREE_CODE (arg1) == INTEGER_CST && ! integer_zerop (arg1))\n-\treturn non_lvalue (arg0);\n+\treturn non_lvalue (convert (type, arg0));\n       /* If second arg is constant zero, result is zero, but first arg\n \t must be evaluated.  */\n       if (integer_zerop (arg1))\n@@ -5999,13 +5997,13 @@ fold (expr)\n \t (\"true\" is a fixed value perhaps depending on the language.)  */\n       /* If first arg is constant true, return it.  */\n       if (TREE_CODE (arg0) == INTEGER_CST && ! integer_zerop (arg0))\n-\treturn arg0;\n+\treturn convert (type, arg0);\n     case TRUTH_OR_EXPR:\n       /* If either arg is constant zero, drop it.  */\n       if (TREE_CODE (arg0) == INTEGER_CST && integer_zerop (arg0))\n-\treturn non_lvalue (arg1);\n+\treturn non_lvalue (convert (type, arg1));\n       if (TREE_CODE (arg1) == INTEGER_CST && integer_zerop (arg1))\n-\treturn non_lvalue (arg0);\n+\treturn non_lvalue (convert (type, arg0));\n       /* If second arg is constant true, result is true, but we must\n \t evaluate first arg.  */\n       if (TREE_CODE (arg1) == INTEGER_CST && ! integer_zerop (arg1))\n@@ -6019,14 +6017,14 @@ fold (expr)\n     case TRUTH_XOR_EXPR:\n       /* If either arg is constant zero, drop it.  */\n       if (integer_zerop (arg0))\n-\treturn non_lvalue (arg1);\n+\treturn non_lvalue (convert (type, arg1));\n       if (integer_zerop (arg1))\n-\treturn non_lvalue (arg0);\n+\treturn non_lvalue (convert (type, arg0));\n       /* If either arg is constant true, this is a logical inversion.  */\n       if (integer_onep (arg0))\n-\treturn non_lvalue (invert_truthvalue (arg1));\n+\treturn non_lvalue (convert (type, invert_truthvalue (arg1)));\n       if (integer_onep (arg1))\n-\treturn non_lvalue (invert_truthvalue (arg0));\n+\treturn non_lvalue (convert (type, invert_truthvalue (arg0)));\n       return t;\n \n     case EQ_EXPR:\n@@ -7022,8 +7020,8 @@ fold (expr)\n \treturn t;\n       /* Don't let (0, 0) be null pointer constant.  */\n       if (integer_zerop (arg1))\n-\treturn build1 (NOP_EXPR, TREE_TYPE (arg1), arg1);\n-      return arg1;\n+\treturn build1 (NOP_EXPR, type, arg1);\n+      return convert (type, arg1);\n \n     case COMPLEX_EXPR:\n       if (wins)"}, {"sha": "2de8ec105da8aa1fa21903db968bad6db1a8f43e", "filename": "gcc/function.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13eb1f7f0de383603d383c0644873ac8cb1afc62/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13eb1f7f0de383603d383c0644873ac8cb1afc62/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=13eb1f7f0de383603d383c0644873ac8cb1afc62", "patch": "@@ -2803,7 +2803,6 @@ gen_mem_addressof (reg, decl)\n \n /* If DECL has an RTL that is an ADDRESSOF rtx, put it into the stack.  */\n \n-#if 0\n void\n flush_addressof (decl)\n      tree decl;\n@@ -2815,7 +2814,6 @@ flush_addressof (decl)\n       && GET_CODE (XEXP (XEXP (DECL_RTL (decl), 0), 0)) == REG)\n     put_addressof_into_stack (XEXP (DECL_RTL (decl), 0), 0);\n }\n-#endif\n \n /* Force the register pointed to by R, an ADDRESSOF rtx, into the stack.  */\n "}, {"sha": "028aad89d80cd64b1fa3d7a6f3b9ae219ef2bb89", "filename": "gcc/toplev.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13eb1f7f0de383603d383c0644873ac8cb1afc62/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13eb1f7f0de383603d383c0644873ac8cb1afc62/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=13eb1f7f0de383603d383c0644873ac8cb1afc62", "patch": "@@ -170,7 +170,8 @@ static void decode_d_option PARAMS ((const char *));\n static int  decode_f_option PARAMS ((const char *));\n static int  decode_W_option PARAMS ((const char *));\n static int  decode_g_option PARAMS ((const char *));\n-static unsigned independent_decode_option PARAMS ((int, char **, unsigned));\n+static unsigned int independent_decode_option PARAMS ((int, char **,\n+\t\t\t\t\t\t       unsigned int));\n \n static void print_version PARAMS ((FILE *, const char *));\n static int print_single_switch PARAMS ((FILE *, int, int, const char *,\n@@ -4434,13 +4435,13 @@ ignoring option `%s' due to invalid debug level specification\",\n    number of strings that have already been decoded in a language\n    specific fashion before this function was invoked.  */\n    \n-static unsigned\n+static unsigned int\n independent_decode_option (argc, argv, strings_processed)\n      int argc;\n-     char ** argv;\n-     unsigned strings_processed ATTRIBUTE_UNUSED;\n+     char **argv;\n+     unsigned int strings_processed;\n {\n-  char * arg = argv[0];\n+  char *arg = argv[0];\n   \n   if (arg[0] != '-' || arg[1] == 0)\n     {\n@@ -4463,7 +4464,7 @@ independent_decode_option (argc, argv, strings_processed)\n   if (* arg == 'Y')\n     arg ++;\n   \n-  switch (* arg)\n+  switch (*arg)\n     {\n     default:\n       return 0;\n@@ -4480,7 +4481,10 @@ independent_decode_option (argc, argv, strings_processed)\n       return decode_f_option (arg + 1);\n \t    \n     case 'g':\n-      return decode_g_option (arg + 1);\n+      if (strings_processed == 0)\n+\treturn decode_g_option (arg + 1);\n+      else\n+\treturn strings_processed;\n \n     case 'd':\n       if (!strcmp (arg, \"dumpbase\"))\n@@ -4777,16 +4781,16 @@ main (argc, argv)\n   /* Perform normal command line switch decoding.  */\n   for (i = 1; i < argc;)\n     {\n-      unsigned lang_processed;\n-      unsigned indep_processed;\n+      unsigned int lang_processed;\n+      unsigned int indep_processed;\n \n       /* Give the language a chance to decode the option for itself.  */\n       lang_processed = lang_decode_option (argc - i, argv + i);\n \n       /* Now see if the option also has a language independent meaning.\n \t Some options are both language specific and language independent,\n \t eg --help.  It is possible that there might be options that should\n-\t only be decoded in a language independent way if the were not\n+\t only be decoded in a language independent way if they were not\n \t decoded in a langauge specific way, which is why 'lang_processed'\n \t is passed in.  */\n       indep_processed = independent_decode_option (argc - i, argv + i,"}, {"sha": "5779ff994e336c2d07e1d00f88d10c72164ca850", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13eb1f7f0de383603d383c0644873ac8cb1afc62/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13eb1f7f0de383603d383c0644873ac8cb1afc62/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=13eb1f7f0de383603d383c0644873ac8cb1afc62", "patch": "@@ -136,5 +136,5 @@ extern int sorrycount;\n \n extern const char *progname;\n \n-extern void set_fatal_function PARAMS ((void (*)(const char *, va_list)));\n+extern void set_fatal_function PARAMS ((void (*) (const char *, va_list)));\n #endif /* __GCC_TOPLEV_H */"}, {"sha": "bc1e01d2510a550ffb1f0c69568614bc693db1df", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13eb1f7f0de383603d383c0644873ac8cb1afc62/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13eb1f7f0de383603d383c0644873ac8cb1afc62/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=13eb1f7f0de383603d383c0644873ac8cb1afc62", "patch": "@@ -2490,6 +2490,7 @@ extern void init_function_for_compilation\tPARAMS ((void));\n extern void init_function_start\t\tPARAMS ((tree, char *, int));\n extern void assign_parms\t\tPARAMS ((tree));\n extern void put_var_into_stack\t\tPARAMS ((tree));\n+extern void flush_addressof\t\tPARAMS ((tree));\n extern void uninitialized_vars_warning\tPARAMS ((tree));\n extern void setjmp_args_warning\t\tPARAMS ((void));\n extern void mark_all_temps_used\t\tPARAMS ((void));"}]}