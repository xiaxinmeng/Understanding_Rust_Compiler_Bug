{"sha": "d5d5ec4560f9f212c03acb730b8df3d42066c699", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVkNWVjNDU2MGY5ZjIxMmMwM2FjYjczMGI4ZGYzZDQyMDY2YzY5OQ==", "commit": {"author": {"name": "Stephane Carrez", "email": "Stephane.Carrez@worldnet.fr", "date": "2001-10-01T13:33:55Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2001-10-01T13:33:55Z"}, "message": "m68hc11.md (\"add-split\"): Fix add split when operand 2 is the stack pointer.\n\n\t* config/m68hc11/m68hc11.md (\"add-split\"): Fix add split when\n\toperand 2 is the stack pointer.\n\t(\"addr-peephole\"): Fix address computation peephole when operand 2\n\tis the stack pointer.\n\nFrom-SVN: r45925", "tree": {"sha": "754073a1a176494e6f0c6a907846045296640eb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/754073a1a176494e6f0c6a907846045296640eb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5d5ec4560f9f212c03acb730b8df3d42066c699", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d5ec4560f9f212c03acb730b8df3d42066c699", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5d5ec4560f9f212c03acb730b8df3d42066c699", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d5ec4560f9f212c03acb730b8df3d42066c699/comments", "author": null, "committer": null, "parents": [{"sha": "0692acba4cdeadd0ca1257e928050ace16907b99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0692acba4cdeadd0ca1257e928050ace16907b99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0692acba4cdeadd0ca1257e928050ace16907b99"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "8c22804e8a0e31025e16d49cd61b7b3fd484a282", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d5ec4560f9f212c03acb730b8df3d42066c699/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d5ec4560f9f212c03acb730b8df3d42066c699/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5d5ec4560f9f212c03acb730b8df3d42066c699", "patch": "@@ -1,3 +1,10 @@\n+2001-10-01  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n+\n+\t* config/m68hc11/m68hc11.md (\"add-split\"): Fix add split when\n+\toperand 2 is the stack pointer.\n+\t(\"addr-peephole\"): Fix address computation peephole when operand 2\n+\tis the stack pointer.\n+\n Mon Oct  1 09:26:41 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* config/i386/i386.c (ix86_va_arg): Call set_mem_alias_set."}, {"sha": "d978f960807eeffbd98c14700a5624d01fada0e3", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d5ec4560f9f212c03acb730b8df3d42066c699/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d5ec4560f9f212c03acb730b8df3d42066c699/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=d5d5ec4560f9f212c03acb730b8df3d42066c699", "patch": "@@ -3657,8 +3657,9 @@\n               (set (match_dup 0) (reg:HI D_REGNUM))])]\n   \"\n    /* Save the operand2 in a temporary location and use it. */\n-   if (H_REG_P (operands[2])\n-       || reg_mentioned_p  (operands[0], operands[2]))\n+   if ((H_REG_P (operands[2])\n+        || reg_mentioned_p  (operands[0], operands[2]))\n+       && !(SP_REG_P (operands[2]) && GET_CODE (operands[3]) == PLUS))\n      {\n        operands[4] = gen_rtx (REG, HImode, SOFT_TMP_REGNUM);\n        operands[6] = operands[4];\n@@ -6121,9 +6122,14 @@\n {\n   int value_loaded = 1;\n \n-  if (X_REG_P (operands[0]))\n+  if (X_REG_P (operands[0]) || SP_REG_P (operands[2]))\n     {\n-      output_asm_insn (\\\"ldx\\\\t%2\\\\n\\\\txgdx\\\", operands);\n+      rtx ops[2];\n+\n+      ops[0] = operands[0];\n+      ops[1] = operands[2];\n+      m68hc11_gen_movhi (insn, ops);\n+      output_asm_insn (\\\"xgd%0\\\", operands);\n     }\n   else if (Y_REG_P (operands[0]))\n     {"}]}