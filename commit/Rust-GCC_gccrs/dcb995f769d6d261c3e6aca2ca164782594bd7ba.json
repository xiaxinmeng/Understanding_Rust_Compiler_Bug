{"sha": "dcb995f769d6d261c3e6aca2ca164782594bd7ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNiOTk1Zjc2OWQ2ZDI2MWMzZTZhY2EyY2ExNjQ3ODI1OTRiZDdiYQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-02-27T10:21:55Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-02-27T10:21:55Z"}, "message": "predict.c (last_basic_block_p): Remove.\n\n\n\t* predict.c (last_basic_block_p): Remove.\n\t(tree_estimate_probability): Update return heuristic for commonized\n\treturn blocks.\n\nFrom-SVN: r122367", "tree": {"sha": "0c3c063ccfe36409185c4de1ed6e9da97d522e73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c3c063ccfe36409185c4de1ed6e9da97d522e73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcb995f769d6d261c3e6aca2ca164782594bd7ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcb995f769d6d261c3e6aca2ca164782594bd7ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcb995f769d6d261c3e6aca2ca164782594bd7ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcb995f769d6d261c3e6aca2ca164782594bd7ba/comments", "author": null, "committer": null, "parents": [{"sha": "e5fc6da81a5e5e912b020a94795132e25c56a529", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5fc6da81a5e5e912b020a94795132e25c56a529", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5fc6da81a5e5e912b020a94795132e25c56a529"}], "stats": {"total": 62, "additions": 37, "deletions": 25}, "files": [{"sha": "dba2931e81cf63e8b4c0e8fd2ecb8f3957fbdd86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb995f769d6d261c3e6aca2ca164782594bd7ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb995f769d6d261c3e6aca2ca164782594bd7ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dcb995f769d6d261c3e6aca2ca164782594bd7ba", "patch": "@@ -1,3 +1,9 @@\n+2007-02-27  Jan Hubicka  <jh@suse.cz>\n+\n+\t* predict.c (last_basic_block_p): Remove.\n+\t(tree_estimate_probability): Update return heuristic for commonized\n+\treturn blocks.\n+\n 2007-02-26  Brooks Moses  <brooks.moses@codesourcery.com>\n \n \t* Makefile.in (TEXI_GCCINSTALL_FILES): Add gcc-vers.texi dependency."}, {"sha": "349ab739140a5eca6de4eea53611a1babd54c774", "filename": "gcc/predict.c", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb995f769d6d261c3e6aca2ca164782594bd7ba/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb995f769d6d261c3e6aca2ca164782594bd7ba/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=dcb995f769d6d261c3e6aca2ca164782594bd7ba", "patch": "@@ -75,7 +75,6 @@ static sreal real_zero, real_one, real_almost_one, real_br_prob_base,\n static void combine_predictions_for_insn (rtx, basic_block);\n static void dump_prediction (FILE *, enum br_predictor, int, basic_block, int);\n static void predict_paths_leading_to (basic_block, int *, enum br_predictor, enum prediction);\n-static bool last_basic_block_p (basic_block);\n static void compute_function_frequency (void);\n static void choose_function_section (void);\n static bool can_predict_insn_p (rtx);\n@@ -1290,20 +1289,41 @@ tree_estimate_probability (void)\n \t{\n \t  /* Predict early returns to be probable, as we've already taken\n \t     care for error returns and other cases are often used for\n-\t     fast paths through function.  */\n-\t  if (e->dest == EXIT_BLOCK_PTR\n-\t      && TREE_CODE (last_stmt (bb)) == RETURN_EXPR\n-\t      && !single_pred_p (bb))\n+\t     fast paths through function. \n+\n+\t     Since we've already removed the return statments, we are\n+\t     looking for CFG like:\n+\n+\t       if (conditoinal)\n+\t         {\n+\t\t   ..\n+\t\t   goto return_block\n+\t         }\n+\t       some other blocks\n+\t     return_block:\n+\t       return_stmt.  */\n+\t  if (e->dest != bb->next_bb\n+\t      && e->dest != EXIT_BLOCK_PTR\n+\t      && single_succ_p (e->dest)\n+\t      && single_succ_edge (e->dest)->dest == EXIT_BLOCK_PTR\n+\t      && TREE_CODE (last_stmt (e->dest)) == RETURN_EXPR)\n \t    {\n \t      edge e1;\n \t      edge_iterator ei1;\n \n-\t      FOR_EACH_EDGE (e1, ei1, bb->preds)\n-\t      \tif (!predicted_by_p (e1->src, PRED_NULL_RETURN)\n-\t\t    && !predicted_by_p (e1->src, PRED_CONST_RETURN)\n-\t\t    && !predicted_by_p (e1->src, PRED_NEGATIVE_RETURN)\n-\t\t    && !last_basic_block_p (e1->src))\n-\t\t  predict_edge_def (e1, PRED_TREE_EARLY_RETURN, NOT_TAKEN);\n+\t      if (single_succ_p (bb))\n+\t\t{\n+\t\t  FOR_EACH_EDGE (e1, ei1, bb->preds)\n+\t\t    if (!predicted_by_p (e1->src, PRED_NULL_RETURN)\n+\t\t\t&& !predicted_by_p (e1->src, PRED_CONST_RETURN)\n+\t\t\t&& !predicted_by_p (e1->src, PRED_NEGATIVE_RETURN))\n+\t\t      predict_edge_def (e1, PRED_TREE_EARLY_RETURN, NOT_TAKEN);\n+\t\t}\n+\t       else\n+\t\tif (!predicted_by_p (e->src, PRED_NULL_RETURN)\n+\t\t    && !predicted_by_p (e->src, PRED_CONST_RETURN)\n+\t\t    && !predicted_by_p (e->src, PRED_NEGATIVE_RETURN))\n+\t\t  predict_edge_def (e, PRED_TREE_EARLY_RETURN, NOT_TAKEN);\n \t    }\n \n \t  /* Look for block we are guarding (ie we dominate it,\n@@ -1353,20 +1373,6 @@ tree_estimate_probability (void)\n   return 0;\n }\n \f\n-/* Check whether this is the last basic block of function.  Commonly\n-   there is one extra common cleanup block.  */\n-static bool\n-last_basic_block_p (basic_block bb)\n-{\n-  if (bb == EXIT_BLOCK_PTR)\n-    return false;\n-\n-  return (bb->next_bb == EXIT_BLOCK_PTR\n-\t  || (bb->next_bb->next_bb == EXIT_BLOCK_PTR\n-\t      && single_succ_p (bb)\n-\t      && single_succ (bb)->next_bb == EXIT_BLOCK_PTR));\n-}\n-\n /* Sets branch probabilities according to PREDiction and\n    FLAGS. HEADS[bb->index] should be index of basic block in that we\n    need to alter branch predictions (i.e. the first of our dominators"}]}