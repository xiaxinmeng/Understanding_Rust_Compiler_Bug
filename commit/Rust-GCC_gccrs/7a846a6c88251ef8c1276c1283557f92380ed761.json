{"sha": "7a846a6c88251ef8c1276c1283557f92380ed761", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E4NDZhNmM4ODI1MWVmOGMxMjc2YzEyODM1NTdmOTIzODBlZDc2MQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "1999-08-24T13:58:41Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1999-08-24T13:58:41Z"}, "message": "Handle DFmode and DImode constant addresses.\n\nFrom-SVN: r28823", "tree": {"sha": "73891c5d38a9ac86b911b35754030a4c9210e572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73891c5d38a9ac86b911b35754030a4c9210e572"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a846a6c88251ef8c1276c1283557f92380ed761", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a846a6c88251ef8c1276c1283557f92380ed761", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a846a6c88251ef8c1276c1283557f92380ed761", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a846a6c88251ef8c1276c1283557f92380ed761/comments", "author": null, "committer": null, "parents": [{"sha": "69277eec7740edb7968777c8ca4f43286eab820e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69277eec7740edb7968777c8ca4f43286eab820e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69277eec7740edb7968777c8ca4f43286eab820e"}], "stats": {"total": 82, "additions": 47, "deletions": 35}, "files": [{"sha": "7cf02177feb66adb2945f5c7d3a8deb09ce7fead", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a846a6c88251ef8c1276c1283557f92380ed761/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a846a6c88251ef8c1276c1283557f92380ed761/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a846a6c88251ef8c1276c1283557f92380ed761", "patch": "@@ -1,3 +1,15 @@\n+1999-08-24  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* configure.in: Define target_cpu_default for v850 targets.\n+\t* configure: Regenerate\n+\n+\t* config/v850/v850.h (TARGET_CPU_generic): Define.\n+\t(GO_IF_LEGITIMATE_ADDRESS): Insist that SImode and larger constant\n+\taddresses are 4 byte aligned.\n+\n+\t* config/v850/v850.c (print_operand): Cope with 'R' format DFmode\n+\taddresses.\n+\t\n Tue Aug 24 09:32:07 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* genattr.c (function_unit_desc): Constify a char*.  Add prototype."}, {"sha": "c2ab83fa2050e4f00a5340253c7d7b05c23fa163", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a846a6c88251ef8c1276c1283557f92380ed761/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a846a6c88251ef8c1276c1283557f92380ed761/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=7a846a6c88251ef8c1276c1283557f92380ed761", "patch": "@@ -38,6 +38,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"obstack.h\"\n #include \"toplev.h\"\n+#include \"function.h\"\n \n #ifndef streq\n #define streq(a,b) (strcmp (a, b) == 0)\n@@ -509,8 +510,10 @@ print_operand (file, x, code)\n \t  fprintf (file, reg_names[REGNO (x) + 1]);\n \t  break;\n \tcase MEM:\n-\t  print_operand_address (file,\n-\t\t\t\t XEXP (adj_offsettable_operand (x, 4), 0));\n+\t  x = XEXP (adj_offsettable_operand (x, 4), 0);\n+\t  print_operand_address (file, x);\n+\t  if (GET_CODE (x) == CONST_INT)\n+\t    fprintf (file, \"[r0]\");\n \t  break;\n \t  \n \tdefault:"}, {"sha": "c8b7c252b4ef9f340797caf6139739a3804eee35", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 28, "deletions": 33, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a846a6c88251ef8c1276c1283557f92380ed761/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a846a6c88251ef8c1276c1283557f92380ed761/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=7a846a6c88251ef8c1276c1283557f92380ed761", "patch": "@@ -21,28 +21,36 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"svr4.h\"\t/* Automatically does #undef CPP_PREDEFINES */\n \n-#undef ASM_SPEC\n-#define ASM_SPEC \"%{mv*:-mv%*}\"\n-\n-#ifndef CPP_SPEC\n-#define CPP_SPEC \"-D__v850__\"\n-#endif\n-\n+/* These are defiend in svr4.h but we want to override them.  */\n #undef ASM_FINAL_SPEC\n #undef LIB_SPEC\n #undef ENDFILE_SPEC\n #undef LINK_SPEC\n #undef STARTFILE_SPEC\n+#undef ASM_SPEC\n \n-/* Names to predefine in the preprocessor for this target machine.  */\n-#define CPP_PREDEFINES \"-D__v851__ -D__v850\"\n \n-/* Print subsidiary information on the compiler version in use.  */\n+#define TARGET_CPU_generic \t1\n \n-#ifndef TARGET_VERSION\n-#define TARGET_VERSION fprintf (stderr, \" (NEC V850)\");\n+#ifndef TARGET_CPU_DEFAULT\n+#define TARGET_CPU_DEFAULT\tTARGET_CPU_generic\n #endif\n \n+#define MASK_DEFAULT            MASK_V850\n+#define SUBTARGET_ASM_SPEC \t\"%{!mv*:-mv850}\"\n+#define SUBTARGET_CPP_SPEC \t\"%{!mv*:-D__v850__}\"\n+#define TARGET_VERSION \t\tfprintf (stderr, \" (NEC V850)\");\n+\n+\n+#define ASM_SPEC \"%{mv*:-mv%*}\"\n+#define CPP_SPEC\t\t\"%{mv850ea:-D__v850ea__} %{mv850e:-D__v850e__} %{mv850:-D__v850__} %(subtarget_cpp_spec)\"\n+\n+#define EXTRA_SPECS \\\n+ { \"subtarget_asm_spec\", SUBTARGET_ASM_SPEC }, \\\n+ { \"subtarget_cpp_spec\", SUBTARGET_CPP_SPEC } \n+\n+/* Names to predefine in the preprocessor for this target machine.  */\n+#define CPP_PREDEFINES \"-D__v851__ -D__v850\"\n \n /* Run-time compilation parameters selecting different hardware subsets.  */\n \n@@ -60,13 +68,6 @@ extern int target_flags;\n \n #define MASK_BIG_SWITCH\t\t0x00000100\n \n-#ifndef MASK_DEFAULT\n-#define MASK_DEFAULT            MASK_V850\n-#endif\n-\n-#define TARGET_V850    \t\t((target_flags & MASK_CPU) == MASK_V850)\n-\n-\n /* Macros used in the machine description to test the flags.  */\n \n /* The GHS calling convention support doesn't really work,\n@@ -99,6 +100,8 @@ extern int target_flags;\n /* Whether to call out-of-line functions to save registers or not.  */\n #define TARGET_PROLOG_FUNCTION (target_flags & MASK_PROLOG_FUNCTION)\n \n+#define TARGET_V850    \t\t((target_flags & MASK_CPU) == MASK_V850)\n+\n /* Whether to emit 2 byte per entry or 4 byte per entry switch tables.  */\n #define TARGET_BIG_SWITCH (target_flags & MASK_BIG_SWITCH)\n \n@@ -131,16 +134,7 @@ extern int target_flags;\n    { \"v850\",\t\t \t -(MASK_V850 ^ MASK_CPU), \"\" },\t\t\\\n    { \"big-switch\",\t\t MASK_BIG_SWITCH, \t\t\t\\\n        \t\t\t\t\"Use 4 byte entries in switch tables\" },\\\n-   EXTRA_SWITCHES\t\t\t\t\t\t\t\\\n-   { \"\",\t\t\t TARGET_DEFAULT, \"\"}}\n-\n-#ifndef EXTRA_SWITCHES\n-#define EXTRA_SWITCHES\n-#endif\n-\n-#ifndef TARGET_DEFAULT\n-#define TARGET_DEFAULT \t\tMASK_DEFAULT\n-#endif\n+   { \"\",\t\t\t MASK_DEFAULT, \"\"}}\n \n /* Information about the various small memory areas.  */\n struct small_memory_info {\n@@ -301,8 +295,8 @@ extern struct small_memory_info small_memory[(int)SMALL_MEMORY_max];\n \n /* Define this if move instructions will actually fail to work\n    when given unaligned data.  */\n-#ifndef STRICT_ALIGNMENT 1\n-#define STRICT_ALIGNMENT 1\n+#ifndef STRICT_ALIGNMENT \n+#define STRICT_ALIGNMENT TARGET_V850\n #endif\n \n /* Define this as 1 if `char' should by default be signed; else as 0.\n@@ -919,7 +913,8 @@ extern int current_function_anonymous_args;\n do {\t\t\t\t\t\t\t\t\t\\\n   if (RTX_OK_FOR_BASE_P (X)) goto ADDR;\t\t\t\t\t\\\n   if (CONSTANT_ADDRESS_P (X)\t\t\t\t\t\t\\\n-      && (MODE == QImode || INTVAL (X) % 2 == 0))\t\t\t\\\n+      && (MODE == QImode || INTVAL (X) % 2 == 0)\t\t\t\\\n+      && (GET_MODE_SIZE (MODE) <= 4 || INTVAL (X) % 4 == 0))\t\t\\\n     goto ADDR;\t\t\t\t\t\t\t\t\\\n   if (GET_CODE (X) == LO_SUM\t\t\t\t\t\t\\\n       && GET_CODE (XEXP (X, 0)) == REG\t\t\t\t\t\\\n@@ -1342,7 +1337,7 @@ do { char dstr[30];\t\t\t\t\t\\\n #undef ASM_OUTPUT_LABELREF\n #define ASM_OUTPUT_LABELREF(FILE, NAME)\t          \\\n   do {                                            \\\n-  const char* real_name;                          \\\n+  const char * real_name;                         \\\n   STRIP_NAME_ENCODING (real_name, (NAME));        \\\n   fprintf (FILE, \"_%s\", real_name);               \\\n   } while (0)           "}, {"sha": "37ab3aad38367bf378d23cb62b024498cb36a96d", "filename": "gcc/configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a846a6c88251ef8c1276c1283557f92380ed761/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a846a6c88251ef8c1276c1283557f92380ed761/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=7a846a6c88251ef8c1276c1283557f92380ed761", "patch": "@@ -5668,6 +5668,7 @@ for machine in $build $host $target; do\n #\t\tuse_collect2=yes\n #\t\t;;\n \tv850-*-*)\n+\t\ttarget_cpu_default=\"TARGET_CPU_generic\"\n \t\tcpu_type=v850\n \t\ttm_file=\"v850/v850.h\"\n \t\txm_file=\"v850/xm-v850.h\""}, {"sha": "7ed5c5e3e87b57272f23a22fb28de399fc273d09", "filename": "gcc/configure.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a846a6c88251ef8c1276c1283557f92380ed761/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a846a6c88251ef8c1276c1283557f92380ed761/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=7a846a6c88251ef8c1276c1283557f92380ed761", "patch": "@@ -3370,6 +3370,7 @@ changequote([,])dnl\n #\t\tuse_collect2=yes\n #\t\t;;\n \tv850-*-*)\n+\t\ttarget_cpu_default=\"TARGET_CPU_generic\"\n \t\tcpu_type=v850\n \t\ttm_file=\"v850/v850.h\"\n \t\txm_file=\"v850/xm-v850.h\""}]}