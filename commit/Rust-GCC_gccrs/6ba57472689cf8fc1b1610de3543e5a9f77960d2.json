{"sha": "6ba57472689cf8fc1b1610de3543e5a9f77960d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJhNTc0NzI2ODljZjhmYzFiMTYxMGRlMzU0M2U1YTlmNzc5NjBkMg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2001-08-12T20:36:22Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2001-08-12T20:36:22Z"}, "message": "Revert Rainer Orth's Java and gcc.c patch.\n\nFrom-SVN: r44834", "tree": {"sha": "a587c099c78feb50efa9b68cae3c6c15fed6d69a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a587c099c78feb50efa9b68cae3c6c15fed6d69a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ba57472689cf8fc1b1610de3543e5a9f77960d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ba57472689cf8fc1b1610de3543e5a9f77960d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ba57472689cf8fc1b1610de3543e5a9f77960d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ba57472689cf8fc1b1610de3543e5a9f77960d2/comments", "author": null, "committer": null, "parents": [{"sha": "270fc29ba6a5bf49b3bbc6b6d5d07937b5b0d254", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/270fc29ba6a5bf49b3bbc6b6d5d07937b5b0d254", "html_url": "https://github.com/Rust-GCC/gccrs/commit/270fc29ba6a5bf49b3bbc6b6d5d07937b5b0d254"}], "stats": {"total": 174, "additions": 87, "deletions": 87}, "files": [{"sha": "6d6b192817f4c78e08751262d0948c960a8b2456", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba57472689cf8fc1b1610de3543e5a9f77960d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba57472689cf8fc1b1610de3543e5a9f77960d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ba57472689cf8fc1b1610de3543e5a9f77960d2", "patch": "@@ -1,3 +1,17 @@\n+2001-08-12  David Edelsohn  <edelsohn@gnu.org>\n+\n+\tRevert:\n+\t2001-08-02  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\t* gcc.c (set_collect_gcc_options): New function, split out from\n+\tmain.\n+\tIgnore elided switches.\n+\t(do_spec_1): Invoke before executing command.\n+\t(set_input): Export.\n+\tMove declaration ...\n+\t* gcc.h (set_input): ... here.\n+\t* config/alpha/osf.h (ASM_FINAL_SPEC): Use %U.s to refer to input\n+\tfile.\n+\n 2001-08-12  Richard Henderson  <rth@redhat.com>\n \n \t* config/rs6000/rs6000.c (rs6000_elf_section_type_flags): Fix"}, {"sha": "250974c46e7b7666178191e6677e2702514a6e64", "filename": "gcc/config/alpha/osf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba57472689cf8fc1b1610de3543e5a9f77960d2/gcc%2Fconfig%2Falpha%2Fosf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba57472689cf8fc1b1610de3543e5a9f77960d2/gcc%2Fconfig%2Falpha%2Fosf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fosf.h?ref=6ba57472689cf8fc1b1610de3543e5a9f77960d2", "patch": "@@ -121,7 +121,7 @@ Boston, MA 02111-1307, USA.  */\n \t\t%{K: -I %b.o~} \\\n \t\t%{!K: %{save-temps: -I %b.o~}} \\\n \t\t%{c:%W{o*}%{!o*:-o %b.o}}%{!c:-o %U.o} \\\n-\t\t%{.s:%i} %{!.s:%U.s}}}\"\n+\t\t%{.s:%i} %{!.s:%g.s}}}\"\n \n #else\n #define ASM_FINAL_SPEC \"\\\n@@ -130,7 +130,7 @@ Boston, MA 02111-1307, USA.  */\n \t\t%{K: -I %b.o~} \\\n \t\t%{!K: %{save-temps: -I %b.o~}} \\\n \t\t%{c:%W{o*}%{!o*:-o %b.o}}%{!c:-o %U.o} \\\n-\t\t%{.s:%i} %{!.s:%U.s}}}\"\n+\t\t%{.s:%i} %{!.s:%g.s}}}\"\n \n #endif\n "}, {"sha": "409ac2bbe9a3880ec508ddefe6c5145b6b91f896", "filename": "gcc/gcc.c", "status": "modified", "additions": 48, "deletions": 61, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba57472689cf8fc1b1610de3543e5a9f77960d2/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba57472689cf8fc1b1610de3543e5a9f77960d2/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=6ba57472689cf8fc1b1610de3543e5a9f77960d2", "patch": "@@ -289,7 +289,6 @@ static void clear_failure_queue PARAMS ((void));\n static int check_live_switch\tPARAMS ((int, int));\n static const char *handle_braces PARAMS ((const char *));\n static char *save_string\tPARAMS ((const char *, int));\n-static void set_collect_gcc_options PARAMS ((void));\n static int do_spec_1\t\tPARAMS ((const char *, int, const char *));\n static const char *find_file\tPARAMS ((const char *));\n static int is_directory\t\tPARAMS ((const char *, const char *, int));\n@@ -313,6 +312,7 @@ static void process_command\t\tPARAMS ((int, const char *const *));\n static int execute\t\t\tPARAMS ((void));\n static void clear_args\t\t\tPARAMS ((void));\n static void fatal_error\t\t\tPARAMS ((int));\n+static void set_input\t\t\tPARAMS ((const char *));\n static void init_gcc_specs              PARAMS ((struct obstack *,\n \t\t\t\t\t\t const char *,\n \t\t\t\t\t\t const char *));\n@@ -3960,63 +3960,6 @@ process_command (argc, argv)\n   switches[n_switches].part1 = 0;\n   infiles[n_infiles].name = 0;\n }\n-\n-/* Store switches not filtered out but %{<S} in spec in COLLECT_GCC_OPTIONS\n-   and place that in the environment.  */\n-\n-static void\n-set_collect_gcc_options ()\n-{\n-  int i;\n-  int first_time;\n-\n-  /* Build COLLECT_GCC_OPTIONS to have all of the options specified to\n-     the compiler.  */\n-  obstack_grow (&collect_obstack, \"COLLECT_GCC_OPTIONS=\",\n-\t\tsizeof (\"COLLECT_GCC_OPTIONS=\") - 1);\n-\n-  first_time = TRUE;\n-  for (i = 0; (int) i < n_switches; i++)\n-    {\n-      const char *const *args;\n-      const char *p, *q;\n-      if (!first_time)\n-\tobstack_grow (&collect_obstack, \" \", 1);\n-\n-      first_time = FALSE;\n-\n-      /* Ignore elided switches.  */\n-      if (switches[i].live_cond == SWITCH_IGNORE)\n-\tcontinue;\n-\n-      obstack_grow (&collect_obstack, \"'-\", 2);\n-      q = switches[i].part1;\n-      while ((p = strchr (q, '\\'')))\n-\t{\n-\t  obstack_grow (&collect_obstack, q, p - q);\n-\t  obstack_grow (&collect_obstack, \"'\\\\''\", 4);\n-\t  q = ++p;\n-\t}\n-      obstack_grow (&collect_obstack, q, strlen (q));\n-      obstack_grow (&collect_obstack, \"'\", 1);\n-\n-      for (args = switches[i].args; args && *args; args++)\n-\t{\n-\t  obstack_grow (&collect_obstack, \" '\", 2);\n-\t  q = *args;\n-\t  while ((p = strchr (q, '\\'')))\n-\t    {\n-\t      obstack_grow (&collect_obstack, q, p - q);\n-\t      obstack_grow (&collect_obstack, \"'\\\\''\", 4);\n-\t      q = ++p;\n-\t    }\n-\t  obstack_grow (&collect_obstack, q, strlen (q));\n-\t  obstack_grow (&collect_obstack, \"'\", 1);\n-\t}\n-    }\n-  obstack_grow (&collect_obstack, \"\\0\", 1);\n-  putenv (obstack_finish (&collect_obstack));\n-}\n \f\n /* Process a spec string, accumulating and running commands.  */\n \n@@ -4160,8 +4103,6 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t      argbuf_index--;\n \t  }\n \n-\tset_collect_gcc_options ();\n-\n \tif (argbuf_index > 0)\n \t  {\n \t    value = execute ();\n@@ -5545,7 +5486,7 @@ is_directory (path1, path2, linker)\n /* Set up the various global variables to indicate that we're processing\n    the input file named FILENAME.  */\n \n-void\n+static void\n set_input (filename)\n      const char *filename;\n {\n@@ -5718,6 +5659,52 @@ main (argc, argv)\n \n   process_command (argc, argv);\n \n+  {\n+    int first_time;\n+\n+    /* Build COLLECT_GCC_OPTIONS to have all of the options specified to\n+       the compiler.  */\n+    obstack_grow (&collect_obstack, \"COLLECT_GCC_OPTIONS=\",\n+\t\t  sizeof (\"COLLECT_GCC_OPTIONS=\") - 1);\n+\n+    first_time = TRUE;\n+    for (i = 0; (int) i < n_switches; i++)\n+      {\n+\tconst char *const *args;\n+\tconst char *p, *q;\n+\tif (!first_time)\n+\t  obstack_grow (&collect_obstack, \" \", 1);\n+\n+\tfirst_time = FALSE;\n+\tobstack_grow (&collect_obstack, \"'-\", 2);\n+\tq = switches[i].part1;\n+\twhile ((p = strchr (q, '\\'')))\n+\t  {\n+\t    obstack_grow (&collect_obstack, q, p - q);\n+\t    obstack_grow (&collect_obstack, \"'\\\\''\", 4);\n+\t    q = ++p;\n+\t  }\n+\tobstack_grow (&collect_obstack, q, strlen (q));\n+\tobstack_grow (&collect_obstack, \"'\", 1);\n+\n+\tfor (args = switches[i].args; args && *args; args++)\n+\t  {\n+\t    obstack_grow (&collect_obstack, \" '\", 2);\n+\t    q = *args;\n+\t    while ((p = strchr (q, '\\'')))\n+\t      {\n+\t\tobstack_grow (&collect_obstack, q, p - q);\n+\t\tobstack_grow (&collect_obstack, \"'\\\\''\", 4);\n+\t\tq = ++p;\n+\t      }\n+\t    obstack_grow (&collect_obstack, q, strlen (q));\n+\t    obstack_grow (&collect_obstack, \"'\", 1);\n+\t  }\n+      }\n+    obstack_grow (&collect_obstack, \"\\0\", 1);\n+    putenv (obstack_finish (&collect_obstack));\n+  }\n+\n   /* Initialize the vector of specs to just the default.\n      This means one element containing 0s, as a terminator.  */\n "}, {"sha": "62526769d8691f29873d256c9c72d4c36efb72b5", "filename": "gcc/gcc.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba57472689cf8fc1b1610de3543e5a9f77960d2/gcc%2Fgcc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba57472689cf8fc1b1610de3543e5a9f77960d2/gcc%2Fgcc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.h?ref=6ba57472689cf8fc1b1610de3543e5a9f77960d2", "patch": "@@ -1,5 +1,5 @@\n /* Header file for modules that link with gcc.c\n-   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -33,7 +33,6 @@ extern void fatal PARAMS ((const char *, ...))\n      ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n extern void error PARAMS ((const char *, ...)) ATTRIBUTE_PRINTF_1;\n extern void pfatal_with_name PARAMS ((const char *)) ATTRIBUTE_NORETURN;\n-extern void set_input PARAMS ((const char *));\n \n /* Spec files linked with gcc.c must provide definitions for these. */\n "}, {"sha": "4dd5132af9617f2a25e0a8ee873fdb652a0500fc", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba57472689cf8fc1b1610de3543e5a9f77960d2/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba57472689cf8fc1b1610de3543e5a9f77960d2/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=6ba57472689cf8fc1b1610de3543e5a9f77960d2", "patch": "@@ -1,3 +1,16 @@\n+2001-08-12  David Edelsohn  <edelsohn@gnu.org>\n+\n+\tRevert:\n+\t2001-08-02  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\t* jvspec.c (jvgenmain_spec): Cannot use %umain, breaks\n+\tASM_FINAL_SPEC.\n+\t(lang_specific_pre_link): Use set_input to set input_filename.\n+\tAppend `main' here.\n+\t* jvgenmain.c (usage): Append literal `main' to CLASSNAME.\n+\t(main): Fix definition.\n+\tStrip `main' from classname.\n+\tFixes PR java/227.\n+\n 2001-08-11  Zack Weinberg  <zackw@panix.com>\n \n \t* lex.h: Don't include setjmp.h.  Don't define"}, {"sha": "ab43ddda3f9c6ab043633e62e119516ed64e722e", "filename": "gcc/java/jvgenmain.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba57472689cf8fc1b1610de3543e5a9f77960d2/gcc%2Fjava%2Fjvgenmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba57472689cf8fc1b1610de3543e5a9f77960d2/gcc%2Fjava%2Fjvgenmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvgenmain.c?ref=6ba57472689cf8fc1b1610de3543e5a9f77960d2", "patch": "@@ -61,14 +61,14 @@ static void usage (const char *) ATTRIBUTE_NORETURN;\n static void\n usage (const char *name)\n {\n-  fprintf (stderr, \"Usage: %s [OPTIONS]... CLASSNAMEmain [OUTFILE]\\n\", name);\n+  fprintf (stderr, \"Usage: %s [OPTIONS]... CLASSNAME [OUTFILE]\\n\", name);\n   exit (1);\n }\n \n int\n-main (int argc, char **argv)\n+main (int argc, const char **argv)\n {\n-  char *classname, *p;\n+  const char *classname;\n   FILE *stream;\n   const char *mangled_classname;\n   int i, last_arg;\n@@ -92,13 +92,6 @@ main (int argc, char **argv)\n \n   classname = argv[i];\n \n-  /* gcj always appends `main' to classname.  We need to strip this here.  */\n-  p = strrchr (classname, 'm');\n-  if (p == NULL || p == classname || strcmp (p, \"main\") != 0)\n-    usage (argv[0]);\n-  else\n-    *p = '\\0';\n-\n   gcc_obstack_init (mangle_obstack);\n   mangled_classname = do_mangle_classname (classname);\n "}, {"sha": "44342cf401ae78824af2cd77aed8cba715ca39b2", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba57472689cf8fc1b1610de3543e5a9f77960d2/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba57472689cf8fc1b1610de3543e5a9f77960d2/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=6ba57472689cf8fc1b1610de3543e5a9f77960d2", "patch": "@@ -52,8 +52,8 @@ int lang_specific_extra_outfiles = 0;\n int shared_libgcc = 1;\n \n const char jvgenmain_spec[] =\n-  \"jvgenmain %{D*} %b %{!pipe:%u.i} |\\n\\\n-   cc1 %{!pipe:%U.i} %1 \\\n+  \"jvgenmain %{D*} %i %{!pipe:%umain.i} |\\n\\\n+   cc1 %{!pipe:%Umain.i} %1 \\\n \t\t   %{!Q:-quiet} -dumpbase %b.c %{d*} %{m*} %{a*}\\\n \t\t   %{g*} %{O*} \\\n \t\t   %{v:-version} %{pg:-p} %{p}\\\n@@ -68,8 +68,8 @@ const char jvgenmain_spec[] =\n \t\t   %{f*} -fdollars-in-identifiers\\\n \t\t   %{aux-info*}\\\n \t\t   %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n-\t\t   %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%U.s}} |\\n\\\n-              %{!S:as %a %Y -o %d%w%u%O %{!pipe:%U.s} %A\\n }\";\n+\t\t   %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%Umain.s}} |\\n\\\n+              %{!S:as %a %Y -o %d%w%umain%O %{!pipe:%Umain.s} %A\\n }\";\n \n /* Return full path name of spec file if it is in DIR, or NULL if\n    not.  */\n@@ -529,14 +529,8 @@ lang_specific_pre_link ()\n   int err;\n   if (main_class_name == NULL)\n     return 0;\n-  /* Append `main' to make the filename unique and allow\n-\n-\tgcj --main=hello -save-temps hello.java\n-\n-     to work.  jvgenmain needs to strip this `main' to arrive at the correct\n-     class name.  Append dummy `.c' that can be stripped by set_input so %b\n-     is correct.  */ \n-  set_input (concat (main_class_name, \"main.c\", NULL));\n+  input_filename = main_class_name;\n+  input_filename_length = strlen (main_class_name);\n   err = do_spec (jvgenmain_spec);\n   if (err == 0)\n     {"}]}