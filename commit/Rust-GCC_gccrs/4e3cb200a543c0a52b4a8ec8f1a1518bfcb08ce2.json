{"sha": "4e3cb200a543c0a52b4a8ec8f1a1518bfcb08ce2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUzY2IyMDBhNTQzYzBhNTJiNGE4ZWM4ZjFhMTUxOGJmY2IwOGNlMg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-10-09T17:34:10Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-10-09T17:34:10Z"}, "message": "2003-10-09  Michael Koch  <konqueror@gmx.de>\n\n\t* java/nio/channels/spi/AbstractSelectableChannel.java\n\t(registered): Made private.\n\t(blocking): Likewise.\n\t(LOCK): Likewise.\n\t(provider): Likewise.\n\t(keys): Made it a private LinkedList.\n\t(AbstractSelectableChannel): Initialize keys.\n\t(isRegistered): New implementation.\n\t(locate): Rewritten.\n\t(register): Rewritten.\n\t* java/nio/channels/spi/AbstractSelectionKey.java\n\t(ok): Removed.\n\t(cancelled): New member variable.\n\t(cancel): Rewritten.\n\t(isValid): Rewritten.\n\t* java/nio/channels/spi/AbstractSelector.java:\n\tSome methods moved.\n\t(closed): Make private.\n\t(provider): Likewise.\n\t(cancelledKeys): New member variable.\n\t(AbstractSelector): Initialize cancelledKeys.\n\t(cancelKey): New method.\n\nFrom-SVN: r72275", "tree": {"sha": "3d255b674b1d9f300d842c3696c2bef6cd9f7869", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d255b674b1d9f300d842c3696c2bef6cd9f7869"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e3cb200a543c0a52b4a8ec8f1a1518bfcb08ce2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e3cb200a543c0a52b4a8ec8f1a1518bfcb08ce2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e3cb200a543c0a52b4a8ec8f1a1518bfcb08ce2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e3cb200a543c0a52b4a8ec8f1a1518bfcb08ce2/comments", "author": null, "committer": null, "parents": [{"sha": "93d046861d42e9779905f7db3c575923290eedf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93d046861d42e9779905f7db3c575923290eedf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93d046861d42e9779905f7db3c575923290eedf2"}], "stats": {"total": 130, "additions": 81, "deletions": 49}, "files": [{"sha": "35238540e1482ac3a2ad4ec550ed546ea04c2e20", "filename": "libjava/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3cb200a543c0a52b4a8ec8f1a1518bfcb08ce2/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3cb200a543c0a52b4a8ec8f1a1518bfcb08ce2/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=4e3cb200a543c0a52b4a8ec8f1a1518bfcb08ce2", "patch": "@@ -1,3 +1,28 @@\n+2003-10-09  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/nio/channels/spi/AbstractSelectableChannel.java\n+\t(registered): Made private.\n+\t(blocking): Likewise.\n+\t(LOCK): Likewise.\n+\t(provider): Likewise.\n+\t(keys): Made it a private LinkedList.\n+\t(AbstractSelectableChannel): Initialize keys.\n+\t(isRegistered): New implementation.\n+\t(locate): Rewritten.\n+\t(register): Rewritten.\n+\t* java/nio/channels/spi/AbstractSelectionKey.java\n+\t(ok): Removed.\n+\t(cancelled): New member variable.\n+\t(cancel): Rewritten.\n+\t(isValid): Rewritten.\n+\t* java/nio/channels/spi/AbstractSelector.java:\n+\tSome methods moved.\n+\t(closed): Make private.\n+\t(provider): Likewise.\n+\t(cancelledKeys): New member variable.\n+\t(AbstractSelector): Initialize cancelledKeys.\n+\t(cancelKey): New method.\n+\n 2003-10-09  Tom Tromey  <tromey@redhat.com>\n \n \t* java/lang/ClassLoader.java (setSigners): Implemented."}, {"sha": "b027b034ede6db216065550c4a93b500f492b798", "filename": "libjava/java/nio/channels/spi/AbstractSelectableChannel.java", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3cb200a543c0a52b4a8ec8f1a1518bfcb08ce2/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3cb200a543c0a52b4a8ec8f1a1518bfcb08ce2/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java?ref=4e3cb200a543c0a52b4a8ec8f1a1518bfcb08ce2", "patch": "@@ -1,5 +1,5 @@\n /* AbstractSelectableChannel.java\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -48,18 +48,19 @@\n \n public abstract class AbstractSelectableChannel extends SelectableChannel\n {\n-  int registered;\n-  boolean blocking = true;\n-  Object LOCK = new Object ();\n-  SelectorProvider provider;\n-  List keys;\n+  private int registered;\n+  private boolean blocking = true;\n+  private Object LOCK = new Object();\n+  private SelectorProvider provider;\n+  private LinkedList keys;\n \n   /**\n    * Initializes the channel\n    */\n   protected AbstractSelectableChannel (SelectorProvider provider)\n   {\n     this.provider = provider;\n+    this.keys = new LinkedList();\n   }\n \n   /**\n@@ -122,7 +123,7 @@ public final boolean isBlocking()\n    */\n   public final boolean isRegistered()\n   {\n-    return registered > 0;\n+    return !keys.isEmpty();\n   }\n \n   /**\n@@ -154,28 +155,21 @@ private SelectionKey locate (Selector selector)\n     if (keys == null)\n       return null;\n     \n-    SelectionKey k = null;\n     ListIterator it = keys.listIterator ();\n     \n     while (it.hasNext ())\n       {\n-    \tk = (SelectionKey) it.next ();\n-    \tif (k.selector () == selector)\n-          {\n-            return k;\n-          }\n+        SelectionKey key = (SelectionKey) it.next();\n+        \n+    \tif (key.selector() == selector)\n+          return key;\n       }\n     \n-    return k;\n+    return null;\n   }\n \n   private void add (SelectionKey key)\n   {\n-    if (keys == null)\n-      {\n-        keys = new LinkedList ();\n-      }\n-    \n     keys.add (key);\n   }\n \n@@ -190,26 +184,26 @@ public final SelectionKey register (Selector selin, int ops, Object att)\n     if (!isOpen ())\n       throw new ClosedChannelException();\n \n-    SelectionKey k = null;\n+    SelectionKey key = null;\n     AbstractSelector selector = (AbstractSelector) selin;\n \n     synchronized (LOCK)\n       {\n-        k = locate (selector);\n+        key = locate (selector);\n \n-        if (k != null)\n+        if (key != null)\n           {\n-            k.attach (att);\n+            key.attach (att);\n           }\n         else\n           {\n-            k = selector.register (this, ops, att);\n+            key = selector.register (this, ops, att);\n     \t\t\n-            if (k != null)\n-              add (k);\n+            if (key != null)\n+              add (key);\n           }\n       }\n \n-    return k;\n+    return key;\n   }\n }"}, {"sha": "0cd5ee104e1e97cbcf4cddd7ee2297809642bcca", "filename": "libjava/java/nio/channels/spi/AbstractSelectionKey.java", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3cb200a543c0a52b4a8ec8f1a1518bfcb08ce2/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectionKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3cb200a543c0a52b4a8ec8f1a1518bfcb08ce2/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectionKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectionKey.java?ref=4e3cb200a543c0a52b4a8ec8f1a1518bfcb08ce2", "patch": "@@ -1,5 +1,5 @@\n /* AbstractSelectionKey.java -- \n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -45,7 +45,7 @@\n public abstract class AbstractSelectionKey\n   extends SelectionKey\n {\n-  boolean ok = true;\n+  private boolean cancelled = false;\n \n   /**\n    * Initializes the key.\n@@ -59,17 +59,19 @@ protected AbstractSelectionKey ()\n    */\n   public final void cancel ()\n   {\n-    if (ok)\n-      selector ().selectedKeys ().add (this);\n-    \n-    ok = false;\n+    if (isValid())\n+      {\n+\t// FIXME: implement this.\n+\t//selector().cancelledKeys().add (this);\n+        cancelled = true;\n+      }\n   }\n \n   /**\n    * Tells whether this key is valid or not.\n    */\n   public final boolean isValid ()\n   {\n-    return ok;\n+    return !cancelled;\n   }\n }"}, {"sha": "58ce0c84f601a10a72255a1bf1a979e816a699cd", "filename": "libjava/java/nio/channels/spi/AbstractSelector.java", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3cb200a543c0a52b4a8ec8f1a1518bfcb08ce2/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelector.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3cb200a543c0a52b4a8ec8f1a1518bfcb08ce2/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelector.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelector.java?ref=4e3cb200a543c0a52b4a8ec8f1a1518bfcb08ce2", "patch": "@@ -1,5 +1,5 @@\n /* AbstractSelector.java -- \n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -42,27 +42,23 @@\n import java.nio.channels.SelectionKey;\n import java.nio.channels.Selector;\n import java.util.Set;\n+import java.util.HashSet;\n \n public abstract class AbstractSelector extends Selector\n {\n-  boolean closed = false;\n-  SelectorProvider provider;\n+  private boolean closed = false;\n+  private SelectorProvider provider;\n+  private HashSet cancelledKeys;\n \n   /**\n    * Initializes the slector.\n    */\n   protected AbstractSelector (SelectorProvider provider)\n   {\n     this.provider = provider;\n+    this.cancelledKeys = new HashSet();\n   }\n  \n-  /**\n-   * Marks the beginning of an I/O operation that might block indefinitely.\n-   */\n-  protected final void begin ()\n-  {\n-  }\n-\n   /**\n    * Closes the channel.\n    * \n@@ -73,8 +69,8 @@ public final void close () throws IOException\n     if (closed)\n       return;\n     \n+    implCloseSelector();\n     closed = true;\n-    implCloseSelector ();\n   }\n \n   /**\n@@ -85,11 +81,16 @@ public final boolean isOpen ()\n     return ! closed;\n   }\n \n-  protected final void deregister (AbstractSelectionKey key)\n+  /**\n+   * Marks the beginning of an I/O operation that might block indefinitely.\n+   */\n+  protected final void begin()\n   {\n-    cancelledKeys ().remove (key);\n   }\n-    \n+\n+  /**\n+   * Marks the end of an I/O operation that might block indefinitely.\n+   */\n   protected final void end()\n   {\n   }\n@@ -101,7 +102,12 @@ public final SelectorProvider provider ()\n \n   protected final Set cancelledKeys()\n   {\n-    return null;\n+    return cancelledKeys;\n+  }\n+\n+  final void cancelKey (AbstractSelectionKey key)\n+  {\n+    cancelledKeys.remove (key);\n   }\n \n   /**\n@@ -111,4 +117,9 @@ protected final Set cancelledKeys()\n \n   protected abstract SelectionKey register (AbstractSelectableChannel ch,\n                                             int ops, Object att);   \n+\n+  protected final void deregister (AbstractSelectionKey key)\n+  {\n+    // FIXME\n+  }\n }"}]}