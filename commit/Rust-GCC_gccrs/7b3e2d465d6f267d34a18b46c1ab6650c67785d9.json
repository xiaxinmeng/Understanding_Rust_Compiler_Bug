{"sha": "7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IzZTJkNDY1ZDZmMjY3ZDM0YTE4YjQ2YzFhYjY2NTBjNjc3ODVkOQ==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2008-01-29T13:59:59Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2008-01-29T13:59:59Z"}, "message": "re PR c++/34055 (ICE with invalid specialization of variadic template)\n\n2008-01-29  Douglas Gregor  <doug.gregor@gmail.com>\n\n\tPR c++/34055\n\tPR c++/34103\n\tPR c++/34219\n\tPR c++/34606\n\tPR c++/34753\n\tPR c++/34754\n\tPR c++/34755\n\tPR c++/34919\n\tPR c++/34961\n\t* c-pretty-print.c (pp_c_type_qualifier_list): Don't try to print\n\tqualifiers for an ERROR_MARK_NODE or a NULL_TREE.\n\n\n2008-01-29  Douglas Gregor  <doug.gregor@gmail.com>\n\n\tPR c++/34055\n\tPR c++/34103\n\tPR c++/34219\n\tPR c++/34606\n\tPR c++/34753\n\tPR c++/34754\n\tPR c++/34755\n\tPR c++/34919\n\tPR c++/34961\n\t* typeck.c (check_return_expr): Tweak call to\n\tcheck_for_bare_parameter_packs.\n\t* class.c (add_method): Be careful with error_mark_nodes.\n\t* cp-tree.h (check_for_bare_parameter_packs): Remove \"*\" from\n\tsignature.\n\t* pt.c (struct find_parameter_pack_data): Remove\n\tSET_PACKS_TO_ERROR.\n\t(find_parameter_packs_r): Don't use SET_PACKS_TO_ERROR.\n\t(uses_parameter_packs): Don't set SET_PACKS_TO_ERROR.\n\t(make_pack_expansion): Ditto.\n\t(check_for_bare_parameter_packs): Parameter is now a tree, not a\n\ttree*.\n\t(process_template_parm): Tweak call to\n\tcheck_for_bare_parameter_packs.  \n\t(push_template_decl_real): Tweak calls to\n\tcheck_for_bare_parameter_packs. If bare parameter packs are found\n\tin the list of exceptions, clear out that list after giving an\n\terror.\n\t* semantics.c (finish_cond): Tweak call to\n\tcheck_for_bare_parameter_packs.\n\t(finish_expr_stmt): Ditto.\n\t(finish_for_expr): Ditto.\n\t(finish_switch_cond): Ditto.\n\t(finish_mem_initializers): Ditto.\n\t(finish_member_declaration): Ditto.\n\t(finish_static_assert): Check for bare parameter packs in the\n\tcondition.\n\t* decl2.c (cplus_decl_attributes): Check for bare parameter packs in the\n\tattributes of a declaration.\n\t* parser.c (cp_parser_using_declaration): Tweak call to\n\tcheck_for_bare_parameter_packs.\n\t(cp_parser_base_clause): Ditto.\n\t\n\n2008-01-29  Douglas Gregor  <doug.gregor@gmail.com>\n\n\tPR c++/34055\n\tPR c++/34103\n\tPR c++/34219\n\tPR c++/34606\n\tPR c++/34753\n\tPR c++/34754\n\tPR c++/34755\n\tPR c++/34919\n\tPR c++/34961\n\t* g++.dg/cpp0x/vt-34219-2.C: New.\n\t* g++.dg/cpp0x/pr32126.C: Tweak expected error messages.\n\t* g++.dg/cpp0x/vt-34961.C: New.\n\t* g++.dg/cpp0x/vt-34055.C: Tweak error messages; add new test\n\tcases from the re-opened PR.\n\t* g++.dg/cpp0x/vt-34753.C: New.\n\t* g++.dg/cpp0x/vt-34919.C: New.\n\t* g++.dg/cpp0x/vt-34754.C: New.\n\t* g++.dg/cpp0x/vt-34606.C: New.\n\t* g++.dg/cpp0x/vt-34219.C: New.\n\t* g++.dg/cpp0x/pr32125.C: Tweak expected error messages.\n\t* g++.dg/cpp0x/vt-34755.C: New.\n\t* g++.dg/cpp0x/pr31438.C: Ditto.\n\t* g++.dg/cpp0x/variadic81.C: Ditto.\n\nFrom-SVN: r131938", "tree": {"sha": "21edc5a5f99ef49778039546b761a20f1c6831c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21edc5a5f99ef49778039546b761a20f1c6831c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f66816e8726d9bb12d2163f4ca8404b2b22cb15f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f66816e8726d9bb12d2163f4ca8404b2b22cb15f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f66816e8726d9bb12d2163f4ca8404b2b22cb15f"}], "stats": {"total": 327, "additions": 256, "deletions": 71}, "files": [{"sha": "a827f0df4f527aa9e7e6035adf07cfd8e5f46511", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -1,3 +1,17 @@\n+2008-01-29  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\tPR c++/34055\n+\tPR c++/34103\n+\tPR c++/34219\n+\tPR c++/34606\n+\tPR c++/34753\n+\tPR c++/34754\n+\tPR c++/34755\n+\tPR c++/34919\n+\tPR c++/34961\n+\t* c-pretty-print.c (pp_c_type_qualifier_list): Don't try to print\n+\tqualifiers for an ERROR_MARK_NODE or a NULL_TREE.\n+\n 2008-01-28  Andy Hutchinson   <hutchinsonandy@netscape.net>\n \n \tPR target/34412"}, {"sha": "c8443d31fcb1c9524fad82e5ac93e00e27038cea", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -225,7 +225,10 @@ pp_c_space_for_pointer_operator (c_pretty_printer *pp, tree t)\n void\n pp_c_type_qualifier_list (c_pretty_printer *pp, tree t)\n {\n-   int qualifiers;\n+  int qualifiers;\n+\n+  if (!t || t == error_mark_node)\n+    return;\n \n   if (!TYPE_P (t))\n     t = TREE_TYPE (t);"}, {"sha": "ea850a5a8dc4e4d2d5d8794036be0e391f095ceb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -1,3 +1,47 @@\n+2008-01-29  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\tPR c++/34055\n+\tPR c++/34103\n+\tPR c++/34219\n+\tPR c++/34606\n+\tPR c++/34753\n+\tPR c++/34754\n+\tPR c++/34755\n+\tPR c++/34919\n+\tPR c++/34961\n+\t* typeck.c (check_return_expr): Tweak call to\n+\tcheck_for_bare_parameter_packs.\n+\t* class.c (add_method): Be careful with error_mark_nodes.\n+\t* cp-tree.h (check_for_bare_parameter_packs): Remove \"*\" from\n+\tsignature.\n+\t* pt.c (struct find_parameter_pack_data): Remove\n+\tSET_PACKS_TO_ERROR.\n+\t(find_parameter_packs_r): Don't use SET_PACKS_TO_ERROR.\n+\t(uses_parameter_packs): Don't set SET_PACKS_TO_ERROR.\n+\t(make_pack_expansion): Ditto.\n+\t(check_for_bare_parameter_packs): Parameter is now a tree, not a\n+\ttree*.\n+\t(process_template_parm): Tweak call to\n+\tcheck_for_bare_parameter_packs.  \n+\t(push_template_decl_real): Tweak calls to\n+\tcheck_for_bare_parameter_packs. If bare parameter packs are found\n+\tin the list of exceptions, clear out that list after giving an\n+\terror.\n+\t* semantics.c (finish_cond): Tweak call to\n+\tcheck_for_bare_parameter_packs.\n+\t(finish_expr_stmt): Ditto.\n+\t(finish_for_expr): Ditto.\n+\t(finish_switch_cond): Ditto.\n+\t(finish_mem_initializers): Ditto.\n+\t(finish_member_declaration): Ditto.\n+\t(finish_static_assert): Check for bare parameter packs in the\n+\tcondition.\n+\t* decl2.c (cplus_decl_attributes): Check for bare parameter packs in the\n+\tattributes of a declaration.\n+\t* parser.c (cp_parser_using_declaration): Tweak call to\n+\tcheck_for_bare_parameter_packs.\n+\t(cp_parser_base_clause): Ditto.\n+\n 2008-01-28  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/35007"}, {"sha": "7560dbe3da754f76ef47ec843bb8333955af95d4", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -1040,6 +1040,8 @@ add_method (tree type, tree method, tree using_decl)\n \t coming from the using class in overload resolution.  */\n       if (! DECL_STATIC_FUNCTION_P (fn)\n \t  && ! DECL_STATIC_FUNCTION_P (method)\n+\t  && TREE_TYPE (TREE_VALUE (parms1)) != error_mark_node\n+\t  && TREE_TYPE (TREE_VALUE (parms2)) != error_mark_node\n \t  && (TYPE_QUALS (TREE_TYPE (TREE_VALUE (parms1)))\n \t      != TYPE_QUALS (TREE_TYPE (TREE_VALUE (parms2)))))\n \tcontinue;"}, {"sha": "5f43c13d3d8ddfbfbe97dda330062414563c5e62", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -4435,7 +4435,7 @@ extern int comp_template_parms\t\t\t(const_tree, const_tree);\n extern bool uses_parameter_packs                (tree);\n extern bool template_parameter_pack_p           (const_tree);\n extern tree make_pack_expansion                 (tree);\n-extern bool check_for_bare_parameter_packs      (tree*);\n+extern bool check_for_bare_parameter_packs      (tree);\n extern tree get_template_info\t\t\t(tree);\n extern int template_class_depth\t\t\t(tree);\n extern int is_specialization_of\t\t\t(tree, tree);"}, {"sha": "21db36e2095d2135a0c216759f3c1d65bcdf45ae", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -5388,6 +5388,12 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \n       type_dependent_p = dependent_type_p (type);\n \n+      if (check_for_bare_parameter_packs (init))\n+\t{\n+\t  init = NULL_TREE;\n+\t  DECL_INITIAL (decl) = NULL_TREE;\n+\t}\n+\n       if (init && init_const_expr_p)\n \t{\n \t  DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl) = 1;"}, {"sha": "3b20586457c84ad87af29ec9c5f1d75b16efa307", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -1107,6 +1107,9 @@ cplus_decl_attributes (tree *decl, tree attributes, int flags)\n \n   if (processing_template_decl)\n     {\n+      if (check_for_bare_parameter_packs (attributes))\n+\treturn;\n+\n       save_template_attributes (&attributes, decl);\n       if (attributes == NULL_TREE)\n \treturn;"}, {"sha": "a6489832d11232228adbc10dfd501ae40f51732e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -11776,7 +11776,7 @@ cp_parser_using_declaration (cp_parser* parser,\n \t  /* Create the USING_DECL.  */\n \t  decl = do_class_using_decl (parser->scope, identifier);\n \n-\t  if (check_for_bare_parameter_packs (&decl))\n+\t  if (check_for_bare_parameter_packs (decl))\n             return false;\n           else\n \t    /* Add it to the list of members in this class.  */\n@@ -11787,7 +11787,7 @@ cp_parser_using_declaration (cp_parser* parser,\n \t  decl = cp_parser_lookup_name_simple (parser, identifier);\n \t  if (decl == error_mark_node)\n \t    cp_parser_name_lookup_error (parser, identifier, decl, NULL);\n-\t  else if (check_for_bare_parameter_packs (&decl))\n+\t  else if (check_for_bare_parameter_packs (decl))\n \t    return false;\n \t  else if (!at_namespace_scope_p ())\n \t    do_local_using_decl (decl, qscope, identifier);\n@@ -15327,7 +15327,7 @@ cp_parser_base_clause (cp_parser* parser)\n             TREE_VALUE (base) = make_pack_expansion (TREE_VALUE (base));\n           \n \n-          if (!check_for_bare_parameter_packs (&TREE_VALUE (base)))\n+          if (!check_for_bare_parameter_packs (TREE_VALUE (base)))\n             {\n               TREE_CHAIN (base) = bases;\n               bases = base;"}, {"sha": "b5caf5c7cb29092a07b4c58e627ced35aa7c2bb3", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 16, "deletions": 45, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -2434,10 +2434,6 @@ struct find_parameter_pack_data\n \n   /* Set of AST nodes that have been visited by the traversal.  */\n   struct pointer_set_t *visited;\n-\n-  /* Whether we should replace parameter packs with\n-     ERROR_MARK_NODE. Used by check_for_bare_parameter_packs.  */\n-  bool set_packs_to_error;\n };\n \n /* Identifies all of the argument packs that occur in a template\n@@ -2452,15 +2448,13 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n     (struct find_parameter_pack_data*)data;\n   bool parameter_pack_p = false;\n \n-  /* Don't visit nodes twice, except when we're clearing out parameter\n-     packs.  */\n+  /* Don't visit nodes twice.  */\n   if (pointer_set_contains (ppd->visited, *tp))\n     {\n       *walk_subtrees = 0;\n       return NULL_TREE;\n     }\n \n-recheck:\n   /* Identify whether this is a parameter pack or not.  */\n   switch (TREE_CODE (t))\n     {\n@@ -2485,16 +2479,6 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n         }\n       break;\n \n-    case POINTER_TYPE:\n-      if (ppd->set_packs_to_error)\n-\t/* Pointer types are shared, set in that case the outermost\n-\t   POINTER_TYPE to error_mark_node rather than the parameter pack.  */\n-\t{\n-\t  t = TREE_TYPE (t);\n-\t  goto recheck;\n-\t}\n-      break;\n-\n     default:\n       /* Not a parameter pack.  */\n       break;\n@@ -2504,19 +2488,10 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n     {\n       /* Add this parameter pack to the list.  */\n       *ppd->parameter_packs = tree_cons (NULL_TREE, t, *ppd->parameter_packs);\n-\n-      if (ppd->set_packs_to_error)\n-\t/* The caller requested that we set the parameter packs to\n-\t   ERROR_MARK_NODE so that they will not trip up the compiler\n-\t   later.  The caller is responsible for emitting an error.  */\n-\t*tp = error_mark_node;\n-      else\n-\t/* Make sure we do not visit this node again.  */\n-\tpointer_set_insert (ppd->visited, *tp);\n     }\n-  else\n-    /* Make sure we do not visit this node again.  */\n-    pointer_set_insert (ppd->visited, *tp);\n+\n+  /* Make sure we do not visit this node again.  */\n+  pointer_set_insert (ppd->visited, *tp);\n \n   if (TYPE_P (t))\n     cp_walk_tree (&TYPE_CONTEXT (t), \n@@ -2602,7 +2577,6 @@ uses_parameter_packs (tree t)\n   struct find_parameter_pack_data ppd;\n   ppd.parameter_packs = &parameter_packs;\n   ppd.visited = pointer_set_create ();\n-  ppd.set_packs_to_error = false;\n   cp_walk_tree (&t, &find_parameter_packs_r, &ppd, NULL);\n   pointer_set_destroy (ppd.visited);\n   return parameter_packs != NULL_TREE;\n@@ -2621,8 +2595,6 @@ make_pack_expansion (tree arg)\n   bool for_types = false;\n   struct find_parameter_pack_data ppd;\n \n-  ppd.set_packs_to_error = false;\n-\n   if (!arg || arg == error_mark_node)\n     return arg;\n \n@@ -2744,21 +2716,20 @@ make_pack_expansion (tree arg)\n    Returns TRUE and emits an error if there were bare parameter packs,\n    returns FALSE otherwise.  */\n bool \n-check_for_bare_parameter_packs (tree* t)\n+check_for_bare_parameter_packs (tree t)\n {\n   tree parameter_packs = NULL_TREE;\n   struct find_parameter_pack_data ppd;\n \n-  if (!processing_template_decl || !t || !*t || *t == error_mark_node)\n+  if (!processing_template_decl || !t || t == error_mark_node)\n     return false;\n \n-  if (TREE_CODE (*t) == TYPE_DECL)\n-    t = &TREE_TYPE (*t);\n+  if (TREE_CODE (t) == TYPE_DECL)\n+    t = TREE_TYPE (t);\n \n   ppd.parameter_packs = &parameter_packs;\n   ppd.visited = pointer_set_create ();\n-  ppd.set_packs_to_error = false;\n-  cp_walk_tree (t, &find_parameter_packs_r, &ppd, NULL);\n+  cp_walk_tree (&t, &find_parameter_packs_r, &ppd, NULL);\n   pointer_set_destroy (ppd.visited);\n \n   if (parameter_packs) \n@@ -2789,8 +2760,7 @@ check_for_bare_parameter_packs (tree* t)\n \t tree.  */\n       ppd.parameter_packs = &parameter_packs;\n       ppd.visited = pointer_set_create ();\n-      ppd.set_packs_to_error = true;\n-      cp_walk_tree (t, &find_parameter_packs_r, &ppd, NULL);\n+      cp_walk_tree (&t, &find_parameter_packs_r, &ppd, NULL);\n       pointer_set_destroy (ppd.visited);\n \n       return true;\n@@ -3055,7 +3025,7 @@ process_template_parm (tree list, tree parm, bool is_non_type,\n \t  {\n \t    /* This template parameter is not a parameter pack, but it\n \t       should be. Complain about \"bare\" parameter packs.  */\n-\t    check_for_bare_parameter_packs (&TREE_TYPE (parm));\n+\t    check_for_bare_parameter_packs (TREE_TYPE (parm));\n \t    \n \t    /* Recover by calling this a parameter pack.  */\n \t    is_parameter_pack = true;\n@@ -3895,7 +3865,7 @@ push_template_decl_real (tree decl, bool is_friend)\n       while (arg && argtype)\n         {\n           if (!FUNCTION_PARAMETER_PACK_P (arg)\n-              && check_for_bare_parameter_packs (&TREE_TYPE (arg)))\n+              && check_for_bare_parameter_packs (TREE_TYPE (arg)))\n             {\n             /* This is a PARM_DECL that contains unexpanded parameter\n                packs. We have already complained about this in the\n@@ -3911,14 +3881,15 @@ push_template_decl_real (tree decl, bool is_friend)\n \n       /* Check for bare parameter packs in the return type and the\n          exception specifiers.  */\n-      if (check_for_bare_parameter_packs (&TREE_TYPE (type)))\n+      if (check_for_bare_parameter_packs (TREE_TYPE (type)))\n \t/* Errors were already issued, set return type to int\n \t   as the frontend doesn't expect error_mark_node as\n \t   the return type.  */\n \tTREE_TYPE (type) = integer_type_node;\n-      check_for_bare_parameter_packs (&TYPE_RAISES_EXCEPTIONS (type));\n+      if (check_for_bare_parameter_packs (TYPE_RAISES_EXCEPTIONS (type)))\n+\tTYPE_RAISES_EXCEPTIONS (type) = NULL_TREE;\n     }\n-  else if (check_for_bare_parameter_packs (&TREE_TYPE (decl)))\n+  else if (check_for_bare_parameter_packs (TREE_TYPE (decl)))\n     return error_mark_node;\n \n   if (is_partial)"}, {"sha": "928975ad130a52b29669de9b23931bb0bcedcfc7", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -508,7 +508,7 @@ finish_cond (tree *cond_p, tree expr)\n       if (TREE_CODE (cond) == DECL_EXPR)\n \texpr = cond;\n \n-      if (check_for_bare_parameter_packs (&expr))\n+      if (check_for_bare_parameter_packs (expr))\n         *cond_p = error_mark_node;\n     }\n   *cond_p = expr;\n@@ -619,7 +619,7 @@ finish_expr_stmt (tree expr)\n       else if (!type_dependent_expression_p (expr))\n \tconvert_to_void (build_non_dependent_expr (expr), \"statement\");\n \n-      if (check_for_bare_parameter_packs (&expr))\n+      if (check_for_bare_parameter_packs (expr))\n         expr = error_mark_node;\n \n       /* Simplification of inner statement expressions, compound exprs,\n@@ -877,7 +877,7 @@ finish_for_expr (tree expr, tree for_stmt)\n   else if (!type_dependent_expression_p (expr))\n     convert_to_void (build_non_dependent_expr (expr), \"3rd expression in for\");\n   expr = maybe_cleanup_point_expr_void (expr);\n-  if (check_for_bare_parameter_packs (&expr))\n+  if (check_for_bare_parameter_packs (expr))\n     expr = error_mark_node;\n   FOR_EXPR (for_stmt) = expr;\n }\n@@ -974,7 +974,7 @@ finish_switch_cond (tree cond, tree switch_stmt)\n \t    cond = index;\n \t}\n     }\n-  if (check_for_bare_parameter_packs (&cond))\n+  if (check_for_bare_parameter_packs (cond))\n     cond = error_mark_node;\n   finish_cond (&SWITCH_STMT_COND (switch_stmt), cond);\n   SWITCH_STMT_TYPE (switch_stmt) = orig_type;\n@@ -1393,7 +1393,7 @@ finish_mem_initializers (tree mem_inits)\n              bound as part of the TREE_PURPOSE.  See\n              make_pack_expansion for more information.  */\n           if (TREE_CODE (TREE_PURPOSE (mem)) != TYPE_PACK_EXPANSION\n-              && check_for_bare_parameter_packs (&TREE_VALUE (mem)))\n+              && check_for_bare_parameter_packs (TREE_VALUE (mem)))\n             TREE_VALUE (mem) = error_mark_node;\n         }\n \n@@ -2331,9 +2331,9 @@ finish_member_declaration (tree decl)\n   /* Check for bare parameter packs in the member variable declaration.  */\n   if (TREE_CODE (decl) == FIELD_DECL)\n     {\n-      if (check_for_bare_parameter_packs (&TREE_TYPE (decl)))\n+      if (check_for_bare_parameter_packs (TREE_TYPE (decl)))\n         TREE_TYPE (decl) = error_mark_node;\n-      if (check_for_bare_parameter_packs (&DECL_ATTRIBUTES (decl)))\n+      if (check_for_bare_parameter_packs (DECL_ATTRIBUTES (decl)))\n         DECL_ATTRIBUTES (decl) = NULL_TREE;\n     }\n \n@@ -4025,6 +4025,9 @@ void\n finish_static_assert (tree condition, tree message, location_t location, \n                       bool member_p)\n {\n+  if (check_for_bare_parameter_packs (condition))\n+    condition = error_mark_node;\n+\n   if (type_dependent_expression_p (condition) \n       || value_dependent_expression_p (condition))\n     {"}, {"sha": "fd2a3193a4739bae28e7afb834a255f79382c4dd", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -6605,7 +6605,7 @@ check_return_expr (tree retval, bool *no_warning)\n   if (processing_template_decl)\n     {\n       current_function_returns_value = 1;\n-      if (check_for_bare_parameter_packs (&retval))\n+      if (check_for_bare_parameter_packs (retval))\n         retval = error_mark_node;\n       return retval;\n     }"}, {"sha": "832e1e87b6133128d3a633734ba3e0a8a6e9dd48", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -1,3 +1,29 @@\n+2008-01-29  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\tPR c++/34055\n+\tPR c++/34103\n+\tPR c++/34219\n+\tPR c++/34606\n+\tPR c++/34753\n+\tPR c++/34754\n+\tPR c++/34755\n+\tPR c++/34919\n+\tPR c++/34961\n+\t* g++.dg/cpp0x/vt-34219-2.C: New.\n+\t* g++.dg/cpp0x/pr32126.C: Tweak expected error messages.\n+\t* g++.dg/cpp0x/vt-34961.C: New.\n+\t* g++.dg/cpp0x/vt-34055.C: Tweak error messages; add new test\n+\tcases from the re-opened PR.\n+\t* g++.dg/cpp0x/vt-34753.C: New.\n+\t* g++.dg/cpp0x/vt-34919.C: New.\n+\t* g++.dg/cpp0x/vt-34754.C: New.\n+\t* g++.dg/cpp0x/vt-34606.C: New.\n+\t* g++.dg/cpp0x/vt-34219.C: New.\n+\t* g++.dg/cpp0x/pr32125.C: Tweak expected error messages.\n+\t* g++.dg/cpp0x/vt-34755.C: New.\n+\t* g++.dg/cpp0x/pr31438.C: Ditto.\n+\t* g++.dg/cpp0x/variadic81.C: Ditto.\n+\n 2008-01-29  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* g++.dg/torture/pr34641.C: Put the dg-do first."}, {"sha": "4763918b0ef897bc9c7132ba3aa08113b5af9f4d", "filename": "gcc/testsuite/g++.dg/cpp0x/pr31438.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31438.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31438.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31438.C?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -1,9 +1,9 @@\n // { dg-options \"-std=gnu++0x\" }\n \n template<typename> struct A;\n-template<typename T, typename... U> struct A<T(U)> // { dg-error \"parameter packs|U|not used|U\" }\n-{\n- template<typename X> A(X);\n+template<typename T, typename... U> struct A<T(U)> // { dg-error \"parameter packs|U\" }\n+{     // { dg-error \"parameter packs|U\" }\n+ template<typename X> A(X); // { dg-error \"parameter packs|U\" }\n };\n \n A<void(int)> a(0); // { dg-error \"incomplete type\" }"}, {"sha": "048cf454484096f1be003630cfef9197d98495ac", "filename": "gcc/testsuite/g++.dg/cpp0x/pr32125.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32125.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32125.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32125.C?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -1,8 +1,8 @@\n // { dg-options \"-std=c++0x\" }\n template<typename...> struct A;\n \n-template<typename...T> struct A<T*> // { dg-error \"not expanded|T|not used|T\" }\n-{\n-  A();\n+template<typename...T> struct A<T*> // { dg-error \"not expanded|T\" }\n+{       // { dg-error \"not expanded|T\" }\n+  A();  // { dg-error \"not expanded|T\" }\n   A(T); // { dg-error \"not expanded|T\" }\n };"}, {"sha": "a344567dff9a65117bc518678c90e006ef601b55", "filename": "gcc/testsuite/g++.dg/cpp0x/pr32126.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32126.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32126.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32126.C?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -1,8 +1,8 @@\n // { dg-options \"-std=c++0x\" }\n template<typename...> struct A;\n \n-template<typename...T> struct A<T> // { dg-error \"not expanded|T|not used|T\" }\n-{\n+template<typename...T> struct A<T> // { dg-error \"not expanded|T|\" }\n+{ // { dg-error \"not expanded|T|\" }\n  static int i;\n };\n "}, {"sha": "c5673789ca987da8231846edfc00ec3ad0be1ed9", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic81.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic81.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic81.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic81.C?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -4,7 +4,7 @@\n template<typename> struct A;\n \n template<typename... T> struct A<T*>  // { dg-error \"not expanded|T|not used|T\" }\n-{                                     \n+{                                     // { dg-error \"not expanded|T|not used|T\" }\n   struct B;\n };\n "}, {"sha": "8ad9c2d52661d52ea1b5f785e0908b77c2bd6688", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-34055.C", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34055.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34055.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34055.C?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -1,10 +1,31 @@\n // { dg-options \"-std=c++0x\" }\n // PR c++/34055\n-template<typename...> struct A; // { dg-error \"declaration\" }\n+template<typename...> struct A;\n \n template<typename...T> struct A<T*> // { dg-error \"parameter packs|T\" }\n-{\n-  void foo();\n+{   // { dg-error \"parameter packs|T\" }\n+  void foo();  // { dg-error \"parameter packs|T|candidate\" }\n };\n \n-template<typename...T> void A<T*>::foo() {} // { dg-error \"invalid use\" }\n+template<typename...T> void A<T*>::foo() {} // { dg-error \"does not match\" }\n+\n+\n+\n+template<typename...> struct B;\n+\n+template<typename...T> struct B<T&> // { dg-error \"parameter packs|T\" }\n+{ // { dg-error \"parameter packs|T\" }\n+  void foo(); // { dg-error \"parameter packs|T\" }\n+};\n+\n+template<typename...T> void B<T&>::foo() {} // { dg-error \"does not match\" }\n+\n+\n+template<typename...> struct C;\n+\n+template<typename...T> struct C<T()> // { dg-error \"parameter packs|T\" }\n+{ // { dg-error \"parameter packs|T\" }\n+  void foo(); // { dg-error \"parameter packs|T\" }\n+};\n+\n+template<typename...T> void C<T()>::foo() {} // { dg-error \"does not match\" }"}, {"sha": "193bc0c6cf9a487d309f08460758456ec0beccb8", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-34219-2.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34219-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34219-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34219-2.C?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -0,0 +1,22 @@\n+// { dg-options \"-std=c++0x\" }\n+template<template<typename... T> class Comp, typename... T> void f( T... Value)\n+{\n+  static_assert( Comp<T>::value > 0, \"\" ); // { dg-error \"parameter packs|T\" }\n+}\n+\n+template<template<typename... T> class Comp, typename... T> void g( T... Value)\n+{\n+  static_assert( Comp<T...>::value > 0, \"\" );\n+}\n+\n+template <typename... T>\n+struct Foo\n+{\n+        static const int value=1;\n+};\n+\n+int main()\n+{\n+        f<Foo>( 2 );\n+        g<Foo>( 2 );\n+}"}, {"sha": "fb3584ea88d2800a0a4e5c1811f9fab86555fade", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-34219.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34219.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34219.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34219.C?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -0,0 +1,15 @@\n+// { dg-options \"-std=c++0x\" }\n+template<typename T, T a, T... Params>\n+struct max\n+{\n+  static const T value = a > max<T, Params>::value ? a : max<T, Params>::value; // { dg-error \"not expanded|Params\" }\n+};\n+\n+template<typename T, T a, T b>\n+struct max<T, a, b>\n+{\n+        static const T value = a > b ? a : b;\n+};\n+\n+static const int value1 = max< int, 1, 2>::value;\n+static const int value2 = max< int, 1, 3, 5>::value;"}, {"sha": "f62e2d54118c80889e317d2d870649dc91da12ed", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-34606.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34606.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34606.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34606.C?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options \"-std=c++0x\" }\n+template<typename...> struct A;\n+\n+template<typename T, typename... U> struct A<T, U> // { dg-error \"parameter packs|U\" }\n+{  // { dg-error \"parameter packs|U\" }\n+  template<typename> struct B;\n+\n+  template<typename X> struct B<X*> {};  // { dg-error \"parameter packs|U\" }\n+};"}, {"sha": "15eaebebc8832428a7690e51fb31bc0447aa00f6", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-34753.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34753.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34753.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34753.C?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -0,0 +1,14 @@\n+// { dg-options \"-std=c++0x\" }\n+template<typename... T> struct A\n+{\n+  template<T> struct B {}; // { dg-error \"not expanded|T\" }\n+};\n+\n+A<int>::B<0> b;\n+\n+template<typename... T> struct B\n+{\n+  template<T> B(); // { dg-error \"not expanded|T\" }\n+};\n+\n+B<int> c;"}, {"sha": "97c0065328f16b37f8383203e8e73687c6d92d7e", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-34754.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34754.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34754.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34754.C?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -0,0 +1,6 @@\n+// { dg-options \"-std=c++0x\" }\n+template<template<int> class... T> struct A\n+{\n+  void foo(T<0>); // { dg-error \"not expanded|T\" }\n+  void bar(T<0>); // { dg-error \"not expanded|T\" }\n+};"}, {"sha": "9d5a3d1ca4d5792736e4cf20bc8228ff98c3f3ae", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-34755.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34755.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34755.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34755.C?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -0,0 +1,6 @@\n+// { dg-options \"-std=c++0x\" }\n+template<typename> struct A {};\n+\n+template<template<typename> class... T> void foo(T<int>) {} // { dg-error \"not expanded|T\" }\n+\n+template void foo<A>(A<int>); // { dg-error \"does not match\" }"}, {"sha": "829579918e16bb3abef906937451648c68ba3646", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-34919.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34919.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34919.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34919.C?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -0,0 +1,13 @@\n+// { dg-options \"-std=c++0x\" }\n+template<int... N> struct A\n+{\n+  static void foo()\n+  {\n+    int i = N; // { dg-error \"not expanded|N\" }\n+  }\n+};\n+\n+void bar()\n+{\n+  A<0>::foo();\n+}"}, {"sha": "3a872146e257a513c63fc862bae7758026b69eec", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-34961.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34961.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3e2d465d6f267d34a18b46c1ab6650c67785d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34961.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34961.C?ref=7b3e2d465d6f267d34a18b46c1ab6650c67785d9", "patch": "@@ -0,0 +1,7 @@\n+// { dg-options \"-std=c++0x\" }\n+template<typename... T> struct A\n+{\n+  static const int i __attribute__((aligned(__alignof(T)))) = 0; // { dg-error \"not expanded|T\" }\n+}; \n+\n+A<int> a; "}]}