{"sha": "5eedb0ce4e6a6d96af8f9ba956dcf0c88796e26f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVlZGIwY2U0ZTZhNmQ5NmFmOGY5YmE5NTZkY2YwYzg4Nzk2ZTI2Zg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2006-05-04T15:14:43Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2006-05-04T15:14:43Z"}, "message": "bfin: New directory.\n\n\t* gcc.target/bfin: New directory.\n\t* gcc.target/bfin/bfin.exp: New file.\n\t* gcc.target/bfin/frmul.c: New file.\n\t* gcc.target/bfin/arith.c: New file.\n\t* gcc.target/bfin/mul-combine.c: New file.\n\t* gcc.target/bfin/shift.c: New file.\n\nFrom-SVN: r113529", "tree": {"sha": "830f964c8c234c2770e28151dbc634ddb2956fac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/830f964c8c234c2770e28151dbc634ddb2956fac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5eedb0ce4e6a6d96af8f9ba956dcf0c88796e26f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eedb0ce4e6a6d96af8f9ba956dcf0c88796e26f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eedb0ce4e6a6d96af8f9ba956dcf0c88796e26f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eedb0ce4e6a6d96af8f9ba956dcf0c88796e26f/comments", "author": null, "committer": null, "parents": [{"sha": "d818832cdd9b5cb760cedee68973122571fef418", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d818832cdd9b5cb760cedee68973122571fef418", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d818832cdd9b5cb760cedee68973122571fef418"}], "stats": {"total": 347, "additions": 347, "deletions": 0}, "files": [{"sha": "798df54e0385df9aba133f737c443703bce37c22", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eedb0ce4e6a6d96af8f9ba956dcf0c88796e26f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eedb0ce4e6a6d96af8f9ba956dcf0c88796e26f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5eedb0ce4e6a6d96af8f9ba956dcf0c88796e26f", "patch": "@@ -1,3 +1,12 @@\n+2005-05-04  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* gcc.target/bfin: New directory.\n+\t* gcc.target/bfin/bfin.exp: New file.\n+\t* gcc.target/bfin/frmul.c: New file.\n+\t* gcc.target/bfin/arith.c: New file.\n+\t* gcc.target/bfin/mul-combine.c: New file.\n+\t* gcc.target/bfin/shift.c: New file.\n+\n 2006-05-04  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/14287"}, {"sha": "211506cfecabaa65dc7e053a5b6fa42ab3f67869", "filename": "gcc/testsuite/gcc.target/bfin/arith.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eedb0ce4e6a6d96af8f9ba956dcf0c88796e26f/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eedb0ce4e6a6d96af8f9ba956dcf0c88796e26f/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Farith.c?ref=5eedb0ce4e6a6d96af8f9ba956dcf0c88796e26f", "patch": "@@ -0,0 +1,48 @@\n+extern void abort (void);\n+extern void exit (int);\n+\n+typedef int  __v2hi __attribute ((vector_size(4)));\n+typedef __v2hi fract2x16;\n+typedef short fract16;\n+\n+int main ()\n+{\n+  fract2x16 a, b, c, d;\n+  fract16 t1, t2;\n+  a = __builtin_bfin_compose_2x16 (0x3000, 0x2000);\n+  b = __builtin_bfin_compose_2x16 (0x7000, 0x5000);\n+  c = __builtin_bfin_compose_2x16 (0x7000, 0xc000);\n+\n+  d = __builtin_bfin_add_fr2x16 (a, b);\n+  t1 = __builtin_bfin_extract_lo (d);\n+  t2 = __builtin_bfin_extract_hi (d);\n+  if (t1 != 0x7000 || t2 != 0x7fff)\n+    abort ();\n+\n+  d = __builtin_bfin_sub_fr2x16 (a, b);\n+  t1 = __builtin_bfin_extract_lo (d);\n+  t2 = __builtin_bfin_extract_hi (d);\n+  if (t1 != -0x3000 || t2 != -0x4000)\n+    abort ();\n+\n+  d = __builtin_bfin_negate_fr2x16 (c);\n+  t1 = __builtin_bfin_extract_lo (d);\n+  t2 = __builtin_bfin_extract_hi (d);\n+  if (t1 != 0x4000 || t2 != -0x7000)\n+    abort ();\n+  \n+  if (__builtin_bfin_add_fr1x32 (0x7fffffff, 1) != 0x7fffffff)\n+    abort ();\n+\n+  if (__builtin_bfin_add_fr1x32 (0x80000000, -1) != 0x80000000)\n+    abort ();\n+    \n+  if (__builtin_bfin_add_fr1x32 (0x80000001, -1) != 0x80000000)\n+    abort ();\n+    \n+  if (__builtin_bfin_add_fr1x32 (0xFEDCBA98, 0x11111111) != 0x0FEDCBA9)\n+    abort ();\n+    \n+  exit (0);\n+}\n+"}, {"sha": "37f0a7c4b721d28d2c00e6891e96a5e339f30997", "filename": "gcc/testsuite/gcc.target/bfin/bfin.exp", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eedb0ce4e6a6d96af8f9ba956dcf0c88796e26f/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fbfin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eedb0ce4e6a6d96af8f9ba956dcf0c88796e26f/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fbfin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fbfin.exp?ref=5eedb0ce4e6a6d96af8f9ba956dcf0c88796e26f", "patch": "@@ -0,0 +1,23 @@\n+# Tests for the Blackfin\n+\n+if {![istarget bfin-*]} {\n+    return 0\n+}\n+\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "390d02f6ad7701152e99601f97ffdf199a89980d", "filename": "gcc/testsuite/gcc.target/bfin/frmul.c", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eedb0ce4e6a6d96af8f9ba956dcf0c88796e26f/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Ffrmul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eedb0ce4e6a6d96af8f9ba956dcf0c88796e26f/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Ffrmul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Ffrmul.c?ref=5eedb0ce4e6a6d96af8f9ba956dcf0c88796e26f", "patch": "@@ -0,0 +1,149 @@\n+extern void abort (void);\n+extern void exit (int);\n+\n+typedef int  __v2hi __attribute ((vector_size(4)));\n+typedef __v2hi fract2x16;\n+typedef short fract16;\n+\n+#define GETVECT(HILO1,HILO2,IN1,IN2)\t\t\t\t\t\\\n+  __builtin_bfin_compose_2x16 ((HILO2) ? __builtin_bfin_extract_hi (IN1) : __builtin_bfin_extract_lo (IN1), \\\n+\t\t\t  (HILO1) ? __builtin_bfin_extract_hi (IN2) : __builtin_bfin_extract_lo (IN2))\n+#define DOTEST(IN1, IN2, HL1, HL2, HL3, HL4)\t\t\t\t\t\\\n+  __builtin_bfin_multr_fr2x16 (GETVECT (HL1, HL2, IN1, IN1), \\\n+\t\t\t  GETVECT (HL3, HL4, IN2, IN2))\n+\n+#define FUNC(HL1, HL2, HL3, HL4) \\\n+  fract2x16 foo ## HL1 ## HL2 ## HL3 ## HL4 (fract2x16 a, fract2x16 b)\\\n+  { \\\n+    return DOTEST(a, b, HL1, HL2, HL3, HL4);\\\n+  }\n+\n+FUNC (0, 0, 0, 0)\n+FUNC (1, 0, 0, 0)\n+FUNC (0, 1, 0, 0)\n+FUNC (1, 1, 0, 0)\n+FUNC (0, 0, 1, 0)\n+FUNC (1, 0, 1, 0)\n+FUNC (0, 1, 1, 0)\n+FUNC (1, 1, 1, 0)\n+FUNC (0, 0, 0, 1)\n+FUNC (1, 0, 0, 1)\n+FUNC (0, 1, 0, 1)\n+FUNC (1, 1, 0, 1)\n+FUNC (0, 0, 1, 1)\n+FUNC (1, 0, 1, 1)\n+FUNC (0, 1, 1, 1)\n+FUNC (1, 1, 1, 1)\n+\n+#define RES1 0x1400\n+#define RES2 0x1e00\n+#define RES3 0x1c00\n+#define RES4 0x2a00\n+\n+\n+int main ()\n+{\n+  fract2x16 a, b, c;\n+  fract16 t1, t2;\n+  a = __builtin_bfin_compose_2x16 (0x3000, 0x2000);\n+  b = __builtin_bfin_compose_2x16 (0x7000, 0x5000);\n+\n+  c = foo0000 (a, b);\n+  t1 = __builtin_bfin_extract_lo (c);\n+  t2 = __builtin_bfin_extract_hi (c);\n+  if (t1 != RES1 || t2 != RES1)\n+    abort ();\n+\n+  c = foo1000 (a, b);\n+  t1 = __builtin_bfin_extract_lo (c);\n+  t2 = __builtin_bfin_extract_hi (c);\n+  if (t1 != RES2 || t2 != RES1)\n+    abort ();\n+\n+  c = foo0100 (a, b);\n+  t1 = __builtin_bfin_extract_lo (c);\n+  t2 = __builtin_bfin_extract_hi (c);\n+  if (t1 != RES1 || t2 != RES2)\n+    abort ();\n+\n+  c = foo1100 (a, b);\n+  t1 = __builtin_bfin_extract_lo (c);\n+  t2 = __builtin_bfin_extract_hi (c);\n+  if (t1 != RES2 || t2 != RES2)\n+    abort ();\n+\n+  c = foo0010 (a, b);\n+  t1 = __builtin_bfin_extract_lo (c);\n+  t2 = __builtin_bfin_extract_hi (c);\n+  if (t1 != RES3 || t2 != RES1)\n+    abort ();\n+\n+  c = foo1010 (a, b);\n+  t1 = __builtin_bfin_extract_lo (c);\n+  t2 = __builtin_bfin_extract_hi (c);\n+  if (t1 != RES4 || t2 != RES1)\n+    abort ();\n+\n+  c = foo0110 (a, b);\n+  t1 = __builtin_bfin_extract_lo (c);\n+  t2 = __builtin_bfin_extract_hi (c);\n+  if (t1 != RES3 || t2 != RES2)\n+    abort ();\n+\n+  c = foo1110 (a, b);\n+  t1 = __builtin_bfin_extract_lo (c);\n+  t2 = __builtin_bfin_extract_hi (c);\n+  if (t1 != RES4 || t2 != RES2)\n+    abort ();\n+\n+  c = foo0001 (a, b);\n+  t1 = __builtin_bfin_extract_lo (c);\n+  t2 = __builtin_bfin_extract_hi (c);\n+  if (t1 != RES1 || t2 != RES3)\n+    abort ();\n+\n+  c = foo1001 (a, b);\n+  t1 = __builtin_bfin_extract_lo (c);\n+  t2 = __builtin_bfin_extract_hi (c);\n+  if (t1 != RES2 || t2 != RES3)\n+    abort ();\n+\n+  c = foo0101 (a, b);\n+  t1 = __builtin_bfin_extract_lo (c);\n+  t2 = __builtin_bfin_extract_hi (c);\n+  if (t1 != RES1 || t2 != RES4)\n+    abort ();\n+\n+  c = foo1101 (a, b);\n+  t1 = __builtin_bfin_extract_lo (c);\n+  t2 = __builtin_bfin_extract_hi (c);\n+  if (t1 != RES2 || t2 != RES4)\n+    abort ();\n+\n+  c = foo0011 (a, b);\n+  t1 = __builtin_bfin_extract_lo (c);\n+  t2 = __builtin_bfin_extract_hi (c);\n+  if (t1 != RES3 || t2 != RES3)\n+    abort ();\n+\n+  c = foo1011 (a, b);\n+  t1 = __builtin_bfin_extract_lo (c);\n+  t2 = __builtin_bfin_extract_hi (c);\n+  if (t1 != RES4 || t2 != RES3)\n+    abort ();\n+\n+  c = foo0111 (a, b);\n+  t1 = __builtin_bfin_extract_lo (c);\n+  t2 = __builtin_bfin_extract_hi (c);\n+  if (t1 != RES3 || t2 != RES4)\n+    abort ();\n+\n+  c = foo1111 (a, b);\n+  t1 = __builtin_bfin_extract_lo (c);\n+  t2 = __builtin_bfin_extract_hi (c);\n+  if (t1 != RES4 || t2 != RES4)\n+    abort ();\n+\n+  exit (0);\n+}\n+"}, {"sha": "59129b57a6587dcd44723452eca9c33ec3f8f932", "filename": "gcc/testsuite/gcc.target/bfin/mul-combine.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eedb0ce4e6a6d96af8f9ba956dcf0c88796e26f/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmul-combine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eedb0ce4e6a6d96af8f9ba956dcf0c88796e26f/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmul-combine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fmul-combine.c?ref=5eedb0ce4e6a6d96af8f9ba956dcf0c88796e26f", "patch": "@@ -0,0 +1,45 @@\n+/* Make sure combine eliminates all unnecessary instructions for the\n+   sixteen cases of hi/lo multiplications.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+/* { dg-final { scan-assembler-not \"<<\" } } */\n+/* { dg-final { scan-assembler-not \"PACK\" } } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+typedef int  __v2hi __attribute ((vector_size(4)));\n+typedef __v2hi fract2x16;\n+typedef short fract16;\n+\n+#define GETVECT(HILO1,HILO2,IN1,IN2)\t\t\t\t\t\\\n+  __builtin_bfin_compose_2x16 ((HILO2) ? __builtin_bfin_extract_hi (IN1) : __builtin_bfin_extract_lo (IN1), \\\n+\t\t\t  (HILO1) ? __builtin_bfin_extract_hi (IN2) : __builtin_bfin_extract_lo (IN2))\n+#define DOTEST(IN1, IN2, HL1, HL2, HL3, HL4)\t\t\t\t\t\\\n+  __builtin_bfin_multr_fr2x16 (GETVECT (HL1, HL2, IN1, IN1), \\\n+\t\t\t  GETVECT (HL3, HL4, IN2, IN2))\n+\n+#define FUNC(HL1, HL2, HL3, HL4) \\\n+  fract2x16 foo ## HL1 ## HL2 ## HL3 ## HL4 (fract2x16 a, fract2x16 b)\\\n+  { \\\n+    return DOTEST(a, b, HL1, HL2, HL3, HL4);\\\n+  }\n+\n+FUNC (0, 0, 0, 0)\n+FUNC (1, 0, 0, 0)\n+FUNC (0, 1, 0, 0)\n+FUNC (1, 1, 0, 0)\n+FUNC (0, 0, 1, 0)\n+FUNC (1, 0, 1, 0)\n+FUNC (0, 1, 1, 0)\n+FUNC (1, 1, 1, 0)\n+FUNC (0, 0, 0, 1)\n+FUNC (1, 0, 0, 1)\n+FUNC (0, 1, 0, 1)\n+FUNC (1, 1, 0, 1)\n+FUNC (0, 0, 1, 1)\n+FUNC (1, 0, 1, 1)\n+FUNC (0, 1, 1, 1)\n+FUNC (1, 1, 1, 1)"}, {"sha": "1f17883a37f38e39046782fc0145c0ce7f380777", "filename": "gcc/testsuite/gcc.target/bfin/shift.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eedb0ce4e6a6d96af8f9ba956dcf0c88796e26f/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fshift.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eedb0ce4e6a6d96af8f9ba956dcf0c88796e26f/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fshift.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fshift.c?ref=5eedb0ce4e6a6d96af8f9ba956dcf0c88796e26f", "patch": "@@ -0,0 +1,73 @@\n+extern void abort (void);\n+extern void exit (int);\n+\n+typedef int  __v2hi __attribute ((vector_size(4)));\n+typedef __v2hi fract2x16;\n+typedef short fract16;\n+\n+int main ()\n+{\n+  fract2x16 a, b, c, d;\n+  fract16 t1, t2;\n+  a = __builtin_bfin_compose_2x16 (0xe005, 0x1000);\n+  b = __builtin_bfin_compose_2x16 (0x7000, 0x5000);\n+  c = __builtin_bfin_compose_2x16 (0x7000, 0xc000);\n+\n+  d = __builtin_bfin_shl_fr2x16 (c, 2);\n+  t1 = __builtin_bfin_extract_lo (d);\n+  t2 = __builtin_bfin_extract_hi (d);\n+  if ((unsigned short)t1 != 0x8000 || t2 != 0x7fff)\n+    abort ();\n+\n+  d = __builtin_bfin_shl_fr2x16 (c, -2);\n+  t1 = __builtin_bfin_extract_lo (d);\n+  t2 = __builtin_bfin_extract_hi (d);\n+  if ((unsigned short)t1 != 0xf000 || t2 != 0x1c00)\n+    abort ();\n+\n+  d = __builtin_bfin_shl_fr2x16 (a, 2);\n+  t1 = __builtin_bfin_extract_lo (d);\n+  t2 = __builtin_bfin_extract_hi (d);\n+  if (t1 != 0x4000 || (unsigned short)t2 != 0x8014)\n+    abort ();\n+\n+  d = __builtin_bfin_shl_fr2x16 (c, -4);\n+  t1 = __builtin_bfin_extract_lo (d);\n+  t2 = __builtin_bfin_extract_hi (d);\n+  if ((unsigned short)t1 != 0xfc00 || t2 != 0x0700)\n+    abort ();\n+\n+  d = __builtin_bfin_shl_fr2x16 (c, 2);\n+  t1 = __builtin_bfin_extract_lo (d);\n+  t2 = __builtin_bfin_extract_hi (d);\n+  if ((unsigned short)t1 != 0x8000 || t2 != 0x7fff)\n+    abort ();\n+\n+  d = __builtin_bfin_shl_fr2x16 (a, -2);\n+  t1 = __builtin_bfin_extract_lo (d);\n+  t2 = __builtin_bfin_extract_hi (d);\n+  if (t1 != 0x0400 || (unsigned short)t2 != 0xf801)\n+    abort ();\n+\n+  /* lsh */\n+  d = __builtin_bfin_lshl_fr2x16 (c, -4);\n+  t1 = __builtin_bfin_extract_lo (d);\n+  t2 = __builtin_bfin_extract_hi (d);\n+  if (t1 != 0x0c00 || t2 != 0x0700)\n+    abort ();\n+\n+  d = __builtin_bfin_lshl_fr2x16 (c, 2);\n+  t1 = __builtin_bfin_extract_lo (d);\n+  t2 = __builtin_bfin_extract_hi (d);\n+  if (t1 != 0x0000 || t2 != -0x4000)\n+    abort ();\n+\n+  d = __builtin_bfin_lshl_fr2x16 (a, -2);\n+  t1 = __builtin_bfin_extract_lo (d);\n+  t2 = __builtin_bfin_extract_hi (d);\n+  if (t1 != 0x0400 || (unsigned short)t2 != 0x3801)\n+    abort ();\n+\n+  exit (0);\n+}\n+"}]}