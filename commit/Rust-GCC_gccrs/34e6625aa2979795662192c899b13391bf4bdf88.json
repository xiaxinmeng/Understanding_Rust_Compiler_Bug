{"sha": "34e6625aa2979795662192c899b13391bf4bdf88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRlNjYyNWFhMjk3OTc5NTY2MjE5MmM4OTliMTMzOTFiZjRiZGY4OA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2013-09-25T20:28:12Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2013-09-25T20:28:12Z"}, "message": "re PR libstdc++/58338 (Add noexcept to functions with a narrow contract)\n\n2013-09-25  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR libstdc++/58338\n\t* include/bits/forward_list.h (_Fwd_list_node_base::_M_transfer_after):\n\tMark as noexcept.\n\t(_Fwd_list_iterator) [_Fwd_list_iterator, operator*, operator->,\n\toperator++, operator==, operator!=, _M_next]: Likewise.\n\t(_Fwd_list_const_iterator) [_Fwd_list_const_iterator, operator*,\n\toperator->, operator++, operator==, operator!=, _M_next]: Likewise.\n\t(operator==(const _Fwd_list_iterator&, const _Fwd_list_const_iterator&),\n\toperator!=(const _Fwd_list_iterator&, const _Fwd_list_const_iterator&)):\n\tLikewise.\n\t* include/bits/hashtable_policy.h (_Hash_node_base::_Hash_node_base,\n\t_Hash_node::_M_next, _Node_iterator_base::_Node_iterator_base,\n\t_Node_iterator_base::_M_incr, operator==(const _Node_iterator_base&,\n\tconst _Node_iterator_base&), operator!=(const _Node_iterator_base&,\n\tconst _Node_iterator_base&)): Likewise.\n\t(_Node_iterator) [_Node_iterator, operator*, operator->, operator++]:\n\tLikewise.\n\t(_Node_const_iterator) [_Node_const_iterator, operator*, operator->,\n\toperator++]: Likewise.\n\t* include/debug/safe_iterator.h (_Safe_iterator) [_Safe_iterator,\n\toperator=, operator*, operator->, operator++, operator--, operator[],\n\toperator+=, operator+, operator-=, operator-, base, operator _Iterator]:\n\tLikewise.\n\t(operator==(const _Safe_iterator&, const _Safe_iterator&),\n\toperator!=(const _Safe_iterator&, const _Safe_iterator&),\n\toperator<(const _Safe_iterator&, const _Safe_iterator&),\n\toperator<=(const _Safe_iterator&, const _Safe_iterator&),\n\toperator>(const _Safe_iterator&, const _Safe_iterator&),\n\toperator>=(const _Safe_iterator&, const _Safe_iterator&),\n\toperator-(const _Safe_iterator&, const _Safe_iterator&),\n\toperator+(difference_type, const _Safe_iterator&)): Likewise.\n\t* include/profile/iterator_tracker.h (__iterator_tracker)\n\t[__iterator_tracker, base, operator _Iterator, operator->, operator++,\n\toperator--, operator=, operator*, operator[], operator+=, operator+,\n\toperator-=, operator-]: Likewise.\n\t(operator==(const __iterator_tracker&, const __iterator_tracker&),\n\toperator!=(const __iterator_tracker&, const __iterator_tracker&),\n\toperator<(const __iterator_tracker&, const __iterator_tracker&),\n\toperator<=(const __iterator_tracker&, const __iterator_tracker&),\n\toperator>(const __iterator_tracker&, const __iterator_tracker&),\n\toperator>=(const __iterator_tracker&, const __iterator_tracker&),\n\toperator-(const __iterator_tracker&, const __iterator_tracker&),\n\toperator+(difference_type, const __iterator_tracker&)): Likewise.\n\nFrom-SVN: r202924", "tree": {"sha": "a5d221343e52f69d052714dac7cf2f8977c62245", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5d221343e52f69d052714dac7cf2f8977c62245"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34e6625aa2979795662192c899b13391bf4bdf88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e6625aa2979795662192c899b13391bf4bdf88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34e6625aa2979795662192c899b13391bf4bdf88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e6625aa2979795662192c899b13391bf4bdf88/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7017a7a9f8cc2161c9379e3eaf94ce889315e132", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7017a7a9f8cc2161c9379e3eaf94ce889315e132", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7017a7a9f8cc2161c9379e3eaf94ce889315e132"}], "stats": {"total": 239, "additions": 160, "deletions": 79}, "files": [{"sha": "ae914b969aa81b890fdc83222bb710aadd2894c0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e6625aa2979795662192c899b13391bf4bdf88/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e6625aa2979795662192c899b13391bf4bdf88/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=34e6625aa2979795662192c899b13391bf4bdf88", "patch": "@@ -1,3 +1,49 @@\n+2013-09-25  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR libstdc++/58338\n+\t* include/bits/forward_list.h (_Fwd_list_node_base::_M_transfer_after):\n+\tMark as noexcept.\n+\t(_Fwd_list_iterator) [_Fwd_list_iterator, operator*, operator->,\n+\toperator++, operator==, operator!=, _M_next]: Likewise.\n+\t(_Fwd_list_const_iterator) [_Fwd_list_const_iterator, operator*,\n+\toperator->, operator++, operator==, operator!=, _M_next]: Likewise.\n+\t(operator==(const _Fwd_list_iterator&, const _Fwd_list_const_iterator&),\n+\toperator!=(const _Fwd_list_iterator&, const _Fwd_list_const_iterator&)):\n+\tLikewise.\n+\t* include/bits/hashtable_policy.h (_Hash_node_base::_Hash_node_base,\n+\t_Hash_node::_M_next, _Node_iterator_base::_Node_iterator_base,\n+\t_Node_iterator_base::_M_incr, operator==(const _Node_iterator_base&,\n+\tconst _Node_iterator_base&), operator!=(const _Node_iterator_base&,\n+\tconst _Node_iterator_base&)): Likewise.\n+\t(_Node_iterator) [_Node_iterator, operator*, operator->, operator++]:\n+\tLikewise.\n+\t(_Node_const_iterator) [_Node_const_iterator, operator*, operator->,\n+\toperator++]: Likewise.\n+\t* include/debug/safe_iterator.h (_Safe_iterator) [_Safe_iterator,\n+\toperator=, operator*, operator->, operator++, operator--, operator[],\n+\toperator+=, operator+, operator-=, operator-, base, operator _Iterator]:\n+\tLikewise.\n+\t(operator==(const _Safe_iterator&, const _Safe_iterator&),\n+\toperator!=(const _Safe_iterator&, const _Safe_iterator&),\n+\toperator<(const _Safe_iterator&, const _Safe_iterator&),\n+\toperator<=(const _Safe_iterator&, const _Safe_iterator&),\n+\toperator>(const _Safe_iterator&, const _Safe_iterator&),\n+\toperator>=(const _Safe_iterator&, const _Safe_iterator&),\n+\toperator-(const _Safe_iterator&, const _Safe_iterator&),\n+\toperator+(difference_type, const _Safe_iterator&)): Likewise.\n+\t* include/profile/iterator_tracker.h (__iterator_tracker)\n+\t[__iterator_tracker, base, operator _Iterator, operator->, operator++,\n+\toperator--, operator=, operator*, operator[], operator+=, operator+,\n+\toperator-=, operator-]: Likewise.\n+\t(operator==(const __iterator_tracker&, const __iterator_tracker&),\n+\toperator!=(const __iterator_tracker&, const __iterator_tracker&),\n+\toperator<(const __iterator_tracker&, const __iterator_tracker&),\n+\toperator<=(const __iterator_tracker&, const __iterator_tracker&),\n+\toperator>(const __iterator_tracker&, const __iterator_tracker&),\n+\toperator>=(const __iterator_tracker&, const __iterator_tracker&),\n+\toperator-(const __iterator_tracker&, const __iterator_tracker&),\n+\toperator+(difference_type, const __iterator_tracker&)): Likewise.\n+\n 2013-09-24  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR libstdc++/58338"}, {"sha": "9ac9d22523b8fde95663bcd3b83e03ddb60145f9", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e6625aa2979795662192c899b13391bf4bdf88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e6625aa2979795662192c899b13391bf4bdf88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=34e6625aa2979795662192c899b13391bf4bdf88", "patch": "@@ -58,7 +58,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n     _Fwd_list_node_base*\n     _M_transfer_after(_Fwd_list_node_base* __begin,\n-\t\t      _Fwd_list_node_base* __end)\n+\t\t      _Fwd_list_node_base* __end) noexcept\n     {\n       _Fwd_list_node_base* __keep = __begin->_M_next;\n       if (__end)\n@@ -128,46 +128,46 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef ptrdiff_t                          difference_type;\n       typedef std::forward_iterator_tag          iterator_category;\n \n-      _Fwd_list_iterator()\n+      _Fwd_list_iterator() noexcept\n       : _M_node() { }\n \n       explicit\n-      _Fwd_list_iterator(_Fwd_list_node_base* __n) \n+      _Fwd_list_iterator(_Fwd_list_node_base* __n) noexcept\n       : _M_node(__n) { }\n \n       reference\n-      operator*() const\n+      operator*() const noexcept\n       { return *static_cast<_Node*>(this->_M_node)->_M_valptr(); }\n \n       pointer\n-      operator->() const\n+      operator->() const noexcept\n       { return static_cast<_Node*>(this->_M_node)->_M_valptr(); }\n \n       _Self&\n-      operator++()\n+      operator++() noexcept\n       {\n         _M_node = _M_node->_M_next;\n         return *this;\n       }\n \n       _Self\n-      operator++(int)\n+      operator++(int) noexcept\n       {\n         _Self __tmp(*this);\n         _M_node = _M_node->_M_next;\n         return __tmp;\n       }\n \n       bool\n-      operator==(const _Self& __x) const\n+      operator==(const _Self& __x) const noexcept\n       { return _M_node == __x._M_node; }\n \n       bool\n-      operator!=(const _Self& __x) const\n+      operator!=(const _Self& __x) const noexcept\n       { return _M_node != __x._M_node; }\n \n       _Self\n-      _M_next() const\n+      _M_next() const noexcept\n       {\n         if (_M_node)\n           return _Fwd_list_iterator(_M_node->_M_next);\n@@ -196,49 +196,49 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef ptrdiff_t                          difference_type;\n       typedef std::forward_iterator_tag          iterator_category;\n \n-      _Fwd_list_const_iterator()\n+      _Fwd_list_const_iterator() noexcept\n       : _M_node() { }\n \n       explicit\n-      _Fwd_list_const_iterator(const _Fwd_list_node_base* __n) \n+      _Fwd_list_const_iterator(const _Fwd_list_node_base* __n)  noexcept\n       : _M_node(__n) { }\n \n-      _Fwd_list_const_iterator(const iterator& __iter)\n+      _Fwd_list_const_iterator(const iterator& __iter) noexcept\n       : _M_node(__iter._M_node) { }\n \n       reference\n-      operator*() const\n+      operator*() const noexcept\n       { return *static_cast<_Node*>(this->_M_node)->_M_valptr(); }\n \n       pointer\n-      operator->() const\n+      operator->() const noexcept\n       { return static_cast<_Node*>(this->_M_node)->_M_valptr(); }\n \n       _Self&\n-      operator++()\n+      operator++() noexcept\n       {\n         _M_node = _M_node->_M_next;\n         return *this;\n       }\n \n       _Self\n-      operator++(int)\n+      operator++(int) noexcept\n       {\n         _Self __tmp(*this);\n         _M_node = _M_node->_M_next;\n         return __tmp;\n       }\n \n       bool\n-      operator==(const _Self& __x) const\n+      operator==(const _Self& __x) const noexcept\n       { return _M_node == __x._M_node; }\n \n       bool\n-      operator!=(const _Self& __x) const\n+      operator!=(const _Self& __x) const noexcept\n       { return _M_node != __x._M_node; }\n \n       _Self\n-      _M_next() const\n+      _M_next() const noexcept\n       {\n         if (this->_M_node)\n           return _Fwd_list_const_iterator(_M_node->_M_next);\n@@ -255,7 +255,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Tp>\n     inline bool\n     operator==(const _Fwd_list_iterator<_Tp>& __x,\n-               const _Fwd_list_const_iterator<_Tp>& __y)\n+               const _Fwd_list_const_iterator<_Tp>& __y) noexcept\n     { return __x._M_node == __y._M_node; }\n \n   /**\n@@ -264,7 +264,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Tp>\n     inline bool\n     operator!=(const _Fwd_list_iterator<_Tp>& __x,\n-               const _Fwd_list_const_iterator<_Tp>& __y)\n+               const _Fwd_list_const_iterator<_Tp>& __y) noexcept\n     { return __x._M_node != __y._M_node; }\n \n   /**"}, {"sha": "ed9e9dd870a98479f0298462c9f14d596092b566", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e6625aa2979795662192c899b13391bf4bdf88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e6625aa2979795662192c899b13391bf4bdf88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=34e6625aa2979795662192c899b13391bf4bdf88", "patch": "@@ -230,9 +230,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n     _Hash_node_base* _M_nxt;\n \n-    _Hash_node_base() : _M_nxt() { }\n+    _Hash_node_base() noexcept : _M_nxt() { }\n \n-    _Hash_node_base(_Hash_node_base* __next) : _M_nxt(__next) { }\n+    _Hash_node_base(_Hash_node_base* __next) noexcept : _M_nxt(__next) { }\n   };\n \n   /**\n@@ -281,7 +281,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       std::size_t  _M_hash_code;\n \n       _Hash_node*\n-      _M_next() const { return static_cast<_Hash_node*>(this->_M_nxt); }\n+      _M_next() const noexcept\n+      { return static_cast<_Hash_node*>(this->_M_nxt); }\n     };\n \n   /**\n@@ -293,7 +294,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct _Hash_node<_Value, false> : _Hash_node_value_base<_Value>\n     {\n       _Hash_node*\n-      _M_next() const { return static_cast<_Hash_node*>(this->_M_nxt); }\n+      _M_next() const noexcept\n+      { return static_cast<_Hash_node*>(this->_M_nxt); }\n     };\n \n   /// Base class for node iterators.\n@@ -304,24 +306,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       __node_type*  _M_cur;\n \n-      _Node_iterator_base(__node_type* __p)\n+      _Node_iterator_base(__node_type* __p) noexcept\n       : _M_cur(__p) { }\n \n       void\n-      _M_incr()\n+      _M_incr() noexcept\n       { _M_cur = _M_cur->_M_next(); }\n     };\n \n   template<typename _Value, bool _Cache_hash_code>\n     inline bool\n     operator==(const _Node_iterator_base<_Value, _Cache_hash_code>& __x,\n \t       const _Node_iterator_base<_Value, _Cache_hash_code >& __y)\n+    noexcept\n     { return __x._M_cur == __y._M_cur; }\n \n   template<typename _Value, bool _Cache_hash_code>\n     inline bool\n     operator!=(const _Node_iterator_base<_Value, _Cache_hash_code>& __x,\n \t       const _Node_iterator_base<_Value, _Cache_hash_code>& __y)\n+    noexcept\n     { return __x._M_cur != __y._M_cur; }\n \n   /// Node iterators, used to iterate through all the hashtable.\n@@ -344,30 +348,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using reference = typename std::conditional<__constant_iterators,\n \t\t\t\t\t\t  const _Value&, _Value&>::type;\n \n-      _Node_iterator()\n+      _Node_iterator() noexcept\n       : __base_type(0) { }\n \n       explicit\n-      _Node_iterator(__node_type* __p)\n+      _Node_iterator(__node_type* __p) noexcept\n       : __base_type(__p) { }\n \n       reference\n-      operator*() const\n+      operator*() const noexcept\n       { return this->_M_cur->_M_v(); }\n \n       pointer\n-      operator->() const\n+      operator->() const noexcept\n       { return this->_M_cur->_M_valptr(); }\n \n       _Node_iterator&\n-      operator++()\n+      operator++() noexcept\n       {\n \tthis->_M_incr();\n \treturn *this;\n       }\n \n       _Node_iterator\n-      operator++(int)\n+      operator++(int) noexcept\n       {\n \t_Node_iterator __tmp(*this);\n \tthis->_M_incr();\n@@ -392,34 +396,34 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef const _Value*\t\t\t\tpointer;\n       typedef const _Value&\t\t\t\treference;\n \n-      _Node_const_iterator()\n+      _Node_const_iterator() noexcept\n       : __base_type(0) { }\n \n       explicit\n-      _Node_const_iterator(__node_type* __p)\n+      _Node_const_iterator(__node_type* __p) noexcept\n       : __base_type(__p) { }\n \n       _Node_const_iterator(const _Node_iterator<_Value, __constant_iterators,\n-\t\t\t   __cache>& __x)\n+\t\t\t   __cache>& __x) noexcept\n       : __base_type(__x._M_cur) { }\n \n       reference\n-      operator*() const\n+      operator*() const noexcept\n       { return this->_M_cur->_M_v(); }\n \n       pointer\n-      operator->() const\n+      operator->() const noexcept\n       { return this->_M_cur->_M_valptr(); }\n \n       _Node_const_iterator&\n-      operator++()\n+      operator++() noexcept\n       {\n \tthis->_M_incr();\n \treturn *this;\n       }\n \n       _Node_const_iterator\n-      operator++(int)\n+      operator++(int) noexcept\n       {\n \t_Node_const_iterator __tmp(*this);\n \tthis->_M_incr();"}, {"sha": "d5adefd0ace9550c8c93243ef2cba7830cbaa7ad", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e6625aa2979795662192c899b13391bf4bdf88/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e6625aa2979795662192c899b13391bf4bdf88/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=34e6625aa2979795662192c899b13391bf4bdf88", "patch": "@@ -139,7 +139,7 @@ namespace __gnu_debug\n       typedef typename _Traits::pointer           pointer;\n \n       /// @post the iterator is singular and unattached\n-      _Safe_iterator() : _M_current() { }\n+      _Safe_iterator() _GLIBCXX_NOEXCEPT : _M_current() { }\n \n       /**\n        * @brief Safe iterator construction from an unsafe iterator and\n@@ -149,6 +149,7 @@ namespace __gnu_debug\n        * @post this is not singular\n        */\n       _Safe_iterator(const _Iterator& __i, const _Sequence* __seq)\n+      _GLIBCXX_NOEXCEPT\n       : _Safe_iterator_base(__seq, _M_constant()), _M_current(__i)\n       {\n \t_GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n@@ -159,7 +160,7 @@ namespace __gnu_debug\n       /**\n        * @brief Copy construction.\n        */\n-      _Safe_iterator(const _Safe_iterator& __x)\n+      _Safe_iterator(const _Safe_iterator& __x) _GLIBCXX_NOEXCEPT\n       : _Safe_iterator_base(__x, _M_constant()), _M_current(__x._M_current)\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -176,7 +177,7 @@ namespace __gnu_debug\n        * @brief Move construction.\n        * @post __x is singular and unattached\n        */\n-      _Safe_iterator(_Safe_iterator&& __x) : _M_current()\n+      _Safe_iterator(_Safe_iterator&& __x) noexcept : _M_current()\n       {\n \t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n \t\t\t      || __x._M_current == _Iterator(),\n@@ -198,7 +199,7 @@ namespace __gnu_debug\n           const _Safe_iterator<_MutableIterator,\n           typename __gnu_cxx::__enable_if<(std::__are_same<_MutableIterator,\n                       typename _Sequence::iterator::iterator_type>::__value),\n-                   _Sequence>::__type>& __x)\n+                   _Sequence>::__type>& __x) _GLIBCXX_NOEXCEPT\n \t: _Safe_iterator_base(__x, _M_constant()), _M_current(__x.base())\n         {\n \t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -214,7 +215,7 @@ namespace __gnu_debug\n        * @brief Copy assignment.\n        */\n       _Safe_iterator&\n-      operator=(const _Safe_iterator& __x)\n+      operator=(const _Safe_iterator& __x) _GLIBCXX_NOEXCEPT\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// DR 408. Is vector<reverse_iterator<char*> > forbidden?\n@@ -234,7 +235,7 @@ namespace __gnu_debug\n        * @post __x is singular and unattached\n        */\n       _Safe_iterator&\n-      operator=(_Safe_iterator&& __x)\n+      operator=(_Safe_iterator&& __x) noexcept\n       {\n \t_GLIBCXX_DEBUG_VERIFY(this != &__x,\n \t\t\t      _M_message(__msg_self_move_assign)\n@@ -257,7 +258,7 @@ namespace __gnu_debug\n        *  @pre iterator is dereferenceable\n        */\n       reference\n-      operator*() const\n+      operator*() const _GLIBCXX_NOEXCEPT\n       {\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_dereferenceable(),\n \t\t\t      _M_message(__msg_bad_deref)\n@@ -271,7 +272,7 @@ namespace __gnu_debug\n        *  @todo Make this correct w.r.t. iterators that return proxies\n        */\n       pointer\n-      operator->() const\n+      operator->() const _GLIBCXX_NOEXCEPT\n       {\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_dereferenceable(),\n \t\t\t      _M_message(__msg_bad_deref)\n@@ -285,7 +286,7 @@ namespace __gnu_debug\n        *  @pre iterator is incrementable\n        */\n       _Safe_iterator&\n-      operator++()\n+      operator++() _GLIBCXX_NOEXCEPT\n       {\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_incrementable(),\n \t\t\t      _M_message(__msg_bad_inc)\n@@ -299,7 +300,7 @@ namespace __gnu_debug\n        *  @pre iterator is incrementable\n        */\n       _Safe_iterator\n-      operator++(int)\n+      operator++(int) _GLIBCXX_NOEXCEPT\n       {\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_incrementable(),\n \t\t\t      _M_message(__msg_bad_inc)\n@@ -315,7 +316,7 @@ namespace __gnu_debug\n        *  @pre iterator is decrementable\n        */\n       _Safe_iterator&\n-      operator--()\n+      operator--() _GLIBCXX_NOEXCEPT\n       {\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_decrementable(),\n \t\t\t      _M_message(__msg_bad_dec)\n@@ -329,7 +330,7 @@ namespace __gnu_debug\n        *  @pre iterator is decrementable\n        */\n       _Safe_iterator\n-      operator--(int)\n+      operator--(int) _GLIBCXX_NOEXCEPT\n       {\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_decrementable(),\n \t\t\t      _M_message(__msg_bad_dec)\n@@ -341,7 +342,7 @@ namespace __gnu_debug\n \n       // ------ Random access iterator requirements ------\n       reference\n-      operator[](const difference_type& __n) const\n+      operator[](const difference_type& __n) const _GLIBCXX_NOEXCEPT\n       {\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(__n)\n \t\t\t      && this->_M_can_advance(__n+1),\n@@ -352,7 +353,7 @@ namespace __gnu_debug\n       }\n \n       _Safe_iterator&\n-      operator+=(const difference_type& __n)\n+      operator+=(const difference_type& __n) _GLIBCXX_NOEXCEPT\n       {\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(__n),\n \t\t\t      _M_message(__msg_advance_oob)\n@@ -362,15 +363,15 @@ namespace __gnu_debug\n       }\n \n       _Safe_iterator\n-      operator+(const difference_type& __n) const\n+      operator+(const difference_type& __n) const _GLIBCXX_NOEXCEPT\n       {\n \t_Safe_iterator __tmp(*this);\n \t__tmp += __n;\n \treturn __tmp;\n       }\n \n       _Safe_iterator&\n-      operator-=(const difference_type& __n)\n+      operator-=(const difference_type& __n) _GLIBCXX_NOEXCEPT\n       {\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_can_advance(-__n),\n \t\t\t      _M_message(__msg_retreat_oob)\n@@ -380,7 +381,7 @@ namespace __gnu_debug\n       }\n \n       _Safe_iterator\n-      operator-(const difference_type& __n) const\n+      operator-(const difference_type& __n) const _GLIBCXX_NOEXCEPT\n       {\n \t_Safe_iterator __tmp(*this);\n \t__tmp -= __n;\n@@ -392,13 +393,13 @@ namespace __gnu_debug\n        * @brief Return the underlying iterator\n        */\n       _Iterator\n-      base() const { return _M_current; }\n+      base() const _GLIBCXX_NOEXCEPT { return _M_current; }\n \n       /**\n        * @brief Conversion to underlying non-debug iterator to allow\n        * better interaction with non-debug containers.\n        */\n-      operator _Iterator() const { return _M_current; }\n+      operator _Iterator() const _GLIBCXX_NOEXCEPT { return _M_current; }\n \n       /** Attach iterator to the given sequence. */\n       void\n@@ -482,6 +483,7 @@ namespace __gnu_debug\n     inline bool\n     operator==(const _Safe_iterator<_IteratorL, _Sequence>& __lhs,\n \t       const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_compare_bad)\n@@ -498,6 +500,7 @@ namespace __gnu_debug\n     inline bool\n     operator==(const _Safe_iterator<_Iterator, _Sequence>& __lhs,\n                const _Safe_iterator<_Iterator, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_compare_bad)\n@@ -514,6 +517,7 @@ namespace __gnu_debug\n     inline bool\n     operator!=(const _Safe_iterator<_IteratorL, _Sequence>& __lhs,\n \t       const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_compare_bad)\n@@ -530,6 +534,7 @@ namespace __gnu_debug\n     inline bool\n     operator!=(const _Safe_iterator<_Iterator, _Sequence>& __lhs,\n                const _Safe_iterator<_Iterator, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_compare_bad)\n@@ -546,6 +551,7 @@ namespace __gnu_debug\n     inline bool\n     operator<(const _Safe_iterator<_IteratorL, _Sequence>& __lhs,\n \t      const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_order_bad)\n@@ -562,6 +568,7 @@ namespace __gnu_debug\n     inline bool\n     operator<(const _Safe_iterator<_Iterator, _Sequence>& __lhs,\n \t      const _Safe_iterator<_Iterator, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_order_bad)\n@@ -578,6 +585,7 @@ namespace __gnu_debug\n     inline bool\n     operator<=(const _Safe_iterator<_IteratorL, _Sequence>& __lhs,\n \t       const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_order_bad)\n@@ -594,6 +602,7 @@ namespace __gnu_debug\n     inline bool\n     operator<=(const _Safe_iterator<_Iterator, _Sequence>& __lhs,\n                const _Safe_iterator<_Iterator, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_order_bad)\n@@ -610,6 +619,7 @@ namespace __gnu_debug\n     inline bool\n     operator>(const _Safe_iterator<_IteratorL, _Sequence>& __lhs,\n \t      const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_order_bad)\n@@ -626,6 +636,7 @@ namespace __gnu_debug\n     inline bool\n     operator>(const _Safe_iterator<_Iterator, _Sequence>& __lhs,\n \t      const _Safe_iterator<_Iterator, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_order_bad)\n@@ -642,6 +653,7 @@ namespace __gnu_debug\n     inline bool\n     operator>=(const _Safe_iterator<_IteratorL, _Sequence>& __lhs,\n \t       const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_order_bad)\n@@ -658,6 +670,7 @@ namespace __gnu_debug\n     inline bool\n     operator>=(const _Safe_iterator<_Iterator, _Sequence>& __lhs,\n                const _Safe_iterator<_Iterator, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_iter_order_bad)\n@@ -678,6 +691,7 @@ namespace __gnu_debug\n     inline typename _Safe_iterator<_IteratorL, _Sequence>::difference_type\n     operator-(const _Safe_iterator<_IteratorL, _Sequence>& __lhs,\n \t      const _Safe_iterator<_IteratorR, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     {\n       _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t    _M_message(__msg_distance_bad)\n@@ -694,6 +708,7 @@ namespace __gnu_debug\n      inline typename _Safe_iterator<_Iterator, _Sequence>::difference_type\n      operator-(const _Safe_iterator<_Iterator, _Sequence>& __lhs,\n \t       const _Safe_iterator<_Iterator, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n      {\n        _GLIBCXX_DEBUG_VERIFY(! __lhs._M_singular() && ! __rhs._M_singular(),\n \t\t\t     _M_message(__msg_distance_bad)\n@@ -709,7 +724,7 @@ namespace __gnu_debug\n   template<typename _Iterator, typename _Sequence>\n     inline _Safe_iterator<_Iterator, _Sequence>\n     operator+(typename _Safe_iterator<_Iterator,_Sequence>::difference_type __n,\n-\t      const _Safe_iterator<_Iterator, _Sequence>& __i)\n+\t      const _Safe_iterator<_Iterator, _Sequence>& __i) _GLIBCXX_NOEXCEPT\n     { return __i + __n; }\n } // namespace __gnu_debug\n "}, {"sha": "c016f20db8ba83ef25f21769d91ffbedcebce503", "filename": "libstdc++-v3/include/profile/iterator_tracker.h", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e6625aa2979795662192c899b13391bf4bdf88/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fiterator_tracker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e6625aa2979795662192c899b13391bf4bdf88/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fiterator_tracker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fiterator_tracker.h?ref=34e6625aa2979795662192c899b13391bf4bdf88", "patch": "@@ -56,45 +56,46 @@ namespace __profile\n       typedef typename _Traits::reference         reference;\n       typedef typename _Traits::pointer           pointer;\n \n-      __iterator_tracker()\n+      __iterator_tracker() _GLIBCXX_NOEXCEPT\n       : _M_current(), _M_ds(0) { }\n \n-      __iterator_tracker(const _Iterator& __i, const _Sequence* __seq) \n+      __iterator_tracker(const _Iterator& __i, const _Sequence* __seq)\n+      _GLIBCXX_NOEXCEPT\n       : _M_current(__i), _M_ds(__seq) { }\n \n-      __iterator_tracker(const __iterator_tracker& __x) \n+      __iterator_tracker(const __iterator_tracker& __x) _GLIBCXX_NOEXCEPT\n       : _M_current(__x._M_current), _M_ds(__x._M_ds) { }\n \n       template<typename _MutableIterator>\n         __iterator_tracker(const __iterator_tracker<_MutableIterator,\n \t\t\t   typename __gnu_cxx::__enable_if\n \t\t\t   <(std::__are_same<_MutableIterator, typename\n \t\t\t     _Sequence::iterator::_Base_iterator>::__value),\n-\t\t\t   _Sequence>::__type>& __x)\n+\t\t\t   _Sequence>::__type>& __x) _GLIBCXX_NOEXCEPT\n \t:  _M_current(__x.base()), _M_ds(__x._M_get_sequence()) { }\n \n       _Iterator\n-      base() const { return _M_current; }\n+      base() const _GLIBCXX_NOEXCEPT { return _M_current; }\n   \n       /**\n        * @brief Conversion to underlying non-debug iterator to allow\n        * better interaction with non-profile containers.\n        */\n-      operator _Iterator() const { return _M_current; }\n+      operator _Iterator() const _GLIBCXX_NOEXCEPT { return _M_current; }\n \n       pointer\n-      operator->() const { return &*_M_current; }\n+      operator->() const _GLIBCXX_NOEXCEPT { return &*_M_current; }\n \n       __iterator_tracker&\n-      operator++()\n+      operator++() _GLIBCXX_NOEXCEPT\n       {\n \t_M_ds->_M_profile_iterate();\n \t++_M_current;\n \treturn *this;\n       }\n \n       __iterator_tracker\n-      operator++(int)\n+      operator++(int) _GLIBCXX_NOEXCEPT\n       {\n \t_M_ds->_M_profile_iterate();\n \t__iterator_tracker __tmp(*this);\n@@ -103,15 +104,15 @@ namespace __profile\n       }\n \n       __iterator_tracker&\n-      operator--()\n+      operator--() _GLIBCXX_NOEXCEPT\n       {\n \t_M_ds->_M_profile_iterate(1);\n \t--_M_current;\n \treturn *this;\n       }\n \n       __iterator_tracker\n-      operator--(int)\n+      operator--(int) _GLIBCXX_NOEXCEPT\n       {\n \t_M_ds->_M_profile_iterate(1);\n \t__iterator_tracker __tmp(*this);\n@@ -120,45 +121,45 @@ namespace __profile\n       }\n \n       __iterator_tracker&\n-      operator=(const __iterator_tracker& __x)\n+      operator=(const __iterator_tracker& __x) _GLIBCXX_NOEXCEPT\n       {\n \t_M_current = __x._M_current;\n \treturn *this;\n       }\n \n       reference\n-      operator*() const\n+      operator*() const _GLIBCXX_NOEXCEPT\n       { return *_M_current; }\n \n       // ------ Random access iterator requirements ------\n       reference\n-      operator[](const difference_type& __n) const \n+      operator[](const difference_type& __n) const  _GLIBCXX_NOEXCEPT\n       { return _M_current[__n]; }\n \n       __iterator_tracker&\n-      operator+=(const difference_type& __n)\n+      operator+=(const difference_type& __n) _GLIBCXX_NOEXCEPT\n       {\n \t_M_current += __n;\n \treturn *this;\n       }\n \n       __iterator_tracker\n-      operator+(const difference_type& __n) const\n+      operator+(const difference_type& __n) const _GLIBCXX_NOEXCEPT\n       {\n \t__iterator_tracker __tmp(*this);\n \t__tmp += __n;\n \treturn __tmp;\n       }\n \n       __iterator_tracker&\n-      operator-=(const difference_type& __n)\n+      operator-=(const difference_type& __n) _GLIBCXX_NOEXCEPT\n       {\n \t_M_current += -__n;\n \treturn *this;\n       }\n \n       __iterator_tracker\n-      operator-(const difference_type& __n) const\n+      operator-(const difference_type& __n) const _GLIBCXX_NOEXCEPT\n       {\n \t__iterator_tracker __tmp(*this);\n \t__tmp -= __n;\n@@ -178,72 +179,84 @@ namespace __profile\n     inline bool\n     operator==(const __iterator_tracker<_IteratorL, _Sequence>& __lhs,\n \t       const __iterator_tracker<_IteratorR, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() == __rhs.base(); }\n \n   template<typename _Iterator, typename _Sequence>\n     inline bool\n     operator==(const __iterator_tracker<_Iterator, _Sequence>& __lhs,\n \t       const __iterator_tracker<_Iterator, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() == __rhs.base(); }\n \n   template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n     inline bool\n     operator!=(const __iterator_tracker<_IteratorL, _Sequence>& __lhs,\n \t       const __iterator_tracker<_IteratorR, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() != __rhs.base(); }\n \n   template<typename _Iterator, typename _Sequence>\n     inline bool\n     operator!=(const __iterator_tracker<_Iterator, _Sequence>& __lhs,\n                const __iterator_tracker<_Iterator, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() != __rhs.base(); }\n \n   template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n     inline bool\n     operator<(const __iterator_tracker<_IteratorL, _Sequence>& __lhs,\n \t      const __iterator_tracker<_IteratorR, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() < __rhs.base(); }\n \n   template<typename _Iterator, typename _Sequence>\n     inline bool\n     operator<(const __iterator_tracker<_Iterator, _Sequence>& __lhs,\n \t      const __iterator_tracker<_Iterator, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() < __rhs.base(); }\n \n   template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n     inline bool\n     operator<=(const __iterator_tracker<_IteratorL, _Sequence>& __lhs,\n \t       const __iterator_tracker<_IteratorR, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() <= __rhs.base(); }\n \n   template<typename _Iterator, typename _Sequence>\n     inline bool\n     operator<=(const __iterator_tracker<_Iterator, _Sequence>& __lhs,\n \t       const __iterator_tracker<_Iterator, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() <= __rhs.base(); }\n \n   template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n     inline bool\n     operator>(const __iterator_tracker<_IteratorL, _Sequence>& __lhs,\n \t      const __iterator_tracker<_IteratorR, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() > __rhs.base(); }\n \n   template<typename _Iterator, typename _Sequence>\n     inline bool\n     operator>(const __iterator_tracker<_Iterator, _Sequence>& __lhs,\n \t      const __iterator_tracker<_Iterator, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() > __rhs.base(); }\n \n   template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n     inline bool\n     operator>=(const __iterator_tracker<_IteratorL, _Sequence>& __lhs,\n \t       const __iterator_tracker<_IteratorR, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() >= __rhs.base(); }\n \n   template<typename _Iterator, typename _Sequence>\n     inline bool\n     operator>=(const __iterator_tracker<_Iterator, _Sequence>& __lhs,\n \t       const __iterator_tracker<_Iterator, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() >= __rhs.base(); }\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -254,19 +267,22 @@ namespace __profile\n     inline typename __iterator_tracker<_IteratorL, _Sequence>::difference_type\n     operator-(const __iterator_tracker<_IteratorL, _Sequence>& __lhs,\n \t      const __iterator_tracker<_IteratorR, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() - __rhs.base(); }\n \n   template<typename _Iterator, typename _Sequence>\n     inline typename __iterator_tracker<_Iterator, _Sequence>::difference_type\n     operator-(const __iterator_tracker<_Iterator, _Sequence>& __lhs,\n \t      const __iterator_tracker<_Iterator, _Sequence>& __rhs)\n+    _GLIBCXX_NOEXCEPT\n     { return __lhs.base() - __rhs.base(); }\n \n   template<typename _Iterator, typename _Sequence>\n     inline __iterator_tracker<_Iterator, _Sequence>\n     operator+(typename __iterator_tracker<_Iterator,_Sequence>::difference_type\n \t      __n,\n \t      const __iterator_tracker<_Iterator, _Sequence>& __i)\n+    _GLIBCXX_NOEXCEPT\n     { return __i + __n; }\n \t\n }  // namespace __profile"}]}