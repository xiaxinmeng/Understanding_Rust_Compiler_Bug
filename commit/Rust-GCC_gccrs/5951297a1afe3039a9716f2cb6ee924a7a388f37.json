{"sha": "5951297a1afe3039a9716f2cb6ee924a7a388f37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk1MTI5N2ExYWZlMzAzOWE5NzE2ZjJjYjZlZTkyNGE3YTM4OGYzNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-07-08T20:02:29Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-07-08T20:02:29Z"}, "message": "re PR middle-end/44843 (All 32-bit fortran execution tests generate unaligned access)\n\n\tPR middle-end/44843\n\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Do not rely on the\n\tpointed-to type of the offset in a MEM_REF to compute the alignment.\n\nFrom-SVN: r161974", "tree": {"sha": "8561750a6a97c6dd5d05bb878f503d6f22c85867", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8561750a6a97c6dd5d05bb878f503d6f22c85867"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5951297a1afe3039a9716f2cb6ee924a7a388f37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5951297a1afe3039a9716f2cb6ee924a7a388f37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5951297a1afe3039a9716f2cb6ee924a7a388f37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5951297a1afe3039a9716f2cb6ee924a7a388f37/comments", "author": null, "committer": null, "parents": [{"sha": "5653ef60cbffdbca50d277f61612665c60d0e66d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5653ef60cbffdbca50d277f61612665c60d0e66d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5653ef60cbffdbca50d277f61612665c60d0e66d"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "c9c5fc90b3da3475d8865365df29df1f9ab39431", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5951297a1afe3039a9716f2cb6ee924a7a388f37/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5951297a1afe3039a9716f2cb6ee924a7a388f37/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5951297a1afe3039a9716f2cb6ee924a7a388f37", "patch": "@@ -1,3 +1,9 @@\n+2010-07-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/44843\n+\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Do not rely on the\n+\tpointed-to type of the offset in a MEM_REF to compute the alignment.\n+\n 2010-07-08  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* final.c (final_scan_insn): Replace"}, {"sha": "da7677a85b7e9687765b7787029a74153823a0eb", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5951297a1afe3039a9716f2cb6ee924a7a388f37/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5951297a1afe3039a9716f2cb6ee924a7a388f37/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=5951297a1afe3039a9716f2cb6ee924a7a388f37", "patch": "@@ -1634,10 +1634,9 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n #endif\n \t}\n       else\n-\t/* This technically isn't correct.  We can't really derive\n-\t   alignment information from types.  */\n-\talign = MAX (align,\n-\t\t     TYPE_ALIGN (TREE_TYPE (TREE_TYPE (TREE_OPERAND (t, 1)))));\n+\t/* ??? This isn't fully correct, we can't set the alignment from the\n+\t   type in all cases.  */\n+\talign = MAX (align, TYPE_ALIGN (type));\n \n       if (!integer_zerop (TREE_OPERAND (t, 1)) && aoff < align)\n \talign = aoff;"}, {"sha": "4fe71948218e8e61b7597509e03d53fadcc5285c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5951297a1afe3039a9716f2cb6ee924a7a388f37/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5951297a1afe3039a9716f2cb6ee924a7a388f37/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5951297a1afe3039a9716f2cb6ee924a7a388f37", "patch": "@@ -1,3 +1,7 @@\n+2010-07-08  Mikael Pettersson  <mikpe@it.uu.se>\n+\n+\t* gcc.c-torture/execute/20100708-1.c: New test.\n+\n 2010-07-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/44847"}, {"sha": "590a94a70b7c6c71ef1b02275a76f1364688ac26", "filename": "gcc/testsuite/gcc.c-torture/execute/20100708-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5951297a1afe3039a9716f2cb6ee924a7a388f37/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20100708-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5951297a1afe3039a9716f2cb6ee924a7a388f37/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20100708-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20100708-1.c?ref=5951297a1afe3039a9716f2cb6ee924a7a388f37", "patch": "@@ -0,0 +1,29 @@\n+/* PR middle-end/44843 */\n+/* Verify that we don't use the alignment of struct S for inner accesses.  */\n+\n+struct S\n+{\n+  double for_alignment;\n+  struct { int x, y, z; } a[16];\n+};\n+\n+void f(struct S *s) __attribute__((noinline));\n+\n+void f(struct S *s)\n+{\n+  unsigned int i;\n+\n+  for (i = 0; i < 16; ++i)\n+    {\n+      s->a[i].x = 0;\n+      s->a[i].y = 0;\n+      s->a[i].z = 0;\n+    }\n+}\n+\n+int main (void)\n+{\n+  struct S s;\n+  f (&s);\n+  return 0;\n+}"}]}