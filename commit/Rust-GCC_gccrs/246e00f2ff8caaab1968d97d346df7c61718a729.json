{"sha": "246e00f2ff8caaab1968d97d346df7c61718a729", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ2ZTAwZjJmZjhjYWFhYjE5NjhkOTdkMzQ2ZGY3YzYxNzE4YTcyOQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-17T22:51:25Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-17T22:51:25Z"}, "message": "(simplify_set): Move call to make_field_assignment to end; if SRC or DEST is a (clobber (const_int 0)), return it.\n\n(simplify_set): Move call to make_field_assignment to end; if SRC or DEST is\na (clobber (const_int 0)), return it.\n(force_to_mode): If X is a CALL, just return it.\n\nFrom-SVN: r7323", "tree": {"sha": "bd731c848638c855f5de249b95316c4411ee082e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd731c848638c855f5de249b95316c4411ee082e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/246e00f2ff8caaab1968d97d346df7c61718a729", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/246e00f2ff8caaab1968d97d346df7c61718a729", "html_url": "https://github.com/Rust-GCC/gccrs/commit/246e00f2ff8caaab1968d97d346df7c61718a729", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/246e00f2ff8caaab1968d97d346df7c61718a729/comments", "author": null, "committer": null, "parents": [{"sha": "c0d3ac4db65a7c4ada6f1e63f51311cfa04d309b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0d3ac4db65a7c4ada6f1e63f51311cfa04d309b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0d3ac4db65a7c4ada6f1e63f51311cfa04d309b"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "2cd4f07d8c64c8ba51b1dac9bffa22a128c2919d", "filename": "gcc/combine.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/246e00f2ff8caaab1968d97d346df7c61718a729/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/246e00f2ff8caaab1968d97d346df7c61718a729/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=246e00f2ff8caaab1968d97d346df7c61718a729", "patch": "@@ -4196,9 +4196,6 @@ simplify_set (x)\n   if (GET_MODE_CLASS (mode) == MODE_INT)\n     src = force_to_mode (src, mode, GET_MODE_MASK (mode), NULL_RTX, 0);\n \n-  /* Convert this into a field assignment operation, if possible.  */\n-  x = make_field_assignment (x);\n-\n   /* If we are setting CC0 or if the source is a COMPARE, look for the use of\n      the comparison result and try to simplify it unless we already have used\n      undobuf.other_insn.  */\n@@ -4435,7 +4432,15 @@ simplify_set (x)\n     }\n #endif\n \n-  return x;\n+  /* If either SRC or DEST is a CLOBBER of (const_int 0), make this\n+     whole thing fail.  */\n+  if (GET_CODE (src) == CLOBBER && XEXP (src, 0) == const0_rtx)\n+    return src;\n+  else if (GET_CODE (dest) == CLOBBER && XEXP (dest, 0) == const0_rtx)\n+    return dest;\n+  else\n+    /* Convert this into a field assignment operation, if possible.  */\n+    return make_field_assignment (x);\n }\n \f\n /* Simplify, X, and AND, IOR, or XOR operation, and return the simplified\n@@ -5632,6 +5637,11 @@ force_to_mode (x, mode, mask, reg, just_select)\n   unsigned HOST_WIDE_INT fuller_mask, nonzero;\n   rtx op0, op1, temp;\n \n+  /* If this is a CALL, don't do anything.  Some of the code below\n+     will do the wrong thing since the mode of a CALL is VOIDmode.  */\n+  if (code == CALL)\n+    return x;\n+\n   /* We want to perform the operation is its present mode unless we know\n      that the operation is valid in MODE, in which case we do the operation\n      in MODE.  */"}]}