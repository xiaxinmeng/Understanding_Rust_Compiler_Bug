{"sha": "a35da91ff29d52b54f6238c6437dafd799abfd51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM1ZGE5MWZmMjlkNTJiNTRmNjIzOGM2NDM3ZGFmZDc5OWFiZmQ1MQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2005-03-09T17:30:11Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-03-09T17:30:11Z"}, "message": "builtins.c (fold_builtin_unordered_cmp): Change prototype to take a fndecl and an arglist instead of a CALL_EXPR, exp.\n\n\n\t* builtins.c (fold_builtin_unordered_cmp): Change prototype to take\n\ta fndecl and an arglist instead of a CALL_EXPR, exp.\n\nFrom-SVN: r96196", "tree": {"sha": "667d6df60b505f9768fb79b4516f9e6ad57e1c9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/667d6df60b505f9768fb79b4516f9e6ad57e1c9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a35da91ff29d52b54f6238c6437dafd799abfd51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a35da91ff29d52b54f6238c6437dafd799abfd51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a35da91ff29d52b54f6238c6437dafd799abfd51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a35da91ff29d52b54f6238c6437dafd799abfd51/comments", "author": null, "committer": null, "parents": [{"sha": "a2fee3d5285d0b2bbb7f49079187fe9e69cd1b05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2fee3d5285d0b2bbb7f49079187fe9e69cd1b05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2fee3d5285d0b2bbb7f49079187fe9e69cd1b05"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "99567ed01c2632b12f4ac43d490fd72a0ee5a334", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a35da91ff29d52b54f6238c6437dafd799abfd51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a35da91ff29d52b54f6238c6437dafd799abfd51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a35da91ff29d52b54f6238c6437dafd799abfd51", "patch": "@@ -1,3 +1,8 @@\n+2005-03-09  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.c (fold_builtin_unordered_cmp): Change prototype to take\n+\ta fndecl and an arglist instead of a CALL_EXPR, exp.\n+\n 2005-03-09  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* cfglayout.c (fixup_reorder_chain): Remove old_bb."}, {"sha": "5d9aa77f4e7121e8a54d5fe9f8f4a251dbc6834e", "filename": "gcc/builtins.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a35da91ff29d52b54f6238c6437dafd799abfd51/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a35da91ff29d52b54f6238c6437dafd799abfd51/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=a35da91ff29d52b54f6238c6437dafd799abfd51", "patch": "@@ -176,7 +176,8 @@ static tree fold_builtin_toascii (tree);\n static tree fold_builtin_isdigit (tree);\n static tree fold_builtin_fabs (tree, tree);\n static tree fold_builtin_abs (tree, tree);\n-static tree fold_builtin_unordered_cmp (tree, enum tree_code, enum tree_code);\n+static tree fold_builtin_unordered_cmp (tree, tree, enum tree_code,\n+\t\t\t\t\tenum tree_code);\n static tree fold_builtin_1 (tree, bool);\n \n static tree fold_builtin_strpbrk (tree, tree);\n@@ -7766,19 +7767,18 @@ fold_builtin_classify (tree exp, int builtin_index)\n }\n \n /* Fold a call to an unordered comparison function such as\n-   __builtin_isgreater().  EXP is the CALL_EXPR for the call.\n+   __builtin_isgreater().  FNDECL is the FUNCTION_DECL for the function\n+   being called and ARGLIST is the argument list for the call.\n    UNORDERED_CODE and ORDERED_CODE are comparison codes that give\n    the opposite of the desired result.  UNORDERED_CODE is used\n    for modes that can hold NaNs and ORDERED_CODE is used for\n    the rest.  */\n \n static tree\n-fold_builtin_unordered_cmp (tree exp,\n+fold_builtin_unordered_cmp (tree fndecl, tree arglist,\n \t\t\t    enum tree_code unordered_code,\n \t\t\t    enum tree_code ordered_code)\n {\n-  tree fndecl = get_callee_fndecl (exp);\n-  tree arglist = TREE_OPERAND (exp, 1);\n   tree type = TREE_TYPE (TREE_TYPE (fndecl));\n   enum tree_code code;\n   tree arg0, arg1;\n@@ -8211,17 +8211,18 @@ fold_builtin_1 (tree exp, bool ignore)\n       return fold_builtin_classify (exp, BUILT_IN_ISNAN);\n \n     case BUILT_IN_ISGREATER:\n-      return fold_builtin_unordered_cmp (exp, UNLE_EXPR, LE_EXPR);\n+      return fold_builtin_unordered_cmp (fndecl, arglist, UNLE_EXPR, LE_EXPR);\n     case BUILT_IN_ISGREATEREQUAL:\n-      return fold_builtin_unordered_cmp (exp, UNLT_EXPR, LT_EXPR);\n+      return fold_builtin_unordered_cmp (fndecl, arglist, UNLT_EXPR, LT_EXPR);\n     case BUILT_IN_ISLESS:\n-      return fold_builtin_unordered_cmp (exp, UNGE_EXPR, GE_EXPR);\n+      return fold_builtin_unordered_cmp (fndecl, arglist, UNGE_EXPR, GE_EXPR);\n     case BUILT_IN_ISLESSEQUAL:\n-      return fold_builtin_unordered_cmp (exp, UNGT_EXPR, GT_EXPR);\n+      return fold_builtin_unordered_cmp (fndecl, arglist, UNGT_EXPR, GT_EXPR);\n     case BUILT_IN_ISLESSGREATER:\n-      return fold_builtin_unordered_cmp (exp, UNEQ_EXPR, EQ_EXPR);\n+      return fold_builtin_unordered_cmp (fndecl, arglist, UNEQ_EXPR, EQ_EXPR);\n     case BUILT_IN_ISUNORDERED:\n-      return fold_builtin_unordered_cmp (exp, UNORDERED_EXPR, NOP_EXPR);\n+      return fold_builtin_unordered_cmp (fndecl, arglist, UNORDERED_EXPR,\n+\t\t\t\t\t NOP_EXPR);\n \n       /* We do the folding for va_start in the expander.  */\n     case BUILT_IN_VA_START:"}]}