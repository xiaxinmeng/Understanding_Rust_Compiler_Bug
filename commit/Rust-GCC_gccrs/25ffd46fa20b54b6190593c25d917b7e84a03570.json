{"sha": "25ffd46fa20b54b6190593c25d917b7e84a03570", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVmZmQ0NmZhMjBiNTRiNjE5MDU5M2MyNWQ5MTdiN2U4NGEwMzU3MA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-12-15T23:25:36Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-12-15T23:25:36Z"}, "message": "re PR fortran/55638 (Wrongly accepts INTENT + VALUE - and wrongly requires it for PURE)\n\n2012-12-16  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/55638\n        * resolve.c (resolve_formal_arglist): Allow VALUE without\n        INTENT for ELEMENTAL procedures.\n\n2012-12-16  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/55638\n        * gfortran.dg/elemental_args_check_3.f90: Update dg-error.\n        * gfortran.dg/elemental_args_check_7.f90: New.\n\nFrom-SVN: r194525", "tree": {"sha": "a108d8774c3205b324a55d0ae3a96c25f330a937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a108d8774c3205b324a55d0ae3a96c25f330a937"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25ffd46fa20b54b6190593c25d917b7e84a03570", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25ffd46fa20b54b6190593c25d917b7e84a03570", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25ffd46fa20b54b6190593c25d917b7e84a03570", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25ffd46fa20b54b6190593c25d917b7e84a03570/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "25293279b2461d483999e3ffd9b1a1401d5dc64d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25293279b2461d483999e3ffd9b1a1401d5dc64d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25293279b2461d483999e3ffd9b1a1401d5dc64d"}], "stats": {"total": 50, "additions": 45, "deletions": 5}, "files": [{"sha": "8efe003240fd60999c4bf859f2b204d6e220e6ad", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ffd46fa20b54b6190593c25d917b7e84a03570/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ffd46fa20b54b6190593c25d917b7e84a03570/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=25ffd46fa20b54b6190593c25d917b7e84a03570", "patch": "@@ -1,12 +1,18 @@\n+2012-12-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/55638\n+\t* resolve.c (resolve_formal_arglist): Allow VALUE without\n+\tINTENT for ELEMENTAL procedures.\n+\n 2012-12-10  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/52909\n \t* trans-decl.c (get_proc_pointer_decl): Apply name mangling.\n \n 2012-12-09  Tobias Burnus  <burnus@net-b.de>\n \n-\t* trans-array.c (gfc_deallocate_scalar_with_status): Use\n-\tNULL_TREE in the call to gfc_deallocate_scalar_with_status.\n+\t* trans-array.c (structure_alloc_comps): Use NULL_TREE in the\n+\tcall to gfc_deallocate_scalar_with_status.\n \t* trans-decl.c (gfc_trans_deferred_vars): Pass symbol.\n \t* trans-stmt.c (gfc_trans_deallocate): Pass polymorphic variable.\n "}, {"sha": "d4d5eb9b52d6c0ba357f499fe4100ba171a17080", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ffd46fa20b54b6190593c25d917b7e84a03570/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ffd46fa20b54b6190593c25d917b7e84a03570/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=25ffd46fa20b54b6190593c25d917b7e84a03570", "patch": "@@ -488,10 +488,12 @@ resolve_formal_arglist (gfc_symbol *proc)\n \t      continue;\n \t    }\n \n-\t  if (sym->attr.intent == INTENT_UNKNOWN)\n+\t  /* Fortran 2008 Corrigendum 1, C1290a.  */\n+\t  if (sym->attr.intent == INTENT_UNKNOWN && !sym->attr.value)\n \t    {\n \t      gfc_error (\"Argument '%s' of elemental procedure '%s' at %L must \"\n-\t\t\t \"have its INTENT specified\", sym->name, proc->name,\n+\t\t\t \"have its INTENT specified or have the VALUE \"\n+\t\t\t \"attribute\", sym->name, proc->name,\n \t\t\t &sym->declared_at);\n \t      continue;\n \t    }"}, {"sha": "342a1a1495744c14929c15270849248374d580f5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ffd46fa20b54b6190593c25d917b7e84a03570/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ffd46fa20b54b6190593c25d917b7e84a03570/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=25ffd46fa20b54b6190593c25d917b7e84a03570", "patch": "@@ -1,3 +1,9 @@\n+2012-12-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/55638\n+\t* gfortran.dg/elemental_args_check_3.f90: Update dg-error.\n+\t* gfortran.dg/elemental_args_check_7.f90: New.\n+\n 2012-12-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* lib/scanasm.exp (get_ada_spec_filename): Use procedural form."}, {"sha": "8d63874579477023862e94fae3e3ad6cc0f6d790", "filename": "gcc/testsuite/gfortran.dg/elemental_args_check_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ffd46fa20b54b6190593c25d917b7e84a03570/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_args_check_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ffd46fa20b54b6190593c25d917b7e84a03570/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_args_check_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_args_check_3.f90?ref=25ffd46fa20b54b6190593c25d917b7e84a03570", "patch": "@@ -13,7 +13,7 @@ IMPURE ELEMENTAL SUBROUTINE foobar &\n     (a, & ! { dg-error \"must be scalar\" }\n      b, & ! { dg-error \"POINTER attribute\" }\n      c, & ! { dg-error \"ALLOCATABLE attribute\" }\n-     d) ! { dg-error \"INTENT specified\" }\n+     d) ! { dg-error \"must have its INTENT specified or have the VALUE attribute\" }\n     INTEGER, INTENT(IN) :: a(:)\n     INTEGER, POINTER, INTENT(IN) :: b\n     INTEGER, ALLOCATABLE, INTENT(IN) :: c"}, {"sha": "7b5843b950b933179dda28f4725fa3b159e67ccc", "filename": "gcc/testsuite/gfortran.dg/elemental_args_check_7.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25ffd46fa20b54b6190593c25d917b7e84a03570/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_args_check_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25ffd46fa20b54b6190593c25d917b7e84a03570/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_args_check_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_args_check_7.f90?ref=25ffd46fa20b54b6190593c25d917b7e84a03570", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do compile }\n+!\n+! PR fortran/55638\n+!\n+! Additionally, VALUE no INTENT is required (and only \"intent(in)\" allowed)\n+!\n+\n+  elemental subroutine foo(x, y, z)\n+    integer, intent(inout) :: x\n+    integer, VALUE :: y\n+    integer, VALUE, intent(in) :: z\n+    x = y\n+  end subroutine foo\n+\n+  impure elemental subroutine foo2(x, y, z) ! { dg-error \"Argument 'x' of elemental procedure 'foo2' at .1. must have its INTENT specified or have the VALUE attribute\" }\n+    integer :: x \n+    integer, VALUE :: y\n+    integer, VALUE :: z\n+    x = y\n+  end subroutine foo2\n+\n+  subroutine foo3(x, y, z)\n+    integer, VALUE, intent(in) :: x\n+    integer, VALUE, intent(inout) :: y ! { dg-error \"VALUE attribute conflicts with INTENT.INOUT. attribute\" }\n+    integer, VALUE, intent(out) :: z ! { dg-error \"VALUE attribute conflicts with INTENT.OUT. attribute\" }\n+  end subroutine foo3"}]}