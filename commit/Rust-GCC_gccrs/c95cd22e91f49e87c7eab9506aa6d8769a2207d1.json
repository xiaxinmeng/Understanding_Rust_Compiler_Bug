{"sha": "c95cd22e91f49e87c7eab9506aa6d8769a2207d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk1Y2QyMmU5MWY0OWU4N2M3ZWFiOTUwNmFhNmQ4NzY5YTIyMDdkMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.cygnus.com", "date": "1999-11-16T05:58:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-11-16T05:58:53Z"}, "message": "cp-tree.h, decl.c (compute_array_index_type): Make nonstatic.\n\n        * cp-tree.h, decl.c (compute_array_index_type): Make nonstatic.\n        * pt.c (tsubst, case INTEGER_TYPE): Call it.\n        Check uses_template_parms.\n\nFrom-SVN: r30548", "tree": {"sha": "ca6c9cce9e4129906d4a0872614e20d73ac7171c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca6c9cce9e4129906d4a0872614e20d73ac7171c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c95cd22e91f49e87c7eab9506aa6d8769a2207d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c95cd22e91f49e87c7eab9506aa6d8769a2207d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c95cd22e91f49e87c7eab9506aa6d8769a2207d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c95cd22e91f49e87c7eab9506aa6d8769a2207d1/comments", "author": null, "committer": null, "parents": [{"sha": "63408827c4d31b6be3de9026658c5440e19c273b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63408827c4d31b6be3de9026658c5440e19c273b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63408827c4d31b6be3de9026658c5440e19c273b"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "9bdfe91f2cec960edb99f858892c75ebf5e95582", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95cd22e91f49e87c7eab9506aa6d8769a2207d1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95cd22e91f49e87c7eab9506aa6d8769a2207d1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c95cd22e91f49e87c7eab9506aa6d8769a2207d1", "patch": "@@ -1,5 +1,9 @@\n 1999-11-15  Jason Merrill  <jason@casey.cygnus.com>\n \n+\t* cp-tree.h, decl.c (compute_array_index_type): Make nonstatic.\n+\t* pt.c (tsubst, case INTEGER_TYPE): Call it.  \n+\tCheck uses_template_parms.\n+\n \t* class.c (finish_struct): If we're a local class in a template\n \tfunction, add a TAG_DEFN.\n \t* pt.c (lookup_template_class): If this is a local class in a"}, {"sha": "dfa934e6d199da77848cbe7b54dd05e93b5fd839", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95cd22e91f49e87c7eab9506aa6d8769a2207d1/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95cd22e91f49e87c7eab9506aa6d8769a2207d1/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c95cd22e91f49e87c7eab9506aa6d8769a2207d1", "patch": "@@ -3497,8 +3497,9 @@ extern int in_function_p\t\t\tPROTO((void));\n extern void replace_defarg\t\t\tPROTO((tree, tree));\n extern void print_other_binding_stack\t\tPROTO((struct binding_level *));\n extern void revert_static_member_fn             PROTO((tree*, tree*, tree*));\n-extern void fixup_anonymous_aggr               PROTO((tree));\n+extern void fixup_anonymous_aggr                PROTO((tree));\n extern int check_static_variable_definition     PROTO((tree, tree));\n+extern tree compute_array_index_type\t\tPROTO((tree, tree));\n extern void push_local_binding                  PROTO((tree, tree, int));\n extern int push_class_binding                   PROTO((tree, tree));\n extern tree check_default_argument              PROTO((tree, tree));"}, {"sha": "38451dddd1e77907fa121e3d45b439f134d4cf84", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95cd22e91f49e87c7eab9506aa6d8769a2207d1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95cd22e91f49e87c7eab9506aa6d8769a2207d1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c95cd22e91f49e87c7eab9506aa6d8769a2207d1", "patch": "@@ -175,7 +175,6 @@ static void destroy_local_static PROTO((tree));\n static void destroy_local_var PROTO((tree));\n static void finish_constructor_body PROTO((void));\n static void finish_destructor_body PROTO((void));\n-static tree compute_array_index_type PROTO((tree, tree));\n static tree create_array_type_for_decl PROTO((tree, tree, tree));\n \n #if defined (DEBUG_CP_BINDING_LEVELS)\n@@ -7033,7 +7032,9 @@ layout_var_decl (decl)\n      tree decl;\n {\n   tree type = TREE_TYPE (decl);\n+#if 0\n   tree ttype = target_type (type);\n+#endif\n \n   /* If we haven't already layed out this declaration, do so now.\n      Note that we must not call complete type for an external object\n@@ -8679,7 +8680,7 @@ check_static_variable_definition (decl, type)\n    appropriate index type for the array.  If non-NULL, NAME is the\n    name of the thing being declared.  */\n \n-static tree\n+tree\n compute_array_index_type (name, size)\n      tree name;\n      tree size;\n@@ -13469,15 +13470,15 @@ finish_function (lineno, flags)\n     }\n   else\n     {\n+#if 0\n       if (write_symbols != NO_DEBUG /*&& TREE_CODE (fntype) != METHOD_TYPE*/)\n \t{\n-\t  tree ttype = target_type (fntype);\n-\t  tree parmdecl;\n-\n-#if 0\n \t  /* Keep this code around in case we later want to control debug info\n \t     based on whether a type is \"used\".  (jason 1999-11-11) */\n \n+\t  tree ttype = target_type (fntype);\n+\t  tree parmdecl;\n+\n \t  if (IS_AGGR_TYPE (ttype))\n \t    /* Let debugger know it should output info for this type.  */\n \t    note_debug_info_needed (ttype);\n@@ -13489,8 +13490,8 @@ finish_function (lineno, flags)\n \t\t/* Let debugger know it should output info for this type.  */\n \t\tnote_debug_info_needed (ttype);\n \t    }\n-#endif\n \t}\n+#endif\n \n       /* Clean house because we will need to reorder insns here.  */\n       do_pending_stack_adjust ();"}, {"sha": "7e3a8abd088b1f5e02eab5e027747a385c5c7e6e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c95cd22e91f49e87c7eab9506aa6d8769a2207d1/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c95cd22e91f49e87c7eab9506aa6d8769a2207d1/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c95cd22e91f49e87c7eab9506aa6d8769a2207d1", "patch": "@@ -6179,8 +6179,11 @@ tsubst (t, args, complain, in_decl)\n \t    /* When providing explicit arguments to a template\n \t       function, but leaving some arguments for subsequent\n \t       deduction, MAX may be template-dependent even if we're\n-\t       not PROCESSING_TEMPLATE_DECL.  */\n-\t    || TREE_CODE (max) != INTEGER_CST)\n+\t       not PROCESSING_TEMPLATE_DECL.  We still need to check for\n+\t       template parms, though; MAX won't be an INTEGER_CST for\n+\t       dynamic arrays, either.  */\n+\t    || (TREE_CODE (max) != INTEGER_CST\n+\t\t&& uses_template_parms (max)))\n \t  {\n \t    tree itype = make_node (INTEGER_TYPE);\n \t    TYPE_MIN_VALUE (itype) = size_zero_node;\n@@ -6210,8 +6213,7 @@ tsubst (t, args, complain, in_decl)\n \t    return error_mark_node;\n \t  }\n \n-\tmax = fold (build_binary_op (MINUS_EXPR, max, integer_one_node));\n-\treturn build_index_type (max);\n+\treturn compute_array_index_type (NULL_TREE, max);\n       }\n \n     case TEMPLATE_TYPE_PARM:"}]}