{"sha": "b6422b3755f39ebc4f942c5f92bd242aee948539", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY0MjJiMzc1NWYzOWViYzRmOTQyYzVmOTJiZDI0MmFlZTk0ODUzOQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-02T22:23:10Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-02T22:23:10Z"}, "message": "compiler: Compare slice start and end with cap, not len.\n\nFrom-SVN: r183851", "tree": {"sha": "40abcc344adc9a14c3dc1b9b4b79bd518255e2dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40abcc344adc9a14c3dc1b9b4b79bd518255e2dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6422b3755f39ebc4f942c5f92bd242aee948539", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6422b3755f39ebc4f942c5f92bd242aee948539", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6422b3755f39ebc4f942c5f92bd242aee948539", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6422b3755f39ebc4f942c5f92bd242aee948539/comments", "author": null, "committer": null, "parents": [{"sha": "7de7ae1841e599746f1974ac507bb1d51483c47c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7de7ae1841e599746f1974ac507bb1d51483c47c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7de7ae1841e599746f1974ac507bb1d51483c47c"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "f906b2206eaa856c495121f640bac9877111702d", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6422b3755f39ebc4f942c5f92bd242aee948539/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6422b3755f39ebc4f942c5f92bd242aee948539/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=b6422b3755f39ebc4f942c5f92bd242aee948539", "patch": "@@ -10649,11 +10649,28 @@ Array_index_expression::do_get_tree(Translate_context* context)\n \n   if (array_type->length() == NULL && !DECL_P(array_tree))\n     array_tree = save_expr(array_tree);\n-  tree length_tree = array_type->length_tree(gogo, array_tree);\n-  if (length_tree == error_mark_node)\n-    return error_mark_node;\n-  length_tree = save_expr(length_tree);\n-  tree length_type = TREE_TYPE(length_tree);\n+\n+  tree length_tree = NULL_TREE;\n+  if (this->end_ == NULL || this->end_->is_nil_expression())\n+    {\n+      length_tree = array_type->length_tree(gogo, array_tree);\n+      if (length_tree == error_mark_node)\n+\treturn error_mark_node;\n+      length_tree = save_expr(length_tree);\n+    }\n+\n+  tree capacity_tree = NULL_TREE;\n+  if (this->end_ != NULL)\n+    {\n+      capacity_tree = array_type->capacity_tree(gogo, array_tree);\n+      if (capacity_tree == error_mark_node)\n+\treturn error_mark_node;\n+      capacity_tree = save_expr(capacity_tree);\n+    }\n+\n+  tree length_type = (length_tree != NULL_TREE\n+\t\t      ? TREE_TYPE(length_tree)\n+\t\t      : TREE_TYPE(capacity_tree));\n \n   tree bad_index = boolean_false_node;\n \n@@ -10676,7 +10693,9 @@ Array_index_expression::do_get_tree(Translate_context* context)\n \t\t\t\t\t       ? GE_EXPR\n \t\t\t\t\t       : GT_EXPR),\n \t\t\t\t\t      boolean_type_node, start_tree,\n-\t\t\t\t\t      length_tree));\n+\t\t\t\t\t      (this->end_ == NULL\n+\t\t\t\t\t       ? length_tree\n+\t\t\t\t\t       : capacity_tree)));\n \n   int code = (array_type->length() != NULL\n \t      ? (this->end_ == NULL\n@@ -10723,12 +10742,6 @@ Array_index_expression::do_get_tree(Translate_context* context)\n \n   // Array slice.\n \n-  tree capacity_tree = array_type->capacity_tree(gogo, array_tree);\n-  if (capacity_tree == error_mark_node)\n-    return error_mark_node;\n-  capacity_tree = fold_convert_loc(loc.gcc_location(), length_type,\n-                                   capacity_tree);\n-\n   tree end_tree;\n   if (this->end_->is_nil_expression())\n     end_tree = length_tree;\n@@ -10747,7 +10760,6 @@ Array_index_expression::do_get_tree(Translate_context* context)\n \n       end_tree = fold_convert_loc(loc.gcc_location(), length_type, end_tree);\n \n-      capacity_tree = save_expr(capacity_tree);\n       tree bad_end = fold_build2_loc(loc.gcc_location(), TRUTH_OR_EXPR,\n                                      boolean_type_node,\n \t\t\t\t     fold_build2_loc(loc.gcc_location(),"}, {"sha": "0bbe3c5b7cabcbdcac127cb34144628b8f37b08e", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6422b3755f39ebc4f942c5f92bd242aee948539/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6422b3755f39ebc4f942c5f92bd242aee948539/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=b6422b3755f39ebc4f942c5f92bd242aee948539", "patch": "@@ -5416,7 +5416,8 @@ tree\n Array_type::capacity_tree(Gogo* gogo, tree array)\n {\n   if (this->length_ != NULL)\n-    return omit_one_operand(sizetype, this->get_length_tree(gogo), array);\n+    return omit_one_operand(integer_type_node, this->get_length_tree(gogo),\n+\t\t\t    array);\n \n   // This is an open array.  We need to read the capacity field.\n "}]}