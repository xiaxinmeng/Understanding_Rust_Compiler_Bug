{"sha": "1807b72620dcd77c6542552e83b26683a177199d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgwN2I3MjYyMGRjZDc3YzY1NDI1NTJlODNiMjY2ODNhMTc3MTk5ZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-28T22:00:26Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-28T22:00:26Z"}, "message": "h8300.c (WORD_REG_USED): Use HARD_FRAME_POINTER_REGNUM instead of FRAME_POINTER_REGNUM.\n\n\t* config/h8300/h8300.c (WORD_REG_USED): Use\n\tHARD_FRAME_POINTER_REGNUM instead of FRAME_POINTER_REGNUM.\n\t(compute_saved_regs): Likewise.\n\t(h8300_expand_prologue): Likewise.  Allocate locals after\n\tsaving registers.\n\t(h8300_expand_epilogue): Use HARD_FRAME_POINTER_REGNUM instead\n\tof FRAME_POINTER_REGNUM.  Deallocate locals before saving\n\tregisters.\n\t(h8300_initial_elimination_offset): Adjust for the new frame\n\tlayout, which swaps flips the order of locals and saved\n\tregisters.\n\t* config/h8300/h8300.h (FIRST_PSEUDO_REGISTER): Change to 12.\n\t(HARD_FRAME_POINTER_REGNUM): New.\n\t(ELIMINABLE_REGS): Add an elimination rule from\n\tFRAME_POINTER_REGNUM to HARD_FRAME_POINTER_REGNUM.\n\t(REGISTER_NAMES): Add fp.\n\t* config/h8300/h8300.md (FP_REG): Change to 11.\n\t(HFP_REG): New.\n\nFrom-SVN: r76811", "tree": {"sha": "309cd2856bd6e42ad5ca2b6bab7846f65052369d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/309cd2856bd6e42ad5ca2b6bab7846f65052369d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1807b72620dcd77c6542552e83b26683a177199d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1807b72620dcd77c6542552e83b26683a177199d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1807b72620dcd77c6542552e83b26683a177199d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1807b72620dcd77c6542552e83b26683a177199d/comments", "author": null, "committer": null, "parents": [{"sha": "ff4cf05b3d1cbab6af68db369f277bafa58ce139", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff4cf05b3d1cbab6af68db369f277bafa58ce139", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff4cf05b3d1cbab6af68db369f277bafa58ce139"}], "stats": {"total": 135, "additions": 94, "deletions": 41}, "files": [{"sha": "a1a89616a1c6bd3b2f4e202c79f70ed588eddb00", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1807b72620dcd77c6542552e83b26683a177199d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1807b72620dcd77c6542552e83b26683a177199d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1807b72620dcd77c6542552e83b26683a177199d", "patch": "@@ -1,3 +1,24 @@\n+2004-01-28  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.c (WORD_REG_USED): Use\n+\tHARD_FRAME_POINTER_REGNUM instead of FRAME_POINTER_REGNUM.\n+\t(compute_saved_regs): Likewise.\n+\t(h8300_expand_prologue): Likewise.  Allocate locals after\n+\tsaving registers.\n+\t(h8300_expand_epilogue): Use HARD_FRAME_POINTER_REGNUM instead\n+\tof FRAME_POINTER_REGNUM.  Deallocate locals before saving\n+\tregisters.\n+\t(h8300_initial_elimination_offset): Adjust for the new frame\n+\tlayout, which swaps flips the order of locals and saved\n+\tregisters.\n+\t* config/h8300/h8300.h (FIRST_PSEUDO_REGISTER): Change to 12.\n+\t(HARD_FRAME_POINTER_REGNUM): New.\n+\t(ELIMINABLE_REGS): Add an elimination rule from\n+\tFRAME_POINTER_REGNUM to HARD_FRAME_POINTER_REGNUM.\n+\t(REGISTER_NAMES): Add fp.\n+\t* config/h8300/h8300.md (FP_REG): Change to 11.\n+\t(HFP_REG): New.\n+\n 2004-01-28  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* genrecog.c (write_node): Remove a useless local variable."}, {"sha": "177361687435737f2be57e1678531fa0a990d4bc", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 58, "deletions": 31, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1807b72620dcd77c6542552e83b26683a177199d/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1807b72620dcd77c6542552e83b26683a177199d/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=1807b72620dcd77c6542552e83b26683a177199d", "patch": "@@ -351,7 +351,7 @@ byte_reg (rtx x, int b)\n        /* Save any call saved register that was used.  */\t\t\\\n        || (regs_ever_live[regno] && !call_used_regs[regno])\t\t\\\n        /* Save the frame pointer if it was used.  */\t\t\t\\\n-       || (regno == FRAME_POINTER_REGNUM && regs_ever_live[regno])\t\\\n+       || (regno == HARD_FRAME_POINTER_REGNUM && regs_ever_live[regno])\t\\\n        /* Save any register used in an interrupt handler.  */\t\t\\\n        || (h8300_current_function_interrupt_function_p ()\t\t\\\n \t   && regs_ever_live[regno])\t\t\t\t\t\\\n@@ -411,15 +411,15 @@ compute_saved_regs (void)\n   int regno;\n \n   /* Construct a bit vector of registers to be pushed/popped.  */\n-  for (regno = 0; regno <= FRAME_POINTER_REGNUM; regno++)\n+  for (regno = 0; regno <= HARD_FRAME_POINTER_REGNUM; regno++)\n     {\n       if (WORD_REG_USED (regno))\n \tsaved_regs |= 1 << regno;\n     }\n \n   /* Don't push/pop the frame pointer as it is treated separately.  */\n   if (frame_pointer_needed)\n-    saved_regs &= ~(1 << FRAME_POINTER_REGNUM);\n+    saved_regs &= ~(1 << HARD_FRAME_POINTER_REGNUM);\n \n   return saved_regs;\n }\n@@ -501,13 +501,11 @@ h8300_expand_prologue (void)\n   if (frame_pointer_needed)\n     {\n       /* Push fp.  */\n-      push (FRAME_POINTER_REGNUM);\n-      emit_insn (gen_rtx_SET (Pmode, frame_pointer_rtx, stack_pointer_rtx));\n+      push (HARD_FRAME_POINTER_REGNUM);\n+      emit_insn (gen_rtx_SET (Pmode, hard_frame_pointer_rtx,\n+\t\t\t      stack_pointer_rtx));\n     }\n \n-  /* Leave room for locals.  */\n-  h8300_emit_stack_adjustment (-1, round_frame_size (get_frame_size ()));\n-\n   /* Push the rest of the registers in ascending order.  */\n   saved_regs = compute_saved_regs ();\n   for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno += n_regs)\n@@ -556,6 +554,9 @@ h8300_expand_prologue (void)\n \t    }\n \t}\n     }\n+\n+  /* Leave room for locals.  */\n+  h8300_emit_stack_adjustment (-1, round_frame_size (get_frame_size ()));\n }\n \n int\n@@ -581,6 +582,9 @@ h8300_expand_epilogue (void)\n        rts instruction.  */\n     return;\n \n+  /* Deallocate locals.  */\n+  h8300_emit_stack_adjustment (1, round_frame_size (get_frame_size ()));\n+\n   /* Pop the saved registers in descending order.  */\n   saved_regs = compute_saved_regs ();\n   for (regno = FIRST_PSEUDO_REGISTER - 1; regno >= 0; regno -= n_regs)\n@@ -630,12 +634,9 @@ h8300_expand_epilogue (void)\n \t}\n     }\n \n-  /* Deallocate locals.  */\n-  h8300_emit_stack_adjustment (1, round_frame_size (get_frame_size ()));\n-\n   /* Pop frame pointer if we had one.  */\n   if (frame_pointer_needed)\n-    pop (FRAME_POINTER_REGNUM);\n+    pop (HARD_FRAME_POINTER_REGNUM);\n }\n \n /* Return nonzero if the current function is an interrupt\n@@ -1579,33 +1580,59 @@ h8300_expand_movsi (rtx operands[])\n int\n h8300_initial_elimination_offset (int from, int to)\n {\n-  int offset = 0;\n   /* The number of bytes that the return address takes on the stack.  */\n   int pc_size = POINTER_SIZE / BITS_PER_UNIT;\n \n-  if (from == ARG_POINTER_REGNUM && to == FRAME_POINTER_REGNUM)\n-    offset = pc_size + frame_pointer_needed * UNITS_PER_WORD;\n-  else if (from == RETURN_ADDRESS_POINTER_REGNUM && to == FRAME_POINTER_REGNUM)\n-    offset = frame_pointer_needed * UNITS_PER_WORD;\n-  else\n-    {\n-      int regno;\n+  /* The number of bytes that the saved frame pointer takes on the stack.  */\n+  int fp_size = frame_pointer_needed * UNITS_PER_WORD;\n \n-      for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n-\tif (WORD_REG_USED (regno))\n-\t  offset += UNITS_PER_WORD;\n+  /* The number of bytes that the saved registers, excluding the frame\n+     pointer, take on the stack.  */\n+  int saved_regs_size = 0;\n \n-      /* See the comments for get_frame_size.  We need to round it up to\n-\t STACK_BOUNDARY.  */\n+  /* The number of bytes that the locals takes on the stack.  */\n+  int frame_size = round_frame_size (get_frame_size ());\n \n-      offset += round_frame_size (get_frame_size ());\n+  int regno;\n \n-      if (from == ARG_POINTER_REGNUM && to == STACK_POINTER_REGNUM)\n-\t/* Skip saved PC.  */\n-\toffset += pc_size;\n-    }\n+  for (regno = 0; regno <= HARD_FRAME_POINTER_REGNUM; regno++)\n+    if (WORD_REG_USED (regno))\n+      saved_regs_size += UNITS_PER_WORD;\n \n-  return offset;\n+  /* Adjust saved_regs_size because the above loop took the frame\n+     pointer int account.  */\n+  saved_regs_size -= fp_size;\n+\n+  if (to == HARD_FRAME_POINTER_REGNUM)\n+    {\n+      switch (from)\n+\t{\n+\tcase ARG_POINTER_REGNUM:\n+\t  return pc_size + fp_size;\n+\tcase RETURN_ADDRESS_POINTER_REGNUM:\n+\t  return fp_size;\n+\tcase FRAME_POINTER_REGNUM:\n+\t  return -saved_regs_size;\n+\tdefault:\n+\t  abort ();\n+\t}\n+    }\n+  else if (to == STACK_POINTER_REGNUM)\n+    {\n+      switch (from)\n+\t{\n+\tcase ARG_POINTER_REGNUM:\n+\t  return pc_size + saved_regs_size + frame_size;\n+\tcase RETURN_ADDRESS_POINTER_REGNUM:\n+\t  return saved_regs_size + frame_size;\n+\tcase FRAME_POINTER_REGNUM:\n+\t  return frame_size;\n+\tdefault:\n+\t  abort ();\n+\t}\n+    }\n+  else\n+    abort ();\n }\n \n rtx"}, {"sha": "ffcc04ad63e27733e550b0a3ee0675c9e36c0c68", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1807b72620dcd77c6542552e83b26683a177199d/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1807b72620dcd77c6542552e83b26683a177199d/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=1807b72620dcd77c6542552e83b26683a177199d", "patch": "@@ -283,7 +283,7 @@ extern int target_flags;\n    eliminated during reloading in favor of either the stack or frame\n    pointer.  */\n \n-#define FIRST_PSEUDO_REGISTER 11\n+#define FIRST_PSEUDO_REGISTER 12\n \n /* 1 for registers that have pervasive standard uses\n    and are not available for the register allocator.  */\n@@ -364,6 +364,9 @@ extern int target_flags;\n /* Register to use for pushing function arguments.  */\n #define STACK_POINTER_REGNUM SP_REG\n \n+/* Base register for access to local variables of the function.  */\n+#define HARD_FRAME_POINTER_REGNUM HFP_REG\n+\n /* Base register for access to local variables of the function.  */\n #define FRAME_POINTER_REGNUM FP_REG\n \n@@ -575,12 +578,13 @@ enum reg_class {\n    eliminated; they are replaced with either the stack or frame\n    pointer.  */\n \n-#define ELIMINABLE_REGS\t\t\t\t\t\\\n-{{ ARG_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\\\n- { ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM},\t\t\\\n- { RETURN_ADDRESS_POINTER_REGNUM, STACK_POINTER_REGNUM},\\\n- { RETURN_ADDRESS_POINTER_REGNUM, FRAME_POINTER_REGNUM},\\\n- { FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}}\n+#define ELIMINABLE_REGS\t\t\t\t\t\t\\\n+{{ ARG_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\t\\\n+ { ARG_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM},\t\t\\\n+ { RETURN_ADDRESS_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\\\n+ { RETURN_ADDRESS_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM},\t\\\n+ { FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\t\\\n+ { FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM}}\n \n /* Given FROM and TO register numbers, say whether this elimination is allowed.\n    Frame pointer elimination is automatically handled.\n@@ -1059,7 +1063,7 @@ struct cum_arg\n    This sequence is indexed by compiler's hard-register-number (see above).  */\n \n #define REGISTER_NAMES \\\n-{ \"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"sp\", \"mac\", \"ap\", \"rap\" }\n+{ \"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"sp\", \"mac\", \"ap\", \"rap\", \"fp\" }\n \n #define ADDITIONAL_REGISTER_NAMES \\\n { {\"er0\", 0}, {\"er1\", 1}, {\"er2\", 2}, {\"er3\", 3}, {\"er4\", 4}, \\"}, {"sha": "b8c0c9227374bf1ee5a0886ab80f3d9a42517edd", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1807b72620dcd77c6542552e83b26683a177199d/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1807b72620dcd77c6542552e83b26683a177199d/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=1807b72620dcd77c6542552e83b26683a177199d", "patch": "@@ -55,11 +55,12 @@\n (define_constants\n   [(R0_REG\t 0)\n    (SC_REG\t 3)\n-   (FP_REG\t 6)\n+   (HFP_REG\t 6)\n    (SP_REG\t 7)\n    (MAC_REG\t 8)\n    (AP_REG\t 9)\n-   (RAP_REG\t10)])\n+   (RAP_REG\t10)\n+   (FP_REG\t11)])\n \n ;; ----------------------------------------------------------------------\n ;; ATTRIBUTES"}]}