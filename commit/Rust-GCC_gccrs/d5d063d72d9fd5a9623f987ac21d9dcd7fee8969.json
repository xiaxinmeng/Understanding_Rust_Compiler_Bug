{"sha": "d5d063d72d9fd5a9623f987ac21d9dcd7fee8969", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVkMDYzZDcyZDlmZDVhOTYyM2Y5ODdhYzIxZDlkY2Q3ZmVlODk2OQ==", "commit": {"author": {"name": "Jeffrey Oldham", "email": "oldham@codesourcery.com", "date": "2001-02-23T17:47:52Z"}, "committer": {"name": "Jeffrey D. Oldham", "email": "oldham@gcc.gnu.org", "date": "2001-02-23T17:47:52Z"}, "message": "Makefile.in (resource.o): Add params.h dependence.\n\n2001-02-23  Jeffrey Oldham  <oldham@codesourcery.com>\n\n\t* Makefile.in (resource.o): Add params.h dependence.\n\t* params.def (MAX_DELAY_SLOT_LIVE_SEARCH): New parameter.\n\t* params.h (MAX_DELAY_SLOT_LIVE_SEARCH): Likewise.\n\t* resource.c: Add dependence on params.h.\n\t(current_live_regs): Fix explanatory comment.\n\t(find_basic_block): Add new parameter to permit limiting search\n\tfor a BARRIER.\n\t(mark_target_live_regs): Add new argument to find_basic_block call.\n\t(incr_ticks_for_insn): Likewise.\n\nFrom-SVN: r40001", "tree": {"sha": "563025408d5c232941ea83655661ba52f93eb605", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/563025408d5c232941ea83655661ba52f93eb605"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5d063d72d9fd5a9623f987ac21d9dcd7fee8969", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d063d72d9fd5a9623f987ac21d9dcd7fee8969", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5d063d72d9fd5a9623f987ac21d9dcd7fee8969", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d063d72d9fd5a9623f987ac21d9dcd7fee8969/comments", "author": null, "committer": null, "parents": [{"sha": "12961d65166c76d2a1cbcbe9944e4929a5920564", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12961d65166c76d2a1cbcbe9944e4929a5920564", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12961d65166c76d2a1cbcbe9944e4929a5920564"}], "stats": {"total": 63, "additions": 51, "deletions": 12}, "files": [{"sha": "1d36d96ae02c49161a6f693ec8a91e070a0a321e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d063d72d9fd5a9623f987ac21d9dcd7fee8969/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d063d72d9fd5a9623f987ac21d9dcd7fee8969/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5d063d72d9fd5a9623f987ac21d9dcd7fee8969", "patch": "@@ -1,3 +1,15 @@\n+2001-02-23  Jeffrey Oldham  <oldham@codesourcery.com>\n+\n+\t* Makefile.in (resource.o): Add params.h dependence.\n+\t* params.def (MAX_DELAY_SLOT_LIVE_SEARCH): New parameter.\n+\t* params.h (MAX_DELAY_SLOT_LIVE_SEARCH): Likewise.\n+\t* resource.c: Add dependence on params.h.\n+\t(current_live_regs): Fix explanatory comment.\n+\t(find_basic_block): Add new parameter to permit limiting search\n+\tfor a BARRIER.\n+\t(mark_target_live_regs): Add new argument to find_basic_block call.\n+\t(incr_ticks_for_insn): Likewise.\n+\n 2001-02-23  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n \n \t* diagnostic.c (output_to_stream): Rename to"}, {"sha": "bc6067e6b1227f5849aba94f83fc728530cbd07d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d063d72d9fd5a9623f987ac21d9dcd7fee8969/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d063d72d9fd5a9623f987ac21d9dcd7fee8969/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=d5d063d72d9fd5a9623f987ac21d9dcd7fee8969", "patch": "@@ -1429,7 +1429,7 @@ sibcall.o : sibcall.c $(CONFIG_H) system.h $(RTL_H) $(REGS_H) function.h \\\n    hard-reg-set.h flags.h insn-config.h $(RECOG_H) $(BASIC_BLOCK_H)\n resource.o : resource.c $(CONFIG_H) $(RTL_H) hard-reg-set.h system.h \\\n    $(BASIC_BLOCK_H) $(REGS_H) flags.h output.h resource.h function.h toplev.h \\\n-   $(INSN_ATTR_H) except.h\n+   $(INSN_ATTR_H) except.h params.h\n lcm.o : lcm.c $(CONFIG_H) system.h $(RTL_H) $(REGS_H) hard-reg-set.h flags.h \\\n    real.h insn-config.h $(INSN_ATTR_H) $(RECOG_H) $(EXPR_H) $(BASIC_BLOCK_H)\n ssa.o : ssa.c $(CONFIG_H) system.h $(REGS_H) varray.h\t\t\t\\"}, {"sha": "aae706839edaef9a0bb8641cf9553bd3e4b23ce5", "filename": "gcc/params.def", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d063d72d9fd5a9623f987ac21d9dcd7fee8969/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d063d72d9fd5a9623f987ac21d9dcd7fee8969/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=d5d063d72d9fd5a9623f987ac21d9dcd7fee8969", "patch": "@@ -55,6 +55,17 @@ DEFPARAM (PARAM_MAX_DELAY_SLOT_INSN_SEARCH,\n \t  \"The maximum number of instructions to consider to fill a delay slot\",\n \t  100)\n \n+/* When trying to fill delay slots, the maximum number of instructions\n+   to consider when searching for a block with valid live register\n+   information.  Increasing this arbitrarily chosen value means more\n+   aggressive optimization, increasing the compile time.  This\n+   parameter should be removed when the delay slot code is rewritten\n+   to maintain the control-flow graph.  */\n+DEFPARAM(PARAM_MAX_DELAY_SLOT_LIVE_SEARCH,\n+\t \"max-delay-slot-live-search\",\n+\t \"The maximum number of instructions to consider to find accurate live register information\",\n+\t 333)\n+\n /*\n Local variables:\n mode:c"}, {"sha": "d5336f2c70d71b96e054bb83b8c89ac5b73d1160", "filename": "gcc/params.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d063d72d9fd5a9623f987ac21d9dcd7fee8969/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d063d72d9fd5a9623f987ac21d9dcd7fee8969/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=d5d063d72d9fd5a9623f987ac21d9dcd7fee8969", "patch": "@@ -86,5 +86,7 @@ typedef enum compiler_param\n   PARAM_VALUE (PARAM_MAX_INLINE_INSNS)\n #define MAX_DELAY_SLOT_INSN_SEARCH \\\n   PARAM_VALUE (PARAM_MAX_DELAY_SLOT_INSN_SEARCH)\n+#define MAX_DELAY_SLOT_LIVE_SEARCH \\\n+  PARAM_VALUE (PARAM_MAX_DELAY_SLOT_LIVE_SEARCH)\n \n #endif /* PARAMS_H */"}, {"sha": "de1189d2b3b9f1857d816f2468fc3fd9813c0d74", "filename": "gcc/resource.c", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d063d72d9fd5a9623f987ac21d9dcd7fee8969/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d063d72d9fd5a9623f987ac21d9dcd7fee8969/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=d5d063d72d9fd5a9623f987ac21d9dcd7fee8969", "patch": "@@ -32,6 +32,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"resource.h\"\n #include \"except.h\"\n #include \"insn-attr.h\"\n+#include \"params.h\"\n \n /* This structure is used to record liveness information at the targets or\n    fallthrough insns of branches.  We will most likely need the information\n@@ -66,7 +67,7 @@ static struct target_info **target_hash_table = NULL;\n static int *bb_ticks;\n \n /* Marks registers possibly live at the current place being scanned by\n-   mark_target_live_regs.  Used only by next two function.    */\n+   mark_target_live_regs.  Also used by update_live_status.  */\n \n static HARD_REG_SET current_live_regs;\n \n@@ -76,7 +77,7 @@ static HARD_REG_SET current_live_regs;\n static HARD_REG_SET pending_dead_regs;\n \f\n static void update_live_status\t\tPARAMS ((rtx, rtx, void *));\n-static int find_basic_block\t\tPARAMS ((rtx));\n+static int find_basic_block\t\tPARAMS ((rtx, int));\n static rtx next_insn_no_annul\t\tPARAMS ((rtx));\n static rtx find_dead_or_set_registers\tPARAMS ((rtx, struct resources*,\n \t\t\t\t\t\trtx*, int, struct resources,\n@@ -115,25 +116,38 @@ update_live_status (dest, x, data)\n \tCLEAR_HARD_REG_BIT (pending_dead_regs, i);\n       }\n }\n-/* Find the number of the basic block that starts closest to INSN.  Return -1\n-   if we couldn't find such a basic block.  */\n+\n+/* Find the number of the basic block with correct live register\n+   information that starts closest to INSN.  Return -1 if we couldn't\n+   find such a basic block or the beginning is more than\n+   SEARCH_LIMIT instructions before INSN.  Use SEARCH_LIMIT = -1 for\n+   an unlimited search.\n+\n+   The delay slot filling code destroys the control-flow graph so,\n+   instead of finding the basic block containing INSN, we search\n+   backwards toward a BARRIER where the live register information is\n+   correct.  */\n \n static int\n-find_basic_block (insn)\n+find_basic_block (insn, search_limit)\n      rtx insn;\n+     int search_limit;\n {\n   int i;\n \n   /* Scan backwards to the previous BARRIER.  Then see if we can find a\n      label that starts a basic block.  Return the basic block number.  */\n-\n   for (insn = prev_nonnote_insn (insn);\n-       insn && GET_CODE (insn) != BARRIER;\n-       insn = prev_nonnote_insn (insn))\n+       insn && GET_CODE (insn) != BARRIER && search_limit != 0;\n+       insn = prev_nonnote_insn (insn), --search_limit)\n     ;\n \n+  /* The closest BARRIER is too far away.  */\n+  if (search_limit == 0)\n+    return -1;\n+\n   /* The start of the function is basic block zero.  */\n-  if (insn == 0)\n+  else if (insn == 0)\n     return 0;\n \n   /* See if any of the upcoming CODE_LABELs start a basic block.  If we reach\n@@ -925,7 +939,7 @@ mark_target_live_regs (insns, target, res)\n     }\n \n   if (b == -1)\n-    b = find_basic_block (target);\n+    b = find_basic_block (target, MAX_DELAY_SLOT_LIVE_SEARCH);\n \n   if (target_hash_table != NULL)\n     {\n@@ -1294,7 +1308,7 @@ void\n incr_ticks_for_insn (insn)\n      rtx insn;\n {\n-  int b = find_basic_block (insn);\n+  int b = find_basic_block (insn, MAX_DELAY_SLOT_LIVE_SEARCH);\n \n   if (b != -1)\n     bb_ticks[b]++;"}]}