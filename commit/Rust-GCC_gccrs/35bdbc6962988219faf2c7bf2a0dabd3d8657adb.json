{"sha": "35bdbc6962988219faf2c7bf2a0dabd3d8657adb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzViZGJjNjk2Mjk4ODIxOWZhZjJjN2JmMmEwZGFiZDNkODY1N2FkYg==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2011-08-03T18:03:04Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2011-08-03T18:03:04Z"}, "message": "m32c.c (class_sizes): Remove.\n\n\t* config/m32c/m32c.c (class_sizes): Remove.\n\t(reduce_class): Change arguments and return type to reg_class_t.\n\tChange type cc var to HARD_REG_SET. Change type best var to\n\treg_class_t. Change type best_size var to unsigned int. Remove\n\tinitialization class_sizes var. Use reg_class_size array instead\n\tof class_sizes. Use reg_class_contents array instead\n\tof class_contents.\n\nFrom-SVN: r177290", "tree": {"sha": "c5e5b886196ec6b0e63a26f8d56c271be88dc87b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5e5b886196ec6b0e63a26f8d56c271be88dc87b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35bdbc6962988219faf2c7bf2a0dabd3d8657adb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35bdbc6962988219faf2c7bf2a0dabd3d8657adb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35bdbc6962988219faf2c7bf2a0dabd3d8657adb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35bdbc6962988219faf2c7bf2a0dabd3d8657adb/comments", "author": null, "committer": null, "parents": [{"sha": "41ba34dbe7e8494254b524e8e31e394a1e6c6585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41ba34dbe7e8494254b524e8e31e394a1e6c6585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41ba34dbe7e8494254b524e8e31e394a1e6c6585"}], "stats": {"total": 49, "additions": 23, "deletions": 26}, "files": [{"sha": "63aef194f90acdf58b7d5a890a240f4f573cff01", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35bdbc6962988219faf2c7bf2a0dabd3d8657adb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35bdbc6962988219faf2c7bf2a0dabd3d8657adb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35bdbc6962988219faf2c7bf2a0dabd3d8657adb", "patch": "@@ -1,3 +1,13 @@\n+2011-08-03  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/m32c/m32c.c (class_sizes): Remove.\n+\t(reduce_class): Change arguments and return type to reg_class_t.\n+\tChange type cc var to HARD_REG_SET. Change type best var to\n+\treg_class_t. Change type best_size var to unsigned int. Remove\n+\tinitialization class_sizes var. Use reg_class_size array instead\n+\tof class_sizes. Use reg_class_contents array instead\n+\tof class_contents.\n+\n 2011-08-03  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/49958"}, {"sha": "4aeeb3d9ebb601ddcdfda6705b5292c77368f344", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35bdbc6962988219faf2c7bf2a0dabd3d8657adb/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35bdbc6962988219faf2c7bf2a0dabd3d8657adb/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=35bdbc6962988219faf2c7bf2a0dabd3d8657adb", "patch": "@@ -318,44 +318,31 @@ reg_push_size (int regno)\n     }\n }\n \n-static int *class_sizes = 0;\n-\n /* Given two register classes, find the largest intersection between\n    them.  If there is no intersection, return RETURNED_IF_EMPTY\n    instead.  */\n-static int\n-reduce_class (int original_class, int limiting_class, int returned_if_empty)\n+static reg_class_t\n+reduce_class (reg_class_t original_class, reg_class_t limiting_class,\n+\t      reg_class_t returned_if_empty)\n {\n-  int cc = class_contents[original_class][0];\n-  int i, best = NO_REGS;\n-  int best_size = 0;\n+  HARD_REG_SET cc;\n+  int i;\n+  reg_class_t best = NO_REGS;\n+  unsigned int best_size = 0;\n \n   if (original_class == limiting_class)\n     return original_class;\n \n-  if (!class_sizes)\n-    {\n-      int r;\n-      class_sizes = (int *) xmalloc (LIM_REG_CLASSES * sizeof (int));\n-      for (i = 0; i < LIM_REG_CLASSES; i++)\n-\t{\n-\t  class_sizes[i] = 0;\n-\t  for (r = 0; r < FIRST_PSEUDO_REGISTER; r++)\n-\t    if (class_contents[i][0] & (1 << r))\n-\t      class_sizes[i]++;\n-\t}\n-    }\n+  cc = reg_class_contents[original_class];\n+  AND_HARD_REG_SET (cc, reg_class_contents[limiting_class]);\n \n-  cc &= class_contents[limiting_class][0];\n   for (i = 0; i < LIM_REG_CLASSES; i++)\n     {\n-      int ic = class_contents[i][0];\n-\n-      if ((~cc & ic) == 0)\n-\tif (best_size < class_sizes[i])\n+      if (hard_reg_set_subset_p (reg_class_contents[i], cc))\n+\tif (best_size < reg_class_size[i])\n \t  {\n-\t    best = i;\n-\t    best_size = class_sizes[i];\n+\t    best = (reg_class_t) i;\n+\t    best_size = reg_class_size[i];\n \t  }\n \n     }"}]}