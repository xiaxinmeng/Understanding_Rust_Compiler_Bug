{"sha": "c66b6c6689525b38af7cf9ea184fdef3d54d34f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY2YjZjNjY4OTUyNWIzOGFmN2NmOWVhMTg0ZmRlZjNkNTRkMzRmNA==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@atrey.karlin.mff.cuni.cz", "date": "2004-06-30T21:29:00Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2004-06-30T21:29:00Z"}, "message": "common.opt (ftree-loop-optimize): New flag.\n\n\t* common.opt (ftree-loop-optimize): New flag.\n\t* tree-flow.h (kill_redundant_phi_nodes): Declare.\n\t* tree-optimize.c (init_tree_optimization_passes): Add pass_loop.\n\t* tree-pass.h (pass_loop_init, pass_loop_done): Declare.\n\t* tree-ssa-loop.c (current_loops): New variable.\n\t(tree_loop_optimizer_init, gate_loop, tree_ssa_loop_init,\n\ttree_ssa_loop_done): New functions.\n\t(pass_loop, pass_loop_init, pass_loop_done): New passes.\n\t* tree-ssa.c (kill_redundant_phi_nodes): Export.\n\t* doc/invoke.texi (-ftree-loop-optimize): Document.\n\nFrom-SVN: r83933", "tree": {"sha": "82db76b65fd80894925f2acf9c613ee3fa4f8fb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82db76b65fd80894925f2acf9c613ee3fa4f8fb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c66b6c6689525b38af7cf9ea184fdef3d54d34f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c66b6c6689525b38af7cf9ea184fdef3d54d34f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c66b6c6689525b38af7cf9ea184fdef3d54d34f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c66b6c6689525b38af7cf9ea184fdef3d54d34f4/comments", "author": null, "committer": null, "parents": [{"sha": "5f240ec46eaea80964f62124351e64cda949592e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f240ec46eaea80964f62124351e64cda949592e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f240ec46eaea80964f62124351e64cda949592e"}], "stats": {"total": 136, "additions": 134, "deletions": 2}, "files": [{"sha": "8244666a5cbfe11213cc41d128d974b94c9fd3fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66b6c6689525b38af7cf9ea184fdef3d54d34f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66b6c6689525b38af7cf9ea184fdef3d54d34f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c66b6c6689525b38af7cf9ea184fdef3d54d34f4", "patch": "@@ -1,3 +1,16 @@\n+2004-06-30  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\n+\t* common.opt (ftree-loop-optimize): New flag.\n+\t* tree-flow.h (kill_redundant_phi_nodes): Declare.\n+\t* tree-optimize.c (init_tree_optimization_passes): Add pass_loop.\n+\t* tree-pass.h (pass_loop_init, pass_loop_done): Declare.\n+\t* tree-ssa-loop.c (current_loops): New variable.\n+\t(tree_loop_optimizer_init, gate_loop, tree_ssa_loop_init,\n+\ttree_ssa_loop_done): New functions.\n+\t(pass_loop, pass_loop_init, pass_loop_done): New passes.\n+\t* tree-ssa.c (kill_redundant_phi_nodes): Export.\n+\t* doc/invoke.texi (-ftree-loop-optimize): Document.\n+\n 2004-06-30  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* tree-ssa-loop-ch.c: New file."}, {"sha": "1c75bc2505007840ff4666efafb33b24c734bcad", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66b6c6689525b38af7cf9ea184fdef3d54d34f4/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66b6c6689525b38af7cf9ea184fdef3d54d34f4/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=c66b6c6689525b38af7cf9ea184fdef3d54d34f4", "patch": "@@ -777,6 +777,10 @@ ftree-fre\n Common Report Var(flag_tree_fre)\n Enable Full Redundancy Elimination (FRE) on trees\n \n+ftree-loop-optimize\n+Common Report Var(flag_tree_loop_optimize) Init(1)\n+Enable loop optimizations on tree level\n+\n ftree-points-to=\n Common Joined RejectNegative\n "}, {"sha": "ede70f67a46033148f38651acb0b0ea10b847a5f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66b6c6689525b38af7cf9ea184fdef3d54d34f4/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66b6c6689525b38af7cf9ea184fdef3d54d34f4/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c66b6c6689525b38af7cf9ea184fdef3d54d34f4", "patch": "@@ -312,7 +312,7 @@ in the following sections.\n -fstrength-reduce  -fstrict-aliasing  -ftracer  -fthread-jumps @gol\n -funroll-all-loops  -funroll-loops  -fpeel-loops @gol\n -funswitch-loops  -fold-unroll-loops  -fold-unroll-all-loops @gol\n--ftree-pre  -ftree-ccp  -ftree-dce  @gol\n+-ftree-pre  -ftree-ccp  -ftree-dce -ftree-loop-optimize @gol\n -ftree-dominator-opts -ftree-dse -ftree-copyrename @gol\n -ftree-ch -ftree-sra -ftree-ter -ftree-lrs -ftree-fre @gol\n --param @var{name}=@var{value}\n@@ -4400,6 +4400,10 @@ effectivity of code motion optimizations.  It also saves one jump.  This flag\n is enabled by default at -O and higher.  It is not enabled for -Os, since it\n usually increases code size.\n \n+@item -ftree-loop-optimize\n+Perform loop optimizations on trees.  This flag is enabled by default at -O\n+and higher.\n+\n @item -ftree-sra\n Perform scalar replacement of aggregates.  This pass replaces structure\n references with scalars to prevent committing structures to memory too"}, {"sha": "f0bfba4c153dd496c334a5a0c9068fc12fb4615c", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66b6c6689525b38af7cf9ea184fdef3d54d34f4/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66b6c6689525b38af7cf9ea184fdef3d54d34f4/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=c66b6c6689525b38af7cf9ea184fdef3d54d34f4", "patch": "@@ -573,6 +573,7 @@ extern void verify_ssa (void);\n extern void delete_tree_ssa (void);\n extern void register_new_def (tree, varray_type *);\n extern void walk_use_def_chains (tree, walk_use_def_chains_fn, void *);\n+extern void kill_redundant_phi_nodes (void);\n \n /* In tree-into-ssa.c  */\n extern void rewrite_into_ssa (bool);"}, {"sha": "be663bb75fde139e663c997c425c4b2667dd4b79", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66b6c6689525b38af7cf9ea184fdef3d54d34f4/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66b6c6689525b38af7cf9ea184fdef3d54d34f4/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=c66b6c6689525b38af7cf9ea184fdef3d54d34f4", "patch": "@@ -319,6 +319,7 @@ init_tree_optimization_passes (void)\n   NEXT_PASS (pass_fold_builtins);\n   NEXT_PASS (pass_split_crit_edges);\n   NEXT_PASS (pass_pre);\n+  NEXT_PASS (pass_loop);\n   NEXT_PASS (DUP_PASS (pass_dominator));\n   NEXT_PASS (DUP_PASS (pass_redundant_phi));\n   NEXT_PASS (pass_cd_dce);\n@@ -333,6 +334,11 @@ init_tree_optimization_passes (void)\n   NEXT_PASS (pass_remove_useless_vars);\n   *p = NULL;\n \n+  p = &pass_loop.sub;\n+  NEXT_PASS (pass_loop_init);\n+  NEXT_PASS (pass_loop_done);\n+  *p = NULL;\n+\n #undef NEXT_PASS\n #undef DUP_PASS\n "}, {"sha": "276de395bd1f2e72c89f02483555d09ef00328a8", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66b6c6689525b38af7cf9ea184fdef3d54d34f4/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66b6c6689525b38af7cf9ea184fdef3d54d34f4/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=c66b6c6689525b38af7cf9ea184fdef3d54d34f4", "patch": "@@ -106,6 +106,8 @@ extern struct tree_opt_pass pass_sra;\n extern struct tree_opt_pass pass_tail_recursion;\n extern struct tree_opt_pass pass_tail_calls;\n extern struct tree_opt_pass pass_loop;\n+extern struct tree_opt_pass pass_loop_init;\n+extern struct tree_opt_pass pass_loop_done;\n extern struct tree_opt_pass pass_ch;\n extern struct tree_opt_pass pass_ccp;\n extern struct tree_opt_pass pass_build_ssa;"}, {"sha": "885954e5e859e668d09d72de4d1cd5162d7b5f3f", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66b6c6689525b38af7cf9ea184fdef3d54d34f4/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66b6c6689525b38af7cf9ea184fdef3d54d34f4/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=c66b6c6689525b38af7cf9ea184fdef3d54d34f4", "patch": "@@ -38,4 +38,106 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"flags.h\"\n #include \"tree-inline.h\"\n \n+/* The loop tree currently optimized.  */\n+\n+struct loops *current_loops;\n+\n+/* Initializes the loop structures.  DUMP is the file to that the details\n+   about the analysis should be dumped.  */\n+\n+static struct loops *\n+tree_loop_optimizer_init (FILE *dump)\n+{\n+  struct loops *loops = loop_optimizer_init (dump);\n+\n+  if (!loops)\n+    return NULL;\n+\n+  /* Creation of preheaders may create redundant phi nodes if the loop is\n+     entered by more than one edge, but the initial value of the induction\n+     variable is the same on all of them.  */\n+  kill_redundant_phi_nodes ();\n+  rewrite_into_ssa (false);\n+  bitmap_clear (vars_to_rename);\n+\n+  return loops;\n+}\n+\n+/* The loop superpass.  */\n+\n+static bool\n+gate_loop (void)\n+{\n+  return flag_tree_loop_optimize != 0;\n+}\n+\n+struct tree_opt_pass pass_loop = \n+{\n+  \"loop\",\t\t\t\t/* name */\n+  gate_loop,\t\t\t\t/* gate */\n+  NULL,\t\t\t\t\t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  TV_TREE_LOOP,\t\t\t\t/* tv_id */\n+  PROP_cfg,\t\t\t\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  TODO_ggc_collect,\t\t\t/* todo_flags_start */\n+  TODO_dump_func | TODO_verify_ssa | TODO_ggc_collect\t/* todo_flags_finish */\n+};\n+\n+/* Loop optimizer initialization.  */\n+\n+static void\n+tree_ssa_loop_init (void)\n+{\n+  current_loops = tree_loop_optimizer_init (dump_file);\n+}\n+  \n+struct tree_opt_pass pass_loop_init = \n+{\n+  \"loopinit\",\t\t\t\t/* name */\n+  NULL,\t\t\t\t\t/* gate */\n+  tree_ssa_loop_init,\t\t\t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  0,\t\t\t\t\t/* tv_id */\n+  PROP_cfg,\t\t\t\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  0\t\t\t\t\t/* todo_flags_finish */\n+};\n+\n+/* Loop optimizer finalization.  */\n+\n+static void\n+tree_ssa_loop_done (void)\n+{\n+  if (!current_loops)\n+    return;\n+\n+  loop_optimizer_finalize (current_loops,\n+\t\t\t   (dump_flags & TDF_DETAILS ? dump_file : NULL));\n+  current_loops = NULL;\n+  cleanup_tree_cfg ();\n+}\n+  \n+struct tree_opt_pass pass_loop_done = \n+{\n+  \"loopdone\",\t\t\t\t/* name */\n+  NULL,\t\t\t\t\t/* gate */\n+  tree_ssa_loop_done,\t\t\t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  0,\t\t\t\t\t/* tv_id */\n+  PROP_cfg,\t\t\t\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  0\t\t\t\t\t/* todo_flags_finish */\n+};\n "}, {"sha": "37b83bfeca59ebb580fc5adab29e63f9a211b1e7", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c66b6c6689525b38af7cf9ea184fdef3d54d34f4/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c66b6c6689525b38af7cf9ea184fdef3d54d34f4/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=c66b6c6689525b38af7cf9ea184fdef3d54d34f4", "patch": "@@ -926,7 +926,7 @@ check_phi_redundancy (tree phi, tree *eq_to)\n    The most important effect of this pass is to remove degenerate PHI\n    nodes created by removing unreachable code.  */\n \n-static void\n+void\n kill_redundant_phi_nodes (void)\n {\n   tree *eq_to;"}]}