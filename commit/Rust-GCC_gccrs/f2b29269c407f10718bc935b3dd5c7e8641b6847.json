{"sha": "f2b29269c407f10718bc935b3dd5c7e8641b6847", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJiMjkyNjljNDA3ZjEwNzE4YmM5MzViM2RkNWM3ZTg2NDFiNjg0Nw==", "commit": {"author": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2019-07-13T08:28:33Z"}, "committer": {"name": "Prathamesh Kulkarni", "email": "prathamesh3492@gcc.gnu.org", "date": "2019-07-13T08:28:33Z"}, "message": "re PR target/90723 (pr88598-2.c segfaults with -msve-vector-bits=256)\n\n2019-07-15  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n\n\tPR target/90723\n\t* recog.h (temporary_volatile_ok): New class.\n\t* config/aarch64/aarch64.c (aarch64_emit_sve_pred_move): Set\n\tvolatile_ok temporarily to true using temporary_volatile_ok.\n\t* expr.c (emit_block_move_via_cpymem): Likewise.\n\t* optabs.c (maybe_legitimize_operand): Likewise.\n\nFrom-SVN: r273466", "tree": {"sha": "899d897fa30b485c9788784d3433c6f2d422e96d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/899d897fa30b485c9788784d3433c6f2d422e96d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2b29269c407f10718bc935b3dd5c7e8641b6847", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2b29269c407f10718bc935b3dd5c7e8641b6847", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2b29269c407f10718bc935b3dd5c7e8641b6847", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2b29269c407f10718bc935b3dd5c7e8641b6847/comments", "author": null, "committer": null, "parents": [{"sha": "1a888209de88d4a4a1f415beb28e5a94b95e088f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a888209de88d4a4a1f415beb28e5a94b95e088f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a888209de88d4a4a1f415beb28e5a94b95e088f"}], "stats": {"total": 47, "additions": 33, "deletions": 14}, "files": [{"sha": "f41e07a4789775fd78ccc8b96764fa19a0fa156b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b29269c407f10718bc935b3dd5c7e8641b6847/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b29269c407f10718bc935b3dd5c7e8641b6847/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2b29269c407f10718bc935b3dd5c7e8641b6847", "patch": "@@ -1,3 +1,12 @@\n+2019-07-14  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/90723\n+\t* recog.h (temporary_volatile_ok): New class.\n+\t* config/aarch64/aarch64.c (aarch64_emit_sve_pred_move): Set\n+\tvolatile_ok temporarily to true using temporary_volatile_ok.\n+\t* expr.c (emit_block_move_via_cpymem): Likewise.\n+\t* optabs.c (maybe_legitimize_operand): Likewise.\n+\n 2019-07-13  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gimplify.c (struct gimplify_omp_ctx): Add order_concurrent member."}, {"sha": "5bf182ccc0c3db9940c2d811374e5de012e64904", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b29269c407f10718bc935b3dd5c7e8641b6847/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b29269c407f10718bc935b3dd5c7e8641b6847/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=f2b29269c407f10718bc935b3dd5c7e8641b6847", "patch": "@@ -3457,6 +3457,7 @@ aarch64_emit_sve_pred_move (rtx dest, rtx pred, rtx src)\n   create_output_operand (&ops[0], dest, mode);\n   create_input_operand (&ops[1], pred, GET_MODE(pred));\n   create_input_operand (&ops[2], src, mode);\n+  temporary_volatile_ok v (true);\n   expand_insn (code_for_aarch64_pred_mov (mode), 3, ops);\n }\n "}, {"sha": "20e3f9ce33751703c1e6f4a897f61c1f968dc9a8", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b29269c407f10718bc935b3dd5c7e8641b6847/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b29269c407f10718bc935b3dd5c7e8641b6847/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f2b29269c407f10718bc935b3dd5c7e8641b6847", "patch": "@@ -1732,8 +1732,6 @@ emit_block_move_via_cpymem (rtx x, rtx y, rtx size, unsigned int align,\n \t\t\t    unsigned HOST_WIDE_INT max_size,\n \t\t\t    unsigned HOST_WIDE_INT probable_max_size)\n {\n-  int save_volatile_ok = volatile_ok;\n-\n   if (expected_align < align)\n     expected_align = align;\n   if (expected_size != -1)\n@@ -1745,7 +1743,7 @@ emit_block_move_via_cpymem (rtx x, rtx y, rtx size, unsigned int align,\n     }\n \n   /* Since this is a move insn, we don't care about volatility.  */\n-  volatile_ok = 1;\n+  temporary_volatile_ok v (true);\n \n   /* Try the most limited insn first, because there's no point\n      including more than one in the machine description unless\n@@ -1809,14 +1807,10 @@ emit_block_move_via_cpymem (rtx x, rtx y, rtx size, unsigned int align,\n \t\tcreate_fixed_operand (&ops[8], NULL);\n \t    }\n \t  if (maybe_expand_insn (code, nops, ops))\n-\t    {\n-\t      volatile_ok = save_volatile_ok;\n-\t      return true;\n-\t    }\n+\t    return true;\n \t}\n     }\n \n-  volatile_ok = save_volatile_ok;\n   return false;\n }\n "}, {"sha": "4b39ff61193ccb256f76883b4e73d33040514c80", "filename": "gcc/optabs.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b29269c407f10718bc935b3dd5c7e8641b6847/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b29269c407f10718bc935b3dd5c7e8641b6847/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=f2b29269c407f10718bc935b3dd5c7e8641b6847", "patch": "@@ -7202,17 +7202,15 @@ maybe_legitimize_operand (enum insn_code icode, unsigned int opno,\n \t\t\t  class expand_operand *op)\n {\n   machine_mode mode, imode;\n-  bool old_volatile_ok, result;\n \n   mode = op->mode;\n   switch (op->type)\n     {\n     case EXPAND_FIXED:\n-      old_volatile_ok = volatile_ok;\n-      volatile_ok = true;\n-      result = maybe_legitimize_operand_same_code (icode, opno, op);\n-      volatile_ok = old_volatile_ok;\n-      return result;\n+      {\n+\ttemporary_volatile_ok v (true);\n+\treturn maybe_legitimize_operand_same_code (icode, opno, op);\n+      }\n \n     case EXPAND_OUTPUT:\n       gcc_assert (mode != VOIDmode);"}, {"sha": "e09b27c5be1e22fc6e11b365d07101ea6de32832", "filename": "gcc/recog.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b29269c407f10718bc935b3dd5c7e8641b6847/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b29269c407f10718bc935b3dd5c7e8641b6847/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=f2b29269c407f10718bc935b3dd5c7e8641b6847", "patch": "@@ -186,6 +186,23 @@ skip_alternative (const char *p)\n /* Nonzero means volatile operands are recognized.  */\n extern int volatile_ok;\n \n+/* RAII class for temporarily setting volatile_ok.  */\n+\n+class temporary_volatile_ok\n+{\n+public:\n+  temporary_volatile_ok (int value) : save_volatile_ok (volatile_ok)\n+  {\n+    volatile_ok = value;\n+  }\n+\n+  ~temporary_volatile_ok () { volatile_ok = save_volatile_ok; }\n+\n+private:\n+  temporary_volatile_ok (const temporary_volatile_ok &);\n+  int save_volatile_ok;\n+};\n+\n /* Set by constrain_operands to the number of the alternative that\n    matched.  */\n extern int which_alternative;"}]}