{"sha": "084f5a35392f1ce138a3b9065b92346cc8383490", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg0ZjVhMzUzOTJmMWNlMTM4YTNiOTA2NWI5MjM0NmNjODM4MzQ5MA==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2004-01-06T23:49:39Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2004-01-06T23:49:39Z"}, "message": "t-darwin (LIB2FUNCS_EXTRA): Compile darwin-ldouble.c.\n\n\t* config/rs6000/t-darwin (LIB2FUNCS_EXTRA): Compile darwin-ldouble.c.\n\t(TARGET_LIBGCC2_CFLAGS): Use -mlong-double-128.\n\t* config/rs6000/darwin-ldouble.c: New.\n\nFrom-SVN: r75490", "tree": {"sha": "5c0e61cf58f5bc8f76b43af4bc756427a83b2b6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c0e61cf58f5bc8f76b43af4bc756427a83b2b6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/084f5a35392f1ce138a3b9065b92346cc8383490", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084f5a35392f1ce138a3b9065b92346cc8383490", "html_url": "https://github.com/Rust-GCC/gccrs/commit/084f5a35392f1ce138a3b9065b92346cc8383490", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084f5a35392f1ce138a3b9065b92346cc8383490/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "550d138775ddd05e61d684a9e6407e422e2ee5b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/550d138775ddd05e61d684a9e6407e422e2ee5b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/550d138775ddd05e61d684a9e6407e422e2ee5b3"}], "stats": {"total": 233, "additions": 231, "deletions": 2}, "files": [{"sha": "27c4023ee1c9fe5e58e7ffec1cee40c03d2f4c17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084f5a35392f1ce138a3b9065b92346cc8383490/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084f5a35392f1ce138a3b9065b92346cc8383490/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=084f5a35392f1ce138a3b9065b92346cc8383490", "patch": "@@ -5,6 +5,10 @@\n \n 2004-01-06  Geoffrey Keating  <geoffk@apple.com>\n \n+\t* config/rs6000/t-darwin (LIB2FUNCS_EXTRA): Compile darwin-ldouble.c.\n+\t(TARGET_LIBGCC2_CFLAGS): Use -mlong-double-128.\n+\t* config/rs6000/darwin-ldouble.c: New.\n+\t\n \t* emit-rtl.c (gen_lowpart_common): Use simplify_gen_subreg\n \tfor constants.\n \t(constant_subword): Delete."}, {"sha": "281eb2a7599ec58caf21cb6ff69ceff6f297d7b7", "filename": "gcc/config/rs6000/darwin-ldouble.c", "status": "added", "additions": 221, "deletions": 0, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084f5a35392f1ce138a3b9065b92346cc8383490/gcc%2Fconfig%2Frs6000%2Fdarwin-ldouble.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084f5a35392f1ce138a3b9065b92346cc8383490/gcc%2Fconfig%2Frs6000%2Fdarwin-ldouble.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin-ldouble.c?ref=084f5a35392f1ce138a3b9065b92346cc8383490", "patch": "@@ -0,0 +1,221 @@\n+/* 128-bit long double support routines for Darwin.\n+   Copyright (C) 1993, 2003 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+/* Implementations of floating-point long double basic arithmetic\n+   functions called by the IBM C compiler when generating code for\n+   PowerPC platforms.  In particular, the following functions are\n+   implemented: _xlqadd, _xlqsub, _xlqmul, and _xlqdiv.  Double-double\n+   algorithms are based on the paper \"Doubled-Precision IEEE Standard\n+   754 Floating-Point Arithmetic\" by W. Kahan, February 26, 1987.  An\n+   alternative published reference is \"Software for Doubled-Precision\n+   Floating-Point Computations\", by Seppo Linnainmaa, ACM TOMS vol 7\n+   no 3, September 1961, pages 272-283.  */\n+\n+#define fabs(x) __builtin_fabs(x)\n+\n+#define unlikely(x) __builtin_expect ((x), 0)\n+\n+/* All these routines actually take two long doubles as parameters,\n+   but GCC currently generates poor code when a union is used to turn\n+   a long double into a pair of doubles.  */\n+\n+extern long double _xlqadd (double, double, double, double);\n+extern long double _xlqsub (double, double, double, double);\n+extern long double _xlqmul (double, double, double, double);\n+extern long double _xlqdiv (double, double, double, double);\n+\n+typedef union\n+{\n+  long double ldval;\n+  double dval[2];\n+} longDblUnion;\n+\n+static const double FPKINF = 1.0/0.0;\n+\n+/* Add two 'long double' values and return the result.\t*/\n+long double\n+_xlqadd (double a, double b, double c, double d)\n+{\n+  longDblUnion z;\n+  double t, tau, u, FPR_zero, FPR_PosInf;\n+\n+  FPR_zero = 0.0;\n+  FPR_PosInf = FPKINF;\n+\n+  if (unlikely (a != a) || unlikely (c != c)) {\n+    z.dval[0] = a + c;\t\t/* NaN result.\t*/\n+    z.dval[1] = a + c;\t\t/* NaN result.\t*/\n+    return z.ldval;\n+  }\n+\n+  /* Ordered operands are arranged in order of their magnitudes.  */\n+\n+  /* Switch inputs if |(c,d)| > |(a,b)|. */\n+  if (fabs (c) > fabs (a))\n+    {\n+      t = a;\n+      tau = b;\n+      a = c;\n+      b = d;\n+      c = t;\n+      d = tau;\n+    }\n+\n+  /* b <- second largest magnitude double. */\n+  if (fabs (c) > fabs (b))\n+    {\n+      t = b;\n+      b = c;\n+      c = t;\n+    }\n+\n+  /* Thanks to commutivity, sum is invariant w.r.t. the next\n+     conditional exchange. */\n+  tau = d + c;\n+\n+  /* Order the smallest magnitude doubles.  */\n+  if (fabs (d) > fabs (c))\n+    {\n+      t = c;\n+      c = d;\n+      d = t;\n+    }\n+\n+  t = (tau + b) + a;\t     /* Sum values in ascending magnitude order.  */\n+\n+  /* Infinite or zero result.  */\n+  if (unlikely (fabs (t) == FPR_PosInf) || unlikely (t == FPR_zero))\n+    {\n+      z.dval[0] = t;\n+      z.dval[1] = t >= 0.0 ? (fabs (t) >= 0.0 ? t : 0.0) : -0.0;\n+      return z.ldval;\n+    }\n+\n+  /* Usual case.  */\n+  tau = (((a-t) + b) + c) + d;\n+  u = t + tau;\n+  z.dval[0] = u;\t       /* Final fixup for long double result.  */\n+  z.dval[1] = (u - t) + tau;\n+  return z.ldval;\n+}\n+\n+long double\n+_xlqsub (double a, double b, double c, double d)\n+{\n+  return _xlqadd (a, b, -c, -d);\n+}\n+\n+long double\n+_xlqmul (double a, double b, double c, double d)\n+{\n+  longDblUnion z;\n+  double t, tau, u, v, w, FPR_zero, FPR_PosInf;\n+  \n+  FPR_zero = 0.0;\n+  FPR_PosInf = FPKINF;\n+\n+  t = a * c;\t\t\t/* Highest order double term.  */\n+\n+  if (unlikely (t != t) || unlikely (t == FPR_zero)) \n+    {\n+      /* NaN or zero result.  */\n+      z.dval[0] = t;\n+      z.dval[1] = t;\n+      return z.ldval;\n+    }\n+\n+  if (unlikely (fabs(t) == FPR_PosInf))\n+    {\n+      /* Infinite result.  */\n+      z.dval[0] = t;\n+      z.dval[1] = t >= 0 ? 0.0 : -0.0;\n+      return z.ldval;\n+    }\n+  \n+  /* Finite nonzero result requires summing of terms of two highest\n+     orders.\t*/\n+  \n+  /* Use fused multiply-add to get low part of a * c.\t */\n+  asm (\"fmsub %0,%1,%2,%3\" : \"=f\"(tau) : \"f\"(a), \"f\"(c), \"f\"(t));\n+  v = a*d;\n+  w = b*c;\n+  tau += v + w;\t    /* Add in other second-order terms.\t */\n+  u = t + tau;\n+\n+  /* Construct long double result.  */\n+  z.dval[0] = u;\n+  z.dval[1] = (u - t) + tau;\n+  return z.ldval;\n+}\n+\n+long double\n+_xlqdiv (double a, double b, double c, double d)\n+{\n+  longDblUnion z;\n+  double s, sigma, t, tau, u, v, w, FPR_zero, FPR_PosInf;\n+  \n+  FPR_zero = 0.0;\n+  FPR_PosInf = FPKINF;\n+  \n+  t = a / c;                    /* highest order double term */\n+  \n+  if (unlikely (t != t) || unlikely (t == FPR_zero))\n+    {\n+      /* NaN or zero result.  */\n+      z.dval[0] = t;\n+      z.dval[1] = t;\n+      return z.ldval;\n+    }\n+\n+  if (unlikely (fabs (t) == FPR_PosInf))\n+    {\n+      /* Infinite result.  */\n+      z.dval[0] = t;\n+      z.dval[1] = t >= 0.0 ? 0.0 : -0.0;\n+      return z.ldval;\n+    }\n+\n+  /* Finite nonzero result requires corrections to the highest order term.  */\n+\n+  s = c * t;                    /* (s,sigma) = c*t exactly. */\n+  w = -(-b + d * t);\t/* Written to get fnmsub for speed, but not\n+\t\t\t   numerically necessary.  */\n+  \n+  /* Use fused multiply-add to get low part of c * t.\t */\n+  asm (\"fmsub %0,%1,%2,%3\" : \"=f\"(sigma) : \"f\"(c), \"f\"(t), \"f\"(s));\n+  v = a - s;\n+  \n+  tau = ((v-sigma)+w)/c;   /* Correction to t. */\n+  u = t + tau;\n+\n+  /* Construct long double result. */\n+  z.dval[0] = u;\n+  z.dval[1] = (t - u) + tau;\n+  return z.ldval;\n+}"}, {"sha": "185bb00eed2b24be55ac9cd243c15ebdf88fbfbe", "filename": "gcc/config/rs6000/t-darwin", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084f5a35392f1ce138a3b9065b92346cc8383490/gcc%2Fconfig%2Frs6000%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084f5a35392f1ce138a3b9065b92346cc8383490/gcc%2Fconfig%2Frs6000%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-darwin?ref=084f5a35392f1ce138a3b9065b92346cc8383490", "patch": "@@ -1,3 +1,7 @@\n-# Library code must include trampoline support.\n-LIB2FUNCS_EXTRA = $(srcdir)/config/rs6000/darwin-tramp.asm\n+# Add trampoline and long double support to libgcc.\n+LIB2FUNCS_EXTRA = $(srcdir)/config/rs6000/darwin-tramp.asm \\\n+\t$(srcdir)/config/rs6000/darwin-ldouble.c\n \n+# For libgcc, we always want 128-bit long double, since a libgcc built with\n+# that will work without it.\n+TARGET_LIBGCC2_CFLAGS = -mlong-double-128"}]}