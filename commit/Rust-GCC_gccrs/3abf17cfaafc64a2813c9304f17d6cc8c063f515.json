{"sha": "3abf17cfaafc64a2813c9304f17d6cc8c063f515", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FiZjE3Y2ZhYWZjNjRhMjgxM2M5MzA0ZjE3ZDZjYzhjMDYzZjUxNQ==", "commit": {"author": {"name": "Yufeng Zhang", "email": "yufeng.zhang@arm.com", "date": "2014-06-17T09:39:22Z"}, "committer": {"name": "Yufeng Zhang", "email": "yufeng@gcc.gnu.org", "date": "2014-06-17T09:39:22Z"}, "message": "re PR target/61483 ([AArch64] builtin va_start incorrectly initializes the field of va_list for incoming unnamed arguments on the stack)\n\ngcc/\n\n\tPR target/61483\n\t* config/aarch64/aarch64.c (aarch64_layout_arg): Add new local\n\tvariable 'size'; calculate 'size' right in the front; use\n\t'size' to compute 'nregs' (when 'allocate_ncrn != 0') and\n\tpcum->aapcs_stack_words.\n\ngcc/testsuite/\n\n\tPR target/61483\n\t* gcc.target/aarch64/aapcs64/type-def.h (struct hfa_fx2_t): New type.\n\t* gcc.target/aarch64/aapcs64/va_arg-13.c: New test.\n\t* gcc.target/aarch64/aapcs64/va_arg-14.c: Ditto.\n\t* gcc.target/aarch64/aapcs64/va_arg-15.c: Ditto.\n\nFrom-SVN: r211733", "tree": {"sha": "fb242947be1125948e14e77064bb665ca73037e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb242947be1125948e14e77064bb665ca73037e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3abf17cfaafc64a2813c9304f17d6cc8c063f515", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3abf17cfaafc64a2813c9304f17d6cc8c063f515", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3abf17cfaafc64a2813c9304f17d6cc8c063f515", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3abf17cfaafc64a2813c9304f17d6cc8c063f515/comments", "author": null, "committer": null, "parents": [{"sha": "ba3cf9f153f3113197d0496f33dd993a6ced1bb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba3cf9f153f3113197d0496f33dd993a6ced1bb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba3cf9f153f3113197d0496f33dd993a6ced1bb2"}], "stats": {"total": 173, "additions": 166, "deletions": 7}, "files": [{"sha": "08353945c20b41125d098cf1463fec6e7ec3dfb9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3abf17cfaafc64a2813c9304f17d6cc8c063f515/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3abf17cfaafc64a2813c9304f17d6cc8c063f515/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3abf17cfaafc64a2813c9304f17d6cc8c063f515", "patch": "@@ -1,3 +1,11 @@\n+2014-06-17  Yufeng Zhang  <yufeng.zhang@arm.com>\n+\n+\tPR target/61483\n+\t* config/aarch64/aarch64.c (aarch64_layout_arg): Add new local\n+\tvariable 'size'; calculate 'size' right in the front; use\n+\t'size' to compute 'nregs' (when 'allocate_ncrn != 0') and\n+\tpcum->aapcs_stack_words.\n+\n 2014-06-17  Nick Clifton  <nickc@redhat.com>\n \n \t* config/msp430/msp430.md (mulhisi3): Add a NOP after the DINT."}, {"sha": "e0c25e7afef0a5d66d7a0111df44423cfe387b00", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3abf17cfaafc64a2813c9304f17d6cc8c063f515/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3abf17cfaafc64a2813c9304f17d6cc8c063f515/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=3abf17cfaafc64a2813c9304f17d6cc8c063f515", "patch": "@@ -1504,13 +1504,19 @@ aarch64_layout_arg (cumulative_args_t pcum_v, enum machine_mode mode,\n   CUMULATIVE_ARGS *pcum = get_cumulative_args (pcum_v);\n   int ncrn, nvrn, nregs;\n   bool allocate_ncrn, allocate_nvrn;\n+  HOST_WIDE_INT size;\n \n   /* We need to do this once per argument.  */\n   if (pcum->aapcs_arg_processed)\n     return;\n \n   pcum->aapcs_arg_processed = true;\n \n+  /* Size in bytes, rounded to the nearest multiple of 8 bytes.  */\n+  size\n+    = AARCH64_ROUND_UP (type ? int_size_in_bytes (type) : GET_MODE_SIZE (mode),\n+\t\t\tUNITS_PER_WORD);\n+\n   allocate_ncrn = (type) ? !(FLOAT_TYPE_P (type)) : !FLOAT_MODE_P (mode);\n   allocate_nvrn = aarch64_vfp_is_call_candidate (pcum_v,\n \t\t\t\t\t\t mode,\n@@ -1561,9 +1567,7 @@ aarch64_layout_arg (cumulative_args_t pcum_v, enum machine_mode mode,\n     }\n \n   ncrn = pcum->aapcs_ncrn;\n-  nregs = ((type ? int_size_in_bytes (type) : GET_MODE_SIZE (mode))\n-\t   + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n-\n+  nregs = size / UNITS_PER_WORD;\n \n   /* C6 - C9.  though the sign and zero extension semantics are\n      handled elsewhere.  This is the case where the argument fits\n@@ -1612,13 +1616,12 @@ aarch64_layout_arg (cumulative_args_t pcum_v, enum machine_mode mode,\n   pcum->aapcs_nextncrn = NUM_ARG_REGS;\n \n   /* The argument is passed on stack; record the needed number of words for\n-     this argument (we can re-use NREGS) and align the total size if\n-     necessary.  */\n+     this argument and align the total size if necessary.  */\n on_stack:\n-  pcum->aapcs_stack_words = nregs;\n+  pcum->aapcs_stack_words = size / UNITS_PER_WORD;\n   if (aarch64_function_arg_alignment (mode, type) == 16 * BITS_PER_UNIT)\n     pcum->aapcs_stack_size = AARCH64_ROUND_UP (pcum->aapcs_stack_size,\n-\t\t\t\t\t       16 / UNITS_PER_WORD) + 1;\n+\t\t\t\t\t       16 / UNITS_PER_WORD);\n   return;\n }\n "}, {"sha": "d2ed776e1cbcb6d667552fbe3a85e7f1e28d874f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3abf17cfaafc64a2813c9304f17d6cc8c063f515/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3abf17cfaafc64a2813c9304f17d6cc8c063f515/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3abf17cfaafc64a2813c9304f17d6cc8c063f515", "patch": "@@ -1,3 +1,11 @@\n+2014-06-17  Yufeng Zhang  <yufeng.zhang@arm.com>\n+\n+\tPR target/61483\n+\t* gcc.target/aarch64/aapcs64/type-def.h (struct hfa_fx2_t): New type.\n+\t* gcc.target/aarch64/aapcs64/va_arg-13.c: New test.\n+\t* gcc.target/aarch64/aapcs64/va_arg-14.c: Ditto.\n+\t* gcc.target/aarch64/aapcs64/va_arg-15.c: Ditto.\n+\n 2014-06-17  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/61012"}, {"sha": "07e56fff857476d6d105725e7057257584c74e74", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/type-def.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3abf17cfaafc64a2813c9304f17d6cc8c063f515/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftype-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3abf17cfaafc64a2813c9304f17d6cc8c063f515/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftype-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftype-def.h?ref=3abf17cfaafc64a2813c9304f17d6cc8c063f515", "patch": "@@ -34,6 +34,13 @@ struct hfa_fx2_t\n   float b;\n };\n \n+struct hfa_fx3_t\n+{\n+  float a;\n+  float b;\n+  float c;\n+};\n+\n struct hfa_dx2_t\n {\n   double a;"}, {"sha": "ae1e3ec45cf61e147f32770373bce4d8d9f2f113", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg-13.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3abf17cfaafc64a2813c9304f17d6cc8c063f515/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3abf17cfaafc64a2813c9304f17d6cc8c063f515/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-13.c?ref=3abf17cfaafc64a2813c9304f17d6cc8c063f515", "patch": "@@ -0,0 +1,59 @@\n+/* Test AAPCS64 layout and __builtin_va_start.\n+\n+   Pass named HFA/HVA argument on stack.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg-13.c\"\n+\n+struct float_float_t\n+{\n+  float a;\n+  float b;\n+} float_float;\n+\n+union float_int_t\n+{\n+  float b8;\n+  int b5;\n+} float_int;\n+\n+#define HAS_DATA_INIT_FUNC\n+void\n+init_data ()\n+{\n+  float_float.a = 1.2f;\n+  float_float.b = 2.2f;\n+\n+  float_int.b8 = 4983.80f;\n+}\n+\n+#include \"abitest.h\"\n+#else\n+  ARG (float, 1.0f, S0, 0)\n+  ARG (float, 2.0f, S1, 1)\n+  ARG (float, 3.0f, S2, 2)\n+  ARG (float, 4.0f, S3, 3)\n+  ARG (float, 5.0f, S4, 4)\n+  ARG (float, 6.0f, S5, 5)\n+  ARG (float, 7.0f, S6, 6)\n+  ARG (struct float_float_t, float_float, STACK, 7)\n+  ARG (int,  9, W0, 8)\n+  ARG (int, 10, W1, 9)\n+  ARG (int, 11, W2, 10)\n+  ARG (int, 12, W3, 11)\n+  ARG (int, 13, W4, 12)\n+  ARG (int, 14, W5, 13)\n+  ARG (int, 15, W6, LAST_NAMED_ARG_ID)\n+  DOTS\n+  /* Note on the reason of using 'X7' instead of 'W7' here:\n+     Using 'X7' makes sure the test works in the big-endian mode.\n+     According to PCS rules B.4 and C.10, the size of float_int is rounded\n+     to 8 bytes and prepared in the register X7 as if loaded via LDR from\n+     the memory, with the content of the other 4 bytes unspecified.  The\n+     test framework will only compare the 4 relavent bytes.  */\n+  ANON (union float_int_t, float_int, X7, 15)\n+  LAST_ANON (long long, 12683143434LL, STACK + 8, 16)\n+#endif"}, {"sha": "91080d5afa4495e0b2616caed50f84b3cae0d14c", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg-14.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3abf17cfaafc64a2813c9304f17d6cc8c063f515/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3abf17cfaafc64a2813c9304f17d6cc8c063f515/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-14.c?ref=3abf17cfaafc64a2813c9304f17d6cc8c063f515", "patch": "@@ -0,0 +1,35 @@\n+/* Test AAPCS64 layout and __builtin_va_start.\n+\n+   Pass named HFA/HVA argument on stack.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg-14.c\"\n+#include \"type-def.h\"\n+\n+struct hfa_fx2_t hfa_fx2 = {1.2f, 2.2f};\n+struct hfa_fx3_t hfa_fx3 = {3.2f, 4.2f, 5.2f};\n+vf4_t float32x4 = {6.2f, 7.2f, 8.2f, 9.2f};\n+vf4_t float32x4_2 = {10.2f, 11.2f, 12.2f, 13.2f};\n+\n+#include \"abitest.h\"\n+#else\n+  ARG (float, 1.0f, S0, 0)\n+  ARG (float, 2.0f, S1, 1)\n+  ARG (float, 3.0f, S2, 2)\n+  ARG (float, 4.0f, S3, 3)\n+  ARG (float, 5.0f, S4, 4)\n+  ARG (float, 6.0f, S5, 5)\n+  ARG (float, 7.0f, S6, 6)\n+  ARG (struct hfa_fx3_t, hfa_fx3, STACK, 7)\n+  /* Previous argument size has been rounded up to the nearest multiple of\n+     8 bytes.  */\n+  ARG (struct hfa_fx2_t, hfa_fx2, STACK + 16, 8)\n+  /* NSAA is rounded up to the nearest natural alignment of float32x4.  */\n+  ARG (vf4_t, float32x4, STACK + 32, 9)\n+  ARG (vf4_t, float32x4_2, STACK + 48, LAST_NAMED_ARG_ID)\n+  DOTS\n+  LAST_ANON (double, 123456789.987, STACK + 64, 11)\n+#endif"}, {"sha": "d8fdb322b2fb303d2501e3506d4203bffb1fa303", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/va_arg-15.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3abf17cfaafc64a2813c9304f17d6cc8c063f515/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3abf17cfaafc64a2813c9304f17d6cc8c063f515/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fva_arg-15.c?ref=3abf17cfaafc64a2813c9304f17d6cc8c063f515", "patch": "@@ -0,0 +1,39 @@\n+/* Test AAPCS64 layout and __builtin_va_start.\n+\n+   Pass named __128int argument on stack.  */\n+\n+/* { dg-do run { target aarch64*-*-* } } */\n+\n+#ifndef IN_FRAMEWORK\n+#define AAPCS64_TEST_STDARG\n+#define TESTFILE \"va_arg-15.c\"\n+#include \"type-def.h\"\n+\n+union int128_t qword;\n+\n+#define HAS_DATA_INIT_FUNC\n+void\n+init_data ()\n+{\n+  /* Init signed quad-word integer.  */\n+  qword.l64 = 0xfdb9753102468aceLL;\n+  qword.h64 = 0xeca8642013579bdfLL;\n+}\n+\n+#include \"abitest.h\"\n+#else\n+  ARG (int, 1, W0, 0)\n+  ARG (int, 2, W1, 1)\n+  ARG (int, 3, W2, 2)\n+  ARG (int, 4, W3, 3)\n+  ARG (int, 5, W4, 4)\n+  ARG (int, 6, W5, 5)\n+  ARG (int, 7, W6, 6)\n+  ARG (__int128, qword.i, STACK, LAST_NAMED_ARG_ID)\n+  DOTS\n+#ifndef __AAPCS64_BIG_ENDIAN__\n+  LAST_ANON (int, 8, STACK + 16, 8)\n+#else\n+  LAST_ANON (int, 8, STACK + 20, 8)\n+#endif\n+#endif"}]}