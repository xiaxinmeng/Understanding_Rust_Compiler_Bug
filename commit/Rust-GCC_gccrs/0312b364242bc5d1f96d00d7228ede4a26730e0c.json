{"sha": "0312b364242bc5d1f96d00d7228ede4a26730e0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMxMmIzNjQyNDJiYzVkMWY5NmQwMGQ3MjI4ZWRlNGEyNjczMGUwYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2007-12-13T10:19:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-13T10:19:19Z"}, "message": "system-linux-ia64.ads, [...] (Stack_Check_Limits): New target parameter.\n\n2007-12-06  Eric Botcazou  <ebotcazou@adacore.com>\n\t    Bob Duff  <duff@adacore.com>\n\t    Tristan Gingold  <gingold@adacore.com>\n\n\t* system-linux-ia64.ads, system-freebsd-x86.ads, system-lynxos-ppc.ads, \n\tsystem-lynxos-x86.ads, system-linux-x86_64.ads, system-tru64.ads, \n\tsystem-aix.ads, system-vxworks-sparcv9.ads, system-solaris-x86.ads, \n\tsystem-irix-o32.ads, system-irix-n32.ads, system-hpux.ads, \n\tsystem-vxworks-m68k.ads, system-linux-x86.ads, system-vxworks-mips.ads, \n\tsystem-solaris-sparc.ads, system-solaris-sparcv9.ads, system-vms.ads, \n\tsystem-mingw.ads, system-vms-zcx.ads, system-vxworks-ppc.ads, \n\tsystem-vxworks-arm.ads, system-darwin-x86.ads, system.ads,\n\tsystem-vms_64.ads, system-darwin-ppc.ads, system-vxworks-x86.ads, \n\tsystem-linux-ppc.ads, system-linux-hppa.ads, system-hpux-ia64.ads,\n\tsystem-vms-ia64.ads (Stack_Check_Limits): New target parameter.\n\t(Always_Compatible_Rep): New flag to control trampolines globally.\n\t(Dynamic_Trampolines_Used): New flag for implementing the\n\tNo_Implicit_Dynamic_Code restriction more correctly (not yet used,\n\tand not yet set correctly for some targets).\n\n\t* s-taprop-vxworks.adb: Use stack limit method of stack checking.\n\tSimply indirectly call s-stchop when a task is created.\n\n\t* ali.ads: \n\tNew flag added: Stack_Check_Switch_Set which is set when '-fstack-check'\n\tappears as an argument (entries A) in an ALI file.\n\n\t* fe.h (Stack_Check_Limits): Declare new target parameter.\n\t(Check_Implicit_Dynamic_Code_Allowed): New procedure.\n\n\t* init.c: Declare __gnat_set_stack_limit_hook for VxWorks kernel RTS.\n\tThis variable is declared in C to be sure not subject to elaboration\n\tcode.\n\t(__gnat_map_signal, VxWorks): In kernel mode, map SIGILL to\n\tStorage_Error.\n\n\t* targparm.ads, targparm.adb (Stack_Check_Limits): New parameter.\n\t(Always_Compatible_Rep, Dynamic_Trampolines_Used): New parameters.\n\n\t* s-stchop.ads: Add comments.\n\n\t* s-stchop-vxworks.adb: Package almost fully rewritten to use stack\n\tlimit method of stack checking.\n\n\t* s-stchop-limit.ads: New file.\n\nFrom-SVN: r130814", "tree": {"sha": "3cf3e951f0c6130ad3c9ebea685be075a959511b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cf3e951f0c6130ad3c9ebea685be075a959511b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0312b364242bc5d1f96d00d7228ede4a26730e0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0312b364242bc5d1f96d00d7228ede4a26730e0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0312b364242bc5d1f96d00d7228ede4a26730e0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0312b364242bc5d1f96d00d7228ede4a26730e0c/comments", "author": null, "committer": null, "parents": [{"sha": "def46b5433513c720e7a17c62fa3e1837d905fca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/def46b5433513c720e7a17c62fa3e1837d905fca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/def46b5433513c720e7a17c62fa3e1837d905fca"}], "stats": {"total": 502, "additions": 320, "deletions": 182}, "files": [{"sha": "94715b31196ef5d0ea0fa544529ac3f3fc0309b2", "filename": "gcc/ada/ali.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -476,6 +476,10 @@ package ALI is\n    --  ali files, showing whether a restriction pragma exists anywhere, and\n    --  accumulating the aggregate knowledge of violations.\n \n+   Stack_Check_Switch_Set : Boolean := False;\n+   --  Set to True if at least one ALI file contains '-fstack-check' in its\n+   --  argument list.\n+\n    Static_Elaboration_Model_Used : Boolean := False;\n    --  Set to False by Initialize_ALI. Set to True if any ALI file for a\n    --  non-internal unit compiled with the static elaboration model is"}, {"sha": "09dd27920635c9b80c831901ea500fe1df4c6a28", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2006, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2007, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -175,10 +175,12 @@ extern Boolean Back_Annotate_Rep_Info;\n #define No_Exception_Handlers_Set      restrict__no_exception_handlers_set\n #define Check_No_Implicit_Heap_Alloc   restrict__check_no_implicit_heap_alloc\n #define Check_Elaboration_Code_Allowed restrict__check_elaboration_code_allowed\n+#define Check_Implicit_Dynamic_Code_Allowed restrict__check_implicit_dynamic_code_allowed\n \n extern Boolean No_Exception_Handlers_Set   (void);\n extern void Check_No_Implicit_Heap_Alloc   (Node_Id);\n extern void Check_Elaboration_Code_Allowed (Node_Id);\n+extern void Check_Implicit_Dynamic_Code_Allowed (Node_Id);\n \n /* sem_elim: */\n \n@@ -221,5 +223,7 @@ extern void Set_Has_No_Elaboration_Code\t(Node_Id, Boolean);\n /* targparm: */\n \n #define Stack_Check_Probes_On_Target targparm__stack_check_probes_on_target\n+#define Stack_Check_Limits_On_Target targparm__stack_check_limits_on_target\n \n extern Boolean Stack_Check_Probes_On_Target;\n+extern Boolean Stack_Check_Limits_On_Target;"}, {"sha": "fdfd31a6e2a68568e8bfcd01a6b85485687b00a7", "filename": "gcc/ada/init.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -1713,19 +1713,24 @@ __gnat_map_signal (int sig)\n       msg = \"SIGBUS: possible stack overflow\";\n       break;\n #else\n+#ifdef __RTP__\n+    /* In RTP mode a SIGSEGV is most likely due to a stack overflow,\n+       since stack checking uses the probing mechanism.  */\n     case SIGILL:\n       exception = &constraint_error;\n       msg = \"SIGILL\";\n       break;\n-/* In RTP mode a SIGSEGV is most likely due to a stack overflow. This is not\n-   the case in kernel mode where stack overflow detection uses a comparison\n-   method instead of memory probes. */\n-#ifdef __RTP__\n     case SIGSEGV:\n       exception = &storage_error;\n       msg = \"SIGSEGV: possible stack overflow\";\n       break;\n #else\n+    /* In kernel mode a SIGILL is most likely due to a stack overflow,\n+       since stack checking uses the stack limit mechanism.  */\n+    case SIGILL:\n+      exception = &storage_error;\n+      msg = \"SIGILL: possible stack overflow\";\n+      break;\n     case SIGSEGV:\n       exception = &program_error;\n       msg = \"SIGSEGV\";\n@@ -1826,6 +1831,14 @@ __gnat_init_float (void)\n #endif\n }\n \n+/* This subprogram is called by System.Task_Primitives.Operations.Enter_Task\n+   (if not null) when a new task is created.  It is initialized by\n+   System.Stack_Checking.Operations.Initialize_Stack_Limit.\n+   The use of a hook avoids to drag stack checking subprograms if stack\n+   checking is not used.  */\n+void (*__gnat_set_stack_limit_hook)(void) = (void (*)(void))0;\n+\n+\n /******************/\n /* NetBSD Section */\n /******************/"}, {"sha": "47957915e45b0351b1861d2a52c40178636051b4", "filename": "gcc/ada/s-stchop-limit.ads", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fs-stchop-limit.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fs-stchop-limit.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stchop-limit.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -0,0 +1,55 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                 GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                 --\n+--                                                                          --\n+--     S Y S T E M . S T A C K _ C H E C K I N G . O P E R A T I O N S      --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--          Copyright (C) 1999-2007, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University.       --\n+-- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This version of this package is for implementations which use\n+--  the stack limit approach (the limit of the stack is stored into a per\n+--  thread variable).\n+\n+pragma Restrictions (No_Elaboration_Code);\n+--  We want to guarantee the absence of elaboration code because the binder\n+--  does not handle references to this package.\n+\n+pragma Polling (Off);\n+--  Turn off polling, we do not want polling to take place during stack\n+--  checking operations. It causes infinite loops and other problems.\n+\n+package System.Stack_Checking.Operations is\n+   pragma Preelaborate;\n+\n+   procedure Initialize_Stack_Limit;\n+   pragma Export (C, Initialize_Stack_Limit,\n+                    \"__gnat_initialize_stack_limit\");\n+   --  This procedure is called before elaboration to setup the stack limit\n+   --  for the environment task and to register the hook to be called at\n+   --  task creation.\n+end System.Stack_Checking.Operations;"}, {"sha": "5ed7c982ee320ea368082f7f85cef5c4006501ac", "filename": "gcc/ada/s-stchop-vxworks.adb", "status": "modified", "additions": 53, "deletions": 158, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fs-stchop-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fs-stchop-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stchop-vxworks.adb?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -39,11 +39,8 @@ pragma Restrictions (No_Elaboration_Code);\n --  We want to guarantee the absence of elaboration code because the\n --  binder does not handle references to this package.\n \n-with Ada.Exceptions;\n-\n with System.Storage_Elements; use System.Storage_Elements;\n with System.Parameters; use System.Parameters;\n-with System.Soft_Links;\n with Interfaces.C;\n \n package body System.Stack_Checking.Operations is\n@@ -60,66 +57,55 @@ package body System.Stack_Checking.Operations is\n    --    * selecting INCLUDE_TASK_SHOW when using the Tornado project\n    --      facility.\n \n-   function Set_Stack_Info\n-     (Stack : not null access Stack_Access) return Stack_Access;\n-\n-   --  The function Set_Stack_Info is the actual function that updates the\n-   --  cache containing a pointer to the Stack_Info. It may also be used for\n-   --  detecting asynchronous abort in combination with Invalidate_Self_Cache.\n-\n-   --  Set_Stack_Info should do the following things in order:\n-   --     1) Get the Stack_Access value for the current task\n-   --     2) Set Stack.all to the value obtained in 1)\n-   --     3) Optionally Poll to check for asynchronous abort\n-\n-   --  This order is important because if at any time a write to the stack\n-   --  cache is pending, that write should be followed by a Poll to prevent\n-   --  loosing signals.\n-\n-   --  Note: This function must be compiled with Polling turned off\n-\n-   --  Note: on systems like VxWorks and Linux with real thread-local storage,\n-   --        Set_Stack_Info should return an access value for such local\n-   --        storage. In those cases the cache will always be up-to-date.\n-\n-   --  The following constants should be imported from some system-specific\n-   --  constants package. The constants must be static for performance reasons.\n-\n-   ----------------------------\n-   -- Invalidate_Stack_Cache --\n-   ----------------------------\n-\n-   procedure Invalidate_Stack_Cache (Any_Stack : Stack_Access) is\n-      pragma Warnings (Off, Any_Stack);\n-   begin\n-      Cache := Null_Stack;\n-   end Invalidate_Stack_Cache;\n+   Stack_Limit : Address :=\n+                   Boolean'Pos (Stack_Grows_Down) * Address'First\n+                   + Boolean'Pos (not Stack_Grows_Down) * Address'Last;\n+   pragma Export (C, Stack_Limit, \"__gnat_stack_limit\");\n+   --  Stack_Limit contains the limit of the stack. This variable is later made\n+   --  a task variable (by calling taskVarAdd) and then correctly set to the\n+   --  stack limit of the task. Before being so initialized its value must be\n+   --  valid so that any subprogram with stack checking enabled will run. We\n+   --  use extreme values according to the direction of the stack.\n+\n+   type Set_Stack_Limit_Proc_Acc is access procedure;\n+   pragma Convention (C, Set_Stack_Limit_Proc_Acc);\n+\n+   Set_Stack_Limit_Hook : Set_Stack_Limit_Proc_Acc;\n+   pragma Import (C, Set_Stack_Limit_Hook, \"__gnat_set_stack_limit_hook\");\n+   --  Procedure to be called when a task is created to set stack\n+   --  limit.\n+\n+   procedure Set_Stack_Limit_For_Current_Task;\n+   pragma Convention (C, Set_Stack_Limit_For_Current_Task);\n+   --  Register Initial_SP as the initial stack pointer value for the current\n+   --  task when it starts and Size as the associated stack area size. This\n+   --  should be called once, after the soft-links have been initialized?\n \n    -----------------------------\n-   -- Notify_Stack_Attributes --\n+   --  Initialize_Stack_Limit --\n    -----------------------------\n \n-   procedure Notify_Stack_Attributes\n-     (Initial_SP : System.Address;\n-      Size       : System.Storage_Elements.Storage_Offset)\n-   is\n-      --  We retrieve the attributes directly from Set_Stack_Info below, so\n-      --  this implementation has nothing to do.\n+   procedure Initialize_Stack_Limit is\n+   begin\n+      --  For the environment task.\n+      Set_Stack_Limit_For_Current_Task;\n \n-      pragma Unreferenced (Initial_SP);\n-      pragma Unreferenced (Size);\n+      --  Will be called by every created task.\n+      Set_Stack_Limit_Hook := Set_Stack_Limit_For_Current_Task'Access;\n+   end Initialize_Stack_Limit;\n \n-   begin\n-      null;\n-   end Notify_Stack_Attributes;\n+   --------------------------------------\n+   -- Set_Stack_Limit_For_Current_Task --\n+   --------------------------------------\n+\n+   procedure Set_Stack_Limit_For_Current_Task is\n+      use Interfaces.C;\n \n-   --------------------\n-   -- Set_Stack_Info --\n-   --------------------\n+      --  Import from VxWorks.\n+      function Task_Var_Add (Tid : Interfaces.C.int; Var : Address)\n+                            return Interfaces.C.int;\n+      pragma Import (C, Task_Var_Add, \"taskVarAdd\");\n \n-   function Set_Stack_Info\n-     (Stack : not null access Stack_Access) return Stack_Access\n-   is\n       type OS_Stack_Info is record\n          Size  : Interfaces.C.int;\n          Base  : System.Address;\n@@ -134,114 +120,23 @@ package body System.Stack_Checking.Operations is\n       --  Procedure that fills the stack information associated to the\n       --  currently executing task.\n \n-      My_Stack  : Stack_Access;\n-      Task_Info : aliased OS_Stack_Info;\n+      Stack_Info : aliased OS_Stack_Info;\n \n+      Limit      : System.Address;\n    begin\n-      --  The order of steps 1 .. 3 is important, see specification\n-\n-      --  1) Get the Stack_Access value for the current task\n-\n-      My_Stack := Soft_Links.Get_Stack_Info.all;\n-\n-      if My_Stack.Base = Null_Address then\n-\n-         --  First invocation. Ask the VxWorks kernel about stack values\n-\n-         Get_Stack_Info (Task_Info'Access);\n-\n-         My_Stack.Size  := Storage_Elements.Storage_Offset (Task_Info.Size);\n-         My_Stack.Base  := Task_Info.Base;\n-         My_Stack.Limit := Task_Info.Limit;\n+      --  Get stack bounds from VxWorks.\n+      Get_Stack_Info (Stack_Info'Access);\n \n+      if Stack_Grows_Down then\n+         Limit := Stack_Info.Base - Storage_Offset (Stack_Info.Size);\n+      else\n+         Limit := Stack_Info.Base + Storage_Offset (Stack_Info.Size);\n       end if;\n \n-      --  2) Set Stack.all to the value obtained in 1)\n-\n-      Stack.all := My_Stack;\n-\n-      --  3) Optionally Poll to check for asynchronous abort\n-\n-      if Soft_Links.Check_Abort_Status.all /= 0 then\n-         raise Standard'Abort_Signal;\n-      end if;\n-\n-      --  Never trust the cached value, return local copy!\n-\n-      return My_Stack;\n-   end Set_Stack_Info;\n-\n-   -----------------\n-   -- Stack_Check --\n-   -----------------\n-\n-   function Stack_Check\n-     (Stack_Address : System.Address) return Stack_Access\n-   is\n-      type Frame_Marker is null record;\n-\n-      Marker        : Frame_Marker;\n-      Cached_Stack  : constant Stack_Access := Cache;\n-      Frame_Address : constant System.Address := Marker'Address;\n-\n-   begin\n-      --  The parameter may have wrapped around in System.Address arithmetics.\n-      --  In that case, we have no other choices than raising the exception.\n-\n-      if (Stack_Grows_Down and then Stack_Address > Frame_Address)\n-        or else (not Stack_Grows_Down and then Stack_Address < Frame_Address)\n-      then\n-         Ada.Exceptions.Raise_Exception\n-           (E       => Storage_Error'Identity,\n-            Message => \"stack overflow detected\");\n-      end if;\n-\n-      --  This function first does a \"cheap\" check which is correct if it\n-      --  succeeds. In case of failure, the full check is done. Ideally the\n-      --  cheap check should be done in an optimized manner, or be inlined.\n-\n-      if (Stack_Grows_Down\n-          and then Frame_Address <= Cached_Stack.Base\n-          and then Stack_Address > Cached_Stack.Limit)\n-        or else (not Stack_Grows_Down\n-                   and then Frame_Address >= Cached_Stack.Base\n-                   and then Stack_Address < Cached_Stack.Limit)\n-      then\n-         --  Cached_Stack is valid as it passed the stack check\n-\n-         return Cached_Stack;\n-      end if;\n-\n-      Full_Check :\n-      declare\n-         My_Stack : constant Stack_Access := Set_Stack_Info (Cache'Access);\n-         --  At this point Stack.all might already be invalid, so it is\n-         --  essential to use our local copy of Stack!\n-\n-      begin\n-         if (Stack_Grows_Down\n-               and then Stack_Address < My_Stack.Limit)\n-           or else (not Stack_Grows_Down\n-                      and then Stack_Address > My_Stack.Limit)\n-         then\n-            Ada.Exceptions.Raise_Exception\n-              (E       => Storage_Error'Identity,\n-               Message => \"stack overflow detected\");\n-         end if;\n-\n-         return My_Stack;\n-      end Full_Check;\n-   end Stack_Check;\n-\n-   ------------------------\n-   -- Update_Stack_Cache --\n-   ------------------------\n-\n-   procedure Update_Stack_Cache (Stack : Stack_Access) is\n-   begin\n-      if not Multi_Processor then\n-         Cache := Stack;\n+      --  Note: taskVarAdd implicitly calls taskVarInit if required.\n+      if Task_Var_Add (0, Stack_Limit'Address) = 0 then\n+         Stack_Limit := Limit;\n       end if;\n-   end Update_Stack_Cache;\n+   end Set_Stack_Limit_For_Current_Task;\n \n end System.Stack_Checking.Operations;"}, {"sha": "48bb1a9ab132e66284443de60719fa0200d57a68", "filename": "gcc/ada/s-stchop.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fs-stchop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fs-stchop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stchop.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -51,6 +51,12 @@ package System.Stack_Checking.Operations is\n    --  Set the stack cache for the current task. Note that this is only for\n    --  optimization purposes, nothing can be assumed about the contents of the\n    --  cache at any time, see Set_Stack_Info.\n+   --\n+   --  The stack cache should contain the bounds of the current task.  But\n+   --  because the RTS is not aware of task switches, the stack cache may be\n+   --  incorrect.  So when the stack pointer is not within the bounds of the\n+   --  stack cache, Stack_Check first update the cache (which is a costly\n+   --  operation hence the need of a cache).\n \n    procedure Invalidate_Stack_Cache (Any_Stack : Stack_Access);\n    --  Invalidate cache entries for the task T that owns Any_Stack. This causes"}, {"sha": "5eb4bc99a6842066c503e0149e9a5c53105898ee", "filename": "gcc/ada/s-taprop-vxworks.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fs-taprop-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fs-taprop-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vxworks.adb?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -114,6 +114,14 @@ package body System.Task_Primitives.Operations is\n    Foreign_Task_Elaborated : aliased Boolean := True;\n    --  Used to identified fake tasks (i.e., non-Ada Threads)\n \n+   type Set_Stack_Limit_Proc_Acc is access procedure;\n+   pragma Convention (C, Set_Stack_Limit_Proc_Acc);\n+\n+   Set_Stack_Limit_Hook : Set_Stack_Limit_Proc_Acc;\n+   pragma Import (C, Set_Stack_Limit_Hook, \"__gnat_set_stack_limit_hook\");\n+   --  Procedure to be called when a task is created to set stack\n+   --  limit.\n+\n    --------------------\n    -- Local Packages --\n    --------------------\n@@ -843,6 +851,11 @@ package body System.Task_Primitives.Operations is\n       end loop;\n \n       Unlock_RTS;\n+\n+      --  If stack checking is enabled set the stack limit for this task.\n+      if Set_Stack_Limit_Hook /= null then\n+         Set_Stack_Limit_Hook.all;\n+      end if;\n    end Enter_Task;\n \n    --------------"}, {"sha": "95debf1ceffedb67b343be46e3490e3de373e451", "filename": "gcc/ada/system-aix.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-aix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-aix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-aix.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -142,11 +142,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := False;"}, {"sha": "4d515e2c7c7d343897fb22eacfc6ca081279ae7b", "filename": "gcc/ada/system-darwin-ppc.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-darwin-ppc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-darwin-ppc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-darwin-ppc.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -158,11 +158,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := False;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := True;"}, {"sha": "e79fd97ee33720f3ade86c3ab6ff35c3d19dc7b8", "filename": "gcc/ada/system-darwin-x86.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-darwin-x86.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-darwin-x86.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-darwin-x86.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -158,11 +158,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := False;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := True;"}, {"sha": "6112abe67bcdcf2440c6fd2e9091a0969fe259a5", "filename": "gcc/ada/system-freebsd-x86.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-freebsd-x86.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-freebsd-x86.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-freebsd-x86.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -132,11 +132,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := True;"}, {"sha": "e6190d3c58c74902636c0aad5b72eb81e9c7854f", "filename": "gcc/ada/system-hpux-ia64.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-hpux-ia64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-hpux-ia64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-hpux-ia64.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -132,11 +132,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := False;"}, {"sha": "e7d7a4cc38f74039c73b6936fe9b7ecdb32fb224", "filename": "gcc/ada/system-hpux.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-hpux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-hpux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-hpux.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -132,11 +132,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := True;"}, {"sha": "b76ef1573210aac4cd370c444e7137c9fd9b7f20", "filename": "gcc/ada/system-irix-n32.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-irix-n32.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-irix-n32.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-irix-n32.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -144,11 +144,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := True;"}, {"sha": "4925b320a9f5891365a840f6a3946b874fae2da8", "filename": "gcc/ada/system-irix-o32.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-irix-o32.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-irix-o32.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-irix-o32.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -132,11 +132,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := True;"}, {"sha": "0142e12bfc02ce082c77766b73791a6611082508", "filename": "gcc/ada/system-linux-hppa.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-linux-hppa.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-linux-hppa.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-linux-hppa.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -132,11 +132,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := False;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := True;"}, {"sha": "d8f8d86c83660c311976a3ea1f6bb7ce69435171", "filename": "gcc/ada/system-linux-ia64.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-linux-ia64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-linux-ia64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-linux-ia64.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -140,11 +140,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := True;"}, {"sha": "489268d89acf2bef99597ab4e1436b139eadbe3c", "filename": "gcc/ada/system-linux-ppc.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-linux-ppc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-linux-ppc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-linux-ppc.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -140,11 +140,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := False;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := True;"}, {"sha": "10f0bc8e1bb15e5547f8a3508f53ac1311fd5d73", "filename": "gcc/ada/system-linux-x86.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-linux-x86.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-linux-x86.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-linux-x86.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -140,11 +140,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := False;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := True;"}, {"sha": "9128fc9476202e0da05ecccc88b30118f311054a", "filename": "gcc/ada/system-linux-x86_64.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-linux-x86_64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-linux-x86_64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-linux-x86_64.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -140,11 +140,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := False;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := True;"}, {"sha": "34f2411a3dc1636b6019b18264760598c0e1918f", "filename": "gcc/ada/system-lynxos-ppc.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-lynxos-ppc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-lynxos-ppc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-lynxos-ppc.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -146,11 +146,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := False;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := False;"}, {"sha": "5b87d818ccc8d41584a3ba5027d6d7cfeda82fbe", "filename": "gcc/ada/system-lynxos-x86.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-lynxos-x86.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-lynxos-x86.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-lynxos-x86.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -146,11 +146,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := False;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := False;"}, {"sha": "f311b8b0da70d3eba8fa2f5383e7f5bdd5257ec6", "filename": "gcc/ada/system-mingw.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-mingw.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -132,11 +132,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := False;"}, {"sha": "4b11b5668c481d142580ba2fa5d6e1677d15a0f5", "filename": "gcc/ada/system-solaris-sparc.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-solaris-sparc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-solaris-sparc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-solaris-sparc.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -132,11 +132,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := True;"}, {"sha": "366563fe7c708a7cd9c699f5b19b34993729c16d", "filename": "gcc/ada/system-solaris-sparcv9.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-solaris-sparcv9.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-solaris-sparcv9.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-solaris-sparcv9.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -132,11 +132,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := True;"}, {"sha": "6e25e6f381aa24a1460733b3cc726a22c9beaa92", "filename": "gcc/ada/system-solaris-x86.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-solaris-x86.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-solaris-x86.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-solaris-x86.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -132,11 +132,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := True;"}, {"sha": "85a4c031f6fe00870dbfd3b4cf64f5fedebe8760", "filename": "gcc/ada/system-tru64.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-tru64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-tru64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-tru64.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -132,11 +132,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := True;\n    Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := True;"}, {"sha": "fb9dbbc0eac37ec07658e9450752f130884070a3", "filename": "gcc/ada/system-vms-ia64.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-vms-ia64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-vms-ia64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vms-ia64.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -150,11 +150,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := True;\n    Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := True;"}, {"sha": "0737776413e788c3a469f08dc673703aac6401b0", "filename": "gcc/ada/system-vms-zcx.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-vms-zcx.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-vms-zcx.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vms-zcx.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -133,11 +133,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := True;\n    Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := True;"}, {"sha": "9ba583b8e716c5b06b094e71a19bfd11c6d3c711", "filename": "gcc/ada/system-vms.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vms.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -133,11 +133,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := True;\n    Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := True;"}, {"sha": "389ae0adccf8c5718f5f8cd2321597f8b4787285", "filename": "gcc/ada/system-vms_64.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-vms_64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-vms_64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vms_64.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -150,11 +150,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := True;\n    Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := True;"}, {"sha": "4e1fbf6108caba6567f4a7ddfba0d542839922c1", "filename": "gcc/ada/system-vxworks-arm.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-vxworks-arm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-vxworks-arm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vxworks-arm.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -145,11 +145,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := False;\n+   Stack_Check_Limits        : constant Boolean := True;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := True;\n    ZCX_By_Default            : constant Boolean := False;"}, {"sha": "b5086f7c494f27bab04bb825b61e5a3dde5ac16c", "filename": "gcc/ada/system-vxworks-m68k.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-vxworks-m68k.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-vxworks-m68k.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vxworks-m68k.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -145,11 +145,14 @@ private\n    Signed_Zeros              : constant Boolean := False;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := False;\n+   Stack_Check_Limits        : constant Boolean := True;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := True;\n    ZCX_By_Default            : constant Boolean := False;"}, {"sha": "692a73aefdea4b375edbf9d8c2be48cad3396604", "filename": "gcc/ada/system-vxworks-mips.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-vxworks-mips.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-vxworks-mips.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vxworks-mips.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -145,11 +145,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := False;\n+   Stack_Check_Limits        : constant Boolean := True;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := True;\n    ZCX_By_Default            : constant Boolean := False;"}, {"sha": "4b4d26a791b2353f35b54966757163add3b49901", "filename": "gcc/ada/system-vxworks-ppc.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-vxworks-ppc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-vxworks-ppc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vxworks-ppc.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -145,11 +145,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := False;\n+   Stack_Check_Limits        : constant Boolean := True;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := True;\n    ZCX_By_Default            : constant Boolean := False;"}, {"sha": "dc1be11e1f1085d5f6deb4c21fabb6f7b4327630", "filename": "gcc/ada/system-vxworks-sparcv9.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-vxworks-sparcv9.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-vxworks-sparcv9.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vxworks-sparcv9.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -147,11 +147,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := False;\n+   Stack_Check_Limits        : constant Boolean := True;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := True;\n    ZCX_By_Default            : constant Boolean := False;"}, {"sha": "c24f6a1574b2e6cad7d831508e3e823bbeb84cf9", "filename": "gcc/ada/system-vxworks-x86.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-vxworks-x86.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem-vxworks-x86.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vxworks-x86.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -145,11 +145,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := False;\n+   Stack_Check_Limits        : constant Boolean := True;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := True;\n    ZCX_By_Default            : constant Boolean := False;"}, {"sha": "95fff31af72d6a7f480e63da0fa09aa33b2c50f1", "filename": "gcc/ada/system.ads", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Fsystem.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -36,10 +36,15 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This version of System is a generic version that is used in building\n---  the compiler. Right now, we have a host/target problem if we try to\n---  use the \"proper\" System, and since the compiler itself does not care\n---  about most System parameters, this generic version works fine.\n+--  This version of System is a generic version that is used in building the\n+--  compiler. Right now, we have a host/target problem if we try to use the\n+--  \"proper\" System, and since the compiler itself does not care about most\n+--  System parameters, this generic version works fine.\n+\n+pragma Restrictions (No_Implicit_Dynamic_Code);\n+--  We want to avoid trampolines in the compiler, so it can be used in systems\n+--  which prevent execution of code on the stack, e.g. in windows environments\n+--  with DEP (Data Execution Protection) enabled.\n \n package System is\n    pragma Pure;\n@@ -150,11 +155,14 @@ private\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := False;\n    Stack_Check_Probes        : constant Boolean := False;\n+   Stack_Check_Limits        : constant Boolean := False;\n    Support_64_Bit_Divides    : constant Boolean := True;\n    Support_Aggregates        : constant Boolean := True;\n    Support_Composite_Assign  : constant Boolean := True;\n    Support_Composite_Compare : constant Boolean := True;\n    Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Dynamic_Trampolines_Used  : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := False;"}, {"sha": "7dd1d611567c8ee0700566f29475aa2c564b0eea", "filename": "gcc/ada/targparm.adb", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Ftargparm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Ftargparm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.adb?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -39,13 +39,15 @@ package body Targparm is\n \n    type Targparm_Tags is\n      (AAM,  --   AAMP\n+      ACR,  --   Always_Compatible_Rep\n       BDC,  --   Backend_Divide_Checks\n       BOC,  --   Backend_Overflow_Checks\n       CLA,  --   Command_Line_Args\n       CLI,  --   CLI (.NET)\n       CRT,  --   Configurable_Run_Times\n       D32,  --   Duration_32_Bits\n       DEN,  --   Denorm\n+      DTU,  --   Dynamic_Trampolines_Used\n       EXS,  --   Exit_Status_Supported\n       FEL,  --   Frontend_Layout\n       FFO,  --   Fractional_Fixed_Ops\n@@ -58,6 +60,7 @@ package body Targparm is\n       SCA,  --   Support_Composite_Assign\n       SCC,  --   Support_Composite_Compare\n       SCD,  --   Stack_Check_Default\n+      SCL,  --   Stack_Check_Limits\n       SCP,  --   Stack_Check_Probes\n       SLS,  --   Support_Long_Shifts\n       SNZ,  --   Signed_Zeros\n@@ -73,13 +76,15 @@ package body Targparm is\n    --  The following list of string constants gives the parameter names\n \n    AAM_Str : aliased constant Source_Buffer := \"AAMP\";\n+   ACR_Str : aliased constant Source_Buffer := \"Always_Compatible_Rep\";\n    BDC_Str : aliased constant Source_Buffer := \"Backend_Divide_Checks\";\n    BOC_Str : aliased constant Source_Buffer := \"Backend_Overflow_Checks\";\n    CLA_Str : aliased constant Source_Buffer := \"Command_Line_Args\";\n    CLI_Str : aliased constant Source_Buffer := \"CLI\";\n    CRT_Str : aliased constant Source_Buffer := \"Configurable_Run_Time\";\n    D32_Str : aliased constant Source_Buffer := \"Duration_32_Bits\";\n    DEN_Str : aliased constant Source_Buffer := \"Denorm\";\n+   DTU_Str : aliased constant Source_Buffer := \"Dynamic_Trampolines_Used\";\n    EXS_Str : aliased constant Source_Buffer := \"Exit_Status_Supported\";\n    FEL_Str : aliased constant Source_Buffer := \"Frontend_Layout\";\n    FFO_Str : aliased constant Source_Buffer := \"Fractional_Fixed_Ops\";\n@@ -92,6 +97,7 @@ package body Targparm is\n    SCA_Str : aliased constant Source_Buffer := \"Support_Composite_Assign\";\n    SCC_Str : aliased constant Source_Buffer := \"Support_Composite_Compare\";\n    SCD_Str : aliased constant Source_Buffer := \"Stack_Check_Default\";\n+   SCL_Str : aliased constant Source_Buffer := \"Stack_Check_Limits\";\n    SCP_Str : aliased constant Source_Buffer := \"Stack_Check_Probes\";\n    SLS_Str : aliased constant Source_Buffer := \"Support_Long_Shifts\";\n    SNZ_Str : aliased constant Source_Buffer := \"Signed_Zeros\";\n@@ -107,13 +113,15 @@ package body Targparm is\n    type Buffer_Ptr is access constant Source_Buffer;\n    Targparm_Str : constant array (Targparm_Tags) of Buffer_Ptr :=\n      (AAM_Str'Access,\n+      ACR_Str'Access,\n       BDC_Str'Access,\n       BOC_Str'Access,\n       CLA_Str'Access,\n       CLI_Str'Access,\n       CRT_Str'Access,\n       D32_Str'Access,\n       DEN_Str'Access,\n+      DTU_Str'Access,\n       EXS_Str'Access,\n       FEL_Str'Access,\n       FFO_Str'Access,\n@@ -126,6 +134,7 @@ package body Targparm is\n       SCA_Str'Access,\n       SCC_Str'Access,\n       SCD_Str'Access,\n+      SCL_Str'Access,\n       SCP_Str'Access,\n       SLS_Str'Access,\n       SNZ_Str'Access,\n@@ -168,7 +177,7 @@ package body Targparm is\n          raise Unrecoverable_Error;\n       end if;\n \n-      Targparm.Get_Target_Parameters\n+      Get_Target_Parameters\n         (System_Text  => Text,\n          Source_First => 0,\n          Source_Last  => Hi);\n@@ -544,6 +553,7 @@ package body Targparm is\n \n                   case K is\n                      when AAM => AAMP_On_Target                      := Result;\n+                     when ACR => Always_Compatible_Rep_On_Target     := Result;\n                      when BDC => Backend_Divide_Checks_On_Target     := Result;\n                      when BOC => Backend_Overflow_Checks_On_Target   := Result;\n                      when CLA => Command_Line_Args_On_Target         := Result;\n@@ -555,6 +565,7 @@ package body Targparm is\n                      when CRT => Configurable_Run_Time_On_Target     := Result;\n                      when D32 => Duration_32_Bits_On_Target          := Result;\n                      when DEN => Denorm_On_Target                    := Result;\n+                     when DTU => Dynamic_Trampolines_Used_On_Target  := Result;\n                      when EXS => Exit_Status_Supported_On_Target     := Result;\n                      when FEL => Frontend_Layout_On_Target           := Result;\n                      when FFO => Fractional_Fixed_Ops_On_Target      := Result;\n@@ -571,6 +582,7 @@ package body Targparm is\n                      when SCA => Support_Composite_Assign_On_Target  := Result;\n                      when SCC => Support_Composite_Compare_On_Target := Result;\n                      when SCD => Stack_Check_Default_On_Target       := Result;\n+                     when SCL => Stack_Check_Limits_On_Target        := Result;\n                      when SCP => Stack_Check_Probes_On_Target        := Result;\n                      when SLS => Support_Long_Shifts_On_Target       := Result;\n                      when SSL => Suppress_Standard_Library_On_Target := Result;\n@@ -586,7 +598,7 @@ package body Targparm is\n                   --  Here we are seeing a parameter we do not understand. We\n                   --  simply ignore this (will happen when an old compiler is\n                   --  used to compile a newer version of GNAT which does not\n-                  --  support the\n+                  --  support the parameter).\n                end if;\n             end loop Config_Param_Loop;\n          end if;"}, {"sha": "74e65ea625b748399de0acc9744dc16886a9d525", "filename": "gcc/ada/targparm.ads", "status": "modified", "additions": 51, "deletions": 13, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Ftargparm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0312b364242bc5d1f96d00d7228ede4a26730e0c/gcc%2Fada%2Ftargparm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.ads?ref=0312b364242bc5d1f96d00d7228ede4a26730e0c", "patch": "@@ -31,8 +31,10 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package obtains parameters from the target runtime version of\n---  System, to indicate parameters relevant to the target environment.\n+--  This package obtains parameters from the target runtime version of System,\n+--  to indicate parameters relevant to the target environment.\n+\n+--  Is it right for this to be modified GPL???\n \n --  Conceptually, these parameters could be obtained using rtsfind, but\n --  we do not do this for four reasons:\n@@ -180,12 +182,10 @@ package Targparm is\n    --  The following parameters correspond to the variables defined in the\n    --  private part of System (without the terminating _On_Target). Note\n    --  that it is required that all parameters defined here be specified\n-   --  in the target specific version of system.ads (there are no defaults).\n-\n-   --  All these parameters should be regarded as read only by all clients\n-   --  of the package. The only way they get modified is by calling the\n-   --  Get_Target_Parameters routine which reads the values from a provided\n-   --  text buffer containing the source of the system package.\n+   --  in the target specific version of system.ads. Thus, to add a new\n+   --  parameter, add it to all system*.ads files. (There is a defaulting\n+   --  mechanism, but we don't normally take advantage of it, as explained\n+   --  below.)\n \n    --  The default values here are used if no value is found in system.ads.\n    --  This should normally happen if the special version of system.ads used\n@@ -197,6 +197,11 @@ package Targparm is\n    --  sources, as well as avoiding duplicating values in all system-*.ads\n    --  files for flags that are used on a few platforms only.\n \n+   --  All these parameters should be regarded as read only by all clients\n+   --  of the package. The only way they get modified is by calling the\n+   --  Get_Target_Parameters routine which reads the values from a provided\n+   --  text buffer containing the source of the system package.\n+\n    ----------------------------\n    -- Special Target Control --\n    ----------------------------\n@@ -425,6 +430,23 @@ package Targparm is\n    --  the source program may not contain explicit 64-bit shifts. In addition,\n    --  the code generated for packed arrays will avoid the use of long shifts.\n \n+   --------------------\n+   -- Indirect Calls --\n+   --------------------\n+\n+   Always_Compatible_Rep_On_Target : Boolean := True;\n+   --  If True, the Can_Use_Internal_Rep flag (see Einfo) is set to False in\n+   --  all cases. This corresponds to the traditional code generation\n+   --  strategy. False allows the front end to choose a policy that partly or\n+   --  entirely eliminates dynamically generated trampolines.\n+\n+   Dynamic_Trampolines_Used_On_Target : Boolean := True;\n+   --  True if the back end uses dynamically generated trampolines to implement\n+   --  '[Unrestricted_]Access of nested subprograms when Can_Use_Internal_Rep\n+   --  is False for the access type. (Can_Use_Internal_Rep = True forbids the\n+   --  use of such trampolines.) Used in the implementation of pragma\n+   --  Restrictions (No_Implicit_Dynamic_Code).\n+\n    -------------------------------\n    -- Control of Stack Checking --\n    -------------------------------\n@@ -444,6 +466,18 @@ package Targparm is\n    --      size for the environment task depends on the operating\n    --      system and cannot be set in a system-independent way.\n \n+   --   GCC Stack-limit Mechanism\n+\n+   --      This approach uses the GCC stack limits mechanism.\n+   --      It relies on comparing the stack pointer with the\n+   --      values of a global symbol. If the check fails, a\n+   --      trap is explicitly generated. The advantage is\n+   --      that the mechanism requires no memory protection,\n+   --      but operating system and run-time support are\n+   --      needed to manage the per-task values of the symbol.\n+   --      This is the default method after probing where it\n+   --      is available.\n+\n    --   GNAT Stack-limit Checking\n \n    --      This method relies on comparing the stack pointer\n@@ -452,13 +486,17 @@ package Targparm is\n    --      that the method requires no extra system dependent\n    --      runtime support and can be used on systems without\n    --      memory protection as well, but at the cost of more\n-   --      overhead for doing the check. This method is the\n-   --      default on systems that lack complete support for\n-   --      probing.\n+   --      overhead for doing the check. This is the fallback\n+   --      method if the above two are not supported.\n \n    Stack_Check_Probes_On_Target : Boolean := False;\n-   --  Indicates if stack check probes are used, as opposed to the standard\n-   --  target independent comparison method.\n+   --  Indicates if the GCC probing mechanism is used\n+\n+   Stack_Check_Limits_On_Target : Boolean := False;\n+   --  Indicates if the GCC stack-limit mechanism is used\n+\n+   --  Both flags cannot be simultaneously set to True. If neither\n+   --  is, the target independent fallback method is used.\n \n    Stack_Check_Default_On_Target : Boolean := False;\n    --  Indicates if stack checking is on by default"}]}