{"sha": "979b94ea4d04a42e00b11d5bb9aa415410f31b06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc5Yjk0ZWE0ZDA0YTQyZTAwYjExZDViYjlhYTQxNTQxMGYzMWIwNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-24T15:00:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-24T15:00:26Z"}, "message": "sinfo.ads: Documentation update.\n\n2014-01-24  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sinfo.ads: Documentation update.\n\n2014-01-24  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Constant_Redeclaration): New declaration is\n\tillegal if previous one has an initial expression that is an\n\taggregate expanded into assignments.\n\n2014-01-24  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Loop_Parameter_Specification): Small\n\tcode reorganization to remove spurious warning on a loop with\n\tan array element iterator that has a null range.\n\nFrom-SVN: r207041", "tree": {"sha": "22cbc8113b212b7288ffd3d7ebe17235a9e86205", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22cbc8113b212b7288ffd3d7ebe17235a9e86205"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/979b94ea4d04a42e00b11d5bb9aa415410f31b06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/979b94ea4d04a42e00b11d5bb9aa415410f31b06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/979b94ea4d04a42e00b11d5bb9aa415410f31b06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/979b94ea4d04a42e00b11d5bb9aa415410f31b06/comments", "author": null, "committer": null, "parents": [{"sha": "8edc33fae4cfe74e0e485e80ab6edcb3d5d1e1de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8edc33fae4cfe74e0e485e80ab6edcb3d5d1e1de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8edc33fae4cfe74e0e485e80ab6edcb3d5d1e1de"}], "stats": {"total": 118, "additions": 96, "deletions": 22}, "files": [{"sha": "59072a6e5633fa50ccbfe5d2af44729d4a404534", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/979b94ea4d04a42e00b11d5bb9aa415410f31b06/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/979b94ea4d04a42e00b11d5bb9aa415410f31b06/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=979b94ea4d04a42e00b11d5bb9aa415410f31b06", "patch": "@@ -1,3 +1,35 @@\n+2014-01-24  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sinfo.ads: Documentation update.\n+\n+2014-01-24  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Constant_Redeclaration): New declaration is\n+\tillegal if previous one has an initial expression that is an\n+\taggregate expanded into assignments.\n+\n+2014-01-24  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Loop_Parameter_Specification): Small\n+\tcode reorganization to remove spurious warning on a loop with\n+\tan array element iterator that has a null range.\n+\n+2014-01-24  Vincent Celier  <celier@adacore.com>\n+\n+\t* make.adb (Binding_Phase): When setting the Ada paths, use\n+\tthe library ALI dir, not the object dir in libraries.\n+\n+2014-01-24  Yannick Moy  <moy@adacore.com>\n+\n+\t* sinfo.ads: Add documentation of check flag fields.\n+\n+2014-01-24  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Actuals): If an actual is a view\n+\tconversion of a discriminated object, and the formal type is\n+\tdiscriminated and constrained, apply a discriminant check to\n+\tthe object itself.\n+\n 2014-01-24  Robert Dewar  <dewar@adacore.com>\n \n \t* prj.adb, prj-env.adb, back_end.adb: Add comment, minor code clean ups."}, {"sha": "014105bedb5b866229cb949675cc18b51a3ffaca", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/979b94ea4d04a42e00b11d5bb9aa415410f31b06/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/979b94ea4d04a42e00b11d5bb9aa415410f31b06/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=979b94ea4d04a42e00b11d5bb9aa415410f31b06", "patch": "@@ -11104,10 +11104,13 @@ package body Sem_Ch3 is\n       --  If previous full declaration or a renaming declaration exists, or if\n       --  a homograph is present, let Enter_Name handle it, either with an\n       --  error or with the removal of an overridden implicit subprogram.\n+      --  The previous one is a full declaration if it has an expression\n+      --  (which in the case of an aggregate is indicated by the Init flag).\n \n       if Ekind (Prev) /= E_Constant\n         or else Nkind (Parent (Prev)) = N_Object_Renaming_Declaration\n         or else Present (Expression (Parent (Prev)))\n+        or else Has_Init_Expression (Parent (Prev))\n         or else Present (Full_View (Prev))\n       then\n          Enter_Name (Id);"}, {"sha": "1d647094288ee27b7d3a881bb4a82e2032c4c4b4", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/979b94ea4d04a42e00b11d5bb9aa415410f31b06/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/979b94ea4d04a42e00b11d5bb9aa415410f31b06/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=979b94ea4d04a42e00b11d5bb9aa415410f31b06", "patch": "@@ -2457,9 +2457,11 @@ package body Sem_Ch5 is\n \n       --  Check for null or possibly null range and issue warning. We suppress\n       --  such messages in generic templates and instances, because in practice\n-      --  they tend to be dubious in these cases.\n+      --  they tend to be dubious in these cases. The check applies as well to\n+      --  rewritten array element loops where a null range may be detected\n+      --  statically.\n \n-      if Nkind (DS) = N_Range and then Comes_From_Source (N) then\n+      if Nkind (DS) = N_Range then\n          declare\n             L : constant Node_Id := Low_Bound  (DS);\n             H : constant Node_Id := High_Bound (DS);\n@@ -2481,21 +2483,23 @@ package body Sem_Ch5 is\n                   if Compile_Time_Compare\n                        (L, H, Assume_Valid => False) = GT\n                   then\n-                     Error_Msg_N\n-                       (\"??loop range is null, loop will not execute\", DS);\n-\n                      --  Since we know the range of the loop is null, set the\n                      --  appropriate flag to remove the loop entirely during\n                      --  expansion.\n \n                      Set_Is_Null_Loop (Loop_Nod);\n \n-                  --  Here is where the loop could execute because of invalid\n-                  --  values, so issue appropriate message and in this case we\n-                  --  do not set the Is_Null_Loop flag since the loop may\n-                  --  execute.\n+                     if Comes_From_Source (N) then\n+                        Error_Msg_N\n+                          (\"??loop range is null, loop will not execute\", DS);\n+                     end if;\n \n-                  else\n+                     --  Here is where the loop could execute because of\n+                     --  invalid values, so issue appropriate message and in\n+                     --  this case we do not set the Is_Null_Loop flag since\n+                     --  the loop may execute.\n+\n+                  elsif Comes_From_Source (N) then\n                      Error_Msg_N\n                        (\"??loop range may be null, loop may not execute\",\n                         DS);"}, {"sha": "f71fdd0a0ae60e5f8dc7a73353f6c2d5b4ca0800", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 47, "deletions": 12, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/979b94ea4d04a42e00b11d5bb9aa415410f31b06/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/979b94ea4d04a42e00b11d5bb9aa415410f31b06/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=979b94ea4d04a42e00b11d5bb9aa415410f31b06", "patch": "@@ -516,12 +516,12 @@ package Sinfo is\n    --  expansion is performed and the analysis must generate a tree in a\n    --  form that meets additional requirements.\n \n-   --  This light expansion does two transformations of the tree, that cannot\n-   --  be postponed after the frontend semantic analysis:\n+   --  This light expansion does two transformations of the tree that cannot\n+   --  be postponed after semantic analysis:\n \n    --    1. Replace object renamings by renamed object. This requires the\n-   --       introdtion of temporaries at the point of the renaming, which must\n-   --       be properly analyzed.\n+   --       introduction of temporaries at the point of the renaming, which\n+   --       must be properly analyzed.\n \n    --    2. Fully qualify entity names. This is needed to generate suitable\n    --       local effects and call-graphs in ALI files, with the completely\n@@ -549,6 +549,39 @@ package Sinfo is\n    --  not make sense from a user point-of-view, and that cross-references that\n    --  do not lead to data dependences for subprograms can be safely ignored.\n \n+   -----------------------\n+   -- Check Flag Fields --\n+   -----------------------\n+\n+   --  The following flag fields appear in expression nodes:\n+\n+   --  Do_Division_Check\n+   --  Do_Overflow_Check\n+   --  Do_Range_Check\n+\n+   --  These three flags are always set by the front end during semantic\n+   --  analysis, on expression nodes that may trigger the corresponding\n+   --  check. The front end then inserts or not the check during expansion.\n+   --  In particular, these flags should also be correctly set in ASIS mode\n+   --  and GNATprove mode.\n+\n+   --  Note that this accounts for all nodes that trigger the corresponding\n+   --  checks, except for range checks on subtype_indications, which may be\n+   --  required to check that a range_constraint is compatible with the given\n+   --  subtype (RM 3.2.2(11)).\n+\n+   --  The following flag fields appear in various nodes:\n+\n+   --  Do_Accessibility_Check\n+   --  Do_Discriminant_Check\n+   --  Do_Length_Check\n+   --  Do_Storage_Check\n+   --  Do_Tag_Check\n+\n+   --  These flags are used in some specific cases by the front end, either\n+   --  during semantic analysis or during expansion, and cannot be expected\n+   --  to be set on all nodes that trigger the corresponding check.\n+\n    ------------------------\n    -- Common Flag Fields --\n    ------------------------\n@@ -2430,12 +2463,14 @@ package Sinfo is\n       --  Etype (Node5-Sem)\n       --  Must_Not_Freeze (Flag8-Sem)\n \n-      --  Note: Etype is a copy of the Etype field of the Subtype_Mark. The\n-      --  reason for this redundancy is so that in a list of array index types,\n-      --  the Etype can be uniformly accessed to determine the subscript type.\n-      --  This means that no Itype is constructed for the actual subtype that\n-      --  is created by the subtype indication. If such an Itype is required,\n-      --  it is constructed in the context in which the indication appears.\n+      --  Note: Depending on context, the Etype is either the entity of the\n+      --  Subtype_Mark field, or it is an itype constructed to reify the\n+      --  subtype indication. In particular, such itypes are created for a\n+      --  subtype indication that appears in an array type declaration. This\n+      --  simplifies constraint checking in indexed components.\n+\n+      --  For subtype indications that appear in scalar type and subtype\n+      --  declarations, the Etype is the entity of the subtype mark.\n \n       -------------------------\n       -- 3.2.2  Subtype Mark --\n@@ -7325,7 +7360,7 @@ package Sinfo is\n       --  N_Expression_With_Actions has type Standard_Void_Type. However some\n       --  backends do not support such expression-with-actions occurring\n       --  outside of a proper (non-void) expression, so this should just be\n-      --  used as an intermediate representation within the front-end. Also\n+      --  used as an intermediate representation within the front end. Also\n       --  note that this is really an irregularity (expressions and statements\n       --  are not interchangeable, and in particular an N_Null_Statement is\n       --  not a proper expression), and in the long term all cases of this\n@@ -7746,7 +7781,7 @@ package Sinfo is\n       --  e.g. involving unconstrained array types.\n \n       --  For the case of the standard gigi backend, this means that all\n-      --  checks are done in the front-end.\n+      --  checks are done in the front end.\n \n       --  However, in the case of specialized back-ends, notably the JVM\n       --  backend for JGNAT, additional requirements and restrictions apply"}]}