{"sha": "258a120bab5d85ac9541551620ff0fc24de1c354", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU4YTEyMGJhYjVkODVhYzk1NDE1NTE2MjBmZjBmYzI0ZGUxYzM1NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.soma.redhat.com", "date": "2000-06-06T03:37:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-06-06T03:37:50Z"}, "message": "explow.c (maybe_set_unchanging): New function, broken out from...\n\n        * explow.c (maybe_set_unchanging): New function, broken out from...\n        (set_mem_attributes): Here.\n        * expr.h: Declare it.\n        * stmt.c (expand_decl): Call it.\n\nFrom-SVN: r34421", "tree": {"sha": "f6353c2b2d7aabfa8a09b3b3da4ca7183de48eab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6353c2b2d7aabfa8a09b3b3da4ca7183de48eab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/258a120bab5d85ac9541551620ff0fc24de1c354", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/258a120bab5d85ac9541551620ff0fc24de1c354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/258a120bab5d85ac9541551620ff0fc24de1c354", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/258a120bab5d85ac9541551620ff0fc24de1c354/comments", "author": null, "committer": null, "parents": [{"sha": "c9d8a8136198b464ef8de88f9ea5d8364d848e8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9d8a8136198b464ef8de88f9ea5d8364d848e8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9d8a8136198b464ef8de88f9ea5d8364d848e8b"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "bb74239d12abab5815a148f8f0991d571d224c58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/258a120bab5d85ac9541551620ff0fc24de1c354/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/258a120bab5d85ac9541551620ff0fc24de1c354/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=258a120bab5d85ac9541551620ff0fc24de1c354", "patch": "@@ -1,3 +1,10 @@\n+2000-06-05  Jason Merrill  <jason@casey.soma.redhat.com>\n+\n+\t* explow.c (maybe_set_unchanging): New function, broken out from...\n+\t(set_mem_attributes): Here.\n+\t* expr.h: Declare it.\n+\t* stmt.c (expand_decl): Call it.\n+\n 2000-06-05  Richard Henderson  <rth@cygnus.com>\n \n \t* reload1.c (choose_reload_regs): Mind CLASS_CANNOT_CHANGE_SIZE"}, {"sha": "9f7eada363e09f85a4c9fc59aa2bc886ff4f27d2", "filename": "gcc/explow.c", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/258a120bab5d85ac9541551620ff0fc24de1c354/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/258a120bab5d85ac9541551620ff0fc24de1c354/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=258a120bab5d85ac9541551620ff0fc24de1c354", "patch": "@@ -628,6 +628,27 @@ validize_mem (ref)\n   return change_address (ref, GET_MODE (ref), XEXP (ref, 0));\n }\n \f\n+/* Given REF, either a MEM or a REG, and T, either the type of X or\n+   the expression corresponding to REF, set RTX_UNCHANGING_P if\n+   appropriate.  */\n+\n+void\n+maybe_set_unchanging (ref, t)\n+     rtx ref;\n+     tree t;\n+{\n+  /* We can set RTX_UNCHANGING_P from TREE_READONLY for decls whose\n+     initialization is only executed once, or whose initializer always\n+     has the same value.  Currently we simplify this to PARM_DECLs in the\n+     first case, and decls with TREE_CONSTANT initializers in the second.  */\n+  if ((TREE_READONLY (t) && DECL_P (t)\n+       && (TREE_CODE (t) == PARM_DECL\n+\t   || DECL_INITIAL (t) == NULL_TREE\n+\t   || TREE_CONSTANT (DECL_INITIAL (t))))\n+      || TREE_CODE_CLASS (TREE_CODE (t)) == 'c')\n+    RTX_UNCHANGING_P (ref) = 1;\n+}\n+\n /* Given REF, a MEM, and T, either the type of X or the expression\n    corresponding to REF, set the memory attributes.  OBJECTP is nonzero\n    if we are making a new object of this type.  */\n@@ -642,8 +663,12 @@ set_mem_attributes (ref, t, objectp)\n \n   /* Get the alias set from the expression or type (perhaps using a\n      front-end routine) and then copy bits from the type.  */\n+\n+  /* It is incorrect to set RTX_UNCHANGING_P from TREE_READONLY (type)\n+     here, because, in C and C++, the fact that a location is accessed\n+     through a const expression does not mean that the value there can\n+     never change.  */\n   MEM_ALIAS_SET (ref) = get_alias_set (t);\n-  RTX_UNCHANGING_P (ref) = TYPE_READONLY (type);\n   MEM_VOLATILE_P (ref) = TYPE_VOLATILE (type);\n   MEM_IN_STRUCT_P (ref) = AGGREGATE_TYPE_P (type);\n \n@@ -657,8 +682,7 @@ set_mem_attributes (ref, t, objectp)\n   if (TYPE_P (t))\n     return;\n \n-  if (TREE_READONLY (t) || TREE_CODE_CLASS (TREE_CODE (t)) == 'c')\n-    RTX_UNCHANGING_P (ref) = 1;\n+  maybe_set_unchanging (ref, t);\n   if (TREE_THIS_VOLATILE (t))\n     MEM_VOLATILE_P (ref) = 1;\n "}, {"sha": "b822ea24815cd37cb60f28448c493798cc34e6ef", "filename": "gcc/expr.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/258a120bab5d85ac9541551620ff0fc24de1c354/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/258a120bab5d85ac9541551620ff0fc24de1c354/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=258a120bab5d85ac9541551620ff0fc24de1c354", "patch": "@@ -1150,6 +1150,11 @@ extern rtx change_address PARAMS ((rtx, enum machine_mode, rtx));\n extern rtx validize_mem PARAMS ((rtx));\n \n #ifdef TREE_CODE\n+/* Given REF, either a MEM or a REG, and T, either the type of X or\n+   the expression corresponding to REF, set RTX_UNCHANGING_P if\n+   appropriate.  */\n+extern void maybe_set_unchanging PARAMS ((rtx, tree));\n+\n /* Given REF, a MEM, and T, either the type of X or the expression\n    corresponding to REF, set the memory attributes.  OBJECTP is nonzero\n    if we are making a new object of this type.  */"}, {"sha": "fe0d58e9a4972388707106c840aaa48ffdc9511f", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/258a120bab5d85ac9541551620ff0fc24de1c354/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/258a120bab5d85ac9541551620ff0fc24de1c354/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=258a120bab5d85ac9541551620ff0fc24de1c354", "patch": "@@ -3817,9 +3817,8 @@ expand_decl (decl)\n       if (POINTER_TYPE_P (type))\n \tmark_reg_pointer (DECL_RTL (decl),\n \t\t\t  TYPE_ALIGN (TREE_TYPE (TREE_TYPE (decl))));\n-\t\t\t  \n-      if (TREE_READONLY (decl))\n-\tRTX_UNCHANGING_P (DECL_RTL (decl)) = 1;\n+\n+      maybe_set_unchanging (DECL_RTL (decl), decl);\n     }\n \n   else if (TREE_CODE (DECL_SIZE_UNIT (decl)) == INTEGER_CST"}]}