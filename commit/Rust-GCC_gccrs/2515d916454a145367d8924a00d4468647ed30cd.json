{"sha": "2515d916454a145367d8924a00d4468647ed30cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUxNWQ5MTY0NTRhMTQ1MzY3ZDg5MjRhMDBkNDQ2ODY0N2VkMzBjZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-04-16T09:25:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-04-16T09:25:14Z"}, "message": "re PR tree-optimization/52975 (Ofast produces not optimized code for vectorized \"converted if\")\n\n2012-04-16  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/52975\n\t* tree-ssa-forwprop.c (combine_cond_exprs): New function.\n\t(ssa_forward_propagate_and_combine): Call it for COND_EXPRs\n\tand VEC_COND_EXPRs.  Also combine into VEC_COND_EXPRs condition.\n\t* fold-const.c (operand_equal_p): Handle TARGET_MEM_REF.\n\nFrom-SVN: r186488", "tree": {"sha": "49b6bc580d6294485fb21f111c49282f11b8efdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49b6bc580d6294485fb21f111c49282f11b8efdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2515d916454a145367d8924a00d4468647ed30cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2515d916454a145367d8924a00d4468647ed30cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2515d916454a145367d8924a00d4468647ed30cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2515d916454a145367d8924a00d4468647ed30cd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "42ff605a7b16220b75a640ff22a32f4acd62802e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42ff605a7b16220b75a640ff22a32f4acd62802e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42ff605a7b16220b75a640ff22a32f4acd62802e"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "5ae727b8374b0d7ab51e4bd4e936671210914d88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2515d916454a145367d8924a00d4468647ed30cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2515d916454a145367d8924a00d4468647ed30cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2515d916454a145367d8924a00d4468647ed30cd", "patch": "@@ -1,3 +1,11 @@\n+2012-04-16  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/52975\n+\t* tree-ssa-forwprop.c (combine_cond_exprs): New function.\n+\t(ssa_forward_propagate_and_combine): Call it for COND_EXPRs\n+\tand VEC_COND_EXPRs.  Also combine into VEC_COND_EXPRs condition.\n+\t* fold-const.c (operand_equal_p): Handle TARGET_MEM_REF.\n+\n 2012-04-14  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sse.md (ssse3_plusminus): New code iterator."}, {"sha": "8aceb733e7d14cc8cf9723423ebc378ef30e8d81", "filename": "gcc/fold-const.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2515d916454a145367d8924a00d4468647ed30cd/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2515d916454a145367d8924a00d4468647ed30cd/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=2515d916454a145367d8924a00d4468647ed30cd", "patch": "@@ -2562,6 +2562,14 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \tcase IMAGPART_EXPR:\n \t  return OP_SAME (0);\n \n+\tcase TARGET_MEM_REF:\n+\t  /* Require equal extra operands and then fall thru to MEM_REF\n+\t     handling of the two common operands.  */\n+\t  if (!OP_SAME_WITH_NULL (2)\n+\t      || !OP_SAME_WITH_NULL (3)\n+\t      || !OP_SAME_WITH_NULL (4))\n+\t    return 0;\n+\t  /* Fallthru.  */\n \tcase MEM_REF:\n \t  /* Require equal access sizes, and similar pointer types.\n \t     We can have incomplete types for array references of"}, {"sha": "3e2371bc83ca513d9527087e1e81da7c7d6ca9a9", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2515d916454a145367d8924a00d4468647ed30cd/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2515d916454a145367d8924a00d4468647ed30cd/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=2515d916454a145367d8924a00d4468647ed30cd", "patch": "@@ -632,6 +632,58 @@ forward_propagate_into_cond (gimple_stmt_iterator *gsi_p)\n   return 0;\n }\n \n+/* Propagate from the ssa name definition statements of COND_EXPR\n+   values in the rhs of statement STMT into the conditional arms\n+   if that simplifies it.\n+   Returns true if the stmt was changed.  */\n+\n+static bool\n+combine_cond_exprs (gimple_stmt_iterator *gsi_p)\n+{\n+  gimple stmt = gsi_stmt (*gsi_p);\n+  tree cond, val1, val2;\n+  bool changed = false;\n+\n+  cond = gimple_assign_rhs1 (stmt);\n+  val1 = gimple_assign_rhs2 (stmt);\n+  if (TREE_CODE (val1) == SSA_NAME)\n+    {\n+      gimple def_stmt = SSA_NAME_DEF_STMT (val1);\n+      if (is_gimple_assign (def_stmt)\n+\t  && gimple_assign_rhs_code (def_stmt) == gimple_assign_rhs_code (stmt)\n+\t  && operand_equal_p (gimple_assign_rhs1 (def_stmt), cond, 0))\n+\t{\n+\t  val1 = unshare_expr (gimple_assign_rhs2 (def_stmt));\n+\t  gimple_assign_set_rhs2 (stmt, val1);\n+\t  changed = true;\n+\t}\n+    }\n+  val2 = gimple_assign_rhs3 (stmt);\n+  if (TREE_CODE (val2) == SSA_NAME)\n+    {\n+      gimple def_stmt = SSA_NAME_DEF_STMT (val2);\n+      if (is_gimple_assign (def_stmt)\n+\t  && gimple_assign_rhs_code (def_stmt) == gimple_assign_rhs_code (stmt)\n+\t  && operand_equal_p (gimple_assign_rhs1 (def_stmt), cond, 0))\n+\t{\n+\t  val2 = unshare_expr (gimple_assign_rhs3 (def_stmt));\n+\t  gimple_assign_set_rhs3 (stmt, val2);\n+\t  changed = true;\n+\t}\n+    }\n+  if (operand_equal_p (val1, val2, 0))\n+    {\n+      gimple_assign_set_rhs_from_tree (gsi_p, val1);\n+      stmt = gsi_stmt (*gsi_p);\n+      changed = true;\n+    }\n+\n+  if (changed)\n+    update_stmt (stmt);\n+\n+  return changed;\n+}\n+\n /* We've just substituted an ADDR_EXPR into stmt.  Update all the\n    relevant data structures to match.  */\n \n@@ -2480,10 +2532,12 @@ ssa_forward_propagate_and_combine (void)\n \t\t     || code == NEGATE_EXPR)\n \t\t    && TREE_CODE (rhs1) == SSA_NAME)\n \t\t  changed = simplify_not_neg_expr (&gsi);\n-\t\telse if (code == COND_EXPR)\n+\t\telse if (code == COND_EXPR\n+\t\t\t || code == VEC_COND_EXPR)\n \t\t  {\n \t\t    /* In this case the entire COND_EXPR is in rhs1. */\n \t\t    changed |= forward_propagate_into_cond (&gsi);\n+\t\t    changed |= combine_cond_exprs (&gsi);\n \t\t    stmt = gsi_stmt (gsi);\n \t\t  }\n \t\telse if (TREE_CODE_CLASS (code) == tcc_comparison)"}]}