{"sha": "6b643efd4f1ae7dc3e7efa308f715350f504bab6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI2NDNlZmQ0ZjFhZTdkYzNlN2VmYTMwOGY3MTUzNTBmNTA0YmFiNg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-09-03T18:48:59Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-09-03T18:48:59Z"}, "message": "i386.md (*bt<mode>): Use nonimmediate_operand predicate for operand 1.\n\n\t* config/i386/i386.md (*bt<mode>): Use nonimmediate_operand\n\tpredicate for operand 1.  Add (m,<S>) constraint.\n\t(*jcc_bt<mode>): Use nonimmediate_operand predicate for operand 1.\n\tPrevent memory operand 1 with register operand 2.\n\nFrom-SVN: r251625", "tree": {"sha": "93920495a16f6f110a343574ba97c6651556a003", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93920495a16f6f110a343574ba97c6651556a003"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b643efd4f1ae7dc3e7efa308f715350f504bab6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b643efd4f1ae7dc3e7efa308f715350f504bab6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b643efd4f1ae7dc3e7efa308f715350f504bab6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b643efd4f1ae7dc3e7efa308f715350f504bab6/comments", "author": null, "committer": null, "parents": [{"sha": "9c32e72d62be80412dacc5cb5f8e857d9e938ca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c32e72d62be80412dacc5cb5f8e857d9e938ca4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c32e72d62be80412dacc5cb5f8e857d9e938ca4"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "3b758d21358128edf2b4ed31e8374ab7b5054add", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b643efd4f1ae7dc3e7efa308f715350f504bab6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b643efd4f1ae7dc3e7efa308f715350f504bab6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b643efd4f1ae7dc3e7efa308f715350f504bab6", "patch": "@@ -1,3 +1,10 @@\n+2017-09-03  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*bt<mode>): Use nonimmediate_operand\n+\tpredicate for operand 1.  Add (m,<S>) constraint.\n+\t(*jcc_bt<mode>): Use nonimmediate_operand predicate for operand 1.\n+\tPrevent memory operand 1 with register operand 2.\n+\n 2017-09-01  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR rtl-optimization/82024\n@@ -8,9 +15,11 @@\n 2017-09-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/81766\n-\t* config/i386/i386.c (ix86_init_large_pic_reg): Return label instead of void.\n-\t(ix86_init_pic_reg): Remember label from ix86_init_large_pic_reg, if non-NULL\n-\tand preceded by NOTE_INSN_BASIC_BLOCK, swap the note and label.\n+\t* config/i386/i386.c (ix86_init_large_pic_reg): Return label\n+\tinstead of void.\n+\t(ix86_init_pic_reg): Remember label from ix86_init_large_pic_reg,\n+\tif non-NULL and preceded by NOTE_INSN_BASIC_BLOCK, swap the note\n+\tand label.\n \n 2017-09-01  Joerg Sonnenberger  <joerg@bec.de>\n \t    Jeff Law  <law@redhat.com>"}, {"sha": "4cbd8cd551e7188c0f983f47cdafc4078a9fea9a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b643efd4f1ae7dc3e7efa308f715350f504bab6/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b643efd4f1ae7dc3e7efa308f715350f504bab6/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6b643efd4f1ae7dc3e7efa308f715350f504bab6", "patch": "@@ -11217,9 +11217,9 @@\n   [(set (reg:CCC FLAGS_REG)\n \t(compare:CCC\n \t  (zero_extract:SWI48\n-\t    (match_operand:SWI48 0 \"register_operand\" \"r\")\n+\t    (match_operand:SWI48 0 \"nonimmediate_operand\" \"r,m\")\n \t    (const_int 1)\n-\t    (match_operand:SI 1 \"nonmemory_operand\" \"r<S>\"))\n+\t    (match_operand:SI 1 \"nonmemory_operand\" \"r<S>,<S>\"))\n \t  (const_int 0)))]\n   \"\"\n {\n@@ -11248,7 +11248,7 @@\n   [(set (pc)\n   \t(if_then_else (match_operator 0 \"bt_comparison_operator\"\n \t\t\t[(zero_extract:SWI48\n-\t\t\t   (match_operand:SWI48 1 \"register_operand\")\n+\t\t\t   (match_operand:SWI48 1 \"nonimmediate_operand\")\n \t\t\t   (const_int 1)\n \t\t\t   (match_operand:SI 2 \"nonmemory_operand\"))\n \t\t\t (const_int 0)])\n@@ -11260,7 +11260,7 @@\n        ? (INTVAL (operands[2]) < GET_MODE_BITSIZE (<MODE>mode)\n \t  && INTVAL (operands[2])\n \t       >= (optimize_function_for_size_p (cfun) ? 8 : 32))\n-       : register_operand (operands[2], SImode))\n+       : !memory_operand (operands[1], <MODE>mode))\n    && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\""}]}