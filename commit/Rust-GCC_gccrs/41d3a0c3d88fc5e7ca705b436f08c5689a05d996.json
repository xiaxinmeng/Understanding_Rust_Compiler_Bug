{"sha": "41d3a0c3d88fc5e7ca705b436f08c5689a05d996", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFkM2EwYzNkODhmYzVlN2NhNzA1YjQzNmYwOGM1Njg5YTA1ZDk5Ng==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-11-08T21:17:30Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-11-08T21:17:30Z"}, "message": "re PR libstdc++/12967 (Resolution of DR 300 [WP] still unimplemented)\n\n2003-11-08  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/12967\n\t* include/bits/list.tcc (merge): Implement resolution of\n\tDR 300 [WP].\n\t* docs/html/ext/howto.html: Add entry for DR 300; tweak entry\n\tfor DR 231.\n\n\t* docs/html/ext/lwg-active.html, docs/html/ext/lwg-defects.html:\n\tImport R27.\n\nFrom-SVN: r73377", "tree": {"sha": "9ed88946b233f49efbf9c3a7ed919fb516ff9791", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ed88946b233f49efbf9c3a7ed919fb516ff9791"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41d3a0c3d88fc5e7ca705b436f08c5689a05d996", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41d3a0c3d88fc5e7ca705b436f08c5689a05d996", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41d3a0c3d88fc5e7ca705b436f08c5689a05d996", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41d3a0c3d88fc5e7ca705b436f08c5689a05d996/comments", "author": null, "committer": null, "parents": [{"sha": "b9bc36658cc8bd055ea64cfc8b3623ee736b10b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9bc36658cc8bd055ea64cfc8b3623ee736b10b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9bc36658cc8bd055ea64cfc8b3623ee736b10b3"}], "stats": {"total": 12675, "additions": 7410, "deletions": 5265}, "files": [{"sha": "afd8d1d1e356757534403af97796ce9c14148a49", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41d3a0c3d88fc5e7ca705b436f08c5689a05d996/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41d3a0c3d88fc5e7ca705b436f08c5689a05d996/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=41d3a0c3d88fc5e7ca705b436f08c5689a05d996", "patch": "@@ -1,3 +1,14 @@\n+2003-11-08  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/12967\n+\t* include/bits/list.tcc (merge): Implement resolution of\n+\tDR 300 [WP].\n+\t* docs/html/ext/howto.html: Add entry for DR 300; tweak entry\n+\tfor DR 231.\n+\n+\t* docs/html/ext/lwg-active.html, docs/html/ext/lwg-defects.html:\n+\tImport R27.\n+\n 2003-11-07  Jonathan Wakely  <redi@gcc.gnu.org>\n \n \t* libsupc++/vec.cc: Conform to C++STYLE."}, {"sha": "21b5dad072b7e5a31c04d1a79ef4fa4cac7c1cb2", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41d3a0c3d88fc5e7ca705b436f08c5689a05d996/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41d3a0c3d88fc5e7ca705b436f08c5689a05d996/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=41d3a0c3d88fc5e7ca705b436f08c5689a05d996", "patch": "@@ -593,7 +593,7 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n         for const instances.\n     </dd>\n \n-    <dt><a href=\"lwg-active.html#231\">231</a>:\n+    <dt><a href=\"lwg-defects.html#231\">231</a>:\n         <em>Precision in iostream?</em>\n     </dt>\n     <dd>For conversion from a floating-point type, <code>str.precision()</code>\n@@ -646,6 +646,11 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n     <dd>If <code>(this == &amp;rhs)</code> do nothing.\n     </dd>\n \n+    <dt><a href=\"lwg-defects.html#300\">300</a>:\n+        <em>List::merge() specification incomplete</em>\n+    </dt>\n+    <dd>If <code>(this == &amp;x)</code> do nothing.\n+    </dd>\n <!--\n     <dt><a href=\"lwg-defects.html#\"></a>:\n         <em></em>"}, {"sha": "235e51dce36add3a01685d2caaa2e0e43f5524c7", "filename": "libstdc++-v3/docs/html/ext/lwg-active.html", "status": "modified", "additions": 3881, "deletions": 3973, "changes": 7854, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41d3a0c3d88fc5e7ca705b436f08c5689a05d996/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-active.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41d3a0c3d88fc5e7ca705b436f08c5689a05d996/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-active.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-active.html?ref=41d3a0c3d88fc5e7ca705b436f08c5689a05d996"}, {"sha": "3c26633595f3b8fc603a239cc3d3e4edb39fa879", "filename": "libstdc++-v3/docs/html/ext/lwg-defects.html", "status": "modified", "additions": 3472, "deletions": 1262, "changes": 4734, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41d3a0c3d88fc5e7ca705b436f08c5689a05d996/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-defects.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41d3a0c3d88fc5e7ca705b436f08c5689a05d996/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-defects.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-defects.html?ref=41d3a0c3d88fc5e7ca705b436f08c5689a05d996"}, {"sha": "9c5a0cde607f6d076e2ec2048039053cd4a6d135", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 40, "deletions": 29, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41d3a0c3d88fc5e7ca705b436f08c5689a05d996/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41d3a0c3d88fc5e7ca705b436f08c5689a05d996/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=41d3a0c3d88fc5e7ca705b436f08c5689a05d996", "patch": "@@ -249,21 +249,26 @@ namespace std\n     list<_Tp,_Alloc>::\n     merge(list& __x)\n     {\n-      iterator __first1 = begin();\n-      iterator __last1 = end();\n-      iterator __first2 = __x.begin();\n-      iterator __last2 = __x.end();\n-      while (__first1 != __last1 && __first2 != __last2)\n-        if (*__first2 < *__first1)\n-        {\n-          iterator __next = __first2;\n-          _M_transfer(__first1, __first2, ++__next);\n-          __first2 = __next;\n-        }\n-        else\n-          ++__first1;\n-      if (__first2 != __last2)\n-        _M_transfer(__last1, __first2, __last2);\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 300. list::merge() specification incomplete\n+      if (this != &__x)\n+\t{\n+\t  iterator __first1 = begin();\n+\t  iterator __last1 = end();\n+\t  iterator __first2 = __x.begin();\n+\t  iterator __last2 = __x.end();\n+\t  while (__first1 != __last1 && __first2 != __last2)\n+\t    if (*__first2 < *__first1)\n+\t      {\n+\t\titerator __next = __first2;\n+\t\t_M_transfer(__first1, __first2, ++__next);\n+\t\t__first2 = __next;\n+\t      }\n+\t    else\n+\t      ++__first1;\n+\t  if (__first2 != __last2)\n+\t    _M_transfer(__last1, __first2, __last2);\n+\t}\n     }\n   \n   // FIXME put this somewhere else\n@@ -351,20 +356,26 @@ namespace std\n       list<_Tp,_Alloc>::\n       merge(list& __x, _StrictWeakOrdering __comp)\n       {\n-        iterator __first1 = begin();\n-        iterator __last1 = end();\n-        iterator __first2 = __x.begin();\n-        iterator __last2 = __x.end();\n-        while (__first1 != __last1 && __first2 != __last2)\n-          if (__comp(*__first2, *__first1))\n-          {\n-            iterator __next = __first2;\n-            _M_transfer(__first1, __first2, ++__next);\n-            __first2 = __next;\n-          }\n-          else\n-            ++__first1;\n-        if (__first2 != __last2) _M_transfer(__last1, __first2, __last2);\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 300. list::merge() specification incomplete\t\n+\tif (this != &__x)\n+\t  {\n+\t    iterator __first1 = begin();\n+\t    iterator __last1 = end();\n+\t    iterator __first2 = __x.begin();\n+\t    iterator __last2 = __x.end();\n+\t    while (__first1 != __last1 && __first2 != __last2)\n+\t      if (__comp(*__first2, *__first1))\n+\t\t{\n+\t\t  iterator __next = __first2;\n+\t\t  _M_transfer(__first1, __first2, ++__next);\n+\t\t  __first2 = __next;\n+\t\t}\n+\t      else\n+\t\t++__first1;\n+\t    if (__first2 != __last2)\n+\t      _M_transfer(__last1, __first2, __last2);\n+\t  }\n       }\n   \n   template<typename _Tp, typename _Alloc>"}]}