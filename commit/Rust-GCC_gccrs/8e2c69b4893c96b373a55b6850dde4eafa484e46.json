{"sha": "8e2c69b4893c96b373a55b6850dde4eafa484e46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGUyYzY5YjQ4OTNjOTZiMzczYTU1YjY4NTBkZGU0ZWFmYTQ4NGU0Ng==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2017-03-10T16:18:44Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2017-03-10T16:18:44Z"}, "message": "re PR target/79941 (Altivec vec_vmuleub regression)\n\n\ngcc:\n2017-03-10  Will Schmidt <will_schmidt@vnet.ibm.com>\n\n     PR target/79941\n     * config/rs6000/rs6000.c (builtin_function_type): Add VMUL*U[HB]\n     entries to the case statement that marks unsigned arguments to\n     overloaded functions.\n\ntestsuite:\n2017-03-10  Will Schmidt <will_schmidt@vnet.ibm.com>\n\n     PR target/79941\n     * gcc.target/powerpc/fold-vec-mult-even_odd_misc.c: New test.\n     * gcc.target/powerpc/fold-vec-mult-even_odd_char.c: New test.\n     * gcc.target/powerpc/fold-vec-mult-even_odd_short.c: New test.\n\nFrom-SVN: r246040", "tree": {"sha": "6f1e831cf4d3b8506a8feb20599d81dba2fa9bcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f1e831cf4d3b8506a8feb20599d81dba2fa9bcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e2c69b4893c96b373a55b6850dde4eafa484e46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e2c69b4893c96b373a55b6850dde4eafa484e46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e2c69b4893c96b373a55b6850dde4eafa484e46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e2c69b4893c96b373a55b6850dde4eafa484e46/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "455d833cd8ea14eec356e0f85a3a7e173592ece8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/455d833cd8ea14eec356e0f85a3a7e173592ece8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/455d833cd8ea14eec356e0f85a3a7e173592ece8"}], "stats": {"total": 154, "additions": 154, "deletions": 0}, "files": [{"sha": "3cbc63d69f9c85c729f6e88528c2f8eaecd1f0b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e2c69b4893c96b373a55b6850dde4eafa484e46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e2c69b4893c96b373a55b6850dde4eafa484e46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e2c69b4893c96b373a55b6850dde4eafa484e46", "patch": "@@ -1,3 +1,10 @@\n+2017-03-10  Will Schmidt <will_schmidt@vnet.ibm.com>\n+ \n+\tPR target/79941\n+\t* config/rs6000/rs6000.c (builtin_function_type): Add VMUL*U[HB]\n+\tentries to the case statement that marks unsigned arguments to\n+\toverloaded functions.\n+\n 2017-03-10  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* config/rs6000/rs6000.c (rs6000_option_override_internal): Fix"}, {"sha": "4371b00d79e2e7a0e6e2a1b2fcfcbe0050fc4e55", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e2c69b4893c96b373a55b6850dde4eafa484e46/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e2c69b4893c96b373a55b6850dde4eafa484e46/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8e2c69b4893c96b373a55b6850dde4eafa484e46", "patch": "@@ -18530,6 +18530,10 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n     case ALTIVEC_BUILTIN_VMULEUH_UNS:\n     case ALTIVEC_BUILTIN_VMULOUB_UNS:\n     case ALTIVEC_BUILTIN_VMULOUH_UNS:\n+    case ALTIVEC_BUILTIN_VMULEUB:\n+    case ALTIVEC_BUILTIN_VMULEUH:\n+    case ALTIVEC_BUILTIN_VMULOUB:\n+    case ALTIVEC_BUILTIN_VMULOUH:\n     case CRYPTO_BUILTIN_VCIPHER:\n     case CRYPTO_BUILTIN_VCIPHERLAST:\n     case CRYPTO_BUILTIN_VNCIPHER:"}, {"sha": "b23426f0e9c421504d3fdae570b85af468384342", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e2c69b4893c96b373a55b6850dde4eafa484e46/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e2c69b4893c96b373a55b6850dde4eafa484e46/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e2c69b4893c96b373a55b6850dde4eafa484e46", "patch": "@@ -1,3 +1,10 @@\n+2017-03-10  Will Schmidt <will_schmidt@vnet.ibm.com>\n+    \n+\tPR target/79941\n+\t* gcc.target/powerpc/fold-vec-mult-even_odd_misc.c: New test.\n+\t* gcc.target/powerpc/fold-vec-mult-even_odd_char.c: New test.\n+\t* gcc.target/powerpc/fold-vec-mult-even_odd_short.c: New test.\n+\n 2017-03-10  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/79967"}, {"sha": "02d9789f86f17070f3bf60d5c687a50477131eab", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-mule-char.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e2c69b4893c96b373a55b6850dde4eafa484e46/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mule-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e2c69b4893c96b373a55b6850dde4eafa484e46/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mule-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mule-char.c?ref=8e2c69b4893c96b373a55b6850dde4eafa484e46", "patch": "@@ -0,0 +1,38 @@\n+/* Verify that overloaded built-ins for vec_mule,vec_mulo with char\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector signed short\n+test_even (vector signed char x, vector signed char y)\n+{\n+  return vec_mule (x, y);\n+}\n+\n+vector unsigned short\n+test_uns_even (vector unsigned char x, vector unsigned char y)\n+{\n+  return vec_mule (x, y);\n+}\n+\n+vector signed short\n+test_odd (vector signed char x, vector signed char y)\n+{\n+  return vec_mulo (x, y);\n+}\n+\n+vector unsigned short\n+test_uns_odd (vector unsigned char x, vector unsigned char y)\n+{\n+  return vec_mulo (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmuleub\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmulesb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmuloub\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmulosb\" 1 } } */\n+"}, {"sha": "4bb618531693b2bc532498c1f482d78bad87b761", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-mule-misc.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e2c69b4893c96b373a55b6850dde4eafa484e46/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mule-misc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e2c69b4893c96b373a55b6850dde4eafa484e46/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mule-misc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mule-misc.c?ref=8e2c69b4893c96b373a55b6850dde4eafa484e46", "patch": "@@ -0,0 +1,61 @@\n+/* PR target/79941 */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2 -save-temps\" } */\n+\n+#include <altivec.h>\n+\n+__attribute__((noinline)) void \n+test_eub_char ()\n+{\n+  volatile vector unsigned char v0 = {1, 0, 0, 0, 0, 0, 0, 0};\n+  volatile vector unsigned char v1 = {0xff, 0, 0, 0, 0, 0, 0, 0};\n+  vector unsigned short res = vec_vmuleub (v0, v1);\n+  if (res[0] != (unsigned short)v0[0] * (unsigned short)v1[0])\n+    __builtin_abort ();\n+}\n+\n+__attribute__((noinline)) void \n+test_oub_char ()\n+{\n+  volatile vector unsigned char v0 = {0, 1, 0, 0, 0, 0, 0, 0};\n+  volatile vector unsigned char v1 = {0, 0xff, 0, 0, 0, 0, 0, 0};\n+  vector unsigned short res = vec_vmuloub (v0, v1);\n+  if (res[0] != (unsigned short)v0[1] * (unsigned short)v1[1])\n+    __builtin_abort ();\n+}\n+\n+__attribute__((noinline)) void \n+test_euh_short ()\n+{\n+  volatile vector unsigned short v0 = {1, 0, 0, 0};\n+  volatile vector unsigned short v1 = {0xff, 0, 0, 0};\n+  vector unsigned int res = vec_vmuleuh (v0, v1);\n+  if (res[0] != (unsigned int)v0[0] * (unsigned int)v1[0])\n+    __builtin_abort ();\n+}\n+\n+__attribute__((noinline)) void \n+test_ouh_short ()\n+{\n+  volatile vector unsigned short v0 = {0, 1, 0, 0};\n+  volatile vector unsigned short v1 = {0, 0xff, 0, 0};\n+  vector unsigned int res = vec_vmulouh (v0, v1);\n+  if (res[0] != (unsigned int)v0[1] * (unsigned int)v1[1])\n+    __builtin_abort ();\n+}\n+\n+int main ()\n+{\n+  test_eub_char();\n+  test_oub_char();\n+  test_euh_short();\n+  test_ouh_short();\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmuleub\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmuloub\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmuleuh\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmulouh\" 1 } } */\n+"}, {"sha": "79b44d530e5e15ccf61465debd8eb6b5f1817504", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-mule-short.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e2c69b4893c96b373a55b6850dde4eafa484e46/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mule-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e2c69b4893c96b373a55b6850dde4eafa484e46/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mule-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mule-short.c?ref=8e2c69b4893c96b373a55b6850dde4eafa484e46", "patch": "@@ -0,0 +1,37 @@\n+/* Verify that overloaded built-ins for vec_mule,vec_mulo with short\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector signed int\n+test_even (vector signed short x, vector signed short y)\n+{\n+  return vec_mule (x, y);\n+}\n+\n+vector unsigned int\n+test_uns_even (vector unsigned short x, vector unsigned short y)\n+{\n+  return vec_mule (x, y);\n+}\n+\n+vector signed int\n+test_odd (vector signed short x, vector signed short y)\n+{\n+  return vec_mulo (x, y);\n+}\n+\n+vector unsigned int\n+test_uns_odd (vector unsigned short x, vector unsigned short y)\n+{\n+  return vec_mulo (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmuleuh\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmulesh\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmulouh\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmulosh\" 1 } } */"}]}