{"sha": "95c18dd0464e8937a7caab76db490597b760c0d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVjMThkZDA0NjRlODkzN2E3Y2FhYjc2ZGI0OTA1OTdiNzYwYzBkNA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2016-06-10T23:58:09Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2016-06-10T23:58:09Z"}, "message": "fold-const: Don't access bit fields with too big mode (PR71310)\n\nCurrently, optimize_bit_field_compare reads the bitfield in word_mode\nif it can.  If the bit field is normally accessed in a smaller mode,\nthis might be a violation of the memory model, although the \"extra\"\npart of the read is not used.  But also, previous stores to the bit\nfield will have been done in the smaller mode, and then bigger loads\nfrom it cause a LHS problem.\n\n\n\tPR middle-end/71310\n\t* fold-const.c (optimize_bit_field_compare): Don't try to use\n\tword_mode unconditionally for reading the bit field, look at\n\tDECL_BIT_FIELD_REPRESENTATIVE instead.\n\ngcc/testsuite/\n\tPR middle-end/71310\n\t* gcc.target/powerpc/pr71310.c: New testcase.\n\nFrom-SVN: r237319", "tree": {"sha": "e9c9e6e1494685866afc1d207592584d01abe70d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9c9e6e1494685866afc1d207592584d01abe70d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95c18dd0464e8937a7caab76db490597b760c0d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c18dd0464e8937a7caab76db490597b760c0d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95c18dd0464e8937a7caab76db490597b760c0d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c18dd0464e8937a7caab76db490597b760c0d4/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b97d37b42373ed291766a929a7dbcadf8af09884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b97d37b42373ed291766a929a7dbcadf8af09884", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b97d37b42373ed291766a929a7dbcadf8af09884"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "e463219cdf0fa3a02f74d5d38f4d70cc3f1c4aa8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95c18dd0464e8937a7caab76db490597b760c0d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95c18dd0464e8937a7caab76db490597b760c0d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95c18dd0464e8937a7caab76db490597b760c0d4", "patch": "@@ -1,3 +1,10 @@\n+2016-06-11  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR middle-end/71310\n+\t* fold-const.c (optimize_bit_field_compare): Don't try to use\n+\tword_mode unconditionally for reading the bit field, look at\n+\tDECL_BIT_FIELD_REPRESENTATIVE instead.\n+\n 2016-06-11  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \tPR middle-end/71478"}, {"sha": "7f8803ca57d0982ba8d090720ee652af138faf9c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95c18dd0464e8937a7caab76db490597b760c0d4/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95c18dd0464e8937a7caab76db490597b760c0d4/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=95c18dd0464e8937a7caab76db490597b760c0d4", "patch": "@@ -3904,13 +3904,24 @@ optimize_bit_field_compare (location_t loc, enum tree_code code,\n        return 0;\n    }\n \n+  /* Don't use a larger mode for reading the bit field than we will\n+     use in other places accessing the bit field.  */\n+  machine_mode largest_mode = word_mode;\n+  if (TREE_CODE (lhs) == COMPONENT_REF)\n+    {\n+      tree field = TREE_OPERAND (lhs, 1);\n+      tree repr = DECL_BIT_FIELD_REPRESENTATIVE (field);\n+      if (repr)\n+\tlargest_mode = DECL_MODE (repr);\n+    }\n+\n   /* See if we can find a mode to refer to this field.  We should be able to,\n      but fail if we can't.  */\n   nmode = get_best_mode (lbitsize, lbitpos, 0, 0,\n \t\t\t const_p ? TYPE_ALIGN (TREE_TYPE (linner))\n \t\t\t : MIN (TYPE_ALIGN (TREE_TYPE (linner)),\n \t\t\t\tTYPE_ALIGN (TREE_TYPE (rinner))),\n-\t\t\t word_mode, false);\n+\t\t\t largest_mode, false);\n   if (nmode == VOIDmode)\n     return 0;\n "}, {"sha": "2b31ceb51917188bf52698e42cc9ab8d44809d22", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95c18dd0464e8937a7caab76db490597b760c0d4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95c18dd0464e8937a7caab76db490597b760c0d4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=95c18dd0464e8937a7caab76db490597b760c0d4", "patch": "@@ -1,3 +1,8 @@\n+2016-06-11  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR middle-end/71310\n+\t* gcc.target/powerpc/pr71310.c: New testcase.\n+\n 2016-06-11  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \tPR middle-end/71478"}, {"sha": "6869a5009437d0c77115f2977fb0a68819722849", "filename": "gcc/testsuite/gcc.target/powerpc/pr71310.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95c18dd0464e8937a7caab76db490597b760c0d4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr71310.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95c18dd0464e8937a7caab76db490597b760c0d4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr71310.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr71310.c?ref=95c18dd0464e8937a7caab76db490597b760c0d4", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-options \"-O2\" } */\n+\n+/* { dg-final { scan-assembler-not {\\mld} } } */\n+/* { dg-final { scan-assembler-not {\\mlwz} } } */\n+/* { dg-final { scan-assembler-times {\\mlbz} 2 } } */\n+\n+struct mmu_gather {\n+        long end;\n+        int fullmm : 1;\n+};\n+\n+void __tlb_reset_range(struct mmu_gather *p1)\n+{\n+        if (p1->fullmm)\n+                p1->end = 0;\n+}\n+\n+void tlb_gather_mmu(struct mmu_gather *p1)\n+{\n+        p1->fullmm = 1;\n+        __tlb_reset_range(p1);\n+}"}]}