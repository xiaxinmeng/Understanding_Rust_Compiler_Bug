{"sha": "dd68d9887bc15212876eca46c54124bb2f83645c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ2OGQ5ODg3YmMxNTIxMjg3NmVjYTQ2YzU0MTI0YmIyZjgzNjQ1Yw==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-07-01T19:45:23Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-07-01T19:45:23Z"}, "message": "re PR tree-optimization/22071 (ICE in first_vi_for_offset, at tree-ssa-structalias.c:2506)\n\n2005-06-29  Daniel Berlin  <dberlin@dberlin.org>\n\n\tFix PR tree-optimization/22071\n\n\t* tree-ssa-structalias.c (offset_overlaps_with_access): New\n\tfunction.\n\t(get_constraint_for_component_ref): Use it.\n\nFrom-SVN: r101516", "tree": {"sha": "803b5bdcf0e6b0550be1e719cf541b0c48e1b418", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/803b5bdcf0e6b0550be1e719cf541b0c48e1b418"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd68d9887bc15212876eca46c54124bb2f83645c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd68d9887bc15212876eca46c54124bb2f83645c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd68d9887bc15212876eca46c54124bb2f83645c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd68d9887bc15212876eca46c54124bb2f83645c/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7523dc31c39c8ce458de40fca13f1b25a19dd942", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7523dc31c39c8ce458de40fca13f1b25a19dd942", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7523dc31c39c8ce458de40fca13f1b25a19dd942"}], "stats": {"total": 64, "additions": 62, "deletions": 2}, "files": [{"sha": "70be419535677b6749d5eba1b85c264a8fdaf600", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd68d9887bc15212876eca46c54124bb2f83645c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd68d9887bc15212876eca46c54124bb2f83645c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd68d9887bc15212876eca46c54124bb2f83645c", "patch": "@@ -1,3 +1,11 @@\n+2005-06-29  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\tFix PR tree-optimization/22071\n+\t\n+\t* tree-ssa-structalias.c (offset_overlaps_with_access): New\n+\tfunction.\n+\t(get_constraint_for_component_ref): Use it.\n+\n 2005-07-01  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR other/22264"}, {"sha": "719aed374507c2340e34508e6521b7c86aef1a43", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr22071.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd68d9887bc15212876eca46c54124bb2f83645c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr22071.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd68d9887bc15212876eca46c54124bb2f83645c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr22071.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr22071.C?ref=dd68d9887bc15212876eca46c54124bb2f83645c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+/* This code ends up taking the address of part of the structure that is padding, \n+   and because there is no real field there, the structure alias analyzer would \n+   abort.  */\n+struct empty_class {};\n+struct class1 : empty_class\n+{\n+  class1() {}\n+  empty_class value_;\n+};\n+struct lambda : class1 { };\n+lambda _1;"}, {"sha": "06adb3ec60202bd7cedbae691868c33aa1267b37", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd68d9887bc15212876eca46c54124bb2f83645c/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd68d9887bc15212876eca46c54124bb2f83645c/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=dd68d9887bc15212876eca46c54124bb2f83645c", "patch": "@@ -1940,6 +1940,25 @@ bitpos_of_field (const tree fdecl)\n }\n \n \n+/* Return true if an access to [ACCESSPOS, ACCESSSIZE]\n+   overlaps with a field at [FIELDPOS, FIELDSIZE] */\n+\n+static bool\n+offset_overlaps_with_access (const unsigned HOST_WIDE_INT fieldpos,\n+\t\t\t     const unsigned HOST_WIDE_INT fieldsize,\n+\t\t\t     const unsigned HOST_WIDE_INT accesspos,\n+\t\t\t     const unsigned HOST_WIDE_INT accesssize)\n+{\n+  if (fieldpos == accesspos && fieldsize == accesssize)\n+    return true;\n+  if (accesspos >= fieldpos && accesspos <= (fieldpos + fieldsize))\n+    return true;\n+  if (accesspos < fieldpos && (accesspos + accesssize > fieldpos))\n+    return true;\n+  \n+  return false;\n+}\n+\n /* Given a COMPONENT_REF T, return the constraint_expr for it.  */\n \n static struct constraint_expr\n@@ -2000,8 +2019,27 @@ get_constraint_for_component_ref (tree t)\n \t we may have to do something cute here.  */\n       \n       if (result.offset < get_varinfo (result.var)->fullsize)\t\n-\tresult.var = first_vi_for_offset (get_varinfo (result.var), \n-\t\t\t\t\t  result.offset)->id;\n+\t{\n+\t  /* It's also not true that the constraint will actually start at the\n+\t     right offset, it may start in some padding.  We only care about\n+\t     setting the constraint to the first actual field it touches, so\n+\t     walk to find it.  */ \n+\t  varinfo_t curr;\n+\t  for (curr = get_varinfo (result.var); curr; curr = curr->next)\n+\t    {\n+\t      if (offset_overlaps_with_access (curr->offset, curr->size,\n+\t\t\t\t\t       result.offset, bitsize))\n+\t\t{\n+\t\t  result.var = curr->id;\n+\t\t  break;\n+\n+\t\t}\n+\t    }\n+\t  /* assert that we found *some* field there. The user couldn't be\n+\t     accessing *only* padding.  */\n+\t     \n+\t  gcc_assert (curr);\n+\t}\n       else\n \tif (dump_file && (dump_flags & TDF_DETAILS))\n \t  fprintf (dump_file, \"Access to past the end of variable, ignoring\\n\");"}]}