{"sha": "8c03ca00a652f280811502a22cde311ef72cb861", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMwM2NhMDBhNjUyZjI4MDgxMTUwMmEyMmNkZTMxMWVmNzJjYjg2MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2003-10-06T08:52:23Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-10-06T08:52:23Z"}, "message": "re PR rtl-optimization/11637 (g++ invalid assembly with -fnon-call-exceptions)\n\n2003-10-06  Eric Botcazou  <ebotcazou@libertysurf.fr>\n\n\tPR optimization/11637\n\t* combine.c (adjust_for_new_dest): New function to adjust the\n\tnotes and LOG_LINKS when the dest of an insn has changed.\n\t(try_combine): Use it when deleting the first insn of a two-insn\n\tparallel or splitting a two-load parallel.\n\nFrom-SVN: r72138", "tree": {"sha": "35ffc3762d6a06a4c760b2f310e77392b9d2a981", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35ffc3762d6a06a4c760b2f310e77392b9d2a981"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c03ca00a652f280811502a22cde311ef72cb861", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c03ca00a652f280811502a22cde311ef72cb861", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c03ca00a652f280811502a22cde311ef72cb861", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c03ca00a652f280811502a22cde311ef72cb861/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0cb733bf23082f82c44e9d8aac5264dfa516e9d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cb733bf23082f82c44e9d8aac5264dfa516e9d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cb733bf23082f82c44e9d8aac5264dfa516e9d3"}], "stats": {"total": 84, "additions": 72, "deletions": 12}, "files": [{"sha": "2e56e27f813769fcd538d4e921b832e9089c0c22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c03ca00a652f280811502a22cde311ef72cb861/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c03ca00a652f280811502a22cde311ef72cb861/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c03ca00a652f280811502a22cde311ef72cb861", "patch": "@@ -1,3 +1,11 @@\n+2003-10-06  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR optimization/11637\n+\t* combine.c (adjust_for_new_dest): New function to adjust the\n+\tnotes and LOG_LINKS when the dest of an insn has changed.\n+\t(try_combine): Use it when deleting the first insn of a two-insn\n+\tparallel or splitting a two-load parallel.\n+\n 2003-10-06  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.c (mips_classify_constant): Only allow UNSPECs\n@@ -77,7 +85,6 @@\n \t* config/mn10300/mn10300.md: Likewise.\n \t* config/sh/sh.h: Likewise.\n \n->>>>>>> 2.1294\n 2003-10-05  Richard Henderson  <rth@redhat.com>\n \n \t* tree-inline.c (remap_type): New."}, {"sha": "7a0b5d3cad4d3509594acd70ec7c6fb173ee565d", "filename": "gcc/combine.c", "status": "modified", "additions": 39, "deletions": 11, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c03ca00a652f280811502a22cde311ef72cb861/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c03ca00a652f280811502a22cde311ef72cb861/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=8c03ca00a652f280811502a22cde311ef72cb861", "patch": "@@ -1438,6 +1438,33 @@ cant_combine_insn_p (rtx insn)\n   return 0;\n }\n \n+/* Adjust INSN after we made a change to its destination.\n+\n+   Changing the destination can invalidate notes that say something about\n+   the results of the insn and a LOG_LINK pointing to the insn.  */\n+\n+static void\n+adjust_for_new_dest (rtx insn)\n+{\n+  rtx *loc;\n+\n+  /* For notes, be conservative and simply remove them.  */\n+  loc = &REG_NOTES (insn);\n+  while (*loc)\n+    {\n+      enum reg_note kind = REG_NOTE_KIND (*loc);\n+      if (kind == REG_EQUAL || kind == REG_EQUIV)\n+\t*loc = XEXP (*loc, 1);\n+      else\n+\tloc = &XEXP (*loc, 1);\n+    }\n+\n+  /* The new insn will have a destination that was previously the destination\n+     of an insn just above it.  Call distribute_links to make a LOG_LINK from\n+     the next use of that destination.  */\n+  distribute_links (gen_rtx_INSN_LIST (VOIDmode, insn, NULL_RTX));\n+}\n+\n /* Try to combine the insns I1 and I2 into I3.\n    Here I1 and I2 appear earlier than I3.\n    I1 can be zero; then we combine just I2 into I3.\n@@ -2057,6 +2084,14 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n     {\n       newpat = XVECEXP (newpat, 0, 1);\n       insn_code_number = recog_for_combine (&newpat, i3, &new_i3_notes);\n+ \n+      if (insn_code_number >= 0)\n+\t{\n+\t  /* If we will be able to accept this, we have made a change to the\n+\t     destination of I3.  This requires us to do a few adjustments.  */\n+\t  PATTERN (i3) = newpat;\n+\t  adjust_for_new_dest (i3);\n+\t}\n     }\n \n   /* If we were combining three insns and the result is a simple SET\n@@ -2327,16 +2362,9 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n \t  rtx link;\n \n \t  /* If we will be able to accept this, we have made a change to the\n-\t     destination of I3.  This can invalidate a LOG_LINKS pointing\n-\t     to I3.  No other part of combine.c makes such a transformation.\n-\n-\t     The new I3 will have a destination that was previously the\n-\t     destination of I1 or I2 and which was used in i2 or I3.  Call\n-\t     distribute_links to make a LOG_LINK from the next use of\n-\t     that destination.  */\n-\n+\t     destination of I3.  This requires us to do a few adjustments.  */\n \t  PATTERN (i3) = newpat;\n-\t  distribute_links (gen_rtx_INSN_LIST (VOIDmode, i3, NULL_RTX));\n+\t  adjust_for_new_dest (i3);\n \n \t  /* I3 now uses what used to be its destination and which is\n \t     now I2's destination.  That means we need a LOG_LINK from\n@@ -12909,8 +12937,8 @@ distribute_notes (rtx notes, rtx from_insn, rtx i3, rtx i2)\n }\n \f\n /* Similarly to above, distribute the LOG_LINKS that used to be present on\n-   I3, I2, and I1 to new locations.  This is also called in one case to\n-   add a link pointing at I3 when I3's destination is changed.  */\n+   I3, I2, and I1 to new locations.  This is also called to add a link\n+   pointing at I3 when I3's destination is changed.  */\n \n static void\n distribute_links (rtx links)"}, {"sha": "0264d7a5012c3a477e7f0c3632d5f16edd92510b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c03ca00a652f280811502a22cde311ef72cb861/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c03ca00a652f280811502a22cde311ef72cb861/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8c03ca00a652f280811502a22cde311ef72cb861", "patch": "@@ -1,3 +1,7 @@\n+2003-10-06  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* g++.dg/opt/float1.C: New test.\n+\n 2003-10-04  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.dg/c90-array-lval-6.c: New test."}, {"sha": "8f26ed5c852c31c763476a37ed44f5e56427f275", "filename": "gcc/testsuite/g++.dg/opt/float1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c03ca00a652f280811502a22cde311ef72cb861/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Ffloat1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c03ca00a652f280811502a22cde311ef72cb861/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Ffloat1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Ffloat1.C?ref=8c03ca00a652f280811502a22cde311ef72cb861", "patch": "@@ -0,0 +1,21 @@\n+// PR optimization/11637\n+// Origin: <nick@ilm.com>\n+\n+// This used to fail to assemble on x86 because a decimal\n+// floating point litteral was emitted, which originated\n+// from a bogus REG_EQUAL note not removed by the combiner.\n+\n+// { dg-do assemble }\n+// { dg-options \"-O2 -fnon-call-exceptions\" }\n+\n+void f(long int seed);\n+\n+void g(float &o)\n+{\n+  float a = 0.05f;\n+  float b = 1.0 - a;\n+  float c = 1.0 + a;\n+\n+  f(0);\n+  o = a;\n+}"}]}