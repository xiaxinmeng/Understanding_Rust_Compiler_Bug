{"sha": "e8b3c1bc3ba22dcf59b9c743f11d4cb2bc5d7792", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThiM2MxYmMzYmEyMmRjZjU5YjljNzQzZjExZDRjYjJiYzVkNzc5Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-02-19T01:01:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-02-19T01:01:50Z"}, "message": "PR c++/89336 - multiple stores in constexpr stmt.\n\nIf we evaluate the RHS in the context of the LHS, that evaluation might\nchange the LHS in ways that mess with being able to store the value later.\nSo for assignment or scalar values, evaluate the RHS first.\n\n\t* constexpr.c (cxx_eval_store_expression): Preevaluate scalar or\n\tassigned value.\n\nFrom-SVN: r269003", "tree": {"sha": "9c3cdaa34468fdc8816877ce803ffca053288deb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c3cdaa34468fdc8816877ce803ffca053288deb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8b3c1bc3ba22dcf59b9c743f11d4cb2bc5d7792", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8b3c1bc3ba22dcf59b9c743f11d4cb2bc5d7792", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8b3c1bc3ba22dcf59b9c743f11d4cb2bc5d7792", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8b3c1bc3ba22dcf59b9c743f11d4cb2bc5d7792/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44db22fc662edfc4e665f4c523fd75514dfb3be7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44db22fc662edfc4e665f4c523fd75514dfb3be7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44db22fc662edfc4e665f4c523fd75514dfb3be7"}], "stats": {"total": 124, "additions": 115, "deletions": 9}, "files": [{"sha": "5d909ef62ec73f99394c863dfe1cf8903e364a26", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b3c1bc3ba22dcf59b9c743f11d4cb2bc5d7792/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b3c1bc3ba22dcf59b9c743f11d4cb2bc5d7792/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e8b3c1bc3ba22dcf59b9c743f11d4cb2bc5d7792", "patch": "@@ -1,5 +1,9 @@\n 2019-02-18  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/89336 - multiple stores in constexpr stmt.\n+\t* constexpr.c (cxx_eval_store_expression): Preevaluate scalar or\n+\tassigned value.\n+\n \t* pt.c (check_explicit_specialization): If the declarator is a\n \ttemplate-id, only check whether the arguments are dependent.\n "}, {"sha": "d413c6b9b275b299045664a62467e37b039449ed", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b3c1bc3ba22dcf59b9c743f11d4cb2bc5d7792/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b3c1bc3ba22dcf59b9c743f11d4cb2bc5d7792/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=e8b3c1bc3ba22dcf59b9c743f11d4cb2bc5d7792", "patch": "@@ -3634,6 +3634,18 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n   maybe_simplify_trivial_copy (target, init);\n \n   tree type = TREE_TYPE (target);\n+  bool preeval = SCALAR_TYPE_P (type) || TREE_CODE (t) == MODIFY_EXPR;\n+  if (preeval)\n+    {\n+      /* Evaluate the value to be stored without knowing what object it will be\n+\t stored in, so that any side-effects happen first.  */\n+      if (!SCALAR_TYPE_P (type))\n+\tnew_ctx.ctor = new_ctx.object = NULL_TREE;\n+      init = cxx_eval_constant_expression (&new_ctx, init, false,\n+\t\t\t\t\t   non_constant_p, overflow_p);\n+      if (*non_constant_p)\n+\treturn t;\n+    }\n   target = cxx_eval_constant_expression (ctx, target,\n \t\t\t\t\t true,\n \t\t\t\t\t non_constant_p, overflow_p);\n@@ -3834,7 +3846,7 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n     }\n   release_tree_vector (refs);\n \n-  if (AGGREGATE_TYPE_P (type) || VECTOR_TYPE_P (type))\n+  if (!preeval)\n     {\n       /* Create a new CONSTRUCTOR in case evaluation of the initializer\n \t wants to modify it.  */\n@@ -3843,21 +3855,20 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n \t  *valp = build_constructor (type, NULL);\n \t  CONSTRUCTOR_NO_CLEARING (*valp) = no_zero_init;\n \t}\n-      else if (TREE_CODE (*valp) == PTRMEM_CST)\n-\t*valp = cplus_expand_constant (*valp);\n       new_ctx.ctor = *valp;\n       new_ctx.object = target;\n+      init = cxx_eval_constant_expression (&new_ctx, init, false,\n+\t\t\t\t\t   non_constant_p, overflow_p);\n+      if (target == object)\n+\t/* The hash table might have moved since the get earlier.  */\n+\tvalp = ctx->values->get (object);\n     }\n \n-  init = cxx_eval_constant_expression (&new_ctx, init, false,\n-\t\t\t\t       non_constant_p, overflow_p);\n   /* Don't share a CONSTRUCTOR that might be changed later.  */\n   init = unshare_constructor (init);\n-  if (target == object)\n-    /* The hash table might have moved since the get earlier.  */\n-    valp = ctx->values->get (object);\n \n-  if (TREE_CODE (init) == CONSTRUCTOR)\n+  if (*valp && TREE_CODE (*valp) == CONSTRUCTOR\n+      && TREE_CODE (init) == CONSTRUCTOR)\n     {\n       /* An outer ctx->ctor might be pointing to *valp, so replace\n \t its contents.  */"}, {"sha": "93fe16551a1e57a71400fa075bfe56f357ce956d", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-89336-1.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b3c1bc3ba22dcf59b9c743f11d4cb2bc5d7792/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-89336-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b3c1bc3ba22dcf59b9c743f11d4cb2bc5d7792/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-89336-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-89336-1.C?ref=e8b3c1bc3ba22dcf59b9c743f11d4cb2bc5d7792", "patch": "@@ -0,0 +1,35 @@\n+// PR c++/89336\n+// { dg-do compile { target c++14 } }\n+\n+template <typename T, int N> struct A {\n+  T a[N];\n+  constexpr T &operator[] (int x) { return a[x]; }\n+  constexpr const T &operator[] (int x) const { return a[x]; }\n+};\n+\n+constexpr A<int, 16>\n+foo ()\n+{\n+  A<int, 16> r{};\n+  for (int i = 0; i < 6; ++i)\n+    r[i + 8] = r[i] = i + 1;\n+  return r;\n+}\n+\n+constexpr auto x = foo ();\n+static_assert (x[0] == 1, \"\");\n+static_assert (x[1] == 2, \"\");\n+static_assert (x[2] == 3, \"\");\n+static_assert (x[3] == 4, \"\");\n+static_assert (x[4] == 5, \"\");\n+static_assert (x[5] == 6, \"\");\n+static_assert (x[6] == 0, \"\");\n+static_assert (x[7] == 0, \"\");\n+static_assert (x[8] == 1, \"\");\n+static_assert (x[9] == 2, \"\");\n+static_assert (x[10] == 3, \"\");\n+static_assert (x[11] == 4, \"\");\n+static_assert (x[12] == 5, \"\");\n+static_assert (x[13] == 6, \"\");\n+static_assert (x[14] == 0, \"\");\n+static_assert (x[15] == 0, \"\");"}, {"sha": "69889ffb2b49c563c9ce15e2c3dd1918649a378d", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-89336-2.C", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b3c1bc3ba22dcf59b9c743f11d4cb2bc5d7792/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-89336-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b3c1bc3ba22dcf59b9c743f11d4cb2bc5d7792/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-89336-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-89336-2.C?ref=e8b3c1bc3ba22dcf59b9c743f11d4cb2bc5d7792", "patch": "@@ -0,0 +1,56 @@\n+// PR c++/89336\n+// { dg-do compile { target c++14 } }\n+\n+constexpr int\n+foo ()\n+{\n+  int a[16] = {};\n+  int r = 0;\n+  a[15] = a[14] = a[13] = a[12] = a[11] = a[10] = a[9] = a[8]\n+    = a[7] = a[6] = a[5] = a[4] = a[3] = a[2] = a[1] = a[0] = 5;\n+  for (int i = 0; i < 16; ++i)\n+    r += a[i];\n+  return r;\n+}\n+\n+static_assert (foo () == 16 * 5, \"\");\n+\n+struct A { int a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p; };\n+\n+constexpr int\n+bar ()\n+{\n+  A a {};\n+  a.p = a.o = a.n = a.m = a.l = a.k = a.j = a.i\n+    = a.h = a.g = a.f = a.e = a.d = a.c = a.b = a.a = 8;\n+  return a.a + a.b + a.c + a.d + a.e + a.f + a.g + a.h\n+\t + a.i + a.j + a.k + a.l + a.m + a.n + a.o + a.p;\n+}\n+\n+static_assert (bar () == 16 * 8, \"\");\n+\n+constexpr int\n+baz ()\n+{\n+  int a[16] = {};\n+  int r = 0;\n+  a[0] = a[1] = a[2] = a[3] = a[4] = a[5] = a[6] = a[7]\n+    = a[8] = a[9] = a[10] = a[11] = a[12] = a[13] = a[14] = a[15] = 7;\n+  for (int i = 0; i < 16; ++i)\n+    r += a[i];\n+  return r;\n+}\n+\n+static_assert (baz () == 16 * 7, \"\");\n+\n+constexpr int\n+qux ()\n+{\n+  A a {};\n+  a.a = a.b = a.c = a.d = a.e = a.f = a.g = a.h\n+    = a.i = a.j = a.k = a.l = a.m = a.n = a.o = a.p = 6;\n+  return a.a + a.b + a.c + a.d + a.e + a.f + a.g + a.h\n+\t + a.i + a.j + a.k + a.l + a.m + a.n + a.o + a.p;\n+}\n+\n+static_assert (qux () == 16 * 6, \"\");"}]}