{"sha": "9c004c58b3aba3c2ffa55ad31d35c8be0b6b5df4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMwMDRjNThiM2FiYTNjMmZmYTU1YWQzMWQzNWM4YmUwYjZiNWRmNA==", "commit": {"author": {"name": "Renlin Li", "email": "renlin.li@arm.com", "date": "2015-04-30T15:52:24Z"}, "committer": {"name": "Renlin Li", "email": "renlin@gcc.gnu.org", "date": "2015-04-30T15:52:24Z"}, "message": "[PATCH][AARCH64]Define vec_shr as an unspec, use shl for big-endian.\n\ngcc/\n\n2015-04-30  Renlin Li  <renlin.li@arm.com>\n\n\t* config/aarch64/aarch64-simd.md (vec_shr): Defined as an unspec.\n\t* config/aarch64/iterators.md (unspec): Add UNSPEC_VEC_SHR.\n\ngcc/testsuite/\n\n2015-04-30  Renlin Li  <renlin.li@arm.com>\n\t    Alan Lawrence  <alan.lawrence@arm.com>\n\n\t* gcc.target/aarch64/vect-reduc-or_1.c: New.\n\nFrom-SVN: r222635", "tree": {"sha": "2807c966466738b7b2ad1b459adf49963129c870", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2807c966466738b7b2ad1b459adf49963129c870"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c004c58b3aba3c2ffa55ad31d35c8be0b6b5df4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c004c58b3aba3c2ffa55ad31d35c8be0b6b5df4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c004c58b3aba3c2ffa55ad31d35c8be0b6b5df4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c004c58b3aba3c2ffa55ad31d35c8be0b6b5df4/comments", "author": null, "committer": null, "parents": [{"sha": "e2165bd7d51059cb68a75f808f0ee31251268536", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2165bd7d51059cb68a75f808f0ee31251268536", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2165bd7d51059cb68a75f808f0ee31251268536"}], "stats": {"total": 51, "additions": 48, "deletions": 3}, "files": [{"sha": "40d71fcbd12d8ae1e8f0a66d9e5099385503ff2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c004c58b3aba3c2ffa55ad31d35c8be0b6b5df4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c004c58b3aba3c2ffa55ad31d35c8be0b6b5df4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c004c58b3aba3c2ffa55ad31d35c8be0b6b5df4", "patch": "@@ -1,3 +1,8 @@\n+2015-04-30  Renlin Li  <renlin.li@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (vec_shr): Defined as an unspec.\n+\t* config/aarch64/iterators.md (unspec): Add UNSPEC_VEC_SHR.\n+\n 2015-04-30  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/65873"}, {"sha": "5342c3d20d2a702585cbcd44ee981fa82606d252", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c004c58b3aba3c2ffa55ad31d35c8be0b6b5df4/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c004c58b3aba3c2ffa55ad31d35c8be0b6b5df4/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=9c004c58b3aba3c2ffa55ad31d35c8be0b6b5df4", "patch": "@@ -783,12 +783,13 @@\n ;; For 64-bit modes we use ushl/r, as this does not require a SIMD zero.\n (define_insn \"vec_shr_<mode>\"\n   [(set (match_operand:VD 0 \"register_operand\" \"=w\")\n-        (lshiftrt:VD (match_operand:VD 1 \"register_operand\" \"w\")\n-\t\t     (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n+        (unspec:VD [(match_operand:VD 1 \"register_operand\" \"w\")\n+\t\t    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t\t   UNSPEC_VEC_SHR))]\n   \"TARGET_SIMD\"\n   {\n     if (BYTES_BIG_ENDIAN)\n-      return \"ushl %d0, %d1, %2\";\n+      return \"shl %d0, %d1, %2\";\n     else\n       return \"ushr %d0, %d1, %2\";\n   }"}, {"sha": "498358a6354fe3afc3032d5be7526d942d1ec3ac", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c004c58b3aba3c2ffa55ad31d35c8be0b6b5df4/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c004c58b3aba3c2ffa55ad31d35c8be0b6b5df4/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=9c004c58b3aba3c2ffa55ad31d35c8be0b6b5df4", "patch": "@@ -278,6 +278,7 @@\n     UNSPEC_PMULL        ; Used in aarch64-simd.md.\n     UNSPEC_PMULL2       ; Used in aarch64-simd.md.\n     UNSPEC_REV_REGLIST  ; Used in aarch64-simd.md.\n+    UNSPEC_VEC_SHR      ; Used in aarch64-simd.md.\n ])\n \n ;; -------------------------------------------------------------------"}, {"sha": "b6697843ae9ab627349c87003802f15d9ef1d97e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c004c58b3aba3c2ffa55ad31d35c8be0b6b5df4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c004c58b3aba3c2ffa55ad31d35c8be0b6b5df4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c004c58b3aba3c2ffa55ad31d35c8be0b6b5df4", "patch": "@@ -1,3 +1,7 @@\n+2015-04-30  Renlin Li  <renlin.li@arm.com>\n+\n+\t* gcc.target/aarch64/vect-reduc-or_1.c: New.\n+\n 2015-04-30  Marek Polacek  <polacek@redhat.com>\n \n \t* c-c++-common/Wbool-compare-3.c: New test."}, {"sha": "c1d6b2fe303785f5f19b8adc6033ced74e716ccd", "filename": "gcc/testsuite/gcc.target/aarch64/vect-reduc-or_1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c004c58b3aba3c2ffa55ad31d35c8be0b6b5df4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-reduc-or_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c004c58b3aba3c2ffa55ad31d35c8be0b6b5df4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-reduc-or_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-reduc-or_1.c?ref=9c004c58b3aba3c2ffa55ad31d35c8be0b6b5df4", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-all\" } */\n+/* Write a reduction loop to be reduced using whole vector right shift.  */\n+\n+extern void abort (void);\n+\n+unsigned char in[8] __attribute__((__aligned__(16)));\n+\n+int\n+main (unsigned char argc, char **argv)\n+{\n+  unsigned char i = 0;\n+  unsigned char sum = 1;\n+\n+  for (i = 0; i < 8; i++)\n+    in[i] = (i + i + 1) & 0xfd;\n+\n+  /* Prevent constant propagation of the entire loop below.  */\n+  asm volatile (\"\" : : : \"memory\");\n+\n+  for (i = 0; i < 8; i++)\n+    sum |= in[i];\n+\n+  if (sum != 13)\n+    {\n+      __builtin_printf (\"Failed %d\\n\", sum);\n+      abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Reduce using vector shifts\" \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}]}