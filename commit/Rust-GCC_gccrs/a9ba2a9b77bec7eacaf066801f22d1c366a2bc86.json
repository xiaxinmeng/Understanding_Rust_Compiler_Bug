{"sha": "a9ba2a9b77bec7eacaf066801f22d1c366a2bc86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTliYTJhOWI3N2JlYzdlYWNhZjA2NjgwMWYyMmQxYzM2NmEyYmM4Ng==", "commit": {"author": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2020-07-09T08:11:58Z"}, "committer": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2020-07-09T08:11:58Z"}, "message": "aarch64: New Straight Line Speculation (SLS) mitigation flags\n\nHere we introduce the flags that will be used for straight line speculation.\n\nThe new flag introduced is `-mharden-sls=`.\nThis flag can take arguments of `none`, `all`, or a comma seperated list of one\nor more of `retbr` or `blr`.\n`none` indicates no special mitigation of the straight line speculation\nvulnerability.\n`all` requests all mitigations currently implemented.\n`retbr` requests that the RET and BR instructions have a speculation barrier\ninserted after them.\n`blr` requests that BLR instructions are replaced by a BL to a function stub\nusing a BR with a speculation barrier after it.\n\nSetting this on a per-function basis using attributes or the like is not\nenabled, but may be in the future.\n\ngcc/ChangeLog:\n\n2020-06-02  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* config/aarch64/aarch64-protos.h (aarch64_harden_sls_retbr_p):\n\tNew.\n\t(aarch64_harden_sls_blr_p): New.\n\t* config/aarch64/aarch64.c (enum aarch64_sls_hardening_type):\n\tNew.\n\t(aarch64_harden_sls_retbr_p): New.\n\t(aarch64_harden_sls_blr_p): New.\n\t(aarch64_validate_sls_mitigation): New.\n\t(aarch64_override_options): Parse options for SLS mitigation.\n\t* config/aarch64/aarch64.opt (-mharden-sls): New option.\n\t* doc/invoke.texi: Document new option.", "tree": {"sha": "a9c871fba0e6c6b389f025c54aac4151540aa020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9c871fba0e6c6b389f025c54aac4151540aa020"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9ba2a9b77bec7eacaf066801f22d1c366a2bc86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9ba2a9b77bec7eacaf066801f22d1c366a2bc86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9ba2a9b77bec7eacaf066801f22d1c366a2bc86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9ba2a9b77bec7eacaf066801f22d1c366a2bc86/comments", "author": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a39c42a42cdea4a8962b9e140b88e0051894f38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a39c42a42cdea4a8962b9e140b88e0051894f38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a39c42a42cdea4a8962b9e140b88e0051894f38"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "8ca67d7e69edaf73c84f079e7e1c483009ad10c0", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ba2a9b77bec7eacaf066801f22d1c366a2bc86/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ba2a9b77bec7eacaf066801f22d1c366a2bc86/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=a9ba2a9b77bec7eacaf066801f22d1c366a2bc86", "patch": "@@ -780,4 +780,7 @@ extern const atomic_ool_names aarch64_ool_ldeor_names;\n \n tree aarch64_resolve_overloaded_builtin_general (location_t, tree, void *);\n \n+extern bool aarch64_harden_sls_retbr_p (void);\n+extern bool aarch64_harden_sls_blr_p (void);\n+\n #endif /* GCC_AARCH64_PROTOS_H */"}, {"sha": "b407b13fb1bdea89f41eba2b882b1ef6ff9181b3", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ba2a9b77bec7eacaf066801f22d1c366a2bc86/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ba2a9b77bec7eacaf066801f22d1c366a2bc86/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=a9ba2a9b77bec7eacaf066801f22d1c366a2bc86", "patch": "@@ -14489,6 +14489,79 @@ aarch64_validate_mcpu (const char *str, const struct processor **res,\n   return false;\n }\n \n+/* Straight line speculation indicators.  */\n+enum aarch64_sls_hardening_type\n+{\n+  SLS_NONE = 0,\n+  SLS_RETBR = 1,\n+  SLS_BLR = 2,\n+  SLS_ALL = 3,\n+};\n+static enum aarch64_sls_hardening_type aarch64_sls_hardening;\n+\n+/* Return whether we should mitigatate Straight Line Speculation for the RET\n+   and BR instructions.  */\n+bool\n+aarch64_harden_sls_retbr_p (void)\n+{\n+  return aarch64_sls_hardening & SLS_RETBR;\n+}\n+\n+/* Return whether we should mitigatate Straight Line Speculation for the BLR\n+   instruction.  */\n+bool\n+aarch64_harden_sls_blr_p (void)\n+{\n+  return aarch64_sls_hardening & SLS_BLR;\n+}\n+\n+/* As of yet we only allow setting these options globally, in the future we may\n+   allow setting them per function.  */\n+static void\n+aarch64_validate_sls_mitigation (const char *const_str)\n+{\n+  char *token_save = NULL;\n+  char *str = NULL;\n+\n+  if (strcmp (const_str, \"none\") == 0)\n+    {\n+      aarch64_sls_hardening = SLS_NONE;\n+      return;\n+    }\n+  if (strcmp (const_str, \"all\") == 0)\n+    {\n+      aarch64_sls_hardening = SLS_ALL;\n+      return;\n+    }\n+\n+  char *str_root = xstrdup (const_str);\n+  str = strtok_r (str_root, \",\", &token_save);\n+  if (!str)\n+    error (\"invalid argument given to %<-mharden-sls=%>\");\n+\n+  int temp = SLS_NONE;\n+  while (str)\n+    {\n+      if (strcmp (str, \"blr\") == 0)\n+\ttemp |= SLS_BLR;\n+      else if (strcmp (str, \"retbr\") == 0)\n+\ttemp |= SLS_RETBR;\n+      else if (strcmp (str, \"none\") == 0 || strcmp (str, \"all\") == 0)\n+\t{\n+\t  error (\"%<%s%> must be by itself for %<-mharden-sls=%>\", str);\n+\t  break;\n+\t}\n+      else\n+\t{\n+\t  error (\"invalid argument %<%s%> for %<-mharden-sls=%>\", str);\n+\t  break;\n+\t}\n+      str = strtok_r (NULL, \",\", &token_save);\n+    }\n+  aarch64_sls_hardening = (aarch64_sls_hardening_type) temp;\n+  free (str_root);\n+}\n+\n /* Parses CONST_STR for branch protection features specified in\n    aarch64_branch_protect_types, and set any global variables required.  Returns\n    the parsing result and assigns LAST_STR to the last processed token from\n@@ -14733,6 +14806,9 @@ aarch64_override_options (void)\n   selected_arch = NULL;\n   selected_tune = NULL;\n \n+  if (aarch64_harden_sls_string)\n+    aarch64_validate_sls_mitigation (aarch64_harden_sls_string);\n+\n   if (aarch64_branch_protection_string)\n     aarch64_validate_mbranch_protection (aarch64_branch_protection_string);\n "}, {"sha": "5170361fd5e5721e044d1664e522b2718f654b8e", "filename": "gcc/config/aarch64/aarch64.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ba2a9b77bec7eacaf066801f22d1c366a2bc86/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ba2a9b77bec7eacaf066801f22d1c366a2bc86/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.opt?ref=a9ba2a9b77bec7eacaf066801f22d1c366a2bc86", "patch": "@@ -71,6 +71,10 @@ mgeneral-regs-only\n Target Report RejectNegative Mask(GENERAL_REGS_ONLY) Save\n Generate code which uses only the general registers.\n \n+mharden-sls=\n+Target RejectNegative Joined Var(aarch64_harden_sls_string)\n+Generate code to mitigate against straight line speculation.\n+\n mfix-cortex-a53-835769\n Target Report Var(aarch64_fix_a53_err835769) Init(2) Save\n Workaround for ARM Cortex-A53 Erratum number 835769."}, {"sha": "f4fc303e7211e17165506bdf74e1168bafdb1928", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ba2a9b77bec7eacaf066801f22d1c366a2bc86/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ba2a9b77bec7eacaf066801f22d1c366a2bc86/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a9ba2a9b77bec7eacaf066801f22d1c366a2bc86", "patch": "@@ -698,6 +698,7 @@ Objective-C and Objective-C++ Dialects}.\n -msign-return-address=@var{scope} @gol\n -mbranch-protection=@var{none}|@var{standard}|@var{pac-ret}[+@var{leaf}\n +@var{b-key}]|@var{bti} @gol\n+-mharden-sls=@var{opts} @gol\n -march=@var{name}  -mcpu=@var{name}  -mtune=@var{name}  @gol\n -moverride=@var{string}  -mverbose-cost-dump @gol\n -mstack-protector-guard=@var{guard} -mstack-protector-guard-reg=@var{sysreg} @gol\n@@ -17367,6 +17368,17 @@ functions.  The optional argument @samp{b-key} can be used to sign the functions\n with the B-key instead of the A-key.\n @samp{bti} turns on branch target identification mechanism.\n \n+@item -mharden-sls=@var{opts}\n+@opindex mharden-sls\n+Enable compiler hardening against straight line speculation (SLS).\n+@var{opts} is a comma-separated list of the following options:\n+@table @samp\n+@item retbr\n+@item blr\n+@end table\n+In addition, @samp{-mharden-sls=all} enables all SLS hardening while\n+@samp{-mharden-sls=none} disables all SLS hardening.\n+\n @item -msve-vector-bits=@var{bits}\n @opindex msve-vector-bits\n Specify the number of bits in an SVE vector register.  This option only has"}]}