{"sha": "3bbbf89c84217eb443e20347c635a73c58ce99fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JiYmY4OWM4NDIxN2ViNDQzZTIwMzQ3YzYzNWE3M2M1OGNlOTlmYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-06-28T17:31:04Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-06-28T17:31:04Z"}, "message": "Initial revision\n\nFrom-SVN: r7584", "tree": {"sha": "519d0c224b88f70db6d9377b8486850862b3f14c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/519d0c224b88f70db6d9377b8486850862b3f14c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bbbf89c84217eb443e20347c635a73c58ce99fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bbbf89c84217eb443e20347c635a73c58ce99fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bbbf89c84217eb443e20347c635a73c58ce99fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bbbf89c84217eb443e20347c635a73c58ce99fc/comments", "author": null, "committer": null, "parents": [{"sha": "bd1fd7fbda1cee8dcd74a69cbc73d66bfdec97d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd1fd7fbda1cee8dcd74a69cbc73d66bfdec97d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd1fd7fbda1cee8dcd74a69cbc73d66bfdec97d7"}], "stats": {"total": 143, "additions": 143, "deletions": 0}, "files": [{"sha": "8b18c5a058be0f7b81038561c49d6dcdc6b533f1", "filename": "gcc/config/m68k/atari.h", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bbbf89c84217eb443e20347c635a73c58ce99fc/gcc%2Fconfig%2Fm68k%2Fatari.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bbbf89c84217eb443e20347c635a73c58ce99fc/gcc%2Fconfig%2Fm68k%2Fatari.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fatari.h?ref=3bbbf89c84217eb443e20347c635a73c58ce99fc", "patch": "@@ -0,0 +1,100 @@\n+/* Definitions of target machine for GNU compiler.\n+   Atari TT ASV version.\n+   Copyright (C) 1994 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 1, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#include \"m68k/m68kv4.h\"\n+\n+/* Alter assembler syntax for fsgldiv and fsglmul.\n+   It is highly likely that this is a generic SGS m68k assembler dependency.\n+   If so, it should eventually be handled in the m68k/sgs.h ASM_OUTPUT_OPCODE\n+   macro, like the other SGS assembler quirks.  -fnf */\n+\n+#define FSGLDIV_USE_S\t\t/* Use fsgldiv.s, not fsgldiv.x */\n+#define FSGLMUL_USE_S\t\t/* Use fsglmul.s, not fsglmul.x */\n+\n+/* At end of a switch table, define LDnnn iff the symbol LInnn was defined.\n+   Some SGS assemblers have a bug such that \"Lnnn-LInnn-2.b(pc,d0.l*2)\"\n+   fails to assemble.  Luckily \"Lnnn(pc,d0.l*2)\" produces the results\n+   we want.  This difference can be accommodated by making the assembler\n+   define such \"LDnnn\" to be either \"Lnnn-LInnn-2.b\", \"Lnnn\", or any other\n+   string, as necessary.  This is accomplished via the ASM_OUTPUT_CASE_END\n+   macro. (the Amiga assembler has this bug) */\n+\n+#undef ASM_OUTPUT_CASE_END\n+#define ASM_OUTPUT_CASE_END(FILE,NUM,TABLE)\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  if (switch_table_difference_label_flag)\t\t\t\t\\\n+    asm_fprintf ((FILE), \"\\t%s %LLD%d,%LL%d\\n\", SET_ASM_OP, (NUM), (NUM));\\\n+  switch_table_difference_label_flag = 0;\t\t\t\t\\\n+} while (0)\n+\n+int switch_table_difference_label_flag;\n+\n+/* This definition of ASM_OUTPUT_ASCII is the same as the one in m68k/sgs.h,\n+   which has been overridden by the one in svr4.h.  However, we can't use\n+   the one in svr4.h because the ASV assembler croaks on some of the\n+   strings that it emits (such as .string \"\\\"%s\\\"\\n\"). */\n+\n+#undef ASM_OUTPUT_ASCII\n+#define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  register int sp = 0, lp = 0, ch;\t\t\t\t\\\n+  fprintf ((FILE), \"\\t%s \", BYTE_ASM_OP);\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    ch = (PTR)[sp];\t\t\t\t\t\t\\\n+    if (ch > ' ' && ! (ch & 0x80) && ch != '\\\\')\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tfprintf ((FILE), \"'%c\", ch);\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tfprintf ((FILE), \"0x%x\", ch);\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    if (++sp < (LEN))\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tif ((sp % 10) == 0)\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    fprintf ((FILE), \"\\n\\t%s \", BYTE_ASM_OP);\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+\telse\t\t\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    putc (',', (FILE));\t\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  } while (sp < (LEN));\t\t\t\t\t\t\\\n+  putc ('\\n', (FILE));\t\t\t\t\t\t\\\n+}\n+\n+/* Override these for the sake of an assembler bug: the ASV\n+   assembler can't handle .LC0@GOT syntax.  This pollutes the final\n+   table for shared librarys but what's a poor soul to do; sigh... RFH */\n+\n+#undef ASM_GENERATE_INTERNAL_LABEL\n+#define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n+  if (flag_pic && !strcmp(PREFIX,\"LC\"))\t\t\t\\\n+    sprintf (LABEL, \"*%s%%%d\", PREFIX, NUM);\t\t\\\n+  else\t\t\t\t\t\t\t\\\n+    sprintf (LABEL, \"*%s%s%d\", LOCAL_LABEL_PREFIX, PREFIX, NUM)\n+\n+#undef ASM_OUTPUT_INTERNAL_LABEL\n+#define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\\\n+  if (flag_pic && !strcmp(PREFIX,\"LC\"))\t\t\t\\\n+    asm_fprintf (FILE, \"%s%%%d:\\n\", PREFIX, NUM);\t\\\n+  else\t\t\t\t\t\t\t\\\n+    asm_fprintf (FILE, \"%0L%s%d:\\n\", PREFIX, NUM)"}, {"sha": "7a40afe9f88da5deec97a2895a3ee35f01949510", "filename": "gcc/config/m68k/xm-atari.h", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bbbf89c84217eb443e20347c635a73c58ce99fc/gcc%2Fconfig%2Fm68k%2Fxm-atari.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bbbf89c84217eb443e20347c635a73c58ce99fc/gcc%2Fconfig%2Fm68k%2Fxm-atari.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fxm-atari.h?ref=3bbbf89c84217eb443e20347c635a73c58ce99fc", "patch": "@@ -0,0 +1,43 @@\n+/* Definitions of host machine for GNU compiler.\n+   Atari TT ASV version.\n+   Copyright (C) 1994 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 1, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#include \"m68k/xm-m68kv.h\"\t/* Use the System V flavor of m68k host */\n+\n+#define HAVE_VPRINTF            /* Host has vprintf() in library */\n+\n+/* ASV does not define HZ, so we have to do it ourselves. */\n+\n+#define HZ 128\t\t\t/* System clock */\n+\n+/* Define FULL_PROTOTYPES for protoize.c, to get <unistd.h> included.\n+   We need this file for things like R_OK, not necessarily prototypes. */\n+\n+#define FULL_PROTOTYPES\n+\n+#if defined (__GNUC__) && __GNUC__ == 1\n+#define alloca __builtin_alloca\n+#endif\n+\n+/* The m88k and mips ports make use of fancy_abort to give possibly helpful\n+   abort information rather than just dumping core.  They do it in their\n+   tm-* files.  It seems more logical that this is a characteristic of\n+   the host machine and not the target machine, so we do it here. */\n+\n+#define abort fancy_abort       /* give possibly helpful abort info */"}]}