{"sha": "25dd2768afdb8fad7b11d511eb5f739958f9870d", "node_id": "C_kwDOANBUbNoAKDI1ZGQyNzY4YWZkYjhmYWQ3YjExZDUxMWViNWY3Mzk5NThmOTg3MGQ", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-08-31T10:09:44Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-08-31T12:38:59Z"}, "message": "Stream out endpoints for frange.\n\nWe only stream out the FP properties for global float ranges\n(currently only NAN).  The following patch adds the endpoints as well.\n\ngcc/ChangeLog:\n\n\t* value-range-storage.cc (frange_storage_slot::set_frange): Save\n\tendpoints.\n\t(frange_storage_slot::get_frange): Restore endpoints.\n\t* value-range-storage.h (class frange_storage_slot): Add endpoint\n\tfields.", "tree": {"sha": "da258ee61f293845cfe729c138440d97368a95ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da258ee61f293845cfe729c138440d97368a95ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25dd2768afdb8fad7b11d511eb5f739958f9870d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25dd2768afdb8fad7b11d511eb5f739958f9870d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25dd2768afdb8fad7b11d511eb5f739958f9870d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25dd2768afdb8fad7b11d511eb5f739958f9870d/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "217ba2ce7841a68482cb428b9bc093b0842faf3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/217ba2ce7841a68482cb428b9bc093b0842faf3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/217ba2ce7841a68482cb428b9bc093b0842faf3d"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "b7a23fa9825c73d09bd49ce7dca6e603199f21e8", "filename": "gcc/value-range-storage.cc", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25dd2768afdb8fad7b11d511eb5f739958f9870d/gcc%2Fvalue-range-storage.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25dd2768afdb8fad7b11d511eb5f739958f9870d/gcc%2Fvalue-range-storage.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range-storage.cc?ref=25dd2768afdb8fad7b11d511eb5f739958f9870d", "patch": "@@ -253,6 +253,8 @@ frange_storage_slot::set_frange (const frange &r)\n   gcc_checking_assert (fits_p (r));\n   gcc_checking_assert (!r.undefined_p ());\n \n+  m_min = r.m_min;\n+  m_max = r.m_max;\n   m_props = r.m_props;\n }\n \n@@ -261,18 +263,12 @@ frange_storage_slot::get_frange (frange &r, tree type) const\n {\n   gcc_checking_assert (r.supports_type_p (type));\n \n-  // FIXME: NANs get special treatment, because we need [NAN, NAN] in\n-  // the range to properly represent it, not just the NAN flag in the\n-  // property bits.  This will go away when we stream out the\n-  // endpoints.\n-  if (m_props.get_nan ().yes_p ())\n-    {\n-      r = frange_nan (type);\n-      return;\n-    }\n-\n-  r.set_varying (type);\n+  r.set_undefined ();\n+  r.m_kind = VR_RANGE;\n   r.m_props = m_props;\n+  r.m_type = type;\n+  r.m_min = m_min;\n+  r.m_max = m_max;\n   r.normalize_kind ();\n \n   if (flag_checking)"}, {"sha": "f506789f3d145bc73ea9f1438c35da4dd2e8dd62", "filename": "gcc/value-range-storage.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25dd2768afdb8fad7b11d511eb5f739958f9870d/gcc%2Fvalue-range-storage.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25dd2768afdb8fad7b11d511eb5f739958f9870d/gcc%2Fvalue-range-storage.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range-storage.h?ref=25dd2768afdb8fad7b11d511eb5f739958f9870d", "patch": "@@ -113,9 +113,11 @@ class GTY (()) frange_storage_slot\n   frange_storage_slot (const frange &r) { set_frange (r); }\n   DISABLE_COPY_AND_ASSIGN (frange_storage_slot);\n \n-  // We can get away with just storing the properties because the type\n-  // can be gotten from the SSA, and UNDEFINED is unsupported, so it\n-  // can only be a range.\n+  // We can get away with just storing the properties and the\n+  // endpoints because the type can be gotten from the SSA, and\n+  // UNDEFINED is unsupported, so it can only be a VR_RANGE.\n+  REAL_VALUE_TYPE m_min;\n+  REAL_VALUE_TYPE m_max;\n   frange_props m_props;\n };\n "}]}