{"sha": "2e32a71e419484f79ea6ea7f67b29cb6ff0dcca9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUzMmE3MWU0MTk0ODRmNzllYTZlYTdmNjdiMjljYjZmZjBkY2NhOQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-11-25T09:59:42Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-11-25T09:59:42Z"}, "message": "re PR fortran/33499 (Rejects valid module with a contained function with an ENTRY)\n\n2007-11-25  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/33499\n\t* decl.c (get_proc_name): If ENTRY statement occurs before type\n\tspecification, set the symbol untyped and ensure that it is in\n\tthe procedure namespace.\n\n2007-11-25  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/33499\n\t* gfortran.dg/entry_16.f90: New test.\n\nFrom-SVN: r130403", "tree": {"sha": "e513bf0afce83d7ff044cd37ced5614c45206e7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e513bf0afce83d7ff044cd37ced5614c45206e7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e32a71e419484f79ea6ea7f67b29cb6ff0dcca9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e32a71e419484f79ea6ea7f67b29cb6ff0dcca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e32a71e419484f79ea6ea7f67b29cb6ff0dcca9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e32a71e419484f79ea6ea7f67b29cb6ff0dcca9/comments", "author": null, "committer": null, "parents": [{"sha": "1bfcad84abd38df371e01821d1741c4fbe352123", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bfcad84abd38df371e01821d1741c4fbe352123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bfcad84abd38df371e01821d1741c4fbe352123"}], "stats": {"total": 82, "additions": 73, "deletions": 9}, "files": [{"sha": "3f36021c0a1a60e21dd596bdd8cac8577e80ec90", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e32a71e419484f79ea6ea7f67b29cb6ff0dcca9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e32a71e419484f79ea6ea7f67b29cb6ff0dcca9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2e32a71e419484f79ea6ea7f67b29cb6ff0dcca9", "patch": "@@ -1,3 +1,10 @@\n+2007-11-25  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/33499\n+\t* decl.c (get_proc_name): If ENTRY statement occurs before type\n+\tspecification, set the symbol untyped and ensure that it is in\n+\tthe procedure namespace.\n+\n 2007-11-24  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/33541"}, {"sha": "ca17829cb872ccb10bca27036a0d647a7111d3a4", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e32a71e419484f79ea6ea7f67b29cb6ff0dcca9/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e32a71e419484f79ea6ea7f67b29cb6ff0dcca9/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=2e32a71e419484f79ea6ea7f67b29cb6ff0dcca9", "patch": "@@ -715,9 +715,7 @@ get_proc_name (const char *name, gfc_symbol **result, bool module_fcn_entry)\n \n       if (*result == NULL)\n \trc = gfc_get_symbol (name, NULL, result);\n-      else if (gfc_get_symbol (name, NULL, &sym) == 0\n-\t\t && sym\n-\t\t && sym->ts.type != BT_UNKNOWN\n+      else if (!gfc_get_symbol (name, NULL, &sym) && sym\n \t\t && (*result)->ts.type == BT_UNKNOWN\n \t\t && sym->attr.flavor == FL_UNKNOWN)\n \t/* Pick up the typespec for the entry, if declared in the function\n@@ -726,13 +724,24 @@ get_proc_name (const char *name, gfc_symbol **result, bool module_fcn_entry)\n \t   is set to point to the module symbol and a unique symtree\n \t   to the local version.  This latter ensures a correct clearing\n \t   of the symbols.  */\n-\t  {\n+\t{\n+\t  /* If the ENTRY proceeds its specification, we need to ensure\n+\t     that this does not raise a \"has no IMPLICIT type\" error.  */\n+\t  if (sym->ts.type == BT_UNKNOWN)\n+\t\tsym->attr.untyped = 1;\n+\n \t    (*result)->ts = sym->ts;\n-\t    gfc_find_sym_tree (name, gfc_current_ns, 0, &st);\n-\t    st->n.sym = *result;\n-\t    st = gfc_get_unique_symtree (gfc_current_ns);\n-\t    st->n.sym = sym;\n-\t  }\n+\n+\t  /* Put the symbol in the procedure namespace so that, should\n+\t     the ENTRY preceed its specification, the specification\n+\t     can be applied.  */\n+\t  (*result)->ns = gfc_current_ns;\n+\n+\t  gfc_find_sym_tree (name, gfc_current_ns, 0, &st);\n+\t  st->n.sym = *result;\n+\t  st = gfc_get_unique_symtree (gfc_current_ns);\n+\t  st->n.sym = sym;\n+\t}\n     }\n   else\n     rc = gfc_get_symbol (name, gfc_current_ns->parent, result);"}, {"sha": "9ec0be0e38edf2e36ce694296598eb6812605792", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e32a71e419484f79ea6ea7f67b29cb6ff0dcca9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e32a71e419484f79ea6ea7f67b29cb6ff0dcca9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2e32a71e419484f79ea6ea7f67b29cb6ff0dcca9", "patch": "@@ -1,3 +1,8 @@\n+2007-11-25  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/33499\n+\t* gfortran.dg/entry_16.f90: New test.\n+\n 2007-11-24  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/34192"}, {"sha": "ba8eff86b8d706a6d608261f74b723fdbe170ecc", "filename": "gcc/testsuite/gfortran.dg/entry_16.f90", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e32a71e419484f79ea6ea7f67b29cb6ff0dcca9/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e32a71e419484f79ea6ea7f67b29cb6ff0dcca9/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fentry_16.f90?ref=2e32a71e419484f79ea6ea7f67b29cb6ff0dcca9", "patch": "@@ -0,0 +1,43 @@\n+! { dg-do run }\n+! Tests the fix for PR33499 in which the ENTRY cx_radc was not\n+! getting its TYPE.\n+!\n+! Contributed by Michael Richmond <michael.a.richmond@nasa.gov>\n+!\n+MODULE complex\n+  IMPLICIT NONE\n+  PRIVATE\n+  PUBLIC :: cx, OPERATOR(+), OPERATOR(.eq.)\n+  TYPE cx\n+    integer :: re\n+    integer :: im\n+  END TYPE cx\n+  INTERFACE OPERATOR (+)\n+    MODULE PROCEDURE cx_cadr, cx_radc\n+  END INTERFACE\n+  INTERFACE OPERATOR (.eq.)\n+    MODULE PROCEDURE cx_eq\n+  END INTERFACE\n+  CONTAINS\n+  FUNCTION cx_cadr(z, r)\n+  ENTRY cx_radc(r, z)\n+    TYPE (cx) :: cx_cadr, cx_radc\n+    TYPE (cx), INTENT(IN) :: z\n+    integer, INTENT(IN) :: r\n+    cx_cadr%re = z%re + r\n+    cx_cadr%im = z%im\n+  END FUNCTION cx_cadr\n+  FUNCTION cx_eq(u, v)\n+    TYPE (cx), INTENT(IN) :: u, v\n+    logical :: cx_eq\n+    cx_eq = (u%re .eq. v%re) .and. (u%im .eq. v%im)\n+  END FUNCTION cx_eq\n+END MODULE complex\n+\n+  use complex\n+  type(cx) :: a = cx (1, 2), c, d\n+  logical :: f\n+  integer :: b = 3\n+  if (.not.((a + b) .eq. (b + a))) call abort ()\n+  if (.not.((a + b) .eq. cx (4, 2))) call abort ()\n+end"}]}