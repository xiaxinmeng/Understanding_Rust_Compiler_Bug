{"sha": "417e95263ca4d7a6623783ad664cf6305d8d3fad", "node_id": "C_kwDOANBUbNoAKDQxN2U5NTI2M2NhNGQ3YTY2MjM3ODNhZDY2NGNmNjMwNWQ4ZDNmYWQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-02-17T08:30:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-02-17T11:31:17Z"}, "message": "Fix wrong-code issue in VN\n\nThe following fixes the wrong removed dead store discovered on the\nPR108657 testcase when the reported DSE issue is not fixed.\nThe issue is we were using ssa_undefined_value_p on virtual operands\nwhich returns a result based on the real definition of the definition\nstatement.  That doesn't make sense so this patch guards the calls\nproperly and makes sure nobody else does the same mistake.\n\n\t* tree-ssa.cc (ssa_undefined_value_p): Assert we are not\n\tcalled on virtual operands.\n\t* tree-ssa-sccvn.cc (vn_phi_lookup): Guard\n\tssa_undefined_value_p calls.\n\t(vn_phi_insert): Likewise.\n\t(set_ssa_val_to): Likewise.\n\t(visit_phi): Avoid extra work with equivalences for\n\tvirtual operand PHIs.", "tree": {"sha": "8054a6626250780222aaa8094204fb0e4e766042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8054a6626250780222aaa8094204fb0e4e766042"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/417e95263ca4d7a6623783ad664cf6305d8d3fad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/417e95263ca4d7a6623783ad664cf6305d8d3fad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/417e95263ca4d7a6623783ad664cf6305d8d3fad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/417e95263ca4d7a6623783ad664cf6305d8d3fad/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f978585c2939691176ad8d3fa9c2e4e91ed18bf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f978585c2939691176ad8d3fa9c2e4e91ed18bf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f978585c2939691176ad8d3fa9c2e4e91ed18bf4"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "d5b081a309fe1ed93a3e8b36371bd2365a6979a5", "filename": "gcc/tree-ssa-sccvn.cc", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417e95263ca4d7a6623783ad664cf6305d8d3fad/gcc%2Ftree-ssa-sccvn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417e95263ca4d7a6623783ad664cf6305d8d3fad/gcc%2Ftree-ssa-sccvn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.cc?ref=417e95263ca4d7a6623783ad664cf6305d8d3fad", "patch": "@@ -4824,7 +4824,8 @@ vn_phi_lookup (gimple *phi, bool backedges_varying_p)\n       if (TREE_CODE (def) == SSA_NAME\n \t  && (!backedges_varying_p || !(e->flags & EDGE_DFS_BACK)))\n \t{\n-\t  if (ssa_undefined_value_p (def, false))\n+\t  if (!virtual_operand_p (def)\n+\t      && ssa_undefined_value_p (def, false))\n \t    def = VN_TOP;\n \t  else\n \t    def = SSA_VAL (def);\n@@ -4877,7 +4878,8 @@ vn_phi_insert (gimple *phi, tree result, bool backedges_varying_p)\n       if (TREE_CODE (def) == SSA_NAME\n \t  && (!backedges_varying_p || !(e->flags & EDGE_DFS_BACK)))\n \t{\n-\t  if (ssa_undefined_value_p (def, false))\n+\t  if (!virtual_operand_p (def)\n+\t      && ssa_undefined_value_p (def, false))\n \t    def = VN_TOP;\n \t  else\n \t    def = SSA_VAL (def);\n@@ -5059,6 +5061,7 @@ set_ssa_val_to (tree from, tree to)\n \t}\n       curr_invariant = is_gimple_min_invariant (currval);\n       curr_undefined = (TREE_CODE (currval) == SSA_NAME\n+\t\t\t&& !virtual_operand_p (currval)\n \t\t\t&& ssa_undefined_value_p (currval, false));\n       if (currval != VN_TOP\n \t  && !curr_invariant\n@@ -5081,6 +5084,7 @@ set_ssa_val_to (tree from, tree to)\n       else if (currval != VN_TOP\n \t       && !curr_undefined\n \t       && TREE_CODE (to) == SSA_NAME\n+\t       && !virtual_operand_p (to)\n \t       && ssa_undefined_value_p (to, false))\n \t{\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -5116,6 +5120,7 @@ set_ssa_val_to (tree from, tree to)\n          PR82320 for a testcase were we'd otherwise not terminate iteration.  */\n       && !(curr_undefined\n \t   && TREE_CODE (to) == SSA_NAME\n+\t   && !virtual_operand_p (to)\n \t   && ssa_undefined_value_p (to, false))\n       /* ???  For addresses involving volatile objects or types operand_equal_p\n          does not reliably detect ADDR_EXPRs as equal.  We know we are only\n@@ -5880,7 +5885,14 @@ visit_phi (gimple *phi, bool *inserted, bool backedges_varying_p)\n \t    sameval = def;\n \t    sameval_e = e;\n \t  }\n-\telse if (!expressions_equal_p (def, sameval))\n+\telse if (expressions_equal_p (def, sameval))\n+\t  sameval_e = NULL;\n+\telse if (virtual_operand_p (def))\n+\t  {\n+\t    sameval = NULL_TREE;\n+\t    break;\n+\t  }\n+\telse\n \t  {\n \t    /* We know we're arriving only with invariant addresses here,\n \t       try harder comparing them.  We can do some caching here\n@@ -5957,8 +5969,6 @@ visit_phi (gimple *phi, bool *inserted, bool backedges_varying_p)\n \t    sameval = NULL_TREE;\n \t    break;\n \t  }\n-\telse\n-\t  sameval_e = NULL;\n       }\n \n   /* If the value we want to use is flowing over the backedge and we"}, {"sha": "a5cad2d344e6d7d79961288b9bd1856aead35b0e", "filename": "gcc/tree-ssa.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417e95263ca4d7a6623783ad664cf6305d8d3fad/gcc%2Ftree-ssa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417e95263ca4d7a6623783ad664cf6305d8d3fad/gcc%2Ftree-ssa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.cc?ref=417e95263ca4d7a6623783ad664cf6305d8d3fad", "patch": "@@ -1320,6 +1320,8 @@ ssa_undefined_value_p (tree t, bool partial)\n {\n   gimple *def_stmt;\n \n+  gcc_checking_assert (!virtual_operand_p (t));\n+\n   if (ssa_defined_default_def_p (t))\n     return false;\n "}]}