{"sha": "953e25c44acc2458d854b1442d7775d997aaf187", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUzZTI1YzQ0YWNjMjQ1OGQ4NTRiMTQ0MmQ3Nzc1ZDk5N2FhZjE4Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-02-24T19:23:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-02-24T19:23:51Z"}, "message": "re PR rtl-optimization/89445 (_mm512_maskz_loadu_pd \"forgets\" to use the mask)\n\n\tPR rtl-optimization/89445\n\t* simplify-rtx.c (simplify_ternary_operation): Don't use\n\tsimplify_merge_mask on operands that may trap.\n\t* rtlanal.c (may_trap_p_1): Use FLOAT_MODE_P instead of\n\tSCALAR_FLOAT_MODE_P checks.  For integral division by zero, if\n\tsecond operand is CONST_VECTOR, check if any element could be zero.\n\tDon't expect traps for VEC_{MERGE,SELECT,CONCAT,DUPLICATE} unless\n\ttheir operands can trap.\n\n\t* gcc.target/i386/avx512f-pr89445.c: New test.\n\nFrom-SVN: r269176", "tree": {"sha": "2c8a21a84fef81eadb262cc7c2dab57ccd1d2046", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c8a21a84fef81eadb262cc7c2dab57ccd1d2046"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/953e25c44acc2458d854b1442d7775d997aaf187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/953e25c44acc2458d854b1442d7775d997aaf187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/953e25c44acc2458d854b1442d7775d997aaf187", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/953e25c44acc2458d854b1442d7775d997aaf187/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c7f01cb61dd80f3c8282ae81a4d60c654908eb69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f01cb61dd80f3c8282ae81a4d60c654908eb69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7f01cb61dd80f3c8282ae81a4d60c654908eb69"}], "stats": {"total": 102, "additions": 98, "deletions": 4}, "files": [{"sha": "2185019488027af62741404f2f05f4bb4adc4697", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953e25c44acc2458d854b1442d7775d997aaf187/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953e25c44acc2458d854b1442d7775d997aaf187/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=953e25c44acc2458d854b1442d7775d997aaf187", "patch": "@@ -1,3 +1,14 @@\n+2019-02-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/89445\n+\t* simplify-rtx.c (simplify_ternary_operation): Don't use\n+\tsimplify_merge_mask on operands that may trap.\n+\t* rtlanal.c (may_trap_p_1): Use FLOAT_MODE_P instead of\n+\tSCALAR_FLOAT_MODE_P checks.  For integral division by zero, if\n+\tsecond operand is CONST_VECTOR, check if any element could be zero.\n+\tDon't expect traps for VEC_{MERGE,SELECT,CONCAT,DUPLICATE} unless\n+\ttheir operands can trap.\n+\n 2019-02-23  Martin Sebor  <msebor@redhat.com>\n \n \t* gimple-ssa-sprintf.c (target_strtol): Rename..."}, {"sha": "3873b4098b0beba6ac60b034fbd83ca9799922ff", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953e25c44acc2458d854b1442d7775d997aaf187/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953e25c44acc2458d854b1442d7775d997aaf187/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=953e25c44acc2458d854b1442d7775d997aaf187", "patch": "@@ -2846,10 +2846,28 @@ may_trap_p_1 (const_rtx x, unsigned flags)\n     case UMOD:\n       if (HONOR_SNANS (x))\n \treturn 1;\n-      if (SCALAR_FLOAT_MODE_P (GET_MODE (x)))\n+      if (FLOAT_MODE_P (GET_MODE (x)))\n \treturn flag_trapping_math;\n       if (!CONSTANT_P (XEXP (x, 1)) || (XEXP (x, 1) == const0_rtx))\n \treturn 1;\n+      if (GET_CODE (XEXP (x, 1)) == CONST_VECTOR)\n+\t{\n+\t  /* For CONST_VECTOR, return 1 if any element is or might be zero.  */\n+\t  unsigned int n_elts;\n+\t  rtx op = XEXP (x, 1);\n+\t  if (!GET_MODE_NUNITS (GET_MODE (op)).is_constant (&n_elts))\n+\t    {\n+\t      if (!CONST_VECTOR_DUPLICATE_P (op))\n+\t\treturn 1;\n+\t      for (unsigned i = 0; i < (unsigned int) XVECLEN (op, 0); i++)\n+\t\tif (CONST_VECTOR_ENCODED_ELT (op, i) == const0_rtx)\n+\t\t  return 1;\n+\t    }\n+\t  else\n+\t    for (unsigned i = 0; i < n_elts; i++)\n+\t      if (CONST_VECTOR_ELT (op, i) == const0_rtx)\n+\t\treturn 1;\n+\t}\n       break;\n \n     case EXPR_LIST:\n@@ -2898,12 +2916,16 @@ may_trap_p_1 (const_rtx x, unsigned flags)\n     case NEG:\n     case ABS:\n     case SUBREG:\n+    case VEC_MERGE:\n+    case VEC_SELECT:\n+    case VEC_CONCAT:\n+    case VEC_DUPLICATE:\n       /* These operations don't trap even with floating point.  */\n       break;\n \n     default:\n       /* Any floating arithmetic may trap.  */\n-      if (SCALAR_FLOAT_MODE_P (GET_MODE (x)) && flag_trapping_math)\n+      if (FLOAT_MODE_P (GET_MODE (x)) && flag_trapping_math)\n \treturn 1;\n     }\n "}, {"sha": "89a46a933facaded1b23a84fa9a0924595b01e5a", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953e25c44acc2458d854b1442d7775d997aaf187/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953e25c44acc2458d854b1442d7775d997aaf187/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=953e25c44acc2458d854b1442d7775d997aaf187", "patch": "@@ -6073,8 +6073,10 @@ simplify_ternary_operation (enum rtx_code code, machine_mode mode,\n \n       if (!side_effects_p (op2))\n \t{\n-\t  rtx top0 = simplify_merge_mask (op0, op2, 0);\n-\t  rtx top1 = simplify_merge_mask (op1, op2, 1);\n+\t  rtx top0\n+\t    = may_trap_p (op0) ? NULL_RTX : simplify_merge_mask (op0, op2, 0);\n+\t  rtx top1\n+\t    = may_trap_p (op1) ? NULL_RTX : simplify_merge_mask (op1, op2, 1);\n \t  if (top0 || top1)\n \t    return simplify_gen_ternary (code, mode, mode,\n \t\t\t\t\t top0 ? top0 : op0,"}, {"sha": "707c827621eceb062d81cbbbb34b78e28a926919", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953e25c44acc2458d854b1442d7775d997aaf187/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953e25c44acc2458d854b1442d7775d997aaf187/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=953e25c44acc2458d854b1442d7775d997aaf187", "patch": "@@ -1,3 +1,8 @@\n+2019-02-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/89445\n+\t* gcc.target/i386/avx512f-pr89445.c: New test.\n+\n 2019-02-23  Martin Sebor  <msebor@redhat.com>\n \n \t* gcc.dg/tree-ssa/builtin-sprintf-10.c: Cast remaining"}, {"sha": "230c1d1f86488f70ee74ff11017507d1c9019a04", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr89445.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/953e25c44acc2458d854b1442d7775d997aaf187/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr89445.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/953e25c44acc2458d854b1442d7775d997aaf187/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr89445.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr89445.c?ref=953e25c44acc2458d854b1442d7775d997aaf187", "patch": "@@ -0,0 +1,54 @@\n+/* PR rtl-optimization/89445 */\n+/* { dg-do run { target { avx512f && mmap } } } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include <sys/mman.h>\n+#ifndef MAP_ANONYMOUS\n+#define MAP_ANONYMOUS MAP_ANON\n+#endif\n+#ifndef MAP_ANON\n+#define MAP_ANON 0\n+#endif\n+#ifndef MAP_FAILED\n+#define MAP_FAILED ((void *)-1)\n+#endif\n+\n+__attribute__ ((noipa))\n+void daxpy (unsigned long n, double a, double const *__restrict x,\n+\t    double *__restrict y)\n+{\n+  const __m512d v_a = _mm512_broadcastsd_pd (_mm_set_sd (a));\n+  const __mmask16 final = (1U << (n % 8u)) - 1;\n+  __mmask16 mask = 65535u;\n+  unsigned long i;\n+  for (i = 0; i < n * sizeof (double); i += 8 * sizeof (double))\n+    {\n+      if (i + 8 * sizeof (double) > n * sizeof (double))\n+\tmask = final;\n+      __m512d v_x = _mm512_maskz_loadu_pd (mask, (char const *) x + i);\n+      __m512d v_y = _mm512_maskz_loadu_pd (mask, (char const *) y + i);\n+      __m512d tmp = _mm512_fmadd_pd (v_x, v_a, v_y);\n+      _mm512_mask_storeu_pd ((char *) y + i, mask, tmp);\n+    }\n+}\n+\n+static const double x[] = { 1, 2, 3, 4 };\n+\n+static void\n+avx512f_test (void)\n+{\n+  char *ptr\n+    = (char *) mmap (NULL, 2 * 4096, PROT_READ | PROT_WRITE,\n+\t\t     MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\n+  if (ptr == MAP_FAILED)\n+    return;\n+\n+  munmap (ptr + 4096, 4096);\n+  double *y = (double *) (ptr + 4096 - sizeof (x));\n+  __builtin_memcpy (y, x, sizeof (x));\n+  daxpy (sizeof (x) / sizeof (x[0]), 1.0, x, y);\n+  if (y[0] != 2.0 || y[1] != 4.0 || y[2] != 6.0 || y[3] != 8.0)\n+    abort ();\n+}"}]}