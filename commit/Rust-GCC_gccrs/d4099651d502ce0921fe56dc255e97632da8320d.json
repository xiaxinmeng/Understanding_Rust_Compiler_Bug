{"sha": "d4099651d502ce0921fe56dc255e97632da8320d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQwOTk2NTFkNTAyY2UwOTIxZmU1NmRjMjU1ZTk3NjMyZGE4MzIwZA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-10-01T21:25:34Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-10-01T21:25:34Z"}, "message": "RISC-OS 5.0 changes.\n\nFrom-SVN: r2303", "tree": {"sha": "f0837a1788a2d0539e8d86ef49388604986e6105", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0837a1788a2d0539e8d86ef49388604986e6105"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4099651d502ce0921fe56dc255e97632da8320d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4099651d502ce0921fe56dc255e97632da8320d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4099651d502ce0921fe56dc255e97632da8320d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4099651d502ce0921fe56dc255e97632da8320d/comments", "author": null, "committer": null, "parents": [{"sha": "9ad5f9f60427d3e31ba7986f20cfc0a6d82a03aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad5f9f60427d3e31ba7986f20cfc0a6d82a03aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ad5f9f60427d3e31ba7986f20cfc0a6d82a03aa"}], "stats": {"total": 123, "additions": 61, "deletions": 62}, "files": [{"sha": "3725da810965d07ffb7915a895e67a2cb0895d49", "filename": "gcc/config/mips/bsd-4.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4099651d502ce0921fe56dc255e97632da8320d/gcc%2Fconfig%2Fmips%2Fbsd-4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4099651d502ce0921fe56dc255e97632da8320d/gcc%2Fconfig%2Fmips%2Fbsd-4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fbsd-4.h?ref=d4099651d502ce0921fe56dc255e97632da8320d", "patch": "@@ -19,7 +19,8 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #define MIPS_BSD43\n \n-#define CPP_PREDEFINES \"-Dmips -Dunix -Dhost_mips -DMIPSEB -DR3000 -DSYSTYPE_BSD43\"\n+#define CPP_PREDEFINES \"-Dmips -Dunix -Dhost_mips -DMIPSEB -DR3000 -DSYSTYPE_BSD43 \\\n+-D_mips -D_unix -D_host_mips -D_MIPSEB -D_R3000 -D_SYSTYPE_BSD43\"\n \n #define SYSTEM_INCLUDE_DIR \"/bsd43/usr/include\"\n "}, {"sha": "546174a8d5836386f215a06737ee37134828855c", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4099651d502ce0921fe56dc255e97632da8320d/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4099651d502ce0921fe56dc255e97632da8320d/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=d4099651d502ce0921fe56dc255e97632da8320d", "patch": "@@ -2845,17 +2845,13 @@ override_options ()\n     }\n #endif\n \n-#ifdef _IOLBF\n+#if defined(_IOLBF)\n+#if defined(ultrix) || defined(__ultrix) || defined(__OSF1__) || defined(__osf__) || defined(osf)\n   /* If -mstats and -quiet, make stderr line buffered.  */\n   if (quiet_flag && TARGET_STATS)\n-    {\n-#if defined (MIPS_BSD43) || defined (MIPS_NEWS)\n-      setlinebuf (stderr);\n-#else\n-      setvbuf (stderr, (char *)0, _IOLBF, BUFSIZ);\n+    setvbuf (stderr, (char *)0, _IOLBF, BUFSIZ);\n #endif\n #endif\n-    }\n \n   /* Set up the classification arrays now.  */\n   mips_rtx_classify[(int)PLUS]  = CLASS_ADD_OP;"}, {"sha": "f68d6a67956a15e306d20b61e249d4e908eecc52", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4099651d502ce0921fe56dc255e97632da8320d/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4099651d502ce0921fe56dc255e97632da8320d/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=d4099651d502ce0921fe56dc255e97632da8320d", "patch": "@@ -372,7 +372,8 @@ while (0)\n /* Names to predefine in the preprocessor for this target machine.  */\n \n #ifndef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dmips -Dunix -Dhost_mips -DMIPSEB -DR3000 -DSYSTYPE_BSD43\"\n+#define CPP_PREDEFINES \"-Dmips -Dunix -Dhost_mips -DMIPSEB -DR3000 -DSYSTYPE_BSD43 \\\n+-D_mips -D_unix -D_host_mips -D_MIPSEB -D_R3000 -D_SYSTYPE_BSD43\"\n #endif\n \n /* Extra switches sometimes passed to the assembler.  */"}, {"sha": "f4083fb9463692d27a382abf443df7215581e910", "filename": "gcc/config/mips/svr3-4.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4099651d502ce0921fe56dc255e97632da8320d/gcc%2Fconfig%2Fmips%2Fsvr3-4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4099651d502ce0921fe56dc255e97632da8320d/gcc%2Fconfig%2Fmips%2Fsvr3-4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsvr3-4.h?ref=d4099651d502ce0921fe56dc255e97632da8320d", "patch": "@@ -19,7 +19,8 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #define MIPS_SYSV\n \n-#define CPP_PREDEFINES \"-Dmips -Dunix -Dhost_mips -DMIPSEB -DR3000 -DSYSTYPE_SYSV\"\n+#define CPP_PREDEFINES \"-Dmips -Dunix -Dhost_mips -DMIPSEB -DR3000 -DSYSTYPE_SYSV \\\n+-D_mips -D_unix -D_host_mips -D_MIPSEB -D_R3000 -D_SYSTYPE_SYSV\"\n \n #define SYSTEM_INCLUDE_DIR \"/sysv/usr/include\"\n "}, {"sha": "2894be000ebc8a93fd5864409c41a7602d15ca34", "filename": "gcc/config/mips/svr4-4.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4099651d502ce0921fe56dc255e97632da8320d/gcc%2Fconfig%2Fmips%2Fsvr4-4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4099651d502ce0921fe56dc255e97632da8320d/gcc%2Fconfig%2Fmips%2Fsvr4-4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsvr4-4.h?ref=d4099651d502ce0921fe56dc255e97632da8320d", "patch": "@@ -19,7 +19,8 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #define MIPS_SVR4\n \n-#define CPP_PREDEFINES \"-Dmips -Dunix -Dhost_mips -DMIPSEB -DR3000 -DSYSTYPE_SVR4\"\n+#define CPP_PREDEFINES \"-Dmips -Dunix -Dhost_mips -DMIPSEB -DR3000 -DSYSTYPE_SVR4 \\\n+-D_mips -D_unix -D_host_mips -D_MIPSEB -D_R3000 -D_SYSTYPE_SVR4\"\n \n #define SYSTEM_INCLUDE_DIR \"/svr4/usr/include\"\n "}, {"sha": "c4a9659584981f5dd63c74add5dd048c2b329e72", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 50, "deletions": 51, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4099651d502ce0921fe56dc255e97632da8320d/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4099651d502ce0921fe56dc255e97632da8320d/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=d4099651d502ce0921fe56dc255e97632da8320d", "patch": "@@ -1032,7 +1032,7 @@ typedef struct tag {\n   struct forward *forward_ref;\t/* list of forward references */\n   bt_t\t\t  basic_type;\t/* bt_Struct, bt_Union, or bt_Enum */\n   symint_t\t  ifd;\t\t/* file # tag defined in */\n-  symint_t\t  index;\t/* index within file's local symbols */\n+  symint_t\t  indx;\t\t/* index within file's local symbols */\n } tag_t;\n \n \n@@ -1066,7 +1066,7 @@ typedef struct shash {\n   struct shash\t*next;\t\t/* next hash value */\n   char\t\t*string;\t/* string we are hashing */\n   symint_t\t len;\t\t/* string length */\n-  symint_t\t index;\t\t/* index within string table */\n+  symint_t\t indx;\t\t/* index within string table */\n   EXTR\t\t*esym_ptr;\t/* global symbol pointer */\n   SYMR\t\t*sym_ptr;\t/* local symbol pointer */\n   SYMR\t\t*end_ptr;\t/* symbol pointer to end block */\n@@ -1087,7 +1087,7 @@ typedef struct shash {\n typedef struct thash {\n   struct thash\t*next;\t\t/* next hash value */\n   AUXU\t\t type;\t\t/* type we are hashing */\n-  symint_t\t index;\t\t/* index within string table */\n+  symint_t\t indx;\t\t/* index within string table */\n } thash_t;\n \n \n@@ -1566,17 +1566,17 @@ static EXTR\t*orig_ext_syms;\t\t\t/* external symbols */\n #define CHECK(num,max,str) \\\n   (((unsigned long)num > (unsigned long)max) ? out_of_bounds (num, max, str, __LINE__) : 0)\n \n-#define ORIG_LINENUM(index)\t(CHECK ((index), orig_sym_hdr.cbLine,    \"line#\"), (index) + orig_linenum)\n-#define ORIG_DENSE(index)\t(CHECK ((index), orig_sym_hdr.idnMax,    \"dense\"), (index) + orig_dense)\n-#define ORIG_PROCS(index)\t(CHECK ((index), orig_sym_hdr.ipdMax,    \"procs\"), (index) + orig_procs)\n-#define ORIG_FILES(index)\t(CHECK ((index), orig_sym_hdr.ifdMax,    \"funcs\"), (index) + orig_files)\n-#define ORIG_LSYMS(index)\t(CHECK ((index), orig_sym_hdr.isymMax,   \"lsyms\"), (index) + orig_local_syms)\n-#define ORIG_LSTRS(index)\t(CHECK ((index), orig_sym_hdr.issMax,    \"lstrs\"), (index) + orig_local_strs)\n-#define ORIG_ESYMS(index)\t(CHECK ((index), orig_sym_hdr.iextMax,   \"esyms\"), (index) + orig_ext_syms)\n-#define ORIG_ESTRS(index)\t(CHECK ((index), orig_sym_hdr.issExtMax, \"estrs\"), (index) + orig_ext_strs)\n-#define ORIG_OPT(index)\t\t(CHECK ((index), orig_sym_hdr.ioptMax,   \"opt\"),   (index) + orig_opt_syms)\n-#define ORIG_AUX(index)\t\t(CHECK ((index), orig_sym_hdr.iauxMax,   \"aux\"),   (index) + orig_aux_syms)\n-#define ORIG_RFDS(index)\t(CHECK ((index), orig_sym_hdr.crfd,      \"rfds\"),  (index) + orig_rfds)\n+#define ORIG_LINENUM(indx)\t(CHECK ((indx), orig_sym_hdr.cbLine,    \"line#\"), (indx) + orig_linenum)\n+#define ORIG_DENSE(indx)\t(CHECK ((indx), orig_sym_hdr.idnMax,    \"dense\"), (indx) + orig_dense)\n+#define ORIG_PROCS(indx)\t(CHECK ((indx), orig_sym_hdr.ipdMax,    \"procs\"), (indx) + orig_procs)\n+#define ORIG_FILES(indx)\t(CHECK ((indx), orig_sym_hdr.ifdMax,    \"funcs\"), (indx) + orig_files)\n+#define ORIG_LSYMS(indx)\t(CHECK ((indx), orig_sym_hdr.isymMax,   \"lsyms\"), (indx) + orig_local_syms)\n+#define ORIG_LSTRS(indx)\t(CHECK ((indx), orig_sym_hdr.issMax,    \"lstrs\"), (indx) + orig_local_strs)\n+#define ORIG_ESYMS(indx)\t(CHECK ((indx), orig_sym_hdr.iextMax,   \"esyms\"), (indx) + orig_ext_syms)\n+#define ORIG_ESTRS(indx)\t(CHECK ((indx), orig_sym_hdr.issExtMax, \"estrs\"), (indx) + orig_ext_strs)\n+#define ORIG_OPT(indx)\t\t(CHECK ((indx), orig_sym_hdr.ioptMax,   \"opt\"),   (indx) + orig_opt_syms)\n+#define ORIG_AUX(indx)\t\t(CHECK ((indx), orig_sym_hdr.iauxMax,   \"aux\"),   (indx) + orig_aux_syms)\n+#define ORIG_RFDS(indx)\t\t(CHECK ((indx), orig_sym_hdr.crfd,      \"rfds\"),  (indx) + orig_rfds)\n \n /* Various other statics.  */\n static HDRR\tsymbolic_header;\t\t/* symbolic header */\n@@ -1879,9 +1879,8 @@ add_string (vp, hash_tbl, start, end_p1, ret_hash)\n       hash_tbl[hi] = hash_ptr;\n \n       hash_ptr->len = len;\n-      hash_ptr->index = vp->num_allocated;\n-      hash_ptr->string = p =\n-\t& vp->last->datum->byte[ vp->objects_last_page ];\n+      hash_ptr->indx = vp->num_allocated;\n+      hash_ptr->string = p = & vp->last->datum->byte[ vp->objects_last_page ];\n \n       vp->objects_last_page += len+1;\n       vp->num_allocated += len+1;\n@@ -1895,7 +1894,7 @@ add_string (vp, hash_tbl, start, end_p1, ret_hash)\n   if (ret_hash != (shash_t **)0)\n     *ret_hash = hash_ptr;\n \n-  return hash_ptr->index;\n+  return hash_ptr->indx;\n }\n \n \f\n@@ -1928,7 +1927,7 @@ add_local_symbol (str_start, str_end_p1, type, storage, value, indx)\n   psym->value = value;\n   psym->st = (unsigned) type;\n   psym->sc = (unsigned) storage;\n-  psym->index = indx;\n+  psym->indx = indx;\n   psym->iss = (str_start == (const char *)0)\n \t\t? 0\n \t\t: add_string (&cur_file_ptr->strings,\n@@ -2016,13 +2015,13 @@ add_local_symbol (str_start, str_end_p1, type, storage, value, indx)\n \t    }\n \n \t  cur_file_ptr->cur_scope = pscope->prev;\n-\t  psym->index = pscope->lnumber;\t/* blk end gets begin sym # */\n+\t  psym->indx = pscope->lnumber;\t\t/* blk end gets begin sym # */\n \n \t  if (storage != sc_Info)\n \t    psym->iss = pscope->lsym->iss;\t/* blk end gets same name */\n \n \t  if (begin_type == st_File || begin_type == st_Block)\n-\t    pscope->lsym->index = ret+1; /* block begin gets next sym # */\n+\t    pscope->lsym->indx = ret+1;\t\t/* block begin gets next sym # */\n \n \t  /* Functions push two or more aux words as follows:\n \t     1st word: index+1 of the end symbol\n@@ -2031,14 +2030,14 @@ add_local_symbol (str_start, str_end_p1, type, storage, value, indx)\n \t  else\n \t    {\n \t      symint_t type;\n-\t      pscope->lsym->index = add_aux_sym_symint (ret+1);\n+\t      pscope->lsym->indx = add_aux_sym_symint (ret+1);\n \t      type = add_aux_sym_tir (&last_func_type_info,\n \t\t\t\t      hash_no,\n \t\t\t\t      &cur_file_ptr->thash_head[0]);\n \t      if (last_func_eptr)\n \t\t{\n \t\t  last_func_eptr->ifd = cur_file_ptr->file_index;\n-\t\t  last_func_eptr->asym.index = type;\n+\t\t  last_func_eptr->asym.indx = type;\n \t\t}\n \t    }\n \n@@ -2113,7 +2112,7 @@ add_ext_symbol (str_start, str_end_p1, type, storage, value, indx, ifd)\n   psym->asym.value = value;\n   psym->asym.st    = (unsigned) type;\n   psym->asym.sc    = (unsigned) storage;\n-  psym->asym.index = indx;\n+  psym->asym.indx  = indx;\n   psym->asym.iss   = (str_start == (const char *)0)\n \t\t\t? 0\n \t\t\t: add_string (&ext_strings,\n@@ -2238,14 +2237,14 @@ add_aux_sym_tir (t, state, hash_tbl)\n \t}\n \n       if (hash_ptr != (thash_t *)0 && state == hash_yes)\n-\treturn hash_ptr->index;\n+\treturn hash_ptr->indx;\n \n       if (hash_ptr == (thash_t *)0)\n \t{\n \t  hash_ptr = allocate_thash ();\n \t  hash_ptr->next = hash_tbl[hi];\n \t  hash_ptr->type = aux;\n-\t  hash_ptr->index = vp->num_allocated;\n+\t  hash_ptr->indx = vp->num_allocated;\n \t  hash_tbl[hi] = hash_ptr;\n \t}\n     }\n@@ -2281,7 +2280,7 @@ add_aux_sym_tir (t, state, hash_tbl)\n       || t->basic_type == bt_Enum)\n     {\n       register symint_t file_index = t->tag_ptr->ifd;\n-      register symint_t sym_index  = t->tag_ptr->index;\n+      register symint_t sym_index  = t->tag_ptr->indx;\n \n       if (t->unknown_tag)\n \t{\n@@ -2335,10 +2334,10 @@ add_aux_sym_tir (t, state, hash_tbl)\n /* Add a tag to the tag table (unless it already exists).  */\n \n STATIC tag_t *\n-get_tag (tag_start, tag_end_p1, index, basic_type)\n+get_tag (tag_start, tag_end_p1, indx, basic_type)\n      const char *tag_start;\t\t/* 1st byte of tag name */\n      const char *tag_end_p1;\t\t/* 1st byte after tag name */\n-     symint_t index;\t\t\t/* index of tag start block */\n+     symint_t indx;\t\t\t/* index of tag start block */\n      bt_t basic_type;\t\t\t/* bt_Struct, bt_Union, or bt_Enum */\n {\n   shash_t *hash_ptr;\n@@ -2352,11 +2351,11 @@ get_tag (tag_start, tag_end_p1, index, basic_type)\n       && hash_ptr->tag_ptr != (tag_t *)0)\n   {\n     tag_ptr = hash_ptr->tag_ptr;\n-    if (index != indexNil)\n+    if (indx != indexNil)\n       {\n \ttag_ptr->basic_type = basic_type;\n \ttag_ptr->ifd\t    = cur_file_ptr->file_index;\n-\ttag_ptr->index\t    = index;\n+\ttag_ptr->indx\t    = indx;\n       }\n     return tag_ptr;\n   }\n@@ -2372,8 +2371,8 @@ get_tag (tag_start, tag_end_p1, index, basic_type)\n   tag_ptr->hash_ptr\t= hash_ptr;\n   tag_ptr->same_name\t= hash_ptr->tag_ptr;\n   tag_ptr->basic_type\t= basic_type;\n-  tag_ptr->index\t= index;\n-  tag_ptr->ifd\t\t= (index == indexNil) ? -1 : cur_file_ptr->file_index;\n+  tag_ptr->indx\t\t= indx;\n+  tag_ptr->ifd\t\t= (indx == indexNil) ? -1 : cur_file_ptr->file_index;\n   tag_ptr->same_block\t= cur_tag_head->first_tag;\n \n   cur_tag_head->first_tag = tag_ptr;\n@@ -2432,7 +2431,7 @@ add_unknown_tag (ptag)\n       f_next = f_next->next;\n \n       f_cur->ifd_ptr->isym = file_index;\n-      f_cur->index_ptr->rndx.index = sym_index;\n+      f_cur->index_ptr->rndx.indx = sym_index;\n \n       free_forward (f_cur);\n     }\n@@ -2905,7 +2904,7 @@ parse_def (name_start)\n   EXTR *eptr\t\t  = (EXTR *)0;\t\t/* ext. sym equivalent to def*/\n   int is_function\t  = 0;\t\t\t/* != 0 if function */\n   symint_t value\t  = 0;\n-  symint_t index\t  = cur_file_ptr->void_type;\n+  symint_t indx\t\t  = cur_file_ptr->void_type;\n   int error_line\t  = 0;\n   symint_t arg_number;\n   symint_t temp_array[ N_TQ ];\n@@ -3300,10 +3299,10 @@ parse_def (name_start)\n      type word in the aux. symbol table.  */\n \n   if (symbol_type == st_Block || symbol_type == st_End)\n-    index = 0;\n+    indx = 0;\n \n   else if (inside_enumeration)\n-    index = cur_file_ptr->void_type;\n+    indx = cur_file_ptr->void_type;\n \n   else\n     {\n@@ -3330,20 +3329,20 @@ parse_def (name_start)\n \t  return;\n \t}\n \n-      index = add_aux_sym_tir (&t,\n-\t\t\t       hash_yes,\n-\t\t\t       &cur_file_ptr->thash_head[0]);\n+      indx = add_aux_sym_tir (&t,\n+\t\t\t      hash_yes,\n+\t\t\t      &cur_file_ptr->thash_head[0]);\n     }\n \n \n   /* If this is an external or static symbol, update the appropriate\n      external symbol.  */\n \n   if (eptr != (EXTR *)0\n-      && (eptr->asym.index == indexNil || cur_proc_ptr == (PDR *)0))\n+      && (eptr->asym.indx == indexNil || cur_proc_ptr == (PDR *)0))\n     {\n       eptr->ifd = cur_file_ptr->file_index;\n-      eptr->asym.index = index;\n+      eptr->asym.indx = indx;\n     }\n \n \n@@ -3385,7 +3384,7 @@ parse_def (name_start)\n       /* Members of structures and unions that aren't bitfields, need\n \t to adjust the value from a byte offset to a bit offset.\n \t Members of enumerations do not have the value adjusted, and\n-\t can be distinguished by index == indexNil.  For enumerations,\n+\t can be distinguished by indx == indexNil.  For enumerations,\n \t update the maximum enumeration value.  */\n \n     case st_Member:\n@@ -3406,7 +3405,7 @@ parse_def (name_start)\n       symint_t isym = add_local_symbol (name_start, name_end_p1,\n \t\t\t\t\tsymbol_type, storage_class,\n \t\t\t\t\tvalue,\n-\t\t\t\t\tindex);\n+\t\t\t\t\tindx);\n \n       /* deal with struct, union, and enum tags.  */\n       if (symbol_type == st_Block)\n@@ -3430,7 +3429,7 @@ parse_def (name_start)\n \t      f_next = f_next->next;\n \n \t      f_cur->ifd_ptr->isym = file_index;\n-\t      f_cur->index_ptr->rndx.index = isym;\n+\t      f_cur->index_ptr->rndx.indx = isym;\n \n \t      free_forward (f_cur);\n \t    }\n@@ -4565,7 +4564,7 @@ copy_object __proto((void))\n \t\t\t     (st_t) eptr->asym.st,\n \t\t\t     (sc_t) eptr->asym.sc,\n \t\t\t     eptr->asym.value,\n-\t\t\t     (symint_t)((eptr->asym.index == indexNil) ? indexNil : 0),\n+\t\t\t     (symint_t)((eptr->asym.indx == indexNil) ? indexNil : 0),\n \t\t\t     (ifd < orig_sym_hdr.ifdMax) ? remap_file_number[ ifd ] : ifd);\n     }\n \n@@ -4640,7 +4639,7 @@ copy_object __proto((void))\n \t\t    orig_str_hash[hash_index] = shash_ptr;\n \n \t\t    shash_ptr->len = len;\n-\t\t    shash_ptr->index = indexNil;\n+\t\t    shash_ptr->indx = indexNil;\n \t\t    shash_ptr->string = str;\n \t\t    shash_ptr->sym_ptr = sym;\n \t\t  }\n@@ -4999,17 +4998,17 @@ pfatal_with_name (msg)\n    ORIG_xxx macros, but the function never returns.  */\n \n static int\n-out_of_bounds (index, max, str, prog_line)\n-     symint_t index;\t\t/* index that is out of bounds */\n+out_of_bounds (indx, max, str, prog_line)\n+     symint_t indx;\t\t/* index that is out of bounds */\n      symint_t max;\t\t/* maximum index */\n      const char *str;\t\t/* string to print out */\n      int prog_line;\t\t/* line number within mips-tfile.c */\n {\n-  if (index < max)\t\t/* just in case */\n+  if (indx < max)\t\t/* just in case */\n     return 0;\n \n   fprintf (stderr, \"%s, %s:%ld index %u is out of bounds for %s, max is %u, mips-tfile.c line# %d\\n\",\n-\t   progname, input_name, line_number, index, str, max, prog_line);\n+\t   progname, input_name, line_number, indx, str, max, prog_line);\n \n   exit (1);\n   return 0;\t\t\t/* turn off warning messages */"}]}