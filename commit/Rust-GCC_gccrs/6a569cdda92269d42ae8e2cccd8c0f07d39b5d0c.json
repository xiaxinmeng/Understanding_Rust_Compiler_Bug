{"sha": "6a569cdda92269d42ae8e2cccd8c0f07d39b5d0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE1NjljZGRhOTIyNjlkNDJhZThlMmNjY2Q4YzBmMDdkMzliNWQwYw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-11-24T10:37:30Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-11-24T10:37:30Z"}, "message": "[AArch64][1/5] Implement TARGET_SCHED_MACRO_FUSION_PAIR_P\n\n\t* config/aarch64/aarch64-protos.h (struct tune_params): Add\n\tfuseable_ops field.\n\t* config/aarch64/aarch64.c (generic_tunings): Specify fuseable_ops.\n\t(cortexa53_tunings): Likewise.\n\t(cortexa57_tunings): Likewise.\n\t(thunderx_tunings): Likewise.\n\t(aarch64_macro_fusion_p): New function.\n\t(aarch_macro_fusion_pair_p): Likewise.\n\t(TARGET_SCHED_MACRO_FUSION_P): Define.\n\t(TARGET_SCHED_MACRO_FUSION_PAIR_P): Likewise.\n\t(AARCH64_FUSE_MOV_MOVK): Likewise.\n\t(AARCH64_FUSE_NOTHING): Likewise.\n\nFrom-SVN: r218007", "tree": {"sha": "106c57a51f7ff4c5ddbe8f70e047a4da5558ddb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/106c57a51f7ff4c5ddbe8f70e047a4da5558ddb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a569cdda92269d42ae8e2cccd8c0f07d39b5d0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a569cdda92269d42ae8e2cccd8c0f07d39b5d0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a569cdda92269d42ae8e2cccd8c0f07d39b5d0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a569cdda92269d42ae8e2cccd8c0f07d39b5d0c/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a3dc1a4518793aa75cd60e41cf7f75d234a55031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3dc1a4518793aa75cd60e41cf7f75d234a55031", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3dc1a4518793aa75cd60e41cf7f75d234a55031"}], "stats": {"total": 90, "additions": 86, "deletions": 4}, "files": [{"sha": "562ef8a0582e0342dc54fea1df8118be50f0a6c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a569cdda92269d42ae8e2cccd8c0f07d39b5d0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a569cdda92269d42ae8e2cccd8c0f07d39b5d0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a569cdda92269d42ae8e2cccd8c0f07d39b5d0c", "patch": "@@ -1,3 +1,18 @@\n+2014-11-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (struct tune_params): Add\n+\tfuseable_ops field.\n+\t* config/aarch64/aarch64.c (generic_tunings): Specify fuseable_ops.\n+\t(cortexa53_tunings): Likewise.\n+\t(cortexa57_tunings): Likewise.\n+\t(thunderx_tunings): Likewise.\n+\t(aarch64_macro_fusion_p): New function.\n+\t(aarch_macro_fusion_pair_p): Likewise.\n+\t(TARGET_SCHED_MACRO_FUSION_P): Define.\n+\t(TARGET_SCHED_MACRO_FUSION_PAIR_P): Likewise.\n+\t(AARCH64_FUSE_MOV_MOVK): Likewise.\n+\t(AARCH64_FUSE_NOTHING): Likewise.\n+\n 2014-11-24  Martin Liska  <mliska@suse.cz>\n \n \tPR lto/63968"}, {"sha": "f5db563189d1c39fda14b8fca3022617fcb2e577", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a569cdda92269d42ae8e2cccd8c0f07d39b5d0c/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a569cdda92269d42ae8e2cccd8c0f07d39b5d0c/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=6a569cdda92269d42ae8e2cccd8c0f07d39b5d0c", "patch": "@@ -170,6 +170,7 @@ struct tune_params\n   const struct cpu_vector_cost *const vec_costs;\n   const int memmov_cost;\n   const int issue_rate;\n+  const unsigned int fuseable_ops;\n };\n \n HOST_WIDE_INT aarch64_initial_elimination_offset (unsigned, unsigned);"}, {"sha": "e9be8bc95e53b7fca7def751a84660fdb0d3259f", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 70, "deletions": 4, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a569cdda92269d42ae8e2cccd8c0f07d39b5d0c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a569cdda92269d42ae8e2cccd8c0f07d39b5d0c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=6a569cdda92269d42ae8e2cccd8c0f07d39b5d0c", "patch": "@@ -304,6 +304,9 @@ static const struct cpu_vector_cost cortexa57_vector_cost =\n   NAMED_PARAM (cond_not_taken_branch_cost, 1)\n };\n \n+#define AARCH64_FUSE_NOTHING\t(0)\n+#define AARCH64_FUSE_MOV_MOVK\t(1 << 0)\n+\n #if HAVE_DESIGNATED_INITIALIZERS && GCC_VERSION >= 2007\n __extension__\n #endif\n@@ -314,7 +317,8 @@ static const struct tune_params generic_tunings =\n   &generic_regmove_cost,\n   &generic_vector_cost,\n   NAMED_PARAM (memmov_cost, 4),\n-  NAMED_PARAM (issue_rate, 2)\n+  NAMED_PARAM (issue_rate, 2),\n+  NAMED_PARAM (fuseable_ops, AARCH64_FUSE_NOTHING)\n };\n \n static const struct tune_params cortexa53_tunings =\n@@ -324,7 +328,8 @@ static const struct tune_params cortexa53_tunings =\n   &cortexa53_regmove_cost,\n   &generic_vector_cost,\n   NAMED_PARAM (memmov_cost, 4),\n-  NAMED_PARAM (issue_rate, 2)\n+  NAMED_PARAM (issue_rate, 2),\n+  NAMED_PARAM (fuseable_ops, AARCH64_FUSE_MOV_MOVK)\n };\n \n static const struct tune_params cortexa57_tunings =\n@@ -334,7 +339,8 @@ static const struct tune_params cortexa57_tunings =\n   &cortexa57_regmove_cost,\n   &cortexa57_vector_cost,\n   NAMED_PARAM (memmov_cost, 4),\n-  NAMED_PARAM (issue_rate, 3)\n+  NAMED_PARAM (issue_rate, 3),\n+  NAMED_PARAM (fuseable_ops, AARCH64_FUSE_MOV_MOVK)\n };\n \n static const struct tune_params thunderx_tunings =\n@@ -344,7 +350,8 @@ static const struct tune_params thunderx_tunings =\n   &thunderx_regmove_cost,\n   &generic_vector_cost,\n   NAMED_PARAM (memmov_cost, 6),\n-  NAMED_PARAM (issue_rate, 2)\n+  NAMED_PARAM (issue_rate, 2),\n+  NAMED_PARAM (fuseable_ops, AARCH64_FUSE_NOTHING)\n };\n \n /* A processor implementing AArch64.  */\n@@ -10370,6 +10377,59 @@ aarch64_gen_ccmp_next (rtx prev, int cmp_code, rtx op0, rtx op1, int bit_code)\n #undef TARGET_GEN_CCMP_NEXT\n #define TARGET_GEN_CCMP_NEXT aarch64_gen_ccmp_next\n \n+/* Implement TARGET_SCHED_MACRO_FUSION_P.  Return true if target supports\n+   instruction fusion of some sort.  */\n+\n+static bool\n+aarch64_macro_fusion_p (void)\n+{\n+  return aarch64_tune_params->fuseable_ops != AARCH64_FUSE_NOTHING;\n+}\n+\n+\n+/* Implement TARGET_SCHED_MACRO_FUSION_PAIR_P.  Return true if PREV and CURR\n+   should be kept together during scheduling.  */\n+\n+static bool\n+aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n+{\n+  rtx set_dest;\n+  rtx prev_set = single_set (prev);\n+  rtx curr_set = single_set (curr);\n+  /* prev and curr are simple SET insns i.e. no flag setting or branching.  */\n+  bool simple_sets_p = prev_set && curr_set && !any_condjump_p (curr);\n+\n+  if (!aarch64_macro_fusion_p ())\n+    return false;\n+\n+  if (simple_sets_p\n+      && (aarch64_tune_params->fuseable_ops & AARCH64_FUSE_MOV_MOVK))\n+    {\n+      /* We are trying to match:\n+         prev (mov)  == (set (reg r0) (const_int imm16))\n+         curr (movk) == (set (zero_extract (reg r0)\n+                                           (const_int 16)\n+                                           (const_int 16))\n+                             (const_int imm16_1))  */\n+\n+      set_dest = SET_DEST (curr_set);\n+\n+      if (GET_CODE (set_dest) == ZERO_EXTRACT\n+          && CONST_INT_P (SET_SRC (curr_set))\n+          && CONST_INT_P (SET_SRC (prev_set))\n+          && CONST_INT_P (XEXP (set_dest, 2))\n+          && INTVAL (XEXP (set_dest, 2)) == 16\n+          && REG_P (XEXP (set_dest, 0))\n+          && REG_P (SET_DEST (prev_set))\n+          && REGNO (XEXP (set_dest, 0)) == REGNO (SET_DEST (prev_set)))\n+        {\n+          return true;\n+        }\n+    }\n+\n+  return false;\n+}\n+\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST aarch64_address_cost\n \n@@ -10629,6 +10689,12 @@ aarch64_gen_ccmp_next (rtx prev, int cmp_code, rtx op0, rtx op1, int bit_code)\n #undef TARGET_CAN_USE_DOLOOP_P\n #define TARGET_CAN_USE_DOLOOP_P can_use_doloop_if_innermost\n \n+#undef TARGET_SCHED_MACRO_FUSION_P\n+#define TARGET_SCHED_MACRO_FUSION_P aarch64_macro_fusion_p\n+\n+#undef TARGET_SCHED_MACRO_FUSION_PAIR_P\n+#define TARGET_SCHED_MACRO_FUSION_PAIR_P aarch_macro_fusion_pair_p\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-aarch64.h\""}]}