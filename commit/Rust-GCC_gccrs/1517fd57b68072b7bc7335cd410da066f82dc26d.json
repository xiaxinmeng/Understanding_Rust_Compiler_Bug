{"sha": "1517fd57b68072b7bc7335cd410da066f82dc26d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUxN2ZkNTdiNjgwNzJiN2JjNzMzNWNkNDEwZGEwNjZmODJkYzI2ZA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-10-19T19:21:18Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-10-19T19:21:18Z"}, "message": "re PR fortran/41586 ([OOP] Allocatable _scalars_ are never auto-deallocated)\n\n2009-10-19  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/41586\n\t* parse.c (parse_derived): Correctly set 'alloc_comp' and 'pointer_comp'\n\tfor CLASS variables.\n\t* trans-array.c (structure_alloc_comps): Handle deallocation and\n\tnullification of allocatable scalar components.\n\t* trans-decl.c (gfc_get_symbol_decl): Remember allocatable scalars for\n\tautomatic deallocation.\n\t(gfc_trans_deferred_vars): Automatically deallocate allocatable scalars.\n\n\n2009-10-19  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/41586\n\t* gfortran.dg/auto_dealloc_1.f90: New test case.\n\nFrom-SVN: r152988", "tree": {"sha": "d3eecbe4bbb8cd2740df65146325439f783a1cf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3eecbe4bbb8cd2740df65146325439f783a1cf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1517fd57b68072b7bc7335cd410da066f82dc26d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1517fd57b68072b7bc7335cd410da066f82dc26d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1517fd57b68072b7bc7335cd410da066f82dc26d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1517fd57b68072b7bc7335cd410da066f82dc26d/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55165bf6b48ed26cd17e66ac447dcfeaaf110fca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55165bf6b48ed26cd17e66ac447dcfeaaf110fca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55165bf6b48ed26cd17e66ac447dcfeaaf110fca"}], "stats": {"total": 189, "additions": 176, "deletions": 13}, "files": [{"sha": "ce18d2d46b639c768e2af2555b8f79253f8d2fb8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1517fd57b68072b7bc7335cd410da066f82dc26d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1517fd57b68072b7bc7335cd410da066f82dc26d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1517fd57b68072b7bc7335cd410da066f82dc26d", "patch": "@@ -1,3 +1,14 @@\n+2009-10-19  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/41586\n+\t* parse.c (parse_derived): Correctly set 'alloc_comp' and 'pointer_comp'\n+\tfor CLASS variables.\n+\t* trans-array.c (structure_alloc_comps): Handle deallocation and\n+\tnullification of allocatable scalar components.\n+\t* trans-decl.c (gfc_get_symbol_decl): Remember allocatable scalars for\n+\tautomatic deallocation.\n+\t(gfc_trans_deferred_vars): Automatically deallocate allocatable scalars.\n+\n 2009-10-19  Tobias Burnus  <burnus@net-b.de>\n \t    Steven G. Kargl  <kargl@gcc.gnu.org>\n "}, {"sha": "95a327bf23de6bb01c2daf00fe12856f4e02a184", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1517fd57b68072b7bc7335cd410da066f82dc26d/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1517fd57b68072b7bc7335cd410da066f82dc26d/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=1517fd57b68072b7bc7335cd410da066f82dc26d", "patch": "@@ -2068,11 +2068,15 @@ parse_derived (void)\n     {\n       /* Look for allocatable components.  */\n       if (c->attr.allocatable\n+\t  || (c->ts.type == BT_CLASS\n+\t      && c->ts.u.derived->components->attr.allocatable)\n \t  || (c->ts.type == BT_DERIVED && c->ts.u.derived->attr.alloc_comp))\n \tsym->attr.alloc_comp = 1;\n \n       /* Look for pointer components.  */\n       if (c->attr.pointer\n+\t  || (c->ts.type == BT_CLASS\n+\t      && c->ts.u.derived->components->attr.pointer)\n \t  || (c->ts.type == BT_DERIVED && c->ts.u.derived->attr.pointer_comp))\n \tsym->attr.pointer_comp = 1;\n "}, {"sha": "4e94373133abde9585fbd2a9afa6dc1294b8e013", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1517fd57b68072b7bc7335cd410da066f82dc26d/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1517fd57b68072b7bc7335cd410da066f82dc26d/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=1517fd57b68072b7bc7335cd410da066f82dc26d", "patch": "@@ -5906,6 +5906,36 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t      tmp = gfc_trans_dealloc_allocated (comp);\n \t      gfc_add_expr_to_block (&fnblock, tmp);\n \t    }\n+\t  else if (c->attr.allocatable)\n+\t    {\n+\t      /* Allocatable scalar components.  */\n+\t      comp = fold_build3 (COMPONENT_REF, ctype, decl, cdecl, NULL_TREE);\n+\n+\t      tmp = gfc_deallocate_with_status (comp, NULL_TREE, true, NULL);\n+\t      gfc_add_expr_to_block (&fnblock, tmp);\n+\n+\t      tmp = fold_build2 (MODIFY_EXPR, void_type_node, comp,\n+\t\t\t\t build_int_cst (TREE_TYPE (comp), 0));\n+\t      gfc_add_expr_to_block (&fnblock, tmp);\n+\t    }\n+\t  else if (c->ts.type == BT_CLASS\n+\t\t   && c->ts.u.derived->components->attr.allocatable)\n+\t    {\n+\t      /* Allocatable scalar CLASS components.  */\n+\t      comp = fold_build3 (COMPONENT_REF, ctype, decl, cdecl, NULL_TREE);\n+\t      \n+\t      /* Add reference to '$data' component.  */\n+\t      tmp = c->ts.u.derived->components->backend_decl;\n+\t      comp = fold_build3 (COMPONENT_REF, TREE_TYPE (tmp),\n+\t\t\t\t  comp, tmp, NULL_TREE);\n+\n+\t      tmp = gfc_deallocate_with_status (comp, NULL_TREE, true, NULL);\n+\t      gfc_add_expr_to_block (&fnblock, tmp);\n+\n+\t      tmp = fold_build2 (MODIFY_EXPR, void_type_node, comp,\n+\t\t\t\t build_int_cst (TREE_TYPE (comp), 0));\n+\t      gfc_add_expr_to_block (&fnblock, tmp);\n+\t    }\n \t  break;\n \n \tcase NULLIFY_ALLOC_COMP:\n@@ -5917,6 +5947,27 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t\t\t\t  decl, cdecl, NULL_TREE);\n \t      gfc_conv_descriptor_data_set (&fnblock, comp, null_pointer_node);\n \t    }\n+\t  else if (c->attr.allocatable)\n+\t    {\n+\t      /* Allocatable scalar components.  */\n+\t      comp = fold_build3 (COMPONENT_REF, ctype, decl, cdecl, NULL_TREE);\n+\t      tmp = fold_build2 (MODIFY_EXPR, void_type_node, comp,\n+\t\t\t\t build_int_cst (TREE_TYPE (comp), 0));\n+\t      gfc_add_expr_to_block (&fnblock, tmp);\n+\t    }\n+\t  else if (c->ts.type == BT_CLASS\n+\t\t   && c->ts.u.derived->components->attr.allocatable)\n+\t    {\n+\t      /* Allocatable scalar CLASS components.  */\n+\t      comp = fold_build3 (COMPONENT_REF, ctype, decl, cdecl, NULL_TREE);\n+\t      /* Add reference to '$data' component.  */\n+\t      tmp = c->ts.u.derived->components->backend_decl;\n+\t      comp = fold_build3 (COMPONENT_REF, TREE_TYPE (tmp),\n+\t\t\t\t  comp, tmp, NULL_TREE);\n+\t      tmp = fold_build2 (MODIFY_EXPR, void_type_node, comp,\n+\t\t\t\t build_int_cst (TREE_TYPE (comp), 0));\n+\t      gfc_add_expr_to_block (&fnblock, tmp);\n+\t    }\n           else if (cmp_has_alloc_comps)\n \t    {\n \t      comp = fold_build3 (COMPONENT_REF, ctype,"}, {"sha": "8812675990f7eb06adc4e16808acd5967c33b6f6", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 46, "deletions": 13, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1517fd57b68072b7bc7335cd410da066f82dc26d/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1517fd57b68072b7bc7335cd410da066f82dc26d/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=1517fd57b68072b7bc7335cd410da066f82dc26d", "patch": "@@ -1187,22 +1187,23 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n       /* Create variables to hold the non-constant bits of array info.  */\n       gfc_build_qualified_array (decl, sym);\n \n-      /* Remember this variable for allocation/cleanup.  */\n-      gfc_defer_symbol_init (sym);\n-\n       if ((sym->attr.allocatable || !sym->attr.dummy) && !sym->attr.pointer)\n \tGFC_DECL_PACKED_ARRAY (decl) = 1;\n     }\n \n-  if (sym->ts.type == BT_DERIVED && sym->ts.u.derived->attr.alloc_comp)\n-    gfc_defer_symbol_init (sym);\n-  /* This applies a derived type default initializer.  */\n-  else if (sym->ts.type == BT_DERIVED\n-\t     && sym->attr.save == SAVE_NONE\n-\t     && !sym->attr.data\n-\t     && !sym->attr.allocatable\n-\t     && (sym->value && !sym->ns->proc_name->attr.is_main_program)\n-\t     && !sym->attr.use_assoc)\n+  /* Remember this variable for allocation/cleanup.  */\n+  if (sym->attr.dimension || sym->attr.allocatable\n+      || (sym->ts.type == BT_CLASS &&\n+\t  (sym->ts.u.derived->components->attr.dimension\n+\t   || sym->ts.u.derived->components->attr.allocatable))\n+      || (sym->ts.type == BT_DERIVED && sym->ts.u.derived->attr.alloc_comp)\n+      /* This applies a derived type default initializer.  */\n+      || (sym->ts.type == BT_DERIVED\n+\t  && sym->attr.save == SAVE_NONE\n+\t  && !sym->attr.data\n+\t  && !sym->attr.allocatable\n+\t  && (sym->value && !sym->ns->proc_name->attr.is_main_program)\n+\t  && !sym->attr.use_assoc))\n     gfc_defer_symbol_init (sym);\n \n   gfc_finish_var_decl (decl, sym);\n@@ -3054,7 +3055,8 @@ init_intent_out_dt (gfc_symbol * proc_sym, tree body)\n     Allocation and initialization of array variables.\n     Allocation of character string variables.\n     Initialization and possibly repacking of dummy arrays.\n-    Initialization of ASSIGN statement auxiliary variable.  */\n+    Initialization of ASSIGN statement auxiliary variable.\n+    Automatic deallocation.  */\n \n tree\n gfc_trans_deferred_vars (gfc_symbol * proc_sym, tree fnbody)\n@@ -3182,6 +3184,37 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, tree fnbody)\n \t}\n       else if (sym_has_alloc_comp)\n \tfnbody = gfc_trans_deferred_array (sym, fnbody);\n+      else if (sym->attr.allocatable\n+\t       || (sym->ts.type == BT_CLASS\n+\t\t   && sym->ts.u.derived->components->attr.allocatable))\n+\t{\n+\t  /* Automatic deallocatation of allocatable scalars.  */\n+\t  tree tmp;\n+\t  gfc_expr *e;\n+\t  gfc_se se;\n+\t  stmtblock_t block;\n+\t  \n+\t  e = gfc_lval_expr_from_sym (sym);\n+\t  if (sym->ts.type == BT_CLASS)\n+\t    gfc_add_component_ref (e, \"$data\");\n+\n+\t  gfc_init_se (&se, NULL);\n+\t  se.want_pointer = 1;\n+\t  gfc_conv_expr (&se, e);\n+\t  gfc_free_expr (e);\n+\n+\t  gfc_start_block (&block);\n+\t  gfc_add_expr_to_block (&block, fnbody);\n+\n+\t  tmp = gfc_deallocate_with_status (se.expr, NULL_TREE, true, NULL);\n+\t  gfc_add_expr_to_block (&block, tmp);\n+\n+\t  tmp = fold_build2 (MODIFY_EXPR, void_type_node,\n+\t\t\t     se.expr, build_int_cst (TREE_TYPE (se.expr), 0));\n+\t  gfc_add_expr_to_block (&block, tmp);\n+\n+\t  fnbody = gfc_finish_block (&block);\n+\t}\n       else if (sym->ts.type == BT_CHARACTER)\n \t{\n \t  gfc_get_backend_locus (&loc);"}, {"sha": "6490c97a5598db29702251cd5c44deeedd107902", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1517fd57b68072b7bc7335cd410da066f82dc26d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1517fd57b68072b7bc7335cd410da066f82dc26d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1517fd57b68072b7bc7335cd410da066f82dc26d", "patch": "@@ -1,3 +1,8 @@\n+2009-10-19  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/41586\n+\t* gfortran.dg/auto_dealloc_1.f90: New test case.\n+\n 2009-10-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPort from redhat/gcc-4_4-branch:"}, {"sha": "176f87a3d343478c6148678fdabd7c5c594505f6", "filename": "gcc/testsuite/gfortran.dg/auto_dealloc_1.f90", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1517fd57b68072b7bc7335cd410da066f82dc26d/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_dealloc_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1517fd57b68072b7bc7335cd410da066f82dc26d/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_dealloc_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_dealloc_1.f90?ref=1517fd57b68072b7bc7335cd410da066f82dc26d", "patch": "@@ -0,0 +1,59 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! PR 41586: Allocatable _scalars_ are never auto-deallocated\n+!\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+\n+module automatic_deallocation\n+\n+  type t0\n+    integer :: i\n+  end type\n+\n+  type t1\n+    real :: pi = 3.14\n+    integer, allocatable :: j\n+  end type\n+\n+  type t2\n+    class(t0), allocatable :: k\n+  end type t2\n+\n+contains\n+\n+  ! (1) simple allocatable scalars\n+  subroutine a\n+    integer, allocatable :: m\n+    allocate (m)\n+    m = 42\n+  end subroutine\n+\n+  ! (2) allocatable scalar CLASS variables\n+  subroutine b\n+    class(t0), allocatable :: m\n+    allocate (t0 :: m)\n+    m%i = 43\n+  end subroutine\n+\n+  ! (3) allocatable scalar components\n+  subroutine c\n+    type(t1) :: m\n+    allocate (m%j)\n+    m%j = 44\n+  end subroutine\n+\n+  ! (4) allocatable scalar CLASS components\n+  subroutine d\n+    type(t2) :: m\n+    allocate (t0 :: m%k)\n+    m%k%i = 45\n+  end subroutine\n+\n+end module \n+\n+\n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 5 \"original\" } }\n+\n+! { dg-final { cleanup-modules \"automatic_deallocation\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}