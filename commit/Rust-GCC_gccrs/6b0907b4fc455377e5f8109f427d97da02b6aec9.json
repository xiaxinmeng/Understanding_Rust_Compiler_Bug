{"sha": "6b0907b4fc455377e5f8109f427d97da02b6aec9", "node_id": "C_kwDOANBUbNoAKDZiMDkwN2I0ZmM0NTUzNzdlNWY4MTA5ZjQyN2Q5N2RhMDJiNmFlYzk", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-16T08:41:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-16T08:41:38Z"}, "message": "x86: Avoid -Wuninitialized warnings on _mm*_undefined_* in C++ [PR105593]\n\nIn https://gcc.gnu.org/pipermail/gcc-patches/2023-January/609844.html\nI've posted a patch to allow ignoring -Winit-self using GCC diagnostic\npragmas, such that one can mark self-initialization as intentional\ndisabling of -Wuninitialized warnings.\n\nThe following incremental patch uses that in the x86 intrinsic\nheaders.\n\n2023-01-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/105593\ngcc/\n\t* config/i386/xmmintrin.h (_mm_undefined_ps): Temporarily\n\tdisable -Winit-self using pragma GCC diagnostic ignored.\n\t* config/i386/emmintrin.h (_mm_undefined_pd, _mm_undefined_si128):\n\tLikewise.\n\t* config/i386/avxintrin.h (_mm256_undefined_pd, _mm256_undefined_ps,\n\t_mm256_undefined_si256): Likewise.\n\t* config/i386/avx512fintrin.h (_mm512_undefined_pd,\n\t_mm512_undefined_ps, _mm512_undefined_epi32): Likewise.\n\t* config/i386/avx512fp16intrin.h (_mm_undefined_ph,\n\t_mm256_undefined_ph, _mm512_undefined_ph): Likewise.\ngcc/testsuite/\n\t* g++.target/i386/pr105593.C: New test.", "tree": {"sha": "5bdca3578eb0c84e0883b52d17d7d757c69dca3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bdca3578eb0c84e0883b52d17d7d757c69dca3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b0907b4fc455377e5f8109f427d97da02b6aec9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b0907b4fc455377e5f8109f427d97da02b6aec9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b0907b4fc455377e5f8109f427d97da02b6aec9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b0907b4fc455377e5f8109f427d97da02b6aec9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98b41fd4045b7856e7b85dd58d67c600bd909379", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b41fd4045b7856e7b85dd58d67c600bd909379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98b41fd4045b7856e7b85dd58d67c600bd909379"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "24316c5a495727de7e4a34680ae9fb8188e4c831", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0907b4fc455377e5f8109f427d97da02b6aec9/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0907b4fc455377e5f8109f427d97da02b6aec9/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=6b0907b4fc455377e5f8109f427d97da02b6aec9", "patch": "@@ -185,7 +185,10 @@ extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_undefined_ps (void)\n {\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Winit-self\"\n   __m512 __Y = __Y;\n+#pragma GCC diagnostic pop\n   return __Y;\n }\n \n@@ -195,15 +198,21 @@ extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_undefined_pd (void)\n {\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Winit-self\"\n   __m512d __Y = __Y;\n+#pragma GCC diagnostic pop\n   return __Y;\n }\n \n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_undefined_epi32 (void)\n {\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Winit-self\"\n   __m512i __Y = __Y;\n+#pragma GCC diagnostic pop\n   return __Y;\n }\n "}, {"sha": "73ff060f0d4c5087e3139183393381bc2193da0b", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0907b4fc455377e5f8109f427d97da02b6aec9/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0907b4fc455377e5f8109f427d97da02b6aec9/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=6b0907b4fc455377e5f8109f427d97da02b6aec9", "patch": "@@ -204,23 +204,32 @@ extern __inline __m128h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_undefined_ph (void)\n {\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Winit-self\"\n   __m128h __Y = __Y;\n+#pragma GCC diagnostic pop\n   return __Y;\n }\n \n extern __inline __m256h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_undefined_ph (void)\n {\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Winit-self\"\n   __m256h __Y = __Y;\n+#pragma GCC diagnostic pop\n   return __Y;\n }\n \n extern __inline __m512h\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_undefined_ph (void)\n {\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Winit-self\"\n   __m512h __Y = __Y;\n+#pragma GCC diagnostic pop\n   return __Y;\n }\n "}, {"sha": "d5aff7ddcfa598579437c58f967fae47ca87f8b0", "filename": "gcc/config/i386/avxintrin.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0907b4fc455377e5f8109f427d97da02b6aec9/gcc%2Fconfig%2Fi386%2Favxintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0907b4fc455377e5f8109f427d97da02b6aec9/gcc%2Fconfig%2Fi386%2Favxintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favxintrin.h?ref=6b0907b4fc455377e5f8109f427d97da02b6aec9", "patch": "@@ -1207,21 +1207,30 @@ _mm256_movemask_ps (__m256 __A)\n extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_undefined_pd (void)\n {\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Winit-self\"\n   __m256d __Y = __Y;\n+#pragma GCC diagnostic pop\n   return __Y;\n }\n \n extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_undefined_ps (void)\n {\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Winit-self\"\n   __m256 __Y = __Y;\n+#pragma GCC diagnostic pop\n   return __Y;\n }\n \n extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_undefined_si256 (void)\n {\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Winit-self\"\n   __m256i __Y = __Y;\n+#pragma GCC diagnostic pop\n   return __Y;\n }\n "}, {"sha": "069b1a193a20de7746a67c428d912147377cfd03", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0907b4fc455377e5f8109f427d97da02b6aec9/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0907b4fc455377e5f8109f427d97da02b6aec9/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=6b0907b4fc455377e5f8109f427d97da02b6aec9", "patch": "@@ -99,7 +99,10 @@ _mm_setr_pd (double __W, double __X)\n extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_undefined_pd (void)\n {\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Winit-self\"\n   __m128d __Y = __Y;\n+#pragma GCC diagnostic pop\n   return __Y;\n }\n \n@@ -785,7 +788,10 @@ _mm_move_epi64 (__m128i __A)\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_undefined_si128 (void)\n {\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Winit-self\"\n   __m128i __Y = __Y;\n+#pragma GCC diagnostic pop\n   return __Y;\n }\n "}, {"sha": "7fb1794305de23becc8e8a4cae0684e17f16d800", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0907b4fc455377e5f8109f427d97da02b6aec9/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0907b4fc455377e5f8109f427d97da02b6aec9/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=6b0907b4fc455377e5f8109f427d97da02b6aec9", "patch": "@@ -112,7 +112,10 @@ typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_undefined_ps (void)\n {\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Winit-self\"\n   __m128 __Y = __Y;\n+#pragma GCC diagnostic pop\n   return __Y;\n }\n "}, {"sha": "3897f706bb11c63f72c5230cb078f368cf43238d", "filename": "gcc/testsuite/g++.target/i386/pr105593.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b0907b4fc455377e5f8109f427d97da02b6aec9/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr105593.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b0907b4fc455377e5f8109f427d97da02b6aec9/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr105593.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr105593.C?ref=6b0907b4fc455377e5f8109f427d97da02b6aec9", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/105593\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"-mavx512fp16 -W -Wall -O2\" }\n+\n+#include <x86intrin.h>\n+\n+auto f1 () { return _mm_undefined_pd (); }\n+auto f2 () { return _mm_undefined_ps (); }\n+auto f3 () { return _mm_undefined_si128 (); }\n+auto f4 () { return _mm_undefined_ph (); }\n+auto f5 () { return _mm256_undefined_pd (); }\n+auto f6 () { return _mm256_undefined_ps (); }\n+auto f7 () { return _mm256_undefined_si256 (); }\n+auto f8 () { return _mm256_undefined_ph (); }\n+auto f9 () { return _mm512_undefined_pd (); }\n+auto f10 () { return _mm512_undefined_ps (); }\n+auto f11 () { return _mm512_undefined_epi32 (); }\n+auto f12 () { return _mm512_undefined_ph (); }\n+\n+// { dg-bogus \"is used uninitialized\" \"\" { target *-*-* } 0 }"}]}