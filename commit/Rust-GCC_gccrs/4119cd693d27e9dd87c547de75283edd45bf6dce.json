{"sha": "4119cd693d27e9dd87c547de75283edd45bf6dce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDExOWNkNjkzZDI3ZTlkZDg3YzU0N2RlNzUyODNlZGQ0NWJmNmRjZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-20T08:33:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-20T08:33:38Z"}, "message": "store-merging: Fix up -fnon-call-exceptions handling [PR94224]\n\nWhen we are adding a single store into a store group, we are already\nchecking that store->lp_nr matches, but we have also code to add further\nINTEGER_CST stores into the group right away if the ordering requires that\neither we put there all or none from a certain set of stores.  And in those\ncases we weren't doing these lp_nr checks, which means we could end up with\nstores with different lp_nr in the same group, which then ICEs during\noutput_merged_store.\n\n2020-03-20  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/94224\n\t* gimple-ssa-store-merging.c\n\t(imm_store_chain_info::coalesce_immediate): Don't consider overlapping\n\tor adjacent INTEGER_CST rhs_code stores as mergeable if they have\n\tdifferent lp_nr.\n\n\t* g++.dg/tree-ssa/pr94224.C: New test.", "tree": {"sha": "d66dc4dfe4d722d9b97f891a9e5c44a431785271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d66dc4dfe4d722d9b97f891a9e5c44a431785271"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4119cd693d27e9dd87c547de75283edd45bf6dce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4119cd693d27e9dd87c547de75283edd45bf6dce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4119cd693d27e9dd87c547de75283edd45bf6dce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4119cd693d27e9dd87c547de75283edd45bf6dce/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05009698eeb925d691a8ebb51539df8d8f28d849", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05009698eeb925d691a8ebb51539df8d8f28d849", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05009698eeb925d691a8ebb51539df8d8f28d849"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "00dd10c7f1fc020de7250dd52ca1e10cb50b10fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4119cd693d27e9dd87c547de75283edd45bf6dce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4119cd693d27e9dd87c547de75283edd45bf6dce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4119cd693d27e9dd87c547de75283edd45bf6dce", "patch": "@@ -1,3 +1,11 @@\n+2020-03-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/94224\n+\t* gimple-ssa-store-merging.c\n+\t(imm_store_chain_info::coalesce_immediate): Don't consider overlapping\n+\tor adjacent INTEGER_CST rhs_code stores as mergeable if they have\n+\tdifferent lp_nr.\n+\n 2020-03-20  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/arm/arm.md (define_attr \"conds\"): Fix logic for neon and mve."}, {"sha": "83ae6c4c5b1db10138ac64a4e6f71c22c33f12af", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4119cd693d27e9dd87c547de75283edd45bf6dce/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4119cd693d27e9dd87c547de75283edd45bf6dce/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=4119cd693d27e9dd87c547de75283edd45bf6dce", "patch": "@@ -2773,7 +2773,8 @@ imm_store_chain_info::coalesce_immediate_stores ()\n \t\t\t    break;\n \t\t\t  if (info2->order < try_order)\n \t\t\t    {\n-\t\t\t      if (info2->rhs_code != INTEGER_CST)\n+\t\t\t      if (info2->rhs_code != INTEGER_CST\n+\t\t\t\t  || info2->lp_nr != merged_store->lp_nr)\n \t\t\t\t{\n \t\t\t\t  /* Normally check_no_overlap makes sure this\n \t\t\t\t     doesn't happen, but if end grows below,\n@@ -2791,6 +2792,7 @@ imm_store_chain_info::coalesce_immediate_stores ()\n \t\t\t\t\t      info2->bitpos + info2->bitsize);\n \t\t\t    }\n \t\t\t  else if (info2->rhs_code == INTEGER_CST\n+\t\t\t\t   && info2->lp_nr == merged_store->lp_nr\n \t\t\t\t   && !last_iter)\n \t\t\t    {\n \t\t\t      max_order = MAX (max_order, info2->order + 1);"}, {"sha": "d11f3fe0171d11e8c08629fd159fdbb344b82001", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4119cd693d27e9dd87c547de75283edd45bf6dce/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4119cd693d27e9dd87c547de75283edd45bf6dce/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4119cd693d27e9dd87c547de75283edd45bf6dce", "patch": "@@ -1,3 +1,8 @@\n+2020-03-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/94224\n+\t* g++.dg/tree-ssa/pr94224.C: New test.\n+\n 2020-03-19  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/94202"}, {"sha": "5251917bdaf843bd511a81ca8f0ed96674e61f4e", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr94224.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4119cd693d27e9dd87c547de75283edd45bf6dce/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr94224.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4119cd693d27e9dd87c547de75283edd45bf6dce/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr94224.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr94224.C?ref=4119cd693d27e9dd87c547de75283edd45bf6dce", "patch": "@@ -0,0 +1,34 @@\n+// PR tree-optimization/94224\n+// { dg-do compile }\n+// { dg-options \"-O2 -fnon-call-exceptions -Wno-return-type\" }\n+\n+void foo (int, int, long);\n+\n+static inline int\n+bar (int &x)\n+{\n+  x = 0;\n+}\n+\n+struct U\n+{\n+  int n, p;\n+  long q;\n+  bool *z;\n+  int a;\n+  U () : n (), z (), a (1) {}\n+  ~U () { if (n) foo (p, n, q); }\n+  void baz () { bar (a); }\n+};\n+\n+struct W\n+{\n+  U w[2];\n+  W () { w[0].baz (); }\n+};\n+\n+void\n+qux ()\n+{\n+  new W;\n+}"}]}