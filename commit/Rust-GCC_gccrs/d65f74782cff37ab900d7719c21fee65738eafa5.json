{"sha": "d65f74782cff37ab900d7719c21fee65738eafa5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY1Zjc0NzgyY2ZmMzdhYjkwMGQ3NzE5YzIxZmVlNjU3MzhlYWZhNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2001-10-26T18:29:51Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2001-10-26T18:29:51Z"}, "message": "s390.c: Fix comment typos.\n\n\t* s390/s390.c: Fix comment typos.\n\t* s390/s390.h: Likewise.\n\t* s390/s390.md: Likewise.\n\nFrom-SVN: r46557", "tree": {"sha": "a7f650d990e921ab08427ad5f53f98aee839d0e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7f650d990e921ab08427ad5f53f98aee839d0e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d65f74782cff37ab900d7719c21fee65738eafa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d65f74782cff37ab900d7719c21fee65738eafa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d65f74782cff37ab900d7719c21fee65738eafa5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d65f74782cff37ab900d7719c21fee65738eafa5/comments", "author": null, "committer": null, "parents": [{"sha": "6c624f7f882ea3fdd121c9ab5f8d604c00ac3e10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c624f7f882ea3fdd121c9ab5f8d604c00ac3e10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c624f7f882ea3fdd121c9ab5f8d604c00ac3e10"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "3fa707717110af548df79de57f55f9e07456078e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65f74782cff37ab900d7719c21fee65738eafa5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65f74782cff37ab900d7719c21fee65738eafa5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d65f74782cff37ab900d7719c21fee65738eafa5", "patch": "@@ -1,3 +1,9 @@\n+2001-10-26  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* s390/s390.c: Fix comment typos.\n+\t* s390/s390.h: Likewise.\n+\t* s390/s390.md: Likewise.\n+\n 2001-10-26  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* tree-inline.c (WALK_SUBTREE_TAIL): New macro."}, {"sha": "3c326d33a51286919ec6087673e18ba497e112bc", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65f74782cff37ab900d7719c21fee65738eafa5/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65f74782cff37ab900d7719c21fee65738eafa5/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=d65f74782cff37ab900d7719c21fee65738eafa5", "patch": "@@ -346,7 +346,7 @@ s390_branch_condition_mnemonic (code, inv)\n    LEVEL is the optimization level specified; 2 if `-O2' is\n    specified, 1 if `-O' is specified, and 0 if neither is specified.\n \n-   SIZE is non-zero if `-Os' is specified and zero otherwise. */\n+   SIZE is non-zero if `-Os' is specified and zero otherwise.  */\n \n void\n optimization_options (level, size)\n@@ -1114,7 +1114,7 @@ legitimize_pic_address (orig, reg)\n         {\n           /* Access local symbols PC-relative via LARL.  \n              This is the same as in the non-PIC case, so it is \n-             handled automatically ... */\n+             handled automatically ...  */\n         }\n       else\n         {\n@@ -1710,7 +1710,7 @@ reg_used_in_mem_p (regno, x)\n   return 0;\n }\n \n-/* Returns true if expression DEP_RTX sets a address register\n+/* Returns true if expression DEP_RTX sets an address register\n    used by instruction INSN to address memory.  */\n \n static int \n@@ -1747,7 +1747,7 @@ addr_generation_dependency_p (dep_rtx, insn)\n    register is modified and subsequently used as base or index \n    register of a memory reference, at least 4 cycles need to pass\n    between setting and using the register to avoid pipeline stalls.  \n-   A exception is the LA instruction. A address generated by LA can\n+   An exception is the LA instruction. An address generated by LA can\n    be used by introducing only a one cycle stall on the pipeline.  */\n \n static int\n@@ -2537,7 +2537,7 @@ s390_function_prologue (file, lsize)\n   if (!optimize)\n     {\n       /* Stupid register allocation is stupid ...\n-         It does not always recognize the base register is used. */\n+         It does not always recognize the base register is used.  */\n       \n       regs_ever_live[BASE_REGISTER] = 1;\n     }\n@@ -2899,7 +2899,7 @@ s390_function_arg_size (mode, type)\n   if (type)\n     return int_size_in_bytes (type);\n \n-  /* No type info available for some library calls ... */\n+  /* No type info available for some library calls ...  */\n   if (mode != BLKmode)\n     return GET_MODE_SIZE (mode);\n "}, {"sha": "4ecf2de64ef63dc4d6dee02af5bfe1bd11fd7d76", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65f74782cff37ab900d7719c21fee65738eafa5/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65f74782cff37ab900d7719c21fee65738eafa5/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=d65f74782cff37ab900d7719c21fee65738eafa5", "patch": "@@ -529,7 +529,7 @@ extern enum reg_class regclass_map[];\t/* smalled class containing REGNO   */\n  ((CLASS1) != (CLASS2) && ((CLASS1) == FP_REGS || (CLASS2) == FP_REGS))\n \n /* Get_secondary_mem widens its argument to BITS_PER_WORD which loses on 64bit\n-   because the movsi and movsf patterns don't handle r/f moves. */\n+   because the movsi and movsf patterns don't handle r/f moves.  */\n \n #define SECONDARY_MEMORY_NEEDED_MODE(MODE)\t\t\\\n  (GET_MODE_BITSIZE (MODE) < 32\t\t\t\t\\\n@@ -1559,7 +1559,7 @@ do {                                                                       \\\n    is set to reload_obstack, which does not live long enough. \n    Because of this we cannot use force_const_mem in addsi3.\n    This leads to problems with gen_add2_insn with a constant greater\n-   than a short. Because of that we give a addition of greater\n+   than a short. Because of that we give an addition of greater\n    constants a cost of 3 (reload1.c 10096).  */\n \n \n@@ -1682,7 +1682,7 @@ do {                                                                       \\\n \n #define BRANCH_COST 1\n \n-/* Add any extra modes needed to represent the condition code. */\n+/* Add any extra modes needed to represent the condition code.  */\n #define EXTRA_CC_MODES \\\n \tCC (CCZmode, \"CCZ\") \\\n \tCC (CCAmode, \"CCA\") \\\n@@ -1692,7 +1692,7 @@ do {                                                                       \\\n \tCC (CCTmode, \"CCT\")\n  \n /* Given a comparison code (EQ, NE, etc.) and the first operand of a COMPARE,\n-   return the mode to be used for the comparison. */\n+   return the mode to be used for the comparison.  */\n  \n #define SELECT_CC_MODE(OP, X, Y) s390_select_ccmode ((OP), (X), (Y))\n  "}, {"sha": "2c2881fc7cd0e64fb96643e7c8f82164e777b7c9", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d65f74782cff37ab900d7719c21fee65738eafa5/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d65f74782cff37ab900d7719c21fee65738eafa5/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=d65f74782cff37ab900d7719c21fee65738eafa5", "patch": "@@ -2902,7 +2902,7 @@\n ;\n ; The following insn is used when it is known that operand one is the stack pointer,\n ; and operand two is small enough to fit in the displacement field\n-; In this case, the result will be a address\n+; In this case, the result will be an address\n ;\n \n (define_insn \"addaddr\""}]}