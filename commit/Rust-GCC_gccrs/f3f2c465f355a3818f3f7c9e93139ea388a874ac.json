{"sha": "f3f2c465f355a3818f3f7c9e93139ea388a874ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNmMmM0NjVmMzU1YTM4MThmM2Y3YzllOTMxMzllYTM4OGE4NzRhYw==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-02-07T19:02:01Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-02-07T19:02:01Z"}, "message": "texinfo fixes suggested by Ralf Wildenhues\n\nCo-Authored-By: Ralf Wildenhues <Ralf.Wildenhues@gmx.de>\n\nFrom-SVN: r169892", "tree": {"sha": "9729a401c61906bd553c710425b9775695ce7b11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9729a401c61906bd553c710425b9775695ce7b11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3f2c465f355a3818f3f7c9e93139ea388a874ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f2c465f355a3818f3f7c9e93139ea388a874ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3f2c465f355a3818f3f7c9e93139ea388a874ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f2c465f355a3818f3f7c9e93139ea388a874ac/comments", "author": null, "committer": null, "parents": [{"sha": "0e048a1661c365992bc89da2767aeda6600440c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e048a1661c365992bc89da2767aeda6600440c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e048a1661c365992bc89da2767aeda6600440c7"}], "stats": {"total": 45, "additions": 26, "deletions": 19}, "files": [{"sha": "4463c8d5e38f64d9911ea6aa46c46c8f73daaeca", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f2c465f355a3818f3f7c9e93139ea388a874ac/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f2c465f355a3818f3f7c9e93139ea388a874ac/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f3f2c465f355a3818f3f7c9e93139ea388a874ac", "patch": "@@ -1,3 +1,9 @@\n+2011-02-07  Janne Blomqvist  <jb@gcc.gnu.org>\n+\t    Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* gfortran.texi (Thread-safety): texinfo styling fixes.\n+\t* intrinsic.texi: Likewise.\n+\n 2011-02-06  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* gfortran.texi (Compiler Characteristics): Add reference to"}, {"sha": "16fea025c8f7561982a0ab5bb2daaddbcf67977c", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f2c465f355a3818f3f7c9e93139ea388a874ac/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f2c465f355a3818f3f7c9e93139ea388a874ac/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=f3f2c465f355a3818f3f7c9e93139ea388a874ac", "patch": "@@ -1168,25 +1168,25 @@ using OpenMP, by calling OS thread handling functions via the\n @code{ISO_C_BINDING} facility, or by GNU Fortran compiled library code\n being called from a multi-threaded program.\n \n-The GNU Fortran runtime library, (@var{libgfortran}), supports being\n+The GNU Fortran runtime library, (@code{libgfortran}), supports being\n called concurrently from multiple threads with the following\n exceptions. \n \n-During library initialization, the C @code{getenv()} function is used,\n-which need not be thread-safe.  Similarly, the @code{getenv()}\n+During library initialization, the C @code{getenv} function is used,\n+which need not be thread-safe.  Similarly, the @code{getenv}\n function is used to implement the @code{GET_ENVIRONMENT_VARIABLE} and\n @code{GETENV} intrinsics.  It is the responsibility of the user to\n ensure that the environment is not being updated concurrently when any\n of these actions are taking place.\n \n The @code{EXECUTE_COMMAND_LINE} and @code{SYSTEM} intrinsics are\n-implemented with the @code{system()} function, which need not be\n+implemented with the @code{system} function, which need not be\n thread-safe.  It is the responsibility of the user to ensure that\n-@code{system()} is not called concurrently.\n+@code{system} is not called concurrently.\n \n-Finally, for platforms not supporting thread-safe @code{POSIX}\n-functions, further functionality might not be thread-safe.  For\n-details, please consult the documentation for your operating system.\n+Finally, for platforms not supporting thread-safe POSIX functions,\n+further functionality might not be thread-safe.  For details, please\n+consult the documentation for your operating system.\n \n @c ---------------------------------------------------------------------\n @c Extensions"}, {"sha": "925b0afcbda7b17d2fa328ec3f8a3f8795cd72b7", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f2c465f355a3818f3f7c9e93139ea388a874ac/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f2c465f355a3818f3f7c9e93139ea388a874ac/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=f3f2c465f355a3818f3f7c9e93139ea388a874ac", "patch": "@@ -4151,20 +4151,21 @@ end program test_etime\n asynchronously.\n \n The @code{COMMAND} argument is passed to the shell and executed, using\n-the C library's @code{system()} call.  (The shell is @code{sh} on Unix\n-systems, and @code{cmd.exe} on Windows.)  If @code{WAIT} is present and\n-has the value false, the execution of the command is asynchronous if the\n-system supports it; otherwise, the command is executed synchronously.\n+the C library's @code{system} call.  (The shell is @code{sh} on Unix\n+systems, and @code{cmd.exe} on Windows.)  If @code{WAIT} is present\n+and has the value false, the execution of the command is asynchronous\n+if the system supports it; otherwise, the command is executed\n+synchronously.\n \n The three last arguments allow the user to get status information.  After\n synchronous execution, @code{EXITSTAT} contains the integer exit code of\n the command, as returned by @code{system}.  @code{CMDSTAT} is set to zero\n if the command line was executed (whatever its exit status was).\n @code{CMDMSG} is assigned an error message if an error has occurred.\n \n-Note that the @code{system()} call need not be thread-safe. It is the\n-responsibility of the user to ensure that @code{system()} is not\n-called concurrently.\n+Note that the @code{system} call need not be thread-safe. It is the\n+responsibility of the user to ensure that @code{system} is not called\n+concurrently.\n \n @item @emph{Standard}:\n Fortran 2008 and later\n@@ -4204,7 +4205,7 @@ end program test_exec\n \n @item @emph{Note}:\n \n-Because this intrinsic is implemented in terms of the @code{system()}\n+Because this intrinsic is implemented in terms of the @code{system}\n function call, its behavior with respect to signaling is processor\n dependent. In particular, on POSIX-compliant systems, the SIGINT and\n SIGQUIT signals will be ignored, and the SIGCHLD will be blocked. As\n@@ -11791,9 +11792,9 @@ and environment-dependent.\n This intrinsic is provided in both subroutine and function forms;\n however, only one form can be used in any given program unit.\n \n-Note that the @code{system()} call need not be thread-safe. It is the\n-responsibility of the user to ensure that @code{system()} is not\n-called concurrently.\n+Note that the @code{system} call need not be thread-safe. It is the\n+responsibility of the user to ensure that @code{system} is not called\n+concurrently.\n \n @item @emph{Standard}:\n GNU extension"}]}