{"sha": "d1462b0782555354b4480e1f46498586d5882972", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE0NjJiMDc4MjU1NTM1NGI0NDgwZTFmNDY0OTg1ODZkNTg4Mjk3Mg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-23T23:54:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-23T23:54:20Z"}, "message": "libstdc++: Fix constructor constraints for std::any  (PR 90415)\n\nThis removes a non-standard extension to std::any which causes errors\nfor valid code, due to recursive instantiation of a trait that isn't\nsupposed to be in the constraints.\n\nIt also removes some incorrect constraints on the in_place_type<T>\nconstructors and emplace members, which were preventing creating a\nstd::any object with another std::any as the contained value.\n\n2020-04-24  Kamlesh Kumar  <kamleshbhalui@gmail.com>\n\t    Jonathan Wakely  <jwakely@redhat.com>\n\n\tPR libstdc++/90415\n\tPR libstdc++/92156\n\t* include/std/any (any): Rename template parameters for consistency\n\twith the standard.\n\t(any::_Decay): Rename to _Decay_if_not_any.\n\t(any::any(T&&):: Remove is_constructible from constraints. Remove\n\tnon-standard overload.\n\t(any::any(in_place_type_t<T>, Args&&...))\n\t(any::any(in_place_type_t<T>, initializer_list<U>, Args&&...))\n\t(any::emplace(Args&&...))\n\t(any::emplace(initializer_list<U>, Args&&...)):\n\tUse decay_t instead of _Decay.\n\t* testsuite/20_util/any/cons/90415.cc: New test.\n\t* testsuite/20_util/any/cons/92156.cc: New Test.\n\t* testsuite/20_util/any/misc/any_cast_neg.cc: Make dg-error directives\n\tmore robust.\n\t* testsuite/20_util/any/modifiers/92156.cc: New test.", "tree": {"sha": "5e31e22610f4c0e69c465c88c1bf9dea4ef07d0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e31e22610f4c0e69c465c88c1bf9dea4ef07d0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1462b0782555354b4480e1f46498586d5882972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1462b0782555354b4480e1f46498586d5882972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1462b0782555354b4480e1f46498586d5882972", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1462b0782555354b4480e1f46498586d5882972/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae962e573ea5063fda7e86f93d9622e64cea9a7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae962e573ea5063fda7e86f93d9622e64cea9a7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae962e573ea5063fda7e86f93d9622e64cea9a7e"}], "stats": {"total": 326, "additions": 255, "deletions": 71}, "files": [{"sha": "7b92ba7eebf6a51c94cb059750dba7504911a35c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1462b0782555354b4480e1f46498586d5882972/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1462b0782555354b4480e1f46498586d5882972/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d1462b0782555354b4480e1f46498586d5882972", "patch": "@@ -1,3 +1,24 @@\n+2020-04-24  Kamlesh Kumar  <kamleshbhalui@gmail.com>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/90415\n+\tPR libstdc++/92156\n+\t* include/std/any (any): Rename template parameters for consistency\n+\twith the standard.\n+\t(any::_Decay): Rename to _Decay_if_not_any.\n+\t(any::any(T&&):: Remove is_constructible from constraints. Remove\n+\tnon-standard overload.\n+\t(any::any(in_place_type_t<T>, Args&&...))\n+\t(any::any(in_place_type_t<T>, initializer_list<U>, Args&&...))\n+\t(any::emplace(Args&&...))\n+\t(any::emplace(initializer_list<U>, Args&&...)):\n+\tUse decay_t instead of _Decay.\n+\t* testsuite/20_util/any/cons/90415.cc: New test.\n+\t* testsuite/20_util/any/cons/92156.cc: New Test.\n+\t* testsuite/20_util/any/misc/any_cast_neg.cc: Make dg-error directives\n+\tmore robust.\n+\t* testsuite/20_util/any/modifiers/92156.cc: New test.\n+\n 2020-04-23  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/status_cxx2020.xml: Update C++20 status table."}, {"sha": "e13292296d3dc29fedebacd72685ff4d9ea571a4", "filename": "libstdc++-v3/include/std/any", "status": "modified", "additions": 51, "deletions": 64, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1462b0782555354b4480e1f46498586d5882972/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1462b0782555354b4480e1f46498586d5882972/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany?ref=d1462b0782555354b4480e1f46498586d5882972", "patch": "@@ -105,8 +105,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t     _Manager_internal<_Tp>,\n \t\t\t\t     _Manager_external<_Tp>>;\n \n-    template<typename _Tp, typename _Decayed = decay_t<_Tp>>\n-      using _Decay = enable_if_t<!is_same<_Decayed, any>::value, _Decayed>;\n+    template<typename _Tp, typename _VTp = decay_t<_Tp>>\n+      using _Decay_if_not_any = enable_if_t<!is_same_v<_VTp, any>, _VTp>;\n \n     /// Emplace with an object created from @p __args as the contained object.\n     template <typename _Tp, typename... _Args,\n@@ -125,10 +125,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void __do_emplace(initializer_list<_Up> __il, _Args&&... __args)\n       {\n \treset();\n-        _Mgr::_S_create(_M_storage, __il, std::forward<_Args>(__args)...);\n+\t_Mgr::_S_create(_M_storage, __il, std::forward<_Args>(__args)...);\n \t_M_manager = &_Mgr::_S_manage;\n       }\n \n+    template <typename _Res, typename _Tp, typename... _Args>\n+      using __any_constructible\n+\t= enable_if<__and_<is_copy_constructible<_Tp>,\n+\t\t\t   is_constructible<_Tp, _Args...>>::value,\n+\t\t    _Res>;\n+\n+    template <typename _Tp, typename... _Args>\n+      using __any_constructible_t\n+\t= typename __any_constructible<bool, _Tp, _Args...>::type;\n+\n+    template<typename _VTp, typename... _Args>\n+      using __emplace_t\n+\t= typename __any_constructible<_VTp&, _VTp, _Args...>::type;\n+\n   public:\n     // construct/destruct\n \n@@ -165,65 +179,39 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n-    template <typename _Res, typename _Tp, typename... _Args>\n-    using __any_constructible =\n-      enable_if<__and_<is_copy_constructible<_Tp>,\n-\t\t\t is_constructible<_Tp, _Args...>>::value,\n-\t\t  _Res>;\n-\n-    template <typename _Tp, typename... _Args>\n-    using __any_constructible_t =\n-      typename __any_constructible<bool, _Tp, _Args...>::type;\n-\n     /// Construct with a copy of @p __value as the contained object.\n-    template <typename _ValueType, typename _Tp = _Decay<_ValueType>,\n-\t      typename _Mgr = _Manager<_Tp>,\n-              __any_constructible_t<_Tp, _ValueType&&> = true,\n-\t      enable_if_t<!__is_in_place_type<_Tp>::value, bool> = true>\n-      any(_ValueType&& __value)\n+    template <typename _Tp, typename _VTp = _Decay_if_not_any<_Tp>,\n+\t      typename _Mgr = _Manager<_VTp>,\n+\t      enable_if_t<is_copy_constructible<_VTp>::value\n+\t\t\t  && !__is_in_place_type<_VTp>::value, bool> = true>\n+      any(_Tp&& __value)\n       : _M_manager(&_Mgr::_S_manage)\n       {\n-        _Mgr::_S_create(_M_storage, std::forward<_ValueType>(__value));\n-      }\n-\n-    /// Construct with a copy of @p __value as the contained object.\n-    template <typename _ValueType, typename _Tp = _Decay<_ValueType>,\n-\t      typename _Mgr = _Manager<_Tp>,\n-              enable_if_t<__and_v<is_copy_constructible<_Tp>,\n-\t\t\t\t  __not_<is_constructible<_Tp, _ValueType&&>>,\n-\t\t\t\t  __not_<__is_in_place_type<_Tp>>>,\n-\t\t\t  bool> = false>\n-      any(_ValueType&& __value)\n-      : _M_manager(&_Mgr::_S_manage)\n-      {\n-        _Mgr::_S_create(_M_storage, __value);\n+\t_Mgr::_S_create(_M_storage, std::forward<_Tp>(__value));\n       }\n \n     /// Construct with an object created from @p __args as the contained object.\n-    template <typename _ValueType, typename... _Args,\n-\t      typename _Tp = _Decay<_ValueType>,\n-\t      typename _Mgr = _Manager<_Tp>,\n-              __any_constructible_t<_Tp, _Args&&...> = false>\n+    template <typename _Tp, typename... _Args, typename _VTp = decay_t<_Tp>,\n+\t      typename _Mgr = _Manager<_VTp>,\n+\t      __any_constructible_t<_VTp, _Args&&...> = false>\n       explicit\n-      any(in_place_type_t<_ValueType>, _Args&&... __args)\n+      any(in_place_type_t<_Tp>, _Args&&... __args)\n       : _M_manager(&_Mgr::_S_manage)\n       {\n-        _Mgr::_S_create(_M_storage, std::forward<_Args>(__args)...);\n+\t_Mgr::_S_create(_M_storage, std::forward<_Args>(__args)...);\n       }\n \n     /// Construct with an object created from @p __il and @p __args as\n     /// the contained object.\n-    template <typename _ValueType, typename _Up, typename... _Args,\n-\t      typename _Tp = _Decay<_ValueType>,\n-\t      typename _Mgr = _Manager<_Tp>,\n-              __any_constructible_t<_Tp, initializer_list<_Up>,\n+    template <typename _Tp, typename _Up, typename... _Args,\n+\t      typename _VTp = decay_t<_Tp>, typename _Mgr = _Manager<_VTp>,\n+\t      __any_constructible_t<_VTp, initializer_list<_Up>,\n \t\t\t\t    _Args&&...> = false>\n       explicit\n-      any(in_place_type_t<_ValueType>,\n-\t  initializer_list<_Up> __il, _Args&&... __args)\n+      any(in_place_type_t<_Tp>, initializer_list<_Up> __il, _Args&&... __args)\n       : _M_manager(&_Mgr::_S_manage)\n       {\n-        _Mgr::_S_create(_M_storage, __il, std::forward<_Args>(__args)...);\n+\t_Mgr::_S_create(_M_storage, __il, std::forward<_Args>(__args)...);\n       }\n \n     /// Destructor, calls @c reset()\n@@ -232,7 +220,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // assignments\n \n     /// Copy the state of another object.\n-    any& operator=(const any& __rhs)\n+    any&\n+    operator=(const any& __rhs)\n     {\n       *this = any(__rhs);\n       return *this;\n@@ -243,7 +232,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n      *\n      * @post @c !__rhs.has_value() (not guaranteed for other implementations)\n      */\n-    any& operator=(any&& __rhs) noexcept\n+    any&\n+    operator=(any&& __rhs) noexcept\n     {\n       if (!__rhs.has_value())\n \treset();\n@@ -258,40 +248,37 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n     /// Store a copy of @p __rhs as the contained object.\n-    template<typename _ValueType>\n-      enable_if_t<is_copy_constructible<_Decay<_ValueType>>::value, any&>\n-      operator=(_ValueType&& __rhs)\n+    template<typename _Tp>\n+      enable_if_t<is_copy_constructible<_Decay_if_not_any<_Tp>>::value, any&>\n+      operator=(_Tp&& __rhs)\n       {\n-\t*this = any(std::forward<_ValueType>(__rhs));\n+\t*this = any(std::forward<_Tp>(__rhs));\n \treturn *this;\n       }\n \n     /// Emplace with an object created from @p __args as the contained object.\n-    template <typename _ValueType, typename... _Args>\n-      typename __any_constructible<_Decay<_ValueType>&,\n-\t\t\t\t   _Decay<_ValueType>, _Args&&...>::type\n+    template <typename _Tp, typename... _Args>\n+      __emplace_t<decay_t<_Tp>, _Args...>\n       emplace(_Args&&... __args)\n       {\n-\t__do_emplace<_Decay<_ValueType>>(std::forward<_Args>(__args)...);\n+\tusing _VTp = decay_t<_Tp>;\n+\t__do_emplace<_VTp>(std::forward<_Args>(__args)...);\n \tany::_Arg __arg;\n \tthis->_M_manager(any::_Op_access, this, &__arg);\n-\treturn *static_cast<_Decay<_ValueType>*>(__arg._M_obj);\n+\treturn *static_cast<_VTp*>(__arg._M_obj);\n       }\n \n     /// Emplace with an object created from @p __il and @p __args as\n     /// the contained object.\n-    template <typename _ValueType, typename _Up, typename... _Args>\n-      typename __any_constructible<_Decay<_ValueType>&,\n-\t\t\t\t   _Decay<_ValueType>,\n-\t\t\t\t   initializer_list<_Up>,\n-\t\t\t\t   _Args&&...>::type\n+    template <typename _Tp, typename _Up, typename... _Args>\n+      __emplace_t<decay_t<_Tp>, initializer_list<_Up>, _Args&&...>\n       emplace(initializer_list<_Up> __il, _Args&&... __args)\n       {\n-\t__do_emplace<_Decay<_ValueType>, _Up>(__il,\n-\t\t\t\t\t      std::forward<_Args>(__args)...);\n+\tusing _VTp = decay_t<_Tp>;\n+\t__do_emplace<_VTp, _Up>(__il, std::forward<_Args>(__args)...);\n \tany::_Arg __arg;\n \tthis->_M_manager(any::_Op_access, this, &__arg);\n-\treturn *static_cast<_Decay<_ValueType>*>(__arg._M_obj);\n+\treturn *static_cast<_VTp*>(__arg._M_obj);\n       }\n \n     // modifiers"}, {"sha": "122262386d326ef5571507af6597290d18c7252b", "filename": "libstdc++-v3/testsuite/20_util/any/cons/90415.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1462b0782555354b4480e1f46498586d5882972/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F90415.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1462b0782555354b4480e1f46498586d5882972/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F90415.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F90415.cc?ref=d1462b0782555354b4480e1f46498586d5882972", "patch": "@@ -0,0 +1,64 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++17 } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <any>\n+#include <utility>\n+#include <tuple>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  // PR libstdc++/90415\n+  static_assert( std::is_copy_constructible<std::tuple<std::any>>::value );\n+}\n+\n+struct wrapper\n+{\n+  wrapper() = default;\n+\n+  wrapper(const std::any& t);\n+\n+  wrapper(const wrapper& w);\n+\n+  auto& operator=(const std::any& t);\n+\n+  auto& operator=(const wrapper& w)\n+  {\n+    value = w.value;\n+    return *this;\n+  }\n+\n+  std::any value;\n+};\n+\n+void\n+test02()\n+{\n+  // PR libstdc++/91630\n+  wrapper a, b;\n+  a = b;\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "d797473716daaacca894f8f2e9ffff9372c6ec4b", "filename": "libstdc++-v3/testsuite/20_util/any/cons/92156.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1462b0782555354b4480e1f46498586d5882972/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F92156.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1462b0782555354b4480e1f46498586d5882972/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F92156.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F92156.cc?ref=d1462b0782555354b4480e1f46498586d5882972", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++17 } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <any>\n+#include <utility>\n+#include <tuple>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  auto a = std::any(std::in_place_type<std::any>, 5);\n+  VERIFY( std::any_cast<int>(std::any_cast<std::any>(a)) == 5 );\n+\n+  auto b = std::any(std::in_place_type<std::any>, {1});\n+  (void) std::any_cast<std::initializer_list<int>>(std::any_cast<std::any>(b));\n+}\n+\n+void\n+test02()\n+{\n+  std::any p = std::pair<std::any, std::any>(1, 1);\n+  auto pt = std::any_cast<std::pair<std::any, std::any>>(p);\n+  VERIFY( std::any_cast<int>(pt.first) == 1 );\n+  VERIFY( std::any_cast<int>(pt.second) == 1 );\n+\n+  std::any t = std::tuple<std::any>(1);\n+  auto tt = std::any_cast<std::tuple<std::any>>(t);\n+  VERIFY( std::any_cast<int>(std::get<0>(tt)) == 1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "049815a0c1fb2308076f4bd5f74e3010c5468f2a", "filename": "libstdc++-v3/testsuite/20_util/any/misc/any_cast_neg.cc", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1462b0782555354b4480e1f46498586d5882972/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1462b0782555354b4480e1f46498586d5882972/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast_neg.cc?ref=d1462b0782555354b4480e1f46498586d5882972", "patch": "@@ -1,5 +1,5 @@\n // { dg-options \"-std=gnu++17\" }\n-// { dg-do compile }\n+// { dg-do compile { target c++17 } }\n \n // Copyright (C) 2014-2020 Free Software Foundation, Inc.\n //\n@@ -26,20 +26,22 @@ using std::any_cast;\n void test01()\n {\n   const any y(1);\n-  any_cast<int&>(y); // { dg-error \"invalid 'static_cast'\" \"\" { target { *-*-* } } 461 }\n-  // { dg-error \"Template argument must be constructible from a const value\" \"\" { target { *-*-* } } 457 }\n+  any_cast<int&>(y); // { dg-error \"here\" }\n+  // { dg-error \"Template argument must be constructible from a const value\" \"\" { target { *-*-* } } 0 }\n }\n \n void test02()\n {\n   any y(1);\n-  any_cast<int&&>(y);\n-  // { dg-error \"Template argument must be constructible from an lvalue\" \"\" { target { *-*-* } } 483 }\n+  any_cast<int&&>(y); // { dg-error \"here\" }\n+  // { dg-error \"Template argument must be constructible from an lvalue\" \"\" { target { *-*-* } } 0 }\n }\n \n void test03()\n {\n   any y(1);\n-  any_cast<int&>(std::move(y));  // { dg-error \"invalid 'static_cast'\" \"\" { target { *-*-* } } 501 }\n-  // { dg-error \"Template argument must be constructible from an rvalue\" \"\" { target { *-*-* } } 497 }\n+  any_cast<int&>(std::move(y)); // { dg-error \"here\" }\n+  // { dg-error \"Template argument must be constructible from an rvalue\" \"\" { target { *-*-* } } 0 }\n }\n+\n+// { dg-prune-output \"invalid 'static_cast'\" }"}, {"sha": "4a7bc97bb8370c1ebc53673f2105de3cfb296d17", "filename": "libstdc++-v3/testsuite/20_util/any/modifiers/92156.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1462b0782555354b4480e1f46498586d5882972/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmodifiers%2F92156.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1462b0782555354b4480e1f46498586d5882972/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmodifiers%2F92156.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmodifiers%2F92156.cc?ref=d1462b0782555354b4480e1f46498586d5882972", "patch": "@@ -0,0 +1,57 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++17 } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <any>\n+#include <utility>\n+#include <tuple>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::any a;\n+  a.emplace<std::any>(5);\n+  VERIFY( std::any_cast<int>(std::any_cast<std::any>(a)) == 5 );\n+\n+  std::any b;\n+  b.emplace<std::any>({1});\n+  (void) std::any_cast<std::initializer_list<int>>(std::any_cast<std::any>(b));\n+}\n+\n+void\n+test02()\n+{\n+  std::any p;\n+  p.emplace<std::pair<std::any, std::any>>(1, 1);\n+  auto pt = std::any_cast<std::pair<std::any, std::any>>(p);\n+  VERIFY( std::any_cast<int>(pt.first) == 1 );\n+  VERIFY( std::any_cast<int>(pt.second) == 1 );\n+\n+  std::any t;\n+  t.emplace<std::tuple<std::any>>(1);\n+  auto tt = std::any_cast<std::tuple<std::any>>(t);\n+  VERIFY( std::any_cast<int>(std::get<0>(tt)) == 1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}]}