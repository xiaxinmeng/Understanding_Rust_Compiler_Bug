{"sha": "579cdc1e44b316166ebfdfbcff14d41101003aec", "node_id": "C_kwDOANBUbNoAKDU3OWNkYzFlNDRiMzE2MTY2ZWJmZGZiY2ZmMTRkNDExMDEwMDNhZWM", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-03-29T00:17:01Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-03-29T00:17:01Z"}, "message": "Daily bump.", "tree": {"sha": "d61c3564cf7692a31991abdf300ce55255f37a98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d61c3564cf7692a31991abdf300ce55255f37a98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/579cdc1e44b316166ebfdfbcff14d41101003aec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/579cdc1e44b316166ebfdfbcff14d41101003aec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/579cdc1e44b316166ebfdfbcff14d41101003aec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/579cdc1e44b316166ebfdfbcff14d41101003aec/comments", "author": null, "committer": null, "parents": [{"sha": "f4698e9b4d61deac19be9276ac92d827998a9880", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4698e9b4d61deac19be9276ac92d827998a9880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4698e9b4d61deac19be9276ac92d827998a9880"}], "stats": {"total": 366, "additions": 365, "deletions": 1}, "files": [{"sha": "af6873a12c1a470dbf9850793a73fac845abe48a", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/579cdc1e44b316166ebfdfbcff14d41101003aec/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/579cdc1e44b316166ebfdfbcff14d41101003aec/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=579cdc1e44b316166ebfdfbcff14d41101003aec", "patch": "@@ -1,3 +1,11 @@\n+2023-03-28  Xi Ruoyao  <xry111@xry111.site>\n+\n+\tPR other/109293\n+\t* configure.ac (AC_CHECK_DECLS): Add memmem.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t* system.h (memmem): Declare if HAVE_DECL_MEMMEM is zero.\n+\n 2023-02-17  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* inclhack.def (solaris_math_12): Add bypass."}, {"sha": "09ad0faceec7bb3cfc275cf4fe05cefd4ae7b2bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/579cdc1e44b316166ebfdfbcff14d41101003aec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/579cdc1e44b316166ebfdfbcff14d41101003aec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=579cdc1e44b316166ebfdfbcff14d41101003aec", "patch": "@@ -1,3 +1,182 @@\n+2023-03-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/107002\n+\t* diagnostic-show-locus.cc (column_range::column_range): Factor\n+\tout assertion conditional into...\n+\t(column_range::valid_p): ...this new function.\n+\t(line_corrections::add_hint): Don't attempt to consolidate hints\n+\tif it would lead to invalid column_range instances.\n+\n+2023-03-28  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tPR target/109312\n+\t* config/riscv/riscv-c.cc (riscv_ext_version_value): New.\n+\t(riscv_cpu_cpp_builtins): Define __riscv_v_intrinsic and\n+\tminor refactor.\n+\n+2023-03-28  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR rtl-optimization/109187\n+\t* haifa-sched.cc (autopref_rank_for_schedule): Avoid use of overflowing\n+\tsubtraction in three-way comparison.\n+\n+2023-03-28  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/109265\n+\tPR tree-optimization/109274\n+\t* gimple-range-gori.cc (gori_compute::compute_operand_range): Do\n+\tnot create a relation record is op1 and op2 are the same symbol.\n+\t(gori_compute::compute_operand1_range): Pass op1 == op2 to the\n+\thandler for this stmt, but create a new record only if this statement\n+\tgenerates a relation based on the ranges.\n+\t(gori_compute::compute_operand2_range): Ditto.\n+\t* value-relation.h (value_relation::set_relation): Always create the\n+\trecord that is requested.\n+\n+2023-03-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107087\n+\t* tree-ssa-forwprop.cc (pass_forwprop::execute): Track\n+\texecutable regions to avoid useless work and to better\n+\tpropagate degenerate PHIs.\n+\n+2023-03-28  Costas Argyris  <costas.argyris@gmail.com>\n+\n+\t* config/i386/x-mingw32-utf8: update comments.\n+\n+2023-03-28  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/109072\n+\t* config/aarch64/aarch64-protos.h (aarch64_vector_load_decl): Declare.\n+\t* config/aarch64/aarch64.h (machine_function::vector_load_decls): New\n+\tvariable.\n+\t* config/aarch64/aarch64-builtins.cc (aarch64_record_vector_load_arg):\n+\tNew function.\n+\t(aarch64_general_gimple_fold_builtin): Delay folding of vld1 until\n+\tafter inlining.  Record which decls are loaded from.  Fix handling\n+\tof vops for loads and stores.\n+\t* config/aarch64/aarch64.cc (aarch64_vector_load_decl): New function.\n+\t(aarch64_accesses_vector_load_decl_p): Likewise.\n+\t(aarch64_vector_costs::m_stores_to_vector_load_decl): New member\n+\tvariable.\n+\t(aarch64_vector_costs::add_stmt_cost): If the function has a vld1\n+\tthat loads from a decl, treat vector stores to those decls as\n+\tzero cost.\n+\t(aarch64_vector_costs::finish_cost): ...and in that case,\n+\tif the vector code does nothing more than a store, give the\n+\tprologue a zero cost as well.\n+\n+2023-03-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR bootstrap/84402\n+\tPR tree-optimization/108129\n+\t* genmatch.cc (lower_for): For (match ...) delay\n+\tsubstituting into the match operator if possible.\n+\t(dt_operand::gen_gimple_expr): For user_id look at the\n+\tfirst substitute for determining how to access operands.\n+\t(dt_operand::gen_generic_expr): Likewise.\n+\t(dt_node::gen_kids): Properly sort user_ids according\n+\tto their substitutes.\n+\t(dt_node::gen_kids_1): Code-generate user_id matching.\n+\n+2023-03-28  Jakub Jelinek  <jakub@redhat.com>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* gcov-tool.cc (do_merge, do_merge_stream, do_rewrite, do_overlap):\n+\tUse subcommand rather than sub-command in function comments.\n+\n+2023-03-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/109154\n+\t* value-range.h (frange::flush_denormals_to_zero): Make it public\n+\trather than private.\n+\t* value-range.cc (frange::set): Don't call flush_denormals_to_zero\n+\there.\n+\t* range-op-float.cc (range_operator_float::fold_range): Call\n+\tflush_denormals_to_zero.\n+\n+2023-03-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/106190\n+\t* sanopt.cc (pass_sanopt::execute): Return TODO_cleanup_cfg if any\n+\tof the IFN_{UB,HWA,A}SAN_* internal fns are lowered.\n+\n+2023-03-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* range-op-float.cc (float_widen_lhs_range): Use pass get_nan_state\n+\tas 4th argument to set to avoid clear_nan and union_ calls.\n+\n+2023-03-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/109276\n+\t* config/i386/i386.cc (assign_386_stack_local): For DImode\n+\twith SLOT_FLOATxFDI_387 and -m32 -mpreferred-stack-boundary=2 pass\n+\talign 32 rather than 0 to assign_stack_local.\n+\n+2023-03-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/109140\n+\t* config/sparc/sparc.cc (sparc_expand_vcond): Call signed_condition\n+\ton operand #3 to get the final condition code.  Use std::swap.\n+\t* config/sparc/sparc.md (vcondv8qiv8qi): New VIS 4 expander.\n+\t(fucmp<gcond:code>8<P:mode>_vis): Move around.\n+\t(fpcmpu<gcond:code><GCM:gcm_name><P:mode>_vis): Likewise.\n+\t(vcondu<GCM:mode><GCM:mode>): New VIS 4 expander.\n+\n+2023-03-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gm2.texi: Add missing Next, Previous and Top fields to most\n+\ttop-level sections.\n+\n+2023-03-28  Costas Argyris  <costas.argyris@gmail.com>\n+\n+\t* config.host: Pull in i386/x-mingw32-utf8 Makefile\n+\tfragment and reference utf8rc-mingw32.o explicitly\n+\tfor mingw hosts.\n+\t* config/i386/sym-mingw32.cc: prevent name mangling of\n+\tstub symbol.\n+\t* config/i386/x-mingw32-utf8: Make utf8rc-mingw32.o\n+\tdepend on manifest file explicitly.\n+\n+2023-03-28  Richard Biener  <rguenther@suse.de>\n+\n+\tRevert:\n+\t2023-03-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/109237\n+\t* cfgcleanup.cc (bb_is_just_return): Walk insns backwards.\n+\n+2023-03-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* common.opt (gdwarf): Remove Negative(gdwarf-).\n+\n+2023-03-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* common.opt (gdwarf): Add RejectNegative.\n+\t(gdwarf-): Likewise.\n+\t(ggdb): Likewise.\n+\t(gvms): Likewise.\n+\n+2023-03-28  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/cris/constraints.md (\"T\"): Correct to\n+\tdefine_memory_constraint.\n+\n+2023-03-28  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/cris/cris.md (BW2): New mode-iterator.\n+\t(lra_szext_decomposed, lra_szext_decomposed_indirect_with_offset): New\n+\tpeephole2s.\n+\n+2023-03-28  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/cris/cris.md (\"*add<mode>3_addi\"): Improve to bail only\n+\tfor possible eliminable compares.\n+\n+2023-03-28  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/cris/constraints.md (\"R\"): Remove unused constraint.\n+\n 2023-03-27  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR gcov-profile/109297"}, {"sha": "8696380a31ae8e4bfa556abd4d1152dc539c2259", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/579cdc1e44b316166ebfdfbcff14d41101003aec/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/579cdc1e44b316166ebfdfbcff14d41101003aec/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=579cdc1e44b316166ebfdfbcff14d41101003aec", "patch": "@@ -1 +1 @@\n-20230328\n+20230329"}, {"sha": "2fd0d5a3a3e4fc5059c5fec56a8914104cb972de", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/579cdc1e44b316166ebfdfbcff14d41101003aec/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/579cdc1e44b316166ebfdfbcff14d41101003aec/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=579cdc1e44b316166ebfdfbcff14d41101003aec", "patch": "@@ -1,3 +1,16 @@\n+2023-03-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/107002\n+\t* c-common.h (check_for_xor_used_as_pow): Add \"rhs_loc\" param.\n+\t* c-warn.cc (check_for_xor_used_as_pow): Add \"rhs_loc\" param.\n+\tReject cases where involving macro expansions.\n+\n+2023-03-28  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/107163\n+\t* c-common.cc (verify_tree): Don't use sequenced handling\n+\tfor COMPONENT_REF.\n+\n 2023-03-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/109151"}, {"sha": "f23b3ba65dae754c63b062b83372e64f1ab32359", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/579cdc1e44b316166ebfdfbcff14d41101003aec/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/579cdc1e44b316166ebfdfbcff14d41101003aec/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=579cdc1e44b316166ebfdfbcff14d41101003aec", "patch": "@@ -1,3 +1,9 @@\n+2023-03-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/107002\n+\t* c-typeck.cc (parser_build_binary_op): Update for new param of\n+\tcheck_for_xor_used_as_pow.\n+\n 2023-03-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/108079"}, {"sha": "5f3cd10a557cdc4e2ef31a7cd050a921e5fda6d8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/579cdc1e44b316166ebfdfbcff14d41101003aec/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/579cdc1e44b316166ebfdfbcff14d41101003aec/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=579cdc1e44b316166ebfdfbcff14d41101003aec", "patch": "@@ -1,3 +1,16 @@\n+2023-03-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/107002\n+\t* parser.cc (cp_parser_binary_expression): Update for new param of\n+\tcheck_for_xor_used_as_pow.\n+\n+2023-03-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/109309\n+\t* contracts.cc: Include intl.h.\n+\t(check_postcondition_result): Don't form diagnostics from two halves\n+\tof an English message to allow translations.\n+\n 2023-03-24  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/106969"}, {"sha": "ff390554fac489541528ad253d035c898e131764", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/579cdc1e44b316166ebfdfbcff14d41101003aec/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/579cdc1e44b316166ebfdfbcff14d41101003aec/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=579cdc1e44b316166ebfdfbcff14d41101003aec", "patch": "@@ -1,3 +1,9 @@\n+2023-03-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/109314\n+\t* openmp.cc (gfc_omp_absent_contains_clause): Fix typo in diagnostics\n+\t- composit -> composite.\n+\n 2023-03-25  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/104321"}, {"sha": "9f01ee6349b3f277c871412f9b47b8acc8e67760", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/579cdc1e44b316166ebfdfbcff14d41101003aec/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/579cdc1e44b316166ebfdfbcff14d41101003aec/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=579cdc1e44b316166ebfdfbcff14d41101003aec", "patch": "@@ -1,3 +1,7 @@\n+2023-03-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* de.po: Update.\n+\n 2023-03-20  Joseph Myers  <joseph@codesourcery.com>\n \n \t* sv.po: Update."}, {"sha": "21d4b9d25b75c9df6ed3f95c3ad2b0a398ccb092", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/579cdc1e44b316166ebfdfbcff14d41101003aec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/579cdc1e44b316166ebfdfbcff14d41101003aec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=579cdc1e44b316166ebfdfbcff14d41101003aec", "patch": "@@ -1,3 +1,78 @@\n+2023-03-28  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gfortran.dg/weak-2.f90: Enable for nvptx target.\n+\n+2023-03-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/107002\n+\t* c-c++-common/Wxor-used-as-pow-1.c: Add macro test.\n+\t* c-c++-common/Wxor-used-as-pow-pr107002-0.c: New test.\n+\t* c-c++-common/Wxor-used-as-pow-pr107002-1.c: New test.\n+\t* c-c++-common/Wxor-used-as-pow-pr107002-2.c: New test.\n+\n+2023-03-28  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/107163\n+\t* g++.dg/warn/Wsequence-point-5.C: New test.\n+\n+2023-03-28  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tPR target/109312\n+\t* gcc.target/riscv/predef-__riscv_v_intrinsic.c: New test.\n+\n+2023-03-28  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR rtl-optimization/109187\n+\t* gcc.dg/pr109187.c: New test.\n+\n+2023-03-28  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/109265\n+\tPR tree-optimization/109274\n+\t* gcc.dg/pr109274.c: New.\n+\t* gfortran.dg/pr109265.f90: New.\n+\n+2023-03-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107087\n+\t* g++.dg/pr107087.C: New testcase.\n+\n+2023-03-28  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/109072\n+\t* gcc.target/aarch64/pr109072_1.c: New test.\n+\t* gcc.target/aarch64/pr109072_2.c: Likewise.\n+\n+2023-03-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/106190\n+\t* gcc.dg/asan/pr106190.c: New test.\n+\n+2023-03-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.target/sparc/20230328-1.c: New test.\n+\t* gcc.target/sparc/20230328-2.c: Likewise.\n+\t* gcc.target/sparc/20230328-3.c: Likewise.\n+\t* gcc.target/sparc/20230328-4.c: Likewise.\n+\n+2023-03-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/109276\n+\t* gcc.target/i386/pr109276.c: New test.\n+\n+2023-03-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.target/sparc/20230328-1.c: New test.\n+\t* gcc.target/sparc/20230328-2.c: Likewise.\n+\t* gcc.target/sparc/20230328-3.c: Likewise.\n+\t* gcc.target/sparc/20230328-4.c: Likewise.\n+\n+2023-03-28  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* lib/target-supports.exp (add_options_for_weak_undefined): Escape\n+\tbrackets.\n+\t* gcc.dg/visibility-22.c: Add weak_undefined options.\n+\n 2023-03-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/54498"}, {"sha": "c2066eb28a4b4642d32e1315adedaea0c0de119a", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/579cdc1e44b316166ebfdfbcff14d41101003aec/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/579cdc1e44b316166ebfdfbcff14d41101003aec/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=579cdc1e44b316166ebfdfbcff14d41101003aec", "patch": "@@ -1,3 +1,12 @@\n+2023-03-28  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* elf.c (elf_zstd_read_fse): Call elf_fetch_bits after reading\n+\tbits, not before.  Add unlikely for error case.\n+\t(elf_zstd_offset_table): Regenerate.\n+\t(elf_zstd_read_huff): Clear 13 entries in weight_mark, not 12.\n+\t(elf_zstd_read_literals): For a single stream adjust by\n+\ttotal_streams_size, not compressed_size.\n+\n 2023-01-20  Ian Lance Taylor  <iant@golang.org>\n \n \t* dwarf.c (struct function_addrs): Change low and high fields to"}, {"sha": "c50e5916f8f47e6856fbdbea3160b194bb8cabf3", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/579cdc1e44b316166ebfdfbcff14d41101003aec/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/579cdc1e44b316166ebfdfbcff14d41101003aec/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=579cdc1e44b316166ebfdfbcff14d41101003aec", "patch": "@@ -1,3 +1,8 @@\n+2023-03-28  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-nohost-2.c: Add\n+\tweak_undefined options.\n+\n 2023-03-24  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* libgomp.texi (Offload-Target Specifics): Grammar fix."}, {"sha": "b628e1b5e09e5e291a326f8342872009a2f769b0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/579cdc1e44b316166ebfdfbcff14d41101003aec/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/579cdc1e44b316166ebfdfbcff14d41101003aec/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=579cdc1e44b316166ebfdfbcff14d41101003aec", "patch": "@@ -1,3 +1,49 @@\n+2023-03-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103387\n+\t* include/bits/istream.tcc (istream::_M_extract(ValueT&)): Use\n+\tstd::use_facet instead of cached _M_num_get facet.\n+\t(istream::operator>>(short&)): Likewise.\n+\t(istream::operator>>(int&)): Likewise.\n+\t* include/bits/ostream.tcc (ostream::_M_insert(ValueT)): Use\n+\tstd::use_facet instead of cached _M_num_put facet.\n+\n+2023-03-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/char_traits.h (char_traits::copy): Return without\n+\tusing memcpy if n==0.\n+\t(char_traits::assign): Likewise for memset.\n+\n+2023-03-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/109299\n+\t* include/bits/basic_string.h (basic_string::_M_is_local()): Add\n+\thint for compiler that local strings fit in the local buffer.\n+\n+2023-03-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/109288\n+\t* include/std/chrono (__detail::__get_leap_second_info): Update\n+\texpiry date of hardcoded leapseconds list.\n+\t* src/c++20/tzdb.cc (tzdb_list::_Node::_S_read_leap_seconds()):\n+\tLikewise.\n+\t* src/c++20/tzdata.zi: Import new file from 2023a release.\n+\t* testsuite/std/time/time_zone/get_info_local.cc: Only check\n+\ttransitions for Egypt up to 2014.\n+\n+2023-03-28  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* include/experimental/bits/simd.h (is_simd_flag_type): New.\n+\t(_IsSimdFlagType): New.\n+\t(copy_from, copy_to, load ctors): Constrain _Flags using\n+\t_IsSimdFlagType.\n+\n+2023-03-28  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* include/experimental/bits/simd_x86.h (_SimdImplX86): Use\n+\t_Base::_S_divides if the optimized _S_divides function is hidden\n+\tvia the preprocessor.\n+\n 2023-03-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/experimental/net/timer/waitable/dest.cc: Avoid -Wformat"}]}