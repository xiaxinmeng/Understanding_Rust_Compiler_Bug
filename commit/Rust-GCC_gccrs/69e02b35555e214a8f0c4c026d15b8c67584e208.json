{"sha": "69e02b35555e214a8f0c4c026d15b8c67584e208", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjllMDJiMzU1NTVlMjE0YThmMGM0YzAyNmQxNWI4YzY3NTg0ZTIwOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2018-07-11T16:38:27Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2018-07-11T16:38:27Z"}, "message": "lto-streamer-out.c (DFS::DFS_write_tree_body): Do not stream DECL_ORIGINAL_TYPE.\n\n\n\t* lto-streamer-out.c (DFS::DFS_write_tree_body): Do not\n\tstream DECL_ORIGINAL_TYPE.\n\t(DFS::DFS_write_tree_body): Drop hack handling local external decls.\n\t(hash_tree): Do not walk DECL_ORIGINAL_TYPE.\n\t* tree-streamer-in.c (lto_input_ts_decl_non_common_tree_pointers):\n\tDo not walk original type.\n\t* tree-streamer-out.c (streamer_write_chain): Drop hack handling\n\texternal decls.\n\t(write_ts_decl_non_common_tree_pointers): Do not stream\n\tDECL_ORIGINAL_TYPE\n\t* tree.c (free_lang_data_in_decl): Clear DECL_ORIGINAL_TYPE.\n\t(find_decls_types_r): Do not walk DEC_ORIGINAL_TYPE.\n\nFrom-SVN: r262560", "tree": {"sha": "506a543d4b9fe4b4ca59144e91bd850e8686d4c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/506a543d4b9fe4b4ca59144e91bd850e8686d4c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69e02b35555e214a8f0c4c026d15b8c67584e208", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69e02b35555e214a8f0c4c026d15b8c67584e208", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69e02b35555e214a8f0c4c026d15b8c67584e208", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69e02b35555e214a8f0c4c026d15b8c67584e208/comments", "author": null, "committer": null, "parents": [{"sha": "f790df6be014576524f55670a136eb622e595377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f790df6be014576524f55670a136eb622e595377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f790df6be014576524f55670a136eb622e595377"}], "stats": {"total": 68, "additions": 29, "deletions": 39}, "files": [{"sha": "d94165b716822acb556314c6c6ef766794b430c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69e02b35555e214a8f0c4c026d15b8c67584e208/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69e02b35555e214a8f0c4c026d15b8c67584e208/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69e02b35555e214a8f0c4c026d15b8c67584e208", "patch": "@@ -1,3 +1,18 @@\n+2018-07-11  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* lto-streamer-out.c (DFS::DFS_write_tree_body): Do not\n+\tstream DECL_ORIGINAL_TYPE.\n+\t(DFS::DFS_write_tree_body): Drop hack handling local external decls.\n+\t(hash_tree): Do not walk DECL_ORIGINAL_TYPE.\n+\t* tree-streamer-in.c (lto_input_ts_decl_non_common_tree_pointers):\n+\tDo not walk original type.\n+\t* tree-streamer-out.c (streamer_write_chain): Drop hack handling\n+\texternal decls.\n+\t(write_ts_decl_non_common_tree_pointers): Do not stream\n+\tDECL_ORIGINAL_TYPE\n+\t* tree.c (free_lang_data_in_decl): Clear DECL_ORIGINAL_TYPE.\n+\t(find_decls_types_r): Do not walk DEC_ORIGINAL_TYPE.\n+\n 2018-07-11  Aldy Hernandez  <aldyh@redhat.com>\n \n         * tree-ssa-threadupdate.c (thread_through_all_blocks): Do not jump"}, {"sha": "5391027181bd2dee2d7189280c73835fc98b7b86", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69e02b35555e214a8f0c4c026d15b8c67584e208/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69e02b35555e214a8f0c4c026d15b8c67584e208/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=69e02b35555e214a8f0c4c026d15b8c67584e208", "patch": "@@ -819,12 +819,6 @@ DFS::DFS_write_tree_body (struct output_block *ob,\n \tDFS_follow_tree_edge (DECL_DEBUG_EXPR (expr));\n     }\n \n-  if (CODE_CONTAINS_STRUCT (code, TS_DECL_NON_COMMON))\n-    {\n-      if (TREE_CODE (expr) == TYPE_DECL)\n-\tDFS_follow_tree_edge (DECL_ORIGINAL_TYPE (expr));\n-    }\n-\n   if (CODE_CONTAINS_STRUCT (code, TS_DECL_WITH_VIS))\n     {\n       /* Make sure we don't inadvertently set the assembler name.  */\n@@ -907,14 +901,13 @@ DFS::DFS_write_tree_body (struct output_block *ob,\n   if (CODE_CONTAINS_STRUCT (code, TS_BLOCK))\n     {\n       for (tree t = BLOCK_VARS (expr); t; t = TREE_CHAIN (t))\n-\tif (VAR_OR_FUNCTION_DECL_P (t)\n-\t    && DECL_EXTERNAL (t))\n-\t  /* We have to stream externals in the block chain as\n-\t     non-references.  See also\n-\t     tree-streamer-out.c:streamer_write_chain.  */\n-\t  DFS_write_tree (ob, expr_state, t, ref_p, false);\n-\telse\n+\t{\n+\t  /* We would have to stream externals in the block chain as\n+\t     non-references but we should have dropped them in\n+\t     free-lang-data.  */\n+\t  gcc_assert (!VAR_OR_FUNCTION_DECL_P (t) || !DECL_EXTERNAL (t));\n \t  DFS_follow_tree_edge (t);\n+\t}\n \n       DFS_follow_tree_edge (BLOCK_SUPERCONTEXT (expr));\n       DFS_follow_tree_edge (BLOCK_ABSTRACT_ORIGIN (expr));\n@@ -1244,12 +1237,6 @@ hash_tree (struct streamer_tree_cache_d *cache, hash_map<tree, hashval_t> *map,\n          be able to call get_symbol_initial_value.  */\n     }\n \n-  if (CODE_CONTAINS_STRUCT (code, TS_DECL_NON_COMMON))\n-    {\n-      if (code == TYPE_DECL)\n-\tvisit (DECL_ORIGINAL_TYPE (t));\n-    }\n-\n   if (CODE_CONTAINS_STRUCT (code, TS_DECL_WITH_VIS))\n     {\n       if (DECL_ASSEMBLER_NAME_SET_P (t))"}, {"sha": "149f558bac539e89c92a7996ae5c58e91b3dbaad", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69e02b35555e214a8f0c4c026d15b8c67584e208/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69e02b35555e214a8f0c4c026d15b8c67584e208/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=69e02b35555e214a8f0c4c026d15b8c67584e208", "patch": "@@ -721,11 +721,9 @@ lto_input_ts_decl_common_tree_pointers (struct lto_input_block *ib,\n    file being read.  */\n \n static void\n-lto_input_ts_decl_non_common_tree_pointers (struct lto_input_block *ib,\n-\t\t\t\t\t    struct data_in *data_in, tree expr)\n+lto_input_ts_decl_non_common_tree_pointers (struct lto_input_block *,\n+\t\t\t\t\t    struct data_in *, tree)\n {\n-  if (TREE_CODE (expr) == TYPE_DECL)\n-    DECL_ORIGINAL_TYPE (expr) = stream_read_tree (ib, data_in);\n }\n \n "}, {"sha": "ba57b976c581be6c70b92258df034c28d30133f1", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69e02b35555e214a8f0c4c026d15b8c67584e208/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69e02b35555e214a8f0c4c026d15b8c67584e208/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=69e02b35555e214a8f0c4c026d15b8c67584e208", "patch": "@@ -494,14 +494,10 @@ streamer_write_chain (struct output_block *ob, tree t, bool ref_p)\n     {\n       /* We avoid outputting external vars or functions by reference\n \t to the global decls section as we do not want to have them\n-\t enter decl merging.  This is, of course, only for the call\n-\t for streaming BLOCK_VARS, but other callers are safe.\n-\t See also lto-streamer-out.c:DFS_write_tree_body.  */\n-      if (VAR_OR_FUNCTION_DECL_P (t)\n-\t  && DECL_EXTERNAL (t))\n-\tstream_write_tree_shallow_non_ref (ob, t, ref_p);\n-      else\n-\tstream_write_tree (ob, t, ref_p);\n+\t enter decl merging.  We should not need to do this anymore because\n+\t free_lang_data removes them from block scopes.  */\n+      gcc_assert (!VAR_OR_FUNCTION_DECL_P (t) || !DECL_EXTERNAL (t));\n+      stream_write_tree (ob, t, ref_p);\n \n       t = TREE_CHAIN (t);\n     }\n@@ -617,11 +613,8 @@ write_ts_decl_common_tree_pointers (struct output_block *ob, tree expr,\n    pointer fields.  */\n \n static void\n-write_ts_decl_non_common_tree_pointers (struct output_block *ob, tree expr,\n-\t\t\t\t        bool ref_p)\n+write_ts_decl_non_common_tree_pointers (struct output_block *, tree, bool)\n {\n-  if (TREE_CODE (expr) == TYPE_DECL)\n-    stream_write_tree (ob, DECL_ORIGINAL_TYPE (expr), ref_p);\n }\n \n "}, {"sha": "e906cdcc1e0e5ecf53d71d6a83e14fbdbf3d4367", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69e02b35555e214a8f0c4c026d15b8c67584e208/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69e02b35555e214a8f0c4c026d15b8c67584e208/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=69e02b35555e214a8f0c4c026d15b8c67584e208", "patch": "@@ -5357,6 +5357,7 @@ free_lang_data_in_decl (tree decl)\n       DECL_VISIBILITY (decl) = VISIBILITY_DEFAULT;\n       DECL_VISIBILITY_SPECIFIED (decl) = 0;\n       DECL_INITIAL (decl) = NULL_TREE;\n+      DECL_ORIGINAL_TYPE (decl) = NULL_TREE;\n     }\n   else if (TREE_CODE (decl) == FIELD_DECL)\n     DECL_INITIAL (decl) = NULL_TREE;\n@@ -5469,10 +5470,6 @@ find_decls_types_r (tree *tp, int *ws, void *data)\n \t  fld_worklist_push (DECL_ARGUMENTS (t), fld);\n \t  fld_worklist_push (DECL_RESULT (t), fld);\n \t}\n-      else if (TREE_CODE (t) == TYPE_DECL)\n-\t{\n-\t  fld_worklist_push (DECL_ORIGINAL_TYPE (t), fld);\n-\t}\n       else if (TREE_CODE (t) == FIELD_DECL)\n \t{\n \t  fld_worklist_push (DECL_FIELD_OFFSET (t), fld);"}]}