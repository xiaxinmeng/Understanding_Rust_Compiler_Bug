{"sha": "2f809e773e8ecae72331002faf98986dd670580f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY4MDllNzczZThlY2FlNzIzMzEwMDJmYWY5ODk4NmRkNjcwNTgwZg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-20T14:10:02Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-20T14:10:33Z"}, "message": "git_email.py: fix duplicate author_lines.\n\n\t* gcc-changelog/git_commit.py: Add author_tuple\n\tonly if not present in author_lines.\n\t* gcc-changelog/test_email.py: New test.\n\t* gcc-changelog/test_patches.txt: Add new patch.", "tree": {"sha": "8f2c51d8c4533181d29a6babbbc2388fcbbaa694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f2c51d8c4533181d29a6babbbc2388fcbbaa694"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f809e773e8ecae72331002faf98986dd670580f", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl7FOloACgkQTcGC3A+n\nN4V5KAf/ezv3/GIChxCojoZmXywvFqEznVTXtruQn5BA2UJCod20fTM5Qor9r/zY\nMRHUjLh1Don5wc2rLLmOYqW5mQZ5YsATSvcEV+7KC+eSjSPaurkU6Io5ee6Q/RUg\nuakYkLg9o0Rx3Wf2V18D8hyTl8Y0oHtldnkyqTZBQArw86oOaSmggDX4j0iysKrq\nKy1nUl7sswt38x79mI/+J0OD22a+WwIPjdRfTtIXxibeBjMJQ95EjLYD3HWLQjoc\n2sGc+GhobaEfvZ0qmZJb6uh5Lh89WuyuQny+FHq7F2RH6EoUVsVnqzoIn95Z6zvz\nfTmDVSPeJ96aMXMp4XY3iKY3DhC92g==\n=yDCD\n-----END PGP SIGNATURE-----", "payload": "tree 8f2c51d8c4533181d29a6babbbc2388fcbbaa694\nparent 03d90a20a1afcbb9c30da8d4adf4922b0685061f\nauthor Martin Liska <mliska@suse.cz> 1589983802 +0200\ncommitter Martin Liska <mliska@suse.cz> 1589983833 +0200\n\ngit_email.py: fix duplicate author_lines.\n\n\t* gcc-changelog/git_commit.py: Add author_tuple\n\tonly if not present in author_lines.\n\t* gcc-changelog/test_email.py: New test.\n\t* gcc-changelog/test_patches.txt: Add new patch.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f809e773e8ecae72331002faf98986dd670580f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f809e773e8ecae72331002faf98986dd670580f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f809e773e8ecae72331002faf98986dd670580f/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03d90a20a1afcbb9c30da8d4adf4922b0685061f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03d90a20a1afcbb9c30da8d4adf4922b0685061f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03d90a20a1afcbb9c30da8d4adf4922b0685061f"}], "stats": {"total": 111, "additions": 110, "deletions": 1}, "files": [{"sha": "8ebae98cc1451f0724044f755f1a84e20c97c8b7", "filename": "contrib/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f809e773e8ecae72331002faf98986dd670580f/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f809e773e8ecae72331002faf98986dd670580f/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=2f809e773e8ecae72331002faf98986dd670580f", "patch": "@@ -1,3 +1,10 @@\n+2020-05-20  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Add author_tuple\n+\tonly if not present in author_lines.\n+\t* gcc-changelog/test_email.py: New test.\n+\t* gcc-changelog/test_patches.txt: Add new patch.\n+\n 2020-05-20  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_commit.py: Refactor to make flake8 happy."}, {"sha": "8c347d1c4212d3dc3700af4b275d77899e45de66", "filename": "contrib/gcc-changelog/git_commit.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f809e773e8ecae72331002faf98986dd670580f/contrib%2Fgcc-changelog%2Fgit_commit.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f809e773e8ecae72331002faf98986dd670580f/contrib%2Fgcc-changelog%2Fgit_commit.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Fgit_commit.py?ref=2f809e773e8ecae72331002faf98986dd670580f", "patch": "@@ -381,7 +381,8 @@ def parse_changelog(self):\n                         self.changelog_entries.append(last_entry)\n                         will_deduce = True\n                 elif author_tuple:\n-                    last_entry.author_lines.append(author_tuple)\n+                    if author_tuple not in last_entry.author_lines:\n+                        last_entry.author_lines.append(author_tuple)\n                     continue\n \n                 if not line.startswith('\\t'):"}, {"sha": "ce69c64c79e9bb9bdf1baba43a81c07a29644856", "filename": "contrib/gcc-changelog/test_email.py", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f809e773e8ecae72331002faf98986dd670580f/contrib%2Fgcc-changelog%2Ftest_email.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f809e773e8ecae72331002faf98986dd670580f/contrib%2Fgcc-changelog%2Ftest_email.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Ftest_email.py?ref=2f809e773e8ecae72331002faf98986dd670580f", "patch": "@@ -267,3 +267,8 @@ def test_signatures(self):\n         email = self.from_patch_glob('0001-RISC-V-Make-unique.patch')\n         assert not email.errors\n         assert len(email.changelog_entries) == 1\n+\n+    def test_duplicate_top_level_author(self):\n+        email = self.from_patch_glob('0001-Fortran-ProcPtr-function.patch')\n+        assert not email.errors\n+        assert len(email.changelog_entries[0].author_lines) == 1"}, {"sha": "d80cfc3a0c8e481618732d6e7de63f32488c2212", "filename": "contrib/gcc-changelog/test_patches.txt", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f809e773e8ecae72331002faf98986dd670580f/contrib%2Fgcc-changelog%2Ftest_patches.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f809e773e8ecae72331002faf98986dd670580f/contrib%2Fgcc-changelog%2Ftest_patches.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Ftest_patches.txt?ref=2f809e773e8ecae72331002faf98986dd670580f", "patch": "@@ -2445,3 +2445,99 @@ index e4c08d780db..1ad9799fce4 100644\n \n -- \n 2.26.2\n+\n+=== 0001-Fortran-ProcPtr-function.patch ===\n+From eb069ae8819c3a84d7f78becc5501e21ee3a9554 Mon Sep 17 00:00:00 2001\n+From: Mark Eggleston <markeggleston@gcc.gnu.org>\n+Date: Thu, 7 May 2020 08:02:02 +0100\n+Subject: [PATCH] Fortran  : ProcPtr function results: 'ppr@' in error message\n+ PR39695\n+\n+The value 'ppr@' is set in the name of result symbol, the actual\n+name of the symbol is in the procedure name symbol pointed\n+to by the result symbol's namespace (ns). When reporting errors for\n+symbols that have the proc_pointer attribute check whether the\n+result attribute is set and set the name accordingly.\n+\n+2020-05-20  Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+gcc/fortran/\n+\n+\tPR fortran/39695\n+\t* resolve.c (resolve_fl_procedure): Set name depending on\n+\twhether the result attribute is set.  For PROCEDURE/RESULT\n+\tconflict use the name in sym->ns->proc_name->name.\n+\t* symbol.c (gfc_add_type): Add check for function and result\n+\tattributes use sym->ns->proc_name->name if both are set.\n+\tWhere the symbol cannot have a type use the name in\n+\tsym->ns->proc_name->name.\n+\n+2020-05-20  Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+gcc/testsuite/\n+\n+\tPR fortran/39695\n+\t* gfortran.dg/pr39695_1.f90: New test.\n+\t* gfortran.dg/pr39695_2.f90: New test.\n+\t* gfortran.dg/pr39695_3.f90: New test.\n+\t* gfortran.dg/pr39695_4.f90: New test.\n+---\n+ gcc/fortran/ChangeLog                   | 11 +++++++++++\n+ gcc/fortran/resolve.c                   |  6 ++++--\n+ gcc/fortran/symbol.c                    |  7 +++++--\n+ gcc/testsuite/ChangeLog                 |  8 ++++++++\n+ gcc/testsuite/gfortran.dg/pr39695_1.f90 |  8 ++++++++\n+ gcc/testsuite/gfortran.dg/pr39695_2.f90 | 12 ++++++++++++\n+ gcc/testsuite/gfortran.dg/pr39695_3.f90 | 11 +++++++++++\n+ gcc/testsuite/gfortran.dg/pr39695_4.f90 | 14 ++++++++++++++\n+ 8 files changed, 73 insertions(+), 4 deletions(-)\n+ create mode 100644 gcc/testsuite/gfortran.dg/pr39695_1.f90\n+ create mode 100644 gcc/testsuite/gfortran.dg/pr39695_2.f90\n+ create mode 100644 gcc/testsuite/gfortran.dg/pr39695_3.f90\n+ create mode 100644 gcc/testsuite/gfortran.dg/pr39695_4.f90\n+\n+diff --git a/gcc/fortran/resolve.c b/gcc/fortran/resolve.c\n+index f6e10ea379c..aaee5eb6b9b 100644\n+--- a/gcc/fortran/resolve.c\n++++ b/gcc/fortran/resolve.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/fortran/symbol.c b/gcc/fortran/symbol.c\n+index 59f602d80d5..b96706138c9 100644\n+--- a/gcc/fortran/symbol.c\n++++ b/gcc/fortran/symbol.c\n+@@ -1 +1,2 @@\n+\n++\n+diff --git a/gcc/testsuite/gfortran.dg/pr39695_1.f90 b/gcc/testsuite/gfortran.dg/pr39695_1.f90\n+new file mode 100644\n+index 00000000000..4c4b3045f69\n+--- /dev/null\n++++ b/gcc/testsuite/gfortran.dg/pr39695_1.f90\n+@@ -0,0 +1 @@\n++\n+diff --git a/gcc/testsuite/gfortran.dg/pr39695_2.f90 b/gcc/testsuite/gfortran.dg/pr39695_2.f90\n+new file mode 100644\n+index 00000000000..8534724959a\n+--- /dev/null\n++++ b/gcc/testsuite/gfortran.dg/pr39695_2.f90\n+@@ -0,0 +1 @@\n++\n+diff --git a/gcc/testsuite/gfortran.dg/pr39695_3.f90 b/gcc/testsuite/gfortran.dg/pr39695_3.f90\n+new file mode 100644\n+index 00000000000..661e2540bb3\n+--- /dev/null\n++++ b/gcc/testsuite/gfortran.dg/pr39695_3.f90\n+@@ -0,0 +1 @@\n++\n+diff --git a/gcc/testsuite/gfortran.dg/pr39695_4.f90 b/gcc/testsuite/gfortran.dg/pr39695_4.f90\n+new file mode 100644\n+index 00000000000..ecb0a43929f\n+--- /dev/null\n++++ b/gcc/testsuite/gfortran.dg/pr39695_4.f90\n+@@ -0,0 +1 @@\n++\n+-- \n+2.26.2\n+"}]}