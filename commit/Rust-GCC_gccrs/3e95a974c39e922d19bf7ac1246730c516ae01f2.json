{"sha": "3e95a974c39e922d19bf7ac1246730c516ae01f2", "node_id": "C_kwDOANBUbNoAKDNlOTVhOTc0YzM5ZTkyMmQxOWJmN2FjMTI0NjczMGM1MTZhZTAxZjI", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-10T19:57:51Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-10T19:57:51Z"}, "message": "c++: \"more constrained\" vs staticness of memfn [PR103783]\n\nHere we're rejecting the calls to g1 and g2 as ambiguous even though one\noverload is more constrained than the other (and they're otherwise tied),\nbecause the implicit 'this' parameter of the non-static overload causes\ncand_parms_match to think the function parameter lists aren't equivalent.\n\nThis patch fixes this by making cand_parms_match skip over 'this'\nappropriately.  Note that this bug only affects partial ordering of\nnon-template member functions because for member function templates\nmore_specialized_fn seems to already skip over 'this' appropriately.\n\n\tPR c++/103783\n\ngcc/cp/ChangeLog:\n\n\t* call.c (cand_parms_match): Skip over 'this' when given one\n\tstatic and one non-static member function.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-memfun2.C: New test.", "tree": {"sha": "75400c8b65eb2929942f7d74ece3bfdefb860314", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75400c8b65eb2929942f7d74ece3bfdefb860314"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e95a974c39e922d19bf7ac1246730c516ae01f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e95a974c39e922d19bf7ac1246730c516ae01f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e95a974c39e922d19bf7ac1246730c516ae01f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e95a974c39e922d19bf7ac1246730c516ae01f2/comments", "author": null, "committer": null, "parents": [{"sha": "54fa7daefe35cacf4a933947d1802318da193c01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54fa7daefe35cacf4a933947d1802318da193c01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54fa7daefe35cacf4a933947d1802318da193c01"}], "stats": {"total": 42, "additions": 39, "deletions": 3}, "files": [{"sha": "88ab23392d27b374e80ead679f2f2b291d9aa81d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e95a974c39e922d19bf7ac1246730c516ae01f2/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e95a974c39e922d19bf7ac1246730c516ae01f2/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=3e95a974c39e922d19bf7ac1246730c516ae01f2", "patch": "@@ -11945,7 +11945,7 @@ joust_maybe_elide_copy (z_candidate *&cand)\n /* True if the defining declarations of the two candidates have equivalent\n    parameters.  */\n \n-bool\n+static bool\n cand_parms_match (z_candidate *c1, z_candidate *c2)\n {\n   tree fn1 = c1->fn;\n@@ -11967,8 +11967,19 @@ cand_parms_match (z_candidate *c1, z_candidate *c2)\n       fn1 = DECL_TEMPLATE_RESULT (t1);\n       fn2 = DECL_TEMPLATE_RESULT (t2);\n     }\n-  return compparms (TYPE_ARG_TYPES (TREE_TYPE (fn1)),\n-\t\t    TYPE_ARG_TYPES (TREE_TYPE (fn2)));\n+  tree parms1 = TYPE_ARG_TYPES (TREE_TYPE (fn1));\n+  tree parms2 = TYPE_ARG_TYPES (TREE_TYPE (fn2));\n+  if (DECL_FUNCTION_MEMBER_P (fn1)\n+      && DECL_FUNCTION_MEMBER_P (fn2)\n+      && (DECL_NONSTATIC_MEMBER_FUNCTION_P (fn1)\n+\t  != DECL_NONSTATIC_MEMBER_FUNCTION_P (fn2)))\n+    {\n+      /* Ignore 'this' when comparing the parameters of a static member\n+\t function with those of a non-static one.  */\n+      parms1 = skip_artificial_parms_for (fn1, parms1);\n+      parms2 = skip_artificial_parms_for (fn2, parms2);\n+    }\n+  return compparms (parms1, parms2);\n }\n \n /* Compare two candidates for overloading as described in"}, {"sha": "e3845e4838730c63c7edb7c3397e82b04f2de71c", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-memfun2.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e95a974c39e922d19bf7ac1246730c516ae01f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-memfun2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e95a974c39e922d19bf7ac1246730c516ae01f2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-memfun2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-memfun2.C?ref=3e95a974c39e922d19bf7ac1246730c516ae01f2", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/103783\n+// { dg-do compile { target c++20 } }\n+\n+template<bool B>\n+struct A {\n+  template<class...> void f1() = delete;\n+  template<class...> static void f1() requires B;\n+\n+  template<class...> void f2() requires B;\n+  template<class...> static void f2() = delete;\n+\n+  void g1() = delete;\n+  static void g1() requires B;\n+\n+  void g2() requires B;\n+  static void g2() = delete;\n+};\n+\n+int main() {\n+  A<true> a;\n+  a.f1(); // OK\n+  a.f2(); // OK\n+  a.g1(); // OK, previously rejected as ambiguous\n+  a.g2(); // OK, previously rejected as ambiguous\n+}"}]}