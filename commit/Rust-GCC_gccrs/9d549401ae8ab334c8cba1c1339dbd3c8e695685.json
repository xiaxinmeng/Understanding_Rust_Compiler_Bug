{"sha": "9d549401ae8ab334c8cba1c1339dbd3c8e695685", "node_id": "C_kwDOANBUbNoAKDlkNTQ5NDAxYWU4YWIzMzRjOGNiYTFjMTMzOWRiZDNjOGU2OTU2ODU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-16T15:30:02Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-08T17:35:15Z"}, "message": "libstdc++: Add always_inline to most allocator functions\n\nThis reduces the abstraction penalty for allocator support in\nunoptimized code. Constructing and using allocators in containers calls\nmany one-line (or completely empty) inline functions. Those can all be\ninlined to reduce code size and function call overhead for -O0.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/alloc_traits.h (allocator_traits): Add\n\talways_inline attribute to all member functions.\n\t(__do_alloc_on_copy, __alloc_on_copy, __do_alloc_on_move)\n\t(__alloc_on_move, __do_alloc_on_swap, __alloc_on_swap)\n\t(_Destroy(FwdIter, FwdIter, allocator<T>&)): : Add\n\talways_inline attribute.\n\t* include/bits/allocator.h (allocator): Add always_inline\n\tattribute to all member functions and equality operators.\n\t* include/bits/new_allocator.h (__new_allocator): Likewise.\n\t* include/ext/alloc_traits.h (__gnu_cxx::__alloc_traits):\n\tLikewise.", "tree": {"sha": "871bdaa17e2c143edf9f663aa2d3d450e5ac2aa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/871bdaa17e2c143edf9f663aa2d3d450e5ac2aa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d549401ae8ab334c8cba1c1339dbd3c8e695685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d549401ae8ab334c8cba1c1339dbd3c8e695685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d549401ae8ab334c8cba1c1339dbd3c8e695685", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d549401ae8ab334c8cba1c1339dbd3c8e695685/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f1519eef5cbdcea2f18445852f5482798e3936a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f1519eef5cbdcea2f18445852f5482798e3936a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f1519eef5cbdcea2f18445852f5482798e3936a"}], "stats": {"total": 87, "additions": 72, "deletions": 15}, "files": [{"sha": "203988ab933ca9ddf3b28695b313b6acbfc61037", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d549401ae8ab334c8cba1c1339dbd3c8e695685/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d549401ae8ab334c8cba1c1339dbd3c8e695685/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=9d549401ae8ab334c8cba1c1339dbd3c8e695685", "patch": "@@ -463,7 +463,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  Calls @c a.allocate(n)\n       */\n-      _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer\n+      [[__nodiscard__,__gnu__::__always_inline__]]\n+      static _GLIBCXX20_CONSTEXPR pointer\n       allocate(allocator_type& __a, size_type __n)\n       { return __a.allocate(__n); }\n \n@@ -477,7 +478,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  Returns <tt> a.allocate(n, hint) </tt>\n       */\n-      _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer\n+      [[__nodiscard__,__gnu__::__always_inline__]]\n+      static _GLIBCXX20_CONSTEXPR pointer\n       allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)\n       {\n #if __cplusplus <= 201703L\n@@ -495,6 +497,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  Calls <tt> a.deallocate(p, n) </tt>\n       */\n+      [[__gnu__::__always_inline__]]\n       static _GLIBCXX20_CONSTEXPR void\n       deallocate(allocator_type& __a, pointer __p, size_type __n)\n       { __a.deallocate(__p, __n); }\n@@ -511,6 +514,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.\n       */\n       template<typename _Up, typename... _Args>\n+\t[[__gnu__::__always_inline__]]\n \tstatic _GLIBCXX20_CONSTEXPR void\n \tconstruct(allocator_type& __a __attribute__((__unused__)), _Up* __p,\n \t\t  _Args&&... __args)\n@@ -531,6 +535,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Calls @c __a.destroy(__p).\n       */\n       template<typename _Up>\n+\t[[__gnu__::__always_inline__]]\n \tstatic _GLIBCXX20_CONSTEXPR void\n \tdestroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)\n \tnoexcept(is_nothrow_destructible<_Up>::value)\n@@ -547,6 +552,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @param  __a  An allocator.\n        *  @return @c __a.max_size()\n       */\n+      [[__gnu__::__always_inline__]]\n       static _GLIBCXX20_CONSTEXPR size_type\n       max_size(const allocator_type& __a __attribute__((__unused__))) noexcept\n       {\n@@ -562,6 +568,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @param  __rhs  An allocator.\n        *  @return @c __rhs\n       */\n+      [[__gnu__::__always_inline__]]\n       static _GLIBCXX20_CONSTEXPR allocator_type\n       select_on_container_copy_construction(const allocator_type& __rhs)\n       { return __rhs; }\n@@ -633,6 +640,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.\n       */\n       template<typename _Up, typename... _Args>\n+\t[[__gnu__::__always_inline__]]\n \tstatic _GLIBCXX20_CONSTEXPR void\n \tconstruct(allocator_type&, _Up* __p, _Args&&... __args)\n \tnoexcept(std::is_nothrow_constructible<_Up, _Args...>::value)\n@@ -646,6 +654,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Invokes the destructor for `*__p`.\n       */\n       template<typename _Up>\n+\t[[__gnu__::__always_inline__]]\n \tstatic _GLIBCXX20_CONSTEXPR void\n \tdestroy(allocator_type&, _Up* __p)\n \tnoexcept(is_nothrow_destructible<_Up>::value)\n@@ -660,6 +669,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @param  __rhs  An allocator.\n        *  @return `__rhs`\n       */\n+      [[__gnu__::__always_inline__]]\n       static _GLIBCXX20_CONSTEXPR allocator_type\n       select_on_container_copy_construction(const allocator_type& __rhs)\n       { return __rhs; }\n@@ -669,22 +679,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// @cond undocumented\n #if __cplusplus < 201703L\n   template<typename _Alloc>\n+    [[__gnu__::__always_inline__]]\n     inline void\n     __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)\n     { __one = __two; }\n \n   template<typename _Alloc>\n+    [[__gnu__::__always_inline__]]\n     inline void\n     __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)\n     { }\n #endif\n \n   template<typename _Alloc>\n+    [[__gnu__::__always_inline__]]\n     _GLIBCXX14_CONSTEXPR inline void\n     __alloc_on_copy(_Alloc& __one, const _Alloc& __two)\n     {\n-      typedef allocator_traits<_Alloc> __traits;\n-      typedef typename __traits::propagate_on_container_copy_assignment __pocca;\n+      using __traits = allocator_traits<_Alloc>;\n+      using __pocca =\n+\ttypename __traits::propagate_on_container_copy_assignment::type;\n #if __cplusplus >= 201703L\n       if constexpr (__pocca::value)\n \t__one = __two;\n@@ -694,6 +708,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Alloc>\n+    [[__gnu__::__always_inline__]]\n     constexpr _Alloc\n     __alloc_on_copy(const _Alloc& __a)\n     {\n@@ -703,20 +718,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus < 201703L\n   template<typename _Alloc>\n+    [[__gnu__::__always_inline__]]\n     inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)\n     { __one = std::move(__two); }\n \n   template<typename _Alloc>\n+    [[__gnu__::__always_inline__]]\n     inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)\n     { }\n #endif\n \n   template<typename _Alloc>\n+    [[__gnu__::__always_inline__]]\n     _GLIBCXX14_CONSTEXPR inline void\n     __alloc_on_move(_Alloc& __one, _Alloc& __two)\n     {\n-      typedef allocator_traits<_Alloc> __traits;\n-      typedef typename __traits::propagate_on_container_move_assignment __pocma;\n+      using __traits = allocator_traits<_Alloc>;\n+      using __pocma\n+\t= typename __traits::propagate_on_container_move_assignment::type;\n #if __cplusplus >= 201703L\n       if constexpr (__pocma::value)\n \t__one = std::move(__two);\n@@ -727,23 +746,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus < 201703L\n   template<typename _Alloc>\n+    [[__gnu__::__always_inline__]]\n     inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)\n     {\n       using std::swap;\n       swap(__one, __two);\n     }\n \n   template<typename _Alloc>\n+    [[__gnu__::__always_inline__]]\n     inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)\n     { }\n #endif\n \n   template<typename _Alloc>\n+    [[__gnu__::__always_inline__]]\n     _GLIBCXX14_CONSTEXPR inline void\n     __alloc_on_swap(_Alloc& __one, _Alloc& __two)\n     {\n-      typedef allocator_traits<_Alloc> __traits;\n-      typedef typename __traits::propagate_on_container_swap __pocs;\n+      using __traits = allocator_traits<_Alloc>;\n+      using __pocs = typename __traits::propagate_on_container_swap::type;\n #if __cplusplus >= 201703L\n       if constexpr (__pocs::value)\n \t{\n@@ -904,7 +926,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if _GLIBCXX_HOSTED\n   template<typename _ForwardIterator, typename _Tp>\n-    _GLIBCXX20_CONSTEXPR\n+    __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR\n     inline void\n     _Destroy(_ForwardIterator __first, _ForwardIterator __last,\n \t     allocator<_Tp>&)"}, {"sha": "6763344733b748fb899979e709c1bc481951b511", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d549401ae8ab334c8cba1c1339dbd3c8e695685/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d549401ae8ab334c8cba1c1339dbd3c8e695685/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=9d549401ae8ab334c8cba1c1339dbd3c8e695685", "patch": "@@ -105,6 +105,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ~allocator() = default;\n \n       template<typename _Up>\n+\t__attribute__((__always_inline__))\n \tconstexpr\n \tallocator(const allocator<_Up>&) noexcept { }\n \n@@ -157,9 +158,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 3035. std::allocator's constructors should be constexpr\n+      __attribute__((__always_inline__))\n       _GLIBCXX20_CONSTEXPR\n       allocator() _GLIBCXX_NOTHROW { }\n \n+      __attribute__((__always_inline__))\n       _GLIBCXX20_CONSTEXPR\n       allocator(const allocator& __a) _GLIBCXX_NOTHROW\n       : __allocator_base<_Tp>(__a) { }\n@@ -170,9 +173,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n       template<typename _Tp1>\n+\t__attribute__((__always_inline__))\n \t_GLIBCXX20_CONSTEXPR\n \tallocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }\n \n+      __attribute__((__always_inline__))\n #if __cpp_constexpr_dynamic_alloc\n       constexpr\n #endif\n@@ -206,12 +211,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n #endif // C++20\n \n-      friend _GLIBCXX20_CONSTEXPR bool\n+      friend __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR\n+      bool\n       operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW\n       { return true; }\n \n #if __cpp_impl_three_way_comparison < 201907L\n-      friend _GLIBCXX20_CONSTEXPR bool\n+      friend __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR\n+      bool\n       operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW\n       { return false; }\n #endif\n@@ -225,13 +232,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @relates std::allocator\n    */\n   template<typename _T1, typename _T2>\n+    __attribute__((__always_inline__))\n     inline _GLIBCXX20_CONSTEXPR bool\n     operator==(const allocator<_T1>&, const allocator<_T2>&)\n     _GLIBCXX_NOTHROW\n     { return true; }\n \n #if __cpp_impl_three_way_comparison < 201907L\n   template<typename _T1, typename _T2>\n+    __attribute__((__always_inline__))\n     inline _GLIBCXX20_CONSTEXPR bool\n     operator!=(const allocator<_T1>&, const allocator<_T2>&)\n     _GLIBCXX_NOTHROW"}, {"sha": "b954acdf49c4cb8bbfce5359d4a06203408c7faa", "filename": "libstdc++-v3/include/bits/new_allocator.h", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d549401ae8ab334c8cba1c1339dbd3c8e695685/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d549401ae8ab334c8cba1c1339dbd3c8e695685/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fnew_allocator.h?ref=9d549401ae8ab334c8cba1c1339dbd3c8e695685", "patch": "@@ -83,13 +83,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef std::true_type propagate_on_container_move_assignment;\n #endif\n \n+      __attribute__((__always_inline__))\n       _GLIBCXX20_CONSTEXPR\n       __new_allocator() _GLIBCXX_USE_NOEXCEPT { }\n \n+      __attribute__((__always_inline__))\n       _GLIBCXX20_CONSTEXPR\n       __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }\n \n       template<typename _Tp1>\n+\t__attribute__((__always_inline__))\n \t_GLIBCXX20_CONSTEXPR\n \t__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }\n \n@@ -170,49 +173,55 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #undef _GLIBCXX_OPERATOR_NEW\n \n #if __cplusplus <= 201703L\n+      __attribute__((__always_inline__))\n       size_type\n       max_size() const _GLIBCXX_USE_NOEXCEPT\n       { return _M_max_size(); }\n \n #if __cplusplus >= 201103L\n       template<typename _Up, typename... _Args>\n+\t__attribute__((__always_inline__))\n \tvoid\n \tconstruct(_Up* __p, _Args&&... __args)\n \tnoexcept(std::is_nothrow_constructible<_Up, _Args...>::value)\n \t{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\n \n       template<typename _Up>\n+\t__attribute__((__always_inline__))\n \tvoid\n \tdestroy(_Up* __p)\n \tnoexcept(std::is_nothrow_destructible<_Up>::value)\n \t{ __p->~_Up(); }\n #else\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 402. wrong new expression in [some_] allocator::construct\n+      __attribute__((__always_inline__))\n       void\n       construct(pointer __p, const _Tp& __val)\n       { ::new((void *)__p) _Tp(__val); }\n \n+      __attribute__((__always_inline__))\n       void\n       destroy(pointer __p) { __p->~_Tp(); }\n #endif\n #endif // ! C++20\n \n       template<typename _Up>\n-\tfriend _GLIBCXX20_CONSTEXPR bool\n+\tfriend __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR bool\n \toperator==(const __new_allocator&, const __new_allocator<_Up>&)\n \t_GLIBCXX_NOTHROW\n \t{ return true; }\n \n #if __cpp_impl_three_way_comparison < 201907L\n       template<typename _Up>\n-\tfriend _GLIBCXX20_CONSTEXPR bool\n+\tfriend __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR bool\n \toperator!=(const __new_allocator&, const __new_allocator<_Up>&)\n \t_GLIBCXX_NOTHROW\n \t{ return false; }\n #endif\n \n     private:\n+      __attribute__((__always_inline__))\n       _GLIBCXX_CONSTEXPR size_type\n       _M_max_size() const _GLIBCXX_USE_NOEXCEPT\n       {"}, {"sha": "d7008ee38147628b45f491b4f2bb503ba988a346", "filename": "libstdc++-v3/include/ext/alloc_traits.h", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d549401ae8ab334c8cba1c1339dbd3c8e695685/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d549401ae8ab334c8cba1c1339dbd3c8e695685/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h?ref=9d549401ae8ab334c8cba1c1339dbd3c8e695685", "patch": "@@ -73,6 +73,7 @@ template<typename _Alloc, typename = typename _Alloc::value_type>\n   public:\n     // overload construct for non-standard pointer types\n     template<typename _Ptr, typename... _Args>\n+      [[__gnu__::__always_inline__]]\n       static _GLIBCXX14_CONSTEXPR\n       std::__enable_if_t<__is_custom_pointer<_Ptr>::value>\n       construct(_Alloc& __a, _Ptr __p, _Args&&... __args)\n@@ -85,30 +86,38 @@ template<typename _Alloc, typename = typename _Alloc::value_type>\n \n     // overload destroy for non-standard pointer types\n     template<typename _Ptr>\n+      [[__gnu__::__always_inline__]]\n       static _GLIBCXX14_CONSTEXPR\n       std::__enable_if_t<__is_custom_pointer<_Ptr>::value>\n       destroy(_Alloc& __a, _Ptr __p)\n       noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))\n       { _Base_type::destroy(__a, std::__to_address(__p)); }\n \n+    [[__gnu__::__always_inline__]]\n     static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)\n     { return _Base_type::select_on_container_copy_construction(__a); }\n \n+    [[__gnu__::__always_inline__]]\n     static _GLIBCXX14_CONSTEXPR void _S_on_swap(_Alloc& __a, _Alloc& __b)\n     { std::__alloc_on_swap(__a, __b); }\n \n+    [[__gnu__::__always_inline__]]\n     static constexpr bool _S_propagate_on_copy_assign()\n     { return _Base_type::propagate_on_container_copy_assignment::value; }\n \n+    [[__gnu__::__always_inline__]]\n     static constexpr bool _S_propagate_on_move_assign()\n     { return _Base_type::propagate_on_container_move_assignment::value; }\n \n+    [[__gnu__::__always_inline__]]\n     static constexpr bool _S_propagate_on_swap()\n     { return _Base_type::propagate_on_container_swap::value; }\n \n+    [[__gnu__::__always_inline__]]\n     static constexpr bool _S_always_equal()\n     { return _Base_type::is_always_equal::value; }\n \n+    __attribute__((__always_inline__))\n     static constexpr bool _S_nothrow_move()\n     { return _S_propagate_on_move_assign() || _S_always_equal(); }\n \n@@ -125,30 +134,38 @@ template<typename _Alloc, typename = typename _Alloc::value_type>\n     typedef typename _Alloc::size_type              size_type;\n     typedef typename _Alloc::difference_type        difference_type;\n \n-    _GLIBCXX_NODISCARD static pointer\n+    __attribute__((__always_inline__)) _GLIBCXX_NODISCARD\n+    static pointer\n     allocate(_Alloc& __a, size_type __n)\n     { return __a.allocate(__n); }\n \n     template<typename _Hint>\n-      _GLIBCXX_NODISCARD static pointer\n+      __attribute__((__always_inline__)) _GLIBCXX_NODISCARD\n+      static pointer\n       allocate(_Alloc& __a, size_type __n, _Hint __hint)\n       { return __a.allocate(__n, __hint); }\n \n+    __attribute__((__always_inline__))\n     static void deallocate(_Alloc& __a, pointer __p, size_type __n)\n     { __a.deallocate(__p, __n); }\n \n     template<typename _Tp>\n+      __attribute__((__always_inline__))\n       static void construct(_Alloc& __a, pointer __p, const _Tp& __arg)\n       { __a.construct(__p, __arg); }\n \n+    __attribute__((__always_inline__))\n     static void destroy(_Alloc& __a, pointer __p)\n     { __a.destroy(__p); }\n \n+    __attribute__((__always_inline__))\n     static size_type max_size(const _Alloc& __a)\n     { return __a.max_size(); }\n \n+    __attribute__((__always_inline__))\n     static const _Alloc& _S_select_on_copy(const _Alloc& __a) { return __a; }\n \n+    __attribute__((__always_inline__))\n     static void _S_on_swap(_Alloc& __a, _Alloc& __b)\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS"}]}