{"sha": "a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFlMjEzMGNhMWZhMTQxZTNkY2IxYmE0OTEzYThmNDZkMzNhYjljMQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2008-04-08T06:48:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-04-08T06:48:30Z"}, "message": "back_end.adb: Remove Big_String_Ptr declarations (now in Types)\n\n2008-04-08  Robert Dewar  <dewar@adacore.com>\n\n\t* back_end.adb: Remove Big_String_Ptr declarations (now in Types)\n\n\t* errout.adb: Remove Big_String_Ptr declarations (now in Types)\n\tChange name Is_Style_Msg to Is_Style_Or_Info_Msg\n\n\t* fmap.adb: Remove Big_String declarations (now in Types)\n\t(No_Mapping_File): New Boolean global variable\n\t(Initialize): When mapping file cannot be read, set No_Mapping_File to\n\tFalse.\n\t(Update_Mapping_File): Do nothing if No_Mapping_File is True. If the\n\ttables were empty before adding entries, open the mapping file\n\twith Truncate = True, instead of delete/re-create.\n\n\t* fname-sf.adb: Remove Big_String declarations (now in Types)\n\n\t* s-strcom.adb, g-dyntab.ads, g-table.ads, s-carsi8.adb,\n        s-stalib.ads, s-carun8.adb: Add zero size Storage_Size clauses for big\n\tpointer types\n\n\t* table.ads: Add for Table_Ptr'Storage_Size use 0\n\n\t* types.ads: Add Big_String declarations\n\tAdd Size_Clause of zero for big pointer types\n\nFrom-SVN: r134022", "tree": {"sha": "81431173c33a808bd2956a3c52874efc0dff6252", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81431173c33a808bd2956a3c52874efc0dff6252"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1/comments", "author": null, "committer": null, "parents": [{"sha": "2d7756fa264b9975f7d779bc2e658a6741314e14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7756fa264b9975f7d779bc2e658a6741314e14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d7756fa264b9975f7d779bc2e658a6741314e14"}], "stats": {"total": 173, "additions": 93, "deletions": 80}, "files": [{"sha": "a66007649886ae642b266fc9ca56b13fdb9600b5", "filename": "gcc/ada/back_end.adb", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1/gcc%2Fada%2Fback_end.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1/gcc%2Fada%2Fback_end.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.adb?ref=a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -125,10 +125,7 @@ package body Back_End is\n    procedure Scan_Compiler_Arguments is\n       Next_Arg : Pos := 1;\n \n-      subtype Big_String is String (Positive);\n-      type BSP is access Big_String;\n-\n-      type Arg_Array is array (Nat) of BSP;\n+      type Arg_Array is array (Nat) of Big_String_Ptr;\n       type Arg_Array_Ptr is access Arg_Array;\n \n       flag_stack_check : Int;\n@@ -235,9 +232,10 @@ package body Back_End is\n \n       while Next_Arg < save_argc loop\n          Look_At_Arg : declare\n-            Argv_Ptr : constant BSP    := save_argv (Next_Arg);\n-            Argv_Len : constant Nat    := Len_Arg (Next_Arg);\n-            Argv     : constant String := Argv_Ptr (1 .. Natural (Argv_Len));\n+            Argv_Ptr : constant Big_String_Ptr := save_argv (Next_Arg);\n+            Argv_Len : constant Nat            := Len_Arg (Next_Arg);\n+            Argv     : constant String         :=\n+                         Argv_Ptr (1 .. Natural (Argv_Len));\n \n          begin\n             --  If the previous switch has set the Output_File_Name_Present"}, {"sha": "d898a306d67e8d88e0e9287d8e058e3dadc702d2", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 34, "deletions": 32, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1", "patch": "@@ -50,8 +50,6 @@ with Stand;    use Stand;\n with Style;\n with Uname;    use Uname;\n \n-with Unchecked_Conversion;\n-\n package body Errout is\n \n    Errors_Must_Be_Ignored : Boolean := False;\n@@ -797,7 +795,8 @@ package body Errout is\n \n       --  If error message line length set, and this is a continuation message\n       --  then all we do is to append the text to the text of the last message\n-      --  with a comma space separator.\n+      --  with a comma space separator (eliminating a possible (style) or\n+      --  info prefix).\n \n       if Error_Msg_Line_Length /= 0\n         and then Continuation\n@@ -808,6 +807,7 @@ package body Errout is\n             Oldm : String_Ptr := Errors.Table (Cur_Msg).Text;\n             Newm : String (1 .. Oldm'Last + 2 + Msglen);\n             Newl : Natural;\n+            M    : Natural;\n \n          begin\n             --  First copy old message to new one and free it\n@@ -816,6 +816,16 @@ package body Errout is\n             Newl := Oldm'Length;\n             Free (Oldm);\n \n+            --  Remove (style) or info: at start of message\n+\n+            if Msglen > 8 and then Msg_Buffer (1 .. 8) = \"(style) \" then\n+               M := 9;\n+            elsif Msglen > 6 and then Msg_Buffer (1 .. 6) = \"info: \" then\n+               M := 7;\n+            else\n+               M := 1;\n+            end if;\n+\n             --  Now deal with separation between messages. Normally this\n             --  is simply comma space, but there are some special cases.\n \n@@ -830,16 +840,16 @@ package body Errout is\n             --  successive parenthetical remarks into a single one with\n             --  separating commas).\n \n-            elsif Msg_Buffer (1) = '(' and then Msg_Buffer (Msglen) = ')' then\n+            elsif Msg_Buffer (M) = '(' and then Msg_Buffer (Msglen) = ')' then\n \n                --  Case where existing message ends in right paren, remove\n                --  and separate parenthetical remarks with a comma.\n \n                if Newm (Newl) = ')' then\n                   Newm (Newl) := ',';\n-                  Msg_Buffer (1) := ' ';\n+                  Msg_Buffer (M) := ' ';\n \n-                  --  Case where we are adding new parenthetical comment\n+               --  Case where we are adding new parenthetical comment\n \n                else\n                   Newl := Newl + 1;\n@@ -855,8 +865,9 @@ package body Errout is\n \n             --  Append new message\n \n-            Newm (Newl + 1 .. Newl + Msglen) := Msg_Buffer (1 .. Msglen);\n-            Newl := Newl + Msglen;\n+            Newm (Newl + 1 .. Newl + Msglen - M + 1) :=\n+              Msg_Buffer (M .. Msglen);\n+            Newl := Newl + Msglen - M + 1;\n             Errors.Table (Cur_Msg).Text := new String'(Newm (1 .. Newl));\n          end;\n \n@@ -956,9 +967,9 @@ package body Errout is\n            and then Compiler_State = Parsing\n            and then not All_Errors_Mode\n          then\n-            --  Don't delete unconditional messages and at this stage,\n-            --  don't delete continuation lines (we attempted to delete\n-            --  those earlier if the parent message was deleted.\n+            --  Don't delete unconditional messages and at this stage, don't\n+            --  delete continuation lines (we attempted to delete those earlier\n+            --  if the parent message was deleted.\n \n             if not Errors.Table (Cur_Msg).Uncond\n               and then not Continuation\n@@ -1011,10 +1022,9 @@ package body Errout is\n \n       --  Bump appropriate statistics count\n \n-      if Errors.Table (Cur_Msg).Warn\n-        or else Errors.Table (Cur_Msg).Style\n-      then\n+      if Errors.Table (Cur_Msg).Warn or Errors.Table (Cur_Msg).Style then\n          Warnings_Detected := Warnings_Detected + 1;\n+\n       else\n          Total_Errors_Detected := Total_Errors_Detected + 1;\n \n@@ -1113,7 +1123,7 @@ package body Errout is\n          Last_Killed := True;\n       end if;\n \n-      if not Is_Warning_Msg and then not Is_Style_Msg then\n+      if not (Is_Warning_Msg or Is_Style_Msg) then\n          Set_Posted (N);\n       end if;\n    end Error_Msg_NEL;\n@@ -1927,9 +1937,9 @@ package body Errout is\n \n                and then Errors.Table (E).Optr = Loc\n \n-               --  Don't remove if not warning message. Note that we do not\n-               --  remove style messages here. They are warning messages but\n-               --  not ones we want removed in this context.\n+               --  Don't remove if not warning/info message. Note that we do\n+               --  not remove style messages here. They are warning messages\n+               --  but not ones we want removed in this context.\n \n                and then Errors.Table (E).Warn\n \n@@ -1976,12 +1986,11 @@ package body Errout is\n            and then Original_Node (N) /= N\n            and then No (Condition (N))\n          then\n-            --  Warnings may have been posted on subexpressions of\n-            --  the original tree. We place the original node back\n-            --  on the tree to remove those warnings, whose sloc\n-            --  do not match those of any node in the current tree.\n-            --  Given that we are in unreachable code, this modification\n-            --  to the tree is harmless.\n+            --  Warnings may have been posted on subexpressions of the original\n+            --  tree. We place the original node back on the tree to remove\n+            --  those warnings, whose sloc do not match those of any node in\n+            --  the current tree. Given that we are in unreachable code, this\n+            --  modification to the tree is harmless.\n \n             declare\n                Status : Traverse_Final_Result;\n@@ -2022,7 +2031,6 @@ package body Errout is\n    begin\n       if Is_Non_Empty_List (L) then\n          Stat := First (L);\n-\n          while Present (Stat) loop\n             Remove_Warning_Messages (Stat);\n             Next (Stat);\n@@ -2038,12 +2046,6 @@ package body Errout is\n      (Identifier_Name : System.Address;\n       File_Name       : System.Address)\n    is\n-      type Big_String is array (Positive) of Character;\n-      type Big_String_Ptr is access all Big_String;\n-\n-      function To_Big_String_Ptr is new Unchecked_Conversion\n-        (System.Address, Big_String_Ptr);\n-\n       Ident : constant Big_String_Ptr := To_Big_String_Ptr (Identifier_Name);\n       File  : constant Big_String_Ptr := To_Big_String_Ptr (File_Name);\n       Flen  : Natural;\n@@ -2083,7 +2085,7 @@ package body Errout is\n       for J in Name_Buffer'Range loop\n          Name_Buffer (J) := Ident (J);\n \n-         if Name_Buffer (J) = ASCII.Nul then\n+         if Name_Buffer (J) = ASCII.NUL then\n             Name_Len := J - 1;\n             exit;\n          end if;"}, {"sha": "b09a5248b8894de55f0be6c329833143d9564936", "filename": "gcc/ada/fmap.adb", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1/gcc%2Fada%2Ffmap.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1/gcc%2Fada%2Ffmap.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffmap.adb?ref=a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,8 +37,10 @@ with GNAT.HTable;\n \n package body Fmap is\n \n-   subtype Big_String is String (Positive);\n-   type Big_String_Ptr is access all Big_String;\n+   No_Mapping_File : Boolean := False;\n+   --  Set to True when the specified mapping file cannot be read in\n+   --  procedure Initialize, so that no attempt is made to oopen the mapping\n+   --  file in procedure Update_Mapping_File.\n \n    function To_Big_String_Ptr is new Unchecked_Conversion\n      (Source_Buffer_Ptr, Big_String_Ptr);\n@@ -301,6 +303,7 @@ package body Fmap is\n          Write_Str (\"warning: could not read mapping file \"\"\");\n          Write_Str (File_Name);\n          Write_Line (\"\"\"\");\n+         No_Mapping_File := True;\n \n       else\n          BS := To_Big_String_Ptr (Src);\n@@ -479,27 +482,17 @@ package body Fmap is\n    --  Start of Update_Mapping_File\n \n    begin\n+      --  If the mapping file could not be read, then it will not be possible\n+      --  to update it.\n \n+      if No_Mapping_File then\n+         return;\n+      end if;\n       --  Only Update if there are new entries in the mappings\n \n       if Last_In_Table < File_Mapping.Last then\n \n-         --  If the tables have been emptied, recreate the file.\n-         --  Otherwise, append to it.\n-\n-         if Last_In_Table = 0 then\n-            declare\n-               Discard : Boolean;\n-               pragma Warnings (Off, Discard);\n-            begin\n-               Delete_File (File_Name, Discard);\n-            end;\n-\n-            File := Create_File (File_Name, Binary);\n-\n-         else\n-            File := Open_Read_Write (Name => File_Name, Fmode => Binary);\n-         end if;\n+         File := Open_Read_Write (Name => File_Name, Fmode => Binary);\n \n          if File /= Invalid_FD then\n             if Last_In_Table > 0 then"}, {"sha": "f967c1658b9b09db930cdd11da3be51e57d064a3", "filename": "gcc/ada/fname-sf.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1/gcc%2Fada%2Ffname-sf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1/gcc%2Fada%2Ffname-sf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffname-sf.adb?ref=a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,9 +34,6 @@ with Unchecked_Conversion;\n \n package body Fname.SF is\n \n-   subtype Big_String is String (Positive);\n-   type Big_String_Ptr is access all Big_String;\n-\n    function To_Big_String_Ptr is new Unchecked_Conversion\n      (Source_Buffer_Ptr, Big_String_Ptr);\n "}, {"sha": "7768c88cd38b81aae0b1613212ca2d30fb797989", "filename": "gcc/ada/g-dyntab.ads", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1/gcc%2Fada%2Fg-dyntab.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1/gcc%2Fada%2Fg-dyntab.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-dyntab.ads?ref=a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2000-2006, AdaCore                     --\n+--                     Copyright (C) 2000-2008, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -91,17 +91,19 @@ package GNAT.Dynamic_Tables is\n \n    type Table_Type is\n      array (Table_Index_Type range <>) of Table_Component_Type;\n-\n    subtype Big_Table_Type is\n      Table_Type (Table_Low_Bound .. Table_Index_Type'Last);\n-   --  We work with pointers to a bogus array type that is constrained\n-   --  with the maximum possible range bound. This means that the pointer\n-   --  is a thin pointer, which is more efficient. Since subscript checks\n-   --  in any case must be on the logical, rather than physical bounds,\n-   --  safety is not compromised by this approach.\n+   --  We work with pointers to a bogus array type that is constrained with\n+   --  the maximum possible range bound. This means that the pointer is a thin\n+   --  pointer, which is more efficient. Since subscript checks in any case\n+   --  must be on the logical, rather than physical bounds, safety is not\n+   --  compromised by this approach. These types should not be used by the\n+   --  client.\n \n    type Table_Ptr is access all Big_Table_Type;\n-   --  The table is actually represented as a pointer to allow reallocation\n+   for Table_Ptr'Storage_Size use 0;\n+   --  The table is actually represented as a pointer to allow reallocation.\n+   --  This type should not be used by the client.\n \n    type Table_Private is private;\n    --  Table private data that is not exported in Instance"}, {"sha": "b0aad3d44aa8240e768388b9b1074ffb8da89705", "filename": "gcc/ada/g-table.ads", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1/gcc%2Fada%2Fg-table.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1/gcc%2Fada%2Fg-table.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-table.ads?ref=a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 1998-2007, AdaCore                     --\n+--                     Copyright (C) 1998-2008, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -105,17 +105,19 @@ package GNAT.Table is\n \n    type Table_Type is\n      array (Table_Index_Type range <>) of Table_Component_Type;\n-\n    subtype Big_Table_Type is\n      Table_Type (Table_Low_Bound .. Table_Index_Type'Last);\n    --  We work with pointers to a bogus array type that is constrained\n    --  with the maximum possible range bound. This means that the pointer\n    --  is a thin pointer, which is more efficient. Since subscript checks\n    --  in any case must be on the logical, rather than physical bounds,\n-   --  safety is not compromised by this approach.\n+   --  safety is not compromised by this approach. These types should never\n+   --  be used by the client.\n \n    type Table_Ptr is access all Big_Table_Type;\n-   --  The table is actually represented as a pointer to allow reallocation\n+   for Table_Ptr'Storage_Size use 0;\n+   --  The table is actually represented as a pointer to allow reallocation.\n+   --  This type should never be used by the client.\n \n    Table : aliased Table_Ptr := null;\n    --  The table itself. The lower bound is the value of Low_Bound."}, {"sha": "34c9a118170cc7a14a0b5d699eab5c1fe2e5ec19", "filename": "gcc/ada/s-carsi8.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1/gcc%2Fada%2Fs-carsi8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1/gcc%2Fada%2Fs-carsi8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-carsi8.adb?ref=a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2002-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2002-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,6 +42,7 @@ package body System.Compare_Array_Signed_8 is\n \n    type Big_Words is array (Natural) of Word;\n    type Big_Words_Ptr is access Big_Words;\n+   for Big_Words_Ptr'Storage_Size use 0;\n    --  Array type used to access by words\n \n    type Byte is range -128 .. +127;\n@@ -50,6 +51,7 @@ package body System.Compare_Array_Signed_8 is\n \n    type Big_Bytes is array (Natural) of Byte;\n    type Big_Bytes_Ptr is access Big_Bytes;\n+   for Big_Bytes_Ptr'Storage_Size use 0;\n    --  Array type used to access by bytes\n \n    function To_Big_Words is new"}, {"sha": "79343aa092b37af2aad5a366bb9bf0e9b904478b", "filename": "gcc/ada/s-carun8.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1/gcc%2Fada%2Fs-carun8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1/gcc%2Fada%2Fs-carun8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-carun8.adb?ref=a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2002-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2002-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -46,13 +46,15 @@ package body System.Compare_Array_Unsigned_8 is\n \n    type Big_Words is array (Natural) of Word;\n    type Big_Words_Ptr is access Big_Words;\n+   for Big_Words_Ptr'Storage_Size use 0;\n    --  Array type used to access by words\n \n    type Byte is mod 2 ** 8;\n    --  Used to process operands by bytes\n \n    type Big_Bytes is array (Natural) of Byte;\n    type Big_Bytes_Ptr is access Big_Bytes;\n+   for Big_Bytes_Ptr'Storage_Size use 0;\n    --  Array type used to access by bytes\n \n    function To_Big_Words is new"}, {"sha": "003464399981d0065026bc0935238eaa3a40553d", "filename": "gcc/ada/s-strcom.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1/gcc%2Fada%2Fs-strcom.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1/gcc%2Fada%2Fs-strcom.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-strcom.adb?ref=a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2002-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2002-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -44,13 +44,15 @@ package body System.String_Compare is\n \n    type Big_Words is array (Natural) of Word;\n    type Big_Words_Ptr is access Big_Words;\n+   for Big_Words_Ptr'Storage_Size use 0;\n    --  Array type used to access by words\n \n    type Byte is mod 2 ** 8;\n    --  Used to process operands by bytes\n \n    type Big_Bytes is array (Natural) of Byte;\n    type Big_Bytes_Ptr is access Big_Bytes;\n+   for Big_Bytes_Ptr'Storage_Size use 0;\n    --  Array type used to access by bytes\n \n    function To_Big_Words is new"}, {"sha": "ff6926f145faf25fb4d6df765c6797dc57ec0573", "filename": "gcc/ada/table.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1/gcc%2Fada%2Ftable.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1/gcc%2Fada%2Ftable.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftable.ads?ref=a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -117,6 +117,7 @@ package Table is\n       --  safety is not compromised by this approach.\n \n       type Table_Ptr is access all Big_Table_Type;\n+      for Table_Ptr'Storage_Size use 0;\n       --  The table is actually represented as a pointer to allow reallocation\n \n       Table : aliased Table_Ptr := null;"}, {"sha": "dcaec5f42212761c4ed60894e1aef7fcb9ee4782", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=a1e2130ca1fa141e3dcb1ba4913a8f46d33ab9c1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -47,6 +47,8 @@\n --  2s-complement. If there are any machines for which this is not a correct\n --  assumption, a significant number of changes will be required!\n \n+with System;\n+with Unchecked_Conversion;\n with Unchecked_Deallocation;\n \n package Types is\n@@ -123,6 +125,15 @@ package Types is\n    procedure Free is new Unchecked_Deallocation (String, String_Ptr);\n    --  Procedure for freeing dynamically allocated String values\n \n+   subtype Big_String is String (Positive);\n+   type Big_String_Ptr is access all Big_String;\n+   for Big_String_Ptr'Storage_Size use 0;\n+   --  Virtual type for handling imported big strings\n+\n+   function To_Big_String_Ptr is\n+     new Unchecked_Conversion (System.Address, Big_String_Ptr);\n+   --  Used to obtain Big_String_Ptr values from external addresses\n+\n    subtype Word_Hex_String is String (1 .. 8);\n    --  Type used to represent Word value as 8 hex digits, with lower case\n    --  letters for the alphabetic cases.\n@@ -191,6 +202,7 @@ package Types is\n    --  type Source_Buffer_Ptr, see Osint.Read_Source_File for details.\n \n    type Source_Buffer_Ptr is access all Big_Source_Buffer;\n+   for Source_Buffer_Ptr'Storage_Size use 0;\n    --  Pointer to source buffer. We use virtual origin addressing for source\n    --  buffers, with thin pointers. The pointer points to a virtual instance\n    --  of type Big_Source_Buffer, where the actual type is in fact of type"}]}