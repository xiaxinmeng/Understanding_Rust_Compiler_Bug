{"sha": "a37a0cb303da35ee3b20fd25ad1592d03550ac17", "node_id": "C_kwDOANBUbNoAKGEzN2EwY2IzMDNkYTM1ZWUzYjIwZmQyNWFkMTU5MmQwMzU1MGFjMTc", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-02-03T00:16:44Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-02-03T00:16:44Z"}, "message": "Daily bump.", "tree": {"sha": "ebd8860ed2ed56d147f29de8a5bfb490d5e37e52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebd8860ed2ed56d147f29de8a5bfb490d5e37e52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a37a0cb303da35ee3b20fd25ad1592d03550ac17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a37a0cb303da35ee3b20fd25ad1592d03550ac17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a37a0cb303da35ee3b20fd25ad1592d03550ac17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a37a0cb303da35ee3b20fd25ad1592d03550ac17/comments", "author": null, "committer": null, "parents": [{"sha": "0b8693fc87b1453bdacfa5910091be15da671d2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b8693fc87b1453bdacfa5910091be15da671d2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b8693fc87b1453bdacfa5910091be15da671d2a"}], "stats": {"total": 431, "additions": 430, "deletions": 1}, "files": [{"sha": "43a630f723e1dbfc06a6dfe76cf5834eba42cf24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 204, "deletions": 0, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37a0cb303da35ee3b20fd25ad1592d03550ac17/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37a0cb303da35ee3b20fd25ad1592d03550ac17/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a37a0cb303da35ee3b20fd25ad1592d03550ac17", "patch": "@@ -1,3 +1,207 @@\n+2023-02-02  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* toplev.cc (toplev::main): Only print the version information header\n+\tfrom toplevel main().\n+\n+2023-02-02  Paul-Antoine Arras  <pa@codesourcery.com>\n+\n+\t* config/gcn/gcn-valu.md (cond_<expander><mode>): Add\n+\tcond_{ashl|ashr|lshr}\n+\n+2023-02-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR rtl-optimization/108086\n+\t* rtl-ssa/insns.h (insn_info): Make m_num_defs a full unsigned int.\n+\tAdjust size-related commentary accordingly.\n+\n+2023-02-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR rtl-optimization/108508\n+\t* rtl-ssa/accesses.cc (function_info::split_clobber_group): When\n+\tthe splay tree search gives the first clobber in the second group,\n+\tmake sure that the root of the first clobber group is updated\n+\tcorrectly.  Enter the new clobber group into the definition splay\n+\ttree.\n+\n+2023-02-02  Jin Ma  <jinma@linux.alibaba.com>\n+\n+\t* common/config/riscv/riscv-common.cc (riscv_compute_multilib):\n+\tFix finding best match score.\n+\n+2023-02-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/106746\n+\tPR rtl-optimization/108463\n+\tPR target/108484\n+\t* cselib.cc (cselib_current_insn): Move declaration earlier.\n+\t(cselib_hasher::equal): For debug only locs, temporarily override\n+\tcselib_current_insn to their l->setting_insn for the\n+\trtx_equal_for_cselib_1 call, so that unsuccessful comparisons don't\n+\tpromote some debug locs.\n+\t* sched-deps.cc (sched_analyze_2) <case MEM>: For MEMs in DEBUG_INSNs\n+\twhen using cselib call cselib_lookup_from_insn on the address but\n+\tdon't substitute it.\n+\n+2023-02-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/108625\n+\t* genmatch.cc (expr::gen_transform): Also disallow resimplification\n+\tfrom pushing to lseq with force_leaf.\n+\t(dt_simplify::gen_1): Likewise.\n+\n+2023-02-02  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-run.cc: Include libgomp-gcn.h.\n+\t(struct kernargs): Replace the common content with kernargs_abi.\n+\t(struct heap): Delete.\n+\t(main): Read GCN_STACK_SIZE envvar.\n+\tAllocate space for the device stacks.\n+\tWrite the new kernargs fields.\n+\t* config/gcn/gcn.cc (gcn_option_override): Remove stack_size_opt.\n+\t(default_requested_args): Remove PRIVATE_SEGMENT_BUFFER_ARG and\n+\tPRIVATE_SEGMENT_WAVE_OFFSET_ARG.\n+\t(gcn_addr_space_convert): Mask the QUEUE_PTR_ARG content.\n+\t(gcn_expand_prologue): Move the TARGET_PACKED_WORK_ITEMS to the top.\n+\tSet up the stacks from the values in the kernargs, not private.\n+\t(gcn_expand_builtin_1): Match the stack configuration in the prologue.\n+\t(gcn_hsa_declare_function_name): Turn off the private segment.\n+\t(gcn_conditional_register_usage): Ensure QUEUE_PTR is fixed.\n+\t* config/gcn/gcn.h (FIXED_REGISTERS): Fix the QUEUE_PTR register.\n+\t* config/gcn/gcn.opt (mstack-size): Change the description.\n+\n+2023-02-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\tPR target/108443\n+\t* config/arm/arm.h (VALID_MVE_PRED_MODE): Add V2QI.\n+\t* config/arm/arm.cc (thumb2_legitimate_address_p): Use HImode for\n+\taddressing MVE predicate modes.\n+\t(mve_bool_vec_to_const): Change to represent correct MVE predicate\n+\tformat.\n+\t(arm_hard_regno_mode_ok): Use VALID_MVE_PRED_MODE instead of checking\n+\tmodes.\n+\t(arm_vector_mode_supported_p): Likewise.\n+\t(arm_mode_to_pred_mode): Add V2QI.\n+\t* config/arm/arm-builtins.cc (UNOP_PRED_UNONE_QUALIFIERS): New\n+\tqualifier.\n+\t(UNOP_PRED_PRED_QUALIFIERS): New qualifier\n+\t(BINOP_PRED_UNONE_PRED_QUALIFIERS): New qualifier.\n+\t(v2qi_UP): New macro.\n+\t(v4bi_UP): New macro.\n+\t(v8bi_UP): New macro.\n+\t(v16bi_UP): New macro.\n+\t(arm_expand_builtin_args): Make it able to expand the new predicate\n+\tmodes.\n+\t* config/arm/arm-modes.def (V2QI): New mode.\n+\t* config/arm/arm-simd-builtin-types.def (Pred1x16_t, Pred2x8_t\n+\tPred4x4_t): Remove unused predicate builtin types.\n+\t* config/arm/arm_mve.h (__arm_vctp16q, __arm_vctp32q, __arm_vctp64q,\n+\t__arm_vctp8q, __arm_vpnot, __arm_vctp8q_m, __arm_vctp64q_m,\n+\t__arm_vctp32q_m, __arm_vctp16q_m): Use predicate modes.\n+\t* config/arm/arm_mve_builtins.def (vctp16q, vctp32q, vctp64q, vctp8q,\n+\tvpnot, vctp8q_m, vctp16q_m, vctp32q_m, vctp64q_m): Likewise.\n+\t* config/arm/constraints.md (DB): Check for VALID_MVE_PRED_MODE instead\n+\tof MODE_VECTOR_BOOL.\n+\t* config/arm/iterators.md (MVE_7, MVE_7_HI): Add V2QI\n+\t(MVE_VPRED): Likewise.\n+\t(MVE_vpred): Add V2QI and map upper case predicate modes to lower case.\n+\t(MVE_vctp): New mode attribute.\n+\t(mode1): Remove.\n+\t(VCTPQ): Remove.\n+\t(VCTPQ_M): Remove.\n+\t* config/arm/mve.md (mve_vctp<mode1>qhi): Rename this...\n+\t(mve_vctp<MVE_vctp>q<MVE_vpred>): ... to this. And use new mode\n+\tattributes.\n+\t(mve_vpnothi): Rename this...\n+\t(mve_vpnotv16bi): ... to this.\n+\t(mve_vctp<mode1>q_mhi): Rename this...\n+\t(mve_vctp<MVE_vctp>q_m<MVE_vpred>):... to this.\n+\t(mve_vldrdq_gather_base_z_<supf>v2di,\n+\tmve_vldrdq_gather_offset_z_<supf>v2di,\n+\tmve_vldrdq_gather_shifted_offset_z_<supf>v2di,\n+\tmve_vstrdq_scatter_base_p_<supf>v2di,\n+\tmve_vstrdq_scatter_offset_p_<supf>v2di,\n+\tmve_vstrdq_scatter_offset_p_<supf>v2di_insn,\n+\tmve_vstrdq_scatter_shifted_offset_p_<supf>v2di,\n+\tmve_vstrdq_scatter_shifted_offset_p_<supf>v2di_insn,\n+\tmve_vstrdq_scatter_base_wb_p_<supf>v2di,\n+\tmve_vldrdq_gather_base_wb_z_<supf>v2di,\n+\tmve_vldrdq_gather_base_nowb_z_<supf>v2di,\n+\tmve_vldrdq_gather_base_wb_z_<supf>v2di_insn):  Use V2QI insead of HI for\n+\tpredicates.\n+\t* config/arm/unspecs.md (VCTP8Q, VCTP16Q, VCTP32Q, VCTP64Q): Replace\n+\tthese...\n+\t(VCTP): ... with this.\n+\t(VCTP8Q_M, VCTP16Q_M, VCTP32Q_M, VCTP64Q_M): Replace these...\n+\t(VCTP_M): ... with this.\n+\t* config/arm/vfp.md (*thumb2_movhi_vfp, *thumb2_movhi_fp16): Use\n+\tVALID_MVE_PRED_MODE instead of checking for MODE_VECTOR_BOOL class.\n+\n+2023-02-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\tPR target/107674\n+\t* config/arm/arm.cc (arm_hard_regno_mode_ok): Use new MACRO.\n+\t(arm_modes_tieable_p): Make MVE predicate modes tieable.\n+\t* config/arm/arm.h (VALID_MVE_PRED_MODE):  New define.\n+\t* simplify-rtx.cc (simplify_context::simplify_subreg): Teach\n+\tsimplify_subreg to simplify subregs where the outermode is not scalar.\n+\n+2023-02-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\tPR target/107674\n+\t* config/arm/arm-builtins.cc (arm_simd_builtin_type): Rewrite to use\n+\tnew qualifiers parameter and use unsigned short type for MVE predicate.\n+\t(arm_init_builtin): Call arm_simd_builtin_type with qualifiers\n+\tparameter.\n+\t(arm_init_crypto_builtins): Likewise.\n+\n+2023-02-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR ipa/107300\n+\t* builtins.def (BUILT_IN_UNREACHABLE_TRAP): New builtin.\n+\t* internal-fn.def (TRAP): Remove.\n+\t* internal-fn.cc (expand_TRAP): Remove.\n+\t* tree.cc (build_common_builtin_nodes): Define\n+\tBUILT_IN_UNREACHABLE_TRAP if not yet defined.\n+\t(builtin_decl_unreachable): Use BUILT_IN_UNREACHABLE_TRAP\n+\tinstead of BUILT_IN_TRAP.\n+\t* gimple.cc (gimple_build_builtin_unreachable): Remove\n+\temitting internal function for BUILT_IN_TRAP.\n+\t* asan.cc (maybe_instrument_call): Handle BUILT_IN_UNREACHABLE_TRAP.\n+\t* cgraph.cc (cgraph_edge::verify_corresponds_to_fndecl): Handle\n+\tBUILT_IN_UNREACHABLE_TRAP instead of BUILT_IN_TRAP.\n+\t* ipa-devirt.cc (possible_polymorphic_call_target_p): Handle\n+\tBUILT_IN_UNREACHABLE_TRAP.\n+\t* builtins.cc (expand_builtin, is_inexpensive_builtin): Likewise.\n+\t* tree-cfg.cc (verify_gimple_call,\n+\tpass_warn_function_return::execute): Likewise.\n+\t* attribs.cc (decl_attributes): Don't report exclusions on\n+\tBUILT_IN_UNREACHABLE_TRAP either.\n+\n+2023-02-02  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR tree-optimization/108601\n+\t* tree-vectorizer.h (vect_can_peel_nonlinear_iv_p): Removed.\n+\t* tree-vect-loop.cc\n+\t(vectorizable_nonlinear_induction): Remove\n+\tvect_can_peel_nonlinear_iv_p.\n+\t(vect_can_peel_nonlinear_iv_p): Don't peel\n+\tnonlinear iv(mult or shift) for epilog when vf is not\n+\tconstant and moved the defination to ..\n+\t* tree-vect-loop-manip.cc (vect_can_peel_nonlinear_iv_p):\n+\t.. Here.\n+\n+2023-02-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/108435\n+\t* tree-nested.cc (convert_nonlocal_omp_clauses)\n+\t<case OMP_CLAUSE_LASTPRIVATE>: If info->new_local_var_chain and *seq\n+\tis not a GIMPLE_BIND, wrap the sequence into a new GIMPLE_BIND\n+\tbefore calling declare_vars.\n+\t(convert_nonlocal_omp_clauses) <case OMP_CLAUSE_LINEAR>: Merge\n+\twith the OMP_CLAUSE_LASTPRIVATE handling except for whether\n+\tseq is initialized to &OMP_CLAUSE_LASTPRIVATE_GIMPLE_SEQ (clause)\n+\tor &OMP_CLAUSE_LINEAR_GIMPLE_SEQ (clause).\n+\n 2023-02-01  Tamar Christina  <tamar.christina@arm.com>\n \n \t* common/config/aarch64/aarch64-common.cc"}, {"sha": "12b84840cd1144a4824486acaf038b7802b7d148", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37a0cb303da35ee3b20fd25ad1592d03550ac17/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37a0cb303da35ee3b20fd25ad1592d03550ac17/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=a37a0cb303da35ee3b20fd25ad1592d03550ac17", "patch": "@@ -1 +1 @@\n-20230202\n+20230203"}, {"sha": "a2e2e340172dec62733f071547db72704dfab827", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37a0cb303da35ee3b20fd25ad1592d03550ac17/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37a0cb303da35ee3b20fd25ad1592d03550ac17/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=a37a0cb303da35ee3b20fd25ad1592d03550ac17", "patch": "@@ -1,3 +1,11 @@\n+2023-02-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/108633\n+\t* sm-fd.cc (fd_state_machine::check_for_fd_attrs): Add missing\n+\t\"continue\".\n+\t(fd_state_machine::on_listen): Don't issue phase-mismatch or\n+\ttype-mismatch warnings for the \"invalid\" state.\n+\n 2023-02-01  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/108616"}, {"sha": "f8769e8c53a82a0e679bf6777c2d25c446fd555c", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37a0cb303da35ee3b20fd25ad1592d03550ac17/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37a0cb303da35ee3b20fd25ad1592d03550ac17/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=a37a0cb303da35ee3b20fd25ad1592d03550ac17", "patch": "@@ -1,3 +1,18 @@\n+2023-02-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-typeck.cc (build_binary_op): Allow comparisons between\n+\tpointers and nullptr_t values that are not null pointer constants.\n+\n+2023-02-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-typeck.cc: Include \"realmpfr.h\".\n+\t(constexpr_init_fits_real_type): Do not allow signaling NaN\n+\tconversions to different types with the same mode.  Handle\n+\tconversions from binary to decimal types.\n+\t(check_constexpr_init): Do not disallow real initializers for\n+\tcomplex types.  Do not disallow binary initializers for decimal\n+\tfloating types.\n+\n 2023-01-31  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/107593"}, {"sha": "b70bac0fb39cadfb1ef902b3f3c1ad0c057f05f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37a0cb303da35ee3b20fd25ad1592d03550ac17/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37a0cb303da35ee3b20fd25ad1592d03550ac17/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a37a0cb303da35ee3b20fd25ad1592d03550ac17", "patch": "@@ -1,3 +1,104 @@\n+2023-02-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c2x-constexpr-3.c: Do not expect comparison of nullptr_t\n+\tand pointer to be disallowed.\n+\t* gcc.dg/c2x-nullptr-1.c: Test comparisons of nullptr_t and\n+\tpointers are allowed.\n+\t* gcc.dg/c2x-nullptr-3.c: Do not test that comparisons of\n+\tnullptr_t and pointers are disallowed.\n+\n+2023-02-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c2x-constexpr-1.c: Test constexpr initializers of complex\n+\ttypes with real initializers are allowed.\n+\t* gcc.dg/c2x-constexpr-3.c: Do not test for constexpr initializers\n+\tof complex types with real initializers being disallowed.\n+\t* gcc.dg/c2x-constexpr-8.c: Add tests of signaling NaN complex\n+\tinitializers.\n+\t* gcc.dg/c2x-constexpr-9.c: Add more tests.\n+\t* gcc.dg/dfp/c2x-constexpr-dfp-1.c: Add tests of binary floating\n+\tinitializers for decimal types.\n+\t* gcc.dg/dfp/c2x-constexpr-dfp-2.c: Change tests of binary\n+\tinitializers for decimal types.  Add more tests of decimal\n+\tinitializers for binary types.\n+\n+2023-02-02  Paul-Antoine Arras  <pa@codesourcery.com>\n+\n+\t* gcc.target/gcn/cond_shift_3.c: New test.\n+\t* gcc.target/gcn/cond_shift_3_run.c: New test.\n+\t* gcc.target/gcn/cond_shift_4.c: New test.\n+\t* gcc.target/gcn/cond_shift_4_run.c: New test.\n+\t* gcc.target/gcn/cond_shift_8.c: New test.\n+\t* gcc.target/gcn/cond_shift_8_run.c: New test.\n+\t* gcc.target/gcn/cond_shift_9.c: New test.\n+\t* gcc.target/gcn/cond_shift_9_run.c: New test.\n+\n+2023-02-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR rtl-optimization/108508\n+\t* gcc.target/aarch64/pr108508.c: New test.\n+\n+2023-02-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* g++.dg/tree-ssa/pr107876.C: Add --param case-values-threshold=4.\n+\n+2023-02-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/108633\n+\t* gcc.dg/analyzer/fd-pr108633.c: New test.\n+\n+2023-02-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/deref-before-check-qemu-qtest_rsp_args.c: New test.\n+\n+2023-02-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/106746\n+\tPR rtl-optimization/108463\n+\tPR target/108484\n+\t* gcc.dg/pr108463.c: New test.\n+\n+2023-02-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/108625\n+\t* gcc.dg/pr108625.c: New testcase.\n+\n+2023-02-02  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* gcc.c-torture/execute/pr47237.c: Xfail on amdgcn.\n+\t* gcc.dg/builtin-apply3.c: Xfail for amdgcn.\n+\t* gcc.dg/builtin-apply4.c: Xfail for amdgcn.\n+\t* gcc.dg/torture/stackalign/builtin-apply-3.c: Xfail for amdgcn.\n+\t* gcc.dg/torture/stackalign/builtin-apply-4.c: Xfail for amdgcn.\n+\n+2023-02-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.target/arm/mve/pr108443-run.c: New test.\n+\t* gcc.target/arm/mve/pr108443.c: New test.\n+\n+2023-02-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.target/arm/mve/mve_vpt.c: Change to remove unecessary zero-extend.\n+\n+2023-02-02  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\tPR target/107674\n+\t* gcc.target/arm/mve/mve_vpt.c: New test.\n+\n+2023-02-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR ipa/107300\n+\t* gcc.dg/pr107300.c: New test.\n+\n+2023-02-02  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/aarch64/pr108601.c: New test.\n+\n+2023-02-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/108435\n+\t* gcc.dg/gomp/pr108435.c: New test.\n+\n 2023-02-01  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/108609"}, {"sha": "37d18eb55215ae4fc579f89ffb16bef884f7f2aa", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37a0cb303da35ee3b20fd25ad1592d03550ac17/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37a0cb303da35ee3b20fd25ad1592d03550ac17/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=a37a0cb303da35ee3b20fd25ad1592d03550ac17", "patch": "@@ -1,3 +1,7 @@\n+2023-02-02  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* gomp-constants.h (GOMP_VERSION_GCN): Bump.\n+\n 2022-12-21  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/84471"}, {"sha": "cf55107ddfd051e6520c5d7f0d4e7e046c0b4c85", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37a0cb303da35ee3b20fd25ad1592d03550ac17/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37a0cb303da35ee3b20fd25ad1592d03550ac17/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=a37a0cb303da35ee3b20fd25ad1592d03550ac17", "patch": "@@ -1,3 +1,42 @@\n+2023-02-02  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/libgomp-gcn.h (DEFAULT_GCN_STACK_SIZE): New define.\n+\t(DEFAULT_TEAM_ARENA_SIZE): New define.\n+\t(struct heap): Move to this file.\n+\t(struct kernargs_abi): Likewise.\n+\t* config/gcn/team.c (gomp_gcn_enter_kernel): Use team arena size from\n+\tthe kernargs.\n+\t* libgomp.h: Include libgomp-gcn.h.\n+\t(TEAM_ARENA_SIZE): Remove.\n+\t(team_malloc): Update the error message.\n+\t* plugin/plugin-gcn.c (struct kernargs): Move common content to\n+\tstruct kernargs_abi.\n+\t(struct agent_info): Rename team arenas to ephemeral memories.\n+\t(struct team_arena_list): Rename ....\n+\t(struct ephemeral_memories_list): to this.\n+\t(struct heap): Delete.\n+\t(team_arena_size): New variable.\n+\t(stack_size): New variable.\n+\t(print_kernel_dispatch): Update debug messages.\n+\t(init_environment_variables): Read GCN_TEAM_ARENA_SIZE.\n+\tRead GCN_STACK_SIZE.\n+\t(get_team_arena): Rename ...\n+\t(configure_ephemeral_memories): ... to this, and set up stacks.\n+\t(release_team_arena): Rename ...\n+\t(release_ephemeral_memories): ... to this.\n+\t(destroy_team_arenas): Rename ...\n+\t(destroy_ephemeral_memories): ... to this.\n+\t(create_kernel_dispatch): Add num_threads parameter.\n+\tAdjust for kernargs_abi refactor and ephemeral memories.\n+\t(release_kernel_dispatch): Adjust for ephemeral memories.\n+\t(run_kernel): Pass thread-count to create_kernel_dispatch.\n+\t(GOMP_OFFLOAD_init_device): Adjust for ephemeral memories.\n+\t(GOMP_OFFLOAD_fini_device): Adjust for ephemeral memories.\n+\n+2023-02-02  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* libgomp.texi (OpenMP TR11): Fix item for 'strict' modifier.\n+\n 2023-02-01  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* testsuite/libgomp.fortran/allocate-3.f90: Fix ALIGN"}, {"sha": "26e56e27896b6af15bbcf870a6e686b6df242262", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37a0cb303da35ee3b20fd25ad1592d03550ac17/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37a0cb303da35ee3b20fd25ad1592d03550ac17/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a37a0cb303da35ee3b20fd25ad1592d03550ac17", "patch": "@@ -1,3 +1,61 @@\n+2023-02-02  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* doc/xml/manual/abi.xml: Tweak link to ABIcheck project.\n+\t* doc/html/manual/abi.html: Regenerate.\n+\n+2023-02-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/filesystem/ops-common.h [AVR] (__unsupported): Always use\n+\terrc::function_not_supported instead of errc::not_supported.\n+\n+2023-02-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/sstream  (basic_stringbuf::view): Define for old\n+\tstd::string ABI.\n+\t(basic_istringstream::view, basic_0stringstream::view)\n+\t(basic_stringstream::view): Likewise.\n+\t* testsuite/27_io/basic_istringstream/view/char/1.cc: Remove\n+\t{ dg-require-effective-target cxx11_abi }.\n+\t* testsuite/27_io/basic_istringstream/view/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_ostringstream/view/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostringstream/view/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_stringbuf/view/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_stringbuf/view/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_stringstream/view/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_stringstream/view/wchar_t/1.cc:\n+\tLikewise.\n+\n+2023-02-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/108636\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.31): Export shared_ptr\n+\tconversion operators for directory iterator comparisons with\n+\tstd::default_sentinel_t.\n+\t* include/bits/fs_path.h (path::path(string_view, _Type))\n+\t(path::_Cmpt::_Cmpt(string_view, _Type, size_t)): Move inline\n+\tdefinitions to ...\n+\t* src/c++17/fs_path.cc: ... here.\n+\t* testsuite/27_io/filesystem/path/108636.cc: New test.\n+\n+2023-02-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/variant (variant::operator=): Implement resolution\n+\tof LWG 3585.\n+\t* testsuite/20_util/variant/lwg3585.cc: New test.\n+\n+2023-02-02  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* doc/xml/manual/using_exceptions.xml: Update a www.open-std.org\n+\tlink to https.\n+\t* doc/html/manual/using_exceptions.html: Regenerate.\n+\n+2023-02-02  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* doc/xml/manual/debug.xml: Fix link to online GDB manual.\n+\t* doc/html/manual/debug.html: Regenerate.\n+\n 2023-02-01  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* src/c++11/random.cc (random_device::_M_fini): Do not try to"}]}