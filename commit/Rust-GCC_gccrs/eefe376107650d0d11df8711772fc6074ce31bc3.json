{"sha": "eefe376107650d0d11df8711772fc6074ce31bc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVmZTM3NjEwNzY1MGQwZDExZGY4NzExNzcyZmM2MDc0Y2UzMWJjMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-09-10T14:50:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-09-10T14:50:09Z"}, "message": "[multiple changes]\n\n2013-09-10  Yannick Moy  <moy@adacore.com>\n\n\t* sinfo.ads: Document splitting of pre/post in N_Contract description.\n\n2013-09-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Op_Multiply): If the operation is of the\n\tform X * 2 ** N and it has been marked Is_Power_Of_2_For_Shift,\n\tadd a mod operation if the result type is a binary modular type.\n\n2013-09-10  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Check_Mode_Restriction_In_Enclosing_Context): Add local\n\tvariable Context.  Remove local variable Subp_Id. Start the\n\tcontext traversal from the current subprogram rather than the\n\tcurrent scope. Update the scope traversal and error reporting.\n\n2013-09-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch9.adb (Expand_N_Timed_Entry_Call): New procedure\n\tRewrite_Triggering_Statements, to encapsulate the statements that\n\tfollow the trigger of the entry call. This procedure is needed\n\twhen the trigger is a dispatching call, because the expansion\n\trequires several copies of those statements. The procedure is\n\tmore efficient, and preserves non-local references when the\n\tconstruct is within an instance.\n\nFrom-SVN: r202454", "tree": {"sha": "35d36cff3c15dc159fcf8489814f30cc5dc9604f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35d36cff3c15dc159fcf8489814f30cc5dc9604f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eefe376107650d0d11df8711772fc6074ce31bc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eefe376107650d0d11df8711772fc6074ce31bc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eefe376107650d0d11df8711772fc6074ce31bc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eefe376107650d0d11df8711772fc6074ce31bc3/comments", "author": null, "committer": null, "parents": [{"sha": "31dd3f4bf63e160b62ed3d3f3cb4ac231b9f85bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31dd3f4bf63e160b62ed3d3f3cb4ac231b9f85bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31dd3f4bf63e160b62ed3d3f3cb4ac231b9f85bf"}], "stats": {"total": 180, "additions": 156, "deletions": 24}, "files": [{"sha": "3c9757d69302987d8dccea092088b2527efb8490", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eefe376107650d0d11df8711772fc6074ce31bc3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eefe376107650d0d11df8711772fc6074ce31bc3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=eefe376107650d0d11df8711772fc6074ce31bc3", "patch": "@@ -1,3 +1,30 @@\n+2013-09-10  Yannick Moy  <moy@adacore.com>\n+\n+\t* sinfo.ads: Document splitting of pre/post in N_Contract description.\n+\n+2013-09-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Op_Multiply): If the operation is of the\n+\tform X * 2 ** N and it has been marked Is_Power_Of_2_For_Shift,\n+\tadd a mod operation if the result type is a binary modular type.\n+\n+2013-09-10  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Check_Mode_Restriction_In_Enclosing_Context): Add local\n+\tvariable Context.  Remove local variable Subp_Id. Start the\n+\tcontext traversal from the current subprogram rather than the\n+\tcurrent scope. Update the scope traversal and error reporting.\n+\n+2013-09-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch9.adb (Expand_N_Timed_Entry_Call): New procedure\n+\tRewrite_Triggering_Statements, to encapsulate the statements that\n+\tfollow the trigger of the entry call. This procedure is needed\n+\twhen the trigger is a dispatching call, because the expansion\n+\trequires several copies of those statements. The procedure is\n+\tmore efficient, and preserves non-local references when the\n+\tconstruct is within an instance.\n+\n 2013-09-10  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch12.adb (Analyze_Package_Instantiation): If the"}, {"sha": "ffb49cb80cbf61cce7592ada7a3e3d49fe55e2c7", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 43, "deletions": 10, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eefe376107650d0d11df8711772fc6074ce31bc3/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eefe376107650d0d11df8711772fc6074ce31bc3/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=eefe376107650d0d11df8711772fc6074ce31bc3", "patch": "@@ -8118,23 +8118,56 @@ package body Exp_Ch4 is\n             return;\n \n          else\n-            Rewrite (N,\n-              Make_Op_Shift_Left (Loc,\n-                Left_Opnd  => Lop,\n-                Right_Opnd =>\n-                  Convert_To (Standard_Natural, Right_Opnd (Rop))));\n+            --  If the result is modular, perform the reduction of the result\n+            --  appropriately.\n+\n+            if Is_Modular_Integer_Type (Typ)\n+              and then not Non_Binary_Modulus (Typ)\n+            then\n+               Rewrite (N,\n+                Make_Op_And (Loc,\n+                  Left_Opnd =>\n+                    Make_Op_Shift_Left (Loc,\n+                      Left_Opnd  => Lop,\n+                      Right_Opnd =>\n+                        Convert_To (Standard_Natural, Right_Opnd (Rop))),\n+                  Right_Opnd =>\n+                     Make_Integer_Literal (Loc, Modulus (Typ) - 1)));\n+            else\n+               Rewrite (N,\n+                 Make_Op_Shift_Left (Loc,\n+                   Left_Opnd  => Lop,\n+                   Right_Opnd =>\n+                     Convert_To (Standard_Natural, Right_Opnd (Rop))));\n+            end if;\n+\n             Analyze_And_Resolve (N, Typ);\n             return;\n          end if;\n \n       --  Same processing for the operands the other way round\n \n       elsif Lp2 then\n-         Rewrite (N,\n-           Make_Op_Shift_Left (Loc,\n-             Left_Opnd  => Rop,\n-             Right_Opnd =>\n-               Convert_To (Standard_Natural, Right_Opnd (Lop))));\n+         if Is_Modular_Integer_Type (Typ)\n+           and then not Non_Binary_Modulus (Typ)\n+         then\n+            Rewrite (N,\n+             Make_Op_And (Loc,\n+               Left_Opnd =>\n+                 Make_Op_Shift_Left (Loc,\n+                   Left_Opnd  => Rop,\n+                   Right_Opnd =>\n+                     Convert_To (Standard_Natural, Right_Opnd (Lop))),\n+               Right_Opnd =>\n+                  Make_Integer_Literal (Loc, Modulus (Typ) - 1)));\n+         else\n+            Rewrite (N,\n+              Make_Op_Shift_Left (Loc,\n+                Left_Opnd  => Rop,\n+                Right_Opnd =>\n+                  Convert_To (Standard_Natural, Right_Opnd (Lop))));\n+         end if;\n+\n          Analyze_And_Resolve (N, Typ);\n          return;\n       end if;"}, {"sha": "92ffa82171027db4ac08d67c4cd7f0c329c31645", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 66, "deletions": 6, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eefe376107650d0d11df8711772fc6074ce31bc3/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eefe376107650d0d11df8711772fc6074ce31bc3/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=eefe376107650d0d11df8711772fc6074ce31bc3", "patch": "@@ -11986,9 +11986,11 @@ package body Exp_Ch9 is\n    --    end;\n \n    --  The triggering statement and the sequence of timed statements have not\n-   --  been analyzed yet (see Analyzed_Timed_Entry_Call). They may contain\n-   --  local declarations, and therefore the copies that are made during\n-   --  expansion must be disjoint, as for any other inlining.\n+   --  been analyzed yet (see Analyzed_Timed_Entry_Call), but they may contain\n+   --  global references if within an instantiation. To prevent duplication\n+   --  between various uses of those statements, they are encapsulated into a\n+   --  local procedure which is invoked multiple time when the trigger is a\n+   --  dispatching call.\n \n    procedure Expand_N_Timed_Entry_Call (N : Node_Id) is\n       Loc : constant Source_Ptr := Sloc (N);\n@@ -12031,6 +12033,63 @@ package body Exp_Ch9 is\n       P : Entity_Id;  --  Parameter block\n       S : Entity_Id;  --  Primitive operation slot\n \n+      procedure Rewrite_Triggering_Statements;\n+      --  If the trigger is a dispatching call, the expansion inserts multiple\n+      --  copies of the abortable part. This is both inefficient, and may lead\n+      --  to duplicate definitions that the back-end will reject, when the\n+      --  abortable part includes loops. This procedure rewrites the abortable\n+      --  part into a call to a generated procedure.\n+\n+      -----------------------------------\n+      -- Rewrite_Triggering_Statements --\n+      -----------------------------------\n+\n+      procedure Rewrite_Triggering_Statements is\n+         Proc : constant Entity_Id := Make_Defining_Identifier (Loc, Name_uA);\n+         Decl : Node_Id;\n+         Stat : Node_Id;\n+\n+      begin\n+         Decl :=\n+           Make_Subprogram_Body (Loc,\n+             Specification =>\n+               Make_Procedure_Specification (Loc, Defining_Unit_Name => Proc),\n+             Declarations => New_List,\n+             Handled_Statement_Sequence =>\n+               Make_Handled_Sequence_Of_Statements (Loc, E_Stats));\n+\n+         Append_To (Decls, Decl);\n+\n+         --  Adjust the scope of blocks in the procedure. Needed because blocks\n+         --  generate declarations that are processed before other analysis\n+         --  takes place, and their scope is already set. The backend depends\n+         --  on the scope chain to determine the legality of some anonymous\n+         --  types, and thus we must indicate that the block is within the new\n+         --  procedure.\n+\n+         Stat := First (E_Stats);\n+         while Present (Stat) loop\n+            if Nkind (Stat) = N_Block_Statement then\n+               Insert_Before (Stat,\n+                 Make_Implicit_Label_Declaration (Sloc (Stat),\n+                   Defining_Identifier =>\n+                     Make_Defining_Identifier (\n+                       Sloc (Stat), Chars (Identifier (Stat)))));\n+            end if;\n+\n+            Next (Stat);\n+         end loop;\n+\n+         --  Analyze (Decl);\n+\n+         --  Rewrite abortable part into a call to this procedure.\n+\n+         E_Stats :=\n+           New_List\n+             (Make_Procedure_Call_Statement (Loc,\n+               Name => New_Occurrence_Of (Proc, Loc)));\n+      end Rewrite_Triggering_Statements;\n+\n    begin\n       --  Under the Ravenscar profile, timed entry calls are excluded. An error\n       --  was already reported on spec, so do not attempt to expand the call.\n@@ -12070,8 +12129,9 @@ package body Exp_Ch9 is\n \n       if Is_Disp_Select then\n          Extract_Dispatching_Call (E_Call, Call_Ent, Obj, Actuals, Formals);\n-\n          Decls := New_List;\n+         Rewrite_Triggering_Statements;\n+\n          Stmts := New_List;\n \n          --  Generate:\n@@ -12280,7 +12340,7 @@ package body Exp_Ch9 is\n          --       <timed-statements>\n          --    end if;\n \n-         N_Stats := Copy_Separate_List (E_Stats);\n+         N_Stats := New_Copy_List_Tree (E_Stats);\n \n          Prepend_To (N_Stats,\n            Make_Implicit_If_Statement (N,\n@@ -12320,7 +12380,7 @@ package body Exp_Ch9 is\n          --    <dispatching-call>;\n          --    <triggering-statements>\n \n-         Lim_Typ_Stmts := Copy_Separate_List (E_Stats);\n+         Lim_Typ_Stmts := New_Copy_List_Tree (E_Stats);\n          Prepend_To (Lim_Typ_Stmts, New_Copy_Tree (E_Call));\n \n          --  Generate:"}, {"sha": "0d01b7170ab9e78e486520e88f3dc37276b9556d", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eefe376107650d0d11df8711772fc6074ce31bc3/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eefe376107650d0d11df8711772fc6074ce31bc3/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=eefe376107650d0d11df8711772fc6074ce31bc3", "patch": "@@ -1514,22 +1514,24 @@ package body Sem_Prag is\n            (Item    : Node_Id;\n             Item_Id : Entity_Id)\n          is\n+            Context : Entity_Id;\n             Dummy   : Boolean;\n             Inputs  : Elist_Id := No_Elist;\n             Outputs : Elist_Id := No_Elist;\n-            Subp_Id : Entity_Id;\n \n          begin\n             --  Traverse the scope stack looking for enclosing subprograms\n             --  subject to aspect/pragma Global.\n \n-            Subp_Id := Scope (Current_Scope);\n-            while Present (Subp_Id) and then Subp_Id /= Standard_Standard loop\n-               if Is_Subprogram (Subp_Id)\n-                 and then Has_Aspect (Subp_Id, Aspect_Global)\n+            Context := Scope (Subp_Id);\n+            while Present (Context)\n+              and then Context /= Standard_Standard\n+            loop\n+               if Is_Subprogram (Context)\n+                 and then Has_Aspect (Context, Aspect_Global)\n                then\n                   Collect_Subprogram_Inputs_Outputs\n-                    (Subp_Id      => Subp_Id,\n+                    (Subp_Id      => Context,\n                      Subp_Inputs  => Inputs,\n                      Subp_Outputs => Outputs,\n                      Global_Seen  => Dummy);\n@@ -1545,11 +1547,15 @@ package body Sem_Prag is\n                         Item, Item_Id);\n                      Error_Msg_NE\n                        (\"\\item already appears as input of subprogram &\",\n-                        Item, Subp_Id);\n+                        Item, Context);\n+\n+                     --  Stop the traversal once an error has been detected\n+\n+                     exit;\n                   end if;\n                end if;\n \n-               Subp_Id := Scope (Subp_Id);\n+               Context := Scope (Context);\n             end loop;\n          end Check_Mode_Restriction_In_Enclosing_Context;\n "}, {"sha": "b27e20b04aeb3798bc4a731ae84bc1bf891fc829", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eefe376107650d0d11df8711772fc6074ce31bc3/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eefe376107650d0d11df8711772fc6074ce31bc3/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=eefe376107650d0d11df8711772fc6074ce31bc3", "patch": "@@ -7051,6 +7051,12 @@ package Sinfo is\n       --  The pragmas can either come from source or be the byproduct of aspect\n       --  expansion. The ordering in the list is of LIFO fashion.\n \n+      --  Note that there might be multiple preconditions (resp.\n+      --  postconditions) in this list, either because they come from\n+      --  separate pragmas in the source, or because a Pre (resp. Post) aspect\n+      --  specification has been broken into AND THEN sections. See Split_PPC\n+      --  for details.\n+\n       --  Contract_Test_Cases contains a collection of pragmas that correspond\n       --  to aspects/pragmas Contract_Cases and Test_Case. The ordering in the\n       --  list is of LIFO fashion."}]}