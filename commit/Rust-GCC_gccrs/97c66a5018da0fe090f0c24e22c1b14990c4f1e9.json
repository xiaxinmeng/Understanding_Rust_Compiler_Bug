{"sha": "97c66a5018da0fe090f0c24e22c1b14990c4f1e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdjNjZhNTAxOGRhMGZlMDkwZjBjMjRlMjJjMWIxNDk5MGM0ZjFlOQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-11-26T15:16:32Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-11-26T15:16:32Z"}, "message": "Makefile.am (EXTRA_LONG_DOUBLE_yes): Remove cabsl.c\n\n\t* libmath/Makefile.am (EXTRA_LONG_DOUBLE_yes): Remove cabsl.c\n\t* libmath/Makefile.in: Regenerate.\n\t* libmath/cabs.c: Remove.\n\t* libmath/cabsf.c: Likewise.\n\t* libmath/cabsl.c: Likewise.\n\t* libmath/complex-stub.h: Remove declarations for cabs*.\n\n\t* acinclude.m4: Remove check for cabs*.\n\t* aclocal.m4: Regenerate.\n\n\t* Makefile.in: Regenerate.\n\nFrom-SVN: r37758", "tree": {"sha": "9a29a43895d06b5cbfb48aa115081cd0e3e3ea90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a29a43895d06b5cbfb48aa115081cd0e3e3ea90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97c66a5018da0fe090f0c24e22c1b14990c4f1e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97c66a5018da0fe090f0c24e22c1b14990c4f1e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97c66a5018da0fe090f0c24e22c1b14990c4f1e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97c66a5018da0fe090f0c24e22c1b14990c4f1e9/comments", "author": null, "committer": null, "parents": [{"sha": "72bd1f9e60ca670b9199ef29ea81a45a0b6953e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72bd1f9e60ca670b9199ef29ea81a45a0b6953e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72bd1f9e60ca670b9199ef29ea81a45a0b6953e7"}], "stats": {"total": 228, "additions": 85, "deletions": 143}, "files": [{"sha": "649f078484d03c4f3d41f54014ef307d2cbac5e3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c66a5018da0fe090f0c24e22c1b14990c4f1e9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c66a5018da0fe090f0c24e22c1b14990c4f1e9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=97c66a5018da0fe090f0c24e22c1b14990c4f1e9", "patch": "@@ -1,3 +1,17 @@\n+2000-11-26  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* libmath/Makefile.am (EXTRA_LONG_DOUBLE_yes): Remove cabsl.c \n+\t* libmath/Makefile.in: Regenerate.\n+\t* libmath/cabs.c: Remove.\n+\t* libmath/cabsf.c: Likewise.\n+\t* libmath/cabsl.c: Likewise.\n+\t* libmath/complex-stub.h: Remove declarations for cabs*.\n+\n+\t* acinclude.m4: Remove check for cabs*. \n+\t* aclocal.m4: Regenerate.\n+\n+\t* Makefile.in: Regenerate.\n+\n 2000-11-26  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* tests_flags.in: New file. Split out of ..."}, {"sha": "0b7efe3df8b8a81d207684873b8f49600a190f62", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c66a5018da0fe090f0c24e22c1b14990c4f1e9/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c66a5018da0fe090f0c24e22c1b14990c4f1e9/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=97c66a5018da0fe090f0c24e22c1b14990c4f1e9", "patch": "@@ -135,15 +135,56 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"EXPECT=$(EXPECT)\" \t\"RUNTEST=$(RUNTEST)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"CC=$(CC)\" \t\"CXX=$(CXX)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n+AM_MAKEFLAGS = \\\n+\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n+\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n+\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n+\t\"CFLAGS=$(CFLAGS)\" \\\n+\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n+\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n+\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n+\t\"INSTALL=$(INSTALL)\" \\\n+\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n+\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n+\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n+\t\"LDFLAGS=$(LDFLAGS)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\"MAKE=$(MAKE)\" \\\n+\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n+\t\"SHELL=$(SHELL)\" \\\n+\t\"EXPECT=$(EXPECT)\" \\\n+\t\"RUNTEST=$(RUNTEST)\" \\\n+\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n+\t\"exec_prefix=$(exec_prefix)\" \\\n+\t\"infodir=$(infodir)\" \\\n+\t\"libdir=$(libdir)\" \\\n+\t\"includedir=$(includedir)\" \\\n+\t\"prefix=$(prefix)\" \\\n+\t\"tooldir=$(tooldir)\" \\\n+\t\"AR=$(AR)\" \\\n+\t\"AS=$(AS)\" \\\n+\t\"CC=$(CC)\" \\\n+\t\"CXX=$(CXX)\" \\\n+\t\"LD=$(LD)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"RANLIB=$(RANLIB)\" \\\n+\t\"NM=$(NM)\" \\\n+\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n+\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n+\t\"DESTDIR=$(DESTDIR)\" \\\n+\t\"WERROR=$(WERROR)\" \n \n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = config.h\n-CONFIG_CLEAN_FILES =  mkcheck\n+CONFIG_CLEAN_FILES =  tests_flags mkcheck\n DIST_COMMON =  README ./stamp-h.in ChangeLog Makefile.am Makefile.in \\\n acconfig.h acinclude.m4 aclocal.m4 config.h.in configure configure.in \\\n-mkcheck.in\n+mkcheck.in tests_flags.in\n \n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n@@ -194,6 +235,8 @@ distclean-hdr:\n \t-rm -f config.h\n \n maintainer-clean-hdr:\n+tests_flags: $(top_builddir)/config.status tests_flags.in\n+\tcd $(top_builddir) && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status\n mkcheck: $(top_builddir)/config.status mkcheck.in\n \tcd $(top_builddir) && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status\n "}, {"sha": "058074d4acd108e2729b95ad123bf78f30e8edbe", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c66a5018da0fe090f0c24e22c1b14990c4f1e9/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c66a5018da0fe090f0c24e22c1b14990c4f1e9/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=97c66a5018da0fe090f0c24e22c1b14990c4f1e9", "patch": "@@ -737,7 +737,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   dnl Check for complex versions of math functions of platform.\n   AC_CHECK_HEADERS([complex.h])\n   AC_CHECK_LIB(m, main)\n-  AC_REPLACE_MATHFUNCS(cabs cabsf ccos ccosf ccosh ccoshf cexp cexpf \\\n+  AC_REPLACE_MATHFUNCS(ccos ccosf ccosh ccoshf cexp cexpf \\\n   c_log c_logf clog10 clog10f cpow cpowf csin csinf csinh csinhf csqrt \\\n   csqrtf ctan ctanf ctanh ctanhf carg cargf nan hypot hypotf atan2f expf \\\n   copysignf)\n@@ -750,7 +750,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   if test x$ac_cv_func_atan2l = x\"yes\" \\\n      && test x$ac_cv_func_copysignl = x\"yes\"; then\n     USE_COMPLEX_LONG_DOUBLE=yes\n-    AC_REPLACE_MATHFUNCS(cabsl ccoshl ccosl cexpl cpowl csinhl csinl \\\n+    AC_REPLACE_MATHFUNCS(ccoshl ccosl cexpl cpowl csinhl csinl \\\n     csqrtl ctanhl ctanl cargl hypotl signbitl c_logl clog10l)\n   fi\n "}, {"sha": "f7ff969b6464590f620c55b5616755a3aa2c196b", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c66a5018da0fe090f0c24e22c1b14990c4f1e9/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c66a5018da0fe090f0c24e22c1b14990c4f1e9/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=97c66a5018da0fe090f0c24e22c1b14990c4f1e9", "patch": "@@ -749,7 +749,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   dnl Check for complex versions of math functions of platform.\n   AC_CHECK_HEADERS([complex.h])\n   AC_CHECK_LIB(m, main)\n-  AC_REPLACE_MATHFUNCS(cabs cabsf ccos ccosf ccosh ccoshf cexp cexpf \\\n+  AC_REPLACE_MATHFUNCS(ccos ccosf ccosh ccoshf cexp cexpf \\\n   c_log c_logf clog10 clog10f cpow cpowf csin csinf csinh csinhf csqrt \\\n   csqrtf ctan ctanf ctanh ctanhf carg cargf nan hypot hypotf atan2f expf \\\n   copysignf)\n@@ -762,7 +762,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   if test x$ac_cv_func_atan2l = x\"yes\" \\\n      && test x$ac_cv_func_copysignl = x\"yes\"; then\n     USE_COMPLEX_LONG_DOUBLE=yes\n-    AC_REPLACE_MATHFUNCS(cabsl ccoshl ccosl cexpl cpowl csinhl csinl \\\n+    AC_REPLACE_MATHFUNCS(ccoshl ccosl cexpl cpowl csinhl csinl \\\n     csqrtl ctanhl ctanl cargl hypotl signbitl c_logl clog10l)\n   fi\n "}, {"sha": "2ad8f87a907e0008fd83f0b358e4c768a644930f", "filename": "libstdc++-v3/libmath/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c66a5018da0fe090f0c24e22c1b14990c4f1e9/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c66a5018da0fe090f0c24e22c1b14990c4f1e9/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am?ref=97c66a5018da0fe090f0c24e22c1b14990c4f1e9", "patch": "@@ -28,7 +28,7 @@ noinst_LTLIBRARIES = libmath.la\n EXTRA_LONG_DOUBLE_yes = \\\n \tccosl.c cexpl.c c_logl.c clog10l.c cpowl.c csinhl.c \\\n \tcsqrtl.c ctanhl.c ctanl.c cargl.c hypotl.c \\\n-\tsignbitl.c cabsl.c \n+\tsignbitl.c\n \n EXTRA_DIST = \\\n \tccos.c ccosf.c ccosh.c ccoshf.c ccoshl.c \\"}, {"sha": "3c9ac41f12f239fffd8d344d917f2fe679101bd6", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c66a5018da0fe090f0c24e22c1b14990c4f1e9/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c66a5018da0fe090f0c24e22c1b14990c4f1e9/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=97c66a5018da0fe090f0c24e22c1b14990c4f1e9", "patch": "@@ -113,18 +113,31 @@ AUTOMAKE_OPTIONS = 1.3 cygnus\n \n noinst_LTLIBRARIES = libmath.la\n \n-EXTRA_LONG_DOUBLE_yes =  \tccosl.c cexpl.c c_logl.c clog10l.c cpowl.c csinhl.c \tcsqrtl.c ctanhl.c ctanl.c cargl.c hypotl.c \tsignbitl.c cabsl.c \n+EXTRA_LONG_DOUBLE_yes = \\\n+\tccosl.c cexpl.c c_logl.c clog10l.c cpowl.c csinhl.c \\\n+\tcsqrtl.c ctanhl.c ctanl.c cargl.c hypotl.c \\\n+\tsignbitl.c\n \n \n-EXTRA_DIST =  \tccos.c ccosf.c ccosh.c ccoshf.c ccoshl.c \tcexp.c cexpf.c c_log.c c_logf.c  clog10.c clog10f.c \tcpow.c cpowf.c csin.c csinf.c csinh.c csinhf.c \tcsinl.c csqrt.c csqrtf.c  ctan.c ctanf.c ctanh.c \tctanhf.c  carg.c cargf.c hypot.c hypotf.c \tatan2f.c expf.c \t$(EXTRA_LONG_DOUBLE_yes) \n+EXTRA_DIST = \\\n+\tccos.c ccosf.c ccosh.c ccoshf.c ccoshl.c \\\n+\tcexp.c cexpf.c c_log.c c_logf.c  clog10.c clog10f.c \\\n+\tcpow.c cpowf.c csin.c csinf.c csinh.c csinhf.c \\\n+\tcsinl.c csqrt.c csqrtf.c  ctan.c ctanf.c ctanh.c \\\n+\tctanhf.c  carg.c cargf.c hypot.c hypotf.c\\\n+\tatan2f.c expf.c \\\n+\t$(EXTRA_LONG_DOUBLE_yes) \n \n \n-libmath_la_LIBADD =  \t@LIBMATHOBJS@ \t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n+libmath_la_LIBADD = \\\n+\t@LIBMATHOBJS@ \\\n+\t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n \n \n libmath_la_DEPENDENCIES = $(libmath_la_LIBADD)\n \n-libmath_la_SOURCES =  \tsignbit.c signbitf.c\n+libmath_la_SOURCES = \\\n+\tsignbit.c signbitf.c\n \n \n LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n@@ -138,7 +151,9 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES =  \t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \t$(TOPLEVEL_INCLUDES) \n+INCLUDES = \\\n+\t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \\\n+\t$(TOPLEVEL_INCLUDES) \n \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h"}, {"sha": "f2f41e2bd1bad1172c49e9ddc85a91f5713e265e", "filename": "libstdc++-v3/libmath/cabs.c", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72bd1f9e60ca670b9199ef29ea81a45a0b6953e7/libstdc%2B%2B-v3%2Flibmath%2Fcabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72bd1f9e60ca670b9199ef29ea81a45a0b6953e7/libstdc%2B%2B-v3%2Flibmath%2Fcabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcabs.c?ref=72bd1f9e60ca670b9199ef29ea81a45a0b6953e7", "patch": "@@ -1,38 +0,0 @@\n-/* Return the complex absolute value of double complex value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-double\n-cabs (__complex__ double z)\n-{\n-  return hypot (__real__ z, __imag__ z);\n-}"}, {"sha": "53358cfc568dbc6327ddcf018f6a36dafa13e61d", "filename": "libstdc++-v3/libmath/cabsf.c", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72bd1f9e60ca670b9199ef29ea81a45a0b6953e7/libstdc%2B%2B-v3%2Flibmath%2Fcabsf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72bd1f9e60ca670b9199ef29ea81a45a0b6953e7/libstdc%2B%2B-v3%2Flibmath%2Fcabsf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcabsf.c?ref=72bd1f9e60ca670b9199ef29ea81a45a0b6953e7", "patch": "@@ -1,38 +0,0 @@\n-/* Return the complex absolute value of double complex value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-float\n-cabsf (__complex__ float z)\n-{\n-  return hypotf (__real__ z, __imag__ z);\n-}"}, {"sha": "4b36a3afcbb1be2d19d705129eb16dcadb98f890", "filename": "libstdc++-v3/libmath/cabsl.c", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72bd1f9e60ca670b9199ef29ea81a45a0b6953e7/libstdc%2B%2B-v3%2Flibmath%2Fcabsl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72bd1f9e60ca670b9199ef29ea81a45a0b6953e7/libstdc%2B%2B-v3%2Flibmath%2Fcabsl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcabsl.c?ref=72bd1f9e60ca670b9199ef29ea81a45a0b6953e7", "patch": "@@ -1,42 +0,0 @@\n-/* Return the complex absolute value of double complex value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-/* Thanks to SGI we have to trick here.  At least Irix 6.2 provides hypotl,\n-   but it has a wrong prototype.  Grrr.  */\n-extern long double local_hypotl (long double, long double) asm (\"hypotl\");\n-\n-\n-long double\n-__mycabsl (__complex__ long double z)\n-{\n-  return local_hypotl (__real__ z, __imag__ z);\n-}"}, {"sha": "bd3ebe62197857de8fdf5966ad4c5c575a725302", "filename": "libstdc++-v3/libmath/complex-stub.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c66a5018da0fe090f0c24e22c1b14990c4f1e9/libstdc%2B%2B-v3%2Flibmath%2Fcomplex-stub.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c66a5018da0fe090f0c24e22c1b14990c4f1e9/libstdc%2B%2B-v3%2Flibmath%2Fcomplex-stub.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcomplex-stub.h?ref=97c66a5018da0fe090f0c24e22c1b14990c4f1e9", "patch": "@@ -78,17 +78,5 @@ double carg (__complex__ double x);\n float cargf (__complex__ float x);\n long double cargl (__complex__ long double x);\n \n-/* Some systems (like IRIX 6.5) already define these functions in \n-   <math.h>.  */\n-#ifndef _GLIBCPP_HAVE_CABS\n-double cabs (__complex__ double x);\n-#endif /* defined(_GLIBCPP_HAVE_CABS) */\n-#ifndef _GLIBCPP_HAVE_CABSF\n-float cabsf (__complex__ float x);\n-#endif /* defined(_GLIBCPP_HAVE_CABSF) */\n-#ifndef _GLIBCPP_HAVE_CABSL\n-long double cabsl (__complex__ long double x);\n-#endif /* defined(_GLIBCPP_HAVE_CABSL) */\n-\n #endif\n "}]}