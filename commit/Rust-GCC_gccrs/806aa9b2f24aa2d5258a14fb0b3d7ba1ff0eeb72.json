{"sha": "806aa9b2f24aa2d5258a14fb0b3d7ba1ff0eeb72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA2YWE5YjJmMjRhYTJkNTI1OGExNGZiMGIzZDdiYTFmZjBlZWI3Mg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2017-10-12T22:22:15Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2017-10-12T22:22:15Z"}, "message": "Clobbers and Scratch Registers\n\n\t* doc/extend.texi (Extended Asm <Clobbers>): Rename to\n\t\"Clobbers and Scratch Registers\".  Add paragraph on\n\talternative to clobbers for scratch registers and OpenBLAS\n\texample.\n\nFrom-SVN: r253701", "tree": {"sha": "10deb112fcde204b48e2c6bfc9ec9831e1c02afb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10deb112fcde204b48e2c6bfc9ec9831e1c02afb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/806aa9b2f24aa2d5258a14fb0b3d7ba1ff0eeb72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/806aa9b2f24aa2d5258a14fb0b3d7ba1ff0eeb72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/806aa9b2f24aa2d5258a14fb0b3d7ba1ff0eeb72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/806aa9b2f24aa2d5258a14fb0b3d7ba1ff0eeb72/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7ff5eac3d885b15c52223dcd8f63a7b9b832d1ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ff5eac3d885b15c52223dcd8f63a7b9b832d1ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ff5eac3d885b15c52223dcd8f63a7b9b832d1ba"}], "stats": {"total": 88, "additions": 83, "deletions": 5}, "files": [{"sha": "a83c95aec8ead200e3fa8e13abfdfcbaa904c7bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806aa9b2f24aa2d5258a14fb0b3d7ba1ff0eeb72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806aa9b2f24aa2d5258a14fb0b3d7ba1ff0eeb72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=806aa9b2f24aa2d5258a14fb0b3d7ba1ff0eeb72", "patch": "@@ -1,3 +1,10 @@\n+2017-10-13  Alan Modra  <amodra@gmail.com>\n+\n+\t* doc/extend.texi (Extended Asm <Clobbers>): Rename to\n+\t\"Clobbers and Scratch Registers\".  Add paragraph on\n+\talternative to clobbers for scratch registers and OpenBLAS\n+\texample.\n+\n 2017-10-13  Alan Modra  <amodra@gmail.com>\n \n \t* doc/extend.texi (Clobbers): Correct vax example.  Delete old"}, {"sha": "d9b7a540cbdc22f670b2aea642be92381eebabdf", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 76, "deletions": 5, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806aa9b2f24aa2d5258a14fb0b3d7ba1ff0eeb72/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806aa9b2f24aa2d5258a14fb0b3d7ba1ff0eeb72/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=806aa9b2f24aa2d5258a14fb0b3d7ba1ff0eeb72", "patch": "@@ -8122,7 +8122,7 @@ A comma-separated list of C expressions read by the instructions in the\n @item Clobbers\n A comma-separated list of registers or other values changed by the \n @var{AssemblerTemplate}, beyond those listed as outputs.\n-An empty list is permitted.  @xref{Clobbers}.\n+An empty list is permitted.  @xref{Clobbers and Scratch Registers}.\n \n @item GotoLabels\n When you are using the @code{goto} form of @code{asm}, this section contains \n@@ -8482,7 +8482,7 @@ The enclosing parentheses are a required part of the syntax.\n \n When the compiler selects the registers to use to \n represent the output operands, it does not use any of the clobbered registers \n-(@pxref{Clobbers}).\n+(@pxref{Clobbers and Scratch Registers}).\n \n Output operand expressions must be lvalues. The compiler cannot check whether \n the operands have data types that are reasonable for the instruction being \n@@ -8718,7 +8718,8 @@ as input.  The enclosing parentheses are a required part of the syntax.\n @end table\n \n When the compiler selects the registers to use to represent the input \n-operands, it does not use any of the clobbered registers (@pxref{Clobbers}).\n+operands, it does not use any of the clobbered registers\n+(@pxref{Clobbers and Scratch Registers}).\n \n If there are no output operands but there are input operands, place two \n consecutive colons where the output operands would go:\n@@ -8769,9 +8770,10 @@ asm (\"cmoveq %1, %2, %[result]\"\n    : \"r\" (test), \"r\" (new), \"[result]\" (old));\n @end example\n \n-@anchor{Clobbers}\n-@subsubsection Clobbers\n+@anchor{Clobbers and Scratch Registers}\n+@subsubsection Clobbers and Scratch Registers\n @cindex @code{asm} clobbers\n+@cindex @code{asm} scratch registers\n \n While the compiler is aware of changes to entries listed in the output \n operands, the inline @code{asm} code may modify more than just the outputs. For \n@@ -8900,6 +8902,75 @@ dscal (size_t n, double *x, double alpha)\n @}\n @end smallexample\n \n+Rather than allocating fixed registers via clobbers to provide scratch\n+registers for an @code{asm} statement, an alternative is to define a\n+variable and make it an early-clobber output as with @code{a2} and\n+@code{a3} in the example below.  This gives the compiler register\n+allocator more freedom.  You can also define a variable and make it an\n+output tied to an input as with @code{a0} and @code{a1}, tied\n+respectively to @code{ap} and @code{lda}.  Of course, with tied\n+outputs your @code{asm} can't use the input value after modifying the\n+output register since they are one and the same register.  What's\n+more, if you omit the early-clobber on the output, it is possible that\n+GCC might allocate the same register to another of the inputs if GCC\n+could prove they had the same value on entry to the @code{asm}.  This\n+is why @code{a1} has an early-clobber.  Its tied input, @code{lda}\n+might conceivably be known to have the value 16 and without an\n+early-clobber share the same register as @code{%11}.  On the other\n+hand, @code{ap} can't be the same as any of the other inputs, so an\n+early-clobber on @code{a0} is not needed.  It is also not desirable in\n+this case.  An early-clobber on @code{a0} would cause GCC to allocate\n+a separate register for the @code{\"m\" (*(const double (*)[]) ap)}\n+input.  Note that tying an input to an output is the way to set up an\n+initialized temporary register modified by an @code{asm} statement.\n+An input not tied to an output is assumed by GCC to be unchanged, for\n+example @code{\"b\" (16)} below sets up @code{%11} to 16, and GCC might\n+use that register in following code if the value 16 happened to be\n+needed.  You can even use a normal @code{asm} output for a scratch if\n+all inputs that might share the same register are consumed before the\n+scratch is used.  The VSX registers clobbered by the @code{asm}\n+statement could have used this technique except for GCC's limit on the\n+number of @code{asm} parameters.\n+\n+@smallexample\n+static void\n+dgemv_kernel_4x4 (long n, const double *ap, long lda,\n+                  const double *x, double *y, double alpha)\n+@{\n+  double *a0;\n+  double *a1;\n+  double *a2;\n+  double *a3;\n+\n+  __asm__\n+    (\n+     /* lots of asm here */\n+     \"#n=%1 ap=%8=%12 lda=%13 x=%7=%10 y=%0=%2 alpha=%9 o16=%11\\n\"\n+     \"#a0=%3 a1=%4 a2=%5 a3=%6\"\n+     :\n+       \"+m\" (*(double (*)[n]) y),\n+       \"+&r\" (n),\t// 1\n+       \"+b\" (y),\t// 2\n+       \"=b\" (a0),\t// 3\n+       \"=&b\" (a1),\t// 4\n+       \"=&b\" (a2),\t// 5\n+       \"=&b\" (a3)\t// 6\n+     :\n+       \"m\" (*(const double (*)[n]) x),\n+       \"m\" (*(const double (*)[]) ap),\n+       \"d\" (alpha),\t// 9\n+       \"r\" (x),\t\t// 10\n+       \"b\" (16),\t// 11\n+       \"3\" (ap),\t// 12\n+       \"4\" (lda)\t// 13\n+     :\n+       \"cr0\",\n+       \"vs32\",\"vs33\",\"vs34\",\"vs35\",\"vs36\",\"vs37\",\n+       \"vs40\",\"vs41\",\"vs42\",\"vs43\",\"vs44\",\"vs45\",\"vs46\",\"vs47\"\n+     );\n+@}\n+@end smallexample\n+\n @anchor{GotoLabels}\n @subsubsection Goto Labels\n @cindex @code{asm} goto labels"}]}