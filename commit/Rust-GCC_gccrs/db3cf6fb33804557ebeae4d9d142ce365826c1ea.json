{"sha": "db3cf6fb33804557ebeae4d9d142ce365826c1ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIzY2Y2ZmIzMzgwNDU1N2ViZWFlNGQ5ZDE0MmNlMzY1ODI2YzFlYQ==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-05-06T23:05:54Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-05-06T23:05:54Z"}, "message": "reformat a little to match GNU coding standards.\n\nFrom-SVN: r14024", "tree": {"sha": "5ce87329cf1055017d0bd705ecac06be33f23764", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ce87329cf1055017d0bd705ecac06be33f23764"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db3cf6fb33804557ebeae4d9d142ce365826c1ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db3cf6fb33804557ebeae4d9d142ce365826c1ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db3cf6fb33804557ebeae4d9d142ce365826c1ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db3cf6fb33804557ebeae4d9d142ce365826c1ea/comments", "author": null, "committer": null, "parents": [{"sha": "e3da301da35470986dd215f50086952bdb965c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3da301da35470986dd215f50086952bdb965c13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3da301da35470986dd215f50086952bdb965c13"}], "stats": {"total": 244, "additions": 122, "deletions": 122}, "files": [{"sha": "d4ed6a4026920ecb317573c05c36f9f61b49c75a", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=db3cf6fb33804557ebeae4d9d142ce365826c1ea", "patch": "@@ -7515,9 +7515,9 @@ gen_subprogram_die (decl, context_die)\n       for (parm = arg_decls; parm; parm = TREE_CHAIN (parm))\n \tif (TREE_CODE (parm) == PARM_DECL)\n \t  {\n-\t    if (DECL_NAME (parm) &&\n-\t\t!strcmp (IDENTIFIER_POINTER (DECL_NAME (parm)),\n-\t\t\t \"__builtin_va_alist\"))\n+\t    if (DECL_NAME (parm)\n+\t\t&& !strcmp (IDENTIFIER_POINTER (DECL_NAME (parm)),\n+\t\t\t    \"__builtin_va_alist\"))\n \t      gen_unspecified_parameters_die (parm, subr_die);\n \t    else\n \t      gen_decl_die (parm, subr_die);"}, {"sha": "291e8d4aeeab1d8ecc15f4b435417be1b8be2495", "filename": "gcc/expmed.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=db3cf6fb33804557ebeae4d9d142ce365826c1ea", "patch": "@@ -920,8 +920,8 @@ extract_bit_field (str_rtx, bitsize, bitnum, unsignedp,\n   /* If OP0 is a register, BITPOS must count within a word.\n      But as we have it, it counts within whatever size OP0 now has.\n      On a bigendian machine, these are not the same, so convert.  */\n-  if (BYTES_BIG_ENDIAN &&\n-      GET_CODE (op0) != MEM\n+  if (BYTES_BIG_ENDIAN\n+      && GET_CODE (op0) != MEM\n       && unit > GET_MODE_BITSIZE (GET_MODE (op0)))\n     bitpos += unit - GET_MODE_BITSIZE (GET_MODE (op0));\n \n@@ -2875,11 +2875,11 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \t\t    pre_shift = floor_log2 (d);\n \t\t    if (rem_flag)\n \t\t      {\n-\t\t\tremainder =\n-\t\t\t  expand_binop (compute_mode, and_optab, op0,\n-\t\t\t\t\tGEN_INT (((HOST_WIDE_INT) 1 << pre_shift) - 1),\n-\t\t\t\t\tremainder, 1,\n-\t\t\t\t\tOPTAB_LIB_WIDEN);\n+\t\t\tremainder\n+\t\t\t  = expand_binop (compute_mode, and_optab, op0,\n+\t\t\t\t\t  GEN_INT (((HOST_WIDE_INT) 1 << pre_shift) - 1),\n+\t\t\t\t\t  remainder, 1,\n+\t\t\t\t\t  OPTAB_LIB_WIDEN);\n \t\t\tif (remainder)\n \t\t\t  return gen_lowpart (mode, remainder);\n \t\t      }\n@@ -2940,10 +2940,10 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \t\t\t    t4 = force_operand (gen_rtx (PLUS, compute_mode,\n \t\t\t\t\t\t\t t1, t3),\n \t\t\t\t\t\tNULL_RTX);\n-\t\t\t    quotient =\n-\t\t\t      expand_shift (RSHIFT_EXPR, compute_mode, t4,\n-\t\t\t\t\t    build_int_2 (post_shift - 1, 0),\n-\t\t\t\t\t    tquotient, 1);\n+\t\t\t    quotient\n+\t\t\t      = expand_shift (RSHIFT_EXPR, compute_mode, t4,\n+\t\t\t\t\t      build_int_2 (post_shift - 1, 0),\n+\t\t\t\t\t      tquotient, 1);\n \t\t\t  }\n \t\t\telse\n \t\t\t  {\n@@ -2959,10 +2959,10 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \t\t\t\t\t\t       max_cost - extra_cost);\n \t\t\t    if (t2 == 0)\n \t\t\t      goto fail1;\n-\t\t\t    quotient =\n-\t\t\t      expand_shift (RSHIFT_EXPR, compute_mode, t2,\n-\t\t\t\t\t    build_int_2 (post_shift, 0),\n-\t\t\t\t\t    tquotient, 1);\n+\t\t\t    quotient\n+\t\t\t      = expand_shift (RSHIFT_EXPR, compute_mode, t2,\n+\t\t\t\t\t      build_int_2 (post_shift, 0),\n+\t\t\t\t\t      tquotient, 1);\n \t\t\t  }\n \t\t      }\n \t\t  }"}, {"sha": "1dc79b67d38c6ca37138a9c85595cd6c85aae4df", "filename": "gcc/expr.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=db3cf6fb33804557ebeae4d9d142ce365826c1ea", "patch": "@@ -263,9 +263,9 @@ bc_init_mode_to_opcode_maps ()\n   int mode;\n \n   for (mode = 0; mode < (int) MAX_MACHINE_MODE; mode++)\n-    mode_to_const_map[mode] =\n-      mode_to_load_map[mode] =\n-\tmode_to_store_map[mode] = neverneverland;\n+    mode_to_const_map[mode]\n+      = mode_to_load_map[mode]\n+      = mode_to_store_map[mode] = neverneverland;\n       \n #define DEF_MODEMAP(SYM, CODE, UCODE, CONST, LOAD, STORE) \\\n   mode_to_const_map[(int) SYM] = CONST; \\\n@@ -1522,12 +1522,12 @@ move_by_pieces_1 (genfun, mode, data)\n \t\t\t\t\t\t\tdata->offset))));\n       MEM_IN_STRUCT_P (to1) = data->to_struct;\n \n-      from1 =\n-\t(data->autinc_from\n-\t ? gen_rtx (MEM, mode, data->from_addr)\n-\t : copy_rtx (change_address (data->from, mode,\n-\t\t\t\t     plus_constant (data->from_addr,\n-\t\t\t\t\t\t    data->offset))));\n+      from1\n+\t= (data->autinc_from\n+\t   ? gen_rtx (MEM, mode, data->from_addr)\n+\t   : copy_rtx (change_address (data->from, mode,\n+\t\t\t\t       plus_constant (data->from_addr,\n+\t\t\t\t\t\t      data->offset))));\n       MEM_IN_STRUCT_P (from1) = data->from_struct;\n \n #ifdef HAVE_PRE_DECREMENT"}, {"sha": "9096d544718ccb0222e128efc4bcd1b321fdeffc", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=db3cf6fb33804557ebeae4d9d142ce365826c1ea", "patch": "@@ -1011,8 +1011,8 @@ final_start_function (first, file, optimize)\n      of the function name.  */\n   if (profile_block_flag)\n     {\n-      bb_func_label_num =\n-\tadd_bb_string ((*decl_printable_name) (current_function_decl, 2), FALSE);\n+      bb_func_label_num\n+\t= add_bb_string ((*decl_printable_name) (current_function_decl, 2), FALSE);\n     }\n }\n "}, {"sha": "24006513f641ca0f00076042f1a9ca82732791ae", "filename": "gcc/fix-header.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=db3cf6fb33804557ebeae4d9d142ce365826c1ea", "patch": "@@ -632,8 +632,8 @@ read_scan_file (in_fname, argc, argv)\n       && (fn = lookup_std_proto (\"_filbuf\", 7)) != NULL)\n     {\n       static char getchar_call[] = \"getchar();\";\n-      cpp_buffer *buf =\n-\tcpp_push_buffer (&scan_in, getchar_call, sizeof(getchar_call) - 1);\n+      cpp_buffer *buf\n+\t= cpp_push_buffer (&scan_in, getchar_call, sizeof(getchar_call) - 1);\n       int old_written = CPP_WRITTEN (&scan_in);\n       int seen_filbuf = 0;\n "}, {"sha": "1e5d26565948f081602332c4214de4bc01309a9d", "filename": "gcc/flow.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=db3cf6fb33804557ebeae4d9d142ce365826c1ea", "patch": "@@ -987,8 +987,8 @@ life_analysis (f, nregs)\n \t  if (GET_CODE (PATTERN (insn)) == SET\n \t      && GET_CODE (SET_DEST (PATTERN (insn))) == REG\n \t      && GET_CODE (SET_SRC (PATTERN (insn))) == REG\n-\t      && REGNO (SET_DEST (PATTERN (insn))) ==\n-\t\t\tREGNO (SET_SRC (PATTERN (insn)))\n+\t      && (REGNO (SET_DEST (PATTERN (insn)))\n+\t\t  == REGNO (SET_SRC (PATTERN (insn))))\n \t      /* Insns carrying these notes are useful later on.  */\n \t      && ! find_reg_note (insn, REG_EQUAL, NULL_RTX))\n \t    {\n@@ -1002,8 +1002,8 @@ life_analysis (f, nregs)\n \t      && GET_CODE (SUBREG_REG (SET_DEST (PATTERN (insn)))) == REG\n \t      && GET_CODE (SET_SRC (PATTERN (insn))) == SUBREG\n \t      && GET_CODE (SUBREG_REG (SET_SRC (PATTERN (insn)))) == REG\n-\t      && REGNO (SUBREG_REG (SET_DEST (PATTERN (insn)))) ==\n-\t\t\tREGNO (SUBREG_REG (SET_SRC (PATTERN (insn))))\n+\t      && (REGNO (SUBREG_REG (SET_DEST (PATTERN (insn))))\n+\t\t  == REGNO (SUBREG_REG (SET_SRC (PATTERN (insn)))))\n \t      && SUBREG_WORD (SET_DEST (PATTERN (insn))) ==\n \t\t\t      SUBREG_WORD (SET_SRC (PATTERN (insn)))\n \t      /* Insns carrying these notes are useful later on.  */"}, {"sha": "571ac62f2e6e785407ddc14b14eabf375f4ce785", "filename": "gcc/function.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=db3cf6fb33804557ebeae4d9d142ce365826c1ea", "patch": "@@ -4279,8 +4279,8 @@ locate_and_pad_parm (passed_mode, type, in_regs, fndecl,\n     }\n   else\n     {\n-      arg_size_ptr->constant = (- initial_offset_ptr->constant -\n-\t\t\t\toffset_ptr->constant); \n+      arg_size_ptr->constant = (- initial_offset_ptr->constant\n+\t\t\t\t- offset_ptr->constant); \n     }\n #else /* !ARGS_GROW_DOWNWARD */\n   pad_to_arg_alignment (initial_offset_ptr, boundary);\n@@ -5134,8 +5134,8 @@ bc_expand_function_start (subr, parms_have_cleanups)\n   ++nlab;\n   name = (char *) obstack_copy0 (&permanent_obstack, label, strlen (label));\n   this_function_callinfo = bc_gen_rtx (name, 0, (struct bc_label *) 0);\n-  this_function_bytecode =\n-    bc_emit_trampoline (BYTECODE_LABEL (this_function_callinfo));\n+  this_function_bytecode\n+    = bc_emit_trampoline (BYTECODE_LABEL (this_function_callinfo));\n }\n \n "}, {"sha": "b3ad330b42c2d38c25e63e6ec5c7ea04a7196e2f", "filename": "gcc/gcov.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=db3cf6fb33804557ebeae4d9d142ce365826c1ea", "patch": "@@ -1301,8 +1301,8 @@ output_data ()\n \t      /* In case the source file line is larger than our buffer, keep\n \t\t reading and outputing lines until we get a newline.  */\n \t      len = strlen (string);\n-\t      while ((len == 0 || string[strlen (string) - 1] != '\\n') &&\n-\t\t     retval != NULL)\n+\t      while ((len == 0 || string[strlen (string) - 1] != '\\n')\n+\t\t     && retval != NULL)\n \t\t{\n \t\t  retval = fgets (string, STRING_SIZE, source_file);\n \t\t  fputs (string, gcov_file);\n@@ -1358,8 +1358,8 @@ output_data ()\n \t\t/* In case the source file line is larger than our buffer, keep\n \t\t   reading and outputing lines until we get a newline.  */\n \t\tlen = strlen (string);\n-\t\twhile ((len == 0 || string[strlen (string) - 1] != '\\n') &&\n-\t\t       retval != NULL)\n+\t\twhile ((len == 0 || string[strlen (string) - 1] != '\\n')\n+\t\t       && retval != NULL)\n \t\t  {\n \t\t    retval = fgets (string, STRING_SIZE, source_file);\n \t\t    fputs (string, gcov_file);"}, {"sha": "d5f5b51d0446e26ee04d18f199d42085c6fbe3d5", "filename": "gcc/integrate.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=db3cf6fb33804557ebeae4d9d142ce365826c1ea", "patch": "@@ -175,9 +175,9 @@ function_cannot_inline_p (fndecl)\n   /* This is a hack, until the inliner is taught about eh regions at\n      the start of the function.  */\n   for (insn = get_insns ();\n-       insn &&\n-         ! (GET_CODE (insn) == NOTE\n-\t    && NOTE_LINE_NUMBER (insn) == NOTE_INSN_FUNCTION_BEG);\n+       insn\n+\t && ! (GET_CODE (insn) == NOTE\n+\t       && NOTE_LINE_NUMBER (insn) == NOTE_INSN_FUNCTION_BEG);\n        insn = NEXT_INSN (insn))\n     {\n       if (insn && GET_CODE (insn) == NOTE\n@@ -604,8 +604,8 @@ save_for_inline_copying (fndecl)\n \t  copy = rtx_alloc (GET_CODE (insn));\n \n \t  if (GET_CODE (insn) == CALL_INSN)\n-\t    CALL_INSN_FUNCTION_USAGE (copy) =\n-\t           copy_for_inline (CALL_INSN_FUNCTION_USAGE (insn));\n+\t    CALL_INSN_FUNCTION_USAGE (copy)\n+\t      = copy_for_inline (CALL_INSN_FUNCTION_USAGE (insn));\n \n \t  PATTERN (copy) = copy_for_inline (PATTERN (insn));\n \t  INSN_CODE (copy) = -1;\n@@ -1896,8 +1896,8 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n \n \t  /* Because the USAGE information potentially contains objects other\n \t     than hard registers, we need to copy it.  */\n-\t  CALL_INSN_FUNCTION_USAGE (copy) =\n-\t     copy_rtx_and_substitute (CALL_INSN_FUNCTION_USAGE (insn), map);\n+\t  CALL_INSN_FUNCTION_USAGE (copy)\n+\t    = copy_rtx_and_substitute (CALL_INSN_FUNCTION_USAGE (insn), map);\n \n #ifdef HAVE_cc0\n \t  if (cc0_insn)"}, {"sha": "316e741579c95dd483827c00e2a5b7fb05075b4f", "filename": "gcc/jump.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=db3cf6fb33804557ebeae4d9d142ce365826c1ea", "patch": "@@ -449,8 +449,8 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t\t\t\t\t      sreg, NULL_PTR, dreg,\n \t\t\t\t\t      GET_MODE (SET_SRC (body)));\n \n-\t\t    if (tem != 0 &&\n-\t\t\tGET_MODE (tem) == GET_MODE (SET_DEST (body)))\n+\t\t    if (tem != 0\n+\t\t\t&& GET_MODE (tem) == GET_MODE (SET_DEST (body)))\n \t\t      {\n \t\t\t/* DREG may have been the target of a REG_DEAD note in\n \t\t\t   the insn which makes INSN redundant.  If so, reorg"}, {"sha": "107c4bf04dffcb9f1de70b5c19d508e62d1e8bc2", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=db3cf6fb33804557ebeae4d9d142ce365826c1ea", "patch": "@@ -1815,8 +1815,8 @@ gopen (char *fn, char *mode)\n     return (FILE *) 0;\n \n   p = fn + strlen (fn)-1;\n-  use_gzip = ((p[-1] == '.' && (p[0] == 'Z' || p[0] == 'z')) ||\n-              (p[-2] == '.' && p[-1] == 'g' && p[0] == 'z'));\n+  use_gzip = ((p[-1] == '.' && (p[0] == 'Z' || p[0] == 'z'))\n+\t      || (p[-2] == '.' && p[-1] == 'g' && p[0] == 'z'));\n \n   if (use_gzip)\n     {\n@@ -2195,15 +2195,15 @@ __bb_trace_func ()\n     {\n       struct bb_edge **startbucket, **oldnext;\n \n-      oldnext = startbucket =\n-          & bb_hashbuckets[ (((int) bb_src*8) ^ (int) bb_dst) % BB_BUCKETS ];\n+      oldnext = startbucket\n+\t= & bb_hashbuckets[ (((int) bb_src*8) ^ (int) bb_dst) % BB_BUCKETS ];\n       bucket = *startbucket;\n \n       for (bucket = *startbucket; bucket; \n            oldnext = &(bucket->next), bucket = *oldnext)\n         {\n-          if ( bucket->src_addr == bb_src &&\n-               bucket->dst_addr == bb_dst )\n+          if (bucket->src_addr == bb_src\n+\t      && bucket->dst_addr == bb_dst)\n             {\n               bucket->count++;\n               *oldnext = bucket->next;\n@@ -2258,15 +2258,15 @@ __bb_trace_func_ret ()\n     {\n       struct bb_edge **startbucket, **oldnext;\n \n-      oldnext = startbucket =\n-          & bb_hashbuckets[ (((int) bb_dst * 8) ^ (int) bb_src) % BB_BUCKETS ];\n+      oldnext = startbucket\n+\t= & bb_hashbuckets[ (((int) bb_dst * 8) ^ (int) bb_src) % BB_BUCKETS ];\n       bucket = *startbucket;\n \n       for (bucket = *startbucket; bucket; \n            oldnext = &(bucket->next), bucket = *oldnext)\n         {\n-          if ( bucket->src_addr == bb_dst &&\n-               bucket->dst_addr == bb_src )\n+          if (bucket->src_addr == bb_dst\n+\t       && bucket->dst_addr == bb_src)\n             {\n               bucket->count++;\n               *oldnext = bucket->next;\n@@ -2321,8 +2321,8 @@ __bb_init_file (struct bb *blocks)\n   bb_head = blocks;\n \n   blocks->flags = 0;\n-  if (!bb_func_head ||\n-      !(blocks->flags = (char *) malloc (sizeof (char) * blocks->ncounts)))\n+  if (!bb_func_head\n+      || !(blocks->flags = (char *) malloc (sizeof (char) * blocks->ncounts)))\n     return;\n \n   for (blk = 0; blk < ncounts; blk++)\n@@ -2332,8 +2332,8 @@ __bb_init_file (struct bb *blocks)\n     {\n       for (p = bb_func_head; p; p = p->next)\n         {\n-          if (!strcmp (p->funcname, functions[blk]) &&\n-              (!p->filename || !strcmp (p->filename, blocks->filename)))\n+          if (!strcmp (p->funcname, functions[blk])\n+\t      && (!p->filename || !strcmp (p->filename, blocks->filename)))\n             {\n               blocks->flags[blk] |= p->mode;\n             }"}, {"sha": "64c1245977a97aa44f558a1b33151c80b70ee97e", "filename": "gcc/loop.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=db3cf6fb33804557ebeae4d9d142ce365826c1ea", "patch": "@@ -1804,8 +1804,8 @@ move_movables (movables, threshold, insn_count, loop_start, end, nregs)\n \t\t\t\t     contains objects other than hard registers\n \t\t\t\t     we need to copy it.  */\n \t\t\t\t  if (CALL_INSN_FUNCTION_USAGE (temp))\n-\t\t\t\t    CALL_INSN_FUNCTION_USAGE (i1) =\n-\t\t\t\t      copy_rtx (CALL_INSN_FUNCTION_USAGE (temp));\n+\t\t\t\t    CALL_INSN_FUNCTION_USAGE (i1)\n+\t\t\t\t      = copy_rtx (CALL_INSN_FUNCTION_USAGE (temp));\n \t\t\t\t}\n \t\t\t      else\n \t\t\t\ti1 = emit_insn_before (body, loop_start);\n@@ -1848,8 +1848,8 @@ move_movables (movables, threshold, insn_count, loop_start, end, nregs)\n \t\t\t     contains objects other than hard registers\n \t\t\t     we need to copy it.  */\n \t\t\t  if (CALL_INSN_FUNCTION_USAGE (p))\n-\t\t\t    CALL_INSN_FUNCTION_USAGE (i1) =\n-\t\t\t      copy_rtx (CALL_INSN_FUNCTION_USAGE (p));\n+\t\t\t    CALL_INSN_FUNCTION_USAGE (i1)\n+\t\t\t      = copy_rtx (CALL_INSN_FUNCTION_USAGE (p));\n \t\t\t}\n \t\t      else\n \t\t\ti1 = emit_insn_before (PATTERN (p), loop_start);\n@@ -5920,8 +5920,8 @@ check_dbra_loop (loop_end, insn_count, loop_start)\n \n       if (GET_CODE (bl->initial_value) == CONST_INT\n \t  && INTVAL (bl->initial_value) > 0\n-\t  && (INTVAL (bl->initial_value) %\n-\t      (-INTVAL (bl->biv->add_val))) == 0)\n+\t  && (INTVAL (bl->initial_value)\n+\t      % (-INTVAL (bl->biv->add_val))) == 0)\n \t{\n \t  /* register always nonnegative, add REG_NOTE to branch */\n \t  REG_NOTES (PREV_INSN (loop_end))"}, {"sha": "3eb4ef84db09949234d5243a28f6967227d19185", "filename": "gcc/mips-tdump.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fmips-tdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fmips-tdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tdump.c?ref=db3cf6fb33804557ebeae4d9d142ce365826c1ea", "patch": "@@ -1526,9 +1526,9 @@ main (argc, argv)\n       if (sym_hdr.ifdMax == 0)\n \tlast_aux_in_use = 0;\n       else\n-\tlast_aux_in_use =\n-\t  file_desc[sym_hdr.ifdMax-1].iauxBase +\n-\t  file_desc[sym_hdr.ifdMax-1].caux - 1;\n+\tlast_aux_in_use\n+\t  = (file_desc[sym_hdr.ifdMax-1].iauxBase\n+\t     + file_desc[sym_hdr.ifdMax-1].caux - 1);\n \n       if (last_aux_in_use < sym_hdr.iauxMax-1)\n \t{"}, {"sha": "4cd18d0fb46d16a053f4085f4662523b4f61f268", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=db3cf6fb33804557ebeae4d9d142ce365826c1ea", "patch": "@@ -1899,8 +1899,8 @@ add_string (vp, hash_tbl, start, end_p1, ret_hash)\n \n       if (vp->objects_last_page + len >= PAGE_USIZE)\n \t{\n-\t  vp->num_allocated =\n-\t    ((vp->num_allocated + PAGE_USIZE - 1) / PAGE_USIZE) * PAGE_USIZE;\n+\t  vp->num_allocated\n+\t    = ((vp->num_allocated + PAGE_USIZE - 1) / PAGE_USIZE) * PAGE_USIZE;\n \t  add_varray_page (vp);\n \t}\n \n@@ -2576,8 +2576,8 @@ add_file (file_start, file_end_p1)\n       if (file_desc.objects_last_page == file_desc.objects_per_page)\n \tadd_varray_page (&file_desc);\n \n-      file_ptr = cur_file_ptr =\n-\t&file_desc.last->datum->file[ file_desc.objects_last_page++ ];\n+      file_ptr = cur_file_ptr\n+\t= &file_desc.last->datum->file[ file_desc.objects_last_page++ ];\n       *file_ptr = init_file;\n \n       file_ptr->file_index = file_desc.num_allocated++;"}, {"sha": "0509562f6f6feabea17315b2568c28b39fa58671", "filename": "gcc/profile.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=db3cf6fb33804557ebeae4d9d142ce365826c1ea", "patch": "@@ -499,8 +499,8 @@ branch_prob (f, dump_file)\n \telse if ((prev_code == JUMP_INSN || prev_code == CALL_INSN\n \t\t  || prev_code == CODE_LABEL || prev_code == BARRIER)\n \t\t && (GET_RTX_CLASS (code) == 'i'\n-\t\t     || (code == NOTE &&\n-\t\t\t NOTE_LINE_NUMBER (insn) == NOTE_INSN_SETJMP)))\n+\t\t     || (code == NOTE\n+\t\t\t && NOTE_LINE_NUMBER (insn) == NOTE_INSN_SETJMP)))\n \t  {\n \t    i += 1;\n \n@@ -550,8 +550,8 @@ branch_prob (f, dump_file)\n \t\t      {\n \t\t\tif (last_bb_file_name)\n \t\t\t  free (last_bb_file_name);\n-\t\t\tlast_bb_file_name =\n-\t\t\t  xmalloc (strlen (NOTE_SOURCE_FILE (insn)) + 1);\n+\t\t\tlast_bb_file_name\n+\t\t\t  = xmalloc (strlen (NOTE_SOURCE_FILE (insn)) + 1);\n \t\t\tstrcpy (last_bb_file_name, NOTE_SOURCE_FILE (insn));\n \t\t\toutput_gcov_string (NOTE_SOURCE_FILE (insn), (long)-1);\n \t\t      }\n@@ -662,8 +662,8 @@ branch_prob (f, dump_file)\n \telse if ((prev_code == JUMP_INSN || prev_code == CALL_INSN\n \t\t  || prev_code == CODE_LABEL || prev_code == BARRIER)\n \t\t && (GET_RTX_CLASS (code) == 'i'\n-\t\t     || (code == NOTE &&\n-\t\t\t NOTE_LINE_NUMBER (insn) == NOTE_INSN_SETJMP)))\n+\t\t     || (code == NOTE\n+\t\t\t && NOTE_LINE_NUMBER (insn) == NOTE_INSN_SETJMP)))\n \t  {\n \t    /* This is the first insn of the block.  */\n \t    i += 1;"}, {"sha": "d38666406fda545481ee3b12e5bcb239e788a9a6", "filename": "gcc/protoize.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=db3cf6fb33804557ebeae4d9d142ce365826c1ea", "patch": "@@ -1788,8 +1788,8 @@ save_def_or_dec (l, is_syscalls)\n       const char *left_paren_p = find_corresponding_lparen (p);\n #ifndef UNPROTOIZE\n       {\n-        f_list_chain_item *cip =\n-          (f_list_chain_item *) xmalloc (sizeof (f_list_chain_item));\n+        f_list_chain_item *cip\n+\t  = (f_list_chain_item *) xmalloc (sizeof (f_list_chain_item));\n \n         cip->formals_list\n \t  = dupnstr (left_paren_p + 1, (size_t) (p - (left_paren_p+1)));\n@@ -4362,8 +4362,8 @@ edit_file (hp)\n \n   if (!nosave_flag)\n     {\n-      char *new_filename =\n-          (char *) xmalloc (strlen (convert_filename) + strlen (save_suffix) + 2);\n+      char *new_filename\n+\t= (char *) xmalloc (strlen (convert_filename) + strlen (save_suffix) + 2);\n   \n       strcpy (new_filename, convert_filename);\n       strcat (new_filename, save_suffix);\n@@ -4659,8 +4659,8 @@ main (argc, argv)\n \n   /* Now actually make a list of the base source filenames.  */\n \n-  base_source_filenames =\n-    (const char **) xmalloc ((n_base_source_files + 1) * sizeof (char *));\n+  base_source_filenames\n+    = (const char **) xmalloc ((n_base_source_files + 1) * sizeof (char *));\n   n_base_source_files = 0;\n   for (; optind < argc; optind++)\n     {"}, {"sha": "5ef93561eba50c3f43ae637989992da349ad37a0", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=db3cf6fb33804557ebeae4d9d142ce365826c1ea", "patch": "@@ -3122,8 +3122,8 @@ convert_regs ()\n \n       }\n      for (reg = regstack.top; reg >= 0; reg--)\n-        if (regstack.reg[reg] < value_reg_low ||\n-            regstack.reg[reg] > value_reg_high)\n+        if (regstack.reg[reg] < value_reg_low\n+\t    || regstack.reg[reg] > value_reg_high)\n            insn = emit_pop_insn (insn, &regstack,\n \t\t\t    FP_MODE_REG (regstack.reg[reg], DFmode),\n \t\t\t    emit_insn_after);"}, {"sha": "a868931d388ee17c372e55c57ee965e5d8e58aa0", "filename": "gcc/reload.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=db3cf6fb33804557ebeae4d9d142ce365826c1ea", "patch": "@@ -3576,20 +3576,20 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t      }\n \t  }\n \telse if (goal_alternative_matched[i] == -1)\n-\t  operand_reloadnum[i] =\n-\t    push_reload (modified[i] != RELOAD_WRITE ? recog_operand[i] : 0,\n-\t\t\t modified[i] != RELOAD_READ ? recog_operand[i] : 0,\n-\t\t\t (modified[i] != RELOAD_WRITE ?\n-\t\t\t  recog_operand_loc[i] : 0),\n-\t\t\t modified[i] != RELOAD_READ ? recog_operand_loc[i] : 0,\n-\t\t\t (enum reg_class) goal_alternative[i],\n-\t\t\t (modified[i] == RELOAD_WRITE\n-\t\t\t  ? VOIDmode : operand_mode[i]),\n-\t\t\t (modified[i] == RELOAD_READ\n-\t\t\t  ? VOIDmode : operand_mode[i]),\n-\t\t\t (insn_code_number < 0 ? 0\n-\t\t\t  : insn_operand_strict_low[insn_code_number][i]),\n-\t\t\t 0, i, operand_type[i]);\n+\t  operand_reloadnum[i]\n+\t    = push_reload (modified[i] != RELOAD_WRITE ? recog_operand[i] : 0,\n+\t\t\t   modified[i] != RELOAD_READ ? recog_operand[i] : 0,\n+\t\t\t   (modified[i] != RELOAD_WRITE\n+\t\t\t    ? recog_operand_loc[i] : 0),\n+\t\t\t   modified[i] != RELOAD_READ ? recog_operand_loc[i] : 0,\n+\t\t\t   (enum reg_class) goal_alternative[i],\n+\t\t\t   (modified[i] == RELOAD_WRITE\n+\t\t\t    ? VOIDmode : operand_mode[i]),\n+\t\t\t   (modified[i] == RELOAD_READ\n+\t\t\t    ? VOIDmode : operand_mode[i]),\n+\t\t\t   (insn_code_number < 0 ? 0\n+\t\t\t    : insn_operand_strict_low[insn_code_number][i]),\n+\t\t\t   0, i, operand_type[i]);\n \t/* In a matching pair of operands, one must be input only\n \t   and the other must be output only.\n \t   Pass the input operand as IN and the other as OUT.  */\n@@ -3828,8 +3828,8 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t    {\n \t      int secondary_in_reload = reload_secondary_in_reload[i];\n \n-\t      reload_when_needed[secondary_in_reload] = \n-\t\tRELOAD_FOR_OPADDR_ADDR;\n+\t      reload_when_needed[secondary_in_reload]\n+\t\t= RELOAD_FOR_OPADDR_ADDR;\n \n \t      /* If there's a tertiary reload we have to change it also.  */\n \t      if (secondary_in_reload > 0\n@@ -3844,8 +3844,8 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t    {\n \t      int secondary_out_reload = reload_secondary_out_reload[i];\n \n-\t      reload_when_needed[secondary_out_reload] = \n-\t\tRELOAD_FOR_OPADDR_ADDR;\n+\t      reload_when_needed[secondary_out_reload]\n+\t\t= RELOAD_FOR_OPADDR_ADDR;\n \n \t      /* If there's a tertiary reload we have to change it also.  */\n \t      if (secondary_out_reload"}, {"sha": "cfef88f36e4ce63d2c8cc541bb778b4d5e7be1fd", "filename": "gcc/sched.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fsched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fsched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched.c?ref=db3cf6fb33804557ebeae4d9d142ce365826c1ea", "patch": "@@ -645,8 +645,8 @@ memrefs_conflict_p (xsize, x, ysize, y, c)\n     y = canon_rtx (y);\n \n   if (rtx_equal_for_memref_p (x, y))\n-    return (xsize == 0 || ysize == 0 ||\n-\t    (c >= 0 && xsize > c) || (c < 0 && ysize+c > 0));\n+    return (xsize == 0 || ysize == 0\n+\t    || (c >= 0 && xsize > c) || (c < 0 && ysize+c > 0));\n \n   if (y == frame_pointer_rtx || y == hard_frame_pointer_rtx\n       || y == stack_pointer_rtx)"}, {"sha": "046ec3205aff48c43e1fe7c1ad3727ca00f99bf0", "filename": "gcc/sdbout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=db3cf6fb33804557ebeae4d9d142ce365826c1ea", "patch": "@@ -1286,8 +1286,8 @@ sdbout_parms (parms)\n \n \t/* Perform any necessary register eliminations on the parameter's rtl,\n \t   so that the debugging output will be accurate.  */\n-\tDECL_INCOMING_RTL (parms) =\n-\t  eliminate_regs (DECL_INCOMING_RTL (parms), 0, NULL_RTX, 0);\n+\tDECL_INCOMING_RTL (parms)\n+\t  = eliminate_regs (DECL_INCOMING_RTL (parms), 0, NULL_RTX, 0);\n \tDECL_RTL (parms) = eliminate_regs (DECL_RTL (parms), 0, NULL_RTX, 0);\n \n \tif (PARM_PASSED_IN_MEMORY (parms))"}, {"sha": "8c2357aeeb7a1c3fe0dcb03da37da6d4737a685b", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=db3cf6fb33804557ebeae4d9d142ce365826c1ea", "patch": "@@ -949,9 +949,9 @@ layout_type (type)\n #define SET_WORD_SIZE BITS_PER_WORD\n #endif\n \t  int alignment = set_alignment ? set_alignment : SET_WORD_SIZE;\n-\t  int size_in_bits =\n-\t    TREE_INT_CST_LOW (TYPE_MAX_VALUE (TYPE_DOMAIN (type)))\n-\t      - TREE_INT_CST_LOW (TYPE_MIN_VALUE (TYPE_DOMAIN (type))) + 1;\n+\t  int size_in_bits\n+\t    = (TREE_INT_CST_LOW (TYPE_MAX_VALUE (TYPE_DOMAIN (type)))\n+\t       - TREE_INT_CST_LOW (TYPE_MIN_VALUE (TYPE_DOMAIN (type))) + 1);\n \t  int rounded_size\n \t    = ((size_in_bits + alignment - 1) / alignment) * alignment;\n \t  if (rounded_size > alignment)"}, {"sha": "170892e80b620e6f6669c0d110bc628d22d9eb74", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=db3cf6fb33804557ebeae4d9d142ce365826c1ea", "patch": "@@ -4564,8 +4564,8 @@ get_set_constructor_bits (init, buffer, bit_size)\n       if (TREE_CODE (TREE_VALUE (vals)) != INTEGER_CST\n \t  || (TREE_PURPOSE (vals) != NULL_TREE\n \t      && TREE_CODE (TREE_PURPOSE (vals)) != INTEGER_CST))\n-\tnon_const_bits =\n-\t  tree_cons (TREE_PURPOSE (vals), TREE_VALUE (vals), non_const_bits);\n+\tnon_const_bits\n+\t  = tree_cons (TREE_PURPOSE (vals), TREE_VALUE (vals), non_const_bits);\n       else if (TREE_PURPOSE (vals) != NULL_TREE)\n \t{\n \t  /* Set a range of bits to ones.  */"}, {"sha": "de5f64aff2ce1f2ca1d216a668c7bdb0dcbda8e2", "filename": "gcc/unroll.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db3cf6fb33804557ebeae4d9d142ce365826c1ea/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=db3cf6fb33804557ebeae4d9d142ce365826c1ea", "patch": "@@ -2011,8 +2011,8 @@ copy_loop_body (copy_start, copy_end, map, exit_label, last_iteration,\n \n \t  /* Because the USAGE information potentially contains objects other\n \t     than hard registers, we need to copy it.  */\n-\t  CALL_INSN_FUNCTION_USAGE (copy) =\n-\t     copy_rtx_and_substitute (CALL_INSN_FUNCTION_USAGE (insn), map);\n+\t  CALL_INSN_FUNCTION_USAGE (copy)\n+\t    = copy_rtx_and_substitute (CALL_INSN_FUNCTION_USAGE (insn), map);\n \n #ifdef HAVE_cc0\n \t  if (cc0_insn)"}]}