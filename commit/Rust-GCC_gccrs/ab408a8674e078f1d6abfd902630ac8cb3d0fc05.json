{"sha": "ab408a8674e078f1d6abfd902630ac8cb3d0fc05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI0MDhhODY3NGUwNzhmMWQ2YWJmZDkwMjYzMGFjOGNiM2QwZmMwNQ==", "commit": {"author": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1992-03-03T19:42:18Z"}, "committer": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1992-03-03T19:42:18Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r381", "tree": {"sha": "5c1c1d841ef9fa455867fd72889d390a7eca900d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c1c1d841ef9fa455867fd72889d390a7eca900d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab408a8674e078f1d6abfd902630ac8cb3d0fc05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab408a8674e078f1d6abfd902630ac8cb3d0fc05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab408a8674e078f1d6abfd902630ac8cb3d0fc05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab408a8674e078f1d6abfd902630ac8cb3d0fc05/comments", "author": null, "committer": null, "parents": [{"sha": "412dc3482fd83f919a5ad96656ecf5df6c18d20d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/412dc3482fd83f919a5ad96656ecf5df6c18d20d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/412dc3482fd83f919a5ad96656ecf5df6c18d20d"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "6aed00d1d6b6bfedc5506716d272ac8caf73926d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab408a8674e078f1d6abfd902630ac8cb3d0fc05/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab408a8674e078f1d6abfd902630ac8cb3d0fc05/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ab408a8674e078f1d6abfd902630ac8cb3d0fc05", "patch": "@@ -49,7 +49,7 @@ static char *qi_high_reg_name[] = QI_HIGH_REGISTER_NAMES;\n enum reg_class regclass_map[FIRST_PSEUDO_REGISTER] =\n {\n   /* ax, dx, cx, bx */\n-  AREG, DREG, CREG, Q_REGS,\n+  AREG, DREG, CREG, BREG,\n   /* si, di, bp, sp */\n   SIREG, DIREG, INDEX_REGS, GENERAL_REGS,\n   /* FP registers */"}, {"sha": "e24cbd149c8cfd7c93c72adf62c01e8318682c87", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab408a8674e078f1d6abfd902630ac8cb3d0fc05/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab408a8674e078f1d6abfd902630ac8cb3d0fc05/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=ab408a8674e078f1d6abfd902630ac8cb3d0fc05", "patch": "@@ -309,13 +309,16 @@ extern int target_flags;\n    in a smaller-numbered class.\n \n    For any two classes, it is very desirable that there be another\n-   class that represents their union.  */\n-   \n+   class that represents their union.\n+\n+   It might seem that class BREG is unnecessary, since no useful 386\n+   opcode needs reg %ebx.  But some systems pass args to the OS in ebx,\n+   and the \"b\" register constraint is useful in asms for syscalls.  */\n \n enum reg_class\n {\n   NO_REGS,\n-  AREG, DREG, CREG,\n+  AREG, DREG, CREG, BREG,\n   Q_REGS,\t\t\t/* %eax %ebx %ecx %edx */\n   SIREG, DIREG,\n   INDEX_REGS,\t\t\t/* %eax %ebx %ecx %edx %esi %edi %ebp */\n@@ -331,7 +334,7 @@ enum reg_class\n \n #define REG_CLASS_NAMES \\\n {  \"NO_REGS\",\t\t\t\t\\\n-   \"AREG\", \"DREG\", \"CREG\",\t\t\\\n+   \"AREG\", \"DREG\", \"CREG\", \"BREG\",\t\\\n    \"Q_REGS\",\t\t\t\t\\\n    \"SIREG\", \"DIREG\",\t\t\t\\\n    \"INDEX_REGS\",\t\t\t\\\n@@ -346,7 +349,7 @@ enum reg_class\n \n #define REG_CLASS_CONTENTS \\\n {      0,\t\t\t\t\t\t\t\\\n-     0x1,    0x2,  0x4,\t\t/* AREG, DREG, CREG */\t\t\\\n+     0x1,    0x2,  0x4,\t 0x8,\t/* AREG, DREG, CREG, BREG */\t\\\n      0xf,\t\t\t/* Q_REGS */\t\t\t\\\n     0x10,   0x20,\t\t/* SIREG, DIREG */\t\t\\\n  0x1007f,\t\t\t/* INDEX_REGS */\t\t\\\n@@ -409,6 +412,7 @@ extern enum reg_class regclass_map[FIRST_PSEUDO_REGISTER];\n    (C) == 't' ? FP_TOP_REG :\t\t\\\n    (C) == 'u' ? FP_SECOND_REG :\t\t\\\n    (C) == 'a' ? AREG :\t\t\t\\\n+   (C) == 'b' ? BREG :\t\t\t\\\n    (C) == 'c' ? CREG :\t\t\t\\\n    (C) == 'd' ? DREG :\t\t\t\\\n    (C) == 'D' ? DIREG :\t\t\t\\"}]}