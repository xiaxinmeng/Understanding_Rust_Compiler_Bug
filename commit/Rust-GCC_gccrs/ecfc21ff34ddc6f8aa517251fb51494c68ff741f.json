{"sha": "ecfc21ff34ddc6f8aa517251fb51494c68ff741f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNmYzIxZmYzNGRkYzZmOGFhNTE3MjUxZmI1MTQ5NGM2OGZmNzQxZg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-12-15T01:47:48Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-12-15T01:47:48Z"}, "message": "Introduce selftest::locate_file\n\ngcc/ChangeLog:\n\t* Makefile.in (SELFTEST_FLAGS): Add path argument to -fself-test.\n\t(s-selftest): Add dependency on the selftests data directory.\n\t* common.opt (fself-test): Rename to...\n\t(fself-test=): ...this, documenting the meaning of the argument.\n\t* selftest-run-tests.c (along): Likewise.\n\t* selftest-run-tests.c: Include \"options.h\".\n\t(selftest::run_tests): Initialize selftest::path_to_selftest_files\n\tfrom flag_self_test.\n\t* selftest.c (selftest::path_to_selftest_files): New global.\n\t(selftest::locate_file): New function.\n\t(selftest::test_locate_file): New function.\n\t(selftest_c_tests): Likewise.\n\t(selftest::selftest_c_tests): Call test_locate_file.\n\t* selftest.h (selftest::locate_file): New decl.\n\t(selftest::path_to_selftest_files): New decl.\n\ngcc/testsuite/ChangeLog:\n\tPR target/78213\n\t* gcc.dg/cpp/pr71591.c: Add a fake value for the argument of\n\t-fself-test.\n\t* gcc.dg/pr78213.c: Disable this test.\n\t* selftests/example.txt: New file.\n\nFrom-SVN: r243681", "tree": {"sha": "308b5533291220862bf4989c1182e3793e2ad200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/308b5533291220862bf4989c1182e3793e2ad200"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecfc21ff34ddc6f8aa517251fb51494c68ff741f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecfc21ff34ddc6f8aa517251fb51494c68ff741f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecfc21ff34ddc6f8aa517251fb51494c68ff741f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecfc21ff34ddc6f8aa517251fb51494c68ff741f/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e98ac2584c0237cbd81df626b8d446f21f54fa39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98ac2584c0237cbd81df626b8d446f21f54fa39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e98ac2584c0237cbd81df626b8d446f21f54fa39"}], "stats": {"total": 98, "additions": 91, "deletions": 7}, "files": [{"sha": "159dda09e4205cd0dc32feefbcfc9b57d41e8a36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecfc21ff34ddc6f8aa517251fb51494c68ff741f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecfc21ff34ddc6f8aa517251fb51494c68ff741f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ecfc21ff34ddc6f8aa517251fb51494c68ff741f", "patch": "@@ -1,3 +1,21 @@\n+2016-12-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* Makefile.in (SELFTEST_FLAGS): Add path argument to -fself-test.\n+\t(s-selftest): Add dependency on the selftests data directory.\n+\t* common.opt (fself-test): Rename to...\n+\t(fself-test=): ...this, documenting the meaning of the argument.\n+\t* selftest-run-tests.c (along): Likewise.\n+\t* selftest-run-tests.c: Include \"options.h\".\n+\t(selftest::run_tests): Initialize selftest::path_to_selftest_files\n+\tfrom flag_self_test.\n+\t* selftest.c (selftest::path_to_selftest_files): New global.\n+\t(selftest::locate_file): New function.\n+\t(selftest::test_locate_file): New function.\n+\t(selftest_c_tests): Likewise.\n+\t(selftest::selftest_c_tests): Call test_locate_file.\n+\t* selftest.h (selftest::locate_file): New decl.\n+\t(selftest::path_to_selftest_files): New decl.\n+\n 2016-12-14  Andrew Pinski  <apinski@cavium.com>\n \n \t* config/aarch64/aarch64-cores.def: Add -1 as the variant to all"}, {"sha": "2aae684cad05a43c8d9e68bd5e5b21a2fcf629e7", "filename": "gcc/Makefile.in", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecfc21ff34ddc6f8aa517251fb51494c68ff741f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecfc21ff34ddc6f8aa517251fb51494c68ff741f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=ecfc21ff34ddc6f8aa517251fb51494c68ff741f", "patch": "@@ -1896,15 +1896,19 @@ rest.cross: specs\n # Specify -o /dev/null so the output of -S is discarded. More importantly\n # It does not try to create a file with the name \"null.s\" on POSIX and\n # \"nul.s\" on Windows. Because on Windows \"nul\" is a reserved file name.\n-SELFTEST_FLAGS = -nostdinc -x c /dev/null -S -fself-test -o /dev/null\n+# Specify the path to gcc/testsuite/selftests within the srcdir\n+# as an argument to -fself-test.\n+SELFTEST_FLAGS = -nostdinc -x c /dev/null -S -o /dev/null \\\n+\t-fself-test=$(srcdir)/testsuite/selftests\n \n # Run the selftests during the build once we have a driver and a cc1,\n # so that self-test failures are caught as early as possible.\n # Use \"s-selftest\" to ensure that we only run the selftests if the\n-# driver or cc1 change.\n+# driver, cc1, or selftest data change.\n .PHONY: selftest\n selftest: s-selftest\n-s-selftest: $(GCC_PASSES) cc1$(exeext) stmp-int-hdrs\n+s-selftest: $(GCC_PASSES) cc1$(exeext) stmp-int-hdrs \\\n+  $(srcdir)/testsuite/selftests\n \t$(GCC_FOR_TARGET) $(SELFTEST_FLAGS)\n \t$(STAMP) $@\n "}, {"sha": "de068447d3119ab260cfbe86fe96452c050d9e7e", "filename": "gcc/common.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecfc21ff34ddc6f8aa517251fb51494c68ff741f/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecfc21ff34ddc6f8aa517251fb51494c68ff741f/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=ecfc21ff34ddc6f8aa517251fb51494c68ff741f", "patch": "@@ -2152,9 +2152,9 @@ fselective-scheduling2\n Common Report Var(flag_selective_scheduling2) Optimization\n Run selective scheduling after reload.\n \n-fself-test\n-Common Undocumented Var(flag_self_test)\n-Run self-tests.\n+fself-test=\n+Common Undocumented Joined Var(flag_self_test)\n+Run self-tests, using the given path to locate test files.\n \n fsel-sched-pipelining\n Common Report Var(flag_sel_sched_pipelining) Init(0) Optimization"}, {"sha": "c1cd97ece59c6578d8c0af2776cd8f029b90ef91", "filename": "gcc/selftest-run-tests.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecfc21ff34ddc6f8aa517251fb51494c68ff741f/gcc%2Fselftest-run-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecfc21ff34ddc6f8aa517251fb51494c68ff741f/gcc%2Fselftest-run-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest-run-tests.c?ref=ecfc21ff34ddc6f8aa517251fb51494c68ff741f", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"target.h\"\n #include \"langhooks.h\"\n+#include \"options.h\"\n \n /* This function needed to be split out from selftest.c as it references\n    tests from the whole source tree, and so is within\n@@ -38,6 +39,13 @@ along with GCC; see the file COPYING3.  If not see\n void\n selftest::run_tests ()\n {\n+  /* Makefile.in has -fself-test=$(srcdir)/testsuite/selftests, so that\n+     flag_self_test contains the path to the selftest subdirectory of the\n+     source tree (without a trailing slash).  Copy it up to\n+     path_to_selftest_files, to avoid selftest.c depending on\n+     option-handling.  */\n+  path_to_selftest_files = flag_self_test;\n+\n   long start_time = get_run_time ();\n \n   /* Run all the tests, in hand-coded order of (approximate) dependencies:"}, {"sha": "3ff3b3d420ab7009eca5364387375d06e143531c", "filename": "gcc/selftest.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecfc21ff34ddc6f8aa517251fb51494c68ff741f/gcc%2Fselftest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecfc21ff34ddc6f8aa517251fb51494c68ff741f/gcc%2Fselftest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.c?ref=ecfc21ff34ddc6f8aa517251fb51494c68ff741f", "patch": "@@ -198,6 +198,21 @@ read_file (const location &loc, const char *path)\n   return result;\n }\n \n+/* The path of SRCDIR/testsuite/selftests.  */\n+\n+const char *path_to_selftest_files = NULL;\n+\n+/* Convert a path relative to SRCDIR/testsuite/selftests\n+   to a real path (either absolute, or relative to pwd).\n+   The result should be freed by the caller.  */\n+\n+char *\n+locate_file (const char *name)\n+{\n+  ASSERT_NE (NULL, path_to_selftest_files);\n+  return concat (path_to_selftest_files, \"/\", name, NULL);\n+}\n+\n /* Selftests for libiberty.  */\n \n /* Verify that xstrndup generates EXPECTED when called on SRC and N.  */\n@@ -281,6 +296,18 @@ test_read_file ()\n   free (buf);\n }\n \n+/* Verify locate_file (and read_file).  */\n+\n+static void\n+test_locate_file ()\n+{\n+  char *path = locate_file (\"example.txt\");\n+  char *buf = read_file (SELFTEST_LOCATION, path);\n+  ASSERT_STREQ (\"example of a selftest file\\n\", buf);\n+  free (buf);\n+  free (path);\n+}\n+\n /* Run all of the selftests within this file.  */\n \n void\n@@ -290,6 +317,7 @@ selftest_c_tests ()\n   test_assertions ();\n   test_named_temp_file ();\n   test_read_file ();\n+  test_locate_file ();\n }\n \n } // namespace selftest"}, {"sha": "c39087375fa9cd50ef4e51cc9fa2c9faceb72d5a", "filename": "gcc/selftest.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecfc21ff34ddc6f8aa517251fb51494c68ff741f/gcc%2Fselftest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecfc21ff34ddc6f8aa517251fb51494c68ff741f/gcc%2Fselftest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.h?ref=ecfc21ff34ddc6f8aa517251fb51494c68ff741f", "patch": "@@ -158,6 +158,16 @@ extern char *read_file (const location &loc, const char *path);\n \n extern void forcibly_ggc_collect ();\n \n+/* Convert a path relative to SRCDIR/gcc/testsuite/selftests\n+   to a real path (either absolute, or relative to pwd).\n+   The result should be freed by the caller.  */\n+\n+extern char *locate_file (const char *path);\n+\n+/* The path of SRCDIR/testsuite/selftests.  */\n+\n+extern const char *path_to_selftest_files;\n+\n /* Declarations for specific families of tests (by source file), in\n    alphabetical order.  */\n extern void bitmap_c_tests ();"}, {"sha": "bdee8fd3e1fca3bfda50a66b6928bfca2cc6e685", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecfc21ff34ddc6f8aa517251fb51494c68ff741f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecfc21ff34ddc6f8aa517251fb51494c68ff741f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ecfc21ff34ddc6f8aa517251fb51494c68ff741f", "patch": "@@ -1,3 +1,11 @@\n+2016-12-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR target/78213\n+\t* gcc.dg/cpp/pr71591.c: Add a fake value for the argument of\n+\t-fself-test.\n+\t* gcc.dg/pr78213.c: Disable this test.\n+\t* selftests/example.txt: New file.\n+\n 2016-12-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/78786"}, {"sha": "0e3d7b1184e4a5955025dd10bf7dfd97055a7c51", "filename": "gcc/testsuite/gcc.dg/cpp/pr71591.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecfc21ff34ddc6f8aa517251fb51494c68ff741f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr71591.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecfc21ff34ddc6f8aa517251fb51494c68ff741f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr71591.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr71591.c?ref=ecfc21ff34ddc6f8aa517251fb51494c68ff741f", "patch": "@@ -1,5 +1,5 @@\n /* PR rtl-optimization/71591 */\n /* { dg-do preprocess } */\n-/* { dg-options \"-fself-test\" } */\n+/* { dg-options \"-fself-test=fake-value\" } */\n \n /* { dg-message \"self-tests incompatible with -E\" \"\" { target *-*-* } 0 } */"}, {"sha": "ebc2cce78f45a51b6189753ca5d5eb3c140c8ea9", "filename": "gcc/testsuite/gcc.dg/pr78213.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecfc21ff34ddc6f8aa517251fb51494c68ff741f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78213.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecfc21ff34ddc6f8aa517251fb51494c68ff741f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78213.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr78213.c?ref=ecfc21ff34ddc6f8aa517251fb51494c68ff741f", "patch": "@@ -1,6 +1,13 @@\n /* { dg-do compile } */\n /* { dg-options \"-fself-test\" } */\n \n+/* When this test was written -fself-test took no argument, but it\n+   has subsequently gained a mandatory argument, giving the path\n+   to selftest support files (within the srcdir).\n+   It's not clear how to provide this path sanely from\n+   within DejaGnu, so for now, this test is disabled.  */\n+/* { dg-skip-if \"\" { *-*-* } } */\n+\n /* Verify that -fself-test does not fail on a non empty source.  */\n \n int i;                                                                          void bar();                                                                     void foo()"}, {"sha": "fbfaa338a0c166ef9c6f45849e572de483ce8832", "filename": "gcc/testsuite/selftests/example.txt", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecfc21ff34ddc6f8aa517251fb51494c68ff741f/gcc%2Ftestsuite%2Fselftests%2Fexample.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecfc21ff34ddc6f8aa517251fb51494c68ff741f/gcc%2Ftestsuite%2Fselftests%2Fexample.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fselftests%2Fexample.txt?ref=ecfc21ff34ddc6f8aa517251fb51494c68ff741f", "patch": "@@ -0,0 +1 @@\n+example of a selftest file"}]}