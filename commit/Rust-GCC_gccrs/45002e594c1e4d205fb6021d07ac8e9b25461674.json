{"sha": "45002e594c1e4d205fb6021d07ac8e9b25461674", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUwMDJlNTk0YzFlNGQyMDVmYjYwMjFkMDdhYzhlOWIyNTQ2MTY3NA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2005-07-22T11:55:42Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2005-07-22T11:55:42Z"}, "message": "re PR rtl-optimization/22258 (combine causes spill failure on return value register)\n\n\tPR rtl-optimization/22258\n\t* combine.c (likely_spilled_retval_1, likely_spilled_retval_p):\n\tNew functions.\n\t(try_combine): Use likely_spilled_retval_p.\n\nFrom-SVN: r102279", "tree": {"sha": "ed8acf9614f17e7c4ca5b66817f428b45beaa2ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed8acf9614f17e7c4ca5b66817f428b45beaa2ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45002e594c1e4d205fb6021d07ac8e9b25461674", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45002e594c1e4d205fb6021d07ac8e9b25461674", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45002e594c1e4d205fb6021d07ac8e9b25461674", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45002e594c1e4d205fb6021d07ac8e9b25461674/comments", "author": null, "committer": null, "parents": [{"sha": "db8697336fbb1f6665adbfa24a72a4dbbd549398", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db8697336fbb1f6665adbfa24a72a4dbbd549398", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db8697336fbb1f6665adbfa24a72a4dbbd549398"}], "stats": {"total": 87, "additions": 87, "deletions": 0}, "files": [{"sha": "98a7747d8ff6d95a3fd94edf7cec594ccee0cc8a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45002e594c1e4d205fb6021d07ac8e9b25461674/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45002e594c1e4d205fb6021d07ac8e9b25461674/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45002e594c1e4d205fb6021d07ac8e9b25461674", "patch": "@@ -1,3 +1,10 @@\n+2005-07-22  J\"orn Rennecke <joern.rennecke@st.com>\n+\n+\tPR rtl-optimization/22258\n+\t* combine.c (likely_spilled_retval_1, likely_spilled_retval_p):\n+\tNew functions.\n+\t(try_combine): Use likely_spilled_retval_p.\n+\n 2005-07-22  Paul Woegerer  <paul.woegerer@nsc.com>\n \n \t* config.gcc: Add crx-elf support."}, {"sha": "d8d3baf982af5130d8a806ccfa747dd4cde3bba5", "filename": "gcc/combine.c", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45002e594c1e4d205fb6021d07ac8e9b25461674/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45002e594c1e4d205fb6021d07ac8e9b25461674/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=45002e594c1e4d205fb6021d07ac8e9b25461674", "patch": "@@ -1557,6 +1557,85 @@ cant_combine_insn_p (rtx insn)\n   return 0;\n }\n \n+struct likely_spilled_retval_info\n+{\n+  unsigned regno, nregs;\n+  unsigned mask;\n+};\n+\n+/* Called via note_stores by likely_spilled_retval_p.  Remove from info->mask\n+   hard registers that are known to be written to / clobbered in full.  */\n+static void\n+likely_spilled_retval_1 (rtx x, rtx set, void *data)\n+{\n+  struct likely_spilled_retval_info *info = data;\n+  unsigned regno, nregs;\n+  unsigned new_mask;\n+\n+  if (!REG_P (XEXP (set, 0)))\n+    return;\n+  regno = REGNO (x);\n+  if (regno >= info->regno + info->nregs)\n+    return;\n+  nregs = hard_regno_nregs[regno][GET_MODE (x)];\n+  if (regno + nregs <= info->regno)\n+    return;\n+  new_mask = (2U << (nregs - 1)) - 1;\n+  if (regno < info->regno)\n+    new_mask >>= info->regno - regno;\n+  else\n+    new_mask <<= regno - info->regno;\n+  info->mask &= new_mask;\n+}\n+\n+/* Return nonzero iff part of the return value is live during INSN, and\n+   it is likely spilled.  This can happen when more than one insn is needed\n+   to copy the return value, e.g. when we consider to combine into the\n+   second copy insn for a complex value.  */\n+\n+static int\n+likely_spilled_retval_p (rtx insn)\n+{\n+  rtx use = BB_END (this_basic_block);\n+  rtx reg, p;\n+  unsigned regno, nregs;\n+  /* We assume here that no machine mode needs more than\n+     32 hard registers when the value overlaps with a register\n+     for which FUNCTION_VALUE_REGNO_P is true.  */\n+  unsigned mask;\n+  struct likely_spilled_retval_info info;\n+\n+  if (!NONJUMP_INSN_P (use) || GET_CODE (PATTERN (use)) != USE || insn == use)\n+    return 0;\n+  reg = XEXP (PATTERN (use), 0);\n+  if (!REG_P (reg) || !FUNCTION_VALUE_REGNO_P (REGNO (reg)))\n+    return 0;\n+  regno = REGNO (reg);\n+  nregs = hard_regno_nregs[regno][GET_MODE (reg)];\n+  if (nregs == 1)\n+    return 0;\n+  mask = (2U << (nregs - 1)) - 1;\n+\n+  /* Disregard parts of the return value that are set later.  */\n+  info.regno = regno;\n+  info.nregs = nregs;\n+  info.mask = mask;\n+  for (p = PREV_INSN (use); info.mask && p != insn; p = PREV_INSN (p))\n+    note_stores (PATTERN (insn), likely_spilled_retval_1, &info);\n+  mask = info.mask;\n+\n+  /* Check if any of the (probably) live return value registers is\n+     likely spilled.  */\n+  nregs --;\n+  do\n+    {\n+      if ((mask & 1 << nregs)\n+\t  && CLASS_LIKELY_SPILLED_P (REGNO_REG_CLASS (regno + nregs)))\n+\treturn 1;\n+    } while (nregs--);\n+  return 0;\n+}\n+\n /* Adjust INSN after we made a change to its destination.\n \n    Changing the destination can invalidate notes that say something about\n@@ -1644,6 +1723,7 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n   if (cant_combine_insn_p (i3)\n       || cant_combine_insn_p (i2)\n       || (i1 && cant_combine_insn_p (i1))\n+      || likely_spilled_retval_p (i3)\n       /* We also can't do anything if I3 has a\n \t REG_LIBCALL note since we don't want to disrupt the contiguity of a\n \t libcall.  */"}]}