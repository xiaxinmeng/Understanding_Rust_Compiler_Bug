{"sha": "f77aada2b4f271fa84f68411e74847ea48e2f762", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc3YWFkYTJiNGYyNzFmYTg0ZjY4NDExZTc0ODQ3ZWE0OGUyZjc2Mg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-12-16T20:27:35Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-12-16T20:27:35Z"}, "message": "(simplify_comparison): Use mode_width as shift count\nonly if it is less than or equal to HOST_BITS_PER_WIDE_INT.\n\nFrom-SVN: r13312", "tree": {"sha": "2988a18be8f17b49ec7b16d803ebebbb45755b97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2988a18be8f17b49ec7b16d803ebebbb45755b97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f77aada2b4f271fa84f68411e74847ea48e2f762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f77aada2b4f271fa84f68411e74847ea48e2f762", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f77aada2b4f271fa84f68411e74847ea48e2f762", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f77aada2b4f271fa84f68411e74847ea48e2f762/comments", "author": null, "committer": null, "parents": [{"sha": "4246e0c55bf669cfa59fc68e6dedea70a6cabdbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4246e0c55bf669cfa59fc68e6dedea70a6cabdbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4246e0c55bf669cfa59fc68e6dedea70a6cabdbd"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "f4e0b97e5b0301438588d89593fd0f9a0e50b4f3", "filename": "gcc/combine.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f77aada2b4f271fa84f68411e74847ea48e2f762/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f77aada2b4f271fa84f68411e74847ea48e2f762/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=f77aada2b4f271fa84f68411e74847ea48e2f762", "patch": "@@ -9296,7 +9296,8 @@ simplify_comparison (code, pop0, pop1)\n \t    }\n \n \t  /* (unsigned) < 0x80000000 is equivalent to >= 0.  */\n-\t  else if (const_op == (HOST_WIDE_INT) 1 << (mode_width - 1))\n+\t  else if ((mode_width <= HOST_BITS_PER_WIDE_INT)\n+\t\t   && (const_op == (HOST_WIDE_INT) 1 << (mode_width - 1)))\n \t    {\n \t      const_op = 0, op1 = const0_rtx;\n \t      code = GE;\n@@ -9311,7 +9312,8 @@ simplify_comparison (code, pop0, pop1)\n \t    code = EQ;\n \n \t  /* (unsigned) <= 0x7fffffff is equivalent to >= 0.  */\n-\t  else if (const_op == ((HOST_WIDE_INT) 1 << (mode_width - 1)) - 1)\n+\t  else if ((mode_width <= HOST_BITS_PER_WIDE_INT)\n+\t\t   && (const_op == ((HOST_WIDE_INT) 1 << (mode_width - 1)) - 1))\n \t    {\n \t      const_op = 0, op1 = const0_rtx;\n \t      code = GE;\n@@ -9329,7 +9331,8 @@ simplify_comparison (code, pop0, pop1)\n \t    }\n \n \t  /* (unsigned) >= 0x80000000 is equivalent to < 0.  */\n-\t  else if (const_op == (HOST_WIDE_INT) 1 << (mode_width - 1))\n+\t  else if ((mode_width <= HOST_BITS_PER_WIDE_INT)\n+\t\t   && (const_op == (HOST_WIDE_INT) 1 << (mode_width - 1)))\n \t    {\n \t      const_op = 0, op1 = const0_rtx;\n \t      code = LT;\n@@ -9344,7 +9347,8 @@ simplify_comparison (code, pop0, pop1)\n \t    code = NE;\n \n \t  /* (unsigned) > 0x7fffffff is equivalent to < 0.  */\n-\t  else if (const_op == ((HOST_WIDE_INT) 1 << (mode_width - 1)) - 1)\n+\t  else if ((mode_width <= HOST_BITS_PER_WIDE_INT)\n+\t\t    && (const_op == ((HOST_WIDE_INT) 1 << (mode_width - 1)) - 1))\n \t    {\n \t      const_op = 0, op1 = const0_rtx;\n \t      code = LT;"}]}