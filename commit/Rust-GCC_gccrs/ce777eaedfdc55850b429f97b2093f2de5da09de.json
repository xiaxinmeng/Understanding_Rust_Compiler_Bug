{"sha": "ce777eaedfdc55850b429f97b2093f2de5da09de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U3NzdlYWVkZmRjNTU4NTBiNDI5Zjk3YjIwOTNmMmRlNWRhMDlkZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-16T10:02:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-16T10:52:17Z"}, "message": "Get rid of some gimple_expr_type uses\n\nThis gets rid of a few gimple_expr_type uses.\n\n2021-07-16  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-fold.c (gimple_fold_stmt_to_constant_1): Use\n\tthe type of the LHS.\n\t(gimple_assign_nonnegative_warnv_p): Likewise.\n\t(gimple_call_nonnegative_warnv_p): Likewise.  Return false\n\tif the call has no LHS.\n\t* gimple.c (gimple_could_trap_p_1): Use the type of the LHS.\n\t* tree-eh.c (stmt_could_throw_1_p): Likewise.\n\t* tree-inline.c (insert_init_stmt): Likewise.\n\t* tree-ssa-loop-niter.c (get_val_for): Likewise.\n\t* tree-outof-ssa.c (ssa_is_replaceable_p): Use the type of\n\tthe def.\n\t* tree-ssa-sccvn.c (init_vn_nary_op_from_stmt): Take a\n\tgassign *.  Use the type of the lhs.\n\t(vn_nary_op_lookup_stmt): Adjust.\n\t(vn_nary_op_insert_stmt): Likewise.", "tree": {"sha": "56ea1a168ac8a25522d06c78c4237b85dc1d3864", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56ea1a168ac8a25522d06c78c4237b85dc1d3864"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce777eaedfdc55850b429f97b2093f2de5da09de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce777eaedfdc55850b429f97b2093f2de5da09de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce777eaedfdc55850b429f97b2093f2de5da09de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce777eaedfdc55850b429f97b2093f2de5da09de/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0990d93dd8a4268bff5bbe48aa26748cf63201c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0990d93dd8a4268bff5bbe48aa26748cf63201c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0990d93dd8a4268bff5bbe48aa26748cf63201c7"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "a3afe871f6b4d017d11becf9b9b6677cae21fdf2", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce777eaedfdc55850b429f97b2093f2de5da09de/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce777eaedfdc55850b429f97b2093f2de5da09de/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=ce777eaedfdc55850b429f97b2093f2de5da09de", "patch": "@@ -7507,7 +7507,8 @@ gimple_fold_stmt_to_constant_1 (gimple *stmt, tree (*valueize) (tree),\n               tree op1 = (*valueize) (gimple_assign_rhs2 (stmt));\n               tree op2 = (*valueize) (gimple_assign_rhs3 (stmt));\n               return fold_ternary_loc (loc, subcode,\n-\t\t\t\t       gimple_expr_type (stmt), op0, op1, op2);\n+\t\t\t\t       TREE_TYPE (gimple_assign_lhs (stmt)),\n+\t\t\t\t       op0, op1, op2);\n             }\n \n           default:\n@@ -8901,16 +8902,17 @@ gimple_assign_nonnegative_warnv_p (gimple *stmt, bool *strict_overflow_p,\n \t\t\t\t   int depth)\n {\n   enum tree_code code = gimple_assign_rhs_code (stmt);\n+  tree type = TREE_TYPE (gimple_assign_lhs (stmt));\n   switch (get_gimple_rhs_class (code))\n     {\n     case GIMPLE_UNARY_RHS:\n       return tree_unary_nonnegative_warnv_p (gimple_assign_rhs_code (stmt),\n-\t\t\t\t\t     gimple_expr_type (stmt),\n+\t\t\t\t\t     type,\n \t\t\t\t\t     gimple_assign_rhs1 (stmt),\n \t\t\t\t\t     strict_overflow_p, depth);\n     case GIMPLE_BINARY_RHS:\n       return tree_binary_nonnegative_warnv_p (gimple_assign_rhs_code (stmt),\n-\t\t\t\t\t      gimple_expr_type (stmt),\n+\t\t\t\t\t      type,\n \t\t\t\t\t      gimple_assign_rhs1 (stmt),\n \t\t\t\t\t      gimple_assign_rhs2 (stmt),\n \t\t\t\t\t      strict_overflow_p, depth);\n@@ -8938,12 +8940,12 @@ gimple_call_nonnegative_warnv_p (gimple *stmt, bool *strict_overflow_p,\n     gimple_call_arg (stmt, 0) : NULL_TREE;\n   tree arg1 = gimple_call_num_args (stmt) > 1 ?\n     gimple_call_arg (stmt, 1) : NULL_TREE;\n-\n-  return tree_call_nonnegative_warnv_p (gimple_expr_type (stmt),\n-\t\t\t\t\tgimple_call_combined_fn (stmt),\n-\t\t\t\t\targ0,\n-\t\t\t\t\targ1,\n-\t\t\t\t\tstrict_overflow_p, depth);\n+  tree lhs = gimple_call_lhs (stmt);\n+  return (lhs\n+\t  && tree_call_nonnegative_warnv_p (TREE_TYPE (lhs),\n+\t\t\t\t\t    gimple_call_combined_fn (stmt),\n+\t\t\t\t\t    arg0, arg1,\n+\t\t\t\t\t    strict_overflow_p, depth));\n }\n \n /* Return true if return value of call STMT is known to be non-negative."}, {"sha": "863bc0d17f117fe0593e945afc1f62b9c1068292", "filename": "gcc/gimple.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce777eaedfdc55850b429f97b2093f2de5da09de/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce777eaedfdc55850b429f97b2093f2de5da09de/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=ce777eaedfdc55850b429f97b2093f2de5da09de", "patch": "@@ -2164,12 +2164,12 @@ gimple_could_trap_p_1 (const gimple *s, bool include_mem, bool include_stores)\n       if (op == COND_EXPR)\n \treturn tree_could_trap_p (gimple_assign_rhs1 (s));\n \n-      /* For comparisons we need to check rhs operand types instead of rhs type\n+      /* For comparisons we need to check rhs operand types instead of lhs type\n          (which is BOOLEAN_TYPE).  */\n       if (TREE_CODE_CLASS (op) == tcc_comparison)\n \tt = TREE_TYPE (gimple_assign_rhs1 (s));\n       else\n-\tt = gimple_expr_type (s);\n+\tt = TREE_TYPE (gimple_assign_lhs (s));\n \n       if (get_gimple_rhs_class (op) == GIMPLE_BINARY_RHS)\n \tdiv = gimple_assign_rhs2 (s);"}, {"sha": "3a09de95025b982243c044c04e8dfb26b0bf52a1", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce777eaedfdc55850b429f97b2093f2de5da09de/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce777eaedfdc55850b429f97b2093f2de5da09de/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=ce777eaedfdc55850b429f97b2093f2de5da09de", "patch": "@@ -2856,7 +2856,7 @@ stmt_could_throw_1_p (gassign *stmt)\n       if (TREE_CODE_CLASS (code) == tcc_comparison)\n \tt = TREE_TYPE (gimple_assign_rhs1 (stmt));\n       else\n-\tt = gimple_expr_type (stmt);\n+\tt = TREE_TYPE (gimple_assign_lhs (stmt));\n       fp_operation = FLOAT_TYPE_P (t);\n       if (fp_operation)\n \t{"}, {"sha": "8e6cdd3f2aedbd19773840bf2cc4fb5b857bb65e", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce777eaedfdc55850b429f97b2093f2de5da09de/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce777eaedfdc55850b429f97b2093f2de5da09de/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=ce777eaedfdc55850b429f97b2093f2de5da09de", "patch": "@@ -3398,7 +3398,7 @@ insert_init_stmt (copy_body_data *id, basic_block bb, gimple *init_stmt)\n \t  && gimple_assign_rhs_class (init_stmt) == GIMPLE_UNARY_RHS)\n \t{\n \t  tree rhs = build1 (gimple_assign_rhs_code (init_stmt),\n-\t\t\t     gimple_expr_type (init_stmt),\n+\t\t\t     TREE_TYPE (gimple_assign_lhs (init_stmt)),\n \t\t\t     gimple_assign_rhs1 (init_stmt));\n \t  rhs = force_gimple_operand_gsi (&si, rhs, true, NULL_TREE, false,\n \t\t\t\t\t  GSI_NEW_STMT);"}, {"sha": "1a133a091777542746062e1befbd60a44a8a4469", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce777eaedfdc55850b429f97b2093f2de5da09de/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce777eaedfdc55850b429f97b2093f2de5da09de/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=ce777eaedfdc55850b429f97b2093f2de5da09de", "patch": "@@ -87,7 +87,7 @@ ssa_is_replaceable_p (gimple *stmt)\n \n   /* Float expressions must go through memory if float-store is on.  */\n   if (flag_float_store\n-      && FLOAT_TYPE_P (gimple_expr_type (stmt)))\n+      && FLOAT_TYPE_P (TREE_TYPE (def)))\n     return false;\n \n   /* An assignment with a register variable on the RHS is not"}, {"sha": "6fabf10a21528cd8e131c404efce8a78df567d2d", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce777eaedfdc55850b429f97b2093f2de5da09de/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce777eaedfdc55850b429f97b2093f2de5da09de/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=ce777eaedfdc55850b429f97b2093f2de5da09de", "patch": "@@ -3018,7 +3018,7 @@ get_val_for (tree x, tree base)\n   else if (gimple_assign_rhs_class (stmt) == GIMPLE_UNARY_RHS\n \t   && TREE_CODE (gimple_assign_rhs1 (stmt)) == SSA_NAME)\n     return fold_build1 (gimple_assign_rhs_code (stmt),\n-\t\t\tgimple_expr_type (stmt),\n+\t\t\tTREE_TYPE (gimple_assign_lhs (stmt)),\n \t\t\tget_val_for (gimple_assign_rhs1 (stmt), base));\n   else if (gimple_assign_rhs_class (stmt) == GIMPLE_BINARY_RHS)\n     {\n@@ -3031,7 +3031,7 @@ get_val_for (tree x, tree base)\n       else\n \tgcc_unreachable ();\n       return fold_build2 (gimple_assign_rhs_code (stmt),\n-\t\t\t  gimple_expr_type (stmt), rhs1, rhs2);\n+\t\t\t  TREE_TYPE (gimple_assign_lhs (stmt)), rhs1, rhs2);\n     }\n   else\n     gcc_unreachable ();"}, {"sha": "7900df946f44cbffbcc2ffebbcc04e0922994d0f", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce777eaedfdc55850b429f97b2093f2de5da09de/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce777eaedfdc55850b429f97b2093f2de5da09de/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=ce777eaedfdc55850b429f97b2093f2de5da09de", "patch": "@@ -423,7 +423,7 @@ static unsigned int vn_nary_length_from_stmt (gimple *);\n static vn_nary_op_t alloc_vn_nary_op_noinit (unsigned int, obstack *);\n static vn_nary_op_t vn_nary_op_insert_into (vn_nary_op_t,\n \t\t\t\t\t    vn_nary_op_table_type *, bool);\n-static void init_vn_nary_op_from_stmt (vn_nary_op_t, gimple *);\n+static void init_vn_nary_op_from_stmt (vn_nary_op_t, gassign *);\n static void init_vn_nary_op_from_pieces (vn_nary_op_t, unsigned int,\n \t\t\t\t\t enum tree_code, tree, tree *);\n static tree vn_lookup_simplify_result (gimple_match_op *);\n@@ -2377,7 +2377,7 @@ vn_nary_build_or_lookup_1 (gimple_match_op *res_op, bool insert)\n \t  vno1->length = length;\n \t  vno1->predicated_values = 0;\n \t  vno1->u.result = result;\n-\t  init_vn_nary_op_from_stmt (vno1, new_stmt);\n+\t  init_vn_nary_op_from_stmt (vno1, as_a <gassign *> (new_stmt));\n \t  vn_nary_op_insert_into (vno1, valid_info->nary, true);\n \t  /* Also do not link it into the undo chain.  */\n \t  last_inserted_nary = vno1->next;\n@@ -3882,12 +3882,12 @@ vn_nary_length_from_stmt (gimple *stmt)\n /* Initialize VNO from STMT.  */\n \n static void\n-init_vn_nary_op_from_stmt (vn_nary_op_t vno, gimple *stmt)\n+init_vn_nary_op_from_stmt (vn_nary_op_t vno, gassign *stmt)\n {\n   unsigned i;\n \n   vno->opcode = gimple_assign_rhs_code (stmt);\n-  vno->type = gimple_expr_type (stmt);\n+  vno->type = TREE_TYPE (gimple_assign_lhs (stmt));\n   switch (vno->opcode)\n     {\n     case REALPART_EXPR:\n@@ -3968,7 +3968,7 @@ vn_nary_op_lookup_stmt (gimple *stmt, vn_nary_op_t *vnresult)\n   vn_nary_op_t vno1\n     = XALLOCAVAR (struct vn_nary_op_s,\n \t\t  sizeof_vn_nary_op (vn_nary_length_from_stmt (stmt)));\n-  init_vn_nary_op_from_stmt (vno1, stmt);\n+  init_vn_nary_op_from_stmt (vno1, as_a <gassign *> (stmt));\n   return vn_nary_op_lookup_1 (vno1, vnresult);\n }\n \n@@ -4221,7 +4221,7 @@ vn_nary_op_insert_stmt (gimple *stmt, tree result)\n   vn_nary_op_t vno1\n     = alloc_vn_nary_op (vn_nary_length_from_stmt (stmt),\n \t\t\tresult, VN_INFO (result)->value_id);\n-  init_vn_nary_op_from_stmt (vno1, stmt);\n+  init_vn_nary_op_from_stmt (vno1, as_a <gassign *> (stmt));\n   return vn_nary_op_insert_into (vno1, valid_info->nary, true);\n }\n "}]}