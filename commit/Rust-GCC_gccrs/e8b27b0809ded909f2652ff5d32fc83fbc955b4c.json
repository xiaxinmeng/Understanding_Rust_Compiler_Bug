{"sha": "e8b27b0809ded909f2652ff5d32fc83fbc955b4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThiMjdiMDgwOWRlZDkwOWYyNjUyZmY1ZDMyZmM4M2ZiYzk1NWI0Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-06-30T15:11:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-06-30T15:11:14Z"}, "message": "re PR c++/61539 (ICE: in unify_one_argument, at cp/pt.c:15465)\n\n\tPR c++/61539\n\t* pt.c (unify_one_argument): Type/expression mismatch just causes\n\tdeduction failure.\n\nFrom-SVN: r212154", "tree": {"sha": "cbef86c87287d6efdc3ea30284a8b068619a5ffe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbef86c87287d6efdc3ea30284a8b068619a5ffe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8b27b0809ded909f2652ff5d32fc83fbc955b4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8b27b0809ded909f2652ff5d32fc83fbc955b4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8b27b0809ded909f2652ff5d32fc83fbc955b4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8b27b0809ded909f2652ff5d32fc83fbc955b4c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "71d1add36394c36f3bb59fc3282e65a1e865baa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71d1add36394c36f3bb59fc3282e65a1e865baa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71d1add36394c36f3bb59fc3282e65a1e865baa2"}], "stats": {"total": 58, "additions": 56, "deletions": 2}, "files": [{"sha": "f1212369d2fd12f06781c0e8ef06b397b9b87de6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b27b0809ded909f2652ff5d32fc83fbc955b4c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b27b0809ded909f2652ff5d32fc83fbc955b4c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e8b27b0809ded909f2652ff5d32fc83fbc955b4c", "patch": "@@ -1,5 +1,9 @@\n 2014-06-30  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/61539\n+\t* pt.c (unify_one_argument): Type/expression mismatch just causes\n+\tdeduction failure.\n+\n \t* semantics.c (simplify_aggr_init_expr): Remove remnants of\n \t2014-04-11 change.\n "}, {"sha": "7f33b6d5ffa8feda8ece9ea63ec263a3bc5dfa13", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b27b0809ded909f2652ff5d32fc83fbc955b4c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b27b0809ded909f2652ff5d32fc83fbc955b4c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e8b27b0809ded909f2652ff5d32fc83fbc955b4c", "patch": "@@ -16501,8 +16501,9 @@ unify_one_argument (tree tparms, tree targs, tree parm, tree arg,\n \tmaybe_adjust_types_for_deduction (strict, &parm, &arg, arg_expr);\n     }\n   else\n-    gcc_assert ((TYPE_P (parm) || TREE_CODE (parm) == TEMPLATE_DECL)\n-\t\t== (TYPE_P (arg) || TREE_CODE (arg) == TEMPLATE_DECL));\n+    if ((TYPE_P (parm) || TREE_CODE (parm) == TEMPLATE_DECL)\n+\t!= (TYPE_P (arg) || TREE_CODE (arg) == TEMPLATE_DECL))\n+      return unify_template_argument_mismatch (explain_p, parm, arg);\n \n   /* For deduction from an init-list we need the actual list.  */\n   if (arg_expr && BRACE_ENCLOSED_INITIALIZER_P (arg_expr))"}, {"sha": "20fcd5b4fe7c21ce83367d2aea547b83e666e1a3", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic160.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b27b0809ded909f2652ff5d32fc83fbc955b4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic160.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b27b0809ded909f2652ff5d32fc83fbc955b4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic160.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic160.C?ref=e8b27b0809ded909f2652ff5d32fc83fbc955b4c", "patch": "@@ -0,0 +1,49 @@\n+// PR c++/61539\n+// { dg-do compile { target c++11 } }\n+\n+template <typename _CharT> class A;\n+template <typename> class B;\n+template <class charT> class C;\n+template <> class C<char>\n+{\n+  virtual void xparse (int &, const B<A<char> > &) const;\n+};\n+template <class T, class charT = char> class G : C<charT>\n+{\n+public:\n+  G (void *) {}\n+  void default_value (const T &);\n+  void xparse (int &, const B<A<charT> > &) const;\n+};\n+template <class T, class charT>\n+void validate (int &, const B<A<charT> > &, T *, int);\n+template <class T, class charT>\n+void G<T, charT>::xparse (int &p1, const B<A<charT> > &p2) const\n+{\n+  validate (p1, p2, (T *)0, 0);\n+}\n+template <class T> G<T> *value (T *) { return new G<T>(0); }\n+namespace Eigen\n+{\n+template <typename T> struct D;\n+template <typename, int, int, int = 0, int = 0, int = 0 > class F;\n+template <typename _Scalar, int _Rows, int _Cols, int _Options, int _MaxRows,\n+          int _MaxCols>\n+struct D<F<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols> >\n+{\n+  typedef _Scalar Scalar;\n+};\n+template <typename, int, int, int, int, int _MaxCols> class F\n+{\n+public:\n+  typedef typename Eigen::D<F>::Scalar Scalar;\n+  F (const Scalar &, const Scalar &, const Scalar &);\n+};\n+template <class... T>\n+void validate (int &, const B<A<char> > &, Eigen::F<T...> *);\n+}\n+int main (int, char *[])\n+{\n+  Eigen::F<double, 3, 1> a (0, 0, 0);\n+  value (&a)->default_value (Eigen::F<double, 3, 1>(0, 0, 0));\n+}"}]}