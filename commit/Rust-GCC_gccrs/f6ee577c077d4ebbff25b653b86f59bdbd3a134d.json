{"sha": "f6ee577c077d4ebbff25b653b86f59bdbd3a134d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZlZTU3N2MwNzdkNGViYmZmMjViNjUzYjg2ZjU5YmRiZDNhMTM0ZA==", "commit": {"author": {"name": "Adrian Straetling", "email": "straetling@de.ibm.com", "date": "2005-05-09T17:14:22Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-05-09T17:14:22Z"}, "message": "s390.md: (\"hc\"): New mode attribute.\n\n2005-05-09  Adrian Straetling  <straetling@de.ibm.com>\n\n\t* config/s390/s390.md: (\"hc\"): New mode attribute.\n\t(\"extendhidi2\", \"extendqidi2\"): Merge.\n\t(\"*extendhidi2\", \"*extendqidi2\"): Merge.\n\t(\"extendhisi2\", \"extendqisi2\"): Merge.\n\t(\"zero_extendhidi2\", \"zero_extendqidi2\"): Merge.\n\t(\"*zero_extendhidi2\", \"*zero_extendqidi2\"): Merge.\n\tMerged 2 define_split.\n\t(\"*zero_extendhisi2\", \"*zero_extendqisi2\"): Merge.\n\t(\"*zero_extendhisi2_64\", \"*zero_extendqisi2_64\"): Merge.\n\nFrom-SVN: r99453", "tree": {"sha": "05cfd40adc0b4ab63a696cd3993a26e16ac446d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05cfd40adc0b4ab63a696cd3993a26e16ac446d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6ee577c077d4ebbff25b653b86f59bdbd3a134d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6ee577c077d4ebbff25b653b86f59bdbd3a134d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6ee577c077d4ebbff25b653b86f59bdbd3a134d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6ee577c077d4ebbff25b653b86f59bdbd3a134d/comments", "author": null, "committer": null, "parents": [{"sha": "fa77b2518acb7ae2f5a82ac599e04d9744aba088", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa77b2518acb7ae2f5a82ac599e04d9744aba088", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa77b2518acb7ae2f5a82ac599e04d9744aba088"}], "stats": {"total": 199, "additions": 55, "deletions": 144}, "files": [{"sha": "56bbb70dc1ed9c13f4aa071a6b81f7a60ee615b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ee577c077d4ebbff25b653b86f59bdbd3a134d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ee577c077d4ebbff25b653b86f59bdbd3a134d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6ee577c077d4ebbff25b653b86f59bdbd3a134d", "patch": "@@ -1,3 +1,15 @@\n+2005-05-09  Adrian Straetling  <straetling@de.ibm.com>\n+\n+\t* config/s390/s390.md: (\"hc\"): New mode attribute.\n+\t(\"extendhidi2\", \"extendqidi2\"): Merge.\n+\t(\"*extendhidi2\", \"*extendqidi2\"): Merge.\n+\t(\"extendhisi2\", \"extendqisi2\"): Merge.\n+\t(\"zero_extendhidi2\", \"zero_extendqidi2\"): Merge.\n+\t(\"*zero_extendhidi2\", \"*zero_extendqidi2\"): Merge.\n+\tMerged 2 define_split.\n+\t(\"*zero_extendhisi2\", \"*zero_extendqisi2\"): Merge.\n+\t(\"*zero_extendhisi2_64\", \"*zero_extendqisi2_64\"): Merge.\n+\n 2005-05-09  Adrian Straetling  <straetling@de.ibm.com>\n \n \t* config/s390/s390.md: (\"COMPARE\"): New mode macro."}, {"sha": "5b0637d2c7892c68fa26c4b15e68479fb2a96c8d", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 43, "deletions": 144, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6ee577c077d4ebbff25b653b86f59bdbd3a134d/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6ee577c077d4ebbff25b653b86f59bdbd3a134d/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=f6ee577c077d4ebbff25b653b86f59bdbd3a134d", "patch": "@@ -264,6 +264,10 @@\n ;; of a SImode register.\n (define_mode_attr icm_lo [(HI \"3\") (QI \"1\")])\n \n+;; In HQI templates, a string like \"llg<hc>\" will expand to \"llgh\" in\n+;; HImode and \"llgc\" in QImode.\n+(define_mode_attr hc [(HI \"h\") (QI \"c\")])\n+\n ;; Maximum unsigned integer that fits in MODE.\n (define_mode_attr max_uint [(HI \"65535\") (QI \"255\")])\n \n@@ -2366,27 +2370,29 @@\n   [(set_attr \"op_type\" \"RRE,RXY\")])\n \n ;\n-; extendhidi2 instruction pattern(s).\n+; extend(hi|qi)di2 instruction pattern(s).\n ;\n \n-(define_expand \"extendhidi2\"\n+(define_expand \"extend<mode>di2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (sign_extend:DI (match_operand:HI 1 \"register_operand\" \"\")))]\n+        (sign_extend:DI (match_operand:HQI 1 \"register_operand\" \"\")))]\n   \"\"\n   \"\n {\n   if (!TARGET_64BIT)\n     {\n       rtx tmp = gen_reg_rtx (SImode);\n-      emit_insn (gen_extendhisi2 (tmp, operands[1]));\n+      emit_insn (gen_extend<mode>si2 (tmp, operands[1]));\n       emit_insn (gen_extendsidi2 (operands[0], tmp));\n       DONE;\n     }\n   else\n     {\n+      rtx bitcount = GEN_INT (GET_MODE_BITSIZE (DImode) - \n+\t\t\t      GET_MODE_BITSIZE (<MODE>mode));\n       operands[1] = gen_lowpart (DImode, operands[1]);\n-      emit_insn (gen_ashldi3 (operands[0], operands[1], GEN_INT (48)));\n-      emit_insn (gen_ashrdi3 (operands[0], operands[0], GEN_INT (48)));\n+      emit_insn (gen_ashldi3 (operands[0], operands[1], bitcount));\n+      emit_insn (gen_ashrdi3 (operands[0], operands[0], bitcount));\n       DONE;\n     }\n }\n@@ -2399,33 +2405,6 @@\n   \"lgh\\t%0,%1\"\n   [(set_attr \"op_type\" \"RXY\")])\n \n-;\n-; extendqidi2 instruction pattern(s).\n-;\n-\n-(define_expand \"extendqidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (sign_extend:DI (match_operand:QI 1 \"register_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  if (!TARGET_64BIT)\n-    {\n-      rtx tmp = gen_reg_rtx (SImode);\n-      emit_insn (gen_extendqisi2 (tmp, operands[1]));\n-      emit_insn (gen_extendsidi2 (operands[0], tmp));\n-      DONE;\n-    }\n-  else\n-    {\n-      operands[1] = gen_lowpart (DImode, operands[1]);\n-      emit_insn (gen_ashldi3 (operands[0], operands[1], GEN_INT (56)));\n-      emit_insn (gen_ashrdi3 (operands[0], operands[0], GEN_INT (56)));\n-      DONE;\n-    }\n-}\n-\")\n-\n (define_insn \"*extendqidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n         (sign_extend:DI (match_operand:QI 1 \"memory_operand\" \"m\")))]\n@@ -2449,18 +2428,20 @@\n   \"\")\n \n ;\n-; extendhisi2 instruction pattern(s).\n+; extend(hi|qi)si2 instruction pattern(s).\n ;\n \n-(define_expand \"extendhisi2\"\n+(define_expand \"extend<mode>si2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"\")))]\n+        (sign_extend:SI (match_operand:HQI 1 \"register_operand\" \"\")))]\n   \"\"\n   \"\n {\n+  rtx bitcount = GEN_INT (GET_MODE_BITSIZE(SImode) - \n+\t\t\t  GET_MODE_BITSIZE(<MODE>mode));\n   operands[1] = gen_lowpart (SImode, operands[1]);\n-  emit_insn (gen_ashlsi3 (operands[0], operands[1], GEN_INT (16)));\n-  emit_insn (gen_ashrsi3 (operands[0], operands[0], GEN_INT (16)));\n+  emit_insn (gen_ashlsi3 (operands[0], operands[1], bitcount));\n+  emit_insn (gen_ashrsi3 (operands[0], operands[0], bitcount));\n   DONE;\n }\n \")\n@@ -2474,23 +2455,6 @@\n    lhy\\t%0,%1\"\n   [(set_attr \"op_type\" \"RX,RXY\")])\n \n-;\n-; extendqisi2 instruction pattern(s).\n-;\n-\n-(define_expand \"extendqisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (sign_extend:SI (match_operand:QI 1 \"register_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  operands[1] = gen_lowpart (SImode, operands[1]);\n-  emit_insn (gen_ashlsi3 (operands[0], operands[1], GEN_INT (24)));\n-  emit_insn (gen_ashrsi3 (operands[0], operands[0], GEN_INT (24)));\n-  DONE;\n-}\n-\")\n-\n (define_insn \"*extendqisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n         (sign_extend:SI (match_operand:QI 1 \"memory_operand\" \"m\")))]\n@@ -2548,37 +2512,39 @@\n   [(set_attr \"op_type\" \"RRE,RXY\")])\n \n ;\n-; zero_extendhidi2 instruction pattern(s).\n+; zero_extend(hi|qi)di2 instruction pattern(s).\n ;\n \n-(define_expand \"zero_extendhidi2\"\n+(define_expand \"zero_extend<mode>di2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (zero_extend:DI (match_operand:HI 1 \"register_operand\" \"\")))]\n+        (zero_extend:DI (match_operand:HQI 1 \"register_operand\" \"\")))]\n   \"\"\n   \"\n {\n   if (!TARGET_64BIT)\n     {\n       rtx tmp = gen_reg_rtx (SImode);\n-      emit_insn (gen_zero_extendhisi2 (tmp, operands[1]));\n+      emit_insn (gen_zero_extend<mode>si2 (tmp, operands[1]));\n       emit_insn (gen_zero_extendsidi2 (operands[0], tmp));\n       DONE;\n     }\n   else\n     {\n+      rtx bitcount = GEN_INT (GET_MODE_BITSIZE(DImode) - \n+\t\t\t      GET_MODE_BITSIZE(<MODE>mode));\n       operands[1] = gen_lowpart (DImode, operands[1]);\n-      emit_insn (gen_ashldi3 (operands[0], operands[1], GEN_INT (48)));\n-      emit_insn (gen_lshrdi3 (operands[0], operands[0], GEN_INT (48)));\n+      emit_insn (gen_ashldi3 (operands[0], operands[1], bitcount));\n+      emit_insn (gen_lshrdi3 (operands[0], operands[0], bitcount));\n       DONE;\n     }\n }\n \")\n \n-(define_insn \"*zero_extendhidi2\"\n+(define_insn \"*zero_extend<mode>di2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (zero_extend:DI (match_operand:HI 1 \"memory_operand\" \"m\")))]\n+        (zero_extend:DI (match_operand:HQI 1 \"memory_operand\" \"m\")))]\n   \"TARGET_64BIT\"\n-  \"llgh\\t%0,%1\"\n+  \"llg<hc>\\t%0,%1\"\n   [(set_attr \"op_type\" \"RXY\")])\n \n ;\n@@ -2616,17 +2582,6 @@\n    llgt\\t%0,%1\"\n   [(set_attr \"op_type\"  \"RRE,RXE\")])\n \n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n-\t\t(const_int 2147483647)))\n-   (clobber (reg:CC 33))]\n-  \"TARGET_64BIT && reload_completed\"\n-  [(set (match_dup 0)\n-        (and:SI (match_dup 1)\n-\t\t(const_int 2147483647)))]\n-  \"\")\n-\n (define_insn \"*llgt_didi\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n         (and:DI (match_operand:DI 1 \"nonimmediate_operand\" \"d,o\")\n@@ -2638,71 +2593,38 @@\n   [(set_attr \"op_type\"  \"RRE,RXE\")])\n \n (define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (and:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\")\n-                (const_int 2147483647)))\n+  [(set (match_operand:GPR 0 \"register_operand\" \"\")\n+        (and:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"\")\n+                 (const_int 2147483647)))\n    (clobber (reg:CC 33))]\n   \"TARGET_64BIT && reload_completed\"\n   [(set (match_dup 0)\n-        (and:DI (match_dup 1)\n-                (const_int 2147483647)))]\n+        (and:GPR (match_dup 1)\n+                 (const_int 2147483647)))]\n   \"\")\n \n ;\n-; zero_extendqidi2 instruction pattern(s)\n-;\n-\n-(define_expand \"zero_extendqidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (zero_extend:DI (match_operand:QI 1 \"register_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  if (!TARGET_64BIT)\n-    {\n-      rtx tmp = gen_reg_rtx (SImode);\n-      emit_insn (gen_zero_extendqisi2 (tmp, operands[1]));\n-      emit_insn (gen_zero_extendsidi2 (operands[0], tmp));\n-      DONE;\n-    }\n-  else\n-    {\n-      operands[1] = gen_lowpart (DImode, operands[1]);\n-      emit_insn (gen_ashldi3 (operands[0], operands[1], GEN_INT (56)));\n-      emit_insn (gen_lshrdi3 (operands[0], operands[0], GEN_INT (56)));\n-      DONE;\n-    }\n-}\n-\")\n-\n-(define_insn \"*zero_extendqidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (zero_extend:DI (match_operand:QI 1 \"memory_operand\" \"m\")))]\n-  \"TARGET_64BIT\"\n-  \"llgc\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RXY\")])\n-\n-;\n-; zero_extendhisi2 instruction pattern(s).\n+; zero_extend(hi|qi)si2 instruction pattern(s).\n ;\n \n-(define_expand \"zero_extendhisi2\"\n+(define_expand \"zero_extend<mode>si2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"\")))]\n+        (zero_extend:SI (match_operand:HQI 1 \"register_operand\" \"\")))]\n   \"\"\n   \"\n {\n   operands[1] = gen_lowpart (SImode, operands[1]);\n-  emit_insn (gen_andsi3 (operands[0], operands[1], GEN_INT (0xffff)));\n+  emit_insn (gen_andsi3 (operands[0], operands[1], \n+    GEN_INT ((1 << GET_MODE_BITSIZE(<MODE>mode)) - 1)));\n   DONE;\n }\n \")\n \n-(define_insn \"*zero_extendhisi2_64\"\n+(define_insn \"*zero_extend<mode>si2_64\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (zero_extend:SI (match_operand:HI 1 \"memory_operand\" \"m\")))]\n+        (zero_extend:SI (match_operand:HQI 1 \"memory_operand\" \"m\")))]\n   \"TARGET_ZARCH\"\n-  \"llgh\\t%0,%1\"\n+  \"llg<hc>\\t%0,%1\"\n   [(set_attr \"op_type\" \"RXY\")])\n \n (define_insn_and_split \"*zero_extendhisi2_31\"\n@@ -2718,29 +2640,6 @@\n      (clobber (reg:CC 33))])]\n   \"operands[2] = gen_lowpart (HImode, operands[0]);\")\n \n-;\n-; zero_extendqisi2 instruction pattern(s).\n-;\n-\n-(define_expand \"zero_extendqisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (zero_extend:SI (match_operand:QI 1 \"register_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  operands[1] = gen_lowpart (SImode, operands[1]);\n-  emit_insn (gen_andsi3 (operands[0], operands[1], GEN_INT (0xff)));\n-  DONE;\n-}\n-\")\n-\n-(define_insn \"*zero_extendqisi2_64\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (zero_extend:SI (match_operand:QI 1 \"memory_operand\" \"m\")))]\n-  \"TARGET_ZARCH\"\n-  \"llgc\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RXY\")])\n-\n (define_insn_and_split \"*zero_extendqisi2_31\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n         (zero_extend:SI (match_operand:QI 1 \"memory_operand\" \"m\")))]"}]}