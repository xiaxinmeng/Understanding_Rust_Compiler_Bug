{"sha": "ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ1YjlmOTZlZWUxZTEzZmJjZDhlMmE4YmUxM2VjYWQxMWU2MzA4NQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2005-07-08T05:51:06Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2005-07-08T05:51:06Z"}, "message": "Index: ChangeLog\n2005-07-07  Geoffrey Keating  <geoffk@apple.com>\n\n\t* config.gcc (*-*-darwin*): Only one target-specific header file\n\tfor generic darwin.\n\t(powerpc-*-darwin*): Add version-specific header files.\n\t* configure.in (gcc_AC_CHECK_DECLS): Add strverscmp.\n\t* config.in: Regenerate.\n\t* configure: Regenerate.\n\t* gcc.c: Include xregex.h.\n\t(version_compare_spec_function): New.\n\t(spec_function): Add version-compare.\n\t(replace_outfile_spec_function): Reformat comment.\n\t(compare_version_strings): New.\n\t* config/darwin-c.c (version_as_macro): New.\n\t(builtin_define): New.\n\t(darwin_cpp_builtins): New.\n\t* config/darwin-protos.h (darwin_cpp_builtins): New.\n\t* config/darwin.h (CPP_SPEC): Don't define APPLE_CC here.\n\t(LIB_SPEC): Make unconditional, update comment.\n\t(TARGET_C99_FUNCTIONS): Define.\n\t* config/darwin.opt: Sort.\n\t(mmacosx-version-min=): New.\n\t* config/darwin7.h: Delete.\n\t* config/darwin8.h: Delete.\n\t* config/i386/darwin.h (): Call darwin_cpp_builtins.\n\t* config/rs6000/darwin.h (): Call darwin_cpp_builtins.\n\t(TARGET_C99_FUNCTIONS): Define.\n\t* config/rs6000/darwin7.h: New.\n\t* config/rs6000/darwin8.h: New.\n\t* doc/invoke.texi (Darwin Options): Add -mmacosx-version-min=\n\t(-mmacosx-version-min): Document.\n\nIndex: testsuite/ChangeLog\n2005-07-07  Geoffrey Keating  <geoffk@apple.com>\n\n\t* gcc.dg/darwin-version-1.c: New.\n\t* gcc.dg/builtins-18.c: On Darwin, needs -mmacosx-version-min=10.3.\n\t* gcc.dg/builtins-20.c: Likewise.\n\t* gcc.dg/builtins-53.c: Likewise.\n\t* gcc.dg/torture/builtins-convert-1.c: Likewise.\n\t* gcc.dg/torture/builtins-convert-2.c: Likewise.\n\t* gcc.dg/torture/builtins-convert-3.c: Likewise.\n\t* gcc.dg/torture/builtins-power-1.c: Likewise.\n\t* gcc.dg/builtins-config.h: Complain if macosx-version-min not set\n\ton Darwin.\n\nFrom-SVN: r101753", "tree": {"sha": "196c92bd39ca5ca9c2d8938d216167fc1edd704d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/196c92bd39ca5ca9c2d8938d216167fc1edd704d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5f7d29798eb704cf8d552e1d9ebfc5994382ee5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f7d29798eb704cf8d552e1d9ebfc5994382ee5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f7d29798eb704cf8d552e1d9ebfc5994382ee5b"}], "stats": {"total": 369, "additions": 319, "deletions": 50}, "files": [{"sha": "1c2d6b9e79cbd5973fe3b97506de3396d1ca1be4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -1,3 +1,35 @@\n+2005-07-07  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* config.gcc (*-*-darwin*): Only one target-specific header file\n+\tfor generic darwin.\n+\t(powerpc-*-darwin*): Add version-specific header files.\n+\t* configure.in (gcc_AC_CHECK_DECLS): Add strverscmp.\n+\t* config.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* gcc.c: Include xregex.h.\n+\t(version_compare_spec_function): New.\n+\t(spec_function): Add version-compare.\n+\t(replace_outfile_spec_function): Reformat comment.\n+\t(compare_version_strings): New.\n+\t* config/darwin-c.c (version_as_macro): New.\n+\t(builtin_define): New.\n+\t(darwin_cpp_builtins): New.\n+\t* config/darwin-protos.h (darwin_cpp_builtins): New.\n+\t* config/darwin.h (CPP_SPEC): Don't define APPLE_CC here.\n+\t(LIB_SPEC): Make unconditional, update comment.\n+\t(TARGET_C99_FUNCTIONS): Define.\n+\t* config/darwin.opt: Sort.\n+\t(mmacosx-version-min=): New.\n+\t* config/darwin7.h: Delete.\n+\t* config/darwin8.h: Delete.\n+\t* config/i386/darwin.h (): Call darwin_cpp_builtins.\n+\t* config/rs6000/darwin.h (): Call darwin_cpp_builtins.\n+\t(TARGET_C99_FUNCTIONS): Define.\n+\t* config/rs6000/darwin7.h: New.\n+\t* config/rs6000/darwin8.h: New.\n+\t* doc/invoke.texi (Darwin Options): Add -mmacosx-version-min=\n+\t(-mmacosx-version-min): Document.\n+\n 2005-07-07  Ian Lance Taylor  <ian@airs.com>\n \n \t* config/mips/mips.md (abs<mode>2) [GPR]: Remove."}, {"sha": "4119abbdbde1b43361d98666d95789b1c83a0aa2", "filename": "gcc/config.gcc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -355,12 +355,6 @@ esac\n # Common parts for widely ported systems.\n case ${target} in\n *-*-darwin*)\n-  case ${target} in\n-    *-darwin1[0-9]*) tm_file=\"${tm_file} darwin8.h\" ;;\n-    *-darwin[0-6]*) ;;\n-    *-darwin7*) tm_file=\"${tm_file} darwin7.h\" ;;\n-    *) tm_file=\"${tm_file} darwin8.h\" ;;\n-  esac\n   tm_file=\"${tm_file} darwin.h\"\n   tm_p_file=\"${tm_p_file} darwin-protos.h\"\n   tmake_file=\"t-darwin t-slibgcc-darwin\"\n@@ -1608,9 +1602,15 @@ powerpc-*-darwin*)\n \ttmake_file=\"${tmake_file} rs6000/t-darwin\"\n \textra_options=\"${extra_options} rs6000/darwin.opt\"\n \tcase ${target} in\n-\t  *-darwin1[0-9]*) tmake_file=\"${tmake_file} rs6000/t-darwin8\" ;;\n-\t  *-darwin[0-7]*) ;;\n-\t  *-darwin[8-9]*) tmake_file=\"${tmake_file} rs6000/t-darwin8\" ;;\n+\t  *-darwin1[0-9]* | *-darwin[8-9]*)\n+\t    tmake_file=\"${tmake_file} rs6000/t-darwin8\" \n+\t    tm_file=\"${tm_file} rs6000/darwin8.h\"\n+\t    ;;\n+\t  *-darwin7*)\n+\t    tm_file=\"${tm_file} rs6000/darwin7.h\"\n+\t    ;;\n+\t  *-darwin[0-6]*)\n+\t    ;;\n \tesac\n \textra_headers=altivec.h\n \t;;"}, {"sha": "3fc2f58a64f96fafa2a5e60d2fa69347d9247770", "filename": "gcc/config.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -577,6 +577,13 @@\n #endif\n \n \n+/* Define to 1 if we found a declaration for 'strverscmp', otherwise define to\n+   0. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_DECL_STRVERSCMP\n+#endif\n+\n+\n /* Define to 1 if we found a declaration for 'times', otherwise define to 0.\n    */\n #ifndef USED_FOR_TARGET"}, {"sha": "738f07c81a730c9821348b534e6dd03bfc277c2c", "filename": "gcc/config/darwin-c.c", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fconfig%2Fdarwin-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fconfig%2Fdarwin-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-c.c?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -542,3 +542,57 @@ find_subframework_header (cpp_reader *pfile, const char *header, cpp_dir **dirp)\n \n   return 0;\n }\n+\n+/* Return the value of darwin_macosx_version_min suitable for the\n+   __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ macro,\n+   so '10.4.2' becomes 1042.  \n+   Print a warning if the version number is not known.  */\n+static const char *\n+version_as_macro (void)\n+{\n+  static char result[] = \"1000\";\n+  \n+  if (strncmp (darwin_macosx_version_min, \"10.\", 3) != 0)\n+    goto fail;\n+  if (! ISDIGIT (darwin_macosx_version_min[3]))\n+    goto fail;\n+  result[2] = darwin_macosx_version_min[3];\n+  if (darwin_macosx_version_min[4] != '\\0')\n+    {\n+      if (darwin_macosx_version_min[4] != '.')\n+\tgoto fail;\n+      if (! ISDIGIT (darwin_macosx_version_min[5]))\n+\tgoto fail;\n+      if (darwin_macosx_version_min[6] != '\\0')\n+\tgoto fail;\n+      result[3] = darwin_macosx_version_min[5];\n+    }\n+  else\n+    result[3] = '0';\n+  \n+  return result;\n+  \n+ fail:\n+  error (\"Unknown value %qs of -mmacosx-version-min\",\n+\t darwin_macosx_version_min);\n+  return \"1000\";\n+}\n+\n+/* Define additional CPP flags for Darwin.   */\n+\n+#define builtin_define(TXT) cpp_define (pfile, TXT)\n+\n+void\n+darwin_cpp_builtins (cpp_reader *pfile)\n+{\n+  builtin_define (\"__MACH__\");\n+  builtin_define (\"__APPLE__\");\n+\n+  /* __APPLE_CC__ is defined as some old Apple include files expect it\n+     to be defined and won't work if it isn't.  */\n+  builtin_define_with_value (\"__APPLE_CC__\", \"1\", false);\n+\n+  if (darwin_macosx_version_min)\n+    builtin_define_with_value (\"__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__\",\n+\t\t\t       version_as_macro(), false);\n+}"}, {"sha": "dfada767b0104a15a8c83af8bbf21f65af119cd2", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes.\n-   Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -135,3 +135,4 @@ extern void darwin_assemble_visibility (tree, int);\n extern void darwin_asm_output_dwarf_delta (FILE *, int, const char *,\n \t\t\t\t\t   const char *);\n extern bool darwin_binds_local_p (tree);\n+extern void darwin_cpp_builtins (struct cpp_reader *);"}, {"sha": "9802fe4cf46a260edc5fae542daa71d1c5966956", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -185,13 +185,11 @@ Boston, MA 02110-1301, USA.  */\n    !strcmp (STR, \"dylinker_install_name\") ? 1 : \\\n    0)\n \n-/* Machine dependent cpp options.  __APPLE_CC__ is defined as the\n-   Apple include files expect it to be defined and won't work if it\n-   isn't.  */\n+/* Machine dependent cpp options.  Don't add more options here, add\n+   them to darwin_cpp_builtins in darwin-c.c.  */\n \n #undef\tCPP_SPEC\n-#define CPP_SPEC \"%{static:%{!dynamic:-D__STATIC__}}%{!static:-D__DYNAMIC__}\\\n-    -D__APPLE_CC__=1\"\n+#define CPP_SPEC \"%{static:%{!dynamic:-D__STATIC__}}%{!static:-D__DYNAMIC__}\"\n \n /* This is mostly a clone of the standard LINK_COMMAND_SPEC, plus\n    precomp, libtool, and fat build additions.  Also we\n@@ -291,12 +289,9 @@ Boston, MA 02110-1301, USA.  */\n    %{dylinker} %{Mach} \"\n \n \n-/* Machine dependent libraries but do not redefine it if we already on 7.0 and\n-   above as it needs to link with libmx also.  */\n+/* Machine dependent libraries.  */\n \n-#ifndef\tLIB_SPEC\n #define LIB_SPEC \"%{!static:-lSystem}\"\n-#endif\n \n /* -dynamiclib implies -shared-libgcc just like -shared would on linux.  */\n #define REAL_LIBGCC_SPEC \\\n@@ -1033,10 +1028,8 @@ void add_framework_path (char *);\n \n #define TARGET_HAS_F_SETLKW\n \n-/* Darwin before 7.0 does not have C99 functions.   */\n-#ifndef TARGET_C99_FUNCTIONS\n-#define TARGET_C99_FUNCTIONS 0\n-#endif\n+/* All new versions of Darwin have C99 functions.  */\n+#define TARGET_C99_FUNCTIONS\n \n #define WINT_TYPE \"int\"\n "}, {"sha": "90a094b84407fd4e4427a0b68ff37230858a4bea", "filename": "gcc/config/darwin.opt", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fconfig%2Fdarwin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fconfig%2Fdarwin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.opt?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -19,10 +19,14 @@\n ; Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n ; 02110-1301, USA.\n \n-mone-byte-bool\n-Target RejectNegative Report Var(darwin_one_byte_bool)\n-Set sizeof(bool) to 1\n-\n mfix-and-continue\n Target Report Var(darwin_fix_and_continue)\n Generate code suitable for fast turn around debugging\n+\n+mmacosx-version-min=\n+Target Joined Report Var(darwin_macosx_version_min)\n+The earliest MacOS X version on which this program will run\n+\n+mone-byte-bool\n+Target RejectNegative Report Var(darwin_one_byte_bool)\n+Set sizeof(bool) to 1"}, {"sha": "7e8b2dcc0d220393c269d15a55ac4f35d1596587", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -33,8 +33,7 @@ Boston, MA 02110-1301, USA.  */\n     {                                           \\\n       builtin_define (\"__i386__\");              \\\n       builtin_define (\"__LITTLE_ENDIAN__\");     \\\n-      builtin_define (\"__MACH__\");              \\\n-      builtin_define (\"__APPLE__\");             \\\n+      darwin_cpp_builtins (pfile);\t\t\\\n     }                                           \\\n   while (0)\n "}, {"sha": "6086445c62d3e98674aced5fa076fb36dc364d16", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -54,8 +54,7 @@\n       if (TARGET_64BIT) builtin_define (\"__ppc64__\");  \\\n       builtin_define (\"__POWERPC__\");           \\\n       builtin_define (\"__NATURAL_ALIGNMENT__\"); \\\n-      builtin_define (\"__MACH__\");              \\\n-      builtin_define (\"__APPLE__\");             \\\n+      darwin_cpp_builtins (pfile);\t\t\\\n     }                                           \\\n   while (0)\n \n@@ -415,3 +414,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* This is the reserved ivar address Objective-C.  */\n #define OFFS_ASSIGNIVAR_FAST\t\t0xFFFEFEC0\n+\n+/* Old versions of Mac OS/Darwin don't have C99 functions available.  */\n+#undef TARGET_C99_FUNCTIONS\n+#define TARGET_C99_FUNCTIONS\t\t\t\t\t\\\n+  (TARGET_64BIT\t\t\t\t\t\t\t\\\n+   || (darwin_macosx_version_min\t\t\t\t\\\n+       && strverscmp (darwin_macosx_version_min, \"10.3\") >= 0))"}, {"sha": "4c1cda3ca8ec0e16f7b4009721c943f9923d14fb", "filename": "gcc/config/rs6000/darwin7.h", "status": "renamed", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fconfig%2Frs6000%2Fdarwin7.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fconfig%2Frs6000%2Fdarwin7.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin7.h?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -19,11 +19,13 @@ along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n Boston, MA 02110-1301, USA.  */\n \n-/* Darwin 7.0 and above have C99 functions.   */\n-#define TARGET_C99_FUNCTIONS 1\n-\n-/* Machine dependent libraries, include libmx when compiling on Darwin 7.0\n-   and above.  */\n+/* Machine dependent libraries.  Include libmx when compiling for\n+   Darwin 7.0 and above, but before libSystem, since the functions are\n+   actually in libSystem but for 7.x compatibility we want them to be\n+   looked for in libmx first.  Include libmx by default because otherwise\n+   libstdc++ isn't usable.  */\n \n #undef\tLIB_SPEC\n-#define LIB_SPEC \"%{!static:-lSystem -lmx}\"\n+#define LIB_SPEC \"%{!static:\\\n+  %:version-compare(!< 10.3 mmacosx-version-min= -lmx)\\\n+  -lSystem}\"", "previous_filename": "gcc/config/darwin7.h"}, {"sha": "ee583a2cc5c5454d25548e48ad1113c1baae65c7", "filename": "gcc/config/rs6000/darwin8.h", "status": "renamed", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fconfig%2Frs6000%2Fdarwin8.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fconfig%2Frs6000%2Fdarwin8.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin8.h?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -19,16 +19,15 @@ along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n Boston, MA 02110-1301, USA.  */\n \n-/* Darwin 7.0 and above have C99 functions.   */\n-#define TARGET_C99_FUNCTIONS 1\n-\n /* Machine dependent libraries.  Include libmx when compiling on\n    Darwin 7.0 and above, but before libSystem, since the functions are\n    actually in libSystem but for 7.x compatibility we want them to be\n-   looked for in libmx first.  Include libSystemStubs when compiling\n-   on 8.0 and above and not 64-bit long double.  */\n+   looked for in libmx first---but only do this if 7.x compatibility\n+   is a concern, which it's not in 64-bit mode.  Include\n+   libSystemStubs when compiling on (not necessarily for) 8.0 and\n+   above and not 64-bit long double.  */\n \n #undef\tLIB_SPEC\n #define LIB_SPEC \"%{!static:\\\n   %{!mlong-double-64:%{pg:-lSystemStubs_profile;:-lSystemStubs}} \\\n-  -lmx -lSystem}\"\n+  %{!m64:%:version-compare(>< 10.3 10.4 mmacosx-version-min= -lmx)} -lSystem}\"", "previous_filename": "gcc/config/darwin8.h"}, {"sha": "fd89fc80f8dbabf16afe8ade2b9dffa8da5e4bae", "filename": "gcc/configure", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -11212,8 +11212,10 @@ CFLAGS=\"$CFLAGS -I${srcdir} -I${srcdir}/../include\"\n \n \n \n-for ac_func in getenv atol asprintf sbrk abort atof getcwd getwd strsignal \\\n-\tstrstr errno snprintf vsnprintf vasprintf malloc realloc calloc \\\n+\n+for ac_func in getenv atol asprintf sbrk abort atof getcwd getwd \\\n+\tstrsignal strstr strverscmp \\\n+\terrno snprintf vsnprintf vasprintf malloc realloc calloc \\\n \tfree basename getopt clock getpagesize clearerr_unlocked feof_unlocked   ferror_unlocked fflush_unlocked fgetc_unlocked fgets_unlocked   fileno_unlocked fprintf_unlocked fputc_unlocked fputs_unlocked   fread_unlocked fwrite_unlocked getchar_unlocked getc_unlocked   putchar_unlocked putc_unlocked\n do\n   ac_tr_decl=`echo \"HAVE_DECL_$ac_func\" | $as_tr_cpp`"}, {"sha": "00a531f1241f9158fc86e58777c0c58e4092d3b0", "filename": "gcc/configure.ac", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -1049,8 +1049,9 @@ AM_LANGINFO_CODESET\n # We will need to find libiberty.h and ansidecl.h\n saved_CFLAGS=\"$CFLAGS\"\n CFLAGS=\"$CFLAGS -I${srcdir} -I${srcdir}/../include\"\n-gcc_AC_CHECK_DECLS(getenv atol asprintf sbrk abort atof getcwd getwd strsignal \\\n-\tstrstr errno snprintf vsnprintf vasprintf malloc realloc calloc \\\n+gcc_AC_CHECK_DECLS(getenv atol asprintf sbrk abort atof getcwd getwd \\\n+\tstrsignal strstr strverscmp \\\n+\terrno snprintf vsnprintf vasprintf malloc realloc calloc \\\n \tfree basename getopt clock getpagesize gcc_UNLOCKED_FUNCS, , ,[\n #include \"ansidecl.h\"\n #include \"system.h\"])"}, {"sha": "8acfd0f011bff446ea70072c203b9a90cfbe06ad", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -451,7 +451,8 @@ Objective-C and Objective-C++ Dialects}.\n -single_module  -static  -sub_library  -sub_umbrella @gol\n -twolevel_namespace  -umbrella  -undefined @gol\n -unexported_symbols_list  -weak_reference_mismatches @gol\n--whatsloaded -F -gused -gfull -mone-byte-bool}\n+-whatsloaded -F -gused -gfull -mmacosx-min-version=@var{version} @gol\n+-mone-byte-bool}\n \n @emph{DEC Alpha Options}\n @gccoptlist{-mno-fp-regs  -msoft-float  -malpha-as  -mgas @gol\n@@ -7668,6 +7669,14 @@ This is by default ON@.\n @opindex -gfull\n Emit debugging information for all symbols and types.\n \n+@item -mmacosx-version-min=@var{version}\n+The earliest version of MacOS X that this executable will run on\n+is @var{version}.  Typical values of @var{version} include @code{10.1},\n+@code{10.2}, and @code{10.3.9}.\n+\n+The default for this option is to make choices that seem to be most\n+useful.  \n+\n @item -mone-byte-bool\n @opindex -mone-byte-bool\n Override the defaults for @samp{bool} so that @samp{sizeof(bool)==1}."}, {"sha": "c137ad4f9ce33ccb3d718a90043ddfcf76d7f696", "filename": "gcc/gcc.c", "status": "modified", "additions": 123, "deletions": 2, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -80,6 +80,7 @@ compilation is specified by a string called a \"spec\".  */\n #if ! defined( SIGCHLD ) && defined( SIGCLD )\n #  define SIGCHLD SIGCLD\n #endif\n+#include \"xregex.h\"\n #include \"obstack.h\"\n #include \"intl.h\"\n #include \"prefix.h\"\n@@ -349,6 +350,7 @@ static const char *convert_filename (const char *, int, int);\n static const char *if_exists_spec_function (int, const char **);\n static const char *if_exists_else_spec_function (int, const char **);\n static const char *replace_outfile_spec_function (int, const char **);\n+static const char *version_compare_spec_function (int, const char **);\n \f\n /* The Specs Language\n \n@@ -1577,6 +1579,7 @@ static const struct spec_function static_spec_functions[] =\n   { \"if-exists\",\t\tif_exists_spec_function },\n   { \"if-exists-else\",\t\tif_exists_else_spec_function },\n   { \"replace-outfile\",\t\treplace_outfile_spec_function },\n+  { \"version-compare\",\t\tversion_compare_spec_function },\n   { 0, 0 }\n };\n \n@@ -7573,8 +7576,9 @@ if_exists_else_spec_function (int argc, const char **argv)\n }\n \n /* replace-outfile built-in spec function.\n-   This looks for the first argument in the outfiles array's name and replaces it\n-   with the second argument.  */\n+\n+   This looks for the first argument in the outfiles array's name and\n+   replaces it with the second argument.  */\n \n static const char *\n replace_outfile_spec_function (int argc, const char **argv)\n@@ -7592,3 +7596,120 @@ replace_outfile_spec_function (int argc, const char **argv)\n   return NULL;\n }\n \n+/* Given two version numbers, compares the two numbers.  \n+   A version number must match the regular expression\n+   ([1-9][0-9]*|0)(\\.([1-9][0-9]*|0))*\n+*/\n+static int\n+compare_version_strings (const char *v1, const char *v2)\n+{\n+  int rresult;\n+  regex_t r;\n+  \n+  if (regcomp (&r, \"^([1-9][0-9]*|0)(\\\\.([1-9][0-9]*|0))*$\",\n+\t       REG_EXTENDED | REG_NOSUB) != 0)\n+    abort ();\n+  rresult = regexec (&r, v1, 0, NULL, 0);\n+  if (rresult == REG_NOMATCH)\n+    fatal (\"invalid version number `%s'\", v1);\n+  else if (rresult != 0)\n+    abort ();\n+  rresult = regexec (&r, v2, 0, NULL, 0);\n+  if (rresult == REG_NOMATCH)\n+    fatal (\"invalid version number `%s'\", v2);\n+  else if (rresult != 0)\n+    abort ();\n+\n+  return strverscmp (v1, v2);\n+}\n+\n+\n+/* version_compare built-in spec function.\n+\n+   This takes an argument of the following form:\n+\n+   <comparison-op> <arg1> [<arg2>] <switch> <result>\n+\n+   and produces \"result\" if the comparison evaluates to true,\n+   and nothing if it doesn't.\n+\n+   The supported <comparison-op> values are:\n+   \n+   >=  true if switch is a later (or same) version than arg1\n+   !>  opposite of >=\n+   <   true if switch is an earlier version than arg1\n+   !<  opposite of <\n+   ><  true if switch is arg1 or later, and earlier than arg2\n+   <>  true if switch is earlier than arg1 or is arg2 or later\n+\n+   If the switch is not present, the condition is false unless\n+   the first character of the <comparison-op> is '!'.\n+\n+   For example,\n+   %:version-compare(>= 10.3 mmacosx-version-min= -lmx)\n+   adds -lmx if -mmacosx-version-min=10.3.9 was passed.  */\n+\n+static const char *\n+version_compare_spec_function (int argc, const char **argv)\n+{\n+  int comp1, comp2;\n+  size_t switch_len;\n+  const char *switch_value = NULL;\n+  int nargs = 1, i;\n+  bool result;\n+\n+  if (argc < 3)\n+    abort ();\n+  if (argv[0][0] == '\\0')\n+    abort ();\n+  if ((argv[0][1] == '<' || argv[0][1] == '>') && argv[0][0] != '!')\n+    nargs = 2;\n+  if (argc != nargs + 3)\n+    abort ();\n+\n+  switch_len = strlen (argv[nargs + 1]);\n+  for (i = 0; i < n_switches; i++)\n+    if (!strncmp (switches[i].part1, argv[nargs + 1], switch_len)\n+\t&& check_live_switch (i, switch_len))\n+      switch_value = switches[i].part1 + switch_len;\n+\n+  if (switch_value == NULL)\n+    comp1 = comp2 = -1;\n+  else\n+    {\n+      comp1 = compare_version_strings (switch_value, argv[1]);\n+      if (nargs == 2)\n+\tcomp2 = compare_version_strings (switch_value, argv[2]);\n+      else\n+\tcomp2 = -1;  /* This value unused.  */\n+    }\n+\n+  switch (argv[0][0] << 8 | argv[0][1])\n+    {\n+    case '>' << 8 | '=':\n+      result = comp1 >= 0;\n+      break;\n+    case '!' << 8 | '<':\n+      result = comp1 >= 0 || switch_value == NULL;\n+      break;\n+    case '<' << 8:\n+      result = comp1 < 0;\n+      break;\n+    case '!' << 8 | '>':\n+      result = comp1 < 0 || switch_value == NULL;\n+      break;\n+    case '>' << 8 | '<':\n+      result = comp1 >= 0 && comp2 < 0;\n+      break;\n+    case '<' << 8 | '>':\n+      result = comp1 < 0 || comp2 >= 0;\n+      break;\n+      \n+    default:\n+      abort ();\n+    }\n+  if (! result)\n+    return NULL;\n+\n+  return argv[nargs + 2];\n+}"}, {"sha": "67c70d4c17e6cde81bb14987a1e1a1ee04bedd3f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -1,3 +1,16 @@\n+2005-07-07  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* gcc.dg/darwin-version-1.c: New.\n+\t* gcc.dg/builtins-18.c: On Darwin, needs -mmacosx-version-min=10.3.\n+\t* gcc.dg/builtins-20.c: Likewise.\n+\t* gcc.dg/builtins-53.c: Likewise.\n+\t* gcc.dg/torture/builtins-convert-1.c: Likewise.\n+\t* gcc.dg/torture/builtins-convert-2.c: Likewise.\n+\t* gcc.dg/torture/builtins-convert-3.c: Likewise.\n+\t* gcc.dg/torture/builtins-power-1.c: Likewise.\n+\t* gcc.dg/builtins-config.h: Complain if macosx-version-min not set\n+\ton Darwin.\n+\n 2005-07-07  Jeff Law  <law@redhat.com>\n \n \t* gcc.dg/tree-ssa/vrp17.c: Simplify.  Remove dependency on"}, {"sha": "d04fe712f9a1b8968ffab40c983e594efa5f58ef", "filename": "gcc/testsuite/gcc.dg/builtins-18.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-18.c?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -7,6 +7,7 @@\n \n /* { dg-do link } */\n /* { dg-options \"-O2 -ffast-math\" } */\n+/* { dg-options \"-O2 -ffast-math -mmacosx-version-min=10.3\" { target powerpc-*-darwin* } } */\n \n #include \"builtins-config.h\"\n "}, {"sha": "dbcf96c3c07b6440a6068a0bbe4e1bac6669c057", "filename": "gcc/testsuite/gcc.dg/builtins-20.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -7,6 +7,7 @@\n \n /* { dg-do link } */\n /* { dg-options \"-O2 -ffast-math\" } */\n+/* { dg-options \"-O2 -ffast-math -mmacosx-version-min=10.3\" { target powerpc-*-darwin* } } */\n \n #include \"builtins-config.h\"\n "}, {"sha": "2b4b2f978b4c8a2c3b4dd6629dc0c3fcf3c02cdf", "filename": "gcc/testsuite/gcc.dg/builtins-53.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-53.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-53.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-53.c?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -10,6 +10,7 @@\n \n /* { dg-do compile } */\n /* { dg-options \"-O2 -ffast-math\" } */\n+/* { dg-options \"-O2 -ffast-math -mmacosx-version-min=10.3\" { target powerpc-*-darwin* } } */\n \n #include \"builtins-config.h\"\n "}, {"sha": "74915bce16d9cf26b4e782699430fff3aa8ef77a", "filename": "gcc/testsuite/gcc.dg/builtins-config.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -19,6 +19,15 @@\n /* FreeBSD before version 5 doesn't have the entire C99 runtime. */\n #elif defined(__netware__)\n /* NetWare doesn't have the entire C99 runtime.  */\n+#elif (defined(__APPLE__) \\\n+       && ! defined (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__))\n+/* MacOS versions before 10.3 don't have many C99 functions.  \n+   But, if you're including this file, you probably want to test the\n+   newer behaviour, so: */\n+#error forgot to set -mmacosx-version-min.\n+#elif (defined(__APPLE__) \\\n+       && __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ < 1030)\n+/* MacOS versions before 10.3 don't have many C99 functions.  */\n #else\n /* Newlib has the \"f\" variants of the math functions, but not the \"l\"\n    variants.  TARGET_C99_FUNCTIONS is only defined if all C99"}, {"sha": "11cfceff399637ad3d0ef63c9b376fdff80166af", "filename": "gcc/testsuite/gcc.dg/darwin-version-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-version-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-version-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-version-1.c?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -0,0 +1,10 @@\n+/* Basic test of the -mmacosx-version-min option.  */\n+\n+/* { dg-options \"-mmacosx-version-min=10.1\" } */\n+/* { dg-do link { target *-*-darwin* } } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+"}, {"sha": "d9fa77b853896dbbfdfa7e8680cc4fc0451277ac", "filename": "gcc/testsuite/gcc.dg/torture/builtin-convert-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-convert-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-convert-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-convert-1.c?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -7,6 +7,7 @@\n \n /* { dg-do link } */\n /* { dg-options \"-ffast-math\" } */\n+/* { dg-options \"-ffast-math -mmacosx-version-min=10.3\" { target powerpc-*-darwin* } } */\n \n #include \"../builtins-config.h\"\n "}, {"sha": "5c4c4a6740350ab529c7825ab83fd8a5114b4a28", "filename": "gcc/testsuite/gcc.dg/torture/builtin-convert-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-convert-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-convert-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-convert-2.c?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -7,6 +7,7 @@\n \n /* { dg-do link } */\n /* { dg-options \"-ffast-math\" } */\n+/* { dg-options \"-ffast-math -mmacosx-version-min=10.3\" { target powerpc-*-darwin* } } */\n \n #include \"../builtins-config.h\"\n "}, {"sha": "4efabd559ba5facf5f8b611bddd9532efabd9149", "filename": "gcc/testsuite/gcc.dg/torture/builtin-convert-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-convert-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-convert-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-convert-3.c?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -7,6 +7,7 @@\n \n /* { dg-do link } */\n /* { dg-options \"-ffast-math\" } */\n+/* { dg-options \"-ffast-math -mmacosx-version-min=10.3\" { target powerpc-*-darwin* } } */\n \n #include \"../builtins-config.h\"\n "}, {"sha": "bbee0674a32e3ce7007f6f552a632c504577911e", "filename": "gcc/testsuite/gcc.dg/torture/builtin-power-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-power-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-power-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-power-1.c?ref=ed5b9f96eee1e13fbcd8e2a8be13ecad11e63085", "patch": "@@ -7,6 +7,7 @@\n \n /* { dg-do link } */\n /* { dg-options \"-ffast-math\" } */\n+/* { dg-options \"-ffast-math -mmacosx-version-min=10.3\" { target powerpc-*-darwin* } } */\n \n #include \"../builtins-config.h\"\n "}]}