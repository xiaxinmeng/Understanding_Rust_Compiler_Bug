{"sha": "e7a7f4bea8356e24ca5f2c25a75dc005c7492f89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdhN2Y0YmVhODM1NmUyNGNhNWYyYzI1YTc1ZGMwMDVjNzQ5MmY4OQ==", "commit": {"author": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2016-12-02T14:13:12Z"}, "committer": {"name": "Sebastian Huber", "email": "sh@gcc.gnu.org", "date": "2016-12-02T14:13:12Z"}, "message": "[RTEMS] Use spin lock for pool management\n\nlibgomp/\n\n\t* libgomp/config/rtems/pool.h (gomp_thread_pool_reservoir): Use\n\tpthread_spinlock_t instead of gomp_mutex_t lock.\n\t(gomp_get_thread_pool): Likewise.\n\t(gomp_release_thread_pool): Likewise.\n\t* libgomp/config/rtems/proc.c (allocate_thread_pool_reservoir):\n\tLikewise.\n\nFrom-SVN: r243181", "tree": {"sha": "8ca30f0332f0da78a9d5fa75b3d15687858c3b10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ca30f0332f0da78a9d5fa75b3d15687858c3b10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7a7f4bea8356e24ca5f2c25a75dc005c7492f89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a7f4bea8356e24ca5f2c25a75dc005c7492f89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7a7f4bea8356e24ca5f2c25a75dc005c7492f89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a7f4bea8356e24ca5f2c25a75dc005c7492f89/comments", "author": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "714445ae04640bc096693623fb805bcf14148663", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/714445ae04640bc096693623fb805bcf14148663", "html_url": "https://github.com/Rust-GCC/gccrs/commit/714445ae04640bc096693623fb805bcf14148663"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "469e8967409400aee476031420f5acf04c916cc0", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a7f4bea8356e24ca5f2c25a75dc005c7492f89/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a7f4bea8356e24ca5f2c25a75dc005c7492f89/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=e7a7f4bea8356e24ca5f2c25a75dc005c7492f89", "patch": "@@ -1,3 +1,12 @@\n+2016-12-02  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* libgomp/config/rtems/pool.h (gomp_thread_pool_reservoir): Use\n+\tpthread_spinlock_t instead of gomp_mutex_t lock.\n+\t(gomp_get_thread_pool): Likewise.\n+\t(gomp_release_thread_pool): Likewise.\n+\t* libgomp/config/rtems/proc.c (allocate_thread_pool_reservoir):\n+\tLikewise.\n+\n 2016-12-02  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \t* config/rtems/pool.h (gomp_get_thread_pool): Return proper"}, {"sha": "83fddc8a1b258839676abfcd470c5bf16e39f1f8", "filename": "libgomp/config/rtems/pool.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a7f4bea8356e24ca5f2c25a75dc005c7492f89/libgomp%2Fconfig%2Frtems%2Fpool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a7f4bea8356e24ca5f2c25a75dc005c7492f89/libgomp%2Fconfig%2Frtems%2Fpool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Frtems%2Fpool.h?ref=e7a7f4bea8356e24ca5f2c25a75dc005c7492f89", "patch": "@@ -39,7 +39,7 @@\n    GOMP_RTEMS_THREAD_POOLS environment variable.  */\n struct gomp_thread_pool_reservoir {\n   gomp_sem_t available;\n-  gomp_mutex_t lock;\n+  pthread_spinlock_t lock;\n   size_t index;\n   int priority;\n   struct gomp_thread_pool *pools[];\n@@ -96,9 +96,9 @@ gomp_get_thread_pool (struct gomp_thread *thr, unsigned nthreads)\n   if (res != NULL)\n     {\n       gomp_sem_wait (&res->available);\n-      gomp_mutex_lock (&res->lock);\n+      pthread_spin_lock (&res->lock);\n       pool = res->pools[--res->index];\n-      gomp_mutex_unlock (&res->lock);\n+      pthread_spin_unlock (&res->lock);\n       pool->threads_busy = nthreads;\n       thr->thread_pool = pool;\n     }\n@@ -115,9 +115,9 @@ gomp_release_thread_pool (struct gomp_thread_pool *pool)\n     gomp_tls_rtems_data.thread_pool_reservoir;\n   if (res != NULL)\n     {\n-      gomp_mutex_lock (&res->lock);\n+      pthread_spin_lock (&res->lock);\n       res->pools[res->index++] = pool;\n-      gomp_mutex_unlock (&res->lock);\n+      pthread_spin_unlock (&res->lock);\n       gomp_sem_post (&res->available);\n     }\n }"}, {"sha": "5e04b47ca1a544e8e7a835f44c52d9e84e77507b", "filename": "libgomp/config/rtems/proc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a7f4bea8356e24ca5f2c25a75dc005c7492f89/libgomp%2Fconfig%2Frtems%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a7f4bea8356e24ca5f2c25a75dc005c7492f89/libgomp%2Fconfig%2Frtems%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Frtems%2Fproc.c?ref=e7a7f4bea8356e24ca5f2c25a75dc005c7492f89", "patch": "@@ -66,7 +66,7 @@ allocate_thread_pool_reservoir (unsigned long count, unsigned long priority,\n   res->index = count;\n   res->priority = priority;\n   gomp_sem_init (&res->available, count);\n-  gomp_mutex_init (&res->lock);\n+  pthread_spin_init (&res->lock, PTHREAD_PROCESS_PRIVATE);\n   for (i = 0; i < count; ++i)\n     res->pools[i] = &pools[i];\n   gomp_thread_pool_reservoirs[scheduler] = res;"}]}