{"sha": "572f9e47d337227229ab222bd9e1ff943f77b127", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTcyZjllNDdkMzM3MjI3MjI5YWIyMjJiZDllMWZmOTQzZjc3YjEyNw==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2006-06-13T12:43:56Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2006-06-13T12:43:56Z"}, "message": "re PR java/1305 ([JSR133] GCJ ignores volatile modifier)\n\n2006-06-09  Andrew Haley  <aph@redhat.com>\n\n        PR java/1305\n        PR java/27908\n        * builtins.c (initialize_builtins): Add __sync_synchronize().\n        * class.c (add_field): Mark volatile fields.\n        * java-gimplify.c (java_gimplify_expr): Call new functions to\n        handle self-modifying exprs and COMPONENT_REFs.\n        (java_gimplify_component_ref): New.\n        (java_gimplify_modify_expr): Add handling for volatiles.\n\nFrom-SVN: r114609", "tree": {"sha": "a865761ebe0ff87e13924a3c9729169a6cc61811", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a865761ebe0ff87e13924a3c9729169a6cc61811"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/572f9e47d337227229ab222bd9e1ff943f77b127", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/572f9e47d337227229ab222bd9e1ff943f77b127", "html_url": "https://github.com/Rust-GCC/gccrs/commit/572f9e47d337227229ab222bd9e1ff943f77b127", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/572f9e47d337227229ab222bd9e1ff943f77b127/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f0f1c408bc6c6a6011a7b3bc1bd5f7dfdf4f6719", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0f1c408bc6c6a6011a7b3bc1bd5f7dfdf4f6719", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0f1c408bc6c6a6011a7b3bc1bd5f7dfdf4f6719"}], "stats": {"total": 147, "additions": 140, "deletions": 7}, "files": [{"sha": "8758c7736f794e0a808ad808365d155ea2ef9984", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/572f9e47d337227229ab222bd9e1ff943f77b127/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/572f9e47d337227229ab222bd9e1ff943f77b127/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=572f9e47d337227229ab222bd9e1ff943f77b127", "patch": "@@ -1,3 +1,14 @@\n+2006-06-09  Andrew Haley  <aph@redhat.com>\n+\n+\tPR java/1305\n+\tPR java/27908\n+\t* builtins.c (initialize_builtins): Add __sync_synchronize().\n+\t* class.c (add_field): Mark volatile fields.\n+\t* java-gimplify.c (java_gimplify_expr): Call new functions to\n+\thandle self-modifying exprs and COMPONENT_REFs.\n+\t(java_gimplify_component_ref): New.\n+\t(java_gimplify_modify_expr): Add handling for volatiles.\n+\n 2006-06-08  Tom Tromey  <tromey@redhat.com>\n \n \t* gcj.texi (libgcj Runtime Properties): Document"}, {"sha": "86aa00f2bfde430714486a83d56ce10738c36de1", "filename": "gcc/java/builtins.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/572f9e47d337227229ab222bd9e1ff943f77b127/gcc%2Fjava%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/572f9e47d337227229ab222bd9e1ff943f77b127/gcc%2Fjava%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuiltins.c?ref=572f9e47d337227229ab222bd9e1ff943f77b127", "patch": "@@ -259,6 +259,10 @@ initialize_builtins (void)\n \t\t  \"__builtin_expect\",\n \t\t  BUILTIN_CONST | BUILTIN_NOTHROW);\n \t\t  \n+  define_builtin (BUILT_IN_SYNCHRONIZE, \"__sync_synchronize\",\n+\t\t  build_function_type (void_type_node, void_list_node),\n+\t\t  \"__sync_synchronize\", BUILTIN_NOTHROW);\n+\n   build_common_builtin_nodes ();\n }\n "}, {"sha": "972877d904ebf948a7486fec166301ef43d88680", "filename": "gcc/java/class.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/572f9e47d337227229ab222bd9e1ff943f77b127/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/572f9e47d337227229ab222bd9e1ff943f77b127/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=572f9e47d337227229ab222bd9e1ff943f77b127", "patch": "@@ -785,7 +785,11 @@ add_field (tree class, tree name, tree field_type, int flags)\n   if (flags & ACC_PROTECTED) FIELD_PROTECTED (field) = 1;\n   if (flags & ACC_PRIVATE) FIELD_PRIVATE (field) = 1;\n   if (flags & ACC_FINAL) FIELD_FINAL (field) = 1;\n-  if (flags & ACC_VOLATILE) FIELD_VOLATILE (field) = 1;\n+  if (flags & ACC_VOLATILE) \n+    {\n+      FIELD_VOLATILE (field) = 1;\n+      TREE_THIS_VOLATILE (field) = 1;\n+    }\n   if (flags & ACC_TRANSIENT) FIELD_TRANSIENT (field) = 1;\n   if (is_static)\n     {"}, {"sha": "21c0641ab18e63886cbf2f0fad4ceb1ca8e7bcb6", "filename": "gcc/java/java-gimplify.c", "status": "modified", "additions": 120, "deletions": 6, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/572f9e47d337227229ab222bd9e1ff943f77b127/gcc%2Fjava%2Fjava-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/572f9e47d337227229ab222bd9e1ff943f77b127/gcc%2Fjava%2Fjava-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-gimplify.c?ref=572f9e47d337227229ab222bd9e1ff943f77b127", "patch": "@@ -39,7 +39,9 @@ static tree java_gimplify_default_expr (tree);\n static tree java_gimplify_block (tree);\n static tree java_gimplify_new_array_init (tree);\n static tree java_gimplify_try_expr (tree);\n-static tree java_gimplify_modify_expr (tree);\n+static enum gimplify_status java_gimplify_modify_expr (tree*, tree*, tree *);\n+static enum gimplify_status java_gimplify_component_ref (tree*, tree*, tree *);\n+static enum gimplify_status java_gimplify_self_mod_expr (tree*, tree*, tree *);\n \n static void dump_java_tree (enum tree_dump_index, tree);\n \n@@ -119,8 +121,7 @@ java_gimplify_expr (tree *expr_p, tree *pre_p ATTRIBUTE_UNUSED,\n       return GS_UNHANDLED;\n \n     case MODIFY_EXPR:\n-      *expr_p = java_gimplify_modify_expr (*expr_p);\n-      return GS_UNHANDLED;\n+      return java_gimplify_modify_expr (expr_p, pre_p, post_p);\n \n     case SAVE_EXPR:\n       /* Note that we can see <save_expr NULL> if the save_expr was\n@@ -132,6 +133,12 @@ java_gimplify_expr (tree *expr_p, tree *pre_p ATTRIBUTE_UNUSED,\n \t\t\t       /* want_lvalue */ false);\n       return GS_UNHANDLED;\n \n+    case POSTINCREMENT_EXPR:\n+    case POSTDECREMENT_EXPR:\n+    case PREINCREMENT_EXPR:\n+    case PREDECREMENT_EXPR:\n+      return java_gimplify_self_mod_expr (expr_p, pre_p, post_p);\n+      \n     /* These should already be lowered before we get here.  */\n     case URSHIFT_EXPR:\n     case COMPARE_EXPR:\n@@ -148,6 +155,9 @@ java_gimplify_expr (tree *expr_p, tree *pre_p ATTRIBUTE_UNUSED,\n     case CLASS_LITERAL:\n       gcc_unreachable ();\n \n+    case COMPONENT_REF:\n+      return java_gimplify_component_ref (expr_p, pre_p, post_p);\n+\n     default:\n       /* Java insists on strict left-to-right evaluation of expressions.\n \t A problem may arise if a variable used in the LHS of a binary\n@@ -208,13 +218,100 @@ java_gimplify_exit_block_expr (tree expr)\n   return build1 (GOTO_EXPR, void_type_node, label);\n }\n \n-static tree\n-java_gimplify_modify_expr (tree modify_expr)\n+\n+\n+static enum gimplify_status\n+java_gimplify_component_ref (tree *expr_p, tree *pre_p, tree *post_p)\n {\n+  if (TREE_THIS_VOLATILE (TREE_OPERAND (*expr_p, 1))\n+      && ! TREE_THIS_VOLATILE (*expr_p))\n+  {\n+    enum gimplify_status stat;\n+    tree sync_expr;\n+\n+    /* Special handling for volatile fields.  \n+\n+    A load has \"acquire\" semantics, implying that you can't move up\n+    later operations.  A store has \"release\" semantics meaning that\n+    earlier operations cannot be delayed past it.  \n+\n+    This logic only handles loads: stores are handled in\n+    java_gimplify_modify_expr().\n+\n+    We gimplify this COMPONENT_REF, put the result in a tmp_var, and then\n+    return a COMPOUND_EXPR of the form {__sync_synchronize(); tmp_var}.  \n+    This forces __sync_synchronize() to be placed immediately after\n+    loading from the volatile field.\n+\n+    */\n+  \n+    TREE_THIS_VOLATILE (*expr_p) = 1;\n+    stat = gimplify_expr (expr_p, pre_p, post_p,\n+\t\t\t  is_gimple_formal_tmp_var, fb_rvalue);\n+    if (stat == GS_ERROR)\n+      return stat;\n+\n+    sync_expr \n+      = build3 (CALL_EXPR, void_type_node,\n+\t\tbuild_address_of (built_in_decls[BUILT_IN_SYNCHRONIZE]),\n+\t\tNULL_TREE, NULL_TREE);\n+    TREE_SIDE_EFFECTS (sync_expr) = 1;\n+    *expr_p = build2 (COMPOUND_EXPR, TREE_TYPE (*expr_p),\n+\t\t      sync_expr, *expr_p);\n+    TREE_SIDE_EFFECTS (*expr_p) = 1;\n+  }\n+\n+  return GS_UNHANDLED;\n+}\n+  \n+\n+static enum gimplify_status\n+java_gimplify_modify_expr (tree *modify_expr_p, tree *pre_p, tree *post_p)\n+{\n+  tree modify_expr = *modify_expr_p;\n   tree lhs = TREE_OPERAND (modify_expr, 0);\n   tree rhs = TREE_OPERAND (modify_expr, 1);\n   tree lhs_type = TREE_TYPE (lhs);\n \n+  if (TREE_CODE (lhs) == COMPONENT_REF\n+      && TREE_THIS_VOLATILE (TREE_OPERAND (lhs, 1)))\n+    {\n+      /* Special handling for volatile fields.  \n+\n+      A load has \"acquire\" semantics, implying that you can't move up\n+      later operations.  A store has \"release\" semantics meaning that\n+      earlier operations cannot be delayed past it.  \n+\n+      This logic only handles stores; loads are handled in\n+      java_gimplify_component_ref().\n+\n+      We gimplify the rhs, put the result in a tmp_var, and then return\n+      a MODIFY_EXPR with an rhs of the form {__sync_synchronize(); tmp_var}.\n+      This forces __sync_synchronize() to be placed after evaluating\n+      the rhs and immediately before storing to the volatile field.\n+\n+      */\n+  \n+      enum gimplify_status stat;\n+      tree sync_expr \n+\t= build3 (CALL_EXPR, void_type_node,\n+\t\t  build_address_of (built_in_decls[BUILT_IN_SYNCHRONIZE]),\n+\t\t  NULL_TREE, NULL_TREE);\n+      TREE_SIDE_EFFECTS (sync_expr) = 1;\n+\n+      stat = gimplify_expr (&rhs, pre_p, post_p,\n+\t\t\t    is_gimple_formal_tmp_var, fb_rvalue);\n+      if (stat == GS_ERROR)\n+\treturn stat;\n+\n+      rhs = build2 (COMPOUND_EXPR, TREE_TYPE (rhs),\n+\t\t    sync_expr, rhs);\n+      TREE_SIDE_EFFECTS (rhs) = 1;\n+      TREE_THIS_VOLATILE (lhs) = 1;\n+      TREE_OPERAND (modify_expr, 0) = lhs;\n+      TREE_OPERAND (modify_expr, 1) = rhs;\n+    }\n+\n   /* This is specific to the bytecode compiler.  If a variable has\n      LOCAL_SLOT_P set, replace an assignment to it with an assignment\n      to the corresponding variable that holds all its aliases.  */\n@@ -235,7 +332,24 @@ java_gimplify_modify_expr (tree modify_expr)\n        assignment and subclass assignment.  */\n     TREE_OPERAND (modify_expr, 1) = convert (lhs_type, rhs);\n \n-  return modify_expr;\n+  *modify_expr_p = modify_expr;\n+  return GS_UNHANDLED;\n+}\n+\n+/*  Special case handling for volatiles: we need to generate a barrier\n+    between the reading and the writing.  */\n+\n+static enum gimplify_status\n+java_gimplify_self_mod_expr (tree *expr_p, tree *pre_p ATTRIBUTE_UNUSED, \n+\t\t\t     tree *post_p ATTRIBUTE_UNUSED)\n+{\n+  tree lhs = TREE_OPERAND (*expr_p, 0);\n+\n+  if (TREE_CODE (lhs) == COMPONENT_REF\n+      && TREE_THIS_VOLATILE (TREE_OPERAND (lhs, 1)))\n+    TREE_THIS_VOLATILE (lhs) = 1;\n+\n+  return GS_UNHANDLED;\n }\n \n     "}]}