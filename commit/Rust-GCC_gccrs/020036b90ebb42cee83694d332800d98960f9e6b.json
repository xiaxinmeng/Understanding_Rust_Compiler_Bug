{"sha": "020036b90ebb42cee83694d332800d98960f9e6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIwMDM2YjkwZWJiNDJjZWU4MzY5NGQzMzI4MDBkOTg5NjBmOWU2Yg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-12-20T01:40:41Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-12-20T01:40:41Z"}, "message": "expr.c (check_max_integer_computation_mode): Remove.\n\n\t* expr.c (check_max_integer_computation_mode): Remove.\n\t* dojump.c (do_jump): Don't use MAX_INTEGER_COMPUTATION_MODE.\n\t* fold-const.c (fold): Likewise.\n\t* system.h (MAX_INTEGER_COMPUTATION_MODE): Poison.\n\t* doc/tm.texi (MAX_INTEGER_COMPUTATION_MODE): Remove.\n\nFrom-SVN: r74868", "tree": {"sha": "92dd66bd04990b86de6351556965618d10ea0d86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92dd66bd04990b86de6351556965618d10ea0d86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/020036b90ebb42cee83694d332800d98960f9e6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/020036b90ebb42cee83694d332800d98960f9e6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/020036b90ebb42cee83694d332800d98960f9e6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/020036b90ebb42cee83694d332800d98960f9e6b/comments", "author": null, "committer": null, "parents": [{"sha": "750e3ed363f683db52807d6137eb676212f9df8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/750e3ed363f683db52807d6137eb676212f9df8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/750e3ed363f683db52807d6137eb676212f9df8b"}], "stats": {"total": 123, "additions": 9, "deletions": 114}, "files": [{"sha": "5528fd7fdefcdc6743905b9877af35025cb7ed34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020036b90ebb42cee83694d332800d98960f9e6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020036b90ebb42cee83694d332800d98960f9e6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=020036b90ebb42cee83694d332800d98960f9e6b", "patch": "@@ -1,3 +1,11 @@\n+2003-12-19  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* expr.c (check_max_integer_computation_mode): Remove.\n+\t* dojump.c (do_jump): Don't use MAX_INTEGER_COMPUTATION_MODE.\n+\t* fold-const.c (fold): Likewise.\n+\t* system.h (MAX_INTEGER_COMPUTATION_MODE): Poison.\n+\t* doc/tm.texi (MAX_INTEGER_COMPUTATION_MODE): Remove.\n+\n 2003-12-19  James E Wilson  <wilson@specifixinc.com>\n \n \t* configure.in: Delete libunwind_has_eh_support test."}, {"sha": "d6568c9a01d5fe90134258e00608460d02e45794", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020036b90ebb42cee83694d332800d98960f9e6b/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020036b90ebb42cee83694d332800d98960f9e6b/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=020036b90ebb42cee83694d332800d98960f9e6b", "patch": "@@ -8940,15 +8940,6 @@ A C statement that adds to @var{clobbers} @code{STRING_CST} trees for\n any hard regs the port wishes to automatically clobber for all asms.\n @end defmac\n \n-@defmac MAX_INTEGER_COMPUTATION_MODE\n-Define this to the largest integer machine mode which can be used for\n-operations other than load, store and copy operations.\n-\n-You need only define this macro if the target holds values larger than\n-@code{word_mode} in general purpose registers.  Most targets should not define\n-this macro.\n-@end defmac\n-\n @defmac MATH_LIBRARY\n Define this macro as a C string constant for the linker argument to link\n in the system math library, or @samp{\"\"} if the target does not have a"}, {"sha": "6b9569bb024dea12642a06f8328162c520d44634", "filename": "gcc/dojump.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020036b90ebb42cee83694d332800d98960f9e6b/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020036b90ebb42cee83694d332800d98960f9e6b/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=020036b90ebb42cee83694d332800d98960f9e6b", "patch": "@@ -126,10 +126,6 @@ do_jump (tree exp, rtx if_false_label, rtx if_true_label)\n   tree type;\n   enum machine_mode mode;\n \n-#ifdef MAX_INTEGER_COMPUTATION_MODE\n-  check_max_integer_computation_mode (exp);\n-#endif\n-\n   emit_queue ();\n \n   switch (code)"}, {"sha": "93ab7e0c7963db5335722ed2f8b523b72593dbd1", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020036b90ebb42cee83694d332800d98960f9e6b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020036b90ebb42cee83694d332800d98960f9e6b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=020036b90ebb42cee83694d332800d98960f9e6b", "patch": "@@ -5943,60 +5943,6 @@ var_rtx (tree exp)\n       return 0;\n     }\n }\n-\n-#ifdef MAX_INTEGER_COMPUTATION_MODE\n-\n-void\n-check_max_integer_computation_mode (tree exp)\n-{\n-  enum tree_code code;\n-  enum machine_mode mode;\n-\n-  /* Strip any NOPs that don't change the mode.  */\n-  STRIP_NOPS (exp);\n-  code = TREE_CODE (exp);\n-\n-  /* We must allow conversions of constants to MAX_INTEGER_COMPUTATION_MODE.  */\n-  if (code == NOP_EXPR\n-      && TREE_CODE (TREE_OPERAND (exp, 0)) == INTEGER_CST)\n-    return;\n-\n-  /* First check the type of the overall operation.   We need only look at\n-     unary, binary and relational operations.  */\n-  if (TREE_CODE_CLASS (code) == '1'\n-      || TREE_CODE_CLASS (code) == '2'\n-      || TREE_CODE_CLASS (code) == '<')\n-    {\n-      mode = TYPE_MODE (TREE_TYPE (exp));\n-      if (GET_MODE_CLASS (mode) == MODE_INT\n-\t  && mode > MAX_INTEGER_COMPUTATION_MODE)\n-\tinternal_error (\"unsupported wide integer operation\");\n-    }\n-\n-  /* Check operand of a unary op.  */\n-  if (TREE_CODE_CLASS (code) == '1')\n-    {\n-      mode = TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0)));\n-      if (GET_MODE_CLASS (mode) == MODE_INT\n-\t  && mode > MAX_INTEGER_COMPUTATION_MODE)\n-\tinternal_error (\"unsupported wide integer operation\");\n-    }\n-\n-  /* Check operands of a binary/comparison op.  */\n-  if (TREE_CODE_CLASS (code) == '2' || TREE_CODE_CLASS (code) == '<')\n-    {\n-      mode = TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0)));\n-      if (GET_MODE_CLASS (mode) == MODE_INT\n-\t  && mode > MAX_INTEGER_COMPUTATION_MODE)\n-\tinternal_error (\"unsupported wide integer operation\");\n-\n-      mode = TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 1)));\n-      if (GET_MODE_CLASS (mode) == MODE_INT\n-\t  && mode > MAX_INTEGER_COMPUTATION_MODE)\n-\tinternal_error (\"unsupported wide integer operation\");\n-    }\n-}\n-#endif\n \f\n /* Return the highest power of two that EXP is known to be a multiple of.\n    This is used in updating alignment of MEMs in array references.  */\n@@ -6300,49 +6246,6 @@ expand_expr (tree exp, rtx target, enum machine_mode tmode,\n       target = 0;\n     }\n \n-#ifdef MAX_INTEGER_COMPUTATION_MODE\n-  /* Only check stuff here if the mode we want is different from the mode\n-     of the expression; if it's the same, check_max_integer_computation_mode\n-     will handle it.  Do we really need to check this stuff at all?  */\n-\n-  if (target\n-      && GET_MODE (target) != mode\n-      && TREE_CODE (exp) != INTEGER_CST\n-      && TREE_CODE (exp) != PARM_DECL\n-      && TREE_CODE (exp) != ARRAY_REF\n-      && TREE_CODE (exp) != ARRAY_RANGE_REF\n-      && TREE_CODE (exp) != COMPONENT_REF\n-      && TREE_CODE (exp) != BIT_FIELD_REF\n-      && TREE_CODE (exp) != INDIRECT_REF\n-      && TREE_CODE (exp) != CALL_EXPR\n-      && TREE_CODE (exp) != VAR_DECL\n-      && TREE_CODE (exp) != RTL_EXPR)\n-    {\n-      enum machine_mode mode = GET_MODE (target);\n-\n-      if (GET_MODE_CLASS (mode) == MODE_INT\n-\t  && mode > MAX_INTEGER_COMPUTATION_MODE)\n-\tinternal_error (\"unsupported wide integer operation\");\n-    }\n-\n-  if (tmode != mode\n-      && TREE_CODE (exp) != INTEGER_CST\n-      && TREE_CODE (exp) != PARM_DECL\n-      && TREE_CODE (exp) != ARRAY_REF\n-      && TREE_CODE (exp) != ARRAY_RANGE_REF\n-      && TREE_CODE (exp) != COMPONENT_REF\n-      && TREE_CODE (exp) != BIT_FIELD_REF\n-      && TREE_CODE (exp) != INDIRECT_REF\n-      && TREE_CODE (exp) != VAR_DECL\n-      && TREE_CODE (exp) != CALL_EXPR\n-      && TREE_CODE (exp) != RTL_EXPR\n-      && GET_MODE_CLASS (tmode) == MODE_INT\n-      && tmode > MAX_INTEGER_COMPUTATION_MODE)\n-    internal_error (\"unsupported wide integer operation\");\n-\n-  check_max_integer_computation_mode (exp);\n-#endif\n-\n   /* If will do cse, generate all results into pseudo registers\n      since 1) that allows cse to find more things\n      and 2) otherwise cse could produce an insn the machine"}, {"sha": "3da0ebf6f46a82110a074da04266e969460d5913", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020036b90ebb42cee83694d332800d98960f9e6b/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020036b90ebb42cee83694d332800d98960f9e6b/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=020036b90ebb42cee83694d332800d98960f9e6b", "patch": "@@ -5205,9 +5205,6 @@ fold (tree expr)\n   if (kind == 'c')\n     return t;\n \n-#ifdef MAX_INTEGER_COMPUTATION_MODE\n-  check_max_integer_computation_mode (expr);\n-#endif\n   orig_t = t;\n \n   if (code == NOP_EXPR || code == FLOAT_EXPR || code == CONVERT_EXPR)"}, {"sha": "8b0b38a6f29f7e78bae22485e0035724f6f2fbb6", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/020036b90ebb42cee83694d332800d98960f9e6b/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/020036b90ebb42cee83694d332800d98960f9e6b/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=020036b90ebb42cee83694d332800d98960f9e6b", "patch": "@@ -620,7 +620,7 @@ typedef char _Bool;\n \tINSN_CACHE_LINE_WIDTH INIT_SECTION_PREAMBLE NEED_ATEXIT ON_EXIT\t   \\\n \tEXIT_BODY OBJECT_FORMAT_ROSE MULTIBYTE_CHARS MAP_CHARACTER\t   \\\n \tLIBGCC_NEEDS_DOUBLE FINAL_PRESCAN_LABEL DEFAULT_CALLER_SAVES\t   \\\n-\tLOAD_ARGS_REVERSED\n+\tLOAD_ARGS_REVERSED MAX_INTEGER_COMPUTATION_MODE\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}]}