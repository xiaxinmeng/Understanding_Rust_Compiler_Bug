{"sha": "6e07f9aaf35eeb81ac81a521b9b5d818a5062761", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUwN2Y5YWFmMzVlZWI4MWFjODFhNTIxYjliNWQ4MThhNTA2Mjc2MQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-04-21T21:58:08Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-04-21T21:58:08Z"}, "message": "vrp: remove redundant has_single_use tests\n\ngcc/ChangeLog:\n\n\t* tree-vrp.c (register_edge_assert_for_2): Remove redundant\n\thas_single_use() tests.\n\t(register_edge_assert_for_1): Likewise.\n\t(find_assert_locations_1): Check the liveness bitmap instead of\n\tchecking has_single_use().\n\nFrom-SVN: r235352", "tree": {"sha": "67a00954e4e426d546e249916de1232ca5d07565", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67a00954e4e426d546e249916de1232ca5d07565"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e07f9aaf35eeb81ac81a521b9b5d818a5062761", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e07f9aaf35eeb81ac81a521b9b5d818a5062761", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e07f9aaf35eeb81ac81a521b9b5d818a5062761", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e07f9aaf35eeb81ac81a521b9b5d818a5062761/comments", "author": null, "committer": null, "parents": [{"sha": "5c71225085d9b18c54d39bc2601f080c16d99834", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c71225085d9b18c54d39bc2601f080c16d99834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c71225085d9b18c54d39bc2601f080c16d99834"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "78ac409493e171b7a1b0bc39fd5f6918bfa07e98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e07f9aaf35eeb81ac81a521b9b5d818a5062761/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e07f9aaf35eeb81ac81a521b9b5d818a5062761/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e07f9aaf35eeb81ac81a521b9b5d818a5062761", "patch": "@@ -1,3 +1,11 @@\n+2016-04-21  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\t* tree-vrp.c (register_edge_assert_for_2): Remove redundant\n+\thas_single_use() tests.\n+\t(register_edge_assert_for_1): Likewise.\n+\t(find_assert_locations_1): Check the liveness bitmap instead of\n+\tchecking has_single_use().\n+\n 2016-04-21  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \tPR target/70728"}, {"sha": "3cb470bef650616071bb67eeca84d8a64724f1f9", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e07f9aaf35eeb81ac81a521b9b5d818a5062761/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e07f9aaf35eeb81ac81a521b9b5d818a5062761/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=6e07f9aaf35eeb81ac81a521b9b5d818a5062761", "patch": "@@ -5145,8 +5145,7 @@ register_edge_assert_for_2 (tree name, edge e, gimple_stmt_iterator bsi,\n \n   /* Only register an ASSERT_EXPR if NAME was found in the sub-graph\n      reachable from E.  */\n-  if (live_on_edge (e, name)\n-      && !has_single_use (name))\n+  if (live_on_edge (e, name))\n     register_new_assert_for (name, name, comp_code, val, NULL, e, bsi);\n \n   /* In the case of NAME <= CST and NAME being defined as\n@@ -5188,8 +5187,7 @@ register_edge_assert_for_2 (tree name, edge e, gimple_stmt_iterator bsi,\n \t  && (cst2 == NULL_TREE\n \t      || TREE_CODE (cst2) == INTEGER_CST)\n \t  && INTEGRAL_TYPE_P (TREE_TYPE (name3))\n-\t  && live_on_edge (e, name3)\n-\t  && !has_single_use (name3))\n+\t  && live_on_edge (e, name3))\n \t{\n \t  tree tmp;\n \n@@ -5215,8 +5213,7 @@ register_edge_assert_for_2 (tree name, edge e, gimple_stmt_iterator bsi,\n       \t  && TREE_CODE (name2) == SSA_NAME\n \t  && TREE_CODE (cst2) == INTEGER_CST\n \t  && INTEGRAL_TYPE_P (TREE_TYPE (name2))\n-\t  && live_on_edge (e, name2)\n-\t  && !has_single_use (name2))\n+\t  && live_on_edge (e, name2))\n \t{\n \t  tree tmp;\n \n@@ -5319,8 +5316,7 @@ register_edge_assert_for_2 (tree name, edge e, gimple_stmt_iterator bsi,\n \t  tree op1 = gimple_assign_rhs2 (def_stmt);\n \t  if (TREE_CODE (op0) == SSA_NAME\n \t      && TREE_CODE (op1) == INTEGER_CST\n-\t      && live_on_edge (e, op0)\n-\t      && !has_single_use (op0))\n+\t      && live_on_edge (e, op0))\n \t    {\n \t      enum tree_code reverse_op = (rhs_code == PLUS_EXPR\n \t\t\t\t\t   ? MINUS_EXPR : PLUS_EXPR);\n@@ -5346,8 +5342,7 @@ register_edge_assert_for_2 (tree name, edge e, gimple_stmt_iterator bsi,\n \t      && (comp_code == LE_EXPR || comp_code == GT_EXPR\n \t\t  || !tree_int_cst_equal (val,\n \t\t\t\t\t  TYPE_MIN_VALUE (TREE_TYPE (val))))\n-\t      && live_on_edge (e, name2)\n-\t      && !has_single_use (name2))\n+\t      && live_on_edge (e, name2))\n \t    {\n \t      tree tmp, cst;\n \t      enum tree_code new_comp_code = comp_code;\n@@ -5392,8 +5387,7 @@ register_edge_assert_for_2 (tree name, edge e, gimple_stmt_iterator bsi,\n \t      && INTEGRAL_TYPE_P (TREE_TYPE (name2))\n \t      && IN_RANGE (tree_to_uhwi (cst2), 1, prec - 1)\n \t      && prec == GET_MODE_PRECISION (TYPE_MODE (TREE_TYPE (val)))\n-\t      && live_on_edge (e, name2)\n-\t      && !has_single_use (name2))\n+\t      && live_on_edge (e, name2))\n \t    {\n \t      mask = wi::mask (tree_to_uhwi (cst2), false, prec);\n \t      val2 = fold_binary (LSHIFT_EXPR, TREE_TYPE (val), val, cst2);\n@@ -5498,12 +5492,10 @@ register_edge_assert_for_2 (tree name, edge e, gimple_stmt_iterator bsi,\n \t\t      || !INTEGRAL_TYPE_P (TREE_TYPE (names[1]))\n \t\t      || (TYPE_PRECISION (TREE_TYPE (name2))\n \t\t\t  != TYPE_PRECISION (TREE_TYPE (names[1])))\n-\t\t      || !live_on_edge (e, names[1])\n-\t\t      || has_single_use (names[1]))\n+\t\t      || !live_on_edge (e, names[1]))\n \t\t    names[1] = NULL_TREE;\n \t\t}\n-\t      if (live_on_edge (e, name2)\n-\t\t  && !has_single_use (name2))\n+\t      if (live_on_edge (e, name2))\n \t\tnames[0] = name2;\n \t    }\n \t}\n@@ -5724,8 +5716,7 @@ register_edge_assert_for_1 (tree op, enum tree_code code,\n \n   /* We know that OP will have a zero or nonzero value.  If OP is used\n      more than once go ahead and register an assert for OP.  */\n-  if (live_on_edge (e, op)\n-      && !has_single_use (op))\n+  if (live_on_edge (e, op))\n     {\n       val = build_int_cst (TREE_TYPE (op), 0);\n       register_new_assert_for (op, op, code, val, NULL, e, bsi);\n@@ -6158,7 +6149,7 @@ find_assert_locations_1 (basic_block bb, sbitmap live)\n \t\t      /* Note we want to register the assert for the\n \t\t\t operand of the NOP_EXPR after SI, not after the\n \t\t\t conversion.  */\n-\t\t      if (! has_single_use (t))\n+\t\t      if (bitmap_bit_p (live, SSA_NAME_VERSION (t)))\n \t\t\tregister_new_assert_for (t, t, comp_code, value,\n \t\t\t\t\t\t bb, NULL, si);\n \t\t    }"}]}