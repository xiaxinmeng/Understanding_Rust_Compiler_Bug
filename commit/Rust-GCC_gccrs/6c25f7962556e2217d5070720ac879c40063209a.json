{"sha": "6c25f7962556e2217d5070720ac879c40063209a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMyNWY3OTYyNTU2ZTIyMTdkNTA3MDcyMGFjODc5YzQwMDYzMjA5YQ==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gmx.de", "date": "2015-03-16T10:29:59Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2015-03-16T10:29:59Z"}, "message": "resolve.c: Prevent segfault on illegal input.\n\ngcc/fortran/ChangeLog:\n\n2015-03-16  Andre Vehreschild  <vehre@gmx.de>\n\n\t* resolve.c: Prevent segfault on illegal input.\n\ngcc/testsuite/ChangeLog:\n\n2015-03-16  Andre Vehreschild  <vehre@gmx.de>\n\n\t* gfortran.dg/pointer_2.f90: New test.\n\nFrom-SVN: r221455", "tree": {"sha": "0f32e47ce192b9f995b5547452e884643a7d6e16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f32e47ce192b9f995b5547452e884643a7d6e16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c25f7962556e2217d5070720ac879c40063209a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c25f7962556e2217d5070720ac879c40063209a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c25f7962556e2217d5070720ac879c40063209a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c25f7962556e2217d5070720ac879c40063209a/comments", "author": {"login": "vehre", "id": 4761547, "node_id": "MDQ6VXNlcjQ3NjE1NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4761547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vehre", "html_url": "https://github.com/vehre", "followers_url": "https://api.github.com/users/vehre/followers", "following_url": "https://api.github.com/users/vehre/following{/other_user}", "gists_url": "https://api.github.com/users/vehre/gists{/gist_id}", "starred_url": "https://api.github.com/users/vehre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vehre/subscriptions", "organizations_url": "https://api.github.com/users/vehre/orgs", "repos_url": "https://api.github.com/users/vehre/repos", "events_url": "https://api.github.com/users/vehre/events{/privacy}", "received_events_url": "https://api.github.com/users/vehre/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e25209f3a29dd1c8ee33c848a6a2b66e4c06d48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e25209f3a29dd1c8ee33c848a6a2b66e4c06d48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e25209f3a29dd1c8ee33c848a6a2b66e4c06d48"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "a7071968dd34c18b609fd4c1158031a6b2fb3653", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c25f7962556e2217d5070720ac879c40063209a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c25f7962556e2217d5070720ac879c40063209a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6c25f7962556e2217d5070720ac879c40063209a", "patch": "@@ -1,3 +1,7 @@\n+2015-03-16  Andre Vehreschild  <vehre@gmx.de>\n+\n+\t* resolve.c: Prevent segfault on illegal input.\n+\n 2015-03-14  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/61138"}, {"sha": "465cf2ba8cf1782e517afe56df70c01bbe85e29a", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c25f7962556e2217d5070720ac879c40063209a/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c25f7962556e2217d5070720ac879c40063209a/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=6c25f7962556e2217d5070720ac879c40063209a", "patch": "@@ -2639,6 +2639,10 @@ resolve_specific_f0 (gfc_symbol *sym, gfc_expr *expr)\n     expr->ts = sym->ts;\n   expr->value.function.name = sym->name;\n   expr->value.function.esym = sym;\n+  /* Prevent crash when sym->ts.u.derived->components is not set due to previous\n+     error(s).  */\n+  if (sym->ts.type == BT_CLASS && !CLASS_DATA (sym))\n+    return MATCH_ERROR;\n   if (sym->ts.type == BT_CLASS && CLASS_DATA (sym)->as)\n     expr->rank = CLASS_DATA (sym)->as->rank;\n   else if (sym->as != NULL)"}, {"sha": "55d00b076d80d6e4bd7dfa1b17d6a3a40da246dc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c25f7962556e2217d5070720ac879c40063209a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c25f7962556e2217d5070720ac879c40063209a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c25f7962556e2217d5070720ac879c40063209a", "patch": "@@ -1,3 +1,7 @@\n+2015-03-16  Andre Vehreschild  <vehre@gmx.de>\n+\n+\t* gfortran.dg/pointer_2.f90: New test.\n+\n 2015-03-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* testsuite/g++.dg/pr65049.C: New test."}, {"sha": "a9b039d350b5dc13b752d013da6a442a0d71c018", "filename": "gcc/testsuite/gfortran.dg/pointer_2.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c25f7962556e2217d5070720ac879c40063209a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c25f7962556e2217d5070720ac879c40063209a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_2.f90?ref=6c25f7962556e2217d5070720ac879c40063209a", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+! Check that the compiler reports the errors, but does not segfault.\n+! Contributed by: Andre Vehreschild  <vehre@gcc.gnu.org>\n+!\n+program test\n+    implicit none\n+    class(*), pointer :: P\n+    class(*), allocatable :: P2\n+\n+    allocate(P2, source=convertType(P))\n+\n+contains\n+\n+  function convertType(in) ! { dg-error \"must be dummy, allocatable or pointer\" }\n+    class(*), intent(in) :: in\n+    class(*) :: convertType\n+  end function\n+end program test"}]}