{"sha": "239a625ee83ff08df15beab3ca2f1b37881e7f10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM5YTYyNWVlODNmZjA4ZGYxNWJlYWIzY2EyZjFiMzc4ODFlN2YxMA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-03-11T17:45:03Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-03-11T17:45:03Z"}, "message": "fold-const.c (negate_expr_p): We can optimize -((int)X>>C) where C is an integer constant one bit less than...\n\n\n\t* fold-const.c (negate_expr_p) <RSHIFT_EXPR>: We can optimize\n\t-((int)X>>C) where C is an integer constant one bit less than the\n\tsize of X into (unsigned)X>>C.  Similarly for unsigned->signed.\n\t(negate_expr) <RSHIFT_EXPR>: Implement the above transformations.\n\n\t* simplify-rtx.c (simplify_unary_operation): Also implement the\n\tabove transformations at the RTL level.\n\n\t* gcc.c-torture/execute/20040311-1.c: New test case.\n\nFrom-SVN: r79334", "tree": {"sha": "53c0a411f358defff23d8e0c39b1dc0819424479", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53c0a411f358defff23d8e0c39b1dc0819424479"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/239a625ee83ff08df15beab3ca2f1b37881e7f10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/239a625ee83ff08df15beab3ca2f1b37881e7f10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/239a625ee83ff08df15beab3ca2f1b37881e7f10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/239a625ee83ff08df15beab3ca2f1b37881e7f10/comments", "author": null, "committer": null, "parents": [{"sha": "4b0b51c9706b25603247ec6e48d8ac53e8db64f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b0b51c9706b25603247ec6e48d8ac53e8db64f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b0b51c9706b25603247ec6e48d8ac53e8db64f3"}], "stats": {"total": 129, "additions": 129, "deletions": 0}, "files": [{"sha": "dcaa0b67b4938d537c94a6c54397e0b7333124f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239a625ee83ff08df15beab3ca2f1b37881e7f10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239a625ee83ff08df15beab3ca2f1b37881e7f10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=239a625ee83ff08df15beab3ca2f1b37881e7f10", "patch": "@@ -1,3 +1,13 @@\n+2004-03-11  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (negate_expr_p) <RSHIFT_EXPR>: We can optimize\n+\t-((int)X>>C) where C is an integer constant one bit less than the\n+\tsize of X into (unsigned)X>>C.  Similarly for unsigned->signed.\n+\t(negate_expr) <RSHIFT_EXPR>: Implement the above transformations.\n+\n+\t* simplify-rtx.c (simplify_unary_operation): Also implement the\n+\tabove transformations at the RTL level.\n+\n 2004-03-11  Alan Modra  <amodra@bigpond.net.au>\n \n \t* real.c (encode_ibm_extended): Do round low word."}, {"sha": "5e18d6862ac09477729a5d5fd99250a9f2ba2fc9", "filename": "gcc/fold-const.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239a625ee83ff08df15beab3ca2f1b37881e7f10/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239a625ee83ff08df15beab3ca2f1b37881e7f10/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=239a625ee83ff08df15beab3ca2f1b37881e7f10", "patch": "@@ -920,6 +920,18 @@ negate_expr_p (tree t)\n \treturn negate_expr_p (TREE_VALUE (TREE_OPERAND (t, 1)));\n       break;\n \n+    case RSHIFT_EXPR:\n+      /* Optimize -((int)x >> 31) into (unsigned)x >> 31.  */\n+      if (TREE_CODE (TREE_OPERAND (t, 1)) == INTEGER_CST)\n+\t{\n+\t  tree op1 = TREE_OPERAND (t, 1);\n+\t  if (TREE_INT_CST_HIGH (op1) == 0\n+\t      && (unsigned HOST_WIDE_INT) (TYPE_PRECISION (type) - 1)\n+\t\t == TREE_INT_CST_LOW (op1))\n+\t    return true;\n+\t}\n+      break;\n+\n     default:\n       break;\n     }\n@@ -1065,6 +1077,25 @@ negate_expr (tree t)\n \t}\n       break;\n \n+    case RSHIFT_EXPR:\n+      /* Optimize -((int)x >> 31) into (unsigned)x >> 31.  */\n+      if (TREE_CODE (TREE_OPERAND (t, 1)) == INTEGER_CST)\n+\t{\n+\t  tree op1 = TREE_OPERAND (t, 1);\n+\t  if (TREE_INT_CST_HIGH (op1) == 0\n+\t      && (unsigned HOST_WIDE_INT) (TYPE_PRECISION (type) - 1)\n+\t\t == TREE_INT_CST_LOW (op1))\n+\t    {\n+\t      tree ntype = TREE_UNSIGNED (type)\n+\t\t\t   ? (*lang_hooks.types.signed_type) (type)\n+\t\t\t   : (*lang_hooks.types.unsigned_type) (type);\n+\t      tree temp = fold_convert (ntype, TREE_OPERAND (t, 0));\n+\t      temp = fold (build2 (RSHIFT_EXPR, ntype, temp, op1));\n+\t      return fold_convert (type, temp);\n+\t    }\n+\t}\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "2846bb7a80d304e1e97e760cf1f7bb2bae596739", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239a625ee83ff08df15beab3ca2f1b37881e7f10/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239a625ee83ff08df15beab3ca2f1b37881e7f10/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=239a625ee83ff08df15beab3ca2f1b37881e7f10", "patch": "@@ -1013,6 +1013,22 @@ simplify_unary_operation (enum rtx_code code, enum machine_mode mode,\n \t\t\t\t\t    XEXP (op, 1));\n \t    }\n \n+\t  /* (neg (ashiftrt X C)) can be replaced by (lshiftrt X C) when\n+\t     C is equal to the width of MODE minus 1.  */\n+\t  if (GET_CODE (op) == ASHIFTRT\n+\t      && GET_CODE (XEXP (op, 1)) == CONST_INT\n+\t      && INTVAL (XEXP (op, 1)) == GET_MODE_BITSIZE (mode) - 1)\n+\t\treturn simplify_gen_binary (LSHIFTRT, mode,\n+\t\t\t\t\t    XEXP (op, 0), XEXP (op, 1));\n+\n+\t  /* (neg (lshiftrt X C)) can be replaced by (ashiftrt X C) when\n+\t     C is equal to the width of MODE minus 1.  */\n+\t  if (GET_CODE (op) == LSHIFTRT\n+\t      && GET_CODE (XEXP (op, 1)) == CONST_INT\n+\t      && INTVAL (XEXP (op, 1)) == GET_MODE_BITSIZE (mode) - 1)\n+\t\treturn simplify_gen_binary (ASHIFTRT, mode,\n+\t\t\t\t\t    XEXP (op, 0), XEXP (op, 1));\n+\n \t  break;\n \n \tcase SIGN_EXTEND:"}, {"sha": "90916b8b98a76f5b205c3581ff0e206b2589bf0f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239a625ee83ff08df15beab3ca2f1b37881e7f10/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239a625ee83ff08df15beab3ca2f1b37881e7f10/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=239a625ee83ff08df15beab3ca2f1b37881e7f10", "patch": "@@ -1,3 +1,7 @@\n+2004-03-11  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.c-torture/execute/20040311-1.c: New test case.\n+\n 2004-03-11  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/14476"}, {"sha": "013d869abf4de1f483d9ba815c703bfb686d9e19", "filename": "gcc/testsuite/gcc.c-torture/execute/20040311-1.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239a625ee83ff08df15beab3ca2f1b37881e7f10/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040311-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239a625ee83ff08df15beab3ca2f1b37881e7f10/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040311-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040311-1.c?ref=239a625ee83ff08df15beab3ca2f1b37881e7f10", "patch": "@@ -0,0 +1,68 @@\n+/* Copyright (C) 2004 Free Software Foundation.\n+\n+   Check that constant folding and RTL simplification of -(x >> y) doesn't\n+   break anything and produces the expected results.\n+\n+   Written by Roger Sayle, 11th March 2004.  */\n+\n+extern void abort (void);\n+\n+#define INT_BITS  (sizeof(int)*8)\n+\n+int test1(int x)\n+{\n+  return -(x >> (INT_BITS-1));\n+}\n+\n+int test2(unsigned int x)\n+{\n+  return -((int)(x >> (INT_BITS-1)));\n+}\n+\n+int test3(int x)\n+{\n+  int y;\n+  y = INT_BITS-1;\n+  return -(x >> y);\n+}\n+\n+int test4(unsigned int x)\n+{\n+  int y;\n+  y = INT_BITS-1;\n+  return -((int)(x >> y));\n+}\n+\n+int main()\n+{\n+  if (test1(0) != 0)\n+    abort ();\n+  if (test1(1) != 0)\n+    abort ();\n+  if (test1(-1) != 1)\n+    abort ();\n+\n+  if (test2(0) != 0)\n+    abort ();\n+  if (test2(1) != 0)\n+    abort ();\n+  if (test2((unsigned int)-1) != -1)\n+    abort ();\n+\n+  if (test3(0) != 0)\n+    abort ();\n+  if (test3(1) != 0)\n+    abort ();\n+  if (test3(-1) != 1)\n+    abort ();\n+\n+  if (test4(0) != 0)\n+    abort ();\n+  if (test4(1) != 0)\n+    abort ();\n+  if (test4((unsigned int)-1) != -1)\n+    abort ();\n+\n+  return 0;\n+}\n+"}]}