{"sha": "48144cd4904ba629b34bc41389b98578b0822153", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgxNDRjZDQ5MDRiYTYyOWIzNGJjNDEzODliOTg1NzhiMDgyMjE1Mw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-07-11T16:28:22Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-07-11T16:28:22Z"}, "message": "function.c (assign_parms): Don't recombine complex args if fnargs is unchanged from orig_fnargs.\n\n        * function.c (assign_parms): Don't recombine complex args if\n        fnargs is unchanged from orig_fnargs.\n        (split_complex_args): Return args without complex before copying.\n        Re-layout the modified parameters.\n\nFrom-SVN: r69236", "tree": {"sha": "026381820acdf6cc5ea79c7634d784bd0aba2fbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/026381820acdf6cc5ea79c7634d784bd0aba2fbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48144cd4904ba629b34bc41389b98578b0822153", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48144cd4904ba629b34bc41389b98578b0822153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48144cd4904ba629b34bc41389b98578b0822153", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48144cd4904ba629b34bc41389b98578b0822153/comments", "author": null, "committer": null, "parents": [{"sha": "e2fcbaa3e4dbd4eb5184bb03e570c44a5d0c52ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2fcbaa3e4dbd4eb5184bb03e570c44a5d0c52ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2fcbaa3e4dbd4eb5184bb03e570c44a5d0c52ab"}], "stats": {"total": 44, "additions": 33, "deletions": 11}, "files": [{"sha": "10aac1cc34e8b20fa01879944b2cd98cc45517a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48144cd4904ba629b34bc41389b98578b0822153/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48144cd4904ba629b34bc41389b98578b0822153/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48144cd4904ba629b34bc41389b98578b0822153", "patch": "@@ -1,3 +1,10 @@\n+2003-07-11  Richard Henderson  <rth@redhat.com>\n+\n+\t* function.c (assign_parms): Don't recombine complex args if\n+\tfnargs is unchanged from orig_fnargs.\n+\t(split_complex_args): Return args without complex before copying.\n+\tRe-layout the modified parameters.\n+\n 2003-07-11  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* regclass.c (choose_hard_reg_mode): Add third argument."}, {"sha": "301d59d498df837f01761b631609c54824903cab", "filename": "gcc/function.c", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48144cd4904ba629b34bc41389b98578b0822153/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48144cd4904ba629b34bc41389b98578b0822153/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=48144cd4904ba629b34bc41389b98578b0822153", "patch": "@@ -5072,15 +5072,11 @@ assign_parms (tree fndecl)\n \t}\n     }\n \n-  if (SPLIT_COMPLEX_ARGS)\n+  if (SPLIT_COMPLEX_ARGS && fnargs != orig_fnargs)\n     {\n-      parm = orig_fnargs;\n-\n-      for (; parm; parm = TREE_CHAIN (parm))\n+      for (parm = orig_fnargs; parm; parm = TREE_CHAIN (parm))\n \t{\n-\t  tree type = TREE_TYPE (parm);\n-\n-\t  if (TREE_CODE (type) == COMPLEX_TYPE)\n+\t  if (TREE_CODE (TREE_TYPE (parm)) == COMPLEX_TYPE)\n \t    {\n \t      SET_DECL_RTL (parm,\n \t\t\t    gen_rtx_CONCAT (DECL_MODE (parm),\n@@ -5205,30 +5201,49 @@ assign_parms (tree fndecl)\n     }\n }\n \n+/* If ARGS contains entries with complex types, split the entry into two\n+   entries of the component type.  Return a new list of substitutions are\n+   needed, else the old list.  */\n+\n static tree\n split_complex_args (tree args)\n {\n   tree p;\n \n+  /* Before allocating memory, check for the common case of no complex.  */\n+  for (p = args; p; p = TREE_CHAIN (p))\n+    if (TREE_CODE (TREE_TYPE (p)) == COMPLEX_TYPE)\n+      goto found;\n+  return args;\n+\n+ found:\n   args = copy_list (args);\n \n   for (p = args; p; p = TREE_CHAIN (p))\n     {\n-      tree complex_type = TREE_TYPE (p);\n-\n-      if (TREE_CODE (complex_type) == COMPLEX_TYPE)\n+      tree type = TREE_TYPE (p);\n+      if (TREE_CODE (type) == COMPLEX_TYPE)\n \t{\n \t  tree decl;\n-\t  tree subtype = TREE_TYPE (complex_type);\n+\t  tree subtype = TREE_TYPE (type);\n \n \t  /* Rewrite the PARM_DECL's type with its component.  */\n \t  TREE_TYPE (p) = subtype;\n \t  DECL_ARG_TYPE (p) = TREE_TYPE (DECL_ARG_TYPE (p));\n+\t  DECL_MODE (p) = VOIDmode;\n+\t  DECL_SIZE (p) = NULL;\n+\t  DECL_SIZE_UNIT (p) = NULL;\n+\t  layout_decl (p, 0);\n \n+\t  /* Build a second synthetic decl.  */\n \t  decl = build_decl (PARM_DECL, NULL_TREE, subtype);\n \t  DECL_ARG_TYPE (decl) = DECL_ARG_TYPE (p);\n+\t  layout_decl (decl, 0);\n+\n+\t  /* Splice it in; skip the new decl.  */\n \t  TREE_CHAIN (decl) = TREE_CHAIN (p);\n \t  TREE_CHAIN (p) = decl;\n+\t  p = decl;\n \t}\n     }\n "}]}