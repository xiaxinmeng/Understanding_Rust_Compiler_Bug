{"sha": "57dadce202417f7d1e5421f0c389abf67a92a518", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdkYWRjZTIwMjQxN2Y3ZDFlNTQyMWYwYzM4OWFiZjY3YTkyYTUxOA==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2001-06-19T08:34:34Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2001-06-19T08:34:34Z"}, "message": "emit-rtl.c (gen_lowpart_common): Do not assume that SFmode and DFmode are UNITS_PER_WORD and 2*UNITS_PER_WORD.\n\n2001-06-19  Eric Christopher <echristo@redhat.com>\n\n\t* emit-rtl.c (gen_lowpart_common): Do not assume that SFmode\n\tand DFmode are UNITS_PER_WORD and 2*UNITS_PER_WORD.  Use\n\tGET_MODE_BITSIZE instead of GET_MODE_SIZE/UNITS_PER_WORD.\n\nFrom-SVN: r43454", "tree": {"sha": "97bf3752e6300e568daf8fdbc7b9e96284202254", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97bf3752e6300e568daf8fdbc7b9e96284202254"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57dadce202417f7d1e5421f0c389abf67a92a518", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57dadce202417f7d1e5421f0c389abf67a92a518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57dadce202417f7d1e5421f0c389abf67a92a518", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57dadce202417f7d1e5421f0c389abf67a92a518/comments", "author": null, "committer": null, "parents": [{"sha": "beec1ac56eff4c6955449ee7f9cae146b739bd92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beec1ac56eff4c6955449ee7f9cae146b739bd92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beec1ac56eff4c6955449ee7f9cae146b739bd92"}], "stats": {"total": 64, "additions": 36, "deletions": 28}, "files": [{"sha": "3afd65219ce165d9fef6526f18d01412d3a050ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57dadce202417f7d1e5421f0c389abf67a92a518/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57dadce202417f7d1e5421f0c389abf67a92a518/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57dadce202417f7d1e5421f0c389abf67a92a518", "patch": "@@ -1,3 +1,9 @@\n+2001-06-19  Eric Christopher <echristo@redhat.com>\n+\n+\t* emit-rtl.c (gen_lowpart_common): Do not assume that SFmode\n+\tand DFmode are UNITS_PER_WORD and 2*UNITS_PER_WORD.  Use\n+\tGET_MODE_BITSIZE instead of GET_MODE_SIZE/UNITS_PER_WORD.\n+\n Tue Jun 19 01:52:27 2001  J\"orn Rennecke <amylaar@redhat.com>\n \n \t* sh.c (output_branch): Delete bogus code.\n@@ -220,11 +226,11 @@ Thu Jun 14 12:44:15 CEST 2001  Jan Hubicka  <jh@suse.cz>\n 2001-06-13  Zack Weinberg  <zackw@stanford.edu>\n \n \t* Makefile.in: Move _bb and __gcc_bcmp to LIB2FUNCS_ST.\n-\t* libgcc-std.ver: Take out __bb* and __gcc_bcmp.                        \n+\t* libgcc-std.ver: Take out __bb* and __gcc_bcmp.\n \n \t* config/t-slibgcc-elf-ver, config/t-slibgcc-sld,\n \tconfig/alpha/t-osf4, config/mips/t-iris6: Extract all\n-\treferences to @shlib_map_file@, @shlib_objs@, or     \n+\treferences to @shlib_map_file@, @shlib_objs@, or\n \t@shlib_base_name@ to Makefile variables.\n \tBump soname version of libgcc to 1.\n \n@@ -256,7 +262,7 @@ Thu Jun 14 12:44:15 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \tRevert this patch:\n \t* toplev.c (rest_of_compilation): Remove dead code before\n \tpurge_addressof.\n-\t\n+\n 2001-06-12  Alexandre Oliva  <aoliva@redhat.com>\n \n \tReverted:\n@@ -366,8 +372,8 @@ Tue Jun 12 12:20:12 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n 2001-06-11  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n \n-\t* config/m68hc11/m68hc11.md (\"*lshrdi3_const32\"): Mark the clobber \n-\tas an early clobber to make sure it is not used by reload in \n+\t* config/m68hc11/m68hc11.md (\"*lshrdi3_const32\"): Mark the clobber\n+\tas an early clobber to make sure it is not used by reload in\n \tone of the operands.\n \n 2001-06-11  Mark Mitchell  <mark@codesourcery.com>\n@@ -459,13 +465,13 @@ Tue Jun 12 12:20:12 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \t* configure.in: Align --help messages.\n \tRemove trailing full stops.\n \tConsistently use lower case.\n-\tFix DWARF 2 spelling.\t\n+\tFix DWARF 2 spelling.\n \t* configure: Rebuilt.\n \n 2001-06-11  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* config/alpha/alpha.h (CPP_SPEC): Don't define __LANGUAGE_C and\n-\tvariants for .cpp/.cp/.c++ files. \n+\tvariants for .cpp/.cp/.c++ files.\n \tMove definition of __LANGUAGE_C_PLUS_PLUS ...\n \t(CPLUSPLUS_CPP_SPEC): ... here.\n \n@@ -538,7 +544,7 @@ Mon Jun 11 15:47:45 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \t* config/alpha/alpha.c (override_options): Set align_loops,\n \talign_jumps, and align_functions.\n \t* config/alpha/alpha.h (FUNCTION_BOUNDARY): Set to 32 bits.\n-\t(LOOP_ALIGN, LABEL_ALIGN_AFTER_BARRIER): Remove.  \n+\t(LOOP_ALIGN, LABEL_ALIGN_AFTER_BARRIER): Remove.\n \n 2001-06-11  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n@@ -567,13 +573,13 @@ Mon Jun 11 15:47:45 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \t* dwarf2out.c: #include diagnostic.h\n \n \t* toplev.h (warningcount, errorcount, sorrycount): Remove\n-\tdeclarations. \n+\tdeclarations.\n \n \t* toplev.c (warningcount, errorcount, sorrycount): Remove\n-\tdefinitions. \n+\tdefinitions.\n \n \t* diagnostic.h (struct output_buffer): Reorder fields.\n-\t(diagnostic_kind_count): New macro.\t\n+\t(diagnostic_kind_count): New macro.\n \t(errorcount, warningcount, sorrycount): Define as macros.\n \t(diagnostic_report_warnings_p): New macro.\n \t(output_state): Add diagnostic_count field.\n@@ -593,12 +599,12 @@ Mon Jun 11 15:47:45 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n 2001-06-10  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n \n-\t* config/m68hc11/m68hc11-protos.h (m68hc11_initialize_trampoline): \n+\t* config/m68hc11/m68hc11-protos.h (m68hc11_initialize_trampoline):\n \tMove definition in the RTX_CODE section.\n \n 2001-06-10  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n \n-\t* config/m68hc11/m68hc11.h (RETURN_ADDR_RTX): Define the return \n+\t* config/m68hc11/m68hc11.h (RETURN_ADDR_RTX): Define the return\n \taddress as relative to the argument pointer.\n \n Sun Jun 10 10:58:53 CEST 2001  Jan Hubicka  <jh@suse.cz>\n@@ -632,7 +638,7 @@ Sun Jun 10 10:00:17 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* toplev.c (rest_of_compilation): Remove dead code before\n \tpurge_addressof.\n-\t\n+\n 2001-06-09  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cppinit.c (print_help): Document -fpreprocessed.\n@@ -837,7 +843,7 @@ Thu Jun  7 18:27:53 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \t* config/darwin-protos.h: Declare it.\n \t* config/rs6000/rs6000.c (machopic_output_stub): Use\n \tSTRIP_NAME_ENCODING.\n-\t\n+\n 2001-06-07  Mark Mitchell  <mark@codesourcery.com>\n \n \t* tree.h (DECL_SOURCE_FILE): Improve documentation.\n@@ -1025,7 +1031,7 @@ Wed Jun  6 14:51:05 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \tindent.\n \t* toplev.c (main): Disable sibling-call optimization if we are\n \thandling exceptions.\n-\t\n+\n 2001-06-05  Bernd Schmidt  <bernds@redhat.com>\n \n \t* reload1.c (reload): Delete all USEs generated during reload."}, {"sha": "c4f5be394238da413eb2db3b5be92391f838cd68", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57dadce202417f7d1e5421f0c389abf67a92a518/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57dadce202417f7d1e5421f0c389abf67a92a518/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=57dadce202417f7d1e5421f0c389abf67a92a518", "patch": "@@ -900,9 +900,11 @@ gen_lowpart_common (mode, x)\n      FP and integer operands.  This simplifies reload because it\n      doesn't have to deal with constructs like (subreg:DI\n      (const_double:SF ...)) or (subreg:DF (const_int ...)).  */\n+  /* Single-precision floats are always 32-bits and double-precision\n+     floats are always 64-bits.  */\n \n   else if (GET_MODE_CLASS (mode) == MODE_FLOAT\n-\t   && GET_MODE_SIZE (mode) == UNITS_PER_WORD\n+\t   && GET_MODE_BITSIZE (mode) == 32\n \t   && GET_CODE (x) == CONST_INT)\n   {\n       REAL_VALUE_TYPE r;\n@@ -913,7 +915,7 @@ gen_lowpart_common (mode, x)\n       return CONST_DOUBLE_FROM_REAL_VALUE (r, mode);\n   }\n   else if (GET_MODE_CLASS (mode) == MODE_FLOAT\n-\t   && GET_MODE_SIZE (mode) == 2 * UNITS_PER_WORD\n+\t   && GET_MODE_BITSIZE (mode) == 64\n \t   && (GET_CODE (x) == CONST_INT || GET_CODE (x) == CONST_DOUBLE)\n \t   && GET_MODE (x) == VOIDmode)\n     {\n@@ -952,20 +954,20 @@ gen_lowpart_common (mode, x)\n       int endian = WORDS_BIG_ENDIAN ? 1 : 0;\n \n       REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n-      switch (GET_MODE_SIZE (GET_MODE (x)) / UNITS_PER_WORD)\n+      switch (GET_MODE_BITSIZE (GET_MODE (x)))\n \t{\n-\tcase 1:\n+\tcase 32:\n \t  REAL_VALUE_TO_TARGET_SINGLE (r, i[endian]);\n \t  i[1 - endian] = 0;\n \t  break;\n-\tcase 2:\n+\tcase 64:\n \t  REAL_VALUE_TO_TARGET_DOUBLE (r, i);\n \t  break;\n-\tcase 3:\n+\tcase 96:\n \t  REAL_VALUE_TO_TARGET_LONG_DOUBLE (r, i + endian);\n \t  i[3-3*endian] = 0;\n \t  break;\n-\tcase 4:\n+\tcase 128:\n \t  REAL_VALUE_TO_TARGET_LONG_DOUBLE (r, i);\n \t  break;\n \tdefault:\n@@ -986,15 +988,15 @@ gen_lowpart_common (mode, x)\n \tfor (c = 0; c < 4; c++)\n \t  i[c] &= ~ (0L);\n \n-\tswitch (GET_MODE_SIZE (GET_MODE (x)) / UNITS_PER_WORD)\n+\tswitch (GET_MODE_BITSIZE (GET_MODE (x)))\n \t  {\n-\t  case 1:\n-\t  case 2:\n+\t  case 32:\n+\t  case 64:\n \t    return immed_double_const (((unsigned long) i[endian]) |\n \t\t\t\t       (((HOST_WIDE_INT) i[1-endian]) << 32),\n \t\t\t\t       0, mode);\n-\t  case 3:\n-\t  case 4:\n+\t  case 96:\n+\t  case 128:\n \t    return immed_double_const (((unsigned long) i[endian*3]) |\n \t\t\t\t       (((HOST_WIDE_INT) i[1+endian]) << 32),\n \t\t\t\t       ((unsigned long) i[2-endian]) |"}]}