{"sha": "00d8545d7058d2fcac6ef7203773f17f3b517121", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBkODU0NWQ3MDU4ZDJmY2FjNmVmNzIwMzc3M2YxN2YzYjUxNzEyMQ==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-01-08T12:04:06Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-04T09:17:36Z"}, "message": "[Ada] Remove arbitrary and redundant qualification with Sinfo\n\ngcc/ada/\n\n\t* pprint.adb: Remove qualification of arbitrary calls to\n\tSinfo.Expressions and Sinfo.Parameter_Associations.", "tree": {"sha": "5aae834115c900d7f2d58cb6a9b4a98c81bb0cef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5aae834115c900d7f2d58cb6a9b4a98c81bb0cef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00d8545d7058d2fcac6ef7203773f17f3b517121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d8545d7058d2fcac6ef7203773f17f3b517121", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d8545d7058d2fcac6ef7203773f17f3b517121", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d8545d7058d2fcac6ef7203773f17f3b517121/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ae4fcfa8708491598a32b5cc0a725d7b2ea3bf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ae4fcfa8708491598a32b5cc0a725d7b2ea3bf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ae4fcfa8708491598a32b5cc0a725d7b2ea3bf8"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "161b62afaa5c454b77e66c637fbd88a20fa981f8", "filename": "gcc/ada/pprint.adb", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d8545d7058d2fcac6ef7203773f17f3b517121/gcc%2Fada%2Fpprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d8545d7058d2fcac6ef7203773f17f3b517121/gcc%2Fada%2Fpprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpprint.adb?ref=00d8545d7058d2fcac6ef7203773f17f3b517121", "patch": "@@ -238,10 +238,10 @@ package body Pprint is\n                return \"new \" & Expr_Name (Expression (Expr));\n \n             when N_Aggregate =>\n-               if Present (Sinfo.Expressions (Expr)) then\n+               if Present (Expressions (Expr)) then\n                   return\n                     List_Name\n-                      (List      => First (Sinfo.Expressions (Expr)),\n+                      (List      => First (Expressions (Expr)),\n                        Add_Space => False);\n \n                --  Do not return empty string for (others => <>) aggregate\n@@ -265,7 +265,7 @@ package body Pprint is\n             when N_Extension_Aggregate =>\n                return \"(\" & Expr_Name (Ancestor_Part (Expr)) & \" with \"\n                  & List_Name\n-                     (List      => First (Sinfo.Expressions (Expr)),\n+                     (List      => First (Expressions (Expr)),\n                       Add_Space => False,\n                       Add_Paren => False) & \")\";\n \n@@ -356,9 +356,8 @@ package body Pprint is\n                           and then Nkind (Decl) = N_Object_Declaration\n                           and then not Comes_From_Source (Decl)\n                           and then Constant_Present (Decl)\n-                          and then Present (Sinfo.Expression (Decl))\n-                          and then Nkind (Sinfo.Expression (Decl)) =\n-                                     N_Reference\n+                          and then Present (Expression (Decl))\n+                          and then Nkind (Expression (Decl)) = N_Reference\n                         then\n                            return \"\";\n                         end if;\n@@ -411,7 +410,7 @@ package body Pprint is\n \n             when N_If_Expression =>\n                declare\n-                  N : constant Node_Id := First (Sinfo.Expressions (Expr));\n+                  N : constant Node_Id := First (Expressions (Expr));\n                begin\n                   return\n                     \"if \" & Expr_Name (N) & \" then \"\n@@ -622,9 +621,9 @@ package body Pprint is\n                if Take_Prefix then\n                   return\n                     Expr_Name (Prefix (Expr))\n-                      & List_Name (First (Sinfo.Expressions (Expr)));\n+                      & List_Name (First (Expressions (Expr)));\n                else\n-                  return List_Name (First (Sinfo.Expressions (Expr)));\n+                  return List_Name (First (Expressions (Expr)));\n                end if;\n \n             when N_Function_Call =>\n@@ -636,13 +635,12 @@ package body Pprint is\n                if Default = \"\" then\n                   return '('\n                     & Expr_Name (Name (Expr))\n-                    & List_Name (First (Sinfo.Parameter_Associations (Expr)))\n+                    & List_Name (First (Parameter_Associations (Expr)))\n                     & ')';\n                else\n                   return\n                     Expr_Name (Name (Expr))\n-                      & List_Name\n-                          (First (Sinfo.Parameter_Associations (Expr)));\n+                      & List_Name (First (Parameter_Associations (Expr)));\n                end if;\n \n             when N_Null =>\n@@ -768,11 +766,11 @@ package body Pprint is\n                end if;\n \n             when N_Indexed_Component =>\n-               Right := Original_Node (Last (Sinfo.Expressions (Right)));\n+               Right := Original_Node (Last (Expressions (Right)));\n                Append_Paren := Append_Paren + 1;\n \n             when N_Function_Call =>\n-               if Present (Sinfo.Parameter_Associations (Right)) then\n+               if Present (Parameter_Associations (Right)) then\n                   declare\n                      Rover : Node_Id;\n                      Found : Boolean;\n@@ -781,7 +779,7 @@ package body Pprint is\n                      --  Avoid source position confusion associated with\n                      --  parameters for which Comes_From_Source is False.\n \n-                     Rover := First (Sinfo.Parameter_Associations (Right));\n+                     Rover := First (Parameter_Associations (Right));\n                      Found := False;\n                      while Present (Rover) loop\n                         if Comes_From_Source (Original_Node (Rover)) then"}]}