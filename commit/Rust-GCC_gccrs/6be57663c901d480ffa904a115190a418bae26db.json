{"sha": "6be57663c901d480ffa904a115190a418bae26db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJlNTc2NjNjOTAxZDQ4MGZmYTkwNGExMTUxOTBhNDE4YmFlMjZkYg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2000-01-04T20:29:31Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2000-01-04T20:29:31Z"}, "message": "sysv4.h (ASM_OUTPUT_DEF): Undefine.\n\n\t* rs6000/sysv4.h (ASM_OUTPUT_DEF): Undefine.\n\t(HANDLE_PRAGMA_PACK): Undefine.\n\t(SLOW_UNALIGNED_ACCESS): Define.\n\nFrom-SVN: r31213", "tree": {"sha": "52f4153904881ea4c0b6f6454937789afd78f187", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52f4153904881ea4c0b6f6454937789afd78f187"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6be57663c901d480ffa904a115190a418bae26db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6be57663c901d480ffa904a115190a418bae26db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6be57663c901d480ffa904a115190a418bae26db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6be57663c901d480ffa904a115190a418bae26db/comments", "author": null, "committer": null, "parents": [{"sha": "5fad8ebf24ae2fefce8e1a28061b50ccceda57bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fad8ebf24ae2fefce8e1a28061b50ccceda57bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fad8ebf24ae2fefce8e1a28061b50ccceda57bb"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "159036699fb5767d9c6510860655e8df7f5067e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6be57663c901d480ffa904a115190a418bae26db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6be57663c901d480ffa904a115190a418bae26db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6be57663c901d480ffa904a115190a418bae26db", "patch": "@@ -1,3 +1,9 @@\n+2000-01-04  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* rs6000/sysv4.h (ASM_OUTPUT_DEF): Undefine.\n+\t(HANDLE_PRAGMA_PACK): Undefine.\n+\t(SLOW_UNALIGNED_ACCESS): Define.\n+\n 2000-01-04  David Edelsohn  <edelsohn@gnu.org>\n \n \t* expmed.c (SLOW_UNALIGNED_ACCESS): Add mode and align parameters"}, {"sha": "65b6cd5f104aab117d4276e96031e7499b80286a", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6be57663c901d480ffa904a115190a418bae26db/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6be57663c901d480ffa904a115190a418bae26db/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=6be57663c901d480ffa904a115190a418bae26db", "patch": "@@ -350,13 +350,15 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Undefine some things which are defined by the generic svr4.h.  */\n \n+#undef ASM_DECLARE_FUNCTION_NAME\n #undef ASM_FILE_END\n+#undef ASM_OUTPUT_CONSTRUCTOR\n+#undef ASM_OUTPUT_DESTRUCTOR\n+#undef ASM_OUTPUT_DEF\n #undef ASM_OUTPUT_EXTERNAL_LIBCALL\n+#undef HANDLE_PRAGMA_PACK\n #undef READONLY_DATA_SECTION\n #undef SELECT_SECTION\n-#undef ASM_DECLARE_FUNCTION_NAME\n-#undef ASM_OUTPUT_CONSTRUCTOR\n-#undef ASM_OUTPUT_DESTRUCTOR\n \n /* Use the regular svr4 definitions.  */\n \n@@ -397,6 +399,14 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef\tSTRICT_ALIGNMENT\n #define\tSTRICT_ALIGNMENT (TARGET_STRICT_ALIGN)\n \n+/* Define this macro to be the value 1 if unaligned accesses have a cost\n+   many times greater than aligned accesses, for example if they are\n+   emulated in a trap handler.  */\n+#define SLOW_UNALIGNED_ACCESS(MODE, ALIGN)\t\t\t\\\n+   ((STRICT_ALIGNMENT\t\t\t\t\t\t\\\n+     || (((MODE) == SFmode || (MODE) == DFmode || (MODE) == DImode) \\\n+         && (ALIGN) < 4)) ? 1 : 0)\n+\n /* Alignment in bits of the stack boundary.  Note, in order to allow building\n    one set of libraries with -mno-eabi instead of eabi libraries and non-eabi\n    versions, just use 64 as the stack boundary.  */"}, {"sha": "6a3ff5185d5cccc27e0cbe76d0ff29981950bf58", "filename": "gcc/tm.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6be57663c901d480ffa904a115190a418bae26db/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6be57663c901d480ffa904a115190a418bae26db/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=6be57663c901d480ffa904a115190a418bae26db", "patch": "@@ -4731,7 +4731,9 @@ moves.  This can cause significantly more instructions to be produced.\n Therefore, do not set this macro non-zero if unaligned accesses only add a\n cycle or two to the time for a memory access.\n \n-If the value of this macro is always zero, it need not be defined.\n+If the value of this macro is always zero, it need not be defined.  If\n+this macro is defined, it should produce a non-zero value when\n+@code{STRICT_ALIGNMENT} is non-zero.\n \n @findex DONT_REDUCE_ADDR\n @item DONT_REDUCE_ADDR"}]}