{"sha": "ddd0d18c9c07025d578f445dc9a3544020861197", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRkMGQxOGM5YzA3MDI1ZDU3OGY0NDVkYzlhMzU0NDAyMDg2MTE5Nw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-11-01T09:19:31Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-11-01T09:19:31Z"}, "message": "Make __PRETTY_FUNCTION__-like functions mergeable string csts (PR c++/64266).\n\n2018-11-01  Martin Liska  <mliska@suse.cz>\n\t    Jason Merrill  <jason@redhat.com>\n\n\tPR c++/64266\n\tPR bootstrap/70422\n\tPR ipa/81277\n\t* cp-tree.h (DECL_FNAME_P): New macro.\n\t* decl.c (cp_make_fname_decl): Set DECL_DECLARED_CONSTEXPR_P,\n        DECL_VALUE_EXPR, DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P.\n\t(cp_finish_decl):\n\t* lambda.c (is_capture_proxy): Use DECL_FNAME_P.\n\t* pt.c (tsubst_expr): Handle DECL_PRETTY_FUNCTION_P.\n2018-11-01  Martin Liska  <mliska@suse.cz>\n\t    Jason Merrill  <jason@redhat.com>\n\n\tPR c++/64266\n\tPR bootstrap/70422\n\tPR ipa/81277\n\t* g++.dg/cpp0x/constexpr-__func__2.C: Make it a compilation\n\ttest.\n\t* g++.old-deja/g++.ext/pretty4.C: Remove as the run-time\n\tassumptions are not longer valid.\n\nCo-Authored-By: Jason Merrill <jason@redhat.com>\n\nFrom-SVN: r265711", "tree": {"sha": "fc18f31e77d64af9f8639b83af8e225bb3023243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc18f31e77d64af9f8639b83af8e225bb3023243"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddd0d18c9c07025d578f445dc9a3544020861197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd0d18c9c07025d578f445dc9a3544020861197", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddd0d18c9c07025d578f445dc9a3544020861197", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd0d18c9c07025d578f445dc9a3544020861197/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "964f78b7e75a4dd4c5c68cec0858270fbfc1d37b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/964f78b7e75a4dd4c5c68cec0858270fbfc1d37b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/964f78b7e75a4dd4c5c68cec0858270fbfc1d37b"}], "stats": {"total": 166, "additions": 60, "deletions": 106}, "files": [{"sha": "6d483455922714e9c11db8355b8d96c62d9c5c8f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd0d18c9c07025d578f445dc9a3544020861197/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd0d18c9c07025d578f445dc9a3544020861197/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ddd0d18c9c07025d578f445dc9a3544020861197", "patch": "@@ -1,3 +1,16 @@\n+2018-11-01  Martin Liska  <mliska@suse.cz>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/64266\n+\tPR bootstrap/70422\n+\tPR ipa/81277\n+\t* cp-tree.h (DECL_FNAME_P): New macro.\n+\t* decl.c (cp_make_fname_decl): Set DECL_DECLARED_CONSTEXPR_P,\n+        DECL_VALUE_EXPR, DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P.\n+\t(cp_finish_decl):\n+\t* lambda.c (is_capture_proxy): Use DECL_FNAME_P.\n+\t* pt.c (tsubst_expr): Handle DECL_PRETTY_FUNCTION_P.\n+\n 2018-10-31  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (OVL_DEDUP_P): New."}, {"sha": "42449f10a48907ffa220638a5d8027952a86a2cd", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd0d18c9c07025d578f445dc9a3544020861197/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd0d18c9c07025d578f445dc9a3544020861197/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ddd0d18c9c07025d578f445dc9a3544020861197", "patch": "@@ -3132,6 +3132,14 @@ struct GTY(()) lang_decl {\n   (DECL_NAME (NODE) \\\n    && id_equal (DECL_NAME (NODE), \"__PRETTY_FUNCTION__\"))\n \n+/* For a DECL, true if it is __func__ or similar.  */\n+#define DECL_FNAME_P(NODE)\t\t\t\t\t\\\n+  (VAR_P (NODE) && DECL_NAME (NODE) && DECL_ARTIFICIAL (NODE)\t\\\n+   && DECL_HAS_VALUE_EXPR_P (NODE)\t\t\t\t\\\n+   && (id_equal (DECL_NAME (NODE), \"__PRETTY_FUNCTION__\")\t\\\n+       || id_equal (DECL_NAME (NODE), \"__FUNCTION__\")\t\t\\\n+       || id_equal (DECL_NAME (NODE), \"__func__\")))\n+\n /* Nonzero if the variable was declared to be thread-local.\n    We need a special C++ version of this test because the middle-end\n    DECL_THREAD_LOCAL_P uses the symtab, so we can't use it for"}, {"sha": "1cea5262b620c73d79d4b3ac21745981ae0046bd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd0d18c9c07025d578f445dc9a3544020861197/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd0d18c9c07025d578f445dc9a3544020861197/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ddd0d18c9c07025d578f445dc9a3544020861197", "patch": "@@ -4465,7 +4465,7 @@ cp_fname_init (const char* name, tree *type_p)\n static tree\n cp_make_fname_decl (location_t loc, tree id, int type_dep)\n {\n-  const char *const name = (type_dep && processing_template_decl\n+  const char *const name = (type_dep && in_template_function ()\n \t\t\t    ? NULL : fname_as_string (type_dep));\n   tree type;\n   tree init = cp_fname_init (name, &type);\n@@ -4474,23 +4474,35 @@ cp_make_fname_decl (location_t loc, tree id, int type_dep)\n   if (name)\n     free (CONST_CAST (char *, name));\n \n-  TREE_STATIC (decl) = 1;\n+  /* As we're using pushdecl_with_scope, we must set the context.  */\n+  DECL_CONTEXT (decl) = current_function_decl;\n+\n   TREE_READONLY (decl) = 1;\n   DECL_ARTIFICIAL (decl) = 1;\n+  DECL_DECLARED_CONSTEXPR_P (decl) = 1;\n+  TREE_STATIC (decl) = 1;\n \n   TREE_USED (decl) = 1;\n \n+  if (init)\n+    {\n+      SET_DECL_VALUE_EXPR (decl, init);\n+      DECL_HAS_VALUE_EXPR_P (decl) = 1;\n+      /* For decl_constant_var_p.  */\n+      DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl) = 1;\n+    }\n+\n   if (current_function_decl)\n     {\n       DECL_CONTEXT (decl) = current_function_decl;\n       decl = pushdecl_outermost_localscope (decl);\n-      cp_finish_decl (decl, init, /*init_const_expr_p=*/false, NULL_TREE,\n-\t\t      LOOKUP_ONLYCONVERTING);\n+      if (decl != error_mark_node)\n+\tadd_decl_expr (decl);\n     }\n   else\n     {\n       DECL_THIS_STATIC (decl) = true;\n-      pushdecl_top_level_and_finish (decl, init);\n+      pushdecl_top_level_and_finish (decl, NULL_TREE);\n     }\n \n   return decl;\n@@ -7052,8 +7064,9 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t    init = NULL_TREE;\n \t  release_tree_vector (cleanups);\n \t}\n-      else if (!DECL_PRETTY_FUNCTION_P (decl))\n+      else\n \t{\n+\t  gcc_assert (!DECL_PRETTY_FUNCTION_P (decl));\n \t  /* Deduce array size even if the initializer is dependent.  */\n \t  maybe_deduce_size_from_array_init (decl, init);\n \t  /* And complain about multiple initializers.  */"}, {"sha": "318671bbcd0a209a2f9166253fd79fd40abf64dc", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd0d18c9c07025d578f445dc9a3544020861197/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd0d18c9c07025d578f445dc9a3544020861197/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=ddd0d18c9c07025d578f445dc9a3544020861197", "patch": "@@ -262,6 +262,7 @@ is_capture_proxy (tree decl)\n \t  && DECL_HAS_VALUE_EXPR_P (decl)\n \t  && !DECL_ANON_UNION_VAR_P (decl)\n \t  && !DECL_DECOMPOSITION_P (decl)\n+\t  && !DECL_FNAME_P (decl)\n \t  && LAMBDA_FUNCTION_P (DECL_CONTEXT (decl)));\n }\n "}, {"sha": "2dc0cb1629cdc183273fd27b1677b5beb1b4a3eb", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd0d18c9c07025d578f445dc9a3544020861197/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd0d18c9c07025d578f445dc9a3544020861197/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ddd0d18c9c07025d578f445dc9a3544020861197", "patch": "@@ -16735,6 +16735,10 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t    register_local_specialization (inst, decl);\n \t    break;\n \t  }\n+\telse if (DECL_PRETTY_FUNCTION_P (decl))\n+\t  decl = make_fname_decl (DECL_SOURCE_LOCATION (decl),\n+\t\t\t\t  DECL_NAME (decl),\n+\t\t\t\t  true/*DECL_PRETTY_FUNCTION_P (decl)*/);\n \telse if (DECL_IMPLICIT_TYPEDEF_P (decl)\n \t\t && LAMBDA_TYPE_P (TREE_TYPE (decl)))\n \t  /* Don't copy the old closure; we'll create a new one in\n@@ -16793,17 +16797,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t\t\t\t\t\t   complain, in_decl, &first,\n \t\t\t\t\t\t   &cnt);\n \n-\t\t    if (VAR_P (decl)\n-\t\t\t&& DECL_PRETTY_FUNCTION_P (decl))\n-\t\t      {\n-\t\t\t/* For __PRETTY_FUNCTION__ we have to adjust the\n-\t\t\t   initializer.  */\n-\t\t\tconst char *const name\n-\t\t\t  = cxx_printable_name (current_function_decl, 2);\n-\t\t\tinit = cp_fname_init (name, &TREE_TYPE (decl));\n-\t\t      }\n-\t\t    else\n-\t\t      init = tsubst_init (init, decl, args, complain, in_decl);\n+\t\t    init = tsubst_init (init, decl, args, complain, in_decl);\n \n \t\t    if (VAR_P (decl))\n \t\t      const_init = (DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P"}, {"sha": "8a0e66d4951ed34a9294779c01f98d27d516ce7e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd0d18c9c07025d578f445dc9a3544020861197/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd0d18c9c07025d578f445dc9a3544020861197/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ddd0d18c9c07025d578f445dc9a3544020861197", "patch": "@@ -1,3 +1,14 @@\n+2018-11-01  Martin Liska  <mliska@suse.cz>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/64266\n+\tPR bootstrap/70422\n+\tPR ipa/81277\n+\t* g++.dg/cpp0x/constexpr-__func__2.C: Make it a compilation\n+\ttest.\n+\t* g++.old-deja/g++.ext/pretty4.C: Remove as the run-time\n+\tassumptions are not longer valid.\n+\n 2018-10-31  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/20520"}, {"sha": "673fb4f3a93cbd83fd2c1a78d1da8fce3e71c2f3", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-__func__2.C", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd0d18c9c07025d578f445dc9a3544020861197/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-__func__2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd0d18c9c07025d578f445dc9a3544020861197/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-__func__2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-__func__2.C?ref=ddd0d18c9c07025d578f445dc9a3544020861197", "patch": "@@ -1,5 +1,5 @@\n // PR c++/70353\n-// { dg-do link { target c++11 } }\n+// { dg-do compile { target c++11 } }\n \n constexpr const char* ce ()\n {\n@@ -8,6 +8,5 @@ constexpr const char* ce ()\n \n const char *c = ce();\n \n-int main()\n-{\n-}\n+#define SA(X) static_assert((X),#X)\n+SA(ce()[0] == 'c');"}, {"sha": "9017d567132425f26f5c060e4ddb89d9388055ea", "filename": "gcc/testsuite/g++.old-deja/g++.ext/pretty4.C", "status": "removed", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/964f78b7e75a4dd4c5c68cec0858270fbfc1d37b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fpretty4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/964f78b7e75a4dd4c5c68cec0858270fbfc1d37b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fpretty4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fpretty4.C?ref=964f78b7e75a4dd4c5c68cec0858270fbfc1d37b", "patch": "@@ -1,85 +0,0 @@\n-// { dg-do run  }\n-// Copyright (C) 2000 Free Software Foundation, Inc.\n-// Contributed by Nathan Sidwell 3 Mar 2000 <nathan@codesourcery.com>\n-\n-// __PRETTY_FUNCTION__, __FUNCTION__ and __function__ should have the\n-// type char const [X], where X is the right value for that particular function\n-\n-static void const *strings[4];\n-static void const *tpls[4];\n-static unsigned pos = 0;\n-static int fail;\n-static void const *ptr = 0;\n-\n-void unover (char const (*)[5]) {}\n-void foo (char const (*)[5]) {}\n-void foo (void *) {fail = 1;}\n-void foo (void const *) {fail = 1;}\n-void baz (char const (&)[5]) {}\n-\n-template<unsigned I> void PV (char const (&objRef)[I])\n-{\n-  strings[pos] = objRef;\n-  tpls[pos] = __PRETTY_FUNCTION__;\n-  pos++;\n-}\n-\n-void fn ()\n-{\n-  PV (__FUNCTION__);\n-  PV (__func__);\n-  PV (__PRETTY_FUNCTION__);\n-  PV (\"wibble\");\n-}\n-\n-void baz ()\n-{\n-  ptr = __FUNCTION__;\n-  // there should be no string const merging\n-  if (ptr == \"baz\")\n-    fail = 1;\n-  // but all uses should be the same.\n-  if (ptr != __FUNCTION__)\n-    fail = 1;\n-}\n-int baz (int)\n-{\n-  return ptr == __FUNCTION__;\n-}\n-\n-int main ()\n-{\n-  // make sure we actually emit the VAR_DECL when needed, and things have the\n-  // expected type.\n-  foo (&__FUNCTION__);\n-  baz (__FUNCTION__);\n-  unover (&__FUNCTION__);\n-  if (fail)\n-    return 1;\n-  \n-  // __FUNCTION__ should be unique across functions with the same base name\n-  // (it's a local static, _not_ a string).\n-  baz ();\n-  if (fail)\n-    return 1;\n-  if (baz (1))\n-    return 1;\n-  fn ();\n-  \n-  // Check the names of fn. They should all be distinct strings (though two\n-  // will have the same value).\n-  if (strings[0] == strings[1])\n-    return 1;\n-  if (strings[0] == strings[2])\n-    return 1;\n-  if (strings[1] == strings[2])\n-    return 1;\n-\n-  // check the names of the template functions so invoked\n-  if (tpls[0] != tpls[1])\n-    return 1;\n-  if (tpls[0] == tpls[2])\n-    return 1;\n-  \n-  return 0;\n-}"}]}