{"sha": "a67e7daab5abd73d150874c62812ae94f093fbe3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY3ZTdkYWFiNWFiZDczZDE1MDg3NGM2MjgxMmFlOTRmMDkzZmJlMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-01-11T11:30:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-01-11T11:30:07Z"}, "message": "re PR c++/46658 (internal compiler error on cp/init.c)\n\n\tPR c++/46658\n\t* init.c (build_new_1): Handle value-init in templates differently.\n\nFrom-SVN: r168655", "tree": {"sha": "6de7c93efa146c7b2059b094ad367dcb5e7c66ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6de7c93efa146c7b2059b094ad367dcb5e7c66ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a67e7daab5abd73d150874c62812ae94f093fbe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a67e7daab5abd73d150874c62812ae94f093fbe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a67e7daab5abd73d150874c62812ae94f093fbe3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a67e7daab5abd73d150874c62812ae94f093fbe3/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "41d04a8dfe0313dd2a4e2501d9ab6d1f06378dbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41d04a8dfe0313dd2a4e2501d9ab6d1f06378dbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41d04a8dfe0313dd2a4e2501d9ab6d1f06378dbf"}], "stats": {"total": 65, "additions": 51, "deletions": 14}, "files": [{"sha": "ba3eca36026822e9ab8ec7e64609c96e1db407e2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a67e7daab5abd73d150874c62812ae94f093fbe3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a67e7daab5abd73d150874c62812ae94f093fbe3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a67e7daab5abd73d150874c62812ae94f093fbe3", "patch": "@@ -1,5 +1,8 @@\n 2011-01-11  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/46658\n+\t* init.c (build_new_1): Handle value-init in templates differently.\n+\n \tPR c++/45520\n \t* tree.c (maybe_dummy_object): Check current_class_ref against\n \tcontext, not current_class_type."}, {"sha": "1546bf887f8fee299d14251dd55d90a0488cb35d", "filename": "gcc/cp/init.c", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a67e7daab5abd73d150874c62812ae94f093fbe3/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a67e7daab5abd73d150874c62812ae94f093fbe3/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=a67e7daab5abd73d150874c62812ae94f093fbe3", "patch": "@@ -2294,7 +2294,22 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n \t  explicit_value_init_p = true;\n \t}\n \n-      if (array_p)\n+      if (processing_template_decl && explicit_value_init_p)\n+\t{\n+\t  /* build_value_init doesn't work in templates, and we don't need\n+\t     the initializer anyway since we're going to throw it away and\n+\t     rebuild it at instantiation time, so just build up a single\n+\t     constructor call to get any appropriate diagnostics.  */\n+\t  init_expr = cp_build_indirect_ref (data_addr, RO_NULL, complain);\n+\t  if (TYPE_NEEDS_CONSTRUCTING (elt_type))\n+\t    init_expr = build_special_member_call (init_expr,\n+\t\t\t\t\t\t   complete_ctor_identifier,\n+\t\t\t\t\t\t   init, elt_type,\n+\t\t\t\t\t\t   LOOKUP_NORMAL,\n+\t\t\t\t\t\t   complain);\n+\t  stable = stabilize_init (init_expr, &init_preeval_expr);\n+\t}\n+      else if (array_p)\n \t{\n \t  tree vecinit = NULL_TREE;\n \t  if (*init && VEC_length (tree, *init) == 1\n@@ -2343,8 +2358,7 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n \t{\n \t  init_expr = cp_build_indirect_ref (data_addr, RO_NULL, complain);\n \n-\t  if (TYPE_NEEDS_CONSTRUCTING (type)\n-\t      && (!explicit_value_init_p || processing_template_decl))\n+\t  if (TYPE_NEEDS_CONSTRUCTING (type) && !explicit_value_init_p)\n \t    {\n \t      init_expr = build_special_member_call (init_expr,\n \t\t\t\t\t\t     complete_ctor_identifier,\n@@ -2354,17 +2368,11 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n \t    }\n \t  else if (explicit_value_init_p)\n \t    {\n-\t      if (processing_template_decl)\n-\t\t/* Don't worry about it, we'll handle this properly at\n-\t\t   instantiation time.  */;\n-\t      else\n-\t\t{\n-\t\t  /* Something like `new int()'.  */\n-\t\t  tree val = build_value_init (type, complain);\n-\t\t  if (val == error_mark_node)\n-\t\t    return error_mark_node;\n-\t\t  init_expr = build2 (INIT_EXPR, type, init_expr, val);\n-\t\t}\n+\t      /* Something like `new int()'.  */\n+\t      tree val = build_value_init (type, complain);\n+\t      if (val == error_mark_node)\n+\t\treturn error_mark_node;\n+\t      init_expr = build2 (INIT_EXPR, type, init_expr, val);\n \t    }\n \t  else\n \t    {"}, {"sha": "64f7ad06be2b4d355493ef5db41d8e99a0609daf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a67e7daab5abd73d150874c62812ae94f093fbe3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a67e7daab5abd73d150874c62812ae94f093fbe3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a67e7daab5abd73d150874c62812ae94f093fbe3", "patch": "@@ -1,5 +1,8 @@\n 2011-01-11  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/46658\n+\t* g++.dg/template/new10.C: New.\n+\n \tPR c++/45520\n \t* g++.dg/cpp0x/lambda/lambda-this3.C: New.\n "}, {"sha": "98293ba5bd458b309638c64ddb1c5d6ae89ad21a", "filename": "gcc/testsuite/g++.dg/template/new10.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a67e7daab5abd73d150874c62812ae94f093fbe3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnew10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a67e7daab5abd73d150874c62812ae94f093fbe3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnew10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnew10.C?ref=a67e7daab5abd73d150874c62812ae94f093fbe3", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/46658\n+\n+typedef unsigned short int uint16_t;\n+typedef unsigned int uint32_t;\n+template<class T> class scoped_array {\n+    void reset(T * p = 0)     { }\n+};\n+typedef uint16_t SequenceIndex;\n+typedef uint32_t SequenceMapIndex;\n+class Analyzer  {\n+    template <typename READER>\n+        bool ReadDictionary( READER& reader );\n+    scoped_array<SequenceIndex> map_from_2_hints_to_composite_sequence;\n+    SequenceMapIndex number_of_composite_sequences;\n+};\n+template <typename READER>\n+bool Analyzer::ReadDictionary( READER &reader )\n+{\n+  const SequenceMapIndex ntt\n+    = ( number_of_composite_sequences + SequenceMapIndex( 1 ) )\n+    * ( number_of_composite_sequences + 1 );\n+  map_from_2_hints_to_composite_sequence.reset(new SequenceIndex[ntt]());\n+}"}]}