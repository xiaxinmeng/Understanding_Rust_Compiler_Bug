{"sha": "47d3fdb242c7374a6fe3e4b0981a70767bc585a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdkM2ZkYjI0MmM3Mzc0YTZmZTNlNGIwOTgxYTcwNzY3YmM1ODVhMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-02-24T08:27:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-02-24T08:27:25Z"}, "message": "re PR tree-optimization/69907 (wrong code at -O3 on x86_64-linux-gnu)\n\n2016-02-24  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/69907\n\t* tree-vect-stmts.c (vectorizable_load): Check for gaps at the\n\tend of permutations for BB vectorization.\n\n\t* gcc.dg/vect/bb-slp-pr69907.c: New testcase.\n\t* gcc.dg/vect/bb-slp-34.c: XFAIL.\n\t* gcc.dg/vect/bb-slp-pr68892.c: Likewise.\n\nFrom-SVN: r233655", "tree": {"sha": "e0dba67a080ec0f33dc1d5e7f9f7ead474c6fe8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0dba67a080ec0f33dc1d5e7f9f7ead474c6fe8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47d3fdb242c7374a6fe3e4b0981a70767bc585a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47d3fdb242c7374a6fe3e4b0981a70767bc585a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47d3fdb242c7374a6fe3e4b0981a70767bc585a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47d3fdb242c7374a6fe3e4b0981a70767bc585a2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dab73e731721556b70d7c71d8253e089aa2dd303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dab73e731721556b70d7c71d8253e089aa2dd303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dab73e731721556b70d7c71d8253e089aa2dd303"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "dc87f1b5d64f5482a94b232ae8d3d8a8ed708c7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d3fdb242c7374a6fe3e4b0981a70767bc585a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d3fdb242c7374a6fe3e4b0981a70767bc585a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47d3fdb242c7374a6fe3e4b0981a70767bc585a2", "patch": "@@ -1,3 +1,9 @@\n+2016-02-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69907\n+\t* tree-vect-stmts.c (vectorizable_load): Check for gaps at the\n+\tend of permutations for BB vectorization.\n+\n 2016-02-24  Christian Bruel  <christian.bruel@st.com>\n \n \t* config/arm/arm-c.c (arm_option_override): Initialize"}, {"sha": "d716932e42f21f5483ecddc97323c366378b8612", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d3fdb242c7374a6fe3e4b0981a70767bc585a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d3fdb242c7374a6fe3e4b0981a70767bc585a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=47d3fdb242c7374a6fe3e4b0981a70767bc585a2", "patch": "@@ -1,3 +1,10 @@\n+2016-02-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69907\n+\t* gcc.dg/vect/bb-slp-pr69907.c: New testcase.\n+\t* gcc.dg/vect/bb-slp-34.c: XFAIL.\n+\t* gcc.dg/vect/bb-slp-pr68892.c: Likewise.\n+\n 2016-02-24  Christian Bruel  <christian.bruel@st.com>\n \n \t* gcc.target/arm/pragma_cpp_fma.c: New test."}, {"sha": "418f2b536c9907da4f4801d824772c3a813c87f1", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-34.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d3fdb242c7374a6fe3e4b0981a70767bc585a2/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d3fdb242c7374a6fe3e4b0981a70767bc585a2/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-34.c?ref=47d3fdb242c7374a6fe3e4b0981a70767bc585a2", "patch": "@@ -32,4 +32,5 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump \"basic block vectorized\" \"slp2\" { target vect_perm } } } */\n+/* ??? XFAILed because we access \"excess\" elements with the permutation.  */\n+/* { dg-final { scan-tree-dump \"basic block vectorized\" \"slp2\" { target vect_perm xfail *-*-* } } } */"}, {"sha": "216883fc0c46fdcbf378dc55493cc21aa786f0a9", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-pr68892.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d3fdb242c7374a6fe3e4b0981a70767bc585a2/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr68892.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d3fdb242c7374a6fe3e4b0981a70767bc585a2/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr68892.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr68892.c?ref=47d3fdb242c7374a6fe3e4b0981a70767bc585a2", "patch": "@@ -13,5 +13,7 @@ void foo(void)\n   b[3] = a[3][0];\n }\n \n-/* { dg-final { scan-tree-dump \"not profitable\" \"slp2\" } } */\n+/* ???  The profitability check is not reached because we give up on the\n+   gaps we access earlier.  */\n+/* { dg-final { scan-tree-dump \"not profitable\" \"slp2\" { xfail *-*-* } } } */\n /* { dg-final { scan-tree-dump-times \"Basic block will be vectorized\" 0 \"slp2\" } } */"}, {"sha": "9f1e71a3db13ac61b30abd298b49cfc650e16732", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-pr69907.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d3fdb242c7374a6fe3e4b0981a70767bc585a2/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr69907.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d3fdb242c7374a6fe3e4b0981a70767bc585a2/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr69907.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr69907.c?ref=47d3fdb242c7374a6fe3e4b0981a70767bc585a2", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O3\" } */\n+/* { dg-require-effective-target vect_unpack } */\n+\n+void foo(unsigned *p1, unsigned short *p2)\n+{\n+  int n;\n+  for (n = 0; n < 320; n++)\n+    p1[n] = p2[n * 2];\n+}\n+\n+/* { dg-final { scan-tree-dump \"BB vectorization with gaps at the end of a load is not supported\" \"slp1\" } } */"}, {"sha": "9678d7c1615ec5869e5d2a64634fefc66664193c", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d3fdb242c7374a6fe3e4b0981a70767bc585a2/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d3fdb242c7374a6fe3e4b0981a70767bc585a2/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=47d3fdb242c7374a6fe3e4b0981a70767bc585a2", "patch": "@@ -6395,6 +6395,19 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \tslp_perm = true;\n \n       group_size = GROUP_SIZE (vinfo_for_stmt (first_stmt));\n+\n+      /* ???  The following is overly pessimistic (as well as the loop\n+         case above) in the case we can statically determine the excess\n+\t elements loaded are within the bounds of a decl that is accessed.\n+\t Likewise for BB vectorizations using masked loads is a possibility.  */\n+      if (bb_vinfo && slp_perm && group_size % nunits != 0)\n+\t{\n+\t  dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t   \"BB vectorization with gaps at the end of a load \"\n+\t\t\t   \"is not supported\\n\");\n+\t  return false;\n+\t}\n+\n       if (!slp\n \t  && !PURE_SLP_STMT (stmt_info)\n \t  && !STMT_VINFO_STRIDED_P (stmt_info))"}]}