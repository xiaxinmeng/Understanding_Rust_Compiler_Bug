{"sha": "df66b5660c1dc2f388b54d3d8d14951ead739edb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY2NmI1NjYwYzFkYzJmMzg4YjU0ZDNkOGQxNDk1MWVhZDczOWVkYg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "1998-11-13T14:09:53Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "1998-11-13T14:09:53Z"}, "message": "gjavah.c (main): Handle --output-class-directory argument.\n\n\t* gjavah.c (main): Handle --output-class-directory argument.\n\t* jvspec.c (lang_specific_driver): Translate `-d' into\n\t-foutput-class-dir.\n\t* jcf.h (jcf_write_base_directory): Declare.\n\t* lang.c (lang_decode_option): Recognize -foutput-class-dir.\n\t* lang-options.h: Mention -foutput-class-dir.\n\t* jcf-write.c (jcf_write_base_directory): New global.\n\t(make_class_file_name): Put generated .class file into `-d'\n\tdirectory, or into source directory if -d not given.  Function now\n\tstatic.\n\t(write_classfile): Free class file name.  Handle case where class\n\tfile name is NULL.\n\t(DIR_SEPARATOR): New macro.\n\tInclude <sys/stat.h>\n\nFrom-SVN: r23640", "tree": {"sha": "68a3d48319d95915e8d7750b2f010afd3c795f67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68a3d48319d95915e8d7750b2f010afd3c795f67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df66b5660c1dc2f388b54d3d8d14951ead739edb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df66b5660c1dc2f388b54d3d8d14951ead739edb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df66b5660c1dc2f388b54d3d8d14951ead739edb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df66b5660c1dc2f388b54d3d8d14951ead739edb/comments", "author": null, "committer": null, "parents": [{"sha": "bbeeb2b0201c839ffc6c66f0f472b88964387e63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbeeb2b0201c839ffc6c66f0f472b88964387e63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbeeb2b0201c839ffc6c66f0f472b88964387e63"}], "stats": {"total": 149, "additions": 132, "deletions": 17}, "files": [{"sha": "21c7db24fe692af76f934efd4c850d1a7a1ef649", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df66b5660c1dc2f388b54d3d8d14951ead739edb/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df66b5660c1dc2f388b54d3d8d14951ead739edb/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=df66b5660c1dc2f388b54d3d8d14951ead739edb", "patch": "@@ -1,5 +1,20 @@\n 1998-11-13  Tom Tromey  <tromey@cygnus.com>\n \n+\t* gjavah.c (main): Handle --output-class-directory argument.\n+\t* jvspec.c (lang_specific_driver): Translate `-d' into\n+\t-foutput-class-dir.\n+\t* jcf.h (jcf_write_base_directory): Declare.\n+\t* lang.c (lang_decode_option): Recognize -foutput-class-dir.\n+\t* lang-options.h: Mention -foutput-class-dir.\n+\t* jcf-write.c (jcf_write_base_directory): New global.\n+\t(make_class_file_name): Put generated .class file into `-d'\n+\tdirectory, or into source directory if -d not given.  Function now\n+\tstatic.\n+\t(write_classfile): Free class file name.  Handle case where class\n+\tfile name is NULL.\n+\t(DIR_SEPARATOR): New macro.\n+\tInclude <sys/stat.h>\n+\n \t* Makefile.in (prefix): New macro.\n \n Thu Nov 12 14:15:07 1998  Per Bothner  <bothner@cygnus.com>"}, {"sha": "5e76337ef95c22e765b5843cb6a106035a430338", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 89, "deletions": 13, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df66b5660c1dc2f388b54d3d8d14951ead739edb/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df66b5660c1dc2f388b54d3d8d14951ead739edb/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=df66b5660c1dc2f388b54d3d8d14951ead739edb", "patch": "@@ -34,8 +34,19 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"parse.h\" /* for BLOCK_EXPR_BODY */\n #include \"buffer.h\"\n \n+#include <sys/stat.h>\n+\n+#ifndef DIR_SEPARATOR\n+#define DIR_SEPARATOR '/'\n+#endif\n+\n extern struct obstack temporary_obstack;\n \n+/* Base directory in which `.class' files should be written.\n+   NULL means to put the file into the same directory as the\n+   corresponding .java file.  */\n+char *jcf_write_base_directory = NULL;\n+\n /* Make sure bytecode.data is big enough for at least N more bytes. */\n \n #define RESERVE(N) \\\n@@ -2498,13 +2509,73 @@ generate_classfile (clas, state)\n   return state->first;\n }\n \n-char*\n+static char *\n make_class_file_name (clas)\n      tree clas;\n {\n-  /* Should prepend an output directly, but need an option to specify it. */\n-  return IDENTIFIER_POINTER (identifier_subst (DECL_NAME (TYPE_NAME (clas)),\n-\t\t\t\t\t       \"\", '.', '/', \".class\"));\n+  char *cname, *dname, *slash, *r;\n+  struct stat sb;\n+\n+  cname = IDENTIFIER_POINTER (identifier_subst (DECL_NAME (TYPE_NAME (clas)),\n+\t\t\t\t\t\t\"\", '.', DIR_SEPARATOR,\n+\t\t\t\t\t\t\".class\"));\n+  if (jcf_write_base_directory == NULL)\n+    {\n+      /* Make sure we put the class file into the .java file's\n+\t directory, and not into some subdirectory thereof.  */\n+      char *t;\n+      dname = DECL_SOURCE_FILE (TYPE_NAME (clas));\n+      slash = strrchr (dname, DIR_SEPARATOR);\n+      if (! slash)\n+\t{\n+\t  dname = \".\";\n+\t  slash = dname + 1;\n+\t}\n+      t = strrchr (cname, DIR_SEPARATOR);\n+      if (t)\n+\tcname = t + 1;\n+    }\n+  else\n+    {\n+      dname = jcf_write_base_directory;\n+      slash = dname + strlen (dname);\n+    }\n+\n+  r = xmalloc (slash - dname + strlen (cname) + 2);\n+  strncpy (r, dname, slash - dname);\n+  r[slash - dname] = DIR_SEPARATOR;\n+  strcpy (&r[slash - dname + 1], cname);\n+\n+  /* We try to make new directories when we need them.  We only do\n+     this for directories which \"might not\" exist.  For instance, we\n+     assume the `-d' directory exists, but we don't assume that any\n+     subdirectory below it exists.  It might be worthwhile to keep\n+     track of which directories we've created to avoid gratuitous\n+     stat()s.  */\n+  dname = r + (slash - dname) + 1;\n+  while (1)\n+    {\n+      cname = strchr (dname, DIR_SEPARATOR);\n+      if (cname == NULL)\n+\tbreak;\n+      *cname = '\\0';\n+      if (stat (r, &sb) == -1)\n+\t{\n+\t  /* Try to make it.  */\n+\t  if (mkdir (r, 0755) == -1)\n+\t    {\n+\t      fatal (\"failed to create directory `%s'\", r);\n+\t      free (r);\n+\t      return NULL;\n+\t    }\n+\t}\n+      *cname = DIR_SEPARATOR;\n+      /* Skip consecutive separators.  */\n+      for (dname = cname + 1; *dname && *dname == DIR_SEPARATOR; ++dname)\n+\t;\n+    }\n+\n+  return r;\n }\n \n /* Write out the contens of a class (RECORD_TYPE) CLAS, as a .class file.\n@@ -2518,15 +2589,20 @@ write_classfile (clas)\n   struct jcf_partial state[1];\n   char *class_file_name = make_class_file_name (clas);\n   struct chunk *chunks;\n-  FILE* stream = fopen (class_file_name, \"wb\");\n-  if (stream == NULL)\n-    fatal (\"failed to open `%s' for writing\", class_file_name);\n-  jcf_dependency_add_target (class_file_name);\n-  init_jcf_state (state, work);\n-  chunks = generate_classfile (clas, state);\n-  write_chunks (stream, chunks);\n-  if (fclose (stream))\n-    fatal (\"failed to close after writing `%s'\", class_file_name);\n+\n+  if (class_file_name != NULL)\n+    {\n+      FILE* stream = fopen (class_file_name, \"wb\");\n+      if (stream == NULL)\n+\tfatal (\"failed to open `%s' for writing\", class_file_name);\n+      jcf_dependency_add_target (class_file_name);\n+      init_jcf_state (state, work);\n+      chunks = generate_classfile (clas, state);\n+      write_chunks (stream, chunks);\n+      if (fclose (stream))\n+\tfatal (\"failed to close after writing `%s'\", class_file_name);\n+      free (class_file_name);\n+    }\n   release_jcf_state (state);\n }\n "}, {"sha": "8f748b3617f7a2b40e44766e0ddcc09d85a4d3d4", "filename": "gcc/java/jcf.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df66b5660c1dc2f388b54d3d8d14951ead739edb/gcc%2Fjava%2Fjcf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df66b5660c1dc2f388b54d3d8d14951ead739edb/gcc%2Fjava%2Fjcf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf.h?ref=df66b5660c1dc2f388b54d3d8d14951ead739edb", "patch": "@@ -245,6 +245,8 @@ extern int jcf_unexpected_eof PROTO ((JCF*, int));\n    ? (((PTR)[-3]&0x1F) << 12) + (((PTR)[-2]&0x3F) << 6) + ((PTR)[-1]&0x3F) \\\n    : ((PTR)++, -1))\n \n+extern char *jcf_write_base_directory;\n+\n /* Debug macros, for the front end */\n \n extern int quiet_flag;"}, {"sha": "325254d2c68d640e5de33eb6e293393083229788", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df66b5660c1dc2f388b54d3d8d14951ead739edb/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df66b5660c1dc2f388b54d3d8d14951ead739edb/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=df66b5660c1dc2f388b54d3d8d14951ead739edb", "patch": "@@ -302,6 +302,12 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n \t      /* Remember this so we can confirm -fmain option.  */\n \t      will_link = 0;\n \t    }\n+\t  else if (strcmp (argv[i], \"-d\") == 0)\n+\t    {\n+\t      /* `-d' option is for javac compatibility.  */\n+\t      quote = argv[i];\n+\t      added -= 1;\n+\t    }\n \t  else\n \t    /* Pass other options through.  */\n \t    continue;\n@@ -404,6 +410,16 @@ lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n \t  continue;\n \t}\n \n+      if (strcmp (argv[i], \"-d\") == 0)\n+\t{\n+\t  char *patharg = (char *) xmalloc (sizeof (\"-foutput-class-dir=\")\n+\t\t\t\t\t    + strlen (argv[i + 1]) + 1);\n+\t  sprintf (patharg, \"-foutput-class-dir=%s\", argv[i + 1]);\n+\t  arglist[j] = patharg;\n+\t  ++i;\n+\t  continue;\n+\t}\n+\n       if (strncmp (argv[i], \"-fmain=\", 7) == 0)\n \t{\n \t  if (! will_link)"}, {"sha": "56d023cdd93bad79799199c08cd54aafc7de2f6a", "filename": "gcc/java/lang-options.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df66b5660c1dc2f388b54d3d8d14951ead739edb/gcc%2Fjava%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df66b5660c1dc2f388b54d3d8d14951ead739edb/gcc%2Fjava%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang-options.h?ref=df66b5660c1dc2f388b54d3d8d14951ead739edb", "patch": "@@ -25,11 +25,8 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n /* This is the contribution to the `lang_options' array in gcc.c for\n    java.  */\n \n-/* CYGNUS LOCAL - the format of this file has been changed to\n-   allow cc1 to implement --help.  nickc/--help */\n-\n DEFINE_LANG_NAME (\"Java\")\n-     \n+\n   { \"-fbounds-check\", \"\" },\n   { \"-fno-bounds-check\", \"Disable automatic array bounds checking\" },\n   { \"-fassume-compiled\", \"Make is_compiled_class return 1\"},\n@@ -43,3 +40,4 @@ DEFINE_LANG_NAME (\"Java\")\n   { \"-fclasspath\", \"Set class path and suppress system path\" },\n   { \"-fCLASSPATH\", \"Set class path\" },\n   { \"-I\", \"Add directory to class path\" },\n+  { \"-foutput-class-dir\", \"Directory where class files should be written\" },"}, {"sha": "3bc001d5e3bb5cf15c8a37e35205216d85ad249a", "filename": "gcc/java/lang.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df66b5660c1dc2f388b54d3d8d14951ead739edb/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df66b5660c1dc2f388b54d3d8d14951ead739edb/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=df66b5660c1dc2f388b54d3d8d14951ead739edb", "patch": "@@ -147,6 +147,14 @@ lang_decode_option (argc, argv)\n       return 1;\n     }\n \n+#define ARG \"-foutput-class-dir=\"\n+  if (strncmp (p, ARG, sizeof (ARG) - 1) == 0)\n+    {\n+      jcf_write_base_directory = p + sizeof (ARG) - 1;\n+      return 1;\n+    }\n+#undef ARG\n+\n   if (p[0] == '-' && p[1] == 'f')\n     {\n       /* Some kind of -f option."}]}