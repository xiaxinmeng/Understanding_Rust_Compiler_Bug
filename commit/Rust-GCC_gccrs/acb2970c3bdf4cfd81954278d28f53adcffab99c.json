{"sha": "acb2970c3bdf4cfd81954278d28f53adcffab99c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNiMjk3MGMzYmRmNGNmZDgxOTU0Mjc4ZDI4ZjUzYWRjZmZhYjk5Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-06-11T15:45:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-06-11T15:45:01Z"}, "message": "re PR c++/66450 ([C++11][constexpr] Issues when delegating implicit copy constructor in constexpr function)\n\n\tPR c++/66450\n\t* constexpr.c (cxx_eval_store_expression): Avoid messing up outer\n\tctx->ctor.\n\nFrom-SVN: r224381", "tree": {"sha": "71a96b0f5f11e1781ea2e76086cf3e229938292d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71a96b0f5f11e1781ea2e76086cf3e229938292d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acb2970c3bdf4cfd81954278d28f53adcffab99c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb2970c3bdf4cfd81954278d28f53adcffab99c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acb2970c3bdf4cfd81954278d28f53adcffab99c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb2970c3bdf4cfd81954278d28f53adcffab99c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "881a5e608a945bebcfbefcf8c521a2e481610789", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/881a5e608a945bebcfbefcf8c521a2e481610789", "html_url": "https://github.com/Rust-GCC/gccrs/commit/881a5e608a945bebcfbefcf8c521a2e481610789"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "b6fdc107f6ee8bab04d8a4e5ea851b36f6a5dbda", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb2970c3bdf4cfd81954278d28f53adcffab99c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb2970c3bdf4cfd81954278d28f53adcffab99c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=acb2970c3bdf4cfd81954278d28f53adcffab99c", "patch": "@@ -1,3 +1,9 @@\n+2015-06-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/66450\n+\t* constexpr.c (cxx_eval_store_expression): Avoid messing up outer\n+\tctx->ctor.\n+\n 2015-06-10  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/66289"}, {"sha": "af6b39ecaf50c6b0721dc46764ede054e257f0d6", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb2970c3bdf4cfd81954278d28f53adcffab99c/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb2970c3bdf4cfd81954278d28f53adcffab99c/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=acb2970c3bdf4cfd81954278d28f53adcffab99c", "patch": "@@ -2671,20 +2671,30 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n     }\n   release_tree_vector (refs);\n \n-  if ((AGGREGATE_TYPE_P (TREE_TYPE (t)) || VECTOR_TYPE_P (TREE_TYPE (t))))\n+  if (AGGREGATE_TYPE_P (type) || VECTOR_TYPE_P (type))\n     {\n       /* Create a new CONSTRUCTOR in case evaluation of the initializer\n \t wants to modify it.  */\n-      *valp = new_ctx.ctor = build_constructor (TREE_TYPE (t), NULL);\n+      new_ctx.ctor = build_constructor (type, NULL);\n+      if (*valp == NULL_TREE)\n+\t*valp = new_ctx.ctor;\n       CONSTRUCTOR_NO_IMPLICIT_ZERO (new_ctx.ctor) = true;\n       new_ctx.object = target;\n     }\n \n   init = cxx_eval_constant_expression (&new_ctx, init, false,\n \t\t\t\t       non_constant_p, overflow_p);\n   if (target == object)\n-    /* The hash table might have moved since the get earlier.  */\n-    ctx->values->put (object, init);\n+    {\n+      /* The hash table might have moved since the get earlier.  */\n+      valp = ctx->values->get (object);\n+      if (TREE_CODE (init) == CONSTRUCTOR)\n+\t/* An outer ctx->ctor might be pointing to *valp, so just replace\n+\t   its contents.  */\n+\tCONSTRUCTOR_ELTS (*valp) = CONSTRUCTOR_ELTS (init);\n+      else\n+\t*valp = init;\n+    }\n   else\n     *valp = init;\n "}, {"sha": "d25c9c7c6258fba6090b54ac6693bf27b183b83c", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-fwctor1.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb2970c3bdf4cfd81954278d28f53adcffab99c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-fwctor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb2970c3bdf4cfd81954278d28f53adcffab99c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-fwctor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-fwctor1.C?ref=acb2970c3bdf4cfd81954278d28f53adcffab99c", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/66450\n+// { dg-do compile { target c++11 } }\n+\n+struct foo {\n+  constexpr foo(int a);\n+  constexpr foo(int a, int b, int c): a{a}, b{b}, c{c} {}\n+\n+  int a, b, c;\n+};\n+\n+constexpr foo make_foo(int a) { return foo{a, a+1, a+2}; }\n+constexpr foo::foo(int a): foo{make_foo(a)} {}\n+\n+int main() {\n+  constexpr const foo f{3};\n+  static_assert(f.a == 3, \"\");\n+  static_assert(f.b == 4, \"\");\n+  static_assert(f.c == 5, \"\");\n+}"}]}