{"sha": "5b2a132a13035edc6217e2c3e8f828b4d4672d8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIyYTEzMmExMzAzNWVkYzYyMTdlMmMzZThmODI4YjRkNDY3MmQ4Yw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2008-07-31T07:51:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-07-31T07:51:32Z"}, "message": "g-pehage.adb, [...]: Minor reformatting\n\n2008-07-31  Robert Dewar  <dewar@adacore.com>\n\n\t* g-pehage.adb, g-pehage.ads: Minor reformatting\n\nFrom-SVN: r138356", "tree": {"sha": "e4b5a19d1f0271f584b3fc705951c9fa29146ed9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4b5a19d1f0271f584b3fc705951c9fa29146ed9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b2a132a13035edc6217e2c3e8f828b4d4672d8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b2a132a13035edc6217e2c3e8f828b4d4672d8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b2a132a13035edc6217e2c3e8f828b4d4672d8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b2a132a13035edc6217e2c3e8f828b4d4672d8c/comments", "author": null, "committer": null, "parents": [{"sha": "844ae01db8ad6b8e57daa9575efbe1ff167f816e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/844ae01db8ad6b8e57daa9575efbe1ff167f816e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/844ae01db8ad6b8e57daa9575efbe1ff167f816e"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "770709470019cbcaccc821a70029fecf765ebaba", "filename": "gcc/ada/g-pehage.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2a132a13035edc6217e2c3e8f828b4d4672d8c/gcc%2Fada%2Fg-pehage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2a132a13035edc6217e2c3e8f828b4d4672d8c/gcc%2Fada%2Fg-pehage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-pehage.adb?ref=5b2a132a13035edc6217e2c3e8f828b4d4672d8c", "patch": "@@ -49,8 +49,8 @@ package body GNAT.Perfect_Hash_Generators is\n \n    --             h (w) = (g (f1 (w)) + g (f2 (w))) mod m\n \n-   --  where f1 and f2 are functions that map strings into integers, and g is a\n-   --  function that maps integers into [0, m-1]. h can be order preserving.\n+   --  where f1 and f2 are functions that map strings into integers, and g is\n+   --  a function that maps integers into [0, m-1]. h can be order preserving.\n    --  For instance, let W = {w_0, ..., w_i, ..., w_m-1}, h can be defined\n    --  such that h (w_i) = i.\n \n@@ -132,10 +132,10 @@ package body GNAT.Perfect_Hash_Generators is\n    package WT is new GNAT.Table (Word_Type, Word_Id, 0, 32, 32);\n    package IT is new GNAT.Table (Integer, Integer, 0, 32, 32);\n    --  The two main tables. WT is used to store the words in their initial\n-   --  version and in their reduced version (that is words reduced to\n-   --  their significant characters). As an instance of GNAT.Table, WT does\n-   --  not initialize string pointers to null. This initialization has to be\n-   --  done manually when the table is allocated. IT is used to store several\n+   --  version and in their reduced version (that is words reduced to their\n+   --  significant characters). As an instance of GNAT.Table, WT does not\n+   --  initialize string pointers to null. This initialization has to be done\n+   --  manually when the table is allocated. IT is used to store several\n    --  tables of components containing only integers.\n \n    function Image (Int : Integer; W : Natural := 0) return String;"}, {"sha": "8b75f2e8803e9e811c6c2a91707d10f2e2e28266", "filename": "gcc/ada/g-pehage.ads", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2a132a13035edc6217e2c3e8f828b4d4672d8c/gcc%2Fada%2Fg-pehage.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2a132a13035edc6217e2c3e8f828b4d4672d8c/gcc%2Fada%2Fg-pehage.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-pehage.ads?ref=5b2a132a13035edc6217e2c3e8f828b4d4672d8c", "patch": "@@ -99,18 +99,18 @@ package GNAT.Perfect_Hash_Generators is\n       K_To_V : Float        := Default_K_To_V;\n       Optim  : Optimization := CPU_Time;\n       Tries  : Positive     := Default_Tries);\n-   --  Initialize the generator and its internal structures. Set the\n-   --  ratio of vertices over keys in the random graphs. This value\n-   --  has to be greater than 2.0 in order for the algorithm to\n-   --  succeed. The word set is not modified (in particular when it is\n-   --  already set). For instance, it is possible to run several times\n-   --  the generator with different settings on the same words.\n-\n-   --  A classical way of doing is to Insert all the words and then to\n-   --  invoke Initialize and Compute. If Compute fails to find a\n-   --  perfect hash function, invoke Initialize another time with\n-   --  other configuration parameters (probably with a greater K_To_V\n-   --  ratio). Once successful, invoke Produce and Finalize.\n+   --  Initialize the generator and its internal structures. Set the ratio of\n+   --  vertices over keys in the random graphs. This value has to be greater\n+   --  than 2.0 in order for the algorithm to succeed. The word set is not\n+   --  modified (in particular when it is already set). For instance, it is\n+   --  possible to run several times the generator with different settings on\n+   --  the same words.\n+   --\n+   --  A classical way of doing is to Insert all the words and then to invoke\n+   --  Initialize and Compute. If Compute fails to find a perfect hash\n+   --  function, invoke Initialize another time with other configuration\n+   --  parameters (probably with a greater K_To_V ratio). Once successful,\n+   --  invoke Produce and Finalize.\n \n    procedure Finalize;\n    --  Deallocate the internal structures and the words table\n@@ -219,8 +219,8 @@ package GNAT.Perfect_Hash_Generators is\n       Length_2  : out Natural);\n    --  Return the definition of the table Name. This includes the length of\n    --  dimensions 1 and 2 and the size of an unsigned integer item. When\n-   --  Length_2 is zero, the table has only one dimension. All the ranges start\n-   --  from zero.\n+   --  Length_2 is zero, the table has only one dimension. All the ranges\n+   --  start from zero.\n \n    function Value\n      (Name : Table_Name;"}]}