{"sha": "6e74642b2c37305436269a8c036f1519b4c8c111", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU3NDY0MmIyYzM3MzA1NDM2MjY5YThjMDM2ZjE1MTliNGM4YzExMQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-10-14T19:29:18Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-10-14T19:29:18Z"}, "message": "re PR rtl-optimization/54919 (gcc.dg/torture/pr54877.c FAILs with -fvariable-expansion-in-unroller)\n\ngcc/\n\tPR rtl-optimization/54919\n\t* loop-unroll.c (struct var_to_expand): Remove accum_pos field.\n\t(analyze_insn_to_expand_var): Do not record accum_pos.\n\t(expand_var_during_unrolling): Use validate_replace_rtx_group to\n\tperform replacement of all references to SET_DEST (set) with the\n\tnew register, including references in REG_EQUAL notes.\n\t(insert_var_expansion_initialization): Insert initializatio insns\n\tat the bottom of the pre-header of the loop.\n\ntestsuite/\n\tPR rtl-optimization/54919\n\t* gcc.dg/pr54919.c: New testcase.\n\nFrom-SVN: r192439", "tree": {"sha": "15fe92fb736ec7716ce5d0604100a38f2b553ee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15fe92fb736ec7716ce5d0604100a38f2b553ee9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e74642b2c37305436269a8c036f1519b4c8c111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e74642b2c37305436269a8c036f1519b4c8c111", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e74642b2c37305436269a8c036f1519b4c8c111", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e74642b2c37305436269a8c036f1519b4c8c111/comments", "author": null, "committer": null, "parents": [{"sha": "b5afa20284b164fdfaf04801361748076a50a928", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5afa20284b164fdfaf04801361748076a50a928", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5afa20284b164fdfaf04801361748076a50a928"}], "stats": {"total": 62, "additions": 47, "deletions": 15}, "files": [{"sha": "d043064bdc6ba3aaeaa1bec4643a349495002891", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e74642b2c37305436269a8c036f1519b4c8c111/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e74642b2c37305436269a8c036f1519b4c8c111/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e74642b2c37305436269a8c036f1519b4c8c111", "patch": "@@ -1,3 +1,14 @@\n+2012-10-14  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\tPR rtl-optimization/54919\n+\t* loop-unroll.c (struct var_to_expand): Remove accum_pos field.\n+\t(analyze_insn_to_expand_var): Do not record accum_pos.\n+\t(expand_var_during_unrolling): Use validate_replace_rtx_group to\n+\tperform replacement of all references to SET_DEST (set) with the\n+\tnew register, including references in REG_EQUAL notes.\n+\t(insert_var_expansion_initialization): Insert initializatio insns\n+\tat the bottom of the pre-header of the loop.\n+\n 2012-10-14  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-ssa-loop-niter.c (estimate_numbers_of_iterations_loop): Do not\n@@ -19034,7 +19045,7 @@\n \n 2012-04-26  Bernd Schmidt  <bernds@codesourcery.com>\n \n-\t* PR middle-end/52997\n+\tPR middle-end/52997\n \t* ira.c (find_moveable_pseudos): Call resize_reg_info.\n \n \tPR middle-end/52940"}, {"sha": "0dd8b0a9d5c8beb67ecd3e098ee698a2c79eca16", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e74642b2c37305436269a8c036f1519b4c8c111/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e74642b2c37305436269a8c036f1519b4c8c111/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=6e74642b2c37305436269a8c036f1519b4c8c111", "patch": "@@ -100,10 +100,6 @@ struct var_to_expand\n                                       the accumulator.  If REUSE_EXPANSION is 0 reuse\n                                       the original accumulator.  Else use\n                                       var_expansions[REUSE_EXPANSION - 1].  */\n-  unsigned accum_pos;              /* The position in which the accumulator is placed in\n-                                      the insn src.  For example in x = x + something\n-                                      accum_pos is 0 while in x = something + x accum_pos\n-                                      is 1.  */\n };\n \n /* Information about optimization applied in\n@@ -1763,7 +1759,6 @@ analyze_insn_to_expand_var (struct loop *loop, rtx insn)\n   ves->op = GET_CODE (src);\n   ves->expansion_count = 0;\n   ves->reuse_expansion = 0;\n-  ves->accum_pos = accum_pos;\n   return ves;\n }\n \n@@ -2123,9 +2118,7 @@ expand_var_during_unrolling (struct var_to_expand *ve, rtx insn)\n   else\n     new_reg = get_expansion (ve);\n \n-  validate_change (insn, &SET_DEST (set), new_reg, 1);\n-  validate_change (insn, &XEXP (SET_SRC (set), ve->accum_pos), new_reg, 1);\n-\n+  validate_replace_rtx_group (SET_DEST (set), new_reg, insn);\n   if (apply_change_group ())\n     if (really_new_expansion)\n       {\n@@ -2165,7 +2158,7 @@ static void\n insert_var_expansion_initialization (struct var_to_expand *ve,\n \t\t\t\t     basic_block place)\n {\n-  rtx seq, var, zero_init, insn;\n+  rtx seq, var, zero_init;\n   unsigned i;\n   enum machine_mode mode = GET_MODE (ve->reg);\n   bool honor_signed_zero_p = HONOR_SIGNED_ZEROS (mode);\n@@ -2205,11 +2198,7 @@ insert_var_expansion_initialization (struct var_to_expand *ve,\n   seq = get_insns ();\n   end_sequence ();\n \n-  insn = BB_HEAD (place);\n-  while (!NOTE_INSN_BASIC_BLOCK_P (insn))\n-    insn = NEXT_INSN (insn);\n-\n-  emit_insn_after (seq, insn);\n+  emit_insn_after (seq, BB_END (place));\n }\n \n /* Combine the variable expansions at the loop exit.  PLACE is the"}, {"sha": "6a61bb96957551a44837d0c3a5ed2b3126f0ef84", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e74642b2c37305436269a8c036f1519b4c8c111/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e74642b2c37305436269a8c036f1519b4c8c111/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e74642b2c37305436269a8c036f1519b4c8c111", "patch": "@@ -1,3 +1,8 @@\n+2012-10-14  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\tPR rtl-optimization/54919\n+\t* gcc.dg/pr54919.c: New testcase.\n+\n 2012-10-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/53581"}, {"sha": "9f1affce234f2d601e5b3c23607e44cf01e53f19", "filename": "gcc/testsuite/gcc.dg/pr54919.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e74642b2c37305436269a8c036f1519b4c8c111/gcc%2Ftestsuite%2Fgcc.dg%2Fpr54919.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e74642b2c37305436269a8c036f1519b4c8c111/gcc%2Ftestsuite%2Fgcc.dg%2Fpr54919.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr54919.c?ref=6e74642b2c37305436269a8c036f1519b4c8c111", "patch": "@@ -0,0 +1,27 @@\n+/* PR tree-optimization/54919 */\n+/* Testcase by Zdenek Sojka <zsojka@seznam.cz> */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -ffast-math -funroll-loops -fvariable-expansion-in-unroller\" } */\n+\n+int a[10];\n+extern void abort(void) __attribute__((noreturn));\n+\n+int __attribute__((__noinline__, __noclone__))\n+foo (void)\n+{\n+  double d;\n+  int i;\n+  for (i = 0, d = 0; i < 64; i++)\n+    d--;\n+  return (int) d;\n+}\n+\n+int\n+main (void)\n+{\n+  if (foo () != -64)\n+    abort ();\n+  return 0;\n+}\n+"}]}