{"sha": "4c57980f9d30e6947025424536eeed42bf6e1239", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM1Nzk4MGY5ZDMwZTY5NDcwMjU0MjQ1MzZlZWVkNDJiZjZlMTIzOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-12-17T09:29:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-12-17T09:29:12Z"}, "message": "re PR tree-optimization/64322 (More optimize opportunity for constant folding)\n\n\tPR tree-optimization/64322\n\t* tree-vrp.c (extract_range_from_binary_expr_1): Attempt to derive\n\trange for RSHIFT_EXPR even if vr0 range is not VR_RANGE or is symbolic.\n\n\t* gcc.dg/tree-ssa/vrp95.c: New test.\n\nFrom-SVN: r218812", "tree": {"sha": "1a8656d47d66e823737ac3e415884b56dda90702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a8656d47d66e823737ac3e415884b56dda90702"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c57980f9d30e6947025424536eeed42bf6e1239", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c57980f9d30e6947025424536eeed42bf6e1239", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c57980f9d30e6947025424536eeed42bf6e1239", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c57980f9d30e6947025424536eeed42bf6e1239/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f94a8c4cc27e04b3c8ef2f8b650263aab6ff4db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f94a8c4cc27e04b3c8ef2f8b650263aab6ff4db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f94a8c4cc27e04b3c8ef2f8b650263aab6ff4db"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "631d7268013bb8b54616801e225b18fcdf4f6918", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c57980f9d30e6947025424536eeed42bf6e1239/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c57980f9d30e6947025424536eeed42bf6e1239/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c57980f9d30e6947025424536eeed42bf6e1239", "patch": "@@ -1,3 +1,9 @@\n+2014-12-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/64322\n+\t* tree-vrp.c (extract_range_from_binary_expr_1): Attempt to derive\n+\trange for RSHIFT_EXPR even if vr0 range is not VR_RANGE or is symbolic.\n+\n 2014-12-17  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/54687"}, {"sha": "fbafb565dacc40cc7d6cd3dd1ead330835f14c80", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c57980f9d30e6947025424536eeed42bf6e1239/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c57980f9d30e6947025424536eeed42bf6e1239/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4c57980f9d30e6947025424536eeed42bf6e1239", "patch": "@@ -1,5 +1,8 @@\n 2014-12-17  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/64322\n+\t* gcc.dg/tree-ssa/vrp95.c: New test.\n+\n \tPR sanitizer/64289\n \t* c-c++-common/ubsan/pr64289.c: New test.\n "}, {"sha": "be208bafd60d62f7520010b3b750d59fe4cd3938", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp95.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c57980f9d30e6947025424536eeed42bf6e1239/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp95.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c57980f9d30e6947025424536eeed42bf6e1239/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp95.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp95.c?ref=4c57980f9d30e6947025424536eeed42bf6e1239", "patch": "@@ -0,0 +1,50 @@\n+/* PR tree-optimization/64322 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+\n+extern void link_error ();\n+extern void required_check ();\n+\n+long long int\n+foo (long long int x)\n+{\n+  x >>= sizeof (long long int) * __CHAR_BIT__ - 1;\n+  if (x != 0 && x != -1)\n+    link_error ();\n+  return x;\n+}\n+\n+unsigned long long int\n+bar (unsigned long long int x)\n+{\n+  x >>= sizeof (long long int) * __CHAR_BIT__ - 1;\n+  if (x != 0 && x != 1)\n+    link_error ();\n+  return x;\n+}\n+\n+long long int\n+baz (long long int x)\n+{\n+  x = (x >> sizeof (long long int) * __CHAR_BIT__ - 1) << 1;\n+  x = x / 0x100000000LL;\n+  if (x != 0)\n+    link_error ();\n+  return x;\n+}\n+\n+unsigned long long int\n+range (unsigned long long int x, int y)\n+{\n+  y &= 3;\n+  x >>= sizeof (long long int) * __CHAR_BIT__ - 1 - y;\n+  if (x > 15)\n+    link_error ();\n+  if (x == 15)\n+    required_check ();\n+  return x;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"link_error\" \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump \"required_check\" \"vrp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp1\" } } */"}, {"sha": "c49c9424885ca646a3bcfb6e57b38c0f75efee73", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c57980f9d30e6947025424536eeed42bf6e1239/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c57980f9d30e6947025424536eeed42bf6e1239/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=4c57980f9d30e6947025424536eeed42bf6e1239", "patch": "@@ -2434,6 +2434,7 @@ extract_range_from_binary_expr_1 (value_range_t *vr,\n       && code != MAX_EXPR\n       && code != PLUS_EXPR\n       && code != MINUS_EXPR\n+      && code != RSHIFT_EXPR\n       && (vr0.type == VR_VARYING\n \t  || vr1.type == VR_VARYING\n \t  || vr0.type != vr1.type\n@@ -2948,6 +2949,15 @@ extract_range_from_binary_expr_1 (value_range_t *vr,\n \t{\n \t  if (code == RSHIFT_EXPR)\n \t    {\n+\t      /* Even if vr0 is VARYING or otherwise not usable, we can derive\n+\t\t useful ranges just from the shift count.  E.g.\n+\t\t x >> 63 for signed 64-bit x is always [-1, 0].  */\n+\t      if (vr0.type != VR_RANGE || symbolic_range_p (&vr0))\n+\t\t{\n+\t\t  vr0.type = type = VR_RANGE;\n+\t\t  vr0.min = vrp_val_min (expr_type);\n+\t\t  vr0.max = vrp_val_max (expr_type);\n+\t\t}\n \t      extract_range_from_multiplicative_op_1 (vr, code, &vr0, &vr1);\n \t      return;\n \t    }"}]}