{"sha": "9c0ae98b3affdb3754daa5cd55ad91548ac36bc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMwYWU5OGIzYWZmZGIzNzU0ZGFhNWNkNTVhZDkxNTQ4YWMzNmJjNw==", "commit": {"author": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-07-08T15:41:19Z"}, "committer": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-07-08T15:41:19Z"}, "message": "entered into RCS\n\nFrom-SVN: r1522", "tree": {"sha": "ae99202b50660e2d6ab06106c4b72fe5b55785ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae99202b50660e2d6ab06106c4b72fe5b55785ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c0ae98b3affdb3754daa5cd55ad91548ac36bc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0ae98b3affdb3754daa5cd55ad91548ac36bc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c0ae98b3affdb3754daa5cd55ad91548ac36bc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0ae98b3affdb3754daa5cd55ad91548ac36bc7/comments", "author": null, "committer": null, "parents": [{"sha": "d9bacbade7ac4f276b8f8a47f658b2e317f42f22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9bacbade7ac4f276b8f8a47f658b2e317f42f22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9bacbade7ac4f276b8f8a47f658b2e317f42f22"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "53d94509f3d958384823100d4cd5030cc5f9990f", "filename": "gcc/fold-const.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0ae98b3affdb3754daa5cd55ad91548ac36bc7/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0ae98b3affdb3754daa5cd55ad91548ac36bc7/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=9c0ae98b3affdb3754daa5cd55ad91548ac36bc7", "patch": "@@ -2012,8 +2012,8 @@ distribute_bit_expr (code, type, arg0, arg1)\n \n   if (TREE_CODE (arg0) != TREE_CODE (arg1)\n       || TREE_CODE (arg0) == code\n-      || (TREE_CODE (arg0) != BIT_AND_EXPR\n-\t  && TREE_CODE (arg0) != BIT_IOR_EXPR))\n+      || (TREE_CODE (arg0) != TRUTH_AND_EXPR\n+\t  && TREE_CODE (arg0) != TRUTH_OR_EXPR))\n     return 0;\n \n   if (operand_equal_p (TREE_OPERAND (arg0, 0), TREE_OPERAND (arg1, 0), 0))\n@@ -2364,8 +2364,8 @@ simple_operand_p (exp)\n \n    For example, \"i >= 2 && i =< 9\" can be done as \"(unsigned) (i - 2) <= 7\".\n \n-   JCODE is the logical combination of the two terms.  It is BIT_AND_EXPR\n-   (representing TRUTH_ANDIF_EXPR and TRUTH_AND_EXPR) or BIT_IOR_EXPR\n+   JCODE is the logical combination of the two terms.  It is TRUTH_AND_EXPR\n+   (representing TRUTH_ANDIF_EXPR and TRUTH_AND_EXPR) or TRUTH_OR_EXPR\n    (representing TRUTH_ORIF_EXPR and TRUTH_OR_EXPR).  TYPE is the type of\n    the result.\n \n@@ -2385,7 +2385,7 @@ range_test (jcode, type, lo_code, hi_code, var, lo_cst, hi_cst)\n \n   /* See if this is a range test and normalize the constant terms.  */\n \n-  if (jcode == BIT_AND_EXPR)\n+  if (jcode == TRUTH_AND_EXPR)\n     {\n       switch (lo_code)\n \t{\n@@ -2553,7 +2553,7 @@ fold_truthop (code, truth_type, lhs, rhs)\n     return 0;\n \n   code = ((code == TRUTH_AND_EXPR || code == TRUTH_ANDIF_EXPR)\n-\t  ? BIT_AND_EXPR : BIT_IOR_EXPR);\n+\t  ? TRUTH_AND_EXPR : TRUTH_OR_EXPR);\n \n   ll_arg = TREE_OPERAND (lhs, 0);\n   lr_arg = TREE_OPERAND (lhs, 1);\n@@ -2648,7 +2648,7 @@ fold_truthop (code, truth_type, lhs, rhs)\n      fail.  However, we can convert a one-bit comparison against zero into\n      the opposite comparison against that bit being set in the field.  */\n \n-  wanted_code = (code == BIT_AND_EXPR ? EQ_EXPR : NE_EXPR);\n+  wanted_code = (code == TRUTH_AND_EXPR ? EQ_EXPR : NE_EXPR);\n   if (lcode != wanted_code)\n     {\n       if (l_const && integer_zerop (l_const) && integer_pow2p (ll_mask))"}]}