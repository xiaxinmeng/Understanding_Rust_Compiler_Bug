{"sha": "7ec2271788240351685d49f7e8e5875036fd8be6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VjMjI3MTc4ODI0MDM1MTY4NWQ0OWY3ZThlNTg3NTAzNmZkOGJlNg==", "commit": {"author": {"name": "Nathan Myers", "email": "ncm@cantrip.org", "date": "2003-02-04T23:42:21Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-02-04T23:42:21Z"}, "message": "min_max.cc (test02): Add.\n\n\n2003-02-04  Nathan Myers  <ncm@cantrip.org>\n\n\t* testsuite/25_algorithms/min_max.cc (test02): Add.\n\nFrom-SVN: r62412", "tree": {"sha": "4ddb8dc6ca72d23f6b6164e9cb9dfcebe063de83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ddb8dc6ca72d23f6b6164e9cb9dfcebe063de83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ec2271788240351685d49f7e8e5875036fd8be6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ec2271788240351685d49f7e8e5875036fd8be6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ec2271788240351685d49f7e8e5875036fd8be6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ec2271788240351685d49f7e8e5875036fd8be6/comments", "author": {"login": "ncm", "id": 215047, "node_id": "MDQ6VXNlcjIxNTA0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/215047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ncm", "html_url": "https://github.com/ncm", "followers_url": "https://api.github.com/users/ncm/followers", "following_url": "https://api.github.com/users/ncm/following{/other_user}", "gists_url": "https://api.github.com/users/ncm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ncm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ncm/subscriptions", "organizations_url": "https://api.github.com/users/ncm/orgs", "repos_url": "https://api.github.com/users/ncm/repos", "events_url": "https://api.github.com/users/ncm/events{/privacy}", "received_events_url": "https://api.github.com/users/ncm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9537511bfa8ba1b5e2b6309ded0583ea247b9d49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9537511bfa8ba1b5e2b6309ded0583ea247b9d49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9537511bfa8ba1b5e2b6309ded0583ea247b9d49"}], "stats": {"total": 120, "additions": 115, "deletions": 5}, "files": [{"sha": "cde23869910e7d8de79d367e7059fbbb4155e8da", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec2271788240351685d49f7e8e5875036fd8be6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec2271788240351685d49f7e8e5875036fd8be6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7ec2271788240351685d49f7e8e5875036fd8be6", "patch": "@@ -1,3 +1,7 @@\n+2003-02-04  Nathan Myers  <ncm@cantrip.org>\n+\n+\t* testsuite/25_algorithms/min_max.cc (test02): Add.\n+            \n 2003-02-04  Paolo Carlini  <pcarlini@unitus.it>\n \t\n \tPR libstdc++/9439, PR libstdc++/9425"}, {"sha": "c6070433644151914619b4208dc541861f998721", "filename": "libstdc++-v3/testsuite/25_algorithms/min_max.cc", "status": "modified", "additions": 111, "deletions": 5, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec2271788240351685d49f7e8e5875036fd8be6/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin_max.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec2271788240351685d49f7e8e5875036fd8be6/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin_max.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin_max.cc?ref=7ec2271788240351685d49f7e8e5875036fd8be6", "patch": "@@ -1,6 +1,6 @@\n // 2000-03-29 sss/bkoz\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,28 +19,134 @@\n // USA.\n \n #include <algorithm>\n+#include <functional>\n #include <testsuite_hooks.h>\n \n void test01()\n {\n   bool test = true;\n+\n   const int& x = std::max(1, 2);\n-  const int& y = std::max(3, 4);\n+  const int& y = std::max(4, 3);\n   VERIFY( x == 2 );\n   VERIFY( y == 4 );\n \n+  const int& xc = std::max(1, 2, std::greater<int>());\n+  const int& yc = std::max(4, 3, std::greater<int>());\n+  VERIFY( xc == 1 );\n+  VERIFY( yc == 3 );\n+\n   const int& z = std::min(1, 2);\n-  const int& w = std::min(3, 4);\n+  const int& w = std::min(4, 3);\n   VERIFY( z == 1 );\n   VERIFY( w == 3 );\n \n-#ifdef DEBUG_ASSERT\n-  assert(test);\n+  const int& zc = std::min(1, 2, std::greater<int>());\n+  const int& wc = std::min(4, 3, std::greater<int>());\n+  VERIFY( zc == 2 );\n+  VERIFY( wc == 4 );\n+}\n+\n+template<typename T> \n+  struct A { static const T a; };\n+\n+template<typename T>\n+const T A<T>::a = T(3);\n+\n+void test02()\n+{\n+  bool test = true;\n+\n+  VERIFY( 2 == std::min(A<int>::a, 2) );\n+  VERIFY( 3 == std::min(A<int>::a, 4) );\n+\n+  VERIFY( 2u == std::min(A<unsigned int>::a, 2u) );\n+  VERIFY( 3u == std::min(A<unsigned int>::a, 4u) );\n+\n+  VERIFY( 2l == std::min(A<long>::a, 2l) );\n+  VERIFY( 3l == std::min(A<long>::a, 4l) );\n+\n+  VERIFY( 2ul == std::min(A<unsigned long>::a, 2ul) );\n+  VERIFY( 3ul == std::min(A<unsigned long>::a, 4ul) );\n+\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+  VERIFY( 2ll == std::min(A<long long>::a, 2ll) );\n+  VERIFY( 3ll == std::min(A<long long>::a, 4ll) );\n+\n+  VERIFY( 2ull == std::min(A<unsigned long long>::a, 2ull) );\n+  VERIFY( 3ull == std::min(A<unsigned long long>::a, 4ull) );\n #endif\n+\n+  VERIFY( short(2) == std::min(A<short>::a, short(2)) );\n+  VERIFY( short(3) == std::min(A<short>::a, short(4)) );\n+\n+  VERIFY( (unsigned short)2 == std::min(A<unsigned short>::a, (unsigned short)2) );\n+  VERIFY( (unsigned short)3 == std::min(A<unsigned short>::a, (unsigned short)4) );\n+\n+  VERIFY( (char)2 == std::min(A<char>::a, (char)2) );\n+  VERIFY( (char)3 == std::min(A<char>::a, (char)4) );\n+\n+  VERIFY( (signed char)2 == std::min(A<signed char>::a, (signed char)2) );\n+  VERIFY( (signed char)3 == std::min(A<signed char>::a, (signed char)4) );\n+\n+  VERIFY( (unsigned char)2 == std::min(A<unsigned char>::a, (unsigned char)2) );\n+  VERIFY( (unsigned char)3 == std::min(A<unsigned char>::a, (unsigned char)4) );\n+\n+  VERIFY( (wchar_t)2 == std::min(A<wchar_t>::a, (wchar_t)2) );\n+  VERIFY( (wchar_t)3 == std::min(A<wchar_t>::a, (wchar_t)4) );\n+\n+  VERIFY( 2.0 == std::min(A<double>::a, 2.0) );\n+  VERIFY( 3.0 == std::min(A<double>::a, 4.0) );\n+\n+  VERIFY( float(2) == std::min(A<float>::a, float(2)) );\n+  VERIFY( float(3) == std::min(A<float>::a, float(4)) );\n+\n+  VERIFY( (long double)2 == std::min(A<long double>::a, (long double)2) );\n+  VERIFY( (long double)3 == std::min(A<long double>::a, (long double)4) );\n+\n+\n+  VERIFY( 3 == std::max(A<int>::a, 2) );\n+  VERIFY( 4 == std::max(A<int>::a, 4) );\n+\n+  VERIFY( 3u == std::max(A<unsigned int>::a, 2u) );\n+  VERIFY( 4u == std::max(A<unsigned int>::a, 4u) );\n+\n+  VERIFY( 3l == std::max(A<long>::a, 2l) );\n+  VERIFY( 4l == std::max(A<long>::a, 4l) );\n+\n+  VERIFY( 3ul == std::max(A<unsigned long>::a, 2ul) );\n+  VERIFY( 4ul == std::max(A<unsigned long>::a, 4ul) );\n+\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+  VERIFY( 3ll == std::max(A<long long>::a, 2ll) );\n+  VERIFY( 4ll == std::max(A<long long>::a, 4ll) );\n+\n+  VERIFY( 3ull == std::max(A<unsigned long long>::a, 2ull) );\n+  VERIFY( 4ull == std::max(A<unsigned long long>::a, 4ull) );\n+#endif\n+\n+  VERIFY( short(3) == std::max(A<short>::a, short(2)) );\n+  VERIFY( short(4) == std::max(A<short>::a, short(4)) );\n+\n+  VERIFY( (unsigned short)3 == std::max(A<unsigned short>::a, (unsigned short)2) );\n+  VERIFY( (unsigned short)4 == std::max(A<unsigned short>::a, (unsigned short)4) );\n+\n+  VERIFY( (char)3 == std::max(A<char>::a, (char)2) );\n+  VERIFY( (char)4 == std::max(A<char>::a, (char)4) );\n+\n+  VERIFY( (signed char)3 == std::max(A<signed char>::a, (signed char)2) );\n+  VERIFY( (signed char)4 == std::max(A<signed char>::a, (signed char)4) );\n+\n+  VERIFY( (unsigned char)3 == std::max(A<unsigned char>::a, (unsigned char)2) );\n+  VERIFY( (unsigned char)4 == std::max(A<unsigned char>::a, (unsigned char)4) );\n+\n+  VERIFY( (wchar_t)3 == std::max(A<wchar_t>::a, (wchar_t)2) );\n+  VERIFY( (wchar_t)4 == std::max(A<wchar_t>::a, (wchar_t)4) );\n }\n \n int main()\n {\n   test01();\n+  test02();\n   return 0;\n }"}]}