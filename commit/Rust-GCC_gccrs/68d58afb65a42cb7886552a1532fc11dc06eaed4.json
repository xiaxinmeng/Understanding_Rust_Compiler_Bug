{"sha": "68d58afb65a42cb7886552a1532fc11dc06eaed4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhkNThhZmI2NWE0MmNiNzg4NjU1MmExNTMyZmMxMWRjMDZlYWVkNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2015-10-21T16:14:01Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-10-21T16:14:01Z"}, "message": "omp-low.c (check_omp_nesting_restrictions): Check OpenACC loop nesting.\n\n\tgcc/\n\t* omp-low.c (check_omp_nesting_restrictions): Check OpenACC loop\n\tnesting.\n\n\ttestsuite/\n\t* c-c++-common/goacc/clauses-fail.c: Adjust errors.\n\t* c-c++-common/goacc/sb-1.c: Adjust errors.\n\t* c-c++-common/goacc/sb-3.c: Adjust errors.\n\t* c-c++-common/goacc/loop-1.c: Adjust errors.\n\t* c-c++-common/goacc/nesting-1.c: Adjust errors.\n\t* c-c++-common/goacc-gomp/nesting-fail-1.c: Adjust errors.\n\t* c-c++-common/goacc-gomp/nesting-1.c: Adjust errors.\n\nFrom-SVN: r229129", "tree": {"sha": "22ecc181739aaf3a10d2ee54152d87daabb76014", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22ecc181739aaf3a10d2ee54152d87daabb76014"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68d58afb65a42cb7886552a1532fc11dc06eaed4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68d58afb65a42cb7886552a1532fc11dc06eaed4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68d58afb65a42cb7886552a1532fc11dc06eaed4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68d58afb65a42cb7886552a1532fc11dc06eaed4/comments", "author": null, "committer": null, "parents": [{"sha": "9f47c7e5cf3f69d34ad09c97a729649d18dfb3a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f47c7e5cf3f69d34ad09c97a729649d18dfb3a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f47c7e5cf3f69d34ad09c97a729649d18dfb3a6"}], "stats": {"total": 101, "additions": 82, "deletions": 19}, "files": [{"sha": "21164b13ca3073c3eceba52f9b8bbe86184b4ee4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d58afb65a42cb7886552a1532fc11dc06eaed4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d58afb65a42cb7886552a1532fc11dc06eaed4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68d58afb65a42cb7886552a1532fc11dc06eaed4", "patch": "@@ -1,3 +1,8 @@\n+2015-10-21  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* omp-low.c (check_omp_nesting_restrictions): Check OpenACC loop\n+\tnesting.\n+\n 2015-10-21  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \t* doc/tm.texi: Regenerated."}, {"sha": "ad7c017affbb51d65f44c642fd129ea79c14afa6", "filename": "gcc/omp-low.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d58afb65a42cb7886552a1532fc11dc06eaed4/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d58afb65a42cb7886552a1532fc11dc06eaed4/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=68d58afb65a42cb7886552a1532fc11dc06eaed4", "patch": "@@ -3178,6 +3178,43 @@ check_omp_nesting_restrictions (gimple *stmt, omp_context *ctx)\n       /* We split taskloop into task and nested taskloop in it.  */\n       if (gimple_omp_for_kind (stmt) == GF_OMP_FOR_KIND_TASKLOOP)\n \treturn true;\n+      if (gimple_omp_for_kind (stmt) == GF_OMP_FOR_KIND_OACC_LOOP)\n+\t{\n+\t  bool ok = false;\n+\t  \n+\t  if (ctx)\n+\t    switch (gimple_code (ctx->stmt))\n+\t      {\n+\t      case GIMPLE_OMP_FOR:\n+\t\tok = (gimple_omp_for_kind (ctx->stmt)\n+\t\t      == GF_OMP_FOR_KIND_OACC_LOOP);\n+\t\tbreak;\n+\n+\t      case GIMPLE_OMP_TARGET:\n+\t\tswitch (gimple_omp_target_kind (ctx->stmt))\n+\t\t  {\n+\t\t  case GF_OMP_TARGET_KIND_OACC_PARALLEL:\n+\t\t  case GF_OMP_TARGET_KIND_OACC_KERNELS:\n+\t\t    ok = true;\n+\t\t    break;\n+\n+\t\t  default:\n+\t\t    break;\n+\t\t  }\n+\n+\t      default:\n+\t\tbreak;\n+\t      }\n+\t  else if (get_oacc_fn_attrib (current_function_decl))\n+\t    ok = true;\n+\t  if (!ok)\n+\t    {\n+\t      error_at (gimple_location (stmt),\n+\t\t\t\"OpenACC loop directive must be associated with\"\n+\t\t\t\" an OpenACC compute region\");\n+\t      return false;\n+\t    }\n+\t}\n       /* FALLTHRU */\n     case GIMPLE_CALL:\n       if (is_gimple_call (stmt)"}, {"sha": "db0f89665a29c0ed8cd0c730e58508ec8c3d956e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d58afb65a42cb7886552a1532fc11dc06eaed4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d58afb65a42cb7886552a1532fc11dc06eaed4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=68d58afb65a42cb7886552a1532fc11dc06eaed4", "patch": "@@ -1,3 +1,13 @@\n+2015-10-21  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* c-c++-common/goacc/clauses-fail.c: Adjust errors.\n+\t* c-c++-common/goacc/sb-1.c: Adjust errors.\n+\t* c-c++-common/goacc/sb-3.c: Adjust errors.\n+\t* c-c++-common/goacc/loop-1.c: Adjust errors.\n+\t* c-c++-common/goacc/nesting-1.c: Adjust errors.\n+\t* c-c++-common/goacc-gomp/nesting-fail-1.c: Adjust errors.\n+\t* c-c++-common/goacc-gomp/nesting-1.c: Adjust errors.\n+\n 2015-10-21  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \t* g++.dg/ext/vector22.C: Allow VEC_COND_EXPR."}, {"sha": "1c17818e41514eb6aa1819b4b6975d66b28b88fd", "filename": "gcc/testsuite/c-c++-common/goacc-gomp/nesting-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d58afb65a42cb7886552a1532fc11dc06eaed4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc-gomp%2Fnesting-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d58afb65a42cb7886552a1532fc11dc06eaed4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc-gomp%2Fnesting-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc-gomp%2Fnesting-1.c?ref=68d58afb65a42cb7886552a1532fc11dc06eaed4", "patch": "@@ -5,7 +5,7 @@ f_omp_parallel (void)\n   {\n     int i;\n \n-#pragma acc loop\n+#pragma acc loop /* { dg-error \"loop directive must be associated with an OpenACC compute region\" } */\n     for (i = 0; i < 2; ++i)\n       ;\n   }"}, {"sha": "0c8ea54d53d3a50c8d6f30333e81e0ff340dcd0b", "filename": "gcc/testsuite/c-c++-common/goacc-gomp/nesting-fail-1.c", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d58afb65a42cb7886552a1532fc11dc06eaed4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc-gomp%2Fnesting-fail-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d58afb65a42cb7886552a1532fc11dc06eaed4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc-gomp%2Fnesting-fail-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc-gomp%2Fnesting-fail-1.c?ref=68d58afb65a42cb7886552a1532fc11dc06eaed4", "patch": "@@ -28,7 +28,7 @@ f_omp (void)\n #pragma acc update host(i) /* { dg-error \"OpenACC construct inside of non-OpenACC region\" } */\n #pragma acc enter data copyin(i) /* { dg-error \"OpenACC construct inside of non-OpenACC region\" } */\n #pragma acc exit data delete(i) /* { dg-error \"OpenACC construct inside of non-OpenACC region\" } */\n-#pragma acc loop /* { dg-error \"may not be closely nested\" } */\n+#pragma acc loop /* { dg-error \"loop directive must be associated with an OpenACC compute region\" } */\n       for (i = 0; i < 2; ++i)\n \t;\n     }\n@@ -63,7 +63,7 @@ f_omp (void)\n     }\n #pragma omp section\n     {\n-#pragma acc loop /* { dg-error \"may not be closely nested\" } */\n+#pragma acc loop /* { dg-error \"loop directive must be associated with an OpenACC compute region\" } */\n       for (i = 0; i < 2; ++i)\n \t;\n     }\n@@ -80,7 +80,7 @@ f_omp (void)\n #pragma acc update host(i) /* { dg-error \"OpenACC construct inside of non-OpenACC region\" } */\n #pragma acc enter data copyin(i) /* { dg-error \"OpenACC construct inside of non-OpenACC region\" } */\n #pragma acc exit data delete(i) /* { dg-error \"OpenACC construct inside of non-OpenACC region\" } */\n-#pragma acc loop /* { dg-error \"may not be closely nested\" } */\n+#pragma acc loop /* { dg-error \"loop directive must be associated with an OpenACC compute region\" } */\n     for (i = 0; i < 2; ++i)\n       ;\n   }\n@@ -96,7 +96,7 @@ f_omp (void)\n #pragma acc update host(i) /* { dg-error \"OpenACC construct inside of non-OpenACC region\" } */\n #pragma acc enter data copyin(i) /* { dg-error \"OpenACC construct inside of non-OpenACC region\" } */\n #pragma acc exit data delete(i) /* { dg-error \"OpenACC construct inside of non-OpenACC region\" } */\n-#pragma acc loop /* { dg-error \"may not be closely nested\" } */\n+#pragma acc loop /* { dg-error \"loop directive must be associated with an OpenACC compute region\" } */\n     for (i = 0; i < 2; ++i)\n       ;\n   }\n@@ -112,7 +112,7 @@ f_omp (void)\n #pragma acc update host(i) /* { dg-error \"OpenACC construct inside of non-OpenACC region\" } */\n #pragma acc enter data copyin(i) /* { dg-error \"OpenACC construct inside of non-OpenACC region\" } */\n #pragma acc exit data delete(i) /* { dg-error \"OpenACC construct inside of non-OpenACC region\" } */\n-#pragma acc loop /* { dg-error \"may not be closely nested\" } */\n+#pragma acc loop /* { dg-error \"loop directive must be associated with an OpenACC compute region\" } */\n     for (i = 0; i < 2; ++i)\n       ;\n   }\n@@ -128,7 +128,7 @@ f_omp (void)\n #pragma acc update host(i) /* { dg-error \"OpenACC construct inside of non-OpenACC region\" } */\n #pragma acc enter data copyin(i) /* { dg-error \"OpenACC construct inside of non-OpenACC region\" } */\n #pragma acc exit data delete(i) /* { dg-error \"OpenACC construct inside of non-OpenACC region\" } */\n-#pragma acc loop /* { dg-error \"may not be closely nested\" } */\n+#pragma acc loop /* { dg-error \"loop directive must be associated with an OpenACC compute region\" } */\n     for (i = 0; i < 2; ++i)\n       ;\n   }\n@@ -144,7 +144,7 @@ f_omp (void)\n #pragma acc update host(i) /* { dg-error \"OpenACC construct inside of non-OpenACC region\" } */\n #pragma acc enter data copyin(i) /* { dg-error \"OpenACC construct inside of non-OpenACC region\" } */\n #pragma acc exit data delete(i) /* { dg-error \"OpenACC construct inside of non-OpenACC region\" } */\n-#pragma acc loop /* { dg-error \"may not be closely nested\" } */\n+#pragma acc loop /* { dg-error \"loop directive must be associated with an OpenACC compute region\" } */\n     for (i = 0; i < 2; ++i)\n       ;\n   }\n@@ -160,7 +160,7 @@ f_omp (void)\n #pragma acc update host(i) /* { dg-error \"OpenACC update construct inside of OpenMP target region\" } */\n #pragma acc enter data copyin(i) /* { dg-error \"OpenACC enter/exit data construct inside of OpenMP target region\" } */\n #pragma acc exit data delete(i) /* { dg-error \"OpenACC enter/exit data construct inside of OpenMP target region\" } */\n-#pragma acc loop\n+#pragma acc loop /* { dg-error \"loop directive must be associated with an OpenACC compute region\" } */\n     for (i = 0; i < 2; ++i)\n       ;\n   }\n@@ -379,13 +379,15 @@ f_acc_data (void)\n void\n f_acc_loop (void)\n {\n+#pragma acc parallel\n #pragma acc loop\n   for (i = 0; i < 2; ++i)\n     {\n #pragma omp parallel /* { dg-error \"non-OpenACC construct inside of OpenACC region\" } */\n       ;\n     }\n \n+#pragma acc parallel\n #pragma acc loop\n   for (i = 0; i < 2; ++i)\n     {\n@@ -394,6 +396,7 @@ f_acc_loop (void)\n \t;\n     }\n \n+#pragma acc parallel\n #pragma acc loop\n   for (i = 0; i < 2; ++i)\n     {\n@@ -403,48 +406,55 @@ f_acc_loop (void)\n       }\n     }\n \n+#pragma acc parallel\n #pragma acc loop\n   for (i = 0; i < 2; ++i)\n     {\n #pragma omp single /* { dg-error \"non-OpenACC construct inside of OpenACC region\" } */\n       ;\n     }\n \n+#pragma acc parallel\n #pragma acc loop\n   for (i = 0; i < 2; ++i)\n     {\n #pragma omp task /* { dg-error \"non-OpenACC construct inside of OpenACC region\" } */\n       ;\n     }\n \n+#pragma acc parallel\n #pragma acc loop\n   for (i = 0; i < 2; ++i)\n     {\n #pragma omp master /* { dg-error \"non-OpenACC construct inside of OpenACC region\" } */\n       ;\n     }\n \n+#pragma acc parallel\n #pragma acc loop\n   for (i = 0; i < 2; ++i)\n     {\n #pragma omp critical /* { dg-error \"non-OpenACC construct inside of OpenACC region\" } */\n       ;\n     }\n \n+#pragma acc parallel\n #pragma acc loop\n   for (i = 0; i < 2; ++i)\n     {\n #pragma omp atomic write\n       i = 0; /* { dg-error \"non-OpenACC construct inside of OpenACC region\" } */\n     }\n \n+#pragma acc parallel\n #pragma acc loop\n   for (i = 0; i < 2; ++i)\n     {\n #pragma omp ordered /* { dg-error \"non-OpenACC construct inside of OpenACC region\" } */\n       ;\n     }\n \n+#pragma acc parallel\n #pragma acc loop\n   for (i = 0; i < 2; ++i)\n     {"}, {"sha": "661d364f06642436bf6f931bb72da7e1d0451749", "filename": "gcc/testsuite/c-c++-common/goacc/clauses-fail.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d58afb65a42cb7886552a1532fc11dc06eaed4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclauses-fail.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d58afb65a42cb7886552a1532fc11dc06eaed4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclauses-fail.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclauses-fail.c?ref=68d58afb65a42cb7886552a1532fc11dc06eaed4", "patch": "@@ -12,6 +12,7 @@ f (void)\n #pragma acc data two /* { dg-error \"expected '#pragma acc' clause before 'two'\" } */\n   ;\n \n+#pragma acc parallel\n #pragma acc loop deux /* { dg-error \"expected '#pragma acc' clause before 'deux'\" } */\n   for (i = 0; i < 2; ++i)\n     ;"}, {"sha": "2d8f4d5a8d3147d962bc60264c13c02911ecb0e2", "filename": "gcc/testsuite/c-c++-common/goacc/loop-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d58afb65a42cb7886552a1532fc11dc06eaed4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d58afb65a42cb7886552a1532fc11dc06eaed4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-1.c?ref=68d58afb65a42cb7886552a1532fc11dc06eaed4", "patch": "@@ -38,16 +38,16 @@ int test1()\n       i = d;\n       a[i] = 1;\n     }\n-  #pragma acc loop\n+  #pragma acc loop /* { dg-error \"loop directive must be associated with an OpenACC compute region\" } */\n   for (i = 1; i < 30; i++ )\n     if (i == 16) break; /* { dg-error \"break statement used\" } */\n \n /* different types of for loop are allowed */\n-  #pragma acc loop\n+  #pragma acc loop /* { dg-error \"loop directive must be associated with an OpenACC compute region\" } */\n   for (i = 1; i < 10; i++)\n     {\n     }\n-  #pragma acc loop\n+  #pragma acc loop /* { dg-error \"loop directive must be associated with an OpenACC compute region\" } */\n   for (i = 1; i < 10; i+=2)\n     {\n       a[i] = i;"}, {"sha": "3a8f838906c6221c36c0d3e49f2766a2e1c2543a", "filename": "gcc/testsuite/c-c++-common/goacc/nesting-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d58afb65a42cb7886552a1532fc11dc06eaed4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnesting-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d58afb65a42cb7886552a1532fc11dc06eaed4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnesting-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnesting-1.c?ref=68d58afb65a42cb7886552a1532fc11dc06eaed4", "patch": "@@ -58,7 +58,7 @@ f_acc_data (void)\n \n #pragma acc exit data delete(i)\n \n-#pragma acc loop\n+#pragma acc loop /* { dg-error \"loop directive must be associated with an OpenACC compute region\" } */\n     for (i = 0; i < 2; ++i)\n       ;\n \n@@ -93,7 +93,7 @@ f_acc_data (void)\n \n #pragma acc exit data delete(i)\n \n-#pragma acc loop\n+#pragma acc loop /* { dg-error \"loop directive must be associated with an OpenACC compute region\" } */\n       for (i = 0; i < 2; ++i)\n \t;\n     }"}, {"sha": "1ce41df0c0969a33a4d4a69b5483ef58d132f6c2", "filename": "gcc/testsuite/c-c++-common/goacc/sb-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d58afb65a42cb7886552a1532fc11dc06eaed4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fsb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d58afb65a42cb7886552a1532fc11dc06eaed4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fsb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fsb-1.c?ref=68d58afb65a42cb7886552a1532fc11dc06eaed4", "patch": "@@ -11,7 +11,7 @@ void foo()\n     goto bad1; // { dg-error \"invalid branch to/from OpenACC structured block\" }\n   #pragma acc data\n     goto bad1; // { dg-error \"invalid branch to/from OpenACC structured block\" }\n-  #pragma acc loop\n+  #pragma acc loop /* { dg-error \"loop directive must be associated with an OpenACC compute region\" } */\n     for (l = 0; l < 2; ++l)\n       goto bad1; // { dg-error \"invalid branch to/from OpenACC structured block\" }\n \n@@ -34,7 +34,7 @@ void foo()\n     }\n \n   goto bad2_loop; // { dg-error \"invalid entry to OpenACC structured block\" }\n-  #pragma acc loop\n+  #pragma acc loop /* { dg-error \"loop directive must be associated with an OpenACC compute region\" } */\n   for (l = 0; l < 2; ++l)\n     {\n       bad2_loop: ;\n@@ -64,7 +64,7 @@ void foo()\n \t{ ok1_data: break; }\n     }\n \n-  #pragma acc loop\n+  #pragma acc loop /* { dg-error \"loop directive must be associated with an OpenACC compute region\" } */\n     for (l = 0; l < 2; ++l)\n       {\n \tint i;"}, {"sha": "620498ecd629fd6101de9703f5a8e12ec4278199", "filename": "gcc/testsuite/c-c++-common/goacc/sb-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d58afb65a42cb7886552a1532fc11dc06eaed4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fsb-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d58afb65a42cb7886552a1532fc11dc06eaed4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fsb-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fsb-3.c?ref=68d58afb65a42cb7886552a1532fc11dc06eaed4", "patch": "@@ -3,11 +3,11 @@\n void f (void)\n {\n   int i, j;\n-#pragma acc loop\n+#pragma acc loop /* { dg-error \"loop directive must be associated with an OpenACC compute region\" } */\n   for(i = 1; i < 30; i++)\n     {\n       if (i == 7) goto out; // { dg-error \"invalid branch to/from OpenACC structured block\" }\n-#pragma acc loop // { dg-error \"work-sharing region may not be closely nested inside of work-sharing, critical, ordered, master or explicit task region\" }\n+#pragma acc loop\n       for(j = 5; j < 10; j++)\n \t{\n \t  if (i == 6 && j == 7) goto out; // { dg-error \"invalid branch to/from OpenACC structured block\" }"}]}