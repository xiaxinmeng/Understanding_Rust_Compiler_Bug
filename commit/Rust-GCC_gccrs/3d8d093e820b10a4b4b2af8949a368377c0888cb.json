{"sha": "3d8d093e820b10a4b4b2af8949a368377c0888cb", "node_id": "C_kwDOANBUbNoAKDNkOGQwOTNlODIwYjEwYTRiNGIyYWY4OTQ5YTM2ODM3N2MwODg4Y2I", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2022-04-28T19:06:29Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2022-04-29T06:36:26Z"}, "message": "c++, coroutines: Partial reversion of r12-8308-g15a176a833f23e [PR105426].\n\nThe changes to fix PR 105287 included a tightening of the constraints on which\nvariables are promoted to frame copies.  This has exposed that we are failing\nto name some variables that should be promoted.\n\nWe avoid the use of DECL_UID to build anonymous symbols since that might not\nbe stable for -fcompare-debug.\n\nThe long-term fix is to address the cases where the naming has been missed,\nbut for the short-term (and for the GCC-12 branch) backing out the additional\nconstraint is proposed.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\n\tPR c++/105426\n\ngcc/cp/ChangeLog:\n\n\t* coroutines.cc (register_local_var_uses): Allow promotion of unnamed\n\ttemporaries to coroutine frame copies.", "tree": {"sha": "aed18909cd70650cb669e4e71bd85b9d10e916df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aed18909cd70650cb669e4e71bd85b9d10e916df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d8d093e820b10a4b4b2af8949a368377c0888cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d8d093e820b10a4b4b2af8949a368377c0888cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d8d093e820b10a4b4b2af8949a368377c0888cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d8d093e820b10a4b4b2af8949a368377c0888cb/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e27eef7478f30ea79048dbde3317e89679d75a6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e27eef7478f30ea79048dbde3317e89679d75a6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e27eef7478f30ea79048dbde3317e89679d75a6e"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "1d886b31c77e1e2dd2c5bf3236c7844cdbafe681", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8d093e820b10a4b4b2af8949a368377c0888cb/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8d093e820b10a4b4b2af8949a368377c0888cb/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=3d8d093e820b10a4b4b2af8949a368377c0888cb", "patch": "@@ -3913,6 +3913,7 @@ register_local_var_uses (tree *stmt, int *do_subtree, void *d)\n   if (TREE_CODE (*stmt) == BIND_EXPR)\n     {\n       tree lvar;\n+      unsigned serial = 0;\n       for (lvar = BIND_EXPR_VARS (*stmt); lvar != NULL;\n \t   lvar = DECL_CHAIN (lvar))\n \t{\n@@ -3973,14 +3974,15 @@ register_local_var_uses (tree *stmt, int *do_subtree, void *d)\n \t  else if (lvname != NULL_TREE)\n \t    buf = xasprintf (\"%s_%u_%u\", IDENTIFIER_POINTER (lvname),\n \t\t\t     lvd->nest_depth, lvd->bind_indx);\n+\t  else\n+\t    buf = xasprintf (\"_D%u_%u_%u\", lvd->nest_depth, lvd->bind_indx,\n+\t\t\t     serial++);\n+\n \t  /* TODO: Figure out if we should build a local type that has any\n \t     excess alignment or size from the original decl.  */\n-\t  if (buf)\n-\t    {\n-\t      local_var.field_id = coro_make_frame_entry (lvd->field_list, buf,\n-\t\t\t\t\t\t\t  lvtype, lvd->loc);\n-\t      free (buf);\n-\t    }\n+\t  local_var.field_id = coro_make_frame_entry (lvd->field_list, buf,\n+\t\t\t\t\t\t      lvtype, lvd->loc);\n+\t  free (buf);\n \t  /* We don't walk any of the local var sub-trees, they won't contain\n \t     any bind exprs.  */\n \t}"}]}