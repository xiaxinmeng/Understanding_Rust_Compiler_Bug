{"sha": "b631d45ac3d9d53a648885ac6b88210da192ab37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYzMWQ0NWFjM2Q5ZDUzYTY0ODg4NWFjNmI4ODIxMGRhMTkyYWIzNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-09-17T17:45:00Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-09-17T17:45:00Z"}, "message": "re PR ipa/58332 (error: inlined_to pointer is set but no predecessors found)\n\n\n\tPR middle-end/58332\n\t* gcc.c-torture/compile/pr58332.c: New testcase.\n\t* cif-code.def (FUNCTION_NOT_OPTIMIZED): New CIF code.\n\t* ipa-inline.c (can_inline_edge_p): Do not downgrade\n\tFUNCTION_NOT_OPTIMIZED.\n\t* ipa-inline-analysis.c (compute_inline_parameters): Function\n\tnot optimized is not inlinable unless it is alwaysinline.\n\t(inline_analyze_function): Force calls in not optimized\n\tfunction not inlinable.\n\nFrom-SVN: r202661", "tree": {"sha": "ad0eee441d92de888ca7a13df2182efb4f34930e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad0eee441d92de888ca7a13df2182efb4f34930e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b631d45ac3d9d53a648885ac6b88210da192ab37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b631d45ac3d9d53a648885ac6b88210da192ab37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b631d45ac3d9d53a648885ac6b88210da192ab37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b631d45ac3d9d53a648885ac6b88210da192ab37/comments", "author": null, "committer": null, "parents": [{"sha": "8d34e421a5668e25a992bd0b349cb81e91ee3e49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d34e421a5668e25a992bd0b349cb81e91ee3e49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d34e421a5668e25a992bd0b349cb81e91ee3e49"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "616a3f9baf2927095f8709b5f381a6ebfe31d1b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b631d45ac3d9d53a648885ac6b88210da192ab37/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b631d45ac3d9d53a648885ac6b88210da192ab37/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b631d45ac3d9d53a648885ac6b88210da192ab37", "patch": "@@ -26,6 +26,17 @@\n \tmake_pass_early_warn_uninitialized): Move from tree-ssa.c\n \t* tree-ssa.h: Adjust prototypes\n \n+2013-09-17  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/58332\n+\t* cif-code.def (FUNCTION_NOT_OPTIMIZED): New CIF code.\n+\t* ipa-inline.c (can_inline_edge_p): Do not downgrade\n+\tFUNCTION_NOT_OPTIMIZED.\n+\t* ipa-inline-analysis.c (compute_inline_parameters): Function\n+\tnot optimized is not inlinable unless it is alwaysinline.\n+\t(inline_analyze_function): Force calls in not optimized\n+\tfunction not inlinable.\n+\n 2013-09-17  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/58329"}, {"sha": "e71123dc6092cd3f1691d2d3dda8cc6d7a356030", "filename": "gcc/cif-code.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b631d45ac3d9d53a648885ac6b88210da192ab37/gcc%2Fcif-code.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b631d45ac3d9d53a648885ac6b88210da192ab37/gcc%2Fcif-code.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcif-code.def?ref=b631d45ac3d9d53a648885ac6b88210da192ab37", "patch": "@@ -37,6 +37,9 @@ DEFCIFCODE(UNSPECIFIED , \"\")\n    functions that have not been rejected for inlining yet.  */\n DEFCIFCODE(FUNCTION_NOT_CONSIDERED, N_(\"function not considered for inlining\"))\n \n+/* Caller is compiled with optimizations disabled.  */\n+DEFCIFCODE(FUNCTION_NOT_OPTIMIZED, N_(\"caller is not optimized\"))\n+\n /* Inlining failed owing to unavailable function body.  */\n DEFCIFCODE(BODY_NOT_AVAILABLE, N_(\"function body not available\"))\n "}, {"sha": "ba6221e41fdb86702ea5237a1b88f735ae510d6d", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b631d45ac3d9d53a648885ac6b88210da192ab37/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b631d45ac3d9d53a648885ac6b88210da192ab37/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=b631d45ac3d9d53a648885ac6b88210da192ab37", "patch": "@@ -2664,7 +2664,11 @@ compute_inline_parameters (struct cgraph_node *node, bool early)\n   info->stack_frame_offset = 0;\n \n   /* Can this function be inlined at all?  */\n-  info->inlinable = tree_inlinable_function_p (node->symbol.decl);\n+  if (!optimize && !lookup_attribute (\"always_inline\",\n+\t\t\t\t      DECL_ATTRIBUTES (node->symbol.decl)))\n+    info->inlinable = false;\n+  else\n+    info->inlinable = tree_inlinable_function_p (node->symbol.decl);\n \n   /* Type attributes can use parameter indices to describe them.  */\n   if (TYPE_ATTRIBUTES (TREE_TYPE (node->symbol.decl)))\n@@ -3678,6 +3682,22 @@ inline_analyze_function (struct cgraph_node *node)\n   if (optimize && !node->thunk.thunk_p)\n     inline_indirect_intraprocedural_analysis (node);\n   compute_inline_parameters (node, false);\n+  if (!optimize)\n+    {\n+      struct cgraph_edge *e;\n+      for (e = node->callees; e; e = e->next_callee)\n+\t{\n+\t  if (e->inline_failed == CIF_FUNCTION_NOT_CONSIDERED)\n+\t    e->inline_failed = CIF_FUNCTION_NOT_OPTIMIZED;\n+\t  e->call_stmt_cannot_inline_p = true;\n+\t}\n+      for (e = node->indirect_calls; e; e = e->next_callee)\n+\t{\n+\t  if (e->inline_failed == CIF_FUNCTION_NOT_CONSIDERED)\n+\t    e->inline_failed = CIF_FUNCTION_NOT_OPTIMIZED;\n+\t  e->call_stmt_cannot_inline_p = true;\n+\t}\n+    }\n \n   pop_cfun ();\n }"}, {"sha": "3672e57e471776f48aee8f8043e73489d5b16e21", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b631d45ac3d9d53a648885ac6b88210da192ab37/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b631d45ac3d9d53a648885ac6b88210da192ab37/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=b631d45ac3d9d53a648885ac6b88210da192ab37", "patch": "@@ -275,7 +275,8 @@ can_inline_edge_p (struct cgraph_edge *e, bool report,\n     }\n   else if (e->call_stmt_cannot_inline_p)\n     {\n-      e->inline_failed = CIF_MISMATCHED_ARGUMENTS;\n+      if (e->inline_failed != CIF_FUNCTION_NOT_OPTIMIZED)\n+        e->inline_failed = CIF_MISMATCHED_ARGUMENTS;\n       inlinable = false;\n     }\n   /* Don't inline if the functions have different EH personalities.  */"}, {"sha": "b36c03355cd36571b39e74ef3471ef05541125d1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b631d45ac3d9d53a648885ac6b88210da192ab37/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b631d45ac3d9d53a648885ac6b88210da192ab37/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b631d45ac3d9d53a648885ac6b88210da192ab37", "patch": "@@ -1,3 +1,8 @@\n+2013-09-17  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/58332\n+\t* gcc.c-torture/compile/pr58332.c: New testcase.\n+\n 2013-09-17  Jeff Law  <law@redhat.com>\n \n \t* gcc.c-torture/execute/pr58387.c: New test."}, {"sha": "22c586cb866f296c3a27e43b5b15082835a43503", "filename": "gcc/testsuite/gcc.c-torture/compile/pr58332.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b631d45ac3d9d53a648885ac6b88210da192ab37/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr58332.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b631d45ac3d9d53a648885ac6b88210da192ab37/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr58332.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr58332.c?ref=b631d45ac3d9d53a648885ac6b88210da192ab37", "patch": "@@ -0,0 +1,2 @@\n+static inline int foo (int x) { return x + 1; }\n+__attribute__ ((__optimize__ (0))) int bar (void) { return foo (100); }"}]}