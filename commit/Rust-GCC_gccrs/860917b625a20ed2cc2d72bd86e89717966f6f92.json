{"sha": "860917b625a20ed2cc2d72bd86e89717966f6f92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYwOTE3YjYyNWEyMGVkMmNjMmQ3MmJkODZlODk3MTc5NjZmNmY5Mg==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2013-09-10T14:58:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-09-10T14:58:22Z"}, "message": "aspects.ads, [...]: Minor reformatting.\n\n2013-09-10  Thomas Quinot  <quinot@adacore.com>\n\n\t* aspects.ads, sem_ch13.adb: Minor reformatting.\n\t* adaint.c (__gnat_set_close_on_exec): Add comment documenting\n\tthat this routine is shared between OS_Lib and Sockets.\n\nFrom-SVN: r202458", "tree": {"sha": "2c4e4339b74ae20e780c1d67dd69c45555187397", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c4e4339b74ae20e780c1d67dd69c45555187397"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/860917b625a20ed2cc2d72bd86e89717966f6f92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/860917b625a20ed2cc2d72bd86e89717966f6f92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/860917b625a20ed2cc2d72bd86e89717966f6f92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/860917b625a20ed2cc2d72bd86e89717966f6f92/comments", "author": null, "committer": null, "parents": [{"sha": "7fe6c026821c350ac3d8e6c005f03ca6ff831677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fe6c026821c350ac3d8e6c005f03ca6ff831677", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fe6c026821c350ac3d8e6c005f03ca6ff831677"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "13d2590b1fcb35c7c84278c43c9a8c346aecb1a1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860917b625a20ed2cc2d72bd86e89717966f6f92/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860917b625a20ed2cc2d72bd86e89717966f6f92/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=860917b625a20ed2cc2d72bd86e89717966f6f92", "patch": "@@ -1,3 +1,9 @@\n+2013-09-10  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* aspects.ads, sem_ch13.adb: Minor reformatting.\n+\t* adaint.c (__gnat_set_close_on_exec): Add comment documenting\n+\tthat this routine is shared between OS_Lib and Sockets.\n+\n 2013-09-10  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_prag.adb (Expand_Pragma_Check): Ignore pragma if Is_Ignored set."}, {"sha": "850e1fc47b187e9d305bfacfc38c40b558ff962f", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860917b625a20ed2cc2d72bd86e89717966f6f92/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860917b625a20ed2cc2d72bd86e89717966f6f92/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=860917b625a20ed2cc2d72bd86e89717966f6f92", "patch": "@@ -3748,6 +3748,11 @@ get_gcc_version (void)\n #endif\n }\n \n+/*\n+ * Set Close_On_Exec as indicated.\n+ * Note: this is used for both GNAT.OS_Lib and GNAT.Sockets.\n+ */\n+\n int\n __gnat_set_close_on_exec (int fd ATTRIBUTE_UNUSED,\n                           int close_on_exec_p ATTRIBUTE_UNUSED)"}, {"sha": "acaa4cc8cabbfc83c991c793d464fe0a79b4a562", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860917b625a20ed2cc2d72bd86e89717966f6f92/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860917b625a20ed2cc2d72bd86e89717966f6f92/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=860917b625a20ed2cc2d72bd86e89717966f6f92", "patch": "@@ -499,8 +499,8 @@ package Aspects is\n    --  To deal with the delayed aspect case, we use two flags. The first is\n    --  set on the parent type if it has delayed representation aspects. This\n    --  flag Has_Delayed_Rep_Aspects indicates that if we derive from this type\n-   --  we have to worry about making sure we inherit any delayed types. The\n-   --  second flag is set on a derived type. May_Have_Inherited_Rep_Aspects\n+   --  we have to worry about making sure we inherit any delayed aspects. The\n+   --  second flag is set on a derived type: May_Have_Inherited_Rep_Aspects\n    --  is set if the parent type has Has_Delayed_Rep_Aspects set.\n \n    --  When we freeze a derived type, if the May_Have_Inherited_Rep_Aspects\n@@ -517,17 +517,17 @@ package Aspects is\n       --  is always delayed, as required by the language definition.\n \n       Never_Delay,\n-      --  There are two cases. There are language defined attributes like\n-      --  Convention where the \"expression\" is simply an uninterprted\n+      --  There are two cases. There are language defined aspects like\n+      --  Convention where the \"expression\" is simply an uninterpreted\n       --  identifier, and there is no issue of evaluating it and thus no\n       --  issue of delaying the evaluation. The second case is implementation\n-      --  defined attributes where we have decided that we don't want to\n-      --  allow delays (and for our own attributes we can do what we like!)\n+      --  defined aspects where we have decided that we don't want to allow\n+      --  delays (and for our own aspects we can do what we like!).\n \n       Rep_Aspect);\n       --  These are the cases of representation aspects that are in general\n       --  delayed, and where there is a potential issue of derived types that\n-      --  inherit delayed representation values\n+      --  inherit delayed representation values.\n \n    --  Note: even if this table indicates that an aspect is delayed, we never\n    --  delay Boolean aspects that have a missing expression (taken as True),"}, {"sha": "edaf8e7e7ceee6d89695d29cbba9a18f5ba6ec92", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860917b625a20ed2cc2d72bd86e89717966f6f92/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860917b625a20ed2cc2d72bd86e89717966f6f92/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=860917b625a20ed2cc2d72bd86e89717966f6f92", "patch": "@@ -713,7 +713,7 @@ package body Sem_Ch13 is\n       --  here), and then the flag May_Inherit_Delayed_Rep_Aspects is set in\n       --  the derived type (B here). If this flag is set when the derived type\n       --  is frozen, then this procedure is called to ensure proper inheritance\n-      --  of all delayed aspects from the paren type. The derived type is E,\n+      --  of all delayed aspects from the parent type. The derived type is E,\n       --  the argument to Analyze_Aspects_At_Freeze_Point. ASN is the first\n       --  aspect specification node in the Rep_Item chain for the parent type.\n "}]}