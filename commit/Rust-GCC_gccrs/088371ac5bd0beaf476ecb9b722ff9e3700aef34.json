{"sha": "088371ac5bd0beaf476ecb9b722ff9e3700aef34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg4MzcxYWM1YmQwYmVhZjQ3NmVjYjliNzIyZmY5ZTM3MDBhZWYzNA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2007-10-09T04:45:22Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2007-10-09T04:45:22Z"}, "message": "re PR middle-end/22156 (bit-field copying regressed)\n\nPR middle-end/22156\n* tree-sra.c (instantiate_element): Use BYTES_BIG_ENDIAN for\nbit-field layout.\n(sra_build_assignment): Likewise.  Set up mask depending on\nprecision, not type.\n(sra_build_bf_assignment): Use BYTES_BIG_ENDIAN.  Don't overflow\ncomputing bit masks.\n(sra_build_elt_assignment): Don't view-convert from signed to\nunsigned.\n(sra_explode_bitfield_assignment): Use bit-field type if\npossible.  Use BYTES_BIG_ENDIAN.\n\nFrom-SVN: r129150", "tree": {"sha": "97e7e8a78a54d634b2fb0a9669d27385ed6c0209", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97e7e8a78a54d634b2fb0a9669d27385ed6c0209"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/088371ac5bd0beaf476ecb9b722ff9e3700aef34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/088371ac5bd0beaf476ecb9b722ff9e3700aef34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/088371ac5bd0beaf476ecb9b722ff9e3700aef34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/088371ac5bd0beaf476ecb9b722ff9e3700aef34/comments", "author": null, "committer": null, "parents": [{"sha": "b6a04d96c3da192febb727f309d89adcdbc95ee2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6a04d96c3da192febb727f309d89adcdbc95ee2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6a04d96c3da192febb727f309d89adcdbc95ee2"}], "stats": {"total": 52, "additions": 36, "deletions": 16}, "files": [{"sha": "f3f200b47f28d7a16a53f479072e1ef9c7b28f50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/088371ac5bd0beaf476ecb9b722ff9e3700aef34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/088371ac5bd0beaf476ecb9b722ff9e3700aef34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=088371ac5bd0beaf476ecb9b722ff9e3700aef34", "patch": "@@ -1,3 +1,17 @@\n+2007-10-09  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR middle-end/22156\n+\t* tree-sra.c (instantiate_element): Use BYTES_BIG_ENDIAN for\n+\tbit-field layout.\n+\t(sra_build_assignment): Likewise.  Set up mask depending on\n+\tprecision, not type.\n+\t(sra_build_bf_assignment): Use BYTES_BIG_ENDIAN.  Don't overflow\n+\tcomputing bit masks.\n+\t(sra_build_elt_assignment): Don't view-convert from signed to\n+\tunsigned.\n+\t(sra_explode_bitfield_assignment): Use bit-field type if\n+\tpossible.  Use BYTES_BIG_ENDIAN.\n+\n 2007-10-08  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR middle-end/22156"}, {"sha": "f8b4470562e4d7f4089f2632172cb80598762620", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/088371ac5bd0beaf476ecb9b722ff9e3700aef34/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/088371ac5bd0beaf476ecb9b722ff9e3700aef34/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=088371ac5bd0beaf476ecb9b722ff9e3700aef34", "patch": "@@ -1275,7 +1275,7 @@ instantiate_element (struct sra_elt *elt)\n       elt->in_bitfld_block = 1;\n       elt->replacement = build3 (BIT_FIELD_REF, elt->type, var,\n \t\t\t\t DECL_SIZE (var),\n-\t\t\t\t BITS_BIG_ENDIAN\n+\t\t\t\t BYTES_BIG_ENDIAN\n \t\t\t\t ? size_binop (MINUS_EXPR,\n \t\t\t\t\t       TYPE_SIZE (elt->type),\n \t\t\t\t\t       DECL_SIZE (var))\n@@ -2140,7 +2140,7 @@ sra_build_assignment (tree dst, tree src)\n       cst2 = size_binop (PLUS_EXPR, TREE_OPERAND (src, 1),\n \t\t\t TREE_OPERAND (src, 2));\n \n-      if (BITS_BIG_ENDIAN)\n+      if (BYTES_BIG_ENDIAN)\n \t{\n \t  maxshift = size_binop (MINUS_EXPR, TYPE_SIZE (TREE_TYPE (var)), cst);\n \t  minshift = size_binop (MINUS_EXPR, TYPE_SIZE (TREE_TYPE (var)), cst2);\n@@ -2168,7 +2168,7 @@ sra_build_assignment (tree dst, tree src)\n       list = NULL;\n \n       cst2 = size_binop (MINUS_EXPR, maxshift, minshift);\n-      if (tree_int_cst_equal (cst2, TYPE_SIZE (utype)))\n+      if (TREE_INT_CST_LOW (cst2) == TYPE_PRECISION (utype))\n \t{\n \t  unsignedp = true;\n \t  mask = NULL_TREE;\n@@ -2322,7 +2322,7 @@ sra_build_bf_assignment (tree dst, tree src)\n \t\t     fold_convert (bitsizetype, TREE_OPERAND (dst, 1)),\n \t\t     cst);\n \n-  if (BITS_BIG_ENDIAN)\n+  if (BYTES_BIG_ENDIAN)\n     {\n       maxshift = size_binop (MINUS_EXPR, TYPE_SIZE (TREE_TYPE (var)), cst);\n       minshift = size_binop (MINUS_EXPR, TYPE_SIZE (TREE_TYPE (var)), cst2);\n@@ -2343,8 +2343,14 @@ sra_build_bf_assignment (tree dst, tree src)\n     utype = unsigned_type_for (type);\n \n   mask = build_int_cst_wide (utype, 1, 0);\n-  cst = int_const_binop (LSHIFT_EXPR, mask, maxshift, true);\n-  cst2 = int_const_binop (LSHIFT_EXPR, mask, minshift, true);\n+  if (TREE_INT_CST_LOW (maxshift) == TYPE_PRECISION (utype))\n+    cst = build_int_cst_wide (utype, 0, 0);\n+  else\n+    cst = int_const_binop (LSHIFT_EXPR, mask, maxshift, true);\n+  if (integer_zerop (minshift))\n+    cst2 = mask;\n+  else\n+    cst2 = int_const_binop (LSHIFT_EXPR, mask, minshift, true);\n   mask = int_const_binop (MINUS_EXPR, cst, cst2, true);\n   mask = fold_build1 (BIT_NOT_EXPR, utype, mask);\n \n@@ -2508,13 +2514,13 @@ sra_build_elt_assignment (struct sra_elt *elt, tree src)\n \t    {\n \t      list = NULL;\n \n-\t      if (!INTEGRAL_TYPE_P (TREE_TYPE (src))\n-\t\t  || !TYPE_UNSIGNED (TREE_TYPE (src)))\n+\t      if (!INTEGRAL_TYPE_P (TREE_TYPE (src)))\n \t\tsrc = fold_build1 (VIEW_CONVERT_EXPR,\n \t\t\t\t   lang_hooks.types.type_for_size\n \t\t\t\t   (TREE_INT_CST_LOW\n \t\t\t\t    (TYPE_SIZE (TREE_TYPE (src))),\n \t\t\t\t    1), src);\n+\t      gcc_assert (TYPE_UNSIGNED (TREE_TYPE (src)));\n \n \t      tmp = make_rename_temp (TREE_TYPE (src), \"SR\");\n \t      stmt = build_gimple_modify_stmt (tmp, src);\n@@ -2976,16 +2982,20 @@ sra_explode_bitfield_assignment (tree var, tree vpos, bool to_var,\n \n       if (fld->replacement)\n \t{\n-\t  tree infld, invar, st;\n+\t  tree infld, invar, st, type;\n \n \t  infld = fld->replacement;\n \n+\t  type = TREE_TYPE (infld);\n+\t  if (TYPE_PRECISION (type) != TREE_INT_CST_LOW (flen))\n+\t    type = lang_hooks.types.type_for_size (TREE_INT_CST_LOW (flen), 1);\n+\n \t  if (TREE_CODE (infld) == BIT_FIELD_REF)\n \t    {\n \t      fpos = size_binop (PLUS_EXPR, fpos, TREE_OPERAND (infld, 2));\n \t      infld = TREE_OPERAND (infld, 0);\n \t    }\n-\t  else if (BITS_BIG_ENDIAN && DECL_P (fld->element)\n+\t  else if (BYTES_BIG_ENDIAN && DECL_P (fld->element)\n \t\t   && !tree_int_cst_equal (TYPE_SIZE (TREE_TYPE (infld)),\n \t\t\t\t\t   DECL_SIZE (fld->element)))\n \t    {\n@@ -2995,19 +3005,15 @@ sra_explode_bitfield_assignment (tree var, tree vpos, bool to_var,\n \t\t\t\t DECL_SIZE (fld->element));\n \t    }\n \n-\t  infld = fold_build3 (BIT_FIELD_REF,\n-\t\t\t       lang_hooks.types.type_for_size\n-\t\t\t       (TREE_INT_CST_LOW (flen), 1),\n-\t\t\t       infld, flen, fpos);\n+\t  infld = fold_build3 (BIT_FIELD_REF, type, infld, flen, fpos);\n \t  BIT_FIELD_REF_UNSIGNED (infld) = 1;\n \n \t  invar = size_binop (MINUS_EXPR, flp.field_pos, bpos);\n \t  if (flp.overlap_pos)\n \t    invar = size_binop (PLUS_EXPR, invar, flp.overlap_pos);\n \t  invar = size_binop (PLUS_EXPR, invar, vpos);\n \n-\t  invar = fold_build3 (BIT_FIELD_REF, TREE_TYPE (infld),\n-\t\t\t       var, flen, invar);\n+\t  invar = fold_build3 (BIT_FIELD_REF, type, var, flen, invar);\n \t  BIT_FIELD_REF_UNSIGNED (invar) = 1;\n \n \t  if (to_var)"}]}