{"sha": "0ad23163d01cb104d39f9b21bad009812fb96042", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFkMjMxNjNkMDFjYjEwNGQzOWY5YjIxYmFkMDA5ODEyZmI5NjA0Mg==", "commit": {"author": {"name": "Abe Skolnik", "email": "a.skolnik@samsung.com", "date": "2015-08-04T03:53:10Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-08-04T03:53:10Z"}, "message": "tree-if-conv.c: Fix various typos in comments.\n\n\t* tree-if-conv.c: Fix various typos in comments.\n\t* tree-vect-stmts.c: Likewise.\n\nFrom-SVN: r226544", "tree": {"sha": "2989ce65ac7c8d1deed2ad7e58c2304afe62c22b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2989ce65ac7c8d1deed2ad7e58c2304afe62c22b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ad23163d01cb104d39f9b21bad009812fb96042", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ad23163d01cb104d39f9b21bad009812fb96042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ad23163d01cb104d39f9b21bad009812fb96042", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ad23163d01cb104d39f9b21bad009812fb96042/comments", "author": null, "committer": null, "parents": [{"sha": "f48495834f4cebdd3cbce0ae784a18a870335287", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f48495834f4cebdd3cbce0ae784a18a870335287", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f48495834f4cebdd3cbce0ae784a18a870335287"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "fdc4a7e4e1223d83aee9ec13941d42ee7a54b9fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad23163d01cb104d39f9b21bad009812fb96042/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad23163d01cb104d39f9b21bad009812fb96042/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ad23163d01cb104d39f9b21bad009812fb96042", "patch": "@@ -1,3 +1,8 @@\n+2015-08-03  Abe Skolnik  <a.skolnik@samsung.com>\n+\n+\t* tree-if-conv.c: Fix various typos in comments.\n+\t* tree-vect-stmts.c: Likewise.\n+\n 2015-08-04  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \tPR tree-optimization/67043"}, {"sha": "b5de1b2cdb6a12a40f17cd0627b172db6d8c034d", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad23163d01cb104d39f9b21bad009812fb96042/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad23163d01cb104d39f9b21bad009812fb96042/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=0ad23163d01cb104d39f9b21bad009812fb96042", "patch": "@@ -2283,8 +2283,8 @@ combine_blocks (struct loop *loop, bool any_mask_load_store)\n   ifc_bbs = NULL;\n }\n \n-/* Version LOOP before if-converting it, the original loop\n-   will be then if-converted, the new copy of the loop will not,\n+/* Version LOOP before if-converting it; the original loop\n+   will be if-converted, the new copy of the loop will not,\n    and the LOOP_VECTORIZED internal call will be guarding which\n    loop to execute.  The vectorizer pass will fold this\n    internal call into either true or false.  */\n@@ -2456,7 +2456,7 @@ ifcvt_walk_pattern_tree (tree var, vec<gimple> *defuse_list,\n   return;\n }\n \n-/* Returns true if STMT can be a root of bool pattern apllied\n+/* Returns true if STMT can be a root of bool pattern applied\n    by vectorizer.  */\n \n static bool\n@@ -2486,7 +2486,7 @@ stmt_is_root_of_bool_pattern (gimple stmt)\n   return false;\n }\n \n-/*  Traverse all statements in BB which correspondent to loop header to\n+/*  Traverse all statements in BB which correspond to loop header to\n     find out all statements which can start bool pattern applied by\n     vectorizer and convert multiple uses in it to conform pattern\n     restrictions.  Such case can occur if the same predicate is used both\n@@ -2567,7 +2567,7 @@ ifcvt_local_dce (basic_block bb)\n       gimple_set_plf (phi, GF_PLF_2, true);\n       worklist.safe_push (phi);\n     }\n-  /* Consider load/store statemnts, CALL and COND as live.  */\n+  /* Consider load/store statements, CALL and COND as live.  */\n   for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n     {\n       stmt = gsi_stmt (gsi);\n@@ -2655,7 +2655,7 @@ tree_if_conversion (struct loop *loop)\n   ifc_bbs = NULL;\n   bool any_mask_load_store = false;\n \n-  /* Set-up aggressive if-conversion for loops marked with simd pragma.  */\n+  /* Set up aggressive if-conversion for loops marked with simd pragma.  */\n   aggressive_if_conv = loop->force_vectorize;\n   /* Check either outer loop was marked with simd pragma.  */\n   if (!aggressive_if_conv)\n@@ -2687,7 +2687,7 @@ tree_if_conversion (struct loop *loop)\n   combine_blocks (loop, any_mask_load_store);\n \n   /* Delete dead predicate computations and repair tree correspondent\n-     to bool pattern to delete multiple uses of preidcates.  */\n+     to bool pattern to delete multiple uses of predicates.  */\n   if (aggressive_if_conv)\n     {\n       ifcvt_local_dce (loop->header);"}, {"sha": "33a7e0c499b4887dbbbe86f890173b5660aac461", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad23163d01cb104d39f9b21bad009812fb96042/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad23163d01cb104d39f9b21bad009812fb96042/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=0ad23163d01cb104d39f9b21bad009812fb96042", "patch": "@@ -7125,7 +7125,7 @@ vect_is_simple_cond (tree cond, gimple stmt, loop_vec_info loop_vinfo,\n \n    When STMT is vectorized as nested cycle, REDUC_DEF is the vector variable\n    to be used at REDUC_INDEX (in then clause if REDUC_INDEX is 1, and in\n-   else caluse if it is 2).\n+   else clause if it is 2).\n \n    Return FALSE if not a vectorizable STMT, TRUE otherwise.  */\n "}]}