{"sha": "d33606c30678cbccf0e95840e7dc48918ff1e21e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMzNjA2YzMwNjc4Y2JjY2YwZTk1ODQwZTdkYzQ4OTE4ZmYxZTIxZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-05-19T09:33:27Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-05-19T09:33:27Z"}, "message": "insn-notes.def (UPDATE_SJLJ_CONTEXT): New note.\n\n\t* insn-notes.def (UPDATE_SJLJ_CONTEXT): New note.\n\t* builtins.c (expand_builtin_update_setjmp_buf): Make global.\n\t(expand_stack_restore): Call record_new_stack_level.\n\t(expand_stack_save): Do not call do_pending_stack_adjust.\n\t* builtins.h (expand_builtin_update_setjmp_buf): Declare.\n\t* calls.c (expand_call): Call record_new_stack_level for alloca.\n\t* except.c (sjlj_mark_call_sites): Expand builtin_update_setjmp_buf\n\twherever a NOTE_INSN_UPDATE_SJLJ_CONTEXT note is present.\n\t(update_sjlj_context): New global function.\n\t* except.h (update_sjlj_context): Declare.\n\t* explow.c (record_new_stack_level): New global function.\n\t(allocate_dynamic_stack_space): Call record_new_stack_level.\n\t* explow.h (record_new_stack_level): Declare.\n\t* final.c (final_scan_insn): Deal with NOTE_INSN_UPDATE_SJLJ_CONTEXT.\n\t* cfgrtl.c (duplicate_insn_chain): Likewise.\n\nCo-Authored-By: Tristan Gingold <gingold@adacore.com>\n\nFrom-SVN: r223348", "tree": {"sha": "1a601dd44371c7e5dd197e955db6b56a8a9dd835", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a601dd44371c7e5dd197e955db6b56a8a9dd835"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d33606c30678cbccf0e95840e7dc48918ff1e21e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d33606c30678cbccf0e95840e7dc48918ff1e21e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d33606c30678cbccf0e95840e7dc48918ff1e21e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d33606c30678cbccf0e95840e7dc48918ff1e21e/comments", "author": null, "committer": null, "parents": [{"sha": "76e048a8c04e282b8eca52dedf529073ce235f38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e048a8c04e282b8eca52dedf529073ce235f38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76e048a8c04e282b8eca52dedf529073ce235f38"}], "stats": {"total": 102, "additions": 85, "deletions": 17}, "files": [{"sha": "46a45d4c15b3fe0b946161fc72971478027743d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33606c30678cbccf0e95840e7dc48918ff1e21e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33606c30678cbccf0e95840e7dc48918ff1e21e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d33606c30678cbccf0e95840e7dc48918ff1e21e", "patch": "@@ -1,3 +1,22 @@\n+2015-05-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\t    Tristan Gingold  <gingold@adacore.com>\n+\n+\t* insn-notes.def (UPDATE_SJLJ_CONTEXT): New note.\n+\t* builtins.c (expand_builtin_update_setjmp_buf): Make global.\n+\t(expand_stack_restore): Call record_new_stack_level.\n+\t(expand_stack_save): Do not call do_pending_stack_adjust.\n+\t* builtins.h (expand_builtin_update_setjmp_buf): Declare.\n+\t* calls.c (expand_call): Call record_new_stack_level for alloca.\n+\t* except.c (sjlj_mark_call_sites): Expand builtin_update_setjmp_buf\n+\twherever a NOTE_INSN_UPDATE_SJLJ_CONTEXT note is present.\n+\t(update_sjlj_context): New global function.\n+\t* except.h (update_sjlj_context): Declare.\n+\t* explow.c (record_new_stack_level): New global function.\n+\t(allocate_dynamic_stack_space): Call record_new_stack_level.\n+\t* explow.h (record_new_stack_level): Declare.\n+\t* final.c (final_scan_insn): Deal with NOTE_INSN_UPDATE_SJLJ_CONTEXT.\n+\t* cfgrtl.c (duplicate_insn_chain): Likewise.\n+\n 2015-05-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* calls.c: Always define STACK_GROWS_DOWNWARD as 0 or 1."}, {"sha": "030cc35f0746c1c9659b9690847979379074fec3", "filename": "gcc/builtins.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33606c30678cbccf0e95840e7dc48918ff1e21e/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33606c30678cbccf0e95840e7dc48918ff1e21e/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=d33606c30678cbccf0e95840e7dc48918ff1e21e", "patch": "@@ -120,7 +120,6 @@ static int apply_result_size (void);\n #if defined (HAVE_untyped_call) || defined (HAVE_untyped_return)\n static rtx result_vector (int, rtx);\n #endif\n-static void expand_builtin_update_setjmp_buf (rtx);\n static void expand_builtin_prefetch (tree);\n static rtx expand_builtin_apply_args (void);\n static rtx expand_builtin_apply_args_1 (void);\n@@ -1213,10 +1212,10 @@ expand_builtin_nonlocal_goto (tree exp)\n \n /* __builtin_update_setjmp_buf is passed a pointer to an array of five words\n    (not all will be used on all machines) that was passed to __builtin_setjmp.\n-   It updates the stack pointer in that block to correspond to the current\n-   stack pointer.  */\n+   It updates the stack pointer in that block to the current value.  This is\n+   also called directly by the SJLJ exception handling code.  */\n \n-static void\n+void\n expand_builtin_update_setjmp_buf (rtx buf_addr)\n {\n   machine_mode sa_mode = STACK_SAVEAREA_MODE (SAVE_NONLOCAL);\n@@ -5887,18 +5886,19 @@ expand_stack_restore (tree var)\n \n   prev = get_last_insn ();\n   emit_stack_restore (SAVE_BLOCK, sa);\n+\n+  record_new_stack_level ();\n+\n   fixup_args_size_notes (prev, get_last_insn (), 0);\n }\n \n-\n /* Emit code to save the current value of stack.  */\n \n static rtx\n expand_stack_save (void)\n {\n   rtx ret = NULL_RTX;\n \n-  do_pending_stack_adjust ();\n   emit_stack_save (SAVE_BLOCK, &ret);\n   return ret;\n }"}, {"sha": "5a0b57d265856043ec5cfdc37ec119165b631286", "filename": "gcc/builtins.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33606c30678cbccf0e95840e7dc48918ff1e21e/gcc%2Fbuiltins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33606c30678cbccf0e95840e7dc48918ff1e21e/gcc%2Fbuiltins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.h?ref=d33606c30678cbccf0e95840e7dc48918ff1e21e", "patch": "@@ -59,6 +59,7 @@ extern unsigned int get_pointer_alignment (tree);\n extern tree c_strlen (tree, int);\n extern void expand_builtin_setjmp_setup (rtx, rtx);\n extern void expand_builtin_setjmp_receiver (rtx);\n+extern void expand_builtin_update_setjmp_buf (rtx);\n extern tree mathfn_built_in (tree, enum built_in_function fn);\n extern rtx builtin_strncpy_read_str (void *, HOST_WIDE_INT, machine_mode);\n extern rtx builtin_memset_read_str (void *, HOST_WIDE_INT, machine_mode);"}, {"sha": "9cd488d175d1a9972c07df1234b4611531a57687", "filename": "gcc/calls.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33606c30678cbccf0e95840e7dc48918ff1e21e/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33606c30678cbccf0e95840e7dc48918ff1e21e/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=d33606c30678cbccf0e95840e7dc48918ff1e21e", "patch": "@@ -3649,12 +3649,9 @@ expand_call (tree exp, rtx target, int ignore)\n \t  stack_usage_map = initial_stack_usage_map;\n \t}\n \n-      /* If this was alloca, record the new stack level for nonlocal gotos.\n-\t Check for the handler slots since we might not have a save area\n-\t for non-local gotos.  */\n-\n-      if ((flags & ECF_MAY_BE_ALLOCA) && cfun->nonlocal_goto_save_area != 0)\n-\tupdate_nonlocal_goto_save_area ();\n+      /* If this was alloca, record the new stack level.  */\n+      if (flags & ECF_MAY_BE_ALLOCA)\n+\trecord_new_stack_level ();\n \n       /* Free up storage we no longer need.  */\n       for (i = 0; i < num_actuals; ++i)"}, {"sha": "466c6dace4282dfa0b394400e7f858f3d1b34de2", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33606c30678cbccf0e95840e7dc48918ff1e21e/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33606c30678cbccf0e95840e7dc48918ff1e21e/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=d33606c30678cbccf0e95840e7dc48918ff1e21e", "patch": "@@ -4209,6 +4209,7 @@ duplicate_insn_chain (rtx_insn *from, rtx_insn *to)\n \t      break;\n \n \t    case NOTE_INSN_EPILOGUE_BEG:\n+\t    case NOTE_INSN_UPDATE_SJLJ_CONTEXT:\n \t      emit_note_copy (as_a <rtx_note *> (insn));\n \t      break;\n "}, {"sha": "673e9c3adcbb19821de425e1cacefa47a1e3edd8", "filename": "gcc/except.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33606c30678cbccf0e95840e7dc48918ff1e21e/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33606c30678cbccf0e95840e7dc48918ff1e21e/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=d33606c30678cbccf0e95840e7dc48918ff1e21e", "patch": "@@ -1126,6 +1126,21 @@ sjlj_mark_call_sites (void)\n       if (LABEL_P (insn))\n \tlast_call_site = -2;\n \n+      /* If the function allocates dynamic stack space, the context must\n+\t be updated after every allocation/deallocation accordingly.  */\n+      if (NOTE_P (insn) && NOTE_KIND (insn) == NOTE_INSN_UPDATE_SJLJ_CONTEXT)\n+\t{\n+\t  rtx buf_addr;\n+\n+\t  start_sequence ();\n+\t  buf_addr = plus_constant (Pmode, XEXP (crtl->eh.sjlj_fc, 0),\n+\t\t\t\t    sjlj_fc_jbuf_ofs);\n+\t  expand_builtin_update_setjmp_buf (buf_addr);\n+\t  p = get_insns ();\n+\t  end_sequence ();\n+\t  emit_insn_before (p, insn);\n+\t}\n+\n       if (! INSN_P (insn))\n \tcontinue;\n \n@@ -1495,6 +1510,18 @@ sjlj_build_landing_pads (void)\n   sjlj_lp_call_site_index.release ();\n }\n \n+/* Update the sjlj function context.  This function should be called\n+   whenever we allocate or deallocate dynamic stack space.  */\n+\n+void\n+update_sjlj_context (void)\n+{\n+  if (!flag_exceptions)\n+    return;\n+\n+  emit_note (NOTE_INSN_UPDATE_SJLJ_CONTEXT);\n+}\n+\n /* After initial rtl generation, call back to finish generating\n    exception support code.  */\n "}, {"sha": "ca26c4cb3387b44b635280a87d39c914b5a31936", "filename": "gcc/except.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33606c30678cbccf0e95840e7dc48918ff1e21e/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33606c30678cbccf0e95840e7dc48918ff1e21e/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=d33606c30678cbccf0e95840e7dc48918ff1e21e", "patch": "@@ -252,6 +252,7 @@ extern hash_map<void *, void *> *duplicate_eh_regions\n   (struct function *, eh_region, int, duplicate_eh_regions_map, void *);\n \n extern void sjlj_emit_function_exit_after (rtx_insn *);\n+extern void update_sjlj_context (void);\n \n extern eh_region gen_eh_region_cleanup (eh_region);\n extern eh_region gen_eh_region_try (eh_region);"}, {"sha": "e7768aeb77db3bd6c0851899c913c43ca7dac8a4", "filename": "gcc/explow.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33606c30678cbccf0e95840e7dc48918ff1e21e/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33606c30678cbccf0e95840e7dc48918ff1e21e/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=d33606c30678cbccf0e95840e7dc48918ff1e21e", "patch": "@@ -1096,8 +1096,8 @@ emit_stack_restore (enum save_level save_level, rtx sa)\n }\n \n /* Invoke emit_stack_save on the nonlocal_goto_save_area for the current\n-   function.  This function should be called whenever we allocate or\n-   deallocate dynamic stack space.  */\n+   function.  This should be called whenever we allocate or deallocate\n+   dynamic stack space.  */\n \n void\n update_nonlocal_goto_save_area (void)\n@@ -1117,6 +1117,21 @@ update_nonlocal_goto_save_area (void)\n \n   emit_stack_save (SAVE_NONLOCAL, &r_save);\n }\n+\n+/* Record a new stack level for the current function.  This should be called\n+   whenever we allocate or deallocate dynamic stack space.  */\n+\n+void\n+record_new_stack_level (void)\n+{\n+  /* Record the new stack level for nonlocal gotos.  */\n+  if (cfun->nonlocal_goto_save_area)\n+    update_nonlocal_goto_save_area ();\n+ \n+  /* Record the new stack level for SJLJ exceptions.  */\n+  if (targetm_common.except_unwind_info (&global_options) == UI_SJLJ)\n+    update_sjlj_context ();\n+}\n \f\n /* Return an rtx representing the address of an area of memory dynamically\n    pushed on the stack.\n@@ -1479,9 +1494,8 @@ allocate_dynamic_stack_space (rtx size, unsigned size_align,\n   /* Now that we've committed to a return value, mark its alignment.  */\n   mark_reg_pointer (target, required_align);\n \n-  /* Record the new stack level for nonlocal gotos.  */\n-  if (cfun->nonlocal_goto_save_area != 0)\n-    update_nonlocal_goto_save_area ();\n+  /* Record the new stack level.  */\n+  record_new_stack_level ();\n \n   return target;\n }"}, {"sha": "94613de5ab25edacd203065e2a50f6c6f40de2c2", "filename": "gcc/explow.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33606c30678cbccf0e95840e7dc48918ff1e21e/gcc%2Fexplow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33606c30678cbccf0e95840e7dc48918ff1e21e/gcc%2Fexplow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.h?ref=d33606c30678cbccf0e95840e7dc48918ff1e21e", "patch": "@@ -78,6 +78,9 @@ extern void emit_stack_restore (enum save_level, rtx);\n /* Invoke emit_stack_save for the nonlocal_goto_save_area.  */\n extern void update_nonlocal_goto_save_area (void);\n \n+/* Record a new stack level.  */\n+extern void record_new_stack_level (void);\n+\n /* Allocate some space on the stack dynamically and return its address.  */\n extern rtx allocate_dynamic_stack_space (rtx, unsigned, unsigned, bool);\n "}, {"sha": "f0585ca8ecf1239f4ef0c909545c1835992641ca", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33606c30678cbccf0e95840e7dc48918ff1e21e/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33606c30678cbccf0e95840e7dc48918ff1e21e/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=d33606c30678cbccf0e95840e7dc48918ff1e21e", "patch": "@@ -2215,6 +2215,7 @@ final_scan_insn (rtx_insn *insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n       switch (NOTE_KIND (insn))\n \t{\n \tcase NOTE_INSN_DELETED:\n+\tcase NOTE_INSN_UPDATE_SJLJ_CONTEXT:\n \t  break;\n \n \tcase NOTE_INSN_SWITCH_TEXT_SECTIONS:"}, {"sha": "9e86ce5063db8724f028763115b7d45b2295b974", "filename": "gcc/insn-notes.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d33606c30678cbccf0e95840e7dc48918ff1e21e/gcc%2Finsn-notes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d33606c30678cbccf0e95840e7dc48918ff1e21e/gcc%2Finsn-notes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finsn-notes.def?ref=d33606c30678cbccf0e95840e7dc48918ff1e21e", "patch": "@@ -87,4 +87,8 @@ INSN_NOTE (CFI)\n    label that should be emitted.  */\n INSN_NOTE (CFI_LABEL)\n \n+/* This note indicates that the function context must be updated if\n+   the Setjmp/Longjmp exception mechanism is used.  */\n+INSN_NOTE (UPDATE_SJLJ_CONTEXT)\n+\n #undef INSN_NOTE"}]}