{"sha": "c8abc2058e96dd12454078d66be9982dfebfd154", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhhYmMyMDU4ZTk2ZGQxMjQ1NDA3OGQ2NmJlOTk4MmRmZWJmZDE1NA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-29T00:16:42Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-29T00:16:42Z"}, "message": "Daily bump.", "tree": {"sha": "78b62ee71e8943beae7abd922ac9e7d0e4548d5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78b62ee71e8943beae7abd922ac9e7d0e4548d5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8abc2058e96dd12454078d66be9982dfebfd154", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8abc2058e96dd12454078d66be9982dfebfd154", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8abc2058e96dd12454078d66be9982dfebfd154", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8abc2058e96dd12454078d66be9982dfebfd154/comments", "author": null, "committer": null, "parents": [{"sha": "7c6b354b92b38f31cd2399fbdbc9d6f837881480", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c6b354b92b38f31cd2399fbdbc9d6f837881480", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c6b354b92b38f31cd2399fbdbc9d6f837881480"}], "stats": {"total": 478, "additions": 477, "deletions": 1}, "files": [{"sha": "79a767c68ed9bbf089d2b4b25a9d0a0b0026da18", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8abc2058e96dd12454078d66be9982dfebfd154/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8abc2058e96dd12454078d66be9982dfebfd154/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=c8abc2058e96dd12454078d66be9982dfebfd154", "patch": "@@ -1,3 +1,8 @@\n+2021-06-28  Martin Liska  <mliska@suse.cz>\n+\n+\t* mklog.py: Handle correctly long lines.\n+\t* test_mklog.py: Test it.\n+\n 2021-06-23  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-git-customization.sh: Use the new wrapper."}, {"sha": "f8e3401b9947cf0278f5a15d64900beb60da3e3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8abc2058e96dd12454078d66be9982dfebfd154/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8abc2058e96dd12454078d66be9982dfebfd154/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8abc2058e96dd12454078d66be9982dfebfd154", "patch": "@@ -1,3 +1,212 @@\n+2021-06-28  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\t* config/bpf/bpf.c (bpf_expand_prologue): Do not mark insns as\n+\tframe related.\n+\t(bpf_expand_epilogue): Likewise.\n+\t* config/bpf/bpf.h (DWARF2_FRAME_INFO): Define to 0.\n+\tDo not define DBX_DEBUGGING_INFO.\n+\n+2021-06-28  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\t* doc/invoke.texi: Document the CTF and BTF debug info options.\n+\n+2021-06-28  Indu Bhagat  <indu.bhagat@oracle.com>\n+\t    David Faust  <david.faust@oracle.com>\n+\t    Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\t    Weimin Pan  <weimin.pan@oracle.com>\n+\n+\t* Makefile.in: Add ctfc.*, ctfout.c and btfout.c files to\n+\tGTFILES.  Add new object files.\n+\t* common.opt: Add CTF and BTF debug info options.\n+\t* btfout.c: New file.\n+\t* ctfc.c: Likewise.\n+\t* ctfc.h: Likewise.\n+\t* ctfout.c: Likewise.\n+\t* dwarf2ctf.c: Likewise.\n+\t* dwarf2ctf.h: Likewise.\n+\t* dwarf2cfi.c (dwarf2out_do_frame): Acknowledge CTF_DEBUG and\n+\tBTF_DEBUG.\n+\t* dwarf2out.c (dwarf2out_source_line): Likewise.\n+\t(dwarf2out_finish): Skip emitting DWARF if CTF or BTF are to\n+\tbe generated.\n+\t(debug_format_do_cu): New function.\n+\t(dwarf2out_early_finish): Traverse DIEs and emit CTF/BTF for\n+\tthem if\trequested.\n+\tInclude dwarf2ctf.c.\n+\t* final.c (dwarf2_debug_info_emitted_p): Acknowledge DWARF-based debug\n+\tformats.\n+\t* flag-types.h (enum debug_info_type): Add CTF_DEBUG and BTF_DEBUG.\n+\t(CTF_DEBUG): New bitmask.\n+\t(BTF_DEBUG): Likewise.\n+\t(enum ctf_debug_info_levels): New enum.\n+\t* gengtype.c (open_base_files): Handle ctfc.h.\n+\t(main): Handle uint32_t type.\n+\t* flags.h (btf_debuginfo_p): New definition.\n+\t(dwarf_based_debuginfo_p): Likewise.\n+\t* opts.c (debug_type_names): Add entries for CTF and BTF.\n+\t(btf_debuginfo_p): New function.\n+\t(dwarf_based_debuginfo_p): Likewise.\n+\t(common_handle_option): Handle -gctfN and -gbtf options.\n+\t(set_debug_level): Set CTF_DEBUG, BTF_DEBUG whenever appropriate.\n+\t* toplev.c (process_options): Inform the user and ignore -gctfLEVEL if\n+\tfrontend is not C.\n+\n+2021-06-28  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* dwarf2out.c (AT_class): Function is no longer static.\n+\t(AT_int): Likewise.\n+\t(AT_unsigned): Likewise.\n+\t(AT_loc): Likewise.\n+\t(get_AT): Likewise.\n+\t(get_AT_string): Likewise.\n+\t(get_AT_flag): Likewise.\n+\t(get_AT_unsigned): Likewise.\n+\t(get_AT_ref): Likewise.\n+\t(new_die_raw): Likewise.\n+\t(lookup_decl_die): Likewise.\n+\t(base_type_die): Likewise.\n+\t(add_name_attribute): Likewise.\n+\t(add_AT_int): Likewise.\n+\t(add_AT_unsigned): Likewise.\n+\t(add_AT_loc): Likewise.\n+\t(dw_get_die_tag): New function.\n+\t(dw_get_die_child): Likewise.\n+\t(dw_get_die_sib): Likewise.\n+\t(struct dwarf_file_data): Move from here to dwarf2out.h\n+\t(struct dw_attr_struct): Likewise.\n+\t* dwarf2out.h: Analogous changes.\n+\n+2021-06-28  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/93385\n+\t* ipa-param-manipulation.h (class ipa_param_body_adjustments): New\n+\tmembers m_dead_stmts and m_dead_ssas.\n+\t* ipa-param-manipulation.c\n+\t(ipa_param_body_adjustments::mark_dead_statements): New function.\n+\t(ipa_param_body_adjustments::common_initialization): Call it on\n+\tall removed but not split parameters.\n+\t(ipa_param_body_adjustments::ipa_param_body_adjustments): Initialize\n+\tnew mwmbers.\n+\t(ipa_param_body_adjustments::modify_call_stmt): Remove arguments that\n+\tare dead.\n+\t* tree-inline.c (remap_gimple_stmt): Do not copy dead statements, reset\n+\tdead debug statements.\n+\t(copy_phis_for_bb): Do not copy dead PHI nodes.\n+\n+2021-06-28  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/93385\n+\t* symtab-clones.h (clone_info): Removed member param_adjustments.\n+\t* ipa-param-manipulation.h: Adjust initial comment to reflect how we\n+\tdeal with pass-through splits now.\n+\t(ipa_param_performed_split): Removed.\n+\t(ipa_param_adjustments::modify_call): Adjusted parameters.\n+\t(class ipa_param_body_adjustments): Adjusted parameters of\n+\tregister_replacement, modify_gimple_stmt and modify_call_stmt.\n+\t(ipa_verify_edge_has_no_modifications): Declare.\n+\t(ipa_edge_modifications_finalize): Declare.\n+\t* cgraph.c (cgraph_edge::redirect_call_stmt_to_callee): Remove\n+\tperformed_splits processing, pas only edge to padjs->modify_call,\n+\tcheck that call arguments were not modified if they should not have\n+\tbeen.\n+\t* cgraphclones.c (cgraph_node::create_clone): Do not copy performed\n+\tsplits.\n+\t* ipa-param-manipulation.c (struct pass_through_split_map): New type.\n+\t(ipa_edge_modification_info): Likewise.\n+\t(ipa_edge_modification_sum): Likewise.\n+\t(ipa_edge_modifications): New edge summary.\n+\t(ipa_verify_edge_has_no_modifications): New function.\n+\t(transitive_split_p): Removed.\n+\t(transitive_split_map): Likewise.\n+\t(init_transitive_splits): Likewise.\n+\t(ipa_param_adjustments::modify_call): Adjusted to use the new edge\n+\tsummary instead of performed_splits.\n+\t(ipa_param_body_adjustments::register_replacement): Drop dummy\n+\tparameter, set base_index of the created ipa_param_body_replacement.\n+\t(phi_arg_will_live_p): New function.\n+\t(ipa_param_body_adjustments::common_initialization): Do not create\n+\tIPA_SRA dummy decls.\n+\t(simple_tree_swap_info): Removed.\n+\t(remap_split_decl_to_dummy): Likewise.\n+\t(record_argument_state_1): New function.\n+\t(record_argument_state): Likewise.\n+\t(ipa_param_body_adjustments::modify_call_stmt): New parameter\n+\torig_stmt.  Do not work with dummy decls, save necessary info about\n+\tchanges to ipa_edge_modifications.\n+\t(ipa_param_body_adjustments::modify_gimple_stmt): New parameter\n+\torig_stmt, pass it to modify_call_stmt.\n+\t(ipa_param_body_adjustments::modify_cfun_body): Adjust call to\n+\tmodify_gimple_stmt.\n+\t(ipa_edge_modifications_finalize): New function.\n+\t* tree-inline.c (remap_gimple_stmt): Pass original statement to\n+\tmodify_gimple_stmt.\n+\t(copy_phis_for_bb): Do not copy dead PHI nodes.\n+\t(expand_call_inline): Do not remap performed_splits.\n+\t(update_clone_info): Likewise.\n+\t* toplev.c: Include ipa-param-manipulation.h.\n+\t(toplev::finalize): Call ipa_edge_modifications_finalize.\n+\n+2021-06-28  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* tree-ssa-phiopt.c (replace_phi_edge_with_variable): Duplicate range\n+\tinfo if we're the only things setting the target PHI.\n+\t(value_replacement): Don't duplicate range here.\n+\t(minmax_replacement): Likewise.\n+\n+2021-06-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101229\n+\t* gimple-walk.c (gimple_walk_op): Handle PHIs.\n+\n+2021-06-28  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/v850/v850.c (construct_dispose_instruction): Allocate\n+\ta bigger buffer.\n+\t(construct_prepare_instruction): Likewise.\n+\n+2021-06-28  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/v850/v850.c (v850_option_override): Build default\n+\ttarget node.\n+\t(v850_can_inline_p): New.  Allow MASK_PROLOG_FUNCTION to be\n+\tignored for inlining.\n+\t(TARGET_CAN_INLINE_P): New.\n+\n+2021-06-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101207\n+\t* tree-vect-slp.c (vect_optimize_slp): Do BB reduction\n+\tpermute eliding for load permutations properly.\n+\n+2021-06-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101173\n+\t* gimple-loop-interchange.cc\n+\t(tree_loop_interchange::valid_data_dependences): Disallow outer\n+\tloop dependence distance of zero.\n+\n+2021-06-28  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/100648\n+\t* config/i386/sse.md (*avx_cmp<mode>3_lt): New\n+\tdefine_insn_and_split.\n+\t(*avx_cmp<mode>3_ltint): Ditto.\n+\t(*avx2_pcmp<mode>3_3): Ditto.\n+\t(*avx2_pcmp<mode>3_4): Ditto.\n+\t(*avx2_pcmp<mode>3_5): Ditto.\n+\n+2021-06-28  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/i386-builtin.def (IX86_BUILTIN_BLENDVPD256,\n+\tIX86_BUILTIN_BLENDVPS256, IX86_BUILTIN_PBLENDVB256,\n+\tIX86_BUILTIN_BLENDVPD, IX86_BUILTIN_BLENDVPS,\n+\tIX86_BUILTIN_PBLENDVB128): Replace icode with\n+\tCODE_FOR_nothing.\n+\t* config/i386/i386.c (ix86_gimple_fold_builtin): Fold blendv\n+\tbuiltins.\n+\t* config/i386/sse.md (*<sse4_1_avx2>_pblendvb_lt_subreg_not):\n+\tNew pre_reload splitter.\n+\n 2021-06-27  Andrew Pinski  <apinski@marvell.com>\n \n \tPR middle-end/101230"}, {"sha": "f814e09f8dd6337d532a4e7c116d87facdfd20a7", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8abc2058e96dd12454078d66be9982dfebfd154/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8abc2058e96dd12454078d66be9982dfebfd154/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=c8abc2058e96dd12454078d66be9982dfebfd154", "patch": "@@ -1 +1 @@\n-20210628\n+20210629"}, {"sha": "0841a935bac178d1b7b159aa336569b1a1095439", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8abc2058e96dd12454078d66be9982dfebfd154/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8abc2058e96dd12454078d66be9982dfebfd154/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c8abc2058e96dd12454078d66be9982dfebfd154", "patch": "@@ -1,3 +1,10 @@\n+2021-06-28  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc-interface/trans.c (Handled_Sequence_Of_Statements_to_gnu):\n+\tReplace TREE_NO_WARNING with suppress_warning.\n+\t(gnat_gimplify_expr): Same.\n+\t* gcc-interface/utils.c (gnat_pushdecl): Same.\n+\n 2021-06-21  Gary Dismukes  <dismukes@adacore.com>\n \n \t* checks.adb (Selected_Range_Checks): In the case of a"}, {"sha": "cc0eb11deb52161b84fadfe9b231b793484f4e7a", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8abc2058e96dd12454078d66be9982dfebfd154/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8abc2058e96dd12454078d66be9982dfebfd154/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=c8abc2058e96dd12454078d66be9982dfebfd154", "patch": "@@ -1,3 +1,15 @@\n+2021-06-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.h (byte_offset_t): New typedef.\n+\t* store.cc (bit_range::dump_to_pp): Dump as a byte range if\n+\tpossible.\n+\t(bit_range::as_byte_range): New.\n+\t(byte_range::dump_to_pp): New.\n+\t* store.h (class byte_range): New forward decl.\n+\t(struct bit_range): Add comment.\n+\t(bit_range::as_byte_range): New decl.\n+\t(struct byte_range): New.\n+\n 2021-06-22  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/101143"}, {"sha": "f9c97b023c95911ca78383e44502a1d92ae0c119", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8abc2058e96dd12454078d66be9982dfebfd154/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8abc2058e96dd12454078d66be9982dfebfd154/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c8abc2058e96dd12454078d66be9982dfebfd154", "patch": "@@ -1,3 +1,20 @@\n+2021-06-28  Martin Sebor  <msebor@redhat.com>\n+\n+\t* trans-array.c (trans_array_constructor): Replace direct uses\n+\tof TREE_NO_WARNING with warning_suppressed_p, and suppress_warning.\n+\t* trans-decl.c (gfc_build_qualified_array): Same.\n+\t(gfc_build_dummy_array_decl): Same.\n+\t(generate_local_decl): Same.\n+\t(gfc_generate_function_code): Same.\n+\t* trans-openmp.c (gfc_omp_clause_default_ctor): Same.\n+\t(gfc_omp_clause_copy_ctor): Same.\n+\t* trans-types.c (get_dtype_type_node): Same.\n+\t(gfc_get_desc_dim_type): Same.\n+\t(gfc_get_array_descriptor_base): Same.\n+\t(gfc_get_caf_vector_type): Same.\n+\t(gfc_get_caf_reference_type): Same.\n+\t* trans.c (gfc_create_var_np): Same.\n+\n 2021-06-23  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* dump-parse-tree.c (show_omp_clauses): Fix enum type used"}, {"sha": "bb8404535b75d1076d3d74fb22233efced2da372", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8abc2058e96dd12454078d66be9982dfebfd154/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8abc2058e96dd12454078d66be9982dfebfd154/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=c8abc2058e96dd12454078d66be9982dfebfd154", "patch": "@@ -1,3 +1,14 @@\n+2021-06-28  Martin Sebor  <msebor@redhat.com>\n+\n+\t* objc-act.c (objc_maybe_build_modify_expr): Replace direct uses\n+\tof TREE_NO_WARNING with warning_suppressed_p, and suppress_warning.\n+\t(objc_build_incr_expr_for_property_ref): Same.\n+\t(objc_build_struct): Same.\n+\t(synth_module_prologue): Same.\n+\t* objc-gnu-runtime-abi-01.c (gnu_runtime_01_initialize): Same.\n+\t* objc-next-runtime-abi-01.c (next_runtime_01_initialize): Same.\n+\t* objc-next-runtime-abi-02.c (next_runtime_02_initialize): Same.\n+\n 2021-06-08  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* Make-lang.in (cc1-obj-checksum.c): Check previous"}, {"sha": "a80c43876993cc971687a3682781c42b73079899", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8abc2058e96dd12454078d66be9982dfebfd154/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8abc2058e96dd12454078d66be9982dfebfd154/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c8abc2058e96dd12454078d66be9982dfebfd154", "patch": "@@ -1,3 +1,150 @@\n+2021-06-28  Martin Sebor  <msebor@redhat.com>\n+\n+\t* g++.dg/uninit-pr74762.C: New test.\n+\t* g++.dg/warn/uninit-pr74765.C: Same.\n+\n+2021-06-28  Indu Bhagat  <indu.bhagat@oracle.com>\n+\t    David Faust  <david.faust@oracle.com>\n+\n+\t* lib/gcc-dg.exp (gcc-dg-frontend-supports-ctf): New procedure.\n+\t(gcc-dg-debug-runtest): Add -gctf support.\n+\t* gcc.dg/debug/btf/btf-1.c: New test.\n+\t* gcc.dg/debug/btf/btf-2.c: Likewise.\n+\t* gcc.dg/debug/btf/btf-anonymous-struct-1.c: Likewise.\n+\t* gcc.dg/debug/btf/btf-anonymous-union-1.c: Likewise.\n+\t* gcc.dg/debug/btf/btf-array-1.c: Likewise.\n+\t* gcc.dg/debug/btf/btf-bitfields-1.c: Likewise.\n+\t* gcc.dg/debug/btf/btf-bitfields-2.c: Likewise.\n+\t* gcc.dg/debug/btf/btf-bitfields-3.c: Likewise.\n+\t* gcc.dg/debug/btf/btf-cvr-quals-1.c: Likewise.\n+\t* gcc.dg/debug/btf/btf-enum-1.c: Likewise.\n+\t* gcc.dg/debug/btf/btf-forward-1.c: Likewise.\n+\t* gcc.dg/debug/btf/btf-function-1.c: Likewise.\n+\t* gcc.dg/debug/btf/btf-function-2.c: Likewise.\n+\t* gcc.dg/debug/btf/btf-int-1.c: Likewise.\n+\t* gcc.dg/debug/btf/btf-pointers-1.c: Likewise.\n+\t* gcc.dg/debug/btf/btf-struct-1.c: Likewise.\n+\t* gcc.dg/debug/btf/btf-typedef-1.c: Likewise.\n+\t* gcc.dg/debug/btf/btf-union-1.c: Likewise.\n+\t* gcc.dg/debug/btf/btf-variables-1.c: Likewise.\n+\t* gcc.dg/debug/btf/btf.exp: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-2.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-anonymous-struct-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-anonymous-union-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-array-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-array-2.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-array-3.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-array-4.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-attr-mode-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-attr-used-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-bitfields-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-bitfields-2.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-bitfields-3.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-bitfields-4.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-complex-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-cvr-quals-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-cvr-quals-2.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-cvr-quals-3.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-cvr-quals-4.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-enum-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-enum-2.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-file-scope-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-float-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-forward-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-forward-2.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-func-index-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-function-pointers-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-function-pointers-2.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-function-pointers-3.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-functions-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-int-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-objt-index-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-pointers-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-pointers-2.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-preamble-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-skip-types-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-skip-types-2.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-skip-types-3.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-skip-types-4.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-skip-types-5.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-skip-types-6.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-str-table-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-struct-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-struct-2.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-struct-array-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-struct-pointer-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-struct-pointer-2.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-typedef-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-typedef-2.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-typedef-3.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-typedef-struct-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-typedef-struct-2.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-typedef-struct-3.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-union-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-variables-1.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf-variables-2.c: Likewise.\n+\t* gcc.dg/debug/ctf/ctf.exp: Likewise.\n+\t* gcc.dg/debug/btf/btf-bitfields-4.c: New file.\n+\t* gcc.dg/debug/btf/btf-datasec-1.c: New file.\n+\t* gcc.dg/debug/btf/btf-function-3.c: New file.\n+\t* gcc.dg/debug/btf/btf-pointers-2.c: New file.\n+\t* gcc.dg/debug/btf/btf-struct-2.c: New file.\n+\t* gcc.dg/debug/btf/btf-variables-2.c: New file.\n+\t* gcc.dg/debug/btf/btf-variables-3.c: New file.\n+\t* gcc.dg/debug/ctf/ctf-debug-1.c: New file.\n+\t* gcc.dg/debug/ctf/ctf-debug-2.c: New file.\n+\t* gcc.dg/debug/ctf/ctf-function-pointers-4.c: New file.\n+\t* gcc.dg/debug/ctf/ctf-skip-types-7.c: New file.\n+\t* gcc.dg/debug/ctf/ctf-skip-types-8.c: New file.\n+\t* gcc.dg/debug/ctf/ctf-struct-array-2.c: New file.\n+\n+2021-06-28  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\t* lib/gcc-dg.exp (gcc-dg-target-supports-debug-format): New procedure.\n+\n+2021-06-28  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/93385\n+\t* gcc.dg/ipa/pr93385.c: New test.\n+\t* gcc.dg/ipa/ipa-sra-23.c: Likewise.\n+\t* gcc.dg/ipa/ipa-sra-24.c: Likewise.\n+\t* g++.dg/ipa/ipa-sra-4.C: Likewise.\n+\n+2021-06-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101229\n+\t* gcc.dg/torture/pr101229.c: New testcase.\n+\n+2021-06-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101207\n+\t* gcc.dg/vect/bb-slp-pr101207.c: New testcase.\n+\n+2021-06-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101173\n+\t* gcc.dg/torture/pr101173.c: New testcase.\n+\n+2021-06-28  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/100648\n+\t* g++.target/i386/avx2-pr54700-2.C: Adjust testcase.\n+\t* g++.target/i386/avx512vl-pr54700-1a.C: New test.\n+\t* g++.target/i386/avx512vl-pr54700-1b.C: New test.\n+\t* g++.target/i386/avx512vl-pr54700-2a.C: New test.\n+\t* g++.target/i386/avx512vl-pr54700-2b.C: New test.\n+\t* gcc.target/i386/avx512vl-pr100648.c: New test.\n+\t* gcc.target/i386/avx512vl-blendv-1.c: New test.\n+\t* gcc.target/i386/avx512vl-blendv-2.c: New test.\n+\n+2021-06-28  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/funcspec-8.c: Replace\n+\t__builtin_ia32_blendvpd with  __builtin_ia32_roundps_az.\n+\t* gcc.target/i386/blendv-1.c: New test.\n+\t* gcc.target/i386/blendv-2.c: New test.\n+\n 2021-06-27  Andrew Pinski  <apinski@marvell.com>\n \n \t* gcc.dg/torture/pr101230-1.c: New test."}, {"sha": "78018468e4e2fff360071ae345b41b2bf05a3f76", "filename": "include/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8abc2058e96dd12454078d66be9982dfebfd154/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8abc2058e96dd12454078d66be9982dfebfd154/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=c8abc2058e96dd12454078d66be9982dfebfd154", "patch": "@@ -1,3 +1,11 @@\n+2021-06-28  Indu Bhagat  <indu.bhagat@oracle.com>\n+\t    David Faust  <david.faust@oracle.com>\n+\t    Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\t    Weimin Pan  <weimin.pan@oracle.com>\n+\n+\t* ctf.h: New file.\n+\t* btf.h: Likewise.\n+\n 2021-05-06  Tom Tromey  <tom@tromey.com>\n \n \t* hashtab.h (htab_eq_string): Declare."}, {"sha": "e5bdc2945e66fad72944baf9619b296a84a7a82e", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8abc2058e96dd12454078d66be9982dfebfd154/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8abc2058e96dd12454078d66be9982dfebfd154/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=c8abc2058e96dd12454078d66be9982dfebfd154", "patch": "@@ -1,3 +1,13 @@\n+2021-06-28  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n+\n+\t* xcoff.c (SSUBTYP_DWRNGES): New define.\n+\t(xcoff_add): Use correct XCOFF DWARF section subtype\n+\tfor DEBUG_RANGES. Remove lineoff workaround.\n+\tAdjust base_address.\n+\t(xcoff_initialize_syminfo): Adapt to new base_address.\n+\t(xcoff_lookup_pc): Likewise.\n+\t(xcoff_initialize_fileline): Likewise.\n+\n 2021-05-03  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR bootstrap/99703"}, {"sha": "f28dfc72d34d105df57209c9073efc2aff83980f", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8abc2058e96dd12454078d66be9982dfebfd154/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8abc2058e96dd12454078d66be9982dfebfd154/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=c8abc2058e96dd12454078d66be9982dfebfd154", "patch": "@@ -1,3 +1,8 @@\n+2021-06-28  Martin Sebor  <msebor@redhat.com>\n+\n+\t* libcp1plugin.cc (record_decl_address): Replace a direct use\n+\tof TREE_NO_WARNING with suppress_warning.\n+\n 2021-05-05  Tom Tromey  <tom@tromey.com>\n \n \t* compiler.cc (make_regexp): Take const std::string."}, {"sha": "faace624b3f43c76cf642a4bbb47c4db4966af08", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8abc2058e96dd12454078d66be9982dfebfd154/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8abc2058e96dd12454078d66be9982dfebfd154/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=c8abc2058e96dd12454078d66be9982dfebfd154", "patch": "@@ -1,3 +1,15 @@\n+2021-06-28  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\t* simple-object.c (handle_lto_debug_sections): Copy over .BTF section.\n+\n+2021-06-28  Indu Bhagat  <indu.bhagat@oracle.com>\n+\t    David Faust  <david.faust@oracle.com>\n+\t    Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\t    Weimin Pan  <weimin.pan@oracle.com>\n+\n+\t* simple-object.c (handle_lto_debug_sections): Copy over .ctf\n+\tsections.\n+\n 2021-06-05  John David Anglin  <danglin@gcc.gnu.org>\n \n \tPR target/100734"}, {"sha": "91f804b1e53e2260a116be4a7adfc01c095f923c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8abc2058e96dd12454078d66be9982dfebfd154/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8abc2058e96dd12454078d66be9982dfebfd154/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c8abc2058e96dd12454078d66be9982dfebfd154", "patch": "@@ -1,3 +1,36 @@\n+2021-06-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/streambuf.tcc (__copy_streambufs_eof): Remove\n+\texplicit instantiation declarations.\n+\t* src/c++11/streambuf-inst.cc (__copy_streambufs_eof): Remove\n+\texplicit instantiation definitions.\n+\n+2021-06-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/97088\n+\t* testsuite/17_intro/names.cc: Fix #if condition for names used\n+\tby newlib headers.\n+\n+2021-06-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/101236\n+\t* include/bits/unique_ptr.h (unique_ptr<T[], D>::operator[]):\n+\tFail gracefully if element_type is incomplete.\n+\t* testsuite/20_util/unique_ptr/cons/incomplete.cc: Clarify that\n+\tthe standard doesn't require this test to work for array types.\n+\t* testsuite/20_util/unique_ptr/lwg2762.cc: Check that incomplete\n+\ttypes can be used with array specialization.\n+\t* testsuite/20_util/unique_ptr/101236.cc: New test.\n+\n+2021-06-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/intro.xml: Document LWG 415 change.\n+\t* doc/html/manual/bugs.html: Regenerate.\n+\t* include/bits/istream.tcc (ws): Create sentry and catch\n+\texceptions.\n+\t* testsuite/27_io/basic_istream/ws/char/lwg415.cc: New test.\n+\t* testsuite/27_io/basic_istream/ws/wchar_t/lwg415.cc: New test.\n+\n 2021-06-25  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/ostream.tcc (basic_ostream::write): Call sputn"}]}