{"sha": "ac64eec40cd1d2ab07b24e1b077d35d05c9dd2de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM2NGVlYzQwY2QxZDJhYjA3YjI0ZTFiMDc3ZDM1ZDA1YzlkZDJkZQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2010-07-25T15:07:45Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2010-07-25T15:07:45Z"}, "message": "re PR fortran/42852 (gfortran -Wall warns about truncated lines when only a continuation character is truncated)\n\n2010-07-25  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR fortran/42852\n\t* scanner.c (gfc_next_char_literal): Move check for truncation earlier\n\tin the function so that it does not get missed by early exits.\n\t(load_line): Add checks for quoted strings and free form comments to\n\tdisable warnings on comments. Add check for ampersand as first\n\tcharacter after truncation and don't warn for this case, but warn if\n\tthere are subsequent non-whitespace characters.\n\nFrom-SVN: r162512", "tree": {"sha": "6784d2dcd7365cf5faef8a9bb3e4178b7f5eef52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6784d2dcd7365cf5faef8a9bb3e4178b7f5eef52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac64eec40cd1d2ab07b24e1b077d35d05c9dd2de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac64eec40cd1d2ab07b24e1b077d35d05c9dd2de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac64eec40cd1d2ab07b24e1b077d35d05c9dd2de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac64eec40cd1d2ab07b24e1b077d35d05c9dd2de/comments", "author": null, "committer": null, "parents": [{"sha": "af8e1802e1d235b67a0b1056ce34df3c44a23f53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af8e1802e1d235b67a0b1056ce34df3c44a23f53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af8e1802e1d235b67a0b1056ce34df3c44a23f53"}], "stats": {"total": 66, "additions": 52, "deletions": 14}, "files": [{"sha": "3627b9e1b4a98e5cc02d38f67a87c3a6d2ee8bd2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac64eec40cd1d2ab07b24e1b077d35d05c9dd2de/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac64eec40cd1d2ab07b24e1b077d35d05c9dd2de/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ac64eec40cd1d2ab07b24e1b077d35d05c9dd2de", "patch": "@@ -1,3 +1,13 @@\n+2010-07-25  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/42852\n+\t* scanner.c (gfc_next_char_literal): Move check for truncation earlier\n+\tin the function so that it does not get missed by early exits.\n+\t(load_line): Add checks for quoted strings and free form comments to\n+\tdisable warnings on comments. Add check for ampersand as first\n+\tcharacter after truncation and don't warn for this case, but warn if\n+\tthere are subsequent non-whitespace characters.\n+\n 2010-07-24  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/40011"}, {"sha": "acc2f5a770853aed5323e462102070d58213a909", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 42, "deletions": 14, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac64eec40cd1d2ab07b24e1b077d35d05c9dd2de/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac64eec40cd1d2ab07b24e1b077d35d05c9dd2de/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=ac64eec40cd1d2ab07b24e1b077d35d05c9dd2de", "patch": "@@ -1044,6 +1044,17 @@ gfc_next_char_literal (int in_string)\n \t  goto done;\n \t}\n \n+      /* Check to see if the continuation line was truncated.  */\n+      if (gfc_option.warn_line_truncation && gfc_current_locus.lb != NULL\n+\t  && gfc_current_locus.lb->truncated)\n+\t{\n+\t  int maxlen = gfc_option.free_line_length;\n+\t  gfc_current_locus.lb->truncated = 0;\n+\t  gfc_current_locus.nextc += maxlen;\n+\t  gfc_warning_now (\"Line truncated at %L\", &gfc_current_locus);\n+\t  gfc_current_locus.nextc -= maxlen;\n+\t}\n+\n       if (c != '&')\n \tgoto done;\n \n@@ -1095,17 +1106,6 @@ gfc_next_char_literal (int in_string)\n \t    }\n \t}\n \n-      /* Check to see if the continuation line was truncated.  */\n-      if (gfc_option.warn_line_truncation && gfc_current_locus.lb != NULL\n-\t  && gfc_current_locus.lb->truncated)\n-\t{\n-\t  int maxlen = gfc_option.free_line_length;\n-\t  gfc_current_locus.lb->truncated = 0;\n-\t  gfc_current_locus.nextc += maxlen;\n-\t  gfc_warning_now (\"Line truncated at %L\", &gfc_current_locus);\n-\t  gfc_current_locus.nextc -= maxlen;\n-\t}\n-\n       /* Now find where it continues. First eat any comment lines.  */\n       openmp_cond_flag = skip_free_comments ();\n \n@@ -1420,7 +1420,7 @@ load_line (FILE *input, gfc_char_t **pbuf, int *pbuflen, const int *first_char)\n   static int linenum = 0, current_line = 1;\n   int c, maxlen, i, preprocessor_flag, buflen = *pbuflen;\n   int trunc_flag = 0, seen_comment = 0;\n-  int seen_printable = 0, seen_ampersand = 0;\n+  int seen_printable = 0, seen_ampersand = 0, quoted = ' ';\n   gfc_char_t *buffer;\n   bool found_tab = false;\n \n@@ -1502,6 +1502,18 @@ load_line (FILE *input, gfc_char_t **pbuf, int *pbuflen, const int *first_char)\n \t  && (c == '*' || c == 'c' || c == 'd'))\n \tseen_comment = 1;\n \n+      if (quoted == ' ')\n+\t{\n+\t  if (c == '\\'' || c == '\"')\n+\t    quoted = c;\n+\t}\n+      else if (c == quoted)\n+\tquoted = ' ';\n+\n+      /* Is this a free-form comment?  */\n+      if (c == '!' && quoted == ' ')\n+        seen_comment = 1;\n+\n       /* Vendor extension: \"<tab>1\" marks a continuation line.  */\n       if (found_tab)\n \t{\n@@ -1550,17 +1562,33 @@ load_line (FILE *input, gfc_char_t **pbuf, int *pbuflen, const int *first_char)\n \t}\n       else if (i >= maxlen)\n \t{\n+\t  bool trunc_warn = true;\n+\n+\t  /* Enhancement, if the very next non-space character is an ampersand\n+\t     or comment that we would otherwise warn about, don't mark as\n+\t     truncated.  */\n+\n \t  /* Truncate the rest of the line.  */\n \t  for (;;)\n \t    {\n \t      c = getc (input);\n-\t      if (c == '\\r')\n+\t      if (c == '\\r' || c == ' ')\n \t        continue;\n \n \t      if (c == '\\n' || c == EOF)\n \t\tbreak;\n \n-\t      trunc_flag = 1;\n+\t      if (!trunc_warn && c != '!')\n+\t\ttrunc_warn = true;\n+\n+\t      if (trunc_warn && (c == '&' || c == '!'))\n+\t\ttrunc_warn = false;\n+\n+\t      if (c == '!')\n+\t\tseen_comment = 1;\n+\n+\t      if (trunc_warn && !seen_comment)\n+\t\ttrunc_flag = 1;\n \t    }\n \n \t  c = '\\n';"}]}