{"sha": "d311103760c64a1d8125db18b66a2f32fe8f930b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMxMTEwMzc2MGM2NGExZDgxMjVkYjE4YjY2YTJmMzJmZThmOTMwYg==", "commit": {"author": {"name": "Craig Burley", "email": "craig@jcb-sc.com", "date": "1999-03-29T12:13:17Z"}, "committer": {"name": "Craig Burley", "email": "burley@gcc.gnu.org", "date": "1999-03-29T12:13:17Z"}, "message": "Clarify -fcheck-memory-usage\n\nFrom-SVN: r26057", "tree": {"sha": "d6da6841ca39e2e1022c6fd71fdc3ace7c10b387", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6da6841ca39e2e1022c6fd71fdc3ace7c10b387"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d311103760c64a1d8125db18b66a2f32fe8f930b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d311103760c64a1d8125db18b66a2f32fe8f930b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d311103760c64a1d8125db18b66a2f32fe8f930b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d311103760c64a1d8125db18b66a2f32fe8f930b/comments", "author": null, "committer": null, "parents": [{"sha": "fdb1833aca45ffa413e21438ea6a11e7f57785f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdb1833aca45ffa413e21438ea6a11e7f57785f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdb1833aca45ffa413e21438ea6a11e7f57785f9"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "6febf5d743b0d42048399d220b4ae69158514f7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d311103760c64a1d8125db18b66a2f32fe8f930b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d311103760c64a1d8125db18b66a2f32fe8f930b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d311103760c64a1d8125db18b66a2f32fe8f930b", "patch": "@@ -1,3 +1,8 @@\n+Mon Mar 29 15:11:10 1999  Craig Burley  <craig@jcb-sc.com>\n+\n+\t* invoke.texi (Code Gen Options): Attempt to clarify\n+\t-fcheck-memory-usage.  Minor edits to -fprefix-function-name.\n+\n Mon Mar 29 20:52:47 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* loop.c (maybe_eliminate_biv): For libcalls that set a giv, skip to"}, {"sha": "b07b5a3f330614289358b9d41880a825ad77c153", "filename": "gcc/invoke.texi", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d311103760c64a1d8125db18b66a2f32fe8f930b/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d311103760c64a1d8125db18b66a2f32fe8f930b/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=d311103760c64a1d8125db18b66a2f32fe8f930b", "patch": "@@ -6060,17 +6060,22 @@ Generate extra code to check each memory access.  GNU CC will generate\n code that is suitable for a detector of bad memory accesses such as\n @file{Checker}.\n \n-You must also specify this option when you compile functions you call that\n-have side effects.  If you do not, you may get erroneous messages from\n-the detector.  Normally,  you should compile all your code with this option.\n+Normally, you should compile all, or none, of your code with this option.\n+\n+If you do mix code compiled with and without this option,\n+you must ensure that all code that has side effects\n+and that is called by code compiled with this option\n+is, itself, compiled with this option.\n+If you do not, you might get erroneous messages from the detector.\n+\n If you use functions from a library that have side-effects (such as\n-@code{read}), you may not be able to recompile the library and\n+@code{read}), you might not be able to recompile the library and\n specify this option.  In that case, you can enable the\n @samp{-fprefix-function-name} option, which requests GNU CC to encapsulate\n your code and make other functions look as if they were compiled with\n @samp{-fcheck-memory-usage}.  This is done by calling ``stubs'',\n which are provided by the detector.  If you cannot find or build\n-stubs for every function you call, you may have to specify\n+stubs for every function you call, you might have to specify\n @samp{-fcheck-memory-usage} without @samp{-fprefix-function-name}.\n \n If you specify this option, you can not use the @code{asm} or\n@@ -6095,7 +6100,7 @@ These calls would be similar to those done in the stubs described above.\n Request GNU CC to add a prefix to the symbols generated for function names.\n GNU CC adds a prefix to the names of functions defined as well as\n functions called.  Code compiled with this option and code compiled\n-without the option can't be linked together, unless or stubs are used.\n+without the option can't be linked together, unless stubs are used.\n \n If you compile the following code with @samp{-fprefix-function-name}\n @example\n@@ -6104,7 +6109,6 @@ void\n foo (int a)\n @{\n   return bar (a + 5);\n-\n @}\n @end example\n "}]}