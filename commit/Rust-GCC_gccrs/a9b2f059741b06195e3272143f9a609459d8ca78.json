{"sha": "a9b2f059741b06195e3272143f9a609459d8ca78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTliMmYwNTk3NDFiMDYxOTVlMzI3MjE0M2Y5YTYwOTQ1OWQ4Y2E3OA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@redhat.com", "date": "2002-09-20T21:42:25Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2002-09-20T21:42:25Z"}, "message": "Fix v850 ICE.\n\n\t* combine.c (try_combine): When split an instruction pair, where the\n\tfirst has a sign_extend src, verify that the src and dest modes match.\n\nFrom-SVN: r57371", "tree": {"sha": "4153c004242ecb1aee635758e2f6c7141a996b18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4153c004242ecb1aee635758e2f6c7141a996b18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9b2f059741b06195e3272143f9a609459d8ca78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9b2f059741b06195e3272143f9a609459d8ca78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9b2f059741b06195e3272143f9a609459d8ca78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9b2f059741b06195e3272143f9a609459d8ca78/comments", "author": null, "committer": null, "parents": [{"sha": "27eba3092297b924cce500c1d815cde3a7913eda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27eba3092297b924cce500c1d815cde3a7913eda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27eba3092297b924cce500c1d815cde3a7913eda"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "103bc9468ba874f2e65d703c4af23953ea744061", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b2f059741b06195e3272143f9a609459d8ca78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b2f059741b06195e3272143f9a609459d8ca78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9b2f059741b06195e3272143f9a609459d8ca78", "patch": "@@ -1,3 +1,8 @@\n+2002-09-20  Jim Wilson  <wilson@redhat.com>\n+\n+\t* combine.c (try_combine): When split an instruction pair, where the\n+\tfirst has a sign_extend src, verify that the src and dest modes match.\n+\n 2002-09-20  Richard Henderson  <rth@redhat.com>\n \n \t* config/mips/mips.c (dfhigh, dflow, sfhigh, sflow): Remove."}, {"sha": "1d6a5b270b70eba958c9c9124a6c883a7c6e807c", "filename": "gcc/combine.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b2f059741b06195e3272143f9a609459d8ca78/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b2f059741b06195e3272143f9a609459d8ca78/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=a9b2f059741b06195e3272143f9a609459d8ca78", "patch": "@@ -2316,6 +2316,10 @@ try_combine (i3, i2, i1, new_direct_jump_p)\n      copy.  This saves at least one insn, more if register allocation can\n      eliminate the copy.\n \n+     We cannot do this if the destination of the first assignment is a\n+     condition code register or cc0.  We eliminate this case by making sure\n+     the SET_DEST and SET_SRC have the same mode.\n+\n      We cannot do this if the destination of the second assignment is\n      a register that we have already assumed is zero-extended.  Similarly\n      for a SUBREG of such a register.  */\n@@ -2325,6 +2329,8 @@ try_combine (i3, i2, i1, new_direct_jump_p)\n \t   && XVECLEN (newpat, 0) == 2\n \t   && GET_CODE (XVECEXP (newpat, 0, 0)) == SET\n \t   && GET_CODE (SET_SRC (XVECEXP (newpat, 0, 0))) == SIGN_EXTEND\n+\t   && (GET_MODE (SET_DEST (XVECEXP (newpat, 0, 0)))\n+\t       == GET_MODE (SET_SRC (XVECEXP (newpat, 0, 0))))\n \t   && GET_CODE (XVECEXP (newpat, 0, 1)) == SET\n \t   && rtx_equal_p (SET_SRC (XVECEXP (newpat, 0, 1)),\n \t\t\t   XEXP (SET_SRC (XVECEXP (newpat, 0, 0)), 0))"}]}