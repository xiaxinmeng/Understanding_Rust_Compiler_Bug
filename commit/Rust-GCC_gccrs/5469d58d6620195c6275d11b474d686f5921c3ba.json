{"sha": "5469d58d6620195c6275d11b474d686f5921c3ba", "node_id": "C_kwDOANBUbNoAKDU0NjlkNThkNjYyMDE5NWM2Mjc1ZDExYjQ3NGQ2ODZmNTkyMWMzYmE", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-10-21T15:10:02Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-10-26T15:34:53Z"}, "message": "c++: P2360R0: Extend init-stmt to allow alias-decl [PR102617]\n\nThe following patch implements C++23 P2360R0.  This proposal merely\nextends init-statement to contain alias-declaration.  init-statement\nis used in if/for/switch.  It also removes the unsightly duplication\nof code by calling cp_parser_init_statement twice.\n\n\tPR c++/102617\n\ngcc/cp/ChangeLog:\n\n\t* parser.c (cp_parser_for): Maybe call cp_parser_init_statement\n\ttwice.  Warn about range-based for loops with initializer here.\n\t(cp_parser_init_statement): Don't duplicate code.  Allow\n\talias-declaration in init-statement.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp23/init-stmt1.C: New test.\n\t* g++.dg/cpp23/init-stmt2.C: New test.", "tree": {"sha": "c74e8137c6408bff107f4a2bfbfd89d5a9474855", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c74e8137c6408bff107f4a2bfbfd89d5a9474855"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5469d58d6620195c6275d11b474d686f5921c3ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5469d58d6620195c6275d11b474d686f5921c3ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5469d58d6620195c6275d11b474d686f5921c3ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5469d58d6620195c6275d11b474d686f5921c3ba/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28006282028b548238cee4601117f21c498dc2b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28006282028b548238cee4601117f21c498dc2b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28006282028b548238cee4601117f21c498dc2b7"}], "stats": {"total": 126, "additions": 95, "deletions": 31}, "files": [{"sha": "93335c817d7eb451dffe32b3e18329eecbcec646", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 39, "deletions": 31, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5469d58d6620195c6275d11b474d686f5921c3ba/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5469d58d6620195c6275d11b474d686f5921c3ba/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5469d58d6620195c6275d11b474d686f5921c3ba", "patch": "@@ -12040,6 +12040,7 @@ cp_parser_handle_directive_omp_attributes (cp_parser *parser, tree *pattrs,\n   init-statement:\n     expression-statement\n     simple-declaration\n+    alias-declaration\n \n   TM Extension:\n \n@@ -13327,6 +13328,23 @@ cp_parser_for (cp_parser *parser, bool ivdep, unsigned short unroll)\n   /* Begin the for-statement.  */\n   scope = begin_for_scope (&init);\n \n+  /* Maybe parse the optional init-statement in a range-based for loop.  */\n+  if (cp_parser_range_based_for_with_init_p (parser)\n+      /* Checked for diagnostic purposes only.  */\n+      && cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))\n+    {\n+      tree dummy;\n+      cp_parser_init_statement (parser, &dummy);\n+      if (cxx_dialect < cxx20)\n+\t{\n+\t  pedwarn (cp_lexer_peek_token (parser->lexer)->location,\n+\t\t   OPT_Wc__20_extensions,\n+\t\t   \"range-based %<for%> loops with initializer only \"\n+\t\t   \"available with %<-std=c++20%> or %<-std=gnu++20%>\");\n+\t  decl = error_mark_node;\n+\t}\n+    }\n+\n   /* Parse the initialization.  */\n   is_range_for = cp_parser_init_statement (parser, &decl);\n \n@@ -13987,12 +14005,13 @@ cp_parser_iteration_statement (cp_parser* parser, bool *if_p, bool ivdep,\n   return statement;\n }\n \n-/* Parse a init-statement or the declarator of a range-based-for.\n+/* Parse an init-statement or the declarator of a range-based-for.\n    Returns true if a range-based-for declaration is seen.\n \n    init-statement:\n      expression-statement\n-     simple-declaration  */\n+     simple-declaration\n+     alias-declaration  */\n \n static bool\n cp_parser_init_statement (cp_parser *parser, tree *decl)\n@@ -14008,40 +14027,29 @@ cp_parser_init_statement (cp_parser *parser, tree *decl)\n       bool is_range_for = false;\n       bool saved_colon_corrects_to_scope_p = parser->colon_corrects_to_scope_p;\n \n-      /* Try to parse the init-statement.  */\n-      if (cp_parser_range_based_for_with_init_p (parser))\n-\t{\n-\t  tree dummy;\n-\t  cp_parser_parse_tentatively (parser);\n-\t  /* Parse the declaration.  */\n-\t  cp_parser_simple_declaration (parser,\n-\t\t\t\t\t/*function_definition_allowed_p=*/false,\n-\t\t\t\t\t&dummy);\n-\t  cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);\n-\t  if (!cp_parser_parse_definitely (parser))\n-\t    /* That didn't work, try to parse it as an expression-statement.  */\n-\t    cp_parser_expression_statement (parser, NULL_TREE);\n-\n-\t  if (cxx_dialect < cxx20)\n-\t    {\n-\t      pedwarn (cp_lexer_peek_token (parser->lexer)->location,\n-\t\t       OPT_Wc__20_extensions,\n-\t\t       \"range-based %<for%> loops with initializer only \"\n-\t\t       \"available with %<-std=c++20%> or %<-std=gnu++20%>\");\n-\t      *decl = error_mark_node;\n-\t    }\n-\t}\n-\n       /* A colon is used in range-based for.  */\n       parser->colon_corrects_to_scope_p = false;\n \n       /* We're going to speculatively look for a declaration, falling back\n \t to an expression, if necessary.  */\n       cp_parser_parse_tentatively (parser);\n-      /* Parse the declaration.  */\n-      cp_parser_simple_declaration (parser,\n-\t\t\t\t    /*function_definition_allowed_p=*/false,\n-\t\t\t\t    decl);\n+      bool expect_semicolon_p = true;\n+      if (cp_lexer_next_token_is_keyword (parser->lexer, RID_USING))\n+\t{\n+\t  cp_parser_alias_declaration (parser);\n+\t  expect_semicolon_p = false;\n+\t  if (cxx_dialect < cxx23\n+\t      && !cp_parser_uncommitted_to_tentative_parse_p (parser))\n+\t    pedwarn (cp_lexer_peek_token (parser->lexer)->location,\n+\t\t     OPT_Wc__23_extensions,\n+\t\t     \"alias-declaration in init-statement only \"\n+\t\t     \"available with %<-std=c++23%> or %<-std=gnu++23%>\");\n+\t}\n+      else\n+\t/* Parse the declaration.  */\n+\tcp_parser_simple_declaration (parser,\n+\t\t\t\t      /*function_definition_allowed_p=*/false,\n+\t\t\t\t      decl);\n       parser->colon_corrects_to_scope_p = saved_colon_corrects_to_scope_p;\n       if (cp_lexer_next_token_is (parser->lexer, CPP_COLON))\n \t{\n@@ -14054,7 +14062,7 @@ cp_parser_init_statement (cp_parser *parser, tree *decl)\n \t\t     \"range-based %<for%> loops only available with \"\n \t\t     \"%<-std=c++11%> or %<-std=gnu++11%>\");\n \t}\n-      else\n+      else if (expect_semicolon_p)\n \t/* The ';' is not consumed yet because we told\n \t   cp_parser_simple_declaration not to.  */\n \tcp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);"}, {"sha": "29e3256aae62b6989bf70f9ebcb6ae4c37c4a7fc", "filename": "gcc/testsuite/g++.dg/cpp23/init-stmt1.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5469d58d6620195c6275d11b474d686f5921c3ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Finit-stmt1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5469d58d6620195c6275d11b474d686f5921c3ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Finit-stmt1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Finit-stmt1.C?ref=5469d58d6620195c6275d11b474d686f5921c3ba", "patch": "@@ -0,0 +1,31 @@\n+// PR c++/102617\n+// P2360R0: Extend init-statement to allow alias-declaration\n+// { dg-do compile { target c++20 } }\n+// Test valid use.\n+\n+int v[10];\n+\n+void\n+g ()\n+{\n+  for (using T = int; (T) false;) // { dg-error \"only available with\" \"\" { target c++20_only } }\n+    ;\n+  for (using T = int; T e : v) // { dg-error \"only available with\" \"\" { target c++20_only } }\n+    (void) e;\n+  if (using T = int; true) // { dg-error \"only available with\" \"\" { target c++20_only } }\n+    {\n+      T x = 0;\n+      (void) x;\n+    }\n+  if constexpr (using T = int; true) // { dg-error \"only available with\" \"\" { target c++20_only } }\n+    {\n+      T x = 0;\n+      (void) x;\n+    }\n+  switch (using T = int; 42) // { dg-error \"only available with\" \"\" { target c++20_only } }\n+    case 42:\n+      {\n+\tT x = 0;\n+\t(void) x;\n+      }\n+}"}, {"sha": "ca6201bc34064ba05ff14f531bf27510af2f2eff", "filename": "gcc/testsuite/g++.dg/cpp23/init-stmt2.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5469d58d6620195c6275d11b474d686f5921c3ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Finit-stmt2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5469d58d6620195c6275d11b474d686f5921c3ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Finit-stmt2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Finit-stmt2.C?ref=5469d58d6620195c6275d11b474d686f5921c3ba", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/102617\n+// P2360R0: Extend init-statement to allow alias-declaration\n+// { dg-do compile { target c++23 } }\n+// Test invalid use.\n+\n+int v[10];\n+namespace N { using X = int; }\n+\n+void\n+g ()\n+{\n+  for (using N::X; false;) // { dg-error \"expected\" }\n+    ;\n+  for (using N::X; int e : v) // { dg-error \"expected\" }\n+    (void) e;\n+  for (using T = int; using U = int; int e : v) // { dg-error \"\" }\n+    ;\n+  if (using N::X; false) // { dg-error \"expected\" }\n+    {}\n+  switch (using N::X; 0) // { dg-error \"expected\" }\n+    ;\n+ if (using T = int;) // { dg-error \"expected\" }\n+  {\n+  }\n+}"}]}