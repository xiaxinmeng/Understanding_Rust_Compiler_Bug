{"sha": "2e103ae2138ede8a4db831dea30065fe0041bc58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUxMDNhZTIxMzhlZGU4YTRkYjgzMWRlYTMwMDY1ZmUwMDQxYmM1OA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2018-10-03T17:18:52Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2018-10-03T17:18:52Z"}, "message": "tree-vrp.c (extract_range_from_unary_expr): Special case all pointer conversions.\n\n\t* tree-vrp.c (extract_range_from_unary_expr): Special case all\n\tpointer conversions.\n\tDo not do anything special for anti-ranges.\n\nFrom-SVN: r264815", "tree": {"sha": "9c8f42c76ec73408b434f5bd911acc33cf70fae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c8f42c76ec73408b434f5bd911acc33cf70fae6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e103ae2138ede8a4db831dea30065fe0041bc58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e103ae2138ede8a4db831dea30065fe0041bc58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e103ae2138ede8a4db831dea30065fe0041bc58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e103ae2138ede8a4db831dea30065fe0041bc58/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bedf03a298f87b43f02eaee57542fbd10228ec08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bedf03a298f87b43f02eaee57542fbd10228ec08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bedf03a298f87b43f02eaee57542fbd10228ec08"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "6acb077b35758cf17d7e1bfd6a28e50614ed0831", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e103ae2138ede8a4db831dea30065fe0041bc58/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e103ae2138ede8a4db831dea30065fe0041bc58/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e103ae2138ede8a4db831dea30065fe0041bc58", "patch": "@@ -1,3 +1,9 @@\n+2018-10-3  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-vrp.c (extract_range_from_unary_expr): Special case all\n+\tpointer conversions.\n+\tDo not do anything special for anti-ranges.\n+\n 2018-10-03  J\u00e9r\u00f4me Lambourg  <lambourg@adacore.com>\n \n \t* config/arm/vxworks.h (ARM_TARGET2_DWARF_FORMAT): Adjust to"}, {"sha": "005fc2ffe2ddcb8da657195dd6936dd527b96f25", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e103ae2138ede8a4db831dea30065fe0041bc58/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e103ae2138ede8a4db831dea30065fe0041bc58/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=2e103ae2138ede8a4db831dea30065fe0041bc58", "patch": "@@ -1800,9 +1800,14 @@ extract_range_from_unary_expr (value_range *vr,\n       tree inner_type = op0_type;\n       tree outer_type = type;\n \n-      /* If the expression evaluates to a pointer, we are only interested in\n-\t determining if it evaluates to NULL [0, 0] or non-NULL (~[0, 0]).  */\n-      if (POINTER_TYPE_P (type))\n+      /* If the expression involves a pointer, we are only interested in\n+\t determining if it evaluates to NULL [0, 0] or non-NULL (~[0, 0]).\n+\n+\t This may lose precision when converting (char *)~[0,2] to\n+\t int, because we'll forget that the pointer can also not be 1\n+\t or 2.  In practice we don't care, as this is some idiot\n+\t storing a magic constant to a pointer.  */\n+      if (POINTER_TYPE_P (type) || POINTER_TYPE_P (op0_type))\n \t{\n \t  if (!range_includes_zero_p (&vr0))\n \t    set_value_range_to_nonnull (vr, type);\n@@ -1813,15 +1818,12 @@ extract_range_from_unary_expr (value_range *vr,\n \t  return;\n \t}\n \n-      /* We normalize everything to a VR_RANGE, but for constant\n-\t anti-ranges we must handle them by leaving the final result\n-\t as an anti range.  This allows us to convert things like\n-\t ~[0,5] seamlessly.  */\n-      value_range_type vr_type = VR_RANGE;\n-      if (vr0.type == VR_ANTI_RANGE\n-\t  && TREE_CODE (vr0.min) == INTEGER_CST\n-\t  && TREE_CODE (vr0.max) == INTEGER_CST)\n-\tvr_type = VR_ANTI_RANGE;\n+      /* The POINTER_TYPE_P code above will have dealt with all\n+\t pointer anti-ranges.  Any remaining anti-ranges at this point\n+\t will be integer conversions from SSA names that will be\n+\t normalized into VARYING.  For instance: ~[x_55, x_55].  */\n+      gcc_assert (vr0.type != VR_ANTI_RANGE\n+\t\t  || TREE_CODE (vr0.min) != INTEGER_CST);\n \n       /* NOTES: Previously we were returning VARYING for all symbolics, but\n \t we can do better by treating them as [-MIN, +MAX].  For\n@@ -1844,7 +1846,7 @@ extract_range_from_unary_expr (value_range *vr,\n \t{\n \t  tree min = wide_int_to_tree (outer_type, wmin);\n \t  tree max = wide_int_to_tree (outer_type, wmax);\n-\t  set_and_canonicalize_value_range (vr, vr_type, min, max, NULL);\n+\t  set_and_canonicalize_value_range (vr, VR_RANGE, min, max, NULL);\n \t}\n       else\n \tset_value_range_to_varying (vr);"}]}