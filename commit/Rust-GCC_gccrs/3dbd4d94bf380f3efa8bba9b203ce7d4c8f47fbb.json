{"sha": "3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RiZDRkOTRiZjM4MGYzZWZhOGJiYTliMjAzY2U3ZDRjOGY0N2ZiYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-30T12:56:14Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-30T17:12:39Z"}, "message": "libstdc++: Use secure_getenv for filesystem::temp_directory_path() [PR65018]\n\nThis adds a configure check for the GNU extension secure_getenv and then\nuses it for looking up TMPDIR and similar variables.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/65018\n\t* configure.ac: Check for secure_getenv.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* src/filesystem/ops-common.h (get_temp_directory_from_env): New\n\thelper function to obtain path from the environment.\n\t* src/c++17/fs_ops.cc (fs::temp_directory_path): Use new helper.\n\t* src/filesystem/ops.cc (fs::temp_directory_path): Likewise.\n\t* testsuite/27_io/filesystem/operations/temp_directory_path.cc:\n\tPrint messages if test cannot be run.\n\t* testsuite/experimental/filesystem/operations/temp_directory_path.cc:\n\tLikewise. Fix incorrect condition. Use \"TMP\" to work with\n\tWindows as well as POSIX.", "tree": {"sha": "6819bfe2d940de090ddf612866796f1c485f5773", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6819bfe2d940de090ddf612866796f1c485f5773"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2065654435e3d97676366f82b939bc9273382dbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2065654435e3d97676366f82b939bc9273382dbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2065654435e3d97676366f82b939bc9273382dbe"}], "stats": {"total": 134, "additions": 80, "deletions": 54}, "files": [{"sha": "228a758325ef7ad8b0b37b1b797a069307f2945d", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb", "patch": "@@ -301,6 +301,9 @@\n /* Define if readlink is available in <unistd.h>. */\n #undef HAVE_READLINK\n \n+/* Define to 1 if you have the `secure_getenv' function. */\n+#undef HAVE_SECURE_GETENV\n+\n /* Define to 1 if you have the `setenv' function. */\n #undef HAVE_SETENV\n "}, {"sha": "068a203df4fdc1ef0389e8f65f72debb08913121", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb", "patch": "@@ -28225,6 +28225,17 @@ if test \"x$ac_cv_func__wfopen\" = xyes; then :\n #define HAVE__WFOPEN 1\n _ACEOF\n \n+fi\n+done\n+\n+  for ac_func in secure_getenv\n+do :\n+  ac_fn_c_check_func \"$LINENO\" \"secure_getenv\" \"ac_cv_func_secure_getenv\"\n+if test \"x$ac_cv_func_secure_getenv\" = xyes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE_SECURE_GETENV 1\n+_ACEOF\n+\n fi\n done\n "}, {"sha": "9d70ae7b1d03f98055cf8b70aec84d5395207ca3", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb", "patch": "@@ -273,6 +273,7 @@ if $GLIBCXX_IS_NATIVE; then\n   AC_CHECK_FUNCS(__cxa_thread_atexit_impl __cxa_thread_atexit)\n   AC_CHECK_FUNCS(aligned_alloc posix_memalign memalign _aligned_malloc)\n   AC_CHECK_FUNCS(_wfopen)\n+  AC_CHECK_FUNCS(secure_getenv)\n \n   # C11 functions for C++17 library\n   AC_CHECK_FUNCS(timespec_get)"}, {"sha": "db2250e4841fd68e923159c7bf9ca7acf9c9e802", "filename": "libstdc++-v3/src/c++17/fs_ops.cc", "status": "modified", "additions": 5, "deletions": 26, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc?ref=3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb", "patch": "@@ -1591,7 +1591,8 @@ fs::symlink_status(const fs::path& p)\n   return result;\n }\n \n-fs::path fs::temp_directory_path()\n+fs::path\n+fs::temp_directory_path()\n {\n   error_code ec;\n   path tmp = temp_directory_path(ec);\n@@ -1600,32 +1601,10 @@ fs::path fs::temp_directory_path()\n   return tmp;\n }\n \n-fs::path fs::temp_directory_path(error_code& ec)\n+fs::path\n+fs::temp_directory_path(error_code& ec)\n {\n-  path p;\n-#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-  unsigned len = 1024;\n-  std::wstring buf;\n-  do\n-    {\n-      buf.resize(len);\n-      len = GetTempPathW(buf.size(), buf.data());\n-    } while (len > buf.size());\n-\n-  if (len == 0)\n-    {\n-      ec.assign((int)GetLastError(), std::system_category());\n-      return p;\n-    }\n-  buf.resize(len);\n-  p = std::move(buf);\n-#else\n-  const char* tmpdir = nullptr;\n-  const char* env[] = { \"TMPDIR\", \"TMP\", \"TEMP\", \"TEMPDIR\", nullptr };\n-  for (auto e = env; tmpdir == nullptr && *e != nullptr; ++e)\n-    tmpdir = ::getenv(*e);\n-  p = tmpdir ? tmpdir : \"/tmp\";\n-#endif\n+  path p = fs::get_temp_directory_from_env();\n   auto st = status(p, ec);\n   if (ec)\n     p.clear();"}, {"sha": "b8bbf446883ccbdfd8c45a58cbd529bcb5b861a2", "filename": "libstdc++-v3/src/filesystem/ops-common.h", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h?ref=3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb", "patch": "@@ -568,6 +568,46 @@ _GLIBCXX_BEGIN_NAMESPACE_FILESYSTEM\n \n #endif // _GLIBCXX_HAVE_SYS_STAT_H\n \n+  // Find OS-specific name of temporary directory from the environment,\n+  // Caller must check that the path is an accessible directory.\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  inline wstring\n+  get_temp_directory_from_env()\n+  {\n+    unsigned len = 1024;\n+    std::wstring buf;\n+    do\n+      {\n+\tbuf.resize(len);\n+\tlen = GetTempPathW(buf.size(), buf.data());\n+      } while (len > buf.size());\n+\n+    if (len == 0)\n+      {\n+\tec.assign((int)GetLastError(), std::system_category());\n+\treturn p;\n+      }\n+    buf.resize(len);\n+    return buf;\n+  }\n+#else\n+  inline const char*\n+  get_temp_directory_from_env() noexcept\n+  {\n+    for (auto env : { \"TMPDIR\", \"TMP\", \"TEMP\", \"TEMPDIR\" })\n+      {\n+#if _GLIBCXX_HAVE_SECURE_GETENV\n+\tauto tmpdir = ::secure_getenv(env);\n+#else\n+\tauto tmpdir = ::getenv(env);\n+#endif\n+\tif (tmpdir)\n+\t  return tmpdir;\n+      }\n+    return \"/tmp\";\n+  }\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_FILESYSTEM\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "3494cbd19f95728c619e01d95f5b2204c1fb0516", "filename": "libstdc++-v3/src/filesystem/ops.cc", "status": "modified", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc?ref=3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb", "patch": "@@ -1289,7 +1289,8 @@ fs::system_complete(const path& p, error_code& ec)\n #endif\n }\n \n-fs::path fs::temp_directory_path()\n+fs::path\n+fs::temp_directory_path()\n {\n   error_code ec;\n   path tmp = temp_directory_path(ec);\n@@ -1298,31 +1299,10 @@ fs::path fs::temp_directory_path()\n   return tmp;\n }\n \n-fs::path fs::temp_directory_path(error_code& ec)\n+fs::path\n+fs::temp_directory_path(error_code& ec)\n {\n-  path p;\n-#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-  unsigned len = 1024;\n-  std::wstring buf;\n-  do\n-    {\n-      buf.resize(len);\n-      len = GetTempPathW(buf.size(), buf.data());\n-    } while (len > buf.size());\n-\n-  if (len == 0)\n-    {\n-      ec.assign((int)GetLastError(), std::system_category());\n-      return p;\n-    }\n-  buf.resize(len);\n-  p = std::move(buf);\n-#else\n-  const char* tmpdir = nullptr;\n-  const char* env[] = { \"TMPDIR\", \"TMP\", \"TEMP\", \"TEMPDIR\", nullptr };\n-  for (auto e = env; tmpdir == nullptr && *e != nullptr; ++e)\n-    tmpdir = ::getenv(*e);\n-  p = tmpdir ? tmpdir : \"/tmp\";\n+  path p = fs::get_temp_directory_from_env();\n   auto st = status(p, ec);\n   if (ec)\n     p.clear();\n@@ -1331,7 +1311,5 @@ fs::path fs::temp_directory_path(error_code& ec)\n       p.clear();\n       ec = std::make_error_code(std::errc::not_a_directory);\n     }\n-#endif\n   return p;\n }\n-"}, {"sha": "58d58418122850e13b3faf9e9049bba88cbc9faf", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/temp_directory_path.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc?ref=3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb", "patch": "@@ -20,6 +20,7 @@\n \n #include <filesystem>\n #include <stdlib.h>\n+#include <stdio.h>\n #include <testsuite_hooks.h>\n #include <testsuite_fs.h>\n \n@@ -58,7 +59,10 @@ test01()\n   clean_env();\n \n   if (!fs::exists(\"/tmp\"))\n+  {\n+    puts(\"/tmp doesn't exist, not testing it for temp_directory_path\");\n     return; // just give up\n+  }\n \n   std::error_code ec = make_error_code(std::errc::invalid_argument);\n   fs::path p1 = fs::temp_directory_path(ec);\n@@ -75,7 +79,10 @@ test02()\n   clean_env();\n \n   if (!set_env(\"TMP\", __gnu_test::nonexistent_path().string()))\n+  {\n+    puts(\"Cannot set environment variables, not testing temp_directory_path\");\n     return; // just give up\n+  }\n \n   std::error_code ec;\n   fs::path p = fs::temp_directory_path(ec);"}, {"sha": "d6d251ee2f6837ff38cd26bad179113bc0dfedea", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/temp_directory_path.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc?ref=3dbd4d94bf380f3efa8bba9b203ce7d4c8f47fbb", "patch": "@@ -21,6 +21,7 @@\n \n #include <experimental/filesystem>\n #include <stdlib.h>\n+#include <stdio.h>\n #include <testsuite_hooks.h>\n #include <testsuite_fs.h>\n \n@@ -59,7 +60,10 @@ test01()\n   clean_env();\n \n   if (!fs::exists(\"/tmp\"))\n+  {\n+    puts(\"/tmp doesn't exist, not testing it for temp_directory_path\");\n     return; // just give up\n+  }\n \n   std::error_code ec = make_error_code(std::errc::invalid_argument);\n   fs::path p1 = fs::temp_directory_path(ec);\n@@ -75,8 +79,11 @@ test02()\n {\n   clean_env();\n \n-  if (set_env(\"TMPDIR\", __gnu_test::nonexistent_path().string()))\n+  if (!set_env(\"TMP\", __gnu_test::nonexistent_path().string()))\n+  {\n+    puts(\"Cannot set environment variables, not testing temp_directory_path\");\n     return; // just give up\n+  }\n \n   std::error_code ec;\n   fs::path p = fs::temp_directory_path(ec);"}]}