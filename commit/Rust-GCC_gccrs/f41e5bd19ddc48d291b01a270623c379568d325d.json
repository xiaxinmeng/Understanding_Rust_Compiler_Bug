{"sha": "f41e5bd19ddc48d291b01a270623c379568d325d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQxZTViZDE5ZGRjNDhkMjkxYjAxYTI3MDYyM2MzNzk1NjhkMzI1ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-12-03T17:19:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-12-03T17:19:47Z"}, "message": "re PR bootstrap/55380 (All search_line_fast implementations read beyond buffer)\n\n\tPR bootstrap/55380\n\tPR other/54691\n\t* files.c (read_file_guts): Allocate extra 16 bytes instead of\n\t1 byte at the end of buf.  Pass size + 16 instead of size\n\tto _cpp_convert_input.\n\t* charset.c (_cpp_convert_input): Reallocate if there aren't\n\tat least 16 bytes beyond to.len in the buffer.  Clear 16 bytes\n\tat to.text + to.len.\n\nFrom-SVN: r194102", "tree": {"sha": "0631b731076c534491f883f189109e95a9bd12d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0631b731076c534491f883f189109e95a9bd12d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f41e5bd19ddc48d291b01a270623c379568d325d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f41e5bd19ddc48d291b01a270623c379568d325d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f41e5bd19ddc48d291b01a270623c379568d325d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f41e5bd19ddc48d291b01a270623c379568d325d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36402bb1864531f22acc9c3ef2403e1d3cddfc65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36402bb1864531f22acc9c3ef2403e1d3cddfc65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36402bb1864531f22acc9c3ef2403e1d3cddfc65"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "fc78ca810607e5b8a69b969e8e7df4dc7c8e2218", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f41e5bd19ddc48d291b01a270623c379568d325d/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f41e5bd19ddc48d291b01a270623c379568d325d/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=f41e5bd19ddc48d291b01a270623c379568d325d", "patch": "@@ -1,3 +1,14 @@\n+2012-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/55380\n+\tPR other/54691\n+\t* files.c (read_file_guts): Allocate extra 16 bytes instead of\n+\t1 byte at the end of buf.  Pass size + 16 instead of size\n+\tto _cpp_convert_input.\n+\t* charset.c (_cpp_convert_input): Reallocate if there aren't\n+\tat least 16 bytes beyond to.len in the buffer.  Clear 16 bytes\n+\tat to.text + to.len.\n+\n 2012-11-21  Steve Ellcey  <sellcey@mips.com>\n \n \tPR pch/55399"}, {"sha": "09e2b7b45a243b82601ed17667c5f8153c745a01", "filename": "libcpp/charset.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f41e5bd19ddc48d291b01a270623c379568d325d/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f41e5bd19ddc48d291b01a270623c379568d325d/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=f41e5bd19ddc48d291b01a270623c379568d325d", "patch": "@@ -1,6 +1,6 @@\n /* CPP Library - charsets\n    Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2006, 2008, 2009,\n-   2010 Free Software Foundation, Inc.\n+   2010, 2012 Free Software Foundation, Inc.\n \n    Broken out of c-lex.c Apr 2003, adding valid C99 UCN ranges.\n \n@@ -1729,9 +1729,15 @@ _cpp_convert_input (cpp_reader *pfile, const char *input_charset,\n     iconv_close (input_cset.cd);\n \n   /* Resize buffer if we allocated substantially too much, or if we\n-     haven't enough space for the \\n-terminator.  */\n-  if (to.len + 4096 < to.asize || to.len >= to.asize)\n-    to.text = XRESIZEVEC (uchar, to.text, to.len + 1);\n+     haven't enough space for the \\n-terminator or following\n+     15 bytes of padding (used to quiet warnings from valgrind or\n+     Address Sanitizer, when the optimized lexer accesses aligned\n+     16-byte memory chunks, including the bytes after the malloced,\n+     area, and stops lexing on '\\n').  */\n+  if (to.len + 4096 < to.asize || to.len + 16 > to.asize)\n+    to.text = XRESIZEVEC (uchar, to.text, to.len + 16);\n+\n+  memset (to.text + to.len, '\\0', 16);\n \n   /* If the file is using old-school Mac line endings (\\r only),\n      terminate with another \\r, not an \\n, so that we do not mistake"}, {"sha": "3aeb6f37881dd485fd3950e22c0026d603ca5d5c", "filename": "libcpp/files.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f41e5bd19ddc48d291b01a270623c379568d325d/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f41e5bd19ddc48d291b01a270623c379568d325d/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=f41e5bd19ddc48d291b01a270623c379568d325d", "patch": "@@ -671,7 +671,11 @@ read_file_guts (cpp_reader *pfile, _cpp_file *file)\n        the majority of C source files.  */\n     size = 8 * 1024;\n \n-  buf = XNEWVEC (uchar, size + 1);\n+  /* The + 16 here is space for the final '\\n' and 15 bytes of padding,\n+     used to quiet warnings from valgrind or Address Sanitizer, when the\n+     optimized lexer accesses aligned 16-byte memory chunks, including\n+     the bytes after the malloced, area, and stops lexing on '\\n'.  */\n+  buf = XNEWVEC (uchar, size + 16);\n   total = 0;\n   while ((count = read (file->fd, buf + total, size - total)) > 0)\n     {\n@@ -682,7 +686,7 @@ read_file_guts (cpp_reader *pfile, _cpp_file *file)\n \t  if (regular)\n \t    break;\n \t  size *= 2;\n-\t  buf = XRESIZEVEC (uchar, buf, size + 1);\n+\t  buf = XRESIZEVEC (uchar, buf, size + 16);\n \t}\n     }\n \n@@ -699,7 +703,7 @@ read_file_guts (cpp_reader *pfile, _cpp_file *file)\n \n   file->buffer = _cpp_convert_input (pfile,\n \t\t\t\t     CPP_OPTION (pfile, input_charset),\n-\t\t\t\t     buf, size, total,\n+\t\t\t\t     buf, size + 16, total,\n \t\t\t\t     &file->buffer_start,\n \t\t\t\t     &file->st.st_size);\n   file->buffer_valid = true;"}]}