{"sha": "2e955d50a928eac736c1e4a6eddc932d3400200a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU5NTVkNTBhOTI4ZWFjNzM2YzFlNGE2ZWRkYzkzMmQzNDAwMjAwYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-11-09T15:37:28Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-11-09T15:37:28Z"}, "message": "flag-types.h (enum sanitize_code): Add SANITIZE_SHIFT_BASE and SANITIZE_SHIFT_EXPONENT...\n\n\t* flag-types.h (enum sanitize_code): Add SANITIZE_SHIFT_BASE\n\tand SANITIZE_SHIFT_EXPONENT, change SANITIZE_SHIFT to bitwise\n\tor of them, renumber other enumerators.\n\t* opts.c (sanitizer_opts): Add shift-base and shift-exponent.\n\t* doc/invoke.texi: Document -fsanitize=shift-base and\n\t-fsanitize-shift-exponent, document -fsanitize=shift as\n\thaving those 2 suboptions.\nc-family/\n\t* c-ubsan.c (ubsan_instrument_shift): Handle split\n\t-fsanitize=shift-base and -fsanitize=shift-exponent.\ntestsuite/\n\t* gcc.dg/ubsan/c99-shift-3.c: New test.\n\t* gcc.dg/ubsan/c99-shift-4.c: New test.\n\t* gcc.dg/ubsan/c99-shift-5.c: New test.\n\t* gcc.dg/ubsan/c99-shift-6.c: New test.\n\nFrom-SVN: r242005", "tree": {"sha": "03880b28e03c433d65f4c40b64eec608dd81fdb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03880b28e03c433d65f4c40b64eec608dd81fdb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e955d50a928eac736c1e4a6eddc932d3400200a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e955d50a928eac736c1e4a6eddc932d3400200a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e955d50a928eac736c1e4a6eddc932d3400200a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e955d50a928eac736c1e4a6eddc932d3400200a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "14e7281244ddf777d822f1e99518f0e15b0bfea6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e7281244ddf777d822f1e99518f0e15b0bfea6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14e7281244ddf777d822f1e99518f0e15b0bfea6"}], "stats": {"total": 196, "additions": 173, "deletions": 23}, "files": [{"sha": "355148b2c724cdce625b0757a1676cc1d3c43512", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e955d50a928eac736c1e4a6eddc932d3400200a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e955d50a928eac736c1e4a6eddc932d3400200a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e955d50a928eac736c1e4a6eddc932d3400200a", "patch": "@@ -1,3 +1,13 @@\n+2016-11-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* flag-types.h (enum sanitize_code): Add SANITIZE_SHIFT_BASE\n+\tand SANITIZE_SHIFT_EXPONENT, change SANITIZE_SHIFT to bitwise\n+\tor of them, renumber other enumerators.\n+\t* opts.c (sanitizer_opts): Add shift-base and shift-exponent.\n+\t* doc/invoke.texi: Document -fsanitize=shift-base and\n+\t-fsanitize-shift-exponent, document -fsanitize=shift as\n+\thaving those 2 suboptions.\n+\n 2016-11-09  Richard Biener  <rguenther@suse.de>\n \n \t* fold-const.c (tree_swap_operands_p): Remove unused arg."}, {"sha": "89b3043ba48e05a6bf49fe0a5bffdba498fad94a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e955d50a928eac736c1e4a6eddc932d3400200a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e955d50a928eac736c1e4a6eddc932d3400200a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2e955d50a928eac736c1e4a6eddc932d3400200a", "patch": "@@ -1,3 +1,8 @@\n+2016-11-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-ubsan.c (ubsan_instrument_shift): Handle split\n+\t-fsanitize=shift-base and -fsanitize=shift-exponent.\n+\n 2016-11-07  Jason Merrill  <jason@redhat.com>\n \n \t* c.opt (Wc++1z-compat): New."}, {"sha": "6f93d80a74600dbf35f9e220814c135d5c9ca92d", "filename": "gcc/c-family/c-ubsan.c", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e955d50a928eac736c1e4a6eddc932d3400200a/gcc%2Fc-family%2Fc-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e955d50a928eac736c1e4a6eddc932d3400200a/gcc%2Fc-family%2Fc-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.c?ref=2e955d50a928eac736c1e4a6eddc932d3400200a", "patch": "@@ -130,7 +130,8 @@ ubsan_instrument_shift (location_t loc, enum tree_code code,\n   /* If this is not a signed operation, don't perform overflow checks.\n      Also punt on bit-fields.  */\n   if (TYPE_OVERFLOW_WRAPS (type0)\n-      || GET_MODE_BITSIZE (TYPE_MODE (type0)) != TYPE_PRECISION (type0))\n+      || GET_MODE_BITSIZE (TYPE_MODE (type0)) != TYPE_PRECISION (type0)\n+      || (flag_sanitize & SANITIZE_SHIFT_BASE) == 0)\n     ;\n \n   /* For signed x << y, in C99/C11, the following:\n@@ -171,8 +172,27 @@ ubsan_instrument_shift (location_t loc, enum tree_code code,\n   /* In case we have a SAVE_EXPR in a conditional context, we need to\n      make sure it gets evaluated before the condition.  */\n   t = fold_build2 (COMPOUND_EXPR, TREE_TYPE (t), unshare_expr (op0), t);\n-  t = fold_build2 (TRUTH_OR_EXPR, boolean_type_node, t,\n-\t\t   tt ? tt : integer_zero_node);\n+\n+  enum sanitize_code recover_kind = SANITIZE_SHIFT_EXPONENT;\n+  tree else_t = void_node;\n+  if (tt)\n+    {\n+      if ((flag_sanitize & SANITIZE_SHIFT_EXPONENT) == 0)\n+\t{\n+\t  t = fold_build1 (TRUTH_NOT_EXPR, boolean_type_node, t);\n+\t  t = fold_build2 (TRUTH_AND_EXPR, boolean_type_node, t, tt);\n+\t  recover_kind = SANITIZE_SHIFT_BASE;\n+\t}\n+      else\n+\t{\n+\t  if (flag_sanitize_undefined_trap_on_error\n+\t      || ((!(flag_sanitize_recover & SANITIZE_SHIFT_EXPONENT))\n+\t\t  == (!(flag_sanitize_recover & SANITIZE_SHIFT_BASE))))\n+\t    t = fold_build2 (TRUTH_OR_EXPR, boolean_type_node, t, tt);\n+\t  else\n+\t    else_t = tt;\n+\t}\n+    }\n \n   if (flag_sanitize_undefined_trap_on_error)\n     tt = build_call_expr_loc (loc, builtin_decl_explicit (BUILT_IN_TRAP), 0);\n@@ -185,16 +205,30 @@ ubsan_instrument_shift (location_t loc, enum tree_code code,\n       data = build_fold_addr_expr_loc (loc, data);\n \n       enum built_in_function bcode\n-\t= (flag_sanitize_recover & SANITIZE_SHIFT)\n+\t= (flag_sanitize_recover & recover_kind)\n \t  ? BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS\n \t  : BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS_ABORT;\n       tt = builtin_decl_explicit (bcode);\n       op0 = unshare_expr (op0);\n       op1 = unshare_expr (op1);\n       tt = build_call_expr_loc (loc, tt, 3, data, ubsan_encode_value (op0),\n \t\t\t\tubsan_encode_value (op1));\n+      if (else_t != void_node)\n+\t{\n+\t  bcode = (flag_sanitize_recover & SANITIZE_SHIFT_BASE)\n+\t\t  ? BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS\n+\t\t  : BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS_ABORT;\n+\t  tree else_tt = builtin_decl_explicit (bcode);\n+\t  op0 = unshare_expr (op0);\n+\t  op1 = unshare_expr (op1);\n+\t  else_tt = build_call_expr_loc (loc, else_tt, 3, data,\n+\t\t\t\t\t ubsan_encode_value (op0),\n+\t\t\t\t\t ubsan_encode_value (op1));\n+\t  else_t = fold_build3 (COND_EXPR, void_type_node, else_t,\n+\t\t\t\telse_tt, void_node);\n+\t}\n     }\n-  t = fold_build3 (COND_EXPR, void_type_node, t, tt, void_node);\n+  t = fold_build3 (COND_EXPR, void_type_node, t, tt, else_t);\n \n   return t;\n }"}, {"sha": "76b854081bbf91850a96026f91e709ff537f2ac9", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e955d50a928eac736c1e4a6eddc932d3400200a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e955d50a928eac736c1e4a6eddc932d3400200a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2e955d50a928eac736c1e4a6eddc932d3400200a", "patch": "@@ -10560,6 +10560,21 @@ at runtime.  Current suboptions are:\n This option enables checking that the result of a shift operation is\n not undefined.  Note that what exactly is considered undefined differs\n slightly between C and C++, as well as between ISO C90 and C99, etc.\n+This option has two suboptions, @option{-fsanitize=shift-base} and\n+@option{-fsanitize=shift-exponent}.\n+\n+@item -fsanitize=shift-exponent\n+@opindex fsanitize=shift-exponent\n+This option enables checking that the second argument of a shift operation\n+is not negative and is smaller than the precision of the promoted first\n+argument.\n+\n+@item -fsanitize=shift-base\n+@opindex fsanitize=shift-base\n+If the second argument of a shift operation is within range, check that the\n+result of a shift operation is not undefined.  Note that what exactly is\n+considered undefined differs slightly between C and C++, as well as between\n+ISO C90 and C99, etc.\n \n @item -fsanitize=integer-divide-by-zero\n @opindex fsanitize=integer-divide-by-zero"}, {"sha": "6c5a4cc93461d9edb1605fac916541c4aa88fcf2", "filename": "gcc/flag-types.h", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e955d50a928eac736c1e4a6eddc932d3400200a/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e955d50a928eac736c1e4a6eddc932d3400200a/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=2e955d50a928eac736c1e4a6eddc932d3400200a", "patch": "@@ -211,24 +211,26 @@ enum sanitize_code {\n   /* LeakSanitizer.  */\n   SANITIZE_LEAK = 1UL << 4,\n   /* UndefinedBehaviorSanitizer.  */\n-  SANITIZE_SHIFT = 1UL << 5,\n-  SANITIZE_DIVIDE = 1UL << 6,\n-  SANITIZE_UNREACHABLE = 1UL << 7,\n-  SANITIZE_VLA = 1UL << 8,\n-  SANITIZE_NULL = 1UL << 9,\n-  SANITIZE_RETURN = 1UL << 10,\n-  SANITIZE_SI_OVERFLOW = 1UL << 11,\n-  SANITIZE_BOOL = 1UL << 12,\n-  SANITIZE_ENUM = 1UL << 13,\n-  SANITIZE_FLOAT_DIVIDE = 1UL << 14,\n-  SANITIZE_FLOAT_CAST = 1UL << 15,\n-  SANITIZE_BOUNDS = 1UL << 16,\n-  SANITIZE_ALIGNMENT = 1UL << 17,\n-  SANITIZE_NONNULL_ATTRIBUTE = 1UL << 18,\n-  SANITIZE_RETURNS_NONNULL_ATTRIBUTE = 1UL << 19,\n-  SANITIZE_OBJECT_SIZE = 1UL << 20,\n-  SANITIZE_VPTR = 1UL << 21,\n-  SANITIZE_BOUNDS_STRICT = 1UL << 22,\n+  SANITIZE_SHIFT_BASE = 1UL << 5,\n+  SANITIZE_SHIFT_EXPONENT = 1UL << 6,\n+  SANITIZE_DIVIDE = 1UL << 7,\n+  SANITIZE_UNREACHABLE = 1UL << 8,\n+  SANITIZE_VLA = 1UL << 9,\n+  SANITIZE_NULL = 1UL << 10,\n+  SANITIZE_RETURN = 1UL << 11,\n+  SANITIZE_SI_OVERFLOW = 1UL << 12,\n+  SANITIZE_BOOL = 1UL << 13,\n+  SANITIZE_ENUM = 1UL << 14,\n+  SANITIZE_FLOAT_DIVIDE = 1UL << 15,\n+  SANITIZE_FLOAT_CAST = 1UL << 16,\n+  SANITIZE_BOUNDS = 1UL << 17,\n+  SANITIZE_ALIGNMENT = 1UL << 18,\n+  SANITIZE_NONNULL_ATTRIBUTE = 1UL << 19,\n+  SANITIZE_RETURNS_NONNULL_ATTRIBUTE = 1UL << 20,\n+  SANITIZE_OBJECT_SIZE = 1UL << 21,\n+  SANITIZE_VPTR = 1UL << 22,\n+  SANITIZE_BOUNDS_STRICT = 1UL << 23,\n+  SANITIZE_SHIFT = SANITIZE_SHIFT_BASE | SANITIZE_SHIFT_EXPONENT,\n   SANITIZE_UNDEFINED = SANITIZE_SHIFT | SANITIZE_DIVIDE | SANITIZE_UNREACHABLE\n \t\t       | SANITIZE_VLA | SANITIZE_NULL | SANITIZE_RETURN\n \t\t       | SANITIZE_SI_OVERFLOW | SANITIZE_BOOL | SANITIZE_ENUM"}, {"sha": "d2d6100c0f7c76c799146e97a1303a587addf67d", "filename": "gcc/opts.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e955d50a928eac736c1e4a6eddc932d3400200a/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e955d50a928eac736c1e4a6eddc932d3400200a/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=2e955d50a928eac736c1e4a6eddc932d3400200a", "patch": "@@ -1477,6 +1477,8 @@ const struct sanitizer_opts_s sanitizer_opts[] =\n   SANITIZER_OPT (thread, SANITIZE_THREAD, false),\n   SANITIZER_OPT (leak, SANITIZE_LEAK, false),\n   SANITIZER_OPT (shift, SANITIZE_SHIFT, true),\n+  SANITIZER_OPT (shift-base, SANITIZE_SHIFT_BASE, true),\n+  SANITIZER_OPT (shift-exponent, SANITIZE_SHIFT_EXPONENT, true),\n   SANITIZER_OPT (integer-divide-by-zero, SANITIZE_DIVIDE, true),\n   SANITIZER_OPT (undefined, SANITIZE_UNDEFINED, true),\n   SANITIZER_OPT (unreachable, SANITIZE_UNREACHABLE, false),"}, {"sha": "dd221bbb136bb7426402ceb5af1798c9902fa516", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e955d50a928eac736c1e4a6eddc932d3400200a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e955d50a928eac736c1e4a6eddc932d3400200a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2e955d50a928eac736c1e4a6eddc932d3400200a", "patch": "@@ -1,3 +1,10 @@\n+2016-11-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/ubsan/c99-shift-3.c: New test.\n+\t* gcc.dg/ubsan/c99-shift-4.c: New test.\n+\t* gcc.dg/ubsan/c99-shift-5.c: New test.\n+\t* gcc.dg/ubsan/c99-shift-6.c: New test.\n+\n 2016-11-09  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.dg/tree-ssa/builtins-folding-generic.c (main): Add new"}, {"sha": "ebb4f660ea9c0448a6752e6d86776836a4629c04", "filename": "gcc/testsuite/gcc.dg/ubsan/c99-shift-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e955d50a928eac736c1e4a6eddc932d3400200a/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fc99-shift-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e955d50a928eac736c1e4a6eddc932d3400200a/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fc99-shift-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fc99-shift-3.c?ref=2e955d50a928eac736c1e4a6eddc932d3400200a", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=shift-base -fno-sanitize=shift-exponent -w -std=c99\" } */\n+\n+int\n+main (void)\n+{\n+  int a = -42;\n+  int b = -43;\n+  volatile int c = 129;\n+  int d = 1;\n+  a << 1;\n+  b << c;\n+  a << 1;\n+  d <<= 31;\n+}\n+/* { dg-output \"left shift of negative value -42\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*left shift of negative value -42\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*left shift of 1 by 31 places cannot be represented in type 'int'\" } */"}, {"sha": "95c9616fb57a3e541bc720da0b772c68032128c2", "filename": "gcc/testsuite/gcc.dg/ubsan/c99-shift-4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e955d50a928eac736c1e4a6eddc932d3400200a/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fc99-shift-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e955d50a928eac736c1e4a6eddc932d3400200a/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fc99-shift-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fc99-shift-4.c?ref=2e955d50a928eac736c1e4a6eddc932d3400200a", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=shift-exponent -fno-sanitize=shift-base -w -std=c99\" } */\n+\n+int\n+main (void)\n+{\n+  int a = -42;\n+  int b = -43;\n+  volatile int c = 129;\n+  int d = 1;\n+  b << c;\n+  a << 1;\n+  a << 1;\n+  d <<= 31;\n+  b << (c + 1);\n+}\n+/* { dg-output \"shift exponent 129 is too large for \\[^\\n\\r]*-bit type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*shift exponent 130 is too large for \\[^\\n\\r]*-bit type 'int'\" } */"}, {"sha": "0697997392e3a7dca110d55caa18d6bb6b661f74", "filename": "gcc/testsuite/gcc.dg/ubsan/c99-shift-5.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e955d50a928eac736c1e4a6eddc932d3400200a/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fc99-shift-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e955d50a928eac736c1e4a6eddc932d3400200a/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fc99-shift-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fc99-shift-5.c?ref=2e955d50a928eac736c1e4a6eddc932d3400200a", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"ubsan\" } */\n+/* { dg-options \"-fsanitize=shift -fsanitize-recover=shift-base -fno-sanitize-recover=shift-exponent -w -std=c99\" } */\n+\n+int\n+main (void)\n+{\n+  int a = -42;\n+  int b = -43;\n+  volatile int c = 129;\n+  int d = 1;\n+  a << 1;\n+  a << 1;\n+  d <<= 31;\n+  b << c;\n+  a << 1;\n+}\n+/* { dg-output \"left shift of negative value -42\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*left shift of negative value -42\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*left shift of 1 by 31 places cannot be represented in type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*shift exponent 129 is too large for \\[^\\n\\r]*-bit type 'int'\" } */"}, {"sha": "8bf700c5a4784342009fea611b7c5e44f527dbe9", "filename": "gcc/testsuite/gcc.dg/ubsan/c99-shift-6.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e955d50a928eac736c1e4a6eddc932d3400200a/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fc99-shift-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e955d50a928eac736c1e4a6eddc932d3400200a/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fc99-shift-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fc99-shift-6.c?ref=2e955d50a928eac736c1e4a6eddc932d3400200a", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"ubsan\" } */\n+/* { dg-options \"-fsanitize=shift -fsanitize-recover=shift-exponent -fno-sanitize-recover=shift-base -w -std=c99\" } */\n+\n+int\n+main (void)\n+{\n+  int a = -42;\n+  int b = -43;\n+  volatile int c = 129;\n+  1 << c;\n+  1 << (c + 1);\n+  a << 1;\n+  b << 1;\n+}\n+/* { dg-output \"shift exponent 129 is too large for \\[^\\n\\r]*-bit type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*shift exponent 130 is too large for \\[^\\n\\r]*-bit type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*left shift of negative value -42\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}]}