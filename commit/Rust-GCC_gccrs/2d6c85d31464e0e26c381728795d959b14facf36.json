{"sha": "2d6c85d31464e0e26c381728795d959b14facf36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ2Yzg1ZDMxNDY0ZTBlMjZjMzgxNzI4Nzk1ZDk1OWIxNGZhY2YzNg==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2005-05-13T16:56:11Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2005-05-13T16:56:11Z"}, "message": "re PR rtl-optimization/20769 (bt-load.c doesn't take nonlocal gotos into account.)\n\n\tPR rtl-optimization/20769:\n\t* bt-load.c (compute_defs_uses_and_gen): Check for the blockage\n\tpattern emitted by expand_nl_goto_receiver.\n\n\tPR middle-end/20793:\n\t* integrate.c (allocate_initial_values): Update register liveness\n\tinformation.\n\nFrom-SVN: r99668", "tree": {"sha": "13100fc3273a13143ae4328a09cbb1accb1ec438", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13100fc3273a13143ae4328a09cbb1accb1ec438"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d6c85d31464e0e26c381728795d959b14facf36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d6c85d31464e0e26c381728795d959b14facf36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d6c85d31464e0e26c381728795d959b14facf36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d6c85d31464e0e26c381728795d959b14facf36/comments", "author": null, "committer": null, "parents": [{"sha": "30e5a198438e9b3e70aa7f668e9bf747424098b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30e5a198438e9b3e70aa7f668e9bf747424098b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30e5a198438e9b3e70aa7f668e9bf747424098b3"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "eff05d4046c14aea71a7dbab908885e5751b139e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d6c85d31464e0e26c381728795d959b14facf36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d6c85d31464e0e26c381728795d959b14facf36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d6c85d31464e0e26c381728795d959b14facf36", "patch": "@@ -1,3 +1,13 @@\n+2005-05-13  J\"orn Rennecke <joern.rennecke@st.com>\n+\n+\tPR rtl-optimization/20769:\n+\t* bt-load.c (compute_defs_uses_and_gen): Check for the blockage\n+\tpattern emitted by expand_nl_goto_receiver.\n+\n+\tPR middle-end/20793:\n+\t* integrate.c (allocate_initial_values): Update register liveness\n+\tinformation.\n+\n 2005-05-13  Josh Conner  <jconner@apple.com>\n \n \t* arm.c (arm_return_in_memory): Add handling for vector return types."}, {"sha": "47ac16a82fbc9697fbf3f0b49dbe9f372f8c64ed", "filename": "gcc/bt-load.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d6c85d31464e0e26c381728795d959b14facf36/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d6c85d31464e0e26c381728795d959b14facf36/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=2d6c85d31464e0e26c381728795d959b14facf36", "patch": "@@ -506,6 +506,22 @@ compute_defs_uses_and_gen (fibheap_t all_btr_defs, btr_def *def_array,\n \t\t  SET_BIT (btr_defset[regno - first_btr], insn_uid);\n \t\t  note_other_use_this_block (regno, info.users_this_bb);\n \t\t}\n+\t      /* Check for the blockage emitted by expand_nl_goto_receiver.  */\n+\t      else if (current_function_has_nonlocal_label\n+\t\t       && GET_CODE (PATTERN (insn)) == ASM_INPUT)\n+\t\t{\n+\t\t  btr_user user;\n+\n+\t\t  /* Do the equivalent of calling note_other_use_this_block\n+\t\t     for every target register.  */\n+\t\t  for (user = info.users_this_bb; user != NULL;\n+\t\t       user = user->next)\n+\t\t    if (user->use)\n+\t\t      user->other_use_this_block = 1;\n+\t\t  IOR_HARD_REG_SET (info.btrs_written_in_block, all_btrs);\n+\t\t  IOR_HARD_REG_SET (info.btrs_live_in_block, all_btrs);\n+\t\t  sbitmap_zero (info.bb_gen);\n+\t\t}\n \t      else\n \t\t{\n \t\t  if (btr_referenced_p (PATTERN (insn), NULL))"}, {"sha": "3573b443b95ea5c618d4c057984c1e4cb42dc543", "filename": "gcc/integrate.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d6c85d31464e0e26c381728795d959b14facf36/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d6c85d31464e0e26c381728795d959b14facf36/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=2d6c85d31464e0e26c381728795d959b14facf36", "patch": "@@ -392,11 +392,23 @@ allocate_initial_values (rtx *reg_equiv_memory_loc ATTRIBUTE_UNUSED)\n \t    reg_equiv_memory_loc[regno] = x;\n \t  else\n \t    {\n+\t      basic_block bb;\n+\t      int new_regno;\n+\n \t      gcc_assert (REG_P (x));\n-\t      reg_renumber[regno] = REGNO (x);\n+\t      new_regno = REGNO (x);\n+\t      reg_renumber[regno] = new_regno;\n \t      /* Poke the regno right into regno_reg_rtx so that even\n \t     \t fixed regs are accepted.  */\n-\t      REGNO (ivs->entries[i].pseudo) = REGNO (x);\n+\t      REGNO (ivs->entries[i].pseudo) = new_regno;\n+\t      /* Update global register liveness information.  */\n+\t      FOR_EACH_BB (bb)\n+\t\t{\n+\t\t  if (REGNO_REG_SET_P(bb->global_live_at_start, regno))\n+\t\t    SET_REGNO_REG_SET (bb->global_live_at_start, new_regno);\n+\t\t  if (REGNO_REG_SET_P(bb->global_live_at_end, regno))\n+\t\t    SET_REGNO_REG_SET (bb->global_live_at_end, new_regno);\n+\t\t}\n \t    }\n \t}\n     }"}]}