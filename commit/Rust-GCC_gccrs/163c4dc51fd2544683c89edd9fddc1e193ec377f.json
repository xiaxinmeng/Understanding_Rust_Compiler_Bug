{"sha": "163c4dc51fd2544683c89edd9fddc1e193ec377f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYzYzRkYzUxZmQyNTQ0NjgzYzg5ZWRkOWZkZGMxZTE5M2VjMzc3Zg==", "commit": {"author": {"name": "Martin v. L\u00f6wis", "email": "loewis@gcc.gnu.org", "date": "1998-10-19T23:23:04Z"}, "committer": {"name": "Martin v. L\u00f6wis", "email": "loewis@gcc.gnu.org", "date": "1998-10-19T23:23:04Z"}, "message": "New test case.\n\nFrom-SVN: r23192", "tree": {"sha": "7c74edba8a27c515350f02d56d144283f5ed67f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c74edba8a27c515350f02d56d144283f5ed67f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/163c4dc51fd2544683c89edd9fddc1e193ec377f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/163c4dc51fd2544683c89edd9fddc1e193ec377f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/163c4dc51fd2544683c89edd9fddc1e193ec377f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/163c4dc51fd2544683c89edd9fddc1e193ec377f/comments", "author": null, "committer": null, "parents": [{"sha": "15f8470fd056c08d1c0a47417dafb7092b4b0cc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15f8470fd056c08d1c0a47417dafb7092b4b0cc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15f8470fd056c08d1c0a47417dafb7092b4b0cc2"}], "stats": {"total": 121, "additions": 121, "deletions": 0}, "files": [{"sha": "835b42659b8aba8d7113309626f7164a35b3624c", "filename": "gcc/testsuite/g++.old-deja/g++.martin/new1.C", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/163c4dc51fd2544683c89edd9fddc1e193ec377f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.martin%2Fnew1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/163c4dc51fd2544683c89edd9fddc1e193ec377f/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.martin%2Fnew1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.martin%2Fnew1.C?ref=163c4dc51fd2544683c89edd9fddc1e193ec377f", "patch": "@@ -0,0 +1,121 @@\n+//Lifetime of temporaries: \n+//egcs 2.92 performs cleanup for temporaries inside new expressions\n+//after the new is complete, not at the end of the full expression.\n+\n+#include <new>\n+#include <cstdlib>\n+#include <cstdio>\n+\n+bool new_throws;\n+bool ctor_throws;\n+\n+int new_done;\n+int ctor_done;\n+int func_done;\n+int dtor_done;\n+int delete_done;\n+\n+int count;\n+\n+void init()\n+{\n+  new_throws = ctor_throws = false;\n+  new_done = ctor_done = func_done = dtor_done = delete_done = count = 0;\n+}\n+\n+struct line_error{\n+  int line;\n+  line_error(int i):line(i){}\n+};\n+\n+#define CHECK(cond)  if(!(cond))throw std::line_error(__LINE__);\n+\n+struct A{\n+  A(int){\n+    ctor_done = ++count;\n+    if(ctor_throws)\n+      throw 1;\n+  }\n+  A(const A&){\n+    CHECK(false); //no copy constructors in this code\n+  }\n+  ~A(){\n+    dtor_done = ++count;\n+  }\n+  A* addr(){return this;}\n+};\n+\n+struct B{\n+  B(A*){}\n+  void* operator new(size_t s){\n+    new_done = ++count;\n+    if(new_throws)\n+      throw 1;\n+    return malloc(s);\n+  }\n+  void operator delete(void *){\n+    delete_done = ++count;\n+  }\n+};\n+\n+void func(B* )\n+{\n+  func_done = ++count;\n+}\n+\n+void test1()\n+{\n+  init();\n+  try{\n+    func(new B(A(10).addr()));\n+  }catch(int){\n+  }\n+  CHECK(new_done==1);\n+  CHECK(ctor_done==2);\n+  CHECK(func_done==3);\n+  CHECK(dtor_done==4);\n+  CHECK(delete_done==0);\n+}\n+\n+void test2()\n+{\n+  init();\n+  new_throws = true;\n+  try{\n+    func(new B(A(10).addr()));\n+  }catch(int){\n+  }\n+  CHECK(new_done==1);\n+  CHECK(ctor_done==0);\n+  CHECK(func_done==0);\n+  CHECK(dtor_done==0);\n+  CHECK(delete_done==0);\n+}\n+\n+void test3()\n+{\n+  init();\n+  ctor_throws = true;\n+  try{\n+    func(new B(A(10).addr()));\n+  }catch(int){\n+  }\n+  CHECK(new_done==1);\n+  CHECK(ctor_done==2);\n+  CHECK(func_done==0);\n+  CHECK(dtor_done==0);\n+  CHECK(delete_done==3);\n+}\n+\n+int main()\n+{\n+  try{\n+    test1();\n+    test2();\n+    test3();\n+  }catch(line_error e){\n+    printf(\"Got error in line %d\\n\",e.line);\n+    return 1;\n+  }\n+  return 0;\n+}"}]}