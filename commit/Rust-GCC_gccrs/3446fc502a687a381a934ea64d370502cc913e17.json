{"sha": "3446fc502a687a381a934ea64d370502cc913e17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ0NmZjNTAyYTY4N2EzODFhOTM0ZWE2NGQzNzA1MDJjYzkxM2UxNw==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-09-14T19:00:26Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-09-14T19:00:26Z"}, "message": "re PR fortran/35840 (ICE for character expression in I/O specifier)\n\n2008-09-14  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\t    Tobias Burnus  <burnus@net.b.de>\n\n\tPR fortran/35840\n\t* io.c (match_vtag): Add tag name to error message.\n\t(match_out_tag): Cleanup whitespace.\n\t(gfc_resolve_dt): Resolve id and async tags. \n\nCo-Authored-By: Tobias Burnus <burnus@net-b.de>\n\nFrom-SVN: r140366", "tree": {"sha": "b31161521a5e2658e17d08f34fb6524835969d73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b31161521a5e2658e17d08f34fb6524835969d73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3446fc502a687a381a934ea64d370502cc913e17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3446fc502a687a381a934ea64d370502cc913e17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3446fc502a687a381a934ea64d370502cc913e17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3446fc502a687a381a934ea64d370502cc913e17/comments", "author": null, "committer": null, "parents": [{"sha": "c5cc92f5c1118857dbc67f4d86d8fed8be498fc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5cc92f5c1118857dbc67f4d86d8fed8be498fc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5cc92f5c1118857dbc67f4d86d8fed8be498fc9"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "4d4752a251b185587b5699fe097fe70d766290ed", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3446fc502a687a381a934ea64d370502cc913e17/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3446fc502a687a381a934ea64d370502cc913e17/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3446fc502a687a381a934ea64d370502cc913e17", "patch": "@@ -1,3 +1,11 @@\n+2008-09-14  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\t    Tobias Burnus  <burnus@net.b.de>\n+\n+\tPR fortran/35840\n+\t* io.c (match_vtag): Add tag name to error message.\n+\t(match_out_tag): Cleanup whitespace.\n+\t(gfc_resolve_dt): Resolve id and async tags. \n+\n 2008-09-13  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/35770"}, {"sha": "fb5ef3e4d46d030a4793f8fe1b4f0bf2582ce872", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3446fc502a687a381a934ea64d370502cc913e17/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3446fc502a687a381a934ea64d370502cc913e17/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=3446fc502a687a381a934ea64d370502cc913e17", "patch": "@@ -1121,14 +1121,15 @@ match_vtag (const io_tag *tag, gfc_expr **v)\n \n   if (result->symtree->n.sym->attr.intent == INTENT_IN)\n     {\n-      gfc_error (\"Variable tag cannot be INTENT(IN) at %C\");\n+      gfc_error (\"Variable %s cannot be INTENT(IN) at %C\", tag->name);\n       gfc_free_expr (result);\n       return MATCH_ERROR;\n     }\n \n   if (gfc_pure (NULL) && gfc_impure_variable (result->symtree->n.sym))\n     {\n-      gfc_error (\"Variable tag cannot be assigned in PURE procedure at %C\");\n+      gfc_error (\"Variable %s cannot be assigned in PURE procedure at %C\",\n+\t\t tag->name);\n       gfc_free_expr (result);\n       return MATCH_ERROR;\n     }\n@@ -1141,13 +1142,13 @@ match_vtag (const io_tag *tag, gfc_expr **v)\n /* Match I/O tags that cause variables to become redefined.  */\n \n static match\n-match_out_tag(const io_tag *tag, gfc_expr **result)\n+match_out_tag (const io_tag *tag, gfc_expr **result)\n {\n   match m;\n \n-  m = match_vtag(tag, result);\n+  m = match_vtag (tag, result);\n   if (m == MATCH_YES)\n-    gfc_check_do_variable((*result)->symtree);\n+    gfc_check_do_variable ((*result)->symtree);\n \n   return m;\n }\n@@ -2472,6 +2473,7 @@ gfc_resolve_dt (gfc_dt *dt)\n   RESOLVE_TAG (&tag_rec, dt->rec);\n   RESOLVE_TAG (&tag_spos, dt->rec);\n   RESOLVE_TAG (&tag_advance, dt->advance);\n+  RESOLVE_TAG (&tag_id, dt->id);\n   RESOLVE_TAG (&tag_iomsg, dt->iomsg);\n   RESOLVE_TAG (&tag_iostat, dt->iostat);\n   RESOLVE_TAG (&tag_size, dt->size);\n@@ -2481,6 +2483,7 @@ gfc_resolve_dt (gfc_dt *dt)\n   RESOLVE_TAG (&tag_e_round, dt->round);\n   RESOLVE_TAG (&tag_e_blank, dt->blank);\n   RESOLVE_TAG (&tag_e_decimal, dt->decimal);\n+  RESOLVE_TAG (&tag_e_async, dt->asynchronous);\n \n   e = dt->io_unit;\n   if (gfc_resolve_expr (e) == SUCCESS"}]}