{"sha": "ac8d552768fee1afee7a7a325980ead8160705d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM4ZDU1Mjc2OGZlZTFhZmVlN2E3YTMyNTk4MGVhZDgxNjA3MDVkOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-09-05T08:52:50Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-09-05T08:52:50Z"}, "message": "Removed, no longer used.\n\nFrom-SVN: r103898", "tree": {"sha": "68b9be0211294683aca529c3141f035f6bc89b30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68b9be0211294683aca529c3141f035f6bc89b30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac8d552768fee1afee7a7a325980ead8160705d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac8d552768fee1afee7a7a325980ead8160705d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac8d552768fee1afee7a7a325980ead8160705d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac8d552768fee1afee7a7a325980ead8160705d9/comments", "author": null, "committer": null, "parents": [{"sha": "2400f4e50b3e5b58f7e6f52acc7a820afd8ed0ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2400f4e50b3e5b58f7e6f52acc7a820afd8ed0ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2400f4e50b3e5b58f7e6f52acc7a820afd8ed0ed"}], "stats": {"total": 332, "additions": 0, "deletions": 332}, "files": [{"sha": "6d8949657a81787db0ce8aac38bef351e98ff0bf", "filename": "gcc/ada/dec-io.adb", "status": "removed", "additions": 0, "deletions": 209, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2400f4e50b3e5b58f7e6f52acc7a820afd8ed0ed/gcc%2Fada%2Fdec-io.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2400f4e50b3e5b58f7e6f52acc7a820afd8ed0ed/gcc%2Fada%2Fdec-io.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdec-io.adb?ref=2400f4e50b3e5b58f7e6f52acc7a820afd8ed0ed", "patch": "@@ -1,209 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                               D E C . I O                                --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---          Copyright (C) 2001-2005 Free Software Foundation, Inc.          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n--- Boston, MA 02110-1301, USA.                                              --\n---                                                                          --\n--- As a special exception,  if other files  instantiate  generics from this --\n--- unit, or you link  this unit with other files  to produce an executable, --\n--- this  unit  does not  by itself cause  the resulting  executable  to  be --\n--- covered  by the  GNU  General  Public  License.  This exception does not --\n--- however invalidate  any other reasons why  the executable file  might be --\n--- covered by the  GNU Public License.                                      --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This is an AlphaVMS package that provides the interface between\n---  GNAT, DECLib IO packages and the DECLib Bliss library.\n-\n-pragma Extend_System (Aux_DEC);\n-\n-with System;                            use  System;\n-with System.Task_Primitives;            use  System.Task_Primitives;\n-with System.Task_Primitives.Operations; use  System.Task_Primitives.Operations;\n-with IO_Exceptions;                     use  IO_Exceptions;\n-with Aux_IO_Exceptions;                 use  Aux_IO_Exceptions;\n-\n-package body DEC.IO is\n-\n-   type File_Type is record\n-      FCB : Integer   := 0;   -- Temporary\n-      SEQ : Integer   := 0;\n-   end record;\n-\n-   for File_Type'Size use 64;\n-   for File_Type'Alignment use 8;\n-\n-   for File_Type use record\n-      FCB at 0 range 0 .. 31;\n-      SEQ at 4 range 0 .. 31;\n-   end record;\n-\n-   -----------------------\n-   -- Local Subprograms --\n-   -----------------------\n-\n-   function GNAT_Name_64 (File : File_Type) return String;\n-   pragma Export_Function (GNAT_Name_64, \"GNAT$NAME_64\");\n-   --  ??? comment\n-\n-   function GNAT_Form_64 (File : File_Type) return String;\n-   pragma Export_Function (GNAT_Form_64, \"GNAT$FORM_64\");\n-   --  ??? comment\n-\n-   procedure Init_IO;\n-   pragma Interface (C, Init_IO);\n-   pragma Import_Procedure (Init_IO, \"GNAT$$INIT_IO\");\n-   --  ??? comment\n-\n-   ----------------\n-   -- IO_Locking --\n-   ----------------\n-\n-   package body IO_Locking is\n-\n-      ------------------\n-      -- Create_Mutex --\n-      ------------------\n-\n-      function Create_Mutex return Access_Mutex is\n-         M : constant Access_Mutex := new RTS_Lock;\n-\n-      begin\n-         Initialize_Lock (M, Global_Task_Level);\n-         return M;\n-      end Create_Mutex;\n-\n-      -------------\n-      -- Acquire --\n-      -------------\n-\n-      procedure Acquire (M : Access_Mutex) is\n-      begin\n-         Write_Lock (M);\n-      end Acquire;\n-\n-      -------------\n-      -- Release --\n-      -------------\n-\n-      procedure Release (M : Access_Mutex) is\n-      begin\n-         Unlock (M);\n-      end Release;\n-\n-   end IO_Locking;\n-\n-   ------------------\n-   -- GNAT_Name_64 --\n-   ------------------\n-\n-   function GNAT_Name_64 (File : File_Type) return String is\n-      subtype Buffer_Subtype is String (1 .. 8192);\n-\n-      Buffer : Buffer_Subtype;\n-      Length : System.Integer_32;\n-\n-      procedure Get_Name\n-        (File    : System.Address;\n-         MaxLen  : System.Integer_32;\n-         Buffer  : out Buffer_Subtype;\n-         Length  : out System.Integer_32);\n-      pragma Interface (C, Get_Name);\n-      pragma Import_Procedure\n-        (Get_Name, \"GNAT$FILE_NAME\",\n-         Mechanism => (Value, Value, Reference, Reference));\n-\n-   begin\n-      Get_Name (File'Address, Buffer'Length, Buffer, Length);\n-      return Buffer (1 .. Integer (Length));\n-   end GNAT_Name_64;\n-\n-   ------------------\n-   -- GNAT_Form_64 --\n-   ------------------\n-\n-   function GNAT_Form_64 (File : File_Type) return String is\n-      subtype Buffer_Subtype is String (1 .. 8192);\n-\n-      Buffer : Buffer_Subtype;\n-      Length : System.Integer_32;\n-\n-      procedure Get_Form\n-        (File    : System.Address;\n-         MaxLen  : System.Integer_32;\n-         Buffer  : out Buffer_Subtype;\n-         Length  : out System.Integer_32);\n-      pragma Interface (C, Get_Form);\n-      pragma Import_Procedure\n-        (Get_Form, \"GNAT$FILE_FORM\",\n-         Mechanism => (Value, Value, Reference, Reference));\n-\n-   begin\n-      Get_Form (File'Address, Buffer'Length, Buffer, Length);\n-      return Buffer (1 .. Integer (Length));\n-   end GNAT_Form_64;\n-\n-   ------------------------\n-   -- Raise_IO_Exception --\n-   ------------------------\n-\n-   procedure Raise_IO_Exception (EN : Exception_Number) is\n-   begin\n-      case EN is\n-         when GNAT_EN_LOCK_ERROR =>      raise LOCK_ERROR;\n-         when GNAT_EN_EXISTENCE_ERROR => raise EXISTENCE_ERROR;\n-         when GNAT_EN_KEY_ERROR =>       raise KEY_ERROR;\n-         when GNAT_EN_KEYSIZERR =>       raise PROGRAM_ERROR; -- KEYSIZERR;\n-         when GNAT_EN_STAOVF =>          raise STORAGE_ERROR; -- STAOVF;\n-         when GNAT_EN_CONSTRAINT_ERRO => raise CONSTRAINT_ERROR;\n-         when GNAT_EN_IOSYSFAILED =>     raise DEVICE_ERROR;  -- IOSYSFAILED;\n-         when GNAT_EN_LAYOUT_ERROR =>    raise LAYOUT_ERROR;\n-         when GNAT_EN_STORAGE_ERROR =>   raise STORAGE_ERROR;\n-         when GNAT_EN_DATA_ERROR =>      raise DATA_ERROR;\n-         when GNAT_EN_DEVICE_ERROR =>    raise DEVICE_ERROR;\n-         when GNAT_EN_END_ERROR =>       raise END_ERROR;\n-         when GNAT_EN_MODE_ERROR =>      raise MODE_ERROR;\n-         when GNAT_EN_NAME_ERROR =>      raise NAME_ERROR;\n-         when GNAT_EN_STATUS_ERROR =>    raise STATUS_ERROR;\n-         when GNAT_EN_NOT_OPEN =>        raise USE_ERROR;   -- NOT_OPEN;\n-         when GNAT_EN_ALREADY_OPEN =>    raise USE_ERROR;   -- ALREADY_OPEN;\n-         when GNAT_EN_USE_ERROR =>       raise USE_ERROR;\n-         when GNAT_EN_UNSUPPORTED =>     raise USE_ERROR;   -- UNSUPPORTED;\n-         when GNAT_EN_FAC_MODE_MISMAT => raise USE_ERROR;   -- FAC_MODE_MISMAT;\n-         when GNAT_EN_ORG_MISMATCH =>    raise USE_ERROR;   -- ORG_MISMATCH;\n-         when GNAT_EN_RFM_MISMATCH =>    raise USE_ERROR;   -- RFM_MISMATCH;\n-         when GNAT_EN_RAT_MISMATCH =>    raise USE_ERROR;   -- RAT_MISMATCH;\n-         when GNAT_EN_MRS_MISMATCH =>    raise USE_ERROR;   -- MRS_MISMATCH;\n-         when GNAT_EN_MRN_MISMATCH =>    raise USE_ERROR;   -- MRN_MISMATCH;\n-         when GNAT_EN_KEY_MISMATCH =>    raise USE_ERROR;   -- KEY_MISMATCH;\n-         when GNAT_EN_MAXLINEXC =>       raise CONSTRAINT_ERROR; -- MAXLINEXC;\n-         when GNAT_EN_LINEXCMRS =>       raise CONSTRAINT_ERROR; -- LINEXCMRS;\n-      end case;\n-   end Raise_IO_Exception;\n-\n--------------------------\n--- Package Elaboration --\n--------------------------\n-\n-begin\n-   Init_IO;\n-end DEC.IO;"}, {"sha": "576f7bc849b50a78eb81c5f3e384162ddc1587d8", "filename": "gcc/ada/dec-io.ads", "status": "removed", "additions": 0, "deletions": 123, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2400f4e50b3e5b58f7e6f52acc7a820afd8ed0ed/gcc%2Fada%2Fdec-io.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2400f4e50b3e5b58f7e6f52acc7a820afd8ed0ed/gcc%2Fada%2Fdec-io.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdec-io.ads?ref=2400f4e50b3e5b58f7e6f52acc7a820afd8ed0ed", "patch": "@@ -1,123 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                               D E C . I O                                --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---          Copyright (C) 1996-2005 Free Software Foundation, Inc.          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n--- Boston, MA 02110-1301, USA.                                              --\n---                                                                          --\n--- As a special exception,  if other files  instantiate  generics from this --\n--- unit, or you link  this unit with other files  to produce an executable, --\n--- this  unit  does not  by itself cause  the resulting  executable  to  be --\n--- covered  by the  GNU  General  Public  License.  This exception does not --\n--- however invalidate  any other reasons why  the executable file  might be --\n--- covered by the  GNU Public License.                                      --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This is an AlphaVMS package that contains the declarations and\n---  function specifications needed by the DECLib IO packages.\n-\n-with System.Task_Primitives;\n-package DEC.IO is\n-private\n-\n-   type Exception_Number is (\n-     GNAT_EN_LOCK_ERROR,\n-     GNAT_EN_EXISTENCE_ERROR,\n-     GNAT_EN_KEY_ERROR,\n-     GNAT_EN_KEYSIZERR,\n-     GNAT_EN_STAOVF,\n-     GNAT_EN_CONSTRAINT_ERRO,\n-     GNAT_EN_IOSYSFAILED,\n-     GNAT_EN_LAYOUT_ERROR,\n-     GNAT_EN_STORAGE_ERROR,\n-     GNAT_EN_DATA_ERROR,\n-     GNAT_EN_DEVICE_ERROR,\n-     GNAT_EN_END_ERROR,\n-     GNAT_EN_MODE_ERROR,\n-     GNAT_EN_NAME_ERROR,\n-     GNAT_EN_STATUS_ERROR,\n-     GNAT_EN_NOT_OPEN,\n-     GNAT_EN_ALREADY_OPEN,\n-     GNAT_EN_USE_ERROR,\n-     GNAT_EN_UNSUPPORTED,\n-     GNAT_EN_FAC_MODE_MISMAT,\n-     GNAT_EN_ORG_MISMATCH,\n-     GNAT_EN_RFM_MISMATCH,\n-     GNAT_EN_RAT_MISMATCH,\n-     GNAT_EN_MRS_MISMATCH,\n-     GNAT_EN_MRN_MISMATCH,\n-     GNAT_EN_KEY_MISMATCH,\n-     GNAT_EN_MAXLINEXC,\n-     GNAT_EN_LINEXCMRS);\n-\n-   for Exception_Number'Size use 32;\n-\n-   for Exception_Number use (\n-     GNAT_EN_LOCK_ERROR => 1,\n-     GNAT_EN_EXISTENCE_ERROR => 2,\n-     GNAT_EN_KEY_ERROR => 3,\n-     GNAT_EN_KEYSIZERR => 4,\n-     GNAT_EN_STAOVF => 5,\n-     GNAT_EN_CONSTRAINT_ERRO => 6,\n-     GNAT_EN_IOSYSFAILED => 7,\n-     GNAT_EN_LAYOUT_ERROR => 8,\n-     GNAT_EN_STORAGE_ERROR => 9,\n-     GNAT_EN_DATA_ERROR => 10,\n-     GNAT_EN_DEVICE_ERROR => 11,\n-     GNAT_EN_END_ERROR => 12,\n-     GNAT_EN_MODE_ERROR => 13,\n-     GNAT_EN_NAME_ERROR => 14,\n-     GNAT_EN_STATUS_ERROR => 15,\n-     GNAT_EN_NOT_OPEN => 16,\n-     GNAT_EN_ALREADY_OPEN => 17,\n-     GNAT_EN_USE_ERROR => 18,\n-     GNAT_EN_UNSUPPORTED => 19,\n-     GNAT_EN_FAC_MODE_MISMAT => 20,\n-     GNAT_EN_ORG_MISMATCH => 21,\n-     GNAT_EN_RFM_MISMATCH => 22,\n-     GNAT_EN_RAT_MISMATCH => 23,\n-     GNAT_EN_MRS_MISMATCH => 24,\n-     GNAT_EN_MRN_MISMATCH => 25,\n-     GNAT_EN_KEY_MISMATCH => 26,\n-     GNAT_EN_MAXLINEXC => 27,\n-     GNAT_EN_LINEXCMRS => 28);\n-\n-   procedure Raise_IO_Exception (EN : Exception_Number);\n-   pragma Export_Procedure (Raise_IO_Exception, \"GNAT$RAISE_IO_EXCEPTION\",\n-      Mechanism => Value);\n-\n-   package IO_Locking is\n-      type Access_Mutex is private;\n-      function Create_Mutex return Access_Mutex;\n-      procedure Acquire (M : Access_Mutex);\n-      procedure Release (M : Access_Mutex);\n-\n-   private\n-      type Access_Mutex is access System.Task_Primitives.RTS_Lock;\n-      pragma Export_Function (Create_Mutex, \"GNAT$CREATE_MUTEX\",\n-          Mechanism => Value);\n-      pragma Export_Procedure (Acquire, \"GNAT$ACQUIRE_MUTEX\",\n-          Mechanism => Value);\n-      pragma Export_Procedure (Release, \"GNAT$RELEASE_MUTEX\",\n-          Mechanism => Value);\n-   end IO_Locking;\n-\n-end DEC.IO;"}]}