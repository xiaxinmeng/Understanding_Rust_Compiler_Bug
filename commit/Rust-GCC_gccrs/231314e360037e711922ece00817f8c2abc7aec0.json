{"sha": "231314e360037e711922ece00817f8c2abc7aec0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMxMzE0ZTM2MDAzN2U3MTE5MjJlY2UwMDgxN2Y4YzJhYmM3YWVjMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2016-11-15T18:16:59Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2016-11-15T18:16:59Z"}, "message": "Use simplify_gen_binary in canon_rtx\n\nAfter simplifying the operands of a PLUS, canon_rtx checked only\nfor cases in which one of the simplified operands was a constant,\nfalling back to gen_rtx_PLUS otherwise.  This left the PLUS in a\nnon-canonical order if one of the simplified operands was\n(plus (reg R1) (const_int X)); we'd end up with:\n\n       (plus (plus (reg R1) (const_int Y)) (reg R2))\n\nrather than:\n\n       (plus (plus (reg R1) (reg R2)) (const_int Y))\n\nFixing this exposed new DSE opportunities on spu-elf in\ngcc.c-torture/execute/builtins/strcat-chk.c but otherwise\nit doesn't seem to have much practical effect.\n\ngcc/\n2016-11-15  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\n\t* alias.c (canon_rtx): Use simplify_gen_binary.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r242445", "tree": {"sha": "480ffac9e966d889d8dd72c69996fa9c06069cf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/480ffac9e966d889d8dd72c69996fa9c06069cf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/231314e360037e711922ece00817f8c2abc7aec0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/231314e360037e711922ece00817f8c2abc7aec0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/231314e360037e711922ece00817f8c2abc7aec0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/231314e360037e711922ece00817f8c2abc7aec0/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3712c7a30197c43bc98d46e344391287da16d7e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3712c7a30197c43bc98d46e344391287da16d7e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3712c7a30197c43bc98d46e344391287da16d7e1"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "5e3e8a1c1cd60b4585e21178e35e5b9311fa1be4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231314e360037e711922ece00817f8c2abc7aec0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231314e360037e711922ece00817f8c2abc7aec0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=231314e360037e711922ece00817f8c2abc7aec0", "patch": "@@ -1,3 +1,9 @@\n+2016-11-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* alias.c (canon_rtx): Use simplify_gen_binary.\n+\n 2016-11-15  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "546ae7ff891af0cd51c99da29179201f32698d43", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231314e360037e711922ece00817f8c2abc7aec0/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231314e360037e711922ece00817f8c2abc7aec0/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=231314e360037e711922ece00817f8c2abc7aec0", "patch": "@@ -1708,13 +1708,7 @@ canon_rtx (rtx x)\n       rtx x1 = canon_rtx (XEXP (x, 1));\n \n       if (x0 != XEXP (x, 0) || x1 != XEXP (x, 1))\n-\t{\n-\t  if (CONST_INT_P (x0))\n-\t    return plus_constant (GET_MODE (x), x1, INTVAL (x0));\n-\t  else if (CONST_INT_P (x1))\n-\t    return plus_constant (GET_MODE (x), x0, INTVAL (x1));\n-\t  return gen_rtx_PLUS (GET_MODE (x), x0, x1);\n-\t}\n+\treturn simplify_gen_binary (PLUS, GET_MODE (x), x0, x1);\n     }\n \n   /* This gives us much better alias analysis when called from"}]}