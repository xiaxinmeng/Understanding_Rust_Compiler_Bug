{"sha": "10a22f4330b9f0e5be5f36690617d6094024c290", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBhMjJmNDMzMGI5ZjBlNWJlNWYzNjY5MDYxN2Q2MDk0MDI0YzI5MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-08-30T16:15:49Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-08-30T16:15:49Z"}, "message": "decl.c (gnat_to_gnu_entity): Do not convert the expression to the nominal type if...\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: Do not convert\n\tthe expression to the nominal type if the latter is a record type with\n\ta variant part and the type of the former is a record type without one.\n\nCo-Authored-By: Laurent Roug\u00e9 <laurent.rouge@menta.fr>\n\nFrom-SVN: r178331", "tree": {"sha": "3ce1830194439c491707cf0d2a98eedb5004514c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ce1830194439c491707cf0d2a98eedb5004514c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10a22f4330b9f0e5be5f36690617d6094024c290", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a22f4330b9f0e5be5f36690617d6094024c290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10a22f4330b9f0e5be5f36690617d6094024c290", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a22f4330b9f0e5be5f36690617d6094024c290/comments", "author": null, "committer": null, "parents": [{"sha": "b6717379621288e10cbb2bb6b440947adcabd9cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6717379621288e10cbb2bb6b440947adcabd9cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6717379621288e10cbb2bb6b440947adcabd9cb"}], "stats": {"total": 67, "additions": 60, "deletions": 7}, "files": [{"sha": "5bc7819d361cbe46acf731850ea96463ad9cb2e7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a22f4330b9f0e5be5f36690617d6094024c290/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a22f4330b9f0e5be5f36690617d6094024c290/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=10a22f4330b9f0e5be5f36690617d6094024c290", "patch": "@@ -1,3 +1,9 @@\n+2011-08-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: Do not convert\n+\tthe expression to the nominal type if the latter is a record type with\n+\ta variant part and the type of the former is a record type without one.\n+\n 2011-08-30  Yannick Moy  <moy@adacore.com>\n \n \t* exp_aggr.adb, exp_ch11.adb, exp_prag.adb: Remove early exit during"}, {"sha": "54903cfc4037ef57de17a11597cdb03cc5aef2ff", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a22f4330b9f0e5be5f36690617d6094024c290/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a22f4330b9f0e5be5f36690617d6094024c290/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=10a22f4330b9f0e5be5f36690617d6094024c290", "patch": "@@ -1124,13 +1124,19 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t   is a padded record whose field is of self-referential size.  In\n \t   the former case, converting will generate unnecessary evaluations\n \t   of the CONSTRUCTOR to compute the size and in the latter case, we\n-\t   want to only copy the actual data.  */\n+\t   want to only copy the actual data.  Also don't convert to a record\n+\t   type with a variant part from a record type without one, to keep\n+\t   the object simpler.  */\n \tif (gnu_expr\n \t    && TREE_CODE (gnu_type) != UNCONSTRAINED_ARRAY_TYPE\n \t    && !CONTAINS_PLACEHOLDER_P (TYPE_SIZE (gnu_type))\n \t    && !(TYPE_IS_PADDING_P (gnu_type)\n \t\t && CONTAINS_PLACEHOLDER_P\n-\t\t    (TYPE_SIZE (TREE_TYPE (TYPE_FIELDS (gnu_type))))))\n+\t\t    (TYPE_SIZE (TREE_TYPE (TYPE_FIELDS (gnu_type)))))\n+\t    && !(TREE_CODE (gnu_type) == RECORD_TYPE\n+\t\t && TREE_CODE (TREE_TYPE (gnu_expr)) == RECORD_TYPE\n+\t\t && get_variant_part (gnu_type) != NULL_TREE\n+\t\t && get_variant_part (TREE_TYPE (gnu_expr)) == NULL_TREE))\n \t  gnu_expr = convert (gnu_type, gnu_expr);\n \n \t/* If this is a pointer that doesn't have an initializing expression,\n@@ -1350,13 +1356,19 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t   is a padded record whose field is of self-referential size.  In\n \t   the former case, converting will generate unnecessary evaluations\n \t   of the CONSTRUCTOR to compute the size and in the latter case, we\n-\t   want to only copy the actual data.  */\n+\t   want to only copy the actual data.  Also don't convert to a record\n+\t   type with a variant part from a record type without one, to keep\n+\t   the object simpler.  */\n \tif (gnu_expr\n \t    && TREE_CODE (gnu_type) != UNCONSTRAINED_ARRAY_TYPE\n \t    && !CONTAINS_PLACEHOLDER_P (TYPE_SIZE (gnu_type))\n \t    && !(TYPE_IS_PADDING_P (gnu_type)\n \t\t && CONTAINS_PLACEHOLDER_P\n-\t\t    (TYPE_SIZE (TREE_TYPE (TYPE_FIELDS (gnu_type))))))\n+\t\t    (TYPE_SIZE (TREE_TYPE (TYPE_FIELDS (gnu_type)))))\n+\t    && !(TREE_CODE (gnu_type) == RECORD_TYPE\n+\t\t && TREE_CODE (TREE_TYPE (gnu_expr)) == RECORD_TYPE\n+\t\t && get_variant_part (gnu_type) != NULL_TREE\n+\t\t && get_variant_part (TREE_TYPE (gnu_expr)) == NULL_TREE))\n \t  gnu_expr = convert (gnu_type, gnu_expr);\n \n \t/* If this name is external or there was a name specified, use it,"}, {"sha": "1a1771f7d26101096615dcde9afdc706c28957b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a22f4330b9f0e5be5f36690617d6094024c290/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a22f4330b9f0e5be5f36690617d6094024c290/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=10a22f4330b9f0e5be5f36690617d6094024c290", "patch": "@@ -1,3 +1,11 @@\n+2011-08-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/aggr3.ads: New test.\n+\t* gnat.dg/specs/aggr3_pkg.ads: New helper.\n+\n+\t* gnat.dg/specs/aggr1.ads: Remove superfluous space.\n+\t* gnat.dg/specs/aggr2.ads: Likewise.\n+\n 2011-08-30  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/45170\n@@ -3742,7 +3750,7 @@\n \t* gcc.dg/pie-link.c: Use target pie.\n \n 2011-06-10  Eric Botcazou  <ebotcazou@adacore.com>\n-\t    Laurent Roug\ufffd  <laurent.rouge@menta.fr>\n+\t    Laurent Roug\ufffd  <laurent.rouge@menta.fr>\n \n \t* gcc.dg/20020503-1.c: Add back -mflat option on the SPARC.\n \t* gcc.target/sparc/sparc-ret.c: Skip if -mflat is passed."}, {"sha": "f26f4999b49e98cd82a1cf42256045ec44c5bb44", "filename": "gcc/testsuite/gnat.dg/specs/aggr1.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a22f4330b9f0e5be5f36690617d6094024c290/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Faggr1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a22f4330b9f0e5be5f36690617d6094024c290/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Faggr1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Faggr1.ads?ref=10a22f4330b9f0e5be5f36690617d6094024c290", "patch": "@@ -1,4 +1,4 @@\n---  { dg-do compile }\n+-- { dg-do compile }\n \n package aggr1 is\n    type Buffer_Array is array (1 .. 2 ** 23) of Integer;"}, {"sha": "00bc44f15d82a14949cb548f7fce329a8c1e4962", "filename": "gcc/testsuite/gnat.dg/specs/aggr2.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a22f4330b9f0e5be5f36690617d6094024c290/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Faggr2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a22f4330b9f0e5be5f36690617d6094024c290/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Faggr2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Faggr2.ads?ref=10a22f4330b9f0e5be5f36690617d6094024c290", "patch": "@@ -1,4 +1,4 @@\n---  { dg-do compile }\n+-- { dg-do compile }\n \n package Aggr2 is\n "}, {"sha": "09b4466e0e56df697497071f41dc5ca6caf6772f", "filename": "gcc/testsuite/gnat.dg/specs/aggr3.ads", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a22f4330b9f0e5be5f36690617d6094024c290/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Faggr3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a22f4330b9f0e5be5f36690617d6094024c290/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Faggr3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Faggr3.ads?ref=10a22f4330b9f0e5be5f36690617d6094024c290", "patch": "@@ -0,0 +1,18 @@\n+-- { dg-do compile }\n+\n+with Aggr3_Pkg; use Aggr3_Pkg;\n+\n+package Aggr3 is\n+\n+   type Enum is (One);\n+\n+   type R (D : Enum := One) is\n+   record\n+      case D is\n+        when One => The_T : T; \n+      end case;\n+   end record;\n+\n+   My_R : R := (D => One, The_T => My_T);\n+\n+end Aggr3;"}, {"sha": "769426edecfd214f739494a5dbe25f8897be4658", "filename": "gcc/testsuite/gnat.dg/specs/aggr3_pkg.ads", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10a22f4330b9f0e5be5f36690617d6094024c290/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Faggr3_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10a22f4330b9f0e5be5f36690617d6094024c290/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Faggr3_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Faggr3_pkg.ads?ref=10a22f4330b9f0e5be5f36690617d6094024c290", "patch": "@@ -0,0 +1,9 @@\n+package Aggr3_Pkg is\n+\n+   type Root is abstract tagged null record;\n+\n+   type T is new Root with null record;\n+\n+   My_T : T;\n+\n+end Aggr3_Pkg;"}]}