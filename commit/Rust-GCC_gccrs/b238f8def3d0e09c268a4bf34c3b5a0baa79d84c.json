{"sha": "b238f8def3d0e09c268a4bf34c3b5a0baa79d84c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIzOGY4ZGVmM2QwZTA5YzI2OGE0YmYzNGMzYjVhMGJhYTc5ZDg0Yw==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1993-03-03T06:46:43Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1993-03-03T06:46:43Z"}, "message": "Define and use new function dbxout_range_type.\n\nFrom-SVN: r3619", "tree": {"sha": "4cb475408187767f0c7e1449a10055329cf19f57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cb475408187767f0c7e1449a10055329cf19f57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b238f8def3d0e09c268a4bf34c3b5a0baa79d84c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b238f8def3d0e09c268a4bf34c3b5a0baa79d84c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b238f8def3d0e09c268a4bf34c3b5a0baa79d84c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b238f8def3d0e09c268a4bf34c3b5a0baa79d84c/comments", "author": null, "committer": null, "parents": [{"sha": "442cb32d5341e2dc78418b7332b070b6b66e7d61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/442cb32d5341e2dc78418b7332b070b6b66e7d61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/442cb32d5341e2dc78418b7332b070b6b66e7d61"}], "stats": {"total": 57, "additions": 41, "deletions": 16}, "files": [{"sha": "8a902b82125a2d4b027e3aee31d44062e643fefc", "filename": "gcc/dbxout.c", "status": "modified", "additions": 41, "deletions": 16, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b238f8def3d0e09c268a4bf34c3b5a0baa79d84c/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b238f8def3d0e09c268a4bf34c3b5a0baa79d84c/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=b238f8def3d0e09c268a4bf34c3b5a0baa79d84c", "patch": "@@ -836,6 +836,35 @@ dbxout_type_methods (type)\n \t}\n     }\n }\n+\n+/* Emit a \"range\" type specification, which has the form:\n+   \"r<index type>;<lower bound>;<upper bound>;\".\n+   TYPE is an INTEGER_TYPE. */\n+\n+static void\n+dbxout_range_type (type)\n+     tree type;\n+{\n+  fprintf (asmfile, \"r\");\n+  if (TREE_TYPE (type) && TREE_CODE (TREE_TYPE(type)) != INTEGER_TYPE)\n+    dbxout_type (TREE_TYPE (type), 0, 0);\n+  else\n+    {\n+      /* This used to say `r1' and we used to take care\n+\t to make sure that `int' was type number 1.  */\n+      fprintf (asmfile, \"%d\", TYPE_SYMTAB_ADDRESS (integer_type_node));\n+    }\n+  if (TREE_CODE (TYPE_MIN_VALUE (type)) == INTEGER_CST)\n+    fprintf (asmfile, \";%d\", \n+\t     TREE_INT_CST_LOW (TYPE_MIN_VALUE (type)));\n+  else\n+    fprintf (asmfile, \";0\");\n+  if (TREE_CODE (TYPE_MAX_VALUE (type)) == INTEGER_CST)\n+    fprintf (asmfile, \";%d;\", \n+\t     TREE_INT_CST_LOW (TYPE_MAX_VALUE (type)));\n+  else\n+    fprintf (asmfile, \";-1;\");\n+}\n \f\n /* Output a reference to a type.  If the type has not yet been\n    described in the dbx output, output its definition now.\n@@ -974,14 +1003,8 @@ dbxout_type (type, full, show_arg_types)\n \t  print_int_cst_octal (TYPE_MAX_VALUE (type));\n \t  fprintf (asmfile, \";\");\n \t}\n-      else\n-\t/* Output other integer types as subranges of `int'.  */\n-\t/* This used to say `r1' and we used to take care\n-\t   to make sure that `int' was type number 1.  */\n-\tfprintf (asmfile, \"r%d;%d;%d;\",\n-\t\t TYPE_SYMTAB_ADDRESS (integer_type_node),\n-\t\t TREE_INT_CST_LOW (TYPE_MIN_VALUE (type)),\n-\t\t TREE_INT_CST_LOW (TYPE_MAX_VALUE (type)));\n+      else /* Output other integer types as subranges of `int'.  */\n+\tdbxout_range_type (type);\n       CHARS (25);\n       break;\n \n@@ -1035,14 +1058,16 @@ dbxout_type (type, full, show_arg_types)\n       /* Output \"a\" followed by a range type definition\n \t for the index type of the array\n \t followed by a reference to the target-type.\n-\t ar1;0;N;M for an array of type M and size N.  */\n-      /* This used to say `r1' and we used to take care\n-\t to make sure that `int' was type number 1.  */\n-      fprintf (asmfile, \"ar%d;0;%d;\", TYPE_SYMTAB_ADDRESS (integer_type_node),\n-\n-\t       (TYPE_DOMAIN (type)\n-\t\t? TREE_INT_CST_LOW (TYPE_MAX_VALUE (TYPE_DOMAIN (type)))\n-\t        : -1));\n+\t ar1;0;N;M for a C array of type M and size N+1.  */\n+      tem = TYPE_DOMAIN (type);\n+      if (tem == NULL)\n+\tfprintf(asmfile, \"ar%d;0;-1\",\n+\t\t   TYPE_SYMTAB_ADDRESS (integer_type_node));\n+      else\n+\t{\n+\t  fprintf(asmfile, \"a\");\n+\t  dbxout_range_type (tem);\n+\t}\n       CHARS (17);\n       dbxout_type (TREE_TYPE (type), 0, 0);\n       break;"}]}