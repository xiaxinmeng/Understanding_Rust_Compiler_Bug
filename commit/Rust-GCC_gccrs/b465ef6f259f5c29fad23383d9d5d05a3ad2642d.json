{"sha": "b465ef6f259f5c29fad23383d9d5d05a3ad2642d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ2NWVmNmYyNTlmNWMyOWZhZDIzMzgzZDlkNWQwNWEzYWQyNjQyZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T15:57:15Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T15:57:15Z"}, "message": "[multiple changes]\n\n2014-01-20  Robert Dewar  <dewar@adacore.com>\n\n\t* errout.ads, errout.adb: Implement >? >x? >X? sequences in error\n\tmessages.\n\t* sem_ch6.adb (Check_Statement_Sequence): Missing return is an\n\terror in GNATprove mode.\n\n2014-01-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* par-ch4.adb (Is_Parameterless_Attribute): The Ada2012 attribute\n\treference 'Old takes no parameters, and thus can appear as a\n\tprefix of a slice.\n\n2014-01-20  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* exp_aggr.adb: Fix minor typos.\n\nFrom-SVN: r206839", "tree": {"sha": "92260a032a275664131dc26a9af8c6e6957fdc9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92260a032a275664131dc26a9af8c6e6957fdc9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b465ef6f259f5c29fad23383d9d5d05a3ad2642d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b465ef6f259f5c29fad23383d9d5d05a3ad2642d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b465ef6f259f5c29fad23383d9d5d05a3ad2642d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b465ef6f259f5c29fad23383d9d5d05a3ad2642d/comments", "author": null, "committer": null, "parents": [{"sha": "a61524283eb4439d870431cb5befc613b72a7828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a61524283eb4439d870431cb5befc613b72a7828", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a61524283eb4439d870431cb5befc613b72a7828"}], "stats": {"total": 91, "additions": 61, "deletions": 30}, "files": [{"sha": "d73b2ee40e6710206df872a3d1696be18c8c3680", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b465ef6f259f5c29fad23383d9d5d05a3ad2642d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b465ef6f259f5c29fad23383d9d5d05a3ad2642d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b465ef6f259f5c29fad23383d9d5d05a3ad2642d", "patch": "@@ -1,3 +1,20 @@\n+2014-01-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* errout.ads, errout.adb: Implement >? >x? >X? sequences in error\n+\tmessages.\n+\t* sem_ch6.adb (Check_Statement_Sequence): Missing return is an\n+\terror in GNATprove mode.\n+\n+2014-01-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* par-ch4.adb (Is_Parameterless_Attribute): The Ada2012 attribute\n+\treference 'Old takes no parameters, and thus can appear as a\n+\tprefix of a slice.\n+\n+2014-01-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_aggr.adb: Fix minor typos.\n+\n 2014-01-20  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_attr.adb (Analyze_Attribute, case 'Constrained): In an"}, {"sha": "6679d6a1d2828c98e6d0d68ccf7194dc841bc961", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b465ef6f259f5c29fad23383d9d5d05a3ad2642d/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b465ef6f259f5c29fad23383d9d5d05a3ad2642d/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=b465ef6f259f5c29fad23383d9d5d05a3ad2642d", "patch": "@@ -2713,7 +2713,8 @@ package body Errout is\n       P : Natural;     -- Current index;\n \n       procedure Set_Msg_Insertion_Warning;\n-      --  Deal with ? ?? ?x? ?X? insertion sequences\n+      --  Deal with ? ?? ?x? ?X? insertion sequences (also < <? <x? <X?). The\n+      --  caller has already bumped the pointer past the initial ? or <.\n \n       -------------------------------\n       -- Set_Msg_Insertion_Warning --\n@@ -2819,14 +2820,12 @@ package body Errout is\n \n             when '<' =>\n \n-               --  If tagging of messages is enabled, and this is a warning,\n-               --  then it is treated as being [enabled by default].\n+               --  Note: the prescan already set Is_Warning_Msg True if and\n+               --  only if Error_Msg_Warn is set to True. If Error_Msg_Warn\n+               --  is False, the call to Set_Msg_Insertion_Warning here does\n+               --  no harm, since Warning_Msg_Char is ignored in that case.\n \n-               if Error_Msg_Warn\n-                 and Warning_Doc_Switch\n-               then\n-                  Warning_Msg_Char := '?';\n-               end if;\n+               Set_Msg_Insertion_Warning;\n \n             when '|' =>\n                null; -- already dealt with"}, {"sha": "4ae39044f1c5382ba783d48d42f47f5845ed2f28", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b465ef6f259f5c29fad23383d9d5d05a3ad2642d/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b465ef6f259f5c29fad23383d9d5d05a3ad2642d/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=b465ef6f259f5c29fad23383d9d5d05a3ad2642d", "patch": "@@ -64,7 +64,6 @@ package Errout is\n    --  are active (see errout.ads for details). If this switch is False, then\n    --  these sequences are ignored (i.e. simply equivalent to a single ?). The\n    --  -gnatw.d switch sets this flag True, -gnatw.D sets this flag False.\n-   --  Note: always ignored in VMS mode where we do not provide this feature.\n \n    -----------------------------------\n    -- Suppression of Error Messages --\n@@ -305,8 +304,10 @@ package Errout is\n    --    Insertion character < (Less Than: conditional warning message)\n    --      The character < appearing anywhere in a message is used for a\n    --      conditional error message. If Error_Msg_Warn is True, then the\n-   --      effect is the same as ? described above. If Error_Msg_Warn is\n-   --      False, then there is no effect.\n+   --      effect is the same as ? described above, and in particular <? and\n+   --      <X? have the effect of ?? and ?X? respectively. If Error_Msg_Warn\n+   --      is False, then the < <? or <X? sequence is ignored and the message\n+   --      is treated as a error rather than a warning.\n \n    --    Insertion character A-Z (Upper case letter: Ada reserved word)\n    --      If two or more upper case letters appear in the message, they are"}, {"sha": "0fcebd60c7f9b28faa14881bfceacda1ad2ea2b5", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b465ef6f259f5c29fad23383d9d5d05a3ad2642d/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b465ef6f259f5c29fad23383d9d5d05a3ad2642d/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=b465ef6f259f5c29fad23383d9d5d05a3ad2642d", "patch": "@@ -81,7 +81,7 @@ package body Exp_Aggr is\n \n    function Is_Static_Dispatch_Table_Aggregate (N : Node_Id) return Boolean;\n    --  Returns true if N is an aggregate used to initialize the components\n-   --  of an statically allocated dispatch table.\n+   --  of a statically allocated dispatch table.\n \n    function Must_Slide\n      (Obj_Type : Entity_Id;\n@@ -150,7 +150,7 @@ package body Exp_Aggr is\n    --      aggregate\n \n    function Has_Mutable_Components (Typ : Entity_Id) return Boolean;\n-   --  Return true if one of the component is of a discriminated type with\n+   --  Return true if one of the components is of a discriminated type with\n    --  defaults. An aggregate for a type with mutable components must be\n    --  expanded into individual assignments.\n \n@@ -183,7 +183,7 @@ package body Exp_Aggr is\n \n    function Backend_Processing_Possible (N : Node_Id) return Boolean;\n    --  This function checks if array aggregate N can be processed directly\n-   --  by the backend. If this is the case True is returned.\n+   --  by the backend. If this is the case, True is returned.\n \n    function Build_Array_Aggr_Code\n      (N           : Node_Id;\n@@ -3918,7 +3918,7 @@ package body Exp_Aggr is\n    --             corresponding to the same dimension have the same bounds.\n \n    --  2. Check for packed array aggregate which can be converted to a\n-   --     constant so that the aggregate disappeares completely.\n+   --     constant so that the aggregate disappears completely.\n \n    --  3. Check case of nested aggregate. Generally nested aggregates are\n    --     handled during the processing of the parent aggregate.\n@@ -4964,7 +4964,7 @@ package body Exp_Aggr is\n \n       --  If all aggregate components are compile-time known and the aggregate\n       --  has been flattened, nothing left to do. The same occurs if the\n-      --  aggregate is used to initialize the components of an statically\n+      --  aggregate is used to initialize the components of a statically\n       --  allocated dispatch table.\n \n       if Compile_Time_Known_Aggregate (N)\n@@ -5282,7 +5282,7 @@ package body Exp_Aggr is\n          --  form, but there are two problems with that circuit:\n \n          --    a) It is limited to very small cases due to ill-understood\n-         --       interations with bootstrapping. That limit is removed by\n+         --       interactions with bootstrapping. That limit is removed by\n          --       use of the No_Implicit_Loops restriction.\n \n          --    b) It erroneously ends up with the resulting expressions being\n@@ -5445,7 +5445,7 @@ package body Exp_Aggr is\n       --  set and constants whose expression is such an aggregate, recursively.\n \n       function Component_Not_OK_For_Backend return Boolean;\n-      --  Check for presence of component which makes it impossible for the\n+      --  Check for presence of a component which makes it impossible for the\n       --  backend to process the aggregate, thus requiring the use of a series\n       --  of assignment statements. Cases checked for are a nested aggregate\n       --  needing Late_Expansion, the presence of a tagged component which may\n@@ -5466,7 +5466,7 @@ package body Exp_Aggr is\n \n       function Has_Visible_Private_Ancestor (Id : E) return Boolean;\n       --  If any ancestor of the current type is private, the aggregate\n-      --  cannot be built in place. We canot rely on Has_Private_Ancestor,\n+      --  cannot be built in place. We cannot rely on Has_Private_Ancestor,\n       --  because it will not be set when type and its parent are in the\n       --  same scope, and the parent component needs expansion.\n \n@@ -5751,13 +5751,13 @@ package body Exp_Aggr is\n       then\n          Convert_To_Assignments (N, Typ);\n \n-      --  If the type involved has any non-bit aligned components, then we are\n-      --  not sure that the back end can handle this case correctly.\n+      --  If the type involved has bit aligned components, then we are not sure\n+      --  that the back end can handle this case correctly.\n \n       elsif Type_May_Have_Bit_Aligned_Components (Typ) then\n          Convert_To_Assignments (N, Typ);\n \n-      --  In all other cases, build a proper aggregate handlable by gigi\n+      --  In all other cases, build a proper aggregate to be handled by gigi\n \n       else\n          if Nkind (N) = N_Aggregate then\n@@ -6378,7 +6378,7 @@ package body Exp_Aggr is\n          --  At this stage we have a suitable aggregate for handling at compile\n          --  time. The only remaining checks are that the values of expressions\n          --  in the aggregate are compile-time known (checks are performed by\n-         --  Get_Component_Val, and that any subtypes or ranges are statically\n+         --  Get_Component_Val), and that any subtypes or ranges are statically\n          --  known.\n \n          --  If the aggregate is not fully positional at this stage, then"}, {"sha": "5981f01c8e71b255663f68c079888d0d3e5f80ee", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b465ef6f259f5c29fad23383d9d5d05a3ad2642d/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b465ef6f259f5c29fad23383d9d5d05a3ad2642d/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=b465ef6f259f5c29fad23383d9d5d05a3ad2642d", "patch": "@@ -41,6 +41,7 @@ package body Ch4 is\n       Attribute_External_Tag => True,\n       Attribute_Img          => True,\n       Attribute_Loop_Entry   => True,\n+      Attribute_Old          => True,\n       Attribute_Stub_Type    => True,\n       Attribute_Version      => True,\n       Attribute_Type_Key     => True,\n@@ -49,7 +50,8 @@ package body Ch4 is\n    --  string or a type. For those attributes, a left parenthesis after\n    --  the attribute should not be analyzed as the beginning of a parameters\n    --  list because it may denote a slice operation (X'Img (1 .. 2)) or\n-   --  a type conversion (X'Class (Y)).\n+   --  a type conversion (X'Class (Y)). The Ada2012 attribute 'Old is in\n+   --  this category.\n \n    --  Note: Loop_Entry is in this list because, although it can take an\n    --  optional argument (the loop name), we can't distinguish that at parse"}, {"sha": "3105ac141d34b62a076c387bdca8d627fdc48493", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b465ef6f259f5c29fad23383d9d5d05a3ad2642d/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b465ef6f259f5c29fad23383d9d5d05a3ad2642d/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=b465ef6f259f5c29fad23383d9d5d05a3ad2642d", "patch": "@@ -7222,12 +7222,24 @@ package body Sem_Ch6 is\n \n          if Mode = 'F' then\n             if not Raise_Exception_Call then\n-               Error_Msg_N\n-                 (\"RETURN statement missing following this statement??!\",\n-                  Last_Stm);\n-               Error_Msg_N\n-                 (\"\\Program_Error may be raised at run time??!\",\n-                  Last_Stm);\n+\n+               --  In GNATprove mode, it is an error to have a missing return\n+\n+               if GNATprove_Mode then\n+                  Error_Msg_N\n+                    (\"RETURN statement missing following this statement!\",\n+                     Last_Stm);\n+\n+               --  Otherwise normal case of warning (RM insists this is legal)\n+\n+               else\n+                  Error_Msg_N\n+                    (\"RETURN statement missing following this statement??!\",\n+                     Last_Stm);\n+                  Error_Msg_N\n+                    (\"\\Program_Error may be raised at run time??!\",\n+                     Last_Stm);\n+               end if;\n             end if;\n \n             --  Note: we set Err even though we have not issued a warning"}]}