{"sha": "6e818918f2c6dab5258d709562aad8a836feaa1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU4MTg5MThmMmM2ZGFiNTI1OGQ3MDk1NjJhYWQ4YTgzNmZlYWExZg==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2007-09-26T10:42:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-09-26T10:42:20Z"}, "message": "a-tags.adb:\n\n2007-09-26  Javier Miranda  <miranda@adacore.com>\n\t    Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* a-tags.adb: \n\t(Get_HT_Link/Set_HT_Link): Updated to handle the additional level of\n\t indirection added to the HT_Link component of the TSD. This is required\n\t to statically allocate the TSD.\n\n\t* a-tags.ads: \n\tMinor reordering of the declarations in the private part. Required to\n\tadd a level of indirection to the contents of the TSD component HT_Link.\n\tThis is required to statically allocate the TSD.\n\n\t* decl.c (gnat_to_gnu_entity) <object>: Do not exclude objects with\n\tIs_Statically_Allocated set from constant objects.\n\tDo not make exported constants created by the compiler volatile.\n\t(gnat_to_gnu_param): Do not treat an IN parameter whose address is taken\n\tas read-only.\n\n\t* trans.c (Identifier_to_gnu): For constants, unshare initializers\n\tbefore returning them.\n\n\t* exp_disp.ads, exp_disp.adb (Building_Static_DT): Spec moved to the\n\tpublic part of the package.\n\t(Make_DT): Move HT_Link component out of the TSD record. For this\n\tpurpose Make_DT now declares a separate object that stores the\n\tHT_Link value, and initializes the TSD component with the address\n\tof this new object. The addition of this level of indirection is\n\trequired to statically allocate the TSD because the TSD cannot\n\thave variable components.\n\t(Expand_Interface_Conversion): Improve the expanded code.\n\t(Expand_Interface_Thunk): Set Is_Thunk in the thunk entity.\n\n\t* sem_disp.adb (Check_Dispatching_Operation): In case of a body\n\tdeclaring a primitive operation ---allowed by RM 3.9.2 (13.e/2)---,\n\tif we are building static dispatch tables then we must not generate\n\textra code to register the primitive because the dispatch table will\n\tbe built at the end of the library package; otherwise we notify that\n\twe cannot build the static dispatch table.\n\nFrom-SVN: r128784", "tree": {"sha": "781d59ae00b077715bca0d62ce1d0e3e26fa5570", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/781d59ae00b077715bca0d62ce1d0e3e26fa5570"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e818918f2c6dab5258d709562aad8a836feaa1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e818918f2c6dab5258d709562aad8a836feaa1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e818918f2c6dab5258d709562aad8a836feaa1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e818918f2c6dab5258d709562aad8a836feaa1f/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e29bd38f96e9c8a9bd6ba0d12a73dee3794f4895", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e29bd38f96e9c8a9bd6ba0d12a73dee3794f4895", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e29bd38f96e9c8a9bd6ba0d12a73dee3794f4895"}], "stats": {"total": 197, "additions": 115, "deletions": 82}, "files": [{"sha": "47e76ffac3ed20e91ae2c3f0722ef19249cb8f13", "filename": "gcc/ada/a-tags.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e818918f2c6dab5258d709562aad8a836feaa1f/gcc%2Fada%2Fa-tags.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e818918f2c6dab5258d709562aad8a836feaa1f/gcc%2Fada%2Fa-tags.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tags.adb?ref=6e818918f2c6dab5258d709562aad8a836feaa1f", "patch": "@@ -279,7 +279,7 @@ package body Ada.Tags is\n          TSD     : constant Type_Specific_Data_Ptr :=\n                      To_Type_Specific_Data_Ptr (TSD_Ptr.all);\n       begin\n-         return TSD.HT_Link;\n+         return TSD.HT_Link.all;\n       end Get_HT_Link;\n \n       ----------\n@@ -304,7 +304,7 @@ package body Ada.Tags is\n          TSD     : constant Type_Specific_Data_Ptr :=\n                      To_Type_Specific_Data_Ptr (TSD_Ptr.all);\n       begin\n-         TSD.HT_Link := Next;\n+         TSD.HT_Link.all := Next;\n       end Set_HT_Link;\n \n    end HTable_Subprograms;"}, {"sha": "6630743dcca0ef1d8b53bacd12ba7b0bfa090389", "filename": "gcc/ada/a-tags.ads", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e818918f2c6dab5258d709562aad8a836feaa1f/gcc%2Fada%2Fa-tags.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e818918f2c6dab5258d709562aad8a836feaa1f/gcc%2Fada%2Fa-tags.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tags.ads?ref=6e818918f2c6dab5258d709562aad8a836feaa1f", "patch": "@@ -218,6 +218,26 @@ private\n    --  type. This construct is used in the handling of dispatching triggers\n    --  in select statements.\n \n+   type Address_Array is array (Positive range <>) of System.Address;\n+\n+   subtype Dispatch_Table is Address_Array (1 .. 1);\n+   --  Used by GDB to identify the _tags and traverse the run-time structure\n+   --  associated with tagged types. For compatibility with older versions of\n+   --  gdb, its name must not be changed.\n+\n+   type Tag is access all Dispatch_Table;\n+   pragma No_Strict_Aliasing (Tag);\n+\n+   type Interface_Tag is access all Dispatch_Table;\n+\n+   No_Tag : constant Tag := null;\n+\n+   --  The expander ensures that Tag objects reference the Prims_Ptr component\n+   --  of the wrapper.\n+\n+   type Tag_Ptr is access all Tag;\n+   pragma No_Strict_Aliasing (Tag_Ptr);\n+\n    type Tag_Table is array (Natural range <>) of Tag;\n \n    type Type_Specific_Data (Idepth : Natural) is record\n@@ -237,7 +257,7 @@ private\n \n       Expanded_Name : Cstring_Ptr;\n       External_Tag  : Cstring_Ptr;\n-      HT_Link       : Tag;\n+      HT_Link       : Tag_Ptr;\n       --  Components used to support to the Ada.Tags subprograms in RM 3.9\n \n       --  Note: Expanded_Name is referenced by GDB to determine the actual name\n@@ -291,8 +311,6 @@ private\n       TK_Tagged,\n       TK_Task);\n \n-   type Address_Array is array (Positive range <>) of System.Address;\n-\n    type Dispatch_Table_Wrapper (Num_Prims : Natural) is record\n       Signature     : Signature_Kind;\n       Tag_Kind      : Tagged_Kind;\n@@ -315,24 +333,6 @@ private\n       --  actual array size, allocates the Dispatch_Table record accordingly.\n    end record;\n \n-   subtype Dispatch_Table is Address_Array (1 .. 1);\n-   --  Used by GDB to identify the _tags and traverse the run-time structure\n-   --  associated with tagged types. For compatibility with older versions of\n-   --  gdb, its name must not be changed.\n-\n-   type Tag is access all Dispatch_Table;\n-   pragma No_Strict_Aliasing (Tag);\n-\n-   type Interface_Tag is access all Dispatch_Table;\n-\n-   No_Tag : constant Tag := null;\n-\n-   --  The expander ensures that Tag objects reference the Prims_Ptr component\n-   --  of the wrapper.\n-\n-   type Tag_Ptr is access all Tag;\n-   pragma No_Strict_Aliasing (Tag_Ptr);\n-\n    type Dispatch_Table_Ptr is access all Dispatch_Table_Wrapper;\n    pragma No_Strict_Aliasing (Dispatch_Table_Ptr);\n "}, {"sha": "4a55947d4f73f18bc57464d2b13f7831736c2864", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e818918f2c6dab5258d709562aad8a836feaa1f/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e818918f2c6dab5258d709562aad8a836feaa1f/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=6e818918f2c6dab5258d709562aad8a836feaa1f", "patch": "@@ -500,7 +500,6 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \tbool used_by_ref = false;\n \tbool const_flag\n \t  = ((kind == E_Constant || kind == E_Variable)\n-\t     && !Is_Statically_Allocated (gnat_entity)\n \t     && Is_True_Constant (gnat_entity)\n \t     && (((Nkind (Declaration_Node (gnat_entity))\n \t\t   == N_Object_Declaration)\n@@ -732,7 +731,11 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t   the object volatile.  We also interpret 13.3(19) conservatively\n \t   and disallow any optimizations for an object covered by it.  */\n \tif ((Treat_As_Volatile (gnat_entity)\n-\t     || Is_Exported (gnat_entity)\n+\t     || (Is_Exported (gnat_entity)\n+\t\t /* Exclude exported constants created by the compiler,\n+\t\t    which should boil down to static dispatch tables and\n+\t\t    make it possible to put them in read-only memory. \ufffd*/\n+\t\t && (Comes_From_Source (gnat_entity) || !const_flag))\n \t     || Is_Imported (gnat_entity)\n \t     || Present (Address_Clause (gnat_entity)))\n \t    && !TYPE_VOLATILE (gnu_type))\n@@ -4447,6 +4450,8 @@ gnat_to_gnu_param (Entity_Id gnat_param, Mechanism_Type mech,\n   tree gnu_param_name = get_entity_name (gnat_param);\n   tree gnu_param_type = gnat_to_gnu_type (Etype (gnat_param));\n   bool in_param = (Ekind (gnat_param) == E_In_Parameter);\n+  /* The parameter can be indirectly modified if its address is taken.  */\n+  bool ro_param = in_param && !Address_Taken (gnat_param);\n   bool by_return = false, by_component_ptr = false, by_ref = false;\n   tree gnu_param;\n \n@@ -4473,11 +4478,11 @@ gnat_to_gnu_param (Entity_Id gnat_param, Mechanism_Type mech,\n \tgnu_param_type = unpadded_type;\n     }\n \n-  /* If this is an IN parameter, it is read-only, so make a variant of the\n-     type that is read-only.  ??? However, if this is an unconstrained array,\n-     that type can be very complex, so skip it for now.  Likewise for any\n-     other self-referential type.  */\n-  if (in_param\n+  /* If this is a read-only parameter, make a variant of the type that is\n+     read-only.  ??? However, if this is an unconstrained array, that type\n+     can be very complex, so skip it for now.  Likewise for any other\n+     self-referential type.  */\n+  if (ro_param\n       && TREE_CODE (gnu_param_type) != UNCONSTRAINED_ARRAY_TYPE\n       && !CONTAINS_PLACEHOLDER_P (TYPE_SIZE (gnu_param_type)))\n     gnu_param_type = build_qualified_type (gnu_param_type,\n@@ -4511,7 +4516,7 @@ gnat_to_gnu_param (Entity_Id gnat_param, Mechanism_Type mech,\n       by_component_ptr = true;\n       gnu_param_type = TREE_TYPE (gnu_param_type);\n \n-      if (in_param)\n+      if (ro_param)\n \tgnu_param_type = build_qualified_type (gnu_param_type,\n \t\t\t\t\t       (TYPE_QUALS (gnu_param_type)\n \t\t\t\t\t\t| TYPE_QUAL_CONST));\n@@ -4584,12 +4589,12 @@ gnat_to_gnu_param (Entity_Id gnat_param, Mechanism_Type mech,\n     return gnu_param_type;\n \n   gnu_param = create_param_decl (gnu_param_name, gnu_param_type,\n-\t\t\t\t by_ref || by_component_ptr || in_param);\n+\t\t\t\t ro_param || by_ref || by_component_ptr);\n   DECL_BY_REF_P (gnu_param) = by_ref;\n   DECL_BY_COMPONENT_PTR_P (gnu_param) = by_component_ptr;\n   DECL_BY_DESCRIPTOR_P (gnu_param) = (mech == By_Descriptor);\n   DECL_POINTS_TO_READONLY_P (gnu_param)\n-    = (in_param && (by_ref || by_component_ptr));\n+    = (ro_param && (by_ref || by_component_ptr));\n \n   /* If no Mechanism was specified, indicate what we're using, then\n      back-annotate it.  */"}, {"sha": "54e08c6142cd8a1395a4c795d6b5e06bc45600ac", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 50, "deletions": 45, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e818918f2c6dab5258d709562aad8a836feaa1f/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e818918f2c6dab5258d709562aad8a836feaa1f/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=6e818918f2c6dab5258d709562aad8a836feaa1f", "patch": "@@ -66,10 +66,6 @@ package body Exp_Disp is\n    -- Local Subprograms --\n    -----------------------\n \n-   function Building_Static_DT (Typ : Entity_Id) return Boolean;\n-   pragma Inline (Building_Static_DT);\n-   --  Returns true when building statically allocated dispatch tables\n-\n    function Default_Prim_Op_Position (E : Entity_Id) return Uint;\n    --  Ada 2005 (AI-251): Returns the fixed position in the dispatch table\n    --  of the default primitive operations.\n@@ -104,7 +100,13 @@ package body Exp_Disp is\n    function Building_Static_DT (Typ : Entity_Id) return Boolean is\n    begin\n       return Static_Dispatch_Tables\n-               and then Is_Library_Level_Tagged_Type (Typ);\n+        and then Is_Library_Level_Tagged_Type (Typ)\n+\n+         --  If the type is derived from a CPP class we cannot statically\n+         --  build the dispatch tables because we must inherit primitives\n+         --  from the CPP side.\n+\n+        and then not Is_CPP_Class (Root_Type (Typ));\n    end Building_Static_DT;\n \n    ----------------------------------\n@@ -742,7 +744,7 @@ package body Exp_Disp is\n          Operand_Typ := Base_Type (Corresponding_Record_Type (Operand_Typ));\n       end if;\n \n-      --  Handle access types to interfaces\n+      --  Handle access to class-wide interface types\n \n       if Is_Access_Type (Iface_Typ) then\n          Iface_Typ := Etype (Directly_Designated_Type (Iface_Typ));\n@@ -881,11 +883,9 @@ package body Exp_Disp is\n          --     end Func;\n \n          declare\n-            Decls        : List_Id;\n             Desig_Typ    : Entity_Id;\n             Fent         : Entity_Id;\n             New_Typ_Decl : Node_Id;\n-            New_Obj_Decl : Node_Id;\n             Stats        : List_Id;\n \n          begin\n@@ -895,6 +895,10 @@ package body Exp_Disp is\n                Desig_Typ := Directly_Designated_Type (Desig_Typ);\n             end if;\n \n+            if Is_Concurrent_Type (Desig_Typ) then\n+               Desig_Typ := Base_Type (Corresponding_Record_Type (Desig_Typ));\n+            end if;\n+\n             New_Typ_Decl :=\n               Make_Full_Type_Declaration (Loc,\n                 Defining_Identifier =>\n@@ -907,32 +911,16 @@ package body Exp_Disp is\n                     Subtype_Indication     =>\n                       New_Reference_To (Desig_Typ, Loc)));\n \n-            New_Obj_Decl :=\n-              Make_Object_Declaration (Loc,\n-                Defining_Identifier =>\n-                  Make_Defining_Identifier (Loc,\n-                    New_Internal_Name ('S')),\n-                Constant_Present => True,\n-                Object_Definition =>\n-                  New_Reference_To (Defining_Identifier (New_Typ_Decl), Loc),\n-                Expression =>\n-                  Unchecked_Convert_To (Defining_Identifier (New_Typ_Decl),\n-                    Make_Identifier (Loc, Name_uO)));\n-\n-            Decls := New_List (\n-              New_Typ_Decl,\n-              New_Obj_Decl);\n-\n             Stats := New_List (\n               Make_Simple_Return_Statement (Loc,\n                 Unchecked_Convert_To (Etype (N),\n                   Make_Attribute_Reference (Loc,\n                     Prefix =>\n                       Make_Selected_Component (Loc,\n                         Prefix =>\n-                          New_Reference_To\n-                            (Defining_Identifier (New_Obj_Decl),\n-                             Loc),\n+                          Unchecked_Convert_To\n+                            (Defining_Identifier (New_Typ_Decl),\n+                             Make_Identifier (Loc, Name_uO)),\n                         Selector_Name =>\n                           New_Occurrence_Of (Iface_Tag, Loc)),\n                     Attribute_Name => Name_Address))));\n@@ -975,7 +963,7 @@ package body Exp_Disp is\n                     Result_Definition =>\n                       New_Reference_To (Etype (N), Loc)),\n \n-                Declarations => Decls,\n+                Declarations => New_List (New_Typ_Decl),\n \n                 Handled_Statement_Sequence =>\n                   Make_Handled_Sequence_Of_Statements (Loc, Stats));\n@@ -991,20 +979,17 @@ package body Exp_Disp is\n \n             if Is_Access_Type (Etype (Expression (N))) then\n \n-               --  Generate: Operand_Typ!(Expression.all)'Address\n+               --  Generate: Func (Address!(Expression))\n \n                Rewrite (N,\n                  Make_Function_Call (Loc,\n                    Name => New_Reference_To (Fent, Loc),\n                    Parameter_Associations => New_List (\n-                     Make_Attribute_Reference (Loc,\n-                       Prefix  => Unchecked_Convert_To (Operand_Typ,\n-                                    Make_Explicit_Dereference (Loc,\n-                                      Relocate_Node (Expression (N)))),\n-                       Attribute_Name => Name_Address))));\n+                     Unchecked_Convert_To (RTE (RE_Address),\n+                       Relocate_Node (Expression (N))))));\n \n             else\n-               --  Generate: Operand_Typ!(Expression)'Address\n+               --  Generate: Func (Operand_Typ!(Expression)'Address)\n \n                Rewrite (N,\n                  Make_Function_Call (Loc,\n@@ -1409,6 +1394,8 @@ package body Exp_Disp is\n         Make_Defining_Identifier (Loc,\n           Chars => New_Internal_Name ('T'));\n \n+      Set_Is_Thunk (Thunk_Id);\n+\n       if Ekind (Target) = E_Procedure then\n          Thunk_Code :=\n            Make_Subprogram_Body (Loc,\n@@ -3064,6 +3051,8 @@ package body Exp_Disp is\n                             New_External_Name (Tname, 'T', Suffix_Index => -1);\n       Name_Exname       : constant Name_Id :=\n                             New_External_Name (Tname, 'E', Suffix_Index => -1);\n+      Name_HT_Link      : constant Name_Id :=\n+                            New_External_Name (Tname, 'H', Suffix_Index => -1);\n       Name_Predef_Prims : constant Name_Id :=\n                             New_External_Name (Tname, 'R', Suffix_Index => -1);\n       Name_SSD          : constant Name_Id :=\n@@ -3077,6 +3066,8 @@ package body Exp_Disp is\n                        Make_Defining_Identifier (Loc, Name_DT);\n       Exname       : constant Entity_Id :=\n                        Make_Defining_Identifier (Loc, Name_Exname);\n+      HT_Link      : constant Entity_Id :=\n+                       Make_Defining_Identifier (Loc, Name_HT_Link);\n       Predef_Prims : constant Entity_Id :=\n                        Make_Defining_Identifier (Loc, Name_Predef_Prims);\n       SSD          : constant Entity_Id :=\n@@ -3213,6 +3204,7 @@ package body Exp_Disp is\n       Set_Is_Statically_Allocated (DT);\n       Set_Is_Statically_Allocated (SSD);\n       Set_Is_Statically_Allocated (TSD);\n+      Set_Is_Statically_Allocated (Predef_Prims);\n \n       --  Generate code to define the boolean that controls registration, in\n       --  order to avoid multiple registrations for tagged types defined in\n@@ -3353,6 +3345,15 @@ package body Exp_Disp is\n       Set_Is_Statically_Allocated (Exname);\n       Set_Is_True_Constant (Exname);\n \n+      --  Declare the object used by Ada.Tags.Register_Tag\n+\n+      if RTE_Available (RE_Register_Tag) then\n+         Append_To (Result,\n+           Make_Object_Declaration (Loc,\n+             Defining_Identifier => HT_Link,\n+             Object_Definition   => New_Reference_To (RTE (RE_Tag), Loc)));\n+      end if;\n+\n       --  Generate code to create the storage for the type specific data object\n       --  with enough space to store the tags of the ancestors plus the tags\n       --  of all the implemented interfaces (as described in a-tags.adb).\n@@ -3362,7 +3363,7 @@ package body Exp_Disp is\n       --            Access_Level       => Type_Access_Level (Typ),\n       --            Expanded_Name      => Cstring_Ptr!(Exname'Address))\n       --            External_Tag       => Cstring_Ptr!(Exname'Address))\n-      --            HT_Link            => null,\n+      --            HT_Link            => HT_Link'Address,\n       --            Transportable      => <<boolean-value>>,\n       --            RC_Offset          => <<integer-value>>,\n       --            [ Interfaces_Table  => <<access-value>> ]\n@@ -3590,9 +3591,17 @@ package body Exp_Disp is\n \n       --  HT_Link\n \n-      Append_To (TSD_Aggr_List,\n-        Unchecked_Convert_To (RTE (RE_Tag),\n-          New_Reference_To (RTE (RE_Null_Address), Loc)));\n+      if RTE_Available (RE_Register_Tag) then\n+         Append_To (TSD_Aggr_List,\n+           Unchecked_Convert_To (RTE (RE_Tag_Ptr),\n+             Make_Attribute_Reference (Loc,\n+               Prefix => New_Reference_To (HT_Link, Loc),\n+               Attribute_Name => Name_Address)));\n+      else\n+         Append_To (TSD_Aggr_List,\n+           Unchecked_Convert_To (RTE (RE_Tag_Ptr),\n+             New_Reference_To (RTE (RE_Null_Address), Loc)));\n+      end if;\n \n       --  Transportable: Set for types that can be used in remote calls\n       --  with respect to E.4(18) legality rules.\n@@ -4734,9 +4743,7 @@ package body Exp_Disp is\n       --  Import the forward declaration of the Dispatch Table wrapper record\n       --  (Make_DT will take care of its exportation)\n \n-      if Building_Static_DT (Typ)\n-        and then not Is_CPP_Class (Typ)\n-      then\n+      if Building_Static_DT (Typ) then\n          DT := Make_Defining_Identifier (Loc,\n                  New_External_Name (Tname, 'T'));\n \n@@ -4746,9 +4753,6 @@ package body Exp_Disp is\n \n          Set_Is_Imported (DT);\n \n-         --  Set_Is_True_Constant (DT);\n-         --  Why is the above commented out???\n-\n          --  The scope must be set now to call Get_External_Name\n \n          Set_Scope (DT, Current_Scope);\n@@ -4840,6 +4844,7 @@ package body Exp_Disp is\n          end if;\n \n          Set_Is_True_Constant (DT_Ptr);\n+         Set_Is_Statically_Allocated (DT_Ptr);\n       end if;\n \n       pragma Assert (No (Access_Disp_Table (Typ)));"}, {"sha": "ee78c81b05a11458e719b7f3186e75e78f08651e", "filename": "gcc/ada/exp_disp.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e818918f2c6dab5258d709562aad8a836feaa1f/gcc%2Fada%2Fexp_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e818918f2c6dab5258d709562aad8a836feaa1f/gcc%2Fada%2Fexp_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.ads?ref=6e818918f2c6dab5258d709562aad8a836feaa1f", "patch": "@@ -164,6 +164,10 @@ package Exp_Disp is\n    --    Exp_Disp.Default_Prim_Op_Position - indirect use\n    --    Exp_Disp.Set_All_DT_Position      - direct   use\n \n+   function Building_Static_DT (Typ : Entity_Id) return Boolean;\n+   pragma Inline (Building_Static_DT);\n+   --  Returns true when building statically allocated dispatch tables\n+\n    procedure Build_Static_Dispatch_Tables (N : Node_Id);\n    --  N is a library level package declaration or package body. Build the\n    --  static dispatch table of the tagged types defined at library level. In"}, {"sha": "5924039e6f9a0b9d580df995f7df56ce5907b3e6", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e818918f2c6dab5258d709562aad8a836feaa1f/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e818918f2c6dab5258d709562aad8a836feaa1f/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=6e818918f2c6dab5258d709562aad8a836feaa1f", "patch": "@@ -740,9 +740,27 @@ package body Sem_Disp is\n                         Set_DT_Position (Subp, DT_Position (Old_Subp));\n \n                         if not Restriction_Active (No_Dispatching_Calls) then\n-                           Register_Primitive (Sloc (Subp_Body),\n-                             Prim    => Subp,\n-                             Ins_Nod => Subp_Body);\n+                           if Building_Static_DT (Tagged_Type) then\n+\n+                              --  If the static dispatch table has not been\n+                              --  built then there is nothing else to do now;\n+                              --  otherwise we notify that we cannot build the\n+                              --  static dispatch table.\n+\n+                              if Has_Dispatch_Table (Tagged_Type) then\n+                                 Error_Msg_N\n+                                   (\"overriding of& is too late for building\" &\n+                                    \" static dispatch tables!\", Subp);\n+                                 Error_Msg_N\n+                                   (\"\\spec should appear immediately after\" &\n+                                    \" the type!\", Subp);\n+                              end if;\n+\n+                           else\n+                              Register_Primitive (Sloc (Subp_Body),\n+                                Prim    => Subp,\n+                                Ins_Nod => Subp_Body);\n+                           end if;\n                         end if;\n                      end if;\n                   end if;\n@@ -789,6 +807,7 @@ package body Sem_Disp is\n \n       if Present (Old_Subp) then\n          Check_Subtype_Conformant (Subp, Old_Subp);\n+\n          if (Chars (Subp) = Name_Initialize\n            or else Chars (Subp) = Name_Adjust\n            or else Chars (Subp) = Name_Finalize)"}, {"sha": "36177e281cac5d7f0d6a6b0e0d481fa9ee750d24", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e818918f2c6dab5258d709562aad8a836feaa1f/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e818918f2c6dab5258d709562aad8a836feaa1f/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=6e818918f2c6dab5258d709562aad8a836feaa1f", "patch": "@@ -626,7 +626,7 @@ Identifier_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n \t\t\t       Is_Aliased (gnat_temp));\n \n       if (!object || !parent_requires_lvalue)\n-\tgnu_result = DECL_INITIAL (gnu_result);\n+\tgnu_result = unshare_expr (DECL_INITIAL (gnu_result));\n     }\n \n   *gnu_result_type_p = gnu_result_type;"}]}