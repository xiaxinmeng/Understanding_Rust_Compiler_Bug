{"sha": "4d1a05f13808cc12c09e71e6ca3951e878184bb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQxYTA1ZjEzODA4Y2MxMmMwOWU3MWU2Y2EzOTUxZTg3ODE4NGJiMg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-04-10T11:25:44Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-04-10T11:25:44Z"}, "message": "re PR target/79905 (ICE in canonical types differ for identical types __vector(4) int and V4i {aka __vector(4) int})\n\n\tPR target/79905\n\t* config/rs6000/rs6000.c (rs6000_vector_type): New.\n\t(rs6000_init_builtins): Use it.\n\n\tPR target/79905\n\t* g++.dg/torture/pr79905.C: New.\n\nFrom-SVN: r246802", "tree": {"sha": "3bf50e0d2ad686a3e62f51ca373994520f9dc0df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bf50e0d2ad686a3e62f51ca373994520f9dc0df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d1a05f13808cc12c09e71e6ca3951e878184bb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d1a05f13808cc12c09e71e6ca3951e878184bb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d1a05f13808cc12c09e71e6ca3951e878184bb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d1a05f13808cc12c09e71e6ca3951e878184bb2/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ad820964c93de749e29759937855840b7543ba9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ad820964c93de749e29759937855840b7543ba9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ad820964c93de749e29759937855840b7543ba9"}], "stats": {"total": 165, "additions": 75, "deletions": 90}, "files": [{"sha": "e763c42603af4ee4b842ced11d26d072bffd37d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d1a05f13808cc12c09e71e6ca3951e878184bb2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d1a05f13808cc12c09e71e6ca3951e878184bb2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d1a05f13808cc12c09e71e6ca3951e878184bb2", "patch": "@@ -1,3 +1,9 @@\n+2017-04-10  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR target/79905\n+\t* config/rs6000/rs6000.c (rs6000_vector_type): New.\n+\t(rs6000_init_builtins): Use it.\n+\n 2016-04-10  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm.md (<mrc>): Add mode to SET source."}, {"sha": "7822a9d4566ca300b1d55cb0bc658c498b876c6c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 55, "deletions": 90, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d1a05f13808cc12c09e71e6ca3951e878184bb2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d1a05f13808cc12c09e71e6ca3951e878184bb2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4d1a05f13808cc12c09e71e6ca3951e878184bb2", "patch": "@@ -17257,6 +17257,22 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   gcc_unreachable ();\n }\n \n+/* Create a builtin vector type with a name.  Taking care not to give\n+   the canonical type a name.  */\n+\n+static tree\n+rs6000_vector_type (const char *name, tree elt_type, unsigned num_elts)\n+{\n+  tree result = build_vector_type (elt_type, num_elts);\n+\n+  /* Copy so we don't give the canonical type a name.  */\n+  result = build_variant_type_copy (result);\n+\n+  add_builtin_type (name, result);\n+\n+  return result;\n+}\n+\n static void\n rs6000_init_builtins (void)\n {\n@@ -17273,18 +17289,29 @@ rs6000_init_builtins (void)\n \n   V2SI_type_node = build_vector_type (intSI_type_node, 2);\n   V2SF_type_node = build_vector_type (float_type_node, 2);\n-  V2DI_type_node = build_vector_type (intDI_type_node, 2);\n-  V2DF_type_node = build_vector_type (double_type_node, 2);\n+  V2DI_type_node = rs6000_vector_type (TARGET_POWERPC64 ? \"__vector long\"\n+\t\t\t\t       : \"__vector long long\",\n+\t\t\t\t       intDI_type_node, 2);\n+  V2DF_type_node = rs6000_vector_type (\"__vector double\", double_type_node, 2);\n   V4HI_type_node = build_vector_type (intHI_type_node, 4);\n-  V4SI_type_node = build_vector_type (intSI_type_node, 4);\n-  V4SF_type_node = build_vector_type (float_type_node, 4);\n-  V8HI_type_node = build_vector_type (intHI_type_node, 8);\n-  V16QI_type_node = build_vector_type (intQI_type_node, 16);\n-\n-  unsigned_V16QI_type_node = build_vector_type (unsigned_intQI_type_node, 16);\n-  unsigned_V8HI_type_node = build_vector_type (unsigned_intHI_type_node, 8);\n-  unsigned_V4SI_type_node = build_vector_type (unsigned_intSI_type_node, 4);\n-  unsigned_V2DI_type_node = build_vector_type (unsigned_intDI_type_node, 2);\n+  V4SI_type_node = rs6000_vector_type (\"__vector signed int\",\n+\t\t\t\t       intSI_type_node, 4);\n+  V4SF_type_node = rs6000_vector_type (\"__vector float\", float_type_node, 4);\n+  V8HI_type_node = rs6000_vector_type (\"__vector signed short\",\n+\t\t\t\t       intHI_type_node, 8);\n+  V16QI_type_node = rs6000_vector_type (\"__vector signed char\",\n+\t\t\t\t\tintQI_type_node, 16);\n+\n+  unsigned_V16QI_type_node = rs6000_vector_type (\"__vector unsigned char\",\n+\t\t\t\t\tunsigned_intQI_type_node, 16);\n+  unsigned_V8HI_type_node = rs6000_vector_type (\"__vector unsigned short\",\n+\t\t\t\t       unsigned_intHI_type_node, 8);\n+  unsigned_V4SI_type_node = rs6000_vector_type (\"__vector unsigned int\",\n+\t\t\t\t       unsigned_intSI_type_node, 4);\n+  unsigned_V2DI_type_node = rs6000_vector_type (TARGET_POWERPC64\n+\t\t\t\t       ? \"__vector unsigned long\"\n+\t\t\t\t       : \"__vector unsigned long long\",\n+\t\t\t\t       unsigned_intDI_type_node, 2);\n \n   opaque_V2SF_type_node = build_opaque_vector_type (float_type_node, 2);\n   opaque_V2SI_type_node = build_opaque_vector_type (intSI_type_node, 2);\n@@ -17299,8 +17326,11 @@ rs6000_init_builtins (void)\n      must live in VSX registers.  */\n   if (intTI_type_node)\n     {\n-      V1TI_type_node = build_vector_type (intTI_type_node, 1);\n-      unsigned_V1TI_type_node = build_vector_type (unsigned_intTI_type_node, 1);\n+      V1TI_type_node = rs6000_vector_type (\"__vector __int128\",\n+\t\t\t\t\t   intTI_type_node, 1);\n+      unsigned_V1TI_type_node\n+\t= rs6000_vector_type (\"__vector unsigned __int128\",\n+\t\t\t      unsigned_intTI_type_node, 1);\n     }\n \n   /* The 'vector bool ...' types must be kept distinct from 'vector unsigned ...'\n@@ -17432,83 +17462,18 @@ rs6000_init_builtins (void)\n   tdecl = add_builtin_type (\"__pixel\", pixel_type_node);\n   TYPE_NAME (pixel_type_node) = tdecl;\n \n-  bool_V16QI_type_node = build_vector_type (bool_char_type_node, 16);\n-  bool_V8HI_type_node = build_vector_type (bool_short_type_node, 8);\n-  bool_V4SI_type_node = build_vector_type (bool_int_type_node, 4);\n-  bool_V2DI_type_node = build_vector_type (bool_long_type_node, 2);\n-  pixel_V8HI_type_node = build_vector_type (pixel_type_node, 8);\n-\n-  tdecl = add_builtin_type (\"__vector unsigned char\", unsigned_V16QI_type_node);\n-  TYPE_NAME (unsigned_V16QI_type_node) = tdecl;\n-\n-  tdecl = add_builtin_type (\"__vector signed char\", V16QI_type_node);\n-  TYPE_NAME (V16QI_type_node) = tdecl;\n-\n-  tdecl = add_builtin_type (\"__vector __bool char\", bool_V16QI_type_node);\n-  TYPE_NAME (bool_V16QI_type_node) = tdecl;\n-\n-  tdecl = add_builtin_type (\"__vector unsigned short\", unsigned_V8HI_type_node);\n-  TYPE_NAME (unsigned_V8HI_type_node) = tdecl;\n-\n-  tdecl = add_builtin_type (\"__vector signed short\", V8HI_type_node);\n-  TYPE_NAME (V8HI_type_node) = tdecl;\n-\n-  tdecl = add_builtin_type (\"__vector __bool short\", bool_V8HI_type_node);\n-  TYPE_NAME (bool_V8HI_type_node) = tdecl;\n-\n-  tdecl = add_builtin_type (\"__vector unsigned int\", unsigned_V4SI_type_node);\n-  TYPE_NAME (unsigned_V4SI_type_node) = tdecl;\n-\n-  tdecl = add_builtin_type (\"__vector signed int\", V4SI_type_node);\n-  TYPE_NAME (V4SI_type_node) = tdecl;\n-\n-  tdecl = add_builtin_type (\"__vector __bool int\", bool_V4SI_type_node);\n-  TYPE_NAME (bool_V4SI_type_node) = tdecl;\n-\n-  tdecl = add_builtin_type (\"__vector float\", V4SF_type_node);\n-  TYPE_NAME (V4SF_type_node) = tdecl;\n-\n-  tdecl = add_builtin_type (\"__vector __pixel\", pixel_V8HI_type_node);\n-  TYPE_NAME (pixel_V8HI_type_node) = tdecl;\n-\n-  tdecl = add_builtin_type (\"__vector double\", V2DF_type_node);\n-  TYPE_NAME (V2DF_type_node) = tdecl;\n-\n-  if (TARGET_POWERPC64)\n-    {\n-      tdecl = add_builtin_type (\"__vector long\", V2DI_type_node);\n-      TYPE_NAME (V2DI_type_node) = tdecl;\n-\n-      tdecl = add_builtin_type (\"__vector unsigned long\",\n-\t\t\t\tunsigned_V2DI_type_node);\n-      TYPE_NAME (unsigned_V2DI_type_node) = tdecl;\n-\n-      tdecl = add_builtin_type (\"__vector __bool long\", bool_V2DI_type_node);\n-      TYPE_NAME (bool_V2DI_type_node) = tdecl;\n-    }\n-  else\n-    {\n-      tdecl = add_builtin_type (\"__vector long long\", V2DI_type_node);\n-      TYPE_NAME (V2DI_type_node) = tdecl;\n-\n-      tdecl = add_builtin_type (\"__vector unsigned long long\",\n-\t\t\t\tunsigned_V2DI_type_node);\n-      TYPE_NAME (unsigned_V2DI_type_node) = tdecl;\n-\n-      tdecl = add_builtin_type (\"__vector __bool long long\",\n-\t\t\t\tbool_V2DI_type_node);\n-      TYPE_NAME (bool_V2DI_type_node) = tdecl;\n-    }\n-\n-  if (V1TI_type_node)\n-    {\n-      tdecl = add_builtin_type (\"__vector __int128\", V1TI_type_node);\n-      TYPE_NAME (V1TI_type_node) = tdecl;\n-\n-      tdecl = add_builtin_type (\"__vector unsigned __int128\",\n-\t\t\t\tunsigned_V1TI_type_node);\n-      TYPE_NAME (unsigned_V1TI_type_node) = tdecl;\n-    }\n+  bool_V16QI_type_node = rs6000_vector_type (\"__vector __bool char\",\n+\t\t\t\t\t     bool_char_type_node, 16);\n+  bool_V8HI_type_node = rs6000_vector_type (\"__vector __bool short\",\n+\t\t\t\t\t    bool_short_type_node, 8);\n+  bool_V4SI_type_node = rs6000_vector_type (\"__vector __bool int\",\n+\t\t\t\t\t    bool_int_type_node, 4);\n+  bool_V2DI_type_node = rs6000_vector_type (TARGET_POWERPC64\n+\t\t\t\t\t    ? \"__vector __bool long\"\n+\t\t\t\t\t    : \"__vector __bool long long\",\n+\t\t\t\t\t    bool_long_type_node, 2);\n+  pixel_V8HI_type_node = rs6000_vector_type (\"__vector __pixel\",\n+\t\t\t\t\t     pixel_type_node, 8);\n \n   /* Paired and SPE builtins are only available if you build a compiler with\n      the appropriate options, so only create those builtins with the"}, {"sha": "06ea8f75a9bc11bce44290ae4278e551bfdca598", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d1a05f13808cc12c09e71e6ca3951e878184bb2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d1a05f13808cc12c09e71e6ca3951e878184bb2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4d1a05f13808cc12c09e71e6ca3951e878184bb2", "patch": "@@ -1,3 +1,8 @@\n+2017-04-10  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR target/79905\n+\t* g++.dg/torture/pr79905.C: New.\n+\n 2017-04-10  Martin Liska  <mliska@suse.cz>\n \n \tPR sanitizer/80350"}, {"sha": "ded5db64cb0913c805a195e2e3c119e88699edf1", "filename": "gcc/testsuite/g++.dg/torture/pr79905.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d1a05f13808cc12c09e71e6ca3951e878184bb2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr79905.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d1a05f13808cc12c09e71e6ca3951e878184bb2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr79905.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr79905.C?ref=4d1a05f13808cc12c09e71e6ca3951e878184bb2", "patch": "@@ -0,0 +1,9 @@\n+// PR target/79905\n+// { dg-do compile { target { powerpc*-*-* } } }\n+// { dg-require-effective-target powerpc_altivec_ok } \n+\n+typedef int V4i __attribute__((vector_size(16)));\n+void a (V4i) {\n+  vector int b;\n+  a (b);\n+}"}]}