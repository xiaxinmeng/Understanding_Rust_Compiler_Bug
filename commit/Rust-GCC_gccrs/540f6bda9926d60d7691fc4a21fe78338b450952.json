{"sha": "540f6bda9926d60d7691fc4a21fe78338b450952", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQwZjZiZGE5OTI2ZDYwZDc2OTFmYzRhMjFmZTc4MzM4YjQ1MDk1Mg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-05-28T13:54:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-05-28T13:54:05Z"}, "message": "re PR tree-optimization/36291 (GCC is slow and memory-hungry building sipQtGuipart.cpp)\n\n2008-05-28  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/36291\n\t* tree-flow. h (struct gimple_df): Remove var_anns member.\n\t* tree-flow-inline.h (gimple_var_anns): Remove.\n\t(var_ann): Simplify.\n\t* tree-dfa.c (create_var_ann): Simplify.\n\t(remove_referenced_var): Clear alias info from var_anns of globals.\n\t* tree-ssa.c (init_tree_ssa): Do not allocate var_anns.\n\t(delete_tree_ssa): Clear alias info from var_anns of globals.\n\tDo not free var_anns.\n\t(var_ann_eq): Remove.\n\t(var_ann_hash): Likewise.\n\nFrom-SVN: r136095", "tree": {"sha": "bbf97b3fc675101df94246164a86835ad4504952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbf97b3fc675101df94246164a86835ad4504952"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/540f6bda9926d60d7691fc4a21fe78338b450952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/540f6bda9926d60d7691fc4a21fe78338b450952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/540f6bda9926d60d7691fc4a21fe78338b450952", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/540f6bda9926d60d7691fc4a21fe78338b450952/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "00ea95170b661191fffee460554c33f075bcc733", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00ea95170b661191fffee460554c33f075bcc733", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00ea95170b661191fffee460554c33f075bcc733"}], "stats": {"total": 115, "additions": 41, "deletions": 74}, "files": [{"sha": "20d5b105400c9c6e961288d9125b26338965529a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540f6bda9926d60d7691fc4a21fe78338b450952/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540f6bda9926d60d7691fc4a21fe78338b450952/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=540f6bda9926d60d7691fc4a21fe78338b450952", "patch": "@@ -1,3 +1,17 @@\n+2008-05-28  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/36291\n+\t* tree-flow. h (struct gimple_df): Remove var_anns member.\n+\t* tree-flow-inline.h (gimple_var_anns): Remove.\n+\t(var_ann): Simplify.\n+\t* tree-dfa.c (create_var_ann): Simplify.\n+\t(remove_referenced_var): Clear alias info from var_anns of globals.\n+\t* tree-ssa.c (init_tree_ssa): Do not allocate var_anns.\n+\t(delete_tree_ssa): Clear alias info from var_anns of globals.\n+\tDo not free var_anns.\n+\t(var_ann_eq): Remove.\n+\t(var_ann_hash): Likewise.\n+\n 2008-05-28  Mark Shinwell  <shinwell@codesourcery.com>\n \n \t* config/mips/mips.c (mips_cpu_info_table): Add loongson2e"}, {"sha": "af167492de6404ef6f290aeb91738be9d8eebf3d", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540f6bda9926d60d7691fc4a21fe78338b450952/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540f6bda9926d60d7691fc4a21fe78338b450952/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=540f6bda9926d60d7691fc4a21fe78338b450952", "patch": "@@ -142,33 +142,14 @@ var_ann_t\n create_var_ann (tree t)\n {\n   var_ann_t ann;\n-  struct static_var_ann_d *sann = NULL;\n \n   gcc_assert (t);\n   gcc_assert (DECL_P (t));\n   gcc_assert (!t->base.ann || t->base.ann->common.type == VAR_ANN);\n \n-  if (!MTAG_P (t) && (TREE_STATIC (t) || DECL_EXTERNAL (t)))\n-    {\n-      sann = GGC_CNEW (struct static_var_ann_d);\n-      ann = &sann->ann;\n-    }\n-  else\n-    ann = GGC_CNEW (struct var_ann_d);\n-\n+  ann = GGC_CNEW (struct var_ann_d);\n   ann->common.type = VAR_ANN;\n-\n-  if (!MTAG_P (t) && (TREE_STATIC (t) || DECL_EXTERNAL (t)))\n-    {\n-       void **slot;\n-       sann->uid = DECL_UID (t);\n-       slot = htab_find_slot_with_hash (gimple_var_anns (cfun),\n-\t\t\t\t        t, DECL_UID (t), INSERT);\n-       gcc_assert (!*slot);\n-       *slot = sann;\n-    }\n-  else\n-    t->base.ann = (tree_ann_t) ann;\n+  t->base.ann = (tree_ann_t) ann;\n \n   return ann;\n }\n@@ -765,8 +746,20 @@ remove_referenced_var (tree var)\n \n   clear_call_clobbered (var);\n   if ((v_ann = var_ann (var)))\n-    ggc_free (v_ann);\n-  var->base.ann = NULL;\n+    {\n+      /* Preserve var_anns of globals, but clear their alias info.  */\n+      if (MTAG_P (var)\n+\t  || (!TREE_STATIC (var) && !DECL_EXTERNAL (var)))\n+\t{\n+\t  ggc_free (v_ann);\n+\t  var->base.ann = NULL;\n+\t}\n+      else\n+\t{\n+\t  v_ann->mpt = NULL_TREE;\n+\t  v_ann->symbol_mem_tag = NULL_TREE;\n+\t}\n+    }\n   gcc_assert (DECL_P (var));\n   in.uid = uid;\n   loc = htab_find_slot_with_hash (gimple_referenced_vars (cfun), &in, uid,"}, {"sha": "95ddfb5b130dba9d3424ec84cfcea9182b2817dd", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540f6bda9926d60d7691fc4a21fe78338b450952/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540f6bda9926d60d7691fc4a21fe78338b450952/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=540f6bda9926d60d7691fc4a21fe78338b450952", "patch": "@@ -91,14 +91,6 @@ gimple_nonlocal_all (const struct function *fun)\n   return fun->gimple_df->nonlocal_all;\n }\n \n-/* Hashtable of variables annotations.  Used for static variables only;\n-   local variables have direct pointer in the tree node.  */\n-static inline htab_t\n-gimple_var_anns (const struct function *fun)\n-{\n-  return fun->gimple_df->var_anns;\n-}\n-\n /* Initialize the hashtable iterator HTI to point to hashtable TABLE */\n \n static inline void *\n@@ -192,22 +184,9 @@ var_ann (const_tree t)\n {\n   var_ann_t ann;\n \n-  if (!MTAG_P (t)\n-      && (TREE_STATIC (t) || DECL_EXTERNAL (t)))\n-    {\n-      struct static_var_ann_d *sann\n-        = ((struct static_var_ann_d *)\n-\t   htab_find_with_hash (gimple_var_anns (cfun), t, DECL_UID (t)));\n-      if (!sann)\n-\treturn NULL;\n-      ann = &sann->ann;\n-    }\n-  else\n-    {\n-      if (!t->base.ann)\n-\treturn NULL;\n-      ann = (var_ann_t) t->base.ann;\n-    }\n+  if (!t->base.ann)\n+    return NULL;\n+  ann = (var_ann_t) t->base.ann;\n \n   gcc_assert (ann->common.type == VAR_ANN);\n "}, {"sha": "8bc6cc8a0ca96093c729e7ff08dfe1dec4d5116f", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540f6bda9926d60d7691fc4a21fe78338b450952/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540f6bda9926d60d7691fc4a21fe78338b450952/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=540f6bda9926d60d7691fc4a21fe78338b450952", "patch": "@@ -188,10 +188,6 @@ struct gimple_df GTY(())\n \n   struct ssa_operands ssa_operands;\n \n-  /* Hashtable of variables annotations.  Used for static variables only;\n-     local variables have direct pointer in the tree node.  */\n-  htab_t GTY((param_is (struct static_var_ann_d))) var_anns;\n-\n   /* Memory reference statistics collected during alias analysis.\n      This information is used to drive the memory partitioning\n      heuristics in compute_memory_partitions.  */"}, {"sha": "1c01d71bf6ef6e4db6154ef34b0e068299cc51e2", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/540f6bda9926d60d7691fc4a21fe78338b450952/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/540f6bda9926d60d7691fc4a21fe78338b450952/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=540f6bda9926d60d7691fc4a21fe78338b450952", "patch": "@@ -904,24 +904,6 @@ uid_decl_map_hash (const void *item)\n   return ((const_tree)item)->decl_minimal.uid;\n }\n \n-/* Return true if the uid in both int tree maps are equal.  */\n-\n-static int\n-var_ann_eq (const void *va, const void *vb)\n-{\n-  const struct static_var_ann_d *a = (const struct static_var_ann_d *) va;\n-  const_tree const b = (const_tree) vb;\n-  return (a->uid == DECL_UID (b));\n-}\n-\n-/* Hash a UID in a int_tree_map.  */\n-\n-static unsigned int\n-var_ann_hash (const void *item)\n-{\n-  return ((const struct static_var_ann_d *)item)->uid;\n-}\n-\n /* Return true if the DECL_UID in both trees are equal.  */\n \n static int\n@@ -951,8 +933,6 @@ init_tree_ssa (struct function *fn)\n \t\t\t\t     \t\t    uid_decl_map_eq, NULL);\n   fn->gimple_df->default_defs = htab_create_ggc (20, uid_ssaname_map_hash, \n \t\t\t\t                 uid_ssaname_map_eq, NULL);\n-  fn->gimple_df->var_anns = htab_create_ggc (20, var_ann_hash, \n-\t\t\t\t\t     var_ann_eq, NULL);\n   fn->gimple_df->call_clobbered_vars = BITMAP_GGC_ALLOC ();\n   fn->gimple_df->addressable_vars = BITMAP_GGC_ALLOC ();\n   init_ssanames (fn, 0);\n@@ -998,9 +978,16 @@ delete_tree_ssa (void)\n       set_phi_nodes (bb, NULL);\n     }\n \n-  /* Remove annotations from every referenced variable.  */\n+  /* Remove annotations from every referenced local variable.  */\n   FOR_EACH_REFERENCED_VAR (var, rvi)\n     {\n+      if (!MTAG_P (var)\n+\t  && (TREE_STATIC (var) || DECL_EXTERNAL (var)))\n+\t{\n+\t  var_ann (var)->mpt = NULL_TREE;\n+\t  var_ann (var)->symbol_mem_tag = NULL_TREE;\n+\t  continue;\n+\t}\n       if (var->base.ann)\n         ggc_free (var->base.ann);\n       var->base.ann = NULL;\n@@ -1018,8 +1005,6 @@ delete_tree_ssa (void)\n   \n   htab_delete (cfun->gimple_df->default_defs);\n   cfun->gimple_df->default_defs = NULL;\n-  htab_delete (cfun->gimple_df->var_anns);\n-  cfun->gimple_df->var_anns = NULL;\n   cfun->gimple_df->call_clobbered_vars = NULL;\n   cfun->gimple_df->addressable_vars = NULL;\n   cfun->gimple_df->modified_noreturn_calls = NULL;"}]}