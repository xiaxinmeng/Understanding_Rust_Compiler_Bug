{"sha": "dea91a66ff51bb0f37db48baebc7e098947713e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVhOTFhNjZmZjUxYmIwZjM3ZGI0OGJhZWJjN2UwOTg5NDc3MTNlOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-12-15T06:19:51Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-12-15T06:19:51Z"}, "message": "re PR ipa/61602 (ICE in lto1 on x86_64-linux-gnu in ipa_single_use, at ipa.c:1257)\n\n\n\tPR ipa/61602\n\t* gcc.dg/torture/pr61602.c: New testcase.\n\n\t* cgraph.h (ipa_discover_readonly_nonaddressable_vars): Return bool.\n\t* ipa.c (set_writeonly_bit): Track if reference was removed.\n\t(ipa_discover_readonly_nonaddressable_vars): Return true if any\n\treferences was removed.\n\t* ipa-reference.c (propagate): Return TODO_remove_functions if\n\treference was removed.\n\nFrom-SVN: r218731", "tree": {"sha": "7d0f222bbf1aafe6ff3d8426db8aafe30396b616", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d0f222bbf1aafe6ff3d8426db8aafe30396b616"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dea91a66ff51bb0f37db48baebc7e098947713e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dea91a66ff51bb0f37db48baebc7e098947713e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dea91a66ff51bb0f37db48baebc7e098947713e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dea91a66ff51bb0f37db48baebc7e098947713e9/comments", "author": null, "committer": null, "parents": [{"sha": "f1ced6f5e7e78a6818c4820c4a5f103b74112f93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1ced6f5e7e78a6818c4820c4a5f103b74112f93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1ced6f5e7e78a6818c4820c4a5f103b74112f93"}], "stats": {"total": 43, "additions": 34, "deletions": 9}, "files": [{"sha": "fbb9922f147ecd40888f1100752f029fff4bf7d7", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea91a66ff51bb0f37db48baebc7e098947713e9/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea91a66ff51bb0f37db48baebc7e098947713e9/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=dea91a66ff51bb0f37db48baebc7e098947713e9", "patch": "@@ -2188,7 +2188,7 @@ void record_references_in_initializer (tree, bool);\n \n /* In ipa.c  */\n void cgraph_build_static_cdtor (char which, tree body, int priority);\n-void ipa_discover_readonly_nonaddressable_vars (void);\n+bool ipa_discover_readonly_nonaddressable_vars (void);\n \n /* In varpool.c  */\n tree ctor_for_folding (tree);"}, {"sha": "714a0ee2c5d46c244f70a7327d33b467715eb33b", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea91a66ff51bb0f37db48baebc7e098947713e9/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea91a66ff51bb0f37db48baebc7e098947713e9/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=dea91a66ff51bb0f37db48baebc7e098947713e9", "patch": "@@ -676,11 +676,12 @@ propagate (void)\n     XCNEWVEC (struct cgraph_node *, symtab->cgraph_count);\n   int order_pos;\n   int i;\n+  bool remove_p;\n \n   if (dump_file)\n     cgraph_node::dump_cgraph (dump_file);\n \n-  ipa_discover_readonly_nonaddressable_vars ();\n+  remove_p = ipa_discover_readonly_nonaddressable_vars ();\n   generate_summary ();\n \n   /* Propagate the local information through the call graph to produce\n@@ -867,7 +868,7 @@ propagate (void)\n   if (dump_file)\n     splay_tree_delete (reference_vars_to_consider);\n   reference_vars_to_consider = NULL;\n-  return 0;\n+  return remove_p ? TODO_remove_functions : 0;\n }\n \n /* Return true if we need to write summary of NODE. */"}, {"sha": "d7ec4978533e4da7359e79236eef90ebc4594309", "filename": "gcc/ipa.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea91a66ff51bb0f37db48baebc7e098947713e9/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea91a66ff51bb0f37db48baebc7e098947713e9/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=dea91a66ff51bb0f37db48baebc7e098947713e9", "patch": "@@ -714,14 +714,18 @@ set_readonly_bit (varpool_node *vnode, void *data ATTRIBUTE_UNUSED)\n /* Set writeonly bit and clear the initalizer, since it will not be needed.  */\n \n bool\n-set_writeonly_bit (varpool_node *vnode, void *data ATTRIBUTE_UNUSED)\n+set_writeonly_bit (varpool_node *vnode, void *data)\n {\n   vnode->writeonly = true;\n   if (optimize)\n     {\n       DECL_INITIAL (vnode->decl) = NULL;\n       if (!vnode->alias)\n-\tvnode->remove_all_references ();\n+\t{\n+\t  if (vnode->num_references ())\n+\t    *(bool *)data = true;\n+\t  vnode->remove_all_references ();\n+\t}\n     }\n   return false;\n }\n@@ -739,15 +743,18 @@ clear_addressable_bit (varpool_node *vnode, void *data ATTRIBUTE_UNUSED)\n /* Discover variables that have no longer address taken or that are read only\n    and update their flags.\n \n+   Return true when unreachable symbol removan should be done.\n+\n    FIXME: This can not be done in between gimplify and omp_expand since\n    readonly flag plays role on what is shared and what is not.  Currently we do\n    this transformation as part of whole program visibility and re-do at\n    ipa-reference pass (to take into account clonning), but it would\n    make sense to do it before early optimizations.  */\n \n-void\n+bool\n ipa_discover_readonly_nonaddressable_vars (void)\n {\n+  bool remove_p = false;\n   varpool_node *vnode;\n   if (dump_file)\n     fprintf (dump_file, \"Clearing variable flags:\");\n@@ -762,14 +769,16 @@ ipa_discover_readonly_nonaddressable_vars (void)\n \tbool read = false;\n \tbool explicit_refs = true;\n \n-\tprocess_references (vnode, &written, &address_taken, &read, &explicit_refs);\n+\tprocess_references (vnode, &written, &address_taken, &read,\n+\t\t\t    &explicit_refs);\n \tif (!explicit_refs)\n \t  continue;\n \tif (!address_taken)\n \t  {\n \t    if (TREE_ADDRESSABLE (vnode->decl) && dump_file)\n \t      fprintf (dump_file, \" %s (non-addressable)\", vnode->name ());\n-\t    vnode->call_for_node_and_aliases (clear_addressable_bit, NULL, true);\n+\t    vnode->call_for_node_and_aliases (clear_addressable_bit, NULL,\n+\t\t\t\t\t      true);\n \t  }\n \tif (!address_taken && !written\n \t    /* Making variable in explicit section readonly can cause section\n@@ -785,11 +794,13 @@ ipa_discover_readonly_nonaddressable_vars (void)\n \t  {\n \t    if (dump_file)\n \t      fprintf (dump_file, \" %s (write-only)\", vnode->name ());\n-\t    vnode->call_for_node_and_aliases (set_writeonly_bit, NULL, true);\n+\t    vnode->call_for_node_and_aliases (set_writeonly_bit, &remove_p, \n+\t\t\t\t\t     true);\n \t  }\n       }\n   if (dump_file)\n     fprintf (dump_file, \"\\n\");\n+  return remove_p;\n }\n \n /* Free inline summary.  */"}, {"sha": "1b51abe23d9b535075b127ebf6cb42b46a89bf12", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea91a66ff51bb0f37db48baebc7e098947713e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea91a66ff51bb0f37db48baebc7e098947713e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dea91a66ff51bb0f37db48baebc7e098947713e9", "patch": "@@ -1,3 +1,8 @@\n+2014-12-14  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/61602\n+\t* gcc.dg/torture/pr61602.c: New testcase.\n+\n 2014-12-14  Jan Hubicka  <hubicka@ucw.cz>\t\n \t\n \tPR ipa/61558"}, {"sha": "51a675581c41e2a2f171e3a0a0008d09f81b8833", "filename": "gcc/testsuite/gcc.dg/torture/pr61602.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea91a66ff51bb0f37db48baebc7e098947713e9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr61602.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea91a66ff51bb0f37db48baebc7e098947713e9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr61602.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr61602.c?ref=dea91a66ff51bb0f37db48baebc7e098947713e9", "patch": "@@ -0,0 +1,8 @@\n+int a;\n+int *b = &a, **c = &b;\n+int\n+main ()\n+{\n+  int **d = &b;\n+  *d = 0;\n+}"}]}