{"sha": "439407aa2c678a96bd5b430ab9c335e65beb5751", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM5NDA3YWEyYzY3OGE5NmJkNWI0MzBhYjljMzM1ZTY1YmViNTc1MQ==", "commit": {"author": {"name": "Nikhil Benesch", "email": "nikhil.benesch@gmail.com", "date": "2020-10-18T19:28:54Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-10-22T05:29:04Z"}, "message": "syscall: only compile ptrace varargs shim on Linux\n\nOnly compile the __go_ptrace varargs shim on Linux to avoid compilation\nfailures on some other platforms. The C ptrace function is not entirely\nportable (e.g., NetBSD has `int data` instead of `void* data`), and so\nfar Linux is the only platform that needs the varargs shim.\n\nAdditionally, make the types in the ptrace and raw_ptrace function\ndeclarations match. This makes it more clear that the only difference\nbetween the two is that calls via the former are allowed to block while\ncalls via the latter are not.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/263517", "tree": {"sha": "62868455b7c11523dfe8daaf93e178ecb7425167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62868455b7c11523dfe8daaf93e178ecb7425167"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/439407aa2c678a96bd5b430ab9c335e65beb5751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/439407aa2c678a96bd5b430ab9c335e65beb5751", "html_url": "https://github.com/Rust-GCC/gccrs/commit/439407aa2c678a96bd5b430ab9c335e65beb5751", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/439407aa2c678a96bd5b430ab9c335e65beb5751/comments", "author": {"login": "benesch", "id": 882976, "node_id": "MDQ6VXNlcjg4Mjk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/882976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benesch", "html_url": "https://github.com/benesch", "followers_url": "https://api.github.com/users/benesch/followers", "following_url": "https://api.github.com/users/benesch/following{/other_user}", "gists_url": "https://api.github.com/users/benesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/benesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benesch/subscriptions", "organizations_url": "https://api.github.com/users/benesch/orgs", "repos_url": "https://api.github.com/users/benesch/repos", "events_url": "https://api.github.com/users/benesch/events{/privacy}", "received_events_url": "https://api.github.com/users/benesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5d9706f95378d40a8895616e167614b69dfe70a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d9706f95378d40a8895616e167614b69dfe70a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5d9706f95378d40a8895616e167614b69dfe70a"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "384ca6e88647faf62fafed81aec67d8677dbbeb6", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439407aa2c678a96bd5b430ab9c335e65beb5751/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439407aa2c678a96bd5b430ab9c335e65beb5751/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=439407aa2c678a96bd5b430ab9c335e65beb5751", "patch": "@@ -1,4 +1,4 @@\n-64c25b2365f7125a32b3146618b627f26a78c1fc\n+fa66bd11bbe58943e273cfa74356771c996f5b24\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "ca7fdc0825e7a66e0bf222d96b61ce2ec9056f18", "filename": "libgo/go/syscall/exec_bsd.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fgo%2Fsyscall%2Fexec_bsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fgo%2Fsyscall%2Fexec_bsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexec_bsd.go?ref=439407aa2c678a96bd5b430ab9c335e65beb5751", "patch": "@@ -93,7 +93,7 @@ func forkAndExecInChild(argv0 *byte, argv, envv []*byte, chroot, dir *byte, attr\n \n \t// Enable tracing if requested.\n \tif sys.Ptrace {\n-\t\terr1 = raw_ptrace(_PTRACE_TRACEME, 0, nil, nil)\n+\t\terr1 = raw_ptrace(_PTRACE_TRACEME, 0, 0, 0)\n \t\tif err1 != 0 {\n \t\t\tgoto childerror\n \t\t}"}, {"sha": "38975810432973dbbcedd65bea5779094d094d01", "filename": "libgo/go/syscall/exec_linux.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fgo%2Fsyscall%2Fexec_linux.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fgo%2Fsyscall%2Fexec_linux.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexec_linux.go?ref=439407aa2c678a96bd5b430ab9c335e65beb5751", "patch": "@@ -538,7 +538,7 @@ func forkAndExecInChild1(argv0 *byte, argv, envv []*byte, chroot, dir *byte, att\n \t// Do this right before exec so that we don't unnecessarily trace the runtime\n \t// setting up after the fork. See issue #21428.\n \tif sys.Ptrace {\n-\t\terr1 = raw_ptrace(_PTRACE_TRACEME, 0, nil, nil)\n+\t\terr1 = raw_ptrace(_PTRACE_TRACEME, 0, 0, 0)\n \t\tif err1 != 0 {\n \t\t\tgoto childerror\n \t\t}"}, {"sha": "c837cf7a4e2ff0e60a06ec3d8aecc71aaa701795", "filename": "libgo/go/syscall/exec_stubs.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fgo%2Fsyscall%2Fexec_stubs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fgo%2Fsyscall%2Fexec_stubs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fexec_stubs.go?ref=439407aa2c678a96bd5b430ab9c335e65beb5751", "patch": "@@ -30,6 +30,6 @@ func (w WaitStatus) Signal() int     { return 0 }\n func (w WaitStatus) StopSignal() int { return 0 }\n func (w WaitStatus) TrapCause() int  { return 0 }\n \n-func raw_ptrace(request int, pid int, addr *byte, data *byte) Errno {\n+func raw_ptrace(request int, pid int, addr uintptr, data uintptr) Errno {\n \treturn ENOSYS\n }"}, {"sha": "92c7f3cc23234080a7469cecfece2f385a264515", "filename": "libgo/go/syscall/libcall_aix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fgo%2Fsyscall%2Flibcall_aix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fgo%2Fsyscall%2Flibcall_aix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_aix.go?ref=439407aa2c678a96bd5b430ab9c335e65beb5751", "patch": "@@ -19,7 +19,7 @@ const SYS_EXECVE = 0\n //sys\tptrace64(request int, id int64, addr int64, data int, buff uintptr) (err error)\n //ptrace64(request _C_int, id int64, addr int64, data _C_int, buff *byte) _C_int\n \n-func raw_ptrace(request int, pid int, addr *byte, data *byte) Errno {\n+func raw_ptrace(request int, pid int, addr uintptr, data uintptr) Errno {\n \tif request == _PTRACE_TRACEME {\n \t\t// Convert to AIX ptrace call.\n \t\terr := ptrace64(_PT_TRACE_ME, 0, 0, 0, 0)"}, {"sha": "a32d6968f24fcb5b057a25b3d37de9796c5778db", "filename": "libgo/go/syscall/libcall_glibc.go", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fgo%2Fsyscall%2Flibcall_glibc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fgo%2Fsyscall%2Flibcall_glibc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_glibc.go?ref=439407aa2c678a96bd5b430ab9c335e65beb5751", "patch": "@@ -31,9 +31,6 @@ func Futimes(fd int, tv []Timeval) (err error) {\n \treturn Utimes(\"/proc/self/fd/\"+itoa(fd), tv)\n }\n \n-//sys\tptrace(request int, pid int, addr uintptr, data uintptr) (err error)\n-//__go_ptrace(request _C_int, pid Pid_t, addr *byte, data *byte) _C_long\n-\n //sys\taccept4(fd int, sa *RawSockaddrAny, len *Socklen_t, flags int) (nfd int, err error)\n //accept4(fd _C_int, sa *RawSockaddrAny, len *Socklen_t, flags _C_int) _C_int\n "}, {"sha": "44ff46d1016e4b9e50c8449382b659955576a0f1", "filename": "libgo/go/syscall/libcall_hurd.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fgo%2Fsyscall%2Flibcall_hurd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fgo%2Fsyscall%2Flibcall_hurd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_hurd.go?ref=439407aa2c678a96bd5b430ab9c335e65beb5751", "patch": "@@ -7,7 +7,7 @@\n package syscall\n \n // Dummy function\n-func raw_ptrace(request int, pid int, addr *byte, data *byte) Errno {\n+func raw_ptrace(request int, pid int, addr uintptr, data uintptr) Errno {\n \treturn ENOSYS\n }\n "}, {"sha": "98807668d52756496b5f9b646cd8cca79e59e102", "filename": "libgo/go/syscall/libcall_irix.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fgo%2Fsyscall%2Flibcall_irix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fgo%2Fsyscall%2Flibcall_irix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_irix.go?ref=439407aa2c678a96bd5b430ab9c335e65beb5751", "patch": "@@ -6,5 +6,5 @@\n \n package syscall\n \n-//sysnb raw_ptrace(request int, pid int, addr *byte, data *byte) (err Errno)\n+//sysnb raw_ptrace(request int, pid int, addr uintptr, data uintptr) (err Errno)\n //ptrace(request _C_int, pid Pid_t, addr *byte, data *byte) _C_long"}, {"sha": "96974bd3269aa9f7a2f85ba68bdd318a8b6d8578", "filename": "libgo/go/syscall/libcall_linux.go", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fgo%2Fsyscall%2Flibcall_linux.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fgo%2Fsyscall%2Flibcall_linux.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_linux.go?ref=439407aa2c678a96bd5b430ab9c335e65beb5751", "patch": "@@ -10,7 +10,10 @@ import (\n \t\"unsafe\"\n )\n \n-//sysnb raw_ptrace(request int, pid int, addr *byte, data *byte) (err Errno)\n+//sys\tptrace(request int, pid int, addr uintptr, data uintptr) (err Errno)\n+//__go_ptrace(request _C_int, pid Pid_t, addr *byte, data *byte) _C_long\n+\n+//sysnb raw_ptrace(request int, pid int, addr uintptr, data uintptr) (err Errno)\n //__go_ptrace(request _C_int, pid Pid_t, addr *byte, data *byte) _C_long\n \n func ptracePeek(req int, pid int, addr uintptr, out []byte) (count int, err error) {"}, {"sha": "ef86f09711d12a31837aa558a6e84491a4df2c12", "filename": "libgo/go/syscall/libcall_solaris_386.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_386.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_386.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_386.go?ref=439407aa2c678a96bd5b430ab9c335e65beb5751", "patch": "@@ -8,5 +8,5 @@ package syscall\n //sysnb\tUname(buf *Utsname) (err error)\n //_nuname(buf *Utsname) _C_int\n \n-//sysnb raw_ptrace(request int, pid int, addr *byte, data *byte) (err Errno)\n+//sysnb raw_ptrace(request int, pid int, addr uintptr, data uintptr) (err Errno)\n //ptrace(request _C_int, pid Pid_t, addr *byte, data *byte) _C_long"}, {"sha": "f44025e1eec71fe176d18fcf36bb4a2d73a87bea", "filename": "libgo/go/syscall/libcall_solaris_amd64.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_amd64.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_amd64.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_amd64.go?ref=439407aa2c678a96bd5b430ab9c335e65beb5751", "patch": "@@ -5,6 +5,6 @@\n package syscall\n \n // 64-bit ptrace(3C) doesn't exist\n-func raw_ptrace(request int, pid int, addr *byte, data *byte) Errno {\n+func raw_ptrace(request int, pid int, addr uintptr, data uintptr) Errno {\n \treturn ENOSYS\n }"}, {"sha": "3d50309983f1858b3eaa5585d1ccceb96f002465", "filename": "libgo/go/syscall/libcall_solaris_sparc.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_sparc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_sparc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_sparc.go?ref=439407aa2c678a96bd5b430ab9c335e65beb5751", "patch": "@@ -4,5 +4,5 @@\n \n package syscall\n \n-//sysnb raw_ptrace(request int, pid int, addr *byte, data *byte) (err Errno)\n+//sysnb raw_ptrace(request int, pid int, addr uintptr, data uintptr) (err Errno)\n //ptrace(request _C_int, pid Pid_t, addr *byte, data *byte) _C_long"}, {"sha": "f44025e1eec71fe176d18fcf36bb4a2d73a87bea", "filename": "libgo/go/syscall/libcall_solaris_sparc64.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_sparc64.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_sparc64.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_solaris_sparc64.go?ref=439407aa2c678a96bd5b430ab9c335e65beb5751", "patch": "@@ -5,6 +5,6 @@\n package syscall\n \n // 64-bit ptrace(3C) doesn't exist\n-func raw_ptrace(request int, pid int, addr *byte, data *byte) Errno {\n+func raw_ptrace(request int, pid int, addr uintptr, data uintptr) Errno {\n \treturn ENOSYS\n }"}, {"sha": "f84860891e6cfd4fef4f5421d4c1402329fc165e", "filename": "libgo/runtime/go-varargs.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fruntime%2Fgo-varargs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439407aa2c678a96bd5b430ab9c335e65beb5751/libgo%2Fruntime%2Fgo-varargs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-varargs.c?ref=439407aa2c678a96bd5b430ab9c335e65beb5751", "patch": "@@ -114,12 +114,11 @@ __go_syscall6(uintptr_t flag, uintptr_t a1, uintptr_t a2, uintptr_t a3,\n \n #endif\n \n-// AIX ptrace is really different from Linux ptrace. Let syscall\n-// package handles it.\n-#if defined(HAVE_SYS_PTRACE_H) && !defined(_AIX)\n+\n+#if defined(HAVE_SYS_PTRACE_H) && defined(__linux__)\n \n // Despite documented appearances, this is actually implemented as\n-// a variadic function within glibc.\n+// a variadic function within glibc on Linux.\n \n long\n __go_ptrace(int request, pid_t pid, void *addr, void *data)"}]}