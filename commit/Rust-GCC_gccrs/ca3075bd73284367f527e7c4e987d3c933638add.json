{"sha": "ca3075bd73284367f527e7c4e987d3c933638add", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EzMDc1YmQ3MzI4NDM2N2Y1MjdlN2M0ZTk4N2QzYzkzMzYzOGFkZA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-10-03T16:28:33Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-10-03T16:28:33Z"}, "message": "cpplib.c (if_directive_nameo): Add static prototype.\n\n\t* cpplib.c (if_directive_nameo): Add static prototype.\n\n\t* cse.c (cse_insn): Remove unused variable `p'.\n\n\t* except.c (create_rethrow_ref, push_entry,\n\treceive_exception_label, new_eh_region_entry, find_func_region,\n\tclear_function_eh_region, process_nestinfo): Add static prototypes.\n\t(get_reg_for_handler): Hide definition.\n\t(process_nestinfo): Initialize variable `extra_handlers'.\n\n\t* expr.h (expand_builtin_longjmp): Add extern prototype.\n\n\t* final.c (final_addr_vec_align, align_fuzz): Add static prototypes.\n\n\t* function.c (prepare_function_start): Likewise.\n\t(pop_function_context_from): Mark parameter `context' with\n\tATTRIBUTE_UNUSED.\n\t(push_temp_slots_for_block, flush_addressof): Hide definition.\n\n\t* gcov.c (init_arc, reverse_arcs, create_program_flow_graph,\n\tsolve_program_flow_graph, calculate_branch_probs,\n\tfunction_summary, main, fancy_abort): Add prototypes.\n\n\t* gen-protos.c (add_hash, parse_fn_proto, main): Likewise.\n\t(add_hash): Constify a char*.\n\n\t* ggc-common.c (ggc_mark_rtx_ptr, ggc_mark_tree_ptr,\n\tggc_mark_tree_varray_ptr, ggc_mark_tree_hash_table_ptr,\n\tggc_mark_string_ptr, ggc_mark_tree_hash_table_entry): Add prototypes.\n\n\t* integrate.c (expand_inline_function_eh_labelmap): Likewise.\n\n\t* lists.c (free_list, zap_lists): Likewise.\n\nFrom-SVN: r29783", "tree": {"sha": "55795b9bbaaf83eb846e7535a9776f7e8e633c25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55795b9bbaaf83eb846e7535a9776f7e8e633c25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca3075bd73284367f527e7c4e987d3c933638add", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3075bd73284367f527e7c4e987d3c933638add", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca3075bd73284367f527e7c4e987d3c933638add", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca3075bd73284367f527e7c4e987d3c933638add/comments", "author": null, "committer": null, "parents": [{"sha": "93868d11a61ed7c903a112b9a29b43907220f51a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93868d11a61ed7c903a112b9a29b43907220f51a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93868d11a61ed7c903a112b9a29b43907220f51a"}], "stats": {"total": 100, "additions": 90, "deletions": 10}, "files": [{"sha": "7b90910f77d86050e7f75e3a9032ccaf43ba3d7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3075bd73284367f527e7c4e987d3c933638add/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3075bd73284367f527e7c4e987d3c933638add/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca3075bd73284367f527e7c4e987d3c933638add", "patch": "@@ -1,3 +1,39 @@\n+Sun Oct  3 12:24:52 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* cpplib.c (if_directive_nameo): Add static prototype.\n+\n+\t* cse.c (cse_insn): Remove unused variable `p'.\n+\n+\t* except.c (create_rethrow_ref, push_entry,\n+\treceive_exception_label, new_eh_region_entry, find_func_region,\n+\tclear_function_eh_region, process_nestinfo): Add static prototypes.\n+\t(get_reg_for_handler): Hide definition.\n+\t(process_nestinfo): Initialize variable `extra_handlers'.\n+\n+\t* expr.h (expand_builtin_longjmp): Add extern prototype.\n+\n+\t* final.c (final_addr_vec_align, align_fuzz): Add static prototypes.\n+\n+\t* function.c (prepare_function_start): Likewise.\n+\t(pop_function_context_from): Mark parameter `context' with\n+\tATTRIBUTE_UNUSED.\n+\t(push_temp_slots_for_block, flush_addressof): Hide definition.\n+\t\n+\t* gcov.c (init_arc, reverse_arcs, create_program_flow_graph,\n+\tsolve_program_flow_graph, calculate_branch_probs,\n+\tfunction_summary, main, fancy_abort): Add prototypes.\n+\n+\t* gen-protos.c (add_hash, parse_fn_proto, main): Likewise.\n+\t(add_hash): Constify a char*.\n+\n+\t* ggc-common.c (ggc_mark_rtx_ptr, ggc_mark_tree_ptr,\n+\tggc_mark_tree_varray_ptr, ggc_mark_tree_hash_table_ptr,\n+\tggc_mark_string_ptr, ggc_mark_tree_hash_table_entry): Add prototypes.\n+\n+\t* integrate.c (expand_inline_function_eh_labelmap): Likewise.\n+\n+\t* lists.c (free_list, zap_lists): Likewise.\n+\n Sun Oct  3 12:05:28 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* alias.c (nonlocal_reference_p): Add static prototype."}, {"sha": "7e41d1b4228a6de2ddc736ebad65a13553a2737b", "filename": "gcc/cpplib.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3075bd73284367f527e7c4e987d3c933638add/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3075bd73284367f527e7c4e987d3c933638add/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=ca3075bd73284367f527e7c4e987d3c933638add", "patch": "@@ -49,6 +49,8 @@ static void skip_if_group\t\tPROTO ((cpp_reader *));\n static void parse_name\t\t\tPARAMS ((cpp_reader *, int));\n static void parse_string\t\tPARAMS ((cpp_reader *, int));\n static int parse_assertion\t\tPARAMS ((cpp_reader *));\n+static const char *if_directive_name\tPARAMS ((cpp_reader *,\n+\t\t\t\t\t\t struct if_stack *));\n \n /* External declarations.  */\n "}, {"sha": "42b338c5cec70600eb8c1b46c8232ef914c942de", "filename": "gcc/cse.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3075bd73284367f527e7c4e987d3c933638add/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3075bd73284367f527e7c4e987d3c933638add/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=ca3075bd73284367f527e7c4e987d3c933638add", "patch": "@@ -7404,8 +7404,6 @@ cse_insn (insn, libcall_insn)\n \t it.  If it was a computed branch, delete it and re-emit.  */\n       else if (dest == pc_rtx && GET_CODE (src) == LABEL_REF)\n \t{\n-\t  rtx p;\n-\n \t  /* If this is not in the format for a simple branch and\n \t     we are the only SET in it, re-emit it.  */\n \t  if (! simplejump_p (insn) && n_sets == 1)"}, {"sha": "c7257b31ef4557a32adb3118d45faae61cca98fb", "filename": "gcc/except.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3075bd73284367f527e7c4e987d3c933638add/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3075bd73284367f527e7c4e987d3c933638add/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=ca3075bd73284367f527e7c4e987d3c933638add", "patch": "@@ -472,7 +472,14 @@ static void mark_eh_node        PROTO((struct eh_node *));\n static void mark_eh_stack       PROTO((struct eh_stack *));\n static void mark_eh_queue       PROTO((struct eh_queue *));\n static void mark_tree_label_node PROTO ((struct label_node *));\n-static void mark_func_eh_entry PROTO ((void *));\n+static void mark_func_eh_entry\tPROTO ((void *));\n+static rtx create_rethrow_ref\tPROTO ((int));\n+static void push_entry\t\tPROTO ((struct eh_stack *, struct eh_entry*));\n+static void receive_exception_label PROTO ((rtx));\n+static int new_eh_region_entry\tPROTO ((int, rtx));\n+static int find_func_region\tPROTO ((int));\n+static void clear_function_eh_region PROTO ((void));\n+static void process_nestinfo\tPROTO ((int, eh_nesting_info *, int *));\n \n rtx expand_builtin_return_addr\tPROTO((enum built_in_function, int, rtx));\n \f\n@@ -877,7 +884,7 @@ get_new_handler (handler, typeinfo)\n /* Find the index in function_eh_regions associated with a NOTE region. If\n    the region cannot be found, a -1 is returned. This should never happen! */\n \n-int \n+static int \n find_func_region (insn_region)\n      int insn_region;\n {\n@@ -2842,6 +2849,7 @@ eh_regs (pcontext, psp, pra, outgoing)\n /* Retrieve the register which contains the pointer to the eh_context\n    structure set the __throw. */\n \n+#if 0\n rtx \n get_reg_for_handler ()\n {\n@@ -2850,6 +2858,7 @@ get_reg_for_handler ()\n \t\t\t   current_function_decl);\n   return reg1;\n }\n+#endif\n \n /* Set up the epilogue with the magic bits we'll need to return to the\n    exception handler.  */\n@@ -3064,7 +3073,7 @@ process_nestinfo (block, info, nested_eh_region)\n   handler_info *ptr, *last_ptr = NULL;\n   int x, y, count = 0;\n   int extra = 0;\n-  handler_info **extra_handlers;\n+  handler_info **extra_handlers = 0;\n   int index = info->region_index[block];\n \n   /* If we've already processed this block, simply return. */"}, {"sha": "667ba0284d0828199e52d6759146308e36152e9a", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3075bd73284367f527e7c4e987d3c933638add/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3075bd73284367f527e7c4e987d3c933638add/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=ca3075bd73284367f527e7c4e987d3c933638add", "patch": "@@ -891,6 +891,7 @@ extern rtx expand_builtin_va_arg PROTO((tree, tree));\n #endif\n \n extern rtx expand_builtin_setjmp PROTO((rtx, rtx, rtx, rtx));\n+extern void expand_builtin_longjmp PROTO ((rtx, rtx));\n extern rtx expand_builtin_saveregs PROTO((void));\n extern int get_varargs_alias_set PROTO((void));\n \f"}, {"sha": "7402e270e933198fa36d10589e77968aa8980af5", "filename": "gcc/final.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3075bd73284367f527e7c4e987d3c933638add/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3075bd73284367f527e7c4e987d3c933638add/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=ca3075bd73284367f527e7c4e987d3c933638add", "patch": "@@ -310,6 +310,10 @@ static void leaf_renumber_regs\tPROTO((rtx));\n #ifdef HAVE_cc0\n static int alter_cond\t\tPROTO((rtx));\n #endif\n+#ifndef ADDR_VEC_ALIGN\n+static int final_addr_vec_align PROTO ((rtx));\n+#endif\n+static int align_fuzz\t\tPROTO ((rtx, rtx, int, unsigned));\n \f\n /* Initialize data in final at the beginning of a compilation.  */\n \n@@ -824,7 +828,7 @@ get_attr_length (insn)\n #endif\n \n #ifndef ADDR_VEC_ALIGN\n-int\n+static int\n final_addr_vec_align (addr_vec)\n      rtx addr_vec;\n {\n@@ -889,7 +893,7 @@ label_to_alignment (label)\n    GROWTH should be ~0 if the objective is to compute potential code size\n    increase, and 0 if the objective is to compute potential shrink.\n    The return value is undefined for any other value of GROWTH.  */\n-int\n+static int\n align_fuzz (start, end, known_align_log, growth)\n      rtx start, end;\n      int known_align_log;"}, {"sha": "c84b6d647c54035dc0103ab27fe8d034dd3928f4", "filename": "gcc/function.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3075bd73284367f527e7c4e987d3c933638add/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3075bd73284367f527e7c4e987d3c933638add/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=ca3075bd73284367f527e7c4e987d3c933638add", "patch": "@@ -280,6 +280,7 @@ static void compute_insns_for_mem PROTO ((rtx, rtx, struct hash_table *));\n static void mark_temp_slot PROTO ((struct temp_slot *));\n static void mark_function_status PROTO ((struct function *));\n static void mark_function_chain PROTO ((void *));\n+static void prepare_function_start PROTO ((void));\n \n \f\n /* Pointer to chain of `struct function' for containing functions.  */\n@@ -349,7 +350,7 @@ push_function_context ()\n \n void\n pop_function_context_from (context)\n-     tree context;\n+     tree context ATTRIBUTE_UNUSED;\n {\n   struct function *p = outer_function_chain;\n   struct var_refs_queue *queue;\n@@ -1148,6 +1149,7 @@ push_temp_slots ()\n /* Likewise, but save the new level as the place to allocate variables\n    for blocks.  */\n \n+#if 0\n void\n push_temp_slots_for_block ()\n {\n@@ -1182,6 +1184,7 @@ set_target_temp_slot_level (level)\n {\n   target_temp_slot_level = level;\n }\n+#endif\n \n /* Pop a temporary nesting level.  All slots in use in the current level\n    are freed.  */\n@@ -2680,6 +2683,7 @@ gen_mem_addressof (reg, decl)\n \n /* If DECL has an RTL that is an ADDRESSOF rtx, put it into the stack.  */\n \n+#if 0\n void\n flush_addressof (decl)\n      tree decl;\n@@ -2691,6 +2695,7 @@ flush_addressof (decl)\n       && GET_CODE (XEXP (XEXP (DECL_RTL (decl), 0), 0)) == REG)\n     put_addressof_into_stack (XEXP (DECL_RTL (decl), 0), 0);\n }\n+#endif\n \n /* Force the register pointed to by R, an ADDRESSOF rtx, into the stack.  */\n "}, {"sha": "ea1e7c34098d6431970dc9ea391e6be0264cadbd", "filename": "gcc/gcov.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3075bd73284367f527e7c4e987d3c933638add/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3075bd73284367f527e7c4e987d3c933638add/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=ca3075bd73284367f527e7c4e987d3c933638add", "patch": "@@ -220,6 +220,15 @@ static void read_files PROTO ((void));\n static void scan_for_source_files PROTO ((void));\n static void output_data PROTO ((void));\n static void print_usage PROTO ((void)) ATTRIBUTE_NORETURN;\n+static void init_arc PROTO ((struct adj_list *, int, int, struct bb_info *));\n+static struct adj_list *reverse_arcs PROTO ((struct adj_list *));\n+static void create_program_flow_graph PROTO ((struct bb_info_list *));\n+static void solve_program_flow_graph PROTO ((struct bb_info_list *));\n+static void calculate_branch_probs PROTO ((struct bb_info_list *, int,\n+\t\t\t\t\t   struct arcdata **, int));\n+static void function_summary PROTO ((void));\n+\n+extern int main PROTO ((int, char **));\n \n int\n main (argc, argv)\n@@ -269,6 +278,7 @@ fnotice VPROTO ((FILE *file, const char *msgid, ...))\n \n /* More 'friendly' abort that prints the line and file.\n    config.h can #define abort fancy_abort if you like that sort of thing.  */\n+extern void fancy_abort PROTO ((void)) ATTRIBUTE_NORETURN;\n \n void\n fancy_abort ()"}, {"sha": "497196269ab45ead9187d73aae11d9ed545aac7c", "filename": "gcc/gen-protos.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3075bd73284367f527e7c4e987d3c933638add/gcc%2Fgen-protos.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3075bd73284367f527e7c4e987d3c933638add/gcc%2Fgen-protos.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgen-protos.c?ref=ca3075bd73284367f527e7c4e987d3c933638add", "patch": "@@ -25,13 +25,16 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n int verbose = 0;\n const char *progname;\n \n+static void add_hash\t\tPARAMS ((const char *));\n+static int parse_fn_proto\tPARAMS ((char *, char *, struct fn_decl *));\n+\n #define HASH_SIZE 2503 /* a prime */\n int hash_tab[HASH_SIZE];\n int next_index;\n \n static void\n add_hash (fname)\n-     char *fname;\n+     const char *fname;\n {\n   int i, i0;\n \n@@ -124,6 +127,8 @@ parse_fn_proto (start, end, fn)\n   return 1;\n }\n \n+extern int main PARAMS ((int, char **));\n+\n int\n main (argc, argv)\n      int argc ATTRIBUTE_UNUSED;"}, {"sha": "cf28d5bbc0c51b0b430f80e9cd8c3188b5e06473", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3075bd73284367f527e7c4e987d3c933638add/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3075bd73284367f527e7c4e987d3c933638add/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=ca3075bd73284367f527e7c4e987d3c933638add", "patch": "@@ -29,6 +29,13 @@\n #include \"tree.h\"\n #include \"varray.h\"\n \n+static void ggc_mark_rtx_ptr PARAMS ((void *));\n+static void ggc_mark_tree_ptr PARAMS ((void *));\n+static void ggc_mark_tree_varray_ptr PARAMS ((void *));\n+static void ggc_mark_tree_hash_table_ptr PARAMS ((void *));\n+static void ggc_mark_string_ptr PARAMS ((void *));\n+static boolean ggc_mark_tree_hash_table_entry PARAMS ((struct hash_entry *,\n+\t\t\t\t\t\t       hash_table_key));\n \n /* Maintain global roots that are preserved during GC.  */\n "}, {"sha": "bd2e6624a80e87a050505793167435699efd714e", "filename": "gcc/integrate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3075bd73284367f527e7c4e987d3c933638add/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3075bd73284367f527e7c4e987d3c933638add/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=ca3075bd73284367f527e7c4e987d3c933638add", "patch": "@@ -78,6 +78,7 @@ static void process_reg_param\t\tPROTO((struct inline_remap *, rtx,\n \t\t\t\t\t       rtx));\n void set_decl_abstract_flags\t\tPROTO((tree, int));\n static tree copy_and_set_decl_abstract_origin PROTO((tree));\n+static rtx expand_inline_function_eh_labelmap PROTO((rtx));\n \n /* The maximum number of instructions accepted for inlining a\n    function.  Increasing values mean more agressive inlining.\n@@ -1240,7 +1241,6 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n \n \tdefault:\n \t  abort ();\n-\t  break;\n \t}\n \n       if (copy)"}, {"sha": "90b67966b1542539a236b03b8ffc8487573cc899", "filename": "gcc/lists.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca3075bd73284367f527e7c4e987d3c933638add/gcc%2Flists.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca3075bd73284367f527e7c4e987d3c933638add/gcc%2Flists.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flists.c?ref=ca3075bd73284367f527e7c4e987d3c933638add", "patch": "@@ -24,6 +24,9 @@ Boston, MA 02111-1307, USA.  */\n #include \"rtl.h\"\n #include \"ggc.h\"\n \n+static void free_list PARAMS ((rtx *, rtx *));\n+static void zap_lists PARAMS ((void *));\n+\n /* Functions for maintaining cache-able lists of EXPR_LIST and INSN_LISTs.  */\n \n /* An INSN_LIST containing all INSN_LISTs allocated but currently unused.  */"}]}