{"sha": "8bc9e4ee874ea3618780413b79b51412dcc40363", "node_id": "C_kwDOANBUbNoAKDhiYzllNGVlODc0ZWEzNjE4NzgwNDEzYjc5YjUxNDEyZGNjNDAzNjM", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-01T02:26:43Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-01T02:26:43Z"}, "message": "analyzer: unify bounds-checking class hierarchies\n\nConvert out-of-bounds class hierarchy from:\n\n  pending_diagnostic\n    out_of_bounds\n      past_the_end\n        buffer_overflow (*)\n        buffer_over_read (*)\n      buffer_underwrite (*)\n      buffer_under_read (*)\n    symbolic_past_the_end\n      symbolic_buffer_overflow (*)\n      symbolic_buffer_over_read (*)\n\nto:\n\n  pending_diagnostic\n    out_of_bounds\n      concrete_out_of_bounds\n        concrete_past_the_end\n          concrete_buffer_overflow (*)\n          concrete_buffer_over_read (*)\n        concrete_buffer_underwrite (*)\n        concrete_buffer_under_read (*)\n      symbolic_past_the_end\n        symbolic_buffer_overflow (*)\n        symbolic_buffer_over_read (*)\n\nwhere the concrete classes (i.e. the instantiable ones) are marked\nwith a (*).\n\nDoing so undercovered a bug where, for CWE-131-examples.c, we were\nemitting an extra:\n  warning: heap-based buffer over-read [CWE-122] [-Wanalyzer-out-of-bounds]\nat the:\n  WidgetList[numWidgets] = NULL;\nThe issue was that within set_next_state we get the rvalue for the LHS,\nwhich looks like a read to the bounds-checker.  The patch fixes this by\npassing NULL as the region_model_context * for such accesses.\n\ngcc/analyzer/ChangeLog:\n\t* bounds-checking.cc (class out_of_bounds): Split out from...\n\t(class concrete_out_of_bounds): New abstract subclass.\n\t(class past_the_end): Rename to...\n\t(class concrete_past_the_end): ...this, and make a subclass of\n\tconcrete_out_of_bounds.\n\t(class buffer_overflow): Rename to...\n\t(class concrete_buffer_overflow): ...this, and make a subclass of\n\tconcrete_past_the_end.\n\t(class buffer_over_read): Rename to...\n\t(class concrete_buffer_over_read): ...this, and make a subclass of\n\tconcrete_past_the_end.\n\t(class buffer_underwrite): Rename to...\n\t(class concrete_buffer_underwrite): ...this, and make a subclass\n\tof concrete_out_of_bounds.\n\t(class buffer_under_read): Rename to...\n\t(class concrete_buffer_under_read): ...this, and make a subclass\n\tof concrete_out_of_bounds.\n\t(class symbolic_past_the_end): Convert to a subclass of\n\tout_of_bounds.\n\t(symbolic_buffer_overflow::get_kind): New.\n\t(symbolic_buffer_over_read::get_kind): New.\n\t(region_model::check_region_bounds): Update for renamings.\n\t* engine.cc (impl_sm_context::set_next_state): Eliminate\n\t\"new_ctxt\", passing NULL to get_rvalue instead.\n\t(impl_sm_context::warn): Likewise.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "6489e717d4d466371f77188fd65e566a5ed916bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6489e717d4d466371f77188fd65e566a5ed916bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bc9e4ee874ea3618780413b79b51412dcc40363", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bc9e4ee874ea3618780413b79b51412dcc40363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bc9e4ee874ea3618780413b79b51412dcc40363", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bc9e4ee874ea3618780413b79b51412dcc40363/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d86af242bc4a8e68aebf1f3b8c985f2d17fa791", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d86af242bc4a8e68aebf1f3b8c985f2d17fa791", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d86af242bc4a8e68aebf1f3b8c985f2d17fa791"}], "stats": {"total": 209, "additions": 115, "deletions": 94}, "files": [{"sha": "aaf3f22109b306deaca247b4f13afd4ee48c84e8", "filename": "gcc/analyzer/bounds-checking.cc", "status": "modified", "additions": 110, "deletions": 75, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc9e4ee874ea3618780413b79b51412dcc40363/gcc%2Fanalyzer%2Fbounds-checking.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc9e4ee874ea3618780413b79b51412dcc40363/gcc%2Fanalyzer%2Fbounds-checking.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fbounds-checking.cc?ref=8bc9e4ee874ea3618780413b79b51412dcc40363", "patch": "@@ -37,27 +37,21 @@ along with GCC; see the file COPYING3.  If not see\n \n namespace ana {\n \n-/* Abstract base class for all out-of-bounds warnings with concrete values.  */\n+/* Abstract base class for all out-of-bounds warnings.  */\n \n-class out_of_bounds : public pending_diagnostic_subclass<out_of_bounds>\n+class out_of_bounds : public pending_diagnostic\n {\n public:\n-  out_of_bounds (const region *reg, tree diag_arg,\n-\t\t byte_range out_of_bounds_range)\n-  : m_reg (reg), m_diag_arg (diag_arg),\n-    m_out_of_bounds_range (out_of_bounds_range)\n+  out_of_bounds (const region *reg, tree diag_arg)\n+  : m_reg (reg), m_diag_arg (diag_arg)\n   {}\n \n-  const char *get_kind () const final override\n-  {\n-    return \"out_of_bounds_diagnostic\";\n-  }\n-\n-  bool operator== (const out_of_bounds &other) const\n+  bool subclass_equal_p (const pending_diagnostic &base_other) const override\n   {\n-    return m_reg == other.m_reg\n-\t   && m_out_of_bounds_range == other.m_out_of_bounds_range\n-\t   && pending_diagnostic::same_tree_p (m_diag_arg, other.m_diag_arg);\n+    const out_of_bounds &other\n+      (static_cast <const out_of_bounds &>(base_other));\n+    return (m_reg == other.m_reg\n+\t    && pending_diagnostic::same_tree_p (m_diag_arg, other.m_diag_arg));\n   }\n \n   int get_controlling_option () const final override\n@@ -106,25 +100,51 @@ class out_of_bounds : public pending_diagnostic_subclass<out_of_bounds>\n \n   const region *m_reg;\n   tree m_diag_arg;\n+};\n+\n+/* Abstract base class for all out-of-bounds warnings where the\n+   out-of-bounds range is concrete.  */\n+\n+class concrete_out_of_bounds : public out_of_bounds\n+{\n+public:\n+  concrete_out_of_bounds (const region *reg, tree diag_arg,\n+\t\t\t  byte_range out_of_bounds_range)\n+  : out_of_bounds (reg, diag_arg),\n+    m_out_of_bounds_range (out_of_bounds_range)\n+  {}\n+\n+  bool subclass_equal_p (const pending_diagnostic &base_other) const override\n+  {\n+    const concrete_out_of_bounds &other\n+      (static_cast <const concrete_out_of_bounds &>(base_other));\n+    return (out_of_bounds::subclass_equal_p (other)\n+\t    && m_out_of_bounds_range == other.m_out_of_bounds_range);\n+  }\n+\n+protected:\n   byte_range m_out_of_bounds_range;\n };\n \n-/* Abstract subclass to complaing about out-of-bounds\n+/* Abstract subclass to complaing about concrete out-of-bounds\n    past the end of the buffer.  */\n \n-class past_the_end : public out_of_bounds\n+class concrete_past_the_end : public concrete_out_of_bounds\n {\n public:\n-  past_the_end (const region *reg, tree diag_arg, byte_range range,\n-\t\ttree byte_bound)\n-  : out_of_bounds (reg, diag_arg, range), m_byte_bound (byte_bound)\n+  concrete_past_the_end (const region *reg, tree diag_arg, byte_range range,\n+\t\t\t tree byte_bound)\n+  : concrete_out_of_bounds (reg, diag_arg, range), m_byte_bound (byte_bound)\n   {}\n \n-  bool operator== (const past_the_end &other) const\n+  bool\n+  subclass_equal_p (const pending_diagnostic &base_other) const final override\n   {\n-    return out_of_bounds::operator== (other)\n-\t   && pending_diagnostic::same_tree_p (m_byte_bound,\n-\t\t\t\t\t       other.m_byte_bound);\n+    const concrete_past_the_end &other\n+      (static_cast <const concrete_past_the_end &>(base_other));\n+    return (concrete_out_of_bounds::subclass_equal_p (other)\n+\t    && pending_diagnostic::same_tree_p (m_byte_bound,\n+\t\t\t\t\t\tother.m_byte_bound));\n   }\n \n   label_text\n@@ -143,14 +163,19 @@ class past_the_end : public out_of_bounds\n \n /* Concrete subclass to complain about buffer overflows.  */\n \n-class buffer_overflow : public past_the_end\n+class concrete_buffer_overflow : public concrete_past_the_end\n {\n public:\n-  buffer_overflow (const region *reg, tree diag_arg,\n+  concrete_buffer_overflow (const region *reg, tree diag_arg,\n \t\t   byte_range range, tree byte_bound)\n-  : past_the_end (reg, diag_arg, range, byte_bound)\n+  : concrete_past_the_end (reg, diag_arg, range, byte_bound)\n   {}\n \n+  const char *get_kind () const final override\n+  {\n+    return \"concrete_buffer_overflow\";\n+  }\n+\n   bool emit (rich_location *rich_loc) final override\n   {\n     diagnostic_metadata m;\n@@ -241,14 +266,19 @@ class buffer_overflow : public past_the_end\n \n /* Concrete subclass to complain about buffer over-reads.  */\n \n-class buffer_over_read : public past_the_end\n+class concrete_buffer_over_read : public concrete_past_the_end\n {\n public:\n-  buffer_over_read (const region *reg, tree diag_arg,\n-\t\t    byte_range range, tree byte_bound)\n-  : past_the_end (reg, diag_arg, range, byte_bound)\n+  concrete_buffer_over_read (const region *reg, tree diag_arg,\n+\t\t\t     byte_range range, tree byte_bound)\n+  : concrete_past_the_end (reg, diag_arg, range, byte_bound)\n   {}\n \n+  const char *get_kind () const final override\n+  {\n+    return \"concrete_buffer_over_read\";\n+  }\n+\n   bool emit (rich_location *rich_loc) final override\n   {\n     diagnostic_metadata m;\n@@ -337,13 +367,19 @@ class buffer_over_read : public past_the_end\n \n /* Concrete subclass to complain about buffer underwrites.  */\n \n-class buffer_underwrite : public out_of_bounds\n+class concrete_buffer_underwrite : public concrete_out_of_bounds\n {\n public:\n-  buffer_underwrite (const region *reg, tree diag_arg, byte_range range)\n-  : out_of_bounds (reg, diag_arg, range)\n+  concrete_buffer_underwrite (const region *reg, tree diag_arg,\n+\t\t\t      byte_range range)\n+  : concrete_out_of_bounds (reg, diag_arg, range)\n   {}\n \n+  const char *get_kind () const final override\n+  {\n+    return \"concrete_buffer_underwrite\";\n+  }\n+\n   bool emit (rich_location *rich_loc) final override\n   {\n     diagnostic_metadata m;\n@@ -403,13 +439,19 @@ class buffer_underwrite : public out_of_bounds\n \n /* Concrete subclass to complain about buffer under-reads.  */\n \n-class buffer_under_read : public out_of_bounds\n+class concrete_buffer_under_read : public concrete_out_of_bounds\n {\n public:\n-  buffer_under_read (const region *reg, tree diag_arg, byte_range range)\n-  : out_of_bounds (reg, diag_arg, range)\n+  concrete_buffer_under_read (const region *reg, tree diag_arg,\n+\t\t\t      byte_range range)\n+  : concrete_out_of_bounds (reg, diag_arg, range)\n   {}\n \n+  const char *get_kind () const final override\n+  {\n+    return \"concrete_buffer_under_read\";\n+  }\n+\n   bool emit (rich_location *rich_loc) final override\n   {\n     diagnostic_metadata m;\n@@ -470,38 +512,26 @@ class buffer_under_read : public out_of_bounds\n /* Abstract class to complain about out-of-bounds read/writes where\n    the values are symbolic.  */\n \n-class symbolic_past_the_end\n-  : public pending_diagnostic_subclass<symbolic_past_the_end>\n+class symbolic_past_the_end : public out_of_bounds\n {\n public:\n   symbolic_past_the_end (const region *reg, tree diag_arg, tree offset,\n \t\t\t tree num_bytes, tree capacity)\n-  : m_reg (reg), m_diag_arg (diag_arg), m_offset (offset),\n-    m_num_bytes (num_bytes), m_capacity (capacity)\n+  : out_of_bounds (reg, diag_arg),\n+    m_offset (offset),\n+    m_num_bytes (num_bytes),\n+    m_capacity (capacity)\n   {}\n \n-  const char *get_kind () const final override\n-  {\n-    return \"symbolic_past_the_end\";\n-  }\n-\n-  bool operator== (const symbolic_past_the_end &other) const\n-  {\n-    return m_reg == other.m_reg\n-\t   && pending_diagnostic::same_tree_p (m_diag_arg, other.m_diag_arg)\n-\t   && pending_diagnostic::same_tree_p (m_offset, other.m_offset)\n-\t   && pending_diagnostic::same_tree_p (m_num_bytes, other.m_num_bytes)\n-\t   && pending_diagnostic::same_tree_p (m_capacity, other.m_capacity);\n-  }\n-\n-  int get_controlling_option () const final override\n-  {\n-    return OPT_Wanalyzer_out_of_bounds;\n-  }\n-\n-  void mark_interesting_stuff (interesting_t *interest) final override\n+  bool\n+  subclass_equal_p (const pending_diagnostic &base_other) const final override\n   {\n-    interest->add_region_creation (m_reg);\n+    const symbolic_past_the_end &other\n+      (static_cast <const symbolic_past_the_end &>(base_other));\n+    return (out_of_bounds::subclass_equal_p (other)\n+\t    && pending_diagnostic::same_tree_p (m_offset, other.m_offset)\n+\t    && pending_diagnostic::same_tree_p (m_num_bytes, other.m_num_bytes)\n+\t    && pending_diagnostic::same_tree_p (m_capacity, other.m_capacity));\n   }\n \n   label_text\n@@ -566,13 +596,6 @@ class symbolic_past_the_end\n   }\n \n protected:\n-  enum memory_space get_memory_space () const\n-  {\n-    return m_reg->get_memory_space ();\n-  }\n-\n-  const region *m_reg;\n-  tree m_diag_arg;\n   tree m_offset;\n   tree m_num_bytes;\n   tree m_capacity;\n@@ -591,6 +614,11 @@ class symbolic_buffer_overflow : public symbolic_past_the_end\n     m_dir_str = \"write\";\n   }\n \n+  const char *get_kind () const final override\n+  {\n+    return \"symbolic_buffer_overflow\";\n+  }\n+\n   bool emit (rich_location *rich_loc) final override\n   {\n     diagnostic_metadata m;\n@@ -624,6 +652,11 @@ class symbolic_buffer_over_read : public symbolic_past_the_end\n     m_dir_str = \"read\";\n   }\n \n+  const char *get_kind () const final override\n+  {\n+    return \"symbolic_buffer_over_read\";\n+  }\n+\n   bool emit (rich_location *rich_loc) final override\n   {\n     diagnostic_metadata m;\n@@ -776,10 +809,12 @@ region_model::check_region_bounds (const region *reg,\n \t  gcc_unreachable ();\n \t  break;\n \tcase DIR_READ:\n-\t  ctxt->warn (make_unique<buffer_under_read> (reg, diag_arg, out));\n+\t  ctxt->warn (make_unique<concrete_buffer_under_read> (reg, diag_arg,\n+\t\t\t\t\t\t\t       out));\n \t  break;\n \tcase DIR_WRITE:\n-\t  ctxt->warn (make_unique<buffer_underwrite> (reg, diag_arg, out));\n+\t  ctxt->warn (make_unique<concrete_buffer_underwrite> (reg, diag_arg,\n+\t\t\t\t\t\t\t       out));\n \t  break;\n \t}\n     }\n@@ -804,12 +839,12 @@ region_model::check_region_bounds (const region *reg,\n \t  gcc_unreachable ();\n \t  break;\n \tcase DIR_READ:\n-\t  ctxt->warn (make_unique<buffer_over_read> (reg, diag_arg,\n-\t\t\t\t\t\t     out, byte_bound));\n+\t  ctxt->warn (make_unique<concrete_buffer_over_read> (reg, diag_arg,\n+\t\t\t\t\t\t\t      out, byte_bound));\n \t  break;\n \tcase DIR_WRITE:\n-\t  ctxt->warn (make_unique<buffer_overflow> (reg, diag_arg,\n-\t\t\t\t\t\t    out, byte_bound));\n+\t  ctxt->warn (make_unique<concrete_buffer_overflow> (reg, diag_arg,\n+\t\t\t\t\t\t\t     out, byte_bound));\n \t  break;\n \t}\n     }"}, {"sha": "991b592b82833adfb738ce2a5bf449bcd6d79054", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bc9e4ee874ea3618780413b79b51412dcc40363/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bc9e4ee874ea3618780413b79b51412dcc40363/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=8bc9e4ee874ea3618780413b79b51412dcc40363", "patch": "@@ -310,21 +310,17 @@ class impl_sm_context : public sm_context\n   }\n \n \n-  void set_next_state (const gimple *stmt,\n+  void set_next_state (const gimple *,\n \t\t       tree var,\n \t\t       state_machine::state_t to,\n \t\t       tree origin) final override\n   {\n     logger * const logger = get_logger ();\n     LOG_FUNC (logger);\n-    impl_region_model_context new_ctxt (m_eg, m_enode_for_diag,\n-\t\t\t\t\tm_old_state, m_new_state,\n-\t\t\t\t\tNULL, NULL,\n-\t\t\t\t\tstmt);\n     const svalue *var_new_sval\n-      = m_new_state->m_region_model->get_rvalue (var, &new_ctxt);\n+      = m_new_state->m_region_model->get_rvalue (var, NULL);\n     const svalue *origin_new_sval\n-      = m_new_state->m_region_model->get_rvalue (origin, &new_ctxt);\n+      = m_new_state->m_region_model->get_rvalue (origin, NULL);\n \n     /* We use the new sval here to avoid issues with uninitialized values.  */\n     state_machine::state_t current\n@@ -350,12 +346,8 @@ class impl_sm_context : public sm_context\n       (m_eg, m_enode_for_diag, NULL, NULL, NULL/*m_enode->get_state ()*/,\n        NULL, stmt);\n \n-    impl_region_model_context new_ctxt (m_eg, m_enode_for_diag,\n-\t\t\t\t\tm_old_state, m_new_state,\n-\t\t\t\t\tNULL, NULL,\n-\t\t\t\t\tstmt);\n     const svalue *origin_new_sval\n-      = m_new_state->m_region_model->get_rvalue (origin, &new_ctxt);\n+      = m_new_state->m_region_model->get_rvalue (origin, NULL);\n \n     state_machine::state_t current\n       = m_old_smap->get_state (sval, m_eg.get_ext_state ());\n@@ -380,11 +372,8 @@ class impl_sm_context : public sm_context\n   {\n     LOG_FUNC (get_logger ());\n     gcc_assert (d);\n-    impl_region_model_context old_ctxt\n-      (m_eg, m_enode_for_diag, m_old_state, m_new_state, NULL, NULL, NULL);\n-\n     const svalue *var_old_sval\n-      = m_old_state->m_region_model->get_rvalue (var, &old_ctxt);\n+      = m_old_state->m_region_model->get_rvalue (var, NULL);\n     state_machine::state_t current\n       = (var\n \t ? m_old_smap->get_state (var_old_sval, m_eg.get_ext_state ())\n@@ -400,9 +389,6 @@ class impl_sm_context : public sm_context\n   {\n     LOG_FUNC (get_logger ());\n     gcc_assert (d);\n-    impl_region_model_context old_ctxt\n-      (m_eg, m_enode_for_diag, m_old_state, m_new_state, NULL, NULL, NULL);\n-\n     state_machine::state_t current\n       = (sval\n \t ? m_old_smap->get_state (sval, m_eg.get_ext_state ())"}]}