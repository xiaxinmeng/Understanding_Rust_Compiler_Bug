{"sha": "828ca2ed0bd81c6aeb6ec8e45e8f30c0441a382c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI4Y2EyZWQwYmQ4MWM2YWViNmVjOGU0NWU4ZjMwYzA0NDFhMzgyYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-02-07T16:02:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-02-07T16:02:50Z"}, "message": "PR c++/84182 - ICE with captured lambda\n\n\tPR c++/84181\n\t* pt.c (extract_locals_r, extract_local_specs): New.\n\t(tsubst_pack_expansion): Use them.\n\nFrom-SVN: r257454", "tree": {"sha": "ffa7c3822369d274b77b3f3db82e1cad297a0e6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffa7c3822369d274b77b3f3db82e1cad297a0e6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/828ca2ed0bd81c6aeb6ec8e45e8f30c0441a382c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828ca2ed0bd81c6aeb6ec8e45e8f30c0441a382c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/828ca2ed0bd81c6aeb6ec8e45e8f30c0441a382c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828ca2ed0bd81c6aeb6ec8e45e8f30c0441a382c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b210f45f527eb017810af815bbb97a8f6939385f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b210f45f527eb017810af815bbb97a8f6939385f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b210f45f527eb017810af815bbb97a8f6939385f"}], "stats": {"total": 102, "additions": 77, "deletions": 25}, "files": [{"sha": "ce0b759ab74423a4c558a5c76289bbd45681f524", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828ca2ed0bd81c6aeb6ec8e45e8f30c0441a382c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828ca2ed0bd81c6aeb6ec8e45e8f30c0441a382c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=828ca2ed0bd81c6aeb6ec8e45e8f30c0441a382c", "patch": "@@ -1,3 +1,10 @@\n+2018-02-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/84182 - ICE with captured lambda\n+\tPR c++/84181\n+\t* pt.c (extract_locals_r, extract_local_specs): New.\n+\t(tsubst_pack_expansion): Use them.\n+\n 2018-02-07  Martin Liska  <mliska@suse.cz>\n \n \tPR c++/84059."}, {"sha": "0d9e153b5ee7723575a1311f5cb4501382bfabb5", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 39, "deletions": 25, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828ca2ed0bd81c6aeb6ec8e45e8f30c0441a382c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828ca2ed0bd81c6aeb6ec8e45e8f30c0441a382c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=828ca2ed0bd81c6aeb6ec8e45e8f30c0441a382c", "patch": "@@ -11415,6 +11415,34 @@ tsubst_binary_right_fold (tree t, tree args, tsubst_flags_t complain,\n   return expand_right_fold (t, vec, complain);\n }\n \n+/* Walk through the pattern of a pack expansion, adding everything in\n+   local_specializations to a list.  */\n+\n+static tree\n+extract_locals_r (tree *tp, int */*walk_subtrees*/, void *data)\n+{\n+  tree *extra = reinterpret_cast<tree*>(data);\n+  if (tree spec = retrieve_local_specialization (*tp))\n+    {\n+      if (TREE_CODE (spec) == NONTYPE_ARGUMENT_PACK)\n+\t{\n+\t  /* Pull out the actual PARM_DECL for the partial instantiation.  */\n+\t  tree args = ARGUMENT_PACK_ARGS (spec);\n+\t  gcc_assert (TREE_VEC_LENGTH (args) == 1);\n+\t  tree arg = TREE_VEC_ELT (args, 0);\n+\t  spec = PACK_EXPANSION_PATTERN (arg);\n+\t}\n+      *extra = tree_cons (*tp, spec, *extra);\n+    }\n+  return NULL_TREE;\n+}\n+static tree\n+extract_local_specs (tree pattern)\n+{\n+  tree extra = NULL_TREE;\n+  cp_walk_tree_without_duplicates (&pattern, extract_locals_r, &extra);\n+  return extra;\n+}\n \n /* Substitute ARGS into T, which is an pack expansion\n    (i.e. TYPE_PACK_EXPANSION or EXPR_PACK_EXPANSION). Returns a\n@@ -11442,14 +11470,17 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n   tree extra = PACK_EXPANSION_EXTRA_ARGS (t);\n   if (extra && TREE_CODE (extra) == TREE_LIST)\n     {\n-      /* The partial instantiation involved function parameter packs; map\n-         from the general template to our current context.  */\n-      for (tree fns = TREE_CHAIN (extra); fns; fns = TREE_CHAIN (fns))\n+      for (tree elt = TREE_CHAIN (extra); elt; elt = TREE_CHAIN (elt))\n \t{\n-\t  tree fn = TREE_PURPOSE (fns);\n-\t  tree inst = enclosing_instantiation_of (fn);\n-\t  register_parameter_specializations (fn, inst);\n+\t  /* The partial instantiation involved local declarations collected in\n+\t     extract_local_specs; map from the general template to our local\n+\t     context.  */\n+\t  tree gen = TREE_PURPOSE (elt);\n+\t  tree partial = TREE_VALUE (elt);\n+\t  tree inst = retrieve_local_specialization (partial);\n+\t  register_local_specialization (inst, gen);\n \t}\n+      gcc_assert (!TREE_PURPOSE (extra));\n       extra = TREE_VALUE (extra);\n     }\n   args = add_to_template_args (extra, args);\n@@ -11625,25 +11656,8 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n       t = make_pack_expansion (pattern, complain);\n       tree extra = args;\n       if (unsubstituted_fn_pack)\n-\t{\n-\t  /* For function parameter packs it's more complicated; we need to\n-\t     remember which enclosing function(s) provided them to this pack\n-\t     expansion so we can map their parameters to the parameters of a\n-\t     later full instantiation.  */\n-\t  tree fns = NULL_TREE;\n-\t  for (tree p = packs; p; p = TREE_CHAIN (p))\n-\t    {\n-\t      tree parm = TREE_PURPOSE (p);\n-\t      if (TREE_CODE (parm) != PARM_DECL)\n-\t\tcontinue;\n-\t      parm = DECL_CONTEXT (parm);\n-\t      if (purpose_member (parm, fns))\n-\t\tcontinue;\n-\t      fns = tree_cons (parm, NULL_TREE, fns);\n-\t    }\n-\t  if (fns)\n-\t    extra = tree_cons (NULL_TREE, extra, fns);\n-\t}\n+\tif (tree locals = extract_local_specs (pattern))\n+\t  extra = tree_cons (NULL_TREE, extra, locals);\n       PACK_EXPANSION_EXTRA_ARGS (t) = extra;\n       return t;\n     }"}, {"sha": "b4d63da5758f5731c749c7484372c5f0acb4c291", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-targ2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828ca2ed0bd81c6aeb6ec8e45e8f30c0441a382c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-targ2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828ca2ed0bd81c6aeb6ec8e45e8f30c0441a382c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-targ2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-targ2.C?ref=828ca2ed0bd81c6aeb6ec8e45e8f30c0441a382c", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/84181\n+// { dg-do compile { target c++14 } }\n+\n+template < int ... I >\n+struct A{};\n+\n+template < typename T >\n+auto var = [](auto ... i){\n+        return A< decltype(i)::x ... >{};\n+    };\n+\n+int main(){\n+    var< int >();\n+}"}, {"sha": "ab790cf8c9c8de59ffaffb1258b8868e5311f4b1", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-variadic10.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828ca2ed0bd81c6aeb6ec8e45e8f30c0441a382c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828ca2ed0bd81c6aeb6ec8e45e8f30c0441a382c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic10.C?ref=828ca2ed0bd81c6aeb6ec8e45e8f30c0441a382c", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/84182\n+// { dg-do compile { target c++14 } }\n+\n+template < typename ... T > void sink(T ...){}\n+\n+template < typename >\n+void f(){\n+    auto const lambda = [](int){ return 1; };\n+\n+    [lambda](auto ... i){\n+        sink(lambda(i) ...);\n+    }(1);\n+}\n+\n+int main(){\n+    f< int >();\n+}"}]}