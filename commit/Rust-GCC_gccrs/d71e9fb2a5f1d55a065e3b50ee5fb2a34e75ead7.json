{"sha": "d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcxZTlmYjJhNWYxZDU1YTA2NWUzYjUwZWU1ZmIyYTM0ZTc1ZWFkNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-08-13T08:06:39Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-13T08:06:39Z"}, "message": "[Ada] Fix spurious error on nested instantiation with inlining\n\nThis prevents the compiler from issuing a spurious error in a convoluted\ncase where a child generic package declared in an enclosing parent\ngeneric package, which contains a second child generic package, contains\nan inlined subprogram and the second child generic package contains an\ninstantiation of the first, and the enclosing parent generic package is\ninstantiated with inlining across units enabled (-gnatn[12]).\n\nThe problem is that the compiler attempts to instantiate the body of the\nfirst child generic package in the context of the enclosing parent\ngeneric package, instead of doing it in the context of the instantiation\nof the parent generic package, because of the presence of the inlined\nsubprogram.\n\n2019-08-13  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch6.adb (Expand_Call_Helper): If back-end inlining is\n\tenabled, also instantiate the body of a generic unit containing\n\ta subprogram subject to aspect/pragma Inline_Always at\n\toptimization level zero.\n\t* sem_ch12.adb (Might_Inline_Subp): Minor tweak.\n\t(Analyze_Package_Instantiation): Do not instantiate the package\n\tbody because of inlining considerations if the instantiation is\n\tdone in a generic unit.  Move around similar condition involving\n\tthe main unit.  Add test on Back_End_Inlining to processing for\n\tfront-end inlining.\n\ngcc/testsuite/\n\n\t* gnat.dg/generic_inst8.adb, gnat.dg/generic_inst8.ads,\n\tgnat.dg/generic_inst8_g.adb, gnat.dg/generic_inst8_g.ads: New\n\ttestcase.\n\nFrom-SVN: r274336", "tree": {"sha": "fbd2a073166c4fd599360c1c5d693860f419b9e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbd2a073166c4fd599360c1c5d693860f419b9e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7/comments", "author": null, "committer": null, "parents": [{"sha": "7225a4797180b6dc515760b0c123001cda2b66a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7225a4797180b6dc515760b0c123001cda2b66a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7225a4797180b6dc515760b0c123001cda2b66a2"}], "stats": {"total": 105, "additions": 84, "deletions": 21}, "files": [{"sha": "2b0f272e44d1c849eb3fccf3d719e86588bf1612", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7", "patch": "@@ -1,3 +1,16 @@\n+2019-08-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Call_Helper): If back-end inlining is\n+\tenabled, also instantiate the body of a generic unit containing\n+\ta subprogram subject to aspect/pragma Inline_Always at\n+\toptimization level zero.\n+\t* sem_ch12.adb (Might_Inline_Subp): Minor tweak.\n+\t(Analyze_Package_Instantiation): Do not instantiate the package\n+\tbody because of inlining considerations if the instantiation is\n+\tdone in a generic unit.  Move around similar condition involving\n+\tthe main unit.  Add test on Back_End_Inlining to processing for\n+\tfront-end inlining.\n+\n 2019-08-13  Javier Miranda  <miranda@adacore.com>\n \n \t* exp_disp.adb (Make_Secondary_DT): Handle record type"}, {"sha": "4fd38605e63e589bcfe83deb17781243a7be063f", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7", "patch": "@@ -4431,14 +4431,15 @@ package body Exp_Ch6 is\n          then\n             Add_Inlined_Body (Subp, Call_Node);\n \n-            --  If the inlined call appears within an instantiation and some\n-            --  level of optimization is required, ensure that the enclosing\n-            --  instance body is available so that the back-end can actually\n-            --  perform the inlining.\n+            --  If the inlined call appears within an instantiation and either\n+            --  is required to be inlined or optimization is enabled, ensure\n+            --  that the enclosing instance body is available so the back end\n+            --  can actually perform the inlining.\n \n             if In_Instance\n               and then Comes_From_Source (Subp)\n-              and then Optimization_Level > 0\n+              and then (Has_Pragma_Inline_Always (Subp)\n+                         or else Optimization_Level > 0)\n             then\n                declare\n                   Decl      : Node_Id;"}, {"sha": "8b031b529ae68b747d982e215574a6fe8edda093", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7", "patch": "@@ -3895,10 +3895,7 @@ package body Sem_Ch12 is\n          E : Entity_Id;\n \n       begin\n-         if not Inline_Processing_Required then\n-            return False;\n-\n-         else\n+         if Inline_Processing_Required then\n             E := First_Entity (Gen_Unit);\n             while Present (E) loop\n                if Is_Subprogram (E) and then Is_Inlined (E) then\n@@ -4281,12 +4278,13 @@ package body Sem_Ch12 is\n             end if;\n          end if;\n \n-         --  Save the instantiation node, for subsequent instantiation of the\n-         --  body, if there is one and we are generating code for the current\n-         --  unit. Mark unit as having a body (avoids premature error message).\n+         --  Save the instantiation node for a subsequent instantiation of the\n+         --  body if there is one and the main unit is not generic, and either\n+         --  we are generating code for this main unit, or the instantiation\n+         --  contains inlined subprograms and is not done in a generic unit.\n \n-         --  We instantiate the body if we are generating code, if we are\n-         --  generating cross-reference information, or if we are building\n+         --  We instantiate the body only if we are generating code, or if we\n+         --  are generating cross-reference information, or if we are building\n          --  trees for ASIS use or GNATprove use.\n \n          declare\n@@ -4379,24 +4377,25 @@ package body Sem_Ch12 is\n               (Unit_Requires_Body (Gen_Unit)\n                 or else Enclosing_Body_Present\n                 or else Present (Corresponding_Body (Gen_Decl)))\n+               and then not Is_Generic_Unit (Cunit_Entity (Main_Unit))\n                and then (Is_In_Main_Unit (N)\n-                          or else Might_Inline_Subp (Gen_Unit))\n+                          or else (Might_Inline_Subp (Gen_Unit)\n+                                    and then\n+                                   not Is_Generic_Unit\n+                                         (Cunit_Entity (Get_Code_Unit (N)))))\n                and then not Is_Actual_Pack\n                and then not Inline_Now\n                and then (Operating_Mode = Generate_Code\n-\n-                          --  Need comment for this check ???\n-\n                           or else (Operating_Mode = Check_Semantics\n                                     and then (ASIS_Mode or GNATprove_Mode)));\n \n             --  If front-end inlining is enabled or there are any subprograms\n             --  marked with Inline_Always, do not instantiate body when within\n             --  a generic context.\n \n-            if ((Front_End_Inlining or else Has_Inline_Always)\n-                  and then not Expander_Active)\n-              or else Is_Generic_Unit (Cunit_Entity (Main_Unit))\n+            if not Back_End_Inlining\n+              and then (Front_End_Inlining or else Has_Inline_Always)\n+              and then not Expander_Active\n             then\n                Needs_Body := False;\n             end if;"}, {"sha": "206d39d1c72316c4f68ef6227988ee5ac173c49e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7", "patch": "@@ -1,3 +1,9 @@\n+2019-08-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/generic_inst8.adb, gnat.dg/generic_inst8.ads,\n+\tgnat.dg/generic_inst8_g.adb, gnat.dg/generic_inst8_g.ads: New\n+\ttestcase.\n+\n 2019-08-13  Javier Miranda  <miranda@adacore.com>\n \n \t* gnat.dg/tag2.adb, gnat.dg/tag2_pkg.ads: New testcase."}, {"sha": "5536f0b67ece47691eaee08dd520492f8cc7b07f", "filename": "gcc/testsuite/gnat.dg/generic_inst8.adb", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst8.adb?ref=d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7", "patch": "@@ -0,0 +1,8 @@\n+--  { dg-do compile }\n+--  { dg-options \"-gnatn\" }\n+\n+package body Generic_Inst8 is\n+\n+   package My_G is new Generic_Inst8_G (0);\n+\n+end Generic_Inst8;"}, {"sha": "d6491e352e5ea9e3eed08465435cf4acf1dd7284", "filename": "gcc/testsuite/gnat.dg/generic_inst8.ads", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst8.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst8.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst8.ads?ref=d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7", "patch": "@@ -0,0 +1,7 @@\n+with Generic_Inst8_G;\n+\n+package Generic_Inst8 is\n+\n+   pragma Elaborate_Body;\n+\n+end Generic_Inst8;"}, {"sha": "dab7b6256b6a1676054de572111697c53610d5ca", "filename": "gcc/testsuite/gnat.dg/generic_inst8_g.adb", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst8_g.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst8_g.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst8_g.adb?ref=d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7", "patch": "@@ -0,0 +1,12 @@\n+package body Generic_Inst8_G is\n+\n+   package body First is\n+\n+      function Get (Data : T) return T is\n+      begin\n+         return Data;\n+      end;\n+\n+   end First;\n+\n+end Generic_Inst8_G;"}, {"sha": "087a9e66d2056c22de4f97a0e93fa040bab82399", "filename": "gcc/testsuite/gnat.dg/generic_inst8_g.ads", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst8_g.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst8_g.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fgeneric_inst8_g.ads?ref=d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7", "patch": "@@ -0,0 +1,17 @@\n+generic\n+   N : Natural;\n+package Generic_Inst8_G is\n+\n+   generic\n+      type T is private;\n+   package First is\n+      function Get (Data : T) return T with Inline;\n+   end First;\n+\n+   generic\n+      type T is private;\n+   package Second is\n+      package My_First is new First (T);\n+   end Second;\n+\n+end Generic_Inst8_G;"}]}