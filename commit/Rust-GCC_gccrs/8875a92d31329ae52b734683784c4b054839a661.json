{"sha": "8875a92d31329ae52b734683784c4b054839a661", "node_id": "C_kwDOANBUbNoAKDg4NzVhOTJkMzEzMjlhZTUyYjczNDY4Mzc4NGM0YjA1NDgzOWE2NjE", "commit": {"author": {"name": "Bernhard Reutner-Fischer", "email": "aldot@gcc.gnu.org", "date": "2018-10-12T21:57:21Z"}, "committer": {"name": "Bernhard Reutner-Fischer", "email": "rep.dot.nop@gmail.com", "date": "2021-11-09T20:56:49Z"}, "message": "Fortran: Fix memory leak in finalization wrappers [PR68800]\n\nIf a finalization is not required we created a namespace containing\nformal arguments for an internal interface definition but never used\nany of these. So the whole sub_ns namespace was not wired up to the\nprogram and consequently was never freed. The fix is to simply not\ngenerate any finalization wrappers if we know that it will be unused.\nNote that this reverts back to the original r190869\n(8a96d64282ac534cb597f446f02ac5d0b13249cc) handling for this case\nby reverting this specific part of r194075\n(f1ee56b4be7cc3892e6ccc75d73033c129098e87) for PR fortran/37336.\n\nvalgrind summary for e.g.\ngfortran.dg/abstract_type_3.f03 and gfortran.dg/abstract_type_4.f03\nwhere \".orig\" is pristine trunk and \".mine\" contains this fix:\n\nat3.orig.vg:LEAK SUMMARY:\nat3.orig.vg-   definitely lost: 8,460 bytes in 11 blocks\nat3.orig.vg-   indirectly lost: 13,288 bytes in 55 blocks\nat3.orig.vg-     possibly lost: 0 bytes in 0 blocks\nat3.orig.vg-   still reachable: 572,278 bytes in 2,142 blocks\nat3.orig.vg-        suppressed: 0 bytes in 0 blocks\nat3.orig.vg-\nat3.orig.vg-Use --track-origins=yes to see where uninitialised values come from\nat3.orig.vg-ERROR SUMMARY: 38 errors from 33 contexts (suppressed: 0 from 0)\n--\nat3.mine.vg:LEAK SUMMARY:\nat3.mine.vg-   definitely lost: 344 bytes in 1 blocks\nat3.mine.vg-   indirectly lost: 7,192 bytes in 18 blocks\nat3.mine.vg-     possibly lost: 0 bytes in 0 blocks\nat3.mine.vg-   still reachable: 572,278 bytes in 2,142 blocks\nat3.mine.vg-        suppressed: 0 bytes in 0 blocks\nat3.mine.vg-\nat3.mine.vg-ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)\nat3.mine.vg-ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)\nat4.orig.vg:LEAK SUMMARY:\nat4.orig.vg-   definitely lost: 13,751 bytes in 12 blocks\nat4.orig.vg-   indirectly lost: 11,976 bytes in 60 blocks\nat4.orig.vg-     possibly lost: 0 bytes in 0 blocks\nat4.orig.vg-   still reachable: 572,278 bytes in 2,142 blocks\nat4.orig.vg-        suppressed: 0 bytes in 0 blocks\nat4.orig.vg-\nat4.orig.vg-Use --track-origins=yes to see where uninitialised values come from\nat4.orig.vg-ERROR SUMMARY: 18 errors from 16 contexts (suppressed: 0 from 0)\n--\nat4.mine.vg:LEAK SUMMARY:\nat4.mine.vg-   definitely lost: 3,008 bytes in 3 blocks\nat4.mine.vg-   indirectly lost: 4,056 bytes in 11 blocks\nat4.mine.vg-     possibly lost: 0 bytes in 0 blocks\nat4.mine.vg-   still reachable: 572,278 bytes in 2,142 blocks\nat4.mine.vg-        suppressed: 0 bytes in 0 blocks\nat4.mine.vg-\nat4.mine.vg-ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)\nat4.mine.vg-ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)\n\ngcc/fortran/ChangeLog:\n\n2018-10-12  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n\n\tPR fortran/68800\n\t* class.c (generate_finalization_wrapper): Do not leak\n\tfinalization wrappers if they will not be used.\n\t* expr.c (gfc_free_actual_arglist): Formatting fix.\n\t* gfortran.h (gfc_free_symbol): Pass argument by reference.\n\t(gfc_release_symbol): Likewise.\n\t(gfc_free_namespace): Likewise.\n\t* symbol.c (gfc_release_symbol): Adjust acordingly.\n\t(free_components): Set procedure pointer components\n\tof derived types to NULL after freeing.\n\t(free_tb_tree): Likewise.\n\t(gfc_free_symbol): Set sym to NULL after freeing.\n\t(gfc_free_namespace): Set namespace to NULL after freeing.", "tree": {"sha": "ec000b53ed4c6a9208d92b98875b92bc7d949c9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec000b53ed4c6a9208d92b98875b92bc7d949c9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8875a92d31329ae52b734683784c4b054839a661", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8875a92d31329ae52b734683784c4b054839a661", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8875a92d31329ae52b734683784c4b054839a661", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8875a92d31329ae52b734683784c4b054839a661/comments", "author": null, "committer": {"login": "aldot", "id": 141020, "node_id": "MDQ6VXNlcjE0MTAyMA==", "avatar_url": "https://avatars.githubusercontent.com/u/141020?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldot", "html_url": "https://github.com/aldot", "followers_url": "https://api.github.com/users/aldot/followers", "following_url": "https://api.github.com/users/aldot/following{/other_user}", "gists_url": "https://api.github.com/users/aldot/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldot/subscriptions", "organizations_url": "https://api.github.com/users/aldot/orgs", "repos_url": "https://api.github.com/users/aldot/repos", "events_url": "https://api.github.com/users/aldot/events{/privacy}", "received_events_url": "https://api.github.com/users/aldot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4b4ce152a06578d94ae7630cffd655d590b2857", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4b4ce152a06578d94ae7630cffd655d590b2857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4b4ce152a06578d94ae7630cffd655d590b2857"}], "stats": {"total": 45, "additions": 20, "deletions": 25}, "files": [{"sha": "6b017667600f8df2a59cbf1cd8189c6ada8d806d", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8875a92d31329ae52b734683784c4b054839a661/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8875a92d31329ae52b734683784c4b054839a661/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=8875a92d31329ae52b734683784c4b054839a661", "patch": "@@ -1602,7 +1602,6 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n   gfc_code *last_code, *block;\n   char *name;\n   bool finalizable_comp = false;\n-  bool expr_null_wrapper = false;\n   gfc_expr *ancestor_wrapper = NULL, *rank;\n   gfc_iterator *iter;\n \n@@ -1636,7 +1635,11 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n       && !derived->attr.alloc_comp\n       && (!derived->f2k_derived || !derived->f2k_derived->finalizers)\n       && !has_finalizer_component (derived))\n-    expr_null_wrapper = true;\n+    {\n+      vtab_final->initializer = gfc_get_null_expr (NULL);\n+      gcc_assert (vtab_final->ts.interface == NULL);\n+      return;\n+    }\n   else\n     /* Check whether there are new allocatable components.  */\n     for (comp = derived->components; comp; comp = comp->next)\n@@ -1650,7 +1653,7 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n \n   /* If there is no new finalizer and no new allocatable, return with\n      an expr to the ancestor's one.  */\n-  if (!expr_null_wrapper && !finalizable_comp\n+  if (!finalizable_comp\n       && (!derived->f2k_derived || !derived->f2k_derived->finalizers))\n     {\n       gcc_assert (ancestor_wrapper && ancestor_wrapper->ref == NULL\n@@ -1674,8 +1677,7 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n   /* Set up the namespace.  */\n   sub_ns = gfc_get_namespace (ns, 0);\n   sub_ns->sibling = ns->contained;\n-  if (!expr_null_wrapper)\n-    ns->contained = sub_ns;\n+  ns->contained = sub_ns;\n   sub_ns->resolved = 1;\n \n   /* Set up the procedure symbol.  */\n@@ -1691,7 +1693,7 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n   final->ts.kind = 4;\n   final->attr.artificial = 1;\n   final->attr.always_explicit = 1;\n-  final->attr.if_source = expr_null_wrapper ? IFSRC_IFBODY : IFSRC_DECL;\n+  final->attr.if_source = IFSRC_DECL;\n   if (ns->proc_name->attr.flavor == FL_MODULE)\n     final->module = ns->proc_name->name;\n   gfc_set_sym_referenced (final);\n@@ -1741,15 +1743,6 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n   final->formal->next->next->sym = fini_coarray;\n   gfc_commit_symbol (fini_coarray);\n \n-  /* Return with a NULL() expression but with an interface which has\n-     the formal arguments.  */\n-  if (expr_null_wrapper)\n-    {\n-      vtab_final->initializer = gfc_get_null_expr (NULL);\n-      vtab_final->ts.interface = final;\n-      return;\n-    }\n-\n   /* Local variables.  */\n \n   gfc_get_symbol (\"idx\", sub_ns, &idx);"}, {"sha": "4084d18f136fc063a93510cd2c672fd9177add24", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8875a92d31329ae52b734683784c4b054839a661/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8875a92d31329ae52b734683784c4b054839a661/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=8875a92d31329ae52b734683784c4b054839a661", "patch": "@@ -543,7 +543,7 @@ gfc_free_actual_arglist (gfc_actual_arglist *a1)\n     {\n       a2 = a1->next;\n       if (a1->expr)\n-      gfc_free_expr (a1->expr);\n+\tgfc_free_expr (a1->expr);\n       free (a1);\n       a1 = a2;\n     }"}, {"sha": "9378b4b8a243b68fb67fb47fb0809da2bd7e159c", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8875a92d31329ae52b734683784c4b054839a661/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8875a92d31329ae52b734683784c4b054839a661/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=8875a92d31329ae52b734683784c4b054839a661", "patch": "@@ -3399,8 +3399,8 @@ void gfc_delete_symtree (gfc_symtree **, const char *);\n gfc_symtree *gfc_get_unique_symtree (gfc_namespace *);\n gfc_user_op *gfc_get_uop (const char *);\n gfc_user_op *gfc_find_uop (const char *, gfc_namespace *);\n-void gfc_free_symbol (gfc_symbol *);\n-void gfc_release_symbol (gfc_symbol *);\n+void gfc_free_symbol (gfc_symbol *&);\n+void gfc_release_symbol (gfc_symbol *&);\n gfc_symbol *gfc_new_symbol (const char *, gfc_namespace *);\n gfc_symtree* gfc_find_symtree_in_proc (const char *, gfc_namespace *);\n int gfc_find_symbol (const char *, gfc_namespace *, int, gfc_symbol **);\n@@ -3424,7 +3424,7 @@ void gfc_undo_symbols (void);\n void gfc_commit_symbols (void);\n void gfc_commit_symbol (gfc_symbol *);\n gfc_charlen *gfc_new_charlen (gfc_namespace *, gfc_charlen *);\n-void gfc_free_namespace (gfc_namespace *);\n+void gfc_free_namespace (gfc_namespace *&);\n \n void gfc_symbol_init_2 (void);\n void gfc_symbol_done_2 (void);"}, {"sha": "179f6029ca3869d221f0f5232487bc3c278bf205", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8875a92d31329ae52b734683784c4b054839a661/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8875a92d31329ae52b734683784c4b054839a661/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=8875a92d31329ae52b734683784c4b054839a661", "patch": "@@ -2610,7 +2610,7 @@ free_components (gfc_component *p)\n       if (p->param_list)\n \tgfc_free_actual_arglist (p->param_list);\n       free (p->tb);\n-\n+      p->tb = NULL;\n       free (p);\n     }\n }\n@@ -3067,7 +3067,7 @@ set_symbol_common_block (gfc_symbol *sym, gfc_common_head *common_block)\n /* Remove a gfc_symbol structure and everything it points to.  */\n \n void\n-gfc_free_symbol (gfc_symbol *sym)\n+gfc_free_symbol (gfc_symbol *&sym)\n {\n \n   if (sym == NULL)\n@@ -3097,13 +3097,14 @@ gfc_free_symbol (gfc_symbol *sym)\n     gfc_free_actual_arglist (sym->param_list);\n \n   free (sym);\n+  sym = NULL;\n }\n \n \n /* Decrease the reference counter and free memory when we reach zero.  */\n \n void\n-gfc_release_symbol (gfc_symbol *sym)\n+gfc_release_symbol (gfc_symbol *&sym)\n {\n   if (sym == NULL)\n     return;\n@@ -3830,9 +3831,9 @@ free_tb_tree (gfc_symtree *t)\n   free_tb_tree (t->left);\n   free_tb_tree (t->right);\n \n-  /* TODO: Free type-bound procedure structs themselves; probably needs some\n-     sort of ref-counting mechanism.  */\n+  /* TODO: Free type-bound procedure u.generic  */\n   free (t->n.tb);\n+  t->n.tb = NULL;\n   free (t);\n }\n \n@@ -4022,7 +4023,7 @@ free_entry_list (gfc_entry_list *el)\n    taken care of when a specific name is freed.  */\n \n void\n-gfc_free_namespace (gfc_namespace *ns)\n+gfc_free_namespace (gfc_namespace *&ns)\n {\n   gfc_namespace *p, *q;\n   int i;\n@@ -4073,6 +4074,7 @@ gfc_free_namespace (gfc_namespace *ns)\n \n   p = ns->contained;\n   free (ns);\n+  ns = NULL;\n \n   /* Recursively free any contained namespaces.  */\n   while (p != NULL)"}]}