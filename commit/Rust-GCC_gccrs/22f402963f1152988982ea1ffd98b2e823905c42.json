{"sha": "22f402963f1152988982ea1ffd98b2e823905c42", "node_id": "C_kwDOANBUbNoAKDIyZjQwMjk2M2YxMTUyOTg4OTgyZWExZmZkOThiMmU4MjM5MDVjNDI", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-22T09:40:39Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-24T06:38:27Z"}, "message": "Remove follow_assert_exprs from overflow_comparison.\n\ngcc/ChangeLog:\n\n\t* tree-vrp.cc (overflow_comparison_p_1): Remove follow_assert_exprs.\n\t(overflow_comparison_p): Remove use_equiv_p.\n\t* tree-vrp.h (overflow_comparison_p): Same.\n\t* vr-values.cc (vrp_evaluate_conditional_warnv_with_ops): Remove\n\tuse_equiv_p argument to overflow_comparison_p.", "tree": {"sha": "7e2671b552884c76184a99bae2724a0f70c60d9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e2671b552884c76184a99bae2724a0f70c60d9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22f402963f1152988982ea1ffd98b2e823905c42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22f402963f1152988982ea1ffd98b2e823905c42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22f402963f1152988982ea1ffd98b2e823905c42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22f402963f1152988982ea1ffd98b2e823905c42/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42639a36bf2983d4a5adb02f3ab7e8c4bd1023c7"}], "stats": {"total": 44, "additions": 6, "deletions": 38}, "files": [{"sha": "3846dc1d8494825f0e829b9946ddbac7b862a5d6", "filename": "gcc/tree-vrp.cc", "status": "modified", "additions": 4, "deletions": 36, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f402963f1152988982ea1ffd98b2e823905c42/gcc%2Ftree-vrp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f402963f1152988982ea1ffd98b2e823905c42/gcc%2Ftree-vrp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.cc?ref=22f402963f1152988982ea1ffd98b2e823905c42", "patch": "@@ -679,7 +679,7 @@ range_fold_unary_expr (value_range *vr,\n \n static bool\n overflow_comparison_p_1 (enum tree_code code, tree op0, tree op1,\n-\t\t\t bool follow_assert_exprs, bool reversed, tree *new_cst)\n+\t\t\t bool reversed, tree *new_cst)\n {\n   /* See if this is a relational operation between two SSA_NAMES with\n      unsigned, overflow wrapping values.  If so, check it more deeply.  */\n@@ -693,19 +693,6 @@ overflow_comparison_p_1 (enum tree_code code, tree op0, tree op1,\n     {\n       gimple *op1_def = SSA_NAME_DEF_STMT (op1);\n \n-      /* If requested, follow any ASSERT_EXPRs backwards for OP1.  */\n-      if (follow_assert_exprs)\n-\t{\n-\t  while (gimple_assign_single_p (op1_def)\n-\t\t && TREE_CODE (gimple_assign_rhs1 (op1_def)) == ASSERT_EXPR)\n-\t    {\n-\t      op1 = TREE_OPERAND (gimple_assign_rhs1 (op1_def), 0);\n-\t      if (TREE_CODE (op1) != SSA_NAME)\n-\t\tbreak;\n-\t      op1_def = SSA_NAME_DEF_STMT (op1);\n-\t    }\n-\t}\n-\n       /* Now look at the defining statement of OP1 to see if it adds\n \t or subtracts a nonzero constant from another operand.  */\n       if (op1_def\n@@ -716,24 +703,6 @@ overflow_comparison_p_1 (enum tree_code code, tree op0, tree op1,\n \t{\n \t  tree target = gimple_assign_rhs1 (op1_def);\n \n-\t  /* If requested, follow ASSERT_EXPRs backwards for op0 looking\n-\t     for one where TARGET appears on the RHS.  */\n-\t  if (follow_assert_exprs)\n-\t    {\n-\t      /* Now see if that \"other operand\" is op0, following the chain\n-\t\t of ASSERT_EXPRs if necessary.  */\n-\t      gimple *op0_def = SSA_NAME_DEF_STMT (op0);\n-\t      while (op0 != target\n-\t\t     && gimple_assign_single_p (op0_def)\n-\t\t     && TREE_CODE (gimple_assign_rhs1 (op0_def)) == ASSERT_EXPR)\n-\t\t{\n-\t\t  op0 = TREE_OPERAND (gimple_assign_rhs1 (op0_def), 0);\n-\t\t  if (TREE_CODE (op0) != SSA_NAME)\n-\t\t    break;\n-\t\t  op0_def = SSA_NAME_DEF_STMT (op0);\n-\t\t}\n-\t    }\n-\n \t  /* If we did not find our target SSA_NAME, then this is not\n \t     an overflow test.  */\n \t  if (op0 != target)\n@@ -764,13 +733,12 @@ overflow_comparison_p_1 (enum tree_code code, tree op0, tree op1,\n    the alternate range representation is often useful within VRP.  */\n \n bool\n-overflow_comparison_p (tree_code code, tree name, tree val,\n-\t\t       bool use_equiv_p, tree *new_cst)\n+overflow_comparison_p (tree_code code, tree name, tree val, tree *new_cst)\n {\n-  if (overflow_comparison_p_1 (code, name, val, use_equiv_p, false, new_cst))\n+  if (overflow_comparison_p_1 (code, name, val, false, new_cst))\n     return true;\n   return overflow_comparison_p_1 (swap_tree_comparison (code), val, name,\n-\t\t\t\t  use_equiv_p, true, new_cst);\n+\t\t\t\t  true, new_cst);\n }\n \n /* Handle"}, {"sha": "127909604f0be014deb30da4a38f150e5685ea3a", "filename": "gcc/tree-vrp.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f402963f1152988982ea1ffd98b2e823905c42/gcc%2Ftree-vrp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f402963f1152988982ea1ffd98b2e823905c42/gcc%2Ftree-vrp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.h?ref=22f402963f1152988982ea1ffd98b2e823905c42", "patch": "@@ -39,7 +39,7 @@ extern enum value_range_kind intersect_range_with_nonzero_bits\n extern bool find_case_label_range (gswitch *, tree, tree, size_t *, size_t *);\n extern tree find_case_label_range (gswitch *, const irange *vr);\n extern bool find_case_label_index (gswitch *, size_t, tree, size_t *);\n-extern bool overflow_comparison_p (tree_code, tree, tree, bool, tree *);\n+extern bool overflow_comparison_p (tree_code, tree, tree, tree *);\n extern void maybe_set_nonzero_bits (edge, tree);\n \n #endif /* GCC_TREE_VRP_H */"}, {"sha": "afb2648cfca88568bde36e6f9eab3b39e08d14fa", "filename": "gcc/vr-values.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22f402963f1152988982ea1ffd98b2e823905c42/gcc%2Fvr-values.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22f402963f1152988982ea1ffd98b2e823905c42/gcc%2Fvr-values.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.cc?ref=22f402963f1152988982ea1ffd98b2e823905c42", "patch": "@@ -837,7 +837,7 @@ simplify_using_ranges::vrp_evaluate_conditional_warnv_with_ops\n      occurs when the chosen argument is zero and does not occur if the\n      chosen argument is not zero.  */\n   tree x;\n-  if (overflow_comparison_p (code, op0, op1, use_equiv_p, &x))\n+  if (overflow_comparison_p (code, op0, op1, &x))\n     {\n       wide_int max = wi::max_value (TYPE_PRECISION (TREE_TYPE (op0)), UNSIGNED);\n       /* B = A - 1; if (A < B) -> B = A - 1; if (A == 0)"}]}