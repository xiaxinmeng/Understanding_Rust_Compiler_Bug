{"sha": "b9fa057537445e7ecfb2bbbfcf7ecacdc4e3ad05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjlmYTA1NzUzNzQ0NWU3ZWNmYjJiYmJmY2Y3ZWNhY2RjNGUzYWQwNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-12-21T05:00:43Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-12-21T05:00:43Z"}, "message": "re PR c++/64359 (alias_template_specialization_p & template_args_equal show up high in profile)\n\n\tPR c++/64359\n\t* pt.c (iterative_hash_template_arg): Hash alias specializations\n\tdifferently from their TYPE_CANONICAL.\n\t(alias_template_specialization_p): Optimize.\n\t(template_args_equal): Optimize alias handling.\n\t(dependent_alias_template_spec_p): Only check innermost args.\n\nFrom-SVN: r218995", "tree": {"sha": "85ffa26ec5a0fbc5e4e768b3e229b898960bb08f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85ffa26ec5a0fbc5e4e768b3e229b898960bb08f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9fa057537445e7ecfb2bbbfcf7ecacdc4e3ad05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9fa057537445e7ecfb2bbbfcf7ecacdc4e3ad05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9fa057537445e7ecfb2bbbfcf7ecacdc4e3ad05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9fa057537445e7ecfb2bbbfcf7ecacdc4e3ad05/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d01cc136c175aef411ae385dfde54cebf84700d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d01cc136c175aef411ae385dfde54cebf84700d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d01cc136c175aef411ae385dfde54cebf84700d4"}], "stats": {"total": 58, "additions": 41, "deletions": 17}, "files": [{"sha": "8802e59b87d1929abb180995255c89b7ce1dc655", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fa057537445e7ecfb2bbbfcf7ecacdc4e3ad05/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fa057537445e7ecfb2bbbfcf7ecacdc4e3ad05/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b9fa057537445e7ecfb2bbbfcf7ecacdc4e3ad05", "patch": "@@ -1,3 +1,12 @@\n+2014-12-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/64359\n+\t* pt.c (iterative_hash_template_arg): Hash alias specializations\n+\tdifferently from their TYPE_CANONICAL.\n+\t(alias_template_specialization_p): Optimize.\n+\t(template_args_equal): Optimize alias handling.\n+\t(dependent_alias_template_spec_p): Only check innermost args.\n+\n 2014-12-19  Kai Tietz  <ktietz@redhat.com>\n \n \tPR c++/61198"}, {"sha": "f5bd842df0eb4f78dfdcc105cd42ae463c605de7", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 32, "deletions": 17, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9fa057537445e7ecfb2bbbfcf7ecacdc4e3ad05/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9fa057537445e7ecfb2bbbfcf7ecacdc4e3ad05/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b9fa057537445e7ecfb2bbbfcf7ecacdc4e3ad05", "patch": "@@ -1674,6 +1674,18 @@ iterative_hash_template_arg (tree arg, hashval_t val)\n   switch (tclass)\n     {\n     case tcc_type:\n+      if (alias_template_specialization_p (arg))\n+\t{\n+\t  // We want an alias specialization that survived strip_typedefs\n+\t  // to hash differently from its TYPE_CANONICAL, to avoid hash\n+\t  // collisions that compare as different in template_args_equal.\n+\t  // These could be dependent specializations that strip_typedefs\n+\t  // left alone, or untouched specializations because\n+\t  // coerce_template_parms returns the unconverted template\n+\t  // arguments if it sees incomplete argument packs.\n+\t  tree ti = TYPE_TEMPLATE_INFO (arg);\n+\t  return hash_tmpl_and_args (TI_TEMPLATE (ti), TI_ARGS (ti));\n+\t}\n       if (TYPE_CANONICAL (arg))\n \treturn iterative_hash_object (TYPE_HASH (TYPE_CANONICAL (arg)),\n \t\t\t\t      val);\n@@ -5314,13 +5326,19 @@ alias_type_or_template_p (tree t)\n bool\n alias_template_specialization_p (const_tree t)\n {\n-  if (t == NULL_TREE)\n-    return false;\n-  \n-  return (TYPE_P (t)\n-\t  && TYPE_TEMPLATE_INFO (t)\n-\t  && PRIMARY_TEMPLATE_P (TYPE_TI_TEMPLATE (t))\n-\t  && DECL_ALIAS_TEMPLATE_P (TYPE_TI_TEMPLATE (t)));\n+  /* It's an alias template specialization if it's an alias and its\n+     TYPE_NAME is a specialization of a primary template.  */\n+  if (TYPE_ALIAS_P (t))\n+    {\n+      tree name = TYPE_NAME (t);\n+      if (DECL_LANG_SPECIFIC (name))\n+\tif (tree ti = DECL_TEMPLATE_INFO (name))\n+\t  {\n+\t    tree tmpl = TI_TEMPLATE (ti);\n+\t    return PRIMARY_TEMPLATE_P (tmpl);\n+\t  }\n+    }\n+  return false;\n }\n \n /* Return TRUE iff T is a specialization of an alias template with\n@@ -5330,7 +5348,8 @@ bool\n dependent_alias_template_spec_p (const_tree t)\n {\n   return (alias_template_specialization_p (t)\n-\t  && any_dependent_template_arguments_p (TYPE_TI_ARGS (t)));\n+\t  && (any_dependent_template_arguments_p\n+\t      (INNERMOST_TEMPLATE_ARGS (TYPE_TI_ARGS (t)))));\n }\n \n /* Return the number of innermost template parameters in TMPL.  */\n@@ -7283,16 +7302,12 @@ template_args_equal (tree ot, tree nt)\n \treturn false;\n       /* Don't treat an alias template specialization with dependent\n \t arguments as equivalent to its underlying type when used as a\n-\t template argument; we need them to hash differently.  */\n-      bool ndep = dependent_alias_template_spec_p (nt);\n-      ++processing_template_decl;\n-      bool odep = dependent_alias_template_spec_p (ot);\n-      --processing_template_decl;\n-      if (ndep != odep)\n+\t template argument; we need them to be distinct so that we\n+\t substitute into the specialization arguments at instantiation\n+\t time.  And aliases can't be equivalent without being ==, so\n+\t we don't need to look any deeper.  */\n+      if (TYPE_ALIAS_P (nt) || TYPE_ALIAS_P (ot))\n \treturn false;\n-      else if (ndep)\n-\treturn (TYPE_TI_TEMPLATE (nt) == TYPE_TI_TEMPLATE (ot)\n-\t\t&& template_args_equal (TYPE_TI_ARGS (nt), TYPE_TI_ARGS (ot)));\n       else\n \treturn same_type_p (ot, nt);\n     }"}]}