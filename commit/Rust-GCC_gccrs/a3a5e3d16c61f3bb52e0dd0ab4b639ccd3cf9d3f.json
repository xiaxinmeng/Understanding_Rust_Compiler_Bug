{"sha": "a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNhNWUzZDE2YzYxZjNiYjUyZTBkZDBhYjRiNjM5Y2NkM2NmOWQzZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-04-25T08:10:51Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-04-25T08:10:51Z"}, "message": "re PR inline-asm/39590 (inline asm %z on amd64 says \"ll\" instead of \"q\")\n\n\tPR target/39590\n\t* configure.ac (HAVE_AS_IX86_FILDQ): On x86 targets check whether\n\tthe configured assembler supports fildq and fistpq mnemonics.\n\t(HAVE_AS_IX86_FILDS): Rename from HAVE_GAS_FILDS_FISTS.\n\t* configure: Regenerated.\n\t* config.in: Ditto.\n\n\t* config/i386/i386.c (print_operand): Handle 'Z'.\n\t['z']: Remove handling of special fild/fist suffixes.\n\t(output_fix_trunc): Use '%Z' to output suffix of fist{,p,tp} insn.\n\t* config/i386/i386.md (*floathi<mode>2_i387): Use '%Z' to output\n\tsuffix of fild insn.\n\t(*floatsi<mode>2_vector_mixed): Ditto.\n\t(*float<SSEMODEI24:mode><MODEF:mode>2_mixed_interunit): Ditto.\n\t(*float<SSEMODEI24:mode><MODEF:mode>2_mixed_nointerunit): Ditto.\n\t(*float<SSEMODEI24:mode><X87MODEF:mode>2_i387_with_temp): Ditto.\n\t(*float<SSEMODEI24:mode><X87MODEF:mode>2_i387): Ditto.\n\t* config/i386/gas.h (GAS_MNEMONICS): Remove.\n\nFrom-SVN: r146761", "tree": {"sha": "0eea0b7cf7e55aecfde83f3fd77feafa5cc6c078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0eea0b7cf7e55aecfde83f3fd77feafa5cc6c078"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f/comments", "author": null, "committer": null, "parents": [{"sha": "fd24db293b996c6ed859e252b68ef7609b03589f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd24db293b996c6ed859e252b68ef7609b03589f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd24db293b996c6ed859e252b68ef7609b03589f"}], "stats": {"total": 271, "additions": 176, "deletions": 95}, "files": [{"sha": "fdefcf10127a8189acd3866e16f7d1b7dcdac417", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f", "patch": "@@ -1,3 +1,25 @@\n+2009-04-25  Uros Bizjak  <ubizjak@gmail.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/39590\n+\t* configure.ac (HAVE_AS_IX86_FILDQ): On x86 targets check whether\n+\tthe configured assembler supports fildq and fistpq mnemonics.\n+\t(HAVE_AS_IX86_FILDS): Rename from HAVE_GAS_FILDS_FISTS.\n+\t* configure: Regenerated.\n+\t* config.in: Ditto.\n+\n+\t* config/i386/i386.c (print_operand): Handle 'Z'.\n+\t['z']: Remove handling of special fild/fist suffixes.\n+\t(output_fix_trunc): Use '%Z' to output suffix of fist{,p,tp} insn.\n+\t* config/i386/i386.md (*floathi<mode>2_i387): Use '%Z' to output\n+\tsuffix of fild insn.\n+\t(*floatsi<mode>2_vector_mixed): Ditto.\n+\t(*float<SSEMODEI24:mode><MODEF:mode>2_mixed_interunit): Ditto.\n+\t(*float<SSEMODEI24:mode><MODEF:mode>2_mixed_nointerunit): Ditto.\n+\t(*float<SSEMODEI24:mode><X87MODEF:mode>2_i387_with_temp): Ditto.\n+\t(*float<SSEMODEI24:mode><X87MODEF:mode>2_i387): Ditto.\n+\t* config/i386/gas.h (GAS_MNEMONICS): Remove.\n+\n 2009-04-25  Ben Elliston  <bje@au.ibm.com>\n  \n \t* genrecog.c (validate_pattern): Do not warn for VOIDmode CALLs as\n@@ -82,19 +104,17 @@\n \t(enum dwarf_source_language): Likewise.\n \t* dwarf2out.c (int_loc_descriptor): Add cast to enum type.\n \t(add_calling_convention_attribute): Likewise.\n-\t* fold-const.c (fold_undefer_overflow_warnings): Add cast to enum\n-\ttype.\n-\t(combine_comparisons): Change compcode to int.  Add cast to enum\n-\ttype.\n+\t* fold-const.c (fold_undefer_overflow_warnings): Add cast to enum type.\n+\t(combine_comparisons): Change compcode to int.  Add cast to enum type.\n \t* genrecog.c (maybe_both_true_2): Change c to int.\n \t(write_switch): Likewise.  Add cast to enum type.\n \t* gimplify.c (gimplify_omp_for): Handle return values from\n \tgimplify_expr using MIN rather than bitwise or.\n \t(gimplify_expr): Add cast to enum type.\n \t* ipa-prop.c (update_jump_functions_after_inlining): Change\n \tIPA_BOTTOM to IPA_JF_UNKNOWN.\n-\t* ira.c (setup_class_subset_and_memory_move_costs): Change mode to\n-\tint.  Add casts to enum type.\n+\t* ira.c (setup_class_subset_and_memory_move_costs): Change mode to int.\n+\tAdd casts to enum type.\n \t(setup_cover_and_important_classes): Change cl to int.  Add casts\n \tto enum type.\n \t(setup_class_translate): Change cl and mode to int.\n@@ -126,14 +146,12 @@\n \twith ERROR_MARK, not NUM_TREE_CODES.\n \t(vect_create_epilog_for_reduction): Likewise.\n \t(vectorizable_reduction): Don't initialize epiloc_reduc_code.\n-\tWhen not using it, set it to ERROR_MARK rather than\n-\tNUM_TREE_CODES.\n+\tWhen not using it, set it to ERROR_MARK rather than NUM_TREE_CODES.\n \t* tree-vect-patterns.c (vect_pattern_recog_1): Change vec_mode to\n \tenum machine_mode.\n \t* tree-vect-stmts.c (new_stmt_vec_info): Change 0 to\n \tvect_unused_in_loop.  Change 0 to loop_vect.\n-\t* tree-vectorizer.c (vect_set_verbosity_level): Add casts to enum\n-\ttype.\n+\t* tree-vectorizer.c (vect_set_verbosity_level): Add casts to enum type.\n \t* var-tracking.c (get_init_value): Change return type to enum\n \tvar_init_status.\n \t* vec.h (DEF_VEC_FUNC_P) [iterate]: Cast 0 to type T.\n@@ -203,8 +221,7 @@\n \t* config/frv/frv.c (frv_frame_access): Do not use reg+reg\n \taddressing for DImode accesses.\n \t(frv_print_operand_address): Handle PLUS case.\n-\t* config/frv/frv.h (FIXED_REGISTERS): Mark link register as\n-\tfixed.\n+\t* config/frv/frv.h (FIXED_REGISTERS): Mark link register as fixed.\n \n 2009-04-24  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "9cbae32cd4d0e5b25522baf73c3f2a028fb64f20", "filename": "gcc/config.in", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f", "patch": "@@ -273,6 +273,18 @@\n #endif\n \n \n+/* Define if your assembler uses fildq and fistq mnemonics. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_IX86_FILDQ\n+#endif\n+\n+\n+/* Define if your assembler uses filds and fists mnemonics. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_IX86_FILDS\n+#endif\n+\n+\n /* Define if your assembler supports the sahf mnemonic. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_IX86_SAHF\n@@ -844,12 +856,6 @@\n #endif\n \n \n-/* Define if your assembler uses the new HImode fild and fist notation. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_GAS_FILDS_FISTS\n-#endif\n-\n-\n /* Define if your assembler and linker support .hidden. */\n #undef HAVE_GAS_HIDDEN\n "}, {"sha": "c4dafc64d183680ccaee262a7670ea302c389e09", "filename": "gcc/config/i386/gas.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f/gcc%2Fconfig%2Fi386%2Fgas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f/gcc%2Fconfig%2Fi386%2Fgas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgas.h?ref=a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f", "patch": "@@ -117,9 +117,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef SHIFT_DOUBLE_OMITS_COUNT\n #define SHIFT_DOUBLE_OMITS_COUNT 0\n \n-/* Print opcodes the way that GAS expects them.  */\n-#define GAS_MNEMONICS 1\n-\n /* The comment-starter string as GAS expects it. */\n #undef ASM_COMMENT_START\n #define ASM_COMMENT_START \"#\""}, {"sha": "65ee05c81b527fff2d81aab45e84dfed778134a3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 45, "deletions": 36, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f", "patch": "@@ -10848,6 +10848,7 @@ get_some_local_dynamic_name (void)\n         otherwise nothing\n    R -- print the prefix for register names.\n    z -- print the opcode suffix for the size of the current operand.\n+   Z -- likewise, with special suffixes for fild/fist instructions.\n    * -- print a star (in certain assembler syntax)\n    A -- print an absolute memory reference.\n    w -- print the operand as if it's a \"word\" (HImode) even if it isn't.\n@@ -10946,6 +10947,37 @@ print_operand (FILE *file, rtx x, int code)\n \t    putc ('t', file);\n \t  return;\n \n+\tcase 'Z':\n+\t  gcc_assert (MEM_P (x));\n+\n+\t  /* fild/fist don't get size suffixes if using Intel opcodes.  */\n+\t  if (ASSEMBLER_DIALECT == ASM_INTEL)\n+\t    return;\n+\n+\t  switch (GET_MODE_SIZE (GET_MODE (x)))\n+\t    {\n+\t    case 2:\n+#ifdef HAVE_AS_IX86_FILDS\n+\t      putc ('s', file);\n+#endif\n+\t      return;\n+\n+\t    case 4:\n+\t      putc ('l', file);\n+\t      return;\n+\n+\t    case 8:\n+#ifdef HAVE_AS_IX86_FILDQ\n+\t      putc ('q', file);\n+#else\n+\t      fputs (\"ll\", file);\n+#endif\n+\t      return;\n+\n+\t    default:\n+\t      gcc_unreachable ();\n+\t    }\n+\t    \n \tcase 'z':\n \t  /* 387 opcodes don't get size suffixes if the operands are\n \t     registers.  */\n@@ -10964,51 +10996,28 @@ print_operand (FILE *file, rtx x, int code)\n \t      return;\n \n \t    case 2:\n-\t      if (MEM_P (x))\n-\t\t{\n-#ifdef HAVE_GAS_FILDS_FISTS\n-\t\t  putc ('s', file);\n-#endif\n-\t\t  return;\n-\t\t}\n-\t      else\n-\t\tputc ('w', file);\n+\t      putc ('w', file);\n \t      return;\n \n \t    case 4:\n-\t      if (GET_MODE (x) == SFmode)\n-\t\t{\n-\t\t  putc ('s', file);\n-\t\t  return;\n-\t\t}\n-\t      else\n+\t      if (GET_MODE_CLASS (GET_MODE (x)) == MODE_INT)\n \t\tputc ('l', file);\n-\t      return;\n-\n-\t    case 12:\n-\t    case 16:\n-\t      putc ('t', file);\n+\t      else\n+\t\tputc ('s', file);\n \t      return;\n \n \t    case 8:\n \t      if (GET_MODE_CLASS (GET_MODE (x)) == MODE_INT)\n-\t\t{\n-\t\t  if (MEM_P (x))\n-\t\t    {\n-#ifdef GAS_MNEMONICS\n-\t\t      putc ('q', file);\n-#else\n-\t\t      putc ('l', file);\n-\t\t      putc ('l', file);\n-#endif\n-\t\t    }\n-\t\t  else\n-\t\t    putc ('q', file);\n-\t\t}\n+\t\tputc ('q', file);\n \t      else\n \t        putc ('l', file);\n \t      return;\n \n+\t    case 12:\n+\t    case 16:\n+\t      putc ('t', file);\n+\t      return;\n+\n \t    default:\n \t      gcc_unreachable ();\n \t    }\n@@ -12089,15 +12098,15 @@ output_fix_trunc (rtx insn, rtx *operands, int fisttp)\n   gcc_assert (GET_MODE (operands[1]) != TFmode);\n \n   if (fisttp)\n-      output_asm_insn (\"fisttp%z0\\t%0\", operands);\n+      output_asm_insn (\"fisttp%Z0\\t%0\", operands);\n   else\n     {\n       if (round_mode != I387_CW_ANY)\n \toutput_asm_insn (\"fldcw\\t%3\", operands);\n       if (stack_top_dies || dimode_p)\n-\toutput_asm_insn (\"fistp%z0\\t%0\", operands);\n+\toutput_asm_insn (\"fistp%Z0\\t%0\", operands);\n       else\n-\toutput_asm_insn (\"fist%z0\\t%0\", operands);\n+\toutput_asm_insn (\"fist%Z0\\t%0\", operands);\n       if (round_mode != I387_CW_ANY)\n \toutput_asm_insn (\"fldcw\\t%2\", operands);\n     }"}, {"sha": "d315580139cf2f83403f4a282098bad5a7d9ccb0", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 39, "deletions": 22, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f", "patch": "@@ -27,22 +27,39 @@\n ;; See file \"rtl.def\" for documentation on define_insn, match_*, et. al.\n ;;\n ;; The special asm out single letter directives following a '%' are:\n-;; 'z' mov%z1 would be movl, movw, or movb depending on the mode of\n-;;     operands[1].\n-;; 'L' Print the opcode suffix for a 32-bit integer opcode.\n-;; 'W' Print the opcode suffix for a 16-bit integer opcode.\n-;; 'B' Print the opcode suffix for an 8-bit integer opcode.\n-;; 'Q' Print the opcode suffix for a 64-bit float opcode.\n-;; 'S' Print the opcode suffix for a 32-bit float opcode.\n-;; 'T' Print the opcode suffix for an 80-bit extended real XFmode float opcode.\n-;; 'J' Print the appropriate jump operand.\n-;;\n-;; 'b' Print the QImode name of the register for the indicated operand.\n-;;     %b0 would print %al if operands[0] is reg 0.\n-;; 'w' Likewise, print the HImode name of the register.\n-;; 'k' Likewise, print the SImode name of the register.\n-;; 'h' Print the QImode name for a \"high\" register, either ah, bh, ch or dh.\n-;; 'y' Print \"st(0)\" instead of \"st\" as a register.\n+;; L,W,B,Q,S,T -- print the opcode suffix for specified size of operand.\n+;; C -- print opcode suffix for set/cmov insn.\n+;; c -- like C, but print reversed condition\n+;; E,e -- likewise, but for compare-and-branch fused insn.\n+;; F,f -- likewise, but for floating-point.\n+;; O -- if HAVE_AS_IX86_CMOV_SUN_SYNTAX, expand to \"w.\", \"l.\" or \"q.\",\n+;;      otherwise nothing\n+;; R -- print the prefix for register names.\n+;; z -- print the opcode suffix for the size of the current operand.\n+;; Z -- likewise, with special suffixes for fild/fist instructions.\n+;; * -- print a star (in certain assembler syntax)\n+;; A -- print an absolute memory reference.\n+;; w -- print the operand as if it's a \"word\" (HImode) even if it isn't.\n+;; s -- print a shift double count, followed by the assemblers argument\n+;;\tdelimiter.\n+;; b -- print the QImode name of the register for the indicated operand.\n+;;\t%b0 would print %al if operands[0] is reg 0.\n+;; w --  likewise, print the HImode name of the register.\n+;; k --  likewise, print the SImode name of the register.\n+;; q --  likewise, print the DImode name of the register.\n+;; x --  likewise, print the V4SFmode name of the register.\n+;; t --  likewise, print the V8SFmode name of the register.\n+;; h -- print the QImode name for a \"high\" register, either ah, bh, ch or dh.\n+;; y -- print \"st(0)\" instead of \"st\" as a register.\n+;; d -- print duplicated register operand for AVX instruction.\n+;; D -- print condition for SSE cmp instruction.\n+;; P -- if PIC, print an @PLT suffix.\n+;; X -- don't print any sort of PIC '@' suffix for a symbol.\n+;; & -- print some in-use local-dynamic symbol name.\n+;; H -- print a memory address offset by 8; used for sse high-parts\n+;; Y -- print condition for SSE5 com* instruction.\n+;; + -- print a branch hint as 'cs' or 'ds' prefix\n+;; ; -- print a semicolon (after prefixes due to bug in older gas).\n \n ;; UNSPEC usage:\n \n@@ -5124,7 +5141,7 @@\n   \"TARGET_80387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\"\n-  \"fild%z1\\t%1\"\n+  \"fild%Z1\\t%1\"\n   [(set_attr \"type\" \"fmov\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"fp_int_src\" \"true\")])\n@@ -5234,7 +5251,7 @@\n   \"TARGET_SSE2 && TARGET_MIX_SSE_I387\n    && TARGET_USE_VECTOR_CONVERTS && optimize_function_for_speed_p (cfun)\"\n   \"@\n-   fild%z1\\t%1\n+   fild%Z1\\t%1\n    #\"\n   [(set_attr \"type\" \"fmov,sseicvt\")\n    (set_attr \"mode\" \"<MODE>,<ssevecmode>\")\n@@ -5295,7 +5312,7 @@\n    && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_MIX_SSE_I387\n    && (TARGET_INTER_UNIT_CONVERSIONS || optimize_function_for_size_p (cfun))\"\n   \"@\n-   fild%z1\\t%1\n+   fild%Z1\\t%1\n    %vcvtsi2s<MODEF:ssemodefsuffix><SSEMODEI24:rex64suffix>\\t{%1, %d0|%d0, %1}\n    %vcvtsi2s<MODEF:ssemodefsuffix><SSEMODEI24:rex64suffix>\\t{%1, %d0|%d0, %1}\"\n   [(set_attr \"type\" \"fmov,sseicvt,sseicvt\")\n@@ -5314,7 +5331,7 @@\n    && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_MIX_SSE_I387\n    && !(TARGET_INTER_UNIT_CONVERSIONS || optimize_function_for_size_p (cfun))\"\n   \"@\n-   fild%z1\\t%1\n+   fild%Z1\\t%1\n    %vcvtsi2s<MODEF:ssemodefsuffix><SSEMODEI24:rex64suffix>\\t{%1, %d0|%d0, %1}\"\n   [(set_attr \"type\" \"fmov,sseicvt\")\n    (set_attr \"prefix\" \"orig,maybe_vex\")\n@@ -5564,7 +5581,7 @@\n   \"TARGET_80387\n    && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, <SSEMODEI24:MODE>mode)\"\n   \"@\n-   fild%z1\\t%1\n+   fild%Z1\\t%1\n    #\"\n   [(set_attr \"type\" \"fmov,multi\")\n    (set_attr \"mode\" \"<X87MODEF:MODE>\")\n@@ -5577,7 +5594,7 @@\n \t  (match_operand:SSEMODEI24 1 \"memory_operand\" \"m\")))]\n   \"TARGET_80387\n    && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, <SSEMODEI24:MODE>mode)\"\n-  \"fild%z1\\t%1\"\n+  \"fild%Z1\\t%1\"\n   [(set_attr \"type\" \"fmov\")\n    (set_attr \"mode\" \"<X87MODEF:MODE>\")\n    (set_attr \"fp_int_src\" \"true\")])"}, {"sha": "2415a6cb2d9ba4a6b9415bbb49d02bdf02358563", "filename": "gcc/configure", "status": "modified", "additions": 41, "deletions": 12, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f", "patch": "@@ -22638,15 +22638,11 @@ fi\n \n     echo \"$as_me:$LINENO: checking assembler for filds and fists mnemonics\" >&5\n echo $ECHO_N \"checking assembler for filds and fists mnemonics... $ECHO_C\" >&6\n-if test \"${gcc_cv_as_ix86_filds_fists+set}\" = set; then\n+if test \"${gcc_cv_as_ix86_filds+set}\" = set; then\n   echo $ECHO_N \"(cached) $ECHO_C\" >&6\n else\n-  gcc_cv_as_ix86_filds_fists=no\n-    if test $in_tree_gas = yes; then\n-    if test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 9 \\) \\* 1000 + 0`\n-  then gcc_cv_as_ix86_filds_fists=yes\n-fi\n-  elif test x$gcc_cv_as != x; then\n+  gcc_cv_as_ix86_filds=no\n+  if test x$gcc_cv_as != x; then\n     echo 'filds mem; fists mem' > conftest.s\n     if { ac_try='$gcc_cv_as  -o conftest.o conftest.s >&5'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n@@ -22655,20 +22651,53 @@ fi\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); }; }\n     then\n-\tgcc_cv_as_ix86_filds_fists=yes\n+\tgcc_cv_as_ix86_filds=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+echo \"$as_me:$LINENO: result: $gcc_cv_as_ix86_filds\" >&5\n+echo \"${ECHO_T}$gcc_cv_as_ix86_filds\" >&6\n+if test $gcc_cv_as_ix86_filds = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_AS_IX86_FILDS 1\n+_ACEOF\n+\n+fi\n+\n+    echo \"$as_me:$LINENO: checking assembler for fildq and fistpq mnemonics\" >&5\n+echo $ECHO_N \"checking assembler for fildq and fistpq mnemonics... $ECHO_C\" >&6\n+if test \"${gcc_cv_as_ix86_fildq+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  gcc_cv_as_ix86_fildq=no\n+  if test x$gcc_cv_as != x; then\n+    echo 'fildq mem; fistpq mem' > conftest.s\n+    if { ac_try='$gcc_cv_as  -o conftest.o conftest.s >&5'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }\n+    then\n+\tgcc_cv_as_ix86_fildq=yes\n     else\n       echo \"configure: failed program was\" >&5\n       cat conftest.s >&5\n     fi\n     rm -f conftest.o conftest.s\n   fi\n fi\n-echo \"$as_me:$LINENO: result: $gcc_cv_as_ix86_filds_fists\" >&5\n-echo \"${ECHO_T}$gcc_cv_as_ix86_filds_fists\" >&6\n-if test $gcc_cv_as_ix86_filds_fists = yes; then\n+echo \"$as_me:$LINENO: result: $gcc_cv_as_ix86_fildq\" >&5\n+echo \"${ECHO_T}$gcc_cv_as_ix86_fildq\" >&6\n+if test $gcc_cv_as_ix86_fildq = yes; then\n \n cat >>confdefs.h <<\\_ACEOF\n-#define HAVE_GAS_FILDS_FISTS 1\n+#define HAVE_AS_IX86_FILDQ 1\n _ACEOF\n \n fi"}, {"sha": "849b856f9c946e8edb71028155a1973944448ec1", "filename": "gcc/configure.ac", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=a3a5e3d16c61f3bb52e0dd0ab4b639ccd3cf9d3f", "patch": "@@ -2931,10 +2931,16 @@ foo:\tnop\n     esac\n \n     gcc_GAS_CHECK_FEATURE([filds and fists mnemonics],\n-       gcc_cv_as_ix86_filds_fists,\n-      [2,9,0],, [filds mem; fists mem],,\n-      [AC_DEFINE(HAVE_GAS_FILDS_FISTS, 1,\n-        [Define if your assembler uses the new HImode fild and fist notation.])])\n+       gcc_cv_as_ix86_filds,,,\n+       [filds mem; fists mem],,\n+       [AC_DEFINE(HAVE_AS_IX86_FILDS, 1,\n+         [Define if your assembler uses filds and fists mnemonics.])])\n+\n+    gcc_GAS_CHECK_FEATURE([fildq and fistpq mnemonics],\n+       gcc_cv_as_ix86_fildq,,,\n+       [fildq mem; fistpq mem],,\n+       [AC_DEFINE(HAVE_AS_IX86_FILDQ, 1,\n+         [Define if your assembler uses fildq and fistq mnemonics.])])\n \n     gcc_GAS_CHECK_FEATURE([cmov syntax],\n       gcc_cv_as_ix86_cmov_sun_syntax,,,"}]}