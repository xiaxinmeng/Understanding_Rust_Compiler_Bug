{"sha": "faa03cf1b40e800415540d92b100ad1e545c0d56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFhMDNjZjFiNDBlODAwNDE1NTQwZDkyYjEwMGFkMWU1NDVjMGQ1Ng==", "commit": {"author": {"name": "David Daney", "email": "ddaney@avtrex.com", "date": "2004-08-12T16:24:56Z"}, "committer": {"name": "David Daney", "email": "daney@gcc.gnu.org", "date": "2004-08-12T16:24:56Z"}, "message": "Process_1.java: New test.\n\n2004-08-03  David Daney  <ddaney@avtrex.com>\n\n\t* testsuite/libjava.lang/Process_1.java: New test.\n\t* testsuite/libjava.lang/Process_2.java: New test.\n\t* testsuite/libjava.lang/Process_3.java: New test.\n\t* testsuite/libjava.lang/Process_4.java: New test.\n\t* testsuite/libjava.lang/Process_5.java: New test.\n\t* testsuite/libjava.lang/Process_6.java: New test.\n\t* testsuite/libjava.lang/Process_1.out: Expected result.\n\t* testsuite/libjava.lang/Process_2.out: Expected result.\n\t* testsuite/libjava.lang/Process_3.out: Expected result.\n\t* testsuite/libjava.lang/Process_4.out: Expected result.\n\t* testsuite/libjava.lang/Process_5.out: Expected result.\n\t* testsuite/libjava.lang/Process_6.out: Expected result.\n\nFrom-SVN: r85881", "tree": {"sha": "2d86e9f1f84c86a9b93c4c4e6a0dc0697280e2ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d86e9f1f84c86a9b93c4c4e6a0dc0697280e2ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/faa03cf1b40e800415540d92b100ad1e545c0d56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faa03cf1b40e800415540d92b100ad1e545c0d56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faa03cf1b40e800415540d92b100ad1e545c0d56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faa03cf1b40e800415540d92b100ad1e545c0d56/comments", "author": null, "committer": null, "parents": [{"sha": "c58f29001dee1b4f6dfb09cc2a49f2739b106553", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c58f29001dee1b4f6dfb09cc2a49f2739b106553", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c58f29001dee1b4f6dfb09cc2a49f2739b106553"}], "stats": {"total": 286, "additions": 286, "deletions": 0}, "files": [{"sha": "2c55540b355abdf41017048acfa554e71101a025", "filename": "libjava/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=faa03cf1b40e800415540d92b100ad1e545c0d56", "patch": "@@ -1,3 +1,37 @@\n+2004-08-12  David Daney  <ddaney@avtrex.com>\n+\n+\t* testsuite/libjava.lang/Process_1.java: New test.\n+\t* testsuite/libjava.lang/Process_2.java: New test.\n+\t* testsuite/libjava.lang/Process_3.java: New test.\n+\t* testsuite/libjava.lang/Process_4.java: New test.\n+\t* testsuite/libjava.lang/Process_5.java: New test.\n+\t* testsuite/libjava.lang/Process_6.java: New test.\n+\t* testsuite/libjava.lang/Process_1.out: Expected result.\n+\t* testsuite/libjava.lang/Process_2.out: Expected result.\n+\t* testsuite/libjava.lang/Process_3.out: Expected result.\n+\t* testsuite/libjava.lang/Process_4.out: Expected result.\n+\t* testsuite/libjava.lang/Process_5.out: Expected result.\n+\t* testsuite/libjava.lang/Process_6.out: Expected result.\n+\n+2004-08-12  David Daney  <ddaney@avtrex.com>\n+\n+\tPR libgcj/11801\n+\t* java/lang/PosixProcess.java: Rewrote.\n+\t* java/lang/natPosixProcess.cc: Rewrote.\n+\t* java/lang/Runtime.java (execInternal): Declare throws IOException.\n+\t* gcj/javaprims.h (ConcreteProcess$ProcessManager): Declare.\n+\t* posix-threads.cc (block_sigchld) New function.\n+\t(_Jv_ThreadRegister) Use it.\n+\t(_Jv_ThreadStart) Use it.\n+\t* configure.in (PLATFORM_INNER_NAT_HDRS): New AC_SUBST() used in...\n+\t* Makefile.am: ... to specify extra native headers.\n+\t* configure: Regenerated.\n+\t* include/config.h: Regenerated.\n+\t* Makefile.in: Regenerated.\n+\t* gcj/Makefile.in: Regenerated.\n+\t* include/Makefile.in: Regenerated.\n+\t* testsuite/Makefile.in: Regenerated.\n+\n 2004-08-12  Diego Novillo  <dnovillo@redhat.com>\n \n \tPR tree-optimization/16867"}, {"sha": "adc6354660d1c0a25844a1591ef0c244d24c07cc", "filename": "libjava/testsuite/libjava.lang/Process_1.java", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_1.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_1.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_1.java?ref=faa03cf1b40e800415540d92b100ad1e545c0d56", "patch": "@@ -0,0 +1,41 @@\n+// Create a process and read from its standard output.\n+//\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+\n+\n+public class Process_1\n+{\n+  public static void main(String[] args)\n+  {\n+    try\n+      {\n+\tRuntime r = Runtime.getRuntime();\n+\tString s = \"Hello World\";\n+\tString[] a = { \"echo\", s };\n+\tProcess p = r.exec(a);\n+\tInputStream is = p.getInputStream();\n+\tInputStreamReader isr = new InputStreamReader(is);\n+\tBufferedReader br = new BufferedReader(isr);\n+\tString result = br.readLine();\n+\tif (! s.equals(result))\n+\t  {\n+\t    System.out.println(\"bad 1\");\n+\t    return;\n+\t  }\n+\tresult = br.readLine();\n+\tif (result != null)\n+\t  {\n+\t    System.out.println(\"bad 2\");\n+\t    return;\n+\t  }\n+\tint c = p.waitFor();\n+\tSystem.out.println(c == 0 ? \"ok\" : \"bad 3\");\n+      }\n+    catch (Exception ex)\n+      {\n+\tSystem.out.println(ex.toString());\n+      }\n+  }\n+}"}, {"sha": "9766475a4185a151dc9d56d614ffb9aaea3bfd42", "filename": "libjava/testsuite/libjava.lang/Process_1.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_1.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_1.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_1.out?ref=faa03cf1b40e800415540d92b100ad1e545c0d56", "patch": "@@ -0,0 +1 @@\n+ok"}, {"sha": "d90e653a40ed0df8a6195f7ad2c5a77e8df33ac7", "filename": "libjava/testsuite/libjava.lang/Process_2.java", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_2.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_2.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_2.java?ref=faa03cf1b40e800415540d92b100ad1e545c0d56", "patch": "@@ -0,0 +1,40 @@\n+// Create a process and read from its standard error.\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+\n+\n+public class Process_2\n+{\n+  public static void main(String[] args)\n+  {\n+    try\n+      {\n+\tRuntime r = Runtime.getRuntime();\n+\tString s = \"Hello World\";\n+\tString[] a = { \"sh\", \"-c\", \"echo \" + s + \" >&2\" };\n+\tProcess p = r.exec(a);\n+\tInputStream is = p.getErrorStream();\n+\tInputStreamReader isr = new InputStreamReader(is);\n+\tBufferedReader br = new BufferedReader(isr);\n+\tString result = br.readLine();\n+\tif (! s.equals(result))\n+\t  {\n+\t    System.out.println(\"bad 1\");\n+\t    return;\n+\t  }\n+\tresult = br.readLine();\n+\tif (result != null)\n+\t  {\n+\t    System.out.println(\"bad 2\");\n+\t    return;\n+\t  }\n+\tint c = p.waitFor();\n+\tSystem.out.println(c == 0 ? \"ok\" : \"bad 3\");\n+      }\n+    catch (Exception ex)\n+      {\n+\tSystem.out.println(ex.toString());\n+      }\n+  }\n+}"}, {"sha": "9766475a4185a151dc9d56d614ffb9aaea3bfd42", "filename": "libjava/testsuite/libjava.lang/Process_2.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_2.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_2.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_2.out?ref=faa03cf1b40e800415540d92b100ad1e545c0d56", "patch": "@@ -0,0 +1 @@\n+ok"}, {"sha": "669e1dc7e293a2b3c1c9cf5831559997dafee762", "filename": "libjava/testsuite/libjava.lang/Process_3.java", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_3.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_3.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_3.java?ref=faa03cf1b40e800415540d92b100ad1e545c0d56", "patch": "@@ -0,0 +1,72 @@\n+// Create a process and pipe data through it.  waitFor() the process\n+// in a different thread than the one that created it.\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+\n+\n+public class Process_3 implements Runnable\n+{\n+  Process p;\n+\n+  public void run()\n+  {\n+    try\n+      {\n+\tRuntime r = Runtime.getRuntime();\n+\tString[] a = { \"sed\", \"-e\", \"s/Hello/Goodbye/\" };\n+\tsynchronized (this)\n+\t  {\n+\t    p = r.exec(a);\n+\t    this.notifyAll();\n+\t  }\n+\tOutputStream os = p.getOutputStream();\n+\tPrintStream ps = new PrintStream(os);\n+\tps.println(\"Hello World\");\n+\tps.close();\n+      }\n+    catch (Exception ex)\n+      {\n+\tSystem.out.println(ex.toString());\n+      }\n+  }\n+\n+  public static void main(String[] args)\n+  {\n+    try\n+      {\n+\tProcess_3 p3 = new Process_3();\n+\tThread t = new Thread(p3);\n+\tt.start();\n+\tsynchronized (p3)\n+\t  {\n+\t    while (p3.p == null)\n+\t      p3.wait();\n+\t  }\n+\n+\tInputStream is = p3.p.getInputStream();\n+\tInputStreamReader isr = new InputStreamReader(is);\n+\tBufferedReader br = new BufferedReader(isr);\n+\tString result = br.readLine();\n+\tif (! \"Goodbye World\".equals(result))\n+\t  {\n+\t    System.out.println(\"bad 1\");\n+\t    return;\n+\t  }\n+\tresult = br.readLine();\n+\tif (result != null)\n+\t  {\n+\t    System.out.println(\"bad 2\");\n+\t    return;\n+\t  }\n+\tint c = p3.p.waitFor();\n+\tSystem.out.println(c == 0 ? \"ok\" : \"bad 3\");\n+      }\n+    catch (Exception ex)\n+      {\n+\tSystem.out.println(ex.toString());\n+      }\n+  }\n+}"}, {"sha": "9766475a4185a151dc9d56d614ffb9aaea3bfd42", "filename": "libjava/testsuite/libjava.lang/Process_3.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_3.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_3.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_3.out?ref=faa03cf1b40e800415540d92b100ad1e545c0d56", "patch": "@@ -0,0 +1 @@\n+ok"}, {"sha": "241dfde816d40610edabef30a0fc7b72f4074d42", "filename": "libjava/testsuite/libjava.lang/Process_4.java", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_4.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_4.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_4.java?ref=faa03cf1b40e800415540d92b100ad1e545c0d56", "patch": "@@ -0,0 +1,19 @@\n+// Create a process and verify failure exit code.\n+public class Process_4\n+{\n+  public static void main(String[] args)\n+  {\n+    try\n+      {\n+\tRuntime r = Runtime.getRuntime();\n+\tString[] a = { \"false\" };\n+\tProcess p = r.exec(a);\n+\tint c = p.waitFor();\n+\tSystem.out.println(c == 1 ? \"ok\" : \"bad\");\n+      }\n+    catch (Exception ex)\n+      {\n+\tSystem.out.println(ex.toString());\n+      }\n+  }\n+}"}, {"sha": "9766475a4185a151dc9d56d614ffb9aaea3bfd42", "filename": "libjava/testsuite/libjava.lang/Process_4.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_4.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_4.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_4.out?ref=faa03cf1b40e800415540d92b100ad1e545c0d56", "patch": "@@ -0,0 +1 @@\n+ok"}, {"sha": "61fd5b7409f9049a731bbe124f894c9baf93b301", "filename": "libjava/testsuite/libjava.lang/Process_5.java", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_5.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_5.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_5.java?ref=faa03cf1b40e800415540d92b100ad1e545c0d56", "patch": "@@ -0,0 +1,43 @@\n+// Create a long running process and verify that the exitValue is not\n+// immediately available.  Then destroy() it and verify that it\n+// terminates quickly with a non-zero exitValue.\n+public class Process_5\n+{\n+  public static void main(String[] args)\n+  {\n+    try\n+      {\n+\tint c;\n+\tlong startTime = System.currentTimeMillis();\n+\tRuntime r = Runtime.getRuntime();\n+\tString[] a = { \"sleep\", \"120\" };\n+\tProcess p = r.exec(a);\n+\n+\ttry\n+\t  {\n+\t    c = p.exitValue();\n+\t    System.out.println(\"bad 1\");\n+\t    return;\n+\t  }\n+\tcatch (IllegalThreadStateException itse)\n+\t  {\n+\t    // Ignore as this is good here.\n+\t  }\n+\n+\tp.destroy();\n+\n+\tc = p.waitFor();\n+\n+\tlong endTime = System.currentTimeMillis();\n+\n+\tif (endTime - startTime > 110000L)\n+\t  System.out.println(\"bad 2\");\n+\n+\tSystem.out.println(c != 0 ? \"ok\" : \"bad 3\");\n+      }\n+    catch (Exception ex)\n+      {\n+\tSystem.out.println(ex.toString());\n+      }\n+  }\n+}"}, {"sha": "9766475a4185a151dc9d56d614ffb9aaea3bfd42", "filename": "libjava/testsuite/libjava.lang/Process_5.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_5.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_5.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_5.out?ref=faa03cf1b40e800415540d92b100ad1e545c0d56", "patch": "@@ -0,0 +1 @@\n+ok"}, {"sha": "3bf015f760b3ce9957a2c67e5ce6bbd5f907477c", "filename": "libjava/testsuite/libjava.lang/Process_6.java", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_6.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_6.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_6.java?ref=faa03cf1b40e800415540d92b100ad1e545c0d56", "patch": "@@ -0,0 +1,31 @@\n+// Create a running process for a non existent executable.\n+// Verify that IOException is thrown.\n+import java.io.IOException;\n+\n+\n+public class Process_6\n+{\n+  public static void main(String[] args)\n+  {\n+    try\n+      {\n+\tint c;\n+\tRuntime r = Runtime.getRuntime();\n+\tString[] a = { \"blablabla_failure\" };\n+\n+\ttry\n+\t  {\n+\t    Process p = r.exec(a);\n+\t    System.out.println(\"bad\");\n+\t  }\n+\tcatch (IOException ioe)\n+\t  {\n+\t    System.out.println(\"ok\");\n+\t  }\n+      }\n+    catch (Exception ex)\n+      {\n+\tSystem.out.println(ex.toString());\n+      }\n+  }\n+}"}, {"sha": "9766475a4185a151dc9d56d614ffb9aaea3bfd42", "filename": "libjava/testsuite/libjava.lang/Process_6.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_6.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa03cf1b40e800415540d92b100ad1e545c0d56/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_6.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FProcess_6.out?ref=faa03cf1b40e800415540d92b100ad1e545c0d56", "patch": "@@ -0,0 +1 @@\n+ok"}]}