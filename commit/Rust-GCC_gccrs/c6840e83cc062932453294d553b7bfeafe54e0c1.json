{"sha": "c6840e83cc062932453294d553b7bfeafe54e0c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY4NDBlODNjYzA2MjkzMjQ1MzI5NGQ1NTNiN2JmZWFmZTU0ZTBjMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T09:47:33Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T09:47:33Z"}, "message": "[multiple changes]\n\n2017-04-25  Bob Duff  <duff@adacore.com>\n\n\t* sem_ch8.adb (Use_One_Type): If a use_type_clause\n\tis redundant, set its Used_Operations to empty. This is only\n\tnecessary for use clauses that appear in the parent of a generic\n\tchild unit, because those use clauses get reanalyzed when we\n\tinstantiate the generic, and we don't want the Used_Operations\n\tcarried over from the original context (where it was probably\n\tnot redundant).\n\n2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch6.adb: Minor reformatting.\n\nFrom-SVN: r247169", "tree": {"sha": "f35ad9006b621996f6c30498512736d0f14f5150", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f35ad9006b621996f6c30498512736d0f14f5150"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6840e83cc062932453294d553b7bfeafe54e0c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6840e83cc062932453294d553b7bfeafe54e0c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6840e83cc062932453294d553b7bfeafe54e0c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6840e83cc062932453294d553b7bfeafe54e0c1/comments", "author": null, "committer": null, "parents": [{"sha": "f2a54683c6700df37ba3c0c99d7142fae89d59b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2a54683c6700df37ba3c0c99d7142fae89d59b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2a54683c6700df37ba3c0c99d7142fae89d59b1"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "9f06f0cd210fc8521e57e68bddc6a54ad58fb29b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6840e83cc062932453294d553b7bfeafe54e0c1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6840e83cc062932453294d553b7bfeafe54e0c1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c6840e83cc062932453294d553b7bfeafe54e0c1", "patch": "@@ -1,3 +1,17 @@\n+2017-04-25  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch8.adb (Use_One_Type): If a use_type_clause\n+\tis redundant, set its Used_Operations to empty. This is only\n+\tnecessary for use clauses that appear in the parent of a generic\n+\tchild unit, because those use clauses get reanalyzed when we\n+\tinstantiate the generic, and we don't want the Used_Operations\n+\tcarried over from the original context (where it was probably\n+\tnot redundant).\n+\n+2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch6.adb: Minor reformatting.\n+\n 2017-04-25  Bob Duff  <duff@adacore.com>\n \n \t* sem_prag.adb (Process_Restrictions_Or_Restriction_Warnings):"}, {"sha": "c6b235cffaaa31642647859e2ad1a1bfada3a1a3", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6840e83cc062932453294d553b7bfeafe54e0c1/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6840e83cc062932453294d553b7bfeafe54e0c1/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=c6840e83cc062932453294d553b7bfeafe54e0c1", "patch": "@@ -6635,10 +6635,10 @@ package body Exp_Ch6 is\n                    Attribute_Name => Name_Tag);\n             end if;\n \n-            if not CodePeer_Mode then\n-               --  CodePeer doesn't do anything useful with\n-               --  Ada.Tags.Type_Specific_Data components\n+            --  CodePeer does not do anything useful with\n+            --  Ada.Tags.Type_Specific_Data components.\n \n+            if not CodePeer_Mode then\n                Insert_Action (Exp,\n                  Make_Raise_Program_Error (Loc,\n                    Condition =>\n@@ -6647,7 +6647,7 @@ package body Exp_Ch6 is\n                        Right_Opnd =>\n                          Make_Integer_Literal (Loc,\n                            Scope_Depth (Enclosing_Dynamic_Scope (Scope_Id)))),\n-                   Reason => PE_Accessibility_Check_Failed));\n+                   Reason    => PE_Accessibility_Check_Failed));\n             end if;\n          end;\n "}, {"sha": "d44cef2d819a7ac7f71789e776c4c7dd1f8fb459", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6840e83cc062932453294d553b7bfeafe54e0c1/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6840e83cc062932453294d553b7bfeafe54e0c1/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=c6840e83cc062932453294d553b7bfeafe54e0c1", "patch": "@@ -9200,11 +9200,22 @@ package body Sem_Ch8 is\n            (\"incomplete type from limited view \"\n             & \"cannot appear in use clause\", Id);\n \n+      --  If the use clause is redundant, Used_Operations will usually be\n+      --  empty, but we need to set it to empty here in one case: If we are\n+      --  instantiating a generic library unit, then we install the ancestors\n+      --  of that unit in the scope stack, which involves reprocessing use\n+      --  clauses in those ancestors. Such a use clause will typically have a\n+      --  nonempty Used_Operations unless it was redundant in the generic unit,\n+      --  even if it is redundant at the place of the instantiation.\n+\n+      elsif Redundant_Use (Id) then\n+         Set_Used_Operations (Parent (Id), New_Elmt_List);\n+\n       --  If the subtype mark designates a subtype in a different package,\n       --  we have to check that the parent type is visible, otherwise the\n       --  use type clause is a noop. Not clear how to do that???\n \n-      elsif not Redundant_Use (Id) then\n+      else\n          Set_In_Use (T);\n \n          --  If T is tagged, primitive operators on class-wide operands"}]}