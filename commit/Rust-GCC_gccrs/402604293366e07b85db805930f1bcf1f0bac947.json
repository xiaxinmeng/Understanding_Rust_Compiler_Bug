{"sha": "402604293366e07b85db805930f1bcf1f0bac947", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAyNjA0MjkzMzY2ZTA3Yjg1ZGI4MDU5MzBmMWJjZjFmMGJhYzk0Nw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-07-25T09:38:26Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-07-25T09:38:26Z"}, "message": "re PR c++/3416 (gcc-3.0 Internal compiler error in arg_assoc, at cp/decl2.c:4902)\n\ncp:\n\tPR c++/3416\n\t* call.c (build_conditional_expr): Recheck args after\n\tconversions.\n\t* cp-tree.h (build_conditional_expr): Move to correct file.\n\t* typeck.c (decay_conversion): Diagnose any unknown types\n\treaching here.\n\t(build_binary_op): Don't do initial decay or default\n\tconversions on overloaded functions.\n\t(build_static_cast): Don't do a decay conversion here.\ntestsuite:\n\t* g++.old-deja/g++.other/cond7.C: New test.\n\nFrom-SVN: r44345", "tree": {"sha": "d493c5f26270f94be4e2797ecc940088fefb192c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d493c5f26270f94be4e2797ecc940088fefb192c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/402604293366e07b85db805930f1bcf1f0bac947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/402604293366e07b85db805930f1bcf1f0bac947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/402604293366e07b85db805930f1bcf1f0bac947", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/402604293366e07b85db805930f1bcf1f0bac947/comments", "author": null, "committer": null, "parents": [{"sha": "ab085207aad52d58945ea30b78c04e050d7b5a9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab085207aad52d58945ea30b78c04e050d7b5a9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab085207aad52d58945ea30b78c04e050d7b5a9a"}], "stats": {"total": 69, "additions": 63, "deletions": 6}, "files": [{"sha": "eb000083a11b68e338137c85d2f5a242950829ea", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402604293366e07b85db805930f1bcf1f0bac947/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402604293366e07b85db805930f1bcf1f0bac947/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=402604293366e07b85db805930f1bcf1f0bac947", "patch": "@@ -1,3 +1,15 @@\n+2001-07-25  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/3416\n+\t* call.c (build_conditional_expr): Recheck args after\n+\tconversions.\n+\t* cp-tree.h (build_conditional_expr): Move to correct file.\n+\t* typeck.c (decay_conversion): Diagnose any unknown types\n+\treaching here.\n+\t(build_binary_op): Don't do initial decay or default\n+\tconversions on overloaded functions.\n+\t(build_static_cast): Don't do a decay conversion here.\n+\n 2001-07-25  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/3543"}, {"sha": "4be0920f2cafed9f11ca0172b5e8b737e33c8015", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402604293366e07b85db805930f1bcf1f0bac947/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402604293366e07b85db805930f1bcf1f0bac947/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=402604293366e07b85db805930f1bcf1f0bac947", "patch": "@@ -3092,6 +3092,9 @@ build_conditional_expr (arg1, arg2, arg3)\n     arg3 = decay_conversion (arg3);\n   arg3_type = TREE_TYPE (arg3);\n \n+  if (arg2 == error_mark_node || arg3 == error_mark_node)\n+    return error_mark_node;\n+  \n   /* [expr.cond]\n      \n      After those conversions, one of the following shall hold:"}, {"sha": "8a6b0ae90d942442afbafd68ff75080e3f7a836c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402604293366e07b85db805930f1bcf1f0bac947/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402604293366e07b85db805930f1bcf1f0bac947/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=402604293366e07b85db805930f1bcf1f0bac947", "patch": "@@ -3545,6 +3545,7 @@ extern int get_arglist_len_in_bytes\t\tPARAMS ((tree));\n \n extern tree build_vfield_ref\t\t\tPARAMS ((tree, tree));\n extern tree build_scoped_method_call\t\tPARAMS ((tree, tree, tree, tree));\n+extern tree build_conditional_expr\t\tPARAMS ((tree, tree, tree));\n extern tree build_addr_func\t\t\tPARAMS ((tree));\n extern tree build_call\t\t\t\tPARAMS ((tree, tree));\n extern tree build_method_call\t\t\tPARAMS ((tree, tree, tree, tree, int));\n@@ -4305,7 +4306,6 @@ extern tree build_x_binary_op\t\t\tPARAMS ((enum tree_code, tree, tree));\n extern tree build_x_unary_op\t\t\tPARAMS ((enum tree_code, tree));\n extern tree unary_complex_lvalue\t\tPARAMS ((enum tree_code, tree));\n extern tree build_x_conditional_expr\t\tPARAMS ((tree, tree, tree));\n-extern tree build_conditional_expr\t\tPARAMS ((tree, tree, tree));\n extern tree build_x_compound_expr\t\tPARAMS ((tree));\n extern tree build_compound_expr\t\t\tPARAMS ((tree));\n extern tree build_static_cast\t\t\tPARAMS ((tree, tree));"}, {"sha": "9043111786a75bb3e36a31968e42cefe9d40ac4f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402604293366e07b85db805930f1bcf1f0bac947/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402604293366e07b85db805930f1bcf1f0bac947/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=402604293366e07b85db805930f1bcf1f0bac947", "patch": "@@ -1729,6 +1729,12 @@ decay_conversion (exp)\n   if (type == error_mark_node)\n     return error_mark_node;\n \n+  if (type_unknown_p (exp))\n+    {\n+      incomplete_type_error (exp, TREE_TYPE (exp));\n+      return error_mark_node;\n+    }\n+  \n   /* Constants can be used directly unless they're not loadable.  */\n   if (TREE_CODE (exp) == CONST_DECL)\n     exp = DECL_INITIAL (exp);\n@@ -3365,17 +3371,24 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n   int common = 0;\n \n   /* Apply default conversions.  */\n+  op0 = orig_op0;\n+  op1 = orig_op1;\n+  \n   if (code == TRUTH_AND_EXPR || code == TRUTH_ANDIF_EXPR\n       || code == TRUTH_OR_EXPR || code == TRUTH_ORIF_EXPR\n       || code == TRUTH_XOR_EXPR)\n     {\n-      op0 = decay_conversion (orig_op0);\n-      op1 = decay_conversion (orig_op1);\n+      if (!really_overloaded_fn (op0))\n+\top0 = decay_conversion (op0);\n+      if (!really_overloaded_fn (op1))\n+\top1 = decay_conversion (op1);\n     }\n   else\n     {\n-      op0 = default_conversion (orig_op0);\n-      op1 = default_conversion (orig_op1);\n+      if (!really_overloaded_fn (op0))\n+\top0 = default_conversion (op0);\n+      if (!really_overloaded_fn (op1))\n+\top1 = default_conversion (op1);\n     }\n \n   /* Strip NON_LVALUE_EXPRs, etc., since we aren't using as an lvalue.  */\n@@ -5100,7 +5113,6 @@ build_static_cast (type, expr)\n \t\t\t\t    build_tree_list (NULL_TREE, expr),\n \t\t\t\t    TYPE_BINFO (type), LOOKUP_NORMAL)));\n   \n-  expr = decay_conversion (expr);\n   intype = TREE_TYPE (expr);\n \n   /* FIXME handle casting to array type.  */"}, {"sha": "2baa8c043a2a2f445ed2a0c1ce97b75984f9659d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402604293366e07b85db805930f1bcf1f0bac947/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402604293366e07b85db805930f1bcf1f0bac947/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=402604293366e07b85db805930f1bcf1f0bac947", "patch": "@@ -1,3 +1,7 @@\n+2001-07-25  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.other/cond7.C: New test.\n+\n 2001-07-25  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.other/optimize4.C: New test."}, {"sha": "49fa73ca1f8d6e02a53c7b563342202f5253152c", "filename": "gcc/testsuite/g++.old-deja/g++.other/cond7.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402604293366e07b85db805930f1bcf1f0bac947/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcond7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402604293366e07b85db805930f1bcf1f0bac947/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcond7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcond7.C?ref=402604293366e07b85db805930f1bcf1f0bac947", "patch": "@@ -0,0 +1,26 @@\n+// Build don't link:\n+// \n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 24 Jul 2001 <nathan@codesourcery.com>\n+\n+// Bug 3416. We left some unchecked overloaded functions lying around.\n+\n+struct X\n+{\n+  void operator << (int);\n+  void operator << (float);\n+};\n+\n+void OVL1 (int);\n+void OVL1 (float);\n+\n+void OVL2 (int);\n+void OVL2 (float);\n+\n+X x;\n+\n+void foo (bool a)\n+{\n+  x << (a ? OVL1 : OVL2);\t// ERROR - incomplete type\n+  a ? OVL1 : OVL2;              // ERROR - incomplete type\n+}"}]}