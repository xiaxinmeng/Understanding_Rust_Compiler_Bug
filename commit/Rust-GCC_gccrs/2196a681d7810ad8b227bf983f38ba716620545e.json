{"sha": "2196a681d7810ad8b227bf983f38ba716620545e", "node_id": "C_kwDOANBUbNoAKDIxOTZhNjgxZDc4MTBhZDhiMjI3YmY5ODNmMzhiYTcxNjYyMDU0NWU", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-10-27T13:27:15Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-11-18T16:25:11Z"}, "message": "x86: Add -mindirect-branch-cs-prefix\n\nAdd -mindirect-branch-cs-prefix to add CS prefix to call and jmp to\nindirect thunk with branch target in r8-r15 registers so that the call\nand jmp instruction length is 6 bytes to allow them to be replaced with\n\"lfence; call *%r8-r15\" or \"lfence; jmp *%r8-r15\" at run-time.\n\ngcc/\n\n\tPR target/102952\n\t* config/i386/i386.c (ix86_output_jmp_thunk_or_indirect): Emit\n\tCS prefix for -mindirect-branch-cs-prefix.\n\t(ix86_output_indirect_branch_via_reg): Likewise.\n\t* config/i386/i386.opt: Add -mindirect-branch-cs-prefix.\n\t* doc/invoke.texi: Document -mindirect-branch-cs-prefix.\n\ngcc/testsuite/\n\n\tPR target/102952\n\t* gcc.target/i386/indirect-thunk-cs-prefix-1.c: New test.\n\t* gcc.target/i386/indirect-thunk-cs-prefix-2.c: Likewise.", "tree": {"sha": "3da7f11755f19cb140029786544dfb10e45e34c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3da7f11755f19cb140029786544dfb10e45e34c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2196a681d7810ad8b227bf983f38ba716620545e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2196a681d7810ad8b227bf983f38ba716620545e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2196a681d7810ad8b227bf983f38ba716620545e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2196a681d7810ad8b227bf983f38ba716620545e/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca243ada71656651a8753e88164a1f0f019be1c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca243ada71656651a8753e88164a1f0f019be1c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca243ada71656651a8753e88164a1f0f019be1c3"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "7fe271b1b9486a73eaaf65c909788b6b3286dd27", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2196a681d7810ad8b227bf983f38ba716620545e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2196a681d7810ad8b227bf983f38ba716620545e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2196a681d7810ad8b227bf983f38ba716620545e", "patch": "@@ -15982,6 +15982,9 @@ ix86_output_jmp_thunk_or_indirect (const char *thunk_name, const int regno)\n {\n   if (thunk_name != NULL)\n     {\n+      if (REX_INT_REGNO_P (regno)\n+\t  && ix86_indirect_branch_cs_prefix)\n+\tfprintf (asm_out_file, \"\\tcs\\n\");\n       fprintf (asm_out_file, \"\\tjmp\\t\");\n       assemble_name (asm_out_file, thunk_name);\n       putc ('\\n', asm_out_file);\n@@ -16031,6 +16034,9 @@ ix86_output_indirect_branch_via_reg (rtx call_op, bool sibcall_p)\n     {\n       if (thunk_name != NULL)\n \t{\n+\t  if (REX_INT_REGNO_P (regno)\n+\t      && ix86_indirect_branch_cs_prefix)\n+\t    fprintf (asm_out_file, \"\\tcs\\n\");\n \t  fprintf (asm_out_file, \"\\tcall\\t\");\n \t  assemble_name (asm_out_file, thunk_name);\n \t  putc ('\\n', asm_out_file);"}, {"sha": "3e67c537bb7b67fcb60bf6085c46e5e0ec736167", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2196a681d7810ad8b227bf983f38ba716620545e/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2196a681d7810ad8b227bf983f38ba716620545e/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=2196a681d7810ad8b227bf983f38ba716620545e", "patch": "@@ -1076,6 +1076,10 @@ Enum(indirect_branch) String(thunk-inline) Value(indirect_branch_thunk_inline)\n EnumValue\n Enum(indirect_branch) String(thunk-extern) Value(indirect_branch_thunk_extern)\n \n+mindirect-branch-cs-prefix\n+Target Var(ix86_indirect_branch_cs_prefix) Init(0)\n+Add CS prefix to call and jmp to indirect thunk with branch target in r8-r15 registers.\n+\n mindirect-branch-register\n Target Var(ix86_indirect_branch_register) Init(0)\n Force indirect call and jump via register."}, {"sha": "5fed1dd6a3104f7395b1984be61e90573d11239f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2196a681d7810ad8b227bf983f38ba716620545e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2196a681d7810ad8b227bf983f38ba716620545e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2196a681d7810ad8b227bf983f38ba716620545e", "patch": "@@ -1427,7 +1427,8 @@ See RS/6000 and PowerPC Options.\n -mstack-protector-guard-symbol=@var{symbol} @gol\n -mgeneral-regs-only  -mcall-ms2sysv-xlogues -mrelax-cmpxchg-loop @gol\n -mindirect-branch=@var{choice}  -mfunction-return=@var{choice} @gol\n--mindirect-branch-register -mharden-sls=@var{choice} -mneeded}\n+-mindirect-branch-register -mharden-sls=@var{choice} @gol\n+-mindirect-branch-cs-prefix -mneeded}\n \n @emph{x86 Windows Options}\n @gccoptlist{-mconsole  -mcygwin  -mno-cygwin  -mdll @gol\n@@ -32416,6 +32417,13 @@ hardening.  @samp{return} enables SLS hardening for function return.\n @samp{indirect-branch} enables SLS hardening for indirect branch.\n @samp{all} enables all SLS hardening.\n \n+@item -mindirect-branch-cs-prefix\n+@opindex mindirect-branch-cs-prefix\n+Add CS prefix to call and jmp to indirect thunk with branch target in\n+r8-r15 registers so that the call and jmp instruction length is 6 bytes\n+to allow them to be replaced with @samp{lfence; call *%r8-r15} or\n+@samp{lfence; jmp *%r8-r15} at run-time.\n+\n @end table\n \n These @samp{-m} switches are supported in addition to the above"}, {"sha": "db2f3416823c3429a6cb79d9363cc233f23238bd", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-cs-prefix-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2196a681d7810ad8b227bf983f38ba716620545e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-cs-prefix-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2196a681d7810ad8b227bf983f38ba716620545e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-cs-prefix-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-cs-prefix-1.c?ref=2196a681d7810ad8b227bf983f38ba716620545e", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -ffixed-rax -ffixed-rbx -ffixed-rcx -ffixed-rdx -ffixed-rdi -ffixed-rsi -mindirect-branch-cs-prefix -mindirect-branch=thunk-extern\" } */\n+/* { dg-additional-options \"-fno-pic\" { target { ! *-*-darwin* } } } */\n+\n+extern void (*fptr) (void);\n+\n+void\n+foo (void)\n+{\n+  fptr ();\n+}\n+\n+/* { dg-final { scan-assembler-times \"jmp\\[ \\t\\]+_?__x86_indirect_thunk_r\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tcs\" 1 } } */"}, {"sha": "adfc39a49d41be84a085fc1321f0e76db9c0d245", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-cs-prefix-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2196a681d7810ad8b227bf983f38ba716620545e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-cs-prefix-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2196a681d7810ad8b227bf983f38ba716620545e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-cs-prefix-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-cs-prefix-2.c?ref=2196a681d7810ad8b227bf983f38ba716620545e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -ffixed-rax -ffixed-rbx -ffixed-rcx -ffixed-rdx -ffixed-rdi -ffixed-rsi -mindirect-branch-cs-prefix -mindirect-branch=thunk-extern\" } */\n+/* { dg-additional-options \"-fno-pic\" { target { ! *-*-darwin* } } } */\n+\n+extern void (*bar) (void);\n+\n+int\n+foo (void)\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"call\\[ \\t\\]+_?__x86_indirect_thunk_r\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tcs\" 1 } } */"}]}