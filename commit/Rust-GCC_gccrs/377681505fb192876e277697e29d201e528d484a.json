{"sha": "377681505fb192876e277697e29d201e528d484a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc3NjgxNTA1ZmIxOTI4NzZlMjc3Njk3ZTI5ZDIwMWU1MjhkNDg0YQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-10T00:16:28Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-10T00:16:28Z"}, "message": "Daily bump.", "tree": {"sha": "7d1f8146cf64884c8e56e9ba92977a96059e881d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d1f8146cf64884c8e56e9ba92977a96059e881d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/377681505fb192876e277697e29d201e528d484a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/377681505fb192876e277697e29d201e528d484a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/377681505fb192876e277697e29d201e528d484a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/377681505fb192876e277697e29d201e528d484a/comments", "author": null, "committer": null, "parents": [{"sha": "c86c95edd165d674614516cda0b1fcb6616c1096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c86c95edd165d674614516cda0b1fcb6616c1096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c86c95edd165d674614516cda0b1fcb6616c1096"}], "stats": {"total": 242, "additions": 241, "deletions": 1}, "files": [{"sha": "bd56aa25dc089cfc25dacaf9440213fadb053319", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377681505fb192876e277697e29d201e528d484a/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377681505fb192876e277697e29d201e528d484a/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=377681505fb192876e277697e29d201e528d484a", "patch": "@@ -1,3 +1,7 @@\n+2021-08-09  Hongyu Wang  <hongyu.wang@intel.com>\n+\n+\t* MAINTAINERS (Write After Approval): Add myself.\n+\n 2021-07-20  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* .dir-locals.el (bug-reference-url-format): Use https."}, {"sha": "e2ffd847cdb821c8fc00c41ef47d0ce1e8cfc9fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377681505fb192876e277697e29d201e528d484a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377681505fb192876e277697e29d201e528d484a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=377681505fb192876e277697e29d201e528d484a", "patch": "@@ -1,3 +1,126 @@\n+2021-08-09  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/101741\n+\t* gimple-range-fold.cc (fold_using_range::range_of_builtin_call): Check\n+\ttype of parameter for toupper/tolower.\n+\n+2021-08-09  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR testsuite/101654\n+\t* ipa-prop.c (propagate_controlled_uses): Removed a spurious space.\n+\n+2021-08-09  Pat Haugen  <pthaugen@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (is_load_insn1): Verify destination is a\n+\tregister.\n+\t(is_store_insn1): Verify source is a register.\n+\n+2021-08-09  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/101812\n+\t* config/i386/mmx.md (<any_logic:code>v2sf3):\n+\tRename from *mmx_<any_logic:code>v2sf3\n+\n+2021-08-09  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* config/nvptx/nvptx.c: Cross-reference parts adapted in\n+\t'gcc/omp-oacc-neuter-broadcast.cc'.\n+\t* omp-low.c: Likewise.\n+\t* omp-oacc-neuter-broadcast.cc: Cross-reference parts adapted from\n+\tthe above files.\n+\n+2021-08-09  Julian Brown  <julian@codesourcery.com>\n+\t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* config/gcn/gcn.c (gcn_init_builtins): Override decls for\n+\tBUILT_IN_GOACC_SINGLE_START, BUILT_IN_GOACC_SINGLE_COPY_START,\n+\tBUILT_IN_GOACC_SINGLE_COPY_END and BUILT_IN_GOACC_BARRIER.\n+\t(gcn_goacc_validate_dims): Turn on worker partitioning unconditionally.\n+\t(gcn_fork_join): Update comment.\n+\t* config/gcn/gcn.opt (flag_worker_partitioning): Remove.\n+\t(macc_experimental_workers): Remove unused option.\n+\n+2021-08-09  Julian Brown  <julian@codesourcery.com>\n+\t    Nathan Sidwell  <nathan@codesourcery.com> (via 'gcc/config/nvptx/nvptx.c' master)\n+\t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* Makefile.in (OBJS): Add omp-oacc-neuter-broadcast.o.\n+\t* doc/tm.texi.in (TARGET_GOACC_CREATE_WORKER_BROADCAST_RECORD):\n+\tAdd documentation hook.\n+\t* doc/tm.texi: Regenerate.\n+\t* omp-oacc-neuter-broadcast.cc: New file.\n+\t* omp-builtins.def (BUILT_IN_GOACC_BARRIER)\n+\t(BUILT_IN_GOACC_SINGLE_START, BUILT_IN_GOACC_SINGLE_COPY_START)\n+\t(BUILT_IN_GOACC_SINGLE_COPY_END): New builtins.\n+\t* passes.def (pass_omp_oacc_neuter_broadcast): Add pass.\n+\t* target.def (goacc.create_worker_broadcast_record): Add target\n+\thook.\n+\t* tree-pass.h (make_pass_omp_oacc_neuter_broadcast): Add\n+\tprototype.\n+\t* config/gcn/gcn-protos.h (gcn_goacc_adjust_propagation_record):\n+\tRename prototype to...\n+\t(gcn_goacc_create_worker_broadcast_record): ... this.\n+\t* config/gcn/gcn-tree.c (gcn_goacc_adjust_propagation_record): Rename\n+\tfunction to...\n+\t(gcn_goacc_create_worker_broadcast_record): ... this.\n+\t* config/gcn/gcn.c (TARGET_GOACC_ADJUST_PROPAGATION_RECORD):\n+\tRename to...\n+\t(TARGET_GOACC_CREATE_WORKER_BROADCAST_RECORD): ... this.\n+\n+2021-08-09  Tejas Belagod  <tejas.belagod@arm.com>\n+\n+\tPR target/101609\n+\t* config/aarch64/aarch64-simd.md (vlshr<mode>3, vashr<mode>3): Use\n+\tthe right iterator.\n+\n+2021-08-09  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* Makefile.in (GTFILES): Remove '$(srcdir)/omp-offload.c'.\n+\n+2021-08-09  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* builtins.def (DEF_GOACC_BUILTIN, DEF_GOMP_BUILTIN): Don't\n+\tconsider '-foffload-abi'.\n+\t* common.opt (-foffload-abi): Remove 'Var', 'Init'.\n+\t* opts.c (common_handle_option) <-foffload-abi> [ACCEL_COMPILER]:\n+\tIgnore.\n+\n+2021-08-09  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* optc-gen.awk: Sanity check that 'Init' doesn't appear without\n+\t'Var'.\n+\n+2021-08-09  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* omp-builtins.def (BUILT_IN_ACC_GET_DEVICE_TYPE): Remove.\n+\n+2021-08-09  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* doc/gty.texi (Files): Update.\n+\n+2021-08-09  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* doc/gty.texi (Files): Fix GTY header file example.\n+\n+2021-08-09  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* tree-ssa-ccp.c (value_mask_to_min_max): Helper function to\n+\tdetermine the upper and lower bounds from a mask-value pair.\n+\t(bit_value_unop) [ABS_EXPR, ABSU_EXPR]: Add support for\n+\tabsolute value and unsigned absolute value expressions.\n+\t(bit_value_binop):  Initialize *VAL's precision.\n+\t[LT_EXPR, LE_EXPR]: Use value_mask_to_min_max to determine\n+\tupper and lower bounds of operands.  Add LE_EXPR/GE_EXPR\n+\tsupport when the operands are unknown but potentially equal.\n+\t[MIN_EXPR, MAX_EXPR]: Support minimum/maximum expressions.\n+\n+2021-08-09  Bin Cheng  <bin.cheng@linux.alibaba.com>\n+\n+\t* config/aarch64/aarch64.md\n+\t(*extend<SHORT:mode><GPI:mode>2_aarch64): Use %<GPI:w>0.\n+\n 2021-08-08  Sergei Trofimovich  <siarheit@google.com>\n \n \t* lra-constraints.c: Fix s/otput/output/ typo."}, {"sha": "7eb9baf7c6b1a62dbe0747e91ce89ac0c08e0aac", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377681505fb192876e277697e29d201e528d484a/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377681505fb192876e277697e29d201e528d484a/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=377681505fb192876e277697e29d201e528d484a", "patch": "@@ -1 +1 @@\n-20210809\n+20210810"}, {"sha": "d0d2584bc482aaebd8f0786dd026a2c793f1016e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377681505fb192876e277697e29d201e528d484a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377681505fb192876e277697e29d201e528d484a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=377681505fb192876e277697e29d201e528d484a", "patch": "@@ -1,3 +1,70 @@\n+2021-08-09  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr101741.c: New.\n+\n+2021-08-09  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR testsuite/101654\n+\t* gcc.dg/ipa/remref-6.c: Added missing -fdump-ipa-inline option.\n+\n+2021-08-09  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/101812\n+\t* gcc.target/i386/pr101812.c: New test.\n+\n+2021-08-09  Tejas Belagod  <tejas.belagod@arm.com>\n+\n+\t* gcc.target/aarch64/vect-shr-reg.c: New testcase.\n+\t* gcc.target/aarch64/vect-shr-reg-run.c: Likewise.\n+\n+2021-08-09  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.dg/pr68217.c: Add -fno-tree-ccp option.\n+\t* gcc.dg/tree-ssa/vrp24.c: Add -fno-tree-ccp option.\n+\t* g++.dg/ipa/pure-const-3.C: Add -fno-tree-ccp option.\n+\n+2021-08-09  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR libfortran/101305\n+\tPR fortran/101660\n+\t* lib/gfortran.exp (gfortran_init): Add -I $specdir/libgfortran to\n+\tGFORTRAN_UNDER_TEST; update it when set by previous gfortran_init call.\n+\t* gfortran.dg/ISO_Fortran_binding_1.c: Use <...> not \"...\" for\n+\tISO_Fortran_binding.h's #include.\n+\t* gfortran.dg/ISO_Fortran_binding_10.c: Likewise.\n+\t* gfortran.dg/ISO_Fortran_binding_11.c: Likewise.\n+\t* gfortran.dg/ISO_Fortran_binding_12.c: Likewise.\n+\t* gfortran.dg/ISO_Fortran_binding_15.c: Likewise.\n+\t* gfortran.dg/ISO_Fortran_binding_16.c: Likewise.\n+\t* gfortran.dg/ISO_Fortran_binding_17.c: Likewise.\n+\t* gfortran.dg/ISO_Fortran_binding_18.c: Likewise.\n+\t* gfortran.dg/ISO_Fortran_binding_3.c: Likewise.\n+\t* gfortran.dg/ISO_Fortran_binding_5.c: Likewise.\n+\t* gfortran.dg/ISO_Fortran_binding_6.c: Likewise.\n+\t* gfortran.dg/ISO_Fortran_binding_7.c: Likewise.\n+\t* gfortran.dg/ISO_Fortran_binding_8.c: Likewise.\n+\t* gfortran.dg/ISO_Fortran_binding_9.c: Likewise.\n+\t* gfortran.dg/PR94327.c: Likewise.\n+\t* gfortran.dg/PR94331.c: Likewise.\n+\t* gfortran.dg/bind_c_array_params_3_aux.c: Likewise.\n+\t* gfortran.dg/iso_fortran_binding_uint8_array_driver.c: Likewise.\n+\t* gfortran.dg/pr93524.c: Likewise.\n+\n+2021-08-09  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/sve/dup_lane_1.c: Don't split\n+\tscan-assembler tests over multiple lines. Expect 32-bit\n+\tresult values in 'w' registers.\n+\t* gcc.target/aarch64/sve/extract_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/extract_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/extract_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/extract_4.c: Likewise.\n+\n+2021-08-09  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/vector_structure_intrinsics.c: Restrict\n+\ttests to little-endian targets.\n+\n 2021-08-08  Jeff Law  <jlaw@localhost.localdomain>\n \n \t* gcc.target/tic6x/rotdi16-scan.c: Pull rotate into its own function."}, {"sha": "0da28e733dd5ba253cc99e2b35af2885dcd1049a", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377681505fb192876e277697e29d201e528d484a/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377681505fb192876e277697e29d201e528d484a/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=377681505fb192876e277697e29d201e528d484a", "patch": "@@ -1,3 +1,21 @@\n+2021-08-09  Julian Brown  <julian@codesourcery.com>\n+\t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* plugin/plugin-gcn.c (gcn_exec): Change default number of workers to\n+\t16.\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_prof-kernels-1.c\n+\t[acc_device_radeon]: Update.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-dim-default.c\n+\t[ACC_DEVICE_TYPE_radeon]: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/parallel-dims.c\n+\t[acc_device_radeon]: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-wv-2.c\n+\t[ACC_DEVICE_TYPE_radeon]: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/optional-reduction.f90: XFAIL for\n+\t'openacc_radeon_accel_selected' and '-O0'.\n+\t* testsuite/libgomp.oacc-fortran/reduction-7.f90: Likewise.\n+\n 2021-08-05  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* icv-device.c (omp_get_device_num): New API function, host side."}, {"sha": "e735ff0ae5852ea61c068492ce7dd43b54465985", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377681505fb192876e277697e29d201e528d484a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377681505fb192876e277697e29d201e528d484a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=377681505fb192876e277697e29d201e528d484a", "patch": "@@ -1,3 +1,31 @@\n+2021-08-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/regex.h (basic_regex::transform_primary): Use\n+\t_GLIBCXX_STD_C::vector for local variable.\n+\t* include/bits/regex.tcc (__regex_algo_impl): Use reference to\n+\t_GLIBCXX_STD_C::vector base class of match_results.\n+\t* include/bits/regex_automaton.tcc (_StateSeq:_M_clone): Use\n+\t_GLIBCXX_STD_C::map and _GLIBCXX_STD_C::deque for local\n+\tvariables.\n+\t* include/bits/regex_compiler.h (_BracketMatcher): Use\n+\t_GLIBCXX_STD_C::vector for data members.\n+\t* include/bits/regex_executor.h (_Executor): Likewise.\n+\t* include/std/regex [_GLIBCXX_DEBUG]: Include <debug/vector>.\n+\n+2021-08-09  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/safe_container.h\n+\t(_Safe_container(_Safe_container&&, const _Alloc&, std::true_type)): New.\n+\t(_Safe_container(_Safe_container&&, const _Alloc&, std::false_type)): New.\n+\t(_Safe_container(_Safe_container&&, const _Alloc&)): Use latters.\n+\n+2021-08-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/23_containers/unordered_map/cons/default.cc: Add\n+\tequality comparison operators to allocator.\n+\t* testsuite/23_containers/unordered_set/cons/default.cc:\n+\tLikewise.\n+\n 2021-08-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* testsuite/25_algorithms/copy/debug/constexpr_neg.cc: Replace 'failed_assertion'"}]}