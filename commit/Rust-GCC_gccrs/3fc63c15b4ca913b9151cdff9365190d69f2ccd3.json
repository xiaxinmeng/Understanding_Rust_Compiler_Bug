{"sha": "3fc63c15b4ca913b9151cdff9365190d69f2ccd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZjNjNjMTViNGNhOTEzYjkxNTFjZGZmOTM2NTE5MGQ2OWYyY2NkMw==", "commit": {"author": {"name": "Jerry Quinn", "email": "jlquinn@optonline.net", "date": "2003-12-16T01:57:03Z"}, "committer": {"name": "Jerry Quinn", "email": "jlquinn@gcc.gnu.org", "date": "2003-12-16T01:57:03Z"}, "message": "ctype_noninline.h, [...] (ctype): Initialize _M_narrow, _M_widen.\n\n2003-12-15  Jerry Quinn  <jlquinn@optonline.net>\n\n        * config/os/aix/ctype_noninline.h,\n\tconfig/os/bsd/freebsd/ctype_noninline.h,\n\tconfig/os/bsd/netbsd/ctype_noninline.h,\n\tconfig/os/djgpp/ctype_noninline.h,\n\tconfig/os/generic/ctype_noninline.h,\n\tconfig/os/gnu-linux/ctype_noninline.h,\n\tconfig/os/hpux/ctype_noninline.h,\n\tconfig/os/irix/irix5.2/ctype_noninline.h,\n\tconfig/os/irix/irix6.5/ctype_noninline.h,\n\tconfig/os/mingw32/ctype_noninline.h,\n\tconfig/os/newlib/ctype_noninline.h,\n\tconfig/os/qnx/qnx6.1/ctype_noninline.h,\n\tconfig/os/solaris/solaris2.5/ctype_noninline.h,\n\tconfig/os/solaris/solaris2.6/ctype_noninline.h,\n\tconfig/os/solaris/solaris2.7/ctype_noninline.h,\n\tconfig/os/vxworks/ctype_noninline.h,\n\tconfig/os/windiss/ctype_noninline.h (ctype):  Initialize\n\t_M_narrow, _M_widen.\n\t* include/bits/locale_facets.h (_M_widen, _M_widen_ok,\n\t_M_narrow, _M_narrow_ok): New.\n\t(widen, narrow): Use tables to bypass virtual functions.\n\t(_M_widen_init, _M_narrow_init): New.\n\nFrom-SVN: r74662", "tree": {"sha": "f9ce8581f383fb69f8271f0102d80fff950d1184", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9ce8581f383fb69f8271f0102d80fff950d1184"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fc63c15b4ca913b9151cdff9365190d69f2ccd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc63c15b4ca913b9151cdff9365190d69f2ccd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fc63c15b4ca913b9151cdff9365190d69f2ccd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/comments", "author": {"login": "jlquinn", "id": 826841, "node_id": "MDQ6VXNlcjgyNjg0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/826841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlquinn", "html_url": "https://github.com/jlquinn", "followers_url": "https://api.github.com/users/jlquinn/followers", "following_url": "https://api.github.com/users/jlquinn/following{/other_user}", "gists_url": "https://api.github.com/users/jlquinn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlquinn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlquinn/subscriptions", "organizations_url": "https://api.github.com/users/jlquinn/orgs", "repos_url": "https://api.github.com/users/jlquinn/repos", "events_url": "https://api.github.com/users/jlquinn/events{/privacy}", "received_events_url": "https://api.github.com/users/jlquinn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "21eb631b826dd6512cc47013a990a471cdcc1008", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21eb631b826dd6512cc47013a990a471cdcc1008", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21eb631b826dd6512cc47013a990a471cdcc1008"}], "stats": {"total": 428, "additions": 392, "deletions": 36}, "files": [{"sha": "853f86afca51c55394ee1b594ad43f96f08b1e73", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3fc63c15b4ca913b9151cdff9365190d69f2ccd3", "patch": "@@ -1,3 +1,28 @@\n+2003-12-15  Jerry Quinn  <jlquinn@optonline.net>\n+\n+        * config/os/aix/ctype_noninline.h,\n+\tconfig/os/bsd/freebsd/ctype_noninline.h,\n+\tconfig/os/bsd/netbsd/ctype_noninline.h,\n+\tconfig/os/djgpp/ctype_noninline.h,\n+\tconfig/os/generic/ctype_noninline.h,\n+\tconfig/os/gnu-linux/ctype_noninline.h,\n+\tconfig/os/hpux/ctype_noninline.h,\n+\tconfig/os/irix/irix5.2/ctype_noninline.h,\n+\tconfig/os/irix/irix6.5/ctype_noninline.h,\n+\tconfig/os/mingw32/ctype_noninline.h,\n+\tconfig/os/newlib/ctype_noninline.h,\n+\tconfig/os/qnx/qnx6.1/ctype_noninline.h,\n+\tconfig/os/solaris/solaris2.5/ctype_noninline.h,\n+\tconfig/os/solaris/solaris2.6/ctype_noninline.h,\n+\tconfig/os/solaris/solaris2.7/ctype_noninline.h,\n+\tconfig/os/vxworks/ctype_noninline.h,\n+\tconfig/os/windiss/ctype_noninline.h (ctype):  Initialize\n+\t_M_narrow, _M_widen.\n+\t* include/bits/locale_facets.h (_M_widen, _M_widen_ok,\n+\t_M_narrow, _M_narrow_ok): New.\n+\t(widen, narrow): Use tables to bypass virtual functions.\n+\t(_M_widen_init, _M_narrow_init): New.\n+\n 2003-12-15  Carlo Wood  <carlo@alinoe.com>\n \n \t* include/bits/ios_base.h (Init::_S_initialized): Change into"}, {"sha": "edd8d82f3f6176ce4829478ea354e53d3f218d3c", "filename": "libstdc++-v3/config/os/aix/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fctype_noninline.h?ref=3fc63c15b4ca913b9151cdff9365190d69f2ccd3", "patch": "@@ -42,13 +42,23 @@\n   : facet(__refs), _M_del(__table != 0 && __del),\n   _M_toupper(NULL), _M_tolower(NULL),\n   _M_table(__table ? __table : classic_table())\n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n   : facet(__refs), _M_del(__table != 0 && __del),\n   _M_toupper(NULL), _M_tolower(NULL),\n   _M_table(__table ? __table : classic_table())\n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "ec5b5753547ac2afcbfbbb12970fed7a9577554a", "filename": "libstdc++-v3/config/os/bsd/freebsd/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fctype_noninline.h?ref=3fc63c15b4ca913b9151cdff9365190d69f2ccd3", "patch": "@@ -42,13 +42,23 @@\n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : classic_table()) \n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : classic_table()) \n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "70bf41c22e10427ebe1878656a7f1ac5432519c0", "filename": "libstdc++-v3/config/os/bsd/netbsd/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fnetbsd%2Fctype_noninline.h?ref=3fc63c15b4ca913b9151cdff9365190d69f2ccd3", "patch": "@@ -44,13 +44,23 @@\n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : classic_table())\n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : classic_table())\n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "eda2679ed3c15a217baffdb1f9d8a2a5e72e421f", "filename": "libstdc++-v3/config/os/djgpp/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fdjgpp%2Fctype_noninline.h?ref=3fc63c15b4ca913b9151cdff9365190d69f2ccd3", "patch": "@@ -42,13 +42,23 @@\n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(__dj_ctype_toupper), _M_tolower(__dj_ctype_tolower),\n   _M_table(__table ? __table : __dj_ctype_flags)  \n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(__dj_ctype_toupper), _M_tolower(__dj_ctype_tolower),\n   _M_table(__table ? __table : __dj_ctype_flags)  \n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "e30348e605807bb76a0f7c2c05cd128caa77df90", "filename": "libstdc++-v3/config/os/generic/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fctype_noninline.h?ref=3fc63c15b4ca913b9151cdff9365190d69f2ccd3", "patch": "@@ -43,13 +43,23 @@\n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : classic_table()) \n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : classic_table())\n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "ae4c14d5d589acfe6bc763950fb396896ee06168", "filename": "libstdc++-v3/config/os/gnu-linux/ctype_noninline.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h?ref=3fc63c15b4ca913b9151cdff9365190d69f2ccd3", "patch": "@@ -65,6 +65,10 @@\n     _M_toupper = _M_c_locale_ctype->__ctype_toupper;\n     _M_tolower = _M_c_locale_ctype->__ctype_tolower;\n     _M_table = __table ? __table : _M_c_locale_ctype->__ctype_b;\n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n   }\n #else\n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n@@ -85,6 +89,10 @@\n     setlocale(LC_CTYPE, __old);\n     free(__old);\n     _M_c_locale_ctype = _S_get_c_locale();\n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n   }\n #endif\n \n@@ -96,6 +104,10 @@\n     _M_toupper = _M_c_locale_ctype->__ctype_toupper;\n     _M_tolower = _M_c_locale_ctype->__ctype_tolower;\n     _M_table = __table ? __table : _M_c_locale_ctype->__ctype_b;\n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n   }\n #else\n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n@@ -115,6 +127,10 @@\n     setlocale(LC_CTYPE, __old);\n     free(__old);\n     _M_c_locale_ctype = _S_get_c_locale();\n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n   }\n #endif\n "}, {"sha": "00e338b6e0645fc01a412fe5dfff80e1edfb46ff", "filename": "libstdc++-v3/config/os/hpux/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fctype_noninline.h?ref=3fc63c15b4ca913b9151cdff9365190d69f2ccd3", "patch": "@@ -43,13 +43,23 @@\n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : (const mask *) __SB_masks) \n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : (const mask *) __SB_masks) \n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "2aeb50c658b138e970f42d4d3aff9815da70c0b2", "filename": "libstdc++-v3/config/os/irix/irix5.2/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix5.2%2Fctype_noninline.h?ref=3fc63c15b4ca913b9151cdff9365190d69f2ccd3", "patch": "@@ -43,13 +43,23 @@\n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(!__table ? classic_table() : __table)\n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(!__table ? classic_table() : __table)\n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "8fdf95ef7a9f564ad5afa2430b190e985865ec46", "filename": "libstdc++-v3/config/os/irix/irix6.5/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Firix6.5%2Fctype_noninline.h?ref=3fc63c15b4ca913b9151cdff9365190d69f2ccd3", "patch": "@@ -43,14 +43,24 @@\n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(!__table ? \n \t   (const mask*) (__libc_attr._ctype_tbl->_class + 1) : __table) \n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(!__table ? \n \t   (const mask*) (__libc_attr._ctype_tbl->_class + 1) : __table) \n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "e493d403030a0f49ec79225af72b4ee47b387de3", "filename": "libstdc++-v3/config/os/mingw32/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fmingw32%2Fctype_noninline.h?ref=3fc63c15b4ca913b9151cdff9365190d69f2ccd3", "patch": "@@ -46,13 +46,23 @@\n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL),\n   _M_table(__table ? __table : classic_table())  \n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL),\n   _M_table(__table ? __table : classic_table()) \n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "d0cce941b4c711dbd181c46c54b790379fe528c4", "filename": "libstdc++-v3/config/os/newlib/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_noninline.h?ref=3fc63c15b4ca913b9151cdff9365190d69f2ccd3", "patch": "@@ -42,13 +42,23 @@\n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : classic_table()) \n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : classic_table()) \n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "2eef13a7e6573b0801676de375622fb58d5d6413", "filename": "libstdc++-v3/config/os/qnx/qnx6.1/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fqnx%2Fqnx6.1%2Fctype_noninline.h?ref=3fc63c15b4ca913b9151cdff9365190d69f2ccd3", "patch": "@@ -41,12 +41,22 @@\n \t\t     size_t __refs) \n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), _M_table(__table ? __table : _Ctype)\n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), _M_table(__table ? __table : _Ctype)\n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "a80863653ffb41d5f3a45ff1546557f205dd92d1", "filename": "libstdc++-v3/config/os/solaris/solaris2.5/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fctype_noninline.h?ref=3fc63c15b4ca913b9151cdff9365190d69f2ccd3", "patch": "@@ -42,13 +42,23 @@\n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : classic_table()) \n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : classic_table()) \n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "694901a5dc7b220957c9813d82484cbc097505bd", "filename": "libstdc++-v3/config/os/solaris/solaris2.6/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fctype_noninline.h?ref=3fc63c15b4ca913b9151cdff9365190d69f2ccd3", "patch": "@@ -42,13 +42,23 @@\n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(__trans_upper), _M_tolower(__trans_lower), \n   _M_table(__table ? __table : classic_table()) \n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(__trans_upper), _M_tolower(__trans_lower), \n   _M_table(__table ? __table : classic_table()) \n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "d4917f069cbc7b37cdf30e32850404ab831aa428", "filename": "libstdc++-v3/config/os/solaris/solaris2.7/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fctype_noninline.h?ref=3fc63c15b4ca913b9151cdff9365190d69f2ccd3", "patch": "@@ -43,13 +43,23 @@\n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(__trans_upper), _M_tolower(__trans_lower),\n   _M_table(__table ? __table : classic_table()) \n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(__trans_upper), _M_tolower(__trans_lower),\n   _M_table(__table ? __table : classic_table()) \n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "acf91a4aa55db061ae1bd526ff5b33220f577a46", "filename": "libstdc++-v3/config/os/vxworks/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_noninline.h?ref=3fc63c15b4ca913b9151cdff9365190d69f2ccd3", "patch": "@@ -42,13 +42,23 @@\n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : classic_table()) \n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table ? __table : classic_table())\n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "cf75ddfd96ca19694ae2fc6106624345a38e58a7", "filename": "libstdc++-v3/config/os/windiss/ctype_noninline.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fwindiss%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fwindiss%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fwindiss%2Fctype_noninline.h?ref=3fc63c15b4ca913b9151cdff9365190d69f2ccd3", "patch": "@@ -43,13 +43,23 @@\n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table == 0 ? classic_table() : __table) \n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n   : facet(__refs), _M_del(__table != 0 && __del), \n   _M_toupper(NULL), _M_tolower(NULL), \n   _M_table(__table == 0 ? classic_table() : __table) \n-  { }\n+  { \n+    memset(_M_widen, 0, sizeof(_M_widen));\n+    _M_widen_ok = 0;\n+    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    _M_narrow_ok = 0;\n+  }\n \n   char\n   ctype<char>::do_toupper(char __c) const"}, {"sha": "08cd2960e18f913edd1eb5c443cbeb894e6fd515", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 83, "deletions": 4, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=3fc63c15b4ca913b9151cdff9365190d69f2ccd3", "patch": "@@ -325,6 +325,11 @@ namespace std\n       __to_type \t       \t_M_toupper;\n       __to_type  \t       \t_M_tolower;\n       const mask*              \t_M_table;\n+      mutable char\t\t_M_widen_ok;\n+      mutable char\t\t_M_widen[1 + static_cast<unsigned char>(-1)];\n+      mutable char\t\t_M_narrow[1 + static_cast<unsigned char>(-1)];\n+      mutable char\t\t_M_narrow_ok;\t// 0 uninitialized, 1 init,\n+\t\t\t\t\t\t// 2 non-consecutive\n       \n     public:\n       static locale::id        id;\n@@ -367,20 +372,46 @@ namespace std\n \n       char_type \n       widen(char __c) const\n-      { return this->do_widen(__c); }\n+      { \n+// \tif (_M_widen_ok) return _M_widen[__c];\n+// \tthis->_M_widen_init();\n+\treturn this->do_widen(__c);\n+      }\n \n       const char*\n       widen(const char* __lo, const char* __hi, char_type* __to) const\n-      { return this->do_widen(__lo, __hi, __to); }\n+      {\n+// \tif (_M_widen_ok == 1)\n+// \t  {\n+// \t    memcpy(__to, __lo, __hi - __lo);\n+// \t    return __hi;\n+// \t  }\n+// \tif (!_M_widen_ok) _M_widen_init();\n+\treturn this->do_widen(__lo, __hi, __to);\n+      }\n \n       char \n       narrow(char_type __c, char __dfault) const\n-      { return this->do_narrow(__c, __dfault); }\n+      {\n+// \tif (_M_narrow[__c]) return _M_narrow[__c];\n+\tchar __t = do_narrow(__c, __dfault);\n+// \tif (__t != __dfault) _M_narrow[__c] = __t;\n+\treturn __t;\n+      }\n \n       const char_type*\n       narrow(const char_type* __lo, const char_type* __hi,\n \t      char __dfault, char *__to) const\n-      { return this->do_narrow(__lo, __hi, __dfault, __to); }\n+      {\n+// \tif (__builtin_expect(_M_narrow_ok==1,true))\n+// \t  {\n+// \t    memcpy(__to, __lo, __hi - __lo);\n+// \t    return __hi;\n+// \t  }\n+// \tif (!_M_narrow_ok)\n+// \t  _M_narrow_init();\n+\treturn this->do_narrow(__lo, __hi, __dfault, __to);\n+      }\n \n     protected:\n       const mask* \n@@ -427,6 +458,54 @@ namespace std\n \tmemcpy(__dest, __lo, __hi - __lo);\n \treturn __hi;\n       }\n+\n+    private:\n+\n+      void _M_widen_init() const\n+      {\n+\tchar __tmp[sizeof(_M_widen)];\n+\tfor (unsigned __i = 0; __i < sizeof(_M_widen); ++__i)\n+\t  __tmp[__i] = __i;\n+\tdo_widen(__tmp, __tmp + sizeof(__tmp), _M_widen);\n+\t    \n+\t_M_widen_ok = 1;\n+\t// Set _M_widen_ok to 2 if memcpy can't be used.\n+\tfor (unsigned __i = 0; __i < sizeof(_M_widen); ++__i)\n+\t  if (__tmp[__i] != _M_widen[__i])\n+\t    {\n+\t      _M_widen_ok = 2;\n+\t      break;\n+\t    }\n+      }\n+\n+      // Fill in the narrowing cache and flag whether all values are\n+      // valid or not.  _M_narrow_ok is set to 1 if the whole table is\n+      // narrowed, 2 if only some values could be narrowed.\n+      void _M_narrow_init() const\n+      {\n+\tchar __tmp[sizeof(_M_narrow)];\n+\tfor (unsigned i = 0; i < sizeof(_M_narrow); ++i)\n+\t  __tmp[i] = i;\n+\tdo_narrow(__tmp, __tmp + sizeof(__tmp), 0, _M_narrow);\n+\n+\t// Check if any default values were created.  Do this by\n+\t// renarrowing with a different default value and comparing.\n+\tbool __consecutive = true;\n+\tfor (unsigned __i = 0; __i < sizeof(_M_narrow); ++__i)\n+\t  {\n+\t    char __c[1];\n+\t    if (!_M_narrow[__i])\n+\t      {\n+\t\tdo_narrow(__tmp + __i, __tmp + __i + 1, 1, __c);\n+\t\tif (__c[0] == 1)\n+\t\t  {\n+\t\t    __consecutive = false;\n+\t\t    break;\n+\t\t  }\n+\t      }\n+\t  }\n+\t_M_narrow_ok = __consecutive ? 1 : 2;\n+      }\n     };\n  \n   template<>"}, {"sha": "d4dd658df591caedcfa75df48842a16918036a86", "filename": "libstdc++-v3/testsuite/performance/narrow_widen_char.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fnarrow_widen_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc63c15b4ca913b9151cdff9365190d69f2ccd3/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fnarrow_widen_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fnarrow_widen_char.cc?ref=3fc63c15b4ca913b9151cdff9365190d69f2ccd3", "patch": "@@ -0,0 +1,76 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <locale>\n+#include <testsuite_performance.h>\n+\n+int main()\n+{\n+  using namespace std;\n+  using namespace __gnu_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+  const long iters = 200000000;\n+  char bufin[] = \"This was an attempt to bypass string construction just for test.\";\n+  char bufout[sizeof(bufin) + 1];\n+\n+  locale loc;\n+  const ctype<char>& ct = use_facet<ctype<char> >(loc);\n+\n+  // narrow\n+  start_counters(time, resource);\n+  for (long i = 0; i < 1000000000; ++i)\n+    ct.narrow(i % 128, '*');\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"narrow\", time, resource);\n+  clear_counters(time, resource);\n+\n+  // narrow array\n+  start_counters(time, resource);\n+  for (long i = 0; i < 100000000; ++i)\n+    ct.narrow(bufin, bufin+sizeof(bufin), '*', bufout);\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"narrow_array\", time, resource);\n+  clear_counters(time, resource);\n+\n+  // widen\n+  start_counters(time, resource);\n+  for (long i = 0; i < iters; ++i)\n+    ct.widen(i % 128);\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"widen\", time, resource);\n+\n+  // widen array\n+  start_counters(time, resource);\n+  for (long i = 0; i < iters; ++i)\n+    ct.widen(bufin, bufin+sizeof(bufin), bufout);\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"widen_array\", time, resource);\n+\n+  return 0;\n+}"}]}