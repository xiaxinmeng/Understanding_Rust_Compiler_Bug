{"sha": "fabb00fcc59439d49025abb561b7411c53f34764", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFiYjAwZmNjNTk0MzlkNDkwMjVhYmI1NjFiNzQxMWM1M2YzNDc2NA==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@netcologne.de", "date": "2007-03-05T08:26:23Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2007-03-05T08:26:23Z"}, "message": "typeck2.c (readonly_error): Always emit a hard error.\n\n\t* typeck2.c (readonly_error): Always emit a hard error.\n\tRemove last argument.\n\t* cp-tree.h (readonly_error): Adjust prototype.\n\t* semantics.c (finish_asm_stmt): Adjust call to readonly_error.\n\t* typeck.c (build_unary_op): Likewise.\n\t(build_modify_expr): Likewise.\n\nFrom-SVN: r122541", "tree": {"sha": "000cc4c3d1a6185ba67d53ea6d7b0821022de992", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/000cc4c3d1a6185ba67d53ea6d7b0821022de992"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fabb00fcc59439d49025abb561b7411c53f34764", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fabb00fcc59439d49025abb561b7411c53f34764", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fabb00fcc59439d49025abb561b7411c53f34764", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fabb00fcc59439d49025abb561b7411c53f34764/comments", "author": null, "committer": null, "parents": [{"sha": "2881894e007f19b4e7585811b3f0f94f2832a42e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2881894e007f19b4e7585811b3f0f94f2832a42e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2881894e007f19b4e7585811b3f0f94f2832a42e"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "2db8d9cbb858b0160c97c88ee4e0463c7ff3e4af", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabb00fcc59439d49025abb561b7411c53f34764/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabb00fcc59439d49025abb561b7411c53f34764/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fabb00fcc59439d49025abb561b7411c53f34764", "patch": "@@ -1,3 +1,12 @@\n+2007-03-05  Volker Reichelt  <reichelt@netcologne.de>\n+\n+\t* typeck2.c (readonly_error): Always emit a hard error.\n+\tRemove last argument.\n+\t* cp-tree.h (readonly_error): Adjust prototype.\n+\t* semantics.c (finish_asm_stmt): Adjust call to readonly_error.\n+\t* typeck.c (build_unary_op): Likewise.\n+\t(build_modify_expr): Likewise.\n+\n 2007-03-04  Simon Martin  <simartin@users.sourceforge.net>\n \n \tPR c++/30895"}, {"sha": "95e278ce6540a33296bf7ffda61f98836f13a419", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabb00fcc59439d49025abb561b7411c53f34764/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabb00fcc59439d49025abb561b7411c53f34764/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fabb00fcc59439d49025abb561b7411c53f34764", "patch": "@@ -4602,7 +4602,7 @@ extern void cxx_incomplete_type_error\t\t(tree, tree);\n   (cxx_incomplete_type_diagnostic ((V), (T), 0))\n extern tree error_not_base_type\t\t\t(tree, tree);\n extern tree binfo_or_else\t\t\t(tree, tree);\n-extern void readonly_error\t\t\t(tree, const char *, int);\n+extern void readonly_error\t\t\t(tree, const char *);\n extern void complete_type_check_abstract\t(tree);\n extern int abstract_virtuals_error\t\t(tree, tree);\n "}, {"sha": "c21fd2cef9e7efd6a1d5fd8dcb6447820b733a32", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabb00fcc59439d49025abb561b7411c53f34764/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabb00fcc59439d49025abb561b7411c53f34764/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=fabb00fcc59439d49025abb561b7411c53f34764", "patch": "@@ -1246,7 +1246,7 @@ finish_asm_stmt (int volatile_p, tree string, tree output_operands,\n \t\t     effectively const.  */\n \t\t  || (CLASS_TYPE_P (TREE_TYPE (operand))\n \t\t      && C_TYPE_FIELDS_READONLY (TREE_TYPE (operand)))))\n-\t    readonly_error (operand, \"assignment (via 'asm' output)\", 0);\n+\t    readonly_error (operand, \"assignment (via 'asm' output)\");\n \n \t  constraint = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (t)));\n \t  oconstraints[i] = constraint;"}, {"sha": "404117ce0164302e79f1177cb8e2de08148bfd60", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabb00fcc59439d49025abb561b7411c53f34764/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabb00fcc59439d49025abb561b7411c53f34764/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=fabb00fcc59439d49025abb561b7411c53f34764", "patch": "@@ -4205,8 +4205,7 @@ build_unary_op (enum tree_code code, tree xarg, int noconvert)\n \t  || TREE_READONLY (arg))\n \treadonly_error (arg, ((code == PREINCREMENT_EXPR\n \t\t\t       || code == POSTINCREMENT_EXPR)\n-\t\t\t      ? \"increment\" : \"decrement\"),\n-\t\t\t0);\n+\t\t\t      ? \"increment\" : \"decrement\"));\n \n       {\n \ttree inc;\n@@ -5780,7 +5779,7 @@ build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs)\n \t     effectively const.  */\n \t  || (CLASS_TYPE_P (lhstype)\n \t      && C_TYPE_FIELDS_READONLY (lhstype))))\n-    readonly_error (lhs, \"assignment\", 0);\n+    readonly_error (lhs, \"assignment\");\n \n   /* If storing into a structure or union member, it has probably been\n      given type `int'.  Compute the type that would go with the actual"}, {"sha": "5f6cf0d35a5b994dff8fa5cb20cedadc6e7949e6", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabb00fcc59439d49025abb561b7411c53f34764/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabb00fcc59439d49025abb561b7411c53f34764/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=fabb00fcc59439d49025abb561b7411c53f34764", "patch": "@@ -68,28 +68,20 @@ binfo_or_else (tree base, tree type)\n }\n \n /* According to ARM $7.1.6, \"A `const' object may be initialized, but its\n-   value may not be changed thereafter.  Thus, we emit hard errors for these,\n-   rather than just pedwarns.  If `SOFT' is 1, then we just pedwarn.  (For\n-   example, conversions to references.)  */\n+   value may not be changed thereafter.  */\n \n void\n-readonly_error (tree arg, const char* string, int soft)\n+readonly_error (tree arg, const char* string)\n {\n   const char *fmt;\n-  void (*fn) (const char *, ...) ATTRIBUTE_GCC_CXXDIAG(1,2);\n-\n-  if (soft)\n-    fn = pedwarn;\n-  else\n-    fn = error;\n \n   if (TREE_CODE (arg) == COMPONENT_REF)\n     {\n       if (TYPE_READONLY (TREE_TYPE (TREE_OPERAND (arg, 0))))\n \tfmt = \"%s of data-member %qD in read-only structure\";\n       else\n \tfmt = \"%s of read-only data-member %qD\";\n-      (*fn) (fmt, string, TREE_OPERAND (arg, 1));\n+      error (fmt, string, TREE_OPERAND (arg, 1));\n     }\n   else if (TREE_CODE (arg) == VAR_DECL)\n     {\n@@ -99,21 +91,21 @@ readonly_error (tree arg, const char* string, int soft)\n \tfmt = \"%s of constant field %qD\";\n       else\n \tfmt = \"%s of read-only variable %qD\";\n-      (*fn) (fmt, string, arg);\n+      error (fmt, string, arg);\n     }\n   else if (TREE_CODE (arg) == PARM_DECL)\n-    (*fn) (\"%s of read-only parameter %qD\", string, arg);\n+    error (\"%s of read-only parameter %qD\", string, arg);\n   else if (TREE_CODE (arg) == INDIRECT_REF\n \t   && TREE_CODE (TREE_TYPE (TREE_OPERAND (arg, 0))) == REFERENCE_TYPE\n \t   && (TREE_CODE (TREE_OPERAND (arg, 0)) == VAR_DECL\n \t       || TREE_CODE (TREE_OPERAND (arg, 0)) == PARM_DECL))\n-    (*fn) (\"%s of read-only reference %qD\", string, TREE_OPERAND (arg, 0));\n+    error (\"%s of read-only reference %qD\", string, TREE_OPERAND (arg, 0));\n   else if (TREE_CODE (arg) == RESULT_DECL)\n-    (*fn) (\"%s of read-only named return value %qD\", string, arg);\n+    error (\"%s of read-only named return value %qD\", string, arg);\n   else if (TREE_CODE (arg) == FUNCTION_DECL)\n-    (*fn) (\"%s of function %qD\", string, arg);\n+    error (\"%s of function %qD\", string, arg);\n   else\n-    (*fn) (\"%s of read-only location\", string);\n+    error (\"%s of read-only location\", string);\n }\n \n \f"}]}