{"sha": "c6a38536f205e0723600d54bce3aaf05ec107161", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZhMzg1MzZmMjA1ZTA3MjM2MDBkNTRiY2UzYWFmMDVlYzEwNzE2MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-01-06T20:44:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-01-06T20:44:51Z"}, "message": "re PR c++/64455 (A constexpr variable template can't be used with enable_if)\n\n\tPR c++/64455\n\t* pt.c (type_dependent_expression_p): Handle variable templates.\n\t* constexpr.c (potential_constant_expression_1): Use it.\n\nFrom-SVN: r219268", "tree": {"sha": "9ed27cf87e9517222e7cafa154708e9602f9f7b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ed27cf87e9517222e7cafa154708e9602f9f7b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6a38536f205e0723600d54bce3aaf05ec107161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6a38536f205e0723600d54bce3aaf05ec107161", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6a38536f205e0723600d54bce3aaf05ec107161", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6a38536f205e0723600d54bce3aaf05ec107161/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b433d944ab6d308ea3f85c7537e64b99bc27bed5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b433d944ab6d308ea3f85c7537e64b99bc27bed5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b433d944ab6d308ea3f85c7537e64b99bc27bed5"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "e5e54eae6f068687dec5eb9dc23d0c19299eff39", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a38536f205e0723600d54bce3aaf05ec107161/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a38536f205e0723600d54bce3aaf05ec107161/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c6a38536f205e0723600d54bce3aaf05ec107161", "patch": "@@ -1,5 +1,9 @@\n 2015-01-06  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/64455\n+\t* pt.c (type_dependent_expression_p): Handle variable templates.\n+\t* constexpr.c (potential_constant_expression_1): Use it.\n+\n \tPR c++/64487\n \t* semantics.c (finish_offsetof): Handle templates here.\n \t* parser.c (cp_parser_builtin_offsetof): Not here."}, {"sha": "4da263e43679444d367758273afc2e2aace3c265", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a38536f205e0723600d54bce3aaf05ec107161/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a38536f205e0723600d54bce3aaf05ec107161/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=c6a38536f205e0723600d54bce3aaf05ec107161", "patch": "@@ -3882,7 +3882,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n \t      || !CP_TYPE_CONST_NON_VOLATILE_P (TREE_TYPE (t))\n \t      || !DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (t))\n \t  && !var_in_constexpr_fn (t)\n-\t  && !dependent_type_p (TREE_TYPE (t)))\n+\t  && !type_dependent_expression_p (t))\n         {\n           if (flags & tf_error)\n             non_const_var_error (t);"}, {"sha": "de2f6a4a33c070b1b64c8e9da6bba2a8fcafad05", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a38536f205e0723600d54bce3aaf05ec107161/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a38536f205e0723600d54bce3aaf05ec107161/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c6a38536f205e0723600d54bce3aaf05ec107161", "patch": "@@ -21369,6 +21369,14 @@ type_dependent_expression_p (tree expression)\n       && DECL_INITIAL (expression))\n    return true;\n \n+  /* A variable template specialization is type-dependent if it has any\n+     dependent template arguments.  */\n+  if (VAR_P (expression)\n+      && DECL_LANG_SPECIFIC (expression)\n+      && DECL_TEMPLATE_INFO (expression)\n+      && variable_template_p (DECL_TI_TEMPLATE (expression)))\n+    return any_dependent_template_arguments_p (DECL_TI_ARGS (expression));\n+\n   if (TREE_TYPE (expression) == unknown_type_node)\n     {\n       if (TREE_CODE (expression) == ADDR_EXPR)"}, {"sha": "a7b089958364c828dc588b29bc7314f5d54a5db4", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ21.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a38536f205e0723600d54bce3aaf05ec107161/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a38536f205e0723600d54bce3aaf05ec107161/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ21.C?ref=c6a38536f205e0723600d54bce3aaf05ec107161", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/64455\n+// { dg-do compile { target c++14 } }\n+\n+template<typename Type>\n+constexpr bool IsType = true;\n+\n+template <bool b, class T> struct Test\n+{\n+};\n+\n+template <class T>\n+struct Test<true, T>\n+{\n+        typedef T type;\n+};\n+\n+template<class T>\n+struct X {\n+    typedef typename Test<IsType<T>,T>::type type;\n+};\n+\n+int main()\n+{\n+   X<int>::type t;\n+}"}]}