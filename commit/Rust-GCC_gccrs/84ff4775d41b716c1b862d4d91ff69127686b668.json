{"sha": "84ff4775d41b716c1b862d4d91ff69127686b668", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRmZjQ3NzVkNDFiNzE2YzFiODYyZDRkOTFmZjY5MTI3Njg2YjY2OA==", "commit": {"author": {"name": "Le-Chun Wu", "email": "lcwu@google.com", "date": "2016-10-31T13:21:59Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2016-10-31T13:21:59Z"}, "message": "Add -Wshadow=global -Wshadow=local and -Wshadow=compatible-local.\n\nThis patch from Le-Chun Wu adds two new shadow warning flags for\nC and C++:\n\n  -Wshadow=local which warns if a local variable shadows another local\n  variable or parameter,\n\n  -Wshadow=compatible-local which warns if a local variable shadows\n  another local variable or parameter whose type is compatible with\n  that of the shadowing variable.\n\nIt is already on the google/main branch (Google ref 39127) and was\npreviously submitted by Diego Novillo and reviewed on\nhttp://codereview.appspot.com/4452058\n\nI addressed the review comments and made the following changes:\n- Add -Wshadow=global (the default alias for -Wshadow).\n- Make the documented options -Wshadow=global, -Wshadow=local\n  and -Wshadow=compatible-local (with hidden undocumented aliases\n  -Wshadow-local and -Wshadow-compatible-local for compatibility).\n- The -Wshadow=global, -Wshadow=local and -Wshadow=compatible-local\n  relationships are expressed in common.opt instead of in opts.c\n  and documented in invoke.texi.\n- The \"previous declaration\" warnings were turned into notes and use\n  the (now) existing infrastructure instead of duplicating the warnings.\n  The testcases have been adjusted to expect the notes.\n- The conditional change in name-lookup.c for non-locals (where we\n  don't want to change the warnings, but just check the global ones)\n  has been dropped.\n- Use warning_at in c-decl.c (warn_if_shadowing).\n\ngcc/ChangeLog:\n2016-10-30  Le-Chun Wu  <lcwu@google.com>\n            Mark Wielaard  <mjw@redhat.com>\n\n       * doc/invoke.texi: Document Wshadow-local and Wshadow-compatible-local.\n       * common.opt (Wshadow=global): New option. Default for -Wshadow.\n       (Wshadow=local): New option.\n       (Wshadow-local): Hidden alias for -Wshadow=local.\n       (Wshadow=compatible-local): New option.\n       (Wshadow-compatible-local): Hidden alias for\n       -Wshadow=compatible-local.\n       * doc/invoke.texi: Document Wshadow=global, Wshadow=local and\n       Wshadow=compatible-local.\n\ngcc/c/ChangeLog:\n2016-10-30  Le-Chun Wu  <lcwu@google.com>\n            Mark Wielaard  <mjw@redhat.com>\n\n       * c-decl.c (warn_if_shadowing): Use the warning code corresponding\n       to the given -Wshadow= variant. Use warning_at.\n\ngcc/cp/ChangeLog:\n2016-10-30  Le-Chun Wu  <lcwu@google.com>\n            Mark Wielaard  <mjw@redhat.com>\n\n       * name-lookup.c (pushdecl_maybe_friend): When emitting a\n       shadowing warning, use the code corresponding to the\n       given -Wshadow= variant.\n\ngcc/testsuite/ChangeLog\n2016-10-30  Le-Chun Wu  <lcwu@google.com>\n            Mark Wielaard  <mjw@redhat.com>\n\n       * gcc.dg/Wshadow-compatible-local-1.c: New test.\n       * gcc.dg/Wshadow-local-1.c: Likewise.\n       * gcc.dg/Wshadow-local-2.c: Likewise.\n       * g++.dg/warn/Wshadow-compatible-local-1.C: Likewise.\n       * g++.dg/warn/Wshadow-local-1.C: Likewise.\n       * g++.dg/warn/Wshadow-local-2.C: Likewise.\n\nCo-Authored-By: Mark Wielaard <mjw@redhat.com>\n\nFrom-SVN: r241699", "tree": {"sha": "37de03a0d419a258e63aa73193cee37e6d221b31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37de03a0d419a258e63aa73193cee37e6d221b31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84ff4775d41b716c1b862d4d91ff69127686b668", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84ff4775d41b716c1b862d4d91ff69127686b668", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84ff4775d41b716c1b862d4d91ff69127686b668", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84ff4775d41b716c1b862d4d91ff69127686b668/comments", "author": null, "committer": null, "parents": [{"sha": "651795857809d5e504aa577c3912b98f4feaf397", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/651795857809d5e504aa577c3912b98f4feaf397", "html_url": "https://github.com/Rust-GCC/gccrs/commit/651795857809d5e504aa577c3912b98f4feaf397"}], "stats": {"total": 450, "additions": 439, "deletions": 11}, "files": [{"sha": "7905d955cfe352af032fada315650220cab615b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84ff4775d41b716c1b862d4d91ff69127686b668", "patch": "@@ -1,3 +1,15 @@\n+2016-09-11  Le-Chun Wu  <lcwu@google.com>\n+\t    Mark Wielaard  <mjw@redhat.com>\n+\n+\t* common.opt (Wshadow=global): New option. Default for -Wshadow.\n+\t(Wshadow=local): New option.\n+\t(Wshadow-local): Hidden alias for -Wshadow=local.\n+\t(Wshadow=compatible-local): New option.\n+\t(Wshadow-compatible-local): Hidden alias for\n+\t-Wshadow=compatible-local.\n+\t* doc/invoke.texi: Document Wshadow=global, Wshadow=local and\n+\tWshadow=compatible-local.\n+\n 2016-10-31  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-vect-slp.c (vect_get_and_check_slp_defs): New parameter SWAP."}, {"sha": "ee50c304b5f6dc361c3d623df79e19a7f01eb161", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=84ff4775d41b716c1b862d4d91ff69127686b668", "patch": "@@ -1,3 +1,9 @@\n+2016-09-11  Le-Chun Wu  <lcwu@google.com>\n+\t    Mark Wielaard  <mjw@redhat.com>\n+\n+\t* c-decl.c (warn_if_shadowing): Use the warning code corresponding\n+\tto the given -Wshadow= variant.\n+\n 2016-10-13  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* c-typeck.c: Include memmodel.h."}, {"sha": "3e1b7a4016b1eadbc96cb902ef2e36d7a55d945d", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=84ff4775d41b716c1b862d4d91ff69127686b668", "patch": "@@ -2735,7 +2735,9 @@ warn_if_shadowing (tree new_decl)\n   struct c_binding *b;\n \n   /* Shadow warnings wanted?  */\n-  if (!warn_shadow\n+  if (!(warn_shadow\n+        || warn_shadow_local\n+        || warn_shadow_compatible_local)\n       /* No shadow warnings for internally generated vars.  */\n       || DECL_IS_BUILTIN (new_decl)\n       /* No shadow warnings for vars made for inlining.  */\n@@ -2759,9 +2761,23 @@ warn_if_shadowing (tree new_decl)\n \t    break;\n \t  }\n \telse if (TREE_CODE (old_decl) == PARM_DECL)\n-\t  warned = warning (OPT_Wshadow,\n-\t\t\t    \"declaration of %q+D shadows a parameter\",\n-\t\t\t    new_decl);\n+\t  {\n+\t    enum opt_code warning_code;\n+\n+\t    /* If '-Wshadow=compatible-local' is specified without other\n+\t       -Wshadow= flags, we will warn only when the types of the\n+\t       shadowing variable (i.e. new_decl) and the shadowed variable\n+\t       (old_decl) are compatible.  */\n+\t    if (warn_shadow)\n+\t      warning_code = OPT_Wshadow;\n+\t    else if (comptypes (TREE_TYPE (old_decl), TREE_TYPE (new_decl)))\n+\t      warning_code = OPT_Wshadow_compatible_local;\n+\t    else\n+\t      warning_code = OPT_Wshadow_local;\n+\t    warned = warning_at (DECL_SOURCE_LOCATION (new_decl), warning_code,\n+\t\t\t\t \"declaration of %qD shadows a parameter\",\n+\t\t\t\t new_decl);\n+\t  }\n \telse if (DECL_FILE_SCOPE_P (old_decl))\n \t  {\n \t    /* Do not warn if a variable shadows a function, unless\n@@ -2784,8 +2800,23 @@ warn_if_shadowing (tree new_decl)\n \t    break;\n \t  }\n \telse\n-\t  warned = warning (OPT_Wshadow, \"declaration of %q+D shadows a \"\n-\t\t\t    \"previous local\", new_decl);\n+\t  {\n+\t    enum opt_code warning_code;\n+\n+\t    /* If '-Wshadow=compatible-local' is specified without other\n+\t       -Wshadow= flags, we will warn only when the types of the\n+\t       shadowing variable (i.e. new_decl) and the shadowed variable\n+\t       (old_decl) are compatible.  */\n+\t    if (warn_shadow)\n+\t      warning_code = OPT_Wshadow;\n+\t    else if (comptypes (TREE_TYPE (old_decl), TREE_TYPE (new_decl)))\n+\t      warning_code = OPT_Wshadow_compatible_local;\n+\t    else\n+\t      warning_code = OPT_Wshadow_local;\n+\t    warned = warning_at (DECL_SOURCE_LOCATION (new_decl), warning_code,\n+\t\t\t\t \"declaration of %qD shadows a previous local\",\n+\t\t\t\t new_decl);\n+\t  }\n \n \tif (warned)\n \t  inform (DECL_SOURCE_LOCATION (old_decl),"}, {"sha": "2c2f7ad7aa99151f3f872767af75cb902a4a316a", "filename": "gcc/common.opt", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=84ff4775d41b716c1b862d4d91ff69127686b668", "patch": "@@ -668,7 +668,25 @@ Warn about returning a pointer/reference to a local or temporary variable.\n \n Wshadow\n Common Var(warn_shadow) Warning\n-Warn when one local variable shadows another.\n+Warn when one variable shadows another.  Same as -Wshadow=global.\n+\n+Wshadow=global\n+Common Warning Alias(Wshadow)\n+Warn when one variable shadows another (globally).\n+\n+Wshadow=local\n+Common Var(warn_shadow_local) Warning EnabledBy(Wshadow)\n+Warn when one local variable shadows another local variable or parameter.\n+\n+Wshadow-local\n+Common Warning Undocumented Alias(Wshadow=local)\n+\n+Wshadow=compatible-local\n+Common Var(warn_shadow_compatible_local) Warning EnabledBy(Wshadow=local)\n+Warn when one local variable shadows another local variable or parameter of compatible type.\n+\n+Wshadow-compatible-local\n+Common Warning Undocumented Alias(Wshadow=compatible-local)\n \n Wstack-protector\n Common Var(warn_stack_protect) Warning"}, {"sha": "be439ec3a386aaec3920f404062bf972f7f2c748", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=84ff4775d41b716c1b862d4d91ff69127686b668", "patch": "@@ -1,3 +1,10 @@\n+2016-09-11  Le-Chun Wu  <lcwu@google.com>\n+\t    Mark Wielaard  <mjw@redhat.com>\n+\n+\t* name-lookup.c (pushdecl_maybe_friend): When emitting a\n+\tshadowing warning, use the code corresponding to the\n+\tgiven -Wshadow= variant.\n+\n 2016-10-26  Jason Merrill  <jason@redhat.com>\n \n \t* class.c (add_method): Allow using-declarations to coexist."}, {"sha": "023ed87098f1c4e9b6e55aaac76242146414d038", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=84ff4775d41b716c1b862d4d91ff69127686b668", "patch": "@@ -1195,19 +1195,41 @@ pushdecl_maybe_friend_1 (tree x, bool is_friend)\n \t\t  nowarn = true;\n \t\t}\n \n-\t      if (warn_shadow && !nowarn)\n+\t      if ((warn_shadow\n+\t\t   || warn_shadow_local\n+\t\t   || warn_shadow_compatible_local)\n+\t\t  && !nowarn)\n \t\t{\n \t\t  bool warned;\n+\t\t  enum opt_code warning_code;\n+\t\t  /* If '-Wshadow=compatible-local' is specified without other\n+\t\t     -Wshadow= flags, we will warn only when the type of the\n+\t\t     shadowing variable (i.e. x) can be converted to that of\n+\t\t     the shadowed parameter (oldlocal). The reason why we only\n+\t\t     check if x's type can be converted to oldlocal's type\n+\t\t     (but not the other way around) is because when users\n+\t\t     accidentally shadow a parameter, more than often they\n+\t\t     would use the variable thinking (mistakenly) it's still\n+\t\t     the parameter. It would be rare that users would use the\n+\t\t     variable in the place that expects the parameter but\n+\t\t     thinking it's a new decl.  */\n+\t\t  if (warn_shadow)\n+\t\t    warning_code = OPT_Wshadow;\n+\t\t  else if (can_convert (TREE_TYPE (oldlocal), TREE_TYPE (x),\n+\t\t\t\t\ttf_none))\n+\t\t    warning_code = OPT_Wshadow_compatible_local;\n+\t\t  else\n+\t\t    warning_code = OPT_Wshadow_local;\n \n \t\t  if (TREE_CODE (oldlocal) == PARM_DECL)\n-\t\t    warned = warning_at (input_location, OPT_Wshadow,\n+\t\t    warned = warning_at (input_location, warning_code,\n \t\t\t\t\"declaration of %q#D shadows a parameter\", x);\n \t\t  else if (is_capture_proxy (oldlocal))\n-\t\t    warned = warning_at (input_location, OPT_Wshadow,\n+\t\t    warned = warning_at (input_location, warning_code,\n \t\t\t\t\"declaration of %qD shadows a lambda capture\",\n \t\t\t\tx);\n \t\t  else\n-\t\t    warned = warning_at (input_location, OPT_Wshadow,\n+\t\t    warned = warning_at (input_location, warning_code,\n \t\t\t\t\"declaration of %qD shadows a previous local\",\n \t\t\t\tx);\n "}, {"sha": "fd783bf862df9033bb8c4ac9f309fab2ab099e05", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=84ff4775d41b716c1b862d4d91ff69127686b668", "patch": "@@ -293,6 +293,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wpointer-arith  -Wno-pointer-to-int-cast @gol\n -Wno-pragmas -Wredundant-decls  -Wno-return-local-addr @gol\n -Wreturn-type  -Wsequence-point  -Wshadow  -Wno-shadow-ivar @gol\n+-Wshadow=global, -Wshadow=local, -Wshadow=compatible-local @gol\n -Wshift-overflow -Wshift-overflow=@var{n} @gol\n -Wshift-count-negative -Wshift-count-overflow -Wshift-negative-value @gol\n -Wsign-compare  -Wsign-conversion -Wfloat-conversion @gol\n@@ -5321,13 +5322,56 @@ variable, parameter, type, class member (in C++), or instance variable\n (in Objective-C) or whenever a built-in function is shadowed. Note\n that in C++, the compiler warns if a local variable shadows an\n explicit typedef, but not if it shadows a struct/class/enum.\n+Same as @option{-Wshadow=global}.\n \n @item -Wno-shadow-ivar @r{(Objective-C only)}\n @opindex Wno-shadow-ivar\n @opindex Wshadow-ivar\n Do not warn whenever a local variable shadows an instance variable in an\n Objective-C method.\n \n+@item -Wshadow=global\n+@opindex Wshadow=local\n+The default for @option{-Wshadow}. Warns for any (global) shadowing.\n+\n+@item -Wshadow=local\n+@opindex Wshadow=local\n+Warn when a local variable shadows another local variable or parameter.\n+This warning is enabled by @option{-Wshadow=global}.\n+\n+@item -Wshadow=compatible-local\n+@opindex Wshadow=compatible-local\n+Warn when a local variable shadows another local variable or parameter\n+whose type is compatible with that of the shadowing variable. In C++,\n+type compatibility here means the type of the shadowing variable can be\n+converted to that of the shadowed variable. The creation of this flag\n+(in addition to @option{-Wshadow=local}) is based on the idea that when\n+a local variable shadows another one of incompatible type, it is most\n+likely intentional, not a bug or typo, as shown in the following example:\n+\n+@smallexample\n+@group\n+for (SomeIterator i = SomeObj.begin(); i != SomeObj.end(); ++i)\n+@{\n+  for (int i = 0; i < N; ++i)\n+  @{\n+    ...\n+  @}\n+  ...\n+@}\n+@end group\n+@end smallexample\n+\n+Since the two variable @code{i} in the example above have incompatible types,\n+enabling only @option{-Wshadow=compatible-local} will not emit a warning.\n+Because their types are incompatible, if a programmer accidentally uses one\n+in place of the other, type checking will catch that and emit an error or\n+warning. So not warning (about shadowing) in this case will not lead to\n+undetected bugs. Use of this flag instead of @option{-Wshadow=local} can\n+possibly reduce the number of warnings triggered by intentional shadowing.\n+\n+This warning is enabled by @option{-Wshadow=local}.\n+\n @item -Wlarger-than=@var{len}\n @opindex Wlarger-than=@var{len}\n @opindex Wlarger-than-@var{len}"}, {"sha": "5e773fb47a47e9496fa4b74bf58c2d3d0d2b4261", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=84ff4775d41b716c1b862d4d91ff69127686b668", "patch": "@@ -1,3 +1,14 @@\n+2016-10-30  Le-Chun Wu  <lcwu@google.com>\n+\t    Mark Wielaard  <mjw@redhat.com>\n+\n+\t* gcc.dg/Wshadow-compatible-local-1.c: New test.\n+\t* gcc.dg/Wshadow-local-1.c: Likewise.\n+\t* gcc.dg/Wshadow-local-2.c: Likewise.\n+\t* g++.dg/warn/Wshadow-compatible-local-1.C: Likewise.\n+\t* g++.dg/warn/Wshadow-local-1.C: Likewise.\n+\t* g++.dg/warn/Wshadow-local-2.C: Likewise.\n+\n+\n 2016-10-30  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR tree-optimization/71915"}, {"sha": "aac68619c3a48c6dfc86296f1af553d9e5e6a412", "filename": "gcc/testsuite/g++.dg/warn/Wshadow-compatible-local-1.C", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-compatible-local-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-compatible-local-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-compatible-local-1.C?ref=84ff4775d41b716c1b862d4d91ff69127686b668", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do compile } */\n+/* { dg-options -Wshadow=compatible-local } */\n+\n+class Bar {\n+};\n+\n+class ChildBar : public Bar {\n+};\n+\n+Bar bar;\n+\n+class Foo {\n+ private:\n+  int val;\n+\n+ public:\n+  int func1(int x) {\n+    int val;\n+    val = x;\n+    return val;\n+  }\n+\n+  int func2(int i) { // { dg-message \"note: shadowed declaration is here\" }\n+    int a = 3;       // { dg-message \"note: shadowed declaration is here\" }\n+\n+    for (int i = 0; i < 5; ++i) {   // { dg-warning \"shadows a parameter\" }\n+      for (int i = 0; i < 3; ++i) { // { dg-warning \"shadows a previous local\" }\n+        int a = i;   // { dg-warning \"shadows a previous local\" }\n+        func1(a);\n+      }\n+    }\n+\n+    return a;\n+  }\n+\n+  int func3() {\n+    int bar;\n+    float func1 = 0.3;\n+    int f = 5;       // { dg-message \"note: shadowed declaration is here\" }\n+\n+    if (func1 > 1) {\n+      float f = 2.0; // { dg-warning \"shadows a previous local\" }\n+      bar = f;\n+    }\n+    else\n+      bar = 1;\n+    return bar;\n+  }\n+\n+  void func4() {\n+    Bar *bar;        // { dg-bogus \"shadowed declaration\" }\n+    ChildBar *cbp;   // { dg-bogus \"shadowed declaration\" }\n+    Bar *bp;         // { dg-message \"note: shadowed declaration is here\" }\n+    if (val) {\n+      int bar;       // { dg-bogus \"shadows a previous local\" }\n+      Bar *cbp;      // { dg-bogus \"shadows a previous local\" }\n+      ChildBar *bp;  // { dg-warning \"shadows a previous local\" }\n+      func1(bar);\n+    }\n+  }\n+};\n+\n+// { dg-message \"note: shadowed declaration\" \"\" { target *-*-* } 26 }"}, {"sha": "dba6db5d1c22a748220d1e05e127b7b7ff295ed1", "filename": "gcc/testsuite/g++.dg/warn/Wshadow-local-1.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-local-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-local-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-local-1.C?ref=84ff4775d41b716c1b862d4d91ff69127686b668", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options -Wshadow=local } */\n+\n+struct status\n+{\n+  int member;\n+  void foo2 ();\n+\n+  inline static int foo3 (int member)\n+  {\n+    return member;\n+  }\n+};\n+\n+int decl1;                      // { dg-bogus \"shadowed declaration\" }\n+int decl2;                      // { dg-bogus \"shadowed declaration\" }\n+void foo (struct status &status,\n+\t  double decl1)\t\t// { dg-bogus \"shadows a global\" }\n+{\n+}\n+\n+void foo1 (int d)\n+{\n+  double d;\t\t\t// { dg-error \"shadows a parameter\" }\n+}\n+\n+void status::foo2 ()\n+{\n+  int member;\t\t\t// { dg-bogus \"shadows a member\" }\n+  int decl2;\t\t\t// { dg-bogus \"shadows a global\" }\n+  int local;\t\t\t// { dg-message \"note: shadowed declaration is here\" }\n+  {\n+    int local;\t\t\t// { dg-warning \"shadows a previous local\" }\n+  }\n+}"}, {"sha": "fe42c89d2420d9049024b20114b7f3529ff09565", "filename": "gcc/testsuite/g++.dg/warn/Wshadow-local-2.C", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-local-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-local-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWshadow-local-2.C?ref=84ff4775d41b716c1b862d4d91ff69127686b668", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do compile } */\n+/* { dg-options -Wshadow=local } */\n+\n+class Bar {\n+};\n+\n+class ChildBar : public Bar {\n+};\n+\n+Bar bar;             // { dg-bogus \"shadowed declaration\" }\n+\n+class Foo {\n+ private:\n+  int val;\n+\n+ public:\n+  int func1(int x) {\n+    int val;         // { dg-bogus \"shadows a member\" }\n+    val = x;\n+    return val;\n+  }\n+\n+  int func2(int i) { // { dg-message \"shadowed declaration is here\" }\n+    int a = 3;       // { dg-message \"shadowed declaration is here\" }\n+\n+    for (int i = 0; i < 5; ++i) {   // { dg-warning \"shadows a parameter\" }\n+      for (int i = 0; i < 3; ++i) { // { dg-warning \"shadows a previous local\" }\n+        int a = i;   // { dg-warning \"shadows a previous local\" }\n+        func1(a);\n+      }\n+    }\n+\n+    return a;\n+  }\n+\n+  int func3() {\n+    int bar;         // { dg-bogus \"shadows a global\" }\n+    float func1 = 0.3; // { dg-bogus \"shadows a member\" }\n+    int f = 5;       // { dg-message \"shadowed declaration is here\" }\n+\n+    if (func1 > 1) {\n+      float f = 2.0; // { dg-warning \"shadows a previous local\" }\n+      bar = f;\n+    }\n+    else\n+      bar = 1;\n+    return bar;\n+  }\n+\n+  void func4() {\n+    Bar *bar;        // { dg-message \"shadowed declaration is here\" }\n+    ChildBar *cbp;   // { dg-message \"shadowed declaration is here\" }\n+    Bar *bp;         // { dg-message \"shadowed declaration is here\" }\n+    if (val) {\n+      int bar;       // { dg-warning \"shadows a previous local\" }\n+      Bar *cbp;      // { dg-warning \"shadows a previous local\" }\n+      ChildBar *bp;  // { dg-warning \"shadows a previous local\" }\n+      func1(bar);\n+    }\n+  }\n+};\n+\n+// { dg-message \"shadowed declaration is here\" \"\" { target *-*-* } 26 }"}, {"sha": "ed7b2e45ef19694f38ec382fda30de4580fa6d65", "filename": "gcc/testsuite/gcc.dg/Wshadow-compatible-local-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-compatible-local-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-compatible-local-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-compatible-local-1.c?ref=84ff4775d41b716c1b862d4d91ff69127686b668", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wshadow=compatible-local\" } */\n+\n+struct Bar {\n+};\n+\n+struct Bar bar;       /* { dg-bogus \"shadowed declaration\" } */\n+\n+int val;              /* { dg-bogus \"shadowed declaration\" } */\n+\n+int func1(int x) {    /* { dg-bogus \"shadowed declaration\" } */\n+  int val;            /* { dg-bogus \"shadows a global\" } */\n+  val = x;\n+  return val;\n+}\n+\n+int func2(int i) {\n+  int a = 3;          /* { dg-message \"shadowed declaration\" } */\n+  int j;              /* { dg-message \"shadowed declaration\" } */\n+\n+  for (j = 0; j < i; ++j) {\n+    int a = j;        /* { dg-warning \"shadows a previous local\" } */\n+    int j = a + 1;    /* { dg-warning \"shadows a previous local\" } */\n+    func1(j);\n+  }\n+\n+  return a;\n+}\n+\n+void func4() {\n+  struct Bar bar;     /* { dg-bogus \"shadowed declaration\" } */\n+  if (val) {\n+    int bar;          /* { dg-bogus \"shadows a previous local\" } */\n+    func1(bar);\n+  }\n+}"}, {"sha": "161f9941fb69300f09d6ee3a3a50bccceb8291e6", "filename": "gcc/testsuite/gcc.dg/Wshadow-local-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-local-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-local-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-local-1.c?ref=84ff4775d41b716c1b862d4d91ff69127686b668", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wshadow=local\" } */\n+\n+int decl1;\t\t\t/* should not warn */\n+void foo (double decl1)\t\t/* should not warn */\n+{\t\t\t\t\n+}\n+\n+void foo2 (int d)\t\t/* { dg-message \"shadowed declaration\" } */\n+{\n+  {\n+    double d;\t\t\t/* { dg-warning \"shadows a parameter\" } */\n+  }\n+}\n+\n+void foo3 ()\n+{\n+  int local;\t\t\t/* { dg-message \"shadowed declaration\" } */\n+  {\n+    int local;\t\t\t/* { dg-warning \"shadows a previous local\" } */\n+  }\n+}"}, {"sha": "8f6b132f66db7c22c31640a705b7a9d6e6ce9d9a", "filename": "gcc/testsuite/gcc.dg/Wshadow-local-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-local-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-local-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-local-2.c?ref=84ff4775d41b716c1b862d4d91ff69127686b668", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wshadow=local\" } */\n+\n+struct Bar {\n+};\n+\n+struct Bar bar;       /* { dg-bogus \"shadowed declaration\" } */\n+\n+int val;              /* { dg-bogus \"shadowed declaration\" } */\n+\n+int func1(int x) {    /* { dg-bogus \"shadowed declaration\" } */\n+  int val;            /* { dg-bogus \"shadows a global\" } */\n+  val = x;\n+  return val;\n+}\n+\n+int func2(int i) {\n+  int a = 3;          /* { dg-message \"shadowed declaration\" } */\n+  int j;              /* { dg-message \"shadowed declaration\" } */\n+\n+  for (j = 0; j < i; ++j) {\n+    int a = j;        /* { dg-warning \"shadows a previous local\" } */\n+    int j = a + 1;    /* { dg-warning \"shadows a previous local\" } */\n+    func1(j);\n+  }\n+\n+  return a;\n+}\n+\n+int func3() {\n+  int bar;            /* { dg-bogus \"shadows a global\" } */\n+  float func1 = 0.3;  /* { dg-bogus \"shadows a global\" } */\n+\n+  if (func1 > 1)\n+    bar = 2;\n+  else\n+    bar = 1;\n+  return bar;\n+}\n+\n+void func4() {\n+  struct Bar bar;     /* { dg-message \"shadowed declaration\" } */\n+  if (val) {\n+    int bar;          /* { dg-warning \"shadows a previous local\" } */\n+    func1(bar);\n+  }\n+}\n+\n+/* { dg-bogus \"shadows a global\" \"\"  { target *-*-* } 42 } */"}, {"sha": "429df37f541b92f7fb6157fabcc9d5c02aaa1348", "filename": "gcc/testsuite/gcc.dg/Wshadow-local-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-local-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84ff4775d41b716c1b862d4d91ff69127686b668/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-local-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-local-3.c?ref=84ff4775d41b716c1b862d4d91ff69127686b668", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-shadow\" } */\n+\n+void func() {\n+  int i;\n+    {\n+      int i; /* should not warn */\n+    }\n+}"}]}