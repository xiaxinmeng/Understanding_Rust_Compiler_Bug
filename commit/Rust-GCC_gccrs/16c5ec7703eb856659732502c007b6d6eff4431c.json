{"sha": "16c5ec7703eb856659732502c007b6d6eff4431c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZjNWVjNzcwM2ViODU2NjU5NzMyNTAyYzAwN2I2ZDZlZmY0NDMxYw==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2016-05-23T08:59:26Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2016-05-23T08:59:26Z"}, "message": "[ARM, AArch64] Add missing vtst_p16 and vtstq_p16, and vtst_p{8,16} and vtstq_p{8,16} tests.\n\n2016-05-23  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/arm/arm_neon.h (vtst_p16, vtstq_p16): New.\n\n\tgcc/testsuite/\n\t* gcc.target/aarch64/advsimd-intrinsics/vtst.c: Add tests for\n\tvtst_p8, vtstq_p8, vtst_p16 and vtstq_p16.\n\nFrom-SVN: r236576", "tree": {"sha": "b45ff6ae682706bb5283c332b17f49f7819548c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b45ff6ae682706bb5283c332b17f49f7819548c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16c5ec7703eb856659732502c007b6d6eff4431c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c5ec7703eb856659732502c007b6d6eff4431c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16c5ec7703eb856659732502c007b6d6eff4431c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c5ec7703eb856659732502c007b6d6eff4431c/comments", "author": null, "committer": null, "parents": [{"sha": "b4957a7607862d83ddc3c9f1df8d546a585f720f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4957a7607862d83ddc3c9f1df8d546a585f720f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4957a7607862d83ddc3c9f1df8d546a585f720f"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "27f6c665aeb318100e22d9e007f40ed69c81c4b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c5ec7703eb856659732502c007b6d6eff4431c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c5ec7703eb856659732502c007b6d6eff4431c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16c5ec7703eb856659732502c007b6d6eff4431c", "patch": "@@ -1,3 +1,7 @@\n+2016-05-23  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/arm_neon.h (vtst_p16, vtstq_p16): New.\n+\n 2016-05-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/sse.md (vec_set_lo_<mode><mask_name>,"}, {"sha": "7997cb4ad3a9ac11eaad53696a78d8254630f59a", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c5ec7703eb856659732502c007b6d6eff4431c/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c5ec7703eb856659732502c007b6d6eff4431c/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=16c5ec7703eb856659732502c007b6d6eff4431c", "patch": "@@ -2607,6 +2607,12 @@ vtst_p8 (poly8x8_t __a, poly8x8_t __b)\n   return (uint8x8_t)__builtin_neon_vtstv8qi ((int8x8_t) __a, (int8x8_t) __b);\n }\n \n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+vtst_p16 (poly16x4_t __a, poly16x4_t __b)\n+{\n+  return (uint16x4_t)__builtin_neon_vtstv4hi ((int16x4_t) __a, (int16x4_t) __b);\n+}\n+\n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n vtstq_s8 (int8x16_t __a, int8x16_t __b)\n {\n@@ -2649,6 +2655,12 @@ vtstq_p8 (poly8x16_t __a, poly8x16_t __b)\n   return (uint8x16_t)__builtin_neon_vtstv16qi ((int8x16_t) __a, (int8x16_t) __b);\n }\n \n+__extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n+vtstq_p16 (poly16x8_t __a, poly16x8_t __b)\n+{\n+  return (uint16x8_t)__builtin_neon_vtstv8hi ((int16x8_t) __a, (int16x8_t) __b);\n+}\n+\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vabd_s8 (int8x8_t __a, int8x8_t __b)\n {"}, {"sha": "cc1c39fa55927e929c2e64e7b2212420de5371d1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c5ec7703eb856659732502c007b6d6eff4431c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c5ec7703eb856659732502c007b6d6eff4431c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=16c5ec7703eb856659732502c007b6d6eff4431c", "patch": "@@ -1,3 +1,8 @@\n+2016-05-23  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vtst.c: Add tests for\n+\tvtst_p8, vtstq_p8, vtst_p16 and vtstq_p16.\n+\n 2016-05-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.target/i386/avx512bw-kunpckdq-1.c (avx512bw_test): Use \"m\""}, {"sha": "8f9e6516144806040f8dd4f5e435cfaf8dcedc94", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vtst.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c5ec7703eb856659732502c007b6d6eff4431c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvtst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c5ec7703eb856659732502c007b6d6eff4431c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvtst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvtst.c?ref=16c5ec7703eb856659732502c007b6d6eff4431c", "patch": "@@ -32,6 +32,19 @@ VECT_VAR_DECL(expected_unsigned,uint,16,8) [] = { 0x0, 0xffff,\n VECT_VAR_DECL(expected_unsigned,uint,32,4) [] = { 0x0, 0xffffffff,\n \t\t\t\t\t\t  0x0, 0xffffffff };\n \n+/* Expected results with poly input.  */\n+VECT_VAR_DECL(expected_poly,uint,8,8) [] = { 0x0, 0xff, 0xff, 0xff,\n+\t\t\t\t\t     0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_poly,uint,8,16) [] = { 0x0, 0xff, 0xff, 0xff,\n+\t\t\t\t\t      0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t      0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t      0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_poly,uint,16,4) [] = { 0x0, 0xffff, 0x0, 0xffff };\n+VECT_VAR_DECL(expected_poly,uint,16,8) [] = { 0x0, 0xffff,\n+\t\t\t\t\t      0x0, 0xffff,\n+\t\t\t\t\t      0xffff, 0xffff,\n+\t\t\t\t\t      0xffff, 0xffff };\n+\n #define INSN_NAME vtst\n #define TEST_MSG \"VTST/VTSTQ\"\n \n@@ -71,12 +84,16 @@ FNNAME (INSN_NAME)\n   VDUP(vector2, , uint, u, 8, 8, 15);\n   VDUP(vector2, , uint, u, 16, 4, 5);\n   VDUP(vector2, , uint, u, 32, 2, 1);\n+  VDUP(vector2, , poly, p, 8, 8, 15);\n+  VDUP(vector2, , poly, p, 16, 4, 5);\n   VDUP(vector2, q, int, s, 8, 16, 15);\n   VDUP(vector2, q, int, s, 16, 8, 5);\n   VDUP(vector2, q, int, s, 32, 4, 1);\n   VDUP(vector2, q, uint, u, 8, 16, 15);\n   VDUP(vector2, q, uint, u, 16, 8, 5);\n   VDUP(vector2, q, uint, u, 32, 4, 1);\n+  VDUP(vector2, q, poly, p, 8, 16, 15);\n+  VDUP(vector2, q, poly, p, 16, 8, 5);\n \n #define TEST_MACRO_NO64BIT_VARIANT_1_5(MACRO, VAR, T1, T2)\t\\\n   MACRO(VAR, , T1, T2, 8, 8);\t\t\t\t\t\\\n@@ -109,6 +126,18 @@ FNNAME (INSN_NAME)\n   CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_unsigned, CMT);\n   CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_unsigned, CMT);\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_unsigned, CMT);\n+\n+  /* Now, test the variants with poly8 and poly16 as input.  */\n+#undef CMT\n+#define CMT \" (poly input)\"\n+  TEST_BINARY_OP(INSN_NAME, , poly, p, 8, 8);\n+  TEST_BINARY_OP(INSN_NAME, , poly, p, 16, 4);\n+  TEST_BINARY_OP(INSN_NAME, q, poly, p, 8, 16);\n+  TEST_BINARY_OP(INSN_NAME, q, poly, p, 16, 8);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_poly, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_poly, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_poly, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_poly, CMT);\n }\n \n int main (void)"}]}