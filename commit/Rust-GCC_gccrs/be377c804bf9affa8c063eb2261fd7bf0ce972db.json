{"sha": "be377c804bf9affa8c063eb2261fd7bf0ce972db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUzNzdjODA0YmY5YWZmYThjMDYzZWIyMjYxZmQ3YmYwY2U5NzJkYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-11-27T11:17:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-11-27T11:17:51Z"}, "message": "re PR tree-optimization/68553 (gcc.dg/vect/pr68445.c FAILs)\n\n2015-11-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/68553\n\t* tree-vect-slp.c (vect_create_mask_and_perm): Skip VEC_PERM_EXPR\n\tgeneration for 1:1 permutations.\n\t(vect_transform_slp_perm_load): Detect 1:1 permutations.\n\nFrom-SVN: r231006", "tree": {"sha": "6238642339acbccde0dddec022fa207018e52a6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6238642339acbccde0dddec022fa207018e52a6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be377c804bf9affa8c063eb2261fd7bf0ce972db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be377c804bf9affa8c063eb2261fd7bf0ce972db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be377c804bf9affa8c063eb2261fd7bf0ce972db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be377c804bf9affa8c063eb2261fd7bf0ce972db/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c000cd7c93aa657aae1cdfd6ce9b950b78c79624", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c000cd7c93aa657aae1cdfd6ce9b950b78c79624", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c000cd7c93aa657aae1cdfd6ce9b950b78c79624"}], "stats": {"total": 47, "additions": 35, "deletions": 12}, "files": [{"sha": "baf76d5f19e8270ace2c4b5569b60e50d76d0695", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be377c804bf9affa8c063eb2261fd7bf0ce972db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be377c804bf9affa8c063eb2261fd7bf0ce972db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be377c804bf9affa8c063eb2261fd7bf0ce972db", "patch": "@@ -1,3 +1,10 @@\n+2015-11-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68553\n+\t* tree-vect-slp.c (vect_create_mask_and_perm): Skip VEC_PERM_EXPR\n+\tgeneration for 1:1 permutations.\n+\t(vect_transform_slp_perm_load): Detect 1:1 permutations.\n+\n 2015-11-27  Bernd Schmidt  <bschmidt@redhat.com>\n \n \t* gimple.h (nonbarrier_call_p): Declare."}, {"sha": "5693ca5e35eb2fa8cad5e3b71d8bcccc4e4ba7d6", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be377c804bf9affa8c063eb2261fd7bf0ce972db/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be377c804bf9affa8c063eb2261fd7bf0ce972db/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=be377c804bf9affa8c063eb2261fd7bf0ce972db", "patch": "@@ -3224,12 +3224,18 @@ vect_create_mask_and_perm (gimple *stmt,\n       first_vec = dr_chain[first_vec_indx];\n       second_vec = dr_chain[second_vec_indx];\n \n-      /* Generate the permute statement.  */\n-      perm_stmt = gimple_build_assign (perm_dest, VEC_PERM_EXPR,\n-\t\t\t\t       first_vec, second_vec, mask);\n-      data_ref = make_ssa_name (perm_dest, perm_stmt);\n-      gimple_set_lhs (perm_stmt, data_ref);\n-      vect_finish_stmt_generation (stmt, perm_stmt, gsi);\n+      /* Generate the permute statement if necessary.  */\n+      if (mask)\n+\t{\n+\t  perm_stmt = gimple_build_assign (perm_dest, VEC_PERM_EXPR,\n+\t\t\t\t\t   first_vec, second_vec, mask);\n+\t  data_ref = make_ssa_name (perm_dest, perm_stmt);\n+\t  gimple_set_lhs (perm_stmt, data_ref);\n+\t  vect_finish_stmt_generation (stmt, perm_stmt, gsi);\n+\t}\n+      else\n+\t/* If mask was NULL_TREE generate the requested identity transform.  */\n+\tperm_stmt = SSA_NAME_DEF_STMT (first_vec);\n \n       /* Store the vector statement in NODE.  */\n       SLP_TREE_VEC_STMTS (node)[stride_out * i + vect_stmts_counter]\n@@ -3315,6 +3321,7 @@ vect_transform_slp_perm_load (slp_tree node, vec<tree> dr_chain,\n   int index = 0;\n   int first_vec_index = -1;\n   int second_vec_index = -1;\n+  bool noop_p = true;\n \n   for (int j = 0; j < unroll_factor; j++)\n     {\n@@ -3351,11 +3358,14 @@ vect_transform_slp_perm_load (slp_tree node, vec<tree> dr_chain,\n \n \t  gcc_assert (mask_element >= 0\n \t\t      && mask_element < 2 * nunits);\n+\t  if (mask_element != index)\n+\t    noop_p = false;\n \t  mask[index++] = mask_element;\n \n \t  if (index == nunits)\n \t    {\n-\t      if (!can_vec_perm_p (mode, false, mask))\n+\t      if (! noop_p\n+\t\t  && ! can_vec_perm_p (mode, false, mask))\n \t\t{\n \t\t  if (dump_enabled_p ())\n \t\t    {\n@@ -3371,11 +3381,16 @@ vect_transform_slp_perm_load (slp_tree node, vec<tree> dr_chain,\n \n \t      if (!analyze_only)\n \t\t{\n-\t\t  tree mask_vec, *mask_elts;\n-\t\t  mask_elts = XALLOCAVEC (tree, nunits);\n-\t\t  for (int l = 0; l < nunits; ++l)\n-\t\t    mask_elts[l] = build_int_cst (mask_element_type, mask[l]);\n-\t\t  mask_vec = build_vector (mask_type, mask_elts);\n+\t\t  tree mask_vec = NULL_TREE;\n+\t\t  \n+\t\t  if (! noop_p)\n+\t\t    {\n+\t\t      tree *mask_elts = XALLOCAVEC (tree, nunits);\n+\t\t      for (int l = 0; l < nunits; ++l)\n+\t\t\tmask_elts[l] = build_int_cst (mask_element_type,\n+\t\t\t\t\t\t      mask[l]);\n+\t\t      mask_vec = build_vector (mask_type, mask_elts);\n+\t\t    }\n \n \t\t  if (second_vec_index == -1)\n \t\t    second_vec_index = first_vec_index;\n@@ -3388,6 +3403,7 @@ vect_transform_slp_perm_load (slp_tree node, vec<tree> dr_chain,\n \t      index = 0;\n \t      first_vec_index = -1;\n \t      second_vec_index = -1;\n+\t      noop_p = true;\n \t    }\n \t}\n     }"}]}