{"sha": "e11b02f17206af70f72a82ff1167a2676d5b18c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTExYjAyZjE3MjA2YWY3MGY3MmE4MmZmMTE2N2EyNjc2ZDViMThjOQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-06-07T17:03:49Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-07-16T16:53:03Z"}, "message": "rs6000: Add functions for matching types, part 3 of 3\n\n2021-06-07  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000-gen-builtins.c (restriction): New enum.\n\t(typeinfo): Add restr field.\n\t(match_bracketed_pair): New function.\n\t(match_const_restriction): Implement.", "tree": {"sha": "c61db305b8c0252f5d3ce253805f6075b391061e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c61db305b8c0252f5d3ce253805f6075b391061e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e11b02f17206af70f72a82ff1167a2676d5b18c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e11b02f17206af70f72a82ff1167a2676d5b18c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e11b02f17206af70f72a82ff1167a2676d5b18c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e11b02f17206af70f72a82ff1167a2676d5b18c9/comments", "author": null, "committer": null, "parents": [{"sha": "81736934dd7928f67dacb6f0a5656b8622b0ff46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81736934dd7928f67dacb6f0a5656b8622b0ff46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81736934dd7928f67dacb6f0a5656b8622b0ff46"}], "stats": {"total": 115, "additions": 114, "deletions": 1}, "files": [{"sha": "34566fcc11c0f09f888dcb1bf3ea3044fcb0bf7c", "filename": "gcc/config/rs6000/rs6000-gen-builtins.c", "status": "modified", "additions": 114, "deletions": 1, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e11b02f17206af70f72a82ff1167a2676d5b18c9/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e11b02f17206af70f72a82ff1167a2676d5b18c9/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c?ref=e11b02f17206af70f72a82ff1167a2676d5b18c9", "patch": "@@ -216,6 +216,22 @@ enum basetype\n   BT_VQUAD\n };\n \n+/* Ways in which a const int value can be restricted.  RES_BITS indicates\n+   that the integer is restricted to val1 bits, interpreted as an unsigned\n+   number.  RES_RANGE indicates that the integer is restricted to values\n+   between val1 and val2, inclusive.  RES_VAR_RANGE is like RES_RANGE, but\n+   the argument may be variable, so it can only be checked if it is constant.\n+   RES_VALUES indicates that the integer must have one of the values val1\n+   or val2.  */\n+enum restriction\n+{\n+  RES_NONE,\n+  RES_BITS,\n+  RES_RANGE,\n+  RES_VAR_RANGE,\n+  RES_VALUES\n+};\n+\n /* Type modifiers for an argument or return type.  */\n struct typeinfo\n {\n@@ -228,6 +244,7 @@ struct typeinfo\n   char ispixel;\n   char ispointer;\n   basetype base;\n+  restriction restr;\n   char *val1;\n   char *val2;\n };\n@@ -452,6 +469,53 @@ match_basetype (typeinfo *typedata)\n   return 1;\n }\n \n+/* Helper routine for match_const_restriction.  */\n+static int\n+match_bracketed_pair (typeinfo *typedata, char open, char close,\n+\t\t      restriction restr)\n+{\n+  if (linebuf[pos] == open)\n+    {\n+      safe_inc_pos ();\n+      int oldpos = pos;\n+      char *x = match_integer ();\n+      if (x == NULL)\n+\t{\n+\t  (*diag) (\"malformed integer at column %d.\\n\", oldpos + 1);\n+\t  return 0;\n+\t}\n+      consume_whitespace ();\n+      if (linebuf[pos] != ',')\n+\t{\n+\t  (*diag) (\"missing comma at column %d.\\n\", pos + 1);\n+\t  return 0;\n+\t}\n+      safe_inc_pos ();\n+      consume_whitespace ();\n+      oldpos = pos;\n+      char *y = match_integer ();\n+      if (y == NULL)\n+\t{\n+\t  (*diag) (\"malformed integer at column %d.\\n\", oldpos + 1);\n+\t  return 0;\n+\t}\n+      typedata->restr = restr;\n+      typedata->val1 = x;\n+      typedata->val2 = y;\n+\n+      consume_whitespace ();\n+      if (linebuf[pos] != close)\n+\t{\n+\t  (*diag) (\"malformed restriction at column %d.\\n\", pos + 1);\n+\t  return 0;\n+\t}\n+      safe_inc_pos ();\n+      return 1;\n+    }\n+\n+  return 0;\n+}\n+\n /* A const int argument may be restricted to certain values.  This is\n    indicated by one of the following occurring after the \"int' token:\n \n@@ -469,7 +533,56 @@ match_basetype (typeinfo *typedata)\n static int\n match_const_restriction (typeinfo *typedata)\n {\n-  return 1;\n+  int oldpos = pos;\n+  if (linebuf[pos] == '<')\n+    {\n+      safe_inc_pos ();\n+      oldpos = pos;\n+      char *x = match_integer ();\n+      if (x == NULL)\n+\t{\n+\t  (*diag) (\"malformed integer at column %d.\\n\", oldpos + 1);\n+\t  return 0;\n+\t}\n+      consume_whitespace ();\n+      if (linebuf[pos] == '>')\n+\t{\n+\t  typedata->restr = RES_BITS;\n+\t  typedata->val1 = x;\n+\t  safe_inc_pos ();\n+\t  return 1;\n+\t}\n+      else if (linebuf[pos] != ',')\n+\t{\n+\t  (*diag) (\"malformed restriction at column %d.\\n\", pos + 1);\n+\t  return 0;\n+\t}\n+      safe_inc_pos ();\n+      oldpos = pos;\n+      char *y = match_integer ();\n+      if (y == NULL)\n+\t{\n+\t  (*diag) (\"malformed integer at column %d.\\n\", oldpos + 1);\n+\t  return 0;\n+\t}\n+      typedata->restr = RES_RANGE;\n+      typedata->val1 = x;\n+      typedata->val2 = y;\n+\n+      consume_whitespace ();\n+      if (linebuf[pos] != '>')\n+\t{\n+\t  (*diag) (\"malformed restriction at column %d.\\n\", pos + 1);\n+\t  return 0;\n+\t}\n+      safe_inc_pos ();\n+      return 1;\n+    }\n+  else if (match_bracketed_pair (typedata, '{', '}', RES_VALUES)\n+\t   || match_bracketed_pair (typedata, '[', ']', RES_VAR_RANGE))\n+    return 1;\n+\n+  return 0;\n }\n \n /* Look for a type, which can be terminated by a token that is not part of"}]}