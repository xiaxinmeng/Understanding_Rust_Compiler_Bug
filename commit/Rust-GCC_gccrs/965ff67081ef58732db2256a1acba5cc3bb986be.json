{"sha": "965ff67081ef58732db2256a1acba5cc3bb986be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY1ZmY2NzA4MWVmNTg3MzJkYjIyNTZhMWFjYmE1Y2MzYmI5ODZiZQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2007-05-22T18:08:48Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2007-05-22T18:08:48Z"}, "message": "func-array.c: Support -DDBG to report individual failures.\n\n\t* gcc.dg/dfp/func-array.c: Support -DDBG to report individual failures.\n\t* gcc.dg/dfp/func-struct.c: Ditto.\n\t* gcc.dg/dfp/operator-assignment.c: Ditto.\n\t* gcc.dg/dfp/convert-bfp.c: Ditto.\n\t* gcc.dg/dfp/convert-int.c: Ditto.\n\t* gcc.dg/dfp/convert-int-max.c: Ditto.\n\t* gcc.dg/dfp/func-scalar.c: Ditto.\n\t* gcc.dg/dfp/cast.c: Ditto.\n\t* gcc.dg/dfp/func-mixed.c: Support -DDBG to report individual\n\tfailures, and fix a typo in return type of arg1_128.\n\t* gcc.dg/dfp/convert-dfp.c: Support -DDBG to report individual\n\tfailures, and fix a typo in a constant suffix.\n\t* gcc.dg/dfp/func-vararg-dfp.c: Return zero at the end.\n\t* gcc.dg/dfp/convert-complex.c: With -DDBG, abort for failures.\n\nFrom-SVN: r124953", "tree": {"sha": "409a0aa184b01f8264a590a9ff0416c1b5b62a13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/409a0aa184b01f8264a590a9ff0416c1b5b62a13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/965ff67081ef58732db2256a1acba5cc3bb986be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/965ff67081ef58732db2256a1acba5cc3bb986be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/965ff67081ef58732db2256a1acba5cc3bb986be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/965ff67081ef58732db2256a1acba5cc3bb986be/comments", "author": null, "committer": null, "parents": [{"sha": "ba2f32a925d3af9152710520c77de11c2987afd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba2f32a925d3af9152710520c77de11c2987afd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba2f32a925d3af9152710520c77de11c2987afd8"}], "stats": {"total": 484, "additions": 315, "deletions": 169}, "files": [{"sha": "6aa565dbb5ecbdf5c9d9c82c6412db869d9e9a2f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=965ff67081ef58732db2256a1acba5cc3bb986be", "patch": "@@ -1,3 +1,21 @@\n+2007-05-22  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* gcc.dg/dfp/func-array.c: Support -DDBG to report individual\n+\tfailures.\n+\t* gcc.dg/dfp/func-struct.c: Ditto.\n+\t* gcc.dg/dfp/operator-assignment.c: Ditto.\n+\t* gcc.dg/dfp/convert-bfp.c: Ditto.\n+\t* gcc.dg/dfp/convert-int.c: Ditto.\n+\t* gcc.dg/dfp/convert-int-max.c: Ditto.\n+\t* gcc.dg/dfp/func-scalar.c: Ditto.\n+\t* gcc.dg/dfp/cast.c: Ditto.\n+\t* gcc.dg/dfp/func-mixed.c: Support -DDBG to report individual\n+\tfailures, and fix a typo in return type of arg1_128.\n+\t* gcc.dg/dfp/convert-dfp.c: Support -DDBG to report individual\n+\tfailures, and fix a typo in a constant suffix.\n+\t* gcc.dg/dfp/func-vararg-dfp.c: Return zero at the end.\n+\t* gcc.dg/dfp/convert-complex.c: With -DDBG, abort for failures.\n+\n 2007-05-22  Janis Johnson  <janis187@us.ibm.com>\n \t    Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n "}, {"sha": "1e88bee7c8e075e43b79857c9c2cb5c5da6fc930", "filename": "gcc/testsuite/gcc.dg/dfp/cast.c", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcast.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcast.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcast.c?ref=965ff67081ef58732db2256a1acba5cc3bb986be", "patch": "@@ -4,6 +4,14 @@\n    Test valid casts involving decimal float.  */\n \n extern void abort (void);\n+int failcnt;\n+                                                                                \n+#ifdef DBG\n+extern int printf (const char *, ...);\n+#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n+#else\n+#define FAILURE abort ();\n+#endif\n \n _Decimal32 d32;\n _Decimal64 d64;\n@@ -21,19 +29,19 @@ main (void)\n   d128 = 1.2dl;\n \n   if (d32 != (_Decimal32) d64)\n-    abort ();\n+    FAILURE\n   if (d32 != (_Decimal32) d128)\n-    abort ();\n+    FAILURE\n \n   if (d64 != (_Decimal64) d32)\n-    abort ();\n+    FAILURE\n   if (d64 != (_Decimal64) d128)\n-    abort ();\n+    FAILURE\n \n   if (d128 != (_Decimal128) d32)\n-    abort ();\n+    FAILURE\n   if (d128 != (_Decimal128) d64)\n-    abort ();\n+    FAILURE\n \n   /* Casts between generic and decimal floating point types.  Use a\n      value that we can assume can be represented exactly in all\n@@ -45,32 +53,35 @@ main (void)\n \n   /* To generic floating types.  */\n   if ((float) d32 != 2.0f)\n-    abort ();\n+    FAILURE\n   if ((double) d32 != 2.0l)\n-    abort ();\n+    FAILURE\n   if ((float) d64 != 2.0f)\n-    abort ();\n+    FAILURE\n   if ((double) d64 != 2.0l)\n-    abort ();\n+    FAILURE\n   if ((float) d128 != 2.0f)\n-    abort ();\n+    FAILURE\n   if ((double) d128 != 2.0l)\n-    abort ();\n+    FAILURE\n \n   /* float to decimal floating types.  */\n   if (d32 != (_Decimal32) f)\n-    abort ();\n+    FAILURE\n   if (d64 != (_Decimal64) f)\n-    abort ();\n+    FAILURE\n   if (d128 != (_Decimal128) f)\n-    abort ();\n+    FAILURE\n \n   /* double to decimal floating types.  */\n   if (d32 != (_Decimal32) d)\n-    abort ();\n+    FAILURE\n   if (d64 != (_Decimal64) d)\n-    abort ();\n+    FAILURE\n   if (d128 != (_Decimal128) d)\n+    FAILURE\n+\n+  if (failcnt != 0)\n     abort ();\n \n   return 0;"}, {"sha": "c65210fe0b978833c5f02e5fe1ef834bb172733b", "filename": "gcc/testsuite/gcc.dg/dfp/convert-bfp.c", "status": "modified", "additions": 34, "deletions": 21, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp.c?ref=965ff67081ef58732db2256a1acba5cc3bb986be", "patch": "@@ -7,6 +7,18 @@\n /* Long double isn't supported yet at runtime, so disable those checks.  */\n #define SKIP_LONG_DOUBLE\n \n+extern void abort (void);\n+static int failcnt;\n+\n+/* Support compiling the test to report individual failures; default is\n+   to abort as soon as a check fails.  */\n+#ifdef DBG\n+#include <stdio.h>\n+#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n+#else\n+#define FAILURE abort ();\n+#endif\n+\n volatile _Decimal32 d32;\n volatile _Decimal64 d64;\n volatile _Decimal128 d128;\n@@ -16,8 +28,6 @@ volatile double df;\n volatile long double tf;\n #endif\n \n-extern void abort (void);\n-\n int\n main ()\n {\n@@ -27,101 +37,104 @@ main ()\n   d32 = 2.0df;\n   sf = d32;\n   if (sf != 2.0f)\n-    abort ();\n+    FAILURE\n \n   df = d32;\n   if (df != 2.0)\n-    abort ();\n+    FAILURE\n \n #ifndef SKIP_LONG_DOUBLE\n   tf = d32;\n   if (tf != 2.0l)\n-    abort ();\n+    FAILURE\n #endif\n \n   /* Conversions from _Decimal64. */\n   d64 = -7.0dd;\n   sf = d64;\n   if (sf != -7.0f)\n-    abort ();\n+    FAILURE\n   \n   df = d64;\n   if (df != -7.0)\n-    abort ();\n+    FAILURE\n \n #ifndef SKIP_LONG_DOUBLE\n   tf = d64;\n   if (tf != -7.0l)\n-    abort ();\n+    FAILURE\n #endif\n \n   /* Conversions from _Decimal128. */\n   d128 = 30.0dl;\n   sf = d128;\n   if (sf != 30.0f)\n-    abort ();\n+    FAILURE\n \n   df = d128;\n   if (df != 30.0)\n-    abort ();\n+    FAILURE\n \n   df = d128;\n   if (df != 30.0l)\n-    abort ();\n+    FAILURE\n \n   /* Conversions from binary float to decimal float. */\n   sf = 30.0f;\n   d32 = sf;\n   if (d32 != 30.0df)\n-    abort ();\n+    FAILURE\n \n   d64 = sf;\n   if (d64 != 30.0dd)\n-    abort ();\n+    FAILURE\n \n   df = -2.0;\n   d32 = df;\n   if (d32 != -2.0df)\n-    abort ();\n+    FAILURE\n \n   d64 = df;\n   if (d64 != -2.0dd)\n-    abort ();\n+    FAILURE\n \n   d128 = df;\n   if (d128 != -2.0dl)\n-    abort ();\n+    FAILURE\n   \n   sf = 30.0f;\n   d128 = sf;\n   if (d128 != 30.0dl)\n-    abort ();\n+    FAILURE\n \n #ifndef SKIP_LONG_DOUBLE\n   tf = -22.0l;\n   d32 = tf;\n   if (d32 != -22.0df)\n-    abort ();\n+    FAILURE\n \n   d64 = tf;\n   if (d64 != -22.0dd)\n-    abort ();\n+    FAILURE\n \n   d128 = tf;\n   if (d128 != -22.0dl)\n-    abort ();\n+    FAILURE\n #endif\n \n   /* 2**(-11) = 0.00048828125. */\n   d128 = 0.000488281251dl;\n   sf = d128;\n   if (sf != 0.00048828125f)\n-    abort ();\n+    FAILURE\n   /* 2**(-25) = 0.298023223876953125E-7.  */\n   d128 = 2.98023223876953125E-8dl;\n   df = d128;\n   if (df < (2.9802322387695312e-08 - 0.00000000001)\n       || df > (2.9802322387695312e-08 + 0.00000000001))\n+    FAILURE\n+\n+  if (failcnt != 0)\n     abort ();\n \n   return 0;"}, {"sha": "0083b0918800f1df6efefe0b309ab49cedb6642b", "filename": "gcc/testsuite/gcc.dg/dfp/convert-complex.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-complex.c?ref=965ff67081ef58732db2256a1acba5cc3bb986be", "patch": "@@ -5,7 +5,7 @@\n \n extern void abort(void);\n static int failcnt;\n-                                                                                \n+\n /* Support compiling the test to report individual failures; default is\n    to abort as soon as a check fails.  */\n #ifdef DBG\n@@ -124,5 +124,8 @@ main ()\n   if (d128 != 0.0625DL)\n     FAILURE\n \n+  if (failcnt != 0)\n+    abort ();\n+\n   return 0;\n }"}, {"sha": "148dff60e3fe8409252c65a9706c968d5a570b95", "filename": "gcc/testsuite/gcc.dg/dfp/convert-dfp.c", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp.c?ref=965ff67081ef58732db2256a1acba5cc3bb986be", "patch": "@@ -13,6 +13,16 @@\n #include <float.h>\n \n extern void abort (void);\n+static int failcnt;\n+\n+/* Support compiling the test to report individual failures; default is\n+   to abort as soon as a check fails.  */\n+#ifdef DBG\n+#include <stdio.h>\n+#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n+#else\n+#define FAILURE abort ();\n+#endif\n \n volatile _Decimal32 d32;\n volatile _Decimal64 d64;\n@@ -25,29 +35,29 @@ main ()\n   d32 = 123.4df;\n   d64 = d32;\n   if (d64 != 123.4dd)\n-    abort ();\n+    FAILURE\n   d128 = d32;\n   if (d128 != 123.4dl)\n-    abort ();\n+    FAILURE\n   d64 = 345.678dd;\n   d128 = d64;\n   if (d128 != 345.678dl)\n-    abort ();\n+    FAILURE\n \n   /* Conversions to smaller types for which the value fits.  */\n   d64 = 3456.789dd;\n   d32 = d64;\n   if (d32 != 3456.789df)\n-    abort ();\n+    FAILURE\n   d128 = 123.4567dl;\n   d32 = d128;\n-  if (d32 != 123.4567dl)\n-    abort ();\n+  if (d32 != 123.4567df)\n+    FAILURE\n \n   d128 = 1234567890.123456dl;\n   d64 = d128;\n   if (d64 != 1234567890.123456dd)\n-    abort ();\n+    FAILURE\n \n   /* Test demotion to non-representable decimal floating type. */\n \n@@ -59,37 +69,40 @@ main ()\n   d64 = 9.99999949E96DD;\n   d32 = d64;\n   if (d32 != DEC32_MAX)\n-    abort();\n+    FAILURE\n \n   /* Rounds to more than _Decimal32 can handle.  */\n   d64 = 9.9999995E96DD;\n   d32 = d64;\n   if (d32 != __builtin_infd32())\n-    abort();\n+    FAILURE\n \n   /* Rounds to what _Decimal32 can handle.  */\n   d128 = 9.99999949E96DD;\n   d32 = d128;\n   if (d32 != DEC32_MAX)\n-    abort();\n+    FAILURE\n \n   /* Rounds to more than _Decimal32 can handle.  */\n   d128= 9.9999995E96DD;\n   d32 = d128;\n   if (d32 != __builtin_infd32())\n-    abort();\n+    FAILURE\n \n   /* Rounds to what _Decimal64 can handle.  */\n   d128 = 9.99999999999999949E384DL;\n   d64 = d128;\n   if (d64 != DEC64_MAX)\n-    abort();\n+    FAILURE\n \n   /* Rounds to more than _Decimal64 can handle.  */\n   d128 = 9.9999999999999995E384DL;\n   d64 = d128;\n   if (d64 != __builtin_infd64())\n-    abort();\n+    FAILURE\n+\n+  if (failcnt != 0)\n+    abort ();\n \n   return 0;\n }"}, {"sha": "cb0c428a164425709d9631d59aa4a35a923ef20e", "filename": "gcc/testsuite/gcc.dg/dfp/convert-int-max.c", "status": "modified", "additions": 30, "deletions": 19, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-max.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-max.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-max.c?ref=965ff67081ef58732db2256a1acba5cc3bb986be", "patch": "@@ -7,6 +7,14 @@\n    64-bit long long (there's a check for that below).  */\n \n extern void abort (void);\n+int failcnt;\n+\n+#ifdef DBG\n+extern int printf (const char *, ...);\n+#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n+#else\n+#define FAILURE abort ();\n+#endif\n \n volatile _Decimal32 d32;\n volatile _Decimal64 d64;\n@@ -24,112 +32,112 @@ doit ()\n   d32 = 2147483.E3DF;\n   si = d32;\n   if (si != 2147483000)\n-    abort ();\n+    FAILURE\n \n   d32 = -2147483.E3DF;\n   si = d32;\n   if (si != -2147483000)\n-    abort ();\n+    FAILURE\n \n   /* _Decimal32 to unsigned int.  */\n \n   d32 = 4.294967E9DF;\n   ui = d32;\n   if (ui != 4294967000U)\n-    abort ();\n+    FAILURE\n \n   /* _Decimal32 to long long.  */\n \n   d32 = 922.3372E16DF;\n   sll = d32;\n   if (sll != 9223372000000000000LL)\n-    abort ();\n+    FAILURE\n \n   d32 = -92233.72E14DF;\n   sll = d32;\n   if (sll != -9223372000000000000LL)\n-    abort ();\n+    FAILURE\n \n   /* _Decimal32 to unsigned long long.  */\n \n-  d32 = 0.1844674E20DF;\n+  d32 = .1844674E20DF;\n   ull = d32;\n   if (ull != 18446740000000000000ULL)\n-    abort ();\n+    FAILURE\n \n   /* _Decimal64 to int.  */\n \n   d64 = 2.147483647E9DD;\n   si = d64;\n   if (si != 2147483647)\n-    abort ();\n+    FAILURE\n \n   d64 = -2147483648.DD;\n   si = d64;\n   if (si != -2147483648)\n-    abort ();\n+    FAILURE\n \n   /* _Decimal64 to unsigned int.  */\n \n   d64 = 42949.67295E5DD;\n   ui = d64;\n   if (ui != 4294967295)\n-    abort ();\n+    FAILURE\n \n   /* _Decimal64 to long long.  */\n \n   d64 = 9.223372036854775E18DD;\n   sll = d64;\n   if (sll != 9223372036854775000LL)\n-    abort (); \n+    FAILURE \n \n   d64 = -92233720.36854775E11DD;\n   sll = d64;\n   if (sll != -9223372036854775000LL)\n-    abort ();\n+    FAILURE\n \n   /* _Decimal64 to unsigned long long.  */\n   d64 = 1844674407370955.E4DD;\n   ull = d64;\n   if (ull != 18446744073709550000ULL)\n-    abort ();\n+    FAILURE\n \n   /* _Decimal128 to int.  */\n \n   d128 = 2.147483647E9DL;\n   si = d128;\n   if (si != 2147483647)\n-    abort ();\n+    FAILURE\n \n   d128 = -2147483648.DL;\n   si = d128;\n   if (si != -2147483648)\n-    abort ();\n+    FAILURE\n \n   /* _Decimal128 to unsigned int.  */\n \n   d128 = 4294.967295E6DL;\n   ui = d128;\n   if (ui != 4294967295)\n-    abort ();\n+    FAILURE\n \n   /* _Decimal128 to long long.  */\n \n   d128 = 9223372036854775807.DL;\n   sll = d128;\n   if (sll != 9223372036854775807LL)\n-    abort (); \n+    FAILURE \n \n   d128 = -9.223372036854775808E19DL;\n   sll = d128;\n   if (sll != -9223372036854775807LL - 1LL)\n-    abort ();\n+    FAILURE\n \n   /* _Decimal128 to unsigned long long.  */\n   d128 = 18446744073709551615.DL;\n   ull = d128;\n   if (ull != 18446744073709551615ULL)\n-    abort ();\n+    FAILURE\n }\n \n int\n@@ -141,5 +149,8 @@ main ()\n     return 0;\n \n   doit ();\n+\n+  if (failcnt != 0)\n+    abort ();\n   return 0;\n }"}, {"sha": "45efe32a5e88a879244ca973b56dedd686376b8b", "filename": "gcc/testsuite/gcc.dg/dfp/convert-int.c", "status": "modified", "additions": 43, "deletions": 32, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int.c?ref=965ff67081ef58732db2256a1acba5cc3bb986be", "patch": "@@ -4,6 +4,14 @@\n    C99 6.3.1.4(1a) New.  */\n \n extern void abort (void);\n+int failcnt;\n+\n+#ifdef DBG\n+extern int printf (const char *, ...);\n+#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n+#else\n+#define FAILURE abort ();\n+#endif\n \n _Decimal32 d32;\n _Decimal64 d64;\n@@ -67,33 +75,33 @@ main ()\n \n   ui = d32;\n   if (ui != 456U)\n-    abort ();\n+    FAILURE\n   ul = d32;\n   if (ul != 456UL)\n-    abort ();\n+    FAILURE\n   ull = d32;\n   if (ull != 456ULL)\n-    abort ();\n+    FAILURE\n \n   ui = d64;\n   if (ui != 23U)\n-    abort ();\n+    FAILURE\n   ul = d64;\n   if (ul != 23UL)\n-    abort ();\n+    FAILURE\n   ull = d64;\n   if (ull != 23ULL)\n-    abort ();\n+    FAILURE\n \n   ui = d128;\n   if (ui != 1234U)\n-    abort ();\n+    FAILURE\n   ul = d128;\n   if (ul != 1234UL)\n-    abort ();\n+    FAILURE\n   ull = d128;\n   if (ull != 1234ULL)\n-    abort ();\n+    FAILURE\n \n   /* Decimal float to signed integer.  */\n \n@@ -102,91 +110,94 @@ main ()\n \n   b = d32;\n   if (!b)\n-    abort ();\n+    FAILURE\n   b = d64;\n   if (!b)\n-    abort ();\n+    FAILURE\n   b = d128;\n   if (!b)\n-    abort ();\n+    FAILURE\n \n   /* Unsigned integer to decimal float.  */\n   init_unsigned_int ();\n \n   d32 = ui;\n   if (d32 != 987.0df)\n-    abort ();\n+    FAILURE\n   d32 = ul;\n   if (d32 != 345678.0df)\n-    abort ();\n+    FAILURE\n   d32 = ull;\n   if (d32 != 1234567.df)\n-    abort ();\n+    FAILURE\n \n   d64 = ui;\n   if (d64 != 987.0dd)\n-    abort ();\n+    FAILURE\n   d64 = ul;\n   if (d64 != 345678.0dd)\n-    abort ();\n+    FAILURE\n   d64 = ull;\n   if (d64 != 1234567.dd)\n-    abort ();\n+    FAILURE\n \n   d128 = ui;\n   if (d128 != 987.0dl)\n-    abort ();\n+    FAILURE\n   d128 = ul;\n   if (d128 != 345678.0dl)\n-    abort ();\n+    FAILURE\n   d128 = ull;\n   if (d128 != 1234567.dl)\n-    abort ();\n+    FAILURE\n \n   /* Signed integer to decimal float.  */\n   init_signed_int ();\n \n   d32 = si;\n   if (d32 != -987.0df)\n-    abort ();\n+    FAILURE\n   d32 = sl;\n   if (d32 != -345678.0df)\n-    abort ();\n+    FAILURE\n   d32 = sll;\n   if (d32 != -1234567.df)\n-    abort ();\n+    FAILURE\n \n   d64 = si;\n   if (d64 != -987.0dd)\n-    abort ();\n+    FAILURE\n   d64 = sl;\n   if (d64 != -345678.0dd)\n-    abort ();\n+    FAILURE\n   d64 = sll;\n   if (d64 != -1234567.dd)\n-    abort ();\n+    FAILURE\n \n   d128 = si;\n   if (d128 != -987.0dl)\n-    abort ();\n+    FAILURE\n   d128 = sl;\n   if (d128 != -345678.0dl)\n-    abort ();\n+    FAILURE\n   d128 = sll;\n   if (d128 != -1234567.dl)\n-    abort ();\n+    FAILURE\n \n   /* _Bool to decimal float.  */\n   init_dfp_3 ();\n   \n   b = d32;\n   if (b)\n-    abort ();\n+    FAILURE\n   b = d64;\n   if (b)\n-    abort ();\n+    FAILURE\n   b = d128;\n   if (b)\n+    FAILURE\n+\n+  if (failcnt != 0)\n     abort ();\n \n   return 0;"}, {"sha": "93713486baa3e48dc06cfe97105ef84c940f6ebc", "filename": "gcc/testsuite/gcc.dg/dfp/func-array.c", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-array.c?ref=965ff67081ef58732db2256a1acba5cc3bb986be", "patch": "@@ -4,6 +4,16 @@\n    Test passing array elements involving decimal floating point types. */\n \n extern void abort (void);\n+static int failcnt;\n+\n+/* Support compiling the test to report individual failures; default is\n+   to abort as soon as a check fails.  */\n+#ifdef DBG\n+#include <stdio.h>\n+#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n+#else\n+#define FAILURE abort ();\n+#endif\n \n /* A handful of functions that return the Nth _Decimal32 argument of\n    an incoming array.  */\n@@ -132,28 +142,31 @@ int main()\n   _Decimal128 d128[] = { 0.0dl, 1.0dl, 2.0dl, 3.0dl, 4.0dl, 5.0dl };\n \n   /* _Decimal32 variants.  */\n-  if (arg0_32 (d32) != 0.0df) abort ();\n-  if (arg1_32 (d32) != 1.0df) abort ();\n-  if (arg2_32 (d32) != 2.0df) abort ();\n-  if (arg3_32 (d32) != 3.0df) abort ();\n-  if (arg4_32 (d32) != 4.0df) abort ();\n-  if (arg5_32 (d32) != 5.0df) abort ();\n+  if (arg0_32 (d32) != 0.0df) FAILURE\n+  if (arg1_32 (d32) != 1.0df) FAILURE\n+  if (arg2_32 (d32) != 2.0df) FAILURE\n+  if (arg3_32 (d32) != 3.0df) FAILURE\n+  if (arg4_32 (d32) != 4.0df) FAILURE\n+  if (arg5_32 (d32) != 5.0df) FAILURE\n \n   /* _Decimal64 variants.  */\n-  if (arg0_64 (d64) != 0.0dd) abort ();\n-  if (arg1_64 (d64) != 1.0dd) abort ();\n-  if (arg2_64 (d64) != 2.0dd) abort ();\n-  if (arg3_64 (d64) != 3.0dd) abort ();\n-  if (arg4_64 (d64) != 4.0dd) abort ();\n-  if (arg5_64 (d64) != 5.0dd) abort ();\n+  if (arg0_64 (d64) != 0.0dd) FAILURE\n+  if (arg1_64 (d64) != 1.0dd) FAILURE\n+  if (arg2_64 (d64) != 2.0dd) FAILURE\n+  if (arg3_64 (d64) != 3.0dd) FAILURE\n+  if (arg4_64 (d64) != 4.0dd) FAILURE\n+  if (arg5_64 (d64) != 5.0dd) FAILURE\n \n   /* _Decimal128 variants.  */\n-  if (arg0_128 (d128) != 0.0dl) abort ();\n-  if (arg1_128 (d128) != 1.0dl) abort ();\n-  if (arg2_128 (d128) != 2.0dl) abort ();\n-  if (arg3_128 (d128) != 3.0dl) abort ();\n-  if (arg4_128 (d128) != 4.0dl) abort ();\n-  if (arg5_128 (d128) != 5.0dl) abort ();\n+  if (arg0_128 (d128) != 0.0dl) FAILURE\n+  if (arg1_128 (d128) != 1.0dl) FAILURE\n+  if (arg2_128 (d128) != 2.0dl) FAILURE\n+  if (arg3_128 (d128) != 3.0dl) FAILURE\n+  if (arg4_128 (d128) != 4.0dl) FAILURE\n+  if (arg5_128 (d128) != 5.0dl) FAILURE\n+\n+  if (failcnt != 0)\n+    abort ();\n \n   return 0;\n }"}, {"sha": "620d342e980ec2ad519d4c69ee67f18eee35436c", "filename": "gcc/testsuite/gcc.dg/dfp/func-mixed.c", "status": "modified", "additions": 32, "deletions": 19, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-mixed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-mixed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-mixed.c?ref=965ff67081ef58732db2256a1acba5cc3bb986be", "patch": "@@ -5,6 +5,16 @@\n    point types.  */\n \n extern void abort (void);\n+static int failcnt;\n+\n+/* Support compiling the test to report individual failures; default is\n+   to abort as soon as a check fails.  */\n+#ifdef DBG\n+#include <stdio.h>\n+#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n+#else\n+#define FAILURE abort ();\n+#endif\n \n /* A handful of functions that return their Nth _Decimal32\n    argument with mixed types in parameter list.  */\n@@ -106,7 +116,7 @@ arg0_128 (_Decimal128 arg0, int arg1, unsigned int arg2,\n {\n   return arg0;\n }\n-_Decimal32\n+_Decimal128\n arg1_128 (int arg0, _Decimal128 arg1, unsigned int arg2,\n          float arg3, double arg4, long double arg5)\n {\n@@ -147,28 +157,31 @@ int\n main ()\n {\n   /* _Decimal32 variants.  */\n-  if (arg0_32 (0.0df, -1, 2, 3.0f, 4.0, 5.0l) != 0.0df) abort ();\n-  if (arg1_32 (0, 1.0df, 2, 3.0f, 4.0, 5.0l) != 1.0df) abort ();\n-  if (arg2_32 (0, -1, 2.0df, 3.0f, 4.0, 5.0l) != 2.0df) abort ();\n-  if (arg3_32 (0, -1, 2.0f, 3.0df, 4.0, 5.0l) != 3.0df) abort ();\n-  if (arg4_32 (0, -1, 2.0f, 3.0, 4.0df, 5.0l) != 4.0df) abort ();\n-  if (arg5_32 (0, -1, 2.0f, 3.0, 4.0l, 5.0df) != 5.0df) abort ();\n+  if (arg0_32 (0.0df, -1, 2, 3.0f, 4.0, 5.0l) != 0.0df) FAILURE\n+  if (arg1_32 (0, 1.0df, 2, 3.0f, 4.0, 5.0l) != 1.0df) FAILURE\n+  if (arg2_32 (0, -1, 2.0df, 3.0f, 4.0, 5.0l) != 2.0df) FAILURE\n+  if (arg3_32 (0, -1, 2.0f, 3.0df, 4.0, 5.0l) != 3.0df) FAILURE\n+  if (arg4_32 (0, -1, 2.0f, 3.0, 4.0df, 5.0l) != 4.0df) FAILURE\n+  if (arg5_32 (0, -1, 2.0f, 3.0, 4.0l, 5.0df) != 5.0df) FAILURE\n \n   /* _Decimal64 variants.  */\n-  if (arg0_64 (0.0dd, -1, 2, 3.0f, 4.0, 5.0l) != 0.0dd) abort ();\n-  if (arg1_64 (0, 1.0dd, 2, 3.0f, 4.0, 5.0l) != 1.0dd) abort ();\n-  if (arg2_64 (0, -1, 2.0dd, 3.0f, 4.0, 5.0l) != 2.0dd) abort ();\n-  if (arg3_64 (0, -1, 2.0f, 3.0dd, 4.0, 5.0l) != 3.0dd) abort ();\n-  if (arg4_64 (0, -1, 2.0f, 3.0, 4.0dd, 5.0l) != 4.0dd) abort ();\n-  if (arg5_64 (0, -1, 2.0f, 3.0, 4.0l, 5.0dd) != 5.0dd) abort ();\n+  if (arg0_64 (0.0dd, -1, 2, 3.0f, 4.0, 5.0l) != 0.0dd) FAILURE\n+  if (arg1_64 (0, 1.0dd, 2, 3.0f, 4.0, 5.0l) != 1.0dd) FAILURE\n+  if (arg2_64 (0, -1, 2.0dd, 3.0f, 4.0, 5.0l) != 2.0dd) FAILURE\n+  if (arg3_64 (0, -1, 2.0f, 3.0dd, 4.0, 5.0l) != 3.0dd) FAILURE\n+  if (arg4_64 (0, -1, 2.0f, 3.0, 4.0dd, 5.0l) != 4.0dd) FAILURE\n+  if (arg5_64 (0, -1, 2.0f, 3.0, 4.0l, 5.0dd) != 5.0dd) FAILURE\n \n   /* _Decimal128 variants.  */\n-  if (arg0_128 (0.0dl, -1, 2, 3.0f, 4.0, 5.0l) != 0.0dl) abort ();\n-  if (arg1_128 (0, 1.0dl, 2, 3.0f, 4.0, 5.0l) != 1.0dl) abort ();\n-  if (arg2_128 (0, -1, 2.0dl, 3.0f, 4.0, 5.0l) != 2.0dl) abort ();\n-  if (arg3_128 (0, -1, 2.0f, 3.0dl, 4.0, 5.0l) != 3.0dl) abort ();\n-  if (arg4_128 (0, -1, 2.0f, 3.0, 4.0dl, 5.0l) != 4.0dl) abort ();\n-  if (arg5_128 (0, -1, 2.0f, 3.0, 4.0l, 5.0dl) != 5.0dl) abort ();\n+  if (arg0_128 (0.0dl, -1, 2, 3.0f, 4.0, 5.0l) != 0.0dl) FAILURE\n+  if (arg1_128 (0, 1.0dl, 2, 3.0f, 4.0, 5.0l) != 1.0dl) FAILURE\n+  if (arg2_128 (0, -1, 2.0dl, 3.0f, 4.0, 5.0l) != 2.0dl) FAILURE\n+  if (arg3_128 (0, -1, 2.0f, 3.0dl, 4.0, 5.0l) != 3.0dl) FAILURE\n+  if (arg4_128 (0, -1, 2.0f, 3.0, 4.0dl, 5.0l) != 4.0dl) FAILURE\n+  if (arg5_128 (0, -1, 2.0f, 3.0, 4.0l, 5.0dl) != 5.0dl) FAILURE\n+\n+  if (failcnt != 0)\n+    abort ();\n \n   return 0;\n }"}, {"sha": "bbda52c0773e1a68b0a27bf0c74cdc5bce0d5715", "filename": "gcc/testsuite/gcc.dg/dfp/func-scalar.c", "status": "modified", "additions": 30, "deletions": 17, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-scalar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-scalar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-scalar.c?ref=965ff67081ef58732db2256a1acba5cc3bb986be", "patch": "@@ -5,6 +5,16 @@\n    point types.  */\n \n extern void abort (void);\n+static int failcnt;\n+\n+/* Support compiling the test to report individual failures; default is\n+   to abort as soon as a check fails.  */\n+#ifdef DBG\n+#include <stdio.h>\n+#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n+#else\n+#define FAILURE abort ();\n+#endif\n \n /* A handful of functions that return their Nth _Decimal32\n    argument.  */\n@@ -150,44 +160,47 @@ main ()\n {\n   /* _Decimal32 variants.  */\n   if (arg0_32 (0.0df, 1.0df, 2.0df, 3.0df, 4.0df, 5.0df) != 0.0df)\n-    abort ();\n+    FAILURE\n   if (arg1_32 (0.0df, 1.0df, 2.0df, 3.0df, 4.0df, 5.0df) != 1.0df)\n-    abort ();\n+    FAILURE\n   if (arg2_32 (0.0df, 1.0df, 2.0df, 3.0df, 4.0df, 5.0df) != 2.0df)\n-    abort ();\n+    FAILURE\n   if (arg3_32 (0.0df, 1.0df, 2.0df, 3.0df, 4.0df, 5.0df) != 3.0df)\n-    abort ();\n+    FAILURE\n   if (arg4_32 (0.0df, 1.0df, 2.0df, 3.0df, 4.0df, 5.0df) != 4.0df)\n-    abort ();\n+    FAILURE\n   if (arg5_32 (0.0df, 1.0df, 2.0df, 3.0df, 4.0df, 5.0df) != 5.0df)\n-    abort ();\n+    FAILURE\n \n   /* _Decimal64 variants.  */\n   if (arg0_64 (0.0dd, 1.0dd, 2.0dd, 3.0dd, 4.0dd, 5.0dd) != 0.0dd)\n-    abort ();\n+    FAILURE\n   if (arg1_64 (0.0dd, 1.0dd, 2.0dd, 3.0dd, 4.0dd, 5.0dd) != 1.0dd)\n-    abort ();\n+    FAILURE\n   if (arg2_64 (0.0dd, 1.0dd, 2.0dd, 3.0dd, 4.0dd, 5.0dd) != 2.0dd)\n-    abort ();\n+    FAILURE\n   if (arg3_64 (0.0dd, 1.0dd, 2.0dd, 3.0dd, 4.0dd, 5.0dd) != 3.0dd)\n-    abort ();\n+    FAILURE\n   if (arg4_64 (0.0dd, 1.0dd, 2.0dd, 3.0dd, 4.0dd, 5.0dd) != 4.0dd)\n-    abort ();\n+    FAILURE\n   if (arg5_64 (0.0dd, 1.0dd, 2.0dd, 3.0dd, 4.0dd, 5.0dd) != 5.0dd)\n-    abort ();\n+    FAILURE\n \n   /* _Decimal128 variants.  */\n   if (arg0_128 (0.0dl, 1.0dl, 2.0dl, 3.0dl, 4.0dl, 5.0dl) != 0.0dl)\n-    abort ();\n+    FAILURE\n   if (arg1_128 (0.0dl, 1.0dl, 2.0dl, 3.0dl, 4.0dl, 5.0dl) != 1.0dl)\n-    abort ();\n+    FAILURE\n   if (arg2_128 (0.0dl, 1.0dl, 2.0dl, 3.0dl, 4.0dl, 5.0dl) != 2.0dl)\n-    abort ();\n+    FAILURE\n   if (arg3_128 (0.0dl, 1.0dl, 2.0dl, 3.0dl, 4.0dl, 5.0dl) != 3.0dl)\n-    abort ();\n+    FAILURE\n   if (arg4_128 (0.0dl, 1.0dl, 2.0dl, 3.0dl, 4.0dl, 5.0dl) != 4.0dl)\n-    abort ();\n+    FAILURE\n   if (arg5_128 (0.0dl, 1.0dl, 2.0dl, 3.0dl, 4.0dl, 5.0dl) != 5.0dl)\n+    FAILURE\n+\n+  if (failcnt != 0)\n     abort ();\n \n   return 0;"}, {"sha": "f022f181659f9019838e0d2e24223208d255cec5", "filename": "gcc/testsuite/gcc.dg/dfp/func-struct.c", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-struct.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-struct.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-struct.c?ref=965ff67081ef58732db2256a1acba5cc3bb986be", "patch": "@@ -5,6 +5,16 @@\n    point types.  */\n \n extern void abort (void);\n+static int failcnt;\n+\n+/* Support compiling the test to report individual failures; default is\n+   to abort as soon as a check fails.  */\n+#ifdef DBG\n+#include <stdio.h>\n+#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n+#else\n+#define FAILURE abort ();\n+#endif\n \n struct example\n {\n@@ -79,17 +89,20 @@ ptr_dummy2_field (struct example *s)\n int\n main ()\n {\n-  if (d32_field (nums) != 3.0df) abort ();\n-  if (d64_field (nums) != 2.0dd) abort ();\n-  if (d128_field (nums) != 1.0dl) abort ();\n-  if (dummy1_field (nums) != 'a') abort ();\n-  if (dummy2_field (nums) != 'b') abort ();\n-\n-  if (ptr_d32_field (&nums) != 3.0df) abort ();\n-  if (ptr_d64_field (&nums) != 2.0dd) abort ();\n-  if (ptr_d128_field (&nums) != 1.0dl) abort ();\n-  if (ptr_dummy1_field (&nums) != 'a') abort ();\n-  if (ptr_dummy2_field (&nums) != 'b') abort ();\n+  if (d32_field (nums) != 3.0df) FAILURE\n+  if (d64_field (nums) != 2.0dd) FAILURE\n+  if (d128_field (nums) != 1.0dl) FAILURE\n+  if (dummy1_field (nums) != 'a') FAILURE\n+  if (dummy2_field (nums) != 'b') FAILURE\n+\n+  if (ptr_d32_field (&nums) != 3.0df) FAILURE\n+  if (ptr_d64_field (&nums) != 2.0dd) FAILURE\n+  if (ptr_d128_field (&nums) != 1.0dl) FAILURE\n+  if (ptr_dummy1_field (&nums) != 'a') FAILURE\n+  if (ptr_dummy2_field (&nums) != 'b') FAILURE\n+\n+  if (failcnt != 0)\n+    abort ();\n \n   return 0;\n }"}, {"sha": "1a681bcaf9b18aac919c16e0068d1d93c2de02d8", "filename": "gcc/testsuite/gcc.dg/dfp/func-vararg-dfp.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-dfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-dfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-dfp.c?ref=965ff67081ef58732db2256a1acba5cc3bb986be", "patch": "@@ -106,4 +106,5 @@ int main()\n \n   if (failcnt != 0)\n     abort ();\n+  return 0;\n }"}, {"sha": "49d15d2382dc2bfcea1059ef1197c79ef8f745a9", "filename": "gcc/testsuite/gcc.dg/dfp/operator-assignment.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-assignment.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965ff67081ef58732db2256a1acba5cc3bb986be/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-assignment.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-assignment.c?ref=965ff67081ef58732db2256a1acba5cc3bb986be", "patch": "@@ -6,10 +6,20 @@\n    float types cast to decimal float types.  */\n \n extern void abort (void);\n+static int failcnt;\n+\n+/* Support compiling the test to report individual failures; default is\n+   to abort as soon as a check fails.  */\n+#ifdef DBG\n+#include <stdio.h>\n+#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n+#else\n+#define FAILURE abort ();\n+#endif\n \n #define OPERATE(OPRD1,OPRT,OPRD2,RLT)\t\t\\\n   if (( OPRD1 OPRT OPRD2 )!= RLT)\t\t\\\n-    abort ();\n+    FAILURE\n \n #define DECIMAL_COMPOUND_ASSIGNMENT(TYPE, OPRD)\t\\\n {\t\t\t\t\t\t\\\n@@ -54,5 +64,8 @@ main ()\n   DECIMAL_COMPOUND_ASSIGNMENT(64, d64);\n   DECIMAL_COMPOUND_ASSIGNMENT(128, d128);\n \n+  if (failcnt != 0)\n+    abort ();\n+\n   return 0;\n }"}]}