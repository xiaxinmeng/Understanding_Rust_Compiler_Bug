{"sha": "e133041bb61c6304eea47dca57fe48c3bd387ab8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTEzMzA0MWJiNjFjNjMwNGVlYTQ3ZGNhNTdmZTQ4YzNiZDM4N2FiOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-05-26T02:03:35Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-26T02:03:35Z"}, "message": "sparc.c (sparc_output_mi_thunk): New implementation using rtl instead of fprintf.\n\n        * config/sparc/sparc.c (sparc_output_mi_thunk): New implementation\n        using rtl instead of fprintf.\n        * config/sparc/sparc.h (ASM_OUTPUT_MI_THUNK): Use it.\n        * config/sparc/sparc-protos.h: Update.\n\nFrom-SVN: r53880", "tree": {"sha": "bc5511a93e012f40ca3a45104f3917b538ea8f9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc5511a93e012f40ca3a45104f3917b538ea8f9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e133041bb61c6304eea47dca57fe48c3bd387ab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e133041bb61c6304eea47dca57fe48c3bd387ab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e133041bb61c6304eea47dca57fe48c3bd387ab8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e133041bb61c6304eea47dca57fe48c3bd387ab8/comments", "author": null, "committer": null, "parents": [{"sha": "2dff889ead0aa83aa45cd09e19e08eadcaa8895b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dff889ead0aa83aa45cd09e19e08eadcaa8895b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dff889ead0aa83aa45cd09e19e08eadcaa8895b"}], "stats": {"total": 97, "additions": 79, "deletions": 18}, "files": [{"sha": "e76b87f6f0315349519d514b3f057150c8a65e22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e133041bb61c6304eea47dca57fe48c3bd387ab8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e133041bb61c6304eea47dca57fe48c3bd387ab8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e133041bb61c6304eea47dca57fe48c3bd387ab8", "patch": "@@ -1,3 +1,11 @@\n+2002-05-25  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/6788\n+\t* config/sparc/sparc.c (sparc_output_mi_thunk): New implementation\n+\tusing rtl instead of fprintf.\n+\t* config/sparc/sparc.h (ASM_OUTPUT_MI_THUNK): Use it.\n+\t* config/sparc/sparc-protos.h: Update.\n+\n 2002-05-25  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* Makefile.in (C_COMMON_H): Fix."}, {"sha": "c759631d60cb4092660c4b1184da6e8ba9364963", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e133041bb61c6304eea47dca57fe48c3bd387ab8/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e133041bb61c6304eea47dca57fe48c3bd387ab8/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=e133041bb61c6304eea47dca57fe48c3bd387ab8", "patch": "@@ -124,4 +124,6 @@ extern int sparc_extra_constraint_check PARAMS ((rtx, int, int));\n extern int sparc_rtx_costs PARAMS ((rtx, enum rtx_code, enum rtx_code));\n #endif /* RTX_CODE */\n \n+extern void sparc_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n+\n #endif /* __SPARC_PROTOS_H__ */"}, {"sha": "acc04d2e8676f25d23f528a1f9353c41df7a4df9", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e133041bb61c6304eea47dca57fe48c3bd387ab8/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e133041bb61c6304eea47dca57fe48c3bd387ab8/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=e133041bb61c6304eea47dca57fe48c3bd387ab8", "patch": "@@ -8474,3 +8474,70 @@ sparc_encode_section_info (decl, first)\n   if (TARGET_CM_EMBMEDANY && TREE_CODE (decl) == FUNCTION_DECL)\n     SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n }\n+\n+/* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n+   Used for C++ multiple inheritance.  */\n+\n+void\n+sparc_output_mi_thunk (file, thunk_fndecl, delta, function)\n+     FILE *file;\n+     tree thunk_fndecl ATTRIBUTE_UNUSED;\n+     HOST_WIDE_INT delta;\n+     tree function;\n+{\n+  rtx this, insn, funexp, delta_rtx, tmp;\n+\n+  reload_completed = 1;\n+  no_new_pseudos = 1;\n+  current_function_uses_only_leaf_regs = 1;\n+\n+  emit_note (NULL, NOTE_INSN_PROLOGUE_END);\n+\n+  /* Find the \"this\" pointer.  Normally in %o0, but in ARCH64 if the function\n+     returns a structure, the structure return pointer is there instead.  */\n+  if (TARGET_ARCH64 && aggregate_value_p (TREE_TYPE (TREE_TYPE (function))))\n+    this = gen_rtx_REG (Pmode, SPARC_INCOMING_INT_ARG_FIRST + 1);\n+  else\n+    this = gen_rtx_REG (Pmode, SPARC_INCOMING_INT_ARG_FIRST);\n+\n+  /* Add DELTA.  When possible use a plain add, otherwise load it into\n+     a register first.  */\n+  delta_rtx = GEN_INT (delta);\n+  if (!SPARC_SIMM13_P (delta))\n+    {\n+      rtx scratch = gen_rtx_REG (Pmode, 1);\n+      if (TARGET_ARCH64)\n+\tsparc_emit_set_const64 (scratch, delta_rtx);\n+      else\n+\tsparc_emit_set_const32 (scratch, delta_rtx);\n+      delta_rtx = scratch;\n+    }\n+\n+  tmp = gen_rtx_PLUS (Pmode, this, delta_rtx);\n+  emit_insn (gen_rtx_SET (VOIDmode, this, tmp));\n+\n+  /* Generate a tail call to the target function.  */\n+  if (! TREE_USED (function))\n+    {\n+      assemble_external (function);\n+      TREE_USED (function) = 1;\n+    }\n+  funexp = XEXP (DECL_RTL (function), 0);\n+  funexp = gen_rtx_MEM (FUNCTION_MODE, funexp);\n+  insn = emit_call_insn (gen_sibcall (funexp));\n+  SIBLING_CALL_P (insn) = 1;\n+  emit_barrier ();\n+\n+  /* Run just enough of rest_of_compilation to get the insns emitted.\n+     There's not really enough bulk here to make other passes such as\n+     instruction scheduling worth while.  Note that use_thunk calls\n+     assemble_start_function and assemble_end_function.  */\n+  insn = get_insns ();\n+  shorten_branches (insn);\n+  final_start_function (insn, file, 1);\n+  final (insn, file, 1, 0);\n+  final_end_function ();\n+\n+  reload_completed = 0;\n+  no_new_pseudos = 0;\n+}"}, {"sha": "12490d38a4232cea59e1838823a2c7066b169a93", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e133041bb61c6304eea47dca57fe48c3bd387ab8/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e133041bb61c6304eea47dca57fe48c3bd387ab8/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=e133041bb61c6304eea47dca57fe48c3bd387ab8", "patch": "@@ -2874,24 +2874,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n    Used for C++ multiple inheritance.  */\n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  int reg = 0;\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_ARCH64\t\t\t\t\t\t\t\\\n-      && aggregate_value_p (TREE_TYPE (TREE_TYPE (FUNCTION))))\t\t\\\n-    reg = 1;\t\t\t\t\t\t\t\t\\\n-  if ((DELTA) >= 4096 || (DELTA) < -4096)\t\t\t\t\\\n-    fprintf (FILE, \"\\tset\\t%d, %%g1\\n\\tadd\\t%%o%d, %%g1, %%o%d\\n\",\t\\\n-\t     (int)(DELTA), reg, reg);\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tadd\\t%%o%d, %d, %%o%d\\n\", reg, (int)(DELTA), reg);\\\n-  fprintf (FILE, \"\\tor\\t%%o7, %%g0, %%g1\\n\");\t\t\t\t\\\n-  fprintf (FILE, \"\\tcall\\t\");\t\t\t\t\t\t\\\n-  assemble_name (FILE, XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));\t\\\n-  fprintf (FILE, \", 0\\n\");\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\t or\\t%%g1, %%g0, %%o7\\n\");\t\t\t\t\\\n-} while (0)\n+#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION) \\\n+  sparc_output_mi_thunk (FILE, THUNK_FNDECL, DELTA, FUNCTION)\n \n #define PRINT_OPERAND_PUNCT_VALID_P(CHAR) \\\n   ((CHAR) == '#' || (CHAR) == '*' || (CHAR) == '^' || (CHAR) == '(' || (CHAR) == '_')"}]}