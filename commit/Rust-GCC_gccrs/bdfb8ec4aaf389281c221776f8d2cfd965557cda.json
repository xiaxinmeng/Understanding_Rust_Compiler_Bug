{"sha": "bdfb8ec4aaf389281c221776f8d2cfd965557cda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRmYjhlYzRhYWYzODkyODFjMjIxNzc2ZjhkMmNmZDk2NTU1N2NkYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-31T15:45:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-31T15:45:08Z"}, "message": "[multiple changes]\n\n2014-01-31  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch9.adb, s-tassta.adb, s-tposen.adb, s-tposen.ads: Minor\n\treformatting.\n\n2014-01-31  Tristan Gingold  <gingold@adacore.com>\n\n\t* exp_disp.adb: Add a historic note.\n\n2014-01-31  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_warn.adb (Warn_On_Useless_Assignments): Add call to\n\tProcess_Deferred_References.\n\n2014-01-31  Yannick Moy  <moy@adacore.com>\n\n\t* erroutc.adb (Validate_Specific_Warnings): Do not issue a message for\n\tineffective pragma Warnings(Off) in GNATprove_Mode.\n\nFrom-SVN: r207351", "tree": {"sha": "5aa5a46f53fa07055ad80bd4dd393de58bb23341", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5aa5a46f53fa07055ad80bd4dd393de58bb23341"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdfb8ec4aaf389281c221776f8d2cfd965557cda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdfb8ec4aaf389281c221776f8d2cfd965557cda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdfb8ec4aaf389281c221776f8d2cfd965557cda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdfb8ec4aaf389281c221776f8d2cfd965557cda/comments", "author": null, "committer": null, "parents": [{"sha": "5b0e6852b1c277ca2e74ba50de7704fb740a2e5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b0e6852b1c277ca2e74ba50de7704fb740a2e5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b0e6852b1c277ca2e74ba50de7704fb740a2e5e"}], "stats": {"total": 164, "additions": 97, "deletions": 67}, "files": [{"sha": "aa976653f2a37a20c0de7244198a860856d7b81e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfb8ec4aaf389281c221776f8d2cfd965557cda/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfb8ec4aaf389281c221776f8d2cfd965557cda/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bdfb8ec4aaf389281c221776f8d2cfd965557cda", "patch": "@@ -1,3 +1,22 @@\n+2014-01-31  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch9.adb, s-tassta.adb, s-tposen.adb, s-tposen.ads: Minor\n+\treformatting.\n+\n+2014-01-31  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* exp_disp.adb: Add a historic note.\n+\n+2014-01-31  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Useless_Assignments): Add call to\n+\tProcess_Deferred_References.\n+\n+2014-01-31  Yannick Moy  <moy@adacore.com>\n+\n+\t* erroutc.adb (Validate_Specific_Warnings): Do not issue a message for\n+\tineffective pragma Warnings(Off) in GNATprove_Mode.\n+\n 2014-01-31  Bob Duff  <duff@adacore.com>\n \n \t* s-taskin.ads: Minor comment fix."}, {"sha": "f70fc60d926ccfdbabcf62da3477b2c37248ce98", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfb8ec4aaf389281c221776f8d2cfd965557cda/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfb8ec4aaf389281c221776f8d2cfd965557cda/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=bdfb8ec4aaf389281c221776f8d2cfd965557cda", "patch": "@@ -1318,6 +1318,13 @@ package body Erroutc is\n \n                elsif not SWE.Used\n \n+                 --  Do not issue this warning in GNATprove_Mode, as not\n+                 --  all warnings may be generated in this mode, and pragma\n+                 --  Warnings(Off) may correspond to warnings generated by the\n+                 --  formal verification backend instead of frontend warnings.\n+\n+                 and then not GNATprove_Mode\n+\n                  --  Do not issue this warning for -Wxxx messages since the\n                  --  back-end doesn't report the information.\n "}, {"sha": "1f9e05bd8754af94a77314e013d54c42821a6304", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 35, "deletions": 41, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfb8ec4aaf389281c221776f8d2cfd965557cda/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfb8ec4aaf389281c221776f8d2cfd965557cda/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=bdfb8ec4aaf389281c221776f8d2cfd965557cda", "patch": "@@ -4723,7 +4723,6 @@ package body Exp_Ch9 is\n \n             Actual := First_Actual (N);\n             Formal := First_Formal (Ent);\n-\n             while Present (Actual) loop\n \n                --  If it is a by_copy_type, copy it to a new variable. The\n@@ -4786,7 +4785,7 @@ package body Exp_Ch9 is\n                   Append_To (Plist,\n                     Make_Attribute_Reference (Loc,\n                       Attribute_Name => Name_Unchecked_Access,\n-                    Prefix =>\n+                    Prefix           =>\n                       New_Reference_To (Defining_Identifier (N_Node), Loc)));\n \n                else\n@@ -4834,9 +4833,9 @@ package body Exp_Ch9 is\n             Pdecl :=\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => P,\n-                Object_Definition =>\n+                Object_Definition   =>\n                   New_Reference_To (Designated_Type (Ent_Acc), Loc),\n-                Expression =>\n+                Expression          =>\n                   Make_Aggregate (Loc, Expressions => Plist));\n \n             Parm3 :=\n@@ -5064,8 +5063,8 @@ package body Exp_Ch9 is\n          else\n             if Present (Handled_Statement_Sequence (N)) then\n \n-               --  The call goes at the start of the statement sequence\n-               --  after the start of exception range label if one is present.\n+               --  The call goes at the start of the statement sequence after\n+               --  the start of exception range label if one is present.\n \n                declare\n                   Stm : Node_Id;\n@@ -5106,7 +5105,7 @@ package body Exp_Ch9 is\n             else\n                Set_Handled_Statement_Sequence (N,\n                   Make_Handled_Sequence_Of_Statements (Loc,\n-                     Statements => New_List (Call)));\n+                    Statements => New_List (Call)));\n             end if;\n          end if;\n \n@@ -5151,13 +5150,13 @@ package body Exp_Ch9 is\n \n               Statements => New_List (\n \n-               --  Init (Args);\n+                --  Init (Args);\n \n                 Make_Procedure_Call_Statement (Loc,\n-                  Name => New_Reference_To (Init, Loc),\n+                  Name                   => New_Reference_To (Init, Loc),\n                   Parameter_Associations => Args),\n \n-               --  Activate_Tasks (_Chain);\n+                --  Activate_Tasks (_Chain);\n \n                 Make_Procedure_Call_Statement (Loc,\n                   Name => New_Reference_To (RTE (RE_Activate_Tasks), Loc),\n@@ -5212,7 +5211,7 @@ package body Exp_Ch9 is\n \n             Make_Object_Declaration (Loc,\n               Defining_Identifier => Chain,\n-              Aliased_Present => True,\n+              Aliased_Present     => True,\n               Object_Definition   =>\n                 New_Reference_To (RTE (RE_Activation_Chain), Loc))),\n \n@@ -5245,15 +5244,13 @@ package body Exp_Ch9 is\n \n       if Comes_From_Source (T) then\n          Spec_Id :=\n-           Make_Defining_Identifier (Loc,\n-             Chars => New_External_Name (Chars (T), \"TB\"));\n+           Make_Defining_Identifier (Loc, New_External_Name (Chars (T), \"TB\"));\n \n       --  Case of anonymous task type, suffix B\n \n       else\n          Spec_Id :=\n-           Make_Defining_Identifier (Loc,\n-             Chars => New_External_Name (Chars (T), 'B'));\n+           Make_Defining_Identifier (Loc, New_External_Name (Chars (T), 'B'));\n       end if;\n \n       Set_Is_Internal (Spec_Id);\n@@ -5382,7 +5379,7 @@ package body Exp_Ch9 is\n \n             Append_To (Cdecls,\n               Make_Component_Declaration (Loc,\n-                Defining_Identifier =>\n+                Defining_Identifier  =>\n                   Make_Defining_Identifier (Loc, Chars (Efam)),\n \n                 Component_Definition =>\n@@ -5393,12 +5390,12 @@ package body Exp_Ch9 is\n                         Subtype_Mark =>\n                           New_Occurrence_Of (Efam_Type, Loc),\n \n-                        Constraint  =>\n+                        Constraint   =>\n                           Make_Index_Or_Discriminant_Constraint (Loc,\n                             Constraints => New_List (\n                               New_Occurrence_Of\n                                 (Etype (Discrete_Subtype_Definition\n-                                  (Parent (Efam))), Loc)))))));\n+                                          (Parent (Efam))), Loc)))))));\n \n          end if;\n \n@@ -5528,9 +5525,7 @@ package body Exp_Ch9 is\n             --  assume that it can be called from an inner task, and therefore\n             --  cannot treat it as a local reference.\n \n-            elsif Is_Overloadable (Scop)\n-              and then In_Open_Scopes (T)\n-            then\n+            elsif Is_Overloadable (Scop) and then In_Open_Scopes (T) then\n                return False;\n \n             else\n@@ -5558,7 +5553,7 @@ package body Exp_Ch9 is\n \n          return\n            Make_Selected_Component (Loc,\n-             Prefix =>\n+             Prefix        =>\n                Unchecked_Convert_To (Corresponding_Record_Type (Dtyp),\n                  Make_Explicit_Dereference (Loc, N)),\n              Selector_Name => Make_Identifier (Loc, Sel));\n@@ -5820,8 +5815,8 @@ package body Exp_Ch9 is\n       if Restriction_Active (No_Task_Hierarchy) = False then\n          Call := Build_Runtime_Call (Sloc (N), RE_Enter_Master);\n \n-         --  The block may have no declarations, and nevertheless be a task\n-         --  master, if it contains a call that may return an object that\n+         --  The block may have no declarations (and nevertheless be a task\n+         --  master) if it contains a call that may return an object that\n          --  contains tasks.\n \n          if No (Declarations (N)) then\n@@ -5993,10 +5988,10 @@ package body Exp_Ch9 is\n                   Next (Alt);\n                end loop;\n \n-               --  If we are the first accept statement, then we have to create\n-               --  the Ann variable, as for the stand alone case, except that\n-               --  it is inserted before the selective accept. Similarly, a\n-               --  label for requeue expansion must be declared.\n+               --  If this is the first accept statement, then we have to\n+               --  create the Ann variable, as for the stand alone case, except\n+               --  that it is inserted before the selective accept. Similarly,\n+               --  a label for requeue expansion must be declared.\n \n                if N = Accept_Statement (Alt) then\n                   Ann := Make_Temporary (Loc, 'A');\n@@ -6008,7 +6003,7 @@ package body Exp_Ch9 is\n \n                   Insert_Before_And_Analyze (Sel_Acc, Adecl);\n \n-               --  If we are not the first accept statement, then find the Ann\n+               --  If this is not the first accept statement, then find the Ann\n                --  variable allocated by the first accept and use it.\n \n                else\n@@ -6227,7 +6222,7 @@ package body Exp_Ch9 is\n       --  The Ravenscar profile restricts barriers to simple variables declared\n       --  within the protected object. We also allow Boolean constants, since\n       --  these appear in several published examples and are also allowed by\n-      --  the Aonix compiler.\n+      --  other compilers.\n \n       --  Note that after analysis variables in this context will be replaced\n       --  by the corresponding prival, that is to say a renaming of a selected\n@@ -6300,8 +6295,8 @@ package body Exp_Ch9 is\n       while Present (Tasknm) loop\n          Count := Count + 1;\n \n-         --  A task interface class-wide type object is being aborted.\n-         --  Retrieve its _task_id by calling a dispatching routine.\n+         --  A task interface class-wide type object is being aborted. Retrieve\n+         --  its _task_id by calling a dispatching routine.\n \n          if Ada_Version >= Ada_2005\n            and then Ekind (Etype (Tasknm)) = E_Class_Wide_Type\n@@ -6349,14 +6344,14 @@ package body Exp_Ch9 is\n    -- Expand_N_Accept_Statement --\n    -------------------------------\n \n-   --  This procedure handles expansion of accept statements that stand\n-   --  alone, i.e. they are not part of an accept alternative. The expansion\n-   --  of accept statement in accept alternatives is handled by the routines\n+   --  This procedure handles expansion of accept statements that stand alone,\n+   --  i.e. they are not part of an accept alternative. The expansion of\n+   --  accept statement in accept alternatives is handled by the routines\n    --  Expand_N_Accept_Alternative and Expand_N_Selective_Accept. The\n    --  following description applies only to stand alone accept statements.\n \n-   --  If there is no handled statement sequence, or only null statements,\n-   --  then this is called a trivial accept, and the expansion is:\n+   --  If there is no handled statement sequence, or only null statements, then\n+   --  this is called a trivial accept, and the expansion is:\n \n    --    Accept_Trivial (entry-index)\n \n@@ -6399,7 +6394,7 @@ package body Exp_Ch9 is\n    --  an accept statement has no declarative part). In particular, if the\n    --  expander is active, the first such declaration is the declaration of\n    --  the Accept_Params_Ptr entity (see Sem_Ch9.Analyze_Accept_Statement).\n-   --\n+\n    --  The two blocks are merged into a single block if the inner block has\n    --  no exception handlers, but otherwise two blocks are required, since\n    --  exceptions might be raised in the exception handlers of the inner\n@@ -6443,7 +6438,6 @@ package body Exp_Ch9 is\n \n          begin\n             D := First (Declarations (N));\n-\n             while Present (D) loop\n                Next_D := Next (D);\n                if Nkind (D) = N_Object_Renaming_Declaration then\n@@ -6806,8 +6800,8 @@ package body Exp_Ch9 is\n \n    --  The job is to convert this to the asynchronous form\n \n-   --  If the trigger is a delay statement, it will have been expanded into a\n-   --  call to one of the GNARL delay procedures. This routine will convert\n+   --  If the trigger is a delay statement, it will have been expanded into\n+   --  a call to one of the GNARL delay procedures. This routine will convert\n    --  this into a protected entry call on a delay object and then continue\n    --  processing as for a protected entry call trigger. This requires\n    --  declaring a Delay_Block object and adding a pointer to this object to"}, {"sha": "33275d506d7d2f5aebe3176580a5b041f75a6145", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfb8ec4aaf389281c221776f8d2cfd965557cda/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfb8ec4aaf389281c221776f8d2cfd965557cda/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=bdfb8ec4aaf389281c221776f8d2cfd965557cda", "patch": "@@ -3522,6 +3522,13 @@ package body Exp_Disp is\n             --  the wrapped parameters, D is the delay amount, M is the delay\n             --  mode and F is the status flag.\n \n+            --  Historically, there was also an implementation for single\n+            --  entry protected types (in s-tposen). However, it was removed\n+            --  by also testing for no No_Select_Statements restriction in\n+            --  Exp_Utils.Corresponding_Runtime_Package. This simplified the\n+            --  implementation of s-tposen, which was initially created for\n+            --  the Ravenscar profile.\n+\n             case Corresponding_Runtime_Package (Conc_Typ) is\n                when System_Tasking_Protected_Objects_Entries =>\n                   Append_To (Stmts,"}, {"sha": "58e8f98b59c4103b4d906933d5322a7580a54cf3", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfb8ec4aaf389281c221776f8d2cfd965557cda/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfb8ec4aaf389281c221776f8d2cfd965557cda/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=bdfb8ec4aaf389281c221776f8d2cfd965557cda", "patch": "@@ -150,14 +150,14 @@ package body System.Tasking.Stages is\n       C : Task_Id;\n       P : Task_Id;\n \n-      --  Each task C will take care of its own dependents, so there is no need\n-      --  to worry about them here. In fact, it would be wrong to abort\n+      --  Each task C will take care of its own dependents, so there is no\n+      --  need to worry about them here. In fact, it would be wrong to abort\n       --  indirect dependents here, because we can't distinguish between\n-      --  duplicate master ids. For example, suppose we have three nested task\n-      --  bodies T1,T2,T3. And suppose T1 also calls P which calls Q (and both\n-      --  P and Q are task masters). Q will have the same master id as\n-      --  Master_of_Task of T3. Previous versions of this would abort T3 when Q\n-      --  calls Complete_Master, which was completely wrong.\n+      --  duplicate master ids. For example, suppose we have three nested\n+      --  task bodies T1,T2,T3. And suppose T1 also calls P which calls Q (and\n+      --  both P and Q are task masters). Q will have the same master id as\n+      --  Master_of_Task of T3. Previous versions of this would abort T3 when\n+      --  Q calls Complete_Master, which was completely wrong.\n \n    begin\n       C := All_Tasks_List;"}, {"sha": "4487c5eee2c1d4ab97468b79369782454af88c45", "filename": "gcc/ada/s-tposen.adb", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfb8ec4aaf389281c221776f8d2cfd965557cda/gcc%2Fada%2Fs-tposen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfb8ec4aaf389281c221776f8d2cfd965557cda/gcc%2Fada%2Fs-tposen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tposen.adb?ref=bdfb8ec4aaf389281c221776f8d2cfd965557cda", "patch": "@@ -54,7 +54,7 @@ pragma Style_Checks (All_Checks);\n \n pragma Polling (Off);\n --  Turn off polling, we do not want polling to take place during tasking\n---  operations. It can cause  infinite loops and other problems.\n+--  operations. It can cause infinite loops and other problems.\n \n pragma Suppress (All_Checks);\n --  Why is this required ???\n@@ -84,10 +84,9 @@ package body System.Tasking.Protected_Objects.Single_Entry is\n \n    procedure Wakeup_Entry_Caller (Entry_Call : Entry_Call_Link);\n    pragma Inline (Wakeup_Entry_Caller);\n-   --  This is called at the end of service of an entry call,\n-   --  to abort the caller if he is in an abortable part, and\n-   --  to wake up the caller if he is on Entry_Caller_Sleep.\n-   --  Call it holding the lock of Entry_Call.Self.\n+   --  This is called at the end of service of an entry call, to abort the\n+   --  caller if he is in an abortable part, and to wake up the caller if he\n+   --  is on Entry_Caller_Sleep. Call it holding the lock of Entry_Call.Self.\n \n    procedure Wait_For_Completion (Entry_Call : Entry_Call_Link);\n    pragma Inline (Wait_For_Completion);\n@@ -100,17 +99,16 @@ package body System.Tasking.Protected_Objects.Single_Entry is\n      (Self_ID : Task_Id;\n       Entry_Call : Entry_Call_Link);\n    pragma Inline (Check_Exception);\n-   --  Raise any pending exception from the Entry_Call.\n-   --  This should be called at the end of every compiler interface procedure\n-   --  that implements an entry call.\n-   --  The caller should not be holding any locks, or there will be deadlock.\n+   --  Raise any pending exception from the Entry_Call. This should be called\n+   --  at the end of every compiler interface procedure that implements an\n+   --  entry call. The caller should not be holding any locks, or there will\n+   --  be deadlock.\n \n    procedure PO_Do_Or_Queue\n      (Object     : Protection_Entry_Access;\n       Entry_Call : Entry_Call_Link);\n-   --  This procedure executes or queues an entry call, depending\n-   --  on the status of the corresponding barrier. It assumes that the\n-   --  specified object is locked.\n+   --  This procedure executes or queues an entry call, depending on the status\n+   --  of the corresponding barrier. The specified object is assumed locked.\n \n    ---------------------\n    -- Check_Exception --\n@@ -140,9 +138,9 @@ package body System.Tasking.Protected_Objects.Single_Entry is\n    -- Send_Program_Error --\n    ------------------------\n \n-   procedure Send_Program_Error (Entry_Call : Entry_Call_Link)\n-   is\n+   procedure Send_Program_Error (Entry_Call : Entry_Call_Link) is\n       Caller : constant Task_Id := Entry_Call.Self;\n+\n    begin\n       Entry_Call.Exception_To_Raise := Program_Error'Identity;\n \n@@ -192,7 +190,6 @@ package body System.Tasking.Protected_Objects.Single_Entry is\n       pragma Assert\n         (Caller.Common.State /= Terminated and then\n          Caller.Common.State /= Unactivated);\n-\n       Entry_Call.State := Done;\n       STPO.Wakeup (Caller, Entry_Caller_Sleep);\n    end Wakeup_Entry_Caller;\n@@ -207,7 +204,8 @@ package body System.Tasking.Protected_Objects.Single_Entry is\n \n    procedure Exceptional_Complete_Single_Entry_Body\n      (Object : Protection_Entry_Access;\n-      Ex     : Ada.Exceptions.Exception_Id) is\n+      Ex     : Ada.Exceptions.Exception_Id)\n+   is\n    begin\n       Object.Call_In_Progress.Exception_To_Raise := Ex;\n    end Exceptional_Complete_Single_Entry_Body;\n@@ -235,7 +233,8 @@ package body System.Tasking.Protected_Objects.Single_Entry is\n    -- Lock_Entry --\n    ----------------\n \n-   --  Compiler interface only.\n+   --  Compiler interface only\n+\n    --  Do not call this procedure from within the run-time system.\n \n    procedure Lock_Entry (Object : Protection_Entry_Access) is\n@@ -391,7 +390,8 @@ package body System.Tasking.Protected_Objects.Single_Entry is\n    -----------------------------------\n \n    function Protected_Single_Entry_Caller\n-     (Object : Protection_Entry) return Task_Id is\n+     (Object : Protection_Entry) return Task_Id\n+   is\n    begin\n       return Object.Call_In_Progress.Self;\n    end Protected_Single_Entry_Caller;"}, {"sha": "3bb0aa8e6d1bdd37782f927eece3f3fe4e2ca63d", "filename": "gcc/ada/s-tposen.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfb8ec4aaf389281c221776f8d2cfd965557cda/gcc%2Fada%2Fs-tposen.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfb8ec4aaf389281c221776f8d2cfd965557cda/gcc%2Fada%2Fs-tposen.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tposen.ads?ref=bdfb8ec4aaf389281c221776f8d2cfd965557cda", "patch": "@@ -228,7 +228,7 @@ package System.Tasking.Protected_Objects.Single_Entry is\n       Uninterpreted_Data  : System.Address);\n    --  Make a protected entry call to the specified object\n    --\n-   --  Pend a protected entry call on the protected object represented by\n+   --  Pends a protected entry call on the protected object represented by\n    --  Object. A pended call is not queued; it may be executed immediately\n    --  or queued, depending on the state of the entry barrier.\n    --"}, {"sha": "6193a8f705aca6e53257fb338cc79b098e5960c7", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfb8ec4aaf389281c221776f8d2cfd965557cda/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfb8ec4aaf389281c221776f8d2cfd965557cda/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=bdfb8ec4aaf389281c221776f8d2cfd965557cda", "patch": "@@ -4244,7 +4244,10 @@ package body Sem_Warn is\n \n    procedure Warn_On_Useless_Assignments (E : Entity_Id) is\n       Ent : Entity_Id;\n+\n    begin\n+      Process_Deferred_References;\n+\n       if Warn_On_Modified_Unread\n         and then In_Extended_Main_Source_Unit (E)\n       then"}]}