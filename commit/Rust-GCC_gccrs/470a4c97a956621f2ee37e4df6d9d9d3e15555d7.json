{"sha": "470a4c97a956621f2ee37e4df6d9d9d3e15555d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcwYTRjOTdhOTU2NjIxZjJlZTM3ZTRkZjZkOWQ5ZDNlMTU1NTVkNw==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2008-05-15T21:07:38Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2008-05-15T21:07:38Z"}, "message": "avr.c (avr_base_arch_macro, [...]): Remove variables.\n\n\t* config/avr/avr.c (avr_base_arch_macro, avr_have_movw_lpmx_p, \n\tavr_have_mul_p, avr_asm_only_p): Remove variables.\n\t(avr_override_options): Remove initialization of removed variables.\n\t(avr_file_start):  Convert removed variables to fields of \n\t'struct base_arch_s *avr_current_arch'. \n\t* config/avr/avr.h (TARGET_CPU_CPP_BUILTINS): (Ditto.).\n\t(AVR_HAVE_MUL): (Ditto.).\n\t(AVR_HAVE_MOVW): (Ditto.).\n\t(AVR_HAVE_LPMX): (Ditto.). \n\t(avr_base_arch_macro, avr_have_movw_lpmx_p, avr_have_mul_p, \n\tavr_asm_only_p): Remove declaration.\n\nFrom-SVN: r135396", "tree": {"sha": "c8886a45e3cf36d0d903485ab2ed3da7fe4543ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8886a45e3cf36d0d903485ab2ed3da7fe4543ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/470a4c97a956621f2ee37e4df6d9d9d3e15555d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/470a4c97a956621f2ee37e4df6d9d9d3e15555d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/470a4c97a956621f2ee37e4df6d9d9d3e15555d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/470a4c97a956621f2ee37e4df6d9d9d3e15555d7/comments", "author": null, "committer": null, "parents": [{"sha": "f4dea66f0ad0a596ca477777a952148e58cd5319", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4dea66f0ad0a596ca477777a952148e58cd5319", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4dea66f0ad0a596ca477777a952148e58cd5319"}], "stats": {"total": 74, "additions": 36, "deletions": 38}, "files": [{"sha": "d5f25c9edc3a155f41933f467ad8430d28b609f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/470a4c97a956621f2ee37e4df6d9d9d3e15555d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/470a4c97a956621f2ee37e4df6d9d9d3e15555d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=470a4c97a956621f2ee37e4df6d9d9d3e15555d7", "patch": "@@ -1,3 +1,17 @@\n+2008-05-15  Anatoly Sokolov <aesok@post.ru>\n+\n+\t* config/avr/avr.c (avr_base_arch_macro, avr_have_movw_lpmx_p, \n+\tavr_have_mul_p, avr_asm_only_p): Remove variables.\n+\t(avr_override_options): Remove initialization of removed variables.\n+\t(avr_file_start):  Convert removed variables to fields of \n+\t'struct base_arch_s *avr_current_arch'. \n+\t* config/avr/avr.h (TARGET_CPU_CPP_BUILTINS): (Ditto.).\n+\t(AVR_HAVE_MUL): (Ditto.).\n+\t(AVR_HAVE_MOVW): (Ditto.).\n+\t(AVR_HAVE_LPMX): (Ditto.). \n+\t(avr_base_arch_macro, avr_have_movw_lpmx_p, avr_have_mul_p, \n+\tavr_asm_only_p): Remove declaration.\n+\n 2008-05-15  Diego Novillo  <dnovillo@google.com>\n \n \t* config/arm/arm.c (arm_return_in_memory): Fix return"}, {"sha": "9a860533e9a576894e82b25e1ae2645f7673680c", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/470a4c97a956621f2ee37e4df6d9d9d3e15555d7/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/470a4c97a956621f2ee37e4df6d9d9d3e15555d7/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=470a4c97a956621f2ee37e4df6d9d9d3e15555d7", "patch": "@@ -97,23 +97,13 @@ static const char *const avr_regnames[] = REGISTER_NAMES;\n static int last_insn_address = 0;\n \n /* Preprocessor macros to define depending on MCU type.  */\n-const char *avr_base_arch_macro;\n const char *avr_extra_arch_macro;\n \n /* Current architecture.  */\n const struct base_arch_s *avr_current_arch;\n \n section *progmem_section;\n \n-/* Core have 'MUL*' instructions.  */\n-int avr_have_mul_p = 0;\n-\n-/* Assembler only.  */\n-int avr_asm_only_p = 0;\n-\n-/* Core have 'MOVW' and 'LPM Rx,Z' instructions.  */\n-int avr_have_movw_lpmx_p = 0;\n-\n static const struct base_arch_s avr_arch_types[] = {\n   { 1, 0, 0, 0, 0, 0, 0, 0, NULL },  /* unknown device specified */\n   { 1, 0, 0, 0, 0, 0, 0, 0, \"__AVR_ARCH__=1\"   },\n@@ -337,7 +327,6 @@ void\n avr_override_options (void)\n {\n   const struct mcu_type_s *t;\n-  const struct base_arch_s *base;\n \n   flag_delete_null_pointer_checks = 0;\n \n@@ -354,11 +343,6 @@ avr_override_options (void)\n     }\n \n   avr_current_arch = &avr_arch_types[t->arch];\n-  base = &avr_arch_types[t->arch];\n-  avr_asm_only_p = base->asm_only;\n-  avr_have_mul_p = base->have_mul;\n-  avr_have_movw_lpmx_p = base->have_movw_lpmx;\n-  avr_base_arch_macro = base->macro;\n   avr_extra_arch_macro = t->macro;\n \n   if (optimize && !TARGET_NO_TABLEJUMP)\n@@ -4812,7 +4796,7 @@ avr_section_type_flags (tree decl, const char *name, int reloc)\n static void\n avr_file_start (void)\n {\n-  if (avr_asm_only_p)\n+  if (avr_current_arch->asm_only)\n     error (\"MCU %qs supported for assembler only\", avr_mcu_name);\n \n   default_file_start ();"}, {"sha": "5261d9d6ba547939762a9c413a315098d5401eef", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/470a4c97a956621f2ee37e4df6d9d9d3e15555d7/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/470a4c97a956621f2ee37e4df6d9d9d3e15555d7/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=470a4c97a956621f2ee37e4df6d9d9d3e15555d7", "patch": "@@ -56,8 +56,8 @@ extern const struct base_arch_s *avr_current_arch;\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n       builtin_define_std (\"AVR\");\t\t\\\n-      if (avr_base_arch_macro)\t\t\t\\\n-\tbuiltin_define (avr_base_arch_macro);\t\\\n+      if (avr_current_arch->macro)\t\t\\\n+\tbuiltin_define (avr_current_arch->macro);\t\\\n       if (avr_extra_arch_macro)\t\t\t\\\n \tbuiltin_define (avr_extra_arch_macro);\t\\\n       if (avr_current_arch->have_elpm)\t\t\\\n@@ -66,20 +66,23 @@ extern const struct base_arch_s *avr_current_arch;\n \tbuiltin_define (\"__AVR_HAVE_ELPM__\");\t\\\n       if (avr_current_arch->have_elpmx)\t\t\\\n \tbuiltin_define (\"__AVR_HAVE_ELPMX__\");\t\\\n-      if (avr_have_movw_lpmx_p)\t\t\t\\\n-\tbuiltin_define (\"__AVR_HAVE_MOVW__\");\t\\\n-      if (avr_have_movw_lpmx_p)\t\t\t\\\n-\tbuiltin_define (\"__AVR_HAVE_LPMX__\");\t\\\n-      if (avr_asm_only_p)\t\t\t\\\n+      if (avr_current_arch->have_movw_lpmx)\t\\\n+\t{\t\t\t\t\t\\\n+\t  builtin_define (\"__AVR_HAVE_MOVW__\");\t\\\n+\t  builtin_define (\"__AVR_HAVE_LPMX__\");\t\\\n+\t}\t\t\t\t\t\\\n+      if (avr_current_arch->asm_only)\t\t\\\n \tbuiltin_define (\"__AVR_ASM_ONLY__\");\t\\\n-      if (avr_have_mul_p)\t\t\t\\\n-\tbuiltin_define (\"__AVR_ENHANCED__\");\t\\\n-      if (avr_have_mul_p)\t\t\t\\\n-\tbuiltin_define (\"__AVR_HAVE_MUL__\");\t\\\n-      if (avr_current_arch->have_jmp_call)\t\\\n-\tbuiltin_define (\"__AVR_MEGA__\");\t\\\n+      if (avr_current_arch->have_mul)\t\t\\\n+\t{\t\t\t\t\t\\\n+\t  builtin_define (\"__AVR_ENHANCED__\");\t\\\n+\t  builtin_define (\"__AVR_HAVE_MUL__\");\t\\\n+ \t}\t\t\t\t\t\\\n       if (avr_current_arch->have_jmp_call)\t\\\n-\tbuiltin_define (\"__AVR_HAVE_JMP_CALL__\"); \\\n+\t{\t\t\t\t\t\\\n+\t  builtin_define (\"__AVR_MEGA__\");\t\\\n+\t  builtin_define (\"__AVR_HAVE_JMP_CALL__\");\t\\\n+ \t}\t\t\t\t\t\\\n       if (avr_current_arch->have_eijmp_eicall)\t\\\n         {\t\t\t\t\t\\\n \t  builtin_define (\"__AVR_HAVE_EIJMP_EICALL__\");\t\\\n@@ -94,19 +97,16 @@ extern const struct base_arch_s *avr_current_arch;\n     }\t\t\t\t\t\t\\\n   while (0)\n \n-extern const char *avr_base_arch_macro;\n extern const char *avr_extra_arch_macro;\n-extern int avr_have_mul_p;\n-extern int avr_asm_only_p;\n-extern int avr_have_movw_lpmx_p;\n+\n #if !defined(IN_LIBGCC2) && !defined(IN_TARGET_LIBS)\n extern GTY(()) section *progmem_section;\n #endif\n \n #define AVR_HAVE_JMP_CALL (avr_current_arch->have_jmp_call && !TARGET_SHORT_CALLS)\n-#define AVR_HAVE_MUL (avr_have_mul_p)\n-#define AVR_HAVE_MOVW (avr_have_movw_lpmx_p)\n-#define AVR_HAVE_LPMX (avr_have_movw_lpmx_p)\n+#define AVR_HAVE_MUL (avr_current_arch->have_mul)\n+#define AVR_HAVE_MOVW (avr_current_arch->have_movw_lpmx)\n+#define AVR_HAVE_LPMX (avr_current_arch->have_movw_lpmx)\n #define AVR_HAVE_RAMPZ (avr_current_arch->have_elpm)\n #define AVR_HAVE_EIJMP_EICALL (avr_current_arch->have_eijmp_eicall)\n "}]}