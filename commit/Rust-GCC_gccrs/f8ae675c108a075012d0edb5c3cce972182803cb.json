{"sha": "f8ae675c108a075012d0edb5c3cce972182803cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhhZTY3NWMxMDhhMDc1MDEyZDBlZGI1YzNjY2U5NzIxODI4MDNjYg==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-17T12:47:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-17T12:47:04Z"}, "message": "Merge #498\n\n498: Remove HIR::TraitItemMethod, this can be represented by TraitItemFunction r=philberty a=philberty\n\nCanonicalizing the paths of the compiler to treat functions and methods \r\nthe same way will ensure we avoid duplication.\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "cfb985a8dbd60780144cab50e3877c5208fc8632", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfb985a8dbd60780144cab50e3877c5208fc8632"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8ae675c108a075012d0edb5c3cce972182803cb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgy0RICRBK7hj4Ov3rIwAAn+0IAI4uqRDAYdfuk1ZoP8CJXhlO\nxpONbCwhM1sRYTyS8Uv9tmxPre6JYhn9NFdyjAgs6scg8H9SKALDXHjnAc/8DLXz\nE6RQilGUnk/COOIGxvsIZi4X3oHkVuveXkMkHBDygdqfsSlnjz78kILsyq3mcuaI\nAz4DxvrYiAGSnOA7I57aGe2WxkjkKHzPbdx/WtaG/xe5kxQbClHsCoKHddmu0TrS\nPzZ9HfTB+Kf5/vqfzMo/JTq1rdpl85e0Rkoz4WFp0GBqXvrdn1h+E+I1Ai6dW0Hg\nbHHMXJYxA9/raM+Zdjwoxe8qKfDRTQkMcvEHyBjRNWuAjWU7JJ7UH98xzJvWh30=\n=XiVk\n-----END PGP SIGNATURE-----\n", "payload": "tree cfb985a8dbd60780144cab50e3877c5208fc8632\nparent 3ab773c57c72969125220b9cedea1f85cef6c543\nparent 5290a82434aa95d1c62517b2318eed80ec55f8c3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623934024 +0000\ncommitter GitHub <noreply@github.com> 1623934024 +0000\n\nMerge #498\n\n498: Remove HIR::TraitItemMethod, this can be represented by TraitItemFunction r=philberty a=philberty\n\nCanonicalizing the paths of the compiler to treat functions and methods \r\nthe same way will ensure we avoid duplication.\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8ae675c108a075012d0edb5c3cce972182803cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8ae675c108a075012d0edb5c3cce972182803cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8ae675c108a075012d0edb5c3cce972182803cb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ab773c57c72969125220b9cedea1f85cef6c543", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ab773c57c72969125220b9cedea1f85cef6c543", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ab773c57c72969125220b9cedea1f85cef6c543"}, {"sha": "5290a82434aa95d1c62517b2318eed80ec55f8c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5290a82434aa95d1c62517b2318eed80ec55f8c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5290a82434aa95d1c62517b2318eed80ec55f8c3"}], "stats": {"total": 466, "additions": 108, "deletions": 358}, "files": [{"sha": "ed33515e9e0c09db32545073811fedbfaf590912", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=f8ae675c108a075012d0edb5c3cce972182803cb", "patch": "@@ -143,7 +143,6 @@ class HIRCompileBase : public HIR::HIRVisitor\n   virtual void visit (HIR::ConstantItem &const_item) {}\n   virtual void visit (HIR::StaticItem &static_item) {}\n   virtual void visit (HIR::TraitItemFunc &item) {}\n-  virtual void visit (HIR::TraitItemMethod &item) {}\n   virtual void visit (HIR::TraitItemConst &item) {}\n   virtual void visit (HIR::TraitItemType &item) {}\n   virtual void visit (HIR::Trait &trait) {}"}, {"sha": "e3f9558b4bb78d11719f3dced2196f8db8d6d09e", "filename": "gcc/rust/backend/rust-compile-fnparam.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h?ref=f8ae675c108a075012d0edb5c3cce972182803cb", "patch": "@@ -70,7 +70,10 @@ class CompileSelfParam : public HIRCompileBase\n \t\t\t     HIR::SelfParam &self, Btype *decl_type,\n \t\t\t     Location locus)\n   {\n-    if (!self.get_is_mut ())\n+    bool is_immutable\n+      = self.get_self_kind () == HIR::SelfParam::ImplicitSelfKind::IMM\n+\t|| self.get_self_kind () == HIR::SelfParam::ImplicitSelfKind::IMM_REF;\n+    if (is_immutable)\n       decl_type = ctx->get_backend ()->immutable_type (decl_type);\n \n     return ctx->get_backend ()->parameter_variable (fndecl, \"self\", decl_type,"}, {"sha": "2e7d4d8e6e95d911052738c4458d8eb5370250cb", "filename": "gcc/rust/hir/rust-ast-lower-implitem.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h?ref=f8ae675c108a075012d0edb5c3cce972182803cb", "patch": "@@ -313,6 +313,7 @@ class ASTLowerTraitItem : public ASTLoweringBase\n \n     HIR::TraitFunctionDecl decl (ref.get_identifier (), std::move (qualifiers),\n \t\t\t\t std::move (generic_params),\n+\t\t\t\t HIR::SelfParam::error (),\n \t\t\t\t std::move (function_params),\n \t\t\t\t std::move (return_type),\n \t\t\t\t std::move (where_clause));\n@@ -374,12 +375,12 @@ class ASTLowerTraitItem : public ASTLoweringBase\n \tfunction_params.push_back (hir_param);\n       }\n \n-    HIR::TraitMethodDecl decl (ref.get_identifier (), std::move (qualifiers),\n-\t\t\t       std::move (generic_params),\n-\t\t\t       std::move (self_param),\n-\t\t\t       std::move (function_params),\n-\t\t\t       std::move (return_type),\n-\t\t\t       std::move (where_clause));\n+    HIR::TraitFunctionDecl decl (ref.get_identifier (), std::move (qualifiers),\n+\t\t\t\t std::move (generic_params),\n+\t\t\t\t std::move (self_param),\n+\t\t\t\t std::move (function_params),\n+\t\t\t\t std::move (return_type),\n+\t\t\t\t std::move (where_clause));\n     HIR::Expr *block_expr\n       = method.has_definition ()\n \t  ? ASTLoweringExpr::translate (method.get_definition ().get ())\n@@ -391,10 +392,9 @@ class ASTLowerTraitItem : public ASTLoweringBase\n \t\t\t\t   UNKNOWN_LOCAL_DEFID);\n \n     translated\n-      = new HIR::TraitItemMethod (mapping, std::move (decl),\n-\t\t\t\t  std::unique_ptr<HIR::Expr> (block_expr),\n-\t\t\t\t  method.get_outer_attrs (),\n-\t\t\t\t  method.get_locus ());\n+      = new HIR::TraitItemFunc (mapping, std::move (decl),\n+\t\t\t\tstd::unique_ptr<HIR::Expr> (block_expr),\n+\t\t\t\tmethod.get_outer_attrs (), method.get_locus ());\n   }\n \n   void visit (AST::TraitItemConst &constant) override"}, {"sha": "ebe4bb36706e75846df6785f9097c26a055d3fb0", "filename": "gcc/rust/hir/tree/rust-hir-full-decls.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h?ref=f8ae675c108a075012d0edb5c3cce972182803cb", "patch": "@@ -188,8 +188,6 @@ class ConstantItem;\n class StaticItem;\n struct TraitFunctionDecl;\n class TraitItemFunc;\n-struct TraitMethodDecl;\n-class TraitItemMethod;\n class TraitItemConst;\n class TraitItemType;\n class Trait;"}, {"sha": "14b64d2e8b916339a224fe062e66bf1668d4c5b9", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 7, "deletions": 107, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=f8ae675c108a075012d0edb5c3cce972182803cb", "patch": "@@ -3599,105 +3599,11 @@ TraitFunctionDecl::as_string () const\n     }\n \n   str += \"\\n Function params: \";\n-  if (has_params ())\n-    {\n-      for (const auto &param : function_params)\n-\t{\n-\t  str += \"\\n  \" + param.as_string ();\n-\t}\n-    }\n-  else\n-    {\n-      str += \"none\";\n-    }\n-\n-  str += \"\\n Return type: \";\n-  if (has_return_type ())\n-    {\n-      str += return_type->as_string ();\n-    }\n-  else\n-    {\n-      str += \"none (void)\";\n-    }\n-\n-  str += \"\\n Where clause: \";\n-  if (has_where_clause ())\n-    {\n-      str += where_clause.as_string ();\n-    }\n-  else\n+  if (is_method ())\n     {\n-      str += \"none\";\n+      str += self.as_string ();\n     }\n \n-  return str;\n-}\n-\n-std::string\n-TraitItemMethod::as_string () const\n-{\n-  std::string str = \"outer attributes: \";\n-  if (outer_attrs.empty ())\n-    {\n-      str += \"none\";\n-    }\n-  else\n-    {\n-      /* note that this does not print them with \"outer attribute\" syntax -\n-       * just the body */\n-      for (const auto &attr : outer_attrs)\n-\t{\n-\t  str += \"\\n  \" + attr.as_string ();\n-\t}\n-    }\n-\n-  str += \"\\n\" + decl.as_string ();\n-\n-  str += \"\\n Definition (block expr): \";\n-  if (has_definition ())\n-    {\n-      str += block_expr->as_string ();\n-    }\n-  else\n-    {\n-      str += \"none\";\n-    }\n-\n-  return str;\n-}\n-\n-std::string\n-TraitMethodDecl::as_string () const\n-{\n-  std::string str = qualifiers.as_string () + \"fn \" + function_name;\n-\n-  // generic params\n-  str += \"\\n Generic params: \";\n-  if (generic_params.empty ())\n-    {\n-      str += \"none\";\n-    }\n-  else\n-    {\n-      for (const auto &param : generic_params)\n-\t{\n-\t  // DEBUG: null pointer check\n-\t  if (param == nullptr)\n-\t    {\n-\t      rust_debug (\n-\t\t\"something really terrible has gone wrong - null pointer \"\n-\t\t\"generic param in trait function decl.\");\n-\t      return \"nullptr_POINTER_MARK\";\n-\t    }\n-\n-\t  str += \"\\n  \" + param->as_string ();\n-\t}\n-    }\n-\n-  str += \"\\n Self param: \" + self_param.as_string ();\n-\n-  str += \"\\n Function params: \";\n   if (has_params ())\n     {\n       for (const auto &param : function_params)\n@@ -3820,7 +3726,7 @@ SelfParam::as_string () const\n \t  // type (i.e. not ref, no lifetime)\n \t  std::string str;\n \n-\t  if (is_mut)\n+\t  if (is_mut ())\n \t    {\n \t      str += \"mut \";\n \t    }\n@@ -3836,7 +3742,7 @@ SelfParam::as_string () const\n \t  // ref and lifetime\n \t  std::string str = \"&\" + lifetime.as_string () + \" \";\n \n-\t  if (is_mut)\n+\t  if (is_mut ())\n \t    {\n \t      str += \"mut \";\n \t    }\n@@ -3845,12 +3751,12 @@ SelfParam::as_string () const\n \n \t  return str;\n \t}\n-      else if (has_ref)\n+      else if (is_ref ())\n \t{\n \t  // ref with no lifetime\n \t  std::string str = \"&\";\n \n-\t  if (is_mut)\n+\t  if (is_mut ())\n \t    {\n \t      str += \" mut \";\n \t    }\n@@ -3864,7 +3770,7 @@ SelfParam::as_string () const\n \t  // no ref, no type\n \t  std::string str;\n \n-\t  if (is_mut)\n+\t  if (is_mut ())\n \t    {\n \t      str += \"mut \";\n \t    }\n@@ -4579,12 +4485,6 @@ TraitItemFunc::accept_vis (HIRVisitor &vis)\n   vis.visit (*this);\n }\n \n-void\n-TraitItemMethod::accept_vis (HIRVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n void\n TraitItemConst::accept_vis (HIRVisitor &vis)\n {"}, {"sha": "73c18d5535e78d85c0acb2e386219dd1879485b8", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 77, "deletions": 225, "changes": 302, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=f8ae675c108a075012d0edb5c3cce972182803cb", "patch": "@@ -305,59 +305,49 @@ struct WhereClause\n // A self parameter in a method\n struct SelfParam\n {\n+public:\n+  enum ImplicitSelfKind\n+  {\n+    IMM,\n+    MUT,\n+    IMM_REF,\n+    MUT_REF,\n+    NONE\n+  };\n+\n private:\n-  bool has_ref;\n-  bool is_mut;\n-  // bool has_lifetime; // only possible if also ref\n+  ImplicitSelfKind self_kind;\n   Lifetime lifetime;\n-\n-  // bool has_type; // only possible if not ref\n   std::unique_ptr<Type> type;\n-\n   Location locus;\n-\n   Analysis::NodeMapping mappings;\n \n-  // Unrestricted constructor used for error state\n-  SelfParam (Analysis::NodeMapping mappings, Lifetime lifetime, bool has_ref,\n-\t     bool is_mut, Type *type)\n-    : has_ref (has_ref), is_mut (is_mut), lifetime (std::move (lifetime)),\n-      type (type), mappings (mappings)\n+  SelfParam (Analysis::NodeMapping mappings, ImplicitSelfKind self_kind,\n+\t     Lifetime lifetime, Type *type)\n+    : self_kind (self_kind), lifetime (std::move (lifetime)), type (type),\n+      mappings (mappings)\n   {}\n-  // this is ok as no outside classes can ever call this\n \n public:\n-  // Returns whether the self-param has a type field.\n-  bool has_type () const { return type != nullptr; }\n-\n-  // Returns whether the self-param has a valid lifetime.\n-  bool has_lifetime () const { return !lifetime.is_error (); }\n-\n-  // Returns whether the self-param is in an error state.\n-  bool is_error () const\n-  {\n-    return has_type () && has_lifetime ();\n-    // not having either is not an error\n-  }\n-\n   // Type-based self parameter (not ref, no lifetime)\n   SelfParam (Analysis::NodeMapping mappings, std::unique_ptr<Type> type,\n \t     bool is_mut, Location locus)\n-    : has_ref (false), is_mut (is_mut),\n+    : self_kind (is_mut ? ImplicitSelfKind::MUT : ImplicitSelfKind::IMM),\n       lifetime (Lifetime (mappings, Lifetime::LifetimeType::NAMED, \"\", locus)),\n       type (std::move (type)), locus (locus), mappings (mappings)\n   {}\n \n   // Lifetime-based self parameter (is ref, no type)\n   SelfParam (Analysis::NodeMapping mappings, Lifetime lifetime, bool is_mut,\n \t     Location locus)\n-    : has_ref (true), is_mut (is_mut), lifetime (std::move (lifetime)),\n-      locus (locus), mappings (mappings)\n+    : self_kind (is_mut ? ImplicitSelfKind::MUT_REF\n+\t\t\t: ImplicitSelfKind::IMM_REF),\n+      lifetime (std::move (lifetime)), locus (locus), mappings (mappings)\n   {}\n \n   // Copy constructor requires clone\n   SelfParam (SelfParam const &other)\n-    : has_ref (other.has_ref), is_mut (other.is_mut), lifetime (other.lifetime),\n+    : self_kind (other.self_kind), lifetime (other.lifetime),\n       locus (other.locus), mappings (other.mappings)\n   {\n     if (other.type != nullptr)\n@@ -369,8 +359,8 @@ struct SelfParam\n   {\n     if (other.type != nullptr)\n       type = other.type->clone_type ();\n-    is_mut = other.is_mut;\n-    has_ref = other.has_ref;\n+\n+    self_kind = other.self_kind;\n     lifetime = other.lifetime;\n     locus = other.locus;\n     mappings = other.mappings;\n@@ -382,21 +372,46 @@ struct SelfParam\n   SelfParam (SelfParam &&other) = default;\n   SelfParam &operator= (SelfParam &&other) = default;\n \n+  static SelfParam error ()\n+  {\n+    return SelfParam (Analysis::NodeMapping::get_error (),\n+\t\t      ImplicitSelfKind::NONE, Lifetime::error (), nullptr);\n+  }\n+\n+  // Returns whether the self-param has a type field.\n+  bool has_type () const { return type != nullptr; }\n+\n+  // Returns whether the self-param has a valid lifetime.\n+  bool has_lifetime () const { return !lifetime.is_error (); }\n+\n+  // Returns whether the self-param is in an error state.\n+  bool is_error () const { return self_kind != ImplicitSelfKind::NONE; }\n+\n   std::string as_string () const;\n \n   Location get_locus () const { return locus; }\n \n-  bool get_has_ref () const { return has_ref; };\n-  bool get_is_mut () const { return is_mut; }\n+  ImplicitSelfKind get_self_kind () const { return self_kind; }\n \n-  // TODO: is this better? Or is a \"vis_block\" better?\n   std::unique_ptr<Type> &get_type ()\n   {\n     rust_assert (has_type ());\n     return type;\n   }\n \n   Analysis::NodeMapping get_mappings () { return mappings; }\n+\n+  bool is_mut () const\n+  {\n+    return self_kind == ImplicitSelfKind::MUT\n+\t   || self_kind == ImplicitSelfKind::MUT_REF;\n+  }\n+\n+  bool is_ref () const\n+  {\n+    return self_kind == ImplicitSelfKind::IMM_REF\n+\t   || self_kind == ImplicitSelfKind::MUT_REF;\n+  }\n };\n \n // Qualifiers for function, i.e. const, unsafe, extern etc.\n@@ -2319,77 +2334,45 @@ class StaticItem : public VisItem\n   Type *get_type () { return type.get (); }\n \n protected:\n-  /* Use covariance to implement clone function as returning this object\n-   * rather than base */\n   StaticItem *clone_item_impl () const override\n   {\n     return new StaticItem (*this);\n   }\n-\n-  /* Use covariance to implement clone function as returning this object\n-   * rather than base */\n-  /*virtual StaticItem* clone_statement_impl() const override {\n-      return new StaticItem(*this);\n-  }*/\n };\n \n // Function declaration in traits\n struct TraitFunctionDecl\n {\n private:\n-  // TODO: delete and replace with Function decl item? no as no body in this.\n   FunctionQualifiers qualifiers;\n   Identifier function_name;\n-\n-  // bool has_generics;\n-  // Generics generic_params;\n-  std::vector<std::unique_ptr<GenericParam> > generic_params; // inlined\n-\n-  // bool has_params;\n-  // FunctionParams function_params;\n-  std::vector<FunctionParam> function_params; // inlined\n-\n-  // bool has_return_type;\n+  std::vector<std::unique_ptr<GenericParam> > generic_params;\n+  std::vector<FunctionParam> function_params;\n   std::unique_ptr<Type> return_type;\n-\n-  // bool has_where_clause;\n   WhereClause where_clause;\n-\n-  // should this store location info?\n+  SelfParam self;\n \n public:\n-  // Returns whether function decl has generic parameters.\n-  bool has_generics () const { return !generic_params.empty (); }\n-\n-  // Returns whether function decl has regular parameters.\n-  bool has_params () const { return !function_params.empty (); }\n-\n-  // Returns whether function has return type (otherwise is void).\n-  bool has_return_type () const { return return_type != nullptr; }\n-\n-  // Returns whether function has a where clause.\n-  bool has_where_clause () const { return !where_clause.is_empty (); }\n-\n   // Mega-constructor\n   TraitFunctionDecl (Identifier function_name, FunctionQualifiers qualifiers,\n \t\t     std::vector<std::unique_ptr<GenericParam> > generic_params,\n-\t\t     std::vector<FunctionParam> function_params,\n+\t\t     SelfParam self, std::vector<FunctionParam> function_params,\n \t\t     std::unique_ptr<Type> return_type,\n \t\t     WhereClause where_clause)\n     : qualifiers (std::move (qualifiers)),\n       function_name (std::move (function_name)),\n       generic_params (std::move (generic_params)),\n       function_params (std::move (function_params)),\n       return_type (std::move (return_type)),\n-      where_clause (std::move (where_clause))\n+      where_clause (std::move (where_clause)), self (self)\n   {}\n \n   // Copy constructor with clone\n   TraitFunctionDecl (TraitFunctionDecl const &other)\n     : qualifiers (other.qualifiers), function_name (other.function_name),\n       function_params (other.function_params),\n       return_type (other.return_type->clone_type ()),\n-      where_clause (other.where_clause)\n+      where_clause (other.where_clause), self (other.self)\n   {\n     generic_params.reserve (other.generic_params.size ());\n     for (const auto &e : other.generic_params)\n@@ -2406,6 +2389,7 @@ struct TraitFunctionDecl\n     function_params = other.function_params;\n     return_type = other.return_type->clone_type ();\n     where_clause = other.where_clause;\n+    self = other.self;\n \n     generic_params.reserve (other.generic_params.size ());\n     for (const auto &e : other.generic_params)\n@@ -2419,6 +2403,26 @@ struct TraitFunctionDecl\n   TraitFunctionDecl &operator= (TraitFunctionDecl &&other) = default;\n \n   std::string as_string () const;\n+\n+  // Returns whether function decl has generic parameters.\n+  bool has_generics () const { return !generic_params.empty (); }\n+\n+  // Returns whether function decl has regular parameters.\n+  bool has_params () const { return !function_params.empty (); }\n+\n+  // Returns whether function has return type (otherwise is void).\n+  bool has_return_type () const { return return_type != nullptr; }\n+\n+  // Returns whether function has a where clause.\n+  bool has_where_clause () const { return !where_clause.is_empty (); }\n+\n+  bool is_method () const { return !self.is_error (); }\n+\n+  SelfParam &get_self ()\n+  {\n+    rust_assert (is_method ());\n+    return self;\n+  }\n };\n \n // Actual trait item function declaration within traits\n@@ -2484,158 +2488,6 @@ class TraitItemFunc : public TraitItem\n   }\n };\n \n-// Method declaration within traits\n-struct TraitMethodDecl\n-{\n-private:\n-  // TODO: delete and replace with Function decl item? no as no body.\n-  FunctionQualifiers qualifiers;\n-  Identifier function_name;\n-\n-  // bool has_generics;\n-  // Generics generic_params;\n-  std::vector<std::unique_ptr<GenericParam> > generic_params; // inlined\n-\n-  SelfParam self_param;\n-\n-  // bool has_params;\n-  // FunctionParams function_params;\n-  std::vector<FunctionParam> function_params; // inlined\n-\n-  // bool has_return_type;\n-  std::unique_ptr<Type> return_type;\n-\n-  // bool has_where_clause;\n-  WhereClause where_clause;\n-\n-  // should this store location info?\n-\n-public:\n-  // Returns whether method decl has generic parameters.\n-  bool has_generics () const { return !generic_params.empty (); }\n-\n-  // Returns whether method decl has regular parameters.\n-  bool has_params () const { return !function_params.empty (); }\n-\n-  // Returns whether method has return type (otherwise is void).\n-  bool has_return_type () const { return return_type != nullptr; }\n-\n-  // Returns whether method has a where clause.\n-  bool has_where_clause () const { return !where_clause.is_empty (); }\n-\n-  // Mega-constructor\n-  TraitMethodDecl (Identifier function_name, FunctionQualifiers qualifiers,\n-\t\t   std::vector<std::unique_ptr<GenericParam> > generic_params,\n-\t\t   SelfParam self_param,\n-\t\t   std::vector<FunctionParam> function_params,\n-\t\t   std::unique_ptr<Type> return_type, WhereClause where_clause)\n-    : qualifiers (std::move (qualifiers)),\n-      function_name (std::move (function_name)),\n-      generic_params (std::move (generic_params)),\n-      self_param (std::move (self_param)),\n-      function_params (std::move (function_params)),\n-      return_type (std::move (return_type)),\n-      where_clause (std::move (where_clause))\n-  {}\n-\n-  // Copy constructor with clone\n-  TraitMethodDecl (TraitMethodDecl const &other)\n-    : qualifiers (other.qualifiers), function_name (other.function_name),\n-      self_param (other.self_param), function_params (other.function_params),\n-      return_type (other.return_type->clone_type ()),\n-      where_clause (other.where_clause)\n-  {\n-    generic_params.reserve (other.generic_params.size ());\n-    for (const auto &e : other.generic_params)\n-      generic_params.push_back (e->clone_generic_param ());\n-  }\n-\n-  ~TraitMethodDecl () = default;\n-\n-  // Overloaded assignment operator with clone\n-  TraitMethodDecl &operator= (TraitMethodDecl const &other)\n-  {\n-    function_name = other.function_name;\n-    qualifiers = other.qualifiers;\n-    self_param = other.self_param;\n-    function_params = other.function_params;\n-    return_type = other.return_type->clone_type ();\n-    where_clause = other.where_clause;\n-\n-    generic_params.reserve (other.generic_params.size ());\n-    for (const auto &e : other.generic_params)\n-      generic_params.push_back (e->clone_generic_param ());\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  TraitMethodDecl (TraitMethodDecl &&other) = default;\n-  TraitMethodDecl &operator= (TraitMethodDecl &&other) = default;\n-\n-  std::string as_string () const;\n-};\n-\n-// Actual trait item method declaration within traits\n-class TraitItemMethod : public TraitItem\n-{\n-  AST::AttrVec outer_attrs;\n-  TraitMethodDecl decl;\n-  std::unique_ptr<Expr> block_expr;\n-  Location locus;\n-\n-public:\n-  // Returns whether method has a definition or is just a declaration.\n-  bool has_definition () const { return block_expr != nullptr; }\n-\n-  TraitItemMethod (Analysis::NodeMapping mappings, TraitMethodDecl decl,\n-\t\t   std::unique_ptr<Expr> block_expr, AST::AttrVec outer_attrs,\n-\t\t   Location locus)\n-    : TraitItem (mappings), outer_attrs (std::move (outer_attrs)),\n-      decl (std::move (decl)), block_expr (std::move (block_expr)),\n-      locus (locus)\n-  {}\n-\n-  // Copy constructor with clone\n-  TraitItemMethod (TraitItemMethod const &other)\n-    : TraitItem (other.mappings), outer_attrs (other.outer_attrs),\n-      decl (other.decl), block_expr (other.block_expr->clone_expr ()),\n-      locus (other.locus)\n-  {}\n-\n-  // Overloaded assignment operator to clone\n-  TraitItemMethod &operator= (TraitItemMethod const &other)\n-  {\n-    TraitItem::operator= (other);\n-    outer_attrs = other.outer_attrs;\n-    decl = other.decl;\n-    block_expr = other.block_expr->clone_expr ();\n-    locus = other.locus;\n-    mappings = other.mappings;\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  TraitItemMethod (TraitItemMethod &&other) = default;\n-  TraitItemMethod &operator= (TraitItemMethod &&other) = default;\n-\n-  std::string as_string () const override;\n-\n-  Location get_locus () const { return locus; }\n-\n-  void accept_vis (HIRVisitor &vis) override;\n-\n-  std::unique_ptr<Expr> &get_block_expr () { return block_expr; }\n-\n-protected:\n-  // Clone function implementation as (not pure) virtual method\n-  TraitItemMethod *clone_trait_item_impl () const override\n-  {\n-    return new TraitItemMethod (*this);\n-  }\n-};\n-\n // Constant item within traits\n class TraitItemConst : public TraitItem\n {"}, {"sha": "6b575de171edf43a7ce0d117e22aa98485b32ade", "filename": "gcc/rust/hir/tree/rust-hir-visitor.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h?ref=f8ae675c108a075012d0edb5c3cce972182803cb", "patch": "@@ -123,7 +123,6 @@ class HIRVisitor\n   virtual void visit (ConstantItem &const_item) = 0;\n   virtual void visit (StaticItem &static_item) = 0;\n   virtual void visit (TraitItemFunc &item) = 0;\n-  virtual void visit (TraitItemMethod &item) = 0;\n   virtual void visit (TraitItemConst &item) = 0;\n   virtual void visit (TraitItemType &item) = 0;\n   virtual void visit (Trait &trait) = 0;"}, {"sha": "35dc71ae1dfb88f18e8941ec40c19e26c0d1cc86", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=f8ae675c108a075012d0edb5c3cce972182803cb", "patch": "@@ -460,6 +460,12 @@ class Lifetime : public TypeParamBound\n     return lifetime_type == NAMED && lifetime_name.empty ();\n   }\n \n+  static Lifetime error ()\n+  {\n+    return Lifetime (Analysis::NodeMapping::get_error (), LifetimeType::NAMED,\n+\t\t     \"\", Location ());\n+  }\n+\n   std::string as_string () const override;\n \n   void accept_vis (HIRVisitor &vis) override;"}, {"sha": "baae9ae486e025489666b01d833b077006c957fd", "filename": "gcc/rust/lint/rust-lint-marklive-base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h?ref=f8ae675c108a075012d0edb5c3cce972182803cb", "patch": "@@ -139,7 +139,6 @@ class MarkLiveBase : public HIR::HIRVisitor\n   virtual void visit (HIR::ConstantItem &) override {}\n   virtual void visit (HIR::StaticItem &) override {}\n   virtual void visit (HIR::TraitItemFunc &) override {}\n-  virtual void visit (HIR::TraitItemMethod &) override {}\n   virtual void visit (HIR::TraitItemConst &) override {}\n   virtual void visit (HIR::TraitItemType &) override {}\n   virtual void visit (HIR::Trait &) override {}"}, {"sha": "f6d4b09a798f6d618036e5eb8bf8ad195d6dc314", "filename": "gcc/rust/lint/rust-lint-marklive.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.h?ref=f8ae675c108a075012d0edb5c3cce972182803cb", "patch": "@@ -97,11 +97,6 @@ class MarkLive : public MarkLiveBase\n     item.get_block_expr ()->accept_vis (*this);\n   }\n \n-  void visit (HIR::TraitItemMethod &item) override\n-  {\n-    item.get_block_expr ()->accept_vis (*this);\n-  }\n-\n   void visit (HIR::ImplBlock &impl) override\n   {\n     for (auto &&item : impl.get_impl_items ())"}, {"sha": "11eb5e418fc1e53efa7db6684a7fea553124ec0a", "filename": "gcc/rust/typecheck/rust-hir-const-fold-base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h?ref=f8ae675c108a075012d0edb5c3cce972182803cb", "patch": "@@ -142,7 +142,6 @@ class ConstFoldBase : public HIR::HIRVisitor\n   virtual void visit (HIR::ConstantItem &) override {}\n   virtual void visit (HIR::StaticItem &) override {}\n   virtual void visit (HIR::TraitItemFunc &) override {}\n-  virtual void visit (HIR::TraitItemMethod &) override {}\n   virtual void visit (HIR::TraitItemConst &) override {}\n   virtual void visit (HIR::TraitItemType &) override {}\n   virtual void visit (HIR::Trait &) override {}"}, {"sha": "b2b11d30b55642daa137e87338b2e76da7ba0b49", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h?ref=f8ae675c108a075012d0edb5c3cce972182803cb", "patch": "@@ -141,7 +141,6 @@ class TypeCheckBase : public HIR::HIRVisitor\n   virtual void visit (HIR::ConstantItem &) override {}\n   virtual void visit (HIR::StaticItem &) override {}\n   virtual void visit (HIR::TraitItemFunc &) override {}\n-  virtual void visit (HIR::TraitItemMethod &) override {}\n   virtual void visit (HIR::TraitItemConst &) override {}\n   virtual void visit (HIR::TraitItemType &) override {}\n   virtual void visit (HIR::Trait &) override {}"}, {"sha": "46fee299e065b86224e87cd2800fb428199c6609", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ae675c108a075012d0edb5c3cce972182803cb/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=f8ae675c108a075012d0edb5c3cce972182803cb", "patch": "@@ -167,12 +167,13 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n     // hold all the params to the fndef\n     std::vector<std::pair<HIR::Pattern *, TyTy::BaseType *> > params;\n \n-    // add the self param at the front\n+    // add the synthetic self param at the front, this is a placeholder for\n+    // compilation to know parameter names. The types are ignored but we reuse\n+    // the HIR identifier pattern which requires it\n     HIR::SelfParam &self_param = method.get_self_param ();\n     HIR::IdentifierPattern *self_pattern\n       = new HIR::IdentifierPattern (\"self\", self_param.get_locus (),\n-\t\t\t\t    self_param.get_has_ref (),\n-\t\t\t\t    self_param.get_is_mut (),\n+\t\t\t\t    self_param.is_ref (), self_param.is_mut (),\n \t\t\t\t    std::unique_ptr<HIR::Pattern> (nullptr));\n     context->insert_type (self_param.get_mappings (), self->clone ());\n     params.push_back ("}]}