{"sha": "7bdebc3aac6749afb5fad62e7b1ee35aec238e08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JkZWJjM2FhYzY3NDlhZmI1ZmFkNjJlN2IxZWUzNWFlYzIzOGUwOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-05-25T06:17:05Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-05-25T06:17:05Z"}, "message": "recog.c (offsettable_address_p): If mode size is zero, assume BIGGEST_ALIGNMENT.\n\n        * recog.c (offsettable_address_p): If mode size is zero, assume\n        BIGGEST_ALIGNMENT.\n\nFrom-SVN: r34158", "tree": {"sha": "b4f2ac22b53112db27c204fe31a04ee8fa666af7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4f2ac22b53112db27c204fe31a04ee8fa666af7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bdebc3aac6749afb5fad62e7b1ee35aec238e08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bdebc3aac6749afb5fad62e7b1ee35aec238e08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bdebc3aac6749afb5fad62e7b1ee35aec238e08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bdebc3aac6749afb5fad62e7b1ee35aec238e08/comments", "author": null, "committer": null, "parents": [{"sha": "d94611f1584bd67db5d5d61f011fd2431f055d3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d94611f1584bd67db5d5d61f011fd2431f055d3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d94611f1584bd67db5d5d61f011fd2431f055d3e"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "07a0d5a690b85c12ae821eb1a1a081bafa0a59d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdebc3aac6749afb5fad62e7b1ee35aec238e08/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdebc3aac6749afb5fad62e7b1ee35aec238e08/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7bdebc3aac6749afb5fad62e7b1ee35aec238e08", "patch": "@@ -1,3 +1,8 @@\n+2000-05-24  Richard Henderson  <rth@cygnus.com>\n+\n+\t* recog.c (offsettable_address_p): If mode size is zero, assume\n+\tBIGGEST_ALIGNMENT.\n+\n 2000-05-24  J. David Anglin  <dave@hiauly.hia.nrc.ca>\n \n \t* configure.in: Check for -Wno-long-long option support and improve"}, {"sha": "643abb413f8b47c249470d15a92fc45463d2bd17", "filename": "gcc/recog.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bdebc3aac6749afb5fad62e7b1ee35aec238e08/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bdebc3aac6749afb5fad62e7b1ee35aec238e08/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=7bdebc3aac6749afb5fad62e7b1ee35aec238e08", "patch": "@@ -1847,6 +1847,7 @@ offsettable_address_p (strictp, mode, y)\n   rtx *y2;\n   int (*addressp) PARAMS ((enum machine_mode, rtx)) =\n     (strictp ? strict_memory_address_p : memory_address_p);\n+  unsigned int mode_sz = GET_MODE_SIZE (mode);\n \n   if (CONSTANT_ADDRESS_P (y))\n     return 1;\n@@ -1857,6 +1858,13 @@ offsettable_address_p (strictp, mode, y)\n   if (mode_dependent_address_p (y))\n     return 0;\n \n+  /* ??? How much offset does an offsettable BLKmode reference need?\n+     Clearly that depends on the situation in which it's being used.\n+     However, the current situation in which we test 0xffffffff is\n+     less than ideal.  Caveat user.  */\n+  if (mode_sz == 0)\n+    mode_sz = BIGGEST_ALIGNMENT / BITS_PER_UNIT;\n+\n   /* If the expression contains a constant term,\n      see if it remains valid when max possible offset is added.  */\n \n@@ -1865,7 +1873,7 @@ offsettable_address_p (strictp, mode, y)\n       int good;\n \n       y1 = *y2;\n-      *y2 = plus_constant (*y2, GET_MODE_SIZE (mode) - 1);\n+      *y2 = plus_constant (*y2, mode_sz - 1);\n       /* Use QImode because an odd displacement may be automatically invalid\n \t for any wider mode.  But it should be valid for a single byte.  */\n       good = (*addressp) (QImode, y);\n@@ -1884,7 +1892,7 @@ offsettable_address_p (strictp, mode, y)\n      of the specified mode.  We assume that if Y and Y+c are\n      valid addresses then so is Y+d for all 0<d<c.  */\n \n-  z = plus_constant_for_output (y, GET_MODE_SIZE (mode) - 1);\n+  z = plus_constant_for_output (y, mode_sz - 1);\n \n   /* Use QImode because an odd displacement may be automatically invalid\n      for any wider mode.  But it should be valid for a single byte.  */"}]}