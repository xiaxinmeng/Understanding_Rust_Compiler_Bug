{"sha": "4dbe1556cce68a32108fbad54c6e445240f8bb4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRiZTE1NTZjY2U2OGEzMjEwOGZiYWQ1NGM2ZTQ0NTI0MGY4YmI0Yg==", "commit": {"author": {"name": "Chris Demetriou", "email": "cgd@broadcom.com", "date": "2003-10-03T21:13:13Z"}, "committer": {"name": "Chris Demetriou", "email": "cgd@gcc.gnu.org", "date": "2003-10-03T21:13:13Z"}, "message": "mips.c (mips_emit_prefetch): Restructure to avoid use of arrays, handle indexed prefetch.\n\n2003-10-03  Chris Demetriou  <cgd@broadcom.com>\n\n        * config/mips/mips.c (mips_emit_prefetch): Restructure\n        to avoid use of arrays, handle indexed prefetch.\n        * config/mips/mips.h (ISA_HAS_FP4, ISA_HAS_PREFETCH): Update comments.\n        (ISA_HAS_PREFETCHX): New deffine.\n        * config/mips/mips.md (\"type\" attr): Add new \"prefetchx\" value,\n        update comments.\n        (prefetch_indexed_di, prefetch_indexed_si): New insns.\n\nFrom-SVN: r72077", "tree": {"sha": "72e6d4f8f3befbb091d649653e2a531f7fb0714c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72e6d4f8f3befbb091d649653e2a531f7fb0714c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dbe1556cce68a32108fbad54c6e445240f8bb4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dbe1556cce68a32108fbad54c6e445240f8bb4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dbe1556cce68a32108fbad54c6e445240f8bb4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dbe1556cce68a32108fbad54c6e445240f8bb4b/comments", "author": null, "committer": null, "parents": [{"sha": "1ec57cf03b8ba96e9e98553cabf16b2f70d062a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ec57cf03b8ba96e9e98553cabf16b2f70d062a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ec57cf03b8ba96e9e98553cabf16b2f70d062a6"}], "stats": {"total": 83, "additions": 56, "deletions": 27}, "files": [{"sha": "e2c5e510e82049b3f4dc57815a3fa92324758576", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbe1556cce68a32108fbad54c6e445240f8bb4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbe1556cce68a32108fbad54c6e445240f8bb4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4dbe1556cce68a32108fbad54c6e445240f8bb4b", "patch": "@@ -1,3 +1,13 @@\n+2003-10-03  Chris Demetriou  <cgd@broadcom.com>\n+\n+\t* config/mips/mips.c (mips_emit_prefetch): Restructure\n+\tto avoid use of arrays, handle indexed prefetch.\n+\t* config/mips/mips.h (ISA_HAS_FP4, ISA_HAS_PREFETCH): Update comments.\n+\t(ISA_HAS_PREFETCHX): New deffine.\n+\t* config/mips/mips.md (\"type\" attr): Add new \"prefetchx\" value,\n+\tupdate comments.\n+\t(prefetch_indexed_di, prefetch_indexed_si): New insns.\n+\t\n 2003-10-03  Jeff Sturm  <jsturm@one-point.com>\n \t    Roger Sayle  <roger@eyesopen.com>\n "}, {"sha": "6f49f6fdb537ef0ac39d156257afef4133bc312d", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbe1556cce68a32108fbad54c6e445240f8bb4b/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbe1556cce68a32108fbad54c6e445240f8bb4b/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=4dbe1556cce68a32108fbad54c6e445240f8bb4b", "patch": "@@ -9636,30 +9636,22 @@ mips_use_dfa_pipeline_interface (void)\n const char *\n mips_emit_prefetch (rtx *operands)\n {\n-  /* For the mips32/64 architectures the hint fields are arranged\n-     by operation (load/store) and locality (normal/streamed/retained).\n-     Irritatingly, numbers 2 and 3 are reserved leaving no simple\n-     algorithm for figuring the hint.  */\n-\n   int write = INTVAL (operands[1]);\n   int locality = INTVAL (operands[2]);\n+  int indexed = GET_CODE (operands[3]) == REG;\n+  int code;\n+  char buffer[30];\n+  \n+  if (locality <= 0)\n+    code = (write ? 5 : 4);\t/* store_streamed / load_streamed.  */\n+  else if (locality <= 2)\n+    code = (write ? 1 : 0);\t/* store / load.  */\n+  else\n+    code = (write ? 7 : 6);\t/* store_retained / load_retained.  */\n \n-  static const char * const alt[2][4] = {\n-    {\n-      \"pref\\t4,%3(%0)\",\n-      \"pref\\t0,%3(%0)\",\n-      \"pref\\t0,%3(%0)\",\n-      \"pref\\t6,%3(%0)\"\n-    },\n-    {\n-      \"pref\\t5,%3(%0)\",\n-      \"pref\\t1,%3(%0)\",\n-      \"pref\\t1,%3(%0)\",\n-      \"pref\\t7,%3(%0)\"\n-    }\n-  };\n-\n-  return alt[write][locality];\n+  sprintf (buffer, \"%s\\t%d,%%3(%%0)\", indexed ? \"prefx\" : \"pref\", code);\n+  output_asm_insn (buffer, operands);\n+  return \"\";\n }\n \n "}, {"sha": "f728777e02a0dcfda0956a782332ea8010b99825", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbe1556cce68a32108fbad54c6e445240f8bb4b/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbe1556cce68a32108fbad54c6e445240f8bb4b/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=4dbe1556cce68a32108fbad54c6e445240f8bb4b", "patch": "@@ -823,9 +823,9 @@ extern const struct mips_cpu_info *mips_tune_info;\n                          \t || ISA_MIPS32R2                        \\\n \t\t\t\t || ISA_MIPS64)\n \n-/* This is a catch all for the other new mips4 instructions: indexed load and\n-   indexed prefetch instructions, the FP madd and msub instructions,\n-   and the FP recip and recip sqrt instructions */\n+/* This is a catch all for other mips4 instructions: indexed load, the\n+   FP madd and msub instructions, and the FP recip and recip sqrt\n+   instructions.  */\n #define ISA_HAS_FP4             ((ISA_MIPS4\t\t\t\t\\\n \t\t\t\t  || ISA_MIPS64)       \t\t\t\\\n  \t\t\t\t && !TARGET_MIPS16)\n@@ -901,13 +901,21 @@ extern const struct mips_cpu_info *mips_tune_info;\n                                      || TARGET_SR71K                    \\\n                                      ))\n \n-/* ISA has data prefetch instruction.  */\n+/* ISA has data prefetch instructions.  This controls use of 'pref'.  */\n #define ISA_HAS_PREFETCH\t((ISA_MIPS4\t\t\t\t\\\n \t\t\t\t  || ISA_MIPS32\t\t\t\t\\\n \t\t\t\t  || ISA_MIPS32R2\t\t\t\\\n \t\t\t\t  || ISA_MIPS64)\t       \t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n+/* ISA has data indexed prefetch instructions.  This controls use of\n+   'prefx', along with TARGET_HARD_FLOAT and TARGET_DOUBLE_FLOAT.\n+   (prefx is a cop1x instruction, so can only be used if FP is\n+   enabled.)  */\n+#define ISA_HAS_PREFETCHX       ((ISA_MIPS4\t\t\t\t\\\n+\t\t\t\t  || ISA_MIPS64)       \t\t\t\\\n+ \t\t\t\t && !TARGET_MIPS16)\n+\n /* True if trunc.w.s and trunc.w.d are real (not synthetic)\n    instructions.  Both require TARGET_HARD_FLOAT, and trunc.w.d\n    also requires TARGET_DOUBLE_FLOAT.  */"}, {"sha": "b645973cc2a8d88383a993ac9aa881c6c7a6e925", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbe1556cce68a32108fbad54c6e445240f8bb4b/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbe1556cce68a32108fbad54c6e445240f8bb4b/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=4dbe1556cce68a32108fbad54c6e445240f8bb4b", "patch": "@@ -98,7 +98,8 @@\n ;; call\t\tunconditional call\n ;; load\t\tload instruction(s)\n ;; store\tstore instruction(s)\n-;; prefetch\tmemory prefetch\n+;; prefetch\tmemory prefetch (register + offset)\n+;; prefetchx\tmemory indexed prefetch (register + register)\n ;; move\t\tdata movement within same register set\n ;; condmove\tconditional moves\n ;; xfer\t\ttransfer to/from coprocessor\n@@ -123,7 +124,7 @@\n ;; multi\tmultiword sequence (or user asm statements)\n ;; nop\t\tno operation\n (define_attr \"type\"\n-  \"unknown,branch,jump,call,load,store,prefetch,move,condmove,xfer,hilo,const,arith,darith,imul,imadd,idiv,icmp,fadd,fmul,fmadd,fdiv,fabs,fneg,fcmp,fcvt,fsqrt,frsqrt,multi,nop\"\n+  \"unknown,branch,jump,call,load,store,prefetch,prefetchx,move,condmove,xfer,hilo,const,arith,darith,imul,imadd,idiv,icmp,fadd,fmul,fmadd,fdiv,fabs,fneg,fcmp,fcvt,fsqrt,frsqrt,multi,nop\"\n   (cond [(eq_attr \"jal\" \"!unset\")\n \t (const_string \"call\")]\n \t(const_string \"unknown\")))\n@@ -8513,6 +8514,15 @@ ld\\t%2,%1-%S1(%2)\\;daddu\\t%2,%2,$31\\;%*j\\t%2%/\"\n   { return mips_emit_prefetch (operands); }\n   [(set_attr \"type\" \"prefetch\")])\n \n+(define_insn \"prefetch_indexed_si\"\n+  [(prefetch (plus:SI (match_operand:SI 0 \"register_operand\" \"r\")\n+\t\t      (match_operand:SI 3 \"register_operand\" \"r\"))\n+\t     (match_operand:SI 1 \"const_int_operand\" \"n\")\n+\t     (match_operand:SI 2 \"const_int_operand\" \"n\"))]\n+  \"ISA_HAS_PREFETCHX && TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT && Pmode == SImode\"\n+  { return mips_emit_prefetch (operands); }\n+  [(set_attr \"type\" \"prefetchx\")])\n+\n (define_insn \"prefetch_si\"\n   [(prefetch (match_operand:SI 0 \"register_operand\" \"r\")\n \t     (match_operand:SI 1 \"const_int_operand\" \"n\")\n@@ -8533,6 +8543,15 @@ ld\\t%2,%1-%S1(%2)\\;daddu\\t%2,%2,$31\\;%*j\\t%2%/\"\n   { return mips_emit_prefetch (operands); }\n   [(set_attr \"type\" \"prefetch\")])\n \n+(define_insn \"prefetch_indexed_di\"\n+  [(prefetch (plus:DI (match_operand:DI 0 \"register_operand\" \"r\")\n+\t\t      (match_operand:DI 3 \"register_operand\" \"r\"))\n+\t     (match_operand:DI 1 \"const_int_operand\" \"n\")\n+\t     (match_operand:DI 2 \"const_int_operand\" \"n\"))]\n+  \"ISA_HAS_PREFETCHX && TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT && Pmode == DImode\"\n+  { return mips_emit_prefetch (operands); }\n+  [(set_attr \"type\" \"prefetchx\")])\n+\n (define_insn \"prefetch_di\"\n   [(prefetch (match_operand:DI 0 \"register_operand\" \"r\")\n \t     (match_operand:DI 1 \"const_int_operand\" \"n\")"}]}