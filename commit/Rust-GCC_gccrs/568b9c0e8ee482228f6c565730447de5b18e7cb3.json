{"sha": "568b9c0e8ee482228f6c565730447de5b18e7cb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY4YjljMGU4ZWU0ODIyMjhmNmM1NjU3MzA0NDdkZTViMThlN2NiMw==", "commit": {"author": {"name": "Alistair Lee", "email": "alistair.lee@arm.com", "date": "2021-08-17T09:49:35Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-08-17T09:49:35Z"}, "message": "aarch64: Replace some uses of GET_CODE with RTL predicate macros\n\ngcc/\n2021-08-17  Alistair_Lee  <alistair.lee@arm.com>\n\n\t* rtl.h (CONST_VECTOR_P): New macro.\n\t* config/aarch64/aarch64.c (aarch64_get_sve_pred_bits): Use RTL\n\tcode testing macros.\n\t(aarch64_ptrue_all_mode): Likewise.\n\t(aarch64_expand_mov_immediate): Likewise.\n\t(aarch64_const_vec_all_in_range_p): Likewise.\n\t(aarch64_rtx_costs): Likewise.\n\t(aarch64_legitimate_constant_p): Likewise.\n\t(aarch64_simd_valid_immediate): Likewise.\n\t(aarch64_simd_make_constant): Likewise.\n\t(aarch64_convert_mult_to_shift): Likewise.\n\t(aarch64_expand_sve_vec_perm): Likewise.\n\t(aarch64_vec_fpconst_pow_of_2): Likewise.", "tree": {"sha": "5edeb2d82ac4bbff66cea2e7bb9975643a41a97b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5edeb2d82ac4bbff66cea2e7bb9975643a41a97b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/568b9c0e8ee482228f6c565730447de5b18e7cb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/568b9c0e8ee482228f6c565730447de5b18e7cb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/568b9c0e8ee482228f6c565730447de5b18e7cb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/568b9c0e8ee482228f6c565730447de5b18e7cb3/comments", "author": {"login": "Alistair-Lee", "id": 86959989, "node_id": "MDQ6VXNlcjg2OTU5OTg5", "avatar_url": "https://avatars.githubusercontent.com/u/86959989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alistair-Lee", "html_url": "https://github.com/Alistair-Lee", "followers_url": "https://api.github.com/users/Alistair-Lee/followers", "following_url": "https://api.github.com/users/Alistair-Lee/following{/other_user}", "gists_url": "https://api.github.com/users/Alistair-Lee/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alistair-Lee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alistair-Lee/subscriptions", "organizations_url": "https://api.github.com/users/Alistair-Lee/orgs", "repos_url": "https://api.github.com/users/Alistair-Lee/repos", "events_url": "https://api.github.com/users/Alistair-Lee/events{/privacy}", "received_events_url": "https://api.github.com/users/Alistair-Lee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "891bdbf2b0432b4aa3d3e76923617fcb4fd33cf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/891bdbf2b0432b4aa3d3e76923617fcb4fd33cf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/891bdbf2b0432b4aa3d3e76923617fcb4fd33cf6"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "3213585a5883c9497d1cb500a88f97da3f1cc35f", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/568b9c0e8ee482228f6c565730447de5b18e7cb3/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/568b9c0e8ee482228f6c565730447de5b18e7cb3/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=568b9c0e8ee482228f6c565730447de5b18e7cb3", "patch": "@@ -4174,7 +4174,7 @@ aarch64_force_temporary (machine_mode mode, rtx x, rtx value)\n static bool\n aarch64_get_sve_pred_bits (rtx_vector_builder &builder, rtx x)\n {\n-  if (GET_CODE (x) != CONST_VECTOR)\n+  if (!CONST_VECTOR_P (x))\n     return false;\n \n   unsigned int factor = vector_element_size (GET_MODE_NUNITS (VNx16BImode),\n@@ -4230,7 +4230,7 @@ opt_machine_mode\n aarch64_ptrue_all_mode (rtx x)\n {\n   gcc_assert (GET_MODE (x) == VNx16BImode);\n-  if (GET_CODE (x) != CONST_VECTOR\n+  if (!CONST_VECTOR_P (x)\n       || !CONST_VECTOR_DUPLICATE_P (x)\n       || !CONST_INT_P (CONST_VECTOR_ENCODED_ELT (x, 0))\n       || INTVAL (CONST_VECTOR_ENCODED_ELT (x, 0)) == 0)\n@@ -5930,7 +5930,7 @@ aarch64_expand_mov_immediate (rtx dest, rtx imm)\n \t  return;\n \t}\n \n-      if (GET_CODE (imm) == CONST_VECTOR && aarch64_sve_data_mode_p (mode))\n+      if (CONST_VECTOR_P (imm) && aarch64_sve_data_mode_p (mode))\n \tif (rtx res = aarch64_expand_sve_const_vector (dest, imm))\n \t  {\n \t    if (dest != res)\n@@ -10634,7 +10634,7 @@ aarch64_const_vec_all_in_range_p (rtx vec,\n \t\t\t\t  HOST_WIDE_INT minval,\n \t\t\t\t  HOST_WIDE_INT maxval)\n {\n-  if (GET_CODE (vec) != CONST_VECTOR\n+  if (!CONST_VECTOR_P (vec)\n       || GET_MODE_CLASS (GET_MODE (vec)) != MODE_VECTOR_INT)\n     return false;\n \n@@ -12771,7 +12771,7 @@ aarch64_rtx_costs (rtx x, machine_mode mode, int outer ATTRIBUTE_UNUSED,\n \tcase SIGN_EXTRACT:\n \t  /* Bit-field insertion.  Strip any redundant widening of\n \t     the RHS to meet the width of the target.  */\n-\t  if (GET_CODE (op1) == SUBREG)\n+\t  if (SUBREG_P (op1))\n \t    op1 = SUBREG_REG (op1);\n \t  if ((GET_CODE (op1) == ZERO_EXTEND\n \t       || GET_CODE (op1) == SIGN_EXTEND)\n@@ -13044,7 +13044,7 @@ aarch64_rtx_costs (rtx x, machine_mode mode, int outer ATTRIBUTE_UNUSED,\n              But the integer MINUS logic expects the shift/extend\n              operation in op1.  */\n           if (! (REG_P (op0)\n-                 || (GET_CODE (op0) == SUBREG && REG_P (SUBREG_REG (op0)))))\n+\t\t || (SUBREG_P (op0) && REG_P (SUBREG_REG (op0)))))\n           {\n             op0 = XEXP (x, 1);\n             op1 = XEXP (x, 0);\n@@ -18239,7 +18239,7 @@ aarch64_legitimate_constant_p (machine_mode mode, rtx x)\n \n   /* Otherwise, accept any CONST_VECTOR that, if all else fails, can at\n      least be forced to memory and loaded from there.  */\n-  if (GET_CODE (x) == CONST_VECTOR)\n+  if (CONST_VECTOR_P (x))\n     return !targetm.cannot_force_const_mem (mode, x);\n \n   /* Do not allow vector struct mode constants for Advanced SIMD.\n@@ -20044,7 +20044,7 @@ aarch64_simd_valid_immediate (rtx op, simd_immediate_info *info,\n   scalar_mode elt_mode = GET_MODE_INNER (mode);\n   rtx base, step;\n   unsigned int n_elts;\n-  if (GET_CODE (op) == CONST_VECTOR\n+  if (CONST_VECTOR_P (op)\n       && CONST_VECTOR_DUPLICATE_P (op))\n     n_elts = CONST_VECTOR_NPATTERNS (op);\n   else if ((vec_flags & VEC_SVE_DATA)\n@@ -20066,7 +20066,7 @@ aarch64_simd_valid_immediate (rtx op, simd_immediate_info *info,\n \t}\n       return true;\n     }\n-  else if (GET_CODE (op) == CONST_VECTOR\n+  else if (CONST_VECTOR_P (op)\n \t   && CONST_VECTOR_NUNITS (op).is_constant (&n_elts))\n     /* N_ELTS set above.  */;\n   else\n@@ -20666,7 +20666,7 @@ aarch64_simd_make_constant (rtx vals)\n   int n_const = 0;\n   int i;\n \n-  if (GET_CODE (vals) == CONST_VECTOR)\n+  if (CONST_VECTOR_P (vals))\n     const_vec = vals;\n   else if (GET_CODE (vals) == PARALLEL)\n     {\n@@ -21207,7 +21207,7 @@ aarch64_sve_expand_vector_init (rtx target, rtx vals)\n static rtx\n aarch64_convert_mult_to_shift (rtx value, rtx_code &code)\n {\n-  if (GET_CODE (value) != CONST_VECTOR)\n+  if (!CONST_VECTOR_P (value))\n     return NULL_RTX;\n \n   rtx_vector_builder builder;\n@@ -22371,7 +22371,7 @@ aarch64_expand_sve_vec_perm (rtx target, rtx op0, rtx op1, rtx sel)\n   rtx sel_reg = force_reg (sel_mode, sel);\n \n   /* Check if the sel only references the first values vector.  */\n-  if (GET_CODE (sel) == CONST_VECTOR\n+  if (CONST_VECTOR_P (sel)\n       && aarch64_const_vec_all_in_range_p (sel, 0, nunits - 1))\n     {\n       emit_unspec2 (target, UNSPEC_TBL, op0, sel_reg);\n@@ -22393,7 +22393,7 @@ aarch64_expand_sve_vec_perm (rtx target, rtx op0, rtx op1, rtx sel)\n   rtx res0 = gen_reg_rtx (data_mode);\n   rtx res1 = gen_reg_rtx (data_mode);\n   rtx neg_num_elems = aarch64_simd_gen_const_vector_dup (sel_mode, -nunits);\n-  if (GET_CODE (sel) != CONST_VECTOR\n+  if (!CONST_VECTOR_P (sel)\n       || !aarch64_const_vec_all_in_range_p (sel, 0, 2 * nunits - 1))\n     {\n       rtx max_sel = aarch64_simd_gen_const_vector_dup (sel_mode,\n@@ -24925,7 +24925,7 @@ int\n aarch64_vec_fpconst_pow_of_2 (rtx x)\n {\n   int nelts;\n-  if (GET_CODE (x) != CONST_VECTOR\n+  if (!CONST_VECTOR_P (x)\n       || !CONST_VECTOR_NUNITS (x).is_constant (&nelts))\n     return -1;\n "}, {"sha": "5473cc9f2ddf1863191a3e2b5914ae89598e53b4", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/568b9c0e8ee482228f6c565730447de5b18e7cb3/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/568b9c0e8ee482228f6c565730447de5b18e7cb3/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=568b9c0e8ee482228f6c565730447de5b18e7cb3", "patch": "@@ -830,6 +830,9 @@ struct GTY(()) rtvec_def {\n #define CONST_DOUBLE_AS_FLOAT_P(X) \\\n   (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) != VOIDmode)\n \n+/* Predicate yielding nonzero iff X is an rtx for a constant vector.  */\n+#define CONST_VECTOR_P(X) (GET_CODE (X) == CONST_VECTOR)\n+\n /* Predicate yielding nonzero iff X is a label insn.  */\n #define LABEL_P(X) (GET_CODE (X) == CODE_LABEL)\n "}]}