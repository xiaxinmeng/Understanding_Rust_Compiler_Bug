{"sha": "3e8a33f96b74947776324692e9f0b91fa93c4771", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U4YTMzZjk2Yjc0OTQ3Nzc2MzI0NjkyZTlmMGI5MWZhOTNjNDc3MQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2013-04-22T02:59:00Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2013-04-22T02:59:00Z"}, "message": "tree-ssa-forwprop.c (simplify_conversion_from_bitmask): New function.\n\n\t* tree-ssa-forwprop.c (simplify_conversion_from_bitmask): New function.\n\t(ssa_forward_propagate_and_combine): Use it.\n\n\t* gcc.dg/tree-ssa/forwprop-26.c: New test.\n\nFrom-SVN: r198121", "tree": {"sha": "10cc9cdf13e1d3c97a3cbef3aea7749cc3afc35a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10cc9cdf13e1d3c97a3cbef3aea7749cc3afc35a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e8a33f96b74947776324692e9f0b91fa93c4771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e8a33f96b74947776324692e9f0b91fa93c4771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e8a33f96b74947776324692e9f0b91fa93c4771", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e8a33f96b74947776324692e9f0b91fa93c4771/comments", "author": null, "committer": null, "parents": [{"sha": "27747ea573045ec8c89b9e67f226d9dfa39c8ee3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27747ea573045ec8c89b9e67f226d9dfa39c8ee3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27747ea573045ec8c89b9e67f226d9dfa39c8ee3"}], "stats": {"total": 161, "additions": 161, "deletions": 0}, "files": [{"sha": "469a8b95d80ef1348008c92bacc5731678ad94aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8a33f96b74947776324692e9f0b91fa93c4771/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8a33f96b74947776324692e9f0b91fa93c4771/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e8a33f96b74947776324692e9f0b91fa93c4771", "patch": "@@ -1,3 +1,8 @@\n+2013-04-21  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-forwprop.c (simplify_conversion_from_bitmask): New function.\n+\t(ssa_forward_propagate_and_combine): Use it.\n+\n 2013-04-19  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* lra.c: Update the flow chart diagram."}, {"sha": "0c05a76e74ed26ac413cc1df8a7c93cdf19ae518", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8a33f96b74947776324692e9f0b91fa93c4771/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8a33f96b74947776324692e9f0b91fa93c4771/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e8a33f96b74947776324692e9f0b91fa93c4771", "patch": "@@ -1,3 +1,7 @@\n+2013-04-21  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/forwprop-26.c: New test.\n+\n 2013-04-20  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/56907"}, {"sha": "14821afd3ffb37634e0049e97011e8485b265ef4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-26.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8a33f96b74947776324692e9f0b91fa93c4771/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8a33f96b74947776324692e9f0b91fa93c4771/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-26.c?ref=3e8a33f96b74947776324692e9f0b91fa93c4771", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-forwprop1\" } */\n+\n+union tree_node;\n+typedef union tree_node *tree;\n+enum tree_code\n+{\n+  MAX_TREE_CODES\n+};\n+extern unsigned char tree_contains_struct[MAX_TREE_CODES][64];\n+struct tree_base\n+{\n+  __extension__ enum tree_code code:16;\n+  unsigned public_flag:1;\n+};\n+enum tree_node_structure_enum\n+{\n+  TS_DECL_WITH_VIS,\n+};\n+struct tree_decl_with_vis\n+{\n+  unsigned comdat_flag:1;\n+};\n+union tree_node\n+{\n+  struct tree_base base;\n+  struct tree_decl_with_vis decl_with_vis;\n+};\n+struct varpool_node\n+{\n+  tree decl;\n+  struct varpool_node *next_needed, *prev_needed;\n+  unsigned externally_visible:1;\n+};\n+extern struct varpool_node *varpool_nodes_queue;\n+struct pointer_set_t;\n+struct pointer_set_t *pointer_set_create (void);\n+__inline__ static unsigned char\n+varpool_externally_visible_p (struct varpool_node *vnode,\n+\t\t\t      unsigned char aliased)\n+{\n+  struct varpool_node *alias;\n+  if (!(( { __typeof (vnode->decl) const __t = (vnode->decl); __t;})->decl_with_vis.comdat_flag)\n+      && !((vnode->decl)->base.public_flag))\n+    return 0;\n+  if (aliased)\n+    return 1;\n+  return 0;\n+}\n+\n+unsigned int\n+function_and_variable_visibility (unsigned char whole_program)\n+{\n+  struct cgraph_node *node;\n+  struct varpool_node *vnode;\n+  struct pointer_set_t *aliased_vnodes = pointer_set_create ();\n+  for (vnode = varpool_nodes_queue; vnode; vnode = vnode->next_needed)\n+    if (varpool_externally_visible_p\n+\t(vnode, pointer_set_contains (aliased_vnodes, vnode)))\n+      vnode->externally_visible = 1;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"& 255\" \"forwprop1\"} } */\n+/* { dg-final { cleanup-tree-dump \"forwprop1\" } } */"}, {"sha": "715082ceefb6fda38ac06a091db5f196cfe33e77", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e8a33f96b74947776324692e9f0b91fa93c4771/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e8a33f96b74947776324692e9f0b91fa93c4771/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=3e8a33f96b74947776324692e9f0b91fa93c4771", "patch": "@@ -1142,6 +1142,77 @@ forward_propagate_comparison (gimple_stmt_iterator *defgsi)\n }\n \n \n+/* GSI_P points to a statement which performs a narrowing integral\n+   conversion.\n+\n+   Look for cases like:\n+\n+     t = x & c;\n+     y = (T) t;\n+\n+   Turn them into:\n+\n+     t = x & c;\n+     y = (T) x;\n+\n+   If T is narrower than X's type and C merely masks off bits outside\n+   of (T) and nothing else.\n+\n+   Normally we'd let DCE remove the dead statement.  But no DCE runs\n+   after the last forwprop/combine pass, so we remove the obviously\n+   dead code ourselves.\n+\n+   Return TRUE if a change was made, FALSE otherwise.  */\n+\n+static bool \n+simplify_conversion_from_bitmask (gimple_stmt_iterator *gsi_p)\n+{\n+  gimple stmt = gsi_stmt (*gsi_p);\n+  gimple rhs_def_stmt = SSA_NAME_DEF_STMT (gimple_assign_rhs1 (stmt));\n+\n+  /* See if the input for the conversion was set via a BIT_AND_EXPR and\n+     the only use of the BIT_AND_EXPR result is the conversion.  */\n+  if (is_gimple_assign (rhs_def_stmt)\n+      && gimple_assign_rhs_code (rhs_def_stmt) == BIT_AND_EXPR\n+      && has_single_use (gimple_assign_lhs (rhs_def_stmt)))\n+    {\n+      tree rhs_def_operand1 = gimple_assign_rhs1 (rhs_def_stmt);\n+      tree rhs_def_operand2 = gimple_assign_rhs2 (rhs_def_stmt);\n+      tree lhs_type = TREE_TYPE (gimple_assign_lhs (stmt));\n+\n+      /* Now verify suitability of the BIT_AND_EXPR's operands.\n+\t The first must be an SSA_NAME that we can propagate and the\n+\t second must be an integer constant that masks out all the\n+\t bits outside the final result's type, but nothing else.  */\n+      if (TREE_CODE (rhs_def_operand1) == SSA_NAME\n+\t  && ! SSA_NAME_OCCURS_IN_ABNORMAL_PHI (rhs_def_operand1)\n+\t  && TREE_CODE (rhs_def_operand2) == INTEGER_CST\n+\t  && operand_equal_p (rhs_def_operand2,\n+\t\t\t      build_low_bits_mask (TREE_TYPE (rhs_def_operand2),\n+\t\t\t       \t\t\t   TYPE_PRECISION (lhs_type)),\n+\t\t\t\t\t\t   0))\n+\t{\n+\t  /* This is an optimizable case.  Replace the source operand\n+\t     in the conversion with the first source operand of the\n+\t     BIT_AND_EXPR.  */\n+\t  gimple_assign_set_rhs1 (stmt, rhs_def_operand1);\n+\t  stmt = gsi_stmt (*gsi_p);\n+\t  update_stmt (stmt);\n+\n+\t  /* There is no DCE after the last forwprop pass.  It's\n+\t     easy to clean up the first order effects here.  */\n+\t  gimple_stmt_iterator si;\n+\t  si = gsi_for_stmt (rhs_def_stmt);\n+\t  gsi_remove (&si, true);\n+\t  release_defs (rhs_def_stmt);\n+\t  return true;\n+\t}\n+    }\n+\n+  return false;\n+}\n+\n+\n /* If we have lhs = ~x (STMT), look and see if earlier we had x = ~y.\n    If so, we can change STMT into lhs = y which can later be copy\n    propagated.  Similarly for negation.\n@@ -3059,6 +3130,23 @@ ssa_forward_propagate_and_combine (void)\n \t\t    int did_something = combine_conversions (&gsi);\n \t\t    if (did_something == 2)\n \t\t      cfg_changed = true;\n+\n+\t\t    /* If we have a narrowing conversion to an integral\n+\t\t       type that is fed by a BIT_AND_EXPR, we might be\n+\t\t       able to remove the BIT_AND_EXPR if it merely\n+\t\t       masks off bits outside the final type (and nothing\n+\t\t       else.  */\n+\t\t    if (! did_something)\n+\t\t      {\n+\t\t\ttree outer_type = TREE_TYPE (gimple_assign_lhs (stmt));\n+\t\t\ttree inner_type = TREE_TYPE (gimple_assign_rhs1 (stmt));\n+\t\t\tif (INTEGRAL_TYPE_P (outer_type)\n+\t\t\t    && INTEGRAL_TYPE_P (inner_type)\n+\t\t\t    && (TYPE_PRECISION (outer_type)\n+\t\t\t\t<= TYPE_PRECISION (inner_type)))\n+\t\t\t  did_something = simplify_conversion_from_bitmask (&gsi);\n+\t\t      }\n+\t\t      \n \t\t    changed = did_something != 0;\n \t\t  }\n \t\telse if (code == VEC_PERM_EXPR)"}]}