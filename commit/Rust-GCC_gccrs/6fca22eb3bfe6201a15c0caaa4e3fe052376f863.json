{"sha": "6fca22eb3bfe6201a15c0caaa4e3fe052376f863", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZjYTIyZWIzYmZlNjIwMWExNWMwY2FhYTRlM2ZlMDUyMzc2Zjg2Mw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-02-08T19:15:37Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-02-08T19:15:37Z"}, "message": "i386.c (ix86_frame_pointer_required): New.\n\n        * config/i386/i386.c (ix86_frame_pointer_required): New.\n        (ix86_setup_frame_addresses): New.\n        (struct machine_funciton): Add accesses_prev_frame.\n        * config/i386/i386.h (FRAME_POINTER_REQUIRED): Call\n        ix86_frame_pointer_required.\n        (SUBTARGET_FRAME_POINTER_REQUIRED): New.\n        (SETUP_FRAME_ADDRESSES): New.\n        * config/i386/i386-protos.h: Update.\n        * config/i386/sco5.h (SUBTARGET_FRAME_POINTER_REQUIRED): Rename\n        from FRAME_POINTER_REQUIRED.\n        * config/i386/svr3gas.h: Likewise.\n        * config/i386/sysv3.h: Likewise.\n        * config/i386/v3gas.h: Likewise.\n\nFrom-SVN: r39545", "tree": {"sha": "7bfdc1fbdd58f1d791269ff112f6d82fe9deeb0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bfdc1fbdd58f1d791269ff112f6d82fe9deeb0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fca22eb3bfe6201a15c0caaa4e3fe052376f863", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fca22eb3bfe6201a15c0caaa4e3fe052376f863", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fca22eb3bfe6201a15c0caaa4e3fe052376f863", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fca22eb3bfe6201a15c0caaa4e3fe052376f863/comments", "author": null, "committer": null, "parents": [{"sha": "0020b823d6c3280e7e0a2081a36798a80b17bf7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0020b823d6c3280e7e0a2081a36798a80b17bf7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0020b823d6c3280e7e0a2081a36798a80b17bf7d"}], "stats": {"total": 184, "additions": 123, "deletions": 61}, "files": [{"sha": "64633565eb46a608cc8c510d90967c87c0b72517", "filename": "gcc/ChangeLog", "status": "modified", "additions": 68, "deletions": 52, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fca22eb3bfe6201a15c0caaa4e3fe052376f863/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fca22eb3bfe6201a15c0caaa4e3fe052376f863/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6fca22eb3bfe6201a15c0caaa4e3fe052376f863", "patch": "@@ -1,3 +1,19 @@\n+2001-02-08  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.c (ix86_frame_pointer_required): New.\n+\t(ix86_setup_frame_addresses): New.\n+\t(struct machine_funciton): Add accesses_prev_frame.\n+\t* config/i386/i386.h (FRAME_POINTER_REQUIRED): Call\n+\tix86_frame_pointer_required.\n+\t(SUBTARGET_FRAME_POINTER_REQUIRED): New.\n+\t(SETUP_FRAME_ADDRESSES): New.\n+\t* config/i386/i386-protos.h: Update.\n+\t* config/i386/sco5.h (SUBTARGET_FRAME_POINTER_REQUIRED): Rename\n+\tfrom FRAME_POINTER_REQUIRED.\n+\t* config/i386/svr3gas.h: Likewise.\n+\t* config/i386/sysv3.h: Likewise.\n+\t* config/i386/v3gas.h: Likewise.\n+\n 2001-02-08  Richard Henderson  <rth@redhat.com>\n \n \t* config/sparc/sparc.c (function_arg_record_value_3): Fix\n@@ -91,19 +107,19 @@ Thu Feb  8 11:21:28 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2001-01-30  Bruce Korb  <bkorb@gnu.org>\n \n-        fixinc/fixincl.c(process):  Emit error message only if appropriate :)\n-        (load_file): do not rely on load_file_data() to close file pointer\n-        fixinc/fixlib.c(load_file_data): do not close passed in file pointer\n+\tfixinc/fixincl.c(process):  Emit error message only if appropriate :)\n+\t(load_file): do not rely on load_file_data() to close file pointer\n+\tfixinc/fixlib.c(load_file_data): do not close passed in file pointer\n \tfixinc/inclhack.def(irix_limits_const): add test_text\n \n 2001-02-06  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-        * cppexp.c (parse_defined): Improve diagnostics for invalid\n-        syntax.\n+\t* cppexp.c (parse_defined): Improve diagnostics for invalid\n+\tsyntax.\n \n 2001-02-06  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-        * cppmacro.c (cpp_get_token): Avoid pasting after a builtin.\n+\t* cppmacro.c (cpp_get_token): Avoid pasting after a builtin.\n \n 2001-02-06  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -155,13 +171,13 @@ Mon Feb  5 21:56:16 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n 2001-02-05  Chandrakala Chavva  <cchavva@redhat.com>\n \n \t* final.c: Move the declaration of profile_label_no to ...\n-        * output.h: ... here.\n-        * function.c (expand_function_start): Call PROFILE_HOOK.\n-        * config/rs6000/aix.h: Define PROFILE_HOOK.\n-        * config/rs6000/rs6000-protos.h: output_profile_hook new.\n-        * config/rs6000/rs6000.c (output_profile_hook): Define.\n-        (output_prolog): Do nothing for ABI_AIX as it is taken care by\n-        output_profile_hook.\n+\t* output.h: ... here.\n+\t* function.c (expand_function_start): Call PROFILE_HOOK.\n+\t* config/rs6000/aix.h: Define PROFILE_HOOK.\n+\t* config/rs6000/rs6000-protos.h: output_profile_hook new.\n+\t* config/rs6000/rs6000.c (output_profile_hook): Define.\n+\t(output_prolog): Do nothing for ABI_AIX as it is taken care by\n+\toutput_profile_hook.\n \ttm.texi : Explain new macro PROFILE_HOOK.\n \n 2001-02-06  Hans-Peter Nilsson  <hp@axis.com>\n@@ -176,7 +192,7 @@ Mon Feb  5 21:56:16 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t* Makefile.in (gcc_gxx_target_include_dir): Use $(target_alias).\n \n 2001-02-05  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n-            David Edelsohn  <edelsohn@gnu.org>\n+\t    David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.c (rs6000_return_addr): Use PIC \n \tcode for AIX, even without flag_pic.\n@@ -317,13 +333,13 @@ Sun Feb  4 15:52:44 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2001-02-03  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-        * cpphash.h: Rename _ALIGN POOL_ALIGN.\n-        * cpplex.c (new_chunk, _cpp_pool_reserve): Update.  \n+\t* cpphash.h: Rename _ALIGN POOL_ALIGN.\n+\t* cpplex.c (new_chunk, _cpp_pool_reserve): Update.  \n \n 2001-02-03  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-        * cpphash.h: Rename ALIGN _ALIGN.\n-        * cpplex.c (new_chunk, _cpp_pool_reserve): Update.  \n+\t* cpphash.h: Rename ALIGN _ALIGN.\n+\t* cpplex.c (new_chunk, _cpp_pool_reserve): Update.  \n \n Fri Feb  2 23:15:29 2001  Christopher Faylor <cgf@cygnus.com>\n \n@@ -433,16 +449,16 @@ Fri Feb  2 20:03:50 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2001-02-01  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-        * cpphash.h (struct cpp_buffer): Move saved_flags from cpp_reader.\n-        * cpplex.c (_cpp_lex_token): New token picks up the saved flags,\n-        and AVOID_LPASTE is cleared on meeting an unescaped newline.\n-        * cppmacro.c (builtin_macro): Set builtin flags here.\n-        (paste_all_tokens): Preserve AVOID_LPASTE on pasted token.\n-        (replace_args): Clarify intent.\n-        (cpp_get_token): Macro expansion tokens get the saved flags.\n-        Update.\n-        * cppmain.c (scan_buffer): Remove now-redundant print.printed\n-        check.\n+\t* cpphash.h (struct cpp_buffer): Move saved_flags from cpp_reader.\n+\t* cpplex.c (_cpp_lex_token): New token picks up the saved flags,\n+\tand AVOID_LPASTE is cleared on meeting an unescaped newline.\n+\t* cppmacro.c (builtin_macro): Set builtin flags here.\n+\t(paste_all_tokens): Preserve AVOID_LPASTE on pasted token.\n+\t(replace_args): Clarify intent.\n+\t(cpp_get_token): Macro expansion tokens get the saved flags.\n+\tUpdate.\n+\t* cppmain.c (scan_buffer): Remove now-redundant print.printed\n+\tcheck.\n \n 2001-02-01  Jeffrey Oldham  <oldham@codesourcery.com>\n \n@@ -520,14 +536,14 @@ Thu Feb  1 07:22:41 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2001-01-31  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-        * cpplib.c (T_ELIF): Move to STDC89, not that it matters.\n-        (_cpp_handle_directive): Suggest not using #elif with -Wtraditional.\n+\t* cpplib.c (T_ELIF): Move to STDC89, not that it matters.\n+\t(_cpp_handle_directive): Suggest not using #elif with -Wtraditional.\n \n 2001-01-31  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-        * cpphash.h (struct cpp_reader): New saved_flags.\n-        * cppmacro.c (cpp_get_token): Use saved_flags to remember\n-        to avoid a paste after a pasted token.\n+\t* cpphash.h (struct cpp_reader): New saved_flags.\n+\t* cppmacro.c (cpp_get_token): Use saved_flags to remember\n+\tto avoid a paste after a pasted token.\n \t  \n 2001-01-31  Alexandre Oliva  <aoliva@redhat.com>\n \n@@ -568,10 +584,10 @@ Thu Feb  1 07:22:41 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2001-01-30  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-        * c-decl.c (c_expand_body): Check TYPE_SIZE_UNIT (ret_type)\n-        is not NULL.\n-        * toplev.c (decode_W_option): Update warn_larger_than\n-        unconditionally for each processed switch.\n+\t* c-decl.c (c_expand_body): Check TYPE_SIZE_UNIT (ret_type)\n+\tis not NULL.\n+\t* toplev.c (decode_W_option): Update warn_larger_than\n+\tunconditionally for each processed switch.\n \n 2001-01-30  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n@@ -585,7 +601,7 @@ Thu Feb  1 07:22:41 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2001-01-29  lars brinkhoff  <lars@nocrew.org>\n \n-        * tm.texi (PUSH_ROUNDING): Remove duplicate lines.\n+\t* tm.texi (PUSH_ROUNDING): Remove duplicate lines.\n \n 2001-01-29  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \t    Jeff Law <law@redhat.com>\n@@ -632,8 +648,8 @@ Mon Jan 29 20:38:19 2001  Christopher Faylor <cgf@cygnus.com>\n \n 2001-01-29  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-        * cpplib.c (T_BAD_DIRECTIVE): Remove.\n-        (_cpp_init_stacks): Loop from 0 to N_DIRECTIVES - 1.\n+\t* cpplib.c (T_BAD_DIRECTIVE): Remove.\n+\t(_cpp_init_stacks): Loop from 0 to N_DIRECTIVES - 1.\n \n 2001-01-29  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n@@ -668,18 +684,18 @@ Mon Jan 29 20:38:19 2001  Christopher Faylor <cgf@cygnus.com>\n \n 2001-01-28  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n-        * cpphash.c (_cpp_cleanup_hashtable, _cpp_lookup_with_hash)\n-        : Don't set fe_value.\n-        * cpplib.h (AVOID_LPASTE): New flag. \n-        (struct cpp_hashnode): Remove fe_value.\n-        * cpplex.c (cpp_avoid_paste): Don't paste '.' with a number.\n-        * cppmacro.c (builtin_macro): Don't set flags here.\n-        (replace_args): Set AVOID_LPASTE flag on first token of an\n-        argument, and the token following it.\n-        (cpp_get_token): Set AVOID_LPASTE flag on first token of a\n-        macro expansion, and on the token following it.  Do it for\n-        builtins too.\n-        * cppmain.c (scan_buffer): Avoid pasting only flagged tokens.\n+\t* cpphash.c (_cpp_cleanup_hashtable, _cpp_lookup_with_hash)\n+\t: Don't set fe_value.\n+\t* cpplib.h (AVOID_LPASTE): New flag. \n+\t(struct cpp_hashnode): Remove fe_value.\n+\t* cpplex.c (cpp_avoid_paste): Don't paste '.' with a number.\n+\t* cppmacro.c (builtin_macro): Don't set flags here.\n+\t(replace_args): Set AVOID_LPASTE flag on first token of an\n+\targument, and the token following it.\n+\t(cpp_get_token): Set AVOID_LPASTE flag on first token of a\n+\tmacro expansion, and on the token following it.  Do it for\n+\tbuiltins too.\n+\t* cppmain.c (scan_buffer): Avoid pasting only flagged tokens.\n \n 2001-01-27  Richard Henderson  <rth@redhat.com>\n "}, {"sha": "03fa84f37955e8e413cf124a802697105790c663", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fca22eb3bfe6201a15c0caaa4e3fe052376f863/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fca22eb3bfe6201a15c0caaa4e3fe052376f863/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=6fca22eb3bfe6201a15c0caaa4e3fe052376f863", "patch": "@@ -25,6 +25,8 @@ extern void order_regs_for_local_alloc PARAMS ((void));\n extern void optimization_options PARAMS ((int, int));\n \n extern int ix86_can_use_return_insn_p PARAMS ((void));\n+extern int ix86_frame_pointer_required PARAMS ((void));\n+extern void ix86_setup_frame_addresses PARAMS ((void));\n \n extern void ix86_asm_file_end PARAMS ((FILE *));\n extern void load_pic_register PARAMS ((void));"}, {"sha": "2737b6bccd44fd89b830eb20325852540ed399cd", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fca22eb3bfe6201a15c0caaa4e3fe052376f863/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fca22eb3bfe6201a15c0caaa4e3fe052376f863/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6fca22eb3bfe6201a15c0caaa4e3fe052376f863", "patch": "@@ -331,6 +331,7 @@ struct rtx_def *ix86_compare_op1 = NULL_RTX;\n struct machine_function\n {\n   rtx stack_locals[(int) MAX_MACHINE_MODE][MAX_386_STACK_LOCALS];\n+  int accesses_prev_frame;\n };\n \n #define ix86_stack_locals (cfun->machine->stack_locals)\n@@ -1700,6 +1701,40 @@ ix86_can_use_return_insn_p ()\n   tsize = ix86_compute_frame_size (get_frame_size (), &nregs, NULL, NULL);\n   return tsize == 0 && nregs == 0;\n }\n+\n+/* Value should be nonzero if functions must have frame pointers.\n+   Zero means the frame pointer need not be set up (and parms may\n+   be accessed via the stack pointer) in functions that seem suitable.  */\n+\n+int\n+ix86_frame_pointer_required ()\n+{\n+  /* If we accessed previous frames, then the generated code expects\n+     to be able to access the saved ebp value in our frame.  */\n+  if (cfun->machine->accesses_prev_frame)\n+    return 1;\n+  \n+  /* Several x86 os'es need a frame pointer for other reasons,\n+     usually pertaining to setjmp.  */\n+  if (SUBTARGET_FRAME_POINTER_REQUIRED)\n+    return 1;\n+\n+  /* In override_options, TARGET_OMIT_LEAF_FRAME_POINTER turns off\n+     the frame pointer by default.  Turn it back on now if we've not\n+     got a leaf function.  */\n+  if (TARGET_OMIT_LEAF_FRAME_POINTER && ! leaf_function_p ())\n+    return 1;\n+\n+  return 0;\n+}\n+\n+/* Record that the current function accesses previous call frames.  */\n+\n+void\n+ix86_setup_frame_addresses ()\n+{\n+  cfun->machine->accesses_prev_frame = 1;\n+}\n \f\n static char pic_label_name[32];\n "}, {"sha": "4800872419825c7bc4f375c52846a916ec325204", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fca22eb3bfe6201a15c0caaa4e3fe052376f863/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fca22eb3bfe6201a15c0caaa4e3fe052376f863/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=6fca22eb3bfe6201a15c0caaa4e3fe052376f863", "patch": "@@ -852,7 +852,16 @@ extern int ix86_arch;\n    Zero means the frame pointer need not be set up (and parms\n    may be accessed via the stack pointer) in functions that seem suitable.\n    This is computed in `reload', in reload1.c.  */\n-#define FRAME_POINTER_REQUIRED (TARGET_OMIT_LEAF_FRAME_POINTER && !leaf_function_p ()) \t\n+#define FRAME_POINTER_REQUIRED  ix86_frame_pointer_required ()\n+\n+/* Override this in other tm.h files to cope with various OS losage\n+   requiring a frame pointer.  */\n+#ifndef SUBTARGET_FRAME_POINTER_REQUIRED\n+#define SUBTARGET_FRAME_POINTER_REQUIRED 0\n+#endif\n+\n+/* Make sure we can access arbitrary call frames.  */\n+#define SETUP_FRAME_ADDRESSES()  ix86_setup_frame_addresses ()\n \n /* Base register for access to arguments of the function.  */\n #define ARG_POINTER_REGNUM 16"}, {"sha": "ae832b91f5f5167c3b71828b5ee5c238ee178aee", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fca22eb3bfe6201a15c0caaa4e3fe052376f863/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fca22eb3bfe6201a15c0caaa4e3fe052376f863/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=6fca22eb3bfe6201a15c0caaa4e3fe052376f863", "patch": "@@ -632,8 +632,8 @@ dtors_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-#undef FRAME_POINTER_REQUIRED\n-#define FRAME_POINTER_REQUIRED\t\t\t\t\t\t\\\n+#undef SUBTARGET_FRAME_POINTER_REQUIRED\n+#define SUBTARGET_FRAME_POINTER_REQUIRED\t\t\t\t\\\n   ((TARGET_ELF) ? 0 : \t\t\t\t\t\t\t\\\n    (current_function_calls_setjmp || current_function_calls_longjmp))\n "}, {"sha": "e5bf3db5b4b27bdf65868af4496c1dad690e78ce", "filename": "gcc/config/i386/svr3gas.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fca22eb3bfe6201a15c0caaa4e3fe052376f863/gcc%2Fconfig%2Fi386%2Fsvr3gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fca22eb3bfe6201a15c0caaa4e3fe052376f863/gcc%2Fconfig%2Fi386%2Fsvr3gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsvr3gas.h?ref=6fca22eb3bfe6201a15c0caaa4e3fe052376f863", "patch": "@@ -37,8 +37,8 @@ Boston, MA 02111-1307, USA.  */\n    Since a frame pointer will be required in such a function, it is OK\n    that the stack pointer is not restored.  */\n \n-#undef FRAME_POINTER_REQUIRED\n-#define FRAME_POINTER_REQUIRED \\\n+#undef SUBTARGET_FRAME_POINTER_REQUIRED\n+#define SUBTARGET_FRAME_POINTER_REQUIRED \\\n   (current_function_calls_setjmp || current_function_calls_longjmp)\n \n /* Modify ASM_OUTPUT_LOCAL slightly to test -msvr3-shlib, adapted to gas  */"}, {"sha": "9d7350283d2f20b37c49cbe87d1695ceb07cda3d", "filename": "gcc/config/i386/sysv3.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fca22eb3bfe6201a15c0caaa4e3fe052376f863/gcc%2Fconfig%2Fi386%2Fsysv3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fca22eb3bfe6201a15c0caaa4e3fe052376f863/gcc%2Fconfig%2Fi386%2Fsysv3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsysv3.h?ref=6fca22eb3bfe6201a15c0caaa4e3fe052376f863", "patch": "@@ -78,8 +78,8 @@ Boston, MA 02111-1307, USA.  */\n    Since a frame pointer will be required in such a function, it is OK\n    that the stack pointer is not restored.  */\n \n-#undef FRAME_POINTER_REQUIRED\n-#define FRAME_POINTER_REQUIRED \\\n+#undef SUBTARGET_FRAME_POINTER_REQUIRED\n+#define SUBTARGET_FRAME_POINTER_REQUIRED \\\n   (current_function_calls_setjmp || current_function_calls_longjmp)\n \n /* Modify ASM_OUTPUT_LOCAL slightly to test -msvr3-shlib.  */"}, {"sha": "a350ab40bcd3ceabb8d0c4bd158c7358515128b6", "filename": "gcc/config/i386/v3gas.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fca22eb3bfe6201a15c0caaa4e3fe052376f863/gcc%2Fconfig%2Fi386%2Fv3gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fca22eb3bfe6201a15c0caaa4e3fe052376f863/gcc%2Fconfig%2Fi386%2Fv3gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fv3gas.h?ref=6fca22eb3bfe6201a15c0caaa4e3fe052376f863", "patch": "@@ -37,8 +37,8 @@ Boston, MA 02111-1307, USA.  */\n    Since a frame pointer will be required in such a function, it is OK\n    that the stack pointer is not restored.  */\n \n-#undef FRAME_POINTER_REQUIRED\n-#define FRAME_POINTER_REQUIRED \\\n+#undef SUBTARGET_FRAME_POINTER_REQUIRED\n+#define SUBTARGET_FRAME_POINTER_REQUIRED \\\n   (current_function_calls_setjmp || current_function_calls_longjmp)\n \n /* Modify ASM_OUTPUT_LOCAL slightly to test -msvr3-shlib, adapted to gas  */"}]}