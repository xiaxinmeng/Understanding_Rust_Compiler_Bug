{"sha": "5c8db18ac645579a5974abb6ad0ed922b14dcb32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM4ZGIxOGFjNjQ1NTc5YTU5NzRhYmI2YWQwZWQ5MjJiMTRkY2IzMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-02-23T15:23:37Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-02-23T15:23:37Z"}, "message": "functional_hash.h (struct _Fnv_hash): Rename to _Fnv_hash_base.\n\n2010-02-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/functional_hash.h (struct _Fnv_hash): Rename\n\tto _Fnv_hash_base.\n\t(struct _Fnv_hash): Add, derives from the latter.\n\t(__hash_combine): Add.\n\t(hash<float>::operator()(float), hash<double>::operator()(double)):\n\tAdjust.\n\t* include/bits/basic_string.h (hash<string>, hash<wstring>,\n\thash<u16string>, hash<u32string>): Adjust.\n\t* src/hash-string-aux.cc: Adjust.\n\t* src/compatibility-c++0x.cc (hash<error_code>): Use __hash_combine.\n\t* include/std/system_error (hash<error_code>): Likewise.\n\t* include/std/thread (struct hash<thread::id>): Add.\n\t* include/tr1/functional_hash.h : Rename to _Fnv_hash_base.\n\t(struct _Fnv_hash): Add, derives from the latter.\n\t(hash<float>::operator()(float), hash<double>::operator()(double)):\n\tAdjust.\n\t* testsuite/30_threads/thread/id/hash.cc: New.\n\t* testsuite/30_threads/thread/cons/assign_neg.cc: Adjust dg-error\n\tline number.\n\t* testsuite/30_threads/thread/cons/copy_neg.cc: Likewise.\n\nFrom-SVN: r157005", "tree": {"sha": "5a389c42914e410ce5375c1480147999b90aeb07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a389c42914e410ce5375c1480147999b90aeb07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c8db18ac645579a5974abb6ad0ed922b14dcb32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c8db18ac645579a5974abb6ad0ed922b14dcb32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c8db18ac645579a5974abb6ad0ed922b14dcb32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c8db18ac645579a5974abb6ad0ed922b14dcb32/comments", "author": null, "committer": null, "parents": [{"sha": "0f9c8f569d2bdb6c8b0cd57fd3fd95acb9204029", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f9c8f569d2bdb6c8b0cd57fd3fd95acb9204029", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f9c8f569d2bdb6c8b0cd57fd3fd95acb9204029"}], "stats": {"total": 187, "additions": 133, "deletions": 54}, "files": [{"sha": "96006bcb4ccd712251000dcd4cbc0b68f3b0db4f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8db18ac645579a5974abb6ad0ed922b14dcb32/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8db18ac645579a5974abb6ad0ed922b14dcb32/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5c8db18ac645579a5974abb6ad0ed922b14dcb32", "patch": "@@ -1,3 +1,26 @@\n+2010-02-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/functional_hash.h (struct _Fnv_hash): Rename\n+\tto _Fnv_hash_base.\n+\t(struct _Fnv_hash): Add, derives from the latter.\n+\t(__hash_combine): Add.\n+\t(hash<float>::operator()(float), hash<double>::operator()(double)):\n+\tAdjust.\n+\t* include/bits/basic_string.h (hash<string>, hash<wstring>,\n+\thash<u16string>, hash<u32string>): Adjust.\n+\t* src/hash-string-aux.cc: Adjust.\n+\t* src/compatibility-c++0x.cc (hash<error_code>): Use __hash_combine.\n+\t* include/std/system_error (hash<error_code>): Likewise.\n+\t* include/std/thread (struct hash<thread::id>): Add.\n+\t* include/tr1/functional_hash.h : Rename to _Fnv_hash_base.\n+\t(struct _Fnv_hash): Add, derives from the latter.\n+\t(hash<float>::operator()(float), hash<double>::operator()(double)):\n+\tAdjust.\n+\t* testsuite/30_threads/thread/id/hash.cc: New.\n+\t* testsuite/30_threads/thread/cons/assign_neg.cc: Adjust dg-error\n+\tline number.\n+\t* testsuite/30_threads/thread/cons/copy_neg.cc: Likewise.\n+\n 2010-02-22  Janis Johnson  <janis187@us.ibm.com>\n \n \t* src/compatibility-ldbl.cc: Include new hash-long-double-aux.cc."}, {"sha": "4c1c427f1429deac89c0b621763a99f3c08d1a91", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8db18ac645579a5974abb6ad0ed922b14dcb32/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8db18ac645579a5974abb6ad0ed922b14dcb32/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=5c8db18ac645579a5974abb6ad0ed922b14dcb32", "patch": "@@ -2887,7 +2887,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       size_t\n       operator()(const string& __s) const\n-      { return _Fnv_hash<>::hash(__s.data(), __s.length()); }\n+      { return std::_Fnv_hash::hash(__s.data(), __s.length()); }\n     };\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n@@ -2900,7 +2900,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       operator()(const wstring& __s) const\n       {\n \tconst char* __p = reinterpret_cast<const char*>(__s.data());\n-\treturn _Fnv_hash<>::hash(__p, __s.length() * sizeof(wchar_t));\n+\treturn std::_Fnv_hash::hash(__p, __s.length() * sizeof(wchar_t));\n       }\n     };\n #endif\n@@ -2916,7 +2916,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       operator()(const u16string& __s) const\n       {\n \tconst char* __p = reinterpret_cast<const char*>(__s.data());\n-\treturn _Fnv_hash<>::hash(__p, __s.length() * sizeof(char16_t));\n+\treturn std::_Fnv_hash::hash(__p, __s.length() * sizeof(char16_t));\n       }\n     };\n \n@@ -2929,7 +2929,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       operator()(const u32string& __s) const\n       {\n \tconst char* __p = reinterpret_cast<const char*>(__s.data());\n-\treturn _Fnv_hash<>::hash(__p, __s.length() * sizeof(char32_t));\n+\treturn std::_Fnv_hash::hash(__p, __s.length() * sizeof(char32_t));\n       }\n     };\n #endif"}, {"sha": "8a29189979851f718124900ec9b2697035aa006a", "filename": "libstdc++-v3/include/bits/functional_hash.h", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8db18ac645579a5974abb6ad0ed922b14dcb32/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8db18ac645579a5974abb6ad0ed922b14dcb32/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h?ref=5c8db18ac645579a5974abb6ad0ed922b14dcb32", "patch": "@@ -117,14 +117,10 @@ namespace std\n #undef _Cxx_hashtable_define_trivial_hash\n \n   // Fowler / Noll / Vo (FNV) Hash (type FNV-1a)\n-  // (Used by the next specializations of std::hash.)\n-\n-  template<size_t = sizeof(size_t)>\n-    struct _Fnv_hash;\n \n   // Dummy generic implementation (for sizeof(size_t) != 4, 8).\n   template<size_t>\n-    struct _Fnv_hash\n+    struct _Fnv_hash_base\n     {\n       static size_t\n       hash(const char* __first, size_t __length)\n@@ -137,7 +133,7 @@ namespace std\n     };\n \n   template<>\n-    struct _Fnv_hash<4>\n+    struct _Fnv_hash_base<4>\n     {\n       static size_t\n       hash(const char* __first, size_t __length)\n@@ -153,7 +149,7 @@ namespace std\n     };\n   \n   template<>\n-    struct _Fnv_hash<8>\n+    struct _Fnv_hash_base<8>\n     {\n       static size_t\n       hash(const char* __first, size_t __length)\n@@ -169,32 +165,43 @@ namespace std\n       }\n     };\n \n+    struct _Fnv_hash\n+    : public _Fnv_hash_base<sizeof(size_t)>\n+    {\n+      using _Fnv_hash_base<sizeof(size_t)>::hash;\n+\n+      template<typename _Tp>\n+        static size_t\n+        hash(const _Tp& __val)\n+        { return hash(reinterpret_cast<const char*>(&__val),\n+\t\t      sizeof(__val)); }\n+    };\n+\n+  // Inspired by the Boost facility hash_combine.\n+  template<typename _Tp>\n+    inline size_t\n+    __hash_combine(size_t __hash, const _Tp& __val)\n+    {\n+      const size_t __tmp = std::_Fnv_hash::hash(__val);\n+      return __hash ^ (__tmp + 0x9e3779b9 + (__hash << 6) + (__hash >> 2));\n+    }\n+\n   /// Specialization for float.\n   template<>\n     inline size_t\n     hash<float>::operator()(float __val) const\n     {\n-      size_t __result = 0;\n-      \n       // 0 and -0 both hash to zero.\n-      if (__val != 0.0f)\n-\t__result = _Fnv_hash<>::hash(reinterpret_cast<const char*>(&__val),\n-\t\t\t\t     sizeof(__val));\n-      return __result;\n+      return __val != 0.0f ? std::_Fnv_hash::hash(__val) : 0;\n     }\n \n   /// Specialization for double.\n   template<>\n     inline size_t\n     hash<double>::operator()(double __val) const\n     {\n-      size_t __result = 0;\n-\n       // 0 and -0 both hash to zero.\n-      if (__val != 0.0)\n-\t__result = _Fnv_hash<>::hash(reinterpret_cast<const char*>(&__val),\n-\t\t\t\t     sizeof(__val));\n-      return __result;\n+      return __val != 0.0 ? std::_Fnv_hash::hash(__val) : 0;\n     }\n \n   /// Specialization for long double."}, {"sha": "9b6eff8e836e2a60cf0a6bad3db631baa28a8119", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8db18ac645579a5974abb6ad0ed922b14dcb32/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8db18ac645579a5974abb6ad0ed922b14dcb32/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=5c8db18ac645579a5974abb6ad0ed922b14dcb32", "patch": "@@ -108,6 +108,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   error_code make_error_code(errc);\n \n+  template<typename _Tp>\n+    struct hash;\n+\n   /// error_code\n   // Implementation-specific error identification\n   struct error_code\n@@ -159,6 +162,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n     // DR 804.\n   private:\n+    friend class hash<error_code>;\n+\n     int            \t\t_M_value;\n     const error_category* \t_M_cat;\n   };\n@@ -350,8 +355,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       size_t\n       operator()(const error_code& __e) const\n       {\n-\tconst char* __p = reinterpret_cast<const char*>(&__e);\n-\treturn _Fnv_hash<>::hash(__p, sizeof(__e));\n+\tconst size_t __tmp = std::_Fnv_hash::hash(__e._M_value);\n+\treturn std::__hash_combine(__tmp, __e._M_cat);\n       }\n     };\n "}, {"sha": "470f2c0f35cfb50e92cce38df4d72a46ee71063f", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8db18ac645579a5974abb6ad0ed922b14dcb32/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8db18ac645579a5974abb6ad0ed922b14dcb32/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=5c8db18ac645579a5974abb6ad0ed922b14dcb32", "patch": "@@ -42,6 +42,7 @@\n #include <condition_variable>\n #include <cstddef>\n #include <bits/functexcept.h>\n+#include <bits/functional_hash.h>\n #include <bits/gthr.h>\n \n #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n@@ -56,6 +57,9 @@ namespace std\n    * @{\n    */\n \n+  template<typename _Tp>\n+    struct hash;\n+\n   /// thread\n   class thread\n   {\n@@ -77,6 +81,7 @@ namespace std\n \n     private:\n       friend class thread;\n+      friend class hash<thread::id>;\n \n       friend bool\n       operator==(thread::id __x, thread::id __y)\n@@ -215,6 +220,17 @@ namespace std\n   operator>=(thread::id __x, thread::id __y)\n   { return !(__x < __y); }\n \n+  // DR 889.\n+  /// std::hash specialization for thread::id.\n+  template<>\n+    struct hash<thread::id>\n+    : public std::unary_function<thread::id, size_t>\n+    {\n+      size_t\n+      operator()(const thread::id& __id) const\n+      { return std::_Fnv_hash::hash(__id._M_thread); }\n+    };\n+\n   template<class _CharT, class _Traits>\n     inline basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __out, thread::id __id)"}, {"sha": "98fb187869516651d1177e8e92a44200cc826474", "filename": "libstdc++-v3/include/tr1/functional_hash.h", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8db18ac645579a5974abb6ad0ed922b14dcb32/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8db18ac645579a5974abb6ad0ed922b14dcb32/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h?ref=5c8db18ac645579a5974abb6ad0ed922b14dcb32", "patch": "@@ -1,6 +1,6 @@\n // TR1 functional_hash.h header -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -82,8 +82,8 @@ namespace tr1\n   // (Used by the next specializations of std::tr1::hash.)\n \n   /// Dummy generic implementation (for sizeof(size_t) != 4, 8).\n-  template<size_t = sizeof(size_t)>\n-    struct _Fnv_hash\n+  template<size_t>\n+    struct _Fnv_hash_base\n     {\n       static size_t\n       hash(const char* __first, size_t __length)\n@@ -96,7 +96,7 @@ namespace tr1\n     };\n \n   template<>\n-    struct _Fnv_hash<4>\n+    struct _Fnv_hash_base<4>\n     {\n       static size_t\n       hash(const char* __first, size_t __length)\n@@ -112,7 +112,7 @@ namespace tr1\n     };\n   \n   template<>\n-    struct _Fnv_hash<8>\n+    struct _Fnv_hash_base<8>\n     {\n       static size_t\n       hash(const char* __first, size_t __length)\n@@ -128,32 +128,34 @@ namespace tr1\n       }\n     };\n \n+  struct _Fnv_hash\n+  : public _Fnv_hash_base<sizeof(size_t)>\n+  {\n+    using _Fnv_hash_base<sizeof(size_t)>::hash;\n+\n+    template<typename _Tp>\n+      static size_t\n+      hash(const _Tp& __val)\n+      { return hash(reinterpret_cast<const char*>(&__val),\n+\t\t    sizeof(__val)); }\n+  };\n+\n   /// Explicit specializations for float.\n   template<>\n     inline size_t\n     hash<float>::operator()(float __val) const\n     {\n-      size_t __result = 0;\n-      \n       // 0 and -0 both hash to zero.\n-      if (__val != 0.0f)\n-\t__result = _Fnv_hash<>::hash(reinterpret_cast<const char*>(&__val),\n-\t\t\t\t     sizeof(__val));\n-      return __result;\n+      return __val != 0.0f ? std::tr1::_Fnv_hash::hash(__val) : 0;\n     }\n \n   /// Explicit specializations for double.\n   template<>\n     inline size_t\n     hash<double>::operator()(double __val) const\n     {\n-\tsize_t __result = 0;\n-\n-\t// 0 and -0 both hash to zero.\n-\tif (__val != 0.0)\n-\t  __result = _Fnv_hash<>::hash(reinterpret_cast<const char*>(&__val),\n-\t\t\t\t       sizeof(__val));\n-\treturn __result;\n+      // 0 and -0 both hash to zero.\n+      return __val != 0.0 ? std::tr1::_Fnv_hash::hash(__val) : 0;\n     }\n \n   /// Explicit specializations for long double."}, {"sha": "7dd57680484fdb1d237fc417fb713ab3fc2ee6a1", "filename": "libstdc++-v3/src/compatibility-c++0x.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8db18ac645579a5974abb6ad0ed922b14dcb32/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8db18ac645579a5974abb6ad0ed922b14dcb32/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc?ref=5c8db18ac645579a5974abb6ad0ed922b14dcb32", "patch": "@@ -55,8 +55,8 @@ namespace std\n   template<>\n     size_t\n     hash<error_code>::operator()(error_code __e) const\n-    { \n-      const char* __p = reinterpret_cast<const char*>(&__e);\n-      return _Fnv_hash<>::hash(__p, sizeof(__e));\n+    {\n+      const size_t __tmp = std::_Fnv_hash::hash(__e._M_value);\n+      return std::__hash_combine(__tmp, __e._M_cat);\n     }\n }"}, {"sha": "b5a2c6ddc3da815d8e0ccb9e62fc32a11574e162", "filename": "libstdc++-v3/src/hash-string-aux.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8db18ac645579a5974abb6ad0ed922b14dcb32/libstdc%2B%2B-v3%2Fsrc%2Fhash-string-aux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8db18ac645579a5974abb6ad0ed922b14dcb32/libstdc%2B%2B-v3%2Fsrc%2Fhash-string-aux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhash-string-aux.cc?ref=5c8db18ac645579a5974abb6ad0ed922b14dcb32", "patch": "@@ -26,28 +26,28 @@\n   template<>\n     size_t\n     hash<string>::operator()(string __s) const\n-    { return _Fnv_hash<>::hash(__s.data(), __s.length()); }\n+    { return _Fnv_hash::hash(__s.data(), __s.length()); }\n \n   template<>\n     size_t\n     hash<const string&>::operator()(const string& __s) const\n-    { return _Fnv_hash<>::hash(__s.data(), __s.length()); }\n+    { return _Fnv_hash::hash(__s.data(), __s.length()); }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     size_t\n     hash<wstring>::operator()(wstring __s) const\n     {\n       const char* __p = reinterpret_cast<const char*>(__s.data());\n-      return _Fnv_hash<>::hash(__p, __s.length() * sizeof(wchar_t));\n+      return _Fnv_hash::hash(__p, __s.length() * sizeof(wchar_t));\n     }\n \n   template<>\n     size_t\n     hash<const wstring&>::operator()(const wstring& __s) const\n     {\n       const char* __p = reinterpret_cast<const char*>(__s.data());\n-      return _Fnv_hash<>::hash(__p, __s.length() * sizeof(wchar_t));\n+      return _Fnv_hash::hash(__p, __s.length() * sizeof(wchar_t));\n     }\n #endif\n "}, {"sha": "f45b9f203aec45f3c9357a4a6464c52d4e47fc00", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8db18ac645579a5974abb6ad0ed922b14dcb32/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8db18ac645579a5974abb6ad0ed922b14dcb32/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fassign_neg.cc?ref=5c8db18ac645579a5974abb6ad0ed922b14dcb32", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,4 +32,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 31 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 144 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 149 }"}, {"sha": "ce5034bf5024f2e5a1af9f385df5d52e1e7ad73b", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/copy_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8db18ac645579a5974abb6ad0ed922b14dcb32/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8db18ac645579a5974abb6ad0ed922b14dcb32/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fcopy_neg.cc?ref=5c8db18ac645579a5974abb6ad0ed922b14dcb32", "patch": "@@ -3,7 +3,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,5 +31,5 @@ void test01()\n }\n \n // { dg-error \"here\" \"\" { target *-*-* } 30 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 122 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 127 }\n // { dg-excess-errors \"In file included from\" }"}, {"sha": "86acac84ca21e020b90f1b196bd7164e93382ecf", "filename": "libstdc++-v3/testsuite/30_threads/thread/id/hash.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8db18ac645579a5974abb6ad0ed922b14dcb32/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fid%2Fhash.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8db18ac645579a5974abb6ad0ed922b14dcb32/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fid%2Fhash.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fid%2Fhash.cc?ref=5c8db18ac645579a5974abb6ad0ed922b14dcb32", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <thread>\n+\n+// thread::id hash\n+std::hash<std::thread::id> h1;"}]}