{"sha": "e51c6661ff575384cb5e180eacf0b14e6f6d079e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUxYzY2NjFmZjU3NTM4NGNiNWUxODBlYWNmMGIxNGU2ZjZkMDc5ZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-06T21:40:25Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-06T21:40:25Z"}, "message": "(CALL_INSN_FUNCTION_USAGE): New macro.\n\n(find_reg{,no}_fusage): Prototype for new function.\n\nFrom-SVN: r7234", "tree": {"sha": "741957b98622d1b9b033594b1efa1a453b7c6003", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/741957b98622d1b9b033594b1efa1a453b7c6003"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e51c6661ff575384cb5e180eacf0b14e6f6d079e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e51c6661ff575384cb5e180eacf0b14e6f6d079e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e51c6661ff575384cb5e180eacf0b14e6f6d079e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e51c6661ff575384cb5e180eacf0b14e6f6d079e/comments", "author": null, "committer": null, "parents": [{"sha": "cc8677043873e50d6e7f507e4fb9b6ea514913f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc8677043873e50d6e7f507e4fb9b6ea514913f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc8677043873e50d6e7f507e4fb9b6ea514913f5"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "b0eb1c521fcab1c07fd2f7372e0aad70b8ae72be", "filename": "gcc/rtl.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e51c6661ff575384cb5e180eacf0b14e6f6d079e/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e51c6661ff575384cb5e180eacf0b14e6f6d079e/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=e51c6661ff575384cb5e180eacf0b14e6f6d079e", "patch": "@@ -358,6 +358,15 @@ enum reg_note { REG_DEAD = 1, REG_INC = 2, REG_EQUIV = 3, REG_WAS_0 = 4,\n extern char *reg_note_name[];\n #define GET_REG_NOTE_NAME(MODE) (reg_note_name[(int)(MODE)])\n \n+/* This field is only present on CALL_INSNs.  It holds a chain of EXPR_LIST of\n+   USE and CLOBBER expressions.\n+     USE expressions list the registers filled with arguments that\n+   are passed to the function.\n+     CLOBBER expressions document the registers explicitly clobbered\n+   by this CALL_INSN.\n+     Pseudo registers can not be mentioned in this list.  */\n+#define CALL_INSN_FUNCTION_USAGE(INSN)\t((INSN)->fld[7].rtx)\n+\n /* The label-number of a code-label.  The assembler label\n    is made from `L' and the label-number printed in decimal.\n    Label numbers are unique in a compilation.  */\n@@ -693,6 +702,8 @@ extern rtx rtx_alloc\t\t\tPROTO((RTX_CODE));\n extern rtvec rtvec_alloc\t\tPROTO((int));\n extern rtx find_reg_note\t\tPROTO((rtx, enum reg_note, rtx));\n extern rtx find_regno_note\t\tPROTO((rtx, enum reg_note, int));\n+extern int find_reg_fusage\t\tPROTO((rtx, enum rtx_code, rtx));\n+extern int find_regno_fusage\t\tPROTO((rtx, enum rtx_code, int));\n extern HOST_WIDE_INT get_integer_term\tPROTO((rtx));\n extern rtx get_related_value\t\tPROTO((rtx));\n extern rtx single_set\t\t\tPROTO((rtx));"}]}