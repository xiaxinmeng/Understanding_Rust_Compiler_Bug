{"sha": "8a0b57b3c7a133c91bb9375635909472749ca954", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGEwYjU3YjNjN2ExMzNjOTFiYjkzNzU2MzU5MDk0NzI3NDljYTk1NA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-02-24T10:51:42Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-02-24T10:51:42Z"}, "message": "re PR fortran/24519 (gfortran slow because of incomplete dependency checking)\n\n2006-02-24  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/24519\n\t* dependency.c (gfc_is_same_range): Correct typo.\n\t(gfc_check_section_vs_section): Call gfc_is_same_range.\n\n\tPR fortran/25395\n\t* trans-common.c (add_equivalences): Add a new flag that is set when\n\tan equivalence is seen that prevents more from being reset until the\n\tstart of a new traversal of the list, thus ensuring completion of\n\tall the equivalences.\n\n2006-02-24  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/24519\n\t* gfortran.dg/dependency_3.f90: New test.\n\t* gfortran.fortran-torture/execute/vect-3.f90: Remove two of the\n\tXFAILs.\n\n\tPR fortran/25395\n\t* gfortran.dg/equiv_6.f90: New test.\n\nFrom-SVN: r111416", "tree": {"sha": "dc27777b618a359e0083f3498fafe574f05d1710", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc27777b618a359e0083f3498fafe574f05d1710"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a0b57b3c7a133c91bb9375635909472749ca954", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a0b57b3c7a133c91bb9375635909472749ca954", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a0b57b3c7a133c91bb9375635909472749ca954", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a0b57b3c7a133c91bb9375635909472749ca954/comments", "author": null, "committer": null, "parents": [{"sha": "8097c268b057a760157ee16d3bd6ec436f7e5cfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8097c268b057a760157ee16d3bd6ec436f7e5cfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8097c268b057a760157ee16d3bd6ec436f7e5cfe"}], "stats": {"total": 147, "additions": 135, "deletions": 12}, "files": [{"sha": "f00072509bba7d32974e66e0771ffc23a91c2554", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0b57b3c7a133c91bb9375635909472749ca954/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0b57b3c7a133c91bb9375635909472749ca954/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8a0b57b3c7a133c91bb9375635909472749ca954", "patch": "@@ -1,3 +1,15 @@\n+2006-02-24  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/24519\n+\t* dependency.c (gfc_is_same_range): Correct typo.\n+\t(gfc_check_section_vs_section): Call gfc_is_same_range.\n+\n+\tPR fortran/25395\n+\t* trans-common.c (add_equivalences): Add a new flag that is set when\n+\tan equivalence is seen that prevents more from being reset until the\n+\tstart of a new traversal of the list, thus ensuring completion of\n+\tall the equivalences.\n+\n 2006-02-23  Erik Edelmann  <eedelman@gcc.gnu.org>\n \n \t* module.c (read_module): Remove redundant code lines."}, {"sha": "df6609bf9492f845002a292117c01d9993d4ea3c", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0b57b3c7a133c91bb9375635909472749ca954/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0b57b3c7a133c91bb9375635909472749ca954/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=8a0b57b3c7a133c91bb9375635909472749ca954", "patch": "@@ -159,7 +159,7 @@ gfc_is_same_range (gfc_array_ref * ar1, gfc_array_ref * ar2, int n, int def)\n     e1 = ar1->as->lower[n];\n \n   if (ar2->as && !e2)\n-    e2 = ar2->as->upper[n];\n+    e2 = ar2->as->lower[n];\n \n   /* Check we have values for both.  */\n   if (!(e1 && e2))\n@@ -538,15 +538,19 @@ gfc_check_section_vs_section (gfc_ref * lref, gfc_ref * rref, int n)\n   gfc_expr *r_start;\n   gfc_expr *r_stride;\n \n-  gfc_array_ref\tl_ar;\n-  gfc_array_ref\tr_ar;\n+  gfc_array_ref l_ar;\n+  gfc_array_ref r_ar;\n \n   mpz_t no_of_elements;\n-  mpz_t\tX1, X2;\n+  mpz_t X1, X2;\n   gfc_dependency dep;\n \n   l_ar = lref->u.ar;\n   r_ar = rref->u.ar;\n+  \n+  /* If they are the same range, return without more ado.  */\n+  if (gfc_is_same_range (&l_ar, &r_ar, n, 0))\n+    return GFC_DEP_EQUAL;\n \n   l_start = l_ar.start[n];\n   l_end = l_ar.end[n];"}, {"sha": "5d72a5086bca633e756d6ff9950b2f4766b59669", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0b57b3c7a133c91bb9375635909472749ca954/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0b57b3c7a133c91bb9375635909472749ca954/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=8a0b57b3c7a133c91bb9375635909472749ca954", "patch": "@@ -755,15 +755,20 @@ find_equivalence (segment_info *n)\n }\n \n \n-/* Add all symbols equivalenced within a segment.  We need to scan the\n-   segment list multiple times to include indirect equivalences.  */\n+  /* Add all symbols equivalenced within a segment.  We need to scan the\n+   segment list multiple times to include indirect equivalences.  Since\n+   a new segment_info can inserted at the beginning of the segment list,\n+   depending on its offset, we have to force a final pass through the\n+   loop by demanding that completion sees a pass with no matches; ie.\n+   all symbols with equiv_built set and no new equivalences found.  */\n \n static void\n add_equivalences (bool *saw_equiv)\n {\n   segment_info *f;\n-  bool more;\n+  bool seen_one, more;\n \n+  seen_one = false;\n   more = TRUE;\n   while (more)\n     {\n@@ -773,9 +778,12 @@ add_equivalences (bool *saw_equiv)\n \t  if (!f->sym->equiv_built)\n \t    {\n \t      f->sym->equiv_built = 1;\n-\t      more = find_equivalence (f);\n-\t      if (more)\n-\t\t*saw_equiv = true;\n+\t      seen_one = find_equivalence (f);\n+\t      if (seen_one)\n+\t\t{\n+\t\t  *saw_equiv = true;\n+\t\t  more = true;\n+\t\t}\n \t    }\n \t}\n     }"}, {"sha": "63ce0aa954f32a7fb975c0c75d08e1db90dc3551", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0b57b3c7a133c91bb9375635909472749ca954/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0b57b3c7a133c91bb9375635909472749ca954/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a0b57b3c7a133c91bb9375635909472749ca954", "patch": "@@ -1,3 +1,13 @@\n+2006-02-24  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/24519\n+\t* gfortran.dg/dependency_3.f90: New test.\n+\t* gfortran.fortran-torture/execute/vect-3.f90: Remove two of the\n+\tXFAILs.\n+\n+\tPR fortran/25395\n+\t* gfortran.dg/equiv_6.f90: New test.\n+\n 2006-02-23  Jeff Law  <law@redhat.com>\n \n \t* gcc.c-torture/compile/pr26425.c: New test."}, {"sha": "a9dfe935ea4af5daf7377fcd8f2c102d172ba75e", "filename": "gcc/testsuite/gfortran.dg/dependency_3.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0b57b3c7a133c91bb9375635909472749ca954/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0b57b3c7a133c91bb9375635909472749ca954/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_3.f90?ref=8a0b57b3c7a133c91bb9375635909472749ca954", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+! Tests the fix for PR24519, in which assignments with the same\n+! range of an assumed shape array, on the lhs and rhs, would be\n+! treated as causing a dependency.\n+!\n+! Contributed by Paul.Thomas  <pault@gcc.gnu.org>\n+!\n+  integer, parameter :: n = 100\n+  real :: x(n, n), v\n+  x = 1\n+  v = 0.1\n+  call foo (x, v)\n+  if (abs(sum (x) -  91.10847) > 1e-3) print *, sum (x)\n+contains\n+  subroutine foo (b, d)\n+    real :: b(:, :)\n+    real :: temp(n), c, d\n+    integer :: j, k\n+    do k = 1, n\n+      temp = b(:,k)\n+      do j = 1, n\n+        c = b(k,j)*d\n+        b(:,j) = b(:,j)-temp*c  ! This was the offending assignment.\n+        b(k,j) = c\n+      end do\n+    end do\n+  end subroutine foo\n+end"}, {"sha": "92ba769ff4960ab12057fc19b3803d8ef9477678", "filename": "gcc/testsuite/gfortran.dg/equiv_6.f90", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0b57b3c7a133c91bb9375635909472749ca954/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0b57b3c7a133c91bb9375635909472749ca954/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_6.f90?ref=8a0b57b3c7a133c91bb9375635909472749ca954", "patch": "@@ -0,0 +1,63 @@\n+! { dg-do run }\n+! This checks the patch for PR25395, in which equivalences within one\n+! segment were broken by indirect equivalences, depending on the\n+! offset of the variable that bridges the indirect equivalence.\n+!\n+! This is a fortran95 version of the original testcase, which was\n+! contributed by Harald Vogt  <harald.vogt@desy.de>\n+program check_6\n+  common /abc/ mwkx(80)\n+  common /cde/ lischk(20)\n+  dimension    listpr(20),lisbit(10),lispat(8)\n+! This was badly compiled in the PR:\n+  equivalence (listpr(10),lisbit(1),mwkx(10)), &\n+              (lispat(1),listpr(10))\n+  lischk = (/0, 0, 0, 0, 0, 0, 0, 0, 0, 1, &\n+             2, 0, 0, 5, 6, 7, 8, 9,10, 0/)\n+  call set_arrays (listpr, lisbit)\n+  if (any (listpr.ne.lischk)) call abort ()\n+  call sub1\n+  call sub2\n+  call sub3\n+end\n+subroutine sub1\n+  common /abc/ mwkx(80)\n+  common /cde/ lischk(20)\n+  dimension    listpr(20),lisbit(10),lispat(8)\n+!     This workaround was OK\n+  equivalence (listpr(10),lisbit(1)), &\n+              (listpr(10),mwkx(10)),  &\n+              (listpr(10),lispat(1))\n+  call set_arrays (listpr, lisbit)\n+  if (any (listpr .ne. lischk)) call abort ()\n+end\n+!\n+! Equivalences not in COMMON\n+!___________________________\n+! This gave incorrect results for the same reason as in MAIN.\n+subroutine sub2\n+  dimension   mwkx(80)\n+  common /cde/ lischk(20)\n+  dimension    listpr(20),lisbit(10),lispat(8)\n+  equivalence (lispat(1),listpr(10)), &\n+              (mwkx(10),lisbit(1),listpr(10))\n+  call set_arrays (listpr, lisbit)\n+  if (any (listpr .ne. lischk)) call abort ()\n+end\n+! This gave correct results because the order in which the\n+! equivalences are taken is different and was given in the PR.\n+subroutine sub3\n+  dimension   mwkx(80)\n+  common /cde/ lischk(20)\n+  dimension    listpr(20),lisbit(10),lispat(8)\n+  equivalence (listpr(10),lisbit(1),mwkx(10)), &\n+              (lispat(1),listpr(10))\n+  call set_arrays (listpr, lisbit)\n+  if (any (listpr .ne. lischk)) call abort ()\n+end\n+subroutine set_arrays (listpr, lisbit)\n+  dimension listpr(20),lisbit(10)\n+  listpr = 0\n+  lisbit = (/(i, i = 1, 10)/)\n+  lisbit((/3,4/)) = 0\n+end"}, {"sha": "734ed95080140a0ce060a989088831254c4f9eab", "filename": "gcc/testsuite/gfortran.dg/vect/vect-3.f90", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0b57b3c7a133c91bb9375635909472749ca954/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0b57b3c7a133c91bb9375635909472749ca954/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-3.f90?ref=8a0b57b3c7a133c91bb9375635909472749ca954", "patch": "@@ -7,7 +7,5 @@ SUBROUTINE SAXPY(X, Y, A, N)\n END\n \n ! fail to vectorize due to failure to compute number of iterations (PR tree-optimization/18527)\n-! { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } \n-! { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail *-*-* } } } \n ! { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" { xfail *-*-* } } } \n ! { dg-final { cleanup-tree-dump \"vect\" } }"}]}